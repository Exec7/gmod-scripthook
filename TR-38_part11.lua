--Stealed clientside server code by exechack.cc
--Hostname: [TR] Venom Roleplay | DarkRP #venom25 - discord.gg/eniyisi  - Part 11/12 - 06/04/2025


--PATH lua/zclib/util/sh_effects.lua:
return gluapack()()
--lua/zclib/util/sh_money.lua:
return gluapack()()
--lua/zclib/util/cl_3d2dvgui.lua:
return gluapack()()
--lua/zclib/util/cl_fonts.lua:
return gluapack()()
--lua/zclib/zone/sh_zone.lua:
return gluapack()()
--addons/aphone/lua/autorun/aphone_loader.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/_utilities/cl_colors.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/_utilities/cl_colors.lua:
local clr = {
    Black48 = Color(48, 48, 48),
    Black40 = Color(40, 40, 40),
    Black40_120 = Color(40, 40, 40, 120),
    Silver = Color(200, 200, 200),
    White = Color(240, 240, 240),
    Black1 = Color(53, 59, 72),
    Black2 = Color(51, 54, 61),
    Black3 = Color(41, 45, 51),
    Text_White = Color(230, 240, 241),
    Text_White180 = Color(230, 240, 241, 180),
    Text_White120 = Color(230, 240, 241, 120),
    Text_White60 = Color(230, 240, 241, 60),
    Text_Shadow = Color(60, 60, 60, 60),
    Text_Orange = Color(230, 126, 34),
    Text_Apps = Color(230, 240, 241),
    GPS_Line = Color(230, 126, 34),
    -- Cookies
    Cookie_BoostOff = Color(218, 165, 32),
    Cookie_BoostOn = Color(255, 245, 112),
    Cookie_Blue = Color(72, 101, 129),
    -- Radio
    Radio_Background = Color(40, 40, 40),
    Radio_VolumeBar = Color(60, 60, 60),
    Radio_RadioList = Color(50, 50, 50),
    mat_red = Color(190, 55, 95),
    mat_blackred = Color(185, 32, 73),
    mat_lightred = Color(240, 194, 209),
    mat_black = Color(44, 44, 44),
    mat_orange = Color(237, 133, 84)
}


function aphone:DefaultClr(name)
    return clr[name]
end

local c = Color

function aphone:Color(name)
    local info = aphone.Clientside.GetSetting(name, clr[name])

    if istable(info) then
        aphone.Clientside.Varlist[name] = c(info.r, info.g, info.b, info.a or 255)
        info = aphone.Clientside.Varlist[name]
    end

    return info
end

hook.Add("aphone_PostLoad", "aphone_CreateParamsColors", function()
    for k, v in pairs(clr) do
        aphone:RegisterParameters("Colors", k, k, "color", aphone:DefaultClr(k))
    end
end)
--addons/aphone/lua/aphone/_libs/_utilities/cl_loadconfigapps.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/gamemodes_related/sh_nutscript.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/panels/cl_applist.lua:
local PANEL = {}

local mat_roundedboxsys = Material("akulla/aphone/rounded_boxappsys.png", "smooth 1")
local redb = Color(255, 0, 0)

function PANEL:Init()
    self:SetSize(self:GetParent():GetSize())

    local font_app = aphone:GetFont("Roboto18_500")
    local cache_shadow = Color(60, 60, 60, 60)
    local cache_whiteapp = aphone:Color("Text_Apps")
    local cache_stencil = Color(1, 1, 1, 1)

    local margin = self:GetWide() * 0.05
    local self_alt = self
    self:Phone_DrawTop(self:GetSize())

    local layout_app_panel = vgui.Create("DPanel", self)
    layout_app_panel:Dock(FILL)
    layout_app_panel:DockMargin(margin, margin + aphone.GUI.ScaledSizeY(24), margin, margin)
    layout_app_panel:SetPaintBackground(false)

    local app_syspnl = vgui.Create("DPanel", layout_app_panel)
    app_syspnl:Dock(BOTTOM)
    app_syspnl:SetTall(self:GetTall() * 0.13)

    function app_syspnl:Paint(w, h)
        //surface.SetDrawColor(cache_shadow)
        //surface.SetMaterial(mat_roundedboxsys)
        //surface.DrawTexturedRect(0, 0, w, h)
    end

    local perfect_iconsize = (self:GetWide() - margin * 4 - aphone.GUI.ScaledSizeX(20)) / 4

    local app_syslayout = vgui.Create("DIconLayout", app_syspnl)
    app_syslayout:Dock(FILL)
    app_syslayout:DockMargin(margin, margin, margin, margin)
    app_syslayout:SetSpaceX(aphone.GUI.ScaledSizeX(5))

    local app_scroll = vgui.Create("DScrollPanel", layout_app_panel)
    app_scroll:Dock(FILL)
    app_scroll:DockMargin(margin, margin, margin, margin)

    local app_layout = vgui.Create("DIconLayout", app_scroll)
    app_layout:Dock(FILL)
    app_layout:SetSpaceY(aphone.GUI.ScaledSizeX(self:GetTall()*0.015))
    app_layout:SetSpaceX(aphone.GUI.ScaledSizeX(5))
    app_layout:aphone_PaintScroll()

    local scaled_size30 = aphone.GUI.ScaledSizeY(30)

    // Let's load big app after normal apps
    local tbl_app = {}
    local tbl_appbig = {}

    for k, v in pairs(aphone.RegisteredApps) do
        table.insert(v.bigshow and tbl_appbig or tbl_app, v)
    end

    table.Add(tbl_app, tbl_appbig)

    for k,v in ipairs(tbl_app) do
        if v.ShowCondition and !v.ShowCondition(LocalPlayer()) then continue end

        local but = vgui.Create("DButton")
        but:SetText(v.Default and "" or v.name)
        but:SetContentAlignment(2)

        if v.bigshow then
            but:SetSize(perfect_iconsize * 2, perfect_iconsize * 2 + scaled_size30)
        else
            but:SetSize(perfect_iconsize, perfect_iconsize + scaled_size30)
        end

        but:SetFont(font_app)
        but:SetTextColor(cache_whiteapp)

        if v.Default then
            app_syslayout:Add(but)
        else
            app_layout:Add(but)
        end

        // CACHE EVERYTHING !
        local frac = 0
        local last_check = CurTime()
        local mat = v.icon
        local is_hovered = false
        local n = 0

        // Using IsHovered would be really easier, but when you got 15 buttons calling everytime this function, fprofiler cries
        function but:OnCursorEntered()
            is_hovered = true
        end

        function but:OnCursorExited()
            is_hovered = false
        end

        function but:Paint(w, h)
            if frac != 0 or is_hovered then
                local c = CurTime()

                if is_hovered then
                    frac = frac + (c - last_check) * 4
                else
                    frac = frac - (c - last_check) * 4
                end

                last_check = c

                // Math.clamp kill my fprofiler I dunno why
                if frac > 1 then
                    frac = 1
                elseif frac < 0 then
                    frac = 0
                end
            end

            surface.SetDrawColor(color_white)
            surface.SetMaterial(mat)
            surface.DrawTexturedRect(w * 0.05 * frac, h * 0.05 * frac, w * (1 - 0.1 * frac), (h - scaled_size30) * (1 - 0.1 * frac))

            if v.NotifyCount then
                local n = v:NotifyCount()

                if n != 0 then
                    DisableClipping(true)
                        draw.RoundedBox(8, w - (w * 0.05 * frac) - 12, -4, 16, 16, redb)
                    DisableClipping(false)
                end
            end
        end

        function but:DoClick()
            if v.Complete_Detour then
                v:Open()
                return
            end

            local pos_x, pos_y = self_alt:GetSize()

            local anim_p = vgui.Create("DPanel", self_alt:GetParent())
            anim_p:Dock(FILL)

            local p = vgui.Create("DPanel", anim_p)
            aphone.Horizontal = false
            p:Dock(FILL)

            // Circle open anim
            local anim = anim_p:NewAnimation(0.5, 0, 0.5)

            function anim:Think(_, frac_anim)
                anim_p.frac = frac_anim
            end

            function anim_p:PaintOver()
                render.SetStencilEnable(false)
            end

            function anim_p:OnRemove()
                if aphone.Running_App and aphone.Running_App.OnClose then
                    aphone.Running_App.OnClose()
                end
                aphone.Running_App = nil
                aphone.Force_AllowHorizontal = false
            end

            // End of anim

            local b_menu = vgui.Create("DButton", p)
            b_menu:Dock(BOTTOM)
            b_menu:SetText("")
            b_menu:SetTall(pos_y * 0.02)
            b_menu:DockMargin(pos_x * 0.2, 0, pos_x * 0.2, 0)

            function b_menu:Paint(w, h)
                draw.RoundedBox(h / 4, 0, 0, w, h / 2, color_black)
                draw.RoundedBox(h / 4, 2, 2, w-4, h / 2-4, color_white)
            end

            function b_menu:DoClick()
                if anim_p.phone_gettingremoved then return end
                local anim_back = anim_p:NewAnimation(0.5, 0, 0.5)

                function anim_back:Think(_, frac_anim)
                    anim_p.frac = frac_anim
                end

                if aphone.HorizontalApp then
                    aphone.RequestAnim(1)
                end

                anim_p.phone_gettingremoved = true
            end

            function anim_p:Paint(w,h)
                // I always enable stencil and not just reset it when frac > 1 because others stencil panel ( like avatar ) need the id to be 1 to do his job properly
                render.ClearStencil()
                // Reset
                render.SetStencilWriteMask( 0xFF )
                render.SetStencilTestMask( 0xFF )
                render.SetStencilFailOperation( STENCIL_ZERO )
                render.SetStencilZFailOperation( STENCIL_ZERO )

                // Enable
                render.SetStencilEnable(true)
                render.SetStencilReferenceValue( 1 )
                render.SetStencilCompareFunction( STENCIL_ALWAYS )
                render.SetStencilPassOperation( STENCIL_REPLACE )
                surface.SetDrawColor(cache_stencil)

                if self.phone_gettingremoved and self.frac == 1 then
                    self:Remove()
                    aphone.App_Panel = nil
                    render.SetStencilCompareFunction(STENCIL_NEVER)
                elseif self.frac < 1 then
                    local final_frac = self.phone_gettingremoved and 1 - self.frac or self.frac
                    local r = (w + h) / 2 * final_frac

                    surface.DrawPoly(aphone.GUI.GenerateCircle(w / 2, h / 2, r))
                    render.SetStencilCompareFunction(STENCIL_EQUAL)
                end

                if input.IsMouseDown(MOUSE_MIDDLE) and IsValid(b_menu) then
                    b_menu:DoClick()
                end
            end

            aphone.App_Panel = anim_p
            aphone.Running_App = v
            v:Open(p, pos_x, pos_y)
        end
    end

    self:GetParent():aphone_RemoveCursor()
end

vgui.Register("aphone_AppList", PANEL, "Panel")
--addons/aphone/lua/aphone/_libs/panels/cl_circleavatar.lua:
local PANEL = {}

local stencil_writemask = render.SetStencilWriteMask
local stencil_testmask = render.SetStencilTestMask
local stencil_id = render.SetStencilReferenceValue
local stencil_fail = render.SetStencilFailOperation
local stencil_zfail = render.SetStencilZFailOperation
local stencil_compare = render.SetStencilCompareFunction
local stencil_pass = render.SetStencilPassOperation

function PANEL:Init()
	self.avatar = vgui.Create("AvatarImage", self)
	self.avatar:SetPaintedManually(true)
	self.avatar:Dock(FILL)
	self.avatar:SetMouseInputEnabled(false)
	self:SetMouseInputEnabled(false)
	self:aphone_RemoveCursor()
end

function PANEL:SetPlayer(p, s)
	self.avatar:SetPlayer(p, s)
end

function PANEL:PerformLayout()
	self.border_poly = nil
end

local stencil_clr = Color(1, 1, 1, 1)
function PANEL:Paint(w, h)
	if !self.border_poly then
		if self.roundedValue then
			self.border_poly = aphone.GUI.RoundedBox(0, 0, w, h, 8)
		else
			self.border_poly = aphone.GUI.GenerateCircle(w / 2, h / 2, h < w and h/2 or w / 2)
		end
	end

	// Reset
	if self.ignorestencil then
		render.ClearStencil()
		render.SetStencilEnable(true)
	end
	stencil_writemask( 0xFF )
	stencil_testmask( 0xFF )
	stencil_fail( STENCIL_KEEP )
	stencil_zfail( STENCIL_KEEP )
	stencil_id( 1 )

	// Stencil
	stencil_compare( self.ignorestencil and STENCIL_ALWAYS or STENCIL_EQUAL )
	stencil_pass( self.ignorestencil and STENCIL_REPLACE or STENCIL_INCRSAT )

		draw.NoTexture()
		surface.SetDrawColor(stencil_clr)
		surface.DrawPoly(self.border_poly)

	stencil_id( self.ignorestencil and 1 or 2)
	stencil_pass( self.ignorestencil and STENCIL_KEEP or STENCIL_DECRSAT )
	stencil_compare(STENCIL_EQUAL)

		self.avatar:PaintManual()

	// Get settings back
	// Ignore stencil is only used in call panel actually
	if !self.ignorestencil then
		stencil_id( 1 )
		stencil_pass( STENCIL_REPLACE )
	else
		render.SetStencilEnable(false)
	end
end

vgui.Register("aphone_CircleAvatar", PANEL)
--addons/aphone/lua/aphone/_libs/panels/cl_mainpanel.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/panels/cl_notifications.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/printers/sh_elegantprinters.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/printers/sh_elegantprinters.lua:
hook.Add("PostGamemodeLoaded", "APhone_LoadPrinter_ElegantPrinters", function()
    if scripted_ents.Get("sent_elegant_printer") then
        aphone.Printer = aphone.Printer or {}

        function aphone.Printer.GetPrinters(ply)
            local tbl = {}

            for k, v in ipairs(ents.FindByClass("sent_elegant_printer")) do
                if v:CPPIGetOwner() == ply or v:Getowning_ent() == ply then
                    table.insert(tbl, v)
                end
            end

            return tbl
        end

        function aphone.Printer.FormatMoney(amt)
            return DarkRP.formatMoney(amt)
        end

        function aphone.Printer.GetInfo(ents)
            local capacity = 0
            local money = 0
            local sec = 0
            local danger = 0

            for k, v in ipairs(ents) do
                if IsValid(v) then
                    money = money + v:GetMoney()
                    capacity = capacity + v.MaxMoney

                    if v:GetMoney() < v.MaxMoney then
                        sec = sec + v.PrintAmount
                    end

                    danger = danger + (v:GetExploding() and 1 or 0)
                else
                    ents[k] = nil
                end
            end

            return {
                [1] = {
                    val = money,
                    name = "money",
                },

                [2] = {
                    val = sec,
                    name = "sec",
                },

                [3] = {
                    val = capacity,
                    name = "capacity",
                },

                [4] = {
                    val = danger,
                    name = "danger",
                },
            }, ents
        end
    end
end)
--addons/aphone/lua/aphone/_libs/printers/sh_lithiumprinter.lua:
hook.Add("PostGamemodeLoaded", "APhone_LoadPrinter_LthiumPrinter", function()
    if lp then
        aphone.Printer = aphone.Printer or {}

        function aphone.Printer.GetPrinters(ply)
            local tbl = {}

            for k, v in ipairs(ents.FindByClass("lithium_*_printer")) do
                if v:CPPIGetOwner() == ply or v:Getowning_ent() == ply then
                    table.insert(tbl, v)
                end
            end

            return tbl
        end

        function aphone.Printer.FormatMoney(amt)
            return aphone.Gamemode.Format(amt)
        end

        function aphone.Printer.GetInfo(ents)
            local capacity = 0
            local money = 0
            local sec = 0
            local danger = 0

            for k, v in ipairs(ents or {}) do
                if IsValid(v) then
                    money = money + v.data.stored
                    capacity = capacity + v.data.storage

                    if v.data.status and v.data.stored < v.data.storage and !v.data.isMalfunction then
                        sec = sec + (v.data.delay / v.data.delay)
                    end

                    danger = danger + (v.data.isOverheat and 1 or 0)
                else
                    ents[k] = nil
                end
            end

            return {
                [1] = {
                    val = money,
                    name = "money",
                },

                [2] = {
                    val = sec,
                    name = "sec",
                },

                [3] = {
                    val = capacity,
                    name = "capacity",
                },

                [4] = {
                    val = danger,
                    name = "danger",
                },
            }, ents
        end
    end
end)
--addons/aphone/lua/aphone/apps/call/cl_init.lua:
local APP = {}

APP.name = "Calls"
APP.icon = "akulla/aphone/app_calls.png"

local clr_blue = Color(93,207,202)
local redb = Color(255, 0, 0)

function APP:NotifyCount()
    return aphone.Clientside.GetSetting("callmissed", 0)
end

function APP:Open(main, main_x, main_y, screenmode)
    local clr_green = aphone:Color("Black2")
    local clr_black3 = aphone:Color("Black3")
    local clr_black1 = aphone:Color("Black1")
    local clr_white120 = aphone:Color("Text_White120")
    local font_bold = aphone:GetFont("Roboto45_700")
    local font_mediumheader = aphone:GetFont("MediumHeader")
    local sBox = aphone.GUI.ScaledSize(48)

    local tbl = {}

    function main:Paint(w, h)
        surface.SetDrawColor(clr_black3)
        surface.DrawRect(0,0,w,h)
    end

    local local_player = LocalPlayer()
    local already_ids = {}
    local already_num = {}

    local search_bg = vgui.Create("DPanel", main)
    search_bg:Dock(TOP)
    search_bg:DockMargin(main_x * 0.04, main_y * 0.05, main_x * 0.04, 0)
    search_bg:SetTall(main_y * 0.07)

    function search_bg:Paint(w, h)
        draw.RoundedBox(h / 2, 0, 0, w, h, clr_black1)
    end

    local search_icon = vgui.Create("DLabel", search_bg)
    search_icon:Dock(LEFT)
    search_icon:DockMargin(search_bg:GetTall() / 2, 0, 0, 0)
    search_icon:SetWide(search_bg:GetTall())
    search_icon:SetFont(aphone:GetFont("SVG_30"))
    search_icon:SetText("g")
    search_icon:SetTextColor(clr_white120)

    local search_entry = vgui.Create("DLabel", search_bg)
    search_entry:Dock(FILL)
    search_entry:DockMargin(0, 0, search_bg:GetTall() / 2, 0)
    search_entry:SetFont(font_mediumheader)
    search_entry:SetText(aphone.L("Search"))
    search_entry:SetMouseInputEnabled(true)
    search_entry:Phone_AlphaHover()

    function search_entry:DoClick()
        self:Phone_AskTextEntry(aphone.L("Search") != self:GetText() and self:GetText() or "", 32)
    end

    function search_entry:textChange(txt)
        txt = string.lower(txt or "")

        for k, v in pairs(tbl) do
            if !string.StartWith(k, txt) and !v.on_closeanim then
                // Reset it
                v:SetAnimationEnabled(false)
                v:SetAnimationEnabled(true)

                v:AlphaTo(0, 0.25, 0)
                v:SizeTo(-1, 0, 0.25, 0, 0.5)
                v.on_closeanim = true
            elseif string.StartWith(k, txt) then
                // Reset it
                if v.on_closeanim then
                    v:SetAnimationEnabled(false)
                    v:SetAnimationEnabled(true)
                end

                v:SizeTo(-1, sBox, 0.25, 0, 0.5)
                v:AlphaTo(255, 0.25, 0)
                v.on_closeanim = false
            end
        end
    end

    local sFont = draw.GetFontHeight(aphone:GetFont("SVG_40"))
    local dial = vgui.Create("DLabel", main)
    dial:Dock(BOTTOM)
    dial:DockMargin(0, 0, 0, main_y*0.05)
    dial:SetFont(aphone:GetFont("SVG_40"))
    dial:SetText("5")
    dial:SetContentAlignment(5)
    dial:SetTall(sFont)
    dial:SetMouseInputEnabled(true)
    dial:Phone_AlphaHover()

    local b = true
    local switch = vgui.Create("DLabel", dial)
    switch:Dock(RIGHT)
    switch:DockMargin(0, 0, sFont, 0)
    switch:SetFont(aphone:GetFont("SVG_40"))
    switch:SetText("4")
    switch:SetContentAlignment(5)
    switch:SetWide(sFont)
    switch:SetMouseInputEnabled(true)
    switch:Phone_AlphaHover()

    if aphone.Clientside.GetSetting("callmissed", 0) > 0 then
        function switch:Paint(w, h)
            DisableClipping(true)
                draw.RoundedBox(8, w - 12, -4, 16, 16, redb)
            DisableClipping(false)
        end
    end

    local player_list = vgui.Create("DScrollPanel", main)
    player_list:Dock(FILL)
    player_list:DockMargin(0, main_y * 0.02, 0, 0)
    player_list:aphone_PaintScroll()

    local function genCallable()
        local plyList = player.GetHumans()
        plyList = player.GetAll()

        for k, v in ipairs(plyList) do
            local id = v:aphone_GetID()

            if local_player == v or (aphone.disable_showingUnknownPlayers and !aphone.Contacts.GetName(id)) then continue end
            already_ids[id] = v

            // Get last message, for date + text display
            local player_main = vgui.Create("DButton", player_list)
            player_main:Dock(TOP)
            player_main:SetTall(sBox)
            player_main:DockMargin(main_x*0.1, main_y * 0.0125, main_x*0.1, 0)
            player_main:SetPaintBackground(false)
            player_main:TDLib()
            player_main:SetText("")
            player_main:FadeHover(clr_green, nil, 8)
    
            tbl[string.lower(aphone.GetName(v))] = player_main
    
            function player_main:DoClick()
                net.Start("aphone_Phone")
                    net.WriteUInt(1, 4)
                    net.WriteEntity(v)
                net.SendToServer()
            end
    
            local player_avatar = vgui.Create("aphone_CircleAvatar", player_main)
            player_avatar:SetPlayer(v, 184)
            player_avatar:Dock(LEFT)
            player_avatar:SetWide(sBox)
            player_avatar.roundedValue = 8
            player_avatar:DockMargin(0, 0, 0, 0)

            surface.SetFont(font_mediumheader)
            local player_textname = vgui.Create("DLabel", player_main)
            player_textname:Dock(FILL)
            player_textname:DockMargin(main_x * 0.05, 0, 5, 0)
            player_textname:SetFont(font_mediumheader)
            player_textname:SetTextColor(aphone:Color("Text_White"))
            player_textname:SetText(aphone.GetName(v))
            player_textname:SetMouseInputEnabled(false)
        end
    
        for k, v in ipairs(plyList) do
            if local_player == v or !v:aphone_GetNumber() then continue end
            already_num[v:aphone_GetNumber()] = v
        end
    end

    local function genHistory()
        already_ids = {}
        for k, v in ipairs(aphone.Clientside.GetSetting("callhistory", {})) do
            // Get last message, for date + text display
            local a = draw.GetFontHeight(aphone:GetFont("SVG_30"))/2

            local player_main = vgui.Create("DPanel", player_list)
            player_main:Dock(TOP)
            player_main:SetTall(sBox*1.66)
            player_main:DockMargin(main_x*0.1, main_y * 0.0125, main_x*0.1, 0)
            player_main:DockPadding(a, a, a, a)
            player_main:SetPaintBackground(false)
            player_main:TDLib()
            player_main:SetText("")
            //player_main:FadeHover(clr_green, nil, 8)

            function player_main:Paint(w, h)
                surface.SetDrawColor(100, 100, 100, 125)
                surface.DrawLine(0, h-1, w, h-1)
            end
    
            tbl[string.lower(aphone.GetName(v))] = player_main
    
            local player_avatar = vgui.Create("DLabel", player_main)
            player_avatar:Dock(LEFT)
            player_avatar:SetWide(sBox)
            player_avatar:SetFont(aphone:GetFont("SVG_30"))
            player_avatar:SetTextColor(aphone:Color("Text_White120"))
            player_avatar:DockMargin(0, 0, main_y * 0.005, 0)

            if v.p then
                player_avatar:SetText("4")

                if !v.is_caller then
                    player_avatar:SetTextColor(aphone:Color("mat_blackred"))
                end
            else
                player_avatar:SetText("o")
            end
    
            surface.SetFont(font_mediumheader)
            local player_textname = vgui.Create("DLabel", player_main)
            player_textname:Dock(TOP)
            player_textname:SetFont(aphone:GetFont("Small"))
            player_textname:SetTextColor(aphone:Color("Text_White"))
            player_textname:SetText(aphone.GetName(v))
            player_textname:SetMouseInputEnabled(false)
            player_textname:SetTall(player_main:GetTall()/2 - a)
            player_textname:SetContentAlignment(1)

            local player_time = vgui.Create("DLabel", player_main)
            player_time:Dock(TOP)
            player_time:SetFont(aphone:GetFont("Small"))
            player_time:SetTextColor(aphone:Color("Text_White"))
            player_time:SetText(aphone.FormatTimeStamp(os.time() - v.time))
            player_time:SetMouseInputEnabled(false)
            player_time:SetTall(player_main:GetTall()/2 - a)
            player_time:SetContentAlignment(7)
        end
    end

    function switch:DoClick()
        b = !b
        player_list:Clear()

        if !b then
            genCallable()
            switch:SetText("4")
            search_bg:SetTall(main_y * 0.07)
        else
            genHistory()
            switch:SetText("o")
            search_bg:SetTall(0)

            switch.Paint = function() end
            aphone.Clientside.SaveSetting("callmissed", 0)
        end

        main:aphone_RemoveCursor()
    end
    switch:DoClick()

    function dial:DoClick()
        local number = 0

        local dial_bigpanel = vgui.Create("DButton", main)
        dial_bigpanel:SetSize(main_x, main_y)
        dial_bigpanel:SetPaintBackground(false)
        dial_bigpanel:SetText("")
        dial_bigpanel.open = CurTime()

        local dial_keys = vgui.Create("DPanel", dial_bigpanel)
        dial_keys:SetPos(0, main_y)
        dial_keys:SetSize(main_x, main_y*0.55)
        dial_keys:MoveTo(0, main_y - dial_keys:GetTall(), 0.5, 0, 0.2)

        function dial_bigpanel:DoClick()
            dial_bigpanel.closing = CurTime()
            dial_keys:MoveTo(0, main_y, 0.5, 0, 0.2, function()
                dial_bigpanel:Remove()
            end)
        end

        function dial_bigpanel:Paint(w, h)
            local ratio = !dial_bigpanel.closing and (CurTime() - dial_bigpanel.open)*3 or 1 - (CurTime() - dial_bigpanel.closing)*3

            if ratio > 1 then
                ratio = 1
            elseif ratio < 0 then
                ratio = 0
            end

            surface.SetDrawColor(0, 0, 0, 230 * ratio)
            surface.DrawRect(0, 0, w, h)
        end

        function dial_keys:Paint(w, h)
            draw.RoundedBoxEx(32, 0, 0, w, h, clr_blue, true, true, false, false)
            draw.RoundedBoxEx(32, 0, 10, w, h, clr_black1, true, true, false, false)
        end

        surface.SetFont(font_bold)

        local dial_number = vgui.Create("DLabel", dial_keys)
        dial_number:Dock(TOP)
        dial_number:SetText(aphone.FormatNumber("0"))
        dial_number:SetFont(font_bold)
        dial_number:SetContentAlignment(5)
        dial_number:DockMargin(0, main_y*0.03, 0, 0)
        dial_number:SetTextColor(clr_blue)
        dial_number:SetTall(select(2, surface.GetTextSize(aphone.FormatNumber("0"))))

        local lang_unknown = aphone.L("PlayerNotFound")

        local dial_name = vgui.Create("DLabel", dial_keys)
        dial_name:Dock(TOP)
        dial_name:SetText(lang_unknown)
        dial_name:SetFont(aphone:GetFont("Little_NoWeight"))
        dial_name:SetContentAlignment(5)
        dial_name:SetTextColor(clr_white120)
        dial_name:DockMargin(0, 0, 0, main_y*0.02)

        surface.SetFont(dial_name:GetFont())
        dial_name:SetTall(select(2, surface.GetTextSize(dial_name:GetText())))

        local dial_DIconLayout = vgui.Create("DIconLayout", dial_keys)
        dial_DIconLayout:Dock(TOP)
        dial_DIconLayout:DockMargin(main_x*0.2, 0, main_x*0.2, 0)
        dial_DIconLayout:SetTall(main_y*0.25)

        local button_call = vgui.Create("DLabel", dial_keys)
        button_call:Dock(FILL)
        button_call:SetText("o")
        button_call:SetFont(dial:GetFont())
        button_call:SetContentAlignment(5)
        button_call:Phone_AlphaHover()
        button_call:SetVisible(false)
        button_call:SetMouseInputEnabled(true)

        function button_call:DoClick()
            if !IsValid(already_num[dial_number:GetText()]) then return end

            net.Start("aphone_Phone")
                net.WriteUInt(1, 4)
                net.WriteEntity(already_num[dial_number:GetText()])
            net.SendToServer()

            dial_bigpanel:DoClick()
        end

        local roboto40 = aphone:GetFont("Roboto40")
        local pnl_0

        for i=9, 0, -1 do
            local ratio = (i != 0 and 3 or 1)

            local num = vgui.Create("DButton", dial_DIconLayout)
            num:SetSize(main_x*0.6 / ratio, main_y*0.25 / 3)
            num:SetText(i)
            num:SetPaintBackground(false)
            num:SetFont(roboto40)
            num:Phone_AlphaHover()

            function num:DoClick()
                local tempnumber = tonumber(tostring(number) .. i)

                if string.len(tempnumber) > aphone.digitscount then return end
                number = tempnumber
                dial_number:SetText(aphone.FormatNumber(tempnumber))

                if already_num[dial_number:GetText()] then
                    dial_name:SetText(aphone.GetName(already_num[dial_number:GetText()]))
                    button_call:SetVisible(true)
                else
                    dial_name:SetText(lang_unknown)
                    button_call:SetVisible(false)
                end
            end

            if i == 0 then pnl_0 = num end
        end

        local remove = vgui.Create("DButton", pnl_0)
        remove:SetSize(main_x*0.2, main_y*0.25 / 3)
        remove:SetText("<")
        remove:SetPaintBackground(false)
        remove:SetFont(roboto40)
        remove:Phone_AlphaHover()
        remove:Dock(RIGHT)

        function remove:DoClick()
            if tonumber(number) == 0 then return end
            local formatted = string.sub(tostring(number), 1, -2)
            formatted = (formatted != "" and formatted or "0")

            number = tonumber(formatted)
            dial_number:SetText(aphone.FormatNumber(formatted))

            if already_num[dial_number:GetText()] then
                dial_name:SetText(aphone.GetName(already_num[dial_number:GetText()]))
                button_call:SetVisible(true)
            else
                dial_name:SetText(lang_unknown)
                button_call:SetVisible(false)
            end
        end

        dial_bigpanel:aphone_RemoveCursor()
    end

    main:aphone_RemoveCursor()
end

function APP:OnClose()
    aphone.InsertNewMessage = nil
end

aphone.RegisterApp(APP)
--addons/aphone/lua/aphone/apps/messages/cl_init.lua:
local APP = {}

APP.name = aphone.L("SMS")
APP.icon = "akulla/aphone/app_sms.png"
APP.Default = true

local clr_green = Color(46,139,87)
local clr_blue = Color(93,207,202)

function APP:Open(main, main_x, main_y, screenmode)
    local clr_white = aphone:Color("Text_White")
    local clr_black3 = aphone:Color("Black3")
    local clr_black1 = aphone:Color("Black1")
    local clr_white120 = aphone:Color("Text_White120")
    local font_bold = aphone:GetFont("Roboto45_700")
    local font_mediumheader = aphone:GetFont("MediumHeader")

    local tbl = {}

    function main:Paint(w, h)
        surface.SetDrawColor(clr_black3)
        surface.DrawRect(0,0,w,h)
    end

    surface.SetFont(font_bold)
    local _, title_y = surface.GetTextSize(aphone.L("Messages"))

    local local_player = LocalPlayer()
    local already_ids = {}
    local already_num = {}

    local title = vgui.Create("DLabel", main)
    title:Dock(TOP)
    title:DockMargin(main_x * 0.12, main_y * 0.05, 0, 0)
    title:SetTall(title_y)
    title:SetFont(font_bold)
    title:SetTextColor(clr_white)
    title:SetText(aphone.L("Messages"))

    local search_bg = vgui.Create("DPanel", main)
    search_bg:Dock(TOP)
    search_bg:DockMargin(main_x * 0.04, main_y * 0.025, main_x * 0.04, 0)
    search_bg:SetTall(main_y * 0.07)

    function search_bg:Paint(w, h)
        draw.RoundedBox(h / 2, 0, 0, w, h, clr_black1)
    end

    local search_icon = vgui.Create("DLabel", search_bg)
    search_icon:Dock(LEFT)
    search_icon:DockMargin(search_bg:GetTall() / 2, 0, 0, 0)
    search_icon:SetWide(search_bg:GetTall())
    search_icon:SetFont(aphone:GetFont("SVG_30"))
    search_icon:SetText("g")
    search_icon:SetTextColor(clr_white120)

    local search_entry = vgui.Create("DLabel", search_bg)
    search_entry:Dock(FILL)
    search_entry:DockMargin(0, 0, search_bg:GetTall() / 2, 0)
    search_entry:SetFont(font_mediumheader)
    search_entry:SetText(aphone.L("Search"))
    search_entry:SetMouseInputEnabled(true)
    search_entry:Phone_AlphaHover()

    function search_entry:DoClick()
        self:Phone_AskTextEntry(aphone.L("Search") != self:GetText() and self:GetText() or "", 32)
    end

    function search_entry:textChange(txt)
        txt = string.lower(txt or "")

        for k, v in pairs(tbl) do
            if !string.StartWith(k, txt) and !v.on_closeanim then
                // Reset it
                v:SetAnimationEnabled(false)
                v:SetAnimationEnabled(true)

                v:AlphaTo(0, 0.25, 0)
                v:SizeTo(-1, 0, 0.25, 0, 0.5)
                v.on_closeanim = true
            elseif string.StartWith(k, txt) then
                // Reset it
                if v.on_closeanim then
                    v:SetAnimationEnabled(false)
                    v:SetAnimationEnabled(true)
                end

                v:SizeTo(-1, main_y * 0.12, 0.25, 0, 0.5)
                v:AlphaTo(255, 0.25, 0)
                v.on_closeanim = false
            end
        end
    end

    local dial = vgui.Create("DLabel", main)
    dial:Dock(BOTTOM)
    dial:DockMargin(0, 0, 0, main_y*0.05)
    dial:SetFont(aphone:GetFont("SVG_40"))
    dial:SetText("5")
    dial:SetContentAlignment(5)
    dial:SetAutoStretchVertical(true)
    dial:SetMouseInputEnabled(true)
    dial:Phone_AlphaHover()

    function dial:DoClick()
        local number = 0

        local dial_bigpanel = vgui.Create("DButton", main)
        dial_bigpanel:SetSize(main_x, main_y)
        dial_bigpanel:SetPaintBackground(false)
        dial_bigpanel:SetText("")
        dial_bigpanel.open = CurTime()

        local dial_keys = vgui.Create("DPanel", dial_bigpanel)
        dial_keys:SetPos(0, main_y)
        dial_keys:SetSize(main_x, main_y*0.55)
        dial_keys:MoveTo(0, main_y - dial_keys:GetTall(), 0.5, 0, 0.2)

        function dial_bigpanel:DoClick()
            dial_bigpanel.closing = CurTime()
            dial_keys:MoveTo(0, main_y, 0.5, 0, 0.2, function()
                dial_bigpanel:Remove()
            end)
        end

        function dial_bigpanel:Paint(w, h)
            local ratio = !dial_bigpanel.closing and (CurTime() - dial_bigpanel.open)*3 or 1 - (CurTime() - dial_bigpanel.closing)*3

            if ratio > 1 then
                ratio = 1
            elseif ratio < 0 then
                ratio = 0
            end

            surface.SetDrawColor(0, 0, 0, 230 * ratio)
            surface.DrawRect(0, 0, w, h)
        end

        function dial_keys:Paint(w, h)
            draw.RoundedBoxEx(32, 0, 0, w, h, clr_blue, true, true, false, false)
            draw.RoundedBoxEx(32, 0, 10, w, h, clr_black1, true, true, false, false)
        end

        surface.SetFont(font_bold)

        local dial_number = vgui.Create("DLabel", dial_keys)
        dial_number:Dock(TOP)
        dial_number:SetText(aphone.FormatNumber("0"))
        dial_number:SetFont(font_bold)
        dial_number:SetContentAlignment(5)
        dial_number:DockMargin(0, main_y*0.03, 0, 0)
        dial_number:SetTextColor(clr_blue)
        dial_number:SetTall(select(2, surface.GetTextSize(aphone.FormatNumber("0"))))

        local lang_unknown = aphone.L("PlayerNotFound")

        local dial_name = vgui.Create("DLabel", dial_keys)
        dial_name:Dock(TOP)
        dial_name:SetText(lang_unknown)
        dial_name:SetFont(aphone:GetFont("Little_NoWeight"))
        dial_name:SetContentAlignment(5)
        dial_name:SetTextColor(clr_white120)
        dial_name:DockMargin(0, 0, 0, main_y*0.02)

        surface.SetFont(dial_name:GetFont())
        dial_name:SetTall(select(2, surface.GetTextSize(dial_name:GetText())))

        local dial_DIconLayout = vgui.Create("DIconLayout", dial_keys)
        dial_DIconLayout:Dock(TOP)
        dial_DIconLayout:DockMargin(main_x*0.2, 0, main_x*0.2, 0)
        dial_DIconLayout:SetTall(main_y*0.25)

        local button_call = vgui.Create("DLabel", dial_keys)
        button_call:Dock(FILL)
        button_call:SetText("o")
        button_call:SetFont(dial:GetFont())
        button_call:SetContentAlignment(5)
        button_call:Phone_AlphaHover()
        button_call:SetVisible(false)
        button_call:SetMouseInputEnabled(true)

        function button_call:DoClick()
            if !IsValid(already_num[dial_number:GetText()]) then return end

            net.Start("aphone_Phone")
                net.WriteUInt(1, 4)
                net.WriteEntity(already_num[dial_number:GetText()])
            net.SendToServer()

            dial_bigpanel:DoClick()
        end

        local roboto40 = aphone:GetFont("Roboto40")
        local pnl_0

        for i=9, 0, -1 do
            local ratio = (i != 0 and 3 or 1)

            local num = vgui.Create("DButton", dial_DIconLayout)
            num:SetSize(main_x*0.6 / ratio, main_y*0.25 / 3)
            num:SetText(i)
            num:SetPaintBackground(false)
            num:SetFont(roboto40)
            num:Phone_AlphaHover()

            function num:DoClick()
                local tempnumber = tonumber(tostring(number) .. i)

                if string.len(tempnumber) > aphone.digitscount then return end
                number = tempnumber
                dial_number:SetText(aphone.FormatNumber(tempnumber))

                if already_num[dial_number:GetText()] then
                    dial_name:SetText(aphone.GetName(already_num[dial_number:GetText()]))
                    button_call:SetVisible(true)
                else
                    dial_name:SetText(lang_unknown)
                    button_call:SetVisible(false)
                end
            end

            if i == 0 then pnl_0 = num end
        end

        local remove = vgui.Create("DButton", pnl_0)
        remove:SetSize(main_x*0.2, main_y*0.25 / 3)
        remove:SetText("<")
        remove:SetPaintBackground(false)
        remove:SetFont(roboto40)
        remove:Phone_AlphaHover()
        remove:Dock(RIGHT)

        function remove:DoClick()
            if tonumber(number) == 0 then return end
            local formatted = string.sub(tostring(number), 1, -2)
            formatted = (formatted != "" and formatted or "0")

            number = tonumber(formatted)
            dial_number:SetText(aphone.FormatNumber(formatted))

            if already_num[dial_number:GetText()] then
                dial_name:SetText(aphone.GetName(already_num[dial_number:GetText()]))
                button_call:SetVisible(true)
            else
                dial_name:SetText(lang_unknown)
                button_call:SetVisible(false)
            end
        end

        dial_bigpanel:aphone_RemoveCursor()
    end

    local player_list = vgui.Create("DScrollPanel", main)
    player_list:Dock(FILL)
    player_list:DockMargin(0, main_y * 0.02, 0, 0)
    player_list:aphone_PaintScroll()

    local title_available = player_list:Add("DLabel")
    title_available:Dock(TOP)
    title_available:DockMargin(main_x * 0.09, 0, 0, 0)
    title_available:SetTall(title_y)
    title_available:SetFont(aphone:GetFont("Little"))
    title_available:SetTextColor(clr_white120)
    title_available:SetText(aphone.L("Available"))

    main:aphone_RemoveCursor()

    function player_list:Phone_GeneratePanel(ply, disconnected)
        if !ply then return end

        local connected = ply and isentity(ply) and ply:IsPlayer()
        local id = connected and ply:aphone_GetID() or ply

        // Get last message, for date + text display
        local infos = sql.Query("SELECT * FROM aphone_Messages WHERE user = " .. id .. " AND ip = '" .. game.GetIPAddress() .. "' ORDER BY timestamp DESC LIMIT 1")
        local name = aphone.GetName(ply)

        infos = infos and infos[1]

        local player_main = vgui.Create("DButton", self)
        player_main:Dock(TOP)
        player_main:SetTall(main_y * 0.12)
        player_main:SetPaintBackground(false)
        player_main:TDLib()
        player_main:SetText("")
        player_main:FadeHover(clr_green)

        local player_subpanel = vgui.Create("DPanel", player_main)
        player_subpanel:Dock(TOP)
        player_subpanel:DockMargin(main_x * 0.04, main_y * 0.02, main_x * 0.04, main_y * 0.02)
        player_subpanel:SetTall(main_y * 0.08)
        player_subpanel:SetPaintBackground(false)
        player_subpanel:SetMouseInputEnabled(false)

        tbl[string.lower(aphone.GetName(ply))] = player_main

        function player_main:DoClick()
            local msg_pnl = vgui.Create("aphone_Msg", main)
            msg_pnl:InitPly(ply)
        end

        if !disconnected then
            local player_outlineavatar = vgui.Create("DPanel", player_subpanel)
            player_outlineavatar:Dock(LEFT)
            player_outlineavatar:SetWide(player_subpanel:GetTall())
            player_outlineavatar:SetMouseInputEnabled(false)
            player_outlineavatar:SetPaintBackground(false)
            player_outlineavatar:DockMargin(main_x * 0.05, 0, 0, 0)

            local s_c = aphone.GUI.ScaledSize(8)

            local player_avatar = vgui.Create("aphone_CircleAvatar", player_outlineavatar)
            player_avatar:Dock(FILL)
            player_avatar:DockMargin(s_c, s_c, s_c, s_c)
            player_avatar:SetPlayer(ply, 184)
        end

        local player_text = vgui.Create("DPanel", player_subpanel)
        player_text:Dock(FILL)
        player_text:DockMargin(main_x * 0.05, 0, 0, 0)
        player_text:SetPaintBackground(false)
        player_text:SetMouseInputEnabled(false)

        local time = aphone.FormatTimeStamp(infos and infos.timestamp or 0)

        surface.SetFont(font_mediumheader)
        local text_x, text_y = surface.GetTextSize(time)

        local player_toptext = vgui.Create("DPanel", player_text)
        player_toptext:Dock(TOP)
        player_toptext:SetTall(text_y)
        player_toptext:SetPaintBackground(false)
        player_toptext:SetMouseInputEnabled(false)

        local player_textdate = vgui.Create("DLabel", player_toptext)
        player_textdate:Dock(RIGHT)
        player_textdate:SetWide(text_x)
        player_textdate:SetFont(font_mediumheader)
        player_textdate:SetText(time)
        player_textdate:SetTextColor(aphone:Color("Text_White180"))
        player_textdate:SetMouseInputEnabled(false)

        local player_textname = vgui.Create("DLabel", player_toptext)
        player_textname:Dock(FILL)
        player_textname:DockMargin(0, 0, 5, 0)
        player_textname:SetFont(font_mediumheader)
        player_textname:SetTextColor(aphone:Color("Text_White"))
        player_textname:SetText(aphone.GetName(ply))
        player_textname:SetMouseInputEnabled(false)

        if infos and infos.body then
            local player_lastmsg = vgui.Create("DLabel", player_text)
            player_lastmsg:Dock(FILL)
            player_lastmsg:DockMargin(0, 5, 0, 0)
            player_lastmsg:SetFont(font_mediumheader)
            player_lastmsg:SetText(infos.body)
            player_lastmsg:SetTextColor(aphone:Color("Text_White180"))
            player_lastmsg:SetMouseInputEnabled(false)
        end
    end

    // Create Special Numbers ( aka compatibilities with sh_compatibilities.lua )
    for k, v in pairs(aphone.SpecialNumbers) do
        if v.showcondition and !v.showcondition() then continue end

        local spenum = vgui.Create("DButton", player_list)
        spenum:Dock(TOP)
        spenum:SetTall(main_y * 0.12)
        spenum:SetPaintBackground(false)
        spenum:SetText("")
        spenum:TDLib()
        spenum:FadeHover(v.clr or clr_green)

        function spenum:DoClick()
            v.func()
        end

        local spenum_sub = vgui.Create("DPanel", spenum)
        spenum_sub:Dock(TOP)
        spenum_sub:DockMargin(main_x * 0.09, main_y * 0.02, main_x * 0.04, main_y * 0.02)
        spenum_sub:SetTall(main_y * 0.08)
        spenum_sub:SetPaintBackground(false)
        spenum_sub:SetMouseInputEnabled(false)

        local player_outlineavatar = vgui.Create("DPanel", spenum_sub)
        player_outlineavatar:Dock(LEFT)
        player_outlineavatar:SetWide(spenum_sub:GetTall() - aphone.GUI.ScaledSizeX(16))
        player_outlineavatar:SetMouseInputEnabled(false)
        player_outlineavatar:DockMargin(aphone.GUI.ScaledSize(8, 8, 8, 8))

        function player_outlineavatar:Paint(w, h)
            surface.SetDrawColor(color_white)
            surface.SetMaterial(v.icon)
            surface.DrawTexturedRect(0, 0, w, h)
        end

        local player_text = vgui.Create("DButton", spenum_sub)
        player_text:Dock(FILL)
        player_text:SetText("")
        player_text:DockMargin(main_x * 0.05, 0, 0, 0)
        player_text:SetPaintBackground(false)
        player_text:SetMouseInputEnabled(false)
        player_text:TDLib()

        player_text:DualText(
            v.name,
            font_mediumheader,
            color_white,

            v.desc or "",
            font_mediumheader,
            clr_white120,
            TEXT_ALIGN_LEFT
        )
    end

    for k, v in ipairs(player.GetHumans()) do
        local id = v:aphone_GetID()

        if local_player == v or (aphone.disable_showingUnknownPlayers and !aphone.Contacts.GetName(id)) then continue end
        already_ids[id] = v
        player_list:Phone_GeneratePanel(v)
    end

    for k, v in ipairs(player.GetHumans()) do
        if local_player == v or !v:aphone_GetNumber() then continue end
        already_num[v:aphone_GetNumber()] = v
    end

    local title_onlymessages = vgui.Create("DLabel", player_list)
    title_onlymessages:Dock(TOP)
    title_onlymessages:DockMargin(main_x * 0.09, 0, 0, 0)
    title_onlymessages:SetTall(title_y)
    title_onlymessages:SetFont(aphone:GetFont("Little"))
    title_onlymessages:SetTextColor(clr_white120)
    title_onlymessages:SetText(aphone.L("Not_Available"))

    for k, v in pairs(aphone.Contacts.GetContacts()) do
        if !already_ids[k] then
            player_list:Phone_GeneratePanel(k, true)
        end
    end

    main:aphone_RemoveCursor()
end

function APP:OnClose()
    aphone.InsertNewMessage = nil
end

aphone.RegisterApp(APP)
--lua/arccw/shared/sh_0_uc.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_acwcommon.lua:
ArcCW.EnableCustomization = true
ArcCW.PresetPath          = "arccw_presets/"

ArcCW.NoDraw = true

ArcCW.HUToM    = 0.0254 -- 1 / 12 * 0.3048
ArcCW.MOAToAcc = 0.00092592592 -- 10 / 180 / 60
ArcCW.RecoilUnit = 41.4 -- lbfps

ArcCW.STATE_IDLE      = 0
ArcCW.STATE_SIGHTS    = 1
ArcCW.STATE_SPRINT    = 2
ArcCW.STATE_DISABLE   = 3
ArcCW.STATE_CUSTOMIZE = 4
ArcCW.STATE_BIPOD     = 5

ArcCW.SCROLL_NONE = 0
ArcCW.SCROLL_ZOOM = 1

ArcCW.FLASH_ATT_CONSTANT = 0
ArcCW.FLASH_ATT_LINEAR = 1
ArcCW.FLASH_ATT_QUADRATIC = 2

ArcCW.VolumetricLightModel = "models/effects/vol_light256x384.mdl"
ArcCW.VolumetricLightX = 256
ArcCW.VolumetricLightY = 256
ArcCW.VolumetricLightZ = 384

-- Special clip size denoting an bottomless clip
ArcCW.BottomlessMagicNumber = -1

COND_WEAPON_HAS_LOS = 41
COND_WEAPON_SIGHT_OCCLUDED = 45

ArcCW.ShellSoundsTable = {
    "weapons/arccw/casings/casing_556_1.wav",
    "weapons/arccw/casings/casing_556_2.wav",
    "weapons/arccw/casings/casing_556_3.wav",
    "weapons/arccw/casings/casing_556_4.wav"
}

ArcCW.MediumShellSoundsTable = {
    "weapons/arccw/casings/casing_308_1.wav",
    "weapons/arccw/casings/casing_308_2.wav",
    "weapons/arccw/casings/casing_308_3.wav",
    "weapons/arccw/casings/casing_308_4.wav"
}

ArcCW.PistolShellSoundsTable = {
    "weapons/arccw/casings/casing_9mm_1.wav",
    "weapons/arccw/casings/casing_9mm_2.wav",
    "weapons/arccw/casings/casing_9mm_3.wav",
    "weapons/arccw/casings/casing_9mm_4.wav"
}

ArcCW.TinyShellSoundsTable = {
    "weapons/arccw/casings/casing_22_1.wav",
    "weapons/arccw/casings/casing_22_2.wav",
    "weapons/arccw/casings/casing_22_3.wav",
    "weapons/arccw/casings/casing_22_4.wav"
}

ArcCW.ShotgunShellSoundsTable = {
    "weapons/arccw/casings/casing_12ga_1.wav",
    "weapons/arccw/casings/casing_12ga_2.wav",
    "weapons/arccw/casings/casing_12ga_3.wav",
    "weapons/arccw/casings/casing_12ga_4.wav"
}

ArcCW.RicochetSounds = {
    "weapons/arccw/ricochet01.wav",
    "weapons/arccw/ricochet02.wav",
    "weapons/arccw/ricochet03.wav",
    "weapons/arccw/ricochet04.wav",
    "weapons/arccw/ricochet05.wav"
 }

ArcCW.ReloadTimeTable = {
    [ACT_HL2MP_GESTURE_RELOAD_AR2]      = 2,
    [ACT_HL2MP_GESTURE_RELOAD_SMG1]     = 2,
    [ACT_HL2MP_GESTURE_RELOAD_PISTOL]   = 1.5,
    [ACT_HL2MP_GESTURE_RELOAD_REVOLVER] = 2.5,
    [ACT_HL2MP_GESTURE_RELOAD_SHOTGUN]  = 2.5,
    [ACT_HL2MP_GESTURE_RELOAD_DUEL]     = 3.25,
}

ArcCW.LimbCompensation = {
    [1] = {
        [HITGROUP_HEAD]     = 1 / 2,
        [HITGROUP_LEFTARM]  = 1 / 0.25,
        [HITGROUP_RIGHTARM] = 1 / 0.25,
        [HITGROUP_LEFTLEG]  = 1 / 0.25,
        [HITGROUP_RIGHTLEG] = 1 / 0.25,
        [HITGROUP_GEAR]     = 1 / 0.25,
    },
    ["terrortown"] = {
        [HITGROUP_HEAD]     = 1 / 2.5, -- ArcCW's sh_ttt.lua line 5!!!
        [HITGROUP_LEFTARM]  = 1 / 0.55,
        [HITGROUP_RIGHTARM] = 1 / 0.55,
        [HITGROUP_LEFTLEG]  = 1 / 0.55,
        [HITGROUP_RIGHTLEG] = 1 / 0.55,
        [HITGROUP_GEAR]     = 1 / 0.55,
    },
}

ArcCW.ReplaceWeapons = {
    ["weapon_pistol"]    = true,
    ["weapon_smg1"]      = true,
    ["weapon_ar2"]       = true,
    ["weapon_shotgun"]   = true,
    ["weapon_357"]       = true,
    ["weapon_alyxgun"]   = true,
    ["weapon_crossbow"]  = true,
    ["weapon_rpg"]       = true,
    ["weapon_annabelle"] = true,
}

ArcCW.MeleeDamageTypes = {
    [DMG_GENERIC] = "dmg.generic",
    [DMG_BULLET] = "dmg.bullet",
    [DMG_SLASH] = "dmg.slash",
    [DMG_CLUB] = "dmg.club",
    [DMG_SHOCK] = "dmg.shock",
}

ArcCW.PenTable = {
   [MAT_ANTLION]     = 1,
   [MAT_BLOODYFLESH] = 1,
   [MAT_CONCRETE]    = 0.75,
   [MAT_DIRT]        = 0.5,
   [MAT_EGGSHELL]    = 1,
   [MAT_FLESH]       = 0.1,
   [MAT_GRATE]       = 1,
   [MAT_ALIENFLESH]  = 0.25,
   [MAT_CLIP]        = 1000,
   [MAT_SNOW]        = 0.25,
   [MAT_PLASTIC]     = 0.5,
   [MAT_METAL]       = 1.5,
   [MAT_SAND]        = 0.25,
   [MAT_FOLIAGE]     = 0.5,
   [MAT_COMPUTER]    = 0.25,
   [MAT_SLOSH]       = 1,
   [MAT_TILE]        = 0.5,
   [MAT_GRASS]       = 0.5,
   [MAT_VENT]        = 0.75,
   [MAT_WOOD]        = 0.5,
   [MAT_DEFAULT]     = 0.75,
   [MAT_GLASS]       = 0.025,
   [MAT_WARPSHIELD]  = 1
}

ArcCW.Colors = {
    POS     = Color(25, 225, 25),
    MINIPOS = Color(75, 225, 75),
    NEU     = Color(225, 225, 225),
    MININEG = Color(225, 75, 75),
    NEG     = Color(225, 25, 25),
    COSM    = Color(100, 100, 225)
}

ArcCW.LHIKBones = {
    "ValveBiped.Bip01_L_UpperArm",
    "ValveBiped.Bip01_L_Forearm",
    "ValveBiped.Bip01_L_Wrist",
    "ValveBiped.Bip01_L_Ulna",
    "ValveBiped.Bip01_L_Hand",
    "ValveBiped.Bip01_L_Finger4",
    "ValveBiped.Bip01_L_Finger41",
    "ValveBiped.Bip01_L_Finger42",
    "ValveBiped.Bip01_L_Finger3",
    "ValveBiped.Bip01_L_Finger31",
    "ValveBiped.Bip01_L_Finger32",
    "ValveBiped.Bip01_L_Finger2",
    "ValveBiped.Bip01_L_Finger21",
    "ValveBiped.Bip01_L_Finger22",
    "ValveBiped.Bip01_L_Finger1",
    "ValveBiped.Bip01_L_Finger11",
    "ValveBiped.Bip01_L_Finger12",
    "ValveBiped.Bip01_L_Finger0",
    "ValveBiped.Bip01_L_Finger01",
    "ValveBiped.Bip01_L_Finger02"
}
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_attachments.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_convars.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_effects.lua:
return gluapack()()
--lua/arccw/shared/attachments/arccw_specz_perk_soh.lua:
return gluapack()()
--lua/arccw/shared/attachments/foregrip_exclusive.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_tacticalknife.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_tacticalknife.lua:
att.PrintName = "Tactical Knife"
att.Icon = Material("entities/acwatt_mw2_tacknife.png", "smooth")

att.Description = "Underhand blade.\n\nPress E+LMB to melee."
att.Desc_Pros = {
	"Quick, deadly melee attack",
}
att.Desc_Cons = {
	"- Increased visual recoil",
	"BUG: Cannot use optics",
    "(Sight autosolver doesn't correct for new idle)",
}
att.AutoStats = false
att.Slot = {"mw2_tacknife","altirons","yeslaser"}

att.Hook_SelectBashAnim = function(wep, anim)
	return "bash_knife"
end

att.SortOrder = 1738

att.Override_CanBash = true

att.Mult_MeleeTime = 1
att.Mult_MeleeDamage = 4
att.Add_MeleeRange = 18
att.Mult_MeleeAttackTime = 0.395
att.Mult_MeleeTime = 1.6
att.Override_MeleeDamageType = DMG_SLASH

att.GivesFlags = {"arcticfixyoshit1"}

att.AddSuffix = " Tactical"
--lua/arccw/shared/attachments/mw2_ubgl_m203.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_wepcamo_arctic.lua:
att.PrintName = "Arctic"
att.Icon = Material("entities/mw2_wepcamo_arctic.png", "smooth"
)
att.Description = "Arctic camouflage finish."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Slot = "mw2_wepcamo"
att.Free = true

att.ActivateElements = {"wepcamo-arctic"}

att.SortOrder = 2 *-1
--lua/arccw/shared/attachments/mw2_wepcamo_digital.lua:
return gluapack()()
--lua/arccw/shared/attachments/optic_m82scope.lua:
return gluapack()()
--lua/arccw/shared/attachments/optic_m82scope.lua:
att.PrintName = "Barrett (2-4.3x)"
att.Icon = Material("entities/acwatt_optic_m82scope.png", "smooth")
att.Description = "Good scope. Gooood scope."

att.SortOrder = 4.3

att.Desc_Pros = {
    "autostat.holosight",
    "autostat.zoom",
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"optic","optic_sniper"}

att.Model 			= "models/weapons/arccw/fesiugmw2/atts/m82_4.mdl"
att.HolosightPiece 	= "models/weapons/arccw/fesiugmw2/atts/m82_3_hsp.mdl"

att.AdditionalSights = {
    {
        Pos = Vector(0.0231, 9.5, -1.01),
        Ang = Angle(0, 0, 0),
        ViewModelFOV = 65 / 2.25,
        Magnification = 2.25,
        ScrollFunc = ArcCW.SCROLL_ZOOM,
        ZoomLevels = 6,
        ZoomSound = "weapons/arccw/fiveseven/fiveseven_slideback.wav",
        IgnoreExtra = true
    }
}

att.ScopeGlint = true

att.Holosight = true
att.HolosightReticle = Material("hud/scopes/m40a3.png", "mips smooth")
att.HolosightNoFlare = true
att.HolosightSize = 25
att.HolosightBone = "holosight"
att.Colorable = false

att.HolosightMagnification = 4.3
att.HolosightBlackbox = true

att.HolosightMagnificationMin = 2
att.HolosightMagnificationMax = 4.3

att.Mult_SightTime = 1.15
att.Mult_SightedSpeedMult = 0.9
-- att.Mult_SpeedMult = 0.98

att.ModelOffset = Vector(-2.6, 0, -0.55)
--lua/arccw/shared/attachments/optic_mw2_augscope.lua:
att.PrintName = "Swavorski (2.1x)"
att.Icon = Material("entities/acwatt_optic_mw2_augscope.png", "smooth")
att.Description = "Integrated telescopic scope created for the AUG."

att.SortOrder = 2.1

att.Desc_Pros = {
    "autostat.holosight",
    "autostat.zoom",
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"optic"}

att.Model = "models/weapons/arccw/fesiugmw2/atts/scopes/swavorski_base_2b.mdl"
att.ModelOffset = Vector(-1, 0, 0)

att.AdditionalSights = {
    {
        Pos = Vector(0, 11, -1.62),
        Ang = Angle(0, 0, 0),
        ViewModelFOV = 65 / 1.6,
        Magnification = 1.6,
        ScrollFunc = ArcCW.SCROLL_ZOOM,
        ZoomLevels = 12,
        ZoomSound = "weapons/arccw/fiveseven/fiveseven_slideback.wav",
        IgnoreExtra = true
    }
}

att.ScopeGlint = false

att.Holosight = true
att.HolosightReticle = Material("hud/scopes/m40a3.png", "mips smooth")
att.HolosightNoFlare = true
att.HolosightSize = 14
att.HolosightBone = "holosight"
att.HolosightPiece = "models/weapons/arccw/fesiugmw2/atts/scopes/swavorski_lens_2b.mdl"
att.Colorable = false

att.HolosightMagnification = 2.16
att.HolosightBlackbox = true

att.HolosightConstDist = 64

att.Mult_SightTime = 1.12
att.Mult_SightedSpeedMult = 0.92

att.ModelRotate = Angle(0, 90, 0)

att.AddSuffix = " Swavorski"
--lua/arccw/shared/attachments/optic_mw2_augscope_int.lua:
return gluapack()()
--lua/arccw/shared/attachments/optic_mw2_holographic.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_40mm_incendiary.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ammo_lowtr.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ammo_sg_flech.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ammo_tmj.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ammo_tmj.lua:
att.PrintName = "\"TMJ\" Total Metal Jacket Rounds"
att.AbbrevName = "\"TMJ\" Total Metal Jacket"

att.SortOrder = 2
att.Icon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth")
att.Description = "Bullet entirely encased in a thin jacket of metal over a core of different metal to protect it from abrasion or corrosion.\nProtecting the base of a lead-core bullet from burning powder gas may prevent molten lead from being released as a fine spray in turbulent gas leaving the muzzle of a firearm."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_ammo"

att.AutoStats = true

att.Mult_DamageMin = 1.2

att.Mult_Damage = 0.9
--att.Mult_RangeMin = 0.75

att.Hook_Compatible = function(wep)
    if wep:GetIsShotgun() then
        return false
    end
end
--lua/arccw/shared/attachments/uc_charm_rmccharm.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_charm_rmccharm.lua:
att.PrintName = "Red Mountain Company"
att.Description = "Be the change you want to see."
att.Ignore = true

att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = "charm"

att.Free = true

att.Model = "models/weapons/arccw/atts/charmbase.mdl"

att.DroppedModel = "models/Items/BoxSRounds.mdl"

att.Charm = true
att.CharmModel = "models/weapons/arccw/atts/uc_rmccharm.mdl"
att.CharmAtt = "Charm"
att.CharmScale = Vector(0.5, 0.5, 0.5)
att.CharmOffset = Vector(0, -1, -0.2)
att.CharmAngle = Angle(20, 0, 80)
--lua/arccw/shared/attachments/uc_choke_rifled.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_fg_autotrigger.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_fg_sg_rifled.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_grip_mafg2_tan.lua:
att.PrintName = "MAGPUL AFG-2 Angled Fore Grip (Tan)"
att.AbbrevName = "Magpul Angled Foregrip (Tan)"
att.Icon = Material("entities/att/acwatt_uc_grip_magpul_afg2_tan.png", "mips smooth")
att.Description = "An ergonomically angled grip surface reduces wrist strain, increasing maneuverability.\nThis unit is cosmetically colored tan."

att.SortOrder = 1200

att.AutoStats = true
att.Slot = "foregrip"

att.LHIK = true

att.ModelOffset = Vector(0, 0, -0.75)

att.Model = "models/weapons/arccw/atts/uc_magpul_afg2.mdl"
att.ModelSkin = 0

att.Mult_SightTime = 0.8
att.Mult_Sway = 1.15
att.Mult_Recoil = 1.20
--lua/arccw/shared/attachments/uc_muzzle_brake1.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_muzzle_fhider2.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_muzzle_supp_giraffe.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_muzzle_supp_giraffe.lua:
att.PrintName = "ATA Giraffe Suppressor" -- fictional
att.AbbrevName = "Giraffe Suppressor"
att.Icon = Material("entities/att/acwatt_uc_muzzle_supp_giraffe.png", "mips smooth")
att.Description = "Traps propellant gas from the muzzle, reducing visual and audible report.\nExtremely long suppressor tube provides excellent noise reduction, but is also very unwieldy."
att.Desc_Neutrals = {"uc.supptail"}

att.AutoStats = true
att.Slot = {"muzzle"}

att.SortOrder = 150

att.Model = "models/weapons/arccw/atts/uc_longass_silencer.mdl"
att.ModelOffset = Vector(2.1, 0, 0.00)
att.ModelScale = Vector(0.9, 1.25, 1.25)
att.OffsetAng = Angle(0, 0, 0)

att.Silencer = true
att.Override_MuzzleEffect = "muzzleflash_suppressed"
att.IsMuzzleDevice = true

att.Mult_ShootPitch = 1.1
att.Mult_ShootVol = 0.7
att.Mult_Range = 1.2

att.Add_BarrelLength = 10
att.Mult_SightTime = 1.15
att.Mult_SightedSpeedMult = 0.9
att.Mult_Sway = 1.15

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"

att.Hook_GetDistantShootSound = function(wep, distancesound)
    if wep:GetBuff("PhysBulletMuzzleVelocity") < ArcCW.UC.SubsonicThreshold then
        return false
    end
end
--lua/arccw/shared/attachments/uc_muzzle_supp_tgpa.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_optic_leupold_dppro.lua:
att.PrintName = "Leupold DeltaPoint Pro Reflex Sight (LP)"
att.AbbrevName = "DP-Pro (LP)"
att.Icon = Material("entities/att/acwatt_uc_optic_leupold_dppro.png", "mips smooth")
att.Description = "Low-profile reflex sight. While its lens isn't as wide as other reflex sights, it's significantly lighter and small enough to use on pistols."

att.SortOrder = 0.5

att.Desc_Pros = {
    "autostat.holosight",
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"optic", "optic_lp"}

att.Model = "models/weapons/arccw/atts/uc_leupold_dppro.mdl"
att.ModelScale = Vector(1.32, 1.56, 1.2)
att.ModelOffset = Vector(0, -0.05, 0.15)
att.AdditionalSights = {
    {
        Pos = Vector(0, 9, -0.85),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        ScrollFunc = ArcCW.SCROLL_NONE
    }
}

att.Holosight = true
att.HolosightReticle = Material("hud/reticles/uc_reddot.png", "mips smooth")
att.HolosightPiece = "models/weapons/arccw/atts/uc_leupold_dppro_hsp.mdl"
att.HolosightNoFlare = false
att.HolosightSize = 2
att.HolosightBone = "holosight"
att.Colorable = true

att.Mult_SightedSpeedMult = .95
--lua/arccw/shared/attachments/uc_powder_subsonic.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tac_anpeq2_tan.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tac_flashlight2.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tac_laser_green.lua:
att.PrintName = "Rail-Mounted Laser Sight (Green)"
att.AbbrevName = "Green Laser Sight"
att.Icon = Material("entities/att/acwatt_uc_tac_flashlight2.png", "mips smooth")
att.Description = "Projects a laser in the direction of the target, assisting the user to line up shots without iron sights."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "con.light"
}
att.Desc_Neutrals = {}
att.AutoStats = true

att.Slot = {"tac","tac_pistol"}
att.SortOrder = 29

att.Model = "models/weapons/arccw/atts/ud_flashlight_1.mdl"
att.ModelOffset = Vector(0,0,0)
att.OffsetAng = Angle(0,0,180)
att.ModelScale = Vector(1.2,1.2,1.2)
att.Laser = false
att.LaserStrength = 2 / 5
att.LaserBone = "light"

att.ColorOptionsTable = {Color(0, 255, 0, 150)}

att.ToggleStats = {
    {
        PrintName = "On",
        Laser = true,
        Mult_HipDispersion = 0.8,
        Mult_MoveDispersion = 0.8,
    },
    {
        PrintName = "Off",
        Laser = false,
    }
}
--lua/arccw/shared/attachments/uc_tp_endurance.lua:
att.PrintName = "Endurance"

att.Icon = Material("entities/att/arccw_uc_tp_endurance.png", "smooth mips")
att.Description = "Long courses of physical training allow you to bear more weight and control the recoil of your weapon, reducing the influence of your weapon's bulk on your speed and controlling its kick to stay on target for longer."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_tp"

att.AutoStats = true
att.SortOrder = 17

att.Mult_MoveSpeed = 1.1
att.Mult_Recoil = 0.9
att.Mult_RecoilSide = 0.9

att.NotForNPCs = true
--lua/arccw/shared/attachments/uc_tp_runandgun.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tp_underload.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_usp_skin_blued.lua:
att.PrintName = "USP Blued Steel Finish"
att.AbbrevName = "Blued Steel"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "P93 Blued Steel Finish"
end
att.Icon = Material("entities/att/acwatt_uc_usp_skin_blued.png","mips smooth")
att.Description = "Whether you enforce or engage the law of the land, you are a warrior of a bygone era.\n\n\"Alright, let's move out.\""
att.Slot = "uc_usp_skin"
att.Desc_Neutrals = {
    "uc.cosmetic"
}
att.SortOrder = 2

att.IgnorePickX = true
att.Free = true
--lua/arccw/shared/attachments/uc_usp_slide_compact.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_usp_slide_match.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_skin_custom.lua:
att.PrintName = "Glock 17 Custom Finish"
att.Description = "Make your Glock truly yours by giving it a horrible color nobody else wants to touch."
att.AbbrevName = "Custom"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "GEN3 Custom Finish"
    att.Description = "Make your gun truly yours by giving it a horrible color nobody else wants to touch."
end

att.Icon = Material("entities/att/acwatt_ud_glock_material.png", "smooth mips")
att.Desc_Neutrals = {"uc.cosmetic", "uc.custcolor"}
att.Slot = "ud_glock_skin"

--lua/arccw/shared/attachments/ud_glock_slide_cs.lua:
att.PrintName = "GEN3 Op. CS Slide"
att.AbbrevName = "Op. CS Slide"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "G18C Op. CS Slide"
end

att.Icon = Material("entities/att/acwatt_ud_glock_slide_cs.png", "smooth mips")
att.Description = "Custom-made 3 round burst slide, used by various counter-terrorism units and 'agents' around the world. The standard-length magazines are also tweaked for increased capacity. These modifications make the weapon somewhat prone to jamming."
att.Desc_Pros = {
    "uc.3burst",
    "ud.glock.cs",
}
att.Desc_Cons = {
    "uc.jam"
}
att.Desc_Neutrals = {
}
att.Slot = "ud_glock_slide"

att.AutoStats = true

att.LHIK = true
att.Model = "models/weapons/arccw/atts/classic_lhik.mdl"

att.Mult_HipDispersion = 1.15
att.Mult_ShootSpeedMult = 0.9

att.Override_Malfunction = true

att.Override_Firemodes = {
    {
        Mode = -3,
        Mult_RPM = 3,
        PostBurstDelay = 0.25,
        RunawayBurst = true,
        Override_ShotRecoilTable = {
            [1] = 0.8,
            [2] = 0.5,
            [3] = 0.3,
        },
    },
    {
        Mode = 1,
    },
    {
        PrintName = "fcg.safe2",
        Mode = 0,
    }
}

-- att.Hook_TranslateAnimation = function(wep, anim)
--     if (anim == "fire" || anim == "fire_empty") then
--         return anim .. "_18"
--     end
-- end

--[[]
function att.Hook_GetCapacity(wep,cap)
    if not wep.Attachments[6].Installed then
        return cap + 3
    end
end
]]
att.A_Hook_Add_ClipSize = function(wep, data)
    if not wep.Attachments[8].Installed then
        data.add = (data.add or 0) + 3
    end
end

att.Hook_GetDefaultAttName = function(wep, slot)
    if slot == 8 then
        return "20-Round Mag"
    end
end

att.ActivateElements = {"ud_glock_slide_cs"}
--lua/arccw/shared/attachments/ud_glock_slide_lb.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_barrel_10in.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_barrel_14in.lua:
att.PrintName = "14.5\" RAYCAR-1 Carbine Barrel"
if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "14.5\" M4 Carbine Barrel"
end

att.Icon = Material("entities/att/acwatt_ud_m16_barrel_14_5.png", "smooth mips")
att.AbbrevName = "14.5\" Carbine Barrel"
att.Description = "Carbine length barrel. Provides a small increase in firerate while maintaining respectable accuracy and range."
att.Slot = "ud_m16_blen"

att.AutoStats = true

att.Mult_SightTime = 0.85
att.Mult_SightedSpeedMult = 1.1
att.Mult_HipDispersion = 0.85

att.Mult_Recoil = 1.25
att.Mult_AccuracyMOA = 1.5
att.Mult_Range = 0.75
att.Mult_RPM = 1.111 --0.945
att.Mult_Sway = 0.85

att.Add_BarrelLength = -6
att.Mult_PhysBulletMuzzleVelocity = 0.833333

--att.LHIK = true
--att.Model = "models/weapons/arccw/atts/tactical_lhik.mdl"
att.DroppedModel = "models/items/boxsrounds.mdl"

att.ActivateElements = {"barrel_14","mount_14"}
att.GivesFlags = {"blen_14","barrel_short"}
--lua/arccw/shared/attachments/ud_m16_fs_utg.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_grip_wood.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_hg_a1.lua:
att.PrintName = "Prototype Triangular Handguard"
if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "M16A1 Triangular Handguard"
end
att.AbbrevName = "Triangular Handguard"
att.Icon = Material("entities/att/acwatt_ud_m16_hg_triangle.png", "smooth mips")
att.Description = "Classic handguard issued with the rifle's original models.\nIn comparison to the modern \"ribbed\" handguard, it is more comfortable to hold but prone to slipping."
att.Slot = "ud_m16_hg"
att.AutoStats = true

att.Mult_RecoilSide = 1.35

att.Mult_SightTime = 0.9
att.Mult_HipDispersion = 0.9

att.LHIK = true
att.Model = "models/weapons/arccw/atts/classic_lhik.mdl"
att.DroppedModel = "models/items/boxsrounds.mdl"
att.ModelOffset = (Vector(0.41, 0, -1.63) - Vector(11.5, 2.8, -4.2))

att.ActivateElements = {"hg_m16a1"}
att.GivesFlags = {"hg_no11"}
att.ExcludeFlags = {"blen_11"}
--lua/arccw/shared/attachments/ud_m16_mag_9mm_32.lua:
att.PrintName = "32-Round AMSMG Mag"
att.AbbrevName = "32-Round Mag"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "32-Round 9mm AR-15 Mag"
end

att.Icon = Material("entities/att/acwatt_ud_m16_9mm_32.png", "smooth mips")
att.Description = "A long stick magazine for the 9mm caliber conversion."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "ud_m16_mag"

att.AutoStats = true
att.HideIfBlocked = true

att.Override_ClipSize = 32
att.Mult_SightTime = 1.1
att.Mult_ReloadTime = 1.15
att.Mult_Sway = 1.25
att.Mult_ShootSpeedMult = 0.95

att.ActivateElements = {"ud_m16_9mm_mag_32"}
att.RequireFlags = {"m16_9mm"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_9mm"
end
--lua/arccw/shared/attachments/ud_m16_mag_pmag.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_mag_usas_20.lua:
att.PrintName = "20-Round AMSAS Drum Mag"
att.AbbrevName = "20-Round Drum Mag"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "20-Round USAR Drum Mag"
end

att.SortOrder = -1
att.Icon = Material("entities/att/obsolete.png", "mips smooth")
att.Description = "Extended drum magazine that offers extra magazine capacity. Almost no legitimate military uses, but makes a fun range toy."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_m16_mag"

att.AutoStats = true
att.HideIfBlocked = true

att.Override_ClipSize = 20
att.Override_ClipSize_SkipAS = true

att.Mult_SightTime = 1.25
--att.Mult_Recoil = 0.9
att.Mult_ReloadTime = 1.25
att.Mult_SpeedMult = 0.95
att.Mult_Sway = 3

att.ActivateElements = {"ud_m16_usas_mag_20"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_usas_20"
end


att.Hook_SelectFireAnimation = function(wep, anim)
    return anim .. "_usas"
end

att.RequireFlags = {"m16_usas"}

att.Description = "OBSOLETE"
att.Ignore = true
--lua/arccw/shared/attachments/ud_m16_receiver_fpw.lua:
att.PrintName = "AMFPW Receiver Package"
att.AbbrevName = "FPW Package"
att.Description = "Unique receiver group of the M231 Firing Port Weapon.\nOriginally intended to be fired from inside a fighting vehicle, the FPW has an insanely high cyclic rate, lacks a front sight and semi-automatic mode, fires from an open bolt, and makes no considerations for recoil, accuracy or heat. The trigger pull is also known to be very heavy."

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "M231 FPW Receiver Package"
end

att.Icon = Material("entities/att/acwatt_ud_m16_receiver_a1.png", "smooth mips")
att.Desc_Pros = {
    "uc.auto"
}
att.Desc_Cons = {
    "uc.jam",
    "uc.nofs",
    "uc.overheat",
    "ud.m16.fpw1",
    "ud.m16.fpw2"
}
att.Desc_Neutrals = {
    "ud.m16_a1"
}
att.Slot = "ud_m16_fcg"
--att.InvAtt = "ud_m16_receiver_auto"

att.AutoStats = true
att.SortOrder = -6.5

att.Mult_RPM = 1103 / 900
att.Mult_Recoil = 1.25 / 1.1
att.Mult_RecoilSide = 1.5
att.Mult_Range = 0.9
--att.Mult_Sway = 1.25
att.Mult_AccuracyMOA = 4 / 3
att.Mult_HipDispersion = 0.85
att.Override_ChamberSize = 0

att.Override_TriggerDelay = true
att.Override_Malfunction = true

att.Override_Jamming = true
att.Override_HeatLockout = false
att.Override_HeatCapacity = 120
att.Override_HeatDissipation = 20

att.A_Hook_Add_SightsDispersion = function(wep, data)
    if data and (!wep.Attachments[1].Installed or wep.Attachments[1].Installed == "ud_m16_rs") then
        data.add = data.add + 50
    end
end

att.Override_Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 0
    }
}

att.Override_ChamberSize = 0

att.GivesFlags = {"m16_auto", "ud_m16_retro", "ud_m16_fpw", "sight_magpul", "patr3"}
att.ExcludeFlags = {"m16_noauto","ud_m16_not_retro"}
att.ActivateElements = {"upper_classic","ud_m16_upper_charm2"}
att.TopMount = 3
--lua/arccw/shared/attachments/ud_m16_rs_magpul.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_stock_buffer.lua:
att.PrintName = "Buffer Tube"

att.Icon = Material("entities/att/acwatt_ud_m16_stock_buffer.png", "smooth mips")
att.Description = "The concept of \"stocks\" and \"recoil reduction\" are liberal gibberish made up to stop FREEDOM-LOVING AMERICANS from exercising their GOD-GIVEN RIGHTS."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_m16_stock"

att.AutoStats = true
att.SortOrder = -100
att.Free = true

att.Mult_SpeedMult = 1.05

att.Mult_SightTime = 0.75
att.Mult_DrawTime = 0.6
att.Mult_HolsterTime = 0.6

att.Mult_Recoil = 1.5
att.Mult_RecoilSide = 2

att.Mult_SightedSpeedMult = 1.2
att.Mult_ShootSpeedMult = 1.15

att.Add_BarrelLength = -8
att.Mult_Sway = 3

att.ActivateElements = {"stock_231_tube"}
att.GivesFlags = {"patr4"}

att.Override_ActivePos = Vector(0.33, -4, 1.33)
--lua/arccw/shared/attachments/ud_m16_stock_moe.lua:
att.PrintName = "MOE Carbine Stock"
att.AbbrevName = "MOE Stock"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "MOE Carbine Stock"
end

att.Icon = Material("entities/att/acwatt_ud_m16_stock_moe.png", "smooth mips")
att.Description = "Aftermarket adjustable carbine stock with anti-slip buttpads. Reduces sway compared to a standard carbine stock, but is slightly less agile.\n\nToggling this stock modifies performance accordingly."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = {"go_stock", "ud_m16_stock"}

att.Model = "models/weapons/arccw/atts/stock_moe_b.mdl"
att.ModelOffset = Vector(-0.57, 0, 0.342)
att.ModelScale = Vector(0.74, 0.74, 0.74)
att.OffsetAng = Angle(0, 0, 0)

att.AutoStats = true
att.SortOrder = 6

att.Mult_Sway = 1.1
att.Mult_SightedSpeedMult = 1.075

att.ActivateElements = {"stock_231_tube"}

att.ToggleStats = {
    {
        PrintName = "Extended",
        AutoStats = true,
        ModelOffset = Vector(-1.5, 0, 0.342)
    },
    {
        PrintName = "Collapsed",
        ModelOffset = Vector(0, 0, 0.342),
        AutoStats = true,
        Mult_RecoilSide = 1.5,
        Add_BarrelLength = -4,
        Mult_SightTime = 0.9,
        Mult_ShootSpeedMult = 1.05,
    },
}

--lua/arccw/shared/attachments/ud_m79_barrel_short.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_mini14_barrel_long.lua:
att.PrintName = "Mini-14 24\" Long Barrel"
att.AbbrevName = "24\" Long Barrel"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Patriot 809 24\" Long Barrel"
end

att.Icon = Material("entities/att/acwatt_ud_mini14_barrel_long.png", "smooth mips")
att.SortOrder = 24
att.Description = "Lengthened barrel for shooting far-away varmints. More accurate, but slightly heavier."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_mini14_barrel"

att.Mult_SightTime = 1.25
att.Mult_Recoil = 0.9
att.Mult_AccuracyMOA = 0.5
att.Mult_Range = 1.2
att.Mult_Sway = 1.5

att.Add_BarrelLength = 4

att.AutoStats = true
--lua/arccw/shared/attachments/ud_mini14_mag_10.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_mini14_mag_30_pmag.lua:
att.PrintName = "Mini-14 30-Round ProMag"
att.AbbrevName = "30-Round Polymer Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Patriot 809 30-Round Polymer Mag"
end

att.SortOrder = 29
att.Icon = Material("entities/att/acwatt_ud_mini14_mag_30_polymer.png", "smooth mips")
att.Description = "Polymer aftermarket magazine. The grooves give a better grip surface, but the mag is heavier overall than the steel equivalent."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_mini14_mag"

att.AutoStats = true

att.Mult_SightTime = 1.1
att.Mult_ReloadTime = 1.1
att.Override_ClipSize = 30
att.Mult_Sway = 1.58
att.Mult_ShootSpeedMult = 0.95

att.ActivateElements = {"ud_mini14_mag_42"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_30_tac"
end

att.ExcludeFlags = {"mini14_762", "mini14_22lr"}
att.HideIfBlocked = true
--lua/arccw/shared/attachments/ud_uzi_mag_45_12.lua:
att.PrintName = "Uzi 12-Round Flush Mag"
att.AbbrevName = "12-Round Flush Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "IAL-9 12-Round Flush Mag"
end

att.SortOrder = 20
att.Icon = Material("entities/att/acwatt_ud_uzi_mag_20.png", "smooth mips")
att.Description = "Low-capacity flush magazine. The lighter load makes the weapon more ergonomic."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_uzi_mag"

att.AutoStats = true

att.Mult_SightTime = 0.9
att.Mult_ReloadTime = 0.85
att.Override_ClipSize = 12
att.Override_ClipSize_Priority = 2
att.Mult_Sway = 0.75
att.Mult_ShootSpeedMult = 1.1

att.Mult_HipDispersion = 0.75

att.ActivateElements = {"ud_uzi_mag_20"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_16"
end

att.RequireFlags = {"uzi_45"}
att.HideIfBlocked = true

--lua/arccw/shared/attachments/ud_uzi_stock_folded.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_uzi_stock_polymer.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_329_grip_polymer.lua:
att.PrintName = "Model 329PD Polymer Grip"
att.AbbrevName = "Polymer Grip"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Enforcement .44 Polymer Grip"
end
att.Icon = Material("entities/att/acwatt_ur_deagle_grip_plastic.png","mips smooth")
att.Description = "Polymer grip which improves handling at the cost of increased recoil."
att.Slot = "ur_329_grip"
att.Ignore = true
att.AutoStats = true
att.SortOrder = 6

att.Mult_Recoil = 1.2
att.Mult_RecoilSide = 1.1

att.Mult_SightTime = 0.85
att.Mult_DrawTime = 0.9
att.Mult_HolsterTime = 0.9
--lua/arccw/shared/attachments/ur_ak_cal_9mm.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_grip_alpha.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_grip_type3.lua:
att.PrintName = "Vintage Grip"
att.Icon = Material("entities/att/ur_ak/grip_3.png", "mips smooth")
att.Description = "Original pistol grip with a rougher, heavier shape."
att.AutoStats = true
att.Slot = {"ur_ak_grip"}


att.Mult_Recoil = 0.95
att.Mult_SightTime = 1.05

att.ActivateElements = {"grip_akm"}
--lua/arccw/shared/attachments/ur_ak_hg_vepr.lua:
att.PrintName = "Heavy Handguard"
att.Icon = Material("entities/att/ur_ak/handguards/vepr.png", "mips smooth")
att.Description = "Bottom-heavy marksman handguard. Hard to handle, but steady and accurate. Does not have a bottom rail, and thus cannot accept underbarrel attachments."
att.Slot = {"ur_ak_hg"}
att.Desc_Cons = {"uc.noubs"}
att.AutoStats = true

att.Mult_SightedSpeedMult = 0.75
att.Mult_HipDispersion = 1.25

att.Mult_Sway = 0.7
att.Mult_Recoil = 0.75

att.ActivateElements = {"hg_vepr"}
att.GivesFlags = {"ak_noubs"}
att.ExcludeFlags = {"ur_ak_barrel_rpk"}

--lua/arccw/shared/attachments/ur_ak_mag_762_10.lua:
att.PrintName = "AK-47 10-Round Compact Mag"
att.AbbrevName = "10-Round Compact Mag"
att.Icon = Material("entities/att/ur_ak/magazines/366_10.png", "mips smooth")
att.Description = "Sporting purpose magazine with a very low capacity. The lighter load reduces the weapon's weight significantly."
att.Slot = {"ur_ak_mag"}
att.AutoStats = true

att.SortOrder = 10
att.GivesFlags = {"mag_366"}

att.HideIfBlocked = true

att.Override_ClipSize = 10

att.Mult_SightTime = 0.8
att.Mult_ReloadTime = 0.85
att.Mult_Sway = 0.5

att.Mult_SpeedMult = 1.025
att.Mult_ShootSpeedMult = 1.05

att.Mult_HipDispersion = 0.75

att.Mult_MalfunctionMean = 1.6

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_10rnd"
end

-- att.Hook_TranslateAnimation = function(wep, anim)
--     if (anim == "fix") then
--         return anim .. "_75"
--     end
-- end

att.ActivateElements = {"mag_762_75"}
att.ExcludeFlags = {"cal_545","cal_9mm","cal_12g","cal_308","cal_556"} -- Includes .366
--lua/arccw/shared/attachments/ur_ak_mag_762_bakelite.lua:
att.PrintName = "30-Round Bakelite Mag"
att.AbbrevName = "30-Round Mag (Bakelite)"
att.Icon = Material("entities/att/ur_ak/magazines/762_b.png", "mips smooth")
att.Description = "Plastic variant of the standard issue magazine. Might suit your taste better."
att.Slot = {"ur_ak_mag"}
att.AutoStats = true
att.Desc_Neutrals = {
    "uc.cosmetic",
}

att.SortOrder = 30

att.HideIfBlocked = true

att.ActivateElements = {"mag_762_bakelite"}
att.ExcludeFlags = {"cal_545","cal_9mm","cal_12g","cal_308","cal_556"} -- Includes .366
--lua/arccw/shared/attachments/ur_ak_mag_762_pmag.lua:
att.PrintName = "PMAG 30 AK/AKM MOE"
att.AbbrevName = "30-Round PMAG"
att.Icon = Material("entities/att/ur_ak/magazines/762_p.png", "mips smooth")
att.Description = "American aftermarket magazine. The grooves give it a slightly better grip surface, but the difference in practice is negligible."
att.Slot = {"ur_ak_mag"}
att.AutoStats = true
att.Desc_Neutrals = {
    "uc.cosmetic",
}

att.SortOrder = 30

att.HideIfBlocked = true

att.ActivateElements = {"mag_762_pmag"}
att.ExcludeFlags = {"cal_545","cal_9mm","cal_12g","cal_308","cal_556"} -- Includes .366
--lua/arccw/shared/attachments/ur_aw_skin_black.lua:
att.PrintName = "Black Finish"
att.Icon = Material("entities/att/ur_aw/skin_black.png", "mips smooth")
--att.Icon = Material("entities/att/acwatt_ur_deagle_finish_chrome.png","mips smooth")
att.Description = "As used by law enforcement, or those lacking a father figure."
att.Slot = "ur_aw_skin"
att.Desc_Neutrals = {
    "uc.cosmetic"
}
att.SortOrder = 2

att.IgnorePickX = true
att.ActivateElements = {"skin_black"}
--lua/arccw/shared/attachments/ur_aw_stock_none.lua:
att.PrintName = "No Stock"
att.Description = "Your wrists may never function again."
att.Icon = Material("entities/att/ur_aw/stock_removed.png", "mips smooth")
att.Slot = {"ur_aw_stock"}
att.AutoStats = true
att.Free = true

att.SortOrder = -1

att.Mult_SightTime = 0.75
att.Mult_DrawTime = 0.6
att.Mult_HolsterTime = 0.6
att.Mult_Recoil = 2.5
att.Mult_RecoilSide = 1.55
att.Mult_SightedSpeedMult = 1.25
att.Mult_SpeedMult = 1.1
att.Mult_ShootSpeedMult = 1.15
att.Add_BarrelLength = -9
att.Mult_Sway = 3.5

att.ActivateElements = {"stock_none"}
att.GivesFlags = {"pistolgrip"}
--lua/arccw/shared/attachments/ur_dbs_barrel_sawedoffplus.lua:
att.PrintName = "IZh-58 10\" Jury-rigged Barrel"
att.AbbrevName = "10\" Jury-rigged Barrel"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Volga SuperShotgun 10\" Jury-rigged Barrel"
end

att.Icon = Material("entities/att/ur_dbs/bswp.png","smooth mips")
att.Description = "So cut down that you need a custom handguard to go with it. Reduces the weapon to a pistol-like profile, ruining accuracy."
att.Slot = {"ur_db_barrel"}
att.AutoStats = true

att.ModelOffset = Vector(-21, -2.2, 8.3)
att.Model = "models/weapons/arccw/ur_g3_lhik_slim.mdl"
att.LHIK = true

att.SortOrder = 10


att.Add_BarrelLength = -20
att.Mult_Sway = .5
att.Mult_SightTime = .75
att.Mult_DrawTime = .75
att.Mult_HolsterTime = .75
att.Mult_SpeedMult = 1.05
att.Mult_HipDispersion = 0.5

att.Mult_Recoil = 1.5
att.Mult_AccuracyMOA = 2.5
att.Mult_Range = .5


att.ActivateElements = {"barrel_swplus"}
att.GivesFlags = {"sawnoff"}
--lua/arccw/shared/attachments/ur_deagle_caliber_357.lua:
att.PrintName = "Desert Eagle .357 Magnum Conversion"
att.AbbrevName = ".357 Magnum"
att.Icon = Material("entities/att/uc_bullets/357magnum.png","smooth mips")
att.Description = "A more practical caliber with higher capacity magazines and actually manageable recoil, but not as much raw power."

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Predator .357 Magnum Conversion"
end

local path = ")^weapons/arccw_ur/sw586/"
local fire357 = {path .. "fire-01.ogg", path .. "fire-02.ogg", path .. "fire-03.ogg", path .. "fire-04.ogg", path .. "fire-05.ogg", path .. "fire-06.ogg"}

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return fire357sup
    else
        return fire357
    end
end

local tail = ")/arccw_uc/common/357mag/"
local fire357dist = {tail .. "fire-dist-357mag-pistol-ext-01.ogg", tail .. "fire-dist-357mag-pistol-ext-02.ogg", tail .. "fire-dist-357mag-pistol-ext-03.ogg", tail .. "fire-dist-357mag-pistol-ext-04.ogg", tail .. "fire-dist-357mag-pistol-ext-05.ogg", tail .. "fire-dist-357mag-pistol-ext-06.ogg"}
local common = ")/arccw_uc/common/"

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire357dist
    end
end


att.AutoStats = true
att.Slot = "ur_deagle_caliber"

att.Mult_ClipSize = 1.3
att.Mult_Recoil = 0.7
att.Mult_Damage = 60 / 80
att.Mult_DamageMin = 20 / 12

att.Mult_ShootSpeedMult = 1.2
att.Mult_RPM = 1 + (1/3)

att.Override_Trivia_Calibre = att.AbbrevName -- E F F I C I E N C Y
att.Override_ShellModel = "models/weapons/arccw/uc_shells/357sig.mdl"
att.Override_ShellScale = 1
--lua/arccw/shared/attachments/ur_deagle_skin_black.lua:
att.PrintName = "Desert Eagle Matte Black Finish"
att.AbbrevName = "Matte Black"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Predator Matte Black Finish"
end
att.Icon = Material("entities/att/acwatt_ur_deagle_finish_black.png","mips smooth")
att.Description = "The finish of choice for assassins and agents everywhere.\n\n\"We're willing to wipe the slate clean, give you a fresh start. All that we're asking in return is your cooperation in bringing a known terrorist to justice.\""
att.Slot = "ur_deagle_skin"
att.Desc_Neutrals = {
    "uc.cosmetic"
}
att.SortOrder = 2

att.IgnorePickX = true
att.ActivateElements = {"ur_deagle_skin_black"}
--lua/arccw/shared/attachments/ur_deagle_skin_sex.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_deagle_skin_sex.lua:
att.PrintName = "The Ultimate"
att.AbbrevName = "The Ultimate"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "The Ultimate"
end
att.Icon = Material("entities/att/acwatt_ur_deagle_finish_sex.png","mips smooth")
att.Description = "Administrator powers not included.\n\n\"This is an extremely OP admin weapon. fires every .05 seconds, 75 bullets per shot, and no recoil..... it's awesome.\n\nRight click spawns rapid fire explosions\""
att.Slot = "ur_deagle_skin"
att.Desc_Neutrals = {
    "uc.cosmetic"
}

--[[]
att.Hook_NameChange = function(wep, name) return "Sexyness" end

att.AdminOnly = true
att.SortOrder = 2
att.Mult_Damage = 100
att.Mult_RPM  = 100
att.Override_Num  = 10
att.Mult_Recoil  = 0.1
att.Mult_AccuracyMOA   = 0.001

att.Override_BottomlessClip = true
att.Override_Firemodes_Priority = 100
att.Override_Firemodes = {
    {
        PrintName = "SEX",
        Mode = 2,
    },
}
]]

att.IgnorePickX = true
att.ActivateElements = {"ur_deagle_skin_sex"}
--lua/arccw/shared/attachments/ur_deagle_tritium.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_barrel_15.lua:
att.PrintName = "HK33A2 15\" Assault Barrel"
att.AbbrevName = "15\" Assault Barrel"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "CN66 15\" Assault Barrel"
end

att.Icon = Material("entities/att/ur_g3/barrel_33.png","smooth mips")
att.Description = "Standard barrel for the intermediate carbine variant of the rifle. Improves weapon handling while marginally reducing range."
att.Slot = "ur_g3_barrel"
att.AutoStats = true

att.SortOrder = 15

att.Mult_SightTime = 0.9
att.Add_BarrelLength = -4
att.Mult_SightedSpeedMult = 1.05
att.Mult_Sway = 0.85

att.Mult_Recoil = 1.1
att.Mult_AccuracyMOA = 1.1
att.Mult_Range = 0.75

att.GivesFlags = {"g3_not8"}

--lua/arccw/shared/attachments/ur_g3_hg_slim.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_mag_40_556.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_mag_40_556.lua:
att.PrintName = "HK33 40-Round Extended Mag"
att.AbbrevName = "40-Round Extended Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "CN66 40-Round Extended Mag"
end

att.Icon = Material("entities/att/ur_g3/mag556_40.png","smooth mips")
att.Description = "Extended magazine for the 5.56 variant of the rifle. Though very reliable, its oblong design makes it awkward to load."
att.Slot = {"ur_g3_mag"}
att.AutoStats = true

att.HideIfBlocked = true
att.SortOrder = 10

att.Override_ClipSize = 40
att.Override_ClipSize_Priority = 2

att.Mult_SightTime = 1.1
att.Mult_ReloadTime = 1.15
att.Mult_Sway = 1.5

att.Mult_SpeedMult = 0.975
att.Mult_ShootSpeedMult = 0.95

att.RequireFlags = {"cal_556"}

-- att.Hook_SelectReloadAnimation = function(wep, anim)
--     return anim .. "_30rnd"
-- end
--lua/arccw/shared/attachments/ur_g3_skin_olive.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_skin_tan.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_skin_wood.lua:
att.PrintName = "G3 CETME Wooden Furniture"
att.AbbrevName = "Wood"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "G58 Wooden Furniture"
end

att.Icon = Material("entities/att/ur_g3/skin_wood.png","smooth mips")
att.Description = "Old-fashioned wooden furniture that makes you feel like the apocalypse is near."
att.Slot = "ur_g3_skin"
att.Desc_Neutrals = {
    "uc.cosmetic",
}
att.SortOrder = 1

att.IgnorePickX = true
--lua/arccw/shared/attachments/ur_mp5_stock_pdw.lua:
att.PrintName = "MP5K PDW Folding Stock"
att.AbbrevName = "PDW Stock"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "PK5-PDW Folding Stock"
end

att.Icon = Material("entities/att/ur_mp5/stock_pdw.png", "smooth mips")
att.Description = "Light polymer \"personal defense weapon\" stock. Ideal for point shooting due to its conventional shape. It can be folded to reduce profile even further at the cost of recoil.\n\nToggling the stock modifies performance accordingly."
att.AutoStats = true
att.Slot = "ur_mp5_stock"

att.ToggleLockDefault = true
att.ToggleSound = "arccw_uc/common/stockslide.ogg"

att.Mult_MoveDispersion = .85
att.Mult_Recoil = 1.5
att.Mult_RecoilSide = 1.25


att.Mult_HipDispersion = 0.75
att.Mult_DrawTime = 0.85
att.Mult_HolsterTime = 0.85

att.ToggleStats = {
    {
        PrintName = "Extended",
        ActivateElements = {"stock_pdw"},
        AutoStats = true,
    },
    {
        PrintName = "Folded",
        ActivateElements = {"stock_pdw_folded"},
        AutoStats = true,
        Add_BarrelLength = -12,
        Mult_Recoil = 2,
        Mult_ShootSpeedMult = 1.20,
        Mult_SightedSpeedMult = 1.20,
        Mult_Sway = 3,
    }
}
--lua/arccw/shared/attachments/ur_spas12_barrel_short.lua:
att.PrintName = "18\" SPAS-12 Compact Barrel"
att.AbbrevName = "18\" Compact Barrel"
att.Icon = Material("entities/att/acwatt_ud_m1014_barrel_short.png", "smooth mips")
att.Description = "Rare short barrel intended for breaching and close quarters use. Noticeably increases pellet spread, but is easier to manuver."
att.Icon = Material("entities/att/ur_spas/barrel_short.png", "smooth mips")
att.Slot = "ur_spas12_barrel"

att.SortOrder = 18

att.AutoStats = true

att.Mult_AccuracyMOA = 1.5
att.Mult_Recoil = 1.1
att.Mult_Range = 0.8

att.Mult_Sway = 0.75
att.Mult_SightTime = 0.75
att.Mult_SpeedMult = 1.025
att.Mult_ShootSpeedMult = 1.1

att.Add_BarrelLength = -4
--lua/arccw/shared/attachments/ur_spas12_charm_rail.lua:
return gluapack()()
--lua/arccw/shared/sh_mw2.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_penetration.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_util.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/client/cl_autostats.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/client/cl_glint.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/client/cl_npc.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/client/cl_warnings.lua:
return gluapack()()
--addons/policearmorylocker/lua/armory_locker/client/armory_locker_weapons.lua:
return gluapack()()
--addons/policearmorylocker/lua/armory_locker/shared/armory_locker_darkrpadds.lua:
-- binbontr 
--addons/ashop/lua/ashop/lang/sh_english.lua:
return {
    SubCategory = "Alt Kategori",
    Rarity = "Nadirlik",
    Name = "İsim",
    FilterBy = "Filtrele",
    Buyable = "Satın Alınabilir",
    ObjectType_Clothes = "Kıyafetler",
    Render = "Görünümler",
    Categories = "Kategoriler",
    WeaponSetting = "Silah Ayarları",
    Premade = "Hazır Öğeler",
    OrderBy = "Sıralama Ölçütü",
    Pac3 = "Pac3",
    Pos = "Pozisyon",
    Ang = "Açı",
    Scale = "Ölçek",
    Color = "Renk",
    Bone = "Kemik",
    Add = "Ekle",
    Remove = "Kaldır",
    MaterialID = "Materyal ID",
    Duplicate = "Kopyala",
    ClickTaunt = "Kışkırtmak için tıkla!",
    Obtained = "Kazandınız",

    Price = "Fiyat",
    BestPrice = "En Yüksek Fiyat",
    LowestPrice = "En Düşük Fiyat",
    Inspect = "İncele",
    Unbox = "%s kutudan çıkardı",

    Others = "Diğerleri",
    CantBuyRank = "Bu öğeyi satın almak için uygun rütbeye sahip değilsiniz",

    PreviewPos = "Önizleme Pozisyonu",
    PreviewDistance = "Önizleme Uzaklığı/Zoom",

    TradeSent = "%s'ye ticaret teklifi gönderildi",

    Log_1 = "{1}, {2} öğesini aldı",
    Log_2 = "{1}, çevrimdışıyken {2} öğesini aldı",
    Log_3 = "{1}, {3} nesnesinde {2} özelliğini değiştirdi",
    Log_4 = "{1}'in parası güncellendi: {2}",
    Log_7 = "SteamID'si {1} olan oyuncunun parası güncellendi: {2}",
    Log_5 = "{1} rütbe grubu, {2} tarafından oluşturuldu",
    Log_6 = "{1} rütbe grubu, {2} tarafından düzenlendi",
    Log_8 = "{1} rütbe grubu, {2} tarafından silindi",
    Log_9 = "{1} nadirliği, {2} tarafından silindi",
    Log_10 = "{1} nadirliği, {2} tarafından oluşturuldu",
    Log_11 = "{1} öğesi, {2} tarafından silindi",
    Log_12 = "{1} öğesi, {2} tarafından düzenlendi",
    Log_36 = "{1}, {2} öğesini oluşturdu",

    Log_13 = "{1} nesne türü, {2} tarafından oluşturuldu",
    Log_14 = "{1} nesne türü, {2} tarafından güncellendi",
    Log_15 = "{1} nesne türü, {2} tarafından silindi",

    Log_16 = "{1} görünümü, {2} tarafından düzenlendi",
    Log_17 = "{1} görünümü, {2} tarafından oluşturuldu",
    Log_18 = "{1} görünümü, {2} tarafından silindi",

    Log_19 = "{1} pac3, {2} tarafından oluşturuldu",
    Log_20 = "{1} pac3, {2} tarafından güncellendi",
    Log_21 = "{1} pac3, {2} tarafından silindi",

    Log_22 = "{1}, {2} karşılığı olarak para birimi değişimi kullandı",
    Log_23 = "{1}, {2} para birimi değişimini oluşturdu",
    Log_24 = "{1}, {2} para birimi değişimini düzenledi",
    Log_25 = "{1}, {2} para birimi değişimini sildi",

    Log_26 = "{1}, {2}'nin envanterini inceledi",
    Log_27 = "{1}, {2} için normal para değiştirdi",
    Log_37 = "{1}, {2} için premium parayı değiştirdi",
    Log_28 = "{1}, {2}'nin envanterine {2} öğesini ekledi",
    Log_29 = "{1}, {2}'nin envanterinden {2} öğesini sildi",
    Log_38 = "{1}, {2}'nin envanterinden bir öğe sildi",

    Log_30 = "{1}, {2} silah ayarlarını değiştirdi",
    Log_31 = "{1}, {2} silah ayarını sildi",
    Log_32 = "{1}, {2} silah ayarını oluşturdu",

    Log_33 = "{1}, {2} üzerinde bir rütbe terfisi oluşturdu",
    Log_34 = "{1}, {2} üzerinde bir rütbe terfisi düzenledi",
    Log_35 = "{1}, {2} üzerinde bir rütbe terfisini sildi",

    Log_39 = "{1}, {2} araba konfigürasyonunu düzenledi",
    Log_40 = "{1}, {2} araba konfigürasyonunu sildi",
    Log_41 = "{1}, {2} araba konfigürasyonunu oluşturdu",

    Log_BuyItem = "Satın Alınan Öğeler",
    Log_BuyItemOffline = "Verilen Öğeler",

    ExpireItem = "Bu öğe %s sonra süresi dolacak",
    ExpireItemIn = "Bu öğe %s içinde süresi dolacak",
    Months = "Ay(lar)",
    week = "h",
    day = "g",
    hour = "s",
    minutes = "dak",
    seconds = "sn",

    NotEnoughMoney = "Yeterli paranız yok",
    Search = "Ara",
    Date = "Tarih",
    Logs = "Kayıtlar",
    SteamIDInClipboard = "SteamID panoya kopyalandı!",
    SendTradeInvitation = "%s'ye ticaret daveti gönder",
    NeedsToAcceptAfterward = "Kabul etmesi gerekiyor",
    Name = "İsim",
    SetPlayerMoney = 'Oyuncu parasını ayarla',
    MoneyToSet = 'Ayarla para miktarı',
    GiveItemToPlayer = 'Bir oyuncuya öğe ver',
    ItemToGive = 'Verilecek öğe',

    Input_MissingValue = "Eksik bir değer var",
    Input_MoreThan0 = "0'dan büyük olmalı",
    Input_LessThanX = "%s'dan küçük olmalı",
    Input_MoreThanX = "%s'den büyük olmalı",
    Input_NotExistingItem = "Geçersiz/eksik öğe ID'si",
    Input_TooShortText = "Metin çok kısa (En az %s karakter olmalı)",

    Open = "Aç",
    Close = "Kapat",
    CloseMenu = "Menüyü kapat",
    Ready = "Hazır",
    Trade = "Takas",
    TradeReady = "Takas hazır, teklifinizi değiştiremezsiniz",

    ListOfObjects = "Nesne Listesi",
    CarDealer_1 = "Verilecek Araç/Sınıf (Araç satıcısı eklentisi ile ilgili)",
    CarDealer_2 = "Araç sınıfı (İlk parametre bir araç sınıfı değilse)",

    Commandes_1 = "Komut",
    Commandes_2 = "Şu durumda çalıştır...",
    Commandes_2_0 = 'Her doğuşta',
    Commandes_2_1 = 'İlk doğuşta',
    Commandes_2_2 = 'Yalnızca bir kez',
    Commandes_3 = "Lua Kodu",

    Entities_1 = "Varlık Sınıfı",
    Entities_2 = "Model geçersiz kılma, göstermek için (Önerilir)",
    EntitiesClass = "Varlıklar",
    
    FinishersClass = "Bitiriciler",
    Finisher_0 = "Parçacık adı veya Bitirici ID",
    Finisher_1 = "Parçacık dosya adı",
    Finisher_2 = "İnfaz sırasında Ragdoll'u gizle",
    Finisher_3 = "Ofset",
    Finisher_4 = "Ek ID",
    Finisher_5 = "Tekrar Sayısı",
    Finisher_6 = "Her tekrar arası saniye",
    Finisher_7 = "Ragdoll'u takip et",
    Finisher_8 = "Mağaza Görünüm Boyutu",
    
    KillCardClass = "Öldürme Kartları",
    KillCard_1 = "Resim Bağlantısı (Öğe)",
    KillCard_2 = "Kart üstündeki renk",
    
    PlayerModelClass = "Oyuncu Modelleri",
    PlayerModel1 = "Model yolu",
    
    Bundles = "Paketler",
    CarSkin_1 = "Malzeme (Malzeme adı veya bağlantı)",
    CarSkin_2 = "Araca özel",
    
    Skin = "Cilt",
    Scale = "Ölçek",
    PetClass = "Evcil Hayvanlar",
    Pet_4 = "Yürüyüş Dizilimi",
    Pet_5 = "Bekleme Dizilimi",
    Pet_6 = "Yüzme Dizilimi",
    Pet_7 = "Zıplama Dizilimi",
    Pet_8 = "Evcil Hayvanınızın adı",
    Pet_Alt = 'Dizilim Adı',
    Pet_Alt2 = 'Hız Çarpanı',
    
    CarSkins = "Araba Kaplamaları",
    CarSkins_AlreadyExist = 'Bu araç sınıfı zaten mevcut',
    CarSkins_Create = 'Bir araba kaplaması oluştur',
    DeleteCarClassSkin = "Bu araba kaplaması ön ayarını sil",
    
    TauntsClass = "Animasyonlar",
    Taunts_2 = "Hareket adı VEYA wOs animasyon adı",
    Taunts_3 = "Döngü yapmalı mı? (yalnızca wOs)",
    Taunts_4 = "Şarkı Bağlantısı",
    Taunts_5 = "Dizi Hızı (0.5 = Yarı Hız, 1 = Normal)",
    Taunts_6 = "Animasyon yüzdesi, görüntüleme için",
    
    ColorClass = "Renk",
    Color_1 = "Rengi RGB ile ayarla",
    Color_2 = "Rengi Stile göre ayarla",
    
    EffectClass = "Etki",
    Style = "Stil",
    TextClass = "Metin",
    
    TrailsClass = "İzler",
    Trails_1 = "Parçacık tabanlı (İşaretlenmemiş) Veya iz tabanlı",
    Trails_2 = "Efekt Verisi (Doku veya parçacık adı)",
    Trails_3 = "Kemik veya Ek kullanarak takip (Kemik ofsete izin verir)",
    Trails_4 = "Ek veya Kemik Adı",
    Trails_5 = "Parçacıklar + Kemik ise: Ofset",
    Trails_6 = "Parçacıklar ise: Dosya Yönü",
    Trails_7 = "İz ise: Renk",
    Trails_8 = "İz ise: Eklenebilir mi",
    Trails_9 = "İz ise: Başlangıç Genişliği",
    Trails_10 = "İz ise: Bitiş Genişliği",
    Trails_11 = "İz ise: Ömür",
    
    TempWeaponClass = "Geçici Silahlar",
    TempWeapon_1 = "Silah Sınıfı",
    TempWeapon_2 = "Ekipman için verilen birincil mühimmat sayısı",
    TempWeapon_3 = "Ekipman için verilen ikincil mühimmat sayısı",
    TempWeapon_4 = "Hatalı pozisyonları düzeltmek için Rendeleme Vektörü",
    
    PermWeaponClass = "Kalıcı Silahlar",
    
    WeaponSkinClass = "Silah Kaplamaları",
    
    ClothesClass = "Aksesuarlar",
    ClothesDefaultHat = "Şapka",
    ClothesDefaultBack = "Sırt",
    ClothesDefaultFacemask = "Yüz Maskesi",
    ClothesDefaultGlasses = "Gözlük",
    ClothesDefaultNeck = "Boyun",
    Clothes_1 = "Model",
    Clothes_5 = "KullanıcıAçısı",
    Clothes_6 = "KullanıcıPozisyonu",
    Bonemergable = "Kemikle Birleştirilebilir",
    UserScale = "Kullanıcı Ölçeği",
    SkinID = "Kaplama ID",
    Accept = "Kabul Et",
    Cancel = "İptal",
    Save = "Kaydet",
    Reset = "Sıfırla",
    Send = "Gönder",
    AddNewValue = 'Yeni bir değer ekle',
    RemoveThisValue = "Bu giriş kaydını kaldır",
    Actions = "Eylemler",
    Parameters = "Parametreler",
    Unequip = "Çıkar",
    Equip = "Donat",
    Use = 'Kullan',
    BuyWithPremiumMoney = "Premium parayla satın al",
    BuyWithClassicMoney = "Klasik parayla satın al",
    ThisItemCost = "Bu öğe %s fiyatında",
    BuyFormat = "%s Satın Al",
    YouCantAfford = "Bu öğeyi karşılayamazsınız",
    OnPromotion = "Promosyonda",

    ACoinsPremium = "VenomCoins Premium",
    ACoinsClassic = "VenomCoins Klasik",
    ExchangeType = 'Değişim Türü',
    
    SureToDeleteTrade = "Bu ticareti silmek istediğinizden emin misiniz?",
    CurrencyType = 'Para Birimi Türü',
    CreateNewCurrencyType = 'Yeni bir para birimi ticareti oluştur',
    OrderCurrencyCoins = 'Dönüşüm: Para Birimi -> Madeni Para',
    RatioCurrency = 'Çıktı para birimi için değer ne kadar?',
    IsPremiumCoins = 'Premium madeni paralar mı?',
    ParentContainer = 'Ana Konteyner',
    HowMuchItemAreEquipable = 'Kaç öğe ekipman olarak kullanılabilir?',
    ItemList = "Öğe Listesi",
    Create = 'Oluştur',
    PremiumPrice = "Premium Fiyat",
    DeleteOnDeathWhenEquipped = 'Ekipman olarak kullanıldığında ölümde silinir',
    PromotionStart = 'Promosyon Başlangıcı',
    PromotionEnd = 'Promosyon Bitişi',
    PromotionAmount = 'Promosyon Miktarı',
    PictureLink = "Resim Bağlantısı (Görünümü Geçersiz Kıl)",
    PictureLinkNotOverride = "Resim bağlantısı veya simge yazısı",
    GroupRestrained = 'Grup Kısıtlaması',
    ExpireTime = 'Sona Erme Süresi (Saniye olarak)',
    ModifyAItem = 'Bir öğeyi düzenle',
    AreYouSureToDeleteThis = "Bunu silmek istediğinizden emin misiniz?",
    
    AreYouSureToSellThis = "Bu öğeyi satmak istediğinizden emin misiniz?",
    SellThisItemFor = "Bu öğeyi %s karşılığında sat",
    
    WarningDeleteItem = "Öğeyi sil ve oyunculara geri ödeme yap",
    WarningDeleteItemRefund = "Hiçbir geri ödeme yapmadan öğeyi sil",
    WarningDeleteItem2 = "Bu, oyunculara geri ödeme yapacaktır. Emin misiniz?",
    WarningDeleteItemRefund2 = "Bu, oyunculara geri ödeme yapmaz! Emin misiniz?",
    ExportAsPremade = 'Hazır olarak dışa aktar',
    CreateAObjectCategory = 'Bir nesne kategorisi oluştur',
    Parent = "Parent",
    SelectAParentType = 'Bir üst tür seç',
    HowMuchItemsAreEquipable = 'Kaç öğe ekipman olarak kullanılabilir?',
    CanOnlyDeleteSubCat = "Yalnızca alt kategoriler silinebilir",
    NeedToBeEmpty = "Yalnızca boş alt kategoriler silinebilir",
    DeleteThisSubCategory = "Bu alt kategoriyi sil %s",
    ID = "ID",
    ModelAttached = 'Oyuncu veya model (işaretli) bağlı',
    Pac3Code = "Pac3 kodu",
    CreateAPac3 = 'Bir Pac3 oluştur',
    ClickHereToSaveSelection = "Seçilen öğeleri kaydetmek için buraya tıklayın",
    CreateMissingSubCat = "Eksik alt kategorileri oluştur",
    NeededToCreateProperly = "Öğeleri doğru bir şekilde oluşturmak için gerekli",
    SelectItemsToImport = 'İçe aktarmak istediğiniz öğeleri seçin',
    ObjectTypeXIsMissing = "Nesne türü %s eksik",
    XItemsCouldntBeLoaded = "%s öğe yüklenemedi",
    WhichExistingCat = "Hangi mevcut kategoriler kullanılacak (Sol = Hazır kategori, Sağ = Öğeleri koymak istediğiniz yer)",
    UsedCatForX = "'%s' için kullanılan kategori",
    RequireWorkshop = "Bu içerik bir atölye eklentisi gerektiriyor",
    AcceptToOpenPopup = "Atölye sayfasını açmayı kabul edin",
    GroupName = "Grup Adı",
    Description = "Açıklama",
    MissingRankFailMsg = "Gerekli seviyeler olmadan satın alma denemesi mesajı",
    FreeCoinsEvery5Min = 'Her 5 dakikada bir verilen ücretsiz madeni paralar?',
    PremiumCoinsEvery5Min = 'Her 5 dakikada bir verilen premium madeni paralar?',
    RankName = "Seviye adı",
    AllowedRanks = 'İzin Verilen Seviyeler',
    RankGroups = 'Seviye Grupları',
    CreateRankGroup = "Bir seviye grubu oluştur",
    WarningDeleteRankGroup = "%s silmek istediğinizden emin misiniz? %s öğe bunu kullanıyor.",
    WarningDeleteRankGroupEmpty = "%s seviyesini sil",
    CantUndoOperation = "Bu işlemi geri alamazsınız",
    SureToDeletePromotionRank = "Bu promosyon seviyesini silmek istediğinizden emin misiniz?",
    RankAlreadyExistWithThatName = "Bu isimde bir seviye zaten mevcut",
    RankPromo = 'Seviye Promosyonu',
    CreatePromoBasedOnRank = 'Seviyelere dayalı bir promosyon oluştur',
    Rank = "Seviye",
    CreateARarity = 'Bir nadirlik oluştur',
    DeleteTheRarity = "%s nadirliğini sil",
    DrawObjectTypeInShopCategory = "Bu mağaza kategorisinde '%s' nesnelerini çiz",
    Renders = "Görünümler",
    CreateARender = 'Bir Görünüm Oluştur',
    CantDeleteNotEmptyRender = "İçi boşaltılmadan silemezsiniz",
    DeleteRender = "%s görünümünü sil",
    WeaponSkins = "Silah Kaplamaları",
    CreateAWepClassSkin = 'Bir Silah Sınıfı Kaplaması Oluştur',
    AWeaponWithThisClass = "Bu sınıfta bir silah zaten mevcut",
    DeleteWeaponClassSkin = "%s silahını silmek istediğinizden emin misiniz?",
    WrongEquipRank = "Bunu kuşanmak için belirli bir seviyeye ihtiyacınız var",
    
    WinnerIs = "Kazanan %s!",
    RestrictedTo = "Sadece %s ile sınırlı",
    TradeOffers = "Ticaret Teklifleri",
    TradeCreate = 'Ticaret Oluştur',
    PlayerInventory = 'Oyuncu Envanteri',
    Currencies = 'Para Birimleri',
    Giveaway = "Çekiliş",
    CreateGiveaway = "Bir çekiliş oluştur",
    TooLongText = "Metin çok uzun (En fazla %s karakter olmalı)",
    ObjectType = "Nesne Türleri"    
}
--addons/ashop/lua/ashop/code/gamemodes/logs_integration_name/sh_flux.lua:
hook.Add("Flux_LoadedGamemode", "AShop_Name_Flux", function()
    hook.Add("Flux:ChangeName", "AShop_Name_Flux", function(ply, n)
        ashop.Logs.RefreshName(ply, n)
    end)

    hook.Remove("Flux_LoadedGamemode", "AShop_Name_Flux")
    hook.Remove("player_changename", "ashop_Name")
end)
--addons/ashop/lua/ashop/code/gamemodes/logs_integration_name/sh_helix.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/case_opening/sh_hiddenmethods.lua:
// I don't want these functions to be global
// This would be bullshit, so I hide them in a file that I can include after

return {
    GetCaseLuck = function(itemList, count)
        local m = 0
        for k, v in ipairs(itemList) do
            m = m + v[2]
        end
    
        local resultTable = {}
        for i = 1, (count or 1) do
            local rand = math.Rand(0, m)
            local count = 0
    
            for k, v in ipairs(itemList) do
                if count <= rand and rand <= (count + v[2]) then
                    table.insert(resultTable, v[1])
                    break
                else
                    count = count + v[2]
                end
            end
        end
    
        return resultTable
    end
}
--addons/ashop/lua/ashop/code/object_types/finishers/cl_finishers.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('FinishersClass')
OBJECT_TYPE.UniqueIdentifier = "Finishers"

local alreadyLoadedFile, alreadyLoadedParticle = {}, {}

function OBJECT_TYPE.UI_FILL(plyItem, item, pnl, parent, w, h, noCircle)
    local md = item.metadata

    local m = vgui.Create( "DModelPanel" , parent )
    m:SetSize(parent:GetSize())
    m:SetModel( LocalPlayer():GetModel() )
    m:SetMouseInputEnabled(false)
    m:SetPaintedManually(true)
    m.FarZ = 4096*10

    local mn, mx = m.Entity:GetRenderBounds()
    local size = 0
    size = math.max( size, math.abs(mn.x) + math.abs(mx.x) )
    size = math.max( size, math.abs(mn.y) + math.abs(mx.y) )
    size = math.max( size, math.abs(mn.z) + math.abs(mx.z) )
    
    m:SetFOV( 45 )
    m:SetCamPos( Vector( size, size, size ) * (md[9] or 1.5))

    function m:LayoutEntity() end

    if !md[2] then
        local id = tonumber(md[1])
        local finisher = ashop.FinisherList[id]

        if finisher and finisher.client then
            local l = finisher.client(m.Entity)

            for k, v in ipairs(l or {}) do
                v:SetNoDraw(true)
            end

            function m:OnRemove()
                for k, v in ipairs(l or {}) do
                    if IsValid(v) then
                        v:Remove()
                    end
                end

                if finisher.clientEnd then
                    finisher.clientEnd(m:GetEntity())
                end
            end

            if finisher.hidePM and !table.IsEmpty(l) then
                local mn, mx = l[1]:GetRenderBounds()
                local size = 0
                size = math.max( size, math.abs(mn.x) + math.abs(mx.x) )
                size = math.max( size, math.abs(mn.y) + math.abs(mx.y) )
                size = math.max( size, math.abs(mn.z) + math.abs(mx.z) )
                
                m:SetFOV( 45 )
                m:SetCamPos( Vector( size, size, size ) * (md[9] or 1.5))
            end

            function m:PreDrawModel(ent)
                if finisher.hidePM then
                    if finisher.overrideModelDraw then
                        finisher.overrideModelDraw(ent)
                    end

                    if l and !table.IsEmpty(l) then
                        for k, mdl in ipairs(l) do
                            if !IsValid(mdl) then return end

                            mdl:DrawModel()
                        end
                    end
                    
                    return false
                end
            end

            if finisher.overrideModelDraw then
                function m:PostDrawModel(ent)
                    finisher.overrideModelDraw(ent)

                    if l and !table.IsEmpty(l) then
                        for k, mdl in ipairs(l) do
                            if !IsValid(mdl) then return end
                            mdl:DrawModel()
                        end
                    end
                end
            end
        end
    else
        if !alreadyLoadedFile[md[2]] then
            alreadyLoadedFile[md[2]] = true
            game.AddParticles( md[2] )
        end

        if !alreadyLoadedParticle[md[1]] then
            alreadyLoadedParticle[md[1]] = true
            PrecacheParticleSystem( md[1] )
        end

        local part = CreateParticleSystem(m:GetEntity(), md[1], md[8] and PATTACH_POINT_FOLLOW or PATTACH_ABSORIGIN, md[5] or 0, md[4])

        if part and part:IsValid() then
            part:SetShouldDraw(false)

            function m:PreDrawModel(ent)
                if part:IsValid() then
                    if part:IsFinished() != false then
                        // Don't ask me why, the particles are not valid after the execution
                        part:StopEmissionAndDestroyImmediately()
                        part = CreateParticleSystem(m:GetEntity(), md[1], md[8] and PATTACH_POINT_FOLLOW or PATTACH_ABSORIGIN, md[5] or 0, md[4])
                        part:SetShouldDraw(false)
                    end

                    part:Render()
                end

                return false
            end
        end
    end

    return true, {m}
end

net.Receive('ashop_Finisher', function()
    local attacker = net.ReadEntity()
    local plyItemID = net.ReadUInt(ashop.Config.BitsPlyItemID)
    local victim = net.ReadEntity()
    local ragdoll = net.ReadUInt(13)
    local pos = net.ReadVector()

    if !IsValid(attacker) then return end

    local timerID = 'ashop_finisher_findragdoll_' .. victim:EntIndex()
    
    timer.Create(timerID, 0.33, 15, function()
        local ragdoll = Entity(ragdoll)

        if !IsValid(ragdoll) or !ragdoll:IsRagdoll() then
            return
        end

        local plyItem = attacker.ashop_data.items[plyItemID]

        if !plyItem then return end

        local item = ashop.items[plyItem.item_id]
        if !item then return end
    
        local md = item.metadata

        if !md[2] or md[2] == "" then
            local id = tonumber(md[1])
    
            if ashop.FinisherList[id].client then
                local l = ashop.FinisherList[id].client(ragdoll, attacker, victim, pos)

                ragdoll:CallOnRemove('AshopCleanFinisher', function()
                    for k, v in ipairs(l or {}) do
                        if IsValid(v) then
                            v:Remove()
                        end
                    end

                    if ashop.FinisherList[id].clientEnd then
                        ashop.FinisherList[id].clientEnd(ragdoll, attacker, victim, pos)
                    end
                end)
            end
        else
            if !alreadyLoadedFile[md[2]] then
                alreadyLoadedFile[md[2]] = true
                game.AddParticles( md[2] )
            end
    
            if !alreadyLoadedParticle[md[1]] then
                alreadyLoadedParticle[md[1]] = true
                PrecacheParticleSystem( md[1] )
            end
    
            if md[3] then
                ragdoll:SetNoDraw(true)
            end
    
            local l = {}
            timer.Create('ashop_ragdolleffect_' .. victim:EntIndex(), md[7] or 0, md[6] or 1, function()
                if !IsValid(ragdoll) then return end
                table.insert(l, CreateParticleSystem(ragdoll, md[1], md[8] and PATTACH_POINT_FOLLOW or PATTACH_ABSORIGIN, md[5] or 0, md[4]))
            end)

            ragdoll:CallOnRemove('AshopCleanFinisher', function()
                for k, v in ipairs(l) do
                    if IsValid(v) and v:IsValid() then
                        if v.StopEmissionAndDestroyImmediately then
                            v:StopEmissionAndDestroyImmediately()
                        else
                            v:Remove()
                        end
                    end
                end
            end)
        end

        timer.Remove(timerID)
    end)
end)

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/title_code/color/cl_colors.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/title_code/color/sh_text.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/players/money/sh_money.lua:
local PLAYER = FindMetaTable("Player")

function PLAYER:ashopMoneyGet(premium)
    assert(self.ashop_data, "Can't get player money, there is no data")
    return self.ashop_data[premium and "money_premium" or "money_normal"]
end

function PLAYER:ashopMoneyAfford(price, premium)
    return self:ashopMoneyGet(premium) >= price
end
--addons/ashop/lua/ashop/code/players/network_data/sh_playernets.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/players/sync_datas/sh_sync.lua:
local PLAYER = FindMetaTable("Player")

function PLAYER:ashopGetID()
    assert(self.ashop_data, "Can't get player ID, there is no data")
    return self.ashop_data.id
end

if ashop.Config.PS2Compatibility then
    function PLAYER:PS2_GetWallet()
        return self:ashopMoneyGet(false)
    end

    function PLAYER:PS2_CanAfford( itemClass )
        return self:ashopMoneyAfford( itemClass.price, false )
    end

    function PLAYER:PS2_HasItemEquipped( item )
        local equipped = self:AShop_SlotStateGet(item.object_types)

        for k, v in pairs(equipped or {}) do
            local plyItem = self.ashop_data.items[v]
            local item2 = ashop.items[plyItem.item_id]

            if item2.id == item.id then
                if CLIENT then
                    return true
                else
                    return k
                end
            end
        end

        return false
    end

    Pointshop2 = Pointshop2 or {}

    function Pointshop2.GetItemClassByName( itemName )
        for k, v in pairs(ashop.items) do
            if v.name == itemName then
                return v
            end
        end
    end
end

function ashop.GetGroupRestrictsAsSelect()
    local t = {}

    for k, v in pairs(ashop.groupranks) do
        table.insert(t, {v.name, k})
    end
    return t
end
--addons/ashop/lua/ashop/code/ui/cl_material-avatar.lua:
// CREDIT: https://github.com/WilliamVenner/glua-material-avatar
// CREDIT: https://github.com/WilliamVenner/glua-material-avatar
// CREDIT: https://github.com/WilliamVenner/glua-material-avatar

local AVATAR_IMAGE_CACHE_EXPIRES = 86400 -- 1 day, in seconds

function ashop.getAvatarMaterial(steamid64, callback)
	-- First, check the cache to see if this avatar has already been downloaded.
	-- If the avatar hasn't been cached in data/, file.Time will return 0.
	-- If an avatar material is 1 day old, let's redownload it but use it as a fallback in case something goes wrong.
	local fallback
	if os.time() - file.Time("avatars/" .. steamid64 .. ".png", "DATA") > AVATAR_IMAGE_CACHE_EXPIRES then
		fallback = Material("../data/avatars/" .. steamid64 .. ".png", "smooth")
	elseif os.time() - file.Time("avatars/" .. steamid64 .. ".jpg", "DATA") > AVATAR_IMAGE_CACHE_EXPIRES then
		fallback = Material("../data/avatars/" .. steamid64 .. ".jpg", "smooth")
	end

	-- If a fallback couldn't be found in data/, default to vgui/avatar_default
	if not fallback or fallback:IsError() then
		fallback = Material("vgui/avatar_default")
	else
		-- Otherwise, if a cached avatar was found, and it hasn't expired, return it!
		return callback(fallback)
	end

	-- Fetch the XML version of the player's Steam profile.
	-- This XML contains a tag, <avatarFull> which contains the URL to their full avatar.
	http.Fetch("https://steamcommunity.com/profiles/" .. steamid64 .. "?xml=1",
	
		function(body, size, headers, code)
			-- If the HTTP request fails (size = 0, code is not a HTTP success response code) then return the fallback
			if size == 0 or code < 200 or code > 299 then return callback(fallback, steamid64) end

			local url, fileType = body:match("<avatarFull>.-(https?://%S+%f[%.]%.)(%w+).-</avatarFull>") -- Extract the URL and file extension from <avatarFull>
			if not url or not fileType then return callback(fallback, steamid64) end -- If the URL or file type couldn't be extracted, return the fallback.
			if fileType == "jpeg" then fileType = "jpg" end -- Defensively ensure jpeg -> jpg.

			-- Download the avatar image
			http.Fetch(url .. fileType,
				
				function(body, size, headers, code)
					if size == 0 or code < 200 or code > 299 then return callback(fallback, steamid64) end

					local cachePath = "avatars/" .. steamid64 .. "." .. fileType
					file.CreateDir("avatars")
					file.Write(cachePath, body) -- Write the avatar to data/

					local material = Material("../data/" .. cachePath, "smooth") -- Load the avatar from data/ as a Material
					if material:IsError() then
						-- If the material errors, the image must be corrupt, so we'll delete this from data/ and return the fallback.
						-- 76561198314224586
						file.Delete(cachePath)
						callback(fallback, steamid64)
					else
						-- We succeeded, return the downloaded avatar image material!
						callback(material, steamid64)
					end

				end,

				-- If we hard-fail, return the fallback image.
				function() callback(fallback, steamid64) end

			)
		end,
		
		-- If we hard-fail, return the fallback image.
		function() callback(fallback, steamid64) end
	)
end

-- We don't want to fill the user's hard drive up with avatars over time, so we'll clear them whenever they join the server.
-- This also has the added benefit of allowing the user to "manually" regenerate avatars if they so desire.
local function clearCachedAvatars()
	for _, f in ipairs( ( file.Find("avatars/*", "DATA") ) ) do
		file.Delete("avatars/" .. f)
	end

	hook.Remove("InitPostEntity", "clearCachedAvatars") -- Just to be safe.
end
hook.Add("InitPostEntity", "clearCachedAvatars", clearCachedAvatars)
--addons/ashop/lua/ashop/code/ui/item_shop_effects/sh_pixelrain.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels/cl_entry.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels/cl_main.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels/cl_slider.lua:

local PANEL = {}


AccessorFunc( PANEL, "m_fSlideX", "SlideX" )
AccessorFunc( PANEL, "m_fSlideY", "SlideY" )

AccessorFunc( PANEL, "m_iLockX", "LockX" )
AccessorFunc( PANEL, "m_iLockY", "LockY" )

AccessorFunc( PANEL, "Dragging", "Dragging" )
AccessorFunc( PANEL, "m_bTrappedInside", "TrapInside" )

Derma_Hook( PANEL, "Paint", "Paint", "Slider" )

function PANEL:Init()

	self:SetMouseInputEnabled( true )

	self:SetSlideX( 0.5 )
	self:SetSlideY( 0.5 )

	self.Knob = vgui.Create( "DButton", self )
	self.Knob:SetText( "" )
	self.Knob:SetSize( 4, 15 )
	self.Knob:NoClipping( true )
	self.Knob.Paint = function( panel, w, h )
        draw.RoundedBox(16, 0, 0, w, h, color_white)
    end

	self.Knob.OnCursorMoved = function( panel, x, y )
		local x, y = panel:LocalToScreen( x, y )
		x, y = self:ScreenToLocal( x, y )
		self:OnCursorMoved( x, y )
	end

	self.Knob.OnMousePressed = function( panel, mcode )
		if ( mcode == MOUSE_MIDDLE ) then
			self:SetSlideX( 0.5 )
			self:SetSlideY( 0.5 )
			return
		end

		DButton.OnMousePressed( panel, mcode )
	end

	-- Why is this set by default?
	self:SetLockY( 0.5 )

end

function PANEL:SetSlideX( i )
	self.m_fSlideX = i
	self:OnValuesChangedInternal()
end

--
-- We we currently editing?
--
function PANEL:IsEditing()

	return self.Dragging || self.Knob.Depressed

end

function PANEL:OnCursorMoved( x, y )

	if ( !self.Dragging && !self.Knob.Depressed ) then return end

	local w, h = self:GetSize()
	local iw, ih = self.Knob:GetSize()

	if ( self.m_bTrappedInside ) then

		w = w - iw
		h = h - ih

		x = x - iw * 0.5
		y = y - ih * 0.5

	end

	x = math.Clamp( x, 0, w ) / w
	y = math.Clamp( y, 0, h ) / h

	if ( self.m_iLockX ) then x = self.m_iLockX end
	if ( self.m_iLockY ) then y = self.m_iLockY end

	x, y = self:TranslateValues( x, y )

	self:SetSlideX( x )
	self:SetSlideY( y )

	self:InvalidateLayout()

end

function PANEL:OnMousePressed( mcode )

	if ( !self:IsEnabled() ) then return true end

	-- When starting dragging with not pressing on the knob.
	self.Knob.Hovered = true

	self:SetDragging( true )
	self:MouseCapture( true )

	local x, y = self:CursorPos()
	self:OnCursorMoved( x, y )

end

function PANEL:OnMouseReleased( mcode )

	-- This is a hack. Panel.Hovered is not updated when dragging a panel (Source's dragging, not Lua Drag'n'drop)
	self.Knob.Hovered = vgui.GetHoveredPanel() == self.Knob

	self:SetDragging( false )
	self:MouseCapture( false )

end

function PANEL:PerformLayout()

	local w, h = self:GetSize()
	local iw, ih = self.Knob:GetSize()

	if ( self.m_bTrappedInside ) then

		w = w - iw
		h = h - ih
		self.Knob:SetPos( ( self.m_fSlideX || 0 ) * w, ( self.m_fSlideY || 0 ) * h )

	else

		self.Knob:SetPos( ( self.m_fSlideX || 0 ) * w - iw * 0.5, ( self.m_fSlideY || 0 ) * h - ih * 0.5 )

	end

	if ( self.BGImage ) then
		self.BGImage:StretchToParent( 0, 0, 0, 0 )
		self.BGImage:SetZPos( -10 )
	end

	-- In case m_fSlideX/m_fSlideY changed multiple times a frame, we do this here
	self:ConVarChanged( self.m_fSlideX, self.m_strConVarX )
	self:ConVarChanged( self.m_fSlideY, self.m_strConVarY )

end

function PANEL:Think()

	self:ConVarXNumberThink()
	self:ConVarYNumberThink()

end

function PANEL:SetSlideX( i )
	self.m_fSlideX = i
	self:OnValuesChangedInternal()
end

function PANEL:SetSlideY( i )
	self.m_fSlideY = i
	self:OnValuesChangedInternal()
end

function PANEL:GetDragging()
	return self.Dragging || self.Knob.Depressed
end

function PANEL:OnValueChanged( x, y )

	-- For override

end

function PANEL:OnValuesChangedInternal()

	self:OnValueChanged( self.m_fSlideX, self.m_fSlideY )
	self:InvalidateLayout()

end

function PANEL:TranslateValues( x, y )

	-- Give children the chance to manipulate the values..
	return x, y

end

-- ConVars
function PANEL:SetConVarX( strConVar )
	self.m_strConVarX = strConVar
end
function PANEL:SetConVarY( strConVar )
	self.m_strConVarY = strConVar
end
function PANEL:ConVarChanged( newValue, cvar )

	if ( !cvar || cvar:len() < 2 ) then return end

	GetConVar( cvar ):SetFloat( newValue )

	-- Prevent extra convar loops
	if ( cvar == self.m_strConVarX ) then self.m_strConVarXValue = GetConVarNumber( self.m_strConVarX ) end
	if ( cvar == self.m_strConVarY ) then self.m_strConVarYValue = GetConVarNumber( self.m_strConVarY ) end

end
function PANEL:ConVarXNumberThink()

	if ( !self.m_strConVarX || #self.m_strConVarX < 2 ) then return end

	local numValue = GetConVarNumber( self.m_strConVarX )

	-- In case the convar is a "nan"
	if ( numValue != numValue ) then return end
	if ( self.m_strConVarXValue == numValue ) then return end

	self.m_strConVarXValue = numValue
	self:SetSlideX( self.m_strConVarXValue )

end
function PANEL:ConVarYNumberThink()

	if ( !self.m_strConVarY || #self.m_strConVarY < 2 ) then return end

	local numValue = GetConVarNumber( self.m_strConVarY )

	-- In case the convar is a "nan"
	if ( numValue != numValue ) then return end
	if ( self.m_strConVarYValue == numValue ) then return end

	self.m_strConVarYValue = numValue
	self:SetSlideY( self.m_strConVarYValue )

end

local clr = ashop.GetColor('blurple')
function PANEL:Paint(w, h)
    draw.RoundedBox(2, 0, h/2-2, w, 4, clr)
end

derma.DefineControl( "AShop_DSlider", "", PANEL, "Panel" )

--addons/ashop/lua/ashop/code/ui/panels_actions/cl_currency.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_actions/cl_tradesoffers.lua:
ashop.tradesList = ashop.tradesList or {}

local p, tradingWith, twoAreReady, tradeDelay
local r = ashop.Config.round
local c1R, c1G, c1B = ashop.GetColor('Grad1_0'):Unpack()
local c2R, c2G, c2B = ashop.GetColor('Grad1_1'):Unpack()
local grad = Material('akulla/gradient-d')
local clrBox = ashop.GetColor('Grad1_1')
local greenClr = ashop.GetColor('Good')
local stateOff = ashop.GetColor('StateOff')

local function applyFunctions(part, scroll, layout, boxWidth, boxHeight, rowCount, columnCount, callback)
    local emptyPanels = {}
    local panelByID = {}

    local function clearEmpty(add)
        // Clear
        local childs = layout:ChildCount()
        for k, v in ipairs(emptyPanels) do
            v:Remove()
            childs = childs - 1
        end
        emptyPanels = {}


        // Now, add
        local fillScreen = childs < (rowCount * columnCount)

        local count = (fillScreen and (rowCount * columnCount - childs) or rowCount - (childs % rowCount))

        for i = 1, count do
            local p = vgui.Create('EditablePanel', layout)
            p:SetSize(boxWidth, boxHeight)

            function p:Paint(w, h)
                draw.RoundedBox(r, 0, 0, w, h, clrBox)
            end

            table.insert(emptyPanels, p)
        end

        layout:InvalidateLayout(childs == (rowCount * columnCount + 1))
        scroll:InvalidateLayout(false)
    end

    function part:PanelIDExists(id)
        return panelByID[id]
    end

    function part:AddItem(plyItem, notClear)
        local p = vgui.Create("AShop_ShopItem", layout)
        p:SetSize(boxWidth, boxHeight)

        function p:Paint()
            p:SetItem(plyItem, plyItem.item_id)
        end

        panelByID[plyItem.id] = p

        function p:DoClick()
            callback(plyItem.id)
        end

        if !notClear then
            clearEmpty()
        end
    end

    function part:RemoveItem(item_id)
        if IsValid(panelByID[item_id]) then
            panelByID[item_id]:Remove()
            panelByID[item_id] = nil
        end

        local p = vgui.Create('EditablePanel', layout)
        p:SetSize(boxWidth, boxHeight)
        function p:Paint(w, h) draw.RoundedBox(r, 0, 0, w, h, clrBox) end
        table.insert(emptyPanels, p)
    end

    return clearEmpty
end

net.Receive('ashop_trades', function()
    local uid = net.ReadUInt(3)

    if uid == 0 then
        local e = net.ReadEntity()
        if !IsValid(e) then return end
        table.insert(ashop.tradesList, e)
    elseif uid == 1 then
        if IsValid(p) then
            p:Remove()
            tradingWith = nil
            twoAreReady = nil 
            tradeDelay = nil
        end
        // Open the menu
        local boxHeight = ashop.GetSize(140)
        local boxWidth = ashop.GetSize(120)
        local sideMargin = ashop.GetSize(64)
        local numOfItems = 8
        local pnlsMargin = ashop.GetSize(5)
        local rightPartVerticalMargin = ashop.GetSize(20)
        local numOfItemsBottomH = 2
        local numOfItemsTopH = 3
        local numofItemsH = numOfItemsBottomH + numOfItemsTopH
        local fontHeight = ashop.GetFontHeight('ashop_20_600')
        local lp = LocalPlayer()

        tradingWith = net.ReadEntity()

        p = vgui.Create('EditablePanel')
        p:SetSize(boxWidth * (numOfItems + 1) + pnlsMargin * (numOfItems) + sideMargin*2, boxHeight*numofItemsH + sideMargin*2.75 + pnlsMargin*numofItemsH + fontHeight*4)
        p:MakePopup()
        p:Center()
        p:DockPadding(sideMargin, sideMargin, sideMargin, sideMargin)

        function p:OnRemove()
            net.Start('ashop_trades')
                net.WriteUInt(3, 3)
                net.WriteEntity(tradingWith)
            net.SendToServer()
        end

        function p:Paint(w, h)
            self.boxPoly = self.boxPoly or ashop.ui.RoundedBox(r, 0, 0, w, h)

            ashop.StartStencil()
                draw.NoTexture()
                surface.SetDrawColor(c1R, c1G, c1B)
                surface.DrawPoly(self.boxPoly)
            ashop.ReplaceStencil(1)
                surface.SetDrawColor(c2R, c2G, c2B)
                surface.SetMaterial(grad)
                surface.DrawTexturedRect(0, 0, w, h)
            ashop.EndStencil()
        end

        local topPart = vgui.Create('EditablePanel', p)
        topPart:Dock(TOP)
        topPart:SetTall(boxHeight*numOfItemsTopH + pnlsMargin*numOfItemsTopH + fontHeight*4 + sideMargin*0.25)
        topPart:DockMargin(0, 0, 0, sideMargin/2)

        for i = 1, 2 do
            local part = vgui.Create('EditablePanel', topPart)
            part:Dock(i == 1 and LEFT or RIGHT)
            part:SetWide(boxWidth * numOfItems/2 + 5*(numOfItems/2-1))

            local headerPart = vgui.Create('EditablePanel', part)
            headerPart:Dock(TOP)
            headerPart:SetTall(fontHeight*1.5)
            headerPart:DockMargin(0, 0, 0, fontHeight*0.5)

            local plyName = vgui.Create('DLabel', headerPart)
            plyName:Dock(LEFT)
            plyName:SetText(i == 1 and lp:Nick() or tradingWith:Nick())
            plyName:SetFont("ashop_20_600")
            plyName:SetTextColor(color_white)

            local headerSpaceLeft = part:GetWide() - pnlsMargin
            if i == 2 then
                local close = vgui.Create('DButton', headerPart)
                close:Dock(RIGHT)
                close:SetText(ashop.L('CloseMenu'))
                close:SetFont("ashop_18")
                close:SetTextColor(color_white)
                close:DockMargin(pnlsMargin, 0, 0, 0)
                close:SetWide(close:GetContentSize() + ashop.GetSize(20))

                function close:Paint(w, h)
                    draw.RoundedBox(4, 0, 0, w, h, clrBox)
                end

                function close:DoClick()
                    p:Remove()
                end
            end

            local isReady = vgui.Create('DButton', headerPart)
            isReady:Dock(RIGHT)
            isReady:SetFont("ashop_18")
            isReady:SetText(ashop.L('Ready'))
            isReady:SetTextColor(color_white)
            isReady:SetWide(isReady:GetContentSize() + ashop.GetSize(20))
            isReady:DockMargin(pnlsMargin, 0, 0, 0)

            function isReady:DoClick()
                if i == 2 then return end

                net.Start("ashop_trades")
                    net.WriteUInt(5, 3)
                    net.WriteEntity(tradingWith)
                net.SendToServer()
            end

            function isReady:Paint(w, h)
                draw.RoundedBox(4, 0, 0, w, h, clrBox)
            end

            // Money Part
            local moneyContainer = vgui.Create('EditablePanel', part)
            moneyContainer:Dock(TOP)
            moneyContainer:SetTall(fontHeight*1.5)
            moneyContainer:DockMargin(0, 0, 0, fontHeight*0.5)

            for j=1, 2 do
                local premiumMoneyContainer = vgui.Create('DPanel', moneyContainer)
                premiumMoneyContainer:Dock(j==1 and RIGHT or LEFT)
                premiumMoneyContainer:SetWide(headerSpaceLeft/2)
                premiumMoneyContainer:DockPadding(rightPartVerticalMargin/2, 0, rightPartVerticalMargin/2, 0)

                surface.SetFont('ashop_18')
                local tW = surface.GetTextSize(2^32)

                surface.SetFont('ashop_icon_20')
                tW = tW + surface.GetTextSize("!")

                local premiumMoneyLogo = vgui.Create('DLabel', premiumMoneyContainer)
                premiumMoneyLogo:Dock(LEFT)
                premiumMoneyLogo:SetFont('ashop_icon_20')
                premiumMoneyLogo:SetText(j != 1 and "!" or "\"")
                premiumMoneyLogo:SetTextColor(ashop.GetColor('White25'))
                premiumMoneyLogo:SetWide(premiumMoneyLogo:GetContentSize())

                local premiumMoneyInput = vgui.Create('DTextEntry', premiumMoneyContainer)
                premiumMoneyInput:SetText('0')
                premiumMoneyInput:SetFont('ashop_18')
                premiumMoneyInput:SetTextColor(color_white)
                premiumMoneyInput:SetNumeric(true)
                premiumMoneyInput:DockMargin(rightPartVerticalMargin/2, 0, 0, 0)
                premiumMoneyInput:SetDrawLanguageID(false)
                premiumMoneyInput:SetDrawLanguageIDAtLeft(false)
                premiumMoneyInput:Dock(FILL)
                premiumMoneyInput:SetEditable(i == 1)
                premiumMoneyInput:SetCursorColor(color_white)

                function premiumMoneyContainer:Paint(w, h)
                    draw.RoundedBox(8, 0, 0, w, h, premiumMoneyInput:HasFocus() and stateOff or clrBox)
                end

                function premiumMoneyInput:Paint(w, h)
                    local panel = self

                    -- Hack on a hack, but this produces the most close appearance to what it will actually look if text was actually there
                    if ( panel.GetPlaceholderText && panel.GetPlaceholderColor && panel:GetPlaceholderText() && panel:GetPlaceholderText():Trim() != "" && panel:GetPlaceholderColor() && ( !panel:GetText() || panel:GetText() == "" ) ) then
                        local oldText = panel:GetText()
                        
                        local str = panel:GetPlaceholderText()
                        if ( str:StartWith( "#" ) ) then str = str:sub( 2 ) end
                        str = language.GetPhrase( str )
                        
                        panel:SetText( str )
                        panel:DrawTextEntryText( panel:GetPlaceholderColor(), panel:GetHighlightColor(), panel:GetCursorColor() )
                        panel:SetText( oldText )
                        
                        return
                    end
                    
                    panel:DrawTextEntryText( panel:GetTextColor(), panel:GetHighlightColor(), panel:GetCursorColor() )
                    return false
                end

                function premiumMoneyInput:OnEnter(val)
                    val = isnumber(tonumber(val)) and tonumber(val) or 0

                    net.Start("ashop_trades")
                        net.WriteUInt(6, 3)
                        net.WriteEntity(tradingWith)
                        // Add it to the trade
                        net.WriteUInt(val, 32)
                        net.WriteBool(j == 2)
                    net.SendToServer()
                end

                function premiumMoneyInput:OnLoseFocus(val)
                    self:OnEnter(self:GetText())
                end

                part[(j == 1 and "regular" or "premium") .. "money"] = premiumMoneyInput
            end
            //

            p[(i == 1 and "left" or "right") .. "part"] = part
            part.readyButton = isReady

            local partItem = vgui.Create('DScrollPanel', part)
            partItem:Dock(FILL)
            ashop.ui.SkinScrollPanel(partItem)

            local vbar = partItem:GetVBar()
            vbar:SetWide(0)
            function vbar.btnUp:Paint() end
            function vbar.btnDown:Paint() end
            function vbar:Paint(w, h) end

            function partItem:Paint(w, h)
                if partItem:GetTall() >= partItem.pnlCanvas:GetTall() then return end

                local _, y = vbar.btnGrip:GetPos()
                local h = vbar.btnGrip:GetTall()

                DisableClipping(true)
                draw.RoundedBox(2, w, y, 2, h, stateOff)
                DisableClipping(false)
            end
    
            local partItemLayout = vgui.Create('DIconLayout', partItem)
            partItemLayout:Dock(FILL)
            partItemLayout:SetSpaceX(pnlsMargin)
            partItemLayout:SetSpaceY(pnlsMargin)
            part.layout = partItemLayout

            applyFunctions(part, partItem, partItemLayout, boxWidth, boxHeight, numOfItems/2, numOfItemsTopH, function(plyItem)
                if i == 2 then return end
                net.Start("ashop_trades")
                    net.WriteUInt(4, 3)
                    net.WriteEntity(tradingWith)
                    // Add it to the trade
                    net.WriteBool(false)
                    net.WriteUInt(plyItem, ashop.Config.BitsPlyItemID)
                net.SendToServer()
            end)()
        end

        local middlePart = vgui.Create('DLabel', topPart)
        middlePart:Dock(FILL)
        middlePart:SetFont('ashop_icon_25')
        middlePart:SetText('\'')
        middlePart:SetContentAlignment(5)
        middlePart:SetTextColor(color_white)

        local ourItems = vgui.Create('DScrollPanel', p)
        ourItems:Dock(FILL)
        ashop.ui.SkinScrollPanel(ourItems)
        ourItems:GetVBar():SetWide(4)
        p.middlePart = ourItems

        local ourItemsLayout = vgui.Create('DIconLayout', ourItems)
        ourItemsLayout:Dock(FILL)
        ourItemsLayout:SetSpaceX(pnlsMargin)
        ourItemsLayout:SetSpaceY(pnlsMargin)

        local clearEmpty = applyFunctions(p, ourItems, ourItemsLayout, boxWidth-1, boxHeight, numOfItems+1, numOfItemsBottomH, function(plyItem)
            net.Start("ashop_trades")
                net.WriteUInt(4, 3)
                net.WriteEntity(tradingWith)
                // Add it to the trade
                net.WriteBool(true)
                net.WriteUInt(plyItem, ashop.Config.BitsPlyItemID)
            net.SendToServer()
        end)

        for k, v in pairs(lp.ashop_data.items) do
            p:AddItem(v, true)
        end

        clearEmpty()
    elseif uid == 2 then
        local e = net.ReadEntity()
        table.RemoveByValue(ashop.tradesList, e)

        if tradingWith == e then
            p:Remove()
        end

        p = nil
        tradingWith = nil
        twoAreReady = nil
    elseif uid == 3 then
        local isAdd = net.ReadBool()
        local itemID = net.ReadUInt(ashop.Config.BitsPlyItemID)
        local ourSide = net.ReadBool()

        if !ourSide and !net.ReadBool() then
            tradingWith.ashop_data = tradingWith.ashop_data or {}
            tradingWith.ashop_data.items = tradingWith.ashop_data.items or {}

            local plyItem = ashop.Network.R_PlyItem()

            tradingWith.ashop_data.items[plyItem.id] = plyItem
        end

        local playerPart = p[(ourSide and "left" or "right") .. "part"]
        local plyChanging = (ourSide and LocalPlayer() or tradingWith)

        if isAdd then
            if !playerPart:PanelIDExists(id) then
                p:RemoveItem(itemID)
                playerPart:AddItem(plyChanging.ashop_data.items[itemID])
            end
        else
            playerPart:RemoveItem(itemID)
            p:AddItem(plyChanging.ashop_data.items[itemID])
        end
    elseif uid == 4 then
        if !IsValid(tradingWith) then return end
        local ent = net.ReadEntity()
        local b = net.ReadBool()
        local ourSide = LocalPlayer() == ent
        local playerPart = p[(ourSide and "left" or "right") .. "part"]
        twoAreReady = net.ReadBool()
        tradeDelay = CurTime()

        if ourSide then
            playerPart.premiummoney:SetEditable(!b)
            playerPart.regularmoney:SetEditable(!b)
        end

        if b then
            playerPart.readyButton:SetTextColor(color_black)
            function playerPart.readyButton:Paint(w, h)
                draw.RoundedBox(4, 0, 0, w, h, greenClr)
            end

            local c2alt = Color(c2R -30, c2G-30, c2B-30, 220)

            if ourSide then
                function p.middlePart:PaintOver(w, h)
                    draw.RoundedBox(4, 0, 0, w, h, c2alt)
                    local cur2 = CurTime()

                    for i = -h + ((cur2/2)%1) * h / 2, w + h, h / 2 do
                        draw.NoTexture()
                        surface.SetDrawColor( c1R, c1G, c1B )
                        surface.DrawTexturedRectRotated( i, h / 2, h / 4, h * 2, 40 )
                    end

                    if twoAreReady then
                        draw.SimpleText(math.max(math.ceil(5 - (cur2 - tradeDelay)), 0), "ashop_60_600", w/2, h/2, color_white, 1, 1)
                    else
                        local _, tY = draw.SimpleText("-", "ashop_icon_50", w/2, h/2, color_white, 1, 1)
                        draw.SimpleText(ashop.L('TradeReady'), "ashop_20_600", w/2, h/2 + tY, color_white, 1, 1)
                    end
                end
            end

            if twoAreReady then
                timer.Create('ashop_startTradeTimer', 5, 1, function()
                    if !IsValid(p) then return end

                    //
                    net.Start('ashop_trades')
                        net.WriteUInt(2, 3)
                        net.WriteEntity(tradingWith)

                        for k, v in ipairs({p.leftpart, p.rightpart}) do
                            local t = {}
                            for _, itemPanel in ipairs(v.layout:GetChildren()) do
                                if !itemPanel.plyItem then break end
                                table.insert(t, itemPanel.plyItem.id)
                            end

                            net.WriteUInt(#t, 7)

                            for k, v in ipairs(t) do
                                net.WriteUInt(v, ashop.Config.BitsPlyItemID)
                            end

                            net.WriteUInt(tonumber(v.premiummoney:GetText()) or 0, 32)
                            net.WriteUInt(tonumber(v.regularmoney:GetText()) or 0, 32)
                        end
                    net.SendToServer()
                end)
            else
                timer.Remove('ashop_startTradeTimer')
            end
        else
            playerPart.readyButton:SetTextColor(color_white)

            function playerPart.readyButton:Paint(w, h)
                draw.RoundedBox(4, 0, 0, w, h, clrBox)
            end

            if ourSide then
                function p.middlePart:PaintOver() end
            end
            timer.Remove('ashop_startTradeTimer')
        end
    elseif uid == 5 then
        local ent = net.ReadEntity()
        local ourSide = LocalPlayer() == ent
        local playerPart = p[(ourSide and "left" or "right") .. "part"]

        local amt = net.ReadUInt(32)
        local premium = net.ReadBool()

        playerPart[(premium and "premium" or "regular") .. "money"]:SetText(amt)
    end
end)

gameevent.Listen( "player_disconnect" )
hook.Add( "player_disconnect", "ashop_removependingtrades", function( data )
	local ply = Player(data.userid)

    if IsValid(ply) then
        table.RemoveByValue(ashop.tradesList, ply)
    end

    if (IsValid(ply) and ply == tradingWith) or (tradingWith and !IsValid(tradingWith)) then
        p:Remove()
    end
end )

local function drawInterior(editor, tradingPly, _, parent)
    ashop.menu:Remove()

    net.Start('ashop_trades')
        net.WriteUInt(1, 3)
        net.WriteEntity(tradingPly)
        net.WriteBool(true)
    net.SendToServer()
end

ashop.registerUserParameter(ashop.L('TradeOffers'), drawInterior, function()
    local o = {}

    for k, v in ipairs(ashop.tradesList) do
        if !IsValid(v) then
            table.remove(ashop.tradesList, v)
            continue
        end

        local name = v:Nick()
        table.insert(o, {name, v, v})
    end

    return o
end, interior)
--addons/ashop/lua/ashop/code/ui/panels_actions/cl_useredit.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_actions/cl_useredit.lua:
local function drawInterior(editor, key, value, parent)
    local marginVertical = ashop.GetSize(20)
    local tH = draw.GetFontHeight('ashop_16')
    local stateOn = ashop.GetColor('stateOn')
    local clrSeparator = ashop.GetColor('Separator')
    local sep = ashop.GetColor('Separator', 125)
    local round = ashop.Config.round

    local txtEntryContainer = vgui.Create('DPanel', editor)
    txtEntryContainer:Dock(TOP)
    txtEntryContainer:SetTall(tH * 2)
    txtEntryContainer:DockPadding(tH*0.25, tH*0.25, tH*0.25, tH*0.25)

    function txtEntryContainer:Paint(w, h)  end

    local search = vgui.Create('DButton', txtEntryContainer)
    search:Dock(RIGHT)
    search:SetText(ashop.L('Search'))
    search:SetFont('ashop_16')
    search:SetWide(search:GetContentSize() + marginVertical)
    search:SetTextColor(ashop.GetColor('White'))
    search:DockMargin(tH*0.25, 0, 0, 0)

    function search:Paint(w, h)
        draw.RoundedBox(round/2, 0, h/4, w, h/4*2, self:IsHovered() and stateOn or clrSeparator)
    end

    local idContainer = vgui.Create('AShop_Entry', txtEntryContainer)
    idContainer:Dock(TOP)
    idContainer:SetTall(0)
    idContainer:IsRequired(true)

    function idContainer:Paint() end

    idContainer:SetInput('SteamID64', TYPE_STRING, '76561198261775705', {
        hideSave = true,
        required = true
    })

    txtEntryContainer:SizeToChildren(false, true)

    local p = vgui.Create('EditablePanel', editor)
    p:Dock(TOP)
    p:SetTall(1)

    local m = ashop.GetSize(16)

    function p:Paint(w, h)
        surface.SetDrawColor(sep)
        surface.DrawLine(m/2, 0, w - m/2, 0)
    end

    function search:DoClick()
        local value = idContainer:GetValue()

        if !isnumber(tonumber(value)) then return end

        net.Start('ashop_Admin_ReceiveInventory')
            net.WriteString(value)
        net.SendToServer()
    end

    local invDisplayer = vgui.Create('EditablePanel', editor)
    invDisplayer:Dock(FILL)
    invDisplayer:DockMargin(m/2 + tH*0.25, 0, m/2, 0)

    local marginVertical = ashop.GetSize(20)
    local itemWidth = math.floor(((editor:GetWide() - m/2 - tH*0.25 - m/2) - marginVertical*6) / 7) - 5

    hook.Add('ashop_receivedPlayerInventory', 'getPlayerInventoryUI', function(s64, inv, premiumMoney, classicMoney)
        invDisplayer:Clear()

        local topBar = vgui.Create('EditablePanel', invDisplayer)
        topBar:SetTall(ashop.GetSize(80))
        topBar:Dock(TOP)
        topBar:DockMargin(0, m/4, 0, 0)

        local name = vgui.Create('DLabel', topBar)
        name:Dock(LEFT)
        name:SetFont('ashop_16')
        name:SetTextColor(ashop.GetColor('White'))
        
        local ply = player.GetBySteamID64(s64)
        if IsValid(ply) then
            name:SetText(ashop.L('Name', ply:Nick()))
        else
            name:SetText("SteamID: " .. ply:SteamID64())
        end
        name:SetWide(name:GetContentSize())

        local rightPartVerticalMargin = ashop.GetSize(20)
        local moneyTextHorizontalMargin = ashop.GetSize(12)
        local moneyTextInnerHorizontalMargin = ashop.GetSize(10)
    
        local roundValue = ashop.Config.round

        // Left
        local panels = {}
        for k, v in ipairs({
            {
                ashop.GetColor('pink'),
                ashop.GetColor('premiumMoneyLogo'),
                premiumMoney,
                "!",
            },
    
            {
                ashop.GetColor('normalMoneyBg'),
                ashop.GetColor('normalMoney'),
                classicMoney,
                "\"",
            }
        }) do
            surface.SetFont('ashop_16')
            local tW, tH = surface.GetTextSize(v[3])
            local font = 'ashop_icon_20'
    
            surface.SetFont(font)
            local iW, iH = surface.GetTextSize(v[4])
    
            local m = vgui.Create("DButton", topBar)
            m:Dock(RIGHT)
            m:SetText('')
            m:DockMargin(rightPartVerticalMargin, rightPartVerticalMargin, 0, rightPartVerticalMargin)
            m:DockPadding(moneyTextHorizontalMargin, 0, moneyTextHorizontalMargin, 0)
            m:SetWide(tW + iW + moneyTextHorizontalMargin*2 + moneyTextInnerHorizontalMargin)
    
            function m:Paint(w, h)
                draw.RoundedBox(roundValue, 0, 0, w, h, v[1])
            end
    
            local logo = vgui.Create("DLabel", m)
            logo:Dock(LEFT)
            logo:SetFont(font)
            logo:SetText(v[4])
            logo:SetTextColor(v[2])
            logo:SetWide(iW)
    
            local text = vgui.Create("DLabel", m)
            text:Dock(FILL)
            text:SetFont('ashop_16')
            text:SetText(v[3])
            text:SetTextColor(ashop.GetColor('White'))
            text:SetContentAlignment(6)

            table.insert(panels, {m, text})

            function m:ResizeWidth()
                self:SetWide(logo:GetWide() + text:GetContentSize() + moneyTextHorizontalMargin*2 + moneyTextInnerHorizontalMargin)
            end

            function m:DoClick()
                local a = vgui.Create('AShop_Form', ashop.menu)
                a:SetTitle(ashop.L('SetPlayerMoney'))
                a:CreateEntry(true, ashop.L('MoneyToSet'), "UInt32", {
                    required = true,
                }, tonumber(text:GetText()))
                a:Center()

                function a:OnSend(m)
                    net.Start('ashop_Admin_ReceiveInventoryMoney')
                        net.WriteString(s64)
                        net.WriteUInt(m, 32)
                        net.WriteBool(k == 1)
                    net.SendToServer()
                end
            end
        end

        // Add a new item
        surface.SetFont('ashop_16')
        local tW, tH = surface.GetTextSize(ashop.L('Add'))
        local font = 'ashop_icon_20'

        surface.SetFont(font)
        local iW, iH = surface.GetTextSize('+')

        local bAdd = vgui.Create("DButton", topBar)
        bAdd:Dock(RIGHT)
        bAdd:SetText('')
        bAdd:DockMargin(rightPartVerticalMargin, rightPartVerticalMargin, 0, rightPartVerticalMargin)
        bAdd:DockPadding(moneyTextHorizontalMargin, 0, moneyTextHorizontalMargin, 0)
        bAdd:SetWide(tW + iW + moneyTextHorizontalMargin*2 + moneyTextInnerHorizontalMargin)
    
        local grad2_0 = ashop.GetColor('Grad2_0')
        function bAdd:Paint(w, h)
            draw.RoundedBox(roundValue, 0, 0, w, h, grad2_0)
        end

        function bAdd:DoClick()
            local l = {}

            for k, v in pairs(ashop.items) do
                table.insert(l, {v.name, k})
            end

            local a = vgui.Create('AShop_Form', ashop.menu)
            a:SetTitle(ashop.L('GiveItemToPlayer'))
            a:CreateEntry(true, ashop.L('ItemToGive'), "SELECT", {
                required = true,
                selects = l
            })
            a:Center()

            function a:OnSend(m)
                net.Start('ashop_Admin_ReceiveInventoryItemData')
                    net.WriteString(s64)
                    net.WriteUInt(m, ashop.Config.BitsPlyItemID)
                    net.WriteUInt(2, 3)
                net.SendToServer()
            end
        end
    
        local logo = vgui.Create("DLabel", bAdd)
        logo:Dock(LEFT)
        logo:SetFont(font)
        logo:SetText('+')
        logo:SetTextColor(color_white)
        logo:SetWide(iW)
    
        local text = vgui.Create("DLabel", bAdd)
        text:Dock(FILL)
        text:SetFont('ashop_16')
        text:SetText(ashop.L('Add'))
        text:SetTextColor(color_white)
        text:SetContentAlignment(6)

        // 

        local scroll = vgui.Create('DScrollPanel', invDisplayer)
        scroll:Dock(FILL)
        scroll:InvalidateLayout(true)
        scroll:DockMargin(0, m, 0, 0)

        ashop.ui.SkinScrollPanel(scroll)

        local iconLayout = vgui.Create('DIconLayout', scroll)
        iconLayout:Dock(FILL)
        iconLayout:SetSpaceY(marginVertical)
        iconLayout:SetSpaceX(marginVertical)

        local tPanels = {}
        local function spawnItem(item_id)
            local v = inv[item_id]
            local p = vgui.Create("AShop_ShopItem", iconLayout)
            p:SetSize(itemWidth, ashop.GetSize(189))
            p.item_id = item_id
            
            function p:Paint()
                p:SetItem(v, ashop.items[v.item_id], true)
            end

            function p:DoRightClick()
                CloseDermaMenus()
                local menu = vgui.Create( "AShop_DMenu", p )
    
                menu:AddOption( ashop.L('Duplicate'), function()
                    net.Start('ashop_Admin_ReceiveInventoryItemData')
                        net.WriteString(s64)
                        net.WriteUInt(item_id, ashop.Config.BitsPlyItemID)
                        net.WriteUInt(0, 3)
                    net.SendToServer()
                end)

                menu:AddOption( ashop.L('Remove'), function()
                    net.Start('ashop_Admin_ReceiveInventoryItemData')
                        net.WriteString(s64)
                        net.WriteUInt(item_id, ashop.Config.BitsPlyItemID)
                        net.WriteUInt(1, 3)
                    net.SendToServer()
                end)
    
                menu:Open()
            end

            tPanels[item_id] = p
        end

        for k, v in pairs(inv or {}) do
            spawnItem(k)
        end

        hook.Add("ashop_receivedPlayerInventoryItemData", "refreshUI", function(id, itemID, d)
            if id == 0 then
                inv[d] = inv[itemID]
                spawnItem(d)
            elseif id == 1 then
                if IsValid(tPanels[itemID]) then
                    tPanels[itemID]:Remove()
                    tPanels[itemID] = nil
                end
            elseif id == 2 then
                inv[d] = {
                    metadata = {},
                    item_id = itemID,
                    id = d
                }
                spawnItem(d)
            end

            iconLayout:InvalidateLayout(true)
            scroll:InvalidateLayout(true)
        end)

        hook.Add('ashop_receivedPlayerInventoryMoney', 'refreshUI', function(amt, b)
            if t and IsValid(t[2]) then return end
            local t = panels[b and 1 or 2]
            t[2]:SetText(amt)
            t[1]:ResizeWidth()
        end)
    end)
end

ashop.registerUserParameter(ashop.L('PlayerInventory'), drawInterior)
--addons/ashop/lua/ashop/code/ui/panels_settings/cl_currencies.lua:
local function DrawInterior(editor, key, value, parent)
    local selects = {}

    for k, v in pairs(ashop.currencies.list) do
        table.insert(selects, {k, k})
    end

    local scroll = vgui.Create("DScrollPanel", editor)
    scroll:Dock(FILL)

    local currencyType = vgui.Create('AShop_Entry', scroll)
    currencyType:Dock(TOP)
    currencyType:SetTall(0)
    currencyType:IsRequired(true)
    currencyType:SetInput(ashop.L('CurrencyType'), 'SELECT', value.currencyName, {selects = selects, required = true})
    currencyType.boxcolor = ashop.GetColor('Grad2_0')
    currencyType:AddSeparator()

    local toCoins = vgui.Create('AShop_Entry', scroll)
    toCoins:Dock(TOP)
    toCoins:SetTall(0)
    toCoins:IsRequired(true)
    toCoins:SetInput(ashop.L('OrderCurrencyCoins'), TYPE_BOOL, value.toCoins, {
        required = true
    })
    toCoins.boxcolor = ashop.GetColor('Grad2_0')
    toCoins:AddSeparator()

    local rate = vgui.Create('AShop_Entry', scroll)
    rate:Dock(TOP)
    rate:SetTall(0)
    rate:IsRequired(true)
    rate:SetInput(ashop.L('RatioCurrency'), "FLOAT", value.convertRate, {
        required = true
    })
    rate.boxcolor = ashop.GetColor('Grad2_0')
    rate:AddSeparator()

    local isPremium = vgui.Create('AShop_Entry', scroll)
    isPremium:Dock(TOP)
    isPremium:SetTall(0)
    isPremium:IsRequired(true)
    isPremium:SetInput(ashop.L('IsPremiumCoins'), TYPE_BOOL, value.toPremium, {
        required = true
    })
    isPremium.boxcolor = ashop.GetColor('Grad2_0')
    isPremium:AddSeparator()

    for k, v in ipairs({currencyType, toCoins, rate, isPremium}) do
        function v:OnSave(value)
            net.Start('ashop_Currency_Edit')
                net.WriteUInt(k-1, 3)
                net.WriteUInt(key, 10)

                if k == 3 then
                    // Not my fault
                    // For some reasons, gmod have issues with sending floats
                    net.WriteString(value)
                    //net.WriteFloat(value)
                elseif k == 1 then
                    net.WriteString(value)
                else
                    net.WriteBool(value)
                end
            net.SendToServer()
        end
    end
end

ashop.registerParameter(ashop.L('Currencies'), DrawInterior, function()
    local o = {}

    for k, v in pairs(ashop.currencies.trades) do
        // Changer le nom
        local name
        local currencyName = v.currencyName

        if v.toCoins then
            name = currencyName .. " > " .. "Coins"
        else
            name = "Coins" .. " > " .. currencyName
        end

        table.insert(o, {name, k, v})
    end

    return o
end, function()
    local selects = {}

    for k, v in pairs(ashop.currencies.list) do
        table.insert(selects, {k, k})
    end
    
    // Changer le nom
    local a = vgui.Create('AShop_Form', ashop.menu)
    a:SetTitle(ashop.L('CreateNewCurrencyType'))
    a:CreateEntry(true, ashop.L('CurrencyType'), 'SELECT', {selects = selects})
    a:CreateEntry(true, ashop.L('OrderCurrencyCoins'), TYPE_BOOL)
    a:CreateEntry(true, ashop.L('RatioCurrency'), "FLOAT")
    a:CreateEntry(true, ashop.L('IsPremiumCoins'), TYPE_BOOL)

    function a:OnSend(currencyName, toCoins, rate, premium_coins)
        net.Start('ashop_Currency_New')
            net.WriteString(currencyName)
            net.WriteBool(toCoins)
            //net.WriteFloat(rate or 1)
            net.WriteString(rate or 1)
            net.WriteBool(premium_coins)
        net.SendToServer()
    end
    a:Center()
end, function(but, settingButton, objectTarget)
    function but:DoRightClick()
        CloseDermaMenus()
        local menu = vgui.Create( "AShop_DMenu", but )
        menu:AddOption(ashop.L('Remove'), function()
            ashop.ui.popAskbox(ashop.L('SureToDeleteTrade'), "", function()
                net.Start('ashop_Currency_Delete')
                    net.WriteUInt(objectTarget.id, 8)
                net.SendToServer()
            end)
        end)

        menu:Open()
    end
end)
--addons/ashop/lua/ashop/code/ui/panels_settings/cl_pac3edit.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/cl_ranks.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_codcards.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_codcards.lua:
ashop.RegisterPremade("COD Cards", {
    objectTypes = {
        {
            "KillCards",
        }
    },

    items = {
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_167.webm?10697530', Color(214, 198, 177)},
            name='Afrodisiac',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t91019.png?10697530', Color(215, 96, 35)},
            name='Action packed',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t91012.png?10697530', Color(75, 69, 51)},
            name='Action packed 2',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_003.png?10697530', Color(181, 156, 113)},
            name='Adam Bomb',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_653.png?10697530', Color(113, 81, 140)},
            name='Adventures in Space',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9625.png?10697530', Color(14, 42, 35)},
            name='Aggression',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_606.png?10697530', Color(137, 62, 50)},
            name='Aggro Ape',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_035.png?10697530', Color(126, 129, 141)},
            name='Akimbo',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91094.webm?10697530', Color(62, 42, 37)},
            name='Akimbo Herb',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9298.png?10697530', Color(201, 121, 49)},
            name='Akuma',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1500.webm?10697530', Color(187, 122, 65)},
            name='Alas Poor Yorick',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_891.webm?10697530', Color(18, 25, 42)},
            name='All Choked Up',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_425.webm?10697530', Color(4, 5, 4)},
            name='Always A Party',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t9879.webm?10697530', Color(145, 134, 126)},
            name='Angel Grace',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91069.webm?10697530', Color(128, 116, 95)},
            name='Animated Passengers',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_1413.png?10697530', Color(102, 99, 98)},
            name='Anime Enthusiast',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1431.webm?10697530', Color(51, 40, 42)},
            name='Apis Awakens',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9599_v1.png?10697530', Color(23, 20, 32)},
            name='Antihero',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1416.webm?10697530', Color(42, 47, 69)},
            name='Alternating Current',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9581_v1.png?10697530', Color(70, 189, 50)},
            name='Armed to the Teeth',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9639.png?10697530', Color(32, 58, 64)},
            name='Armor Breaker',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1430.webm?10697530', Color(50, 42, 38)},
            name='Ancient Curse',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9770.png?10697530', Color(72, 40, 28)},
            name='Anti-Vehicle',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1247.webm?10697530', Color(166, 5, 52)},
            name='Ascension',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91467.webm?10697530', Color(36, 35, 43)},
            name='Artificial Self',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_068.png?10697530', Color(184, 131, 36)},
            name='Armored Corp',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t91516.png?10697530', Color(5, 4, 4)},
            name='Assassination',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_815.webm?10697530', Color(115, 131, 130)},
            name='Aurora',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_862.webm?10697530', Color(126, 124, 118)},
            name='Automated Sentries',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9599.png?10697530', Color(10, 13, 13)},
            name='Awkward Chat',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9624.png?10697530', Color(26, 32, 47)},
            name='BAMF',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t9371.webm?10697530', Color(23, 40, 77)},
            name='BRB',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9622.png?10697530', Color(131, 122, 104)},
            name='Back at you',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_808.webm?10697530', Color(43, 44, 38)},
            name='Back to back',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_077.png?10697530', Color(146, 101, 141)},
            name='Bandita',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9623.png?10697530', Color(38, 31, 22)},
            name='Bang for the buck',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t91491.png?10697530', Color(148, 117, 97)},
            name='Battle under moon',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91027.webm?10697530', Color(64, 44, 29)},
            name='Bear hug',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t91488.png?10697530', Color(154, 64, 129)},
            name='Bienvenido',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1074.webm?10697530', Color(163, 95, 78)},
            name='Big Iron',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9583.png?10697530', Color(176, 96, 86)},
            name='Blaster',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9899.png?10697530', Color(156, 125, 31)},
            name='Blast Zone',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_094.png?10697530', Color(224, 176, 164)},
            name='Blessed Excrement',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_953.webm?10697530', Color(146, 124, 88)},
            name='Bleed',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_157.webm?10697530', Color(52, 51, 46)},
            name='Blood Donor',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91321.webm?10697530', Color(126, 125, 123)},
            name='Bloodshot',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9168.png?10697530', Color(217, 197, 62)},
            name='Bombs Away',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_504.png?10697530', Color(51, 60, 50)},
            name='Bone Appetite',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_498.png?10697530', Color(42, 55, 80)},
            name='Bone Brawl',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_508.png?10697530', Color(109, 41, 35)},
            name='Bone-Headed',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t91048.png?10697530', Color(22, 34, 40)},
            name='Bloody Burial',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_004.png?10697530', Color(82, 160, 191)},
            name='Bouquet O\' Bullets',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_807.webm?10697530', Color(49, 49, 47)},
            name='Breach',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_229.png?10697530', Color(141, 112, 110)},
            name='Breach Babe',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1008.webm?10697530', Color(165, 118, 61)},
            name='Bring out your dead',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1077.webm?10697530', Color(141, 127, 69)},
            name='Broadside',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t9928.webm?10697530', Color(51, 32, 18)},
            name='Broken Carousel',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1415.webm?10697530', Color(134, 123, 124)},
            name='Brutality',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9703.png?10697530', Color(48, 15, 31)},
            name='Burn Pit',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_203.webm?10697530', Color(122, 123, 133)},
            name='CYA',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1494.webm?10697530', Color(163, 96, 64)},
            name='Cadaverous',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_949.webm?10697530', Color(93, 73, 56)},
            name='Lucky Shot',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1199.webm?10697530', Color(124, 121, 109)},
            name='Capsule View',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_1208.png?10697530', Color(58, 39, 40)},
            name='Catch your death',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_185.png?10697530', Color(11, 51, 24)},
            name='Caught in a Web',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_193.png?10697530', Color(62, 47, 114)},
            name='Caw-Caw',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t9692.webm?10697530', Color(181, 5, 5)},
            name='Chain Snapper',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1506.webm?10697530', Color(145, 115, 94)},
            name='Chow Time',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_242.webm?10697530', Color(121, 68, 61)},
            name='Chummed Waters',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9302.png?10697530', Color(53, 28, 49)},
            name='Clear Message',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1419.webm?10697530', Color(139, 122, 86)},
            name='Clean Kills',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_845.png?10697530', Color(141, 82, 40)},
            name='City Limits',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1230.webm?10697530', Color(51, 46, 43)},
            name='Cogs of War',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t91479.png?10697530', Color(61, 78, 126)},
            name='Cold Treats',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_207.png?10697530', Color(64, 63, 79)},
            name='Cold-Blooded Killer',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91632.webm?10697530', Color(35, 42, 31)},
            name='Combat Mastermind',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9583_v1.png?10697530', Color(58, 119, 195)},
            name='Coldfront',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t9871.webm?10697530', Color(218, 99, 8)},
            name='Containment Protocol',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9599_v2.png?10697530', Color(13, 12, 20)},
            name='Cover your tracks',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9685.png?10697530', Color(175, 121, 63)},
            name='Creep Forward',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9709.png?10697530', Color(50, 30, 35)},
            name='Crosswalk Chaos',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1498.webm?10697530', Color(47, 11, 9)},
            name='Crow Keeper',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t9727.webm?10697530', Color(39, 44, 46)},
            name='Cry Wolf',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t91504.png?10697530', Color(56, 64, 107)},
            name='Cthulhu',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91359.webm?10697530', Color(57, 22, 67)},
            name='Cyber Space',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1553.webm?10697530', Color(135, 138, 132)},
            name='Cute toot',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91004.webm?10697530', Color(31, 28, 28)},
            name='Cultural Export',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_083.webm?10697530', Color(59, 68, 64)},
            name='Danger Zone',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91426.webm?10697530', Color(98, 57, 64)},
            name='Dangerous Byte',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1212.webm?10697530', Color(57, 57, 53)},
            name='Dark Humor',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1082.webm?10697530', Color(24, 9, 29)},
            name='Davy Jones Locker',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91035.webm?10697530', Color(136, 73, 28)},
            name='Death Blossom',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1559.webm?10697530', Color(49, 42, 29)},
            name='Death Comes Swiftly',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t9884.webm?10697530', Color(57, 9, 8)},
            name='Demon\'s Lust',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_854.webm?10697530', Color(126, 110, 87)},
            name='Desert Wraith',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_853.webm?10697530', Color(124, 123, 119)},
            name='Dirty Deeds',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_236.png?10697530', Color(160, 83, 41)},
            name='Don\'t Look Back',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9656_v1.png?10697530', Color(203, 99, 58)},
            name='Don\'t Call Me Chicken',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1295.webm?10697530', Color(62, 26, 25)},
            name='Down To the wire',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_996.webm?10697530', Color(62, 51, 41)},
            name='Down the Hatch',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9715.png?10697530', Color(48, 20, 16)},
            name='Dynasty Killer',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1054.webm?10697530', Color(66, 78, 70)},
            name='Early To Rise',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_812.webm?10697530', Color(58, 46, 40)},
            name='Embers',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1552.webm?10697530', Color(118, 121, 120)},
            name='End and Rebirth',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_989.webm?10697530', Color(182, 102, 100)},
            name='Fatal Attraction',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_222.png?10697530', Color(133, 118, 113)},
            name='Faded Memories',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t9850.webm?10697530', Color(27, 29, 17)},
            name='Field Researcher Master',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_1207.png?10697530', Color(36, 31, 31)},
            name='Fields of the Fallen',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1515.webm?10697530', Color(148, 132, 117)},
            name='Fiesta',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1158.webm?10697530', Color(129, 125, 150)},
            name='Festival Fun',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_890.webm?10697530', Color(55, 52, 59)},
            name='Final Thoughts',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9694.png?10697530', Color(39, 35, 21)},
            name='Final Prayers',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91388.webm?10697530', Color(156, 116, 91)},
            name='Furry Friends',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_665.png?10697530', Color(156, 145, 140)},
            name='Fun in the Sun',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1231.webm?10697530', Color(61, 53, 46)},
            name='Forever Loyal',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_855.webm?10697530', Color(133, 127, 109)},
            name='Ghost Wind',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9584.png?10697530', Color(55, 43, 27)},
            name='From the Shadows',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91561_pc.webm?10697530', Color(64, 51, 49)},
            name='Get Lost',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_059.webm?10697530', Color(69, 66, 65)},
            name='Gassed Out',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1495.webm?10697530', Color(146, 115, 72)},
            name='Hades',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_234.png?10697530', Color(62, 64, 52)},
            name='Hack This!',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t9734.webm?10697530', Color(173, 133, 117)},
            name='Haunted Vision',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_216.webm?10697530', Color(134, 105, 151)},
            name='Hand Cannon',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t9601_v2.webm?10697530', Color(36, 16, 28)},
            name='Highly Proficient Master',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_172.webm?10697530', Color(185, 110, 108)},
            name='Hot Lead',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t9868.webm?10697530', Color(161, 118, 143)},
            name='Hopping Away',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_154.webm?10697530', Color(70, 43, 54)},
            name='Insatiable',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_012.png?10697530', Color(175, 88, 162)},
            name='Instant Organ Donor',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_852.webm?10697530', Color(160, 153, 129)},
            name='Ink Spiller',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9581_v8.png?10697530', Color(62, 24, 51)},
            name='Invincible',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_211.webm?10697530', Color(95, 92, 134)},
            name='It\'s Just Business',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_019.webm?10697530', Color(187, 63, 172)},
            name='Joint Ops',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_073.png?10697530', Color(97, 134, 165)},
            name='Juiced Up',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9297.png?10697530', Color(205, 120, 142)},
            name='Jump Start',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91005.webm?10697530', Color(34, 38, 39)},
            name='Jungle Combat',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1160.webm?10697530', Color(69, 124, 165)},
            name='Just Purrfect',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9654.png?10697530', Color(63, 100, 166)},
            name='King of Silverback',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1121.webm?10697530', Color(141, 33, 17)},
            name='Lady of the Lake',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1421.webm?10697530', Color(131, 123, 117)},
            name='Lady in the Moon',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_017.png?10697530', Color(67, 56, 60)},
            name='Mary Jane',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_247.webm?10697530', Color(40, 40, 40)},
            name='Mighty Mushroom',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_156.webm?10697530', Color(66, 49, 61)},
            name='Mondays',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1205.webm?10697530', Color(58, 22, 36)},
            name='Night Light',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9582_v5.png?10697530', Color(36, 27, 38)},
            name='No Stone Unturned',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9622_v9.png?10697530', Color(197, 70, 29)},
            name='Nuked Out',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_769.webm?10697530', Color(28, 26, 27)},
            name='Nocturnal Predator',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_091.webm?10697530', Color(129, 129, 91)},
            name='Neutral Party',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_889.webm?10697530', Color(180, 106, 32)},
            name='Ome Smug Jugg',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91534.webm?10697530', Color(82, 106, 88)},
            name='One Handed',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91096.webm?10697530', Color(73, 36, 46)},
            name='Orchestrator',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1455.webm?10697530', Color(32, 22, 20)},
            name='Outside the Circle',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_082.webm?10697530', Color(136, 96, 64)},
            name='Parting Gift',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1497.webm?10697530', Color(79, 32, 40)},
            name='Pumpkin Peril',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_098.png?10697530', Color(44, 67, 64)},
            name='Politely Disagree',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9341.png?10697530', Color(136, 74, 36)},
            name='Pizza Boys',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_249.webm?10697530', Color(42, 34, 37)},
            name='Rainin Lead',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t9925.webm?10697530', Color(69, 30, 78)},
            name='Rainbow Renegade',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_039.webm?10697530', Color(29, 24, 16)},
            name='Rattle Mags',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1048.webm?10697530', Color(66, 59, 44)},
            name='Ready to Strike',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9628_v5.png?10697530', Color(156, 116, 81)},
            name='Resistance',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9978.png?10697530', Color(40, 58, 36)},
            name='Reduce Reuse Recycle',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_015.webm?10697530', Color(181, 110, 225)},
            name='Rinse and Repeat',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9584_v4.png?10697530', Color(120, 83, 65)},
            name='Ringmaster',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91009.webm?10697530', Color(47, 26, 14)},
            name='Road Rage',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_062.png?10697530', Color(146, 126, 77)},
            name='Rolling Horizon',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_155.webm?10697530', Color(119, 48, 45)},
            name='Repugnance',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_851.webm?10697530', Color(124, 123, 119)},
            name='Ruthless',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1507.webm?10697530', Color(128, 119, 110)},
            name='SAW',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_087.png?10697530', Color(74, 67, 71)},
            name='Salutations',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1510.webm?10697530', Color(67, 59, 62)},
            name='Scary Speed',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9580_v4.png?10697530', Color(52, 31, 52)},
            name='Scavenger',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1459.webm?10697530', Color(34, 25, 18)},
            name='Shadow Corps',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91021.webm?10697530', Color(48, 97, 109)},
            name='Serenity Blossom',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_031.png?10697530', Color(126, 124, 104)},
            name='Seeing Red',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_164.png?10697530', Color(31, 94, 74)},
            name='Seeing Double',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_189.png?10697530', Color(42, 57, 114)},
            name='Shark Bait',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_069.png?10697530', Color(138, 123, 99)},
            name='Shadow of Death',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_168.png?10697530', Color(165, 90, 120)},
            name='Skirting Death',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_987.webm?10697530', Color(89, 91, 118)},
            name='Silent Night',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_178.png?10697530', Color(45, 42, 42)},
            name='Skulls in Arms',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t91565.png?10697530', Color(50, 54, 55)},
            name='Snack Time',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91429.webm?10697530', Color(227, 33, 10)},
            name='Smolder',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91350.webm?10697530', Color(48, 49, 55)},
            name='Smoke Signals',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_208.png?10697530', Color(71, 71, 72)},
            name='Sleeved Assassin',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91418.webm?10697530', Color(150, 110, 115)},
            name='Song Birds',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91387.webm?10697530', Color(24, 74, 135)},
            name='Space Cadet',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1201.webm?10697530', Color(155, 109, 88)},
            name='Space Dive',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1604.webm?10697530', Color(58, 82, 187)},
            name='Space Hog',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91620.webm?10697530', Color(205, 56, 17)},
            name='Spicy Harvest',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_020.webm?10697530', Color(164, 76, 86)},
            name='Spliffhanger',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91564.webm?10697530', Color(29, 25, 29)},
            name='Stabbing Motion',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1496.webm?10697530', Color(68, 48, 42)},
            name='Spooky Scene',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1200.webm?10697530', Color(114, 77, 93)},
            name='Stargazer',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9963.png?10697530', Color(41, 53, 91)},
            name='Swivel',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_052.png?10697530', Color(96, 130, 143)},
            name='Testing the Waters',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91355.webm?10697530', Color(48, 67, 77)},
            name='The Masses',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1460.webm?10697530', Color(39, 41, 26)},
            name='The Unseen',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1521.webm?10697530', Color(101, 78, 124)},
            name='The Warlock',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_074.png?10697530', Color(165, 141, 68)},
            name='Trick Shot',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91319.webm?10697530', Color(43, 38, 57)},
            name='Toxic Amusement',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91354.webm?10697530', Color(53, 52, 63)},
            name='Toxic Kiss',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_223.png?10697530', Color(67, 55, 74)},
            name='Time to Play',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_228.png?10697530', Color(173, 91, 98)},
            name='Wanna Dance',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_239.webm?10697530', Color(123, 125, 128)},
            name='Victory of Iron Trials',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_237.webm?10697530', Color(117, 102, 91)},
            name='Venerable Brat',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9705.png?10697530', Color(33, 25, 11)},
            name='War Party',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_1120.webm?10697530', Color(124, 124, 105)},
            name='Wave of mutilation',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/videos/ui_playercard_t91010.webm?10697530', Color(122, 123, 128)},
            name='Zombie Bride',
            rendering=1,
        },
        {
            metadata={'https://titles.trackercdn.com/modern-warfare/db/images/ui_playercard_t9600_v6.png?10697530', Color(49, 37, 46)},
            name='Your Worst Nightmare',
            rendering=1,
        },

    },
})
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_darkrp_money.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_fc3_head.lua:
ashop.RegisterPremade("Far Cry 3 Head", {
        requireWorkshop = "734200566",

        objectTypes = {
            {
                "Wearables",
                {"ValveBiped.Bip01_Head1"},
                "Hat"
            },

            {
                "Wearables",
                {"ValveBiped.Bip01_Head1"},
                "Facemask"
            },
        },

        items = {
        {
            name = "Diver",
            rendering = 2,
            metadata = {
                [1] = 'models/fo3_diver.mdl',
                [3] = Vector(-23.625, -0.5625, 2.21875),
                [4] = Angle(180, -90, -82),
            },
        },
        {
            name = "General Cap",
            rendering = 1,
            metadata = {
                [1] = 'models/fo3_general_cap.mdl',
                [3] = Vector(0.40625, 0.5625, -4.375),
                [4] = Angle(-0.25, -74.09375, -90.40625),
                [7] = Vector(1, 1.03125, 1),
            },
        },
        {
            name = "Aviator Helmet",
            rendering = 1,
            metadata = {
                [1] = 'models/fallout 3/aviator_helmet.mdl',
                [3] = Vector(3.21875, -0.90625, 0.0625),
                [4] = Angle(-0.25, -65.40625, -90.40625),
            },
        },
        {
            name = "Confederate Hat",
            rendering = 1,
            metadata = {
                [1] = 'models/fallout 3/confederate_hat.mdl',
                [3] = Vector(4.0625, -1.21875, 1.71875),
                [4] = Angle(-0.25, -79, -90.40625),
            },
        },

        {
            name = "Enclave Officer Cap",
            rendering = 1,
            metadata = {
                [1] = 'models/fallout 3/enclave_officer_cap.mdl',
                [3] = Vector(8.1875, -8.03125, 5.21875),
                [4] = Angle(-0.25, -79, -90.40625),
                [7] = Vector(1, 1.09375, 1),
            },
        },

        {
            name = "Motorcycle Goggles",
            rendering = 2,
            metadata = {
                [1] = 'models/fallout 3/motorcycle_goggles.mdl',
                [3] = Vector(3.375, -4.5625, 0.90625),
                [4] = Angle(-0.25, -79, -90.40625),
            },
        },

        {
            name = "MotorCycle Helmet",
            rendering = 1,
            metadata = {
                [1] = 'models/fallout 3/motorcycle_helmet.mdl',
                [3] = Vector(2.875, -2.71875, 2.0625),
                [4] = Angle(-0.25, -79, -90.40625),
            },
        },

        {
            name = "Red Polish Beret",
            rendering = 1,
            metadata = {
                [1] = 'models/fallout 3/polish_beret.mdl',
                [3] = Vector(5.53125, -0.90625, 1.21875),
                [4] = Angle(-0.25, -79, -90.40625),
            },
        },

        {
            name = "Black Polish Beret",
            rendering = 1,
            metadata = {
                [1] = 'models/fallout 3/polish_beret.mdl',
                [3] = Vector(5.53125, -0.90625, 1.21875),
                [4] = Angle(-0.25, -79, -90.40625),
                [11] = 1,
            },
        },

        {
            name = "Green Polish Beret",
            rendering = 1,
            metadata = {
                [1] = 'models/fallout 3/polish_beret.mdl',
                [3] = Vector(5.53125, -0.90625, 1.21875),
                [4] = Angle(-0.25, -79, -90.40625),
                [11] = 2,
            },
        },
    }
})
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_gtav_head.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_kf2_hats.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_simsbob.lua:
ashop.RegisterPremade("Sims Bob", {
        requireWorkshop = "320256431",

        objectTypes = {
            {
                "Wearables",
                {"ValveBiped.Bip01_Head1"},
                "Hat"
            },
        },

        items = {
            {
                name = "Sims Green",
                rendering = 1,
                metadata = {
                    [1] = 'models/griim/sims/plumbob.mdl',
                    [3] = Vector(18.15625, 4.375, -1.0625),
                    [4] = Angle(0.25, -74.65625, -89.84375),
                    [7] = Vector(0.46875, 0.46875, 0.46875),
                    [9] = Color(0, 255, 0),
                },
            },

            {
                name = "Sims Red",
                rendering = 1,
                metadata = {
                    [1] = 'models/griim/sims/plumbob.mdl',
                    [3] = Vector(18.15625, 4.375, -1.0625),
                    [4] = Angle(0.25, -74.65625, -89.84375),
                    [7] = Vector(0.46875, 0.46875, 0.46875),
                    [9] = Color(255, 35, 39),
                },
            },

            {
                name = "Sims Blue",
                rendering = 1,
                metadata = {
                    [1] = 'models/griim/sims/plumbob.mdl',
                    [3] = Vector(18.15625, 4.375, -1.0625),
                    [4] = Angle(0.25, -74.65625, -89.84375),
                    [7] = Vector(0.46875, 0.46875, 0.46875),
                    [9] = Color(41, 57, 198),
                },
            },
    }
})
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_tera_arcticpets.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_theatermask.lua:
return gluapack()()
--addons/sh_reports/lua/autorun/autorun_reports.lua:
SH_REPORTS = {}

include("reports/lib_easynet.lua")
include("reports/sh_main.lua")
include("reports_config.lua")

IncludeCS("reports/language/" .. (SH_REPORTS.LanguageName or "english") .. ".lua")

if (SERVER) then
	AddCSLuaFile("reports/lib_loungeui.lua")
	AddCSLuaFile("reports/lib_easynet.lua")
	AddCSLuaFile("reports/sh_main.lua")
	AddCSLuaFile("reports/cl_main.lua")
	AddCSLuaFile("reports/cl_menu_main.lua")
	AddCSLuaFile("reports/cl_menu_make.lua")
	AddCSLuaFile("reports/cl_menu_performance.lua")
	AddCSLuaFile("reports/cl_menu_rating.lua")
	AddCSLuaFile("reports_config.lua")

	include("reports/lib_database.lua")
	include("reports/sv_main.lua")
else
	include("reports/lib_loungeui.lua")
	include("reports/cl_main.lua")
	include("reports/cl_menu_main.lua")
	include("reports/cl_menu_make.lua")
	include("reports/cl_menu_performance.lua")
	include("reports/cl_menu_rating.lua")
end
--addons/sh_reports/lua/reports/language/english.lua:
SH_REPORTS.Language = {
	reports = "Raporlar",
	your_reports = "Raporlarınız",
	report_list = "Rapor Listesi",
	reporter = "Muhabir",
	reported_player = "Bildirilen Oyuncu",
	reason = "Sebep",
	waiting_time = "Bekleme Süresi",
	claimed = "Talep edildi mi?",
	unclaimed = "Sahipsiz",

	new_report = "Yeni rapor",
	player_to_report = "Bildirilecek oyuncu",
	comment = "Yorum",
	submit_report = "Rapor gönder",

	view_report = "Raporu görüntüle",
	actions = "Hareketler",
	goto = "Git",
	bring = "Çek",
	bring_reported_player = "Raporlanan oyuncuyu çek",
	yes = "Evet",
	no = "Hayır",
	claim_report = "Rapor alındı",
	close_report = "Rapor kapandı",
	view = "Göster",
	start_sit_session = "Oturma oturumunu başlat",
	report_of_x = "%s'nin raporu",
	claimed_by_x = "%s tarafından talep edildi",
	other = "Diğer",
	none = "Hiç",

	performance_reports = "Performans Rapoları",
	displaying_perf_report_from_x_to_y = "%s ile %s arasındaki Performans Raporu gösteriliyor.",
	admin = "Yönetici",
	num_claimed = "Talep Edildi",
	num_closed = "Kapandı",
	time_spent = "Harcanan zaman",
	rating = "Değerlendirme",
	rate_question = "%s'nin performansını nasıl değerlendirirsiniz?",
	rate_thanks = "Puanladığınız için teşekkürler!",
	rate_notification = "%s size %s puan verdi.",
	history = "Tarih",

	not_allowed_to_run_cmd = "Bu komutu çalıştırmanıza izin verilmiyor.	",
	report_submitted = "Raporunuz gönderildi. Lütfen bir yöneticinin yanıt vermesini bekleyin.",
	report_limit_reached = "Yapabileceğiniz raporların sınırına ulaştınız!",
	report_received = "%s'den %s'ye karşı yeni rapor: %s",
	report_claimed = "Rapor talep edildi!",
	admin_claimed_your_report = "Bir yönetici raporunuzu talep etti!",
	admin_has_disconnected = "Raporunuzla ilgilenen yöneticinin bağlantısı kesildi.",
	report_closed = "Rapor kapatıldı.",
	your_report_was_closed = "Raporunuz bir yönetici tarafından kapatıldı.",
	reporter_closed_report = "Şikayetçi raporunu kapattı.",
	report_already_claimed = "Bu rapor zaten talep edildi.",
	report_non_existent = "Bu rapor mevcut değil.",
	player_has_no_reports = "Hedefin aktif raporu yok.",
	cannot_report_self = "Kendinizi ihbar edemezsiniz.",
	cannot_report_admin = "Bir yöneticiyi şikayet edemezsiniz.",
	cannot_report_as_admin = "Siz bir yöneticisiniz; rapor veremezsiniz!",
	claimed_report_still_active = "Zaten talep edilmiş bir raporunuz var; önce bununla ilgilen!",
	select_reason_first = "Raporunuz için bir neden seçin.",
	select_player_first = "Bildirmek için bir oyuncu seçin.",
	-- 76561198347218024 
	there_are_x_reports_pending = "Bekleyen %d rapor var.",          --31sjhera
}
--addons/sh_reports/lua/reports/cl_menu_make.lua:
local function L(...) return SH_REPORTS:L(...) end

local matBack = Material("shenesis/general/back.png")

function SH_REPORTS:ShowMakeReports(c, d)
	if (IsValid(_SH_REPORTS_MAKE)) then
		_SH_REPORTS_MAKE:Remove()
	end

	local styl = self.Style
	local th, m = self:GetPadding(), self:GetMargin()
	local m2 = m * 0.5
	local ss = self:GetScreenScale()

	local frame = self:MakeWindow(L"new_report")
	frame:SetSize(500 * ss, 500 * ss)
	frame:Center()
	frame:MakePopup()
	_SH_REPORTS_MAKE = frame

		frame:AddHeaderButton(matBack, function()
			frame:Close()
			self:ShowReports()
		end)

		local body = vgui.Create("DPanel", frame)
		body:SetDrawBackground(false)
		body:Dock(FILL)
		body:DockMargin(m, m, m, m)

			local lbl = self:QuickLabel(L"reason" .. ":", "{prefix}Large", styl.text, body)
			lbl:Dock(TOP)

				local reason = self:QuickComboBox(lbl)
				reason:Dock(FILL)
				reason:DockMargin(lbl:GetWide() + m, 0, 0, 0)

				for rid, r in pairs (self.ReportReasons) do
					reason:AddChoice(r, rid)
				end

			local lbl = self:QuickLabel(L"player_to_report" .. ":", "{prefix}Large", styl.text, body)
			lbl:Dock(TOP)
			lbl:DockMargin(0, m, 0, m)

				local target = self:QuickComboBox(lbl)
				target:SetSortItems(false)
				target:Dock(FILL)
				target:DockMargin(lbl:GetWide() + m, 0, 0, 0)

				local toadd = {}
				for _, ply in ipairs (player.GetAll()) do
					if (ply == LocalPlayer()) then
						continue end

					if (self:IsAdmin(ply) and !self.StaffCanBeReported) then
						continue end

					table.insert(toadd, {nick = ply:Nick(), steamid = ply:SteamID64()})
				end

				for _, d in SortedPairsByMemberValue (toadd, "nick") do
					target:AddChoice(d.nick, d.steamid)
				end

				if (self.CanReportOther) then
					target:AddChoice("​[" .. L"other" .. "]", "0")
				end

			local p = vgui.Create("DPanel", body)
			p:SetTall(64 * ss + m)
			p:Dock(TOP)
			p:DockPadding(m2, m2, m2, m2)
			p.Paint = function(me, w, h)
				draw.RoundedBox(4, 0, 0, w, h, styl.inbg)
			end

				local pc = vgui.Create("DPanel", p)
				pc:SetPaintedManually(true)
				pc:SetDrawBackground(false)
				pc:Dock(FILL)

					local avi = self:Avatar("", 64 * ss, pc)
					avi:Dock(LEFT)
					avi:DockMargin(0, 0, m2, 0)

					local nick = self:QuickLabel("", "{prefix}Large", styl.text, pc)
					nick:Dock(TOP)

					local steamid = self:QuickLabel("", "{prefix}Medium", styl.text, pc)
					steamid:Dock(TOP)

			local lbl = self:QuickLabel(L"comment" .. ":" /* 76561198347218033 */, "{prefix}Large", styl.text, body)
			lbl:SetContentAlignment(7)
			lbl:Dock(FILL)
			lbl:DockMargin(0, m, 0, 0)

				local comment = self:QuickEntry("", lbl)
				comment:SetValue(c or "")
				comment:SetMultiline(true)
				comment:Dock(FILL)
				comment:DockMargin(0, lbl:GetTall() + m2, 0, 0)

			local btns = vgui.Create("DPanel", body)
			btns:SetDrawBackground(false)
			btns:Dock(BOTTOM)
			btns:DockMargin(0, m, 0, 0)

				local submit = self:QuickButton(L"submit_report", function()
					local name, steamid = target:GetSelected()
					if (!steamid) then
						self:Notify(L"select_player_first", nil, styl.failure, frame)
						return
					end

					local _, rid = reason:GetSelected()
					if (!rid) then
						self:Notify(L"select_reason_first", nil, styl.failure, frame)
						return
					end

					easynet.SendToServer("SH_REPORTS.NewReport", {
						reported_name = name,
						reported_id = steamid,
						reason_id = rid,
						comment = comment:GetValue():sub(1, self.MaxCommentLength),
					})

					frame:Close()
				end, btns)
				submit:Dock(RIGHT)

			-- cbs
			if (d) then
				reason.OnSelect = function(me, index, value, data)
					local k = self.ReasonAutoTarget[value]
					if (!k) then
						return end

					local p = d["last" .. k]
					if (IsValid(p)) then
						local i
						for k, v in pairs (target.Choices) do
							if (v == p:Nick()) then
								i = k
								break
							end
						end

						if (i) then
							target:ChooseOption(p:Nick(), i)
						end
					end
				end
			end
			target.OnSelect = function(me, index, value, data)
				pc:SetPaintedManually(false)
				pc:SetAlpha(0)
				pc:AlphaTo(255, 0.2)

				avi:SetVisible(data ~= "0")
				avi:SetSteamID(data)
				nick:SetText(value)
				steamid:SetText(data ~= "0" and util.SteamIDFrom64(data) or "")
				steamid:InvalidateParent(true)
			end

	frame:SetAlpha(0)
	frame:AlphaTo(255, 0.1)
end

easynet.Callback("SH_REPORTS.QuickReport", function(data)
	SH_REPORTS:ShowMakeReports(data.comment, data)
end)
--addons/safezone-sh/lua/safezones/sh_shapes.lua:
return gluapack()()
--addons/safezone-sh/lua/safezones/cl_main.lua:
local function L(s, ...)
	return string.format(SH_SZ.Language[s] or s, ...)
end

local aligns = {
	topleft = {TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP, 1, -1},
	top = {TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP, 0.5, -1},
	topright = {TEXT_ALIGN_RIGHT, TEXT_ALIGN_TOP, -1, -1},
	left = {TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, 0},
	center = {TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 0, 0},
	right = {TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER, -1, 0},
	bottomleft = {TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM, 1, 1},
	bottom = {TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM, 0.5, 1},
	bottomright = {TEXT_ALIGN_RIGHT, TEXT_ALIGN_BOTTOM, -1, 1},
}

function SH_SZ:HUDPaint()
	local sz = self.m_Safe
	if (!sz or !sz.opts.hud) then
		return end

	local styl = self.Style
	local th = self:GetPadding()
	local x, y = ScrW() * 0.5, ScrH() * 0.5

	local xa, ya = TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP
	local align = aligns[self.HUDAlign]
	if (align) then
		xa, ya = align[1], align[2]

		local xx = align[3]
		if (xx == 1) then
			x = th
		elseif (xx == -1) then
			x = ScrW() - th
		end

		local yy = align[4]
		if (yy == 1) then
			y = ScrH() - th - draw.GetFontHeight("SH_SZ.Larger")
		elseif (yy == -1) then
			y = th
		end
	end

	local o = self.HUDOffset
	local ss = o.scale and self:GetScreenScale() or 1
	x = x + o.x * ss
	y = y + o.y * ss

	local _w, _h = draw.SimpleTextOutlined(sz.opts.name, "SH_SZ.Largest", x, y, sz.opts.namecol or styl.header, xa, ya, 1, styl.inbg) // 76561197980596512
	draw.SimpleTextOutlined(L(self:GetSafeStatus(LocalPlayer(), sz)), "SH_SZ.Larger", x, y + _h, styl.text, xa, ya, 1, styl.inbg)
end

hook.Add("HUDPaint", "SH_SZ.HUDPaint", function()
	SH_SZ:HUDPaint()
end)

net.Receive("SH_SZ.Traverse", function()
	local enter = net.ReadBool()
	if (enter) then
		SH_SZ.m_Safe = {
			enter = net.ReadFloat(),
			opts = {
				name = net.ReadString(),
				namecol = net.ReadColor(),
				noatk = net.ReadBool(),
				ptime = net.ReadFloat(),
				hud = net.ReadBool(),
			}
		}
	else
		SH_SZ.m_Safe = nil
	end
end)

net.Receive("SH_SZ.Notify", function()
	SH_SZ:Notify(net.ReadString(), nil, SH_SZ.Style[net.ReadBool() and "success" or "failure"])
end)
--lua/autorun/celty.lua:
list.Set( "PlayerOptionsModel", "Celty", "models/tnrp/player/durarara/celty.mdl" )
player_manager.AddValidModel( "Celty", "models/tnrp/player/durarara/celty.mdl" )
	player_manager.AddValidHands( "Celty", "models/tnrp/player/durarara/c_arms/default_p.mdl", 0, "00000000" )
--lua/autorun/cf_gunslinger_gr.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/shared/ch_atm_meta.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/shared/currencies/darkrp.lua:
CH_ATM.Currencies[ "darkrp" ] = {
	Name = "DarkRP Money",

	AddMoney = function( ply, amount )
		ply:addMoney( amount )
	end,
	
	TakeMoney = function( ply, amount )
		ply:addMoney( amount * -1 )
	end,
	
	GetMoney = function( ply )
		return ply:getDarkRPVar( "money" )
	end,
	
	CanAfford = function( ply, amount )
		return ply:canAfford( amount )
	end,
	
	FormatMoney = function( amount )
		return DarkRP.formatMoney( amount )
	end,
	
	CurrencyAbbreviation = function()
		return "USD"
	end,
}
--addons/ch_atm/lua/ch_atm/shared/currencies/sh_pointshop_premium.lua:
CH_ATM.Currencies[ "sh_pointshop_premium" ] = {
	Name = "SH Pointshop Premium Points",
	
	AddMoney = function( ply, amount )
		ply:PS2_AddPremiumPoints( amount )
	end,
	
	TakeMoney = function( ply, amount )
		ply:PS2_AddPremiumPoints( -amount )
	end,
	
	GetMoney = function( ply )
		return ply.PS2_Wallet.premiumPoints
	end,
	
	CanAfford = function( ply, amount )
		return ply.PS2_Wallet.premiumPoints >= amount
	end,
	
	FormatMoney = function( amount )
		return string.Comma( amount ) .. " point" .. ( amount > 1 and "s" or "" )
	end,
	
	CurrencyAbbreviation = function()
		return "PTS"
	end,
}
--addons/ch_atm/lua/ch_atm/client/ch_atm_admin_ui.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/client/ch_atm_admin_ui.lua:
--[[
	Net message to show atm admin menu.
--]]
net.Receive( "CH_ATM_Net_AdminMenu", function( len, ply )
	if not LocalPlayer():CH_ATM_IsAdmin() then
		return
	end
	
	CH_ATM.AdminMenu()
end )

--[[
	ATM ADMIN MENU
--]]
function CH_ATM.AdminMenu()
	local scr_w = ScrW()
	local scr_h = ScrH()
	
	CH_ATM.GUI_AdminMenu = vgui.Create( "DFrame" )
	CH_ATM.GUI_AdminMenu:SetTitle( "" )
	CH_ATM.GUI_AdminMenu:SetSize( scr_w * 0.5, scr_h * 0.6 )
	CH_ATM.GUI_AdminMenu:Center()
	CH_ATM.GUI_AdminMenu.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_ATM.Colors.LightGray )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, w, scr_h * 0.04 )
		
		-- Draw left navigation panel
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, scr_w * 0.1, h )
		
		-- Draw the top title.
		draw.SimpleText( CH_ATM.LangString( "Admin Menu" ), "CH_ATM_Font_ATMScreen_Size35", w / 2, scr_h * 0.02, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	CH_ATM.GUI_AdminMenu:MakePopup()
	CH_ATM.GUI_AdminMenu:SetDraggable( false )
	CH_ATM.GUI_AdminMenu:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", CH_ATM.GUI_AdminMenu )
	GUI_CloseMenu:SetPos( scr_w * 0.4825, scr_h * 0.01 )
	GUI_CloseMenu:SetSize( 24, 24 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_ATM.Colors.Red or color_white )
		surface.SetMaterial( CH_ATM.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, 24, 24 )
	end
	GUI_CloseMenu.DoClick = function()
		CH_ATM.GUI_AdminMenu:Remove()
	end
	
	local GUI_PlayerListBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenu )
	GUI_PlayerListBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_PlayerListBtn:SetPos( 0, scr_h * 0.04 )
	GUI_PlayerListBtn:SetText( "" )
	GUI_PlayerListBtn.Paint = function( self, w, h )
		surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Players" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_PlayerListBtn.DoClick = function()
	end
	
	local GUI_SettingsBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenu )
	GUI_SettingsBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_SettingsBtn:SetPos( 0, scr_h * 0.09 )
	GUI_SettingsBtn:SetText( "" )
	GUI_SettingsBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "ATM Settings" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_SettingsBtn.DoClick = function()
		CH_ATM.AdminMenuSettings()
		
		CH_ATM.GUI_AdminMenu:Remove()
	end
	
	local GUI_ConvertDataBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenu )
	GUI_ConvertDataBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_ConvertDataBtn:SetPos( 0, scr_h * 0.14 )
	GUI_ConvertDataBtn:SetText( "" )
	GUI_ConvertDataBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Import Data" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_ConvertDataBtn.DoClick = function()
		CH_ATM.AdminMenuConvertData()
		
		CH_ATM.GUI_AdminMenu:Remove()
	end
	
	local GUI_OfflineBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenu )
	GUI_OfflineBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_OfflineBtn:SetPos( 0, scr_h * 0.19 )
	GUI_OfflineBtn:SetText( "" )
	GUI_OfflineBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Manage Offline" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_OfflineBtn.DoClick = function()
		CH_ATM.AdminMenuLookupOffline()
		
		CH_ATM.GUI_AdminMenu:Remove()
	end
	
	-- The players list
	local GUI_PlayerList = vgui.Create( "DPanelList", CH_ATM.GUI_AdminMenu )
	GUI_PlayerList:SetSize( scr_w * 0.391, scr_w * 0.3075 )
	GUI_PlayerList:SetPos( scr_w * 0.105, scr_h * 0.0465 )
	GUI_PlayerList:EnableVerticalScrollbar( true )
	GUI_PlayerList:EnableHorizontal( true )
	GUI_PlayerList:SetSpacing( 8 )
	GUI_PlayerList.Paint = function( self, w, h )
		--draw.RoundedBox( 0, 0, 0, w, h, Color( 100, 100, 100, 10 ) )
	end
	
	if ( GUI_PlayerList.VBar ) then
		GUI_PlayerList.VBar.Paint = function( self, w, h ) -- BG
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, w, h )
		end
		
		GUI_PlayerList.VBar.btnUp.Paint = function( self, w, h )
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, w, h )
		end
		
		GUI_PlayerList.VBar.btnGrip.Paint = function( self, w, h )
			surface.SetDrawColor( CH_ATM.Colors.WhiteAlpha )
			surface.DrawRect( 0, 0, w, h )
		end
		
		GUI_PlayerList.VBar.btnDown.Paint = function( self, w, h )
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, w, h )
		end
	end
	
	for k, ply in ipairs( player.GetAll() ) do
		if IsValid( ply ) then
			-- Panel per player
			local GUI_PlayerPanel = vgui.Create( "DPanelList" )
			GUI_PlayerPanel:SetSize( scr_w * 0.38, scr_h * 0.075 )
			GUI_PlayerPanel.Paint = function( self, w, h )
				-- Background
				surface.SetDrawColor( CH_ATM.Colors.DarkGray )
				surface.DrawRect( 0, 0, w, h )
			
				-- Player namd and usergroup
				draw.SimpleText( IsValid( ply ) and ply:Nick() or "N/A", "CH_ATM_Font_ATMScreen_Size25", w * 0.11, h * 0.225, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
				draw.SimpleText( IsValid( ply ) and ply:SteamID64() or "BOT", "CH_ATM_Font_ATMScreen_Size20", w * 0.11, h * 0.5, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
				if ply:GetUserGroup() then
					draw.SimpleText( ply:GetUserGroup(), "CH_ATM_Font_ATMScreen_Size20", w * 0.11, h * 0.75, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
				else
					draw.SimpleText( "N/A", "CH_ATM_Font_ATMScreen_Size20", w * 0.11, h * 0.75, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
				end
			end
			
			local GUI_PlayerAvatar = vgui.Create( "AvatarImage", GUI_PlayerPanel )
			GUI_PlayerAvatar:SetSize( 65, 65 )
			GUI_PlayerAvatar:SetPos( scr_w * 0.005, scr_h * 0.0075 )
			GUI_PlayerAvatar:SetPlayer( ply, 128 )
			
			local GUI_ViewPlayer = vgui.Create( "DButton", GUI_PlayerPanel )
			GUI_ViewPlayer:SetSize( scr_w * 0.08, scr_h * 0.061 )
			GUI_ViewPlayer:SetPos( scr_w * 0.296, scr_h * 0.0075 )
			GUI_ViewPlayer:SetText( "" )
			GUI_ViewPlayer.Paint = function( self, w, h )
				if self:IsHovered() then
					surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
				else
					surface.SetDrawColor( CH_ATM.Colors.LightGray )
				end
				surface.DrawRect( 0, 0, w, h )
				
				draw.SimpleText( CH_ATM.LangString( "View Player" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			GUI_ViewPlayer.DoClick = function()
				net.Start( "CH_ATM_Net_AdminViewPlayer" )
					net.WriteEntity( ply )
				net.SendToServer()
				
				CH_ATM.GUI_AdminMenu:Remove()
			end
			
			GUI_PlayerList:AddItem( GUI_PlayerPanel )
			
		end
	end
end






--[[
	ATM SETTINGS ADMIN MENU
--]]
function CH_ATM.AdminMenuSettings()
	local ply = LocalPlayer()
	
	local scr_w = ScrW()
	local scr_h = ScrH()
	
	CH_ATM.GUI_AdminMenuSettings = vgui.Create( "DFrame" )
	CH_ATM.GUI_AdminMenuSettings:SetTitle( "" )
	CH_ATM.GUI_AdminMenuSettings:SetSize( scr_w * 0.5, scr_h * 0.6 )
	CH_ATM.GUI_AdminMenuSettings:Center()
	CH_ATM.GUI_AdminMenuSettings.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_ATM.Colors.LightGray )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, w, scr_h * 0.04 )
		
		-- Draw left navigation panel
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, scr_w * 0.1, h )
		
		-- Draw the top title.
		draw.SimpleText( CH_ATM.LangString( "ATM Settings" ), "CH_ATM_Font_ATMScreen_Size35", w / 2, scr_h * 0.02, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	CH_ATM.GUI_AdminMenuSettings:MakePopup()
	CH_ATM.GUI_AdminMenuSettings:SetDraggable( false )
	CH_ATM.GUI_AdminMenuSettings:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuSettings )
	GUI_CloseMenu:SetPos( scr_w * 0.4825, scr_h * 0.01 )
	GUI_CloseMenu:SetSize( 24, 24 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_ATM.Colors.Red or color_white )
		surface.SetMaterial( CH_ATM.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, 24, 24 )
	end
	GUI_CloseMenu.DoClick = function()
		CH_ATM.GUI_AdminMenuSettings:Remove()
	end

	local GUI_PlayerListBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuSettings )
	GUI_PlayerListBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_PlayerListBtn:SetPos( 0, scr_h * 0.04 )
	GUI_PlayerListBtn:SetText( "" )
	GUI_PlayerListBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Players" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_PlayerListBtn.DoClick = function()
		CH_ATM.AdminMenu()
		
		CH_ATM.GUI_AdminMenuSettings:Remove()
	end
	
	local GUI_SettingsBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuSettings )
	GUI_SettingsBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_SettingsBtn:SetPos( 0, scr_h * 0.09 )
	GUI_SettingsBtn:SetText( "" )
	GUI_SettingsBtn.Paint = function( self, w, h )
		surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "ATM Settings" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_SettingsBtn.DoClick = function()
	end
	
	local GUI_ConvertDataBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuSettings )
	GUI_ConvertDataBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_ConvertDataBtn:SetPos( 0, scr_h * 0.14 )
	GUI_ConvertDataBtn:SetText( "" )
	GUI_ConvertDataBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Import Data" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_ConvertDataBtn.DoClick = function()
		CH_ATM.AdminMenuConvertData()
		
		CH_ATM.GUI_AdminMenuSettings:Remove()
	end
	
	local GUI_OfflineBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuSettings )
	GUI_OfflineBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_OfflineBtn:SetPos( 0, scr_h * 0.19 )
	GUI_OfflineBtn:SetText( "" )
	GUI_OfflineBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Manage Offline" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_OfflineBtn.DoClick = function()
		CH_ATM.AdminMenuLookupOffline()
		
		CH_ATM.GUI_AdminMenuSettings:Remove()
	end

	-- Setting buttons
	local GUI_SaveATMEntities = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuSettings )
	GUI_SaveATMEntities:SetSize( scr_w * 0.391, scr_h * 0.075 )
	GUI_SaveATMEntities:SetPos( scr_w * 0.105, scr_h * 0.0465 )
	GUI_SaveATMEntities:SetTextColor( Color( 0, 0, 0, 255 ) )
	GUI_SaveATMEntities:SetText( "" )
	GUI_SaveATMEntities.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Save ATM entities" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_SaveATMEntities.DoClick = function()
		LocalPlayer():ConCommand( "ch_atm_saveall" )
	end
	
	local GUI_ShowAllATMOnMap = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuSettings )
	GUI_ShowAllATMOnMap:SetSize( scr_w * 0.391, scr_h * 0.075 )
	GUI_ShowAllATMOnMap:SetPos( scr_w * 0.105, scr_h * 0.129 )
	GUI_ShowAllATMOnMap:SetTextColor( Color( 0, 0, 0, 255 ) )
	GUI_ShowAllATMOnMap:SetText( "" )
	GUI_ShowAllATMOnMap.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		if not LocalPlayer().CH_ATM_ShowATMEntitiesOnMap then
			draw.SimpleText( CH_ATM.LangString( "Show ATM entities on map" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		else
			draw.SimpleText( CH_ATM.LangString( "Stop showing ATM entities on map" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
	end
	GUI_ShowAllATMOnMap.DoClick = function()
		if not LocalPlayer().CH_ATM_ShowATMEntitiesOnMap then
			LocalPlayer().CH_ATM_ShowATMEntitiesOnMap = true
		else
			LocalPlayer().CH_ATM_ShowATMEntitiesOnMap = false
		end
	end
	
	local GUI_LockdownATMs = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuSettings )
	GUI_LockdownATMs:SetSize( scr_w * 0.391, scr_h * 0.075 )
	GUI_LockdownATMs:SetPos( scr_w * 0.105, scr_h * 0.2115 )
	GUI_LockdownATMs:SetTextColor( Color( 0, 0, 0, 255 ) )
	GUI_LockdownATMs:SetText( "" )
	GUI_LockdownATMs.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		if not CH_ATM.HasAdminEmergencyLockdownATM then
			draw.SimpleText( CH_ATM.LangString( "Initiate emergency ATM lockdown" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		else
			draw.SimpleText( CH_ATM.LangString( "Cancel emergency ATM lockdown" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
	end
	GUI_LockdownATMs.DoClick = function()
		if CH_ATM.HasAdminEmergencyLockdownATM then
			CH_ATM.HasAdminEmergencyLockdownATM = false
			
			net.Start( "CH_ATM_Net_AdminATMEmergencyLockdown" )
				net.WriteBool( CH_ATM.HasAdminEmergencyLockdownATM )
			net.SendToServer()
		else
			CH_ATM.HasAdminEmergencyLockdownATM = true
			
			net.Start( "CH_ATM_Net_AdminATMEmergencyLockdown" )
				net.WriteBool( CH_ATM.HasAdminEmergencyLockdownATM )
			net.SendToServer()
		end
	end
	
	local GUI_SaveLeaderboardEntities = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuSettings )
	GUI_SaveLeaderboardEntities:SetSize( scr_w * 0.391, scr_h * 0.075 )
	GUI_SaveLeaderboardEntities:SetPos( scr_w * 0.105, scr_h * 0.294 )
	GUI_SaveLeaderboardEntities:SetTextColor( Color( 0, 0, 0, 255 ) )
	GUI_SaveLeaderboardEntities:SetText( "" )
	GUI_SaveLeaderboardEntities.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Save leaderboard entities" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_SaveLeaderboardEntities.DoClick = function()
		LocalPlayer():ConCommand( "ch_atm_save_leaderboards" )
	end
	
	if CH_ATM.Config.EnableResetAllAccounts then
		local reset_confirm = false
		local GUI_ResetAllAccounts = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuSettings )
		GUI_ResetAllAccounts:SetSize( scr_w * 0.391, scr_h * 0.075 )
		GUI_ResetAllAccounts:SetPos( scr_w * 0.105, scr_h * 0.516 )
		GUI_ResetAllAccounts:SetTextColor( Color( 0, 0, 0, 255 ) )
		GUI_ResetAllAccounts:SetText( "" )
		GUI_ResetAllAccounts.Paint = function( self, w, h )
			if self:IsHovered() then
				surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
			else
				surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			end
			surface.DrawRect( 0, 0, w, h )
			
			if not reset_confirm then
				draw.SimpleText( CH_ATM.LangString( "Reset all balances" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_ATM.LangString( "Reset all balances (Confirmation)" ), "CH_ATM_Font_ATMScreen_Size35", w / 2, h / 2, CH_ATM.Colors.Red, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
		end
		GUI_ResetAllAccounts.DoClick = function()
			if not reset_confirm then
				reset_confirm = true
			else
				-- SECOND CLICK = RESET ALL
				net.Start( "CH_ATM_Net_AdminResetAllAccounts" )
				net.SendToServer()
				
				CH_ATM.GUI_AdminMenuSettings:Remove()
			end
		end
	end
end






--[[
	ATM IMPORT DATA ADMIN MENU
--]]
function CH_ATM.AdminMenuConvertData()
	local ply = LocalPlayer()
	
	local scr_w = ScrW()
	local scr_h = ScrH()
	
	CH_ATM.GUI_AdminMenuConvertData = vgui.Create( "DFrame" )
	CH_ATM.GUI_AdminMenuConvertData:SetTitle( "" )
	CH_ATM.GUI_AdminMenuConvertData:SetSize( scr_w * 0.5, scr_h * 0.6 )
	CH_ATM.GUI_AdminMenuConvertData:Center()
	CH_ATM.GUI_AdminMenuConvertData.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_ATM.Colors.LightGray )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, w, scr_h * 0.04 )
		
		-- Draw left navigation panel
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, scr_w * 0.1, h )
		
		-- Draw the top title.
		draw.SimpleText( CH_ATM.LangString( "Import Data" ), "CH_ATM_Font_ATMScreen_Size35", w / 2, scr_h * 0.02, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	CH_ATM.GUI_AdminMenuConvertData:MakePopup()
	CH_ATM.GUI_AdminMenuConvertData:SetDraggable( false )
	CH_ATM.GUI_AdminMenuConvertData:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuConvertData )
	GUI_CloseMenu:SetPos( scr_w * 0.4825, scr_h * 0.01 )
	GUI_CloseMenu:SetSize( 24, 24 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_ATM.Colors.Red or color_white )
		surface.SetMaterial( CH_ATM.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, 24, 24 )
	end
	GUI_CloseMenu.DoClick = function()
		CH_ATM.GUI_AdminMenuConvertData:Remove()
	end

	local GUI_PlayerListBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuConvertData )
	GUI_PlayerListBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_PlayerListBtn:SetPos( 0, scr_h * 0.04 )
	GUI_PlayerListBtn:SetText( "" )
	GUI_PlayerListBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Players" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_PlayerListBtn.DoClick = function()
		CH_ATM.AdminMenu()
		
		CH_ATM.GUI_AdminMenuConvertData:Remove()
	end
	
	local GUI_SettingsBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuConvertData )
	GUI_SettingsBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_SettingsBtn:SetPos( 0, scr_h * 0.09 )
	GUI_SettingsBtn:SetText( "" )
	GUI_SettingsBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "ATM Settings" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_SettingsBtn.DoClick = function()
		CH_ATM.AdminMenuSettings()
		
		CH_ATM.GUI_AdminMenuConvertData:Remove()
	end
	
	local GUI_ConvertDataBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuConvertData )
	GUI_ConvertDataBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_ConvertDataBtn:SetPos( 0, scr_h * 0.14 )
	GUI_ConvertDataBtn:SetText( "" )
	GUI_ConvertDataBtn.Paint = function( self, w, h )
		surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Import Data" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_ConvertDataBtn.DoClick = function()
	end
	
	local GUI_OfflineBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuConvertData )
	GUI_OfflineBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_OfflineBtn:SetPos( 0, scr_h * 0.19 )
	GUI_OfflineBtn:SetText( "" )
	GUI_OfflineBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Manage Offline" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_OfflineBtn.DoClick = function()
		CH_ATM.AdminMenuLookupOffline()
		
		CH_ATM.GUI_AdminMenuConvertData:Remove()
	end

	-- Setting buttons
	local GUI_ImportSlownAccounts = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuConvertData )
	GUI_ImportSlownAccounts:SetSize( scr_w * 0.391, scr_h * 0.075 )
	GUI_ImportSlownAccounts:SetPos( scr_w * 0.105, scr_h * 0.0465 )
	GUI_ImportSlownAccounts:SetText( "" )
	GUI_ImportSlownAccounts.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Import SlownLS Accounts" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_ImportSlownAccounts.DoClick = function()
		net.Start( "CH_ATM_Net_ConvertAccountsFromSlownLS" )
		net.SendToServer()
	end
	
	local GUI_ImportBlueATMAccounts = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuConvertData )
	GUI_ImportBlueATMAccounts:SetSize( scr_w * 0.391, scr_h * 0.075 )
	GUI_ImportBlueATMAccounts:SetPos( scr_w * 0.105, scr_h * 0.129 )
	GUI_ImportBlueATMAccounts:SetText( "" )
	GUI_ImportBlueATMAccounts.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Import Blues ATM Accounts" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_ImportBlueATMAccounts.DoClick = function()
		net.Start( "CH_ATM_Net_ConvertAccountsFromBlueATM" )
		net.SendToServer()
	end
	
	local GUI_ImportBetterBankingAccounts = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuConvertData )
	GUI_ImportBetterBankingAccounts:SetSize( scr_w * 0.391, scr_h * 0.075 )
	GUI_ImportBetterBankingAccounts:SetPos( scr_w * 0.105, scr_h * 0.2115 )
	GUI_ImportBetterBankingAccounts:SetText( "" )
	GUI_ImportBetterBankingAccounts.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Import Better Banking Accounts" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_ImportBetterBankingAccounts.DoClick = function()
		net.Start( "CH_ATM_Net_ConvertAccountsFromBetterBanking" )
		net.SendToServer()
	end
	
	local GUI_ImportGlorifiedBankingAccounts = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuConvertData )
	GUI_ImportGlorifiedBankingAccounts:SetSize( scr_w * 0.391, scr_h * 0.075 )
	GUI_ImportGlorifiedBankingAccounts:SetPos( scr_w * 0.105, scr_h * 0.294 )
	GUI_ImportGlorifiedBankingAccounts:SetText( "" )
	GUI_ImportGlorifiedBankingAccounts.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Import Glorified Banking Accounts" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
	end
	GUI_ImportGlorifiedBankingAccounts.DoClick = function()
		net.Start( "CH_ATM_Net_ConvertAccountsFromGlorifiedBanking" )
		net.SendToServer()
	end
end






--[[
	ATM IMPORT DATA ADMIN MENU
--]]
function CH_ATM.AdminMenuLookupOffline()
	local ply = LocalPlayer()
	
	local scr_w = ScrW()
	local scr_h = ScrH()
	
	CH_ATM.GUI_AdminMenuLookupOffline = vgui.Create( "DFrame" )
	CH_ATM.GUI_AdminMenuLookupOffline:SetTitle( "" )
	CH_ATM.GUI_AdminMenuLookupOffline:SetSize( scr_w * 0.5, scr_h * 0.6 )
	CH_ATM.GUI_AdminMenuLookupOffline:Center()
	CH_ATM.GUI_AdminMenuLookupOffline.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_ATM.Colors.LightGray )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, w, scr_h * 0.04 )
		
		-- Draw left navigation panel
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, scr_w * 0.1, h )
		
		-- Draw the top title.
		draw.SimpleText( CH_ATM.LangString( "Manage Offline" ), "CH_ATM_Font_ATMScreen_Size35", w / 2, scr_h * 0.02, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Text Entry BG
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( w * 0.21, h * 0.078, w * 0.782, scr_h * 0.075 )
		
	end
	CH_ATM.GUI_AdminMenuLookupOffline:MakePopup()
	CH_ATM.GUI_AdminMenuLookupOffline:SetDraggable( false )
	CH_ATM.GUI_AdminMenuLookupOffline:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuLookupOffline )
	GUI_CloseMenu:SetPos( scr_w * 0.4825, scr_h * 0.01 )
	GUI_CloseMenu:SetSize( 24, 24 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_ATM.Colors.Red or color_white )
		surface.SetMaterial( CH_ATM.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, 24, 24 )
	end
	GUI_CloseMenu.DoClick = function()
		CH_ATM.GUI_AdminMenuLookupOffline:Remove()
	end

	local GUI_PlayerListBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuLookupOffline )
	GUI_PlayerListBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_PlayerListBtn:SetPos( 0, scr_h * 0.04 )
	GUI_PlayerListBtn:SetText( "" )
	GUI_PlayerListBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Players" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_PlayerListBtn.DoClick = function()
		CH_ATM.AdminMenu()
		
		CH_ATM.GUI_AdminMenuLookupOffline:Remove()
	end
	
	local GUI_SettingsBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuLookupOffline )
	GUI_SettingsBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_SettingsBtn:SetPos( 0, scr_h * 0.09 )
	GUI_SettingsBtn:SetText( "" )
	GUI_SettingsBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "ATM Settings" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_SettingsBtn.DoClick = function()
		CH_ATM.AdminMenuSettings()
		
		CH_ATM.GUI_AdminMenuLookupOffline:Remove()
	end
	
	local GUI_ConvertDataBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuLookupOffline )
	GUI_ConvertDataBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_ConvertDataBtn:SetPos( 0, scr_h * 0.14 )
	GUI_ConvertDataBtn:SetText( "" )
	GUI_ConvertDataBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Import Data" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_ConvertDataBtn.DoClick = function()
		CH_ATM.AdminMenuConvertData()
		
		CH_ATM.GUI_AdminMenuLookupOffline:Remove()
	end
	
	local GUI_OfflineBtn = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuLookupOffline )
	GUI_OfflineBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_OfflineBtn:SetPos( 0, scr_h * 0.19 )
	GUI_OfflineBtn:SetText( "" )
	GUI_OfflineBtn.Paint = function( self, w, h )
		surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Manage Offline" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_OfflineBtn.DoClick = function()
	end

	local GUI_SteamIDEntry = vgui.Create( "DTextEntry", CH_ATM.GUI_AdminMenuLookupOffline )
	GUI_SteamIDEntry:SetPos( scr_w * 0.105, scr_h * 0.0475 )
	GUI_SteamIDEntry:SetSize( scr_w * 0.39, scr_h * 0.074 )
	GUI_SteamIDEntry:SetFont( "CH_ATM_Font_ATMScreen_Size50" )
	GUI_SteamIDEntry:SetTextColor( color_white )
	GUI_SteamIDEntry:SetPlaceholderText( "Enter SteamID64" )
	GUI_SteamIDEntry:SetAllowNonAsciiCharacters( false ) -- When allowing non-ASCII characters, a small box appears inside the text entry, indicating your keyboard's current language.  That makes the user unable to input some letters from German, French, Swedish, etc. alphabet. 
	GUI_SteamIDEntry:SetMultiline( false )
	GUI_SteamIDEntry:SetNumeric( true )
	GUI_SteamIDEntry:SetDrawBackground( false )
	
	local GUI_LookupOfflinePlayer = vgui.Create( "DButton", CH_ATM.GUI_AdminMenuLookupOffline )
	GUI_LookupOfflinePlayer:SetSize( scr_w * 0.391, scr_h * 0.075 )
	GUI_LookupOfflinePlayer:SetPos( scr_w * 0.105, scr_h * 0.129 )
	GUI_LookupOfflinePlayer:SetText( "" )
	GUI_LookupOfflinePlayer.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Lookup Player" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_LookupOfflinePlayer.DoClick = function()
		net.Start( "CH_ATM_Net_AdminCheckOfflineAccount" )
			net.WriteString( GUI_SteamIDEntry:GetValue() )
		net.SendToServer()
		
		CH_ATM.GUI_AdminMenuLookupOffline:Remove()
	end
end






--[[
	View Offline Player
--]]
net.Receive( "CH_ATM_Net_AdminShowOfflineAccount", function( len, ply )
	local ply = LocalPlayer()
	
	if not ply:CH_ATM_IsAdmin() then
		return
	end
	
	local target_steamid = net.ReadString()
	local target_bank_account = net.ReadUInt( 32 )
	local target_bank_level = net.ReadUInt( 8 )
	
	local scr_w = ScrW()
	local scr_h = ScrH()
	
	local GUI_ViewOfflinePlayerMenu = vgui.Create( "DFrame" )
	GUI_ViewOfflinePlayerMenu:SetTitle( "" )
	GUI_ViewOfflinePlayerMenu:SetSize( scr_w * 0.5, scr_h * 0.6 )
	GUI_ViewOfflinePlayerMenu:Center()
	GUI_ViewOfflinePlayerMenu.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_ATM.Colors.LightGray )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, w, scr_h * 0.04 )
		
		-- Draw left navigation panel
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, scr_w * 0.1, h )
		
		-- Draw the top title.
		draw.SimpleText( CH_ATM.LangString( "View Player" ), "CH_ATM_Font_ATMScreen_Size35", w / 2, scr_h * 0.02, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_ViewOfflinePlayerMenu:MakePopup()
	GUI_ViewOfflinePlayerMenu:SetDraggable( false )
	GUI_ViewOfflinePlayerMenu:ShowCloseButton( false )

	local GUI_CloseMenu = vgui.Create( "DButton", GUI_ViewOfflinePlayerMenu )
	GUI_CloseMenu:SetPos( scr_w * 0.4825, scr_h * 0.01 )
	GUI_CloseMenu:SetSize( 24, 24 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_ATM.Colors.Red or color_white )
		surface.SetMaterial( CH_ATM.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, 24, 24 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_ViewOfflinePlayerMenu:Remove()
	end

	local GUI_PlayerListBtn = vgui.Create( "DButton", GUI_ViewOfflinePlayerMenu )
	GUI_PlayerListBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_PlayerListBtn:SetPos( 0, scr_h * 0.04 )
	GUI_PlayerListBtn:SetText( "" )
	GUI_PlayerListBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Players" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_PlayerListBtn.DoClick = function()
		CH_ATM.AdminMenu()
		
		GUI_ViewOfflinePlayerMenu:Remove()
	end
	
	local GUI_SettingsBtn = vgui.Create( "DButton", GUI_ViewOfflinePlayerMenu )
	GUI_SettingsBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_SettingsBtn:SetPos( 0, scr_h * 0.09 )
	GUI_SettingsBtn:SetText( "" )
	GUI_SettingsBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "ATM Settings" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_SettingsBtn.DoClick = function()
		CH_ATM.AdminMenuSettings()
		
		GUI_ViewOfflinePlayerMenu:Remove()
	end
	
	local GUI_ConvertDataBtn = vgui.Create( "DButton", GUI_ViewOfflinePlayerMenu )
	GUI_ConvertDataBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_ConvertDataBtn:SetPos( 0, scr_h * 0.14 )
	GUI_ConvertDataBtn:SetText( "" )
	GUI_ConvertDataBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Import Data" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_ConvertDataBtn.DoClick = function()
		CH_ATM.AdminMenuConvertData()
		
		GUI_ViewOfflinePlayerMenu:Remove()
	end
	
	local GUI_OfflineBtn = vgui.Create( "DButton", GUI_ViewOfflinePlayerMenu )
	GUI_OfflineBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_OfflineBtn:SetPos( 0, scr_h * 0.19 )
	GUI_OfflineBtn:SetText( "" )
	GUI_OfflineBtn.Paint = function( self, w, h )
		surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Manage Offline" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_OfflineBtn.DoClick = function()
		CH_ATM.AdminMenuLookupOffline()
		
		GUI_ViewOfflinePlayerMenu:Remove()
	end
	
	-- VIEW PLAYER SECTION
	local GUI_ViewPlayerPanel = vgui.Create( "DPanel", GUI_ViewOfflinePlayerMenu )
	GUI_ViewPlayerPanel:SetSize( scr_w * 0.391, scr_w * 0.3075 )
	GUI_ViewPlayerPanel:SetPos( scr_w * 0.105, scr_h * 0.0465 )
	GUI_ViewPlayerPanel.Paint = function( self, w, h )
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Viewing profile of" ).. " ".. target_steamid, "CH_ATM_Font_ATMScreen_Size30", w / 2, h * 0.05, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

		draw.SimpleText( CH_ATM.LangString( "Total Balance" ).. ": ".. CH_ATM.FormatMoney( target_bank_account ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h * 0.11, CH_ATM.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

		draw.SimpleText( CH_ATM.LangString( "Account Level" ) ..": ".. target_bank_level, "CH_ATM_Font_ATMScreen_Size25", w / 2, h * 0.16, CH_ATM.Colors.Red, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		--Text Entry BG
		surface.SetDrawColor( CH_ATM.Colors.LightGray )
		surface.DrawRect( w * 0.015, h * 0.2, w * 0.97, h * 0.1 )
		
		surface.SetDrawColor( CH_ATM.Colors.LightGray )
		surface.DrawRect( w * 0.015, h * 0.32, w * 0.97, h * 0.1 )
	end
	
	local GUI_PlayerMoneyField = vgui.Create( "DTextEntry", GUI_ViewPlayerPanel )
	GUI_PlayerMoneyField:SetPos( scr_w * 0.006, scr_h * 0.11 )
	GUI_PlayerMoneyField:SetSize( scr_w * 0.379, scr_h * 0.055 )
	GUI_PlayerMoneyField:SetFont( "CH_ATM_Font_ATMScreen_Size50" )
	GUI_PlayerMoneyField:SetTextColor( color_white )
	GUI_PlayerMoneyField:SetValue( target_bank_account )
	GUI_PlayerMoneyField:SetAllowNonAsciiCharacters( false ) -- When allowing non-ASCII characters, a small box appears inside the text entry, indicating your keyboard's current language.  That makes the user unable to input some letters from German, French, Swedish, etc. alphabet. 
	GUI_PlayerMoneyField:SetMultiline( false )
	GUI_PlayerMoneyField:SetNumeric( true )
	GUI_PlayerMoneyField:SetDrawBackground( false )
	
	local GUI_PlayerLevelField = vgui.Create( "DTextEntry", GUI_ViewPlayerPanel )
	GUI_PlayerLevelField:SetPos( scr_w * 0.006, scr_h * 0.175 )
	GUI_PlayerLevelField:SetSize( scr_w * 0.379, scr_h * 0.055 )
	GUI_PlayerLevelField:SetFont( "CH_ATM_Font_ATMScreen_Size50" )
	GUI_PlayerLevelField:SetTextColor( color_white )
	GUI_PlayerLevelField:SetValue( target_bank_level )
	GUI_PlayerLevelField:SetAllowNonAsciiCharacters( false ) -- When allowing non-ASCII characters, a small box appears inside the text entry, indicating your keyboard's current language.  That makes the user unable to input some letters from German, French, Swedish, etc. alphabet. 
	GUI_PlayerLevelField:SetMultiline( false )
	GUI_PlayerLevelField:SetNumeric( true )
	GUI_PlayerLevelField:SetDrawBackground( false )
	
	local GUI_UpdateOfflinePlayer = vgui.Create( "DButton", GUI_ViewPlayerPanel )
	GUI_UpdateOfflinePlayer:SetPos( scr_w * 0.006, scr_h * 0.24 )
	GUI_UpdateOfflinePlayer:SetSize( scr_w * 0.379, scr_h * 0.055 )
	GUI_UpdateOfflinePlayer:SetText( "" )
	GUI_UpdateOfflinePlayer.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.LightGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Update Player Profile" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_UpdateOfflinePlayer.DoClick = function()
		net.Start( "CH_ATM_Net_AdminUpdateOfflineAccount" )
			net.WriteString( target_steamid )
			net.WriteUInt( GUI_PlayerMoneyField:GetValue(), 32 )
			net.WriteUInt( GUI_PlayerLevelField:GetValue(), 8 )
		net.SendToServer()
		
		GUI_ViewOfflinePlayerMenu:Remove()
	end
end )






--[[
	View Player
--]]
net.Receive( "CH_ATM_Net_AdminViewPlayerMenu", function( len, ply )
	local ply = LocalPlayer()
	
	if not ply:CH_ATM_IsAdmin() then
		return
	end
	
	local target_ply = net.ReadEntity()
	local target_bank_account = net.ReadUInt( 32 )
	local target_bank_level = net.ReadUInt( 8 )
	
	local scr_w = ScrW()
	local scr_h = ScrH()
	
	local GUI_ViewPlayerMenu = vgui.Create( "DFrame" )
	GUI_ViewPlayerMenu:SetTitle( "" )
	GUI_ViewPlayerMenu:SetSize( scr_w * 0.5, scr_h * 0.6 )
	GUI_ViewPlayerMenu:Center()
	GUI_ViewPlayerMenu.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_ATM.Colors.LightGray )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, w, scr_h * 0.04 )
		
		-- Draw left navigation panel
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, scr_w * 0.1, h )
		
		-- Draw the top title.
		draw.SimpleText( CH_ATM.LangString( "View Player" ), "CH_ATM_Font_ATMScreen_Size35", w / 2, scr_h * 0.02, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_ViewPlayerMenu:MakePopup()
	GUI_ViewPlayerMenu:SetDraggable( false )
	GUI_ViewPlayerMenu:ShowCloseButton( false )

	local GUI_CloseMenu = vgui.Create( "DButton", GUI_ViewPlayerMenu )
	GUI_CloseMenu:SetPos( scr_w * 0.4825, scr_h * 0.01 )
	GUI_CloseMenu:SetSize( 24, 24 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_ATM.Colors.Red or color_white )
		surface.SetMaterial( CH_ATM.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, 24, 24 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_ViewPlayerMenu:Remove()
	end

	local GUI_PlayerListBtn = vgui.Create( "DButton", GUI_ViewPlayerMenu )
	GUI_PlayerListBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_PlayerListBtn:SetPos( 0, scr_h * 0.04 )
	GUI_PlayerListBtn:SetText( "" )
	GUI_PlayerListBtn.Paint = function( self, w, h )
		surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Players" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_PlayerListBtn.DoClick = function()
		CH_ATM.AdminMenu()
		
		GUI_ViewPlayerMenu:Remove()
	end
	
	local GUI_SettingsBtn = vgui.Create( "DButton", GUI_ViewPlayerMenu )
	GUI_SettingsBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_SettingsBtn:SetPos( 0, scr_h * 0.09 )
	GUI_SettingsBtn:SetText( "" )
	GUI_SettingsBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "ATM Settings" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_SettingsBtn.DoClick = function()
		CH_ATM.AdminMenuSettings()
		
		GUI_ViewPlayerMenu:Remove()
	end
	
	local GUI_ConvertDataBtn = vgui.Create( "DButton", GUI_ViewPlayerMenu )
	GUI_ConvertDataBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_ConvertDataBtn:SetPos( 0, scr_h * 0.14 )
	GUI_ConvertDataBtn:SetText( "" )
	GUI_ConvertDataBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Import Data" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_ConvertDataBtn.DoClick = function()
		CH_ATM.AdminMenuConvertData()
		
		GUI_ViewPlayerMenu:Remove()
	end
	
	local GUI_OfflineBtn = vgui.Create( "DButton", GUI_ViewPlayerMenu )
	GUI_OfflineBtn:SetSize( scr_w * 0.1, scr_h * 0.05 )
	GUI_OfflineBtn:SetPos( 0, scr_h * 0.19 )
	GUI_OfflineBtn:SetText( "" )
	GUI_OfflineBtn.Paint = function( self, w, h )
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Manage Offline" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_OfflineBtn.DoClick = function()
		CH_ATM.AdminMenuLookupOffline()
		
		GUI_ViewPlayerMenu:Remove()
	end
	
	-- VIEW PLAYER SECTION
	local GUI_ViewPlayerPanel = vgui.Create( "DPanel", GUI_ViewPlayerMenu )
	GUI_ViewPlayerPanel:SetSize( scr_w * 0.391, scr_w * 0.3075 )
	GUI_ViewPlayerPanel:SetPos( scr_w * 0.105, scr_h * 0.0465 )
	GUI_ViewPlayerPanel.Paint = function( self, w, h )
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Viewing profile of" ).. " ".. target_ply:Nick(), "CH_ATM_Font_ATMScreen_Size30", w / 2, h * 0.21, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

		draw.SimpleText( CH_ATM.LangString( "Total Balance" ).. ": ".. CH_ATM.FormatMoney( target_bank_account ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h * 0.265, CH_ATM.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

		draw.SimpleText( CH_ATM.LangString( "Account Level" ) ..": ".. target_bank_level, "CH_ATM_Font_ATMScreen_Size25", w / 2, h * 0.31, CH_ATM.Colors.Red, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		--Text Entry BG
		surface.SetDrawColor( CH_ATM.Colors.LightGray )
		surface.DrawRect( w * 0.26, h * 0.35, w * 0.5, scr_h * 0.035 )
	end
	
	local GUI_PlayerAvatar = vgui.Create( "AvatarImage", GUI_ViewPlayerPanel )
	GUI_PlayerAvatar:SetSize( 100, 100 )
	GUI_PlayerAvatar:SetPos( GUI_ViewPlayerPanel:GetWide() / 2 - 50, scr_h * 0.0075 )
	GUI_PlayerAvatar:SetPlayer( ply, 128 )
	
	local GUI_TextField = vgui.Create( "DTextEntry", GUI_ViewPlayerPanel )
	GUI_TextField:SetPos( scr_w * 0.1025, scr_h * 0.1925 )
	GUI_TextField:SetSize( scr_w * 0.197, scr_h * 0.035 )
	GUI_TextField:SetFont( "CH_ATM_Font_ATMScreen_Size30" )
	GUI_TextField:SetTextColor( color_white )
	GUI_TextField:SetPlaceholderText( "0" )
	GUI_TextField:SetAllowNonAsciiCharacters( false ) -- When allowing non-ASCII characters, a small box appears inside the text entry, indicating your keyboard's current language.  That makes the user unable to input some letters from German, French, Swedish, etc. alphabet. 
	GUI_TextField:SetMultiline( false )
	GUI_TextField:SetNumeric( true )
	GUI_TextField:SetDrawBackground( false )
	
	
	-- Give Money
	local GUI_GiveMoneyBtn = vgui.Create( "DButton", GUI_ViewPlayerPanel )
	GUI_GiveMoneyBtn:SetSize( scr_w * 0.123, scr_h * 0.045 )
	GUI_GiveMoneyBtn:SetPos( scr_w * 0.0055, scr_h * 0.235 )
	GUI_GiveMoneyBtn:SetText( "" )
	GUI_GiveMoneyBtn.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.LightGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Give Money" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_GiveMoneyBtn.DoClick = function()
		if not tonumber( GUI_TextField:GetValue() ) or tonumber( GUI_TextField:GetValue() ) <= 0 then
			return
		end
		
		net.Start( "CH_ATM_Net_AdminGiveMoney" )
			net.WriteEntity( target_ply )
			net.WriteUInt( GUI_TextField:GetValue(), 32 )
		net.SendToServer()
		
		GUI_ViewPlayerMenu:Remove()
	end
	
	-- Take Money
	local GUI_TakeMoneyBtn = vgui.Create( "DButton", GUI_ViewPlayerPanel )
	GUI_TakeMoneyBtn:SetSize( scr_w * 0.123, scr_h * 0.045 )
	GUI_TakeMoneyBtn:SetPos( scr_w * 0.134, scr_h * 0.235 )
	GUI_TakeMoneyBtn:SetText( "" )
	GUI_TakeMoneyBtn.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.LightGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Take Money" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_TakeMoneyBtn.DoClick = function()
		if not tonumber( GUI_TextField:GetValue() ) or tonumber( GUI_TextField:GetValue() ) <= 0 then
			return
		end
		
		net.Start( "CH_ATM_Net_AdminTakeMoney" )
			net.WriteEntity( target_ply )
			net.WriteUInt( GUI_TextField:GetValue(), 32 )
		net.SendToServer()
		
		GUI_ViewPlayerMenu:Remove()
	end
	
	-- Reset Level
	local GUI_ResetLevelBtn = vgui.Create( "DButton", GUI_ViewPlayerPanel )
	GUI_ResetLevelBtn:SetSize( scr_w * 0.123, scr_h * 0.045 )
	GUI_ResetLevelBtn:SetPos( scr_w * 0.2625, scr_h * 0.235 )
	GUI_ResetLevelBtn:SetText( "" )
	GUI_ResetLevelBtn.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_ATM.Colors.GMSBlue )
		else
			surface.SetDrawColor( CH_ATM.Colors.LightGray )
		end
		surface.DrawRect( 0, 0, w, h )
		
		draw.SimpleText( CH_ATM.LangString( "Reset Level" ), "CH_ATM_Font_ATMScreen_Size25", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_ResetLevelBtn.DoClick = function()
		net.Start( "CH_ATM_Net_AdminResetAccountLevel" )
			net.WriteEntity( target_ply )
		net.SendToServer()
		
		GUI_ViewPlayerMenu:Remove()
	end
end )
--addons/ch_atm/lua/ch_atm/client/ch_atm_leaderboard.lua:
return gluapack()()
--addons/darkrpbankrobbery2/lua/autorun/ch_bank_initialize.lua:
return gluapack()()
--addons/ch_bitminers/lua/ch_bitminers/shared/bitminers_config_crypto_integration.lua:
-- CRYPTO CURRENCIES BY CRAP-HEAD
-- This will overwrite the bitcoin rate used in this addon.
-- It will also withdraw your mined bitcoins to your crypto wallet instead of paying out in darkrp money immediately.
-- ONLY ENABLE THIS IF YOU OWN https://www.gmodstore.com/market/view/718716878256570370
CH_Bitminers.Config.IntegrateCryptoCurrencies = false

-- Which crypto should we mine by default? It's important that you have this in your cryptos configuration!
CH_Bitminers.Config.DefaultCryptoToMine = "BTC"

-- How many dollars should we mine on each interval in USD?
-- This will be converted to the respective crypto that we're mining.
CH_Bitminers.Config.IntegrateCryptoDefaultMinedPer = 100

-- How many USD are mined on each interval based on their usergroup.
-- This will be converted to the respective crypto that we're mining.
CH_Bitminers.Config.IntegrateCryptoMinedPer = {
	["vip"] = 200,
	["gold_member"] = 300,
	["admin"] = 400,
	["superadmin"] = 500,
	["owner"] = 600,
}
--addons/ch_bitminers/lua/ch_bitminers/shared/bitminers_config_lang.lua:
return gluapack()()
--addons/ch_bitminers/lua/ch_bitminers/shared/bitminers_util.lua:
local PMETA = FindMetaTable( "Player" )

--[[
	Meta function to get max miners for a player
--]]
function PMETA:CH_BITMINERS_GetMaxMiners()
	return CH_Bitminers.Config.MaxBitminersInstalled[ self:GetUserGroup() ] or 16
end

--[[
	Language functions
--]]
local function CH_Bitminers_GetLang()
	local lang = CH_Bitminers.Config.Language or "en"

	return lang
end

function CH_Bitminers.LangString( text )
	local translation = text .." (Translation missing)"
	
	if CH_Bitminers.Config.Lang[ text ] then
		translation = CH_Bitminers.Config.Lang[ text ][ CH_Bitminers_GetLang() ]
	end
	
	return translation
end
--addons/ch_mayor/lua/ch_adv_mayor/shared/config/upgrades/upgrade_paycheck.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/ch_mayor_laws.lua:
CH_Mayor.Laws = CH_Mayor.Laws or {}

--[[
	Code elements inspired from DarkRP source code
	Credits: https://github.com/FPtje/DarkRP/search?q=addLaw
--]]

--[[
	When a law is added via darkrps usual chat commands we write it to our table.
--]]
function CH_Mayor.LawAdded( num, law )
	law = DarkRP.textWrap( law, "CH_Mayor_Font_3D2D_50", 1340 )
	
	table.insert( CH_Mayor.Laws, law )
end
hook.Add( "addLaw", "CH_Mayor.LawAdded", CH_Mayor.LawAdded )

--[[
	When a law is removed via darkrps usual chat commands we remove it from our table.
--]]
function CH_Mayor.LawRemoved( num, law )
	table.remove( CH_Mayor.Laws, num )
end
hook.Add( "removeLaw", "CH_Mayor.LawRemoved", CH_Mayor.LawRemoved )

--[[
	When laws are reset we also empty our table.
--]]
function CH_Mayor.LawsReset()
	CH_Mayor.Laws = {}

	for k, v in ipairs( GAMEMODE.Config.DefaultLaws ) do
		CH_Mayor.LawAdded( 0, v )
	end
end
hook.Add( "resetLaws", "CH_Mayor.LawsReset", CH_Mayor.LawsReset )

--[[
	Allow us to reset laws from server -> client when mayor is demoted/leaves
	Called in ch_mayor_hooks.lua when player leaves/is demoted from mayor.
--]]
net.Receive( "CH_Mayor_Net_ResetLaws", function()
	CH_Mayor.LawsReset()
end )

--[[
	Allows us to add laws to the clients own table when they join first time
--]]
net.Receive( "CH_Mayor_Net_AddLaw", function()
	local law = net.ReadString()
	
	hook.Run( "addLaw", 0, law )
end )

--[[
	Print all laws
--]]
net.Receive( "CH_Mayor_Net_PrintLaws", function()
	for k, v in ipairs( CH_Mayor.Laws ) do
		chat.AddText( Color( 152, 0, 0 ), k ..". ", color_white, v )
	end
end )
--addons/ch_mayor/lua/ch_adv_mayor/client/ch_mayor_robbery.lua:
CH_Mayor.Vault = CH_Mayor.Vault or {}

net.Receive( "CH_Mayor_RestartCooldown", function( length, ply )
	local cooldowntime = CH_Mayor.Config.RobberyCooldownTime * 60
	
	CH_Mayor.Vault.Cooldown = CurTime() + cooldowntime
end )

net.Receive( "CH_Mayor_StopCooldown", function( length, ply )
	CH_Mayor.Vault.Cooldown = 0
end )

net.Receive( "CH_Mayor_RestartTimer", function( length, ply )
	local countdowntime = CH_Mayor.Config.RobberyAliveTime * 60
	local cur_time = CurTime()
	
	CH_Mayor.Vault.Countdown = cur_time + countdowntime
end )

net.Receive( "CH_Mayor_StopTimer", function( length, ply )
	CH_Mayor.Vault.Countdown = 0
end )
--addons/ch_mayor/lua/ch_adv_mayor/client/ch_mayor_upgrades.lua:
CH_Mayor.UpgradeLevels = {}

net.Receive( "CH_Mayor_Net_NetworkUpgradeLevels", function( len, ply )
	local amount_of_entries = net.ReadUInt( 6 )
	
	for i = 1, amount_of_entries do
		local name = net.ReadString()
		local level = net.ReadUInt( 6 )
		
		CH_Mayor.UpgradeLevels[ name ] = level
	end
end )
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_dashboard.lua:
--[[
	MAYOR DASHBOARD MENU
--]]
function CH_Mayor.DashboardMenu()
	local ply = LocalPlayer()

	local GUI_DashboardFrame = vgui.Create( "DFrame" )
	GUI_DashboardFrame:SetTitle( "" )
	GUI_DashboardFrame:SetSize( CH_Mayor.ScrW * 0.6, CH_Mayor.ScrH * 0.665 )
	GUI_DashboardFrame:Center()
	GUI_DashboardFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "City Management" ), "CH_Mayor_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrame:MakePopup()
	GUI_DashboardFrame:SetDraggable( false )
	GUI_DashboardFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_CloseMenu:SetPos( CH_Mayor.ScrW * 0.582, CH_Mayor.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.Red or color_white )
		surface.SetMaterial( CH_Mayor.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_DashboardFrame:Remove()
	end

	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Dashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Dashboard" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.DashboardMenu()
	end

	local GUI_UpgradesFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_UpgradesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_UpgradesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.095 )
	GUI_UpgradesFrameBtn:SetText( "" )
	GUI_UpgradesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Upgrades )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Upgrades" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_UpgradesFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.UpgradesMenu()
	end
	
	local GUI_TaxesFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_TaxesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_TaxesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.1425 )
	GUI_TaxesFrameBtn:SetText( "" )
	GUI_TaxesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Taxes )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Taxes" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TaxesFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.TaxesMenu()
	end

	local GUI_CatalogFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_CatalogFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CatalogFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.19 )
	GUI_CatalogFrameBtn:SetText( "" )
	GUI_CatalogFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Catalog )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Catalog" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CatalogFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.CatalogMenu()
	end
	
	local GUI_LawsFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_LawsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LawsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.2375 )
	GUI_LawsFrameBtn:SetText( "" )
	GUI_LawsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Laws )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Laws" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LawsFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.LawsMenu()
	end
	
	local GUI_LicensesFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_LicensesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LicensesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.285 )
	GUI_LicensesFrameBtn:SetText( "" )
	GUI_LicensesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Licenses )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Licenses" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LicensesFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.LicensesMenu( )
	end
	
	local GUI_OfficialsManagementFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_OfficialsManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_OfficialsManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.3325 )
	GUI_OfficialsManagementFrameBtn:SetText( "" )
	GUI_OfficialsManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_OfficialsManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Officials" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OfficialsManagementFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.OfficialsMenu()
	end
	
	local GUI_CiviliansManagementFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_CiviliansManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.38 )
	GUI_CiviliansManagementFrameBtn:SetText( "" )
	GUI_CiviliansManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_CivilianManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Civilians" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansManagementFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.CiviliansMenu()
	end
	
	local GUI_WantedFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_WantedFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WantedFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.4275 )
	GUI_WantedFrameBtn:SetText( "" )
	GUI_WantedFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Wanted )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Wanted" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WantedFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.WantedMenu()
	end
	
	local GUI_WarrantFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_WarrantFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WarrantFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.475 )
	GUI_WarrantFrameBtn:SetText( "" )
	GUI_WarrantFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Warrant )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Warrant" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WarrantFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.WarrantMenu()
	end
	
	local GUI_AnnouncementFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_AnnouncementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_AnnouncementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.5225 )
	GUI_AnnouncementFrameBtn:SetText( "" )
	GUI_AnnouncementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Announcement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Announcement" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_AnnouncementFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.AnnouncementMenu()
	end
	
	local GUI_LockdownFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_LockdownFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LockdownFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.57 )
	GUI_LockdownFrameBtn:SetText( "" )
	GUI_LockdownFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Lockdown )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Lockdown" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LockdownFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.LockdownMenu()
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_DashboardFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.6175 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Economy )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Statistics" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_DashboardFrame:Remove()
		
		CH_Mayor.StatisticsMenu()
	end
	
	-- The dashboard panel
	local total_players = player.GetCount()
	local total_gov = CH_Mayor.GetGovCount()
	
	local GUI_DashboardPanel = vgui.Create( "DPanel", GUI_DashboardFrame )
	GUI_DashboardPanel:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.6 )
	GUI_DashboardPanel:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.0475 )
	GUI_DashboardPanel.Paint = function( self, w, h )
		-- Background
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		-- Top box with info
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.146 )
		
		surface.SetFont( "CH_Mayor_Font_Size14" )
		local welcome_back = CH_Mayor.LangString( "Welcome back" ) ..", ".. ply:Nick()
		local x, y = surface.GetTextSize( welcome_back )

		draw.SimpleText( welcome_back, "CH_Mayor_Font_Size14", w * 0.01, h * 0.04, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "This is your mayoral dashboard. You manage your city from here." ), "CH_Mayor_Font_Size9", w * 0.01, h * 0.1, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.WavingHand )
		surface.DrawTexturedRect( w * 0.01 + ( x + CH_Mayor.ScrW * 0.005 ), h * 0.0225, 28, 28 )
		
		-- City vault
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, h * 0.1575, w * 0.3275, h * 0.227 )
		
		draw.SimpleText( CH_Mayor.LangString( "City Funds" ), "CH_Mayor_Font_Size12", w * 0.165, h * 0.2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		draw.SimpleText( DarkRP.formatMoney( CH_Mayor.VaultMoney ), "CH_Mayor_Font_Size12", w * 0.165, h * 0.27, CH_Mayor.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		draw.SimpleText( CH_Mayor.LangString( "Maximum" ) ..": ".. DarkRP.formatMoney( CH_Mayor.MaxVaultMoney ), "CH_Mayor_Font_Size10", w * 0.165, h * 0.335, CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Total govs
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( w * 0.336, h * 0.1575, w * 0.3275, h * 0.227 )
		
		draw.SimpleText( CH_Mayor.LangString( "Government Officials" ), "CH_Mayor_Font_Size12", w * 0.5, h * 0.2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		draw.SimpleText( total_gov .." ".. CH_Mayor.LangString( "On-Duty" ), "CH_Mayor_Font_Size12", w * 0.5, h * 0.27, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( w * 0.6725, h * 0.1575, w * 0.3275, h * 0.227 )
		
		draw.SimpleText( CH_Mayor.LangString( "City Residents" ), "CH_Mayor_Font_Size12", w * 0.835, h * 0.2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		draw.SimpleText( total_players .." ".. CH_Mayor.LangString( "Online" ), "CH_Mayor_Font_Size12", w * 0.835, h * 0.27, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	
	if CH_Mayor.Config.EnableDeposit then
		local GUI_DepositPanel = vgui.Create( "DPanel", GUI_DashboardPanel )
		GUI_DepositPanel:SetSize( CH_Mayor.ScrW * 0.24125, CH_Mayor.ScrH * 0.182 )
		GUI_DepositPanel:SetPos( 0, CH_Mayor.ScrH * 0.238 )
		GUI_DepositPanel.Paint = function( self, w, h )
			-- Background
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			draw.SimpleText( CH_Mayor.LangString( "You have deposited" ) .." ".. DarkRP.formatMoney( CH_Mayor.DepositAmount ) .." ".. CH_Mayor.LangString( "out of" ) .." ".. DarkRP.formatMoney( CH_Mayor.DepositLimit ), "CH_Mayor_Font_Size10", w * 0.5, h * 0.15, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			draw.SimpleText( "$", "CH_Mayor_Font_Size18", w * 0.295, h * 0.43, CH_Mayor.Colors.Green, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
			surface.SetDrawColor( CH_Mayor.Colors.WhiteAlpha2 )
			surface.DrawRect( w * 0.3, h * 0.57, w * 0.4, h * 0.02 )
		end
		
		local GUI_DepositTextField = vgui.Create( "DTextEntry", GUI_DepositPanel )
		GUI_DepositTextField:SetPos( CH_Mayor.ScrW * 0.083, CH_Mayor.ScrH * 0.06 )
		GUI_DepositTextField:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
		GUI_DepositTextField:SetFont( "CH_Mayor_Font_Size18" )
		GUI_DepositTextField:SetTextColor( CH_Mayor.Colors.Green )
		GUI_DepositTextField:SetValue( 0 )
		GUI_DepositTextField:SetAllowNonAsciiCharacters( CH_Mayor.Config.UsingSetAllowNonAsciiCharacters ) -- When allowing non-ASCII characters, a small box appears inside the text entry, indicating your keyboard's current language.  That makes the user unable to input some letters from German, French, Swedish, etc. alphabet. 
		GUI_DepositTextField:SetMultiline( false )
		GUI_DepositTextField:SetNumeric( true )
		GUI_DepositTextField:SetDrawBackground( false )
		
		local GUI_DepositMoneyBtn = vgui.Create( "DButton", GUI_DepositPanel )
		GUI_DepositMoneyBtn:SetSize( CH_Mayor.ScrW * 0.125, CH_Mayor.ScrH * 0.04 )
		GUI_DepositMoneyBtn:SetPos( CH_Mayor.ScrW * 0.0575, CH_Mayor.ScrH * 0.1275 )
		GUI_DepositMoneyBtn:SetText( "" )
		GUI_DepositMoneyBtn.Paint = function( self, w, h )
			if self:IsHovered() then
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
			
				surface.SetDrawColor( CH_Mayor.DepositAmount < CH_Mayor.DepositLimit and CH_Mayor.Colors.Green or CH_Mayor.Colors.Red )
				surface.DrawRect( 0, 0, w, 1 )
				surface.DrawRect( 0, h-1, w, 1 )
				surface.DrawRect( w-1, 0, 1, h )
				surface.DrawRect( 0, 0, 1, h )
			else
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( CH_Mayor.DepositAmount < CH_Mayor.DepositLimit and CH_Mayor.Colors.Green or CH_Mayor.Colors.Red )
				surface.DrawRect( 0, 0, 1, 10 )
				surface.DrawRect( 0, 0, 10, 1 )
				surface.DrawRect( 0, h-10, 1, 10 )
				surface.DrawRect( 0, h-1, 10, 1 )
				surface.DrawRect( w-1, 0, 1, 10 )
				surface.DrawRect( w-10, 0, 10, 1 )
				surface.DrawRect( w-1, h-10, 1, 10 )
				surface.DrawRect( w-10, h-1, 10, 1 )
			end
			
			draw.SimpleText( CH_Mayor.LangString( "Deposit" ) .." ".. DarkRP.formatMoney( tonumber( GUI_DepositTextField:GetValue() ) ), "CH_Mayor_Font_Size9", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
		GUI_DepositMoneyBtn.DoClick = function()
			local amount = tonumber( GUI_DepositTextField:GetValue() )
		
			if not amount or amount <= 0 then
				ply:ChatPrint( "You must supply a number higher than 0" )
				
				surface.PlaySound( "common/wpn_denyselect.wav" )
				return
			end
			
			net.Start( "CH_Mayor_Net_DepositMoneyVault" )
				net.WriteUInt( amount, 32 )
			net.SendToServer()
			
			GUI_DashboardFrame:Remove()
		end
	end
	
	if CH_Mayor.Config.EnableWithdraw then
		local GUI_WithdrawPanel = vgui.Create( "DPanel", GUI_DashboardPanel )
		GUI_WithdrawPanel:SetSize( CH_Mayor.ScrW * 0.24125, CH_Mayor.ScrH * 0.182 )
		GUI_WithdrawPanel:SetPos( CH_Mayor.ScrW * 0.24575, CH_Mayor.ScrH * 0.238 )
		GUI_WithdrawPanel.Paint = function( self, w, h )
			-- Background
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			draw.SimpleText( CH_Mayor.LangString( "You have withdrawn" ) .." ".. DarkRP.formatMoney( CH_Mayor.WithdrawAmount ) .." ".. CH_Mayor.LangString( "out of" ) .." ".. DarkRP.formatMoney( CH_Mayor.WithdrawLimit ), "CH_Mayor_Font_Size10", w * 0.5, h * 0.15, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			draw.SimpleText( "$", "CH_Mayor_Font_Size18", w * 0.295, h * 0.43, CH_Mayor.Colors.Green, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
			surface.SetDrawColor( CH_Mayor.Colors.WhiteAlpha2 )
			surface.DrawRect( w * 0.3, h * 0.57, w * 0.4, h * 0.02 )
		end
		
		local GUI_WithdrawTextField = vgui.Create( "DTextEntry", GUI_WithdrawPanel )
		GUI_WithdrawTextField:SetPos( CH_Mayor.ScrW * 0.083, CH_Mayor.ScrH * 0.06 )
		GUI_WithdrawTextField:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
		GUI_WithdrawTextField:SetFont( "CH_Mayor_Font_Size18" )
		GUI_WithdrawTextField:SetTextColor( CH_Mayor.Colors.Green )
		GUI_WithdrawTextField:SetValue( 0 )
		GUI_WithdrawTextField:SetAllowNonAsciiCharacters( CH_Mayor.Config.UsingSetAllowNonAsciiCharacters ) -- When allowing non-ASCII characters, a small box appears inside the text entry, indicating your keyboard's current language.  That makes the user unable to input some letters from German, French, Swedish, etc. alphabet. 
		GUI_WithdrawTextField:SetMultiline( false )
		GUI_WithdrawTextField:SetNumeric( true )
		GUI_WithdrawTextField:SetDrawBackground( false )
		
		local GUI_WithdrawMoneyBtn = vgui.Create( "DButton", GUI_WithdrawPanel )
		GUI_WithdrawMoneyBtn:SetSize( CH_Mayor.ScrW * 0.125, CH_Mayor.ScrH * 0.04 )
		GUI_WithdrawMoneyBtn:SetPos( CH_Mayor.ScrW * 0.0575, CH_Mayor.ScrH * 0.1275 )
		GUI_WithdrawMoneyBtn:SetText( "" )
		GUI_WithdrawMoneyBtn.Paint = function( self, w, h )
			if self:IsHovered() then
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
			
				surface.SetDrawColor( CH_Mayor.WithdrawAmount < CH_Mayor.WithdrawLimit and CH_Mayor.Colors.Green or CH_Mayor.Colors.Red )
				surface.DrawRect( 0, 0, w, 1 )
				surface.DrawRect( 0, h-1, w, 1 )
				surface.DrawRect( w-1, 0, 1, h )
				surface.DrawRect( 0, 0, 1, h )
			else
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( CH_Mayor.WithdrawAmount < CH_Mayor.WithdrawLimit and CH_Mayor.Colors.Green or CH_Mayor.Colors.Red )
				surface.DrawRect( 0, 0, 1, 10 )
				surface.DrawRect( 0, 0, 10, 1 )
				surface.DrawRect( 0, h-10, 1, 10 )
				surface.DrawRect( 0, h-1, 10, 1 )
				surface.DrawRect( w-1, 0, 1, 10 )
				surface.DrawRect( w-10, 0, 10, 1 )
				surface.DrawRect( w-1, h-10, 1, 10 )
				surface.DrawRect( w-10, h-1, 10, 1 )
			end
			
			draw.SimpleText( CH_Mayor.LangString( "Withdraw" ) .." ".. DarkRP.formatMoney( tonumber( GUI_WithdrawTextField:GetValue() ) ), "CH_Mayor_Font_Size9", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
		GUI_WithdrawMoneyBtn.DoClick = function()
			local amount = tonumber( GUI_WithdrawTextField:GetValue() )
		
			if amount <= 0 then
				ply:ChatPrint( "You must supply a number higher than 0" )
				
				surface.PlaySound( "common/wpn_denyselect.wav" )
				return
			end
			
			net.Start( "CH_Mayor_Net_WithdrawMoneyVault" )
				net.WriteUInt( amount, 32 )
			net.SendToServer()
			
			GUI_DashboardFrame:Remove()
		end
	end
	
	if CH_Mayor and CH_Mayor.Economy then
		local GUI_EconomyDLCBtn = vgui.Create( "DButton", GUI_DashboardFrame )
		GUI_EconomyDLCBtn:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.0875 )
		GUI_EconomyDLCBtn:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.57 )
		GUI_EconomyDLCBtn:SetText( "" )
		GUI_EconomyDLCBtn.Paint = function( self, w, h )
			if self:IsHovered() then
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 0, 0, w, h )
			
				surface.SetDrawColor( CH_Mayor.Colors.Green )
				surface.DrawRect( 0, 0, w, 1 )
				surface.DrawRect( 0, h-1, w, 1 )
				surface.DrawRect( w-1, 0, 1, h )
				surface.DrawRect( 0, 0, 1, h )
			else
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( CH_Mayor.Colors.Green )
				surface.DrawRect( 0, 0, 1, 10 )
				surface.DrawRect( 0, 0, 10, 1 )
				surface.DrawRect( 0, h-10, 1, 10 )
				surface.DrawRect( 0, h-1, 10, 1 )
				surface.DrawRect( w-1, 0, 1, 10 )
				surface.DrawRect( w-10, 0, 10, 1 )
				surface.DrawRect( w-1, h-10, 1, 10 )
				surface.DrawRect( w-10, h-1, 10, 1 )
			end

			draw.SimpleText( CH_Mayor.LangString( "Economy Centre" ), "CH_Mayor_Font_Size18", w / 2, h * 0.45, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
		GUI_EconomyDLCBtn.DoClick = function()
			CH_Mayor.Economy.DashboardMenu()
			
			GUI_DashboardFrame:Remove()
		end
	end
end
--addons/ch_mining/lua/autorun/ch_mining_initialize.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/shared/config/ch_mining_config_crafting.lua:
CH_Mining.Crafting = CH_Mining.Crafting or {}

--[[
    READ THIS ARTICLE HOW TO EDIT THIS FILE

    https://www.gmodstore.com/help/addon/mining/configuration-16/topics/crafting
--]]
CH_Mining.Crafting["item_scar"] = { -- item_scar falan
    Name = "Scar", -- gozukecegi ismi
    Model = "models/weapons/arccw/c_uc_myt_scar.mdl", -- modeli
    Description = "Tam otomatik SCAR model gelişmiş taaruz tüfeği.", -- silah aciklamasi
    MineralsCost = { -- mineralleri
        ["Ruby"] = 1000, 
        ["Iron"] = 1000,
        ["Diamond"] = 820,
        ["Emerald"] = 450,
    },
    RequiredLevel = 13, -- geerekli level
    XPCost = 1, -- harcayaci xp bunu cok fazla tutmayin
    XPEarn = 50, -- ureticinde
    MoneyCost = 400000,
    CustomCheck = function( ply )
        return not ply:HasWeapon( "arccw_myt_uc_scar" )
    end,
    CustomCheckFailMessage = "Bu silah zaten üzerinde var, bu yüzden dolayı üretemezsin.",
    BuyFunction = function( ply )
        ply:Give( "arccw_myt_uc_scar" )
    end,
}

CH_Mining.Crafting["item_akm"] = { -- item_scar falan
    Name = "AKM", -- gozukecegi ismi
    Model = "models/weapons/arccw/c_ur_ak.mdl", -- modeli
    Description = "Tam otomatik AKM model gelişmiş taaruz tüfeği.", -- silah aciklamasi
    MineralsCost = { -- mineralleri
        ["Stone"] = 1000,
        ["Iron"] = 350,
        ["Diamond"] = 250,
        ["Rare"] = 200,
        ["Emerald"] = 150,
        ["Ruby"] = 174,
    },
    RequiredLevel = 8, -- geerekli level
    XPCost = 1, -- harcayaci xp bunu cok fazla tutmayin
    XPEarn = 200, -- ureticinde
    MoneyCost = 200000,
    CustomCheck = function( ply )
        return not ply:HasWeapon( "arccw_ur_ak" )
    end,
    CustomCheckFailMessage = "Bu silah zaten üzerinde var, bu yüzden dolayı üretemezsin.",
    BuyFunction = function( ply )
        ply:Give( "arccw_ur_ak" )
    end,
}

CH_Mining.Crafting["item_mini14"] = { -- item_scar falan
    Name = "Mini-14", -- gozukecegi ismi
    Model = "models/weapons/arccw/c_ud_mini14.mdl", -- modeli
    Description = "Yarı otomatik Mini-14 model yüksek kalibre tüfek", -- silah aciklamasi
    MineralsCost = { -- mineralleri
        ["Iron"] = 300,
        ["Diamond"] = 100,
        ["Rare"] = 130,
        ["Gold"] = 130,
    },
    RequiredLevel = 5, -- geerekli level
    XPCost = 1, -- harcayaci xp bunu cok fazla tutmayin
    XPEarn = 150, -- ureticinde
    MoneyCost = 100000,
    CustomCheck = function( ply )
        return not ply:HasWeapon( "arccw_ud_mini14" )
    end,
    CustomCheckFailMessage = "Bu silah zaten üzerinde var, bu yüzden dolayı üretemezsin.",
    BuyFunction = function( ply )
        ply:Give( "arccw_ud_mini14" )
    end,
}

CH_Mining.Crafting["item_g3"] = { -- item_scar falan
    Name = "G3A3", -- gozukecegi ismi
    Model = "models/weapons/arccw/c_ur_g3.mdl", -- modeli
    Description = "Tam otomatik G3A3 model taktiksel taaruz tüfeği", -- silah aciklamasi
    MineralsCost = { -- mineralleri
        ["Iron"] = 1024,
        ["Diamond"] = 642,
        ["Rare"] = 1000,
        ["Gold"] = 550,
        ["Emerald"] = 350,
    },
    RequiredLevel = 15, -- geerekli level
    XPCost = 1, -- harcayaci xp bunu cok fazla tutmayin
    XPEarn = 150, -- ureticinde
    MoneyCost = 550000,
    CustomCheck = function( ply )
        return not ply:HasWeapon( "arccw_ur_g3" )
    end,
    CustomCheckFailMessage = "Bu silah zaten üzerinde var, bu yüzden dolayı üretemezsin.",
    BuyFunction = function( ply )
        ply:Give( "arccw_ur_g3" )
    end,
}
--addons/ch_mining/lua/ch_mining/shared/config/ch_mining_config_skills.lua:
CH_Mining.Skills = CH_Mining.Skills or {}
CH_Mining.Skills["Capacity"] = {
	Name = "Kapasite",
	Icon = Material( "materials/craphead_scripts/mining/gui/skills/capacity.png", "noclamp smooth" ),
	Description = "Madencilik envanter kapasitenizi artırın.",
	Levels = {
		[0] = 800,
		[1] = 1200,
		[2] = 1500,
		[3] = 1800,
		[4] = 2200,
		[5] = 2550,
		[6] = 2700,
		[7] = 3000,
		[8] = 3500,
		[9] = 4000,
		[10] = 4500,
	},
}

CH_Mining.Skills["Extraction"] = {
	Name = "Çıkarma",
	Icon = Material( "materials/craphead_scripts/mining/gui/skills/extraction.png", "noclamp smooth" ),
	Description = "Her vuruşta elde ettiğiniz mineral miktarını artırın.",
	Levels = {
		[0] = { 1, 1 },
		[1] = { 1, 2 },
		[2] = { 2, 3 },
		[3] = { 4, 5 },
		[4] = { 6, 7 },
		[5] = { 8, 9 },
	},
}

CH_Mining.Skills["Experience"] = {
	Name = "Deneyim",
	Icon = Material( "materials/craphead_scripts/mining/gui/skills/experience.png", "noclamp smooth" ),
	Description = "Her vuruşta kazandığınız deneyim miktarını artırın.",
	Levels = {
		[0] = { 1, 3 },
		[1] = { 4, 6 },
		[2] = { 7, 9 },
		[3] = { 10, 12 },
		[4] = { 13, 15 },
		[5] = { 16, 18 },
	},
}

CH_Mining.Skills["Speed"] = {
	Name = "Hız",
	Icon = Material( "materials/craphead_scripts/mining/gui/skills/speed.png", "noclamp smooth" ),
	Description = "Kazmanızın daha hızlı sallanmasını sağlayın.",
	Levels = {
		[0] = 3,
		[1] = 2.7,
		[2] = 2.3,
		[3] = 2,
		[4] = 1.7,
		[5] = 1.5,
	},
}

CH_Mining.Skills["Payout"] = {
	Name = "Payout",
	Icon = Material( "materials/craphead_scripts/mining/gui/skills/payout.png", "noclamp smooth" ),
	Description = "Increases how much the NPC pays you for minerals.", -- percentage increase
	Levels = {
		[0] = 0,
		[1] = 0,
		[2] = 0,
		[3] = 0,
		[4] = 0,
		[5] = 0,
	},
}

CH_Mining.Skills["Chance"] = {
	Name = "Şans",
	Icon = Material( "materials/craphead_scripts/mining/gui/skills/chance.png", "noclamp smooth" ),
	Description = "Başarılı bir vuruş yapma şansınızı artırır.", -- varsayılan şans %50 olup bu oran artar
	Levels = {
		[0] = 30,
		[1] = 40,
		[2] = 50,
		[3] = 60,
		[4] = 70,
		[5] = 80,
	},
}
--addons/ch_mining/lua/ch_mining/shared/currencies/pointshop2_premium.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/shared/currencies/sh_pointshop_premium.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/client/ch_mining_fonts.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/client/ch_mining_hud.lua:
CreateClientConVar( "CH_Mining_DrawMiningInventory", "1", true, false, "Should the players mining inventory be displayed on the HUD when pickaxe or jackhammer is equipped?", 0, 1 )
CreateClientConVar( "CH_Mining_DrawMiningLevel", "1", true, false, "Should the players mining xp and level be displayed on the HUD when pickaxe or jackhammer is equipped?", 0, 1 )

CreateClientConVar( "CH_Mining_InventoryHUD_X", CH_Mining.Config.InventoryXPos, true, false, "Set the X position of the inventory HUD on the players screen", 0, 1 )
CreateClientConVar( "CH_Mining_InventoryHUD_Y", CH_Mining.Config.InventoryYPos, true, false, "Set the Y position of the inventory HUD on the players screen", 0, 1 )

CreateClientConVar( "CH_Mining_LevelHUD_X", CH_Mining.Config.LevelXPos, true, false, "Set the X position of the level HUD on the players screen", 0, 1 )
CreateClientConVar( "CH_Mining_LevelHUD_Y", CH_Mining.Config.LevelYPos, true, false, "Set the Y position of the inventory HUD on the players screen", 0, 1 )

local color_gold = CH_Mining.Rocks["Gold"].Color
local color_stone = CH_Mining.Rocks["Stone"].Color
local color_iron = CH_Mining.Rocks["Iron"].Color
local color_diamond = CH_Mining.Rocks["Diamond"].Color
local color_ruby = CH_Mining.Rocks["Ruby"].Color
local color_amethyst = CH_Mining.Rocks["Amethyst"].Color
local color_rare = CH_Mining.Rocks["Rare"].Color
local color_emerald = CH_Mining.Rocks["Emerald"].Color
local color_bloodstone = CH_Mining.Rocks["Bloodstone"].Color

local icon_size = 47

function CH_Mining.DrawMiningHUD()	
	-- Perform multiple checks
	local ply = LocalPlayer()
	
	if not IsValid( ply ) or not ply:Alive() then
		return
	end
	
	if not CH_Mining.Config.HUDShowTime then
		local active_wep = ply:GetActiveWeapon()
		if not IsValid( active_wep ) then
			return
		end
		
		if active_wep:GetClass() != "ch_mining_pickaxe" and active_wep:GetClass() != "ch_mining_pickaxe_afk" and active_wep:GetClass() != "ch_mining_jackhammer" then
			return
		end
	else
		if not ply.CH_Mining_ShowHUD or ply.CH_Mining_ShowHUD < CurTime() then
			return
		end
	end
	
	-- Check for CL var
	local should_show_inventory = GetConVar( "CH_Mining_DrawMiningInventory" ):GetInt()
	local should_show_level = GetConVar( "CH_Mining_DrawMiningLevel" ):GetInt()
	
	if should_show_inventory == 1 then
		if not ply.CH_Mining_Inventory then
			return
		end
		
		-- Setup vars
		local inv_pos_x = CH_Mining.ScrW * GetConVar( "CH_Mining_InventoryHUD_X" ):GetFloat()
		local inv_pos_y = CH_Mining.ScrH * GetConVar( "CH_Mining_InventoryHUD_Y" ):GetFloat()
		
		-- Draw bg, icons and inventory info
		surface.SetDrawColor( CH_Mining.Config.BGColor )
		surface.DrawRect( inv_pos_x, inv_pos_y, CH_Mining.ScrW * 0.1075, CH_Mining.ScrH * 0.455 )
		
		-- Gold
		surface.SetDrawColor( color_gold )
		surface.SetMaterial( CH_Mining.Materials.Diamond )
		surface.DrawTexturedRect( inv_pos_x + ( CH_Mining.ScrW * 0.005 ), inv_pos_y + ( CH_Mining.ScrH * 0.005 ), icon_size, icon_size )
		
		draw.SimpleTextOutlined( CH_Mining.LangString( "Gold" ), "CH_Mining_Font_Size9", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.0175 ), color_gold, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		draw.SimpleTextOutlined( string.Comma( ply.CH_Mining_Inventory["Gold"] ) .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size8", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.037 ), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		
		-- Stone
		surface.SetDrawColor( color_stone )
		surface.SetMaterial( CH_Mining.Materials.Diamond )
		surface.DrawTexturedRect( inv_pos_x + ( CH_Mining.ScrW * 0.005 ), inv_pos_y + ( CH_Mining.ScrH * 0.055 ), icon_size, icon_size )
		
		draw.SimpleTextOutlined( CH_Mining.LangString( "Stone" ), "CH_Mining_Font_Size9", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.0675 ), color_stone, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		draw.SimpleTextOutlined( string.Comma( ply.CH_Mining_Inventory["Stone"] ) .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size8", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.085 ), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		
		-- Iron
		surface.SetDrawColor( color_iron )
		surface.SetMaterial( CH_Mining.Materials.Diamond )
		surface.DrawTexturedRect( inv_pos_x + ( CH_Mining.ScrW * 0.005 ), inv_pos_y + ( CH_Mining.ScrH * 0.105 ), icon_size, icon_size )
		
		draw.SimpleTextOutlined( CH_Mining.LangString( "Iron" ), "CH_Mining_Font_Size9", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.1175 ), color_iron, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		draw.SimpleTextOutlined( string.Comma( ply.CH_Mining_Inventory["Iron"] ) .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size8", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.137 ), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		
		-- Diamond
		surface.SetDrawColor( color_diamond )
		surface.SetMaterial( CH_Mining.Materials.Diamond )
		surface.DrawTexturedRect( inv_pos_x + ( CH_Mining.ScrW * 0.005 ), inv_pos_y + ( CH_Mining.ScrH * 0.155 ), icon_size, icon_size )
		
		draw.SimpleTextOutlined( CH_Mining.LangString( "Diamond" ), "CH_Mining_Font_Size9", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.1675 ), color_diamond, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		draw.SimpleTextOutlined( string.Comma( ply.CH_Mining_Inventory["Diamond"] ) .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size8", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.185 ), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		
		-- Ruby
		surface.SetDrawColor( color_ruby )
		surface.SetMaterial( CH_Mining.Materials.Diamond )
		surface.DrawTexturedRect( inv_pos_x + ( CH_Mining.ScrW * 0.005 ), inv_pos_y + ( CH_Mining.ScrH * 0.205 ), icon_size, icon_size )
		
		draw.SimpleTextOutlined( CH_Mining.LangString( "Ruby" ), "CH_Mining_Font_Size9", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.2175 ), color_ruby, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		draw.SimpleTextOutlined( string.Comma( ply.CH_Mining_Inventory["Ruby"] ) .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size8", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.237 ), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		
		-- Amethyst
		surface.SetDrawColor( color_amethyst )
		surface.SetMaterial( CH_Mining.Materials.Diamond )
		surface.DrawTexturedRect( inv_pos_x + ( CH_Mining.ScrW * 0.005 ), inv_pos_y + ( CH_Mining.ScrH * 0.255 ), icon_size, icon_size )
		
		draw.SimpleTextOutlined( CH_Mining.LangString( "Amethyst" ), "CH_Mining_Font_Size9", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.2675 ), color_amethyst, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		draw.SimpleTextOutlined( string.Comma( ply.CH_Mining_Inventory["Amethyst"] ) .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size8", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.285 ), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		
		-- Rare
		surface.SetDrawColor( color_rare )
		surface.SetMaterial( CH_Mining.Materials.Diamond )
		surface.DrawTexturedRect( inv_pos_x + ( CH_Mining.ScrW * 0.005 ), inv_pos_y + ( CH_Mining.ScrH * 0.305 ), icon_size, icon_size )
		
		draw.SimpleTextOutlined( CH_Mining.LangString( "Rare" ), "CH_Mining_Font_Size9", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.3175 ), color_rare, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		draw.SimpleTextOutlined( string.Comma( ply.CH_Mining_Inventory["Rare"] ) .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size8", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.337 ), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		
		-- Emerald
		surface.SetDrawColor( color_emerald )
		surface.SetMaterial( CH_Mining.Materials.Diamond )
		surface.DrawTexturedRect( inv_pos_x + ( CH_Mining.ScrW * 0.005 ), inv_pos_y + ( CH_Mining.ScrH * 0.355 ), icon_size, icon_size )
		
		draw.SimpleTextOutlined( CH_Mining.LangString( "Emerald" ), "CH_Mining_Font_Size9", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.3675 ), color_emerald, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		draw.SimpleTextOutlined( string.Comma( ply.CH_Mining_Inventory["Emerald"] ) .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size8", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.385 ), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		
		-- Bloodstone
		surface.SetDrawColor( color_bloodstone )
		surface.SetMaterial( CH_Mining.Materials.Diamond )
		surface.DrawTexturedRect( inv_pos_x + ( CH_Mining.ScrW * 0.005 ), inv_pos_y + ( CH_Mining.ScrH * 0.405 ), icon_size, icon_size )
		
		draw.SimpleTextOutlined( CH_Mining.LangString( "Bloodstone" ), "CH_Mining_Font_Size9", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.4175 ), color_bloodstone, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
		draw.SimpleTextOutlined( string.Comma( ply.CH_Mining_Inventory["Bloodstone"] ) .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size8", inv_pos_x + ( CH_Mining.ScrW * 0.0325 ), inv_pos_y + ( CH_Mining.ScrH * 0.437 ), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, color_black )
	end
	
	if should_show_level == 1 then
		local xp_pos_x = CH_Mining.ScrW * GetConVar( "CH_Mining_LevelHUD_X" ):GetFloat()
		local xp_pos_y = CH_Mining.ScrH * GetConVar( "CH_Mining_LevelHUD_Y" ):GetFloat()
		
		-- xp vars
		local ply_xp = ply:CH_Mining_GetXP()
		local ply_xp_for_level = ply:CH_Mining_XPRequiredForLevel()
		
		-- Draw XP
		draw.SimpleTextOutlined( CH_Mining.LangString( "You have" ) .." ".. ply_xp .." / ".. ply_xp_for_level .." XP", "CH_Mining_Font_Size9", xp_pos_x, xp_pos_y, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 1, color_black )

		local size_of_bar = CH_Mining.ScrW * 0.3
		local size_per_xp = size_of_bar / ply_xp_for_level
		local bar_lenght = size_per_xp * ply_xp
		
		draw.RoundedBox( 3, xp_pos_x - ( CH_Mining.ScrW * 0.15 ), xp_pos_y + ( CH_Mining.ScrH * 0.014 ), bar_lenght, CH_Mining.ScrH * 0.0225, CH_Mining.Colors.GMSBlue )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.StripesBG )
		surface.DrawTexturedRect( xp_pos_x - ( CH_Mining.ScrW * 0.15 ), xp_pos_y + ( CH_Mining.ScrH * 0.015 ), size_of_bar, CH_Mining.ScrH * 0.0225 )
		
		draw.SimpleTextOutlined( math.floor( ply_xp / ply_xp_for_level * 100 ) .."%", "CH_Mining_Font_Size8", xp_pos_x, xp_pos_y + ( CH_Mining.ScrH * 0.0255 ), color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 1, color_black )
		
		draw.SimpleTextOutlined( CH_Mining.LangString( "You are level" ) .." ".. ply:CH_Mining_GetLevel(), "CH_Mining_Font_Size9", xp_pos_x, xp_pos_y + ( CH_Mining.ScrH * 0.05 ), color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 1, color_black )
	end
end
hook.Add( "HUDPaint", "CH_Mining.DrawMiningHUD", CH_Mining.DrawMiningHUD )
--addons/ch_mining/lua/ch_mining/client/ch_mining_prices.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/client/vgui/ch_mining_menu_crafting.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/client/vgui/ch_mining_menu_inventory.lua:
--[[
	INVENTORY MENU
--]]
function CH_Mining.InventoryMenu()
	local ply = LocalPlayer()

	local GUI_InventoryFrame = vgui.Create( "DFrame" )
	GUI_InventoryFrame:SetTitle( "" )
	GUI_InventoryFrame:SetSize( CH_Mining.ScrW * 0.6, CH_Mining.ScrH * 0.6875 )
	GUI_InventoryFrame:Center()
	GUI_InventoryFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mining.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mining.LangString( "Your Inventory" ), "CH_Mining_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_InventoryFrame:MakePopup()
	GUI_InventoryFrame:SetDraggable( false )
	GUI_InventoryFrame:ShowCloseButton( false )

	local GUI_CloseMenu = vgui.Create( "DButton", GUI_InventoryFrame )
	GUI_CloseMenu:SetPos( CH_Mining.ScrW * 0.582, CH_Mining.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( 24, 24 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.Red or color_white )
		surface.SetMaterial( CH_Mining.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mining.ScrW * 0.0125, CH_Mining.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_InventoryFrame:Remove()
	end
	
	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_InventoryFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuDashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Dashboard" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_InventoryFrame:Remove()
		
		CH_Mining.DashboardMenu()
	end

	local GUI_InventoryFrameBtn = vgui.Create( "DButton", GUI_InventoryFrame )
	GUI_InventoryFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_InventoryFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.095 )
	GUI_InventoryFrameBtn:SetText( "" )
	GUI_InventoryFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuInventory )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Inventory" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_InventoryFrameBtn.DoClick = function()
		GUI_InventoryFrame:Remove()
		
		CH_Mining.InventoryMenu()
	end
	
	local GUI_SkillsFrameBtn = vgui.Create( "DButton", GUI_InventoryFrame )
	GUI_SkillsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_SkillsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.1425 )
	GUI_SkillsFrameBtn:SetText( "" )
	GUI_SkillsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuSkills )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Skills" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_SkillsFrameBtn.DoClick = function()
		GUI_InventoryFrame:Remove()
		
		CH_Mining.SkillsMenu()
	end

	local GUI_CraftingFrameBtn = vgui.Create( "DButton", GUI_InventoryFrame )
	GUI_CraftingFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_CraftingFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.19 )
	GUI_CraftingFrameBtn:SetText( "" )
	GUI_CraftingFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuCrafting )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Crafting" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CraftingFrameBtn.DoClick = function()
		GUI_InventoryFrame:Remove()
		
		CH_Mining.CraftingMenu()
	end
	
	local GUI_TransactionsFrameBtn = vgui.Create( "DButton", GUI_InventoryFrame )
	GUI_TransactionsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_TransactionsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.2375 )
	GUI_TransactionsFrameBtn:SetText( "" )
	GUI_TransactionsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuTransactions )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Transactions" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TransactionsFrameBtn.DoClick = function()
		GUI_InventoryFrame:Remove()
		
		CH_Mining.TransactionsMenu()
	end
	
	local GUI_LeaderboardsFrameBtn = vgui.Create( "DButton", GUI_InventoryFrame )
	GUI_LeaderboardsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_LeaderboardsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.285 )
	GUI_LeaderboardsFrameBtn:SetText( "" )
	GUI_LeaderboardsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuLeaderboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Leaderboards" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LeaderboardsFrameBtn.DoClick = function()
		GUI_InventoryFrame:Remove()
		
		CH_Mining.LeaderboardsMenu( "MineralsMined" )
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_InventoryFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.3325 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuStats )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Statistics" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_InventoryFrame:Remove()
		
		CH_Mining.StatsMenu()
	end
	
	local GUI_OptionsFrameBtn = vgui.Create( "DButton", GUI_InventoryFrame )
	GUI_OptionsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_OptionsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.38 )
	GUI_OptionsFrameBtn:SetText( "" )
	GUI_OptionsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuOptions )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Options" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OptionsFrameBtn.DoClick = function()
		GUI_InventoryFrame:Remove()
		
		CH_Mining.OptionsMenu()
	end
	
	-- sell all button
	local GUI_SellAllBtn = vgui.Create( "DButton", GUI_InventoryFrame )
	GUI_SellAllBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_SellAllBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.64 )
	GUI_SellAllBtn:SetText( "" )
	GUI_SellAllBtn.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			surface.SetDrawColor( CH_Mining.Colors.Green )
			surface.DrawRect( 0, 0, w, 1 )
			surface.DrawRect( 0, h-1, w, 1 )
			surface.DrawRect( w-1, 0, 1, h )
			surface.DrawRect( 0, 0, 1, h )
		else
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			surface.SetDrawColor( CH_Mining.Colors.Green )
			surface.DrawRect( 0, 0, 1, 10 )
			surface.DrawRect( 0, 0, 10, 1 )
			surface.DrawRect( 0, h-10, 1, 10 )
			surface.DrawRect( 0, h-1, 10, 1 )
			surface.DrawRect( w-1, 0, 1, 10 )
			surface.DrawRect( w-10, 0, 10, 1 )
			surface.DrawRect( w-1, h-10, 1, 10 )
			surface.DrawRect( w-10, h-1, 10, 1 )
		end

		draw.SimpleText( CH_Mining.LangString( "Sell All Minerals" ), "CH_Mining_Font_Size8", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_SellAllBtn.DoClick = function()
		GUI_InventoryFrame:Remove()
		
		net.Start( "CH_Mining_Net_SellAllMinerals" )
		net.SendToServer()
	end
	
	local GUI_InventoryList = vgui.Create( "DPanelList", GUI_InventoryFrame )
	GUI_InventoryList:SetSize( CH_Mining.ScrW * 0.491, CH_Mining.ScrH * 0.635 )
	GUI_InventoryList:SetPos( CH_Mining.ScrW * 0.109, CH_Mining.ScrH * 0.0475 )
	GUI_InventoryList:EnableVerticalScrollbar( true )
	GUI_InventoryList:EnableHorizontal( true )
	GUI_InventoryList:SetSpacing( 7 )
	GUI_InventoryList.Paint = function( self, w, h )
		draw.RoundedBox( 0, 0, 0, w, h, color_transparent )
	end
	if ( GUI_InventoryList.VBar ) then
		GUI_InventoryList.VBar.Paint = function( self, w, h ) -- BG
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_InventoryList.VBar.btnUp.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_InventoryList.VBar.btnGrip.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_InventoryList.VBar.btnDown.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
	end
	
	for mineral, amount in pairs( ply.CH_Mining_Inventory ) do
		-- Cache some variables that doesn't have to be in the Paint hook
		local mineral_info = CH_Mining.Rocks[ mineral ]
		local mineral_prices = CH_Mining.MineralPrices[ mineral ]
		local mineral_worth = math.Round( amount * mineral_prices.Price )
		
		local price_change = mineral_prices.Change
		local price_change_color = CH_Mining.Colors.Green
		if price_change < 0 then
			price_change_color = CH_Mining.Colors.Red
		end
		local no_change = false

		-- Panel per mineral
		local GUI_InventoryPanel = vgui.Create( "DPanelList" )
		GUI_InventoryPanel:SetSize( CH_Mining.ScrW * 0.16, CH_Mining.ScrH * 0.2065 )
		GUI_InventoryPanel.Paint = function( self, w, h )
			-- Background
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			-- Mineral Icon
			surface.SetDrawColor( mineral_info.Color )
			surface.SetMaterial( CH_Mining.Materials.Diamond )
			surface.DrawTexturedRect( w * 0.05, h * 0.05, CH_Mining.ScrW * 0.03334, CH_Mining.ScrH * 0.05926 )

			-- Mineral name and stock
			draw.SimpleText( CH_Mining.LangString( mineral_info.Name ), "CH_Mining_Font_Size12", w * 0.3, h * 0.125, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			draw.SimpleText( string.Comma( amount ) .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size10", w * 0.3, h * 0.25, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

			-- Price per mineral
			surface.SetFont( "CH_Mining_Font_Size12" )
			local mineral_price = CH_Mining.FormatMoney( mineral_prices.Price )
			local x, y = surface.GetTextSize( mineral_price )
			draw.SimpleText( mineral_price, "CH_Mining_Font_Size12", w * 0.05, h * 0.46, CH_Mining.Colors.Green, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

			draw.SimpleText( CH_Mining.LangString( "per mineral" ), "CH_Mining_Font_Size8", w * 0.05 + ( x + CH_Mining.ScrW * 0.0025 ), h * 0.465, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			
			-- Change
			surface.SetFont( "CH_Mining_Font_Size10" )
			local x, y = surface.GetTextSize( price_change .."%" )
			surface.SetDrawColor( color_white )
			if price_change == 0 then
				no_change = true
			elseif price_change > 0 then
				surface.SetMaterial( CH_Mining.Materials.ArrowUpIcon )
			else
				surface.SetMaterial( CH_Mining.Materials.ArrowDownIcon )
			end
			if not no_change then
				surface.DrawTexturedRect( w * 0.05, h * 0.575, CH_Mining.ScrW * 0.01044, CH_Mining.ScrH * 0.01854 )
				draw.SimpleText( price_change .."%", "CH_Mining_Font_Size10", w * 0.14, h * 0.615, price_change_color, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( "--", "CH_Mining_Font_Size10", w * 0.14, h * 0.615, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			end
			
			draw.SimpleText( CH_Mining.LangString( "since update" ), "CH_Mining_Font_Size8", w * 0.14 + ( x + CH_Mining.ScrW * 0.0025 ), h * 0.625, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		end

		local GUI_SellMineralsBtn = vgui.Create( "DButton", GUI_InventoryPanel )
		GUI_SellMineralsBtn:SetSize( CH_Mining.ScrW * 0.0725, CH_Mining.ScrH * 0.0375 )
		GUI_SellMineralsBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.1625 )
		GUI_SellMineralsBtn:SetText( "" )
		GUI_SellMineralsBtn.Paint = function( self, w, h )
			if amount > 0 and self:IsHovered() then
				surface.SetDrawColor( CH_Mining.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( CH_Mining.Colors.Green )
				surface.DrawRect( 0, 0, w, 1 )
				surface.DrawRect( 0, h-1, w, 1 )
				surface.DrawRect( w-1, 0, 1, h )
				surface.DrawRect( 0, 0, 1, h )
			elseif amount > 0 then
				surface.SetDrawColor( CH_Mining.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( CH_Mining.Colors.Green )
				surface.DrawRect( 0, 0, 1, 10 )
				surface.DrawRect( 0, 0, 10, 1 )
				surface.DrawRect( 0, h-10, 1, 10 )
				surface.DrawRect( 0, h-1, 10, 1 )
				surface.DrawRect( w-1, 0, 1, 10 )
				surface.DrawRect( w-10, 0, 10, 1 )
				surface.DrawRect( w-1, h-10, 1, 10 )
				surface.DrawRect( w-10, h-1, 10, 1 )
			else
				surface.SetDrawColor( CH_Mining.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
			end
			
			if amount > 0 then
				draw.SimpleText( CH_Mining.LangString( "Sell Minerals" ), "CH_Mining_Font_Size8", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_Mining.LangString( "Sell Minerals" ), "CH_Mining_Font_Size8", w / 2, h / 2, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
		end
		GUI_SellMineralsBtn.DoClick = function()
			if amount <= 0 then
				surface.PlaySound( "common/wpn_denyselect.wav" )
				return
			end
		
			CH_Mining.SellMineralMenu( mineral )
			
			GUI_InventoryFrame:Remove()
		end
		
		local GUI_SendMineralsBtn = vgui.Create( "DButton", GUI_InventoryPanel )
		GUI_SendMineralsBtn:SetSize( CH_Mining.ScrW * 0.0725, CH_Mining.ScrH * 0.0375 )
		GUI_SendMineralsBtn:SetPos( CH_Mining.ScrW * 0.083, CH_Mining.ScrH * 0.1625 )
		GUI_SendMineralsBtn:SetText( "" )
		GUI_SendMineralsBtn.Paint = function( self, w, h )
			if amount > 0 and self:IsHovered() then
				surface.SetDrawColor( CH_Mining.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
				surface.DrawRect( 0, 0, w, 1 )
				surface.DrawRect( 0, h-1, w, 1 )
				surface.DrawRect( w-1, 0, 1, h )
				surface.DrawRect( 0, 0, 1, h )
			elseif amount > 0 then
				surface.SetDrawColor( CH_Mining.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
				surface.DrawRect( 0, 0, 1, 10 )
				surface.DrawRect( 0, 0, 10, 1 )
				surface.DrawRect( 0, h-10, 1, 10 )
				surface.DrawRect( 0, h-1, 10, 1 )
				surface.DrawRect( w-1, 0, 1, 10 )
				surface.DrawRect( w-10, 0, 10, 1 )
				surface.DrawRect( w-1, h-10, 1, 10 )
				surface.DrawRect( w-10, h-1, 10, 1 )
			else
				surface.SetDrawColor( CH_Mining.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
			end
			
			if amount > 0 then
				draw.SimpleText( CH_Mining.LangString( "Send Minerals" ), "CH_Mining_Font_Size8", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_Mining.LangString( "Send Minerals" ), "CH_Mining_Font_Size8", w / 2, h / 2, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
		end
		GUI_SendMineralsBtn.DoClick = function()
			if amount <= 0 then
				surface.PlaySound( "common/wpn_denyselect.wav" )
				return
			end
		
			CH_Mining.SendMineralMenu( mineral )
			
			GUI_InventoryFrame:Remove()
		end

		GUI_InventoryList:AddItem( GUI_InventoryPanel )
	end
end
--lua/autorun/egm_pm_kod_rebs.lua:
list.Set( "PlayerOptionsModel","EGM 01","models/rebs/egm/male_02.mdl" )
player_manager.AddValidModel( "EGM 01","models/rebs/egm/male_02.mdl" )

list.Set( "PlayerOptionsModel","EGM 02","models/rebs/egm/male_04.mdl" )
player_manager.AddValidModel( "EGM 02","models/rebs/egm/male_04.mdl" )

list.Set( "PlayerOptionsModel","EGM 03","models/rebs/egm/male_05.mdl" )
player_manager.AddValidModel( "EGM 03","models/rebs/egm/male_05.mdl" )

list.Set( "PlayerOptionsModel","EGM 04","models/rebs/egm/male_06.mdl" )
player_manager.AddValidModel( "EGM 04","models/rebs/egm/male_06.mdl" )

list.Set( "PlayerOptionsModel","EGM 05","models/rebs/egm/male_07.mdl" )
player_manager.AddValidModel( "EGM 05","models/rebs/egm/male_07.mdl" )

list.Set( "PlayerOptionsModel","EGM 06","models/rebs/egm/male_08.mdl" )
player_manager.AddValidModel( "EGM 06","models/rebs/egm/male_08.mdl" )

list.Set( "PlayerOptionsModel","EGM 07","models/rebs/egm/male_09.mdl" )
player_manager.AddValidModel( "EGM 07","models/rebs/egm/male_09.mdl" )
--addons/executioner/lua/autorun/executioner_config.lua:
return gluapack()()
--addons/executioner_v2/lua/executioner_v2/ui/executioner_v2_ui.lua:
 
    local Config = TSS.Executioner.Config
    local LANG = Config.Language

    local tip_amounts = { "0", "5", "10", "15", "20", "25" }

    local hitman_modifiers = {
        { perk_id = "BOOM_HEADSHOT", name = "Boom, Headshot", desc = "Kill your target by shooting them in the head.", icon = Material( "executioner_boom_headshot.png" ), bonus = Config.Perk_Payouts[ "BOOM_HEADSHOT" ] },
        { perk_id = "MYSTERY_ITEM", name = "Mystery Item", desc = "You will be stripped of all gear and given one weapon. Use this weapon to kill your target.", icon = Material( "executioner_mystery_gun.png" ), bonus = Config.Perk_Payouts[ "MYSTERY_ITEM" ] },
        { perk_id = "SPEEDRUN", name = "Speedrun", desc = "Complete your hit within the time limit.", icon = Material( "executioner_speedrun.png" ), bonus = Config.Perk_Payouts[ "SPEEDRUN" ] },
        { perk_id = "SNEAKY_SNEAKY", name = "Sneaky, Sneaky", desc = "Complete your hit while crouched.", icon = Material( "executioner_sneaky.png" ), bonus = Config.Perk_Payouts[ "SNEAKY_SNEAKY" ] },
        { perk_id = "COLD_BLOODED", name = "Cold Blooded", desc = "Disables the distance meter on your hit.", icon = Material( "executioner_cold_blooded.png" ), bonus = Config.Perk_Payouts[ "COLD_BLOODED" ] },
        { perk_id = "ZERO_DAMAGE", name = "Zero Damage", desc = "Complete the hit without your target hitting you once.", icon = Material( "executioner_no_damage.png" ), bonus = Config.Perk_Payouts[ "ZERO_DAMAGE" ] }
    }

    local tip_data, tip_percentage = nil, nil
    local comma = string.Comma
    local crown_icon = Material( "executioner_bounty.png" )

    local function SwitchTarget( target, current_bounties )
        local active_bounty = current_bounties[ target:SteamID() ] or false
        local target_bonus = Config.Bonus_Payouts[ team.GetName( target:Team() ) ] or false
        local payout = Config.Base_Hit_Price
        if active_bounty then payout = payout + TSS.Executioner.Bounties.Kills_Payout end
        if target_bonus then payout = payout + target_bonus end
        return active_bounty, target_bonus, payout
    end

    local function FindActiveTarget( target, data )
        for k, v in pairs( data ) do
            if v == target then
                return true
            end
        end
        return false
    end

    TSS.Executioner.OpenHitMenu = function()
        local Scale, ply = TSS.Scale, LocalPlayer()
        local self = TSS.MakeDFrame( Scale( 855 ), Scale( 515 ), "Executioner Version 2.0", true, function()
            net.Start( "TSS.Executioner.Decline_Hit" )
            net.SendToServer()
        end )
        
        local tip_price = 0
        local current_bounties = net.ReadTable()
        local current_targets = net.ReadTable()
        local online_pool = {}
        local scale_gap = Scale( 3 )
    
        for k, v in pairs( player.GetAll() ) do
            if Config.Hitmen[ team.GetName( v:Team() ) ] or v == ply or Config.Restricted_Teams[ team.GetName( v:Team() ) ] or Config.Restricted_Groups[ v:GetUserGroup() ] then continue end
            if FindActiveTarget( v, current_targets ) then continue end
            if current_bounties[ v:SteamID() ] then v.Executioner_Bounty = true end
            table.insert( online_pool, v )
        end

        local index = 1
        local target = online_pool[ index ]

        self.Filter_Container = self:Add( "DPanel" )
        self.Filter_Container:SetTall( Scale( 35 ) )
        self.Filter_Container:DockMargin( 0, scale_gap, 0, scale_gap )
        self.Filter_Container:Dock( TOP )
        self.Filter_Container.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.BASE_HEADER )
        end
        
        self.Target_Container = self:Add( "DPanel" )
        self.Target_Container:Dock( target == nil and FILL or LEFT )
        self.Target_Container:DockMargin( 2, 0, 2, 0 )
        self.Target_Container:SetWide( self:GetWide() / 2.7 )
        self.Target_Container.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.BASE_CONTAINER )
            if target == nil then
                TSS.DrawText( LANG.UI_LOW_PLAYERS, "TSS.Font.8", w / 2, h / 2, TSS.Colors.WHITE, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            end 
        end

        -- Nobody valid is online to place a hit on.
        if target == nil then return end

        local name_color, start_pos = TSS.Colors.WHITE, 0
        local active_bounty, target_bonus, payout = SwitchTarget( target, current_bounties )

        local look_at, bounty_look_at = Vector( 0, 0, 42 ), Vector( 0, 0, 45 )
        self.Target_Preview = self.Target_Container:Add( "DModelPanel" )
        self.Target_Preview:Dock( FILL )
        self.Target_Preview:SetModel( target:GetModel() )
        self.Target_Preview:SetVisible( target != nil )
        self.Target_Preview.LayoutEntity = function() return end
        self.Target_Preview:SetCamPos( Vector( 50, 0, 60 ) )
        self.Target_Preview:SetLookAt( active_bounty and bounty_look_at or look_at )
        self.Target_Preview:SetFOV( 65 )


        self.Target_Preview.Paint = function( me, w, h )
            local adjust = false 
            baseclass.Get( "DModelPanel" ).Paint( me, w, h )
            local flash = Color( 174 + math.abs( math.sin( CurTime() * 3 ) * 81 ), 30, 30, 210 )
            if active_bounty then 
                name_color = flash
                TSS.DrawIcon( crown_icon, w / 2 - 16, Scale( 55 ), TSS.Colors.WHITE, 32, 32 )  
                adjust = true
            end
            if target_bonus then
                TSS.DrawText( LANG.UI_JOB_BONUS .. comma( target_bonus ), "TSS.Font.9", w / 2, h - start_pos - Scale( 30 ), TSS.Colors.GREY, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            end
            if not adjust then start_pos = Scale( 30 ) else start_pos = Scale( 12 ) end
            TSS.DrawText( target:Nick(), "TSS.Font.9", w / 2, start_pos, name_color, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            TSS.DrawText( team.GetName( target:Team() ), "TSS.Font.9", w / 2, start_pos + Scale( 25 ), TSS.Colors.GREY, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            TSS.DrawText( "-$" .. comma( payout + tip_price ), "TSS.Font.11", w / 2, h - ( target_bonus and Scale( 15 ) or Scale( 35 ) ), TSS.Colors.GREEN, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        end

        self.Cycle_Target_Left = self.Target_Container:Add( "DButton" )
        self.Cycle_Target_Left:Dock( LEFT )
        self.Cycle_Target_Left:SetWide( Scale( 35 ) )
        self.Cycle_Target_Left:SetFont( "TSS.Font.9" )
        self.Cycle_Target_Left:SetText( "<<" )
        self.Cycle_Target_Left:SetTextColor( TSS.Colors.WHITE )
        self.Cycle_Target_Left.Paint = nil

        self.Cycle_Target_Left.DoClick = function()
            if index == 1 then index = #online_pool else index = index - 1 end
            target = online_pool[ index ]
            self.Target_Preview:SetModel( target:GetModel() )
            active_bounty, target_bonus, payout = SwitchTarget( target, current_bounties )
            self.Target_Preview:SetLookAt( active_bounty and bounty_look_at or look_at )
            name_color = TSS.Colors.WHITE
        end

        self.Cycle_Target_Right = self.Target_Container:Add( "DButton" )
        self.Cycle_Target_Right:Dock( RIGHT )
        self.Cycle_Target_Right:SetWide( Scale( 35 ) )
        self.Cycle_Target_Right:SetFont( "TSS.Font.9" )
        self.Cycle_Target_Right:SetText( ">>" )
        self.Cycle_Target_Right:SetTextColor( TSS.Colors.WHITE )
        self.Cycle_Target_Right.Paint = nil

        self.Cycle_Target_Right.DoClick = function()
            if index == #online_pool then index = 1 else index = index + 1 end
            target = online_pool[ index ]
            self.Target_Preview:SetModel( target:GetModel() )
            active_bounty, target_bonus, payout = SwitchTarget( target, current_bounties )
            self.Target_Preview:SetLookAt( active_bounty and bounty_look_at or look_at )
            name_color = TSS.Colors.WHITE
        end

        self.Place_Hit_Container = self:Add( "DPanel" )
        self.Place_Hit_Container:Dock( FILL )
        self.Place_Hit_Container.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.BASE_CONTAINER )
        end
        self.Place_Hit_Container:DockMargin( 0, 0, 0, 0 )

        self.Info_Container = self.Place_Hit_Container:Add( "DPanel" )
        self.Info_Container:SetTall( Scale( 30 ) )
        self.Info_Container:DockMargin( 0, scale_gap, 0, scale_gap )
        self.Info_Container:Dock( TOP )
        self.Info_Container.Paint = function( me, w, h )
            --TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.BASE_CONTAINER )
            TSS.DrawText( LANG.UI_HELP_HEADER, "TSS.Font.8", Scale( 5 ), Scale( 15 ), TSS.Colors.WHITE, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
        end

        self.Hit_Info = TSS.CreateLabel( self.Place_Hit_Container, LANG.UI_HIT_BASICS, "TSS.Font.8", TSS.Colors.GREY )
        self.Hit_Info:Dock( TOP )
        self.Hit_Info:DockMargin( Scale( 5 ), 0, 0, 0 )
        self.Hit_Info:SetAutoStretchVertical( true )
        self.Hit_Info:InvalidateLayout( true )

        self.Tip_Header = self.Place_Hit_Container:Add( "DPanel" )
        self.Tip_Header:Dock( TOP )
        self.Tip_Header:SetTall( Scale( 35 ) )
        self.Tip_Header.Paint = function( me, w, h )
            --TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.BASE_CONTAINER )
            TSS.DrawText( LANG.UI_TIP_HITMAN, "TSS.Font.8", Scale( 5 ), Scale( 15 ), TSS.Colors.WHITE, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
        end

        self.Tip_Container = self.Place_Hit_Container:Add( "DIconLayout" )
        self.Tip_Container:Dock( TOP )
        self.Tip_Container:SetTall( Scale( 30 ) )
        self.Tip_Container:SetSpaceX( 1 )
        self.Tip_Container:DockMargin( Scale( 5 ), scale_gap, 0, scale_gap )

        tip_data = 1
        tip_percentage = tip_amounts[ tip_data ]
        for k, v in pairs( tip_amounts ) do
            local item = self.Tip_Container:Add( "DPanel" )
            item:SetSize( Scale( 85 ), Scale( 40 ) )
            item.Paint = function( me, w, h )
                TSS.DrawRoundedBox( 6, 0, 0, w, h, tip_data == k and TSS.Colors.GREY or TSS.ConvertColour( me:IsHovered(), TSS.Colors.MENU_ITEM, 5 ) )
                TSS.DrawText( v .. "%", "TSS.Font.8", w / 2, h / 2, TSS.Colors.WHITE, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            end
            item.OnMousePressed = function() 
                tip_data = k
                tip_percentage = tip_amounts[ tip_data ]
                tip_price = Config.Base_Hit_Price / 100 * tip_percentage
            end
        end

        self.Place_Hit = TSS.CreateButton( self.Place_Hit_Container, 0, 0, Scale( 75 ), Scale( 40 ), "TSS.Font.8", LANG.UI_PLACE_HIT )
        self.Place_Hit:Dock( TOP )
        self.Place_Hit:DockMargin( scale_gap * 2, scale_gap, scale_gap, scale_gap )
        self.Place_Hit.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.ConvertColour( me:IsHovered(), TSS.Colors.GREEN, 15 ) )
        end

        self.Place_Hit.DoClick = function( me )
            if not ply:canAfford( payout ) then
                ply:ChatPrint( LANG.NOT_ENOUGH_FUNDS )
                net.Start( "TSS.Executioner.Decline_Hit" )
                net.SendToServer()
                self:Close()
                return
            end
            net.Start( "TSS.Executioner.SendHitRequest" )
                net.WriteString( target:SteamID() )
                net.WriteInt( tip_data, 4 )
            net.SendToServer()
            self:Close()
        end
    end
    net.Receive( "TSS.Executioner.SendHitMenu", TSS.Executioner.OpenHitMenu )

    
    TSS.Executioner.OpenConfirmMenu = function()
        local Scale, ply = TSS.Scale, LocalPlayer()
        local self = TSS.MakeDFrame( Scale( 1000 ), Scale( 670 ), "Executioner Version 2.0" )
        local scr_w = ScrW()

        local target_sid = net.ReadString()
        local customer_name = net.ReadString()
        local tip_price = net.ReadInt( 16 )
        local current_bounties = net.ReadTable()

        local target = player.GetBySteamID( target_sid )
        if not target then return end
        local cached_title = string.format( LANG.UI_HIT_OFFERED, customer_name )
        local active_bounty = current_bounties[ target:SteamID() ]

        self.Header = self:Add( "DPanel" )
        self.Header:SetTall( Scale( 45 ) )
        self.Header:DockMargin( 0, 0, 0, 4 )
        self.Header:Dock( TOP )
        self.Header.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.BASE_HEADER )
            TSS.DrawText( cached_title, "TSS.Font.8", Scale( 5 ), h / 2, TSS.Colors.GREY, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
        end

        self.Target_Container = self:Add( "DPanel" )
        self.Target_Container:Dock( LEFT )
        --self.Target_Container:DockMargin( 4, 0, 4, 0 )
        self.Target_Container:SetWide( self:GetWide() / 2.7 )
        self.Target_Container.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.BASE_CONTAINER )
        end

        self.Target_Preview = self.Target_Container:Add( "DModelPanel" )
        self.Target_Preview:Dock( FILL )
        self.Target_Preview:SetModel( target:GetModel() )
        self.Target_Preview.LayoutEntity = function() return end
        self.Target_Preview:SetCamPos( Vector( 50, 0, 60 ) )
        self.Target_Preview:SetLookAt( active_bounty and Vector( 0, 0, 31 ) or Vector( 0, 0, 26 ) )
        self.Target_Preview:SetFOV( 90 )

        local breakdown_gap, breakdown_start = 22, active_bounty and 145 or 160
        local total_price = Config.Base_Hit_Price + tip_price
        local active_modifiers_price = 0

        local bounty_payout = active_bounty and TSS.Executioner.Bounties.Kills_Payout or 0
        local job_payout = Config.Bonus_Payouts[ team.GetName( target:Team() ) ] or 0

        self.Target_Preview.Paint = function( me, w, h )
            baseclass.Get( "DModelPanel" ).Paint( me, w, h )
            local name_color = active_bounty and Color( 174 + math.abs( math.sin( CurTime() * 3 ) * 81 ), 30, 30, 210 ) or TSS.Colors.WHITE
            local start_pos = active_bounty and Scale( 20 ) or Scale( 30 )
            if active_bounty then 
                TSS.DrawIcon( crown_icon, w / 2 - 16, Scale( 65 ), TSS.Colors.WHITE, 32, 32 )
            end

            TSS.DrawText( target:Nick(), "TSS.Font.9", w / 2, start_pos, name_color, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            TSS.DrawText( team.GetName( target:Team() ), "TSS.Font.9", w / 2, start_pos + Scale( 25 ), TSS.Colors.GREY, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            
            TSS.DrawText( LANG.UI_PAYOUT_BREAKDOWN, "TSS.Font.9", w / 2, h - ( active_bounty and Scale( 170 ) or Scale( 190 ) ), TSS.Colors.WHITE, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

            TSS.DrawText( LANG.UI_BASE_HIT_PRICE .. comma( Config.Base_Hit_Price ), "TSS.Font.7", w / 2, h - Scale( breakdown_start ), TSS.Colors.GREY, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            TSS.DrawText( LANG.UI_CUSTOMER_TIP .. comma( tip_price ), "TSS.Font.7", w / 2, h - Scale( breakdown_start - breakdown_gap ), TSS.Colors.GREY, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            TSS.DrawText( LANG.UI_ACTIVE_MODIFIFERS .. comma( active_modifiers_price ), "TSS.Font.7", w / 2, h - Scale( breakdown_start - breakdown_gap * 2 ), TSS.Colors.GREY, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            TSS.DrawText( LANG.UI_TARGET_BOUNTY .. comma( bounty_payout ), "TSS.Font.7", w / 2, h - Scale( breakdown_start - breakdown_gap * 3 ), TSS.Colors.GREY, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            TSS.DrawText( LANG.UI_JOB_BONUS .. comma( job_payout ), "TSS.Font.7", w / 2, h - Scale( breakdown_start - breakdown_gap * 4 ), TSS.Colors.GREY, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

            TSS.DrawText( "+$" .. comma( total_price + job_payout ), "TSS.Font.11", w / 2, h - ( active_bounty and Scale( 25 ) or Scale( 30 ) ), TSS.Colors.GREEN, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        end

        self.Place_Hit_Container = self:Add( "DPanel" )
        self.Place_Hit_Container:Dock( FILL )
        self.Place_Hit_Container.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.BASE_CONTAINER )
        end
        self.Place_Hit_Container:DockMargin( 2, 0, 0, 0 )

        self.Info_Container = self.Place_Hit_Container:Add( "DPanel" )
        self.Info_Container:SetTall( Scale( 35 ) )
        self.Info_Container:DockMargin( 0, 0, 0, 0 )
        self.Info_Container:Dock( TOP )
        self.Info_Container.Paint = function( me, w, h )
            TSS.DrawText( LANG.UI_HELP_HEADER, "TSS.Font.7", Scale( 5 ), Scale( 15 ), TSS.Colors.WHITE, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
        end

        self.Hitman_Info = TSS.CreateLabel( self.Place_Hit_Container, LANG.UI_HITMAN_BASICS, "TSS.Font.7", TSS.Colors.GREY )
        self.Hitman_Info:Dock( TOP )
        self.Hitman_Info:DockMargin( Scale( 5 ), 0, Scale( 5 ), 0 )
        self.Hitman_Info:SetTall( Scale( scr_w < 1920 and 150 or 170 ) )   

        self.Tip_Header = self.Place_Hit_Container:Add( "DPanel" )
        self.Tip_Header:Dock( TOP )
        self.Tip_Header:SetTall( Scale( 40 ) )
        self.Tip_Header.Paint = function( me, w, h )
            TSS.DrawText( LANG.UI_HIT_MODIFIERS, "TSS.Font.7", Scale( 5 ), Scale( 15 ), TSS.Colors.WHITE, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
        end

        self.Modifier_Container = self.Place_Hit_Container:Add( "DIconLayout" )
        self.Modifier_Container:Dock( TOP ) 
        self.Modifier_Container:SetSpaceX( 2 )
        self.Modifier_Container:SetSpaceY( 2 )
        self.Modifier_Container:DockMargin( Scale( 5 ), 0, 0, Scale( 5 ) )

        local active_modifers = {}
        for k, v in pairs( hitman_modifiers ) do
            local modifier = self.Modifier_Container:Add( "DPanel" )
            modifier:SetSize( Scale( 150 ), Scale( 136 ) )
            modifier.Paint = function( me, w, h )
                TSS.DrawRoundedBox( 6, 0, 0, w, h, active_modifers[ v.perk_id ] and TSS.Colors.MENU_ITEM_ACTIVE or TSS.ConvertColour( me:IsHovered(), TSS.Colors.MENU_ITEM, 5 ) )
                TSS.DrawText( v.name, "TSS.Font.6", w / 2, Scale( 15 ), active_modifers[ v.perk_id ] and TSS.Colors.GREEN or TSS.Colors.WHITE, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
                TSS.DrawIcon( v.icon, w / 2 - 32, h / 2 - 32, TSS.Colors.GREY, 64, 64 )
                TSS.DrawText( "+$" .. comma( v.bonus ), "TSS.Font.7", w / 2, h - Scale( 15 ), TSS.Colors.GREEN, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            end
            modifier.OnMousePressed = function( me )
                if active_modifers[ v.perk_id ] then
                    active_modifers[ v.perk_id ] = nil
                    active_modifiers_price = active_modifiers_price - v.bonus
                else
                    active_modifers[ v.perk_id ] = k
                    active_modifiers_price = active_modifiers_price + v.bonus
                end
                total_price = Config.Base_Hit_Price + tip_price + active_modifiers_price + bounty_payout
            end
        end

        self.Accept_Hit = TSS.CreateButton( self.Place_Hit_Container, 0, 0, Scale( 300 ), 0, "TSS.Font.8", LANG.UI_ACCEPT_HIT )
        self.Accept_Hit:Dock( LEFT )
        self.Accept_Hit:DockMargin( Scale( 5 ), Scale( 5 ), Scale( 5 ), Scale( 5 ) )
        self.Accept_Hit.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.ConvertColour( me:IsHovered(), TSS.Colors.GREEN, 15 ) )
        end

        self.Accept_Hit.DoClick = function()
            net.Start( "TSS.Executioner.ProcessHitRequest" )
                net.WriteTable( active_modifers )
            net.SendToServer()
            self:Close()
        end

        self.Decline_Hit = TSS.CreateButton( self.Place_Hit_Container, 0, 0, Scale( 300 ), 0, "TSS.Font.8", LANG.UI_DENY_HIT )
        self.Decline_Hit:Dock( RIGHT )
        self.Decline_Hit:DockMargin( Scale( 5 ), Scale( 5 ), Scale( 5 ), Scale( 5 ) )
        self.Decline_Hit.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.ConvertColour( me:IsHovered(), TSS.Colors.RED, 15 ) )
        end

        self.Decline_Hit.DoClick = function()
            net.Start( "TSS.Executioner.Decline_Hit" )
            net.SendToServer()
            self:Close()
        end
    
    end
    net.Receive( "TSS.Executioner.SendConfirmMenu", TSS.Executioner.OpenConfirmMenu )

    local hit_active = false
    TSS.Executioner.Hitman_HUD = function()
        local ply, Scale = LocalPlayer(), TSS.Scale
        local scr_w, scr_h = ScrW(), ScrH()
        local data = net.ReadTable()
        local tick_tock = net.ReadBool()

        local speedrun = data.time > 0 or false
        local cold_blooded =  data.cold_blooded

        local target = player.GetBySteamID( data.target )
        if not IsValid( target ) then return end 

        hit_active = true

        local self = TSS.MakeDFrame( Scale( 325 ), Scale( speedrun and 165 or 140 ), "", false )
        self:SetMouseInputEnabled( false )
        self:SetKeyBoardInputEnabled( false )

        self.Think = function()
            if input.IsKeyDown( KEY_4 ) or not hit_active then
                self:Close()
            end
        end

        local bg, outline = Color( 30, 30, 30, 253 ), Color( 43, 43, 43, 253 )
        self.Paint = function( me, w, h ) 
            if not IsValid( target ) then self:Close() return end
            TSS.DrawRoundedBox( 6, 0, 0, w, h, bg )
            TSS.DrawOutline( 0, 0, w, h, 3, outline )
            TSS.DrawRect( Scale( 5 ), Scale( 5 ), w - Scale( 9 ), Scale( 28 ), outline )
            TSS.DrawText( LANG.UI_HIT_INFORMATION, "TSS.Font.8", w / 2, Scale( 18 ), TSS.Colors.WHITE, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

            --TSS.DrawRect( 0, Scale( 20 ), w, Scale( 2 ), outline )
            TSS.DrawText( LANG.UI_HIT_TARGET .. target:Nick(), "TSS.Font.8", Scale( 7 ), Scale( 48 ), TSS.Colors.GREY, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
            TSS.DrawText( LANG.UI_HIT_OCCUPTATION .. team.GetName( target:Team() ), "TSS.Font.8", Scale( 7 ), Scale( 71 ), TSS.Colors.GREY, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

            TSS.DrawRect( 0, Scale( 86.5 ), w, Scale( 2 ), outline )
            TSS.DrawText( LANG.UI_HIT_DISTANCE .. ( cold_blooded and "?? (Cold Blooded Active)" or math.Round( ply:GetPos():Distance( target:GetPos() ), 1 ) .. "M" ), "TSS.Font.8", Scale( 7 ), Scale( 100 ), TSS.Colors.GREY, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
            TSS.DrawText( LANG.UI_HIT_PAYOUT .. comma( data.payout ), "TSS.Font.8", Scale( 7 ), Scale( 123 ), TSS.Colors.GREEN, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

            if not speedrun then return end

            local time = Config.Speedrun_Time_Limit
            time = time + ( tick_tock and 30 or 0 )

            TSS.DrawRect( 0, Scale( 138 ), w, Scale( 2 ), outline )
            local time = math.Round( time - math.abs( data.time - CurTime() ) )
            TSS.DrawText( time > 0 and LANG.UI_HIT_TIME_LEFT .. TSS.SecondsToClock( time ) or LANG.UI_HIT_SPEEDRUN_FAIL, "TSS.Font.8", w / 2, Scale( 152 ), Color( 174 + math.abs( math.sin( CurTime() * 3 ) * 81 ), 30, 30, 210 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        end
        self:SetPos( Scale( 5 ), Scale( 100 ) )
    end
    net.Receive( "TSS.Executioner.SendHitmanHUD", TSS.Executioner.Hitman_HUD )

    -- Updates the client to close the HUD once a hit has been completed.
    net.Receive( "TSS.Executioner.ClientHitActive", function()
        hit_active = false
    end )

    TSS.Executioner.Phone_UI = function()
        local data = net.ReadTable()
        local Scale, ply = TSS.Scale, LocalPlayer()
        local self = TSS.MakeDFrame( Scale( 1050 ), Scale( 600 ), "Executioner Version 2.0", true, function()
            net.Start( "TSS.Executioner.Decline_Hit" )
            net.SendToServer()
        end )
        local count = table.Count
        self.Paint = function( me, w, h )
            TSS.DrawRect( 0, 0, w, h, TSS.Colors.BASE_BACKGROUND )
            if count( data ) < 1 then
                TSS.DrawText( LANG.UI_ERROR_NO_CONTRACTS, "TSS.Font.9", w / 2, h / 2, TSS.Colors.WHITE, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            end
        end

        self.Header = self:Add( "DPanel" )
        self.Header:SetTall( Scale( 30 ) )
        self.Header:DockMargin( 0, 0, 0, 0 )
        self.Header:Dock( TOP )
        self.Header.Paint = function( me, w, h )
            TSS.DrawText( LANG.UI_ACTIVE_CONTRACTS, "TSS.Font.9", Scale( 12 ), Scale( 15 ), TSS.Colors.GREY, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
        end

        self.Category_Scroll = self:Add( "DScrollPanel" )
        self.Category_Scroll:Dock( FILL )
        self.Category_Scroll:DockMargin( Scale( 5 ), Scale( 5 ), Scale( 5 ), Scale( 5 ) )

        TSS.PaintBar( self.Category_Scroll, nil, nil, TSS.Colors.BASE_HEADER )

        self.Contracts_Container = self.Category_Scroll:Add( "DIconLayout" )
        self.Contracts_Container:Dock( FILL )
        self.Contracts_Container:SetSpaceY( 2 )
        self.Contracts_Container:DockMargin( Scale( 5 ), 0, Scale( 5 ), 0 )

        for k, v in pairs( data ) do
            if v.taken then continue end
            if not IsValid( v.target ) then return end
            local name, job = v.target:Nick(), team.GetName( v.target:Team() )
            local item = self.Contracts_Container:Add( "DPanel" )
            local offer = string.Comma( v.payout_data.base_cost )
            item:SetSize( self:GetWide(), Scale( 60 ) )

            item.Paint = function( me, w, h )
                TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.MENU_ITEM )
                TSS.DrawText( name, "TSS.Font.8", Scale( 65 ), Scale( 18 ), TSS.Colors.WHITE, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
                TSS.DrawText( job, "TSS.Font.8", Scale( 65 ), Scale( 41 ), TSS.Colors.WHITE, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
                TSS.DrawText( "$" .. offer, "TSS.Font.8", w / 2, h / 2 - Scale( 12 ), TSS.Colors.GREEN, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
                TSS.DrawText( "+" .. Config.XP_Gain .. " XP", "TSS.Font.8", w / 2, h / 2 + Scale( 12 ), TSS.Colors.WHITE, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            end

            local icon_image = item:Add( "CircleAvatar" )
            icon_image:SetSize( Scale( 52 ), Scale( 52 ) )
            icon_image:SetPlayer( v.target, Scale( 52 ) )
            icon_image:SetPos( Scale( 2 ), item:GetTall() / 2 - icon_image:GetTall() / 2 )

            self.Accept_Hit = TSS.CreateButton( item, 0, 0, Scale( 125 ), Scale( 35 ), "TSS.Font.8", LANG.UI_ACCEPT_HIT )
            self.Accept_Hit:SetPos( item:GetWide() - Scale( 165 ), Scale( 12 ) )
            self.Accept_Hit.Paint = function( me, w, h )
                TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.ConvertColour( me:IsHovered(), TSS.Colors.GREEN, 15 ) )
            end

            self.Accept_Hit.DoClick = function()
                if not IsValid( v.target ) then
                    return
                end
                net.Start( "TSS.Executioner.Phone.ProcessRequest" )
                    net.WriteString( v.customer:SteamID() )
                net.SendToServer()
                v.taken = true
                self:Close()
            end
        end
    end
    net.Receive( "TSS.Executioner.Phone.RequestMenu", TSS.Executioner.Phone_UI )

    function TSS.Executioner.OpenScreenMessage()    
        local data = net.ReadTable()
        TSS.SendScreenMessage( data.header, data.footer, data.time )
    end
    net.Receive( "TSS.Executioner.SendScreenMessage", TSS.Executioner.OpenScreenMessage )

    local active_bounties = active_bounties or {}
    local skull_icon = Material( "executioner_bounty_large.png", "noclamp smooth" )
    TSS.Executioner.Networked_Bounties = function()
        active_bounties = net.ReadTable()
    end
    net.Receive( "TSS.Executioner.Bounties.Network", TSS.Executioner.Networked_Bounties )

    local vec = Vector()
    TSS.Executioner.Draw_Bounties = function()
        local self = LocalPlayer()
        if not Config.Hitmen[ team.GetName( self:Team() ) ] then return end
        vec.z = math.sin( CurTime() ) * 50
        for k, v in pairs( active_bounties ) do
            local target = player.GetBySteamID( k )
            if not IsValid( target ) or target == self then continue end
            if self:GetPos():DistToSqr( target:GetPos() ) > 160000 then
                local width, height = 265, 50
                local y_pos = 880
                local ang = target:GetAngles()
                ang:RotateAroundAxis(target:GetAngles():Right(), 90)
                ang:RotateAroundAxis(target:GetAngles():Forward(), 90)
                cam.Start3D2D(target:GetPos() + ang:Up(), Angle(0, self:EyeAngles().y - 90, 90), 0.1)
                    TSS.DrawIcon( skull_icon, -64, ( vec.z / 2 ) - y_pos + 25, TSS.Colors.WHITE, 128, 128 )
                    TSS.DrawText( "+$" .. comma( TSS.Executioner.Bounties.Kills_Payout ), "TSS.Font.30", 180, ( vec.z / 2 ) - y_pos + 100, TSS.Colors.GREEN )
                cam.End3D2D()
            end
        end
    end
    hook.Add( "PostDrawOpaqueRenderables", "TSS.Executioner.Draw_Bounties", TSS.Executioner.Draw_Bounties )

    local function DrawHitmanHUD()
        local trace = LocalPlayer():GetEyeTrace().Entity
        if not trace then return end
        if IsValid( trace ) and trace:IsPlayer() and TSS.Executioner.Config.Hitmen[ team.GetName( trace:Team() ) ] then
            if LocalPlayer():GetPos():Distance( trace:GetPos() ) > 120 then return end
            local w, h = ScrW(), ScrH()
            TSS.DrawText( "Press 'E' to place a Hit", 'TSS.Font.10', w / 2 - 5, h / 2 + 15, TSS.Colors.RED )
        end
    end
   -- hook.Add( "HUDPaint", "TSS.Executioner.DrawHUD", DrawHitmanHUD )

    local function OpenHitStatus()
        local self = TSS.MakeDFrame( Scale( 625 ), Scale( 145 ), "Active Hit Status", true )

        local data = net.ReadTable()

        local target = data.target

        self.Header = self:Add( "DPanel" )
        self.Header:SetTall( Scale( 30 ) )
        self.Header:DockMargin( 0, 0, 0, 0 )
        self.Header:Dock( TOP )
        self.Header.Paint = function( me, w, h )
            TSS.DrawText( "Your Current Target", "TSS.Font.7", Scale( 5 ), Scale( 10 ), TSS.Colors.GREY, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
        end

        local item = self:Add( "DPanel" )
        item:Dock( TOP )
        item:SetTall( Scale( 65 ) )

        local name, job, offer = target:Nick(), team.GetName( target:Team() ), string.Comma( data.payout_data.base_cost )

        item.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.MENU_ITEM )
            TSS.DrawText( name, "TSS.Font.8", Scale( 65 ), h / 2 - Scale( 12 ), TSS.Colors.WHITE, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
            TSS.DrawText( job, "TSS.Font.8", Scale( 65 ), h / 2 + Scale( 12 ), TSS.Colors.WHITE, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
            TSS.DrawText( "$" .. offer, "TSS.Font.8", w / 2, h / 2 - Scale( 12 ), TSS.Colors.GREEN, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            TSS.DrawText( "+" .. Config.XP_Gain .. " XP", "TSS.Font.8", w / 2, h / 2 + Scale( 12 ), TSS.Colors.WHITE, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        end

        local icon_image = item:Add( "CircleAvatar" )
        icon_image:SetSize( Scale( 52 ), Scale( 52 ) )
        icon_image:SetPlayer( target, Scale( 52 ) )
        icon_image:SetPos( Scale( 2 ), item:GetTall() / 2 - icon_image:GetTall() / 2 )

        self.End_Hit = TSS.CreateButton( item, 0, 0, Scale( 125 ), Scale( 35 ), "TSS.Font.7", "Cancel Hit" )
        self.End_Hit:SetPos( self:GetWide() - Scale( 140 ), item:GetTall() / 2 - Scale( 35 ) / 2 )
        self.End_Hit.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.ConvertColour( me:IsHovered(), TSS.Colors.RED, 15 ) )
        end

        self.End_Hit.DoClick = function()
            net.Start( "TSS.Executioner.Manual_Hit_Cancel" )
            net.SendToServer()
            self:Close()
        end
    end
    net.Receive( "TSS.Executioner.ShowHitStatus", OpenHitStatus )
    
--lua/autorun/fortnite_playermodel_pack.lua:
return gluapack()()
--addons/gmodadminsuite-config/lua/gmodadminsuite_lua_functions.lua:
--[[

	    __                   ______                 __  _                 
	   / /   __  ______ _   / ____/_  ______  _____/ /_(_)___  ____  _____
	  / /   / / / / __ `/  / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
	 / /___/ /_/ / /_/ /  / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  ) 
	/_____/\__,_/\__,_/  /_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/  
	                                                                      

	Welcome to the Lua functions config.
	GmodAdminSuite has been designed to be as customizable as possible.
	In this configuration, you can define custom Lua functions which GmodAdminSuite can use.
	You'll find ways of integrating these Lua functions with GmodAdminSuite modules.

	More information on using GmodAdminSuite Lua functions can be found in module wikis.

]]

GAS.LuaFunctions = {
	["example_function"] = function(ply)
		if (ply:SteamID() == "STEAM_0:1:40314158" or ply:SteamID64() == "76561198112561190") then
			return true -- allow!
		elseif (ply:SteamID() == "STEAM_0:1:7099") then
			return false -- disallow!
		else
			return -- ignore!
		end
	end,
}

-- Do not delete the following line; your config will break.
return true
--lua/gmodadminsuite/thirdparty/spon.lua:
return gluapack()()
--lua/gmodadminsuite/thirdparty/spon.lua:
--           -- COPYRIGHT HEADER --
-- spon2.lua 1.0.0 by thelastpenguin
-- Copyright 2016 Gareth George
--                aka thelastpenguin
--
-- GitHub release: https://github.com/thelastpenguin/spon
--
-- You may use this in any purpose / include it in any project so long as the
-- following conditions are met:
--    - You do not remove this copyright notice
--    - You don't claim this to be your own
--    - You properly credit the author (thelastpenguin aka gareth george) if you publish your work
--      based on (and/or using) this.
--
-- If you modify this code in any way this copyright still applies to the modifications or any
-- derived pieces of code
--
-- The author may not be held responsibile for any damages or losses directly or indirectly caused
-- by the use of spon
-- If you disagree with any of these limitations you're free not to use the code!
--
--
--
--           -- COMPATABILITY MODE --
-- compatability with alternative encoders:
--    - util.TableFromJSON
--    - von by Vericas https://github.com/vercas/vON/blob/master/von.lua
--    - pon1 by thelastpenguin https://github.com/thelastpenguin/gLUA-Library/blob/master/pON/pON-recommended.lua
--
--           -- DATA TYPES --
-- All of the following data types are supported as both keys and values
-- References are preserved i.e. if the same object appears twice it will be encoded as the same object
-- Cycles will not result in infinite recursion
--
-- Data Types:
--    - boolean
--    - numbers (integers, floats)
--    - strings
--    - table
--    - nil

if SERVER then AddCSLuaFile() end

-- localized variable optimization
local select = select
local format_string = string.format
local concat = table.concat
local len = string.len
local string_find = string.find
local string_sub = string.sub
local tonumber = tonumber
local tostring = tostring
local math_log = math.log
local math_ceil = math.ceil
local next = next
local ipairs = ipairs
local pairs = pairs
local Angle = Angle
local Vector = Vector

-- the global table for the encoder
local spon = {}
--if _G then _G.spon = spon end

--
-- caches
--

local hex_cache = {} for i = 0, 15 do hex_cache[format_string('%x', i)] = i end

local cache = {}
local cache_size = 0
local output_buffer = setmetatable({}, {__mode = 'v'})

local function empty_cache(hashy, a)
	cache_size = 0
	for k,v in pairs(hashy) do hashy[k] = nil end
	return a
end

local function empty_output_buffer(buffer, a)
	for k,v in ipairs(buffer) do buffer[k] = nil end
	return a
end

--
-- COMPATABILITY MODES
--

local compatability = {}
if true then -- you can re-enable this in your version if you so desire.
	do
		local function safeload(lib) local _, a = pcall(require, lib) if not _ then return nil else return a end end

		-- von compatability
		--_G.von = _G.von or safeload('von')
		--if von and von.serialize then compatability.vonDeserialize = von.deserialize end

		-- pon compatability
		_G.pon = spon.pon or _G.pon or safeload('pon')
		if pon and pon.decode then compatability.ponDecode = pon.decode end

		-- json compatability
		if util and util.JSONToTable then compatability.JSONToTable = util.JSONToTable end
	end
end 
--
-- ENCODER FUNCTIONS
--

local encoder = {}

local log16 = math_log(16)

local function encoder_write_pointer(index)
	return format_string('@%x%x', math_ceil(math_log(index + 1) / log16), index)
end

encoder['number'] = function(value, output, index)
	if value % 1 == 0 then
		if value == 0 then
			output[index] = 'I0'
		elseif value < 0 then
			output[index] = format_string('i%x%x', math_ceil(math_log(-value+1) / (log16)), -value)
		else
			output[index] = format_string('I%x%x', math_ceil(math_log(value+1) / (log16)), value)
		end
	else
		output[index] = 'd' .. tostring(value) .. 'd' -- use a base10 tostring representation if it has decimals
	end

	return index + 1
end
local encode_number = encoder['number']

encoder['string'] = function(value, output, index)
	if cache[value] then
		output[index] = encoder_write_pointer(cache[value])
	end
	cache_size = cache_size + 1
	cache[value] = cache_size

	local len = len(value)
	if len >= 16 * 16 then
		output[index] = format_string('T%06X%s', len, value)
	else
		output[index] = format_string('S%02X%s', len, value)
	end
	return index + 1
end

encoder['boolean'] = function(value, output, index)
	output[index] = value and 't' or 'f'
	return index + 1
end

encoder['table'] = function(value, output, index)
	if cache[value] then
		output[index] = encoder_write_pointer(cache[value])
		return index + 1
	end

	-- update the cache
	cache_size = cache_size + 1
	cache[value] = cache_size

	local table_size = #value
	local has_kv_component = next(value, table_size ~= 0 and table_size or nil)

	if table_size > 0 then
		if has_kv_component then
			output[index] = '('
		else
			output[index] = '<'
		end

		index = index + 1

		for k,v in ipairs(value) do
			index = encoder[type(v)](v, output, index)
		end

		if has_kv_component then
			output[index] = '~'
			index = index + 1
		else
			output[index] = '>'
			return index + 1
		end
	else
		output[index] = '['
		index = index + 1
	end

	for k,v in next, value, (table_size ~= 0 and table_size or nil) do
		index = encoder[type(k)](k, output, index)
		index = encoder[type(v)](v, output, index)
	end

	output[index] = ')'

	return index + 1 --fast_concat_stack(fast_concat_stack('{', encode_sequential(1, value, 0)))
end

encoder['nil'] = function(value, output, index)
	output[index] = '-'
	return index + 1
end

-- gmod specific
if IsValid and FindMetaTable then
	local IsValid = IsValid
	local FindMetaTable = FindMetaTable
	local EntIndex = FindMetaTable('Entity').EntIndex

	encoder['Vector'] = function(value, output, index)
		output[index] = 'V'
		index = encode_number(value.x, output, index + 1)
		index = encode_number(value.y, output, index)
		return encode_number(value.z, output, index)
	end

	encoder['Angle'] = function(value, output, index)
		output[index] = 'A'
		index = encode_number(value.p, output, index + 1)
		index = encode_number(value.y, output, index)
		return encode_number(value.r, output, index)
	end

	encoder['Entity'] = function(value, output, index)
		if IsValid(value) then
			output[index] = 'E'
			return encode_number(EntIndex(value), output, index + 1)
		else
			return '#'
		end
	end

	encoder['Player']  = encoder['Entity']
	encoder['Vehicle'] = encoder['Entity']
	encoder['Weapon']  = encoder['Entity']
	encoder['NPC']     = encoder['Entity']
	encoder['NextBot'] = encoder['Entity']

end

local decoder = {}
-- a short string with a 2-digit length component
decoder['S'] = function(str, index, cache)
	local strlen = tonumber(string_sub(str, index + 1, index + 2), 16)
	local str = string_sub(str, index + 3, index + (3 - 1) + strlen)
	cache_size = cache_size + 1
	cache[cache_size] = str
	return str, index + (3) + strlen
end
-- a long string with a 6-digit length component
decoder['T'] = function(str, index, cache)
	local strlen = tonumber(string_sub(str, index + 1, index + 6), 16)
	return string_sub(str, index + 7, index + (7 - 1) + strlen), index + (7) + strlen -- figure out if alignment is off i think its right
end
-- decoder for an integer value
decoder['I'] = function(str, index, cache)
	local digitCount = hex_cache[string_sub(str, index+1, index+1)]
	if digitCount == 0 then return 0, index + 2 end
	return tonumber(string_sub(str, index + 2, index + 1 + digitCount), 16), index + (2 + digitCount)
end
decoder['i'] = function(str, index, cache)
	local digitCount = hex_cache[string_sub(str, index+1, index+1)]
	if digitCount == 0 then return 0, index + 2 end
	return -tonumber(string_sub(str, index + 2, index + 1 + digitCount), 16), index + (2 + digitCount)
end

decoder['d'] = function(str, index, cache)
	local build_base_10 = ""
	for i=index+1,#str do
		if (str[i] == 'd') then break end
		build_base_10 = build_base_10 .. str[i]
	end
	return tonumber(build_base_10), index + #build_base_10 + 2
end

-- decoder for a boolean
decoder['t'] = function(str, index) return true, index + 1 end
decoder['f'] = function(str, index) return false, index + 1 end
decoder['@'] = function(str, index)
	local digitCount = hex_cache[string_sub(str, index+1, index+1)]
	return cache[tonumber(string_sub(str, index + 2, index + 1 + digitCount), 16)], index + (2 + digitCount)
end

decoder['A'] = function(str, index)
	local p, y, r, char

	-- Skip prefix 'A', go to first property
	char = string_sub(str, index + 1, index + 1)
	p, index = decoder[char](str, index + 1)

	char = string_sub(str, index, index)
	y, index = decoder[char](str, index)

	char = string_sub(str, index, index)
	r, index = decoder[char](str, index)

	return Angle(p, y, r), index
end

decoder['V'] = function(str, index)
	local x, y, z, char

	-- Skip prefix 'V', go to first property
	char = string_sub(str, index + 1, index + 1)
	x, index = decoder[char](str, index + 1)

	char = string_sub(str, index, index)
	y, index = decoder[char](str, index)

	char = string_sub(str, index, index)
	z, index = decoder[char](str, index)

	return Vector(x, y, z), index
end

decoder['E'] = function(str, index)
	local entid, char

	-- Skip prefix 'E', go to entity index
	char = string_sub(str, index + 1, index + 1)
	entid, index = decoder[char](str, index + 1)

	return Entity(entid), index
end

decoder['('] = function(str, index)
	local table = {}
	cache_size = cache_size + 1
	cache[cache_size] = table

	index = index + 1

	-- decode the array portion of the table
	local i = 1
	while true do
		local c = string_sub(str, index, index)
		if c == '~' or c == ')' or c == nil then break end
		table[i], index = decoder[c](str, index, cache)
		i = i + 1
	end

	if string_sub(str, index, index) == '~' then
		-- decode the key-value poriton of the table
		index = index + 1
		local k
		while true do
			local c = string_sub(str, index, index)
			if c == ')' or c == nil then break end
			k, index = decoder[c](str, index, cache)
			c = string_sub(str, index, index)
			table[k], index = decoder[c](str, index, cache)
		end
	end

	return table, index + 1
end

decoder['['] = function(str, index)
	local table = {}
	cache_size = cache_size + 1
	cache[cache_size] = table

	-- decode the key-value poriton of the table
	index = index + 1
	local k
	while true do
		local c = string_sub(str, index, index)
		if c == ')' or c == nil then break end
		k, index = decoder[c](str, index, cache)
		c = string_sub(str, index, index)
		table[k], index = decoder[c](str, index, cache)
	end

	return table, index + 1
end

decoder['<'] = function(str, index)
	local table = {}
	cache_size = cache_size + 1
	cache[cache_size] = table

	index = index + 1

	-- decode the array portion of the table
	local i = 1
	while true do
		local c = string_sub(str, index, index)
		if c == '>' or c == nil then break end
		table[i], index = decoder[c](str, index, cache)
		i = i + 1
	end

	return table, index + 1
end

decoder['-'] = function(str, index)
	return nil, index + 1
end


spon.encode = function(table)
	-- encoding its simple
	empty_output_buffer(output_buffer)
	empty_cache(cache)
	encoder.table(table, output_buffer, 1)
	return concat(output_buffer)
end

spon.decode = function(str)
	empty_cache(cache)

	local firstChar = string_sub(str, 1, 1)
	local decoderFunc = decoder[firstChar]

	if spon.noCompat then
		return  decoderFunc(str, 1)
	end

	if not decoderFunc then
		return spon._decodeInCompatabilityMode(str, 'did not find a decoder function to handle the string beginning with \''..tostring(firstChar)..'\'')
	end

	local succ, val = pcall(decoderFunc, str, 1)
	if succ then return val end

	return spon._decodeInCompatabilityMode(str, 'spon encountered error: ' .. tostring(val))
end

spon._decodeInCompatabilityMode = function(str, message)
	local firstChar = string_sub(str, 1, 1)
	if firstChar == '{' then
		message = message .. '\nthis looks like it may be a pon1 encoded object, please make sure you have pon1 installed for compatability mode to work with it'
	end
	for k, decoder in pairs(compatability) do
		local succ, val = pcall(decoder, str)
		if succ then return val end
		message = message .. '\ntrying decoder: ' .. k .. '\n\terror: ' .. tostring(val)
	end
	error('[spon] failed to decode string and was unable to resolve the problem in compatability mode!\n' .. message .. '\n\nthe encoded object: ' .. tostring(str:sub(1, 100)))
end

spon.printtable = function(tbl, indent, cache) -- debug utility
	if indent == nil then
		return spon.printtable(tbl, 0, {})
	end
	if cache[tbl] then return end
	cache[tbl] = true
	local lpad = string.format('%'..indent..'s', '')

	for k,v in pairs(tbl) do
		print(lpad .. '- ' .. string_sub(type(k), 1, 1) .. ':' .. tostring(k) .. ' = ' .. string_sub(type(v), 1, 1) .. ':' .. tostring(v))
		if type(v) == 'table' then
			spon.printtable(v, indent + 4, cache)
		end
	end
end

-- todo: finish writing entity, angle, vector decoders

return spon
--lua/gmodadminsuite/sh_language.lua:
local function GmodLanguage(module_name)
	if (SERVER) then return "english" end
	local lang = GetConVar("gmod_language"):GetString()
	if (lang == "en") then return "english" end
	local module_name = module_name or "GAS"
	for lang_name, data in pairs(GAS.Languages.LanguageData[module_name]) do
		if (data.Flag == "flags16/" .. lang .. ".png") then
			return lang_name
		end
	end
	return "english"
end

GAS.Languages = {}

GAS.Languages.DefaultConfig = {
	SelectedLanguages = {},
	ShortDateFormat = false,
	LongDateFormat = false,
}

if (CLIENT) then
	GAS.Languages.Config = GAS:GetLocalConfig("languages", GAS.Languages.DefaultConfig)
else
	GAS.Languages.Config = table.Copy(GAS.Languages.DefaultConfig)
end

--######## LOAD LANGUAGE DATA ########--

GAS.Languages.LanguageData = {GAS = {}}

function GAS.Languages:LoadLanguageData()
	local languages = file.Find("gmodadminsuite/lang/*.lua", "LUA")
	for _,f in ipairs(languages) do
		local filename = (f:gsub("%.lua$",""))
		GAS.Languages.LanguageData["GAS"][filename] = include("gmodadminsuite/lang/" .. f)
		if (filename == "english" or GAS.Languages.Config.SelectedLanguages.GAS == filename) then
			GAS.Languages.LanguageData["GAS"][filename].Phrases = GAS.Languages.LanguageData["GAS"][filename].Phrases()
		end
	end

	local _,modules = file.Find("gmodadminsuite/modules/*", "LUA")
	for _,module in ipairs(modules) do
		local languages = file.Find("gmodadminsuite/modules/" .. module .. "/lang/*.lua", "LUA")
		if (#languages > 0) then
			GAS.Languages.LanguageData[module] = {}
			for _,f in ipairs(languages) do
				local filename = (f:gsub("%.lua$",""))
				GAS.Languages.LanguageData[module][filename] = include("gmodadminsuite/modules/" .. module .. "/lang/" .. f)
				if (filename == "english" or GAS.Languages.Config.SelectedLanguages[module] == filename) then
					GAS.Languages.LanguageData[module][filename].Phrases = GAS.Languages.LanguageData[module][filename].Phrases()
				end
			end
		end
	end
end
GAS.Languages:LoadLanguageData()

if (GAS.Languages.Config.SelectedLanguages.GAS == nil) then
	GAS.Languages.Config.SelectedLanguages.GAS = GmodLanguage()
end

--######## LANGUAGE FUNCTIONS ########--

function GAS.Languages:LanguageExists(language_name, module_name)
	return GAS.Languages.LanguageData[module_name or "GAS"][language_name] ~= nil
end

function GAS.Languages:GetSelectedLanguage(module_name)
	if (SERVER) then return "english" end
	if (not module_name) then
		if (GAS.Languages:LanguageExists(GAS.Languages.Config.SelectedLanguages.GAS)) then
			return GAS.Languages.Config.SelectedLanguages.GAS
		else
			return GmodLanguage()
		end
	else
		if (GAS.Languages.Config.SelectedLanguages[module_name] and GAS.Languages:LanguageExists(GAS.Languages.Config.SelectedLanguages[module_name], module_name)) then
			return GAS.Languages.Config.SelectedLanguages[module_name]
		elseif (GAS.Languages:LanguageExists(GAS.Languages.Config.SelectedLanguages.GAS, module_name)) then
			return GAS.Languages.Config.SelectedLanguages.GAS
		else
			return GmodLanguage(module_name)
		end
	end
end

function GAS.Languages:RawPhrase(str, module_name, discriminator)
	local selected_language = GAS.Languages:GetSelectedLanguage(module_name)
	local phrase_str
	if (isfunction(GAS.Languages.LanguageData[module_name or "GAS"][selected_language].Phrases)) then
		GAS.Languages.LanguageData[module_name or "GAS"][selected_language].Phrases = GAS.Languages.LanguageData[module_name or "GAS"][selected_language].Phrases()
	end
	if (discriminator) then
		phrase_str = GAS.Languages.LanguageData[module_name or "GAS"][selected_language].Phrases[discriminator][str]
	else
		phrase_str = GAS.Languages.LanguageData[module_name or "GAS"][selected_language].Phrases[str]
	end
	if (phrase_str) then
		return phrase_str
	elseif (selected_language ~= "english") then
		if (discriminator) then
			if (GAS.Languages.LanguageData[module_name or "GAS"]["english"].Phrases[discriminator] ~= nil) then
				return GAS.Languages.LanguageData[module_name or "GAS"]["english"].Phrases[discriminator][str] or str
			else
				return str
			end
		else
			return GAS.Languages.LanguageData[module_name or "GAS"]["english"].Phrases[str] or str
		end
	else
		return str
	end
end
function GAS:Phrase(str, module_name, discriminator)
	if (str == "module_name") then
		local friendly_name = GAS.Languages:RawPhrase(str, module_name)
		if (friendly_name == str) then
			return nil
		else
			return friendly_name
		end
	else
		return (GAS.Languages:RawPhrase(str, module_name, discriminator):gsub("\t",""))
	end
end
function GAS:PhraseFormat(str, module_name, ...)
	return GAS:Phrase(str, module_name):format(...)
end

--######## TIMESTAMP LOCALIZATION ########--

function GAS:FormatTimestamp(timestamp)
	if (GAS.Languages.Config.ShortDateFormat ~= false) then
		return os.date(GAS.Languages.Config.ShortDateFormat, timestamp)
	else
		if (CLIENT and (system.GetCountry() == "US" or system.GetCountry() == "CA")) then
			return os.date("%m/%d/%Y %I:%M:%S %p", timestamp)
		else
			return os.date("%d/%m/%Y %I:%M:%S %p", timestamp)
		end
	end
end
function GAS:FormatFullTimestamp(timestamp)
	if (GAS.Languages.Config.LongDateFormat ~= false) then
		return os.date(GAS.Languages.Config.LongDateFormat, timestamp)
	else
		if (CLIENT and (system.GetCountry() == "US" or system.GetCountry() == "CA")) then
			return os.date("%a %m/%d/%Y %I:%M:%S %p", timestamp)
		else
			return os.date("%a %d/%m/%Y %I:%M:%S %p", timestamp)
		end
	end
end
function GAS:SimplifySeconds(seconds)
	if (seconds < 60) then
		local sec = seconds
		local lang_str = "s_seconds"
		if (sec == 1) then lang_str = "s_second" end
		return GAS:PhraseFormat(lang_str, nil, sec)
	elseif (seconds < 3600) then
		local min = math.Round(seconds / 60)
		local lang_str = "s_minutes"
		if (min == 1) then lang_str = "s_minute" end
		return GAS:PhraseFormat(lang_str, nil, min)
	else
		local hour = math.Round(seconds / 60 / 60)
		local lang_str = "s_hours"
		if (hour == 1) then lang_str = "s_hour" end
		return GAS:PhraseFormat(lang_str, nil, hour)
	end
end
function GAS:SimplifyTimestamp(timestamp)
	local difference = os.time() - timestamp
	if (difference == 0) then
		return GAS:Phrase("just_now")
	elseif (difference < 60) then

		local sec = difference
		local lang_str = "seconds_ago"
		if (sec == 1) then lang_str = "second_ago" end
		return GAS:PhraseFormat(lang_str, nil, sec)

	elseif (difference < 3600) then

		local min = math.Round(difference / 60)
		local lang_str = "minutes_ago"
		if (min == 1) then lang_str = "minute_ago" end
		return GAS:PhraseFormat(lang_str, nil, min)

	elseif (difference < 86400) then

		local hour = math.Round(difference / 60 / 60)
		local lang_str = "hours_ago"
		if (hour == 1) then lang_str = "hour_ago" end
		return GAS:PhraseFormat(lang_str, nil, hour)

	else
		return GAS:FormatTimestamp(timestamp)
	end
end

if (SERVER) then
	local languages = file.Find("gmodadminsuite/lang/*.lua", "LUA")
	for _,f in ipairs(languages) do
		AddCSLuaFile("gmodadminsuite/lang/" .. f)
	end

	local _,modules = file.Find("gmodadminsuite/modules/*", "LUA")
	for _,module in ipairs(modules) do
		local languages = file.Find("gmodadminsuite/modules/" .. module .. "/lang/*.lua", "LUA")
		for _,f in ipairs(languages) do
			AddCSLuaFile("gmodadminsuite/modules/" .. module .. "/lang/" .. f)
		end
	end
end
--addons/gmodadminsuite-jobwhitelist-1.3.4/lua/gmodadminsuite/modules/jobwhitelist/lang/english.lua:
return gluapack()()
--lua/gmodadminsuite/modules/secondaryusergroups/lang/french.lua:
return gluapack()()
--lua/gmodadminsuite/modules/secondaryusergroups/lang/french.lua:
return {
	Name = "French",
	Flag = "flags16/fr.png",
	Phrases = function() return {

		module_name = "Secondary Usergroups",

		open_menu          = "Ouvrir Menu",
		custom_ellipsis    = "Custom...",
		usergroup_ellipsis = "Groupes d'Utilisateurs...",
		players            = "Joueurs",
		settings           = "Paramètres",
		players            = "Joueurs",
		give_usergroup     = "Définir Groupe",
		usergroup_ellipsis = "Groupe d'Utilisateurs...",
		usergroup_is_main  = "C'est le groupe principal des utilisateurs, il ne peut pas être donné ou retiré.",
		help               = "Aide",
		offline_btn        = "Nouveau Joueur...",
		loading_ellipsis   = "Chargement...",
		unknown            = "Inconnu",

} end }
--lua/gmodadminsuite/cl_menubar.lua:
local function L(phrase, ...)
	if (#({...}) == 0) then
		return GAS:Phrase(phrase)
	else
		return GAS:PhraseFormat(phrase, nil, ...)
	end
end

hook.Add("PopulateMenuBar", "gmodadminsuite.menubar", function(p)
	p.GASMenu = p:AddOrGetMenu("GmodAdminSuite")

	p.GASMenu:AddOption(L"open_gas", function()
		RunConsoleCommand("gmodadminsuite")
	end):SetIcon("icon16/shield.png")

	p.GASMenu:AddSpacer()

	for ident, tab in pairs(GAS.Modules.Info) do
		hook.Add("gmodadminsuite:LoadModule:"..ident, "gmodadminsuite.menubar", function()
			p.GASMenu:AddOption(tab.Name, function()
				GAS:PlaySound("popup")
				RunConsoleCommand("gmodadminsuite", ident)
			end):SetIcon(tab.Icon)
			hook.Remove("gmodadminsuite:LoadModule:"..ident, "gmodadminsuite.menubar")
		end)
	end
end)
--lua/autorun/gordonfreemanredux.lua:
return gluapack()()
--lua/autorun/gordonfreemanredux.lua:
list.Set( "PlayerOptionsModel", "Mafia II - Vito Scalettuce", "models/player/MafiaII_VitoScalettuce_PM.mdl" )
player_manager.AddValidModel( "Mafia II - Vito Scalettuce", "models/player/MafiaII_VitoScalettuce_PM.mdl" )
--addons/gprofiler/lua/autorun/gprofiler_load.lua:
return gluapack()()
--addons/gprofiler/lua/gprofiler/profilers/hooks/sh_hooks.lua:
GProfiler.Hooks = GProfiler.Hooks or {}
GProfiler.Hooks.IsDetoured = GProfiler.Hooks.IsDetoured or false
GProfiler.Hooks.ProfileData = GProfiler.Hooks.ProfileData or {}
GProfiler.Hooks.RestoreHookTable = GProfiler.Hooks.RestoreHookTable or {}

local SysTime = SysTime
local unpack = unpack
local debug = debug

function GProfiler.Hooks:StartProfiler(ply)
	if not GProfiler.Access.HasAccess(ply or LocalPlayer()) or GProfiler.Hooks.IsDetoured then return end

	GProfiler.Log((SERVER and "Server" or "Client") .. " hook profiler started!", 2)
	GProfiler.Hooks.ProfileData = {}
	GProfiler.Hooks.IsDetoured = true
	GProfiler.Hooks.ProfileStarted = SysTime()
	GProfiler.Hooks.AddHook = GProfiler.Hooks.AddHook or hook.Add

	local function profileHook(hookName, receiverName, receiverFunc, ...)
		if type(receiverName) ~= "string" or type(receiverFunc) ~= "function" then return end
		local dataIdent = string.format("%s_%s", hookName, receiverName)
		GProfiler.Hooks.ProfileData[dataIdent] = {
			h = hookName,
			r = receiverName,
			c = 0,
			t = 0,
			f = receiverFunc,
			extra = {...}
		}

		local Source = debug.getinfo(receiverFunc, "S")
		if Source and Source.short_src and Source.linedefined and Source.lastlinedefined then
			GProfiler.Hooks.ProfileData[dataIdent].Source = Source.short_src
			GProfiler.Hooks.ProfileData[dataIdent].Lines = { Source.linedefined, Source.lastlinedefined }
		end

		GProfiler.Hooks.AddHook(hookName, receiverName, function(...)
			local startTime = SysTime()
			local result = { receiverFunc(...) }
			local endTime = SysTime()
			local deltaTime = endTime - startTime

			GProfiler.Hooks.ProfileData[dataIdent].c = GProfiler.Hooks.ProfileData[dataIdent].c + 1
			GProfiler.Hooks.ProfileData[dataIdent].t = GProfiler.Hooks.ProfileData[dataIdent].t + deltaTime

			return unpack(result)
		end, ...)
	end

	for hookName, hookReceivers in pairs(hook.GetTable()) do
		for receiverName, receiverFunc in pairs(hookReceivers) do
			profileHook(hookName, receiverName, receiverFunc)
		end
	end

	hook.Add = function(hookName, receiverName, receiverFunc, ...)
		profileHook(hookName, receiverName, receiverFunc, ...)
	end
end

function GProfiler.Hooks:RestoreHooks(ply)
	if not GProfiler.Access.HasAccess(ply or LocalPlayer()) or not GProfiler.Hooks.IsDetoured then return end

	GProfiler.Log((SERVER and "Server" or "Client") .. " hook profile stopped, sending data!", 2)
	GProfiler.Hooks.IsDetoured = false
	GProfiler.Hooks.ProfileStarted = nil

	hook.Add = GProfiler.Hooks.AddHook

	for hookName, hookReceivers in pairs(hook.GetTable()) do
		for receiverName, receiverFunc in pairs(hookReceivers) do
			if type(receiverName) ~= "string" or type(receiverFunc) ~= "function" then continue end
			local data = GProfiler.Hooks.ProfileData[string.format("%s_%s", hookName, receiverName)]
			if data then
				-- a652b5c5a2ce0ff6a3502c0bb05bd9e2f46a3e077e9e3a09b2bf35ddf159d6f2
				hook.Add(hookName, receiverName, data.f, unpack(data.extra or {}))
			end
		end
	end

	if SERVER then
		net.Start("GProfiler_Hooks_SendData")
		net.WriteUInt(table.Count(GProfiler.Hooks.ProfileData), 20)
		local i = 0
		for k, v in pairs(GProfiler.Hooks.ProfileData) do
			i = i + 1
			if i >= 1048574 then break end
			net.WriteString(v.r)
			net.WriteString(v.h)
			net.WriteUInt(tonumber(v.c) or 0, 32)
			net.WriteFloat(tonumber(v.t) or 0)
			net.WriteString(v.Source or "")
			net.WriteUInt(v.Lines and v.Lines[1] or 0, 16)
			net.WriteUInt(v.Lines and v.Lines[2] or 0, 16)
		end
		net.Send(ply)
	end
end

if SERVER then
	util.AddNetworkString("GProfiler_Hooks_ToggleServerProfile")
	util.AddNetworkString("GProfiler_Hooks_ServerProfileStatus")
	util.AddNetworkString("GProfiler_Hooks_SendData")
	util.AddNetworkString("GProfiler_Hooks_HookTbl")
	util.AddNetworkString("GProfiler_Hooks_RemoveHook")

	net.Receive("GProfiler_Hooks_ToggleServerProfile", function(len, ply)
		if not GProfiler.Access.HasAccess(ply) then return end

		local startStop = net.ReadBool()
		if startStop then
			GProfiler.Hooks:StartProfiler(ply)
			net.Start("GProfiler_Hooks_ServerProfileStatus")
			net.WriteBool(true)
			net.WriteEntity(ply)
			net.Broadcast()
		else
			GProfiler.Hooks:RestoreHooks(ply)
			net.Start("GProfiler_Hooks_ServerProfileStatus")
			net.WriteBool(false)
			net.WriteEntity(ply)
			net.Broadcast()
		end
	end)

	net.Receive("GProfiler_Hooks_HookTbl", function(len, ply)
		if not GProfiler.Access.HasAccess(ply) then return end

		local hooks = hook.GetTable()
		net.Start("GProfiler_Hooks_HookTbl")
		net.WriteUInt(table.Count(hooks), 15)
		for hookName, hookReceivers in pairs(hooks) do
			net.WriteString(hookName)
			net.WriteUInt(table.Count(hookReceivers), 10)
		end
		net.Send(ply)
	end)

	net.Receive("GProfiler_Hooks_RemoveHook", function(len, ply)
		if not GProfiler.Access.HasAccess(ply) then return end

		local hookName = net.ReadString()
		local receiverName = net.ReadString()

		if not hookName or not receiverName then return end

		hook.Remove(hookName, receiverName)
	end)
end

--addons/gprofiler/lua/gprofiler/profilers/netvars/cl_netvars.lua:
GProfiler.NetVars = GProfiler.NetVars or {}
GProfiler.NetVars.ProfileActive = GProfiler.NetVars.ProfileActive or false
GProfiler.NetVars.ProfileData = GProfiler.NetVars.ProfileData or {}
GProfiler.NetVars.StartTime = GProfiler.NetVars.StartTime or 0
GProfiler.NetVars.EndTime = GProfiler.NetVars.EndTime or 0

local TabPadding = 10
local MenuColors = GProfiler.MenuColors

function GProfiler.NetVars.DoTab(Content)
	local Header = vgui.Create("DPanel", Content)
	Header:SetSize(Content:GetWide(), 40)
	Header:SetPos(0, 10)
	Header.Paint = nil

	local StartButton = vgui.Create("DButton", Header)
	StartButton:SetText(GProfiler.NetVars.ProfileActive and GProfiler.Language.GetPhrase("profiler_stop") or GProfiler.Language.GetPhrase("profiler_start"))
	StartButton:SetTextColor(MenuColors.White)
	StartButton:SetFont("GProfiler.Menu.StartButton")
	StartButton:SizeToContents()
	StartButton:SetTall(30)
	StartButton:SetPos(Header:GetWide() - StartButton:GetWide() - TabPadding * 2, Header:GetTall() / 2 - StartButton:GetTall() / 2)
	StartButton.Paint = function(s, w, h)
		draw.RoundedBox(4, 0, 0, w, h, MenuColors.ButtonOutline)
		draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonBackground)

		if s:IsHovered() then
			draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonHover)
		end
	end

	function StartButton:DoClick()
		if GProfiler.NetVars.ProfileActive then
			GProfiler.NetVars.ProfileActive = false
			GProfiler.NetVars.EndTime = SysTime()
			net.Start("GProfiler_NetVars_ToggleServerProfile")
			net.WriteBool(false)
			net.SendToServer()
			self:SetText(GProfiler.Language.GetPhrase("profiler_start"))
		else
			GProfiler.NetVars.ProfileActive = true
			GProfiler.NetVars.StartTime = SysTime()
			net.Start("GProfiler_NetVars_ToggleServerProfile")
			net.WriteBool(true)
			net.SendToServer()
			self:SetText(GProfiler.Language.GetPhrase("profiler_stop"))
		end
	end

	local TimeRunning = vgui.Create("DLabel", Header)
	TimeRunning:SetFont("GProfiler.Menu.SectionHeader")
	TimeRunning:SetText(GProfiler.TimeRunning(GProfiler.NetVars.StartTime, GProfiler.NetVars.EndTime, GProfiler.NetVars.ProfileActive) .. "s")
	TimeRunning:SizeToContents()
	TimeRunning:SetPos(Header:GetWide() - TimeRunning:GetWide() - StartButton:GetWide() - TabPadding * 3, Header:GetTall() / 2 - TimeRunning:GetTall() / 2)
	TimeRunning:SetTextColor(MenuColors.White)
	function TimeRunning:Think()
		if GProfiler.NetVars.ProfileActive then
			self:SetText(GProfiler.TimeRunning(GProfiler.NetVars.StartTime, 0, GProfiler.NetVars.ProfileActive) .. "s")
			self:SizeToContents()
			self:SetPos(Header:GetWide() - self:GetWide() - StartButton:GetWide() - TabPadding * 3, Header:GetTall() / 2 - self:GetTall() / 2)
		end
	end

	local SectionHeader = vgui.Create("DPanel", Content)
	SectionHeader:SetSize(Content:GetWide(), 40)
	SectionHeader:SetPos(0, Header:GetTall())
	SectionHeader.Paint = nil

	local Header, HeaderText = GProfiler.Menu.CreateHeader(SectionHeader, GProfiler.Language.GetPhrase("profiler_results"), 0, 0, SectionHeader:GetWide() - 5, SectionHeader:GetTall())

	local ProfilerContent = vgui.Create("DPanel", Content)
	ProfilerContent:SetSize(Content:GetWide() - 5, Content:GetTall() - SectionHeader:GetTall() - Header:GetTall())
	ProfilerContent:SetPos(0, SectionHeader:GetTall() + Header:GetTall())
	ProfilerContent.Paint = nil

	local ProfilerResults = vgui.Create("DListView", ProfilerContent)
	ProfilerResults:SetSize(ProfilerContent:GetWide() - TabPadding * 2, ProfilerContent:GetTall() - TabPadding * 2)
	ProfilerResults:SetPos(TabPadding, TabPadding)
	ProfilerResults:SetMultiSelect(false)
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("entity"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("variable"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("type"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("times_updated"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("current_value"))

	for ent, vars in pairs(GProfiler.NetVars.ProfileData) do
		for var, types in pairs(vars) do
			for type, data in pairs(types) do
				local Line = ProfilerResults:AddLine(ent, var, type, data.TimesUpdated, data.CurValue)
				Line.OnMousePressed = function(s, l)
					local menu = DermaMenu()
					menu:AddOption(GProfiler.CopyLang("entity"), function() SetClipboardText(ent) end):SetIcon("icon16/page_copy.png")
					menu:AddOption(GProfiler.CopyLang("variable"), function() SetClipboardText(var) end):SetIcon("icon16/page_copy.png")
					menu:AddOption(GProfiler.CopyLang("type"), function() SetClipboardText(type) end):SetIcon("icon16/page_copy.png")
					menu:AddOption(GProfiler.CopyLang("times_updated"), function() SetClipboardText(data.TimesUpdated) end):SetIcon("icon16/page_copy.png")
					menu:AddOption(GProfiler.CopyLang("current_value"), function() SetClipboardText(data.CurValue) end):SetIcon("icon16/page_copy.png")
					menu:Open()
				end
			end
		end
	end

	ProfilerResults:SortByColumn(3, true)

	GProfiler.StyleDListView(ProfilerResults)
end

GProfiler.Menu.RegisterTab("Network Variables", "icon16/table_edit.png", 7, GProfiler.NetVars.DoTab, function()
	if GProfiler.NetVars.ProfileActive then
		return "", MenuColors.ActiveProfile
	end
	return nil
end)

net.Receive("GProfiler_NetVars_SendData", function(len)
	local data = {}
	local numEnts = net.ReadUInt(32)
	for i = 1, numEnts do
		local ent = net.ReadString()
		data[ent] = {}
		local numVars = net.ReadUInt(32)
		for i = 1, numVars do
			local name = net.ReadString()
			data[ent][name] = {}
			local numTypes = net.ReadUInt(32)
			for i = 1, numTypes do
				local type = net.ReadString()
				data[ent][name][type] = {
					TimesUpdated = net.ReadUInt(32),
					CurValue = net.ReadString()
				}
			end
		end
	end
	GProfiler.NetVars.ProfileData = data
end)

net.Receive("GProfiler_NetVars_ServerProfileStatus", function()
	local status = net.ReadBool()
	local ply = net.ReadEntity()
	GProfiler.NetVars.ProfileActive = status

	if ply == LocalPlayer() then
		GProfiler.Menu.OpenTab("Network Variables", GProfiler.NetVars.DoTab)
	end
end)
--addons/gprofiler/lua/gprofiler/profilers/timers/sh_timers.lua:
-- For timers, we must detour instantly, as there is no way to get timers created before the detour was created.

GProfiler.Timers = GProfiler.Timers or {}
GProfiler.Timers.Simple = GProfiler.Timers.Simple or {}
GProfiler.Timers.Create = GProfiler.Timers.Create or {}
GProfiler.Timers.IsDetoured = GProfiler.Timers.IsDetoured or false
GProfiler.Timers.OldSimpleTimer = GProfiler.Timers.OldSimpleTimer or timer.Simple
GProfiler.Timers.OldCreateTimer = GProfiler.Timers.OldCreateTimer or timer.Create

-- Chunked net messages to avoid net message overflow
local chunkSizeLimit = 65535 -- 187765611992257692146877

function GProfiler.Timers:StartProfiler(ply)
	if not GProfiler.Access.HasAccess(ply or LocalPlayer()) then return end

	if GProfiler.Timers.IsDetoured then return end

	GProfiler.Log((SERVER and "Server" or "Client") .. " timer profiler started!", 2)
	GProfiler.Timers.IsDetoured = true
	GProfiler.Timers.ProfileStarted = SysTime()

	GProfiler.Timers.Simple = {}
	GProfiler.Timers.Create = {}
end

function GProfiler.Timers:Stop(ply)
	if not GProfiler.Access.HasAccess(ply or LocalPlayer()) then return end

	if not GProfiler.Timers.IsDetoured then return end

	GProfiler.Log((SERVER and "Server" or "Client") .. " timer profile stopped, sending data!", 2)
	GProfiler.Timers.IsDetoured = false
	GProfiler.Timers.ProfileStarted = nil

	if SERVER then
		local ProfileData = table.Merge(GProfiler.Timers.Simple, GProfiler.Timers.Create)
		local chunkCount = 1
		local currentChunkSize = 0
		local chunks = {}
		for k, v in pairs(ProfileData) do
			local chunkSize = 146 + string.len(v.Type) + string.len(tostring(k)) + string.len(v.Source)
			if currentChunkSize + chunkSize > chunkSizeLimit then
				chunkCount = chunkCount + 1
				currentChunkSize = 0
			end

			if not chunks[chunkCount] then chunks[chunkCount] = {} end
			currentChunkSize = currentChunkSize + chunkSize
			table.insert(chunks[chunkCount], {k, v})
		end

		for k, v in ipairs(chunks) do
			net.Start("GProfiler_Timers_SendData")
				net.WriteBool(k == 1)
				net.WriteBool(k == table.Count(chunks))
				net.WriteUInt(table.Count(v), 32)
				for _, data in ipairs(v) do
					net.WriteString(data[2].Type)
					net.WriteString(tostring(data[1]))
					net.WriteUInt(data[2].Count, 15)
					net.WriteFloat(data[2].Delay)
					net.WriteFloat(data[2].TotalTime)
					net.WriteFloat(data[2].LongestTime)
					net.WriteFloat(data[2].AverageTime)
					net.WriteString(data[2].Source)
					net.WriteUInt(data[2].Lines[1], 14)
					net.WriteUInt(data[2].Lines[2], 14)
				end
			net.Send(ply)
		end

		if table.Count(chunks) == 0 then
			net.Start("GProfiler_Timers_SendData")
				net.WriteBool(true)
				net.WriteBool(true)
				net.WriteUInt(0, 32)
			net.Send(ply)
		end
	end
end

function GProfiler.Timers.CollectTimerData(type, name, delay, func, funcTime)
	if not GProfiler.Timers.IsDetoured then return end

	if not GProfiler.Timers[type][name] then
		local dbgInfo = debug.getinfo(func)
		GProfiler.Timers[type][name] = {
			Count = 0,
			TotalTime = 0,
			LongestTime = 0,
			AverageTime = 0,
			Func = func,
			Delay = delay,
			Source = dbgInfo.short_src,
			Lines = {dbgInfo.linedefined, dbgInfo.lastlinedefined},
			Type = type
		}
	end

	GProfiler.Timers[type][name].Count = GProfiler.Timers[type][name].Count + 1
	GProfiler.Timers[type][name].TotalTime = GProfiler.Timers[type][name].TotalTime + funcTime
	GProfiler.Timers[type][name].AverageTime = GProfiler.Timers[type][name].TotalTime / GProfiler.Timers[type][name].Count
	GProfiler.Timers[type][name].LongestTime = math.max(GProfiler.Timers[type][name].LongestTime, funcTime)
end

timer.Simple = function(delay, func, ...)
	local args = {...}
	GProfiler.Timers.OldSimpleTimer(delay, function()
		local start = SysTime()
		func(unpack(args))
		local endtime = SysTime() - start
		GProfiler.Timers.CollectTimerData("Simple", func, delay, func, endtime)
	end)
end

timer.Create = function(name, delay, reps, func, ...)
	assert(name, "timer.Create - bad argument #1 (string expected, got no value)")
	assert(delay, "timer.Create - bad argument #2 (number expected, got no value)")
	assert(reps, "timer.Create - bad argument #3 (number expected, got no value)")
	assert(func, "timer.Create - bad argument #4 (function expected, got no value)")

	name = tostring(name)

	local args = {...}
	GProfiler.Timers.OldCreateTimer(name, delay, reps, function()
		local start = SysTime()
		func(unpack(args))
		local endtime = SysTime() - start
		GProfiler.Timers.CollectTimerData("Create", name, delay, func, endtime)
	end)
end
if SERVER then
	util.AddNetworkString("GProfiler_Timers_ToggleServerProfile")
	util.AddNetworkString("GProfiler_Timers_ServerProfileStatus")
	util.AddNetworkString("GProfiler_Timers_SendData")

	net.Receive("GProfiler_Timers_ToggleServerProfile", function(len, ply)
		if not GProfiler.Access.HasAccess(ply) then return end

		local startStop = net.ReadBool()
		if startStop then
			GProfiler.Timers:StartProfiler(ply)
			net.Start("GProfiler_Timers_ServerProfileStatus")
			net.WriteBool(true)
			net.WriteEntity(ply)
			net.Broadcast()
		else
			GProfiler.Timers:Stop(ply)
			net.Start("GProfiler_Timers_ServerProfileStatus")
			net.WriteBool(false)
			net.WriteEntity(ply)
			net.Broadcast()
		end
	end)
end
--lua/autorun/gtavfambal.lua:
player_manager.AddValidModel( "Families of Carson Avenue", "models/sentry/gtav/families/famcapm.mdl" )
player_manager.AddValidModel( "Families of Chamberlain Hills", "models/sentry/gtav/families/famfopm.mdl" )
player_manager.AddValidModel( "Families of Davis", "models/sentry/gtav/families/famdnpm.mdl" )
player_manager.AddValidModel( "Families Member(Female)", "models/sentry/gtav/families/famfpm.mdl" )
player_manager.AddValidModel( "Families Boss", "models/sentry/gtav/families/ogfampm.mdl" )
player_manager.AddValidModel( "Ballas of Original Covenant", "models/sentry/gtav/ballas/ballasorigpm.mdl" )
player_manager.AddValidModel( "Ballas of East Side", "models/sentry/gtav/ballas/ballaseastpm.mdl" )
player_manager.AddValidModel( "Ballas of South Side", "models/sentry/gtav/ballas/ballassoutpm.mdl" )
player_manager.AddValidModel( "Ballas Member(Female)", "models/sentry/gtav/ballas/balfpm.mdl" )
player_manager.AddValidModel( "Ballas Boss", "models/sentry/gtav/ballas/ogbalpm.mdl" )
player_manager.AddValidModel( "Female Lost Member White", "models/sentry/gtav/lost/lostgirlwpm.mdl" )
player_manager.AddValidModel( "Female Lost Member Black", "models/sentry/gtav/lost/lostgirlbpm.mdl" )
player_manager.AddValidModel( "Street Gangster", "models/sentry/gtav/families/stpunk2pm.mdl" )
player_manager.AddValidModel( "Soucent2", "models/sentry/gtav/families/soucent2pm.mdl" )

local nextName
local tbNPCs = {}

local function AddNPC(category, name, class, model, keyvalues, weapons, spawnflags)
		list.Set("NPC",name,{Name = name,Class = class,Model = model,Category = category,KeyValues = keyvalues,Weapons = weapons, SpawnFlags = spawnflags})
		tbNPCs[name] = model
end

AddNPC("GTA V", "Families CAF Member", "npc_citizen", "models/sentry/gtav/families/famcag.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Families CAF Member (Hostile)", "npc_combine_s", "models/sentry/gtav/families/famcab.mdl", {citizentype = CT_UNIQUE, SquadName = "us"}, {"weapon_shotgun","weapon_smg1"})
AddNPC("GTA V", "Families CGF Member", "npc_citizen", "models/sentry/gtav/families/famfog.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Families CGF Member (Hostile)", "npc_combine_s", "models/sentry/gtav/families/famfob.mdl", {citizentype = CT_UNIQUE, SquadName = "us"}, {"weapon_shotgun","weapon_smg1"})
AddNPC("GTA V", "Families DNF Member", "npc_citizen", "models/sentry/gtav/families/famdng.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Families DNF Member (Hostile)", "npc_combine_s", "models/sentry/gtav/families/famdnb.mdl", {citizentype = CT_UNIQUE, SquadName = "us"}, {"weapon_shotgun","weapon_smg1"})
AddNPC("GTA V", "Families Boss", "npc_citizen", "models/sentry/gtav/families/ogfamg.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Families Boss (Hostile)", "npc_combine_s", "models/sentry/gtav/families/ogfamb.mdl", {citizentype = CT_UNIQUE, SquadName = "us"}, {"weapon_shotgun","weapon_smg1"})
AddNPC("GTA V", "Families Female Member", "npc_citizen", "models/sentry/gtav/families/famfg.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Ballas OCB Member", "npc_citizen", "models/sentry/gtav/ballas/ballasorigg.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Ballas OCB Member (Hostile)", "npc_combine_s", "models/sentry/gtav/ballas/ballasorigb.mdl", {citizentype = CT_UNIQUE, SquadName = "us"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Ballas East Member", "npc_citizen", "models/sentry/gtav/ballas/ballaseastg.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Ballas East Member (Hostile)", "npc_combine_s", "models/sentry/gtav/ballas/ballaseastb.mdl", {citizentype = CT_UNIQUE, SquadName = "us"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Ballas South Member", "npc_citizen", "models/sentry/gtav/ballas/ballassoutg.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Ballas South Member (Hostile)", "npc_combine_s", "models/sentry/gtav/ballas/ballassoutb.mdl", {citizentype = CT_UNIQUE, SquadName = "us"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Ballas Boss", "npc_citizen", "models/sentry/gtav/ballas/ogbalg.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Ballas Boss (Hostile)", "npc_combine_s", "models/sentry/gtav/ballas/ogbalb.mdl", {citizentype = CT_UNIQUE, SquadName = "us"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Ballas Female Member", "npc_citizen", "models/sentry/gtav/ballas/balfg.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Lost Female Member Black", "npc_citizen", "models/sentry/gtav/ballas/lostgirlbg.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Lost Female Member White", "npc_citizen", "models/sentry/gtav/ballas/lostgirlwg.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Street Gangster", "npc_citizen", "models/sentry/gtav/families/stpunk2g.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Street Gangster (Hostile)", "npc_combine_s", "models/sentry/gtav/families/stpunk2h.mdl", {citizentype = CT_UNIQUE, SquadName = "us"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Soucent2", "npc_citizen", "models/sentry/gtav/families/soucent2g.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Soucent2 (Hostile)", "npc_combine_s", "models/sentry/gtav/families/soucent2h.mdl", {citizentype = CT_UNIQUE, SquadName = "us"}, {"weapon_pistol","weapon_smg1"})

--lua/autorun/guard_pack.lua:
/*
	Addon by Voikanaa	
*/

player_manager.AddValidModel( "Guard_01", 		"models/player/guard_pack/guard_01.mdl" );
list.Set( "PlayerOptionsModel", "Guard_01", 	"models/player/guard_pack/guard_01.mdl" );

player_manager.AddValidModel( "Guard_02", 		"models/player/guard_pack/guard_02.mdl" );
list.Set( "PlayerOptionsModel", "Guard_02", 	"models/player/guard_pack/guard_02.mdl" );

player_manager.AddValidModel( "Guard_03", 		"models/player/guard_pack/guard_03.mdl" );
list.Set( "PlayerOptionsModel", "Guard_03", 	"models/player/guard_pack/guard_03.mdl" );

player_manager.AddValidModel( "Guard_04", 		"models/player/guard_pack/guard_04.mdl" );
list.Set( "PlayerOptionsModel", "Guard_04", 	"models/player/guard_pack/guard_04.mdl" );

player_manager.AddValidModel( "Guard_05", 		"models/player/guard_pack/guard_05.mdl" );
list.Set( "PlayerOptionsModel", "Guard_05", 	"models/player/guard_pack/guard_05.mdl" );

player_manager.AddValidModel( "Guard_06", 		"models/player/guard_pack/guard_06.mdl" );
list.Set( "PlayerOptionsModel", "Guard_06", 	"models/player/guard_pack/guard_06.mdl" );

player_manager.AddValidModel( "Guard_07", 		"models/player/guard_pack/guard_07.mdl" );
list.Set( "PlayerOptionsModel", "Guard_07", 	"models/player/guard_pack/guard_07.mdl" );

player_manager.AddValidModel( "Guard_08", 		"models/player/guard_pack/guard_08.mdl" );
list.Set( "PlayerOptionsModel", "Guard_08", 	"models/player/guard_pack/guard_08.mdl" );

player_manager.AddValidModel( "Guard_09", 		"models/player/guard_pack/guard_09.mdl" );
list.Set( "PlayerOptionsModel", "Guard_09", 	"models/player/guard_pack/guard_09.mdl" );
--lua/autorun/hl2beta_childworkers.lua:
return gluapack()()
--lua/vgui/stackerpreseteditor.lua:
return gluapack()()
--lua/autorun/lamardavis.lua:
player_manager.AddValidModel( "LamarDavis",                     "models/players/LamarDavis.mdl" )
list.Set( "PlayerOptionsModel",  "LamarDavis",                     "models/players/LamarDavis.mdl" ) 
player_manager.AddValidHands( "LamarDavis", "models/players/LamarDavisArms.mdl", 0, "00000000" )
--Add NPC
local Category = "Spike's NPCs"

local NPC = { 	Name = "Spike", 
				Class = "npc_citizen",
				Model = "models/players/LamarDavis.mdl",
				Health = "1000",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "LamarDavisAlly", NPC )

local Category = "Spike's NPCs"

local NPC = { 	Name = "Spike", 
				Class = "npc_combine_s",
				Model = "models/players/LamarDavis.mdl",
				Health = "1000",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "LamarDavisHostile", NPC )
--addons/minigame-tool-assistant/lua/minigames/languages/__language.lua:
--[[--------------------------------------------
                Language Module
--------------------------------------------]]--

local Directory = "minigames/languages/"
do
    local languages = file.Find( Directory .. "*", "LUA" )
    for _, v in ipairs( languages ) do
        if ( v == "__language.lua" ) then continue end

        if string.EndsWith( v, ".lua" ) then

            if SERVER then
                Minigames.SendCS( Directory .. v)
            end
            Minigames.AddInc( Directory .. v)

        end
    end
end

function Minigames.GetPhrase(phrase)
    return Minigames.Language[ Minigames.Config["MainLang"] ] and Minigames.Language[ Minigames.Config["MainLang"] ][phrase] or Minigames.Language["english"][phrase] or phrase
end
--addons/minigame-tool-assistant/lua/minigames/vgui/setupgame.lua:
--[[--------------------------------------------
              Minigame Setup Menu
--------------------------------------------]]--

local PlayersLastSizeX, PlayersLastSizeY = 0, 0
local PlayersLastPosX, PlayersLastPosY = 0, 0
local SubLastSizeX, SubLastSizeY = 0, 0
local LastSizeX, LastSizeY = 0, 0
local LastPosX, LastPosY = 0, 0
local IsMinized = false
local Changed = false

local PLAYER_OWNER = 1
local PLAYER_INGAME = 2
local PLAYER_INGAME_OTHER = 3
local PLAYER_NOT_INGAME = 4

local Grayest = Color(170, 170, 170, 40)

--[[----------------------------
           Reward Menu
----------------------------]]--

local PANEL = {}

function PANEL:Init()
    local TargetWidth = math.max(ScrW() * 0.2, 240)

    self.PlayerList = vgui.Create("Minigames.PlayerList")
    self.PlayerList:Center()
    self.PlayerList:SetX(20)

    self.PlayerList.PlayersCanHearOwner:SetDisabled( Minigames.GetOwnerGame(LocalPlayer()) == nil )
    self.PlayerList.MuteAllPlayers:SetDisabled( Minigames.GetOwnerGame(LocalPlayer()) == nil )
    self.PlayerList.PlayersCanHearThemselves:SetDisabled( Minigames.GetOwnerGame(LocalPlayer()) == nil )

    if Changed then
        self:SetPos(LastPosX, LastPosY)
        self:SetSize(LastSizeX, LastSizeY)
        self.PlayerList:SetPos(PlayersLastPosX, PlayersLastPosY)
        self.PlayerList:SetSize(PlayersLastSizeX, PlayersLastSizeY)

        RestoreCursorPosition()
    else
        self:SetSize(TargetWidth, ScrH() * 0.92)
        self:Center()
        self:SetX(ScrW() - self:GetWide() - 20)
    end

    self:SetDraggable(true)
    self:SetMinWidth(TargetWidth)
    self:SetMinHeight(300)
    self:SetSizable(true)
    self:SetTitle("Minigame Setup Menu")
    self:MakePopup()

    self.btnMinim:SetEnabled(true)
    self.btnMinim.DoClick = function(SubSelf)
        if IsMinized then return end

        self:SetSizable(false)
        SubLastSizeX, SubLastSizeY = self:GetSize()
        self:SetSize(TargetWidth, 24)
        self.ToggleGame:SetVisible(false)
        self.HorizontalLine2:SetVisible(false)

        IsMinized = true
    end

    self.btnMaxim:SetEnabled(true)
    self.btnMaxim.DoClick = function(SubSelf)
        if SubLastSizeX ~= 0 and SubLastSizeY ~= 0 then
            self:SetSizable(true)
            self:SetSize(SubLastSizeX, SubLastSizeY)
            self.ToggleGame:SetVisible(true)
            self.HorizontalLine2:SetVisible(true)

            IsMinized = false
        end
    end

    self.Paint = Minigames.Paint

    self.RewardConfigPanel = self:Add("Minigames.RewardConfig")
    self.RewardConfigPanel:Dock(TOP)
    self.RewardConfigPanel:DockMargin(5, 5, 5, 5)
    self.RewardConfigPanel:SetTall(170)

    local HorizontalLine = self:Add("Panel")
    HorizontalLine:Dock(TOP)
    HorizontalLine:DockMargin(4, 4, 4, 4)
    HorizontalLine:SetTall(1)
    HorizontalLine.Paint = function(_, w, h)
        surface.SetDrawColor(Grayest)
        surface.DrawRect(0, 0, w, h)
    end

    self.GameConfigPanel = self:Add("Minigames.GameConfig")
    self.GameConfigPanel:Dock(FILL)
    self.GameConfigPanel.Container:Dock(FILL)
    self.GameConfigPanel:PostInit()
    self.GameConfigPanel:SetGameID( GetConVar("minigames_game"):GetString() )

    self.ToggleGame = self:Add("Minigames.ToggleGame")
    self.ToggleGame:Dock(BOTTOM)
    self.ToggleGame:DockMargin(5, 5, 5, 5)
    self.ToggleGame:SetTall(32)

    self.HorizontalLine2 = self:Add("Panel")
    self.HorizontalLine2:Dock(BOTTOM)
    self.HorizontalLine2:DockMargin(4, 4, 4, 4)
    self.HorizontalLine2:SetTall(1)
    self.HorizontalLine2.Paint = function(_, w, h)
        surface.SetDrawColor(Grayest)
        surface.DrawRect(0, 0, w, h)
    end

    self.OnSizeChanged = function(_, w, h)
        LastSizeX, LastSizeY = w, h
    end

    self.OnRemove = function()
        self.GameConfigPanel:SaveScroll()
    end

    self.OnClose = function()
        self.RewardConfigPanel:ClosePopUp()
        LastPosX, LastPosY = self:GetPos()
        LastSizeX, LastSizeY = self:GetSize()
        PlayersLastPosX, PlayersLastPosY = self.PlayerList:GetPos()
        PlayersLastSizeX, PlayersLastSizeY = self.PlayerList:GetSize()
        self.PlayerList:Close()

        Changed = true
    end

    -- Menu is minimized
    if IsMinized then
        self.ToggleGame:SetVisible(false)
        self.HorizontalLine2:SetVisible(false)
    end
end

vgui.Register("Minigames.SetupMenu", PANEL, "DFrame")

--[[----------------------------
           Networking
----------------------------]]--

local MinigameSetupMenu
net.Receive("Minigames.SetupMenu", function()
    if IsValid(MinigameSetupMenu) then return end

    MinigameSetupMenu = vgui.Create("Minigames.SetupMenu")
end)

net.Receive("Minigames.BroadcastGameJoin", function()
    local State = net.ReadBool()
    if IsValid(MinigameSetupMenu) then
        MinigameSetupMenu.PlayerList.BroadcastGameJoin:SetEnabled(not State)
    end
end)

--[[----------------------------
              Hooks
----------------------------]]--

hook.Add("Minigames.TogglePlayer", "Minigames.UpdateState", function(ply, Owner, State)
    if IsValid(MinigameSetupMenu) and IsValid(ply) then
        local TargetState = ply == Owner and PLAYER_OWNER or PLAYER_NOT_INGAME
        if State then
            if Owner == LocalPlayer() then
                TargetState = PLAYER_INGAME
            else
                TargetState = PLAYER_INGAME_OTHER
            end
        end
        MinigameSetupMenu.PlayerList.PlayerLinkedToPanel[ply].State = TargetState
    end
end)

hook.Add("Minigames.RewardAdded", "Minigames.UpdateReward", function(Owner, Reward)
    if Owner ~= LocalPlayer() then return end

    if IsValid(MinigameSetupMenu) then
        MinigameSetupMenu.RewardConfigPanel:AddReward(Reward)
    end
end)

hook.Add("Minigames.RewardRemoved", "Minigames.UpdateReward", function(Owner, Index)
    if Owner ~= LocalPlayer() then return end

    if IsValid(MinigameSetupMenu) then
        MinigameSetupMenu.RewardConfigPanel.Container:Clear()
        MinigameSetupMenu.RewardConfigPanel:AddAllRewards()
    end
end)

hook.Add("Minigames.GameStart", "Minigames.GameStart", function(Owner, GameScript)
    if Owner ~= LocalPlayer() then return end

    if IsValid(MinigameSetupMenu) then
        MinigameSetupMenu.PlayerList.BroadcastGameJoin:SetEnabled(false)
    end
end)

hook.Add("Minigames.GameStop", "Minigames.GameStop", function(Owner, GameScript)
    if Owner ~= LocalPlayer() then return end

    if IsValid(MinigameSetupMenu) and GetGlobal2Entity("Minigames.CurrentGameWaiting", NULL) == NULL then
        MinigameSetupMenu.PlayerList.BroadcastGameJoin:SetEnabled(true)
    end
end)
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/owner.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/sound.lua:
--[[--------------------------------------------
            Minigame Module - Util
--------------------------------------------]]--

if SERVER then
    util.AddNetworkString("Minigames.PlaySound")
    util.AddNetworkString("Minigames.PlayWorldSound")
end

local MUSIC_PLAY = 1
local MUSIC_STOP = 2
local MUSIC_STOPALL = 3

local DefaultUInt = 2

--[[----------------------------
            PlaySound
----------------------------]]--

function MinigameObject:PlaySound(Targets, Snd)
    if CLIENT then return end

    Targets = ( IsValid(Targets) and Targets:IsPlayer() ) and {Targets} or Targets

    self:Checker(Targets, "table", 1)
    self:Checker(Snd, "string", 2)

    net.Start("Minigames.PlaySound")
        net.WriteString(Snd)
    net.Send(Targets)
end

net.Receive("Minigames.PlaySound", function()
    surface.PlaySound(net.ReadString())
end)

function MinigameObject:PlayGameStartSound()
    local Players = self:GetPlayers(true)
    table.insert(Players, self:GetOwner())

    self:PlaySound(Players, Minigames.Config["OnBeginGameSound"])
end

function MinigameObject:PlayGameEndSound()
    local Players = self:GetPlayers(true)
    table.insert(Players, self:GetOwner())

    self:PlaySound(Players, Minigames.Config["OnStopGameSound"])
end


--[[----------------------------
        Background Music
----------------------------]]--

MinigameObject.__LoadedSounds = {}
MinigameObject.__CurrentSound = nil

function MinigameObject:PlayWorldSound( FileName, IsLoop, Targets )
    if SERVER then
        net.Start("Minigames.PlayWorldSound")
            net.WritePlayer(self:GetOwner())
            net.WriteUInt(MUSIC_PLAY, DefaultUInt)
            net.WriteString(FileName)
            net.WriteBool(IsLoop or false)

        if IsValid(Targets) then
            net.Send(Targets)
        else
            Targets = self:GetPlayers(true)
            table.insert(Targets, self:GetOwner())
            net.Send(Targets)
        end

        return
    end

    sound.PlayFile(FileName, "noplay", function( WorldSound, ErrorID, ErrorName )
        if IsValid(WorldSound) then
            self.__LoadedSounds[FileName] = WorldSound

            if IsValid(self.__CurrentSound) then
                self.__CurrentSound:Stop()
            end

            self.__CurrentSound = WorldSound

            WorldSound:Play()
            WorldSound:SetVolume( Minigames.Config["PlayMusicVolume"] )
            WorldSound:SetTime(0)

            if IsLoop then
                WorldSound:EnableLooping(true)
            end
        else
            Minigames.ThrowError("There was a problem playing the sound file", ErrorID, ErrorName)
        end
    end)
end

function MinigameObject:StopWorldSound( FileName )
    if SERVER then
        net.Start("Minigames.PlayWorldSound")
            net.WritePlayer(self:GetOwner())
            net.WriteUInt(MUSIC_STOP, DefaultUInt)
            net.WriteString(FileName)
        net.Broadcast()

        return
    end

    if FileName == nil and IsValid(self.__CurrentSound) then
        self.__CurrentSound:Stop()
        self.__CurrentSound = nil
    end

    if self.__LoadedSounds[FileName] then
        self.__LoadedSounds[FileName]:Stop()
        self.__LoadedSounds[FileName] = nil
    end
end

function MinigameObject:StopAllWorldSounds(Target)
    if SERVER then
        net.Start("Minigames.PlayWorldSound")
            net.WritePlayer(self:GetOwner())
            net.WriteUInt(MUSIC_STOPALL, DefaultUInt)
        if istable(Target) or ( isentity(Target) and Target:IsPlayer() ) then
            net.Send(Target)
        else
            net.Broadcast()
        end

        return
    end

    if IsValid(self.__CurrentSound) then
        self.__CurrentSound:Stop()
        self.__CurrentSound = nil
    end

    for _, Sound in pairs(self.__LoadedSounds) do
        if IsValid(Sound) then
            Sound:Stop()
        end
    end

    self.__LoadedSounds = {}
end

if CLIENT then
    net.Receive("Minigames.PlayWorldSound", function()
        local Owner = net.ReadPlayer()
        local GameScript = Minigames.GetOwnerGame(Owner)

        if not istable(GameScript) then return end

        local Action = net.ReadUInt(DefaultUInt)
        local FileName = net.ReadString()

        if Action == MUSIC_PLAY then
            GameScript:PlayWorldSound(FileName, net.ReadBool())
        elseif Action == MUSIC_STOP then
            GameScript:StopWorldSound(FileName)
        elseif Action == MUSIC_STOPALL then
            GameScript:StopAllWorldSounds()
        end
    end)
end
--addons/minigame-tool-assistant/lua/minigames/games/dropout.lua:
--[[--------------------------------------------
                    Drop Out
--------------------------------------------]]--

local MainOffset = 94.95968

local RedColor = Color(255, 0, 0)
local KillBoxOffset = Vector(300, -300, 0)
local KillBoxHeight = Vector(0, 0, 60)

local RandomAngles = {}
for i = 1, 7 do
    table.insert( RandomAngles, Angle(math.random(-180, 180), math.random(-180, 180), math.random(-180, 180)) )
end

local LOOP_MUSIC = true

--[[----------------------------
       Initial Game Config
----------------------------]]--

local GameScript = Minigames.CreateNewGame()

GameScript:SetGameName("Drop Out Neo")
GameScript:AddHeader("!gameconfig")

GameScript:AddConfig("Increment", {
    min = 0,
    max = 20,
    def = 1
})
GameScript:AddConfig("Delay", {
    min = 0.1,
    max = 4,
    dec = 1,
    def = 2.2
})
GameScript:AddConfig("TimeReaction", {
    min = 0.2,
    max = 3,
    dec = 1,
    def = 0.8
})

GameScript:AddHeader("!playzoneconfig")

GameScript:AddConfig("SizeX", {
    min = 1,
    max = 20,
    def = 5
})
GameScript:AddConfig("SizeY", {
    min = 1,
    max = 20,
    def = 5
})
GameScript:AddConfig("Offset", {
    min = 0,
    max = 200,
    dec = 1,
    def = 0
})
GameScript:AddConfig("Height", {
    min = 150,
    max = 2048,
    def = 150
})


--[[----------------------------
           Custom Vars
----------------------------]]--

GameScript.TeleportOffset = Vector(0, 0, 50)
GameScript.FullyStarted = false

--[[----------------------------
        Trigger Events
----------------------------]]--

GameScript:AddHook( "PostPlayerDeath", "GetFallDamage" )

function GameScript:OnPlayerChanged(ply, Joined)
    if not self:IsActive() then return end

    local CurrentPlayers = self:GetPlayers(true)

    if #CurrentPlayers == 1 then
        self:SetPlayerWinner( CurrentPlayers[1] )
        self:StopGame()
    elseif #CurrentPlayers < 1 then
        self:StopGame()
    end

    -- Is very uncanny to see IsActive after check the game isn't active
    if
        Minigames.Config["PlayMusic"] and
        self:IsActive() and
        #CurrentPlayers <= Minigames.Config["PlayersToFastMusic"]
    then
        self:PlayWorldSound( "sound/" .. Minigames.Config["BackgroundMusicFast"], LOOP_MUSIC )
    end
end


--[[----------------------------
           Game Events
----------------------------]]--

GameScript:AddNewVar("GamePaused", "bool", false)

function GameScript:Pause()
    if not self:IsActive() then return false end

    local State = self:ToggleGamePaused()

    if self.MainTimer then
        self.MainTimer:Pause(State)
    elseif self.BeginTimer then
        self.BeginTimer:Pause(State)
    end

    return true
end


--[[----------------------------
        Plataforms Manager
----------------------------]]--

function GameScript:FirstStage(Amount, Entities)
    local RandomEntities = {}

    for i = 1, Amount do
        local ent = table.remove( Entities, math.random(1, #Entities) )
        table.insert( RandomEntities, ent )
    end

    return RandomEntities
end

function GameScript:SecondStage(Entities, State)
    for _, ent in ipairs( Entities ) do
        ent:SetState(State)
    end
end


--[[----------------------------
            Main Game
----------------------------]]--


function GameScript:FullyStartGame()
    local TimeReaction = math.max( self["TimeReaction"], 0.1 )
    local Increment = math.max( self["Increment"], 1 )
    local Delay = math.max( self["Delay"], 0.1 )

    self.MainTimer = self:CreateChronometer("Main")
    self.MainTimer:SetLoop(true)
    self.MainTimer:SetVariable({["Increment"] = Increment, Entities = self:GetAllEntities("Floor")})

    self.MainTimer:Wait(Delay)
    self.MainTimer:AddAction(function(Var)
        Var["Picked"] = self:FirstStage(Var["Increment"], Var["Entities"])

        self:SecondStage( Var["Picked"], 2 )
    end)

    self.MainTimer:Wait(TimeReaction)
    self.MainTimer:AddAction(function(Var)
        self:SecondStage( Var["Picked"], 0 )
    end)
    self.MainTimer:Start()

    if Minigames.Config["PlayMusic"] then
        self:PlayWorldSound( "sound/" .. Minigames.Config["BackgroundMusic"], LOOP_MUSIC )
    end

    self.FullyStarted = true
end

function GameScript:StartGame()
    self:TeleportPlayers(self:GetAllEntities("Floor"))

    self.BeginTimer = self:CreateChronometer("Begin")
    self.BeginTimer:SetLoop(7)
    self.BeginTimer:SetVariable({["Start"] = 0, ["Entities"] = self:GetAllEntities("Floor")})

    self.BeginTimer:AddAction(function(Var, SelfTimer)
        if ( Var["Start"] % 2 == 0 ) then
            self:SecondStage( Var["Entities"], 11 )
        else
            self:SecondStage( Var["Entities"], 1 )
        end

        if Var["Start"] == 6 then
            self:FullyStartGame()
        end

        Var["Start"] = Var["Start"] + 1
    end)
    self.BeginTimer:Wait(0.5)
    self.BeginTimer:Start()

    self:PlayGameStartSound()

    return Minigames.GameStart( self )
end

function GameScript:StopGame()
    self:RemoveChronometer("Begin")
    self:RemoveChronometer("Main")

    for _, ent in ipairs( self:GetAllEntities("Floor") ) do
        ent:SetState(1)
    end

    self.FullyStarted = false

    return Minigames.GameStop( self )
end

function GameScript:ToggleGame()
    local Result = false

    self.TimeReaction = self:GetOwnerConfig("TimeReaction")
    self.Increment = self:GetOwnerConfig("Increment")
    self.Delay = self:GetOwnerConfig("Delay")

    if self:IsActive() then
        Result = self:StopGame()
    else
        Result = self:StartGame()
    end

    return Result
end


function GameScript:SpawnGame( trace )

    --[[--------------------------------
            Initial Configuration
    --------------------------------]]--
    local SizeX = self:GetOwnerConfig("SizeX")
    local SizeY = self:GetOwnerConfig("SizeY")
    local Offset = self:GetOwnerConfig("Offset")

    --[[--------------------------------
              Initial Game Pos
    --------------------------------]]--
    local Pos = trace.HitPos + trace.HitNormal * self:GetOwnerConfig("Height")
    local PosOffset = Vector(
        math.Round( ( ( Offset + MainOffset ) * ( SizeX - 1 ) ) / 2, 0 ),
        math.Round( ( -( Offset + MainOffset ) * ( SizeY - 1 ) ) / 2, 0 ),
        0
    )
    Pos:Sub( PosOffset )

    --[[--------------------------------
              Creation of Game
    --------------------------------]]--

    --[[------------------------
              Plataforms
    ------------------------]]--
    for i = 0, SizeX - 1 do
        local square = self:CreateEntity("minigame_square", "Floor")
        square:SetPos( Pos + Vector( (Offset + MainOffset) * i, 0, 0 ) )
        square:SetState(1)
        square:Spawn()
        square.InitialPosition = square:GetPos()
        square.InitialAngles = square:GetAngles()

        for y = 1, SizeY - 1 do
            local g_square = self:CreateEntity("minigame_square", "Floor")
            g_square:SetPos( square:GetPos() + Vector(0, -( Offset + MainOffset ) * y ) )
            g_square:SetState(1)
            g_square:Spawn()
            g_square.InitialPosition = g_square:GetPos()
            g_square.InitialAngles = g_square:GetAngles()
        end
    end

    --[[------------------------
              Kill Box
    ------------------------]]--
    local KillBoxPos = trace.HitPos + trace.HitNormal * ( self:GetOwnerConfig("Height") + 3 ) - KillBoxHeight
    local KillBoxX = ( Offset + MainOffset - 1 ) * SizeX
    local KillBoxY = ( Offset + MainOffset - 1 ) * SizeY
    local KillBoxBounds = Vector( KillBoxX - ( KillBoxX / 2 ), -KillBoxY - ( -KillBoxY / 2 ), 1.5 ) + KillBoxOffset

    self:CreateTrigger(KillBoxPos + KillBoxBounds, KillBoxPos + -KillBoxBounds, Minigames.Enum.KILL_ONTOUCH)
    self:SpawnPlayZone()

    self.DefaultTeleportEntities = self:GetAllEntities("Floor")

    return true
end


--[[----------------------------
           Pre-Render
----------------------------]]--

function GameScript:UpdateBoxGame( trace, owner )
    local ClientGameScript = Minigames.GetOwnerGame( LocalPlayer() )

    local Offset = MainOffset + self:GetOwnerConfig("Offset")
    local SizeX = Offset * ( self:GetOwnerConfig("SizeX") ) - self:GetOwnerConfig("Offset")
    local SizeY = Offset * ( self:GetOwnerConfig("SizeY") ) - self:GetOwnerConfig("Offset")
    local HitPos = trace.HitPos + trace.HitNormal * ( self:GetOwnerConfig("Height") + 3 )

    local Bounds = Vector( SizeX - ( SizeX / 2 ), -SizeY - ( -SizeY / 2 ), 1.5 )
    local KillBox = Bounds + KillBoxOffset

    if
        ( not trace.Hit ) or
        ( IsValid( trace.Entity ) and trace.Entity:IsPlayer() ) or
        ( istable( ClientGameScript ) )
    then
        hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawBox")
    else
        hook.Add("PostDrawTranslucentRenderables", "Minigames.DrawBox", function()
            render.DrawWireframeBox( HitPos - KillBoxHeight, angle_zero, KillBox, -KillBox, RedColor, true )
            render.DrawWireframeBox( HitPos, angle_zero, Bounds, -Bounds, color_white, true )
        end)
    end
end


--[[----------------------------
            Spawn Game
----------------------------]]--

function GameScript:LeftClick( trace, owner, FirstTime )
    local Response = false

    if FirstTime then
        Response = self:SpawnGame( trace, owner )
    else
        if IsValid( trace.Entity ) and trace.Entity:IsPlayer() then
            Response = self:TogglePlayer( trace.Entity )
        end
    end

    return Response
end


function GameScript:RightClick( trace, owner )
    return self:ToggleGame()
end

function GameScript:Reload( trace )
    if SERVER then
        return self:Pause()
    end
end

function GameScript:Think( trace, owner )
    if CLIENT then
        self:UpdateBoxGame( trace )
    end
end

function GameScript:RollUp( trace )
    if CLIENT then
        hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawBox")
    end
end

Minigames.RegisterNewGame(GameScript)
--addons/minigame-tool-assistant/lua/minigames/games/simonsays.lua:
--[[--------------------------------------------
                    Simon Says
--------------------------------------------]]--

local MainOffset = 94.95968

local RedColor = Color(255, 0, 0)

local FakeOffset = 305
local FakeBoundsX = 142.849998
local FakeBoundsY = 5.3625
local FakeHeight = Vector(0, 0, FakeBoundsX + 4)
local FakeScreenBounds = Vector( FakeBoundsX / 2, -FakeBoundsX / 2, FakeBoundsY )

local KillBoxOffset = Vector(300, -300, 0)
local KillBoxHeight = Vector(0, 0, 60)

local NorthVec = Vector( 0, 200, 150 )
local SouthVec = Vector( 0, -200, 150 )
local EastVec = Vector( 200, 0, 150 )
local WestVec = Vector( -200, 0, 150 )

local AngY = Angle(90, 90, 0)
local AngX = Angle(90, 180, 0)

local LOOP_MUSIC = true

--[[----------------------------
       Initial Game Config
----------------------------]]--

local GameScript = Minigames.CreateNewGame()

GameScript:SetGameName("Simon Says")

GameScript:AddHeader("!gameconfig")

GameScript:AddConfig("SameColors", {
    def = true
})

GameScript:AddConfig("AmountColors", {
    min = 2,
    max = 7,
    def = 4
})

GameScript:AddConfig("TimeReaction", {
    min = 0.1,
    max = 2,
    dec = 2,
    def = 0.5
})

GameScript:AddConfig("SubstractTimeReaction", {
    min = 0,
    max = 0.5,
    dec = 2,
    def = 0.06
})

GameScript:AddConfig("Delay", {
    min = 0.1,
    max = 6,
    dec = 1,
    def = 2.4
})

GameScript:AddConfig("SubstractTime", {
    min = 0,
    max = 0.6,
    dec = 2,
    def = 0.15
})

GameScript:AddHeader("!playzoneconfig")

GameScript:AddConfig("SizeX", {
    min = 4,
    max = 20,
    def = 5
})

GameScript:AddConfig("SizeY", {
    min = 4,
    max = 20,
    def = 5
})

GameScript:AddConfig("Offset", {
    min = 0,
    max = 200,
    def = 50,
    dec = 1
})

GameScript:AddConfig("Height", {
    min = 150,
    max = 2048,
    def = 150
})

GameScript:ListenToConfig("SameColors", function(self, NewVal)
    self.AmountColors = NewVal
    self:ShuffleColors()
end)


--[[----------------------------
        Trigger Events
----------------------------]]--

GameScript:AddHook( "PostPlayerDeath", "GetFallDamage" )

function GameScript:OnPlayerChanged(ply, Joined)
    if not self:IsActive() then return end

    local CurrentPlayers = self:GetPlayers(true)

    if #CurrentPlayers == 1 then
        self:SetPlayerWinner( CurrentPlayers[1] )
        self:StopGame()
    elseif #CurrentPlayers < 1 then
        self:StopGame()
    end

    -- Is very uncanny to see IsActive after check the game isn't active
    if
        Minigames.Config["PlayMusic"] and
        self:IsActive() and
        #CurrentPlayers <= Minigames.Config["PlayersToFastMusic"]
    then
        self:PlayWorldSound( "sound/" .. Minigames.Config["BackgroundMusicFast"], LOOP_MUSIC )
    end
end

--[[----------------------------
           Variables
----------------------------]]--

GameScript.TeleportOffset = Vector(0, 0, 20)

GameScript:AddNewVar("GamePaused", "bool", false)

function GameScript:Pause()
    if not self:IsActive() then return false end

    local State = self:ToggleGamePaused()

    if self.MainTimer then
        self.MainTimer:Pause(State)
    end

    if self.BeginTimer then
        self.BeginTimer:Pause(State)
    end

    return true
end

--[[--------------------------------
          Squares Management
--------------------------------]]--

function GameScript:ShuffleColors()
    local AmountColors = self.AmountColors or self:GetOwnerConfig("AmountColors")
    local AllEntities = self:GetAllEntities("Floor")

    local ColorPerSquare = math.floor( #AllEntities / AmountColors )
    self.EntitiesColored = {}

    for i = 1, AmountColors do
        self.EntitiesColored[i] = {}

        for j = 1, ColorPerSquare do
            local Square = table.remove( AllEntities, math.random( #AllEntities ) )
            table.insert( self.EntitiesColored[i], Square )
        end
    end

    local Rest = #AllEntities
    for i = 1, Rest do
        local Square = table.remove( AllEntities, math.random( #AllEntities ) )
        table.insert( self.EntitiesColored[math.random( #self.EntitiesColored )], Square )
    end

    for NewColor, Entities in pairs( self.EntitiesColored ) do
        for _, Square in ipairs( Entities ) do
            Square:SetState(NewColor)
        end
    end
end

function GameScript:DissapearSquares( state )
    for NewColor, Entities in pairs( self.EntitiesColored ) do
        if ( NewColor == state ) then continue end

        for _, Square in ipairs( Entities ) do
            Square:SetState(0)
        end
    end
end

function GameScript:ResetSquares()
    if self.SameColors then
        for NewColor, Entities in pairs( self.EntitiesColored ) do
            for _, Square in ipairs( Entities ) do
                Square:SetState(NewColor)
            end
        end
    else
        self:ShuffleColors()
    end
end


--[[--------------------------------
          Minigame Creation
--------------------------------]]--

function GameScript:SpawnGame( trace )

    --[[--------------------------------
            Initial Configuration
    --------------------------------]]--
    local SizeX = self:GetOwnerConfig("SizeX")
    local SizeY = self:GetOwnerConfig("SizeY")
    local Offset = self:GetOwnerConfig("Offset")
    local Height = self:GetOwnerConfig("Height")


    --[[--------------------------------
              Initial Game Pos
    --------------------------------]]--
    local CenterPos = trace.HitPos + trace.HitNormal * Height
    local PosOffset = Vector(
        math.Round( ( ( Offset + MainOffset ) * ( SizeX - 1 ) ) / 2, 0 ),
        math.Round( ( -( Offset + MainOffset ) * ( SizeY - 1 ) ) / 2, 0 ),
        0
    )
    local Pos = CenterPos - PosOffset

    local UpperRight = vector_origin
    local UpperLeft = vector_origin
    local LowerRight = vector_origin
    local LowerLeft = vector_origin

    --[[------------------------
                Floor
    ------------------------]]--
    for X = 0, SizeX - 1 do
        local SquareX = self:CreateEntity("minigame_square", "Floor")
        SquareX:SetPos( Pos + Vector( (Offset + MainOffset) * X, 0, 0 ) )
        SquareX:Spawn()

        if X == 0 then
            UpperLeft = SquareX:GetPos()
        elseif X == SizeX - 1 then
            UpperRight = SquareX:GetPos()
        end

        for Y = 1, SizeY - 1 do
            local SquareY = self:CreateEntity("minigame_square", "Floor")
            SquareY:SetPos( SquareX:GetPos() + Vector(0, -( Offset + MainOffset ) * Y ) )
            SquareY:Spawn()

            if X == 0 then
                LowerLeft = SquareY:GetPos()
            elseif X == SizeX - 1 then
                LowerRight = SquareY:GetPos()
            end
        end
    end

    self:ShuffleColors()

    --[[------------------------
            Screen Colors
    ------------------------]]--
    local NorthScreen = self:CreateEntity("minigame_bigsquare", "Screens")
    NorthScreen:SetPos( LerpVector( 0.5, UpperLeft, UpperRight ) + NorthVec )
    NorthScreen:SetAngles( AngY )
    NorthScreen:Spawn()

    local SouthScreen = self:CreateEntity("minigame_bigsquare", "Screens")
    SouthScreen:SetPos( LerpVector( 0.5, LowerLeft, LowerRight ) + SouthVec )
    SouthScreen:SetAngles( AngY )
    SouthScreen:Spawn()

    local EastScreen = self:CreateEntity("minigame_bigsquare", "Screens")
    EastScreen:SetPos( LerpVector( 0.5, UpperRight, LowerRight ) + EastVec )
    EastScreen:SetAngles( AngX )
    EastScreen:Spawn()

    local WestScreen = self:CreateEntity("minigame_bigsquare", "Screens")
    WestScreen:SetPos( LerpVector( 0.5, UpperLeft, LowerLeft ) + WestVec )
    WestScreen:SetAngles( AngX )
    WestScreen:Spawn()

    for _, screens in ipairs( self:GetAllEntities("Screens") ) do
        screens:SetState(-2)
    end

    --[[------------------------
              Kill Box
    ------------------------]]--
    local KillBoxPos = trace.HitPos + trace.HitNormal * ( Height + 3 ) - KillBoxHeight
    local KillBoxX = ( Offset + MainOffset - 1 ) * SizeX
    local KillBoxY = ( Offset + MainOffset - 1 ) * SizeY
    local KillBoxBounds = Vector( KillBoxX - ( KillBoxX / 2 ), -KillBoxY - ( -KillBoxY / 2 ), 1.5 ) + KillBoxOffset

    self:CreateTrigger(KillBoxPos + KillBoxBounds, KillBoxPos + -KillBoxBounds, Minigames.Enum.KILL_ONTOUCH)
    self:SpawnPlayZone()

    self.DefaultTeleportEntities = self:GetAllEntities("Floor")

    return true
end


--[[--------------------------------
        Minigame Management
--------------------------------]]--

function GameScript:FullyStartGame()
    local SubstractTimeReaction = self.SubstractTimeReaction
    local SubstractTime = self.SubstractTime
    local TimeReaction = self.TimeReaction
    local AmountColors = self.AmountColors
    local Delay = self.Delay

    local MainTimer = self:CreateChronometer("Main")
    MainTimer:SetLoop(true)
    MainTimer:SetVariable({["RandomColor"] = -1, ["Screens"] = self:GetAllEntities("Screens")})

    MainTimer:Wait(Delay, function(v) return math.max(v - SubstractTime, 0.1) end)
    MainTimer:AddAction(function(var)
        var["RandomColor"] = math.random( AmountColors )

        for _, screens in ipairs( self:GetAllEntities("Screens") ) do
            screens:SetState(var["RandomColor"])
        end
    end)

    MainTimer:Wait(TimeReaction, function(v) return math.max(v - SubstractTimeReaction, 0.1) end)
    MainTimer:AddAction(function(var)
        self:DissapearSquares(var["RandomColor"])
    end)
    MainTimer:Wait(0.8)
    MainTimer:AddAction(function(var)
        self:ResetSquares()

        for _, screens in ipairs( self:GetAllEntities("Screens") ) do
            screens:SetState(-2)
        end
    end)
    MainTimer:Start()

    if Minigames.Config["PlayMusic"] then
        self:PlayWorldSound( "sound/" .. Minigames.Config["BackgroundMusic"], LOOP_MUSIC )
    end

    self.FullyStarted = true
end

function GameScript:StartGame()
    self:TeleportPlayers(self:GetAllEntities("Floor"))
    self:ShuffleColors()

    local Players = self:GetPlayers(true)
    for _, ply in ipairs( Players ) do
        ply:SetLocalVelocity( vector_origin )
    end

    local BeginTimer = self:CreateChronometer("Begin")
    BeginTimer:SetLoop(8)
    BeginTimer:SetVariable({["Count"] = 1})

    BeginTimer:AddAction(function(Var)
        if Var.Count % 2 == 0 then
            for _, ent in ipairs( self:GetAllEntities("Screens") ) do
                ent:SetState(-12)
            end
        else
            for _, ent in ipairs( self:GetAllEntities("Screens") ) do
                ent:SetState(-2)
            end
        end

        if Var.Count == 8 then
            self:FullyStartGame()
        end

        Var.Count = Var.Count + 1
    end)
    BeginTimer:Wait(3.5 / 8)
    BeginTimer:Start()

    self:PlayGameStartSound()
    return Minigames.GameStart( self:GetOwner() )
end

function GameScript:StopGame()
    self:RemoveChronometer("Begin")
    self:RemoveChronometer("Main")

    self:ResetSquares()
    for _, Screen in ipairs( self:GetAllEntities("Screens") ) do
        Screen:SetState(-2)
    end

    return Minigames.GameStop( self:GetOwner() )
end

function GameScript:ToggleGame()
    local Result = false

    self.SubstractTimeReaction = self:GetOwnerConfig("SubstractTimeReaction")
    self.SubstractTime = self:GetOwnerConfig("SubstractTime")
    self.TimeReaction = self:GetOwnerConfig("TimeReaction")
    self.AmountColors = self:GetOwnerConfig("AmountColors")
    self.SameColors = self:GetOwnerConfig("SameColors")
    self.Delay = self:GetOwnerConfig("Delay")

    if self:IsActive() then
        Result = self:StopGame()
    else
        Result = self:StartGame()
    end

    return Result
end

--[[----------------------------
           Pre-Render
----------------------------]]--

function GameScript:UpdateBoxGame( trace )
    if Minigames.GetOwnerGame( LocalPlayer() ) then hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawBox") return end

    local Offset = MainOffset + self:GetOwnerConfig("Offset")
    local SizeX = Offset * ( self:GetOwnerConfig("SizeX") ) - self:GetOwnerConfig("Offset")
    local SizeY = Offset * ( self:GetOwnerConfig("SizeY") ) - self:GetOwnerConfig("Offset")
    local HitPos = trace.HitPos + trace.HitNormal * ( self:GetOwnerConfig("Height") + 3 )

    local Bounds = Vector( SizeX - ( SizeX / 2 ), -SizeY - ( -SizeY / 2 ), 1.5 )
    local KillBox = Bounds + KillBoxOffset

    local TopLevel = HitPos + FakeHeight

    -- Dependiendo del tamaño de la variable SizeX, alejar la pantalla norte
    local NorthScreen = LerpVector( 0.5, TopLevel + NorthVec, TopLevel - NorthVec + Vector( 0, -SizeY - FakeOffset, 0 ) )
    local SouthScreen = LerpVector( 0.5, TopLevel + SouthVec, TopLevel - SouthVec + Vector( 0, SizeY + FakeOffset, 0 ) )
    local WestScreen = LerpVector( 0.5, TopLevel + WestVec, TopLevel - WestVec + Vector( SizeX + FakeOffset, 0, 0 ) )
    local EastScreen = LerpVector( 0.5, TopLevel + EastVec, TopLevel - EastVec + Vector( -SizeX - FakeOffset, 0, 0 ) )


    if
        ( not trace.Hit ) or
        ( IsValid( trace.Entity ) and trace.Entity:IsPlayer() )
    then
        hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawBox")
    else
        hook.Add("PostDrawTranslucentRenderables", "Minigames.DrawBox", function()
            render.DrawWireframeBox( HitPos - KillBoxHeight, angle_zero, KillBox, -KillBox, RedColor, true )
            render.DrawWireframeBox( HitPos, angle_zero, Bounds, -Bounds, color_white, true )
            render.DrawWireframeBox( WestScreen, AngX, FakeScreenBounds, -FakeScreenBounds, color_white, true )
            render.DrawWireframeBox( EastScreen, AngX, FakeScreenBounds, -FakeScreenBounds, color_white, true )
            render.DrawWireframeBox( NorthScreen, AngY, FakeScreenBounds, -FakeScreenBounds, color_white, true )
            render.DrawWireframeBox( SouthScreen, AngY, FakeScreenBounds, -FakeScreenBounds, color_white, true )
        end)
    end
end

--[[----------------------------
          Main Functions
----------------------------]]--

function GameScript:LeftClick( trace, owner, FirstTime )
    local Response = false

    if FirstTime then
        Response = self:SpawnGame( trace, owner )
    else
        if IsEntity( trace.Entity ) and trace.Entity:IsPlayer() then
            Response = self:TogglePlayer( trace.Entity )
        end
    end

    return Response
end

function GameScript:RightClick( trace, owner )
    return self:ToggleGame()
end

function GameScript:Reload( trace, owner )
    if SERVER then
        self:Pause()
    end
end

function GameScript:Think( trace, owner )
    if CLIENT then
        self:UpdateBoxGame( trace )
    end
end

function GameScript:Deploy( trace, owner )

end

function GameScript:RollUp( trace )
    if CLIENT then
        hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawBox")
    end
end

Minigames.RegisterNewGame(GameScript)
--addons/minigame-tool-assistant/lua/minigames/rewards/ashop.lua:
local AShopNormal = Minigames.CreateNewReward()

AShopNormal:SetName("AShop Coins")
AShopNormal:SetIcon("minigames/icons/ashop.png")
AShopNormal:SetNameAmount(function(amount)
    return "AShop Coins x" .. amount
end)

AShopNormal:SetFunctionReward(function(owner, ply, amount)
    if ashop then
        ply:ashop_addCoinsSafe(amount, false)
    end
end)

AShopNormal:AddArgument({
    Name = "Amount",
    Type = "Slider",
    Min = 1,
    Max = 200,
    Default = 10
})

Minigames.RegisterReward(AShopNormal)


local AShopPremium = Minigames.CreateNewReward()

AShopPremium:SetName("AShop Premium Coins")
AShopPremium:SetIcon("minigames/icons/ashop.png")
AShopPremium:SetNameAmount(function(amount)
    return "AShop Premium Coins x" .. amount
end)

-- Function Reward
AShopPremium:SetFunctionReward(function(owner, ply, amount)
    if ashop then
        ply:ashop_addCoinsSafe(amount, true)
    end
end)

AShopPremium:AddArgument({
    Name = "Amount",
    Type = "Slider",
    Min = 1,
    Max = 200,
    Default = 10
})

Minigames.RegisterReward(AShopPremium)
--addons/minigame-tool-assistant/lua/minigames/rewards/brickscreditstore.lua:
local Reward = Minigames.CreateNewReward()

Reward:SetName("Brick's Credit Store")
Reward:SetNameAmount(function(credits)
    return credits .. " Credits"
end)
Reward:SetIcon("minigames/icons/brick_icon.png")

Reward:SetFunctionReward(function(owner, ply, credits)
    RunConsoleCommand("addcredits", ply:SteamID64(), credits)
end)

Reward:AddArgument({ --> credits
    ["Name"] = "Credits",
    ["Type"] = "Slider",
    ["Default"] = 20,
    ["Min"] = 0,
    ["Max"] = 250,
})

Minigames.RegisterReward(Reward)
--addons/minigame-tool-assistant/lua/minigames/rewards/gestures.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/giveweapon.lua:
local Reward = Minigames.CreateNewReward()

Reward:SetName("Weapon")
Reward:SetNameAmount(function(classname)
    local wpns = weapons.GetList()
    for k, v in ipairs(wpns) do
        if v.ClassName == classname then
            return v.PrintName
        end
    end

    return classname
end)

Reward:SetIcon("icon16/gun.png")

Reward:SetFunctionReward(function(owner, ply, classname)
    local wpn = ply:Give(classname)
    if IsValid(wpn) then
        ply:SetActiveWeapon( wpn )
    end
end)

Reward:AddArgument({ --> classname
    ["Name"] = "Weapon",
    ["Type"] = "Text",
    ["Default"] = "weapon_crowbar",
    ["Placeholder"] = "The weapon's classname"
})

Minigames.RegisterReward(Reward)
--addons/minigame-tool-assistant/lua/minigames/rewards/xenin_battlepass.lua:
-- Battle Pass
local Pass = Minigames.CreateNewReward()

Pass:SetName("Xenin Battlepass")
Pass:SetNameAmount("Battlepass")
Pass:SetIcon("minigames/icons/xenin_bp_icon.png")

Pass:SetFunctionReward(function(owner, ply)
    RunConsoleCommand( "battlepass_give_pass", ply:SteamID64() )
end)

Minigames.RegisterReward(Pass)


-- Battle Pass Tiers
local Tiers = Minigames.CreateNewReward()

Tiers:SetName("Xenin Battlepass - Tiers")
Tiers:SetNameAmount(function(amount)
    return "Xenin Battlepass Tiers x" .. amount
end)
Tiers:SetIcon("minigames/icons/xenin_bp_icon.png")

Tiers:SetFunctionReward(function(owner, ply, amount)
    RunConsoleCommand( "battlepass_give_tier", ply:SteamID64(), amount )
end)

Tiers:AddArgument({ --> amount
    Name = "Tiers",
    Type = "slider",
    Min = 1,
    Max = 100,
    Default = 1
})

Minigames.RegisterReward(Tiers)
--addons/mayor_voting/lua/panels/cl_votingpanel.lua:
/*---------------------------------------------------------
  START PlayerVotingPanel
---------------------------------------------------------*/
local PlayerVotingPanel = {}

function PlayerVotingPanel:Init()
	self:SetDrawBackground(false)
	self:SetDrawBorder(false)
	//self:SetStretchToFit(false)
	self:SetSize(350, 70)
	self.CurrentWidth = 350
	self.ColorBarWidth = 38
	self.CurrentAlpha = 0
	self.BackColor = VOTING.Theme.ControlColor
	self.TextColor = Color(255, 255, 255, 250 )
	self.HoverColor = Color(23, 55, 94, 250 )
	self.HoverTextColor = Color(142, 180, 227, 250)
	self.Hovering = false
	
	self.HeaderLbl = vgui.Create("DLabel", self)
	self.HeaderLbl:SetFont("Bebas24Font")
	self.HeaderLbl:SetColor(self.TextColor)
	
	self.VoteLbl = vgui.Create("DLabel", self)
	self.VoteLbl:SetFont("Bebas70Font")
	self.VoteLbl:SetColor(self.TextColor)
	
	self.PlayerIcon = vgui.Create("VotingPlayerIcon", self)
	/*
	self.VoteCircle = vgui.Create("DImage", self)
	self.VoteCircle:SetImage("mayorvoting/smallvotecircle.png")
	self.VoteCircle:SetSize(68, 65)
	self.VoteCircle:SetVisible(false)
	*/
	//self.BorderColor = Color(190,40,0,255)
end

function PlayerVotingPanel:SetNoActionEnbaled(results)
	self.NoAction = true
	self.HoverColor = Color(0, 0, 0, 155 )
	self.AlphaFade = 255
	self.StartAlphaFade = true
	self.HeaderLbl:SetColor(Color(153, 153, 153, 90 ))
	self.VoteLbl:SetColor(Color(153, 153, 153, 90 ))
	if results then
		self.PlayerIcon:SetVisible(false)
		--self.VoteCircle:SetVisible(false)
	end
end

function PlayerVotingPanel:SetPlayer(ply)
	if not IsValid(ply) then self:SetNoActionEnbaled() end
	
	if (#ply:Nick() > 20) then
	self.HeaderLbl:SetText(string.sub(ply:Nick(), 1, 25) .. "...")
	else
	self.HeaderLbl:SetText(ply:Nick())
	end
	self.HeaderLbl:SizeToContents()
	self.CurrentPlayer = ply
	self.CurrentVotes = 0
	self.VoteLbl:SetText(tostring(self.CurrentVotes))
	self.VoteLbl:SizeToContents()
	
	self.PlayerIcon:InvalidateLayout( true )
	self.PlayerIcon:SetModel(ply:GetModel())
	self.PlayerIcon:SetSize(64, 64)
	self.PlayerIcon:SetToolTip(ply:Nick())
end

function PlayerVotingPanel:GetPlayer(ply)
	if IsValid(self.CurrentPlayer) then return self.CurrentPlayer
	else self:SetNoActionEnbaled() return nil end
end

function PlayerVotingPanel:SetColor(color)
	if not type(color) == "color" then return end
	//self.NoAction = true
	self.BackColor = color
	self.HoverTextColor = color
end

function PlayerVotingPanel:GetColor()
	return self.BackColor
end

function PlayerVotingPanel:IncreaseVote(num)
	self.CurrentVotes = (self.CurrentVotes + num)
	self.VoteLbl:SetText(tostring(self.CurrentVotes))
	self.VoteLbl:SizeToContents()
	self.CurrentAlpha = 255
end

function PlayerVotingPanel:SetText(text)
	self.HeaderLbl:SetText(text)
	self.HeaderLbl:SizeToContents()
end

function PlayerVotingPanel:SetSubText(text)
	self.SubLbl:SetText(text)
	self.SubLbl:SizeToContents()
	self.SubLbl:SetVisible(true)
end

function PlayerVotingPanel:PerformLayout()
	
	local offset = (self.CurrentWidth - self.HeaderLbl:GetWide()) / 2
	self.HeaderLbl:SetPos(offset, 3)
	
	self.VoteLbl:SetPos(300, 3)
	
	self.PlayerIcon:SetPos(3,3)

	self:SetWide( self.CurrentWidth )
end

function PlayerVotingPanel:Paint()

	if self.StartAlphaFade then
		self.AlphaFade = math.Approach( self.AlphaFade, 50, FrameTime() * 400 )
		local c = self.BackColor
		local r,g,b = c.r,c.g,c.b
		surface.SetDrawColor(r,g,b,self.AlphaFade)
	else
	surface.SetDrawColor(self.BackColor)
	end
	surface.DrawRect( 0, 0, self:GetWide(), self:GetTall())
	
	//Vote count box
	self.CurrentAlpha = math.Approach( self.CurrentAlpha, 0, FrameTime() * 200 )

	surface.SetDrawColor(self:ColorWithCurrentAlpha(VOTING.Theme.ControlColor))
	surface.DrawRect( 295, 0, self.VoteLbl:GetWide() + 10, self.VoteLbl:GetTall())
end

function PlayerVotingPanel:OnCursorEntered()
	self.Hovering = true
	self.ColorBarWidth = 38
	if not self.NoAction and not self.CurrentSelection and not LocalPlayer().HasVoted then
		--self.VoteCircle:SetVisible(true)
	end
end

function PlayerVotingPanel:OnCursorExited()
	self.Hovering = false
	if not self.NoAction and not self.CurrentSelection and not LocalPlayer().HasVoted then
		--self.VoteCircle:SetVisible(false)
	end
end

function PlayerVotingPanel:ToggleSelect(select)
	if select then
		self.CurrentSelection = true
	else
		self.CurrentSelection = false
	end
end

function PlayerVotingPanel:ColorWithCurrentAlpha(c)
	local r,g,b = c.r,c.g,c.b
	return Color(r,g,b,self.CurrentAlpha)
end

derma.DefineControl("PlayerVotingPanel", "Player voting panel for mayor elections", PlayerVotingPanel, "DImageButton")

/*---------------------------------------------------------
  End PlayerVotingPanel
---------------------------------------------------------*/
--addons/media_player_fixed_edition/lua/autorun/mediaplayer.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/players/entity/shared.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/services/twitch/cl_init.lua:
include "shared.lua"

DEFINE_BASECLASS( "mp_service_browser" )

local JS_Pause = "if(window.MediaPlayer) MediaPlayer.pause();"
local JS_Play = "if(window.MediaPlayer) MediaPlayer.play();"
local JS_Volume = "if(window.MediaPlayer) MediaPlayer.volume = %s;"
local JS_Seek = [[
	if (window.MediaPlayer) {
		var seekTime = %s;
		var curTime = window.MediaPlayer.currentTime;

		var diffTime = Math.abs(curTime - seekTime);
		if (diffTime > 5) {
			window.MediaPlayer.currentTime = seekTime
		}
	}
]]

local JS_Interface = [[
	var checkerInterval = setInterval(function() {
		var matureAccept = document.querySelectorAll("[data-a-target=\"content-classification-gate-overlay-start-watching-button\"]")[0]
		if (!!matureAccept) {matureAccept.click(); return;}

		var player = document.getElementsByTagName('video')[0];
		var adOverlay = document.querySelectorAll("[data-test-selector=\"sad-overlay\"]")[0]

		if (!adOverlay && !!player && player.paused == false && player.readyState == 4) {
			clearInterval(checkerInterval);

			window.MediaPlayer = player;
		}
	}, 50);
]]

function SERVICE:GetURL()
	local channel = self:GetTwitchChannel()
	return ("https://player.twitch.tv/?channel=%s&parent=pixeltailgames.com"):format( channel )
end

function SERVICE:OnBrowserReady( browser )

	-- Resume paused player
	if self._TTVPaused then
		self.Browser:RunJavascript( JS_Play )
		self._TTVPaused = nil
		return
	end

	BaseClass.OnBrowserReady( self, browser )

	browser:OpenURL( self:GetURL() )
	browser.OnDocumentReady = function(pnl)
		browser:QueueJavascript( JS_Interface )
	end

end

function SERVICE:Pause()
	BaseClass.Pause( self )

	if IsValid(self.Browser) then
		self.Browser:RunJavascript(JS_Pause)
		self._TTVPaused = true
	end

end

function SERVICE:SetVolume( volume )
	local js = JS_Volume:format( MediaPlayer.Volume() )
	self.Browser:RunJavascript(js)
end

function SERVICE:Sync()

	local seekTime = self:CurrentTime()
	if self:IsTimed() and seekTime > 0 then
		self.Browser:RunJavascript(JS_Seek:format(seekTime))
	end
end
--addons/media_player_fixed_edition/lua/mediaplayer/services/dailymotion/cl_init.lua:
include "shared.lua"

DEFINE_BASECLASS( "mp_service_browser" )

local JS_Pause = "if(window.MediaPlayer) MediaPlayer.pause();"
local JS_Play = "if(window.MediaPlayer) MediaPlayer.play();"
local JS_Volume = "if(window.MediaPlayer) MediaPlayer.volume = %s;"
local JS_Seek = [[
	if (window.MediaPlayer) {
		var seekTime = %s;
		var curTime = window.MediaPlayer.currentTime;

		var diffTime = Math.abs(curTime - seekTime);
		if (diffTime > 5) {
			window.MediaPlayer.currentTime = seekTime
		}
	}
]]

local JS_Interface = [[
	var checkerInterval = setInterval(function() {
		if (document.querySelector(".np_DialogConsent-accept")) {
			document.querySelector(".np_DialogConsent-accept").click();
		}

		if (document.querySelector(".consent_screen-button.consent_screen-accept")) {
			document.querySelector(".consent_screen-button.consent_screen-accept").click();
		}

		var player = document.querySelector("video#video");
		if (!!player && player.paused == false && player.readyState == 4) {
			clearInterval(checkerInterval);

			window.MediaPlayer = player;
		}
	}, 50);
]]

function SERVICE:GetURL()
	local videoId = self:GetDailymotionVideoId()
	return ("https://www.dailymotion.com/embed/video/%s?rel=0&autoplay=1"):format( videoId )
end

function SERVICE:OnBrowserReady( browser )

	-- Resume paused player
	if self._DMPaused then
		self.Browser:RunJavascript( JS_Play )
		self._DMPaused = nil
		return
	end

	BaseClass.OnBrowserReady( self, browser )

	local curTime = self:CurrentTime()
	local url = self:GetURL()

	-- Add start time to URL if the video didn't just begin
	if self:IsTimed() and curTime > 3 then
		url = url .. "&start=" .. math.Round(curTime)
	end

	browser:OpenURL( url )
	browser.OnDocumentReady = function(pnl)
		browser:QueueJavascript( JS_Interface )
	end

end

function SERVICE:Pause()
	BaseClass.Pause( self )

	if IsValid(self.Browser) then
		self.Browser:RunJavascript(JS_Pause)
		self._DMPaused = true
	end

end

function SERVICE:SetVolume( volume )
	local js = JS_Volume:format( MediaPlayer.Volume() )
	self.Browser:RunJavascript(js)
end

function SERVICE:Sync()

	local seekTime = self:CurrentTime()
	if self:IsTimed() and seekTime > 0 then
		self.Browser:RunJavascript(JS_Seek:format(seekTime))
	end
end
--addons/media_player_fixed_edition/lua/mediaplayer/services/dailymotion/shared.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/services/audiofile/cl_init.lua:
include "shared.lua"

DEFINE_BASECLASS( "mp_service_base" )

-- https://www.un4seen.com/doc/#bass/BASS_StreamCreateURL.html

SERVICE.StreamOptions = { "noplay", "noblock" }

local MAX_LOAD_ATTEMPTS = 3
local Audio3DCvar = MediaPlayer.Cvars.Audio3D

function SERVICE:Volume( volume )

	volume = BaseClass.Volume( self, volume )

	if IsValid(self.Channel) then
		local vol = volume > 1 and volume / 100 or volume

		-- IGModAudioChannel is limited by the actual gmod volume
		-- local gmvolume = GetConVarNumber("volume")
		-- if gmvolume > vol then
		-- 	vol = vol / gmvolume
		-- else
		-- 	vol = 1
		-- end

		self.Channel:SetVolume( math.sqrt(vol) )
	end

	return volume

end

function SERVICE:Play()

	BaseClass.Play( self )

	if IsValid(self.Channel) then
		self.Channel:Play()
	else
		local settings = table.Copy(self.StreamOptions)

		-- .ogg files can't seem to use 3d?
		if Audio3DCvar:GetBool() and IsValid(self.Entity) and
				not self.url:match(".ogg") then
			table.insert(settings, "3d")
		end

		settings = table.concat(settings, " ")

		local function loadAudio( callback )
			if not self:IsPlaying() or IsValid( self.Channel ) then return end
			MediaPlayerUtils.LoadStreamChannel( self.url, settings, callback )
		end

		-- Loading audio can fail the first time, so let's retry a few times
		-- before giving up.
		MediaPlayerUtils.Retry(
			loadAudio,
			function( channel )
				self.Channel = channel

				-- The song may have been skipped before the channel was
				-- created, only play if the media state is set to play.
				if self:IsPlaying() then
					self:Volume()
					self:Sync()

					self.Channel:Play()
				end

				self:emit("channelReady", channel)
			end,
			function()
				local msg = ("Failed to load media player audio '%s'"):format( self.url )
				LocalPlayer():ChatPrint( msg )
			end,
			MAX_LOAD_ATTEMPTS
		)
	end

end

function SERVICE:Pause()
	BaseClass.Pause(self)

	if IsValid(self.Channel) then
		self.Channel:Pause()
	end
end

function SERVICE:Stop()
	BaseClass.Stop(self)

	if IsValid(self.Channel) then
		self.Channel:Stop()
	end
end

function SERVICE:Sync()
	if self:IsPlaying() and IsValid(self.Channel) then
		if self:IsTimed() then
			self:SyncTime()
		end

		self:SyncEntityPos()
	end
end

function SERVICE:SyncTime()
	local state = self.Channel:GetState()

	if state ~= GMOD_CHANNEL_STALLED then
		local duration = self.Channel:GetLength()
		local seekTime = math.min(duration, self:CurrentTime())
		local curTime = self.Channel:GetTime()
		local diffTime = math.abs(curTime - seekTime)

		if diffTime > 5 then
			self.Channel:SetTime( seekTime )
		end
	end
end

function SERVICE:SyncEntityPos()
	if IsValid(self.Entity) then

		if self.Channel:Is3D() then
			-- apparently these are the default values?
			self.Channel:Set3DFadeDistance( 500, 1000 )

			self.Channel:SetPos( self.Entity:GetPos() )
		else
			-- TODO: Fake 3D volume
			-- https://facepunch.com/showthread.php?t=1302124&p=41975238&viewfull=1#post41975238

			-- local volume = BaseClass.Volume( self, volume )
			-- local vol = volume > 1 and volume/100 or volume
			-- self.Channel:SetVolume( vol )
		end

	end
end



function SERVICE:PreRequest( callback )

	local function preload( callback )
		MediaPlayerUtils.LoadStreamChannel( self.url, nil, callback )
	end

	-- Preloading audio can fail the first time, so let's retry a few times
	-- before giving up.
	MediaPlayerUtils.Retry(
		preload,
		function( channel )
			-- Set metadata to later send to the server; IGModAudioChannel is
			-- only accessible on the client.
			self:SetMetadataValue( "title", channel:GetFileName() )
			self:SetMetadataValue( "duration", channel:GetLength() )

			channel:Stop()
			callback()
		end,
		function()
			callback( "There was a problem receiving the audio stream, please try again." )
		end,
		MAX_LOAD_ATTEMPTS
	)

end

function SERVICE:NetWriteRequest()
	net.WriteString( self:Title() )
	net.WriteUInt( self:Duration(), 16 )
end

--[[---------------------------------------------------------
	Draw 3D2D
-----------------------------------------------------------]]

local IsValid = IsValid
local draw = draw
local math = math
local surface = surface

local VisualizerBgColor = Color(44, 62, 80, 255)
local VisualizerBarColor = Color(52, 152, 219)
local VisualizerBarAlpha = 220

local BANDS	= 28

local function DrawSpectrumAnalyzer( fft, w, h )

	local b0 = 1
	local x, y

	for x = 0, BANDS do
		local sum = 0
		local sc = 0
		local b1 = math.pow(2,x * 10.0 / (BANDS-1))

		if (b1 > 1023) then b1 = 1023 end
		if (b1 <= b0) then b1 = b0 + 1 end
		sc = 10 + b1-b0;
		while b0 < b1 do
			sum = sum + fft[b0]
			b0 = b0 + 1
		end

		y = (math.sqrt(sum / math.log10(sc)) * 1.7 * h) - 4
		y = math.Clamp(y, 0, h)

		local col = HSVToColor( 120 - (120 * y / h), 1, 1 )
		col.a = VisualizerBarAlpha
		surface.SetDrawColor(col)

		surface.DrawRect(
			math.ceil(x * (w / BANDS)),
			math.ceil(h - y - 1),
			math.ceil(w / BANDS) - 2,
			y + 1
		)
	end

end


local HTMLMaterial = HTMLMaterial
local color_white = color_white
local FFT_2048 = FFT_2048
local GMOD_CHANNEL_PLAYING = GMOD_CHANNEL_PLAYING

local HTMLMAT_STYLE_ARTWORK = "htmlmat.style.artwork"
AddHTMLMaterialStyle( HTMLMAT_STYLE_ARTWORK, {
	width = 720,
	height = 480
}, HTMLMAT_STYLE_COVER )

function SERVICE:Draw( w, h )

	surface.SetDrawColor( VisualizerBgColor )
	surface.DrawRect( 0, 0, w, h )

	local thumbnail = self:Thumbnail()
	if thumbnail then
		DrawHTMLMaterial( thumbnail, HTMLMAT_STYLE_ARTWORK, w, h )
	end

	local channel = self.Channel
	if IsValid(channel) and channel:GetState() == GMOD_CHANNEL_PLAYING then
		local fft = {}
		channel:FFT( fft, FFT_2048 )

		-- exposed on the table in case anyone wants to use this
		self.fft = fft

		DrawSpectrumAnalyzer( fft, w, h )
	end

	self:PostDraw()

end

function SERVICE:PostDraw()
	-- override this
end

--addons/media_player_fixed_edition/lua/mediaplayer/cl_requests.lua:
return gluapack()()
--lua/autorun/mgs3_soldiers_npc.lua:
/*
	Addon by Voikanaa	
*/

local Category = "MGS3 Soldiers"

local NPC = {	Name = "GRU - Ally",
				Class = "npc_citizen",
				Model = "models/player/gru_npc.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
				Weapons = { "weapon_smg1" },
				Category = Category }

list.Set( "NPC", "npc_gru_ally", NPC )

local Category = "MGS3 Soldiers"

local NPC = {	Name = "KGB - Ally",
				Class = "npc_citizen",
				Model = "models/player/kgb_npc.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
				Weapons = { "weapon_smg1" },
				Category = Category }

list.Set( "NPC", "npc_kgb_ally", NPC )

local Category = "MGS3 Soldiers"

local NPC = {	Name = "Ocelot Unit - Ally",
				Class = "npc_citizen",
				Model = "models/player/ocelot_npc.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
				Weapons = { "weapon_smg1" },
				Category = Category }

list.Set( "NPC", "npc_ocelot_ally", NPC )


// ----------------------- HOSTILE --------------------------


local Category = "MGS3 Soldiers"

local NPC = {	Name = "GRU - Hostile",
				Class = "npc_combine_s",
				Model = "models/player/gru_npc.mdl",
				Health = "100",
				Weapons = { "weapon_smg1" },
				Category = Category }

list.Set( "NPC", "npc_gru_hostile", NPC )

local Category = "MGS3 Soldiers"

local NPC = {	Name = "KGB - Hostile",
				Class = "npc_combine_s",
				Model = "models/player/kgb_npc.mdl",
				Health = "100",
				Weapons = { "weapon_smg1" },
				Category = Category }

list.Set( "NPC", "npc_kgb_hostile", NPC )

local Category = "MGS3 Soldiers"

local NPC = {	Name = "Ocelot Unit - Hostile",
				Class = "npc_combine_s",
				Model = "models/player/ocelot_npc.mdl",
				Health = "100",
				Weapons = { "weapon_smg1" },
				Category = Category }

list.Set( "NPC", "npc_ocelot_hostile", NPC )
--lua/autorun/obese_male_deluxe_edition.lua:
list.Set( "PlayerOptionsAnimations", "Obese Male", { "idle_suitcase", "lineidle03", "luggageidle", "menu_combine", "pose_standing_01", "idle_all_01", "menu_walk" } )
player_manager.AddValidModel( "Obese Male", "models/dawson/obese_male_deluxe_edition/obese_male_gregory_01.mdl" )
player_manager.AddValidHands( "Obese Male", "models/dawson/obese_male_deluxe_edition/obese_male_gregory_01_arms.mdl", 0, "00000000" )
--addons/onyx_framework_2/lua/onyx/util.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

05/06/2022

--]]

local zeroFn = function() end

onyx.ZeroFn = zeroFn
onyx.IncludeClient = CLIENT and include or AddCSLuaFile
onyx.IncludeServer = SERVER and include or zeroFn
onyx.IncludeShared = function(path)
    AddCSLuaFile(path)
    return include(path)
end

do
    local Explode = string.Explode
    local Left = string.Left
    onyx.Include = function(path)
        local parts = Explode('/', path)
        local prefix = Left(parts[#parts], 2)

        if prefix then
            if prefix == 'sv' then
                return onyx.IncludeServer(path)
            elseif prefix == 'cl' then
                return onyx.IncludeClient(path)
            elseif prefix == 'sh' then
                return onyx.IncludeShared(path)
            end
        end
    end
end

do
    local Find = file.Find
    local ipairs = ipairs
    local GetExtensionFromFilename = string.GetExtensionFromFilename

    local function IncludeFolder(path, recursive)
        local files, folders = Find(path .. '*', 'LUA')

        for _, name in ipairs(files) do
            if GetExtensionFromFilename(name) == 'lua' then
                onyx.Include(path .. name)
            end
        end

        if recursive then
            for _, name in ipairs(folders) do
                IncludeFolder(path .. name .. '/', recursive)
            end
        end
    end
    onyx.IncludeFolder = IncludeFolder
end

function onyx:Config(key)
    local tSequence = string.Explode('.', key)
    local iSequence = #tSequence
    local previousTbl = self.cfg

    for i = 1, iSequence do
        local keyPart = tSequence[i]
        if previousTbl[keyPart] then
            if i == iSequence then
                return previousTbl[keyPart]
            else
                previousTbl = previousTbl[keyPart]
            end
        end
    end

    return fallback
end

do
    local accent = Color(174, 0, 255)
    local white = color_white
    local red = Color(255, 73, 73)
    local green = Color(121, 255, 68)
    local orange = Color(255, 180, 68)
    local blue = Color(68, 149, 255)

    local function format(text, ...)
        for _, arg in ipairs({...}) do
            if isentity(arg) and arg:IsPlayer() then
                arg = arg:Name() .. " (" .. arg:SteamID() .. ")"
            else
                arg = tostring(arg)
            end
    
            text = string.gsub(text, "#", arg, 1)
        end
    
        return text
    end

    local function printWPrefix(color, prefix, text, ...)
        MsgC(
            white, '(', accent, 'ONYX', white, ') ',
            white, '(', color, prefix, white, ') ',
            format(text, ...),
            '\n'
        )
    end

    function onyx:Print(text, ...)
        MsgC(
            white, '(', accent, 'ONYX', white, ') ',
            format(text, ...),
            '\n'
        )
    end

    function onyx:PrintError(text, ...)
        printWPrefix(red, 'ERROR', text, ...)
    end

    function onyx:PrintWarning(text, ...)
        printWPrefix(orange, 'WARNING', text, ...)
    end

    function onyx:PrintSuccess(text, ...)
        printWPrefix(green, 'SUCCESS', text, ...)
    end
    
    do

        local cvDebug = CreateConVar('sh_onyx_debug', '0', FCVAR_REPLICATED)

        function onyx:PrintDebug(text, ...)
            if (cvDebug:GetBool()) then
                printWPrefix(blue, 'DEBUG', text, ...)
            end
        end
    end
end
--addons/onyx_framework_2/lua/onyx/framework/libs/thirdparty/data/utf8_chunk_1.lua:
return {[97] = 65,[98] = 66,[99] = 67,[100] = 68,[101] = 69,[102] = 70,[103] = 71,[104] = 72,[105] = 73,[106] = 74,[107] = 75,[108] = 76,[109] = 77,[110] = 78,[111] = 79,[112] = 80,[113] = 81,[114] = 82,[115] = 83,[116] = 84,[117] = 85,[118] = 86,[119] = 87,[120] = 88,[121] = 89,[122] = 90,[181] = 924,[224] = 192,[225] = 193,[226] = 194,[227] = 195,[228] = 196,[229] = 197,[230] = 198,[231] = 199,[232] = 200,[233] = 201,[234] = 202,[235] = 203,[236] = 204,[237] = 205,[238] = 206,[239] = 207,[240] = 208,[241] = 209,[242] = 210,[243] = 211,[244] = 212,[245] = 213,[246] = 214,[248] = 216,[249] = 217,[250] = 218,[251] = 219,[252] = 220,[253] = 221,[254] = 222,[255] = 376,[257] = 256,[259] = 258,[261] = 260,[263] = 262,[265] = 264,[267] = 266,[269] = 268,[271] = 270,[273] = 272,[275] = 274,[277] = 276,[279] = 278,[281] = 280,[283] = 282,[285] = 284,[287] = 286,[289] = 288,[291] = 290,[293] = 292,[295] = 294,[297] = 296,[299] = 298,[301] = 300,[303] = 302,[305] = 73,[307] = 306,[309] = 308,[311] = 310,[314] = 313,[316] = 315,[318] = 317,[320] = 319,[322] = 321,[324] = 323,[326] = 325,[328] = 327,[331] = 330,[333] = 332,[335] = 334,[337] = 336,[339] = 338,[341] = 340,[343] = 342,[345] = 344,[347] = 346,[349] = 348,[351] = 350,[353] = 352,[355] = 354,[357] = 356,[359] = 358,[361] = 360,[363] = 362,[365] = 364,[367] = 366,[369] = 368,[371] = 370,[373] = 372,[375] = 374,[378] = 377,[380] = 379,[382] = 381,[383] = 83,[384] = 579,[387] = 386,[389] = 388,[392] = 391,[396] = 395,[402] = 401,[405] = 502,[409] = 408,[410] = 573,[414] = 544,[417] = 416,[419] = 418,[421] = 420,[424] = 423,[429] = 428,[432] = 431,[436] = 435,[438] = 437,[441] = 440,[445] = 444,[447] = 503,[453] = 452,[454] = 452,[456] = 455,[457] = 455,[459] = 458,[460] = 458,[462] = 461,[464] = 463,[466] = 465,[468] = 467,[470] = 469,[472] = 471,[474] = 473,[476] = 475,[477] = 398,[479] = 478,[481] = 480,[483] = 482,[485] = 484,[487] = 486,[489] = 488,[491] = 490,[493] = 492,[495] = 494,[498] = 497,[499] = 497,[501] = 500,[505] = 504,[507] = 506,[509] = 508,[511] = 510,[513] = 512,[515] = 514,[517] = 516,[519] = 518,[521] = 520,[523] = 522,[525] = 524,[527] = 526,[529] = 528,[531] = 530,[533] = 532,[535] = 534,[537] = 536,[539] = 538,[541] = 540,[543] = 542,[547] = 546,[549] = 548,[551] = 550,[553] = 552,[555] = 554,[557] = 556,[559] = 558,[561] = 560,[563] = 562,[572] = 571,[578] = 577,[583] = 582,[585] = 584,[587] = 586,[589] = 588,[591] = 590,[595] = 385,[596] = 390,[598] = 393,[599] = 394,[601] = 399,[603] = 400,[608] = 403,[611] = 404,[616] = 407,[617] = 406,[619] = 11362,[623] = 412,[626] = 413,[629] = 415,[637] = 11364,[640] = 422,[643] = 425,[648] = 430,[649] = 580,[650] = 433,[651] = 434,[652] = 581,[658] = 439,[837] = 921,[891] = 1021,[892] = 1022,[893] = 1023,[940] = 902,}
--addons/onyx_framework_2/lua/onyx/framework/libs/thirdparty/data/utf8_chunk_4.lua:
return {[9425] = 9399,[9426] = 9400,[9427] = 9401,[9428] = 9402,[9429] = 9403,[9430] = 9404,[9431] = 9405,[9432] = 9406,[9433] = 9407,[9434] = 9408,[9435] = 9409,[9436] = 9410,[9437] = 9411,[9438] = 9412,[9439] = 9413,[9440] = 9414,[9441] = 9415,[9442] = 9416,[9443] = 9417,[9444] = 9418,[9445] = 9419,[9446] = 9420,[9447] = 9421,[9448] = 9422,[9449] = 9423,[11312] = 11264,[11313] = 11265,[11314] = 11266,[11315] = 11267,[11316] = 11268,[11317] = 11269,[11318] = 11270,[11319] = 11271,[11320] = 11272,[11321] = 11273,[11322] = 11274,[11323] = 11275,[11324] = 11276,[11325] = 11277,[11326] = 11278,[11327] = 11279,[11328] = 11280,[11329] = 11281,[11330] = 11282,[11331] = 11283,[11332] = 11284,[11333] = 11285,[11334] = 11286,[11335] = 11287,[11336] = 11288,[11337] = 11289,[11338] = 11290,[11339] = 11291,[11340] = 11292,[11341] = 11293,[11342] = 11294,[11343] = 11295,[11344] = 11296,[11345] = 11297,[11346] = 11298,[11347] = 11299,[11348] = 11300,[11349] = 11301,[11350] = 11302,[11351] = 11303,[11352] = 11304,[11353] = 11305,[11354] = 11306,[11355] = 11307,[11356] = 11308,[11357] = 11309,[11358] = 11310,[11361] = 11360,[11365] = 570,[11366] = 574,[11368] = 11367,[11370] = 11369,[11372] = 11371,[11382] = 11381,[11393] = 11392,[11395] = 11394,[11397] = 11396,[11399] = 11398,[11401] = 11400,[11403] = 11402,[11405] = 11404,[11407] = 11406,[11409] = 11408,[11411] = 11410,[11413] = 11412,[11415] = 11414,[11417] = 11416,[11419] = 11418,[11421] = 11420,[11423] = 11422,[11425] = 11424,[11427] = 11426,[11429] = 11428,[11431] = 11430,[11433] = 11432,[11435] = 11434,[11437] = 11436,[11439] = 11438,[11441] = 11440,[11443] = 11442,[11445] = 11444,[11447] = 11446,[11449] = 11448,[11451] = 11450,[11453] = 11452,[11455] = 11454,[11457] = 11456,[11459] = 11458,[11461] = 11460,[11463] = 11462,[11465] = 11464,[11467] = 11466,[11469] = 11468,[11471] = 11470,[11473] = 11472,[11475] = 11474,[11477] = 11476,[11479] = 11478,[11481] = 11480,[11483] = 11482,[11485] = 11484,[11487] = 11486,[11489] = 11488,[11491] = 11490,[11520] = 4256,[11521] = 4257,[11522] = 4258,[11523] = 4259,[11524] = 4260,[11525] = 4261,[11526] = 4262,[11527] = 4263,[11528] = 4264,[11529] = 4265,[11530] = 4266,[11531] = 4267,[11532] = 4268,[11533] = 4269,[11534] = 4270,[11535] = 4271,[11536] = 4272,[11537] = 4273,[11538] = 4274,[11539] = 4275,[11540] = 4276,[11541] = 4277,[11542] = 4278,[11543] = 4279,[11544] = 4280,[11545] = 4281,[11546] = 4282,[11547] = 4283,[11548] = 4284,[11549] = 4285,[11550] = 4286,[11551] = 4287,[11552] = 4288,[11553] = 4289,[11554] = 4290,[11555] = 4291,[11556] = 4292,[11557] = 4293,[65345] = 65313,[65346] = 65314,[65347] = 65315,[65348] = 65316,[65349] = 65317,[65350] = 65318,[65351] = 65319,[65352] = 65320,[65353] = 65321,[65354] = 65322,[65355] = 65323,[65356] = 65324,[65357] = 65325,[65358] = 65326,[65359] = 65327,[65360] = 65328,[65361] = 65329,[65362] = 65330,[65363] = 65331,[65364] = 65332,[65365] = 65333,[65366] = 65334,[65367] = 65335,[65368] = 65336,[65369] = 65337,[65370] = 65338,[66600] = 66560,[66601] = 66561,[66602] = 66562,[66603] = 66563,[66604] = 66564,[66605] = 66565,[66606] = 66566,[66607] = 66567,[66608] = 66568,[66609] = 66569,[66610] = 66570,[66611] = 66571,[66612] = 66572,[66613] = 66573,[66614] = 66574,[66615] = 66575,[66616] = 66576,[66617] = 66577,[66618] = 66578,[66619] = 66579,[66620] = 66580,[66621] = 66581,[66622] = 66582,[66623] = 66583,[66624] = 66584,[66625] = 66585,[66626] = 66586,[66627] = 66587,[66628] = 66588,[66629] = 66589,[66630] = 66590,[66631] = 66591,[66632] = 66592,[66633] = 66593,[66634] = 66594,[66635] = 66595,[66636] = 66596,[66637] = 66597,[66638] = 66598,[66639] = 66599,}
--addons/onyx_framework_2/lua/onyx/framework/libs/sh_addon.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/sh_net_extension.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

23/04/2023

--]]

onyx.net = {}

function onyx.net.WriteTable(tbl)
    assert(tbl, 'missing table')
    assert(istable(tbl), 'the provided argument must be a table')

    local encoded = pon.encode(tbl)
    local len = #encoded

    net.WriteUInt(len, 32)
    net.WriteData(encoded, len)
end

function onyx.net.ReadTable()
    local len = net.ReadUInt(32)
    local data = net.ReadData(len)
    local success, decoded = pcall(pon.decode, data)

    if (success) then
        return decoded
    end

    return {}
end

function onyx.net.Send(ply)
    if (ply) then
        net.Send(ply)
    else
        net.Broadcast()
    end
end

if (SERVER) then
    /*
    local function GetHookName(ply)
        return ('onyx.NetReadyCheck_' .. ply:SteamID64())
    end

    hook.Add('PlayerInitialSpawn', 'onyx.GetNetworkReady', function(ply)
        hook.Add('SetupMove', GetHookName(ply), function(ply2, mvd, cmd)
            if ply == ply2 and not cmd:IsForced() then
                hook.Remove('SetupMove', GetHookName(ply2))
                hook.Run('onyx.PlayerNetworkReady', ply2)
                hook.Run('onyx.PostPlayerNetworkReady', ply2) -- required for netvar library and etc.
                ply2:SetVar('onyx_NetReady', true)
            end
        end)
    end)
    */
    hook.Add("PlayerFullLoad", "onyxnetworkload", function(ply)
        timer.Simple(5, function()
        
        hook.Run('onyx.PlayerNetworkReady', ply)
        hook.Run('onyx.PostPlayerNetworkReady', ply)
        ply:SetVar('onyx_NetReady', true)
        end)
    end)
end
--addons/onyx_framework_2/lua/onyx/ui/libs/cl_anim.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/libs/cl_font.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/libs/cl_gui.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/libs/cl_spoly.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_image_button.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

05/06/2022

--]]

local PANEL = {}

AccessorFunc(PANEL, 'm_colIdle', 'ColorIdle')
AccessorFunc(PANEL, 'm_colHover', 'ColorHover')
AccessorFunc(PANEL, 'm_colPressed', 'ColorPressed')

local ANIM_DURATION = .1

function PANEL:Init()
    self:Import('click')
    self:SetColorIdle(Color(235, 235, 235))
    self:SetColorHover(color_white)
    self:SetColorPressed(color_white)
    self:InstallScaleAnim()
    self:SetImageScale(1)
    self:SetURL('https://i.imgur.com/PnE3dNf.png', 'smooth mips')
end

function PANEL:SetColorIdle(color)
    self.m_colIdle = color
    self.m_colColor = onyx.CopyColor(color)
end

function PANEL:SetImageScale(scale)
    self.m_iImageScale = scale - .2
    self.m_iImageScaleInitial = scale
end

do
    local function animColor(panel, targetkey, duration)
        onyx.anim.Create(panel, duration or ANIM_DURATION, {
            index = onyx.anim.ANIM_HOVER,
            target = {
                m_colColor = panel[targetkey]
            }
        })
    end

    local function animScale(panel, target)
        onyx.anim.Create(panel, duration or ANIM_DURATION, {
            index = onyx.anim.ANIM_SCALE,
            target = {
                m_iImageScale = target
            }
        })
    end

    function PANEL:InstallHoverAnim()
        onyx.gui.InjectEventHandler(self, 'OnCursorEntered')
        onyx.gui.InjectEventHandler(self, 'OnCursorExited')

        self:On('OnCursorEntered', function(panel)
            if panel:GetDisabled() then return end
            animColor(panel, 'm_colHover')
        end)

        self:On('OnCursorExited', function(panel)
            if panel:GetDisabled() then return end
            animColor(panel, 'm_colIdle')
        end)

        self:On('OnPress', function(panel)
            if panel:GetDisabled() then return end
            animColor(panel, 'm_colPressed')
        end)

        self:On('OnRelease', function(panel)
            if panel:IsHovered() then
                panel:Call('OnCursorEntered')
            end
        end)
    end

    function PANEL:InstallScaleAnim()
        onyx.gui.InjectEventHandler(self, 'OnCursorEntered')
        onyx.gui.InjectEventHandler(self, 'OnCursorExited')

        self:On('OnCursorEntered', function(panel)
            if panel:GetDisabled() then return end
            animScale(panel, panel.m_iImageScaleInitial - .1)
        end)

        self:On('OnCursorExited', function(panel)
            if panel:GetDisabled() then return end
            animScale(panel, panel.m_iImageScaleInitial - .2)
        end)

        self:On('OnPress', function(panel)
            if panel:GetDisabled() then return end
            animScale(panel, panel.m_iImageScaleInitial)
        end)

        self:On('OnRelease', function(panel)
            if panel:IsHovered() then
                panel:Call('OnCursorEntered')
            end
        end)
    end

    local function animAngle(panel, target, onFinished)
        onyx.anim.Create(panel, ANIM_DURATION * 2, {
            index = 1,
            target = {
                m_iImageAngle = target
            },
            onFinished = onFinished
        })
    end

    function PANEL:InstallRotationAnim()
        self:On('OnPress', function(panel)
            if panel:GetDisabled() then return end

            animAngle(panel, 15, function(_, panel)
                animAngle(panel, -15, function(_, panel)
                    animAngle(panel, 0)
                end)
            end)
        end)
    end
end

onyx.gui.Register('onyx.ImageButton', PANEL, 'onyx.Image')
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_scroll.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_sidebar.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

05/06/2022

--]]

local colorSecondary = onyx:Config('colors.secondary')
local colorAccent = onyx:Config('colors.accent')
local colorTertiary = onyx:Config('colors.tertiary')
local colorGray = Color(141, 141, 141)
local colorDark = Color(30, 30, 30)

local PANEL = {}

AccessorFunc(PANEL, 'm_iRoundness', 'Roundness')
AccessorFunc(PANEL, 'm_bHiddenLabels', 'HiddenLabels')

function PANEL:Init()
    self.color = Color(255, 255, 255)
    self.curLineThickness = 0
    self.animFraction = 0
    self.textColor = Color(255, 255, 255)
    self.subtextColor = onyx.CopyColor(colorGray)
    self.m_iRoundness = 8
    self.m_bHiddenLabels = false

    self:Import('click')
    self:Import('hovercolor')
    self:SetTall(onyx.ScaleTall(40))
    self:SetColorKey('color')
    self:SetColorIdle(onyx.OffsetColor(onyx:Config('colors.secondary'), 0))
    self:SetColorHover(colorTertiary)
    self:SetColorPressed(onyx:Config('colors.quaternary'))

    self.divIcon = self:Add('onyx.Image')
    self.divIcon:SetImageSize(20, 20)
    self.divIcon:SetMouseInputEnabled(false)

    self.lblTitle = self:Add('onyx.Label')
    self.lblTitle:SetText('NAME')
    self.lblTitle:SetFont(onyx.Font('Comfortaa Bold@16'))

    self.lblDesc = self:Add('onyx.Label')
    self.lblDesc:SetText('Description')
    self.lblDesc:SetContentAlignment(7)
    self.lblDesc:SetFont(onyx.Font('Comfortaa@14'))
    self.lblDesc:SetTextColor(self.subtextColor)
    self.lblDesc:Hide()
end

function PANEL:SetHiddenLabels(bBool)
    self.m_bHiddenLabels = bBool
    self.lblTitle:SetVisible(not bBool)
end

function PANEL:EnableDescription()
    self.lblTitle:SetContentAlignment(1)
    self.lblTitle:Font('Comfortaa Bold@14')
    self.lblDesc:Show()

    self:SetTall(onyx.ScaleTall(45))
end

function PANEL:PerformLayout(w, h)
    self.divIcon:Dock(LEFT)
    self.divIcon:SetWide(h)

    self.lblTitle:Dock(FILL)

    self.lblDesc:Dock(BOTTOM)
    self.lblDesc:SetTall(h * .5)

    self.lineThickness = math.ceil(ScreenScale(1))
    self.mask = onyx.CalculateRoundedBox(self.m_iRoundness, 0, 0, w, h)
end

local colorGradient = onyx.OffsetColor(colorAccent, -75)
function PANEL:Paint(w, h)
    local inset = 0

    draw.RoundedBox(self.m_iRoundness, inset, inset, w - inset * 2, h - inset * 2, self.color)

    if (self.state) then
        if (self.m_Roundness == 0) then
            onyx.DrawMatGradient(0, 0, w, h, RIGHT, ColorAlpha(colorGradient, self.animFraction * 255))
        else
            onyx.DrawWithPolyMask(self.mask, function()
                onyx.DrawMatGradient(0, 0, w, h, RIGHT, ColorAlpha(colorGradient, self.animFraction * 255))
            end)
        end
    end
end

function PANEL:Setup(data)
    assert(data.name, 'The \"name\" field is missing')
    assert(data.desc, 'The \"desc\" field is missing')

    self.lblTitle:SetText(data.name)
    self.lblDesc:SetText(data.desc)

    if (data.nameColor) then
        self.lblTitle:SetTextColor(data.nameColor)
    end

    if (data.descColor) then
        self.lblDesc:SetTextColor(data.descColor)
    end

    if (data.iconColor) then
        self.divIcon:SetColor(data.iconColor)
    end

    if data.wimg then
        self.divIcon:SetWebImage(data.wimg, 'smooth mips')
    elseif data.svg then
        self.divIcon:SetSVG(data.svg, 32)
    elseif data.icon then
        self.divIcon:SetURL(data.icon, 'smooth mips')
    end

    self.data = data
end

function PANEL:SetState(bool)
    local target = bool and 1 or 0

    self:SetHoverBlocked(bool)
    self.state = bool

    if not bool then
        self:Call('OnCursorExited')
    else
        onyx.anim.Remove(self, onyx.anim.ANIM_HOVER)
        onyx.anim.Create(self, .33, {
            index = onyx.anim.ANIM_HOVER,
            target = {
                ['color'] = onyx.ColorEditHSV(colorAccent, nil, .7, .7)
            }
        })
    end

    onyx.anim.Create(self, .33, {
        index = 1,
        target = {
            textColor = (bool and colorDark or color_white),
            subtextColor = (bool and colorDark or colorGray)
        },
        think = function(anim, panel)
            panel.lblTitle:SetTextColor(panel.textColor)
            panel.divIcon:SetColor(panel.textColor)
            panel.lblDesc:SetColor(panel.subtextColor)
        end
    })

    onyx.anim.Create(self, .1, {
        index = 44,
        target = {
            animFraction = target
        }
    })
end

function PANEL:DoClick()
    self.bool = not self.bool
    self:SetState(self.bool)
end

onyx.gui.Register('onyx.Sidebar.Tab', PANEL)

--[[------------------------------
Main
--------------------------------]]

PANEL = {}

AccessorFunc(PANEL, 'm_pContainer', 'Container')
AccessorFunc(PANEL, 'm_bDescriptionEnabled', 'DescriptionEnabled')
AccessorFunc(PANEL, 'm_bKeepTabContent', 'KeepTabContent')

function PANEL:Init(arguments)
    local padding = onyx.ScaleTall(10)

    self.padding = padding
    self.tabs = {}
    self.m_bDescriptionEnabled = false
    self.m_bKeepTabContent = false

    self:DockPadding(padding, 0, padding, padding)
end

function PANEL:Paint(w, h)
    draw.RoundedBoxEx(8, 0, 0, w, h, colorSecondary, nil, nil, true)
end

function PANEL:AddTab(data)
    local btnTab = self:Add('onyx.Sidebar.Tab')
    btnTab:Setup(data)
    btnTab:Dock(TOP)
    btnTab:DockMargin(0, 0, 0, onyx.ScaleTall(5))
    btnTab.DoClick = function(panel)
        self:Call('OnTabSelected', nil, panel)
    end

    if (self:GetDescriptionEnabled()) then
        btnTab:EnableDescription()
    end

    btnTab.tabIndex = table.insert(self.tabs, btnTab)

    self:Call('OnTabAdded', nil, btnTab)

    return btnTab
end

function PANEL:ChooseTab(index)
    local tab = self.tabs[index]
    if (tab) then
        self:Call('OnTabSelected', nil, tab)
    end
end

function PANEL:OnTabSelected(panel)
    local data = panel.data

    assert(data, 'No data for a tab')

    if (self.oldTabPanel == panel) then
        return
    end

    if data.onClick and not data.onClick() then
        return
    end

    if IsValid(self.oldTabPanel) then
        self.oldTabPanel:SetState(false)
    end

    panel:Call('OnCursorEntered')
    panel:SetState(true)
    self.oldTabPanel = panel

    local container = self:GetContainer()

    assert(IsValid(container), 'You must link a valid container to the sidebar!')
    assert(data.class, 'The tab must be blocked via `onClick` or create a panel!')

    if IsValid(container.content) then
        if (self.m_bKeepTabContent) then
            container.content:Hide()
        else
            container.content:Remove()
        end
    end

    if (self.m_bKeepTabContent) then
        if (IsValid(panel.content)) then
            panel.content:Show()
        else
            panel.content = vgui.Create(data.class)
            panel.content:SetParent(container)
            panel.content:Dock(FILL)
        end
    else
        panel.content = vgui.Create(data.class)
        panel.content:SetParent(container)
        panel.content:Dock(FILL)
    end

    container.content = panel.content
    -- container.content:SetAlpha(0)
    -- container.content:AlphaTo(255, .1)

    if data.onSelected then
        data.onSelected(container.content)
    end

    -- bc OnTabSelected might be blocked by `onClick`
    self:Call('OnTabSwitched', nil, panel)
end

onyx.gui.Register('onyx.Sidebar', PANEL)

--[[------------------------------
MiniSidebar
--------------------------------]]
local PANEL = {}

function PANEL:Init()
    self.padding = 0
    self:DockPadding(0, 0, 0, 0)
end

function PANEL:OnTabAdded(tab)
    tab:SetRoundness(0)
    tab:SetHiddenLabels(true)
    tab:SetTall(self:GetWide())
end

onyx.gui.Register('onyx.MiniSidebar', PANEL, 'onyx.Sidebar')

-- ANCHOR Test

-- onyx.gui.Test('onyx.Frame', .65, .65, function(self, w, h)
--     self:MakePopup()

--     -- local sidebar = self:Add('onyx.Sidebar')
--     local sidebar = self:Add('onyx.MiniSidebar')
--     sidebar:SetWide(w * .04)
--     sidebar:Dock(LEFT)
--     -- sidebar:SetDescriptionEnabled(true)

--     local container = self:Add('Panel')
--     container:Dock(FILL)

--     sidebar:SetContainer(container)
--     sidebar:AddTab({
--         name = 'DASHBOARD',
--         desc = 'Main things',
--         class = 'DButton',
--         onSelected = function(panel)
--             panel:SetText('Meow')
--         end
--     })
--     sidebar:AddTab({
--         name = 'JOBS',
--         desc = 'Choose your destiny',
--         class = 'DButton',
--     })
--     sidebar:AddTab({
--         name = 'SHOP',
--         desc = 'Find items you need',
--         class = 'DButton',
--     })
--     sidebar:AddTab({
--         name = 'SETTINGS',
--         desc = 'Configure the game as you wish',
--         class = 'DButton',
--     })
-- end)
--addons/onyx_f4/lua/onyx/modules/f4/languages/cl_english.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/core/cl_core.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

25/12/2023

--]]

onyx.f4.tabs = onyx.f4.tabs or {}
onyx.f4.actions = onyx.f4.actions or {}

onyx.wimg.Register('favorite_fill', 'https://i.imgur.com/wviPFMQ.png')
onyx.wimg.Register('favorite_outline', 'https://i.imgur.com/FCXcBsu.png')

function onyx.f4:RegisterTab(id, data)
    onyx.AssertType(id, 'string', 'RegisterTab', 1)
    onyx.AssertType(data, 'table', 'RegisterTab', 2)

    data.id = id
    data.order = data.order or 99
    self.tabs[id] = data
end

function onyx.f4:RegisterAction(data)
    onyx.AssertType(data, 'table', 'RegisterAction', 1)

    table.insert(self.actions, data)
end

function onyx.f4.IsAdmin(ply)
    local jobOnly = onyx.f4:GetOptionValue('admin_on_duty')
    local jobName = onyx.f4:GetOptionValue('admin_on_duty_job')
    if (jobOnly) then
        local userGroup = ply:GetUserGroup()
        local jobTable = RPExtraTeams[ply:Team()]
        if (jobTable and userGroup ~= 'user' and jobTable.name == jobName) then
            return true
        else
            return false
        end
    else
        return ply:IsAdmin()
    end
end

function onyx.f4:GetSortedTabs()
    local sorted = {}

    for id, tab in pairs(onyx.f4.tabs) do
        table.insert(sorted, tab)
    end

    table.sort(sorted, function(a, b)
        return a.order < b.order
    end)

    return sorted
end

function onyx.f4.ConvertJobColor(color)
    local bEnabled = onyx.f4:GetOptionValue('edit_job_colors')
    if (bEnabled) then
        local h, s, v = ColorToHSV(color)
        return onyx.ColorEditHSV(color, nil, s - .2, v + .2)
    else
        return color
    end
end

function onyx.f4.OpenFrame()
    local frame = vgui.Create('onyx.f4.Frame')
    frame:SetSize(ScrW() * .65, ScrH() * .65)
    frame:Center()
    frame:MakePopup()

    return frame
end

function onyx.f4.OpenAdminSettings()
    local frame = vgui.Create('onyx.Frame')
    frame:SetSize(ScrW() * .66, ScrH() * .66)
    frame:Center()
    frame:MakePopup()
    frame:SetTitle('ONYX F4 (ADMIN)')

    local p = onyx.ScaleTall(15)
    local content = frame:Add('Panel')
    content:Dock(FILL)
    content:DockPadding(p, p, p, p)

    local sidebar = frame:Add('onyx.Sidebar')
    sidebar:SetContainer(content)
    sidebar:SetWide(frame:GetWide() * .2)
    sidebar:Dock(LEFT)

    sidebar:AddTab({
        name = onyx.lang:Get('addon_settings_u'),
        desc = onyx.lang:Get('addon_settings_desc'),
        icon = 'https://i.imgur.com/ECLKU9s.png',
        class = 'onyx.Configuration',
        onSelected = function(panel)
            panel:LoadAddonSettings('f4')
            panel:OpenCategories()
        end
    })

    sidebar:AddTab({
        name = onyx.lang:Get('addon_stats_u'),
        desc = onyx.lang:Get('addon_stats_desc'),
        icon = 'https://i.imgur.com/L6jCQe0.png',
        class = 'onyx.f4.AdminStats'
    })

    sidebar:AddTab({
        name = onyx.lang:Get('addon_return_u'),
        desc = onyx.lang:Get('addon_return_desc'),
        icon = 'https://i.imgur.com/gCI6kX5.png',
        onClick = function()
            onyx.f4.OpenFrame()
            frame:Remove()
            return false
        end
    })

    sidebar:ChooseTab(1)

    return frame
end

hook.Add('ShowSpare2', 'onyx.f4', function(ply)
    if (not IsValid(onyx.f4.frame)) then
        onyx.f4.OpenFrame()
    end
    return true
end)
--addons/onyx_f4/lua/onyx/modules/f4/core/stats/cl_stats.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/ui/cl_tab_jobs.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

25/12/2023

--]]

local colorPrimary = onyx:Config('colors.primary')
local colorSecondary = onyx:Config('colors.secondary')
local colorTertiary = onyx:Config('colors.tertiary')
local colorGray = Color(159, 159, 159)
local font0 = onyx.Font('Overpass SemiBold@14')
local oldScrollValue = 0

local L = function(...) return onyx.lang:Get(...) end

local PANEL = {}

local cvShowFavorite = CreateClientConVar('cl_onyx_f4_show_favorite_jobs', '1', true, false)

function PANEL:Init()
    local toolbarPadding = onyx.ScaleTall(5)

    self.list = self:Add('onyx.ScrollPanel')
    self.list:Dock(FILL)
    self.list.OnRemove = function(panel)
        if (panel.scrollInitialized) then
            oldScrollValue = panel.scroll:GetScroll()
        end
    end

    if (oldScrollValue) then
        self:SetScroll(4, oldScrollValue)
    end

    self.toolbar = self:Add('DPanel')
    self.toolbar:Dock(TOP)
    self.toolbar:SetTall(onyx.ScaleTall(40))
    self.toolbar:DockPadding(toolbarPadding, toolbarPadding, toolbarPadding * 2, toolbarPadding)
    self.toolbar:DockMargin(0, 0, 0, onyx.ScaleTall(10))
    self.toolbar.Paint = function(panel, w, h)
        draw.RoundedBox(8, 0, 0, w, h, colorSecondary)
    end
    self.toolbar.PerformLayout = function(panel, w, h)
        self.favToggler:SetWide(self.favToggler:GetContentWidth())
    end

    self.favToggler = self.toolbar:Add('onyx.TogglerLabel')
    self.favToggler:Dock(RIGHT)
    self.favToggler:SetText(L('f4_show_favorite'))
    self.favToggler:SetBackgroundColor(onyx.OffsetColor(colorTertiary, 10))
    self.favToggler:Font('Comfortaa Bold@18')
    self.favToggler:SetTextMargin(onyx.ScaleTall(10))
    self.favToggler:SetChecked(cvShowFavorite:GetBool(), true)
    self.favToggler.OnChange = function(panle, bool)
        cvShowFavorite:SetBool(bool)
        self:Reload()
    end

    self.search = self.toolbar:Add('onyx.TextEntry')
    self.search:SetPlaceholderText(onyx.lang:Get('f4_search_text'))
    self.search:SetPlaceholderIcon('https://i.imgur.com/Nk3IUJT.png', 'smooth mips')
    self.search:Dock(LEFT)
    self.search:SetWide(onyx.ScaleWide(150))
    self.search:SetUpdateOnType(true)
    self.search.OnValueChange = function(panel, value)
        value = onyx.utf8.lower(value)

        for _, cat in ipairs(self.list:GetItems()) do
            local layout = cat.canvas:GetChild(0)
            local items = layout:GetChildren()
            local visibleItemAmount = 0

            for _, item in ipairs(items) do
                if (onyx.utf8.lower(item:GetName()):find(value, nil, true)) then
                    item:SetVisible(true)
                    visibleItemAmount = visibleItemAmount + 1
                else
                    item:SetVisible(false)
                end
            end

            layout:InvalidateLayout()

            cat:SetVisible(value == '' or visibleItemAmount > 0)
            cat:UpdateInTick()
        end

        self.list:InvalidateLayout()
    end

    self.preview = self:Add('onyx.Panel')
    self.preview:Hide()
    self.preview.blur = 0
    self.preview.pos = 0
    self.preview.Paint = function(panel, w, h)
        local frame = onyx.f4.frame
        if (not IsValid(frame)) then return end -- just in case

        local realW, realH = frame.container:GetSize()
        local padding = frame.containerPadding

        if (panel.blur > 0) then
            onyx.DrawBlurExpensive(panel, panel.blur)
        end

        DisableClipping(true)
            surface.SetDrawColor(ColorAlpha(color_black, panel.pos * 100))
            surface.DrawRect(-padding, -padding, realW, realH)
        DisableClipping(false)
    end
    self.preview.PerformLayout = function(panel, w, h)
        panel.content:SetTall(h)
        panel.content:SetWide(w * .6)
    end
    self.preview.OnMouseReleased = function(panel)
        self:DisablePreview()
    end

    self.preview.content = self.preview:Add('onyx.f4.JobPreview')
    self.preview.content.OnFavoriteStateSwitched = function()
        self:Reload()
    end

    self.categories = {}
    self:LoadJobs()
end

function PANEL:Reload()
    local scrollValue = self.list.scroll:GetScroll()
    local container = self.list:GetContainer()

    container:Clear()
    self.search:SetValue('')
    self.categories = {}
    self:LoadJobs()
    self:SetScroll(4, scrollValue)
    container:SetAlpha(0)
    container:AlphaTo(255, .3)
end

function PANEL:SetScroll(tickAmount, scrollValue)
    timer.Simple(engine.TickInterval() * tickAmount, function()
        if (IsValid(self.list)) then
            self.list.scrollInitialized = true
            self.list.scroll:SetScroll(scrollValue)
            self.list.scroll.Current = scrollValue
            self.list.canvas.container:SetPos(0, -scrollValue)
        end
    end)
end

function PANEL:EnablePreview(member, reason)
    local preview = self.preview
    local available = reason == nil

    preview:Show()
    preview.pos = 0
    preview.content:SetPos(preview:GetWide())

    preview.content:SetupJob(member)

    preview.content.btnChoose:SetVisible(available)
    preview.content.spacer:SetVisible(available)

    if (member.team == LocalPlayer():Team()) then
        preview.content.btnChoose:SetVisible(false)
        preview.content.spacer:SetVisible(false)
    end

    onyx.anim.Create(preview, .2, {
        index = 1,
        target = {
            blur = 2,
            pos = 1
        },
        think = function(anim, panel)
            local w = panel:GetSize()
            local contentW = panel.content:GetWide()

            panel.content:SetPos(w - contentW * panel.pos, 0)
        end,
        onFinished = function(anim, panel)
            panel.content.enabled = true
        end,
        easing = 'inQuad'
    })
end

function PANEL:DisablePreview()
    local preview = self.preview

    if (not preview.content.enabled) then
        return
    end

    preview.content.enabled = false
    onyx.anim.Create(preview, .2, {
        index = 1,
        target = {
            blur = 0,
            pos = 0
        },
        think = function(anim, panel)
            local w = panel:GetSize()
            local contentW = panel.content:GetWide()

            panel.content:SetPos(w - contentW * panel.pos, 0)
        end,
        onFinished = function(anim, panel)
            panel:Hide()
        end,
        easing = 'inQuad'
    })
end

function PANEL:PerformLayout(w, h)
    self.preview:SetSize(w, h)
end

function PANEL:LoadJobs()
    local client = LocalPlayer()
    local categories = DarkRP.getCategories()['jobs']
    local showUnavailable = onyx.f4:GetOptionValue('job_show_unavailable')
    local showWrong = onyx.f4:GetOptionValue('job_show_requirejob')
    local teamIndex = client:Team()

    if (cvShowFavorite:GetBool()) then
        self:CreateCategory(L('f4_favorite_u'), onyx.f4:FetchFavoriteObjects('jobs'))
    end

    for _, category in ipairs(categories) do
        local canSee = category.canSee
        local members = {}

        if (canSee and not canSee(client)) then continue end

        for _, member in ipairs(category.members) do
            local customCheck = member.customCheck
            local needToChangeFrom = member.NeedToChangeFrom
            local reason

            if (customCheck and not customCheck(client)) then
                if (showUnavailable) then
                    reason = L('f4_unavailable')
                else
                    continue
                end
            end

            if (needToChangeFrom and needToChangeFrom ~= teamIndex) then
                if (showWrong) then
                    reason = L('f4_unavailable')
                else
                    continue
                end
            end

            table.insert(members, {
                job = member,
                reason = reason
            })
        end

        table.sort(members, function(a, b)
            return a.job.team < b.job.team
        end)

        self:CreateCategory(category.name, members)
    end
end

function PANEL:CreateCategory(name, members, color)
    if (#members < 1) then return end

    local pnlCategory = self.list:Add('onyx.Category')
    pnlCategory:Dock(TOP)
    pnlCategory:SetTitle(onyx.utf8.upper(name))
    pnlCategory:SetSpace(0)
    pnlCategory:SetInset(onyx.ScaleTall(10))
    pnlCategory:DockMargin(0, 0, 0, onyx.ScaleTall(10))
    pnlCategory.m_iTextMargin = onyx.ScaleTall(10)
    pnlCategory.m_bSquareCorners = true
    pnlCategory:SetExpanded(true)
    pnlCategory.canvas.Paint = function(p, w, h)
        draw.RoundedBoxEx(8, 0, 0, w, h, colorPrimary, false, false, true, true)
    end

    if (color) then
        pnlCategory.wimage = onyx.wimg.Create('favorite_fill', 'smooth mips')
    end

    local content = pnlCategory:Add('onyx.Grid')
    content:Dock(TOP)
    content:SetTall(0)
    content:SetSpaceX(onyx.ScaleTall(5))
    content:SetSpaceY(content:GetSpaceX())
    content:SetColumnCount(onyx.f4:GetOptionValue('job_columns'))
    content.category = pnlCategory

    for _, member in ipairs(members) do
        self:CreateMember(member.job, content, member.reason)
    end

    pnlCategory:UpdateInTick()
    pnlCategory:UpdateInTick(10)
    pnlCategory:UpdateInTick(100)
end

function PANEL:CreateMember(member, content, reason)
    local model = istable(member.model) and member.model[1] or member.model
    local max = member.max
    local inf = max == 0
    local index = member.team
    local color = onyx.f4.ConvertJobColor(member.color)
    local salary = DarkRP.formatMoney(member.salary)

    local item = content:Add('onyx.f4.Item')
    item:SetTall(onyx.ScaleTall(55))
    item:SetModel(model)
    item:SetName(member.name)
    item:SetColor(color, .25)
    item:SetDesc(salary)
    item:SetDescLabel(L('f4_salary'))
    if (reason) then
        item:SetDescColor(Color(221, 107, 107))
        item:SetDesc(reason)
        item:SetDescLabel('')
    elseif (member.salary == 0) then
        item:SetDescColor(colorGray)
    else
        item:SetDescColor(Color(91, 195, 70))
    end

    item:PositionCamera('face')

    item:Import('click')
    item:Import('hovercolor')
    item:SetColorKey('colorBG')
    item:SetColorIdle(colorSecondary)
    item:SetColorHover(colorTertiary)
    item:AddHoverSound()
    item:AddClickEffect()
    item.DoClick = function()
        self:EnablePreview(member, reason)
    end

    local limit = item:Add('Panel')
    limit:Dock(RIGHT)
    limit:SetZPos(-1)
    limit:SetWide((item:GetTall() - item.padding * 2))
    limit:SetMouseInputEnabled(false)
    limit.text = inf and '∞' or ''
    limit.Paint = function(panel, w, h)
        onyx.DrawOutlinedCircle(w * .5, h * .5, math.floor(h * .5), 6, colorPrimary)

        if (panel.fraction and panel.fraction > 0) then
            onyx.DrawWithPolyMask(panel.mask, function()
                onyx.DrawOutlinedCircle(w * .5, h * .5, math.floor(h * .5), 6, color)
            end)
        end

        draw.SimpleText(panel.text, font0, w * .5, h * .5, color_white, 1, 1)
    end
    limit.PerformLayout = function(panel, w, h)
        if (panel.fraction) then
            local endAngle = math.Round(panel.fraction * 360)
            panel.mask = onyx.CalculateArc(w * .5, h * .5, 0, endAngle, h * .5 + 2, 24, true)
        end
    end

    if (not inf) then
        limit.Think = function(panel)
            if ((panel.nextThink or 0) > CurTime()) then return end                                                                                                                                                                                                        -- 07b198e7-9073-4291-b1bb-82b595f18172
            panel.nextThink = CurTime() + .1

            local amount = #team.GetPlayers(index)
            local fraction = math.Clamp(amount / max, 0, 1)

            panel.text = amount .. ' / ' .. max

            if (not panel.fraction or panel.fraction ~= fraction) then
                panel.fraction = fraction
                panel:InvalidateLayout()
            end
        end
    end
end

onyx.gui.Register('onyx.f4.Jobs', PANEL)

--[[------------------------------
DEBUG
--------------------------------]]
-- onyx.gui.Test('onyx.f4.Frame', .6, .65, function(panel)
--     panel:MakePopup()
--     panel:ChooseTab(2)
-- end)
--addons/bb_onyx_hud/lua/onyx/modules/hud/core/cl_scaling.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/core/sh_config.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_ammo.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_votes.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

18/08/2024

--]]

onyx.hud.popups = onyx.hud.popups or {}

local L = function( ... ) return onyx.lang:Get( ... ) end
local hud = onyx.hud

local function startFadeAnimation( panel, target, callback )
    panel.animAlpha = panel:GetAlpha() / 255
    
    onyx.anim.Create( panel, .2, {
        index = 1,
        target = { animAlpha = target },
        easing = 'inOutSine',
        think = function( _, panel )
            panel:SetAlpha( panel.animAlpha * 255 )
        end,
        onFinished = function( _, panel )
            if ( callback ) then
                callback( panel )
            end
        end
    } )
end

local function movePopups()
    local padding = hud.GetScreenPadding()
    local space = hud.ScaleTall( 5 )
    local baseX = padding
    local baseY = padding
    local posY = baseY
    
    for _, popup in ipairs( onyx.hud.popups ) do
        popup.animY = popup.animY or posY

        popup:SetVisible( true )

        onyx.anim.Create( popup, .2, {
            index = 2,
            target = { animY = posY },
            easing = 'inOutSine',
            think = function( _, panel )
                panel:SetPos( baseX, panel.animY )
            end
        } )

        posY = posY + popup:GetTall() + space
    end
end

local function createPopup( title, desc, duration, acceptCallback, denyCallback, onRemove )
    local padding = hud.ScaleTall( 10 )
    local w = hud.ScaleWide( 200 )
    local titleFont = hud.fonts.TinyBold
    local descFont = hud.fonts.Tiny
    local isDark = onyx.hud:IsDark()

    desc = DarkRP.textWrap( desc, descFont, w - padding * 2 )

    local duration = duration or 5
    local endtime = CurTime() + duration

    surface.SetFont( titleFont )
    local _, titleH = surface.GetTextSize( title )

    surface.SetFont( descFont )
    local _, descH = surface.GetTextSize( desc )

    local buttonHeight = hud.ScaleTall( 20 )
    local elementSpace = hud.ScaleTall( 10 )
    local titleSpace = hud.ScaleTall( 5 )
    local totalHeight = padding * 2 + buttonHeight + descH + titleH + elementSpace + titleSpace

    local screenPadding = hud.GetScreenPadding()
    local h = totalHeight
    
    local popup = vgui.Create( 'Panel' )
    popup:SetSize( w, h )
    popup:SetAlpha( 0 )
    popup:SetVisible( false )
    popup:DockPadding( padding, padding, padding, padding )
    popup.Paint = function( panel, w, h )
        hud.DrawRoundedBox( 0, 0, w, h, hud:GetColor( 'primary' ) )
    end
    popup.Close = function( panel )
        startFadeAnimation( panel, 0, function( this )
            this:Remove()
        end )
    end
    popup.OnRemove = function( panel )
        for index, popup2 in ipairs( onyx.hud.popups ) do
            if ( panel == popup2 ) then
                table.remove( onyx.hud.popups, index )
                break
            end
        end
    
        movePopups()

        if ( onRemove ) then
            onRemove( panel )
        end
    end
    popup.Think = function( panel )
        if ( CurTime() > endtime and not panel.closed ) then
            panel.closed = true
            panel:Close()
        end
    end

    table.insert( onyx.hud.popups, popup )
    movePopups()

    startFadeAnimation( popup, 1 )

    local lblTitle = popup:Add( 'DLabel' )
    lblTitle:SetText( onyx.utf8.upper( title ) )
    lblTitle:SetFont( titleFont )
    lblTitle:SetTall( titleH )
    lblTitle:SetTextColor( hud:GetColor( 'textSecondary' ) )
    lblTitle:Dock( TOP )
    lblTitle:DockMargin( 0, 0, 0, titleSpace )
    lblTitle.Paint = function( panel, w, h )
        local timeLeft = math.max( 0, endtime - CurTime() )

        draw.SimpleText( math.Round( timeLeft ), panel:GetFont(), w, h * .5, panel:GetTextColor(), 2, 1 )
    end
    popup.lblTitle = lblTitle

    local lblDesc = popup:Add( 'DLabel' ) 
    lblDesc:SetText( desc )
    lblDesc:SetFont( descFont )
    lblDesc:SetTextColor( hud:GetColor( 'textPrimary' ) )
    lblDesc:SetContentAlignment( 7 )
    lblDesc:Dock( FILL )
    lblDesc:DockMargin( 0, 0, 0, elementSpace )
    popup.lblDesc = lblDesc

    local conButtons = popup:Add( 'Panel' )
    conButtons:SetTall( buttonHeight )
    conButtons:Dock( BOTTOM )
    conButtons.PerformLayout = function( panel, w, h )
        local space = hud.ScaleTall( 5 )
        local wide = math.Round( ( w - space ) / 2 )
        for _, child in ipairs( panel:GetChildren() ) do
            child:SetWide( wide )
            child:DockMargin( 0, 0, space, 0 )
            child:Dock( LEFT )
        end
    end

    local btnAccept = conButtons:Add( 'onyx.Button' )
    btnAccept:SetText( L( 'accept' ) )
    btnAccept:SetFont( hud.fonts.TinyBold )
    btnAccept:SetMasking( true )
    btnAccept:SetColorIdle( hud:GetColor( not isDark and 'tertiary' or 'accent' ) )
    btnAccept:SetColorHover( onyx.OffsetColor( btnAccept:GetColorIdle(), -20 ) )
    btnAccept:SetGradientColor( onyx.OffsetColor( btnAccept:GetColorIdle(), -20 ) )
    btnAccept:SetGradientDirection( TOP )
    btnAccept.DoClick = function()
        popup:Close()
        if ( acceptCallback ) then
            acceptCallback()
        end
    end
    popup.btnAccept = btnAccept

    local btnDeny = conButtons:Add( 'onyx.Button' )
    btnDeny:SetText( L( 'deny' ) )
    btnDeny:SetFont( hud.fonts.TinyBold )
    btnDeny:SetMasking( true )
    btnDeny:SetColorIdle( hud:GetColor( 'tertiary' ) )
    btnDeny:SetColorHover( onyx.OffsetColor( hud:GetColor( 'tertiary' ), -10 ) )
    btnDeny:SetGradientColor( onyx.OffsetColor( btnDeny:GetColorIdle(), -20 ) )
    btnDeny:SetGradientDirection( TOP )
    btnDeny.DoClick = function()
        popup:Close()
        if ( denyCallback ) then
            denyCallback()
        end
    end
    popup.btnDeny = btnDeny

    hook.Add( 'onyx.hud.OnChangedTheme', popup, function( this )
        this.lblTitle:SetTextColor( hud:GetColor( 'textSecondary' ) )
        this.lblDesc:SetTextColor( hud:GetColor( 'textPrimary' ) )

        this.btnAccept:SetColorIdle( hud:GetColor( not isDark and 'tertiary' or 'accent' ) )
        this.btnAccept:SetColorHover( onyx.OffsetColor( this.btnAccept:GetColorIdle(), -20 ) )
        this.btnAccept:SetGradientColor( onyx.OffsetColor( this.btnAccept:GetColorIdle(), -20 ) )

        this.btnDeny:SetColorIdle( hud:GetColor( 'tertiary' ) )
        this.btnDeny:SetColorHover( onyx.OffsetColor( hud:GetColor( 'negative' ), -20 ) )
        this.btnDeny:SetGradientColor( onyx.OffsetColor( this.btnDeny:GetColorIdle(), -20 ) )
    end )

    return popup
end

local function overrideDarkRP()
    usermessage.Hook( 'DoVote', function( msg )
        local text = msg:ReadString()
        local voteID = msg:ReadShort()
        local duration = msg:ReadFloat()
    
        if ( duration == 0 ) then
            duration = 100
        end

        local popup = createPopup( L( 'vote' ), text, duration, function()
            LocalPlayer():ConCommand( 'vote ' .. voteID .. ' yea\n' )
        end, function()
            LocalPlayer():ConCommand( 'vote ' .. voteID .. ' nay\n' )
        end )

        popup.voteID = voteID
    end )

    usermessage.Hook( 'DoQuestion', function( msg )
        local text = msg:ReadString()
        local questionID = msg:ReadString()
        local duration = msg:ReadFloat()
    
        if ( duration == 0 ) then
            duration = 100
        end

        local popup = createPopup( L( 'question' ), text, duration, function()
            LocalPlayer():ConCommand( 'ans ' .. questionID .. ' 1\n' )
        end, function()
            LocalPlayer():ConCommand( 'ans ' .. questionID .. ' 2\n' )
        end )

        popup.questionID = questionID
    end )

    usermessage.Hook( 'KillVoteVGUI', function( msg )
        local id = msg:ReadShort()
        for _, popup in ipairs( hud.popups ) do
            if ( popup.voteID == id ) then
                popup:Close()
                break
            end
        end
    end )

    usermessage.Hook( 'KillQuestionVGUI', function( msg )
        local id = msg:ReadString()    
        for _, popup in ipairs( hud.popups ) do
            if ( popup.questionID == id ) then
                popup:Close()
                break
            end
        end
    end )

    concommand.Add( 'rp_vote', function( ply, cmd, args )
        local value = string.lower( args[ 1 ] or '' )
        local vote = 0
        if ( tonumber( value ) == 1 ) or ( value == 'yes' ) or ( value == 'true' ) then vote = 1 end
    
        for _, popup in ipairs( hud.popups ) do
            if ( popup.questionID ) then
                popup:Close()
                RunConsoleCommand( 'ans', popup.questionID, vote )
                break
            elseif ( popup.voteID ) then
                popup:Close()
                RunConsoleCommand( 'vote', popup.voteID, vote )
                break
            end
        end
    end )
end

onyx.hud.OverrideGamemode( 'onyx.hud.OverrideVoteMenus', overrideDarkRP )
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/core/cl_init.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

28/02/2024

--]]

onyx.scoreboard.Buttons = onyx.scoreboard.Buttons or {}

local function openFrame()
    local ratio = 1.641
    local scale = onyx.scoreboard:GetOptionValue('scale') / 100
    local height = math.min(math.ceil((702 / 1080 * ScrH()) * scale), ScrH() * .9)
    local width = math.ceil(height * ratio)

    onyx.scoreboard.Frame = vgui.Create('onyx.Scoreboard.Frame')
    onyx.scoreboard.Frame:SetSize(width, height)
    onyx.scoreboard.Frame:Center()
    onyx.scoreboard.Frame:MakePopup()
    onyx.scoreboard.Frame:SetKeyboardInputEnabled(false)
    onyx.scoreboard.Frame:ShowCloseButton(false)

    hook.Run('onyx.scoreboard.OnOpened', onyx.scoreboard.Frame)

    return onyx.scoreboard.Frame
end

function onyx.scoreboard:RegisterButton(name, data)
    assert(isstring(name), string.format('bad argument #1 (expected string, got %s)', type(name)))
    assert(istable(data), string.format('bad argument #2 (expected table, got %s)', type(data)))

    data.name = name
    table.insert(self.Buttons, data)
end

function onyx.scoreboard.IsBlurActive()
    return onyx.scoreboard:GetOptionValue('blur')
end

do
    local TTT_Names = {
        ['GROUP_TERROR'] = {'terrorists', Color(0, 200, 0)},
        ['GROUP_SPEC'] = {'spectators', Color(200, 200, 0)},
        ['GROUP_NOTFOUND'] = {'sb_mia', Color(130, 190, 130)},
        ['GROUP_FOUND'] = {'sb_confirmed', Color(130, 170, 10)},
    }

    local TTT_RoleColors = {
        default = Color(121, 121, 121),
        traitor = Color(255, 96, 96),
        detective = Color(60, 112, 255)
    }

    function onyx.scoreboard.IsTTT()
        return (engine.ActiveGamemode() == 'terrortown')
    end

    function onyx.scoreboard.GetTeamTTT(ply)
        local group = ScoreGroup(ply)
        local color = color_white
        local name = ''

        if (group) then
            for globalKey, data in pairs(TTT_Names) do
                local index = _G[globalKey]
                if (index == group) then
                    local langID = data[1]
                    local groupColor = data[2]

                    name = LANG.GetTranslation(langID)
                    color = groupColor

                    break
                end
            end
        end

        return group, name, color
    end

    function onyx.scoreboard.GetRoleColorTTT(ply)
        if (ply:IsTraitor()) then
            return TTT_RoleColors.traitor
        elseif (ply:IsDetective()) then
            return TTT_RoleColors.detective
        end

        return TTT_RoleColors.default
    end
end

function onyx.scoreboard.ConvertTeamColor(color)
    local h, s, v = ColorToHSV(color)
    return onyx.ColorEditHSV(color, nil, s - .2, v + .2)
end

function onyx.scoreboard.OpenAdminSettings(tab)                                                                                                                                                                                                                                         -- 07b198e7-9073-4291-b1bb-82b595f18172
    local frame = vgui.Create('onyx.Frame')
    frame:SetSize(ScrW() * .6, ScrH() * .6)
    frame:Center()
    frame:MakePopup()
    frame:SetTitle('ONYX SCOREBOARD (ADMIN)')

    local p = onyx.ScaleTall(15)
    local content = frame:Add('Panel')
    content:Dock(FILL)
    content:DockPadding(p, p, p, p)

    local sidebar = frame:Add('onyx.Sidebar')
    sidebar:SetContainer(content)
    sidebar:SetWide(frame:GetWide() * .2)
    sidebar:Dock(LEFT)

    sidebar:AddTab({
        name = onyx.lang:Get('addon_settings_u'),
        desc = '',
        icon = 'https://i.imgur.com/ECLKU9s.png',
        class = 'onyx.Configuration',
        onSelected = function(panel)
            panel:LoadAddonSettings('scoreboard')
            panel:OpenCategories()
        end
    })

    sidebar:AddTab({
        name = onyx.lang:Get('scoreboard_ranks_u'),
        desc = '',
        icon = 'https://i.imgur.com/vaYzFPG.png',
        class = 'onyx.scoreboard.RankEditor'
    })

    sidebar:AddTab({
        name = onyx.lang:Get('scoreboard_columns_u'),
        desc = '',
        icon = 'https://i.imgur.com/fUaIb3B.png',
        class = 'onyx.scoreboard.ColumnEditor'
    })

    sidebar:AddTab({
        name = onyx.lang:Get('addon_return_u'),
        desc = '',
        icon = 'https://i.imgur.com/B9XOMVX.png',
        onClick = function()
            frame:Remove()

            local scoreboard = openFrame()
            scoreboard.closeDisabled = true
            scoreboard:ShowCloseButton(true)

            return false
        end
    })

    sidebar:ChooseTab(tab or 1)

    return frame
end

hook.Add('ScoreboardShow', 'onyx.scoreboard.Show', function()
    if (IsValid(onyx.scoreboard.Frame)) then
        return true
    end

    openFrame()

    return true
end)

hook.Add('ScoreboardHide', 'onyx.scoreboard.Hide', function()
    if (IsValid(onyx.scoreboard.Frame) and not onyx.scoreboard.Frame.closeDisabled) then
        onyx.scoreboard.Frame:Remove()
        onyx.scoreboard.Frame:SetMouseInputEnabled(false)
        hook.Run('onyx.scoreboard.OnClosed')
    end

    return true
end)

onyx.WaitForGamemode('onyx.scoreboard.BlockFAdmin', function()
    hook.Remove('ScoreboardShow', 'FAdmin_scoreboard')
    hook.Remove('ScoreboardHide', 'FAdmin_scoreboard')
end)
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/core/ranks/sh_ranks.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/ui/cl_column_editor.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

04/03/2024

--]]

local COLOR_PRIMARY = onyx:Config('colors.primary')
local COLOR_SECONDARY = onyx:Config('colors.secondary')
local COLOR_TERTIARY = onyx:Config('colors.tertiary')
local COLOR_ACCENT = onyx:Config('colors.accent')
local COLOR_BG = onyx.ColorBetween(COLOR_PRIMARY, COLOR_SECONDARY)
local COLOR_NEGATIVE = onyx:Config('colors.negative')

local WIMG_SAVE = onyx.wimg.Simple('https://i.imgur.com/ycSNF3m.png', 'smooth mips')
local PANEL = {}

function PANEL:Init()
    self.list = self:Add('onyx.ScrollPanel')
    self.list:Dock(FILL)

    self.grid = self.list:Add('onyx.Grid')
    self.grid:SetColumnCount(2)
    self.grid:SetSpace(onyx.ScaleTall(5))

    self.columns = {}
    self.default = {}
    self.changes = {}

    hook.Add('onyx.scoreboard.SyncedColumns', self, function(panel)
        panel.grid:Clear()
        panel.columns = {}
        panel.default = {}
        panel.changes = {}
        panel:LoadColumns()
    end)

    self:LoadColumns()
    self:AddSavePopup()
end

function PANEL:AddSavePopup()
    local font0 = onyx.Font('Comfortaa Bold@16')
    local font3 = onyx.Font('Comfortaa@14')

    self.confirmPopup = self:Add('DPanel')
    self.confirmPopup:SetWide(onyx.ScaleWide(225))
    self.confirmPopup:SetTall(onyx.ScaleTall(75))
    self.confirmPopup.Paint = function(panel, w, h)
        local x, y = panel:LocalToScreen(0, 0)

        if (panel.anim == 0 or panel.anim == 1) then
            onyx.bshadows.BeginShadow()
                draw.RoundedBox(8, x, y, w, h, COLOR_SECONDARY)
            onyx.bshadows.EndShadow(1, 2, 2)
        else
            draw.RoundedBox(8, 0, 0, w, h, COLOR_SECONDARY)
        end
    end
    self.confirmPopup.PerformLayout = function(panel, w, h)
        local padding = ScreenScale(2)

        panel:DockPadding(padding, padding, padding, padding)

        panel.info:Dock(FILL)
        panel.info:DockMargin(0, 0, 0, onyx.ScaleTall(5))
        panel.button:Dock(BOTTOM)
        panel.button:SetTall(onyx.ScaleTall(20))
    end

    self.confirmPopup.info = self.confirmPopup:Add('Panel')
    self.confirmPopup.info.text1 = onyx.lang:GetWFallback('unsavedSettings', 'UNSAVED SETTINGS')
    self.confirmPopup.info.text2 = onyx.lang:GetWFallback('confirmSave', 'Confirm to save the changes')
    self.confirmPopup.info.Paint = function(panel, w ,h)
        local size = math.ceil(h * .5)

        WIMG_SAVE:Draw(h * .5 - size * .5, h * .5 - size * .5, size, size, COLOR_NEGATIVE)

        draw.SimpleText(panel.text1, font0, h, h * .5, COLOR_NEGATIVE, 0, 4)
        draw.SimpleText(panel.text2, font3, h, h * .5, color_white, 0, 0)
    end

    self.confirmPopup.button = self.confirmPopup:Add('onyx.Button')
    self.confirmPopup.button:SetText(onyx.lang:GetWFallback('save_u', 'SAVE'))
    self.confirmPopup.button:SetFont(font0)
    self.confirmPopup.button:SetColorIdle(COLOR_NEGATIVE)
    self.confirmPopup.button:SetColorHover(onyx.OffsetColor(COLOR_NEGATIVE, -20))
    self.confirmPopup.button.DoClick = function()
        local changes = self:GetChanges()
        if (changes) then
            local amount = table.Count(changes)
            if (amount > 0) then
                net.Start('onyx.scoreboard:SetColumns')
                    net.WriteUInt(amount, 6)
                    for index, value in pairs(changes) do
                        net.WriteUInt(index, 8)
                        net.WriteString(value)
                    end
                net.SendToServer()
            end
        end
    end
end

function PANEL:GetChanges()
    return self.changes
end

function PANEL:Think()
    if ((self.nextThink or 0) <= CurTime()) then
        local changes = self:GetChanges()
        local anim = table.IsEmpty(changes) and 1 or 0
        local confirmPopup = self.confirmPopup

        if ((confirmPopup.targetAnim or -1) ~= anim) then
            confirmPopup.anim = confirmPopup.anim or anim -- skip first anim

            if (anim < 1) then
                confirmPopup:SetVisible(true)
            end

            onyx.anim.Create(confirmPopup, .33, {
                index = 2,
                easing = 'inQuad',
                target = {
                    anim = anim
                },
                think = function(anim, panel)
                    panel:AlignBottom(panel.anim * -panel:GetTall())
                end,
                onFinished = function(anim, panel)
                    panel:SetVisible(panel.anim < 1)
                end
            })

            confirmPopup.targetAnim = anim
        end

        self.nextThink = CurTime() + .5
    end
end

function PANEL:LoadColumns()
    for index = 1, onyx.scoreboard.columnsMaxAmount do
        self:AddColumn(index)
    end
end

function PANEL:AddColumn(index)
    local padding = onyx.ScaleTall(10)

    local panel = self.grid:Add('Panel')
    panel:SetTall(onyx.ScaleTall(70))
    panel:DockPadding(padding, padding, padding, padding)
    panel.Paint = function(panel, w, h)
        draw.RoundedBox(8, 0, 0, w, h, COLOR_BG)
    end

    self.grid:AddItem(panel)

    local lblTitle = panel:Add('onyx.Label')
    lblTitle:SetText(onyx.lang:Get('column') .. ' #' .. index)
    lblTitle:Dock(TOP)
    lblTitle:Font('Comfortaa Bold@16')
    lblTitle:SizeToContentsY()
    lblTitle:DockMargin(0, 0, 0, onyx.ScaleTall(5))

    local comboType = panel:Add('onyx.ComboBox')
    comboType:Dock(FILL)
    comboType:AddOption(onyx.lang:Get('scoreboard_col_none'), 'none')
    comboType.OnSelect = function(panel, _, text, data)
        if (not self.default[index] or self.default[index] ~= data) then
            self.changes[index] = data
        else
            self.changes[index] = nil
        end
    end

    for columnID, columnData in pairs(onyx.scoreboard.columns) do
        if (not columnData.customCheck or columnData.customCheck()) then
            comboType:AddOption(onyx.lang:Get(columnData.name), columnID)
        end
    end

    local currentID = onyx.scoreboard.columnsCustomizable[index] or onyx.scoreboard.columnsDefault[index] or 'none'

    if (currentID) then
        local optionData, optionIndex = comboType:FindOptionByData(currentID)
        if (optionIndex) then
            comboType:ChooseOptionID(optionIndex, true)
            self.default[index] = currentID
        else
            comboType:SetCurrentOptionText('invalid : ' .. currentID)
            comboType:Highlight(Color(255, 78, 78))
        end
    end

end

onyx.gui.Register('onyx.scoreboard.ColumnEditor', PANEL)

-- if (IsValid(DebugPanel)) then
--     DebugPanel:Remove()
-- end

-- DebugPanel = onyx.scoreboard.OpenAdminSettings(3)
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/ui/cl_columns_row.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

02/03/2024

--]]

local COLOR_PRIMARY = onyx:Config('colors.primary')
local COLOR_SECONDARY = onyx:Config('colors.secondary')
local COLOR_TERTIARY = onyx:Config('colors.tertiary')
local COLOR_ACCENT = onyx:Config('colors.accent')
local SHADOW_ALPHA = 200
local COLOR_SHADOW = Color(0, 0, 0, 100)
local COLOR_GRAY = Color(149, 149, 149)
local COLOR_GRAY_LIGHT = Color(198, 198, 198)
local SHADOW_DISTANCE = 2

--[[------------------------------
PANEL
--------------------------------]]
local PANEL = {}

AccessorFunc(PANEL, 'm_Font', 'Font')
AccessorFunc(PANEL, 'm_bHeader', 'Header')

function PANEL:Init()
    self.m_Font = onyx.Font('Comfortaa@16')
    self.columns = {}
end

function PANEL:InitColumns()
    local activeColumns = onyx.scoreboard:GetActiveColumns()

    self.columnsAmount = #activeColumns
    self.realColumnsAmount = self.columnsAmount - 2

    for index, column in ipairs(activeColumns) do
        self.columns[index] = self:CreateColumn(column, index)
    end
end

function PANEL:CreateColumn(data, index)
    local column = self:Add('onyx.Label')
    if (data.id == 'team' and DarkRP) then
        column:SetText(onyx.lang:Get('scoreboard_col_job'))
    else
        column:SetText(onyx.lang:Get(data.name))
    end

    column:SetFont(self.m_Font)
    column:CenterText()
    column:SetExpensiveShadow(SHADOW_DISTANCE, COLOR_SHADOW)
    column.data = data

    if (not data.small and self.realColumnsAmount == 1) then
        column:SetContentAlignment(4)
        column.TextLeft = true
    end

    if (self:GetHeader()) then
        column:SetTextColor(COLOR_GRAY)

        if (data.icon) then
            local wimgIcon = onyx.wimg.Simple(data.icon, 'smooth mips')
            column:SetText('')
            column.Paint = function(panel, w, h)
                local size = math.min(h, onyx.ScaleTall(16))
                local space = onyx.ScaleTall(5)
                local font = panel:GetFont()
                local textColor = panel:GetTextColor()
                local text = data.small and '' or data.name
                local textNotEmpty = text ~= ''
                local y0 = h * .5
                local x0 = w * .5
                local textW, textH

                if (textNotEmpty) then
                    surface.SetFont(font)
                    textW, textH = surface.GetTextSize(text)

                    local totalW = textW + size + space
                    local x = x0 - totalW * .5

                    wimgIcon:Draw(x + SHADOW_DISTANCE, y0 - size * .5 + SHADOW_DISTANCE, size, size, COLOR_SHADOW)
                    wimgIcon:Draw(x, y0 - size * .5, size, size, textColor)
                    draw.SimpleText(text, font, x + size + space, y0, textColor, 0, 1)
                else
                    wimgIcon:Draw(x0 - size * .5 + SHADOW_DISTANCE, y0 - size * .5 + SHADOW_DISTANCE, size, size, COLOR_SHADOW)
                    wimgIcon:Draw(x0 - size * .5, y0 - size * .5, size, size, textColor)
                end
            end
        end
    else
        if (data.buildFunc) then
            column:SetText('')
            column.NoText = true
            column.Paint = nil
        end
    end

    return column
end

function PANEL:SetValue(index, formattedValue, rawValue)
    local column = self:GetColumn(index)
    if (not column.NoText) then
        column:SetText(formattedValue)
    end
    column.TextValue = formattedValue -- if GetText got overrided
    column.Value = rawValue or formattedValue
end

function PANEL:SetColor(index, value)
    self:GetColumn(index):SetTextColor(value)
end

function PANEL:SetClickFunc(index, func)
    local column = self:GetColumn(index)
    column:Import('click')
    column.DoClick = func
    column.Think = function(panel)
        if (not panel.hoverBlocked) then
            panel:SetTextColor(panel:IsHovered() and color_white or COLOR_GRAY)
        end
    end
end

function PANEL:GetColumn(index)
    local column = self.columns[index]
    assert(column, 'Invalid column')
    return column
end

function PANEL:PerformLayout(w, h)
    local bEqual = false
    local widthLeft = 1
    local columnsAmount = #self.columns

    local smallWidth = w * .066
    local smallAmount = 0

    local bigAmount = 0
    local bigAreaWidth = w

    -- calculate sizes
    if (not bEqual) then
        for index = columnsAmount, 1, -1 do
            local column = self.columns[index]
            local data = column.data
            if (data.small) then
                smallAmount = smallAmount + 1
                bigAreaWidth = bigAreaWidth - smallWidth
            else
                bigAmount = bigAmount + 1
            end
        end
    end

    -- set sizes
    for index, column in ipairs(self.columns) do
        local width = not bEqual and math.Round(column.data.small and smallWidth or bigAreaWidth / bigAmount) or math.Round(w / columnsAmount)
        local side = bigAmount == 0 and RIGHT or LEFT
        local zpos = bigAmount == 0 and (columnsAmount - index) or index

        column:SetWide(width)
        column:SetZPos(zpos)
        column:Dock(side)
    end
end

onyx.gui.Register('onyx.Scoreboard.ColumnsRow', PANEL)
--lua/openpermissions/thirdparty/pon.lua:
--[[

DEVELOPMENTAL VERSION;

VERSION 1.2.2
Copyright thelastpenguin™

	You may use this for any purpose as long as:
	-	You don't remove this copyright notice.
	-	You don't claim this to be your own.
	-	You properly credit the author, thelastpenguin™, if you publish your work based on (and/or using) this.

	If you modify the code for any purpose, the above still applies to the modified code.

	The author is not held responsible for any damages incured from the use of pon, you use it at your own risk.

DATA TYPES SUPPORTED:
 - tables  - 		k,v - pointers
 - strings - 		k,v - pointers
 - numbers -		k,v
 - booleans- 		k,v
 - Vectors - 		k,v
 - Angles  -		k,v
 - Entities- 		k,v
 - Players - 		k,v

CHANGE LOG
V 1.1.0
 - Added Vehicle, NPC, NextBot, Player, Weapon
V 1.2.0
 - Added custom handling for k,v tables without any array component.
V 1.2.1
 - fixed deserialization bug.

THANKS TO...
 - VERCAS for the inspiration.
]]


local pon = {};

local type, count = type, table.Count ;
local tonumber = tonumber ;
local format = string.format;
do
	local type, count = type, table.Count ;
	local tonumber = tonumber ;
	local format = string.format;

	local encode = {};

	local tryCache ;

	local cacheSize = 0;

	encode['table'] = function( self, tbl, output, cache )

		if( cache[ tbl ] )then
			output[ #output + 1 ] = format('(%x)',  cache[tbl] );
			return ;
		else
			cacheSize = cacheSize + 1;
			cache[ tbl ] = cacheSize;
		end


    local first = next(tbl, nil)
    local predictedNumeric = 1
    local lastKey = nil
    -- starts with a numeric dealio
    if first == 1 then
      output[#output + 1] = '{'

      for k,v in next, tbl do
        if k == predictedNumeric then
          predictedNumeric = predictedNumeric + 1

          local tv = type(v)
          if tv == 'string' then
            local pid = cache[v]
            if pid then
              output[#output + 1] = format('(%x)', pid)
            else
              cacheSize = cacheSize + 1
              cache[v] = cacheSize
              self.string(self, v, output, cache)
            end
          else
            self[tv](self, v, output, cache)
          end

        else
          break
        end
      end

			predictedNumeric = predictedNumeric - 1
    else
      predictedNumeric = nil
    end

    if predictedNumeric == nil then
      output[#output + 1] = '[' -- no array component
    else
      output[#output + 1] = '~' -- array component came first so shit needs to happen
    end

    for k, v in next, tbl, predictedNumeric do
      local tk, tv = type(k), type(v)

      -- WRITE KEY
      if tk == 'string' then
        local pid = cache[ k ];
        if( pid )then
          output[ #output + 1 ] = format('(%x)',  pid );
        else
          cacheSize = cacheSize + 1;
          cache[ k ] = cacheSize;

          self.string( self, k, output, cache );
        end
      else
        self[tk](self, k, output, cache)
      end

      -- WRITE VALUE
      if( tv == 'string' )then
        local pid = cache[ v ];
        if( pid )then
          output[ #output + 1 ] = format('(%x)',  pid );
        else
          cacheSize = cacheSize + 1;
          cache[ v ] = cacheSize;

          self.string( self, v, output, cache );
        end
      else
        self[ tv ]( self, v, output, cache );
      end
    end

    output[#output + 1] = '}'
	end
	--    ENCODE STRING
	local gsub = string.gsub ;
	encode['string'] = function( self, str, output )
		--if tryCache( str, output ) then return end
		local estr, count = gsub( str, ";", "\\;");
		if( count == 0 )then
			output[ #output + 1 ] = '\''..str..';';
		else
			output[ #output + 1 ] = '"'..estr..'";';
		end
	end
	--    ENCODE NUMBER
	encode['number'] = function( self, num, output )
		if num%1 == 0 then
			if num < 0 then
				output[ #output + 1 ] = format( 'x%x;', -num );
			else
				output[ #output + 1 ] = format('X%x;', num );
			end
		else
			output[ #output + 1 ] = tonumber( num )..';';
		end
	end
	--    ENCODE BOOLEAN
	encode['boolean'] = function( self, val, output )
		output[ #output + 1 ] = val and 't' or 'f'
	end
	--    ENCODE VECTOR
	encode['Vector'] = function( self, val, output )
		output[ #output + 1 ] = ('v'..val.x..','..val.y)..(','..val.z..';');
	end
	--    ENCODE ANGLE
	encode['Angle'] = function( self, val, output )
		output[ #output + 1 ] = ('a'..val.p..','..val.y)..(','..val.r..';');
	end
	encode['Entity'] = function( self, val, output )
		output[ #output + 1] = 'E'..(IsValid( val ) and (val:EntIndex( )..';') or '#');
	end
	encode['Player']  = encode['Entity'];
	encode['Vehicle'] = encode['Entity'];
	encode['Weapon']  = encode['Entity'];
	encode['NPC']     = encode['Entity'];
	encode['NextBot'] = encode['Entity'];
	encode['PhysObj'] = encode['Entity'];

	encode['nil'] = function()
		output[ #output + 1 ] = '?';
	end
	encode.__index = function( key )
		ErrorNoHalt('Type: '..key..' can not be encoded. Encoded as as pass-over value.');
		return encode['nil'];
	end

	do
		local empty, concat = table.Empty, table.concat ;
		function pon.encode( tbl )
			local output = {};
			cacheSize = 0;
			encode[ 'table' ]( encode, tbl, output, {} );
			local res = concat( output );

			return res;
		end
	end
end

do
	local tonumber = tonumber ;
	local find, sub, gsub, Explode = string.find, string.sub, string.gsub, string.Explode ;
	local Vector, Angle, Entity = Vector, Angle, Entity ;

	local decode = {};
	decode['{'] = function( self, index, str, cache )

		local cur = {};
		cache[ #cache + 1 ] = cur;

		local k, v, tk, tv = 1, nil, nil, nil;
		while( true )do
			tv = sub( str, index, index );
			if( not tv or tv == '~' )then
				index = index + 1;
				break ;
			end
			if( tv == '}' )then
				return index + 1, cur;
			end

			-- READ THE VALUE
			index = index + 1;
			index, v = self[ tv ]( self, index, str, cache );
			cur[ k ] = v;

			k = k + 1;
		end

		while( true )do
			tk = sub( str, index, index );
			if( not tk or tk == '}' )then
				index = index + 1;
				break ;
			end

			-- READ THE KEY

			index = index + 1;
			index, k = self[ tk ]( self, index, str, cache );

			-- READ THE VALUE
			tv = sub( str, index, index );
			index = index + 1;
			index, v = self[ tv ]( self, index, str, cache );

			cur[ k ] = v;
		end

		return index, cur;
	end
	decode['['] = function( self, index, str, cache )

		local cur = {};
		cache[ #cache + 1 ] = cur;

		local k, v, tk, tv = 1, nil, nil, nil;
		while( true )do
			tk = sub( str, index, index );
			if( not tk or tk == '}' )then
				index = index + 1;
				break ;
			end

			-- READ THE KEY
			index = index + 1;
			index, k = self[ tk ]( self, index, str, cache );
			if not k then continue end

			-- READ THE VALUE
			tv = sub( str, index, index );
			index = index + 1;
			if not self[tv] then
				print('did not find type: '..tv)
			end
			index, v = self[ tv ]( self, index, str, cache );

			cur[ k ] = v;
		end

		return index, cur;
	end

	-- STRING
	decode['"'] = function( self, index, str, cache )
		local finish = find( str, '";', index, true );
		local res = gsub( sub( str, index, finish - 1 ), '\\;', ';' );
		index = finish + 2;

		cache[ #cache + 1 ] = res;
		return index, res;
	end
	-- STRING NO ESCAPING NEEDED
	decode['\''] = function( self, index, str, cache )
		local finish = find( str, ';', index, true );
		local res = sub( str, index, finish - 1 )
		index = finish + 1;

		cache[ #cache + 1 ] = res;
		return index, res;
	end

	-- NUMBER
	decode['n'] = function( self, index, str, cache )
		index = index - 1;
		local finish = find( str, ';', index, true );
		local num = tonumber( sub( str, index, finish - 1 ) );
		index = finish + 1;
		return index, num;
	end
	decode['0'] = decode['n'];
	decode['1'] = decode['n'];
	decode['2'] = decode['n'];
	decode['3'] = decode['n'];
	decode['4'] = decode['n'];
	decode['5'] = decode['n'];
	decode['6'] = decode['n'];
	decode['7'] = decode['n'];
	decode['8'] = decode['n'];
	decode['9'] = decode['n'];
	decode['-'] = decode['n'];
	-- positive hex
	decode['X'] = function( self, index, str, cache )
		local finish = find( str, ';', index, true );
		local num = tonumber( sub( str, index, finish - 1), 16 );
		index = finish + 1;
		return index, num;
	end
	-- negative hex
	decode['x'] = function( self, index, str, cache )
		local finish = find( str, ';', index, true );
		local num = -tonumber( sub( str, index, finish - 1), 16 );
		index = finish + 1;
		return index, num;
	end

	-- POINTER
	decode['('] = function( self, index, str, cache )
		local finish = find( str, ')', index, true );
		local num = tonumber( sub( str, index, finish - 1), 16 );
		index = finish + 1;
		return index, cache[ num ];
	end

	-- BOOLEAN. ONE DATA TYPE FOR YES, ANOTHER FOR NO.
	decode[ 't' ] = function( self, index )
		return index, true;
	end
	decode[ 'f' ] = function( self, index )
		return index, false;
	end

	-- VECTOR
	decode[ 'v' ] = function( self, index, str, cache )
		local finish =  find( str, ';', index, true );
		local vecStr = sub( str, index, finish - 1 );
		index = finish + 1; -- update the index.
		local segs = Explode( ',', vecStr, false );
		return index, Vector( tonumber( segs[1] ), tonumber( segs[2] ), tonumber( segs[3] ) );
	end
	-- ANGLE
	decode[ 'a' ] = function( self, index, str, cache )
		local finish =  find( str, ';', index, true );
		local angStr = sub( str, index, finish - 1 );
		index = finish + 1; -- update the index.
		local segs = Explode( ',', angStr, false );
		return index, Angle( tonumber( segs[1] ), tonumber( segs[2] ), tonumber( segs[3] ) );
	end
	-- ENTITY
	decode[ 'E' ] = function( self, index, str, cache )
		if( str[index] == '#' )then
			index = index + 1;
			return index, NULL ;
		else
			local finish = find( str, ';', index, true );
			local num = tonumber( sub( str, index, finish - 1 ) );
			index = finish + 1;
			return index, Entity( num );
		end
	end
	-- PLAYER
	decode[ 'P' ] = function( self, index, str, cache )
		local finish = find( str, ';', index, true );
		local num = tonumber( sub( str, index, finish - 1 ) );
		index = finish + 1;
		return index, Entity( num ) or NULL;
	end
	-- NIL
	decode['?'] = function( self, index, str, cache )
		return index + 1, nil;
	end


	function pon.decode( data )
		local _, res = decode[sub(data,1,1)]( decode, 2, data, {});
		return res;
	end
end

return pon
--addons/pcasino/lua/autorun/pcasino_init.lua:
return gluapack()()
--addons/pcasino/lua/perfectcasino/derma/cl_elements.lua:
-- Function Cache
local color = Color
local draw_roundedbox = draw.RoundedBox
local draw_simpletext = draw.SimpleText
local draw_notexture = draw.NoTexture
local surface_setdrawcolor = surface.SetDrawColor
-- Color cache
local inputBlack = color(100, 100, 100)
local mainRed = color(155, 50, 50)
local mainBlack = color(38, 38, 38)
local textWhite = color(220, 220, 220)

-- Text Entry
local PANEL = {}
function PANEL:Init()
	self:DockMargin(5, 5, 5, 5)
	self:SetFont("pCasino.Textbox.Static")
	self:SetText("")
	self:SetDisplayText("Input")
end

function PANEL:SetDisplayText(text)
	self.placeholder = text
end

function PANEL:Paint(w, h)
	draw_roundedbox(3, 0, 0, w, h, mainRed)
	draw_roundedbox(3, 1, 1, w - 2, h - 2, mainBlack)

	self:DrawTextEntryText(textWhite, mainRed, mainRed)

	if(self:GetText() == "") and not self:HasFocus() then
		draw_simpletext(self.placeholder, "pCasino.Textbox.Static", 5, h/2, textWhite, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
	end
end
vgui.Register('pCasinoEntry', PANEL, 'DTextEntry')

-- Switch
-- Created by Livaco, edited by Owain.
local PANEL = {}
function PANEL:Init()
	self:SetText("")
	self.toggle = true

	self.lerp = 0.2
end
function PANEL:DoClick()
	self:Toggle()
end
function PANEL:Toggle()
	self:SetToggle(not self:GetToggle())
end
function PANEL:GetToggle()
	return self.toggle
end
function PANEL:SetToggle(value)
	self.toggle = value
end
function PANEL:Paint(w, h)
	draw_roundedbox(3, w*0.05, h*0.3, w*0.9, h*0.4, inputBlack)

	if self:GetToggle() then
		self.lerp = Lerp(0.1, self.lerp, 0.8)
	else
		self.lerp = Lerp(0.1, self.lerp, 0.2)
	end

	draw_notexture()
	surface_setdrawcolor(200-(200*self.lerp), 0+(200*self.lerp), 0, 255)
	PerfectCasino.UI.DrawCircle(w*self.lerp, h*0.5, h*0.35, 1)
end
vgui.Register('pCasinoSwitch', PANEL, 'DButton')


-- Circle Function
-- Created by Ben.
local sinCache = {}
local cosCache = {}
for i = 0, 360 do
	sinCache[i] = math.sin(math.rad(i))
	cosCache[i] = math.cos(math.rad(i))
end
function PerfectCasino.UI.DrawCircle(x, y, r, step)
    local positions = {}

    for i = 0, 360, step do
        table.insert(positions, {
            x = x + cosCache[i] * r,
            y = y + sinCache[i] * r
        })
    end

    return surface.DrawPoly(positions)
end

-- Rotate around point
-- Taken from wiki: https://wiki.facepunch.com/gmod/surface.DrawTexturedRectRotated
function PerfectCasino.UI.DrawTexturedRectRotatedPoint(x, y, w, h, rot, x0, y0)
	local c = math.cos(math.rad(rot))
	local s = math.sin(math.rad(rot))
	
	local newx = y0 * s - x0 * c
	local newy = y0 * c + x0 * s
	
	surface.DrawTexturedRectRotated(x + newx, y + newy, w, h, rot)
end

-- Rotate text
-- Taken from wiki: https://wiki.facepunch.com/gmod/cam.PushModelMatrix
function PerfectCasino.UI.TextRotated(text, x, y, color, font, ang, shift)
	local mat = Matrix()
	mat:Rotate(Angle(0, ang, 0))
	mat:SetTranslation(Vector(x, y, shift or 0))
	
	cam.PushModelMatrix(mat, true)
	    draw_simpletext(text, font, 0, 0, color, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
	cam.PopModelMatrix()    
end

-- Apply st, nd, rd, th to a number. This only works to 20, but there will never be an internal usecase past 20
-- Taken from xSits: A custom addon written by Owain
function PerfectCasino.UI.NumberSuffix(i)
	if i == 1 then
		return i.."st"
	elseif i == 2 then
		return i.."nd"
	elseif i == 3 then
		return i.."rd"
	end

	return i.."th"
end

-- Wrap text
-- Taken from XYZUI: A custom UI library written by Owain
function PerfectCasino.UI.WrapText(text, wrap, font, posx, posy, color, align1, align2)
	text = string.Explode("", text)

	local newText = {}
	for i=1, math.ceil(#text/wrap) do
		newText[i] = ""
		for p=1 + ((i-1)*wrap), i*wrap do
			if not text[p] then break end

			newText[i] = newText[i]..text[p]
		end
	end

	text = newText

	local space = 30*#text
	local startingPos = posy-(space/2)+(30/2)

	for k, v in pairs(text) do
		draw_simpletext(v, font, posx, startingPos+((k-1)*30), color or color_white, align1, align2)
	end
end

--addons/pcasino/lua/perfectcasino/core/sh_core.lua:
return gluapack()()
--lua/autorun/pd2_heavy_swat_zeal_player_npc.lua:
list.Set( "PlayerOptionsAnimations", "PD2_HeavySWAT_Zeal", { "idle_all_angry", "idle_all_01", "menu_walk" } )
player_manager.AddValidModel( "PD2_HeavySWAT_Zeal", "models/mark2580/payday2/pd2_swat_heavy_zeal_player.mdl" )
player_manager.AddValidHands( "PD2_HeavySWAT_Zeal", "models/mark2580/payday2/pd2_swat_heavy_zeal_c_arms.mdl", 0, "00000000" )

local function fixHealthAndModelBull( ply, ent )
  if IsValid(ent) then
    if ent:GetModel() == "models/mark2580/payday2/pd2_swat_heavy_zeal_combine.mdl" then 
      ent:SetHealth( 300 )
      ent:SetMaxHealth( 300 )
    elseif ent:GetModel() == "models/mark2580/payday2/pd2_swat_heavy_zeal_rebel.mdl" then 
      ent:SetHealth( 300 )
      ent:SetMaxHealth( 300 )
    end
  end
end

local Category = "PAYDAY 2 NPCs"

local NPC = {
  Name = "PD2 SWAT Heavy Zeal (Enemy)", 
  Class = "npc_combine_s",
  Model = "models/mark2580/payday2/pd2_swat_heavy_zeal_combine.mdl",
  Weapons = { "weapon_smg1", "weapon_ar2", "weapon_shotgun" },
  Health = 100,
  KeyValues = {
    SquadName = "ZealTeam",
    Numgrenades = 5
  },
  Category = Category
}

list.Set( "NPC", "pd2_swat_heavy_zeal_combine", NPC )

local NPC = {
  Name = "PD2 SWAT Heavy Zeal (Friendly)", 
  Class = "npc_citizen",
  Model = "models/mark2580/payday2/pd2_swat_heavy_zeal_rebel.mdl",
  Health = 300,
  KeyValues = {
    citizentype = CT_UNIQUE
  },
  Weapons = { "weapon_pistol", "weapon_ar2", "weapon_smg1", "weapon_ar2", "weapon_shotgun" },
  Category = Category
}

list.Set( "NPC", "pd2_swat_heavy_zeal_rebel", NPC )

hook.Add( "PlayerSpawnedNPC", "SWATHeavyZealSpawned", fixHealthAndModelBull )
--addons/tablo_ent/lua/autorun/ray_scoresheet.lua:
scoresheet = scoresheet or {}
scoresheet.data = {}

function scoresheet:register( tab )
	for k,v in pairs( scoresheet.data ) do
		if ( v.UniqueID == tab.UniqueID ) then
			scoresheet.data[ k ] = nil
		end
	end
	
	scoresheet.data[ #scoresheet.data + 1 ] = tab
	
	scoresheet:setup( tab )
end

function scoresheet:setup( tab )
	local ENT = {}
	
	ENT.Type = "anim"
	ENT.Base = "score_base"
	ENT.PrintName = "Skor - "..tab.Name
	ENT.Author = "Venom Roleplay" 
	ENT.Spawnable = true
	
	if ( SERVER ) then
		ENT.Fetch = tab.Fetch
	else
		ENT.DrawFunc = tab.Draw
		ENT.TitleName = tab.Name
		ENT.HeaderColor = tab.HeaderColor
	end
	
	scripted_ents.Register( ENT, tab.EntName )
end

local files, folders = file.Find( "scoresheet/sheets/*", "LUA" )

for k,v in pairs( folders ) do
	if ( SERVER ) then
		AddCSLuaFile( "scoresheet/sheets/"..v.."/config.lua" )
		AddCSLuaFile( "scoresheet/sheets/"..v.."/shared.lua" )
		
		include( "scoresheet/sheets/"..v.."/util.lua" )
	end
	
	include( "scoresheet/sheets/"..v.."/config.lua" )
	include( "scoresheet/sheets/"..v.."/shared.lua" )
end
--addons/tablo_ent/lua/scoresheet/sheets/level/shared.lua:
return gluapack()()
--addons/tablo_ent/lua/scoresheet/sheets/money/config.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/client/cl_functions.lua:
-- [[ Thanks to GNLIB for the DrawCircle and DrawElipse function ( https://github.com/Nogitsu/GNLib/ ) ]]
function RCD.DrawComplexCircle(x, y, radius, angle_start, angle_end, color)
	local poly = {}
	angle_start = angle_start or 0
	angle_end = angle_end or 360
	
	poly[1] = { x = x, y = y }
	for i = math.min( angle_start, angle_end ), math.max( angle_start, angle_end ) do
		local a = math.rad( i )
		if angle_start < 0 then
			poly[#poly + 1] = { x = x + math.cos( a ) * radius, y = y + math.sin( a ) * radius }
		else
			poly[#poly + 1] = { x = x - math.cos( a ) * radius, y = y - math.sin( a ) * radius }
		end
	end
	poly[#poly + 1] = { x = x, y = y }

	draw.NoTexture()
	surface.SetDrawColor( color or color_white )
	surface.DrawPoly( poly )

	return poly
end

function RCD.DrawSimpleCircle(x, y, radius, seg)
	local cir = {}

	table.insert(cir, { x = x, y = y, u = 0.5, v = 0.5 })
	for i = 0, seg do
		local a = math.rad((i / seg) * -360)
		table.insert(cir, { x = x + math.sin(a) * radius, y = y + math.cos(a) * radius, u = math.sin(a) / 2 + 0.5, v = math.cos(a) / 2 + 0.5 })
	end

	local a = math.rad(0) -- This is needed for non absolute segment counts
	table.insert(cir, { x = x + math.sin(a) * radius, y = y + math.cos(a) * radius, u = math.sin(a) / 2 + 0.5, v = math.cos(a) / 2 + 0.5 })

	surface.DrawPoly(cir)
end

RCD.PrecachedCircles = RCD.PrecachedCircles or {} 

function RCD.GetCircle(x, y, radius, angle_start)
    local poly = {}

    local i = 0
    while i < 360 do
        i = i + 15
        local posx = x + math.cos(math.rad(i))*radius
        local posy = y + math.sin(math.rad(i))*radius

        poly[#poly+1] = {x=posx, y=posy}
    end

    return poly
end

function RCD.PrecacheCircle(x, y, radius, angle_start, angle_end)
    RCD.PrecachedCircles[x] = RCD.PrecachedCircles[x] or {}
    RCD.PrecachedCircles[x][y] = RCD.PrecachedCircles[x][y] or {}
    RCD.PrecachedCircles[x][y][radius] = RCD.PrecachedCircles[x][y][radius] or {}
    RCD.PrecachedCircles[x][y][radius][angle_start] = RCD.PrecachedCircles[x][y][radius][angle_start] or {}
    RCD.PrecachedCircles[x][y][radius][angle_start][angle_end] = RCD.PrecachedCircles[x][y][radius][angle_start][angle_end] or RCD.GetCircle(x, y, radius, angle_start, angle_end)
    
    return RCD.PrecachedCircles[x][y][radius][angle_start][angle_end]
end

function RCD.DrawCircle(x, y, radius, angle_start, angle_end, color)
    
    local poly = RCD.PrecacheCircle(x, y, radius, angle_start, angle_end)

    draw.NoTexture()
    surface.SetDrawColor(color or color_white)
    surface.DrawPoly(poly)

    return poly
end

-- [[ Thanks to GNLIB for the DrawCircle and DrawElipse function ( https://github.com/Nogitsu/GNLib/ ) ]]
function RCD.DrawElipse(x, y, w, h, color, hide_left, hide_right)
	surface.SetDrawColor(color or color_white)

	if hide_left then surface.DrawRect( x, y, h / 2, h ) else RCD.DrawCircle( x + h / 2, y + h / 2, h / 2, 90, -90, color ) end
	if hide_right then surface.DrawRect( x + w - h / 2, y, h / 2, h ) else RCD.DrawCircle( x + w - h / 2, y + h / 2, h / 2, -90, 90, color ) end

	surface.DrawRect( x + h / 2, y, w - h + 2, h )
end

--[[ Lerp a color to an other color ]]
function RCD.LerpColor(frameTime, color, colorTo)
	return Color(Lerp(frameTime, color.r, colorTo.r), Lerp(frameTime, color.g, colorTo.g), Lerp(frameTime, color.b, colorTo.b), Lerp(frameTime, color.a, colorTo.a))
end

--[[ Draw a blur on a specific panel ]]
function RCD.DrawBlur(panel, amount)
    local x, y = panel:LocalToScreen(0, 0)

    surface.SetDrawColor(RCD.Colors["white"])
    surface.SetMaterial(RCD.Materials["blur"])

    for i=1, 3 do
        RCD.Materials["blur"]:SetFloat("$blur", (i/3) * (amount or 6))
        RCD.Materials["blur"]:Recompute()

        render.UpdateScreenEffectTexture()
        surface.DrawTexturedRect(x*-1, y*-1, RCD.ScrW, RCD.ScrH)
    end
end

--[[ Change the origin point of a rotated texture ]]
function RCD.DrawTexturedRectRotatedPoint( x, y, w, h, rot, x0, y0 )
	local c = math.cos(math.rad(rot))
	local s = math.sin(math.rad(rot))
	
	local newx = y0 * s - x0 * c
	local newy = y0 * c + x0 * s
	
	surface.DrawTexturedRectRotated(x + newx, y + newy, w, h, rot)
end

--[[ Stencil function ]]
function RCD.MaskStencil(maskFunc, renderFunc, bool)
    render.ClearStencil()
    render.SetStencilEnable(true)
  
    render.SetStencilWriteMask(1)
    render.SetStencilTestMask(1)
  
    render.SetStencilFailOperation(STENCILOPERATION_REPLACE)
    render.SetStencilPassOperation(bool and STENCILOPERATION_REPLACE or STENCILOPERATION_KEEP)
    render.SetStencilZFailOperation(STENCILOPERATION_KEEP)
    render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_NEVER)
    render.SetStencilReferenceValue(1)
  
	maskFunc()
  
    render.SetStencilFailOperation(STENCILOPERATION_REPLACE)
    render.SetStencilPassOperation(bool and STENCILOPERATION_REPLACE or STENCILOPERATION_KEEP)
    render.SetStencilZFailOperation(STENCILOPERATION_KEEP)
    render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_EQUAL)
    render.SetStencilReferenceValue(bool and 0 or 1)
  
    renderFunc(self, w, h)
  
    render.SetStencilEnable(false)
    render.ClearStencil()
end

--[[ Function used to create fonts ]]
local FontTable = {}
function RCD.CreateFonts(size, fontType, fontWeight, italicOption)
	local fontSize = math.Round(size, 0)
	local fontName = "rcd_generate"..fontSize

    if FontTable[fontName] then 
        return fontName
    end

    surface.CreateFont(fontName, {
        font = (fontType or "Georama Black"), 
        size = fontSize, 
        weight = (fontWeight or 0),
        antialias = true,
        italic = italicOption,
    })
    FontTable[fontName] = true

    return fontName
end 

--[[ Function to created rounded rect ]]
function RCD.DrawRoundedRect(radius, x, y, w, h, color)
    surface.SetDrawColor(color or color_white)

    surface.DrawRect(x + radius, y, w - radius * 2, h)
    surface.DrawRect(x, y + radius, radius, h - radius * 2)
    surface.DrawRect(x + w - radius, y + radius, radius, h - radius * 2)

    RCD.DrawCircle(x + radius, y + radius, radius, -180, -90, color)
    RCD.DrawCircle(x + w - radius, y + radius, radius, -90, 0, color)
    RCD.DrawCircle(x + radius, y + h - radius, radius, -270, -180, color)
    RCD.DrawCircle(x + w - radius, y + h - radius, radius, 270, 180, color)
end

--[[ Function to created texture rect ]]
function RCD.RoundedTextureRect(radius, x, y, w, h, mat, color, rotation)
    RCD.MaskStencil(function()
        RCD.DrawRoundedRect(radius, x, y, w, h, color)
    end, function()
        surface.SetMaterial(mat)
        surface.DrawTexturedRect(x, y, w, h)
    end)
end
--addons/realisticcardealer/lua/realistic_cardealer/vgui/cl_slider_vehc.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/vgui/cl_accordion.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/vgui/cl_circular_avatar.lua:
local PANEL = {}

function PANEL:Init()
    self.RCDAvatar = vgui.Create("AvatarImage", self)
    self.RCDAvatar:Dock(FILL)
    self.RCDAvatar:SetPaintedManually(true)
end

function PANEL:Paint(w, h)
    render.ClearStencil()
    render.SetStencilEnable(true)

    render.SetStencilWriteMask(1)
    render.SetStencilTestMask(1)

    render.SetStencilFailOperation(STENCILOPERATION_REPLACE)
    render.SetStencilPassOperation(STENCILOPERATION_ZERO)
    render.SetStencilZFailOperation(STENCILOPERATION_ZERO)
    render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_NEVER)
    render.SetStencilReferenceValue(1)

    RCD.DrawCircle(w/2, h/2, w/2, 0, 380, RCD.Colors["white"])

    render.SetStencilFailOperation(STENCILOPERATION_ZERO)
    render.SetStencilPassOperation(STENCILOPERATION_REPLACE)
    render.SetStencilZFailOperation(STENCILOPERATION_ZERO)
    render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_EQUAL)
    render.SetStencilReferenceValue(1)

    self.RCDAvatar:PaintManual()

    render.SetStencilEnable(false)
    render.ClearStencil()
end

vgui.Register("RCD:CircularAvatar", PANEL)
--addons/bb_isimeklentisi/lua/autorun/rpname_enforcer_loader.lua:
return gluapack()()
--addons/rsc/lua/rsc/classes/capture_request.lua:
local setmetatable = setmetatable
local RSC = RSC
local promise = RSC.promise
local timer = timer
local IsValid = IsValid
local IsEntity = IsEntity
local RecipientFilter = RecipientFilter
local isnumber = isnumber
local net = net
local tostring = tostring
local CLIENT = CLIENT
local SERVER = SERVER
local ipairs = ipairs
local hook = hook

RSC.CaptureRequest = RSC.CaptureRequest or {}
local CaptureRequest = RSC.CaptureRequest

CaptureRequest.Requests = CaptureRequest.Requests or {}
CaptureRequest.RequestsByID = CaptureRequest.RequestsByID or {}

-- Meta for capture request class
CaptureRequest.CAPTURE_REQUEST = CaptureRequest.CAPTURE_REQUEST or {}
local CAPTURE_REQUEST = CaptureRequest.CAPTURE_REQUEST
CAPTURE_REQUEST.__index = CAPTURE_REQUEST

-- This is async function
function CAPTURE_REQUEST:Capture(victim, serviceName, quality, uniqueID)
    -- We can't initiate capture while it is already capturing someone
    if self:IsInQueue() then return promise.Reject("already in queue") end

    self.victim = nil
    self.prepareData = nil
    self.successful = nil
    self.result = nil
    self.uniqueID = nil

    -- Sets service class or fastest service
    self.service = RSC.Service.Get(serviceName)
    if not self.service then
        local ok, service = RSC.Service.FindFastest():SafeAwait()
        if not ok then return promise.Reject(service) end

        self.service = service
    end

    -- Sets quality in range from 0 to 2, or sets 2
    self.quality = (isnumber(quality) and quality >= 0 and quality <= 3) and
                   quality or
                   2 -- By default use best quality

    if not self.service then return promise.Reject("#rsc.errors.invalid_service") end

    -- Validating victim
    if not IsEntity(victim) or not victim:IsValid() or not victim:IsPlayer() or victim:IsBot() then
        return promise.Reject("#rsc.errors.invalid_victim")
    end

    while CaptureRequest.Requests[victim] do
        -- Waiting until list is free
        CaptureRequest.Requests[victim]:WaitForResult():SafeAwait()
    end

    -- Registering this capture request in the list
    self.victim = victim
    CaptureRequest.Requests[self.victim] = self

    -- Creating unique id on server side
    if SERVER then
        self.uniqueID = uniqueID or RSC.UniqueID()
        CaptureRequest.RequestsByID[self.uniqueID] = self
    end

    -- Clients must wait for server approve their request
    if CLIENT then
        net.Start("RSC.NetworkV2")
            net.WriteUInt(RSC.NET_OP_REQUEST_CAPTURE, 4)
            net.WriteEntity( self:GetVictim() )
            net.WriteUInt( self:GetQuality(), 2 )
            net.WriteString( self:GetService():GetName() )
        net.SendToServer()

        -- Waiting for this request become registered
        promise.New(function(resolve)
            self.onRegistered:Once(resolve)
        end):Await()

        hook.Run("RSC.OnCaptureStarted", self)
    return end

    -- If victim didn't respond with result in specified timeout, then set timeout error
    timer.Simple(RSC.Config.CaptureTimeout or 30, function()
        if not self:IsInQueue() then return end
        self:Error("#rsc.errors.timeout")
    end)

    -- Get prepare data (like auth token) from current service
    local ok, prepareData = self:GetService():Prepare():SafeAwait()
    if not ok then return promise.Reject(prepareData) end
    self.prepareData = prepareData and tostring(prepareData)

    -- Registering all CaptureRequest instances on receivers
    if self.receivers:GetCount() ~= 0 then
        for _, ply in ipairs( self:GetReceivers() ) do
            self:AddReceiver(ply)
        end
    end

    -- Requesting capture from victim
    net.Start("RSC.NetworkV2")
        net.WriteUInt(RSC.NET_OP_REQUEST_CAPTURE, 4)
        net.WriteUInt( self:GetQuality(), 2 )
        net.WriteString( self:GetService():GetName() )
        net.WriteBool( self:GetPrepareData() ~= nil )
        if self:GetPrepareData() then net.WriteString( self:GetPrepareData() ) end
    net.Send( self:GetVictim() )

    hook.Run("RSC.OnCaptureStarted", self)
end
CAPTURE_REQUEST.Capture = promise.Async(CAPTURE_REQUEST.Capture)

function CAPTURE_REQUEST:IsValid() return IsValid(self.victim) end
function CAPTURE_REQUEST:GetVictim() return self:IsValid() and self.victim end
function CAPTURE_REQUEST:IsInQueue() return self:IsValid() and CaptureRequest.Requests[ self:GetVictim() ] == self end
function CAPTURE_REQUEST:GetUniqueID() return self.uniqueID end
function CAPTURE_REQUEST:GetService() return self.service end
function CAPTURE_REQUEST:GetQuality() return self.quality or 2 end
function CAPTURE_REQUEST:GetReceivers() return SERVER and self.receivers:GetPlayers() or {} end
function CAPTURE_REQUEST:GetPrepareData() return self.prepareData end
function CAPTURE_REQUEST:IsEnded() return not self:IsInQueue() and self.successful ~= nil end
function CAPTURE_REQUEST:IsOk() return self.successful end
function CAPTURE_REQUEST:GetResult() return self.result end

function CAPTURE_REQUEST:AddReceiver(ply)
    if CLIENT then return end

    self.receivers:AddPlayer(ply)

    if self:IsInQueue() then
        RSC.RegisterCaptureRequestOnClient(
            ply,
            self:GetUniqueID(),
            self:GetVictim(),
            self:GetQuality(),
            self:GetService():GetName(),
            self:GetPrepareData()
        )

        local phrase = RSC.GetPhrase("rsc.notify.receiver_added")
        self.onMessage:Emit(self, RSC.MESSAGE_TYPE_INFO, phrase:format(ply:GetName()), RSC.MESSAGE_SOURCE_SERVER)
    end
end

function CAPTURE_REQUEST:Remove()
    if self:IsInQueue() then
        CaptureRequest.Requests[ self:GetVictim() ] = nil
        if self:GetUniqueID() then CaptureRequest.RequestsByID[ self:GetUniqueID() ] = nil end

        if CLIENT and self:GetUniqueID() then
            net.Start("RSC.NetworkV2")
                net.WriteUInt(RSC.NET_OP_CANCEL_REQUEST, 4)
                net.WriteString( self:GetUniqueID() )
            net.SendToServer()
        end
    end
end

function CAPTURE_REQUEST:SetResult(ok, result)
    if not self:IsInQueue() then return end

    self.successful = ok
    self.result = result

    self:Remove()
    self.onResult:Emit(self, ok, result)
end

function CAPTURE_REQUEST:Error(err, source)
    source = source or RSC.MESSAGE_SOURCE_SERVER

    self.onMessage:Emit(self, RSC.MESSAGE_TYPE_ERROR, err, source)
    self:SetResult(false, err)
end

function CAPTURE_REQUEST:WaitForResult()
    return promise.New(function(res, rej)
        if self:IsEnded() then
            if self:IsOk() then res( self:GetResult() ) else rej( self:GetResult() ) end
        return end

        self.onResult:Once(function(_, ok, result)
            if ok then res(result) else rej(result) end
        end)
    end)
end

-- Aliases for service
function CAPTURE_REQUEST:GetDownloadURL()
    return self:WaitForResult():Then(function(result)
        return self:GetService():GetDownloadURL(result, self:GetPrepareData())
    end)
end

function CAPTURE_REQUEST:Download()
    return self:WaitForResult():Then(function(result)
        return self:GetService():Download(result, self:GetQuality(), self:GetPrepareData())
    end)
end

-- Constructor for capture request class
function CaptureRequest.New()
    local request = setmetatable({}, CAPTURE_REQUEST)
    request.onMessage = RSC.Event.New() -- onMessage:On( function(request, messageType, messageStr, source) end )
    request.onResult = RSC.Event.New() -- onResult:On( function(request, ok, result) end )

    if SERVER then request.receivers = RecipientFilter() end

    if SERVER then
        request.onMessage:On(function(self, messageType, messageStr, source)
            if not self:IsValid() then return end
            RSC.SendMessage(messageType, messageStr, self.receivers, source, self:GetVictim())
        end)

        request.onResult:On(function(self, ok, result)
            if not self:IsValid() then return end
            RSC.SendResult(self.receivers, self:GetVictim(), ok, result)
        end)
    end

    if CLIENT then
        request.onRegistered = RSC.Event.New() -- onRegistered:On( function(request, quality, serviceName, prepareData) end )
        request.onRegistered:On(function(self, quality, serviceName, prepareData)
            if not self:IsInQueue() then return end
            self.quality = quality
            self.service = RSC.Service.Get(serviceName)
            self.prepareData = prepareData
        end)
    end

    return request
end

--addons/rsc/lua/rsc/client/cl_init.lua:

local ScreenFraction = 1
do
    local round, max = math.Round, math.max
    function RSC.ScreenScale(size)
        local f = max(1, ScreenFraction * RSC.ScrH) -- Do not downscale UI
        return size and round(f * size) or f
    end
end

function RSC.GenerateFonts()
    surface.CreateFont("RSC 16", {
        font = "Roboto",
        extended = true,
        size = RSC.ScreenScale(16)
    })

    surface.CreateFont("RSC 16 Bold", {
        font = "Roboto",
        extended = true,
        size = RSC.ScreenScale(16),
        weight = 700
    })

    surface.CreateFont("RSC 18", {
        font = "Roboto",
        extended = true,
        size = RSC.ScreenScale(18)
    })

    surface.CreateFont("RSC 18 Bold", {
        font = "Roboto",
        extended = true,
        size = RSC.ScreenScale(18),
        weight = 700
    })

    surface.CreateFont("RSC 24", {
        font = "Roboto",
        extended = true,
        size = RSC.ScreenScale(24),
    })

    surface.CreateFont("RSC 48", {
        font = "Roboto",
        extended = true,
        size = RSC.ScreenScale(48),
    })
end

function RSC.OnScreenSizeChanged()
    RSC.ScrW = ScrW()
    RSC.ScrH = ScrH()
    ScreenFraction = 1 / 1080
    RSC.GenerateFonts()
end

hook.Add("OnScreenSizeChanged", "RSC", RSC.OnScreenSizeChanged)
RSC.OnScreenSizeChanged()

local MaterialCache = {}
function RSC.URLMaterial(url, params)
    if MaterialCache[url] then
        return MaterialCache[url]
    end

    local filename = util.CRC(url) .. "." .. (url:GetExtensionFromFilename() or "dat")
    local path = "cache/images/" .. filename
    if not file.Exists("cache/images", "DATA") then file.CreateDir("cache/images") end
    if file.Exists(path, "DATA") then
        local mat = Material("data/" .. path, params)
        return mat
    end

    local mat = CreateMaterial(filename, "UnlitGeneric", {
        ["$basetexture"] = "___error",
        ["$alpha"] = 0,
    })

    local function failed(err)
        mat:SetInt("$alpha", 1)
        MaterialCache[url] = nil
    end

    local function success(body, _, _, code)
        if code ~= 200 then
            failed("invalid status code")
            return
        end

        file.Write(path, body)
        local try = Material("data/" .. path, params)

        for k, v in pairs(try:GetKeyValues()) do
            local vtype = type(v)

            if (vtype == "ITexture") then
                mat:SetTexture(k, v)
            elseif (vtype == "VMatrix") then
                mat:SetMatrix(k, v)
            elseif (vtype == "Vector") then
                mat:SetVector(k, v)
            elseif (vtype == "number") then
                if (math.floor(v) == v) then
                    mat:SetInt(k, v)
                else
                    mat:SetFloat(k, v)
                end
            end
        end

        MaterialCache[url] = nil
    end

    http.Fetch(url, success, failed)

    MaterialCache[url] = mat
    return mat
end

--addons/rsc/lua/rsc/client/cl_admin.lua:
local promise = RSC.promise

RSC.ConVar("rsc_transfer", "auto")
if not RSC.Service.Get( cvars.String("rsc_transfer") ) then GetConVar("rsc_transfer"):SetString( "auto" ) end

RSC.ConVar("rsc_quality", "1")
RSC.ConVar("rsc_save", "1")

local function PrepareImagePage()
    if not IsValid(RSC.GalleryPanel) then
        RSC.OpenGallery()
    end

    local page = RSC.GalleryPanel:CreatePage(nil, 1)

    page.overlay = vgui.Create("Panel", page)
    page.overlay:Dock(FILL)

    page.overlay.icon = vgui.Create("Panel", page.overlay)
    do
        local icon = page.overlay.icon
        icon:Dock(TOP)
        icon:DockMargin(0, 8, 0, 0)
        icon:SetTall(RSC.ScreenScale(48))
        icon.img = RSC.URLMaterial("https://i.imgur.com/9oEOdpJ.png", "smooth")
        icon.rotation = 0
        function icon:PerformLayout() self:DockMargin(0, self:GetParent():GetTall()/2 - self:GetTall() - RSC.ScreenScale(128), 0, 0) end
        function icon:AnimationThink()
            if not self.img or not self:IsEnabled() then return end
            if not self.rotationStart then
                self.rotationStart = SysTime()
                self.oldRotation = self.rotation
                if self.oldRotation == 360 then self.oldRotation = 0 end
            end

            local t = (SysTime() - self.rotationStart) / 0.5
            local e = math.ease.InOutQuint( math.min(t, 1) )

            self.rotation = self.oldRotation + 60 * e

            if t >= 1.5 then self.rotationStart = nil end
        end
        function icon:Paint(w, h)
            if not self.img or not self:IsEnabled() then return end

            surface.SetDrawColor( ColorAlpha(HSVToColor(self.rotation, 0.7, 0.7), 255) )
            surface.SetMaterial(self.img)
            surface.DrawTexturedRectRotated(w/2, h/2, h, h, self.rotation)
        end
    end

    page.overlay.title = vgui.Create("DLabel", page.overlay)
    do
        local title = page.overlay.title
        title:Dock(TOP)
        title:SetFont("RSC 48")
        title:SetText("#rsc.ui.in_progress")
        title:SetColor(color_white)
        title:SetContentAlignment(2)
        title:DockMargin(0, RSC.ScreenScale(8), 0, 0)
        function title:PerformLayout() self:SizeToContentsY() end
    end

    page.overlay.status = vgui.Create("Panel", page.overlay)
    do
        local status = page.overlay.status
        status:Dock(FILL)
        status:DockMargin(0, 8, 0, 0)
        function status:Append(message)
            local text = vgui.Create("DLabel", self)
            text:Dock(TOP)
            text:SetZPos(1)
            text:SetFont("RSC 18 Bold")
            text:SetText(message)
            text:SetColor(color_white)
            text:SetContentAlignment(5)
            text:SetAlpha(0)
            --text:SizeTo(0, , 0.2, 0, 5)
            text:AlphaTo(200, 0.1, 0)
            function text:PerformLayout() self:SizeToContentsY() end

            local children = self:GetChildren()
            if children[2] then
                children[2]:SetFont("RSC 18")
                children[2]:AlphaTo(100, 0.1)
            end

            return text
        end
        function status:AddNotify(from, message)
            return self:Append(("[%s] %s"):format(from, language.GetPhrase(message)))
        end
    end

    return page
end

local CaptureRequest = promise.Async(function(victim, serviceName, quality)
    local request = RSC.CaptureRequest.New()
    local page = PrepareImagePage()
    assert(IsValid(page), "couldn't create a gallery")

    function RSC.GalleryPanel:OnRemove()
        request:Remove()
    end

    local function notify(type, message, source)
        if not IsValid(page) then return end

        source = source == RSC.MESSAGE_SOURCE_VICTIM and "VICTIM" or
                 source == RSC.MESSAGE_SOURCE_SERVER and "SERVER" or
                 "USER"

        local label = page.overlay.status:AddNotify(source, message)
        if type == RSC.MESSAGE_TYPE_ERROR then
            page.overlay.icon:SetEnabled(false)
            page.overlay.title:SetText("#rsc.errors.error_happened")
            label:SetColor(Color(250, 82, 82))
        elseif type == RSC.MESSAGE_TYPE_SUCCESS then
            label:SetColor(Color(83, 198, 104))
        end
    end

    -- This isn't necessary, but ¯\_(ツ)_/¯
    if serviceName == "auto" then
        serviceName = nil -- Capture request should automatically find best service
    end

    request.onMessage:On(function(request, type, message, source) notify(type, message, source) end)

    local ok, err = request:Capture(victim, serviceName, quality):SafeAwait()
    if not ok then notify(RSC.MESSAGE_TYPE_ERROR, err) end

    local ok, result = request:WaitForResult():SafeAwait()
    if not ok or not IsValid(page) then return end

    local metadata = {}
    metadata.version = RSC.Metadata.CURRENT_VERSION
    metadata.uniqueID = request:GetUniqueID()
    metadata.takenBy = RSC.SteamName( RSC.LocalPlayer )
    metadata.takenByID = RSC.LocalPlayer:SteamID()
    metadata.victim = RSC.SteamName( victim )
    metadata.victimID = victim:SteamID()
    metadata.timestamp = os.time()

    RSC.Log("info", ("Received result from server: %s - %q."):format(tostring(ok), tostring(result)))
    if not ok then return end

    notify(RSC.MESSAGE_TYPE_INFO, "#rsc.notify.downloading")
    local ok, captureData = request:Download():SafeAwait()
    if not ok or not IsValid(page) then
        notify(RSC.MESSAGE_TYPE_ERROR, RSC.GetPhrase("rsc.errors.download_failed"):format(tostring(captureData)))
    return end

    page.overlay:Remove()
    page.overlay = nil

    local imageFormat = RSC.ParseQuality( request:GetQuality() )
    local path = cvars.Bool("rsc_save") and "rsc/" or "rsc/temp/"
    path = path .. os.date("%m-%d-%Y-%H-%M-%S-") .. util.CRC(captureData) .. "." .. (imageFormat == "jpeg" and "jpg" or imageFormat)

    file.CreateDir("rsc/temp")
    file.Write(path, captureData)

    RSC.Metadata.AppendMetadata(path, metadata)

    RSC.Log("info", "Successfully received screengrab. Saved at data/" .. path)

    page:SetImage("data/" .. path)
    RSC.GalleryPanel:Update()

    for index, _page in ipairs(RSC.GalleryPanel.pages) do
        if page == _page then continue end
        if _page.img_src == page.img_src then
            RSC.GalleryPanel:RemovePage(index)
            break
        end
    end
end)

local function CreateButton(parent)
    local btn = vgui.Create("DButton", parent)
    btn:SetFont("RSC 16")
    btn.color = Color(64, 64, 64)
    btn.hoverColor = Color(77, 77, 77)
    btn.pressColor = Color(72, 72, 72)
    btn.disabledColor = Color(46, 46, 46)
    btn.textColor = Color(225, 225, 225)
    btn.disabledTextColor = Color(255, 255, 255, 20)
    btn:SetColor(btn.textColor)
    function btn:SetEnabled(val)
        DButton.SetEnabled(self, val)

        if self:IsEnabled() then
            self:SetColor(self.textColor)
        else
            self:SetColor(self.disabledTextColor)
        end
    end
    function btn:Paint(w, h)
        surface.SetDrawColor(self.color)

        if self.Hovered then surface.SetDrawColor(self.hoverColor) end
        if self.Depressed then surface.SetDrawColor(self.pressColor) end
        if not self:IsEnabled() then surface.SetDrawColor(self.disabledColor) end

        if self.Depressed then
            surface.DrawRect(1, 0, w-2, h-1)
        else
            surface.DrawRect(0, 0, w, h)
        end
    end
    function btn:DoClick()
        surface.PlaySound("UI/buttonclick.wav")
    end

    return btn
end

local function CreateScrollPanel(parent)
    local pnl = vgui.Create("DScrollPanel", parent)
    pnl.color = Color(38, 38, 38)
    function pnl:Paint(w, h)
        surface.SetDrawColor(self.color)
        surface.DrawRect(0, 0, w, h)
    end

    local vbar = pnl:GetVBar()
    vbar:SetHideButtons(true)
    function vbar:Paint(w, h) end
    function vbar.btnGrip:Paint(w, h)
        surface.SetDrawColor(64, 64, 64)
        surface.DrawRect(0, 0, w, h)
    end

    return pnl
end

local function CreateSeperator(parent)
    local seperator = vgui.Create("Panel", parent)
    local size = RSC.ScreenScale(1)
    seperator:SetSize(size, size)
    function seperator:Paint(w, h)
        surface.SetDrawColor(255, 255, 255, 5)
        surface.DrawRect(0, 0, w, h)
    end

    return seperator
end

local function CreateTopbar(frame)
    local topbar = vgui.Create("Panel", frame)
    topbar:Dock(TOP)
    topbar:SetTall(RSC.ScreenScale(24))
    function topbar:Think()
        local mousex = math.Clamp( gui.MouseX(), 1, RSC.ScrW - 1 )
        local mousey = math.Clamp( gui.MouseY(), 1, RSC.ScrH - 1 )
        if self.dragging then
            local x, y = mousex - self.dragging[1], mousey - self.dragging[2]

            x = math.Clamp(x, 0, RSC.ScrW - frame:GetWide())
            y = math.Clamp(y, 0, RSC.ScrH - frame:GetTall())

            frame:SetPos(x, y)
        end

        if self.Hovered then
            self:SetCursor("sizeall")
        end
    end
    function topbar:OnMousePressed()
        self.dragging = { gui.MouseX() - frame:GetX(), gui.MouseY() - frame:GetY() }
        self:MouseCapture(true)
    end
    function topbar:OnMouseReleased()
        self.dragging = nil
        self:MouseCapture(false)
    end

    do
        local seperator = CreateSeperator(frame)
        seperator:Dock(TOP)
    end

    frame.close = vgui.Create("DButton", topbar)
    do
        local close = frame.close
        close:Dock(RIGHT)
        close:SetText("")
        close:SetWide(RSC.ScreenScale(48))
        close.icon = RSC.URLMaterial("https://i.imgur.com/aIZlJWO.png", "smooth")
        local icon_size = RSC.ScreenScale(24)
        function close:Paint(w, h)
            surface.SetDrawColor(225, 225, 225)

            if self.Hovered then
                surface.SetDrawColor(250, 82, 82)
                surface.DrawRect(0, 0, w, h)
                surface.SetDrawColor(255, 255, 255)
            end

            surface.SetMaterial(self.icon)
            surface.DrawTexturedRect(w/2 - icon_size/2, h/2 - icon_size/2, icon_size, icon_size)
        end
        function close:DoClick()
            surface.PlaySound("UI/buttonclick.wav")
            frame:SetMouseInputEnabled(false)
            frame:AlphaTo(0, 0.1, 0, function()
                frame:Remove()
            end)
        end
    end

    frame.title = vgui.Create("DLabel", topbar)
    do
        local title = frame.title
        title:Dock(FILL)
        title:DockMargin(RSC.ScreenScale(8), 0, 8, 0)
        title:SetText("Retro's Screencap")
        title:SetFont("RSC 18 Bold")
        title:SetColor(Color(250, 176, 5))
    end
end

local function CreatePlayer(ply)
    local pnl = vgui.Create("DButton")
    pnl:Dock(TOP)
    pnl:DockMargin(0, 0, 0, RSC.ScreenScale(4))
    pnl:DockPadding(RSC.ScreenScale(16), RSC.ScreenScale(6), RSC.ScreenScale(16), RSC.ScreenScale(6))
    pnl:SetTall(RSC.ScreenScale(48))
    pnl:SetText("")
    pnl.player = ply
    function pnl:Paint(w, h)
        if self.selected then
            surface.SetDrawColor(250, 176, 5)
            surface.DrawOutlinedRect(0, 0, w, h, 1)

            surface.SetDrawColor(255, 255, 255, 5)
            surface.DrawRect(0, 0, w, h)
        end
        if self.Hovered then
            surface.SetDrawColor(255, 255, 255, 2)
            surface.DrawRect(0, 0, w, h)
        end
    end
    function pnl:DoClick()
        self.selected = true

        local players = self:GetParent():GetParent():GetParent()
        players:SetPlayer(self.player)
    end

    pnl.avatar = vgui.Create("AvatarImage", pnl)
    do
        local avatar = pnl.avatar
        avatar:Dock(LEFT)
        avatar:DockMargin(0, 0, RSC.ScreenScale(8), 0)
        avatar:SetPlayer(ply, 64)
        function avatar:PerformLayout() self:SetWide( self:GetTall() ) end
    end

    local function GetPlayerField(ply, field)
        if field == "name" then
            return ply:GetName()
        elseif field == "steamname" then
            if DarkRP then return ply:SteamName() else return ply:GetName() end
        elseif field == "steamid" then
            return ply:SteamID()
        elseif field == "steamid64" then
            return ply:SteamID64()
        elseif field == "usergroup" then
            return ply:GetUserGroup()
        end
    end

    pnl.topfield = vgui.Create("DLabel", pnl)
    do
        local topfield = pnl.topfield
        topfield:Dock(TOP)
        topfield:SetText(GetPlayerField(ply, RSC.Config.PlayerTopField) or GetPlayerField(ply, "name"))
        topfield:SetFont("RSC 16")
        topfield:SetColor(Color(233, 236, 239))
        topfield:SetContentAlignment(1)
        function topfield:PerformLayout() self:SetTall( pnl:GetTall() / 2 - 6 ) end
    end

    pnl.bottomfield = vgui.Create("DLabel", pnl)
    do
        local bottomfield = pnl.bottomfield
        bottomfield:Dock(FILL)
        bottomfield:SetText(GetPlayerField(ply, RSC.Config.PlayerBottomField) or GetPlayerField(ply, "steamid"))
        bottomfield:SetFont("RSC 16 Bold")
        bottomfield:SetColor(Color(255, 255, 255, 20))
        bottomfield:SetContentAlignment(1)
    end

    return pnl
end

local function CreatePlayerSearchBar(frame)
    frame.players.search = vgui.Create("Panel", frame.players)
    do
        local search = frame.players.search
        search:Dock(BOTTOM)
        search:SetTall( RSC.ScreenScale(36) )
        search.color = Color(38, 38, 38)
        function search:Paint(w, h)
            surface.SetDrawColor(self.color)
            surface.DrawRect(0, 0, w, h)
        end

        local sep = CreateSeperator(frame.players)
        sep:Dock(BOTTOM)
    end

    frame.players.search.icon = vgui.Create("DImage", frame.players.search)
    frame.players.search.icon:Dock(LEFT)
    frame.players.search.icon:DockMargin( RSC.ScreenScale(8), RSC.ScreenScale(4), RSC.ScreenScale(8), RSC.ScreenScale(4) )
    frame.players.search.icon:SetMaterial( RSC.URLMaterial("https://i.imgur.com/1qAtYCG.png", "smooth") )
    frame.players.search.icon:SetKeepAspect(true)
    frame.players.search.icon.PerformLayout = function(self, w, h) self:SetWide(h) end

    frame.players.search.input = vgui.Create("DTextEntry", frame.players.search)
    frame.players.search.input:Dock(FILL)
    frame.players.search.input:SetFont("RSC 18")
    frame.players.search.input:SetPaintBackground(false)
    frame.players.search.input:SetCursorColor( Color(255, 255, 255, 150) )
    frame.players.search.input:SetPlaceholderColor( Color(255, 255, 255, 25) )
    frame.players.search.input:SetPlaceholderText("#rsc.ui.search_placeholder")
    frame.players.search.input:SetUpdateOnType(true)
    function frame.players.search.input:OnGetFocus()
        self:SetTextColor( self:GetCursorColor() )
        frame.players.search.icon:SetImageColor( self:GetCursorColor() )
    end
    function frame.players.search.input:OnLoseFocus()
        self:SetTextColor( self:GetPlaceholderColor() )
        frame.players.search.icon:SetImageColor( self:GetPlaceholderColor() )
    end
    function frame.players.search.input:OnValueChange(str)
        frame.players.filter = str:Trim() ~= "" and str:lower()
        frame.players:UpdatePlayers()
    end

    frame.players.search.input:OnLoseFocus()
end

local function CreatePlayerList(frame)
    frame.players = vgui.Create("Panel", frame)
    frame.players:Dock(LEFT)
    frame.players:DockMargin(RSC.ScreenScale(32), RSC.ScreenScale(16), RSC.ScreenScale(15), RSC.ScreenScale(8))
    function frame.players:PerformLayout()
        local ml, _, mr = self:GetDockMargin()
        self:SetWide(frame:GetWide() / 2 - ml - mr)
    end
    function frame.players:AddPlayer(ply)
        if not IsValid(ply) then return end

        local pnl = CreatePlayer(ply)
        self.inner:AddItem(pnl)
    end
    function frame.players:SetPlayer(ply)
        self.player = IsValid(ply) and ply or nil

        for _, pnl in ipairs( self.inner:GetCanvas():GetChildren() ) do
            pnl.selected = pnl.player == ply
        end

        frame.screengrab:SetEnabled( ply ~= nil )
    end
    function frame.players:GetPlayer()
        return self.player
    end
    function frame.players:FilterPlayer(ply)
        if not IsValid(ply) then return end
        if not self.filter then return true end

        if ply:GetName():lower():match(self.filter) then return true end
        if ply:SteamID():lower():match(self.filter) then return true end
        if ply:SteamID64() and ply:SteamID64():lower():match(self.filter) then return true end
        if ply:GetUserGroup():lower():match(self.filter) then return true end
    end
    frame.players.UpdatePlayers = promise.Async(function(self)
        -- Checking everyone
        local players = {}
        for _, ply in ipairs(player.GetAll()) do
            players[#players + 1] = RSC.AsyncCanScreengrab(RSC.LocalPlayer, ply):Then(function(can)
                if can then return ply end
            end)
        end

        -- Transforming array of promises to array of players
        players = promise.All(players):Await()

        if not IsValid(self) then return end -- frame.players can become invalid
        self.inner:Clear()

        -- Adding players
        for _, ply in pairs(players) do
            if self:FilterPlayer(ply) then
                self:AddPlayer(ply)
                if self:GetPlayer() == ply then self:SetPlayer(ply) end
            end
        end
    end)

    frame.players.inner = CreateScrollPanel(frame.players)
    frame.players.inner:Dock(FILL)


    frame.players:UpdatePlayers()
    -- Update players when they join or disconnect?

    CreatePlayerSearchBar(frame)
end

local function CreateButtons(frame)
    local bottom = vgui.Create("Panel", frame)
    bottom:Dock(BOTTOM)
    bottom:DockMargin(RSC.ScreenScale(36), 0, RSC.ScreenScale(32), RSC.ScreenScale(16))
    bottom:SetTall(RSC.ScreenScale(36))

    local left = vgui.Create("Panel", bottom)
    left:Dock(LEFT)
    function left:PerformLayout() self:SetWide( bottom:GetWide()/2 ) end

    frame.open_gallery = CreateButton(left)
    frame.open_gallery:Dock(FILL)
    frame.open_gallery:DockMargin(RSC.ScreenScale(32), 0, RSC.ScreenScale(48), 0)
    frame.open_gallery:SetText("#rsc.ui.open_gallery")
    function frame.open_gallery:DoClick()
        surface.PlaySound("UI/buttonclick.wav")

        RSC.OpenGallery()
        --frame:Remove()
    end

    frame.screengrab = CreateButton(bottom)
    frame.screengrab:Dock(FILL)
    frame.screengrab:DockMargin(RSC.ScreenScale(48), 0, RSC.ScreenScale(32), 0)
    frame.screengrab:SetText("#rsc.ui.screengrab")
    frame.screengrab:SetFont("RSC 16 Bold")
    frame.screengrab.color = Color(250, 176, 5)
    frame.screengrab.hoverColor = Color(252, 196, 25)
    frame.screengrab.pressColor = Color(245, 159, 0)
    frame.screengrab.textColor = Color(0, 0, 0)
    frame.screengrab:SetEnabled(false)
    function frame.screengrab:DoClick()
        surface.PlaySound("UI/buttonclick.wav")
        CaptureRequest(frame.players:GetPlayer(), cvars.String("rsc_transfer"), cvars.Number("rsc_quality"))
    end
end

local function CreateOptionCategory(parent, text)
    local label = vgui.Create("DLabel", parent)
    label:Dock(TOP)
    label:DockMargin(0, RSC.ScreenScale(8), 0, RSC.ScreenScale(4))
    label:SetFont("RSC 18 Bold")
    label:SetText(text)
    label:SetColor(Color(225, 225, 225))
    function label:PerformLayout() self:SetTall( select(2, self:GetContentSize()) ) end

    return label
end

local function CreateCheckbox(parent)
    local check = vgui.Create("DCheckBoxLabel", parent)
    local size16 = RSC.ScreenScale(16)
    local size1 = RSC.ScreenScale(1)

    check:SetSize(size16, size16)
    check:SetFont("RSC 16")
    check.Label:SetMouseInputEnabled(false)
    function check:PerformLayout()
        self.Button:SetPos(size1, size1)
        self.Button:SetSize(size16 - size1, size16 - size1)

        self.Label:SizeToContents()
        self.Label:SetPos(size16 + RSC.ScreenScale(9), (size16 - self.Label:GetTall()) / 2)
    end

    return check
end

local function CreateOptionForm(parent)
    local form = vgui.Create("DSizeToContents", parent)
    form:Dock(TOP)
    form:DockMargin(RSC.ScreenScale(16), 0, 0, RSC.ScreenScale(4))
    function form:OnChange()
        if self.changing then return end
        self.changing = true

        for _, check in ipairs( self:GetChildren() ) do
            if not check:IsEnabled() then continue end
            check:SetValue( check.convar:GetString() == check.value )
        end

        self.changing = false
    end

    function form:Checkbox(label, convar, value)
        local check = CreateCheckbox(self)
        check:Dock(TOP)
        check:DockMargin(0, 0, 0, RSC.ScreenScale(4))
        check:SetText(label)
        check.value = value
        check.convar = GetConVar(convar)
        function check:OnChange(val)
            if val then
                self.convar:SetString(self.value)
            end

            self:GetParent():OnChange()
        end
        local _SetText = check.SetText
        function check:SetText(label)
            _SetText(self, label)
            self:InvalidateLayout()
        end

        self:OnChange()
        return check
    end

    return form
end

local function CreateOptions(frame)
    frame.options = CreateScrollPanel(frame)
    frame.options:Dock(FILL)
    frame.options:DockMargin(16, 16, 32, 8)
    frame.options.color = color_transparent

    local title = CreateOptionCategory(frame.options, "#rsc.ui.options")
    title:DockMargin(0, 0, 0, 0)
    title:SetContentAlignment(5)

    CreateOptionCategory(frame.options, "#rsc.ui.transfer_service")
    do
        local transfer = CreateOptionForm(frame.options)
        transfer:Checkbox("#rsc.ui.auto_select", "rsc_transfer", "auto")

        for _, service in pairs(RSC.Service.Services) do
            local name = service:GetName()

            local check = transfer:Checkbox(name, "rsc_transfer", name)
            --check:SetTooltip(api.Description)

            local ping = vgui.Create("DImage", check)
            ping:SetSize(RSC.ScreenScale(16), RSC.ScreenScale(16))
            ping:SetImage("icon16/error.png")
            ping:SetTooltip("#rsc.ui.checking_status")
            ping:SetMouseInputEnabled(true)
            function ping:PerformLayout()
                local label = self:GetParent().Label
                self:SetX(label:GetX() + label:GetContentSize() + 8)
            end

            coroutine.wrap(function()
                local ok, status = promise.Resolve( service:Ping() ):SafeAwait()
                ok = ok and status
                if not IsValid(ping) then return end
                ping:SetImage(ok and "icon16/accept.png" or "icon16/exclamation.png")
                ping:SetTooltip(ok and "#rsc.ui.online" or "#rsc.ui.offline")
            end)()
        end

        local moreLater = transfer:Checkbox("#rsc.ui.more_later", "rsc_transfer")
        moreLater:SetEnabled(false)
    end

    CreateOptionCategory(frame.options, "#rsc.ui.image_quality")
    do
        local quality = CreateOptionForm(frame.options)
        quality:Checkbox("#rsc.ui.quality_best", "rsc_quality", "2")
        quality:Checkbox("#rsc.ui.quality_good", "rsc_quality", "1")
        quality:Checkbox("#rsc.ui.quality_low", "rsc_quality", "0")
    end

    CreateOptionCategory(frame.options, "#rsc.ui.other")
    do
        local save_images = CreateCheckbox(frame.options)
        save_images:Dock(TOP)
        save_images:DockMargin(RSC.ScreenScale(16), 0, 0, RSC.ScreenScale(4))
        save_images:SetText("#rsc.ui.save_screengrabs")
        save_images:SetFont("RSC 16")
        save_images:SetConVar("rsc_save")
    end
end

RSC.AdminMenu = nil
function RSC.OpenMenu()
    if IsValid(RSC.AdminMenu) then
        RSC.AdminMenu:Remove()
        RSC.AdminMenu = nil
    end

    RSC.HasAccess(RSC.LocalPlayer, function(can)
        if not can then
            if not RSC.Config.SilentMode then
                chat.AddText(Color(255, 0, 0), "[RSC] ", Color(255, 255, 255), "#rsc.errors.no_rights")
            end
        return end

        RSC.AdminMenu = vgui.Create("EditablePanel")

        local frame = RSC.AdminMenu
        frame:SetSize(math.min(RSC.ScreenScale(768), RSC.ScrW), math.min(RSC.ScreenScale(500), RSC.ScrH))
        frame:Center()
        frame:SetAlpha(0)
        frame:AlphaTo(255, 0.1)
        frame:MakePopup()

        function frame:Paint(w, h)
            surface.SetDrawColor(51, 51, 51)
            surface.DrawRect(0, 0, w, h)
        end

        CreateTopbar(frame)
        CreateButtons(frame)

        CreatePlayerList(frame)

        do
            local seperator = CreateSeperator(frame)
            seperator:Dock(LEFT)
        end

        CreateOptions(frame)
    end)
end

local function OpenMenuCommand(_, cmd, args)
    local foundPlayer = RSC.FindPlayer(args[1])
    if foundPlayer then
        RSC.CanScreengrab(nil, foundPlayer, function(can)
            if not can then return RSC.OpenMenu() end

            CaptureRequest(foundPlayer, cvars.String("rsc_transfer"), cvars.Number("rsc_quality"))
        end)
    return end

    RSC.OpenMenu()
end

RSC.Command("rsc_menu", OpenMenuCommand)

-- Do not overwrite screengrab concommand if it is already exists
if not concommand.GetTable()["screengrab"] then
    RSC.Command("screengrab", OpenMenuCommand)
end

--addons/sam-159/lua/autorun/sam.lua:
return gluapack()()
--addons/sam-159/lua/sam/libs/sh_globals.lua:
return gluapack()()
--addons/sam-159/lua/sam/ranks/sh_ranks.lua:
return gluapack()()
--addons/sam-159/lua/sam/player/sh_nw_vars.lua:
if SAM_LOADED then return end

local netstream = sam.netstream

local nwvars = {}

if SERVER then
	function sam.player.set_nwvar(ply, key, value, force)
		local id = ply:EntIndex()
		if force or nwvars[id][key] ~= value then
			nwvars[id][key] = value
			netstream.Start(nil, "SetNWVar", id, key, value)
		end
	end
end

if CLIENT then
	function sam.player.set_nwvar(ply, key, value)
		local id_vars = nwvars[ply:EntIndex()]
		id_vars[key] = value
	end

	netstream.Hook("SetNWVar", function(id, key, value)
		local id_vars = nwvars[id]
		if id_vars == nil then
			nwvars[id] = {
				[key] = value
			}
		else
			id_vars[key] = value
		end
	end)

	netstream.Hook("SendNWVars", function(vars)
		nwvars = vars
	end)

	netstream.Hook("RemoveNWVar", function(id)
		nwvars[id] = nil
	end)
end

function sam.player.get_nwvar(ply, key, default)
	local value = nwvars[ply:EntIndex()]
	if value then
		value = value[key]
		if value ~= nil then
			return value
		end
	end
	return default
end

if SERVER then
	hook.Add("OnEntityCreated", "SAM.NWVars", function(ent)
		if ent:IsPlayer() and ent:IsValid() then
			nwvars[ent:EntIndex()] = {}
		end
	end)

	hook.Add("SAM.PlayerNetReady", "SAM.SendNWVars", function(ply)
		netstream.Start(ply, "SendNWVars", nwvars)
	end)

	hook.Add("EntityRemoved", "SAM.RemoveNWVars", function(ent)
		if ent:IsPlayer() then
			local id = ent:EntIndex()
			nwvars[id] = nil
			netstream.Start(nil, "RemoveNWVar", id)
		end
	end)
end

--addons/sam-159/lua/sam/command/cl_command.lua:
return gluapack()()
--addons/sam-159/lua/sam/command/arguments/steamid.lua:
return gluapack()()
--addons/sam-159/lua/sam/command/arguments/text.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_frame.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_label_panel.lua:
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name

local LABEL_FONT = SUI.CreateFont("LabelPanel", "Roboto", 18)

local PANEL = {}

local add = function(s, c)
	if IsValid(s.pnl) then
		s.pnl:Remove()
	end

	local pnl = vgui.Create(c, s)
	s.pnl = pnl

	return pnl
end

function PANEL:Init()
	self.title = ""

	local label = self:Add(NAME .. ".Label")
	label:Dock(LEFT)
	self.label = label

	self:SetFont(LABEL_FONT)

	self:Dock(TOP)
	self:InvalidateLayout(true)
	self.Add = add
end

function PANEL:SetPanel(pnl)
	if IsValid(self.pnl) then
		self.pnl:Remove()
	end

	pnl:SetParent(self)
	self.pnl = pnl
end

function PANEL:SetLabel(lbl)
	self.title = lbl
	self:InvalidateLayout(true)
end

function PANEL:SetFont(font)
	self.font = font
	self.label:SetFont(font)
end

function PANEL:PerformLayout(w, h)
	local label = self.label
	local pnl = self.pnl

	local pnl_w, pnl_h = 0, 0
	if pnl then
		pnl_w, pnl_h = pnl:GetSize()
	end

	label:SetWide(w - pnl_w - 4)
	label:SetText(sui.wrap_text(self.title, self.font, w - pnl_w - 4))

	local _, _h = label:GetTextSize()
	self:SetTall(math.max(_h, pnl_h))

	if pnl then
		pnl:SetPos(w - pnl_w, h / 2 - pnl_h / 2)
	end
end

sui.register("LabelPanel", PANEL, "PANEL")
--addons/sui/lua/sui/vgui/sui_panel.lua:
local PANEL = {}

sui.scaling_functions(PANEL)

function PANEL:Init()
	self:ScaleInit()
end

sui.register("Panel", PANEL, "Panel")
--addons/sui/lua/sui/vgui/sui_zbutton.lua:
return gluapack()()
--addons/sam-159/lua/sam/menu/tabs/config.lua:
return gluapack()()
--addons/sam-159/lua/sam/menu/tabs/config/reports.lua:
if SAM_LOADED then return end

local sam = sam
local config = sam.config

local not_empty = function(s)
	return s and s ~= ""
end

local number_entry = function(setting, config_key, default)
	local entry = setting:Add("SAM.TextEntry")
	entry:SetWide(50)
	entry:SetPlaceholder("")
	entry:SetBackground(Color(34, 34, 34))
	entry:SetNumeric(true)
	entry:DisallowFloats()
	entry:DisallowNegative()
	entry:SetCheck(not_empty)
	entry:SetConfig(config_key, default)

	return entry
end

config.add_tab("Reports", function(parent)
	local body = parent:Add("SAM.ScrollPanel")
	body:Dock(FILL)
	body:LineMargin(0, 6, 0, 0)

	local i = 0
	body:GetCanvas():On("OnChildAdded", function(s, child)
		i = i + 1
		child:SetZPos(i)

		if not body.making_line then
			body:Line()
		end
	end)

	do
		local setting = body:Add("SAM.LabelPanel")
		setting:Dock(TOP)
		setting:SetLabel("Enable")
		setting:DockMargin(8, 6, 8, 0)

		local enable = setting:Add("SAM.ToggleButton")
		enable:SetConfig("Reports", true)
	end

	do
		local setting = body:Add("SAM.LabelPanel")
		setting:Dock(TOP)
		setting:SetLabel("Commands")
		setting:DockMargin(8, 6, 8, 0)

		local entry = setting:Add("SAM.TextEntry")
		entry:SetWide(200)
		entry:SetNoBar(true)
		entry:SetPlaceholder("")
		entry:SetMultiline(true)
		entry:SetConfig("Reports.Commands")
		entry.no_scale = true

		function entry:OnValueChange()
			self:SetTall(self:GetNumLines() * (sam.SUI.Scale(16) --[[font size]] + 1) + 1 + 2)
		end
		entry:OnValueChange()
	end

	do
		local setting = body:Add("SAM.LabelPanel")
		setting:Dock(TOP)
		setting:SetLabel("Max Reports (Number of reports that can show on your screen)")
		setting:DockMargin(8, 6, 8, 0)

		number_entry(setting, "Reports.MaxReports", 4)
	end

	do
		local setting = body:Add("SAM.LabelPanel")
		setting:Dock(TOP)
		setting:SetLabel("Auto Close Time (Time to wait before automatically closing claimed reports)")
		setting:DockMargin(8, 6, 8, 0)

		local entry = setting:Add("SAM.TextEntry")
		entry:SetWide(70)
		entry:SetNoBar(false)
		entry:SetPlaceholder("")
		entry:SetCheck(function(time)
			time = sam.parse_length(time)
			if not time then
				return false
			end
		end)
		entry:SetConfig("Reports.AutoCloseTime", "10m")
	end

	do
		local setting = body:Add("SAM.LabelPanel")
		setting:Dock(TOP)
		setting:SetLabel("Always Show (Show the popups even if you are not on duty)")
		setting:DockMargin(8, 6, 8, 0)

		local enable = setting:Add("SAM.ToggleButton")
		enable:SetConfig("Reports.AlwaysShow", true)
	end

	do
		local setting = body:Add("SAM.LabelPanel")
		setting:Dock(TOP)
		setting:SetLabel("On Duty Jobs")
		setting:DockMargin(8, 6, 8, 0)

		local entry = setting:Add("SAM.TextEntry")
		entry:SetWide(300)
		entry:SetNoBar(true)
		entry:SetPlaceholder("")
		entry:SetMultiline(true)
		entry:SetConfig("Reports.DutyJobs", "")
		entry.no_scale = true

		function entry:OnValueChange()
			self:SetTall(self:GetNumLines() * (sam.SUI.Scale(16) --[[font size]] + 1) + 1 + 2)
		end
		entry:OnValueChange()
	end

	do
		local setting = body:Add("SAM.LabelPanel")
		setting:Dock(TOP)
		setting:SetLabel("Position")
		setting:DockMargin(8, 6, 8, 0)

		local combo = setting:Add("SAM.ComboBox")
		combo:SetWide(60)
		combo:AddChoice("Left", nil, true)
		combo:AddChoice("Right")
		combo:SetConfig("Reports.Position", "Left")
	end

	do
		local setting = body:Add("SAM.LabelPanel")
		setting:Dock(TOP)
		setting:SetLabel("X Padding")
		setting:DockMargin(8, 6, 8, 0)

		number_entry(setting, "Reports.XPadding", 5)
	end

	do
		local setting = body:Add("SAM.LabelPanel")
		setting:Dock(TOP)
		setting:SetLabel("Y Padding")
		setting:DockMargin(8, 6, 8, 0)

		number_entry(setting, "Reports.YPadding", 5)
	end

	return body
end, function()
	return LocalPlayer():HasPermission("manage_config")
end, 2)
--addons/sam-159/lua/sam/modules/darkrp.lua:
if SAM_LOADED then return end

local add = not GAMEMODE and hook.Add or function(_, _, fn)
	fn()
end

add("PostGamemodeLoaded", "SAM.DarkRP", function()
	if not DarkRP then return end

	local sam, command, language = sam, sam.command, sam.language

	command.set_category("DarkRP")

	command.new("arrest")
		:SetPermission("arrest", "superadmin")

		:AddArg("player")
		:AddArg("number", {hint = "time", optional = true, min = 0, default = 0, round = true})

		:Help("arrest_help")

		:OnExecute(function(ply, targets, time)
			if time == 0 then
				time = math.huge
			end

			for i = 1, #targets do
				local v = targets[i]
				if v:isArrested() then
					v:unArrest()
				end
				v:arrest(time, ply)
			end

			if time == math.huge then
				sam.player.send_message(nil, "arrest", {
					A = ply, T = targets
				})
			else
				sam.player.send_message(nil, "arrest2", {
					A = ply, T = targets, V = time
				})
			end
		end)
	:End()

	command.new("unarrest")
		:SetPermission("unarrest", "superadmin")

		:AddArg("player", {optional = true})

		:Help("unarrest_help")

		:OnExecute(function(ply, targets)
			for i = 1, #targets do
				targets[i]:unArrest()
			end

			sam.player.send_message(nil, "unarrest", {
				A = ply, T = targets
			})
		end)
	:End()

	command.new("setmoney")
		:SetPermission("setmoney", "superadmin")

		:AddArg("player", {single_target = true})
		:AddArg("number", {hint = "amount", min = 0, round = true})

		:Help("setmoney_help")

		:OnExecute(function(ply, targets, amount)
			local target = targets[1]

			amount = hook.Call("playerWalletChanged", GAMEMODE, target, amount - target:getDarkRPVar("money"), target:getDarkRPVar("money")) or amount

			DarkRP.storeMoney(target, amount)
			target:setDarkRPVar("money", amount)

			sam.player.send_message(nil, "setmoney", {
				A = ply, T = targets, V = amount
			})
		end)
	:End()

	command.new("addmoney")
		:SetPermission("addmoney", "superadmin")

		:AddArg("player", {single_target = true})
		:AddArg("number", {hint = "amount", min = 0, round = true})

		:Help("addmoney_help")

		:OnExecute(function(ply, targets, amount)
			targets[1]:addMoney(amount)

			sam.player.send_message(nil, "addmoney", {
				A = ply, T = targets, V = DarkRP.formatMoney(amount)
			})
		end)
	:End()

	command.new("selldoor")
		:SetPermission("selldoor", "superadmin")

		:Help("selldoor_help")

		:OnExecute(function(ply)
			local ent = ply:GetEyeTrace().Entity
			if not IsValid(ent) or not ent.keysUnOwn then
				return ply:sam_send_message("door_invalid")
			end
			local door_owner = ent:getDoorOwner()
			if not IsValid(door_owner) then
				return ply:sam_send_message("door_no_owner")
			end
			ent:keysUnOwn(door_owner)

			sam.player.send_message(nil, "selldoor", {
				A = ply, T = {door_owner, admin = ply}
			})
		end)
	:End()

	command.new("sellall")
		:SetPermission("sellall", "superadmin")

		:AddArg("player", {single_target = true})

		:Help("sellall_help")

		:OnExecute(function(ply, targets, amount)
			targets[1]:keysUnOwnAll()

			sam.player.send_message(nil, "sellall", {
				A = ply, T = targets
			})
		end)
	:End()

	command.new("setjailpos")
		:SetPermission("setjailpos", "superadmin")

		:Help("setjailpos_help")

		:OnExecute(function(ply)
			DarkRP.storeJailPos(ply, false)

			sam.player.send_message(nil, "s_jail_pos", {
				A = ply
			})
		end)
	:End()

	command.new("addjailpos")
		:SetPermission("addjailpos", "superadmin")

		:Help("addjailpos_help")

		:OnExecute(function(ply)
			DarkRP.storeJailPos(ply, true)

			sam.player.send_message(nil, "a_jail_pos", {
				A = ply
			})
		end)
	:End()

	local RPExtraTeams = RPExtraTeams
	local job_index = nil

	command.new("setjob")
		:SetPermission("setjob", "admin")

		:AddArg("player")
		:AddArg("text", {hint = "job", check = function(job)
			job = job:lower()

			for i = 1, #RPExtraTeams do
				local v = RPExtraTeams[i]
				if v.name:lower() == job or v.command:lower() == job then
					job_index = v.team
					return true
				end
			end

			return false
		end})

		:Help("setjob_help")

		:OnExecute(function(ply, targets, job)
			for i = 1, #targets do
				targets[i]:changeTeam(job_index, true, true, true)
			end

			sam.player.send_message(nil, "setjob", {
				A = ply, T = targets, V = job
			})
		end)
	:End()

	do
		local get_shipment = function(name)
			local found, key = DarkRP.getShipmentByName(name)
			if found then return found, key end

			name = name:lower()

			local shipments = CustomShipments
			for i = 1, #shipments do
				local shipment = shipments[i]
				if shipment.entity == name then
					return DarkRP.getShipmentByName(shipment.name)
				end
			end

			return false
		end

		local place_entity = function(ent, tr, ply)
			local ang = ply:EyeAngles()
			ang.pitch = 0
			ang.yaw = ang.yaw - 90
			ang.roll = 0
			ent:SetAngles(ang)

			local flush_point = tr.HitPos - (tr.HitNormal * 512)
			flush_point = ent:NearestPoint(flush_point)
			flush_point = ent:GetPos() - flush_point
			flush_point = tr.HitPos + flush_point
			ent:SetPos(flush_point)
		end

		command.new("shipment")
			:SetPermission("shipment", "superadmin")

			:AddArg("text", {hint = "weapon", check = get_shipment})

			:Help("shipment_help")

			:OnExecute(function(ply, weapon_name)
				local trace = {}
				trace.start = ply:EyePos()
				trace.endpos = trace.start + ply:GetAimVector() * 85
				trace.filter = ply
				local tr = util.TraceLine(trace)

				local shipment_info, shipment_key = get_shipment(weapon_name)

				local crate = ents.Create(shipment_info.shipmentClass or "spawned_shipment")
				crate.SID = ply.SID

				crate:Setowning_ent(ply)
				crate:SetContents(shipment_key, shipment_info.amount)

				crate:SetPos(Vector(tr.HitPos.x, tr.HitPos.y, tr.HitPos.z))

				crate.nodupe = true
				crate.ammoadd = shipment_info.spareammo
				crate.clip1 = shipment_info.clip1
				crate.clip2 = shipment_info.clip2

				crate:Spawn()
				crate:SetPlayer(ply)

				place_entity(crate, tr, ply)

				local phys = crate:GetPhysicsObject()
				phys:Wake()

				if shipment_info.weight then
					phys:SetMass(shipment_info.weight)
				end

				sam.player.send_message(nil, "shipment", {
					A = ply, V = weapon_name
				})
			end)
		:End()
	end

	sam.command.new("forcename")
		:SetPermission("forcename", "superadmin")

		:AddArg("player")
		:AddArg("text", {hint = "name"})

		:Help("forcename_help")

		:OnExecute(function(ply, targets, name)
			local target = targets[1]

			DarkRP.retrieveRPNames(name, function(taken)
				if not IsValid(target) then return end

				if taken then
					ply:sam_send_message("forcename_taken", {
						V = name
					})
					return
				end

				sam.player.send_message(nil, "forcename", {
					A = ply, T = targets, V = name
				})

				DarkRP.storeRPName(target, name)
				target:setDarkRPVar("rpname", name)
			end)
		end)
	:End()
end)
--addons/rsc/lua/sam/modules/screengrab.lua:
return gluapack()()
--addons/sam-159/lua/sam/modules/user.lua:
if SAM_LOADED then return end

local sam, command, language = sam, sam.command, sam.language

command.set_category("User Management")

command.new("setrank")
	:Aliases("adduser", "changerank", "giverank")

	:SetPermission("setrank")

	:AddArg("player", {single_target = true})
	:AddArg("rank", {check = function(rank, ply)
		return ply:CanTargetRank(rank)
	end})
	:AddArg("length", {optional = true, default = 0})

	:Help("setrank_help")

	:OnExecute(function(ply, targets, rank, length)
		targets[1]:sam_set_rank(rank, length)

		sam.player.send_message(nil, "setrank", {
			A = ply, T = targets, V = rank, V_2 = sam.format_length(length)
		})
	end)
:End()

command.new("setrankid")
	:Aliases("adduserid", "changerankid", "giverankid")

	:SetPermission("setrankid")

	:AddArg("steamid")
	:AddArg("rank", {check = function(rank, ply)
		return ply:CanTargetRank(rank)
	end})
	:AddArg("length", {optional = true, default = 0})

	:Help("setrankid_help")

	:OnExecute(function(ply, promise, rank, length)
		local a_name = ply:Name()

		promise:done(function(data)
			local steamid, target = data[1], data[2]
			if target then
				target:sam_set_rank(rank, length)

				sam.player.send_message(nil, "setrank", {
					A = ply, T = {target, admin = ply}, V = rank, V_2 = sam.format_length(length)
				})
			else
				sam.player.set_rank_id(steamid, rank, length)

				sam.player.send_message(nil, "setrank", {
					A = a_name, T = steamid, V = rank, V_2 = sam.format_length(length)
				})
			end
		end)
	end)
:End()

command.new("addrank")
	:SetPermission("manage_ranks")

	:AddArg("text", {hint = "rank name", check = function(rank)
		return not sam.ranks.is_rank(rank)
	end})
	:AddArg("rank", {hint = "inherit from"})
	:AddArg("number", {hint = "immunity", min = 2, max = 99, optional = true})
	:AddArg("length", {hint = "ban limit", optional = true})

	:Help("addrank_help")

	:MenuHide()

	:OnExecute(function(ply, rank, inherit, immunity, ban_limit)
		sam.ranks.add_rank(rank, inherit, immunity, ban_limit)

		sam.player.send_message(nil, "addrank", {
			A = ply, V = rank
		})
	end)
:End()

command.new("removerank")
	:SetPermission("manage_ranks")

	:AddArg("rank", {check = function(rank)
		return not sam.ranks.is_default_rank(rank)
	end})

	:Help("removerank_help")

	:MenuHide()

	:OnExecute(function(ply, rank)
		sam.ranks.remove_rank(rank)

		sam.player.send_message(nil, "removerank", {
			A = ply, V = rank
		})
	end)
:End()

command.new("renamerank")
	:SetPermission("manage_ranks")

	:AddArg("rank", {check = function(rank)
		return not sam.ranks.is_default_rank(rank)
	end})
	:AddArg("text", {hint = "new name", check = function(rank)
		return not sam.ranks.is_rank(rank)
	end})

	:Help("renamerank_help")

	:MenuHide()

	:OnExecute(function(ply, rank, new_name)
		sam.ranks.rename_rank(rank, new_name)

		sam.player.send_message(nil, "renamerank", {
			A = ply, T = rank, V = new_name
		})
	end)
:End()

command.new("changeinherit")
	:SetPermission("manage_ranks")

	:AddArg("rank", {check = function(rank)
		return rank ~= "user" and rank ~= "superadmin"
	end})
	:AddArg("rank", {hint = "inherits from"})

	:Help("changeinherit_help")

	:MenuHide()

	:OnExecute(function(ply, rank, inherit)
		if rank == inherit then return end

		sam.ranks.change_inherit(rank, inherit)

		sam.player.send_message(nil, "changeinherit", {
			A = ply, T = rank, V = inherit
		})
	end)
:End()

command.new("changerankimmunity")
	:SetPermission("manage_ranks")

	:AddArg("rank", {check = function(rank)
		return rank ~= "user" and rank ~= "superadmin"
	end})
	:AddArg("number", {hint = "new immunity", min = 2, max = 99})

	:Help("changerankimmunity_help")

	:MenuHide()

	:OnExecute(function(ply, rank, new_immunity)
		sam.ranks.change_immunity(rank, new_immunity)

		sam.player.send_message(nil, "rank_immunity", {
			A = ply, T = rank, V = new_immunity
		})
	end)
:End()

command.new("changerankbanlimit")
	:SetPermission("manage_ranks")

	:AddArg("rank", {check = function(rank)
		return rank ~= "superadmin"
	end})
	:AddArg("length")

	:Help("changerankbanlimit_help")

	:MenuHide()

	:OnExecute(function(ply, rank, new_limit)
		sam.ranks.change_ban_limit(rank, new_limit)

		sam.player.send_message(nil, "rank_ban_limit", {
			A = ply, T = rank, V = sam.format_length(new_limit)
		})
	end)
:End()

command.new("givepermission")
	:SetPermission("manage_ranks")

	:AddArg("rank")
	:AddArg("text", {hint = "permission"})

	:Help("givepermission_help")

	:MenuHide()

	:OnExecute(function(ply, rank, permission)
		if rank == "superadmin" then
			return ply:sam_send_message("super_admin_access")
		end

		sam.ranks.give_permission(rank, permission)

		sam.player.send_message(nil, "giveaccess", {
			A = ply, V = permission, T = rank
		})
	end)
:End()

command.new("takepermission")
	:SetPermission("manage_ranks")

	:AddArg("rank")
	:AddArg("text", {hint = "permission"})

	:Help("takepermission_help")

	:MenuHide()

	:OnExecute(function(ply, rank, permission)
		if rank == "superadmin" then
			return ply:sam_send_message("super_admin_access")
		end

		sam.ranks.take_permission(rank, permission)

		sam.player.send_message(nil, "takeaccess", {
			A = ply, V = permission, T = rank
		})
	end)
:End()

command.new("changeranklimit")
	:SetPermission("manage_ranks")

	:AddArg("rank")
	:AddArg("text", {hint = "limit"})
	:AddArg("number", {hint = "value"})

	:Help("changeranklimit_help")

	:MenuHide()

	:OnExecute(function(ply, rank, limit, value)
		if rank == "superadmin" then
			return ply:sam_send_message("super_admin_access")
		end

		sam.ranks.set_limit(rank, limit, value)

		sam.player.send_message(nil, "changeranklimit", {
			A = ply, T = rank, V = limit, V_2 = value
		})
	end)
:End()
--addons/serious_business/lua/autorun/sb_config.lua:

------------------------------------------------------------------------*/

--[[
   _____                           _    _____      _   _   _                 
  / ____|                         | |  / ____|    | | | | (_)                
 | |  __  ___ _ __   ___ _ __ __ _| | | (___   ___| |_| |_ _ _ __   __ _ ___ 
 | | |_ |/ _ \ '_ \ / _ \ '__/ _` | |  \___ \ / _ \ __| __| | '_ \ / _` / __|
 | |__| |  __/ | | |  __/ | | (_| | |  ____) |  __/ |_| |_| | | | | (_| \__ \
  \_____|\___|_| |_|\___|_|  \__,_|_| |_____/ \___|\__|\__|_|_| |_|\__, |___/
                                                                    __/ |    
                                                                   |___/         
	Yo, you can:

		Edit jobs - serious_business\lua\serious_business\jobs\

		Edit workplaces - serious_business\lua\serious_business\workplaces\

		Edit DarRP job and entity - serious_business\lua\darkrp_modules\serious_business\

]]--
SeriousBusiness_Config = {}

SeriousBusiness_Config.Crime_DLC = true; -- Enable use of free crime DLC.
SeriousBusiness_Config.Crime_Modifier = 2; -- Doubled income from criminal workplaces.

SeriousBusiness_Config.Workplace_Destroyed_Reward = true; -- Is there a point to destroy workplaces?
SeriousBusiness_Config.Workplace_Destroyed_Amount = 1000; -- You get 1000$ for destroying workplace.

SeriousBusiness_Config.Workseat_Destroyed_Reward = true; -- Is there a point to destroy seat?
SeriousBusiness_Config.Workseat_Destroyed_Amount = 500; -- You get 500$ for destroying seat.

SeriousBusiness_Config.DrawDistance = 256; -- Draw distamce for all stuff.
SeriousBusiness_Config.SoundVolume = 70; -- Sound volume for almost everything.
SeriousBusiness_Config.WorkerDelay = 2; -- 1 sec delay between job points being added.
SeriousBusiness_Config.WorkerTalkChance = 5; -- A chance for worker to talk at work.

SeriousBusiness_Config.WorkerHappyScale = 2; -- Worker does his job 2x faster and gets 2x exp when happy.
SeriousBusiness_Config.WorkerAngryScale = 1; -- Worker does his job 2x slower and gets 2x less exp when angry.

SeriousBusiness_Config.ProfitAmount = 400; -- Amount of money for each product made.
SeriousBusiness_Config.ProfitMin = 270; -- A minimal amount of profit for each product made.
SeriousBusiness_Config.ProfitRandom = {5, 1} -- A random amount will be deducted or added to product maximum 15 times by 50$.

SeriousBusiness_Config.ProfitScale = 1; -- Scales incoming profit by 1.
SeriousBusiness_Config.ProfitLimit = 1; -- Worker won't progrss until profit collected.

SeriousBusiness_Config.StepsScale = 1; -- Scales amount of steps by 1.
SeriousBusiness_Config.StepPointsScale = 1; -- Scales amount of step points by 1.

SeriousBusiness_Config.ProductEffect = true; -- If it's true, then GREEN CIRCLES will pop up on product progress.
SeriousBusiness_Config.ProductSound = true; -- If it's true, then product progress sound will be emited.

SeriousBusiness_Config.WorkEffect = true; -- If it's true, then BLUE CIRCLES will pop up on work progress.
SeriousBusiness_Config.WorkSound = true; -- If it's true, then work progress sound will be emited.	
SeriousBusiness_Config.WorkScale = 0.05; -- Work progress is scaled to 0.05.

SeriousBusiness_Config.ExpEnabled = true;
SeriousBusiness_Config.ExpAmount = 25; -- Worker will receive 25 exp to main skill on product is done.
SeriousBusiness_Config.ExpEffect = false; -- If it's true, then ORANGE CIRCLES will pop up on product is finished.
SeriousBusiness_Config.ExpSound = false; -- If it's true, then product done sound will be emited.	

SeriousBusiness_Config.Workseat_CanDamage = true; -- If it's true, then workseat can be damaged.
SeriousBusiness_Config.Workseat_Health = 100; -- Health of the workseat.
SeriousBusiness_Config.Workseat_Physgun = true; -- Can physgun?

SeriousBusiness_Config.Workplace_CanDamage = true; -- If it's true, then workplace can be damaged.
SeriousBusiness_Config.Workplace_Health = 200; -- Health of the workplace.
SeriousBusiness_Config.Workplace_Physgun = true; -- Can physgun?




--[[
              _                               _    _____      _   _   _                 
     /\      | |                             | |  / ____|    | | | | (_)                
    /  \   __| |_   ____ _ _ __   ___ ___  __| | | (___   ___| |_| |_ _ _ __   __ _ ___ 
   / /\ \ / _` \ \ / / _` | '_ \ / __/ _ \/ _` |  \___ \ / _ \ __| __| | '_ \ / _` / __|
  / ____ \ (_| |\ V / (_| | | | | (_|  __/ (_| |  ____) |  __/ |_| |_| | | | | (_| \__ \
 /_/    \_\__,_| \_/ \__,_|_| |_|\___\___|\__,_| |_____/ \___|\__|\__|_|_| |_|\__, |___/
                                                                               __/ |    
                                                                              |___/   
	Names and models for workers go here.
]]--
SeriousBusiness_Config.Workers_Jobs = {}
SeriousBusiness_Config.Workers_Jobs.NORMAL = {}
SeriousBusiness_Config.Workers_Jobs.CRIME = {} -- Dats a free criminal DLC.

SeriousBusiness_Config.Workers_Places = {}
SeriousBusiness_Config.Workers_Places.NORMAL = {}
SeriousBusiness_Config.Workers_Places.CRIME = {} -- Dats a free criminal DLC.

SeriousBusiness_Config.Workers_Names =
	{
         Male_F = {"Alp", "Tugrul", "Tunay", "Ege", "Ahmet", "Mehmet", "Muhammet",    -- Male names list.
                  "Oguzhan", "Kerem", "Kaan", "Eren", "Ayberk", "Ayaz",
                  "Baran", "Ukbe", "Cagan", "Cavit", "Yasin", "Cemil", "Cem",
                  "Kamer", "Acun", "Alican", "Abdullah", "Bartu", "Bekir", "Bugra",
                  "Cafer", "Bulent", "Burhan", "Polat", "Hacı", "Celal", "Emir", "Enis"},

        Female_F = {"Aslı", "Asel", "Cagla", "Ece", "Gizem", "Selin", "Jale",    -- Female names list
                    "Merve", "Leyla", "Oya", "Selen", "Oyku", "Tulin", "Sule",
                    "Zeynep", "Ayca", "Eda", "Hatice", "Ebrar", "Deniz", "Nazli",
                    "Cansu", "Lara", "Azra", "Beyza", "Fatma", "Zehre", "Burcu",
                    "Gozde", "Tugce", "Aleyna", "Aylin", "Hira", "Ozge", "Dilay"},

        LastNames = {"Saglik", "Altiparmak", "Yilmaz", "Su", "Sahin", "Demir", "Bedir",
                     "Beyaz", "Kurtman", "Taspolat", "Mese", "Adıvar", "Coskun", "Basol",
                     "Dincer", "Bulbul", "Kalkan", "Karaaslan", "Beyaz", "Kara", "Pembeadam",
                     "Ozkaya", "Pehlivan", "Sunal", "Sabanci", "Koc", "Arcelik", "Gungor",
                     "Benlioglu", "Arca", "Plak", "Han", "Oguz", "Cips", "Satilmis", "Tanriverdi",
                     "Ova", "Suleymanoglu", "Sumer", "Ulker", "Kaya", "Ozturk",
                     "Bilge", "Agac", "Konyali", "Bakirci", "Erdogan", "Yozgatli", "Oktay",
                     "Sancar", "Menemen", "Kemal", "Aygun", "Tatlises", "Baysan", "isitmak",
                     "Batur", "Sungur", "Tekin", "Seksen", "Kurt", "Akca", "Cengiz", "Babacan",
                     "Pers", "Abdu", "Fester", "Ezine", "Findik", "Ozbey", "Tombuk",
                     "Veli", "Vuran", "Vurduran", "Sokay", "Subay", "Simsek",
                     "Sebek", "Bidik", "Bozdaga", "Ozdemir", "Uzun", "Zengin", "Fakir",
                     "Internet", "Telekom", "Alp", "Soray", "Tepe", "Delen", "Uygur",
                     "Mete", "Nacar", "Rojda", "Ekin", "Bas", "Fevzi", "Ertas"}
	}
SeriousBusiness_Config.Workers_Library = 
	{
		Male =
			{
				Models =
					{
						"models/player/group01/male_01.mdl",
						"models/player/group01/male_02.mdl",
						"models/player/group01/male_03.mdl",
						"models/player/group01/male_04.mdl",
						"models/player/group01/male_05.mdl",
						"models/player/group01/male_06.mdl",
						"models/player/group01/male_07.mdl",
						"models/player/group01/male_08.mdl",
						"models/player/group01/male_09.mdl",

						-- Not citizen models
						"models/player/arctic.mdl",
						"models/player/barney.mdl",
						"models/player/breen.mdl",
						"models/player/charple.mdl",
						"models/player/combine_soldier.mdl",
						"models/player/combine_soldier_prisonguard.mdl",
						"models/player/combine_super_soldier.mdl",
						"models/player/corpse1.mdl",
						"models/player/dod_american.mdl",
						"models/player/dod_german.mdl",
						"models/player/eli.mdl",
						"models/player/gasmask.mdl",
						"models/player/gman_high.mdl",
						"models/player/guerilla.mdl",
						"models/player/kleiner.mdl",
						"models/player/leet.mdl",
						"models/player/magnusson.mdl",
						"models/player/monk.mdl",
						"models/player/odessa.mdl",
						"models/player/phoenix.mdl",
						"models/player/police.mdl",
						"models/player/riot.mdl",
						"models/player/soldier_stripped.mdl",
						"models/player/swat.mdl",
						"models/player/urban.mdl"
					},
				OnPickUp =
					{
						"vo/npc/male01/answer13.wav",
						"vo/npc/male01/answer14.wav",
						"vo/npc/male01/answer36.wav",
						"vo/npc/male01/answer37.wav",
						"vo/npc/male01/gordead_ans01.wav",
						"vo/npc/male01/vanswer04.wav",
						"vo/npc/male01/vanswer08.wav",
						"vo/npc/male01/doingsomething.wav"
					},
				StepFinished =
					{
						"vo/npc/male01/question13.wav",
						"vo/npc/male01/vanswer14.wav",
						"vo/npc/male01/vanswer09.wav",
						"vo/npc/male01/thislldonicely01.wav",
						"vo/npc/male01/okimready01.wav",
						"vo/npc/male01/nice.wav",
						"vo/npc/male01/gordead_ques14.wav",
						"vo/npc/male01/gordead_ques02.wav",
						"vo/npc/male01/finally.wav",
						"vo/npc/male01/fantastic01.wav",
						"vo/npc/male01/busy02.wav",
						"vo/npc/male01/question28.wav",
						"vo/npc/male01/question27.wav",
						"vo/npc/male01/question26.wav",
						"vo/npc/male01/question25.wav",
						"vo/npc/male01/question20.wav",
						"vo/npc/male01/question19.wav"
					},
				ProductFinished =
					{
						"vo/npc/male01/nice.wav",
						"vo/npc/male01/finally.wav",
						"vo/npc/male01/fantastic01.wav"
					},
				GotHappy =
					{
						"vo/coast/odessa/male01/nlo_cheer01.wav",
						"vo/coast/odessa/male01/nlo_cheer02.wav",
						"vo/coast/odessa/male01/nlo_cheer03.wav",
						"vo/coast/odessa/male01/nlo_cheer04.wav"
					},
				GotMoney =
					{
						"vo/npc/male01/imstickinghere01.wav",
						"vo/npc/male01/littlecorner01.wav",
						"vo/npc/male01/oneforme.wav"
					}
			},

		Female =
			{
				Models =
					{
						"models/player/group01/female_01.mdl",
						"models/player/group01/female_02.mdl",
						"models/player/group01/female_03.mdl",
						"models/player/group01/female_04.mdl",
						"models/player/group01/female_05.mdl",
						"models/player/group01/female_06.mdl",

						-- Not citizen models
						"models/player/mossman.mdl",
						"models/player/mossman_arctic.mdl",
						"models/player/p2_chell.mdl"
					},
				OnPickUp =
					{
						"vo/npc/female01/answer13.wav",
						"vo/npc/female01/answer14.wav",
						"vo/npc/female01/answer37.wav",
						"vo/npc/female01/answer38.wav",
						"vo/npc/female01/gordead_ans01.wav",
						"vo/npc/female01/vanswer04.wav",
						"vo/npc/female01/vanswer08.wav",
						"vo/npc/female01/doingsomething.wav"
					},
				StepFinished =
					{
						"vo/npc/female01/question13.wav",
						"vo/npc/female01/vanswer14.wav",
						"vo/npc/female01/vanswer09.wav",
						"vo/npc/female01/thislldonicely01.wav",
						"vo/npc/female01/okimready01.wav",
						"vo/npc/female01/nice02.wav",
						"vo/npc/female01/gordead_ques14.wav",
						"vo/npc/female01/gordead_ques02.wav",
						"vo/npc/female01/finally.wav",
						"vo/npc/female01/fantastic01.wav",
						"vo/npc/female01/busy02.wav",
						"vo/npc/female01/question28.wav",
						"vo/npc/female01/question27.wav",
						"vo/npc/female01/question26.wav",
						"vo/npc/female01/question25.wav",
						"vo/npc/female01/question20.wav",
						"vo/npc/female01/question19.wav"
					},
				ProductFinished =
					{
						"vo/npc/female01/nice02.wav",
						"vo/npc/female01/finally.wav",
						"vo/npc/female01/fantastic01.wav"
					},
				GotHappy =
					{
						"vo/coast/odessa/female01/nlo_cheer01.wav",
						"vo/coast/odessa/female01/nlo_cheer02.wav",
						"vo/coast/odessa/female01/nlo_cheer03.wav"
					},
				GotMoney =
					{
						"vo/npc/female01/imstickinghere01.wav",
						"vo/npc/female01/littlecorner01.wav"
					}
			}
	}

--addons/sui/lua/sui/vgui/sui_label_panel.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_label_panel.lua:
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name

local LABEL_FONT = SUI.CreateFont("LabelPanel", "Roboto", 18)

local PANEL = {}

local add = function(s, c)
	if IsValid(s.pnl) then
		s.pnl:Remove()
	end

	local pnl = vgui.Create(c, s)
	s.pnl = pnl

	return pnl
end

function PANEL:Init()
	self.title = ""

	local label = self:Add(NAME .. ".Label")
	label:Dock(LEFT)
	self.label = label

	self:SetFont(LABEL_FONT)

	self:Dock(TOP)
	self:InvalidateLayout(true)
	self.Add = add
end

function PANEL:SetPanel(pnl)
	if IsValid(self.pnl) then
		self.pnl:Remove()
	end

	pnl:SetParent(self)
	self.pnl = pnl
end

function PANEL:SetLabel(lbl)
	self.title = lbl
	self:InvalidateLayout(true)
end

function PANEL:SetFont(font)
	self.font = font
	self.label:SetFont(font)
end

function PANEL:PerformLayout(w, h)
	local label = self.label
	local pnl = self.pnl

	local pnl_w, pnl_h = 0, 0
	if pnl then
		pnl_w, pnl_h = pnl:GetSize()
	end

	label:SetWide(w - pnl_w - 4)
	label:SetText(sui.wrap_text(self.title, self.font, w - pnl_w - 4))

	local _, _h = label:GetTextSize()
	self:SetTall(math.max(_h, pnl_h))

	if pnl then
		pnl:SetPos(w - pnl_w, h / 2 - pnl_h / 2)
	end
end

sui.register("LabelPanel", PANEL, "PANEL")
--addons/sui/lua/sui/vgui/sui_scroll_panel.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_text_entry.lua:
local sui = sui

local surface = surface
local utf8 = sui.utf8
local draw = draw
local math = math

local IsValid = IsValid
local tostring = tostring
local tonumber = tonumber

local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name

local GetColor = SUI.GetColor
local TEXT_ENTRY_FONT = SUI.CreateFont("TextEntry", "Roboto Regular", 16)

local Panel = {}

sui.scaling_functions(Panel)

AccessorFunc(Panel, "m_FontName", "Font", FORCE_STRING)
AccessorFunc(Panel, "m_Editable", "Editable", FORCE_BOOL)
AccessorFunc(Panel, "m_Placeholder", "Placeholder", FORCE_STRING)
AccessorFunc(Panel, "m_MaxChars", "MaxChars", FORCE_NUMBER)
AccessorFunc(Panel, "m_Numeric", "Numeric", FORCE_BOOL)
AccessorFunc(Panel, "m_NoBar", "NoBar", FORCE_BOOL)
AccessorFunc(Panel, "m_BarColor", "BarColor")
AccessorFunc(Panel, "m_Background", "Background")
AccessorFunc(Panel, "m_Radius", "Radius")
AccessorFunc(Panel, "m_NoEnter", "NoEnter")

Panel:SetRadius(3)

function Panel:Init()
	self:ScaleInit()

	self:SetupTransition("TextEntryReady", 0.9, function()
		return self:IsEditing() or self:GetBarColor() ~= nil
	end)

	self:SetUpdateOnType(true)
	self:SetCursor("beam")
	self:SetFont(TEXT_ENTRY_FONT)
	self:SetPlaceholder("Placeholder text")

	self:SetSize(200, 22)

	self.allowed_numeric_characters = "1234567890.-"

	self.history = {}
	self.history_pos = 1
	self.can_use_history = true

	self:OnScaleChange()
end

function Panel:SetCaretPos(pos)
	DTextEntry.SetCaretPos(self, math.Clamp(pos, 0, utf8.len(self:GetText())))
end

function Panel:SetValue(value)
	self:SetText(value)
	self:OnValueChange(value)
end

function Panel:AllowInput(ch)
	if self:CheckNumeric(ch) then return true end

	if sui.wspace_chs[ch] or sui.cntrl_chs[ch] then
		return true
	end

	local max_chars = self:GetMaxChars()
	if max_chars and #self:GetText() >= max_chars then
		surface.PlaySound("resource/warning.wav")
		return true
	end
end

function Panel:AddValue(v, i, j)
	local original_text = self:GetText()

	local start
	if i then
		start = original_text:sub(1, i)
	else
		start = utf8.sub(original_text, 1, self:GetCaretPos())
	end

	local text = start .. v
	local caret_pos = utf8.len(text)

	local _end
	if j then
		_end = original_text:sub(j)
	else
		_end = utf8.sub(original_text, utf8.len(start) + 1)
	end
	text = text .. _end

	local max_chars = self:GetMaxChars()
	if max_chars then
		text = text:sub(1, max_chars)
	end

	self:SetValue(text)
	self:SetCaretPos(caret_pos)
end

function Panel:OnKeyCodeTyped(code)
	if self.no_down then
		self.no_down = nil
		return
	end

	if code == KEY_UP or code == KEY_DOWN then
		if not self:UpdateFromHistory(code) then
			return true
		end

		local lines, caret_line = self:GetNumLines()

		if lines == 1 then
			return true
		end

		--
		-- this fixes a weird issue
		-- make the text entry has at least 2 lines, go up then go down, you won't be able to go up again
		--
		if code == KEY_DOWN and lines == caret_line + 1 then
			self.no_down = true
			gui.InternalKeyCodeTyped(KEY_DOWN)
		end
	end

	self:OnKeyCode(code)

	if code == KEY_ENTER then
		if IsValid(self.Menu) then
			self.Menu:Remove()
		end

		if not self:GetNoEnter() then
			self:FocusNext()
			self:OnEnter()
		end
	end
end

function Panel:DisallowFloats(disallow)
	if not isbool(disallow) then
		disallow = true
	end

	if disallow then
		self.allowed_numeric_characters = self.allowed_numeric_characters:gsub("%.", "", 1)
	elseif not self.allowed_numeric_characters:find(".", 1, true) then
		self.allowed_numeric_characters = self.allowed_numeric_characters .. "."
	end
end

function Panel:DisallowNegative(disallow)
	if not isbool(disallow) then
		disallow = true
	end

	if disallow then
		self.allowed_numeric_characters = self.allowed_numeric_characters:gsub("%-", "", 1)
	elseif not self.allowed_numeric_characters:find("-", 1, true) then
		self.allowed_numeric_characters = self.allowed_numeric_characters .. "-"
	end
end

function Panel:CheckNumeric(value)
	if not self:GetNumeric() then return false end

	if not self.allowed_numeric_characters:find(value, 1, true) then
		return true
	end

	local new_value = ""
	local current_value = tostring(self:GetText())

	local caret_pos = self:GetCaretPos()
	for i = 0, #current_value do
		new_value = new_value .. current_value:sub(i, i)
		if i == caret_pos then
			new_value = new_value .. value
		end
	end

	if #current_value ~= 0 and not tonumber(new_value) then
		return true
	end

	return false
end

function Panel:AddHistory(txt)
	if not txt or txt == "" then return end
	local history = self.history
	if history[#history] ~= txt then
		table.insert(history, txt)
	end
end

function Panel:UpdateFromHistory(code)
	if not self.can_use_history then return end

	local lines, caret_line = self:GetNumLines()

	if code == KEY_UP then
		if caret_line > 1 then return true end -- enable the caret to move up and down

		if self.history_pos <= 1 then return end

		self.history_pos = self.history_pos - 1
	elseif code == KEY_DOWN then
		if caret_line ~= lines then return true end

		if self.history_pos >= #self.history then
			self:SetValue("")
			self:SetCaretPos(0)
			self.history_pos = #self.history + 1
			return
		end

		self.history_pos = self.history_pos + 1
	end

	local text = self.history[self.history_pos]
	if not text then return end

	self:SetValue(text)
	self:SetCaretPos(utf8.len(text))
end

function Panel:OnTextChanged()
	self.history_pos = #self.history + 1

	local text = self:GetText()

	self.can_use_history = text == "" and true or false

	if self:GetUpdateOnType() then
		self:UpdateConvarValue()
		self:OnValueChange(text)
	end

	self:OnChange()
end

function Panel:OnScaleChange()
	self:InvalidateLayout()
	self:InvalidateLayout(true)
end

function Panel:Paint(w, h)
	self:RoundedBox("Background", self:GetRadius(), 0, 0, w, h, GetColor("text_entry_bg") or self:GetBackground())

	local text_entry_3 = GetColor("text_entry_3")

	if self:GetText() == "" then
		local old_text = self:GetText()
		self:SetText(self:GetPlaceholder())
		self:DrawTextEntryText(GetColor("text_entry_2"), text_entry_3, text_entry_3)
		self:SetText(old_text)
	else
		self:DrawTextEntryText(GetColor("text_entry"), text_entry_3, text_entry_3)
	end

	if not self:GetNoBar() then
		local bar_color = self:GetBarColor()

		self:RoundedBox("Bar1", 0, 0, h - 1, w, 1, GetColor("text_entry_bar_color"))

		local bar = math.Round(w * self.TextEntryReady)
		if bar > 0 then
			self:RoundedBox("Bar2", 0, (w / 2) - (bar / 2), h - 1, bar, 1, bar_color or text_entry_3)
		end
	end
end

-- https://github.com/ValveSoftware/source-sdk-2013/blob/0d8dceea4310fde5706b3ce1c70609d72a38efdf/mp/src/vgui2/vgui_controls/TextEntry.cpp#L969
function Panel:GetNumLines(wide)
	local num_lines = 1

	wide = wide or self:GetWide() - 2

	local char_width
	local x = 3

	local word_start_index = 1
	local word_start_len
	local word_length = 0
	local has_word = false
	local just_started_new_line = true
	local word_started_on_new_line = true

	local start_char = 1

	surface.SetFont(self:GetFont())

	local i = start_char
	local text, n = utf8.force(self:GetText())
	local caret_line = 0
	local caret_pos = self:GetCaretPos()
	local caret_i = 1
	while i <= n do
		local ch_len = utf8.char_bytes(text:byte(i))
		local ch = text:sub(i, i + ch_len - 1)

		if ch ~= " " then
			if not has_word then
				word_start_index = i
				word_start_len = ch_len
				has_word = true
				word_started_on_new_line = just_started_new_line
				word_length = 0
			end
		else
			has_word = false
		end

		char_width = surface.GetTextSize(ch)
		just_started_new_line = false

		if (x + char_width) >= wide then
			x = 3

			just_started_new_line = true
			has_word = false

			if word_started_on_new_line then
				num_lines = num_lines + 1
			else
				num_lines = num_lines + 1
				i = (word_start_index + word_start_len) - ch_len
			end

			word_length = 0
		end

		x = x + char_width
		word_length = word_length + char_width

		if caret_i == caret_pos then
			caret_line = num_lines
		end

		i = i + ch_len
		caret_i = caret_i + 1
	end

	return num_lines, caret_line
end

function Panel:SetCheck(func, col)
	function self:OnValueChange(text)
		if func(text) == false then
			self.valid = false
			self:SetBarColor(GetColor("close_hover"))
			self:SetNoEnter(true)
		else
			self.valid = true
			self:SetBarColor(col)
			self:SetNoEnter(false)
		end
	end
	self:SetValue(self:GetText())
end

sui.register("TextEntry", Panel, "DTextEntry")

--addons/sui/lua/sui/vgui/sui_threegrid.lua:
return gluapack()()
--addons/scb-29/lua/scb/libs/message_pack/sh_messagepack.lua:
if SCB_LOADED then return end

--
-- lua-MessagePack : <https://fperrad.frama.io/lua-MessagePack/>
--

local SIZEOF_NUMBER = string.pack and #string.pack('n', 0.0) or 8
local maxinteger
local mininteger

local assert = assert
local error = error
local pairs = pairs
local pcall = pcall
local setmetatable = setmetatable
local tostring = tostring
local char = string.char
local format = string.format
local floor = math.floor
local tointeger = floor
local frexp = math.frexp
local ldexp = math.ldexp
local huge = math.huge
local tconcat = table.concat

local type = scb.type
local isnumber = scb.isnumber
local _ENV = nil
local m = {}

--[[ debug only
local function hexadump (s)
	return (s:gsub('.', function (c) return format('%02X ', c:byte()) end))
end
m.hexadump = hexadump
--]]

local function argerror (caller, narg, extramsg)
	error("bad argument #" .. tostring(narg) .. " to "
		  .. caller .. " (" .. extramsg .. ")")
end

local function typeerror (caller, narg, arg, tname)
	argerror(caller, narg, tname .. " expected, got " .. type(arg))
end

local function checktype (caller, narg, arg, tname)
	if type(arg) ~= tname then
		typeerror(caller, narg, arg, tname)
	end
end

local packers = setmetatable({}, {
	__index = function (t, k)
		if k == 1 then return end   -- allows ipairs
		error("pack '" .. k .. "' is unimplemented")
	end
})
m.packers = packers

packers['nil'] = function (buffer)
	buffer[#buffer+1] = char(0xC0)	-- nil
end

packers['boolean'] = function (buffer, bool)
	if bool then
		buffer[#buffer+1] = char(0xC3)	-- true
	else
		buffer[#buffer+1] = char(0xC2)	-- false
	end
end

packers['string_compat'] = function (buffer, str)
	local n = #str
	if n <= 0x1F then
		buffer[#buffer+1] = char(0xA0 + n)	-- fixstr
	elseif n <= 0xFFFF then
		buffer[#buffer+1] = char(0xDA,		-- str16
								 floor(n / 0x100),
								 n % 0x100)
	elseif n <= 4294967295.0 then
		buffer[#buffer+1] = char(0xDB,		-- str32
								 floor(n / 0x1000000),
								 floor(n / 0x10000) % 0x100,
								 floor(n / 0x100) % 0x100,
								 n % 0x100)
	else
		error"overflow in pack 'string_compat'"
	end
	buffer[#buffer+1] = str
end

packers['_string'] = function (buffer, str)
	local n = #str
	if n <= 0x1F then
		buffer[#buffer+1] = char(0xA0 + n)		-- fixstr
	elseif n <= 0xFF then
		buffer[#buffer+1] = char(0xD9,			-- str8
								 n)
	elseif n <= 0xFFFF then
		buffer[#buffer+1] = char(0xDA,			-- str16
								 floor(n / 0x100),
								 n % 0x100)
	elseif n <= 4294967295.0 then
		buffer[#buffer+1] = char(0xDB,			-- str32
								 floor(n / 0x1000000),
								 floor(n / 0x10000) % 0x100,
								 floor(n / 0x100) % 0x100,
								 n % 0x100)
	else
		error"overflow in pack 'string'"
	end
	buffer[#buffer+1] = str
end

packers['binary'] = function (buffer, str)
	local n = #str
	if n <= 0xFF then
		buffer[#buffer+1] = char(0xC4,		-- bin8
								 n)
	elseif n <= 0xFFFF then
		buffer[#buffer+1] = char(0xC5,		-- bin16
								 floor(n / 0x100),
								 n % 0x100)
	elseif n <= 4294967295.0 then
		buffer[#buffer+1] = char(0xC6,		-- bin32
								 floor(n / 0x1000000),
								 floor(n / 0x10000) % 0x100,
								 floor(n / 0x100) % 0x100,
								 n % 0x100)
	else
		error"overflow in pack 'binary'"
	end
	buffer[#buffer+1] = str
end

local set_string = function (str)
	if str == 'string_compat' then
		packers['string'] = packers['string_compat']
	elseif str == 'string' then
		packers['string'] = packers['_string']
	elseif str == 'binary' then
		packers['string'] = packers['binary']
	else
		argerror('set_string', 1, "invalid option '" .. str .."'")
	end
end
m.set_string = set_string

packers['map'] = function (buffer, tbl, n)
	if n <= 0x0F then
		buffer[#buffer+1] = char(0x80 + n)		-- fixmap
	elseif n <= 0xFFFF then
		buffer[#buffer+1] = char(0xDE,			-- map16
								 floor(n / 0x100),
								 n % 0x100)
	elseif n <= 4294967295.0 then
		buffer[#buffer+1] = char(0xDF,			-- map32
								 floor(n / 0x1000000),
								 floor(n / 0x10000) % 0x100,
								 floor(n / 0x100) % 0x100,
								 n % 0x100)
	else
		error"overflow in pack 'map'"
	end
	for k, v in pairs(tbl) do
		packers[type(k)](buffer, k)
		packers[type(v)](buffer, v)
	end
end

packers['array'] = function (buffer, tbl, n)
	if n <= 0x0F then
		buffer[#buffer+1] = char(0x90 + n)		-- fixarray
	elseif n <= 0xFFFF then
		buffer[#buffer+1] = char(0xDC,			-- array16
								 floor(n / 0x100),
								 n % 0x100)
	elseif n <= 4294967295.0 then
		buffer[#buffer+1] = char(0xDD,			-- array32
								 floor(n / 0x1000000),
								 floor(n / 0x10000) % 0x100,
								 floor(n / 0x100) % 0x100,
								 n % 0x100)
	else
		error"overflow in pack 'array'"
	end
	for i = 1, n do
		local v = tbl[i]
		packers[type(v)](buffer, v)
	end
end

local set_array = function (array)
	if array == 'without_hole' then
		packers['_table'] = function (buffer, tbl)
			local is_map, n, max = false, 0, 0
			for k in pairs(tbl) do
				if isnumber(k) and k > 0 then
					if k > max then
						max = k
					end
				else
					is_map = true
				end
				n = n + 1
			end
			if max ~= n then	-- there are holes
				is_map = true
			end
			if is_map then
				packers['map'](buffer, tbl, n)
			else
				packers['array'](buffer, tbl, n)
			end
		end
	elseif array == 'with_hole' then
		packers['_table'] = function (buffer, tbl)
			local is_map, n, max = false, 0, 0
			for k in pairs(tbl) do
				if isnumber(k) and k > 0 then
					if k > max then
						max = k
					end
				else
					is_map = true
				end
				n = n + 1
			end
			if is_map then
				packers['map'](buffer, tbl, n)
			else
				packers['array'](buffer, tbl, max)
			end
		end
	elseif array == 'always_as_map' then
		packers['_table'] = function(buffer, tbl)
			local n = 0
			for k in pairs(tbl) do
				n = n + 1
			end
			packers['map'](buffer, tbl, n)
		end
	else
		argerror('set_array', 1, "invalid option '" .. array .."'")
	end
end
m.set_array = set_array

packers['table'] = function (buffer, tbl)
	packers['_table'](buffer, tbl)
end

packers['unsigned'] = function (buffer, n)
	if n >= 0 then
		if n <= 0x7F then
			buffer[#buffer+1] = char(n)			-- fixnum_pos
		elseif n <= 0xFF then
			buffer[#buffer+1] = char(0xCC,		-- uint8
									 n)
		elseif n <= 0xFFFF then
			buffer[#buffer+1] = char(0xCD,		-- uint16
									 floor(n / 0x100),
									 n % 0x100)
		elseif n <= 4294967295.0 then
			buffer[#buffer+1] = char(0xCE,		-- uint32
									 floor(n / 0x1000000),
									 floor(n / 0x10000) % 0x100,
									 floor(n / 0x100) % 0x100,
									 n % 0x100)
		else
			buffer[#buffer+1] = char(0xCF,		-- uint64
									 0,			-- only 53 bits from double
									 floor(n / 0x1000000000000) % 0x100,
									 floor(n / 0x10000000000) % 0x100,
									 floor(n / 0x100000000) % 0x100,
									 floor(n / 0x1000000) % 0x100,
									 floor(n / 0x10000) % 0x100,
									 floor(n / 0x100) % 0x100,
									 n % 0x100)
		end
	else
		if n >= -0x20 then
			buffer[#buffer+1] = char(0x100 + n) -- fixnum_neg
		elseif n >= -0x80 then
			buffer[#buffer+1] = char(0xD0,		-- int8
									 0x100 + n)
		elseif n >= -0x8000 then
			n = 0x10000 + n
			buffer[#buffer+1] = char(0xD1,		-- int16
									 floor(n / 0x100),
									 n % 0x100)
		elseif n >= -0x80000000 then
			n = 4294967296.0 + n
			buffer[#buffer+1] = char(0xD2,		-- int32
									 floor(n / 0x1000000),
									 floor(n / 0x10000) % 0x100,
									 floor(n / 0x100) % 0x100,
									 n % 0x100)
		else
			buffer[#buffer+1] = char(0xD3,		-- int64
									 0xFF,		-- only 53 bits from double
									 floor(n / 0x1000000000000) % 0x100,
									 floor(n / 0x10000000000) % 0x100,
									 floor(n / 0x100000000) % 0x100,
									 floor(n / 0x1000000) % 0x100,
									 floor(n / 0x10000) % 0x100,
									 floor(n / 0x100) % 0x100,
									 n % 0x100)
		end
	end
end

packers['signed'] = function (buffer, n)
	if n >= 0 then
		if n <= 0x7F then
			buffer[#buffer+1] = char(n)			-- fixnum_pos
		elseif n <= 0x7FFF then
			buffer[#buffer+1] = char(0xD1,		-- int16
									 floor(n / 0x100),
									 n % 0x100)
		elseif n <= 0x7FFFFFFF then
			buffer[#buffer+1] = char(0xD2,		-- int32
									 floor(n / 0x1000000),
									 floor(n / 0x10000) % 0x100,
									 floor(n / 0x100) % 0x100,
									 n % 0x100)
		else
			buffer[#buffer+1] = char(0xD3,		-- int64
									 0,			-- only 53 bits from double
									 floor(n / 0x1000000000000) % 0x100,
									 floor(n / 0x10000000000) % 0x100,
									 floor(n / 0x100000000) % 0x100,
									 floor(n / 0x1000000) % 0x100,
									 floor(n / 0x10000) % 0x100,
									 floor(n / 0x100) % 0x100,
									 n % 0x100)
		end
	else
		if n >= -0x20 then
			buffer[#buffer+1] = char(0xE0 + 0x20 + n)   -- fixnum_neg
		elseif n >= -0x80 then
			buffer[#buffer+1] = char(0xD0,		-- int8
									 0x100 + n)
		elseif n >= -0x8000 then
			n = 0x10000 + n
			buffer[#buffer+1] = char(0xD1,		-- int16
									 floor(n / 0x100),
									 n % 0x100)
		elseif n >= -0x80000000 then
			n = 4294967296.0 + n
			buffer[#buffer+1] = char(0xD2,		-- int32
									 floor(n / 0x1000000),
									 floor(n / 0x10000) % 0x100,
									 floor(n / 0x100) % 0x100,
									 n % 0x100)
		else
			buffer[#buffer+1] = char(0xD3,		-- int64
									 0xFF,		-- only 53 bits from double
									 floor(n / 0x1000000000000) % 0x100,
									 floor(n / 0x10000000000) % 0x100,
									 floor(n / 0x100000000) % 0x100,
									 floor(n / 0x1000000) % 0x100,
									 floor(n / 0x10000) % 0x100,
									 floor(n / 0x100) % 0x100,
									 n % 0x100)
		end
	end
end

local set_integer = function (integer)
	if integer == 'unsigned' then
		packers['integer'] = packers['unsigned']
	elseif integer == 'signed' then
		packers['integer'] = packers['signed']
	else
		argerror('set_integer', 1, "invalid option '" .. integer .."'")
	end
end
m.set_integer = set_integer

packers['float'] = function (buffer, n)
	local sign = 0
	if n < 0.0 then
		sign = 0x80
		n = -n
	end
	local mant, expo = frexp(n)
	if mant ~= mant then
		buffer[#buffer+1] = char(0xCA,  -- nan
								 0xFF, 0x88, 0x00, 0x00)
	elseif mant == huge or expo > 0x80 then
		if sign == 0 then
			buffer[#buffer+1] = char(0xCA,	  -- inf
									 0x7F, 0x80, 0x00, 0x00)
		else
			buffer[#buffer+1] = char(0xCA,	  -- -inf
									 0xFF, 0x80, 0x00, 0x00)
		end
	elseif (mant == 0.0 and expo == 0) or expo < -0x7E then
		buffer[#buffer+1] = char(0xCA,  -- zero
								 sign, 0x00, 0x00, 0x00)
	else
		expo = expo + 0x7E
		mant = floor((mant * 2.0 - 1.0) * ldexp(0.5, 24))
		buffer[#buffer+1] = char(0xCA,
								 sign + floor(expo / 0x2),
								 (expo % 0x2) * 0x80 + floor(mant / 0x10000),
								 floor(mant / 0x100) % 0x100,
								 mant % 0x100)
	end
end

packers['double'] = function (buffer, n)
	local sign = 0
	if n < 0.0 then
		sign = 0x80
		n = -n
	end
	local mant, expo = frexp(n)
	if mant ~= mant then
		buffer[#buffer+1] = char(0xCB,  -- nan
								 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
	elseif mant == huge or expo > 0x400 then
		if sign == 0 then
			buffer[#buffer+1] = char(0xCB,	  -- inf
									 0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
		else
			buffer[#buffer+1] = char(0xCB,	  -- -inf
									 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
		end
	elseif (mant == 0.0 and expo == 0) or expo < -0x3FE then
		buffer[#buffer+1] = char(0xCB,  -- zero
								 sign, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00)
	else
		expo = expo + 0x3FE
		mant = floor((mant * 2.0 - 1.0) * ldexp(0.5, 53))
		buffer[#buffer+1] = char(0xCB,
								 sign + floor(expo / 0x10),
								 (expo % 0x10) * 0x10 + floor(mant / 0x1000000000000),
								 floor(mant / 0x10000000000) % 0x100,
								 floor(mant / 0x100000000) % 0x100,
								 floor(mant / 0x1000000) % 0x100,
								 floor(mant / 0x10000) % 0x100,
								 floor(mant / 0x100) % 0x100,
								 mant % 0x100)
	end
end

local set_number = function (number)
	if number == 'float' then
		packers['number'] = function (buffer, n)
			if floor(n) == n and n < maxinteger and n > mininteger then
				packers['integer'](buffer, n)
			else
				packers['float'](buffer, n)
			end
		end
	elseif number == 'double' then
		packers['number'] = function (buffer, n)
			if floor(n) == n and n < maxinteger and n > mininteger then
				packers['integer'](buffer, n)
			else
				packers['double'](buffer, n)
			end
		end
	else
		argerror('set_number', 1, "invalid option '" .. number .."'")
	end
end
m.set_number = set_number

for k = 0, 4 do
	local n = tointeger(2^k)
	local fixext = 0xD4 + k
	packers['fixext' .. tostring(n)] = function (buffer, tag, data)
		assert(#data == n, "bad length for fixext" .. tostring(n))
		buffer[#buffer+1] = char(fixext,
								 tag < 0 and tag + 0x100 or tag)
		buffer[#buffer+1] = data
	end
end

packers['ext'] = function (buffer, tag, data)
	local n = #data
	if n <= 0xFF then
		buffer[#buffer+1] = char(0xC7,		  -- ext8
								 n,
								 tag < 0 and tag + 0x100 or tag)
	elseif n <= 0xFFFF then
		buffer[#buffer+1] = char(0xC8,		  -- ext16
								 floor(n / 0x100),
								 n % 0x100,
								 tag < 0 and tag + 0x100 or tag)
	elseif n <= 4294967295.0 then
		buffer[#buffer+1] = char(0xC9,		  -- ext&32
								 floor(n / 0x1000000),
								 floor(n / 0x10000) % 0x100,
								 floor(n / 0x100) % 0x100,
								 n % 0x100,
								 tag < 0 and tag + 0x100 or tag)
	else
		error"overflow in pack 'ext'"
	end
	buffer[#buffer+1] = data
end

function m.pack (data)
	local buffer = {}
	packers[type(data)](buffer, data)
	return tconcat(buffer)
end


local unpackers		 -- forward declaration

local function unpack_cursor (c)
	local s, i, j = c.s, c.i, c.j
	if i > j then
		c:underflow(i)
		s, i, j = c.s, c.i, c.j
	end
	local val = s:byte(i)
	c.i = i+1
	return unpackers[val](c, val)
end
m.unpack_cursor = unpack_cursor

local function unpack_str (c, n)
	local s, i, j = c.s, c.i, c.j
	local e = i+n-1
	if e > j or n < 0 then
		c:underflow(e)
		s, i, j = c.s, c.i, c.j
		e = i+n-1
	end
	c.i = i+n
	return s:sub(i, e)
end

local function unpack_array (c, n)
	local t = {}
	for i = 1, n do
		t[i] = unpack_cursor(c)
	end
	return t
end

local function unpack_map (c, n)
	local t = {}
	for i = 1, n do
		local k = unpack_cursor(c)
		local val = unpack_cursor(c)
		if k == nil or k ~= k then
			k = m.sentinel
		end
		if k ~= nil then
			t[k] = val
		end
	end
	return t
end

local function unpack_float (c)
	local s, i, j = c.s, c.i, c.j
	if i+3 > j then
		c:underflow(i+3)
		s, i, j = c.s, c.i, c.j
	end
	local b1, b2, b3, b4 = s:byte(i, i+3)
	local sign = b1 > 0x7F
	local expo = (b1 % 0x80) * 0x2 + floor(b2 / 0x80)
	local mant = ((b2 % 0x80) * 0x100 + b3) * 0x100 + b4
	if sign then
		sign = -1
	else
		sign = 1
	end
	local n
	if mant == 0 and expo == 0 then
		n = sign * 0.0
	elseif expo == 0xFF then
		if mant == 0 then
			n = sign * huge
		else
			n = 0.0/0.0
		end
	else
		n = sign * ldexp(1.0 + mant / 0x800000, expo - 0x7F)
	end
	c.i = i+4
	return n
end

local function unpack_double (c)
	local s, i, j = c.s, c.i, c.j
	if i+7 > j then
		c:underflow(i+7)
		s, i, j = c.s, c.i, c.j
	end
	local b1, b2, b3, b4, b5, b6, b7, b8 = s:byte(i, i+7)
	local sign = b1 > 0x7F
	local expo = (b1 % 0x80) * 0x10 + floor(b2 / 0x10)
	local mant = ((((((b2 % 0x10) * 0x100 + b3) * 0x100 + b4) * 0x100 + b5) * 0x100 + b6) * 0x100 + b7) * 0x100 + b8
	if sign then
		sign = -1
	else
		sign = 1
	end
	local n
	if mant == 0 and expo == 0 then
		n = sign * 0.0
	elseif expo == 0x7FF then
		if mant == 0 then
			n = sign * huge
		else
			n = 0.0/0.0
		end
	else
		n = sign * ldexp(1.0 + mant / 4503599627370496.0, expo - 0x3FF)
	end
	c.i = i+8
	return n
end

local function unpack_uint8 (c)
	local s, i, j = c.s, c.i, c.j
	if i > j then
		c:underflow(i)
		s, i, j = c.s, c.i, c.j
	end
	local b1 = s:byte(i)
	c.i = i+1
	return b1
end

local function unpack_uint16 (c)
	local s, i, j = c.s, c.i, c.j
	if i+1 > j then
		c:underflow(i+1)
		s, i, j = c.s, c.i, c.j
	end
	local b1, b2 = s:byte(i, i+1)
	c.i = i+2
	return b1 * 0x100 + b2
end

local function unpack_uint32 (c)
	local s, i, j = c.s, c.i, c.j
	if i+3 > j then
		c:underflow(i+3)
		s, i, j = c.s, c.i, c.j
	end
	local b1, b2, b3, b4 = s:byte(i, i+3)
	c.i = i+4
	return ((b1 * 0x100 + b2) * 0x100 + b3) * 0x100 + b4
end

local function unpack_uint64 (c)
	local s, i, j = c.s, c.i, c.j
	if i+7 > j then
		c:underflow(i+7)
		s, i, j = c.s, c.i, c.j
	end
	local b1, b2, b3, b4, b5, b6, b7, b8 = s:byte(i, i+7)
	c.i = i+8
	return ((((((b1 * 0x100 + b2) * 0x100 + b3) * 0x100 + b4) * 0x100 + b5) * 0x100 + b6) * 0x100 + b7) * 0x100 + b8
end

local function unpack_int8 (c)
	local s, i, j = c.s, c.i, c.j
	if i > j then
		c:underflow(i)
		s, i, j = c.s, c.i, c.j
	end
	local b1 = s:byte(i)
	c.i = i+1
	if b1 < 0x80 then
		return b1
	else
		return b1 - 0x100
	end
end

local function unpack_int16 (c)
	local s, i, j = c.s, c.i, c.j
	if i+1 > j then
		c:underflow(i+1)
		s, i, j = c.s, c.i, c.j
	end
	local b1, b2 = s:byte(i, i+1)
	c.i = i+2
	if b1 < 0x80 then
		return b1 * 0x100 + b2
	else
		return ((b1 - 0xFF) * 0x100 + (b2 - 0xFF)) - 1
	end
end

local function unpack_int32 (c)
	local s, i, j = c.s, c.i, c.j
	if i+3 > j then
		c:underflow(i+3)
		s, i, j = c.s, c.i, c.j
	end
	local b1, b2, b3, b4 = s:byte(i, i+3)
	c.i = i+4
	if b1 < 0x80 then
		return ((b1 * 0x100 + b2) * 0x100 + b3) * 0x100 + b4
	else
		return ((((b1 - 0xFF) * 0x100 + (b2 - 0xFF)) * 0x100 + (b3 - 0xFF)) * 0x100 + (b4 - 0xFF)) - 1
	end
end

local function unpack_int64 (c)
	local s, i, j = c.s, c.i, c.j
	if i+7 > j then
		c:underflow(i+7)
		s, i, j = c.s, c.i, c.j
	end
	local b1, b2, b3, b4, b5, b6, b7, b8 = s:byte(i, i+7)
	c.i = i+8
	if b1 < 0x80 then
		return ((((((b1 * 0x100 + b2) * 0x100 + b3) * 0x100 + b4) * 0x100 + b5) * 0x100 + b6) * 0x100 + b7) * 0x100 + b8
	else
		return ((((((((b1 - 0xFF) * 0x100 + (b2 - 0xFF)) * 0x100 + (b3 - 0xFF)) * 0x100 + (b4 - 0xFF)) * 0x100 + (b5 - 0xFF)) * 0x100 + (b6 - 0xFF)) * 0x100 + (b7 - 0xFF)) * 0x100 + (b8 - 0xFF)) - 1
	end
end

function m.build_ext (tag, data)
	return nil
end

local function unpack_ext (c, n, tag)
	local s, i, j = c.s, c.i, c.j
	local e = i+n-1
	if e > j or n < 0 then
		c:underflow(e)
		s, i, j = c.s, c.i, c.j
		e = i+n-1
	end
	c.i = i+n
	return m.build_ext(tag, s:sub(i, e))
end

local fn_1 = function(c, val)
	return val
end

local fn_2 = function(c, val)
	return unpack_map(c, val % 0x10)
end

local fn_3 = function(c, val)
	return unpack_array(c, val % 0x10)
end

local fn_4 = function(c, val)
	return unpack_str(c, val % 0x20)
end

local fn_5 = function(c, val)
	return val - 0x100
end

unpackers = setmetatable({
	[0xC0] = function () return nil end,
	[0xC2] = function () return false end,
	[0xC3] = function () return true end,
	[0xC4] = function (c) return unpack_str(c, unpack_uint8(c)) end,	-- bin8
	[0xC5] = function (c) return unpack_str(c, unpack_uint16(c)) end,   -- bin16
	[0xC6] = function (c) return unpack_str(c, unpack_uint32(c)) end,   -- bin32
	[0xC7] = function (c) return unpack_ext(c, unpack_uint8(c), unpack_int8(c)) end,
	[0xC8] = function (c) return unpack_ext(c, unpack_uint16(c), unpack_int8(c)) end,
	[0xC9] = function (c) return unpack_ext(c, unpack_uint32(c), unpack_int8(c)) end,
	[0xCA] = unpack_float,
	[0xCB] = unpack_double,
	[0xCC] = unpack_uint8,
	[0xCD] = unpack_uint16,
	[0xCE] = unpack_uint32,
	[0xCF] = unpack_uint64,
	[0xD0] = unpack_int8,
	[0xD1] = unpack_int16,
	[0xD2] = unpack_int32,
	[0xD3] = unpack_int64,
	[0xD4] = function (c) return unpack_ext(c, 1, unpack_int8(c)) end,
	[0xD5] = function (c) return unpack_ext(c, 2, unpack_int8(c)) end,
	[0xD6] = function (c) return unpack_ext(c, 4, unpack_int8(c)) end,
	[0xD7] = function (c) return unpack_ext(c, 8, unpack_int8(c)) end,
	[0xD8] = function (c) return unpack_ext(c, 16, unpack_int8(c)) end,
	[0xD9] = function (c) return unpack_str(c, unpack_uint8(c)) end,
	[0xDA] = function (c) return unpack_str(c, unpack_uint16(c)) end,
	[0xDB] = function (c) return unpack_str(c, unpack_uint32(c)) end,
	[0xDC] = function (c) return unpack_array(c, unpack_uint16(c)) end,
	[0xDD] = function (c) return unpack_array(c, unpack_uint32(c)) end,
	[0xDE] = function (c) return unpack_map(c, unpack_uint16(c)) end,
	[0xDF] = function (c) return unpack_map(c, unpack_uint32(c)) end,
}, {
	__index = function (t, k)
		if k < 0xC0 then
			if k < 0x80 then
				return fn_1
			elseif k < 0x90 then
				return fn_2
			elseif k < 0xA0 then
				return fn_3
			else
				return fn_4
			end
		elseif k > 0xDF then
			return fn_5
		else
			return function () error("unpack '" .. format('%#x', k) .. "' is unimplemented") end
		end
	end
})

local function cursor_string (str)
	return {
		s = str,
		i = 1,
		j = #str,
		underflow = function ()
						error "missing bytes"
					end,
	}
end

local function cursor_loader (ld)
	return {
		s = '',
		i = 1,
		j = 0,
		underflow = function (self, e)
						self.s = self.s:sub(self.i)
						e = e - self.i + 1
						self.i = 1
						self.j = 0
						while e > self.j do
							local chunk = ld()
							if not chunk then
								error "missing bytes"
							end
							self.s = self.s .. chunk
							self.j = #self.s
						end
					end,
	}
end

function m.unpack (s)
	checktype('unpack', 1, s, 'string')
	local cursor = cursor_string(s)
	local data = unpack_cursor(cursor)
	if cursor.i <= cursor.j then
		error "extra bytes"
	end
	return data
end

function m.unpacker (src)
	if type(src) == 'string' then
		local cursor = cursor_string(src)
		return function ()
			if cursor.i <= cursor.j then
				return cursor.i, unpack_cursor(cursor)
			end
		end
	elseif type(src) == 'function' then
		local cursor = cursor_loader(src)
		return function ()
			if cursor.i > cursor.j then
				pcall(cursor.underflow, cursor, cursor.i)
			end
			if cursor.i <= cursor.j then
				return true, unpack_cursor(cursor)
			end
		end
	else
		argerror('unpacker', 1, "string or function expected, got " .. type(src))
	end
end

set_string'string_compat'
set_integer'unsigned'
if SIZEOF_NUMBER == 4 then
	maxinteger = 16777215
	mininteger = -maxinteger
	m.small_lua = true
	unpackers[0xCB] = nil	   -- double
	unpackers[0xCF] = nil	   -- uint64
	unpackers[0xD3] = nil	   -- int64
	set_number'float'
else
	maxinteger = 9007199254740991
	mininteger = -maxinteger
	set_number'double'
	if SIZEOF_NUMBER > 8 then
		m.long_double = true
	end
end
set_array'without_hole'

m._VERSION = '0.5.2'
m._DESCRIPTION = "lua-MessagePack : a pure Lua implementation"
m._COPYRIGHT = "Copyright (c) 2012-2019 Francois Perrad"

return m

--
-- This library is licensed under the terms of the MIT/X11 license,
-- like Lua itself.
--

--addons/thirdperson/lua/thirdperson/sh_thirdperson_config.lua:
--[[
!ThirdPerson
By Imperial Knight.
Copyright © Imperial Knight 2019: Do not redistribute.
(76561198347218024)

CONFIGURATION FILE
]]--

-- Defaults --
    -- Default Third-Person setting
    -- Options: true or false
    -- Default value: true
    THIRDPERSON.default.ThirdPerson = true;

    -- Default Key Bind setting
    -- Options: none or key
    -- Default value: none
    THIRDPERSON.default.Bind = "F1";

    -- Default Prevent Wall Collisions setting
    -- Options: true or false
    -- Default value: true.
    THIRDPERSON.default.PreventWallCollisions = true;

    -- Default Bullet Correction setting
    -- Options: true or false
    -- Default value: true
    THIRDPERSON.default.BulletCorrections = true;

    -- Default First-Person Scoping while in Third-Person setting
    -- Options: true or false
    -- Default value: true
    THIRDPERSON.default.Scoping = true;

    -- Default Distance setting
    -- Options: Number 0 to max distance configuration setting
    -- Default value: 100
    THIRDPERSON.default.Distance = 50;

    -- Default Vertical View setting
    -- Options: Number -50 to 50
    -- Default value: 5
    THIRDPERSON.default.VerticalView = 5;

    -- Default Horizontal View setting
    -- Options: Number -50 to 50
    -- Default value: 20
    THIRDPERSON.default.HorizontalView = 20;

    -- Default Third-Person Crosshair setting
    -- Options: A crosshair number (1-6); "None" for no crosshair by default
    -- Default value: None
    THIRDPERSON.default.Crosshair = "None";

    -- Default Crosshair Color setting
    -- Options: Color code r, g, b, a
    -- Default value: 0, 255, 0, 255
    THIRDPERSON.default.CrosshairColor = "0, 255, 0, 255";

    -- Default First-person while looking at the configured first-person entities.
    -- Options: true or false
    -- Default value: true
    THIRDPERSON.default.EntityView = true;
-- --

-- Sets the maximum view distance a user can configure.
-- Options: Number
-- Default value: 100
THIRDPERSON.maxDistance = 70;

-- Sets whether to have temporary first-person while keypad cracking or lock picking.
-- Options: true or false
-- Default value: true
THIRDPERSON.LockpickKeypadcrack = true;

-- Sets whether !ThirdPerson will have an icon for the menu in the context menu.
-- Options: true or false
-- Default value: true
THIRDPERSON.contextMenu = false;

-- Sets whether the !ThirdPerson set crosshair will be in first and third-person modes.
-- Options: true or false
-- Default value: false
THIRDPERSON.persistentCrosshair = false;

-- Sets the method by which !ThirdPerson will download content to players.
-- Options: direct, workshop, none (if you have another way of downloading)
-- Default value: direct
THIRDPERSON.downloadMethod = "none";

-- Sets whether !ThirdPerson will put chat messages in the chat.
-- Options: true or false
-- Default value: true
THIRDPERSON.broadcastChat = true;

-- Sets whether !ThirdPerson will enable permissions support for detected admin mods (ULX, ServerGuard, xAdmin, xAdmin 2, SAM, or any CAMI-Supporting Admin Mod)
-- Options: true or false
-- Default value: true
THIRDPERSON.permissionsSupport = true;

-- Sets whether !ThirdPerson will use nicer fonts on the menu (that require download).
-- Options: true or false
-- Default value: true
THIRDPERSON.useFonts = false;

-- Sets whether !ThirdPerson will attempt to force compatibility by only allowing configured forceHooks when !ThirdPerson mode is not engaged/active.
-- Options: true or false
-- Default value: false
THIRDPERSON.forceCompatibility = false;

-- List of hooks to disengage when !ThirdPerson is active and forceCompatibility is true.
-- Options: List of strings
-- Default values: "CalcView", "ShouldDrawLocalPlayer"
THIRDPERSON.forceHooks = {
    "CalcView",
    "ShouldDrawLocalPlayer"
}

-- Commands:
-- Be sure to add a comma between entries in the tables.
THIRDPERSON.toggleCommands = {
    "!thirdperson",
    "!firstperson",
    "!fp",
    "!3p",
    "!1p",
};

THIRDPERSON.menuCommands = {
    "!thirdperson menu",
    "!thirdperson_menu",
    "!3p_menu",
    "!3p menu",
};

--[[

> ENTITIES CONFIGURATION
  ----------------------

Use this to whitelist entities which switch to first-person view mode
so that the user can better interact with them.

**You want to whitelist an entity if you want the entity to be viewed in
first-person mode at a specific distance.

**You want to remove an entity if you do not want viewing the entity
to ever trigger first-person mode.

Whitelisting/Adding Entities
----------------------------
Entries must follow the following format:
    ["Entity Class Name"] = View Distance,

- Entity Class Name is the classname of the entity. Do NOT forget the [""].
- To get the entity's class, simply look at it, and use the !thirdperson entity command.
- View Distance is the view distance less than or equal to that you want 
  the view mode to change to first-person while looking at the given entity.

Blacklisting/Removing Entities
------------------------------
Simply delete the line with the entity you wish to remove. Be sure
that there is a comma on the second to last line of the table.
]]--

THIRDPERSON.entities = {
    -- Keypad Support --
    ["Keypad"]              = 75,
    ["keypad_wire"]         = 75,
    -- ATM Support --
    ["sent_arc_atm"]        = 75,
    ["atm_wall"]            = 75,
    -- ATM Pin Machine Support --
    ["sent_arc_pinmachine"] = 60,
    ["atm_reader"]          = 60,
    -- Printer Support --
    -- Others --
};

--[[

> WEAPONS CONFIGURATION
  ---------------------

Use this to set which weapons are viewed in first-person while the user is
holding them or by a custom function check.

Note that this is separate from lockpicking and keypad cracking--check the
above settings for those DarkRP settings, unless yours is custom.

Weapons must follow *one of these two* formats:
1. ["weapon_class"] = function( weapon ) return weapon:CustomCheck() end,
    - Whenever the function provided returns true, first-person mode will engage.
  OR
2. ["weapon_class"] = true,
    - Whenever the user has this weapon out, first-person mode will engage.

If a function is provided, the user will only be put in first-person mode
while that function returns true. This is useful for weapons, such as custom
lockpicks or keypad crackers, where you only want temporary first-person
mode while the weapon is being used. Please check with the SWEP or SWEP
developer for what functions you can use to check what state the SWEP is in.
- Please note that custom function checks do require a bit of lua.
  if you need any help with the lua, feel free to put in a support ticket.

If you would like first-person mode to always be active while the user
has the weapon out, simply set the value to true.
]]--

THIRDPERSON.weapons = {
    -- ["weapon_example"]   = function( weapon ) return weapon:CustomCheck() end,
    -- ["weapon_example_2"] = true,
};

-- ** IGNORE IF YOU ARE USING ULX, ServerGuard, xAdmin, xAdmin 2, SAM, or a CAMI-Supporting Admin Mod **
-- This will have no effect if one of those admin systems is on the server as !ThirdPerson will
-- use their permission systems instead.
-- If the server does NOT have a supported admin mod, define permissions below:
-- The following permissions are available:
--[[

> PERMISSIONS CONFIGURATION
  -------------------------

Default SuperAdmin Access:
--------------------------
thirdperson_preventwallcollisions    Ability to switch from the default PreventWallCollisions setting.

Default Admin Access:
---------------------
None.

Default User Access:
--------------------
thirdperson_view                Ability to switch from the default ThirdPerson setting.
thirdperson_crosshair           Ability to switch from the default Crosshair setting.
thirdperson_crosshaircolor      Ability to switch from the default CrosshairColor setting.
thirdperson_scoping             Ability to switch from the default Scoping setting.
thirdperson_bulletcorrection    Ability to switch from the default BulletCorrection setting.
thirdperson_distance            Ability to switch from the default Distance setting.
thirdperson_viewangles          Ability to switch from the default VerticalView and HorizontalView settings.
thirdperson_entityview          Ability to switch from the default EntityView setting.

Note that permissions are inherited: User --> Admin --> SuperAdmin.
Not all permissions have to be used, if the permission is not in any of the access tables then
no one will have access to it.
]]--

THIRDPERSON.access.SuperAdmin = {
    "thirdperson_preventwallcollisions",
};

THIRDPERSON.access.Admin = {

};

THIRDPERSON.access.User = {
    "thirdperson_view",
    "thirdperson_crosshair",
    "thirdperson_crosshaircolor",
    "thirdperson_scoping",
    "thirdperson_bulletcorrection",
    "thirdperson_distance",
    "thirdperson_viewangles",
    "thirdperson_entityview",
};
--addons/thirdperson/lua/thirdperson/client/cl_thirdperson.lua:
--[[
!ThirdPerson
By Imperial Knight.
Copyright © Imperial Knight 2019: Do not redistribute.
(76561198347218024)

CLIENTSIDE FILE
]]--

function THIRDPERSON.getCrosshairColor()
    if THIRDPERSON.hasPermission( LocalPlayer(), "thirdperson_crosshaircolor" ) then
        local r = cvars.Number( "thirdperson_crosshair_color_r" );
        local g = cvars.Number( "thirdperson_crosshair_color_g" );
        local b = cvars.Number( "thirdperson_crosshair_color_b" );
        local a = cvars.Number( "thirdperson_crosshair_color_a" );

        return Color( r, g, b, a );
    else
        local colors = string.Explode( ",", string.gsub( THIRDPERSON.default.CrosshairColor, "%s+", "" ) );

        local r = tonumber( colors[1] );
        local g = tonumber( colors[2] );
        local b = tonumber( colors[3] );
        local a = tonumber( colors[4] );
        
        return Color( r, g, b, a );
    end
end

function THIRDPERSON.resetSetting( pl, cmd, setting )
    setting = setting[1];

    if ( setting == nil or ( THIRDPERSON.permissions[ "thirdperson_" .. setting ] == nil and setting ~= "all" and setting ~= "crosshaircolor" ) ) then
        if ( THIRDPERSON.broadcastChat ) then
            chat.AddText( Color(80, 215, 23), "[!ThirdPerson] ", Color(255, 255, 255), "Lütfen sıfırlamak için geçerli bir ayar girin. Hepsini sıfırlamak için 'all' argümanını kullanın." );

        end
        return;
    end

    function resetCrosshairColor()
        local colors = string.Explode( ",", string.gsub( THIRDPERSON.default.CrosshairColor, "%s+", "" ) );

        local r = tonumber( colors[1] );
        local g = tonumber( colors[2] );
        local b = tonumber( colors[3] );
        local a = tonumber( colors[4] );
        
        RunConsoleCommand( "thirdperson_crosshair_color_r", r );
        RunConsoleCommand( "thirdperson_crosshair_color_g", g );
        RunConsoleCommand( "thirdperson_crosshair_color_b", b );
        RunConsoleCommand( "thirdperson_crosshair_color_a", a );
    end

    if setting == "all" then
        for permission, configuration in pairs( THIRDPERSON.permissions ) do
            if permission == "thirdperson_view" then
                continue;
            end
            local value = THIRDPERSON.default[ configuration ];
            if type( value ) == "boolean" then
                RunConsoleCommand( permission, THIRDPERSON.boolToNumber( value ) );
            else
                RunConsoleCommand( permission, value );
            end
        end

        resetCrosshairColor();

        if ( THIRDPERSON.broadcastChat ) then
            chat.AddText( Color(80, 215, 23), "[!ThirdPerson] ", Color(255, 255, 255), "Tüm Üçüncü Şahıs ayarları varsayılan değerlerine sıfırlandı." );
        end
    elseif setting == "crosshaircolor" then
        resetCrosshairColor();
        if ( THIRDPERSON.broadcastChat ) then
            chat.AddText( Color(80, 215, 23), "[!ThirdPerson] ", Color(255, 255, 255), " ", Color(243, 156, 18), "crosshaircolor", Color(255, 255, 255), " ayarı varsayılan değerine sıfırlandı." );
        end
    else
        local value = THIRDPERSON.default[ THIRDPERSON.permissions[ "thirdperson_" .. setting ] ];

        if type( value ) == "boolean" then
            RunConsoleCommand( "thirdperson_" .. setting, THIRDPERSON.boolToNumber( value ) );
        else
            RunConsoleCommand( "thirdperson_" .. setting, value );
        end

        if ( THIRDPERSON.broadcastChat ) then
            chat.AddText( Color(80, 215, 23), "[!ThirdPerson] ", Color(255, 255, 255), " ", Color(243, 156, 18), setting, Color(255, 255, 255), " ayarı varsayılan değerine sıfırlandı." );
        end
    end
end

local function autoCompleteReset()
    local tbl = { "thirdperson_reset all", "thirdperson_reset crosshaircolor" };

    for configuration, type in pairs( THIRDPERSON.configuration ) do
        configuration = string.gsub( configuration, "thirdperson_", "" );
        table.insert( tbl, "thirdperson_reset " .. configuration );
    end

    return tbl;
end

concommand.Add( "thirdperson_reset", THIRDPERSON.resetSetting, autoCompleteReset );

local function toggleThirdPerson()
    if THIRDPERSON.Setting("thirdperson_view") then
        RunConsoleCommand( "thirdperson_view", "0" );
        if THIRDPERSON.hasPermission( LocalPlayer(), "thirdperson_view" ) then
            if ( THIRDPERSON.broadcastChat ) then
                chat.AddText( Color(80, 215, 23), "[!ThirdPerson] ", Color(255, 255, 255), "Üçüncü şahıs modu devre dışı bırakıldı." );
            end
        else
            if ( THIRDPERSON.broadcastChat ) then
                chat.AddText( Color(80, 215, 23), "[!ThirdPerson] ", Color(255, 50 ,50), "Hata: ", Color(255, 255, 255), "Üçüncü şahıs durumunuzu değiştirme izniniz yok." );
            end
        end
    else
        RunConsoleCommand( "thirdperson_view", "1" );

        if THIRDPERSON.hasPermission( LocalPlayer(), "thirdperson_view" ) then
            if ( THIRDPERSON.broadcastChat ) then
                chat.AddText( Color(80, 215, 23), "[!ThirdPerson] ", Color(255, 255, 255), "Üçüncü şahıs modu etkinleştirildi. Ayarlar için ", Color(243, 156, 18), THIRDPERSON.menuCommands[1], Color(255, 255, 255), " komutunu kullanabilirsiniz." );
            end
        else
            if ( THIRDPERSON.broadcastChat ) then
                chat.AddText( Color(80, 215, 23), "[!ThirdPerson] ", Color(255, 50 ,50), "Hata: ", Color(255, 255, 255), "Üçüncü şahıs durumunuzu değiştirme izniniz yok." );
            end
        end
    end

end

concommand.Add( "thirdperson_toggle", toggleThirdPerson ); -- ConCommand. Changing this *will* break the addon.
    
local function DrawThirdPerson( pl )
    if THIRDPERSON.Setting("thirdperson_view") and ( LocalPlayer():Alive() and LocalPlayer():IsValid() ) then

        -- Weapon Scope Compatibility --                                                                                                                                                                                                                                                            // 76561221774735761
        local weapon = pl:GetActiveWeapon();

        if THIRDPERSON.runChecks( weapon ) then
            return;
        end
        -- --

        return true;
    end
end
    
hook.Add( "ShouldDrawLocalPlayer", "THIRDPERSON.DrawThirdperson", DrawThirdPerson );
    
local function chatThirdPerson( pl, text, teamChat, isDead )
    if ( pl != LocalPlayer() ) then
        return;
    end

    if ( string.lower( text ) == "!thirdperson entity" ) then

        if ( not LocalPlayer():IsAdmin() ) then
            if ( THIRDPERSON.broadcastChat ) then
                chat.AddText( Color(80, 215, 23), "[!ThirdPerson] ", Color(192, 57, 43), "Admin: ", Color(255, 255, 255), "Bu komuta erişiminiz yok." );
            end
            return true;
        end

        local ent = {};
        ent.entity = LocalPlayer():GetEyeTrace().Entity;

        if ent.entity:IsValid() then
            ent.distance = LocalPlayer():EyePos():Distance( ent.entity:GetPos() );
            ent.class = ent.entity:GetClass();
        else
            ent.entity = nil;
            ent.distance = nil;
            ent.class = nil;
        end

        if ( ent.entity == nil or ent.class == nil or ent.distance == nil ) then
            chat.AddText( Color(80, 215, 23), "[!ThirdPerson] ", Color(192, 57, 43), "Admin: ", Color(255, 255, 255), "Hiçbir nesne bulunamadı. Komutu çalıştırmadan önce doğrudan nesneye bakın." );
            return true;
        else
            chat.AddText( Color(80, 215, 23), "[!ThirdPerson] ", Color(192, 57, 43), "Admin: ", Color(255, 255, 255), "Baktığınız nesne: ", Color(61, 61, 61), ent.class, Color(255, 255, 255), " (mesafe: " .. math.Round( ent.distance ) ..")" );
            return true;
        end
    end
end

hook.Add( "OnPlayerChat", "THIRDPERSON.chatThirdPersonClient", chatThirdPerson );

THIRDPERSON.bindDown = false;

function THIRDPERSON.bindThirdPerson()
    if ( THIRDPERSON.Setting("thirdperson_bind") ~= "none" and THIRDPERSON.Setting("thirdperson_bind") ~= nil ) then
        local bind = input.GetKeyCode( THIRDPERSON.Setting("thirdperson_bind") );

        local validBind = ( bind >= KEY_FIRST and bind <= KEY_LAST )
        if ( not LocalPlayer():IsTyping() and not gui.IsGameUIVisible() and bind and bind ~= KEY_ESCAPE and ( ( validBind and input.IsKeyDown( bind ) ) or ( input.IsMouseDown( bind ) and not validBind ) ) ) then
            local focusedPanel = vgui.GetKeyboardFocus()
            if not focusedPanel then
                if ( not THIRDPERSON.bindDown ) then 
                    RunConsoleCommand( "thirdperson_toggle" );
                end
                THIRDPERSON.bindDown = true;
            end
        else
            THIRDPERSON.bindDown = false;
        end
    end
end

hook.Add( "Think", "THIRDPERSON.bindThirdPerson", THIRDPERSON.bindThirdPerson );

function THIRDPERSON.forceCompatibility()
    for _, hookName in pairs(THIRDPERSON.forceHooks) do
        local hooks = hook.GetTable()
        local hookListing = hooks[hookName]

        for index, func in pairs(hookListing) do
            if not isstring(index) or (not string.StartsWith(index, "THIRDPERSON.")) then
                hookListing[index] = function(...)
                    return THIRDPERSON.hookCompatibility(func, ...)
                end
            end
        end
    end
end

--[[
Bullet correction networking fix after GMod update
]]--

local sentInitialClientData = false

local function syncClientData(convar, oldValue, newValue)

end

hook.Add("SetupMove", "THIRDPERSON.syncClientData", function()
    if (sentInitialClientData) then
        hook.Remove("SetupMove", "THIRDPERSON.syncClientData")
        return
    end

    for k, v in pairs(THIRDPERSON.configuration) do
        syncClientData(k, nil, THIRDPERSON.Setting(k))
    end

    timer.Simple(5, function()
        if (THIRDPERSON.forceCompatibility) then
            THIRDPERSON.forceCompatibility();
        end
    end)

    sentInitialClientData = true
end);

for configName, dataType in pairs(THIRDPERSON.configuration) do
    cvars.AddChangeCallback(configName, syncClientData)
end

function THIRDPERSON.hookCompatibility(hookFunc, ...)
    if (not isfunction(hookFunc)) then return end

    if THIRDPERSON.Setting("thirdperson_view") and (LocalPlayer():Alive() and LocalPlayer():IsValid()) and not THIRDPERSON.runChecks(LocalPlayer():GetActiveWeapon()) then
        return
    end

    return hookFunc(...)
end

--lua/slib/vgui/cl_splayerselector.lua:
slib.panels = slib.panels or {}

local PANEL = {}

local font, sid_font, empty_font = slib.createFont("Roboto", 13), slib.createFont("Roboto", 11), slib.createFont("Roboto", 15)
local textcolor, textcolor_60 = slib.getTheme("textcolor"), slib.getTheme("textcolor", -60)
local hovercolor, margin, maincolor_12, maincolor_15 = slib.getTheme("hovercolor"), slib.getTheme("margin"), slib.getTheme("maincolor", 12), slib.getTheme("maincolor", 15)
local icon = Material("slib/down-arrow.png", "smooth")
local placeholder = "Select Option"

function PANEL:Init()
    self:SetTall(slib.getScaledSize(25, "y"))
    self:setTitle(placeholder, TEXT_ALIGN_LEFT)
    self.iteration = 0
    self.options = {}
    self.option_h = slib.getScaledSize(32, "y")
    self.titl = ""

    self.close = vgui.Create("DButton")
    self.close:Dock(FILL)
    self.close:SetText("")
    self.close:SetVisible(false)

    self.close.Paint = function() end

    self.close.DoClick = function()
        self.close:SetVisible(false)
        if IsValid(self.droppedFrame) then
            self.droppedFrame:SetVisible(false)
        end

        if isfunction(self.onClose) then self.onClose(self) end

        self:setTitle(self.titl, TEXT_ALIGN_LEFT, true)

        if !self.ply then
            self:setTitle(placeholder, TEXT_ALIGN_LEFT)
        end
    end

    self.droppedFrame = vgui.Create("EditablePanel")
    self.droppedFrame:SetWide(self:GetWide())
    self.droppedFrame:SetVisible(false)

    self.search = vgui.Create("STextEntry", self.droppedFrame)
    :Dock(TOP)
    :SetTall(self:GetTall())
    
    self.search.onValueChange = function(val)
        for k,v in ipairs(self.droppedMenu:GetCanvas():GetChildren()) do
            if !v.ply then continue end

            local filtered = false

            if self.filter then
                if self.filter(v.ply) == false then filtered = true end
            end

            v:SetVisible((val:Trim() == "" or string.find(v.nick:lower(), val:lower()) or val == v.sid64) and !filtered)
        end

        self.droppedMenu.SizeToChilds()
        self.droppedMenu:GetCanvas():InvalidateLayout(true)
    end

    self.closesearch = vgui.Create("SButton", self.search)
    self.closesearch:SetSize(self.option_h, self.option_h)
    self.closesearch.Paint = function(s,w,h) end
    self.closesearch.DoClick = self.close.DoClick

    self.droppedMenu = vgui.Create("SScrollPanel", self.droppedFrame)
    self.droppedMenu:SetWide(self:GetWide())
    self.droppedMenu:SetPos(0, self:GetTall())
    self.droppedMenu.Paint = function(s,w,h)
        surface.SetDrawColor(maincolor_15)
        surface.DrawRect(0,0,w,h)

        draw.SimpleText("No entries.", empty_font, w * .5, self.option_h * .5, textcolor_60, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end

    self.droppedMenu.SizeToChilds = function()
        local childs = self.droppedMenu:GetCanvas():GetChildren()
        local visible_childs = 0
        local childs_h = 0

        for k,v in ipairs(childs) do
            if v:IsVisible() then
                childs_h = childs_h + v:GetTall()
                visible_childs = visible_childs + 1
            end

            if visible_childs >= 5 then break end
        end
        
        self.droppedMenu:SetTall(math.max(childs_h, visible_childs <= 0 and self.option_h or 0))
        self.droppedFrame:SetTall(self.droppedMenu:GetTall() + self.search:GetTall())
    end

    self.no_player = vgui.Create("SButton", self.droppedMenu)
    :Dock(TOP)
    :SetLinePos(0)
    :SetTall(slib.getScaledSize(24, "y"))
    :SetZPos(-100)
    :SetVisible(false)

    self.no_player.skipVisible = true

    local noply_titl = "No Player"

    self.no_player.Paint = function(s,w,h)        
        surface.SetDrawColor(s:IsHovered() and maincolor_12 or maincolor_15)
        surface.DrawRect(0, 0, w, h)

        draw.SimpleText(noply_titl, self.buttonfont or s.font, margin, h * .5, textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end

    self.no_player.DoClick = function()
        self.titl = noply_titl
        self.ply = nil

        self.close.DoClick()
        self:setTitle(noply_titl, TEXT_ALIGN_LEFT, true)

        if isfunction(self.onValueChange) then
            self.onValueChange(val, ply)
        end
    end

    slib.panels["SPlayerSelector"] = slib.panels["SPlayerSelector"] or {}
    table.insert(slib.panels["SPlayerSelector"], self)

    timer.Simple(0, function()
        if !IsValid(self) then return end

        for k,v in ipairs(player.GetAll()) do
            self:addOption(v)
        end
    end)
end

function PANEL:SetScrollBG(col)
    self.droppedMenu.scrollbg = col
end

function PANEL:FindSelectPlayer(ply)
    for k,v in ipairs(self.droppedMenu:GetCanvas():GetChildren()) do
        if v.ply == ply then
            v.DoClick()
            
            break
        end
    end
end

function PANEL:SetPlaceholder(str)
    self:setTitle(str, TEXT_ALIGN_LEFT)
end

function PANEL:OnRemove()
    if IsValid(self.droppedFrame) then self.droppedFrame:Remove() end
end

function PANEL:popupAlone()
    self:DoClick()

    local x, y = input.GetCursorPos()
    if !IsValid(self.droppedFrame) then return end
    self.droppedFrame:SetWide(self:GetWide())
    self.droppedFrame:SetPos(x, y)
    self.droppedFrame:MakePopup()
    self:SetVisible(false)

    self.droppedMenu:SetWide(self.droppedFrame:GetWide())

    self.onClose = function() self:Remove() end

    return self
end

function PANEL:updatedFilters()
    for k, v in ipairs(self.droppedMenu:GetCanvas():GetChildren()) do
        local result = true
        
        if v.skipVisible then continue end

        if self.filter then
            if self.filter(v.ply) == false then result = false end    
        end

        v:SetVisible(result)
    end

    self:pickFirst()
end

function PANEL:pickFirst()
    local childs = self.droppedMenu:GetCanvas():GetChildren()

    for k,v in ipairs(childs) do
        if !v:IsVisible() then continue end
        
        v.DoClick(true)

        break
    end
end

function PANEL:ScrollToFirst()
    local childs = self.droppedMenu:GetCanvas():GetChildren()

    for k,v in ipairs(childs) do
        if !v:IsVisible() then continue end
        
        self.droppedMenu:ScrollToChild(v)

        break
    end
end

function PANEL:ShowNoPlayer(bool)
    self.no_player:SetVisible(bool)

    self.droppedMenu:InvalidateLayout(true)
    self.droppedMenu:SizeToChilds()
end

function PANEL:addOption(ply)
    self.addedPlys = self.addedPlys or {}
    
    if self.addedPlys[ply] then return end
    
    self.addedPlys[ply] = true

    local iteration = self.iteration
    local nick, sid64 = ply:Nick(), ply:SteamID64()

    self.options[iteration] = vgui.Create("SButton", self.droppedMenu)
    :Dock(TOP)
    :SetLinePos(0)
    :SetTall(self.option_h)

    local visibility = !self.filter or self.filter(ply) != false
    self.options[iteration]:SetVisible(visibility)

    self.options[iteration].ply = ply
    self.options[iteration].nick = nick
    self.options[iteration].sid64 = sid64
    
    local avatar = vgui.Create("AvatarImage", self.options[iteration])
    avatar:SetPlayer(ply, 64)
    avatar:SetSize(self.option_h, self.option_h)
    avatar:SetMouseInputEnabled(false)

    local wide = self.options[iteration]:GetWide()

    self.options[iteration].accentheight = 1

    self.droppedMenu:InvalidateLayout(true)
    self.droppedMenu:SizeToChilds()

    self.options[iteration].DoClick = function()
        self.titl = nick
        self.ply = ply

        self.close.DoClick()
        self:setTitle(nick, TEXT_ALIGN_LEFT, true)

        if isfunction(self.onValueChange) then
            self.onValueChange(val, ply)
        end
    end

    self.options[iteration].Paint = function(s,w,h)
        if !IsValid(ply) then s:Remove() if IsValid(self.droppedMenu) then self.droppedMenu:InvalidateLayout(true) end end
        
        surface.SetDrawColor(s:IsHovered() and maincolor_12 or maincolor_15)
        surface.DrawRect(0, 0, w, h)

        draw.SimpleText(nick, self.buttonfont or self.options[iteration].font, self.option_h + margin, h * .5, textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM)
        draw.SimpleText(sid64, sid_font, self.option_h + margin, h * .5, textcolor_60, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
    end
    
    if wide > self:GetWide() then
        self:SetWide(wide)
    end
    
    self.iteration = self.iteration + 1

    self.lastchild = self.options[iteration]

    return self
end

function PANEL:SelectOption(int)
    self.options[int].DoClick()

    return self
end

function PANEL:Reposition()
    local x, y = self:LocalToScreen(0,0)
    if !IsValid(self.droppedMenu) then return end
    self.droppedFrame:SetWide(self:GetWide())
    self.droppedFrame:SetPos(x, y)
    self.droppedFrame:MakePopup()

    self.droppedMenu:SetWide(self.droppedFrame:GetWide())
    self.closesearch:SetPos(self:GetWide() - self.option_h, 0)
end

function PANEL:DoClick()
    self.close:SetVisible(!self.droppedFrame:IsVisible())
    self.close:MakePopup()

    local childs = self.droppedMenu:GetCanvas():GetChildren()

    self.droppedFrame:SetVisible(!self.droppedFrame:IsVisible())
    self.search:SetValue(self.search.placeholder)

    for k, v in ipairs(childs) do
        local result = true

        if v.skipVisible then continue end

        if self.filter then
            if self.filter(v.ply) == false then result = false end    
        end

        v:SetVisible(result)
    end

    self.droppedMenu:GetCanvas():InvalidateLayout()

    self:ScrollToFirst()

    self.droppedMenu.SizeToChilds()

    self:setTitle("")

    self:Reposition()
end

function PANEL:OnSizeChanged()
    self:Reposition()
end

function PANEL:PaintOver(w,h)
    local size = math.min(h * .7, slib.getScaledSize(12, "y"))
    local thickness = slib.getScaledSize(2, "x")

    draw.NoTexture()

    local wantedCol = (self:IsHovered() or (IsValid(self.closesearch) and self.closesearch:IsHovered())) and color_white or hovercolor

    surface.SetDrawColor(wantedCol)
    surface.SetMaterial(icon)
    surface.DrawTexturedRect(w - size - margin * 2, h * .5 - size * .5, size, size)
end

hook.Add("OnEntityCreated", "slib:AddNewPlayerSelector", function(ent)
    timer.Simple(3, function()
        if IsValid(ent) and slib.panels["SPlayerSelector"] and ent:IsPlayer() then
            for k,v in ipairs(slib.panels["SPlayerSelector"]) do
                if !IsValid(v) then continue end

                v:addOption(ent)
            end
        end
    end)
end)

vgui.Register("SPlayerSelector", PANEL, "SButton")
--lua/slib/vgui/cl_stextentry.lua:
local PANEL = {}

local accentcolor, textcolor, textcolor_30, textcolor_80 = slib.getTheme("accentcolor"), slib.getTheme("textcolor"), slib.getTheme("textcolor", -30), slib.getTheme("textcolor", -80)

function PANEL:Init()
    slib.wrapFunction(self, "Dock", nil, function() return self end, true)
    slib.wrapFunction(self, "SetNumeric", nil, function() return self end, true)
    slib.wrapFunction(self, "DockMargin", nil, function() return self end, true)
    slib.wrapFunction(self, "SetTextColor", nil, function() return self end, true)
    slib.wrapFunction(self, "SetDrawLanguageID", nil, function() return self end, true)
    slib.wrapFunction(self, "SetFont", nil, function() return self end, true)
    slib.wrapFunction(self, "SetTall", nil, function() return self end, true)
    slib.wrapFunction(self, "SetValue", nil, function() return self end, true)

    self.font = slib.createFont("Roboto", 15)
    self.placeholder = "Search..."

    self:SetDrawLanguageID(false)
    :SetTall(slib.getScaledSize(25, "y"))
    :SetFont(self.font)
    :SetTextColor(textcolor_80)
    :SetValue(self.placeholder)
end

function PANEL:Paint(w,h)
    local val = self:GetValue()
    local wantedcolor = accentcolor
    wantedcolor.a = self:HasFocus() and 120 or 20

    if self.bg then
        surface.SetDrawColor(self.bg)
        surface.DrawRect(0, 0, w, h)
    end
    
    if !self.sideline then
        surface.SetDrawColor(slib.lerpColor(self, wantedcolor))
        surface.DrawRect(0, !self.accentlinetop and h - 1 or 0, w, 1)
    end

    self:DrawTextEntryText(val == self.placeholder and textcolor_30 or textcolor, accentcolor, textcolor)
end

function PANEL:OnGetFocus()
    local val = self:GetValue()
    if val == self.placeholder then
        self:SetValue("")
    end
end

function PANEL:AccentLineTop(bool)
    self.accentlinetop = bool
end

function PANEL:SetRefreshRate(rate)
    self.refreshrate = rate
end

function PANEL:AccentSideLine(bool)
    self.sideline = bool
end

function PANEL:OnTextChanged()
    local newvalue = self:GetValue()

    timer.Create(tostring(self), self.refreshrate or .3, 1, function()
        if !IsValid(self) then return end
        if isfunction(self.onValueChange) then
            self.onValueChange(newvalue)
        end
    end)
end

function PANEL:SetPlaceholder(str)
    self.placeholder = str
    self:SetValue(self.placeholder)

    return self
end

function PANEL:OnLoseFocus()
    timer.Simple(.1, function()
        if !IsValid(self) then return end
        local val = self:GetValue()
        if !val or val == "" then
            self:SetValue(self.placeholder)
        end
    end)
end

vgui.Register("STextEntry", PANEL, "DTextEntry")
--addons/eprotect_1.5.24/lua/e_protect/languages/sh_spanish.lua:
if CLIENT then
    slib.setLang("eprotect", "es", "sc-preview", " Preview de Screenshot - ")
    slib.setLang("eprotect", "es", "net-info", "Información Net - ")
    slib.setLang("eprotect", "es", "ip-info", "Información de IP - ")
    slib.setLang("eprotect", "es", "id-info", "Información de ID - ")
    slib.setLang("eprotect", "es", "ip-correlation", "Correlación de IP - ")
    slib.setLang("eprotect", "es", "table-viewer", "Visor de Mesas")

    slib.setLang("eprotect", "es", "tab-general", "General")
    slib.setLang("eprotect", "es", "tab-identifier", "Identificador")
    slib.setLang("eprotect", "es", "tab-netlimiter", "Limitador Net")
    slib.setLang("eprotect", "es", "tab-netlogger", "Loggs Net")
    slib.setLang("eprotect", "es", "tab-exploitpatcher", "Parcheador de Exploits")
    slib.setLang("eprotect", "es", "tab-exploitfinder", "Buscador de Exploits")
    slib.setLang("eprotect", "es", "tab-fakeexploits", "Exploits Falsos")
    slib.setLang("eprotect", "es", "tab-datasnooper", "Fisgón de Datos")

    slib.setLang("eprotect", "es", "player-list", "Lista de Jugadores")

    slib.setLang("eprotect", "es", "ratelimit", "LimitadorRate")
    slib.setLang("eprotect", "es", "ratelimit-tooltip", "Este es un Limitador-Rate y funciona para poner ciertos limites. (Xs/Y)")

    slib.setLang("eprotect", "es", "timeout", "Tiempo")
    slib.setLang("eprotect", "es", "timeout-tooltip", "El tiempo el el intervalo entre que se resetea el contador del LimitadorRate.")
    
    slib.setLang("eprotect", "es", "overflowpunishment", "Castigo de Overflow")
    slib.setLang("eprotect", "es", "overflowpunishment-tooltip", "Este es el castigo que va a tener la gente que usa demasiado network. (1 = kick, 2 = ban)")

    slib.setLang("eprotect", "es", "enable-networking", "Habilitar networking")
    slib.setLang("eprotect", "es", "disable-networking", "Deshabilitar networking")

    slib.setLang("eprotect", "es", "disable-all-networking", "Deshabilitar todo el networking")
    slib.setLang("eprotect", "es", "disable-all-networking-tooltip", "Si esto esta habilitado, nadie va a poder usar el network en el server!")

    slib.setLang("eprotect", "es", "player", "Jugador")
    slib.setLang("eprotect", "es", "net-string", "Net String")
    slib.setLang("eprotect", "es", "called", "LLamado")
    slib.setLang("eprotect", "es", "len", "Len")
    slib.setLang("eprotect", "es", "type", "Tipo")
    slib.setLang("eprotect", "es", "activated", "Activado")
    slib.setLang("eprotect", "es", "secure", "Seguro")
    slib.setLang("eprotect", "es", "ip", "Dirección IP")
    slib.setLang("eprotect", "es", "date", "Fecha")
    slib.setLang("eprotect", "es", "country-code", "Código de País")
    slib.setLang("eprotect", "es", "status", "Status")

    slib.setLang("eprotect", "es", "unknown", "Desconocido")
    slib.setLang("eprotect", "es", "secured", "Seguro")

    slib.setLang("eprotect", "es", "check-ids", "Checkear ID(s)")
    slib.setLang("eprotect", "es", "correlate-ip", "Correlacionar IP(s)")
    slib.setLang("eprotect", "es", "family-share-check", "Checkear Cuentas Familiares")

    slib.setLang("eprotect", "es", "ply-sent-invalid-data", "Este Jugador envió datos inválidos!")
    slib.setLang("eprotect", "es", "ply-failed-retrieving-data", "%s Fallo al recibir datos!")

    slib.setLang("eprotect", "es", "net-limit-desc", "Este nuemero es la cantidad de veces que la gente puede usar network en un segundo antes de usar el LimitadorRate.")

    slib.setLang("eprotect", "es", "capture", "Screenshot")
    slib.setLang("eprotect", "es", "check-ips", "Checkear IP(s)")
    slib.setLang("eprotect", "es", "fetch-data", "Buscar Datos")
elseif SERVER then
    slib.setLang("eprotect", "es", "invalid-player", "Este Jugador en invalido!")
    slib.setLang("eprotect", "es", "kick-net-overflow", "Fuiste expulsado por net overflow!")
    slib.setLang("eprotect", "es", "banned-net-overflow", "Fuiste suspendido por net overflow!")
    slib.setLang("eprotect", "es", "banned-net-exploitation", "Fuiste expulsado por exploitiar mensajes net!")
    slib.setLang("eprotect", "es", "kick-malicious-intent", "Fuiste expulsado por intenciones maliciosas!")
    slib.setLang("eprotect", "es", "banned-malicious-intent", "Fuiste suspendido por intenciones maliciosas!")

    slib.setLang("eprotect", "es", "banned-exploit-attempt", "Fuiste suspendido por intentar usar un maliciosas!")

    slib.setLang("eprotect", "es", "sc-timeout", "Tenes que esperar %s segundos antes de poder screeshotear a %s otra vez!")
    slib.setLang("eprotect", "es", "sc-failed", "Fallo al cargar screenshot de %s, sospechoso...")

    slib.setLang("eprotect", "es", "has-family-share", "%s esta jugando con una cuenta familiar, el SteamD64 del dueño es %s")
    slib.setLang("eprotect", "es", "no-family-share", "%s no esta jugando con una cuenta familiar!")
    slib.setLang("eprotect", "es", "no-correlation", "No se pudieron correlacionar IPs con %s")
end
--addons/gprotect_1.13.99/lua/g_protect/sh_util.lua:
return gluapack()()
--addons/gprotect_1.13.99/lua/g_protect/sh_cppi.lua:
gProtect = gProtect or {}
gProtect.EmptyFuncs = gProtect.EmptyFuncs or {}
CPPI = CPPI or {}

local ENTITY = FindMetaTable("Entity")
local PLAYER = FindMetaTable("Player")



-- Create empty functions to prevent nil errors.
if !ENTITY.CPPIGetOwner then
    function ENTITY:CPPIGetOwner() end
    gProtect.EmptyFuncs["CPPIGetOwner"] = ENTITY.CPPIGetOwner
end

if !ENTITY.CPPISetOwner then
    function ENTITY:CPPISetOwner() end
end

local function overrideCPPI()
    ENTITY.oldCPPIGetOwner = ENTITY.oldCPPIGetOwner or (ENTITY.CPPIGetOwner != gProtect.EmptyFuncs["CPPIGetOwner"] and ENTITY.CPPIGetOwner)
    function ENTITY:CPPIGetOwner()
        local result = gProtect.GetOwner(self)
        
        if isstring(result) and isfunction(ENTITY.oldCPPIGetOwner) then result = self:oldCPPIGetOwner() end

        return SERVER and gProtect.ownershipCache[self] or (isstring(result) and nil or result), 200
    end

    function PLAYER:CPPIGetFriends()
        local friends_tbl = CLIENT and gProtect.BuddiesData or gProtect.TouchPermission
        local sid = self:SteamID()
        local found_friends = {}
        local result = {}

        if friends_tbl[sid] then
            for k, v in pairs(friends_tbl[sid]) do
                if !istable(v) then continue end
                for sid, v in pairs(v) do
                    found_friends[sid] = true
                end
            end
        end

        for k, v in pairs(found_friends) do
            table.insert(result, k)
        end
        
        return result
    end

    if SERVER then
        ENTITY.oldCPPISetOwner = ENTITY.oldCPPISetOwner or ENTITY.CPPISetOwner
        function ENTITY:CPPISetOwner(ply)
            if isfunction(ENTITY.oldCPPISetOwner) then
                self:oldCPPISetOwner(ply)
            end

            if !IsValid(ply) then return end
            gProtect.SetOwner(ply, self)
        end

        function ENTITY:CPPICanTool(ply, tool)            
            return gProtect.HandlePermissions(ply, self, "gmod_tool")
        end
    
        function ENTITY:CPPICanPhysgun(ply)
            return SERVER and gProtect.HandlePhysgunPermission(ply, self) or gProtect.HandlePermissions(ply, self, "weapon_physgun")
        end
    
        function ENTITY:CPPICanPickup(ply)
            return gProtect.HandlePermissions(ply, self, "weapon_physcannon")
        end
    
        function ENTITY:CPPICanPunt(ply)
            if cfg.enabled and (cfg.DisableGravityGunPunting or (IsValid(ent) and cfg.blockedEntities[ent:GetClass()])) then return false end

            return true
        end
    end
end

timer.Simple(3, function()
    overrideCPPI()
end)
--addons/gprotect_1.13.99/lua/g_protect/client/cl_gprotect.lua:
return gluapack()()
--addons/gprotect_1.13.99/lua/g_protect/languages/sh_english.lua:
if SERVER then
	slib.setLang("gprotect", "en", "colliding-too-much", "%s's entities are colliding too much, the trigger has a class of '%s' with %s collisions!")
	slib.setLang("gprotect", "en", "props-colliding-too-much", "%s's props are colliding too much with a total of %s collisions!")
	slib.setLang("gprotect", "en", "too-many-obstructs", "%s's entity is obstructing too many bad entities!")
	slib.setLang("gprotect", "en", "blacklisted-multiple", "You have successfully added %s models to the blocked models!")
	slib.setLang("gprotect", "en", "unblacklisted-multiple", "You have successfully removed %s models from the blocked models!")
	slib.setLang("gprotect", "en", "blacklisted-multiple-ent", "You have successfully added %s ents to the blacklisted entities!")
	slib.setLang("gprotect", "en", "unblacklisted-multiple-ent", "You have successfully removed %s ents from the blacklisted entities!")
	slib.setLang("gprotect", "en", "added-blacklist", "You have successfully added %s to the blocked models!")
	slib.setLang("gprotect", "en", "removed-blacklist", "You have successfully removed %s from the blocked models!")
	slib.setLang("gprotect", "en", "added-blacklist-ent", "You have successfully added %s to the entity blacklist!")
	slib.setLang("gprotect", "en", "removed-blacklist-ent", "You have successfully removed %s from the entity blacklist!")
	slib.setLang("gprotect", "en", "attempted-unfreeze-all", "%s has tried to unfreeze all after spawning a dupe!")
	slib.setLang("gprotect", "en", "attempted-upscaled-ent", "%s has tried to spawn an upscaled entity with adv dupe 2!")
	slib.setLang("gprotect", "en", "attempted-rope-spawning", "%s has tried to spawn ropes using adv dupe 2!")
	slib.setLang("gprotect", "en", "attempted-no-gravity", "%s has tried to spawn props with no gravity using adv dupe 2!")
	slib.setLang("gprotect", "en", "attempted-trail", "%s has tried to spawn props with trails using adv dupe 2!")
	slib.setLang("gprotect", "en", "attempted-advdupe-out-of-bounds", "%s has tried to spawn entities out of bounds using adv dupe 2!")
	slib.setLang("gprotect", "en", "attempted-advdupe-weird-angles", "%s has tried to spawn entities with weird angles using adv dupe 2!")
	slib.setLang("gprotect", "en", "attempted-instacrash-server", "%s may have attempted to insta-crash the server!")

	slib.setLang("gprotect", "en", "model-restricted", "This model has been restricted!")
	slib.setLang("gprotect", "en", "classname-restricted", "This entity class has been restricted!")
	slib.setLang("gprotect", "en", "attempted-blacklistedmaterial", "%s has attempted to use a blacklisted material with fading door!")
	slib.setLang("gprotect", "en", "spam-spawning", "%s is trying to spam spawning of entites/props.")

	slib.setLang("gprotect", "en", "too-complex-model", "This model has been restricted, it's too complex!")
	slib.setLang("gprotect", "en", "too-big-prop", "Your prop is too big so we removed it!")
	slib.setLang("gprotect", "en", "successfull-fpp-blockedmodels", "You have successfully transferred the blockedmodels from FPP to gProtect!")
	slib.setLang("gprotect", "en", "successfull-fpp-grouptools", "You have successfully transferred the grouptools from FPP to gProtect!")
	slib.setLang("gprotect", "en", "unsuccessfull-transfer", "There seems to be an issue while transferring the data over! (MySQL isnt supported)")

	slib.setLang("gprotect", "en", "blocked-secondaryusergroup", "Blocked due to secondary usergroup!")
	slib.setLang("gprotect", "en", "blocked-usergroup", "Blocked due to usergroup!")
	slib.setLang("gprotect", "en", "blocked-teamname", "Blocked due to team name!")
	slib.setLang("gprotect", "en", "blocked-sid", "Blocked due to SteamID!")

	slib.setLang("gprotect", "en", "you-ghosted-props", "You have ghosted %s's props!")
	slib.setLang("gprotect", "en", "you-frozen-props", "You have frozen %s's props!")
	slib.setLang("gprotect", "en", "you-removed-props", "You have removed %s's props!")
	slib.setLang("gprotect", "en", "you-removed-ents", "You have removed %s's entities!")

	slib.setLang("gprotect", "en", "props-ghosted", "Your props has been ghosted!")
	slib.setLang("gprotect", "en", "props-frozen", "Your props has been frozen!")
	slib.setLang("gprotect", "en", "props-removed", "Your props has been removed!")
	slib.setLang("gprotect", "en", "ents-removed", "Your entities has been removed!")

	slib.setLang("gprotect", "en", "everyones-props-ghosted", "Someone has ghosted everyones props!")
	slib.setLang("gprotect", "en", "everyones-props-frozen", "Someone has frozen everyones props!")
	slib.setLang("gprotect", "en", "disconnected-ents-removed", "You have removed every disconnected players entities!")

	slib.setLang("gprotect", "en", "spawn-to-close", "Your prop cannot be spawned inside someone!")
	slib.setLang("gprotect", "en", "entity-ghosted", "Your entity has been ghosted!")

	slib.setLang("gprotect", "en", "ratelimited_toolgun", "This tool has a ratelimit, please wait!")
	slib.setLang("gprotect", "en", "too_many_obstructs_purchase", "We have removed the entity and refunded you, there are too many obstructs!")

	slib.setLang("gprotect", "en", "mysql_successfull", "We have successfully connected to the database!")
    slib.setLang("gprotect", "en", "mysql_failed", "We have failed connecting to the database!")
elseif CLIENT then
	slib.setLang("gprotect", "en", "title", "gProtect - Settings")
	slib.setLang("gprotect", "en", "buddies-title", "gProtect - Buddies")

	slib.setLang("gprotect", "en", "world", "World")
	slib.setLang("gprotect", "en", "disconnected", "Disconnected")
	slib.setLang("gprotect", "en", "toolgun-name", "Blacklist Props")
	slib.setLang("gprotect", "en", "toolgun-desc", "Manage blocked models")
	slib.setLang("gprotect", "en", "toolgun-leftclick", "Add to blacklisted models")
	slib.setLang("gprotect", "en", "toolgun-rightclick", "Remove from blacklisted models")
	slib.setLang("gprotect", "en", "toolgun-help", "Shoot on a prop with the tool")
	slib.setLang("gprotect", "en", "remove-on-blacklist", "Remove prop on blacklist")
	slib.setLang("gprotect", "en", "player-list", "Player List")

	slib.setLang("gprotect", "en", "submit", "Submit")
	slib.setLang("gprotect", "en", "input_number", "Input number")

	slib.setLang("gprotect", "en", "toolgun", "Toolgun")
	slib.setLang("gprotect", "en", "physgun", "Physgun")
	slib.setLang("gprotect", "en", "gravity-gun", "Gravity Gun")
	slib.setLang("gprotect", "en", "canproperty", "Can Property")
	slib.setLang("gprotect", "en", "canuse", "Can Use")

	slib.setLang("gprotect", "en", "add-blocked-models", "Add to blocked models")
	slib.setLang("gprotect", "en", "remove-blocked-models", "Remove from blocked models")

	slib.setLang("gprotect", "en", "add-blacklisted-ents", "Add to blacklisted entities")
	slib.setLang("gprotect", "en", "remove-blacklisted-ents", "Remove from blacklisted entities")
	slib.setLang("gprotect", "en", "copy-clipboard", "Copy to clipboard")

	slib.setLang("gprotect", "en", "general", "General")
	slib.setLang("gprotect", "en", "ghosting", "Ghosting")
	slib.setLang("gprotect", "en", "damage", "Damage")
	slib.setLang("gprotect", "en", "anticollide", "Anti Collide")
	slib.setLang("gprotect", "en", "spamprotection", "Spam Protection")
	slib.setLang("gprotect", "en", "spawnrestriction", "Spawn Restriction")
	slib.setLang("gprotect", "en", "toolgunsettings", "Toolgun Settings")
	slib.setLang("gprotect", "en", "physgunsettings", "Physgun Settings")
	slib.setLang("gprotect", "en", "gravitygunsettings", "Gravgun Settings")
	slib.setLang("gprotect", "en", "canpropertysettings", "Can Property Settings")
	slib.setLang("gprotect", "en", "canusesettings", "Can Use Settings")
	slib.setLang("gprotect", "en", "advdupe2", "Adv Dupe 2")
	slib.setLang("gprotect", "en", "miscs", "Miscs")

	slib.setLang("gprotect", "en", "ghost-props", "Ghost Props")
	slib.setLang("gprotect", "en", "remove-props", "Remove Props")
	slib.setLang("gprotect", "en", "freeze-props", "Freeze Props")
	slib.setLang("gprotect", "en", "remove-entities", "Remove Entities")
	slib.setLang("gprotect", "en", "highlight-ents", "Highlight Entities")
	slib.setLang("gprotect", "en", "unhighlight-ents", "Unhighlight Entities")

	slib.setLang("gprotect", "en", "ghost-everyones-props", "Ghost everyones props")
	slib.setLang("gprotect", "en", "freeze-everyones-props", "Freeze everyones props")
	slib.setLang("gprotect", "en", "remove-disconnected-entities", "Remove disconnected players entities")

	slib.setLang("gprotect", "en", "general_remDiscPlyEnt", "Remove disconnect players entities")
	slib.setLang("gprotect", "en", "general_remDiscPlyEnt_tooltip", "This removes disconnected players entities on timer (If -1 it will be disabled)")
	slib.setLang("gprotect", "en", "general_remDiscPlyEntSpecific", "Remove disconnected players entities specific")
	slib.setLang("gprotect", "en", "general_remDiscPlyEntSpecific_tooltip", "Specific time for removal of entities, if nothing specified it will use the default one specified above. Making it -1 for classname will ignore it fully")

	slib.setLang("gprotect", "en", "general_remOutOfBounds", "Remove out of bounds timer")
	slib.setLang("gprotect", "en", "general_remOutOfBounds_tooltip", "This will remove entities that are outside of the map (If -1 it will be disabled)")
	slib.setLang("gprotect", "en", "general_remOutOfBoundsWhitelist", "Remove out of bounds whitelist")
	slib.setLang("gprotect", "en", "general_remOutOfBoundsWhitelist_tooltip", "Entities in this list will be removed if out of bounds.")

	slib.setLang("gprotect", "en", "general_blacklist", "Blacklist")
	slib.setLang("gprotect", "en", "general_blacklist_tooltip", "This is where add classnames that should be protected by generally all the modules.")
	slib.setLang("gprotect", "en", "general_protectedFrozenEnts", "Protected frozen entities")
	slib.setLang("gprotect", "en", "general_protectedFrozenEnts_tooltip", "This is the list of entities to protect whilst frozen")
	slib.setLang("gprotect", "en", "general_protectedFrozenGroup", "Protected frozen group")
	slib.setLang("gprotect", "en", "general_protectedFrozenGroup_tooltip", "This is the collision group to put frozen entities in!")

	slib.setLang("gprotect", "en", "ghosting_enabled", "Enabled")
	slib.setLang("gprotect", "en", "ghosting_enabled_tooltip", "Enable the ghosting module?")
	slib.setLang("gprotect", "en", "ghosting_ghostColor", "Ghosting color")
	slib.setLang("gprotect", "en", "ghosting_ghostColor_tooltip", "Select a color for ghosted entities")
	slib.setLang("gprotect", "en", "ghosting_antiObscuring", "Anti-obscuring")
	slib.setLang("gprotect", "en", "ghosting_antiObscuring_tooltip", "This will prevent the props from being unghosted while they obscure an object, Simply add entities that shouldnt be obscured!")
	slib.setLang("gprotect", "en", "ghosting_obscureOffset", "Anti-obscuring offset")
	slib.setLang("gprotect", "en", "ghosting_obscureOffset_tooltip", "This offset is used to add a gap outside of the bounding box that will trigger obscuring.")
	slib.setLang("gprotect", "en", "ghosting_onPhysgun", "Ghost on physgun?")
	slib.setLang("gprotect", "en", "ghosting_onPhysgun_tooltip", "This will ghost entities while being physgunned.")
	slib.setLang("gprotect", "en", "ghosting_useBlacklist", "Use blacklist")
	slib.setLang("gprotect", "en", "ghosting_useBlacklist_tooltip", "This option will ghost the blacklisted items from the blacklist if the module is enabled.")
	slib.setLang("gprotect", "en", "ghosting_entities", "Entities")
	slib.setLang("gprotect", "en", "ghosting_entities_tooltip", "Classnames in this list will be ghosted, this wont modify the blacklist usable by other modules.")
	slib.setLang("gprotect", "en", "ghosting_forceUnfrozen", "Force ghost unfrozen ents")
	slib.setLang("gprotect", "en", "ghosting_forceUnfrozen_tooltip", "This will force ghost entities that arent frozen.")
	slib.setLang("gprotect", "en", "ghosting_forceUnfrozenEntities", "Force ghost unfrozen ents whitelist")
	slib.setLang("gprotect", "en", "ghosting_forceUnfrozenEntities_tooltip", "The entities in this list will be ghosted if not frozen.")
	slib.setLang("gprotect", "en", "ghosting_enableMotion", "Enable motion while ghosted")
	slib.setLang("gprotect", "en", "ghosting_fenableMotion_tooltip", "If enabled ghosting will not disable motion for entities.")

	slib.setLang("gprotect", "en", "damage_enabled", "Enabled")
	slib.setLang("gprotect", "en", "damage_enabled_tooltip", "Enable the damage module?")
	slib.setLang("gprotect", "en", "damage_useBlacklist", "Use blacklist")
	slib.setLang("gprotect", "en", "damage_useBlacklist_tooltip", "This option will consider the general blacklist as a blacklisted ent in this module!")
	slib.setLang("gprotect", "en", "damage_entities", "Blacklisted Entities")
	slib.setLang("gprotect", "en", "damage_entities_tooltip", "Classnames in this list wont deal damage if the disable damage is ticked, this wont modify the blacklist usable by other modules.")
	slib.setLang("gprotect", "en", "damage_blacklistedEntPlayerDamage", "Disable blacklisted ents damage")
	slib.setLang("gprotect", "en", "damage_blacklistedEntPlayerDamage_tooltip", "If this is ticked then players wont receive damage from blacklisted entities.")
	slib.setLang("gprotect", "en", "damage_vehiclePlayerDamage", "Disable vehicle damage")
	slib.setLang("gprotect", "en", "damage_vehiclePlayerDamage_tooltip", "If this is ticked then players wont receive damage by vehicles.")
	slib.setLang("gprotect", "en", "damage_worldPlayerDamage", "Disable world damage")
	slib.setLang("gprotect", "en", "damage_worldPlayerDamage_tooltip", "If this is ticked then players wont receive damage from 'world', this can break certain addons unless they set damage to come from an entity.")
	slib.setLang("gprotect", "en", "damage_immortalEntities", "Immortal Entities")
	slib.setLang("gprotect", "en", "damage_immortalEntities_tooltip", "Classnames in this list wont take damage, except if the player is in the bypass group!")
	slib.setLang("gprotect", "en", "damage_bypassGroups", "Bypass groups")
	slib.setLang("gprotect", "en", "damage_bypassGroups_tooltip", "Add usergroups in this list to bypass do damage restrictions, '*' means everyone!")
	slib.setLang("gprotect", "en", "damage_canDamageWorldEntities", "Can damage world entities")
	slib.setLang("gprotect", "en", "damage_canDamageWorldEntities_tooltip", "The groups that are in this list can damage world entities, '*' means everyone!")

	slib.setLang("gprotect", "en", "anticollide_enabled", "Enabled")
	slib.setLang("gprotect", "en", "anticollide_enabled_tooltip", "Enable the anticollide module?")
	slib.setLang("gprotect", "en", "anticollide_notifyStaff", "Notify staff")
	slib.setLang("gprotect", "en", "anticollide_notifyStaff_tooltip", "Should detections notify staff? NB:This can be used to piss staff.")
	slib.setLang("gprotect", "en", "anticollide_protectDarkRPEntities", "Protect DarkRP Entities")
	slib.setLang("gprotect", "en", "anticollide_protectDarkRPEntities_tooltip", "Should we protect DarkRP Entities? (0 = Disabled, 1 = Ghost, 2 = Freeze, 3 = Remove, 4 = Remove & Refund)")
	slib.setLang("gprotect", "en", "anticollide_DRPentitiesThreshold", "DRP entities threshold")
	slib.setLang("gprotect", "en", "anticollide_DRPentitiesThreshold_tooltip", "How many collisions can a prop have before being triggered within 1 second?")
	slib.setLang("gprotect", "en", "anticollide_DRPentitiesException", "DRP entities exception")
	slib.setLang("gprotect", "en", "anticollide_DRPentitiesException_tooltip", "Which collisions do we ignore? (0 = None, 1 = Not Same Owner, 2 = No Owner)")
	slib.setLang("gprotect", "en", "anticollide_protectSpawnedEntities", "Protect Spawned Entities")
	slib.setLang("gprotect", "en", "anticollide_protectSpawnedEntities_tooltip", "Should we protect Spawned Entities? (0 = Disabled, 1 = Ghost, 2 = Freeze, 3 = Remove)")
	slib.setLang("gprotect", "en", "anticollide_entitiesThreshold", "Spawned entities threshold")
	slib.setLang("gprotect", "en", "anticollide_entitiesThreshold_tooltip", "How many collisions can a prop have before being triggered within 1 second?")
	slib.setLang("gprotect", "en", "anticollide_entitiesException", "Spawned entities exception")
	slib.setLang("gprotect", "en", "anticollide_entitiesException_tooltip", "Which collisions do we ignore? (0 = None, 1 = Not Same Owner, 2 = No Owner)")
	slib.setLang("gprotect", "en", "anticollide_protectSpawnedProps", "Protect Spawned Props")
	slib.setLang("gprotect", "en", "anticollide_protectSpawnedProps_tooltip", "Should we protect Spawned Props? (0 = Disabled, 1 = Ghost, 2 = Freeze, 3 = Remove, 4 = Ghost & Unghost)")
	slib.setLang("gprotect", "en", "anticollide_propsThreshold", "Spawned props threshold")
	slib.setLang("gprotect", "en", "anticollide_propsThreshold_tooltip", "How many collisions can a prop have before being triggered within 1 second?")
	slib.setLang("gprotect", "en", "anticollide_propsException", "Spawned props exception")
	slib.setLang("gprotect", "en", "anticollide_propsException_tooltip", "Which collisions do we ignore? (0 = None, 1 = Not Same Owner, 2 = No Owner)")
	slib.setLang("gprotect", "en", "anticollide_playerPropAction", "Player specific props action")
	slib.setLang("gprotect", "en", "anticollide_playerPropAction_tooltip", "What action do we do once threshold is reached? (0 = Disabled, 1 = Ghost, 2 = Freeze, 3 = Remove, 4 = Ghost & Unghost)")
	slib.setLang("gprotect", "en", "anticollide_playerPropThreshold", "Player specific props threshold")
	slib.setLang("gprotect", "en", "anticollide_playerPropThreshold_tooltip", "This is the max collisions a player's props can have per second this will target all of their props! This only registers their own props as a collision.")
	slib.setLang("gprotect", "en", "anticollide_useBlacklist", "Use blacklist")
	slib.setLang("gprotect", "en", "anticollide_useBlacklist_tooltip", "The blacklisted entities will be ghosted if the collide to much if this is enabled.")
	slib.setLang("gprotect", "en", "anticollide_ghostEntities", "Entities")
	slib.setLang("gprotect", "en", "anticollide_ghostEntities_tooltip", "Classnames in this list will be ghosted if they collide to much.")
	slib.setLang("gprotect", "en", "anticollide_specificEntities", "Specific entities")
	slib.setLang("gprotect", "en", "anticollide_specificEntities_tooltip", "Add classnames in here to make specific rules for them, meaning that the number here will be their threshold anything below 0 will count them as bypass.")
	slib.setLang("gprotect", "en", "anticollide_squaredPhysicsMaxSize", "Squared physics max size")
	slib.setLang("gprotect", "en", "anticollide_squaredPhysicsMaxSize_tooltip", "This is a global protection which will automatically make complex and smaller collsionboxes into squares, this is effective at prventing mid sized spheres from causing lag.")
	slib.setLang("gprotect", "en", "anticollide_squaredPhysicsEnts", "Squared physics ents")
	slib.setLang("gprotect", "en", "anticollide_squaredPhysicsEnts_tooltip", "This is a global anti collide feature, which makes entities sleep after they hit the defined threshold (Threshold is cleared every 1 secound)")

	slib.setLang("gprotect", "en", "spamprotection_enabled", "Enabled")
	slib.setLang("gprotect", "en", "spamprotection_enabled_tooltip", "Enable the spamprotection module?")
	slib.setLang("gprotect", "en", "spamprotection_threshold", "Threshold")
	slib.setLang("gprotect", "en", "spamprotection_threshold_tooltip", "If you spawn these many props at once then it will kick in unless the delay defined below has cleared.")
	slib.setLang("gprotect", "en", "spamprotection_delay", "Delay")
	slib.setLang("gprotect", "en", "spamprotection_delay_tooltip", "This timer will clear the threshold above.")
	slib.setLang("gprotect", "en", "spamprotection_action", "Punishment")
	slib.setLang("gprotect", "en", "spamprotection_action_tooltip", "This will decide how to deal with spammers! (1 = disallow spawning, 2 = ghost entity/prop)")
	slib.setLang("gprotect", "en", "spamprotection_notifyStaff", "Notify staff")
	slib.setLang("gprotect", "en", "spamprotection_notifyStaff_tooltip", "Should detections notify staff? NB:This can be used to piss staff.")
	slib.setLang("gprotect", "en", "spamprotection_protectProps", "Protect Props")
	slib.setLang("gprotect", "en", "spamprotection_protectProps_tooltip", "This will protect props from being spam spawned.")
	slib.setLang("gprotect", "en", "spamprotection_protectEntities", "Protect Entities")
	slib.setLang("gprotect", "en", "spamprotection_protectEntities_tooltip", "This will protect entities from being spam spawned.")

	slib.setLang("gprotect", "en", "spawnrestriction_enabled", "Enabled")
	slib.setLang("gprotect", "en", "spawnrestriction_enabled_tooltip", "Enable the spawnrestriction module?")
	slib.setLang("gprotect", "en", "spawnrestriction_propSpawnPermission", "Prop spawn permissions")
	slib.setLang("gprotect", "en", "spawnrestriction_propSpawnPermission_tooltip", "This will limit spawning props totally! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "spawnrestriction_SENTSpawnPermission", "SENT spawn permissions")
	slib.setLang("gprotect", "en", "spawnrestriction_SENTSpawnPermission_tooltip", "This will limit spawning SENTS totally! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "spawnrestriction_SWEPSpawnPermission", "SWEP spawn permissions")
	slib.setLang("gprotect", "en", "spawnrestriction_SWEPSpawnPermission_tooltip", "This will limit spawning SWEP totally! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "spawnrestriction_vehicleSpawnPermission", "Vehicle spawn permissions")
	slib.setLang("gprotect", "en", "spawnrestriction_vehicleSpawnPermission_tooltip", "This will limit spawning vehicle totally! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "spawnrestriction_NPCSpawnPermission", "NPC spawn permissions")
	slib.setLang("gprotect", "en", "spawnrestriction_NPCSpawnPermission_tooltip", "This will limit spawning NPC totally! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "spawnrestriction_ragdollSpawnPermission", "Ragdoll spawn permissions")
	slib.setLang("gprotect", "en", "spawnrestriction_ragdollSpawnPermission_tooltip", "This will limit spawning ragdoll totally! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "spawnrestriction_effectSpawnPermission", "Effect spawn permissions")
	slib.setLang("gprotect", "en", "spawnrestriction_effectSpawnPermission_tooltip", "This will limit spawning effects totally! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "spawnrestriction_blockedEntities", "Blocked entities")
	slib.setLang("gprotect", "en", "spawnrestriction_blockedEntities_tooltip", "Place classnames of entities that should never be spawned in here, this also works for SWEPs!")
	slib.setLang("gprotect", "en", "spawnrestriction_blockedEntitiesIsBlacklist", "Blocked entities is a blacklist")
	slib.setLang("gprotect", "en", "spawnrestriction_blockedEntitiesIsBlacklist_tooltip", "If ticked it will make the classes in the list blocked from being spawned, otherwise you can only spawn those classes.")
	slib.setLang("gprotect", "en", "spawnrestriction_blockedModels", "Blocked models")
	slib.setLang("gprotect", "en", "spawnrestriction_blockedModels_tooltip", "Place model names so props with the model name wont spawn!")
	slib.setLang("gprotect", "en", "spawnrestriction_blockedModelsisBlacklist", "Blocked models is a blacklist")
	slib.setLang("gprotect", "en", "spawnrestriction_blockedModelsisBlacklist_tooltip", "If ticked it will make the models in the list blocked from being spawned, otherwise you can only spawn those models.")
	slib.setLang("gprotect", "en", "spawnrestriction_blockedModelsVehicleBypass", "Spawn vehicle bypass blocked models")
	slib.setLang("gprotect", "en", "spawnrestriction_blockedModelsVehicleBypass_tooltip", "If ticked vehicles will ignore the blocked models list.")
	slib.setLang("gprotect", "en", "spawnrestriction_bypassGroups", "Bypass groups")
	slib.setLang("gprotect", "en", "spawnrestriction_bypassGroups_tooltip", "These groups will be able to bypass the blocked sents and models.")
	slib.setLang("gprotect", "en", "spawnrestriction_maxPropModelComplexity", "Max prop model complexity")
	slib.setLang("gprotect", "en", "spawnrestriction_maxPropModelComplexity_tooltip", "This will prevent from spawning models with complex shapes, recommended value is 10. (0 = Disabled)")
	slib.setLang("gprotect", "en", "spawnrestriction_maxModelSize", "Max model size")
	slib.setLang("gprotect", "en", "spawnrestriction_maxModelSize_tooltip", "If this is above 0 it will remove bigger props right after they are spawned.")

	slib.setLang("gprotect", "en", "toolgunsettings_enabled", "Enabled")
	slib.setLang("gprotect", "en", "toolgunsettings_enabled_tooltip", "Enable the toolgunsettings module?")
	slib.setLang("gprotect", "en", "toolgunsettings_targetWorld", "Can target world entities")
	slib.setLang("gprotect", "en", "toolgunsettings_targetWorld_tooltip", "This means that they can target world entities! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "toolgunsettings_targetPlayerOwned", "Can target player owned entities")
	slib.setLang("gprotect", "en", "toolgunsettings_targetPlayerOwned_tooltip", "This means that they can target players entities! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "toolgunsettings_targetPlayerOwnedProps", "Can target player owned props")
	slib.setLang("gprotect", "en", "toolgunsettings_targetPlayerOwnedProps_tooltip", "This means that they can target players props! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "toolgunsettings_targetVehiclePermission", "Target vehicle permission")
	slib.setLang("gprotect", "en", "toolgunsettings_targetVehiclePermission_tooltip", "If people are in the usergroups in this list they can use toolgun on vehicles!")

	slib.setLang("gprotect", "en", "toolgunsettings_restrictTools", "Restricted tools")
	slib.setLang("gprotect", "en", "toolgunsettings_restrictTools_tooltip", "The tools in here wont be usable by anyone but the ones in the bypassGroups option below.")
	slib.setLang("gprotect", "en", "toolgunsettings_groupToolRestrictions", "Group tool restrictions")
	slib.setLang("gprotect", "en", "toolgunsettings_groupToolRestrictions_tooltip", "Configure tool restrictions by tool, you can define with the following types: SteamID, Usergroup & Job name! (Whitelists has privlege over blacklists)")
	slib.setLang("gprotect", "en", "toolgunsettings_bypassGroups", "Bypass groups")
	slib.setLang("gprotect", "en", "toolgunsettings_bypassGroups_tooltip", "Groups in here will bypass the tool restrictions from the lists above!")
	slib.setLang("gprotect", "en", "toolgunsettings_entityTargetability", "Entity targetability")
	slib.setLang("gprotect", "en", "toolgunsettings_entityTargetability_tooltip", "This is neat to make it so people can only use the toolgun on their props for example!")
	slib.setLang("gprotect", "en", "toolgunsettings_bypassTargetabilityTools", "Bypass targetability tools")
	slib.setLang("gprotect", "en", "toolgunsettings_bypassTargetabilityTools_tooltip", "The tools in this list will bypass the targetability settings!")
	slib.setLang("gprotect", "en", "toolgunsettings_bypassTargetabilityGroups", "Bypass targetability groups")
	slib.setLang("gprotect", "en", "toolgunsettings_bypassTargetabilityGroups_tooltip", "The groups in this list will bypass the targetability settings!")
	slib.setLang("gprotect", "en", "toolgunsettings_antiSpam", "Anti spam")
	slib.setLang("gprotect", "en", "toolgunsettings_antiSpam_tooltip", "Add tools in here and specify how many times they can use the tool per second!")

	slib.setLang("gprotect", "en", "physgunsettings_enabled", "Enabled")
	slib.setLang("gprotect", "en", "physgunsettings_enabled_tooltip", "Enable the physgun settings module?")
	slib.setLang("gprotect", "en", "physgunsettings_targetWorld", "Can target world entities")
	slib.setLang("gprotect", "en", "physgunsettings_targetWorld_tooltip", "This means that they can target world entities! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "physgunsettings_targetPlayerOwned", "Can target player owned entities")
	slib.setLang("gprotect", "en", "physgunsettings_targetPlayerOwned_tooltip", "This means that they can target players entities! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "physgunsettings_targetPlayerOwnedProps", "Can target player owned props")
	slib.setLang("gprotect", "en", "physgunsettings_targetPlayerOwnedProps_tooltip", "This means that they can target players props! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "physgunsettings_DisableReloadUnfreeze", "Disable reload unfreeze")
	slib.setLang("gprotect", "en", "physgunsettings_DisableReloadUnfreeze_tooltip", "This will prevent people from unfreezing props using reload.")
	slib.setLang("gprotect", "en", "physgunsettings_PickupVehiclePermission", "Pickup vehicle permission")
	slib.setLang("gprotect", "en", "physgunsettings_PickupVehiclePermission_tooltip", "If people are in the usergroups in this list they can pickup vehicles!")
	slib.setLang("gprotect", "en", "physgunsettings_StopMotionOnDrop", "Stop motion on drop")
	slib.setLang("gprotect", "en", "physgunsettings_StopMotionOnDrop_tooltip", "This will prevent proppushing/propkilling.")
	slib.setLang("gprotect", "en", "physgunsettings_blockMultiplePhysgunning", "Block multiple physgunning")
	slib.setLang("gprotect", "en", "physgunsettings_blockMultiplePhysgunning_tooltip", "This will block an entity that is being physgunned from being physgunned by someone else!")
	slib.setLang("gprotect", "en", "physgunsettings_maxDropObstructs", "Max obstruct threshold")
	slib.setLang("gprotect", "en", "physgunsettings_maxDropObstructs_tooltip", "This is the threshold of how many obsctructs from blacklisted entities till it triggers!")
	slib.setLang("gprotect", "en", "physgunsettings_maxDropObstructsAction", "Max obstruct trigger action")
	slib.setLang("gprotect", "en", "physgunsettings_maxDropObstructsAction_tooltip", "This is the how to threat triggers (1 = Ghost, 2 = Freeze, 3 = Remove)")
	slib.setLang("gprotect", "en", "physgunsettings_preventPropClimbing", "Prevent prop climbing")
	slib.setLang("gprotect", "en", "physgunsettings_preventPropClimbing_tooltip", "This is a feature ment to make it more difficult to prop climb with a single prop.")
	slib.setLang("gprotect", "en", "physgunsettings_preventPropClimbingThreshold", "Prop climbing threshold")
	slib.setLang("gprotect", "en", "physgunsettings_preventPropClimbingThreshold_tooltip", "How many triggers should we allow per 10 seconds?")
	slib.setLang("gprotect", "en", "physgunsettings_preventPropClimbingAction", "Prop climbing trigger action")
	slib.setLang("gprotect", "en", "physgunsettings_preventPropClimbingAction_tooltip", "This is the how to threat triggers (1 = Ghost, 2 = Remove)")
	slib.setLang("gprotect", "en", "physgunsettings_blockedEntities", "Blocked entities")
	slib.setLang("gprotect", "en", "physgunsettings_blockedEntities_tooltip", "Add entities into this and it wont be physgunable by anyone that isnt in the bypass group.")
	slib.setLang("gprotect", "en", "physgunsettings_bypassGroups", "Bypass groups")
	slib.setLang("gprotect", "en", "physgunsettings_bypassGroups_tooltip", "Add usergroups in this list to bypass the blocked entities, '*' means everyone!")

	slib.setLang("gprotect", "en", "gravitygunsettings_enabled", "Enabled")
	slib.setLang("gprotect", "en", "gravitygunsettings_enabled_tooltip", "Enable the gravity gun settings module?")
	slib.setLang("gprotect", "en", "gravitygunsettings_targetWorld", "Can target world entities")
	slib.setLang("gprotect", "en", "gravitygunsettings_targetWorld_tooltip", "This means that they can target world entities! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "gravitygunsettings_targetPlayerOwned", "Can target player owned entities")
	slib.setLang("gprotect", "en", "gravitygunsettings_targetPlayerOwned_tooltip", "This means that they can target players entities! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "gravitygunsettings_targetPlayerOwnedProps", "Can target player owned props")
	slib.setLang("gprotect", "en", "gravitygunsettings_targetPlayerOwnedProps_tooltip", "This means that they can target players props! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "gravitygunsettings_DisableGravityGunPunting", "Disable gravity gun punting")
	slib.setLang("gprotect", "en", "gravitygunsettings_DisableGravityGunPunting_tooltip", "This is the throwing attack of the gravity gun.")
	slib.setLang("gprotect", "en", "gravitygunsettings_blockedEntities", "Blocked entities")
	slib.setLang("gprotect", "en", "gravitygunsettings_blockedEntities_tooltip", "Add entities into this and it cant be picked up by anyone that isnt in the bypass group.")
	slib.setLang("gprotect", "en", "gravitygunsettings_bypassGroups", "Bypass groups")
	slib.setLang("gprotect", "en", "gravitygunsettings_bypassGroups_tooltip", "Add usergroups in this list to bypass the blocked entities, '*' means everyone!")

	slib.setLang("gprotect", "en", "canpropertysettings_enabled", "Enabled")
	slib.setLang("gprotect", "en", "canpropertysettings_enabled_tooltip", "Enable the can property settings module?")
	slib.setLang("gprotect", "en", "canpropertysettings_targetWorld", "Can target world entities")
	slib.setLang("gprotect", "en", "canpropertysettings_targetWorld_tooltip", "This means that they can target world entities! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "canpropertysettings_targetPlayerOwned", "Can target player owned entities")
	slib.setLang("gprotect", "en", "canpropertysettings_targetPlayerOwned_tooltip", "This means that they can target players entities! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "canpropertysettings_targetPlayerOwnedProps", "Can target player owned props")
	slib.setLang("gprotect", "en", "canpropertysettings_targetPlayerOwnedProps_tooltip", "This means that they can target players props! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "canpropertysettings_blockedProperties", "Blocked properties")
	slib.setLang("gprotect", "en", "canpropertysettings_blockedProperties_tooltip", "Add properties to this list")
	slib.setLang("gprotect", "en", "canpropertysettings_blockedPropertiesisBlacklist", "Blocked properties is blacklist")
	slib.setLang("gprotect", "en", "canpropertysettings_blockedPropertiesisBlacklist_tooltip", "If ticked it will block the properties in the list from being used, otherwise you can only use those properties.")
	slib.setLang("gprotect", "en", "canpropertysettings_blockedEntities", "Blocked entities")
	slib.setLang("gprotect", "en", "canpropertysettings_blockedEntities_tooltip", "Add entities into this and it wont be targetable by anyone except for people in the bypass group!")
	slib.setLang("gprotect", "en", "canpropertysettings_bypassGroups", "Bypass groups")
	slib.setLang("gprotect", "en", "canpropertysettings_bypassGroups_tooltip", "Groups in here will bypass the can property restriction list from above!")

	slib.setLang("gprotect", "en", "canusesettings_enabled", "Enabled")
	slib.setLang("gprotect", "en", "canusesettings_enabled_tooltip", "Enable the can use settings module?")
	slib.setLang("gprotect", "en", "canusesettings_targetWorld", "Can target world entities")
	slib.setLang("gprotect", "en", "canusesettings_targetWorld_tooltip", "This means that they can target world entities! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "canusesettings_targetPlayerOwned", "Can target player owned entities")
	slib.setLang("gprotect", "en", "canusesettings_targetPlayerOwned_tooltip", "This means that they can target players entities! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "canusesettings_targetPlayerOwnedProps", "Can target player owned props")
	slib.setLang("gprotect", "en", "canusesettings_targetPlayerOwnedProps_tooltip", "This means that they can target players props! (Add usergroups in here to allow them, * means everyone!)")
	slib.setLang("gprotect", "en", "canusesettings_blockedEntities", "Blocked entities")
	slib.setLang("gprotect", "en", "canusesettings_blockedEntities_tooltip", "Add entities into this and it cant be used by anyone that isnt in the bypass group.")
	slib.setLang("gprotect", "en", "canusesettings_blockedEntitiesisBlacklist", "Blocked entities is blacklist")
	slib.setLang("gprotect", "en", "canusesettings_blockedEntitiesisBlacklist_tooltip", "If ticked it will block the entities in the list from being used, otherwise you can only use those entities.")
	slib.setLang("gprotect", "en", "canusesettings_bypassGroups", "Bypass groups")
	slib.setLang("gprotect", "en", "canusesettings_bypassGroups_tooltip", "Add usergroups in this list to bypass the blocked entities, '*' means everyone!")

	slib.setLang("gprotect", "en", "advdupe2_enabled", "Enabled")
	slib.setLang("gprotect", "en", "advdupe2_enabled_tooltip", "Should detections notify staff? NB:This can be used to piss staff.")
	slib.setLang("gprotect", "en", "advdupe2_notifyStaff", "Notify staff")
	slib.setLang("gprotect", "en", "advdupe2_notifyStaff_tooltip", "Should detections notify staff? NB:This can be used to piss staff.")
	slib.setLang("gprotect", "en", "advdupe2_PreventRopes", "Prevent rope spawning")
	slib.setLang("gprotect", "en", "advdupe2_PreventRopes_tooltip", "Prevent ropes from spawning! (1 = Prevent Spawning, 2 = Spawn But Fix)")
	slib.setLang("gprotect", "en", "advdupe2_PreventScaling", "Prevent scaling")
	slib.setLang("gprotect", "en", "advdupe2_PreventScaling_tooltip", "Prevent Upscaled Props from spawning. (1 = Prevent Spawning, 2 = Spawn But Fix)")
	slib.setLang("gprotect", "en", "advdupe2_PreventNoGravity", "Prevent no gravity")
	slib.setLang("gprotect", "en", "advdupe2_PreventNoGravity_tooltip", "Prevent spawning props with no gravity. (1 = Prevent Spawning, 2 = Spawn But Fix)")
	slib.setLang("gprotect", "en", "advdupe2_PreventTrail", "Prevent trails")
	slib.setLang("gprotect", "en", "advdupe2_PreventTrail_tooltip", "Prevent spawning props with trails. (1 = Prevent Spawning, 2 = Spawn But Fix)")
	slib.setLang("gprotect", "en", "advdupe2_PreventUnreasonableValues", "Prevent unreasonable values")
	slib.setLang("gprotect", "en", "advdupe2_PreventUnreasonableValues_tooltip", "Prevent entities with unreasonable values, this means position and or angles.")
	slib.setLang("gprotect", "en", "advdupe2_PreventUnfreezeAll", "Prevent unfreeze all")
	slib.setLang("gprotect", "en", "advdupe2_PreventUnfreezeAll_tooltip", "Prevent people from unfreezing all props.")
	slib.setLang("gprotect", "en", "advdupe2_BlacklistedCollisionGroups", "Blacklisted collision groups")
	slib.setLang("gprotect", "en", "advdupe2_BlacklistedCollisionGroups_tooltip", "This protects from props that you cannot target. NB:Values has to be collision ENUMs")
	slib.setLang("gprotect", "en", "advdupe2_WhitelistedConstraints", "Whitelisted constraints")
	slib.setLang("gprotect", "en", "advdupe2_WhitelistedConstraints_tooltip", "This is to prevent any unwanted constraints from being spawned.")
	slib.setLang("gprotect", "en", "advdupe2_whitelistedClasses", "Whitelisted entities")
	slib.setLang("gprotect", "en", "advdupe2_whitelistedClasses_tooltip", "This is a whitelist for SENTs to be spawned.")
	slib.setLang("gprotect", "en", "advdupe2_DelayBetweenUse", "Delay between use")
	slib.setLang("gprotect", "en", "advdupe2_DelayBetweenUse_tooltip", "This will prevent the people from spamming the tool, preventing lag. (0 = Disabled)")

	slib.setLang("gprotect", "en", "miscs_enabled", "Enabled")
	slib.setLang("gprotect", "en", "miscs_enabled_tooltip", "Enable the miscs module?")
	slib.setLang("gprotect", "en", "miscs_ClearDecals", "Clear decals timer")
	slib.setLang("gprotect", "en", "miscs_ClearDecals_tooltip", "Timer in seconds this will clear the decals for all the players on a timer :)")
	slib.setLang("gprotect", "en", "miscs_blacklistedFadingDoorMats_punishment", "Punishment blacklisted fading door mats")
	slib.setLang("gprotect", "en", "miscs_blacklistedFadingDoorMats_punishment_tooltip", "Int this will punish people for trying to use blacklisted mats (0 = Nothing, 1 = Notify, 2 = kick, 3 = ban).")
	slib.setLang("gprotect", "en", "miscs_blacklistedFadingDoorMats", "Blacklisted fading door mats")
	slib.setLang("gprotect", "en", "miscs_blacklistedFadingDoorMats_tooltip", "Add bad materials into this list, 'pp/copy' and 'dev/upscale' for example.")
	slib.setLang("gprotect", "en", "miscs_FadingDoorLag", "Prevent fading door lag")
	slib.setLang("gprotect", "en", "miscs_FadingDoorLag_tooltip", "This will prevent people from crashing the server with fading door tool.")
	slib.setLang("gprotect", "en", "miscs_DisableMotion", "Disable motion")
	slib.setLang("gprotect", "en", "miscs_DisableMotion_tooltip", "This will disable the motion for all blacklisted entities.")
	slib.setLang("gprotect", "en", "miscs_DisableMotionEntities", "Disable motion entities")
	slib.setLang("gprotect", "en", "miscs_DisableMotionEntities_tooltip", "Entities in this list cannot be unfrozen.")
	slib.setLang("gprotect", "en", "miscs_freezeOnSpawn", "Freeze on spawn")
	slib.setLang("gprotect", "en", "miscs_freezeOnSpawn_tooltip", "This will freeze props on spawn")
	slib.setLang("gprotect", "en", "miscs_preventFadingDoorAbuse", "Prevent fading door abuse")
	slib.setLang("gprotect", "en", "miscs_preventFadingDoorAbuse_tooltip", "This will prevent obscuring people in fading doors")
	slib.setLang("gprotect", "en", "miscs_precisionMoveFix", "Prevent precision move abuse")
	slib.setLang("gprotect", "en", "miscs_precisionMoveFix_tooltip", "Prevents the move mode from being abused, could be used to bypass anti-obscuring and such.")
	slib.setLang("gprotect", "en", "miscs_preventSpawnNearbyPlayer", "Prevent spawn nearby player")
	slib.setLang("gprotect", "en", "miscs_preventSpawnNearbyPlayer_tooltip", "If someone are closer to the spawn position than this value it wont spawn the prop (0 Means disabled)")
	slib.setLang("gprotect", "en", "miscs_DRPEntForceOwnership", "Force ownership on DarkRP Entities")
	slib.setLang("gprotect", "en", "miscs_DRPEntForceOwnership_tooltip", "This will force the ownership of entities bought in the F4 Menu")
	slib.setLang("gprotect", "en", "miscs_DRPMaxObstructsOnPurchaseEnts", "Max obstructs on purchase for DarkRP Ents")
	slib.setLang("gprotect", "en", "miscs_DRPMaxObstructsOnPurchaseEnts_tooltip", "This will prevent spawning alot of DRP Entities inside of eachother!")
	slib.setLang("gprotect", "en", "miscs_DRPObstructsFilter", "Max obstructs filter DarkRP entities")
	slib.setLang("gprotect", "en", "miscs_DRPObstructsFilter_tooltip", "This is the filter for the max obstructs(1 = DRP Entitities, 2 = Props)")
end

slib.setLang("gprotect", "en", "insufficient-permission", "You do not have the privilege to do this!")
--addons/skeypad_1.2.36/lua/s_keypad/sh_skeypad_config.lua:
return gluapack()()
--addons/skeypad_1.2.36/lua/s_keypad/languages/sh_english.lua:
return gluapack()()
--lua/autorun/snoopdogg_hq_bodygroup.lua:
return gluapack()()
--lua/autorun/snoopdogg_hq_npc.lua:
return gluapack()()
--addons/spzones/lua/autorun/spzones_load.lua:
return gluapack()()
--addons/spzones/lua/spzones/spconfig.lua:
-- SPZones Version: 31492
SP = SP or {}
SPZones = SPZones or {}
SPZones.Restricted = SPZones.Restricted or {}
SPZones.PunishFunc = SPZones.PunishFunc or {}
SPZones.Menus = SPZones.Menus or {}
-- This is the only part you are allowed to edit --
SPZones.Debug = false

-- What ranks should it ignore
SPZones.IgnoreRanks = {"owner", ""}

-- What jobs should it ignore
SPZones.IgnoreJobs = {"admin on duty", "staff on duty"}

--  What steamids should it ignore
SPZones.IgnoreSteamid = {"STEAM_1:1:65391559", "STEAM_0:1:00000000"}

----- Rank Premission -----
-- The ranks which are allowed to use the command (Use lowercase!)
SPZones.AllowedRanks = {"superadmin", "founder", "owner", "helper+", "deneme moderator", ""}

-- Ranks which receives messages when nlr is broken
SPZones.AdminMessageRanks = {"superadmin", "founder", "owner", "admin", "moderator", "headadmin"}

----- Language -----
SPZones.GhostText = "Sen hayalet oldun!" -- Text that will appere when ghosted
SPZones.WarnText = "NLR'yi Girmek üzeresiniz!" -- Text to be displaied
SPZones.WarnTimeText = " Ayrıldın!" -- The text after how many seconds is left
SPZones.WarnTextDelay = "NLR'a Girmek Üzerisn!" -- Text to be displaied
SPZones.WarnTimeTextDelay = " Saniye Kaldı!"
SPZones.Reason = "NLR'yi ihlal ettiğiniz için atıldınız!" -- Reason for kicking / banning
SPZones.UlxFreezeText = "için donmuşsun " -- Ulx will not tell by default how long you are frozen this will print in the player chat
SPZones.AWarnText = "NLR'yi ihlal ediyor" -- Reason for warning the player though AWarn

--------------------------------------------------
----- DO NOT CHANGE ANYTHING BELOW THIS LINE -----
SPZones.Punishments = SPZones.Punishments or {"Ghost", "Push", "Freeze", "Slay", "Kick", "Ban"}

-- Style 1 is combobox 
-- Style 2 is slider
-- Style 3 is NOT USED
-- Style 4 is table with add and remove
-- Style 5 is zones
-- Style 6 is button with function
-- Style 7 is color selector menu
SP["SPZones"] = {
    ["title"] = "SPZones",
    ["menus"] = {},
    ["shouldDisplay"] = {},
    ["settings"] = {
        ["Enabled"] = {
            Tab = "General",
            Text = "SPZones status",
            Order = 1,
            Style = 1,
            Options = {"Enabled", "Disabled"},
            Value = 1
        },
        ["ZoneRadius"] = {
            Tab = "General",
            Text = "NLR radius",
            Order = 2,
            Style = 2,
            Min = 400,
            Max = 1800,
            Value = 800
        },
        ["ZoneTime"] = {
            Tab = "General",
            Text = "NLR lenght",
            Order = 3,
            Style = 2,
            Min = 30,
            Max = 1000,
            Value = 120
        },
        ["Punishment"] = {
            Tab = "General",
            Text = "Punishment",
            Order = 4,
            Style = 1,
            Options = SPZones.Punishments,
            Value = 1
        },
        ["PunishmentLenght"] = {
            Tab = "General",
            Text = "Punishment time lenght",
            Order = 5,
            Style = 2,
            Min = 0,
            Max = 1800,
            Value = 1800
        },
        ["PunishmentDelay"] = {
            Tab = "General",
            Text = "Punishment delay",
            Order = 6,
            Style = 2,
            Min = 0,
            Max = 300,
            Value = 0
        },
        ["MsgAdmins"] = {
            Tab = "General",
            Text = "Message admins",
            Order = 7,
            Style = 1,
            Options = {"Disabled", "Chat message", "Console"},
            Value = 3
        },
        ["RevengeCombat"] = {
            Tab = "General",
            Text = "Prevent revenge combat",
            Order = 8,
            Style = 1,
            Options = {"Disabled", "Enabled"},
            Value = 1
        },
        ["WorldKill"] = {
            Tab = "General",
            Text = "Remove zone on worldkill",
            Order = 9,
            Style = 1,
            Options = {"Disabled", "Enabled"},
            Value = 2
        },
        ["Suicide"] = {
            Tab = "General",
            Text = "Remove zone on suicide",
            Order = 10,
            Style = 1,
            Options = {"Disabled", "Enabled"},
            Value = 2
        },
        ["Arrest"] = {
            Tab = "General",
            Text = "Remove zones when arrest",
            Order = 11,
            Style = 1,
            Options = {"Disabled", "Enabled"},
            Value = 2
        },
        ["JailTP"] = {
            Tab = "Punishment options",
            Text = "When jailed teleport to position",
            Order = 101,
            Style = 1,
            Options = {"Disabled", "Enabled"},
            Value = 1
        },
        ["JailTPPos"] = {
            Tab = "Punishment options",
            Text = "Jail position",
            BtnText = "Set position",
            Order = 102,
            Style = 6,
            Value = Vector(0, 0, 0)
        },
        ["GhostTransparency"] = {
            Tab = "Punishment options",
            Text = "Ghosted person transparency",
            Order = 103,
            Style = 2,
            Min = 0,
            Max = 255,
            Value = 50
        },
        ["ServerDelay"] = {
            Tab = "Performance",
            Text = "Server delay",
            Order = 201,
            Style = 2,
            Min = 0.5,
            Max = 3,
            Decimals = 2,
            Value = 0.1
        },
        ["ClientDelay"] = {
            Tab = "Performance",
            Text = "Client delay",
            Order = 202,
            Style = 2,
            Min = 0.05,
            Max = 2,
            Decimals = 2,
            Value = 0.1
        },
        ["FadeBeing"] = {
            Tab = "Performance",
            Text = "Fade begin distance",
            Order = 202,
            Style = 2,
            Min = 250,
            Max = 3000,
            Value = 750
        },
        ["FadeOut"] = {
            Tab = "Performance",
            Text = "Fade out distance",
            Order = 203,
            Style = 2,
            Min = 0,
            Max = 1000,
            Value = 250
        },
        ["ZoneStyle"] = {
            Tab = "Appearance",
            Text = "What style should the zones be",
            Order = 301,
            Style = 1,
            Options = {"Sphere", "Flat Sphere", "Dotted circle"},
            Value = 1
        },
        ["ZoneColor"] = {
            Tab = "Appearance",
            Text = "Zone color",
            Order = 302,
            Style = 7,
            Value = Color(52, 73, 94, 220)
        },
        ["ZoneMaterial"] = {
            Tab = "Appearance",
            Text = "Zone material",
            Order = 303,
            Style = 1,
            Options = {"Disabled", "models/wireframe", "models/props_combine/com_shield001a", "models/props_c17/frostedglass_01a"},
            Value = 1
        },
        ["EnterWarn"] = {
            Tab = "Appearance",
            Text = "Warn player before entering zone",
            Order = 304,
            Style = 1,
            Options = {"Disabled", "Enabled"},
            Value = 2
        },
        ["EnterWarnDist"] = {
            Tab = "Appearance",
            Text = "Warn when distance to zone is",
            Order = 305,
            Style = 2,
            Min = 250,
            Max = 1000,
            Value = 500
        },
        ["FlatSphereHeight"] = {
            Tab = "Appearance",
            Text = "Flat sphere height",
            Order = 306,
            Style = 2,
            Min = 0,
            Max = 50,
            Value = 0
        },
        ["DottedSquareSize"] = {
            Tab = "Appearance",
            Text = "Dotted circle square size",
            Order = 307,
            Style = 2,
            Min = 5,
            Max = 10,
            Value = 6
        },
        ["DottedHeight"] = {
            Tab = "Appearance",
            Text = "Dotted circle height",
            Order = 308,
            Style = 2,
            Min = 0,
            Max = 50,
            Value = 25
        },
        ["WarnDisplay"] = {
            Tab = "Appearance",
            Text = "How should NLR warnings be displayed",
            Order = 309,
            Style = 1,
            Options = {"3d2d text", "2d text box", "Notifications"},
            Value = 1
        },
        ["RestrictedZones"] = {
            Tab = "Restricted zones",
            Text = "There aren't any zones created!\nYou can create zones with the SP PP tool under\nQ Menu > Weapons > Splash > SP Zones",
            Order = 400,
            Style = 4
        }
    }
}

----- Punishment Functions -----
SPZones.PunishFunc = {
    ["ghost"] = function(ply)
        SPZones.Ghost(ply)
    end,
    ["push"] = function(ply)
        SPZones.Push(ply)
    end,
    ["freeze"] = function(ply)
        ply:Freeze(true)
        ply:ChatPrint(SPZones.UlxFreezeText .. string.ToMinutesSeconds(SP["SPZones"]["settings"]["PunishmentLenght"].Value) .. " minutes!")
        ply:ChatPrint(SP["SPZones"]["settings"]["PunishmentLenght"].Value)

        if timer.Exists(ply:SteamID() .. "FreezeCheck") then
            timer.Remove(ply:SteamID() .. "FreezeCheck")
        end

        timer.Create(ply:SteamID() .. "FreezeCheck", SP["SPZones"]["settings"]["PunishmentLenght"].Value, 0, function()
            if not ply:IsValid() then
                timer.Remove(ply:SteamID() .. "FreezeCheck")
            else
                if ply:IsFrozen() then
                    ply:Freeze(false)
                    timer.Remove(ply:SteamID() .. "FreezeCheck")
                else
                    timer.Remove(ply:SteamID() .. "FreezeCheck")
                end
            end
        end)
    end,
    ["awarn"] = function(ply)
        awarn_warnplayer(nil, ply, SPZones.AWarnText)
    end,
    ["slay"] = function(ply)
        ply:Kill()
    end,
    ["kick"] = function(ply)
        ply:Kick(SPZones.Reason)
    end,
    ["ban"] = function(ply)
        ply:Ban(string.ToMinutesSeconds(SP["SPZones"]["settings"]["PunishmentLenght"].Value), true)
    end,
    ["sgban"] = function(ply)
        serverguard.command.Run(ply, "ban", SP["SPZones"]["settings"]["PunishmentLenght"].Value, SPZones.Reason)
    end,
    ["sgkick"] = function(ply)
        serverguard.command.Run(ply, "kick", SPZones.Reason)
    end,
    ["sgslay"] = function(ply)
        serverguard.command.Run(ply, "slay")
    end,
    ["sgfreeze"] = function(ply)
        serverguard.command.Run(ply, "freeze")
    end,
    ["sgjail"] = function(ply)
        serverguard.command.Run(ply, "jail", SP["SPZones"]["settings"]["PunishmentLenght"].Value)
    end,
    ["sgrestrict"] = function(ply)
        serverguard.command.Run(ply, "restrict", SP["SPZones"]["settings"]["PunishmentLenght"].Value)
    end,
    ["ulxjail"] = function(ply)
        if SP["SPZones"]["settings"]["JailTP"].Value == 1 then
            ulx.jail(Entity(0), {ply}, SP["SPZones"]["settings"]["PunishmentLenght"].Value, false, SPZones.Reason)
        else
            ply.Jailpos = ply:GetPos()
            ply:SetPos(SP["SPZones"]["settings"]["JailTPPos"].Value)

            ulx.jail(Entity(0), {ply}, SP["SPZones"]["settings"]["PunishmentLenght"].Value, false, SPZones.Reason)

            if timer.Exists(ply:SteamID() .. "TeleportBackJailtp") then
                timer.Remove(ply:SteamID() .. "TeleportBackJailtp")
            end

            timer.Create(ply:SteamID() .. "TeleportBackJailtp", SP["SPZones"]["settings"]["PunishmentLenght"].Value, 0, function()
                -- This ensures the player is still in jail and have not been unjailed 
                if not ply:IsValid() or SP["SPZones"]["settings"]["JailTPPos"].Value:Distance(ply:GetPos()) > 80 then
                    timer.Remove(ply:SteamID() .. "TeleportBackJailtp")
                else
                    ply:SetPos(ply.Jailpos)
                    timer.Remove(ply:SteamID() .. "TeleportBackJailtp")
                end
            end)
        end
    end,
    ["ulxfreeze"] = function(ply)
        ulx.freeze(Entity(0), {ply}, false)

        ply:ChatPrint(SPZones.UlxFreezeText .. string.ToMinutesSeconds(SP["SPZones"]["settings"]["PunishmentLenght"].Value) .. " minutes!")

        if timer.Exists(ply:SteamID() .. "FreezeCheck") then
            timer.Remove(ply:SteamID() .. "FreezeCheck")
        end

        timer.Create(ply:SteamID() .. "FreezeCheck", SP["SPZones"]["settings"]["PunishmentLenght"].Value, 0, function()
            if not ply:IsValid() then
                timer.Remove(ply:SteamID() .. "FreezeCheck")
            else
                if ply:IsFrozen() then
                    ulx.freeze(ply, {ply}, true)

                    timer.Remove(ply:SteamID() .. "FreezeCheck")
                else
                    timer.Remove(ply:SteamID() .. "FreezeCheck")
                end
            end
        end)
    end,
    ["ulxslay"] = function(ply)
        ulx.slay(Entity(0), {ply})
    end,
    ["ulxkick"] = function(ply)
        ulx.kick(Entity(0), {ply}, SPZones.Reason)
    end,
    ["ulxban"] = function(ply)
        ulx.ban(Entity(0), {ply}, string.ToMinutesSeconds(SP["SPZones"]["settings"]["PunishmentLenght"].Value), SPZones.Reason)
    end,
    ["fadminfreeze"] = function(ply)
        RunConsoleCommand("Fadmin", "freeze", ply:SteamID(), SP["SPZones"]["settings"]["PunishmentLenght"].Value)
    end,
    ["fadminslay"] = function(ply)
        RunConsoleCommand("Fadmin", "slay", ply:SteamID())
    end,
    ["fadminkick"] = function(ply)
        RunConsoleCommand("Fadmin", "kick", ply:SteamID(), SPZones.Reason)
    end,
    ["fadminban"] = function(ply)
        RunConsoleCommand("Fadmin", "ban", ply:SteamID(), string.ToMinutesSeconds(SP["SPZones"]["settings"]["PunishmentLenght"].Value), SPZones.Reason)
    end
}

if serverguard then
    serverguard.permission:Add("SPZones_Admin")
    serverguard.permission:Add("SPZones_User")
    local command = {}
    command.help = "Clear a players nlr zone."
    command.command = "clearnlr"

    command.arguments = {"player"}

    command.permissions = "SPZones_Admin"

    function command:OnPlayerExecute(ply, target, arg)
        if target:IsPlayer() then
            SPZones.ClearZones(target)

            return true
        else
            return false
        end
    end

    serverguard.command:Add(command)
    command = {}
    command.help = "Checks a player death positions."
    command.command = "checknlr"

    command.arguments = {"player"}

    command.permissions = "SPZones_User"

    function command:OnPlayerExecute(ply, target, arg)
        if target:IsPlayer() then
            if not target.DeathSave or #target.DeathSave < 1 then return true end
            SPCheckNlr(target.DeathSave, ply)

            return true
        else
            return false
        end
    end

    serverguard.command:Add(command)
    command = {}
    command.help = "Clears the checknlr."
    command.command = "clearcheck"
    command.permissions = "SPZones_User"

    function command:Execute(ply, silent, arg)
        SPClearCheckNlr(ply)

        return true
    end

    serverguard.command:Add(command)
end
--addons/spzones/lua/spzones/cl_spmain.lua:
SP = SP or {}
SPZones = SPZones or {}
SPZone = SPZone or {}

surface.CreateFont("SPZonesFont", {
    font = "Trebuchet24",
    size = 200,
    weight = 500,
    antialias = true,
})

net.Receive("SPZones.SendSettings", function()
    local SettingVals = net.ReadTable()

    for k, v in pairs(SettingVals) do
        SP["SPZones"]["settings"][k].Value = v.Value

        if k == "Punishment" then
            SP["SPZones"]["settings"][k].Options = v.Options
        end
    end

    SPZones.Restricted = net.ReadTable()
end)

net.Receive("SPZones.SendRestricted", function()
    SPZones.Restricted = net.ReadTable()
end)

net.Receive("SPZones.SPZone", function(len, ply)
    local pos = net.ReadVector()
    local time = CurTime() + SP["SPZones"]["settings"]["ZoneTime"].Value

    table.insert(SPZone, {
        pos = pos,
        time = time,
    })
end)

net.Receive("SPZones.ZonesUpdate", function(len, ply)
    local pos = net.ReadVector()

    for k, v in pairs(SPZone) do
        if pos == v.pos then
            table.remove(SPZone, k)
        end
    end
end)

net.Receive("SPZones.ZonesRemove", function(len, ply)
    SPZone = {}
end)

net.Receive("SPZones.AdminMessages", function(len, ply)
    local PlyInfo = net.ReadString()

    if SP["SPZones"]["settings"]["MsgAdmins"].Value == 2 then
        chat.AddText(Color(255, 0, 0), "[SPZones] ", Color(255, 255, 255), PlyInfo .. " Just broke NLR!")
    elseif SP["SPZones"]["settings"]["MsgAdmins"].Value == 3 then
        MsgC(Color(255, 0, 0), "[SPZones] ", Color(255, 255, 255), PlyInfo .. " Just broke NLR!\n")
    end
end)

net.Receive("SPZones.PunishmentDelay", function(len, ply)
    SPZones.PunishmentTime = CurTime()
end)

net.Receive("SPZones.NlrCheckData", function(len, ply)
    SPZones.CheckNLR = net.ReadTable()
    chat.AddText(Color(255, 0, 0), "[SPZones] ", Color(255, 255, 255), " Write !clearcheck to remove the point(s)!")
end)

net.Receive("SPZones.NlrCheckClear", function(len, ply)
    SPZones.CheckNLR = {}
    chat.AddText(Color(255, 0, 0), "[SPZones] ", Color(255, 255, 255), " Removed all the point(s)!")
end)

local ThinkWait = 0

function SPZones.Think()
    if ThinkWait > CurTime() then return end
    ThinkWait = SP["SPZones"]["settings"]["ClientDelay"].Value + CurTime()

    if #SPZone == 0 then
        LocalPlayer().InsideNLR = false
        LocalPlayer().InsideNLRWarn = false
    end

    local ClosestDist = math.huge
    local ClosestZone = nil

    for k, v in pairs(SPZone) do
        local Dist = LocalPlayer():GetPos():DistToSqr(v.pos)

        if Dist < ClosestDist ^ 2 then
            ClosestDist = Dist
            ClosestZone = v
            ClosestZone.n = k
        end
    end

    for k, v in pairs(SPZone) do
        if v.time - CurTime() <= 0 then
            if k == ClosestZone.n then
                -- Remove notifications when zone is removed
                notification.Kill("InsideWarn")
                notification.Kill("InsideNLR")
            end

            table.remove(SPZone, k)
        end
    end

    if ClosestZone == nil then return end
    local Dist = LocalPlayer():GetPos():DistToSqr(ClosestZone.pos)

    if Dist < SP["SPZones"]["settings"]["ZoneRadius"].Value ^ 2 then
        if LocalPlayer().InsideNLR then return end -- Makes everything after this only be run once everytime a zone is entered

        if SP["SPZones"]["settings"]["Punishment"].Value == 1 and SP["SPZones"]["settings"]["PunishmentDelay"].Value == 0 and SP["SPZones"]["settings"]["WarnDisplay"].Value == 3 then
            notification.AddProgress("InsideNLR", SPZones.GhostText)
        end

        -- Remove notifcation if inside zone
        notification.Kill("InsideWarn")
        LocalPlayer().InsideNLR = true
    else
        if SP["SPZones"]["settings"]["EnterWarn"].Value == 2 and Dist < (SP["SPZones"]["settings"]["ZoneRadius"].Value + SP["SPZones"]["settings"]["EnterWarnDist"].Value) ^ 2 then
            LocalPlayer().WarnTime = ClosestZone.time

            if SP["SPZones"]["settings"]["WarnDisplay"].Value == 3 then
                notification.AddProgress("InsideWarn", SPZones.WarnText .. " " .. string.ToMinutesSeconds(math.ceil(LocalPlayer().WarnTime - CurTime())) .. SPZones.WarnTimeText)
            end

            if not LocalPlayer().InsideNLRWarn then
                LocalPlayer().InsideNLRWarn = true
            end
        else
            if LocalPlayer().InsideNLRWarn then
                -- Remove notifcation if outside distance of zone
                notification.Kill("InsideWarn")
                LocalPlayer().InsideNLRWarn = false
            end
        end

        if not LocalPlayer().InsideNLR then return end
        notification.Kill("InsideNLR")
        LocalPlayer().InsideNLR = false
    end
end

hook.Add("PlayerPostThink", "SPZones.Think", SPZones.Think)
local uiForeground, uiBackground = Color(240, 240, 255, 255), Color(20, 20, 20, 120)

function DrawZoneWarn()
    if not LocalPlayer():IsValid() or not LocalPlayer():Alive() then return end

    if SPZones.CheckNLR and #SPZones.CheckNLR > 0 then
        for k, v in pairs(SPZones.CheckNLR) do
            pos = v.pos:ToScreen()
            local sptext1 = "" .. v.victim:Nick() .. " got killed by a non player"

            if IsValid(v.killer) and v.killer:IsPlayer() then
                sptext1 = "" .. v.victim:Nick() .. " got killed by " .. v.killer:Nick()
            end

            local sptext2 = "Died here: " .. string.ToMinutesSeconds(math.Round(CurTime() - v.time)) .. " minutes ago"
            local sptext3 = v.job
            surface.SetFont("DermaLarge")
            local TextWidth1 = surface.GetTextSize(tostring(sptext1))
            local TextWidth2 = surface.GetTextSize(sptext2)
            local TextWidth3 = surface.GetTextSize(sptext3)
            draw.RoundedBox(2, pos.x - 6, pos.y - 6, 12, 12, v.color)
            draw.WordBox(2, pos.x - TextWidth1 / 4, pos.y - 66, sptext1, "UiBold", uiBackground, uiForeground)
            draw.WordBox(2, pos.x - TextWidth2 / 4, pos.y - 46, sptext2, "UiBold", uiBackground, uiForeground)
            draw.WordBox(2, pos.x - TextWidth3 / 4, pos.y - 26, sptext3, "UiBold", uiBackground, uiForeground)
        end
    end

    if SP["SPZones"]["settings"]["WarnDisplay"].Value == 2 then
        surface.SetFont("DermaLarge")
        local GhostWidth = select(1, surface.GetTextSize(SPZones.GhostText)) + 50
        local GhostHeight = select(2, surface.GetTextSize(SPZones.GhostText)) + 25
        local WarnWidth = select(1, surface.GetTextSize(SPZones.WarnText)) + 50
        local WarnHeight = select(2, surface.GetTextSize(SPZones.WarnText)) * 2 + 50

        if LocalPlayer().InsideNLR then
            if SP["SPZones"]["settings"]["PunishmentDelay"].Value ~= 0 and SPZones.PunishmentTime ~= nil and (SPZones.PunishmentTime + SP["SPZones"]["settings"]["PunishmentDelay"].Value) - CurTime() > -1 then
                local WarnDelay = SPZones.PunishmentTime + SP["SPZones"]["settings"]["PunishmentDelay"].Value

                if math.ceil(WarnDelay - CurTime()) > 0 then
                    draw.RoundedBox(5, ScrW() / 2 - WarnWidth / 2, ScrH() / 4 + 25 - WarnHeight / 2, WarnWidth, WarnHeight, Color(52, 73, 94, 200))
                    draw.RoundedBox(10, ScrW() / 2 - WarnWidth / 2 - 5 / 2, ScrH() / 4 + 25 - WarnHeight / 2 - 5 / 2, WarnWidth + 5, WarnHeight + 5, Color(44, 62, 80, 100))
                    draw.SimpleText(SPZones.WarnTextDelay, "DermaLarge", ScrW() / 2, ScrH() / 4, Color(255, 255, 255, 255), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
                    draw.SimpleText(math.ceil(WarnDelay - CurTime()) .. SPZones.WarnTimeTextDelay, "DermaLarge", ScrW() / 2, ScrH() / 4 + 50, Color(255, 255, 255, 255), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
                end
            end

            if string.lower(string.lower(SP["SPZones"]["settings"]["Punishment"].Options[SP["SPZones"]["settings"]["Punishment"].Value])) == "ghost" and SP["SPZones"]["settings"]["PunishmentDelay"].Value == 0 then
                draw.RoundedBox(5, ScrW() / 2 - GhostWidth / 2, ScrH() / 4 - GhostHeight / 2 + 25, GhostWidth, GhostHeight, Color(52, 73, 94, 200))
                draw.RoundedBox(10, ScrW() / 2 - GhostWidth / 2 - 5 / 2, ScrH() / 4 - GhostHeight / 2 - 5 / 2 + 25, GhostWidth + 5, GhostHeight + 5, Color(44, 62, 80, 100))
                draw.SimpleText(SPZones.GhostText, "DermaLarge", ScrW() / 2, ScrH() / 4 + 25, Color(255, 255, 255, 255), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
            end
        elseif LocalPlayer().InsideNLRWarn and SP["SPZones"]["settings"]["PunishmentDelay"].Value == 0 then
            draw.RoundedBox(5, ScrW() / 2 - WarnWidth / 2, ScrH() / 4 + 25 - WarnHeight / 2, WarnWidth, WarnHeight, Color(52, 73, 94, 200))
            draw.RoundedBox(10, ScrW() / 2 - WarnWidth / 2 - 5 / 2, ScrH() / 4 + 25 - WarnHeight / 2 - 5 / 2, WarnWidth + 5, WarnHeight + 5, Color(44, 62, 80, 100))
            draw.SimpleText(SPZones.WarnText, "DermaLarge", ScrW() / 2, ScrH() / 4, Color(255, 255, 255, 255), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
            draw.SimpleText(string.ToMinutesSeconds(math.ceil(LocalPlayer().WarnTime - CurTime())) .. SPZones.WarnTimeText, "DermaLarge", ScrW() / 2, ScrH() / 4 + 50, Color(255, 255, 255, 255), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
        end
        --53edb1cf19944f6955228d9b3569980177cabf135f3d9e8ee15486999270a1cd
    end
end

hook.Add("HUDPaint", "DrawZoneWarn", DrawZoneWarn)

function drawCircle(x, y, radius, seg)
    local cir = {}

    table.insert(cir, {
        x = x,
        y = y,
        u = 0.5,
        v = 0.5
    })

    for i = 0, seg do
        local a = math.rad((i / seg) * -360)

        table.insert(cir, {
            x = x + math.sin(a) * radius,
            y = y + math.cos(a) * radius,
            u = math.sin(a) / 2 + 0.5,
            v = math.cos(a) / 2 + 0.5
        })
    end

    local a = math.rad(0)

    --[[53edb1cf19944f6955228d9b3569980177cabf135f3d9e8ee15486999270a1cd]]
    table.insert(cir, {
        x = x + math.sin(a) * radius,
        y = y + math.cos(a) * radius,
        u = math.sin(a) / 2 + 0.5,
        v = math.cos(a) / 2 + 0.5
    })

    surface.DrawPoly(cir)
end

local function SPRenderZone()
    for k, v in pairs(SPZone) do
        if LocalPlayer():GetPos():DistToSqr(v.pos) < ((SP["SPZones"]["settings"]["FadeBeing"].Value + SP["SPZones"]["settings"]["ZoneRadius"].Value) + SP["SPZones"]["settings"]["FadeOut"].Value) ^ 2 then
            SPZones.FadeColor = Color(SP["SPZones"]["settings"]["ZoneColor"].Value.r, SP["SPZones"]["settings"]["ZoneColor"].Value.g, SP["SPZones"]["settings"]["ZoneColor"].Value.b, SP["SPZones"]["settings"]["ZoneColor"].Value.a)

            if LocalPlayer():GetPos():DistToSqr(v.pos) > (SP["SPZones"]["settings"]["FadeBeing"].Value + SP["SPZones"]["settings"]["ZoneRadius"].Value) ^ 2 then
                SPZones.FadeColor.a = (SP["SPZones"]["settings"]["ZoneColor"].Value.a - (LocalPlayer():GetPos():Distance(v.pos) - (SP["SPZones"]["settings"]["FadeBeing"].Value + SP["SPZones"]["settings"]["ZoneRadius"].Value)) / (SP["SPZones"]["settings"]["FadeOut"].Value / SP["SPZones"]["settings"]["ZoneColor"].Value.a))
            end

            if SP["SPZones"]["settings"]["WarnDisplay"].Value == 1 then
                local AngleY = math.rad((Vector(v.pos) - LocalPlayer():GetPos()):Angle().y + 90)
                local TextX = v.pos.x + (SP["SPZones"]["settings"]["ZoneRadius"].Value * math.sin(-AngleY))
                local TextY = v.pos.y + (SP["SPZones"]["settings"]["ZoneRadius"].Value * math.cos(-AngleY))
                local TextAngle = (Vector(v.pos) - LocalPlayer():GetPos()):Angle().y
                cam.Start3D2D(Vector(TextX, TextY, v.pos.z), Angle(0, TextAngle - 90, 90), 0.1)
                surface.SetFont("SPZonesFont")
                local Width, Height = surface.GetTextSize(SPZones.WarnText)
                surface.SetTextColor(255, 255, 255)
                surface.SetTextPos(0 - Width / 2, -Height - 620)
                surface.DrawText(SPZones.WarnText)
                local Text = string.ToMinutesSeconds(math.ceil(v.time - CurTime())) .. SPZones.WarnTimeText
                local _, HeightT = surface.GetTextSize(Text)
                surface.SetTextPos(0 - Width / 2, -HeightT - 480)
                surface.DrawText(Text)
                cam.End3D2D()
            end

            if SP["SPZones"]["settings"]["ZoneStyle"].Value == 1 then
                if SP["SPZones"]["settings"]["ZoneMaterial"].Value ~= 1 then
                    SPMaterial = Material(SP["SPZones"]["settings"]["ZoneMaterial"].Options[SP["SPZones"]["settings"]["ZoneMaterial"].Value])
                    render.SetMaterial(SPMaterial)
                else
                    render.SetColorMaterial()
                end

                render.UpdateScreenEffectTexture()
                render.CullMode(MATERIAL_CULLMODE_CW)

                if LocalPlayer().InsideNLR then
                    render.DrawSphere(v.pos, SP["SPZones"]["settings"]["ZoneRadius"].Value, 100, 100, SPZones.FadeColor)
                end

                render.CullMode(MATERIAL_CULLMODE_CCW)
                render.DrawSphere(v.pos, SP["SPZones"]["settings"]["ZoneRadius"].Value, 100, 100, SPZones.FadeColor)
            elseif SP["SPZones"]["settings"]["ZoneStyle"].Value == 2 then
                cam.Start3D2D(v.pos + Vector(0, 0, SP["SPZones"]["settings"]["FlatSphereHeight"].Value), Angle(0, 0, 0), 6)

                if SP["SPZones"]["settings"]["ZoneMaterial"].Value ~= 1 then
                    SPMaterial = Material(SP["SPZones"]["settings"]["ZoneMaterial"].Options[SP["SPZones"]["settings"]["ZoneMaterial"].Value])
                    render.SetMaterial(SPMaterial)
                else
                    draw.NoTexture()
                end

                surface.SetDrawColor(SPZones.FadeColor)
                drawCircle(0, 0, SP["SPZones"]["settings"]["ZoneRadius"].Value / 6, 80)
                cam.End3D2D()
            elseif SP["SPZones"]["settings"]["ZoneStyle"].Value == 3 then
                cam.Start3D2D(v.pos + Vector(0, 0, SP["SPZones"]["settings"]["DottedHeight"].Value), Angle(0, 0, 0), SP["SPZones"]["settings"]["DottedSquareSize"].Value)
                surface.SetDrawColor(SPZones.FadeColor)
                draw.NoTexture()
                surface.DrawCircle(0, 0, SP["SPZones"]["settings"]["ZoneRadius"].Value / SP["SPZones"]["settings"]["DottedSquareSize"].Value, SPZones.FadeColor)
                cam.End3D2D()
            end
        end
    end
end

hook.Add("PostDrawTranslucentRenderables", "SPRenderZone", SPRenderZone)
--addons/sreward_1.5.30/lua/s_reward/modules/sh_playtime.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_elevel.lua:
return gluapack()()
--lua/streamradio_core/url.lua:
return gluapack()()
--lua/streamradio_core/stream.lua:
return gluapack()()
--lua/streamradio_core/json.lua:
return gluapack()()
--lua/streamradio_core/shoutcast.lua:
return gluapack()()
--lua/streamradio_core/models/hl2_speaker.lua:
return gluapack()()
--lua/streamradio_core/models/minecraft_noteblock.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Minecraft Noteblock
-- Addon: https://steamcommunity.com/sharedfiles/filedetails/?id=116592647
RADIOMDL.model = "models/mcmodelpack/blocks/noteblock.mdl"

RADIOMDL.NoDisplay = true
RADIOMDL.SpawnAng = Angle( 0, 0, 0 )
RADIOMDL.SpawnFlatOnWall = false
RADIOMDL.SoundPosOffset = Vector( 0, 0, 18 )
RADIOMDL.SoundAngOffset = Angle( 0, 0, 0 )

return true


--lua/streamradio_core/models/wire_subwoofer_small.lua:
return gluapack()()
--lua/streamradio_core/classes.lua:
return gluapack()()
--lua/streamradio_core/classes.lua:
StreamRadioLib.Classes = StreamRadioLib.Classes or {}
table.Empty(StreamRadioLib.Classes)

local LuaClassDirectory = "streamradio_core/classes"

local function normalize_classname(name)
	name = string.lower(name or "")
	name = string.Trim(name)

	name = string.gsub(name, "[%/%\\]", "/" )
	name = string.gsub(name, "%.%.%/", "" )
	name = string.gsub(name, "%.%/", "" )
	name = string.gsub(name, "[%s]", "_" )

	name = string.gsub(name, "^[%w%s%p_%/%\\]*" .. string.PatternSafe(LuaClassDirectory) .. "[%/%\\]*", "", 1 )
	name = string.gsub(name, "%.lua$", "", 1 )

	name = string.Trim(name)

	return name
end

local g_classID = 0
local g_instanceID = 0
local g_classsystemglobal = {}

local function CreateClass( classname, baseClass )
	g_classID = g_classID + 1

	local new_class = {}
	local class_mt = {
		__index = new_class,
	}

	local metamethods = {
		"__add", -- x + y
		"__sub", -- x - y
		"__unm", -- -x
		"__mul", -- x * y
		"__div", -- x / y
		"__mod", -- x % y
		"__pow", -- x ^ y
		"__concat", -- x .. y

		"__eg", -- x == y
		"__lt", -- x < y, x >= y
		"__le", -- x <= y, x > y
		"__len", -- #x

		"__call", -- x()
		"__tostring", -- tostring(x)
		"__gc", -- garbage collection
	}

	function new_class:new(useproxy)
		local newinst = {}

		for k, v in pairs(metamethods) do
			if rawget(class_mt, v) then continue end
			class_mt[v] = self[v]
		end

		setmetatable( newinst, class_mt )

		newinst.ID = g_instanceID
		g_instanceID = g_instanceID + 1

		return newinst
	end

	if nil ~= baseClass then
		setmetatable( new_class, {
			__index = baseClass,
		} )
	end

	new_class.classname = classname
	new_class.classid = g_classID

	function new_class:GetGlobalVar(key, fallback)
		key = tostring(key or "")

		local value = g_classsystemglobal[key]
		if value == nil then
			value = fallback
		end

		return value
	end

	function new_class:SetGlobalVar(key, value)
		key = tostring(key or "")
		g_classsystemglobal[key] = value
		return g_classsystemglobal[key]
	end

	function new_class:GetID()
		return self.ID or 0
	end

	function new_class:GetClassname()
		return self.classname
	end

	function new_class:GetBaseClassname()
		if not baseClass then return end
		return baseClass:GetClassname()
	end

	function new_class:GetClassID()
		return self.classid
	end

	function new_class:GetBaseClassID()
		if not baseClass then return end
		return baseClass:GetClassID()
	end

	-- Return the class object of the instance
	function new_class:GetClass()
		return new_class
	end

	-- Return the super class object of the instance
	function new_class:GetBaseClass()
		return baseClass
	end

	-- Return true if the caller is an instance of theClass
	function new_class:isa( theClass )
		local b_isa = false

		local cur_class = self:GetClass()

		while cur_class ~= nil and not b_isa do
			if cur_class == theClass then
				b_isa = true
			else
				cur_class = cur_class:GetBaseClass()
			end
		end

		return b_isa
	end

	return new_class
end

local function AddClass(name, parentname)
	name = normalize_classname(name)
	parentname = normalize_classname(parentname)

	if name == "" then return false end
	if parentname == "" then
		parentname = "base"
	end

	if StreamRadioLib.Classes[name] then return true end

	local scriptfile = LuaClassDirectory .. "/" .. name .. ".lua"

	if name ~= parentname and not AddClass( parentname ) then
		return false
	end

	local parent = StreamRadioLib.Classes[parentname]
	CLASS = CreateClass(name, parent)

	local loaded = StreamRadioLib.LoadSH(scriptfile, true)

	if not loaded then
		CLASS = nil
		return false
	end

	if not CLASS then
		CLASS = nil
		return false
	end

	StreamRadioLib.Classes[name] = CLASS
	local loadedfunc = CLASS.OnLoaded
	CLASS = nil

	if loadedfunc then
		StreamRadioLib.Timedcall(loadedfunc)
	end

	return true
end

function StreamRadioLib.ReloadClasses()
	table.Empty(StreamRadioLib.Classes)

	AddClass("base")
	AddClass("base_listener", "base")
	AddClass("ui/panel", "base_listener")
	AddClass("ui/debug", "ui/panel")
	AddClass("ui/highlighter", "ui/panel")
	AddClass("skin_controller", "base_listener")
	AddClass("gui_controller", "ui/panel")
	AddClass("ui/round_panel", "ui/panel")
	AddClass("ui/shadow_panel", "ui/panel")
	AddClass("ui/label", "ui/panel")
	AddClass("ui/label_fade", "ui/label")
	AddClass("ui/text", "ui/panel")
	AddClass("ui/image", "ui/panel")
	AddClass("ui/button", "ui/shadow_panel")
	AddClass("ui/scrollbar", "ui/panel")
	AddClass("ui/progressbar", "ui/shadow_panel")
	AddClass("ui/textview", "ui/shadow_panel")
	AddClass("ui/tooltip", "ui/panel")
	AddClass("ui/list", "ui/panel")
	AddClass("ui/list_files", "ui/list")

	AddClass("ui/radio/list_playlists", "ui/list_files")
	AddClass("ui/radio/list_playlistview", "ui/list_files")
	AddClass("ui/radio/gui_main", "ui/shadow_panel")
	AddClass("ui/radio/gui_browser", "ui/panel")
	AddClass("ui/radio/gui_player", "ui/panel")
	AddClass("ui/radio/gui_player_controls.lua", "ui/panel")
	AddClass("ui/radio/gui_player_spectrum.lua", "ui/shadow_panel")
	AddClass("ui/radio/gui_errorbox.lua", "ui/panel")

	AddClass("rendertarget", "base_listener")
	AddClass("stream", "base_listener")
	AddClass("clientconvar", "base_listener")
end

function StreamRadioLib.CreateOBJ(name, ...)
	name = normalize_classname(name)

	local class = StreamRadioLib.Classes[name]
	assert(istable(class), "Class '" .. name .. "' does not exist!")
	assert(class.new, "Bad class table '" .. name .. "' detected!")

	local obj = class:new()
	assert(istable(obj), "Object from class '" .. name .. "' could not be created!")

	if obj.Create then
		obj:Create(...)
	end
	obj.Create = nil

	if not IsValid(obj) then
		return nil
	end

	return obj
end

StreamRadioLib.ReloadClasses()

return true


--lua/streamradio_core/classes/base.lua:
return gluapack()()
--lua/streamradio_core/classes/gui_controller.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local BASE = CLASS:GetBaseClass()

local tune_nohdr = Vector( 0.80, 0, 0 )
local CursorMat = StreamRadioLib.GetCustomPNG("cursor")

local catchAndErrorNoHaltWithStack = StreamRadioLib.Util.CatchAndErrorNoHaltWithStack

local g_gui_controller_listengroup = 0
local g_loadedAtDelay = math.min(engine.TickInterval() * 16, 0.5)
local g_visuallyReadyAtDelay = 1

function CLASS:AssignToListenGroup()
	return self._gui_controller_listengroup
end

function CLASS:Create()
	self._gui_controller_listengroup = g_gui_controller_listengroup
	g_gui_controller_listengroup = (g_gui_controller_listengroup % 2 ^ 30) + 1

	self:SetGlobalVar("gui_controller_listengroup", self._gui_controller_listengroup)

	BASE.Create(self)

	self.loadedAt = 0
	self.visuallyReadyAt = 0
	self.isReady = false
	self.isLoading = false

	self.Layout.AllowCursor = true

	self.Cursor = self:CreateListener({
		Pos = Vector(0, 0, 0),
	}, function()
		self:CallHook("CursorChangedInternal")
		self:CallHook("OnCursorChanged")
	end)

	if CLIENT then
		self.Tooltip = self:AddPanelByClassname("tooltip")
		self.Tooltip:SetPos(0, 0)
		self.Tooltip:SetSize(1, 1)
		self.Tooltip:SetName("tooltip")
		self.Tooltip:SetNWName("tip")
		self.Tooltip:SetSkinIdentifyer("tooltip")
		self.Tooltip:SetText("")
		self.Tooltip:SetZPos(1000)
		self.Tooltip:Close()
	end

	self._Skin = StreamRadioLib.CreateOBJ("skin_controller")

	self._Skin.AssignToListenGroup = function()
		return self:AssignToListenGroup()
	end

	self._Skin.OnUpdateSkin = function(this, skindata)
		if not IsValid(self) then return end
		self:SetSkinInternal(skindata)
	end

	self.SkinMap["color"] = nil;

	self.SkinMap["color_cursor"] = {
		set = "SetCursorColor",
		get = "GetCursorColor",
	}

	self.SkinMap["color_border"] = {
		set = "SetColor",
		get = "GetColor",
	}

	self.SkinAble = true

	if SERVER then return end

	self.Colors.Cursor = Color(255, 255, 255)

	self.Layout.CornerSize = 16
	self.Layout.BorderWidth = 10

	self._RT = StreamRadioLib.CreateOBJ("rendertarget")
	if not IsValid(self._RT) then return end

	self._RT.AssignToListenGroup = function()
		return self:AssignToListenGroup()
	end

	local ResizeRT = function()
		local x = self:GetPos()
		local w, h = self:GetSize()

		self._RT:SetPos(x, x)
		self._RT:SetSize(w, h)

		self:InvalidateLayout()
	end

	local CalcSize = function()
		local w, h = self:GetSize()

		local sqmax, sqmin = math.max(w, h), math.min(w, h)
		local csq = math.min(sqmax * 0.06125, sqmin * 0.25)

		self:SetCursorSize(csq, csq)

		if IsValid(self.Tooltip) then
			self.Tooltip:SetMaxWidth(w / 3)
		end
	end

	self.Size = self.Size + ResizeRT + CalcSize
	self.Pos = self.Pos + ResizeRT

	self._RT.OnRender = function()
		render.PushFilterMin(TEXFILTER.NONE)
		render.PushFilterMag(TEXFILTER.NONE)

		catchAndErrorNoHaltWithStack(self._RenderInternal, self)

		render.PopFilterMag()
		render.PopFilterMin()
	end

	self._RT.OnRendertargetRemove = function()
		self:InvalidateLayout()
	end

	self._RT.OnRendertargetCreate = function()
		self:InvalidateLayout()
	end

	ResizeRT()
	CalcSize()

	self.CanListen = true
	self:StartListen()

	if CLIENT then
		self:StartFastThink()
	end
end

function CLASS:Remove()
	if IsValid(self._RT) then
		self._RT:Remove()
	end

	if IsValid(self._Skin) then
		self._Skin:Remove()
	end

	if IsValid(self._Debug) then
		self._Debug:Remove()
	end

	BASE.Remove(self)
end

function CLASS:HasRendertarget()
	if not IsValid(self._RT) then
		return false
	end

	return self._RT:HasRendertarget()
end

function CLASS:GetRendertargetSize()
	if not self:HasRendertarget() then
		return -1, -1
	end

	return self._RT:GetSize()
end

function CLASS:GetRenderPos()
	if self:HasRendertarget() then
		return 0, 0
	end

	local getpos = self.GetClientPos or self.GetPos
	local x, y = getpos(self)

	return x, y
end

function CLASS:GetTooltipPanel()
	return self.Tooltip
end

function CLASS:UpdateTooltip(text)
	if SERVER then return end
	if not IsValid(self.Tooltip) then return end
	if not self.Tooltip:IsVisibleSimple() then return end

	text = tostring(text or "")
	self.Tooltip:SetText(text)

	if text == "" then
		self.Tooltip:Close()
	end

	return self.Tooltip
end

function CLASS:OpenTooltip(text)
	if SERVER then return end
	if not IsValid(self.Tooltip) then return end

	text = tostring(text or "")
	self.Tooltip:SetText(text)

	if text ~= "" then
		self.Tooltip:Open()
		self:PosTooltipToCursor(true)
	else
		self.Tooltip:Close()
	end

	return self.Tooltip
end

function CLASS:CloseTooltip(text)
	if SERVER then return end
	if not IsValid(self.Tooltip) then return end

	self.Tooltip:Close()
end

function CLASS:PosTooltipToCursor(force)
	if SERVER then return end
	if not IsValid(self.Tooltip) then return end
	if not force and not self.Tooltip:IsVisibleSimple() then return end

	local x, y = self:GetPos()

	local cx, cy = self:GetCursor()
	local _, ch = self:GetCursorSize()
	local pw, ph = self:GetClientSize()
	local tw, th = self.Tooltip:GetSize()

	cx = cx - x
	cy = cy - y

	local tx, ty = 0, 0

	tx = cx - tw / 2
	ty = cy - th * 1.5

	if ty < 0 then
		ty = cy + ch * 1.5
	end

	tx = math.Clamp(tx, 0, pw - tw)
	ty = math.Clamp(ty, 0, ph - th)

	self.Tooltip:SetPos(tx, ty)
end

function CLASS:OpenTooltipDelay(text, delay, callback)
	if SERVER then return end
	if not IsValid(self.Tooltip) then return end

	self:TimerOnce("tooltip", delay or 3, function()
		callback = self:GetFunction(callback)
		if not callback then return end
		if not callback(self) then return end

		self:OpenTooltip(text)
	end)
end

function CLASS:GetPanelByName(name)
	name = StreamRadioLib.GetHierarchy(name)

	local firstname = name[1] or ""

	if firstname ~= self:GetName() then
		return nil
	end

	if #name <= 1 then
		return self
	end

	table.remove(name, 1)
	return BASE.GetPanelByName(self, name)
end

function CLASS:IsSkinAble()
	if not self.SkinAble then return false end
	return true
end

function CLASS:RenderSystem()
	if SERVER then return end
	if not self.Valid then return end

	self:ProfilerStart("Render")
	self._isseen = true

	render.PushFilterMin(TEXFILTER.NONE)
	render.PushFilterMag(TEXFILTER.NONE)

	local now = RealTime()
	local currentRenderAlpha = surface.GetAlphaMultiplier()
	local drawAlpha = self:GetDrawAlpha()
	local alpha = drawAlpha * currentRenderAlpha
	local isTransparent = drawAlpha < 1
	local ready = self.isReady and self.visuallyReadyAt < now

	local oldtune = render.GetToneMappingScaleLinear( )
	render.SetToneMappingScaleLinear(tune_nohdr) -- Turns off hdr

	if isTransparent then
		surface.SetAlphaMultiplier(alpha)
	end

	catchAndErrorNoHaltWithStack(self.DrawBorder, self)

	if isTransparent then
		surface.SetAlphaMultiplier(currentRenderAlpha)
	end

	if ready then
		if self:HasRendertarget() then
			surface.SetDrawColor(255, 255, 255, alpha * 255)

			catchAndErrorNoHaltWithStack(self._RT.Render, self._RT)

			surface.SetDrawColor(255, 255, 255, 255)
			self.FrameTime = self._RT:ProfilerTime("Render")
		else
			self:ProfilerStart("Render_rtfallback")

			if isTransparent then
				surface.SetAlphaMultiplier(alpha)
			end

			catchAndErrorNoHaltWithStack(self._RenderInternal, self)

			if isTransparent then
				surface.SetAlphaMultiplier(currentRenderAlpha)
			end

			self.FrameTime = self:ProfilerEnd("Render_rtfallback")
		end

		if isTransparent then
			surface.SetAlphaMultiplier(alpha)
		end
	end

	if ready then
		catchAndErrorNoHaltWithStack(self.DrawCursor, self)
	else
		catchAndErrorNoHaltWithStack(self.RenderLoader, self)
	end

	if isTransparent then
		surface.SetAlphaMultiplier(currentRenderAlpha)
	end

	render.SetToneMappingScaleLinear(oldtune) -- Resets hdr

	render.PopFilterMag()
	render.PopFilterMin()

	self:ProfilerEnd("Render")
end

function CLASS:SetCursorSize(w, h)
	self.Cursor_w = w or 0
	self.Cursor_h = h or 0
end

function CLASS:GetCursorSize()
	return self.Cursor_w, self.Cursor_h
end

function CLASS:DrawCursor()
	if not self:GetAllowCursor() then return end
	if not self:IsCursorInBounds() then return end

	local _, _, ax2, ay2 = self:GetArea()

	local cx, cy = self:GetCursor()
	local cw, ch = self:GetCursorSize()
	local colCursor = self.Colors.Cursor or color_white

	local cu = ((cx + cw) - ax2) / cw
	local cv = ((cy + ch) - ay2) / ch

	cu = math.Clamp(1 - cu, 0, 1)
	cv = math.Clamp(1 - cv, 0, 1)

	surface.SetMaterial(CursorMat)
	surface.SetDrawColor(colCursor:Unpack())
	surface.DrawTexturedRectUV(cx, cy, cw * cu, ch * cv, 0, 0, cu, cv)
end

function CLASS:RenderLoader()
	local color = self.Colors.Cursor

	local x, y = self:GetRenderPos()
	local p = self:GetPadding()
	x = x + p
	y = y + p

	local w, h = self:GetClientSize()

	local sqmax, sqmin = math.max(w, h), math.min(w, h)
	local isq = math.min(sqmax * 0.5, sqmin * 0.5)

	StreamRadioLib.Surface.Loading( x + (w - isq) / 2, y + (h - isq) / 2, isq, isq, color, 8)
end

function CLASS:DrawBorder()
	local borderw = self.Layout.BorderWidth or 0
	if borderw <= 0 then return end

	local x, y = self:GetPos()
	local w, h = self:GetSize()

	x = x - borderw
	y = y - borderw
	w = w + borderw * 2
	h = h + borderw * 2

	draw.RoundedBox(self.Layout.CornerSize, x, y, w, h, self.Colors.Main)
end

function CLASS:OnContentChanged()
	self._renderupdate = true
end

function CLASS:PollLoading()
	if not self.isLoading then
		return
	end

	local now = RealTime()
	local loadedAt = self.loadedAt or 0

	if loadedAt > now then
		return
	end

	self.loadedAt = now
	self.isLoading = false

	self:CallHook("OnLoadDone")

	if not self.isReady then
		self.isReady = true
		self.visuallyReadyAt = now + g_visuallyReadyAtDelay

		self:CallHook("OnReady")
	end
end

function CLASS:Think()
	self.thinkRate = 0.5

	self:PollLoading()

	if SERVER then
		return
	end

	if not IsValid(self._RT) then return end
	if not self:IsSeen() then return end

	self.thinkRate = 0.1

	self._RT:SetFramerate(StreamRadioLib.GetRenderTargetFPS())
	self._RT:SetEnabled(StreamRadioLib.IsRenderTarget())

	self:PosTooltipToCursor()
end

if CLIENT then
	function CLASS:FastThink()
		local isReady = self.isReady

		self.fastThinkRate = isReady and 0.1 or 0.5

		local isSeen = self:IsSeen()
		local change = isSeen ~= self._isseen

		isSeen = self._isseen
		self._isseen = false

		self.isseen = isSeen

		if change then
			if isSeen then
				self:StartListenRecursive()
			else
				if not self.isReady then
					-- make sure the gui controller never stops thinking if not maked as ready yet.
					self.CanListen = true
					self:StartListen()
				else
					self:StopListenRecursive()
				end
			end
		end

		if not IsValid(self._RT) then return end
		if not isSeen then return end

		self.fastThinkRate = 0

		if not self._renderupdate then return end
		if not self._RT:Update() then return end

		self._renderupdate = false
	end
end

function CLASS:GetAllowCursor()
	return self.Layout.AllowCursor or false
end

function CLASS:SetAllowCursor( bool )
	self.Layout.AllowCursor = bool or false
end

function CLASS:GetFrametime()
	return self.FrameTime or 0
end

function CLASS:SetCursorGlobal(x, y)
	self:SetCursor(x, y)
end

function CLASS:SetCursor(x, y)
	x = math.floor(x or -1)
	y = math.floor(y or -1)

	local x1, y1, x2, y2 = self:GetArea()

	if x < x1 then
		x = -1
		y = -1
	end

	if y < y1 then
		x = -1
		y = -1
	end

	if x > x2 then
		x = -1
		y = -1
	end

	if y > y2 then
		x = -1
		y = -1
	end

	self.Cursor.Pos = Vector(x, y, 0)
end

function CLASS:_GetCursorInternal()
	return math.floor(self.Cursor.Pos.x or -1), math.floor(self.Cursor.Pos.y or -1)
end

function CLASS:GetCursor()
	return self:_GetCursorInternal()
end

function CLASS:GetCornerSize()
	return self.Layout.CornerSize or 0
end

function CLASS:SetCornerSize(size)
	self.Layout.CornerSize = size or 0
end

function CLASS:GetBorderWidth()
	return self.Layout.BorderWidth or 0
end

function CLASS:SetBorderWidth(size)
	self.Layout.BorderWidth = size or 0
end

function CLASS:IsSeen()
	return SERVER or (self.isseen and self.isReady)
end

function CLASS:SetDebug(allowdebug)
	if SERVER then return end
	allowdebug = allowdebug and true or false

	if self:GetDebug() == allowdebug then
		return
	end

	if not allowdebug then
		self._Debug:Remove()
		self._Debug = nil
		self:InvalidateLayout()
		return
	end

	self._Debug = self:AddPanelByClassname("debug")
	self._Debug:SetName("debug")
	self._Debug:SetNWName("debug")
	self:InvalidateLayout()
end

function CLASS:GetDebug()
	if not IsValid(self._Debug) then
		return false
	end

	return true
end

function CLASS:SetSkin(...)
	if not IsValid(self._Skin) then
		return
	end

	return self._Skin:SetSkin(...)
end

function CLASS:SetSkinInternal(...)
	return BASE.SetSkin(self, ...)
end

function CLASS:GetSkin(...)
	if not IsValid(self._Skin) then
		return {}
	end

	return self._Skin:GetSkin(...)
end

function CLASS:SetSkinProperty(...)
	if not IsValid(self._Skin) then
		return
	end

	return self._Skin:SetProperty(...)
end

function CLASS:SetSkinOnServer(...)
	if not IsValid(self._Skin) then
		return
	end

	return self._Skin:SetSkinOnServer(...)
end

function CLASS:SetSkinPropertyOnServer(...)
	if not IsValid(self._Skin) then
		return
	end

	return self._Skin:SetPropertyOnServer(...)
end

function CLASS:SetCursorColor(color)
	if SERVER then return end

	color = color or {}
	color = Color(
		color.r or 0,
		color.g or 0,
		color.b or 0,
		color.a or 0
	)

	self.Colors.Cursor = color
end

function CLASS:GetCursorColor()
	if SERVER then return end

	local col = self.Colors.Cursor
	return col
end

function CLASS:SetName(...)
	BASE.SetName(self, ...)

	local name = self:GetName()
	local nwname = self:GetName()

	if IsValid(self._Skin) then
		self._Skin:SetName(name .. "/skin")
		self._Skin:SetNWName(nwname .. "/sk")
	end

	if IsValid(self._RT) then
		self._RT:SetName(name .. "/rendertarget")
		self._RT:SetNWName(nwname .. "/rt")
	end
end

function CLASS:SetEntity(...)
	BASE.SetEntity(self, ...)

	if IsValid(self._Skin) then
		self._Skin:SetEntity(...)
	end
end

function CLASS:LoadToDupe(dupeTable)
	if not SERVER then return end
	if not istable(dupeTable) then return end

	self:LoadToDupeInternal(dupeTable)

	self:ForEachChildRecursive(function(this, child)
		child:LoadToDupeInternal(dupeTable)
	end)

	if IsValid(self._Skin) then
		self._Skin:LoadToDupeInternal(dupeTable)
	end
end

function CLASS:LoadFromDupe(dupeTable)
	if not SERVER then return end
	if not istable(dupeTable) then return end

	self:LoadFromDupeInternal(dupeTable)

	self:ForEachChildRecursive(function(this, child)
		child:LoadFromDupeInternal(dupeTable)
	end)

	if IsValid(self._Skin) then
		self._Skin:LoadFromDupeInternal(dupeTable)
	end
end

function CLASS:AddToNwRegister(nwRegister)
	if not istable(nwRegister) then return end

	self:AddToNwRegisterInternal(nwRegister)

	self:ForEachChildRecursive(function(this, child)
		child:AddToNwRegisterInternal(nwRegister)
	end)

	if IsValid(self._Skin) then
		self._Skin:AddToNwRegisterInternal(nwRegister)
	end
end

function CLASS:RemoveFromNwRegister(nwRegister)
	if not istable(nwRegister) then return end

	self:RemoveFromNwRegisterInternal(nwRegister)

	self:ForEachChildRecursive(function(this, child)
		child:RemoveFromNwRegisterInternal(nwRegister)
	end)

	if IsValid(self._Skin) then
		self._Skin:RemoveFromNwRegisterInternal(nwRegister)
	end
end

function CLASS:ActivateNetworkedMode()
	BASE.ActivateNetworkedMode(self)

	if not IsValid(self._Skin) then return end
	self._Skin:ActivateNetworkedMode(self)
end

function CLASS:OnModelSetup(setup)
	BASE.OnModelSetup(self, setup)

	if setup.cornersize then
		self:SetCornerSize(setup.cornersize)
	end

	if setup.borderwidth then
		self:SetBorderWidth(setup.borderwidth)
	end
end

function CLASS:OnPanelElementLoaded()
	self.loadedAt = RealTime() + g_loadedAtDelay
	self.isLoading = true
end

function CLASS:IsLoading()
	return self.isLoading or false
end

function CLASS:IsReady()
	return self.isReady or false
end

return true


--lua/streamradio_core/classes/ui/label.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/text.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local BASE = CLASS:GetBaseClass()
local changehooks = {
	Text = "OnTextChange",
	Font = "OnFontChange",
	AlignX = "OnAlignChange",
	AlignY = "OnAlignChange",
}

function CLASS:Create()
	BASE.Create(self)

	self.Clickable = false

	self.Lines = {}
	self.TextData = self:CreateListener({
		Text = "",
		Font = "DermaDefault",

		AlignX = TEXT_ALIGN_LEFT,
		AlignY = TEXT_ALIGN_TOP,
		StartLine = 1,
	}, function(this, k, v)
		self:InvalidateLayout()

		if k == "Text" then
			self:QueueCall("BuildLines")
		end

		if k == "Font" then
			self:QueueCall("BuildLines")
		end

		local hookname = changehooks[k]
		if not hookname then return end

		self:CallHook(hookname)
	end)

	if CLIENT then
		self.Size = self.Size + function(this, k, v)
			if k ~= "w" then return end
			self:QueueCall("BuildLines")
		end

		self.Colors.Main = Color(0, 0, 0)
	end

	self:SetSkinAble(false)
end

function CLASS:PerformLayout(...)
	BASE.PerformLayout(self, ...)

	self:DelCacheValue("GetTextSize")
	self:DelCacheValue("GetVisibleLines")
	self:DelCacheValue("GetTotalTextSize")
end

function CLASS:BuildLines(force)
	if SERVER then return end

	self:DelCacheValue("GetTextSize")
	self:DelCacheValue("GetVisibleLines")
	self:DelCacheValue("GetTotalTextSize")

	local font = self.TextData.Font
	local text = self.TextData.Text
	local w = self:GetSize()

	self:GetWidth()

	self.Lines = {}

	local line = {}
	local linew = 0

	surface.SetFont( font )
	local checksize = {"W", "M", "L", "I", "i", "l", ".", "g", "|", "_"}

	for k, v in ipairs(checksize) do
		local tsw = surface.GetTextSize(v)

		if tsw >= w then
			self:InvalidateLayout()
			return
		end
	end

	if text == "" then
		self:InvalidateLayout()
		return
	end

	text = string.gsub(text, "\r[\n]?", "\n")

	local function newline()
		local text = table.concat(line, "")
		table.insert(self.Lines, text)

		line = {}
		linew = 0
	end

	local function addtoline(text)
		text = text or ""
		local count = #line

		if count <= 0 then
			text = string.TrimLeft(text)
		end

		if text == "" then
			return
		end

		local tsw = surface.GetTextSize( text )
		local newlinew = linew + tsw

		-- Word to long, seperate it
		if tsw > w then
			for i = 1, #text do
				addtoline(text[i])
			end

			return
		end

		-- Line length reached, insert a new line
		if newlinew > w then
			newline()
			addtoline(text)
			return
		end

		line[count + 1] = text
		linew = newlinew
	end

	for n, s, w, p in string.gmatch( text, "([\n]?)([^%w%p_\n]*)([%w_]*)([%p]*)" ) do
		if n == "\n" then
			newline()
		end

		addtoline(s)
		addtoline(w .. p)
	end

	newline()

	self:InvalidateLayout()
	self:CallHook("OnBuildLines")
end

function CLASS:DrawText( text, x, y, w, h, tsw, tsh )
	text = text or ""
	if text == "" then return end

	local tx, ty = x, y
	local xalign, yalign = self.TextData.AlignX, self.TextData.AlignY

	if ( xalign == TEXT_ALIGN_CENTER ) then
		tx = x + w / 2 - tsw / 2
	elseif ( xalign == TEXT_ALIGN_RIGHT ) then
		tx = x + w - tsw
	end

	if ( yalign == TEXT_ALIGN_CENTER ) then
		ty = y + h / 2 - tsh / 2
	elseif ( yalign == TEXT_ALIGN_BOTTOM ) then
		ty = y + h - tsh
	end

	surface.SetTextPos( math.ceil( tx ), math.ceil( ty ) )
	surface.DrawText( text )
end

function CLASS:Render()
	BASE.Render(self)

	local x, y = self:GetRenderPos()
	local w, h = self:GetSize()

	local col = self.Colors.Main or color_black
	local font = self.TextData.Font

	surface.SetFont( font )
	surface.SetTextColor( col:Unpack() )

	local lines = self:GetVisibleLines()
	local _, texth = self:GetTextSize()

	for i, v in ipairs(lines) do
		local text = v.text
		local ox = v.x
		local oy = v.y
		local ow = v.w

		self:DrawText(text, x + ox, y + oy, w, h, ow, texth)
	end
end

function CLASS:SetTextColor(...)
	return self:SetColor(...)
end

function CLASS:GetTextColor(...)
	return self:GetColor(...)
end

function CLASS:SetText(text)
	self.TextData.Text = tostring(text or "")
end

function CLASS:GetText()
	return self.TextData.Text or ""
end

function CLASS:GetTotalTextSize()
	if SERVER then return 0, 0 end

	local chtextw, chtextw = self:GetCacheValues("GetTotalTextSize")
	if chtextw then return chtextw, chtextw end

	local textw = 0
	local texth = 0
	local count = self:GetLineCount()

	surface.SetFont(self.TextData.Font)

	for i = 1, count do
		local text = self.Lines[i] or ""
		local tsw, tsh = surface.GetTextSize( text )

		if textw < tsw then
			textw = tsw
		end

		local newlineh = texth + tsh + 1
		texth = newlineh
	end

	return self:SetCacheValues("GetTotalTextSize", textw, texth)
end

function CLASS:FitToText(minw, maxw)
	self:SetWidth(maxw)
	self:BuildLines()

	local w, h = self:GetTotalTextSize()
	w = math.Clamp(w, minw, maxw)

	self:SetSize(w, h)
end

function CLASS:GetTextSize()
	if SERVER then return 0, 0 end

	local chtextw, chtextw = self:GetCacheValues("GetTextSize")
	if chtextw then return chtextw, chtextw end

	local w, h = self:GetSize()

	local textw = 0
	local texth = 0

	local count = self:GetLineCount()
	local startline = self:GetStartLine()

	surface.SetFont(self.TextData.Font)

	for i = startline, count do
		local text = self.Lines[i] or ""
		local tsw, tsh = surface.GetTextSize( text )

		if textw < tsw then
			textw = tsw
		end

		local newlineh = texth + tsh + 1
		if newlineh > h then
			break
		end

		texth = newlineh
	end

	if textw > w then
		textw = w
	end

	if texth > h then
		texth = h
	end

	return self:SetCacheValues("GetTextSize", textw, texth)
end

function CLASS:GetVisibleLines()
	if SERVER then return end

	local chlines = self:GetCacheValue("GetVisibleLines")
	if chlines then return chlines end

	local liney = 0
	local _, texth = self:GetTextSize()

	local startline = self:GetStartLine()

	local lines = {}

	surface.SetFont(self.TextData.Font)

	local i = startline
	while (true) do
		local text = self.Lines[i] or ""
		local tsw, tsh = surface.GetTextSize( text )

		local newliney = liney + tsh + 1
		if newliney > texth then
			break
		end

		local data = {
			text = text,
			w = tsw,
			h = tsh,
			x = 0,
			y = liney,
		}

		table.insert(lines, data)
		liney = newliney
		i = i + 1
	end

	return self:SetCacheValue("GetVisibleLines", lines)
end

function CLASS:SetFont(font)
	if SERVER then return end
	self.TextData.Font = font or ""
end

function CLASS:GetFont()
	if SERVER then return end
	return self.TextData.Font or ""
end

function CLASS:SetAlign(alignX, alignY)
	if SERVER then return end
	self.TextData.AlignX = alignX or self.TextData.AlignX or TEXT_ALIGN_LEFT
	self.TextData.AlignY = alignY or self.TextData.AlignY or TEXT_ALIGN_TOP
end

function CLASS:GetAlign()
	if SERVER then return end
	return self.TextData.AlignX or TEXT_ALIGN_LEFT, self.TextData.AlignY or TEXT_ALIGN_TOP
end

function CLASS:SetStartLine(startline)
	if SERVER then return end
	self.TextData.StartLine = startline or 1
end

function CLASS:GetStartLine()
	if SERVER then return end

	local count = self:GetLineCount()
	local startline = math.Clamp(self.TextData.StartLine, 1, count)

	return startline
end

function CLASS:GetLineCount()
	if SERVER then return end
	return #self.Lines
end

function CLASS:OnModelSetup(setup)
	BASE.OnModelSetup(self, setup)

	if setup.font then
		self:SetFont(setup.font)
	end
end

return true


--lua/streamradio_core/classes/ui/tooltip.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/radio/gui_errorbox.lua:
return gluapack()()
--lua/streamradio_core/client/settings/general.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Settings = StreamRadioLib.Settings or {}
local LIB = StreamRadioLib.Settings

local LIBMenu = StreamRadioLib.Menu

local g_drawdistance = 0
local g_hidespectrumbars = false
local g_spectrumdistance = 0
local g_spectrumbars = 0
local g_rendertarget = true
local g_rendertarget_fps = 10
local g_3dsound = true
local g_key = 0
local g_key_vehicle = 0
local g_volume = 1
local g_coveredvolume = 0

local g_lastThink = 0

LIB.g_CV_List["general"] = {}

LIB.AddConVar("general", "mute", "cl_streamradio_mute", "0", {
	label = "Mute all radios",
	help = "Mutes all radios when set to 1. Default: 0",
	type = "bool",
	userdata = true,
})

LIB.AddConVar("general", "mute_foreign", "cl_streamradio_mute_foreign", "0", {
	label = "Mute all radios from other players",
	help = "Mutes all radios from other players when set to 1. Default: 0",
	type = "bool",
	userdata = true,
})

LIB.AddConVar("general", "muteunfocused", "cl_streamradio_muteunfocused", "0", {
	label = "Mute radios on game unfocus",
	help = "Mutes all radios when the game is not in focus if set to 1. Default: 0",
	type = "bool",
	userdata = true,
})

LIB.AddConVar("general", "mutedistance", "cl_streamradio_mutedistance", "2000", {
	label = "Mute at distance",
	help = "Mutes all radios which are further away than the given units. Min: 500, Max: 5000, Default: 2000",
	type = "int",
	userdata = true,
	min = 500,
	max = 5000,
})

LIB.AddConVar("general", "hidegui", "cl_streamradio_hidegui", "0", {
	label = "Hide GUIs",
	help = "Disables the drawing of GUIs for all radios when set to 1. Default: 0",
	type = "bool",
	userdata = true,
})

LIB.AddConVar("general", "drawdistance", "cl_streamradio_drawdistance", "1000", {
	label = "GUI draw distance",
	help = "Stops GUIs drawing on radios which are further away than the given distance units. Min: 400, Max: 4000, Default: 1000",
	type = "int",
	userdata = true,
	min = 400,
	max = 4000,
})

LIB.AddConVar("general", "hidespectrumbars", "cl_streamradio_hidespectrumbars", "0", {
	label = "Hide spectrum bars",
	help = "Disables the drawing of FFT spectrums for all radios when set to 1. Default: 0",
	type = "bool",
})

LIB.AddConVar("general", "spectrumdistance", "cl_streamradio_spectrumdistance", "500", {
	label = "Spectrum draw distance",
	help = "Stops FFT spectrum drawing on radios which are further away than the given distance units. Min: 250, Max: 2500, Default: 500",
	type = "int",
	min = 250,
	max = 2500,
})

LIB.AddConVar("general", "spectrumbars", "cl_streamradio_spectrumbars", "128", {
	label = "Spectrum bars",
	help = "Sets the max count of FFT spectrum bars on radios. Higher amounts can decrease performance. Min: 8, Max: 2048, Default: 128",
	type = "int",
	min = 8,
	max = 2048,
})

LIB.AddConVar("general", "rendertarget", "cl_streamradio_rendertarget", "1", {
	label = "Enable rendertargets",
	help = "Enable rendertargets for drawing radio GUIs when set to 1. Disable this if you see graphics glitches. Default: 1",
	type = "bool",
})

LIB.AddConVar("general", "rendertarget_fps", "cl_streamradio_rendertarget_fps", "40", {
	label = "Rendertarget FPS",
	help = "Sets the max FPS of rendertargets. Higher amounts can decrease performance. Min: 5, Max: 300, Default: 40",
	type = "int",
	min = 5,
	max = 300,
})

LIB.AddConVar("general", "key", "cl_streamradio_key", KEY_E, {
	label = "Radio control/use key",
	help = "",
	type = "numpad",
})

LIB.AddConVar("general", "key_vehicle", "cl_streamradio_key_vehicle", MOUSE_LEFT, {
	label = "Radio control/use key while in vehicles",
	help = "",
	type = "numpad",
})

LIB.AddConVar("general", "volume", "cl_streamradio_volume", "1", {
	label = "Global volume",
	help = "Set the global volume factor for all radios. Default: 1, Min: 0, Max: 1 or 10",
	type = "float",
	userdata = true,
	min = 0,
	max = 10,
})

LIB.AddConVar("general", "coveredvolume", "cl_streamradio_coveredvolume", "0.33", {
	label = "Volume factor of radios behind walls",
	help = "Set the volume factor of radios that are behind walls. Default: 0.33, Min: 0, Max: 1",
	type = "float",
	min = 0,
	max = 1,
})

LIB.AddConVar("general", "enable_cursor", "cl_streamradio_enable_cursor", "1", {
	label = "Show cursor",
	help = "Shows the cursor on radio GUIs when set to 1. Default: 1",
	type = "bool",
})

LIB.AddConVar("general", "no3dsound", "cl_streamradio_no3dsound", "0", {
	label = "Disable 3D Sound",
	help = "Disables 3D sound for all radios when set to 1. Default: 0",
	type = "bool",
})

LIB.AddConVar("general", "bass3_enable", "cl_streamradio_bass3_enable", "1", {
	label = "Use GM_BASS3 if installed",
	help = "When set to 1, it uses GM_BASS3 if installed on client and allowed on the server. Default: 1",
	type = "bool",
})

local function BuildMenuPanel(CPanel)
	if not IsValid(CPanel) then return end

	local toplabel = vgui.Create("DLabel")
	toplabel:SetText("3D Stream Radio general settings")
	toplabel:SetDark(true)
	toplabel:SizeToContents()
	CPanel:AddPanel(toplabel)

	local StreamRadioLib = StreamRadioLib or {}

	if not StreamRadioLib.Loaded then
		if StreamRadioLib.Loader_CreateErrorPanel then
			StreamRadioLib.Loader_CreateErrorPanel(CPanel, "This menu could not be loaded.")
		end

		return
	end

	local cvBass3Enable = LIB.GetConVar("bass3_enable")
	cvBass3Enable:SetDisabled(not StreamRadioLib.Bass.IsInstalled())

	CPanel:Button(
		"Clear client stream cache",
		"cl_streamradio_cacheclear"
	)

	CPanel:AddPanel(LIBMenu.GetSpacer())

	for i, v in ipairs(LIB.GetConVarListByNamespace("general")) do
		if not IsValid(v) then continue end

		local p = v:BuildPanel(CPanel)
		if not IsValid(p) then continue end

		p:SetTooltip(v:GetPanellabel())
	end

	CPanel:AddPanel(LIBMenu.GetSpacer())

	CPanel:AddPanel(LIBMenu.GetOpenToolButton())
	CPanel:AddPanel(LIBMenu.GetOpenAdminSettingsButton())
	CPanel:AddPanel(LIBMenu.GetPlaylistEditorButton())

	CPanel:AddPanel(LIBMenu.GetSpacer(5))
	CPanel:AddPanel(LIBMenu.GetFAQButton())
	CPanel:AddPanel(LIBMenu.GetCreditsPanel())
end

LIB.AddBuildMenuPanelHook("general", "General Settings", BuildMenuPanel)

function StreamRadioLib.GetDrawDistance()
	return g_drawdistance
end

function StreamRadioLib.IsSpectrumHidden()
	return g_hidespectrumbars
end

function StreamRadioLib.GetSpectrumDistance()
	return g_spectrumdistance
end

function StreamRadioLib.GetSpectrumBars()
	return g_spectrumbars
end

function StreamRadioLib.IsRenderTarget()
	return g_rendertarget
end

function StreamRadioLib.GetRenderTargetFPS()
	return g_rendertarget_fps
end

function StreamRadioLib.Is3DSound()
	return g_3dsound
end

function StreamRadioLib.GetControlKey()
	return g_key
end

function StreamRadioLib.GetControlKeyVehicle()
	return g_key_vehicle
end

function StreamRadioLib.GetGlobalVolume()
	return g_volume
end

function StreamRadioLib.GetCoveredVolume()
	return g_coveredvolume
end

local function calcRendertargetFps()
	if StreamRadioLib.IsGUIHidden() then
		-- When we have no GUIs, limit FPS that also affects g_fastlistenfunc think in base_listener.lua
		return 5
	end

	local fps = LIB.GetConVarValue("rendertarget_fps")

	fps = math.max(fps, 2)

	return fps
end

local function calcIsRendertarget()
	if ScrW() < 1024 then
		return false
	end

	if ScrH() < 512 then
		return false
	end

	return LIB.GetConVarValue("rendertarget")
end

StreamRadioLib.Hook.Add("Think", "SettingsUpdate", function()
	local now = RealTime()

	if g_lastThink < now then
		g_drawdistance = LIB.GetConVarValue("drawdistance")
		g_hidespectrumbars = LIB.GetConVarValue("hidespectrumbars")
		g_spectrumdistance = LIB.GetConVarValue("spectrumdistance")
		g_spectrumbars = LIB.GetConVarValue("spectrumbars")
		g_rendertarget = calcIsRendertarget()
		g_rendertarget_fps = calcRendertargetFps()
		g_3dsound = not LIB.GetConVarValue("no3dsound")

		g_lastThink = now + 1 + math.random()
	end

	g_key = LIB.GetConVarValue("key")
	g_key_vehicle = LIB.GetConVarValue("key_vehicle")
	g_volume = LIB.GetConVarValue("volume")
	g_coveredvolume = LIB.GetConVarValue("coveredvolume")
end)

return true


--lua/streamradio_core/interfaces/youtube.lua:
local RADIOIFACE = RADIOIFACE
if not istable( RADIOIFACE ) then
	StreamRadioLib.Interface.Load()
	return
end

RADIOIFACE.name = "YouTube"
RADIOIFACE.priority = -10000
RADIOIFACE.online = true
RADIOIFACE.cache = false

RADIOIFACE.downloadTimeout = 0
RADIOIFACE.downloadFirst = false
RADIOIFACE.allowCaching = false

local ERROR_UNSUPPORTED = 110000

local youtube_help_url = "https://steamcommunity.com/workshop/filedetails/discussion/246756300/4523281307928803506/"

StreamRadioLib.Error.AddStreamErrorCode({
	id = ERROR_UNSUPPORTED,
	name = "STREAM_ERROR_YOUTUBE_UNSUPPORTED",
	description = "[YouTube] YouTube is not supported",
	helptext = [[
YouTube is not supported. Please use other media sources.
You can use a Youtube to MP3 converter, but it is not recommended.

Notes:
	- Reliable YouTube support can't be added. It is impossible.
	- Please, don't ask me about it.
	- View the online help link for more information.
]],
	helpurl = youtube_help_url,
})

local YoutubeURLs = {
	"youtube://",
	"yt://",
	"://youtube.",
	".youtube.",
	"://youtu.be",
}

function RADIOIFACE:CheckURL(url)
	for i, v in ipairs(YoutubeURLs) do
		local result = string.find(string.lower(url), v, 1, true)

		if not result then
			continue
		end

		return true
	end

	return false
end

function RADIOIFACE:Convert(url, callback)
	callback(self, false, nil, ERROR_UNSUPPORTED)
	return
end

return true


--lua/streamradio_core/filesystem/_folder.lua:
return gluapack()()
--lua/svmod/compatibility/cl_compatibility.lua:
hook.Add("InitPostEntity", "SV_VCModCommand", function()
	timer.Simple(10, function()
		if not VC then
			concommand.Add("vcmod", function()
				SVMOD:PrintConsole(SVMOD.LOG.Error, language.GetPhrase("svmod.vcmod"))
			end)
		end
	end)
end)
--lua/svmod/gui/editor/cl_fuel.lua:
function SVMOD:EDITOR_Fuel(panel, veh, data)
	panel:Clear()

	SVMOD:CreateTitle(panel, language.GetPhrase("svmod.fuel.fuel"))

	local capacityNumSlider = SVMOD:CreateNumSlidePanel(panel, "Capacity", function(val)
		data.Capacity = val
	end)
	capacityNumSlider:SetMaxValue(110)
	capacityNumSlider:SetValue(data.Capacity or 60)
	capacityNumSlider:SetUnit("L")

	local consumptionNumSlider = SVMOD:CreateNumSlidePanel(panel, "Consumption", function(val)
		data.Consumption = val
	end)
	consumptionNumSlider:SetMaxValue(30)
	consumptionNumSlider:SetValue(data.Consumption or 5)
	consumptionNumSlider:SetUnit("L / 100 km")

	SVMOD:CreateHorizontalLine(panel)

	local leftPanel = vgui.Create("DPanel", panel)
	leftPanel:Dock(LEFT)
	leftPanel:DockPadding(0, 0, 10, 0)
	leftPanel:SetSize(100, 0)
	leftPanel:SetPaintBackground(false)

	local listView = SVMOD:CreateListView(leftPanel)
	listView:SetHideHeaders(true)
	listView:Dock(FILL)
	listView:AddColumn("ID")
	listView:SetMultiSelect(false)

	local addFuel

	local addButton = SVMOD:CreateButton(leftPanel, "ADD", function()
		local index = table.insert(data.GasTank, {
			GasHole = {
				Position = Vector(0, 0, 0),
				Angles = Angle(0, 0, 0)
			},
			GasolinePistol = {
				Position = Vector(0, 0, 0),
				Angles = Angle(0, 0, 0)
			}
		})
		addFuel(data.GasTank[index])
	end)
	addButton:SetSize(0, 30)
	addButton:Dock(BOTTOM)

	local centerPanel = vgui.Create("DPanel", panel)
	centerPanel:Dock(FILL)
	centerPanel:SetPaintBackground(false)

	local function createNumSlidePanel(name, defaultValue, minValue, maxValue)
		local numSlider = SVMOD:CreateNumSlidePanel(centerPanel, name, function() end)
		numSlider:SetSize(400, 30)
		numSlider:SetValue(defaultValue)
		numSlider:SetMinValue(minValue)
		numSlider:SetMaxValue(maxValue)
		numSlider:SetUnit(" ")
		numSlider:SetRealTime(true)

		return numSlider
	end

	-- -------------------
	--  FUNCTIONS
	-- -------------------

	addFuel = function(data)
		local max = 0
		for _, line in pairs(listView:GetLines()) do
			local index = line:GetIndex()
			if index > max then
				max = index
			end
		end

		local line = listView:AddLine(max + 1)
		line.Data = data

		return line
	end

	local function removeFuel(lineID, line)
		local index = line:GetIndex()

		table.remove(data.GasTank, index)

		for _, v in pairs(listView:GetLines()) do
			local i = v:GetIndex()
			if i > index then
				v:SetColumnText(1, i - 1)
			end
		end

		listView:RemoveLine(lineID)
	end

	local function upFuel(index)
		local line = listView:GetLine(index)
		lineIndex = line:GetIndex()

		for _, v in pairs(listView:GetLines()) do
			local tempIndex = v:GetIndex()
			if tempIndex == lineIndex - 1 then
				data.GasTank[lineIndex], data.GasTank[tempIndex] = data.GasTank[tempIndex], data.GasTank[lineIndex]
				line.Data, v.Data = v.Data, line.Data
				listView:GetLine(tempIndex):SetColumnText(1, tempIndex)
				listView:GetLine(lineIndex):SetColumnText(1, lineIndex)
				break
			end
		end
	end

	local function downFuel(index)
		local line = listView:GetLine(index)
		lineIndex = line:GetIndex()

		for _, v in pairs(listView:GetLines()) do
			local tempIndex = v:GetIndex()
			if tempIndex == lineIndex + 1 then
				data.GasTank[lineIndex], data.GasTank[tempIndex] = data.GasTank[tempIndex], data.GasTank[lineIndex]
				line.Data, v.Data = v.Data, line.Data
				listView:GetLine(tempIndex):SetColumnText(1, tempIndex)
				listView:GetLine(lineIndex):SetColumnText(1, lineIndex)
				break
			end
		end
	end

	for _, v in ipairs(data.GasTank) do
		addFuel(v)
	end

	listView.OnRowRightClick = function(_, lineID, line)
		local menu = DermaMenu()

		menu:AddOption("Up", function()
			upFuel(lineID)
		end):SetIcon("icon16/arrow_up.png")

		menu:AddOption("Down", function()
			downFuel(lineID)
		end):SetIcon("icon16/arrow_down.png")

		menu:AddOption("Symmetric", function()
			local index = table.insert(data.GasTank, SVMOD:DeepCopy(line.Data))
			local tab = addFuel(data.GasTank[index])
			tab.Data.GasHole.Position.x = -line.Data.GasHole.Position.x
			tab.Data.GasHole.Angles.y = line.Data.GasHole.Angles.y - 180
			if tab.Data.GasHole.Angles.y < -180 then
				tab.Data.GasHole.Angles.y = 180 - (tab.Data.GasHole.Angles.y + 180)
			end
			tab.Data.GasHole.Angles.z = line.Data.GasHole.Angles.z + 90
			if tab.Data.GasHole.Angles.z > 180 then
				tab.Data.GasHole.Angles.z = -180 + (tab.Data.GasHole.Angles.z - 180)
			end

			tab.Data.GasolinePistol.Position.x = -line.Data.GasolinePistol.Position.x
			tab.Data.GasolinePistol.Angles.y = tab.Data.GasolinePistol.Angles.y + 180
			if tab.Data.GasolinePistol.Angles.y > 180 then
				tab.Data.GasolinePistol.Angles.y = -180 + (tab.Data.GasolinePistol.Angles.y - 180)
			end
		end):SetIcon("icon16/arrow_refresh.png")

		menu:AddOption("Delete", function()
			removeFuel(lineID, line)
		end):SetIcon("icon16/cross.png")

		menu:Open()
	end

	listView.OnRowSelected = function(_, _, e)
		centerPanel:Clear()

		local gasolinePistol = ClientsideModel("models/kaesar/kaesar_weapons/w_petrolgun.mdl")

		local title = SVMOD:CreateTitle(centerPanel, "GAS TANK HUD POSITION")
		title:DockMargin(0, 5, 0, 0)
		local button = SVMOD:CreateButton(title, "EyePos", function()
			local trace = LocalPlayer():GetEyeTrace()

			if IsValid(trace.Entity) and trace.Entity:IsVehicle() then
				e.Data.GasHole.Position = trace.Entity:WorldToLocal(trace.HitPos)

				xPositionNumSlider:SetValue(e.Data.GasHole.Position.x)
				yPositionNumSlider:SetValue(e.Data.GasHole.Position.y)
				zPositionNumSlider:SetValue(e.Data.GasHole.Position.z)
			end
		end)
		button:Dock(RIGHT)

		xPositionNumSlider = createNumSlidePanel("X Position", e.Data.GasHole.Position.x, -200, 200)
		xPositionNumSlider:SetFunction(function(val)
			e.Data.GasHole.Position.x = val
		end)

		yPositionNumSlider = createNumSlidePanel("Y Position", e.Data.GasHole.Position.y, -200, 200)
		yPositionNumSlider:SetFunction(function(val)
			e.Data.GasHole.Position.y = val
		end)

		zPositionNumSlider = createNumSlidePanel("Z Position", e.Data.GasHole.Position.z, -200, 200)
		zPositionNumSlider:SetFunction(function(val)
			e.Data.GasHole.Position.z = val
		end)

		local title = SVMOD:CreateTitle(centerPanel, "GAS TANK HUD ANGLE")
		title:DockMargin(0, 30, 0, 0)

		local xAngleNumSlider = createNumSlidePanel("Y Angle", e.Data.GasHole.Angles.x, -180, 180)
		xAngleNumSlider:SetFunction(function(val)
			e.Data.GasHole.Angles.x = val
		end)

		local yAngleNumSlider = createNumSlidePanel("P Angle", e.Data.GasHole.Angles.y, -180, 180)
		yAngleNumSlider:SetFunction(function(val)
			e.Data.GasHole.Angles.y = val
		end)

		local zAngleNumSlider = createNumSlidePanel("R Angle", e.Data.GasHole.Angles.z, -180, 180)
		zAngleNumSlider:SetFunction(function(val)
			e.Data.GasHole.Angles.z = val
		end)

		local xPistolPositionNumSlider, yPistolPositionNumSlider, zPistolPositionNumSlider

		local title = SVMOD:CreateTitle(centerPanel, "GASOLINE PISTOL POSITION")
		title:DockMargin(0, 30, 0, 0)
		local button = SVMOD:CreateButton(title, "EyePos", function()
			local trace = LocalPlayer():GetEyeTrace()

			if IsValid(trace.Entity) and trace.Entity:IsVehicle() then
				e.Data.GasolinePistol.Position = trace.Entity:WorldToLocal(trace.HitPos)

				xPistolPositionNumSlider:SetValue(e.Data.GasolinePistol.Position.x)
				yPistolPositionNumSlider:SetValue(e.Data.GasolinePistol.Position.y)
				zPistolPositionNumSlider:SetValue(e.Data.GasolinePistol.Position.z)

				gasolinePistol:SetPos(veh:LocalToWorld(e.Data.GasolinePistol.Position))
			end
		end)
		button:Dock(RIGHT)

		xPistolPositionNumSlider = createNumSlidePanel("X Position", e.Data.GasolinePistol.Position.x, -200, 200)
		xPistolPositionNumSlider:SetFunction(function(val)
			e.Data.GasolinePistol.Position.x = val
			gasolinePistol:SetPos(veh:LocalToWorld(e.Data.GasolinePistol.Position))
		end)

		yPistolPositionNumSlider = createNumSlidePanel("Y Position", e.Data.GasolinePistol.Position.y, -200, 200)
		yPistolPositionNumSlider:SetFunction(function(val)
			e.Data.GasolinePistol.Position.y = val
			gasolinePistol:SetPos(veh:LocalToWorld(e.Data.GasolinePistol.Position))
		end)

		zPistolPositionNumSlider = createNumSlidePanel("Z Position", e.Data.GasolinePistol.Position.z, -200, 200)
		zPistolPositionNumSlider:SetFunction(function(val)
			e.Data.GasolinePistol.Position.z = val
			gasolinePistol:SetPos(veh:LocalToWorld(e.Data.GasolinePistol.Position))
		end)

		local title = SVMOD:CreateTitle(centerPanel, "GASOLINE PISTOL ANGLE")
		title:DockMargin(0, 30, 0, 0)

		local xAngleNumSlider = createNumSlidePanel("Y Angle", e.Data.GasolinePistol.Angles.x, -180, 180)
		xAngleNumSlider:SetFunction(function(val)
			e.Data.GasolinePistol.Angles.x = val
			gasolinePistol:SetAngles(veh:LocalToWorldAngles(e.Data.GasolinePistol.Angles))
		end)

		local yAngleNumSlider = createNumSlidePanel("P Angle", e.Data.GasolinePistol.Angles.y, -180, 180)
		yAngleNumSlider:SetFunction(function(val)
			e.Data.GasolinePistol.Angles.y = val
			gasolinePistol:SetAngles(veh:LocalToWorldAngles(e.Data.GasolinePistol.Angles))
		end)

		local zAngleNumSlider = createNumSlidePanel("R Angle", e.Data.GasolinePistol.Angles.z, -180, 180)
		zAngleNumSlider:SetFunction(function(val)
			e.Data.GasolinePistol.Angles.z = val
			gasolinePistol:SetAngles(veh:LocalToWorldAngles(e.Data.GasolinePistol.Angles))
		end)

		title.OnRemove = function()
			gasolinePistol:Remove()
		end

		gasolinePistol:SetPos(veh:LocalToWorld(e.Data.GasolinePistol.Position))
		gasolinePistol:SetAngles(veh:LocalToWorldAngles(e.Data.GasolinePistol.Angles))
	end

	veh:SV_ShowFillingHUD()

	centerPanel.OnRemove = function()
		veh:SV_HideFillingHUD()
	end
end
--lua/svmod/gui/editor/cl_parts.lua:
return gluapack()()
--lua/svmod/gui/settings/cl_damage.lua:
return gluapack()()
--lua/svmod/health/cl_wheel.lua:
return gluapack()()
--lua/svmod/lights/backlights/sh_backlights.lua:
return gluapack()()
--lua/svmod/lights/flashinglights/sh_flashinglights.lua:
-- @class SV_Vehicle
-- @shared

-- Gets the state of the vehicle's flashing lights.
-- @treturn boolean True if enabled, false if disabled
function SVMOD.Metatable:SV_GetFlashingLightsState()
	if self:SV_IsPassengerSeat() then
		return self:SV_GetDriverSeat().SV_States.FlashingLights
	end
	return self.SV_States.FlashingLights
end
--lua/svmod/lights/headlights/cl_headlights.lua:
-- @class SVMOD
-- @clientside

-- Sets the state of the headlights of the vehicle
-- driven by the player.
-- @tparam boolean result True to enable the headlights, false to disable
function SVMOD:SetHeadlightsState(value)
	local veh = LocalPlayer():GetVehicle()
	if not SVMOD:IsVehicle(veh) or not veh:SV_IsDriverSeat() then
		return
	end

	if not value then
		value = false
	end

	net.Start("SV_SetHeadlightsState")
	net.WriteBool(value)
	net.SendToServer()
end

net.Receive("SV_TurnHeadlights", function()
	local veh = net.ReadEntity()
	if not SVMOD:IsVehicle(veh) then return end
	veh = veh:SV_GetDriverSeat()

	local state = net.ReadBool()

	if state then
		veh.SV_States.Headlights = true

		veh:EmitSound("svmod/headlight/switch_on.wav")
	else
		veh.SV_States.Headlights = false

		for _, v in ipairs(veh.SV_Data.Headlights) do
			if v.ProjectedTexture and IsValid(v.ProjectedTexture.Entity) then
				v.ProjectedTexture.Entity:Remove()
				v.ProjectedTexture.Entity = nil
			end
		end

		veh:EmitSound("svmod/headlight/switch_off.wav")
	end
end)

hook.Add("EntityRemoved", "SV_RemoveHeadlights", function(ent)
	if not SVMOD:IsVehicle(ent) or not ent:SV_IsDriverSeat() then return end

	for _, v in pairs(ent.SV_Data.Headlights) do
		if v.ProjectedTexture and IsValid(v.ProjectedTexture.Entity) then
			v.ProjectedTexture.Entity:Remove()
		end
	end
end)
--lua/svmod/seats/sh_seats.lua:
return gluapack()()
--lua/svmod/shortcuts/cl_shortcuts.lua:
return gluapack()()
--lua/autorun/tdmcars_bmw.lua:
local PrVeh = "prop_vehicle_jeep"
local Cat = "TDM Cars"

local V = {
			Name = "BMW 340i", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster",
			Information = "A drivable BMW 340i by TheDanishMaster",
			Model = "models/tdmcars/bmw_340i.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/bmw_340i.txt"
							}
			}
list.Set("Vehicles", "bmw_340itdm", V)

local V = {
			Name = "BMW 507", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable BMW 507 by TheDanishMaster",
			Model = "models/tdmcars/bmw507.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/507.txt"
							}
			}
list.Set("Vehicles", "507tdm", V)


local V = {
			Name = "BMW 1M", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable BMW 1M by TheDanishMaster",
				Model = "models/tdmcars/bmw_1m.mdl",
				KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/bmw_1m.txt"
							}
			}
list.Set("Vehicles", "bmw1mtdm", V)

local V = {
			Name = "BMW Isetta 300 Export", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable BMW Isetta by TheDanishMaster",
				Model = "models/tdmcars/bmw_isetta.mdl",
				KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/bmw_isetta.txt"
							}
			}
list.Set("Vehicles", "bmw_isettatdm", V)

local V = {
			Name = "BMW M3 GTR", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable BMW M3 GTR by TheDanishMaster",
				Model = "models/tdmcars/bmw_m3_gtr.mdl",
				KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/bmwm3gtr.txt"
							}
			}
list.Set("Vehicles", "bmwm3gtrtdm", V)

local V = {
			Name = "BMW M5 E60", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable BMW M5 E60 by TheDanishMaster",
				Model = "models/tdmcars/bmwm5e60.mdl",
				KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/bmwm5e60.txt"
							}
			}
list.Set("Vehicles", "bmwm5e60tdm", V)

local V = {
			Name = "BMW M6 2013", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable BMW M6 2013 by TheDanishMaster",
				Model = "models/tdmcars/bmw_m6_13.mdl",
				KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/bmwm613.txt"
							}
			}
list.Set("Vehicles", "bmwm613tdm", V)

local V = {
			Name = "BMW M1 1981", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable BMW M1 1981 by TheDanishMaster",
				Model = "models/tdmcars/bmwm1.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/m1.txt"
							}
			}
list.Set("Vehicles", "m1tdm", V)

local V = {
			Name = "BMW M3 E92", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable BMW M3 E92 by TheDanishMaster",
			Model = "models/tdmcars/bmwm3e92.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/bmwm3e92.txt"
							}
			}
list.Set("Vehicles", "m3e92tdm", V)

local V = {
			Name = "BMW M5 E34", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable BMW M5 E34 by TheDanishMaster",
			Model = "models/tdmcars/bmwm5e34.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/bmwm5e34.txt"
						}
			}
list.Set("Vehicles", "m5e34tdm", V)

sound.Add( 
{
    name = "tdm_isetta_hithead",
    channel = CHAN_STATIC,
    volume = 1.0,
    level = 90,
	sound =	{ "vehicles/tdmcars/bmw_isetta/hithead_james.mp3", 
	"vehicles/tdmcars/bmw_isetta/hithead_james2.mp3", 
	"vehicles/tdmcars/bmw_isetta/hithead_richard.mp3",  
	"vehicles/tdmcars/bmw_isetta/hithead_richard2.mp3",  
	"","","","","","","","","","","","","","","","","",  
	"vehicles/tdmcars/bmw_isetta/hithead_richard3.mp3" }
} )
--lua/autorun/tdmcars_c32.lua:
return gluapack()()
--lua/autorun/tdmcars_emergency.lua:
local PrVeh = "prop_vehicle_jeep"
local Cat = "TDM Emergency"

local V = {
			Name = "Dodge Charger SRT8 Police", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Dodge Charger SRT8 Police by TheDanishMaster",
				Model = "models/tdmcars/emergency/chargersrt8.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/chargersrt8.txt",
							skin = "1"
							}
			}
list.Set("Vehicles", "chargersrt8poltdm", V)

local V = {
			Name = "Dodge Charger SRT8 2012 Police", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Dodge Charger SRT8 2012 Police by TheDanishMaster",
				Model = "models/tdmcars/emergency/dod_charger12.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/charger2012.txt",
							EnableGun 		=  '0' -- Change this to 1 to turn spotlights. A Taucannon will also be enabled so you will be able to shoot it.
							}
			}
list.Set("Vehicles", "charger12poltdm", V)

local V = {
			Name = "Ford Crown Victoria", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Ford Crown Victoria Police by TheDanishMaster",
			Model = "models/tdmcars/emergency/for_crownvic.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/for_crownvic.txt",
							EnableGun 		=  '0' -- Change this to 1 to turn spotlights. A Taucannon will also be enabled so you will be able to shoot it.
							}
			}
list.Set("Vehicles", "forcrownvicpoltdm", V)

local V = {
			Name = "Ford Taurus 2013", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Ford Taurus 2013 by TheDanishMaster",
			Model = "models/tdmcars/emergency/for_taurus_13.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/for_taurus_13.txt",
							skin = "2"
							}
			}
list.Set("Vehicles", "fortauruspoltdm", V)

local V = {
			Name = "Holden HSV W427 Police", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Holden HSV W427 Police by TheDanishMaster",
				Model = "models/tdmcars/hsvw427_pol.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/hsvw427.txt"
							}
			}
list.Set("Vehicles", "hsvw427poltdm", V)

local V = {
			Name = "Lexus IS300 Rozzers Car", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10, Top Gear",
			Information = "A drivable Lexus IS300 Rozzers Car by TheDanishMaster",
				Model = "models/tdmcars/emergency/lex_is300_jamesmay.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/lex_is300.txt"
							}
			}
list.Set("Vehicles", "lex_is300poltdm", V)

local V = {
			Name = "Mercedes E350 Police", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster",
			Information = "A drivable Mercedes E350 Police by TheDanishMaster",
				Model = "models/tdmcars/emergency/mer_eclass.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/mer_eclass.txt"
							}
			}
list.Set("Vehicles", "mereclasspoltdm", V)

local V = {
			Name = "Mitsubishi Evo X Police", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Mitsubishi Evo X Police by TheDanishMaster",
				Model = "models/tdmcars/emergency/mitsu_evox.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/mitsu_evox.txt"
							}
			}
list.Set("Vehicles", "mitsuevoxpoltdm", V)

local V = {
			Name = "Scania Firetruck", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Evermotion",
			Information = "A drivable Scania Firetruck by TheDanishMaster",
				Model = "models/tdmcars/trucks/scania_firetruck.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/scaniafire.txt"
							}
			}
list.Set("Vehicles", "scaniafiretdm", V)

if !TaurusAddProps_List then TaurusAddProps_List = {} end
hook.Add("PlayerSpawnedVehicle","TaurusAddProps", function( ply, vehicle )
    if vehicle:GetModel( ) == "models/tdmcars/emergency/for_taurus_13.mdl" then
        // Create the actual prop
        local prop1 = ents.Create( "prop_dynamic_ornament" )
        if ( !IsValid( prop1 ) ) then return end
        prop1:SetModel( "models/tdmcars/emergency/for_taurus_13_extra.mdl" )
        prop1:SetPos( vehicle:LocalToWorld(Vector(0,0,0) ))
        prop1:SetAngles( vehicle:LocalToWorldAngles(Angle(0,0,0)) )
        prop1:SetParent( vehicle )
        prop1:SetOwner( ply )
        prop1:Spawn()
        prop1:SetNoDraw(false)
        prop1:DrawShadow(true)
        prop1:Fire("DisableCollision")

        table.insert(TaurusAddProps_List, {vehicle, prop1})
        // Ensure that things are removed
        vehicle:CallOnRemove( "RemoveProps", function( vehicle, prop1 )
            if IsValid(prop1) then
                prop1:Remove()
            end
        end, prop1 )
        prop1:CallOnRemove( "RemoveParent", function( prop1, vehicle )
            if IsValid(vehicle) then
            vehicle:Remove()
            end
        end, vehicle)
    end
end)
// Yes, freemmaann did code this 
hook.Add("Think", "TaurusSyncChanges", function()
	if TaurusAddProps_List and (!TaurusSyncChanges_Timer or CurTime() >= TaurusSyncChanges_Timer) then
		for k, v in pairs(TaurusAddProps_List) do
			if IsValid(v[2]) then
				v[2]:SetMaterial(v[1]:GetMaterial()) v[2]:SetColor(v[1]:GetColor()) v[2]:SetSkin(v[1]:GetSkin())
				local bgroupstring = "0" for k2,v2 in pairs(v[1]:GetBodyGroups()) do bgroupstring = bgroupstring..v[1]:GetBodygroup(k2) end
				v[2]:SetBodyGroups(bgroupstring)
			else
				TaurusAddProps_List[k] = nil
			end
		end
		TaurusSyncChanges_Timer = CurTime()+0.5
	end
end)



--addons/override_workshop/lua/autorun/tdmcars_ford.lua:
return gluapack()()
--lua/autorun/tdmcars_h1_open.lua:
local V = {
			Name = "Hummer H1 Open top", 
			Class = "prop_vehicle_jeep",
			Category = "TDM Cars",
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Hummer H1 Open top by TheDanishMaster",
			Model = "models/tdmcars/hummerh1_open.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/h1.txt"
							}
			}
list.Set("Vehicles", "h1opentdm", V)
--lua/autorun/tdmcars_merslr.lua:
return gluapack()()
--lua/autorun/tdmcars_volkswagen.lua:
local PrVeh = "prop_vehicle_jeep"
local Cat = "TDM Cars"

local V = {
			Name = "Volkswagen Beetle 1968", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Volkswagen Beetle 1968 by TheDanishMaster",
			Model = "models/tdmcars/beetle.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/beetle68.txt"
							}
			}
list.Set("Vehicles", "beetle68tdm", V)


local V = {
			Name = "Volkswagen Golf MKII", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "The good old VW Golf MKII, gmod-able by TDM",
			Model = "models/tdmcars/golf_mk2.mdl",
			KeyValues = {
						vehiclescript	=	"scripts/vehicles/TDMCars/golfmk2.txt"
						}
			}
list.Set("Vehicles", "golfmk2tdm", V)

local V = {
			Name = "Volkswagen Golf VR6 GTi", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable VW Golf MK3 by TheDanishMaster",
			Model = "models/tdmcars/golfvr6_mk3.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/golfvr6.txt"
							}
			}
list.Set("Vehicles", "golfvr6tdm", V)

local V = {
			Name = "Volkswagen Golf R32", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable VW Golf R32 by TheDanishMaster",
			Model = "models/tdmcars/vw_golfr32.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/vw_golfr32.txt"
							}
			}
list.Set("Vehicles", "vw_golfr32tdm", V)

local V = {
			Name = "Volkswagen Golf GTI 2014", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Ubisoft",
			Information = "The Volkswagen Golf GTI 2014, gmod-able by TDM",
			Model = "models/tdmcars/vw_golfgti_14.mdl",
			KeyValues = {
						vehiclescript	=	"scripts/vehicles/TDMCars/vw_golfgti_14.txt"
						}
			}
list.Set("Vehicles", "vwgolfgti14tdm", V)

local V = {
			Name = "Volkswagen Camper 1965", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Ubisoft",
			Information = "The Volkswagen Camper 1965, gmod-able by TDM",
			Model = "models/tdmcars/vw_camper65.mdl",
			KeyValues = {
						vehiclescript	=	"scripts/vehicles/TDMCars/vwcamper.txt"
						}
			}
list.Set("Vehicles", "vwcampertdm", V)

local V = {
			Name = "Volkswagen Scirocco R", 
			Class = "prop_vehicle_jeep",
			Category = "TDM Cars",
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Volkswagen Scirocco R by TheDanishMaster",
			Model = "models/tdmcars/vw_sciroccor.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/sciroccor.txt"
							}
			}
list.Set("Vehicles", "vwsciroccortdm", V)

local V = {
			Name = "Volkswagen New Beetle Convertible", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Ubisoft",
			Information = "The Volkswagen New Beetle Convertible, gmod-able by TDM",
			Model = "models/tdmcars/vw_beetleconv.mdl",
			KeyValues = {
						vehiclescript	=	"scripts/vehicles/TDMCars/vwbeetleconv.txt"
						}
			}
list.Set("Vehicles", "vwbeetleconvtdm", V)




































if SERVER then
local i = 0
local ToggleIt = true
local function TDMBeetleRoof(ply,key)
        for k,v in pairs(ents.FindByClass("prop_vehicle_jeep*")) do
                        if v:GetModel() == "models/tdmcars/vw_beetleconv.mdl" then
                if IsValid(v:GetDriver()) then
                        if (key == IN_RIGHT) then
							if v:GetVelocity():Length() < 550 then
                                if ToggleIt then
                                                                timer.Create( "open", 0.01, 500, function()
                                                                        i = i + 0.02
                                                                        v:SetPoseParameter("roof_pose", i)
                                                                end)
                                                                timer.Destroy("close")
                                                                ToggleIt = false
                                                                else
                                                                timer.Create("close",0.01, 500, function()
                                                                        i = i - 0.02
                                                                        v:SetPoseParameter("roof_pose", i)
                                                                end)
                                                                ToggleIt = true
                                                                timer.Destroy("open")
																end
                              end
                        end
                end
                        end
                end
        end
hook.Add("KeyPress", "TDMBeetle_Roof", TDMBeetleRoof)
end
--lua/autorun/tdmmisc.lua:
return gluapack()()
--lua/autorun/textscreens_util.lua:
return gluapack()()
--addons/[binbon]misc/lua/textscreens_config.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/cl_anims.lua:

local PANEL = FindMetaTable("Panel")

function PANEL:FadeInPanel(duration, cb)
    self:SetVisible(true)
    self:SetAlpha(0)
    self:LerpFade(duration, 0, 255, cb)
end

function PANEL:FadeOutPanel(duration, cb)
    self:LerpFade(duration, self:GetAlpha(), 0, cb)
end

function PANEL:FadeTo(finalAlpha)
    self:LerpFade(0.5, nil, finalAlpha)
end

function PANEL:LerpFade(duration, _currAlpha, _finalAlpha, _cb)
    local startTime = SysTime()
    local origAlpha = _currAlpha or self:GetAlpha()
    local finalAlpha = _finalAlpha or 0

    local anim = self:NewAnimation(duration, 0, -1, function (_b, pnl)
        if (_cb) then _cb() end
        if (origAlpha > finalAlpha) then
            pnl:SetVisible(false)
        end
    end)

    anim.Think = function (anim, pnl, fraction)
        local alpha = Lerp(fraction, origAlpha, finalAlpha)
        pnl:SetAlpha(alpha)
    end

end
--addons/voidlib/lua/voidlib/sh_logging.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/imageid_input.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/modalframe.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/panelcontent.lua:
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
    self:Dock(FILL)
    self:SetVisible(false)

    self.title = "PANEL TITLE"
    self.font = "VoidUI.B30"


    self.textColor = VoidUI.Colors.Gray

    self.panelTitle = self:Add("Panel")
    self.panelTitle:Dock(TOP)
    self.panelTitle:SSetTall(40)

    self.panelTitle.Paint = function (s, w, h)
        draw.RoundedBox(10, 0, 0, w, h, VoidUI.Colors.Primary)

        draw.SimpleText(self.title, self.font, w/2, h/2, self.textColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end
    self.panelTitle:SetVisible(false)
end

function PANEL:SetTitle(title, ignoreMargin)
    self.title = title

    if (!ignoreMargin) then
        self.panelTitle:MarginSides(45)
        self.panelTitle:MarginTop(25)
        self.panelTitle:MarginBottom(10)
    end

    self.panelTitle:SetVisible(true)

    return self.panelTitle
end

function PANEL:SetTitleFont(font)
    self.font = font
end

function PANEL:SetTitleColor(color)
    self.textColor = color
end

function PANEL:SetCompact()
    self:SetTitleFont("VoidUI.R26")
    self:SetVisible(true)
end

vgui.Register("VoidUI.PanelContent", PANEL, "Panel")
--addons/voidlib/lua/voidlib/vgui/switch.lua:
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
    self.lerpTime = 0.15
    self.lerpStart = nil
end

-- dropdown compatibility
function PANEL:ChooseOptionID(id)
    self:SetValue(id == 1)
end

function PANEL:OnChange(val)
    self.lerpStart = CurTime()

    if (self.OnSelect) then
        self:OnSelect(val and 1 or 2)
    end
end

function PANEL:DropdownCompat()
    self:SDockMargin(0, 35, 170, 30)
    self:SSetTall(35)
end

function PANEL:Paint(w, h)
    local color = self:GetChecked() and VoidUI.Colors.Green or VoidUI.Colors.Red
    draw.RoundedBox(32, 0, 0, w, h, color)

    local circRad = h*0.4
    local circPos = 0

    local circStart = circRad + 5
    local circEnd = w - circRad - 5

    if (self.lerpStart) then
        local startTime = self.lerpStart
        local endTime = self.lerpStart + self.lerpTime

        local lerpProgress = (CurTime() - startTime) / self.lerpTime

        if (!self:GetChecked()) then
            lerpProgress = 1 - lerpProgress
        end

        if (lerpProgress >= 1 and self:GetChecked()) then
            self.lerpStart = nil
        end

        if (lerpProgress <= 0 and !self:GetChecked()) then
            self.lerpStart = nil
        end
        
        circPos = Lerp(lerpProgress, circStart, circEnd)
    else
        circPos = self:GetChecked() and circEnd or circStart
    end

    surface.SetDrawColor(VoidUI.Colors.White)
    VoidUI.DrawCircle(circPos, h/2, circRad, 1)
end

vgui.Register("VoidUI.Switch", PANEL, "DCheckBox")
--addons/voidlib/lua/voidlib/vgui/textinput.lua:
local PANEL = {}

function PANEL:Init()

    self.dockL = 10
    self.dockR = 10

	self.entry = self:Add("DTextEntry")
	self.entry:Dock(FILL)
	self.entry:SDockMargin(self.dockL, 0, self.dockR, 0)

    self.textColor = VoidUI.Colors.Black
    self.cursorColor = VoidUI.Colors.Black

    self.backgroundColor = VoidUI.Colors.White
    self.borderColor = VoidUI.Colors.Gray

	self.entry:SetFont("VoidUI.R26")
	self.entry:SetTextColor(self.textColor)
	self.entry:SetCursorColor(self.cursorColor)

	self.entry:SetPaintBackground(false)

	self.entry:SetUpdateOnType(true)

    function self.entry:OnValueChange(val)
        self:GetParent():OnValueChange(val)
    end

    self:SetDark()
	
    self:SetAllowNonAsciiCharacters(true)

end

function PANEL:SetPlaceholder(text)
    self.entry:SetPlaceholderText(text)
end

function PANEL:SetFont(font)
    self.entry:SetFont(font)
end

function PANEL:SetNumeric(bool)
    self.entry:SetNumeric(bool)
end

function PANEL:SetMultiline(bool)
    self.entry:SetMultiline(bool)
end

function PANEL:OnValueChange(value)
    -- override
end

function PANEL:GetValue()
    return self.entry:GetValue()
end

function PANEL:SetValue(val)
    self.entry:SetValue(val)
end

function PANEL:PerformLayout(w, h)
	self.entry:Dock(FILL)
	self.entry:SDockMargin(self.dockL, 0, self.dockR, 0)
end

function PANEL:SetColorScheme(textColor, cursorColor, bgColor, borderColor)

    self.textColor = textColor
    self.cursorColor = cursorColor

    self.backgroundColor = bgColor
    self.borderColor = borderColor

    self.entry:SetTextColor(self.textColor)
	self.entry:SetCursorColor(self.cursorColor)
end

function PANEL:SetDark()
    self:SetColorScheme(VoidUI.Colors.White, VoidUI.Colors.White, VoidUI.Colors.InputDark, VoidUI.Colors.Black)
end

function PANEL:SetLight()
    self:SetColorScheme(VoidUI.Colors.White, VoidUI.Colors.White, VoidUI.Colors.InputLight, VoidUI.Colors.Black)
end

function PANEL:Paint(w, h)
    draw.RoundedBox(8, 0, 0, w, h, self.borderColor)
	draw.RoundedBox(8, 1, 1, w-2, h-2, self.backgroundColor)
end

vgui.Register("VoidUI.TextInput", PANEL, "Panel")

--addons/voidfactions-1.10.6/lua/voidfactions/features/deposit/sh_deposit.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/features/experience/sh_experience.lua:
-- Helper functions

VoidFactions.XP = VoidFactions.XP or {}
VoidFactions.XP.Modules = {}

function VoidFactions.XP:GetRequiredXP(level)
	level = level or 0
	return VoidFactions.Config.LevelUpXP * level * VoidFactions.Config.LevelUpMultiplier
end

-- Enums

VOIDFACTIONS_PLAYERXP = 1
VOIDFACTIONS_FACTIONXP = 2

-- Class for creating new XP types
-- XP amount will be configurable in the admin panel

local XP_CLASS = {}
XP_CLASS.__index = XP_CLASS

function XP_CLASS:New()
	local object = setmetatable({}, XP_CLASS)
		object.id = "XP_BASEID"
		object.xpAmount = 10 -- XP amount will be set via an in-game config panel
		object.noTranslate = false
		object.timeBased = false

		object.isStatic = false
	return object
end

function XP_CLASS:SetID(id)
	self.id = id
end

function XP_CLASS:SetTimeBased()
	self.timeBased = true
end

function XP_CLASS:SetMember()
	self.isStatic = true
end

function XP_CLASS:SetXPAmount(xp)
	self.xpAmount = xp
end

function XP_CLASS:NoTranslate()
	self.noTranslate = true
end

function XP_CLASS:Setup(func)
	self.setupFunc = func
end

function XP_CLASS:AddXP(receiver)
	if (!SERVER) then return end

	-- Add XP depending on type
	-- This stuff would be useful with C# interfaces haha
	if (!receiver or !receiver.AddXP) then
		VoidFactions.PrintError("Receiver class doesn't implement AddXP meta function! XP ID: " .. self.id)
		return
	end


	-- Ignore members if dynamic factions and factions if static factions
	if (receiver.ply and VoidFactions.Settings:IsDynamicFactions()) then return end
	if (receiver.logo and VoidFactions.Settings:IsStaticFactions()) then return end


	receiver:AddXP(self.xpAmount)
	hook.Run("VoidFactions.PlayerReceivedXP", receiver.ply, self.xpAmount)
end

-- Public functions

function VoidFactions.XP:Module()
	return XP_CLASS:New()
end

local function handleAddModule(module)
	if (VoidFactions.Settings:IsDynamicFactions() and module.isStatic) then return end
	--if (VoidFactions.Settings:IsStaticFactions() and !module.isStatic) then return end

	VoidFactions.PrintDebug("Loaded experience module " .. module.id .. "!")
	VoidFactions.XP.Modules[module.id] = module

	local name = module.noTranslate and module.id or ("xp_" .. string.lower(module.id))
	local description = module.noTranslate and "No translation" or "xp_" .. string.lower(module.id) .. "_desc"


	VoidFactions.Settings:CreateConfigEntry("XP_" .. module.id, {
		name = name,
		description = description,
		type = module.timeBased and "timevalue" or "number",
		category = "xpmodules",
		default = module.timeBased and {10,10} or 10,
	})

	if (SERVER) then
		module.setupFunc()

		local config = VoidFactions.Config
		local loadedConfigs = VoidFactions.LoadedConfigs
		for key, v in pairs(VoidFactions.Settings.IGConfig) do
			if (loadedConfigs[key] == nil) then
				config[key] = v.default
				VoidFactions.SQL:AddSetting(key, v.default)
			end
		end

	end
end


function VoidFactions.XP:AddModule(module)
	if (!module.id or module.id == "XP_BASEID") then VoidFactions.PrintError("Tried to register an XP module, but no ID provided!") return end

	if (VoidFactions.Settings.ConfigLoaded) then
		handleAddModule(module)
	else
		hook.Add("VoidFactions.Settings.Loaded", "VoidFactions.XP.WaitForSettings" .. module.id, function ()
			handleAddModule(module)
		end)
	end
end

--addons/voidfactions-1.10.6/lua/voidfactions/classes/sh_deposititem.lua:
VoidFactions.DepositItem = VoidFactions.DepositItem or {}

-- Class

local DEPOSITITEM_CLASS = {}
DEPOSITITEM_CLASS.__index = DEPOSITITEM_CLASS

function DEPOSITITEM_CLASS:New(id, faction, class, dropEnt, model, data, isExternal)
	local newObject = setmetatable({}, DEPOSITITEM_CLASS)
		newObject.id = id
        newObject.faction = faction

        newObject.dropEnt = dropEnt
        newObject.class = class
        newObject.model = model
        newObject.data = data
        newObject.isExternal = isExternal
	return newObject
end

-- Functions

function VoidFactions.DepositItem:New(...)
    return DEPOSITITEM_CLASS:New(...)
end
--addons/voidfactions-1.10.6/lua/voidfactions/classes/sh_transactionhistory.lua:
VoidFactions.TransactionHistory = VoidFactions.TransactionHistory or {}

-- Class

local TRANSACTION_CLASS = {}
TRANSACTION_CLASS.__index = TRANSACTION_CLASS

function TRANSACTION_CLASS:New(time, faction, sid, diff, item)
	local newObject = setmetatable({}, TRANSACTION_CLASS)
        newObject.time = time
        newObject.faction = faction

        newObject.sid = sid
        newObject.difference = diff

        newObject.itemClass = item
        newObject.isMoney = false

	return newObject
end

-- Setters

function TRANSACTION_CLASS:SetIsMoney()
    self.isMoney = true
end

-- Functions

function VoidFactions.TransactionHistory:New(...)
    return TRANSACTION_CLASS:New(...)
end
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/capturetime.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/lockpickspeed.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/speedboost.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/weapon.lua:
local UPGRADE = VoidFactions.Upgrades:NewUpgrade()

UPGRADE:Name("upgr_weapon")
UPGRADE:Icon("1LZX6Q6")

UPGRADE:OneInstance()

UPGRADE:Description("upgr_desc_weapon")
UPGRADE:ValueDescription("upgr_descval_weapon")

UPGRADE:FormatValue(function (val)
    local weapon = weapons.Get(val)
    return weapon.PrintName
end)

UPGRADE:OnLoad(function (val, id)
    hook.Add("canDropWeapon", "VoidFactions.Weapon.CanDropWeapon" .. id, function (ply, wep)
        local member = ply:GetVFMember()
        if (!member) then return end
        local faction = member.faction
        if (!faction) then return end
        
        if (faction:HasUpgrade("upgr_weapon")) then
            val = faction:GetUpgradeValue(id)

            if (wep:GetClass() == val) then return false end
        end
    end)
end)

UPGRADE:OnReset(function (ply, prevVal)
    if (!SERVER) then return end

    ply:StripWeapon(prevVal)
end)

UPGRADE:OnRespawn(function (ply, val)
    if (!SERVER) then return end

    ply:Give(val)
    ply:SelectWeapon(val)
    ply:GetActiveWeapon().nodrop = true 
    ply:GetWeapon(val).nodrop = true
end)

VoidFactions.Upgrades:AddUpgrade(UPGRADE)
--addons/voidfactions-1.10.6/lua/voidfactions/net/faction/cl_faction.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/main_panel.lua:
local PANEL = {}

function PANEL:Init()

	local ply = LocalPlayer()
	local member = VoidFactions.PlayerMember

	local titleAppend = ""
	if (string.find(VoidFactions.CurrentVersion, "beta") or string.find(VoidFactions.CurrentVersion, "alpha")) then
        titleAppend = " (" .. VoidFactions.CurrentVersion .. ")"
    end
	if (VoidFactions.CurrentVersion:sub(1,1) == "{") then
		titleAppend = " (Development Version)"
	end

	self:SSetSize(1100, 650)
	self:MakePopup()
	self:Center()

	self:SetTitle("Venom Roleplay" .. titleAppend)


	self.sidebar = self:Add("VoidUI.Sidebar")
	self.sidebar:SetAccentColor(VoidFactions.UI.Accent)

	if (VoidFactions.Settings:IsStaticFactions()) then
		self:CreateStaticFactionTabs()
	elseif (VoidFactions.Settings:IsDynamicFactions()) then
		self:CreateDynamicFactionsTabs()
	end

	-- If VoidFactions isn't set up, then disable the sidebar and jump to a special setup tab
	local isSetup = VoidFactions.Config.FactionType != 0
	if (!isSetup) then
		self.sidebar:SetActive(false)
		local tab = self.sidebar:AddTab("SETUP", VoidUI.Icons.Settings, "VoidFactions.UI.IntroPanel", true)
		self.setupTab = tab
		self.sidebar:SelectTab(tab)
	end

	if ( (CAMI.PlayerHasAccess(ply, "VoidFactions_EditSettings") or CAMI.PlayerHasAccess(ply, "VoidFactions_ManageFactions")) and isSetup) then
		self.sidebar:AddTab("SETTINGS", VoidUI.Icons.Settings, "VoidFactions.UI.SettingsPanel", true)
	end
end

function PANEL:CreateDynamicFactionsTabs()
	local member = VoidFactions.PlayerMember
	local faction = member.faction

	if (faction) then
		self.factionTab = self.sidebar:AddTab("ÇETE", VoidUI.Icons.Faction, "VoidFactions.UI.DynamicFactionPanel")

		if (VoidFactions.Config.DepositEnabled) then
			self.depositTab = self.sidebar:AddTab("DEPOZİT", VoidUI.Icons.Deposit, "VoidFactions.UI.DepositPanel")
		end

		self.upgradesTab = self.sidebar:AddTab("YÜKSELTMELER", VoidUI.Icons.Upgrades, "VoidFactions.UI.UpgradesPanel")
		self.rewardsTab = self.sidebar:AddTab("ÖDÜLLER", VoidUI.Icons.Rewards, "VoidFactions.UI.RewardsPanel")
	else
		self.factionCreateTab = self.sidebar:AddTab("ÇETE", VoidUI.Icons.Faction, "VoidFactions.UI.NoFactionPanel")
	end

	self.rankingTab = self.sidebar:AddTab("TABLO", VoidUI.Icons.Stats, "VoidFactions.UI.RankingPanel")
end

function PANEL:CreateStaticFactionTabs()
	local member = VoidFactions.PlayerMember

	self.profileTab = self.sidebar:AddTab("PROFILE", VoidUI.Icons.User, "VoidFactions.UI.ProfilePanel")

	if (member.faction) then
		self.factionTab = self.sidebar:AddTab("FACTION", VoidUI.Icons.Faction, "VoidFactions.UI.FactionPanel")

		if (VoidFactions.Config.UpgradesEnabled) then
			self.upgradesTab = self.sidebar:AddTab("UPGRADES", VoidUI.Icons.Upgrades, "VoidFactions.UI.UpgradesPanel")
		end

		if (VoidFactions.Config.DepositEnabled) then
			self.depositTab = self.sidebar:AddTab("DEPOSIT", VoidUI.Icons.Deposit, "VoidFactions.UI.DepositPanel")
		end
	end

	self.sidebar:AddTab("BOARD", VoidUI.Icons.Board, "VoidFactions.UI.BoardMain")
end

function PANEL:OnKeyCodeReleased(key)
	local keyStr = VoidFactions.Config.MenuBind
	local _key = keyStr and input.GetKeyCode(keyStr) or nil

	if (keyStr and key == _key) then
		self:Remove()
	end
end

vgui.Register("VoidFactions.UI.MainPanel", PANEL, "VoidUI.Frame")
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/rewards_manage.lua:
local L = VoidFactions.Lang.GetPhrase

local PANEL = {}

function PANEL:Init()
    self:SetOrigSize(648, 411)

    local rewardGrid = self:Add("VoidUI.Grid")
    rewardGrid:Dock(FILL)

    rewardGrid:SetColumns(6)
    rewardGrid:SetHorizontalMargin(10)
    rewardGrid:SetVerticalMargin(10)

    local buttonPanel = self:Add("Panel")
    buttonPanel:Dock(BOTTOM)
    
    local createButton = buttonPanel:Add("VoidUI.Button")
    createButton:Dock(BOTTOM)
    createButton:SetText(L"createReward")
    createButton:SetMedium()

    createButton.DoClick = function ()
        local frame = vgui.Create("VoidFactions.UI.RewardCreate")
        frame:SetParent(self)
    end

    self.rewardGrid = rewardGrid
    self.buttonPanel = buttonPanel
    self.createButton = createButton

    self:UpdateHook()
    self:LoadRewards()
end

function PANEL:UpdateHook()
    hook.Add("VoidFactions.Rewards.RewardsReceived", "VoidFactions.UI.RewardsManage.RewardsReceived", function ()
        self:LoadRewards()
    end)
end

function PANEL:OnRemove(w, h)
    hook.Remove("VoidFactions.Rewards.RewardsReceived", "VoidFactions.UI.RewardsManage.RewardsReceived")
end

function PANEL:LoadRewards()
    if (!VoidFactions.Rewards.List) then
        VoidFactions.Rewards:RequestRewards()
    else
        self:CreateRewards()
    end
end

function PANEL:CreateRewards()
    local rewards = VoidFactions.Rewards.List

    self.rewardGrid:Clear()

    for k, reward in pairs(rewards) do
        local rewardBox = self.rewardGrid:Add("DButton")
        rewardBox:SetText("")
        rewardBox:SSetSize(90, 90)
        rewardBox.Paint = function (self, w, h)
            local color = self:IsHovered() and VoidUI.Colors.TextGray or VoidUI.Colors.InputLight
            draw.RoundedBox(8, 0, 0, w, h, color)

            local iconSize = w * 0.6
            local iconX, iconY = w/2 - iconSize/2, h/2 - iconSize / 2 - 5

            VoidLib.FetchImage(reward.icon, function (mat)
                if (!mat) then return end

                surface.SetMaterial(mat)
                surface.SetDrawColor(VoidUI.Colors.White)
                surface.DrawTexturedRect(iconX, iconY, iconSize, iconSize)
            end)

            surface.SetFont("VoidUI.R14")
            local textSize = surface.GetTextSize(reward.name)
            local shortenedText = textSize > w * 0.9 and reward.name:sub(1, 12) or reward.name
            draw.SimpleText(shortenedText, "VoidUI.R14", w/2, h-5, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
        end

        rewardBox.DoClick = function ()
            local frame = vgui.Create("VoidFactions.UI.RewardCreate")
            frame:SetParent(self)
            frame:EditMode(reward)
        end

        self.rewardGrid:AddCell(rewardBox, true)
    end
end



function PANEL:PerformLayout(w, h)
    self.rewardGrid:MarginSides(22, self)
    self.rewardGrid:MarginTop(40, self)
    self.rewardGrid:MarginBottom(20, self)

    self.buttonPanel:SSetTall(35, self)
    self.buttonPanel:MarginSides(200, self)
    self.buttonPanel:MarginBottom(10, self)

    self.createButton:SSetTall(35, self)
end

function PANEL:Paint(w, h)
    draw.SimpleText(L("rewardCount", VoidFactions.Rewards.List and #VoidFactions.Rewards.List or 0), "VoidUI.R24", 0, 0, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT)
end

vgui.Register("VoidFactions.UI.RewardsManage", PANEL, "VoidUI.PanelContent")
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/dynamic/manage_faction_panel.lua:
local L = VoidFactions.Lang.GetPhrase
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
	self:SetOrigSize(1000, 600)
	local title = self:SetTitle(string.upper(L"manageFaction"))

	local member = VoidFactions.PlayerMember
	local faction = member.faction

	VoidFactions.Faction:RequestFactionRank()

	local hasPerms = member:Can("ManageFaction", faction)

	self.hasPerms = hasPerms

	self.rankPanels = {}

	self.shouldDrawGradient = true
	local this = self

	local backButton = title:Add("DButton")
	backButton:Dock(LEFT)
	backButton:SetText("")
	backButton.Paint = function (self, w, h)
		local color = self:IsHovered() and VoidUI.Colors.Green or VoidUI.Colors.Gray
		draw.SimpleText("<  " .. string.upper(L"back"), "VoidUI.R22", w/2, h/2, color, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end

	backButton.DoClick = function ()
		self:GetParent():GoBack()
	end

	local editButton = title:Add("VoidUI.Button")
	editButton:Dock(RIGHT)
	editButton:SetText(L"edit")
	editButton:SetCompact()
	editButton:SetColor(VoidUI.Colors.Green)
	
	editButton.DoClick = function ()
		local frame = vgui.Create("VoidFactions.UI.FactionCreate")
		frame:EditMode(faction)

		self.rankEditFrame = frame
	end

	editButton:SetVisible(hasPerms)

	local container = self:Add("Panel")
	container:Dock(FILL)

	local factionInfo = container:Add("Panel")
	factionInfo:Dock(LEFT)

	local xpPanel = factionInfo:Add("Panel")

	local requiredXP = VoidFactions.XP:GetRequiredXP(faction.level)
	local fraction = faction.xp / requiredXP

	factionInfo.Paint = function (self, w, h)
		draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)

		local logoSize = sc(150)
		local x = w/2 - logoSize/2
		local y = sc(10)

		VoidLib.FetchImage(faction.logo, function (mat)
			draw.RoundedBox(6, x, y, logoSize, logoSize, faction.color)

			surface.SetMaterial(mat)
			surface.SetDrawColor(VoidUI.Colors.White)
			surface.DrawTexturedRect(x+1, y+1, logoSize-2, logoSize-2)
		end)

		local textY = y + logoSize + sc(20)

		draw.SimpleText(faction.name, "VoidUI.R28", w/2, textY, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		draw.SimpleText(string.upper(L"level") .. " " .. faction.level, "VoidUI.B20", xpPanel.x, xpPanel.y-2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM)
		draw.SimpleText(faction.xp .. " / " .. requiredXP .. " XP", "VoidUI.R20", xpPanel.x, xpPanel.y+sc(15)+2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
	end

	
	xpPanel:Dock(TOP)
	function xpPanel:Paint(w,h)
		requiredXP = VoidFactions.XP:GetRequiredXP(faction.level)
		fraction = faction.xp / requiredXP

		local x, y = self:LocalToScreen(0, 0)

		surface.SetMaterial(VoidUI.Icons.RoundedBox)
		surface.SetDrawColor(VoidUI.Colors.Background)
		surface.DrawTexturedRect(0, 0, w, h)

		if (this.shouldDrawGradient) then
			VoidUI.StencilMaskStart()
				surface.SetMaterial(VoidUI.Icons.RoundedBox)
				surface.SetDrawColor(VoidUI.Colors.White)
				surface.DrawTexturedRect(0, 0, w, h)
			VoidUI.StencilMaskApply()
				VoidUI.SimpleLinearGradient(x, y, w*fraction, h, VoidUI.Colors.Green, VoidUI.Colors.GreenGradientEnd, true)
			VoidUI.StencilMaskEnd()
		end
	end

	xpPanel:SetVisible(!VoidFactions.Config.DisableXP)

	local infoGrid = factionInfo:Add("VoidUI.Grid")
	infoGrid:Dock(BOTTOM)

	infoGrid:SetColumns(2)
	infoGrid:SetHorizontalMargin(10)
	infoGrid:SetVerticalMargin(10)
	
	local memberPanel = infoGrid:Add("Panel")
	memberPanel.Paint = function (self, w, h)
		draw.RoundedBox(6, 0, 0, w, h, VoidUI.Colors.BackgroundTransparent)

		draw.SimpleText(string.upper(L"members"), "VoidUI.R20", w/2, sc(10), VoidUI.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
		draw.SimpleText(#faction.members .. " / " .. faction:GetMaxMembers(), "VoidUI.R20", w/2, h-sc(10), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
	end
	infoGrid:AddCell(memberPanel)

	local levelPanel = infoGrid:Add("Panel")
	levelPanel.Paint = function (self, w, h)
		draw.RoundedBox(6, 0, 0, w, h, VoidUI.Colors.BackgroundTransparent)

		draw.SimpleText(string.upper(L"level"), "VoidUI.R20", w/2, sc(10), VoidUI.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
		draw.SimpleText(faction.level, "VoidUI.R20", w/2, h-sc(10), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
	end
	infoGrid:AddCell(levelPanel)

	local rankingPanel = infoGrid:Add("Panel")
	rankingPanel.Paint = function (self, w, h)
		draw.RoundedBox(6, 0, 0, w, h, VoidUI.Colors.BackgroundTransparent)

		draw.SimpleText(string.upper(L"ranking"), "VoidUI.R20", w/2, sc(10), VoidUI.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
		if (faction.factionRank) then
			local rankNum = faction.factionRank
			local trophyColor = (rankNum == 1 and VoidUI.Colors.Gold) or (rankNum == 2 and VoidUI.Colors.Silver) or (rankNum == 3 and VoidUI.Colors.Bronze) or VoidUI.Colors.Gray
			local trophyMat = (rankNum > 3 and VoidUI.Icons.TrophyHollow) or VoidUI.Icons.Trophy

			local trophySize = 63
			surface.SetMaterial(trophyMat)
			surface.SetDrawColor(trophyColor)
			surface.DrawTexturedRect(w/2 - trophySize/2, h/2 - trophySize/2+sc(10), trophySize, trophySize)

			local font = rankNum > 99 and "VoidUI.B18" or "VoidUI.B22"
			draw.SimpleText(rankNum .. ".", font, w/2, h/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end
	end
	infoGrid:AddCell(rankingPanel)

	local upgrText = string.upper(L"totalUpgrades")

	local wrappedUpgradeText = nil

	local upgrCount = table.Count(faction.upgrades or {})

	local upgradesPanel = infoGrid:Add("Panel")
	upgradesPanel.Paint = function (self, w, h)
		draw.RoundedBox(6, 0, 0, w, h, VoidUI.Colors.BackgroundTransparent)

		if (!wrappedUpgradeText) then
			wrappedUpgradeText = VoidUI.TextWrap(upgrText, "VoidUI.R20", w*0.9)
		end

		draw.DrawText(wrappedUpgradeText, "VoidUI.R20", w/2, sc(10), VoidUI.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
		draw.SimpleText(upgrCount, "VoidUI.R26", w/2, h-sc(30), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
	end
	infoGrid:AddCell(upgradesPanel)


	local rankPanel = container:Add("Panel")
	rankPanel:Dock(FILL)
	rankPanel.Paint = function (self, w, h)
		draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)

		draw.SimpleText(L"rank", "VoidUI.B22", sc(30), sc(20), VoidUI.Colors.Gray, TEXT_ALIGN_LEFT)
	end

	local scrollContainer = rankPanel:Add("VoidUI.ScrollPanel")
	scrollContainer:Dock(FILL)

	local rankRows = scrollContainer:Add("DListLayout")
	rankRows:Dock(TOP)

	function rankRows:OnModified()
		for k, v in pairs(this.rankPanels) do
			VoidFactions.Rank:UpdateRankWeight(v.rank, v:GetZPos())
		end
	end

	rankRows:MakeDroppable("rankRowsOrder")
	

	local newRank = rankPanel:Add("VoidUI.Button")
	newRank:Dock(BOTTOM)
	newRank:SetMedium()
	newRank:SetText(L"addRank")

	newRank:SetVisible(hasPerms)

	newRank.DoClick = function ()
		local frame = vgui.Create("VoidFactions.UI.RankCreate")
		frame:SetFaction(faction)

		self.rankEditFrame = frame
	end
	

	self.backButton = backButton

	self.container = container
	self.factionInfo = factionInfo
	self.infoGrid = infoGrid

	self.memberPanel = memberPanel
	self.levelPanel = levelPanel
	self.rankingPanel = rankingPanel
	self.upgradesPanel = upgradesPanel

	self.rankPanel = rankPanel

	self.rankRows = rankRows
	self.scrollContainer = scrollContainer

	self.editButton = editButton
	self.newRank = newRank

	self.xpPanel = xpPanel

	self:LoadRanks() 

	hook.Add("VoidFactions.Faction.DataUpdated", "VoidFactions.UI.ManageFactionPanel.UpdateData", function ()
		self:LoadRanks()
	end)
end

function PANEL:Think()
	self.shouldDrawGradient = !IsValid(self.rankEditFrame)
end

function PANEL:OnRemove()
	hook.Remove("VoidFactions.Faction.DataUpdated", "VoidFactions.UI.ManageFactionPanel.UpdateData")
end


function PANEL:LoadRanks()
	local member = VoidFactions.PlayerMember
	local faction = member.faction 

	local hasPerms = self.hasPerms

	local ranks = faction.ranks

	local rankRows = self.rankRows
	rankRows:Clear()
	
	local root = self

	self.rankPanels = {}
	self.panelRanks = {}

	for id, rank in SortedPairsByMemberValue(ranks, "weight") do

		local rankPanel = self.rankRows:Add("DPanel")
		rankPanel:SetText("")
		rankPanel.Paint = function (self, w, h)
			draw.SimpleText(rank.name, "VoidUI.R22", 5, h/2-sc(10), VoidUI.Colors.Gray)

			surface.SetDrawColor(VoidUI.Colors.Background)
			surface.DrawLine(0, h-1, w, h-1)
		end

		rankPanel.rank = rank

		local cannotMove = rank.weight == 1 or !member:Can("ManageFaction")
		if (cannotMove) then
			rankPanel:SetCursor("no")
		else
			rankPanel:SetCursor("sizeall")
		end

		local actionPanel = rankPanel:Add("Panel")
		actionPanel:Dock(RIGHT)


		local manageButton = actionPanel:Add("VoidUI.Button")
		manageButton:Dock(TOP)
		manageButton:SetText(L"manage")
		manageButton:SetCompact()
		manageButton:SetColor(VoidUI.Colors.Green)
		manageButton.DoClick = function ()
			local frame = vgui.Create("VoidFactions.UI.RankCreate")
			frame:SetFaction(self.selectedFaction)
			frame:EditMode(rank)

			self.rankEditFrame = frame
		end

		manageButton:SetVisible(hasPerms)
		
		
		rankPanel.actionPanel = actionPanel
		rankPanel.actionPanel.manage = manageButton

		self.rankPanels[#self.rankPanels + 1] = rankPanel

		self.rankRows:Add(rankPanel)

		-- Dont allow dragging if cant move
		if (cannotMove) then
			rankPanel.m_DragSlot = nil
		end
	end

	self:InvalidateLayout(true)
	self.scrollContainer:InvalidateLayout(true)
	self.scrollContainer:InvalidateChildren(true)
	self.rankRows:InvalidateLayout(true)
	self.rankRows:SizeToChildren(false, true)
end

function PANEL:PerformLayout(w, h)
	self.backButton:SSetWide(70, self)
	self.backButton:MarginLeft(10, self)
	self.backButton:MarginTops(5, self)

	self.container:MarginSides(45, self)
	self.container:MarginTop(10, self)
	self.container:MarginBottom(35, self)

	self.factionInfo:SSetWide(300, self)
	self.factionInfo:SDockPadding(25, 25, 25, 5, self)

	self.infoGrid:SSetTall(190, self)
	

	self.memberPanel:SSetTall(60, self)
	self.levelPanel:SSetTall(60, self)
	self.rankingPanel:SSetTall(115, self)
	self.upgradesPanel:SSetTall(115, self)

	self.rankPanel:MarginLeft(10, self)
	self.rankPanel:SDockPadding(30, 30, 30, 20, self)

	self.scrollContainer:MarginTop(20, self)

	if (self.rankPanels) then
		for k, panel in ipairs(self.rankPanels) do
			panel:SSetTall(40, self)

			panel.actionPanel:SSetWide(165, self)
			panel.actionPanel:MarginTop(10, self)
			panel.actionPanel:MarginBottom(8, self)
			panel.actionPanel.manage:MarginLeft(65, self)
			panel.actionPanel.manage:MarginRight(15, self)
		end
	end

	self.editButton:SSetWide(50, self)
	self.editButton:MarginTops(7, self)
	self.editButton:MarginRight(25, self)

	self.newRank:MarginSides(170, self)
	self.newRank:SSetTall(40, self)

	self.xpPanel:SSetTall(15, self)
	self.xpPanel:MarginTop(205, self)

	self.infoGrid:CalculateRows()
end

vgui.Register("VoidFactions.UI.DynamicManageFactionsPanel", PANEL, "VoidUI.PanelContent")
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/dynamic/no_faction_panel.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/dynamic/no_faction_panel.lua:
local L = VoidFactions.Lang.GetPhrase
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
    self:SetOrigSize(1000, 600)

    local currency = VoidFactions.Currencies.List[VoidFactions.Config.FactionCreateCurrency]

    local container = self:Add("Panel")
    container:Dock(FILL)
    
    local title = container:Add("Panel")
    title:Dock(TOP)
    title.Paint = function (self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)

        draw.SimpleText(string.upper(L"createFactionOrJoin"), "VoidUI.R28", w/2, h/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end

    local content = container:Add("Panel")
    content:Dock(FILL)
    content.Paint = function (self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)
    end

    local factionCreateCost = tonumber(VoidFactions.Config.FactionCreateCost)

    local formattedMoney = currency and currency:FormatMoney(factionCreateCost) or "MISSING"

    local canAfford = currency and currency:CanAfford(LocalPlayer(), factionCreateCost) or false
    local moneyColor = canAfford and VoidUI.Colors.Green or VoidUI.Colors.Red

    local wrappedText = nil
    local moneyMarkup = markup.Parse("<color=222,222,222,255><font=VoidUI.R24>" .. L("factionCreateCost", {
        money = formattedMoney,
        color = "<color=" .. moneyColor.r .. "," .. moneyColor.g .. "," .. moneyColor.b .. ",255>"
    }) .. "</color></font>")

    local textContainer = content:Add("Panel")
    textContainer:Dock(TOP)
    textContainer.Paint = function (self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.BackgroundTransparent)

        if (!wrappedText) then
            wrappedText = VoidUI.TextWrap(currency and L"noFactionText" or "You don't have any configured currency. Go to Settings > Options > Factions > Faction creation currency and set up a valid currency.", "VoidUI.R24", w - sc(40))
        end

        draw.DrawText(wrappedText, "VoidUI.R24", w/2, sc(20), currency and VoidUI.Colors.Gray or VoidUI.Colors.Red, TEXT_ALIGN_CENTER)
        moneyMarkup:Draw(w/2, h - sc(20), TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
    end

    local buttonPanel = content:Add("Panel")
    buttonPanel:Dock(BOTTOM)

    local createButton = buttonPanel:Add("VoidUI.Button")
    createButton:Dock(LEFT)
    createButton:SetMedium()
    createButton:SetText(L"createFaction")
    createButton:SetEnabled(canAfford)

    createButton.DoClick = function ()
        local frame = vgui.Create("VoidFactions.UI.FactionCreate")
		frame:SetParent(self)
    end

    local joinButton = buttonPanel:Add("VoidUI.Button")
    joinButton:Dock(RIGHT)
    joinButton:SetMedium()
    joinButton:SetText(L"joinFaction")
    joinButton:SetColor(VoidUI.Colors.Blue)
    joinButton.DoClick = function ()
        VoidFactions.Menu.Panel.sidebar:SelectTab(VoidFactions.Menu.Panel.rankingTab)
    end
    
    self.container = container

    self.title = title
    self.content = content

    self.textContainer = textContainer

    self.buttonPanel = buttonPanel
    self.createButton = createButton
    self.joinButton = joinButton
end

function PANEL:PerformLayout(w, h)
    self.container:MarginSides(240, self)
    self.container:MarginTops(75, self)

    self.title:SSetTall(55, self)
    self.content:MarginTop(15, self)
    
    self.textContainer:MarginSides(20, self)
    self.textContainer:MarginTop(45, self)
    self.textContainer:SSetTall(210, self)

    self.buttonPanel:SSetTall(40, self)
    self.buttonPanel:MarginBottom(45, self)
    self.buttonPanel:MarginSides(30, self)

    self.createButton:SSetWide(220, self)
    self.joinButton:SSetWide(220, self)
end

vgui.Register("VoidFactions.UI.NoFactionPanel", PANEL, "VoidUI.PanelContent")
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/dynamic/ranking_panel.lua:
local L = VoidFactions.Lang.GetPhrase
local sc = VoidUI.Scale

local cachedPages = cachedPages or {}

local PANEL = {}

function PANEL:Init()
    self:SetOrigSize(1000, 600)
    self:SetTitle(string.upper(L"ranking"))

    self.requestedPages = cachedPages or {}
    self.top = {}

    local container = self:Add("Panel")
    container:Dock(FILL)

    local topPanel = container:Add("Panel")
    topPanel:Dock(TOP)
    topPanel.Paint = function (self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)
    end

    local factionPanel = container:Add("Panel")
    factionPanel:Dock(FILL)
    factionPanel.Paint = function (self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)

        draw.SimpleText(string.upper(L"rank"), "VoidUI.B22", sc(30), sc(20), VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
        draw.SimpleText(string.upper(L"name"), "VoidUI.B22", sc(120), sc(20), VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
        draw.SimpleText(string.upper(L"level"), "VoidUI.B22", sc(380), sc(20), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
        draw.SimpleText(string.upper(L"members"), "VoidUI.B22", sc(560), sc(20), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
        draw.SimpleText(string.upper(L"actions"), "VoidUI.B22", w-sc(120), sc(20), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
    end

    local rowContent = factionPanel:Add("VoidUI.RowPanel")
    rowContent:Dock(FILL)

    rowContent:SetSpacing(5)

    local pagination = factionPanel:Add("VoidUI.PaginationPanel")
    pagination:Dock(BOTTOM)
    pagination:SetTranslations(L"showingPagination", L"page", L"from")

    pagination:PageChange(function (page)
        if (cachedPages[page]) then
            self:DisplayPage(page)
        end
        self:RequestPage(page)
    end)

    self.topExists = false
    
    self.topPanel = topPanel
    self.factionPanel = factionPanel
    self.container = container
    self.pagination = pagination
    self.rowContent = rowContent

    if (table.Count(cachedPages) > 0) then
        self.top = cachedPages[1]

        self:DisplayTop()
        self:DisplayPage(1)
    end

    self:RequestPage(1)
    self:AddHooks()
end

function PANEL:AddHooks()
    hook.Add("VoidFactions.Factions.ReceivedRankingPage", "VoidFactions.UI.RankingPanel.RankingReceived", function (page, factions, totalPages)
        self.requestedPages[page] = factions
        self:DisplayPage(page)

        cachedPages = self.requestedPages

        if (totalPages) then
            self.pagination:TotalPages(totalPages)
        end

        if (page == 1) then
            self.top = factions
            self:DisplayTop()
        end
    end)
end

function PANEL:OnRemove()
    hook.Remove("VoidFactions.Factions.ReceivedRankingPage", "VoidFactions.UI.RankingPanel.RankingReceived")
end

function PANEL:RequestPage(page)
    VoidFactions.Faction:RequestRankingPage(page)
end

function PANEL:DisplayTop()
    if (self.topExists) then return end
    self.topExists = true

    local topPanel = self.topPanel

    local rankContainer = topPanel:Add("Panel")
    rankContainer:Dock(FILL)

    local trophySize = 65

    local thirdPlace = self.top[3]
    local thirdRank = rankContainer:Add("Panel")
    thirdRank:Dock(LEFT)
    thirdRank:SetVisible(thirdPlace)
    thirdRank.Paint = function (self, w, h)
        draw.RoundedBoxEx(8, 0, h-sc(40), w, sc(40), VoidUI.Colors.InputLight, true, true, false, false)
        draw.SimpleText(thirdPlace.name, "VoidUI.R20", w/2, h-sc(20), VoidUI.Colors.Bronze, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

        surface.SetMaterial(VoidUI.Icons.Trophy)
        surface.SetDrawColor(VoidUI.Colors.Bronze)
        surface.DrawTexturedRect(w/2-trophySize/2, h-sc(40)-trophySize, trophySize, trophySize)

        draw.SimpleText("3.", "VoidUI.B20", w/2, h-sc(50)-trophySize/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end


    local firstPlace = self.top[1]
    local firstRank = rankContainer:Add("Panel")
    firstRank:Dock(LEFT)
    firstRank:SetVisible(firstPlace)
    firstRank.Paint = function (self, w, h)
        draw.RoundedBoxEx(8, 0, h-sc(80), w, sc(80), VoidUI.Colors.InputLight, true, true, false, false)
        draw.SimpleText(firstPlace.name, "VoidUI.R20", w/2, h-sc(40), VoidUI.Colors.Gold, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

        surface.SetMaterial(VoidUI.Icons.Trophy)
        surface.SetDrawColor(VoidUI.Colors.Gold)
        surface.DrawTexturedRect(w/2-trophySize/2, h-sc(80)-trophySize, trophySize, trophySize)

        draw.SimpleText("1.", "VoidUI.B20", w/2, h-sc(90)-trophySize/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end

    local secondPlace = self.top[2]
    local secondRank = rankContainer:Add("Panel")
    secondRank:Dock(RIGHT)
    secondRank:SetVisible(secondPlace)
    secondRank.Paint = function (self, w, h)
        draw.RoundedBoxEx(8, 0, h-sc(60), w, sc(60), VoidUI.Colors.InputLight, true, true, false, false)
        draw.SimpleText(secondPlace.name, "VoidUI.R20", w/2, h-sc(30), VoidUI.Colors.Silver, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

        surface.SetMaterial(VoidUI.Icons.Trophy)
        surface.SetDrawColor(VoidUI.Colors.Silver)
        surface.DrawTexturedRect(w/2-trophySize/2, h-sc(60)-trophySize, trophySize, trophySize)

        draw.SimpleText("2.", "VoidUI.B20", w/2, h-sc(70)-trophySize/2, VoidUI.Colors.Black, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end

    self.rankContainer = rankContainer
    self.thirdRank = thirdRank
    self.firstRank = firstRank
    self.secondRank = secondRank

    self:InvalidateLayout()
    self:InvalidateParent()
    self:InvalidateChildren()
end

function PANEL:DisplayPage(page)
    self.rowContent:Clear()
    self.pagination:CurrentPage(page)
    self.pagination:SetFromTo(page*6-6+1, page*6)

    local member = VoidFactions.PlayerMember
    local memberFaction = member.faction

    local factions = self.requestedPages[page]
    for rank, faction in pairs(factions) do
        local row = self.rowContent:Add("Panel")
        row:Dock(TOP)
        row.Paint = function (self, w, h)
            draw.SimpleText(faction.rank .. ".", "VoidUI.R22", sc(20), h/2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
            draw.SimpleText(faction.name, "VoidUI.R22", sc(90), h/2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
            draw.SimpleText(faction.level, "VoidUI.R22", sc(350), h/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
            draw.SimpleText(faction.count .. "/" .. faction.maxMembers, "VoidUI.R22", sc(530), h/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
        end

        local joinButton = row:Add("VoidUI.Button")
        joinButton:SetText(L"joinFaction")

        local canJoin = faction.canJoin
        if (!canJoin) then
            joinButton:SetText(L"inviteOnly")
        end
        if (memberFaction and memberFaction.id == faction.id) then
            canJoin = false
        end
        if (faction.count >= faction.maxMembers) then
            canJoin = false
        end

        joinButton:Dock(RIGHT)
        joinButton:SSetWide(140)
        joinButton:SetMedium()
        joinButton:MarginRight(20)
        joinButton:MarginTops(2)
        joinButton.rounding = 14
        
        joinButton.font = "VoidUI.R20"
        joinButton:SetEnabled(canJoin)

        joinButton.DoClick = function ()
            VoidFactions.Member:JoinFaction(faction.id)
        end


        self.rowContent:AddRow(row, 30)
    end
end

function PANEL:PerformLayout(w, h)
    self.container:MarginSides(45, self)
    self.container:MarginTop(10, self)
    self.container:MarginBottom(35, self)

    self.topPanel:SSetTall(160, self)
    self.factionPanel:MarginTop(15, self)

    self.factionPanel:SDockPadding(10, 10, 10, 10, self)

    self.rowContent:MarginTop(40, self)
    self.rowContent:MarginBottom(10, self)
    self.rowContent:MarginSides(20, self)

    self.pagination:SSetTall(30, self)

    if (self.topExists) then
        self.rankContainer:MarginSides(140, self)

        self.thirdRank:SSetWide(150, self)

        self.firstRank:MarginLeft(90, self)
        self.firstRank:SSetWide(150, self)

        if (!self.thirdRank:IsVisible()) then
            -- lol
            self.firstRank:MarginLeft(240, self)
        end

        self.secondRank:SSetWide(150, self)
    end
end

vgui.Register("VoidFactions.UI.RankingPanel", PANEL, "VoidUI.PanelContent")
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/dynamic/upgrades_panel.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/static/board_factions.lua:
local L = VoidFactions.Lang.GetPhrase
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
	self:SetOrigSize(1000, 600)
	self:SetTitle(string.upper(L"factions"), true)

	self.container = self:Add("VoidUI.BackgroundPanel")
	self.container:Dock(FILL)

	self.container.Paint = function (self, w, h)
		draw.RoundedBox(12, 0, 0, w, h, VoidUI.Colors.Primary)

        draw.SimpleText(L"factionName", "VoidUI.B24", sc(20), sc(15), VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
        draw.SimpleText(L"members", "VoidUI.B24", w/2, sc(15), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
	end

	self.board = self.container:Add("VoidUI.RowPanel")
	self.board:SetSpacing(6)
	self:LoadContent()
	
	hook.Add("VoidFactions.Faction.DataUpdated", "VoidFactions.UI.BoardFactions.DataUpdate", function ()
		self:LoadContent()
	end)

end

function PANEL:OnRemove()
	hook.Remove("VoidFactions.Faction.DataUpdated", "VoidFactions.UI.BoardFactions.DataUpdate")
end

function PANEL:LoadContent()

	self.board:Clear()

	local rootFactions = VoidFactions.Utils:BuildSubfactions(VoidFactions.LoadedFactions)

	for _, faction in pairs(rootFactions) do
		self:AddFaction(faction, true)
		for k, v in pairs(faction.subfactions or {}) do
			self:AddFaction(v, false, true)
			for _, p in pairs(v.subfactions or {}) do
				self:AddFaction(p, false, false, true)
			end
		end
	end

	if (table.Count(rootFactions) == 0) then
		self.board.Paint = function (self, w, h)
			draw.SimpleText(L"nothingToShow", "VoidUI.R48", w/2, h/2-20, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end
	else
		self.board.Paint = nil
	end
end

function PANEL:AddFaction(faction, isRoot, isFaction, isSubfaction)

	if (!faction.showBoard) then return end

	local textColor = VoidLib.DynamicTextColor(faction.color)

	local mat = nil 
	if (faction.logo and #faction.logo > 3) then
		VoidLib.FetchImage(faction.logo, function (_mat)
			if (!_mat) then return end
			mat = _mat
		end)
	end

	local panel = self.board:Add("Panel")
	panel.Paint = function (self, w, h)
		local width = (isRoot and w) or (isFaction and w * 0.97) or (isSubfaction and w * 0.93)
		local x = w - width
		draw.RoundedBox(6, x, 0, width, h, faction.color)
		if (isSubfaction) then
			draw.RoundedBox(6, x+1, 1, width-2, h-2, VoidUI.Colors.InputLight)
		end

		local memberCount = faction.memberCount or (faction.members and #faction.members)
		local maxMembers = faction.maxMembers == 0 and "∞" or faction.maxMembers

		local iconSize = sc(25)

		local nameX = mat and x + sc(12) + iconSize or x + sc(20)
		if (mat) then
			surface.SetMaterial(mat)
			surface.SetDrawColor(VoidUI.Colors.White)
			surface.DrawTexturedRect(x + sc(5), sc(5), iconSize, iconSize)
		end

		draw.SimpleText(faction.name, "VoidUI.R22", nameX, h/2, textColor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
		draw.SimpleText(memberCount .. "/" .. maxMembers, "VoidUI.R22", w/2, h/2, textColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end

	local viewDetails = panel:Add("VoidUI.Button")
	viewDetails:Dock(RIGHT)
	viewDetails:SSetWide(120)
	viewDetails:SetCompact()

	viewDetails:MarginTops(5)
	viewDetails:MarginRight(40)

	viewDetails:SetText(L"viewDetails")
	viewDetails:SetColor(VoidUI.Colors.Blue, VoidUI.Colors.InputLight)

	viewDetails.DoClick = function ()
		self:GetParent():SelectFaction(faction)
	end

	local staticCheck = VoidFactions.PlayerMember.faction and VoidFactions.Settings:IsStaticFactions() and (VoidFactions.PlayerMember.faction.id != faction.id)
	local dynamicCheck = VoidFactions.Settings:IsDynamicFactions() and !VoidFactions.PlayerMember.faction

	if (!staticCheck and !VoidFactions.PlayerMember.faction) then
		staticCheck = true
	end

	if (!faction.inviteRequired and (staticCheck or dynamicCheck)) then
		local join = panel:Add("VoidUI.Button")
		join:Dock(RIGHT)
		join:SSetWide(50)
		join:SetCompact()

		join:MarginTops(5)
		join:MarginRight(5)

		join:SetText(L"join")
		join:SetColor(VoidUI.Colors.Green, VoidUI.Colors.InputLight)

		local bCanJoin = VoidFactions.PlayerMember:CanJoin(faction)
		join:SetEnabled(bCanJoin)

		join.DoClick = function ()
			-- Reopen the menu (as soon as the net message is received, the menu reopens)
			VoidFactions.Menu.ReopenRequested = true

			VoidFactions.Member:JoinFaction(faction)
		end
	end

	self.board:AddRow(panel, sc(35))

	if (isFaction) then
		panel:MarginTop(3)
	end

	if (isRoot) then
		panel:MarginTop(12)
	end
end

function PANEL:PerformLayout(w, h)
	self:SDockPadding(30, 25, 30, 30, self)

	self.container:MarginTop(20, self)
	self.board:MarginTop(25, self)
end

vgui.Register("VoidFactions.UI.BoardFactions", PANEL, "VoidUI.PanelContent")

--lua/wos/anim_extension/holdtypes/melee_combo.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/loader.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/debug.lua:
CreateClientConVar("xenin_debug_print_file_enabled", "1", true, false)
CreateClientConVar("xenin_debug_print_console_enabled", "0", true, false)

function XeninUI:HasDebugFilePrintEnabled()
  return GetConVar("xenin_debug_print_file_enabled"):GetBool() or ply:IsSuperAdmin()
end

function XeninUI:HasDebugConsolePrintEnabled()
  return GetConVar("xenin_debug_print_console_enabled"):GetBool()
end

function XeninUI:EnsureDebugFileExists()
  local ply = LocalPlayer()

  local path = self.debugPath or "xenin/debug/"
  local time = os.time()
  local date = os.date("%d_%m_%Y_%H_%M_%S", time)
  local realPath = path .. date .. ".txt"

  if (!file.IsDir(path, "DATA")) then
    file.CreateDir(path)
  end

  if (!file.Exists(realPath, "DATA")) then
    local str = "Debug log for " .. ply:Nick() .. " [" .. ply:SteamID() .. "] initialised at " .. os.date("%d/%m/%Y %H:%M:%S", time) .. "\n"
    file.Write(realPath, str)

    ply.debug = realPath
  end
end

hook.Add("InitPostEntity", "XeninUI.Debug", function()
  XeninUI:EnsureDebugFileExists()
end)

function XeninUI:DebugPrint(prefix, ...)
  local rawPrefix = prefix
  local args = {
  ... }
  local ply = LocalPlayer()
  local printEnabled = XeninUI:HasDebugConsolePrintEnabled()
  local fileEnabled = XeninUI:HasDebugFilePrintEnabled()

  if (!printEnabled and !fileEnabled) then return end
  local path = ply.debug
  if (!path) then print("ERROR AT DEBUG PRINT")end
  local time = os.time()
  local date = os.date("%H:%M:%S", time)
  prefix = "[" .. prefix:upper() .. " ENTRANCE AT " .. date .. "]"

  local str = prefix .. "\n	-	"

  for i, v in ipairs(args) do
    if istable(v) then
      local json = util.TableToJSON(v, true)
      local exploded = string.Explode("\n", json)

      for i, v in ipairs(exploded) do
        if (i == 1) then continue end

        exploded[i] = "	-	" .. v
      end

      json = table.concat(exploded, "\n")
      str = str .. "Table: " .. json .. "\n	- "

      continue
    end

    str = str .. v .. "\n	-	"
  end
  str = str:sub(1, str:len() - 3)

  if fileEnabled then
    file.Append(path, str)
  end

  if printEnabled then
    ply.debugTbl = ply.debugTbl or {}
    ply.debugTbl[rawPrefix] = ply.debugTbl[rawPrefix] or {}

    table.insert(ply.debugTbl[rawPrefix], {
      time = CurTime(),
      str = str
    })
  end
end

function XeninUI:DebugQuery(prefix, secs)
  if (!prefix) then
    print("You need a category!")

    return
  end

  secs = secs or 300

  local ply = LocalPlayer()
  if (!ply.debugTbl) then
    print("No debug info at all")

    return
  end
  if (!ply.debugTbl[prefix]) then
    print("No debug info for " .. prefix)

    return
  end

  local tbl = ply.debugTbl[prefix]
  local size = #tbl

  if (size == 0) then
    print("The category exists, but there's no info")

    return
  end

  local curTime = CurTime() - secs
  local infoTbl = {}

  for i = size, 1, -1 do
    if (tbl[i] and tbl[i].time > curTime) then
      table.insert(infoTbl, tbl[i])

      continue
    end

    break
  end

  return infoTbl
end

concommand.Add("xenin_debug_query", function(ply, cmd, args)
  local prefix = args[1]
  local secs = args[2]
  local tbl = XeninUI:DebugQuery(args[1], args[2])

  if tbl then
    local str = ""

    for i, v in ipairs(tbl) do
      str = str .. v.str .. "\n"

      if (i == #tbl) then str = str:sub(1, str:len() - 2)end
    end

    print(str)
    MsgC(XeninUI.Theme.Accent, "Results: ")
    MsgC(XeninUI.Theme.Green, #tbl .. "\n")
  end
end)

--addons/xenin_framework/lua/xeninui/libs/essentials.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/languages/core.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/classes/controller.lua:
local function __laux_concat_0(...)
  local arr = {
  ...
  }
  local result = {}
  for _, obj in ipairs(arr) do
    for i = 1, #obj do
      result[#result + 1] = obj[i]
    end
    for k, v in pairs(obj) do
      if type(k) == "number" and k > #obj then result[k] = v
      elseif type(k) ~= "number" then
        result[k] = v
      end
    end
  end
  return result
end
XeninUI.Configurator.Controllers = XeninUI.Configurator.Controllers || {}

function XeninUI.Configurator:GetControllers()
  return self.Controllers
end

function XeninUI.Configurator:FindControllerByScriptName(script)
  return self:GetControllers()[script]
end

do
  local _class_0
  local _base_0 = {
    __name = "XeninUI.Configurator.Controller",
    setTitle = function(self, title)
      self.title = title
      return self
    end,
    getSettings = function(self)
      return self.settings
    end,
    getTabs = function(self)
      return self.tabs
    end,
    getScript = function(self)
      return self.script
    end,
    getTitle = function(self)
      return self.title
    end,
    IsValid = function(self)
      return XeninUI.Configurator:FindControllerByScriptName(self.script) == self
    end,
    addSettingTab = function(self, name)
      table.insert(self.settingTab, {
        name = name,
        subtabs = {}
      })
    end,
    getSettingTabs = function(self)
      return self.settingTab
    end,
    addSetting = function(self, id, category, subCategory, name, desc, value, type, data, sortOrder)
      if data == nil then data = {}
      end
      self.settings[id] = {
        id = id,
        category = category,
        subCategory = subCategory,
        name = name,
        desc = desc,
        value = value,
        defaultValue = value,
        type = type,
        data = data,
        sortOrder = sortOrder or table.Count(self.settings) + 1
      }

      self.cache:set(id, value)
    end,
    addTab = function(self, name, icon, color, panel, settings)
      if settings == nil then settings = {}
      end
      table.insert(self.tabs, __laux_concat_0({
        name = name,
        icon = icon,
        color = color or color_white,
        panel = panel or "DPanel"
      }, settings))
    end,
    addSettingsTab = function(self, name, icon, color, settings)
      if settings == nil then settings = {}
      end
      local panel = "Xenin.Configurator.Admin.Panel"
      settings.settingsTab = true

      self:addTab(name, icon, color, panel, settings)
    end,
    addEntityTab = function(self, name, icon, color, entity, settings)
      if settings == nil then settings = {}
      end
      local panel = settings.panelOverride or "Xenin.Configurator.Admin.Entity"
      if (settings.isGrid and !settings.panelOverride) then
        panel = "Xenin.Configurator.Admin.EntityGrid"
      end
      if (settings.isList and !settings.panelOverride) then
        panel = "Xenin.Configurator.Admin.EntityList"
      end

      table.Merge(settings, {
        __entity = entity,
        script = self:getScript(),
        name = name
      })
      self:addTab(name, icon, color, panel, settings)
    end,
    getSettingsKV = function(self)
      local tbl = {}
      for i, v in pairs(self:getSettings()) do
        tbl[v.id] = self.cache:get(v.id)
      end

      return tbl
    end,
    getSortedSettings = function(self)
      local tbl = {}
      for i, v in pairs(self:getSettings()) do
        table.insert(tbl, v)
      end
      table.sort(tbl, function(a, b)
        return a.sortOrder < b.sortOrder end)

      return tbl
    end,
    getSettingsByCategory = function(self)
      local tbl = {}
      for i, v in pairs(self:getSettings()) do
        tbl[v.category] = tbl[v.category] || {}

        table.insert(tbl[v.category], v)
      end
      for i, v in pairs(tbl) do
        table.sort(v, function(a, b)
          return a.sortOrder < b.sortOrder end)
      end

      return tbl
    end,
    get = function(self, key, default)
      local val = self.cache:get(key)
      if (val != nil) then
        return val
      end

      return default
    end,
    onSettingChanged = function(self, key, value) end,
    set = function(self, key, value)
      self.cache:set(key, value)
      self.settings[key].value = value

      self:onSettingChanged(key, value)
    end,
    saveSetting = function(self, id, val)
      if CLIENT then
        XeninUI.Configurator.Network:sendSaveSetting(self:getScript(), id, val)
      else
        return XeninUI.Configurator.ORM:saveSetting(self:getScript(), id, val)
      end
    end,
    load = function(self)
      local p = XeninUI.Promises.new()

      if self.hasLoadedSettings then
        return p:resolve()
      end

      XeninUI.Configurator.ORM:getScriptSettings(self:getScript()):next(function(results)
        if results == nil then results = {}
        end
        for i, v in ipairs(results) do
          assert(v ~= nil, "cannot destructure nil value")
          local id, value, json = v.id, v.value, v.json
          if (json and json != "NULL") then
            value = util.JSONToTable(value)
          end

          self.cache:set(id, value)
        end

        self.hasLoadedSettings = true
        p:resolve()
      end, function(err)
        p:reject(err)
      end)

      return p
    end,
    networkSettings = function(self, target)
      if (CLIENT) then return end

      local isAdmin = XeninUI.Permissions:canAccessFramework(target)
      local tbl = {}
      for i, v in pairs(self:getSettings()) do
        local setting = self.settings[v.id]
        if (setting.data.secret and !isAdmin) then continue end

        tbl[v.id] = self.cache:get(v.id)
      end

      XeninUI.Configurator.Network:sendSettings(target, self:getScript(), tbl)
    end,
    loadEntities = function(self, ent)
      local p = XeninUI.Promises.new()
      local id = ent:getDatabaseEntity()
      if self.loadedEntities[id] then
        return p:resolve()
      end

      XeninUI.Configurator.ORM:findEntities(ent):next(function(results)
        results = results || {}

        local tbl = {}

        for _, entData in ipairs(results) do
          local inst = XeninUI.Configurator.Entities:create(id)
          for i, v in pairs(entData) do
            local val = v
            local col = inst:getColumn(i)
            if col.onLoad then
              val = col:onLoad(v)
            end

            inst["set" .. tostring(i)](inst, val)
          end
          inst:save()
          inst:onLoad()
        end

        self.loadedEntities[id] = true
        p:resolve()
      end)

      return p
    end,
    networkEntities = function(self, target)
      if (CLIENT) then return end

      local ents = XeninUI.Configurator.Entities:getEntities()
      local type = self:__type()
      local id = (string.Explode(".", type) and string.Explode(".", type)[1])
      local length = #id
      for entId, ent in pairs(ents) do
        local str = entId:sub(1, length)
        if (str != id) then continue end

        if (!ent.getAllEntities) then
          Error(tostring(entId) .. " has no way of getting all instances of said entity. Please implement a static getAllEntities function\n")
        end

        self:loadEntities(ent()):next(function(result)
          local allEnts = ent.getAllEntities()

          XeninUI.Configurator.Network:sendEntities(target, allEnts)
        end)
      end
    end,
    addSearch = function(self, id, tabFunc, matchFunc, clickFunc)
      if clickFunc == nil then clickFunc = function() end
      end
      table.insert(self.search, {
        id = id,
        matchFunc = matchFunc,
        tabFunc = tabFunc,
        clickFunc = clickFunc
      })
    end,
    getSearch = function(self, text)
      text = text:lower()

      local function findTab(func)
        for i, v in pairs(self.tabs) do
          if (!func(v, i)) then continue end

          return v, i
        end
      end

      local tbl = {}
      for i, v in ipairs(self.search) do

        local tab = findTab(v.tabFunc)
        if (!tab) then continue end

        local results = v:matchFunc(text, tab)
        tbl = __laux_concat_0(tbl, results)

        if (#tbl >= 4) then break end
      end

      return {
        tbl[1],
        tbl[2],
        tbl[3],
        tbl[4]
      }
    end,
    __type = function(self)
      return self.__name
    end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self, script)
      self.search = {}
      self.loadedEntities = {}
      self.tabs = {}
      self.settingTab = {}
      self.settings = {}
      self.hasLoadedSettings = false
      self.cache = XeninUI.Configurator.Cache()
      self.script = script:lower()

      XeninUI.Configurator.Controllers[self.script] = self

      hook.Add("PlayerInitialSpawn", "XeninUI.Configurator.Scripts." .. tostring(script), function(ply)
        timer.Simple(3, function()
          self:load():next(function()
            if (!IsValid(ply)) then return end

            self:networkSettings(ply)
            self:networkEntities(ply)
          end)
        end)
      end)
    end,
    __base = _base_0
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  XeninUI.Configurator.Controller = _class_0
end

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/entities/row_settings.lua:
local PANEL = {}

function PANEL:AddSettings(entity)
  self.Entity = entity
  self.Parent = self:GetParent()
  local columns = entity:getColumns()

  for i, v in ipairs(columns) do
    local split = string.Explode("_", v.id)
    local name = ""
    for i, v in ipairs(split) do
      local temp = v:sub(1, 1):upper() .. v:sub(2)
      name = name .. (temp .. (i == #split and "" or " "))
    end

    local funcName = v.id:sub(1, 1):upper() .. v.id:sub(2)
    local value = entity["get" .. tostring(funcName)](entity)

    local label = v.label or ""
    if (v.min or v.max) then
      if (v.min and v.max) then
        label = "Min: " .. tostring(v.min) .. ". Max: " .. tostring(v.max)
      elseif v.min then
        label = "Min: " .. tostring(v.min)
      elseif v.max then
        label = "Max: " .. tostring(v.max)
      end
    end

    local type = "Textentry"
    if (v.type == "list") then
      type = "TextentryList"
    end
    if ((v.validate or label) and type == "Textentry") then
      type = "TextentryWithLabel"
    end

    local detour = v.onChange
    v.onChange = function(row, text)
      self:OnValueChanged()
    end

    if v.isName then
      local detour = v.onChange
      if detour then
        v.onChange = function(row, text)
          local tbl = entity.transformName and entity:transformName(text) or {
          text }
          local name = tbl[1]
          local msg = tbl[2]
          local color = tbl[3]

          self.Parent.Name = name

          if (type == "TextentryWithLabel") then
            row.label:SetText(msg or "")
            row.label:SetTextColor(color or Color(127, 127, 127))
            row.label:SizeToContents()
          end

          detour(row, text)
        end
      else
        v.onChange = function(row, text)
          local tbl = entity.transformName and entity:transformName(text) or {
          text }
          local name = tbl[1]
          local msg = tbl[2]
          local color = tbl[3]

          self.Parent.Name = name

          if (type == "TextentryWithLabel") then
            row.label:SetText(msg or "")
            row.label:SetTextColor(color or Color(127, 127, 127))
            row.label:SizeToContents()
          end
        end
      end
    end

    if (!value and v.min and v.max) then
      value = v.min
    end

    local labelColor
    value = value or (isfunction(v.defaultValue) and v.defaultValue() or v.defaultValue)
    if (entity.transformName and v.isName) then
      local transform = entity:transformName(value)
      label = transform[2]
      labelColor = transform[3]
    end

    self:AddSetting(v.id, name, type, {
      value = value,
      readOnly = v.readOnly,
      onChange = v.onChange,
      number = v.type == "integer" or v.type == "float",
      min = v.min,
      max = v.max,
      hide = v.hide,
      label = label,
      labelColor = labelColor,
      placeholder = v.placeholder
    })
  end
end

function PANEL:OnValueChanged() end

vgui.Register("Xenin.Configurator.Admin.Entity.Row.Settings", PANEL, "Xenin.Configurator.Admin.SettingsBase")

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/keyvalue.lua:
local x

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/range.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/selectbox.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/textentry.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/button.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/button.lua:
local PANEL = {}

AccessorFunc(PANEL, "roundness", "Roundness", FORCE_NUMBER)
AccessorFunc(PANEL, "disabled", "Disabled")
AccessorFunc(PANEL, "loading_size", "LoadingImageSizeSub", FORCE_NUMBER)
AccessorFunc(PANEL, "awaiting_response", "AwaitingResponse", FORCE_BOOL)
AccessorFunc(PANEL, "loading_color", "LoadingColor")
AccessorFunc(PANEL, "old_text", "OldText")
AccessorFunc(PANEL, "outline", "Outline", FORCE_NUMBER)

AccessorFunc(PANEL, "clr_background_cur", "BackgroundColor")
AccessorFunc(PANEL, "clr_background_on", "BackgroundColorOn")
AccessorFunc(PANEL, "clr_background_off", "BackgroundColorOff")

AccessorFunc(PANEL, "clr_text_cur", "TextColorCur")
AccessorFunc(PANEL, "clr_text_on", "TextColorOn")
AccessorFunc(PANEL, "clr_text_off", "TextColorOff")

AccessorFunc(PANEL, "enable_shadow", "EnableShadow")
AccessorFunc(PANEL, "shadow_alpha", "ShadowAlpha")
AccessorFunc(PANEL, "shadow_alpha_on", "ShadowAlphaOn")
AccessorFunc(PANEL, "shadow_alpha_off", "ShadowAlphaOff")

XeninUI:CreateFont("XeninUI.Checkbox", 16)
XeninUI:CreateFont("XeninUI.Checkbox.Small", 15)

function PANEL:Init()
	self:SetText("")
	self:SetLoadingImageSizeSub(16)
	self:SetEnableShadow(true)
	self:SetShadowAlphaOn(150)
	self:SetShadowAlphaOff(0)
	self:SetOutline(0)
end

function PANEL:SetAwaitingResponse(b)
	self.awaiting_response = b

	if !b then
		self:SetText(self:GetOldText())
	end
end

function PANEL:Paint(w, h)
	if !self.DidPostInit then return end

	self:SetTextColor(self:GetTextColorCur())

	local r = self:GetRoundness()
	if self:GetEnableShadow() then
		local x, y = self:LocalToScreen(0, 0)
		BSHADOWS.BeginShadow()
		local sub = self:GetOutline()
		if sub > 0 then
			draw.RoundedBox(r or h / 2, x, y, w, h, self:GetTextColorCur())
		end
		draw.RoundedBox(r or h / 2, x + sub, y + sub, w - sub * 2, h - sub * 2, self:GetBackgroundColor())
		BSHADOWS.EndShadow(2, 2, 2, self:GetShadowAlpha(), 0, 0)
	else
		local sub = self:GetOutline()
		if sub > 0 then
			draw.RoundedBox(r or h / 2, 0, 0, w, h, self:GetTextColorCur())
		end
		draw.RoundedBox(r or h / 2, 0 + sub, 0 + sub, w - sub * 2, h - sub * 2, self:GetBackgroundColor())
	end

	if self:GetAwaitingResponse() then
		self:SetText("")
		XeninUI:DrawLoadingCircle(w / 2, h / 2, h - self:GetLoadingImageSizeSub(), self:GetLoadingColor() or self:GetTextColor())
	end
end

function PANEL:RefreshColors(anim)
	for k, v in pairs(self.m_AnimList or {}) do
		if v.OnEnd then v:OnEnd(self)end
		self.m_AnimList[k] = nil
	end

	if self:IsHovered() then
		if anim then
			self:LerpColor("clr_text_cur", self:GetTextColorOn())
			self:LerpColor("clr_background_cur", self:GetBackgroundColorOn())
		else
			self:SetTextColorCur(self:GetTextColorOn())
			self:SetBackgroundColor(self:GetBackgroundColorOn())
		end
	else
		if anim then
			self:LerpColor("clr_text_cur", self:GetTextColorOff())
			self:LerpColor("clr_background_cur", self:GetBackgroundColorOff())
		else
			self:SetTextColorCur(self:GetTextColorOff())
			self:SetBackgroundColor(self:GetBackgroundColorOff())
		end
	end
end

function PANEL:OnCursorEntered()
	if !self.DidPostInit then return end

	if self:GetDisabled() then
		self:SetCursor("no")
		return
	else
		self:SetCursor("hand")
	end

	self:Lerp("shadow_alpha", self:GetShadowAlphaOn())
	self:LerpColor("clr_text_cur", self:GetTextColorOn())
	self:LerpColor("clr_background_cur", self:GetBackgroundColorOn())
end

function PANEL:OnCursorExited()
	if self:GetDisabled() or !self.DidPostInit then return end

	self:Lerp("shadow_alpha", self:GetShadowAlphaOff())
	self:LerpColor("clr_text_cur", self:GetTextColorOff())
	self:LerpColor("clr_background_cur", self:GetBackgroundColorOff())
end

function PANEL:PostInit()
	self:SetOldText(self:GetText())
	self:SetShadowAlpha(self:GetShadowAlphaOff())
	self:SetBackgroundColor(self:GetBackgroundColorOff())
	self:SetTextColorCur(self:GetTextColorOff())

	self.DidPostInit = true
end

vgui.Register("XeninUI.Button", PANEL, "DButton")

--addons/xenin_framework/lua/xeninui/elements/checkbox_slider.lua:
local PANEL = {}

XeninUI:CreateFont("XeninUI.Checkbox.Slider", 14)

AccessorFunc(PANEL, "m_state", "State")
AccessorFunc(PANEL, "m_offColor", "OffColor")
AccessorFunc(PANEL, "m_onColor", "OnColor")
AccessorFunc(PANEL, "m_btnOffColor", "ButtonOffColor")
AccessorFunc(PANEL, "m_btnOnColor", "ButtonOnColor")

function PANEL:Init()
  self:SetText("")
  self:SetState(false)

  self:SetOffColor(XeninUI.Theme.Primary)
  self:SetOnColor(XeninUI.Theme.GreenDark)

  self:SetButtonOffColor(Color(72, 72, 72))
  self:SetButtonOnColor(color_white)

  self.Color = self:GetOffColor()
  self.Pos = 0
  self.ButtonColor = self:GetButtonOffColor()
end

function PANEL:Paint(w, h)
  XeninUI:DrawRoundedBox(h / 2, 0, 0, w, h, self.Color)

  local size = h / 2
  local frac = self.Pos
  local x = frac * (w - (size * 2))





  XeninUI:DrawCircle(size + x, size, size - 3, 30, self.ButtonColor)
end


function PANEL:OnStateChanged(state) end

function PANEL:SetState(state)
  self.m_state = state
  self:OnStateChanged(state)
end

function PANEL:UpdateState(instant)
  local state = self:GetState()
  local col = state and self:GetOnColor() or self:GetOffColor()
  local btnCol = state and self:GetButtonOnColor() or self:GetButtonOffColor()
  local pos = state and 1 or 0

  if instant then
    self.Color = col
    self.ButtonColor = btnCol
    self.Pos = pos
  else
    self:EndAnimations()
    self:LerpColor("Color", col)
    self:LerpColor("ButtonColor", btnCol)
    self:Lerp("Pos", pos)
  end
end

function PANEL:DoClick()
  self:SetState(!self:GetState())
  self:UpdateState()
end

vgui.Register("XeninUI.Checkbox.Slider", PANEL, "DButton")

--addons/xenin_framework/lua/xeninui/elements/checkbox_v2.lua:
local PANEL = {}

local matTick = Material("xenin/tick.png", "smooth")

function PANEL:Init()
	self:SetText("")

	self.State = false
	self.AnimationController = 0
	self.Color = XeninUI.Theme.Accent
	self.Background = XeninUI.Theme.Primary
	self.Font = "XeninUI.CheckboxV2"
end

XeninUI:CreateFont("XeninUI.CheckboxV2", 18)

function PANEL:Paint(w, h)
	XeninUI:MaskInverse(function()
		surface.SetDrawColor(color_white)
		local x = h * math.Clamp((self.AnimationController - 0.5) * 2, 0, 1)
		surface.DrawRect(h - x, 0, h, h)
	end, function()
		XeninUI:DrawRoundedBoxEx(6, 0, 0, h, h * 0.5, self.Color, true, true, false, false)
	end)
	XeninUI:MaskInverse(function()
		surface.SetDrawColor(color_white)
		local width = h * math.Clamp(self.AnimationController * 2, 0, 1)
		surface.DrawRect(0, 0, width, h)
	end, function()
		XeninUI:DrawRoundedBoxEx(6, 0, h * 0.5, h, h * 0.5, self.Color, false, false, true, true)
	end)
	XeninUI:DrawRoundedBox(4, 2, 2, h - 4, h - 4, self.Background)

	XeninUI:MaskInverse(function()
		surface.SetDrawColor(color_white)
		local x = h * math.Clamp((self.AnimationController - 1) * 2, 0, 1)
		surface.DrawRect(x, 0, h, h)
	end, function()
		surface.SetMaterial(matTick)
		surface.SetDrawColor(self.Color)
		surface.DrawTexturedRect(0, 0, h, h)
	end)

	if self.Text then
		local x = h + 5
		XeninUI:DrawShadowText(self.Text, self.Font, x, h / 2 - 1, self.TextColor or color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 1, 125)
	end
end

function PANEL:SizeToContentsX()
	surface.SetFont(self.Font)
	local tw = surface.GetTextSize(self.Text)

	self:SetWide(self:GetTall() + 5 + tw)
end

function PANEL:SetState(state, instant)
	self.State = state

	if state then
		if instant then
			self:EndAnimations()
			self.AnimationController = 1.5
		else
			self:Lerp("AnimationController", 1.5, 0.4)
		end
	else
		self:EndAnimations()
		self.AnimationController = 0
	end
end

function PANEL:OnStateChanged() end

function PANEL:Toggle()
	self:SetState(!self.State)
	self:OnStateChanged(self.State)
end

vgui.Register("XeninUI.CheckboxV2", PANEL, "DButton")

--addons/xenin_framework/lua/xeninui/elements/dropdown_player.lua:
local PANEL = {}

AccessorFunc(PANEL, "m_parentPanel", "ParentPanel")

function PANEL:Init()
  self.Choices = {}

  self.Search = self:Add("XeninUI.TextEntry")
  self.Search:Dock(TOP)
  self.Search:DockMargin(8, 0, 0, 8)
  self.Search:SetTall(36)
  self.Search:SetPlaceholder("Search by name")
  self.Search:SetIcon(XeninUI.Materials.Search, true)
  self.Search.textentry:SetUpdateOnType(true)
  self.Search.textentry.OnValueChange = function(pnl, text)
    local tbl = {}
    text = text:lower()
    for i, v in pairs(self.Data) do
      if (!IsValid(v)) then continue end
      if (!v:Nick():lower():find(text)) then continue end

      table.insert(tbl, v)
    end

    self:SetData(tbl)
  end
  self.Search.textentry.OnEnter = function(pnl, text)
    local children = self.Layout:GetChildren()
    if IsValid(children[1]) then
      children[1]:DoClick()

      return
    end

    self:Remove()
  end

  self.Scroll = self:Add("XeninUI.Scrollpanel.Wyvern")
  self.Scroll:Dock(FILL)

  self.Layout = self.Scroll:Add("DListLayout")
  self.Layout:Dock(TOP)

  self.Alpha = 0
  self:LerpAlpha(255, 0.15)

  self:DockPadding(0, 8, 8, 8)
end

function PANEL:OnSelected() end

XeninUI:CreateFont("XeninUI.DropdownPopup.Small", 12)

function PANEL:SetData(tbl)
  if (!self.Data) then
    self.Data = tbl
  end

  self.Layout:Clear()

  self.Choices = {}

  for i, v in ipairs(tbl) do
    if (!IsValid(v)) then return end

    local panel = self.Layout:Add("DButton")
    panel:Dock(TOP)
    panel:DockMargin(8, 0, 8, 0)
    panel:SetTall(48)
    panel:SetText("")
    panel.Text = v:Nick()
    panel.Sid64 = v:SteamID64()
    panel.Sid = v:IsBot() and "BOT" or v:SteamID()
    panel.Usergroup = v:GetUserGroup():sub(1, 1):upper() .. v:GetUserGroup():sub(2)
    panel.Background = XeninUI.Theme.Primary
    panel.TextColor = Color(222, 222, 222)
    panel.Paint = function(pnl, w, h)
      XeninUI:DrawRoundedBox(6, 0, 0, w, h, pnl.Background)

      XeninUI:DrawShadowText(pnl.Text, "XeninUI.DropdownPopup", h + 6, h / 2 + 1, pnl.TextColor, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM, 1, 150)
      XeninUI:DrawShadowText(pnl.Sid, "XeninUI.DropdownPopup.Small", h + 6, h / 2 + 1, ColorAlpha(pnl.TextColor, 100), TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP, 1, 150)
    end
    panel.OnCursorEntered = function(pnl)
      pnl:LerpColor("Background", XeninUI.Theme.Navbar)
      pnl:LerpColor("TextColor", color_white)
    end
    panel.OnCursorExited = function(pnl)
      pnl:LerpColor("Background", XeninUI.Theme.Primary)
      pnl:LerpColor("TextColor", Color(222, 222, 222))
    end
    panel.DoClick = function(pnl)
      self:OnSelected(pnl.Sid64)
      self:Remove()
    end

    panel.Avatar = panel:Add("XeninUI.Avatar")
    panel.Avatar:SetVertices(30)
    panel.Avatar:SetPlayer(v, 64)

    panel.PerformLayout = function(pnl, w, h)
      panel.Avatar:SetPos(6, 6)
      panel.Avatar:SetSize(h - 12, h - 12)
    end

    table.insert(self.Choices, panel)
  end
end

function PANEL:Paint(w, h)
  local aX, aY = self:LocalToScreen()

  BSHADOWS.BeginShadow()
  draw.RoundedBox(6, aX, aY, w, h, XeninUI.Theme.Primary)
  BSHADOWS.EndShadow(1, 1, 1, 150)
end

function PANEL:OnFocusChanged(gained)
  if gained then
    self.HasGained = true
  end
end


function PANEL:Think()
  if (!IsValid(self)) then return end
  if (!self.HasGained) then return end
  if self:HasHierarchicalFocus() then return end

  self:Remove()
end

function PANEL:PerformLayout(w, h)
  local longest = 0

  surface.SetFont("XeninUI.DropdownPopup")
  for i, v in pairs(self.Choices) do
    local tw = surface.GetTextSize(v.Text)
    tw = tw + 16
    tw = tw + 16
    tw = tw + 48

    if (tw > longest) then
      longest = math.max(112, tw)
    end
  end

  self:SetWide(math.max(self:GetParentPanel():GetWide(), longest))
  self:SetTall(math.min(#self.Choices * 48, 6 * 48) + 16 + 44)
end

vgui.Register("XeninUI.PlayerDropdown", PANEL, "EditablePanel")

--addons/xenin_framework/lua/xeninui/elements/navbar.lua:
XeninUI:CreateFont("XeninUI.Navbar.Button", 25)

local function navbarEase(t, b, c, d)
	t = t / d
	local ts = t * t
	local tc = ts * t

	return b + c * (6 * tc * ts + -15 * ts * ts + 10 * tc)
end

local PANEL = {}

function PANEL:Init()
	self.buttons = {}
	self.panels = {}
	self.buttonsNum = {}

	self.font = "XeninUI.Navbar.Button"
	self.accent = XeninUI.Theme.Accent
	self.textActive = self.accent
	self.padding = 60
	self.minSize = 80
	self.dockLeft = 0
	self.lineBasedOffText = false
	self.animation = "alpha"

	self.active = 0

	self.line = self:Add("DPanel")
	self.line:SetMouseInputEnabled(false)
	self.line:SetTall(2)
	self.line.Paint = function(pnl, w, h)
		surface.SetDrawColor(self.accent)
		surface.DrawRect(0, 0, w, h)
	end
end

function PANEL:AddTab(name, panel, tbl)

	self.buttonsNum[#self.buttonsNum + 1] = name

	self.buttons[name] = vgui.Create("DButton", self)
	if (!tbl or (tbl and !tbl.dontDock)) then
		self.buttons[name]:Dock(LEFT)
		self.buttons[name]:DockMargin(self.dockLeft, 0, -self.dockLeft, 0)
	end
	self.buttons[name]:SetText(name)
	self.buttons[name]:SetFont(self.font)
	self.buttons[name].textColor = Color(120, 120, 120)
	self.buttons[name].Paint = function(pnl, w, h)
		pnl:SetTextColor(pnl.textColor)
	end
	self.buttons[name].DoClick = function(pnl)
		self:SetActive(name)
	end
	self.buttons[name].OnCursorEntered = function(pnl)
		pnl:LerpColor("textColor", self.textActive)
	end
	self.buttons[name].OnCursorExited = function(pnl)
		if (self.active == name) then return end

		pnl:LerpColor("textColor", Color(120, 120, 120))
	end

	surface.SetFont(self.font)
	local tw, th = surface.GetTextSize(name)
	self.buttons[name]:SetWide(math.max(self.minSize, tw + self.padding))

	if (!panel) then panel = "Panel"end

	self.panels[name] = vgui.Create(panel, self.body)
	self.panels[name]:Dock(FILL)
	self.panels[name]:SetVisible(false)
	self.panels[name].Data = tbl

	if self.panels[name].SetData then
		self.panels[name]:SetData(tbl)
	end

	if (tbl and tbl.PostInit) then
		tbl.PostInit(self.panels[name])
	end

	return self.panels[name]
end

function PANEL:FindIndex(name)
	for i, v in pairs(self.buttonsNum) do
		if (v != name) then continue end

		return i
	end
end

function PANEL:SetActive(name)
	if (self.active == name) then return end

	local instant = !IsValid(self.buttons[self.active])
	if self.buttons[self.active] then
		self.buttons[self.active]:LerpColor("textColor", Color(120, 120, 120))
	end

	if self.panels[self.active] then
		if (self.animation == "alpha") then
			local pnl = self.panels[self.active]
			pnl.DrawAlpha = pnl.DrawAlpha or 0
			pnl.PaintOver = function(pnl, w, h)
				draw.RoundedBoxEx(6, 0, 0, w, h, ColorAlpha(XeninUI.Theme.Background, pnl.DrawAlpha), false, false, true, true)
			end
			pnl:Lerp("DrawAlpha", 255, 0.15, function()
				pnl.PaintOver = nil
				pnl:SetVisible(false)
			end)
		else
			local pnl = self.panels[self.active]
			pnl:SetVisible(false)
		end

		if self.panels[name].OnSwitchedFrom then
			self.panels[name]:OnSwitchedFrom()
		end
	end

	self.active = name

	if self.buttons[name] then
		if instant then
			self.buttons[name].textColor = self.textActive
			local id = self:FindIndex(name)
			local x = self.dockLeft
			if self.lineBasedOffText then
				x = x + self.padding / 2
			end
			surface.SetFont(self.font)
			for i, v in ipairs(self.buttonsNum) do
				if (i >= id) then break end

				if (self.lineBasedOffText and i == id) then
					local tw = surface.GetTextSize(self.buttons[v]:GetText())
					x = x + tw + self.padding
				else
					x = x + self.buttons[v]:GetWide()
				end
			end

			self.line:SetPos(x, (self.startHeight or 56) - self.line:GetTall())
			local width = self.buttons[name]:GetWide()
			if self.lineBasedOffText then
				surface.SetFont(self.font)
				width = surface.GetTextSize(self.buttons[name]:GetText())
			end
			self.line:SetWide(width)
		else
			self.buttons[name]:LerpColor("textColor", self.textActive)
			local id = self:FindIndex(name)
			local x = self.dockLeft
			if self.lineBasedOffText then
				x = x + self.padding / 2
			end
			surface.SetFont(self.font)
			for i, v in ipairs(self.buttonsNum) do
				if (i >= id) then break end

				if (self.lineBasedOffText and i == id) then
					local tw = surface.GetTextSize(self.buttons[v]:GetText())
					x = x + tw
				else
					x = x + self.buttons[v]:GetWide()
				end
			end

			self.line:LerpMoveX(x, 0.3, nil, navbarEase)
			local width = self.buttons[name]:GetWide()
			if self.lineBasedOffText then
				surface.SetFont(self.font)
				width = surface.GetTextSize(self.buttons[name]:GetText())
			end
			self.line:LerpWidth(width, 0.3, nil, navbarEase)
		end
	end

	if self.panels[name] then
		if instant then
			local pnl = self.panels[name]
			pnl:SetVisible(true)
		else
			if (self.animation == "alpha") then
				timer.Simple(0.15, function()
					if (!IsValid(self)) then return end

					local pnl = self.panels[name]
					pnl.DrawAlpha = pnl.DrawAlpha or 255
					pnl:SetVisible(true)
					pnl.PaintOver = function(pnl, w, h)
						draw.RoundedBoxEx(6, 0, 0, w, h, ColorAlpha(XeninUI.Theme.Background, pnl.DrawAlpha), false, false, true, true)
					end
					pnl:Lerp("DrawAlpha", 0, 0.15, function()
						pnl.PaintOver = nil
					end)
				end)
			else
				local pnl = self.panels[name]
				pnl:SetVisible(true)
			end
		end

		if self.panels[name].OnSwitchedTo then
			self.panels[name]:OnSwitchedTo(name)
		end
	end

	self:SwitchedTab(name)
end

function PANEL:SwitchedTab(name) end

function PANEL:GetActive()
	return self.panels[self.active]
end

function PANEL:SetBody(pnl)
	self.body = pnl:Add("Panel")
	self.body:Dock(FILL)
	self.body.Offset = 0
	self.body.PerformLayout = function(pnl, w, h)
		local num = 0
		for i, v in pairs(self.panels) do
			local x = num * w - (pnl.Offset * w)

			v:SetSize(w, h)
			v:SetPos(x, 0)
		end
	end
end

function PANEL:Paint(w, h)
	surface.SetDrawColor(XeninUI.Theme.Navbar)
	surface.DrawRect(0, 0, w, h)
end

vgui.Register("XeninUI.Navbar", PANEL)

--addons/xenin_framework/lua/xeninui/elements/options.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/query.lua:
local PANEL = {}

AccessorFunc(PANEL, "custom_width", "CustomWidth", FORCE_NUMBER)

XeninUI:CreateFont("XeninUI.Query.Text", 18)
XeninUI:CreateFont("XeninUI.Query.Button", 18)
XeninUI:CreateFont("XeninUI.Query.Option", 20)

function PANEL:Init()
  self.onAccept = function() end
  self.onDecline = function() end

  self.background.text = self.background:Add("DLabel")
  self.background.text:SetText("XD")
  self.background.text:SetFont("XeninUI.Query.Text")
  self.background.text:SetContentAlignment(8)
  self.background.text:SetTextColor(Color(200, 200, 200))

  self.background.input = self.background:Add("XeninUI.TextEntry")
  self.background.input:SetVisible(false)

  self.background.option = self.background:Add("DButton")
  self.background.option:SetVisible(false)
  self.background.option:SetText("")
  self.background.option.Paint = function(pnl, w, h)
    XeninUI:DrawRoundedBox(6, 0, 0, w, h, XeninUI.Theme.Navbar)

    local text = pnl.Text or "None Selected"
    XeninUI:DrawShadowText(text, "XeninUI.Query.Option", w / 2, h / 2, Color(184, 184, 184), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 1, 150)
  end
  self.background.option.DoClick = function(pnl)
    if IsValid(pnl.Dropdown) then return end

    pnl.Dropdown = vgui.Create("XeninUI.PlayerDropdown")
    pnl.Dropdown:SetParentPanel(pnl)
    pnl.Dropdown:SetData(self.optionData)
    pnl.Dropdown:SetDrawOnTop(true)
    local x, y = pnl:LocalToScreen()
    pnl.Dropdown:SetPos(x, y + pnl:GetTall())
    pnl.Dropdown:MakePopup()
    pnl.Dropdown.OnSelected = function(dropdown, sid64)

      if (!sid64) then return end
      local ply = player.GetBySteamID64(sid64)
      pnl.Text = ply:Nick()

      self.background.option.sid64 = sid64
    end
  end
  self.background.option.OnRemove = function(pnl)
    if IsValid(pnl.Dropdown) then
      pnl.Dropdown:Remove()
    end
  end

  self.background.accept = self.background:Add("DButton")
  self.background.accept:SetText("Accept")
  self.background.accept:SetFont("XeninUI.Query.Button")
  self.background.accept:SetTextColor(Color(21, 21, 21))
  self.background.accept.Paint = function(pnl, w, h)
    draw.RoundedBox(6, 0, 0, w, h, XeninUI.Theme.Green)
  end
  self.background.accept.DoClick = function(pnl)
    self:onAccept(pnl, self.background.input:GetText(), self.background.option.sid64)
    self:Remove()
  end

  self.background.decline = self.background:Add("DButton")
  self.background.decline:SetText("Decline")
  self.background.decline:SetFont("XeninUI.Query.Button")
  self.background.decline:SetTextColor(Color(145, 145, 145))
  self.background.decline.Paint = function(pnl, w, h)
    draw.RoundedBox(6, 0, 0, w, h, XeninUI.Theme.Navbar)
    draw.RoundedBox(6, 2, 2, w - 4, h - 4, XeninUI.Theme.Background)
  end
  self.background.decline.DoClick = function(pnl)
    self:onDecline(pnl, self.background.input:GetText(), self.background.option.sid64)
    self:Remove()
  end
end

function PANEL:PerformLayout(w, h)
  if (!self:GetCustomWidth()) then
    surface.SetFont(self.background.text:GetFont())
    local tw = surface.GetTextSize(self.background.text:GetText())
    self:SetBackgroundWidth(tw + 32)
  else
    self:SetBackgroundWidth(self:GetCustomWidth())
  end

  self.BaseClass.PerformLayout(self, w, h)

  self.background.text:SetWide(self.background:GetWide())
  self.background.text:SizeToContentsY()
  self.background.text:SetPos(0, 56)

  self.background.accept:SizeToContentsX(32)
  self.background.accept:SizeToContentsY(16)
  self.background.decline:SizeToContentsX(32)
  self.background.decline:SizeToContentsY(16)

  if self.background.input:IsVisible() then
    self.background.input:SetSize(math.max(self.background.accept:GetWide() + self.background.decline:GetWide() + 8, self.background:GetWide() * 0.75), 32)
    self.background.input:SetPos(0, 88)
    self.background.input:CenterHorizontal()
  end

  if self.background.option:IsVisible() then
    self.background.option:SetSize(math.max(self.background.accept:GetWide() + self.background.decline:GetWide() + 8, self.background:GetWide() * 0.75), 32)

    local inputVisible = self.background.input:IsVisible()
    self.background.option:SetPos(0, 88 + (inputVisible and 44 or 0))
    self.background.option:CenterHorizontal()
  end

  local y = self.background:GetTall() - self.background.accept:GetTall() - 16
  self.background.accept:SetPos(self.background:GetWide() / 2 - self.background.accept:GetWide() / 2 - self.background.decline:GetWide() / 2 - 4, y)
  self.background.decline:SetPos(self.background:GetWide() / 2 + self.background.accept:GetWide() / 2 - self.background.decline:GetWide() / 2 + 4, y)
end

function PANEL:SetInput(str, placeholder, numeric)
  self.background.input:SetVisible(true)
  self.background.input:SetText(str)
  self.background.input:SetPlaceholder(placeholder)
  self.background.input.textentry:SetNumeric(numeric)
end

function PANEL:SetOption(tbl)
  self.background.option:SetVisible(true)
  self.optionData = tbl
end

function PANEL:SetText(text)
  self.background.text:SetText(text)
end

function PANEL:SetAccept(text, func)
  self.background.accept:SetText(text)
  self.onAccept = func
end

function PANEL:SetDecline(text, func)
  self.background.decline:SetText(text)
  self.onDecline = func
end

vgui.Register("XeninUI.Query", PANEL, "XeninUI.Popup")

function XeninUI:SimpleQuery(title, text, yesText, yesFunc, noText, noFunc)
  local queryMenu = vgui.Create("XeninUI.Query")
  queryMenu:SetSize(ScrW(), ScrH())
  queryMenu:SetBackgroundHeight(140)

  queryMenu:SetTitle(title or "Title")
  queryMenu:SetText(text or "Text")

  queryMenu:SetAccept(yesText or "Yes", yesFunc or (function() end))
  queryMenu:SetDecline(noText or "No", noFunc or (function() end))

  queryMenu:MakePopup()

  return queryMenu
end

--addons/xenin_framework/lua/xeninui/elements/query_single_button.lua:
local PANEL = {}

XeninUI:CreateFont("XeninUI.Query.Text", 18)
XeninUI:CreateFont("XeninUI.Query.Button", 18)

function PANEL:Init()
  self.onAccept = function() end
  self.onDecline = function() end

  self.background.text = self.background:Add("DLabel")
  self.background.text:SetText("XD")
  self.background.text:SetFont("XeninUI.Query.Text")
  self.background.text:SetContentAlignment(8)
  self.background.text:SetTextColor(Color(200, 200, 200))

  self.background.accept = self.background:Add("DButton")
  self.background.accept:SetText("Accept")
  self.background.accept:SetFont("XeninUI.Query.Button")
  self.background.accept:SetTextColor(Color(21, 21, 21))
  self.background.accept.Paint = function(pnl, w, h)
    draw.RoundedBox(6, 0, 0, w, h, self.acceptBtnColor or XeninUI.Theme.Green)
  end
  self.background.accept.DoClick = function(pnl)
    self:onAccept(pnl)
    self:Remove()
  end
end

function PANEL:PerformLayout(w, h)
  surface.SetFont(self.background.text:GetFont())
  local tw = surface.GetTextSize(self.background.text:GetText())
  self:SetBackgroundWidth(tw + 32)

  self.BaseClass.PerformLayout(self, w, h)

  self.background.text:SetWide(self.background:GetWide())
  self.background.text:SizeToContentsY()
  self.background.text:SetPos(0, 56)

  self.background.accept:SizeToContentsX(32)
  self.background.accept:SizeToContentsY(16)

  local y = self.background:GetTall() - self.background.accept:GetTall() - 16

  self.background.accept:SetPos(self.background:GetWide() / 2 - self.background.accept:GetWide() / 2, y)
end

function PANEL:SetText(text)
  self.background.text:SetText(text)
end

function PANEL:SetAccept(text, func)
  self.background.accept:SetText(text)
  self.onAccept = func
end

vgui.Register("XeninUI.QuerySingleButton", PANEL, "XeninUI.Popup")

function XeninUI:SimpleQuerySingle(title, text, yesText, yesFunc)
  local queryMenu = vgui.Create("XeninUI.QuerySingleButton")
  queryMenu:SetSize(ScrW(), ScrH())
  queryMenu:SetBackgroundHeight(140)

  queryMenu:SetTitle(title or "Title")
  queryMenu:SetText(text or "Text")

  queryMenu:SetAccept(yesText or "Yes", yesFunc or (function() end))

  queryMenu:MakePopup()

  return queryMenu
end

--addons/xenin_framework/lua/xeninui/elements/sidebar.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/sidebar_animated.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/tooltip.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/units/main.lua:
return gluapack()()
--addons/xenin-coinflip/lua/coinflip/currencies/ps1.lua:
return gluapack()()
--addons/xenin-coinflip/lua/coinflip/configuration/config.lua:
return gluapack()()
--addons/xenin-coinflip/lua/coinflip/networking/client.lua:
-- coinflipkapatma ConVar'ını oluştur
CreateConVar("coinflipkapatma", "0", FCVAR_ARCHIVE, "Coinflip komutunu kapatıp açar. 1: Kapalı, 0: Açık")

net.Receive("Coinflip.Create", function(len)
	
	local id = net.ReadUInt(24)
	local author = net.ReadEntity()
	local money = net.ReadUInt(32)
	local announceCreation = net.ReadBool()
	local currency = net.ReadString()
	if not IsValid(author) then return end 
	Coinflip.Games[id] = {
		author = author,
		bet = money,
		currency = currency
	}
	if not GetConVar("coinflipkapatma"):GetBool() then
	if (announceCreation) then
		local str = Coinflip.i18n:get("chat.created", {
			creator = author:Nick(),
			money = Coinflip:GetCurrency(currency):Format(money)
		}, ":creator: have made a coinflip worth :money:")

		chat.AddText(Coinflip.Config.ChatPrefixColor, Coinflip.Config.ChatPrefix, color_white, str)
	end
	end
	hook.Run("Coinflip.Created", id)
end)

net.Receive("Coinflip.Create.Error", function(len)
	local str = net.ReadString()

	XeninUI:Notify(str, NOTIFY_ERROR, 5, XeninUI.Theme.Red)

	hook.Run("Coinflip.Create.Error", str)
end)

net.Receive("Coinflip.Remove", function(len)
	local id = net.ReadUInt(24)

	Coinflip.Games[id] = nil

	hook.Run("Coinflip.Removed", id)
end)

net.Receive("Coinflip.Join", function(len)
	local id = net.ReadUInt(24)
	local winner = net.ReadEntity()
	local rnd = net.ReadFloat()

	hook.Run("Coinflip.Join", id, winner, rnd)
	Coinflip.Games[id] = nil
	hook.Run("Coinflip.Removed", id)
end)

net.Receive("Coinflip.Join.Error", function(len)
	local str = net.ReadString()

	XeninUI:Notify(str, NOTIFY_ERROR, 5, XeninUI.Theme.Red)

	hook.Run("Coinflip.Join.Error", str)
end)

net.Receive("Coinflip.PlayerJoined", function(len)
	local id = net.ReadUInt(24)
	local challenger = net.ReadEntity()
	local winner = net.ReadEntity()
	local rnd = net.ReadFloat()

	hook.Run("Coinflip.PlayerJoined", id, challenger, winner, rnd)
	Coinflip.Games[id] = nil
	hook.Run("Coinflip.Removed", id)
end)

net.Receive("Coinflip.AnnounceWinner", function(len)
	local winner = net.ReadEntity()
	local money = net.ReadUInt(32)
	local loser = net.ReadEntity()
	local currency = net.ReadString()
	if (!IsValid(winner)) then return end
	if (!IsValid(loser)) then return end

	local str = Coinflip.i18n:get("chat.done", {
		winner = winner:Nick(),
		loser = loser:Nick(),
		money = Coinflip:GetCurrency(currency):Format(money)
	}, ":winner: have won :money: in a coinflip against :loser:")

	chat.AddText(Coinflip.Config.ChatPrefixColor, Coinflip.Config.ChatPrefix, color_white, str)
end)

hook.Add("Coinflip.Join", "Coinflip", function(id, winner, time)
	Coinflip:CreateGame(id, LocalPlayer(), winner, time)
end)

hook.Add("Coinflip.PlayerJoined", "Coinflip", function(id, challenger, winner, time)
	Coinflip:CreateGame(id, challenger, winner, time)
end)

function Coinflip:CreateGame(id, challenger, winner, time)
	local tbl = Coinflip.Games[id]
	if (!tbl) then return end
	
	local frame = vgui.Create("Coinflip.Games.Flip")
	frame:SetInfo({
		author = tbl.author,
		challenger = challenger,
		winner = winner,
		time = time,
		money = tbl.bet * 2,
		currency = tbl.currency
	})
end

local function Menu()
	if (IsValid(Coinflip.Frame)) then return end
	
	local frame = vgui.Create("Coinflip.Frame")
  local width = math.min(ScrW(), 960)
  local height = math.min(ScrH(), 720)
  frame:SetSize(width, height)
  frame:Center()
  frame:MakePopup()
  frame:SetTitle(Coinflip.Config.MenuTitle)
end

net.Receive("Coinflip.Menu", Menu)
concommand.Add("xenin_coinflip", Menu)
--addons/xenin-coinflip/lua/coinflip/ui/games_flip.lua:
return gluapack()()
--addons/xenin-coinflip/lua/coinflip/ui/history.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/classes/config.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local Config
do
  local _class_0
  local _parent_0 = XeninUI.Configurator.Controller
  local _base_0 = {
    __name = "Config",
    __base = XeninUI.Configurator.Controller.__base,
    __type = function(self)
      return "XeninInventory.Config"end
  }
  _base_0.__index = _base_0
  setmetatable(_base_0, _parent_0.__index)
  _class_0 = setmetatable({
    __init = function(self)
      Config.__parent.__init(self, "inventory")

      self:setTitle({
        "Xenin Inventory",
        "The Modern Itemstore"
      })
      self:addSettingsTab("Settings", "xWYNs1Q", XeninUI.Theme.Accent, {
      hideSearch = true
      })
      self:addEntityTab("Whitelist", "xWYNs1Q", XeninUI.Theme.Green, "XeninInventory.Whitelist", {
      isList = true
      })
      self:addEntityTab("Blacklist", "xWYNs1Q", XeninUI.Theme.Red, "XeninInventory.Blacklist", {
      isList = true
      })


      self:addSetting("holster_time", "Misc", "Override Holster Time", "Description", {
        ["weapon_mp52"] = 2,
        ["weapon_ak472"] = 3
      }, "KeyValue", {
        left = {
          type = "Textentry",
          default = "ye"
        },
        right = {
          type = "Textentry",
          default = 2
        }
      })

      self:addSetting("slots_inv_free", "Basics", "Inventory Free Slots", "Description", 24, "Textentry", {
      number = true
      })
      self:addSetting("slots_inv_paid", "Basics", "Inventory Paid Slots", "Description", {
        ["superadmin"] = 42,
        ["admin"] = 36
      }, "KeyValue", {
        left = {
          type = "Selectbox",
          fetch = function()
            local tbl = {}
            for i, v in pairs(CAMI.GetUsergroups()) do
              table.insert(tbl, {
                name = v.Name,
                data = i
              })
            end

            return tbl
          end,
          default = ""
        },
        right = {
          type = "Textentry",
          default = 24,
          number = true
        }
      })
      self:addSetting("slots_bank_free", "Basics", "Bank Free Slots", "Description", 18, "Textentry", {
      number = true
      })
      self:addSetting("slots_bank_paid", "Basics", "Bank Paid Slots", "Description", {
        ["superadmin"] = 36,
        ["admin"] = 30
      }, "KeyValue", {
        left = {
          type = "Selectbox",
          fetch = function()
            local tbl = {}
            for i, v in pairs(CAMI.GetUsergroups()) do
              table.insert(tbl, {
                name = v.Name,
                data = i
              })
            end

            return tbl
          end,
          default = ""
        },
        right = {
          type = "Textentry",
          default = 30,
          number = true
        }
      })

      self:addSetting("admins", "Basics", "Admin Roles", "Description", {
      ["superadmin"] = true
      }, "KeyValue", {
        left = {
          type = "Selectbox",
          fetch = function()
            local tbl = {}
            for i, v in pairs(CAMI.GetUsergroups()) do
              table.insert(tbl, {
                name = v.Name,
                data = i
              })
            end

            return tbl
          end,
          default = ""
        },
        right = {
          type = "Textentry",
          default = "true",
          readOnly = true
        }
      })
      self:addSetting("language", "Basics", "Language", "Description", "English", "Selectbox", {
      fetch = function()
        local tbl = {}
        for i, v in SortedPairs(XeninInventory.Languages) do
          table.insert(tbl, {
            name = i,
            data = i
          })
        end

        return tbl
      end
      })

      self:addSetting("modifier_enabled", "Binds", "Require holding modifier key to pickup item", "Description", true, "Checkbox")
      self:addSetting("modifier_key", "Binds", "Key for modifier", "Description", KEY_LALT, "Key")
      self:addSetting("alt_key", "Binds", "Key used to pickup items", "Description", KEY_E, "Key")
      self:addSetting("inventory_key", "Binds", "Key to open inventory", "Description", KEY_NONE, "Key")

      self:addSetting("npc_model", "NPC", "Model", "Description", "models/humans/group02/female_01.mdl", "Textentry")
      self:addSetting("npc_color", "NPC", "Overhead Color", "Description", Color(201, 176, 15), "Color")
      self:addSetting("npc_text", "NPC", "Overhead Text", "Description", "Inventory Bank", "Textentry")
      self:addSetting("npc_icon", "NPC", "Overhead Icon", "Description", "xenin/inventory/icon.png", "Textentry")

      self:addSetting("easy_skins", "Misc", "Easy Skins", "Description", true, "Checkbox")
      self:addSetting("wipe_on_dc", "Misc", "Wipe On Disconnect", "Description", false, "Checkbox")
      self:addSetting("context_menu_disabled", "Misc", "C Menu Disabled", "Description", false, "Checkbox")
      self:addSetting("context_menu_size", "Misc", "C Menu Size", "Description", "Large", "Selectbox", {
      fetch = function()
        return {
          {
            name = "Large",
            data = "Large"
          },
          {
            name = "Medium",
            data = "Medium"
          }
        }
      end
      })


      self:addSetting("ui_slot_color", "UI", "Slot Color", "Description", XeninUI.Theme.Navbar, "Color")
      self:addSetting("ui_slot_name_color", "UI", "Slot Name Color", "Description", XeninUI.Theme.Primary, "Color")
      self:addSetting("ui_slot_text_color", "UI", "Slot Text Color", "Description", Color(225, 225, 225), "Color")
    end,
    __base = _base_0,
    __parent = _parent_0
  }, {
    __index = function(cls, parent)
      local val = rawget(_base_0, parent)
      if val == nil then local _parent = rawget(cls, "__parent")
        if _parent then return _parent[parent]
        end
      else
        return val
      end
    end,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  if _parent_0.__inherited then _parent_0.__inherited(_parent_0, _class_0)
  end
  Config = _class_0
end

XeninInventory.Config2 = Config()

--addons/xenin-inventory/lua/inventory/entities/blacklist.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

XeninInventory.Blacklist = XeninInventory.Blacklist || {}
local Blacklist
do
  local _class_0
  local _parent_0 = XeninUI.Configurator.Entity
  local _base_0 = {
    __name = "Blacklist",
    __base = XeninUI.Configurator.Entity.__base,
    onSave = function(self)
      local id = self:getId()
      if (!id) then return end

      XeninInventory.Blacklist[id] = self
    end,
    onDelete = function(self)
      local id = self:getId()
      if (!id) then return end

      XeninInventory.Blacklist[id] = nil
    end,
    __type = function(self)
      return "XeninUI.Configurator.Entity"end
  }
  _base_0.__index = _base_0
  setmetatable(_base_0, _parent_0.__index)
  _class_0 = setmetatable({
    __init = function(self)
      Blacklist.__parent.__init(self)

      self:setDatabaseEntity("XeninInventory.Blacklist")

      self:addColumn("id", {
        type = "string",
        primary = true,
        length = 255,
        readOnly = true,
        isName = true
      })
    end,
    __base = _base_0,
    __parent = _parent_0,
    getAllEntities = function()
      return XeninInventory.Blacklist end,
    getGridContent = function()
      local tbl = table.Copy(weapons.GetList())
      for i, v in pairs(scripted_ents.GetList()) do
        if (v.t.ClassName:lower():find("base")) then continue end

        table.insert(tbl, v.t)
      end

      table.sort(tbl, function(a, b)
        return (a.PrintName or a.ClassName) < (b.PrintName or b.ClassName)
      end)

      return tbl
    end,
    selectRowString = "Select A Weapon/Entity",
    getListView = function(entity, isList)
      local id = entity:getId()
      local wep = weapons.Get(id)
      if wep then
        return {
          display = wep.WorldModel,
          title = wep.PrintName,
          subtitle = wep.ClassName,
          entClass = wep.ClassName
        }
      end
      local ent = scripted_ents.Get(id)
      if ent then
        return {
          title = ent.PrintName,
          subtitle = ent.ClassName,
          entClass = ent.ClassName
        }
      end
    end,
    getGridData = function(tbl)
      if (!tbl.PrintName) then return end

      return {
      entClass = tbl.ClassName
      }
    end,
    gridSetDefaultData = function(entity, data, index)
      entity:setId(data.entClass)
    end
  }, {
    __index = function(cls, parent)
      local val = rawget(_base_0, parent)
      if val == nil then local _parent = rawget(cls, "__parent")
        if _parent then return _parent[parent]
        end
      else
        return val
      end
    end,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  if _parent_0.__inherited then _parent_0.__inherited(_parent_0, _class_0)
  end
  Blacklist = _class_0
end

Blacklist.register("XeninInventory.Blacklist", Blacklist)

--addons/xenin-inventory/lua/inventory/languages/english.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local LANG = {
  ["ConCommand.Drop"] = "Dropped :item:",
  ["ConCommand.DropAll"] = "Dropped :amount:x :item:",
  ["ConCommand.Destroy"] = "Destroyed :amount:x :item:",
  ["ConCommand.Destroy.Popup.Title"] = "Destroy :item:",
  ["ConCommand.Destroy.Popup.Desc"] = "Are you sure you want to destroy :item:?",
  ["ConCommand.Destroy.Popup.Yes"] = "Yes",
  ["ConCommand.Destroy.Popup.No"] = "No",

  ["ChatCommand.Holster.Unable"] = "You are unable to holster this weapon due to your limited inventory space",
  ["ChatCommand.Blacklisted"] = "This item is blacklisted",
  ["ChatCommand.AccessRestricted"] = "Your access to your inventory is currently restricted.",

  ["Bank.Title"] = "Inventory - Bank",
  ["XeninInventory.Title"] = "Inventory",


  ["XeninInventory.Tabs.XeninInventory"] = "INVENTORY",


  ["XeninInventory.Popup.Equip"] = "Equip",
  ["XeninInventory.Popup.Drop"] = "Drop",
  ["XeninInventory.Popup.Drop All"] = "Drop All",
  ["XeninInventory.Popup.Destroy"] = "Destroy",
  ["XeninInventory.Popup.Use"] = "Use",
  ["XeninInventory.Popup.Drop Amount"] = "Drop Amount",

  ["XeninInventory.Popup.DropAmount.Error.Invalid"] = "Invalid number?",
  ["XeninInventory.Popup.DropAmount.Error.TooLow"] = "Too low of a number",
  ["XeninInventory.Popup.DropAmount.Error.TooHigh"] = "You can't have drop that many because you don't have that many!",


  ["XeninInventory.Actions.Equip"] = "EQUIP",
  ["XeninInventory.Actions.Drop"] = "DROP",
  ["XeninInventory.Actions.Drop All"] = "DROP ALL",
  ["XeninInventory.Actions.Destroy"] = "DESTROY",
  ["XeninInventory.Actions.Use"] = "USE",
  ["XeninInventory.Actions.Drop Amount"] = "DROP AMOUNT",


  ["XeninInventory.Field.Amount"] = "x:amount:",
  ["XeninInventory.Field.MaxAmount"] = "max x:amount:",

  ["XeninInventory.XeninInventory.Search"] = "Search for an item",

  ["XeninInventory.XeninInventory.Unsorted"] = "Unsorted",
  ["XeninInventory.XeninInventory.Alphabetically"] = "Alphabetically",
  ["XeninInventory.XeninInventory.WorstToBest"] = "Worst to best",
  ["XeninInventory.XeninInventory.BestToWorst"] = "Best to worst",

  ["XeninInventory.Shipment.Desc"] = ":amount: weapons left",

  ["XeninInventory.Pickup.Markup"] = ":font::color:Press :/color::rarityColor::modifierKey: + :key::/color: to add :name: to your inventory:/color::/font:",
  ["XeninInventory.Pickup"] = "Press :modifierKey: + :key: to add :name: to your inventory",
  ["XeninInventory.Money"] = ":money:",

  ["Admin.Title"] = "Inventory Admin",
  ["Admin.Tabs.Management"] = "MANAGEMENT",
  ["Admin.NotAdmin"] = "You need to be an inventory admin to open this!",

  ["Admin.Management.Loading"] = "Loading",
  ["Admin.Management.Search"] = "Search by name/SteamID(64)",
  ["Admin.Management.Searching"] = "Searching",
  ["Admin.Management.Online"] = "Online",
  ["Admin.Management.Offline"] = "Offline",
  ["Admin.Management.OpenInventory"] = "Open Inventory",

  ["Admin.Player.Title"] = "Player Inventory",
  ["Admin.Player.Tabs.XeninInventory"] = "INVENTORY",
  ["Admin.Player.Tabs.Bank"] = "BANK",
  ["Admin.Player.Items"] = ":items: items",
  ["Admin.Player.Clear.XeninInventory"] = "Clear Inventory",
  ["Admin.Player.Clear.Bank"] = "Clear Bank",
  ["Admin.Player.Clear.Popup.Text"] = "Are you sure you want to clear this players :type:? This cannot be undone!",
  ["Admin.Player.Clear.Popup.Yes"] = "Yes, clear",
  ["Admin.Player.Clear.Popup.No"] = "No",

  ["Admin.Clear.Slot"] = "Your :type: slot number :id: have been cleared by an admin",
  ["Admin.Clear"] = "Your :type: have been cleared by an admin"
}

XeninInventory:CreateLanguage("English", LANG)

--addons/zeros_growop2_v1.6.1/lua/inventory/configuration/items/zgo2_edible.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(1)
ITEM:SetModel("models/zerochain/props_growop2/zgo2_food_muffin.mdl")

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data

	if zgo2.Plant.IsValid(data.WeedID) then
		ent:SetWeedID(zgo2.Plant.GetListID(data.WeedID))
		ent:SetWeedAmount(data.WeedAmount)
		ent:SetWeedTHC(data.WeedTHC or 50)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

		ent:SetBodygroup(0,1)
	end


	local EdibleData = zgo2.Edible.GetData(data.EdibleID)
	if EdibleData then
		ent:SetModel(EdibleData.edible_model)
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a


	ent:SetEdibleID(data.EdibleID)

	zclib.Player.SetOwner(ent, ply)
end)

function ITEM:GetData(ent)
	return {
		WeedID = zgo2.Plant.GetID(ent:GetWeedID()),
		WeedAmount = math.Round(ent:GetWeedAmount()),
		WeedTHC = math.Round(ent:GetWeedTHC()),
		EdibleID = ent:GetEdibleID()
	}
end

function ITEM:GetVisualAmount(item)
	return 1
end

function ITEM:GetName(item)
	local ent = isentity(item)

	local EdibleID = ent and item:GetEdibleID() or item.data.EdibleID

	local WeedID = ent and item:GetWeedID() or item.data.WeedID
	local WeedTHC = ent and item:GetWeedTHC() or ( item.data.WeedTHC or 50 )

	local name = zgo2.Edible.GetName(EdibleID)

	local WeedData = zgo2.Plant.GetData(WeedID)
	if not WeedData then return name end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a



	return name .. " | " .. zgo2.Plant.GetName(WeedID) .. " THC: " .. WeedTHC .. "%"
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

function ITEM:GetDisplayName(item)
    return self:GetName(item)
end

local ang = Angle(0, 45, 0)
function ITEM:GetCameraModifiers(tbl)
    return {
        FOV = 30,
        X = 0,
        Y = 0,
        Z = 50,
        Angles = ang,
        Pos = vector_origin
    }
end

function ITEM:GetClientsideModel(tbl, mdlPanel)

	local EdibleData = zgo2.Edible.GetData(tbl.data.EdibleID)
	if EdibleData then
		mdlPanel.Entity:SetModel(EdibleData.edible_model)
	end

	local WeedData = zgo2.Plant.GetData(tbl.data.WeedID)
	if not WeedData then return end

	mdlPanel.Entity:SetBodygroup(0,1)

	zgo2.Plant.UpdateMaterial(mdlPanel.Entity, WeedData)
end

ITEM:Register("zgo2_edible")

--addons/zeros_growop2_v1.6.1/lua/inventory/configuration/items/zgo2_jar.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(1)
ITEM:SetModel("models/zerochain/props_growop2/zgo2_jar.mdl")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data

	if not zgo2.Plant.IsValid(data.WeedID) then
		zclib.Notify(ply, zgo2.language["InvalidPlantData"], 1)
		SafeRemoveEntity(ent)
		return
	end

	if zgo2.Jar.ReachedSpawnLimit(ply) then
		zclib.Notify(ply, zgo2.language[ "Spawnlimit" ], 1)
		zclib.Inventory.Pickup(ply,ent,ent:GetClass())
		//SafeRemoveEntity(ent)
		return
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

	ent:SetWeedID(zgo2.Plant.GetListID(data.WeedID))
	ent:SetWeedAmount(data.WeedAmount)
	ent:SetWeedTHC(data.WeedTHC or 50)

	zclib.Player.SetOwner(ent, ply)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

	zgo2.Jar.UpdateBodygroups(ent)
end)

function ITEM:GetData(ent)
	return {
		WeedID = zgo2.Plant.GetID(ent:GetWeedID()),
		WeedAmount = math.Round(ent:GetWeedAmount()),
		WeedTHC = math.Round(ent:GetWeedTHC())
	}
end

function ITEM:GetVisualAmount(item)
	return item.data.WeedAmount
end

function ITEM:GetName(item)
	local ent = isentity(item)
	local WeedID = ent and item:GetWeedID() or item.data.WeedID
	local WeedTHC = ent and item:GetWeedTHC() or ( item.data.WeedTHC or 50 )

	local WeedData = zgo2.Plant.GetData(WeedID)
	if not WeedData then return "Jar" end

	return zgo2.Plant.GetName(WeedID) .. " THC: " .. WeedTHC .. "%"
end

function ITEM:GetDisplayName(item)
    return self:GetName(item)
end

local ang = Angle(0, 45, 0)
function ITEM:GetCameraModifiers(tbl)
    return {
        FOV = 30,
        X = 0,
        Y = 0,
        Z = 50,
        Angles = ang,
        Pos = vector_origin
    }
end

function ITEM:GetClientsideModel(tbl, mdlPanel)
	local WeedData = zgo2.Plant.GetData(tbl.data.WeedID)
	if not WeedData then return end

	local weed_amount = tbl.data.WeedAmount
	local Jar = mdlPanel.Entity
	Jar:SetBodygroup(0, 0)
	Jar:SetBodygroup(1, 0)
	Jar:SetBodygroup(2, 0)
	Jar:SetBodygroup(3, 0)
	Jar:SetBodygroup(4, 0)

	if weed_amount > 0 then
		local bg = math.Clamp(math.Round((5 / zgo2.config.Jar.Capacity) * weed_amount), 1, 5)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

		for i = 0, bg - 1 do
			Jar:SetBodygroup(i, 1)
		end
	end

	zgo2.Plant.UpdateMaterial(Jar, WeedData)
end

ITEM:Register("zgo2_jar")

--addons/zeros_methlab02_v1.4.1/lua/inventory/configuration/items/zmlab2_item_crate.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(1)
ITEM:SetModel("models/zerochain/props_methlab/zmlab2_crate.mdl")
ITEM:SetDescription(function(self, tbl)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

	local MethType = tbl.data.MethType
	local desc = ""
	if zmlab2.config.MethTypes[MethType] and zmlab2.config.MethTypes[MethType].desc then
		desc = zmlab2.config.MethTypes[MethType].desc
	end

	return {
		"Quality: " .. tbl.data.MethQuality .. "%",
		"Info: " .. desc,
	}
end)

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data

	ent:SetMethType(data.MethType)
	ent:SetMethAmount(data.MethAmount)
	ent:SetMethQuality(data.MethQuality)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

	zclib.Player.SetOwner(ent, ply)
end)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ITEM:GetData(ent)
	return {
		MethType = ent:GetMethType(),
		MethAmount = ent:GetMethAmount(),
		MethQuality = ent:GetMethQuality(),
	}
end

function ITEM:GetVisualAmount(item)
	return item.data.MethAmount
end

function ITEM:GetDisplayName(item)
	return self:GetName(item)
end

function ITEM:GetName(item)
	local name = "Unkown"

	local ent = isentity(item)
	local MethType = ent and item:GetMethType() or item.data.MethType
	//local MethAmount = ent and item:GetMethAmount() or item.data.MethAmount
	//local MethQuality = ent and item:GetMethQuality() or item.data.MethQuality

	if zmlab2.config.MethTypes[MethType] and zmlab2.config.MethTypes[MethType].name then
		name = zmlab2.config.MethTypes[MethType].name//.. " " .. (MethQuality or 0) .. "%"
	end

	return name
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ITEM:GetCameraModifiers(tbl)
	return {
		FOV = 40,
		X = 0,
		Y = -22,
		Z = 25,
		Angles = Angle(0, -190, 0),
		Pos = Vector(0, 0, -1)
	}
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ITEM:GetClientsideModel(tbl, mdlPanel)
	local MethMat = zmlab2.Meth.GetMaterial(tbl.data.MethType,tbl.data.MethQuality)
	if MethMat then
		mdlPanel.Entity:SetSubMaterial(0, "!" .. MethMat)
	end

	local cur_amount = tbl.data.MethAmount
	if cur_amount <= 0 then
		mdlPanel.Entity:SetBodygroup(0, 5)
	else
		local bg = math.Clamp(5 - math.Round((5 / zmlab2.config.Crate.Capacity) * cur_amount), 1, 5)
		mdlPanel.Entity:SetBodygroup(0, bg)
	end
end

ITEM:Register("zmlab2_item_crate")

--addons/zeros_retrominer_v2.3.6/lua/inventory/configuration/items/zrms_gravelcrate.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/inventory/configuration/items/zyb_jarcrate.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/config/sh_config.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/core/sh_languages.lua:
YAWS.Language.Languages = YAWS.Language.Languages or {}

-- Only enable this if your testing translations. 
-- For more info: https://www.gmodstore.com/help/addon/yet-another-warning-system-yaws-user-warning-and-punishment-system/other-6/topics/become-a-translator-2
YAWS.Language.TRANSLATOR_MODE = false

-- And this is for me, Livaco :)
-- All this does is prevent the addon from making the request to
-- the github repo for the new translations, forcing the addon to
-- only work off the local files inside /yaws/languages
-- DO NOT EVER ENABLE THIS ON A SERVER as you might potentially
-- fuck up your clients that are connecting
YAWS.Language.DEVELOPMENT_MODE = false

if(CLIENT) then 
    YAWS.Language.PreparedJobs = {}
    YAWS.Language.Manifest = YAWS.Language.Manifest or {}
    YAWS.Language.WaitingForRequest = false

    hook.Add("InitPostEntity", "yaws.language.fetchshit", function()
        if(YAWS.Language.TRANSLATOR_MODE) then
            YAWS.Language.SelectLanguage()
            hook.Run("yaws.language.manifsetloaded")
        end 

        if(YAWS.Language.DEVELOPMENT_MODE) then
            YAWS.Language.SelectLanguage()
            hook.Run("yaws.language.manifsetloaded")
            return
        end 

        http.Fetch("https://raw.githubusercontent.com/LivacoNew/Addon-Translations/master/YAWS/versions.json", function(body, size, headers, code)
            -- just make it a bit easier to parse
            body = string.Replace(body, "\n", "")
            body = string.Replace(body, "  ", "")
            
            local data = util.JSONToTable(body)
            if(!data) then
                YAWS.Core.LogWarning("Invalid manifest JSON. Resorting to English.")
                YAWS.Language.SendRawMessage("Invalid manifest JSON. Resorting to English.")
                YAWS.UserSettings.SetValue("selected_language", "English")
                YAWS.Language.Language = "English"
                return
            end
            -- YAWS.Language.Languages['English'] = data

            local verString = YAWS.Version.Major .. "." .. YAWS.Version.Minor .. "." .. YAWS.Version.Patch
            if(!data[verString]) then
                -- Find the next last version's translation
                local curMajor = 0
                local curMinor = 0
                local curPatch = 0

                for k,v in pairs(data) do
                    local version = string.Explode(".", k)
                    version[1] = tonumber(version[1])
                    version[2] = tonumber(version[2])
                    version[3] = tonumber(version[3])

                    if(version[1] != curMajor) then
                        if(curMajor < version[1]) then
                            curMajor = version[1]
                        end
                    end
                    if(version[2] != curMinor) then
                        if(curMinor < version[2]) then
                            curMinor = version[2]
                        end
                    end
                    if(version[3] != curPatch) then
                        if(curPatch < version[3]) then
                            curPatch = version[3]
                        end
                    end
                end

                local verString = curMajor .. "." .. curMinor .. "." .. curPatch
                YAWS.Language.Manifest = data[verString]
                YAWS.Core.LogInfo("Couldn't find translation pack for current version.")
                YAWS.Core.LogInfo("Using last available one: ", verString, " - Current version ", YAWS.Version.Release, "")
                YAWS.Core.LogInfo("(In 99.999% of cases, this message is normal and can be ignored)")
            else 
                YAWS.Language.Manifest = data[verString]
            end 

            YAWS.Language.SelectLanguage()
            hook.Run("yaws.language.manifsetloaded")
        end, function(error)
            YAWS.Core.LogWarning("Can't find the Language Manifest. Resetting to English.")
        end)
    end)

    function YAWS.Language.GetTranslation(key)
        if(!YAWS.Language.Languages[YAWS.Language.Language or "English"]) then 
            if(YAWS.Language.WaitingForRequest) then 
                return "Loading new Language..."
            end

            YAWS.Core.LogWarning("Can't find the Language selected. Resorting to English.")
            YAWS.Language.SendRawMessage("Can't find the Language selected. Resorting to English.")
            YAWS.UserSettings.SetValue("selected_language", "English")
            YAWS.Language.Language = "English"
        end 
        if(!YAWS.Language.Languages[YAWS.Language.Language or "English"][key]) then 
            YAWS.Core.LogWarning("Can't find the requested translation. Assuming translation is incomplete for this version of YAWS, resorting to english.")
            YAWS.Core.LogWarning("Missing translation: " .. key)
            YAWS.Language.SendRawMessage("Can't find the requested translation. Assuming translation is incomplete for this version of YAWS, resorting to english.")
            YAWS.UserSettings.SetValue("selected_language", "English")
            YAWS.Language.Language = "English"
        end 
        return YAWS.Language.Languages[YAWS.Language.Language or "English"][key]
    end 
    -- This is here for the context menu, that can sometimes call it too early
    -- and cause errors
    function YAWS.Language.GetTranslationSafe(key)
        if(table.Count(YAWS.Language.Languages) <= 0) then return "" end
        if(!YAWS.Language.Languages[YAWS.Language.Language or "English"]) then return "" end
        
        return YAWS.Language.Languages[YAWS.Language.Language or "English"][key]
    end 
    function YAWS.Language.GetFormattedTranslation(key, ...)
        if(!YAWS.Language.Languages[YAWS.Language.Language]) then 
            if(YAWS.Language.WaitingForRequest) then 
                return "Loading new Language..."
            end 

            YAWS.Core.LogWarning("Can't find the Language selected. Resorting to English.")
            YAWS.Language.SendRawMessage("Can't find the Language selected. Resorting to English.")
            YAWS.UserSettings.SetValue("selected_language", "English")
            YAWS.Language.Language = "English"
        end 
        if(!YAWS.Language.Languages[YAWS.Language.Language][key]) then 
            YAWS.Core.LogWarning("Can't find the requested translation. Assuming translation is incomplete for this version of YAWS, resorting to english.")
            YAWS.Core.LogWarning("Missing translation: " .. key)
            YAWS.Language.SendRawMessage("Can't find the requested translation. Assuming translation is incomplete for this version of YAWS, resorting to english.")
            YAWS.UserSettings.SetValue("selected_language", "English")
            YAWS.Language.Language = "English"
        end 
        
        return string.format(YAWS.Language.GetTranslation(key), unpack({...}))
    end 
    
    function YAWS.Language.SelectLanguage()
        if(YAWS.Language.TRANSLATOR_MODE) then
            local json = file.Read("yaws_language_dev.json")
            if(!json) then 
                YAWS.Core.LogError("Warning: Loading development language failed (File not found)")
                YAWS.Core.LogError("Using the addon might produce errors!")
                YAWS.Language.SendRawMessage("Warning: Loading development language failed (File not found)")
                YAWS.Language.SendRawMessage("Using the addon might produce errors!")
                return
            end
            
            if(!pcall(util.JSONToTable, json)) then -- yes this means it runs twice but error checking is kinda needed here
                YAWS.Core.LogError("Warning: Loading development language failed (Invalid JSON)")
                YAWS.Core.LogError("Using the addon might produce errors!")
                YAWS.Language.SendRawMessage("Warning: Loading development language failed (Invalid JSON)")
                YAWS.Language.SendRawMessage("Using the addon might produce errors!")
                return
            end

            local data = util.JSONToTable(json)
            if(!data) then
                YAWS.Core.LogError("Warning: Loading development language failed (Invalid JSON)")
                YAWS.Core.LogError("Using the addon might produce errors!")
                YAWS.Language.SendRawMessage("Warning: Loading development language failed (Invalid JSON)")
                YAWS.Language.SendRawMessage("Using the addon might produce errors!")
                return
            end

            YAWS.Language.Languages["test_lang"] = data
            YAWS.Language.Language = "test_lang"

            YAWS.Core.LogInfo("Loaded test language.")
            YAWS.Language.SendRawMessage("Loaded test language.")

            return
        end 

        if(YAWS.Language.DEVELOPMENT_MODE) then
            YAWS.UserSettings.SetValue("selected_language", "English")
            YAWS.Language.Language = "English"
            YAWS.Language.Language = YAWS.UserSettings.GetValue("selected_language")

            return
        end 

        YAWS.Language.WaitingForRequest = true
        YAWS.Language.Language = YAWS.UserSettings.GetValue("selected_language")
        
        local needsReopening = false
        if(YAWS.UI.CurrentData) then 
            if(YAWS.UI.CurrentData.FrameCache) then 
                YAWS.UI.CurrentData.FrameCache:Remove()
                needsReopening = true
            end
        end
        if(YAWS.Language.Language == "English") then
            if(!YAWS.UI.CurrentData) then return end 
            if(needsReopening) then 
                YAWS.UI.CoreUI(true)
            end 
            return
        end

        if(!YAWS.Language.Manifest[YAWS.Language.Language]) then 
            YAWS.Core.LogWarning("Translation does not exist for this version of YAWS. Resorting to English.")
            YAWS.Language.SendRawMessage("Translation does not exist for this version of YAWS. Resorting to English.")
            YAWS.UserSettings.SetValue("selected_language", "English")
            YAWS.Language.Language = "English"
        end 

        -- https://raw.githubusercontent.com/LivacoNew/YAWS-Translations/master/en.json
        -- No, this isn't a backdoor. This is just the translation stuff being loaded in from the github. It's litreally json lol
        http.Fetch(YAWS.Language.Manifest[YAWS.Language.Language].file, function(body, size, headers, code)
            -- just make it a bit easier to parse
            body = string.Replace(body, "\n", "")
            body = string.Replace(body, "  ", "")
            
            if(!pcall(util.JSONToTable, body)) then -- yes this means it runs twice but error checking is kinda needed here
                YAWS.Core.LogWarning("Invalid JSON. Resorting to English.")
                YAWS.Language.SendRawMessage("Invalid JSON. Resorting to English.")
                YAWS.UserSettings.SetValue("selected_language", "English")
                YAWS.Language.Language = "English"
                YAWS.Language.WaitingForRequest = false
                return
            end

            local data = util.JSONToTable(body)
            if(!data) then
                YAWS.Core.LogWarning("Invalid JSON. Resorting to English.")
                YAWS.Language.SendRawMessage("Invalid JSON. Resorting to English.")
                YAWS.UserSettings.SetValue("selected_language", "English")
                YAWS.Language.Language = "English"
                YAWS.Language.WaitingForRequest = false
                return
            end
            -- YAWS.Language.Languages['English'] = data

            YAWS.Language.Languages[YAWS.Language.Language] = data
            if(needsReopening) then
                YAWS.UI.CoreUI(true)
            end

            YAWS.Core.LogInfo(YAWS.Language.Language, " Translation authored by:")
            for k,v in pairs(data.authors) do
                YAWS.Core.LogInfo(" - ", v)
            end

            YAWS.Language.WaitingForRequest = false
            hook.Run("yaws.language.updated")
        end, function(error)
            YAWS.Core.LogWarning("Can't find the Language selected. Resorting to English.")
            YAWS.Language.SendRawMessage("Can't find the Language selected. Resorting to English.")
            YAWS.UserSettings.SetValue("selected_language", "English")
            YAWS.Language.Language = "English"
        end)
    end 

    hook.Add("yaws.usersettings.updated", "yaws.languages.change", function(key, val)
        if(key != "selected_language") then return end 
        YAWS.Language.SelectLanguage()

        hook.Run("yaws.language.updated")
    end)
    -- hook.Add("yaws.usersettings.created", "yaws.languages.setup", function()
    --     YAWS.Language.SelectLanguage()
    -- end)

    hook.Add("yaws.config.clientready", "yaws.language.clientisready", function()
        if(!YAWS.Language.PreparedJobs) then return end 
        
        if(#YAWS.Language.PreparedJobs <= 0) then 
            YAWS.Language.PreparedJobs = nil -- micro-optimisations for the win
            return
        end 

        for _, job in pairs(YAWS.Language.PreparedJobs) do
            if(job.raw) then 
                YAWS.Language.SendRawMessage(job.message)
                continue
            end 

            YAWS.Language.SendMessage(job.key, unpack(job.options))
        end
        YAWS.Language.PreparedJobs = nil
    end)

    function YAWS.Language.SendMessage(key, ...)
        if(!YAWS.Config.ClientReady) then -- Pre-config is ready checks. Prevents prefix from being wrong on join.
            YAWS.Language.PreparedJobs[#YAWS.Language.PreparedJobs + 1] = {
                key = key,
                options = {...}
            }
            return
        end 
        
        local col = YAWS.Config.GetValue("prefix_color")
        chat.AddText(Color(col.r, col.g, col.b), YAWS.Config.GetValue("prefix"), " ", YAWS.Config.GetValue("chat_color"), YAWS.Language.GetFormattedTranslation(key, unpack({...})))
    end 
    function YAWS.Language.SendRawMessage(message)
        if(!YAWS.Config.ClientReady) then -- Pre-config is ready checks. Prevents prefix from being wrong on join.
            YAWS.Language.PreparedJobs[#YAWS.Language.PreparedJobs + 1] = {
                raw = true,
                message = message
            }
            return
        end 

        local col = YAWS.Config.GetValue("prefix_color")
        chat.AddText(Color(col.r, col.g, col.b), YAWS.Config.GetValue("prefix"), " ", YAWS.Config.GetValue("chat_color"), message)
    end 

    net.Receive("yaws.language.sendmessage", function(len)
        YAWS.Core.PayloadDebug("yaws.language.sendmessage", len)
        local key = net.ReadString()
        
        local args = {}
        local hasArgs = net.ReadBool()
        if(hasArgs) then 
            local length = net.ReadUInt(16)
            local data = net.ReadData(length)
            
            args = util.JSONToTable(util.Decompress(data))
        end 
        
        YAWS.Language.SendMessage(key, unpack(args))
    end)
    net.Receive("yaws.language.sendrawmessage", function(len)
        YAWS.Core.PayloadDebug("yaws.language.sendrawmessage", len)
        YAWS.Language.SendRawMessage(net.ReadString())
    end)

    if(YAWS.Language.TRANSLATOR_MODE) then 
        concommand.Add("yaws_resetlang", function(ply, cmd, args)
            if(!YAWS.Language.TRANSLATOR_MODE) then 
                YAWS.Core.LogWarning("Translator mode not activated.")
                return
            end 

            YAWS.Language.SelectLanguage()
        end)
    end 
else 
    util.AddNetworkString("yaws.language.sendmessage")
    util.AddNetworkString("yaws.language.sendrawmessage")

    function YAWS.Language.SendMessage(ply, key, ...)
        net.Start("yaws.language.sendmessage")
        net.WriteString(key)
        -- this is serverside so this is okay
        local args = {...}
        if(#args > 0) then
            net.WriteBool(true)
            local data = util.Compress(util.TableToJSON(args))
            net.WriteUInt(#data, 16)
            net.WriteData(data)
        else 
            net.WriteBool(false)
        end     
        net.Send(ply)
    end 
    function YAWS.Language.SendRawMessage(ply, message)
        net.Start("yaws.language.sendrawmessage")
        net.WriteString(message)
        net.Send(ply)
    end 
end
--addons/yet_another_warn_system/lua/yaws/punishments/sh_gag.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/punishments/sh_mute.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/cl_collapsable.lua:
local PANEL = {}

function PANEL:Init()
    self:SetExpanded(true)
    self.clr = Color(20, 20, 20)
    self.frameTime = RealFrameTime()

    self.Header:SetTall(40)
    self.Header:SetText("")
    self.Header.label = ""
    self.Header.clr = Color(20, 20, 20)
    self.Header.he = 0
    self.Header.Paint = function(s, w, h)
        if(s.he == 0) then 
            s.he = h / 2
        end 
        local colors = YAWS.UI.ColorScheme() 

        -- draw.RoundedBoxEx(5, 0, 0, w, h, s.clr, true, true, false, false)
        draw.RoundedBox(0, 0, 0, w, h, colors["panel_background"])
        if(!self:GetExpanded()) then 
            s.he = Lerp(self.frameTime * 5, s.he, h * 0.42)
        else 
            s.he = Lerp(self.frameTime * 5, s.he, ((h / 2) - 2))
        end
        -- print(s.he)
        draw.SimpleText(self.Header.label, "yaws.9", w * 0.01, s.he, colors['text_header'], 0, 1)

        draw.RoundedBox(0, 0, h - 2, w, 2, colors['divider'])
        s.chevState = YAWS.UI.DrawAnimatedChevron(w - ((h / 2) + 10), s.he - 5, s.he, (h / 4), s.chevState, self:GetExpanded())
    end
end

function PANEL:SetHeaderColor(clr)
    self.Header.clr = clr
end

function PANEL:SetLabel(txt)
    self.Header:SetText("")
    self.Header.label = txt
end

function PANEL:Paint(w, h) 
    -- tried to get shadows here but can't figure it out, if anyone gets it done lemme know so I can add it pls xx oo
end 

vgui.Register("yaws.collapsable", PANEL, "DCollapsibleCategory")
--addons/yet_another_warn_system/lua/yaws/ui/elements/inputs/cl_switch.lua:
-- reusing code from betterbanking to save time here
-- had to go through it and fix my mess of lerp shit tho
local PANEL = {}

function PANEL:Init()
    self:SetText("")

    local colors = YAWS.UI.ColorScheme()
    self.color = color_white
    self.bgColor = colors["switch_bg"]

    self.fade = true

    self.stateSet = false
    self.value = false

    self.frameTime = RealFrameTime()
    self.lerp = self:GetTall() / 2
    self.lerpC = self.color
    self.lerpB = self.bgColor

    self.fadedColor = Color(200, 200, 200)
    self.fadedColorTwo = Color(50, 50, 50)

    self:SetSize(40, 20)
end

function PANEL:SetColor(clr)
    self.color = YAWS.UI.TintColor(clr, 50)
    self.lerpC = YAWS.UI.TintColor(clr, 50)

    self.bgColor = YAWS.UI.TintColor(clr, -50)
    self.lerpB = self.bgColor
end
function PANEL:SetBGColor(clr)
    self.bgColor = clr
    self.lerpB = self.bgColor
end
function PANEL:SetFade(fade)
    self.fade = fade
end
function PANEL:SetValue(value)
    self.value = value
    self:ResetLerp()

    self.OnToggle(self.value)
end
function PANEL:GetValue(value)
    return self.value
end
function PANEL:Toggle()
    if(self.locked) then return end
    self.value = !self.value

    self.OnToggle(self.value)
end

function PANEL:OnToggle(value)
end

function PANEL:DoClick()
    self:Toggle()
end

function PANEL:Paint(w, h)
    self.frameTime = RealFrameTime()

    if(self.value) then
        self.lerp = Lerp(self.frameTime * 5, self.lerp, w - (h / 2))
        if(self.fade) then
            self.lerpC = YAWS.UI.LerpColor(self.frameTime * 5, self.lerpC, self.color)
            self.lerpB = YAWS.UI.LerpColor(self.frameTime * 5, self.lerpB, self.bgColor)
        end
    else
        self.lerp = Lerp(self.frameTime * 5, self.lerp, h / 2)
        if(self.fade) then
            self.lerpC = YAWS.UI.LerpColor(self.frameTime * 5, self.lerpC, self.fadedColor)
            self.lerpB = YAWS.UI.LerpColor(self.frameTime * 5, self.lerpB, self.fadedColorTwo)
        end
    end

    draw.RoundedBox(h / 2, 2, 2, w - 4, h - 4, self.lerpB)

    surface.SetDrawColor(self.lerpC.r, self.lerpC.g, self.lerpC.b)
    YAWS.UI.DrawCircle(self.lerp, h / 2, h / 2, h)

    if(YAWS.UserSettings.GetValue("switch_icons")) then
        YAWS.UI.SetSurfaceDrawColor(self.lerpB)
        if(self.value) then
            surface.SetMaterial(YAWS.UI.MaterialCache['check'])
        else
            surface.SetMaterial(YAWS.UI.MaterialCache['close'])
        end
        surface.DrawTexturedRect(self.lerp - (h / 4), h / 4, h / 2, h / 2)
    end
end
function PANEL:ResetLerp()
    if(self.value) then
        self.lerp = self:GetWide() - (self:GetTall() / 2)
        if(self.fade) then
            self.lerpC = self.color
            self.lerpB = self.bgColor
        end
    else
        self.lerp = self:GetTall() / 2
        if(self.fade) then
            self.lerpC = self.fadedColor
            self.lerpB = self.fadedColorTwo
        end
    end
end
function PANEL:PerformLayout()
    if(self.stateSet) then return end
    self:ResetLerp()
    self.stateSet = true
end

vgui.Register("yaws.switch", PANEL, "DButton")

--addons/yet_another_warn_system/lua/yaws/ui/elements/inputs/cl_text_entry.lua:
local PANEL = {}

AccessorFunc(PANEL, "placeholder", "Placeholder", FORCE_STRING)
AccessorFunc(PANEL, "drawBorder", "DrawBorder", FORCE_BOOL)

function PANEL:Init()
    self:SetFont("yaws.6")
    self:SetText("")
    self.placeholder = "poo"

    self.frameTime = RealFrameTime()

    self.borderColor = YAWS.UI.ColorScheme()['text_entry_border_inactive']
    self:SetDrawBorder(true)

    self.sideShadow = vgui.Create("yaws.shadow", self:GetParent())
    self.bottomShadow = vgui.Create("yaws.shadow", self:GetParent())
    self.bottomShadow:Down()
end 

function PANEL:Paint(w, h)
    self.frameTime = RealFrameTime()
    local colors = YAWS.UI.ColorScheme()

    -- don't question this
    if(self:GetDrawBorder()) then 
        if(self:HasFocus()) then 
            self.borderColor = YAWS.UI.LerpColor(self.frameTime * 5, self.borderColor, colors['text_entry_border_active'])
        else
            self.borderColor = YAWS.UI.LerpColor(self.frameTime * 5, self.borderColor, colors['text_entry_border_inactive'])
        end 

        draw.RoundedBox(0, 0, 0, w, h, self.borderColor)
        draw.RoundedBox(0, 1, 1, w - 2, h - 2, colors['input_bg'])
    else
        draw.RoundedBox(0, 0, 0, w, h, colors['input_bg'])
    end

    self:DrawTextEntryText(colors["text_main"], colors["theme"], colors["theme"])

    if(self:GetText() == "" && (!self:HasFocus() || !self:IsEnabled())) then 
        draw.SimpleText(self.placeholder, self:GetFont(), self.overrideX && self.overrideX || (h / 4), (!self:IsMultiline()) && h / 2 || 5, colors['text_placeholder'], 0, (!self:IsMultiline()) && 1 || 0)
    end 
end 

function PANEL:PerformLayout(w, h)
    self:LayoutShadows(w, h)
end 
function PANEL:RemoveShadows() 
    self.bottomShadow:Remove()
    self.sideShadow:Remove()
end 
function PANEL:OnRemove()
    self:RemoveShadows()
end 
function PANEL:LayoutShadows(w, h)
    local x,y = self:GetPos()
    if(IsValid(self.sideShadow)) then 
        self.sideShadow:SetPos(x + w, y)
        self.sideShadow:SetSize(3, h)
    end 

    if(IsValid(self.bottomShadow)) then 
        self.bottomShadow:SetPos(x, y + h)
        self.bottomShadow:SetSize(w + 1, 3)
    end
end 

function PANEL:GetTotalTextHeight() 
    if(!self:IsMultiline()) then return false end

    surface.SetFont(self:GetFont())
    return select(2, surface.GetTextSize(self:GetText()))
end 

vgui.Register("yaws.text_entry", PANEL, "DTextEntry")
--addons/yet_another_warn_system/lua/yaws/ui/elements/sidebar/cl_sidebar.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/sidebar/cl_sidebar_button.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/layouts/cl_ui.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/layouts/popups/cl_edit_preset.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/layouts/tabs/cl_warnings.lua:
function YAWS.UI.Tabs.Warnings(master)
    master:Clear()
    master.PerformLayout = function() end 
    
    -- YAWS.UI.CurrentData.self_warns
    local playerPanel = vgui.Create("yaws.panel", master)
    local picture = vgui.Create("yaws.round_avatar", playerPanel)
    picture:SetPlayer(LocalPlayer(), 256)

    playerPanel.PostPerformLayout = function(self, w, h)
        picture:Dock(LEFT)
        picture:DockMargin(10, 10, 10, 10)
        picture:SetWide(picture:GetTall())
    end 

    -- Warning Points
    surface.SetFont("yaws.7")

    playerPanel.Paint = function(self, w, h)
        local colors = YAWS.UI.ColorScheme()
        draw.RoundedBox(0, 0, 0, w, h, colors['panel_background'])

        draw.SimpleText(LocalPlayer():Name(), "yaws.10", h + (5), h * 0.375, colors['text_header'], 0, 1)
        draw.SimpleText(LocalPlayer():SteamID(), "yaws.7", h + (5), h * 0.625, colors['text_main'], 0, 1)

        -- points 
        local x = w - 10
        local pointsTextSize = draw.SimpleText(YAWS.UI.CurrentData.self_warn_point_count, "yaws.7", x, h * 0.775, colors['text_main'], 2, 1)

        x = x - pointsTextSize - (h * 0.235) - 3
        YAWS.UI.SetSurfaceDrawColor(colors['active_warning'])
        surface.SetMaterial(YAWS.UI.MaterialCache['warning'])
        surface.DrawTexturedRect(x, h - (h * 0.235) - 10, h * 0.235, h * 0.235)
        
        if(YAWS.UserSettings.GetValue("colorblind_text")) then
            x = x - 10
            draw.SimpleText(YAWS.Language.GetTranslation("accessability_points"), "yaws.7", x, h * 0.775, colors['text_main'], 2, 1)
        end
        
        if(YAWS.Config.GetValue("point_cooldown_time") != 0) then
            if(YAWS.UserSettings.GetValue("colorblind_text")) then
                x = w - 10
                local expiredPointsTextSize = draw.SimpleText(YAWS.UI.CurrentData.self_warn_expired_point_count, "yaws.7", x, h * 0.775 - (h * 0.235) - 5, colors['text_main'], 2, 1)

                x = x - expiredPointsTextSize - (h * 0.235) - 3
                YAWS.UI.SetSurfaceDrawColor(colors['expired_warning'])
                surface.DrawTexturedRect(w - 14 - (h * 0.235) - expiredPointsTextSize, h - ((h * 0.235) * 2) - 15, h * 0.235, h * 0.235)
                
                if(YAWS.UserSettings.GetValue("colorblind_text")) then
                    x = x - 10
                    draw.SimpleText(YAWS.Language.GetTranslation("accessability_inactivepoints"), "yaws.7", x, h * 0.775 - (h * 0.235) - 5, colors['text_main'], 2, 1)
                end
            else 
                -- Horizontal display if not
                x = x - 15
                local expiredPointsTextSize = draw.SimpleText(YAWS.UI.CurrentData.self_warn_expired_point_count, "yaws.7", x, h * 0.775, colors['text_main'], 2, 1)

                x = x - expiredPointsTextSize - (h * 0.235) - 3
                YAWS.UI.SetSurfaceDrawColor(colors['expired_warning'])
                surface.DrawTexturedRect(x, h - (h * 0.235) - 10, h * 0.235, h * 0.235)
            end 
        end
    end 

    local warnings 
    local warningList

    local pagnation = vgui.Create("yaws.pagnation", master)
    pagnation:SetItemCount(YAWS.UI.CurrentData.self_warns_total)
    
    if(!YAWS.UserSettings.GetValue("table_view")) then 
        warnings = vgui.Create("yaws.panel", master)
        warningList = vgui.Create("yaws.scroll", warnings)
    else 
        warnings = vgui.Create("yaws.table", master)
        warnings:Dock(FILL)
        warnings:AddColumn(YAWS.Language.GetTranslation("viewing_player_table_admin"), 0.125)
        warnings:AddColumn(YAWS.Language.GetTranslation("viewing_player_table_reason"), 0.425)
        warnings:AddColumn(YAWS.Language.GetTranslation("viewing_player_table_time"), 0.15)
        warnings:AddColumn(YAWS.Language.GetTranslation("viewing_player_table_points"), 0.15)
        warnings:AddColumn(YAWS.Language.GetTranslation("viewing_player_table_server"), 0.15)
    end

    local function DisplayWarnings(data, count) 
        if(!YAWS.UserSettings.GetValue("table_view")) then
            warningList:Clear()
            if(count > 0) then
                warnings.Paint = function() end 
                warnings:RemoveShadows()
            end 
        
            warningList.Paint = function(self, w, h)
                if(count > 0) then return end 
        
                local colors = YAWS.UI.ColorScheme() 
                
                YAWS.UI.SetSurfaceDrawColor(colors['sidebutton_dull'])
                surface.SetMaterial(YAWS.UI.MaterialCache['warning_slash'])
                surface.DrawTexturedRect((w / 2) - ((h * 0.15) / 2), h * 0.35, h * 0.15, h * 0.15)
                
                local _,textH = draw.SimpleText(YAWS.Language.GetTranslation("no_warning_found1"), "yaws.9", w / 2, h * 0.55, colors['sidebutton_dull'], 1, 1)
                draw.SimpleText(YAWS.Language.GetTranslation("no_warning_found2"), "yaws.9", w / 2, h * 0.55 + textH, colors['sidebutton_dull'], 1, 1)
            end
        
            local cards = {}
            for k,v in SortedPairsByMemberValue(data, "timestamp", true) do 
                local card = vgui.Create("yaws.warning_entry_test", warningList)
                card:SetWarningData(v)
                cards[#cards + 1] = card 
            end 
        
            warnings.PostPerformLayout = function(self, w, h)
                warningList:Dock(FILL)
        
                for k,v in ipairs(cards) do
                    v:Dock(TOP)
                    v:DockMargin(0, 0, 2, 10)
                    -- v:SetHeaderHeight(71)
                    v:SetHeaderHeight(h * 0.165)
                    -- v:DelayedLayout(w, h)
                end
            end 
        else 
            warnings:Clear()
            if(count <= 0) then -- they're numberically indexed but not guarenteed to start at 0
                warnings:RemoveDividersInBody()
                
                warnings.CenterPaint = function(self, w, h)
                    local colors = YAWS.UI.ColorScheme() 
                    
                    YAWS.UI.SetSurfaceDrawColor(colors['sidebutton_dull'])
                    surface.SetMaterial(YAWS.UI.MaterialCache['warning_slash'])
                    surface.DrawTexturedRect((w / 2) - ((h * 0.15) / 2), h * 0.35, h * 0.15, h * 0.15)
                
                    local _,textH = draw.SimpleText(YAWS.Language.GetTranslation("no_warning_found1"), "yaws.9", w / 2, h * 0.55, colors['sidebutton_dull'], 1, 1)
                    draw.SimpleText(YAWS.Language.GetTranslation("no_warning_found2"), "yaws.9", w / 2, h * 0.55 + textH, colors['sidebutton_dull'], 1, 1)
                end
            else 
                local defaultPlayerData = {
                    steamid = LocalPlayer():SteamID64(),
                    realSteamID = LocalPlayer():SteamID(),
                    name = LocalPlayer():Name(),
                    usergroup = LocalPlayer():GetUserGroup()
                }
                for k,v in SortedPairsByMemberValue(data, "timestamp", true) do
                    warnings:AddEntry(function()
                        YAWS.UI.StateCache["viewing_self"] = {
                            -- data = data
                        }
                        YAWS.UI.StateCache["warn_data_return"] = "viewing_self"
            
                        YAWS.UI.DisplayWarnData(defaultPlayerData, v)
                    end, {
                        {
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_id"),
                            func = function() 
                                SetClipboardText(v.id) 
                            end,
                            icon = "icon16/bullet_key.png"
                        },
                        {
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_admin"),
                            func = function() 
                                SetClipboardText(v.admin .. "(" .. util.SteamIDFrom64(v.adminSteamID or "") ")") 
                            end,
                            icon = "icon16/group_key.png"
                        },
                        {
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_reason"),
                            func = function() 
                                SetClipboardText(v.reason)
                            end,
                            icon = "icon16/page_edit.png"
                        },
                        { 
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_time"),
                            func = function() 
                                SetClipboardText(os.date("%H:%M:%S on %d/%m/%Y", v.time))
                            end,
                            icon = "icon16/clock.png"
                        },
                        {
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_points"),
                            func = function() 
                                SetClipboardText(v.points .. " points")
                            end,
                            icon = "icon16/award_star_gold_3.png"
                        },
                        {
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_server"),
                            func = function() 
                                SetClipboardText(v.server_id)
                            end,
                            icon = "icon16/computer.png"
                        },
                        {
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_log"),
                            func = function() 
                                SetClipboardText(string.format("[%s] %s(%s) warned %s(%s) for the reason \"%s\", adding %s points.", os.date("%H:%M:%S on %d/%m/%Y", v.time), v.admin, util.SteamIDFrom64(v.adminSteamID or ""), LocalPlayer():Name(), LocalPlayer():SteamID(), v.reason, v.points))
                            end,
                            icon = "icon16/folder.png"
                        },
                    }, v.admin, v.reason, string.NiceTime(os.time() - v.timestamp) .. " ago", v.points, v.server_id)
                end
            end
        end 
        warnings:InvalidateLayout()
    end 

    DisplayWarnings(YAWS.UI.CurrentData.self_warns, YAWS.UI.CurrentData.self_warns_total)
    pagnation.RefreshPage = function(self, page, offset, amount)
        net.Start("yaws.core.pagnate_self_warns")
        net.WriteUInt(page, 6)
        net.SendToServer()
    
        YAWS.UI.CurrentData.WaitingForPagnatedResponse = true 
    end 
    net.Receive("yaws.core.pagnate_self_warns_results", function(len)
        YAWS.Core.PayloadDebug("yaws.core.playerwarndataresults", len)
        if(!YAWS.UI.CurrentData.WaitingForPagnatedResponse) then
            YAWS.Core.LogWarning("[yaws.core.pagnate_self_warns_results] Just got a message from the server without wanting data from the server..?")
            return
        end 

        local data = util.JSONToTable(util.Decompress(net.ReadData(net.ReadUInt(16))))
        DisplayWarnings(data.results, data.count)

        YAWS.UI.CurrentData.WaitingForPagnatedResponse = false 
    end)

    master.Paint = function(self, w, h) end 
    master.PerformLayout = function(self, w, h) 
        playerPanel:Dock(TOP)
        playerPanel:SetHeight(h * 0.15)
        playerPanel:DockMargin(10, 10, 10, 10)

        -- warnTable:Dock(FILL)
        -- warnTable:DockMargin(10, 0, 10, 10)
        -- if(table.Count(YAWS.UI.CurrentData.self_warns) > 0) then
        --     warnTable:FindBestSize()
        -- end

        if(!YAWS.UserSettings.GetValue("table_view")) then 
            warnings:Dock(FILL)
            warnings:DockMargin(10, 0, 8, 10)
        else 
            warnings:Dock(FILL)
            warnings:DockMargin(10, 0, 10, 10)
            if(table.Count(YAWS.UI.CurrentData.self_warns) > 0) then
                warnings:FindBestSize()
            end
        end 

        pagnation:Dock(BOTTOM)
        pagnation:SetTall(h * 0.05575) -- 33
        pagnation:DockMargin(10, 0, 10, 10)
    end
    master:InvalidateLayout()
end
--addons/advancedkillfeed/lua/z_advancedkillfeed/sh_z_advancedkillfeedsettings.lua:
-- [[ CREATED BY ZOMBIE EXTINGUISHER]]

/* INTRO */
-- Shortcut Colors: SH_ADVANCEDFEED.Col.BLUE,SH_ADVANCEDFEED.Col.RED,SH_ADVANCEDFEED.Col.GREEN,SH_ADVANCEDFEED.Col.WHITE,SH_ADVANCEDFEED.Col.BLACK
-- Custom Colors with: Color(X,X,X)

// APPEARANCE // 
SH_ADVANCEDFEED.Settings.fonts = { -- The selectable fonts in the menu, custom fonts can be added here
	{"TargetID", 0.012},
	{"Bank Gothic", 0.011},
	{"Teko Light", 0.02},
	{"ArcadeClassic", 0.012 }
	-- {"NameOfFont", Size }
}
SH_ADVANCEDFEED.Settings.font = SH_ADVANCEDFEED.Settings.fonts[1] -- Default font
SH_ADVANCEDFEED.Settings.align = SH_ADVANCEDFEED.Align.RIGHT -- Default aligning position

// GENERAL //
SH_ADVANCEDFEED.Settings.accessForTeams = {} -- Teams that can access the killfeed
SH_ADVANCEDFEED.Settings.accessForAdmin = true

SH_ADVANCEDFEED.Settings.hideForTeams = {} -- Teams that can't see the kill feed ( ex: spectator team )
SH_ADVANCEDFEED.Settings.capNamesAt = 25 -- Player names will be capped at this amount of chars
SH_ADVANCEDFEED.Settings.logModus = SH_ADVANCEDFEED.LogModus.BOTTOMTOTOP -- Should the logs be added like in gmod first on top, 2nd under, ...

SH_ADVANCEDFEED.Settings.showNpcs = true -- Show Npcs kills in the logs
SH_ADVANCEDFEED.Settings.showPlayerAvatar = false -- Show Player avatars in the logs
SH_ADVANCEDFEED.Settings.showWeaponIcon = true -- Use weapon icons instead of text in the logs
SH_ADVANCEDFEED.Settings.showWeaponNameWhenIconInvalid = true -- Use the weapon icon only if the weapon has an icon
SH_ADVANCEDFEED.Settings.showCombos = true -- Show kill combos in the logs
SH_ADVANCEDFEED.Settings.showStreaks = true -- Show kill streaks in the logs
SH_ADVANCEDFEED.Settings.showDistance = false -- Show distance between the player and the kill location

SH_ADVANCEDFEED.Settings.showAssists = true -- Show player assists on other players
SH_ADVANCEDFEED.Settings.assistsOnNPC = true -- Can people get assists on npc's?
SH_ADVANCEDFEED.Settings.assistsOnSameTeam = true -- Can people from the same team get assists on each other?

SH_ADVANCEDFEED.Settings.hidePlayerName = false -- Hide name of players
SH_ADVANCEDFEED.Settings.hidePlayerNameText = "Someone" -- Text that will replace playerName

-- SH_ADVANCEDFEED.Hitgroup.NONE (don't show any), SH_ADVANCEDFEED.Hitgroup.ALL (show all), SH_ADVANCEDFEED.Hitgroup.HEAD (show only when shot in head)
SH_ADVANCEDFEED.Settings.showHitGroup = SH_ADVANCEDFEED.Hitgroup.HEAD -- Show where the player was shot last when killed

SH_ADVANCEDFEED.Settings.showSelfKill = true
SH_ADVANCEDFEED.Settings.selfKillText = "hayatı pek doğru gitmedi..."  -- Text when a player kills himself
SH_ADVANCEDFEED.Settings.selfKillTextColor = Color(128,128,128) -- Color of the text

SH_ADVANCEDFEED.Settings.showSelfConnect = true
SH_ADVANCEDFEED.Settings.selfConnectText = "baglandi" -- Text when a player connects
SH_ADVANCEDFEED.Settings.selfDisconnectText = "ayrildi" -- Text when a player disconnects
SH_ADVANCEDFEED.Settings.selfConnectColor = SH_ADVANCEDFEED.Col.LIGHTGREY -- Color of the text

SH_ADVANCEDFEED.Settings.npcKillsPlayerText = "X" -- Text of weapon, when NPC kills a player

SH_ADVANCEDFEED.Settings.ownTeamColor = Color(255,190,0) -- Color of a player that is in your team
SH_ADVANCEDFEED.Settings.otherTeamColor = SH_ADVANCEDFEED.Col.WHITE -- Color of a player that is not in your team
SH_ADVANCEDFEED.Settings.npcTeamColor = SH_ADVANCEDFEED.Col.RED -- Color of a NPC
SH_ADVANCEDFEED.Settings.weaponColor = SH_ADVANCEDFEED.Col.RED -- Color of a weapon
SH_ADVANCEDFEED.Settings.distanceColor = SH_ADVANCEDFEED.Col.WHITE -- Color of the distance
SH_ADVANCEDFEED.Settings.backgroundColor = SH_ADVANCEDFEED.Col.TRANS -- Color of the background (gradient)
SH_ADVANCEDFEED.Settings.borderColor = SH_ADVANCEDFEED.Col.TRANS -- Color of the border
SH_ADVANCEDFEED.Settings.useBackgroundGradient = false -- Use a gradient for the background
SH_ADVANCEDFEED.Settings.borderOnSelfKill = false -- Show the border only to the player who made the kill
SH_ADVANCEDFEED.Settings.csgoSkinActive = false -- To keep track of the csgo skin for extra functionality

SH_ADVANCEDFEED.Settings.maxFadingAlpha = 250 -- Max alpha amount a log can get
SH_ADVANCEDFEED.Settings.timeToFade = 10 -- Amount of seconds before a log fades
SH_ADVANCEDFEED.Settings.fadingSpeed = 3 -- Speed of fading ( higher is faster )
SH_ADVANCEDFEED.Settings.maxNotes = 8 -- Amount of logs that can be on screen at the same time ( X+1 will start fading out )

SH_ADVANCEDFEED.Settings.startPosX = 0.995	-- X position of log feed (lower is more to the left)
SH_ADVANCEDFEED.Settings.startPosY = 0.265 -- Y position of log feed ( lower is upwards )

SH_ADVANCEDFEED.Settings.fontSize = 0.012 -- Size of the text font ( lower is smaller )

if CLIENT then
	SH_ADVANCEDFEED.Settings.moveUp = ScrH()*0.0375 -- Space between logs ( lower is less space )
	SH_ADVANCEDFEED.Settings.playerAvatarSize = ScrW()*0.011 -- Size of the player avatar ( lower is smaller )
end

// ULX //
SH_ADVANCEDFEED.Settings.useULXTeamColors = true -- Use the ULX player group colors ( also works when ULX is not installed )
SH_ADVANCEDFEED.Settings.useULXTeamTags = false -- Show the ULX team names as a tag in the logs

// DARK RP //
SH_ADVANCEDFEED.Settings.useDarkRPJobColors = true -- Use the DarkRP player job colors
SH_ADVANCEDFEED.Settings.useDarkRPJobTags = true -- Show the DarkRP job names as a tag in the logs

SH_ADVANCEDFEED.Settings.notifyOnJobChange = true -- Notify people when a player changes job
SH_ADVANCEDFEED.Settings.notifyOnJobChangeColor = SH_ADVANCEDFEED.Col.LIGHTGREY -- Color of the log

SH_ADVANCEDFEED.Settings.notifyOnFirstJoin = true -- Notify when a player joins the server for the first time
SH_ADVANCEDFEED.Settings.notifyOnFirstJoinText = "ilk kez sunucuya giriş sağladı!" -- text of the log
SH_ADVANCEDFEED.Settings.notifyOnFirstJoinColor = SH_ADVANCEDFEED.Col.LIGHTGREY -- Color of the log

// TTT //
SH_ADVANCEDFEED.Settings.TTTlogPlayerKills = false -- Notify when a player kills another player

SH_ADVANCEDFEED.Settings.notifyOnTTTBeginRound = true -- Notify when a round starts
SH_ADVANCEDFEED.Settings.notifyOnTTTBeginRoundText = "Round Begins!"
SH_ADVANCEDFEED.Settings.notifyOnTTTBeginRoundColor = SH_ADVANCEDFEED.Col.LIGHTGREY

SH_ADVANCEDFEED.Settings.notifyOnTTTEndRound = true -- Notify when a round ends
SH_ADVANCEDFEED.Settings.notifyOnTTTEndRoundText = "Round Ended!"
SH_ADVANCEDFEED.Settings.notifyOnTTTEndRoundColor = SH_ADVANCEDFEED.Col.LIGHTGREY

// ANIMATIONS //

-- wave
SH_ADVANCEDFEED.Settings.animWavePlayers = {} // allow wave anim for players in the table ( STEAM_0:0:0 singleplayer ) 

-- double wave ( even and uneven letters form a wave )
SH_ADVANCEDFEED.Settings.animWaveDoublePlayers = {} // allow double wave anim for players in the table ( STEAM_0:0:0 singleplayer ) 

-- wave distortion
SH_ADVANCEDFEED.Settings.animWaveDistortionPlayers = {} // allow wave distortion anim for players in the table ( STEAM_0:0:0 singleplayer ) 

-- switch
SH_ADVANCEDFEED.Settings.animSwitchPlayers = {} // allow switch anim for players in the table ( STEAM_0:0:0 singleplayer ) 

-- typewriter ( can be combined with another animation )
SH_ADVANCEDFEED.Settings.animTypeWriterSpeed = 0.25 // speed of the animation ( lower is faster )
SH_ADVANCEDFEED.Settings.animTypeWriterRepeat = false // if the animation should keep repeating itself
SH_ADVANCEDFEED.Settings.animTypeWriterPlayers = { // allow typewriter anim players in the table ( STEAM_0:0:0 singleplayer ) 
	-- {"SteamID/UserGroup","PlayerName"},
}

// EFFECTS //

-- moving color
SH_ADVANCEDFEED.Settings.effectMovingColorSpeed = 2 // Speed of the Moving Color effect ( higher is faster )
SH_ADVANCEDFEED.Settings.effectMovingColorPlayers = { // Use effect for following players with specified color
	-- {Player,PlayerName,Color},
}

-- word flash
SH_ADVANCEDFEED.Settings.effectWordFlashPlayers = {} // Use effect for following players

-- letter flash
SH_ADVANCEDFEED.Settings.effectLetterFlashPlayers = {} // Use effect for following players

-- moving rainbow
SH_ADVANCEDFEED.Settings.effectMovingRainbowPlayers = {}

-- rainbow
SH_ADVANCEDFEED.Settings.effectRainbowPlayers = {}

-- pulse line
SH_ADVANCEDFEED.Settings.effectPulseLineSpeed = 10 // Speed of the Pulse Line effect ( higher is faster / <0>: disables pulse )
SH_ADVANCEDFEED.Settings.effectPulseLinePlayers = { // Use effect for following players with specified color
	-- {"SteamID/UserGroup","PlayerName",Color},
}

// CUSTOM HOOKS // ( you can add your own messages on certain events below )
if SERVER then 

	/* EXAMPLE 
		OLD GMOD WIKI: https://maurits.tv/data/garrysmod/wiki/wiki.garrysmod.com/indexd101.html
		NEW GMOD WIKI: http://wiki.garrysmod.com/page/Hooks
		DARKRP WIKI: http://wiki.darkrp.com/index.php/Category:Hooks
		TTT WIKI: http://ttt.badking.net/guides/hooks
		
		local function aUniqueFunctionName(arguments,...)

			net.Start( "AddMsg_Feed" ) -- the net msg to add a log
				net.WriteString("text") -- msg after the player name if any
				net.WriteColor(Color(255,255,255)) -- the color the log will show in
				net.WriteString(player:Nick()) -- a player name ( will be capped at 25 chars ) [can be left out] 
				net.WriteString(player:SteamID()) -- the player's steamID [can be left out]
				net.WriteInt( player:Team(),32 ) -- the player's team [can be left out]
			net.Send(SV_ADVANCEDFEED.GetAllowedPlayers()) -- send to all allowed players

		end
		hook.Add("HookName","aUniqueFunctionName",aUniqueFunctionName) -- adding the function to the event
	*/

end
--addons/zeros_methlab02_v1.4.1/lua/zmlab2/util/cl_fonts.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/autorun/zrms_load.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

zrmine = zrmine or {}
zrmine.f = zrmine.f or {}

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

local function NicePrint(txt)
	if SERVER then
		MsgC(Color(98, 141, 193), txt .. "\n")
	else
		MsgC(Color(193, 193, 98), txt .. "\n")
	end
end

local IgnoreFileTable = {}

function zrmine.f.PreLoadFile(fdir,afile,info)
	IgnoreFileTable[afile] = true
	zrmine.f.LoadFile(fdir,afile,info)
end

function zrmine.f.LoadFile(fdir,afile,info)

	if info then
		local nfo = "// [ Initialize ]: " .. afile .. string.rep( " ", 30 - afile:len() ) .. "//"
		NicePrint( nfo )
	end

	if SERVER then
		AddCSLuaFile(fdir .. afile)
	end

	include(fdir .. afile)
end

function zrmine.f.LoadAllFiles(fdir)
	local files, dirs = file.Find(fdir .. "*", "LUA")

	for _, afile in ipairs(files) do
		if string.match(afile, ".lua") and not IgnoreFileTable[afile] then
			zrmine.f.LoadFile(fdir,afile,true)
		end
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	for _, dir in ipairs(dirs) do
		zrmine.f.LoadAllFiles(fdir .. dir .. "/")
	end
end

// Initializes the Script
function zrmine.f.Initialize()
	NicePrint(" ")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("////////////////// Zeros RetroMiner ///////////////")
	NicePrint("///////////////////////////////////////////////////")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	zrmine.f.PreLoadFile("","zrmine_config.lua",true)
	zrmine.f.LoadAllFiles("zrms_languages/")


	zrmine.f.LoadAllFiles("zrms/sh/")
	if SERVER then
		zrmine.f.LoadAllFiles("zrms/sv/")
	end
	zrmine.f.LoadAllFiles("zrms/cl/")

	NicePrint("///////////////////////////////////////////////////")
	NicePrint("///////////////////////////////////////////////////")
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

if SERVER then
	timer.Simple(0,function()
		zrmine.f.Initialize()
	end)
else

	// This needs to be called instantly on client since client settings wont work otherwhise
	zrmine.f.PreLoadFile("zrms/sh/","zrmine_materials.lua",false)
	zrmine.f.PreLoadFile("zrms/cl/","zrmine_fonts.lua",false)
	zrmine.f.PreLoadFile("zrms/cl/","zrmine_settings_menu.lua",false)

	timer.Simple(0,function()
		zrmine.f.Initialize()
	end)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_yeastbeast_1.1.7/lua/zerosyeastbeast/cl/zyb_fonts_cl.lua:
return gluapack()()
--addons/[binbon]misc/lua/autorun/client/!clbinbonmisc.lua:
return gluapack()()
--addons/cityworker/lua/autorun/client/cityworker_client.lua:
return gluapack()()
--addons/bb__polisdestek/lua/autorun/client/cl_officerdown.lua:
return gluapack()()
--addons/permaprops/lua/permaprops/cl_menu.lua:
return gluapack()()
--addons/partysystem/lua/autorun/client/partyfonts.lua:
surface.CreateFont("roboto16",{
	size = 16,
	font = "Roboto",
})
--lua/vgui/bvgui/categories.lua:
return gluapack()()
--lua/vgui/bvgui/grid.lua:
local PANEL = {}

bVGUI.GRID_ALIGN_LEFT   = 0
bVGUI.GRID_ALIGN_CENTER = 1
bVGUI.GRID_ALIGN_RIGHT  = 2

function PANEL:Init()
	self.Items = {}
	self.ColumnPadding = 0
	self.RowPadding = 0
	self.Alignment = bVGUI.GRID_ALIGN_CENTER

	function self.pnlCanvas:PerformLayout()
		self:GetParent():LayoutItems()
	end

	self.BottomPadding = vgui.Create("bVGUI.BlankPanel", self)
	self.BottomPadding:Dock(BOTTOM)
	self.BottomPadding:SetTall(1)
end

function PANEL:SetAlignment(alignment)
	self.Alignment = alignment
end

function PANEL:SetPadding(c,r)
	self:SetColumnPadding(c)
	self:SetRowPadding(r)
end

function PANEL:SetColumnPadding(padding)
	self.ColumnPadding = padding
end

function PANEL:SetRowPadding(padding)
	self.RowPadding = padding
end

function PANEL:AddToGrid(item)
	table.insert(self.Items, item)
end

function PANEL:LayoutItems()
	self:CalculateGridSize()

	local columns = math.floor(self:GetWide() / self.MinColumnSize)
	local column_w = self:GetWide() / columns
	local column_i = 0
	local column_x = 0
	local row_y = 0
	for _,child in ipairs(self.Items) do
		if (self.Alignment == bVGUI.GRID_ALIGN_CENTER) then
			child:SetPos(column_x + (column_w / 2 - child:GetWide() / 2), row_y + (self.MinRowSize / 2 - child:GetTall() / 2))
		elseif (self.Alignment == bVGUI.GRID_ALIGN_LEFT) then
			child:SetPos(column_x, row_y + (self.MinRowSize / 2 - child:GetTall() / 2))
		elseif (self.Alignment == bVGUI.GRID_ALIGN_RIGHT) then
			child:SetPos(column_x + (column_w - child:GetWide()), row_y + (self.MinRowSize / 2 - child:GetTall() / 2))
		end
		column_x = column_x + column_w

		column_i = column_i + 1
		if (column_i >= columns) then
			column_i = 0
			column_x = 0
			row_y = row_y + self.MinRowSize + self.RowPadding
		end
	end

	self.BottomPadding:SetPos(0, row_y - 1)

	self:InvalidateLayout(true)
end

function PANEL:CalculateGridSize()
	local biggest_column = 0
	local biggest_row = 0
	for _,child in ipairs(self.Items) do
		if (child:GetWide() > biggest_column) then
			biggest_column = child:GetWide()
		end
		if (child:GetTall() > biggest_row) then
			biggest_row = child:GetTall()
		end
	end
	self.MinRowSize = biggest_row + (self.RowPadding * 2)
	self.MinColumnSize = biggest_column + (self.ColumnPadding * 2)
end

derma.DefineControl("bVGUI.Grid", nil, PANEL, "bVGUI.ScrollPanel")
--lua/vgui/gas_workshop_item.lua:
local function L(phrase, ...)
	if (#({...}) == 0) then
		return GAS:Phrase(phrase, "workshop")
	else
		return GAS:PhraseFormat(phrase, "workshop", ...)
	end
end

file.CreateDir("gmodadminsuite/workshop")

local PANEL = {}

function PANEL:Init()
	self:SetMouseInputEnabled(true)
	self:SetCursor("hand")
	self:Dock(TOP)
	self:SetTall(105)
	self:SetLoading(true)

	self.ItemImage = vgui.Create("bVGUI.LoadingPanel", self)
	self.ItemImage:Dock(LEFT)
	self.ItemImage:SetMouseInputEnabled(false)
	self.ItemImage:DockPadding(10,10,10,10)
	self.ItemImage:SetLoading(false)
	self.ItemImage:SetWide(105)

		self.ItemImage.ImagePnl = vgui.Create("DImage", self.ItemImage)
		self.ItemImage.ImagePnl:Dock(FILL)

	self.Content = vgui.Create("bVGUI.BlankPanel", self)
	self.Content:Dock(FILL)
	self.Content:SetMouseInputEnabled(false)
	self.Content:DockPadding(0,10,10,10)

		self.Content.ItemName = vgui.Create("DLabel", self.Content)
		self.Content.ItemName:Dock(TOP)
		self.Content.ItemName:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "BOLD", 16))
		self.Content.ItemName:SetTextColor(bVGUI.COLOR_WHITE)
		self.Content.ItemName:SetContentAlignment(4)
		self.Content.ItemName:SetText("")

		self.Content.Description = vgui.Create("DLabel", self.Content)
		self.Content.Description:Dock(FILL)
		self.Content.Description:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "REGULAR", 14))
		self.Content.Description:SetTextColor(bVGUI.COLOR_WHITE)
		self.Content.Description:SetContentAlignment(7)
		self.Content.Description:SetText("")
		self.Content.Description:SetWrap(true)
end

function PANEL:OnMouseReleased(m)
	if (m ~= MOUSE_LEFT) then return end
	local menu = DermaMenu()

	menu:AddOption(L"copy_item_id", function()
		GAS:SetClipboardText(self.ItemInfo.publishedfileid)
	end):SetIcon("icon16/page_copy.png")

	local open_workshop_page, _ = menu:AddSubMenu(L"open_workshop_page") _:SetIcon("materials/gmodadminsuite/steam.png")

		open_workshop_page:AddOption(L"steam_browser", function()
			GAS:OpenURL("https://steamcommunity.com/sharedfiles/filedetails/?id=" .. self.ItemInfo.publishedfileid)
		end):SetIcon("materials/gmodadminsuite/steam.png")

		open_workshop_page:AddOption(L"copy_link", function()
			GAS:SetClipboardText("https://steamcommunity.com/sharedfiles/filedetails/?id=" .. self.ItemInfo.publishedfileid)
		end):SetIcon("icon16/page_copy.png")

	menu:AddOption(L"open_creator_profile", function()
		GAS:OpenURL("https://steamcommunity.com/profiles/" .. self.ItemInfo.creator)
	end):SetIcon("icon16/user_gray.png")

	menu:Open()
end

function PANEL:SetItemInfo(item_info)
	self.ItemInfo = item_info
	self.ItemID = tonumber(item_info.publishedfileid)

	self.Content.ItemName:SetText(item_info.title or L"error")
	self.Content.ItemName:SizeToContentsY()

	self.Content.Description:SetText(item_info.description or L"error")

	if (file.Read("gmodadminsuite/workshop/" .. item_info.publishedfileid .. ".png", "DATA")) then
		self.ItemImage:SetLoading(false)
		self.ItemImage.ImagePnl:SetImage("data/gmodadminsuite/workshop/" .. item_info.publishedfileid .. ".png")
	else
		self.ItemImage:SetLoading(true)
		http.Fetch(item_info.preview_url, function(body, len, headers, code)
			self.ItemImage:SetLoading(false)
			if (len > 0 and code == 200) then
				file.Write("gmodadminsuite/workshop/" .. item_info.publishedfileid .. ".png", body)
				self.ItemImage.ImagePnl:SetImage("data/gmodadminsuite/workshop/" .. item_info.publishedfileid .. ".png")
			else
				self.ItemImage.ImagePnl:SetImage("missing")
			end
		end)
	end
end

function PANEL:Paint(w,h)
	surface.SetDrawColor(40,64,87)
	surface.DrawRect(0,0,w,h)

	surface.SetMaterial(bVGUI.MATERIAL_GRADIENT_LIGHT)
	surface.DrawTexturedRect(0,0,w,h)
end

derma.DefineControl("GAS.Workshop.Item", nil, PANEL, "bVGUI.LoadingPanel")
--lua/vgui/openpermissions_addon.lua:
local function markup_Escape(str)
	return (tostring(str):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;"))
end

local PANEL = {}

function PANEL:Init()
	self:SetText("")
end

function PANEL:GenerateMarkup(text, maxwidth)
	self.Addon.Markup = markup.Parse("<color=255,255,255>" .. markup_Escape(text) .. "</color>", maxwidth)
end

function PANEL:Setup(id, options)
	self.Addon = {}

	self.Addon.Name = options.Name or id
	self.Addon.Color = options.Color or OpenPermissions.COLOR_BLACK

	if (options.Logo and options.Logo.Path and options.Logo.Width and options.Logo.Height) then
		self.Addon.Logo = {
			Material = Material(options.Logo.Path),
			Width = options.Logo.Width / 2,
			Height = options.Logo.Height / 2
		}
	end
end

function PANEL:Paint(w,h)
	derma.SkinHook("Paint", "Button", self, w, h)

	if (not self.Addon) then return end

	surface.SetDrawColor(self.Addon.Color)
	surface.DrawRect(5, 5, w - 10, h - 10)

	if (self.Addon.Logo) then
		local x,y = w / 2 - self.Addon.Logo.Width / 2, h / 2 - self.Addon.Logo.Height / 2
		surface.SetDrawColor(255,255,255)
		surface.SetMaterial(self.Addon.Logo.Material)
		surface.DrawTexturedRect(x, y, self.Addon.Logo.Width, self.Addon.Logo.Height)
	elseif (self.Addon.Markup) then
		self.Addon.Markup:Draw(w / 2, h / 2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	else
		self:GenerateMarkup(self.Addon.Name, w - 20)
	end
end

derma.DefineControl("OpenPermissions.Addon", nil, PANEL, "DButton")
--lua/vgui/openpermissions_checkbox.lua:
local PANEL = {}

function PANEL:Init()
	self:SetMouseInputEnabled(true)
	self:SetCursor("hand")
	self:SetSize(16,16)

	self.Crossable = false
	self.Checked = false
end

function PANEL:SetCrossable(crossable)
	self.Crossable = crossable == true
	if (crossable) then
		self.Checked = 0
	else
		self.Checked = false
	end
end
function PANEL:IsCrossable()
	return self.Crossable
end

function PANEL:DoClick()
	self:SetAmbigious(false)
	if (self.Crossable) then
		self.Checked = self.Checked + 1
		if (self.Checked == 3) then
			self.Checked = 0
		end
	else
		self.Checked = not self.Checked
	end
	if (self.OnChange) then
		self:OnChange()
	end
end
function PANEL:DoRightClick()
	if (self.Crossable) then
		self:SetAmbigious(false)
		self.Checked = self.Checked - 1
		if (self.Checked == -1) then
			self.Checked = 2
		end
		if (self.OnChange) then
			self:OnChange()
		end
	end
end

function PANEL:OnMousePressed(m)
	if (m == MOUSE_LEFT) then
		self.Debounce_LEFT = true
	elseif (m == MOUSE_RIGHT) then
		self.Debounce_RIGHT = true
	end
end
function PANEL:OnMouseReleased(m)
	if (m == MOUSE_LEFT) then
		if (self.Debounce_LEFT) then
			self:DoClick()
		end
		self.Debounce_LEFT = nil
	elseif (m == MOUSE_RIGHT) then
		if (self.Debounce_RIGHT) then
			self:DoRightClick()
		end
		self.Debounce_RIGHT = nil
	end
end

function PANEL:GetChecked()
	return self.Checked
end
function PANEL:SetChecked(checked)
	self:SetAmbigious(false)
	self.Checked = checked
end

function PANEL:SetAmbigious(ambigious)
	self.Ambigious = ambigious
end
function PANEL:IsAmbigious()
	return self.Ambigious
end

local mat_checked = Material("openpermissions/checked.vtf")
local mat_crossed = Material("openpermissions/crossed.vtf")
local darker_soft_green = Color(52,145,52)
function PANEL:Paint(w,h)
	surface.SetDrawColor(OpenPermissions.COLOR_WHITE)
	surface.DrawRect(0,0,w,h)

	if (self.Crossable and self.Ambigious) then
		surface.SetDrawColor(OpenPermissions.COLOR_BLACK)
	elseif (self.Checked == true or self.Checked == 1) then
		surface.SetDrawColor(darker_soft_green)
	elseif (self.Checked == 2) then
		surface.SetDrawColor(OpenPermissions.COLOR_SOFT_RED)
	else
		surface.SetDrawColor(OpenPermissions.COLOR_BLACK)
	end
	surface.DrawOutlinedRect(0,0,w,h)

	if (self.Crossable and self.Ambigious) then
		surface.SetDrawColor(OpenPermissions.COLOR_SOFT_GREEN)
		surface.DrawRect(3,3,w - 6, h - 6)
	elseif (self.Checked == true or self.Checked == 1) then
		surface.SetDrawColor(255,255,255,255)
		surface.SetMaterial(mat_checked)
		surface.DrawTexturedRect(0,0,w,h)
	elseif (self.Checked == 2) then
		surface.SetDrawColor(255,255,255,255)
		surface.SetMaterial(mat_crossed)
		surface.DrawTexturedRect(0,0,w,h)
	end
end

derma.DefineControl("OpenPermissions.Checkbox", nil, PANEL, "DPanel")
--lua/vgui/openpermissions_horizontaldivider.lua:
return gluapack()()
--lua/vgui/openpermissions_tooltip.lua:
local bg_color = Color(43,48,58,255)

local PANEL = {}

function PANEL:Init()
	self:SetDrawOnTop(true)

	self.Label = vgui.Create("DLabel", self)
	self.Label:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self.Label:SetText("Tooltip")
	self.Label:SetTextColor(bVGUI.COLOR_WHITE)
	self.Label:SetContentAlignment(5)
	self.Label:SetWrap(true)

	self.Arrow = {
		{x = 0, y = 0},
		{x = 0, y = 0},
		{x = 0, y = 0}
	}
end

function PANEL:Paint(w,h)
	draw.RoundedBox(4, 0, 0, w, h, self.BackgroundColor or bg_color)
	surface.DisableClipping(true)

	surface.SetDrawColor(self.BackgroundColor or bg_color)
	draw.NoTexture()

	self.Arrow[1].x = w / 2 - 7
	self.Arrow[1].y = h

	self.Arrow[2].x = w / 2 + 7
	self.Arrow[2].y = h

	self.Arrow[3].x = w / 2
	self.Arrow[3].y = h + 7

	surface.DrawPoly(self.Arrow)

	surface.DisableClipping(false)
end

function PANEL:Think()
	local x,y = self.Label:GetSize()
	self:SetSize(x + 15, y + 7)
	self.Label:Center()
	local x,y = gui.MousePos()
	self:SetPos(x - self:GetWide() / 2, y - self:GetTall() - 14 - 5)

	if (not system.HasFocus()) then
		self:Remove()
	elseif (self.VGUI_Element) then
		if (not IsValid(self.VGUI_Element)) then
			self:Remove()
		elseif (vgui.GetHoveredPanel() ~= self.VGUI_Element) then
			if (self.HoverFrameNumber) then
				if (FrameNumber() > self.HoverFrameNumber) then
					self:Remove()
				end
			else
				self.HoverFrameNumber = FrameNumber() + 1
			end
		end
	end
end

function PANEL:SetText(text)
	self.Label:SetText(text)
	self.Label:SetWrap(false)
	self.Label:SizeToContentsX()
	if (self.Label:GetWide() >= 200) then
		self.Label:SetWide(200)
		self.Label:SetWrap(true)
		self.Label:SetAutoStretchVertical(true)
	end
end

derma.DefineControl("OpenPermissions.Tooltip", nil, PANEL, "DPanel")
--lua/vgui/stackerpreseteditor.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/config/config.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/doorsystem/sh_interface.lua:
DarkRP.ENTITY.getDoorData = DarkRP.stub{
    name = "getDoorData",
    description = "Internal function to get the door/vehicle data.",
    parameters = {
    },
    returns = {
        {
            name = "doordata",
            description = "All the DarkRP information on a door or vehicle.",
            type = "table"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.isKeysOwnable = DarkRP.stub{
    name = "isKeysOwnable",
    description = "Whether this door can be bought.",
    parameters = {
    },
    returns = {
        {
            name = "answer",
            description = "Whether the door can be bought.",
            type = "boolean"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.isDoor = DarkRP.stub{
    name = "isDoor",
    description = "Whether this entity is considered a door in DarkRP.",
    parameters = {
    },
    returns = {
        {
            name = "answer",
            description = "Whether it's a door.",
            type = "boolean"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.isKeysOwned = DarkRP.stub{
    name = "isKeysOwned",
    description = "Whether this door is owned by someone.",
    parameters = {
    },
    returns = {
        {
            name = "answer",
            description = "Whether it's owned.",
            type = "boolean"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.getDoorOwner = DarkRP.stub{
    name = "getDoorOwner",
    description = "Get the owner of a door.",
    parameters = {
    },
    returns = {
        {
            name = "owner",
            description = "The owner of the door.",
            type = "Player"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.isMasterOwner = DarkRP.stub{
    name = "isMasterOwner",
    description = "Whether the player is the main owner of the door (as opposed to a co-owner).",
    parameters = {
        {
            name = "ply",
            description = "The player to query.",
            type = "Player",
            optional = false
        }
    },
    returns = {
        {
            name = "answer",
            description = "Whether this player is the master owner.",
            type = "boolean"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.isKeysOwnedBy = DarkRP.stub{
    name = "isKeysOwnedBy",
    description = "Whether this door is owned or co-owned by this player",
    parameters = {
        {
            name = "ply",
            description = "The player to query.",
            type = "Player",
            optional = false
        }
    },
    returns = {
        {
            name = "answer",
            description = "Whether this door is (co-)owned by the player.",
            type = "boolean"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.isKeysAllowedToOwn = DarkRP.stub{
    name = "isKeysAllowedToOwn",
    description = "Whether this player is allowed to co-own a door, as decided by the master door owner.",
    parameters = {
        {
            name = "ply",
            description = "The player to query.",
            type = "Player",
            optional = false
        }
    },
    returns = {
        {
            name = "answer",
            description = "Whether this door is (co-)ownable by the player.",
            type = "boolean"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.getKeysNonOwnable = DarkRP.stub{
    name = "getKeysNonOwnable",
    description = "Whether ownability of this door/vehicle is disabled.",
    parameters = {
    },
    returns = {
        {
            name = "title",
            description = "The ownability status.",
            type = "boolean"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.getKeysTitle = DarkRP.stub{
    name = "getKeysTitle",
    description = "Get the title of this door or vehicle.",
    parameters = {
    },
    returns = {
        {
            name = "title",
            description = "The title of the door or vehicle.",
            type = "string"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.getKeysDoorGroup = DarkRP.stub{
    name = "getKeysDoorGroup",
    description = "The door group of a door if it exists.",
    parameters = {
    },
    returns = {
        {
            name = "group",
            description = "The door group.",
            type = "string"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.getKeysDoorTeams = DarkRP.stub{
    name = "getKeysDoorTeams",
    description = "The teams that are allowed to open this door.",
    parameters = {
    },
    returns = {
        {
            name = "teams",
            description = "The door teams.",
            type = "table"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.getKeysAllowedToOwn = DarkRP.stub{
    name = "getKeysAllowedToOwn",
    description = "The list of people of which the master door owner has added as allowed to own.",
    parameters = {
    },
    returns = {
        {
            name = "players",
            description = "The list of people allowed to own.",
            type = "table"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.ENTITY.getKeysCoOwners = DarkRP.stub{
    name = "getKeysCoOwners",
    description = "The list of people who co-own the door.",
    parameters = {
    },
    returns = {
        {
            name = "players",
            description = "The list of people allowed to own. The keys of this table are UserIDs, the values are booleans.",
            type = "table"
        }
    },
    metatable = DarkRP.ENTITY
}

DarkRP.PLAYER.canKeysLock = DarkRP.stub{
    name = "canKeysLock",
    description = "Whether the player can lock a given door.",
    parameters = {
        {
            name = "door",
            description = "The door",
            optional = false,
            type = "Entity"
        }
    },
    returns = {
        {
            name = "allowed",
            description = "Whether the player is allowed to lock the door.",
            type = "boolean"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.PLAYER.canKeysUnlock = DarkRP.stub{
    name = "canKeysUnlock",
    description = "Whether the player can unlock a given door.",
    parameters = {
        {
            name = "door",
            description = "The door",
            optional = false,
            type = "Entity"
        }
    },
    returns = {
        {
            name = "allowed",
            description = "Whether the player is allowed to unlock the door.",
            type = "boolean"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.registerDoorVar = DarkRP.stub{
    name = "registerDoorVar",
    description = "Register a door variable by name. You should definitely register door variables. Registering DarkRPVars will make networking much more efficient.",
    parameters = {
        {
            name = "name",
            description = "The name of the door var.",
            type = "string",
            optional = false
        },
        {
            name = "writeFn",
            description = "The function that writes a value for this door var. Examples: net.WriteString, function(val) net.WriteUInt(val, 8) end.",
            type = "function",
            optional = false
        },
        {
            name = "readFn",
            description = "The function that reads and returns a value for this door var. Examples: net.ReadString, function() return net.ReadUInt(8) end.",
            type = "function",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.getDoorVars = DarkRP.stub{
    name = "getDoorVars",
    description = "Internal function, retrieves all the registered door variables.",
    parameters = {

    },
    returns = {
        {
            name = "doorvars",
            description = "The door variables, indexed by number",
            type = "table"
        }
    },
    metatable = DarkRP
}

DarkRP.getDoorVarsByName = DarkRP.stub{
    name = "getDoorVarsByName",
    description = "Internal function, retrieves all the registered door variables, indeded by their names.",
    parameters = {

    },
    returns = {
        {
            name = "doorvars",
            description = "The door variables, indexed by name",
            type = "table"
        }
    },
    metatable = DarkRP
}

DarkRP.hookStub{
    name = "canKeysLock",
    description = "Whether the player can lock a given door. This hook is run when ply:canKeysLock is called.",
    parameters = {
        {
            name = "ply",
            description = "The player",
            type = "Player"
        },
        {
            name = "door",
            description = "The door",
            type = "Entity"
        }
    },
    returns = {
        {
            name = "allowed",
            description = "Whether the player is allowed to lock the door.",
            type = "boolean"
        }
    }
}

DarkRP.hookStub{
    name = "canKeysUnlock",
    description = "Whether the player can unlock a given door. This hook is run when ply:canKeysUnlock is called.",
    parameters = {
        {
            name = "ply",
            description = "The player",
            type = "Player"
        },
        {
            name = "door",
            description = "The door",
            type = "Entity"
        }
    },
    returns = {
        {
            name = "allowed",
            description = "Whether the player is allowed to unlock the door.",
            type = "boolean"
        }
    }
}

--gamemodes/darkrp/gamemode/modules/base/sh_interface.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/voting/cl_voting.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/police/sh_init.lua:
local plyMeta = FindMetaTable("Player")

--[[---------------------------------------------------------------------------
Interface functions
---------------------------------------------------------------------------]]
function plyMeta:isArrested()
    return self:getDarkRPVar("Arrested")
end

function plyMeta:isWanted()
    return self:getDarkRPVar("wanted")
end

function plyMeta:getWantedReason()
    return self:getDarkRPVar("wantedReason")
end

function plyMeta:isCP()
    return GAMEMODE.CivilProtection and GAMEMODE.CivilProtection[self:Team()] or false
end

plyMeta.isMayor = fn.Compose{fn.Curry(fn.GetValue, 2)("mayor"), plyMeta.getJobTable}
plyMeta.isChief = fn.Compose{fn.Curry(fn.GetValue, 2)("chief"), plyMeta.getJobTable}


--[[---------------------------------------------------------------------------
Hooks
---------------------------------------------------------------------------]]

function DarkRP.hooks:canRequestWarrant(target, actor, reason)
    if not IsValid(target) then return false, DarkRP.getPhrase("suspect_doesnt_exist") end
    if not reason or string.len(reason) == 0 then return false, DarkRP.getPhrase("vote_specify_reason") end
    if string.len(reason) > 200 then return false, DarkRP.getPhrase("too_long") end
    if not IsValid(actor) then return false, DarkRP.getPhrase("actor_doesnt_exist") end
    if not actor:Alive() then return false, DarkRP.getPhrase("must_be_alive_to_do_x", DarkRP.getPhrase("get_a_warrant")) end
    if target.warranted then return false, DarkRP.getPhrase("already_a_warrant") end
    if not actor:isCP() then return false, DarkRP.getPhrase("incorrect_job", DarkRP.getPhrase("get_a_warrant")) end

    return true
end

function DarkRP.hooks:canRemoveWarrant(target, actor)
    if not IsValid(target) then return false, DarkRP.getPhrase("suspect_doesnt_exist") end
    if not IsValid(actor) then return false, DarkRP.getPhrase("actor_doesnt_exist") end
    if not actor:Alive() then return false, DarkRP.getPhrase("must_be_alive_to_do_x", DarkRP.getPhrase("remove_a_warrant")) end
    if not target.warranted then return false, DarkRP.getPhrase("not_warranted") end
    if not actor:isCP() then return false, DarkRP.getPhrase("incorrect_job", DarkRP.getPhrase("remove_a_warrant")) end
    if actor:isArrested() then return false, DarkRP.getPhrase("unable", DarkRP.getPhrase("remove_a_warrant"), "") end

    return true
end

function DarkRP.hooks:canWanted(target, actor, reason)
    if not IsValid(target) then return false, DarkRP.getPhrase("suspect_doesnt_exist") end
    if not reason or string.len(reason) == 0 then return false, DarkRP.getPhrase("vote_specify_reason") end
    if string.len(reason) > 200 then return false, DarkRP.getPhrase("too_long") end
    if not IsValid(actor) then return false, DarkRP.getPhrase("actor_doesnt_exist") end
    if not actor:Alive() then return false, DarkRP.getPhrase("must_be_alive_to_do_x", DarkRP.getPhrase("make_someone_wanted")) end
    if not actor:isCP() then return false, DarkRP.getPhrase("incorrect_job", DarkRP.getPhrase("make_someone_wanted")) end
    if target:isWanted() then return false, DarkRP.getPhrase("already_wanted") end
    if not target:Alive() then return false, DarkRP.getPhrase("suspect_must_be_alive_to_do_x", DarkRP.getPhrase("make_someone_wanted")) end
    if target:isArrested() then return false, DarkRP.getPhrase("suspect_already_arrested") end

    return true
end

function DarkRP.hooks:canUnwant(target, actor)
    if not IsValid(target) then return false, DarkRP.getPhrase("suspect_doesnt_exist") end
    if not IsValid(actor) then return false, DarkRP.getPhrase("actor_doesnt_exist") end
    if not actor:Alive() then return false, DarkRP.getPhrase("must_be_alive_to_do_x", DarkRP.getPhrase("remove_wanted_status")) end
    if not actor:isCP() then return false, DarkRP.getPhrase("incorrect_job", DarkRP.getPhrase("remove_wanted_status")) end
    if not target:isWanted() then return false, DarkRP.getPhrase("not_wanted") end
    if not target:Alive() then return false, DarkRP.getPhrase("suspect_must_be_alive_to_do_x", DarkRP.getPhrase("remove_wanted_status")) end

    return true
end

--[[---------------------------------------------------------------------------
Chat commands
---------------------------------------------------------------------------]]
for _, cmd in pairs{"cr", "911", "999", "112", "000"} do
    DarkRP.declareChatCommand{
        command = cmd,
        description = "Cry for help, the police will come (hopefully)!",
        delay = 1.5
    }
end

DarkRP.declareChatCommand{
    command = "warrant",
    description = "Get a search warrant for a certain player. With this warrant you can search their house.",
    delay = 1.5,
    condition = fn.FAnd{plyMeta.Alive, plyMeta.isCP, fn.Compose{fn.Not, plyMeta.isArrested}},
    tableArgs = true
}

DarkRP.declareChatCommand{
    command = "unwarrant",
    description = "Remove a search warrant for a certain player. With a warrant you can search their house.",
    delay = 1.5,
    condition = fn.FAnd{plyMeta.Alive, plyMeta.isCP, fn.Compose{fn.Not, plyMeta.isArrested}},
    tableArgs = true
}

DarkRP.declareChatCommand{
    command = "wanted",
    description = "Make a player wanted. This is needed to get them arrested.",
    delay = 1.5,
    condition = fn.FAnd{plyMeta.Alive, plyMeta.isCP, fn.Compose{fn.Not, plyMeta.isArrested}},
    tableArgs = true
}

DarkRP.declareChatCommand{
    command = "unwanted",
    description = "Remove a player's wanted status.",
    delay = 1.5,
    condition = fn.FAnd{plyMeta.Alive, plyMeta.isCP, fn.Compose{fn.Not, plyMeta.isArrested}}
}

DarkRP.declareChatCommand{
    command = "agenda",
    description = "Set the agenda.",
    delay = 1.5,
    condition = fn.Compose{fn.Not, fn.Curry(fn.Eq, 2)(nil), plyMeta.getAgenda}
}

DarkRP.declareChatCommand{
    command = "addagenda",
    description = "Add a line of text to the agenda.",
    delay = 1.5,
    condition = fn.Compose{fn.Not, fn.Curry(fn.Eq, 2)(nil), plyMeta.getAgenda}
}

DarkRP.declareChatCommand{
    command = "lottery",
    description = "Start a lottery.",
    delay = 1.5,
    condition = plyMeta.isMayor
}

DarkRP.declareChatCommand{
    command = "lockdown",
    description = "Start a lockdown. Everyone will have to stay inside.",
    delay = 1.5,
    condition = plyMeta.isMayor
}

DarkRP.declareChatCommand{
    command = "unlockdown",
    description = "Stop a lockdown.",
    delay = 1.5,
    condition = plyMeta.isMayor
}

DarkRP.declareChatCommand{
    command = "arrest",
    description = "Forcefully arrest a player.",
    delay = 0.5,
    tableArgs = true
}

DarkRP.declareChatCommand{
    command = "unarrest",
    description = "Forcefully unarrest a player.",
    delay = 0.5,
    tableArgs = true
}

local noMayorExists = fn.Compose{fn.Null, fn.Curry(fn.Filter, 2)(plyMeta.isMayor), player.GetAll}
local noChiefExists = fn.Compose{fn.Null, fn.Curry(fn.Filter, 2)(plyMeta.isChief), player.GetAll}

DarkRP.declareChatCommand{
    command = "requestlicense",
    description = "Request a gun license.",
    delay = 1.5,
    condition = fn.FAnd {
        fn.FOr {
            fn.Curry(fn.Not, 2)(noMayorExists),
            fn.Curry(fn.Not, 2)(noChiefExists),
            fn.Compose{fn.Not, fn.Null, fn.Curry(fn.Filter, 2)(plyMeta.isCP), player.GetAll}
        },
        fn.Compose{fn.Not, fn.Curry(fn.Flip(plyMeta.getDarkRPVar), 2)("HasGunlicense")},
        fn.Compose{fn.Not, fn.Curry(fn.GetValue, 2)("LicenseRequested")}
    }
}

DarkRP.declareChatCommand{
    command = "givelicense",
    description = "Give someone a gun license",
    delay = 1.5,
    condition = fn.FOr{
        plyMeta.isMayor, -- Mayors can hand out licenses
        fn.FAnd{plyMeta.isChief, noMayorExists}, -- Chiefs can if there is no mayor
        fn.FAnd{plyMeta.isCP, noChiefExists, noMayorExists} -- CP's can if there are no chiefs nor mayors
    }
}

DarkRP.declareChatCommand{
    command = "demotelicense",
    description = "Start a vote to get someone's license revoked.",
    delay = 1.5,
    tableArgs = true
}

DarkRP.declareChatCommand{
    command = "setlicense",
    description = "Forcefully give a player a license.",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "unsetlicense",
    description = "Forcefully revoke a player's license.",
    delay = 1.5
}

--gamemodes/darkrp/gamemode/modules/money/sh_money.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/cppi/sh_cppi.lua:
if CPPI then return end
CPPI = {}
CPPI.CPPI_DEFER = 100100 --\100\100 = dd
CPPI.CPPI_NOTIMPLEMENTED = 7080

function CPPI:GetName()
    return "DarkRP"
end

function CPPI:GetVersion()
    return CPPI.CPPI_NOTIMPLEMENTED
end

function CPPI:GetInterfaceVersion()
    return CPPI.CPPI_NOTIMPLEMENTED
end

function CPPI:GetNameFromUID(uid)
    return CPPI.CPPI_NOTIMPLEMENTED
end

local PLAYER = FindMetaTable("Player")
function PLAYER:CPPIGetFriends()
    return CPPI.CPPI_NOTIMPLEMENTED
end

local ENTITY = FindMetaTable("Entity")
function ENTITY:CPPIGetOwner()
    return NULL, CPPI.CPPI_NOTIMPLEMENTED
end

if SERVER then
    function ENTITY:CPPISetOwner(ply)
        return CPPI.CPPI_NOTIMPLEMENTED
    end

    function ENTITY:CPPISetOwnerUID(UID)
        return CPPI.CPPI_NOTIMPLEMENTED
    end

    function ENTITY:CPPICanTool(ply, tool)
        return CPPI.CPPI_NOTIMPLEMENTED
    end

    function ENTITY:CPPICanPhysgun(ply)
        return CPPI.CPPI_NOTIMPLEMENTED
    end

    function ENTITY:CPPICanPickup(ply)
        return CPPI.CPPI_NOTIMPLEMENTED
    end

    function ENTITY:CPPICanPunt(ply)
        return CPPI.CPPI_NOTIMPLEMENTED
    end
end

--gamemodes/darkrp/gamemode/modules/base/sh_gamemode_functions.lua:
function GM:SetupMove(ply, mv, cmd)
    if ply:isArrested() then
        mv:SetMaxClientSpeed(self.Config.arrestspeed)
    end
    return self.Sandbox.SetupMove(self, ply, mv, cmd)
end

function GM:StartCommand(ply, usrcmd)
    -- Used in arrest_stick and unarrest_stick but addons can use it too!
    local wep = ply:GetActiveWeapon()
    if wep:IsValid() and isfunction(wep.startDarkRPCommand) then
        wep:startDarkRPCommand(usrcmd)
    end
end

function GM:OnPlayerChangedTeam(ply, oldTeam, newTeam)
    if RPExtraTeams[oldTeam] and RPExtraTeams[oldTeam].OnPlayerLeftTeam then
        RPExtraTeams[oldTeam].OnPlayerLeftTeam(ply, newTeam)
    end

    if RPExtraTeams[newTeam] and RPExtraTeams[newTeam].OnPlayerChangedTeam then
        RPExtraTeams[newTeam].OnPlayerChangedTeam(ply, oldTeam, newTeam)
    end

    if CLIENT then return end

    local agenda = ply:getAgendaTable()

    -- Remove agenda text when last manager left
    if agenda and agenda.ManagersByKey[oldTeam] then
        local found = false
        for man, _ in pairs(agenda.ManagersByKey) do
            if team.NumPlayers(man) > 0 then found = true break end
        end
        if not found then agenda.text = nil end
    end

    ply:setSelfDarkRPVar("agenda", agenda and agenda.text or nil)
end

hook.Add("loadCustomDarkRPItems", "CAMI privs", function()
    CAMI.RegisterPrivilege{
        Name = "DarkRP_SeeEvents",
        MinAccess = "admin"
    }

    CAMI.RegisterPrivilege{
        Name = "DarkRP_GetAdminWeapons",
        MinAccess = "admin"
    }

    CAMI.RegisterPrivilege{
        Name = "DarkRP_SetDoorOwner",
        MinAccess = "admin"
    }

    CAMI.RegisterPrivilege{
        Name = "DarkRP_ChangeDoorSettings",
        MinAccess = "superadmin"
    }

    CAMI.RegisterPrivilege{
        Name = "DarkRP_AdminCommands",
        MinAccess = "admin"
    }

    CAMI.RegisterPrivilege{
        Name = "DarkRP_SetMoney",
        MinAccess = "superadmin"
    }

    CAMI.RegisterPrivilege{
        Name = "DarkRP_SetLicense",
        MinAccess = "superadmin"
    }

    for _, v in pairs(RPExtraTeams) do
        if not v.vote or v.admin and v.admin > 1 then continue end

        local toAdmin = {[0] = "admin", [1] = "superadmin"}
        CAMI.RegisterPrivilege{
            Name = "DarkRP_GetJob_" .. v.command,
            MinAccess = toAdmin[v.admin or 0]-- Add privileges for the teams that are voted for
        }
    end
end)

--gamemodes/darkrp/gamemode/modules/base/cl_util.lua:
local plyMeta = FindMetaTable("Player")

--[[---------------------------------------------------------------------------
Show a black screen
---------------------------------------------------------------------------]]
local function blackScreen(um)
    local toggle = um:ReadBool()
    if toggle then
        local black = color_black
        local w, h = ScrW(), ScrH()
        hook.Add("HUDPaintBackground", "BlackScreen", function()
            surface.SetDrawColor(black)
            surface.DrawRect(0, 0, w, h)
        end)
    else
        hook.Remove("HUDPaintBackground", "BlackScreen")
    end
end
usermessage.Hook("blackScreen", blackScreen)

local function charWrap(text, remainingWidth, maxWidth)
    local totalWidth = 0

    text = text:gsub(".", function(char)
        totalWidth = totalWidth + surface.GetTextSize(char)

        -- Wrap around when the max width is reached
        if totalWidth >= remainingWidth then
            -- totalWidth needs to include the character width because it's inserted in a new line
            totalWidth = surface.GetTextSize(char)
            remainingWidth = maxWidth
            return "\n" .. char
        end

        return char
    end)

    return text, totalWidth
end

function DarkRP.textWrap(text, font, maxWidth)
    local totalWidth = 0

    surface.SetFont(font)

    local spaceWidth = surface.GetTextSize(' ')
    text = text:gsub("(%s?[%S]+)", function(word)
            local char = string.sub(word, 1, 1)
            if char == "\n" or char == "\t" then
                totalWidth = 0
            end

            local wordlen = surface.GetTextSize(word)
            totalWidth = totalWidth + wordlen

            -- Wrap around when the max width is reached
            if wordlen >= maxWidth then -- Split the word if the word is too big
                local splitWord, splitPoint = charWrap(word, maxWidth - (totalWidth - wordlen), maxWidth)
                totalWidth = splitPoint
                return splitWord
            elseif totalWidth < maxWidth then
                return word
            end

            -- Split before the word
            if char == ' ' then
                totalWidth = wordlen - spaceWidth
                return '\n' .. string.sub(word, 2)
            end

            totalWidth = wordlen
            return '\n' .. word
        end)

    return text
end

function plyMeta:isInRoom()
    local tracedata = {}
    tracedata.start = LocalPlayer():GetShootPos()
    tracedata.endpos = self:GetShootPos()
    local trace = util.TraceLine(tracedata)

    return not trace.HitWorld
end

local keyNames
function input.KeyNameToNumber(str)
    if not keyNames then
        keyNames = {}
        for i = 1, 107, 1 do
            keyNames[input.GetKeyName(i)] = i
        end
    end

    return keyNames[str]
end

--gamemodes/darkrp/gamemode/modules/animations/sh_animations.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/config/jobrelated.lua:
-- People often copy jobs. When they do, the GM table does not exist anymore.
-- This line makes the job code work both inside and outside of gamemode files.
-- You should not copy this line into your code.
local GAMEMODE = GAMEMODE or GM
--[[--------------------------------------------------------
Default teams. Please do not edit this file. Please use the darkrpmod addon instead.
--------------------------------------------------------]]
TEAM_CITIZEN = DarkRP.createJob("Citizen", {
    color = Color(20, 150, 20, 255),
    model = {
        "models/player/Group01/Female_01.mdl",
        "models/player/Group01/Female_02.mdl",
        "models/player/Group01/Female_03.mdl",
        "models/player/Group01/Female_04.mdl",
        "models/player/Group01/Female_06.mdl",
        "models/player/group01/male_01.mdl",
        "models/player/Group01/Male_02.mdl",
        "models/player/Group01/male_03.mdl",
        "models/player/Group01/Male_04.mdl",
        "models/player/Group01/Male_05.mdl",
        "models/player/Group01/Male_06.mdl",
        "models/player/Group01/Male_07.mdl",
        "models/player/Group01/Male_08.mdl",
        "models/player/Group01/Male_09.mdl"
    },
    description = [[The Citizen is the most basic level of society you can hold besides being a hobo. You have no specific role in city life.]],
    weapons = {},
    command = "citizen",
    max = 0,
    salary = GAMEMODE.Config.normalsalary,
    admin = 0,
    vote = false,
    hasLicense = false,
    candemote = false,
    category = "Citizens",
})

TEAM_POLICE = DarkRP.createJob("Civil Protection", {
    color = Color(25, 25, 170, 255),
    model = {"models/player/police.mdl", "models/player/police_fem.mdl"},
    description = [[The protector of every citizen that lives in the city.
        You have the power to arrest criminals and protect innocents.
        Hit a player with your arrest baton to put them in jail.
        Bash a player with a stunstick and they may learn to obey the law.
        The Battering Ram can break down the door of a criminal, with a warrant for their arrest.
        The Battering Ram can also unfreeze frozen props (if enabled).
        Type /wanted <name> to alert the public to the presence of a criminal.]],
    weapons = {"arrest_stick", "unarrest_stick", "weapon_glock2", "stunstick", "door_ram", "weaponchecker"},
    command = "cp",
    max = 4,
    salary = GAMEMODE.Config.normalsalary * 1.45,
    admin = 0,
    vote = true,
    hasLicense = true,
    ammo = {
        ["pistol"] = 60,
    },
    category = "Civil Protection",
})

TEAM_GANG = DarkRP.createJob("Gangster", {
    color = Color(75, 75, 75, 255),
    model = {
        "models/player/Group03/Female_01.mdl",
        "models/player/Group03/Female_02.mdl",
        "models/player/Group03/Female_03.mdl",
        "models/player/Group03/Female_04.mdl",
        "models/player/Group03/Female_06.mdl",
        "models/player/group03/male_01.mdl",
        "models/player/Group03/Male_02.mdl",
        "models/player/Group03/male_03.mdl",
        "models/player/Group03/Male_04.mdl",
        "models/player/Group03/Male_05.mdl",
        "models/player/Group03/Male_06.mdl",
        "models/player/Group03/Male_07.mdl",
        "models/player/Group03/Male_08.mdl",
        "models/player/Group03/Male_09.mdl"},
    description = [[The lowest person of crime.
        A gangster generally works for the Mobboss who runs the crime family.
        The Mob boss sets your agenda and you follow it or you might be punished.]],
    weapons = {},
    command = "gangster",
    max = 3,
    salary = GAMEMODE.Config.normalsalary,
    admin = 0,
    vote = false,
    hasLicense = false,
    category = "Gangsters",
})

TEAM_MOB = DarkRP.createJob("Mob boss", {
    color = Color(25, 25, 25, 255),
    model = "models/player/gman_high.mdl",
    description = [[The Mob boss is the boss of the criminals in the city.
        With their power they coordinate the gangsters and form an efficient crime organization.
        They have the ability to break into houses by using a lockpick.
        The Mob boss posesses the ability to unarrest you.]],
    weapons = {"lockpick", "unarrest_stick"},
    command = "mobboss",
    max = 1,
    salary = GAMEMODE.Config.normalsalary * 1.34,
    admin = 0,
    vote = false,
    hasLicense = false,
    category = "Gangsters",
})

TEAM_GUN = DarkRP.createJob("Gun Dealer", {
    color = Color(255, 140, 0, 255),
    model = "models/player/monk.mdl",
    description = [[A Gun Dealer is the only person who can sell guns to other people.
        Make sure you aren't caught selling illegal firearms to the public! You might get arrested!]],
    weapons = {},
    command = "gundealer",
    max = 2,
    salary = GAMEMODE.Config.normalsalary,
    admin = 0,
    vote = false,
    hasLicense = false,
    category = "Citizens",
})

TEAM_MEDIC = DarkRP.createJob("Medic", {
    color = Color(47, 79, 79, 255),
    model = "models/player/kleiner.mdl",
    description = [[With your medical knowledge you work to restore players to full health.
        Without a medic, people cannot be healed.
        Left click with the Medical Kit to heal other players.
        Right click with the Medical Kit to heal yourself.]],
    weapons = {"med_kit"},
    command = "medic",
    max = 3,
    salary = GAMEMODE.Config.normalsalary,
    admin = 0,
    vote = false,
    hasLicense = false,
    medic = true,
    category = "Citizens",
})

TEAM_CHIEF = DarkRP.createJob("Civil Protection Chief", {
    color = Color(20, 20, 255, 255),
    model = "models/player/combine_soldier_prisonguard.mdl",
    description = [[The Chief is the leader of the Civil Protection unit.
        Coordinate the police force to enforce law in the city.
        Hit a player with arrest baton to put them in jail.
        Bash a player with a stunstick and they may learn to obey the law.
        The Battering Ram can break down the door of a criminal, with a warrant for their arrest.
        Type /wanted <name> to alert the public to the presence of a criminal.
        Type /jailpos to set the Jail Position]],
    weapons = {"arrest_stick", "unarrest_stick", "weapon_deagle2", "stunstick", "door_ram", "weaponchecker"},
    command = "chief",
    max = 1,
    salary = GAMEMODE.Config.normalsalary * 1.67,
    admin = 0,
    vote = false,
    hasLicense = true,
    chief = true,
    NeedToChangeFrom = TEAM_POLICE,
    ammo = {
        ["pistol"] = 60,
    },
    category = "Civil Protection",
})

TEAM_MAYOR = DarkRP.createJob("Mayor", {
    color = Color(150, 20, 20, 255),
    model = "models/player/breen.mdl",
    description = [[The Mayor of the city creates laws to govern the city.
    If you are the mayor you may create and accept warrants.
    Type /wanted <name>  to warrant a player.
    Type /jailpos to set the Jail Position.
    Type /lockdown initiate a lockdown of the city.
    Everyone must be inside during a lockdown.
    The cops patrol the area.
    /unlockdown to end a lockdown]],
    weapons = {},
    command = "mayor",
    max = 1,
    salary = GAMEMODE.Config.normalsalary * 1.89,
    admin = 0,
    vote = true,
    hasLicense = false,
    mayor = true,
    category = "Civil Protection",
})

TEAM_HOBO = DarkRP.createJob("Hobo", {
    color = Color(80, 45, 0, 255),
    model = "models/player/corpse1.mdl",
    description = [[The lowest member of society. Everybody laughs at you.
        You have no home.
        Beg for your food and money
        Sing for everyone who passes to get money
        Make your own wooden home somewhere in a corner or outside someone else's door]],
    weapons = {"weapon_bugbait"},
    command = "hobo",
    max = 5,
    salary = 0,
    admin = 0,
    vote = false,
    hasLicense = false,
    candemote = false,
    hobo = true,
    category = "Citizens",
})

if not DarkRP.disabledDefaults["modules"]["hungermod"] then
    TEAM_COOK = DarkRP.createJob("Cook", {
        color = Color(238, 99, 99, 255),
        model = "models/player/mossman.mdl",
        description = [[As a cook, it is your responsibility to feed the other members of your city.
            You can spawn a microwave and sell the food you make:
            /buymicrowave]],
        weapons = {},
        command = "cook",
        max = 2,
        salary = 45,
        admin = 0,
        vote = false,
        hasLicense = false,
        cook = true
    })
end

-- Compatibility for when default teams are disabled
TEAM_CITIZEN = TEAM_CITIZEN  or -1
TEAM_POLICE  = TEAM_POLICE   or -1
TEAM_GANG    = TEAM_GANG     or -1
TEAM_MOB     = TEAM_MOB      or -1
TEAM_GUN     = TEAM_GUN      or -1
TEAM_MEDIC   = TEAM_MEDIC    or -1
TEAM_CHIEF   = TEAM_CHIEF    or -1
TEAM_MAYOR   = TEAM_MAYOR    or -1
TEAM_HOBO    = TEAM_HOBO     or -1
TEAM_COOK    = TEAM_COOK     or -1

-- Door groups
AddDoorGroup("Cops and Mayor only", TEAM_CHIEF, TEAM_POLICE, TEAM_MAYOR)
AddDoorGroup("Gundealer only", TEAM_GUN)


-- Agendas
DarkRP.createAgenda("Gangster's agenda", TEAM_MOB, {TEAM_GANG})
DarkRP.createAgenda("Police agenda", {TEAM_MAYOR, TEAM_CHIEF}, {TEAM_POLICE})

-- Group chats
DarkRP.createGroupChat(function(ply) return ply:isCP() end)
DarkRP.createGroupChat(TEAM_MOB, TEAM_GANG)
DarkRP.createGroupChat(function(listener, ply) return not ply or ply:Team() == listener:Team() end)

-- Initial team when first spawning
GAMEMODE.DefaultTeam = TEAM_CITIZEN

-- Teams that belong to Civil Protection
GAMEMODE.CivilProtection = {
    [TEAM_POLICE] = true,
    [TEAM_CHIEF] = true,
    [TEAM_MAYOR] = true,
}

-- Hitman team
DarkRP.addHitmanTeam(TEAM_MOB)

-- Demote groups
DarkRP.createDemoteGroup("Cops", {TEAM_POLICE, TEAM_CHIEF})
DarkRP.createDemoteGroup("Gangsters", {TEAM_GANG, TEAM_MOB})

-- Default categories
DarkRP.createCategory{
    name = "Citizens",
    categorises = "jobs",
    startExpanded = true,
    color = Color(0, 107, 0, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 100,
}

DarkRP.createCategory{
    name = "Civil Protection",
    categorises = "jobs",
    startExpanded = true,
    color = Color(25, 25, 170, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 101,
}

DarkRP.createCategory{
    name = "Gangsters",
    categorises = "jobs",
    startExpanded = true,
    color = Color(75, 75, 75, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 101,
}

DarkRP.createCategory{
    name = "Other",
    categorises = "jobs",
    startExpanded = true,
    color = Color(0, 107, 0, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 255,
}
--gamemodes/darkrp/gamemode/config/ammotypes.lua:
DarkRP.createAmmoType("pistol", {
    name = "Pistol ammo",
    model = "models/Items/BoxSRounds.mdl",
    price = 30,
    amountGiven = 24
})

DarkRP.createAmmoType("buckshot", {
    name = "Shotgun ammo",
    model = "models/Items/BoxBuckshot.mdl",
    price = 50,
    amountGiven = 8
})

DarkRP.createAmmoType("smg1", {
    name = "Rifle ammo",
    model = "models/Items/BoxMRounds.mdl",
    price = 80,
    amountGiven = 30
})

DarkRP.createCategory{
    name = "Other",
    categorises = "ammo",
    startExpanded = true,
    color = Color(0, 107, 0, 255),
    canSee = fp{fn.Id, true},
    sortOrder = 255,
}

--addons/glorifiedleveling/lua/glorifiedleveling/libraries/sh_glorifiedleveling_netlargestrings.lua:

if not net.WriteLargeString then
    function net.WriteLargeString( largeString )
        local compressedString = util.Compress( largeString )
        local byteCount = string.len( compressedString )
        net.WriteUInt( byteCount, 16 )
        net.WriteData( compressedString, byteCount )
    end
end

if not net.WriteTableAsString then
    function net.WriteTableAsString( tbl )
        net.WriteLargeString( util.TableToJSON( tbl or {} ) )
    end
end

if not net.ReadLargeString then
    function net.ReadLargeString()
        local byteCount = net.ReadUInt( 16 )
        return util.Decompress( net.ReadData( byteCount ) )
    end
end

if not net.ReadTableAsString then
    function net.ReadTableAsString()
        return util.JSONToTable( net.ReadLargeString() )
    end
end
--addons/glorifiedleveling/lua/glorifiedleveling/localization/sh_glorifiedleveling_polish.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/integrations/sh_glorifiedleveling_darkrp.lua:

if not GlorifiedLeveling.Config.SUPPORT_DARKRP then return end

if SERVER then
    local function levelCheck( ply, ent )
        local entLevel = ent.level or ent.Level or ent.GlorifiedLeveling_Level
        if entLevel and not GlorifiedLeveling.PlayerHasLevel( ply, entLevel ) then
            return false, GlorifiedLeveling.i18n.GetPhrase( "glLevelNotHighEnough" )
        end
    end

    hook.Add( "canBuyPistol", "GlorifiedLeveling.DarkRPIntegration.canBuyPistol", levelCheck )
    hook.Add( "canBuyAmmo", "GlorifiedLeveling.DarkRPIntegration.canBuyAmmo", levelCheck )
    hook.Add( "canBuyShipment", "GlorifiedLeveling.DarkRPIntegration.canBuyShipment", levelCheck )
    hook.Add( "canBuyVehicle", "GlorifiedLeveling.DarkRPIntegration.canBuyVehicle", levelCheck )
    hook.Add( "canBuyCustomEntity", "GlorifiedLeveling.DarkRPIntegration.canBuyCustomEntity", levelCheck )

    hook.Add( "playerCanChangeTeam", "GlorifiedLeveling.DarkRPIntegration.playerCanChangeTeam", function( ply, jobNumber )
        local jobFromNumber = RPExtraTeams[jobNumber]
        local jobLevel = jobFromNumber.level or jobFromNumber.Level or jobFromNumber.GlorifiedLeveling_Level

        if jobLevel and not GlorifiedLeveling.PlayerHasLevel( ply, jobLevel ) then
            return false, GlorifiedLeveling.i18n.GetPhrase( "glLevelNotHighEnough" )
        end
    end )
elseif GlorifiedLeveling.Config.DARKRP_LEVEL_NAME_AT_END then
    local function AddLevelNames()
        for k, v in pairs( DarkRPEntities ) do
            v.label = v.name
            local valueLevel = v.level or v.Level or v.GlorifiedLeveling_Level
            if valueLevel then
                v.label = ( v.label .. " - " .. GlorifiedLeveling.i18n.GetPhrase( "glLevelX", valueLevel ) )
            end
        end

        for k, v in pairs( RPExtraTeams ) do
            v.label = v.name
            local valueLevel = v.level or v.Level or v.GlorifiedLeveling_Level
            if valueLevel then
                v.label = ( v.label .. " - " .. GlorifiedLeveling.i18n.GetPhrase( "glLevelX", valueLevel ) )
            end
        end

        for k, v in pairs( CustomVehicles ) do
            v.label = v.name
            local valueLevel = v.level or v.Level or v.GlorifiedLeveling_Level
            if valueLevel then
                v.label = ( v.label .. " - " .. GlorifiedLeveling.i18n.GetPhrase( "glLevelX", valueLevel ) )
            end
        end

        for k, v in pairs( CustomShipments ) do
            v.label = v.name
            local valueLevel = v.level or v.Level or v.GlorifiedLeveling_Level
            if valueLevel then
                v.label = ( v.label .. " - " .. GlorifiedLeveling.i18n.GetPhrase( "glLevelX", valueLevel ) )
            end
        end

        for k, v in pairs( GAMEMODE.AmmoTypes ) do
            v.label = v.name
            local valueLevel = v.level or v.Level or v.GlorifiedLeveling_Level
            if valueLevel then
                v.label = ( v.label .. " - " .. GlorifiedLeveling.i18n.GetPhrase( "glLevelX", valueLevel ) )
            end
        end
    end

    hook.Add( "InitPostEntity", "GlorifiedLeveling.DarkRPIntegration.InitPostEntity", function()
        AddLevelNames()
    end ) 
    
    hook.Add( "OnReloaded", "GlorifiedLeveling.DarkRPIntegration.OnReloaded", function()
        AddLevelNames()
    end )
end
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/cl_glorifiedleveling_hud.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/adminpanel/cl_glorifiedleveling_resetlevelconfirmation.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/perkmenu/cl_glorifiedleveling_perkmenu_panel.lua:

local PANEL = {}

function PANEL:PerformLayout( w, h )
    self.TitleBar:Dock( TOP )
    self.TitleBar:SetSize( w, h * 0.1 )
end

function PANEL:UpdateCache( perkTbl )
    local panelW, panelH = ScrH() * 0.8, ScrH() * 0.7
    local titleBarSize = panelH * 0.1

    self:SetSize( panelW, panelH )
    self:Center()
    self:MakePopup()

    if not GlorifiedLeveling.PerkTableCache then GlorifiedLeveling.PerkTableCache = GlorifiedLeveling.GetPlayerPerkTable() end
    self.Theme = GlorifiedLeveling.Themes.GetCurrent()
    self.CachedFreePoints = GlorifiedLeveling.GetTotalFreePerkPoints( true )

    self.TitleBar = vgui.Create( "GlorifiedLeveling.PerkMenu.TitleBar", self )
    self.Perks = {}

    for k, v in ipairs( GlorifiedLeveling.Perks.PERK_INFO ) do
        local perkEntry = vgui.Create( "GlorifiedLeveling.PerkMenu.PerkEntry", self )
        perkEntry:SetPerk( k )
        local perkEntryHeight = panelH / 8
        perkEntry:SetSize( panelW - 30, perkEntryHeight )
        perkEntry:SetPos( 15, titleBarSize + ( ( k - 1 ) * perkEntryHeight ) + ( k * ( panelH / 48 ) ) )
        self.Perks[k] = perkEntry
    end

    self:SetAlpha( 0 )
    self:AlphaTo( 255, 0.3 )
end

function PANEL:Think()
    if input.IsKeyDown( KEY_ESCAPE ) then
        GlorifiedLeveling.UI.ClosePerkMenu()
    end
end

function PANEL:Paint( w, h )
    draw.RoundedBox( 6, 0, 0, w, h, self.Theme.Data.Colors.perkMenuBackgroundColor )
end

vgui.Register( "GlorifiedLeveling.PerkMenu.Menu", PANEL, "EditablePanel" )

function GlorifiedLeveling.UI.OpenPerkMenu()
    if not IsValid( LocalPlayer() ) then return end

    if IsValid( GlorifiedLeveling.UI.PerkMenu ) then
        GlorifiedLeveling.UI.PerkMenu:Remove()
        GlorifiedLeveling.UI.PerkMenu = nil
    end

    GlorifiedLeveling.UI.PerkMenu = vgui.Create( "GlorifiedLeveling.PerkMenu.Menu" )
    GlorifiedLeveling.UI.PerkMenu:UpdateCache()
end

function GlorifiedLeveling.UI.ClosePerkMenu()
    if not GlorifiedLeveling.UI.PerkMenu then return end

    GlorifiedLeveling.UI.PerkMenu:AlphaTo( 0, 0.3, 0, function()
        if not GlorifiedLeveling.UI.PerkMenu then return end
        GlorifiedLeveling.UI.PerkMenu:Remove()
        GlorifiedLeveling.UI.PerkMenu = nil
    end )
end

concommand.Add( "glorifiedleveling_perks", GlorifiedLeveling.UI.OpenPerkMenu )
--addons/zeros_trashman_v1.6.3/lua/darkrp_modules/ztrashman/sh_ztm_darkrp.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/darkrp_modules/zgoldwash/sh_zgw_darkrp.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/darkrp_modules/zgoldwash/sh_zgw_darkrp.lua:

TEAM_ZGW_GOLDWASHER = DarkRP.createJob("Altın Avcısı", {
    color = Color(20, 150, 20, 255),
    model = {"models/player/alyx.mdl"},
    description = [[Altın avcısısın
    tüm kum veya yeşillik alanlarında yapabilirsin bu mesleği
    tamamen legal bir meslektir.
    ]],
    weapons = {"zgw_shovel","zgw_sieve"},
    command = "zgw_golddigger",
    max = 3,
    salary = 250,
    admin = 0,
    vote = false,
    category = "Sivil",
    hasLicense = false,
    PlayerSpawn = function(ply) ply:SetPlayerColor(Vector(1,0.6,0)) end,
})

DarkRP.createCategory{
    name = "Altın Avcısı",
    categorises = "entities",
    startExpanded = true,
    color = Color(234, 189, 53, 255),
    canSee = function(ply) return true end,
    sortOrder = 104
}

DarkRP.createEntity("Altın Yıkama", {
    ent = "zgw_goldwasher",
    model = "models/zerochain/props_goldwash/zgw_goldwasher01.mdl",
    price = 20000,
    max = 1,
    cmd = "buyzgw_goldwasher",
    allowed = {TEAM_ZGW_GOLDWASHER},
    category = "Altın Avcısı"
})

DarkRP.createEntity("Kova", {
    ent = "zgw_bucket",
    model = "models/zerochain/props_goldwash/zgw_bucket.mdl",
    price = 3000,
    max = 5,
    cmd = "buyzgw_bucket",
    allowed = {TEAM_ZGW_GOLDWASHER},
    category = "Altın Avcısı"
})

DarkRP.createEntity("Otomatik Kova", {
    ent = "zgw_bucket_follow",
    model = "models/zerochain/props_goldwash/zgw_bucket.mdl",
    price = 15000,
    max = 5,
    cmd = "buyzgw_bucket_follow",
    allowed = {TEAM_ZGW_GOLDWASHER},
    category = "Altın Avcısı"
})

DarkRP.createEntity("Kap", {
    ent = "zgw_mat",
    model = "models/zerochain/props_goldwash/zgw_mat.mdl",
    price = 2500,
    max = 9,
    cmd = "buyzgw_mat",
    allowed = {TEAM_ZGW_GOLDWASHER},
    category = "Altın Avcısı"
})

DarkRP.createEntity("Paket", {
    ent = "zgw_lantern",
    model = "models/zerochain/props_goldwash/zgw_lantern.mdl",
    price = 3000,
    max = 3,
    cmd = "buyzgw_lantern",
    allowed = {TEAM_ZGW_GOLDWASHER},
    category = "Altın Avcısı"
})

--addons/realisticcardealer/lua/darkrp_modules/rcd_job_module/sh_job_modules.lua:
return gluapack()()
--addons/darkrpmodification/lua/darkrp_customthings/shipments.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/localization/sh_glorifiedhandcuffs_russian.lua:

GlorifiedHandcuffs.i18n.RegisterPhrases( "ru", {
        cuffed = "Kelepçelisin",
    blindfolded = "Gözlerin bağlı",
    gagged = "Ağzın bağlı",
    hitToFree = "%s  tuşunu spamlayarak kelepçeden kurtulabilirsin",
    brokenFreeWanted = "Tutsaklıktan kaçtı",
    bailMenu = "Kefalet Menüsü",
    bailPlayer = "Oyuncunun Kefaletini Öde",
    bailNpc = "Kefalet NPC’si",
    jailerNpc = "Gardiyan NPC’si",
    noPlayers = "Tutuklu hiçbir oyuncu yok.",
    surrendering = "Teslim oluyorsun",
    putHandsDown = "Ellerini indirmek için %s  tuşuna bas",
    playersJailed = "%s’yı %s süreliğine hapise attın.",
    name = "İsim",
    job = "Meslek",
    wallet = "Cüzdan",
    confiscateAll = "Tüm Eşyalarına El Koy",
    confiscateIllegal = "İllegal Eşyalarına El Koy",
    takeAll = "Hepsini Al",
    takeIllegal = "İllegal Eşyasını Al",
    dragPlayer = "Oyuncuyu Sürükle",
    blindfoldPlayer = "Oyuncunun Gözlerini Bağla",
    removeBlindfold = "Göz Bağını Çıkar",
    gagPlayer = "Oyuncunun Ağzını Bağla",
    removeGag = "Oyuncunun Ağzını Çöz",
    confiscate = "El Koy",
    handcuffs = "Kelepçe",
    baton = "Cop",
    --[[
    cuffed = "You are cuffed",
    blindfolded = "You are blindfolded",
    gagged = "You are gagged",
    hitToFree = "Spam  %s  to break free",
    brokenFreeWanted = "Escaped from custody",
    bailMenu = "Bail Menu",
    bailPlayer = "Bail Player",
    bailNpc = "Bail NPC",
    jailerNpc = "Jailer NPC",
    noPlayers = "There are no arrested players.",
    surrendering = "You are surrendering",
    putHandsDown = "Press  %s  to put your hands down",
    playersJailed = "You jailed %s player(s) for %s.",
    name = "Name",
    job = "Job",
    wallet = "Wallet",
    confiscateAll = "Confiscate All",
    confiscateIllegal = "Confiscate Illegal",
    takeAll = "Take All",
    takeIllegal = "Take Illegal",
    dragPlayer = "Drag Player",
    blindfoldPlayer = "Blindfold Player",
    removeBlindfold = "Remove Blindfold",
    gagPlayer = "Gag Player",
    removeGag = "Remove Gag",
    confiscate = "Confiscate",
    handcuffs = "Handcuffs",
    baton = "Baton",
    --]]
} )
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/localization/sh_glorifiedhandcuffs_spanish.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/core/cl_glorifiedhandcuffs_playermeta.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/bailmenu/cl_glorifiedhandcuffs_bailmenu_arrestedplayer.lua:

local PANEL = {}

function PANEL:AddPlayer( ply )
    self.Player = ply

    self.Avatar = vgui.Create( "GlorifiedHandcuffs.CircleAvatar", self )

    local function drawPlayerInfo( playerno, x, containerh, align )
        local centerh = containerh / 2
        local spacing = containerh * 0.12

        draw.SimpleText( self.Player:Name(), "GlorifiedHandcuffs.BailMenu.PlayerInfo", x, centerh - spacing, self.Theme.Data.Colors.bailMenuPlayerNameTextColor, align, TEXT_ALIGN_CENTER )
        draw.SimpleText( self.Player:SteamID(), "GlorifiedHandcuffs.BailMenu.PlayerInfo", x, centerh + spacing, self.Theme.Data.Colors.bailMenuPlayerSteamIDCol, align, TEXT_ALIGN_CENTER )
    end

    function self:Paint( w, h )
        draw.RoundedBox( h * 0.1, 0, 0, w, h, self.Theme.Data.Colors.bailMenuPlayerBackgroundColor )
        drawPlayerInfo( 1, h * 0.95, h, TEXT_ALIGN_LEFT )
    end

    self.BailButton = vgui.Create( "DButton", self )
    self.BailButton:SetTextColor( self.Theme.Data.Colors.bailMenuBailButtonTextColor )
    self.BailButton:SetFont( "GlorifiedHandcuffs.BailMenu.BailPlayer" )
    self.BailButton:SetText( GlorifiedHandcuffs.i18n.GetPhrase( "bailPlayer" ) )
    self.BailButton:Dock( RIGHT )
    self.BailButton.DoClick = function()
        if GlorifiedHandcuffs.CanPlayerAfford( LocalPlayer(), GlorifiedHandcuffs.Config.BAIL_AMOUNT ) then
            net.Start( "GlorifiedHandcuffs.Bail.RequestBailout" )
            net.WriteEntity( self.Player )
            net.SendToServer()
            GlorifiedHandcuffs.UI.CloseBailMenu()
        end
    end
    local canAffordBail = GlorifiedHandcuffs.CanPlayerAfford( LocalPlayer(), GlorifiedHandcuffs.Config.BAIL_AMOUNT )
    local bailButtonColor = canAffordBail and self.Theme.Data.Colors.bailMenuBailButtonColorCanAfford or self.Theme.Data.Colors.bailMenuBailButtonColorCantAfford
    local bailButtonColorLerped = bailButtonColor
    self.BailButton.Paint = function( bailButton, bailButtonW, bailButtonH )
        if not bailButton:IsHovered() then
            bailButtonColor = canAffordBail and self.Theme.Data.Colors.bailMenuBailButtonColorCanAfford or self.Theme.Data.Colors.bailMenuBailButtonColorCantAfford
        else
            bailButtonColor = canAffordBail and self.Theme.Data.Colors.bailMenuBailButtonColorCanAffordHover or self.Theme.Data.Colors.bailMenuBailButtonColorCantAffordHover
        end
        bailButtonColorLerped = GlorifiedHandcuffs.UI.LerpColor( FrameTime() * 4, bailButtonColorLerped, bailButtonColor )

        local displaySizeW = bailButtonW * 0.7
        local displaySizeH = bailButtonH * 0.55
        draw.RoundedBox( 4, bailButtonW / 2 - displaySizeW / 2, bailButtonH / 2 - displaySizeH / 2, displaySizeW, displaySizeH, bailButtonColorLerped )
    end
    self.BailButton.OnCursorEntered = function()
        self.BailButton:SetText( GlorifiedHandcuffs.FormatMoney( GlorifiedHandcuffs.Config.BAIL_AMOUNT ) )
    end
    self.BailButton.OnCursorExited = function()
        self.BailButton:SetText( GlorifiedHandcuffs.i18n.GetPhrase( "bailPlayer" ) )
    end
end

function PANEL:PerformLayout( w, h )
    local avatarsize = h * 0.65

    self.Avatar:SetSize( avatarsize, avatarsize )
    self.Avatar:SetMaskSize( avatarsize * 0.5 )
    self.Avatar:SetPos( h * 0.2, h * 0.18 )
    self.Avatar:SetSteamID( self.Player:SteamID64(), avatarsize )

    self.BailButton:SetSize( w * 0.3, h )
end

vgui.Register( "GlorifiedHandcuffs.BailMenu.ArrestedPlayer", PANEL, "Panel" )
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/interactionmenu/cl_glorifiedhandcuffs_interactionmenu_weaponsbox_weapon.lua:

local PANEL = {}

function PANEL:Init()
    self.Theme = self:GetParent().Theme

    self.ConfiscateButton = vgui.Create( "DButton", self )
    self.ConfiscateButton:SetFont( "GlorifiedHandcuffs.InteractionMenu.WeaponBoxInfo" )
    self.ConfiscateButton:SetTextColor( self.Theme.Data.Colors.interactionMenuConfiscateWeaponTextColor )
    self.ConfiscateButton:Dock( BOTTOM )

    self.ModelPanel = vgui.Create( "SpawnIcon", self )
    self.ModelPanel:Dock( LEFT )
    self.ModelPanel:DockMargin( self.ModelPanel:GetWide() / 2, 0, 0, 0 )
end

function PANEL:Paint( w, h )
    draw.RoundedBox( 6, 0, 0, w, h, self.Theme.Data.Colors.interactionMenuWeaponBackgroundColor )
end

function PANEL:SetWeaponInfo( weapon )
    local weaponClass = weapon:GetClass()
    self.WeaponLegal = GlorifiedHandcuffs.Config.LEGAL_WEAPONS[weaponClass] and GlorifiedHandcuffs.HasGunLicense( weapon:GetOwner() )
    self.ModelPanel:SetModel( weapon:GetWeaponWorldModel() )

    self.ConfiscateButton:SetText( weapon:GetPrintName() )
    local confiscateColor = self.WeaponLegal and self.Theme.Data.Colors.interactionMenuConfiscateWeaponColorLegal or self.Theme.Data.Colors.interactionMenuConfiscateWeaponColor
    local confiscateHoverColor = self.WeaponLegal and self.Theme.Data.Colors.interactionMenuConfiscateWeaponColorLegalHover or self.Theme.Data.Colors.interactionMenuConfiscateWeaponColorHover
    local curConfiscateColor = confiscateColor
    local curConfiscateColorLerped = curConfiscateColor
    self.ConfiscateButton.Paint = function( confiscateButton, confiscateButtonW, confiscateButtonH )
        curConfiscateColor = confiscateButton:IsHovered() and confiscateHoverColor or confiscateColor
        curConfiscateColorLerped = GlorifiedHandcuffs.UI.LerpColor( FrameTime() * 4, curConfiscateColorLerped, curConfiscateColor )
        draw.RoundedBoxEx( 6, 0, 0, confiscateButtonW, confiscateButtonH, curConfiscateColorLerped, false, false, true, true )
    end
    self.ConfiscateButton.OnCursorEntered = function()
        self.ConfiscateButton:SetText( GlorifiedHandcuffs.i18n.GetPhrase( "confiscate" ) )
    end
    self.ConfiscateButton.OnCursorExited = function()
        if not weapon or not weapon:IsValid() then return end
        self.ConfiscateButton:SetText( weapon:GetPrintName() )
    end
    self.ConfiscateButton.DoClick = function()
        net.Start( "GlorifiedHandcuffs.InteractionMenu.StripWeapon" )
        net.WriteEntity( weapon:GetOwner() )
        net.WriteString( weapon:GetClass() )
        net.SendToServer()
        GlorifiedHandcuffs.UI.CloseInteractionMenu()
    end
end

vgui.Register( "GlorifiedHandcuffs.InteractionMenu.WeaponsBox.Weapon", PANEL, "Panel" )
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/shared.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_blur.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_light.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_bash.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_firing.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_sights.lua:
return gluapack()()
--lua/weapons/arccw_fml_eft_mdr.lua:
return gluapack()()
--lua/weapons/arccw_mkb44h.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - DOD:S" -- edit this if you like
SWEP.AdminOnly = false

SWEP.PrintName = "MkB-44H"
SWEP.TrueName = "STG-44"
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "The first modern assault rifle. Created by Nazi Germany in 1942 with the intent to arm tank crewmen with better weapons than an SMG or a rifle."
SWEP.Trivia_Manufacturer = "Schmeisser Waffe GmbH"
SWEP.Trivia_Calibre = "7.92x33mm Kurz"
SWEP.Trivia_Mechanism = "Gas-Operated"
SWEP.Trivia_Country = "Nazi Germany"
SWEP.Trivia_Year = 1942

SWEP.Slot = 2

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "C.G. Haenel"
    SWEP.Trivia_Desc = "The first modern assault rifle. Created by Nazi Germany in 1942 with the intent to arm tank crewmen with better weapons than an SMG or a rifle. Hitler eventually dubbed the weapon the 'Sturmgewehr' as means for propaganda."

end

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/c_stg44.mdl"
SWEP.WorldModel = "models/weapons/w_stg44.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 35
SWEP.DamageMin = 25 -- damage done at maximum range
SWEP.Range = 150 -- in METRES
SWEP.Penetration = 10
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any
SWEP.MuzzleVelocity = 1100 -- projectile or phys bullet muzzle velocity
-- IN M/S

SWEP.TracerNum = 1 -- tracer every X
SWEP.TracerCol = Color(255, 25, 25)
SWEP.TracerWidth = 3

SWEP.ChamberSize = 1 -- how many rounds can be chambered.
SWEP.Primary.ClipSize = 30 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 60
SWEP.ReducedClipSize = 20

SWEP.Recoil = 0.65
SWEP.RecoilSide = 0.5
SWEP.RecoilRise = 1

SWEP.Delay = 60 / 588 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 200

SWEP.AccuracyMOA = 10 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 700 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "ar2" -- what ammo type the gun uses
SWEP.MagID = "mkb44h" -- the magazine pool this gun draws from

SWEP.ShootVol = 115 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound = "^weapons/mp44_shoot.wav"
SWEP.ShootSoundSilenced = "weapons/arccw/m4a1/m4a1_silencer_01.wav"
SWEP.DistantShootSound = "weapons/arccw/ak47/ak47-1-distant.wav"

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellModel = "models/shells/shell_762nato.mdl"
SWEP.ShellScale = 1.5
SWEP.ShellMaterial = "models/weapons/arcticcw/shell_556_steel"

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.94
SWEP.SightedSpeedMult = 0.5
SWEP.SightTime = 0.33
SWEP.VisualRecoilMult = 1
SWEP.RecoilRise = 1

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.CaseBones = {}

SWEP.IronSightStruct = {
    Pos = Vector (-3.625, -5.7, 1.55),
    Ang = Angle(0, 0, 0),
    Magnification = 1.1,
    SwitchToSound = "", -- sound that plays when switching to this sight
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 0)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.HolsterPos = Vector(0.532, -6, 0)
SWEP.HolsterAng = Angle(-7.036, 30.016, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 27

SWEP.ExtraSightDist = 5

SWEP.AttachmentElements = {
    ["noch"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {{ind = 1, bg = 1}},
    },
    ["reducedmag"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        WMBodygroups = {{ind = 2, bg = 1}},
    },
    ["extendedmag"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
        WMBodygroups = {{ind = 2, bg = 2}},
    },
}

SWEP.Attachments = {
    {
        PrintName = "Optic", -- print name
        DefaultAttName = "Iron Sights",
        Slot = {"optic", "optic_lp"}, -- what kind of attachments can fit here, can be string or table
        Bone = "ValveBiped.mp44_base", -- relevant bone any attachments will be mostly referring to
        Offset = {
            vpos = Vector(-5.5, -0.070, 5.65), -- offset that the attachment will be relative to the bone
            vang = Angle(90, 0, 0),
            wpos = Vector(6.758, 1.1, -6.533),
            wang = Angle(170, -180, 0),
        },
        InstalledEles = {"noch"},
        CorrectivePos = Vector(0, 0, 0),
        CorrectiveAng = Angle(1, 0, 0)
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "ValveBiped.mp44_base",
        Offset = {
            vpos = Vector(-4.051, 0, 26.374),
            vang = Angle(90, 0, 0),
            wpos = Vector(26.799, 0.662, -8.631),
            wang = Angle(-10.848, 2.5, 0)
        },
    },
    {
        PrintName = "Underbarrel",
        Slot = {"ubgl"},
        VMScale = Vector(1.2, 1, 1),
        Bone = "ValveBiped.mp44_base",
        Offset = {
            vpos = Vector(-3.5, -0.05, 13),
            vang = Angle(90, 0, 0),
            wpos = Vector(13, 0.899, -5.5),
            wang = Angle(170, 180, 0)
        },
        MergeSlots = {4},
    },
    {
        Hidden = true,
        Slot = {"foregrip", "bipod"},
        Bone = "ValveBiped.mp44_base",
        Offset = {
            vpos = Vector(-3.7, -0.05, 15),
            vang = Angle(90, 0, 0),
            wpos = Vector(13, 0.899, -5.5),
            wang = Angle(170, 180, 0)
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "ValveBiped.mp44_base",
        Offset = {
            vpos = Vector(-4, 0.2, 17.5), -- offset that the attachment will be relative to the bone
            vang = Angle(90, 0, -90),
            wpos = Vector(19.34, 0.331, -7.25),
            wang = Angle(-10, 0, 90)
        },
    },
    {
        PrintName = "Grip",
        Slot = "grip",
        DefaultAttName = "Standard Grip"
    },
    {
        PrintName = "Stock",
        Slot = "stock",
        DefaultAttName = "Standard Stock"
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "ValveBiped.mp44_base",
        Offset = {
            vpos = Vector(-4, -0.75, 5), -- offset that the attachment will be relative to the bone
            vang = Angle(90, 0, 0),
            wpos = Vector(5, 1.6, -4.9),
            wang = Angle(-10, 0, 180)
        },
    },
}

SWEP.Animations = {
    ["idle"] = false,
    ["draw"] = {
        Source = "draw",
        Time = 0.4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["ready"] = {
        Source = "draw",
        Time = 1,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire"] = {
        Source = {"shoot1", "shoot2", "shoot3"},
        Time = 0.5,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = {"shoot1"},
        Time = 0,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 2.5,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Framerate = 37,
        Checkpoints = {28, 38, 69},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty"] = {
        Source = "reload",
        Time = 3,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Framerate = 37,
        Checkpoints = {28, 38, 69},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
}
--lua/weapons/arccw_mw2_abase.lua:
return gluapack()()
--lua/weapons/arccw_mw2_famas.lua:
return gluapack()()
--lua/weapons/arccw_mw2_g17.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2 - Unofficial"
SWEP.AdminOnly = false
SWEP.WeaponCamBone = tag_camera

SWEP.PrintName = "G17"
SWEP.Trivia_Class = "Handgun"
SWEP.Trivia_Desc = "Semi-automatic (single fire)\nUnofficial."

SWEP.Slot = 1

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2/c_glock17_1.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-9, 3, -3.5),
    ang = Angle(-7, 0, 180),
    scale = 1.25
}
SWEP.WorldModel = "models/weapons/w_pist_glock18.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 40
SWEP.DamageMin = 20
SWEP.Range = 740 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 4
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 17 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 33
SWEP.ReducedClipSize = 10

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.4
SWEP.RecoilSide = 0.4
SWEP.RecoilRise = 0.2

SWEP.Delay = 0.079 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_pistol"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 15 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 200 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 120

SWEP.Primary.Ammo = "pistol" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 105 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/glock.wav"
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/glock.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/usp45_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_4"
SWEP.ShellModel = "models/shells/shell_9mm.mdl"
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.8
SWEP.SightTime = 0.125


SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-1.998, 0, 1.563),
    Ang = Angle(-1.112, 0, 0),
    ViewModelFOV = 65,
    Magnification = 1,
}

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "revolver"
SWEP.HoldtypeSights = "revolver"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1.34)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(3, 0, -1)
SWEP.CustomizeAng = Angle(10, 19, 0)

SWEP.CrouchPos = Vector(-2.764, -0.927, -0.202)
SWEP.CrouchAng = Angle(1.12, -1, -21.444)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1.34)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 18

SWEP.ExtraSightDist = 5

-----[ Tactical knife sheet ]------
	SWEP.CanBash				= true -- Tac knife will save us
	--SWEP.MeleeDamage			= 100
	--SWEP.MeleeRange				= 16
	--SWEP.MeleeDamageType		= DMG_CLUB
	--SWEP.MeleeTime				= 0.8
	SWEP.MeleeGesture			= ACT_HL2MP_GESTURE_RANGE_ATTACK_KNIFE
	--SWEP.MeleeAttackTime		= 0.079
	SWEP.MeleeMissSound			= ""
	SWEP.MeleeHitSound			= "MW2Common.Melee.HitWorld"
	SWEP.MeleeHitNPCSound		= "MW2Common.Melee.HitFleshy_Slice"

SWEP.AttachmentElements = {
    ["railthegrind"] = {
        VMElements = {
            {
                Model = "models/weapons/arccw/fesiugmw2/atts/pistolrail_1.mdl",
                Bone = "tag_weapon",
                Offset = {
                    pos = Vector(0, -0.025, -0.7),
                    ang = Angle(0, 0, 0),
                }
            }
        },
    },
    ["altirons"] = {
        Override_IronSightStruct = {
            Pos = Vector(-1.71, -2.346, 0.12),
            Ang = Angle(0.4, 0, 0),
            ViewModelFOV = 65,
            Magnification = 1,
        }
    },
}

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic_lp",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(-0.8, -0.01, 1.9),
            vang = Angle(0, 0, 0),
        },
        ExcludeFlags = {"arcticfixyoshit1","cantuseshitinakimboyet"},
        InstalledEles = {"railthegrind"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(3.7, 0, 0.9),
            vang = Angle(0, 0, 0),
            wpos = Vector(26.648, 0.782, -8.042),
            wang = Angle(-9.79, 0, 180)
        },
		VMScale = Vector(0.67, 0.67, 0.67),
        ExcludeFlags = {"cantuseshitinakimboyet"},
    },
    {
        PrintName = "Underbarrel",
		Slot = {"foregrip_pistol", "style_pistol", "mw2_tacknife"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(1.5, 0, -0.5),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-10.216, 0, 180)
        },
        MergeSlots = {8},
    },
    {
        PrintName = "Tactical",
        Slot = "tac_pistol",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.5, 0, 0),
            vang = Angle(0, 0, 0),
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG",
        ExcludeFlags = {"cantuseshitinakimboyet"},
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Akimbotest",
        DefaultAttName = "No LH",
        Slot = "akimbotest",
        Bone = "tag_view",
        Offset = {
            vpos = Vector(0, 0, 0),
            vang = Angle(0, 0, 0),
        },
        Hidden = true,
    },
    {
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(1, -0.45, 0.4),
            vang = Angle(0, 0, 0),
            wpos = Vector(8, 2.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Hook_SelectReloadAnimation = function(wep, anim)
    if wep.Attachments[3].Installed == "mw2_tacticalknife" then
        return anim .. "_knife"
    elseif wep.Attachments[8].Installed then
        return anim .. "_akimbo_right"
    end
end
SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[3].Installed == "mw2_tacticalknife" then
        return anim .. "_knife"
    elseif wep.Attachments[8].Installed then
        return anim .. "_akimbo_right"
    end
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 2/30
    },
    ["idle_empty"] = {
        Source = "idle_empty",
        Time = 2/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        Time = 31/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 32/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["draw_empty"] = {
        Source = "pullout_empty",
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        Time = 31/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["holster_empty"] = {
        Source = "putaway_empty",
        Time = 30/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["fire"] = {
        Source = "fire",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 13/30,
        ShellEjectAt = 0,
    },
    ["fire_empty"] = {
        Source = "lastfire",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_empty"] = {
        Source = "lastfire",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 51/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_lift_v1.wav", 	t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipout_v1.wav", 	t = 9/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipin_v1.wav", 	t = 27/24},
					},
        Checkpoints = {24, 97},
        FrameRate = 30,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.4,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        Time = 60/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_lift_v1.wav", 	t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipout_v1.wav", 	t = 9/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipin_v1.wav", 	t = 27/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_chamber_v1.wav", 	t = 36/24},
					},
        Checkpoints = {24, 97, 131},
        FrameRate = 37,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
---------------------------------------------------------
--------- LE TACTICAL KNIFE XDXDXDXD---------------------
---------------------------------------------------------
		["idle_knife"] = {
			Source = "idle_knife",
			Time = 300/30
		},
		["idle_empty_knife"] = {
			Source = "idle_knife",
			Time = 300/30
		},
		["enter_sprint_knife"] = {
			Source = "sprint_in_knife",
			Time = 10/30
		},
		["idle_sprint_knife"] = {
			Source = "sprint_loop_knife",
			Time = 30/40
		},
		["exit_sprint_knife"] = {
			Source = "sprint_out_knife",
			Time = 10/30
		},
		["fire_knife"] = {
			Source = "fire_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["fire_iron_knife"] = {
			Source = "fire_ads_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["fire_empty_knife"] = {
			Source = "lastfire_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["fire_iron_empty_knife"] = {
			Source = "lastfire_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["draw_knife"] = {
			Source = "pullout_knife",
			SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
			Time = 29/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["holster_knife"] = {
			Source = "putaway_knife",
			Time = 31/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["draw_empty_knife"] = {
			Source = "pullout_knife",
			SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
			Time = 29/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["holster_empty_knife"] = {
			Source = "putaway_knife",
			Time = 31/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["reload_knife"] = {
			Source = "reload_knife",
			Time = 51/24,
			TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
			SoundTable = {
							{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_lift_v1.wav", 	t = 0},
							{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipout_v1.wav", 	t = 7/24},
							{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipin_v1.wav", 	t = 25/24},
						},
			Checkpoints = {24, 97},
			FrameRate = 30,
			LHIK = true,
			LHIKIn = 0.5,
			LHIKOut = 0.4,
		},
		["reload_empty_knife"] = {
			Source = "reload_empty_knife",
			Time = 46/24,
			TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
			SoundTable = {
							{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_lift_v1.wav", 	t = 0},
							{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipout_v1.wav", 	t = 6/24},
							{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipin_v1.wav", 	t = 25/24},
							{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_chamber_v1.wav", 	t = 37/24},
						},
			Checkpoints = {24, 97, 131},
			FrameRate = 37,
			LHIK = true,
			LHIKIn = 0.5,
			LHIKOut = 0.6,
		},
		["bash_knife"] = {
			Source = "melee_knife",
			SoundTable = {{s = "MW2Common.Melee.Swing", 		t = 0}},
			Time = 97/120 / 1.6, -- damn you universal
			LHIK = true,
		},

---------------------------------------------------------
--------- LE akimbo gun ---------------------
---------------------------------------------------------
    ["idle_akimbo_right"] = {
        Source = "idle_akimbo_right",
        Time = 2/30
    },
    ["idle_empty_akimbo_right"] = {
        Source = "idle_empty_akimbo_right",
        Time = 2/30
    },
    ["enter_sprint_akimbo_right"] = {
        Source = "sprint_in_akimbo_right",
        Time = 11/30
    },
    ["idle_sprint_akimbo_right"] = {
        Source = "sprint_loop_akimbo_right",
        Time = 31/40
    },
    ["exit_sprint_akimbo_right"] = {
        Source = "sprint_out_akimbo_right",
        Time = 11/30
    },
    ["draw_akimbo_right"] = {
        Source = "pullout_akimbo_right",
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        Time = 26/30 /4,
    },
    ["holster_akimbo_right"] = {
        Source = "putaway_akimbo_right",
        Time = 26/30 /4,
    },
    ["fire_akimbo_right"] = {
        Source = "fire_akimbo_right",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["fire_empty_akimbo_right"] = {
        Source = "fire_last_akimbo_right",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["reload_akimbo_right"] = {
        Source = "reload_akimbo_right",
        Time = 70/40,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_lift_v1.wav", 	t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipout_v1.wav", 	t = 4/40},
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipin_v1.wav", 	t = 39/40},
					},
    },
    ["reload_empty_akimbo_right"] = {
        Source = "reload_empty_akimbo_right",
        Time = 89/40,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_lift_v1.wav", 	t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipout_v1.wav", 	t = 4/40},
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipin_v1.wav", 	t = 45/40},
						{s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_chamber_v1.wav", 	t = 65/40},
					},
    },
}
--lua/weapons/arccw_mw2_intervention_obrez.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2 - Unofficial"
SWEP.AdminOnly = false
SWEP.WeaponCamBone = tag_camera

SWEP.PrintName = "Intervention Obrez"
SWEP.Trivia_Class = "Sniper Rifle"
SWEP.Trivia_Desc = "Obrez bolt action.\nUnofficial."

SWEP.Slot = 1

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2/c_intervention_obrez.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-6.5, 4, -6),
    ang = Angle(-10, 0, 180),
    scale = 1.125
}
SWEP.WorldModel = "models/weapons/w_snip_awp.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 92
SWEP.DamageMin = 92
SWEP.Range = 4000 * 0.025 / 2 -- in METRES
SWEP.Penetration = 11

SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 3 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 5
SWEP.ReducedClipSize = 2

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 4
SWEP.RecoilSide = 4

SWEP.AccuracyMOA = 6 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 3000 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Delay = 60 / 600 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        PrintName = "BOLT",
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_crossbow"}
SWEP.NPCWeight = 100

SWEP.ManualAction = true
SWEP.NoLastCycle = true -- do not cycle on last shot

SWEP.Primary.Ammo = "SniperPenetratedRound" -- what ammo type the gun uses

SWEP.ShootVol = 140 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/cheytac.wav"
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/cheytac.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/m4_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_6"
SWEP.ShellModel = "models/shells/shell_338mag.mdl"
SWEP.ShellPitch = 80
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.6
SWEP.SightTime = 0.2

SWEP.IronSightStruct = {
    Pos = Vector(-3.778, -3, 0.93),
    Ang = Angle(0.513, 0, 0),
    ViewModelFOV = 65 / 1.3,
    Magnification = 1.3,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(9.824, 2, -2.897)
SWEP.CustomizeAng = Angle(12.149, 30.547, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.AttachmentElements = {
    --[[["nors"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },]]
    ["nolaser"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        WMBodygroups = {},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
}

SWEP.BarrelLength = 30

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "shotgun"
SWEP.HoldtypeSights = "ar2"

SWEP.ExtraSightDist = 5

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_sniper","optic"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(4.2, 0, 3),
            vang = Angle(0, 0, 0),
        },
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(22, 0, 1.6),
            vang = Angle(0, 0, 0),
            wpos = Vector(26.648, 0.782, -8.042),
            wang = Angle(-9.79, 0, 180)
        },
		VMScale = Vector(2, 1.25, 1.25)
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "ubgl", "bipod", "style_pistol"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(18.427, 0, -1.04),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-10.216, 0, 180)
        },
        SlideAmount = {
            vmin = Vector(8, 0, 0),
            vmax = Vector(17.8, 0, 0.7),
            wmin = Vector(15, 0.74, -4.301),
            wmax = Vector(15, 0.74, -4.301),
        },
    },	
    {
        PrintName = "Tactical",
        Slot = {"tac","mw2_hidelaser"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(14, 0, 2.6),
            vang = Angle(0, 0, 180),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
        InstalledEles = {"nolaser"},
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
    {
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(4, -0.6, 1),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 101/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 20/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 25/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["holster"] = {
        Source = "putaway",
        Time = 20/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire"] = {
        Source = "fire",
        Time = 10/30,
		MinProgress = 10/30,
    },
    ["cycle"] = {
        Source = "rechamber",
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_boltunlock_v1.wav", 	t = (3/30)*0.8},
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_boltopen_v1.wav", 		t = (7/30)*0.8},
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_boltclose_v1.wav", 	t = (16/30)*0.8},
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_boltlock_v1.wav", 		t = (19/30)*0.8},
					},
        ShellEjectAt = (7/30)*0.8,
        Time = (29/30)*0.8,
    },
    ["reload"] = {
        Source = "reload_tac",
        Time = (69/30)*0.8,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_lift_v1.wav", 		t = (0)*0.8},
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_clipout_v1.wav", 	t = (18/30)*0.8},
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_clipin_v1.wav", 	t = (47/30)*0.8},
					},
        Checkpoints = {18, 47},
        FrameRate = 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKOut = 0.3,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        Time = (117/30)*0.8,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_lift_v1.wav", 			t = (0)*0.8},
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_boltunlock_v1.wav", 	t = (13/30)*0.8},
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_boltopen_v1.wav", 		t = (18/30)*0.8},
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_clipout_v1.wav", 		t = (54/30)*0.8},
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_clipin_v1.wav", 		t = (81/30)*0.8},
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_boltclose_v1.wav", 	t = (99/30)*0.8},
						{s = "weapons/fesiugmw2/foley/wpfoly_cheytech_reload_boltlock_v1.wav", 		t = (103/30)*0.8},
					},
        Checkpoints = {18, 54, 81, 99},
        FrameRate = 30,
        LHIK = true,
        LHIKIn = 1.5,
        LHIKOut = 0.8,
    },
}
--lua/weapons/arccw_mw2_mg4.lua:
return gluapack()()
--lua/weapons/arccw_mw2_p90.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.WeaponCamBone = tag_camera

SWEP.PrintName = "P90"
SWEP.Trivia_Class = "Sub Machine Gun"
SWEP.Trivia_Desc = "Fully automatic, large magazines."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2/c_p90.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-5, 3, -5),
    ang = Angle(-10, 0, 180),
    scale = 1.33
}
SWEP.WorldModel = "models/weapons/w_smg_p90.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 30
SWEP.DamageMin = 20
SWEP.Range = 1000 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 3
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 50 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 75
SWEP.ReducedClipSize = 25

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.34
SWEP.RecoilSide = 0.34
SWEP.RecoilRise = 0

SWEP.Delay = 0.064 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.NPCWeaponType = {"weapon_ar2", "weapon_smg1"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 15 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 250 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 200

SWEP.Primary.Ammo = "pistol" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/p90.wav"
SWEP.ShootMechSound =       ArcCW_MW2_Mech
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/mp5.wav"
SWEP.ShootDrySound =        "weapons/fesiugmw2/fire/dryfire_smg.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/p90_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_smg"
SWEP.ShellModel = "models/shells/shell_57.mdl"
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.80
SWEP.SightTime = 0.2

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-3.2, -5, -0.2),
    Ang = Angle(0, 0, 0),
    ViewModelFOV = 65 / 1.18,
    Magnification = 1.18,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "smg"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SMG1

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(6.479, -2, -1.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 4.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 24

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
}

SWEP.ExtraSightDist = 5

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic","optic_lp"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(4.8, 0, 3.7),
            vang = Angle(0, 0, 0),
            wpos = Vector(1.998, 0.17, -5.025),
            wang = Angle(-3.074, -23.004, -172.249)
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(8, 0, 0.7),
            vang = Angle(0, 0, 0),
            wpos = Vector(12.057, 4.317, -3.858),
            wang = Angle(-3.074, -23.004, 0)
        },
    },
    {
        PrintName = "Underbarrel",
        Slot = {"style_pistol"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(8.5, 0, 0.3),
            vang = Angle(0, 0, 0),
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(7, -1.1, 2.8),
            vang = Angle(0, 0, 90),
            wpos = Vector(8.425, 3.891, -4.147),
            wang = Angle(-3.074, -23.004, -77.301)
        },
        VMScale = Vector(0.05, 0.05, 0.05)
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0.75, -1, 0.75),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 0/30,
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 11/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 31/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 11/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 26/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["ready"] = {
        Source = "pullout_first",
        Time = 35/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_p90_pickup_lift_v1.wav",   	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_p90_reload_chamber_v1.wav", 	t = 14/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 24/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["fire"] = {
        Source = "fire",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 93/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_p90_reload_lift_v1.wav",   	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_p90_reload_clipout_v1.wav", 	t = 14/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_p90_reload_clipin_v1.wav", 	t = 51/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_p90_reload_hit_v1.wav", 	    t = 67/30},
					},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.3,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        Time = 110/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_p90_reload_lift_v1.wav",   	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_p90_reload_clipout_v1.wav", 	t = 14/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_p90_reload_clipin_v1.wav", 	t = 51/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_p90_reload_hit_v1.wav", 	    t = 67/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_p90_reload_chamber_v1.wav", 	t = 90/30},
					},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.3,
    },
}
--lua/weapons/arccw_mw2_scarl.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2 - Unofficial"
SWEP.AdminOnly = false
SWEP.WeaponCamBone = tag_camera

SWEP.PrintName = "SCAR-LOS"
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "Fully automatic, all purpose weapon.\nUnofficial."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2/c_slog_scarlol.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-4, 3, -5),
    ang = Angle(-10, 0, 180),
    scale = 1.25
}
SWEP.WorldModel = "models/weapons/w_rif_galil.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 30
SWEP.DamageMin = 25
SWEP.Range = 2000 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 10
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 30 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 45
SWEP.ReducedClipSize = 20

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.4
SWEP.RecoilSide = 0.3
SWEP.RecoilRise = 0

SWEP.Delay = 0.082 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.NPCWeaponType = {"weapon_ar2", "weapon_smg1"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 1.6 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 500 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 250

SWEP.Primary.Ammo = "ar2" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 105 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/scarl.wav" -- ear rape trololololololo
SWEP.ShootMechSound =       ArcCW_MW2_Mech
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/scar.wav"
SWEP.ShootDrySound =        "weapons/fesiugmw2/fire/dryfire_rifle.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/scarl_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_4"
SWEP.ShellModel = "models/shells/shell_556.mdl"
SWEP.ShellPitch = 95
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.95
SWEP.SightedSpeedMult = 0.38
SWEP.SightTime = 0.25

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.52, -0, 0.12),
    Ang = Angle(0, 0, 0),
    ViewModelFOV = 65 / 1.3,
    Magnification = 1.3,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(10.479, 0, -1.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 14.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 27

SWEP.AttachmentElements = {
    ["grip"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
    },
    ["nors"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["nomuzzle"] = {
        VMBodygroups = {{ind = 4, bg = 1}},
    },
            ["mw2_ubgl_m203"] = {
                VMBodygroups = {{ind = 3, bg = 1}},
            },
            ["mw2_ubgl_masterkey"] = {
                VMBodygroups = {{ind = 3, bg = 2}},
            },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
}

SWEP.ExtraSightDist = 5

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(6.972, 0, 4.018),
            vang = Angle(0, 0, 0),
            wang = Angle(-9.738, 0, 180)
        },
        SlideAmount = {
            vmin = Vector(1, 0, 3),
            --vmax = Vector(12.976, 0, 4.018), default position would look weird :P
            vmax = Vector(6, 0, 3),
            wmin = Vector(5.36, 0.739, -5.401),
            wmax = Vector(5.36, 0.739, -5.401),
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(15, 0, 1.25),
            vang = Angle(0, 0, 0),
            wpos = Vector(33.719, -2.122, -5.573),
            wang = Angle(0, 6.034, 180)
        },
		WMScale = Vector(1, 1, 1),
        InstalledEles = {"nomuzzle"},
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "ubgl", "bipod"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(18.427, 0, -1.04),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-2.461, -6.525, 176.662)
        },
        SlideAmount = {
            vmin = Vector(8, 0, 0.4),
            vmax = Vector(11, 0, 0.4),
            wmin = Vector(20.996, -0.991, -3.837),
            wmax = Vector(13.661, -0.078, -3.837),
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(12.5, -1, 2.25),
            vang = Angle(0, 0, 90),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.75, -0.6, 0.75),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Animations = {
		["enter_ubgl"] = {
			Source = "idle",
			Time = 0/30
		},
		["exit_ubgl"] = {
			Source = "idle",
			Time = 0/30
		}, 						-- Fuck you.
    ["idle"] = {
        Source = "idle",
        Time = 1/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 11/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 31/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 11/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 29/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 29/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready"] = {
        Source = "pullout_first",
        Time = 38/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_chamber_v1.wav", 	t = 13/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire"] = {
        Source = "fire",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/unofficial/scarl/magout.wav", 	t = 10/30},
						{s = "weapons/fesiugmw2/unofficial/scarl/magin.wav", 	t = 40/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
        LHIKEaseOut = 0.3,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/unofficial/scarl/magout.wav", 	t = 10/30},
						{s = "weapons/fesiugmw2/unofficial/scarl/magin.wav", 	t = 40/30},
						{s = "weapons/fesiugmw2/unofficial/scarl/chamber.wav",		t = 54/30},
						{s = "weapons/fesiugmw2/unofficial/scarl/chamberforward.wav",		t = 62/30},						
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.3,
    },
------------------------------------------------
------ Here lies foregrip animations. awesome --
------------------------------------------------
    ["idle_fgrip"] = {
        Source = "idle_fgrip",
        Time = 1/30
    },
    ["enter_sprint_fgrip"] = {
        Source = "sprint_in_fgrip",
        Time = 11/30
    },
    ["idle_sprint_fgrip"] = {
        Source = "sprint_loop",
        Time = 31/40
    },
    ["exit_sprint_fgrip"] = {
        Source = "sprint_out_fgrip",
        Time = 11/30
    },
    ["draw_fgrip"] = {
        Source = "pullout_fgrip",
        Time = 29/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster_fgrip"] = {
        Source = "putaway_fgrip",
        Time = 29/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready_fgrip"] = {
        Source = "pullout_first_fgrip",
        Time = 38/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_chamber_v1.wav", 	t = 13/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire_fgrip"] = {
        Source = "fire_fgrip",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_fgrip"] = {
        Source = "fire_ads_fgrip",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["reload_fgrip"] = {
        Source = "reload_fgrip",
        Time = 76/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_clipout_v1.wav", 	t = 18/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_clipin_v1.wav", 	t = 48/30},
					},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.7,
    },
    ["reload_empty_fgrip"] = {
        Source = "reload_empty_fgrip",
        Time = 102/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_clipout_v1.wav", 	t = 18/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_clipin_v1.wav", 	t = 48/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_hit_v1.wav",		t = 69/30},
					},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.7,
    },
------------------------------------------------
------ Here lies M203 ANIMATIONS ... AWESOME ---
------------------------------------------------
    ["idle_m203"] = {
        Source = "idle_m203",
        Time = 1/30
    },
    ["enter_sprint_m203"] = {
        Source = "sprint_in_m203",
        Time = 11/30
    },
    ["idle_sprint_m203"] = {
        Source = "sprint_loop_m203",
        Time = 31/40
    },
    ["exit_sprint_m203"] = {
        Source = "sprint_out_m203",
        Time = 11/30
    },
    ["draw_m203"] = {
        Source = "pullout_m203",
        Time = 29/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster_m203"] = {
        Source = "putaway_m203",
        Time = 29/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready_m203"] = {
        Source = "pullout_first_m203",
        Time = 38/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_chamber_v1.wav", 	t = 13/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire_m203"] = {
        Source = "fire_m203",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_m203"] = {
        Source = "fire_ads_m203",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["reload_m203"] = {
        Source = "reload_m203",
        Time = 76/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_clipout_v1.wav", 	t = 18/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_clipin_v1.wav", 	t = 48/30},
					},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.7,
    },
    ["reload_empty_m203"] = {
        Source = "reload_empty_m203",
        Time = 102/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_clipout_v1.wav", 	t = 18/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_clipin_v1.wav", 	t = 48/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_hit_v1.wav",		t = 69/30},
					},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.7,
    },
------------------------------------------------
------ Here lies M203 IN THE ANIMATIONS........... ... AWESOME ---
------------------------------------------------
    ["alt_idle_m203"] = {
        Source = "alt_idle_m203",
        Time = 1/30
    },
    ["alt_enter_sprint_m203"] = {
        Source = "alt_sprint_in_m203",
        Time = 11/30
    },
    ["alt_idle_sprint_m203"] = {
        Source = "alt_sprint_loop_m203",
        Time = 31/40
    },
    ["alt_exit_sprint_m203"] = {
        Source = "alt_sprint_out_m203",
        Time = 11/30
    },
    ["alt_draw_m203"] = {
        Source = "alt_pullout_m203",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["alt_holster_m203"] = {
        Source = "alt_putaway_m203",
        Time = 20/30,
    },
    ["alt_fire_m203"] = {
        Source = "alt_fire_m203",
        Time = 6/30,
    },
    ["alt_reload_m203"] = {
        Source = "alt_reload_m203",
        Time = 79/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_chamber_open_v12.wav", 		t = 12/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_load_v12.wav", 	t = 39/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_chamber_close_v12.wav", 	t = 60/30},
					},
    },
------------------------------------------------
------ Here lies MASTERKEY ANIMATIONS ... AWESOME ---
------------------------------------------------
    ["idle_masterkey"] = {
        Source = "idle_masterkey",
        Time = 1/30
    },
    ["enter_sprint_masterkey"] = {
        Source = "sprint_in_masterkey",
        Time = 11/30
    },
    ["idle_sprint_masterkey"] = {
        Source = "sprint_loop_masterkey",
        Time = 31/40
    },
    ["exit_sprint_masterkey"] = {
        Source = "sprint_out_masterkey",
        Time = 11/30
    },
    ["draw_masterkey"] = {
        Source = "pullout_masterkey",
        Time = 29/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster_masterkey"] = {
        Source = "putaway_masterkey",
        Time = 29/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready_masterkey"] = {
        Source = "pullout_first_masterkey",
        Time = 38/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_chamber_v1.wav", 	t = 13/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire_masterkey"] = {
        Source = "fire_masterkey",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_masterkey"] = {
        Source = "fire_ads_masterkey",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["reload_masterkey"] = {
        Source = "reload_masterkey",
        Time = 76/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_clipout_v1.wav", 	t = 18/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_clipin_v1.wav", 	t = 48/30},
					},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.7,
    },
    ["reload_empty_masterkey"] = {
        Source = "reload_empty_masterkey",
        Time = 102/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_clipout_v1.wav", 	t = 18/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_clipin_v1.wav", 	t = 48/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_scar_reload_hit_v1.wav",		t = 69/30},
					},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.7,
    },
------------------------------------------------
------ Here lies MASTERKEY IN THE ANIMATIONS........... ... AWESOME ---
------------------------------------------------
    ["alt_idle_masterkey"] = {
        Source = "alt_idle_masterkey",
        Time = 1/30
    },
    ["alt_enter_sprint_masterkey"] = {
        Source = "alt_sprint_in_masterkey",
        Time = 11/30
    },
    ["alt_idle_sprint_masterkey"] = {
        Source = "alt_sprint_loop_masterkey",
        Time = 31/40
    },
    ["alt_exit_sprint_masterkey"] = {
        Source = "alt_sprint_out_masterkey",
        Time = 11/30
    },
    ["alt_draw_masterkey"] = {
        Source = "alt_pullout_masterkey",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["alt_holster_masterkey"] = {
        Source = "alt_putaway_masterkey",
        Time = 20/30,
    },
    ["alt_fire_masterkey"] = {
        Source = "alt_fire_masterkey",
        Time = 10/30,
    },
    ["alt_cycle_masterkey"] = {
        Source = "alt_cycle_masterkey",
        SoundTable = {{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 3/30}},
        Time = 15/30,
    },
    ["alt_reload_start_masterkey"] = {
        Source = "alt_reload_start_masterkey",
        Time = 35/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_lift_v1.wav", 		t = 0/30},
						{s = "MW2Common.Masterkey_Load", 		t = 26/30},
					},
    },
    ["alt_reload_loop_masterkey"] = {
        Source = "alt_reload_loop_masterkey",
        Time = 33/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "MW2Common.Masterkey_Load", 	t = 24/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_end_v1.wav", 	t = 33/30}, -- end
					},
    },
    ["alt_reload_finish_masterkey"] = {
        Source = "alt_reload_finish_masterkey",
        Time = 50/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						--{s = "MW2Common.Masterkey_Load", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_end_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 	t = 22/30},
					},
    },
-----------------------------------------------------
    ["switch2_gun_m203"] = {
        Source = "switch2_gun_m203",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 25/30
    },
    ["switch2_alt_m203"] = {
        Source = "switch2_alt_m203",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 25/30
    },
    ["switch2_gun_masterkey"] = {
        Source = "switch2_gun_masterkey",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 25/30
    },
    ["switch2_alt_masterkey"] = {
        Source = "switch2_alt_masterkey",
        SoundTable = {
						{s = "MW2Common.Underbarrel", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 14/30},
					},
        Time = 25/30
    },
}
--lua/weapons/arccw_mw2_spas12.lua:
return gluapack()()
--lua/weapons/arccw_mw2_striker.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
-- SWEP.CamAttachment = 3 fake ass hood -----

SWEP.PrintName = "Striker"
SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = "Semi-automatic (single fire)"

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2_2/c_striker_1.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-5, 3, -5),
    ang = Angle(-10, 0, 180),
    scale = 1.25
}
SWEP.WorldModel = "models/weapons/w_shot_xm1014.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 25
SWEP.DamageMin = 15
SWEP.Range = 600 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 1
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 12 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 18
SWEP.ReducedClipSize = 6

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 2
SWEP.RecoilSide = 2

SWEP.ShotgunReload = true

SWEP.Delay = 0.17 -- 60 / RPM.
SWEP.Num = 6 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 100 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 300 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "buckshot" -- what ammo type the gun uses

SWEP.ShootVol = 120 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/shot_stryker.wav"
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/shot_m1014.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/shot_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_m3"
SWEP.ShellModel = "models/shells/shell_12gauge.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.4
SWEP.SightTime = 0.3

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.846, -3.5, 0.75),
    Ang = Angle(-0.2, 0, 0),
    ViewModelFOV = 65 / 1.18,
    Magnification = 1.18,
}


SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "smg"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN

SWEP.ActivePos = Vector(-0.25, -0.5, 0.75)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(5.479, -3, 0.321)
SWEP.CustomizeAng = Angle(6.2, 29.4, 14.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(-0.25, -0.5, 0.75)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.ExtraSightDist = 5

SWEP.AttachmentElements = {
    ["sight"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["grip"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        WMBodygroups = {},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
}

SWEP.Attachments = {
	{
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(4.4, 0, 2.2),
            vang = Angle(0, 0, 0),
            wang = Angle(-9.738, 0, 180)
        },
        InstalledEles = {"sight"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle_shotgun",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(15, 0, 1),
            vang = Angle(0, 0, 0),
            wpos = Vector(26.648, 0.782, -8.042),
            wang = Angle(-9.79, 0, 180)
        },
		VMScale = Vector(1.25, 1.25, 1.25),
    },
    {
        PrintName = "Underbarrel",
        Slot = "foregrip",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(10, 0, 0.34),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-10.216, 0, 180)
        },
        InstalledEles = {"grip"},
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(6, -1, -0.6),
            vang = Angle(0, 0, 90),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
        SlideAmount = {
            vmin = Vector(4, -1, -0.6),
            vmax = Vector(9.5, -1, -0.6),
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_shotgun"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(13, -0.5, 0.8),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 1/100,
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 26/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.2,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 25/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.3,
    },
    ["fire"] = {
        Source = "fire",
        Time = 10/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 10/30,
        ShellEjectAt = 0,
    },
    ["sgreload_start"] = {
        Source = "reload_start",
        Time = 43/40,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
                        {s = "weapons/fesiugmw2/foley/wpfoly_striker_reload_lift_v1.wav", 		t = 0},
                        {s = "weapons/fesiugmw2/foley/wpfoly_striker_reload_shell_v1.wav", 		t = 20/40},
                        {s = "weapons/fesiugmw2/foley/wpfoly_striker_reload_button_v1.wav", 		t = 36/40},
                    },
		RestoreAmmo = 1, -- only used by shotgun empty insert reload
		MinProgress = 0.85,
    },
    ["sgreload_insert"] = {
        Source = "reload_loop",
        Time = 26/40,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
                        {s = "weapons/fesiugmw2/foley/wpfoly_striker_reload_shell_v1.wav", 		t = 3/40},
                        {s = "weapons/fesiugmw2/foley/wpfoly_striker_reload_button_v1.wav", 		t = 19/40},
                    },
        TPAnimStartTime = 0.3,
		MinProgress = 0.3,
    },
    ["sgreload_finish"] = {
        Source = "reload_finish",
        Time = 13/30,
        SoundTable = {
                        {s = "weapons/fesiugmw2/foley/wpfoly_striker_reload_end_v1.wav", 		t = 0.01},
                    },
    },
    ["sgreload_finish_empty"] = {
        Source = "reload_finish",
        Time = 13/30,
        SoundTable = {
                        {s = "weapons/fesiugmw2/foley/wpfoly_striker_reload_end_v1.wav", 		t = 0.01},
                    },
    },
}

 -- Super fucky temp!
 -- S H U T  U P    A N D   K E E P  T H E M   P I N N E D  D O W N  

-- notverycreativenowarewe
local nvcnaw = 5

 -- hipfire
 -- maximum accuracy
    SWEP.Inaccuracy_Hip_Max_Stand	= nvcnaw
    SWEP.Inaccuracy_Hip_Max_Duck	= nvcnaw
    SWEP.Inaccuracy_Hip_Max_Prone	= nvcnaw
 -- minimum accuracy
    SWEP.Inaccuracy_Hip_Min_Stand   = nvcnaw
    SWEP.Inaccuracy_Hip_Min_Duck    = nvcnaw
    SWEP.Inaccuracy_Hip_Min_Prone   = nvcnaw

 -- sighted fire
 -- yeah
    SWEP.Inaccuracy_ADS = 5.5

 -- inaccuracy when you're... i don't remember
SWEP.Inaccuracy_Add_ADS			= 0
SWEP.Inaccuracy_Add_Hip			= 0
SWEP.Inaccuracy_Add_Move		= 0.1
--lua/weapons/arccw_mw2_tavor.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.CamAttachment = 3

SWEP.PrintName = "TAR-21"
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "Fully automatic, all purpose weapon."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2_2/c_tavor_1.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-8, 3, -5),
    ang = Angle(-10, 0, 180),
    scale = 1.25
}
SWEP.WorldModel = "models/weapons/w_rif_ak47.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 40
SWEP.DamageMin = 30
SWEP.Range = 1500 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 7
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 30 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 45
SWEP.ReducedClipSize = 15

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.4
SWEP.RecoilSide = 0.7
SWEP.RecoilRise = 0.3

SWEP.Delay = 0.079 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_ar2", "weapon_smg1"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 2.5 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 500 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "smg1" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/tar21.wav"
SWEP.ShootMechSound =       ArcCW_MW2_Mech
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/tar21.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/m4_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_4"
SWEP.ShellModel = "models/shells/shell_556.mdl"
SWEP.ShellPitch = 95
SWEP.ShellScale = 1

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.95
SWEP.SightedSpeedMult = 0.38
SWEP.SightTime = 0.25
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.816, -5.49, 0.56),
    Ang = Angle(0, 0, 0),
    ViewModelFOV = 65 / 1.3,
    Magnification = 1.3,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(10.479, 0, -1.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 14.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 27

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
            ["mw2_ubgl_m203"] = {
                VMBodygroups = {{ind = 2, bg = 1}},
            },
            ["mw2_ubgl_masterkey"] = {
                VMBodygroups = {{ind = 2, bg = 2}},
            },
}

SWEP.ExtraSightDist = 5

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(-2.6, 0, 2.8),
            vang = Angle(0, 0, 0),
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(9.2, 0, 0.75),
            vang = Angle(0, 0, 0),
        },
		WMScale = Vector(1, 1, 1),
        InstalledEles = {"nomuzzle"},
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "ubgl", "bipod", "mw2_ubgl"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(3.748, 0, -1),
            vang = Angle(0, 0, 0),
        },
        InstalledEles = {"nogrip"},
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(-4.5, -0.7, 1.25),
            vang = Angle(0, 0, 90),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(-0.5, -0.45, 0.75),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}



SWEP.Hook_TranslateAnimation = function(wep, anim)
	local attached = wep.Attachments[3].Installed
	
	-- m203 is 1, masterkey is 2, fgrip is 3
	local attthing
		if 		attached == "mw2_ubgl_m203" 		then attthing = 1
		elseif 	attached == "mw2_ubgl_masterkey" 	then attthing = 2
		else 											 attthing = 0
	end
	
	-- when entering ubgl
	if anim == "enter_ubgl" then
		if attthing == 1 then
			return "switch2_alt_m203"
		elseif attthing == 2 then
			return "switch2_alt_masterkey"
		end
	elseif anim == "exit_ubgl" then
		if attthing == 1 then
			return "switch2_gun_m203"
		elseif attthing == 2 then
			return "switch2_gun_masterkey"
		end
	end
	
    if attthing == 1 and wep:GetInUBGL() then
        return "alt_" .. anim .. "_m203"
		elseif attthing == 1 then
			return anim .. "_masterkey"
		
	elseif attthing == 2 and wep:GetInUBGL() then
        return "alt_" .. anim .. "_masterkey"
		elseif attthing == 2 then
			return anim .. "_masterkey"
		
    end
end

SWEP.Animations = {
		["enter_ubgl"] = {
			Source = "idle",
			Time = 0/30
		},
		["exit_ubgl"] = {
			Source = "idle",
			Time = 0/30
		}, 						-- Fuck you.
    ["idle"] = {
        Source = "idle",
        Time = 1/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["ready"] = {
        Source = "pullout_first",
        Time = 33/30,
        SoundTable = {
                        {s = "MW2Common.Deploy", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_chamber_v1.wav",		t = 11/30},
					},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["draw"] = {
        Source = "pullout",
        Time = 29/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 25/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["fire"] = {
        Source = "fire",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 71/30,
        MinProgress = 1.7,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_clipout_v1.wav", 	    t = 12/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_clipin_v1.wav", 	    t = 47/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty"] = {
        Source = {"reload_empty","reload_empty2"},
        Time = 87/30,
        MinProgress = 1.7,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_clipout_v1.wav", 	    t = 13/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_clipin_v1.wav", 	    t = 46/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_chamber_v1.wav",		t = 66/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
------------------------------------------------
------ Here lies MASTERKEY ANIMATIONS ... AWESOME ---
------------------------------------------------
    ["idle_masterkey"] = {
        Source = "idle_masterkey",
        Time = 1/30
    },
    ["enter_sprint_masterkey"] = {
        Source = "sprint_in_masterkey",
        Time = 10/30
    },
    ["idle_sprint_masterkey"] = {
        Source = "sprint_loop_masterkey",
        Time = 30/40
    },
    ["exit_sprint_masterkey"] = {
        Source = "sprint_out_masterkey",
        Time = 10/30
    },
    ["ready_masterkey"] = {
        Source = "pullout_first_masterkey",
        Time = 33/30,
        SoundTable = {
                        {s = "MW2Common.Deploy", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_chamber_v1.wav",		t = 11/30},
					},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["draw_masterkey"] = {
        Source = "pullout_masterkey",
        Time = 29/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster_masterkey"] = {
        Source = "putaway_masterkey",
        Time = 25/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["fire_masterkey"] = {
        Source = "fire_masterkey",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_masterkey"] = {
        Source = "fire_ads_masterkey",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["reload_masterkey"] = {
        Source = "reload_masterkey",
        Time = 71/30,
        MinProgress = 1.7,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_clipout_v1.wav", 	    t = 12/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_clipin_v1.wav", 	    t = 47/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty_masterkey"] = {
        Source = "reload_empty_masterkey",
        Time = 87/30,
        MinProgress = 1.7,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_clipout_v1.wav", 	    t = 13/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_clipin_v1.wav", 	    t = 46/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_tavor_reload_chamber_v1.wav",		t = 66/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
------------------------------------------------
------ Here lies M203 IN THE ANIMATIONS........... ... AWESOME ---
------------------------------------------------
    ["alt_idle_m203"] = {
        Source = "alt_idle_m203",
        Time = 1/30
    },
    ["alt_enter_sprint_m203"] = {
        Source = "alt_sprint_in_m203",
        Time = 10/30
    },
    ["alt_idle_sprint_m203"] = {
        Source = "alt_sprint_loop_m203",
        Time = 30/40
    },
    ["alt_exit_sprint_m203"] = {
        Source = "alt_sprint_out_m203",
        Time = 10/30
    },
    ["alt_draw_m203"] = {
        Source = "alt_pullout_m203",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["alt_holster_m203"] = {
        Source = "alt_putaway_m203",
        Time = 20/30,
    },
    ["alt_fire_m203"] = {
        Source = "alt_fire_m203",
        Time = 10/30,
    },
    ["alt_reload_m203"] = {
        Source = "alt_reload_m203",
        Time = 78/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_chamber_open_v12.wav", 		t = 12/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_load_v12.wav", 	t = 40/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_chamber_close_v12.wav", 	t = 61/30},
					},
    },
------------------------------------------------
------ Here lies MASTERKEY IN THE ANIMATIONS........... ... AWESOME ---
------------------------------------------------
    ["alt_idle_masterkey"] = {
        Source = "alt_idle_masterkey",
        Time = 1/30
    },
    ["alt_enter_sprint_masterkey"] = {
        Source = "alt_sprint_in_masterkey",
        Time = 10/30
    },
    ["alt_idle_sprint_masterkey"] = {
        Source = "alt_sprint_loop_masterkey",
        Time = 30/40
    },
    ["alt_exit_sprint_masterkey"] = {
        Source = "alt_sprint_out_masterkey",
        Time = 10/30
    },
    ["alt_draw_masterkey"] = {
        Source = "alt_pullout_masterkey",
        Time = 25/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["alt_holster_masterkey"] = {
        Source = "alt_putaway_masterkey",
        Time = 25/30,
    },
    ["alt_fire_masterkey"] = {
        Source = "alt_fire_masterkey",
        Time = 10/30,
    },
    ["alt_cycle_masterkey"] = {
        Source = "alt_cycle_masterkey",
        SoundTable = {{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 3/30}},
        Time = 15/30,
    },
    ["alt_reload_start_masterkey"] = {
        Source = "alt_reload_start_masterkey",
        Time = 35/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_lift_v1.wav", 		t = 0/30},
						{s = "MW2Common.Masterkey_Load", 		t = 26/30},
					},
    },
    ["alt_reload_loop_masterkey"] = {
        Source = "alt_reload_loop_masterkey",
        Time = 33/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "MW2Common.Masterkey_Load", 	t = 24/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_end_v1.wav", 	t = 33/30}, -- end
					},
    },
    ["alt_reload_finish_masterkey"] = {
        Source = "alt_reload_finish_masterkey",
        Time = 50/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						--{s = "MW2Common.Masterkey_Load", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_end_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 	t = 22/30},
					},
    },
-----------------------------------------------------
    ["switch2_gun_m203"] = {
        Source = "switch2_gun_m203",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 24/30
    },
    ["switch2_alt_m203"] = {
        Source = "switch2_alt_m203",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 24/30
    },
    ["switch2_gun_masterkey"] = {
        Source = "switch2_gun_masterkey",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 22/30
    },
    ["switch2_alt_masterkey"] = {
        Source = "switch2_alt_masterkey",
        SoundTable = {
						{s = "MW2Common.Underbarrel", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 14/30},
					},
        Time = 25/30
    },
}
--lua/weapons/arccw_mw2_vector.lua:
return gluapack()()
--lua/weapons/arccw_uc_scar47.lua:
if !file.Exists("weapons/arccw_myt_uc_scar.lua","LUA") then return end

include("weapons/arccw_myt_uc_scar.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "Chijmaar 32"
SWEP.TrueName = "SCAR-47"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[7].Installed = "uc_myt_scar_stock_fold"
SWEP.Attachments[7].ToggleLock = true
SWEP.Attachments[8].Installed = "uc_myt_scar_cal_762"
--lua/weapons/arccw_myt_uc_scar.lua:
return gluapack()()
--lua/weapons/arccw_uc_uspmatch.lua:
return gluapack()()
--lua/weapons/arccw_ud_m16.lua:
return gluapack()()
--lua/weapons/arccw_ud_g18.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_glock.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Pistols"
end

SWEP.PrintName = "GEN3 Auto"
SWEP.TrueName = "Glock 18C"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ud_glock_slide_auto"
SWEP.Attachments[8].Installed = "ud_glock_mag_33" -- There's still a hidden slot
SWEP.Attachments[15].Installed = "ud_glock_skin_olive"
--lua/weapons/arccw_ud_glock.lua:
return gluapack()()
--lua/weapons/arccw_ud_gnb.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_glock.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Pistols"
end

SWEP.PrintName = "Glock and Balls"
SWEP.TrueName = "Glock and Balls"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ud_glock_slide_auto"
SWEP.Attachments[3].Installed = "ud_glock_frame_flared"
SWEP.Attachments[4].Installed = "ud_glock_caliber_22lr"
SWEP.Attachments[8].Installed = "ud_glock_mag_100" -- There's still a hidden slot

SWEP.NPCWeaponType = nil -- They can't be trusted with this power
--lua/weapons/arccw_ud_m1014.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_shotgun"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/12g.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.UC_ShellColor = Color(0.7*255, 0.2*255, 0.2*255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3

-- Fake name --

SWEP.PrintName = "FC1040"

-- True name --

SWEP.TrueName = "Benelli M4"

-- Trivia --

SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = [[Semi-automatic shotgun designed for close-quarters urban warfare. Uses an innovative short-stroke gas system that eliminates complex mechanisms found on most gas-operated automatic weapons. Its main use is in destroying locked doors.

Devastating damage output, but control is required to avoid spending more time reloading than fighting.]]
SWEP.Trivia_Manufacturer = "Iscapelli Armaments"
SWEP.Trivia_Calibre = "12 Gauge"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "Italy"
SWEP.Trivia_Year = 1998

-- Weapon slot --

SWEP.Slot = 3

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Benelli Armi SpA"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_m1014.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_m1014.mdl"
SWEP.ViewModelFOV = 60
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-4, 4, -4.5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1
}
SWEP.DefaultPoseParams = {["grip"] = 0}

-- Damage parameters --


SWEP.Damage = ArcCW.UC.StdDmg["12g_s"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["12g_s"].min
SWEP.Penetration = ArcCW.UC.StdDmg["12g_s"].pen
SWEP.Num = ArcCW.UC.StdDmg["12g_s"].num

SWEP.Range = 40
SWEP.RangeMin = 4
SWEP.DamageType = DMG_BUCKSHOT
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 200

SWEP.HullSize = 0.25

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults_Shotgun

-- Jamming --

SWEP.Malfunction = true
SWEP.MalfunctionJam = true
SWEP.MalfunctionPostFire = true
SWEP.MalfunctionTakeRound = false

-- Mag size --

SWEP.ChamberSize = 2
SWEP.Primary.ClipSize = 4
SWEP.ExtendedClipSize = 7
SWEP.ReducedClipSize = 2

SWEP.ChamberLoadNonEmpty = 2
SWEP.ChamberLoadEmpty = 1

-- Recoil --

SWEP.Recoil = 2.89
SWEP.RecoilSide = 2

SWEP.RecoilRise = 0.24
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 220
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShotgunReload = true

SWEP.ShootVol = 160
SWEP.ShootPitch = 100

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 210

-- Accuracy --

SWEP.AccuracyMOA = 30
SWEP.HipDispersion = 400
SWEP.MoveDispersion = 100
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "buckshot"

-- Speed multipliers --

SWEP.SpeedMult = 0.92
SWEP.SightedSpeedMult = 0.6
SWEP.SightTime = 0.4
SWEP.ShootSpeedMult = 0.75

-- Length --

SWEP.BarrelLength = 48
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-2.73, -2, 1.1),
     Ang = Angle(.25, 0.01, 0),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.HolsterPos = Vector(2, 0, -3)
SWEP.HolsterAng = Angle(-5.5, 20, -20)

SWEP.SprintPos = Vector(-0.5, -4, -3)
SWEP.SprintAng = Angle(3.5, 7, -20)

SWEP.ActivePos = Vector(-0.1, -0.5, 0.75)
SWEP.ActiveAng = Angle(0, 0, -0)

SWEP.CrouchPos = Vector(-4, -2, 0)
SWEP.CrouchAng = Angle(0, 0, -30)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(3, 0, -4.5)

-- Firing sounds --

local path2 = ")weapons/arccw_ud/m16/"
local path1 = ")weapons/arccw_ud/870/"
local path = ")weapons/arccw_ud/m1014/"
local common = ")/arccw_uc/common/"
SWEP.ShootSound = {
    path1 .. "fire-01.ogg",
    path1 .. "fire-02.ogg",
    path1 .. "fire-03.ogg",
    path1 .. "fire-04.ogg",
    path1 .. "fire-05.ogg",
    path1 .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path1 .. "fire-sup-01.ogg",
    path1 .. "fire-sup-02.ogg",
    path1 .. "fire-sup-03.ogg",
    path1 .. "fire-sup-04.ogg",
    path1 .. "fire-sup-05.ogg",
    path1 .. "fire-sup-06.ogg"
}
--[[SWEP.DistantShootSound = path .. "fire_dist.ogg"
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"]]
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/12ga/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-12ga-pasg-ext-01.ogg",
    tail .. "fire-dist-12ga-pasg-ext-02.ogg",
    tail .. "fire-dist-12ga-pasg-ext-03.ogg",
    tail .. "fire-dist-12ga-pasg-ext-04.ogg",
    tail .. "fire-dist-12ga-pasg-ext-05.ogg",
    tail .. "fire-dist-12ga-pasg-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-shotgun-01.ogg",
    common .. "fire-dist-int-shotgun-02.ogg",
    common .. "fire-dist-int-shotgun-03.ogg",
    common .. "fire-dist-int-shotgun-04.ogg",
    common .. "fire-dist-int-shotgun-05.ogg",
    common .. "fire-dist-int-shotgun-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

local shellin = {path .. "shell-insert-01.ogg", path .. "shell-insert-02.ogg", path .. "shell-insert-03.ogg"}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["idle_jammed"] = {
        Source = "idle_jammed",
    },
    ["ready"] = {
        Source = "equip",
        Time = 60 / 30,
        SoundTable = {
            {s = rottle, t = 0.35},
            {s = path .. "chback.ogg", t = 0.35},
            {s = path .. "chamber.ogg", t = 0.6},
            {s = rottle, t = 0.75},
        },
    },
    ["draw"] = {
        Source = "draw",
        Time = 30 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 30 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_jammed"] = {
        Source = "draw_jammed",
        Time = 30 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster"] = {
        Source = "holster",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_jammed"] = {
        Source = "holster_jammed",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire"] = {
        Source = "fire",
        Time = 16 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg", t = 0, v = 0.45}, -- Not temporary
            {s = path1 .. "eject.ogg", t = 0.01}, -- Not temporary
        },
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 18 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg", t = 0}, -- Not temporary
            {s = path1 .. "eject.ogg", t = 0.01}, -- Not temporary
        },
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 18 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Not temporary
            {s = path1 .. "eject.ogg", t = 0.01}, -- Not temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 20 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Not temporary
            {s = path1 .. "eject.ogg", t = 0.01}, -- Not temporary
        },
    },
    ["fire_jammed"] = {
        Source = "fire_jam",
        Time = 23 / 25,--30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg", t = 0}, -- Not temporary
            --{s = path1 .. "eject.ogg", t = 0}, -- Not temporary
        },
    },
    ["unjam"] = {
        Source = "jam_fix",
        Time = 60 / 30,
        ShellEjectAt = 0.8,
        LHIK = false,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path2 .. "grab.ogg", t = 0.1},
            {s = path .. "chback.ogg", t = 0.7},
            {s = path1 .. "eject.ogg", t = 0.8, v = 0.4},
            {s = path .. "chamber.ogg", t = 0.9},
            {s = rottle, t = 1.2},
        },
    },
    ["unjam_empty"] = {
        Source = "jam_fix_empty",
        Time = 60 / 30,
        ShellEjectAt = 1.1,
        LHIK = false,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path2 .. "grab.ogg", t = .4},
            {s = path .. "chback.ogg", t = 0.8},
            {s = path1 .. "eject.ogg", t = 1.1},
            {s = rottle, t = 1.2},
        },
    },
    ["sgreload_start"] = {
        Source = "sgreload_start",
        Time = 16 / 30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        LHIK = false,
        //LHIKIn = 0.2,
        //LHIKEaseIn = 0.2,
        //LHIKOut = 0,
    },
    ["sgreload_start_empty"] = {
        Source = "sgreload_start_empty",
        Time = 40 / 30,
        MinProgress = 1,
        LHIK = false,
        //LHIKIn = 0.2,
        //LHIKOut = 0,
        TPAnimStartTime = 0.5,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "breechload.ogg",  t = 0.25},
            {s = path .. "breechclose.ogg",  t = 0.9},
        },
        ForceEmpty = true,
    },
    ["sgreload_insert"] = {
        Source = "sgreload_insert",
        Time = 18 / 30,
        MinProgress = 0.24,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.3,
        LHIK = false,
        //LHIKIn = 0,
        //LHIKOut = 0,
        SoundTable = {
            {s = shellin, t = 0},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.05},
        },
    },
    ["sgreload_finish"] = {
        Source = "sgreload_finish",
        Time = 30 / 30,
        LHIK = false,
        //LHIKIn = 0,
        //LHIKEaseOut = 0.3,
        //LHIKOut = 0.6,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.8,
        SoundTable = {
            {s = common .. "shoulder.ogg",  t = 0.3},
        },
    },

    -- stock animla below

    ["idle_stock"] = {
        Source = "idle_stock",
    },
    ["idle_empty_stock"] = {
        Source = "idle_empty_stock",
    },
    ["idle_jammed_stock"] = {
        Source = "idle_jammed_stock",
    },
    ["draw_stock"] = {
        Source = "draw_stock",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_empty_stock"] = {
        Source = "draw_empty_stock",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_jammed_stock"] = {
        Source = "draw_jammed_stock",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster_stock"] = {
        Source = "holster_stock",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_empty_stock"] = {
        Source = "holster_empty_stock",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_jammed_stock"] = {
        Source = "holster_jammed_stock",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire_stock"] = {
        Source = "fire_stock",
        Time = 23 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg", t = 0}, -- Not temporary
            {s = path1 .. "eject.ogg", t = 0.01}, -- Not temporary
        },
    },
    ["fire_empty_stock"] = {
        Source = "fire_empty_stock",
        Time = 23 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Not temporary
            {s = path1 .. "eject.ogg", t = 0.01}, -- Not temporary
        },
    },
    ["fire_jammed_stock"] = {
        Source = "fire_jam_stock",
        Time = 23 / 25,--30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Not temporary
            --{s = path1 .. "eject.ogg", t = 0}, -- Not temporary
        },
    },
    ["unjam_stock"] = {
        Source = "jam_fix_stock",
        Time = 60 / 30,
        ShellEjectAt = 1.1,
        LHIK = false,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path2 .. "grab.ogg", t = .4},
            {s = path .. "chback.ogg", t = 0.8},
            {s = path1 .. "eject.ogg", t = 1.1},
            {s = path .. "breechclose.ogg", t = 0.9},
            {s = rottle, t = 1.2},
        },
    },
    ["unjam_empty_stock"] = {
        Source = "jam_fix_empty_stock",
        Time = 60 / 30,
        ShellEjectAt = 1.1,
        LHIK = false,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path2 .. "grab.ogg", t = .4},
            {s = path .. "chback.ogg", t = 0.8},
            {s = path1 .. "eject.ogg", t = 1.1},
            --{s = path .. "breechclose.ogg", t = 1.2},
            {s = rottle, t = 1.2},
        },
    },
    ["sgreload_start_stock"] = {
        Source = "sgreload_start_stock",
        Time = 16 / 30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        LHIK = false,
        //LHIKIn = 0.2,
        //LHIKEaseIn = 0.2,
        //LHIKOut = 0,
    },
    ["sgreload_start_empty_stock"] = {
        Source = "sgreload_start_empty_stock",
        Time = 40 / 30,
        MinProgress = 1,
        LHIK = false,
        //LHIKIn = 0.2,
        //LHIKOut = 0,
        TPAnimStartTime = 0.5,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "breechload.ogg",  t = 0.05},
            {s = path .. "breechclose.ogg",  t = 0.75},
        },
        ForceEmpty = true,
    },
    ["sgreload_finish_stock"] = {
        Source = "sgreload_finish_stock",
        Time = 22 / 30,
        LHIK = false,
        //LHIKIn = 0,
        //LHIKEaseOut = 0.3,
        //LHIKOut = 0.6,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.8,
        SoundTable = {
            {s = common .. "shoulder.ogg",  t = 0.4},
        },
    },
}

SWEP.BulletBones = {
    --[1] = "1014_shell1",
}

-- Bodygroups --

SWEP.AttachmentElements = {
    ["ud_autoshotgun_barrel_short"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.40, 19.6),
            }
        },
    },
    ["ud_autoshotgun_barrel_sawnoff"] = {
        VMBodygroups = {{ind = 1, bg = 2}},
        AttPosMods = {
            [3] = {
                vpos = Vector(-0.03, -0.75, 22.2),
            }
        },
    },
    ["ud_autoshotgun_barrel_sport"] = {
        VMBodygroups = {{ind = 1, bg = 2}},
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.40, 26.3),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.73, -2, 1.01),
            Ang = Angle(0.95, 0.01, 0),
            Magnification = 1.1
        },
    },
    ["ud_autoshotgun_tube_short"] = {
        VMBodygroups = {
            {ind = 2, bg = 1},
            {ind = 4, bg = 1},
        },
    },
    ["ud_autoshotgun_tube_long"] = {
        VMBodygroups = {{ind = 2, bg = 0}},
    },

    ["ud_autoshotgun_stock_in"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
        VMPoseParams = {["grip"] = 0}
    },
    ["ud_autoshotgun_stock_buffer"] = {
        VMBodygroups = {{ind = 3, bg = 2}},
        VMPoseParams = {["grip"] = 0}
    },
    ["ud_autoshotgun_stock_sport"] = {
        VMBodygroups = {
            {ind = 3, bg = 3},
            {ind = 6, bg = 1},
        },
        VMPoseParams = {["grip"] = 1}
    },
    ["ud_autoshotgun_stock_gripstock"] = {
        VMBodygroups = {
            {ind = 3, bg = 5},
        },
        VMPoseParams = {["grip"] = 0}
    },

    ["ud_m1014_handguard_sport"] = {
        VMBodygroups = {{ind = 5, bg = 2}},
    },
    ["ud_autoshotgun_rail_fg"] = {
        VMBodygroups = {{ind = 5, bg = 1}},
    },
}

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp", "optic", "optic_sniper"},
        Bone = "1014_parent",
        Offset = {
            vpos = Vector(-0.025, -1.35, 2.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "18.5\" Factory Barrel", --16\" M4 Super 90 SBS Barrel
        DefaultAttIcon = Material("entities/att/acwatt_ud_m1014_barrel.png", "smooth mips"),
        Slot = "ud_1014_barrel",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"choke", "muzzle_shotgun"},
        Bone = "1014_parent",
        Offset = {
            vpos = Vector(0, -0.40, 24.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"nomuzzle"}
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip","ud_1014_handguard"},
        Bone = "1014_parent",
        Offset = {
            vpos = Vector(0, 1.7, 9),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_autoshotgun_rail_fg"},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "1014_parent",
        Offset = {
            vpos = Vector(0.8, 0.8, 13),
            vang = Angle(90, 0, 0),
        },
        InstalledEles = {"ud_autoshotgun_rail_fg"},
    },
    {
        PrintName = "Stock",
        Slot = {"ud_1014_stock"},
        Bone = "1014_parent",
        Offset = {
            vpos = Vector(-0.02, 1.9, -2.07),
            vang = Angle(90, 0, -90),
        },
        DefaultAttName = "Extended Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m1014_stock.png", "smooth mips"),
    },
    {
        PrintName = "Tube Type",
        Slot = {"ud_1014_tube"},
        DefaultAttName = "4 Shell Tube",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m1014_tube.png", "smooth mips"),
        DefaultEles = {"ud_autoshotgun_tube_short"},
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"BUCK\" #00 Buckshot",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_shotgun_generic.png", "mips smooth"),
        Slot = "ud_ammo_shotgun",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "1014_parent",
        Offset = {
            vpos = Vector(0.7, -0.5, 4),
            vang = Angle(90, 0, -90),
        },
    },
}

local lookup_barrel = {
    default = 1,
    ud_m1014_barrel_short = 0,
}

local lookup_tube = {
    default = 0,
    ud_m1014_tube_ext = 1,
}

SWEP.Hook_ExtraFlags = function(wep, data)

    local barrel = wep.Attachments[2].Installed and lookup_barrel[wep.Attachments[2].Installed] or lookup_barrel["default"]
    local tube = wep.Attachments[7].Installed and lookup_tube[wep.Attachments[7].Installed] or lookup_tube["default"]

    if barrel < tube then
        table.insert(data, "nomuzzleblocking")
    end
end
--lua/weapons/arccw_ud_m16.lua:
return gluapack()()
--lua/weapons/arccw_ud_miniuzi.lua:
return gluapack()()
--lua/weapons/arccw_ud_870.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_shotgun"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/12g.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.UC_ShellColor = Color(0.7*255, 0.2*255, 0.2*255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3

-- Fake name --

SWEP.PrintName = "Express-12"

-- True name --

SWEP.TrueName = "Remington 870"

-- Trivia --

SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = "Classic pump-action shotgun, renowned for its high quality parts and assembly. A simple firearm with a simple purpose. Marketed primarily to civilians for use in hunting game and self-defense, but it has found popularity among police departments for a relatively innocuous appearance and ability to accept custom loaded less-lethal shells."
SWEP.Trivia_Manufacturer = "Mauer Armaments"
SWEP.Trivia_Calibre = "12 Gauge"
SWEP.Trivia_Mechanism = "Pump Action"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1950

-- Weapon slot --

SWEP.Slot = 3

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Remington Arms"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_870.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_870.mdl"
SWEP.ViewModelFOV = 60
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN
SWEP.DefaultBodygroups = "000000000"

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-5.5, 5, -5.5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1 - ( 0.35 * 0.5 )
}

-- Damage parameters --

SWEP.Damage = ArcCW.UC.StdDmg["12g_p"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["12g_p"].min
SWEP.Penetration = ArcCW.UC.StdDmg["12g_p"].pen
SWEP.Num = ArcCW.UC.StdDmg["12g_p"].num

SWEP.Range = 50
SWEP.RangeMin = 5
SWEP.DamageType = DMG_BUCKSHOT
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 200

SWEP.HullSize = 0.5

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults_Shotgun

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 6
SWEP.ExtendedClipSize = 8
SWEP.ReducedClipSize = 6

-- Recoil --

SWEP.Recoil = 3.1
SWEP.RecoilSide = 1

SWEP.RecoilRise = 0.24
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 60
SWEP.Firemodes = {
    {
        PrintName = "fcg.pump",
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NoLastCycle = true
SWEP.ManualAction = true
SWEP.ShotgunReload = true

SWEP.ShootVol = 160
SWEP.ShootPitch = 100

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 210

-- Accuracy --

SWEP.AccuracyMOA = 30
SWEP.HipDispersion = 400
SWEP.MoveDispersion = 100
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "buckshot"

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.4
SWEP.ShootSpeedMult = 0.75

-- Length --

SWEP.BarrelLength = 32
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-3.66, -3, 2.2),
     Ang = Angle(-0.75, 0, 2.8),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.HolsterPos = Vector(2, 0, -2)
SWEP.HolsterAng = Angle(-5.5, 20, -20)

SWEP.SprintPos = Vector(-0.5, -4, -2)
SWEP.SprintAng = Angle(3.5, 7, -20)

SWEP.ActivePos = Vector(-0.75, -2, 1)
SWEP.ActiveAng = Angle(0, 0, -3)

SWEP.CrouchPos = Vector(-3.8, -2, 0)
SWEP.CrouchAng = Angle(0, 0, -30)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(3, 0, -4)



SWEP.Malfunction = true
SWEP.MalfunctionTakeRound = true
SWEP.MalfunctionMean = 500
SWEP.MalfunctionVariance = 0.99
-- Firing sounds --

local path = ")weapons/arccw_ud/870/"
local common = ")/arccw_uc/common/"
SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
--[[SWEP.DistantShootSound = path .. "fire_dist.ogg"
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"]]
SWEP.ShootDrySound = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}

local tail = ")/arccw_uc/common/12ga/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-12ga-pasg-ext-01.ogg",
    tail .. "fire-dist-12ga-pasg-ext-02.ogg",
    tail .. "fire-dist-12ga-pasg-ext-03.ogg",
    tail .. "fire-dist-12ga-pasg-ext-04.ogg",
    tail .. "fire-dist-12ga-pasg-ext-05.ogg",
    tail .. "fire-dist-12ga-pasg-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-shotgun-01.ogg",
    common .. "fire-dist-int-shotgun-02.ogg",
    common .. "fire-dist-int-shotgun-03.ogg",
    common .. "fire-dist-int-shotgun-04.ogg",
    common .. "fire-dist-int-shotgun-05.ogg",
    common .. "fire-dist-int-shotgun-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.Hook_Think = ArcCW.UC.ADSReload

local shellin = {path .. "shell-insert-01.ogg", path .. "shell-insert-02.ogg", path .. "shell-insert-03.ogg"}

SWEP.Animations = {
    ["ready"] = {
        Source = "sgreload_finish_empty",
        Time = 37 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 1.2,
        LHIKOut = 1.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0.2},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.5},
            {s = path .. "rack_1.ogg",  t = 0.4},
            {s = path .. "rack_2.ogg",  t = 0.6},
            {s = common .. "shoulder.ogg",  t = 0.9},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle",
    },
    ["draw"] = {
        Source = "draw",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster"] = {
        Source = "holster",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire"] = {
        Source = "fire",
        --Time = 23 / 30,
        MinProgress = 8 / 30,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        --Time = 23 / 30,
        MinProgress = 8 / 30,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["cycle"] = {
        Source = "cycle",
        --Time = 20 / 30,
        ShellEjectAt = 0.1,
        MinProgress = 0.26,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "rack_1.ogg",  t = 0},
            {s = path .. "eject.ogg",  t = 0.1},
            {s = path .. "rack_2.ogg",  t = 0.11},
        },
    },

    ["cycle_jammed"] = {
        Source = "jamcycle",
        --Time = 20 / 30,
        ShellEjectAt = 0.1,
        MinProgress = 0.26,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "rack_1.ogg",  t = 0},
            {s = path .. "eject.ogg",  t = 0.1},
            {s = path .. "rack_2.ogg",  t = 0.11},
        },
    },

    ["fix"] = {
        Source = "fix",
        Time = 50 / 30,
        ShellEjectAt = 0.7, -- should make the shell eject offscreen cuz the anim already has it
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.5},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1},
            {s = path .. "rack_1.ogg",  t = 0.6},
            {s = path .. "eject.ogg",  t = 0.7},
            {s = path .. "rack_2.ogg",  t = 0.9},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.7},
        }
    },
    ["sgreload_start"] = {
        Source = "sgreload_start",
        Time = 16 / 30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = common .. "shoulder.ogg",  t = 0.1},
        },
    },
    ["sgreload_insert"] = {
        Source = "sgreload_insert",
        Time = 18 / 30,
        MinProgress = 0.24,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.3,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
        SoundTable = {
            {s = shellin, t = 0},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
        },
    },
    ["sgreload_finish"] = {
        Source = "sgreload_finish",
        Time = 20 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.4,
        TPAnimStartTime = 0.8,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = common .. "shoulder.ogg",  t = 0.27},
        },
    },
    ["sgreload_finish_empty"] = {
        Source = "sgreload_finish_empty",
        Time = 37 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.6,
        LHIKOut = 0.8,
        TPAnimStartTime = 0.5,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        ShellEjectAt = 0.5,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.5},
            {s = path .. "rack_1.ogg",  t = 0.4},
            {s = path .. "eject.ogg",  t = 0.5},
            {s = path .. "rack_2.ogg",  t = 0.525},
            {s = common .. "shoulder.ogg",  t = 0.9},
        },
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    if !IsValid(vm) then return end
    -- if wep.Attachments[1].Installed then
    --     vm:SetBodygroup(8, 2)
    -- elseif wep.Attachments[2].Installed == "ud_870_barrel_long" then
    --     vm:SetBodygroup(8, 1)
    -- else
    --     vm:SetBodygroup(8, 0)
    -- end

    -- 8rnd tube and either barrel should remove the clamp
    if vm:GetBodygroup(7) == 1 and vm:GetBodygroup(1) != 0 then
        vm:SetBodygroup(7, 2)
    end
end


SWEP.BulletBones = {
    [0] = "870_shell1",
}

SWEP.DefaultSkin = 1

-- Bodygroups --

SWEP.AttachmentElements = {
    ["ud_870_optic_ringsight"] = {
        VMBodygroups = {
            {ind = 8, bg = 1},
        },
        Override_IronSightStruct = {
            Pos = Vector(-3.665, -2.75, 2.1),
            Ang = Angle(-0.6, 0, 1),
            Magnification = 1.1,
            SwitchToSound = "",
        },
    },
    ["optic_rail"] = {
        VMBodygroups = {
            {ind = 8, bg = 2},
        }
    },
    ["ud_shotgun_rail_fg"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
    },
    ["ud_870_slide_moe"] = {
        VMBodygroups = {{ind = 6, bg = 1}},
    },
    ["ud_870_slide_long"] = {
        VMBodygroups = {{ind = 6, bg = 2}},
    },
    ["ud_870_slide_poly"] = {
        VMBodygroups = {{ind = 6, bg = 3}},
    },
    ["ud_shotgun_rail_fg"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
    },
    ["ud_870_barrel_long"] = {
        AttPosMods = {
            [3] = {
                vpos = Vector(-0.03, -0.65, 39.5),
            }
        },
        VMBodygroups = {
            {ind = 1, bg = 1},
        },
    },
    ["ud_870_barrel_sawnoff"] = {
        VMBodygroups = {
        {ind = 1, bg = 2},
        {ind = 7, bg = 2}
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(-0.03, -0.9, 19),
            }
        },
    },
    ["ud_870_tube_reduced"] = {
        VMBodygroups = {
            {ind = 2, bg = 2},
            {ind = 7, bg = 2}
        },
    },
    ["ud_870_tube_ext"] = {
        VMBodygroups = {
            {ind = 2, bg = 1},
            {ind = 7, bg = 1}
        },
    },
    ["ud_870_stock_poly"] = {
        VMBodygroups = {{ind = 4, bg = 1}},
    },
    ["ud_870_stock_sawnoff"] = {
        VMBodygroups = {{ind = 4, bg = 2}},
    },
    ["ud_870_stock_raptor"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
    },

    ["ud_870_skin_dirty"] = {
        VMSkin = 0
    },
    ["ud_870_skin_custom"] = {
        VMSkin = 3
    },
}

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp","optic","optic_sniper","ud_870_optic"},
        Bone = "870_parent",
        Offset = {
            vpos = Vector(0, -1.75, -2),
            vang = Angle(90, 0, -90),
        },
        VMScale = Vector(1, 1, 1),
        CorrectiveAng = Angle(1.8, 0.1, 0),
        InstalledEles = {"optic_rail"}
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "16\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_870_barrel.png", "smooth mips"),
        Slot = "ud_870_barrel",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"choke", "muzzle_shotgun"},
        Bone = "870_parent",
        Offset = {
            vpos = Vector(-0.03, -0.75, 26.3),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Forend",
        DefaultAttName = "Factory Forend",
        DefaultAttIcon = Material("entities/att/acwatt_ud_870_slide.png", "smooth mips"),
        Slot = {"ud_870_slide"},
        Bone = "870_slide",
        Offset = {
            vpos = Vector(3, -4.4, -29),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "870_slide",
        Offset = {
            vpos = Vector(0, 1.1, 0),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_shotgun_rail_fg"}
    },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "870_slide",
        Offset = {
            vpos = Vector(0, 1, 4.25),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Stock",
        DefaultAttName = "Wooden Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_870_stock.png", "smooth mips"),
        Slot = {"ud_870_stock"},
    },
    {
        PrintName = "Tube Type",
        Slot = {"ud_870_tube"},
        DefaultAttName = "6 Shell Tube",
        DefaultAttIcon = Material("entities/att/acwatt_ud_870_tube.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"BUCK\" #00 Buckshot",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_shotgun_generic.png", "mips smooth"),
        Slot = "ud_ammo_shotgun",
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "870_parent",
        Offset = {
            vpos = Vector(0.7, 0, 5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Skin",
        Slot = "ud_870_skin",
        DefaultAttName = "Polished Steel",
        FreeSlot = true
    }
}

local lookup_barrel = {
    default = 1,
    ud_870_barrel_long = 2,
    ud_870_barrel_sawnoff = 0,
}

local lookup_tube = {
    default = 1,
    ud_870_tube_ext = 2,
    ud_870_tube_reduced = 0,
}

SWEP.Hook_ExtraFlags = function(wep, data)

    local barrel = wep.Attachments[2].Installed and lookup_barrel[wep.Attachments[2].Installed] or lookup_barrel["default"]
    local tube = wep.Attachments[8].Installed and lookup_tube[wep.Attachments[8].Installed] or lookup_tube["default"]

    if barrel < tube then
        table.insert(data, "nomuzzleblocking")
    end
end
--lua/weapons/arccw_ur_awm.lua:
return gluapack()()
--lua/weapons/arccw_ur_aw.lua:
return gluapack()()
--lua/weapons/arccw_ur_aws.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_aw.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets DMRs"
end

SWEP.PrintName = "Apex Spectre"
SWEP.TrueName = "AWS"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

--SWEP.Attachments[1].Installed = "uc_optic_trijicon_tars"
SWEP.Attachments[2].Installed = "ur_aw_barrel_sd"
SWEP.Attachments[10].Installed = "uc_powder_subsonic"
SWEP.Attachments[14].Installed = "ur_aw_skin_tan"

SWEP.Hook_NameChange = function(wep,name)
    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_aw_barrel_", "")
    local cal = string.Replace(atts[4].Installed or "default", "ur_aw_cal_", "")
    local stock = string.Replace(atts[8].Installed or "default", "ur_aw_stock_", "")

    if GetConVar("arccw_truenames"):GetBool() then
        if cal ~= "default" then
            return "AWM"
        elseif barr == "sd" then
            return "AWS"
        elseif stock == "at" then
            return "AT"
        else
            return "AWP"
        end
    else
        if cal == "338" then
            return "Apex Magnum"
        elseif barr == "sd" then
            return "Apex Spectre"
        elseif stock == "at" then
            return "Apex Tactical"
        else
            return "Apex Precision"
        end
    end
end
--lua/weapons/arccw_ur_coltofficer.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_m1911.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Pistols"
end

SWEP.PrintName = "AMAD"
SWEP.TrueName = "Colt Officer's ACP"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ur_1911_slide_compact"
SWEP.Attachments[8].Installed = "ur_1911_grip_snake"
SWEP.Attachments[14].Installed = "ur_1911_skin_silver"
--lua/weapons/arccw_ur_dbsawn.lua:
return gluapack()()
--lua/weapons/arccw_ur_deagle.lua:
return gluapack()()
--lua/weapons/arccw_ur_g3.lua:
return gluapack()()
--lua/weapons/arccw_ur_m1911.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_pistol"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
SWEP.ShellScale = 1
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_9mm"
SWEP.ShellPitch = 90

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 5
SWEP.TracerNum = 0 -- subsonic by default
SWEP.TracerWidth = 1
SWEP.ShootPitch = 100

-- Fake name --

SWEP.PrintName = "AMAS" -- American Automatic Sidearm

-- True name --

SWEP.TrueName = "M1911"

-- Trivia --

SWEP.Trivia_Class = "Pistol"
SWEP.Trivia_Desc = [[Venerable semi-automatic pistol issued by the US Army throughout both World Wars and then some. Even after more than a century of service, it is rarely considered an obsolete design, and its short recoil mechanism has been inherited by most modern pistols.

Easy to handle and packing respectable stopping power, the antiquated single-stack magazine is its only notable downside.]]
SWEP.Trivia_Manufacturer = "Stoner's Legacy Ltd."
SWEP.Trivia_Calibre = ".45 ACP"
SWEP.Trivia_Mechanism = "Short Recoil"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1911

-- Weapon slot --

SWEP.Slot = 1

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Colt's Manufacturing Company"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ur_m1911.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_m1911.mdl"
SWEP.ViewModelFOV = 66
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER

-- Damage parameters --

SWEP.Damage = 45 -- 3 shot short range kill (2 shot chest point-blank)
SWEP.DamageMin = 15 -- 7 shot long range kill
SWEP.RangeMin = 10
SWEP.Range = 80 -- 3 shot until ~40m
SWEP.Penetration = 9
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil

SWEP.PhysBulletMuzzleVelocity = 253

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Jamming --

--SWEP.Malfunction = true
SWEP.MalfunctionJam = true
--SWEP.MalfunctionMean = 21
SWEP.MalfunctionPostFire = false
SWEP.MalfunctionTakeRound = true

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 7

-- Recoil --

SWEP.Recoil = 1.25
SWEP.RecoilSide = 0.75

SWEP.RecoilRise = 0.25
SWEP.VisualRecoilMult = 1.0
SWEP.MaxRecoilBlowback = .5
SWEP.MaxRecoilPunch = .8

SWEP.Sway = 1

-- Firerate / Firemodes --

SWEP.Delay = 60 / 400
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_pistol"
SWEP.NPCWeight = 70

-- Accuracy --

SWEP.AccuracyMOA = 5
SWEP.HipDispersion = 400
SWEP.MoveDispersion = 150
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "pistol"
SWEP.MagID = "m1911"

-- Speed multipliers --

SWEP.SpeedMult = 0.97
SWEP.SightedSpeedMult = 0.875
SWEP.SightTime = 0.25
SWEP.ShootSpeedMult = 1

-- Length --

SWEP.BarrelLength = 8
SWEP.ExtraSightDist = 10

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.3, 3, 1.6)
SWEP.HolsterAng = Angle(-14, 0, -0.5)

SWEP.SprintPos = Vector(0.3, 3, 1)
SWEP.SprintAng = Angle(-5, 15, -20)

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "pistol"
SWEP.HoldtypeSights = "revolver"

SWEP.IronSightStruct = {
     Pos = Vector(-2.33, 10, 1.5),
     Ang = Angle(0.2, 0.02, 5.5),
     Magnification = 1,
     SwitchToSound = "",
}

SWEP.ActivePos = Vector(0.3, 3, 1.3)
SWEP.ActiveAng = Angle(0, 0, -0.5)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, 0, 0)
SWEP.CrouchAng = Angle(0, 0, -8)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-9, 4, -4.25),
    ang        =    Angle(-6, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
}

-- Weapon sounds --

local path = ")weapons/arccw_ur/1911/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local rutle = {common .. "movement-pistol-01.ogg",common .. "movement-pistol-02.ogg",common .. "movement-pistol-03.ogg",common .. "movement-pistol-04.ogg"}

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}

SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/45acp/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-45acp-pistol-ext-01.ogg",
    tail .. "fire-dist-45acp-pistol-ext-02.ogg",
    tail .. "fire-dist-45acp-pistol-ext-03.ogg",
    tail .. "fire-dist-45acp-pistol-ext-04.ogg",
    tail .. "fire-dist-45acp-pistol-ext-05.ogg",
    tail .. "fire-dist-45acp-pistol-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-pistol-01.ogg",
    common .. "fire-dist-int-pistol-02.ogg",
    common .. "fire-dist-int-pistol-03.ogg",
    common .. "fire-dist-int-pistol-04.ogg",
    common .. "fire-dist-int-pistol-05.ogg",
    common .. "fire-dist-int-pistol-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --
SWEP.BulletBones = {
    [1] = "mag_round1",
    [2] = "mag_round2",
    [3] = "mag_round3",
    [4] = "mag_round4",
    [5] = "mag_round5",
    [6] = "mag_round6",
    [7] = "mag_round7"
}
SWEP.DefaultBodygroups = "000000000"

SWEP.AttachmentElements = {
    ["ur_1911_slide_compact"] = {
        VMBodygroups = {
            {ind = 0, bg = 1},
            {ind = 1, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -3.58, .22),
                vang = Angle(0, 90, 0),
            }
        },
        NameChange = "AMAD",
        TrueNameChange = "Colt Officer's ACP",
    },

    ["ur_1911_slide_compact_custom"] = {
        VMBodygroups = {
            {ind = 0, bg = 1},
            {ind = 1, bg = 5}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -3.58, .22),
                vang = Angle(0, 90, 0),
            }
        },
        NameChange = "AMAD",
        TrueNameChange = "Colt Officer's ACP",
    },

    ["ur_1911_slide_custom"] = {
        VMBodygroups = {
            {ind = 1, bg = 4}
        },
    },

    ["ur_1911_slide_m45"] = {
        VMBodygroups = {
            {ind = 1, bg = 2},
            {ind = 4, bg = 1},
            {ind = 5, bg = 1},
        },
        --VMSkin = 1,
        NameChange = "AMASIN",
        TrueNameChange = "M45",
        Override_IronSightStruct = {
            Pos = Vector(-2.3, 10, 1.4),
            Ang = Angle(0.275, 0.07, 5.5),
        },
    },

    ["ur_1911_slide_m45_custom"] = {
        VMBodygroups = {
            {ind = 1, bg = 3},
            {ind = 4, bg = 1},
            {ind = 5, bg = 1},
        },
        --VMSkin = 1,
        NameChange = "AMASIN",
        TrueNameChange = "M45",
        Override_IronSightStruct = {
            Pos = Vector(-2.3, 10, 1.4),
            Ang = Angle(0.275, 0.07, 5.5),
        },
    },

    ["ur_1911_mag_ext"] = {
        VMBodygroups = {
            {ind = 3, bg = 1}
        }
    },

    ["ur_1911_grip_snake"] = {
        VMBodygroups = {
            {ind = 6, bg = 1}
        }
    },
    ["ur_1911_grip_pachmayr"] = {
        VMBodygroups = {
            {ind = 6, bg = 2}
        }
    },

    ["ur_1911_skin_silver"] = {
        VMSkin = 1
    },
    ["ur_1911_skin_tan"] = {
        VMSkin = 2
    },
    ["ur_1911_skin_custom"] = {
        VMSkin = 3
    },

    ["ur_1911_cal_9mm"] = {
        NameChange = "AMAS-9",
        TrueNameChange = "SR1911",
    },
    ["ur_1911_cal_10auto"] = {
        NameChange = "AMAS Elite",
        TrueNameChange = "Delta Elite",
    },

    ["optic_rail"] = {
        VMBodygroups = {
            {ind = 7, bg = 1}
        }
    },
    ["tac_rail"] = {
        VMBodygroups = {
            {ind = 8, bg = 1}
        }
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    -- local vm = data.vm
    -- if !IsValid(vm) then return end

    -- local att_skin = wep.Attachments[14].Installed
    -- local att_slide = wep.Attachments[2].Installed

    -- if att_slide == "ur_1911_slide_m45" and att_skin == "ur_1911_skin_custom" then
    --     vm:SetBodygroup(1, 3)
    -- end
end

-- SWEP.Hook_NameChange = function(wep,name)
--     if GetConVar("arccw_truenames"):GetBool() then
--         local atts = wep.Attachments
--         local cal = string.Replace(atts[3].Installed or "45acp", "ur_1911_cal_", "")

--         if cal == "10auto" then return GetConVar("arccw_truenames"):GetBool() and "Delta Elite" or ""
--         elseif cal == "9mm" then return GetConVar("arccw_truenames"):GetBool() and "SR1911" or ""
--         end

--         return "M1911"
--     else
--         return "AMAS"
--     end
-- end

-- Animations --

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 10 / 30,
    },
    ["idle_empty"] = {
        Source = "idle_empty",
        Time = 10 / 30,
    },
    ["ready"] = {
        Source = "fix",
        Time = 1.6,
        MinProgress = 1.2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        ShellEjectAt = false,
        ProcDraw = true,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            {s = path .. "draw.ogg", t = 0.05},
            { s = path .. "mech.ogg",t = 28 / 60}, -- Temporary
            { s = path .. "slidedrop.ogg",t = 35 / 60},
        },
    },
    ["draw"] = {
        Source = "draw",
        Time = .75,
        MinProgress = .4,
        --ProcDraw = true,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "draw.ogg", t = 0.05}, -- Not Temporary
            {s = rutle, t = 0.1},
            --{s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = .75,
        MinProgress = .4,
        --ProcDraw = true,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "draw.ogg", t = 0.05}, -- Not Temporary
            {s = rutle, t = 0.1},
            --{s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["draw_jam"] = {
        Source = "draw_jam",
        Time = .75,
        MinProgress = .4,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "draw.ogg", t = 0.05}, -- Not Temporary
            {s = rutle, t = 0.1},
            --{s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["holster"] = {
        Source = "holster",
        Time = .75,
        SoundTable = {
            {s = rutle, t = 0.05},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = .75,
        SoundTable = {
            {s = rutle, t = 0.05},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },
    ["holster_jam"] = {
        Source = "holster_jam",
        Time = 18 / 30,
        SoundTable = {
            {s = rutle, t = 0.05},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },

    ["fire"] = {
        Source = "fire",
        Time = 30 / 30,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 30 / 30,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 24 / 30,
        ShellEjectAt = 0,
        SoundTable = {
            { s = path .. "mech_last.ogg", t = 0 },
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 24 / 30,
        ShellEjectAt = 0,
        SoundTable = {
            { s = path .. "mech_last.ogg", t = 0 },
        },
    },
    ["fire_jammed"] = {
        Source = "fire_jam",
        Time = 30 / 30,
        MinProgress = 0.5,
        ShellEjectAt = false,
        SoundTable = {
            --{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }
        },
    },

    -- 7-R Reloads --

    ["reload_10"] = {
        Source = "reload_ext",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.3525,
        Time = 65 / 30,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.62,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = common .. "magpouch_pull_small.ogg", t = 0 / 60 },
            { s = common .. "magrelease.ogg", t = 17 / 60 },
            { s = path .. "magout.ogg", t = 26 / 60 },
            { s = rottle, t = 10 / 60 },
            { s = rottle, t = 55 / 60 },
            { s = common ..  "magpouch_replace_small.ogg", t = 80 / 60 },
            { s = path .. "magin.ogg", t = 50 / 60 },
        },
    },
    ["reload_empty_10"] = {
        Source = "reload_empty_ext",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.75,
        Time = 75 / 30,
        LastClip1OutTime = 0.76,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.55,
        LHIKOut = 0.7,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = common .. "magrelease.ogg", t = 7 / 60 },
            { s = path .. "magout.ogg", t = 16 / 60 },
            { s = rottle, t = 10 / 60 },
            { s = common .. "magpouch_pull_small.ogg", t = 29 / 60 },
            { s = common .. "pistol_magdrop.ogg", t = 40 / 60 },
            { s = rottle, t = 55 / 60 },
            { s = path .. "magin.ogg", t = 64 / 60 },
            { s = rottle, t = 90 / 60 },
            { s = path .. "slidedrop.ogg", t = 94 / 60 },
        },
    },

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.3525,
        Time = 65 / 30,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.62,
        SoundTable = {
            { s = rottle,                                   t = 0 / 60 },
            { s = common .. "magpouch_pull_small.ogg",      t = 5 / 60 },
            { s = rottle,                                   t = 10 / 60 },
            { s = common .. "magrelease.ogg",               t = 17 / 60 },
            { s = path .. "magout.ogg",                     t = 26 / 60 },
            { s = path .. "magin.ogg",                      t = 45 / 60 },
            { s = rottle,                                   t = 55 / 60 },
            { s = common ..  "magpouch_replace_small.ogg",  t = 80 / 60 },
            { s = path .. "grab.ogg",                       t = 110 / 60 },
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.75,
        Time = 75 / 30,
        LastClip1OutTime = 0.76,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.55,
        LHIKOut = 0.7,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = common .. "magrelease.ogg", t = 7 / 60 },
            { s = path .. "magout.ogg", t = 16 / 60 },
            { s = rottle, t = 10 / 60 },
            { s = common .. "magpouch_pull_small.ogg", t = 29 / 60 },
            { s = common .. "pistol_magdrop.ogg", t = 40 / 60 },
            { s = rottle, t = 55 / 60 },
            { s = path .. "magin.ogg", t = 64 / 60 },
            { s = rottle, t = 90 / 60 },
            { s = path .. "slidedrop.ogg", t = 94 / 60 },
            { s = path .. "grab.ogg", t = 125 / 60 },
        },
    },

    -- Jam Animations --

    ["fix"] = {
        Source = "fix",
        --Time = 40 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        ShellEjectAt = 30 / 60,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = path .. "mech.ogg",t = 28 / 60}, -- Temporary
            { s = path .. "slidedrop.ogg",t = 35 / 60},
        },
    },

    ["fix_empty"] = {
        Source = "fix_empty",
        --Time = 40 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        ShellEjectAt = 30 / 60,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = path .. "mech.ogg",t = 28 / 60},
        },
    },

    ["idle_jammed"] = {
        Source = "idle_jam",
        -- time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
       -- SoundTable = {
        -- },
    },

    -- -- Inspecc --

    ["enter_inspect"] = {
        Source = "enter_inspect",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-pistol-04.ogg", t = 0},
        },
    },
    ["idle_inspect"] = {
        Source = "idle_inspect",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect"] = {
        Source = "exit_inspect",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            {s = rottle, t = 0.05},
            {s = common .. "movement-pistol-03.ogg", t = 0.1},
            {s = common .. "movement-pistol-01.ogg", t = 1},
            {s = rottle, t = 1},
        },
    },

    ["enter_inspect_empty"] = {
        Source = "enter_inspect_empty",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-pistol-04.ogg", t = 0},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "idle_inspect_empty",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty"] = {
        Source = "exit_inspect_empty",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            {s = rottle, t = 0.05},
            {s = common .. "movement-pistol-03.ogg", t = 0.1},
            {s = common .. "movement-pistol-01.ogg", t = 1},
            {s = rottle, t = 1},
        },
    },
    ["enter_inspect_jammed"] = {
        Source = "enter_inspect_jam",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-pistol-04.ogg", t = 0},
        },
    },
    ["idle_inspect_jammed"] = {
        Source = "idle_inspect_jam",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_jammed"] = {
        Source = "exit_inspect_jam",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            {s = rottle, t = 0.05},
            {s = common .. "movement-pistol-03.ogg", t = 0.1},
            {s = common .. "movement-pistol-01.ogg", t = 1},
            {s = rottle, t = 1},
        },
    },
}

-- ADS animation blending, thanks fesiug -- 

SWEP.Hook_Think = ArcCW.UC.ADSReload


-- Attachments --

SWEP.Attachments = {
    {
        PrintName = "Optic",
        Slot = {"optic_lp"},
        DefaultAttName = "Iron Sights",
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(-0.01, -2.3, 1.6),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"optic_rail"},
    },
    {
        PrintName = "Slide",
        Slot = {"ur_m1911_slide"},
        DefaultAttIcon = Material("entities/att/ur_1911/slide_std.png","mips smooth"),
        DefaultAttName = "5\" Government Slide",
    },
    {
        PrintName = "Caliber",
        Slot = {"ur_m1911_caliber"},
        DefaultAttIcon = Material("entities/att/uc_bullets/45acp.png","mips smooth"),
        DefaultAttName = ".45 ACP",
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(3.07, -3.8, -27),
            vang = Angle(90, 0, -90),
        },
        DefaultFlags = {"cal_subsonic"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "vm_barrel",
        Offset = {
            vpos = Vector(0.02, -4.4, 0.12),
            vang = Angle(0, 90, 0),
        },
        InstalledEles = {"nofh"},
        ExcludeFlags = {"barrel_annihilator"},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(0, 0, 4),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"tac_rail"},
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_m1911_mag"},
        DefaultAttIcon = Material("entities/att/ur_1911/mag7.png","mips smooth"),
        DefaultAttName = "7-Round Mag",
    },
    {
        PrintName = "Stock",
        Slot = {"uc_stock", "go_stock_pistol_bt"},
        VMScale = Vector(1, 1, 1),
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(0, 3, -3),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Grip",
        DefaultAttName = "Factory Grip",
        DefaultAttIcon = Material("entities/att/ur_1911/grip.png","mips smooth"),
        Slot = "ur_m1911_grip"
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(0.35, -0.5, 3),
            vang = Angle(90, 0, -90),
        },
        VMScale = Vector(.75,.75,.75),
    },
    {
        PrintName = "Finish",
        Slot = {"ur_m1911_skin"},
        DefaultAttName = "Grey",
        DefaultAttIcon = Material("entities/att/ur_1911/skin.png","mips smooth"),
        FreeSlot = true,
    },
}

--lua/weapons/arccw_ur_mp5.lua:
return gluapack()()
--lua/weapons/arccw_ur_mp5k.lua:
return gluapack()()
--lua/weapons/arccw_ur_mp5.lua:
return gluapack()()
--lua/weapons/arccw_ur_mp5.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Effects --

SWEP.MuzzleEffect = "muzzleflash_mp5"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
SWEP.ShellScale = 1
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_9mm"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.PistolShellSoundsTable

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
-- SWEP.CamAttachment = 3 ---------------------------------------------------------------------------
-- SWEP.TracerNum = 1
-- SWEP.TracerCol = Color(25, 255, 25)
-- SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "PK5-4"

-- True name --

SWEP.TrueName = "MP5A4"

-- Trivia --

SWEP.Trivia_Class = "Submachine Gun"
SWEP.Trivia_Desc = [[Versatile submachine gun known for its use by high profile police units around the world, most famously by the British SAS during the Iranian embassy siege. Its reliable closed-bolt design and craftsmanship allowed it to remain relevant among new generations of submachine guns.

If accurate, sophisticated close-combat performance is what you're looking for, no weapon has a better track record.

Switch to burst fire mode to reduce dispersion from moving and hipfiring.]]
SWEP.Trivia_Manufacturer = "Crowdley & Nelson"
SWEP.Trivia_Calibre = "9x19mm Parabellum"
SWEP.Trivia_Mechanism = "Roller-Delayed Blowback"
SWEP.Trivia_Country = "Germany"
SWEP.Trivia_Year = 1966

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Heckler & Koch"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ur_mp5.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_mp5.mdl"
SWEP.ViewModelFOV = 70
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2
SWEP.ProceduralIronFire = true

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["9mm"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["9mm"].min
SWEP.Penetration = ArcCW.UC.StdDmg["9mm"].pen
SWEP.RangeMin = 20
SWEP.Range = 100

SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 400
SWEP.PhysBulletMuzzleVelocity = 400

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 15

-- Recoil --

SWEP.Recoil = 0.22
SWEP.RecoilSide = 0.17

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1.25
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 0.6
SWEP.RecoilPunchBack = 1.5

SWEP.Sway = 0.25

-- Firerate / Firemodes --

SWEP.Delay = 60 / 800
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = -3,
        Mult_MoveDispersion = 0.75,
        Mult_HipDispersion = 0.9,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_smg1"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 3
SWEP.HipDispersion = 500
SWEP.MoveDispersion = 150
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "pistol"
SWEP.MagID = "mp5"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 200

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.3
SWEP.ShootSpeedMult = 0.95

-- Length --

SWEP.BarrelLength = 24
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, -2, 1)
SWEP.HolsterAng = Angle(-8.5, 8, -10)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-3.17, -1, 0.6),
     Ang = Angle(0.45, 0, 0),
     Magnification = 1,
     SwitchToSound = "",
     ViewModelFOV = 60,
}

SWEP.ActivePos = Vector(-0.3, 1.1, 0.6)
SWEP.ActiveAng = Angle(0, 0, -1)

-- SWEP.SprintPos = Vector(-0.5, 3, 1.5)
-- SWEP.SprintAng = Angle(-12, 15, -15)

SWEP.SprintPos = Vector(0, -3, 0)
SWEP.SprintAng = Angle(0, 0, 0)
-- SWEP.CustomizePos = Vector(6, -2, -1.5)
-- SWEP.CustomizeAng = Angle(16, 28, 0)
SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, 0.5, 0)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.BarrelOffsetHip = Vector(4, 0, -4)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-8, 4, -5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1
}

-- Firing sounds --
local path = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

SWEP.DistantShootSoundOutdoors = {
    path .. "fire-dist-01.ogg",
    path .. "fire-dist-02.ogg",
    path .. "fire-dist-03.ogg",
    path .. "fire-dist-04.ogg",
    path .. "fire-dist-05.ogg",
    path .. "fire-dist-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-pistol-01.ogg",
    common .. "fire-dist-int-pistol-02.ogg",
    common .. "fire-dist-int-pistol-03.ogg",
    common .. "fire-dist-int-pistol-04.ogg",
    common .. "fire-dist-int-pistol-05.ogg",
    common .. "fire-dist-int-pistol-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 0.6
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    -- [1] = "uzi_b1", [2] = "uzi_b2", [3] = "uzi_b3", [4] = "uzi_b4"
}

--[[

1 --- 	id: 0
     [	name: iron
    num: 1
    submodels:
    0 --- ironSIGHT.smd
2 --- 	id: 1
     [	name: 1
    num: 4
    submodels:
    0 --- mp5UPPER.smd
    1 --- mp5sdUPPER.smd
    2 --- mp5kUPPER.smd
    3 --- swordUPPER.smd
3 --- 	id: 2
     [	name: 2
    num: 2
    submodels:
    0 --- fourLOWER.smd
    1 --- sefLOWER.smd
4 --- 	id: 3
     [	name: 3
    num: 11
    submodels:
    0 --- fixedSTOCK.smd
    1 --- collapseSTOCK.smd
    2 --- collapseSTOCKcoll.smd
    3 --- pdwSTOCK.smd
    4 --- pdwSTOCKfold.smd
    5 --- tacticSTOCK.smd
    6 --- tacticSTOCKfold.smd
    7 --- futureSTOCK.smd
    8 --- futureSTOCKcoll.smd
    9 --- futureSTOCKfold.smd
    10 --- buttSTOCK.smd
5 --- 	id: 4
     [	name: 4
    num: 10
    submodels:
    0 --- standardHG.smd
    1 --- flashHG.smd
    2 --- flashmlokHG.smd
    3 --- slimHG.smd
    4 --- picaHG.smd
    5 --- mlokHG.smd
    6 --- kurzgripHG.smd
    7 --- kurzslimHG.smd
    8 --- kurzmlokHG.smd
    9 ---
6 --- 	id: 5
     [	name: 5
    num: 4
    submodels:
    0 --- standardMAG.smd
    1 --- smallMAG.smd
    2 --- straightMAG.smd
    3 --- drumMAG.smd
7 --- 	id: 6
     [	name: 6
    num: 2
    submodels:
    0 ---
    1 --- mp5RAIL.smd

]]

SWEP.AttachmentElements = {
    ["ur_mp5_barrel_sd"] = {
        VMBodygroups = {
            {ind = 1, bg = 1},
            {ind = 4, bg = 9},
            //{ind = 8, bg = 1},
        },
        AttPosMods = {
            [6] = {
                vpos = Vector(0, 1.3, 10),
                vang = Angle(90, 0, -90),
            },
            [7] = {
				vpos = Vector(-1.15, 0.3, 8),
				vang = Angle(90, 0, 180),
			},
        },
    },
    ["ur_mp5_barrel_eod"] = {
        VMBodygroups = {
            {ind = 4, bg = 10},
            //{ind = 8, bg = 2},
        },
        AttPosMods = {
            [6] = {
                vpos = Vector(0, 1.5, 10),
                vang = Angle(90, 0, -90),
            },
            [7] = {
				vpos = Vector(-0.95, 0.3, 8),
				vang = Angle(90, 0, 180),
			},
		}
    },
    ["ur_mp5_barrel_kurz"] = {
        VMBodygroups = {
            {ind = 1, bg = 2},
            {ind = 4, bg = 7},
        },
        AttPosMods = {[4] = {
            vpos = Vector(-0.1, 0.3, 11.5),
            vang = Angle(90, 0, -90),
        }}
    },
    ["ur_mp5_barrel_swordfish"] = {
        VMBodygroups = {
            --{ind = 0, bg = 1},
            {ind = 1, bg = 3},
            {ind = 6, bg = 0},
        },
    },

    ["ur_mp5_rail_fg"] = {
        VMBodygroups = {{ind = 4, bg = 4}},
    },
    ["ur_mp5_ub_classic"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
    },
    ["ur_mp5_ub_surefire"] = {
        VMBodygroups = {{ind = 4, bg = 1}},
    },
    ["ur_mp5_ub_surelock"] = {
        VMBodygroups = {{ind = 4, bg = 2}},
    },
    ["ur_mp5_ub_kurzgrip"] = {
        VMBodygroups = {{ind = 4, bg = 6}},
    },
    ["ur_mp5_ub_kurzmlok"] = {
        VMBodygroups = {{ind = 4, bg = 8}},
    },
    ["ur_mp5_ub_wood"] = {
        VMBodygroups = {{ind = 4, bg = 3}}, -- insert wood handguard here
    },

    ["ur_mp5_mag_15"] = {
        VMBodygroups = {{ind = 5, bg = 1}},
    },
    ["ur_mp5_mag_40"] = {
        VMBodygroups = {{ind = 5, bg = 3}},
    },
    ["ur_mp5_mag_50"] = {
        VMBodygroups = {{ind = 5, bg = 3}},
    },
    ["ur_mp5_mag_waffle"] = {
        VMBodygroups = {{ind = 5, bg = 2}},
    },

    ["ur_mp5_rail_optic"] = {
        VMBodygroups = {{ind = 6, bg = 1}},
    },

    ["ur_mp5_clamp"] = {
        VMBodygroups = {{ind = 5, bg = 1}},
    },

    ["receiver_lower"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["receiver_lower_semi"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },
    ["receiver_lower_0"] = {
        VMBodygroups = {{ind = 2, bg = 0}},
    },
    ["receiver_upper_0"] = {
        VMBodygroups = {{ind = 7, bg = 0}},
    },

    ["stock_a3"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
        },
    },
    ["stock_a3_folded"] = {
        VMBodygroups = {
            {ind = 3, bg = 2},
        },
    },
    ["ur_mp5_stock_remove"] = {
        VMBodygroups = {{ind = 3, bg = 10}},
    },
    ["ur_mp5_stock_wood"] = {
        -- VMBodygroups = {{ind = 0, bg = 4}},
        -- Make this part of the VMSkin
    },
    ["stock_pdw"] = {
        VMBodygroups = {{ind = 3, bg = 3}},
    },
    ["stock_pdw_folded"] = {
        VMBodygroups = {{ind = 3, bg = 4}},
    },
    ["stock_ump"] = {
        VMBodygroups = {{ind = 3, bg = 5}},
    },
    ["stock_ump_folded"] = {
        VMBodygroups = {{ind = 3, bg = 6}},
    },
    ["stock_future"] = {
        VMBodygroups = {{ind = 3, bg = 7}},
    },
    ["stock_future_folded"] = {
        VMBodygroups = {{ind = 3, bg = 8}},
    },
    ["ur_mp5_precision_irons"] = {
        VMBodygroups = {
            {ind = 0, bg = 2},
            {ind = 6, bg = 0},
            },
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local atts = wep.Attachments
    local vm = data.vm
    if IsValid(vm) then
        local barr = string.Replace(atts[2].Installed or "default","ur_mp5_barrel_","")
        local hg = string.Replace(atts[5].Installed or "default","ur_mp5_ub_","")
        
        if atts[6].Installed or atts[7].Installed then
            if barr == "sd" then
                vm:SetBodygroup(8, 1)
            elseif barr == "eod" then
                vm:SetBodygroup(8, 2)
            elseif hg == "default" or hg == "classic" then
                vm:SetBodygroup(4, 4)
                vm:SetBodygroup(8, 0)
            else
                vm:SetBodygroup(8, 0)
            end
        else
            vm:SetBodygroup(8, 0)
        end

        if hg == "mlok" then
            if barr == "kurz" then
                vm:SetBodygroup(4,8)
            else
                vm:SetBodygroup(4,5)
            end
        end

        if barr == "sword" then
            vm:SetBodygroup(0,(atts[1].Installed and 3) or 1)
        end
    end
end

SWEP.Hook_NameChange = function(wep,name)
    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default","ur_mp5_barrel_","")
    local cal = string.Replace(atts[3].Installed or "default","ur_mp5_caliber_","")
    local stock = string.Replace(atts[8].Installed or "default","ur_mp5_stock_","")
    local fakeNames = !GetConVar("arccw_truenames"):GetBool()
    local defaultCals = {
        ["default"] = true,
        ["noburst"] = true,
        ["semi"] = true
    }

    local start = "MP5"
    local mid = "A"
    local num = "4"
    if fakeNames then
        start = "PK5"
        mid = "-"
    end

    if cal == "semi" or atts[12].Installed == "uc_fg_civvy" then
        if fakeNames then
            return "PK5-CIV"
        else
            if barr == "long" or barr == "sd" then
                start = "HK94" -- I know how prolific civies can get with their gunbuilds, so the nonsensical names will continue
            else
                return "SP5" .. ((barr == "kurz" and "K-PDW") or "")
            end
        end
    end

    if !defaultCals[cal] then
        if barr == "sd" then
            num = "SD"
        else
            num = ""
        end
        if cal == "10auto" then
            mid = "/10"
        elseif cal == "40sw" then
            mid = "/40"
        elseif cal == "22lr" then
            if barr == "sd" then
                mid = "SD"
                num = " .22 LR"
            else
                mid = " .22 LR"
            end
        end
    else
        if barr == "kurz" then
            if fakeNames then
                mid = "C"
            else
                mid = "K"
            end
            if stock == "pdw" then
                num = "-PDW"
            elseif cal == "default" then
                if fakeNames then
                    num = "-4"
                else
                    num = "A4"
                end
            else
                num = ""
            end
        else
            if barr == "sd" then
                mid = "SD"
            end

            if cal == "noburst" or cal == "semi" then
                if stock == "a3" then
                    num = "3"
                elseif stock == "none" then
                    num = "1"
                else
                    num = "2"
                end
            else
                if stock == "a3" then
                    if barr == "sd" then
                        num = "6"
                    else
                        num = "5"
                    end
                elseif stock == "none" then
                    if barr == "sd" then
                        num = "4"
                    end
                else
                    if barr == "sd" then
                        num = "5"
                    end
                end
            end
        end
    end

    return start .. mid .. num
end

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local rutle = {common .. "movement-smg-03.ogg",common .. "movement-smg-04.ogg"}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
    },
    -- ["idle_empty"] = {
    --     Source = "idle",
    -- },
    ["ready"] = {
        Source = "ready",
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0.15},
            {s = path .. "rack1.ogg",         t = 0.15, c = ci},
            {s = path .. "rack2.ogg",         t = 0.38, c = ci},
            {s = ratel,         t = 0.75},
        }
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = ArcCW.UC.DrawSounds,
    },
    -- ["draw_empty"] = {
    --     Source = "draw_empty",
    --     SoundTable = ArcCW.UC.DrawSounds,
    -- },
    ["holster"] = {
        Source = "holster",
        --Time = 0.25,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    -- ["holster_empty"] = {
    --     Source = "holster_empty",
    --     --Time = 0.25,
    --     SoundTable = ArcCW.UC.HolsterSounds,
    -- },
    ["fire"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    -- ["fire_empty"] = {
    --     Source = "fire",
    --     Time = 13 / 30,
    --     ShellEjectAt = 0.03,
    --     SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    -- },
    ["fire_iron"] = {
        Source = "idle",
        Time = 13 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    -- ["fire_empty_iron"] = {
    --     Source = "idle",
    --     Time = 13 / 30,
    --     ShellEjectAt = 0.03,
    --     SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    -- },

    ["fix"] = {
        Source = "fix",
        Time = 40 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        ShellEjectAt = 0.36,
        SoundTable = {
            {s = rottle, t = 0.15},
            {s = path .. "rack1.ogg",         t = 0.27, c = ci},
            {s = path .. "rack2.ogg",         t = 0.5, c = ci},
        },
    },

    -- 30 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 2,
        MinProgress = 1.2,
        LastClip1OutTime = 2,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = path .. "magout.ogg",        t = 0.4, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.61, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.25},
            {s = ratel,  t = 1.55},
            {s = common .. "shoulder.ogg",  t = 1.5},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.045, c = ci},
            {s = path .. "chlock.ogg",         t = 0.18, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = 0.86, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.13, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.05, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },
    ["reload_kurz"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 2,
        MinProgress = 1.2,
        LastClip1OutTime = 2,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = path .. "magout.ogg",        t = 0.4, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.63, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.25},
            {s = ratel,  t = 1.55},
            {s = common .. "shoulder.ogg",  t = 1.5},
        },
    },
    ["reload_empty_kurz"] = {
        Source = "reload_empty_kurz",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.066, c = ci},
            {s = path .. "chlock.ogg",         t = 0.2, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = 0.86, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.13, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.1, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 15 Round Reloads --

    ["reload_15"] = {
        Source = "reload",--"reload_15",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 67 / 30,
        MinProgress = 1.2,
        LastClip1OutTime = 67 / 30,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.5, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.25},
            {s = ratel,  t = 1.55},
            {s = common .. "shoulder.ogg",  t = 1.5},
        },
    },
    ["reload_empty_15"] = {
        Source = "reload_empty",--"reload_empty_15",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.1, c = ci},
            {s = path .. "chlock.ogg",         t = 0.19, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = .9, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.2, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.13, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },
    ["reload_empty_kurz_15"] = {
        Source = "reload_empty_kurz",--"reload_empty_15",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.1, c = ci},
            {s = path .. "chlock.ogg",         t = 0.19, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = .9, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.2, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.13, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 40 Round Reloads --

    ["reload_40"] = {
        Source = "reload",--"reload_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 67 / 30,
        MinProgress = 1.2,
        LastClip1OutTime = 67 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.5, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.25},
            {s = ratel,  t = 1.55},
            {s = common .. "shoulder.ogg",  t = 1.5},
        },
    },
    ["reload_empty_40"] = {
        Source = "reload_empty",--"reload_empty_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.1, c = ci},
            {s = path .. "chlock.ogg",         t = 0.19, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = .9, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.2, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.13, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },
    ["reload_empty_kurz_40"] = {
        Source = "reload_empty_kurz",--"reload_empty_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.1, c = ci},
            {s = path .. "chlock.ogg",         t = 0.19, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = .9, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.2, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.13, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 100 Round Reloads --

    ["reload_drum"] = {
        Source = "reload_drum",--"reload_50",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 67 / 30,
        MinProgress = 1.6,
        LastClip1OutTime = 1,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "magout.ogg",        t = 0.32, c = ci},
            {s = rottle, t = 0.25},
            {s = rottle, t = 0.75},
            {s = path .. "magin.ogg",         t = 1.05, c = ci},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = path .. "magtap.ogg",         t = 1.755, c = ci},
            {s = common .. "shoulder.ogg",  t = 2.25},
        },
    },
    ["reload_empty_drum"] = {
        Source = "reload_empty_drum",--"reload_empty_50",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.4,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 1,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "magout.ogg",        t = 0.3, c = ci},
            {s = rottle, t = 0.25},
            {s = rottle, t = 0.75},
            {s = common .. "magdrop.ogg",  t = 1.0},
            {s = path .. "magin.ogg",         t = 1.05, c = ci},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = path .. "magtap.ogg",         t = 1.755, c = ci},
            {s = path .. "rack1.ogg",         t = 2.3, c = ci},
            {s = path .. "rack2.ogg",         t = 2.5, c = ci},
            {s = common .. "shoulder.ogg",  t = 3.0},
        },
    },

    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-smg-03.ogg", t = 0},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-smg-01.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-smg-04.ogg", t = 1.25},
        },
    },

    ["enter_sprint"] = {
        Source = "sprint_enter",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKOut = 0,
        Time = .5,
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_sprint"] = {
        Source = "sprint_exit",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.5,
        Time = .5,
    },
}

SWEP.AutosolveSourceSeq = "idle"

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp","optic","ur_mp5_optic"}, -- ,"optic"
        Bone = "body",
        Offset = {
            vpos = Vector(-0.1, -1.6, 3),
            vang = Angle(90, 0, -90),
        },
        CorrectivePos = Vector(-0.09, 0, 0),
        CorrectiveAng = Angle(1, 0.6, -4.0),
        InstalledEles = {"ur_mp5_rail_optic"}
    },
    {
        PrintName = "Upper Receiver",
        DefaultAttName = "9\" Standard Upper",
        DefaultAttIcon = Material("entities/att/ur_mp5/upper_std.png", "smooth mips"),
        Slot = "ur_mp5_barrel",
        Bone = "body",
        Offset = {
            vpos = Vector(2.6, -3.7, -17.3),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Lower Receiver",
        DefaultAttName = "Navy Lower",
        DefaultAttIcon = Material("entities/att/ur_mp5/grip.png", "smooth mips"),
        Slot = "ur_mp5_caliber",
        DefaultEles = {"receiver_lower_0"}
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "body",
        Offset = {
            vpos = Vector(0, 0.3, 14.8),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"barrel_sd","barrel_eod","barrel_sword"}
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Tropical Handguard",
        DefaultAttIcon = Material("entities/att/ur_mp5/hg_std.png", "smooth mips"),
        Slot = {"ur_mp5_hg"},
        ExcludeFlags = {"barrel_sd", "barrel_eod"},
        Bone = "body",
        Offset = {
            vpos = Vector(0, .9, 10),
            vang = Angle(90, 0, -90),
        },
        --VMScale = Vector(.8, .8, .8),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "body",
        Offset = {
            vpos = Vector(0, .9, 10),
            vang = Angle(90, 0, -90),
        },
        --VMScale = Vector(.8, .8, .8),
        --InstalledEles = {"ur_mp5_rail_fg"},
        GivesFlags = {"mp5_rail"},
        ExcludeFlags = {"mp5_badhg","mp5_kurz"},
        MergeSlots = {15},
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "body",
        Offset = {
            vpos = Vector(-0.9, 0.2, 8),
            vang = Angle(90, 0, 180),
        },
        VMScale = Vector(.8,.8,.8),
        --InstalledEles = {"ur_mp5_clamp"}
        GivesFlags = {"mp5_rail"},
    },
    {
        PrintName = "Stock",
        Slot = {"ur_mp5_stock"},
        DefaultAttName = "Full Stock",
        DefaultAttIcon = Material("entities/att/ur_mp5/stock_std.png", "smooth mips"),
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_mp5_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_mp5/mag30.png", "smooth mips"),
        ExcludeFlags = {"ur_mp5_cal_40sw","ur_mp5_cal_10mm"}
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load",
        ExcludeFlags = {"barrel_sd"}
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "mp5_charm"},
        FreeSlot = true,
        Bone = "Body",
        Offset = {
            vpos = Vector(0.6, 1.1, 2.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "Body",
        Offset = {
            vpos = Vector(0, 0, 7.9),
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
        --RequireFlags = {"barrel_eod"},
        ExcludeFlags = {"mp5_badhg","mp5_kurz"},
    }
}

-- SWEP.AttachmentOverrides = {
--     ["uc_grip_handstop"] = {
--         LHIK = false
--     }
-- } -- THIS SHIT DOESN'T WORK

--lua/weapons/arccw_ur_obrez.lua:
return gluapack()()
--lua/weapons/arccw_ur_g3.lua:
return gluapack()()
--lua/weapons/arccw_ur_ak.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Urban Coalition" -- edit this if you like
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false

SWEP.PrintName = "KF-67"
SWEP.TrueName = "AKM"

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

local descStart = "One of the first assault rifles, wielded around the world to this day for its cheap price, quick production, ease of maintenance, and infallible reliability. Consequently, it has become the most popular rifle ever; a constant of freedom fighters and third-world dictators virtually everywhere. One fifth of all small arms in existence can be traced to this design.\n\n"
local desc_762 = "The default pattern is well-rounded and hard-hitting, but kicks harder than other weapons of its class."
local desc_545 = "With a heavier frame than other service rifles, the AK-74 platform is accurate and easy to control."
local desc_74u = "This PDW variant sacrifices range and control to fit the power of a rifle into a very compact form."
local desc_9mm = "Well-rounded submachine gun that shares common parts with AK rifles. For its widespread use by a variety of security divisions, it can be described as a Russian counterpart to the MP5.\n\nThe moniker \"Vityaz\" translates to \"knight.\""
local desc_12g = "Magazine-fed semi automatic shotgun based on the Kalashnikov pattern. It is a popular civilian weapon due to the comparative simplicity of Russia's smoothbore gun licenses, but it has also been used by security firms around the world.\n\nIts low accuracy is compensated for by a much faster reload time than tube-fed designs."
local desc_556 = "This international variant has a lower damage output than the Russian cartridges, but boasts substantially lower recoil."
local desc_366 = "AK-pattern shotgun chambered in .366 TKM, a sporting cartridge that uses reshaped M43 casings. It is considered a shotgun because of its smoothbore barrel, a change made to circumvent Russian rifle laws. Despite the lack of rifling, it achieves similar ballistics to a proper AK-47."

SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = descStart .. desc_762
SWEP.Trivia_Manufacturer = "Izhmash"
SWEP.Trivia_Calibre = "7.62x39mm Soviet"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "Soviet Union"
SWEP.Trivia_Year = 1959

SWEP.Slot = 2
SWEP.CamAttachment = 3

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.ViewModelFOV = 70

SWEP.DefaultBodygroups = "010000800120"

-- Damage --

SWEP.Damage = 50 -- 2 shot close range kill
SWEP.DamageMin = 25 -- 4 shot long range kill
SWEP.RangeMin = 30
SWEP.Range = 300 -- 3 shot until ~170m
SWEP.Penetration = 16
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 715
SWEP.PhysBulletMuzzleVelocity = 715

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 15

-- Recoil --

SWEP.Recoil = 0.75
SWEP.RecoilSide = 0.3

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 2

SWEP.Sway = 0.6

-- Firerate / Firemodes --

SWEP.Delay = 60 / 600
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 5
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 250
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "ar2"
SWEP.MagID = "ak"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

-- SWEP.Malfunction = true
SWEP.MalfunctionMean = 200
--SWEP.MeleeTime = 1.5

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.75

local path = ")weapons/arccw_ur/ak/"
local path1 = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rutle = {common .. "movement-rifle-01.ogg",common .. "movement-rifle-02.ogg",common .. "movement-rifle-03.ogg",common .. "movement-rifle-04.ogg"}
--SWEP.FirstShootSound = path .. "fire_first.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/762x39/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-762x39-rif-ext-01.ogg",
    tail .. "fire-dist-762x39-rif-ext-02.ogg",
    tail .. "fire-dist-762x39-rif-ext-03.ogg",
    tail .. "fire-dist-762x39-rif-ext-04.ogg",
    tail .. "fire-dist-762x39-rif-ext-05.ogg",
    tail .. "fire-dist-762x39-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.MuzzleEffect = "muzzleflash_6"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/762x39.mdl"
SWEP.ShellPitch = 90
SWEP.ShellScale = .666
SWEP.ShellRotateAngle = Angle(0, 0, 0)
SWEP.UC_ShellColor = Color(0.7 * 255, 0.2 * 255, 0.2 * 255)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.BulletBones = {
    [1] = "tag_mag2",
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.61, -2, 0.45),
    Ang = Angle(0.60, 0.274, 5.53),
    Magnification = 1.1,
    SwitchToSound = "", -- sound that plays when switching to this sight
    CrosshairInSights = false
}
SWEP.LaserOffsetAngle = Angle(0, 0, 0)
SWEP.LaserIronsAngle = Angle(0, 0, 0)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0.5, 0, 0)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.SprintPos = Vector(0, 0, 0)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.HolsterPos = Vector(-1, -1, 1.2)
SWEP.HolsterAng = Angle(-15, 8, -10)

SWEP.BarrelOffsetSighted = Vector(0, 0, 0)
SWEP.BarrelOffsetHip = Vector(0, 0, 0)

-- SWEP.CustomizePos = Vector(6.5, 0.8, -0.2)
-- SWEP.CustomizeAng = Angle(8, 22, 15)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.BarrelLength = 24

SWEP.AttachmentElements = {
    ["barrel_74m"] = {
        VMBodygroups = {{ind = 1, bg = 3}}
    },
    ["barrel_74m_red"] = {
        VMBodygroups = {{ind = 1, bg = 10}}
    },
    ["barrel_74m_green"] = {
        VMBodygroups = {{ind = 1, bg = 11}}
    },
    ["barrel_akm"] = {
        VMBodygroups = {{ind = 1, bg = 0}}
    },
    ["barrel_alpha"] = {
        VMBodygroups = {
            {ind = 1, bg = 7},
            -- {ind = 7, bg = 6},
            -- {ind = 8, bg = 2},
        },
    },
    ["barrel_rpk"] = {
        VMBodygroups = {
            {ind = 7, bg = 1},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 32.2, 2.6),
            vang = Angle(0, 270, 0),
        }},
    Override_IronSightStruct = {
            Pos = Vector(-2.625, -2, 0.68),
            Ang = Angle(-0.1, 0.274, 5.53),
            Magnification = 1,
    }
    },
    ["barrel_rpk74m"] = {
        VMBodygroups = {
            {ind = 1, bg = 5},
            -- {ind = 7, bg = 1},
            -- {ind = 8, bg = 2}
        },
        -- AttPosMods = {[4] = {
        --     vpos = Vector(0, 32.2, 2.6),
        --     vang = Angle(0, 270, 0),
        -- }},
        -- Override_IronSightStruct = {
        -- 	Pos = Vector(-2.625, -2, 0.68),
        -- 	Ang = Angle(-0.1, 0.274, 5.53),
        -- 	Magnification = 1,
        -- }
    },
    ["barrel_krinkov"] = {
        VMBodygroups = {
            {ind = 1, bg = 6},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 4, bg = 1},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 15, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,10,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,10,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.638, -2, 0.9),
            Ang = Angle(-1, 0.12, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_vityaz"] = {
        VMBodygroups = {
            {ind = 1, bg = 8},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 16.5, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,11,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,11,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.62, -2, 0.75),
            Ang = Angle(-0.42, 0.2, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_t56"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 2},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_t56_ext"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 3},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_vepr"] = {
        VMBodygroups = {
            --{ind = 1, bg = 9},
            {ind = 7, bg = 4},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 28.5, 2.7),
            vang = Angle(0, 270, -0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, -2, 0.76),
            Ang = Angle(-0.3, 0.18, 5.53),
            Magnification = 1,
        }
    },

    ["ur_ak_hg_vepr"] = {
        VMBodygroups = {
            {ind = 1, bg = 9},
        },
    },

    ["barrel_105"] = {
        VMBodygroups = {
            --{ind = 1, bg = 3},
            {ind = 7, bg = 2},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 19.9, 2.7),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.6, -2, 0.48),
            Ang = Angle(0.6, 0.265, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_dong"] = {
        VMBodygroups = {{ind = 1, bg = 2}}, -- This will show up regardless of barrel selection because underbarrel atts are always processed after barrel atts
        AttPosMods = {[6] = {
            SlideAmount = {
                vmin = Vector(0,12,1.9),
                vmax = Vector(0,12,1.9)
            },
        }}
    },

    ["muzzle_akm"] = {
        VMBodygroups = {{ind = 8, bg = 1}}
    },
    ["muzzle_ak74"] = {
        VMBodygroups = {{ind = 8, bg = 3}}
    },
    ["muzzle_aku"] = {
        VMBodygroups = {{ind = 8, bg = 6}}
    },
    ["muzzle_bayonet"] = {
        VMBodygroups = {{ind = 11, bg = 1}}
    },

    ["stock_alpha"] = {
        VMBodygroups = {
            {ind = 6, bg = 4},
            {ind = 3, bg = 1},
        }

    },
    ["stock_aks"] = {
        VMBodygroups = {
            {ind = 6, bg = 3},
            {ind = 3, bg = 1},
    }
    },
    ["stock_aks_folded"] = {
        VMBodygroups = {
            {ind = 6, bg = 10},
            {ind = 3, bg = 1},
        }

    },
    ["stock_underfolder"] = {
        VMBodygroups = {{ind = 6, bg = 2}}
    },
    ["stock_underfolder_folded"] = {
        VMBodygroups = {{ind = 6, bg = 1}}
    },
    ["stock_ak74m"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 12}
        }
    },
    ["stock_ak74m_folded"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 13}
        }
    },
    ["stock_rpk"] = {
        VMBodygroups = {{ind = 6, bg = 5}}
    },
    ["stock_akn"] = {
        VMBodygroups = {{ind = 6, bg = 0}}
    },
    ["stock_skeletal"] = {
        VMBodygroups = {
            {ind = 6, bg = 6},
            {ind = 3, bg = 1},
        }
    },
    ["stock_vepr"] = {
        VMBodygroups = {
            {ind = 6, bg = 7},
            {ind = 9, bg = 4}
        }
    },
    ["stock_none"] = {
        VMBodygroups = {
            {ind = 6, bg = 9},
            {ind = 3, bg = 1},
        }
    },

    ["mag_762_75"] = {
        VMBodygroups = {{ind = 2, bg = 1}}
    },
    ["mag_762_bakelite"] = {
        VMBodygroups = {{ind = 2, bg = 11}}
    },
    ["mag_762_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 12}}
    },
    ["mag_545_30"] = {
        VMBodygroups = {{ind = 2, bg = 2}}
    },
    ["mag_556_30"] = {
        VMBodygroups = {{ind = 2, bg = 10}}
    },
    ["mag_545_45"] = {
        VMBodygroups = {{ind = 2, bg = 3}}
    },
    ["mag_9mm"] = {
        VMBodygroups = {{ind = 2, bg = 4}}
    },
    ["mag_12g"] = {
        VMBodygroups = {{ind = 2, bg = 5}}
    },
    ["mag_366"] = {
        VMBodygroups = {{ind = 2, bg = 6}}
    },

    ["grip_akm"] = {
        VMBodygroups = {{ind = 9, bg = 0}}
    },
    ["grip_alpha"] = {
        VMBodygroups = {{ind = 9, bg = 2}}
    },
    ["grip_saiga"] = {
        VMBodygroups = {{ind = 9, bg = 3}}
    },

    ["cover_ribbed"] = {
        VMBodygroups = {{ind = 10, bg = 0}}
    },
    ["cover_alpha"] = {
        VMBodygroups = {{ind = 10, bg = 1}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.68),
            vang = Angle(0, -90, 0),
        }}
    },
    ["optic_raillaser"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.95, 2.5, 4.05),
                vang = Angle(0, -90, 125),
            },
        },
    },
    ["cover_ak12"] = {
        VMBodygroups = {{ind = 10, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.67),
            vang = Angle(0, -90, 0),
        }}
    },

    ["grip_ak12"] = {
        VMBodygroups = {{ind = 9, bg = 5}}
    },
    ["stock_ak12"] = {
        VMBodygroups = {{ind = 6, bg = 11}},
    },
    ["handguard_ak12"] = {
        VMBodygroups = {{ind = 1, bg = 12}},
        --[[AttPosMods = {[6] = {
            vpos = Vector(0, 11.75, 2.2),
            vang = Angle(90, -90, -90),
        }}]]
        AttPosMods = {
            [8] = {
                vpos = Vector(-0.7, 13.5, 3.8),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            },
            [7] = {
                vpos = Vector(0, 11.75, 2.2),
                vang = Angle(90, -90, -90),
            }
        },
    },
    ["barrel_ak12"] = {
        VMBodygroups = {
            {ind = 7, bg = 6},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 23.5, 2.8),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.68, 0, 1.3),
            Ang = Angle(-2.02, 0.028, 5.53),
            Magnification = 1,
        }
        --RequireFlags = {"cover_rail"},
    },
    ["muzzle_ak12"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["reciever_ak12"] = {
        VMBodygroups = {{ind = 0, bg = 1}}
    },
    ["sight_ak12"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
        RequireFlags = {"cover_rail", "ak_railedguard"},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, 0, 0.79),
            Ang = Angle(-1.12, 0.116, 5.53),
            Magnification = 1,
        },
        Override_IronSightStruct_Priority = 2,
    },
    ["mag_545_ak12"] = {
        VMBodygroups = {{ind = 2, bg = 7}}
    },
    ["mag_545_black"] = {
        VMBodygroups = {{ind = 2, bg = 9}}
    },
    ["mag_308"] = {
        VMBodygroups = {{ind = 2, bg = 8}}
    },

    ["cover_trail"] = {
        VMBodygroups = {{ind = 4, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 8.2, 5.20),
            vang = Angle(0, -90, 0),
        }}
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local akOptics = {["uc_optic_pso1"] = true, ["uc_optic_kobra"] = true} -- Will need to update this list if more AK optics get added
    local railHgs = {["default"] = true, ["type3"] = true}
    local bipodBarrs = {["rpk"] = true}
    local shortBarrs = {["krinkov"] = true, ["vityaz"] = true}
    local intCals = {["545"] = true, ["556"] = true, ["545_ak12"] = true}

    local optic = wep.Attachments[1].Installed
    local barr = string.Replace(wep.Attachments[2].Installed or "default","ur_ak_barrel_","")
    local hg = string.Replace(wep.Attachments[3].Installed or "default","ur_ak_hg_","")
    local muzz = wep.Attachments[4].Installed
    local cal = string.Replace(wep.Attachments[5].Installed or "default","ur_ak_cal_","")
    local ub = wep.Attachments[7].Installed-- or wep.Attachments[17].Installed
    local upper = wep.Attachments[15].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    local taclaser = (wep.Attachments[16].Installed == "ur_ak_charm_tl")

    local vm = data.vm
    if !IsValid(vm) then return end

    -- Default muzzle devices
    if !muzz or muzz == "ur_ak_muzzle_bayonet" then
        if barr == "ak12" and (cal == "default" or intCals[cal]) then
            vm:SetBodygroup(8,3)
        elseif barr == "krinkov" then
            vm:SetBodygroup(8,4)
        elseif barr == "default" or barr == "t56" then
            if cal == "default" then
                vm:SetBodygroup(8,1)
            elseif intCals[cal] then
                vm:SetBodygroup(8,3)
            else
                vm:SetBodygroup(8,0)
            end
        end
    elseif barr == "default" then
        vm:SetBodygroup(8,0)
    else
        vm:SetBodygroup(8,2)
    end

    --
    if taclaser and !akOptics[optic] then
        vm:SetBodygroup(12,2)
    else
        if optic and !alpha and !akOptics[optic] then
            vm:SetBodygroup(12,1)
        else
            vm:SetBodygroup(12,0)
        end
    end

    -- Railed underbarrel
    if ub and hg != "ur_ak_hg_dong" and barr != "vityaz" then
        if barr == "krinkov" then
            vm:SetBodygroup(13,2)
        elseif railHgs[hg] then
            vm:SetBodygroup(1,13)
        else
            vm:SetBodygroup(13,1)
        end
    else
        vm:SetBodygroup(13,0)
    end

    -- RPK bipod
    if bipodBarrs[barr] then
        vm:SetBodygroup(7, (wep:GetInBipod() and (wep.LastAnimKey ~= "enter_bipod" or wep.LastAnimFinishTime < CurTime())) and 7 or 1)
    end
end

SWEP.ExtraSightDist = 2
SWEP.GuaranteeLaser = false

SWEP.WorldModelOffset = {
    pos = Vector(-7, 4, -4),
    ang = Angle(-12, 0, 180)
}

SWEP.MirrorVMWM = true

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic","optic_sniper","ur_ak_optic"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 2, 4.92),
            vang = Angle(0, -90, 0),
        },
        CorrectivePos = Vector(0, 0, -0.0),
        CorrectiveAng = Angle(-1.9, 180.15, 0),
        VMScale = Vector(1, 1, 1),
        -- SlideAmount = {
        --     vmin = Vector(0, 2-1, 4.55),
        --     vmax = Vector(0, 2+0.5, 4.55),
        -- },
--        RequireFlags = {"cover_rail"},
--        HideIfBlocked = true,
        -- InstalledEles = {"optic_rail"},
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "16\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/ur_ak/barrel/std.png", "mips smooth"),
        Slot = "ur_ak_barrel",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Factory Handguard",
        DefaultAttIcon = Material("entities/att/ur_ak/handguards/std.png", "mips smooth"),
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        Slot = "ur_ak_hg",
        ExcludeFlags = {"barrel_carbine"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle","ur_ak_muzzle"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 24.1, 2.7),
            vang = Angle(0, 270, 0),
        },
        ExcludeFlags = {"ur_ak_nomuzzle"},
        --Installed = "ur_ak_muzzle_akm"
    },
    {
        PrintName = "Receiver",
        DefaultAttName = "7.62x39mm Reciever",
        DefaultAttIcon = Material("entities/att/uc_bullets/762x39.png", "mips smooth"),
        Slot = {"ur_ak_cal"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        DefaultFlags = {"cal_default"}
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_ak_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_ak/magazines/762_30.png", "mips smooth"),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip","ur_ak_ub"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        VMScale = Vector(1, 1, 1),
        SlideAmount = {
            vmin = Vector(0,10.5,1.9),
            vmax = Vector(0,13.5,1.9)
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs"},
        MergeSlots = {17},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 19.6, 2.1),
            vang = Angle(0, 270, 0),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ur_ak_grip"},
        DefaultAttName = "Factory Grip",
        DefaultAttIcon = Material("entities/att/ur_ak/grip_modern.png", "mips smooth"),
        ExcludeFlags = {"stock_vepr"},
    },
    {
        PrintName = "Stock",
        Slot = {"ur_ak_stock"},
        DefaultAttName = "Factory Stock",
        DefaultAttIcon = Material("entities/att/ur_ak/stock/n.png", "mips smooth"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Dust Cover",
        DefaultAttName = "Ribbed Dust Cover",
        DefaultAttIcon = Material("entities/att/ur_ak/dustcover_stock.png", "mips smooth"),
        Slot = {"ur_ak_cover"},
        FreeSlot = true,
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "ur_ak_charm"},
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0.6, 6.7, 2.2),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 9.9, 2.9),
            vang = Angle(90, -90, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs","barrel_rpk"},
        Hidden = true,
    }
}

function SWEP:Hook_TranslateAnimation(anim)
    if anim == "fire_iron" then
        if self:GetBuff_Override("NoStock") then return "fire" end
    elseif anim == "fire_iron_empty" then
        if self:GetBuff_Override("NoStock") then return "fire_empty" end
    end
end

SWEP.Hook_NameChange = function(wep,name)
    local foldStocks = {["underfolder"] = true,["aks"] = true}
    local akCals = {["762"] = true,["545"] = true}
    local shortBarrs = {["krinkov"] = true,["vityaz"] = true}
    local fakeNames = !GetConVar("arccw_truenames"):GetBool()

    local start = "AK"
    local mid = ""
    local post = "M"
    local noN = false

    if fakeNames then
        start = "KF"
        post = "-67"
    end

    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_ak_barrel_", "")
    local hg = string.Replace(atts[3].Installed or "default", "ur_ak_hg_", "")
    local cal = string.Replace(atts[5].Installed or "762", "ur_ak_cal_", "")
    local stock = string.Replace(atts[10].Installed or "default", "ur_ak_stock_", "")
    local upper = atts[11].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    -- local ak12 = alpha and barr == "ak12"

    wep.Trivia_Desc = descStart .. desc_762
    wep.Trivia_Mechanism = "Gas-Operated Rotating Bolt"

    if alpha then noN = true end

    if atts[14].Installed == "uc_fg_civvy" then
        start = (fakeNames and "Amur") or "Vepr"
        if cal == "12g" then
            post = "-12"
            wep.Trivia_Desc = desc_12g
        elseif cal == "545_ak12" or cal == "545" then
            post = " 5.45"
            wep.Trivia_Desc = descStart .. desc_545
        elseif cal == "762" then
            post = " 7.62"
        elseif cal == "9mm" then
            start = "Saiga"
            post = "-9"
            wep.Trivia_Desc = desc_9mm
            wep.Trivia_Mechanism = "Blowback"
        else
            post = " ." .. cal
        end
        return start .. post
    end

    if cal == "9mm" then
        if fakeNames then
            start = "Bogatyr"
            post = " SMG"
        else
            start = "PP"
            post = "-19 Vityaz"
        end
        wep.Trivia_Desc = desc_9mm
        wep.Trivia_Mechanism = "Blowback"
    -- elseif cal == "12g" then
    --     start = "Saiga"
    --     if shortBarrs[barr] then
    --         post = "-12K"
    --     else
    --         post = "-12"
    --     end
    --     wep.Trivia_Desc = desc_12g -- Obsolete
    elseif cal == "366" then
        if barr == "vepr" or string.find(atts[14].Installed or "","rifling") then
            start = (fakeNames and "Amur") or "Vepr"
            post = " .366"
        else
            start = (fakeNames and "KFN") or "VPO"
            post = "-209"
            wep.Trivia_Desc = desc_366
        end
    elseif cal == "308" then
        post = "-308"
    -- elseif cal == "545_ak12" or ak12 then
    --     noN = true
    --     if string.StartWith(cal,"545") then
    --         post = "-12"
    --         wep.Trivia_Desc = descStart .. desc_545
    --     elseif cal == "762" then
    --         post = "-15"
    --     elseif cal == "556" then
    --         post = "-18"
    --     end
    --     if string.EndsWith(barr,"105") or shortBarrs[barr] then
    --         post = post .. "K"
    --     end -- Obsolete
    elseif barr == "rpk" or barr == "rpk74m" then
        start = (fakeNames and "PKF") or "RPK"
        if !fakeNames and barr == "rpk" and cal == "762" then
            post = ""
        end
    elseif cal == "762" then
        if barr == "t56" then
            noN = true
            if fakeNames then
                start = "Yucha"
                post = " 7"
            else
                start = "Type "
                post = "56"
            end
        elseif (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = "-103"
        end
    elseif cal == "556" then
        if fakeNames then
            post = "-45"
        elseif string.EndsWith(barr,"105") then
            post = "-102"
        else
            post = "-101"
        end
        wep.Trivia_Desc = descStart .. desc_556
    end

    if foldStocks[stock] and akCals[cal] and !string.StartWith(barr,"105") then
        if cal == "762" then
            if barr == "t56" then
                post = post .. "-1"
            elseif !fakeNames then
                post = "MS"
            else
                mid = "S"
            end
        else
            mid = "S"
        end
    end

    if cal == "545" then
        wep.Trivia_Desc = descStart .. desc_545
        if (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = (fakeNames and "-76M") or "-74M"
        elseif shortBarrs[barr] then
            if fakeNames then
                post = "-76"
                mid = mid .. "U"
            else
                post = "-74U"
            end
            wep.Trivia_Desc = descStart .. desc_74u
        else
            post = (fakeNames and "-76") or "-74"
        end
    end

    if akCals[cal] then
        if string.EndsWith(barr,"105") then
            noN = true
            if cal == "545" then
                post = "-105"
            elseif cal == "762" then
                post = "-104"
            elseif cal == "556" then
                post = "-102"
            end
        else
            -- if shortBarrs[barr] then
            --     post = post .. "U" -- I know I said the AK-47U doesn't exist, but we have fucking Glock 44 Autos so I warmed up to it
            --     wep.Trivia_Desc = descStart .. desc_74u
            -- end
            if !noN and atts[1].Installed then
                post = post .. "N"
            end
        end

    end

    return start .. mid .. post
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle"
    },
    ["draw"] = {
        Source = "draw",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "raise.ogg", t = 0.2},
            {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
           -- {s = common .. "raise.ogg", t = 0.2},
            -- {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["ready"] = {
        Source = "ready",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.6,
        LHIKEaseOut = 0.25,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "chback.ogg",    t = 0.2},
            {s = path .. "chamber.ogg",    t = 0.3},
            {s = common .. "shoulder.ogg",    t = .6},
        },
    },
    ["fire"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = common .. "magpouch.ogg", t = 0.0, v = 0.45},
            {s = path .. "reload_start.ogg", 	 t = 0.025},
            {s = rottle,  t = 0.05},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.38},
            {s = path .. "grab.ogg", t = 1.9, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.0},
            {s = path .. "shoulder.ogg", t = 2.15},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15, v = 0.5},
            {s = rottle,  t = 1.16},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = path .. "grab.ogg", t = 2.3, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.4},
            {s = path .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_75"] = {
        Source = "reload_drum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.6,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = rottle,  t = 1.75},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.1},
            {s = path .. "shoulder.ogg", t = 2.25},
        },
    },
    ["reload_empty_75"] = {
        Source = "reload_drum_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.6,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = rottle,  t = 1.9},
            {s = path .. "chback.ogg",    t = 2.37},
            {s = path .. "chamber.ogg",    t = 2.48},
            {s = common .. "shoulder.ogg", t = 2.78},
            {s = path .. "shoulder.ogg", t = 2.93},
        },
    },
    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.73},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.4},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_9mm_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.85},
            {s = ratel, t = 1.1},
            {s = common .. "pistol_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_9.ogg",    t = 1.8},
            {s = path .. "chamber_9.ogg",    t = 2.05},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_10rnd"] = {
        Source = "reload_10rnd",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_10rnd"] = {
        Source = "reload_10rnd_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_308"] = {
        Source = "reload_308",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_308"] = {
        Source = "reload_308_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 1.0},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_308.ogg",    t = 1.85},
            {s = path .. "chamber_308.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_12g"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_12g"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5, v = 0.25},
            {s = ratel, t = 0.55},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.75},
            {s = path .. "12ga/chback.ogg",    t = 1.85},
            {s = path .. "12ga/chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_sprint"] = {
        Source = "sprint_start",
        Time = 0.9,
    },
    ["idle_sprint"] = {
        Source = "sprint_idle",
    },
    ["exit_sprint"] = {
        Source = "sprint_end",
        Time = 1.25,
    },
    ["unjam"] = {
        Source = "jamfix",
        -- Time = 45 / 30,
        ShellEjectAt = 0.65,
        -- LHIK = true,
        -- LHIKIn = 0.3,
        -- LHIKEaseIn = 0.4,
        -- LHIKEaseOut = 0.15,
        -- LHIKOut = 0.4,
        -- SoundTable = {                                             zenith do noises here
        --     {s = path .. "chback.ogg",   t = 0.15},
        --     {s = common .. "cloth_4.ogg",  t = 0.5},
        --     {s = path .. "chamber.ogg",  t = 0.5},
        -- },
        SoundTable = {
            {s = common .. "cloth_4.ogg",  t = 0.1},
            {s = path .. "presscheck_1.ogg",    t = 0.2},
            {s = path .. "chback.ogg",    t = 0.6},
            {s = path .. "chamber.ogg",    t = 0.7},
            {s = common .. "grab.ogg", t = 1.1},
            {s = common .. "shoulder.ogg", t = 1.15},
        }
    },
    ["bash_bayonet"] = {
        Source = "bayonet",
        --Time = 1.2,
        --MinProgress = .7,
        SoundTable = {
            {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },

    ["exit_bipod"] = {
        Source = "bipod_undeploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },
    ["enter_bipod"] = {
        Source = "bipod_deploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}                   -- yeah here too
        }
    },
}

SWEP.Hook_Think = ArcCW.UC.ADSReload
--addons/ch_mining/lua/weapons/ch_mining_pickaxe/shared.lua:
return gluapack()()
--gamemodes/darkrp/entities/weapons/door_ram/shared.lua:
AddCSLuaFile()

if CLIENT then
    SWEP.Slot = 5
    SWEP.SlotPos = 1
    SWEP.DrawAmmo = false
    SWEP.DrawCrosshair = false
end

-- Variables that are used on both client and server
DEFINE_BASECLASS("weapon_cs_base2")

SWEP.PrintName = "KoçBaşı"
SWEP.Author = "DarkRP Developers"
SWEP.Instructions = "Left click to break open doors/unfreeze props or get people out of their vehicles\nRight click to raise"
SWEP.Contact = ""
SWEP.Purpose = ""
SWEP.IsDarkRPDoorRam = true

SWEP.IconLetter = ""

SWEP.ViewModelFOV = 62
SWEP.ViewModelFlip = false
SWEP.ViewModel = Model("models/weapons/c_rpg.mdl")
SWEP.WorldModel = Model("models/weapons/w_rocket_launcher.mdl")
SWEP.AnimPrefix = "rpg"

SWEP.UseHands = true

SWEP.Spawnable = true
SWEP.AdminOnly = true
SWEP.Category = "DarkRP (Utility)"

SWEP.Sound = Sound("physics/wood/wood_box_impact_hard3.wav")

SWEP.Primary.ClipSize = -1      -- Size of a clip
SWEP.Primary.DefaultClip = 0        -- Default number of bullets in a clip
SWEP.Primary.Automatic = false      -- Automatic/Semi Auto
SWEP.Primary.Ammo = ""

SWEP.Secondary.ClipSize = -1        -- Size of a clip
SWEP.Secondary.DefaultClip = 0     -- Default number of bullets in a clip
SWEP.Secondary.Automatic = false     -- Automatic/Semi Auto
SWEP.Secondary.Ammo = ""

--[[---------------------------------------------------------
Name: SWEP:Initialize()
Desc: Called when the weapon is first loaded
---------------------------------------------------------]]
function SWEP:Initialize()
    if CLIENT then self.LastIron = CurTime() end
    self:SetHoldType("normal")
end

function SWEP:Holster()
    self:SetIronsights(false)

    return true
end

-- Check whether an object of this player can be rammed
local function canRam(ply)
    return IsValid(ply) and (ply.warranted == true or ply:isWanted() or ply:isArrested())
end

-- Ram action when ramming a door
local function ramDoor(ply, trace, ent)
    if ply:EyePos():DistToSqr(trace.HitPos) > 2025 or (not GAMEMODE.Config.canforcedooropen and ent:getKeysNonOwnable()) then return false end

    local allowed = false

    -- if we need a warrant to get in
    if GAMEMODE.Config.doorwarrants and ent:isKeysOwned() and not ent:isKeysOwnedBy(ply) then
        -- if anyone who owns this door has a warrant for their arrest
        -- allow the police to smash the door in
        for _, v in player.Iterator() do
            if ent:isKeysOwnedBy(v) and canRam(v) then
                allowed = true
                break
            end
        end
    else
        -- door warrants not needed, allow warrantless entry
        allowed = true
    end

    -- Be able to open the door if any member of the door group is warranted
    local keysDoorGroup = ent:getKeysDoorGroup()
    if GAMEMODE.Config.doorwarrants and keysDoorGroup then
        local teamDoors = RPExtraTeamDoors[keysDoorGroup]
        if teamDoors then
            allowed = false
            for _, v in player.Iterator() do
                if table.HasValue(teamDoors, v:Team()) and canRam(v) then
                    allowed = true
                    break
                end
            end
        end
    end

    if CLIENT then return allowed end

    -- Do we have a warrant for this player?
    if not allowed then
        DarkRP.notify(ply, 1, 5, DarkRP.getPhrase("warrant_required"))

        return false
    end

    ent:keysUnLock()
    ent:Fire("open", "", .6)
    ent:Fire("setanimation", "open", .6)

    return true
end

-- Ram action when ramming a vehicle
local function ramVehicle(ply, trace, ent)
    if ply:EyePos():DistToSqr(trace.HitPos) > 10000 then return false end

    if CLIENT then return false end -- Ideally this would return true after ent:GetDriver() check

    local driver = ent:GetDriver()
    if not IsValid(driver) or not driver.ExitVehicle then return false end

    driver:ExitVehicle()
    ent:keysLock()

    return true
end

-- Ram action when ramming a fading door
local function ramFadingDoor(ply, trace, ent)
    if ply:EyePos():DistToSqr(trace.HitPos) > 10000 then return false end

    local Owner = ent:CPPIGetOwner()

    if CLIENT then return canRam(Owner) end

    if not canRam(Owner) then
        DarkRP.notify(ply, 1, 5, DarkRP.getPhrase("warrant_required"))
        return false
    end

    if not ent.fadeActive then
        ent:fadeActivate()
        timer.Simple(5, function() if IsValid(ent) and ent.fadeActive then ent:fadeDeactivate() end end)
    end

    return true
end

-- Ram action when ramming a frozen prop
local function ramProp(ply, trace, ent)
    if ply:EyePos():DistToSqr(trace.HitPos) > 10000 then return false end
    if ent:GetClass() ~= "prop_physics" then return false end

    local Owner = ent:CPPIGetOwner()

    if CLIENT then return canRam(Owner) end

    if not canRam(Owner) then
        DarkRP.notify(ply, 1, 5, DarkRP.getPhrase(GAMEMODE.Config.copscanunweld and "warrant_required_unweld" or "warrant_required_unfreeze"))
        return false
    end

    if GAMEMODE.Config.copscanunweld then
        constraint.RemoveConstraints(ent, "Weld")
    end

    if GAMEMODE.Config.copscanunfreeze then
        ent:GetPhysicsObject():EnableMotion(true)
    end

    return true
end

-- Decides the behaviour of the ram function for the given entity
local function getRamFunction(ply, trace)
    local ent = trace.Entity

    if not IsValid(ent) then return fp{fn.Id, false} end

    local override = hook.Call("canDoorRam", nil, ply, trace, ent)

    return
        override ~= nil     and fp{fn.Id, override}                                 or
        ent:isDoor()        and fp{ramDoor, ply, trace, ent}                        or
        ent:IsVehicle()     and fp{ramVehicle, ply, trace, ent}                     or
        ent.fadeActivate    and fp{ramFadingDoor, ply, trace, ent}                  or
        ent:GetPhysicsObject():IsValid() and not ent:GetPhysicsObject():IsMoveable()
                                         and fp{ramProp, ply, trace, ent}           or
        fp{fn.Id, false} -- no ramming was performed
end

--[[---------------------------------------------------------
Name: SWEP:PrimaryAttack()
Desc: +attack1 has been pressed
---------------------------------------------------------]]
function SWEP:PrimaryAttack()
    if not self:GetIronsights() then return end

    local Owner = self:GetOwner()

    if not IsValid(Owner) then return end

    self:SetNextPrimaryFire(CurTime() + 0.1)

    Owner:LagCompensation(true)
    local trace = Owner:GetEyeTrace()
    Owner:LagCompensation(false)

    local hasRammed = getRamFunction(Owner, trace)()

    if SERVER then
        hook.Call("onDoorRamUsed", GAMEMODE, hasRammed, Owner, trace)
    end

    if not hasRammed then return end

    self:SetNextPrimaryFire(CurTime() + 2.5)

    self:SetTotalUsedMagCount(self:GetTotalUsedMagCount() + 1)

    Owner:SetAnimation(PLAYER_ATTACK1)
    Owner:EmitSound(self.Sound)
    Owner:ViewPunch(Angle(-10, math.Round(util.SharedRandom("DarkRP_DoorRam" .. self:EntIndex() .. "_" .. self:GetTotalUsedMagCount(), -5, 5)), 0))
end

function SWEP:SecondaryAttack()
    if CLIENT then self.LastIron = CurTime() end
    self:SetNextSecondaryFire(CurTime() + 0.30)
    self:SetIronsights(not self:GetIronsights())
    if self:GetIronsights() then
        self:SetHoldType("rpg")
    else
        self:SetHoldType("normal")
    end
end

function SWEP:GetViewModelPosition(pos, ang)
    local Mul = 1

    if self.LastIron > CurTime() - 0.25 then
        Mul = math.Clamp((CurTime() - self.LastIron) / 0.25, 0, 1)
    end

    if self:GetIronsights() then
        Mul = 1-Mul
    end

    ang:RotateAroundAxis(ang:Right(), - 15 * Mul)
    return pos,ang
end

DarkRP.hookStub{
    name = "canDoorRam",
    description = "Called when a player attempts to ram something. Use this to override ram behaviour or to disallow ramming.",
    parameters = {
        {
            name = "ply",
            description = "The player using the door ram.",
            type = "Player"
        },
        {
            name = "trace",
            description = "The trace containing information about the hit position and ram entity.",
            type = "table"
        },
        {
            name = "ent",
            description = "Short for the entity that is about to be hit by the door ram.",
            type = "Entity"
        }
    },
    returns = {
        {
            name = "override",
            description = "Return true to override behaviour, false to disallow ramming and nil (or no value) to defer the decision.",
            type = "boolean"
        }
    },
    realm = "Shared"
}

if SERVER then
    DarkRP.hookStub{
        name = "onDoorRamUsed",
        description = "Called when the door ram has been used.",
        parameters = {
            {
                name = "success",
                description = "Whether the door ram has been successful in ramming.",
                type = "boolean"
            },
            {
                name = "ply",
                description = "The player that used the door ram.",
                type = "Player"
            },
            {
                name = "trace",
                description = "The trace containing information about the hit position and ram entity.",
                type = "table"
            }
        },
        returns = {

        }
    }
end

--addons/bricksenchancedsweps/lua/weapons/dsr_metal_detector.lua:

AddCSLuaFile()

SWEP.PrintName = "Metal Dedektör" -- change the name
SWEP.Author = "Brickwall"
SWEP.Instructions = "Sol tık ile oyuncunun üstündeki silahları kontrol eder"

SWEP.Category = "DarkRP SWEP Replacements" -- change the name


SWEP.Slot = 0
SWEP.SlotPos = 4

SWEP.Spawnable = true

SWEP.ViewModel = Model( "models/sterling/c_enhanced_metaldetector.mdl" ) -- just change the model 
SWEP.WorldModel = ( "models/sterling/w_enhanced_metaldetector.mdl" )
SWEP.ViewModelFOV = 85
SWEP.UseHands = true

SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = true
SWEP.Secondary.Ammo = "none"

SWEP.DrawAmmo = false
SWEP.Base = "weapon_base"

SWEP.Secondary.Ammo = "none"

function SWEP:Initialize()
	self:SetWeaponHoldType( "pistol" )
end

function SWEP:GetStrippableWeapons(ent, callback)
    CAMI.PlayerHasAccess(ent, "DarkRP_GetAdminWeapons", function(access)
        for _, v in pairs(ent:GetWeapons()) do
            if not v:IsValid() then continue end
            local class = v:GetClass()

            if GAMEMODE.Config.weaponCheckerHideDefault and (table.HasValue(GAMEMODE.Config.DefaultWeapons, class) or
                access and table.HasValue(GAMEMODE.Config.AdminWeapons, class) or
                ent:getJobTable() and ent:getJobTable().weapons and table.HasValue(ent:getJobTable().weapons, class)) then
                continue
            end

            if (GAMEMODE.Config.weaponCheckerHideNoLicense and GAMEMODE.NoLicense[class]) or GAMEMODE.Config.noStripWeapons[class] then continue end

            callback(v)
        end
    end)
end

function SWEP:PrimaryAttack()
	self.Weapon:SendWeaponAnim( ACT_VM_PRIMARYATTACK )

	self:SetNextPrimaryFire(CurTime() + 1.7)

    self:GetOwner():LagCompensation(true)
    local trace = self:GetOwner():GetEyeTrace()
    self:GetOwner():LagCompensation(false)

    local ent = trace.Entity
    if not IsValid(ent) or not ent:IsPlayer() or ent:GetPos():DistToSqr(self:GetOwner():GetPos()) > 10000 then
        return
    end

    if not IsFirstTimePredicted() then return end
    if ent:GetNWBool("mitekip", false) == true then 
        self:GetOwner():ChatPrint("Kişi MİT Ajanı ve ajanlığını yapıyor yani senin tarafında biri, onu ifşa etme!")
        self:EmitSound("bricksenhancedsweps/beep.wav", 50, 100)
        return 
    end 

    local weps = {}
    self:GetStrippableWeapons(ent, function(wep)
        table.insert(weps, wep)
    end)

	hook.Call("playerWeaponsChecked", nil, self:GetOwner(), ent, weps)
	timer.Simple( 1, function() 
        if( not IsValid( ent ) or not IsValid( self.Owner ) or self.Owner:GetActiveWeapon() != self.Weapon ) then return end 
 
		self:EmitSound("bricksenhancedsweps/beep.wav", 50, 100)

        if( timer.Exists( "BES_WeaponChecker_BG_" .. self.Owner:SteamID64() ) ) then
            timer.Remove( "BES_WeaponChecker_BG_" .. self.Owner:SteamID64() )
        end

		if( #weps > 0 ) then
            self.Owner:GetViewModel():SetBodygroup( 1, 2 )
        else
			self.Owner:GetViewModel():SetBodygroup( 1, 1 )
        end
        
        timer.Create( "BES_WeaponChecker_BG_" .. self.Owner:SteamID64(), 2, 1, function() 
            if( not IsValid( self.Owner ) or self.Owner:GetActiveWeapon() != self.Weapon ) then return end 

            self.Owner:GetViewModel():SetBodygroup( 1, 0 )
        end )
		--print(ent:getPocketItems(), " varrr")
            local maxK = 0
if SERVER then 
    for k in pairs(ent:getPocketItems()) do
        if k < maxK then continue end
        maxK = k
    end
    if maxK >= 1 then
        timer.Simple(.1, function()
        self:GetOwner():ChatPrint("Kişi cebinde bir şeyler taşıyor!")
    end)
        return
    end
end
		if not CLIENT then return end
		
		self:PrintWeapons(ent, DarkRP.getPhrase("persons_weapons", ent:Nick()))

    end )
end 

function SWEP:PrintWeapons(ent, weaponsFoundPhrase)

    if ent:GetNWBool("mitekip", false) == true then 
        self:GetOwner():ChatPrint("Kişi MİT Ajanı ve ajanlığını yapıyor yani senin tarafında biri, onu ifşa etme!")
        return 
    end 

    if ent:isCP() then  
        self:GetOwner():ChatPrint("Kişi polis birimlerinden olduğu için bakamazsın!.")
         return 
     end
          
     if ent:getDarkRPVar("HasGunlicense") then  
        self:GetOwner():ChatPrint("Kişinin silah lisansı var.")
         return 
     end

    local result = {}
    local weps = {}
    self:GetStrippableWeapons(ent, function(wep)
        table.insert(weps, wep)
    end)

    for _, wep in ipairs(weps) do
        table.insert(result, wep:GetPrintName() and language.GetPhrase(wep:GetPrintName()) or wep:GetClass())
    end

    result = table.concat(result, ", ")


      

    if result == "" then
        self:GetOwner():ChatPrint(DarkRP.getPhrase("no_illegal_weapons", ent:Nick()))
        return
    end

    self:GetOwner():ChatPrint(weaponsFoundPhrase)
    if string.len(result) >= 126 then
        local amount = math.ceil(string.len(result) / 126)
        for i = 1, amount, 1 do
            self:GetOwner():ChatPrint(string.sub(result, (i-1) * 126, i * 126 - 1))
        end
    else
        self:GetOwner():ChatPrint(result)
    end
end

function SWEP:SecondaryAttack()
	self.Weapon:SendWeaponAnim( ACT_VM_IDLE )
end

function SWEP:Reload()
	self.Weapon:SendWeaponAnim( ACT_VM_RELOAD )
end
--addons/bricksenchancedsweps/lua/weapons/dsr_taser.lua:

AddCSLuaFile()
SWEP.PrintName = "Tazer" -- change the name
SWEP.Instructions = "Sol tık ile şokla oyuncuları"

SWEP.Category = "DarkRP SWEP Replacements" -- change the name


SWEP.Slot = 1
SWEP.SlotPos = 4

SWEP.Spawnable = true

SWEP.ViewModel = Model( "models/sterling/c_enhanced_taser.mdl" ) -- just change the model 
SWEP.WorldModel = ( "models/sterling/w_enhanced_taser.mdl" )
SWEP.ViewModelFOV = 85
SWEP.UseHands = true

SWEP.Primary.Sound = Sound("Weapon_Deagle.Single")
SWEP.Primary.Recoil = 5.1
SWEP.Primary.Damage = 25
SWEP.Primary.NumShots = 1
SWEP.Primary.Cone = 0.01
SWEP.Primary.ClipSize = 1
SWEP.Primary.Delay = 0.3
SWEP.Primary.DefaultClip = 5
SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = "stungun"

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = true
SWEP.Secondary.Ammo = "none"

SWEP.DrawAmmo = true
SWEP.Base = "weapon_base"

SWEP.Secondary.Ammo = "none"

game.AddAmmoType({
	name = "stungun",
	dmgtype = DMG_GENERIC,
	tracer = TRACER_NONE,
	plydmg = 0,
	npcdmg = 0,
	force = 0,
	minsplash = 0,
	maxsplash = 0
})

if( CLIENT ) then
	language.Add( "stungun_ammo", "Stungun Cartridge" )
end

DarkRP.createAmmoType("stungun", {
	name = "Taser Mermisi",
	model = "models/sterling/enhanced_taser_ammobox.mdl",
	price = 150,
	amountGiven = 12
})

sound.Add( {
	name = "bes_taser",
	channel = CHAN_STATIC,
	volume = 1.0,
	level = 80,
	pitch = { 95, 110 },
	sound = "ambient/energy/electric_loop.wav"
} )

function SWEP:Initialize()
	self:SetWeaponHoldType( "pistol" )
end

function SWEP:PrimaryAttack()
	if self:Clip1() <= 0 then return end
	
	self.Weapon:SendWeaponAnim( ACT_VM_PRIMARYATTACK_1 )
	self:TakePrimaryAmmo( 1 )

	self.Owner:LagCompensation(true)
	local tr = util.TraceLine(util.GetPlayerTrace( self.Owner ))
	self.Owner:LagCompensation(false)

	local effectdata = EffectData()
	effectdata:SetOrigin( tr.HitPos )
	effectdata:SetStart( self.Owner:GetShootPos() )
	effectdata:SetAttachment( 1 )
	effectdata:SetEntity( self )
	util.Effect( "ToolTracer", effectdata )

	self:EmitSound("npc/turret_floor/shoot1.wav",100,100)

	if( tr.Entity and IsValid( tr.Entity ) and tr.Entity:IsPlayer() and not tr.Entity:GetNWBool( "BES_TASERED", false ) and tr.Entity:GetPos():DistToSqr( self:GetPos() ) < 215000 ) then
		local UserID = tr.Entity:UserID()
		timer.Create( "BES_TIMER_TASER_" .. UserID, 1, 0, function()
			if( tr.Entity and IsValid( tr.Entity ) and tr.Entity:IsPlayer() and tr.Entity:GetNWBool( "BES_TASERED", false ) ) then
				tr.Entity:DoCustomAnimEvent( PLAYERANIMEVENT_CUSTOM_GESTURE, table.Random( { 117, 119, 124 } ) )
			else
				timer.Remove( "BES_TIMER_TASER_" .. UserID )
			end
		end )

		if SERVER then
			tr.Entity:EmitSound( "bes_taser" )
			tr.Entity:SetNWBool( "BES_TASERED", true )
			tr.Entity:Freeze( true )
			timer.Simple( 5, function()
				if( tr.Entity and IsValid( tr.Entity ) and tr.Entity:IsPlayer() and tr.Entity:GetNWBool( "BES_TASERED", false ) ) then
					if not GlorifiedHandcuffs.IsPlayerHandcuffed( ply ) then 
					tr.Entity:Freeze( false )
					end 
					tr.Entity:SetNWBool( "BES_TASERED", false )
					tr.Entity:StopSound( "bes_taser" )
				end
			end )
		end
	end
end 

function SWEP:SecondaryAttack()

end

function SWEP:Reload()
	self.Weapon:DefaultReload( ACT_VM_RELOAD )
end

hook.Add( "PlayerDeath", "BES_PlayerDeath_Taser", function( victim )
	if( IsValid( victim ) and victim:GetNWBool( "BES_TASERED", false ) ) then
		victim:Freeze( false )
		victim:SetNWBool( "BES_TASERED", false )
		victim:StopSound( "bes_taser" )
	end
end )

hook.Add( "EntityRemoved", "BES_EntityRemoved_Taser", function( ent )
	if( IsValid( ent ) and ent:GetNWBool( "BES_TASERED", false ) ) then
		ent:SetNWBool( "BES_TASERED", false )
		ent:StopSound( "bes_taser" )
	end
end )
--lua/weapons/gmod_tool/stools/advdupe2.lua:
--[[
	Title: Adv. Dupe 2 Tool

	Desc: Defines the AD2 tool and assorted functionalities.

	Author: TB

	Version: 1.0
]]

TOOL.Category = "Construction"
TOOL.Name = "#Tool.advdupe2.name"
cleanup.Register( "AdvDupe2" )
require( "controlpanel" )

if(SERVER) then
	CreateConVar("sbox_maxgmod_contr_spawners",5)

	local phys_constraint_system_types = {
		Weld          = true,
		Rope          = true,
		Elastic       = true,
		Slider        = true,
		Axis          = true,
		AdvBallsocket = true,
		Motor         = true,
		Pulley        = true,
		Ballsocket    = true,
		Winch         = true,
		Hydraulic     = true,
		WireMotor     = true,
		WireHydraulic = true
	}
	--Orders constraints so that the dupe uses as little constraint systems as possible
	local function GroupConstraintOrder( ply, constraints )
		--First separate the nocollides, sorted, and unsorted constraints
		local sorted, unsorted = {}, {}
		for k, v in pairs(constraints) do
			if phys_constraint_system_types[v.Type] then
				sorted[#sorted+1] = v
			else
				unsorted[#unsorted+1] = v
			end
		end

		local sortingSystems = {}
		local fullSystems = {}
		local function buildSystems(input)
			while next(input) ~= nil do
				for k, v in pairs(input) do
					for systemi, system in pairs(sortingSystems) do
						for _, target in pairs(system) do
							for x = 1, 4 do
								if v.Entity[x] then
									for y = 1, 4 do
										if target.Entity[y] and v.Entity[x].Index == target.Entity[y].Index then
											system[#system + 1] = v
											if #system == 100 then
												fullSystems[#fullSystems + 1] = system
												table.remove(sortingSystems, systemi)
											end
											input[k] = nil
											goto super_loopbreak
										end
									end
								end
							end
						end
					end
				end

				--Normally skipped by the goto unless no cluster is found. If so, make a new one.
				local k = next(input)
				sortingSystems[#sortingSystems + 1] = {input[k]}
				input[k] = nil

				::super_loopbreak::
			end
		end
		buildSystems(sorted)

		local ret = {}
		for _, system in pairs(fullSystems) do
			for _, v in pairs(system) do
				ret[#ret + 1] = v
			end
		end
		for _, system in pairs(sortingSystems) do
			for _, v in pairs(system) do
				ret[#ret + 1] = v
			end
		end
		for k, v in pairs(unsorted) do
			ret[#ret + 1] = v
		end

		if #fullSystems ~= 0 then
			ply:ChatPrint("DUPLICATOR: WARNING, Number of constraints exceeds 100: (".. #ret .."). Constraint sorting might not work as expected.")
		end

		return ret
	end

	local function CreationConstraintOrder( constraints )
		local ret = {}
		for k, v in pairs( constraints ) do
			ret[#ret + 1] = k
		end
		table.sort(ret)
		for i = 1, #ret do
			ret[i] = constraints[ret[i]]
		end
		return ret
	end

	local function GetSortedConstraints( ply, constraints )
		if ply:GetInfo("advdupe2_sort_constraints") ~= "0" then
			return GroupConstraintOrder( ply, constraints )
		else
			return CreationConstraintOrder( constraints )
		end
	end

	local areacopy_classblacklist = {
		gmod_anchor = true
	}

	local function PlayerCanDupeCPPI(ply, ent)
		if not AdvDupe2.duplicator.IsCopyable(ent) or areacopy_classblacklist[ent:GetClass()] then return false end
		return ent:CPPIGetOwner()==ply
	end

	-- Code from WireLib.CanTool
	local zero = Vector(0, 0, 0)
	local norm = Vector(1, 0, 0)

	local tr = { ---@type TraceResult
		Hit = true, HitNonWorld = true, HitNoDraw = false, HitSky = false, AllSolid = true,
		HitNormal = zero, Normal = norm,

		Fraction = 1, FractionLeftSolid = 0,
		HitBox = 0, HitGroup = 0, HitTexture = "**studio**",
		MatType = 0, PhysicsBone = 0, SurfaceProps = 0, DispFlags = 0, Contents = 0,

		Entity = NULL, HitPos = zero, StartPos = zero,
	}

	local function PlayerCanDupeTool(ply, ent)
		if not AdvDupe2.duplicator.IsCopyable(ent) or areacopy_classblacklist[ent:GetClass()] then return false end

		local pos = ent:GetPos()
		tr.Entity, tr.HitPos, tr.StartPos = ent, pos, pos

		return hook.Run( "CanTool", ply, tr, "advdupe2" ) ~= false
	end

	--Find all the entities in a box, given the adjacent corners and the player
	local function FindInBox(min, max, ply)
		local PPCheck = (tobool(ply:GetInfo("advdupe2_copy_only_mine")) and ply.CPPIGetOwner~=nil) and PlayerCanDupeCPPI or PlayerCanDupeTool
		local EntTable = {}
		for _, ent in ents.Iterator() do
			local pos = ent:GetPos()
			if (pos.X>=min.X) and (pos.X<=max.X) and
				 (pos.Y>=min.Y) and (pos.Y<=max.Y) and
				 (pos.Z>=min.Z) and (pos.Z<=max.Z) and PPCheck( ply, ent ) then
				EntTable[ent:EntIndex()] = ent
			end
		end

		return EntTable
	end

	--[[
		Name: GetDupeAngleOffset
		Desc: Retrieves duplication angle offsets from player
		Returns: <angle> Created angle
	]]
	local function GetDupeAngleOffset(ply)
		local p = math.Clamp(ply:GetInfoNum("advdupe2_offset_pitch", 0), -180, 180)
		local y = math.Clamp(ply:GetInfoNum("advdupe2_offset_yaw"  , 0), -180, 180)
		local r = math.Clamp(ply:GetInfoNum("advdupe2_offset_roll" , 0), -180, 180)
		return Angle(p, y, r)
	end

	--[[
		Name: GetDupeElevation
		Desc: Retrieves duplication Z elevation
		Returns: <number> Dupe elevation
	]]
	local function GetDupeElevation(ply)
		local con = ply:GetInfoNum("advdupe2_offset_z", 0)
		local enz = (tonumber(ply.AdvDupe2.HeadEnt.Z) or 0)
		return math.Clamp(con + enz, -32000, 32000)
	end

	--[[
		Name: LeftClick
		Desc: Defines the tool's behavior when the player left-clicks.
		Params: <trace> trace
		Returns: <boolean> success
	]]
	function TOOL:LeftClick( trace )
		if(not trace) then return false end

		local ply = self:GetOwner()
		local dupe = ply.AdvDupe2

		if not (dupe and dupe.Entities) then return false end

		if(dupe.Pasting or dupe.Downloading) then
			AdvDupe2.Notify(ply,"Advanced Duplicator 2 is busy.",NOTIFY_ERROR)
			return false
		end

		dupe.Angle = GetDupeAngleOffset(ply)
		dupe.Position = Vector(trace.HitPos)
		dupe.Position.z = dupe.Position.z + GetDupeElevation(ply)

		if(tobool(ply:GetInfo("advdupe2_offset_world"))) then
			dupe.Angle = dupe.Angle - dupe.Entities[dupe.HeadEnt.Index].PhysicsObjects[0].Angle
		end

		dupe.Pasting = true
		AdvDupe2.Notify(ply,"Pasting...")
		local origin
		if(tobool(ply:GetInfo("advdupe2_original_origin"))) then
			origin = dupe.HeadEnt.Pos
		end

		AdvDupe2.InitPastingQueue(ply, dupe.Position, dupe.Angle, origin,
			tobool(ply:GetInfo("advdupe2_paste_constraints")),
			tobool(ply:GetInfo("advdupe2_paste_parents")),
			tobool(ply:GetInfo("advdupe2_paste_disparents")),
			tobool(ply:GetInfo("advdupe2_paste_protectoveride")))

		return true
	end

	--[[
		Name: RightClick
		Desc: Defines the tool's behavior when the player right-clicks.
		Params: <trace> trace
		Returns: <boolean> success
	]]
	function TOOL:RightClick( trace )
		local ply = self:GetOwner()
		local dupe = ply.AdvDupe2

		if not dupe then dupe = {}; ply.AdvDupe2 = dupe end

		if(dupe.Pasting or dupe.Downloading) then
			AdvDupe2.Notify(ply,"Advanced Duplicator 2 is busy.", NOTIFY_ERROR)
			return false
		end

		--Set Area Copy on or off
		if( ply:KeyDown(IN_SPEED) and not ply:KeyDown(IN_WALK) ) then
			if(self:GetStage()==0) then
				AdvDupe2.DrawSelectBox(ply)
				self:SetStage(1)
				return false
			elseif(self:GetStage()==1) then
				AdvDupe2.RemoveSelectBox(ply)
				self:SetStage(0)
				return false
			end
		end

		if(not trace or not trace.Hit) then return false end

		local Entities, Constraints, AddOne
		local HeadEnt = {}
		--If area copy is on
		if(self:GetStage()==1) then
			local area_size = math.Clamp(tonumber(ply:GetInfo("advdupe2_area_copy_size")) or 50, 0, 30720)
			local Pos = trace.HitNonWorld and trace.Entity:GetPos() or trace.HitPos
			local T = (Vector(area_size,area_size,area_size)+Pos)
			local B = (Vector(-area_size,-area_size,-area_size)+Pos)

			local Ents = FindInBox(B,T, ply)
			local _, Ent = next(Ents)
			if not Ent then
				self:SetStage(0)
				AdvDupe2.RemoveSelectBox(ply)
				return true
			end

			Ent = trace.HitNonWorld and trace.Entity or Ent
			HeadEnt.Index = Ent:EntIndex()
			HeadEnt.Pos = Ent:GetPos()

			Entities, Constraints = AdvDupe2.duplicator.AreaCopy(ply, Ents, HeadEnt.Pos, tobool(ply:GetInfo("advdupe2_copy_outside")))

			self:SetStage(0)
			AdvDupe2.RemoveSelectBox(ply)
		elseif trace.HitNonWorld then	--Area Copy is off
			-- Filter duplicator blocked entities out.
			if not AdvDupe2.duplicator.IsCopyable( trace.Entity ) then
				return false
			end

			--If Alt is being held, add a prop to the dupe
			if(ply:KeyDown(IN_WALK) and dupe.Entities~=nil and next(dupe.Entities)~=nil) then
				Entities = dupe.Entities
				Constraints = dupe.Constraints
				HeadEnt = dupe.HeadEnt

				AdvDupe2.duplicator.Copy( ply, trace.Entity, Entities, Constraints, HeadEnt.Pos)

				--Only add the one ghost
				AddOne = Entities[trace.Entity:EntIndex()]
			else
				Entities = {}
				Constraints = {}
				HeadEnt.Index = trace.Entity:EntIndex()
				HeadEnt.Pos = trace.HitPos

				AdvDupe2.duplicator.Copy( ply, trace.Entity, Entities, Constraints, trace.HitPos )
			end
		else --Non valid entity or clicked the world
			if dupe.Entities then
				--clear the dupe
				net.Start("AdvDupe2_RemoveGhosts")
				net.Send(ply)
				dupe.Entities = nil
				dupe.Constraints = nil
				net.Start("AdvDupe2_ResetDupeInfo")
				net.Send(ply)
				AdvDupe2.ResetOffsets(ply)
				return true
			else
				--select all owned props
				Entities = {}
				local PPCheck = (tobool(ply:GetInfo("advdupe2_copy_only_mine")) and CPPI~=nil) and PlayerCanDupeCPPI or PlayerCanDupeTool
				for _, ent in ents.Iterator() do
					if PPCheck( ply, ent ) then
						Entities[ent:EntIndex()] = ent
					end
				end

				local _, Ent = next(Entities)
				if not Ent then
				net.Start("AdvDupe2_RemoveGhosts")
				net.Send(ply)
					return true
				end

				HeadEnt.Index = Ent:EntIndex()
				HeadEnt.Pos = Ent:GetPos()

				Entities, Constraints = AdvDupe2.duplicator.AreaCopy(ply, Entities, HeadEnt.Pos, tobool(ply:GetInfo("advdupe2_copy_outside")))
			end
		end

		if not HeadEnt.Z then
			local WorldTrace = util.TraceLine({
				mask   = MASK_NPCWORLDSTATIC,
				start  = HeadEnt.Pos + Vector(0,0,1),
				endpos = HeadEnt.Pos-Vector(0,0,50000)
			})

			HeadEnt.Z = WorldTrace.Hit and math.abs(HeadEnt.Pos.Z - WorldTrace.HitPos.Z) or 0
		end

		dupe.HeadEnt = HeadEnt
		dupe.Entities = Entities
		dupe.Constraints = GetSortedConstraints(ply, Constraints)
		dupe.Revision = AdvDupe2.CodecRevision

		net.Start("AdvDupe2_SetDupeInfo")
			net.WriteString("")
			net.WriteString(ply:Nick())
			net.WriteString(os.date("%d %B %Y"))
			net.WriteString(os.date("%I:%M %p"))
			net.WriteString("")
			net.WriteString("")
			net.WriteString(table.Count(dupe.Entities))
			net.WriteString(#dupe.Constraints)
		net.Send(ply)

		if AddOne then
			AdvDupe2.SendGhost(ply, AddOne)
		else
			AdvDupe2.SendGhosts(ply)
		end

		AdvDupe2.ResetOffsets(ply)

		return true
	end

	--Checks table, re-draws loading bar, and recreates ghosts when tool is pulled out
	function TOOL:Deploy()
		local ply = self:GetOwner()
		local dupe = ply.AdvDupe2

		if not dupe then dupe = {}; ply.AdvDupe2 = dupe end

		if(not dupe.Entities) then return end

		net.Start("AdvDupe2_StartGhosting")
		net.Send(ply)

		if(dupe.Queued) then
			AdvDupe2.InitProgressBar(ply, "Queued: ")
			return
		end

		if(dupe.Pasting) then
			AdvDupe2.InitProgressBar(ply, "Pasting: ")
			return
		else
			if(dupe.Uploading) then
				AdvDupe2.InitProgressBar(ply, "Opening: ")
				return
			elseif(dupe.Downloading) then
				AdvDupe2.InitProgressBar(ply, "Saving: ")
				return
			end
		end

	end

	--Removes progress bar
	function TOOL:Holster()
		AdvDupe2.RemoveProgressBar(self:GetOwner())
	end

	--[[
		Name: Reload
		Desc: Creates an Advance Contraption Spawner.
		Params: <trace> trace
		Returns: <boolean> success
	]]
	function TOOL:Reload( trace )
		if(not trace.Hit) then return false end

		local ply = self:GetOwner()
		local dupe = ply.AdvDupe2

		if not dupe then dupe = {}; ply.AdvDupe2 = dupe end

		if(self:GetStage()==1) then
			local areasize = math.Clamp(tonumber(ply:GetInfo("advdupe2_area_copy_size")) or 50, 0, 30720)
			net.Start("AdvDupe2_CanAutoSave")
				net.WriteVector(trace.HitPos)
				net.WriteFloat(areasize)
				if(trace.Entity) then
					net.WriteUInt(trace.Entity:EntIndex(), 16)
				else
					net.WriteUInt(0, 16)
				end
			net.Send(ply)
			self:SetStage(0)
			AdvDupe2.RemoveSelectBox(ply)
			dupe.TempAutoSavePos = trace.HitPos
			dupe.TempAutoSaveSize = areasize
			dupe.TempAutoSaveOutSide = tobool(ply:GetInfo("advdupe2_copy_outside"))
			return true
		end

		--If a contraption spawner was clicked then update it with the current settings
		if(trace.Entity:GetClass()=="gmod_contr_spawner") then
			local delay = tonumber(ply:GetInfo("advdupe2_contr_spawner_delay"))
			local undo_delay = tonumber(ply:GetInfo("advdupe2_contr_spawner_undo_delay"))
			local min
			local max
			if(not delay) then
				delay = tonumber(GetConVarString("AdvDupe2_MinContraptionSpawnDelay")) or 0.2
			else
				if(not game.SinglePlayer()) then
					min = tonumber(GetConVarString("AdvDupe2_MinContraptionSpawnDelay")) or 0.2
					if (delay < min) then
						delay = min
					end
				elseif(delay<0) then
					delay = 0
				end
			end

			if(not undo_delay) then
				undo_delay = tonumber(GetConVarString("AdvDupe2_MinContraptionUndoDelay"))
			else
				if(not game.SinglePlayer()) then
					min = tonumber(GetConVarString("AdvDupe2_MinContraptionUndoDelay")) or 0.1
					max = tonumber(GetConVarString("AdvDupe2_MaxContraptionUndoDelay")) or 60
					if(undo_delay < min) then
						undo_delay = min
					elseif(undo_delay > max) then
						undo_delay = max
					end
				elseif(undo_delay < 0) then
					undo_delay = 0
				end
			end

			trace.Entity:GetTable():SetOptions(
				ply, delay, undo_delay,
				tonumber(ply:GetInfo("advdupe2_contr_spawner_key")),
				tonumber(ply:GetInfo("advdupe2_contr_spawner_undo_key")),
				tonumber(ply:GetInfo("advdupe2_contr_spawner_disgrav")) or 0,
				tonumber(ply:GetInfo("advdupe2_contr_spawner_disdrag")) or 0,
				tonumber(ply:GetInfo("advdupe2_contr_spawner_addvel")) or 1 )

			return true
		end

		--Create a contraption spawner
		if dupe and dupe.Entities then
			local headent = dupe.Entities[dupe.HeadEnt.Index]
			local Pos, Ang

			if(headent) then
				if(tobool(ply:GetInfo("advdupe2_original_origin"))) then
					Pos = dupe.HeadEnt.Pos + headent.PhysicsObjects[0].Pos
					Ang = headent.PhysicsObjects[0].Angle
				else
					local EntAngle = headent.PhysicsObjects[0].Angle
					if(tobool(ply:GetInfo("advdupe2_offset_world"))) then EntAngle = Angle(0,0,0) end
					trace.HitPos.Z = trace.HitPos.Z + GetDupeElevation(ply)
					Pos, Ang = LocalToWorld(headent.PhysicsObjects[0].Pos, EntAngle, trace.HitPos, GetDupeAngleOffset(ply))
				end
			else
				AdvDupe2.Notify(ply, "Invalid head entity to spawn contraption spawner.")
				return false
			end

			if(headent.Class=="gmod_contr_spawner") then
				AdvDupe2.Notify(ply, "Cannot make a contraption spawner from a contraption spawner.")
				return false
			end


			local spawner = MakeContraptionSpawner(
				ply, Pos, Ang, dupe.HeadEnt.Index,
				table.Copy(dupe.Entities),
				table.Copy(dupe.Constraints),
				tonumber(ply:GetInfo("advdupe2_contr_spawner_delay")),
				tonumber(ply:GetInfo("advdupe2_contr_spawner_undo_delay")), headent.Model,
				tonumber(ply:GetInfo("advdupe2_contr_spawner_key")),
				tonumber(ply:GetInfo("advdupe2_contr_spawner_undo_key")),
				tonumber(ply:GetInfo("advdupe2_contr_spawner_disgrav")) or 0,
				tonumber(ply:GetInfo("advdupe2_contr_spawner_disdrag")) or 0,
				tonumber(ply:GetInfo("advdupe2_contr_spawner_addvel")) or 1,
				tonumber(ply:GetInfo("advdupe2_contr_spawner_hideprops")) or 0)

			ply:AddCleanup( "AdvDupe2", spawner )
			undo.Create("gmod_contr_spawner")
				undo.AddEntity( spawner )
				undo.SetPlayer( ply )
			undo.Finish()

			return true
		end
	end

	--Called to clean up the tool when pasting is finished or undo during pasting
	function AdvDupe2.FinishPasting(Player, Paste)
		Player.AdvDupe2.Pasting=false
		AdvDupe2.RemoveProgressBar(Player)
		if(Paste) then AdvDupe2.Notify(Player,"Finished Pasting!") end
	end

	--function for creating a contraption spawner
	function MakeContraptionSpawner( ply, Pos, Ang, HeadEnt, EntityTable, ConstraintTable, delay, undo_delay, model, key, undo_key, disgrav, disdrag, addvel, hideprops)

		if not ply:CheckLimit("gmod_contr_spawners") then return nil end

		if(not game.SinglePlayer()) then
			if(table.Count(EntityTable)>tonumber(GetConVarString("AdvDupe2_MaxContraptionEntities"))) then
				AdvDupe2.Notify(ply,"Contraption Spawner exceeds the maximum amount of "..GetConVarString("AdvDupe2_MaxContraptionEntities").." entities for a spawner!",NOTIFY_ERROR)
				return false
			end
			if(#ConstraintTable>tonumber(GetConVarString("AdvDupe2_MaxContraptionConstraints"))) then
				AdvDupe2.Notify(ply,"Contraption Spawner exceeds the maximum amount of "..GetConVarString("AdvDupe2_MaxContraptionConstraints").." constraints for a spawner!",NOTIFY_ERROR)
				return false
			end
		end

		local spawner = ents.Create("gmod_contr_spawner")
		if not IsValid(spawner) then return end

		spawner:SetPos(Pos)
		spawner:SetAngles(Ang)
		spawner:SetModel(model)
		spawner:SetRenderMode(RENDERMODE_TRANSALPHA)
		spawner:SetCreator(ply)
		spawner:Spawn()

		duplicator.ApplyEntityModifiers(ply, spawner)

		if IsValid(spawner:GetPhysicsObject()) then
			spawner:GetPhysicsObject():EnableMotion(false)
		end

		local min
		local max
		if(not delay) then
			delay = tonumber(GetConVarString("AdvDupe2_MinContraptionSpawnDelay")) or 0.2
		else
			if(not game.SinglePlayer()) then
				min = tonumber(GetConVarString("AdvDupe2_MinContraptionSpawnDelay")) or 0.2
				if (delay < min) then
					delay = min
				end
			elseif(delay<0) then
				delay = 0
			end
		end

		if(not undo_delay) then
			undo_delay = tonumber(GetConVarString("AdvDupe2_MinContraptionUndoDelay"))
		else
			if(not game.SinglePlayer()) then
				min = tonumber(GetConVarString("AdvDupe2_MinContraptionUndoDelay")) or 0.1
				max = tonumber(GetConVarString("AdvDupe2_MaxContraptionUndoDelay")) or 60
				if(undo_delay < min) then
					undo_delay = min
				elseif(undo_delay > max) then
					undo_delay = max
				end
			elseif(undo_delay < 0) then
				undo_delay = 0
			end
		end

		-- Set options
		spawner:SetPlayer(ply)
		spawner:GetTable():SetOptions(ply, delay, undo_delay, key, undo_key, disgrav, disdrag, addvel, hideprops)

		local tbl = {
			ply        = ply,
			delay      = delay,
			undo_delay = undo_delay,
			disgrav    = disgrav,
			disdrag    = disdrag,
			addvel     = addvel,
			hideprops  = hideprops
		}
		table.Merge(spawner:GetTable(), tbl)
		spawner:SetDupeInfo(HeadEnt, EntityTable, ConstraintTable)
		spawner:AddGhosts(ply)

		ply:AddCount("gmod_contr_spawners", spawner)
		ply:AddCleanup("gmod_contr_spawner", spawner)
		return spawner
	end

	duplicator.RegisterEntityClass("gmod_contr_spawner", MakeContraptionSpawner,
		"Pos", "Ang", "HeadEnt", "EntityTable", "ConstraintTable", "delay",
		"undo_delay", "model", "key", "undo_key", "disgrav", "disdrag", "addvel", "hideprops")

	function AdvDupe2.InitProgressBar(ply,label)
		net.Start("AdvDupe2_InitProgressBar")
			net.WriteString(label)
		net.Send(ply)
	end

	function AdvDupe2.DrawSelectBox(ply)
		net.Start("AdvDupe2_DrawSelectBox")
		net.Send(ply)
	end

	function AdvDupe2.RemoveSelectBox(ply)
		net.Start("AdvDupe2_RemoveSelectBox")
		net.Send(ply)
	end

	function AdvDupe2.UpdateProgressBar(ply,percent)
		net.Start("AdvDupe2_UpdateProgressBar")
			net.WriteFloat(percent)
		net.Send(ply)
	end

	function AdvDupe2.RemoveProgressBar(ply)
		net.Start("AdvDupe2_RemoveProgressBar")
		net.Send(ply)
	end

	--Reset the offsets of height, pitch, yaw, and roll back to default
	function AdvDupe2.ResetOffsets(ply, keep)

		if(not keep) then
			ply.AdvDupe2.Name = nil
		end
		net.Start("AdvDupe2_ResetOffsets")
		net.Send(ply)
	end

	net.Receive("AdvDupe2_CanAutoSave", function(len, ply, len2)

		local desc = net.ReadString()
		local ent = net.ReadInt(16)
		local dupe = ply.AdvDupe2

		if(ent~=0) then
			dupe.AutoSaveEnt = ent
			if(ply:GetInfo("advdupe2_auto_save_contraption")=="1") then
				dupe.AutoSaveEnt = ents.GetByIndex( dupe.AutoSaveEnt )
			end
		else
			if(ply:GetInfo("advdupe2_auto_save_contraption")=="1") then
				AdvDupe2.Notify(ply, "No entity selected to auto save contraption.", NOTIFY_ERROR)
				return
			end
			dupe.AutoSaveEnt = nil
		end

		dupe.AutoSavePos = dupe.TempAutoSavePos
		dupe.AutoSaveSize = dupe.TempAutoSaveSize
		dupe.AutoSaveOutSide = dupe.TempAutoSaveOutSide
		dupe.AutoSaveContr = ply:GetInfo("advdupe2_auto_save_contraption")=="1"
		dupe.AutoSaveDesc = desc

		local time = math.Clamp(tonumber(ply:GetInfo("advdupe2_auto_save_time")) or 2, 2, 30)
		if(game.SinglePlayer()) then
			dupe.AutoSavePath = net.ReadString()
		end

		AdvDupe2.Notify(ply, "Your area will be auto saved every "..(time*60).." seconds.")
		local name = "AdvDupe2_AutoSave_"..ply:UniqueID()
		if(timer.Exists(name)) then
			timer.Adjust(name, time*60, 0)
			return
		end
		timer.Create(name, time*60, 0, function()
			if(not IsValid(ply)) then
				timer.Remove(name)
				return
			end

			local dupe = ply.AdvDupe2
			if(dupe.Downloading) then
				AdvDupe2.Notify(ply, "Skipping auto save, tool is busy.", NOTIFY_ERROR)
				return
			end

			local Tab = {Entities={}, Constraints={}, HeadEnt={}}

			if(dupe.AutoSaveContr) then
				if(not IsValid(dupe.AutoSaveEnt)) then
					timer.Remove(name)
					AdvDupe2.Notify(ply, "Head entity for auto save no longer valid; stopping auto save.", NOTIFY_ERROR)
					return
				end

				Tab.HeadEnt.Index = dupe.AutoSaveEnt:EntIndex()
				Tab.HeadEnt.Pos = dupe.AutoSaveEnt:GetPos()

				local WorldTrace = util.TraceLine({
					mask   = MASK_NPCWORLDSTATIC,
					start  = Tab.HeadEnt.Pos + Vector(0,0,1),
					endpos = Tab.HeadEnt.Pos - Vector(0,0,50000)
				})

				Tab.HeadEnt.Z = WorldTrace.Hit and math.abs(Tab.HeadEnt.Pos.Z - WorldTrace.HitPos.Z) or 0
				AdvDupe2.duplicator.Copy( ply, dupe.AutoSaveEnt, Tab.Entities, Tab.Constraints, Tab.HeadEnt.Pos )
			else
				local i = dupe.AutoSaveSize
				local Pos = dupe.AutoSavePos
				local T = Vector( i, i, i); T:Add(Pos)
				local B = Vector(-i,-i,-i); B:Add(Pos)

				local Entities = FindInBox(B,T, ply)
				local _, HeadEnt = next(Entities)
				if not HeadEnt then
					AdvDupe2.Notify(ply, "Area Auto Save copied 0 entities; be sure to turn it off.", NOTIFY_ERROR)
					return
				end

				if(dupe.AutoSaveEnt and Entities[dupe.AutoSaveEnt]) then
					Tab.HeadEnt.Index = dupe.AutoSaveEnt
				else
					Tab.HeadEnt.Index = HeadEnt:EntIndex()
				end
				Tab.HeadEnt.Pos = HeadEnt:GetPos()

				local WorldTrace = util.TraceLine({
					mask   = MASK_NPCWORLDSTATIC,
					start  = Tab.HeadEnt.Pos + Vector(0,0,1),
					endpos = Tab.HeadEnt.Pos - Vector(0,0,50000)
				})

				Tab.HeadEnt.Z = WorldTrace.Hit and math.abs(Tab.HeadEnt.Pos.Z - WorldTrace.HitPos.Z) or 0
				Tab.Entities, Tab.Constraints = AdvDupe2.duplicator.AreaCopy(ply, Entities, Tab.HeadEnt.Pos, dupe.AutoSaveOutSide)
			end
			Tab.Constraints = GetSortedConstraints(ply, Tab.Constraints)
			Tab.Description = dupe.AutoSaveDesc

			AdvDupe2.Encode( Tab, AdvDupe2.GenerateDupeStamp(ply), function(data)
				AdvDupe2.SendToClient(ply, data, 1)
			end)
			dupe.FileMod = CurTime()+tonumber(GetConVarString("AdvDupe2_FileModificationDelay"))
		end)
		timer.Start(name)
	end)

	concommand.Add("AdvDupe2_SetStage", function(ply, cmd, args)
		ply:GetTool("advdupe2"):SetStage(1)
	end)

	concommand.Add("AdvDupe2_RemoveAutoSave", function(ply, cmd, args)
		timer.Remove("AdvDupe2_AutoSave_"..ply:UniqueID())
	end)

	concommand.Add("AdvDupe2_SaveMap", function(ply, cmd, args)
		if(not ply:IsAdmin()) then
			AdvDupe2.Notify(ply, "You do not have permission to this function.", NOTIFY_ERROR)
			return
		end

		local Entities = {}
		for _, v in ents.Iterator() do
			if not v:CreatedByMap() and AdvDupe2.duplicator.IsCopyable(v) then
				Entities[v:EntIndex()] = v
			end
		end

		local _, HeadEnt = next(Entities)
		if not HeadEnt then return end

		local Tab = {Entities={}, Constraints={}, HeadEnt={}, Description=""}
		Tab.HeadEnt.Index = HeadEnt:EntIndex()
		Tab.HeadEnt.Pos = HeadEnt:GetPos()

		local WorldTrace = util.TraceLine({
			mask   = MASK_NPCWORLDSTATIC,
			start  = Tab.HeadEnt.Pos + Vector(0,0,1),
			endpos = Tab.HeadEnt.Pos - Vector(0,0,50000)
		})

		Tab.HeadEnt.Z = WorldTrace.Hit and math.abs(Tab.HeadEnt.Pos.Z - WorldTrace.HitPos.Z) or 0
		Tab.Entities, Tab.Constraints = AdvDupe2.duplicator.AreaCopy(ply, Entities, Tab.HeadEnt.Pos, true)
		Tab.Constraints = GetSortedConstraints(ply, Tab.Constraints)

		Tab.Map = true
		AdvDupe2.Encode( Tab, AdvDupe2.GenerateDupeStamp(ply), function(data)
			if #data > AdvDupe2.MaxDupeSize then
				AdvDupe2.Notify(ply, "Copied duplicator filesize is too big!",NOTIFY_ERROR)
				return 
			end
			if(not file.IsDir("advdupe2_maps", "DATA")) then
				file.CreateDir("advdupe2_maps")
			end
			file.Write("advdupe2_maps/"..args[1]..".txt", data)
			AdvDupe2.Notify(ply, "Map save, saved successfully.")
		end)
	end)
end

if(CLIENT) then

	function TOOL:LeftClick(trace)
		if(trace and AdvDupe2.HeadGhost) then
			return true
		end
		return false
	end

	function TOOL:RightClick(trace)
		if( self:GetOwner():KeyDown(IN_SPEED) and not self:GetOwner():KeyDown(IN_WALK) ) then
			return false
		end
		return true
	end

	--Removes progress bar and removes ghosts when tool is put away
	function TOOL:ReleaseGhostEntity()
		AdvDupe2.RemoveGhosts()
		AdvDupe2.RemoveSelectBox()
		if(AdvDupe2.Rotation) then
			hook.Remove("PlayerBindPress", "AdvDupe2_BindPress")
			hook.Remove("CreateMove", "AdvDupe2_MouseControl")
		end
		return
	end

	function TOOL:Reload( trace )
		if(trace and (AdvDupe2.HeadGhost or self:GetStage() == 1)) then
			return true
		end
		return false
	end

	--Take control of the mouse wheel bind so the player can modify the height of the dupe
	local function MouseWheelScrolled(ply, bind, pressed)

		if(bind == "invprev") then
			if(ply:GetTool("advdupe2"):GetStage() == 1) then
				local size = math.min(tonumber(ply:GetInfo("advdupe2_area_copy_size")) + 25, 30720)
				RunConsoleCommand("advdupe2_area_copy_size",size)
			else
				local Z = tonumber(ply:GetInfo("advdupe2_offset_z")) + 5
				RunConsoleCommand("advdupe2_offset_z",Z)
			end
			return true
		elseif(bind == "invnext") then
			if(ply:GetTool("advdupe2"):GetStage() == 1) then
				local size = math.max(tonumber(ply:GetInfo("advdupe2_area_copy_size")) - 25, 25)
				RunConsoleCommand("advdupe2_area_copy_size",size)
			else
				local Z = tonumber(ply:GetInfo("advdupe2_offset_z")) - 5
				RunConsoleCommand("advdupe2_offset_z",Z)
			end
			return true
		end

		GAMEMODE:PlayerBindPress(ply, bind, pressed)
	end

	local YawTo = 0
	local BsAng = Angle()

	local function GetRotationSign(ply)
		local VY = tonumber(ply:GetInfo("advdupe2_offset_yaw")) or 0
		BsAng:Zero(); BsAng:RotateAroundAxis(BsAng:Up(), VY)
		local PR = ply:GetRight()
		local DP = BsAng:Right():Dot(PR)
		local DR = BsAng:Forward():Dot(PR)
		if(math.abs(DR) > math.abs(DP)) then -- Roll priority
			if(DR >= 0) then return -1, 1 else return  1, -1 end
		else -- Pitch axis takes priority. Normal X-Y map
			if(DP >= 0) then return  1, 1 else return -1, -1 end
		end
	end

	local function MouseControl( cmd )
		local ply = LocalPlayer()
		local X =  cmd:GetMouseX() / 20
		local Y = -cmd:GetMouseY() / 20
		local ru = ply:KeyDown(IN_SPEED)
		local mm = input.IsMouseDown(MOUSE_MIDDLE)

		if(mm) then
			if(ru) then
				YawTo = 0 -- Reset total integrated yaw
				RunConsoleCommand("advdupe2_offset_pitch", 0)
				RunConsoleCommand("advdupe2_offset_yaw"  , 0)
				RunConsoleCommand("advdupe2_offset_roll" , 0)
			else
				if(Y ~= 0) then
					local VR = tonumber(ply:GetInfo("advdupe2_offset_roll"))  or 0
					local VP = tonumber(ply:GetInfo("advdupe2_offset_pitch")) or 0
					local SP, SR, P, R = GetRotationSign(ply)
					if(SP ~= SR) then
						P = math.NormalizeAngle(VP + X * SR)
						R = math.NormalizeAngle(VR + Y * SP)
					else
						P = math.NormalizeAngle(VP + Y * SP)
						R = math.NormalizeAngle(VR + X * SR)
					end
					RunConsoleCommand("advdupe2_offset_pitch", P)
					RunConsoleCommand("advdupe2_offset_roll" , R)
				end
			end
		else
			if(X ~= 0) then
				VY = tonumber(ply:GetInfo("advdupe2_offset_yaw")) or 0
				if(ru) then
					YawTo = YawTo + X -- Integrate the mouse on the X value from the mouse
					RunConsoleCommand("advdupe2_offset_yaw", math.SnapTo(math.NormalizeAngle(YawTo), 45))
				else
					YawTo = VY + X -- Update the last yaw with the current value from the mouse
					RunConsoleCommand("advdupe2_offset_yaw", math.NormalizeAngle(YawTo))
				end
			end
		end
	end

	--Checks binds to modify dupes position and angles
	function TOOL:Think()

		if AdvDupe2.HeadGhost then
			AdvDupe2.UpdateGhosts()
		end

		if(LocalPlayer():KeyDown(IN_USE)) then
			if(not AdvDupe2.Rotation) then
				hook.Add("PlayerBindPress", "AdvDupe2_BindPress", MouseWheelScrolled)
				hook.Add("CreateMove", "AdvDupe2_MouseControl", MouseControl)
				AdvDupe2.Rotation = true
			end
		else
			if(AdvDupe2.Rotation) then
				AdvDupe2.Rotation = false
				hook.Remove("PlayerBindPress", "AdvDupe2_BindPress")
				hook.Remove("CreateMove", "AdvDupe2_MouseControl")
			end
		end
	end

	--Hinder the player from looking to modify offsets with the mouse
	function TOOL:FreezeMovement()
		return AdvDupe2.Rotation
	end

	language.Add( "Tool.advdupe2.name",	"Advanced Duplicator 2" )
	language.Add( "Tool.advdupe2.desc",	"Duplicate things." )
	language.Add( "Tool.advdupe2.0",	"Primary: Paste, Secondary: Copy, Secondary+World: Select/Deselect All, Secondary+Shift: Area copy." )
	language.Add( "Tool.advdupe2.1",	"Primary: Paste, Secondary: Copy an area, Reload: Autosave an area, Secondary+Shift: Cancel." )
	language.Add( "Undone_AdvDupe2",	"Undone AdvDupe2 paste" )
	language.Add( "Cleanup_AdvDupe2",	"AdvDupe2 Duplications" )
	language.Add( "Cleaned_AdvDupe2",	"Cleaned up all AdvDupe2 Duplications" )
	language.Add( "SBoxLimit_AdvDupe2",	"You've reached the AdvDupe2 Duplicator limit!" )

	CreateClientConVar("advdupe2_offset_world", 0, false, true)
	CreateClientConVar("advdupe2_offset_z", 0, false, true)
	CreateClientConVar("advdupe2_offset_pitch", 0, false, true)
	CreateClientConVar("advdupe2_offset_yaw", 0, false, true)
	CreateClientConVar("advdupe2_offset_roll", 0, false, true)
	CreateClientConVar("advdupe2_original_origin", 0, false, true)
	CreateClientConVar("advdupe2_paste_constraints", 1, false, true)
	CreateClientConVar("advdupe2_sort_constraints", 1, true, true)
	CreateClientConVar("advdupe2_paste_parents", 1, false, true)
	CreateClientConVar("advdupe2_paste_unfreeze", 0, false, true)
	CreateClientConVar("advdupe2_preserve_freeze", 0, false, true)
	CreateClientConVar("advdupe2_copy_outside", 0, false, true)
	CreateClientConVar("advdupe2_copy_only_mine", 1, false, true)
	CreateClientConVar("advdupe2_limit_ghost", 100, false, true)
	CreateClientConVar("advdupe2_area_copy_size", 300, false, true)
	CreateClientConVar("advdupe2_auto_save_contraption", 0, false, true)
	CreateClientConVar("advdupe2_auto_save_overwrite", 1, false, true)
	CreateClientConVar("advdupe2_auto_save_time", 2, false, true)

	--Contraption Spawner
	CreateClientConVar("advdupe2_contr_spawner_key", -1, false, true)
	CreateClientConVar("advdupe2_contr_spawner_undo_key", -1, false, true)
	CreateClientConVar("advdupe2_contr_spawner_delay", 0, false, true)
	CreateClientConVar("advdupe2_contr_spawner_undo_delay", 10, false, true)
	CreateClientConVar("advdupe2_contr_spawner_disgrav", 0, false, true)
	CreateClientConVar("advdupe2_contr_spawner_disdrag", 0, false, true)
	CreateClientConVar("advdupe2_contr_spawner_addvel", 1, false, true)
	CreateClientConVar("advdupe2_contr_spawner_hideprops", 0, false, true)

	--Experimental
	CreateClientConVar("advdupe2_paste_disparents", 0, false, true)
	CreateClientConVar("advdupe2_paste_protectoveride", 1, false, true)
	CreateClientConVar("advdupe2_debug_openfile", 1, false, true)

	local function BuildCPanel(CPanel)
		CPanel:ClearControls()

		local FileBrowser = vgui.Create("advdupe2_browser")
		CPanel:AddItem(FileBrowser)
		FileBrowser:SetSize(CPanel:GetWide(), 405)
		AdvDupe2.FileBrowser = FileBrowser

		local Check = vgui.Create("DCheckBoxLabel")

		Check:SetText( "Paste at original position" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_original_origin" )
		Check:SetValue( 0 )
		Check:SetToolTip("Paste at the position originally copied")
		CPanel:AddItem(Check)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Paste with constraints" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_paste_constraints" )
		Check:SetValue( 1 )
		Check:SetToolTip("Paste with or without constraints")
		CPanel:AddItem(Check)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Paste with parenting" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_paste_parents" )
		Check:SetValue( 1 )
		Check:SetToolTip("Paste with or without parenting")
		CPanel:AddItem(Check)

		local Check_1 = vgui.Create("DCheckBoxLabel")
		local Check_2 = vgui.Create("DCheckBoxLabel")

		Check_1:SetText( "Unfreeze all after paste" )
		Check_1:SetDark(true)
		Check_1:SetConVar( "advdupe2_paste_unfreeze" )
		Check_1:SetValue( 0 )
		Check_1.OnChange = function()
			if(Check_1:GetChecked() and Check_2:GetChecked()) then
				Check_2:SetValue(0)
			end
		end
		Check_1:SetToolTip("Unfreeze all props after pasting")
		CPanel:AddItem(Check_1)

		Check_2:SetText( "Preserve frozen state after paste" )
		Check_2:SetDark(true)
		Check_2:SetConVar( "advdupe2_preserve_freeze" )
		Check_2:SetValue( 0 )
		Check_2.OnChange = function()
			if(Check_2:GetChecked() and Check_1:GetChecked()) then
				Check_1:SetValue(0)
			end
		end
		Check_2:SetToolTip("Makes props have the same frozen state as when they were copied")
		CPanel:AddItem(Check_2)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Area copy constrained props outside of box" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_copy_outside" )
		Check:SetValue( 0 )
		Check:SetToolTip("Copy entities outside of the area copy that are constrained to entities insde")
		CPanel:AddItem(Check)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "World/Area copy only your own props" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_copy_only_mine" )
		Check:SetValue( 1 )
		Check:SetToolTip("Copy entities outside of the area copy that are constrained to entities insde")
		CPanel:AddItem(Check)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Sort constraints by their connections" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_sort_constraints" )
		Check:SetValue( GetConVarNumber("advdupe2_sort_constraints") )
		Check:SetToolTip( "Orders constraints so that they build a rigid constraint system." )
		CPanel:AddItem(Check)

		local NumSlider = vgui.Create( "DNumSlider" )
		NumSlider:SetText( "Ghost Percentage:" )
		NumSlider.Label:SetDark(true)
		NumSlider:SetMin( 0 )
		NumSlider:SetMax( 100 )
		NumSlider:SetDecimals( 0 )
		NumSlider:SetConVar( "advdupe2_limit_ghost" )
		NumSlider:SetToolTip("Change the percent of ghosts to spawn")
		--If these funcs are not here, problems occur for each
		local func = NumSlider.Slider.OnMouseReleased
		NumSlider.Slider.OnMouseReleased = function(self, mcode) func(self, mcode) AdvDupe2.StartGhosting() end
		local func2 = NumSlider.Slider.Knob.OnMouseReleased
		NumSlider.Slider.Knob.OnMouseReleased = function(self, mcode) func2(self, mcode) AdvDupe2.StartGhosting() end
		local func3 = NumSlider.Wang.Panel.OnLoseFocus
		NumSlider.Wang.Panel.OnLoseFocus = function(txtBox) func3(txtBox) AdvDupe2.StartGhosting() end
		CPanel:AddItem(NumSlider)

		NumSlider = vgui.Create( "DNumSlider" )
		NumSlider:SetText( "Area Copy Size:" )
		NumSlider.Label:SetDark(true)
		NumSlider:SetMin( 0 )
		NumSlider:SetMax( 30720 )
		NumSlider:SetDecimals( 0 )
		NumSlider:SetConVar( "advdupe2_area_copy_size" )
		NumSlider:SetToolTip("Change the size of the area copy")
		CPanel:AddItem(NumSlider)

		local Category1 = vgui.Create("DCollapsibleCategory")
		CPanel:AddItem(Category1)
		Category1:SetLabel("Offsets")
		Category1:SetExpanded(0)

		local parent = FileBrowser:GetParent():GetParent():GetParent():GetParent()
		--[[Offsets]]--
		local CategoryContent1 = vgui.Create( "DPanelList" )
		CategoryContent1:SetAutoSize( true )
		CategoryContent1:SetDrawBackground( false )
		CategoryContent1:SetSpacing( 1 )
		CategoryContent1:SetPadding( 2 )
		CategoryContent1.OnMouseWheeled = function(self, dlta) parent:OnMouseWheeled(dlta) end		--Fix the damned mouse not scrolling when it's over the catagories

		Category1:SetContents( CategoryContent1 )

		NumSlider = vgui.Create( "DNumSlider" )
		NumSlider:SetText( "Height Offset" )
		NumSlider.Label:SetDark(true)
		NumSlider:SetMin( -2500 )
		NumSlider:SetMax( 2500 )
		NumSlider:SetDefaultValue( 0 )
		NumSlider:SetDecimals( 3 )
		NumSlider:SetConVar("advdupe2_offset_z")
		NumSlider:SetToolTip("Changes the dupe Z offset")
		CategoryContent1:AddItem(NumSlider)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Use World Angles" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_offset_world" )
		Check:SetValue( 0 )
		Check:SetToolTip("Use world angles for the offset instead of the main entity")
		CategoryContent1:AddItem(Check)

		NumSlider = vgui.Create( "DNumSlider" )
		NumSlider:SetText( "Pitch Offset" )
		NumSlider.Label:SetDark(true)
		NumSlider:SetMin( -180 )
		NumSlider:SetMax( 180 )
		NumSlider:SetDefaultValue( 0 )
		NumSlider:SetDecimals( 3 )
		NumSlider:SetToolTip("Changes the dupe pitch offset")
		NumSlider:SetConVar("advdupe2_offset_pitch")
		CategoryContent1:AddItem(NumSlider)

		NumSlider = vgui.Create( "DNumSlider" )
		NumSlider:SetText( "Yaw Offset" )
		NumSlider.Label:SetDark(true)
		NumSlider:SetMin( -180 )
		NumSlider:SetMax( 180 )
		NumSlider:SetDefaultValue( 0 )
		NumSlider:SetDecimals( 3 )
		NumSlider:SetToolTip("Changes the dupe yaw offset")
		NumSlider:SetConVar("advdupe2_offset_yaw")
		CategoryContent1:AddItem(NumSlider)

		NumSlider = vgui.Create( "DNumSlider" )
		NumSlider:SetText( "Roll Offset" )
		NumSlider.Label:SetDark(true)
		NumSlider:SetMin( -180 )
		NumSlider:SetMax( 180 )
		NumSlider:SetDefaultValue( 0 )
		NumSlider:SetDecimals( 3 )
		NumSlider:SetToolTip("Changes the dupe roll offset")
		NumSlider:SetConVar("advdupe2_offset_roll")
		CategoryContent1:AddItem(NumSlider)

		local Btn = vgui.Create("DButton")
		Btn:SetText("Reset")
		Btn.DoClick = function()
			RunConsoleCommand("advdupe2_offset_z", 0)
			RunConsoleCommand("advdupe2_offset_pitch", 0)
			RunConsoleCommand("advdupe2_offset_yaw", 0)
			RunConsoleCommand("advdupe2_offset_roll", 0)
		end
		CategoryContent1:AddItem(Btn)


		--[[Dupe Information]]--
		local Category2 = vgui.Create("DCollapsibleCategory")
		CPanel:AddItem(Category2)
		Category2:SetLabel("Dupe Information")
		Category2:SetExpanded(0)

		local CategoryContent2 = vgui.Create( "DPanelList" )
		CategoryContent2:SetAutoSize( true )
		CategoryContent2:SetDrawBackground( false )
		CategoryContent2:SetSpacing( 3 )
		CategoryContent2:SetPadding( 2 )
		Category2:SetContents( CategoryContent2 )
		CategoryContent2.OnMouseWheeled = function(self, dlta) parent:OnMouseWheeled(dlta) end

		AdvDupe2.Info = {}

		local lbl = vgui.Create( "DLabel" )
		lbl:SetText(AdvDupe2.InfoText.File or "File: ")
		lbl:SetDark(true)
		CategoryContent2:AddItem(lbl)
		AdvDupe2.Info.File = lbl

		lbl = vgui.Create( "DLabel" )
		lbl:SetText(AdvDupe2.InfoText.Creator or "Creator:")
		lbl:SetDark(true)
		CategoryContent2:AddItem(lbl)
		AdvDupe2.Info.Creator = lbl

		lbl = vgui.Create( "DLabel" )
		lbl:SetText(AdvDupe2.InfoText.Date or "Date:")
		lbl:SetDark(true)
		CategoryContent2:AddItem(lbl)
		AdvDupe2.Info.Date = lbl

		lbl = vgui.Create( "DLabel" )
		lbl:SetText(AdvDupe2.InfoText.Time or "Time:")
		lbl:SetDark(true)
		CategoryContent2:AddItem(lbl)
		AdvDupe2.Info.Time = lbl

		lbl = vgui.Create( "DLabel" )
		lbl:SetText(AdvDupe2.InfoText.Size or "Size:")
		lbl:SetDark(true)
		CategoryContent2:AddItem(lbl)
		AdvDupe2.Info.Size = lbl

		lbl = vgui.Create( "DLabel" )
		lbl:SetText(AdvDupe2.InfoText.Desc or "Desc:")
		lbl:SetDark(true)
		CategoryContent2:AddItem(lbl)
		AdvDupe2.Info.Desc = lbl

		lbl = vgui.Create( "DLabel" )
		lbl:SetText(AdvDupe2.InfoText.Entities or "Entities:")
		lbl:SetDark(true)
		CategoryContent2:AddItem(lbl)
		AdvDupe2.Info.Entities = lbl

		lbl = vgui.Create( "DLabel" )
		lbl:SetText(AdvDupe2.InfoText.Constraints or "Constraints:")
		lbl:SetDark(true)
		CategoryContent2:AddItem(lbl)
		AdvDupe2.Info.Constraints = lbl

	--[[Contraption Spawner]]--
		local Category3 = vgui.Create("DCollapsibleCategory")
		CPanel:AddItem(Category3)
		Category3:SetLabel("Contraption Spawner")
		Category3:SetExpanded(0)

		local CategoryContent3 = vgui.Create( "DPanelList" )
		CategoryContent3:SetAutoSize( true )
		CategoryContent3:SetDrawBackground( false )
		CategoryContent3:SetSpacing( 3 )
		CategoryContent3:SetPadding( 2 )
		Category3:SetContents( CategoryContent3 )
		CategoryContent3.OnMouseWheeled = function(self, dlta) parent:OnMouseWheeled(dlta) end

		local ctrl = vgui.Create( "CtrlNumPad" )
		ctrl:SetConVar1( "advdupe2_contr_spawner_key" )
		ctrl:SetConVar2( "advdupe2_contr_spawner_undo_key" )
		ctrl:SetLabel1( "Spawn Key")
		ctrl:SetLabel2( "Undo Key" )
		CategoryContent3:AddItem(ctrl)

		NumSlider = vgui.Create( "DNumSlider" )
		NumSlider:SetText( "Spawn Delay" )
		NumSlider.Label:SetDark(true)
		if(game.SinglePlayer()) then
			NumSlider:SetMin( 0 )
		else
			local min = tonumber(GetConVarString("AdvDupe2_MinContraptionSpawnDelay")) or 0.2
			if(tonumber(LocalPlayer():GetInfo("advdupe2_contr_spawner_delay"))<min) then
				RunConsoleCommand("advdupe2_contr_spawner_delay", tostring(min))
			end
			NumSlider:SetMin( min )
		end
		NumSlider:SetMax(60)
		NumSlider:SetDecimals( 1 )
		NumSlider:SetConVar("advdupe2_contr_spawner_delay")
		CategoryContent3:AddItem(NumSlider)

		NumSlider = vgui.Create( "DNumSlider" )
		NumSlider:SetText( "Undo Delay" )
		NumSlider.Label:SetDark(true)
		if(game.SinglePlayer()) then
			NumSlider:SetMin( 0 )
			NumSlider:SetMax( 60 )
		else
			local min = tonumber(GetConVarString("AdvDupe2_MinContraptionUndoDelay")) or 10
			local max = tonumber(GetConVarString("AdvDupe2_MaxContraptionUndoDelay")) or 60
			if(tonumber(LocalPlayer():GetInfo("advdupe2_contr_spawner_undo_delay")) < min) then
				RunConsoleCommand("advdupe2_contr_spawner_undo_delay", tostring(min))
			elseif(tonumber(LocalPlayer():GetInfo("advdupe2_contr_spawner_undo_delay")) > max) then
				RunConsoleCommand("advdupe2_contr_spawner_undo_delay", tostring(max))
			end
			NumSlider:SetMin( min )
			NumSlider:SetMax( max )
		end
		NumSlider:SetDecimals( 1 )
		NumSlider:SetConVar("advdupe2_contr_spawner_undo_delay")
		CategoryContent3:AddItem(NumSlider)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Disable gravity for all spawned props" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_contr_spawner_disgrav" )
		Check:SetValue( 0 )
		CategoryContent3:AddItem(Check)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Disable drag for all spawned props" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_contr_spawner_disdrag" )
		Check:SetValue( 0 )
		CategoryContent3:AddItem(Check)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Add spawner's velocity to contraption" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_contr_spawner_addvel" )
		Check:SetValue( 1 )
		CategoryContent3:AddItem(Check)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Disable drawing spawner props" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_contr_spawner_hideprops" )
		Check:SetValue( 0 )
		CategoryContent3:AddItem(Check)

		--[[Area Auto Save]]--
		local Category4 = vgui.Create("DCollapsibleCategory")
		CPanel:AddItem(Category4)
		Category4:SetLabel("Area Auto Save")
		Category4:SetExpanded(0)

		local CategoryContent4 = vgui.Create( "DPanelList" )
		CategoryContent4:SetAutoSize( true )
		CategoryContent4:SetDrawBackground( false )
		CategoryContent4:SetSpacing( 3 )
		CategoryContent4:SetPadding( 2 )
		Category4:SetContents( CategoryContent4 )
		CategoryContent4.OnMouseWheeled = function(self, dlta) parent:OnMouseWheeled(dlta) end

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Only copy contraption" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_auto_save_contraption" )
		Check:SetValue( 0 )
		Check:SetToolTip("Only copy a contraption instead of an area")
		CategoryContent4:AddItem(Check)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Overwrite File" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_auto_save_overwrite" )
		Check:SetValue( 1 )
		Check:SetToolTip("Overwrite the file instead of creating a new one everytime")
		CategoryContent4:AddItem(Check)

		NumSlider = vgui.Create( "DNumSlider" )
		NumSlider:SetText( "Minutes to Save:" )
		NumSlider.Label:SetDark(true)
		NumSlider:SetMin( 2 )
		NumSlider:SetMax( 30 )
		NumSlider:SetDecimals( 0 )
		NumSlider:SetConVar( "advdupe2_auto_save_time" )
		NumSlider:SetToolTip("Interval time to save in minutes")
		CategoryContent4:AddItem(NumSlider)

		local pnl = vgui.Create("Panel")
		pnl:SetWide(CPanel:GetWide()-40)
		pnl:SetTall(75)
		pnl:SetPos(0, 50)
		CategoryContent4:AddItem(pnl)

		local label = vgui.Create("DLabel", pnl)
		label:SetText("Directory: ")
		label:SizeToContents()
		label:SetDark(true)
		label:SetPos(5,7)

		AdvDupe2.AutoSavePath = ""
		local txtbox = vgui.Create("DTextEntry", pnl)
		txtbox:SetWide(pnl:GetWide()-100)
		txtbox:SetPos(60, 5)
		txtbox:SetUpdateOnType(true)
		txtbox.OnTextChanged = function(self)
			self:SetValue(AdvDupe2.AutoSavePath)
		end

		local btn = vgui.Create("DImageButton", pnl)
		local x, y = txtbox:GetPos()
		btn:SetPos(x + txtbox:GetWide() + 5, 7)
		btn:SetMaterial("icon16/folder_explore.png")
		btn:SizeToContents()
		btn:SetToolTip("Browse")
		btn.DoClick = function()
			local ScrollBar = parent.VBar
			ScrollBar:AnimateTo(0, 1, 0, 0.2)

			FileBrowser.Submit:SetMaterial("icon16/disk.png")
			FileBrowser.Submit:SetTooltip("Directory for Area Auto Save")
			if(FileBrowser.FileName:GetValue()=="Folder_Name...") then
				FileBrowser.FileName:SetValue("File_Name...")
			end
			FileBrowser.Desc:SetVisible(true)
			FileBrowser.Info:SetVisible(false)
			FileBrowser.FileName:SetVisible(true)
			FileBrowser.FileName:SelectAllOnFocus(true)
			FileBrowser.FileName:OnMousePressed()
			FileBrowser.FileName:RequestFocus()
			FileBrowser.Expanding=true
			FileBrowser:Slide(true)
			FileBrowser.Submit.DoClick = function()
				local name = FileBrowser.FileName:GetValue()
				if(name=="" or name=="File_Name...") then
					AdvDupe2.Notify("Name field is blank.", NOTIFY_ERROR)
					FileBrowser.FileName:SelectAllOnFocus(true)
					FileBrowser.FileName:OnGetFocus()
					FileBrowser.FileName:RequestFocus()
					return
				end
				local desc = FileBrowser.Desc:GetValue()
				if(desc=="Description...") then desc="" end

				if(not IsValid(FileBrowser.Browser.pnlCanvas.m_pSelectedItem) or FileBrowser.Browser.pnlCanvas.m_pSelectedItem.Derma.ClassName~="advdupe2_browser_folder") then
					AdvDupe2.Notify("Folder to save Area Auto Save not selected.", NOTIFY_ERROR)
					return
				end

				FileBrowser.AutoSaveNode = FileBrowser.Browser.pnlCanvas.m_pSelectedItem
				txtbox:SetValue(FileBrowser:GetFullPath(FileBrowser.Browser.pnlCanvas.m_pSelectedItem)..name)
				AdvDupe2.AutoSavePath = txtbox:GetValue()
				txtbox:SetToolTip(txtbox:GetValue())
				AdvDupe2.AutoSaveDesc = desc

				FileBrowser:Slide(false)
				ScrollBar:AnimateTo(ScrollBar.CanvasSize, 1, 0, 0.2)

				RunConsoleCommand("AdvDupe2_SetStage")
				hook.Add("HUDPaint", "AdvDupe2_DrawSelectionBox", AdvDupe2.DrawSelectionBox)
			end
			FileBrowser.FileName.OnEnter = function()
				FileBrowser.FileName:KillFocus()
				FileBrowser.Desc:SelectAllOnFocus(true)
				FileBrowser.Desc.OnMousePressed()
				FileBrowser.Desc:RequestFocus()
			end
			FileBrowser.Desc.OnEnter = FileBrowser.Submit.DoClick
		end

		btn = vgui.Create("DButton", pnl)
		btn:SetSize(50, 35)
		btn:SetPos(pnl:GetWide()/4-10, 30)
		btn:SetText("Show")
		btn.DoClick = function()
			if(AdvDupe2.AutoSavePos) then
				RunConsoleCommand("advdupe2_area_copy_size", AdvDupe2.AutoSaveSize)
				LocalPlayer():SetEyeAngles( (AdvDupe2.AutoSavePos - LocalPlayer():GetShootPos()):Angle() )
				RunConsoleCommand("AdvDupe2_SetStage")
				hook.Add("HUDPaint", "AdvDupe2_DrawSelectionBox", AdvDupe2.DrawSelectionBox)
			end
		end

		btn = vgui.Create("DButton", pnl)
		btn:SetSize(50, 35)
		btn:SetPos((pnl:GetWide()/4)*3-40, 30)
		btn:SetText("Turn Off")
		btn:SetDisabled(true)
		btn.DoClick = function(self)
			RunConsoleCommand("AdvDupe2_RemoveAutoSave")
			self:SetDisabled(true)
			AdvDupe2.AutoSavePos = nil
		end
		AdvDupe2.OffButton = btn


		--[[Experimental Section]]--
		local Category5 = vgui.Create("DCollapsibleCategory")
		CPanel:AddItem(Category5)
		Category5:SetLabel("Experimental Section")
		Category5:SetExpanded(0)

		local CategoryContent5 = vgui.Create( "DPanelList" )
		CategoryContent5:SetAutoSize( true )
		CategoryContent5:SetDrawBackground( false )
		CategoryContent5:SetSpacing( 3 )
		CategoryContent5:SetPadding( 2 )
		Category5:SetContents( CategoryContent5 )
		CategoryContent5.OnMouseWheeled = function(self, dlta) parent:OnMouseWheeled(dlta) end

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Disable parented props physics interaction" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_paste_disparents" )
		Check:SetValue( 0 )
		CategoryContent5:AddItem(Check)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Disable Dupe Spawn Protection" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_paste_protectoveride" )
		Check:SetValue( 1 )
		Check:SetToolTip("Check this if you things don't look right after pasting.")
		CategoryContent5:AddItem(Check)

		Check = vgui.Create("DCheckBoxLabel")
		Check:SetText( "Open file after Saving" )
		Check:SetDark(true)
		Check:SetConVar( "advdupe2_debug_openfile" )
		Check:SetValue( 1 )
		Check:SetToolTip("Check this if you want your files to be opened after saving them.")
		CategoryContent5:AddItem(Check)

		--[[Save Map]]--
		if(LocalPlayer():IsAdmin()) then
			local Category6 = vgui.Create("DCollapsibleCategory")
			CPanel:AddItem(Category6)
			Category6:SetLabel("Save Map")
			Category6:SetExpanded(0)

			local CategoryContent6 = vgui.Create( "DPanelList" )
			CategoryContent6:SetAutoSize( true )
			CategoryContent6:SetDrawBackground( false )
			CategoryContent6:SetSpacing( 3 )
			CategoryContent6:SetPadding( 2 )
			Category6:SetContents( CategoryContent6 )
			CategoryContent6.OnMouseWheeled = function(self, dlta) parent:OnMouseWheeled(dlta) end

			pnl = vgui.Create("Panel")
			pnl:SetWide(CPanel:GetWide()-40)
			pnl:SetTall(75)
			pnl:SetPos(0, 50)
			CategoryContent6:AddItem(pnl)

			label = vgui.Create("DLabel", pnl)
			label:SetText("File Name: ")
			label:SizeToContents()
			label:SetDark(true)
			label:SetPos(5,7)

			AdvDupe2.AutoSavePath = ""

			local txtbox2 = vgui.Create("DTextEntry", pnl)
			txtbox2:SetWide(pnl:GetWide()-100)
			txtbox2:SetPos(60, 5)

			local btn2 = vgui.Create("DImageButton", pnl)
			x, y = txtbox2:GetPos()
			btn2:SetPos(x + txtbox2:GetWide() + 5, 7)
			btn2:SetMaterial("icon16/disk.png")
			btn2:SizeToContents()
			btn2:SetToolTip("Save Map")
			btn2.DoClick = 	function()
				if(txtbox2:GetValue()=="") then return end
				RunConsoleCommand("AdvDupe2_SaveMap", txtbox2:GetValue())
			end
			txtbox2.OnEnter = function()
				btn2:DoClick()
			end
		end
	end

	function TOOL.BuildCPanel(panel)
		panel:ClearControls()
		panel:AddControl("Header", {
			Text = "Advanced Duplicator 2",
			Description = "Duplicate stuff."
		})
		local function tryToBuild()
			local CPanel = controlpanel.Get("advdupe2")
			if CPanel and CPanel:GetWide()>16 then
				BuildCPanel(CPanel)
			else
				timer.Simple(0.1,tryToBuild)
			end
		end
		tryToBuild()
	end

	local StColor  = {r=130, g=25, b=40, a=255}
	local NoColor  = {r=25, g=100, b=40, a=255}
	local CurColor = {r=25, g=100, b=40, a=255}
	local CWhite   = Color(255,255,255,255)
	surface.CreateFont ("AD2Font", {font="Arial", size=40, weight=1000}) ---Remember to use gm_clearfonts
	surface.CreateFont ("AD2TitleFont", {font="Arial", size=24, weight=1000})

	function TOOL:DrawToolScreen()
		if(not AdvDupe2) then return true end

		local text = "Ready"
		local state, co = false
		local ply = LocalPlayer()

		if(AdvDupe2.Preview) then
			text = "Preview"
		end
		if(AdvDupe2.ProgressBar.Text) then
			state = true
			text = AdvDupe2.ProgressBar.Text
		end

		cam.Start2D()

			surface.SetDrawColor(32, 32, 32, 255)
			surface.DrawRect(0, 0, 256, 256)

			if(state) then
				co = StColor
			else
				co = NoColor
			end

			local rate = FrameTime() * 160
			CurColor.r = math.Approach( CurColor.r, co.r, rate )
			CurColor.g = math.Approach( CurColor.g, co.g, rate )

			surface.SetDrawColor(CurColor)
			surface.DrawRect(13, 13, 230, 230)

			surface.SetTextColor( 255, 255, 255, 255 )

			draw.SimpleText("Advanced Duplicator 2", "AD2TitleFont", 128, 50, CWhite, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
			draw.SimpleText(text, "AD2Font", 128, 128, CWhite, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
			if(state) then
				draw.RoundedBox( 6, 32, 178, 192, 28, Color( 255, 255, 255, 150 ) )
				draw.RoundedBox( 6, 34, 180, 188*(AdvDupe2.ProgressBar.Percent / 100), 24, Color( 0, 255, 0, 255 ) )
			elseif(ply:KeyDown(IN_USE)) then
				local font, align = "AD2TitleFont", TEXT_ALIGN_BOTTOM
				draw.SimpleText("H: "..ply:GetInfo("advdupe2_offset_z")    , font, 20,  210, CWhite, TEXT_ALIGN_LEFT , align)
				draw.SimpleText("P: "..ply:GetInfo("advdupe2_offset_pitch"), font, 236, 210, CWhite, TEXT_ALIGN_RIGHT, align)
				draw.SimpleText("Y: "..ply:GetInfo("advdupe2_offset_yaw")  , font, 20 , 240, CWhite, TEXT_ALIGN_LEFT , align)
				draw.SimpleText("R: "..ply:GetInfo("advdupe2_offset_roll") , font, 236, 240, CWhite, TEXT_ALIGN_RIGHT, align)
			end

		cam.End2D()
	end


	local function FindInBox(min, max, ply)
		local EntTable = {}
		for _,ent in ents.Iterator() do
			local pos = ent:GetPos()
			if (pos.X>=min.X) and (pos.X<=max.X) and (pos.Y>=min.Y) and (pos.Y<=max.Y) and (pos.Z>=min.Z) and (pos.Z<=max.Z) then
				--if(ent:GetClass()~="C_BaseFlexclass") then
					EntTable[ent:EntIndex()] = ent
				--end
			end
		end

		return EntTable
	end


	local GreenSelected = Color(0, 255, 0, 255)
	function AdvDupe2.DrawSelectionBox()

		local TraceRes = util.TraceLine(util.GetPlayerTrace(LocalPlayer()))
		local i = math.Clamp(tonumber(LocalPlayer():GetInfo("advdupe2_area_copy_size")) or 50, 0, 30720)

		--Bottom Points
		local B1 = (Vector(-i,-i,-i) + TraceRes.HitPos)
		local B2 = (Vector(-i, i,-i) + TraceRes.HitPos)
		local B3 = (Vector( i, i,-i) + TraceRes.HitPos)
		local B4 = (Vector( i,-i,-i) + TraceRes.HitPos)

		--Top Points
		local T1 = (Vector(-i,-i, i) + TraceRes.HitPos):ToScreen()
		local T2 = (Vector(-i, i, i) + TraceRes.HitPos):ToScreen()
		local T3 = (Vector( i, i, i) + TraceRes.HitPos):ToScreen()
		local T4 = (Vector( i,-i, i) + TraceRes.HitPos):ToScreen()

		if(not AdvDupe2.LastUpdate or CurTime()>=AdvDupe2.LastUpdate) then

			if AdvDupe2.ColorEntities then
				for k,v in pairs(AdvDupe2.EntityColors)do
					local ent = AdvDupe2.ColorEntities[k]
					if(IsValid(ent)) then
						AdvDupe2.ColorEntities[k]:SetColor(v)
					end
				end
			end

			local Entities = FindInBox(B1, (Vector(i,i,i)+TraceRes.HitPos), LocalPlayer())
			AdvDupe2.ColorEntities = Entities
			AdvDupe2.EntityColors = {}
			for k,v in pairs(Entities)do
				AdvDupe2.EntityColors[k] = v:GetColor()
				v:SetColor(GreenSelected)
			end
			AdvDupe2.LastUpdate = CurTime()+0.25

		end

		local tracedata = {}
		tracedata.mask = MASK_NPCWORLDSTATIC
		local WorldTrace

		tracedata.start = B1+Vector(0,0,i*2)
		tracedata.endpos = B1
		WorldTrace = util.TraceLine( tracedata )
		B1 = WorldTrace.HitPos:ToScreen()
		tracedata.start = B2+Vector(0,0,i*2)
		tracedata.endpos = B2
		WorldTrace = util.TraceLine( tracedata )
		B2 = WorldTrace.HitPos:ToScreen()
		tracedata.start = B3+Vector(0,0,i*2)
		tracedata.endpos = B3
		WorldTrace = util.TraceLine( tracedata )
		B3 = WorldTrace.HitPos:ToScreen()
		tracedata.start = B4+Vector(0,0,i*2)
		tracedata.endpos = B4
		WorldTrace = util.TraceLine( tracedata )
		B4 = WorldTrace.HitPos:ToScreen()

		surface.SetDrawColor( 0, 255, 0, 255 )

		--Draw Sides
		surface.DrawLine(B1.x, B1.y, T1.x, T1.y)
		surface.DrawLine(B2.x, B2.y, T2.x, T2.y)
		surface.DrawLine(B3.x, B3.y, T3.x, T3.y)
		surface.DrawLine(B4.x, B4.y, T4.x, T4.y)

		--Draw Bottom
		surface.DrawLine(B1.x, B1.y, B2.x, B2.y)
		surface.DrawLine(B2.x, B2.y, B3.x, B3.y)
		surface.DrawLine(B3.x, B3.y, B4.x, B4.y)
		surface.DrawLine(B4.x, B4.y, B1.x, B1.y)

		--Draw Top
		surface.DrawLine(T1.x, T1.y, T2.x, T2.y)
		surface.DrawLine(T2.x, T2.y, T3.x, T3.y)
		surface.DrawLine(T3.x, T3.y, T4.x, T4.y)
		surface.DrawLine(T4.x, T4.y, T1.x, T1.y)

	end

	net.Receive("AdvDupe2_DrawSelectBox", function()
		hook.Add("HUDPaint", "AdvDupe2_DrawSelectionBox", AdvDupe2.DrawSelectionBox)
	end)

	function AdvDupe2.RemoveSelectBox()
		hook.Remove("HUDPaint", "AdvDupe2_DrawSelectionBox")
		if AdvDupe2.ColorEntities then
			for k,v in pairs(AdvDupe2.EntityColors)do
				if(not IsValid(AdvDupe2.ColorEntities[k])) then
					AdvDupe2.ColorEntities[k]=nil
				else
					AdvDupe2.ColorEntities[k]:SetColor(v)
				end
			end
			AdvDupe2.ColorEntities={}
			AdvDupe2.EntityColors={}
		end
	end
	net.Receive("AdvDupe2_RemoveSelectBox",function()
		AdvDupe2.RemoveSelectBox()
	end)

	function AdvDupe2.InitProgressBar(label)
		AdvDupe2.ProgressBar = {}
		AdvDupe2.ProgressBar.Text = label
		AdvDupe2.ProgressBar.Percent = 0
		AdvDupe2.BusyBar = true
	end
	net.Receive("AdvDupe2_InitProgressBar", function()
		AdvDupe2.InitProgressBar(net.ReadString())
	end)

	net.Receive("AdvDupe2_UpdateProgressBar", function()
		AdvDupe2.ProgressBar.Percent = net.ReadFloat()
	end)

	function AdvDupe2.RemoveProgressBar()
		AdvDupe2.ProgressBar = {}
		AdvDupe2.BusyBar = false
		if(AdvDupe2.Ghosting) then
			AdvDupe2.InitProgressBar("Ghosting: ")
			AdvDupe2.BusyBar = false
			AdvDupe2.ProgressBar.Percent = AdvDupe2.CurrentGhost/AdvDupe2.TotalGhosts*100
		end
	end
	net.Receive("AdvDupe2_RemoveProgressBar", function()
		AdvDupe2.RemoveProgressBar()
	end)

	net.Receive("AdvDupe2_ResetOffsets", function()
		RunConsoleCommand("advdupe2_original_origin", "0")
		RunConsoleCommand("advdupe2_paste_constraints","1")
		RunConsoleCommand("advdupe2_offset_z","0")
		RunConsoleCommand("advdupe2_offset_pitch","0")
		RunConsoleCommand("advdupe2_offset_yaw","0")
		RunConsoleCommand("advdupe2_offset_roll","0")
		RunConsoleCommand("advdupe2_paste_parents","1")
		RunConsoleCommand("advdupe2_paste_disparents","0")
	end)

	net.Receive("AdvDupe2_ReportModel", function()
		print("Advanced Duplicator 2: Invalid Model: "..net.ReadString())
	end)

	net.Receive("AdvDupe2_ReportClass", function()
		print("Advanced Duplicator 2: Invalid Class: "..net.ReadString())
	end)

	net.Receive("AdvDupe2_ResetDupeInfo", function()
		if not AdvDupe2.Info then return end
		AdvDupe2.Info.File:SetText("File:")
		AdvDupe2.Info.Creator:SetText("Creator:")
		AdvDupe2.Info.Date:SetText("Date:")
		AdvDupe2.Info.Time:SetText("Time:")
		AdvDupe2.Info.Size:SetText("Size:")
		AdvDupe2.Info.Desc:SetText("Desc:")
		AdvDupe2.Info.Entities:SetText("Entities:")
		AdvDupe2.Info.Constraints:SetText("Constraints:")
	end)

	net.Receive("AdvDupe2_CanAutoSave", function()
		if(AdvDupe2.AutoSavePath~="") then
			AdvDupe2.AutoSavePos = net.ReadVector()
			AdvDupe2.AutoSaveSize = net.ReadFloat()
			local ent = net.ReadUInt(16)
			AdvDupe2.OffButton:SetDisabled(false)
			net.Start("AdvDupe2_CanAutoSave")
				net.WriteString(AdvDupe2.AutoSaveDesc)
				net.WriteInt(ent, 16)
				if(game.SinglePlayer()) then
					net.WriteString(string.sub(AdvDupe2.AutoSavePath, 10, #AdvDupe2.AutoSavePath))
				end
			net.SendToServer()
		else
			AdvDupe2.Notify("Select a directory for the Area Auto Save.", NOTIFY_ERROR)
		end
	end)

	net.Receive("AdvDupe2_SetDupeInfo", function(len, ply, len2)
		if AdvDupe2.Info then
			AdvDupe2.Info.File:SetText("File: "..net.ReadString())
			AdvDupe2.Info.Creator:SetText("Creator: "..net.ReadString())
			AdvDupe2.Info.Date:SetText("Date: "..net.ReadString())
			AdvDupe2.Info.Time:SetText("Time: "..net.ReadString())
			AdvDupe2.Info.Size:SetText("Size: "..net.ReadString())
			AdvDupe2.Info.Desc:SetText("Desc: "..net.ReadString())
			AdvDupe2.Info.Entities:SetText("Entities: "..net.ReadString())
			AdvDupe2.Info.Constraints:SetText("Constraints: "..net.ReadString())
		else
			AdvDupe2.InfoText.File = "File: "..net.ReadString()
			AdvDupe2.InfoText.Creator = "Creator: "..net.ReadString()
			AdvDupe2.InfoText.Date = "Date: "..net.ReadString()
			AdvDupe2.InfoText.Time = "Time: "..net.ReadString()
			AdvDupe2.InfoText.Size = "Size: "..net.ReadString()
			AdvDupe2.InfoText.Desc = "Desc: "..net.ReadString()
			AdvDupe2.InfoText.Entities = "Entities: "..net.ReadString()
			AdvDupe2.InfoText.Constraints = "Constraints: "..net.ReadString()
		end
	end)
end

--gamemodes/darkrp/entities/weapons/gmod_tool/stools/shareprops.lua:
return gluapack()()
--lua/weapons/gmod_tool/stools/streamradio_gui_color_global.lua:
return gluapack()()
--lua/weapons/guitar_stalker/shared.lua:
return gluapack()()
--addons/hackable_server/lua/languages/hacktool/lang_es.lua:
return "spanish",{
    ["Wanted"] = "Orden de detención",
    ["Unwanted"] = "Eliminar la orden",
    ["Unarrest"] = "Liberar alguien",--
    ["Warrant"] = "Orden de registro",
    ["Remove warrant"] = "Eliminar la orden de registro",
    ["Add a law"] = "Añadir leyes",
    ["Remove the law"] = "Eliminar leyes",
    ["Initiate a lockdown"] = "Iniciar la toque de queda",
    ["Cancel the lockdown"] = "Terminar la toque de queda",
    ["Steal money"] = "Robar moneda",
    ["Reason"] = "Razón",
    ["Error"] = "Error",
    ["Time"] = "Tiempo",
    ["Nobody is wanted"] = "No hay una búsqueda",
    ["Nobody is arrested"] = "No hay prisioneros",
    ["There is no mayor"] = "No hay un mayor",
    ["Law"] = "Ley",
    ["Law added"] = "Añadió una ley",
    ["Success"] = "completado con éxito",
    ["There is no laws"] = "No hay leyes",
    ["Success! You got $"] = "Obtienes €",
    ["Success chance"] = "tasa de éxito",
    ["Not enough police"] = "suficientes funcionarios",
    ["LOADING..."] = "Se paciente...",--
    ["RELOADING..."] = "Se paciente...",
    ["CPU OVERHEAT!"] = "recalentamiento de la CPU!",
    ["SYSTEM ERROR!"] = "Sistema no funciona!",
    ["READY"] = "Listo"
}
--Credits
--translated by Herakles 
--https://www.gmodstore.com/users/herakles
--addons/hackable_server/lua/languages/hacktool/lang_pl.lua:
return "polish",{
    ["Wanted"] = "Nakaz aresztowania",
    ["Unwanted"] = "Odwołaj nakaz aresztu",
    ["Unarrest"] = "Wypuść z więzienia",
    ["Warrant"] = "Nakaz przeszukania",
    ["Remove warrant"] = "Odwołaj nakaz przeszukania",
    ["Add a law"] = "Dodaj nowe prawo",
    ["Remove the law"] = "Usuń prawo",
    ["Initiate a lockdown"] = "Rozpocznij godzinę policyjną",
    ["Cancel the lockdown"] = "Odwołaj godzinę policyjną",
    ["Steal money"] = "Zabierz pieniądze",
    ["Reason"] = "Powód",
    ["Error"] = "Błąd",
    ["Time"] = "Czas",
    ["Nobody is wanted"] = "Nikt nie jest poszukiwany",
    ["Nobody is arrested"] = "Nikt nie został zaaresztowany",
    ["There is no mayor"] = "Nie ma burmistrza",
    ["Law"] = "Prawo",
    ["Law added"] = "Dodano prawo",
    ["Success"] = "Sukces",
    ["There is no laws"] = "Nie ma żadnych praw",
    ["Success! You got $"] = "Sukces! Udało ci się zdobyć $",
    ["Success chance"] = "Szansa powodzenia",
    ["Not enough police"] = "Nie ma wyst. liczby policjantów",
    ["LOADING..."] = "ŁADOWANIE...",
    ["RELOADING..."] = "PRZEŁADOWANIE...",
    ["CPU OVERHEAT!"] = "PRZEGRZANIE PROCESORA!",
    ["SYSTEM ERROR!"] = "BŁĄD SYSTEMU!",
    ["READY"] = "GOTOWE"
}
--addons/hackable_server/lua/languages/hacktool/lang_tr.lua:
return gluapack()()
--addons/skeypad_1.2.36/lua/weapons/skeypad_keycard/shared.lua:
return gluapack()()
--addons/ch_atm/lua/weapons/weapon_ch_atm_card/shared.lua:
--[[ MODEL INFO
Recommended FOV: 85

Hold type: pistol

76561198347218024
--]]

if SERVER then
    AddCSLuaFile( "shared.lua" )
end

if CLIENT then
    SWEP.PrintName = CH_ATM.LangString( "Credit Card" )
    SWEP.Slot = 2
    SWEP.SlotPos = 4
    SWEP.DrawAmmo = false
end

SWEP.Author         = "Crap-Head"
SWEP.Instructions   = CH_ATM.LangString( "Left or right click while looking at a card scanner to pay the owner." )
SWEP.Category 		= "ATM by Crap-Head"

SWEP.ViewModelFOV   = 85
SWEP.ViewModelFlip  = false
SWEP.UseHands		= true
SWEP.AnimPrefix  	= "pistol"

SWEP.Spawnable      	= true
SWEP.AdminSpawnable     = true

SWEP.ViewModel = "models/craphead_scripts/ch_atm/c_suitcard.mdl"
SWEP.WorldModel = "models/craphead_scripts/ch_atm/w_suitcard.mdl"

SWEP.Primary.ClipSize     	= -1
SWEP.Primary.DefaultClip   	= 0
SWEP.Primary.Automatic    	= false
SWEP.Primary.Ammo 			= ""

SWEP.Secondary.ClipSize  	= -1
SWEP.Secondary.DefaultClip  = 0
SWEP.Secondary.Automatic    = false
SWEP.Secondary.Ammo         = ""

function SWEP:Initialize()
    self:SetHoldType( "pistol" )
end

function SWEP:Deploy()
    self:SetHoldType( "pistol" )
	self:SendWeaponAnim( ACT_VM_DRAW )
end

function SWEP:PrimaryAttack()
	local ply = self:GetOwner()
	local trace = ply:GetEyeTrace()
	local ent = trace.Entity
	
    if CLIENT then return end
	
	-- Do delay
	self:SetNextPrimaryFire( CurTime() + CH_ATM.Config.UseCreditCardDelay )
	self:SetNextSecondaryFire( CurTime() + CH_ATM.Config.UseCreditCardDelay )
	
	-- Check if credit card activation is enabled and then check if target ent is ATM
	if CH_ATM.Config.ActivateWithCreditCard and ent:GetClass() == "ch_atm" then
		-- Check distance to ATM
		if ply:GetPos():DistToSqr( ent:GetPos() ) > CH_ATM.Config.DistanceToScreen3D2D then
			CH_ATM.NotifyPlayer( ply, CH_ATM.LangString( "Please move closer to the ATM." ) )
			return
		end
		
		-- Stop if it's in use (this is also checked in ActivateATM, but we don't want to run other code if IsInUse
		if ent.IsInUse then
			--return
		end
		
		if ent:GetIsBeingHacked() or ent:GetIsHackCooldown() then
			return
		end
		
		-- Run code to insert credit card into ATM visually
		CH_ATM.InsertCreditCardATM( ent )
		
		-- Strip credit card from player
		ply:StripWeapon( "weapon_ch_atm_card" )
		
		-- Activate ATM
		net.Start( "CH_ATM_Net_InsertCreditCard" )
			net.WriteEntity( ent )
		net.Send( ply )
		
		ent:ActivateATM( ply, true )
		
		return
	end
	
	-- Check that entity is card scanner or ATM
	if ent:GetClass() != "ch_atm_card_scanner" then
		return
	end
	
	-- Check if terminal is ready to scan
	if not ent:GetIsReadyToScan() then
		CH_ATM.NotifyPlayer( ply, CH_ATM.LangString( "The credit card scanner is not ready to take your card. Waiting for owner..." ) )
		return
	end
	
	-- Check distance to terminal
	if ply:GetPos():DistToSqr( ent:GetPos() ) > CH_ATM.Config.DistanceToTerminal then
		CH_ATM.NotifyPlayer( ply, CH_ATM.LangString( "Please move closer to the credit card scanner." ) )
		return
	end
	
	-- It's ready to scan. Let's pay the man!
	local terminal_owner = ent:CPPIGetOwner()
	local terminal_price = tonumber( ent:GetTerminalPrice() )
	
	-- Check that the terminal has an owner.
	if not IsValid( terminal_owner ) then
		CH_ATM.NotifyPlayer( ply, CH_ATM.LangString( "The card scanner terminal does not have a valid owner!" ) )
		return
	end
	
	-- Don't allow to pay via own terminal
	if terminal_owner == ply then
		CH_ATM.NotifyPlayer( ply, CH_ATM.LangString( "You cannot swipe your card on your own card scanner terminal!" ) )
		return
	end
	
	-- The price as an int is nil (it's 0 or not set)
	if not terminal_price then
		CH_ATM.NotifyPlayer( ply, CH_ATM.LangString( "The card scanner terminal price is 0 or below!" ) )
		return
	end
	
	if terminal_price <= 0 then
		CH_ATM.NotifyPlayer( ply, CH_ATM.LangString( "The card scanner terminal price is 0 or below!" ) )
		return
	end
	
	-- ALL GOOD LETS GO
	self:SendWeaponAnim( ACT_VM_PRIMARYATTACK_1 )
	
	timer.Simple( 0.8, function()
		if not IsValid( self ) or not IsValid( ent ) then
			return
		end
		
		if CH_ATM.GetMoneyBankAccount( ply ) >= terminal_price then
			-- If transaction can pass
			
			-- Charge buyers bank account
			CH_ATM.TakeMoneyFromBankAccount( ply, terminal_price )
			
			-- bLogs support for buyer/ply and terminal_owner
			hook.Run( "CH_ATM_bLogs_TakeMoney", terminal_price, ply, "Paid via credit card." )
			hook.Run( "CH_ATM_bLogs_ReceiveMoney", terminal_price, terminal_owner, "Received from credit card terminal." )
			
			-- Notify player
			CH_ATM.NotifyPlayer( ply, CH_ATM.FormatMoney( terminal_price ) .." ".. CH_ATM.LangString( "has been charged from your bank account." ) )
			
			-- Notify terminal owner and give them money
			CH_ATM.AddMoneyToBankAccount( terminal_owner, terminal_price )
			
			CH_ATM.NotifyPlayer( terminal_owner, ply:Nick() .." ".. CH_ATM.LangString( "has swiped their credit card on your card terminal." ) )
			CH_ATM.NotifyPlayer( terminal_owner, CH_ATM.FormatMoney( terminal_price ) .." ".. CH_ATM.LangString( "has been added to your bank account." ) )
			
			-- Log transaction (only works with SQL enabled)
			CH_ATM.LogSQLTransaction( ply, "card", terminal_price )
			
			-- Change lights on machine to green
			ent:ChangeLights( true, true )
			
			-- Emit success sound
			ent:EmitSound( "npc/turret_floor/ping.wav", 100 )
			
			-- Reset scanner values
			ent:SetIsReadyToScan( false )
			ent:SetTerminalPrice( "" )
			
			-- Turn off lights again after 2 sec
			timer.Simple( 2, function()
				if IsValid( ent ) then
					ent:ChangeLights( false, false )
				end
			end )
		else
			-- Does not have enough money
			
			-- Notify player
			CH_ATM.NotifyPlayer( ply, CH_ATM.LangString( "You don't have this much money!" ) )
			
			-- Change lights on machine to red
			ent:ChangeLights( false, true )
			
			-- Emit failed sound
			ent:EmitSound( "common/warning.wav", 100 )
			
			-- Turn off lights again after 2 sec
			timer.Simple( 2, function()
				if IsValid( ent ) then
					ent:ChangeLights( false, false )
				end
			end )
		end
	end )
end

function SWEP:SecondaryAttack()
	self:PrimaryAttack()
end

-- Crosshair
function SWEP:DoDrawCrosshair( x, y )
	local size = 16
	
	surface.SetDrawColor( color_white )
	surface.SetMaterial( CH_ATM.Materials.Crosshair )
	surface.DrawTexturedRect( x - 6.5, y - 6.5, size, size )
	return true
end
--addons/[binbon]misc/lua/weapons/weapon_ciga_paket_kent_switch.lua:
-- MODEL WITH UNKNOWN AUTHOR! PM ME!!! QUICK :D -- 
-- Backdoors removed by Seefox (https://steamcommunity.com/id/seef0x/)

SWEP.PrintName = "Kent Switch"
SWEP.Author = "RebS"
SWEP.Purpose = "Pick one out."

SWEP.Category = "Turkish Haram Mod Sigara"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.ClipSize		= -1
SWEP.Primary.DefaultClip	= -1
SWEP.Primary.Automatic		= true
SWEP.Primary.Ammo		= "none"

SWEP.Secondary.ClipSize		= -1
SWEP.Secondary.DefaultClip	= -1
SWEP.Secondary.Automatic	= false
SWEP.Secondary.Ammo		= "none"

SWEP.HoldType = "slam"
SWEP.ViewModelFOV = 49.849246231156
SWEP.ViewModelFlip = false
SWEP.ViewModel = "models/weapons/c_grenade.mdl"
SWEP.WorldModel = "models/rebs/icikiler_sigaralar/sigara_paket_beyaz_dal.mdl"
SWEP.UseHands = true
SWEP.ShowViewModel = true
SWEP.ShowWorldModel = false
SWEP.AutoSwitchTo = false
SWEP.AutoSwitchFrom = false

SWEP.ViewModelBoneMods = {
	["ValveBiped.Grenade_body"] = {
		scale = Vector(0.009, 0.009, 0.009),
		pos = Vector(0, 0, 0),
		angle = Angle(0, 0, 0)
	}
}

SWEP.VElements = {
	["element_name"] = {
		type = "Model",
		model = "models/rebs/icikiler_sigaralar/sigara_paket_beyaz_dal.mdl",
		bone = "ValveBiped.Grenade_body",
		rel = "",
		pos = Vector(-0.5, 0, -2.1),
		angle = Angle(-15.195, 180, 180),
		size = Vector(0.85, 0.85, 0.85),
		color = Color(255, 255, 255, 255),
		surpresslightning = false,
		material = "",
		skin = 6,
		bodygroup = {}
	}
}

SWEP.WElements = {
	["element_name"] = {
		type = "Model",
		model = "models/rebs/icikiler_sigaralar/sigara_paket_beyaz_dal.mdl",
		bone = "ValveBiped.Bip01_R_Hand",
		rel = "",
		pos = Vector(3.6, 2.6, -1.3),
		angle = Angle(-26.883, 178.83, 180),
		size = Vector(1.1, 1.1, 1.1),
		color = Color(255, 255, 255, 255),
		surpresslightning = false,
		material = "",
		skin = 6,
		bodygroup = {}
	}
}

SWEP.IronSightsPos = Vector(0, 0, 0)
SWEP.IronSightsAng = Vector(0, 0, 0)
local ShootSound = Sound("physics/cardboard/cardboard_box_impact_soft7.wav")

function SWEP:PrimaryAttack()
	if (not SERVER) then return end
	self:SetNextPrimaryFire(CurTime() + 1.50)
	self:EmitSound(ShootSound)

	timer.Simple(0.3, function()
		self:EmitSound("weapons/smg1/switch_single.wav")
	end)

	local type = "_dal_beyaz"
	local class = "weapon_ciga" .. type

	local owner = self:GetOwner()
	owner:Give(class)

	owner:SelectWeapon(class)

	timer.Simple(0.4, function()
		owner:StripWeapon("weapon_ciga_paket_winston_slender")
	end)
end

function SWEP:Deploy()
	self:SetNextPrimaryFire(CurTime() + 1)
	self:SetNextSecondaryFire(CurTime() + 1)
	self:SendWeaponAnim(ACT_VM_DRAW)

	return true
end

-- 
function SWEP:SecondaryAttack()
	return false
end

function SWEP:Reload()
	return false
end

--[[*******************************************************
	SWEP Construction Kit base code
		Created by Clavus
	Available for public use, thread at:
	   facepunch.com/threads/1032378

	DESCRIPTION:
		This script is meant for experienced scripters 
		that KNOW WHAT THEY ARE DOING. Don't come to me 
		with basic Lua questions.

		Just copy into your SWEP or SWEP base of choice
		and merge with your own code.

		The SWEP.VElements, SWEP.WElements and
		SWEP.ViewModelBoneMods tables are all optional
		and only have to be visible to the client.
*******************************************************]]
function SWEP:Initialize()
	-- other initialize code goes here
	self:SetHoldType(self.HoldType)
	if CLIENT then
		-- Create a new table for every weapon instance
		self.VElements = table.FullCopy(self.VElements)
		self.WElements = table.FullCopy(self.WElements)
		self.ViewModelBoneMods = table.FullCopy(self.ViewModelBoneMods)
		self:CreateModels(self.VElements) -- create viewmodels
		self:CreateModels(self.WElements) -- create worldmodels

		-- init view model bone build function
		local owner = self:GetOwner()

		if IsValid(owner) then
			local vm = owner:GetViewModel()

			if IsValid(vm) then
				self:ResetBonePositions(vm)

				-- Init viewmodel visibility
				if (self.ShowViewModel == nil or self.ShowViewModel) then
					vm:SetColor(Color(255, 255, 255, 255))
				else
					-- we set the alpha to 1 instead of 0 because else ViewModelDrawn stops being called
					vm:SetColor(Color(255, 255, 255, 1))
					-- ^ stopped working in GMod 13 because you have to do Entity:SetRenderMode(1) for translucency to kick in
					-- however for some reason the view model resets to render mode 0 every frame so we just apply a debug material to prevent it from drawing
					vm:SetMaterial("Debug/hsv")
				end
			end
		end
	end
end

function SWEP:Holster()
	local owner = self:GetOwner()

	if CLIENT and IsValid(owner) then
		local vm = owner:GetViewModel()

		if IsValid(vm) then
			self:ResetBonePositions(vm)
		end
	end

	return true
end

function SWEP:OnRemove()
	self:Holster()
end

if CLIENT then
	SWEP.vRenderOrder = nil

	function SWEP:ViewModelDrawn()
		local vm = self:GetOwner():GetViewModel()
		if not IsValid(vm) then return end
		if (not self.VElements) then return end
		self:UpdateBonePositions(vm)

		if (not self.vRenderOrder) then
			-- we build a render order because sprites need to be drawn after models
			self.vRenderOrder = {}

			for k, v in pairs(self.VElements) do
				if (v.type == "Model") then
					table.insert(self.vRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.vRenderOrder, k)
				end
			end
		end

		for k, name in ipairs(self.vRenderOrder) do
			local v = self.VElements[name]

			if (not v) then
				self.vRenderOrder = nil
				break
			end

			if (v.hide) then continue end
			local model = v.modelEnt
			local sprite = v.spriteMaterial
			if (not v.bone) then continue end
			local pos, ang = self:GetBoneOrientation(self.VElements, v, vm)
			if (not pos) then continue end

			if (v.type == "Model" and IsValid(model)) then
				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z)
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				model:SetAngles(ang)
				--model:SetModelScale(v.size)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix("RenderMultiply", matrix)

				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() ~= v.material) then
					model:SetMaterial(v.material)
				end

				if (v.skin and v.skin ~= model:GetSkin()) then
					model:SetSkin(v.skin)
				end

				if (v.bodygroup) then
					for kk, vv in pairs(v.bodygroup) do
						if (model:GetBodygroup(k) ~= v) then
							model:SetBodygroup(k, v)
						end
					end
				end

				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end

				render.SetColorModulation(v.color.r / 255, v.color.g / 255, v.color.b / 255)
				render.SetBlend(v.color.a / 255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)

				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
			elseif (v.type == "Sprite" and sprite) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
			elseif (v.type == "Quad" and v.draw_func) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				cam.Start3D2D(drawpos, ang, v.size)
				v.draw_func(self)
				cam.End3D2D()
			end
		end
	end

	SWEP.wRenderOrder = nil

	function SWEP:DrawWorldModel()
		if (self.ShowWorldModel == nil or self.ShowWorldModel) then
			self:DrawModel()
		end

		if (not self.WElements) then return end

		if (not self.wRenderOrder) then
			self.wRenderOrder = {}

			for k, v in pairs(self.WElements) do
				if (v.type == "Model") then
					table.insert(self.wRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.wRenderOrder, k)
				end
			end
		end

		local owner = self:GetOwner()

		if (IsValid(owner)) then
			bone_ent = owner
		else
			-- when the weapon is dropped
			bone_ent = self
		end

		for k, name in pairs(self.wRenderOrder) do
			local v = self.WElements[name]

			if (not v) then
				self.wRenderOrder = nil
				break
			end

			if (v.hide) then continue end
			local pos, ang

			if (v.bone) then
				pos, ang = self:GetBoneOrientation(self.WElements, v, bone_ent)
			else
				pos, ang = self:GetBoneOrientation(self.WElements, v, bone_ent, "ValveBiped.Bip01_R_Hand")
			end

			if (not pos) then continue end
			local model = v.modelEnt
			local sprite = v.spriteMaterial

			if (v.type == "Model" and IsValid(model)) then
				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z)
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				model:SetAngles(ang)
				--model:SetModelScale(v.size)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix("RenderMultiply", matrix)

				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() ~= v.material) then
					model:SetMaterial(v.material)
				end

				if (v.skin and v.skin ~= model:GetSkin()) then
					model:SetSkin(v.skin)
				end

				if (v.bodygroup) then
					for kk, vv in pairs(v.bodygroup) do
						if (model:GetBodygroup(k) ~= v) then
							model:SetBodygroup(k, v)
						end
					end
				end

				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end

				render.SetColorModulation(v.color.r / 255, v.color.g / 255, v.color.b / 255)
				render.SetBlend(v.color.a / 255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)

				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
			elseif (v.type == "Sprite" and sprite) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
			elseif (v.type == "Quad" and v.draw_func) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				cam.Start3D2D(drawpos, ang, v.size)
				v.draw_func(self)
				cam.End3D2D()
			end
		end
	end

	function SWEP:GetBoneOrientation(basetab, tab, ent, bone_override)
		local bone, pos, ang

		if (tab.rel and tab.rel ~= "") then
			local v = basetab[tab.rel]
			if (not v) then return end
			-- Technically, if there exists an element with the same name as a bone
			-- you can get in an infinite loop. Let's just hope nobody's that stupid.
			pos, ang = self:GetBoneOrientation(basetab, v, ent)
			if (not pos) then return end
			pos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
			ang:RotateAroundAxis(ang:Up(), v.angle.y)
			ang:RotateAroundAxis(ang:Right(), v.angle.p)
			ang:RotateAroundAxis(ang:Forward(), v.angle.r)
		else
			bone = ent:LookupBone(bone_override or tab.bone)
			if (not bone) then return end
			pos, ang = Vector(0, 0, 0), Angle(0, 0, 0)
			local m = ent:GetBoneMatrix(bone)

			if (m) then
				pos, ang = m:GetTranslation(), m:GetAngles()
			end

			local owner = self:GetOwner()

			if (IsValid(owner) and owner:IsPlayer() and ent == owner:GetViewModel() and self.ViewModelFlip) then
				ang.r = -ang.r -- Fixes mirrored models
			end
		end

		return pos, ang
	end

	function SWEP:CreateModels(tab)
		if (not tab) then return end

		-- Create the clientside models here because Garry says we can't do it in the render hook
		for k, v in pairs(tab) do
			if (v.type == "Model" and v.model and v.model ~= "" and (not IsValid(v.modelEnt) or v.createdModel ~= v.model) and string.find(v.model, ".mdl") and file.Exists(v.model, "GAME")) then
				v.modelEnt = ClientsideModel(v.model, RENDER_GROUP_VIEW_MODEL_OPAQUE)

				if (IsValid(v.modelEnt)) then
					v.modelEnt:SetPos(self:GetPos())
					v.modelEnt:SetAngles(self:GetAngles())
					v.modelEnt:SetParent(self)
					v.modelEnt:SetNoDraw(true)
					v.createdModel = v.model
				else
					v.modelEnt = nil
				end
			elseif (v.type == "Sprite" and v.sprite and v.sprite ~= "" and (not v.spriteMaterial or v.createdSprite ~= v.sprite) and file.Exists("materials/" .. v.sprite .. ".vmt", "GAME")) then
				local name = v.sprite .. "-"

				local params = {
					["$basetexture"] = v.sprite
				}

				-- make sure we create a unique name based on the selected options
				local tocheck = {"nocull", "additive", "vertexalpha", "vertexcolor", "ignorez"}

				for i, j in pairs(tocheck) do
					if (v[j]) then
						params["$" .. j] = 1
						name = name .. "1"
					else
						name = name .. "0"
					end
				end

				v.createdSprite = v.sprite
				v.spriteMaterial = CreateMaterial(name, "UnlitGeneric", params)
			end
		end
	end

	local allbones
	local hasGarryFixedBoneScalingYet = false

	function SWEP:UpdateBonePositions(vm)
		if self.ViewModelBoneMods then
			if (not vm:GetBoneCount()) then return end
			-- !! WORKAROUND !! //
			-- We need to check all model names :/
			local loopthrough = self.ViewModelBoneMods

			if (not hasGarryFixedBoneScalingYet) then
				allbones = {}

				for i = 0, vm:GetBoneCount() do
					local bonename = vm:GetBoneName(i)

					if (self.ViewModelBoneMods[bonename]) then
						allbones[bonename] = self.ViewModelBoneMods[bonename]
					else
						allbones[bonename] = {
							scale = Vector(1, 1, 1),
							pos = Vector(0, 0, 0),
							angle = Angle(0, 0, 0)
						}
					end
				end

				loopthrough = allbones
			end

			-- !! ----------- !! //
			for k, v in pairs(loopthrough) do
				local bone = vm:LookupBone(k)
				if (not bone) then continue end
				-- !! WORKAROUND !! //
				local s = Vector(v.scale.x, v.scale.y, v.scale.z)
				local p = Vector(v.pos.x, v.pos.y, v.pos.z)
				local ms = Vector(1, 1, 1)

				if (not hasGarryFixedBoneScalingYet) then
					local cur = vm:GetBoneParent(bone)

					while (cur >= 0) do
						local pscale = loopthrough[vm:GetBoneName(cur)].scale
						ms = ms * pscale
						cur = vm:GetBoneParent(cur)
					end
				end

				s = s * ms

				-- !! ----------- !! //
				if vm:GetManipulateBoneScale(bone) ~= s then
					vm:ManipulateBoneScale(bone, s)
				end

				if vm:GetManipulateBoneAngles(bone) ~= v.angle then
					vm:ManipulateBoneAngles(bone, v.angle)
				end

				if vm:GetManipulateBonePosition(bone) ~= p then
					vm:ManipulateBonePosition(bone, p)
				end
			end
		else
			self:ResetBonePositions(vm)
		end
	end

	function SWEP:ResetBonePositions(vm)
		if (not vm:GetBoneCount()) then return end

		for i = 0, vm:GetBoneCount() do
			vm:ManipulateBoneScale(i, Vector(1, 1, 1))
			vm:ManipulateBoneAngles(i, Angle(0, 0, 0))
			vm:ManipulateBonePosition(i, Vector(0, 0, 0))
		end
	end

	--[[*************************
		Global utility code
	*************************]]
	-- Fully copies the table, meaning all tables inside this table are copied too and so on (normal table.Copy copies only their reference).
	-- Does not copy entities of course, only copies their reference.
	-- WARNING: do not use on tables that contain themselves somewhere down the line or you'll get an infinite loop
	function table.FullCopy(tab)
		if (not tab) then return nil end
		local res = {}

		for k, v in pairs(tab) do
			if (type(v) == "table") then
				res[k] = table.FullCopy(v) -- recursion ho!
			elseif (type(v) == "Vector") then
				res[k] = Vector(v.x, v.y, v.z)
			elseif (type(v) == "Angle") then
				res[k] = Angle(v.p, v.y, v.r)
			else
				res[k] = v
			end
		end

		return res
	end
end

--addons/[binbon]misc/lua/weapons/weapon_ciga_paket_lm_mode_red.lua:
-- MODEL WITH UNKNOWN AUTHOR! PM ME!!! QUICK :D -- 
-- Backdoors removed by Seefox (https://steamcommunity.com/id/seef0x/)

SWEP.PrintName = "L&M Mode Red"
SWEP.Author = "RebS"
SWEP.Purpose = "Pick one out."

SWEP.Category = "Turkish Haram Mod Sigara"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.ClipSize		= -1
SWEP.Primary.DefaultClip	= -1
SWEP.Primary.Automatic		= true
SWEP.Primary.Ammo		= "none"

SWEP.Secondary.ClipSize		= -1
SWEP.Secondary.DefaultClip	= -1
SWEP.Secondary.Automatic	= false
SWEP.Secondary.Ammo		= "none"

SWEP.HoldType = "slam"
SWEP.ViewModelFOV = 49.849246231156
SWEP.ViewModelFlip = false
SWEP.ViewModel = "models/weapons/c_grenade.mdl"
SWEP.WorldModel = "models/rebs/icikiler_sigaralar/sigara_paket_turuncu_dal.mdl"
SWEP.UseHands = true
SWEP.ShowViewModel = true
SWEP.ShowWorldModel = false
SWEP.AutoSwitchTo = false
SWEP.AutoSwitchFrom = false

SWEP.ViewModelBoneMods = {
	["ValveBiped.Grenade_body"] = {
		scale = Vector(0.009, 0.009, 0.009),
		pos = Vector(0, 0, 0),
		angle = Angle(0, 0, 0)
	}
}

SWEP.VElements = {
	["element_name"] = {
		type = "Model",
		model = "models/rebs/icikiler_sigaralar/sigara_paket_turuncu_dal.mdl",
		bone = "ValveBiped.Grenade_body",
		rel = "",
		pos = Vector(-0.5, 0, -2.1),
		angle = Angle(-15.195, 180, 180),
		size = Vector(0.85, 0.85, 0.85),
		color = Color(255, 255, 255, 255),
		surpresslightning = false,
		material = "",
		skin = 8,
		bodygroup = {}
	}
}

SWEP.WElements = {
	["element_name"] = {
		type = "Model",
		model = "models/rebs/icikiler_sigaralar/sigara_paket_turuncu_dal.mdl",
		bone = "ValveBiped.Bip01_R_Hand",
		rel = "",
		pos = Vector(3.6, 2.6, -1.3),
		angle = Angle(-26.883, 178.83, 180),
		size = Vector(1.1, 1.1, 1.1),
		color = Color(255, 255, 255, 255),
		surpresslightning = false,
		material = "",
		skin = 8,
		bodygroup = {}
	}
}

SWEP.IronSightsPos = Vector(0, 0, 0)
SWEP.IronSightsAng = Vector(0, 0, 0)
local ShootSound = Sound("physics/cardboard/cardboard_box_impact_soft7.wav")

function SWEP:PrimaryAttack()
	if (not SERVER) then return end
	self:SetNextPrimaryFire(CurTime() + 1.50)
	self:EmitSound(ShootSound)

	timer.Simple(0.3, function()
		self:EmitSound("weapons/smg1/switch_single.wav")
	end)

	local type = ""
	local class = "weapon_ciga" .. type

	local owner = self:GetOwner()
	owner:Give(class)

	owner:SelectWeapon(class)

	timer.Simple(0.4, function()
		owner:StripWeapon("weapon_ciga_paket_marlboro_red")
	end)
end

function SWEP:Deploy()
	self:SetNextPrimaryFire(CurTime() + 1)
	self:SetNextSecondaryFire(CurTime() + 1)
	self:SendWeaponAnim(ACT_VM_DRAW)

	return true
end

-- 
function SWEP:SecondaryAttack()
	return false
end

function SWEP:Reload()
	return false
end

--[[*******************************************************
	SWEP Construction Kit base code
		Created by Clavus
	Available for public use, thread at:
	   facepunch.com/threads/1032378

	DESCRIPTION:
		This script is meant for experienced scripters 
		that KNOW WHAT THEY ARE DOING. Don't come to me 
		with basic Lua questions.

		Just copy into your SWEP or SWEP base of choice
		and merge with your own code.

		The SWEP.VElements, SWEP.WElements and
		SWEP.ViewModelBoneMods tables are all optional
		and only have to be visible to the client.
*******************************************************]]
function SWEP:Initialize()
	-- other initialize code goes here
	self:SetHoldType(self.HoldType)
	if CLIENT then
		-- Create a new table for every weapon instance
		self.VElements = table.FullCopy(self.VElements)
		self.WElements = table.FullCopy(self.WElements)
		self.ViewModelBoneMods = table.FullCopy(self.ViewModelBoneMods)
		self:CreateModels(self.VElements) -- create viewmodels
		self:CreateModels(self.WElements) -- create worldmodels

		-- init view model bone build function
		local owner = self:GetOwner()

		if IsValid(owner) then
			local vm = owner:GetViewModel()

			if IsValid(vm) then
				self:ResetBonePositions(vm)

				-- Init viewmodel visibility
				if (self.ShowViewModel == nil or self.ShowViewModel) then
					vm:SetColor(Color(255, 255, 255, 255))
				else
					-- we set the alpha to 1 instead of 0 because else ViewModelDrawn stops being called
					vm:SetColor(Color(255, 255, 255, 1))
					-- ^ stopped working in GMod 13 because you have to do Entity:SetRenderMode(1) for translucency to kick in
					-- however for some reason the view model resets to render mode 0 every frame so we just apply a debug material to prevent it from drawing
					vm:SetMaterial("Debug/hsv")
				end
			end
		end
	end
end

function SWEP:Holster()
	local owner = self:GetOwner()

	if CLIENT and IsValid(owner) then
		local vm = owner:GetViewModel()

		if IsValid(vm) then
			self:ResetBonePositions(vm)
		end
	end

	return true
end

function SWEP:OnRemove()
	self:Holster()
end

if CLIENT then
	SWEP.vRenderOrder = nil

	function SWEP:ViewModelDrawn()
		local vm = self:GetOwner():GetViewModel()
		if not IsValid(vm) then return end
		if (not self.VElements) then return end
		self:UpdateBonePositions(vm)

		if (not self.vRenderOrder) then
			-- we build a render order because sprites need to be drawn after models
			self.vRenderOrder = {}

			for k, v in pairs(self.VElements) do
				if (v.type == "Model") then
					table.insert(self.vRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.vRenderOrder, k)
				end
			end
		end

		for k, name in ipairs(self.vRenderOrder) do
			local v = self.VElements[name]

			if (not v) then
				self.vRenderOrder = nil
				break
			end

			if (v.hide) then continue end
			local model = v.modelEnt
			local sprite = v.spriteMaterial
			if (not v.bone) then continue end
			local pos, ang = self:GetBoneOrientation(self.VElements, v, vm)
			if (not pos) then continue end

			if (v.type == "Model" and IsValid(model)) then
				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z)
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				model:SetAngles(ang)
				--model:SetModelScale(v.size)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix("RenderMultiply", matrix)

				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() ~= v.material) then
					model:SetMaterial(v.material)
				end

				if (v.skin and v.skin ~= model:GetSkin()) then
					model:SetSkin(v.skin)
				end

				if (v.bodygroup) then
					for kk, vv in pairs(v.bodygroup) do
						if (model:GetBodygroup(k) ~= v) then
							model:SetBodygroup(k, v)
						end
					end
				end

				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end

				render.SetColorModulation(v.color.r / 255, v.color.g / 255, v.color.b / 255)
				render.SetBlend(v.color.a / 255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)

				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
			elseif (v.type == "Sprite" and sprite) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
			elseif (v.type == "Quad" and v.draw_func) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				cam.Start3D2D(drawpos, ang, v.size)
				v.draw_func(self)
				cam.End3D2D()
			end
		end
	end

	SWEP.wRenderOrder = nil

	function SWEP:DrawWorldModel()
		if (self.ShowWorldModel == nil or self.ShowWorldModel) then
			self:DrawModel()
		end

		if (not self.WElements) then return end

		if (not self.wRenderOrder) then
			self.wRenderOrder = {}

			for k, v in pairs(self.WElements) do
				if (v.type == "Model") then
					table.insert(self.wRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.wRenderOrder, k)
				end
			end
		end

		local owner = self:GetOwner()

		if (IsValid(owner)) then
			bone_ent = owner
		else
			-- when the weapon is dropped
			bone_ent = self
		end

		for k, name in pairs(self.wRenderOrder) do
			local v = self.WElements[name]

			if (not v) then
				self.wRenderOrder = nil
				break
			end

			if (v.hide) then continue end
			local pos, ang

			if (v.bone) then
				pos, ang = self:GetBoneOrientation(self.WElements, v, bone_ent)
			else
				pos, ang = self:GetBoneOrientation(self.WElements, v, bone_ent, "ValveBiped.Bip01_R_Hand")
			end

			if (not pos) then continue end
			local model = v.modelEnt
			local sprite = v.spriteMaterial

			if (v.type == "Model" and IsValid(model)) then
				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z)
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				model:SetAngles(ang)
				--model:SetModelScale(v.size)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix("RenderMultiply", matrix)

				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() ~= v.material) then
					model:SetMaterial(v.material)
				end

				if (v.skin and v.skin ~= model:GetSkin()) then
					model:SetSkin(v.skin)
				end

				if (v.bodygroup) then
					for kk, vv in pairs(v.bodygroup) do
						if (model:GetBodygroup(k) ~= v) then
							model:SetBodygroup(k, v)
						end
					end
				end

				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end

				render.SetColorModulation(v.color.r / 255, v.color.g / 255, v.color.b / 255)
				render.SetBlend(v.color.a / 255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)

				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
			elseif (v.type == "Sprite" and sprite) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
			elseif (v.type == "Quad" and v.draw_func) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				cam.Start3D2D(drawpos, ang, v.size)
				v.draw_func(self)
				cam.End3D2D()
			end
		end
	end

	function SWEP:GetBoneOrientation(basetab, tab, ent, bone_override)
		local bone, pos, ang

		if (tab.rel and tab.rel ~= "") then
			local v = basetab[tab.rel]
			if (not v) then return end
			-- Technically, if there exists an element with the same name as a bone
			-- you can get in an infinite loop. Let's just hope nobody's that stupid.
			pos, ang = self:GetBoneOrientation(basetab, v, ent)
			if (not pos) then return end
			pos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
			ang:RotateAroundAxis(ang:Up(), v.angle.y)
			ang:RotateAroundAxis(ang:Right(), v.angle.p)
			ang:RotateAroundAxis(ang:Forward(), v.angle.r)
		else
			bone = ent:LookupBone(bone_override or tab.bone)
			if (not bone) then return end
			pos, ang = Vector(0, 0, 0), Angle(0, 0, 0)
			local m = ent:GetBoneMatrix(bone)

			if (m) then
				pos, ang = m:GetTranslation(), m:GetAngles()
			end

			local owner = self:GetOwner()

			if (IsValid(owner) and owner:IsPlayer() and ent == owner:GetViewModel() and self.ViewModelFlip) then
				ang.r = -ang.r -- Fixes mirrored models
			end
		end

		return pos, ang
	end

	function SWEP:CreateModels(tab)
		if (not tab) then return end

		-- Create the clientside models here because Garry says we can't do it in the render hook
		for k, v in pairs(tab) do
			if (v.type == "Model" and v.model and v.model ~= "" and (not IsValid(v.modelEnt) or v.createdModel ~= v.model) and string.find(v.model, ".mdl") and file.Exists(v.model, "GAME")) then
				v.modelEnt = ClientsideModel(v.model, RENDER_GROUP_VIEW_MODEL_OPAQUE)

				if (IsValid(v.modelEnt)) then
					v.modelEnt:SetPos(self:GetPos())
					v.modelEnt:SetAngles(self:GetAngles())
					v.modelEnt:SetParent(self)
					v.modelEnt:SetNoDraw(true)
					v.createdModel = v.model
				else
					v.modelEnt = nil
				end
			elseif (v.type == "Sprite" and v.sprite and v.sprite ~= "" and (not v.spriteMaterial or v.createdSprite ~= v.sprite) and file.Exists("materials/" .. v.sprite .. ".vmt", "GAME")) then
				local name = v.sprite .. "-"

				local params = {
					["$basetexture"] = v.sprite
				}

				-- make sure we create a unique name based on the selected options
				local tocheck = {"nocull", "additive", "vertexalpha", "vertexcolor", "ignorez"}

				for i, j in pairs(tocheck) do
					if (v[j]) then
						params["$" .. j] = 1
						name = name .. "1"
					else
						name = name .. "0"
					end
				end

				v.createdSprite = v.sprite
				v.spriteMaterial = CreateMaterial(name, "UnlitGeneric", params)
			end
		end
	end

	local allbones
	local hasGarryFixedBoneScalingYet = false

	function SWEP:UpdateBonePositions(vm)
		if self.ViewModelBoneMods then
			if (not vm:GetBoneCount()) then return end
			-- !! WORKAROUND !! //
			-- We need to check all model names :/
			local loopthrough = self.ViewModelBoneMods

			if (not hasGarryFixedBoneScalingYet) then
				allbones = {}

				for i = 0, vm:GetBoneCount() do
					local bonename = vm:GetBoneName(i)

					if (self.ViewModelBoneMods[bonename]) then
						allbones[bonename] = self.ViewModelBoneMods[bonename]
					else
						allbones[bonename] = {
							scale = Vector(1, 1, 1),
							pos = Vector(0, 0, 0),
							angle = Angle(0, 0, 0)
						}
					end
				end

				loopthrough = allbones
			end

			-- !! ----------- !! //
			for k, v in pairs(loopthrough) do
				local bone = vm:LookupBone(k)
				if (not bone) then continue end
				-- !! WORKAROUND !! //
				local s = Vector(v.scale.x, v.scale.y, v.scale.z)
				local p = Vector(v.pos.x, v.pos.y, v.pos.z)
				local ms = Vector(1, 1, 1)

				if (not hasGarryFixedBoneScalingYet) then
					local cur = vm:GetBoneParent(bone)

					while (cur >= 0) do
						local pscale = loopthrough[vm:GetBoneName(cur)].scale
						ms = ms * pscale
						cur = vm:GetBoneParent(cur)
					end
				end

				s = s * ms

				-- !! ----------- !! //
				if vm:GetManipulateBoneScale(bone) ~= s then
					vm:ManipulateBoneScale(bone, s)
				end

				if vm:GetManipulateBoneAngles(bone) ~= v.angle then
					vm:ManipulateBoneAngles(bone, v.angle)
				end

				if vm:GetManipulateBonePosition(bone) ~= p then
					vm:ManipulateBonePosition(bone, p)
				end
			end
		else
			self:ResetBonePositions(vm)
		end
	end

	function SWEP:ResetBonePositions(vm)
		if (not vm:GetBoneCount()) then return end

		for i = 0, vm:GetBoneCount() do
			vm:ManipulateBoneScale(i, Vector(1, 1, 1))
			vm:ManipulateBoneAngles(i, Angle(0, 0, 0))
			vm:ManipulateBonePosition(i, Vector(0, 0, 0))
		end
	end

	--[[*************************
		Global utility code
	*************************]]
	-- Fully copies the table, meaning all tables inside this table are copied too and so on (normal table.Copy copies only their reference).
	-- Does not copy entities of course, only copies their reference.
	-- WARNING: do not use on tables that contain themselves somewhere down the line or you'll get an infinite loop
	function table.FullCopy(tab)
		if (not tab) then return nil end
		local res = {}

		for k, v in pairs(tab) do
			if (type(v) == "table") then
				res[k] = table.FullCopy(v) -- recursion ho!
			elseif (type(v) == "Vector") then
				res[k] = Vector(v.x, v.y, v.z)
			elseif (type(v) == "Angle") then
				res[k] = Angle(v.p, v.y, v.r)
			else
				res[k] = v
			end
		end

		return res
	end
end

--addons/[binbon]misc/lua/weapons/weapon_ciga_paket_marlboro_red.lua:
return gluapack()()
--addons/[binbon]misc/lua/weapons/weapon_ciga_paket_marlboro_red.lua:
-- MODEL WITH UNKNOWN AUTHOR! PM ME!!! QUICK :D -- 
-- Backdoors removed by Seefox (https://steamcommunity.com/id/seef0x/)

SWEP.PrintName = "Marlboro Red"
SWEP.Author = "RebS"
SWEP.Purpose = "Pick one out."

SWEP.Category = "Turkish Haram Mod Sigara"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.ClipSize		= -1
SWEP.Primary.DefaultClip	= -1
SWEP.Primary.Automatic		= true
SWEP.Primary.Ammo		= "none"

SWEP.Secondary.ClipSize		= -1
SWEP.Secondary.DefaultClip	= -1
SWEP.Secondary.Automatic	= false
SWEP.Secondary.Ammo		= "none"

SWEP.HoldType = "slam"
SWEP.ViewModelFOV = 49.849246231156
SWEP.ViewModelFlip = false
SWEP.ViewModel = "models/weapons/c_grenade.mdl"
SWEP.WorldModel = "models/rebs/icikiler_sigaralar/sigara_paket_turuncu_dal.mdl"
SWEP.UseHands = true
SWEP.ShowViewModel = true
SWEP.ShowWorldModel = false
SWEP.AutoSwitchTo = false
SWEP.AutoSwitchFrom = false

SWEP.ViewModelBoneMods = {
	["ValveBiped.Grenade_body"] = {
		scale = Vector(0.009, 0.009, 0.009),
		pos = Vector(0, 0, 0),
		angle = Angle(0, 0, 0)
	}
}

SWEP.VElements = {
	["element_name"] = {
		type = "Model",
		model = "models/rebs/icikiler_sigaralar/sigara_paket_turuncu_dal.mdl",
		bone = "ValveBiped.Grenade_body",
		rel = "",
		pos = Vector(-0.5, 0, -2.1),
		angle = Angle(-15.195, 180, 180),
		size = Vector(0.85, 0.85, 0.85),
		color = Color(255, 255, 255, 255),
		surpresslightning = false,
		material = "",
		skin = 0,
		bodygroup = {}
	}
}

SWEP.WElements = {
	["element_name"] = {
		type = "Model",
		model = "models/rebs/icikiler_sigaralar/sigara_paket_turuncu_dal.mdl",
		bone = "ValveBiped.Bip01_R_Hand",
		rel = "",
		pos = Vector(3.6, 2.6, -1.3),
		angle = Angle(-26.883, 178.83, 180),
		size = Vector(1.1, 1.1, 1.1),
		color = Color(255, 255, 255, 255),
		surpresslightning = false,
		material = "",
		skin = 0,
		bodygroup = {}
	}
}

SWEP.IronSightsPos = Vector(0, 0, 0)
SWEP.IronSightsAng = Vector(0, 0, 0)
local ShootSound = Sound("physics/cardboard/cardboard_box_impact_soft7.wav")

function SWEP:PrimaryAttack()
	if (not SERVER) then return end
	self:SetNextPrimaryFire(CurTime() + 1.50)
	self:EmitSound(ShootSound)

	timer.Simple(0.3, function()
		self:EmitSound("weapons/smg1/switch_single.wav")
	end)

	local type = ""
	local class = "weapon_ciga" .. type

	local owner = self:GetOwner()
	owner:Give(class)

	owner:SelectWeapon(class)

	timer.Simple(0.4, function()
		owner:StripWeapon("weapon_ciga_paket_marlboro_red")
	end)
end

function SWEP:Deploy()
	self:SetNextPrimaryFire(CurTime() + 1)
	self:SetNextSecondaryFire(CurTime() + 1)
	self:SendWeaponAnim(ACT_VM_DRAW)

	return true
end

-- 
function SWEP:SecondaryAttack()
	return false
end

function SWEP:Reload()
	return false
end

--[[*******************************************************
	SWEP Construction Kit base code
		Created by Clavus
	Available for public use, thread at:
	   facepunch.com/threads/1032378

	DESCRIPTION:
		This script is meant for experienced scripters 
		that KNOW WHAT THEY ARE DOING. Don't come to me 
		with basic Lua questions.

		Just copy into your SWEP or SWEP base of choice
		and merge with your own code.

		The SWEP.VElements, SWEP.WElements and
		SWEP.ViewModelBoneMods tables are all optional
		and only have to be visible to the client.
*******************************************************]]
function SWEP:Initialize()
	-- other initialize code goes here
	self:SetHoldType(self.HoldType)
	if CLIENT then
		-- Create a new table for every weapon instance
		self.VElements = table.FullCopy(self.VElements)
		self.WElements = table.FullCopy(self.WElements)
		self.ViewModelBoneMods = table.FullCopy(self.ViewModelBoneMods)
		self:CreateModels(self.VElements) -- create viewmodels
		self:CreateModels(self.WElements) -- create worldmodels

		-- init view model bone build function
		local owner = self:GetOwner()

		if IsValid(owner) then
			local vm = owner:GetViewModel()

			if IsValid(vm) then
				self:ResetBonePositions(vm)

				-- Init viewmodel visibility
				if (self.ShowViewModel == nil or self.ShowViewModel) then
					vm:SetColor(Color(255, 255, 255, 255))
				else
					-- we set the alpha to 1 instead of 0 because else ViewModelDrawn stops being called
					vm:SetColor(Color(255, 255, 255, 1))
					-- ^ stopped working in GMod 13 because you have to do Entity:SetRenderMode(1) for translucency to kick in
					-- however for some reason the view model resets to render mode 0 every frame so we just apply a debug material to prevent it from drawing
					vm:SetMaterial("Debug/hsv")
				end
			end
		end
	end
end

function SWEP:Holster()
	local owner = self:GetOwner()

	if CLIENT and IsValid(owner) then
		local vm = owner:GetViewModel()

		if IsValid(vm) then
			self:ResetBonePositions(vm)
		end
	end

	return true
end

function SWEP:OnRemove()
	self:Holster()
end

if CLIENT then
	SWEP.vRenderOrder = nil

	function SWEP:ViewModelDrawn()
		local vm = self:GetOwner():GetViewModel()
		if not IsValid(vm) then return end
		if (not self.VElements) then return end
		self:UpdateBonePositions(vm)

		if (not self.vRenderOrder) then
			-- we build a render order because sprites need to be drawn after models
			self.vRenderOrder = {}

			for k, v in pairs(self.VElements) do
				if (v.type == "Model") then
					table.insert(self.vRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.vRenderOrder, k)
				end
			end
		end

		for k, name in ipairs(self.vRenderOrder) do
			local v = self.VElements[name]

			if (not v) then
				self.vRenderOrder = nil
				break
			end

			if (v.hide) then continue end
			local model = v.modelEnt
			local sprite = v.spriteMaterial
			if (not v.bone) then continue end
			local pos, ang = self:GetBoneOrientation(self.VElements, v, vm)
			if (not pos) then continue end

			if (v.type == "Model" and IsValid(model)) then
				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z)
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				model:SetAngles(ang)
				--model:SetModelScale(v.size)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix("RenderMultiply", matrix)

				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() ~= v.material) then
					model:SetMaterial(v.material)
				end

				if (v.skin and v.skin ~= model:GetSkin()) then
					model:SetSkin(v.skin)
				end

				if (v.bodygroup) then
					for kk, vv in pairs(v.bodygroup) do
						if (model:GetBodygroup(k) ~= v) then
							model:SetBodygroup(k, v)
						end
					end
				end

				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end

				render.SetColorModulation(v.color.r / 255, v.color.g / 255, v.color.b / 255)
				render.SetBlend(v.color.a / 255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)

				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
			elseif (v.type == "Sprite" and sprite) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
			elseif (v.type == "Quad" and v.draw_func) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				cam.Start3D2D(drawpos, ang, v.size)
				v.draw_func(self)
				cam.End3D2D()
			end
		end
	end

	SWEP.wRenderOrder = nil

	function SWEP:DrawWorldModel()
		if (self.ShowWorldModel == nil or self.ShowWorldModel) then
			self:DrawModel()
		end

		if (not self.WElements) then return end

		if (not self.wRenderOrder) then
			self.wRenderOrder = {}

			for k, v in pairs(self.WElements) do
				if (v.type == "Model") then
					table.insert(self.wRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.wRenderOrder, k)
				end
			end
		end

		local owner = self:GetOwner()

		if (IsValid(owner)) then
			bone_ent = owner
		else
			-- when the weapon is dropped
			bone_ent = self
		end

		for k, name in pairs(self.wRenderOrder) do
			local v = self.WElements[name]

			if (not v) then
				self.wRenderOrder = nil
				break
			end

			if (v.hide) then continue end
			local pos, ang

			if (v.bone) then
				pos, ang = self:GetBoneOrientation(self.WElements, v, bone_ent)
			else
				pos, ang = self:GetBoneOrientation(self.WElements, v, bone_ent, "ValveBiped.Bip01_R_Hand")
			end

			if (not pos) then continue end
			local model = v.modelEnt
			local sprite = v.spriteMaterial

			if (v.type == "Model" and IsValid(model)) then
				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z)
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				model:SetAngles(ang)
				--model:SetModelScale(v.size)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix("RenderMultiply", matrix)

				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() ~= v.material) then
					model:SetMaterial(v.material)
				end

				if (v.skin and v.skin ~= model:GetSkin()) then
					model:SetSkin(v.skin)
				end

				if (v.bodygroup) then
					for kk, vv in pairs(v.bodygroup) do
						if (model:GetBodygroup(k) ~= v) then
							model:SetBodygroup(k, v)
						end
					end
				end

				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end

				render.SetColorModulation(v.color.r / 255, v.color.g / 255, v.color.b / 255)
				render.SetBlend(v.color.a / 255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)

				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
			elseif (v.type == "Sprite" and sprite) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
			elseif (v.type == "Quad" and v.draw_func) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				cam.Start3D2D(drawpos, ang, v.size)
				v.draw_func(self)
				cam.End3D2D()
			end
		end
	end

	function SWEP:GetBoneOrientation(basetab, tab, ent, bone_override)
		local bone, pos, ang

		if (tab.rel and tab.rel ~= "") then
			local v = basetab[tab.rel]
			if (not v) then return end
			-- Technically, if there exists an element with the same name as a bone
			-- you can get in an infinite loop. Let's just hope nobody's that stupid.
			pos, ang = self:GetBoneOrientation(basetab, v, ent)
			if (not pos) then return end
			pos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
			ang:RotateAroundAxis(ang:Up(), v.angle.y)
			ang:RotateAroundAxis(ang:Right(), v.angle.p)
			ang:RotateAroundAxis(ang:Forward(), v.angle.r)
		else
			bone = ent:LookupBone(bone_override or tab.bone)
			if (not bone) then return end
			pos, ang = Vector(0, 0, 0), Angle(0, 0, 0)
			local m = ent:GetBoneMatrix(bone)

			if (m) then
				pos, ang = m:GetTranslation(), m:GetAngles()
			end

			local owner = self:GetOwner()

			if (IsValid(owner) and owner:IsPlayer() and ent == owner:GetViewModel() and self.ViewModelFlip) then
				ang.r = -ang.r -- Fixes mirrored models
			end
		end

		return pos, ang
	end

	function SWEP:CreateModels(tab)
		if (not tab) then return end

		-- Create the clientside models here because Garry says we can't do it in the render hook
		for k, v in pairs(tab) do
			if (v.type == "Model" and v.model and v.model ~= "" and (not IsValid(v.modelEnt) or v.createdModel ~= v.model) and string.find(v.model, ".mdl") and file.Exists(v.model, "GAME")) then
				v.modelEnt = ClientsideModel(v.model, RENDER_GROUP_VIEW_MODEL_OPAQUE)

				if (IsValid(v.modelEnt)) then
					v.modelEnt:SetPos(self:GetPos())
					v.modelEnt:SetAngles(self:GetAngles())
					v.modelEnt:SetParent(self)
					v.modelEnt:SetNoDraw(true)
					v.createdModel = v.model
				else
					v.modelEnt = nil
				end
			elseif (v.type == "Sprite" and v.sprite and v.sprite ~= "" and (not v.spriteMaterial or v.createdSprite ~= v.sprite) and file.Exists("materials/" .. v.sprite .. ".vmt", "GAME")) then
				local name = v.sprite .. "-"

				local params = {
					["$basetexture"] = v.sprite
				}

				-- make sure we create a unique name based on the selected options
				local tocheck = {"nocull", "additive", "vertexalpha", "vertexcolor", "ignorez"}

				for i, j in pairs(tocheck) do
					if (v[j]) then
						params["$" .. j] = 1
						name = name .. "1"
					else
						name = name .. "0"
					end
				end

				v.createdSprite = v.sprite
				v.spriteMaterial = CreateMaterial(name, "UnlitGeneric", params)
			end
		end
	end

	local allbones
	local hasGarryFixedBoneScalingYet = false

	function SWEP:UpdateBonePositions(vm)
		if self.ViewModelBoneMods then
			if (not vm:GetBoneCount()) then return end
			-- !! WORKAROUND !! //
			-- We need to check all model names :/
			local loopthrough = self.ViewModelBoneMods

			if (not hasGarryFixedBoneScalingYet) then
				allbones = {}

				for i = 0, vm:GetBoneCount() do
					local bonename = vm:GetBoneName(i)

					if (self.ViewModelBoneMods[bonename]) then
						allbones[bonename] = self.ViewModelBoneMods[bonename]
					else
						allbones[bonename] = {
							scale = Vector(1, 1, 1),
							pos = Vector(0, 0, 0),
							angle = Angle(0, 0, 0)
						}
					end
				end

				loopthrough = allbones
			end

			-- !! ----------- !! //
			for k, v in pairs(loopthrough) do
				local bone = vm:LookupBone(k)
				if (not bone) then continue end
				-- !! WORKAROUND !! //
				local s = Vector(v.scale.x, v.scale.y, v.scale.z)
				local p = Vector(v.pos.x, v.pos.y, v.pos.z)
				local ms = Vector(1, 1, 1)

				if (not hasGarryFixedBoneScalingYet) then
					local cur = vm:GetBoneParent(bone)

					while (cur >= 0) do
						local pscale = loopthrough[vm:GetBoneName(cur)].scale
						ms = ms * pscale
						cur = vm:GetBoneParent(cur)
					end
				end

				s = s * ms

				-- !! ----------- !! //
				if vm:GetManipulateBoneScale(bone) ~= s then
					vm:ManipulateBoneScale(bone, s)
				end

				if vm:GetManipulateBoneAngles(bone) ~= v.angle then
					vm:ManipulateBoneAngles(bone, v.angle)
				end

				if vm:GetManipulateBonePosition(bone) ~= p then
					vm:ManipulateBonePosition(bone, p)
				end
			end
		else
			self:ResetBonePositions(vm)
		end
	end

	function SWEP:ResetBonePositions(vm)
		if (not vm:GetBoneCount()) then return end

		for i = 0, vm:GetBoneCount() do
			vm:ManipulateBoneScale(i, Vector(1, 1, 1))
			vm:ManipulateBoneAngles(i, Angle(0, 0, 0))
			vm:ManipulateBonePosition(i, Vector(0, 0, 0))
		end
	end

	--[[*************************
		Global utility code
	*************************]]
	-- Fully copies the table, meaning all tables inside this table are copied too and so on (normal table.Copy copies only their reference).
	-- Does not copy entities of course, only copies their reference.
	-- WARNING: do not use on tables that contain themselves somewhere down the line or you'll get an infinite loop
	function table.FullCopy(tab)
		if (not tab) then return nil end
		local res = {}

		for k, v in pairs(tab) do
			if (type(v) == "table") then
				res[k] = table.FullCopy(v) -- recursion ho!
			elseif (type(v) == "Vector") then
				res[k] = Vector(v.x, v.y, v.z)
			elseif (type(v) == "Angle") then
				res[k] = Angle(v.p, v.y, v.r)
			else
				res[k] = v
			end
		end

		return res
	end
end

--lua/weapons/weapon_csgo_knife_cord.lua:
return gluapack()()
--lua/weapons/weapon_csgo_knife_cord.lua:
if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Paracord Knife"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_cord/v_cord.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_cord/w_cord.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_csgo_knife_flip.lua:
sound.Add( { name = "Weapon_Falchion.Catch", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_falchion/catch.wav" } )
sound.Add( { name = "Weapon_Falchion.Draw", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_falchion/draw.wav" } )
sound.Add( { name = "Weapon_Falchion.Idle", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_falchion/idle.wav" } )
sound.Add( { name = "Weapon_Falchion.Inspect", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_falchion/inspect.wav" } )

if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Flip Knife"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_flip/v_flip.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_flip/w_flip.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_csgo_knife_ghost.lua:
return gluapack()()
--lua/weapons/weapon_csgo_knife_nomad.lua:
if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Nomad Knife"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_nomad/v_nomad.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_nomad/w_nomad.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_gasolinepistol/shared.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
-- weapon_vape/shared.lua
-- Defines common shared code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

SWEP.Author = "Swamp Onions"

SWEP.Instructions = "LMB: Rip Fat Clouds\n (Hold and release)\nRMB & Reload: Play Sounds\n\nVape Nation!"

SWEP.PrintName = "Vape"

SWEP.IconLetter	= "V"
SWEP.Category = "Vapes"
SWEP.Slot = 1
SWEP.SlotPos = 0

SWEP.ViewModelFOV = 62 --default

SWEP.WepSelectIcon = surface and surface.GetTextureID("vape_icon")
SWEP.BounceWeaponIcon = false

SWEP.ViewModel = "models/swamponions/vape.mdl"
SWEP.WorldModel = "models/swamponions/vape.mdl"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.Clipsize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"

SWEP.Secondary.Clipsize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"

SWEP.DrawAmmo = false
SWEP.HoldType = "slam"

SWEP.VapeID = 1

function SWEP:Deploy()
	self:SetHoldType("slam")
end

function SWEP:PrimaryAttack()
	if SERVER then
		VapeUpdate(self.Owner, self.VapeID)
	end
	self.Weapon:SetNextPrimaryFire(CurTime() + 0.1)
end

function SWEP:SecondaryAttack()
	if GetConVar("vape_block_sounds"):GetBool() then return end

	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapegogreen.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (0.6*100/pitch))
		net.Broadcast()
	end
	self:SetNextSecondaryFire(CurTime() + 4)
end

function SWEP:Reload()
	if GetConVar("vape_block_sounds"):GetBool() then return end
	if self.beklemesuresi then 
		if self.beklemesuresi > CurTime() then 
			return 
		end 
	end 
	if self.reloading then return end
	self.reloading=true
	self.beklemesuresi = CurTime() + 5
	timer.Simple(0.5, function() self.reloading=false end)
	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapenaysh.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (2.2*100/pitch))
		net.Broadcast()
	end
end

function SWEP:Holster()
	if SERVER and IsValid(self.Owner) then
		ReleaseVape(self.Owner)
	end
	return true
end

SWEP.OnDrop = SWEP.Holster
SWEP.OnRemove = SWEP.Holster
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/weapons/zfs_knife/cl_init.lua:
include("shared.lua")
SWEP.PrintName = "Knife" -- The name of your SWEP
SWEP.Slot = 1
SWEP.SlotPos = 2
SWEP.DrawAmmo = false
SWEP.DrawCrosshair = true -- Do you want the SWEP to have a crosshair?

function SWEP:Initialize()
	self:SetHoldType(self.HoldType)
end

function SWEP:PrimaryAttack()
	self.Owner:DoAttackEvent()
	self:SendWeaponAnim(ACT_VM_MISSCENTER)

	local ply = self:GetOwner()
	if not IsValid(ply) then return end
	local tr = ply:GetEyeTrace()

	zclib.Sound.EmitFromEntity("throw", ply)

	if tr and IsValid(tr.Entity) and string.sub(tr.Entity:GetClass(),1,4) == "zfs_" then return end

	if tr and zclib.util.InDistance(ply:GetPos(), tr.HitPos, 100) then
		local bullet = {}
		bullet.Num = 1
		bullet.Src = ply:GetShootPos()
		bullet.Dir = ply:GetAimVector()
		bullet.Spread = Vector(0, 0, 0)
		bullet.Tracer = 0
		bullet.Force = 25
		bullet.Damage = zfs.config.Knife.Damage
		ply:FireBullets(bullet)
	end
end

function SWEP:SecondaryAttack()
	self.Owner:DoAttackEvent()
	self:SendWeaponAnim(ACT_VM_MISSCENTER)
end

function SWEP:Deploy()
	self:SendWeaponAnim(ACT_VM_DRAW)
end

function SWEP:Equip()
end

--addons/zeros_growop2_v1.6.1/lua/weapons/zgo2_multitool/shared.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/weapons/zgw_sieve/shared.lua:


SWEP.PrintName = "Sieve Pan"
SWEP.Author = "Zero"
SWEP.Instructions = "Left Mouse Button to wash dirt. Right Mouse Button to collect dirt. Reload to drop gold."
SWEP.Contact = ""
SWEP.Purpose = "Used to wash dirt."
SWEP.AdminSpawnable = false
SWEP.Spawnable = true

SWEP.AutomaticFrameAdvance = true
SWEP.ViewModelFOV = 90
SWEP.ViewModel = "models/zerochain/props_goldwash/zgw_v_sieve.mdl"
SWEP.WorldModel = "models/zerochain/props_goldwash/zgw_w_sieve.mdl"
SWEP.UseHands = true

SWEP.AutoSwitchTo = false
SWEP.AutoSwitchFrom = false
SWEP.Slot = 3
SWEP.SlotPos = 15
SWEP.HoldType = "duel"
SWEP.FiresUnderwater = true
SWEP.Weight = 1
SWEP.DrawCrosshair = true
SWEP.AccurateCrosshair = true
SWEP.Category = "Zeros GoldWasher"
SWEP.DrawAmmo = false
SWEP.base = "weapon_base"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198872838622

SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"
SWEP.Primary.Recoil = 1
SWEP.Primary.Delay = 0.25
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 9ac369ca150c22e64f828cd5857ffea33c11645bd3819881a5581360ebf7ce05

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"
SWEP.Secondary.Recoil = 1
SWEP.Secondary.Delay = 1
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f6df0a94af3a750a3d331a6881d44d3c6811e6ae1489523704d95e9e8195831d

SWEP.DisableDuplicator = true

if CLIENT then
	SWEP.WepSelectIcon = surface.GetTextureID("zerochain/zgw/vgui/zgw_vgui_sieve")
	SWEP.BounceWeaponIcon = false
end


function SWEP:SetupDataTables()
	self:NetworkVar("Int", 0, "Dirt")
	self:NetworkVar("Int", 1, "GoldRatio")
	self:NetworkVar("Int", 2, "Gold")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 0a5818b862f942a32f280da19656bfe6fb14cbd620f4eff776b06ce3fb51fd0e

	if SERVER then
		self:SetDirt(0)
		self:SetGoldRatio(0)
		self:SetGold(0)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198872838622

--addons/zeros_retrominer_v2.3.6/lua/weapons/zrms_pickaxe/cl_init.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_sniper.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"

ENT.PrintName                 = "Sniper Ammo"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/items/arccw/sniper_ammo.mdl"

ENT.AmmoType = "SniperPenetratedRound"
ENT.AmmoCount = 10
ENT.MaxHealth = 20
if engine.ActiveGamemode() == "terrortown" then
    ENT.AmmoType = "357"
end

ENT.DetonationDamage = 80
ENT.DetonationRadius = 128
ENT.DetonationSound = "npc/sniper/echo1.wav"
--addons/[binbon]arccw_modify/lua/entities/arccw_att_base/shared.lua:
return gluapack()()
--lua/entities/arccw_uc_40mm_dummy.lua:
AddCSLuaFile()

ENT.Base = "arccw_uc_40mm_he"
ENT.PrintName = "40mm Dummy Grenade"

ENT.GrenadeDamage = 50
ENT.GrenadeRadius = 150
ENT.ExplosionEffect = false
ENT.Scorch = "PaintSplatBlue"

function ENT:DoDetonation()
    --[[]
    local effectdata = EffectData()
    effectdata:SetOrigin(self:GetPos())
    effectdata:SetMagnitude(4)
    effectdata:SetScale(1)
    effectdata:SetRadius(4)
    effectdata:SetNormal(self:GetVelocity():GetNormalized())
    util.Effect("Sparks", effectdata)
    ]]
    self:EmitSound("physics/cardboard/cardboard_box_break2.wav", 80, 110)
end

function ENT:DoImpact(ent)
end

if CLIENT then
    function ENT:Think()
        self.NextSmoke = self.NextSmoke or CurTime()
        if self.SmokeTrail and self.NextSmoke < CurTime() then
            self.NextSmoke = CurTime() + 0.025 / math.Clamp(self:GetVelocity():Length() / 1000, 1, 5)
            local emitter = ParticleEmitter(self:GetPos())
            if not self:IsValid() or self:WaterLevel() > 2 then return end
            if not IsValid(emitter) then return end
            local smoke = emitter:Add("particle/smokestack", self:GetPos())
            smoke:SetVelocity(VectorRand() * 2)
            smoke:SetGravity(Vector(0, 0, -3))
            smoke:SetDieTime(math.Rand(2, 3))
            smoke:SetStartAlpha(150)
            smoke:SetEndAlpha(0)
            smoke:SetStartSize(math.Rand(3, 5))
            smoke:SetEndSize(20)
            smoke:SetRoll(math.Rand(-180, 180))
            smoke:SetRollDelta(math.Rand(-0.1, 0.1))
            smoke:SetColor(150, 150, math.Rand(220, 255))
            smoke:SetAirResistance(5)
            smoke:SetPos(self:GetPos())
            smoke:SetLighting(false)
            emitter:Finish()
        end
    end

    function ENT:OnRemove()
        local emitter = ParticleEmitter(self:GetPos())
        if not self:IsValid() or self:WaterLevel() > 2 then return end
        if not IsValid(emitter) then return end
        for i = 1, 10 do
            local smoke = emitter:Add("particle/smokestack", self:GetPos())
            smoke:SetVelocity(VectorRand() * 100)
            smoke:SetGravity(Vector(math.Rand(-5, 5), math.Rand(-5, 5), -25))
            smoke:SetDieTime(math.Rand(5, 7))
            smoke:SetStartAlpha(100)
            smoke:SetEndAlpha(0)
            smoke:SetStartSize(math.Rand(10, 15))
            smoke:SetEndSize(75)
            smoke:SetRoll(math.Rand(-180, 180))
            smoke:SetRollDelta(math.Rand(-0.5, 0.5))
            smoke:SetColor(150, 150, math.Rand(220, 255))
            smoke:SetAirResistance(150)
            smoke:SetPos(self:GetPos())
            smoke:SetLighting(false)
            smoke:SetBounce(0.5)
            smoke:SetCollide(true)
        end
        emitter:Finish()
    end
end
--addons/ashop/lua/entities/ashop_case.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/ayran/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/ayran/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Ayran"
ENT.Category = "Turkish Food Mod"
ENT.Spawnable = true
--addons/[binbon]misc/lua/entities/bb_hurdaci_npc/cl_init.lua:
return gluapack()()
--addons/[binbon]misc/lua/entities/bb_hurdaci_npc/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_ai"
ENT.Type = "ai"
ENT.PrintName = "Hurdaci NPC"
ENT.Author = "BinBon"
ENT.Category = "BinBon"
ENT.Spawnable = true
ENT.AdminSpawnable = true

function ENT:SetAutomaticFrameAdvance(bUsingAnim)
  self.AutomaticFrameAdvance = bUsingAnim
end

--addons/[binbon]misc/lua/entities/bb_perk_npc/cl_init.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/client/ch_atm_imgui.lua:
--[[
IMGUI by Wyozi - https://github.com/wyozi-gmod/imgui

MIT License

Copyright (c) 2019 wyozi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
--]]

local imgui = {}

imgui.skin = {
	background = Color(0, 0, 0, 0),
	backgroundHover = Color(0, 0, 0, 0),

	border = Color(255, 255, 255),
	borderHover = Color(255, 127, 0),
	borderPress = Color(255, 80, 0),

	foreground = Color(255, 255, 255),
	foregroundHover = Color(255, 127, 0),
	foregroundPress = Color(255, 80, 0),
}

local devCvar = GetConVar("developer")
function imgui.IsDeveloperMode()
	return not imgui.DisableDeveloperMode and devCvar:GetInt() > 0
end

local _devMode = false -- cached local variable updated once in a while

function imgui.Hook(name, id, callback)
	local hookUniqifier = debug.getinfo(4).short_src
	hook.Add(name, "IMGUI / " .. id .. " / " .. hookUniqifier, callback)
end

local localPlayer
local gState = {}

local function shouldAcceptInput()
	-- don't process input during non-main renderpass
	if render.GetRenderTarget() ~= nil then
		return false
	end

	-- don't process input if we're doing VGUI stuff (and not in context menu)
	if vgui.CursorVisible() and vgui.GetHoveredPanel() ~= g_ContextMenu then
		return false
	end
	
	if localPlayer and localPlayer.ATM_LastUsed and localPlayer.ATM_LastUsed > CurTime() then
		return false
	end
	
	return true
end

local function apply_screen_cooldown()
	if localPlayer then
		localPlayer.ATM_LastUsed = CurTime() + 0.2
		return
	end
end

imgui.Hook("PreRender", "Input", function()
	-- calculate mouse state
	if shouldAcceptInput() then
		local useBind = input.LookupBinding("+use", true)
		local USE = useBind and input.GetKeyCode(useBind)

		local wasPressing = gState.pressing
		gState.pressing = (USE and input.IsButtonDown(USE))
		gState.pressed = not wasPressing and gState.pressing
		
		if wasPressing then
			apply_screen_cooldown()
		end
	end
end)

hook.Add("NotifyShouldTransmit", "IMGUI / ClearRenderBounds", function(ent, shouldTransmit)
	if shouldTransmit and ent._imguiRBExpansion then
		ent._imguiRBExpansion = nil
	end
end)

local traceResultTable = {}
local traceQueryTable = { output = traceResultTable, filter = {} }
local function isObstructed(eyePos, hitPos, ignoredEntity)
	local q = traceQueryTable
	q.start = eyePos
	q.endpos = hitPos
	q.filter[1] = localPlayer
	q.filter[2] = ignoredEntity

	local tr = util.TraceLine(q)
	if tr.Hit then
		return true, tr.Entity
	else
		return false
	end
end

function imgui.Start3D2D(pos, angles, scale, distanceHide, distanceFadeStart)
	if not IsValid(localPlayer) then
		localPlayer = LocalPlayer()
	end

	if gState.shutdown == true then
		return
	end

	if gState.rendering == true then
		print(
			"[IMGUI] Starting a new IMGUI context when previous one is still rendering" ..
			"Shutting down rendering pipeline to prevent crashes.."
		)
		gState.shutdown = true
		return false
	end

	_devMode = imgui.IsDeveloperMode()

	local eyePos = localPlayer:EyePos()
	local eyePosToPos = pos - eyePos

	-- OPTIMIZATION: Test that we are in front of the UI
	do
		local normal = angles:Up()
		local dot = eyePosToPos:Dot(normal)

		if _devMode then gState._devDot = dot end

		-- since normal is pointing away from surface towards viewer, dot<0 is visible
		if dot >= 0 then
			return false
		end
	end

	-- OPTIMIZATION: Distance based fade/hide
	if distanceHide then
		local distance = eyePosToPos:Length()
		if distance > distanceHide then
			return false
		end

		if _devMode then
			gState._devDist = distance
			gState._devHideDist = distanceHide
		end

		if distanceHide and distanceFadeStart and distance > distanceFadeStart then
			local blend = math.min(math.Remap(distance, distanceFadeStart, distanceHide, 1, 0), 1)
			render.SetBlend(blend)
			surface.SetAlphaMultiplier(blend)
		end
	end

	gState.rendering = true
	gState.pos = pos
	gState.angles = angles
	gState.scale = scale

	cam.Start3D2D(pos, angles, scale)

	-- calculate mousepos
	if not vgui.CursorVisible() or vgui.IsHoveringWorld() then
		local tr = localPlayer:GetEyeTrace()
		local eyepos = tr.StartPos
		local eyenormal

		if vgui.CursorVisible() and vgui.IsHoveringWorld() then
			eyenormal = gui.ScreenToVector(gui.MousePos())
		else
			eyenormal = tr.Normal
		end

		local planeNormal = angles:Up()

		local hitPos = util.IntersectRayWithPlane(eyepos, eyenormal, pos, planeNormal)
		if hitPos then
			local obstructed, obstructer = isObstructed(eyepos, hitPos, gState.entity)
			if obstructed then
				gState.mx = nil
				gState.my = nil

				if _devMode then gState._devInputBlocker = "collision " .. obstructer:GetClass() .. "/" .. obstructer:EntIndex() end
			else
				local diff = pos - hitPos

				-- This cool code is from Willox's keypad CalculateCursorPos
				local x = diff:Dot(-angles:Forward()) / scale
				local y = diff:Dot(-angles:Right()) / scale

				gState.mx = x
				gState.my = y
			end
		else
			gState.mx = nil
			gState.my = nil

			if _devMode then gState._devInputBlocker = "not looking at plane" end
		end
	else
		gState.mx = nil
		gState.my = nil

		if _devMode then gState._devInputBlocker = "not hovering world" end
	end

	if _devMode then gState._renderStarted = SysTime() end

	return true
end

function imgui.Entity3D2D(ent, lpos, lang, scale, ...)
	gState.entity = ent
	local ret = imgui.Start3D2D(ent:LocalToWorld(lpos), ent:LocalToWorldAngles(lang), scale, ...)
	if not ret then
		gState.entity = nil
	end
	return ret
end

local function calculateRenderBounds(x, y, w, h)
	local pos = gState.pos
	local fwd, right = gState.angles:Forward(), gState.angles:Right()
	local scale = gState.scale
	local firstCorner, secondCorner =
		pos + fwd * x * scale + right * y * scale,
		pos + fwd * (x + w) * scale + right * (y + h) * scale

	local minrb, maxrb = Vector(math.huge, math.huge, math.huge), Vector(-math.huge, -math.huge, -math.huge)

	minrb.x = math.min(minrb.x, firstCorner.x, secondCorner.x)
	minrb.y = math.min(minrb.y, firstCorner.y, secondCorner.y)
	minrb.z = math.min(minrb.z, firstCorner.z, secondCorner.z)
	maxrb.x = math.max(maxrb.x, firstCorner.x, secondCorner.x)
	maxrb.y = math.max(maxrb.y, firstCorner.y, secondCorner.y)
	maxrb.z = math.max(maxrb.z, firstCorner.z, secondCorner.z)

	return minrb, maxrb
end

function imgui.ExpandRenderBoundsFromRect(x, y, w, h)
	local ent = gState.entity
	if IsValid(ent) then
		-- make sure we're not applying same expansion twice
		local expansion = ent._imguiRBExpansion
		if expansion then
			local ex, ey, ew, eh = unpack(expansion)
			if ex == x and ey == y and ew == w and eh == h then
				return
			end
		end

		local minrb, maxrb = calculateRenderBounds(x, y, w, h)

		ent:SetRenderBoundsWS(minrb, maxrb)
		if _devMode then
			print("[IMGUI] Updated renderbounds of ", ent, " to ", minrb, "x", maxrb)
		end

		ent._imguiRBExpansion = {x, y, w, h}
	else
		if _devMode then
			print("[IMGUI] Attempted to update renderbounds when entity is not valid!! ", debug.traceback())
		end
	end
end

local devOffset = Vector(0, 0, 30)
local devColours = {
	background = Color(0, 0, 0, 200),
	title = Color(78, 205, 196),
	mouseHovered = Color(0, 255, 0),
	mouseUnhovered = Color(255, 0, 0),
	pos = Color(255, 255, 255),
	distance = Color(200, 200, 200, 200),
	ang = Color(255, 255, 255),
	dot = Color(200, 200, 200, 200),
	angleToEye = Color(200, 200, 200, 200),
	renderTime = Color(255, 255, 255),
	renderBounds = Color(0, 0, 255)
}

local function developerText(str, x, y, clr)
	draw.SimpleText(
		str, "DefaultFixedDropShadow", x, y, clr, TEXT_ALIGN_CENTER, nil
	)
end

local function drawDeveloperInfo()
	local camAng = localPlayer:EyeAngles()
	camAng:RotateAroundAxis(camAng:Right(), 90)
	camAng:RotateAroundAxis(camAng:Up(), -90)

	cam.IgnoreZ(true)
	cam.Start3D2D(gState.pos + devOffset, camAng, 0.15)

	local bgCol = devColours["background"]
	surface.SetDrawColor(bgCol.r, bgCol.g, bgCol.b, bgCol.a)
	surface.DrawRect(-100, 0, 200, 140)

	local titleCol = devColours["title"]
	developerText("imgui developer", 0, 5, titleCol)

	surface.SetDrawColor(titleCol.r, titleCol.g, titleCol.b)
	surface.DrawLine(-50, 16, 50, 16)

	local mx, my = gState.mx, gState.my
	if mx and my then
		developerText(
			string.format("mouse: hovering %d x %d", mx, my),
			0, 20, devColours["mouseHovered"]
		)
	else
		developerText(
			string.format("mouse: %s", gState._devInputBlocker or ""),
			0, 20, devColours["mouseUnhovered"]
		)
	end

	local pos = gState.pos
	developerText(
		string.format("pos: %.2f %.2f %.2f", pos.x, pos.y, pos.z),
		0, 40, devColours["pos"]
	)

	developerText(
		string.format("distance %.2f / %.2f", gState._devDist or 0, gState._devHideDist or 0),
		0, 53, devColours["distance"]
	)

	local ang = gState.angles
	developerText(string.format("ang: %.2f %.2f %.2f", ang.p, ang.y, ang.r), 0, 75, devColours["ang"])
	developerText(string.format("dot %d", gState._devDot or 0), 0, 88, devColours["dot"])

	local angToEye = (pos - localPlayer:EyePos()):Angle()
	angToEye:RotateAroundAxis(ang:Up(), -90)
	angToEye:RotateAroundAxis(ang:Right(), 90)

	developerText(
		string.format("angle to eye (%d,%d,%d)", angToEye.p, angToEye.y, angToEye.r),
		0, 100, devColours["angleToEye"]
	)

	developerText(
		string.format("rendertime avg: %.2fms", (gState._devBenchAveraged or 0) * 1000),
		0, 120, devColours["renderTime"]
	)

	cam.End3D2D()
	cam.IgnoreZ(false)

	local ent = gState.entity
	if IsValid(ent) and ent._imguiRBExpansion then
		local ex, ey, ew, eh = unpack(ent._imguiRBExpansion)
		local minrb, maxrb = calculateRenderBounds(ex, ey, ew, eh)
		render.DrawWireframeBox(vector_origin, angle_zero, minrb, maxrb, devColours["renderBounds"])
	end
end

function imgui.End3D2D()
	if gState then
		if _devMode then
			local renderTook = SysTime() - gState._renderStarted
			gState._devBenchTests = (gState._devBenchTests or 0) + 1
			gState._devBenchTaken = (gState._devBenchTaken or 0) + renderTook
			if gState._devBenchTests == 100 then
				gState._devBenchAveraged = gState._devBenchTaken / 100
				gState._devBenchTests = 0
				gState._devBenchTaken = 0
			end
		end

		gState.rendering = false
		cam.End3D2D()
		render.SetBlend(1)
		surface.SetAlphaMultiplier(1)

		if _devMode then
			drawDeveloperInfo()
		end

		gState.entity = nil
	end
end

function imgui.CursorPos()
	local mx, my = gState.mx, gState.my
	return mx, my
end

function imgui.IsHovering(x, y, w, h)
	local mx, my = gState.mx, gState.my
	return mx and my and mx >= x and mx <= (x + w) and my >= y and my <= (y + h)
end
function imgui.IsPressing()
	return shouldAcceptInput() and gState.pressing
end
function imgui.IsPressed()
	return shouldAcceptInput() and gState.pressed
end

-- String->Bool mappings for whether font has been created
local _createdFonts = {}

-- Cached IMGUIFontNamd->GModFontName
local _imguiFontToGmodFont = {}

local EXCLAMATION_BYTE = string.byte("!")
function imgui.xFont(font, defaultSize)
	-- special font
	if string.byte(font, 1) == EXCLAMATION_BYTE then

		local existingGFont = _imguiFontToGmodFont[font]
		if existingGFont then
			return existingGFont
		end

		-- Font not cached; parse the font
		local name, size = font:match("!([^@]+)@(.+)")
		if size then size = tonumber(size) end

		if not size and defaultSize then
			name = font:match("^!([^@]+)$")
			size = defaultSize
		end

		local fontName = string.format("IMGUI_%s_%d", name, size)
		_imguiFontToGmodFont[font] = fontName
		if not _createdFonts[fontName] then
			surface.CreateFont(fontName, {
				font = name,
				size = size
			})
			_createdFonts[fontName] = true
		end

		return fontName
	end
	return font
end

function imgui.xButton(x, y, w, h, borderWidth, borderClr, hoverClr, pressColor)
	local bw = borderWidth or 1

	local bgColor = imgui.IsHovering(x, y, w, h) and imgui.skin.backgroundHover or imgui.skin.background
	local borderColor =
		((imgui.IsPressing() and imgui.IsHovering(x, y, w, h)) and (pressColor or imgui.skin.borderPress))
		or (imgui.IsHovering(x, y, w, h) and (hoverClr or imgui.skin.borderHover))
		or (borderClr or imgui.skin.border)

	surface.SetDrawColor(bgColor)
	surface.DrawRect(x, y, w, h)

	if bw > 0 then
		surface.SetDrawColor(borderColor)

		surface.DrawRect(x, y, w, bw)
		surface.DrawRect(x, y + bw, bw, h - bw * 2)
		surface.DrawRect(x, y + h-bw, w, bw)
		surface.DrawRect(x + w - bw + 1, y, bw, h)
	end

	return shouldAcceptInput() and imgui.IsHovering(x, y, w, h) and gState.pressed
end

function imgui.xCursor(x, y, w, h)
	local fgColor = imgui.IsPressing() and imgui.skin.foregroundPress or imgui.skin.foreground
	local mx, my = gState.mx, gState.my

	if not mx or not my then return end

	if x and w and (mx < x or mx > x + w) then return end
	if y and h and (my < y or my > y + h) then return end
	
	local cursorSize = math.ceil( 0.3 / gState.scale )
	local cursor_setting = CH_ATM.GetCursorSetting()
	
	surface.SetDrawColor( color_white )
	if cursor_setting == 1 then
		surface.SetMaterial( CH_ATM.Materials.Cursor )
	else
		surface.SetMaterial( CH_ATM.Materials.HandCursor )
	end
	surface.DrawTexturedRect( mx - cursorSize + 8, my, 24, 24 )
end

function imgui.xTextButton(text, font, x, y, w, h, borderWidth, color, hoverClr, pressColor)
	local fgColor =
		((imgui.IsPressing() and imgui.IsHovering(x, y, w, h)) and (pressColor or imgui.skin.foregroundPress))
		or (imgui.IsHovering(x, y, w, h) and (hoverClr or imgui.skin.foregroundHover))
		or (color or imgui.skin.foreground)

	local clicked = imgui.xButton(x, y, w, h, borderWidth, color, hoverClr, pressColor)

	font = imgui.xFont(font, math.floor(h * 0.618))
	draw.SimpleText(text, font, x + w / 2, y + h / 2, fgColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

	return clicked
end

return imgui
--addons/ch_atm/lua/entities/ch_atm_credit_card/cl_init.lua:
include( "shared.lua" )

--[[
	Initialize the entity
--]]
function ENT:Initialize()
end
--addons/ch_atm/lua/entities/ch_atm_leaderboard/cl_init.lua:
include( "shared.lua" )

function ENT:Initialize()
end

local icon_first = Material( "craphead_scripts/ch_atm/leaderboards/first.png", "noclamp smooth" )
local icon_second = Material( "craphead_scripts/ch_atm/leaderboards/second.png", "noclamp smooth" )
local icon_third = Material( "craphead_scripts/ch_atm/leaderboards/third.png", "noclamp smooth" )

function ENT:DrawTranslucent()
	self:DrawModel()
	
	if self:GetPos():DistToSqr( LocalPlayer():GetPos() ) > 1200000 then
		return
	end
	
	local Pos = self:GetPos()
	local Ang = self:GetAngles()
	
	Ang:RotateAroundAxis( Ang:Forward(), 0 )
	Ang:RotateAroundAxis( Ang:Right(), 90 )

	cam.Start3D2D( Pos + Ang:Up() * -1.2, Ang, 0.22 )
		-- Draw BG
		surface.SetDrawColor( CH_ATM.Colors.LightGray )
		surface.DrawRect( -500, -260, 1000, 520 )
		
		-- Draw top
		surface.SetDrawColor( CH_ATM.Colors.DarkGray )
		surface.DrawRect( -500, -260, 1000, 50 )
		
		draw.SimpleText( "ATM Leaderboard", "CH_ATM_Font_Leaderboard_Header", 0, -255, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
		
		if not CH_ATM.Leaderboard[1] then
			draw.SimpleText( "Leaderboard is not networked to you yet!", "CH_ATM_Font_Leaderboard_Header", 0, 0, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		else
			-- First place
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( -150, -190, 300, 120 )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( icon_first )
			surface.DrawTexturedRect( -30, -205, 60, 60 )
			
			if CH_ATM.Leaderboard[1] then
				draw.SimpleText( CH_ATM.Leaderboard[1].Name, "CH_ATM_Font_Leaderboard_Header", 0, -145, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.FormatMoney( CH_ATM.Leaderboard[1].Amount ), "CH_ATM_Font_Leaderboard_Title", 0, -110, CH_ATM.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
			end
			
			-- Second place
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( -475, -160, 300, 120 )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( icon_second )
			surface.DrawTexturedRect( -355, -175, 60, 60 )
			
			if CH_ATM.Leaderboard[2] then
				draw.SimpleText( CH_ATM.Leaderboard[2].Name, "CH_ATM_Font_Leaderboard_Header", -325, -117.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.FormatMoney( CH_ATM.Leaderboard[2].Amount ), "CH_ATM_Font_Leaderboard_Title", -325, -80, CH_ATM.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
			end
			
			-- Third place
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 175, -160, 300, 120 )
		
			surface.SetDrawColor( color_white )
			surface.SetMaterial( icon_third )
			surface.DrawTexturedRect( 295, -175, 60, 60 )
			
			if CH_ATM.Leaderboard[3] then
				draw.SimpleText( CH_ATM.Leaderboard[3].Name, "CH_ATM_Font_Leaderboard_Header", 325, -117.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.FormatMoney( CH_ATM.Leaderboard[3].Amount ), "CH_ATM_Font_Leaderboard_Title", 325, -80, CH_ATM.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
			end
			
			-- Fourth place
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( -500, -20, 1000, 40 )
			
			if CH_ATM.Leaderboard[4] then
				draw.SimpleText( "#4", "CH_ATM_Font_Leaderboard_Title", -325, -17.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.Leaderboard[4].Name, "CH_ATM_Font_Leaderboard_Title", 0, -17.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.FormatMoney( CH_ATM.Leaderboard[4].Amount ), "CH_ATM_Font_Leaderboard_Title", 325, -17.5, CH_ATM.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
			end
			
			-- Fifth place
			if CH_ATM.Leaderboard[5] then
				draw.SimpleText( "#5", "CH_ATM_Font_Leaderboard_Title", -325, 22.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.Leaderboard[5].Name, "CH_ATM_Font_Leaderboard_Title", 0, 22.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.FormatMoney( CH_ATM.Leaderboard[5].Amount ), "CH_ATM_Font_Leaderboard_Title", 325, 22.5, CH_ATM.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
			end
			
			-- Sixth place
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( -500, 60, 1000, 40 )
			
			if CH_ATM.Leaderboard[6] then
				draw.SimpleText( "#6", "CH_ATM_Font_Leaderboard_Title", -325, 62.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.Leaderboard[6].Name, "CH_ATM_Font_Leaderboard_Title", 0, 62.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.FormatMoney( CH_ATM.Leaderboard[6].Amount ), "CH_ATM_Font_Leaderboard_Title", 325, 62.5, CH_ATM.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
			end
			
			-- Seventh place
			if CH_ATM.Leaderboard[7] then
				draw.SimpleText( "#7", "CH_ATM_Font_Leaderboard_Title", -325, 102.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.Leaderboard[7].Name, "CH_ATM_Font_Leaderboard_Title", 0, 102.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.FormatMoney( CH_ATM.Leaderboard[7].Amount ), "CH_ATM_Font_Leaderboard_Title", 325, 102.5, CH_ATM.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
			end
			
			-- Eighth place
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( -500, 140, 1000, 40 )
			
			if CH_ATM.Leaderboard[8] then
				draw.SimpleText( "#8", "CH_ATM_Font_Leaderboard_Title", -325, 142.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.Leaderboard[8].Name, "CH_ATM_Font_Leaderboard_Title", 0, 142.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.FormatMoney( CH_ATM.Leaderboard[8].Amount ), "CH_ATM_Font_Leaderboard_Title", 325, 142.5, CH_ATM.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
			end
			
			-- Ninth place
			if CH_ATM.Leaderboard[9] then
				draw.SimpleText( "#9", "CH_ATM_Font_Leaderboard_Title", -325, 182.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.Leaderboard[9].Name, "CH_ATM_Font_Leaderboard_Title", 0, 182.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.FormatMoney( CH_ATM.Leaderboard[9].Amount ), "CH_ATM_Font_Leaderboard_Title", 325, 182.5, CH_ATM.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
			end
			
			-- Tenth place
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( -500, 220, 1000, 40 )
			
			if CH_ATM.Leaderboard[10] then
				draw.SimpleText( "#10", "CH_ATM_Font_Leaderboard_Title", -325, 222.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.Leaderboard[10].Name, "CH_ATM_Font_Leaderboard_Title", 0, 222.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				draw.SimpleText( CH_ATM.FormatMoney( CH_ATM.Leaderboard[10].Amount ), "CH_ATM_Font_Leaderboard_Title", 325, 222.5, CH_ATM.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
			end
		end
	cam.End3D2D()
end
--addons/ch_bitminers/lua/entities/ch_bitminer_power_cable/shared.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_cooling1/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"

ENT.PrintName = "Cooling Upgrade #1"
ENT.Author = "Crap-Head"
ENT.Category = "Bitminers by Crap-Head"

ENT.Spawnable = true
ENT.AdminSpawnable = true

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_cooling2/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"

ENT.PrintName = "Cooling Upgrade #2"
ENT.Author = "Crap-Head"
ENT.Category = "Bitminers by Crap-Head"

ENT.Spawnable = true
ENT.AdminSpawnable = true

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_cooling3/cl_init.lua:
return gluapack()()
--addons/ch_mayor/lua/entities/ch_mayor_cityboard/shared.lua:
return gluapack()()
--addons/ch_mayor/lua/entities/ch_mayor_vault/cl_init.lua:
include( "shared.lua" )

function ENT:DrawTranslucent()
	self:DrawModel()
	
	local ply = LocalPlayer()
	
	if ply:GetPos():DistToSqr( self:GetPos() ) >= CH_Mayor.Config.DistanceTo3D2D then
		return
	end
	
	local ang = self:GetAttachment( 1 ).Ang
	local pos = self:GetAttachment( 1 ).Pos
	ang:RotateAroundAxis( ang:Forward(), 90 )

	local funds = CH_Mayor.VaultMoney
	
	cam.Start3D2D( pos, ang, 0.02 )
		draw.SimpleTextOutlined( CH_Mayor.LangString( "Mayor Safe" ), "CH_Mayor_Font_3D2D_300", 560, 120, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 4, color_black )

		draw.SimpleTextOutlined( CH_Mayor.LangString( "Funds Available" ), "CH_Mayor_Font_3D2D_175", 560, 300, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 4, color_black )
		draw.SimpleTextOutlined( DarkRP.formatMoney( funds ), "CH_Mayor_Font_3D2D_175", 560, 450, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 4, color_black )
    cam.End3D2D()
	
    local pos_top = self:GetPos() + Vector( 0, 0, 60 )
	local ply_ang = ply:GetAngles()
	local ang_top = Angle( 0, ply_ang.y - 180, 0 )
	local cur_time = CurTime()
	
	ang_top:RotateAroundAxis( ang_top:Right(), -90 )
	ang_top:RotateAroundAxis( ang_top:Up(), 90 )
	
	cam.Start3D2D( pos_top, ang_top, 0.05 )
		if CH_Mayor.Vault.Cooldown and CH_Mayor.Vault.Cooldown > cur_time then
			draw.SimpleTextOutlined( CH_Mayor.LangString( "Robbery Cooldown" ), "CH_Mayor_Font_3D2D_175", 0, 0, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 4, color_black )
			draw.SimpleTextOutlined( string.ToMinutesSeconds( math.Round( CH_Mayor.Vault.Cooldown - cur_time ) ), "CH_Mayor_Font_3D2D_175", 0, 150, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 4, color_black )
		end
		
		if CH_Mayor.Vault.Countdown and CH_Mayor.Vault.Countdown > cur_time then
			draw.SimpleTextOutlined( CH_Mayor.LangString( "Robbery Countdown" ), "CH_Mayor_Font_3D2D_175", 0, 0, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 4, color_black )
			draw.SimpleTextOutlined( string.ToMinutesSeconds( math.Round( CH_Mayor.Vault.Countdown - cur_time ) ), "CH_Mayor_Font_3D2D_175", 0, 150, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 4, color_black )
		end
    cam.End3D2D()
end
--addons/ch_mayor/lua/entities/ch_mayor_vault/shared.lua:
return gluapack()()
--addons/ch_mining/lua/entities/ch_mining_npc/cl_init.lua:
return gluapack()()
--addons/cityworker/lua/entities/cityworker_leak/cl_init.lua:
include( "shared.lua" )

function ENT:Initialize()
    self.emitter = ParticleEmitter( self:GetPos() )
    self.color = HSVToColor( math.random( 0, 360 ), math.Rand( 0.2, 0.6 ), math.Rand( 0, 0.3 ) )

    self.nextEmit = 0

    self.sound = CreateSound( self, "ambient/gas/steam2.wav")
    self.sound:SetSoundLevel( 53 )
    self.sound:Play()
end

function ENT:OnRemove()
    self.sound:Stop()
end

function ENT:Think()
    if LocalPlayer():GetPos():Distance( self:GetPos() ) > 1024 then return end
    if CurTime() > self.nextEmit then
        local smokemat = math.random( 1, 16 )
		smokemat = "particle/smokesprites_00"..( smokemat < 10 and "0"..smokemat or smokemat )

        local v = Vector( 0, 250, 0 )
        v:Rotate( self:GetAngles() )

        local smoke = self.emitter:Add( smokemat, self:LocalToWorld( Vector( 0, 0, 1 ) ) )
        smoke:SetVelocity( v )
        smoke:SetDieTime( 0.5 )
        smoke:SetStartAlpha( self.color.a )
        smoke:SetEndAlpha( 0 )
        smoke:SetAngles( AngleRand() )
        smoke:SetStartSize( math.Rand( 4, 6 ) )
        smoke:SetEndSize( math.Rand( 10, 13 ) )
        smoke:SetGravity( Vector( 0, 0, 10 ) )
        smoke:SetColor( self.color.r, self.color.g, self.color.b )
        smoke:SetAirResistance( 50 )

        self.nextEmit = CurTime() + 0.01
    end
end
--gamemodes/darkrp/entities/entities/darkrp_laws/cl_init.lua:
include("shared.lua")

local Laws = {}

ENT.DrawPos = Vector(1, -111, 58)

local color_navy_200 = Color(31, 31, 44, 200)
local color_red = Color(190, 46, 46)
local color_white = color_white

function ENT:Draw()
    self:DrawModel()

    local DrawPos = self:LocalToWorld(self.DrawPos)

    local DrawAngles = self:GetAngles()
    DrawAngles:RotateAroundAxis(self:GetAngles():Forward(), 90)
    DrawAngles:RotateAroundAxis(self:GetAngles():Up(), 90)

    cam.Start3D2D(DrawPos, DrawAngles, 0.4)

        surface.SetDrawColor(0, 0, 0, 255)
        surface.DrawRect(0, 0, 558, 290)

        draw.RoundedBox(4, 0, 0, 558, 30, color_navy_200)

        draw.DrawNonParsedSimpleText(DarkRP.getPhrase("laws_of_the_land"), "onyx.hud.BigBold", 279, 5, color_red, TEXT_ALIGN_CENTER)

        local lastHeight = 0
        for k, v in ipairs(Laws) do
            draw.DrawNonParsedText(string.format("%u. %s", k, v), "Roboto20", 5, 35 + lastHeight, color_white)
            lastHeight = lastHeight + (fn.ReverseArgs(string.gsub(v, "\n", "")) + 1) * 21
        end

    cam.End3D2D()
end

local function addLaw(inLaw)
    local law = DarkRP.textWrap(inLaw, "Roboto20", 522)

    local lawNumber = table.insert(Laws, law)
    hook.Run("addLaw", lawNumber, inLaw)
end

local function umAddLaw(um)
    local law = um:ReadString()
    timer.Simple(0, fn.Curry(addLaw, 2)(law))
end
usermessage.Hook("DRP_AddLaw", umAddLaw)

local function umRemoveLaw(um)
    local i = um:ReadShort()

    local removed = table.remove(Laws, i)
    hook.Run("removeLaw", i, removed)
end
usermessage.Hook("DRP_RemoveLaw", umRemoveLaw)

local function umResetLaws(um)
    Laws = {}
    fn.Foldl(function(val,v) addLaw(v) end, nil, GAMEMODE.Config.DefaultLaws)
    hook.Run("resetLaws")
end
usermessage.Hook("DRP_ResetLaws", umResetLaws)

function DarkRP.getLaws()
    return Laws
end

timer.Simple(0, function()
    fn.Foldl(function(val,v) addLaw(v) end, nil, GAMEMODE.Config.DefaultLaws)
end)

--gamemodes/darkrp/entities/entities/fadmin_jail/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "fadmin_jail"
ENT.Author = "FPtje"
ENT.Spawnable = false

function ENT:CanTool()
    return false
end

function ENT:PhysgunPickup(ply)
    return false
end

--addons/ledscreen/lua/entities/gb_rp_sign/cl_init.lua:
include("shared.lua")

surface.CreateFont( "InfoRUS2", { font = "Enhanced Dot Digital-7", extended = true, size = 90, weight = 800, antialias = true })
surface.CreateFont( "InfoRUS3", { font = "Enhanced Dot Digital-7", extended = true, size = 50, weight = 800, antialias = true })

local font = "InfoRUS2"

local sizetable = {
	[3] = {350, 0.5},
	[4] = {470, -11.5},
	[5] = {590, -11.5},
	[6] = {710, 0.5},
	[7] = {830, 0.5},
	[8] = {950, 0.5},
}

function ENT:Initialize()
	
	self.OldWide = self:GetWide()

	self.frame = vgui.Create( "DPanel" )
	self.frame:SetSize( sizetable[self:GetWide()][1], 120 )
	self.frame.Text = self:GetText()
	self.frame.Type = self:GetType()
	self.frame.col = self:GetTColor()
	self.frame.damage = 0
	self.frame.appr = nil
	self.frame.FX = self:GetFX()
	self.frame.On = self:GetOn()
	self.frame.alfa = 0
	self.frame.speed = self:GetSpeed()
	self.frame:SetPaintedManually( true )
	self.frame.Paint = function(self,w,h)
		
		if self.On <= 0 then 
			if self.alfa < 1 then return end
			self.alfa = Lerp(FrameTime() * 5,self.alfa,0)
		else
			if self.FX > 0 then
				self.alfa = math.random(100,220)
			else
				self.alfa = 255
			end
		end
		
		surface.DisableClipping( false )
		surface.SetFont(font)
		local ww,hh = surface.GetTextSize(self.Text)
		local multiplier = self.speed * 100
		
		self.static = false
		
		if self.damage < CurTime() and self.On then
			if self.Type == 1 then
				
				local xs = (math.fmod(SysTime() * multiplier,w+ww)) - ww
				
				draw.DrawText(self.Text,font,xs,10,Color(self.col.x * 100, self.col.y * 100, self.col.z * 100, self.alfa),0)
			elseif self.Type == 2 then
				
				if !self.appr or self.appr > ww  then
					self.appr = -w
				else
					self.appr = math.Approach(self.appr, ww+w, FrameTime() * multiplier) 
				end
				
			draw.DrawText(self.Text,font,self.appr * -1,10,Color(self.col.x * 100, self.col.y * 100, self.col.z * 100, self.alfa),0)
			else
				if !self.appr then
					self.appr = 0
				end
				
				if w > ww then
					if self.Type == 3 then
						if self.appr < w-ww and !self.refl then
							self.appr = math.Approach(self.appr, ww+w, FrameTime() * multiplier) 
						else
							if self.appr <= 0 then
								self.refl = nil
							else
								self.refl = true
								self.appr = math.Approach(self.appr, 0, FrameTime() * multiplier) 
							end
						end
					else
						self.static = true
					end
				else
					if self.appr > w-ww-50 and !self.refl then
						self.appr = math.Approach(self.appr, w-ww-50, FrameTime() * multiplier) 
					else
						if self.appr >= 50 then
							self.refl = nil
						else
							self.refl = true
							self.appr = math.Approach(self.appr, 50, FrameTime() * multiplier) 
						end
					end
				end
				
				if self.static then
					draw.DrawText(self.Text,font,w/2,10,Color(self.col.x * 100, self.col.y * 100, self.col.z * 100, self.alfa),1)
				else
					draw.DrawText(self.Text,font,self.appr,10,Color(self.col.x * 100, self.col.y * 100, self.col.z * 100, self.alfa),0)
				end
			end
		else	
			draw.DrawText(self.Text,font,math.random(0,w-ww),10,Color(self.col.x * 100, self.col.y * 100, self.col.z * 100, math.random(0,255)),0)
		end
		surface.DisableClipping( true )
	end
end

function ENT:Draw()
	
	self:DrawModel()
	
	if self.frame then
		self.frame.Text = self:GetText()
		self.frame.Type = self:GetType()
		self.frame.col = self:GetTColor()
		self.frame.FX = self:GetFX()
		self.frame.On = self:GetOn()
		self.frame.damage = self:GetNWInt("LastDamaged")
		self.frame.speed = self:GetSpeed()
	end
	
	local Pos = self:GetPos()
	local Ang = self:GetAngles()
	local hight = 12
	
	if self.OldWide != self:GetWide() then
		self.frame:SetSize( sizetable[self:GetWide()][1], 120 )
		self.OldWide = self:GetWide()
	end
	
	if self:GetWide() == 3 then
		hight = 6
	end
	
	cam.Start3D2D(Pos + Ang:Up() * 1.1 - Ang:Right() * hight + Ang:Forward() * sizetable[self:GetWide()][2], Ang, 0.1)
		self.frame:PaintManual()
	cam.End3D2D()

end
--addons/ledscreen/lua/entities/gb_rp_sign_wire/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Spawned Sign"
ENT.Author = "Mac"
ENT.Spawnable = false
ENT.AdminSpawnable = true

function ENT:SetupDataTables()
	self:NetworkVar("String", 0, "Text")
	self:NetworkVar("Vector", 0, "TColor")
	self:NetworkVar("Int", 0, "Type")
	self:NetworkVar("Int", 1, "Speed")
	self:NetworkVar("Int", 2, "Wide")
	self:NetworkVar("Int", 3, "On")
	self:NetworkVar("Int", 4, "FX")
end
--addons/glorifiedhandcuffs/lua/entities/glorifiedhandcuffs_jailernpc/shared.lua:

ENT.Type = "ai"
ENT.Base = "base_ai"

ENT.PrintName		= "Jailer NPC"
ENT.Author			= "GlorifiedPig"
ENT.Category        = "GlorifiedHandcuffs"
ENT.Spawnable       = true

--addons/playablepiano/lua/entities/gmt_instrument_piano/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/gofret/shared.lua:
return gluapack()()
--addons/hackable_server/lua/entities/hacktool_server/cl_init.lua:
return gluapack()()
--addons/executioner_v2/lua/entities/hitman_perks_npc/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/ice-stand/cl_init.lua:
include("shared.lua")
include("tfm_config.lua")

surface.CreateFont("ice-stand_f1", {
    font = "Arial",
    extended = false,
    size = ScrW() / 60,
    weight = 555,
})

local tfm_colors = {
    ["white"] = Color(255, 255, 255),
    ["white_fade"] = Color(255, 255, 255, 200),
    ["black"] = Color(0, 0, 0),
    ["black_fade"] = Color(0, 0, 0, 200),
}

local function TFM_ICECREEM_UI(stand)
    local button_sound = CreateSound(LocalPlayer(), Sound("fm_button1.wav"))
    local ice_creem_menu = vgui.Create("DPanel")
    local scrw, scrh = ScrW(), ScrH()
    ice_creem_menu:SetSize(scrw / 4, scrh / 2)
    ice_creem_menu:SetPos(scrw / 2 - ice_creem_menu:GetWide() / 2, scrh / 1.5)
    ice_creem_menu:MakePopup()
    ice_creem_menu:MoveTo(scrw / 2 - ice_creem_menu:GetWide() / 2, scrh / 2 - ice_creem_menu:GetTall() / 2, 1, 0, -1)

    ice_creem_menu.Paint = function(self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, Color(63, 36, 36))
    end

    local calsinmi = math.random(1, 4)

    if calsinmi == 1 then
        surface.PlaySound("onelan.mp3")
    end

    local close_icecreem = vgui.Create("DButton", ice_creem_menu)
    close_icecreem:SetSize(scrw * 0.02, scrh * 0.02)
    close_icecreem:SetPos(scrw * 0.22, scrh * 0.01)
    close_icecreem:SetText("x")

    close_icecreem.DoClick = function()
        ice_creem_menu:Remove()
        button_sound:Play()
    end

    close_icecreem.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(255, 255, 255, 255))
            draw.RoundedBox(6, 0, 0, w, h, Color(168, 36, 36))
        else
            self:SetColor(Color(255, 255, 255, 10))
            draw.RoundedBox(6, 0, 0, w, h, Color(92, 51, 51))
        end
    end

    local report_btn = vgui.Create("DButton", ice_creem_menu)
    report_btn:SetSize(scrw * 0.05, scrh * 0.04)
    report_btn:SetPos(scrw * 0.01, scrh * 0.01)
    report_btn:SetColor(tfm_colors["white"])
    report_btn:SetText("Hata Bildir")

    report_btn.DoClick = function()
        ice_creem_menu:Remove()
        button_sound:Play()
        gui.OpenURL("https://steamcommunity.com/sharedfiles/filedetails/?id=2073492700")
    end

    report_btn.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(255, 255, 255, 255))
            draw.RoundedBox(6, 0, 0, w, h, Color(255, 215, 128))
        else
            self:SetColor(Color(255, 255, 255, 10))
            draw.RoundedBox(6, 0, 0, w, h, Color(92, 51, 51))
        end
    end

    local coco_buy_creem = vgui.Create("DButton", ice_creem_menu)
    coco_buy_creem:SetSize(scrw / 10, scrh / 20)
    coco_buy_creem:SetPos(scrw * 0.08, scrh * 0.02)
    coco_buy_creem:SetColor(tfm_colors["white"])
    coco_buy_creem:SetText("Çikolatalı")

    coco_buy_creem.DoClick = function()
        net.Start("tfm_icecreem_network")
        net.WriteEntity(stand)
        net.WriteUInt(1, 4)
        net.SendToServer()
        button_sound:Play()
        ice_creem_menu:Remove()
    end

    coco_buy_creem.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(255, 255, 255, 255))
            draw.RoundedBox(6, 0, 0, w, h, Color(78, 58, 40))
        else
            self:SetColor(Color(255, 255, 255, 10))
            draw.RoundedBox(6, 0, 0, w, h, Color(92, 51, 51))
        end
    end

    local sade_buy_creem = vgui.Create("DButton", ice_creem_menu)
    sade_buy_creem:SetSize(scrw / 10, scrh / 20)
    sade_buy_creem:SetPos(scrw * 0.08, scrh * 0.08)
    sade_buy_creem:SetColor(tfm_colors["white"])
    sade_buy_creem:SetText("Sade")

    sade_buy_creem.DoClick = function()
        net.Start("tfm_icecreem_network")
        net.WriteEntity(stand)
        net.WriteUInt(2, 4)
        net.SendToServer()
        button_sound:Play()
        ice_creem_menu:Remove()
    end

    sade_buy_creem.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(255, 255, 255, 255))
            draw.RoundedBox(6, 0, 0, w, h, Color(255, 175, 175))
        else
            self:SetColor(Color(255, 255, 255, 10))
            draw.RoundedBox(6, 0, 0, w, h, Color(92, 51, 51))
        end
    end

    local green_buy_creem = vgui.Create("DButton", ice_creem_menu)
    green_buy_creem:SetSize(scrw / 10, scrh / 20)
    green_buy_creem:SetPos(scrw * 0.08, scrh * 0.14)
    green_buy_creem:SetColor(tfm_colors["white"])
    green_buy_creem:SetText("Fıstıklı")

    green_buy_creem.DoClick = function()
        net.Start("tfm_icecreem_network")
        net.WriteEntity(stand)
        net.WriteUInt(3, 4)
        net.SendToServer()
        button_sound:Play()
        ice_creem_menu:Remove()
    end

    green_buy_creem.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(255, 255, 255, 255))
            draw.RoundedBox(6, 0, 0, w, h, Color(95, 248, 95))
        else
            self:SetColor(Color(255, 255, 255, 10))
            draw.RoundedBox(6, 0, 0, w, h, Color(92, 51, 51))
        end
    end

    local berry_buy_creem = vgui.Create("DButton", ice_creem_menu)
    berry_buy_creem:SetSize(scrw / 10, scrh / 20)
    berry_buy_creem:SetPos(scrw * 0.08, scrh * 0.20)
    berry_buy_creem:SetColor(tfm_colors["white"])
    berry_buy_creem:SetText("Çilekli")

    berry_buy_creem.DoClick = function()
        net.Start("tfm_icecreem_network")
        net.WriteEntity(stand)
        net.WriteUInt(4, 4)
        net.SendToServer()
        button_sound:Play()
        ice_creem_menu:Remove()
    end

    berry_buy_creem.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(255, 255, 255, 255))
            draw.RoundedBox(6, 0, 0, w, h, Color(255, 16, 96))
        else
            self:SetColor(Color(255, 255, 255, 10))
            draw.RoundedBox(6, 0, 0, w, h, Color(92, 51, 51))
        end
    end

    local erik_buy_creem = vgui.Create("DButton", ice_creem_menu)
    erik_buy_creem:SetSize(scrw / 10, scrh / 20)
    erik_buy_creem:SetPos(scrw * 0.08, scrh * 0.26)
    erik_buy_creem:SetColor(tfm_colors["white"])
    erik_buy_creem:SetText("Anjelika Erikli")

    erik_buy_creem.DoClick = function()
        net.Start("tfm_icecreem_network")
        net.WriteEntity(stand)
        net.WriteUInt(5, 4)
        net.SendToServer()
        button_sound:Play()
        ice_creem_menu:Remove()
    end

    erik_buy_creem.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(255, 255, 255, 255))
            draw.RoundedBox(6, 0, 0, w, h, Color(250, 48, 48))
        else
            self:SetColor(Color(255, 255, 255, 10))
            draw.RoundedBox(6, 0, 0, w, h, Color(92, 51, 51))
        end
    end

    local muz_buy_creem = vgui.Create("DButton", ice_creem_menu)
    muz_buy_creem:SetSize(scrw / 10, scrh / 20)
    muz_buy_creem:SetPos(scrw * 0.08, scrh * 0.32)
    muz_buy_creem:SetColor(tfm_colors["white"])
    muz_buy_creem:SetText("Muzlu")

    muz_buy_creem.DoClick = function()
        net.Start("tfm_icecreem_network")
        net.WriteEntity(stand)
        net.WriteUInt(6, 4)
        net.SendToServer()
        button_sound:Play()
        ice_creem_menu:Remove()
    end

    muz_buy_creem.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(145, 145, 145))
            draw.RoundedBox(6, 0, 0, w, h, Color(255, 255, 117))
        else
            self:SetColor(Color(255, 255, 255, 10))
            draw.RoundedBox(6, 0, 0, w, h, Color(92, 51, 51))
        end
    end

    local jungle_buy_creem = vgui.Create("DButton", ice_creem_menu)
    jungle_buy_creem:SetSize(scrw / 10, scrh / 20)
    jungle_buy_creem:SetPos(scrw * 0.08, scrh * 0.38)
    jungle_buy_creem:SetColor(tfm_colors["white"])
    jungle_buy_creem:SetText("Orman Meyveli")

    jungle_buy_creem.DoClick = function()
        net.Start("tfm_icecreem_network")
        net.WriteEntity(stand)
        net.WriteUInt(7, 4)
        net.SendToServer()
        button_sound:Play()
        ice_creem_menu:Remove()
    end

    jungle_buy_creem.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(187, 187, 187))
            draw.RoundedBox(6, 0, 0, w, h, Color(151, 247, 247))
        else
            self:SetColor(Color(255, 255, 255, 10))
            draw.RoundedBox(6, 0, 0, w, h, Color(92, 51, 51))
        end
    end

    local kivi_buy_creem = vgui.Create("DButton", ice_creem_menu)
    kivi_buy_creem:SetSize(scrw / 10, scrh / 20)
    kivi_buy_creem:SetPos(scrw * 0.08, scrh * 0.44)
    kivi_buy_creem:SetColor(tfm_colors["white"])
    kivi_buy_creem:SetText("Kivili")

    kivi_buy_creem.DoClick = function()
        net.Start("tfm_icecreem_network")
        net.WriteEntity(stand)
        net.WriteUInt(8, 4)
        net.SendToServer()
        button_sound:Play()
        ice_creem_menu:Remove()
    end

    kivi_buy_creem.Paint = function(self, w, h)
        if self:IsHovered() then
            self:SetColor(Color(255, 255, 255))
            draw.RoundedBox(6, 0, 0, w, h, Color(13, 102, 13))
        else
            self:SetColor(Color(255, 255, 255, 10))
            draw.RoundedBox(6, 0, 0, w, h, Color(92, 51, 51))
        end
    end
end

function ENT:Initialize()
    self.start = false
    self.delay = 0
    self.cache = 0
    self.n = TFM.Stands["ice_stand"].time_of_icecreems or 15
    self.icecreem_name = "ERROR"
    self.icecreem_clr = Color(255, 0, 0)
end

net.Receive("tfm_icecreem_network", function(len, pl)
    local stand = net.ReadEntity()
    local read_ice_flag = net.ReadUInt(4)
    local read_ice_onstart = net.ReadUInt(4)

    if read_ice_flag == 1 then
        TFM_ICECREEM_UI(stand)
    elseif read_ice_flag == 10 and read_ice_onstart then
        stand.icecreem_name = TFM.Stands["ice_stand"].icecreem_colors[read_ice_onstart].name
        stand.icecreem_clr = TFM.Stands["ice_stand"].icecreem_colors[read_ice_onstart].clr
        stand.start = true
        stand.cache = CurTime() + stand.n
    elseif read_ice_flag >= 2 and read_ice_flag <= 9 then
        stand.start = false
        stand.delay = 0
    end
end)

local roundedboxcolor_cache, drawsimpletextcolor_cache = Color(0, 0, 0, 200), Color(255, 255, 255)

function ENT:Draw()
    self:DrawModel()

    if self.start then
        if self.delay > self.cache then return end
        self.delay = CurTime() + 1
        local ang = LocalPlayer():EyeAngles()
        local scrw, scrh, math_round = ScrW(), ScrH(), math.Round(self.cache - self.delay)
        ang = Angle(0, ang.y, 0)
        ang:RotateAroundAxis(ang:Forward(), 180)
        ang:RotateAroundAxis(ang:Right(), 90)
        ang:RotateAroundAxis(ang:Up(), 90)
        cam.Start3D2D(self:WorldSpaceCenter(), ang, 0.1)
        draw.RoundedBox(10, scrw - 1600, scrh - 1500, scrw * 0.4, scrh * 0.2, roundedboxcolor_cache)
        draw.SimpleText(self.icecreem_name .. " Aromalı Dondurma Hazırlanıyor... " .. math_round .. " saniye", "ice-stand_f1", scrw - 1350, scrh - 1450, drawsimpletextcolor_cache, 1, 1)
        draw.RoundedBox(10, scrw - 1580, scrh - 1400, (math_round) * (510 / self.n), scrh * 0.05, self.icecreem_clr)
        cam.End3D2D()
    end
end

function ENT:OnRemove()
    self.delay = 0
end
--addons/turkish_food_mod-main/lua/entities/kofte_durum/cl_init.lua:
include("shared.lua")
function ENT:Initialize() end
function ENT:Draw() self:DrawModel() end

--gamemodes/darkrp/entities/entities/lab_base/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/lahmacun/shared.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/entities/mediaplayer_base/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"

ENT.Spawnable = false

ENT.Model = Model( "models/props_phx/rt_screen.mdl" )

ENT.MediaPlayerType = "entity"
ENT.IsMediaPlayerEntity = true

local ErrorModel = "models/error.mdl"

function ENT:Initialize()

	if SERVER then
		if self:GetModel() == ErrorModel then
			self:SetModel( self.Model )
		end

		self:SetUseType( SIMPLE_USE )

		self:PhysicsInit( SOLID_VPHYSICS )
		self:SetMoveType( MOVETYPE_VPHYSICS )

		local phys = self:GetPhysicsObject()
		if IsValid( phys ) then
			phys:EnableMotion( false )
		end

		-- Install media player to entity
		local mp = self:InstallMediaPlayer( self.MediaPlayerType )

		-- Network media player ID
		self:SetMediaPlayerID( mp:GetId() )
	end

	-- Apply player config based on model
	self.PlayerConfig = self:GetMediaPlayerConfig()
end

function ENT:SetupDataTables()
	self:NetworkVar( "String", 0, "MediaPlayerID" )
end

function ENT:OnRemove()
	local mp = self:GetMediaPlayer()
	if mp then
		mp:Remove()
	end
end

function ENT:GetMediaPlayerConfig()
	local model = self:GetModel()
	local MPModelConfigs = list.Get( "MediaPlayerModelConfigs" )
	local config = MPModelConfigs and MPModelConfigs[model] or self.PlayerConfig
	return config
end

--addons/media_player_fixed_edition/lua/entities/mediaplayer_tv/shared.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/entities/mediaplayer_tv/shared.lua:
AddCSLuaFile()

if SERVER then
	resource.AddFile( "models/gmod_tower/suitetv_large.mdl" )
	resource.AddFile( "materials/models/gmod_tower/suitetv_large.vmt" )
	resource.AddSingleFile( "materials/entities/mediaplayer_tv.png" )
end

DEFINE_BASECLASS( "mediaplayer_base" )

ENT.PrintName 		= "Big Screen TV"
ENT.Author 			= "Samuel Maddock"
ENT.Instructions 	= "Right click on the TV to see available Media Player options. Alternatively, press E on the TV to turn it on."
ENT.Category 		= "Media Player"

ENT.Type = "anim"
ENT.Base = "mediaplayer_base"

ENT.Spawnable = true

ENT.Model = Model( "models/gmod_tower/suitetv_large.mdl" )

list.Set( "MediaPlayerModelConfigs", ENT.Model, {
	angle = Angle(-90, 90, 0),
	offset = Vector(6, 59.49, 103.65),
	width = 119,
	height = 69
} )

function ENT:SetupDataTables()
	BaseClass.SetupDataTables( self )

	self:NetworkVar( "String", 1, "MediaThumbnail" )
end

if SERVER then

	function ENT:SetupMediaPlayer( mp )
		mp:on("mediaChanged", function(media) self:OnMediaChanged(media) end)
	end

	function ENT:OnMediaChanged( media )
		self:SetMediaThumbnail( media and media:Thumbnail() or "" )
	end

else -- CLIENT

	local draw = draw
	local surface = surface
	local Start3D2D = cam.Start3D2D
	local End3D2D = cam.End3D2D
	local DrawHTMLMaterial = DrawHTMLMaterial

	local TEXT_ALIGN_CENTER = TEXT_ALIGN_CENTER
	local color_white = color_white

	local StaticMaterial = Material( "theater/STATIC" )
	local TextScale = 700

	function ENT:Draw()
		self:DrawModel()

		local mp = self:GetMediaPlayer()

		if not mp then
			self:DrawMediaPlayerOff()
		end
	end

	local HTMLMAT_STYLE_ARTWORK_BLUR = "htmlmat.style.artwork_blur"
	AddHTMLMaterialStyle( HTMLMAT_STYLE_ARTWORK_BLUR, {
		width = 720,
		height = 480
	}, HTMLMAT_STYLE_BLUR )

	local DrawThumbnailsCvar = MediaPlayer.Cvars.DrawThumbnails

	function ENT:DrawMediaPlayerOff()
		local w, h, pos, ang = self:GetMediaPlayerPosition()
		local thumbnail = self:GetMediaThumbnail()

		Start3D2D( pos, ang, 1 )
			if DrawThumbnailsCvar:GetBool() and thumbnail != "" then
				DrawHTMLMaterial( thumbnail, HTMLMAT_STYLE_ARTWORK_BLUR, w, h )
			else
				surface.SetDrawColor( color_white )
				surface.SetMaterial( StaticMaterial )
				surface.DrawTexturedRect( 0, 0, w, h )
			end
		End3D2D()


		local scale = w / TextScale
		Start3D2D( pos, ang, scale )
			local tw, th = w / scale, h / scale
			draw.SimpleText( "E Basıp Televizyonu Açın", "MediaTitle",
				tw / 2, th / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		End3D2D()
	end

end

--addons/turkish_food_mod-main/lua/entities/metro/cl_init.lua:
include("shared.lua")
function ENT:Initialize() end
function ENT:Draw() self:DrawModel() end

--addons/minigame-tool-assistant/lua/entities/minigame_bigsquare.lua:
AddCSLuaFile()
DEFINE_BASECLASS( "minigame_square_base" )

--[[------------------------------------------------
                Minigame Small Square
------------------------------------------------]]--

ENT.PrintName = "Minigame Big Square"

function ENT:Initialize()
    self:SetModel("models/hunter/blocks/cube3x3x025.mdl")
    self:SetType("minigame_bigsquare")

    -- Materials
    self:SetSubMaterial(0, "minigames/myplastic")

    BaseClass.Initialize( self )
end
--addons/pcasino/lua/entities/pcasino_mystery_wheel/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Mysterly Wheel"
ENT.Author = "Owain Owjo & The One Free-Man"
ENT.Category = "pCasino"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false

PerfectCasino.Core.RegisterEntity("pcasino_mystery_wheel", {
	general = {
		useFreeSpins = {d = true, t = "bool"} -- Can you use free spins on this machine
	},
	buySpin = {
		buy = {d = false, t = "bool"}, -- Can you buy a spin on this machine
		cost = {d = 1000000, t = "int"}, 
	},
	-- Combo data
	wheel = { -- I know, 20 slots :O
		{n = "$1", f = "money", i = 1, p = "dolla"},
		{n = "Nothing", f = "nothing", i = "nil", p = "melon"},
		{n = "$250,000", f = "money", i = 250000, p = "dolla"},
		{n = "Spin Again", f = "prize_wheel", i = "nil", p = "mystery_1"},
		{n = "Crossbow", f = "weapon", i = "weapon_crossbow", p = "chest"},
		{n = "$1,000,000", f = "money", i = 1000000, p = "dolla"},
		{n = "100 Points", f = "ps1_points", i = 100, p = "coins"},
		{n = "Vehicle", f = "wcd_givecar", i = "alfa_stradaletdm", p = "car"},
		{n = "Die", f = "kill", i = "nil", p = "bell"},
		{n = "$50,000", f = "money", i = 50000, p = "dolla"},
		{n = "Cone Hat", f = "ps1_item", i = "conehat", p = "berry"},
		{n = "100% Armor", f = "armor", i = 100, p = "diamond"},
		{n = "SMG", f = "weapon", i = "weapon_smg1", p = "chest"},
		{n = "Nothing", f = "nothing", i = "nil", p = "melon"},
		{n = "100% Health", f = "health", i = 100, p = "diamond"},
		{n = "$100,000", f = "money", i = 100000, p = "dolla"},
		{n = "Be Alyx", f = "setmodel", i = "models/player/alyx.mdl", p = "cherry"},
		{n = "250 Points", f = "ps1_points", i = 250, p = "coins"},
		{n = "450 XP", f = "bwe_givexp", i = 450, p = "clover"},
		{n = "7 HP", f = "health", i = 7, p = "seven"},
	}
},
"models/freeman/owain_mystery_wheel.mdl")
--addons/pcasino/lua/entities/pcasino_prize_plinth/shared.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_sign_interior_standing/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Sign Interior Standing"
ENT.Author = "Owain Owjo & The One Free-Man"
ENT.Category = "pCasino"
ENT.Spawnable = false
ENT.AdminSpawnable = false

PerfectCasino.Core.RegisterEntity("pcasino_sign_interior_standing", {
	-- General data
	general = {
		text = {d = "Welcome to the Cool Casino. We hope you enjoy your stay!", t = "string"} -- The text to show
	}
},
"models/freeman/owain_interiorsign_standing.mdl")
--addons/pcasino/lua/entities/pcasino_sign_interior_wall/cl_init.lua:
include("shared.lua")

function ENT:PostData()
end

function ENT:Draw()
	self:DrawModel()
	if self:GetPos():DistToSqr(LocalPlayer():GetPos()) > 1000000 then return end

	-- We can piggyback off the distance check to only request the entities data when it's needed :D
	if (not self.data) and (not PerfectCasino.Cooldown.Check(self:EntIndex(), 5)) then
		PerfectCasino.Core.RequestConfigData(self)
		return
	end

	if not self.data then return end

	local pos = self:GetPos()
	local ang = self:GetAngles()
	ang:RotateAroundAxis(ang:Forward(), 90)
	ang:RotateAroundAxis(ang:Right(), -90)

	cam.Start3D2D(pos + (self:GetUp() * 2.8) + (self:GetForward() * 0.1) + (self:GetRight() * 10.8), ang, 0.06)
		PerfectCasino.UI.WrapText(self.data.general.text, 25, "pCasino.Title.Static", 180, 47, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	cam.End3D2D()
end
--addons/sh_keypadcracker/lua/entities/prop_sh_keypadcracker/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/sade_pilav/cl_init.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_crime_box/shared.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_crime_guide/shared.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
store.steampowered.com/curator/32364216

Subscribe to the channel:↓
https://www.youtube.com/c/Famouse

More leaks in the discord:↓ 
https://discord.gg/rFdQwzm
------------------------------------------------------------------------*/

ENT.Base 			= "base_gmodentity";
ENT.Type 			= "anim";

ENT.PrintName		= "Crime Guide";
ENT.Category 		= "Serious Business";
ENT.Author			= "EnnX49";

ENT.Contact    		= "";
ENT.Purpose 		= "";
ENT.Instructions 	= "" ;

ENT.Spawnable		= true;
ENT.AdminSpawnable	= true;

ENT.RenderGroup		= RENDERGROUP_TRANSLUCENT;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/serious_business/lua/entities/sb_good_guide/cl_init.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_product/shared.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_wk_place/cl_init.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
store.steampowered.com/curator/32364216

Subscribe to the channel:↓
www.youtube.com/c/Famouse

More leaks in the discord:↓ 
discord.gg/rFdQwzm
------------------------------------------------------------------------*/

include("shared.lua");

surface.CreateFont("SB_WK_InfoText", {
	font = "Roboto",
	size = 72,
	weight = 100,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
});

surface.CreateFont("SB_WK_InfoIcon", {
	font = "Webdings",
	size = 128,
	weight = 100,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = true,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
});

surface.CreateFont("SB_WK_InfoIcon2", {
	font = "Webdings",
	size = 84,
	weight = 100,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = true,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
});

surface.CreateFont("SB_WK_PlaceIcon", {
	font = "Webdings",
	size = 256,
	weight = 100,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = true,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
});

surface.CreateFont("SB_WK_PlaceText", {
	font = "Roboto",
	size = 96,
	weight = 0,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
});

function ENT:Initialize()	
	self.haveWorker = false;
end;


function ENT:Think()
	local trace = {}    
	trace.start = self:WorldSpaceCenter()+(self:GetUp()*6);
	trace.endpos = self:WorldSpaceCenter()+(self:GetUp()*6)+(self:GetForward()*48);
	trace.filter = {self};
	local traceRes = util.TraceLine(trace);
	if (IsValid(traceRes.Entity) and traceRes.Entity:GetClass() == "sb_wk_seat") then
		self.haveWorker = true;
	else
		self.haveWorker = false;
	end;
end;

function ENT:Draw()
	self:DrawModel();

	local camPos = self:WorldSpaceCenter();
	local camAng = self:GetAngles();
	
	local boxWidth = 576;
	local boxHeight = 144;

	camAng:RotateAroundAxis(camAng:Up(), 90);
	camAng:RotateAroundAxis(camAng:Forward(), 90);
	camAng:RotateAroundAxis(camAng:Right(), 180);

	if (LocalPlayer():GetPos():Distance(self:GetPos()) < SeriousBusiness_Config.DrawDistance) then
		-- MAIN PAD
		cam.Start3D2D(camPos+camAng:Up()*19.75, camAng, 0.1)
			--draw.RoundedBox(0, -boxWidth*0.5+boxHeight, -boxHeight*0.5, boxWidth-boxHeight, boxHeight, Color(44, 62, 80, 100)); -- whole width box
			if (self:GetNWBool("crime")) then
				draw.RoundedBox(0, -boxWidth*0.5+boxHeight, -boxHeight*0.5, boxWidth-boxHeight, boxHeight, Color(50, 0, 0, 100)); -- whole width box
			else
				draw.RoundedBox(0, -boxWidth*0.5+boxHeight, -boxHeight*0.5, boxWidth-boxHeight, boxHeight, Color(44, 62, 80, 100)); -- whole width box	
			end;

			local bgIconColor = Color(255, 0, 0, 255);
			if (self:GetNWString("main") == "craft") then
				bgIconColor = Color(52, 0, 0, 200);
			elseif (self:GetNWString("main") == "social") then
				bgIconColor = Color(0, 52, 0, 200);
			elseif (self:GetNWString("main") == "math") then
				bgIconColor = Color(0, 0, 52, 200);
			elseif (self:GetNWString("main") == "art") then
				bgIconColor = Color(0, 52, 52, 200);
			elseif (self:GetNWString("main") == "fraud") then
				bgIconColor = Color(50, 50, 0, 200);
			elseif (self:GetNWString("main") == "cook") then
				bgIconColor = Color(50, 25, 0, 200);
			elseif (self:GetNWString("main") == "mail") then
				bgIconColor = Color(37, 25, 37, 200);
			elseif (self:GetNWString("main") == "terror") then			
				bgIconColor = Color(25, 25, 25, 200);
			end;
			draw.RoundedBox(0, -boxWidth*0.5, -boxHeight*0.5, boxHeight, boxHeight, bgIconColor); -- Color(26, 26, 26, 200)

				if (self:GetNWBool("crime")) then
					draw.RoundedBox(0, -boxWidth*0.5+boxHeight, -boxHeight*0.5+(48*0), boxWidth-boxHeight, 48, Color(148, 93, 83));
				else
					draw.RoundedBox(0, -boxWidth*0.5+boxHeight, -boxHeight*0.5+(48*0), boxWidth-boxHeight, 48, Color(192, 57, 43));
				end;

				local productProgress = math.Clamp((self:GetNWInt("curStep")*(boxWidth-boxHeight))/self:GetNWInt("maxStep"), 0, boxWidth-boxHeight);
				if (self:GetNWBool("crime")) then
					draw.RoundedBox(0, -boxWidth*0.5+boxHeight, -boxHeight*0.5+(48*1), productProgress, 48, Color(100, 128, 84));
				else
					draw.RoundedBox(0, -boxWidth*0.5+boxHeight, -boxHeight*0.5+(48*1), productProgress, 48, Color(39, 174, 96));
				end;

				local workProgress = math.Clamp((self:GetNWInt("curPoints")*(boxWidth-boxHeight))/self:GetNWInt("reqPoints"), 0, boxWidth-boxHeight);
				if (self:GetNWBool("crime")) then
					draw.RoundedBox(0, -boxWidth*0.5+boxHeight, -boxHeight*0.5+(48*2), workProgress, 48, Color(126, 133, 83));
				else
					draw.RoundedBox(0, -boxWidth*0.5+boxHeight, -boxHeight*0.5+(48*2), workProgress, 48, Color(41, 128, 185));
				end;
		cam.End3D2D();

		-- Sign that shows you need to place a worker here.
		if (!self.haveWorker) then
			local sinWave = (self:GetUp()*(math.sin(CurTime()*4)*8));
			cam.Start3D2D(camPos+(self:GetForward()*48)+(self:GetUp()*16)+sinWave, Angle(0, LocalPlayer():EyeAngles().y-90, 90), 0.16)
				if (self:GetNWBool("crime")) then
					draw.SimpleText("H", "SB_WK_PlaceIcon", 0, 0, Color(159, 27, 36), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
				else
					draw.SimpleText("H", "SB_WK_PlaceIcon", 0, 0, Color(46, 204, 113), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
				end;
			cam.End3D2D();
			cam.Start3D2D(camPos+(self:GetForward()*48)+(self:GetUp()*16)+sinWave, Angle(0, LocalPlayer():EyeAngles().y-90, 90), 0.075)
				if (self:GetNWBool("crime")) then
					draw.SimpleText("Buraya bir işçi yerleştirin!", "SB_WK_PlaceText", 0, -164, Color(159, 27, 36), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
				else
					draw.SimpleText("Buraya bir işçi yerleştirin!", "SB_WK_PlaceText", 0, -164, Color(46, 204, 113), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
				end;
			cam.End3D2D();
		end;

		cam.Start3D2D(camPos+camAng:Up()*19.75, camAng, 0.05)
		    draw.SimpleText(":", "SB_WK_InfoIcon2", -280, -96*1, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER);
			draw.SimpleText(self:GetNWString("name"), "SB_WK_InfoText", -190, -96*1, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER);

			draw.SimpleText('"', "SB_WK_InfoIcon2", -280, -96*-0, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER);
			draw.SimpleText("İlerleme", "SB_WK_InfoText", -190, -96*0, Color(255, 255, 255, 150), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER);

			draw.SimpleText("?", "SB_WK_InfoIcon2", -280, -96*-1, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER);
			draw.SimpleText("Yapım aşamasında", "SB_WK_InfoText", -190, -96*-1, Color(255, 255, 255, 150), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER);
		cam.End3D2D();

		cam.Start3D2D(camPos+camAng:Up()*19.75, camAng, 0.095)
			if (self:GetNWString("main") == "craft") then
				draw.SimpleText("#", "SB_WK_PlaceIcon", -228, 0, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
			elseif (self:GetNWString("main") == "social") then
				draw.SimpleText("(", "SB_WK_PlaceIcon", -228, 0, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
			elseif (self:GetNWString("main") == "math") then
				draw.SimpleText("2", "SB_WK_PlaceIcon", -228, 0, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
			elseif (self:GetNWString("main") == "art") then
				draw.SimpleText("®", "SB_WK_PlaceIcon", -228, 0, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
			-- crime icons
			elseif (self:GetNWString("main") == "fraud") then
				draw.SimpleText("Y", "SB_WK_PlaceIcon", -228, 0, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
			elseif (self:GetNWString("main") == "cook") then
				draw.SimpleText("N", "SB_WK_PlaceIcon", -228, 0, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
			elseif (self:GetNWString("main") == "mail") then
				draw.SimpleText("*", "SB_WK_PlaceIcon", -228, 0, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
			elseif (self:GetNWString("main") == "terror") then
				draw.SimpleText("M", "SB_WK_PlaceIcon", -228, 0, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
			end;
		cam.End3D2D();
	end;
end;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/serious_business/lua/entities/sb_wk_seat/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/sckegg/cl_init.lua:
include("shared.lua")
function ENT:Initialize() end
function ENT:Draw() self:DrawModel() end

--addons/turkish_food_mod-main/lua/entities/sckegg/shared.lua:
return gluapack()()
--addons/tablo_ent/lua/entities/score_base/cl_init.lua:
include("shared.lua")

surface.CreateFont( "score_title", {
	font = "Comfortaa",
	size = 21,
	weight = 400,
	antialias = true
} )

surface.CreateFont( "score_row_header", {
	font = "Comfortaa",
	size = 19,
	weight = 400,
	antialias = true
} )

surface.CreateFont( "score_row_text", {
	font = "Comfortaa",
	size = 16,
	weight = 400,
	antialias = true
} )
local color_white = Color(255,255,255)
local color_gri = Color( 50, 50, 50 )
function ENT:Draw()
	self:DrawModel()
	--if LocalPlayer():GetPos():DistToSqr(self:GetPos()) > 850000 then return end
	local Pos = self:GetPos()
	local Ang = self:GetAngles()
	local angup, angright, angforward = Ang:Up(), Ang:Forward(), Ang:Right()
	Ang:RotateAroundAxis( Ang:Forward(), 270)
	Ang:RotateAroundAxis( Ang:Up(), 180 )
	Ang:RotateAroundAxis( Ang:Right(), 90 )
	
	cam.Start3D2D(Pos - ( Ang:Forward() * 110 ) + ( Ang:Up() * 3 ) - ( Ang:Right() * 70 ), Ang, .5)
		surface.SetDrawColor( self.HeaderColor or color_gri )
		surface.DrawRect( -10, 15, 460, 20 )
		
		draw.SimpleText( self.TitleName, "score_title", 220, 25, color_white, 1, 1 )
	cam.End3D2D()
	
	cam.Start3D2D(Pos - ( Ang:Forward() * 110 ) + ( Ang:Up() * 3 ) - ( Ang:Right() * 60 ), Ang, .5)
		self:DrawFunc( self.score_data )
	cam.End3D2D()
end

function ENT:Initialize()
	self.score_data = {}

	--net.Start( "get_score_data" )
	--	net.WriteEntity( self )
	--net.SendToServer()
end

net.Receive( "stream_score", function()
	local sheet = net.ReadEntity()
	local tab = net.ReadTable()
	
	if ( IsValid( sheet ) ) then
		sheet.score_data = tab
	end
end )
--addons/turkish_food_mod-main/lua/tfm_config.lua:
return gluapack()()
--lua/entities/sv_petrol_canister/cl_init.lua:
return gluapack()()
--lua/entities/sv_repair/shared.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/entities/zfs_anim/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = false
ENT.RenderGroup = RENDERGROUP_OPAQUE
ENT.Model = "models/zerochain/fruitslicerjob/fs_melon.mdl"

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end

function ENT:CanDrive(ply)
    return false
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_backpack_ent/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

function ENT:Draw()
	self:DrawModel()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_generator/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

ENT.Type                    = "anim"
ENT.Base                    = "base_anim"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Generator"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_generator.mdl"
ENT.RenderGroup             = RENDERGROUP_BOTH

// How much fuel can it hold
ENT.Capacity = 2000

// How much power does it produce per second
ENT.PowerRate = 3
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a


function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "Fuel")
	self:NetworkVar("Int", 1, "Power")
	self:NetworkVar("Bool", 1, "TurnedOn")

	self:NetworkVar("Int", 2, "GeneratorID")

	if SERVER then
		self:SetGeneratorID(1)
		self:SetFuel(0)
		self:SetPower(0)
		self:SetTurnedOn(false)
	end
end

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end

function ENT:CanDrive(ply)
    return false
end

local lsw_vec = Vector(7.5,0,-10)
function ENT:OnSwitch(ply)
    local trace = ply:GetEyeTrace()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

	local dat = zgo2.Generator.GetData(self:GetGeneratorID())
	if not dat then return end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

	local pos = dat.UIPos.vec + lsw_vec
	//debugoverlay.Sphere(self:LocalToWorld(pos),1,0.1,Color( 0, 255, 0 ),true)
    if zclib.util.InDistance(self:LocalToWorld(pos), trace.HitPos, 6) then
        return true
    else
        return false
    end
end

local lsw_vec01 = Vector(-7.5,0,-10)
function ENT:OnConnect(ply)
    local trace = ply:GetEyeTrace()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

	local dat = zgo2.Generator.GetData(self:GetGeneratorID())
	if not dat then return end

	local pos = dat.UIPos.vec + lsw_vec01
	//debugoverlay.Sphere(self:LocalToWorld(pos),1,0.1,Color( 0, 255, 0 ),true)

    if zclib.util.InDistance(self:LocalToWorld(pos), trace.HitPos, 6) then
        return true
    else
        return false
    end
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_mixer/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_mixer/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_mixerbowl/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_npc/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_npc_export/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_pump/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

function ENT:Initialize()
	zgo2.Pump.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ENT:Draw()
	self:DrawModel()
	zgo2.Pump.OnDraw(self)
end

function ENT:Think()
	zgo2.Pump.OnThink(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_pump/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_tent/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

ENT.Type                    = "anim"
ENT.Base                    = "base_anim"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Tent"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = false
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_tent01.mdl"
ENT.RenderGroup             = RENDERGROUP_OPAQUE
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a

function ENT:SetupDataTables()
	self:NetworkVar("Int", 1, "TentID")

	if SERVER then
		self:SetTentID(1)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

function ENT:CanDrive(ply)
    return false
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_watertank/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ENT:Initialize()
	zgo2.Watertank.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:Draw()
	self:DrawModel()
	zgo2.Watertank.OnDraw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ENT:Think()
	zgo2.Watertank.OnThink(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

--addons/zeros_golddiggger/lua/entities/zgw_bucket/shared.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/entities/zgw_bucket_follow/cl_init.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/entities/zgw_bucket_follow/shared.lua:


ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_goldwash/zgw_bucket_follow.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Bucket - Follow"
ENT.Category = "Zeros GoldWasher"
ENT.RenderGroup = RENDERGROUP_OPAQUE

function ENT:SetupDataTables()
    self:NetworkVar("Int", 1, "Dirt")
    self:NetworkVar("Int", 2, "GoldRatio")
    self:NetworkVar("Bool", 0, "Follow")
    if (SERVER) then
        self:SetDirt(0)
        self:SetGoldRatio(0)
        self:SetFollow(false)
    end
end

--addons/zeros_golddiggger/lua/entities/zgw_jar/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_dropoff/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_equipment/shared.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_aluminium/shared.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_crate/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_crate.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Crate"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_BOTH

function ENT:SetupDataTables()
    self:NetworkVar("Int", 1, "MethType")
    self:NetworkVar("Int", 2, "MethAmount")
    self:NetworkVar("Int", 3, "MethQuality")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

    if (SERVER) then
        self:SetMethType(-1)
        self:SetMethAmount(0)
        self:SetMethQuality(1)
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013


function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_frezzertray/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_frezzertray/shared.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_meth/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")

function ENT:Initialize()
	zmlab2.Meth.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:Draw()
	self:DrawModel()
	zmlab2.Meth.Draw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_methylamine/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")

function ENT:Initialize()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ENT:Draw()
	self:DrawModel()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_furnace/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_furnance.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Furnace"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_OPAQUE

function ENT:SetupDataTables()
    self:NetworkVar("Int", 1, "AcidAmount")
    self:NetworkVar("Int", 2, "Temperatur")
    self:NetworkVar("Int", 3, "Heater")

    self:NetworkVar("Int", 4, "ProcessState")
    self:NetworkVar("Int", 5, "HeatingStart")

    /*
        0 = Needs more Acid
        1 = Press the Start Button
        2 = Is Heating Acid
        3 = Requieres heat change
        4 = Acid is ready and needs to be pumped to next machine
        5 = Moving Acid (Loading)
        6 = Needs to be cleaned
    */

    if (SERVER) then
        self:SetAcidAmount(0)
        self:SetTemperatur(0)
        self:SetHeater(0)
        self:SetProcessState(0)
        self:SetHeatingStart(0)
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

function ENT:OnIncrease(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)

    if lp.x > -25 and lp.x < -22 and lp.y < 14 and lp.y > 10 and lp.z > 52 and lp.z < 55 then
        return true
    else
        return false
    end
end

function ENT:OnDecrease(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

    if lp.x > -12.7 and lp.x < -11 and lp.y < 14 and lp.y > 10 and lp.z > 52 and lp.z < 55 then
        return true
    else
        return false
    end
end

function ENT:OnStart(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

    if lp.x > -23 and lp.x < -12 and lp.y < 14 and lp.y > 10 and lp.z > 51 and lp.z < 56.5 then
        return true
    else
        return false
    end
end

function ENT:OnErrorButton(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)

    if lp.x > -23 and lp.x < -12 and lp.y < 14 and lp.y > 10 and lp.z > 51 and lp.z < 56.5 then
        return true
    else
        return false
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024


// Returns the start position and direction for a hose
function ENT:GetHose_Out()
    local attach = self:GetAttachment(1)
    if attach == nil then return self:GetPos(),self:GetAngles() end
    local ang = attach.Ang
    ang:RotateAroundAxis(ang:Up(),90)
    return attach.Pos - ang:Up() * 1,ang
end


function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_frezzer/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_entity"
ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.Spawnable = true
ENT.AdminSpawnable = true
ENT.PrintName = "Freezer"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros Meth Lab"

function ENT:SetupDataTables()
	self:NetworkVar("Int", 1, "UsedPositions")
	self:NetworkVar("Bool", 0, "IsFreezing")

	if (SERVER) then
		self:SetUsedPositions(0)
		self:SetIsFreezing(false)
	end
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_meth_baggy/cl_init.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_methdropoff/shared.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_methylamin/shared.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_sludge/cl_init.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_basket/shared.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Refiner Crate"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.Model = "models/Zerochain/props_mining/zrms_refiner_basket.mdl"
ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
	self:NetworkVar("Float", 0, "ResourceAmount")
	self:NetworkVar("String", 0, "ResourceType")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if (SERVER) then
		self:SetResourceAmount(0)
		self:SetResourceType("Empty")
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_basket_bronze.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_basket")
ENT.Type = "anim"
ENT.Base = "zrms_basket"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Crate - Bronze"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
	self:NetworkVar("Float", 0, "ResourceAmount")
	self:NetworkVar("String", 0, "ResourceType")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if (SERVER) then
		self:SetResourceAmount(zrmine.config.ResourceCrates_Capacity)
		self:SetResourceType("Bronze")
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_conveyorbelt/cl_init.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

include("shared.lua")

function ENT:Initialize()
	// Creates particle emitter
	self.InsertEffect = ParticleEmitter(self:GetPos())

	// Sets up belt material
	self:Setup_BeltMaterial()

	// Sets up stuff for the client gravel animation
	zrmine.f.Gravel_Initialize(self)

	self.LastState = -1

	zrmine.f.EntList_Add(self)
end

function ENT:Setup_BeltMaterial()
	local params = {
		["$color2"] = Vector(1, 0, 0),
		["$basetexture"] = "zerochain/props_mining/conveyorbelt/zrms_conveyorbelt_belt_diff",
		["$bumpMap"] = "zerochain/props_mining/conveyorbelt/zrms_conveyorbelt_belt_nrm",
		["$normalmapalphaenvmapmask"] = 1,
		["$surfaceprop"] = "metal",
		["$halflambert"] = 1,
		["$model"] = 1,
		["$envmap"] = "env_cubemap",
		["$envmaptint"] = Vector(0.01, 0.01, 0.01),
		["$envmapfresnel"] = 1,
		["$phong"] = 1,
		["$phongexponenttexture"] = "zerochain/props_mining/conveyorbelt/zrms_conveyorbelt_belt_phong",
		["$phongtint"] = Vector(1, 1, 1),
		["$phongboost"] = 25,
		["$phongfresnelranges"] = Vector(0.05, 0.5, 1),
		["$myspeed"] = 0,

		Proxies = {
			TextureScroll = {
				texturescrollvar = "$baseTexturetransform",
				texturescrollrate = "$myspeed",
				texturescrollangle = -90
			}
		}
	}

	self.ScrollMat = CreateMaterial("scrollmat" .. self:EntIndex(), "VertexLitGeneric", params)
	local id

	if (self:GetClass() == "zrms_conveyorbelt_n") then
		id = 0
	elseif (self:GetClass() == "zrms_conveyorbelt_s") then
		id = 0
	else
		id = 3
	end

	self:SetSubMaterial(id, "!scrollmat" .. self:EntIndex())
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	zrmine.f.Debug("Created Material")
end

function ENT:ReturnStorage()
	return self:GetCoal() + self:GetIron() + self:GetBronze() + self:GetSilver() + self:GetGold()
end

function ENT:UpdateState()
	local CurrentState = self:GetCurrentState()

	if CurrentState ~= self.LastState then

		self.LastState = CurrentState

		if self.LastState == 1 then

			zrmine.f.Animation(self, "output", 0.25)

			local Belt_speed = 10 / self.TransportSpeed
			self.ScrollMat:SetFloat("$myspeed", Belt_speed)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 


			if self:GetClass() == "zrms_inserter" then

				timer.Simple(self.TransportSpeed - 1.8, function()
					if IsValid(self) then
						self:Mode_Inserter_OUPUT()
					end
				end)

				timer.Simple(self.TransportSpeed + 0.3, function()
					if IsValid(self) and self:ReturnStorage() <= 0 then
						self:Mode_IDLE()
					end
				end)
			else

				timer.Simple(self.TransportSpeed + 0.1, function()
					if IsValid(self) and self:ReturnStorage() <= 0 then
						self:Mode_IDLE()
					end
				end)
			end
		else
			self:Mode_IDLE()
		end
	end
end

function ENT:Mode_IDLE()
	zrmine.f.Animation(self, "idle", 1)

	local Belt_speed = 0
	self.ScrollMat:SetFloat("$myspeed", Belt_speed)
end

function ENT:Mode_Inserter_OUPUT()

	// Here we send the resources or show the discard gravel effect
	local attach = self:GetAttachment(self:LookupAttachment("output"))

	if attach == nil then return end

	local effectPos03 = attach.Pos + self:GetUp() * 24 + self:GetForward() * 5
	local effectAng03 = self:GetAngles()

	zrmine.f.EmitSoundENT("zrmine_refinerdirt",self)
	zrmine.f.ParticleEffect("zrms_refiner_dirt02", effectPos03, effectAng03, self)
end

function ENT:MoveSound()
	local MoveSound = CreateSound(self, "zrmine_sfx_conveyorbelt_move")

	if (self.LastState == 1) then
		if self.SoundObj == nil then
			self.SoundObj = MoveSound
		end

		if self.SoundObj:IsPlaying() == false then
			self.SoundObj:Play()
			self.SoundObj:ChangeVolume(0, 0)
			self.SoundObj:ChangeVolume(GetConVar("zrms_cl_audiovolume"):GetFloat(), 1)
		end
	else
		if self.SoundObj == nil then
			self.SoundObj = MoveSound
		end

		if self.SoundObj:IsPlaying() == true then
			self.SoundObj:ChangeVolume(0, 1)
			if ((self.lastSoundStop or CurTime()) > CurTime()) then return end
			self.lastSoundStop = CurTime() + 5

			timer.Simple(2, function()
				if (IsValid(self)) then
					self.SoundObj:Stop()
				end
			end)
		end
	end
end

function ENT:Think()
	if  zrmine.f.InDistance(self:GetPos(), LocalPlayer():GetPos(), 1000) then
		self:UpdateState()

		// Handels the move sound
		self:MoveSound()

		// Handels the gravel animation
		zrmine.f.ClientGravelAnim(self)
	end
	self:SetNextClientThink(CurTime())
	return true
end

function ENT:Draw()
	self:DrawModel()

	zrmine.f.UpdateEntityVisuals(self)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	// Displays the infomations if the players looks at the ent
	if self.ShowInfo then
		self:DrawInfo()
	end
end

function ENT:UpdateVisuals()
	local id

	if (self:GetClass() == "zrms_conveyorbelt_n") then
		id = 0
	elseif (self:GetClass() == "zrms_conveyorbelt_s") then
		id = 0
	else
		id = 3
	end

	if (self:GetSubMaterial(id) ~= "!scrollmat" .. self:EntIndex()) then
		self:SetSubMaterial(id, "!scrollmat" .. self:EntIndex())

		zrmine.f.Debug("Applyied Material")
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end

// Draw Info
local offsetX, offsetY = -3, 10
function ENT:DrawResourceItem(OreType, xpos, ypos, size)
	local color = zrmine.f.GetOreColor(OreType)

	surface.SetDrawColor(color)
	surface.SetMaterial(zrmine.default_materials["Ore"])
	surface.DrawTexturedRect(xpos + offsetX, ypos + offsetY, size, size)

	draw.DrawText( math.Round(zrmine.f.GetOreFromEnt(self,OreType)) .. zrmine.config.BuyerNPC_Mass, "zrmine_screen_font3", xpos + offsetX + 30, ypos + offsetY + size * 0.25, color, TEXT_ALIGN_LEFT)
end

function ENT:DrawInfo()
	/*
	local Pos = self:LocalToWorld(Vector(0,0,17))

	local aAng = self:GetAngles()
	aAng:RotateAroundAxis(self:GetUp(), 180)
	cam.Start3D2D(Pos, aAng, 0.1)
		draw.RoundedBox(0, -65, -75, 130, 150, zrmine.default_colors["grey01"])
		draw.RoundedBox(0, -60, -70, 120, 140, zrmine.default_colors["grey02"])

		local amount = math.Round(self:ReturnStorage(), 2)
		local aBar = (120 / zrmine.config.Belt_Capacity) * amount

		if (aBar > 120) then
			aBar = 120
		end

		draw.RoundedBox(0, -52, -60, 20, aBar, zrmine.default_colors["brown01"])
	cam.End3D2D()

	cam.Start3D2D(Pos, self:GetAngles(), 0.1)
		self:DrawResourceItem("Coal", -55, -75, 30)
		self:DrawResourceItem("Iron", -55, -50, 30)
		self:DrawResourceItem("Bronze", -55, -25, 30)
		self:DrawResourceItem("Silver", -55, 0, 30)
		self:DrawResourceItem("Gold", -55, 25, 30)

		surface.SetDrawColor(zrmine.default_colors["white02"])
		surface.SetMaterial(zrmine.default_materials["Scale"])
		surface.DrawTexturedRect(17, -62, 50, 125)
	cam.End3D2D()
	*/

	zrmine.f.Belt_DrawInfo(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:OnRemove()
	if (self.SoundObj ~= nil and self.SoundObj:IsPlaying()) then
		self.SoundObj:Stop()
	end
	zrmine.f.RemoveClientGravel(self)
end

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_conveyorbelt/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_crusher/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_gravelcrate/cl_init.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_gravelcrate/cl_init.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

include("shared.lua")

function ENT:Initialize()
	self.LastStorage = 0

	timer.Simple(0.25,function()
		if IsValid(self) then self.Initialized = true end
	end)
end

function ENT:Draw()
	self:DrawModel()

	if zrmine.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 150) and not zrmine.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 15) then
		self:DrawInfo()
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end


// UI STUFF
local size = 75
function ENT:DrawResourceItem(Info, color, offsetY)

	draw.RoundedBox(1, -2, 69 + offsetY, 4, 7, zrmine.default_colors["white01"])
	surface.SetDrawColor(zrmine.default_colors["white03"])
	surface.SetMaterial(zrmine.default_materials["Circle"])
	surface.DrawTexturedRect(-38, offsetY, size, size)

	surface.SetDrawColor(color)
	surface.SetMaterial(zrmine.default_materials["Ore"])
	surface.DrawTexturedRect(-38, offsetY, size, size)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	draw.DrawText(Info .. zrmine.config.BuyerNPC_Mass, "zrmine_gravelcrate_font1", 1, offsetY + 32, zrmine.default_colors["white02"], TEXT_ALIGN_CENTER)
end

function ENT:DrawInfo()
	local rTable = {
		["Coal"] = {a = math.Round(self:GetCoal(), 1),c = zrmine.default_colors["Coal"]},
		["Iron"] = {a = math.Round(self:GetIron(), 1),c = zrmine.default_colors["Iron"]},
		["Bronze"] = {a = math.Round(self:GetBronze(), 1),c = zrmine.default_colors["Bronze"]},
		["Silver"] = {a = math.Round(self:GetSilver(), 1),c = zrmine.default_colors["Silver"]},
		["Gold"] = {a = math.Round(self:GetGold(), 1),c = zrmine.default_colors["Gold"]},
	}

	cam.Start3D2D(self:LocalToWorld(Vector(0,0,27)), Angle(0, LocalPlayer():EyeAngles().y - 90, LocalPlayer():EyeAngles().z + 90), 0.15)
		local oY = -35

		for k, v in pairs(rTable) do
			if (rTable[k].a > 0) then
				self:DrawResourceItem(rTable[k].a, rTable[k].c, oY)
				oY = oY - 70
			end
		end
	cam.End3D2D()
end


// Visual Update
function ENT:Think()
	self:UpdateVisuals()
end

function ENT:UpdateVisuals()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if self.Initialized and zrmine.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 1000) then

		local Iron = self:GetIron()
		local Bronze = self:GetBronze()
		local Silver = self:GetSilver()
		local Gold = self:GetGold()
		local Coal = self:GetCoal()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

		local storedAmount = Iron + Bronze + Silver + Gold + Coal

		if self.LastStorage ~= storedAmount then
			self.LastStorage = storedAmount

			if (storedAmount >= zrmine.config.GravelCrates_Capacity) then
				self:SetBodygroup(0, 3)
			elseif (storedAmount >= zrmine.config.GravelCrates_Capacity / 2) then
				self:SetBodygroup(0, 2)
			elseif (storedAmount > 0) then
				self:SetBodygroup(0, 1)
			elseif (storedAmount <= 0) then
				self:SetBodygroup(0, 0)
			end

			local rTable = {
				["Coal"] = Coal,
				["Iron"] = Iron,
				["Bronze"] = Bronze,
				["Silver"] = Silver,
				["Gold"] = Gold,
			}

			local rSkin
			local HasMultipleRessources = false
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

			for k, v in pairs(rTable) do
				if v > 0 then
					if rSkin == nil then
						rSkin = k
					else
						HasMultipleRessources = true
						break
					end
				end
			end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

			if storedAmount > 0 then
				if HasMultipleRessources then
					self:SetSkin(0)
					zrmine.f.Debug("GravelCrate has Multiple Ressources.")

				else
					if rSkin == "Coal" then
						self:SetSkin(5)
					elseif rSkin == "Iron" then
						self:SetSkin(1)
					elseif rSkin == "Bronze" then
						self:SetSkin(2)
					elseif rSkin == "Silver" then
						self:SetSkin(3)
					elseif rSkin == "Gold" then
						self:SetSkin(4)
					end
					zrmine.f.Debug("GravelCrate only has: " .. rSkin)
				end
			end
		end
	else
		self.LastStorage = -1
	end
end

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_mineentrance_base/cl_init.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_refiner_bronze.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_refiner")
ENT.Type = "anim"
ENT.Base = "zrms_refiner"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Refiner - Bronze"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false
ENT.RefinerType = "Bronze"
ENT.RefiningTime = zrmine.config.Bronze_RefiningTime
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_resource_gold.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_sorter_silver.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_storagecrate/cl_init.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

include("shared.lua")

function ENT:Draw()
	self:DrawModel()

	if zrmine.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 300) then
		self:DrawInfo()
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

// UI STUFF
local size = 75
function ENT:DrawResourceItem(Info, color, offsetY)
	draw.RoundedBox(1, -2, 69 + offsetY, 4, 7, zrmine.default_colors["white01"])
	surface.SetDrawColor(zrmine.default_colors["white03"])
	surface.SetMaterial(zrmine.default_materials["Circle"])
	surface.DrawTexturedRect(-38, offsetY, size, size)

	surface.SetDrawColor(color)
	surface.SetMaterial(zrmine.default_materials["MetalBar"])
	surface.DrawTexturedRect(-38, offsetY, size, size)

	draw.DrawText(Info, "zrmine_gravelcrate_font1", 1, offsetY + 32, zrmine.default_colors["white02"], TEXT_ALIGN_CENTER)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:DrawInfo()
	local rTable = {
		["Iron"] = {a = self:GetbIron(),c = zrmine.default_colors["Iron"]},
		["Bronze"] = {a = self:GetbBronze(),c = zrmine.default_colors["Bronze"]},
		["Silver"] = {a = self:GetbSilver(),c = zrmine.default_colors["Silver"]},
		["Gold"] = {a = self:GetbGold(),c = zrmine.default_colors["Gold"]}
	}

	cam.Start3D2D(self:LocalToWorld(Vector(0,0,20)), Angle(0, LocalPlayer():EyeAngles().y - 90, 90), 0.1)
		local oY = -35

		for k, v in pairs(rTable) do
			if (rTable[k].a > 0) then
				self:DrawResourceItem(rTable[k].a, rTable[k].c, oY)
				oY = oY - 70
			end
		end

	cam.End3D2D()
end

function ENT:Initialize()
	self.LastBarCount = 0
	self.LastClosed = false
end


function ENT:BarChangeUpdater()
	local iron = self:GetbIron()
	local bronze = self:GetbBronze()
	local silver = self:GetbSilver()
	local gold = self:GetbGold()
	local barCount = iron + bronze + silver + gold

	if self.LastBarCount ~= barCount then

		zrmine.f.EmitSoundENT("zrmine_addbar",self)

		self.LastBarCount = barCount
		self:UpdateClientProps()
	end
end


function ENT:Think()
	self:SetNextClientThink(CurTime())

	//Here we create or remove the client models
	if zrmine.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 500) then
		self:BarChangeUpdater()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

		local closed = self:GetIsClosed()

		if self.LastClosed ~= closed then
			self.LastClosed = closed

			if closed then
				zrmine.f.Animation(self, "close", 2)
			else
				zrmine.f.Animation(self, "idle", 1)
			end
		end
	else
		self:RemoveClientModels()
		self.ClientProps = {}
		self.LastBarCount = -1
		self.LastClosed = -1
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	return true
end

function ENT:UpdateClientProps()
	self:RemoveClientModels()

	self.ClientProps = {}
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	for i = 1, self:GetbIron() do
		self:CreateClientBar(0)
	end

	for i = 1, self:GetbBronze() do
		self:CreateClientBar(1)
	end

	for i = 1, self:GetbSilver() do
		self:CreateClientBar(2)
	end

	for i = 1, self:GetbGold() do
		self:CreateClientBar(3)
	end
end

function ENT:OnRemove()
	self:RemoveClientModels()
end

function ENT:CreateClientBar(skin)
	local y = 1.5
	local c = 4.5
	local l = -5.5
	local barCount = table.Count(self.ClientProps)

	if (barCount > 5) then
		y = 3.5
	end

	if (barCount == 1 or barCount == 7) then
		c = 0
	elseif (barCount == 2 or barCount == 8) then
		c = -4.5
	elseif (barCount == 3 or barCount == 9) then
		l = 5.5
		c = 4.5
	elseif (barCount == 4 or barCount == 10) then
		l = 5.5
		c = 0
	elseif (barCount == 5 or barCount == 11) then
		l = 5.5
		c = -4.5
	end

	local bar = ents.CreateClientProp()

	bar:SetPos(self:GetPos() + self:GetUp() * y + self:GetForward() * l + self:GetRight() * c)
	bar:SetModel("models/Zerochain/props_mining/zrms_bar.mdl")
	local ang = self:GetAngles()
	ang:RotateAroundAxis(self:GetUp(), 0)
	ang:RotateAroundAxis(self:GetRight(), 180)
	bar:SetAngles(ang)

	bar:Spawn()
	bar:Activate()

	bar:SetRenderMode(RENDERMODE_NORMAL)
	bar:SetParent(self)
	bar:SetSkin(skin)

	table.insert(self.ClientProps, bar)
end

function ENT:RemoveClientModels()
	if (self.ClientProps and table.Count(self.ClientProps) > 0) then
		for k, v in pairs(self.ClientProps) do
			if IsValid(v) then
				v:Remove()
			end
		end
	end
end

--addons/zeros_trashman_v1.6.3/lua/entities/ztm_buyermachine/shared.lua:
return gluapack()()
--addons/zeros_trashman_v1.6.3/lua/entities/ztm_recycler/cl_init.lua:
/*
    Addon id: 
    Version: v1.6.3 (stable)
*/

include("shared.lua")

function ENT:Initialize()
	ztm.Recycler.Initialize(self)
end

function ENT:Draw()
	self:DrawModel()
	ztm.Recycler.Draw(self)
end

function ENT:Think()
	ztm.Recycler.Think(self)
	self:SetNextClientThink(CurTime())
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	return true
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:UpdateVisuals()
	ztm.Recycler.UpdateVisuals(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:OnRemove()
	ztm.Recycler.OnRemove(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_buyer_npc/shared.lua:
ENT.Base = "base_ai"
ENT.Type = "ai"
ENT.PrintName = "Moonshine Buyer"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros YeastBeast"
ENT.Spawnable = true
ENT.AdminSpawnable = true
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "Price")
	if (SERVER) then
		self:SetPrice(1)
	end
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_distillery_cooler/cl_init.lua:
include("shared.lua")

function ENT:Initialize()
	self.c_Water = 0
	self.c_Steam = 0
	self.c_MoonSine = 0
	self.c_Deflow = false
	self.Temp = 0
	self.CurrentTempLevel = 0
	self.c_WaterColor = zyb.default_colors["white01"]
end

function ENT:Think()

	local deflow = self:GetDeflowWater()

	if self.c_Deflow ~= deflow then
		self.c_Deflow = deflow

		if self.c_Deflow then
			zyb.f.PlayClientAnimation(self, "ventil_output_open", 1)

			local attach = self:GetAttachment(1)
			local ang = attach.Ang
			ang:RotateAroundAxis(ang:Right(),90)

			zyb.f.ParticleEffect("yb_water", attach.Pos, ang, self )
		else
			zyb.f.PlayClientAnimation(self, "ventil_output_close", 1)
			self:StopParticlesNamed("yb_water")
		end
	end

	zyb.f.LoopedSound(self, "zyb_fill_liquid", self.c_Deflow)

	self:SetNextClientThink(CurTime())
	return true
end

function ENT:ConvertHeatToColor()
	self.Temp = self:GetWaterTemperatur()
	self.CurrentTempLevel = (1 / 100) * self.Temp
	self.c_WaterColor = zyb.f.LerpColor(self.CurrentTempLevel, zyb.default_colors["blue02"], zyb.default_colors["orange02"])
end

function ENT:Draw()
	self:DrawModel()

	if zyb.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 300) then

		self:ConvertHeatToColor()

		self:DrawName()
		self:DrawInfo()
		self:DrawValveInfo()
		self:DrawHeatInfo()
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:DrawHeatInfo()
	cam.Start3D2D(self:LocalToWorld(Vector(14.2,0, 99.2)), self:LocalToWorldAngles(Angle(0,90,90)), 0.05)

		surface.SetDrawColor(zyb.default_colors["grey03"])
		surface.SetMaterial(zyb.default_materials["circle"])
		surface.DrawTexturedRect(-70,-70, 140, 140)

		draw.SimpleText(self.Temp .. zyb.config.HeatUnit, "zyb_barrel_font02", 0, -25, self.c_WaterColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)

		surface.SetDrawColor(zyb.default_colors["black04"])
		surface.SetMaterial(zyb.default_materials["shadowcircle"])
		surface.DrawTexturedRect(-55,-56, 110, 110)

		surface.SetDrawColor(zyb.default_colors["white02"])
		surface.SetMaterial(zyb.default_materials["glamcircle"])
		surface.DrawTexturedRect(-65,-65, 130, 130)
	cam.End3D2D()
end

function ENT:DrawName()
	cam.Start3D2D(self:LocalToWorld(Vector(14, 0, 110)), self:LocalToWorldAngles(Angle(0,90,90)), 0.05)

		-- Title
		local text = zyb.language.General["Cooler"]
		local bSize = zyb.f.GetTextSize(text,"zyb_barrel_font01")
		draw.RoundedBox(25, -bSize / 2, 0, bSize, 90, zyb.default_colors["black01"])
		draw.SimpleText(text, "zyb_barrel_font01", 0, 10, zyb.default_colors["white01"], TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
	cam.End3D2D()
end

function ENT:DrawInfo()
	local water = self:GetWater()
	local yeastSteam = self:GetYeastStewSteam()
	local moonShine = self:GetWeakMoonShine()

	cam.Start3D2D(self:LocalToWorld(Vector(14, 0, 41)), self:LocalToWorldAngles(Angle(0,-90,-90)), 0.05)

		local w_bar = math.Clamp((540 / zyb.config.Cooler.WaterAmount) * water,0,540)

		if w_bar > self.c_Water then
			self.c_Water = self.c_Water + 100 * FrameTime()
			self.c_Water = math.Clamp(self.c_Water, 0, w_bar)
		else
			self.c_Water = self.c_Water - 50 * FrameTime()
			self.c_Water = math.Clamp(self.c_Water, w_bar, 540)
		end



		surface.SetDrawColor(zyb.default_colors["white01"])
		surface.SetMaterial(zyb.default_materials["barfront02bg"])
		surface.DrawTexturedRect(-190,510, 380, 560)

		if self.c_Water > 0 then
			draw.RoundedBox(0, -25, 520, 50, self.c_Water, self.c_WaterColor)
		end

		surface.SetDrawColor(zyb.default_colors["white03"])
		surface.SetMaterial(zyb.default_materials["barfront02fg"])
		surface.DrawTexturedRect(-200,500, 400, 580)

		surface.SetDrawColor(zyb.default_colors["orange03"])
		surface.SetMaterial(zyb.default_materials["barfront02"])
		surface.DrawTexturedRect(-200,500, 400, 580)


		surface.SetDrawColor(zyb.default_colors["white01"])
		surface.SetMaterial(zyb.default_materials["barfront02bg"])
		surface.DrawTexturedRect(-116,510, 380, 560)


		local s_bar = math.Clamp((540 / zyb.config.Cooler.YeastSteamAmount) * yeastSteam,0,540)
		self.c_Steam = self.c_Steam + 100 * FrameTime()
		self.c_Steam = math.Clamp(self.c_Steam, 0, s_bar)

		if self.c_Steam  > 0 then
			draw.RoundedBox(0, 50, 520, 50, self.c_Steam , zyb.default_colors["brown08"])
		end

		surface.SetDrawColor(zyb.default_colors["white03"])
		surface.SetMaterial(zyb.default_materials["barfront02fg"])
		surface.DrawTexturedRect(-125,500, 400, 580)

		surface.SetDrawColor(zyb.default_colors["orange03"])
		surface.SetMaterial(zyb.default_materials["barfront02"])
		surface.DrawTexturedRect(-126,500, 400, 580)




		surface.SetDrawColor(zyb.default_colors["white01"])
		surface.SetMaterial(zyb.default_materials["barfront02bg"])
		surface.DrawTexturedRect(-268,510, 380, 560)

		local m_bar = math.Clamp((540 / zyb.config.Cooler.WeakMoonshineStorage) * moonShine,0,540)
		self.c_MoonSine = self.c_MoonSine + 100 * FrameTime()
		self.c_MoonSine = math.Clamp(self.c_MoonSine, 0, m_bar)

		if self.c_MoonSine > 0 then
			draw.RoundedBox(0, -100, 520, 50, self.c_MoonSine, zyb.default_colors["brown02"])
		end


		surface.SetDrawColor(zyb.default_colors["white03"])
		surface.SetMaterial(zyb.default_materials["barfront02fg"])
		surface.DrawTexturedRect(-276,500, 400, 580)

		surface.SetDrawColor(zyb.default_colors["orange03"])
		surface.SetMaterial(zyb.default_materials["barfront02"])
		surface.DrawTexturedRect(-276,500, 400, 580)


	cam.End3D2D()
end

function ENT:DrawValveInfo()
	cam.Start3D2D(self:LocalToWorld(Vector(15, 0, 65)), self:LocalToWorldAngles(Angle(0,90,90)), 0.05)

		local text = zyb.language.General["ReleaseWater"]
		local bSize = zyb.f.GetTextSize(text,"zyb_barrel_font02")

		if self:OnWaterValve(LocalPlayer()) then
			draw.RoundedBox(20, -bSize / 2, -20, bSize, 80, zyb.default_colors["blue02"])
		else
			draw.RoundedBox(20, -bSize / 2, -20, bSize, 80, zyb.default_colors["grey02"])
		end

		draw.SimpleText(text, "zyb_barrel_font02", 0, -10, zyb.default_colors["white01"], TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
	cam.End3D2D()
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_distillery_cooler/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_yeastbeast/yb_distillery_cooler.mdl"
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Cooler"
ENT.Category = "Zeros YeastBeast"
ENT.RenderGroup = RENDERGROUP_BOTH

function ENT:SetupDataTables()
    self:NetworkVar("Int", 0, "YeastStewSteam")
    self:NetworkVar("Int", 1, "WeakMoonShine")
    self:NetworkVar("Int", 2, "Water")
    self:NetworkVar("Int", 3, "WaterTemperatur")
    self:NetworkVar("Bool", 0, "DeflowWater")

    if (SERVER) then
        self:SetYeastStewSteam(0)
        self:SetWeakMoonShine(0)
        self:SetWater(zyb.config.Cooler.WaterAmount / 2)
        self:SetWaterTemperatur(0)
        self:SetDeflowWater(false)

    end
end

function ENT:OnWaterValve(ply)
    local trace = ply:GetEyeTrace()

    if zyb.f.InDistance(self:LocalToWorld(Vector(15, 0, 60)), trace.HitPos, 15) then
        return true
    else
        return false
    end
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_water/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_yeastbeast/yb_water.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Cold Water"
ENT.Category = "Zeros YeastBeast"
ENT.RenderGroup = RENDERGROUP_TRANSLUCENT


function ENT:SetupDataTables()

    self:NetworkVar("Bool", 0, "Filling")

    if (SERVER) then
        self:SetFilling(false)
    end
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_yeastgrinder/shared.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/effects/arccw_incendiaryround.lua:
local images_muzzle = {"effects/muzzleflash1", "effects/muzzleflash2", "effects/muzzleflash3", "effects/muzzleflash4"}
local images_smoke = {"particle/smokesprites_0001", "particle/smokesprites_0002", "particle/smokesprites_0003", "particle/smokesprites_0004", "particle/smokesprites_0005", "particle/smokesprites_0006", "particle/smokesprites_0007", "particle/smokesprites_0008", "particle/smokesprites_0009", "particle/smokesprites_0010", "particle/smokesprites_0011", "particle/smokesprites_0012", "particle/smokesprites_0013", "particle/smokesprites_0014", "particle/smokesprites_0015", "particle/smokesprites_0016"}

local function TableRandomChoice(tbl)
    return tbl[math.random(#tbl)]
end

function EFFECT:Init(data)
    self.Origin = data:GetOrigin()

    local emitter = ParticleEmitter( self.Origin + Vector( 0, 0, 16 ) )

    for i = 0,3 do
        local particle = emitter:Add( TableRandomChoice(images_smoke) , self.Origin )
        local scol = math.Rand( 200, 225 )

        particle:SetVelocity( 50 * VectorRand() )
        particle:SetDieTime( math.Rand(0.2, 0.5) )
        particle:SetStartAlpha( 255 )
        particle:SetEndAlpha( 0 )
        particle:SetStartSize( math.Rand(20,30) )
        particle:SetEndSize( math.Rand(50,75) )
        particle:SetRoll( math.Rand(0,360) )
        particle:SetRollDelta( math.Rand(-1,1) )
        particle:SetColor( scol,scol,scol )
        particle:SetAirResistance( 100 )
        particle:SetGravity( Vector( math.Rand(-30,30) ,math.Rand(-30,30),math.Rand(10,40)) )
        particle:SetLighting( true )
        particle:SetCollide( true )
        particle:SetBounce( 0.5 )
    end

    local particle = emitter:Add( "sprites/heatwave", self.Origin )
        particle:SetAirResistance( 0 )
        particle:SetDieTime( 0.5 )
        particle:SetStartAlpha( 255 )
        particle:SetEndAlpha( 255 )
        particle:SetStartSize( 100 )
        particle:SetEndSize( 0 )
        particle:SetRoll( math.Rand(180,480) )
        particle:SetRollDelta( math.Rand(-5,5) )
        particle:SetColor( 255, 255, 255 )

    for i = 0, 2 do
        local fire = emitter:Add( TableRandomChoice(images_muzzle), self.Origin )
        fire:SetVelocity(VectorRand() * 100)
        fire:SetAirResistance( 0 )
        fire:SetDieTime( 0.25 )
        fire:SetStartAlpha( 255 )
        fire:SetEndAlpha( 0 )
        fire:SetEndSize( 0 )
        fire:SetStartSize( 50 )
        fire:SetRoll( math.Rand(180,480) )
        fire:SetRollDelta( math.Rand(-1,1) )
        fire:SetColor( 255, 255, 255 )
    end

    local light = DynamicLight(self:EntIndex())
    if (light) then
        light.Pos = self.Origin
        light.r = 255
        light.g = 206
        light.b = 122
        light.Brightness = 5
        light.Decay = 2500
        light.Size = 256
        light.DieTime = CurTime() + 0.1
    end

    emitter:Finish()

end

function EFFECT:Think()
    return false
end

function EFFECT:Render()
end
--addons/[binbon]arccw_modify/lua/effects/arccw_muzzleeffect.lua:
function EFFECT:Init(data)
    
end

function EFFECT:Think()
    return false
end

function EFFECT:Render()
    return false
end
--addons/oneprint/lua/oneprint/shared/player.lua:
return gluapack()()
--addons/oneprint/lua/oneprint/client/init.lua:
return gluapack()()
--addons/oneprint/lua/oneprint/client/vgui/derma.lua:
return gluapack()()