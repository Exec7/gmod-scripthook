--Stealed clientside server code by exechack.cc
--Hostname: [TR] Venom Roleplay | DarkRP #venom25 - discord.gg/eniyisi  - Part 5/12 - 06/04/2025


--PATH addons/advancedkillfeed/lua/includes/fix/killiconfix.lua:
return gluapack()()
--lua/zclib/util/sh_animation.lua:
return gluapack()()
--lua/zclib/util/sh_atracker.lua:
return gluapack()()
--lua/zclib/util/sh_draw.lua:
zclib = zclib or {}
zclib.util = zclib.util or {}

if CLIENT then
	function zclib.util.GetTextSize(txt,font)
		surface.SetFont(font)
		return surface.GetTextSize((txt or ""))
	end

	function zclib.util.FontSwitch(txt,len,font01,font02)
		if zclib.util.GetTextSize((txt or ""), font01) > len then
			return font02
		else
			return font01
		end
	end

	function zclib.util.DrawOutlinedBox(x, y, w, h, thickness, clr)
		surface.SetDrawColor(clr)

		for i = 0, thickness - 1 do
			surface.DrawOutlinedRect(x + i, y + i, w - i * 2, h - i * 2)
		end
	end

	function zclib.util.DrawBlur(p, a, d)
		local x, y = p:LocalToScreen(0, 0)

		surface.SetDrawColor(color_white)
		surface.SetMaterial(zclib.Materials.Get("blur"))

		for i = 1, d do
			zclib.Materials.Get("blur"):SetFloat("$blur", (i / d) * a)
			zclib.Materials.Get("blur"):Recompute()
			render.UpdateScreenEffectTexture()
			surface.DrawTexturedRect(x * -1, y * -1, ScrW(), ScrH())
		end
	end

	function zclib.util.DrawCircle( x, y, radius, seg )
		local cir = {}

		table.insert( cir, { x = x, y = y, u = 0.5, v = 0.5 } )
		for i = 0, seg do
			local a = math.rad( ( i / seg ) * -360 )
			table.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )
		end

		local a = math.rad( 0 )
		table.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )

		surface.DrawPoly( cir )
	end

	function zclib.util.DrawCircleAdv(x, y, ang, seg, p, rad, color)
		local cirle = {}

		table.insert(cirle, {
			x = x,
			y = y
		})

		for i = 0, seg do
			local a = math.rad((i / seg) * -p + ang)

			table.insert(cirle, {
				x = x + math.sin(a) * rad,
				y = y + math.cos(a) * rad
			})
		end

		surface.SetDrawColor(color)
		draw.NoTexture()
		surface.DrawPoly(cirle)
	end

	// Draws a nice little info box at the specified position
	local InfoBox_offset = Vector(-250,40)
	function zclib.util.DrawInfoBox(pos,data)
		local lenght = 0
	    local txt

	    if data.txt01 and string.len(data.txt01) > lenght then
	        lenght = string.len(data.txt01)
	        txt = data.txt01
	    end

	    if data.txt02 and string.len(data.txt02) > lenght then
	        lenght = string.len(data.txt02)
	        txt = data.txt02
	    end

	    if data.txt03 and string.len(data.txt03) > lenght then
	        lenght = string.len(data.txt03)
	        txt = data.txt03
	    end

	    local tw, _ = zclib.util.GetTextSize((txt or ""), zclib.GetFont("zclib_font_medium")) + 20 * zclib.wM
	    draw.RoundedBox(5, pos.x - (tw / 2) - (InfoBox_offset.x * zclib.wM), pos.y - (35 * zclib.hM) - (InfoBox_offset.y * zclib.hM), tw, 70 * zclib.hM, zclib.colors["black_a200"])

	    draw.SimpleText(data.txt01, zclib.GetFont("zclib_font_medium"), pos.x - (InfoBox_offset.x * zclib.wM), pos.y - (15 * zclib.hM) - (InfoBox_offset.y * zclib.hM), color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

	    if data.txt02 then
	        draw.SimpleText(data.txt02, zclib.GetFont("zclib_font_medium"), pos.x - (InfoBox_offset.x * zclib.wM), pos.y + (15 * zclib.hM) - (InfoBox_offset.y * zclib.hM), color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	    end

	    if data.txt03 then
	        draw.RoundedBox(5, pos.x + (tw / 2 + 10 * zclib.wM) - (InfoBox_offset.x * zclib.wM), pos.y - (20 * zclib.hM) - (InfoBox_offset.y * zclib.hM), 50 * zclib.wM, 40 * zclib.hM, zclib.colors["black_a200"])
	        draw.SimpleText(data.txt03, zclib.GetFont("zclib_font_medium"), pos.x - (InfoBox_offset.x * zclib.wM) + (tw / 2 + 10 * zclib.wM + 25 * zclib.wM), pos.y - (InfoBox_offset.y * zclib.hM), data.txt03_color or color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	    end

	    if data.bar_fract then
	        draw.RoundedBox(5, pos.x - (tw / 2) - (InfoBox_offset.x * zclib.wM), pos.y - (50 * zclib.hM) - (InfoBox_offset.y * zclib.hM), tw, 10 * zclib.hM, zclib.colors["black_a200"])
	        draw.RoundedBox(5, pos.x - (tw / 2) - (InfoBox_offset.x * zclib.wM), pos.y - (50 * zclib.hM) - (InfoBox_offset.y * zclib.hM), tw * data.bar_fract, 10 * zclib.hM, zclib.util.LerpColor(data.bar_fract, data.bar_col01, data.bar_col02))
	    end

	    surface.SetDrawColor(data.color)
	    surface.SetMaterial(zclib.Materials.Get("infopointer"))
	    surface.DrawTexturedRect(pos.x - 10 * zclib.wM, pos.y, zclib.wM * 350, zclib.hM * 50)
	end
end

function zclib.util.ColorToVector(col)
	return Vector((1 / 255) * col.r, (1 / 255) * col.g, (1 / 255) * col.b)
end

function zclib.util.VectorToColor(vec)
	return Color((255 / 1) * vec.x, (255 / 1) * vec.y, (255 / 1) * vec.z)
end

function zclib.util.LerpColor(t, c1, c2)
	local c3 = Color(0, 0, 0)
	c3.r = Lerp(t, c1.r, c2.r)
	c3.g = Lerp(t, c1.g, c2.g)
	c3.b = Lerp(t, c1.b, c2.b)
	c3.a = Lerp(t, c1.a, c2.a)
	return c3
end

--lua/zclib/util/sh_sounds.lua:
return gluapack()()
--lua/zclib/generic/sh_snapshoter.lua:
return gluapack()()
--lua/zclib/generic/cl_minimap.lua:
return gluapack()()
--lua/zclib/generic/cl_pointer.lua:
return gluapack()()
--lua/zclib/inventory/sh_inventory.lua:
zclib = zclib or {}
zclib.Inventory = zclib.Inventory or {}

zclib.InventoryCache = zclib.InventoryCache or {}
/*

    This inventory system does not get saved and is only used to temporarly store items

*/

function zclib.Inventory.Get(ent)
    //zclib.Debug("zclib.Inventory.Get")
    if not IsValid(ent) then return {} end
    return ent.zclib_inv or zclib.InventoryCache[ent:EntIndex()] or {}
end

function zclib.Inventory.CanPickup(class)

    // Does this entity class have a ItemDefinition?
    local allowed_item = zclib.ItemDefinition.IsAllowed(class)

    // Is this entity class in our allowed list?
    for _, allowed in ipairs(zclib.config.Inventory.AllowedItems) do
        if (class:find(allowed)) then
            allowed_item = true
        end
    end

    // Is this entity class banned for pickup?
    for _, banned in ipairs(zclib.config.Inventory.BannedItems) do
        if (class:find(banned)) then
            allowed_item = false
        end
    end

    return allowed_item == true
end

function zclib.Inventory.GetSlotData(ent,slot_id)
    //zclib.Debug("zclib.Inventory.GetSlotData")
    if slot_id == nil then return end
    if not IsValid(ent) then return end
    local inv = zclib.Inventory.Get(ent)
    return inv[slot_id]
end

function zclib.Inventory.SlotIsEmpty(ent,slot_id)
    local slot_data = zclib.Inventory.GetSlotData(ent,slot_id)
    if slot_data == nil then return true end
    return table.IsEmpty(slot_data)
end

function zclib.Inventory.GetAmount(ent,slot_id)
    local slot_data = zclib.Inventory.GetSlotData(ent,slot_id)
    if zclib.Inventory.SlotIsEmpty(ent,slot_id) then return 1 end
    return slot_data.Amount or 1
end

// Returns the first SlotID that has the specified entity class
function zclib.Inventory.FindByClass(ent,Class)
    local slot = false
    for k,v in pairs(zclib.Inventory.Get(ent)) do
        if v and v.Class == Class then
            slot = k
            break
        end
    end
    zclib.Debug("zclib.Inventory.FindItem " .. tostring(slot))
    return slot
end

// Returns the first free slot it can find
function zclib.Inventory.FindFreeSlot(ent)
    if not IsValid(ent) then return false end
    local slot = false
    for k,v in pairs(zclib.Inventory.Get(ent)) do
        if v and zclib.Inventory.SlotIsEmpty(ent,k) then
            slot = k
            break
        end
    end
    zclib.Debug("zclib.Inventory.FindFreeSlot " .. tostring(slot))
    return slot
end

function zclib.Inventory.GetEntityName(ItemEnt)
    local itemclass = ItemEnt:GetClass()

    if zclib.config.PredefinedNames[itemclass] then return zclib.config.PredefinedNames[itemclass] end

    // Is there a Item definition for that class and does it want to overwrite the name
    local DefinitionData = zclib.ItemDefinition.Get(itemclass)
    if DefinitionData and DefinitionData.Name then
        // The name can be defined as a function or as a string
        return isfunction(DefinitionData.Name) and DefinitionData.Name(ItemEnt) or DefinitionData.Name
    end

    if ItemEnt.Name then return ItemEnt.Name end

    if ItemEnt.PrintName then return ItemEnt.PrintName end

    if ItemEnt:IsWeapon() then
        local wep_list = list.Get( "Weapon" )
        if wep_list[itemclass] and wep_list[itemclass].PrintName then
            return wep_list[itemclass].PrintName
        end
    end

    return itemclass
end

/*
	Changes the entities appearance according to the defined values from the registrated item
*/
function zclib.Inventory.ApplyItemVisuals(ent,SlotData)
    if SlotData == nil then return end

    if SlotData.Health then
        ent:SetHealth(SlotData.Health)
    end

    ent:SetModel(zclib.ItemDefinition.GetModel(ent:GetClass(),SlotData))

    ent:SetSkin(zclib.ItemDefinition.GetSkin(ent:GetClass(),SlotData))

    ent:SetMaterial(zclib.ItemDefinition.GetMaterial(ent:GetClass(),SlotData))

    ent:SetColor(zclib.ItemDefinition.GetColor(ent:GetClass(),SlotData))

	for k, v in pairs(zclib.ItemDefinition.GetBodyGroups(ent:GetClass(),SlotData)) do
		ent:SetBodygroup(k, v)
	end
end


/*

    This system handels the throwing of the item

*/
// A list of entity classes which the player can throw a item to
zclib.Inventory.ThrowTargets = zclib.Inventory.ThrowTargets or {}
function zclib.Inventory.AddThrowTarget(class)
    zclib.Debug("zclib.Inventory.AddThrowTarget " .. class)
    zclib.Inventory.ThrowTargets[class] = true
end

function zclib.Inventory.IsThrowTarget(ent,from,SlotID)
    if zclib.Inventory.ThrowTargets[ent:GetClass()] == nil then return false end
    if ent.zclib_inv == nil then return false end

    // If the entity has a CanPickUp function then ask the entity if it wants this itemID
    if ent.CanPickUp then
        return ent:CanPickUp(from,SlotID)
    else
        return true
    end
end

function zclib.Inventory.GetThrowTime(from,to)
    local traveltime = from:Distance(to)
    traveltime = traveltime / 500
    return traveltime
end

if zclib.config.Inventory.PlayerInv then zclib.Inventory.AddThrowTarget("player") end

--lua/zclib/inventory/cl_inventory.lua:
return gluapack()()
--lua/autorun/anonymous_player_model.lua:
player_manager.AddValidModel( "Anonymous", "models/player/anonymous.mdl" )
player_manager.AddValidHands( "Anonymous", "models/player/anonymous_arms.mdl", 0, "00000000" ) 
list.Set( "PlayerOptionsModel",  "Anonymous", "models/player/anonymous.mdl" )

--addons/aphone/lua/aphone/_libs/_utilities/cl_changeanims.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/_utilities/cl_tdlib.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/banks/sh_bluesatm.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/banks/sh_chatm.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/gamemodes_related/sh_darkrp.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/gamemodes_related/sh_flux.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/painting/cl_rt.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/panels/cl_advancedphone_scroll.lua:
// Patch ScrollPanel with stencil
local SCROLL = FindMetaTable("Panel")

function SCROLL:aphone_PaintScroll()
	if self:GetName() != "DScrollPanel" then return end

	local vbar = self:GetVBar()
	vbar:SetWide(4)

	function vbar:Paint() end
	function vbar.btnUp:Paint() end
	function vbar.btnDown:Paint() end

	local s = self.OnMouseWheeled

	function self:OnMouseWheeled(delta)
		// s function return a value, so we return the same thing, also we use the result to check if we can put our cd or self is disabled ( Look into DVScrollBar )
		local return_val = s(self, delta)

		if s(self, delta) then
			vbar.btnGrip.aphone_BarCD = CurTime()
		end

		return return_val
	end

	function vbar.btnGrip:Paint(w, h)
		local a = CurTime() - (self.aphone_BarCD or 0) - 1
		if a > 0.5 then return end

		draw.RoundedBox(w / 2, 0, 0, w, h, Color(255, 255, 255, a < 0 and 255 or (1 - a * 2) * 255))
	end
	self:aphone_RemoveCursor()
end
--addons/aphone/lua/aphone/_libs/panels/cl_circleavatar.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/panels/cl_msg.lua:
return gluapack()()
--addons/aphone/lua/aphone/apps/bank/cl_main.lua:
return gluapack()()
--addons/aphone/lua/aphone/apps/weather/cl_main.lua:
local APP = {}

APP.name = "Weather"
APP.icon = "akulla/aphone/app_weather.png"

local day = Material("akulla/aphone/after_noon.jpg")
local night = Material("akulla/aphone/night.jpg")
local rainy = Material("akulla/aphone/rainy.jpg")

function APP:ShowCondition()
	return tobool(StormFox or StormFox2)
end

function APP:Open(main, main_x, main_y)
	local c_w = aphone:Color("Text_White")
	local c_w120 = aphone:Color("Text_White120")
	local header = aphone:GetFont("Roboto40")
	local big = aphone:GetFont("Roboto80")
	local space = aphone.GUI.ScaledSizeY(45)

	function main:Paint(w,h)
		if (StormFox2 and StormFox2.Weather.IsRaining()) or (StormFox and StormFox.IsRaining()) then
			surface.SetMaterial(rainy)
		elseif (StormFox2 and StormFox2.Time.IsDay()) or (StormFox and StormFox.IsDay()) then
			surface.SetMaterial(day)
		else
			surface.SetMaterial(night)
		end

		surface.SetDrawColor(color_white)
		surface.DrawTexturedRect(0, 0, w, h)

		draw.SimpleText(StormFox2 and StormFox2.Weather.GetDescription() or StormFox.GetWeather(), header, main_x / 2, main_y * 0.08, c_w, 1, 1)
		draw.SimpleText(StormFox2 and StormFox2.Time.GetDisplay() or StormFox.GetRealTime(StormFox.GetTime()), header, main_x / 2, main_y * 0.08 + space, c_w120, 1, 1)

		surface.SetFont(big)
		draw.SimpleText(math.Round(StormFox2 and StormFox2.Temperature.Get() or StormFox.GetTemperature(false)) .. "°", big, main_x / 2 + select(1, surface.GetTextSize("°")) / 2, main_y * 0.28, color_white, 1, 1)
	end
	main:aphone_RemoveCursor()
end

aphone.RegisterApp(APP)
--lua/arccw/shared/attachments/mw2_akimbo_deagle.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_akimbo_glock17.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_akimbo_m9.lua:
att.PrintName = "M9"
att.Icon = Material("entities/acwatt_mw2_akimbo.png", "smooth")
att.Description = "Wholy."
att.Hidden = false
att.Desc_Pros = {
    "+100% more gun",
}
att.Desc_Cons = {
    "- Cannot use ironsights"
}
att.Desc_Neutrals = {
    "Don't toggle the UBGL"
}
att.AutoStats = true
att.Mult_HipDispersion = 4
att.Slot = "akimbotest"

att.GivesFlags = {"cantuseshitinakimboyet"}

att.SortOrder = 1738

att.AddSuffix = " + M9"

att.MountPositionOverride = 0

att.Model = "models/weapons/arccw/fesiugmw2/akimbo/c_beretta_left_4.mdl"

att.LHIK = true
att.LHIK_Animation = true
att.LHIK_MovementMult = 0

att.UBGL = true

att.UBGL_PrintName = "AKIMBO"
att.UBGL_Automatic = false
att.UBGL_MuzzleEffect = "muzzleflash_4"
att.UBGL_ClipSize = 15
att.UBGL_Ammo = "pistol"
att.UBGL_RPM = 60 / 0.079
att.UBGL_Recoil = .45
att.UBGL_RecoilSide = .55
att.UBGL_RecoilRise = .25
att.UBGL_Capacity = 15

att.Hook_ShouldNotSight = function(wep)
    return true
end

local function Ammo(wep)
    return wep.Owner:GetAmmoCount("pistol") -- att.UBGL_Ammo
end

att.Hook_Think = function(wep)
    if wep:GetMW2Masterkey_ShellInsertTime() < CurTime() and wep:GetMW2Masterkey_ShellInsertTime() != 0 then
        wep:SetMW2Masterkey_ShellInsertTime(0)
        local clip = 15
        if wep:Clip2() >= clip then return end
        if Ammo(wep) <= 0 then return end

        local reserve = Ammo(wep)
        reserve = reserve + wep:Clip2()
        local load = math.Clamp(clip, 0, reserve)
        wep.Owner:SetAmmo(reserve - load, "pistol")
        wep:SetClip2(load)
    end

    if !IsFirstTimePredicted() then return end
    if wep:GetOwner():KeyPressed(IN_RELOAD) then
        wep:SetInUBGL(false)
        wep:ReloadUBGL()
    elseif wep:GetOwner():KeyPressed(IN_ATTACK) then
        wep:SetInUBGL(false)
    elseif wep:GetOwner():KeyPressed(IN_ATTACK2) then
        wep:SetInUBGL(true)
        wep:ShootUBGL()
    end
end

local awesomelist = {
    ["sprint_in_akimbo_right"] = {
        time = 10/30,
        anim = "sprint_in",
    },
    ["sprint_out_akimbo_right"] = {
        time = 10/30,
        anim = "sprint_out",
    },
    ["sprint_loop_akimbo_right"] = {
        time = 30/40,
        anim = "sprint_loop",
    },
    ["pullout_akimbo_right"] = {
        time = 26/30 /4,
        anim = "pullout",
    },
    ["putaway_akimbo_right"] = {
        time = 26/30 /4,
        anim = "putaway",
    },
}

att.Hook_TranslateSequence = function(wep, anim)
    if awesomelist[anim] then
        local bab = awesomelist[anim]
        wep:DoLHIKAnimation(bab.anim, bab.time)
    end
end

att.Hook_LHIK_TranslateAnimation = function(wep, anim)
    if anim == "idle" and wep:Clip2() <= 0 then
        return "idle_empty"
    end
end

att.UBGL_Fire = function(wep, ubgl)
    if wep:Clip2() <= 0 then return end

    -- this bitch
    local fixedcone = wep:GetDispersion() / 360 / 60

    wep.Owner:FireBullets({
		Src = wep.Owner:EyePos(),
		Num = 1,
		Damage = 40,
		Force = 1,
		Attacker = wep.Owner,
		Dir = wep.Owner:EyeAngles():Forward(),
		Spread = Vector(fixedcone, fixedcone, 0),
		Callback = function(_, tr, dmg)
			local dist = (tr.HitPos - tr.StartPos):Length() * ArcCW.HUToM

			local dmgmax = 40
			local dmgmin = 20

			local delta = dist / 800 * 0.025

			delta = math.Clamp(delta, 0, 1)

			local amt = Lerp(delta, dmgmax, dmgmin)

			dmg:SetDamage(amt)
		end
	})
    wep:EmitSound("weapons/fesiugmw2/fire/m9.wav", 110, 100 * math.Rand(1 - 0.05, 1 + 0.05))
                            -- This is kinda important
                                            -- Wep volume
                                                    -- Weapon pitch (along with the pitch randomizer)




    wep:SetClip2(wep:Clip2() - 1)
    
    if wep:Clip2() > 0 then
        wep:DoLHIKAnimation("fire", 6/30)
    else
        wep:DoLHIKAnimation("fire_last", 6/30)
    end

    wep:DoEffects()
end

att.UBGL_Reload = function(wep, ubgl)
        if wep:Clip2() >= 15 then return end
        if Ammo(wep) <= 0 then return end

    wep:SetInUBGL(false)
    wep:Reload()

    if wep:Clip2() <= 0 then
        wep:DoLHIKAnimation("reload_empty", 89/40)
        wep:SetNextSecondaryFire(CurTime() + 89/40)
        wep:SetMW2Masterkey_ShellInsertTime(CurTime() + 1.2)
        wep:PlaySoundTable({
            {s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipout_v2.wav", 	t = 4/40},
            {s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipin_v2.wav",  	t = 42/40},
            {s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_chamber_v2.wav", 	t = 67/40},
        })
    else
        wep:DoLHIKAnimation("reload", 70/40)
        wep:SetNextSecondaryFire(CurTime() + 70/40)
        wep:SetMW2Masterkey_ShellInsertTime(CurTime() + 1.2)
        wep:PlaySoundTable({
            {s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipout_v2.wav", 	t = 4/40},
            {s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipin_v2.wav", 	    t = 36/40},
        })
    end
end

att.Hook_GetHUDData = function( wep, data )
    if ArcCW:ShouldDrawHUDElement("CHudAmmo") then
        data.clip = wep:Clip2() .. " / " .. wep:Clip1()
    else
        data.clip = wep:Clip1() + wep:Clip2()
    end
    data.ubgl = nil
    return data
end
--lua/arccw/shared/attachments/mw2_wepcamo_blackout.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_wepcamo_desert.lua:
att.PrintName = "Desert"
att.Icon = Material("entities/mw2_wepcamo_desert.png", "smooth"
)
att.Description = "Tan desert camouflage finish."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Slot = "mw2_wepcamo"
att.Free = true

att.ActivateElements = {"wepcamo-desert"}

att.SortOrder = 1 *-1
--lua/arccw/shared/attachments/optic_mw2_holographic.lua:
att.PrintName = "Holographic Sight (HOLO)"
att.Icon = Material("entities/acwatt_optic_mw2_eotech.png", "smooth")
att.Description = "Boxy holographic sight used by special forces."

att.SortOrder = 0.5

att.Desc_Pros = {
    "autostat.holosight",
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"optic","optic_lp"}

att.Model = "models/weapons/arccw/fesiugmw2/atts/scopes/eotech_1.mdl"
att.ModelOffset = Vector(-1, 0, -0.1)

att.AdditionalSights = {
    {
        Pos = Vector(0, 3, -1.16),
        Ang = Angle(0, 0, 0),
        ViewModelFOV = 65 / 1.3,
        Magnification = 1.3,
        ScrollFunc = ArcCW.SCROLL_NONE,
        IgnoreExtra = true,
    }
}

att.Holosight = true
att.HolosightReticle = Material("holosights/mw2_holo.png", "mips smooth")
att.HolosightFlare = Material("holosights/mw2_holo_flare.png", "mips smooth")
att.HolosightSize = 0.7
att.HolosightBone = "holosight"

att.Mult_SightTime = 1.075

att.Colorable = true

att.AddSuffix = " Holographic"
--lua/arccw/shared/attachments/uc_40mm_dummy.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_40mm_smoke.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ammo_jsp.lua:
att.PrintName = "\"JSP\" Jacketed Soft-point Rounds"
att.AbbrevName = "\"JSP\" Jacketed Soft-point"

att.SortOrder = 3
att.Icon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth")
att.Description = "Bullets with an exposed lead tip that expands on impact.\nIncreases wounding potential while maintaining an aerodynamic profile."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_ammo"

att.AutoStats = true

att.Mult_Penetration = 0.6
--att.Mult_Damage = 1.1
att.Mult_Range = 0.8
att.Mult_RangeMin = 1.8

att.Hook_Compatible = function(wep)
    if wep:GetIsShotgun() then
        return false
    end
end
--lua/arccw/shared/attachments/uc_ammo_tr.lua:
att.PrintName = "\"TR\" Tracer Rounds"
att.AbbrevName = "\"TR\" Tracer"

att.SortOrder = 1
att.Icon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth")
att.Description = "A pyrotechnic charge inside the bullet creates a bright, colorful trail behind it during flight. The bright trails can help the shooter predict ballistic trajectories without using sights."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.tracer"
}
att.Desc_Neutrals = {
}
att.Slot = "uc_ammo"

att.AutoStats = true

att.Mult_HipDispersion = 0.85

att.ToggleStats = {
    {
        PrintName = "Green",
        Override_PhysTracerProfile = "uc_tracer_g"
    },
    {
        PrintName = "Red",
        Override_PhysTracerProfile = "uc_tracer_r"
    },
    {
        PrintName = "White",
        Override_PhysTracerProfile = "uc_tracer_w"
    },
}
att.Override_Tracer = "arccw_uc_tracer"

att.Hook_Compatible = function(wep)
    if wep:GetIsShotgun() then
        return false
    end
end
--lua/arccw/shared/attachments/uc_charm_urbancharm_decay.lua:
att.PrintName = "Urban Charm - Decay"
att.Description = "The icon of a Garry's Mod addon."

att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = "charm"

att.Free = true

att.Model = "models/weapons/arccw/atts/charmbase.mdl"

att.DroppedModel = "models/Items/BoxSRounds.mdl"

att.Charm = true
att.CharmModel = "models/weapons/arccw/atts/uc_urbancharm.mdl"
att.CharmAtt = "Charm"
att.CharmScale = Vector(0.5, 0.5, 0.5)
att.CharmOffset = Vector(0, -1.1, -0.2)
att.CharmAngle = Angle(20, 0, 80)
att.CharmSkin = 1

--lua/arccw/shared/attachments/uc_choke_cyl.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_fg_autotrigger.lua:
att.PrintName = "Forced Reset Trigger"

att.Icon = Material("entities/att/arccw_uc_forcedresettrigger.png", "mips smooth")
att.Description = "Trigger system that pushes back against the shooter's finger, allowing them to fire much more rapidly. By the definition of the ATF, this does not count as full-automatic, for the time being at least."
att.Desc_Pros = {
    "uc.auto"
}
att.Desc_Cons = {
    "uc.frcd_visrec"
}
att.Desc_Neutrals = {
}
att.Slot = "uc_fg"
att.AutoStats = true
att.SortOrder = 2

att.Hook_Compatible = function(wep)
    if wep:GetIsManualAction() or wep.TriggerDelay then return false end

    -- for i, v in pairs(wep.Firemodes) do
    --     if !v then continue end
    --     if !v.Mode then continue end
    --     if v.Mode == 2 then
    --         -- Not available if gun has automatic firemode
    --         return false
    --     -- elseif v.Mode < 0 then
    --     --     -- Use burst variant
    --     --     return false
    --     end
    -- end
end

att.Override_Firemodes_Priority = 100
att.Override_Firemodes = {
    {
        PrintName = "fcg.frcd",
        Mode = 2,
    },
    {
        Mode = 0
    }
}

--att.Mult_RPM = 1.25
att.Mult_RecoilSide = 1.25
att.Mult_VisualRecoilMult = 2
att.Mult_MalfunctionMean = .85

att.AttachSound = "arccw_uc/common/gunsmith/internal_modification.ogg"

att.ExcludeFlags = {"needsmanual"}
--lua/arccw/shared/attachments/uc_fg_light.lua:
att.PrintName = "Light Bolt"

att.Icon = Material("entities/att/arccw_uc_lightbolt.png", "mips smooth")
att.Description = "A low weight set of bolt components increase the cyclic speed of the weapon at the cost of recoil absorption."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_fg"
att.AutoStats = true
att.SortOrder = 3

att.Mult_Recoil = 1.25
att.Mult_RPM = 1.1
att.Mult_CycleTime = 0.9

--[[]
att.Hook_Compatible = function(wep)
    if wep:GetIsManualAction() then
        return false
    end
end
]]

att.AttachSound = "arccw_uc/common/gunsmith/internal_modification.ogg"
--lua/arccw/shared/attachments/uc_fg_slamfire.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_muzzle_supp_tgpa.lua:
att.PrintName = "TGP-A Suppressor"

att.Icon = Material("entities/att/acwatt_uc_muzzle_supp_tgpa.png", "mips smooth")
att.Description = "Traps propellant gas from the muzzle, reducing visual and audible report.\nWell rounded suppressor with no notable downsides."
att.Desc_Neutrals = {"uc.exclusive.545", "uc.supptail"}

att.AutoStats = true
att.Slot = {"ur_ak_muzzle"}

att.SortOrder = 149

att.Model = "models/weapons/arccw/atts/uc_tgpa.mdl"
att.ModelOffset = Vector(2.6, 0, 0)
att.ModelScale = Vector(1.15, 1.15, 1.15)
att.OffsetAng = Angle(0, 0, 0)

att.Silencer = true
att.Override_MuzzleEffect = "muzzleflash_suppressed"
att.IsMuzzleDevice = true

att.Mult_ShootPitch = 1.1
att.Mult_ShootVol = 0.75

att.Add_BarrelLength = 5
att.Mult_Range = 0.9
att.Mult_SightTime = 1.07
att.Mult_Sway = 1.15

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"

att.Hook_Compatible = function(wep)
    if wep:GetBuff_Override("Override_Ammo", wep.Primary.Ammo) != "smg1" then
        return false
    end
end

att.Hook_GetDistantShootSound = function(wep, distancesound)
    if wep:GetBuff("PhysBulletMuzzleVelocity") < ArcCW.UC.SubsonicThreshold then
        return false
    end
end
--lua/arccw/shared/attachments/uc_optic_hamr.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_optic_hamr.lua:
att.PrintName = "Leupold Mark 4 High Accuracy Multi-Range Riflescope (3x/HOLO)"
att.AbbrevName = "HAMR (3x/HOLO)"
att.Icon = Material("entities/att/acwatt_uc_optic_hamr.png", "mips smooth")
att.Description = "Top-of-the-line magnified combat optic with an integral DeltaPoint.\nThough it is moderately heavy, a skilled operator will be able to make use of it at every typical engagement distance."

att.SortOrder = 3

att.Desc_Pros = {
    "autostat.holosight",
    "autostat.zoom",
}
att.Desc_Neutrals = {"uc.bus"}

att.AutoStats = true
att.Slot = {"optic", "ud_optic", "ud_acog"}

att.Model = "models/weapons/arccw/atts/uc_gso_hamr.mdl"
att.ModelOffset = Vector(0, 0, -0.1)
att.ModelScale = Vector(1, 1, 1)
att.OffsetAng = Angle(0, 0, 0)

att.AdditionalSights = {
    {
        Pos = Vector(0, 8, -1.43),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        ViewModelFOV = 38,
        IgnoreExtra = true,
        CrosshairInSights = false,
        HolosightBone = "holosight",
        HolosightData = {
            Holosight = true,
            HolosightReticle = Material("hud/scopes/uc_hamr.png", "smooth"),
            HolosightNoFlare = true,
            HolosightSize = 11.5,
            HolosightPiece = "models/weapons/arccw/atts/uc_gso_hamr_hsp.mdl",
            HolosightBlackbox = true,
            HolosightMagnification = UC_HalfScope( 3 ),
            Colorable = true,
        },
    },
    {
        Pos = Vector(0, 8, -2.84738),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        IgnoreExtra = true,
        HolosightData = {
            Holosight = true,
            HolosightReticle = Material("hud/reticles/uc_reddot.png", "mips smooth"),
            HolosightSize = 2,
            Colorable = true,
        },
    },
}

att.Colorable = true
att.HolosightPiece = "models/weapons/arccw/atts/uc_gso_hamr_hsp.mdl"

att.Mult_SightedSpeedMult = 0.75
att.Mult_SightTime = 1.1

--lua/arccw/shared/attachments/uc_optic_kobra.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_optic_vortex_3x.lua:
att.PrintName = "Vortex SPITFIRE PRISM SCOPE (1.5x)"
att.AbbrevName = "Spitfire (1.5x)"
att.Icon = Material("entities/att/acwatt_uc_optic_vortex_3x.png", "mips smooth")
att.Description = "Short to medium range combat scope that allows a more versatile engagement range."

att.SortOrder = 1.5

att.Desc_Pros = {
    "autostat.holosight",
    "autostat.zoom",
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"optic"}

att.Model = "models/weapons/arccw/atts/uc_vortex3x.mdl"
att.ModelOffset = Vector(0, 0, 0.18)

att.AdditionalSights = {
    {
        Pos = Vector(0, 8.5, -1.6),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        ScrollFunc = ArcCW.SCROLL_ZOOM,
        ScopeMagnification = UC_HalfScope( 1.5 ),
        HolosightData = {
            Holosight = true,
            HolosightReticle = Material("hud/scopes/uc_vortex_reticle.png", "mips smooth"),
            HolosightNoFlare = true,
            HolosightSize = 8.5,
            HolosightPiece = "models/weapons/arccw/atts/uc_vortex3x_hsp.mdl",
            HolosightBlackbox = true,
            HolosightMagnification = UC_HalfScope( 1.5 ),
            Colorable = true,
        },
    }
}

-- att.Holosight = true
-- att.HolosightReticle = Material("mifl_tarkov_reticle/dot.png", "mips smooth")

att.HolosightPiece = "models/weapons/arccw/atts/uc_vortex3x_hsp.mdl"
-- att.HolosightNoFlare = true
-- att.HolosightSize = 1
-- att.HolosightBone = "holosight"
att.Colorable = true

att.Mult_SightedSpeedMult = .8
--lua/arccw/shared/attachments/uc_tac_anpeq2_tan.lua:
att.PrintName = "Insight Technologies ATPIAL AN/PEQ-2 (Tan)"
att.AbbrevName = "AN/PEQ-2 (Tan)"
att.Icon = Material("entities/att/acwatt_uc_tac_anpeq2_tan.png", "mips smooth")
att.Description = "Large flashlight and laser module for rifles, with a stronger, more effective laser that also aids target acquisition.\nThe laser and flashlight can be toggled individually.\nThis unit is cosmetically colored tan."
att.Desc_Pros = {
    "uc.light"
}
att.Desc_Cons = {
    "con.light"
}
att.Desc_Neutrals = {}
att.AutoStats = true

att.Slot = {"tac"}
att.SortOrder = 20+1

att.Model = "models/weapons/arccw/atts/uc_anpeq2.mdl"
att.ModelOffset = Vector(0, 0.01, 0.35)
att.OffsetAng = Angle(0, 0,180)
att.ModelScale = Vector(1.2, 1.2, 1.2)
att.Laser = false
att.LaserStrength = 3.5 / 5
att.LaserBone = "laser"

att.ColorOptionsTable = {Color(255, 0, 0, 150)}

att.Mult_SightTime = 1.1
att.Mult_SightedSpeedMult = 0.9
att.Mult_MoveSpeed = 1

att.Flashlight = false
att.FlashlightFOV = 50
att.FlashlightFarZ = 512 -- how far it goes
att.FlashlightNearZ = 1 -- how far away it starts
att.FlashlightAttenuationType = ArcCW.FLASH_ATT_LINEAR -- LINEAR, CONSTANT, QUADRATIC are available
att.FlashlightColor = Color(255, 235, 229)
att.FlashlightTexture = "effects/flashlight001"
att.FlashlightBrightness = 2
att.FlashlightBone = "laser"

att.ToggleStats = {
    {
        PrintName = "Laser",
        Laser = true,
        Mult_HipDispersion = 0.7,
        Mult_MoveDispersion = 0.8,
        Mult_SightTime = .9,
        Mult_SightedSpeedMult = .75
    },
    {
        PrintName = "Both",
        Laser = true,
        Flashlight = true,
        Mult_HipDispersion = 0.7,
        Mult_MoveDispersion = 0.8,
        Mult_SightTime = .9,
        Mult_SightedSpeedMult = .75
    },
    {
        PrintName = "Light",
        Flashlight = true,
    },
    {
        PrintName = "Off",
    }
}
--lua/arccw/shared/attachments/uc_tp_quickdraw.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tp_quickdraw.lua:
att.PrintName = "Quick Draw"

att.Icon = Material("entities/att/arccw_uc_tp_quickdraw.png", "smooth mips")
att.Description = "Like the fastest guns in the Old West, you can draw, aim, and shoot in the blink of an eye.\n\nTexas Red had not cleared leather 'fore a bullet fairly ripped, and the Ranger's aim was deadly with the big iron on his hip."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_tp"

att.AutoStats = true
att.SortOrder = 5

att.Mult_DrawTime = 0.5
att.Mult_SightTime = 0.85

att.NotForNPCs = true
--lua/arccw/shared/attachments/uc_usp_cal_9mm.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_usp_skin_blued.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_usp_slide_cs.lua:
att.PrintName = "5\" K&M .45 Op. CS Slide"
att.AbbrevName = "5\" Op. CS Slide"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "5\" USP Op. CS Slide"
end

att.Icon = Material("entities/att/acwatt_uc_usp_slide_cs.png", "smooth mips")
att.Description = "International contract slide with an ejection port on the left.\nGold-Sorcery™ makes it more precise when a suppressor is threaded onto the barrel, and allows the bullet to exert more force into brain tissue.\nThe extensive additions slow down firing registration, increasing the time required to cycle."
att.Desc_Pros = {
    "uc.usp.cs.1",
    "uc.usp.cs.2"
}
att.Desc_Cons = {
}
att.AutoStats = true 
att.SortOrder = 5
att.Slot = "uc_usp_slide"

att.A_Hook_Add_AccuracyMOA = function(wep,data)
    if data and wep:GetBuff_Override("Silencer") then
        data.add = data.add - 2
    end
end

att.Hook_BulletHit = function(wep,data)
    if SERVER and data.tr and data.tr.HitGroup == HITGROUP_HEAD then
        data.damage = data.damage * 1.25
    end
end

att.Mult_RPM = .75
--lua/arccw/shared/attachments/ud_870_stock_poly.lua:
att.PrintName = "Express-12 Polymer Stock"
att.AbbrevName = "Polymer Stock"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Remington 870 Polymer Stock"
end

att.Icon = Material("entities/att/acwatt_ud_870_stock.png", "smooth mips")
att.Description = "Lightweight polymer stock."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_870_stock"

att.AutoStats = true

att.Mult_SightedSpeedMult = 1.1
att.Mult_SightTime = 0.9
att.Mult_Recoil = 1.15

att.ActivateElements = {"ud_870_stock_poly"}
--lua/arccw/shared/attachments/ud_glock_caliber_10auto.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_frame_subcompact.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_mag_altanim.lua:
att.PrintName = "Slide Pull Reload"
att.Icon = Material("entities/att/acwatt_ud_glock_mag_17.png", "smooth mips")
att.Description = "Slide releases are overrated."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
    "ud.glock.altanim"
}

att.Slot = "ud_glock_mag"
att.SortOrder = 999
att.Free = true
att.IgnorePickX = true


att.Hook_SelectReloadAnimation = function(wep, anim)
    if anim == "reload_empty" then
        return "reload_empty_fesiug"
    end
end
--lua/arccw/shared/attachments/ud_glock_muzzle_kkm.lua:
att.PrintName = "KKM Precision Compensator"
att.AbbrevName = "KKM Compensator"
att.Icon = Material("entities/att/kkm.png", "mips smooth")
att.Description = "Weapon-exclusive compensator that redirects propellant gasses to reduce weapon recoil.\nHighly effective, but reduces weapon cyclic rate."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.AutoStats = true
att.AutoStats = true
att.Slot = {"ud_glock_muzzle"}
-- att.Slot = {"muzzle"}

att.SortOrder = 500

att.Model = "models/weapons/arccw/atts/uc_kkm_brake.mdl"
att.ModelOffset = Vector(0.07, 0, 0.165)
att.ModelScale = Vector(1.25, 1.25, 1.25)
att.OffsetAng = Angle(0, 0, 0)

att.IsMuzzleDevice = true

att.Mult_Recoil = 0.7
att.Mult_RecoilSide = 0.8

att.Add_BarrelLength = 2
att.Mult_SightTime = 1.1
att.Mult_Sway = 1.15
att.Mult_RPM = 0.85
att.Mult_ShootVol = 1.2

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"

--lua/arccw/shared/attachments/ud_glock_slide_lb.lua:
att.PrintName = "GEN3L Long Slide"
att.AbbrevName = "Long Slide"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Glock 17L Long Slide"
end

att.Icon = Material("entities/att/acwatt_ud_glock_slide_lb.png", "smooth mips")
att.Description = "A somewhat uncommon long polymer slide.\nThe longer barrel improves precision but is awkward to handle."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_glock_slide"

att.AutoStats = true

att.Mult_DrawTime = 1.15
att.Mult_HolsterTime = 1.15
att.Add_BarrelLength = 4

att.Mult_Sway = 1.25
att.Mult_HipDispersion = 1.15
att.Mult_SightTime = 1.1

att.Mult_PhysBulletMuzzleVelocity = 1.1

att.Mult_AccuracyMOA = 0.85
att.Mult_Recoil = 0.85
att.Mult_Range = 1.25

att.ActivateElements = {"ud_glock_slide_lb"}
--lua/arccw/shared/attachments/ud_glock_slide_nytesyte.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_fs_3d.lua:
att.PrintName = "3D Low Profile Front Sight"
att.AbbrevName = "3D Front Sight"
att.Icon = Material("entities/att/acwatt_ud_m16_fs_3d.png", "mips smooth")
att.Description = [[A 3d-printed front sight for picatinny rails. You probably want the matching rear sight as well.]]
att.Desc_Neutrals = {"uc.cosmetic"}
att.SortOrder = 1
att.IgnorePickX = true

att.Model = "models/weapons/arccw/atts/3d_fs.mdl"
att.ModelScale = Vector(0.7, 0.7, 0.7)
att.Slot = {"ud_m16_fs"}
att.RequireFlags = {"ud_m16_rscompatible"}
att.GivesFlags = {"ud_m16_rs"}
att.Ignore = false

att.FrontSight = 1
--lua/arccw/shared/attachments/ud_m16_fs_sig.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_grip_skel.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_hg_a1.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_hg_fpw.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_mag_usas_20.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_receiver_50beo.lua:
att.PrintName = "AMCAR-NG .50 Beowulf Upper Receiver"
att.AbbrevName = ".50 Beowulf Upper"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "AR-15 .50 Beowulf Upper Receiver"
end

att.SortOrder = -1
att.Icon = Material("entities/att/uc_bullets/50beowulf.png", "smooth mips")
att.Description = "Semi-automatic receiver chambered in .50 Beowulf, a gigantic short-range cartridge with terrible ballistic performance. It can load single-stack into standard AR-15 magazines at a lower capacity.\nThe rifle is unable to handle the massive pressure at anything more than semi-automatic fire."
att.Desc_Pros = {}
att.Desc_Cons = {
    "ud.m16.50beo",
    "uc.semionly",
}
att.Desc_Neutrals = {}
att.Slot = "ud_m16_receiver"

att.AutoStats = true
att.HideIfBlocked = true

att.SortOrder = 1

att.Override_ClipSize = 7
att.Override_ClipSize_Priority = 0.5
att.BaseClipSize = 7

att.Mult_Damage = ArcCW.UC.CalConv("556", "50beo", "max")
att.Mult_DamageMin = ArcCW.UC.CalConv("556", "50beo", "min")
att.Mult_Penetration = ArcCW.UC.CalConv("556", "50beo", "pen")

att.Mult_Recoil = 3
att.Mult_RecoilSide = 2
att.Mult_VisualRecoilMult = 2
att.Mult_RPM = 0.5
att.Mult_Range = 0.25
att.Mult_ShootVol = 1.2

att.Mult_SightTime = 0.91
att.Mult_ReloadTime = 0.87
att.Mult_Sway = 0.667

att.Mult_SpeedMult = 1.025

att.Override_PhysBulletMuzzleVelocity = 550

-- att.Mult_HeatCapacity = 0.25
-- att.Mult_HeatDissipation = 0.25

-- yes, .50 beowulf is more of an huge magnum bullet than it is a rifle bullet
att.Override_Ammo = "357"
att.Override_Trivia_Calibre = ".50 Beowulf"
att.AddSuffix = " .50"
att.Override_ShellModel = "models/weapons/arccw/uc_shells/50beo.mdl"
att.Override_ShellScale = 1
att.Override_ShellSounds = ArcCW.PistolShellSoundsTable

att.Override_Firemodes_Priority = 0.5
att.Override_Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

local path = "weapons/arccw_ud/m16/"

att.Hook_GetShootSound = function(wep, sound) -- Temporary
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return {
            path .. "fire-50-01.ogg",
            path .. "fire-50-02.ogg",
            path .. "fire-50-03.ogg",
            path .. "fire-50-04.ogg",
            path .. "fire-50-05.ogg",
            path .. "fire-50-06.ogg"
        }
    end
end

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return { 
            path .. "fire-50-dist-01.ogg",
            path .. "fire-50-dist-02.ogg",
            path .. "fire-50-dist-03.ogg",
            path .. "fire-50-dist-04.ogg",
            path .. "fire-50-dist-05.ogg",
            path .. "fire-50-dist-06.ogg"
        }
    end
end

-- can't be handled here
--att.ActivateElements = {"ud_m16_mag_50beo"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    if wep.Attachments[9].Installed == nil then
        return anim .. "_20"
    end
end

local slotinfo = {
    [6] = {".50 Beowulf Lower", ".50 Beowulf Lower", Material("entities/att/acwatt_ud_m16_receiver_semi.png", "smooth mips")},
    [11] = {"7-Round Mag", "7-Round Mag", Material("entities/att/acwatt_ud_m16_mag_15.png", "smooth mips")},
}
att.Hook_GetDefaultAttName = function(wep, slot)
    if slotinfo[slot] then
        return GetConVar("arccw_truenames"):GetBool() and slotinfo[slot][2] or slotinfo[slot][1]
    end
end
att.Hook_GetDefaultAttIcon = function(wep, slot)
    if slotinfo[slot] then
        return slotinfo[slot][3]
    end
end

att.Override_Trivia_Class = "Semi-Automatic Rifle"


att.GivesFlags = {"m16_50beo", "m16_nolower"}
--lua/arccw/shared/attachments/ud_m16_receiver_9mm.lua:
att.PrintName = "AMPAW-9 9x19mm Upper Receiver"
att.AbbrevName = "9x19mm Upper"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "R0635 9x19mm Upper Receiver"
end

att.Icon = Material("entities/att/uc_bullets/9x19.png", "smooth mips")
att.Description = "A converted receiver that fires 9x19mm Parabellum rounds. The smaller caliber drastically reduces recoil, but has much less range and is less accurate."
att.Desc_Pros = {
    --"uc.auto",
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_m16_receiver"
att.SortOrder = -10

att.AutoStats = true
att.SortOrder = 3

att.Mult_Penetration = 6 / 14
att.Mult_RPM = 1 / .85

att.Mult_Damage = ArcCW.UC.CalConv("556", "9mm", "max")
att.Mult_DamageMin = ArcCW.UC.CalConv("556", "9mm", "min")
att.Mult_Penetration = ArcCW.UC.CalConv("556", "9mm", "pen")

att.Mult_Range = 0.4
att.Mult_ShootSpeedMult = 1.1
att.Mult_Recoil = 0.5
att.Mult_HipDispersion = 0.85

--att.Mult_ReloadTime = 0.85
att.Mult_SightTime = 0.9

att.Override_ClipSize_Priority = -1
att.Override_ClipSize = 20

att.Mult_HeatCapacity = 1.5

att.GivesFlags = {"m16_auto", "m16_9mm"}
att.ExcludeFlags = {"m16_noauto"}
att.ActivateElements = {"ud_m16_9mm_mag"}

att.Override_PhysBulletMuzzleVelocity = 396 / 0.833333

att.Override_Ammo = "pistol"
att.Override_Trivia_Calibre = "9x19mm Parabellum"
att.Override_Trivia_Class = "Submachine Gun"
att.Override_ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
att.Override_ShellScale = 1
att.Override_ShellSounds = ArcCW.PistolShellSoundsTable

local path = ")^weapons/arccw_ud/glock/"

att.Hook_GetShootSound = function(wep, fsound)
    if fsound == wep.ShootSound or fsound == wep.FirstShootSound then return "weapons/arccw_ud/m16/fire_9.ogg" end
    if fsound == wep.ShootSoundSilenced then return {path .. "fire-sup-01.ogg", path .. "fire-sup-02.ogg", path .. "fire-sup-03.ogg", path .. "fire-sup-04.ogg", path .. "fire-sup-05.ogg", path .. "fire-sup-06.ogg"} end
end

local tail = ")^/arccw_uc/common/9x19/"

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return {
            tail .. "fire-dist-9x19-pistol-ext-01.ogg",
            tail .. "fire-dist-9x19-pistol-ext-02.ogg",
            tail .. "fire-dist-9x19-pistol-ext-03.ogg",
            tail .. "fire-dist-9x19-pistol-ext-04.ogg",
            tail .. "fire-dist-9x19-pistol-ext-05.ogg",
            tail .. "fire-dist-9x19-pistol-ext-06.ogg"
        }
    end
end

local tail = ")^/arccw_uc/common/9x19/"

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return {
            tail .. "fire-dist-9x19-pistol-ext-01.ogg",
            tail .. "fire-dist-9x19-pistol-ext-02.ogg",
            tail .. "fire-dist-9x19-pistol-ext-03.ogg",
            tail .. "fire-dist-9x19-pistol-ext-04.ogg",
            tail .. "fire-dist-9x19-pistol-ext-05.ogg",
            tail .. "fire-dist-9x19-pistol-ext-06.ogg"
        }
    end
end

local slotinfo = {
    [11] = {"20-Round Mag", "20-Round Mag", Material("entities/att/acwatt_ud_m16_9mm_20.png", "smooth mips")},
}
att.Hook_GetDefaultAttName = function(wep, slot)
    if slotinfo[slot] then
        return GetConVar("arccw_truenames"):GetBool() and slotinfo[slot][2] or slotinfo[slot][1]
    end
end
att.Hook_GetDefaultAttIcon = function(wep, slot)
    if slotinfo[slot] then
        return slotinfo[slot][3]
    end
end

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_9mm"
end
--lua/arccw/shared/attachments/ud_m16_receiver_altburst.lua:
att.PrintName = "AMCAR Cam-lock Burst Receiver"
att.AbbrevName = "Alt. Burst Lower"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "M16A2 Cam-lock Burst Receiver"
end

att.Description = "An alternative burst fire receiver that fires the entire burst with one trigger pull. This has a slight benefit for recoil control, but is mostly down to preference."

att.Icon = Material("entities/att/acwatt_ud_m16_receiver_default.png", "smooth mips")
att.Desc_Pros = {
    "ud.m16_altburst.1"
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
    "ud.m16_altburst.2"
}
att.Slot = "ud_m16_fcg"

att.AutoStats = true
att.Free = true
att.SortOrder = 10


att.Override_Firemodes_Priority = 0.5
att.Override_Firemodes = {
    {
        Mode = -3,
        PostBurstDelay = 0.08,
        Mult_Recoil = 0.9,
        RunawayBurst = true, -- https://en.wikipedia.org/wiki/Burst_mode_(weapons)
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

--lua/arccw/shared/attachments/ud_m16_rs_kac.lua:
att.PrintName = "KAC Rear Sight"
att.Icon = Material("entities/att/acwatt_ud_m16_rs_kac.png", "mips smooth")
att.Description = "Aftermarket rear sight for flat top receivers. Functionally identical to other iron sights, but may look more tactical (or mall-ninja, depending on your taste)."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {
    "uc.cosmetic"
}
att.Slot = "ud_m16_rs"

att.ActivateElements = {"ud_m16_upper_flat"}
att.GivesFlags = {"ud_m16_not_retro"}
att.ExcludeFlags = {"ud_m16_retro"}
--att.HideIfBlocked = true

att.SortOrder = 1000
att.Free = true
att.IgnorePickX = true

att.MountPositionOverride = 0.5
att.IronSight = true
att.Override_IronSightStruct = {
    Pos = Vector(-2.8, 0, 0.9),
    Ang = Angle(0.9, 0, 0),
    Magnification = 1.1
}
att.Model = "models/weapons/arccw/atts/kac_rs.mdl"
att.ModelOffset = Vector(-1.5, -0.01, -0.09)
att.ModelScale = Vector(0.9, 0.9, 0.9)

att.HideIfBlocked = true
--lua/arccw/shared/attachments/ud_m16_stock_608.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_stock_sopmod.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_stock_wood.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m79_stock_sawn.lua:
att.PrintName = "Sawn-off Stock"
att.Icon = Material("entities/att/acwatt_ud_m79_stock_sawn.png", "smooth mips")
att.Description = "Removing the wooden stock and leaving only a grip massively increases the agility of the weapon, but also makes it difficult to fire accurately or controllably."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.sightdisp.50"
}
att.Desc_Neutrals = {
}
att.Slot = "ud_m79_stock"

att.AutoStats = true
att.Free = true

att.Add_SightsDispersion = 50

att.Mult_Recoil = 1.5
att.Mult_RecoilSide = 1.5
att.Mult_Sway = 3

att.Mult_SightTime = 0.75
att.Mult_HipDispersion = 0.75

att.Mult_SpeedMult = 1.05
att.Mult_SightedSpeedMult = 1.1
att.Mult_ShootSpeedMult = 1.1

att.Mult_DrawTime = 0.5
att.Mult_HolsterTime = 0.5

att.ActivateElements = {"m79_nostock"}

att.Override_ActivePos = Vector(0.5, 2, 1.5)
--lua/arccw/shared/attachments/ud_mini14_mag_60.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_mini14_mag_60.lua:
att.PrintName = "Mini-14 60-Round Casket Magazine"
att.AbbrevName = "60-Round Casket Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Patriot 809 60-Round Casket Magazine"
end

att.SortOrder = 30
att.Icon = Material("entities/att/acwatt_ud_mini14_mag_60.png", "smooth mips")
att.Description = "Quad-stack magazine for sustained vermin hunting. Has a tendency to jam."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.jam"
}
att.Desc_Neutrals = {
}
att.Slot = "ud_mini14_mag"

att.AutoStats = true

att.Override_ClipSize = 60

att.Mult_SightTime = 1.2
att.Mult_ReloadTime = 1.5
att.Mult_Sway = 2

att.Mult_SpeedMult = 0.95
att.Mult_ShootSpeedMult = 0.9

att.Mult_DrawTime = 1.25
att.Mult_HolsterTime = 1.25

att.Mult_HipDispersion = 1.5

att.Override_Malfunction = true

att.ActivateElements = {"ud_mini14_mag_60"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_60"
end

att.ExcludeFlags = {"mini14_762", "mini14_22lr"}
att.HideIfBlocked = true
--lua/arccw/shared/attachments/ud_uzi_body_carbine.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_uzi_body_civvy.lua:
att.PrintName = "Uzi 16\" Civilian Barrel"
att.AbbrevName = "16\" Civilian Barrel"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "STAP 16\" Civilian Barrel"
end

att.Icon = Material("entities/att/acwatt_ud_uzi_body_civvy.png", "smooth mips")
att.Description = "Civilian barrel for the Uzi, elongated to fit minimum length requirements. Substantially improves range and recoil, at the cost of prohibiting fully-automatic fire. Changes weapon to closed bolt operation."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.semionly"
}
att.Desc_Neutrals = {
}
att.Slot = "ud_uzi_frame"

att.AutoStats = true
att.SortOrder = 16

att.Mult_AccuracyMOA = 0.5
att.Mult_SightTime = 1.25
att.Mult_Recoil = 0.75
att.Mult_RecoilSide = 0.5
att.Mult_RPM = 0.9
att.Mult_Range = 1.5
att.Mult_Sway = 2

att.Mult_TriggerDelayTime = 0
att.Override_ChamberSize = 1

att.Override_Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

att.Add_BarrelLength = 8

att.ActivateElements = {"ud_uzi_body_civvy"}
--lua/arccw/shared/attachments/ud_uzi_mag_20.lua:
att.PrintName = "Uzi 20-Round Flush Mag"
att.AbbrevName = "20-Round Flush Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "IAL-9 20-Round Flush Mag"
end

att.SortOrder = 20
att.Icon = Material("entities/att/acwatt_ud_uzi_mag_20.png", "smooth mips")
att.Description = "Low-capacity flush magazine. The lighter load makes the weapon more ergonomic."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_uzi_mag"

att.AutoStats = true

att.Mult_SightTime = 0.9
att.Mult_ReloadTime = 0.85
att.Override_ClipSize = 20
att.Mult_Sway = 0.75
att.Mult_ShootSpeedMult = 1.1

att.Mult_HipDispersion = 0.75

att.ActivateElements = {"ud_uzi_16_mag"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_16"
end

att.ExcludeFlags = {"uzi_45","uzi_22"}
att.HideIfBlocked = true

--lua/arccw/shared/attachments/ur_1911_cal_9mm.lua:
att.PrintName = "SR1911 9x19mm Parabellum Conversion"
att.AbbrevName = "9x19mm Parabellum"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "AMAS Competition 9mm Parabellum Conversion"
end

att.SortOrder = 9
att.Icon = Material("entities/att/uc_bullets/9x19.png", "smooth mips")
att.Description = "A popular alternative caliber to .45 ACP. With a reduced diameter, the round achieves greater muzzle velocity and magazine capacity."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ur_m1911_caliber"

att.AutoStats = true

att.Override_Trivia_Calibre = "9x19mm Parabellum"
att.Override_Trivia_Manufacturer = "Sturm, Ruger & Company"

att.Mult_Damage = 30 / 45
att.Mult_DamageMin = 17 / 15
att.Mult_Penetration = 6 / 9
att.Mult_Range = 1.25
att.Mult_RPM = 525 / 450
att.Mult_ReloadTime = .9

att.Mult_Recoil = 0.85
att.Mult_RecoilSide = 0.75

att.Mult_PhysBulletMuzzleVelocity = 1.4 -- 350 / 253
att.Override_TracerNum = 1
att.Override_TracerNum_Priority = 0.5 -- subsonic can override

att.Mult_ClipSize = 9 / 7
att.Override_ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
att.Override_ShellScale = 1

local path = ")^weapons/arccw_ur/1911/"

att.Hook_GetShootSound = function(wep, sound) -- Temporary
    if wep:GetBuff_Override("Silencer") then
        return {path .. "fire-9-sup-01.ogg", path .. "fire-9-sup-02.ogg", path .. "fire-9-sup-03.ogg", path .. "fire-9-sup-04.ogg", path .. "fire-9-sup-05.ogg", path .. "fire-9-sup-06.ogg"}
    else
        return {path .. "fire-9-01.ogg", path .. "fire-9-02.ogg", path .. "fire-9-03.ogg", path .. "fire-9-04.ogg", path .. "fire-9-05.ogg", path .. "fire-9-06.ogg"}
    end
end

local tail = ")^/arccw_uc/common/9x19/"

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return {
            tail .. "fire-dist-9x19-pistol-ext-01.ogg",
            tail .. "fire-dist-9x19-pistol-ext-02.ogg",
            tail .. "fire-dist-9x19-pistol-ext-03.ogg",
            tail .. "fire-dist-9x19-pistol-ext-04.ogg",
            tail .. "fire-dist-9x19-pistol-ext-05.ogg",
            tail .. "fire-dist-9x19-pistol-ext-06.ogg"
        }
    end
end
--lua/arccw/shared/attachments/ur_1911_skin_custom.lua:
att.PrintName = "M1911 Custom Finish"
att.AbbrevName = "Custom"
att.Icon = Material("entities/att/ur_1911/skin.png","mips smooth")
att.Description = "A configurable finish for your gun. There are many like it, but this one is yours."
att.SortOrder = 7

att.Desc_Neutrals = {
    "uc.cosmetic",
    "uc.custcolor",
}

att.AutoStats = true
att.Slot = "ur_m1911_skin"
att.Free = true

--lua/arccw/shared/attachments/ur_ak_charm_tl.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_hg_type3.lua:
att.PrintName = "Type 3 Vintage Handguard"
att.AbbrevName = "Vintage Handguard"
att.Icon = Material("entities/att/ur_ak/handguards/vintage.png", "mips smooth") -- todo
att.Description = "Lacks grip protrusions, reducing grip surface but enhancing agility."
att.Slot = {"ur_ak_hg"}
att.AutoStats = true

--att.Desc_Neutrals = {"uc.cosmetic"} nvm
att.SortOrder = 16

att.Mult_Recoil = 1.05
att.Mult_SightedSpeedMult = 1.08

att.ActivateElements = {"barrel_akm"}

--att.Ignore = true
--lua/arccw/shared/attachments/ur_ak_mag_762_75.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_stock_rpk.lua:
att.PrintName = "AK Clubfoot Stock"
att.AbbrevName = "Clubfoot Stock"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "KF Clubfoot Stock"
end
att.Icon = Material("entities/att/ur_ak/stock/rpk.png", "mips smooth")
att.Description = "Heavy-duty machine gun stock, designed with prone shooting in mind. It has more mass than the factory stock, but is generally more comfortable to aim and shoot with."
att.Slot = {"ur_ak_stock"}
att.AutoStats = true

att.SortOrder = 3

att.Mult_Recoil = .85
att.Mult_Sway = .75
att.Mult_SightTime = 1.1
att.Mult_SpeedMult = .9

att.ActivateElements = {"stock_rpk"}
--lua/arccw/shared/attachments/ur_aw_barrel_long.lua:
att.PrintName = "AW 27\" Magnum Barrel"
att.AbbrevName = "27\" Magnum Barrel"
att.Icon = Material("entities/att/ur_aw/bar_long.png", "mips smooth")

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "AP 27\" Magnum Barrel"
end

--att.Icon = Material("entities/att/acwatt_ud_mini14_barrel_long.png", "smooth mips")
att.SortOrder = 27
att.Description = "Lengthened fluted-steel barrel used with high-caliber setups for enhanced muzzle velocity and recoil reduction."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ur_aw_barrel"

att.Mult_Range = 1.1
att.Mult_Recoil = .8

att.Mult_SightTime = 1.15
att.Mult_Sway = 1.25

att.Add_BarrelLength = 3

att.AutoStats = true
att.ActivateElements = {"barrel_long"}
--lua/arccw/shared/attachments/ur_aw_skin_black.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_aw_stock_fixed.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_dbs_barrel_compact.lua:
att.PrintName = "IZh-58 18\" Coach Gun Barrel"
att.AbbrevName = "18\" Coach Gun Barrel"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Volga SuperShotgun 18\" Coach Gun Barrel"
end

att.Icon = Material("entities/att/ur_dbs/bcomp.png","smooth mips")
att.Description = "Named for use by private guards aboard stagecoaches in the Wild West, its short length is ideal for small rooms, though not quite as ideal at any longer distances."
att.Slot = {"ur_db_barrel"}
att.AutoStats = true

att.Mult_Sway = .75
att.Add_BarrelLength = -9
att.Mult_SightTime = .9
att.Mult_HipDispersion = 0.8

att.Mult_Recoil = 1.2
att.Mult_AccuracyMOA = 1.25
att.Mult_Range = .85

att.ActivateElements = {"barrel_compact"}

att.SortOrder = 18
--lua/arccw/shared/attachments/ur_dbs_fg_extractor.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_deagle_barrel_ext.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_deagle_barrel_modern.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_deagle_caliber_357.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_deagle_grip_wood.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_barrel_12.lua:
att.PrintName = "G3KA4 12\" Carbine Barrel"
att.AbbrevName = "12\" Carbine Barrel"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "AG58K 12\" Carbine Barrel"
end

att.Icon = Material("entities/att/ur_g3/barrel_k.png","smooth mips")
att.Description = "Shortened barrel for the carbine variant of the rifle. Improves both fire rate and handling."
att.Slot = "ur_g3_barrel"
att.AutoStats = true

att.SortOrder = 12

att.Mult_SightTime = 0.9
att.Add_BarrelLength = -4
att.Mult_SightedSpeedMult = 1.05
att.Mult_HipDispersion = 0.9
att.Mult_Sway = 0.7

att.Mult_Recoil = 1.15
att.Mult_AccuracyMOA = 1.5
att.Mult_Range = 0.5
att.Mult_RPM = 1.1

att.GivesFlags = {"g3_not8"}

--lua/arccw/shared/attachments/ur_g3_bayobipod_bipod.lua:
att.PrintName = "G3 Bipod"
att.AbbrevName = "Integrated Bipod"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "G58 Bipod"
end

att.Icon = false
att.Description = "Bipod"
att.Slot = "ur_g3_bayobipod"
att.SortOrder = 998

att.IgnorePickX = true
att.Ignore = true
--lua/arccw/shared/attachments/ur_g3_hg_51_flash.lua:
att.PrintName = "Surefire Handguard"

att.Description = "Surefire handguard, custom-fitted for the HK51."
att.Desc_Cons = {
    "uc.noubs"
}
att.AutoStats = true

att.Slot = "ur_g3_handguard"

att.SortOrder = 3

att.HideIfBlocked = true

att.Model = "models/weapons/arccw/atts/ud_flashlight_1.mdl"
att.ModelOffset = Vector(0,0,.1)
att.OffsetAng = Angle(0,0,180)
att.ModelScale = Vector(.01,.01,.01) -- THIS IS TEMPORARY UNTIL THE MODEL GETS THE BONE WE NEED, DO NOT RELEASE WITH A TINY FLASHLIGHT INSIDE THE MODEL

att.Flashlight = false
att.FlashlightFOV = 50
att.FlashlightFarZ = 1024 -- how far it goes
att.FlashlightNearZ = 1 -- how far away it starts
att.FlashlightAttenuationType = ArcCW.FLASH_ATT_LINEAR -- LINEAR, CONSTANT, QUADRATIC are available
att.FlashlightColor = Color(255, 242, 229)
att.FlashlightTexture = "effects/flashlight001"
att.FlashlightBrightness = 3
att.FlashlightBone = "light"

att.ToggleStats = {
    {
        PrintName = "On",
        Flashlight = true
    },
    {
        PrintName = "Off",
        Flashlight = false,
    }
}

att.GivesFlags = {"g3_noub"}
att.RequireFlags = {"g3_hk51hg"}

att.Ignore = true
--lua/arccw/shared/attachments/ur_g3_hg_51_mlok.lua:
att.PrintName = "MLOK Handguard"
att.Description = "Aftermarket hanguard designed for the HK51 Carbine. Light but unwieldy."
att.Desc_Cons = {
    "uc.noubs"
}
att.AutoStats = true

att.Slot = "ur_g3_handguard"

att.SortOrder = 2

att.ModelOffset = Vector(-21, -2.2, 4.3)
att.Model = "models/weapons/arccw/ur_g3_lhik_slim.mdl"
att.LHIK = true

att.HideIfBlocked = true

att.Mult_Sway = .85
att.Mult_SightTime = 1.05
att.Mult_Recoil = .9


att.GivesFlags = {"g3_noub"}
att.RequireFlags = {"g3_hk51hg"}

att.Ignore = true
--lua/arccw/shared/attachments/ur_g3_hg_pica.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_mag_20_556.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_optic_psg1.lua:
att.PrintName = "Hensoldt ZF 6x42 PSG1"
att.AbbrevName = "PSG-1 Optic (6x)"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Hensoldt ZF 6x42 PMR-2"
    att.AbbrevName = "PMR-2 Optic (6x)"
end

att.Icon = Material("entities/att/acwatt_ur_g3_optic_psg1.png", "mips smooth")
att.Description = "Long range combat scope for precision shooting.\nExclusive to the G3 pattern rifle."
-- need icon
att.SortOrder = 300

att.Desc_Pros = {
    "autostat.holosight",
    "autostat.zoom",
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"ur_g3_optic"}

att.Model = "models/weapons/arccw/atts/g3_optic_psg.mdl"
att.ModelOffset = Vector(0.55, 0, -1.7)

att.AdditionalSights = {
    {
        Pos = Vector(0.01, 11.5, -1.12),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        HolosightData = {
            Holosight = true,
            HolosightReticle = Material("hud/scopes/PSG1_reticle.png", "mips smooth"),
            HolosightNoFlare = true,
            HolosightSize = 9.5,
            HolosightPiece = "models/weapons/arccw/atts/g3_optic_psg_hsp.mdl",
            HolosightBlackbox = true,
            HolosightMagnification = UC_HalfScope( 6 ),
            Colorable = true,
        },
    }
}

-- att.Holosight = true
-- att.HolosightReticle = Material("mifl_tarkov_reticle/dot.png", "mips smooth")

att.HolosightPiece = "models/weapons/arccw/atts/g3_optic_psg_hsp.mdl"
-- att.HolosightNoFlare = true
-- att.HolosightSize = 1
-- att.HolosightBone = "holosight"
att.Colorable = true

att.Mult_SightedSpeedMult = 0.84
--lua/arccw/shared/attachments/ur_g3_optic_sg1.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_skin_custom.lua:
att.PrintName = "G3 Custom Furniture"
att.AbbrevName = "Custom"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "G58 Custom Furniture"
end

att.Description = "Custom color furniture. \n\n(Note: Do not let a gun purist see this.)"
att.Icon = Material("entities/att/ur_g3/skin_cust.png","smooth mips")
att.Slot = "ur_g3_skin"
att.Desc_Neutrals = {
    "uc.cosmetic",
    "uc.custcolor",
}
att.SortOrder = 1

att.IgnorePickX = true
--lua/arccw/shared/attachments/ur_g3_skin_tan.lua:
att.PrintName = "G3 Flat Dark Earth Furniture"
att.AbbrevName = "FDE"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "G58 Flat Dark Earth Furniture"
end

att.Description = "FDE furniture for the two-tone tacticool feel... or desert operations."
att.Icon = Material("entities/att/ur_g3/skin_fde.png","smooth mips")
att.Slot = "ur_g3_skin"
att.Desc_Neutrals = {
    "uc.cosmetic",
}
att.SortOrder = 1

att.IgnorePickX = true
--lua/arccw/shared/attachments/ur_mp5_barrel_sd.lua:
att.PrintName = "13\" Schalldämpfer Barrel"
att.AbbrevName = "13\" SD Barrel"

-- if !GetConVar("arccw_truenames"):GetBool() then
--     att.PrintName = "Schalldämpfer Barrel"
-- end

att.Icon = Material("entities/att/ur_mp5/upper_sd.png", "smooth mips")
att.Description = "Large, specialized integral suppressor for the MP5.\nMuzzle velocity is reduced, resulting in an extremely quiet report but reduced effective range."
att.Desc_Pros = {
    -- "pro.invistracers",
    -- "uc.subsonic"
}
att.Desc_Cons = {
    "uc.nomuzzle",
    "uc.nohg",
    -- "uc.nopowder"
}
att.Desc_Neutrals = {"uc.supptail"}

att.AutoStats = true

att.Slot = "ur_mp5_barrel"

att.SortOrder = 13

att.Silencer = true
att.Mult_ShootVol = 0.55
att.Mult_Recoil = 0.9
att.Override_MuzzleEffect = "muzzleflash_suppressed"
att.Override_PhysTracerProfile = 7
att.Override_TracerNum = 0

att.Mult_SightTime = 1.15
att.Mult_Sway = 1.25
att.Mult_Range = 0.65
att.Add_BarrelLength = 4

att.Mult_PhysBulletMuzzleVelocity = 0.7

att.Hook_GetDistantShootSound = function(wep, distancesound)
    if distancesound == wep.DistantShootSoundSilenced then
        return false end
end
att.Mult_ShootPitch = 1.15

att.ActivateElements = {"ur_mp5_barrel_sd"}
att.GivesFlags = {"barrel_sd"} --, "powder_subsonic"
--att.ExcludeFlags = {"ur_mp5_cal_10mm","ur_mp5_cal_40sw"}

att.Hook_GetDistantShootSound = function(wep, distancesound)
    if wep:GetBuff("PhysBulletMuzzleVelocity") < ArcCW.UC.SubsonicThreshold then
        return false
    end
end
--lua/arccw/shared/attachments/ur_mp5_caliber_noburst.lua:
att.PrintName = "MP5A3 SEF Receiver"
att.AbbrevName = "SEF Receiver"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "PK5-3 SEF Receiver"
end

att.SortOrder = 201
att.Icon = Material("entities/att/ur_mp5/sef.png", "smooth mips")
att.Description = "Vintage receiver that lacks the Navy receiver's three-round burst fire mode. Its grooved grip is more comfortable to hold."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "ur.mp5.noburst"
}
att.Desc_Neutrals = {
}
att.Slot = "ur_mp5_caliber"

att.AutoStats = true

att.Mult_SightTime = .95

att.Override_Firemodes_Priority = 0.5
att.Override_Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

att.ActivateElements = {"receiver_lower"}
--lua/arccw/shared/attachments/ur_mp5_optic_alt.lua:
att.PrintName = "Closed Irons"

att.Icon = Material("entities/att/ur_mp5/altirons.png", "smooth mips")
att.Description = "Closed iron sights with a smaller field of view, potentially increasing user precision.\nIn reality, it's all preference."
att.Desc_Neutrals = {
    "uc.cosmetic"
}
att.AutoStats = true

att.Slot = "ur_mp5_optic"
att.SortOrder = 9999

att.ActivateElements = {"ur_mp5_precision_irons"}
att.ExcludeFlags = {"barrel_sword"}
att.IgnorePickX = true

att.Override_IronSightStruct = {
     Pos = Vector(-3.17, -4.85, 0.74),
     Ang = Angle(0.1, 0, 0),
     Magnification = 1,
     SwitchToSound = "",
     ViewModelFOV = 80,
}
--lua/arccw/shared/attachments/ur_mp5_ub_classic.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_mp5_ub_mlok.lua:
return gluapack()()
--lua/arccw/shared/languages/uc_usp_en.lua:
L = {}

L["uc.usp.cs.1"] = "-2 MOA Imprecision when suppressed"
L["uc.usp.cs.2"] = "+25% Headshot damage"
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_move.lua:

function ArcCW.Move(ply, mv, cmd)

end

hook.Add("SetupMove", "ArcCW_SetupMove", ArcCW.Move)

local limy_p = 45
local limy_n = -45
local limp_p = 30
local limp_n = -30

function ArcCW.CreateMove(cmd)

end

hook.Add("CreateMove", "ArcCW_CreateMove", ArcCW.CreateMove)

local function tgt_pos(ent, head)
    local mins, maxs = ent:WorldSpaceAABB()
    local pos = ent:WorldSpaceCenter()
    pos.z = pos.z + (maxs.z - mins.z) * 0.2 -- Aim at chest level
    if head and ent:GetAttachment(ent:LookupAttachment("eyes")) ~= nil then
        pos = ent:GetAttachment(ent:LookupAttachment("eyes")).Pos
    end
    return pos
end

local lst = SysTime()

function ArcCW.StartCommand(ply, ucmd)
    -- Sprint will not interrupt a runaway burst
    local wep = ply:GetActiveWeapon()
    local plyalive = ply:Alive()
    local isvalidwep = IsValid(wep)
    local wep_ArcCW = wep.ArcCW
    if plyalive and isvalidwep and wep_ArcCW and wep:GetBurstCount() > 0
            and ucmd:KeyDown(IN_SPEED) and wep:GetCurrentFiremode().RunawayBurst
            and !wep:CanShootWhileSprint() then
        ucmd:SetButtons(ucmd:GetButtons() - IN_SPEED)
    end

    -- Holster code
    if isvalidwep and wep_ArcCW and wep:GetHolster_Time() != 0 and wep:GetHolster_Time() <= CurTime() and IsValid(wep:GetHolster_Entity()) then
        wep:SetHolster_Time(-math.huge)
        ucmd:SelectWeapon(wep:GetHolster_Entity())
    end


    if CLIENT and isvalidwep and wep_ArcCW then
        local ang2 = ucmd:GetViewAngles()
        local ft = (SysTime() - (lst or SysTime())) * GetConVar("host_timescale"):GetFloat()

        local recoil = Angle()
        recoil = recoil + (wep:GetBuff_Override("Override_RecoilDirection") or wep.RecoilDirection) * wep.RecoilAmount
        recoil = recoil + (wep:GetBuff_Override("Override_RecoilDirectionSide") or wep.RecoilDirectionSide) * wep.RecoilAmountSide
        ang2 = ang2 - (recoil * ft * 30)
        ucmd:SetViewAngles(ang2)

        local r = wep.RecoilAmount
        local rs = wep.RecoilAmountSide
        wep.RecoilAmount = math.Approach(wep.RecoilAmount, 0, ft * 20 * r)
        wep.RecoilAmountSide = math.Approach(wep.RecoilAmountSide, 0, ft * 20 * rs)
    end
    lst = SysTime()
end

hook.Add("StartCommand", "ArcCW_StartCommand", ArcCW.StartCommand)
--addons/[binbon]arccw_modify/lua/arccw/client/cl_singleplayer.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/client/cl_sway.lua:
local enabled = ArcCW.ConVars["enable_sway"]
local mult = ArcCW.ConVars["mult_sway"]

ArcCW.SwayDir = 0

function ArcCW.Sway(cmd)

    local ply = LocalPlayer()
    local wpn = ply:GetActiveWeapon()

    if !wpn.ArcCW then return end

    local ang = cmd:GetViewAngles()

    if wpn:GetState() == ArcCW.STATE_SIGHTS and !wpn.NoSway and enabled:GetBool() then
        local sway = mult:GetFloat() * wpn:GetBuff("Sway")
        --sway = sway * math.Clamp(1 / (wpn:GetActiveSights().ScopeMagnification or 1), 0.1, 1)
        if wpn:InBipod() then
            sway = sway * (wpn.BipodDispersion * wpn:GetBuff_Mult("Mult_BipodDispersion"))
        end
        if sway > 0.05 then
            ang.p = math.Clamp(ang.p + math.sin(CurTime() * 1.25) * FrameTime() * sway, -89, 89)

            ArcCW.SwayDir = ArcCW.SwayDir + math.Rand(-360, 360) * FrameTime() / math.min(sway, 1)

            ang.p = ang.p + math.sin(ArcCW.SwayDir) * FrameTime() * sway
            ang.y = ang.y + math.cos(ArcCW.SwayDir) * FrameTime() * sway

            -- ang.p = ang.p + math.Rand(-1, 1) * FrameTime() * sway
            -- ang.y = ang.y + math.Rand(-1, 1) * FrameTime() * sway

            cmd:SetViewAngles(ang)
        end
    end
end

hook.Add("CreateMove", "ArcCW_Sway", ArcCW.Sway)
--addons/[binbon]arccw_modify/lua/arccw/client/cl_ttt.lua:
if engine.ActiveGamemode() != "terrortown" then return end

ArcCW.ConVars["ttt_inforoundstart"] = CreateClientConVar("arccw_ttt_inforoundstart", "1", true, false, "Whether to show ArcCW config every round.")
ArcCW.ConVars["ttt_rolecrosshair"] = CreateClientConVar("arccw_ttt_rolecrosshair", "1", true, false, "Whether to color your crosshair according to your role.")

ArcCW.TTT_AttInfo = ArcCW.TTT_AttInfo or {}

local TTTPanel = {
    { type = "h", text = "#arccw.ttt_serverhelp" },
    { type = "b", text = "#arccw.cvar.ttt_replace", var = "arccw_ttt_replace", sv = true },
    { type = "b", text = "#arccw.cvar.ammo_replace", var = "arccw_ttt_ammo", sv = true },
    { type = "b", text = "#arccw.cvar.ttt_atts", var = "arccw_ttt_atts", sv = true },
    { type = "o", text = "#arccw.cvar.ttt_customizemode", var = "arccw_ttt_customizemode", sv = true,
            choices = {[0] = "#arccw.cvar.ttt_customizemode.0", [1] = "#arccw.cvar.ttt_customizemode.1", [2] = "#arccw.cvar.ttt_customizemode.2", [3] = "#arccw.cvar.ttt_customizemode.3"}},
    { type = "o", text = "#arccw.cvar.ttt_bodyattinfo", var = "arccw_ttt_bodyattinfo", sv = true,
            choices = {[0] = "#arccw.combobox.disabled", [1] = "#arccw.cvar.ttt_bodyattinfo.1", [2] = "#arccw.cvar.ttt_bodyattinfo.2"}},
    { type = "c", text = "#arccw.cvar.ttt_bodyattinfo.help"},
}

net.Receive("arccw_ttt_bodyattinfo", function()
    local rag = net.ReadEntity()
    rag = rag:EntIndex()
    ArcCW.TTT_AttInfo[rag] = {}
    local atts = net.ReadUInt(8)
    for i = 1, atts do
        local id = net.ReadUInt(ArcCW.GetBitNecessity())
        if id != 0 then
            --ArcCW.TTT_AttInfo[rag][i] = ArcCW.AttachmentIDTable[id]
            table.insert(ArcCW.TTT_AttInfo[rag], ArcCW.AttachmentIDTable[id])
        end
    end
end)

hook.Add("TTTBodySearchPopulate", "ArcCW_PopulateHUD", function(processed, raw)

    -- Attachment Info
    local mode = ArcCW.ConVars["ttt_bodyattinfo"]:GetInt()
    local attTbl = ArcCW.TTT_AttInfo[raw.eidx]
    if attTbl and !table.IsEmpty(attTbl) and (mode == 2 or (mode == 1 and raw.detective_search)) then
        local finalTbl = {
            img    = "arccw/ttticons/arccw_dropattinfo.png",
            p = 10.5, -- Right after the murder weapon
            text = ArcCW.GetTranslation(mode == 1 and "ttt.bodyatt.founddet" or "ttt.bodyatt.found")
        }
        local count = table.Count(attTbl)
        if count == 1 then
            if !ArcCW.AttachmentTable[attTbl[1]] then return end
            local printName = ArcCW.GetTranslation("name." .. attTbl[1]) or ArcCW.AttachmentTable[attTbl[1]].PrintName
            finalTbl.text = finalTbl.text .. ArcCW.GetTranslation("ttt.bodyatt.att1", {att = printName})
        elseif count == 2 then
            if !ArcCW.AttachmentTable[attTbl[1]] or !ArcCW.AttachmentTable[attTbl[2]] then return end
            local printName1 = ArcCW.GetTranslation("name." .. attTbl[1]) or ArcCW.AttachmentTable[attTbl[1]].PrintName
            local printName2 = ArcCW.GetTranslation("name." .. attTbl[2]) or ArcCW.AttachmentTable[attTbl[2]].PrintName
            finalTbl.text = finalTbl.text .. ArcCW.GetTranslation("ttt.bodyatt.att2", {att1 = printName1, att2 = printName2})
        else
            finalTbl.text = finalTbl.text .. ArcCW.GetTranslation("ttt.bodyatt.att3")
            local comma = false
            for i, v in pairs(attTbl) do
                if v and ArcCW.AttachmentTable[v] then
                    local printName = ArcCW.GetTranslation("name." .. v) or ArcCW.AttachmentTable[v].PrintName
                    finalTbl.text = finalTbl.text .. (comma and ", " or "") .. printName
                    comma = true
                end
            end
            finalTbl.text = finalTbl.text .. "."
        end
        processed.arccw_atts = finalTbl
    end

    -- kill info
    if bit.band(raw.dmg, DMG_BUCKSHOT) == DMG_BUCKSHOT then
        processed.dmg.text = LANG.GetTranslation("search_dmg_buckshot")
        processed.dmg.img = "arccw/ttticons/kill_buckshot.png"
    elseif bit.band(raw.dmg, DMG_NERVEGAS) == DMG_NERVEGAS then
        processed.dmg.text = LANG.GetTranslation("search_dmg_nervegas")
        processed.dmg.img = "arccw/ttticons/kill_nervegas.png"
    end
end)

local function AddLine(parent, str)
    local pw, ph = parent:GetSize()
    local label = vgui.Create("DLabel", parent)
    label:SetSize(pw, ScreenScale(8))
    label:Dock(TOP)
    label:DockMargin(ScreenScale(4), ScreenScale(1), ScreenScale(4), ScreenScale(1))
    label:SetFont("ArcCW_8")
    label:SetTextColor(Color(255,255,255,255))
    label:SetText(str)
    return label
end

local infoBox = nil
local function CreateInfoBox(t)
    if infoBox then
        infoBox:Remove()
        timer.Remove("ArcCW_TTT_InfoBox")
    end

    local totalw, totalh = ScrW() * 0.25, ScrH() * 0.2
    infoBox = vgui.Create("DPanel")
    infoBox:SetSize(totalw, totalh)
    infoBox:SetPos(ScreenScale(2), ScrH() * 0.5)
    infoBox.Paint = function(span, w, h)
        surface.SetDrawColor(Color(0, 0, 0, 150))
        surface.DrawRect(0, 0, w, h)
    end

    local label = vgui.Create("DLabel", infoBox)
    label:SetSize(totalw, ScreenScale(12))
    label:Dock(TOP)
    label:DockMargin(ScreenScale(4), ScreenScale(2), ScreenScale(4), ScreenScale(2))
    label:SetTextColor(Color(255,255,255,255))
    label:SetFont("ArcCW_12")
    label:SetText(ArcCW.GetTranslation("ttt.roundinfo"))

    if ArcCW.ConVars["ttt_replace"]:GetBool() then
        AddLine(infoBox, ArcCW.GetTranslation("ttt.roundinfo.replace"))
    end

    local cmode_str = "ttt.roundinfo.cmode" .. ArcCW.ConVars["ttt_customizemode"]:GetInt()
    AddLine(infoBox, ArcCW.GetTranslation("ttt.roundinfo.cmode") .. " " .. ArcCW.GetTranslation(cmode_str))

    local att_str = ""
    local att_cvar = ArcCW.ConVars["attinv_free"]:GetBool()
    local att_cvar2 = ArcCW.ConVars["attinv_lockmode"]:GetBool()
    local att_cvar3 = ArcCW.ConVars["attinv_loseondie"]:GetBool()
    if att_cvar then
        att_str = "ttt.roundinfo.free"
    elseif att_cvar2 then
        att_str = "ttt.roundinfo.locking"
    else
        att_str = "ttt.roundinfo.inv"
    end
    att_str = ArcCW.GetTranslation(att_str)
    if att_cvar3 == 0 then
        att_str = att_str .. ", " .. ArcCW.GetTranslation("ttt.roundinfo.persist")
    elseif !att_cvar and !att_cvar2 and att_cvar3 == 2 then
        att_str = att_str .. ", " .. ArcCW.GetTranslation("ttt.roundinfo.drop")
    end
    if ArcCW.ConVars["atts_pickx"]:GetInt() > 0 then
        att_str = att_str .. ", " .. ArcCW.GetTranslation("ttt.roundinfo.pickx") .. " " .. ArcCW.ConVars["atts_pickx"]:GetInt()
    end
    AddLine(infoBox, ArcCW.GetTranslation("ttt.roundinfo.attmode") .. " " .. att_str)

    local binfo_cvar = ArcCW.ConVars["ttt_bodyattinfo"]:GetInt()
    AddLine(infoBox, ArcCW.GetTranslation("ttt.roundinfo.bmode") .. " " .. ArcCW.GetTranslation("ttt.roundinfo.bmode" .. binfo_cvar))

    if ArcCW.ConVars["ammo_replace"]:GetBool() and ArcCW.ConVars["mult_ammohealth"]:GetFloat() > 0 then
        local ainfo_cvar = ArcCW.ConVars["ammo_detonationmode"]:GetInt()
        local ainfo_str = ArcCW.GetTranslation("ttt.roundinfo.amode" .. ainfo_cvar)
        if ArcCW.ConVars["ammo_chaindet"]:GetBool() then
            ainfo_str = ainfo_str .. ", " .. ArcCW.GetTranslation("ttt.roundinfo.achain")
        end
        AddLine(infoBox, ArcCW.GetTranslation("ttt.roundinfo.amode") .. " " .. ainfo_str)
    end


    timer.Create("ArcCW_TTT_InfoBox", t, 1, function()
        if infoBox then infoBox:Remove() end
    end)
end
concommand.Add("arccw_ttt_info", function()
    CreateInfoBox(20)
end, nil, "Shows a panel detailing current ArcCW settings.")

local turnoff = true
hook.Add("TTTPrepareRound", "ArcCW_TTT_Info", function()
    if ArcCW.ConVars["ttt_inforoundstart"]:GetBool() then
        CreateInfoBox(15)
        if turnoff then
            turnoff = false
            chat.AddText(Color(255,255,255), "To turn off ArcCW config info, type 'arccw_ttt_inforoundstart 0' in console.")
        end
    end
    ArcCW.TTT_AttInfo = {}
end)

if !TTT2 then
    hook.Add("TTTSettingsTabs", "ArcCW_TTT", function(dtabs)

        local padding = dtabs:GetPadding() * 2

        local panellist = vgui.Create("DPanelList", dtabs)
        panellist:StretchToParent(0,0,padding,0)
        panellist:EnableVerticalScrollbar(true)
        panellist:SetPadding(10)
        panellist:SetSpacing(10)

        local dgui = vgui.Create("DForm", panellist)
        dgui:SetName("#arccw.menus.ttt_client")
        dgui:Help("#arccw.ttt_clienthelp")
        dgui:CheckBox("#arccw.cvar.ttt_inforoundstart", "arccw_ttt_inforoundstart")
        dgui:CheckBox("#arccw.cvar.ttt_rolecrosshair", "arccw_ttt_rolecrosshair")
        panellist:AddItem(dgui)

        local dgui2 = vgui.Create("DForm", panellist)
        dgui2:SetName("#arccw.menus.ttt_server")
        ArcCW.GeneratePanelElements(dgui2, TTTPanel)
        panellist:AddItem(dgui2)

        for menu, data in SortedPairs(ArcCW.ClientMenus) do
            local form = vgui.Create("DForm", panellist)
            form:SetName(data.text)
            data.func(form, true)
            form:SetExpanded(false)
            panellist:AddItem(form)
        end

        dtabs:AddSheet("ArcCW", panellist, "icon16/gun.png", false, false, "ArcCW")
    end)
end

-----------------------------
-- TTT2-specific support
-----------------------------

hook.Add("TTTRenderEntityInfo", "ArcCW_TTT2_Weapons", function(tData)
    local client = LocalPlayer()
    local ent = tData:GetEntity()


    if !IsValid(client) or !client:IsTerror() or !client:Alive()
    or !IsValid(ent) or tData:GetEntityDistance() > 100 or !ent:IsWeapon()
    or !ent.ArcCW or ent.Throwing then
        return
    end

    if tData:GetAmountDescriptionLines() > 0 then
        tData:AddDescriptionLine()
    end

    local pickx = ArcCW.ConVars["atts_pickx"]:GetInt()

    if !ent.CertainAboutAtts then
        tData:AddDescriptionLine("??? Attachments")
    elseif ent.Attachments and ent:CountAttachments() > 0 then
        tData:AddDescriptionLine(tostring(ent:CountAttachments()) .. (pickx > 0 and ("/" .. pickx) or "") .. ArcCW.GetTranslation("ttt.attachments"), nil)
        for i, v in pairs(ent.Attachments) do
            local attName = v.Installed
            if !attName and !v.MergeSlots then
                continue
            elseif v.MergeSlots and !attName then
                for _, s in pairs(v.MergeSlots) do
                    if ent.Attachments[s] and ent.Attachments[s].Installed then
                        attName = ent.Attachments[s].Installed
                        break
                    end
                end
                if !attName then continue end
            end
            local attTbl = ArcCW.AttachmentTable[attName]
            if attTbl and v.PrintName and attTbl.PrintName then
                local printName = ArcCW.GetTranslation("name." .. attName) or attTbl.PrintName
                tData:AddDescriptionLine(ArcCW.TryTranslation(v.PrintName) .. ": " .. printName, nil, {attTbl.Icon})
            end
        end
    end
end)

hook.Add("TTTRenderEntityInfo", "ArcCW_TTT2_Ammo", function(tData)
    local client = LocalPlayer()
    local ent = tData:GetEntity()

    if !IsValid(client) or !client:IsTerror() or !client:Alive()
    or !IsValid(ent) or tData:GetEntityDistance() > 100 or !scripted_ents.IsBasedOn(ent:GetClass(), "arccw_ammo") then
        return
    end

    -- enable targetID rendering
    tData:EnableText()
    tData:EnableOutline()
    tData:SetOutlineColor(client:GetRoleColor())

    tData:SetTitle(ent.PrintName)
    tData:SetSubtitle(ArcCW.GetTranslation("ttt.ammo") .. ent:GetNWInt("truecount", ent.AmmoCount))
end)

function ArcCW.TTT2_PopulateSettings(parent, title, tbl)

    local form = vgui.CreateTTT2Form(parent, title)

    for _, data in pairs(tbl) do

        local name = data.text
        if string.Left(name, 1) == "#" then name = string.sub(name, 2) end

        if data.type == "h" or data.type == "c" then
            form:MakeHelp({
                label = name
            })
        end

        local cvar = GetConVar(data.var or "")
        if !cvar then continue end
        local option

        if data.type == "b" then
            option = form:MakeCheckBox({
                label = name,
                default = tobool(cvar:GetDefault()),
                initial = cvar:GetBool(),
                OnChange = function(self, value)
                    ArcCW.NetworkConvar(data.var, value, self)
                end,
            })
            option.TickCreated = UnPredictedCurTime()
        elseif data.type == "i" or data.type == "f" then
               option = form:MakeSlider({
                    label = name,
                    min = data.min,
                    max = data.max,
                    decimal = data.type == "i" and 0 or 2,
                    default = tonumber(cvar:GetDefault()),
                    initial = data.type == "i" and cvar:GetInt() or cvar:GetFloat(),
                    OnChange = function(self, value)
                        ArcCW.NetworkConvar(data.var, value, self)
                    end,
                })
                option.TickCreated = UnPredictedCurTime()
        elseif data.type == "o" then
            option = form:MakeComboBox({
                label = name,
                default = tonumber(cvar:GetDefault()),
                initial = cvar:GetInt(),
                --choices = data.choices,
                OnChange = function(self, _, _, value)
                    ArcCW.NetworkConvar(data.var, value, self)
                end,
            })
            option.TickCreated = UnPredictedCurTime()
            for k, v in pairs(data.choices) do
                option:AddChoice(v, k)
            end
        end
    end
end

-- In almost all cases TTT2 lang names are identical to ISO 639-1; except for simplified / traditional Chinese
local ttt_langtranslate = {
    ["zh-cn"] = "zh_hans", -- i find it funny the original ttt's lang name for this is "simpchinese". haha simp
    ["zh-tw"] = "zh_tw",
}

-- This is only necessary in TTT2, where we use its interface for convars
function ArcCW.TTT2_LoadClientLangs()
    if !TTT2 then return end
    local files = file.Find("arccw/client/cl_languages/*", "LUA")
    for _, v in pairs(files) do
        local exp = string.Explode("_", string.lower(string.Replace(v, ".lua", "")))

        local lang = exp[#exp]
        lang = ttt_langtranslate[lang] or LANG.GetNameFromAlias(lang)

        -- cannot add to languages that do not exist
        if !LANG.IsLanguage(lang) then
            continue
        end

        include("arccw/client/cl_languages/" .. v)
        for phrase, str in pairs(L) do
            LANG.AddToLanguage(lang, phrase, str)
        end
        print("Loaded ArcCW cl_language file " .. v .. " with " .. table.Count(L) .. " strings for TTT2.")
        L = nil
    end
end
hook.Add("PostGamemodeLoaded", "ArcCW_TTT2_Localization", ArcCW.TTT2_LoadClientLangs)
--lua/arccw/client/cl_uc_menu.lua:
return gluapack()()
--lua/arccw/client/cl_uc_menu.lua:
local function DoGenericSpawnmenuRightclickMenu(self)
    local clickmenu = DermaMenu()

    clickmenu:AddOption("#spawnmenu.menu.copy", function()
        SetClipboardText(self:GetSpawnName())
    end):SetIcon("icon16/page_copy.png")

    if isfunction(self.OpenMenuExtra) then
        self:OpenMenuExtra(clickmenu)
    end

    clickmenu:Open()
end


CreateClientConVar("arccw_uc_menu", 1, true, false, "Cool menu!", 0, 1) -- extra safety cause     people say it not work

hook.Add( "PopulateWeapons", "UC_AddWeaponContent", function( pnlContent, tree, node )

    if !GetConVar("arccw_uc_menu"):GetBool() then return end

    local AllUCWeapons = {}
    local AllUCWeaponsByPack = {}
    for classname, _ in pairs( weapons.GetList() ) do
        local wep = weapons.Get(_.ClassName)
        if wep.Spawnable and wep.Category == "ArcCW - Urban Coalition" then
            AllUCWeapons[_.ClassName] = wep
        end
    end

    for classname, weapondata in pairs( AllUCWeapons ) do
        local pack = weapondata.UC_CategoryPack or "_Unknown"
        if pack then
            if !AllUCWeaponsByPack[pack] then AllUCWeaponsByPack[pack] = {} end
            table.insert(AllUCWeaponsByPack[pack], classname)
        end
    end

    -- PrintTable(AllUCWeapons)
    -- PrintTable(AllUCWeaponsByPack)

    local NodeToUse = nil
    -- MW base devs, I tried to recreate this spawnmenu stuff without looking at the code for yours
    -- BUT I WAS FUCKING BAWLING MY EYES OUT TRYING TO GET HOW TO DO THIS NEXT LINE
    -- anyways you guys probably are not reading this so i will end it here thank you
    -- ( i had the idea to do this kinda shit like. 2 days before smgs were pushed. i'm fucking crying i crode 😭😭😭 )
    for _, UCNode in pairs(tree:Root():GetChildNodes()) do
        if UCNode:GetText() == "ArcCW - Urban Coalition" then
            NodeToUse = UCNode
            break
        end
    end

    if !NodeToUse then return end

    NodeToUse.DoPopulate = function(self)
        -- If we've already populated it - forget it.
        if (self.PropPanel) then return end

        -- Create the container panel
        self.PropPanel = vgui.Create("ContentContainer", pnlContent)
        self.PropPanel:SetVisible(false)
        self.PropPanel:SetTriggerSpawnlistChange(false)

        for pack, class in SortedPairs( AllUCWeaponsByPack ) do
            local label = vgui.Create("ContentHeader", NodeToUse)
            label:SetText( string.Right( pack, #pack-1 ) )
            self.PropPanel:Add(label)

            local alphabeticallist = {}
            for _, k in pairs(class) do table.insert(alphabeticallist, {AllUCWeapons[k], PrintName = AllUCWeapons[k].PrintName}) end
            for k, e in SortedPairsByMemberValue( alphabeticallist, "PrintName" ) do
                local ent = e[1]
                CreateUCWeapon( self.PropPanel, {
                    nicename	= ent.PrintName or ent.ClassName,
                    spawnname	= ent.ClassName,
                    material	= ent.IconOverride or "entities/" .. ent.ClassName .. ".png",
                    admin		= ent.AdminOnly,

                    uc_manu = ent.Trivia_Manufacturer,
                    uc_year = ent.Trivia_Year,
                    uc_cali = ent.Trivia_Calibre,
                } )
            end

        end
    end

    -- InternalDoClick is called on the first child node before our function override.
    -- Remove its results and regenerate our cool tab
    if tree:Root():GetChildNode(0) == NodeToUse then
        NodeToUse.PropPanel:Remove()
        NodeToUse.PropPanel = nil
        NodeToUse:InternalDoClick()
    end
end )

function CreateUCWeapon(container, obj)
    if !obj.material then return end
    if !obj.nicename then return end
    if !obj.spawnname then return end
    local icon = vgui.Create("UCWepSel", container)
    icon:SetContentType("weapon")
    icon:SetSpawnName(obj.spawnname)

    icon:SetName(obj.nicename, obj.spawnname, {
        manu = obj.uc_manu,
        year = obj.uc_year,
        cali = obj.uc_cali
    })

    icon:SetMaterial(obj.material)
    icon:SetAdminOnly(obj.admin)
    icon:SetColor(Color(135, 206, 250, 255))

    icon.DoClick = function()
        RunConsoleCommand("gm_giveswep", obj.spawnname)
        surface.PlaySound("ui/buttonclickrelease.wav")
    end

    icon.DoMiddleClick = function()
        RunConsoleCommand("gm_spawnswep", obj.spawnname)
        surface.PlaySound("ui/buttonclickrelease.wav")
    end

    icon.OpenMenuExtra = function(self, menu)
        menu:AddOption("#spawnmenu.menu.spawn_with_toolgun", function()
            RunConsoleCommand("gmod_tool", "creator")
            RunConsoleCommand("creator_type", "3")
            RunConsoleCommand("creator_name", obj.spawnname)
        end):SetIcon("icon16/brick_add.png")

        local opt = menu:AddOption("#spawnmenu.menu.use_as_npc_gun", function()
            RunConsoleCommand("gmod_npcweapon", self:GetSpawnName())
        end)

        if self:GetSpawnName() == GetConVar("gmod_npcweapon"):GetString() then
            opt:SetIcon("icon16/monkey_tick.png")
        else
            opt:SetIcon("icon16/monkey.png")
        end
    end

    icon.OpenMenu = DoGenericSpawnmenuRightclickMenu

    if IsValid(container) then
        container:Add(icon)
    end

    return icon
end


-- fixed 
-- timer.Simple(2, function()
--     ArcCW.IncompatibleAddons["2654687324"] = "Prevents Urban Decay's M16 from properly loading."
-- end)

--addons/ashop/lua/ashop/lang/sh_english.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/_kernel/sh_utils.lua:
// Calculate the perfect bits size required
ashop.itemCounter = 0

if ashop.items then
    for k, v in pairs(ashop.items) do
        if k > ashop.itemCounter then
            ashop.itemCounter = k
        end
    end
end

ashop.BitsItem = math.ceil(math.log(ashop.itemCounter, 2))

function ashop.NewItemBitsCounter(n)
    if n > ashop.itemCounter then
        ashop.itemCounter = n
        ashop.BitsItem = math.ceil(math.log(ashop.itemCounter, 2))
    end
end
--addons/ashop/lua/ashop/code/gamemodes/currencies/integrations/sh_darkrp.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/gamemodes/currencies/integrations/sh_helix.lua:
// I don't know if i'm dumb, but I didn't found any hooks post load
hook.Add("PostGamemodeLoaded", "AShop_GR_Helix", function()
    if ix then
        ashop.currencies.RegisterCurrency("Helix", function(ply, amt)
            local c = ply:GetCharacter()
            c:SetMoney(c:GetMoney() + amt)
        end, function(ply)
            return ply:GetCharacter():GetMoney()
        end, function(amt)
            return ix.currency.Get(amt)
        end)
    end
end)

--addons/ashop/lua/ashop/code/object_types/car_dealer/cl_cd.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/car_skins/cl_carskin.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/entities/cl_entity.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/finishers/premade_finishers/cl_clientpart.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/model/sh_model.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/pac3/cl_pac3.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('Pac3')
OBJECT_TYPE.UniqueIdentifier = "Pac3"

function OBJECT_TYPE.UI_FILL(plyItem, item, pnl, parent, w, h, noCircle)
    local m = vgui.Create( "DModelPanel" , parent ) -- SpawnIcon
    m:SetSize(parent:GetSize())
    m:SetModel( LocalPlayer():GetModel() ) -- Model we want for this spawn icon
    m:SetMouseInputEnabled(false)
    m:SetPaintedManually(true)

    local fov = LocalPlayer():GetFOV()
    m:SetFOV(fov)
    m.FarZ = 4096*10

    local mn, mx = m.Entity:GetRenderBounds()
    local size = 0
    size = math.max( size, math.abs(mn.x) + math.abs(mx.x) )
    size = math.max( size, math.abs(mn.y) + math.abs(mx.y) )
    size = math.max( size, math.abs(mn.z) + math.abs(mx.z) )

    m:SetFOV( 45 )
    m:SetCamPos( Vector( size, size, size ) )
    m:SetLookAt( (mn + mx) * 0.5 )

    if item.metadata[1] then
        local pac3 = item.metadata[2]
        if pac and pac3 and ashop.pac3[pac3] and ashop.pac3[pac3].outfit then
            pac.SetupENT(m.Entity)
            m.Entity:AttachPACPart(ashop.pac3[pac3].outfit)

            function m:PreDrawModel(ent)
                local ang = self.aLookAngle
                if ( !ang ) then
                    ang = ( self.vLookatPos - self.vCamPos ):Angle()
                end
            
                local ent = self:GetEntity()
            
                if ent.RemovePACPart then
                    pac.ForceRendering(true)
                    pac.ShowEntityParts(ent)
                end
            
                ent:DrawModel()
            
                if ent.RemovePACPart then
                    pac.RenderOverride(ent, "opaque")
                    pac.RenderOverride(ent, "translucent")
                    pac.ForceRendering(false)
                end

                ashop.PostPlayerDraw(ent, nil, self)
            
                return true
            end
        end
    else
        ashop.loadParticle(item.metadata[3], item.metadata[4])
        local ply = m:GetEntity()

        /*

        if item.metadata[5] and item.metadata[5] != '' then
            local b = ply:LookupBone(item.metadata[5] or '')
            
            if !b and item.metadata[5] != '' then
                print('[AShop] This bone does not exist on this model:', ply:GetModel())
                print('[AShop] We will use the first, found bone')
            end
            
            local mdl = ClientsideModel("models/hunter/blocks/cube025x025x025.mdl")
            mdl:SetMoveType( MOVETYPE_NONE )
            mdl:SetNoDraw(true)
            
            local boneVec, boneAngle = ply:GetBonePosition(b or 1)
            mdl:Spawn()
            mdl:SetAngles(ply:GetAngles())
            mdl:SetPos(ply:GetPos())
            
            mdl:FollowBone(ply, b or 1)
            //plyItem.particle = {CreateParticleSystem( mdl, item.metadata[4], 4, 0 ), mdl}
        else
            if item.metadata[4] then
                //    plyItem.particle = {CreateParticleSystem( ply, item.metadata[4], item.metadata[7] or 0, 0 )}
            end
        end
        */
    end

    m.LayoutEntity = function() end

    return true, {m}
end

function OBJECT_TYPE.OnLocalEquip(ply, plyItem, item)
    OBJECT_TYPE.OnEquip(ply, plyItem, item)
end

function OBJECT_TYPE.OnEquip(ply, plyItem, item)
    if item.metadata[1] then
        local pac3 = ashop.GetItemAttribute(plyItem, item, 2)

        if pac and pac3 and ashop.pac3[pac3] and ashop.pac3[pac3].outfit then
            pac.SetupENT(ply)
            ply:AttachPACPart(ashop.pac3[pac3].outfit, ply)
        end
    else
        ashop.loadParticle(item.metadata[3], item.metadata[4])

        if item.metadata[5] and item.metadata[5] != '' then
            local b = ply:LookupBone(item.metadata[5] or '')

            if !b and item.metadata[5] != '' then
                print('[AShop] This bone does not exist on this model:', ply:GetModel())
                print('[AShop] We will use the first, found bone')
            end

            local mdl = ClientsideModel("models/hunter/blocks/cube025x025x025.mdl")
            mdl:SetMoveType( MOVETYPE_NONE )
            mdl:SetNoDraw(true)

            local boneVec, boneAngle = ply:GetBonePosition(b or 1)
            mdl:Spawn()

            mdl:SetPos(ply:GetPos())
            mdl:FollowBone(ply, b or 1)
            mdl:SetAngles(ply:GetAngles() + (item.metadata[8] or Angle()))
            plyItem.particle = {mdl:CreateParticleEffect(item.metadata[4], 0)}
        else
            if item.metadata[4] then
                plyItem.particle = {CreateParticleSystem( ply, item.metadata[4], item.metadata[7] or 0, 0 )}
            end
        end

        plyItem.particle[1]:SetShouldDraw(ply:IsPlayer())
    end
end

function OBJECT_TYPE.OnLocalRemove(ply, plyItem, item)
    OBJECT_TYPE.OnRemove(ply, plyItem, item)
end

// All players
function OBJECT_TYPE.OnMetadataUpdate(ply, plyItem, item, metadataKey, oldValue, newValue)
    if item.metadata[1] and metadataKey == 2 then
        if oldValue and ashop.pac3[oldValue] and ashop.pac3[oldValue].outfit then
            ply:RemovePACPart(ashop.pac3[oldValue].outfit)
        end

        if newValue and ashop.pac3[newValue] and ashop.pac3[newValue].outfit then
            if !ply.AttachPACPart then
                pac.SetupENT(ply)
            end

            ply:AttachPACPart(ashop.pac3[newValue].outfit)
        end
    elseif metadataKey == 8 and plyItem.particle and plyItem.particle[2] then
        plyItem.particle[2]:SetAngles(newValue or Angle())
    end
end

function OBJECT_TYPE.OnRemove(ply, plyItem, item)
    if item.metadata[1] then
        if !item.metadata[2] then return end
        ply:RemovePACPart(ashop.pac3[item.metadata[2]].outfit)
    else
        if !plyItem.particle then return end

        if plyItem.particle[1] and plyItem.particle[1]:IsValid() then
            plyItem.particle[1]:StopEmission(false, true)
        end
    
        if IsValid(plyItem.particle[2]) then
            plyItem.particle[2]:Remove()
        end
    
        plyItem.particle = nil
    end
end

function OBJECT_TYPE.OnPostPlayerDraw(ply, plyItem, item, inModelPanel)
    if !inModelPanel then return end

    if item.metadata[1] then
        if !ply.RemovePACPart then return end
        //pac.RenderOverride(ply, "opaque")
        //pac.RenderOverride(ply, "translucent", true)
    else
        plyItem.particle[1]:Render()
    end
end

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/taunts/cl_taunts.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/title_code/color/cl_text.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/weapon/cl_weapon.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/item_shop_effects/sh_matrix.lua:
ashop.itemShopEffects = ashop.itemShopEffects or {}
ashop.itemShopEffects[2] = ashop.itemShopEffects[2] or {}

// ty to https://wiki.facepunch.com/gmod/string.char
local function randStr( length )
	local length = tonumber( length )
    if length < 1 then return end

    local result = {}

    for i = 1, length do
        result[i] = string.char( math.random(32, 126) )
    end
    return table.concat(result)
end

ashop.itemShopEffects[2].preDraw = function(pnl, w, h, equipped, clr)
    pnl.rarity_clr10 = pnl.rarity_clr10 or ColorAlpha(clr, 10)
    surface.SetDrawColor(pnl.rarity_clr10)
    surface.DrawRect(0, 0, w, h)

    local split = math.ceil(w/16)
    if !pnl.unpackedClrR then
        local c = Color(clr.r, clr.g, clr.b)
        local h, s, v = ColorToHSV(c)
        s = s + 0.1
        v = v + 0.1

        c = HSVToColor(h, s, v)

        pnl.unpackedClrR, pnl.unpackedClrG, pnl.unpackedClrB = c.r, c.g, c.b
        pnl.textList = {}
        pnl.lastTick = 0
    end

    local frameTime = UnPredictedCurTime()*10
    local c = math.floor(frameTime, 2)

    if pnl.lastTick < c then
        pnl.lastTick = c+1

        // spawn a text
        // We don't want to try a lot, if there no free slots, np
        for i=1, 5 do
            local r = math.random(1, split)

            if !pnl.textList[r] then
                local rT = math.random(6, 20)
                pnl.textList[r] = {randStr(rT), 255 / (rT - 4), frameTime}
                break
            end
        end
    end

    for k, v in pairs(pnl.textList) do
        surface.SetFont("ashop_16")
        for i=1, #v[1] do
            local hY = (frameTime - v[3])*16 - i*16
            surface.SetTextPos(k * split, hY)

            if i == 1 then
                surface.SetTextColor(255, 255, 255)
            else
                surface.SetTextColor(pnl.unpackedClrR, pnl.unpackedClrG, pnl.unpackedClrB, 255 - (i * v[2]))
            end

            surface.DrawText(v[1][i])
        end

        local _, hT = surface.GetTextPos()
        if hT > h then
            pnl.textList[k] = nil
        end
    end
end
--addons/ashop/lua/ashop/code/ui/item_shop_effects/sh_prestige.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/item_shop_effects/sh_prestige.lua:
ashop.itemShopEffects = ashop.itemShopEffects or {}
ashop.itemShopEffects[1] = ashop.itemShopEffects[1] or {}

local matCircle = Material('akulla/circle.png', 'smooth')
local grad = Material('akulla/gradient-d')

local eyePos = Vector()
local ang = Angle(0, 0, 0)
local grav = Vector( 0, 0, 0.2 )

ashop.itemShopEffects[1].preDraw = function(pnl, w, h, equipped, clr)
    if !pnl.clrEffect then
        local hue, sat, val = ColorToHSV(clr)
        sat = math.max(sat/2, 0)
        val = 0.8

        pnl.clrEffect = HSVToColor(hue, sat, val)
    end

    pnl.rarityClr25 = pnl.rarityClr25 or ColorAlpha(clr, 255*0.10)

    local curTime = (CurTime()/1.5)%2

    if curTime < 1 then
        pnl.rarityClr25.a = math.ease.InBounce(curTime)*30 + 60
    else
        pnl.rarityClr25.a = math.ease.InElastic(2 - curTime)*30 + 60
    end

    surface.SetMaterial(grad)
    surface.SetDrawColor(pnl.rarityClr25)
    surface.DrawTexturedRect(0, h*0.6, w, h*0.4 )

    local xS, yS = pnl:LocalToScreen(0, 0)
    cam.Start3D(eyePos, ang, nil, xS, yS, w, h)
        local p = eyePos + ang:Forward()*5 + ang:Up()*15

        if !pnl.particleEmitter then
            pnl.particleEmitter = ParticleEmitter(p)
            pnl.particleEmitter:SetNoDraw(true)
        end

        for i = 1, 5 do -- Do 100 particles
            local part = pnl.particleEmitter:Add( matCircle, p + Vector(0, math.random(-10, 15), -25) ) -- Create a new particle at pos
            if ( part ) then
                part:SetDieTime( 3 ) -- How long the particle should "live"
        
                part:SetStartAlpha( math.Rand(20, 170) ) -- Starting alpha of the particle
                part:SetEndAlpha( 0 ) -- Particle size at the end if its lifetime
        
                part:SetStartSize( math.Rand(0.2, 0.5) ) -- Starting size
                part:SetEndSize( 0 ) -- Size when removed
                part:SetColor(pnl.clrEffect.r, pnl.clrEffect.g, pnl.clrEffect.b)
        
                part:SetGravity( grav ) -- Gravity of the particle

                local vec = VectorRand(-5, 5)
                vec.z = math.Rand(2, 10)
                vec.y = -5
                part:SetVelocity( vec ) -- Initial velocity of the particle
            end
        end

        pnl.particleEmitter:Draw()
    cam.End3D()

    surface.SetDrawColor(clr)
    surface.DrawRect(0, h-2, w, 2)

    return true
end
--addons/ashop/lua/ashop/code/ui/panels/cl_dmenu.lua:

local PANEL = {}

AccessorFunc( PANEL, "m_bBorder",			"DrawBorder" )
AccessorFunc( PANEL, "m_bDeleteSelf",		"DeleteSelf" )
AccessorFunc( PANEL, "m_iMinimumWidth",		"MinimumWidth" )
AccessorFunc( PANEL, "m_bDrawColumn",		"DrawColumn" )
AccessorFunc( PANEL, "m_iMaxHeight",		"MaxHeight" )

AccessorFunc( PANEL, "m_pOpenSubMenu",		"OpenSubMenu" )

function PANEL:Init()

	self:SetIsMenu( true )
	self:SetDrawBorder( true )
	self:SetPaintBackground( true )
	self:SetMinimumWidth( 100 )
	self:SetDrawOnTop( true )
	self:SetMaxHeight( ScrH() * 0.9 )
	self:SetDeleteSelf( true )

	self:SetPadding( 0 )

	-- Automatically remove this panel when menus are to be closed
	RegisterDermaMenuForClose( self )
    self:DockPadding(5, 5, 5, 5)

end

function PANEL:AddPanel( pnl )

	self:AddItem( pnl )
	pnl.ParentMenu = self

end

function PANEL:AddOption( strText, funcFunction )
	local pnl = vgui.Create( "Ashop_DMenuOption", self )
	pnl:SetMenu( self )
	pnl:SetText( strText )
	if ( funcFunction ) then pnl.DoClick = funcFunction end

    pnl:SetTextInset(10, 0)

	self:AddPanel( pnl )
	
	return pnl

end

function PANEL:AddCVar( strText, convar, on, off, funcFunction )

	local pnl = vgui.Create( "DMenuOptionCVar", self )
	pnl:SetMenu( self )
	pnl:SetText( strText )
	if ( funcFunction ) then pnl.DoClick = funcFunction end

	pnl:SetConVar( convar )
	pnl:SetValueOn( on )
	pnl:SetValueOff( off )

	self:AddPanel( pnl )

	return pnl

end

function PANEL:AddSpacer( strText, funcFunction )

	local pnl = vgui.Create( "DPanel", self )
	pnl.Paint = function( p, w, h )
		derma.SkinHook( "Paint", "MenuSpacer", p, w, h )
	end

	pnl:SetTall( 1 )
	self:AddPanel( pnl )

	return pnl

end

function PANEL:AddSubMenu( strText, funcFunction )

	local pnl = vgui.Create( "Ashop_DMenuOption", self )
	local SubMenu = pnl:AddSubMenu( strText, funcFunction )

	pnl:SetText( strText )
	if ( funcFunction ) then pnl.DoClick = funcFunction end

	self:AddPanel( pnl )

	return SubMenu, pnl

end

function PANEL:Hide()

	local openmenu = self:GetOpenSubMenu()
	if ( openmenu ) then
		openmenu:Hide()
	end

	self:SetVisible( false )
	self:SetOpenSubMenu( nil )

end

function PANEL:OpenSubMenu( item, menu )

	-- Do we already have a menu open?
	local openmenu = self:GetOpenSubMenu()
	if ( IsValid( openmenu ) && openmenu:IsVisible() ) then

		-- Don't open it again!
		if ( menu && openmenu == menu ) then return end

		-- Close it!
		self:CloseSubMenu( openmenu )

	end

	if ( !IsValid( menu ) ) then return end

	local x, y = item:LocalToScreen( self:GetWide(), 0 )
	menu:Open( x - 3, y, false, item )

	self:SetOpenSubMenu( menu )

end

function PANEL:CloseSubMenu( menu )

	menu:Hide()
	self:SetOpenSubMenu( nil )

end

local bg = ashop.GetColor("StateOff")
function PANEL:Paint( w, h )
	if ( !self:GetPaintBackground() ) then return end

	draw.RoundedBox(4, 0, 0, w, h, bg)
	return true
end

function PANEL:ChildCount()
	return #self:GetCanvas():GetChildren()
end

function PANEL:GetChild( num )
	return self:GetCanvas():GetChildren()[ num ]
end

function PANEL:PerformLayout( w, h )

	local w = self:GetMinimumWidth()

	-- Find the widest one
	for k, pnl in ipairs( self:GetCanvas():GetChildren() ) do

		pnl:InvalidateLayout( true )
		w = math.max( w, pnl:GetWide() )

	end

	self:SetWide( w )

	local y = 0 -- for padding

	for k, pnl in ipairs( self:GetCanvas():GetChildren() ) do

		pnl:SetWide( w )
		pnl:SetPos( 0, y )
		pnl:InvalidateLayout( true )

		y = y + pnl:GetTall()

	end

	y = math.min( y, self:GetMaxHeight() )

	self:SetTall( y )

	derma.SkinHook( "Layout", "Menu", self )

	DScrollPanel.PerformLayout( self, w, h )

end

--[[---------------------------------------------------------
	Open - Opens the menu.
	x and y are optional, if they're not provided the menu
		will appear at the cursor.
-----------------------------------------------------------]]
function PANEL:Open( x, y, skipanimation, ownerpanel )

	RegisterDermaMenuForClose( self )

	local maunal = x && y

	x = x or gui.MouseX()
	y = y or gui.MouseY()

	local OwnerHeight = 0
	local OwnerWidth = 0

	if ( ownerpanel ) then
		OwnerWidth, OwnerHeight = ownerpanel:GetSize()
	end

	self:InvalidateLayout( true )

	local w = self:GetWide()
	local h = self:GetTall()

	self:SetSize( w, h )

	if ( y + h > ScrH() ) then y = ( ( maunal && ScrH() ) or ( y + OwnerHeight ) ) - h end
	if ( x + w > ScrW() ) then x = ( ( maunal && ScrW() ) or x ) - w end
	if ( y < 1 ) then y = 1 end
	if ( x < 1 ) then x = 1 end

	local p = self:GetParent()
	if ( IsValid( p ) && p:IsModal() ) then
		-- Can't popup while we are parented to a modal panel
		-- We will end up behind the modal panel in that case

		x, y = p:ScreenToLocal( x, y )

		-- We have to reclamp the values
		if ( y + h > p:GetTall() ) then y = p:GetTall() - h end
		if ( x + w > p:GetWide() ) then x = p:GetWide() - w end
		if ( y < 1 ) then y = 1 end
		if ( x < 1 ) then x = 1 end

		self:SetPos( x, y )
	else
		self:SetPos( x, y )

		-- Popup!
		self:MakePopup()
	end

	-- Make sure it's visible!
	self:SetVisible( true )

	-- Keep the mouse active while the menu is visible.
	self:SetKeyboardInputEnabled( false )

end

--
-- Called by DMenuOption
--
function PANEL:OptionSelectedInternal( option )

	self:OptionSelected( option, option:GetText() )

end

function PANEL:OptionSelected( option, text )

	-- For override

end

function PANEL:ClearHighlights()

	for k, pnl in ipairs( self:GetCanvas():GetChildren() ) do
		pnl.Highlight = nil
	end

end

function PANEL:HighlightItem( item )

	for k, pnl in ipairs( self:GetCanvas():GetChildren() ) do
		if ( pnl == item ) then
			pnl.Highlight = true
		end
	end

end

function PANEL:GenerateExample( ClassName, PropertySheet, Width, Height )

	local MenuItemSelected = function()
		Derma_Message( "Choosing a menu item worked!" )
	end

	local ctrl = vgui.Create( "Button" )
	ctrl:SetText( "Test Me!" )
	ctrl.DoClick = function()
		local menu = DermaMenu()

		menu:AddOption( "Option One", MenuItemSelected )
		menu:AddOption( "Option 2", MenuItemSelected )

		local submenu = menu:AddSubMenu( "Option Free" )
		submenu:AddOption( "Submenu 1", MenuItemSelected )
		submenu:AddOption( "Submenu 2", MenuItemSelected )

		menu:AddOption( "Option For", MenuItemSelected )

		menu:Open()
	end

	PropertySheet:AddSheet( ClassName, ctrl, nil, true, true )

end

derma.DefineControl( "AShop_DMenu", "A Menu", PANEL, "DScrollPanel" )

--addons/ashop/lua/ashop/code/ui/panels_settings/cl_pac3edit.lua:
local function DrawInterior(editor, key, value, parent)
    local scroll = vgui.Create("DScrollPanel", editor)
    scroll:Dock(FILL)

    local nameContainer = vgui.Create('AShop_Entry', scroll)
    nameContainer:Dock(TOP)
    nameContainer:SetTall(0)
    nameContainer:IsRequired(true)
    nameContainer:SetInput(ashop.L('Name'), TYPE_STRING, value.name, {
        required = true,
        maxLength = 32,
        minLength = 4
    })
    nameContainer.boxcolor = ashop.GetColor('Grad2_0')
    nameContainer:AddSeparator()

    function nameContainer:OnSave(value)
        parent:SetText(value)
        net.Start('ashop_Pac3_Edit')
            net.WriteUInt(1, 3)
            net.WriteUInt(key, ashop.Config.BitsPac3)
            net.WriteString(value)
        net.SendToServer()
    end

    local idContainer = vgui.Create('AShop_Entry', scroll)
    idContainer:Dock(TOP)
    idContainer:SetTall(0)
    idContainer:IsRequired(true)
    idContainer:AddSeparator()

    idContainer:SetInput(ashop.L('ID'), "UInt8", key, {
        locked = true,
        required = true
    })
    idContainer.boxcolor = ashop.GetColor('Grad2_0')

    local modelAttachContainer = vgui.Create('AShop_Entry', scroll)
    modelAttachContainer:Dock(TOP)
    modelAttachContainer:IsRequired(false)
    modelAttachContainer:SetInput(ashop.L('ModelAttached'), TYPE_BOOL, value.model_attach, {
        required = true
    })
    modelAttachContainer.boxcolor = ashop.GetColor('Grad2_0')
    modelAttachContainer:AddSeparator()

    function modelAttachContainer:OnSave(value)
        net.Start('ashop_Pac3_Edit')
            net.WriteUInt(2, 3)
            net.WriteUInt(key, ashop.Config.BitsPac3)
            net.WriteBool(value)
        net.SendToServer()
    end

    local pac3Container = vgui.Create('AShop_Entry', scroll)
    pac3Container:Dock(TOP)
    pac3Container:SetInput(ashop.L('Pac3Code'), TYPE_STRING, value.outfit_text, {
        lineMultiplySize = 20,
        required = true
    })
    pac3Container:AddSeparator()

    function pac3Container:OnSave(value)
        net.Start('ashop_Pac3_Edit')
            net.WriteUInt(0, 3)
            net.WriteUInt(key, ashop.Config.BitsPac3)
            ashop.Network.W_Compress(value)
        net.SendToServer()
    end

    pac3Container.boxcolor = ashop.GetColor('Grad2_0')
end

ashop.registerParameter('Pac3', DrawInterior, function()
    local o = {}

    for k, v in pairs(ashop.pac3) do
        table.insert(o, {v.name, k, v})
    end

    return o
end, function()
    local a = vgui.Create('AShop_Form', ashop.menu)
    a:SetTitle(ashop.L('CreateAPac3'))
    a:CreateEntry(true, ashop.L('Name'), TYPE_STRING, {
        maxLength = 32,
        minLength = 4,
        required = true
    })
    a:CreateEntry(false, ashop.L('ModelAttached'), TYPE_BOOL)
    a:CreateEntry(true, ashop.L('Pac3Code'), TYPE_STRING, {
        lineMultiplySize = 20
    })

    function a:OnSend(name, modelAttach, pac3Code)
        net.Start('ashop_Pac3_New')
            net.WriteString(name)
            net.WriteBool(modelAttach)
            ashop.Network.W_Compress(pac3Code)
        net.SendToServer()
    end
    a:Center()
end, function(but, settingButton, objectTarget, completeObject)
    function but:DoRightClick()
        CloseDermaMenus()
        local menu = vgui.Create( "AShop_DMenu", but )
        menu:AddOption(ashop.L("Remove"), function()
            ashop.ui.popAskbox(ashop.L('AreYouSureToDeleteThis'), ashop.L('CantUndoOperation'), function()
                net.Start('ashop_Pac3_Delete')
                    net.WriteUInt(completeObject[2], ashop.Config.BitsPac3)
                net.SendToServer()
            end)
        end)

        menu:Open()
    end
end)
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_externalweaponskin.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_gtav_glasses.lua:
ashop.RegisterPremade("GTAV Glasses", {
    requireWorkshop = "572310302",

    objectTypes = {
        {
            "Wearables",
            {"ValveBiped.Bip01_Head1"},
            "Glasses"
        }
    },

    items = {
        {
            name = "Glasses 7",
            rendering = 1,
            metadata = {
                [1] = 'models/modified/glasses01.mdl',
                [3] = Vector(2.5, 0.75, -0.125),
                [4] = Angle(-0.21875, -80.25, -89.875),
                [7] = Vector(1, 1, 1),

                [11] = 2,
            }
        },

        {
            name = "Glasses 6",
            rendering = 1,
            metadata = {
                [1] = 'models/modified/glasses02.mdl',
                [3] = Vector(2.25, 0.0625, -0.125),
                [4] = Angle(-0.21875, -80.25, -89.875),
                [7] = Vector(1, 1, 1),

                [11] = 4,
                [12] = 100,
                [13] = Vector(34, 0, 0)
            }
        },

        {
            name = "Glasses 5",
            rendering = 1,
            metadata = {
                [1] = 'models/modified/glasses02.mdl',
                [3] = Vector(2.25, 0.0625, -0.125),
                [4] = Angle(-0.21875, -80.25, -89.875),
                [7] = Vector(1, 1, 1),

                [11] = 3,
                [12] = 100,
                [13] = Vector(34, 0, 0)
            }
        },

        {
            name = "Glasses 4",
            rendering = 1,
            metadata = {
                [1] = 'models/modified/glasses02.mdl',
                [3] = Vector(2.25, 0.0625, -0.125),
                [4] = Angle(-0.21875, -80.25, -89.875),
                [7] = Vector(1, 1, 1),

                [11] = 2,
                [12] = 100,
                [13] = Vector(34, 0, 0)
            }
        },

        {
            name = "Glasses 3",
            rendering = 1,
            metadata = {
                [1] = 'models/modified/glasses02.mdl',
                [3] = Vector(2.25, 0.0625, -0.125),
                [4] = Angle(-0.21875, -80.25, -89.875),
                [7] = Vector(1, 1, 1),

                [11] = 1,
                [12] = 100,
                [13] = Vector(34, 0, 0)
            }
        },

        {
            name = "Glasses 2",
            rendering = 1,
            metadata = {
                [1] = 'models/modified/glasses02.mdl',
                [3] = Vector(2.25, 0.0625, -0.125),
                [4] = Angle(-0.21875, -80.25, -89.875),
                [7] = Vector(1, 1, 1),
                [12] = 100,
                [13] = Vector(34, 0, 0)
            }
        },
    },
})
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_respirator.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_trails.lua:
local t = {
    {'Weed', "trails/weed"},
    {'Colors', "trails/colors"},
    {'Skull', "trails/skull"},
    {'Ghost', "trails/ghost"},
    {'Sweets', "trails/sweets"},
    {'Hand', "trails/hand"},
    {'Cloud', "trails/cloud"},
    {'Burger', "trails/burger"},
    {'Bucket', "trails/bucket"},
    {'Ball', "trails/ball"},
    {'Fire', "trails/fire"},
    {'Toxic', "trails/toxic"},
    {'Batman', "trails/flagabatmana"},
    {"Dat Boi", 'trails/boi'},
    {"Gabe", 'trails/gabe'},
    {'Xmas Tree', 'trails/tree.vmt'},
    {'Sword', 'trails/sword.vmt'},
    {'Railways', 'trails/railways.vmt'},
    {'Paws', 'trails/paws.vmt'},
    {'Music Note', 'trails/note.vmt'},
    {'Light', 'trails/light.vmt'},
    {'Kappa', 'trails/kappa.vmt'},
    {'Uganda Knuckles', 'trails/ugandaknuckles.vmt'},
    {'Vader', 'trails/vader'},
    {'White Music', 'trails/whitemusic'},
    {'Xbox', 'trails/xboxv2'},
    {'Yellow Pacman', 'trails/yellowpacman'},
    {'Zodiac', 'trails/zodiac'},
    {'Zoidberg', 'trails/zoidberg'},
    {'Ace', 'trails/ace'},
    {'Alche', 'trails/alche'},
    {'America', 'trails/america'},
    {'Android', 'trails/android'},
    {'Angry', 'trails/angry'},
    {'Anime', 'trails/anime'},
    {'Apple', 'trails/apple'},
    {'Arrow', 'trails/arrow'},
    {'b1', 'trails/b1'},
    {'Bender', 'trails/bender'},
    {'Blood', 'trails/blood'},
    {'Blue Pacman', 'trails/bluepacman'},
    {'Bubbles', 'trails/bubbles'},
    {'Bunchocreeps', 'trails/bunchocreeps'},
    {'Canada', 'trails/canada'},
    {'Carebear', 'trails/carebear'},
    {'Chrome', 'trails/chromev2'},
    {'Coolsun', 'trails/coolsun'},
    {'Creeper', 'trails/creeper'},
    {'Cursor', 'trails/cursor'},
    {'Dennis', 'trails/dennis'},
    {'Doge', 'trails/doge'},
    {'Dog paws', 'trails/dogpaws'},
    {'Dollar', 'trails/dollar'},
    {'England', 'trails/england'},
    {'Epiclulz', 'trails/epiclulz'},
    {'Fairy Tail', 'trails/fairy-tail'},
    {'Fish', 'trails/fishinthesea'},
    {'Footprints', 'trails/footprints'},
    {'France', 'trails/france'},
    {'Fry', 'trails/fry'},
    {'Ger', 'trails/ger'},
    {'Germany', 'trails/germany'},
    {'Girl power', 'trails/girlpower'},
    {'Goku', 'trails/goku'},
    {'Ha', 'trails/ha'},
    {'Handy', 'trails/handy'},
    {'Happy', 'trails/happy'},
    {'Heart', 'trails/heartk'},
    {'Ironman', 'trails/ironman'},
    {'Jim Jam', 'trails/jimjam'},
    {'Hitty cat chat', 'trails/kittycatchat'},
    {'Litfuse', 'trails/litfuse'},
    {'Luffy', 'trails/luffy'},
    {'Maletrail', 'trails/maletrail'},
    {'Minecraft', 'trails/minecraft'},
    {'Money', 'trails/money'},
    {'Muffin', 'trails/muffin'},
    {'Muffin Kawaii', 'trails/muffinkawaii'},
    {'Notes', 'trails/musicalnotes'},
    {'Naruto', 'trails/naruto'},
    {'Nibbler', 'trails/nibbler'},
    {'Pacman', 'trails/pacman'},
    {'Pink Pacman', 'trails/pinkpacman'},
    {'Pirateship', 'trails/pirateship'},
    {'Playstation', 'trails/playstation'},
    {'Pokeball', 'trails/pokeballv2'},
    {'Portal', 'trails/portal'},
    {'Gift', 'trails/present'},
    {'PSV2', 'trails/psv2'},
    {'Question', 'trails/question'},
    {'Rabbit', 'trails/rabbit'},
    {'Rainbow', 'trails/rainbow'},
    {'Rainbow Wave 2', 'trails/rainbowwave2'},
    {'Red Arrow', 'trails/redarrow'},
    {'Red Pacman', 'trails/redpacman'},
    {'Red Stars', 'trails/redstars'},
    {'Rubber Ducks', 'trails/rubberducks'},
    {'Rubiks Cube', 'trails/rubiks'},
    {'Sasuke', 'trails/sasuke'},
    {'Shoes', 'trails/shoes'},
    {'Smiley', 'trails/smiley'},
    {'Smouch', 'trails/smouch'},
    {'Snowflake', 'trails/snowflake'},
    {'Spooky Black', 'trails/spookyblack'},
    {'Spooky', 'trails/spookyerd'},
    {'Star', 'trails/star'},
    {'Stars And Moon', 'trails/starsnmoons'},
    {'Suit', 'trails/suit'},
    {'Sun and Clouds', 'trails/sunsnclouds'},
    {'Trains', 'trails/trains'},
    {'Twisted Rainbow', 'trails/twistedrainbow'}
}

local items = {}

for k, v in pairs(t) do
    table.insert(items, {
        name = v[1],
        rendering = 1,
        metadata = {
            true,
            v[2],
            false
        }
    })
end

ashop.RegisterPremade("AShop Trails", {
    requireWorkshop = "",

    objectTypes = {
        {
            "Trails",
        }
    },

    items = items
})
--addons/sh_reports/lua/reports/sh_main.lua:
function SH_REPORTS:GetMidnight(offset)
	return os.time() - tonumber(os.date("%H")) * 3600 - tonumber(os.date("%M")) * 60 - tonumber(os.date("%S")) + 86400 * (offset or /* 76561198347218024 */ 0)
end

-- fresh from NEP
local d = {
	[86400 * 31] = "mo",
	[86400 * 7] = "w",
	[86400] = "d",
	[3600] = "h",
	[60] = "min",
	[1] = "s",
}
local c2 = {}
function SH_REPORTS:FullFormatTime(i)
	if (c2[i]) then
		return c2[i]
	end

	local f = i
	local t = {}
	for ti, s in SortedPairs(d, true) do
		local f = math.floor(i / ti)
		if (f > 0) then
			table.insert(t, f .. s)
			i = i - f * ti
		end
	end
	
	t = table.concat(t, " ")
	c2[f] = t

	return t
end

function SH_REPORTS:IsAdmin(ply)
	return self.Usergroups[ply:GetUserGroup()] ~= nil
end

-- SERVER -> CLIENT
easynet.Start("SH_REPORTS.SendList")
	easynet.Add("server_time", EASYNET_UINT32)
	easynet.Add("struct_reports", EASYNET_STRUCTURES)
easynet.Register()

easynet.Start("SH_REPORTS.Notify")
	easynet.Add("msg", EASYNET_STRING)
	easynet.Add("positive", EASYNET_BOOL)
easynet.Register()

easynet.Start("SH_REPORTS.Chat")
	easynet.Add("msg", EASYNET_STRING)
easynet.Register()

easynet.Start("SH_REPORTS.ReportCreated")
	easynet.Add("id", EASYNET_UINT32)
	easynet.Add("reporter_id", EASYNET_STRING)
	easynet.Add("reporter_name", EASYNET_STRING)
	easynet.Add("reported_id", EASYNET_STRING)
	easynet.Add("reported_name", EASYNET_STRING)
	easynet.Add("reason_id", EASYNET_UINT8)
	easynet.Add("comment", EASYNET_STRING)
	easynet.Add("time", EASYNET_UINT32)
	easynet.Add("admin_id", EASYNET_STRING)
easynet.Register()

easynet.Start("SH_REPORTS.ReportClaimed")
	easynet.Add("report_id", EASYNET_UINT8)
	easynet.Add("admin_id", EASYNET_STRING)
easynet.Register()

easynet.Start("SH_REPORTS.ReportClosed")
	easynet.Add("report_id", EASYNET_UINT8)
easynet.Register()

easynet.Start("SH_REPORTS.QuickReport")
	easynet.Add("comment", EASYNET_STRING)
	easynet.Add("lastkiller", EASYNET_PLAYER)
	easynet.Add("lastarrester", EASYNET_PLAYER)
easynet.Register()

easynet.Start("SH_REPORTS.MinimizeReport")
	easynet.Add("report_id", EASYNET_UINT32)
easynet.Register()

easynet.Start("SH_REPORTS.SendPerfReports")
	easynet.Add("struct_perf_reports", EASYNET_STRUCTURES)
easynet.Register()

easynet.Start("SH_REPORTS.SendPerfReportStaff")
	easynet.Add("id", EASYNET_UINT32)
	easynet.Add("struct_perf_reports_staff", EASYNET_STRUCTURES)
easynet.Register()

easynet.Start("SH_REPORTS.ReportsPending")
	easynet.Add("num", EASYNET_UINT16)
	easynet.Add("struct_reports", EASYNET_STRUCTURES)
easynet.Register()

easynet.Start("SH_REPORTS.AdminLeft")
	easynet.Add("report_id", EASYNET_UINT32)
easynet.Register()

easynet.Start("SH_REPORTS.PromptRating")
	easynet.Add("report_id", EASYNET_UINT32)
	easynet.Add("admin_name", EASYNET_STRING)
easynet.Register()

easynet.Start("SH_REPORTS.SendRatings")
	easynet.Add("struct_rating", EASYNET_STRUCTURES)
easynet.Register()

easynet.Start("SH_REPORTS.SendHistoryList")
	easynet.Add("struct_history_steamids", EASYNET_STRUCTURES)
	easynet.Add("struct_history_list", EASYNET_STRUCTURES)
easynet.Register()

easynet.Start("SH_REPORTS.SendReportValid")
	easynet.Add("report_id", EASYNET_UINT32)
	easynet.Add("valid", EASYNET_BOOL)
easynet.Register()

-- CLIENT -> SERVER
easynet.Start("SH_REPORTS.PlayerReady")
easynet.Register()

easynet.Start("SH_REPORTS.NewReport")
	easynet.Add("reported_name", EASYNET_STRING)
	easynet.Add("reported_id", EASYNET_STRING)
	easynet.Add("reason_id", EASYNET_UINT8)
	easynet.Add("comment", EASYNET_STRING)
easynet.Register()

easynet.Start("SH_REPORTS.RequestList")
easynet.Register()

easynet.Start("SH_REPORTS.ClaimAndTeleport")
	easynet.Add("id", EASYNET_UINT32)
	easynet.Add("bring", EASYNET_BOOL)
	easynet.Add("bring_reported", EASYNET_BOOL)
easynet.Register()

easynet.Start("SH_REPORTS.Claim")
	easynet.Add("id", EASYNET_UINT32)
easynet.Register()

easynet.Start("SH_REPORTS.ClaimAndCSit")
	easynet.Add("id", EASYNET_UINT32)
easynet.Register()

easynet.Start("SH_REPORTS.CloseReport")
	easynet.Add("id", EASYNET_UINT32)
easynet.Register()

easynet.Start("SH_REPORTS.RequestPerfReports")
easynet.Register()

easynet.Start("SH_REPORTS.RequestPerfReportStaff" /* 76561198347218033 */)
	easynet.Add("id", EASYNET_UINT32)
easynet.Register()

easynet.Start("SH_REPORTS.RateAdmin")
	easynet.Add("report_id", EASYNET_UINT32)
	easynet.Add("rating", EASYNET_UINT8)
easynet.Register()

easynet.Start("SH_REPORTS.RequestStaffRatings")
easynet.Register()

easynet.Start("SH_REPORTS.RequestReportHistory")
easynet.Register()

easynet.Start("SH_REPORTS.RequestReportValid")
	easynet.Add("report_id", EASYNET_UINT32)
easynet.Register()

-- STRUCTURES
easynet.Start("struct_reports")
	easynet.Add("id", EASYNET_UINT32)
	easynet.Add("reporter_id", EASYNET_STRING)
	easynet.Add("reporter_name", EASYNET_STRING)
	easynet.Add("reported_id", EASYNET_STRING)
	easynet.Add("reported_name", EASYNET_STRING)
	easynet.Add("reason_id", EASYNET_UINT8)
	easynet.Add("comment", EASYNET_STRING)
	easynet.Add("time", EASYNET_UINT32)
	easynet.Add("admin_id", EASYNET_STRING)
easynet.Register()

easynet.Start("struct_perf_reports")
	easynet.Add("id", EASYNET_UINT32)
	easynet.Add("start_time", EASYNET_UINT32)
	easynet.Add("end_time", EASYNET_UINT32)
easynet.Register()

easynet.Start("struct_perf_reports_staff")
	easynet.Add("steamid", EASYNET_STRING)
	easynet.Add("claimed", EASYNET_UINT16)
	easynet.Add("closed", EASYNET_UINT16)
	easynet.Add("timespent", EASYNET_UINT16)
easynet.Register()

easynet.Start("struct_rating")
	easynet.Add("steamid", EASYNET_STRING)
	easynet.Add("total", EASYNET_UINT32)
	easynet.Add("num", EASYNET_UINT16)
easynet.Register()

easynet.Start("struct_history_steamids")
	easynet.Add("steamid", EASYNET_STRING)
easynet.Register()

easynet.Start("struct_history_list")
	easynet.Add("report_id", EASYNET_UINT32)
	easynet.Add("reporter_nid", EASYNET_UINT16)
	easynet.Add("reported_nid", EASYNET_UINT16)
	easynet.Add("reason", EASYNET_STRING)
	easynet.Add("comment", EASYNET_STRING)
	easynet.Add("rating", EASYNET_UINT8)
	easynet.Add("date", EASYNET_UINT32)
	easynet.Add("waiting_time", EASYNET_UINT16)
	easynet.Add("admin_nid", EASYNET_UINT16)
easynet.Register()
--addons/sh_reports/lua/reports_config.lua:
return gluapack()()
--addons/sh_reports/lua/reports/cl_menu_performance.lua:
local function L(...) return SH_REPORTS:L(...) end

local matBack = Material("shenesis/general/back.png")

function SH_REPORTS:ShowPerformanceReports()
	if (IsValid(_SH_REPORTS_PERF)) then
		_SH_REPORTS_PERF:Remove()
	end

	local styl = self.Style
	local th, m = self:GetPadding(), self:GetMargin()
	local m2 = m * 0.5
	local ss = self:GetScreenScale()

	local delay = 0
	if (self.ServerTime) then
		delay = self.ServerTime - os.time()
	end

	local curprep

	local frame = self:MakeWindow(L"performance_reports")
	frame:SetSize(800 * ss, 600 * ss)
	frame:Center()
	frame:MakePopup()
	_SH_REPORTS_PERF = frame

		frame:AddHeaderButton(matBack, function()
			frame:Close()
			self:ShowReports()
		end)

		local sel = vgui.Create("DScrollPanel", frame)
		sel:SetDrawBackground(false)
		sel:SetWide(140 * ss)
		sel:Dock(LEFT)
		sel.Paint = function(me, w, h)
			draw.RoundedBoxEx(4, 0, 0, w, h, styl.inbg, false, false, true, false)
		end
		self:PaintScroll(sel)

		local ilist_perf = vgui.Create("DListView", frame)
		ilist_perf:SetVisible(false)
		ilist_perf:SetSortable(false)
		ilist_perf:SetDrawBackground(false)
		ilist_perf:SetDataHeight(32)
		ilist_perf:Dock(FILL)
		ilist_perf:AddColumn(L"admin")
		ilist_perf:AddColumn(L"num_claimed")
		ilist_perf:AddColumn(L"num_closed")
		ilist_perf:AddColumn(L"time_spent")
		self:PaintList(ilist_perf)

		local ilist_rating = vgui.Create("DListView", frame)
		ilist_rating:SetVisible(false)
		ilist_rating:SetSortable(false)
		ilist_rating:SetDrawBackground(false)
		ilist_rating:SetDataHeight(32)
		ilist_rating:Dock(FILL)
		ilist_rating:AddColumn(L"admin")
		ilist_rating:AddColumn(L"rating")
		self:PaintList(ilist_rating)

		local ilist_history = vgui.Create("DListView", frame)
		ilist_history:SetVisible(false)
		ilist_history:SetSortable(false)
		ilist_history:SetDrawBackground(false)
		ilist_history:SetDataHeight(32)
		ilist_history:Dock(FILL)
		ilist_history:AddColumn(L"reporter")
		ilist_history:AddColumn(L"reported_player")
		ilist_history:AddColumn(L"reason")
		ilist_history:AddColumn(L"admin")
		ilist_history:AddColumn(L"rating")
		-- ilist_history.Think = function(me)
			-- local hover = vgui.GetHoveredPanel()
			-- if (!IsValid(_SH_REPORTS_HIST_DETAILS)) then
				-- if (!IsValid(hover) or !hover.m_HistoryReport) then
					-- return end
				
				-- _SH_REPORTS_HIST_DETAILS = NULL
			-- else
			
			-- end
		-- end
		self:PaintList(ilist_history)

		frame.ShowStaff = function(me, staffs)
			if (!ilist_perf:IsVisible()) then
				return end

			local i = 0
			for _, info in pairs (staffs) do
				local user = vgui.Create("DPanel", frame)
				user:SetDrawBackground(false)

					local avi = self:Avatar(info.steamid, 24, user)
					avi:SetPos(4, 4)

					local name = self:QuickLabel("...", "{prefix}Medium", styl.text, user)
					name:Dock(FILL)
					name:SetTextInset(ilist_perf:GetDataHeight(), 0)

					self:GetName(info.steamid, function(nick)
						if (IsValid(name)) then
							name:SetText(nick)
						end
					end)

				local line = ilist_perf:AddLine(user, info.claimed, info.closed, self:FullFormatTime(info.timespent))
				line:SetAlpha(0)
				line:AlphaTo(255, 0.1, 0.1 * i)
				self:LineStyle(line)

				i = i + 1
			end
		end

		frame.ShowRatings = function(me, ratings)
			if (!ilist_rating:IsVisible()) then
				return end

			ilist_rating:Clear()

			local i = 0
			for _, info in pairs (ratings) do
				if (info.num == 0) then
					continue end

				local frac = info.total / info.num / 5
				local tot = string.Comma(info.num)
				local tx = " " .. math.Round(frac * 100) .. "% (" .. tot .. ")"

				local user = vgui.Create("DPanel", frame)
				user:SetDrawBackground(false)

					local avi = self:Avatar(info.steamid, 24, user)
					avi:SetPos(4, 4)

					local name = self:QuickLabel("...", "{prefix}Medium", styl.text, user)
					name:Dock(FILL)
					name:SetTextInset(ilist_rating:GetDataHeight(), 0)

					self:GetName(info.steamid, function(nick)
						if (IsValid(name)) then
							name:SetText(nick)
						end
					end)

				local stars = vgui.Create("DPanel", frame)
				stars.Paint = function(me, w, h)
					local _x, _y = me:LocalToScreen(0, 0)

					surface.SetFont("SH_REPORTS.Large")
					local wi = surface.GetTextSize("★★★★★")

					surface.SetFont("SH_REPORTS.Medium")
					local wi2 = surface.GetTextSize(tx)

					local wid = wi + wi2

					draw.SimpleText("★★★★★", "SH_REPORTS.Large", w * 0.5 - wid * 0.5, h * 0.5, styl.inbg, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
					render.SetScissorRect(_x, _y, _x + w * 0.5 - wid * 0.5 + wi * frac, _y + h, true)
						draw.SimpleText("★★★★★", "SH_REPORTS.Large", w * 0.5 - wid * 0.5, h * 0.5, styl.rating, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
					render.SetScissorRect(0, 0, 0, 0, false)

					draw.SimpleText(tx, "SH_REPORTS.Medium", w * 0.5 - wid * 0.5 + wi, h * 0.5, styl.text, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
				end

				local line = ilist_rating:AddLine(user, stars)
				line:SetAlpha(0)
				line:AlphaTo(255, 0.1, 0.1 * i)
				self:LineStyle(line)

				i = i + 1
			end
		end

		frame.ShowHistory = function(me, history)
			if (!ilist_history:IsVisible()) then
				return end

			ilist_history:Clear()

			local i = 0
			for _, info in pairs (history) do
				local reporter = vgui.Create("DPanel", frame)
				reporter:SetDrawBackground(false)

					local avi = self:Avatar(info.reporter, 24, reporter)
					avi:SetPos(4, 4)

					local name = self:QuickLabel("...", "{prefix}Medium", styl.text, reporter)
					name:Dock(FILL)
					name:SetTextInset(ilist_history:GetDataHeight(), 0)

					self:GetName(info.reporter, function(nick)
						if (IsValid(name)) then
							name:SetText(nick)
						end
					end)

				local reported = vgui.Create("DPanel", frame)
				reported:SetDrawBackground(false)

					local avi = self:Avatar(info.reported, 24, reported)
					avi:SetPos(4, 4)

					local name = self:QuickLabel("...", "{prefix}Medium", styl.text, reported)
					name:Dock(FILL)
					name:SetTextInset(ilist_history:GetDataHeight(), 0)

					if (info.reported == "0") then
						avi:SetVisible(false)
						name:SetText("[" .. L"other" .. "]")
						name:SetTextInset(0, 0)
						name:SetContentAlignment(5)
					else
						self:GetName(info.reported, function(nick)
							if (IsValid(name)) then
								name:SetText(nick)
							end
						end)
					end

				local admin = vgui.Create("DPanel", frame)
				admin:SetDrawBackground(false)

					local avi = self:Avatar(info.admin, 24, admin)
					avi:SetPos(4, 4)

					local name = self:QuickLabel("...", "{prefix}Medium", styl.text, admin)
					name:Dock(FILL)
					name:SetTextInset(ilist_history:GetDataHeight(), 0)

					self:GetName(info.admin, function(nick)
						if (IsValid(name)) then
							name:SetText(nick)
						end
					end)

				local rating
				if (info.rating > 0) then
					local frac = info.rating / 5

					rating = vgui.Create("DPanel", frame)
					rating.Paint = function(me, w, h)
						local _x, _y = me:LocalToScreen(0, 0)

						surface.SetFont("SH_REPORTS.Large")
						local wi = surface.GetTextSize("★★★★★")
						local wid = wi

						draw.SimpleText("★★★★★", "SH_REPORTS.Large", w * 0.5 - wid * 0.5, h * 0.5, styl.inbg, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
						render.SetScissorRect(_x, _y, _x + w * 0.5 - wid * 0.5 + wi * frac, _y + h, true)
							draw.SimpleText("★★★★★", "SH_REPORTS.Large", w * 0.5 - wid * 0.5, h * 0.5, styl.rating, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
						render.SetScissorRect(0, 0, 0, 0, false)
					end
				end

				local line = ilist_history:AddLine(reporter, reported, info.reason, admin, info.rating > 0 and rating or L"none")
				line:SetAlpha(0)
				line:AlphaTo(255, 0.1, 0.1 * i)
				line:SetToolTip(os.date(self.TimeFormat, info.date) .. "\n\n" .. L"waiting_time" .. ": " .. self:FullFormatTime(info.waiting_time) .. "\n\n" .. L"comment" .. ":\n" .. info.comment)
				self:LineStyle(line)
				
				// HAAAAAAAAACKS
				-- line.m_HistoryReport = info
				
				-- local function RecFix(s)
					-- for _, v in pairs (s:GetChildren()) do
						-- v.m_HistoryReport = info
						-- v.m_HistoryLine = line
						
						-- RecFix(v)
					-- end
				-- end
				
				-- RecFix(line)

				i = i + 1
			end
		end

		local function display_perf(start, prep)
			if (curprep == start) then
				return end

			curprep = start
			frame.m_iID = prep.id

			ilist_perf:Clear()
			ilist_perf:SetVisible(true)
			ilist_rating:SetVisible(false)
			ilist_history:SetVisible(false)

			local ds, de = os.date(self.DateFormat, start), os.date(self.DateFormat, prep.end_time)

			frame.m_Title:SetText(L"performance_reports" .. /* 76561198347218024 */ " (" .. ds .. " - " .. de .. ")")
			frame.m_Title:SizeToContentsX()

			if (prep.staff) then
				frame:ShowStaff(prep.staff)
			else
				easynet.SendToServer("SH_REPORTS.RequestPerfReportStaff", {id = prep.id})
			end

			self:Notify(L("displaying_perf_report_from_x_to_y", ds, de), 5, styl.success, frame)
		end

		local btn_ratings = self:QuickButton(L"rating", function()
			ilist_perf:SetVisible(false)
			ilist_history:SetVisible(false)
			ilist_rating:SetVisible(true)
			ilist_rating:Clear()

			frame.m_Title:SetText(L"performance_reports")
			frame.m_Title:SizeToContentsX()

			easynet.SendToServer("SH_REPORTS.RequestStaffRatings")
		end, sel)
		btn_ratings:SetContentAlignment(4)
		btn_ratings:SetTextInset(m + 2, 0)
		btn_ratings:Dock(TOP)
		btn_ratings:SetTall(32 * ss)
		btn_ratings.m_iRound = 0
		btn_ratings.PaintOver = function(me, w, h)
			if (ilist_rating:IsVisible()) then
				surface.SetDrawColor(styl.header)
				surface.DrawRect(0, 0, 4, h)
			end
		end

		local btn_history = self:QuickButton(L"history", function()
			ilist_perf:SetVisible(false)
			ilist_rating:SetVisible(false)
			ilist_history:SetVisible(true)
			ilist_history:Clear()

			frame.m_Title:SetText(L"performance_reports")
			frame.m_Title:SizeToContentsX()

			easynet.SendToServer("SH_REPORTS.RequestReportHistory")
		end, sel)
		btn_history:SetContentAlignment(4)
		btn_history:SetTextInset(m + 2, 0)
		btn_history:Dock(TOP)
		btn_history:SetTall(32 * ss)
		btn_history.m_iRound = 0
		btn_history.PaintOver = function(me, w, h)
			if (ilist_history:IsVisible()) then
				surface.SetDrawColor(styl.header)
				surface.DrawRect(0, 0, 4, h)
			end
		end

		for _, prep in SortedPairs (self.CachedPerfReports, true) do
			local btn = self:QuickButton(os.date(self.DateFormat, prep.start_time), function()
				display_perf(prep.start_time, prep)
			end, sel, nil, prep.end_time >= (os.time() + delay) and styl.success or styl.text)
			btn:SetContentAlignment(4)
			btn:SetTextInset(m + 2, 0)
			btn:Dock(TOP)
			btn:SetTall(32 * ss)
			btn.m_iRound = 0
			btn.PaintOver = function(me, w, h)
				if (curprep == prep.start_time and ilist_perf:IsVisible()) then
					surface.SetDrawColor(styl.header)
					surface.DrawRect(0, 0, 4, h)
				end
			end
		end

	frame:SetAlpha(0)
	frame:AlphaTo(255, 0.1)
end

easynet.Callback("SH_REPORTS.SendPerfReports", function(data)
	SH_REPORTS.CachedPerfReports = data.struct_perf_reports
	SH_REPORTS:ShowPerformanceReports()
end)

easynet.Callback("SH_REPORTS.SendPerfReportStaff", function(data)
	if (!IsValid(_SH_REPORTS_PERF) or _SH_REPORTS_PERF.m_iID ~= data.id) then
		return end

	_SH_REPORTS_PERF:ShowStaff(data.struct_perf_reports_staff)
end)

easynet.Callback("SH_REPORTS.SendRatings", function(data)
	if (!IsValid(_SH_REPORTS_PERF)) then
		return end

	_SH_REPORTS_PERF:ShowRatings(data.struct_rating)
end)

easynet.Callback("SH_REPORTS.SendHistoryList", function(data)
	if (!IsValid(_SH_REPORTS_PERF)) then
		return end

	local steamids = data.struct_history_steamids
	for _, dat in pairs (data.struct_history_list) do
		dat.reporter = steamids[dat.reporter_nid].steamid
		dat.reported = steamids[dat.reported_nid].steamid
		dat.admin = steamids[dat.admin_nid].steamid

		dat.reporter_nid = nil
		dat.reported_nid = nil
		dat.admin_nid = nil
	end

	_SH_REPORTS_PERF:ShowHistory(data.struct_history_list)
end)
--addons/sh_reports/lua/reports/cl_menu_rating.lua:
return gluapack()()
--addons/safezone-sh/lua/autorun/autorun_safezones.lua:
return gluapack()()
--addons/safezone-sh/lua/safezones/sh_main.lua:
SH_SZ.OUTSIDE = 0
SH_SZ.ENTERING = 1
SH_SZ.PROTECTED = 2

function SH_SZ:GetSafeStatus(ply, sz)
	local i = ply:GetNWInt("SH_SZ.Safe", SH_SZ.OUTSIDE)
	if (SERVER) then
		return i
	else
		if (i == SH_SZ.ENTERING) then
			return "will_be_protected_in_x", math.max(math.ceil(sz.enter + sz.opts.ptime - CurTime()), 0)
		elseif (i == SH_SZ.PROTECTED) then
			return "safe_from_damage"
		else
			return ""
		end
	end
end

function SH_SZ:StartCommand(ply, cmd)

/*
	local sz = SERVER and ply.SH_SZ or SH_SZ.m_Safe
	if (!sz) then
		return end

	--	if (self.Usergroups[ply:GetUserGroup()]) then
	--		return end

	if (sz.opts.noatk) then
		local swep = ply:GetActiveWeapon()
		if (IsValid(swep) and !self.WeaponWhitelist[swep:GetClass()]) then
			cmd:RemoveKey(IN_ATTACK)
			cmd:RemoveKey(IN_ATTACK2)
		end
	end
*/

	local sz = SERVER and ply.SH_SZ or SH_SZ.m_Safe
    if not sz or not sz.opts.noatk then return end

    local swep = ply:GetActiveWeapon()
    if not IsValid(swep) or not self.WeaponWhitelist[swep:GetClass()] then return end

    cmd:RemoveKey(IN_ATTACK)
    cmd:RemoveKey(IN_ATTACK2)
end
/*
hook.Add("StartCommand", "SH_SZ.StartCommand", function(ply, cmd)
	SH_SZ:StartCommand(ply, cmd)
end)
*/
--addons/safezone-sh/lua/safezones/cl_editor.lua:
local function L(s, ...)
	return string.format(SH_SZ.Language[s] or s, ...)
end

function SH_SZ:GetStepText(step, numstep)
	local t = step.type
	if (t == "place") then
		return L("place_point_x", numstep)
	elseif (t == "confirm") then
		return L"finalize_placement"
	end
end

function SH_SZ:MakePoint(parent, pos, mx, my)
	local ep = LocalPlayer():EyePos()
	local av = LocalPlayer():GetAimVector()

	local pnt = self:QuickButton("P", function() end, parent)
	pnt:SetSize(24, 24)
	pnt:SetPos(mx - 12, my - 12)
	pnt.m_v3DPos = pos
	pnt.OnMousePressed = function(me, mc)
		if (mc == MOUSE_LEFT) then
			parent.m_DraggingPoint = me
		end
	end
	pnt.OnMouseReleased = function(me, mc)
		if (mc == MOUSE_LEFT and parent.m_DraggingPoint == me) then
			parent.m_DraggingPoint = nil
		end
	end
	pnt.OnCursorMoved = function(me)
		if (parent.m_DraggingPoint == me) then
			me:DoMove()
		end
	end
	pnt.Think = function(me)
		if (ep ~= LocalPlayer():EyePos() or av ~= LocalPlayer():GetAimVector()) then
			ep = LocalPlayer():EyePos()
			av = LocalPlayer():GetAimVector()

			local ts = me.m_v3DPos:ToScreen()
			local x, y = ts.x, ts.y
			me:SetPos(math.Clamp(x - 12, 0, ScrW() - 1), math.Clamp(y - 12, 0, ScrH() - 1))
			me:SetPaintedManually(x <= 0 or x >= ScrW() or y <= 0 or y >= ScrH())
		end
	end
	pnt.DoMove = function(me)
		local mx, my = gui.MousePos()
		me:SetPos(mx - me:GetWide() * 0.5, my - me:GetTall() * 0.5)

		local sp = LocalPlayer():GetShootPos()
		local t = {
			start = sp,
			endpos = sp + gui.ScreenToVector(mx, my) * 16384,
			filter = ents.GetAll(),
		}
		local tr = util.TraceLine(t)
		me.m_v3DPos = tr.HitPos
	end

		local function AddAxis(axis, ap, dir, col)
			cam.Start3D()
				local ap = (pos + dir * 64):ToScreen()
			cam.End3D()

			local ax = self:QuickButton(axis, function() end, parent)
			ax:SetSize(16, 16)
			ax:SetPos(ap.x - 8, ap.y - 8)
			ax.m_Background = col
			ax.OnMousePressed = pnt.OnMousePressed
			ax.OnMouseReleased = pnt.OnMouseReleased
			ax.OnCursorMoved = pnt.OnCursorMoved
			ax.DoMove = function()
				debugoverlay.Line(pos, pos + dir * 16384, 1, color_white, true)

				cam.Start3D()
					local np = gui.ScreenToVector(gui.MousePos())
				cam.End3D()

				local pp = np:Cross(pos)
				debugoverlay.Line(pp, pp + dir * 512, 1, Color(255, 0, 0), true)
			end
		end

		-- local x = AddAxis("X", xp, Vector(1, 0, 0), Color(255, 0, 0))
		-- local y = AddAxis("Y", yp, Vector(0, 1, 0), Color(0, 255, 0))
		-- local z = AddAxis("Z", zp, Vector(0, 0, 1), Color(0, 0, 255))

	pnt.OnRemove = function(me)
		-- if (IsValid(x)) then x:Remove() end
		-- if (IsValid(y)) then y:Remove() end
		-- if (IsValid(z)) then z:Remove() end
	end

	return pnt
end

local shape = SH_SZ.Shapes.cube
local points = {}
local sz_size = SH_SZ.MaximumSize
local sz_options = table.Copy(SH_SZ.DefaultOptions)
local curstep = 1
local curcat = 1
local cur, cursz
local last_mx, last_my
local moving_cam = false

local function step()
	return shape.steps[curstep]
end

local function advance_step()
	curstep = curstep + 1

	local new = step()
	_SZ_EDITOR_SIZE:SetVisible(new.type == "confirm")
end

local function reset()
	for _, pnt in pairs (points) do
		pnt:Remove()
	end

	points = {}
	curstep = 1
	_SZ_EDITOR_SIZE:SetVisible(false)
end

hook.Add("PostDrawTranslucentRenderables", "SH_SZ.PostDrawTranslucentRenderables", function()
	if (_SZ_EDITOR_OPEN and #points >= shape.points) then
		local pts = {}
		for _, v in ipairs (points) do
			table.insert(pts, v.m_v3DPos)
		end

		cam.Start3D()
			shape.render(pts, sz_size, color_white)
		cam.End3D()
	end
end)

local ss, styl, th, m, m2 = SH_SZ:GetScreenScale(), SH_SZ.Style, SH_SZ:GetPadding(), SH_SZ:GetMargin(), SH_SZ:GetMargin() * 0.5

function SH_SZ:MakeTabAdd(body)
	local tab_add = vgui.Create("DPanel", body)
	tab_add:SetDrawBackground(false)
	tab_add:Dock(FILL)

		local lbl = self:QuickLabel(L"safezone_type", "{prefix}Large", styl.text, tab_add)
		lbl:Dock(TOP)
		lbl:DockMargin(0, 0, 0, m2)

		local types = vgui.Create("DPanel", tab_add)
		types:SetTall(32 * ss + m * 2)
		types:Dock(TOP)
		types.Paint = function(me, w, h)
			draw.RoundedBox(4, 0, 0, w, h, styl.inbg)
		end

		for tid, typ in pairs (self.Shapes) do
			local mat = Material(typ.icon, "noclamp smooth")

			local tbtn = vgui.Create("DButton", types)
			tbtn:SetToolTip(L(typ.name))
			tbtn:SetText("")
			tbtn:SetSize(types:GetTall(), types:GetTall())
			tbtn:Dock(LEFT)
			tbtn.Paint = function(me, w, h)
				if (shape.id == typ.id) then
					draw.RoundedBox(4, m2, m2, w - m, h - m, styl.header)
				end

				surface.SetMaterial(mat)
				surface.SetDrawColor(styl.text)
				surface.DrawTexturedRect(w * 0.5 - 16 * ss, h * 0.5 - 16 * ss, 32 * ss, 32 * ss)
			end
			tbtn.DoClick = function(me, w, h)
				shape = typ
				reset()
			end
		end

		local lbl = self:QuickLabel(L"options", "{prefix}Large", styl.text, tab_add)
		lbl:Dock(TOP)
		lbl:DockMargin(0, m2, 0, m2)

		local opts = vgui.Create("DScrollPanel", tab_add)
		opts:Dock(FILL)
		opts:GetCanvas():DockPadding(m2, m2, m2, m2)
		opts.Paint = function(me, w, h)
			draw.RoundedBox(4, 0, 0, w, h, styl.inbg)
		end
		self:PaintScroll(opts)

			local function AddOption(id, text)
				local opt = sz_options[id] or self.DefaultOptions[id]

				local lbl = self:QuickLabel(L(text), "{prefix}Medium", styl.text, opts)
				lbl:SetMouseInputEnabled(true)
				lbl:SetKeyboardInputEnabled(true)
				lbl:SetTextInset(lbl:GetTall() + m2, 0)
				lbl:Dock(TOP)
				lbl:DockMargin(0, 0, 0, m2)

				if (isbool(opt)) then
					local btn = self:QuickButton("", function()
						sz_options[id] = not sz_options[id]
					end, lbl)
					btn:SetSize(lbl:GetTall(), lbl:GetTall())
					btn.Paint = function(me, w, h)
						local ok = sz_options[id]
						draw.RoundedBox(4, 0, 0, w, h, ok and styl.header or styl.bg)

						if (ok) then
							draw.SimpleText("✓", "SH_SZ.Medium", w * 0.5, h * 0.5, styl.text, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
						end
					end
				elseif (isnumber(opt)) then
					local entry = self:QuickEntry(opt, lbl)
					entry:SetNumeric(true)
					entry:SetSize(lbl:GetTall() * 2, lbl:GetTall())
					entry:DockMargin(0, m, 0, m)
					entry.OnValueChange = function(me, tx)
						sz_options[id] = tonumber(tx) or 0
					end

					lbl:SetTextInset(entry:GetWide() + m2, 0)
				elseif (isstring(opt)) then
					local entry = self:QuickEntry(opt, lbl)
					entry:SetSize(lbl:GetTall() * 10, lbl:GetTall())
					entry:DockMargin(0, m, 0, m)
					entry.OnValueChange = function(me, tx)
						sz_options[id] = tx
					end

					lbl:SetTextInset(entry:GetWide() + m2, 0)
				end
			end

			AddOption("name", "name")
			AddOption("namecolor", "name_color")
			AddOption("entermsg", "enter_message")
			AddOption("leavemsg", "leave_message")
			AddOption("hud", "enable_hud_indicator")
			AddOption("noatk", "prevent_attacking_with_weapons")
			AddOption("nonpc", "automatically_remove_npcs")
			AddOption("noprop", "delete_non_admin_props")
			AddOption("ptime", "time_until_protection_enables")

		local btns = vgui.Create("DPanel", tab_add)
		btns:SetDrawBackground(false)
		btns:Dock(BOTTOM)
		btns:DockMargin(0, m, 0, 0)

			local resetbtn = self:QuickButton(L"reset", function() end, btns)
			resetbtn:SetWide(100 * ss)
			resetbtn:Dock(LEFT)
			resetbtn.DoClick = function()
				reset()
			end

			local confirm = self:QuickButton(L"confirm", function() end, btns)
			confirm:SetWide(100 * ss)
			confirm:Dock(RIGHT)
			confirm.DoClick = function()
				if (#points < shape.points) then
					return end

				net.Start("SH_SZ.New")
					net.WriteUInt(shape.id, 16)

					for i = 1, shape.points do
						net.WriteVector(points[i].m_v3DPos)
					end

					net.WriteFloat(sz_size)

					net.WriteUInt(table.Count(sz_options), 16)
					for opt, val in pairs (sz_options) do
						net.WriteString(opt)
						net.WriteType(val)
					end
				net.SendToServer()

				reset()
			end

		btns.Think = function()
			confirm:SetVisible(step().type == "confirm")
		end

	return tab_add
end

function SH_SZ:MakeTabEdit(body)
	cur, cursz = nil, nil

	local tab_edit = vgui.Create("DPanel", body)
	tab_edit:SetVisible(false)
	tab_edit:SetDrawBackground(false)
	tab_edit:Dock(FILL)

		local scroll = vgui.Create("DScrollPanel", tab_edit)
		scroll:SetWide(120 * ss)
		scroll:Dock(LEFT)
		scroll:GetCanvas():DockPadding(m2, m2, m2, m2)
		scroll.Paint = function(me, w, h)
			draw.RoundedBox(4, 0, 0, w, h, styl.inbg)
		end
		self:PaintScroll(scroll)

		local edit = vgui.Create("DScrollPanel", tab_edit)
		edit:SetVisible(false)
		edit:Dock(FILL)
		edit:DockMargin(m, 0, 0, 0)
		edit:GetCanvas():DockPadding(m2, m2, m2, m2)
		edit.Paint = scroll.Paint
		tab_edit.m_Edit = edit
		self:PaintScroll(edit)

			edit.BuildList = function(me, sz)
				me:Clear()

				local lbl = self:QuickLabel(L"options", "{prefix}Large", styl.text, edit)
				lbl:Dock(TOP)
				lbl:DockMargin(0, 0, 0, m2)

				local function AddOption(id, text)
					local opt = sz.opts[id] or self.DefaultOptions[id]

					local lbl = self:QuickLabel(L(text), "{prefix}Medium", styl.text, edit)
					lbl:SetMouseInputEnabled(true)
					lbl:SetKeyboardInputEnabled(true)
					lbl:SetTextInset(lbl:GetTall() + m2, 0)
					lbl:Dock(TOP)
					lbl:DockMargin(0, 0, 0, m2)

					if (isbool(opt)) then
						local btn = self:QuickButton("", function()
							sz.opts[id] = not sz.opts[id]
						end, lbl)
						btn:SetSize(lbl:GetTall(), lbl:GetTall())
						btn.Paint = function(me, w, h)
							local ok = sz.opts[id]
							draw.RoundedBox(4, 0, 0, w, h, ok and styl.header or styl.bg)

							if (ok) then
								draw.SimpleText("✓", "SH_SZ.Medium", w * 0.5, h * 0.5, styl.text, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
							end
						end
					elseif (isnumber(opt)) then
						local entry = self:QuickEntry(opt, lbl)
						entry:SetNumeric(true)
						entry:SetSize(lbl:GetTall() * 2, lbl:GetTall())
						entry:DockMargin(0, m, 0, m)
						entry.OnValueChange = function(me, tx)
							sz.opts[id] = tonumber(tx) or 0
						end

						lbl:SetTextInset(entry:GetWide() + m2, 0)
					elseif (isstring(opt)) then
						local entry = self:QuickEntry(opt, lbl)
						entry:SetSize(lbl:GetTall() * 10, lbl:GetTall())
						entry:DockMargin(0, m, 0, m)
						entry.OnValueChange = function(me, tx)
							sz.opts[id] = tx
						end

						lbl:SetTextInset(entry:GetWide() + m2, 0)
					end
				end

				AddOption("name", "name")
				AddOption("namecolor", "name_color")
				AddOption("entermsg", "enter_message")
				AddOption("leavemsg", "leave_message")
				AddOption("hud", "enable_hud_indicator")
				AddOption("noatk", "prevent_attacking_with_weapons")
				AddOption("nonpc", "automatically_remove_npcs")
				AddOption("noprop", "delete_non_admin_props")
				AddOption("ptime", "time_until_protection_enables")

				me:SetVisible(true)
			end

		local btns = vgui.Create("DPanel", tab_edit)
		btns:SetVisible(false)
		btns:SetDrawBackground(false)
		btns:Dock(BOTTOM)
		btns:DockMargin(0, m, 0, 0)
		tab_edit.m_Buttons = btns

			local save = self:QuickButton(L"save", function() end, btns)
			save:SetWide(100 * ss)
			save:Dock(RIGHT)
			save.DoClick = function()
				net.Start("SH_SZ.Edit")
					net.WriteUInt(cur, 16)

					local shape = self.ShapesIndex[cursz.shape]
					for i = 1, shape.points do
						net.WriteVector(points[i].m_v3DPos)
						self.SafeZones[cur].points[i] = points[i].m_v3DPos
					end

					net.WriteFloat(sz_size)
					self.SafeZones[cur].size = sz_size

					net.WriteUInt(table.Count(cursz.opts), 16)
					for k, v in pairs (cursz.opts) do
						net.WriteString(k)
						net.WriteType(v)
						self.SafeZones[cur].opts[k] = v
					end
				net.SendToServer()

				if (IsValid(cursz.btn)) then
					cursz.btn:SetText(cursz.opts.name or "?")
				end
			end

			local tp = self:QuickButton(L"teleport_there", function() end, btns)
			tp:SetWide(100 * ss)
			tp:Dock(RIGHT)
			tp:DockMargin(m, 0, m, 0)
			tp.DoClick = function(me)
				net.Start("SH_SZ.Teleport")
					net.WriteUInt(cur, 16)
				net.SendToServer()

				me.m_vTeleporting = LocalPlayer():GetPos()
			end
			tp.Think = function(me)
				-- Update button positions
				if (me.m_vTeleporting and me.m_vTeleporting ~= LocalPlayer():GetPos()) then
					timer.Simple(0, function()
						for _, pnt in pairs (points) do
							if (!IsValid(pnt)) then
								return end

							local ts = pnt.m_v3DPos:ToScreen()
							pnt:SetPos(ts.x - pnt:GetWide() * 0.5, ts.y - pnt:GetTall() * 0.5)

							me.m_vTeleporting = nil
						end
					end)
				end
			end

			local delete = self:QuickButton(L"delete", function() end, btns)
			delete:SetColor(styl.close_hover)
			delete:SetWide(100)
			delete:Dock(RIGHT)
			delete.DoClick = function()
				net.Start("SH_SZ.Delete")
					net.WriteUInt(cur, 16)
				net.SendToServer()

				if (IsValid(cursz.btn)) then
					edit:SetVisible(false)
					btns:SetVisible(false)
					_SZ_EDITOR_SIZE:SetVisible(false)
					cursz.btn:Remove()

					for _, pnt in pairs (points) do
						if (!IsValid(pnt)) then
							return end

						pnt:Remove()
					end
					points = {}

					table.remove(self.SafeZones, cur)
					cur, cursz = nil, nil
				end
			end

		for i, sz in pairs (self.SafeZones) do
			local btn = self:QuickButton(sz.opts.name or "?", function(me)
				if (cur == i) then
					return end

				cur = i
				cursz = table.Copy(sz)
				shape = self.ShapesIndex[sz.shape]

				reset()

				for _, o in pairs (self.SafeZones) do
					o.btn:SetColor(styl.text)
				end

				me:SetColor(styl.header)

				edit:BuildList(cursz)
				btns:SetVisible(true)
				_SZ_EDITOR_SIZE:SetVisible(true)
				_SZ_EDITOR_SIZE:Set(sz.size, true)

				for _, point in pairs (sz.points) do
					local ts = point:ToScreen()

					local pnt = self:MakePoint(_SZ_EDITOR_CANVAS, point, ts.x, ts.y)
					table.insert(points, pnt)
				end
			end, scroll)
			btn:Dock(TOP)
			btn:DockMargin(0, 0, 0, m2)
			btn.m_Background = styl.bg
			sz.btn = btn
		end

	return tab_edit
end

function SH_SZ:ShowEditor()
	if (IsValid(_SZ_EDITOR)) then _SZ_EDITOR:Close() end
	if (IsValid(_SZ_EDITOR_SIZE)) then _SZ_EDITOR_SIZE:Close() end

	if (!self.Usergroups[LocalPlayer():GetUserGroup()]) then
		return end

	ss = self:GetScreenScale()
	styl = self.Style
	th, m = self:GetPadding(), self:GetMargin()
	m2 = m * 0.5

	shape = SH_SZ.Shapes.cube
	points = {}
	sz_size = SH_SZ.MaximumSize
	sz_options = table.Copy(self.DefaultOptions)
	curstep = 1
	curcat = 1
	last_mx, last_my = gui.MousePos()
	moving_cam = false

	local tab_add, tab_edit

	local cont = vgui.Create("DPanel")
	cont:SetDrawBackground(false)
	cont:Dock(FILL)
	cont.OnMousePressed = function(me, mc)
		if (mc == MOUSE_RIGHT) then
			moving_cam = true
			last_mx, last_my = gui.MousePos()
		end
	end
	cont.OnMouseReleased = function(me, mc)
		if (mc == MOUSE_RIGHT) then
			moving_cam = false
		end

		if (step().type ~= "place" or !tab_add:IsVisible()) then
			return end

		if (mc == MOUSE_LEFT) then
			local mx, my = gui.MousePos()

			local sp = LocalPlayer():GetShootPos()
			local t = {
				start = sp,
				endpos = sp + gui.ScreenToVector(mx, my) * 16384,
				filter = ents.GetAll(),
			}
			local tr = util.TraceLine(t)

			local pnt = self:MakePoint(me, tr.HitPos, mx, my)
			table.insert(points, pnt)

			advance_step()
		end
	end
	cont.OnCursorMoved = function(me)
		local pnt = me.m_DraggingPoint
		if (IsValid(pnt)) then
			pnt:DoMove()
		end

		if (moving_cam) then
			local x, y = gui.MousePos()
			local dx, dy = x - last_mx, y - last_my
			if (dx ~= 0 or dy ~= 0) then
				local ang = LocalPlayer():EyeAngles()
				LocalPlayer():SetEyeAngles(ang - Angle(-dy * 0.25, dx * 0.25, 0))
				last_mx, last_my = x, y
			end
		end
	end
	cont.PaintOver = function(me, w, h)
		if (!tab_add:IsVisible()) then
			return end

		local mx, my = gui.MousePos()
		local wi, he = w * 0.25, 24 * ss
		local x, y = w * 0.5 - wi * 0.5, h * 0.7 - he * 0.5

		local mult = 1
		if (mx >= x and mx <= x + wi and my >= y and my <= y + he) then
			mult = 0.5
		end

		surface.SetAlphaMultiplier(mult)
			draw.RoundedBoxEx(4, x, y, wi * 0.1, he, styl.header, true, false, true, false)
			draw.RoundedBoxEx(4, x + wi * 0.1, y, wi * 0.9, he, styl.inbg, false, true, false, true)

			draw.SimpleText(curstep .. "/" .. #shape.steps, "SH_SZ.Large", x + wi * 0.05, y + he * 0.5, styl.text, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
			draw.SimpleText(self:GetStepText(step(), curstep), "SH_SZ.Large", x + wi * 0.1 + he * 0.25, y + he * 0.5, styl.text, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
		surface.SetAlphaMultiplier(1)
	end
	_SZ_EDITOR_CANVAS = cont

	local frame = self:MakeWindow("Safe Zone Editor")
	frame:SetSize(self.WindowSize.w * ss, self.WindowSize.h * ss)
	frame:SetPos(th, th)
	frame:MakePopup()
	frame.OnClose = function()
		cont:Remove()
		_SZ_EDITOR_SIZE:Close()
		_SZ_EDITOR_OPEN = false

		net.Start("SH_SZ.Closed")
		net.SendToServer()
	end
	_SZ_EDITOR = frame
	_SZ_EDITOR_OPEN = true

		local cats = vgui.Create("DScrollPanel", frame)
		cats:SetWide(100 * ss)
		cats:Dock(LEFT)
		cats.Paint = function(me, w, h)
			surface.SetDrawColor(styl.inbg)
			surface.DrawRect(0, 0, w, h)
		end
		self:PaintScroll(cats)

			local cat_add = self:QuickButton(L"add", function() end, cats)
			cat_add:SetContentAlignment(4)
			cat_add:SetTextInset(m + 4, 0)
			cat_add:SetTall(40 * ss)
			cat_add:Dock(TOP)
			cat_add.m_iCatID = 1
			cat_add.PaintOver = function(me, w, h)
				if (curcat == me.m_iCatID) then
					surface.SetDrawColor(styl.header)
					surface.DrawRect(0, 0, 4, h)
				end
			end
			cat_add.DoClick = function()
				reset()
				curcat = 1

				tab_add:SetVisible(true)
				tab_edit:SetVisible(false)
			end

			local cat_list = self:QuickButton(L"edit", function() end, cats)
			cat_list:SetContentAlignment(4)
			cat_list:SetTextInset(m + 4, 0)
			cat_list:SetTall(40 * ss)
			cat_list:Dock(TOP)
			cat_list.m_iCatID = 2
			cat_list.PaintOver = cat_add.PaintOver
			cat_list.DoClick = function()
				reset()
				curcat = 2

				tab_add:SetVisible(false)
				tab_edit:SetVisible(true)

				cur, cursz = nil, nil
				tab_edit.m_Edit:Clear()
				tab_edit.m_Edit:SetVisible(false)
				tab_edit.m_Buttons:SetVisible(false)
			end

		local body = vgui.Create("DPanel", frame)
		body:SetDrawBackground(false)
		body:Dock(FILL)
		body:DockPadding(m, m, m, m)

			tab_add = self:MakeTabAdd(body)
			tab_edit = self:MakeTabEdit(body)

	local frame = self:MakeWindow(L"size")
	frame:SetVisible(false)
	frame.m_Close:Remove()
	frame:SetSize(200 * ss, 300 * ss)
	frame:MoveBelow(_SZ_EDITOR, th)
	frame:AlignLeft(th)
	_SZ_EDITOR_SIZE = frame

		local re_size = vgui.Create("DPanel", frame)
		re_size:SetDrawBackground(false)
		re_size:Dock(FILL)
		re_size:InvalidateParent(true)

			local size_adj = self:QuickButton("▲ " .. self.MaximumSize, function() end, re_size)
			size_adj:SetWide(re_size:GetWide())
			size_adj.OnMousePressed = function(me)
				me.m_iOldY = gui.MouseY()
				me.m_bDragging = true
			end
			size_adj.OnMouseReleased = function(me)
				me.m_bDragging = false
			end
			size_adj.OnCursorExited = size_adj.OnMouseReleased
			size_adj.Set = function(me, f, p)
				me:SetText("▲ " .. f)
				sz_size = f

				if (p) then
					me.y = (re_size:GetTall() - me:GetTall()) * (1 - f / self.MaximumSize)
				end
			end
			size_adj.Think = function(me)
				if (me.m_bDragging) then
					local my = gui.MouseY()
					local oy = me.m_iOldY
					if (oy) then
						local dy = my - oy
						local new = math.Clamp(me.y + dy, 0, re_size:GetTall() - me:GetTall())
						me.y = new

						local frac = me.y / (re_size:GetTall() - me:GetTall())
						local height = math.Round((1 - frac) * self.MaximumSize)
						me:Set(height)
					end

					me.m_iOldY = my
				end
			end

		local fill = self:QuickButton(L"fill_vertically", function()
			local fi = 0
			for _, pnt in pairs (points) do
				local pos = pnt.m_v3DPos
				local t = {start = pos, endpos = pos + Vector(0, 0, 16384), filter = ents.GetAll()}
				local tr = util.TraceLine(t)

				local zdist = math.Round(math.abs(tr.HitPos.z - pos.z))
				if (fi == 0 or zdist < fi) then
					fi = zdist
				end
			end

			fi = math.min(fi, self.MaximumSize)

			if (fi > 0) then
				size_adj:Set(fi, true)
			end
		end, frame)
		fill:Dock(TOP)

		re_size.Paint = function(me, w, h)
			surface.SetAlphaMultiplier(0.5)
				surface.SetDrawColor(styl.header)
				surface.DrawRect(0, size_adj.y, w, h)
			surface.SetAlphaMultiplier(1)
		end
		frame.Set = function(me, ...)
			size_adj:Set(...)
		end
end

local undomodelblend = false

hook.Add("PreDrawViewModel", "SH_SZ.PreDrawViewModel", function()
	if (_SZ_EDITOR_OPEN) then
		undomodelblend = true
		render.SetBlend(0)
	end
end)

hook.Add("PreDrawPlayerHands", "SH_SZ.PreDrawPlayerHands", function()
	if (_SZ_EDITOR_OPEN) then
		undomodelblend = true
		render.SetBlend(0)
	end
end)

hook.Add("CreateMove", "SH_SZ.CreateMove", function(cmd)
	if (!_SZ_EDITOR_OPEN) then
		return end

	local layout = SH_SZ.CameraControls
	if (input.IsKeyDown(layout.forward)) then
		cmd:SetForwardMove(10000)
	elseif (input.IsKeyDown(layout.back)) then
		cmd:SetForwardMove(-10000)
	end

	if (input.IsKeyDown(layout.left)) then
		cmd:SetSideMove(-10000)
	elseif (input.IsKeyDown(layout.right)) then
		cmd:SetSideMove(10000)
	end
end)

hook.Add("HUDPaint", "SH_SZ.HUDPaintCamera", function(cmd)
	if (!_SZ_EDITOR_OPEN) then
		return end

	local x, y = _SZ_EDITOR:GetPos()
	y = y * 2 + _SZ_EDITOR:GetTall()

	if (IsValid(_SZ_EDITOR_SIZE)) then
		x = x * 2 + _SZ_EDITOR_SIZE:GetWide()
	end

	local layout = SH_SZ.CameraControls
	local keyz = input.GetKeyName(layout.forward) .. "/" .. input.GetKeyName(layout.left) .. "/" .. input.GetKeyName(layout.back) .. "/" .. input.GetKeyName(layout.right)

	draw.SimpleText(keyz:upper() .. ": " .. L"move_camera", "SH_SZ.Large", x, y, SH_SZ.Style.text)
	draw.SimpleText(L"rotate_camera", "SH_SZ.Large", x, y + draw.GetFontHeight("SH_SZ.Large"), SH_SZ.Style.text)
end)

hook.Add("PostDrawViewModel", "SH_SZ.PostDrawViewModel", function()
	if (undomodelblend) then
		undomodelblend = false
		render.SetBlend(1)
	end
end)

concommand.Add("sh_safezones", function()
	net.Start("SH_SZ.Menu")
	net.SendToServer()
end)

net.Receive("SH_SZ.Menu", function()
	local sz = {}
	for i = 1, net.ReadUInt(16) do
		local t = {}
		sz[net.ReadUInt(16)] = t

		local shapeid = net.ReadUInt(16)
		t.shape = shapeid

		local shape = SH_SZ.ShapesIndex[shapeid]
		if (shape) then
			local points = {}
			for j = 1, shape.points do
				points[j] = net.ReadVector()
			end
			t.points = points
			t.size = net.ReadFloat()
		end

		local opts = {}
		for j = 1, net.ReadUInt(16) do
			opts[net.ReadString()] = net.ReadType()
		end
		t.opts = opts
	end

	SH_SZ.SafeZones = sz
	SH_SZ:ShowEditor()
end)
--addons/ch_atm/lua/ch_atm/shared/ch_atm_utils.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/shared/currencies/bricks_credit_store.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/shared/currencies/pointshop2.lua:
CH_ATM.Currencies[ "pointshop2" ] = {
	Name = "PointShop 2 Points",
	
	AddMoney = function( ply, amount )
		ply:PS2_AddStandardPoints( amount )
	end,
	
	TakeMoney = function( ply, amount )
		ply:PS2_AddStandardPoints( -amount )
	end,
	
	GetMoney = function( ply )
		return ply.PS2_Wallet.points
	end,
	
	CanAfford = function( ply, amount )
		return ply.PS2_Wallet.points >= amount
	end,
	
	FormatMoney = function( amount )
		return string.Comma( amount ) .. " point" .. (amount > 1 and "s" or "")
	end,
	
	CurrencyAbbreviation = function()
		return "PTS"
	end,
}
--addons/ch_atm/lua/ch_atm/shared/currencies/sh_pointshop_premium.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/client/ch_atm_hacking.lua:
--[[
	Net message to update the clientside cooldown counter on an ATM
--]]
net.Receive( "CH_ATM_Net_RestartHackCooldownTimer", function( length, ply )
	local atm = net.ReadEntity()
	local cooldown_time = CH_ATM.Config.ATMHackCooldownTime
	
	atm.HackCooldownTimer = CurTime() + cooldown_time
end )

--[[
	Draw ATMs that are being hacked to cops
--]]
local function CH_ATM_UnitToMeter( unit )
	return math.Round( unit * 0.0195 ) .."m"
end

local CH_ATM_HackedATMCachedDist = CH_ATM_HackedATMCachedDist or {}
local atm_being_hacked = CH_ATM.LangString( "ATM Being Hacked" )

function CH_ATM.DisplayATMBeingHacked()
	local ply = LocalPlayer()
	
	if ply:CH_ATM_IsPoliceJob() then
		for k, atm in ipairs( ents.FindByClass( "ch_atm" ) ) do
			if IsValid( atm ) and atm:GetIsBeingHacked() then
				local pos = atm:GetPos():ToScreen()
				
				-- Cache distance every 0.5 second.
				-- We're using Distance here because I want to show in units.
				-- Unfortunately cannot use DistToSqr for this.

				local ct = CurTime()
				if ( not CH_ATM_HackedATMCachedDist[ atm ] or CH_ATM_HackedATMCachedDist[ atm ].ct + 0.5 < ct ) then
					CH_ATM_HackedATMCachedDist[ atm ] = {
						dist = atm:GetPos():Distance( ply:GetPos() ),
						ct = ct
					}
				end
				
				local dist_to_atm = CH_ATM.LangString( "Distance" ) ..": ".. CH_ATM_UnitToMeter( CH_ATM_HackedATMCachedDist[ atm ].dist )
			
				surface.SetFont( "CH_ATM_Font_ATMScreen_Size35" )
				local x, y = surface.GetTextSize( atm_being_hacked )
				local flash_col = Color( 255 * math.abs( math.sin( CurTime() * 1.2 ) ), 0, 0, 255 )
				
				draw.SimpleTextOutlined( atm_being_hacked, "CH_ATM_Font_ATMScreen_Size35", pos.x - x / 2, pos.y - 30, flash_col, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 2, color_black )
				
				surface.SetFont( "CH_ATM_Font_ATMScreen_Size25" )
				local x, y = surface.GetTextSize( dist_to_atm )
				draw.SimpleTextOutlined( dist_to_atm, "CH_ATM_Font_ATMScreen_Size25", pos.x - x / 2, pos.y, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 2, color_black )
			end
		end
	end
end
hook.Add( "HUDDrawTargetID", "CH_ATM.DisplayATMBeingHacked", CH_ATM.DisplayATMBeingHacked )
--addons/ch_atm/lua/ch_atm/client/ch_atm_leaderboard.lua:
CH_ATM.Leaderboard = CH_ATM.Leaderboard or {}

--[[
	Receive the leaderboard and update the CL table
--]]
net.Receive( "CH_ATM_Net_NetworkLeaderboard", function( len, ply )
	local ply = LocalPlayer()
	local amount_of_entries = net.ReadUInt( 4 )
	
	for i = 1, amount_of_entries do
		CH_ATM.Leaderboard[ i ] = {
			Name = net.ReadString(),
			Amount = net.ReadDouble(),
		}
	end

	CH_ATM.DebugPrint( "CLIENTSIDE ATM LEADERBOARD NETWORKED FOR: ".. ply:Nick() )
	CH_ATM.DebugPrint( CH_ATM.Leaderboard )
end )
--addons/darkrpbankrobbery2/lua/ch_bank_robbery/shared/bank_metas.lua:
local PMETA = FindMetaTable( "Player" )

function PMETA:CH_BankVault_IsPoliceOfficer()
	return CH_BankVault.Config.GovernmentTeams[ team.GetName( self:Team() ) ]
end

function PMETA:CH_BankVault_IsAllowedTeam()
	return CH_BankVault.Config.AllowedTeams[ team.GetName( self:Team() ) ]
end

function PMETA:CH_BankVault_IsRequiredModel()
	return CH_BankVault.Config.RequiredModels[ ply:GetModel() ]
end
--addons/ch_bitminers_dlc/lua/ch_bitminers_dlc/client/bitminers_dlc_fonts.lua:
-- Bitminer Fonts
surface.CreateFont( "BITMINER_DLC_TabletSmaller", {
    font = "Roboto Condensed", 
    size = 40,
    weight = 800
} )

surface.CreateFont( "BITMINER_DLC_TabletSmall", {
    font = "Roboto Condensed", 
    size = 60,
    weight = 800
} )

surface.CreateFont( "BITMINER_DLC_TabletMedium", {
    font = "Roboto Condensed", 
    size = 80,
    weight = 800
} )

surface.CreateFont( "BITMINER_DLC_TabletLarge", {
    font = "Roboto Condensed", 
    size = 100,
    weight = 800
} )
--addons/ch_bitminers/lua/autorun/ch_bitminers_initialize.lua:
return gluapack()()
--addons/ch_bitminers/lua/ch_bitminers/client/bitminers_net.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/shared/config/upgrades/upgrade_capacity.lua:
CH_Mayor.Upgrades["upgrade_capacity"] = {
	Name = "Kapasite",
	Icon = Material( "materials/craphead_scripts/advanced_mayor/gui/upgrades/capacity.png", "noclamp smooth" ),
	Description = "Belediye kasanızın maksimum kapasitesini artırır.",
	Levels = {
		[1] = {
			Price = 1000,
			Description = "Maksimum kapasiteyi $200,000'a yükseltir.",
			UpgradeFunction = function( ply )
				CH_Mayor.SetMaxVaultMoney( ply, 200000 )
			end,
		},
		[2] = {
			Price = 2000,
			Description = "Maksimum kapasiteyi $300,000'a yükseltir.",
			UpgradeFunction = function( ply )
				CH_Mayor.SetMaxVaultMoney( ply, 300000 )
			end,
		},
		[3] = {
			Price = 3000,
			Description = "Maksimum kapasiteyi $400,000'a yükseltir.",
			UpgradeFunction = function( ply )
				CH_Mayor.SetMaxVaultMoney( ply, 400000 )
			end,
		},
		[4] = {
			Price = 4000,
			Description = "Maksimum kapasiteyi $500,000'a yükseltir.",
			UpgradeFunction = function( ply )
				CH_Mayor.SetMaxVaultMoney( ply, 500000 )
			end,
		},
		[5] = {
			Price = 5000,
			Description = "Maksimum kapasiteyi $600,000'a yükseltir.",
			UpgradeFunction = function( ply )
				CH_Mayor.SetMaxVaultMoney( ply, 600000 )
			end,
		},
	},
	RemoveFunction = function( ply )
		CH_Mayor.SetMaxVaultMoney( ply, CH_Mayor.Config.VaultDefaultMax )
	end,
}

--addons/ch_mayor/lua/ch_adv_mayor/shared/ch_mayor_utils.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_announcement.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_licenses.lua:
--[[
	MAYOR DASHBOARD MENU
--]]
function CH_Mayor.LicensesMenu()
	local ply = LocalPlayer()

	local GUI_LicensesFrame = vgui.Create( "DFrame" )
	GUI_LicensesFrame:SetTitle( "" )
	GUI_LicensesFrame:SetSize( CH_Mayor.ScrW * 0.6, CH_Mayor.ScrH * 0.665 )
	GUI_LicensesFrame:Center()
	GUI_LicensesFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "City Management" ), "CH_Mayor_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Draw titles
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( w * 0.182, h * 0.0724, w * 0.812, h * 0.06 )
		
		draw.SimpleText( "#", "CH_Mayor_Font_Size10", w * 0.2, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Citizen" ), "CH_Mayor_Font_Size10", w * 0.375, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Job" ), "CH_Mayor_Font_Size10", w * 0.55, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Has gun license" ), "CH_Mayor_Font_Size10", w * 0.725, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Action" ), "CH_Mayor_Font_Size10", w * 0.9, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_LicensesFrame:MakePopup()
	GUI_LicensesFrame:SetDraggable( false )
	GUI_LicensesFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_CloseMenu:SetPos( CH_Mayor.ScrW * 0.582, CH_Mayor.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.Red or color_white )
		surface.SetMaterial( CH_Mayor.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_LicensesFrame:Remove()
	end
	
	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Dashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Dashboard" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.DashboardMenu()
	end

	local GUI_UpgradesFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_UpgradesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_UpgradesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.095 )
	GUI_UpgradesFrameBtn:SetText( "" )
	GUI_UpgradesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Upgrades )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Upgrades" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_UpgradesFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.UpgradesMenu()
	end
	
	local GUI_TaxesFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_TaxesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_TaxesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.1425 )
	GUI_TaxesFrameBtn:SetText( "" )
	GUI_TaxesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Taxes )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Taxes" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TaxesFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.TaxesMenu()
	end

	local GUI_CatalogFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_CatalogFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CatalogFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.19 )
	GUI_CatalogFrameBtn:SetText( "" )
	GUI_CatalogFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Catalog )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Catalog" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CatalogFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.CatalogMenu()
	end
	
	local GUI_LawsFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_LawsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LawsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.2375 )
	GUI_LawsFrameBtn:SetText( "" )
	GUI_LawsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Laws )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Laws" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LawsFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.LawsMenu()
	end
	
	local GUI_LicensesFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_LicensesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LicensesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.285 )
	GUI_LicensesFrameBtn:SetText( "" )
	GUI_LicensesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Licenses )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Licenses" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LicensesFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.LicensesMenu( )
	end
	
	local GUI_OfficialsManagementFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_OfficialsManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_OfficialsManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.3325 )
	GUI_OfficialsManagementFrameBtn:SetText( "" )
	GUI_OfficialsManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_OfficialsManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Officials" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OfficialsManagementFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.OfficialsMenu()
	end
	
	local GUI_CiviliansManagementFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_CiviliansManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.38 )
	GUI_CiviliansManagementFrameBtn:SetText( "" )
	GUI_CiviliansManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_CivilianManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Civilians" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansManagementFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.CiviliansMenu()
	end
	
	local GUI_WantedFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_WantedFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WantedFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.4275 )
	GUI_WantedFrameBtn:SetText( "" )
	GUI_WantedFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Wanted )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Wanted" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WantedFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.WantedMenu()
	end
	
	local GUI_WarrantFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_WarrantFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WarrantFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.475 )
	GUI_WarrantFrameBtn:SetText( "" )
	GUI_WarrantFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Warrant )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Warrant" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WarrantFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.WarrantMenu()
	end
	
	local GUI_AnnouncementFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_AnnouncementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_AnnouncementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.5225 )
	GUI_AnnouncementFrameBtn:SetText( "" )
	GUI_AnnouncementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Announcement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Announcement" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_AnnouncementFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.AnnouncementMenu()
	end
	
	local GUI_LockdownFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_LockdownFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LockdownFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.57 )
	GUI_LockdownFrameBtn:SetText( "" )
	GUI_LockdownFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Lockdown )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Lockdown" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LockdownFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.LockdownMenu()
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_LicensesFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.6175 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Economy )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Statistics" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_LicensesFrame:Remove()
		
		CH_Mayor.StatisticsMenu()
	end
	
	-- The list of players
	local total_players = player.GetCount()
	local license_players = {}
	
	for k, v in ipairs( player.GetAll() ) do
		if v != ply then
			table.insert( license_players, v )
		end
	end
	
	local GUI_PlayerList = vgui.Create( "DPanelList", GUI_LicensesFrame )
	GUI_PlayerList:SetSize( CH_Mayor.ScrW * 0.491, CH_Mayor.ScrH * 0.563 )
	GUI_PlayerList:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.095 )
	GUI_PlayerList:EnableVerticalScrollbar( true )
	GUI_PlayerList:EnableHorizontal( true )
	GUI_PlayerList:SetSpacing( 8.4 )
	GUI_PlayerList.Paint = function( self, w, h )
		draw.RoundedBox( 0, 0, 0, w, h, color_transparent )
	end
	if ( GUI_PlayerList.VBar ) then
		GUI_PlayerList.VBar.Paint = function( self, w, h ) -- BG
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_PlayerList.VBar.btnUp.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_PlayerList.VBar.btnGrip.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_PlayerList.VBar.btnDown.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
	end
	
	for k, v in ipairs( license_players ) do
		local GUI_PlayerPanel = vgui.Create( "DPanelList" )
		GUI_PlayerPanel:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.04 )
		GUI_PlayerPanel.Paint = function( self, w, h )
			-- Background
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			if total_players <= 13 then
				surface.DrawRect( 0, 0, w, h )
			else
				surface.DrawRect( 0, 0, w * 0.986, h )
			end
			
			-- Number
			draw.SimpleText( k, "CH_Mayor_Font_Size8", w * 0.0225, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Name
			draw.SimpleText( v:Nick(), "CH_Mayor_Font_Size8", w * 0.241, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Job
			draw.SimpleText( team.GetName( v:Team() ), "CH_Mayor_Font_Size8", w * 0.455, h / 2, team.GetColor( v:Team() ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Has gun license
			if v:getDarkRPVar( "HasGunlicense" ) then
				draw.SimpleText( CH_Mayor.LangString( "Yes" ), "CH_Mayor_Font_Size8", w * 0.67, h / 2, CH_Mayor.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_Mayor.LangString( "No" ), "CH_Mayor_Font_Size8", w * 0.67, h / 2, CH_Mayor.Colors.Red, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
		end
			
		local GUI_GrantRevokeLicenseBtn = vgui.Create( "DButton", GUI_PlayerPanel )
		GUI_GrantRevokeLicenseBtn:SetSize( CH_Mayor.ScrW * 0.05, CH_Mayor.ScrH * 0.03 )
		GUI_GrantRevokeLicenseBtn:SetPos( CH_Mayor.ScrW * 0.408, CH_Mayor.ScrH * 0.005 )
		GUI_GrantRevokeLicenseBtn:SetText( "" )
		GUI_GrantRevokeLicenseBtn.Paint = function( self, w, h )
			if self:IsHovered() then
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( v:getDarkRPVar( "HasGunlicense" ) and CH_Mayor.Colors.Red or CH_Mayor.Colors.Green )
				surface.DrawRect( 0, 0, w, 1 )
				surface.DrawRect( 0, h-1, w, 1 )
				surface.DrawRect( w-1, 0, 1, h )
				surface.DrawRect( 0, 0, 1, h )
			else
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( v:getDarkRPVar( "HasGunlicense" ) and CH_Mayor.Colors.Red or CH_Mayor.Colors.Green )
				surface.DrawRect( 0, 0, 1, 10 )
				surface.DrawRect( 0, 0, 10, 1 )
				surface.DrawRect( 0, h-10, 1, 10 )
				surface.DrawRect( 0, h-1, 10, 1 )
				surface.DrawRect( w-1, 0, 1, 10 )
				surface.DrawRect( w-10, 0, 10, 1 )
				surface.DrawRect( w-1, h-10, 1, 10 )
				surface.DrawRect( w-10, h-1, 10, 1 )
			end
			
			if v:getDarkRPVar( "HasGunlicense" ) then
				draw.SimpleText( CH_Mayor.LangString( "Revoke" ), "CH_Mayor_Font_Size8", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_Mayor.LangString( "Grant" ), "CH_Mayor_Font_Size8", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
		end
		GUI_GrantRevokeLicenseBtn.DoClick = function()
			net.Start( "CH_Mayor_Net_ManageLicense" )
				net.WriteEntity( v )
				if v:getDarkRPVar( "HasGunlicense" ) then
					net.WriteBool( false )
				else
					net.WriteBool( true )
				end
			net.SendToServer()
			
			GUI_LicensesFrame:Remove()
		end
		
		GUI_PlayerList:AddItem( GUI_PlayerPanel )
	end
end
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_warrant.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/shared/config/ch_mining_config_rocks.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/client/ch_mining_inventory.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/client/ch_mining_leaderboards.lua:
CH_Mining.Leaderboards = CH_Mining.Leaderboards or {}

--[[
	Receive the leaderboard and update the CL table
--]]
net.Receive( "CH_Mining_Net_Leaderboards", function( len, ply )
	local ply = LocalPlayer()
	local temp_table = {}
	
	local leaderboard = net.ReadString()
	local amount_of_entries = net.ReadUInt( 5 )
	
	for i = 1, amount_of_entries do
		temp_table[ i ] = {
			Name = net.ReadString(),
			Amount = net.ReadDouble(),
		}
	end
	
	CH_Mining.Leaderboards[ leaderboard ] = temp_table
end )
--addons/ch_mining/lua/ch_mining/client/ch_mining_stats.lua:
net.Receive( "CH_Mining_Net_PlayerStats", function( length, ply )
	-- Setup their inventory clientside
	local ply = LocalPlayer()
	
	ply.CH_Mining_Stats = {
		["MineralsMined"] = net.ReadUInt( 32 ),
		["RocksDestroyed"] = net.ReadUInt( 32 ),
		["RocksEmptied"] = net.ReadUInt( 32 ),
		["MineralsSold"] = net.ReadUInt( 32 ),
		["MoneyEarned"] = net.ReadUInt( 32 ),
		["ItemsCrafted"] = net.ReadUInt( 32 ),
	}
end )
--addons/ch_mining/lua/ch_mining/client/ch_mining_transactions.lua:
--[[
	Receive the players transactions and network it to him
--]]
net.Receive( "CH_Mining_Net_PlayerTransactions", function( len, ply )
	local ply = LocalPlayer()
	local amount_of_entries = net.ReadUInt( 6 )
	
	-- Create transactions if not exists
	ply.CH_Mining_Transactions = CH_Mining_Transactions or {}
	
	for i = 1, amount_of_entries do
		ply.CH_Mining_Transactions[ i ] = {
			Mineral = net.ReadString(),
			Amount = net.ReadUInt( 32 ),
			Price = net.ReadUInt( 32 ),
			TimeStamp = net.ReadString(),
		}
	end
end )
--addons/ch_mining/lua/ch_mining/client/vgui/ch_mining_menu_inventory.lua:
return gluapack()()
--lua/autorun/ct_helga.lua:
player_manager.AddValidModel( "CSO2 Helga", "models/CSO2/player/ct_helga_player.mdl" );
player_manager.AddValidHands( "CSO2 Helga", "models/CSO2/player/ct_helga_arms.mdl", 0, "00000000" )

local Category = "CSO2 NPCs"

local NPC = { 	Name = "CSO2 Helga - Friendly", 
				Class = "npc_citizen",
				Model = "models/CSO2/player/ct_helga_rebel.mdl",
				Health = "40",
				KeyValues = { citizentype = 4 },
				Category = Category	}

list.Set( "NPC", "npc_CT_Helga_F", NPC )

local Category = "CSO2 NPCs"

local NPC = { 	Name = "CSO2 Helga - Hostile", 
				Class = "npc_combine_s",
				Model = "models/CSO2/player/ct_helga_combine.mdl",
				Squadname = "CSO2 Helga",
				Numgrenades = "3",
				Health = "50",
				Category = Category	}

list.Set( "NPC", "npc_CT_Helga_H", NPC )
--lua/autorun/donald_duck.lua:
return gluapack()()
--lua/autorun/engie_player.lua:
return gluapack()()
--addons/eprotect_1.5.24/lua/autorun/eprotect_loader.lua:
if slib and slib.loadFolder then slib.loadFolder("e_protect/", true, {{"e_protect/", "sh_config.lua"}}) end
hook.Add("slib:loadedUtils", "eP:Initialize", function() slib.loadFolder("e_protect/", true, {{"e_protect/", "sh_config.lua"}}) end)
--lua/autorun/esr_pms.lua:
return gluapack()()
--lua/autorun/fortnite_playermodel_pack.lua:
if SERVER then
	AddCSLuaFile()
end


player_manager.AddValidModel("Williams Maskeli Lider", "models/konnie/asapgaming/fortnite/wildcard.mdl")
--addons/[binbon]misc/lua/gmodadminsuite/modules/fpsbooster/lang/english.lua:
return {
	Name = "English",
	Flag = "flags16/gb.png",
	Phrases = function() return {

        module_name = "FPS Artirici",

        --####################### ARAYÜZ İFADELERİ #######################--
    
        fps_booster          = "FPS Arttirici",
        never_show_again     = "Bir Daha Gösterme",
        never_show_again_tip = "Bu menünün avantajlarini kaybedersiniz! Bu menüyü tekrar açmak için konsolunuza \"gmodadminsuite fpsbooster\" yazabilirsiniz.",
    
        --####################### AYAR İFADELERİ #######################--
    
        show_fps                 = "FPS'i Göster",
        multicore_rendering      = "Çok Çekirdekli İşlemeyi Etkinleştir",
        multicore_rendering_help = "Bu, GMod'un deneysel bir özelliğidir ve FPS'yi birden fazla CPU çekirdeği kullanarak kareleri işleyerek artirir.",
        hardware_acceleration    = "Donanim Hizlandirmayi Etkinleştir",
        shadows                  = "Gölgeleri Devre Disi Birak",
        disable_skybox           = "Gökyüzü Çizmesini Devre Disi Birak",
        sprays                   = "Oyuncu Spreylerini Devre Disi Birak",
        gibs                     = "Gib'leri Devre Disi Birak",
        gibs_help                = "\"Gib'ler\", cesetlerden ve ragdoll'lardan firlayabilen parçaciklar ve objelerdir.",
    

} end }
--addons/gmodadminsuite-logging-2.4.8/lua/gmodadminsuite/modules/logging/lang/french.lua:
return gluapack()()
--lua/gmodadminsuite/sh_registry_tbl.lua:
-- Optimization library
-- Helps with optimizing pairs() into ipairs() for some stuff
-- Basically just a table that makes sure there are no duplicates

AddCSLuaFile()

local setmetatable = setmetatable
local rawget = rawget
local rawset = rawset
local isnumber = isnumber

local function __index_func(self, i)
	if (isnumber(i)) then
		return rawget(self, "seq")[i]
	else
		return rawget(self, "kv")[i]
	end
end

local function __call_func(self, i, method)
	local kv = rawget(self, "kv")

	if (method == nil and kv[i] ~= nil) then -- remove

		local seq = rawget(self, "seq")
		local seq_i = rawget(self, "seq_i")
		local seq_r = rawget(self, "seq_r")
		
		kv[i] = nil
		seq[seq_r[i]] = nil
		for shift=seq_r[i]+1,seq_i do
			if (seq[shift] ~= nil) then
				seq_r[seq[shift]] = shift - 1
			end
			seq[shift-1] = seq[shift]
		end
		
		seq_r[i] = nil

		rawset(self, "seq_i", seq_i - 1)

	elseif (method ~= nil) then -- add

		if (kv[i] ~= nil) then
			self(i, nil)
		end

		local seq = rawget(self, "seq")
		local seq_i = rawget(self, "seq_i")
		local seq_r = rawget(self, "seq_r")

		kv[i] = method
		seq[seq_i] = i
		seq_r[i] = seq_i

		rawset(self, "seq_i", seq_i + 1)

	end
end

local function ipairs_func(self)
	return ipairs(rawget(self, "seq"))
end

local function pairs_func(self)
	return pairs(rawget(self, "kv"))
end

local function ipairs_pop_func(self)
	local n, prev_n
	return function()
		n = self:len()
		if (n > 0) then
			assert(prev_n == nil or n < prev_n, "ipairs_pop requires element to always be popped")
			prev_n = n
			return n, rawget(self, "seq")[n]
		end
	end
end

local ipairs_poppy_func
do
	local active_ipairs_pop
	local function pop_func()
		active_ipairs_pop(rawget(active_ipairs_pop, "seq")[rawget(active_ipairs_pop, "poppy_i")], nil)
	end
	ipairs_poppy_func = function(self)
		self(NULL, nil)
		active_ipairs_pop = self
		rawset(self, "poppy_i", self:len() + 1)
		return function()
			rawset(self, "poppy_i", rawget(self, "poppy_i") - 1)
			if (rawget(self, "poppy_i") > 0) then
				return rawget(self, "poppy_i"), rawget(self, "seq")[rawget(self, "poppy_i")], pop_func
			end
		end
	end
end

local function len_func(self)
	self(NULL, nil)
	return rawget(self, "seq_i") - 1
end

local function sequential_func(self)
	self(NULL, nil)
	return rawget(self, "seq")
end

local function dictionary_func(self)
	self(NULL, nil)
	return rawget(self, "kv")
end

function GAS:Registry()
	local Registry = {
		seq = {},
		seq_i = 1,
		seq_r = {},
		kv = {},
		ipairs = ipairs_func,
		ipairs_pop = ipairs_pop_func,
		ipairs_poppy = ipairs_poppy_func,
		pairs = pairs_func,
		len = len_func,
		sequential = sequential_func,
		dictionary = dictionary_func
	}

	setmetatable(Registry, {
		__index = __index_func,
		__call = __call_func
	})
	
	return Registry
end
--lua/gmodadminsuite/sh_modules.lua:
GAS.Modules = {}
GAS.Modules.Info = {}

GAS.MODULE_CATEGORY_ADMINISTRATION    = 0
GAS.MODULE_CATEGORY_PLAYER_MANAGEMENT = 1
GAS.MODULE_CATEGORY_UTILITIES         = 2
GAS.MODULE_CATEGORY_FUN               = 3

GAS.Modules.Organised = {}

function GAS.Modules:GetFriendlyName(module_name)
	return GAS:Phrase("module_name", module_name) or GAS.Modules.Info[module_name].Name or module_name
end

if (SERVER) then

	GAS.Modules.Config = GAS:GetConfig("modules", {
		Enabled = {}
	})

	GAS:netInit("SetModuleEnabled")
	GAS:netReceive("SetModuleEnabled", function(ply)
		if (not OpenPermissions:IsOperator(ply)) then return end

		local module_name, enabled = net.ReadString(), net.ReadBool()

		GAS.Modules.Config.Enabled[module_name] = enabled or nil
		GAS:SaveConfig("modules", GAS.Modules.Config)

		GAS:netStart("SetModuleEnabled")
			net.WriteString(module_name)
			net.WriteBool(enabled)
		net.SendOmit(ply)
	end)

else

	GAS:netReceive("SetModuleEnabled", function()
		local module_name, enabled = net.ReadString(), net.ReadBool()
		GAS.Modules.Config.Enabled[module_name] = enabled or nil
	end)

end

GAS.Modules.LoadedModules = {}
function GAS.Modules:IsModuleLoaded(module_name)
	return GAS.Modules.LoadedModules[module_name] == true
end

GAS.Modules.MODULE_ENABLED  = 0
GAS.Modules.MODULE_DISABLED = 1
GAS.Modules.MODULE_UNKNOWN  = 2
function GAS.Modules:IsModuleEnabled(module_name)
	if (GAS.Modules.Info[module_name]) then
		if (GAS.Modules.Config.Enabled[module_name]) then
			return GAS.Modules.MODULE_ENABLED
		else
			return GAS.Modules.MODULE_DISABLED
		end
	else
		return GAS.Modules.MODULE_UNKNOWN
	end
end

function GAS.Modules:LoadModule(module_name, suppress_print)
	GAS.Modules.LoadedModules[module_name] = true
	hook.Run("gmodadminsuite:LoadModule:" .. module_name, GAS.Modules.Info[module_name])
end

GAS:StartHeader("Modules")

local save_config = false
local _,d = file.Find("gmodadminsuite/modules/*", "LUA")
for _,module_name in ipairs(d) do
	if (not file.Exists("gmodadminsuite/modules/" .. module_name .. "/_gas_info.lua", "LUA")) then continue end

	if (SERVER) then
		AddCSLuaFile("gmodadminsuite/modules/" .. module_name .. "/_gas_info.lua")
	end
	GAS.Modules.Info[module_name] = include("gmodadminsuite/modules/" .. module_name .. "/_gas_info.lua")

	local category = GAS.Modules.Info[module_name].Category
	GAS.Modules.Organised[category] = GAS.Modules.Organised[category] or {}
	GAS.Modules.Organised[category][module_name] = GAS.Modules.Info[module_name]

	local init = false
	if (file.Exists("gmodadminsuite/modules/" .. module_name .. "/sh_init.lua", "LUA")) then
		if (SERVER) then AddCSLuaFile("gmodadminsuite/modules/" .. module_name .. "/sh_init.lua") end
		include("gmodadminsuite/modules/" .. module_name .. "/sh_init.lua")
		init = true
	end
	if (file.Exists("gmodadminsuite/modules/" .. module_name .. "/cl_init.lua", "LUA")) then
		if (SERVER) then AddCSLuaFile("gmodadminsuite/modules/" .. module_name .. "/cl_init.lua") end
		if (CLIENT) then include("gmodadminsuite/modules/" .. module_name .. "/cl_init.lua") end
		init = true
	end
	if (SERVER and file.Exists("gmodadminsuite/modules/" .. module_name .. "/sv_init.lua", "LUA")) then
		include("gmodadminsuite/modules/" .. module_name .. "/sv_init.lua")
		init = true
	end

	local friendly_name
	if (SERVER) then
		friendly_name = GAS.Modules.Info[module_name].Name
	else
		friendly_name = GAS:Phrase("module_name", module_name)
	end
	if (SERVER) then
		if (GAS.Modules.Config.Enabled[module_name] == nil and GAS.Modules.Info[module_name].DefaultEnabled == true) then
			GAS.Modules.Config.Enabled[module_name] = true
			save_config = true
		end
		if (GAS.Modules.Config.Enabled[module_name]) then
			GAS:HeaderPrint("= " .. friendly_name, GAS_PRINT_COLOR_GOOD)
		else
			GAS:HeaderPrint("X " .. friendly_name, GAS_PRINT_COLOR_BAD)
		end
	elseif (init) then
		GAS:HeaderPrint("✓ " .. friendly_name, GAS_PRINT_COLOR_GOOD)
	end
end

GAS:EndHeader()

if (save_config) then
	GAS:SaveConfig("modules", GAS.Modules.Config)
end

if (CLIENT) then
	GAS:InitPostEntity(function()
		GAS:GetConfig("modules", function(config)
			GAS.Modules.Config = config
			for module_name, enabled in pairs(GAS.Modules.Config.Enabled) do
				if (not enabled) then continue end
				GAS.Modules:LoadModule(module_name, true)
			end
		end)
	end)
else
	for module_name, enabled in pairs(GAS.Modules.Config.Enabled) do
		if (not enabled) then continue end
		GAS.Modules:LoadModule(module_name, true)
	end
end
--lua/gmodadminsuite/modules/commands/sh_init.lua:
return gluapack()()
--lua/gmodadminsuite/modules/fpsbooster/sh_init.lua:
if (SERVER) then
	AddCSLuaFile("cl_menu.lua")
else
	GAS:hook("gmodadminsuite:LoadModule:fpsbooster", "LoadModule:fpsbooster", function()
		include("gmodadminsuite/modules/fpsbooster/cl_menu.lua")
	end)
end
--lua/gmodadminsuite/cl_contextmenu.lua:
return gluapack()()
--lua/gmodadminsuite/cl_selection_prompts.lua:
return gluapack()()
--addons/gprofiler/lua/gprofiler/sh_utils.lua:
if CLIENT then
	GProfiler.Menu = GProfiler.Menu or {}

	local MenuColors = GProfiler.MenuColors
	local BorderColor = MenuColors.DListColumnOutline
	local TabPadding = 10

	local draw = draw
	local table = table
	local ipairs = ipairs
	local string = string
	local surface = surface

	local function PaintColumn(s, w, h)
		if k == columnCount then return end
		surface.SetDrawColor(BorderColor.r, BorderColor.g, BorderColor.b, BorderColor.a)
		surface.DrawRect(w - 2, 0, 2, h)
	end

	local function PaintLine(s, w, h)
		if s:IsHovered() then
			draw.RoundedBox(2, 0, 0, w, h, MenuColors.DListRowHover)
		else
			draw.RoundedBox(2, 0, 0, w, h, MenuColors.DListRowBackground)
		end

		if s:IsLineSelected() then
			draw.RoundedBox(2, 0, 0, w, h, MenuColors.DListRowSelected)
		end
	end

	local function PaintHeader(s, w, h)
		draw.RoundedBox(1, 0, 0, w, h, MenuColors.DListColumnOutline)
		draw.RoundedBox(1, 1, 1, w - 2, h - 2, MenuColors.DListColumnBackground)

		if s:IsHovered() then
			draw.RoundedBox(1, 0, 0, w, h, MenuColors.DListColumnOutline)
		end
	end

	function GProfiler.StyleDListView(v)
		local Columns = v.Columns
		for k, v1 in ipairs(Columns) do
			v1.Header:SetFont("GProfiler.Menu.ListHeader")
			v1.Header.Paint = PaintHeader
			v1.Header:SetTextColor(MenuColors.White)
		end

		local Lines = v.Lines
		for k, v in ipairs(Lines) do
			local columnCount = table.Count(v.Columns)
			for k, v in ipairs(v.Columns) do
				v:SetTextColor(MenuColors.DListRowTextColor)
				v.Paint = PaintColumn
			end
			v.Paint = PaintLine
		end

		GProfiler.StyleScrollbar(v)

		function v:Paint(w, h)
			draw.RoundedBox(2, 0, 0, w, h, MenuColors.DListBackground)
			surface.SetDrawColor(BorderColor.r, BorderColor.g, BorderColor.b, BorderColor.a)
			surface.DrawOutlinedRect(0, 0, w, h)
		end
	end

	local function PaintGrip(s, w, h)
		draw.RoundedBox(2, 0, 0, w, h, MenuColors.ScrollBarGripOutline)
		draw.RoundedBox(2, 1, 1, w - 2, h - 2, MenuColors.ScrollBarGrip)

		if s:IsHovered() or s.Depressed then
			draw.RoundedBox(2, 0, 0, w, h, MenuColors.ScrollBarGripOutline)
		end
	end

	local function PaintScrollbar(s, w, h)
		draw.RoundedBox(0, 0, 0, w, h, MenuColors.ScrollBar)
	end

	function GProfiler.StyleScrollbar(v)
		local ScrollBar = v.VBar or (v.GetVBar and v:GetVBar()) or nil
		if not IsValid(ScrollBar) then return end
		ScrollBar.btnUp:SetVisible(false)
		ScrollBar.btnDown:SetVisible(false)
		ScrollBar.Paint = PaintScrollbar
		ScrollBar.btnGrip.Paint = PaintGrip
		ScrollBar.PerformLayout = function()
			local wide = ScrollBar:GetWide()
			local scroll = ScrollBar:GetScroll() / ScrollBar.CanvasSize
			local barSize = math.max(ScrollBar:BarScale() * (ScrollBar:GetTall() - (wide * 2)), 10)
			local track = ScrollBar:GetTall() - (wide * 2) - barSize

			ScrollBar.btnGrip:SetPos(0, (wide + (scroll * (track + 3))) - 16)
			ScrollBar.btnGrip:SetSize(wide, barSize + 30)
		end
	end

	function GProfiler.StyleDropdown(v)
		v.Paint = function(s, w, h)
			draw.RoundedBox(4, 0, 0, w, h, MenuColors.ButtonOutline)
			draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonBackground)

			if s:IsHovered() then
				draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonHover)
			end
		end
	end

	local function PaintSeperator(s, w, h)
		draw.RoundedBox(4, 0, 0, w, h, MenuColors.HeaderSeparator)
	end

	function GProfiler.Menu.CreateHeader(parent, text, x, y, w, h)
		local header = vgui.Create("DPanel", parent)
		header:SetSize(w, h)
		header:SetPos(x, y)
		header.Paint = nil

		local headerText = vgui.Create("DLabel", header)
		headerText:SetFont("GProfiler.Menu.SectionHeader")
		headerText:SetText(text)
		headerText:SizeToContents()
		headerText:SetPos(TabPadding, header:GetTall() / 2 - headerText:GetTall() / 2)
		headerText:SetTextColor(MenuColors.White)

		local separator = vgui.Create("DPanel", header)
		separator:SetSize(header:GetWide() - TabPadding * 2, 1)
		separator:SetPos(TabPadding, header:GetTall() - 1)
		separator.Paint = PaintSeperator

		return header, headerText
	end

	local function PaintRealmSelector(s, w, h)
		draw.RoundedBox(4, 0, 0, w, h, MenuColors.ButtonOutline)
		draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonBackground)

		if s:IsHovered() then
			draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonHover)
		end
	end

	function GProfiler.Menu.CreateRealmSelector(parent, profiler, x, y, onSelect)
		local Data = GProfiler[profiler]
		local Selected = Data.Realm == "Client" and 1 or 2
		Data.Lerp = Data.Lerp or (Selected - 1)
		local SelectorBase = vgui.Create("DPanel", parent)
		SelectorBase:SetPos(x, y)
		SelectorBase:SetSize(200, parent:GetTall() - 6)
		SelectorBase.Paint = function(s, w, h)
			draw.RoundedBox(4, 0, 0, w, h, MenuColors.ButtonOutline)
			draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonBackground)

			local lerp = Lerp(0.1, Data.Lerp, Data.LerpTo or (Selected - 1))
			Data.Lerp = lerp

			draw.RoundedBox(4, 2 + w / 2 * lerp, 2, w / 2 - 4, h - 4, MenuColors.ButtonHover)
		end

		local Realms = {"Client", "Server"}
		for i = 1, 2 do
			local Button = vgui.Create("DButton", SelectorBase)
			Button:SetText(i == 1 and "Client" or "Server")
			Button:SetFont("GProfiler.Menu.RealmSelector")
			Button:SetTextColor(color_white)
			Button:SetSize(SelectorBase:GetWide() / 2, SelectorBase:GetTall())
			Button:SetPos(SelectorBase:GetWide() / 2 * (i - 1), 0)
			Button.Paint = nil
			Button.DoClick = function()
				Selected = i
				Data.LerpTo = i - 1
			end
			Button.Think = function(s)
				if Data.ProfileActive then
					s:SetEnabled(false)
				else
					s:SetEnabled(true)
				end

				if s:IsEnabled() then
					s:SetCursor("hand")
				else
					s:SetCursor("no")
				end
			end

			function Button:DoClick()
				onSelect(self, nil, Realms[i])
			end

			Button.Text = i == 1 and "Client" or "Server"
		end

		return SelectorBase
	end

	function GProfiler.TimeRunning(start, endd, profileActive)
		local time = 0

		if profileActive then
			time = SysTime() - start
		else
			time = endd - start
		end
		return string.format("%.2f", time)
	end

	function GProfiler.CopyLang(copy)
		copy = string.lower(string.Replace(copy, " ", "_"))
		return string.format("%s %s", GProfiler.Language.GetPhrase("copy"), GProfiler.Language.GetPhrase(copy))
	end

	function GProfiler.RequestFunctionSource(file, lineStart, lineEnd, callback)
		net.Start("GProfiler_RequestFunctionSource")
		net.WriteString(file)
		net.WriteUInt(lineStart, 32)
		net.WriteUInt(lineEnd, 32)
		net.SendToServer()

		local lines = {}
		net.Receive("GProfiler_RequestFunctionSource", function()
			local isFirst = net.ReadBool()
			local isLast = net.ReadBool()
			local count = net.ReadUInt(32)
			for i = 1, count do
				table.insert(lines, net.ReadString())
			end

			if isLast then
				callback(lines)
			end
		end)
	end
else
	util.AddNetworkString("GProfiler_RequestFunctionSource")

	-- Chunked net messages to avoid net message overflow
	local chunkSizeLimit = 65535 -- 187765611992257692146877

	net.Receive("GProfiler_RequestFunctionSource", function(l, ply)
		if not GProfiler.Access.HasAccess(ply) then return end

		local f = net.ReadString()
		local start = net.ReadUInt(32)
		local endd = net.ReadUInt(32)

		local res = GProfiler.ReadFunctionSource(f, start, endd)
		local chunkCount = 1
		local currentChunkSize = 0
		local chunks = {}
		if type(res) == "string" then res = {res} end
		for k, v in ipairs(res) do
			local str = string.Replace(v, "\t", "    ")
			if currentChunkSize + string.len(str) > (chunkSizeLimit - 1300) then
				chunkCount = chunkCount + 1
				currentChunkSize = 0
			end

			if not chunks[chunkCount] then chunks[chunkCount] = {} end
			table.insert(chunks[chunkCount], str)
			currentChunkSize = currentChunkSize + string.len(str)
		end

		for k, v in ipairs(chunks) do
			net.Start("GProfiler_RequestFunctionSource")
			net.WriteBool(k == 1)
			net.WriteBool(k == table.Count(chunks))
			net.WriteUInt(table.Count(v), 32)
			for k, v1 in ipairs(v) do
				net.WriteString(v1)
			end
			net.Send(ply)
		end
	end)

	function GProfiler.ReadFunctionSource(f, start, endd)
		if not file.Exists(f, "GAME") then return "" end
		if start < 0 or endd < 0 or endd < start then return "" end

		local f = file.Open(f, "r", "GAME")

		for i = 1, start - 1 do f:ReadLine() end

		local lines = {}
		for i = start, endd do table.insert(lines, f:ReadLine() or "") end

		return lines
	end
end

-- Shared util functions
function GProfiler.GetFunctionLocation(func)
	local info = debug.getinfo(func)
	if info.short_src == "[C]" then return "C" end
	return info.short_src .. ":" .. info.linedefined
end
--addons/gprofiler/lua/gprofiler/profilers/net/sh_net.lua:
return gluapack()()
--addons/gprotect_1.13.99/lua/autorun/gprotect_loader.lua:
if slib and slib.loadFolder then slib.loadFolder("g_protect/", true, {{"g_protect/", "sh_gprotect_config.lua"}, {"g_protect/", "sv_mysql_config.lua"}, {"g_protect/", "sh_gprotect_baseconfig.lua"}, {"g_protect/", "sh_util.lua"}, {"g_protect/server/", "sv_gprotect.lua"}, {"g_protect/", "sh_gprotect.lua"}}, {{"g_protect/client/", "cl_blockedmodels.lua"}, {"g_protect/client/", "cl_buddies.lua"}}) end
hook.Add("slib:loadedUtils", "eP:Init_gProtect", function() slib.loadFolder("g_protect/", true, {{"g_protect/", "sh_gprotect_config.lua"}, {"g_protect/", "sv_mysql_config.lua"}, {"g_protect/", "sh_gprotect_baseconfig.lua"}, {"g_protect/", "sh_util.lua"}, {"g_protect/server/", "sv_gprotect.lua"}, {"g_protect/", "sh_gprotect.lua"}}, {{"g_protect/client/", "cl_blockedmodels.lua"}, {"g_protect/client/", "cl_buddies.lua"}}) end)
--lua/autorun/guard_pack.lua:
return gluapack()()
--lua/autorun/harleyquinn.lua:
return gluapack()()
--addons/status_do/lua/holo_config.lua:
--[[
		 HoloChat
	Programmed by Pikod
	
	If you going to use
	this addon in your
	server please don't
	 reupload and add
	 to your workshop
	   collection.

	 Thanks for using!
]]--
local PI_HOLO = PI_HOLO
PI_HOLO:ClearConfig()

--[[

* Section: Modules
You can add command module (me, do, status etc.)

PI_HOLO:AddModule("me", {
	["DisplayLength"] = 5, -- Display length defines message how many seconds after will be disappear
	["IsConstant"] = false, -- If is command constant it will not disappear until you use command again (Without parameters.)
	["ConstantLimit"] = 0, -- How many constant message can be displayed at the same time ? (You don't need to touch if module isn't constant.)
	["Display"] = {
		["Font"] = "default", -- You can change this with your fonts after add your font with CreateFont function
		["BackgroundPaddingWidth"] = 256, -- Space from right and left
		["BackgroundPaddingHeight"] = 64, -- Space from top and bottom
		["BackgroundColor"] = Color(0, 0, 0, 200), -- Background color
		["TextColor"] = Color(255, 255, 255), -- Text color (don't support alpha)
		["TextFormat"] = "%1%" -- Word %1% will be changed with player input.
	}
})

]]--

PI_HOLO:AddModule("me", {
	["DisplayLength"] = 5,
	["IsConstant"] = false,
	["Display"] = {
		["Font"] = "default",
		["BackgroundPaddingWidth"] = 256,
		["BackgroundPaddingHeight"] = 64,
		["BackgroundColor"] = Color(0, 0, 0, 200),
		["TextColor"] = Color(245, 34, 59),
		["TextFormat"] = "%1%"
	}
})

PI_HOLO:AddModule("do", {
	["DisplayLength"] = 5,
	["IsConstant"] = false,
	["Display"] = {
		["Font"] = "default",
		["BackgroundPaddingWidth"] = 256,
		["BackgroundPaddingHeight"] = 64,
		["BackgroundColor"] = Color(0, 0, 0, 200),
		["TextColor"] = Color(61, 204, 45),
		["TextFormat"] = "%1%"
	}
})

PI_HOLO:AddModule("status", {
	["DisplayLength"] = 5,
	["IsConstant"] = true,
	["ConstantLimit"] = 1,
	["Display"] = {
		["Font"] = "default",
		["BackgroundPaddingWidth"] = 256,
		["BackgroundPaddingHeight"] = 64,
		["BackgroundColor"] = Color(4, 0, 89, 200),
		["TextColor"] = Color(255, 255, 255),
		["TextFormat"] = "* %1% *"
	}
})

--[[

* Section: Properties  

Simple properties

--]]

PI_HOLO:SetProperty("prefix", "/") -- Commands prefix (/me, !me etc.)
PI_HOLO:SetProperty("cooldown", 0.5) -- Command use cooldown (recommended: 0.5)

--[[

* Section: Language  

for English:

PI_HOLO:SetWord("cooldown_error", "You cannot use it again for %1% seconds.")
PI_HOLO:SetWord("parameter_error", "You have to write your message after command.")

--]]

PI_HOLO:SetWord("cooldown_error", "Bu komutu tekrar kullanmak için %1% saniye beklemelisin.")
PI_HOLO:SetWord("parameter_error", "Komuttan sonra bir mesaj yazman gerek.")


--[[

* Section: Fonts

You can create fonts like example located below

--]]

PI_HOLO:CreateFont("default", "Arial")
--addons/xenin-inventory/lua/autorun/inventory_load.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/enum.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/shared.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/base.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/base_cl.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/config.lua:
--[[--------------------------------------------
            Minigame Module - Config
--------------------------------------------]]--

local ConfigCvarCache = {}

MinigameObject.Config = {}
MinigameObject.ConfigKeys = {}
MinigameObject.ConfigEnums = {}
MinigameObject.ListenerConfig = {}

if SERVER then
    util.AddNetworkString("Minigames.ListenConfig")
end

--[[----------------------------
        Config Functions
----------------------------]]--

function MinigameObject:AddConfig(Name, Config)
    self:Checker(Name, "string", 1)
    self:Checker(Config, "table", 2)

    Name = string.lower( Name )

    Config["type"] = Config["type"]
            or isbool( Config["def"] ) and "boolean"
            or isnumber( Config["def"] ) and "number"
            or istable( Config["def"] ) and "table"
            or nil

    if Config["type"] == "number" then
        Config["dec"] = Config["dec"] or 0

        self.ConfigKeys[ Name ] = function(Val)
            Val = tonumber( Val )

            Val = math.Clamp( Val, Config["min"], Config["max"] )
            Val = math.Round( Val, Config["dec"] )

            return Val
        end
    elseif Config["type"] == "boolean" then
        self.ConfigKeys[ Name ] = function(v)
            return v == 1
        end
    elseif Config["type"] == "table" then
        if not table.IsSequential( Config["def"] ) then
            self.ThrowError("You cannot use a table that is not sequential for the config.", Config["def"], "sequential table")
        end

        self.ConfigKeys[ Name ] = function(v)
            return v -- lmao
        end
    else
        self.ThrowError("You cannot use another type than 'number' or 'boolean' for the config.", Config["type"], "number/boolean/table")
    end

    local Position = table.insert( self.Config, {["Name"] = Name, ["Config"] = Config} )

    return self.Config[ Position ]
end

function MinigameObject:AddHeader(Name)
    self:Checker(Name, "string", 1)

    local Position = table.insert( self.Config, {["Name"] = Name, ["Header"] = true} )

    return self.Config[ Position ]
end

function MinigameObject:GetAllConfig()
    return table.Copy(self.Config)
end

function MinigameObject:GetOwnerConfig(Info)
    self:Checker(Info, "string", 1)
    Info = string.lower( Info )

    local TargetPlayer = SERVER and self:GetOwner() or LocalPlayer()

    local ConvarData = TargetPlayer:GetInfoNum( "minigames_" .. self:GetGameID() .. "_" .. Info, -1 )
    if self.ConfigKeys[ Info ] then
        ConvarData = self.ConfigKeys[ Info ]( ConvarData )
    end

    return ConvarData
end

function MinigameObject:GetConfigCvar(Info)
    self:Checker(Info, "string", 1)
    local CvarName = "minigames_" .. self:GetGameID() .. "_" .. Info

    if ConfigCvarCache[ CvarName ] then
        return ConfigCvarCache[ CvarName ]
    end

    local Cvar = GetConVar( CvarName )

    ConfigCvarCache[ CvarName ] = Cvar

    return Cvar
end

if ( CLIENT ) then

    function MinigameObject:ListenToConfig(Info)
        self:Checker(Info, "string", 1)
        Info = string.lower( Info )

        cvars.AddChangeCallback( "minigames_" .. self:GetGameID() .. "_" .. Info, function()
            if not Minigames.IsAllowed() then return end

            net.Start("Minigames.ListenConfig")
                net.WriteString( Info )
            net.SendToServer()
        end, "Minigames.Config." .. self:GetGameID() .. "." .. Info )
    end

elseif ( SERVER ) then

    function MinigameObject:ListenToConfig(Info, Func)
        self:Checker(Info, "string", 1)
        self:Checker(Func, "function", 2)

        Info = string.lower( Info )
        self.ListenerConfig[ Info ] = Func
    end

    net.Receive("Minigames.ListenConfig", function(_, ply)
        if not Minigames.IsAllowed(ply) then return end

        local GameScript = Minigames.ActiveGames[ ply ]
        if not GameScript then return end

        local InfoName = net.ReadString()
        local NewValue = GameScript:GetOwnerConfig( InfoName )

        if GameScript.ListenerConfig[ InfoName ] then
            GameScript.ListenerConfig[ InfoName ]( GameScript, NewValue )
        end
    end)

end

MinigameObject.GetOwnerInfo = MinigameObject.GetOwnerConfig
--addons/minigame-tool-assistant/lua/minigames/games/cigarrillo43.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/ashop.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/rank.lua:
return gluapack()()
--addons/mayor_voting/lua/autorun/mayorvoting.lua:
return gluapack()()
--addons/mayor_voting/lua/sh_votingconfig.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/autorun/includes/modules/browserpool.lua:
if browserpool then return end -- ignore Lua refresh

local table = table
local vgui = vgui

_G.browserpool = {}

---
-- Debug variable which will allow outputting messages if enabled.
-- @type boolean
--
local DEBUG = true

---
-- Array of available, pooled browsers
-- @type table
--
local available = {}

---
-- Array of active, pooled browsers.
-- @type table
--
local active = {}

---
-- Array of pending requests for a browser.
-- @type table
--
local pending = {}

---
-- Minimum number of active browsers to be pooled.
-- @type Number
--
local numMin = 0

---
-- Maximum number of active browsers to be pooled.
-- @type Number
--
local numMax = 4

---
-- Number of currently active browsers.
-- @type Number
--
local numActive = 0

---
-- Number of currently pending browser requests.
-- @type Number
--
local numPending = 0

---
-- Number of total browser requests.
-- @type Number
--
local numRequests = 0

---
-- Default URL to set browsers on setup/teardown.
-- @type String
--
local defaultUrl = "data:text/html,"

---
-- JavaScript code to remove an object's property.
-- @type String
--
local JS_RemoveProp = "delete %s.%s;"

---
-- Helper function to setup/teardown a browser panel.
--
-- @param panel?	Browser panel to be cleaned up.
-- @return Panel	DMediaPlayerHTML panel instance.
--
local function setupPanel( panel )

	-- Create a new panel if it wasn't passed in
	if panel then
		panel:Stop()
	else
		panel = vgui.Create("DMediaPlayerHTML")
	end

	-- Hide panel
	-- panel:SetSize(0, 0)
	panel:SetPos(0, 0)

	-- Disable input
	panel:SetKeyboardInputEnabled(false)
	panel:SetMouseInputEnabled(false)

	-- Browser panels are usually manually drawn, use a regular panel if not
	panel:SetPaintedManually(true)

	-- Fix for panel not getting cleared after 3/2017 update
	panel:SetHTML( "" )

	-- Set default URL
	panel:OpenURL( defaultUrl )

	-- Remove any added function callbacks
	for obj, tbl in pairs(panel.Callbacks) do
		if obj ~= "console" then
			for funcname, _ in pairs(tbl) do
				panel:QueueJavascript(JS_RemoveProp:format(obj, funcname))
			end
		end
	end

	return panel

end

---
-- Local function for removing cancelled browser promises via closures.
--
-- @param Promise	Browser bromise.
-- @return Boolean	Success status.
--
local function removePromise( promise )
	local id = promise:GetId()

	if not pending[id] then
		ErrorNoHalt( "browserpool: Failed to remove promise.\n" )
		print( promise, id )
		debug.Trace()
		return false
	end

	pending[id] = nil
	numPending = numPending - 1

	return true
end

---
-- Browser promise for resolving browser requests when there isn't an available
-- browser at the time of request.
--
local BrowserPromise = {}
local BrowserPromiseMeta = { __index = BrowserPromise }

function BrowserPromise:New( callback, id )
	return setmetatable(
		{ __cb = callback, __id = id or -1 },
		BrowserPromiseMeta
	)
end

function BrowserPromise:GetId()
	return self.__id
end

function BrowserPromise:Resolve( value )
	self.__cb(value)
end

function BrowserPromise:Cancel( reason )
	self.__cb(false, reason)
	removePromise(self)
end

---
-- Retrieves an available browser panel from the pool. Otherwise, a new panel
-- will be created.
--
-- @return Panel	DMediaPlayerHTML panel instance.
--
function browserpool.get( callback )

	numRequests = numRequests + 1

	if DEBUG then
		print( string.format("browserpool: get [Active: %s][Available: %s][Pending: %s]",
			numActive, #available, numPending ) )
	end

	local panel

	-- Check if there's an available panel
	if #available > 0 then

		panel = table.remove( available )
		table.insert( active, panel )

		callback( panel )

	elseif numActive < numMax then -- create a new panel

		panel = setupPanel()
		numActive = numActive + 1

		if DEBUG then
			print( "browserpool: Spawned new browser [Active: " .. numActive .. "]" )
		end

		table.insert( active, panel )
		callback( panel )

	else -- wait for an available browser

		local promise = BrowserPromise:New( callback, numRequests )

		pending[numRequests] = promise
		numPending = numPending + 1

		return promise

	end

end

---
-- Releases the given browser panel from the active pool.
--
-- Remember to unset references to the browser instance after releasing:
--		browserpool.release( self.Browser )
--		self.Browser = nil
--
-- @param panel		Browser panel to be released.
-- @return boolean	Whether the panel was successfully removed.
--
function browserpool.release( panel, destroy )

	if not panel then return end

	local key = table.KeyFromValue( active, panel )

	-- Unable to find active browser panel
	if not key then
		ErrorNoHalt( "browserpool: Attempted to release unactive browser.\n" )
		debug.Trace()

		-- Remove browser even if the request was invalid
		if IsValid(panel) then
			panel:Remove()
		end

		return false
	end

	-- Resolve an open promise if one exists
	if numPending > 0 and not destroy then

		-- Get the earliest request first
		local id = table.GetFirstKey( pending )
		local promise = pending[id]

		-- Cleanup panel
		setupPanel( panel )

		promise:Resolve( panel )
		removePromise( promise )

	else

		if not table.remove( active, key ) then
			ErrorNoHalt( "browserpool: Failed to remove panel from active browsers.\n" )
			debug.Trace()

			-- Remove browser even if the request was invalid
			if IsValid(panel) then
				panel:Remove()
			end

			return false
		end

		-- Remove panel if there are more active than the minimum pool size
		if numActive > numMin then

			panel:Remove()
			numActive = numActive - 1

			if DEBUG then
				print( "browserpool: Destroyed browser [Active: " .. numActive .. "]" )
			end

		elseif not destroy then

			-- Cleanup panel
			setupPanel( panel )

			-- Add to the pool
			table.insert( available, panel )

			if DEBUG then
				print( "browserpool: Pooled browser [Active: " .. numActive .. "]" )
			end

		end

	end

	return true

end

--addons/media_player_fixed_edition/lua/mediaplayer/shared.lua:
MediaPlayer = MediaPlayer or {}
MP = MediaPlayer

include "utils.lua"
include "sh_cvars.lua"

--[[---------------------------------------------------------
	Config

	Store service API keys, etc.
-----------------------------------------------------------]]

MediaPlayer.config = {}

---
-- Apply configuration values to the mediaplayer config.
--
-- @param config	Table with configuration values.
--
function MediaPlayer.SetConfig( config )
	table.Merge( MediaPlayer.config, config )
end

---
-- Method for easily grabbing config value without checking that each fragment
-- exists.
--
-- @param key	e.g. "json.key.fragments"
--
function MediaPlayer.GetConfigValue( key )
	local value = MediaPlayerUtils.TableLookup( MediaPlayer.config, key )

	if value == nil then
		ErrorNoHalt("WARNING: MediaPlayer config value not found for key `" .. tostring(key) .. "`\n")
	end

	return value
end

if SERVER then
	AddCSLuaFile "config/client.lua"
else
	include "config/client.lua"
end


--[[---------------------------------------------------------
	Shared includes
-----------------------------------------------------------]]

include "sh_events.lua"
include "sh_mediaplayer.lua"
include "sh_services.lua"
include "sh_history.lua"
include "sh_metadata.lua"

hook.Add("Initialize", "InitMediaPlayer", function()
	hook.Run("InitMediaPlayer", MediaPlayer)
end)

-- No fun allowed
hook.Add( "CanDrive", "DisableMediaPlayerDriving", function(ply, ent)
	if IsValid(ent) and ent.IsMediaPlayerEntity then
		return IsValid(ply) and ply:IsAdmin()
	end
end)

--addons/media_player_fixed_edition/lua/mediaplayer/players/base/shared.lua:
local MediaPlayer = MediaPlayer

local HasFocus = system.HasFocus
local MuteUnfocused = MediaPlayer.Cvars.MuteUnfocused
local CeilPower2 = MediaPlayerUtils.CeilPower2

--[[---------------------------------------------------------
	Base Media Player
-----------------------------------------------------------]]

local MEDIAPLAYER = MEDIAPLAYER or {}
MEDIAPLAYER.__index = MEDIAPLAYER

-- Inherit EventEmitter for all mediaplayer instances
EventEmitter:new(MEDIAPLAYER)

MEDIAPLAYER.Name = "base"
MEDIAPLAYER.IsMediaPlayer = true
MEDIAPLAYER.NoMedia = "\4" -- end of transmission character

-- Media Player states
MP_STATE_ENDED = 0
MP_STATE_PLAYING = 1
MP_STATE_PAUSED  = 2
NUM_MP_STATE = 3

include "sh_snapshot.lua"

--
-- Initialize the media player object.
--
function MEDIAPLAYER:Init(params)
	self._Queue = {}		-- media queue
	self._Media = nil		-- current media
	self._Owner = nil		-- media player owner

	self._State = MP_STATE_ENDED -- waiting for new media

	if SERVER then

		self._TransmitState = TRANSMIT_ALWAYS
		self._Listeners = {}

		self._Location = -1

	else

		self._LastMediaUpdate = 0
		inputhook.Add( KEY_Q, self, self.OnQueueKeyPressed )
		inputhook.Add( KEY_C, self, self.OnQueueKeyPressed )

	end

	-- Merge in any passed in params
	-- table.Merge(self, params or {})
end

--
-- Get whether the media player is valid.
--
-- @return boolean	Whether the media player is valid
--
function MEDIAPLAYER:IsValid()
	if self._removed then
		return false
	end

	return true
end

--
-- String coercion metamethod
--
-- @return String	Media player string representation
--
function MEDIAPLAYER:__tostring()
	return self:GetId()
end

--
-- Get the media player's unique ID.
--
-- @return Number	Media player ID.
--
function MEDIAPLAYER:GetId()
	return self.id
end

--
-- Get the media player's type.
--
-- @return String	MP type.
--
function MEDIAPLAYER:GetType()
	return self.Name
end

function MEDIAPLAYER:GetPlayerState()
	return self._State
end

function MEDIAPLAYER:SetPlayerState( state )
	local current = self._State
	self._State = state

	if MediaPlayer.DEBUG then
		print( "MEDIAPLAYER.SetPlayerState", state )
	end

	if current ~= state then
		self:OnPlayerStateChanged( current, state )
	end
end

function MEDIAPLAYER:OnPlayerStateChanged( old, new )
	local media = self:GetMedia()
	local validMedia = IsValid(media)

	if MediaPlayer.DEBUG then
		print( "MEDIAPLAYER.OnPlayerStateChanged", old .. " => " .. new )
	end

	if new == MP_STATE_PLAYING then
		if validMedia and not media:IsPlaying() then
			media:Play()
		end
	elseif new == MP_STATE_PAUSED then
		if validMedia and media:IsPlaying() then
			media:Pause()
		end
	end

	self:emit( MP.EVENTS.PLAYER_STATE_CHANGED, new, old )
end

--
-- Get whether the media player is currently playing media.
--
-- @return boolean	Media is playing
--
function MEDIAPLAYER:IsPlaying()
	return self._State == MP_STATE_PLAYING
end

--
-- Get the media player's position.
--
-- @return Vector3	Media player's position
--
function MEDIAPLAYER:GetPos()
	if not self._pos then
		self._pos = Vector(0,0,0)
	end
	return self._pos
end

--
-- Get the media player's location ID.
--
-- @return Number	Media player's location ID
--
function MEDIAPLAYER:GetLocation()
	return self._Location
end

function MEDIAPLAYER:GetOwner()
	return self._Owner
end

function MEDIAPLAYER:SetOwner( ply )
	self._Owner = ply
end

---
-- Determines if the player has privileges to use media controls (skip, seek,
-- etc.). Override this for custom behavior.
--
function MEDIAPLAYER:IsPlayerPrivileged( ply )
	return ply == self:GetOwner() or ply:IsAdmin() or
		hook.Run( "MediaPlayerIsPlayerPrivileged", self, ply )
end

---
-- Media player update
--
function MEDIAPLAYER:Think()

	if SERVER then
		self:UpdateListeners()
	end

	local media = self:GetMedia()
	local validMedia = IsValid(media)

	-- Waiting to play new media
	if SERVER then
		if self._State <= MP_STATE_ENDED then

			-- Check queue for videos to play
			if not self:IsQueueEmpty() then
				self:OnMediaFinished()
			end

		elseif self._State == MP_STATE_PLAYING then

			-- Wait for media to finish
			if validMedia and media:IsTimed() then
				local time = media:CurrentTime()
				local duration = media:Duration()

				if time > duration then
					self:OnMediaFinished()
				end
			end

		end
	end

	if CLIENT and validMedia then
		media:Sync()

		local volume

		-- TODO: add a GAMEMODE hook to determine if sound should be muted
		if not HasFocus() and MuteUnfocused:GetBool() then
			volume = 0
		else
			volume = MediaPlayer.Volume()
		end

		media:Volume( volume )
	end

end

--
-- Get the currently playing media.
--
-- @return Media	Currently playing media
--
function MEDIAPLAYER:GetMedia()
	return self._Media
end

MEDIAPLAYER.CurrentMedia = MEDIAPLAYER.GetMedia

--
-- Set the currently playing media.
--
-- @param media		Media object.
--
function MEDIAPLAYER:SetMedia( media )
	self._Media = media
	self:OnMediaStarted( media )

	-- NOTE: media can be nil!
	self:emit(MP.EVENTS.MEDIA_CHANGED, media)
end

--
-- Get the media queue.
-- TODO: Remove this as it should only be accessed internally?
--
-- @return table	Media queue.
--
function MEDIAPLAYER:GetMediaQueue()
	return self._Queue
end

--
-- Clear the media queue.
--
function MEDIAPLAYER:ClearMediaQueue()
	self._Queue = {}
	if SERVER then
		self:BroadcastUpdate()
	end
end

--
-- Get whether the media queue is empty.
--
-- @return boolean	Whether the queue is empty
--
function MEDIAPLAYER:IsQueueEmpty()
	return #self._Queue == 0
end

function MEDIAPLAYER:GetQueueLimit( bNetLength )
	local limit = MediaPlayer.Cvars.QueueLimit:GetInt()

	if bNetLength then
		limit = math.max( CeilPower2( limit ) / 2, 2 )
	end

	return limit
end

function MEDIAPLAYER:GetQueueRepeat()
	return self._QueueRepeat
end

function MEDIAPLAYER:SetQueueRepeat( shouldRepeat )
	self._QueueRepeat = shouldRepeat
end

function MEDIAPLAYER:GetQueueShuffle()
	return self._QueueShuffle
end

function MEDIAPLAYER:SetQueueShuffle( shouldShuffle )
	self._QueueShuffle = shouldShuffle

	if SERVER then
		if shouldShuffle then
			self:ShuffleQueue()
		else
			self:SortQueue()
		end
	end
end

function MEDIAPLAYER:GetQueueLocked()
	return self._QueueLocked
end

function MEDIAPLAYER:SetQueueLocked( locked )
	self._QueueLocked = locked
end

---
-- Called when the queue is updated; emits a change event.
--
function MEDIAPLAYER:QueueUpdated()
	if SERVER then
		self:SortQueue()
	end

	self:emit( MP.EVENTS.QUEUE_CHANGED, self._Queue )
end

--
-- Add media to the queue.
--
-- @param media		Media object.
--
function MEDIAPLAYER:AddMedia( media )
	if not media then return end

	if SERVER then
		-- cache the time the media has been queued for sorting purposes
		media:SetMetadataValue("queueTime", RealTime())
	end

	table.insert( self._Queue, media )
end

--
-- Event called when media should begin playing.
--
-- @param media		Media object to be played.
--
function MEDIAPLAYER:OnMediaStarted( media )

	media = media or self:CurrentMedia()

	if MediaPlayer.DEBUG then
		print( "MEDIAPLAYER.OnMediaStarted", media )
	end

	if IsValid(media) then

		if SERVER then
			local startTime
			local currentTime = media:CurrentTime()

			if currentTime > 0 then
				startTime = RealTime() - currentTime
			else
				startTime = RealTime()
			end

			media:StartTime( startTime + 1 )
		else
			self._LastMediaUpdate = RealTime()
		end

		if SERVER then
			self:SetPlayerState( MP_STATE_PLAYING )
		end

		self:emit("mediaStarted", media)

	elseif SERVER then
		self:SetPlayerState( MP_STATE_ENDED )
	end

end

--
-- Event called when media should stop playing and the next in the queue
-- should begin.
--
-- @param media		Media object to stop.
--
function MEDIAPLAYER:OnMediaFinished( media )

	media = media or self:CurrentMedia()

	if MediaPlayer.DEBUG then
		print( "MEDIAPLAYER.OnMediaFinished", media )
	end

	if SERVER then
		self:SetPlayerState( MP_STATE_ENDED )
	end

	self._Media = nil

	if CLIENT and IsValid(media) then
		media:Stop()
	end

	self:emit("mediaFinished", media)

	if SERVER then
		if media and self:GetQueueRepeat() then
			media:ResetTime()
			self:AddMedia( media )
		end

		self:NextMedia()
	end

end

--
-- Event called when the media player is to be removed/destroyed.
--
function MEDIAPLAYER:Remove()
	MediaPlayer.Destroy( self )
	self._removed = true

	if SERVER then

		-- Remove all listeners
		for _, ply in pairs( self._Listeners ) do
			-- TODO: it's probably better not to send individual net messages
			-- for each player removed.
			self:RemoveListener( ply )
		end

	else

		local media = self:CurrentMedia()

		if IsValid(media) then
			media:Stop()
		end

	end
end

function MEDIAPLAYER:GetSupportedServiceIDs()

	local serviceIDs = table.Copy( MediaPlayer.GetSupportedServiceIDs() )

	if self.ServiceWhitelist then
		local tbl = {}

		for _, id in ipairs(serviceIDs) do
			if table.HasValue( self.ServiceWhitelist, id ) then
				table.insert( tbl, id )
			end
		end

		serviceIDs = tbl
	end

	return serviceIDs

end

--addons/media_player_fixed_edition/lua/mediaplayer/services/base/shared.lua:
local string = string
local urllib = url

local FormatSeconds = MediaPlayerUtils.FormatSeconds

SERVICE.Name 	= "Base Service"
SERVICE.Id 		= "base"
SERVICE.Abstract = true

-- Inherit EventEmitter for all service instances
EventEmitter:new(SERVICE)

local OwnerInfoPattern = "%s [%s]"

function SERVICE:New( url )
	local obj = setmetatable( {}, {
		__index = self,
		__tostring = self.__tostring
	} )

	obj.url = url

	local success, urlinfo = pcall(urllib.parse2, url)
	obj.urlinfo = success and urlinfo or {}

	if CLIENT then
		obj._playing = false
		obj._volume = 0.33
	end

	return obj
end

function SERVICE:__tostring()
	return string.format( "%s, %s, %s",
		self:Title(),
		FormatSeconds(self:Duration()),
		self:OwnerName() )
end

--
-- Determines if the media is valid.
--
-- @return boolean
--
function SERVICE:IsValid()
	return true
end

--
-- Determines if the media supports the given URL.
--
-- @param url URL.
-- @return boolean
--
function SERVICE:Match( url )
	return false
end

--
-- Gives the unique data used as part of the primary key in the metadata
-- database.
--
-- @return String
--
function SERVICE:Data()
	return self._data
end

function SERVICE:Owner()
	return self._Owner
end

SERVICE.GetOwner = SERVICE.Owner

function SERVICE:OwnerName()
	return self._OwnerName or ""
end

function SERVICE:OwnerSteamID()
	return self._OwnerSteamID or ""
end

function SERVICE:OwnerInfo()
	return OwnerInfoPattern:format( self._OwnerName, self._OwnerSteamID )
end

function SERVICE:IsOwner( ply )
	return ply == self:GetOwner() or
		ply:SteamID() == self:OwnerSteamID()
end

function SERVICE:Title()
	return self._metadata and self._metadata.title or "Unknown"
end

function SERVICE:Duration( duration )
	if duration then
		self._metadata = self._metadata or {}
		self._metadata.duration = duration
	end

	return self._metadata and self._metadata.duration or -1
end

--
-- Determines whether the media is timed.
--
-- @return boolean
--
function SERVICE:IsTimed()
	return true
end

function SERVICE:Thumbnail()
	return self._metadata and self._metadata.thumbnail
end

function SERVICE:Url()
	return self.url
end

SERVICE.URL = SERVICE.Url

function SERVICE:SetMetadata( metadata, new )
	self._metadata = metadata

	if new then
		local title = self._metadata.title or "Unknown"
		title = title:sub(1, MaxTitleLength)

		-- Escape any '%' char with a letter following it
		title = title:gsub("%%%a", "%%%%")

		self._metadata.title = title
	end
end

function SERVICE:SetMetadataValue( key, value )
	if not self._metadata then
		self._metadata = {}
	end

	self._metadata[key] = value
end

function SERVICE:GetMetadataValue( key )
	return self._metadata and self._metadata[key]
end

function SERVICE:UniqueID()
	if not self._id then
		local data = self:Data()
		if not data then
			data = util.CRC(self.url)
		end

		-- e.g. yt-G2MORmw703o
		self._id = string.format( "%s-%s", self.Id, data )
	end

	return self._id
end

--[[----------------------------------------------------------------------------
	Playback
------------------------------------------------------------------------------]]

function SERVICE:StartTime( seconds )
	if isnumber(seconds) then
		if self._PauseTime then
			self._PauseTime = RealTime()
		end

		self._StartTime = seconds
	end

	if self._PauseTime then
		local diff = self._PauseTime - self._StartTime
		return RealTime() - diff
	else
		return self._StartTime
	end
end

function SERVICE:CurrentTime()
	if self._StartTime then
		if self._PauseTime then
			return self._PauseTime - self._StartTime
		else
			return RealTime() - self._StartTime
		end
	else
		return -1
	end
end

function SERVICE:ResetTime()
	self._StartTime = nil
	self._PauseTime = nil
end

function SERVICE:IsPlaying()
	return self._playing
end

function SERVICE:Play()
	if self._PauseTime then
		-- Update start time to match the time when paused
		self._StartTime = RealTime() - (self._PauseTime - self._StartTime)
		self._PauseTime = nil
	end

	self._playing = true

	if CLIENT then
		self:emit("play")
	end
end

function SERVICE:Pause()
	self._PauseTime = RealTime()
	self._playing = false

	if CLIENT then
		self:emit("pause")
	end
end

--addons/media_player_fixed_edition/lua/mediaplayer/services/image.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/sh_history.lua:
--[[---------------------------------------------------------
	Media Player History
-----------------------------------------------------------]]

MediaPlayer.History = {}

---
-- Default metadata table name
-- @type String
--
local TableName = "mediaplayer_history"

---
-- SQLite table struct
-- @type String
--
local TableStruct = string.format([[
CREATE TABLE %s (
	id				INTEGER PRIMARY KEY AUTOINCREMENT,
	mediaid			VARCHAR(48),
	url				VARCHAR(512),
	player_name		VARCHAR(32),
	steamid			VARCHAR(32),
	time			DATETIME DEFAULT CURRENT_TIMESTAMP
)]], TableName)

---
-- Default number of results to return
-- @type Integer
--
local DefaultResultLimit = 100

---
-- Log the given media as a request.
--
-- @param media		Media service object.
-- @return table	SQL query results.
--
function MediaPlayer.History:LogRequest( media )
	local id = media:UniqueID()
	if not id then return end

	local ply = media:GetOwner()
	if not IsValid(ply) then return end

	local query = string.format( "INSERT INTO `%s` " ..
			"(mediaid,url,player_name,steamid) " ..
			"VALUES ('%s',%s,%s,'%s')",
			TableName,
			media:UniqueID(),
			sql.SQLStr( media:Url() ),
			sql.SQLStr( ply:Nick() ),
			ply:SteamID64() or -1 )

	local result = sql.Query(query)

	if MediaPlayer.DEBUG then
		print("MediaPlayer.History.LogRequest")
		print(query)
		if istable(result) then
			PrintTable(result)
		else
			print(result)
		end
	end

	return result
end

function MediaPlayer.History:GetRequestsByPlayer( ply, limit )
	if not isnumber(limit) then
		limit = DefaultResultLimit
	end

	local query = string.format( [[
SELECT H.*, M.title, M.thumbnail, M.duration
FROM %s AS H
JOIN mediaplayer_metadata AS M
	ON (M.id = H.mediaid)
WHERE steamid='%s'
LIMIT %d]],
			TableName,
			ply:SteamID64() or -1,
			limit )

	local result = sql.Query(query)

	if MediaPlayer.DEBUG then
		print("MediaPlayer.History.GetRequestsByPlayer", ply, limit)
		print(query)
		if istable(result) then
			PrintTable(result)
		else
			print(result)
		end
	end

	return result
end

-- Create the SQLite table if it doesn't exist
if not sql.TableExists(TableName) then
	Msg("MediaPlayer.History: Creating `" .. TableName .. "` table...\n")
	print(sql.Query(TableStruct))
end

--addons/media_player_fixed_edition/lua/mediaplayer/cl_screen.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mp_menu/sidebar.lua:
include "icons.lua"
include "common.lua"
include "sidebar_tabs.lua"
include "volume_control.lua"
include "playback.lua"
include "queue.lua"
include "horizontal_list.lua"


--[[--------------------------------------------
	Sidebar root panel
----------------------------------------------]]

local PANEL = {}

function PANEL:Init()

	self:SetName( "MediaPlayerSidebar" )

	self:SetPaintBackgroundEnabled( true )
	self:SetPaintBorderEnabled( false )

	self:SetZPos( -99 )
	self:SetSize( 385, 580 )

	self.Tabs = vgui.Create( "MP.SidebarTabs", self )
	self.Tabs:Dock( FILL )

	local curplaytab = vgui.Create( "MP.CurrentlyPlayingTab" )
	self.Tabs:AddSheet( "VENOM TELEVIZYON - ŞUAN OYNAYAN", curplaytab, nil, false, false )

	-- TODO: Implement clientside media history for recently viewed tab
	-- local panel = vgui.Create( "Panel" )
	-- self.Tabs:AddSheet( "RECENTLY VIEWED", panel, nil, false, false )

	self.VolumeControls = vgui.Create( "MP.VolumeControl", self )
	self.VolumeControls:Dock( BOTTOM )
	self.VolumeControls:SetHeight( 48 )

	self:InvalidateLayout( true )

end

function PANEL:Paint(w, h)

	surface.SetDrawColor( 0, 0, 0, 140 )
	surface.DrawRect( 0, 0, w, h )

end

function PANEL:PerformLayout()

	self:CenterVertical()
	self:AlignLeft( ScrW() - self:GetWide() - 10 )

	self.Tabs:SizeToContentWidth()

end

local MP_SIDEBAR = vgui.RegisterTable( PANEL, "EditablePanel" )


--[[--------------------------------------------
	Sidebar presenter
----------------------------------------------]]

local SidebarPresenter = {
	hooks = {}
}

AccessorFunc( SidebarPresenter, "m_Media", "Media" )

function SidebarPresenter:RegisterHook( hookname, callback )

	table.insert( self.hooks, hookname )

	hook.Add( hookname, "MP.SidebarPresenter", function(...)
		if MediaPlayer.DEBUG then
			print("MP.EVENTS.UI", hookname)
			PrintTable({...})
		end

		return callback(...)
	end )

end

function SidebarPresenter:SetupEvents()

	local mp = self:GetMedia()

	self:RegisterHook( MP.EVENTS.UI.OPEN_REQUEST_MENU, function()
		self:HideSidebar()
		MediaPlayer.OpenRequestMenu( mp )
	end )

	self:RegisterHook( MP.EVENTS.UI.FAVORITE_MEDIA, function( media )
		-- TODO
	end )

	self:RegisterHook( MP.EVENTS.UI.REMOVE_MEDIA, function( media )
		if not media then return end
		MediaPlayer.RequestRemove( mp, media:UniqueID() )
	end )

	self:RegisterHook( MP.EVENTS.UI.SKIP_MEDIA, function()
		MediaPlayer.Skip( mp )
	end )

	self:RegisterHook( MP.EVENTS.UI.TOGGLE_LOCK, function()
		MediaPlayer.RequestLock( mp )
	end )

	self:RegisterHook( MP.EVENTS.UI.TOGGLE_PAUSE, function()
		MediaPlayer.Pause( mp )
	end )

	self:RegisterHook( MP.EVENTS.UI.TOGGLE_REPEAT, function()
		MediaPlayer.RequestRepeat( mp )
	end )

	self:RegisterHook( MP.EVENTS.UI.TOGGLE_SHUFFLE, function()
		MediaPlayer.RequestShuffle( mp )
	end )

	self:RegisterHook( MP.EVENTS.UI.SEEK, function( seekTime )
		MediaPlayer.Seek( mp, seekTime )
	end )

	self:RegisterHook( MP.EVENTS.UI.PRIVILEGED_PLAYER, function()
		local ply = LocalPlayer()
		return mp:IsPlayerPrivileged(ply)
	end )

end

function SidebarPresenter:ClearEvents()

	for _, hookname in ipairs(self.hooks) do
		hook.Remove( hookname, "MP.SidebarPresenter" )
	end

end

function SidebarPresenter:ShowSidebar( mp )

	self:SetMedia( mp )

	if IsValid(self.Sidebar) then
		self:HideSidebar()
	end

	self:SetupEvents()

	-- Can be used to extend sidebar functionality
	hook.Run( MP.EVENTS.UI.SETUP_SIDEBAR, self, mp )

	local sidebar = vgui.CreateFromTable( MP_SIDEBAR )
	sidebar:MakePopup()

	-- sidebar:SetKeyboardInputEnabled( false )
	sidebar:SetMouseInputEnabled( true )

	hook.Run( MP.EVENTS.UI.MEDIA_PLAYER_CHANGED, mp )

	self.Sidebar = sidebar

end

function SidebarPresenter:HideSidebar()

	if not self.Sidebar then return end

	self:ClearEvents()

	if IsValid(self.Sidebar) then
		self.Sidebar:Remove()
	end

	self.Sidebar = nil

end


--[[--------------------------------------------
	MediaPlayer library sidebar helpers
----------------------------------------------]]

function MediaPlayer.ShowSidebar( mp )

	--
	-- Find a valid media player to use for the sidebar
	--

	-- First check if we're looking at a media player
	if not mp then
		local ent = LocalPlayer():GetEyeTrace().Entity
		if IsValid(ent) then
			mp = MediaPlayer.GetByObject( ent )
		end
	end

	-- Else, maybe the gamemode handles this some other way (location system, etc.)
	if not mp then
		mp = hook.Run( "GetMediaPlayer" )
	end

	-- If we still can't find a media player, give up..
	if not IsValid(mp) then return end

	SidebarPresenter:ShowSidebar( mp )

end

function MediaPlayer.HideSidebar()

	SidebarPresenter:HideSidebar()

end

hook.Add( "OnContextMenuOpen", "MP.ShowSidebar", function()

	MediaPlayer.ShowSidebar()

end )
hook.Add( "OnContextMenuClose", "MP.HideSidebar", function()

	MediaPlayer.HideSidebar()

end )

--[[--------------------------------------------
	Sidebar UI test - remove this eventually
----------------------------------------------]]

--[[inputhook.AddKeyPress( KEY_PAGEUP, "MP.ShowSidebarTest", function()
	-- Create test fixture
	local mp = MediaPlayer.Create( 'ui-test-player' )
	mp:SetPlayerState( MP_STATE_PLAYING )

	local function CreateMedia( title, duration, url, ownerName, ownerSteamID, startTime )
		local media = MediaPlayer.GetMediaForUrl( url )

		media._metadata = {
			title = title,
			duration = duration
		}

		media._OwnerName = ownerName
		media._OwnerSteamID = ownerSteamID
		media:StartTime( startTime or RealTime() )

		return media
	end

	---------------------------------
	-- Create current media object
	---------------------------------

	mp:SetMedia( CreateMedia(
		"Test media - really long title test asdfljkasdfasdjfgasdf",
		10,
		"https://www.youtube.com/watch?v=IMorTE0lFLc",
		"WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW",
		"STEAM_0:1:15862026"
	) )


	---------------------------------
	-- Create queued media
	---------------------------------

	mp:AddMedia( CreateMedia(
		"Test media - really long title test asdfljkasdfasdjfgasdf",
		86400,
		"https://www.youtube.com/watch?v=IMorTE0lFLc",
		"WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW",
		"STEAM_0:1:15862026"
	) )

	mp:AddMedia( CreateMedia(
		"Hello world",
		1800,
		"https://www.youtube.com/watch?v=IMorTE0lFLc",
		"Sam",
		"STEAM_0:1:15862026"
	) )

	mp:AddMedia( CreateMedia(
		"ASDSDFawcasiudcg awlieufgawlie",
		180,
		"https://www.youtube.com/watch?v=IMorTE0lFLc",
		"(╯°□°）╯︵ ┻━┻",
		"STEAM_0:1:15862026",
		RealTime() - 1800
	) )

	-- Display UI using fixture
	MediaPlayer.ShowSidebar( mp )
end )]]

--addons/media_player_fixed_edition/lua/mp_menu/horizontal_list.lua:
local PANEL = {}

function PANEL:Init()
	DPanelList.Init( self )

	self:EnableVerticalScrollbar( false )
	self:EnableHorizontal( true )
	self:SetAutoSize( true )
end

function PANEL:Rebuild()

	local OffsetX, OffsetY = 0, 0
	self.m_iBuilds = self.m_iBuilds + 1;

	self:CleanList()

	if ( self.Horizontal ) then

		local x, y = self.Padding, self.Padding;
		for k, panel in pairs( self.Items ) do

			if ( panel:IsVisible() ) then

				local OwnLine = (panel.m_strLineState and panel.m_strLineState == "ownline");

				local w = panel:GetWide()
				local h = panel:GetTall()

				local breakLine = ( not self.m_bSizeToContents and
					( x > self.Padding ) and
					(x + w > self:GetWide() or OwnLine) )

				if breakLine then

					x = self.Padding
					y = y + h + self.Spacing

				end

				if ( self.m_fAnimTime > 0 and self.m_iBuilds > 1 ) then
					panel:MoveTo( x, y, self.m_fAnimTime, 0, self.m_fAnimEase )
				else
					panel:SetPos( x, y )
				end

				x = x + w + self.Spacing

				OffsetX = x
				OffsetY = y + h + self.Spacing

				if ( OwnLine ) then

					x = self.Padding
					y = y + h + self.Spacing

				end

			end

		end

	else

		for k, panel in pairs( self.Items ) do

			if ( panel:IsVisible() ) then

				if ( self.m_bNoSizing ) then
					panel:SizeToContents()
					if ( self.m_fAnimTime > 0 and self.m_iBuilds > 1 ) then
						panel:MoveTo( (self:GetCanvas():GetWide() - panel:GetWide()) * 0.5, self.Padding + OffsetY, self.m_fAnimTime, 0, self.m_fAnimEase )
					else
						panel:SetPos( (self:GetCanvas():GetWide() - panel:GetWide()) * 0.5, self.Padding + OffsetY )
					end
				else
					panel:SetSize( self:GetCanvas():GetWide() - self.Padding * 2, panel:GetTall() )
					if ( self.m_fAnimTime > 0 and self.m_iBuilds > 1 ) then
						panel:MoveTo( self.Padding, self.Padding + OffsetY, self.m_fAnimTime, self.m_fAnimEase )
					else
						panel:SetPos( self.Padding, self.Padding + OffsetY )
					end
				end

				-- Changing the width might ultimately change the height
				-- So give the panel a chance to change its height now,
				-- so when we call GetTall below the height will be correct.
				-- True means layout now.
				panel:InvalidateLayout( true )

				OffsetY = OffsetY + panel:GetTall() + self.Spacing

			end

		end

		OffsetY = OffsetY + self.Padding

	end

	self:GetCanvas():SetWide( OffsetX + self.Padding - self.Spacing )
	self:GetCanvas():SetTall( OffsetY + self.Padding - self.Spacing )

	-- Although this behaviour isn't exactly implied, center vertically too
	if ( self.m_bNoSizing and self:GetCanvas():GetTall() < self:GetTall() ) then
		self:GetCanvas():SetPos( 0, (self:GetTall() - self:GetCanvas():GetTall()) * 0.5 )
	end

end

function PANEL:PerformLayout()

	local Wide = self:GetWide()
	local YPos = 0

	self:Rebuild()

	if self.VBar and not m_bSizeToContents then

		self.VBar:SetPos( self:GetWide() - 13, 0 )
		self.VBar:SetSize( 13, self:GetTall() )
		self.VBar:SetUp( self:GetTall(), self.pnlCanvas:GetTall() )
		YPos = self.VBar:GetOffset()

		if ( self.VBar.Enabled ) then Wide = Wide - 13 end

	end

	if self:GetAutoSize() then

		self:SetWide( self.pnlCanvas:GetWide() )
		self:SetTall( self.pnlCanvas:GetTall() )
		self.pnlCanvas:SetPos( 0, 0 )

	else

		self.pnlCanvas:SetPos( 0, YPos )
		self.pnlCanvas:SetWide( Wide )

	end

end

derma.DefineControl( "DHorizontalList", "", PANEL, "DPanelList" )

--lua/autorun/mgs3_soldiers.lua:
return gluapack()()
--lua/autorun/mgs3_soldiers.lua:
/*
	Addon by Voikanaa	
*/

player_manager.AddValidModel( "GRU", 		"models/player/gru.mdl" );
player_manager.AddValidHands( "GRU", 	"models/player/gru_hands.mdl", 0, "00000000" )
list.Set( "PlayerOptionsModel", "GRU", 	"models/player/gru.mdl" );

player_manager.AddValidModel( "KGB", 		"models/player/kgb.mdl" );
player_manager.AddValidHands( "KGB", 	"models/player/kgb_hands.mdl", 0, "00000000" )
list.Set( "PlayerOptionsModel", "KGB", 	"models/player/kgb.mdl" );

player_manager.AddValidModel( "Ocelot Unit", 		"models/player/ocelot.mdl" );
player_manager.AddValidHands( "Ocelot Unit", 	"models/player/ocelot_hands.mdl", 0, "00000000" )
list.Set( "PlayerOptionsModel", "Ocelot Unit", 	"models/player/ocelot.mdl" );
--addons/onyx_framework_2/lua/onyx/framework/libs/sh_netchunk.lua:
--[[
MIT License

Copyright (c) 2023 Aleksandrs Filipovskis

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
--]]

if (netchunk) then return end

netchunk = netchunk or {}
netchunk.chunks = netchunk.chunks or {}
netchunk.registered = netchunk.registered or {}
-- netchunk.maxBytes = 32768
netchunk.maxBytes = 16384

local split do
    local len = string.len
    local sub = string.sub
    local maxBytes = netchunk.maxBytes

    function split(data)
        local length = len(data)
        local index = 1
        local last = 1
        local chunks = {}

        for i = 1, length do
            if (i - last + 1) > maxBytes then
                chunks[index] = sub(data, last, i)
                index = index + 1
                last = i + 1
            end
        end

        chunks[index] = sub(data, last, length)

        return chunks
    end
end

local function merge(chunks)
    local result = ''

    for i = 1, #chunks do
        result = result .. chunks[i]
    end

    return result
end

function netchunk.Register(name)
    if (SERVER) then
        util.AddNetworkString('netchunk[' .. name .. ']:Send')
    end

    netchunk.registered[name] = true
    netchunk.chunks[name] = {}
end

if (SERVER) then
    local function send(ply)
        if ply then
            net.Send(ply)
        else
            net.Broadcast()
        end
    end

    function netchunk.Send(ply, name, data)
        assert(netchunk.registered[name], 'Trying to send data during unregistered channel (`' .. name .. '`)')

        local encoded = pon.encode(data)
        local chunks = split(encoded)
        local count = #chunks

        for i = 1, count do
            local chunk = chunks[i]
            local length = #chunk

            net.Start('netchunk[' .. name .. ']:Send')
                net.WriteString(name)
                net.WriteUInt(length, 16)
                net.WriteData(chunks[i], length)
                net.WriteBool(i == count)
            send(ply)
        end
    end
else
    netchunk.callbacks = netchunk.callbacks or {}

    local ReadString = net.ReadString
    local ReadUInt = net.ReadUInt
    local ReadData = net.ReadData
    local ReadBool = net.ReadBool

    function netchunk.Callback(name, callback)
        assert(name)
        assert(callback)

        net.Receive('netchunk[' .. name .. ']:Send', function()
            local name = ReadString()
            local length = ReadUInt(16)
            local chunk = ReadData(length)
            local finished = ReadBool()

            local chunks = netchunk.chunks[name]

            chunks[#chunks + 1] = chunk

            if finished then
                local raw = merge(chunks)
                local amt = #chunks

                netchunk.chunks[name] = {}

                local data = pon.decode(raw)

                callback(data, #raw, amt)
            end
        end)
    end
end
--addons/onyx_framework_2/lua/onyx/framework/libs/sh_netvar.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

14/05/2023

--]]

--[[------------------------------
Requires `sh_net_extension.lua`, though doesn't need to be loaded before that
--------------------------------]]

if (SERVER) then
    util.AddNetworkString('onyx.netvar:Sync')
    util.AddNetworkString('onyx.netvar:Clear')
    util.AddNetworkString('onyx.netvar:DeleteEntity')
end

onyx.netvar = onyx.netvar or {}
onyx.netvar.list = onyx.netvar.list or {}
onyx.netvar.data = onyx.netvar.data or {}
onyx.netvar.public = onyx.netvar.public or {}

local netvar = onyx.netvar
local types = {
    [TYPE_BOOL] = {write = net.WriteBool, read = net.ReadBool},
    [TYPE_NUMBER] = {
        write = function(value, bits, unsigned)
            if (unsigned) then
                net.WriteUInt(value, bits)
            else
                net.WriteInt(value, bits)
            end
        end,
        read = function(bits, unsigned)
            if (unsigned) then
                return net.ReadUInt(bits)
            else
                return net.ReadInt(bits)
            end
        end
    },
    [TYPE_STRING] = {
        write = net.WriteString,
        read = net.ReadString,
    }
}

local function syncNetVar(entIndex, data, id, value, receiver)
    local write = types[data.type].write

    net.Start('onyx.netvar:Sync')

    net.WriteUInt(entIndex, 16)
    net.WriteString(id)
    write(value, data.bits, data.unsigned)

    -- could be invalid player
    if (receiver == nil) then
        net.Broadcast()
    else
        -- 100% is a player
        net.Send(receiver)
    end
end

function netvar:Register(id, data)
    data.id = id
    self.list[id] = data

    if (data.public) then
        self.public[id] = value
    end
end

do
    local ENTITY = FindMetaTable('Entity')

    function ENTITY:onyx_SetNetVar(id, value)
        if (CLIENT) then return end

        assert(isstring(id), Format('bad argument #1 to `onyx_SetNetVar` (expected string, got %s)', type(id)))
        assert(value ~= nil, 'bad argument #2 to `onyx_SetNetVar` (expected anything, got nil)')

        local data = netvar.list[id]

        assert(data, string.format('trying to set invalid netvar \'%s\' to %s', tostring(id), tostring(self)))

        local entIndex = self:EntIndex()

        netvar.data[entIndex] = netvar.data[entIndex] or {}
        netvar.data[entIndex][id] = value

        syncNetVar(entIndex, data, id, value, (not data.public and self or nil))
    end

    function ENTITY:onyx_ClearNetVar(id)
        if (CLIENT) then return end

        local entIndex = self:EntIndex()

        if (not netvar.data[entIndex]) then return end

        local data = netvar.list[id]

        netvar.data[entIndex][id] = nil

        net.Start('onyx.netvar:Clear')

        net.WriteUInt(entIndex, 16)
        net.WriteString(id)

        if (data.public) then
            net.Broadcast()
        else
            net.Send(self) -- must be a player
        end
    end

    function ENTITY:onyx_GetNetVar(id, fallback)
        local storage = netvar.data[self:EntIndex()]
        if (storage) then
            return (storage[id] or fallback)
        end
    end
end

if (CLIENT) then
    net.Receive('onyx.netvar:Sync', function(len)
        local entIndex = net.ReadUInt(16)

        local id = net.ReadString()
        local data = netvar.list[id]
        local read = types[data.type].read
        local value = read(data.bits, data.unsigned)

        netvar.data[entIndex] = netvar.data[entIndex] or {}
        netvar.data[entIndex][id] = value
    end)
else
    hook.Add('onyx.PlayerNetworkReady', 'onyx.netvar', function(ply)
        for entIndex, storage in pairs(netvar.data) do

            local isClient = (ply:EntIndex() == entIndex)

            for id, value in pairs(storage) do
                local data = netvar.list[id]
                if (data.public or isClient) then
                    syncNetVar(entIndex, data, id, value, ply)
                end
            end

        end
    end)
end

if (SERVER) then
    hook.Add('EntityRemoved', 'onyx.netvar', function(ent)
        -- lol it gets called by engine on clientside for all entities after data has been synced
        local entIndex = ent:EntIndex()

        netvar.data[entIndex] = nil

        net.Start('onyx.netvar:DeleteEntity')
            net.WriteUInt(entIndex, 16)
        net.Broadcast()
    end)
else
    net.Receive('onyx.netvar:DeleteEntity', function(len)
        local entIndex = net.ReadUInt(16)

        netvar.data[entIndex] = nil
    end)

    net.Receive('onyx.netvar:Clear', function(len)
        local entIndex = net.ReadUInt(16)
        local netvarID = net.ReadString()

        if (netvar.data[entIndex]) then
            netvar.data[entIndex][netvarID] = nil
        end
    end)
end


-- print(Entity(1):EntIndex())
-- PrintTable(netvar.data)
-- Entity(1):onyx_SetNetVar('store_loaded', true)
--addons/onyx_framework_2/lua/onyx/framework/libs/sh_util.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/libs/thirdparty/cl_bshadows.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/libs/thirdparty/cl_bshadows.lua:
local ScrW = ScrW
local ScrH = ScrH

local sin = math.sin
local cos = math.cos
local rad = math.rad
local ceil = math.ceil

local Start2D = cam.Start2D
local End2D = cam.End2D

local PushRenderTarget = render.PushRenderTarget
local OverrideAlphaWriteEnable = render.OverrideAlphaWriteEnable
local Clear = render.Clear
local CopyRenderTargetToTexture = render.CopyRenderTargetToTexture
local BlurRenderTarget = render.BlurRenderTarget
local PopRenderTarget = render.PopRenderTarget
local SetMaterial = render.SetMaterial
local DrawScreenQuadEx = render.DrawScreenQuadEx
local DrawScreenQuad = render.DrawScreenQuad

local RenderTarget, RenderTarget2
local load_render_targets = function()
	local w, h = ScrW(), ScrH()
	RenderTarget = GetRenderTarget("onyx_bshadows_original" .. w .. h, w, h)
	RenderTarget2 = GetRenderTarget("onyx_bshadows_shadow" .. w .. h,  w, h)
end
load_render_targets()
hook.Add("OnScreenSizeChanged", "onyx.BShadows", load_render_targets)

local ShadowMaterial = CreateMaterial("onyx_bshadows", "UnlitGeneric", {
	["$translucent"] = 1,
	["$vertexalpha"] = 1,
	["alpha"] = 1
})

local ShadowMaterialGrayscale = CreateMaterial("onyx_bshadows_grayscale", "UnlitGeneric", {
	["$translucent"] = 1,
	["$vertexalpha"] = 1,
	["$alpha"] = 1,
	["$color"] = "0 0 0",
	["$color2"] = "0 0 0"
})

local SetTexture = ShadowMaterial.SetTexture

local BSHADOWS = {}

BSHADOWS.BeginShadow = function()
	PushRenderTarget(RenderTarget)

	OverrideAlphaWriteEnable(true, true)
	Clear(0, 0, 0, 0)
	OverrideAlphaWriteEnable(false, false)

	Start2D()
end

BSHADOWS.EndShadow = function(intensity, spread, blur, opacity, direction, distance, _shadowOnly)
	opacity = opacity or 255
	direction = direction or 0
	distance = distance or 0

	CopyRenderTargetToTexture(RenderTarget2)

	if blur > 0 then
		OverrideAlphaWriteEnable(true, true)
		BlurRenderTarget(RenderTarget2, spread, spread, blur)
		OverrideAlphaWriteEnable(false, false)
	end

	PopRenderTarget()

	SetTexture(ShadowMaterial, "$basetexture", RenderTarget)
	SetTexture(ShadowMaterialGrayscale, "$basetexture", RenderTarget2)

	local xOffset = sin(rad(direction)) * distance
	local yOffset = cos(rad(direction)) * distance

	SetMaterial(ShadowMaterialGrayscale)
	for i = 1, ceil(intensity) do
		DrawScreenQuadEx(xOffset, yOffset, ScrW(), ScrH())
	end

	if not _shadowOnly then
		SetTexture(ShadowMaterial, "$basetexture", RenderTarget)
		SetMaterial(ShadowMaterial)
		DrawScreenQuad()
	end

	End2D()
end

onyx.bshadows = BSHADOWS
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_image.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

05/06/2022

--]]

local PANEL = {}

AccessorFunc(PANEL, 'm_Material', 'Material')
AccessorFunc(PANEL, 'm_colColor', 'Color')
AccessorFunc(PANEL, 'm_iImageAngle', 'ImageAngle')
AccessorFunc(PANEL, 'm_iImageScale', 'ImageScale')
AccessorFunc(PANEL, 'm_iImageWide', 'ImageWide')
AccessorFunc(PANEL, 'm_iImageTall', 'ImageTall')

function PANEL:Init()
    self:SetImageScale(1)
    self:SetImageAngle(0)
    self:SetColor(color_white)
    self:SetURL('https://i.imgur.com/PnE3dNf.png', 'smooth mips')
end

function PANEL:SetImageSize(w, h)
    h = h or w -- square

    self:SetImageWide(w)
    self:SetImageTall(h)
end

function PANEL:SetURL(url, parameters)
    self.m_WebImage = onyx.wimg.Simple(url, parameters)
end

function PANEL:SetWebImage(id, parameters)
    self.m_WebImage = onyx.wimg.Create(id, parameters)
end

function PANEL:SetSVG(id, w, h, colorable)
    self.m_SVG = onyx.svg.Create(id, w, (h or w), colorable)
end

function PANEL:SetImage(path, params)
    self:SetMaterial(Material(path, params))
end

function PANEL:GetWebImage()
    return self.m_WebImage
end

function PANEL:GetSVG()
    return self.m_SVG
end

function PANEL:Paint(w, h)
    self:Call('PaintBackground', nil, w, h)

    local webImage = self:GetWebImage()
    local material = self:GetMaterial()
    local svg = self:GetSVG()
    local color = self:GetColor()
    local scale = self:GetImageScale()
    local angle = self:GetImageAngle()
    local iw, ih = self:GetImageWide() or w, self:GetImageTall() or h
    local ix, iy = w * .5, h * .5

    iw = iw * scale
    ih = ih * scale

    if svg then
    --     print(svg:GetWide(), svg:GetMaterial())
        svg:Draw(w * .5 - svg:GetWide() * .5, h * .5 - svg:GetTall() * .5, nil, nil, color)
    elseif webImage then
        webImage:DrawRotated(ix, iy, iw, ih, angle, color)
    elseif material then
        onyx.DrawMaterialRotated(material, ix, iy, iw, ih, angle, color)
    end
end

onyx.gui.Register('onyx.Image', PANEL)

-- ANCHOR Test

-- onyx.gui.Test('onyx.Frame', .65, .65, function(self)
--     local test = self:Add('onyx.Image')
--     test:SetSVG('user-outline', 128, nil, true)
--     test:SetSize(256, 256)
--     test:Center()
--     test.PaintBackground = function(panel, w, h)
--         surface.SetDrawColor(0, 0, 0)
--         surface.DrawRect(0, 0, w, h)
--     end
-- end)
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_scrollpanel.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_toggler.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/languages/cl_german.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/ui/cl_job_preview.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/core/cl_core.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

30/07/2024

--]]

onyx.hud.elements = onyx.hud.elements or {}
onyx.hud.sortedElements = onyx.hud.sortedElements or {}

local CONVAR_ROUNDNESS = CreateClientConVar( 'cl_onyx_hud_roundness', '8', true, false, '', 0, 16 )
local CONVAR_PADDING = CreateClientConVar( 'cl_onyx_hud_screen_padding', '30', true, false, '', 5, 40 )

RunConsoleCommand( 'mp_show_voice_icons', '0' )

local function updateSortedElements()
    onyx.hud.sortedElements = {}

    for id, element in pairs( onyx.hud.elements ) do
        table.insert( onyx.hud.sortedElements, element )        
    end

    table.sort( onyx.hud.sortedElements, function( a, b )
        return a.priority < b.priority -- reverse
    end )
end

do
    local cachedPadding = CONVAR_PADDING:GetInt()
    
    cvars.AddChangeCallback( 'cl_onyx_hud_screen_padding', function( _, _, new )
        cachedPadding = tonumber( new ) or CONVAR_PADDING:GetDefault()
    end, 'onyx.hud.internal' )

    function onyx.hud.GetScreenPadding()
        return onyx.ScaleTall( cachedPadding )
    end
end

do
    local parseRoundness = function( value ) return ( math.floor( value / 4 ) * 4 ) end
    local cachedRoundness = parseRoundness( CONVAR_ROUNDNESS:GetInt() )
    
    cvars.AddChangeCallback( 'cl_onyx_hud_roundness', function( _, _, new )
        cachedRoundness = parseRoundness( tonumber( new ) or CONVAR_ROUNDNESS:GetDefault() )
    end, 'onyx.hud.internal' )

    function onyx.hud.GetRoundness()
        return cachedRoundness
    end
end

function onyx.hud.IsElementEnabled( id )
    local optionID = 'hud_display_' .. id
    local optionTable = onyx.inconfig.options[ optionID ]

    if ( optionTable ) then
        return onyx.hud:GetOptionValue( 'display_' .. id )
    end

    return true
end

function onyx.hud.UpdateModelIcon( modelIcon, modelData )
    local is2D = modelIcon.ClassName == 'SpawnIcon'
    local model = modelData.model
    local skin = modelData.skin
    local bodygroups = modelData.bodygroups
    
    if ( is2D ) then
        -- This one is always rebuilding spawnicons...
        -- local bodygroupsStr = ''
        -- for index = 1, 9 do
        --     local id = index - 1
        --     local value = bodygroups[ id ] or 0            

        --     bodygroupsStr = bodygroupsStr .. tostring( value )
        -- end
        
        -- modelIcon:SetModel( model, skin, bodygroupsStr )

        if ( modelIcon:GetModelName() ~= model ) then
            modelIcon:SetModel( model )
        end
    else
        if ( modelIcon:GetModel() ~= model ) then
            modelIcon:SetModel( model ) 
        end

        local ent = modelIcon.Entity
        if ( IsValid( ent ) ) then
            ent:SetSkin( skin )

            for id, value in pairs( bodygroups ) do
                ent:SetBodygroup( id, value )
            end
        end
    end
end

function onyx.hud.GetModelData( ent )
    local bodygroups = {}
    for _, bodygroup in ipairs( ent:GetBodyGroups() ) do
        local id = bodygroup.id
        local value = ent:GetBodygroup( bodygroup.id )
    
        bodygroups[ id ] = value
    end
    
    return {
        model = ent:GetModel(),
        skin = ent:GetSkin(),
        bodygroups = bodygroups
    }
end

function onyx.hud.CompareModelData( modelData1, modelData2 )
    for key, value in pairs( modelData1 ) do
        local otherValue = modelData2[ key ]

        if ( istable( value ) ) then
            for key2, value2 in pairs( value ) do
                local otherValue2 = otherValue[ key2 ]
                if ( not otherValue2 or otherValue2 ~= value2 ) then
                    return false
                end
            end
        else
            if ( value ~= otherValue ) then
                return false
            end
        end
    end

    return true
end

do
    local COLOR_RED = Color( 255, 52, 52)
    local COLOR_BLUE = Color( 55, 52, 255)
    function onyx.hud.GetAnimColor( id )
        if ( id == 0 ) then
            return onyx.LerpColor( math.abs( math.sin( CurTime() ) ), COLOR_RED, COLOR_BLUE )
        end
    end
end

function onyx.hud.OverrideGamemode( id, fn )
    if ( GM or GAMEMODE ) then
        fn()
    end

    -- it's a bit harder to override darkrp func
    -- lol I've had super weird bug on my laptop, that not all InitPostEntity hooks were initiated (without any errors) so I've found this solution
    hook.Add( 'Think', id, function()
        hook.Remove( 'Think', id )
        timer.Create( id, engine.TickInterval(), 1, function()
            fn()
        end )
    end )
end

function onyx.hud.GetMaxProps( client )
    -- SAM / Other admin mod support, however source is unknown so we should avoid errors and stuff :\
    if ( client.GetLimit ) then
        local success, value = pcall( client.GetLimit, client, 'props' )
        if ( success and isnumber( value ) ) then
            return value
        end
    end

    return GetConVar( 'sbox_maxprops' ):GetInt()
end

do
    -- Because draw.SimpleText and other functions have surface.GetTextSize & we do not need it.
    local SetTextColor = surface.SetTextColor
    local SetTextPos = surface.SetTextPos
    local SetFont = surface.SetFont
    local DrawText = surface.DrawText
    function onyx.hud.DrawCheapText( text, font, x, y, color )
        local color = color or color_white

        SetTextColor( color.r, color.g, color.b, color.a )
        SetTextPos( x, y )
        SetFont( font )
        DrawText( text )
    end
end

do
    -- Micro-optimization since we are drawing it a lot of times
    local Clamp = math.Clamp
    local SetDrawColor = surface.SetDrawColor
    local DrawRect = surface.DrawRect
    local RoundedBoxEx = draw.RoundedBoxEx
    local GetRoundness = onyx.hud.GetRoundness
    function onyx.hud.DrawRoundedBoxEx( x, y, w, h, color, co1, co2, co3, co4 )
        local roundness = Clamp( GetRoundness(), 0, h * .5 )
        if ( roundness == 0 ) then
            SetDrawColor( color )
            DrawRect( x, y, w, h )
        else
            RoundedBoxEx( roundness, x, y, w, h, color, co1, co2, co3, co4 )
        end
    end
end

do
    local GetAlphaMultiplier = surface.GetAlphaMultiplier
    local SetAlphaMultiplier = surface.SetAlphaMultiplier
    function onyx.hud.OverrideAlpha( alpha, callback )
        local prev = GetAlphaMultiplier()

        SetAlphaMultiplier( math.min( alpha, prev ) )
            callback()
        SetAlphaMultiplier( prev )
    end
end

do
    local SetScissorRect = render.SetScissorRect
    function onyx.hud.ScissorRect( x, y, w, h, callback )
        SetScissorRect( x, y, x + w, y + h, true )
            callback()
        SetScissorRect( 0, 0, 0, 0, false )
    end
end

function onyx.hud.DrawRoundedBox( x, y, w, h, color )
    onyx.hud.DrawRoundedBoxEx( x, y, w, h, color, true, true, true, true )
end

do
    function onyx.hud.DrawShadowText( text, font, x, y, color, ax, ay )
        local textW, textH
    
        -- Calculate & return size only if required
        if ( ax or ay ) then
            surface.SetFont( font )
            textW, textH = surface.GetTextSize( text )
        
            if ( ax == 1 ) then
                x = x - textW * .5
            end
        
            if ( ay == 1 ) then
                y = y - textH * .5
            end
        end
        
        onyx.hud.DrawCheapText( text, font .. '.Blur', x + 2, y + 2, color_black, ax, ay )
        onyx.hud.DrawCheapText( text, font, x, y, color, ax, ay )
    
        return textW, textH
    end
end

do
    local ELEMENT_MT = {}
    ELEMENT_MT.__index = ELEMENT_MT

    AccessorFunc( ELEMENT_MT, 'm_bInitiliazed', 'Initialized' )

    function ELEMENT_MT:GetID()
        return tostring( self.id )
    end

    function ELEMENT_MT:IsEnabled()
        return onyx.hud.IsElementEnabled( self:GetID() )
    end

    function ELEMENT_MT:Draw( client, scrW, scrH )
        local drawFn = self.drawFn
        assert( drawFn, '\'' .. self:GetID() .. '\' missing draw function' )
        
        drawFn( self, client, scrW, scrH )
    end

    function onyx.hud:RegisterElement( id, data )
        onyx.AssertType( id, 'string', 'RegisterElement', 1 )
        onyx.AssertType( data, 'table', 'RegisterElement', 2 )
    
        data.id = id
        data.priority = data.priority or 50

        self.elements[ id ] = setmetatable( data, ELEMENT_MT )

        updateSortedElements()

        return self.elements[ id ]
    end
end
hook.Add("InitPostEntity", "binbon_hudoptimization", function()
local scrW, scrH = ScrW(), ScrH() 
local client = LocalPlayer()
hook.Add( "OnScreenSizeChanged", "ONYX_resoulation", function( _, __, width, height )
    scrW = ScrW()
    scrH = ScrH() 
end )
hook.Add( 'HUDPaint', 'onyx.hud.Paint', function()

        if ( not onyx_hud_builtFonts ) then
            onyx.hud.BuildFonts()
        end

        for _, element in ipairs( onyx.hud.sortedElements ) do
            local id = element.id

            if ( not element:GetInitialized() ) then
                element:SetInitialized( true )
                if ( element.initFunc ) then
                    element:initFunc( client )
                end
            end
            
            if ( element:IsEnabled() ) then
                onyx.hud.StartScaling( id )
                    ProtectedCall( element.Draw, element, client, scrW, scrH ) -- it won't break the whole cycle
                onyx.hud.EndScaling()
            end
        end

end )
end)
do
    local HIDE = {
        [ 'DarkRP_HUD' ] = true,
        [ 'DarkRP_LocalPlayerHUD' ] = true,
        [ 'DarkRP_EntityDisplay' ] = true,
        [ 'DarkRP_Hungermod' ] = true,
        [ 'CHudHealth' ] = true,
        [ 'CHudBattery' ] = true,
        [ 'CHudDamageIndicator' ] = true,
        [ 'CHUDQuickInfo' ] = true,
        [ 'CHudSuitPower' ] = true,
        [ 'CHudPoisonDamageIndicator' ] = true
    }

    hook.Add( 'HUDShouldDraw', 'onyx.hud.Hide', function( name )
        if ( HIDE[ name ] ) then
            return false
        else
            for id, element in pairs( onyx.hud.elements ) do
                if ( element.hideElements and element.hideElements[ name ] ) then
                    return false
                end
            end
        end
    end )

    hook.Add( 'HUDDrawTargetID', 'onyx.hud.Hide', function()
        return false
    end )

    hook.Add( 'DrawDeathNotice', 'onyx.hud.Hide', function()
        return false
    end )
end
--addons/bb_onyx_hud/lua/onyx/modules/hud/core/cl_settings.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

14/08/2024

--]]

local L = function( ... ) return onyx.lang:Get( ... ) end

local COLOR_PRIMARY = onyx:Config( 'colors.primary' )
local COLOR_SECONDARY = onyx:Config( 'colors.secondary' )
local COLOR_BG = onyx.LerpColor( .1, COLOR_PRIMARY, color_black )

function onyx.hud.OpenSettings()
    local padding = onyx.ScaleTall( 15 )
    local conPadding = onyx.ScaleTall( 10 )

    RunConsoleCommand( 'cl_onyx_hud_show_help', 0 )
    
    local frame = vgui.Create( 'onyx.Frame' )
    frame:SetSize( ScrW() * .5, ScrH() * .65 )
    frame:Center()
    frame:MakePopup()
    frame:SetTitle( 'ONYX HUD' )

    local content = frame:Add( 'Panel' )
    content:DockPadding( padding, padding, padding, padding )
    content:Dock( FILL )

    local navbar = content:Add( 'onyx.Navbar' )
    navbar:SetTall( onyx.ScaleTall( 30 ) )
    navbar:Dock( TOP )
    navbar.Paint = function(panel, w, h)
        draw.RoundedBoxEx( 8, 0, 0, w, h, COLOR_SECONDARY, true, true )
    end

    local container = content:Add( 'Panel' )
    container:Dock( FILL )
    container:DockPadding( conPadding, conPadding, conPadding, conPadding )
    container.Paint = function( panel, w, h )
        draw.RoundedBoxEx( 8, 0, 0, w, h, COLOR_SECONDARY, false, false, true, true )
        draw.RoundedBoxEx( 8, 1, 1, w - 2, h - 2, COLOR_BG, false, false, true, true )
    end

    navbar:SetContainer( container )

    CAMI.PlayerHasAccess( LocalPlayer(), 'onyx_hud_edit', function( bHasAccess )
        if ( IsValid( frame ) ) then
            local tabsAmount = bHasAccess and 2 or 1
            local tabWidth = ( frame:GetWide() - padding * 2 ) / tabsAmount

            navbar:AddTab({
                name = L( 'settings_u' ),
                class = 'onyx.hud.ClientSettings',
                icon = 'https://i.imgur.com/41kCW0x.png'
            }):SetWide( tabWidth )
        
            if ( bHasAccess ) then
                navbar:AddTab({
                    name = L( 'configuration_u' ),
                    icon = 'https://i.imgur.com/Wg3syNS.png',
                    class = 'onyx.Configuration',
                    onBuild = function( panel )
                        panel:LoadAddonSettings( 'hud' )
                        panel:OpenCategories()
                    end
                }):SetWide( tabWidth )
            end

            navbar:ChooseTab( 1 )
            navbar:SetVisible( bHasAccess )
        end
    end )

    return frame
end

concommand.Add( 'onyx_hud', function() onyx.hud.OpenSettings() end )
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_ammo.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

30/07/2024

--]]

local COLOR_OUTLINE = onyx:Config( 'colors.primary' )
local COLOR_LOW = Color( 255, 98, 98)

local WIMG_SPEC_AMMO = onyx.wimg.Simple( 'https://i.imgur.com/CHWwWOq.png', 'smooth mips' )

local BUILD_WEAPONS = {
    [ 'weapon_physgun' ] = true,
    [ 'weapon_physcannon' ] = true,
    [ 'gmod_tool' ] = true,
}

local lastWeapon = NULL
local lerpClip1

local function drawAmmoHUD( client, scrW, scrH, weapon )
    local primaryAmmoType = weapon:GetPrimaryAmmoType()
    if ( primaryAmmoType < 0 ) then return end

    if ( lastWeapon ~= weapon ) then
        lastWeapon = weapon
        lerpClip1 = nil
    end

    local primaryAmmoCount = client:GetAmmoCount( primaryAmmoType )
    local primaryClip = weapon:Clip1()

    local secondaryAmmoType = weapon:GetSecondaryAmmoType()
    local hasSecondaryAmmo = secondaryAmmoType > 0
    local secondaryClip = weapon:Clip2()
    local secondaryAmmoCount = client:GetAmmoCount( secondaryAmmoType )
    
    local hideAmmoCount = false

    -- For grenades and etc.
    if ( primaryClip == -1 ) then 
        primaryClip = primaryAmmoCount
        hideAmmoCount = true
    end

    local lowAmmoStartRange = math.Round( weapon:GetMaxClip1() / 3 )
    local lowAmmoFraction = lowAmmoStartRange > 0 and math.min( 1, primaryClip / lowAmmoStartRange ) or 1
    if ( primaryClip == 0 ) then lowAmmoFraction = 0 end

    lerpClip1 = Lerp( FrameTime() * 16, lerpClip1 or primaryClip, primaryClip )
    
    -- Grab text size
    local textClip = math.Round( lerpClip1 )
    local textRemaining = hideAmmoCount and '' or ( ' / ' .. primaryAmmoCount )
    
    surface.SetFont( onyx.hud.fonts.AmmoClip )
    local textW1, textH1 = surface.GetTextSize( textClip )

    surface.SetFont( onyx.hud.fonts.AmmoRemaining )
    local textW2, textH2 = surface.GetTextSize( textRemaining )
    local totalW = textW1 + textW2
    
    -- Calculate positions and sizes
    local space = onyx.hud.GetScreenPadding()
    local padding = onyx.hud.ScaleTall( 20 )
    local w = totalW + padding * 2
    local h = onyx.hud.ScaleTall( 50 )

    local x = scrW - w - space
    local y = scrH - h - space

    local colorTextPrimary = onyx.hud:GetColor( 'textPrimary' )
    local colorTextSecondary = onyx.hud:GetColor( 'textSecondary' )

    -- Draw secondary ammo
    if ( hasSecondaryAmmo ) then
        local iconSize = h * .35
        surface.SetFont( onyx.hud.fonts.AmmoRemaining )
        local secAmmoTextW, secAmmoTextH = surface.GetTextSize( secondaryAmmoCount )
        local secAmmoTextSpace = onyx.hud.ScaleTall( 2 )
        local secAmmoTotalW = secAmmoTextW + secAmmoTextSpace + iconSize

        local secAmmoBlockWidth = secAmmoTotalW + padding * 1
        x = x - secAmmoBlockWidth

        local secAmmoStartX = x + w + secAmmoBlockWidth * .5 - secAmmoTotalW * .5
        local secAmmoColor = secondaryAmmoCount == 0 and colorTextSecondary or colorTextPrimary

        onyx.hud.DrawRoundedBoxEx( x + w, y, secAmmoBlockWidth, h, onyx.hud:GetColor( 'secondary' ), false, true, false, true )

        WIMG_SPEC_AMMO:Draw( secAmmoStartX, y + h * .5 - iconSize * .5, iconSize, iconSize, colorTextSecondary )
        onyx.hud.DrawCheapText( secondaryAmmoCount, onyx.hud.fonts.AmmoRemaining, secAmmoStartX + secAmmoTextSpace + iconSize, y + h * .5 - secAmmoTextH * .5, secAmmoColor )
    end

    -- Draw primary ammo
    local x0, y0 = x + w * .5, y + h * .5
    local textStartX = x0 - totalW * .5
    local colorClip = onyx.LerpColor( lowAmmoFraction, COLOR_LOW, colorTextPrimary )

    onyx.hud.DrawRoundedBoxEx( x, y, w, h, onyx.hud:GetColor( 'primary' ), true, not hasSecondaryAmmo, true, not hasSecondaryAmmo )
    onyx.hud.DrawCheapText( textClip, onyx.hud.fonts.AmmoClip, textStartX, y0 - textH1 * .5, colorClip, 0, 1 )
    onyx.hud.DrawCheapText( textRemaining, onyx.hud.fonts.AmmoRemaining, textStartX + textW1, y0 - textH2 * .5, colorTextSecondary, 0, 1 )

    -- Draw weapon name
    local name = weapon:GetPrintName()
    draw.SimpleTextOutlined( name, onyx.hud.fonts.SmallBold, scrW - space, y - onyx.hud.ScaleTall( 5 ), color_white, 2, 4, 1, COLOR_OUTLINE )
end

local function drawPropsHUD( client, scrW, scrH )
    local curProps = client:GetCount( 'props' )
    local maxProps = onyx.hud.GetMaxProps( client)
    if ( maxProps < 1 ) then
        maxProps = '∞'
    end
    
    local clipText = curProps
    local maxText = ' / ' .. maxProps

    surface.SetFont( onyx.hud.fonts.AmmoRemaining )
    local clipTextW, clipTextH = surface.GetTextSize( clipText )
    local maxTextW, maxTextH = surface.GetTextSize( maxText )
    local totalTextW = clipTextW + maxTextW

    -- Positions
    local space = onyx.hud.GetScreenPadding()
    local horPadding = onyx.hud.ScaleTall( 20 )
    local verPadding = onyx.hud.ScaleTall( 5 )
    local w = totalTextW + horPadding * 2
    local h = onyx.hud.ScaleTall( 55 )

    local x = scrW - w - space
    local y = scrH - h - space

    local colorTextPrimary = onyx.hud:GetColor( 'textPrimary' )
    local colorTextSecondary = onyx.hud:GetColor( 'textSecondary' )

    -- Draw
    onyx.hud.DrawRoundedBox( x, y, w, h, onyx.hud:GetColor( 'primary' ) )
    draw.SimpleText( onyx.lang:Get( 'props' ), onyx.hud.fonts.Small, x + w * .5, y + verPadding, colorTextSecondary, 1, 0 )
    onyx.hud.DrawCheapText( clipText, onyx.hud.fonts.AmmoRemaining, x + horPadding, y + h - clipTextH - verPadding, colorTextPrimary )
    onyx.hud.DrawCheapText( maxText, onyx.hud.fonts.AmmoRemaining, x + horPadding + clipTextW, y + h - clipTextH - verPadding, colorTextSecondary )
end

onyx.hud:RegisterElement( 'ammo', {
    drawFn = function( self, client, scrW, scrH )
        local weapon = client:GetActiveWeapon()
        if ( not IsValid( weapon ) ) then return end
        if ( client:InVehicle() ) then return end

        local class = weapon:GetClass()
        if ( BUILD_WEAPONS[ class ] ) then
            if ( onyx.hud:GetOptionValue( 'props_counter' ) ) then
                drawPropsHUD( client, scrW, scrH )
            end
        else
            drawAmmoHUD( client, scrW, scrH, weapon )
        end
    end,
    hideElements = { 
        [ 'CHudAmmo' ] = true, 
        [ 'CHudSecondaryAmmo' ] = true 
    }
} )
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_status.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_status.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

18/08/2024

--]]

local hud = onyx.hud
local arrestEndTime

local L = function( ... ) return onyx.lang:Get( ... ) end
local WIMG_LOCKDOWN = onyx.wimg.Create( 'hud_lockdown', 'smooth mips' )
local WIMG_WANTED = onyx.wimg.Create( 'hud_wanted', 'smooth mips' )
local WIMG_ARRESTED = onyx.wimg.Create( 'hud_arrested', 'smooth mips' )
local boostimage = onyx.wimg.Create( 'hud_heart', 'smooth mips' )
local function drawLabel( x, y, w, h, padding, wimg, title, desc, color )
    local x0, y0 = x + w * .5, y + h * .5
    local iconSize = h - padding * 2

    hud.DrawRoundedBox( x, y, w, h, hud:GetColor( 'primary' ) )

    wimg:Draw( x + padding, y + padding, iconSize, iconSize, ColorAlpha( color, 100 + 155  ))

    draw.SimpleText( title, hud.fonts.TinyBold, x + padding * 2 + iconSize, y0, color, 0, 4 )
    draw.SimpleText( desc, hud.fonts.Tiny, x + padding * 2 + iconSize, y0, hud:GetColor( 'textSecondary' ), 0, 0 )
end

hud:RegisterElement( 'status', { 
    height = 120,
    priority = 60,
    drawFn = function( element, client, scrW, scrH )
        local parent = onyx.hud.elements[ 'agenda' ]
        local screenPadding = hud.GetScreenPadding()
        local padding = hud.ScaleTall( parent.padding )
        local w = hud.ScaleWide( parent.width )
        local h = hud.ScaleTall( 50 )
        local space = hud.ScaleTall( 7.5 )

        local x, y = scrW - w - screenPadding, screenPadding
        if ( parent.active ) then
            y = y + hud.ScaleTall( parent.height ) + space
        end

        if ( GetGlobalBool( 'DarkRP_LockDown' ) ) then
            drawLabel( x, y, w, h, padding, WIMG_LOCKDOWN, L( 'hud_lockdown' ), L( 'hud_lockdown_help' ), hud:GetColor( 'lockdown' ) )
            y = y + h + space
        end

        if ( GetGlobalBool( 'xpboost' ) ) then
            drawLabel( x, y, w, h, padding, boostimage, "XP BOOST AÇIK", "Her XP 2 katı olarak geliyor", Color(224,245,32) )
            y = y + h + space
        end

        if ( GetGlobalBool( 'printerboost' ) ) then
            drawLabel( x, y, w, h, padding, boostimage, "PRİNTER BOOST AÇIK", "Printerdan paralar 2 katı geliyor", Color(153,245,32) )
            y = y + h + space
        end

        if ( GetGlobalBool( 'meslekboost' ) ) then
            drawLabel( x, y, w, h, padding, boostimage, "MESLEK BOOST AÇIK", "Bazı mesleklerden kazançlar 2 katı", Color(32,212,188) )
            y = y + h + space
        end

        if ( client:getDarkRPVar( 'wanted' ) ) then
            drawLabel( x, y, w, h, padding, WIMG_WANTED, L( 'hud_wanted' ), L( 'hud_wanted_help', { reason = client:getDarkRPVar( 'wantedReason' ) or '' } ), hud.GetAnimColor( 0 ) )
            y = y + h + space
        end

        if ( client:getDarkRPVar( 'Arrested' ) ) then
            local timeLeft = arrestEndTime and math.Clamp( math.Round( arrestEndTime - CurTime() ), 0, 9999 ) or -1
            local timeFormatted
        
            if ( timeLeft >= 0 ) then
                if ( timeLeft > 300 ) then
                    timeFormatted = string.format( '%d %s', math.Round( timeLeft / 60 ) , L( 'minutes_l' ) )
                else
                    timeFormatted = string.format( '%d %s', timeLeft , L( 'seconds_l' ) )
                end
            else
                timeFormatted = L( 'unknown' )
            end

            local helpText = L( 'hud_arrested_help', { time = timeFormatted } )

            drawLabel( x, y, w, h, padding, WIMG_ARRESTED, L( 'hud_arrested' ), helpText, hud:GetColor( 'textPrimary' ) )
        else
            arrestEndTime = nil
        end
    end, 
} )

onyx.hud.OverrideGamemode( 'onyx.hud.OverrideArrest', function()
    usermessage.Hook( 'GotArrested', function( msg )
        arrestEndTime = CurTime() + msg:ReadFloat()
    end )
end )


local movetotime = 0.5
local buttoncooldown = 0.8

surface.CreateFont( "LAWUI_Text", {
	font = "Comfortaa", 
	extended = true,
	size = 25,
	weight = 500,
} )

surface.CreateFont( "LAWUI_Title", {
	font = "Comfortaa Bold", 
	extended = true,
	size = 30,
	weight = 500,
} )

local lawui_main
-- Örnek levelgorev tablosu
local levelgorev = {
    [1] = { gorev = "Sunucuda 2 saat vakit geçir.", renk = Color(255, 13, 13) },
    [2] = { gorev = "Bir printer kullan.", renk = Color(255, 13, 13) },
    [3] = { gorev = "Bir bitcoin kullan.", renk = Color(255, 13, 13) },
    [4] = { gorev = "Bir yere saldır, printer patlat.", renk = Color(255, 13, 13) },
    [5] = { gorev = "Bir yere saldır, bitcoin patlat.", renk = Color(255, 13, 13) },
    [6] = { gorev = "Birini öldür.", renk = Color(255, 13, 13) },
    [7] = { gorev = "Legal meslekte 1 saat zaman geçir", renk = Color(255, 13, 13) },
    [8] = { gorev = "Başkan ol.", renk = Color(255, 13, 13) },
    [9] = { gorev = "Bir silah sat.", renk = Color(255, 13, 13) },
    [10] = { gorev = "Bir silaha sahip ol.", renk = Color(255, 13, 13) },
    [11] = { gorev = "Sunucu steam grubuna katıl.", renk = Color(255, 13, 13) },
    [12] = { gorev = "Bir yapı inşa et.", renk = Color(255, 13, 13) },
}



--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_vehicle_hud.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

20/08/2024

--]]

local COLOR_GREEN, COLOR_RED = Color( 96, 230, 39), Color( 252, 30, 30 )
local COLOR_SHADOW = Color( 0, 0, 0, 100 )
local COLOR_FUEL = Color( 196, 88, 0)
local CONVAR_BLUR = CreateClientConVar( 'cl_onyx_hud_speedometer_blur', '1', true, false, '', 0, 1 )

local STATUS_ICONS = {
    [ 'simfphys' ] = {
        {
            id = 'parking-brake',
            icons = {
                [ 1 ] = { 
                    url = 'https://i.imgur.com/DhZNMqx.png',
                    color = Color( 255, 0, 0 )
                }
            },
            getState = function( vehicle )
                return ( vehicle:GetHandBrakeEnabled() and 1 or 0 )
            end
        },
        {
            id = 'cruise-control',
            icons = {
                [ 1 ] = { 
                    url = 'https://i.imgur.com/rSkZck6.png',
                    color = Color( 166, 255, 0)
                }
            },
            getState = function( vehicle )
                return ( vehicle:GetIsCruiseModeOn() and 1 or 0 )
            end
        },
        {
            id = 'fog-light',
            icons = {
                [ 1 ] = { 
                    url = 'https://i.imgur.com/DgPmV27.png',
                    color = Color( 255, 204, 0)
                }
            },
            getState = function( vehicle )
                return ( vehicle:GetFogLightsEnabled() and 1 or 0 )
            end
        },
        {
            id = 'low-beam',
            icons = {
                [ 1 ] = { 
                    url = 'https://i.imgur.com/ckEQdme.png',
                    color = Color( 51, 255, 0)
                },
                [ 2 ] = { 
                    url = 'https://i.imgur.com/DKVPVJd.png',
                    color = Color( 0, 38, 255)
                },
            },
            getState = function( vehicle )
                if ( vehicle:GetLightsEnabled() ) then
                    if ( vehicle:GetLampsEnabled() ) then
                        return 2
                    else
                        return 1
                    end
                else
                    return 0
                end
            end
        },
    }
}

local hud = onyx.hud
local lerpSpeed

local function drawLine( x1, y1, x2, y2, wide, color )
	local diffX, diffY = x1 - x2, y1 - y2
    local rad = math.atan2( diffX, diffY )
	local rotation = math.deg( rad )
    local height = Vector( x1, y1 ):Distance( Vector( x2, y2 ) )
	
	x1 = x1 - math.floor( diffX * .5 )
	y1 = y1 - math.floor( diffY * .5 )
	
	draw.NoTexture()
    surface.SetDrawColor( color )
	surface.DrawTexturedRectRotated( x1, y1, wide, height, rotation )
end

local function convertToMPH( kmh )
    return kmh * 0.621371
end

local function getMaxSpeed( vehicle, useMPH )
    local maxSpeed = vehicle.GetMaxSpeed and vehicle:GetMaxSpeed() or hud:GetOptionValue( 'speedometer_max_speed' )
    if ( ( maxSpeed / 10 ) % 2 ~= 0 ) then maxSpeed = maxSpeed + 10 end

    local clampedSpeed = math.min( maxSpeed, 300 )

    if ( useMPH ) then
        return math.floor( convertToMPH( clampedSpeed ) / 10 ) * 10
    else
        return clampedSpeed
    end
end

local function drawFuelHUD( element, client, vehicle, scrW, scrH, theme )
    local curFuel = vehicle:GetFuel()
    local maxFuel = vehicle:GetMaxFuel()
	local fuel = curFuel / maxFuel

    local w = hud.ScaleWide( 200 )
    local h = hud.ScaleTall( 40 )
    local x0 = scrW * .5
    local x = x0 - w * .5
    local y = scrH - h - hud.GetScreenPadding()
    local colors = theme.colors

    local horPadding = hud.ScaleTall( 10 )
    local verPadding = hud.ScaleTall( 7.5 )
    local lineW = w - horPadding * 2
    local lineH = hud.ScaleTall( 5 )
    local lineX = x + horPadding
    local lineY = y + h - lineH - verPadding
    local textY = y + verPadding * .5

    hud.DrawRoundedBox( x, y, w, h, colors.primary )
    hud.DrawRoundedBox( lineX, lineY, lineW, lineH, colors.textTertiary  )

    draw.SimpleText( onyx.lang:Get( 'fuel' ), hud.fonts.TinyBold, x + horPadding, textY, colors.textPrimary, 0, 0 )

    local textW = draw.SimpleText( ' / ' .. maxFuel, hud.fonts.Tiny, x + w - horPadding, textY, colors.textSecondary, 2, 0 )
    draw.SimpleText( math.Round( curFuel, 1 ), hud.fonts.TinyBold, x + w - horPadding - textW, textY, COLOR_FUEL, 2, 0 )

    render.SetScissorRect( lineX, lineY, lineX + lineW * fuel, lineY + lineH, true )
        hud.DrawRoundedBox( lineX, lineY, lineW, lineH, COLOR_FUEL  )
    render.SetScissorRect( 0, 0, 0, 0, false )
end

local function drawVehicleHUD( element, client, scrW, scrH )
    local cache = element.cache
    local vehicle = client:GetVehicle()
    if ( not IsValid( vehicle ) ) then return end

    local parent = vehicle:GetParent()
    if ( IsValid( parent ) ) then
        vehicle = parent
    elseif ( vehicle:GetClass() == 'prop_vehicle_prisoner_pod' ) then
        return
    end

    if ( vehicle.GetDriver == nil ) then return end
    if ( vehicle:GetDriver() ~= client ) then return end

    local isAdvanced = simfphys and simfphys.IsCar( vehicle )
    if ( isAdvanced and cvars.Bool( 'cl_simfphys_hud' ) ) then RunConsoleCommand( 'cl_simfphys_hud', 0 ) end -- we cannot just turn block their hook, because there are things beside hud (for example turn signal controls :\)
    
    local size = hud.ScaleTall( 250 )
    local screenPadding = hud.GetScreenPadding()
    local x, y = scrW - size - screenPadding, scrH - size - screenPadding
    local x0, y0 = x + size * .5, y + size * .5

    local theme = hud:GetCurrentTheme()
    local colors = theme.colors

    local outerRadius = math.floor( size * .5 )
    local innerRadius = math.floor( outerRadius * .9 )
    local arcLength = 270

    cache.outerMask = cache.outerMask or onyx.CalculateCircle( x0, y0, outerRadius + 1, 24 )
    cache.innerMask = cache.innerMask or onyx.CalculateArc( x0, y0, 180 + 45, arcLength, outerRadius + 1, 24, true )

    local outerMask = cache.outerMask
    local innerMask = cache.innerMask

    local speed = vehicle:GetVelocity():Length()
    local useMPH = hud:GetOptionValue( 'speedometer_mph' )
    local maxSpeed = getMaxSpeed( vehicle, useMPH )

    local dividers = math.floor( maxSpeed / ( useMPH and 10 or 20 ) )

    local rawSpeed = speed * .09141 * .75
    if ( useMPH ) then rawSpeed = convertToMPH( rawSpeed ) end

	local converted = math.min( maxSpeed, rawSpeed )

    lerpSpeed = Lerp( FrameTime() * 8, lerpSpeed or converted, converted )

    local circFraction = lerpSpeed / maxSpeed
    local colorLine = onyx.LerpColor( circFraction, COLOR_GREEN, COLOR_RED )

    -- Draw blur
    if ( CONVAR_BLUR:GetBool() ) then
        onyx.DrawWithPolyMask( outerMask, function()
            onyx.DrawBlurExpensive( vgui.GetWorldPanel(), 6 )
        end )
    end

    -- Draw background
    onyx.DrawCircle( x0, y0, outerRadius, ColorAlpha( colors.primary, theme.dark and 200 or 100 ) )

    local _, textH = draw.SimpleText( math.Round( lerpSpeed ), hud.fonts.Speedometer, x0, y + size, colors.textPrimary, 1, 4 )
    draw.SimpleText( useMPH and 'mph' or 'km/h', hud.fonts.SmallBold, x0, y + size - textH * .8, colors.textSecondary, 1, 4 )

    -- Draw lines & numbers
    local angStep = 270 / ( dividers )
    local lineLength = hud.ScaleTall( 15 )
    local lineCircRadius = innerRadius - 1
    local lineWidth = hud.ScaleTall( 2 )

    for index = 0, dividers do
        local curAng = angStep * index + 90 + 45
        local rad = math.rad( curAng )
        local cos, sin = math.cos( rad ), math.sin( rad )
        local raw = index * math.Round( maxSpeed / dividers )
        local value = math.Round( raw )
        local textColor = ( math.floor( lerpSpeed ) > 0 and lerpSpeed >= value ) and colorLine or colors.textSecondary
    
        drawLine( x0 + cos * lineCircRadius, y0 + sin * lineCircRadius, x0 + cos * ( lineCircRadius - lineLength ), y0 + sin * ( lineCircRadius - lineLength ), lineWidth, textColor )

        draw.SimpleText( value, hud.fonts.SmallBold, x0 + cos * innerRadius * .75 + 1, y0 + sin * innerRadius * .75 + 1, COLOR_SHADOW, 1, 1 )
        draw.SimpleText( value, hud.fonts.SmallBold, x0 + cos * innerRadius * .75, y0 + sin * innerRadius * .75, textColor, 1, 1 )
    end

    -- Draw line background
    onyx.DrawWithPolyMask( innerMask, function()
        onyx.DrawOutlinedCircle( x0, y0, innerRadius, 1, colors.textSecondary )
    end )

    -- Draw line fill
    local innerMaskFill = onyx.CalculateArc( x0, y0, 180 + 45, arcLength * circFraction, innerRadius, 24, true )

    onyx.DrawWithPolyMask( innerMaskFill, function()
        onyx.DrawOutlinedCircle( x0, y0, innerRadius, 2, colorLine )
    end )

    -- Draw additional info ( simfphys )
    if ( isAdvanced ) then
        local statusTable = STATUS_ICONS[ 'simfphys' ]

        -- it is replicated
        if ( cvars.Bool( 'sv_simfphys_fuel' ) ) then
            drawFuelHUD( element, client, vehicle, scrW, scrH, theme )
        end

        if ( LVS and LVS.HudEditorsHide ) then
            LVS.HudEditorsHide[ 'VehicleHealth' ] = true
        end

        if ( statusTable ) then
            local iconSize = hud.ScaleTall( 20 )
            local iconSpace = hud.ScaleTall( 10 )
            local amount = #statusTable
            local totalW = iconSize * 2 + iconSpace
            local totalH = iconSize * 2 + iconSpace
            local row = 0
            local column = 0

            for index, status in ipairs( statusTable ) do
                local state = status.getState( vehicle )
                local icon = status.icons[ state ] or status.icons[ 1 ]
                local url = icon.url or status.icons[ 1 ].url
                local color = state == 0 and colors.textSecondary or icon.color

                column = column + 1

                icon.wimg = icon.wimg or onyx.wimg.Simple( url, 'smooth mips' )

                icon.wimg:Draw( x0 - totalW * .5 + ( column - 1 ) * ( iconSize + iconSpace ), y0 - totalW * .5 + row * ( iconSize + iconSpace ), iconSize, iconSize, color )

                if ( column >= 2 ) then
                    row = row + 1
                    column = 0
                end
            end

        end
    
    end
end

onyx.hud:RegisterElement( 'vehicle', { 
    drawFn = drawVehicleHUD, 
    priority = 40,
    initFunc = function( element )
        element.cache = {}
    end,
    onSizeChanged = function( element )
        element.cache = {}
    end
} )
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/cfg/sh_columns.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/ui/cl_column_editor.lua:
return gluapack()()
--addons/gmodadminsuite-config/lua/openpermissions_config.lua:
--[[

	   ____                   ____                      _           _                 
	  / __ \____  ___  ____  / __ \___  _________ ___  (_)_________(_)___  ____  _____
	 / / / / __ \/ _ \/ __ \/ /_/ / _ \/ ___/ __ `__ \/ / ___/ ___/ / __ \/ __ \/ ___/
	/ /_/ / /_/ /  __/ / / / ____/  __/ /  / / / / / / (__  |__  ) / /_/ / / / (__  ) 
	\____/ .___/\___/_/ /_/_/    \___/_/  /_/ /_/ /_/_/____/____/_/\____/_/ /_/____/  
	    /_/                                                                           

	Welcome to the OpenPermissions configuration file.
	This is where you'll define who is an OpenPermissions Operator.

	Operators have maximum permissions - you could call them "superadmins" of OpenPermissions.
	They have access to changing the permissions of the server, so only add people you trust here!

]]

-- Enter usergroups that should be Operators
OpenPermissions.Operators.Usergroups = {"superadmin", "operator", "developer", "owner", "founder"}

-- Enter SteamIDs or SteamID64s of people who should be Operators
OpenPermissions.Operators.SteamIDs = {"STEAM_0:1:40314158", "76561198040894045"}

-- Don't delete the line below; your config will break.
return true
--lua/autorun/ppg.lua:
local Category = "The PowerPuff Girls"

local NPC = {	Name = "Buttercup",
				Class = "npc_citizen",
				Model = "models/player/Buttercup.mdl",
				Health = "200",
				KeyValues = { citizentype = 4 },
				Category = Category	}
				Squadname = "Buttercup"
				

list.Set( "NPC", "npc_buttercup", NPC )

player_manager.AddValidModel( "Buttercup", 				"models/player/Buttercup.mdl" )
list.Set( "PlayerOptionsModel",  "Buttercup",				"models/player/Buttercup.mdl" )

player_manager.AddValidModel( "Blossom", 				"models/player/Blossom.mdl" )
list.Set( "PlayerOptionsModel",  "Blossom",				"models/player/Blossom.mdl" )

player_manager.AddValidModel( "Bubbles", 				"models/player/Bubbles.mdl" )
list.Set( "PlayerOptionsModel",  "Bubbles",				"models/player/Bubbles.mdl" )

local Category = "The PowerPuff Girls"

local NPC = {	Name = "Blossom",
				Class = "npc_citizen",
				Model = "models/player/Blossom.mdl",
				Health = "200",
				KeyValues = { citizentype = 4 },
				Category = Category	}
				Squadname = "Blossom"
				

list.Set( "NPC", "npc_Blossom", NPC )

local Category = "The PowerPuff Girls"

local NPC = {	Name = "Bubbles",
				Class = "npc_citizen",
				Model = "models/player/Bubbles.mdl",
				Health = "200",
				KeyValues = { citizentype = 4 },
				Category = Category	}
				Squadname = "Bubbles"
				

list.Set( "NPC", "npc_Bubbles", NPC )

--addons/undertale/lua/psa_undertale/psa_undertale.lua:
return gluapack()()
--addons/undertale/lua/psa_undertale/psa_undertale_cl.lua:
return gluapack()()
--addons/undertale/lua/psa_undertale/resources_01.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/sh_materials.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/sh_materials.lua:
RCD = RCD or {}
RCD.Materials = RCD.Materials or {}

RCD.Materials["background"] = Material("rcd_materials/background.png", "smooth")
RCD.Materials["icon_car"] = Material("rcd_materials/icon_car.png", "smooth")
RCD.Materials["icon_money"] = Material("rcd_materials/icon_money.png", "smooth")
RCD.Materials["icon_paint"] = Material("rcd_materials/icon_paint.png", "smooth")
RCD.Materials["icon_close"] = Material("rcd_materials/icon_close.png", "smooth")
RCD.Materials["icon_leave"] = Material("rcd_materials/icon_leave.png", "smooth")
RCD.Materials["icon_delete"] = Material("rcd_materials/icon_delete.png", "smooth")
RCD.Materials["icon_edit"] = Material("rcd_materials/icon_edit.png", "smooth")
RCD.Materials["icon_validate"] = Material("rcd_materials/icon_validate.png", "smooth")
RCD.Materials["icon_prenium"] = Material("rcd_materials/icon_premium.png", "smooth")
RCD.Materials["icon_check"] = Material("rcd_materials/check.png", "smooth")
RCD.Materials["left_vehicle"] = Material("rcd_materials/arrow_left.png", "smooth")
RCD.Materials["right_vehicle"] = Material("rcd_materials/arrow_right.png", "smooth")
RCD.Materials["needle"] = Material("rcd_materials/needle_opac.png", "smooth")
RCD.Materials["gradient"] = Material("rcd_materials/shadow.png", "smooth")
RCD.Materials["engine"] = Material("rcd_materials/icon_engine.png", "smooth")
RCD.Materials["belt"] = Material("rcd_materials/icon_belt.png", "smooth")
RCD.Materials["colorsBar"] = Material("rcd_materials/colors_reverse.png", "smooth")
RCD.Materials["logo"] = Material("rcd_materials/logo.png", "smooth")
RCD.Materials["toolgun"] = Material("rcd_materials/tool_gun.png", "$ignorez")
RCD.Materials["notify_bell"] = Material("rcd_materials/bell.png", "smooth")
RCD.Materials["test_drive"] = Material("rcd_materials/gradient_drive_test.png", "smooth")
RCD.Materials["lock"] = Material("rcd_materials/lock.png", "smooth")
RCD.Materials["icon_star"] = Material("rcd_materials/star.png", "smooth")
RCD.Materials["color_circle"] = Material("rcd_materials/color_circle.png", "smooth")
RCD.Materials["invoice"] = Material("rcd_materials/invoice.png", "smooth")

RCD.Materials["blur"] = Material("pp/blurscreen")
RCD.Materials["gratientBar"] = Material("vgui/gradient-r")
--addons/realisticcardealer/lua/realistic_cardealer/vgui/cl_toggle.lua:
local PANEL = {}

function PANEL:Init()
    self:SetSize(RCD.ScrW*0.023, RCD.ScrH*0.019)
    self:SetText("")
    self.RCDLerp = 0
    self.RCDActivate = true
    self.RCDLerpColor = RCD.Colors["purple"]
    self.RCDCanChange = true
end

function PANEL:ChangeStatut(bool)
    self.RCDActivate = bool
end

function PANEL:GetStatut()
    return self.RCDActivate
 // 76561198447872548
end

function PANEL:CanChange(bool)
    self.RCDCanChange = bool
end

function PANEL:Paint(w,h)
    self.RCDLerp = Lerp(FrameTime()*5, self.RCDLerp, (self.RCDActivate and w*0.44 or 0))
    self.RCDLerpColor = RCD.LerpColor(FrameTime()*5, self.RCDLerpColor, (self.RCDActivate && self.RCDCanChange and RCD.Colors["purple"] or RCD.Colors["grey"]))

    RCD.DrawElipse(0, 0, w, h, self.RCDLerpColor, false, false)
    RCD.DrawCircle(w*0.28 + self.RCDLerp, h*0.5, h*0.4, 0, 360, RCD.Colors["white"])
end

function PANEL:DoClick()
    if not self.RCDCanChange then return end

    self.RCDActivate = !self.RCDActivate
    self:OnChange()
end

derma.DefineControl("RCD:Toggle", "RCD Toggle", PANEL, "DButton")
--addons/rsc/lua/rsc/shared/sh_metadata.lua:

-- This piece of code just created for appending metadata to the end of a file and reading it.
-- Nothing fancy

RSC.Metadata = RSC.Metadata or {}
local Metadata = RSC.Metadata

Metadata.METADATA_HEADER = "RSC\xa1\xf3"
Metadata.CURRENT_VERSION = 1

function Metadata.AppendMetadata(fileName, metadata)
    if istable(metadata) then metadata = util.TableToJSON(metadata) end
    assert(isstring(metadata))

    local f = file.Open(fileName, "ab", "DATA")
    if not f then return RSC.Log("error", "Failed to append metadata to %s", file) end

    f:Write(metadata)
    f:WriteULong(#metadata)
    f:Write(Metadata.METADATA_HEADER)

    f:Close()
end

function Metadata.ReadMetadata(fileName)
    local f = file.Open(fileName, "rb", "DATA")
    if not f then return RSC.Log("error", "Failed to append metadata to %s", file) end

    f:Seek(f:Size() - #Metadata.METADATA_HEADER)

    local metadata
    if f:Read(#Metadata.METADATA_HEADER) == Metadata.METADATA_HEADER then
        f:Skip(-#Metadata.METADATA_HEADER - 4)
        local size = f:ReadULong()

        f:Skip(-size - 4)
        local json = f:Read(size)
        if json then metadata = util.JSONToTable(json) end
    end
    -- while f:Tell() > f:Size() - 4096 do
    --     local header = f:Read(#METADATA_HEADER)
    --     f:Skip(-#METADATA_HEADER - 1)

    --     if #header == #METADATA_HEADER and header == METADATA_HEADER then
    --         f:Skip(-3)
    --         local size = f:ReadULong()

    --         f:Skip(-4 - size)
    --         local json = f:Read(size)
    --         if json then metadata = util.JSONToTable(json) end
    --         break
    --     end
    -- end

    f:Close()
    return metadata
end

--addons/rsc/lua/rsc/client/cl_capture.lua:
-- This file was generated using Luraph Obfuscator v14.0.3 [https://lura.ph/]

return(function(d,L,J,Y,U,k,u,w,n,M,F,O,o,K,f,j,v,p,D,s,C,X,S,c,r,b,t,y,x,H,Q,P,G,_,A,I,l,N,i)N=({});local g=95;while true do if g<95 then break;else if g>50 then if not N[0X646c]then N[5339]=(((i[6]~=i[0X9]and i[0X04]or g)<=i[8]and g or i[9])+i[0X4]+g-6095819635);N[0X447E]=i[0X6]-i[0X9]-i[0x8]-g+i[9]+0x375C8670;g=i[0X2]+i[4]+i[5]+i[0x2]+i[3]-14303964278;N[25708]=(g);else g=(N[25708]);end;end;end;end;local R,B,m,T=next;g=(0x49);while true do if not(g<0x049)then if not(g>0X14)then else B=(x);m=unpack;if not not N[8645]then g=N[0X21c5];else g=i[0X2]+N[25708]-N[17534]+N[0X0646C]-i[0X09]+0X19F23B81;N[0X21c5]=g;end;end;else T=(type);break;end;end;local W,Z=2.147483648E9,1;local q;g=64;while true do if g==64 then q=(C/0);if not not N[0X2860]then g=N[10336];else g=(i[0X7]-g-i[0X9]-g>=N[5339]and i[2]or i[3])-3203919909;(N)[10336]=g;end;else if g==0X001F then break;end;end;end;local z;g=0X5B;while true do if g<126 then z=function(d,L,J)if d>L then return;end;local Y=L-d+1;if Y>=8 then return J[d],J[d+s],J[d+2],J[d+3],J[d+4],J[d+5],J[d+6],J[d+f],z(d+0X8,L,J);elseif Y>=f then return J[d],J[d+s],J[d+0X02],J[d+3],J[d+4],J[d+5],J[d+6],z(d+0X007,L,J);else if Y>=6 then return J[d],J[d+0x1],J[d+2],J[d+3],J[d+4],J[d+b],z(d+0X6,L,J);elseif Y>=b then return J[d],J[d+1],J[d+2],J[d+0X3],J[d+4],z(d+5,L,J);elseif Y>=4 then return J[d],J[d+1],J[d+2],J[d+0x3],z(d+4,L,J);else if Y>=0x3 then return J[d],J[d+0X1],J[d+0X2],z(d+0x3,L,J);else if not(Y>=0X2)then return J[d],z(d+s,L,J);else return J[d],J[d+0X1],z(d+2,L,J);end;end;end;end;end;if not not N[0X403F]then g=N[0X403F];else N[0X5092]=(i[1]+i[7]-i[7]-i[6]-i[0x07]+3218854563);g=i[8]-N[8645]+i[5]-N[0X21c5]+N[25708]-4453737805;N[0X403F]=g;end;else if g>91 then break;end;end;end;local f,b,E;g=54;while true do if g>29 and g<0x58 then f=(function(d,L,J)J=(J or s);d=d or#L;if not(d-J+1>0X1F3D)then return m(L,J,d);else return z(J,d,L);end;end);if not not N[0X36c9]then g=N[14025];else(N)[0X5194]=((i[1]>=i[0X3]and i[0x009]or g)-N[0X21C5]+i[0x7]-g-2372739489);g=(N[5339]-i[8]-i[0X05]+i[0X2]+N[16447]+1692961379);(N)[14025]=g;end;else if g>54 then E=(x);break;else if g<0X36 then b=({[n]=0X4,[6]=7,[8]=0X9,[4]=0X1,[n]=O,[5]=6,[7]=6,[9]=6,[3]=0X2,[n]=0X1,[0x7]=0X0,[0x2]=7});if not not N[4067]then g=(N[4067]);else(N)[13286]=((i[9]-i[7]<i[0X2]and N[14025]or N[14025])-N[16447]-i[0X8]+1774984288);N[14861]=(i[0X6]+N[10336]+i[0X2]~=i[5]and i[0X1]or N[0X036c9])-i[1]+0X76;g=i[3]-N[0X403F]+N[0x447E]+N[0X5092]-N[20884]-3203919674;(N)[4067]=g;end;end;end;end;end;local m;g=(94);repeat if g==0X5e then m=function(d)return{f(d,{},0X1)};end;if not N[5128]then g=(N[20626]-i[6]+i[0X7]-N[14861]>=N[0X646C]and N[0X0014DB]or N[0x14dB])-0X53;N[0X1408]=g;else g=N[0X1408];end;else if g==0x25 then break;end;end;until false;local z,h,V=tostring;g=(53);while true do if g~=53 then if g==16 then V=(0X1);break;end;else h=(w.h);if not not N[10183]then g=N[0x27c7];else g=((N[8645]+N[0X1408]-N[10336]+N[0x36C9]>=N[0X14db]and N[4067]or N[20884])-0X57);N[0X27C7]=g;end;end;end;local a;g=86;repeat if g==0X56 then a=w.D;if not N[17018]then g=N[0X33e6]-N[20626]-N[0X21c5]-N[0x646C]+i[7]-2372739528;(N)[0X427A]=g;else g=(N[0X427A]);end;else if g==61 then break;end;end;until false;local e=({});for d=U,0XFF do e[d]=t(d);end;local dc,Lc;t=nil;local Jc;g=(92);repeat if g<0x6E and g>80 then dc=error;if not N[0x6F91]then(N)[0X63BC]=((N[0X5092]+i[9]>N[0X447E]and i[5]or N[0X1408])+N[10183]+i[0X1]-2678812463);N[0X6beB]=((i[1]+i[0X7]~=N[4067]and N[0X427A]or N[0X403f])<N[0x5092]and g or N[14025])-N[4067]+94;g=((N[5339]+N[13286]-N[14861]<=i[0x5]and i[5]or N[0X21c5])-N[0XfE3]-2678753703);(N)[0x6F91]=(g);else g=N[0X6f91];end;elseif g<0X5C and g>0Xb then Jc={[0X0]=0X1,2,4,8,0X10,0X20,J,0X80,0X100,0X200,1024,0x800,X,8192,16384,32768,65536,131072,262144,524288,0X100000,2097152,4194304,8388608,16777216,33554432,k,o,0X10000000,536870912,0X40000000,W,G,[0X23]=3.4359738368E10,[42]=4.398046511104E12,[0x0031]=5.62949953421312E14};break;elseif g<80 then Lc=(function(d)d=v(d,'\122',"!\z  !\x21!!");return v(d,'\x2E\46.\z  ..',h({},{__index=function(d,L)local J,Y,U,k,u=a(L,1,0x5);local w=u-0X021+(k-33)*85+(U-33)*7225+(Y-0x21)*614125+(J-0X21)*0X31C84B1;J=w%0X100;w=w/256;w=(w-w%0X1);k=w%256;w=w/256;w=w-w%0X1;u=(w%0X100);w=w/256;w=w-w%1;Y=(w%256);w=(w/256);U=e[Y]..e[u]..e[k]..e[J];w=w-w%1;d[L]=(U);return U;end}));end)(S("LPH:dAI*IVuq*`@]0HP@:F%aW!I!XDI[d&Df-I\"z!!!#^z!!%k+k5YJ^!!!\",J>`T\\BOPq[%!-!%D.RftFCAWpAZ,rC?Z^4-FE2)5B;buN@<?!mW!79NG@tK/W!IK`F*)G:DJ,mQ3[c:b.k*NX!2p*/?XmM\\Co@A.W!$sGFD.TUDIn'7k5YJ^0GslKJuAo`Df9H'@;Ztfz!!!!;#QOi)zW!7Kc@ps1ik5YJ^!$K(rJJp`ApV$V-!!)0^z!8rCjz!!$S\\k5YJ^!!!\"5J/UQNz!!&r%B5M(!@q_eFF(K0!@s\"XQ?XI>XG,PHp5N`\"HzJ:Qe_z!8rGI\"TSN&zW!7?hE+Ns\"k5YJ^zJEHn4z@\"tTbF(KH*ASu[i#&\\R#@V'TCz!!#97k5YJ^!!!#WJJnOhz!!)0^z!$HeD!9X=^!!(pd`e!:Qz!2+k@\"D;du@cm^kTX^11^k8Qh?XIbjGGoI'Eb0?8Ec*\"@ATVNqDK[F?F`(]2Bl@l;/hSb*+ED%8F`M@B-$(Ie/hSRqASu$0+EM+9D.RftFCAWpALMmJ>9YA7,$c<S+>,9!+FPd`HQZ[&Bl7HmGT]-lB4Z0sASuZ>-n[,).4HBf.4HC<\"^bVRDe/#2!'h%6[`O0##'4m,Bl7Q%TE\"rlz)?Ts>z!2p-8ATVNqDK_r]FEqh:k5YJ^z!2p*EDK'#oCT%GX@<Zd(FQWW(!!!#Wc[_r$?XI\\^GA1r*AU(-X7o!u9@n`g)E+<<mCo@ME?ZU@!Vu]6Jz5cCN1W![?Z@:XG$EbTE()HUjXT)\\ik!2p$4Bl7I[!C<Xl?XIY]FCB9\"@VfVSHWb90EZe%u@3B-!G%ku8DJ`s&F<G+4ATJu3Dfd+CF`;;<Ec`F?Ddd0!DfQt:Ddd0tFE2)5B.P0IBOu3qAoD^$+F.mJ+CT;%+E_R1@VfTuFDi:EF(HIfF`Lo0BI@jD-VR?-?VXC(<DZ^^9N=M[-Qm87@rcK?W!?[:Bl7HmGT&#52:2C(!!)0^z!8rL.\"*.slk5YJ^!!!\"0J>`lhATVd#FCB9\"@VfW=z!;nL$W!$I7CikEp!!%P>O0liX)DbEE^&S-5!9X=^!%kp=b_)hs?XIAaVu\\-A\"CGMPA`j$nzDh&a%z!!!!;!WW3#zW!6jPEc#6,W!IK`DKTf*ATHr6!!!\",,KkZ$zJ<>\\>k5YJ^!!!#WIk:[>#64`(zVu\\X9zi$?X\"W!$RTFCjV8zp^_qS#[^qKDf0&nFQWW(!6O?1`.Ouh+K,HN?Ysq%W!-O8@:Wme\"98E%zW!6aMDI[*sW!6sRF(KB6W:Uf3+<VdL+<VdL/M112$47mu+<VdL+<VdL+<VdL+<VdL+<VdL+<VdZ5U@g3.P*2)/hSb//g)8Z+<VdZ/hS\\+.PE1p,pklB/d`^D+<VdL+<VdL+<VdL+<VdL+<VdT.NfiV/2&Cr,palb5X7S\"-7(&g0/\"t3-n$Jg,:+QZ,:Frn.Olu#/g)8Z+<W3g0.8/\"$6UH6+<VdL+<VdL+<VdL+<VdL0.J(s,sX^\\5X7S\"5U@s(+>,&h5X7R]-71&d-9sg]5X7R],:G#m/hSb//hSb/.O@>F5U\\6-+=n`i$6UH6+<VdL+<VdL+<VdL+<W-e+>,!+5X7S\"5X6eA+=JNe+<VdV-mg9+5X7S\"-7(&i/1r%f+<VdL+<VdL+<VdZ/1N%m,q(6.5UIs'+=\\oL+<VdL+<VdL+<VdL+<VdL,:jrj5X7S\"5X6eA.OHPd/1)\\s/hAY#,pjs(5X6YE-9sg]5X7S\"5X7S\"5U.a0/hSb//hAY&5X7S\"5X7S\"-m1,g$6UH6+<VdL+<VdL+<VdL,9S*R5X7S\"5UnEP,p4fb,q^i!/1rJ,.P*5+.P*2'0.8;85X7S\"5X7S\"5X7R\\5X7S\"5X7S\"5U.m+5X7S\"5X6YK+=.@;+<VdL+<VdL+<VdL+>4i[-9sg]5X7S\"5U[pD,9SH_-7U?-5X7RZ0.&qL5X6tK,q^_p5X7S\"5X7R\\00hcL-nHJ`/1`>)/hS7h.O@>F5U.C$$6UH6+<VdL+<VdL+<r!O/g`hK5X7S\"5X7S\"5V+<3,sX^\\5X6PH+<VdL/1*VI,=\"L@.Ng>j5X7S\"5UJ$7,=\"LZ5VFHL5U@gD5X6YE0.\\Lu/0HSs$6UH6+<VdL+<W'c+<VdT5UIg),pklB5UJ-8+=oc&-pU$_5V+$#+<VdL+<Vmo5VFZ85UIU,5X7S\"5V+3+,sX^\\5X6_?+<VdL.R66a5X6YI,pb/d/d`^D+<VdL+<W<[+<rNj,=\"LZ-6jol0-`_I5VF6+5X7R]5X7R_/g)8Z+=nj)5U\\670.J(e,sX^F+<VdQ5X7S\"5X6V<+<VdL+<W't5UIm//hSb&-8#WJ+<VdL+<VdL0/\"tD5UJ$)+=JR%5U.g&+<W=&0-Deq-9sg]5U.U@5U@X$-n$B,-7U,k5X7S\"5X6YK+<s-:5U.U@5X6YB,sX^\\5X7R]/2&D$5VF>h+<VdL+<VdL,pb/j5U.C(-9sg],9SX)5X7R\\-9sg]-8-to+<W3g-n$_u/0H&f0.&qL5X7S\"5X7S\"/1Mtp/h\\M95U.a*5X7R_,:G/s/hS\\%,:Yr3$6UH6+<VdL+@%5*-70if-9sg]-7U,\\+<W<a5X7S\"5X7S\"5X7S\"5X7S\"-9sg@0.8,35X7S\"5X7S\"5UJ$)+=KK?5X7S\"5X7S\"5X6tR5X7S\"5U.m..LI:@+<VdL+<W!X/0uSb/g`%j+<Vd[5X7R_/g)8f-pU$_5X6YL-nd5,0-_kf0.&qL5X7S\"5X7S\"5X7S\"5U[`t/1*VI5X7S\"5X6YI+=KK?-7UZ6-nboM+<VdL+<VdZ,q:-)-m10.5X7R_+=]WA5X7S\"0-DA[+<W-[5X7S\"5X7R]/hB77+=n`g+>,!+5X7S\"5U.C(,:Xud0.\\>55X7Ra+<VdV5X6YL.OHVP+<VdL+<VdL+>+uo/gEVH5X7S\"5V+$#+=\\^'5UA$6-9sgC-nHJ`+<W3`,sWb'5X7S\"5X7S\"5U\\67/0H&g5X7S\"5X7S\"5UJ$)+<VdL+=09<5X6qS$6UH6+<VdL+@%D!/gWbJ5X7S\"5X6_?+<VdL+<W9Z+<W't5X7S\"5X7R_+<VdL+<VdZ.OZSi5X7S\"5X7S\"5X7S\"-7CDf+>,<\".R5:&+<W=&5U@O*0+&gE+<VdL+<VdL5Umm/-9sg]5X7R]/g)8Z+<VdL+<VdL+<W9i-9sg].P<&55X7S\"5X6YI+=nul/1r%f+<W9f.OZVl/gWbJ,9S9t.Nfib5X6V</0bKE+<VdL+<VdL+<VdR/0HT25X7S\"5Umm!+<VdL+<VdL+<VdL+<VdL+<W9]5X7S\"5X7S\".P<#45X7S\"-nIVK5X7S\"-6Oic-nZVb+<VdL/g`h0+=n`E+<VdL+<VdL+<VdL+<W<[.R66a5X6P:+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<Vsq-8$ho$6UH6+<VdL+<VdL+<VdT-m1,h5X7S\".NfiV+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdO5UJ*7,75P9+<VdL+<VdL+<VdL+>+un+=nj)5X6kC+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL-pT+3/0bKE+<VdL+<VdL+<VdL+<VdL+<rK]/gWbJ.NgB05VF6&+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+>5u,/hACX+<VdL+<VdL+<VdL+<VdL+<VdL/h\\=i,=!P-+=09\"/1`\"s+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<W=&5V+N@$6UH6+<VdL+<VdL+<VdL+<VdL+<VdV-m0WW5UA$*/g)Q-5X7S\",qgel+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<Vd[5X6kQ.LI:@+<VdL+<VdL+<VdL+<VdL+<VdL+<W<j+<Vsq-7g8h5X7S\"5X7S\"-m0p',qgkn+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL,=\"LF+=IR>+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<r?Y/g`hK,;()e5X7S\"-8$c55X7S\"5X7R\\/g)Vs/g)8Z+<VdL+<VdL+<VdL+<VdV/hSG\"/g`hK/0HSQ+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL5Umm/,sX^\\,qL/i0-Dl45X7S\"5X7S\"5V+N65X7S\"5U@O*-9sg].Nfs$-8$nt5Un<7+=09<-8$Dj$6UH6+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL0-DAe-9sg]5U@s(+<W-^-9sg]5UJ*+,=\"LZ5X6eA,=\"LZ,p4U$5Umm-/g)8Z00hcf5Umm)$6UH6+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<Woo/g)bk5X7S\"5X6YE/1r%f+<VdL+<VdL+<VdL+<VdL+<VdL/hAJ#,pklB5X7R]/hSOZ+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+=8Kh+<VdZ0-rkK5X7S\"5X7S\"5X7S\"5X7S\"5X7S\"5X7S\"5X7S\"5X7S\"-nZVj-jh(>+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL/0cet/g)8Z+<VdL/hS\\+/1`>'/1`D+/hS7h+<VdL+<VdL/2&4T$6UH6+<VdL+C/8)/IDh-+<VdL+<Vf*\"_D^pDfQa*z!!!\"nJcu,S!!%V&\"q1M51CO9b1]RLTs8W-!&$Q8f\"QKt#!<FuA%06Ju!>,KE#n7J,%0[1L!<Ej&!>,?A\"Uu%P!<Eu:!<EW<!<FPP!!33F,6.]D!0Mm<$ipCP!Xo)1b5rDG!<il4!M]`c!Bg_t!<F-<4TPQl!<Kq<DsRKR!=Su01N.pK0`b>V.I.%Rp]2rI$ipAZ($>Su)%6NHNro@_!>Q\"D!D@@t!>toVp]2B9DhJ39!ET:>4#oGe'at*D@i,6u\"$I%n!I$s54UG%M!<ET0!F#s5!M]]b!AOT`!<LLI;DA=U1arG+70+tD$ipBm!C[#D!=Su0_Z:/H!BW^N0`_[`!J:DN0a.S7.00H<!A+H`!<IO9!@\\1@!A+<\\!<LpU;_\\:R70,7H$ipD/!E1]R!C[#H!=Su0mf??=!<GUi0`_[`!N,re!@\\0\\!<J5_;DeUY1bA_/@OW$D$ipBu!E(cY!AlA/!FdJm/IVX\\[fJnu/HJd%!<ET0!M9Bk5lgup!<Ke670,OT70,[\\$ipBu!`DGj!Alq?!=Su0f)nGB70sA'!NuQCKEDYa<riI4DhJ2r!C[\"q!E0:*!=Su0_ZE7-3=/VE!<E6^CB4hE!L!X$gB%C)$ipCP\"98E$s8W-!&,?:j\"R6,.KEE(m$ipBa\")ihp+TVuP!M9H_!?D1L!<JMh#QXr0$ipD'!`L*?!=Su0rrQ7&):&Bj!<E?4!<K5'70*Pq$ipCH\"&fL,!C[\"u!E'@1!H&&A!C[\"q#n-h8ZNCI6!<j2_!>u:H!Ug/#3>F[c!<M'[70,CL$ipD'\"&h>`!=Su0mfNVS^B=QG!<IfU;`OjZ70,OX$ipCl!t522'2pml!=Su0Ns#jl!Gb+)3<9Nh!J^eH!Bg`f4TPQl!<L@H70,gX$ipCX\"B%Mh!Ale;!F.bg\"UkD4irigO'g4td3=QAt!Lj3\\!C6_p!<KA,;FL`i2ZWqB@Q>/d$ipCp!_!,U#ua+j!=Su0VZ[8+!<il4!CIJ\"!!Ec=&.AO=!!)kH\"q1M5'+=mB'+=mB'EA+4s8W-!&(^sS%Fket!<E?]!<E3'!!**/zS:UqR!<JYj$ipBu!C.A#!H3Vn'`e^D!G??;!>PVD!<ER=PQ;L6$ipB):([XA$ipAfA<[*,&I\\[@-RT?<KEES.)2&*#'c@`K'ncZ($ipAN5SX;##8Ig_1)1CS\"(;cV'at*D9.(#XKEDV`!A>8j$Pa'N!>c.F!Lj+#PQ;@.<=orX#8ICW2A$Z=!Yo>K$ipBm!@J0cKEDV`!HSYM!>#51s8W-!rstk+gCFer%>t5f$ipB9#QOr,z]7L4q!<I*I!<I*I!<N&u3\"bKXNrf^j!?X99_ueNk$ipAVC`+8[!C.Y+!Ee[h*>&>nK)u&^!<EQXliA+I$ipBu!c/_pli@Lq!AjcUs8W-!rsoX6$.fK%KE34s:]US7A:t%&)*J!<))rAt!>c.F!QtL4!=8d*#lt'FKEDYa$ipBU70*Pm;[!1&$ipB970*u($ipBq!H2Wl!=Su0Wr[#K&[VU>\"VD=T!<Kq90aSQqDhJ31!H5UP*<?fc&HN:@!K-tskQ2n.',;)[70+800aSj$$ipB!70+,,0aS]u$ipB]!=Su0%ppJ#*C(VG!@JU&S-'0#!Ug%h+X%:'!<LLI.[U5K+UeAPhZ78P!?E1f*??\"+!<M?aC`+7H\"\"NX<*?>stRfXT=!<G7j!<LdQDhJ3-!H7<*%06k<!K.\"E*<?0J!!!'1$ig8-!2G,M$ipBu!=Su0RfNou!Lj,is8W-!s8NW($_.^X%;#VA\"[rFq#n-h8F%$*E*D@1_kQ2.n!IIij*?>Oh!NuMm!>,W,!>Q28!>ua`!<HgH%1rUL!<FuePQ;X>$ipAr70*i(70*u4Dl<aQ!C[#,'at*D918k%*CTuP'at*D.n'IF%1E7<;ag^)-\".N+'c-lc\"[rFq\"UkD4Nr^g5\"T`Q.!>,>@!<F92!<iW8!<Ej&!=9nL!<EW<!<JAb;@sKA7Kien70*Pu$ipC(!=Af,$8jju+>c#;3ta[V!!!\"ZJd)Va!C$tn!C'B]!?DRL!FnP!*<ciP!@'<&,lnDT!=LUs+TVuP!?;(=s8W-!rsuIF.u+9_&Kq0D!@8%K!<F2L!<HCn!>,>e#o*JV)$'b9&HN>0!>u&0!?D=P!<FhT*Ff*Y!<Ej&!?hml%07=R!<NBX8lo3s!!!\"fL^\"7g!S7_g!<Ld\\$ipC<(,=>?d/a7V!<ER>1=ZC+$ipA>700@gGmj]S=&PRi&HOfk!LWs0!<J_lE5)MVPlUjc!LWsC/Y)nC0bpA_!=Su0:IP;H!JLO_!<HsjM#jFR!=Su0?TeFh!N?).!<FQ=T`G/p7004cGmj]S+#/2/!<ET0!B2`a!Qb?C0sLc(!<Fpk!RUoK(BG,e!=Su0k5bP`!PJLB!<Jen0k&$%!=Su0F\"t3+`;ouJ!<M'Y$bZRk\"1\\F@!<LdQ:]UU5!FcAK!Pndk4i%.\"0t@>(!<GUiaT7e20mV\"E!=Su0cN.L[!?&QO0ce(2!=Su0QN7m'&]\"JV!<MKe@^uLW]`ANB!Q+q,!QbA1!Xo)1VZ@2,!J:M0N<-ir!E6f8!<HZG!?&QO$ipBi!C[$k!O2]7W<'+%W<$pj\"0DS)$ipBe!`oE!!V6Ubf`B\\+!=Su0lP'Ds!WNK-$ipC4!_!-d!M'9#!<JMg#QXr0$ipC$!Xo)1Rg(UX!Pnd;$ipCH!\\oB0]`A-B!<KM.8A,$)!=Su0b5t*5_#]f&+Me)l!J:L`!<Lpj702?J\\H**>!T*rfh#Z%,i;j>f!KR:N!N?+i!>1k(W<&t!$ipCl%n-N$!Moi0SH>noXT9!8!N?+!!<T5$_\\N7]!<Kq;700Lkm/[fi!j)L*!F_r.XT>C%700Lkm/[fi!j)L*!F_r.XT>C%=fh^$SH<6!!NcC%!=Su0o)]0u!<mCp\"/Q#!700@gT`Pgs!iZ4\"!=Su0LB@qc!WN=4blPoed/cZ:blN)^]`A/]!H3VneH#[Z!<McoANn'6!<<-$aT2eN!VZ[%!<E?E]`E\\a!s(gk_#`Kr$ipC\\\"'5NJ!S7iN!R1Y1!G+aJ!<ET0!Q,!Sb74QL!=Su0o*,0os8W-!rst+pQO*Hh(&J:<V#^u*!NQ;W?)7Q&$ipC$\">QGJW<!#.!<KA,)PmJ6!RD>d!<Ke88>Q=f!C[$g!P&4>!<K)$$ipC(&4;]`pD*c<!<L@Z8>-%b!B?bR\"JZM:!<M'\\0nfY%!<FpG!Moet$ipCL\":P;3RgMRbW<)Mi&Y0!&!N?).!<J)h!iZ3q(BFpF!K.+M!NcBr!YLt)XT>O)$ipB]\"ZEI`W<&t!$ipCt\":P;3^DI4W!<il4!LEsE@EefR0u3n<!<Fo8eH#[Z!<K)%702'BnH'+\"!P8M(!T=(P!Ya)b&HN:@!Q,(0!SmeL!Xo)1Y6?Vq\"4[G&!E./C%1NB`!>bbF!<Irg0qA?A!<F>EV#^Tc!MogZ!\\nPk!<ET0!UBnj!Mogd(iP'0XT8G2!<M?e#QXr0$ipCX\"UkD4_\\PZAW<)eq&Y0!&!N?).!<N'$&Y0!*!NcB&XT>C%W<#EgXTA(q$ipCL#\"8Qh!M'9#!<K5*700@gT`PW'!ODu&V#^Un!=Su0UBV=$!iZ4\"!C[$k!V$1!!<J)_&Y0!*!NcA2!<LdV&Y0!*!NcB2W<'+%W<#EgXT@qm$ipCD#%\"D4W<&t!!iZ3a(]b$G!OE(eH+a4Z+T]7W!=Su0mfj1$!Tse)[hJkV!=Su0ir_^Nq#S#,$ipCD#@dK0nH%;D$ipD+#\"8R_!I6]q!V$3X!=Su0QNoq[o`91qo`=^dm/]6C!VHJe!=Su0K*O.$!W<$\"$ipC4#;O=$JH>i\\!<KY79DJSh!=Su0T*]!\"!V$3d!=Su0`s4=.q#LL)!<K)'0k%`r!=Su0f*=$]!Pnd;0sLbu!<ET0!L!ct!<JZ,(BG,]!=Su0is.fV!It9_!=Su0cNc0f]`A-g\\H0MI!=Su0Rg;$r!=?.7$ipCl#8[CQ]`ANB!VZgR\\H0eQ!=Su0M[45P`;ouJ!<IfY+T\\tO!=Su0o*Ihd[/mZ:$ipC(#Rg_7h[2dQW<)Ym&Y0!&!N?).!<KM4700Lkq#Lm)!RD$Q!MogX\";.1+XT>O)<NQ;$!N?)g!NcC5!b&&/XT>C%DhJ4p!<ET0!Qt`M\\H.<c!=Su0])lOfPlUns)OUU,$ipBm$\"Y`K!<ET0!Ug:_!JLQ:!=Su0M[<rAM#dVc!<N'':P%m6!M'5mSH5Js!=Su0df`&\"!K.0`$ipC8%h&I>P8Fn&!iZ4\"!=Su0V[5cmW<)5a$ipC0$#lpU!R1X6!R1YU!===W!s-XI0n%:I!AR0n!<ET0!Rh>r!<L^O$ipC@#m^P4\"UkD4^BnAS!?&QO$ipB]\"?F-r\\H*QV!<M3e'rqT@V#^u*!M^#k!OVsA![.TP!<ET0!KR@dXT@nmSH93#!KRS&W<&t!XT8L&!UC<u$ipCl%L`@=QNRQT!T=(<!=Su0_[8g5jT4$9$ipC$$<=>3i;qm<$ipC,$=C=Ei;onY$ipC4$4Hq9f+0Up!P&43$ipCD$5&g1W<&t!$ipC`$:Oup!Vla)!<L@N$ipD+!>kjT#cRh5!<KM<!j)M'(BFpF!P8k2!N?+i!>1k(W<&t!$ipD+$4Hq9LC,b]V#^T*!<J)d$ipB])'K$W!<ET0!J_$aW<(l`!=Su0K+(0LXTA(q$ipC8$O?b6\"UkD4]*iAQ!N?+%!=Su0P7%tn!j)L*!=Su0Ws_>sV#bj1!N?+e!>1k(W<&t!$ipCX$WX;0W<&t!$ipBu$Uk)u!V$1&SH>noXT8h2!Tsh&SH>noXT8h2!QtjNXT>C%W<#EgXT>*s&Y0!*!NcA2!<Mp&@As:0!N?)g!NcCq!=Su0h[9hn!Oi=p/M/+S!<KeB;i(MU!=Su0]*q+/5rCYg5p6X;!T+>T!D,jO!DQ!l8OZ>^!<JZ\"=_XN1*=MrLLCG:*!K@,!UCRBZ!Egk1!Za]1/KkN'!J_(m8OZ>^!<Jr*70*\\q70*i$70*u,70+,4!!**<70+D@70+PH70+\\P$ipCH$tWUb!G*$l!=Su0P7C\"^D.*hR!V[$XI>%\\&$ipCt%66-t+[lDh.607C+[lDl/NGgO+UeAP`skH<9grM_7840k!M^'48OZ?B!D,Qc!<KA570,P+$ipBq$q11k4U_>lcO<5CJH:<&$ipBi%0-D077@5K3CNsC4U_>l]+$K7M#dVc!<J5i70.C>$ipD+$q11s;)qWV+[lE7<CHpo=UY<3Y7<u%I=2M)!S7cL!D,uo!<LLU!!**l=\\V\"!$ipCH%RgD,?#T'1AH<2?!OE2'!APl/!<JMr!!**t$ipD/%5D;!!<ET0!RhN5EOc)N0sLbm!<H*+!=]J>[/km_!=Su0k6OKWW<'+&&Y0!&!N?).!<MKu!iZ4`%fm(>!J_1gXT=@]SH<Q*!N?+%!=Su0o*u00!TsM$!S\\9e!=Su0dh<JB'`k-3$ipBu(B=F7s8W-!&$Q,@!Tjgjs8W-!s8NU]$Ddcu\"@IkD7fa#!!OEV1blRhV!=Su0Ns,di!<il4!OiCjH+a4Z$ipCH%j:te!<ET0!WNs)!N?+e!>1k(W<&t!$ipCd%i(QJ!R1WR!<Lp](]fC!W<!D.!Ug@4!P9#E!=Su0^D/K^!U0Uc*WZ</!H=Y;!Ta>N!T='%3T1\"t!Smc2IH:J1$ipCt%n-Mu!NcD8SH>bkW<!D.!M^GS!MKMp$ipC$&.AR?cOhmWT`G0&!<JMu&Y0!&!N?).!<L(D700@go`5I%!NQc#!Moh]!C[$g!UTmr!<K550k%0b!C[$o!JLSQXT8_;$ipD#&5on:#n6s4!Tsdj$ipCl&RqR;T`M+n7004cq#NnbW<)qu$ipC8&M[_%!<GUi\\H.Ng$ipC\\&2@Ui!<GUiW<%PO$ipBq&M]gWV#^Tc!N?+1!=Su0f+CoW!=92D!<L4P7004cnGu&ZW<)Ym$ipCh&7VI:T`M+n$ipC$&RqR;T`M+n$ipD/&7nV-!<ET0!Q,L(SH5Db!?hK;!<ET0!T+JD%A<e'$ipBe&PJeu!<ET0!P8pD!<Jkp$ipC@&.AR?is$>$pB7Gr$ipCp(,=>?h#RNt!<M-[E/t&$f`<gUf`;*^!<Md(!mq#b!=Su0b8<7I!O2YC!jr&u(]b$G!Ug7dblIhG$ipC0&i$?d`;ouJ!<Md)7004cOTGpl!L\"0O]`GqM!=Su0UCo;H!R1WG0uX1@!<Fps!S%2O$ipC\\&kKtB!<ET0!NQl8!MogL\"A?u?!<Fp?!R1WG1!'ID!<Fpk!S%2O$ipBu&i#XPblIhR!<J)l8AP<-!AV7g`;ouoYlVrI!=Su0b7\\Ae]`A-B!<KM>0u3n<!<ET0!M:#[D5dO:DhJ4p!<ET0!RhZ9`<\"Ki!DCZ<!<ET0!P8t!]`H4U!AV+cblIi9aT2DC$ipCp&k)i'!PngG!<L(O@As:0!N?*<KEJ=W!=Su0cP'@\\V#cbj700@gr;dM$!iZ4\"!C[$k!W<$-!<Mp.700LknGs5m!j)L*!<fM*W<&t!!iZ4X%fm(>!J;'uSH>noXT;G(!N?+!!=Su0itDh%!Qu!/i;pIiYQ7/njT1JF$ipBm'HlK<i;rfd$ipC('KOtMf`Abe$ipBa'FY!C],*34!S%2O8C7G=!Fj:S;:,CQ!<KqL0?jO.!NcA2!<M3p?b$3^!N?*\"YlW)MblL66d/ho%$ipCT'F3\"dblQ&i$ipC\\'J[i5\\H)^>!<M'l$ipD#\"u.RS!<ET0!N-V;!<E?4!<K53&Y0!*!NcA2!<Irj@As:0!N?)<V#dOrK,G'u!OEM@XT>C%W<!D.!LFNi!NcC!!Xo)1o+XUoXT@Ye$ipC0'k+'BXT>C%700LkW<*J/!W*QCSH>noXT8h2!M:)8!<N3-&Y0!&!N?).!<L4U700@gV#h&+!OidP!<KeG$ipBm%n-N,!Q>*K!<Lde+T\\tO!=Su0b8!sP!<E30!<JB\"700LkblU<7YlW5R700dseH0*c!P&61!=Su0rtST9]`I^/<NuS8!P&5\"!PJNe!XHC>\\H05A701(&OTGpl!M^E!!N?+A!Xo)1k7n7'!<il4!O!8-!Pnfm!cN_o`;ouJ!<N'47004cBab\"Ch\\?IBN!'1/!AUDOeH#\\9eH#[O(]jLDW<!D.!J_Kt!<E?aPl[!J708_TUCRA6!<M'o3P>I(!>u^TlNt6*$ipBa!WW3\"s8W-!&!dX0#LilF!N?+u!>1k(W<&t!$ipD'\">?GLOTD!R$ipD/(.A8#!JphaV#d7jT`IR_V#cPV$ipBu(GVTaOT>Ik!<JN'$ipCD\":(b(T`Lhf$ipBi(Dm2M!N?).!<LXV+T[8t!=Su0K*a8XK`M2_!<K5;0uX1P!<Fq2!Ta=_$ipCL(D6`Li;j>f!OiCjH+a4Z+T]7W!=Su0gD:8!!J;%cPl[9RAIJS?k8,k@!G)9?!<Jr+700@go`5I%!V[BBSH>bkW<!D.!KRrs[/kmn!=Su0cPK\"NW<&gs&Y0!&!N?).!<N'-(]f[4W<!D.!Ugg>NtMJi!=Su0VZHmO$&&Ck$ipC@(e\"IZ!C[Ct!M^J;!<E?4!<K5<$ipC8(CU<FM\\$fW!SIL_((:3EitsM)!S%2O$ipCX(bsD=f`;+EeH#[O702'Bq#Us*!Q,`_!<Eu<W<%nf!=Su0QPi3mW<)5a$ipBe)%iD@XT>O)?EF7-!N?).!<M@#7004cGmj]SmhcY-!iZ4\"!C[$k!Moi+!<Mp3$ipCh\"@3\"f@%ICZ!O)TPL]LnZ!<Tt9)K]p^'V#1DE\\_*7CoRN!!CftG!QkGY!H*PkC0#oe8ur%i/9[6YXoUjO%&a38!GJh@5Qi\\n3-na@QiW9L,#jj/3_hR[bQ5uiciHfU*l7s1!F1-U&.5-4dK+UB!K$p/!AoN3%[mF:!QG.2.&I#W=L\\B<#QOi)!0;^9$ipA>$ipA>s8W-!s8W*0oE!qTYQY\"-!=]G<!>fM`!<G+[!=_Hu&HP<$'a7#,)$t(!!<G\"l!<I+l!uV+J!<G8`!>/rM!<E?4!<G\\Z!>,ne!>,>i!<E3i!?hn;+TVU(+WV\"7+U)Ke!<H+6>6,<E!<GCl!<E?e/6Q1>zS:UqF!<E?4!<I+-!=9&@!<Ej&!=]3A#mCbH!<Gh^!=^>T%1*=L!<J5^70*]070*i$@L32I70*]470*i<@L32I$ipB-5R@Gl70*]($ipBa!C[\"q+UeAPIpr]f%7L:(&Oc^0\"_%cA%1E7<.n'IF!C[\"u\"_%cA%1E7<$VC^+#n-h8+%62>\"UkD4>8[_N+Ya-,!=Su07goD!\"98E$s8W-!%ugYS\"6L*t!!!@!4AAUK;cQmE4TGH^!2G/N$ipCP!<^+=W<**=quNo$!H7H/YlXq7!<LLJD\\-U`Do`#t!H5%?E<1\")!HeDO!<HhOquX\\9!=Su0ZNC:tYlOk6!<M3`\"-<Nq!H4n<'`e^D!Oi,Ka8u);!=Su0hZ@_X!a,O4!<LXODkmK[!<ET0!P\\[<\">p2g!<J5_Dbt][$ipC0\")i!=!=Su0Y6AjK\",-aV$ipC,!cQ]ld/j>eZiS\\Y!<[T\"!W`]1!WN1=]E3ch!=Su0mfEU`!J(7P$ipBQ$ONI-%1E7<UB:U_!gNce$ipCh\")jP/JHGo]!<J5^DkmFT!H2p#!H51D,lqrF!\\\"-Y!<J)^AMs\\m!!**,\"5!V`!C%#1%1<K$!Y#7a!=]&o%<N$e#s8Y!fDuE^57P+(%1E7<T)il3!q?9l$ipC`\")g`d!Wd5p!oX1]\"2k<'!W`]1!UBi+^]?Fr$ipBIDh%o^!Wd4Eq#US8]EA*6!=Su0Y5rQ$M#dVc!<LdTDsRKZ!=Su0?Z->j!=Su0[fLE?!RUoK$ipC$\"`H)c!<ET0!L!\\*TEDS'!H7<+\\H2eMe,d5a!=Su0.g%@$!<I-.!J(:QDr:YM!W`]1!J:Mn/;XH0De+h0!=Su0Ws!>tV#gZ+!<EFDO98&T$ipD+\"9Vap!=Su0K*-%n\"(;3=!<LLLDm08A!<ET0!QP=]L]S\"d$ipAjD]jH/$ipBq!H5IK`<$&K!<Ke7Dq\"j1!W`Dm!R1ZH$ipBY\"69KR!W`BCT`P6'!<N'!\"6]bk!=Su0P65`j!qcQp$ipB!Do;[E!<ET0!QP7[PQU.O!H60`m/d<,hu`EM!=Su0QND(*m/[4r!<Moq\".TCK!Wd5(!K@-]DqkAU!W`BOPl^u)@$q&s$ipCL\")i\\ji;istoE++T!H6TlklCen!<N'\"Dtj?q!s*>M\"-irhCRG8*!Ajr\\!A+<U!H6<daT2DN!<H8?N!$0_!=Su01N.YP!=Su0(BaF6N<'%^KE@8:!=Su0VZC_[!OVq/Do`!j!<I+<]`A.P#f-NB\"5!Xn!<ET0!P\\a>5YV8tZia/+DbO.3$ipB)Dk$k\\!=Su0Y6&X$!MKMpDmTSB!<ET0!Lj10L]c0.!H3Vnf`;+l,i&J%$ipBu\"E+E/!=Su0MZX@g!QtNDs8W-!s8NUs$AJlP%qbnCz!/6\"/$ipA>$ipA>$ipA>70*Pm!!**,70*hu$ipAb;\\9$2$ipAj;AB?9;@NX-D?U%A70*u($ipAN70+,,$ipAVs8W-!s8W*0d0o^PT`t]$!!3?mzr.,%\\!<E]>!<E`2s8W-!s8NVc#Zn8370*Pm70*\\u&ci\":2$!^Y$ipA>!rr<&#epB?!!!#oJHf[,]`S:#]`S99$ipA2s8W-!s8W*0g'4\\_mLO:;D?'Y:!!'*P\"q1M5Y5o%4!NuMY#mC>r\"mc8V!=Su0Dd`qi,n'eT5;=/^!=Su0-O^\"V[fJ38%0810#ltG8!?Y_R'cd\\`!D=o,!@9%.%5!eF$ipAZ.[0rS*=MrL(GZj7PQ;[;))hs)!G=/&\"dB#r!<H+-!<Jens8W-!s8W*0rr_BoW!b?q\"dB$S($ktM!=Su0P5us5%g`XF!=Mm:)%eS@&HN:@!KR6i!<LXM$ipB]!AP0$!C.A#!EBRL&MY:<!=Su0WrWV0!B4qM!t>9Lli@\\!63Z]VHU8&*!IG4U!FI=@!>ubk%3^r:0d-u,$ipC`!FZ-H)%6NH_Z;J0\"T]#4!=oY?!WW3#!!)88\"q1M5Y6,16!NuSH!<F3[f)bsf70+,\\0b#!$$ipA:0bjuq$ipAB0aS]u$ipAr70+PT<?WA'70+PX#9b*.$ipB970+D0$ipBA70+D48dPMADhJ3=!=Su0>?:hGpB!&i'`e^D!D>i^+TW5k&HP<$)&YjD*?AK%*?>Oh!A?kB'bq,X!@KlR,omRX.4#B'!L!On,p<R`!A-HD.3U8O!<KY13?]Od70+\\<$ipBa!C[#4!=Su0UB(c(!S7AY!<E?]!<E3i!>R1/'bM)f!<N3%s8W-!s8W*0BUK!f!t522'/:@2!=Su0dfB^T!<il4!S7?6)&Y\"p!A,<#!<KM.0.eaj$ipC0!`/mu/IVX\\o)UQP0`_[`!QP6H0eFsc!<Kq:70+tT$ipB]!`^s,/IVX\\UB3jb0dR5/!K.!k.4m+[!<M?a?PP.E70,+d$ipBu!\\l8A!=Su0pB!&u2$\"*d!W)mP#o*IL!<F90's@W=$ipC@!BgGi'at*D+#+K:!=Su0'1!?6#n-h8k5lB^!Wa;M!<M'Y70+,X+;G4?!Xo)1cN6*5#mC_<!P\\_*!>,Vm#o*J3&HMo$!>Q%P!<K)#+;GL3!t522`rea2#ltG8!K.%?%1NIL!<JAd70*i$$ipC<!t522mfGoY'bMQ'&]4VX!<IZ[!!*Wo4$p7S[/h%_<*67'.(956!Bs=czqLJhZ!<E]>!<E`2s8W-!s8NUt#4_l&%r2IP!A4BR#n-h8%g2n5z!/uL6$ipA>$ipA>2$!^Y70*hu)@6it9d<I@$ipAb$ipAR&IAmQ3=u](!YGe@$ipB!70*u(+;\"nf$ipAN3>i,,5T'S'&IfHe.*M`%\"[rG0&MY\"@!>5D6)%6NH5QCc`s8W-!&,-A/\"d0,s!!3=HI8F6ZzTRm@V!<HsE!<HsE!<Ht)!>u1P!<IrV<>cMd$ipA>5SX;#;?[XI70+,00bG9($ipBq!H/Yq!Didt)/L0.A./J>(Jk,5'l4U\"L]KpF)$r#,*<C)3!?hJ?!<F'S)&]@R<>cMd70+84$ipC,!C[\"m!C[\"q\"`K%r%0:CO!>,>@!<FEF)&3kp!<F8s\"W[UP!<Jen:]US7$ipBYDnH)k!=Su06Z8b$+TVuP!KR79#os$T!<G\"Vs8W-!s8NVA!W!+r$OHe5!s/`8z\\:Xto!<K)$$ipC,\"TSN%s8W-!&\"s#m%d*s`!>S<`%2f0T!<I[)&Kq/`!<G,6&M4#^/HGk\\!<L4A0bGQ0$ipB%0bG]40bGi8$ipAR70+,t$ipD+\"Af+\")+=QH7191tcN-ce,nX/i&Le+h!QP:2!>.m'!<EoD!<J)^@LWVI$ipBm\"YgT0!=Su0f)m`>*<B.P+VA&n,nUOd!EV\\j%35iX!P8Cf&KLl\\!<F-.!=_1#!<JMi0bGu<$ipB]\"#16&!AP0,!=Su001>mV9ed(p!=Su0QN8fQ0`_[`!TO;Z!<EoD!<M'[;BZVQ1`6;p70+Dt9,.I.$ipA>70+,t$ipC0\"\\TR2!C[#(9ed(p!=Su0G@D!f\"UkD4k5n'Q%4u#u#mE`u%5A7l!P\\b+!=]JH!<I*n&Np.m2%9Ra+TVU#)$'b,!?FT;!<IfU@LWVI70*i@@LWVI70*iD$ipB]!\\k95!AP08!E('M!AkYp!C[#07191t`rng3%4P`q#mC_<!K.\"J!>SU'!>PV`bQ8Lc2$!^Y0bH,@81aiC0bH,@$ipCT\">LKK!=Su0UB3.^,lo_4.00hX!N,re!>SHl)&3`m'bM;l!<Mcn70*iT@LWVI70*iX$ipC@\"U?J&,n'eTK*Gco#mC_<!KR79&Kq/`!<MKg@M'1e70+,t$ipCp\"?RnA&Oc^L;*-3=.7F7h;*-?]&I\\[@f)\\MZ!<ET0!V6Fb0`_;0&N'Rt!<JAd70*ud@LWVUAHE;A$ipB=AO6P$!!**,70*hu$ipCl\"\\TR2!=Su0])c@M#mC_<!Oi/('`e=D!<K)#;DA=U;BZ&A1`6;pDhnK9!=Su0o)UQX2$\"*d!K.(8%2f0T!<L@I70+,t$ipC4!AP$$!AP0,!AP00!=Su0RfbAO)$(-H!Q,(0!=]WM%1*2,!=]cQ%1*2,!=]nT!<LLK0b#!$0bGE,AR6M\\$ipCT!b)TF\"UkD4T)hah!>,_@!CJjf&J6`0+TYC?!?\"<,*CWd*!>T&U&JY]T!UBbT!>,KE%1*V8!=]?E%1*1H!<JYk70+Dt$ipC<\"CWH\"+]&1?)%6NHqZRB/!N-&3!!!d54AfHo@qB:e:MXfc92/Df>6[]>ErZ1?!0r-?$ipB!$ipB!2$!^Y$ipBQDkmCO!Didt&I\\[@=(MjZ!G+kD!=Su0.qK>:!G)H]!=Su0B0Q^4!XURf&HQgK!u1hF!<Ei9fDu-V56[DV\"U!BX#ltG8!B4RN'`e^D!?Y5h!<ET0!H0\\=.00hX!FGmW$NUY:!=pn2.01Rm.00hX!GDH4s8W-!rst+lrW/Dk$NU5-zOFm`G!<K)$$ipC,\"TSN%s8W-!&*X.m$(h8f!@8<d!<Eu[!@7aT!<LXM70+8@(]d8E70+D@+TWSa$ipB%AI:-m(BG*o$ipC4!C[#D*FT[;0an'`CIJ7E)%6NHK)m\\1.02j</KIhC/J/Bl!C'!R,p`s#!E2lB&HO^3!<GUi,q06'!M][('e(R?!<JMf0a/^$70+\\T<@&q'70+hX$ipBU'-.Yc70+PT$ipB=0a0!,70+tD$ipAb(]i(d#n-h8%n-LF&I\\[@^B#JY,lnDT!VZ[b!@8=$!@7aT!<M?a(]jX=%1E7<k6+d2,n1[lrrEuG!<MWi70+\\d$ipC`!=Su0LBL$H3AE634TPrl!P\\_*!@]U#.4HDK!<LdS0d/g`90!\"R$ipD#!C[#L0eitt!=Su0`r\\mo!<ET0!UBeA.7!u-3<9.L!BDkh.6R\\?!<Mcn0eGNh$ipD+!\\k-M!D>ER!C[#L0ej,#!APT\\!=Su0LBC10!<GUi3ACpC!P\\[j/NEhs3<9.80gPgK!<Jqs0dT*d90!\"R$ipC,\"%tWT!C[#L0ej\\3!=Su0MZQm1/I=iH0eHB[0c:B#!T*uJ!BDkh,s;8`2*h793<9.L!BDkC!<LLK0c<7X$ipCd!`_*8*=MrLQNAm!4TPrl!NQ8j!A,l3!<JMh70,7t$ipCL!t522+%62J&Kq/m!=Su0k5uP%k5c_7!<L4A(]j@5*=MrL[fJnu.1m^(.00hX!WN0T\"Vh&,!>u&=&If0d!?Vm^!<M3`70*\\q0a/!e70*u($ipC`\"@W>'%1E7<P6=;T%1+`m&HP<$'a7D7!=]G<!Rh0M%06J<!<KY4:]US'$ipCD\":P;3lN9QV,nV:$,lnDT!WN66!!*NYLB/_E4C&jg'G_OB!D3=l!!%k-\"q1M5)fLrA\"T^Ua\"T\\T(!<mE.!=8c8!<F]^;?[(E!<iKK!<EW<!<G,O!<EXJKEDee<riV':X/J6!<ET0!=/Z)s8W-!rssttW!9()@MJnI$ipB)$ipB%'gi!.$ipB%!rr<$zqgeq[!<E^\"!>,?#%06o0!=]&<!<EH*s8W-!s8NV'\"PaF\\$k*.;%gE%8!=0%T/._`=N2;$46<4)8[]b0&,^T-=2oC+t+ui09<QK['4W:1`[E3muiR37s$1!%h)+Mf\\+3B\"ge\\=l!XG_SuRjIN9HHq\"^k4cO-*!%ZVbk;Ti;+6[@aq;<.pL4DCHZ\\UqpTOf\"k5YJ^!!&`jJZ&ZfdKJ_5zT\\Y,:CB+>6s8W-!)Fi0Ts8W-!ru-Ohs8W-!s8V6^zon.f6*WH*=s8W-!)N^*]s8W-!s5s@^!!!#'5Cqtt!!!\"LooF[ez!;JC%k5YJ^!!\"!'JJod4s8W-!s8V6^zQkFtK\"&bnlk5YJ^!!!\">J/Z.ts8W-!s8V6^z/2Vq@z!9d71k5YJ^!!#9bJ/UfMs8W-!s8V6^zJC]86z!.`RLk5YJ^!!$F$JEHn4!!!#7nUTd&zJGOfZz!9!a)k5YJ^!!(s7JEHn4!!!\"lr.*r1!!!\"Lb_:Tdqu6Wqs8W-!)Xm_+s8W-!s5s@^!!!!Aepuo`z#S_jQz!&Qljk5YJ^!!'g`JEHn4!!!\"L4FsF88.l_/0Gtd\"rr<#us8W+t!`PfUz!0f*ek5YJ^!!$sNJ`d\"5zH@Y/Y!!!\"L9VI%#z!!'HXk5YJ^!!'qpJZ'.Hb3(!1TTI3fK<>[s3n'/Qz!+6@h)Y*k-s8W-!s/6!jEZ-V1s8W-!s8V6^z^p\\dVz!9b8N)O-6]s8W-!s5s@^!!!\"T1kFfizclIZUgl_X:s8W-!k5YJ^!!(@]J`d\"5z0S&<dzn/$YS\"%G&!)QMEhs8W-!s5s@^!!!#'1P+]hz5k]`,\"n^GqlW+qTrr<#us8W,^z!8nE>k5YJ^!!#:RJ/Yrss8W-!s8V6^z?k\\)0YGhL$s8W-!k5YJ^!!'YlJ`d\"5!!!!Y&V9*Fzp_\\R\\#38[N/R`;Tz!5Q3sk5YJ^!!\"/2J/U6Cs8W-!s8O!)s8W-!s8W,^z!'n&Ek5YJ^!!#jhJ/Zr;s8W-!s8V6^zi7`]\"%fZM.s8W-!k5YJ^!!#9lJEHn4!!!\"\\4b;brz^p&@Pz!'h*Hk5YJ^!!'gbJEHn4!!!#s;1YYLm.9d'%iRM.s8W-!s8O!l`rH)=s8W,^z!.aWjk5YJ^!!#8]J`d\"5!!!#/&V9*Fz!;:p]2#mUUs8W-!k5YJ^!.a]nJ`d\"5!!!\"L\\U`iCznG%Osz!3d#cVugS.)?Tp<s8W-!s5s@^!!!\"L[X]9jrr<#us8W*;?b-4:s8W-!Vuitt)JfBQs8W-!s5s@^!!!\"L]7B&EzjA:Ejz!45RR)OlE[s8W-!s5s@^!!!\"B;1[m1z&Fk8hjo5;[s8W-!)IiaHs8W-!s5s@^zPCOS2oDejjs8W,^z!([rXW!.,_M%<5Az!*VsFk5YJ^!!#hWJ`d\"5zOFZKoz&0-8az!$Loa)Uc4ss8W-!s5s@^!!!\"d)hAoWs8W-!s8W+t'E.gB0:HrI?\"uDmUgu?O6JlMQW!2-o)HfA)\"#Grdk5YJ^!!#jjJ/Sp2s8W-!s8V6^z&3,7(z!!!R]k5YJ^!!(s*JEHn4!!!!qr.#\\.s8W-!s8W,^z!.[ptk5YJ^!!&ZQJ`d\"5!!!!I*J*ARz-pE4Fz!*Bnc)V+lfs8W-!s5s@^!!!#?'nPNJzn.C67z!5K1tk5YJ^!!'h(JEHn4!!!#?3e?GoznGRn#z!.aip)P6s.s8W-!s/6C@&-:m!IGkNuo^ISXk5YJ^!!'gaJ>`OZbNAj*!!!!qoml3*z+PqY3z!.`gSk5YJ^!!%PuJ/V&Zs8W-!s8V6^z82Yr:,ldoEs8W-!k5YJ^!!\".qJEHn4z=FfQ7zd-uRa\"9o9:;!.fY!!!\",eUZf_zY#'\\J\"*,hU)@6BCs8W-!ru)1Bs8W-!s8Nu_rr<#us8W*;qm?D's8W-!k5YJ^!!'gcJ/U`Qs8W-!s8V6^zX>>DG9`P.ms8W-!k5YJ^!!$8$JJo4%s8W-!s8V6^z'L./I#fqame$+L]$KhBh!!!!1omitDVL\\Mtk5YJ^!!$[rJ`d\"5!!!#GnphWArr<#us8W,^z!&,+<W\">\\YLG^VP.MX%r[(JdHR6;JWrr<#us8W,^z!#AC^k5YJ^!!)FrJ`d\"5!!!#/)1grNz(_VB<W2'Cms8W-!k5YJ^!!!\"^JEHn4!!!#\"@Y(H[<ga3Uz!79nZk5YJ^!!$ETJ>`S\\,?b<7z!$M5jk5YJ^!!%P4J/SIWs8W-!s8V6^zHoutY$@I0^#)ZiW)B`bWz!'iDmk5YJ^!.`4JJ`d\"5!!!#7qg]Rkrr<#us8W,^z!;J7!k5YJ^!!&NHJJuK,s8W-!s8T#8.&^Jh+i@5RbT__d_lX`!m%)O3>_(J<o]H2S!!#9@Y(7M(s8W-!s8W,^z!+>\\S)Fsi-s8W-!ru**\\s8W-!s8V6^za>JP3z!4#FP)O:@&s8W-!s5s@^zR=OH#z-;]9Vz!!kQ8k5YJ^!!)L'JJuGts8W-!s8V6^z7T\"a\"z!3l3Jk5YJ^!!%+%J`d\"5zd=A/-kk1uq9EW&',Zs+<4kk+2%-ITj!!!#s14cA/\"fc?=1qTgOz!/k69k5YJ^!!\"/@J/[mrs8W-!s8V6^zCc$\\]ad`>1s8W-!k5YJ^!!%PrJ/Ynos8W-!s8V6^z&3ka/z!9@\".)J-AWs8W-!s/6$09?lW\"zpcX2kz!;&L,k5YJ^!!#9gJ/XIJs8W-!s8V6^!!!\"Ld\\VL5MuWhWs8W-!)N=[qs8W-!s5s@^!!!\"Z:k@d0z!82ncz!7:[pk5YJ^!!\".sJEHn4!!!\"LY^dX[oDejjs8W,^z!%9[Tk5YJ^!!\"tmJJr)!s8W-!s8V6^z^u'Y\\g&M*Ps8W-!k5YJ^!!'AgJJq&Xs8W-!s8O#2O8o7[s8W,^z!#Q<!)@?HDs8W-!s5s@^!!!!AnphW_OoPI]s8W,^z!;^,Tk5YJ^!!%P`JEHn4!!!\"lo76!(zO>MOOz!,+EEk5YJ^!!\"_OJEHn4!!!!Q*J*ARz&H@:Dz!'!/n)IEIDs8W-!s5s@^!!!!aoRQ*)zF>\\X4z!7:Xo)RBDCs8W-!s5s@^!!!!AgOSGez=AXS3zJ<I*e)R'2@s8W-!s5s@^zqgdi0z\\3,<\\RfEEfs8W-!k5YJ^!!#2ZJJpWMs8W-!s8O#8s8W-!s8W+t#$GXu.q@r/z!201=k5YJ^!.Y-PJ`d\"5!!!#'++`STzYVq%N&!?nls8W-!k5YJ^!!%[:JJnWQs8W-!s8O!3rr<#us8W,^z!(KP2k5YJ^!!)dMJ`d\"5zSUfl'ze2MsAz!.7Xpk5YJ^!!$+4J`d\"5!!!\"d'nPNJzoK@cgz!/*(Xk5YJ^!!\"\\lJZ&]$^=:9fz!3d,fk5YJ^!.^T6J`d\"5!!!!a\\UYSl`;fl;s8W*;9o/iLs8W-!k5YJ^!!&BuJ`d\"5!!!\"83.W!qW;lnts8W*;C&\\/4s8W-!k5YJ^!!(M'J`d\"5!!!\"\\o73bDo2Q7RG;6$$hEWt5)k2QEz!-%jdk5YJ^!!((rJJu-\"s8W-!s8O!Prr<#us8W,^z!#R_Ik5YJ^!!&,OJ>`OK&?$Oa3cLmQCCj/n(`\\je^0(ht+Pbnq`f8ph`.[:Rz+PD8`GlRgDs8W-!k5YJ^!!\"uAJ`d\"5!!!\"L[t#Asrr<#us8W*;3gB[Es8W-!k5YJ^!!\"/;JEHn4!!!#g&qT3Gz^q\"uo\"p2/E$1Y8=>kJ'rs8W-!)I3=Bs8W-!s5s@^!!#9WWe'=5zi/3*Kz!$Dr+k5YJ^!!%s9JK!/>s8W-!s8O\"Ds8W-!s8W,^z!3d>lk5YJ^!!$+UJJtKes8W-!s8V6^z$p&t&z!2)<&k5YJ^!!!#KJEHn4!!!#g&:s!Ez!8r@iz!+=B.)IL>\\s8W-!s5s@^!!!#WnpmYBkZUPE\\Yo\\q_5q*Ek5YJ^!!$D'J`d\"5!!!!u4+ZPpzO;*8E\"Tg3n\"!$J(zJ<5<Ez!:]Q0)I*7As8W-!s/6-hOGc5B>3>kc!!!!m0S(.>rr<#us8W,^z!&41uW$+MU6V5L^pk25fHN@hE'ZE+:#)%.`]*F,1*PGc*`49LCz!!%7ok5YJ^!!!!sJEHn4!!!!AeUXS$5&t,kW$U\\jp$:2Ep'0!\"/`S(k8r(be&>kD*2$Nr\"CYoW:r:5Xj;Tc6,z!'n#D)D-gGs8W-!ru*Yos8W-!s8V6^z!*k$mJ,]KJs8W-!k5YJ^!!'h+J/T(#s8W-!s8V6^zW)8,E#TS-q2*M`!2Wk&?!!!\"D3Ir)9rr<#us8W+t!c8P4zJ:j_Mk5YJ^!!'5cJ`d\"5!!!\"P1kFfi!!!#7ENOfTz!9J!Ik5YJ^!!&[%JJpnqs8W-!s8V6^zORRc=G5qUBs8W-!k5YJ^!!!#jJEHn4!!!!A2M%e/Ee^LTz!&,\"9k5YJ^!!)N]J/V&Os8W-!s8T#/\\jl9P\\+]X1)fa9&k>?K\"W!9/*>7)OX)P@$/s8W-!ru+_7s8W-!s8V6^!!!#7:8WU*z!.Z,A)JK-Ms8W-!s5s@^!!!!1pOK1EB.#:0\"ta3!$!\"t`op>^Ys8W-!k5YJ^!!%N`J`d\"5!!!!I*.d8Qz+<Q05)S9>\\U>BW=@+Xp)?62F*UVBnh(337Ab7W\\OB>OWJs8W-!k5YJ^!!(C>JEHn4!!!!52M(#kzJ=M/Qz!3AD9k5YJ^!!'8\"JEHn4!!!\"t2M(#kz+<#goz!2.qo)J-GYs8W-!ru._gs8W-!s8V6^z5l-!L*rc3>s8W-!W!cf\\VEo8q:]P^%;s+,\\!!#9iVh+\"2z#TSEYz!$M,gW!S.0MLc!dS3^3=z!(8Vo)IWREs8W-!s5s@^!!!#gqgdi0z^q>2r\"d#*dWSZe<zi\"^h+zJ1$S4k5YJ^!!#jbJEHn4!!!!)(P1`Lz3\"UZ(z!7#5.)VY2js8W-!s5s@^!!!!E:k>PHa^#hZrr<#us8W,^z!&4+sk5YJ^!!%g6J`d\"5!!%P-Z%3gAs8W-!s8W,^z!;J=#k5YJ^!!\"uUJ`d\"5!!!!A&:s!Ezi7ieFz!2MZ,)J=j*s8W-!s5s@^!!!#INIg6mz4?.oTz!*Btek5YJ^!5K2AJ`d\"5!!!#`Rt9`&z!'#M-%?GIU\"NX`uLShGK>,iL6s8W-!s8W,^z!2M?#k5YJ^!!%P5JEHn4!!!\",&qT3Gz!#U5)s8W-!s8W-!k5YJ^!!#>_J`d\"5!!!\"<rIF&2z!!!#^z!5S>Zk5YJ^!!(Y8J`d\"5z&qT3GzT[A;Qz!8u=Vk5YJ^!!!p1J`d\"5!!!!);1[m1!!!\"LNf&DNz!(Vcpk5YJ^!!&\\hJEHn4!!!\"LeUSR6rr<#us8W,^z!.^Ykk5YJ^!!!#hJEHn4!!!#o&:s!Ez832;?]qbW-s8W-!k5YJ^!!(s6JEHn4!!%PNX+;0Rs8W-!s8W,^z!$E>6k5YJ^!!!#nJEHn4!!!!@COtXK!!!\"L;6#0ch#@?Rs8W-!k5YJ^!!)3pJ`d\"5!!!#G4+ZPpz!*4X5z!5pXD)M>O!s8W-!s/6\"cjlZUD!!!!Ad\"!#Wrr<#us8W,^z!:V[nk5YJ^!!%PSJ>`N865m*-s8W-!s8T#)'?2;5)dl(JY$`.imf3=es8W,^z!$j=Nk5YJ^!!#::JEHn4!!!\"L5(OW4rr<#us8W*;$ig8,s8W-!k5YJ^!!!!]JEHn4!!'gGXF]O7z9K@[ez!24=^W!-#LKGrV.z!!&L=)FXW*s8W-!s/6lM\"t]8as\"kk*e8V/Q9)8UYI]\"2B?DCD\\MW<k\"zBG,k7SGrQgs8W-!k5YJ^!!%QAJEHn4!!!#Wfmr5cz<)%r,z!'n2Ik5YJ^!!$F)JEHn4!!!!ar.*r1zE;+l$\\c;^0s8W-!)Qj#=s8W-!ru.ngs8W-!s8V6^!!!\"LKqX(\\z!$!_E)JSdBs8W-!s5s@^!!!\"l&V9*F!!!\"LGcZH7]'fUus8W-!k5YJ^!!\"Q2JK\"Lds8W-!s8V6^z5kolmz!:]K.W#c-KT#s?%m?_W?(?./bi>03$qo9gGb-9f*EO5,'W!$Qgj8.p=z!+(0o9u$`.s8W-!)QWK0s8W-!s5s@^!!!#s1kFfi!!!!a[\\eToci3tEs8W-!W!>4/.*-\"`$`FJCoZ(ZCO]t:Q`mjeHz!2/5\"k5YJ^!!\"7CJZ'KO1]BWAKKQF/5IYtBqNt,k*1r;oB[@b;qr[qZ!!!!i1P$GVrr<#us8W,^z!5K>#W!)1%`iA2%z!:YL$z!6dHSk5YJ^!!!e8JJqqas8W-!s8O\"R_>jQ8s8W*;L]@DSs8W-!)HHh;s8W-!s5s@^!!!\".A:`nDz!;V0.z!&3qnk5YJ^!!!\"jJEHn4!!!\",p42<+zi:_]az!0B-jk5YJ^!!%!-JEHn4!!!#7\\pt\\<rr<#us8W,^z!-%pfk5YJ^!!)dUJK!kRs8W-!s8T#*hJ4\\X+/jap;_GK@z!+\\9Ek5YJ^!!!T\"J>`]KL9a2_SNZ-9z!#'o%CSUq0s8W-!VurA($KhBh!!!\"4O+HHo!!!#7P,*XIjo>A\\s8W-!k5YJ^!!!\"?JEHn4!!!\"`21Z[fmJm4ds8W*;]C,_!s8W-!k5YJ^!!#\\RJZ&ds?d>$O(Ztbu!!!\"<oRQ*)z^pejWz!(8\\qk5YJ^!!#9mJEHn4!!!\"\\pjhN-z(`n7,$1h%/`-`i+$&.OBz>Yp\"7z!!j3gk5YJ^!!#,=J`d\"5zIXpS]z6nj1j&R?#`I3+-[5TtKjnKh9U;d$%%?[:0sk5YJ^!!'g>J>`OUmcOQM!!!\"ldsr>Us8W-!s8W,^z!;KEBk5YJ^!!&B>J`d\"5!!!!=2M(#kz3#dDeao;>?s8W-!)?9a;z!9X=^!!!!1&qT3GzE#sQKs0ht-s8W-!k5YJ^!!!#'J>`OUL?AO:!!!#7*J(-n9]QBnVDdT;zp_&/@z!7:=fW!T/X9p(mom]UK+#b(\\@r.Ik+9cCg2s8W-!s8V6^zp_AACz!!(ArW!\\]$G'FC&LHl<[k5YJ^!!%6bJ`d\"5!!!!agOL2#rr<#us8W,^z!'p@1k5YJ^!!#7uJZ&\\c9NV_dz!*hI6W\"Na8OBR4_O&#PG)2B)&S/1\\\")K>`Vs8W-!ru.=*s8W-!s8V6^z^tF8$zJ1[[M)S1V%s8W-!s5s@^!!!!I3e?GozA2o/'z!0@kFW!'25n=\\qEzOS\"(dz!;Jd0)Ii^Gs8W-!ru)IKs8W-!s8V6^z(__H=mJd.cs8W-!)B\\tYs8W-!s5s@^!!!\"u@\"B4obQ%VBs8W,^z!)P\\,k5YJ^!!)nuJJt62s8W-!s8T#)0Q,!8K?R@;k('B57j$Y:)GK8ms8W-!s5s@^!!!\"D*J#,[rr<#us8W,^z!5SM_k5YJ^!!#:TJEHn4!!!#Goml3*!!!#7JZaRez!2luNk5YJ^!!&AtJ`d\"5!!!\"08V-%)zeu=3=h>[HSs8W-!)@c`Hs8W-!ru*`ns8W-!s8V6^zi;.u&$&7RO9uhrr\"S1^Uz!1JH$z!0C$.k5YJ^!!(/pJ`d\"5!!!!9'S2#%z^fI+Zk5YJ^!!&Z*J`d\"5!!!#'qgbUMOC+cZBKS!3z!2/\"qk5YJ^!!%N^J`d\"5!!!\",n:2F>rr<#us8W,^z!&u!Mk5YJ^!!#VfJ`d\"5!!!#s3e82if)PdMs8W,^z!:]]4)FD@As8W-!s5s@^!!!!Qo76!(z#^q9ez!2r,5k5YJ^!!#:4J/U<Es8W-!s8V6^z^`7pgz!20=AW#n^%:^$+-HSH<8BRHs(\\*N7J+@>8(rG6)QjH8-5+W@B[s8W-!s8V6^zi7EMBz!2'mSk5YJ^!.Z;OJ`d\"5!!!!Q(4kWKzX@n--z!)PG%)F')Ys8W-!ru.!us8W-!s8V6^z!8i;F8^RM;s8W-!k5YJ^!.[/6J`d\"5z\\U`iCz5T>7m!rr<#s8W-!k5YJ^!!$sqJ`d\"5!!!!a^OYJIz0_0bWz!'o=iW!&,>PIK]Tzd.r3j#(s6\"\"r(1<'Y@?jPMgir8GpI99.Oq1JVc3lHKP8.!!!!A&qT3Gz\\/^&<\\,QF-s8W-!k5YJ^!!(l6JZ''MTOgDag=#bn;T*Am1oL[#A?N4.q[&mn&gBLIWfWD7hO=oU36%\"W\\QiP*z!3d&dk5YJ^!!&(\\JJq8_s8W-!s8V6^z+SC9Jz!&tgHk5YJ^!!!QHJJuH*s8W-!s8V6^zO;NPI\"G<E)gueY;!!!!;XF]O7z&G^k>z!\"eaPk5YJ^!!#:8J/SaHs8W-!s8V6^zYk3J/z!.__4k5YJ^!!!!qJEHn4!!!\",2h;l9rr<#us8W,^z!._S0)Q!H5s8W-!s5s@^!!#7eVLbZL;m>=5gZJP:!!!!A&V9*F!!!!ai1Y_bzJ1[FFk5YJ^!!&)nJZ&h,O[D1RY[eYQrr<#us8W*;FT2=?s8W-!)D:[^s8W-!s5s@^!!!\"h-\\82uG5H:Bz!44b;k5YJ^!!&\\]JEHn4!!!!QoRIi3rr<#us8W,^z!8u4Sk5YJ^!!!\"]JEHn4!!!#/&:s!EzJDPh>z!2MB$W!/S`9+hTpz!!%@rk5YJ^!!\"Q6JZ&cg;2)F6^uk[t!!!\"L)1grNzBGuF?\"Q]U_s8W-!)Hd\"=s8W-!s5s@^!!!\",g48>dzOSXJGVuQess8W-!k5YJ^!!%P7JEHn4!!!!qpOME,zL_t^+zJAID\")CPRbs8W-!s5s@^!!!#7&qT3Gz!-WnUz!+=Q3k5YJ^!!(kPJ`d\"5!!'g<VL]Y-s8W-!s8W*;_Z'T8s8W-!k5YJ^!!\",uJ`d\"5!!!\",pjhN-z5dQ\"(z!!$2Qk5YJ^!!%=BJ`d\"5!!!!W;1YYJE`?E/z!'oCkk5YJ^!!'h,JEHn4!!'gjW.ClNHo;`5>NYtdzZ@M*<z!:k['z!%8b:k5YJ^!!'<>J`d\"5!!!!50nJKfz'r?KEz!7:@g)XjU(s8W-!s/6.LG[fVQaQEO'!!!\"ld\"(9Zz&/9]Yz!:2Cjk5YJ^!!$EjJ>`U0;M%=\"z5j4qnk5YJ^!!(C@JEHn4!!!!q21Z[Zrr<#us8W*N!TsF_!!%NWK7Op_bQ%VBs8W,^z!2NJCW!Dp+1?h#4q<%_X!!!#7^OYJI!!!!aCncLDz!4Y1Ck5YJ^!!'7nJEHn4!!!!_7=hBWKQ=$(,89i/.)9qr<otubZ/d1g\"9M_8+o(.Sk5YJ^!!\"\\fJZ&\\TZ=Z_lz!3d2hk5YJ^!!%QDJEHn4!!!\"42hC,lzJD#J9z!8'5]Vuejk)O:=%s8W-!ru/WNs8W-!s8V6^z&Ggq?z5[pgGk5YJ^!!#8)J`d\"5!!!#7\\:E`BzJGar\\z!,)Ugk5YJ^!!#9rJEHn4!!!##:k9N+^&S-4s8W,^z!(\\epW!;Y3[/p93k5YJ^!!&6[J`d\"5!!!#gqLI`/zbYWj/_uKc:s8W-!k5YJ^!!!LBJK\"@`s8W-!s8O!Sl2Ue`s8W+t\"$l?>k5YJ^!!\"EDJZ&[8.21kEz&Gptr+o_NAs8W-!k5YJ^!!$stJJqsYs8W-!s8T#\"KNRa,z!'F,0W!!?Cpr)=qz^pJV1]Dhj1s8W-!k5YJ^!!%s7JJr,\"s8W-!s8V6^znG.U5#X5PVE;&F9K]`=8zT7EjD`0$8`d,tB/!!!\"le:8I%s8W-!s8W,^z!!(Gtk5YJ^!!'H!J`d\"5!!!!9)M.&Oz+OYe=\"T*.'\\*!_k!!!\"l'nI:1s8W-!s8W,^z!5P[dk5YJ^!!!]nJZ&jGMIU!nh8SR?z!6>e(Vujt/k5YJ^!!(5)JJo)_s8W-!s8O\"Prr<#us8W,^z!\"^i8k5YJ^!!\"]7JJsLIs8W-!s8V6^zL_>7W*RFccs8W-!k5YJ^!!!!uJ/WY2s8W-!s8V6^z!8N+fz!$F:Q)Ee$!s8W-!s5s@^!!!#?3J$>nz*'&T5z!-h@lk5YJ^!!$E_JEHn4!!!#goRNkF&_gPhGQc@Uz!.`[Ok5YJ^!!\"u<J`d\"5!!!\"\\21aojzYkEScH\\h_%s8W-!k5YJ^!!#\\MJ`d\"5!!'gSTRl8+z!;_6/z!+>bU)GgA4s8W-!ru)gUs8W-!s8V6^z!&T5hz!+>GLk5YJ^!!!9<J`d\"5!!!#'r.#^Ms8W-!s8W,^z!-fE5)Y3q.s8W-!s5s@^!!!!Q5(OW#rr<#us8W,^z!.ZeTk5YJ^!!!\"hJEHn4!!!\"D++Y?qs8W-!s8W*;;uZgss8W-!)KGfWs8W-!s5s@^!!!\",gjnPfzi7*;?z!.Z)@k5YJ^!!$EVJ>a*:aSR[CnGR*O8MBCTf\"6d1]&s%n!!!#W&qT3Gzi:qicz!'i;jVup5B%-ITj!!!#?&V9*Fz;#Pq-z!;I.W)Opd,s8W-!s/6$==I&%Lz5lH5rz!73NQVuo@O@iC6es8W-!s8T#+PVU?t25gejcPV[?k5YJ^!!&r2J`d\"5!!!\"<pjf:MrT8qSRoa<O:`LC%mf3=es8W,^z!\":i<W#\\8]kknr>1ML_2T[X`5DqP\"AD,FV+RA>*[11FK,iVrlWs8W-!W!@2`0l3[XPo;X^s8W-!s8V6^zQE,QT1]RLTs8W-!)@ZWFs8W-!s5s@^!!!!a]mq\";s8W-!s8W*;b5_MAs8W-!k5YJ^!!!#UJEHn4!!!\"L[\".<>z!\"jeFz!&+t8k5YJ^!!%NkJ`d\"5!!!#K5(Vksz!5!dEz!&48\"k5YJ^!!!#,J>`Vh8f6`Ok5YJ^!!(M&J`d\"5!!!#?:k9PJs8W-!s8W,^z!$j@Ok5YJ^!!'g^JEHn4!!!!-5Cj^ms8W-!s8W,^z!+>AJk5YJ^!!#DaJ`d\"5!!!!a0S/Beza<#mNHN4$Fs8W-!k5YJ^!!!#lJEHn4zE.I*Oz=>GHjz!\"_8DW\"7[Q@73\"b!FUG!&$^6?<9F5]!!!!9(P*M!s8W-!s8W,^z!'X82k5YJ^!!%Q*JEHn4zeUZf_z0`-C!\"e_J@DgCLGz@,HLtz!9!I!k5YJ^!!&*EJ`d\"5!!!\"t14^@;bl@_Cs8W+t!]Dmuz!!(c()L;A_s8W-!ru,>Gs8W-!s8Nu@s8W-!s8W*;[/U+*s8W-!VueSn)X`I^s8W-!ru-`]s8W-!s8NuTs8W-!s8W,^z!2(9^W!AmM4uLW3PGeU)]\"?W6aT);?s8W-!VuoYb8`p'R!!!\"LT7H))z5lZAtz!6?13k5YJ^!!#JbJ`d\"5!!!\"$&qT3Gze;]%Bz!$Luck5YJ^!!%!/JEHn4!!!#o)hI/Pz-p<.Ez!!!^a)P[93s8W-!s5s@^zfRW,bz:b[I`z!:]N/)B/VTs8W-!s5s@^!!!#Wq1.W.z\\/p4az!'o4fW!.6%J(cRpPEl1Js8W-!)W^qus8W-!s/6WaB*/I!cDY)MPpFi:rT]C>&]0+^z!2MN()Fjc,s8W-!ru*Tjs8W-!s8O\"trr<#us8W,^z!(8bsk5YJ^!!#:2JEHn4!!!#s21Z\\?T`>&ls8W*;WndXSs8W-!)SuIRs8W-!ru,%ms8W-!s8O!Drr<#us8W,^z!$Du,k5YJ^!!!#oJ/Vhqs8W-!s8V6^za;fcoz!73TSk5YJ^!!(5(J`d\"5!!'eBY(>a9z&0HJdz!5Qs3k5YJ^!!\"tnJZ&YsUBMQ6OT5@\\s8W,^z!:a]Qk5YJ^!!%NhJZ&_:nseYXir8uXs8W-!VucJPz!#.DDk5YJ^!!)d4J`d\"5!!!\"lepuo`zE;P1Kz!.[msk5YJ^!!'eUJK!\"ms8W-!s8O!Ys8W-!s8W+t*S-TQqN:$ULKqL3Op(Tc-BA='f,!#:H7eR(]f,$Rz#WdMTnEU&Rs8W-!k5YJ^!!'7rJ/Y-]s8W-!s8O#-rr<#us8W,^z!8'#W)PZBos8W-!s/6-`>Ff<F@2eP5s8W-!s8V6^za;KQlz!'oFlk5YJ^!!'g-J`d\"5!!!\",)M.&Ozpe-/V#64`'s8W-!k5YJ^!!)LEJ`d\"5!!!!i:k9OPs8W-!s8W,^z!'o@j)@HKDs8W-!ru-^ns8W-!s8O\"os8W-!s8W,^z!\"r+Zk5YJ^!!!!:J`d\"5!!%P6K7Ts'8/ro<z!4X,%W\"(A:Ojo+c9SQSI<6N8Lk5YJ^!!(sHJEHn4!!!#GLOgB@s8W-!s8W,^z!!'9Sk5YJ^!!#8DJJr\\2s8W-!s8V6^zp_/5Az!8&$;k5YJ^!!$F\"JEHn4!!!!Qn:7GGhJaVA2ia-46kZ%:k5YJ^!!!EjJZ&XjB'0-o!!!!%4+ZPpzYW795$!S(@?t*n:!b^ZrzJGXl[z!72@0)Og[*s8W-!ru/6Cs8W-!s8V6^z=;HJNz!20\"8k5YJ^!!\"D]J`d\"5z&:ipDz6o'>Vz!8p\\))Q*Q7s8W-!s5s@^!!!\"T0nJKfzckV,1#%5]\"ZE@Boz!,OTFk5YJ^!!\"\\dJ`d\"5!!!\"83J\"+3qAke!k5YJ^!!$gmJJrRns8W-!s8O\"Grr<#us8W,^z!1$K5k5YJ^!!\"/!J/[)?s8W-!s8V6^zP)b)31\\C_Is8W-!k5YJ^!!!!\\JK\"Ofs8W-!s8V6^z<`+Dd3<&sXs8W-!k5YJ^!!$grJJuhVs8W-!s8V6^zPWaT\\z!8u7Tk5YJ^!!'gpJ>`XK=[$[nk5YJ^!!#:7J>`lH)u:bKVVW`M&IrXr.0'>Is8W-!k5YJ^!!!!8J`d\"5!!!\"<qLI`/zbc66Wz!6S,h)Y<t.s8W-!ru0hKs8W-!s8V6^zbVat7z!'mf>k5YJ^!!!#3J>a,4MQ?U+Bj8&T8P\\3ol'bMuC_irQmH%NP@cm^k!!!#k4+ZPpzOS=8D_#FB6s8W-!k5YJ^!!(Y4J`d\"5!!!\"X:k9Ous8W-!s8W*;ScA`is8W-!k5YJ^!!!#QJEHn4!!!!Q(kETMTE\"rks8W*;NqiYSs8W-!)Lh\\cs8W-!s5s@^!!!#gs+'84zGS5Sjz!%8n>W!CGWdT&5A_<1du!!!!m4+ZPpzJ=V3/YQ\"S%s8W-!k5YJ^!!'`EJK\"Les8W-!s8V6^zVGVoC#MA2iJ>)<_k5YJ^!!\".oJEHn4!!%NNY(<MR?bjVCz!'3u.k5YJ^!!)d1JK!GGs8W-!s8V6^zJ@^7L=oSI$s8W-!k5YJ^!5Jc2J`d\"5!!!!91P$HSrr<#us8W*;ci=%Fs8W-!k5YJ^!!%!3J/V_ms8W-!s8V6^z83)5>\"J>_os8W-!Vup+@''B5p!!!#k3.^5mzJ<>BFz!0I,/Vuj^mW!0&J2<j;ez!!)tJW!66Y[Cu4=k5YJ^!!!#.JEHn4!!!\"\\3.VuMs8W-!s8W+t\"$o;]Vug;Ck5YJ^!!!T$J/Utqs8W-!s8O#,rr<#us8W,^z!._J-k5YJ^!!'5dJ`d\"5!!!#[0nJKfz9J_7_z!14USk5YJ^!!')_JK!,>s8W-!s8V6^ze2i0Dz!3lHQ)MJ.js8W-!s5s@^!!!!a:k9N8rr<#us8W*;-3!rEs8W-!k5YJ^!!!\"HJ/[\\Os8W-!s8O\"#s8W-!s8W*;g]%6Qs8W-!k5YJ^!!')TJ`d\"5!!!!/:k@d0z(a\"=lz!6d3Lk5YJ^!'oA@J`d\"5zn:7G?49(+$k5YJ^!!$F'J/Td7s8W-!s8V6^zkR`=.z!&4D&W!;Tql&Sh\"k5YJ^!!!ioJJu)]s8W-!s8Nucrr<#us8W,^z!$KdA)E%Qps8W-!ru*MSs8W-!s8V6^zOSaRkz!'>%K)AN5Os8W-!s5s@^!!!!Apja7ts8W-!s8W,^z!6?75)J&jIs8W-!s,Va8+TMKB!rr<$$NL/,z)#sX:C]FG8IfKHKgAh3RN;rqYFT;CAli7\"cli7\"crVuou,67cEVZ6\\sIK0?J;#pXsZN't*HN4$Gp](9op](9oD#jV:^]4?7IK0?JK)krPaT);@IfKHKPlUjbdJs7IHN4$GVZ?btgAh3RIfKHK\\H)[1#lt#+IK0?J'`n@8,67cEHiO-Hqu?]squ?]s9`b:p?i^6-G5qUCn,NFgl2Ueap&G'mp&G'mb5qYDDZKh<IfKHKi;ruZHN=*HErZ1?q#UNrL&h8SEW?(>jo>A]&H`\"5c2dnFEW?(>mJm4eT`Y8pnc8^jEW?(>zklUnc:'(CqEW?(>T*,,oK`V5SErZ1?qM#1_!<N',$ipD+%1E7<%o91X\"T]c2+b1+M)h8H`\"XP,?*KUdX59YOf,oa3:J.O\"O+TWm@!LX#jq[Er7!AdNNf`_C*5:PY1/RYLe1#OD\\0h27_\\0s'4(]dDeDtFJn!@KTVkSu]>r!>)?0u,+j$SC!O0g@+O\"YC\\#,kr3.,:NXF$ipBI:T<\"N!?jZNKI8&bZm:_D,o_@FYQ?+8+num#)mglD-RC#-#6?.K!JDR5JHQA^!J^^b!<JMf:T<\"N!@^5^fFTW61&(p^-lk19VZQra24u'LDtFl,!H3W;4TTKr'gVj62%]jt0f:[J0o-5m4>H=<0afSc*AKc-X9L6qZm=98/L)\\F/I[I:!S[WNWS%FU+[7.J'.\"Ua!UKh559\\qi,obJWO:NWVliE1Y,sNR*&1&:&,lA<%,9[(6\"2H#S!W`_+\"lTU-\"q1M5MZQ\\Rf`_C*5:P)//KHR:VZQra1%ZA=Dk$ne!D\"pG!?F%[VZd)c22hYq*BB7[\"T^hJ`$RK82$!_X2)-gJ0n9Wd4>Dd-0g%1T\"u-K;J.F@Y1$C\"7(*,9'VZQra24u'LDl<h\"!H3W;4TTKr'gVj62%]jh2)-gJ0si;_4>HaK0afT\"!AQefKEs.KZm<Eg/L)\\F/IVX\\LBC>Of`_C\"59[BU,oc1OO:NX%+hSF6)sdUD&1&:J*KUdX59[fD,oa3:]FlMV+aGA&eHW\\g&I\\[`P7%d\"!Oi/,WS%FU.6f8C&1nnWSYlPj5;DdK0lPP_2$$6&!<Eu&#;Iq71\"ud2D\\Oo,(]iY!0lJ$d!@KTV]HTHm`!8\"Z0sD'@$SC]G0g@+k)_E#9,bu,+,:NXF$ipB]\"Ac#M\"h=^Y59ZOC,obJWO:NWVJ.IkJ,sNQG%j`0F&!.;J59\\Mu,oa3:J.a.IJ.I/A,sNQK'I=^*,bPYo,9[(6rW*$#&`Ng'S/de!\"-j&kQO,MM!<ET0!QP==WS%FU.6f83\"YE\\.a<AJ;-S[?7,s3o\\(,7p+a;Qc@/aNKm5:O5b/K;&BJ-@ML.02\"/!L3l\\\"Ac#M\"T]c2+fHA,)mgmW!@9rRli\\URZm=u=,sNQ'\"XP+p,cD\\/,9[(670+Fr!>bbKnH01#!L!Nm!<Jr!:T<\"N!?jZNr\"gXuZm:_D,sNQ+!@8\\8&'uUK59ZC:,oa3:KE3AD+TWl`!>Q&7&HSF'\"pq45&He[@&HN:@!N-23!<LpY:T<\"N!?jZNU`h$'J.IkJ,sNR*(*sp,,jYOX59[ZC,oa3:fG5bX+TWlR&a0O8>6+cn\"q1M5LB^PRf`_C\"59[fL,obJWO:NX%+hT-J)mgmc#:1T<!@;[>%2AmPW<WGW$ipC0##D5O\"T]c2+cljR)qZ1t!@9rR]HJR?Zm:_:,pOQ6,sR4jS-fi:!<Jer$ipCT##D5O\"T]c2+hS[=)h8H`\"XQAVPSkbdZm;ji,pOQ6,sN\"*#n[OG!J:Rb!<Mcr:T<\"N!@^5^Qj>8a0qG3E!C&<3+>If)#rMa%QjGbRDtk&1!>@1\"!GF4C'er350q]cn0r\"sSDm0L%!>kj<#;L/$\"Yg$?1&N\"G4>DX%0afSc*AKc-PSPhk0qG3E!C&<3+>IfY(c;>4KI&VZDtk&1!>@1\"!GF4S\"Yi+oi!(nu0p!,)4>HI80afSc*AKc-queSjZm=]E/L)\\F/IVX\\pBOL9\"p#l3+j:?@)sdTe%jaF`\\.U),liG`Z,oa3:O:NX%+lj4])mgm#&g\\dA!s']dkT87ZaTlb6,8gLj!TaC#\":P;3WsDM#f`_C\"59\\5Q,obJWliACs+k.>T)mgm7\"!o08!@9t0#Il)m$ipCP#Rg_7cNm=Gf`_C\"59[6Y,oa3:Zm6q:J.J.`,sNQ[#ULGB*KUdX59ZC1,oa3:O:NX%+h/75)h8HL%jaF`U_4smZm;k',pOQ6-/\\e=W!AFe7I:<t#tkj2f`h?U^`O-h$ipC\\\"UkD4RgDlif`_C*5:Q4-/KHR.VZd)c1#rEk*ArtW\"T^hF`$R?40`_;(0usMQ,VcM/0`j)M#m\"t+*\\d[4!RD',DqGXV!B`*l\"#2nmkQ<OI/aNKm5:PY%/KHR:VZQra0q]XDDhoYr!H3W%3<='n'g2R20bFF,24^WI!C&H7+>n)5,rl!EKI&b^Dm1QS!>@=&!B)ei0`j)!$3>)#+>Em6!M]uVDq#RX!?F%[VZd)c22hYq*BB7[\"T^hJ`$RK82$!_d0f:[J0q8;\"4>EKG0afR`%l$9ti#aNiZm>8H/L)\\F/IVZf#1j2XWS%FU+[7-O%OE($,`iN_59YOY,o_@FPQ`?t+cIQj)sdU4,UGYuoE6HZZm:;,-&2LE!@8*cW\"]OG&X4OMAc\\/%&He[@&_.&;!<E5!\"q1M5QO?Tgf`_C\"59[*D,obJWO:NX%+g;S*)qZ0m%jaF`_u_5(Zm;jg,pOQ6,o;[J&J5GR#6DRB$ipCH$W!bT\"T]c2+oE6))mglP%jaF`kRSsYZm:;:,pOQ6,uYBV!<Nk>\"0hk8!<JYu@f[/B$ipCD$Od%:o*\\?nf`_C\"59\\Mo,o_@FPQ`?t+d<*U)sdTe%jaF`PRf&ZZm:k=,pOQ6,n^6d#8%CG!Tsh!!<KeF$ipC($r<kU\"T]c2+eTGo)h8H`\"XQAVhuk>FZm:k<,pOQ6,m05V'`eF<!Qto\\!<L4L:T<\"N!@^5^TF!1j0qG3E!C&<3+>Iej'K#o0QjGbRDtk&1!>@1\"!@KTVN#+u=1$Bqc0nTo9*AO+_!s(V@oGTH&n/sRh821,G(]fO(0lP\\f0`aBkn0'MK1#rg!$SC!O0g@,Z(G-T5,a]H$,:NXF$ipC,%8Wf&!?jZNll.5iJ.K!f,oa3:fGu8&+da,n)mgmW)^Q^P!@<s2W\"To.\":P;3mgBO)!RD3NWS%FU+[7,d,o_@FPQ`?t+iFR2)sdUh%OF=_S00*sZm<Qo,pOQ6,r#kn!s(q-!<G\"X!Q,<S!<N30:T<\"N!?jZNj;fNcfH&Tb,sNR>#ULFs,`iN_59]e2,oa3:W#I$-+TWkkW#ZHN\"-=lF!AO`q!D(<;!<H;m-5@6s'u(6D!Xo)1q[if-s8W-!rst\"iirf5b$ipCH%Ss(W\"T^&:.EiPZ%a6$E-SYZWlOEq90qG3E!C&<3+>Ids2$%WK%ljZ/KF^3H'/:(\"(]j4<0lOQ30`aBkcil-d0o-l*4>EoU0afSc*AKc-ga=Zt0n^jo![f]W]Ep\\TbRH9h0pE8)$SC]G0g@+O-S6:E,g7#U,:NXF%\"//W%o91X\"dK3659\\Yb,obJWfGu8&+j:]J)mgmC#UL]=!@7g?!UgBs$ipC$$k*.;q[Er7!RhQTWS%FU.6f9F(bHa_SYlPj5;DdK0lP,S2$$6&!<F2uSYlPj5;f)V2/f913<=&O,s;9Ip_?'q'/^@&\">qng!\\p;Y!?EnWVZd)c0oQ5i*ArtW\"T^hF`$R?40`_:l!P8mt*AO+_!s(V@THGt-N#OVTDhJW]!H7`J4TQ3N&HP!KLa\"Q90t7BA4>F2]0afS?,V_M4p`M.-Zm;\"@/L)\\F/IVX\\gCR/[f`_Da\"@\"'*-m]i!!SAD=59ZBr,oa3:UaRN6+TWlkW\"Y9q'at*D[h9)M!WN^,WS%FU.6f83\"\"bNJSYlPj5;AfR0lP8L2$%WK%ljZ/p_>pm'/:(\"*AsCc!s(VDTHH+1O9@QEDhKE\"!H3W;5lhWV&HPlh0ek%11\"6:f1\"7=#4>FJW0afR`%l$9tbRZ9EZm<j3/L)\\F/IVX\\gC[/Zf`_C\"59\\5R,o_@FPQ`?t+j:`K)mgmc%j`GD!@7i0-PZY5!<N'0$ipD/&PoCZ\"T]c2+oDfr)sdTe%j`1I*S;AY59Y\\',oa3:O:NX%+lj1\\)sdTe%jaF`^`Fd@Zm:;J,pOQ6,r#]DM$HS6!c\\5L!PJZ_%h&I>^CCYQ!P]7CWS%FU+[7-W)'p6g!UKh559\\Z!,o_@FPQ`?t+d=<\")mglt)'pLN!@9H,f`hIB!<M?r$ipCp&l5L[\"T]c2+b1:R)qZ0m%jaF`p^/;dZm:_D,sNQC,UFD:,_-UU,9[(67F_SW\"`Ma');,6'!<JN#$ipBu'2PU\\\"T^&:.Bk'L*AO+_!s(V@oGTH&hutt=821,GBecD/0`j)E'*3$1$8DPu!QPj.Dh&-K!?F%gVZQra24u'LDl=I4!H51h4TTJg#seS*2%]jt0f:[J0q8h14>HI>0afSc*AKc-e0HUbZm>,c/L)\\F/IVX\\rtA2-f`_C\"59]M\",oa3:liACs+n-^&)mgm[\"XPDT!<FJd%0?8,&HDn:('50e)FXW+!!<3$!%.aHz!#bh;!#bh;!#bh;!*9.#!(?kf!\"8i-!0$sY!)ijt!!N?&!\"8i-!\"8i-!3H5$!+#X*!#5J6!5AL6!,V]9!\"8i-!8RVT!.OtK!#Yb:!5JR7!9*tY!9*tY!9=+[!9=+[!$VCC!$VCC!\"T)1!3#qu!\"],1!*'%\"!4;e,!\"Ao.!,V`:!58F5!\"&]+!$D7A!$D7A!.t:P!8.>P!!rW*!4;h-!9*tY!\"f22!65*?!:0[c!!<3$!!iQ)!!iQ)!!iQ)!9!qY!!<6%!\"],1!!r],!%%^H!\"f22!%%[G!%%[G!)iq!!&=QT!\"],1!+u?5!'L>_!\"8i-!.=nK!([+j!!`K(!0[Ha!)Was!\"f22!2T_s!,V`:!!3-#!8R\\V!-eME!\"/c,!:p6l!/(@Q!\"Ao.!\"/l/!0@3]!\"],1!$_RG!20Dn!\"8i-!#bh;!#bh;!(d7m!4i12!\"],1!-\\MF!7h/N!\"/c,!3ZJ)!9+\"Z!\"&]+!#>P7!#>P7!#>P7!#>P7!7(`I!!`Q*!!<3$!\"f>6!%%aI!\"8i-!)E^t!'()\\!\"Ao.!#,D5!#,D5!#,D5!#,D5!.=tM!*fR*!\"/c,!#P\\9!#P\\9!#P\\9!5Sd<!-J>C!-%u=!:9mh!/CUU!\"&]+!\"fA7!0I<_!\"],1!$qdK!42e-!!WE'!\"Ju/!\"Ju/z!3Cq[$ipCL$4Hq9$W!bT\"T_=^:\"TPF*EA6\"\"T^hfj9&C&=coTc!C'`*-<Wl>!<F3DSYlPj5?[Us=`;dp>ldK!!<Ea7<E0*#;ZRn=Of&?`5?3XF<?55)VZd)c=i;Xi86#Zk(]di@Di>Z9!@LlIlj#XQ6rc?L`#2P_;7%TK5>AL1;&ckf\\._^a9`\\*\"!<IOCWS%FU76a69%S7W+!K[g`)h8H`\"\\BZc*KUe'5=N'q8K5#^p^Tk?700LldfD&b!lkW],nU/e+WVj;!<JYm$ipC4!Df]J\"T_=^9qWJ''NLM5e-c=X_Z9dV^^jEG(]i4h<?5)1VZQra<V.20DsS9C!D$2k!BaB#,um'-kR(<P<Lb:6$W48V<Bj3N),V?[,fC3j,>A29$ipD'!Df]J\"Ta/U5=NpF8K30jPQaWC7Do^.)mgmO,=s+K!D*_,!?i0Y!M9o3!<JYk:T<\"N!C]4A]H9]aJ.I/@8O#Y\"*(_*\"&+gu95=O''8K7!sO:Oo%fH$%a8O#Y6&4mhJ,bQ5N,=MW)\"5G.6!L*TsljaW+!MgGF!=Ye/m/k<B$ipC`!`,fK\"T_%V7Ec*1)h8H`\"\\CpI]I-8iZm:/18L$Y)8S&5\\!?V=C[f[$>!WN3sWS%FU76a5R&kO$m&$Q+,)mglP%nSuSZl_jYZm:_D8O#YJ)bD\"8!K[g`5=LeM8K5#^]Fmd\\70,tUO:Nq:#B+Q9XTJt4OU&c4$ipC@\"&GoL\"T_%V7G&MM)sdTi\"\\CpIO:Xu&Zm:_D8O#Z)+\\<W[,`iO.)sdUD&P52UU_HB>J.M8Y8K7!sg_i[J7DK.\")qZ0m%nSuS\\-#;AZm=9B8L$Y)8S&No!<G1j\"T\\_\\,WWsMDqG6,\"OREb!^Qhq0`h:e\"6:1C!=Su0UC%D1!M9KjWS%FU9g;@6!Dsk;Of&?`5?3XF<?55)VZd)c=i;Xi86#ZkBN<sr<@:dHcjW$:`$&,C<U^>q$W66k<Bj49(f;6Z,btQ?,>A29$ipCd\"Ac#M\"T_%V7@X`W)sdTe%nR^j&!R5h5=M@N8K5#^U^p$A7C`Xp\"3;0\"!C$UQ#D30g!<IrZ:T<\"N!C]4AoF\"50J.IkJ8O#YV-qPAb,a]]G,=MW)DqlTa!G)94UBq>0!NQB\"WS%FU76a5b,\"Wa+*KUe'5=J[G)mglP%nSuSW$P\"SZm;RX8L$Y)8T0+l,lqq7&h+D$Pm.9L$Od%:gBCBPf`_CF5=NX&8K6;&n-_fP7D&dq)mgm3%7qd5!D*sp\"VCbD!<LpbDh&H\\!=Su0P7.j#!J^kTWS%FU9g;@r!`9Y3YSj)^!`b]o!H6%&<<3p;UBX_:^_g&P-WO0f\"[#e<'3..p]EhLF;1K0W5>Ad;;&ckfr$>2b9`\\*\"!<L(B:T<\"N!C]4AoE\\#-J.IkJ8K7!sO:OoI7JnH')mgm'+A&F270,s[!<F48!<LROk7J+'!UBqcWS%FU76a52(J,Qr&!R5h5=Mdj8K5#^J-\\^k70,tue/U%@&-2fm#Rg_7NsAI[f`_CF5=GiL)sdTU%nSuSPTWO:Zm<\"(8O#Y.*_@<X,a9EC,=MW)57+,,=TdG)SHAmW%GW!6$ipBq!Xo)1_Zru:f`_CF5=P&e8K7!sPQaWC7?A`c)qZ0m%nSuSS0(<AZm>,d8L$Y)8H\\;kh#m`e\\HDs!#7LV6mfuXff`_CF5=PJp8K7!sO:OoI7AM%t)mglt!_FV*!D*CG\"uQDi!Cckh$ipBm#Z%GQ\"T_=^9k7+#<Tk^D+<=UUVZQra=nEV8Ds/-G!D$>o!FAo/<<?1D#QYrGOf&?`5?6bH<?55)VZd)c=i;Xi86#Zk(]i(k<H%4/<<53^PU0<l<NI'<$W5Os<Bj3>!`9oD,ifk@,>A29$ipCt#Z(*q!C]4AO<I17liE1Y8O#Z=!_F?`*KUe'5=OKP8K7!sO:OoI7H>@Y)mgmK+%[\\G!D-)g%4*%r]`T\\l[06T_!Xo)1V[6.uf`_CF5=P>`8K7!sJ/q3#J.Jjc8O#YN$:u2D,kr0I,=MW)Q3!cheH>m]!<Jf,$ipCT#u@PR\"T_%V7?e3P)mglP%nSuSO;(8*J.IkJ8O#YN(.fIP,a8^/,=MW)DibJY\"_.Q6WrWV0!W*1!WS%FU76a5&'1j-n&+gu95=OoM8K7!sO:OoI7Aq>#)mglP'1jE;!D/d^)=.bL$j\"TRK*D_b!N-9#WS%FU76a5r\"\\BY`&!R5h5=P&U8K5#^oH-XL70,tua;69+`rQ2Ak6;=q!QtgGWS%FU9g;@R%T+EMI*_s9=e2Gm!C'_[+B`Wa!aPhFKI(%-Dtk&Y!>ATJ!F\\u2<BO:B,ZQs,Qk!+(;=\"<`5>BcH;&ckfX:A)P9`\\*\"!?mL3:T<\"N!C]4AX:7`?J.IkJ8K7!sO:OoI7B?tj)mgm#*D%JE!D*CK,R\"35\"c*9bU&b:k\".Kf0!<Ke?:T<\"N!C]4Ar#/-GJ.IkJ8O#Xs&P3qK,`ER35=Mdh8K5#^KFpd#70,sh#m',h]E&$6pCRf7!TshdWS%FU76a5j-qPB1*OI(`5=OW@8K30jJ.G497H>ad)mgm?-qPXP!D*`s!s'Q=j9d16$ipBu&I\\[@QOHZhf`_CF5=MXp8K7!s`\">R*7?dmG)h8HL%nSuSPQXPsZm;^o8L$Y)8T0\\$m0<Z9X;=/'$ipBi%1E7<`sbbCf`_CF5=OcF8K7!sO:OoI7E?K@)sdUl!D,LEQlAU9liG$98K30jQl&CZ7CXF2)qZ0m%nR^j&!R5h5=P2\\8K5#^a;mhs70,sn--68jQ2r/n#:3UujT,[1Plh&b\"UkD4P7:<ef`_CN5>?e;;,gQj,+&cd<E67H4B5?\\4B9H><=;[2,ZR''e.#7oZm<^3;'Sd9;%*I+^C<u<f`_Bs5=N'm8K7!sO:OoI7E?lK)qZ0i(eG\\5!UpIg5=NX48K5#^a='V)70,snN<XM+$j$;-P6;9p!UgInWS%FU9g;@r*`3qXSYlPj5?4@!<H%XM=TNGo-!^Oip_@3<'3,VF.93Su<@:dH]GNb2p^C.b<KJ,!$W5Os<Bj32(/Z$X,d\\:`,>A29$ipC8%Ss(W\"T_%V7EccD)qZ0m%nSuS]H0W`Zm:_D8O#YN'hK@O,eP0i,KU/k8J<B^m0='-#6E!\\$ipCd%Ss(W\"T_%V7Bd\"g)mgm[$V<QOW$k4VZm<\"(8K7!sO:Oo%J.J.t8O#Y&%nR_I,d7MF,=MW)@NccJ#.O[WnH\"1DDibJU!H3K$.00hX!OiFF!<Jf':T<\"N!DPdQTEJ+4<KX0_!C'TF\"'$@EOf&?`5?YoO=\\)Nn!BaA`,?766<JV4g<QbmRDt\"iK!>kjt%ojWMOf&?`5?3XF<?55)VZd)c=i;Xi86#Zk4B;:]<BO9c!EBM)liC*N9uIZA)mglP-;c!^!Ds7+!WN[+WS%Fm76a5*%S7Vl*KUe'5=LY\\8K5#^W#nSU70,s^ga!1,%)E&IM['Xk!M^3%WS%FU9g;@J-rCLTS/I8,!`dDT!?G12VZQra<M1I7DjU`3!H3W%>leks%q,JP<=o6K!RhT[DqHI<!BaAH&lh%oYSL5$<O`fE$W5Os<Bj49!`9oD,`De%,>A29$ipD#&5U7M!C]4Ai!`0rliE1Y8K6;&O:OoI7>q:>)mglh(eGr@!D*CS$7,^kO:Nc@%.sas\"8`-.!<Jf):T<\"N!C]4AJ-/@^Zm:_D8K30jYQ@B\\7CXC1)qZ0m%nSuScicoZliE=S8O#Yf(J,S4!Iu1^)h8I'!_GUFU]O+,Zm<j38L$Y)8\\tLI8HFeOE%TTCDfBh\"%+PO_T)i1?!=<\\+%j_6pO:Nc@$ipC\\'+=mBq[lW'f`_CF5=MLO8K7!sn-_f,Zm:_D8O#YN(eG\\!*KUe'5=P>e8K5#^O:Oo%J.Jjc8O#Y*(.fIP,`iO.)sdTU&4o)TbQLKVZm;RN8L$Y)8H\\#\\f`HG;O:Nc@DfAQrf`@0F0qeUVklq1S%1E7<cOs$Qf`_CF5=O?78K30jYQ@B\\7>qpP)sdTe%nSuS3(Y'r,cDbU,=MW)@Nca<>Tj+S*e4kL!=T!/b6\\RX!J;%]WS%FU9g;@>!`:.AoHXi-<TkH'-WO0&,<SuM**!ADJ.GXE:#HX])mgm+\"ApC<!Ds7+!O!/%WS%FU76a6!*_@=;!K[g`5=L)<8K30jQl&CZ7DK$t)mgl@(.f`>!D-?U3C,M'XTnk8!<Lpg:T<\"N!C]4AO9eDsliE1Y8K30jPQaWC7Be%/)sdTU&4o)TJ0IQ(J.Jjc8O#Z1#tZ)C,bu>M,=MW)%1*%Y\"69e8!MTU6.04@K&+K`&DibJa!N,r!%G(al!<Jr0:T<\"N!C]4AQjlV+Zm:_D8K7!sJ.P::7D'=+)mglX%7qd5!D.4*$S?'$!<Kq?$ipCP'Mk^]\"T_=^:\"TbL*EAZ.!s(VdTHI6Q`\"Q8SDm1Qo!H51h@0%$A&HO=\\THdGW=e2Gm!C'`Z)Hh!o,$b4?=TJOe<E30'<JqRmDm1Nf!>kj$'if25(KCJu<U^c(4B7a`<=;[2,ZR''`!]E]Zm=E:;'Sd9;%*I+Y8'j4f`_CF5=NL18K30joH6^i7JIcm)h8H`\"\\CpIg^ZmpZm<R08L$Y)d0$u](!mR.\"/HYL!?2%?pB_6/!QPQIs8W-!s8NV1#O2H>#9!UC!!E9%!!<3$!'gMaz!.t7O!2okt!#5J6!:Bge!*'%\"!9jI`!#5J6!8`>4$ipCh\"q1M5is#nm!=qu*f`_Bk58CO7)''`gVZQra*M=MqDu:1j!H3W;,lqqg-7Js/*>&<\"*?EK@*?guO!s(V0THGCri#<sCDhJWM!H7`J/HHM.&HQ2]*?>2%B)s\"nOf&?`595[c*??;cVZd)c+iG]N80%^3(]et(*?C]K!s(V,oGS`gg^G>,80%^34<=2$*BY?=*=Eb;*?@?Za9`_)*M')1!C%Tt+<>C9)^,6#QjG&>DjUh[!>?Ic!@Ag-^^pPfY5nZB\\0i9t(]hYX*??/_VZd)c*K1+A*?gQC\"T^h2`$QWu*<?0g*?EW34<;?B*BY@h&02,rfGtts'n?f4)mglt%2gB*!>u<R\"p*lf:MBh=57RN(&KC';O:Mpf%C?QV)mgmg'+lGu!>,_@V#fT\\!X5J*!=Su0MZQ\\Rf`_Bk58Bsr)-c;FU^.tB*NK5B*?C]K!s(V,oGS`gkSYNE80%^3(]grE*H-lY*<@N.*S;]$*JatA4<<W(*=Ea8%imkLKErG7Zm<:+)']js)%6NHdfN=Ef`_Bc57Ps?&KC';O:Mpf%D3bp)mgm;!>0D_!>,_@eHD'<$ipD#!`,fK\"T]&s%AXpT)qZ0]&eR>;S0nmfZm;Fd&L._c&O1gJg^s\\u!<JYm$ipBq\"&GoL\"T]?&'u1%l*?C9?\"T^h.j9$DC+d&Z+!C%aG-6Yo#!<F2aSYlPj59]Y;+`F\"S,lpO[!<G)%*?>2%cN=2dciY9h(]i4j*H/\"_*<A8CL`RR!*N0\\n4<;3G*=EbO!?FB>oEcBSZm:kP)']js)%6NHpB+3jf`_Bc57O80&KC';O:MpBfH$%a&O-_h(D.Un,bQ%f,7VHi&He[@\"T]%n#It'-!Xo)1T*.rhf`_Bc57Oh:&KB@CO:Mpf%H&'8)mgm?*t]_,!>/H@W!<>o\"T\\W4nH8m1\":P;3`ro2;f`_Bk58DNY)'U*f\"dBuS*?EWC4<9e-*BYA?$lo]nJ.EYb'tbM()mgl@\"W8O\"!>u:H!V6FQWS%FU%6k;h+;#QC&!R50)sdTe%hV#8QlZhYfH#JT&KC';J.`GY%=eTo)mglX*YBV+!>,K4%AXj*!<JkpVZm,#s8W-!rst(sL(;!)$ipC0\"]),N\"T]?&(!Ij>+s\"0@oH?=;U_\"P/*OH%l4<;o]*=Ea8%imkLW$N<#Zm<j>)']js)4gj0!S7KNWS%FU%6k<'*>'7W!K[g(57Pg\\&KA)&X;qlt%07&+\"fV\\,$ipD'\"]),N\"T]?&'p&S:<#q20N\"JQ#*QT3%*M3N:*?C9?\"T^h.N\"[3P+d&Z+!C%aG-6Yo#!<F#<VZn/[PQDj+4<;KT*BY@H(``u%liA+k(!$h%)mgmg,oIpB!>u:H!Q,+;WS%I*\"q<d+bQ8@qZm:_D&O-a&,nV*',g6<%,7OYc=Tt`/W<<V1!J:F^!<M?f:T<\"N!=_7&J-Z`+fH$%a&KA)&O:Mpf%J0o<)mgl@#SA9j!>.bS!X5t:!X42X!=Su0NsAI[f`_Bc57OhA&KC';O:Mpf%?qnG)mglp,7u.0!>,_@aTM,<$ig8.'G1<F!!<3$!\"&]+z!#GV8!\"o83!,MW8!%.aH!(?kf!+>j-!0$sY!+Z'0!+Z'0!6Y?B!36)\"!+Gp.!6,!=!6,!=!*oU*!7(WF!+>j-!;6Bm!2BPp!%.dI!+l32!)Wdt!+c02!,DQ7!6kQF!-J;B!,MW8!:9gf!/1FR!+5d,!\"B#1!0.'[!+u93!$;:C!1j2k!,)?4!'^Pc!2]bs!,2E5!)E[s!6,$>!,V]9!5!ph$ipC\\$Od%:$W!bT\"T]K*)=S\"S)h8H`\"W]fFZm6Y2Zm>,K*?uF&*Rk)j!S7\\f!<Ld[$ipA^:T<\"N!?\"*>5TLg1!K[g458et_*?2@25TM'e!?F#um0<Y#!<GtlWS%FU+[7-#*[MgUSYlPj5:Q4C.<!9./HJBk!<F2mOf&?`5:qg-/KHR.VZd)c0uPCn81aiC<@oXK(;(k@.0:rf!<F2iOf&?`5:MNo.31\"&VZd)c/]8tf81=Q?(]gf@.30k.VZQra.J+N-Ds.fc!D\"X?!B_gp$n4:fbS;Q7-.j4e59]e7,oa3:r!\"Gl+TWkt!<L@E:T<\"N!?\"*>a9`k+Zm:/7*BtG>\"s\"Yi,d\\\"$,@plr\"2Gu^!C$bc*pj1@!<KY5$ipD#!Df]J\"T]K*);G96)mglP%imkPW\"L*iZm=E.*?uF&*H0FP%7Nnn!<ET0!Rh,Z!<JYk:T<\"N!?jZNbR,X:.?UM3!C&#l'.FqROf&?`5:sf#/P%;k!@t)U.4G<IcN4+f.@m@=!C&%*)C]U[*%_1^.00Gd!S7B%Dp/52!B_g<'Ic-np_tYE.EE&L$RL<6.6euG&1&:&,_-:L,9[(6$ipD'!^*I8\"T]K*)2&eH)qZ0m%imkPJ.*G;Zm:;@*?uF&*B!Wo\"T]#4!LEmaWS%FU)*]#6&02^s,_-LJ58jA.*?2@2O:N?r)2K+M)h8I'!Z`6H!OO*m58j)\"*?2@2p^eGj)$(aB\"oKF,!AN:<_$:!ZKHL`##7LV6b6/4S!S7ELWS%FU+[7-S*$lUSSYlPj5:Q4C.<!!6/HJBk!<F2mSYlPj5:uLG/T79u0`afs!<H1P.4HVn.D,^E.I8*)4=Q4(.17GP%k0^dO<5bfZm;.H,pOQ6,n'eTUBFAlf`_Bo58h6P*?4>GO:N?r)8$q0)sdTU&fj1SS-L&RZm<:(*FK`c*<X)!Ym(4;!EG<c$ipCT\"Ac#M\"T]c2+fH\\5*@[PW!s(V8THG\\%lkD#PDm1QC!H51h2$\"@>&HO=0\\,n*,.4MbS4=SVe.6K&p'e'M:fGuD*+eT#c)mgkq,pOQ6,n'eTP6Fa]f`_Bo58h*E*?0M>J.*G_)-e1$Zm;:J*@$CF!?Ff:!<F#<p_<r@!<JMg$ipC@\"]),N\"T]c2+g_e,+t;_%pa7Wb(+C[6.H^j8*@[PW!s(V8THG\\%\\0<L*Dm1QC!H51h2$\"@>&HN^Lmfb.Ye/]t=4=T=l.6K'7%k.l4fGuD*+li\\N)mglt&1&PE!@8/Z!<J)_:T<\"N!?\"*>e.`oBZm:_D*?0M>YQ>galiFI=*BtG2&02_B*KUdP)h8H`\"W]fFZk+5sZm=-8*?uF&*AH[uq#Y!P!M'8mmfEIgs8W-!rt\"T--\\M^h\"l'[n$ipB]#Rg_7cN[1Ef`_Bo58hNP*?0M>J.EY>Zm:_D*BtEt*??)L&!R5<)qZ0m%ilVU!K[g458f\\'*?2@2a:948)$(aLTG7X<!@=QDR0CJ4$ipBa#>_>P\"T]c2+kR;O*@[,K\"T^h:N\"[W\\/Wlq7!C&0S-7qb;!<FVua;HES.4KoQ4=QX#.6K&D,:O!HliAP\"+b0hE)mgmc\"=599!@8-T!QPF@WS%FU)*]#6(*+@H*InbC58j5!*?2@2p_Fkp)0HrZnH$QET*Yo,!Ts\\`WS%FU)*]\"'-lj7W&!R5<58ir9*?2@2PUIOs)$(aN!<KM4$ipBa#Z%GQ\"T]K*):TKD)mgl@&fj1Se-$d2liE1Y*BtFo&fhpu,h*YO,8gM&=UD#3T`dmi!<ET0XT=%Z$ipC<#Z%GQ\"T]c2+g<=?*@[PW!s(V8oGT/sS-:JF81=Q?BIU.t.2MCn.4G<IhZs7$linm>(]ie*.;skS.02O[W!Fh7.ARP)$RN/*.6euC\"XP+p,_-dZ,9[(6$ipB]#u@PR\"Tb.t58fP+*?0M>PQ`'l)1WVG)mglP+WVdF!?LP.!<JMq$ipC(#u@PR\"T]K*):T'8)h8H`\"W]fFp];HTZm=!+*?uF&*<VrL\"T_@!!P8[I!<L4I:T<\"N!?jZNKGZ\"7.BFbU$QUgiVZQra/YF4<Dm0<u!H3W%2$%WK%ljY(/J/\"`/L`,2.Ei\\Z4=RKF.17Hg!@^5Vp_P4qZm>DK,pOQ6,n'eTM[E7Zf`_Bo58f\\(*?3WOJ.`ke)=SLa)mgl@&fhqD*OI(458j4u*?2@2n/35k)8ub\"=lfjd#PA6u`<6JV$ipBq$Od%:^C!c9f`_C\"59]M?,pFf9'YkV7.4NaS4=Q4,.6K''-n,NMJ.F(n+f$,))mgll,UFZY!@8-T!UC(kWS%FU)*]\"W!Z`64*KUdP58etQ*?2@2J.`kAfH#JT*BtFC,TRi2,_,q:,8gM&5J[H3-N+&Uq#g`9#n-h8RgW#kf`_Bo58gO3*?3WOO:N?r)6=Gk)mgll%36Z2!?E#J\"\"ON`!<Ke?:T<\"N!?\"*>U_t0lfH$%a*BtFG&fhpu,bu:u,8gM&%#\"fb]+#/L!S[uXWS%FU)*]#\"$QU2Q!K[g4)qZ0]&fj1SZk4;tZm:/7*BtFk-lj8Z*KUdP58diL)mgm?-ljNM!?FV>!sJ^([0F#B!>kj\\#0d8Z!<Gh%!<JYu:T<\"N!?\"*>\\/HA,Zm:/7*BtFk)''[',e+a5,8gM&+8?SL#Q4]4!<LLT@fZlB$ipCH$u`cj%09**!<ET0!W*96!<LXX:T<\"N!?\"*>U_b$jJ.J.`*BtFK+WVNg!K[g458gsF*?2@2U_b$r)$(ap\"fN+=$j#/g]*o)K!WNR(WS%FU)*]\"/-lj8n!Ite'58fh.*?2@2S1#C&)$(a8!NcJ*$ipC$%8WtV\"T]K*);l5M)qZ0m%imkP\\0W.7Zm=QE*?uF&*=TU`!@nQZ!P](>WS%FU)*]\"c+rqWh!K[g458hN]*?2@2j9?VL)$(a\\%B'sE$j#Ssh[Ktp!TOVbWS%FU)*]\";\"<AH6*OI(458g+$*?4>GO:N?NfH$%a*BtEl&KMhW!UKh-58fh6*?2@2J.WeH)$(aH!KdNl0o5rH!D<k&!=WPA#Fc/5!!!*:'EXR#!!!*$!!\"8Ez!!#Xl!!#+]!!\"bS!!%?G!!#Ig!!#ao!!&&[!!$m:!!$(#!!(mV!!%cS!!#pt!!!T3!!&)\\!!#Uk!!\"5E!!&Vk!!#Oi!!&/^!!&/^!!&/^!!#Li!!(@G!!#[m!!&bp!!)Tj!!#Uk!!)6a!!!'$!!#Ff!!&#Z!!&#Z!!!B.!!!N1!!#Uk!!\"/D!!\"/C!!#Lh!!&)\\!!&)\\!!&/^!!&/^!!#^p!!#\"[!!#su!!%-C!!#@e!!#[m!!&kr!!&kr!!%u[!!$U3!!#ao!!(=H!!$m;!!$4'!!(mX!!%BI!!$7(!!'G-!!'G-!!'G-!!!$%!!&,^!!$7(!!\";I!!'#\"!!#.^!!$(&!!(+A!!#1_!!&8d!!(jV!!#.^!!'b9!!!Z6!!#@d!!\"GN!!\")B!!#%[!!%0B!!%6D!!%6D!!#Ll!!#7c!!#:b!!%WS!!$C.!!#@d!!'n>!!%NN!!\"tY!!%*@!!%*@!!!6-!!'P2!!#1_!!%HJ!!%*@!!%TN!!%TN!!%TN!!%KP!!(\"?!!#@d!!&&`!!)![!!#^n!!(%C!!!9,!!#ao!!!Z:!!\"#A!!#^n!!#.d!!\"q[!!#ao!!$O0!!%'E!!$X6!!$(#!!(CN!!%NO!!!u=!!#+]!!#+]!!\"bS!!\"bS!!!B3!!&Ag!!\",A!!\"e[!!'2)!!\"8E!!$F4!!'P3!!\")@!!%-H!!'q>!!\"&?!!%o^!!(=I!!\")@!!&\\t!!(XR!!!u=!!'>1!!)$]!!\"&?!!(+G!!)]p!!\")@!!#7a!!#7a!!)Tq!!!T6!!!l:!!\"hU!!\"hU!!\"GR!!#Ik!!\",A!!&&c!!$F1!!\")@!!'tD!!$a:!!!l:!!(UV!!%0F!!!o;!!\"tY!!\"tY!!)Tr!!&5d!!\"2C!!#Oi!!\"SW!!(%B!!$+$!!(XO!!&2h!!)s#!!#Ce!!)s(!!\"5I!!#dp!!#Rt!!$7-!!\"hU!!'V<!!%!B!!\"eT!!)*f!!%cX!!\"hU!!!T=!!(^V!!\"eT!!'J9!!)$_!!\"tY!!(+K!!!')!!\";F!!#[m!!#[m!!!B8!!!rB!!\"AH!!#\"f!!\";L!!\";F!!#_%!!#Ln!!\">G!!&,i!!$4-!!#Ce!!&Ad!!&Ad!!'\\@!!$g>!!\"bS!!$g8!!$g8!!$g8!!(sd!!&/d!!\"tY!!\"AU!!&Mn!!\"YP!!#(i!!'>0!!\"VO!!$=*!!$=*!!$jF!!'e=!!\"SN!!%W\\!!(LQ!!\"JK!!'&/!!*!&!!\"SN!!$=*!!$=*!!$%\"!!$%\"!!$%\"!!!<8!!#[t!!\"\\Q!!$O0!!&Q\"!!%u`!!\"YP!!\"#M!!&\\t!!\"VO!!$=*!!$=*!!#S$!!(\"D!!\"JK!!&&j!!!?3!!\"YP!!!fH!!!Z<!!\"VO!!\"GZ!!\"8M!!\"\\Q!!#Y'!!\"PU!!\"SN!!$7(!!$7(!!$7(!!$F=!!$R9!!\"\\Q!!(7T!!$sD!!\"YP!!$C,!!$C,!!$C,!!)6p!!&Pq!!\"ML!!$+$!!$+$!!$+$!!$1&!!$1&!!#M$!!'V:!!\"\\Q!!$O0!!$O0!!$O0!!$O0!!%Q^!!)s'!!#@d!!)SR\"q1M5M]<-+!=M]&f`_CF5=MXS8KCNrVZQra9qWV'Dl=jW!H3W%<<7%5'j1PN9b@Cg:#$:S-V[>%+?WBJ$;EWWL_<Di8_>%X5=Mq)8K5#^p_$.C70,sg!<GtlWS%FU4[2+)(dT*k&!R5`)qZ0m%m`ECp_#k3Zm>D`5pP1h!C6t`\"TaN$$ipBM:T<\"N!BiY1O9RuiJ.IkJ5o\\GsO:OWA4n'gb)mglP#!jIs!C=U(SHAnN*\"2iKQN9m]f`_CF5=NX\"8Q8F\"+N+CQ9hj[q!_oj!!H3o(9`Z(3[fK3ATE@mh4AG/d9fu.#$;Cn\"fH![N7B?\\b)mgmS'hKW=!D*\\#!Rh'FWS%FU4[2**-:&T$&)74P5<\\3F5o[0VUaAAPjT>NLJcQ2L.KKqY!V\\?6*K2@#D)!@2-O^\"VrrGopf`_C>5<YMJ5o].kO:OWA4nKj_)mgl\\&4%O(!C7+pN<bdW$ipC$!`,fK\"T_%V7J$mX*DN*&!s(V\\oGUGB^`lVV850*c,Ye1a9`e&@!Wa<9SYlPj5>@dn9lHsX;#tTg,ujtaKI'b%'29&>(]iLq9lKeI9`[@NN!W3@9oou^4AG/T9aaPZ!DPdIa:h,aZm:kL8L$Y)8IPV#rrPuqf`_C>5<Y)15oY=bJ0%!@4d6UG)mglP\"$n.pT`m`%$1%`b$Od%:T*%lgf`_C>5<ZLY5oY=bPQa?;4l?Z5)mgm#\"$n.p!C;G@!<M3u$ipCD\"&GoL\"T_%V7ALVh,#,uVpa&$s^`Z?6:&H824AETt9aaOC%o#8WYQ@B8Zm<Em8L$Y)8IPV#lN9q^f`_C>5<Y)>5o].kO:OWA4hq=h)mglP&4,.R4TRiF!Moo6(]g*-'at*DRfm`@\"q_SgljXs9$ipC@!t522QO+'$!M]cnWS%FU4[2*\",s`L&*KUdt5<YMA5o[0VS0^HG4TRhlPlqg&$ipBe\"UkD4`ro2;f`_C>5<Y)/5o[0VJ.b-efH$%a5sIN.%m_/e*KUdt5<[@,5o[0VfH!7B4hMb#)mgm;'1!j+!C8pbTEjQ\\7BHe4h#nA0\"p#G@L_^^+58CsM'at*DNsQ3q!KRC[WS%FU76a4o)bD&ESYlPj5>@dn9lGOl;#tU>-<1(bp_?p4'29&>.8A.r9c[*%VZQra;=kc(DnmPs!D$&g!FAVt9`e&D\"T]W<SYlPj5>Cbg9lIBH;#s3^!<F#<irr.qYSBk54AGSW9fu/F,Y\\Y<fH![N7A(\\n)mgmC(.f`>!D*\\#!WN=!WS%FU4[2)g(-rmi%tG0V5<\\KI5o[0VliBBkfH&Tb5oY=bTH?Ha4o?Tl)h8IK,s`L:!K[gX5<[X75o[0VN#\"](h$*mG8B`=o!Fl-J)3k5V!t!3W%du0H\"r.OI!QPC?WS%FU76a56*D%8GOf&?`5>C2@9c[)nVZd)c;8aeY850*c$J5e^9`e&d\"p#`=SYlPj5>Cbg9lIfk;#s3^!<F#<NsAB\"9qA0a!C'<N)GP/*,uF\\69`Y8W9oLDn4ADmb9fu/*-;=k>J.G@=7?@[E)mgl`*D%JE!D+U=!Nu`(WS%FU4[2*r)*o4K,`iO&5<YY[5o[0Vlkr)64TRhNL_^`q\"UkD4P6_Qt!Rh9LWS%FU4[2*:!^Rd4,`iO&5<\\oh5o[0VfH!7B4kLB5)h8Ik+@-sR,hO,'5<\\?M5o[0VPUJgB4TRhNTG81BZN1f&%H.C4!>Wu`56[u\"r<<Z2!P\\mK!<JMm:T<\"N!BiY1fHW[$J.M8p5sINB&O@Ag*KUdt5<Xr85o[0VfHW[,4TRk/!>Y51'b'I1!M9K'!<L(D:T<\"N!BiY1Zj8r:Zm:_D5sIN6+[I'S,`iO&5<XN85o].k`\"54!4d[$O)h8H`\"[P@9YU;^UfH&Tb5sINR%m_/A,ci.T,<Z&n70+:6!cR!.PlUnYYlk(.\",I^-i<%^6!<L(@+TW;Y$ipCH\"q1M5RgDlif`_C>5<Z4Y5oY=bYQ@*T4l@DJ)mgmS\"[O@r!C8pRW\"]u>!U'n/!=Su0^Bk;L!Q,4>WS%FU4[2)o$:,V]&)[d\\)mglP%m_/e*S;Au5<[L)5o[0VPR9]$4TRjV!>PXK\"UkD4lNp@df`_C>5<\\'55o\\GsZm7q%4kLT;)mgl@&j\\`F`!AXJZm=9@5pJMn5mRJlR0,F6\"/H-j!Xo)1Ns#jl!LjElWS%FU76a69,=s(Rn-G7#*Dqrs\"T^hbN!)uu<KX0_!C'T&-<3T6!<H1t9hd`EPRU>L:%/Zf$VAtk9g;)%*D%3W,krTU,=MW)%&F./gBp`Uf`_C>5<ZXo5o\\Gs`\"54!4np6f)mgm''gX'-!C8r8\"h4ms)C[Q41(40arsDQ$f`_C>5<Z(\\5o].kO:OWA4ld#;)mgll&j[a*!C7+p7JA/<!<Jf#:T<\"N!BiY1X;4)@fH#JT5sIO!-:&TX,d7nI,<Z&n+TW;Y5M64),S^^g!Q,9R!<L4K:T<\"N!BiY1PRg&!J.IkJ5sIMs#=0<]*UEem)mglP%m`ECL^cWhZm:k@5pJMn5r&$5)5.;H!<E6$$Nm%:'`gN6O:;p5!<JYt$ipB]$r<kU\"T^bN4ldYM)sdTe%m`ECKH`]$Zm=]R5pJMn5nX4g!u24F!M^&3!<K),:T<\"N!BiY1oG9e4liE1Y5o\\GsO:OWA4eNHS)mgm_(I99/!C8U5#O)9j$ipCP$r<kU\"T_%V7;,7l:!==<$6<!+VZd)c;2bWT*EA6\"\"T^hf`$SJT;#p\\t;,'bI:\"UR_4AF0;9aaPF*DJaefEt1hZm=iE8L$Y)8IPV#M[`I]f`_C>5<YYG5oY=bPQa?;4m3>@)mglX)*oM/!WbRp's%f]E<-*@%1E7<Y74:,f`_CF5=MLR8Q8FV%u;;i9unGO4ADa`9fu,u9aaPZ!DPdI]F@FOZm=]:8L$Y)8IPV#gC6rXf`_C>5<YYH5oY=bp^f_1liH;[5o[0VkRKmC4o>jW)mgl@&j\\`FLaPJ-fH$%a5o].kO:OWA4fB;c)h8Is)*pJMj9@mhZm>P\\5pJPS#=1cZ)**r_j<+cV#9=Z_!=V,B#)a0(!<K52:T<\"N!BiY1cj2oVfH'/c5o].kO:OWA4`it/Zm;RS5pJMn6#i7m)&Yu)\".]Gn$ipCL$k*.;f+(TUf`_C>5<\\oL5o[0VJ.b-efH$%a5sINF*^LaP,l@m5,<Z&n7>V3df`hic!N-D9!<N31:T<\"N!C]4A`\"#?Z9qA0a!C'<N)GP,Q;#s3^!<H'Q(em^+9qr4\"Dr_$q!>kjL%o\"'=Of&?`5>C2@9c[)nVZd)c;8aeY850*c7nl_A\"p.NR%fm\\FSYlPj5>@dn9lJYl;#tTg,ujtap_?p4'29&>(]j@A9cZs!VZQra9qWV'Dh&^&!H4>3<<7%5'j1PN9b@Cg:!a>D4AFT89aaPF*DJaeg]U1fZm<R\"8L$Y)8IY7p!L\"'jWS%FU4[2*Z#sfM\\&(hac5<Zpp5o[0Ve-SDc4TRhoT/*nn'at*DZOfp3f`_C>5<[(&5o\\GsO:OWA4hq(a)mgm3'gX'-!C7,/!W*T?!<LX\\:T<\"N!BiY1U`VlAJ.I/A5o\\GsfH!7B4j4F&)sdTe%m`ECg_N0pZm;:P5pJMn5sGt6\"VC_8i;j[6M$D`J#n%K<*\"<;W!RhMe!<J5n:T<\"N!C]4A^`H'H:\"1?M'-0r@VZQra;4o%/Do`;d!H3W%=TNI9'jUhR;%Wh;9i4VI:\"UL]4AF<E9aaPF*DJaeX9_B:Zm;:V8L$Y)8IPV#dh,BTf`_C>5<Z4a5o].kfH!7B4n'+N)qZ1t!C8q5L^$-aliE1Y5oY=bPQa?;4eNBQ)mgl\\%m_Gn!WbS1!>PV;O=/Q]!AU8N)$.2I!MKaZ&e\"dAP7gZjf`_CF5=O3E8Q8Ek'^,`P`!T45!_pEB!?Fn*VZQra9qWV'Dkmk?!H3W%<<7#k%p8oH9b@CC!QPgIDt#)J!Ba)d#u*NVS.\\O(8_>%X5=Mdm8K5#^Zl)F[70,sg!<M3n:\\b(n4[2)g'L<\\F,`iO&5<Z@k5o[0VN\"eQ&4TRi>'`n7:$ipD+%L`@=LD*I_f`_CF5=P&d8Kpn$%+l\"0;4XTe!C'GS+Am'e+B8G\\KF_2dDhJX,!>A<B!EDuk9fu.#(em+eGYJQ;Zm8@17Go1X)mgmS'M0N<!D*\\#!Qu-PWS%FU4[2)c!C7[3,`iO&5<YM[5o[0VJ.FpbJ.J:p5sIN.)F5<m&!R5`)qZ0m%m_0$!K[gX5<\\3E5o[0VS0:0C4TY'TC'b37\"9XGq&^:Kg!E&(_cO^Kc!KRpjWS%FU76a69&P4!;SYlPj5>@dn9lIf];#tTg%oiXKYU3KR'29&>.8A_E9c[*%VZQra;=kc(DnmPs!D$&g!Bs4P;$'J<'EN-&!DNS3!S8#[DtG#D!Ba)4-;?Tsg_3Bi8aHIP5=M@l8RS279o'km:%K&\"Dm1BZ!>kk7'MWN0*DHPs9nWmK4AF<99fu.?##,IsfH![N7J%<d)mgm[)G)/B!D*\\#!Ljg\"SHf0Y5<\\W`5o].kO:OWA4bs>/)qZ0m%m_0$!K[gX5<['j5oY=bJ.P\"24iem7)mgmC*C1Wp&,6u-5<XZ05o].kfH!6sJ.I/@5o[0VO:OWA4n'@U)mgm3\"@47qSHhHZ!>V7=)6X(.$H*jZ!_<p2\"p$`?(=<>k\"[<ao\"VhI1#,qZ^&I\\[@rtS>/f`_C>5<\\'C5oY=bPQa?;4eNKT)mgmO(-s0.!C6hh!WPSQ)71Y<$ipCP(^#R0+TVuP!NQtE!<KA>:T<\"N!C]4AZmA9f9t1\\_'eH:19hb[``te\\okR^Gh(]hqu9lIrk9`[@NJ0RcN9o']^$V@]N9g;(F,Y8r^,j58#,=MW)$ipCp(/Lp_\"T^bN4l@,B)qZ0m%m`ECkQ*sgZm:_C5pJMnnH(ouW\":*\\eHZ,M(^pEGNu(Tkf`_CF5=NdC8Kplb(\"a6A;4XTe!C'GS+Am(T)cZoWKF_2dDhKEB!>A<B!F\\]\"9fu/*,#(0oMuuc^8[Ka;5=L)L8Q8Eo(\\f\"QL`]>c!_q8_!H4>I9`Z(3h\\T\"*PSd*q4AEa29fu.K%o!F'liBgF7>N'X)mgm[!D+M)!D*\\#!W*[/WS%FUaTk$ng_W6qliE%^5o\\GsJ.P!cJ.M,O5sIO%!C7[3,hs2%,<^_]5ncE##59JR!<N3;$ipC,(f.-a\"T^bN4m3\\J)qZ0m%m_0$!K[gX5<[p,5o[0VW#7lG4TRi5)1W>G%']i4\".L&7!<LL`:T<\"N!BiY1Vuf7(J.IkJ5o].kO:OWA4k'Ku)sdTU%m`ECbU5[qZm=-%5pJMn5uJlb\"qa'?J.sT8!<J#XM\\cd&!J;7cWS%FU76a4s$V=;lJ-h;X*Dqrs\"T^hbN!)uu<KX0_!C'T&-<3T6!<H1t9hd`EN!<!=:\"0bL$V@]N9g;(b,=ri],_R%,,=MW)$ipCH),I6b\"T^bN4bO#*)qZ0m%m`ECKGd&pZm:;/5pJMnSH94r\"p+;rs8W-!s8W*0`s7\\0N=63r!Tt=rWS%FU4[2*>*'kON,hO,')sdUl!C8q5`!o!OJ.IkJ5sIMk,=*9U,e+g[,<Z&nEOZ3mi<*0_!L\"E1!<JN*:T<\"N!BiY1L`&JtZm=9E5sIMc)F5=L,a]fB,<Z&nDi>,G!DidtYlYaCo*Z9A!<KqR:T<\"N!C]4Aj9\\C%9p?4I+rsOCVZd)c;<.gV*EA6\"\"T^hf`$SJT;#p]+9i4VI9rJXu4AEa&9aaP\",Y^KlllAY:Zm<^:8L$Y)8IPV#ru+\\4f`_C>5<\\'@5o].kO:OVrfH$%a5sINR,!d0T,ifV),<Z($\":Sl#!m;ku!<Jr7:T<\"N!C]4Ai#kTj:#$lL,<S]i#>HR?9u&/>9qWe,$V>jZ9g;(&(J,RQ,_-\"h,=MW)$ipCT)b6m\\\"T^bN4d7*U)mglP%m_0$!UKhQ5<\\':5o[0VO:OWA4nJhB)sdTe%m`ECJ-8.WZm:kZ5pJMn6#XCCf`fb-9*kV\"\",I^!*=MtF\"lgX+TG7b6$ipBa,7FSRQQ/f#f`_CF5=Mq'8Q8FR#G_VQ9hh,q4AFTF9fu.g'ho'-J.G@=7@XfY)mglt,\"X\"J!D3(f!<L(X:T<\"N!BiY1a;.&\\J.IkJ5sIN>,!d0T,d\\@R,<Z&n@f[#B=9/Hs+UeAPk8[9sf`_C>5<[L%5o\\GsZm7pVZm:_D5sINB\"@4!Z*KUdt5<YMP5o\\GsZm7q%4cCRN)mgm#\"@47q!C905\":5B5D#mc@W<\\&6!=Su0UE*.0f`_C>5<Z(_5o\\GsO:OWA4eN`[)mgll'gX'-!C7-J!Wgaq$ipCH*D`Zf\"T^bN4o?Eg)h8H`\"[O*[*KUdt5<YMX5o[0VKG6]s4TRi5$)A\":ESUZsP9(,5!UCb%WS%FU4[2*j%m_.b&!R5`5<YeU5o\\GsO:OWA4l??,)mgld'1!j+!C7m&\":5+[!<E4j+q+JQQQAr%f`_C>5<\\WP5o[0VJ.b.44ff>`)qZ0m%m`ECQmP*<Zm>8W5pJMn5t(e`YlbE&\"p'c,$ipCH*`&cg\"T^bN4kLrE)qZ0m%m`ECJ.4d`Zm<.)5pJMn6\"9p)!=[KZ!M:;>!<M@):T<\"N!BiY1S0C6<J.M8p5sIMg-p\\g=!K[gX5<\\?T5o[0VS0C6D4TRhf$+p9F$iu%ck8as3!L\"U$WS%FU76a5B+%]F+i\")V24AG`$9fu/F!DP[Nn.eY*8aHIP5=M4S8K5#^KH<]070,sg!<KqW:T<\"NOTRa24jYE>)mglP%m`ECKH<DuZm;RV5pJMn5nX2!#m5u!$(V8/!<LLh$ipCl+&Alh\"T_%V7Hbgb,#-,_n0TMW:%SlW9um`;4ACVT9aaPF*DJaegaG`5Zm=uX8L$Y)8IPV#P9<Z#f`_C>5<ZXu5o].kZm7q%4kpE2)qZ0m%m_.b&!R5`5<ZXm5o[0VO:OVrJ.Kj35sIO!*'kON,eOdV,Oks=6%At:$./nYTG<ju!GU'b!NRFR!<LXl:T<\"N!C]4AW#A5;J00jl9`e&P+9?DF&krBD!WO9:*DMZo\"T^h^N\"\\o+;3@a[!C'H\"-;d<.!<FH?ckK1U9oC.qDla+:!>kj$+\\cn-)bg>q9sc$;4AF`L9aaP\",Y]:ROf&?`5>@(>9c[)nVZd)c;8aeY850*c-V[>-,puD]oHuaqX:S)g9rnRo$VB[c9g;(F+\\<W[,fCcr,=MW)$ipC\\+]#)j\"T^bN4dZdH)qZ1<,XFXX`#h8aZm;\"M5pJPg#A$,R\"hXjB$ipBm*\"2iKq]Sb7f`_C>5<XrD5o[0VZm7q%4j4*r)mglL)F5T2!C7>!!=9/8!TPC5!<Jf::T<\"N!C]4AN!i3$9u&$=)_A'89hb[`[itikcmDHf(]hAq9lGO_9`[@Nj:Y0L:\"U.S$VB[c9g;(6&P3qK,`E+&,=MW)$j!U;gEKFmf`_C>5<\\ob5o].kZm7pVZm:_D5sINj#sfNs!K[gX5<Xr55o[0Vr#J'J4TRhNL_e);OT>jkR/t&C$ipBe,>Y;l\"T^bN4nK4M)qZ1<,XFXX`$@VfZm>8R5pJMn5sM=LO:;L)!<M4&$ipC4,>Y;l\"T^bN4o?Ki)qZ0m%m_.b&'PDI5<Y)85oY=boH6Fa4b+qH)mglP$:,n\"!C;G@$'5T&+2J'd!C$ad'F>0K!P]Za!<M@.:T<\"N!C]4AYT?@V9p)=W!C';;'29KEOf&?`5>f?G;+OC^!Ba)T\"&1mPPRpPO9q2qm4AFTU9aaPZ!DPdI`$\\+qZm;je8L$Y)8IPV#V^,';f`_C>5<\\?K5oY=bPQa>lfH$%a5sIN:&4%8B,e,*c,<a!M5m*bp#m!6sO:;L>!=8e^!M'GriuAI.!Uh]N!<Lq#:T<\"N!C]4AYTQLX9qA0a!C'<N)GP.c+]/829`Y81X9qZr!_r\\?!H4>I9`Z(3LF#Z5S.86o4AG;T9fu.S#u*NVn/\"e,8[Ka;5=PJl8K5#^n/+_A70,sg!<K)E:T<\"N!L3[M4bOA4)sdUh%RD%a&$Q+$5<\\KQ5o[0VKFgEo4TRi`kR3XX!G<,J!=Su0cQuAdf`_CF5=M@Q8Q8Eo%\\P'p9hi\\H4AGGL9fu._(JP9/J.G@=7>rWd)mgm'%S7m6!D*\\#!W+1@!NF`U!BiY1i$L`/J.M8p5o\\GsJ.b.44hM7j)mgmK-:&k>!C<=YblXgX'at*Df-LCrs8W-!rt!Kdn-apW$ipC,-;UVo\"T^bN4n'%L)sdTe%m_/e*InYd5<[@85o[0Vn-qZ.4TRiej<>TF*;Kg;\"VhFH!RE)gWS%FU76a6=!D+;+SYlPj5>Cbg9lKY);#s3^!<H'),>Cl6:%K\\4DmTU@!>kk7-;AE?),1,P;3@a[!C'HB\"&U(=Of&?`5?5WK<Cfsf!F\\]\"9fu/F+\\b'n(ekB0J.G@=7E?iJ)mgm/\"\\Bq-!D*\\#!O!l8!NF`U!BiY1U^BC,J.M8p5sINN\"[O*7,btc5,<Z&n\\cDu5'GV#W!RE,%!<LXs:T<\"N!BiY1Ua&/EfH$%a5o[0VN#4iF4jY69)mgld,=*P;!C9/f\"W>,[$ipC(-4BnUq^51=f`_C>5<[@25o\\GsJ.b-eJ.M8p5sIMk#XKD[&!R5`5<Zpk5o[0Vcl#+o4TRkF!H\"bL/Rnf9+XR3jX!eAW!O!nIWS%FU76a5N$qVI6Of&?`5>C2@9c[)nVZd)c;8aeY850*c4AEa:9fu.'*DJXjKFCR;9n4$S$V@]N9g;';8K5#^\\-GSM70,sg!<MX;:T<\"N!BiY1O;pP*fH#JQ5sINB#=0<9,hrDd,<Z(l\"`O;H2$\"]9!<Fb\\!<JB5:T<\"N!C]4Ack/hn:&#dZ*@FQUg_DqG\\/S.)9uJ&H$VB[c9g;&t8InPR.,5pH9tr+XDhJQo!>kjX.8=`N#Yb=I9hihS4AFlV9fu.s(JP9/liBg[:%T$V\"Xd#=e-8$0cj*9-:%/H`$VAtk9g;(f#Y>uB,V2M370,sgnH=gSq^G=?f`e>V4[2)c\"[O*7,`iO&5<Ze&5o\\GsO:OWA4dZmK)sdTa(dUALZkG_EZm=iF5oY=boH6Fa4hLtb)h8Ik+@-sR,fC6[5<UP`)mglt'1!j+!C7Y6J.h5QNr]]s,]RaQ&t&h&Dh&HHOTZ*W\"p*%#$ipCX.Sm%s\"T^bN4cgIG)qZ0m%m`EC]Ga'TZm=QT5pJMn5sH*K'GV&0\"p'c6$ipD'.Sm%s\"T^bN4o>pY)qZ1`*C2nQkQjHnZm<\"!5pJMn5m*bg'`gP`\"R#t'$ipC4/IVX\\T.<^:f`_C>5<[4:5o].kO:OVrfH$%a5sIO%#!j3p!SADY5<[?t5o[0V\\,el?4TRhb!>-%KTF@q)!=V9U\"4&G*!<LY\":T<\"N!C]4AYRO/J9s>4s(-G=8&ktJ_J.kX>9ro[9$VB[c9g;(.,\"W`\\,j6CC,=MW)$ipD/.o3.t\"T^bN4l?u>)qZ0m%m`ECkTN52Zm;k(5pJPW!C7M&'bq-#!L!Nm!<JrH:T<\"N!C]4Ar!H\"99p)=W!C';;\"AKn6Of&?`5>f?G;+OC^!GG3C&ksBDOf&?`5>gJD;&rZ!VZd)c<Q$4a85TBg@80Tn4AG_h9fu.c##,IsfH![N7F32L,#.DHoGf5Q:!=J;9uJGS4AEI79aaP\",Y^KlfF1=jZm>PV8L$Y)8IUR]!KSg.WS%FU4[2*F%7(rc*UEem5<\\oO5o[0V^^WRS4TVA]5D90K$6]fY!LkSJ!<KMY:T<\"N!C]4Ai#tZ49qA0a!C'<N)GP.S)GpN+9`Y88;4XTe!C'GS+Am(@+B8G\\YU3KRDtk&Q!>A<B!B*eL9`e&X/HKe*\"\\f\"7!V\\0?DmT[B!@LT9oHcUoN!E'>:$<?e$VAtk9g;(b'M0<>SYlPj5>@dn9lJ6#;#tTg%oiXKp_?p4'29&>4ADa_9d`Y0clG5C]E_.n:$<0`$V@]N9g;(J#tZ)C,iBh;,=MW)%.+9#a\"C/ef`_C>5<XN95o\\GsO:OWA4l@JL)mglP(dTB0!VHIX&V(Q557ri%*=S27!M:nO!<MXA:T<\"N!BiY1YRWr<J.Jjc5sINZ,XEBV,d7bE,<Z&nZN7EY%06k<!J;$o!<JB;:T<\"N!C]4AL`8ob9p?ad-QQ'TVZQra;4o%/Dnm>m!H51h=TNI9'jUhR;%Wh;9i4VI:#$[^4AE0m9aaPF*DJaeZk>qLZm<j%8L$Y)8IPV#f.Tpj!s(PL4n'LY)mglP%m`ECKEjd^J.Kj35o[0VO:OWA4e)X@)sdTe%m_/e*KUdt5<[3s5o[0VKEjdf4TRk!!<EMG\"9Y;3#tYQe#)*,F0an'`QS;47f`_C>5<Z4k5oY=bJ.Fq14kL61)sdTe%m`EC`$.JdZm;jr5pJMn5rG;M#ltG8jT3+M$ipCH0Me\\$\"T^bN4bO/.)h8H`\"[P@9j:jm!Zm<\"(5sINr,=*9U,ifY*,<Z&n57*D\\h#SZ\"#m%a@!<Ig2$ipD#0Me\\$\"T^bN4eO/g)mgl@%m_/e*KUdt5<\\WX5o[0VTI3#M4TRi;r<3Md!Xo)1O\"W^(O:;L)!<JfI$ipC(0i+e%\"T_%V7F3#G@-eP$KEVEO[kRo%i!W6[(]hB+9lI6A9`Z83SYlPj5>e'r;/`N`<<7#k%p8pOp_@'8'2]>B<DcIb4ACVC9fu/*)GLT2J.G@=7@4HS)mgl@-V5OO!D*\\#!V\\<EWS%FU4[2*6$:,V]&'PDI5<YAS5o].kO:OWA4b+nG)mglp$:01C4TRiI!=8c8!JLQ<0FRs_UG>WEf`_C>5<[4%5oY=ba9b-s4nL'e)qZ1t!C7[3,hO,'5<XrG5o[0VoHljK4TRi@W<*+j#8S'##G`%B!<LY):T<\"N!BiY1fH`a%fH$%a5sIMs'gWeG,hOA.,<Z&n%&!h*b9fRkUD<k=!<M?i$ipD+1/Fn&\"T^bN4d6sQ)sdTe%m_.b&!R5`5<YY@5o\\GsO:OVrZm:_D5o].kZm7q%4jY$3)mglP%m`ECU^TO.Zm:_Y5pJMn5mRJl\"Tt,?$1.dY$1J?0+n5Yk\"R-/$!=9c2\"e6PA5lpW^b;0P-!REPtWS%FU76a5*$V;O:L]b^<*DrB*!s(V`oGUSF^`lbZ85TBg@80Tn4AEmC9fu.k,>AP;Zm8@17>):F)mgmS,\"X\"J!D*\\#!K/d1WS%FUTa!_Ei\"SHrfH$%a5oY=bljH*D4m4(U)mgmK'L<s,!C87'#(mQu$ipC41f(+(\"T^bN4jX^*)qZ0m%m`ECX:[`;Zm=!/5pJMn5n*8c!UD?H!<LM':T<\"N!BiY1O<m13J.MPq5sIMg'1!SE,g6N[,<Z&nDi>)>!K$mi!<ET0!J`fH!<MpO:T<\"N!C]4AbRR3D:#$K!&1:1HKI&`TbRmQ39sbm7$V>jZ9g;(6#>#lA,d[\\G,=MW)$ipC(2(GTY\"T^bN4kM,J)qZ0m%m_.b&!R5`5<Y5T5o].kliBC:4gY>X)mgmC\"@47q!C:XC'`f*O[0$^;TF;,-Z2qoI!O\"]r!<Lq4:T<\"N!BiY1J0dK#fH$%a5sIN.(-rnH,jYOt5<\\?Z5o[0VU_Z6@4TRi;!=b_(%'9a8P<fTX!J`R/WS%FU76a61*(a+(PR,2K4AD=H9fu.S##.3SJ-J^U8_>%X5=LMV8K5#^n/P\"E70,sgm0<Zu2G^=*\"T^bN4mW8:)h8H`\"[P@9n/O_5Zm;:k5pJMn5sGOO'FBg$!<J6E$ipC\\2G^=*\"T_%V7JmZf,#.\\Be.s'%SYlPj5>h%k;/af(<<5Wf!<HV';,'/I'MU\\aX;akA8aHIP*DN*&!s(V\\THHsIS/P6*DhJX$!H3W;=TK11&HNnLSYlPj5>h%k;/aqq<<5Wf!<HV';,'/IX;jqs9o'-N4AG#E9aaOC%o#8W^^E^QZm=QL8L$Y)8IPV#cSsDUWS%HG#<b:7a:^cXJ.IkJ5sINj,s`L&*OI(X)h8Ik+@/4Ti#G$%Zm=QU5pJMn6\"7A+J0YF?!<Le08.>S#$ipC<3Wk0R#m!6sTEbc3!<LM6$ipBm3)?O,\"T_%V7?dgE*DN*&!s(V\\THHsIX=-pHDr;j?!H7`J=TK11&HQQ>ciQo^;4XTe!C'GS+Am'E-WL1cKF_2dDhKEB!>A<B!>&+&9`e&D3!!s!\"AJn6!TQ.6DsS]C!Ba)X\"&1mPX;FY>8aHIP5=L)F8K5#^Zj')H70,sg!<N3[:T<\"NYm*?U4gYV`)h8I'!^T%6TEmh&fH$%a5oY=bPQa?;4jYQB)mgmC*C2nQZj&f8Zm=!G5pJMn5t(ehh$/1e\"rRGn!K@6`cThm>!P:?fWS%FU76a4o,Y9\"NSYlPj5>@dn9lKqV;#tTg%oiXKp_?p4'29&>BMC<X*DrB*!s(V`oGUSFn,u_l85TBg<DcIb4AE<k9fu.G#u(e!fH![N7>M7A)mglD,Y94L!D*]R!We?C:T<\"N!BiY1Qm\"a7Zm:_D5sIMc,XEBV,a]`@,<Z&nDp0@6]a&K*)A)uY!<J6@E0C;'#n-h8]/i`ef`_CF5=Lqc8KCNfVZd)c:#lCN*Dqrs\"T^hb`$S>P9`Y8W:!ahR*DrB*!s(V`THI*MKE>-SDm1Qk!H7`J>lbU9&HPm/9hd`E+AFsmO=3g28[Ka;5=NX#8K5#^fE+Vh70,sg!<JBG:T<\"N!G+JY^aDDefH$%a5o[0VfH!7B4kKg%)mgm+-UAt?!C9/:#8,nu$ipCP1^jBc]/rfff`_CF5=O308Kpmm-L_rX9hh,p!_q-*!H5mW9`Z(3gH/,JcmVTh4AG/c9fu/.%8@4%J.G@=7Go(U)mgmG#tZ@1!D*\\#!V\\\\G!NF`U!BiY1oGp4:fH$%a5oY=bcm:tB4o?-_)mglP%m_0$!K[gX5<Xr+5oY=bPQa?;4kp?0)mgm'\"@47q!C:Z!*uP)M'nHTAFe&RO($,Gs!Ll7]!<Kep:T<\"N!C]4Aj98+!9rnM_*%+HTg`JXQfE\"]/9s>g9$VAtk9g;)%#Y>uB,h*Gu,=MW)$ipCl4AVpY!BiY1\\.CqFZm:_D5sIN^&j[JD,e+CO,<Z&nDf?;n\"UkD4o/'qX'bq,X!Ok-!!<JBI:T<\"N!C]4AQk)bf9tV^(%m3SU!_kdOZm\\X2:$`Bb$V@]N9g;(N+%[YNj9N=/4AFl>9fu/F'2:S`i!rHh8aHIP5=MXr8K5#^YTHF]70,sg!J(:'4\\r'1\"TeE\"5<['m5o].kliBBkJ.Jjc5o[0VO:OWA4kLiB)qZ0m%m_/A,`iO&5<[L\"5o[0VO:OWA4g6\"o)mgmC+$h,7!C90!!Y)[@o)\\1rT`NgL9*kXH!Xo)1K/a8?!M;POWS%FU76a5J#tZ.3SYlPj5>@dn9lG\\0;#tU&#uq\"Ep_?p4'29&>-V[=F,:nob9hb[`cTVAJZis/)(]iqd9cZs!VZQra9qWV'DmUQ_!H3W%<<7%5'j1PN9b@Cg9tVK@4AD1e9aaPF*DJae0M*4j,d[kL,=MW)$p=WH5>S93\"T^bN4hMOr)sdUD&4&ND\\.(_CJ.IkJ5sIN>#sfN;,eOmY,<Z&nDtkD'!J(7P!LH.^!<KMk:T<\"N!C]4AoFsk@9oL4M+WXFNVZQra;4o%/DhK*1!H3W;=TNI9'jUhR;%Wh/;,'bI:&$&04ADUP9aaPF*DJae,Y8r^,hrVr,=MW)$ipD'5>TZ.!BiY1^`u,aliHGR5oY=bYQ@*T4bP4L)h8Ik+@/4Tg]p+aZm:;Q5pJMn6,!@+^_7#a!=]d<!K7FM!=Su0q_noa!O\"aaWS%FU4[2)[#=0<]*KUdt5<\\oJ5o[0VTFO744TRieE\")gVh$!hg4:D5kdm-^.f`_C>5<\\'T5o[0VfH!7B4b+\\A)qZ0m%m`ECW$=SIliE1Y5sINn)aPFM,`i<u,<Z&n8/2.+70+9#Dn$Z*!D\"(/!CbfJ*>Jt`V$!V^$ipBq5u4K5\"T^bN4ff;_)qZ1<,XFXXTGBg4Zm>DP5pJMn5nX2!#m6h/#m!9,#3Z0r$ipC05R[Yo_a.(tf`_CF5=P&f8Q8F&*qUWs;3@a[!C'G?'2]cMOf&?`5?5WK<Cfsf!F\\]\"9fu.3&PYA^r!6\")8_>%X5=N3m8K5#^e07I/70,sg!<Ig>:T<\"N!BiY1lkMf*liDVJ5sIN^,!d0T,kM=-,EW'/6#V8d.00OP-$]M\"!<KYu$ipC06;OT6\"T^bN4nJqE)qZ0m%m`ECU]j%'J.MPq5o\\Gs`\"53RliE1Y5o[0VO:OWA4iA:*)mglt)aP]3!C:Xg\"X*o>!L3k?\"8Mt+)''S'9`aED$ipCp6;OT6\"T^bN4hr@0)sdTe%m_/e*KUdt5<[(05o[0VO:OWA4hq.c)mgm3+$h,7!C6hG&KQQ+%.sWiMa\\$T!LlGPWS%FU4[2*B,XEC9!K[gX5<ZX]5oY=boH6Fa4j4j2)mgm+)*oK1!C9U$#m!L%,ln+X$OHj*!=@C)#n-h8[lFit!RjD3WS%FU76a6%)+c#HoG739*Dqrs\"T^hbN!)uu<KX0_!C'T&-<3T6!<H1t9hd`EKI0DU:%T;t$V>jZ9g;'?8K5#^X:IlI70,sg!<JBP:T<\"N!BiY1J/gioZm:_D5sINn+$gir&!R5`5<Xf55oY=bJ.FpbliFI=5o[0VO:OWA4ies9)sdTe%m`ECO<?h.Zm<\"(5oY=boH6F=fH%=E5sIO1!^RcU&'PDI)qZ0m%m`EC^^`XLZm:/75sIN6%m_/A,esmUT)h(U5t(e`nHBO+_$:8KQm`8h8)435']fE?M#dn`2P:IE_#kPU!Riq8!<J6M:T<\"N!BiY1La>>+liE%^5oY=bYQ@*T4cfn7)mglH,s`b=!C71i($,W#Dtk%n!=Su0^Hi8/!P:crWS%FU4[2*V#sfM\\&\"k\"15<YMW5o[0VO:OVrJ.I/@5sINj)*o3l&'uUg)sdTU%m`ECbQU9OZm<]p5pJMn5o0PN$+'`W,RL:PH3'iC)5I9>#n[RH!OFfq!<IgB:T<\"N!C]4A!(g-aoF:^A-V[<k!^'0g9fu.W%o!F'liBgF7Bcnd)mgmW,Y94L!D*\\#!O\"sgWS%FU4[2*:-:&U;!K[gX5<\\?Y5o[0Vcl,1p4m`8956[u\"'at,^\"j]XH!<LY=:T<\"N!C]4AbQg][9qA0a!C'<N)GP./&5`I!9`Y8W:!a&<4ACV59fu.?'MU\\aKHEnr8aHIP*DN*&!s(V\\THHsIp^9q\"Dm1Qg!H7`J=TK11&HP!gYR!rD;4XTe!C'HR)GtFg,#nY7;#p\\t;,'bI9roO54AD=b9aaOC%o#8WS.%t.Zm<j#8L$Y)8IY^*\"j9D3WS%FU4[2*^'1!Si*KUdt)h8IG,saaYkQ4$hliE1Y5sINV#=0<9,hNbr,<Z&n-_UPY+`Huo*<@,hJH6K&!!*B/&.AmY\"qCn?!<<*\"",5));if not N[4174]then g=i[0x4]+N[0X447E]+i[0x1]-i[0X08]-g-0X430B468c;N[4174]=(g);else g=N[4174];end;else if g>0x5C and g<0X75 then t=(function(d)goto d;::Y::;goto J;::U::;Z=(s);goto L;::d::;goto Y;::J::;Lc=d;goto U;::L::;end);if not N[0X5b55]then g=N[0X2860]-N[0X1408]+N[0X5194]-i[6]+i[0X6]+0x14;N[23381]=g;else g=(N[0X5B55]);end;elseif not(g>110)then else if not not N[0X74b0]then g=N[29872];else N[79]=(((N[23381]<=N[10183]and N[0X447e]or N[0X427a])<=i[0x6]and N[4174]or N[0X0Fe3])+N[0X14Db]>N[14861]and i[0X4]or N[20884])-2899737877;g=(N[16447]-N[0X5b55]+N[25532]+N[0X403f]==N[17018]and N[0X27C7]or N[20626])+55;(N)[29872]=(g);end;end;end;until false;X=(nil);g=(0X67);while true do if g<0X31 then X=({});if not N[18675]then g=N[0X33E6]+N[0x63bC]+g-N[0X447e]+N[0x04f]-0X8f;(N)[0X48f3]=g;else g=N[0X48F3];end;else if g<103 and g>26 then break;else if g>49 then if not not N[29026]then g=N[29026];else(N)[0X4159]=((i[0X8]-N[0X447e]==i[2]and N[4174]or i[3])+g+N[14861]-3203920104);(N)[15076]=((N[0X36c9]==N[0X5b55]and N[4067]or N[79])-i[0X7]-i[5]+N[0X447E]+5051493340);g=(N[79]+N[0X104e]+N[0x6F91]+N[10336]==N[16447]and N[28561]or i[8])-1774984093;N[29026]=(g);end;end;end;end;end;local J,v,e;g=(90);repeat if g>0X4b then if g>90 then J=(D.bxor);if not N[27224]then g=(N[0X5194]-i[0X8]+N[0X5194]+i[0X9]-N[9629]-1421097705);(N)[0x6a58]=g;else g=(N[27224]);end;else if not not N[0X79B6]then g=N[31158];else(N)[0X259d]=((N[0X4159]+N[0x2860]-N[17534]<=N[17534]and N[27627]or N[79])-i[0X2]+2760776344);g=((N[0X48f3]-N[0X447E]-N[0X5092]+N[13286]>i[0X6]and N[13286]or N[0X63BC])+52);N[0X79B6]=(g);end;end;else if g==0X4B then e=select;break;else v=function()local d,L=47;while true do if d==47 then L=a(Lc,Z,Z);d=(0X42);else if d==66 then d=(57);Z=(Z+1);else if d==57 then return L;end;end;end;end;end;if not N[27095]then g=((i[0X1]+i[0X7]+i[3]+i[0X5]==N[18675]and g or i[7])-2372739537);(N)[27095]=(g);else g=(N[27095]);end;end;end;until false;local D,Yc,Uc,kc,uc=function()local d,L,J,Y;d,L,J,Y=a(Lc,Z,Z+3);goto L;::d::;do return Y*16777216+J*0X10000+L*256+d;end;::L::;Z=(Z+0X4);goto d;end,{};g=(3);repeat if not(g>3)then Uc=(function(d,L,J)local Y;goto d;::L::;do return Y;end;::d::;goto J;::U::;goto Y;::J::;goto U;::Y::;Y=(J/Jc[L]%Jc[d]);Y=(Y-Y%1);goto L;end);if not not N[0X7d4a]then g=N[0x7d4A];else g=(((N[25708]>N[23381]and N[10336]or N[13286])>=N[8645]and N[0X403f]or N[0X04159])==N[13286]and N[0X6bEB]or N[14861])-N[5128]-0X4b;(N)[0x7D4A]=(g);end;else if g==0X2D then uc=0/0;break;else kc=function()local d,L;for J=86,0XD2,0X2f do if J==0X56 then d,L=D(),D();elseif J==133 then if L==U then return d;elseif not(L>=W)then else L=(L-G);end;elseif J~=0XB4 then else return L*G+d;end;end;end;if not not N[0x4c21]then g=N[19489];else g=(N[0x104E]-N[0X5B55]-N[27095]>N[0x79B6]and N[0x69d7]or i[0X4])+N[0X69D7]-2899737966;(N)[19489]=g;end;end;end;until false;local G,W,Jc,wc=w.y,(setfenv);g=0x27;repeat if g<0X5a then Jc=function()local d,L,J,k,u,w,n=0X18;while true do if d==0X18 then L,J=D(),D();d=0X17;else if d~=23 then if d==10 then k,u,w=Uc(11,0X15,J),Uc(20,U,J)*4294967296+L,Y^Uc(0x1,0X14,J);d=(97);elseif d~=97 then else n=(1);break;end;else d=10;if L==0x0 and J==0 then return 0X0;end;end;end;end;if k==U then if u~=0 then k=1;n=0;else return w*0X0;end;else if k~=0x7fF then else if u~=0 then return w*q;else return w*uc;end;end;end;return w*0x2^(k-0X3Ff)*(u/M+n);end;if not N[30476]then g=(((i[0x09]>=i[0X1]and N[18675]or g)==i[3]and N[0X403F]or N[23381])-N[0X4159]+i[0x6]-0X326F95a2);(N)[0X770c]=g;else g=N[30476];end;else if g>39 then wc=x;break;end;end;until false;local Y=(function()local d,L=0x0,(1);repeat local J=a(Lc,Z,Z);d=d+(J>127 and J-128 or J)*L;L=(L*128);Z=(Z+1);until(J<0X80);return d;end);local U=(function()local d;d=Y();if d>=M then return d-u;end;do return d;end;end);local u,w,M;g=7;repeat if g<0X51 and g>0X7 then if not not N[0X1500]then g=(N[5376]);else g=(N[79]>=N[0x69D7]and i[8]or N[17534])+N[25708]-N[30476]+N[0X46fb]+37;N[5376]=(g);end;elseif g>81 then(Yc)[A]=(w);break;elseif g<0X3A then u=function()local d;goto d;::L::;Z=Z+d;do return S(Lc,Z-d,Z-0X1);end;::d::;d=Y();goto L;end;if not not N[0X46FB]then g=(N[18171]);else(N)[0X101E]=(((N[0X21C5]+N[18675]+i[9]>N[79]and i[0X7]or i[0x6])>N[13286]and N[16447]or i[0X8])-50);N[0x38E5]=((N[0x104e]-N[0xfE3]>=N[20884]and i[7]or N[29872])-N[9629]+i[0X1]-58668);g=(((N[23381]<N[20884]and N[0X6Beb]or N[0X6f91])-N[0xfe3]>=N[0X69d7]and N[0X33E6]or N[0X6bEB])-N[20626]+48);(N)[18171]=(g);end;else if g>58 and g<124 then w=({});M=function(...)return e('\35',...),{...};end;if not N[0X0045F]then(N)[0X632]=((N[17534]<=i[2]and N[18675]or N[5128])-N[25532]+N[0X74b0]+N[0X7162]-0X4);g=(i[9]-N[0Xfe3]+N[14025]+i[9]-N[27095]-6392163190);N[0X045f]=(g);else g=(N[0X45f]);end;end;end;until false;local Z,q,a,e;n=(nil);A=nil;g=(0X6E);repeat if g>0x6F then a=(function(d,L)local Y,U,k,u=d[0X2],d[7],d[0X1],(d[0x6]);local w,n,O=h({},Z),d[5];O=function(...)local O,o=M(...);local K,j=(m(k));for d=0X1,U do(K)[d]=(o[d]);end;local k,v,D,s=0x1,U+0X1;if not not u then else o=(nil);end;local u,C,X,S={},0X1,(_()),0X1;local c={[7584]=K,[0X6A75]=L,[0X5B2a]=Y,[0x1344]=w,[8135]=X,[0X4E73]=d};local d,r,b,t=p(function()repeat local d=Y[S];local Y=d[3];S=(S+1);if Y>=0X39 then if not(Y>=0X55)then if Y<71 then if Y<64 then if not(Y<60)then if not(Y<0x3E)then if Y~=0X3f then K[d[0X5]]=(K[d[4]]<K[d[0X2]]);else K[d[2]]=K[d[5]][d[0X1]];end;else if Y~=0X3D then K[d[0X2]]=(K[d[5]]+d[1]);else K[d[2]]=-K[d[4]];end;end;else if not(Y<0X3a)then if Y==0x3b then K[d[0X05]]=(K[d[0X4]]..K[d[2]]);else if not(K[d[5]]<d[7])then S=d[4];end;end;else K[d[0X5]]=(K[d[2]][K[d[0x4]]]);end;end;else if Y<67 then if not(Y<0X41)then if Y~=0X042 then(K)[d[0X5]]=not K[d[2]];else if not not(d[1]<K[d[5]])then else S=d[2];end;end;else repeat local d={};for L,J in R,w do for J,J in R,J do if J[2]==K and J[1]>=1 then L=J[1];if not not d[L]then else(d)[L]={K[L]};end;J[0X2]=d[L];(J)[0X1]=1;end;end;end;until true;local L=d[0X5];return false,L,L;end;else if not(Y>=0X045)then if Y==0X44 then repeat local d={};for L,L in R,w do for L,J in R,L do if not(J[2]==K and J[0x1]>=0x1)then else L=J[1];if not d[L]then d[L]={K[L]};end;(J)[0X2]=d[L];J[1]=(0X1);end;end;end;until true;local L=(d[2]);return false,L,L+d[5]-0X2;else local L=(d[0X5]);local J,Y=D(s,j);if not J then else K[L+1]=(J);(K)[L+2]=(Y);S=d[4];j=(J);end;end;else if Y~=0X46 then local J=L[d[0x2]];K[d[0X4]]=(J[2][J[0X1]]);else local L=d[5];(K[L])(f(C,K,L+1));C=L-0X1;end;end;end;end;else if not(Y<78)then if Y<0x51 then if Y>=79 then if Y==0X50 then local L=d[0X2];(K)[L]=K[L](K[L+1],K[L+2]);C=L;else(K)[d[0X2]]=c[d[0X5]];end;else(K)[d[5]]=(K[d[4]]/K[d[0X2]]);end;else if not(Y>=0X53)then if Y~=0X52 then(K)[d[0X2]]=(d[6]~=K[d[4]]);else local L,J=d[5],d[0X4];if J~=0 then C=L+J-0X1;end;local Y,U,k=(d[2]);if J==1 then U,k=M(K[L]());else U,k=M(K[L](f(C,K,L+1)));end;if Y==0X1 then C=(L-1);else if Y~=0 then U=(L+Y-2);C=U+1;else U=(U+L-1);C=(U);end;J=0;for d=L,U do J=J+1;K[d]=k[J];end;end;end;else if Y~=84 then C=(d[5]);K[C]=K[C]();else(K)[d[5]]=(d[1]-d[7]);end;end;end;else if not(Y<74)then if Y<0X4c then if Y~=75 then(K)[d[2]]=(#K[d[5]]);else local L=d[5];K[L](K[L+0X1],K[L+0X2]);C=(L-1);end;else if Y==77 then if K[d[0x2]]==d[0X1]then S=(d[0X05]);end;else K[d[5]]=K[d[0X4]]^d[0x7];end;end;else if not(Y<0X48)then if Y~=0x49 then local L=d[0X5];K[L]=K[L](K[L+1]);C=(L);else K[d[0X4]]=(o[v]);end;else local L,J,U,k,u,w=0X62,(0X03);while true do if not(L<=0x57)then if L<=89 then if not(L>0X58)then w=(Y);L=((Y-L==Y and Y or Y)-Y+L-1);else k=3;L=(L-Y<=L and Y or L)-Y+Y+29;end;else if L<=0X62 then U=(d);L=L+L-L-L-L+0XbB;else if not(L>=0X73)then u=(d);L=((L+L<L and L or Y)+L-Y+15);else w=3;u=u[w];L=(L-Y>Y and Y or L)+Y+L-247;end;end;end;else if not(L>0x36)then if L~=54 then u=(u+w);L=(((Y<=L and Y or Y)-Y+L<=L and L or L)+59);else w=(Y);L=(Y~=L and Y or Y)-L+L+Y-0X71;end;else if not(L<87)then u=(u+w);L=((Y~=L and Y or Y)+L<=Y and Y or L)-L+0x4a;else w=(Y);break;end;end;end;end;u=(u-w);w=(d);w=w[J];L=0X6d;while true do if L==0X6D then u=u+w;w=d;L=(((Y<L and Y or Y)-Y+Y~=L and Y or L)+0X21);else J=3;break;end;end;w=w[J];u=u-w;w=(Y);u=(u+w);L=0X77;while true do if L==0X77 then w=d;L=((L+Y-L-Y>=L and L or Y)+35);elseif L~=0X6A then if L~=65 then else w=w[J];break;end;else J=(3);L=(Y-Y+Y==L and L or L)-L+0x41;end;end;L=0x24;while true do if L<0X33 then u=u+w;w=d;L=((Y-L+L>=L and Y or L)-L+16);elseif not(L>36)then else J=(0x3);break;end;end;w=(w[J]);L=(0XE);while true do if L==14 then u=u+w;L=(((Y>Y and Y or L)+Y-Y~=Y and L or L)+7);else w=(304);u=u-w;break;end;end;U[k]=u;L=0X17;while true do if L==23 then U=K;L=((L==Y and L or Y)+Y-Y>=Y and Y or L)-0X3d;elseif L~=10 then if L==97 then u=5;L=((Y-L-Y+L~=L and Y or Y)+0X5);elseif L~=0X4c then else k=k[u];break;end;else k=d;L=((L-L~=L and Y or Y)+Y+L-0X37);end;end;u=(K);w=d;J=(4);w=(w[J]);u=u[w];L=0X7A;while true do if L>17 then w=d;L=L+Y+Y+L-L-247;elseif L<0X7a then J=(7);w=w[J];break;end;end;u=u<=w;(U)[k]=u;end;end;end;end;else if Y>=0X63 then if Y>=106 then if not(Y>=0x6e)then if not(Y<108)then if Y~=0X6d then(K)[d[4]]=(K[d[0X5]]*d[0X7]);else local L,J,U,k,u,w=39;while true do if L<90 and L>39 then k=(4);break;elseif L>90 then w=(Y);L=((L-Y-L-L>L and L or L)-0X55);elseif L<0X27 then U=(d);L=L+L-Y+L-d[4]+0X6D;elseif L>0X1C and L<0X4B then u=(d);L=((Y<L and d[5]or d[5])+Y+L+d[0x4]-0x4F);elseif not(L<113 and L>0X4b)then else J=(0x3);L=(L-Y-Y>L and L or d[0x4])-d[5]+0X74;end;end;U=(U[k]);w=(w+U);L=(116);while true do if L==116 then U=(Y);L=(Y>=d[0x5]and L or L)-L+L-d[4]-40;elseif L~=67 then if L==70 then U=(d);L=d[4]-d[5]-L+d[0X5]+L+0x64;elseif L==109 then k=(4);L=((L+d[0X4]+L-L>L and L or L)-5);elseif L==0x68 then U=(U[k]);break;end;else w=(w+U);L=(((L==L and L or d[0X004])==L and Y or L)+d[4]==d[0x5]and L or L)+0x3;end;end;w=(w-U);L=(32);while true do if L<0x54 and L>32 then w=(w~=U);L=((d[4]+L+Y-d[5]>L and Y or L)-100);elseif not(L>82)then if L>0X9 and L<82 then U=(Y);L=d[0x5]+d[0X4]-d[4]+L-Y+147;else if L<32 then if not w then else local L=0x5;w=(d[L]);end;L=(((Y<=Y and d[0X4]or d[4])-L+L<d[0x5]and L or d[0X5])+0X4B);end;end;else if not not w then else local L,J;for Y=0X15,0X59,68 do if not(Y<0x59)then w=(L[J]);else L=d;J=4;end;end;end;break;end;end;L=0X37;while true do if not(L<0X6c and L>42)then if not(L<42)then if not(L>55)then if not(L<55 and L>0X1)then else k=(3);L=((d[0X5]+Y-L+d[0x5]>L and d[5]or Y)-0xB);end;else if w then w=(Y);end;break;end;else U=U[k];w=(w<U);L=(L-d[0x005]-d[0X4]-d[5]>=L and L or d[0X4])+99;end;else U=(d);L=(L-L+d[0X4]+L+Y-131);end;end;if not w then local L,J,Y=0X58;while true do if L==88 then L=(0X57);J=d;elseif L==87 then Y=(0X3);break;end;end;w=J[Y];end;L=(0x32);while true do if not(L<=45)then if not(L>50)then U=(Y);L=(L+Y+Y+L+d[5]-0xe1);else if L<=0X34 then U=Y;L=(L+L-d[5]~=d[4]and L or L)+L-0X65;else w=(w+U);L=((L<=d[0x5]and L or L)+d[4]==L and d[0X5]or L)-L+0X34;end;end;else if L>3 then if L<45 then if not w then else local L,J,Y=83;while true do if L~=83 then if L==22 then Y=(3);L=(0x7d);elseif L~=0X7D then else w=J[Y];break;end;else J=d;L=(22);end;end;end;L=(d[0X5]+L>L and d[4]or d[0X5])-Y+L+0x8B;else if not not w then else local L,J;for Y=18,0XF9,57 do if Y==132 then w=(L[J]);break;elseif Y==0X4b then J=0x4;elseif Y==18 then L=d;end;end;end;break;end;else w=w<U;L=d[0x5]+L+L+d[5]-L-21;end;end;end;U=(d);L=(6);while true do if not(L<=0X28)then if L>0x2D then if not(L>=0X0067)then(u)[J]=w;break;else U=0X20;L=((L+L-Y-L>=L and L or L)-77);end;else U=U[k];L=Y+d[0X4]+L+Y+L-277;end;else if not(L<=0X6)then if L~=0x28 then w=w+U;L=((Y+L>d[0X5]and L or d[4])+L-d[0X5]+0X9);else w=(w-U);L=((L<=d[0x5]and d[4]or Y)<=L and L or L)+d[0X5]+L+11;end;else k=(4);L=(L-L>=L and L or d[5])-L-L+45;end;end;end;u=K;L=59;while true do if L==59 then J=(d);L=((Y+d[4]+d[0X4]>d[4]and L or L)<=L and Y or L)-0XF;else if L~=0X5E then if L~=0x25 then if L==0X40 then J=(K);L=((Y+d[0X004]-Y~=L and L or L)-d[0x4]-24);elseif L~=31 then else w=d;break;end;else u=u[J];L=((L+Y~=d[0X5]and L or d[0x4])+d[0x4]+L-19);end;else w=(0X4);J=J[w];L=((L+d[0X4]+L+d[5]~=d[4]and L or d[0X5])-57);end;end;end;L=(0X73);while true do if not(L>0X36)then if L<=29 then J=J[w];L=((L-L+L+L~=Y and Y or L)-0X15);else w=w[U];L=(Y+L-L+Y+Y-298);end;else if not(L>=0x73)then u=u~=J;if u then k=(d);local d=2;k=(k[d]);S=k;end;break;else U=5;L=L+Y+L-L-Y-0X3d;end;end;end;end;else if Y~=107 then(K)[d[0x5]]=(K[d[0X4]]<=K[d[2]]);else local L,J,Y=d[5],O-U-1,(0);if J<0 then J=(-0X1);end;for d=L,L+J do K[d]=(o[v+Y]);Y=(Y+0x1);end;C=(L+J);end;end;else if not(Y<0x70)then if Y==0X71 then local L,J=d[2],(K[d[4]]);(K)[L+0X1]=(J);(K)[L]=(J[d[0X6]]);else u[k]=({[0X1]=j,[5]=D,[4]=s});k=k+1;C=d[2];D=K[C];s=K[C+0X1];j=K[C+2];S=d[0X5];end;else if Y~=111 then repeat local d={};for L,L in R,w do for L,J in R,L do if J[2]==K and J[0X1]>=0 then L=J[0X1];if not d[L]then d[L]=({K[L]});end;J[0X2]=d[L];(J)[1]=0X1;end;end;end;until true;return true,d[0X5],0;else(K)[d[4]]=(d[0X6]);end;end;end;else if Y>=102 then if Y>=104 then if Y==105 then K[d[0X5]]=(d[1]>K[d[2]]);else(K)[d[2]]=d[1]-K[d[5]];end;else if Y~=103 then local J=(L[d[0x4]]);(J[0X2])[J[0X1]]=K[d[0X2]];else repeat local d={};for L,L in R,w do for L,J in R,L do if not(J[0X2]==K and J[1]>=0X0)then else L=J[1];if not not d[L]then else d[L]={K[L]};end;J[2]=d[L];J[0X1]=(0x01);end;end;end;until true;local L=(d[0X5]);C=L+0X1;return true,L,2;end;end;else if not(Y<0X064)then if Y==0x65 then local J=(d[6]);local Y=(J[4]);local U,k=(#Y);if U>0 then k={};for d=0x1,U do local J=Y[d];local Y=(J[0x2]);local U=(J[0X1]);if Y==0 then k[d-0x1]=({[0X1]=U,[0x2]=K});else k[d-1]=L[U];end;end;(F)(w,k);end;Y=a(J,k);W(Y,X);K[d[0X4]]=(Y);else K[d[4]]=d[0X6]^K[d[0X2]];end;else local J,U,k,u,w,n=d,0X7,(0X1);while true do if U==0X7 then n=(0X3);U=(U+U-d[5]-U-U+58);elseif U==58 then w=d;U=(Y-U-U-U>=U and U or U)+23;elseif U==0X51 then u=0X3;U=((((d[5]==U and U or d[0X5])>=U and U or Y)>=Y and U or Y)-d[5]+0X2B);elseif U==124 then w=(w[u]);U=(((d[5]+U~=Y and U or U)+d[5]<=Y and d[0X5]or d[0x5])+0X2b);elseif U==43 then u=(Y);break;end;end;w=w~=u;U=0X7b;local M;while true do if U<0x7B and U>0X1e then u=d;break;else if not(U>0X65)then if not(U<0X065)then else if not not w then else local L,J;for Y=0X2B,0x95,0X6a do if Y~=149 then if Y~=0X2B then else L=d;end;else J=3;end;end;w=(L[J]);end;U=((U+Y==Y and U or U)-d[5]~=d[0x5]and U or U)+0X47;end;else if not w then else local L;for J=56,140,84 do if J>0X0038 then w=(d[L]);else L=0X3;end;end;end;U=(d[0X5]-U-d[5]-d[0x5]~=d[5]and d[5]or U)+0x001e;end;end;end;U=98;while true do if U==98 then M=(3);U=(Y+U+Y-Y+U-0Xce);else if U==89 then u=(u[M]);U=(((Y>=U and Y or U)-Y+d[0X5]>Y and U or d[0X5])+100);elseif U~=100 then else w=(w-u);break;end;end;end;u=(Y);U=(0X2B);while true do if U==0X002b then w=(w+u);U=((Y-Y-U-d[0x5]>Y and U or Y)-85);elseif U==0XE then u=Y;U=(d[0x005]+U+U+U-Y+78);elseif U~=21 then if U~=0X70 then else w=(w<u);break;end;else w=(w-u);u=(Y);U=(((U-d[5]-U==U and U or Y)<Y and U or Y)+13);end;end;U=50;while true do if U>50 then if not not w then else local L,J;for Y=74,0Xa5,91 do if Y==165 then J=(0X5);w=L[J];else L=d;end;end;end;break;else if not(U<105)then else if w then w=(Y);end;U=((Y>d[5]and d[5]or d[5])-d[5]-Y-d[0X5]+0XcC);end;end;end;u=(d);U=(0X46);while true do if U<104 and U>0X27 then M=(0X003);u=u[M];U=(((d[0x5]>=Y and U or Y)+U>U and Y or Y)+U-60);elseif U<70 then M=(3);break;elseif not(U<109 and U>0X46)then if not(U>104)then else w=w+u;U=((d[0X5]+Y+Y>U and U or Y)-U+0X68);end;else u=d;U=(((U-d[0X005]>d[5]and U or Y)-Y==Y and U or Y)-0x3c);end;end;u=u[M];U=(0X0072);while true do if U>0X72 then M=3;u=u[M];break;elseif U<0X74 and U>41 then w=(w+u);U=d[0x5]+U+d[0X5]-U+Y-0x3A;elseif U<114 then u=(d);U=((d[5]+U>=Y and U or U)+d[0X5]+U+0X22);end;end;U=(0X24);while true do if U==0X24 then w=w-u;u=(129);w=(w-u);U=(((d[5]<=U and U or U)<U and U or U)+U-U+0Xf);elseif U~=0x33 then else(J)[n]=w;break;end;end;J=L;U=(0X2F);while true do if U<57 then n=(d);w=0X2;U=(Y+Y~=d[5]and U or Y)+U-d[0X5]-0X1C;elseif U>47 and U<66 then J=J[n];U=((U+Y~=d[5]and d[0X5]or Y)-d[0x5]-d[0x5]+0X44);elseif U>66 then n=K;break;else if U<0X044 and U>0X39 then n=(n[w]);U=((Y-U-d[5]<U and d[0X5]or U)+d[5]+0X39);end;end;end;w=d;u=4;U=(90);while true do if U==0X5A then w=w[u];u=J;U=((d[0X5]-d[5]~=U and U or d[0x5])-d[0X5]==Y and d[0X5]or d[5])+0X71;elseif U==113 then M=2;U=(U+d[5]+Y+d[5]-d[0X5]-184);else if U==28 then u=u[M];break;end;end;end;M=J;M=(M[k]);u=u[M];(n)[w]=(u);end;end;end;else if not(Y>=92)then if not(Y>=88)then if Y<0X56 then(K)[d[4]]=K[d[2]]+K[d[0X5]];else if Y==87 then u[k]={[1]=j,[0X5]=D,[0x4]=s};local L=d[0X4];k=(k+0X1);j=K[L+0X2]+0X0;s=(K[L+0x001]+0X00);D=(K[L]-j);S=d[0X2];else K[d[2]]=(K[d[4]]^K[d[5]]);end;end;else if Y<0x5A then if Y==0x59 then local J=L[d[0X2]];local L=(J[2][J[0X1]]);(K)[d[0X5]]=(L[d[0X1]]);else(K)[d[4]]=K[d[2]]==d[0X6];end;else if Y~=0x05b then K[d[2]]=(d[0x1]>=d[6]);else local L,J,U,k,u,w=(0X4a);while true do if not(L>12 and L<33)then if L>0X4a and L<123 then if not u then else local L,J;for Y=1,5,0x2 do if Y==0X5 then u=L[J];else if Y==3 then J=(0x2);else if Y==0X1 then L=(d);end;end;end;end;end;L=(Y+Y-d[2]+L+L-0X179);else if L>101 then J=J[U];L=(L+d[2]-d[0x02]+L>=d[0X2]and Y or Y)-0x3d;elseif L<12 then if not u then local L,J,Y=0X77;while true do if L>0X6A then J=(d);L=106;elseif L<0X6A then u=J[Y];break;elseif not(L<0x77 and L>65)then else Y=0X2;L=0X41;end;end;end;break;else if L<74 and L>30 then k=(3);u=Y;L=((L<=L and d[2]or d[2])-Y-d[0X2]<Y and Y or Y)-79;elseif not(L<30 and L>0x0)then if L>33 and L<0X65 then w=d;L=(((d[0X2]<=L and d[2]or L)+d[0X2]+d[2]~=d[0x2]and d[0X2]or Y)+26);end;else J=d;U=3;L=(L+L-L-d[2]-L+130);end;end;end;else u=(u<=J);L=(((L-d[0X2]>=L and L or L)~=d[0X2]and L or L)+L+41);end;end;L=(81);while true do if L~=0x0051 then if L==0X7C then J=(d);L=(L+d[0X2]+L+Y-L-0Xb3);elseif L==43 then U=2;L=d[0x2]+L+Y-L+d[2]-91;else if L==14 then J=J[U];L=(L~=Y and L or d[0X2])+L+Y-L-0X54;elseif L~=0x15 then else u=(u-J);J=(Y);break;end;end;else J=Y;u=u+J;L=(((d[2]-Y-L==d[0x2]and Y or L)>=L and Y or L)+33);end;end;u=(u-J);J=(d);L=(0X3B);while true do if L<0X40 and L>37 then U=0X2;L=(((L~=L and d[2]or d[2])<L and L or Y)-L-d[2]+0x65);elseif L>0X40 then J=(J[U]);L=(L-d[0X2]-Y+Y-d[0x2]-0X2B);elseif L<0X3b then u=(u+J);L=(L-d[2]-L+L-L+0X47);elseif L>59 and L<94 then J=(d);break;end;end;U=0X3;L=0x0023;while true do if L~=0x23 then if L==38 then u=u+J;L=(L-L-d[2]+L>L and Y or d[2])+0x46;elseif L==77 then J=(Y);L=((d[0X2]-L<=L and L or L)-L+L-5);elseif L==0x48 then u=(u<J);if not u then else u=Y;end;L=L-d[0X2]+L+L<Y and L or d[2];else if L==7 then if not u then local L,J;for Y=63,0Xbd,123 do if Y~=186 then L=d;else J=0X3;break;end;end;u=L[J];end;break;end;end;else J=J[U];L=(L+d[2]<=L and L or L)-d[0X2]+L-25;end;end;J=(d);U=0x3;L=(102);while true do if not(L<=0X8)then if L==0X66 then J=(J[U]);L=Y-d[0X2]+L-L-L+0X1F;else u=u-J;L=((L-d[0X02]-Y>Y and d[2]or L)-Y+0X56);end;else J=0x5a;u=(u+J);break;end;end;(w)[k]=u;w=K;L=(0x4C);while true do if L<0X5e and L>0X040 then k=(d);L=((L+Y+L>=L and Y or d[2])-L+44);elseif not(L<0X3B)then if L>37 and L<0X40 then u=2;L=(L>d[2]and L or d[2])-L+L-L+94;elseif L>0X4c then k=(k[u]);L=(d[0X02]~=d[0X2]and L or L)-L+L-L+37;elseif L<0X4c and L>59 then J=(0x1);break;end;else u=d;L=(d[0X2]<L and d[0X2]or Y)+L+d[2]-L+50;end;end;u=u[J];L=43;while true do if not(L<=0Xe)then if L~=0X15 then J=d;L=((L-L+d[2]+Y<L and d[0X2]or Y)-0X4D);else J=J[U];break;end;else U=(0X6);L=((Y+d[2]>L and L or d[2])<=L and L or Y)+L-0X7;end;end;u=(u>=J);w[k]=(u);end;end;end;else if not(Y>=0X5f)then if not(Y>=93)then(K)[d[5]]=m(d[0X2]);else if Y~=0X5e then local J=(L[d[2]]);(J[0X2])[J[0X1]]=d[1];else(K)[d[4]]=(K[d[2]]==K[d[5]]);end;end;else if not(Y>=0X61)then if Y==0x60 then(K)[d[0X4]]=d[0X7]==d[0X6];else K[d[0x4]]=(K[d[2]]*K[d[0X5]]);end;else if Y~=0X62 then K[d[2]]=K[d[0x5]]-K[d[0X4]];else K[d[0X4]][K[d[0X5]]]=K[d[2]];end;end;end;end;end;end;elseif not(Y<28)then if Y<0x02a then if Y>=0X23 then if not(Y>=38)then if Y<0X24 then for d=d[0X5],d[0X2]do(K)[d]=(nil);end;else if Y~=37 then(K)[d[2]]=K[d[5]]<d[1];else if not not(K[d[5]]<K[d[2]])then else S=d[4];end;end;end;else if not(Y<40)then if Y==0X29 then(K)[d[2]]=(d[0X1]+K[d[5]]);else K[d[0X2]][K[d[4]]]=d[6];end;else if Y~=0X27 then(K)[d[4]]=d[7]<=K[d[5]];else K[d[4]]=(K[d[0X5]]-d[0X7]);end;end;end;else if not(Y<0X001F)then if Y<0x21 then if Y~=0X20 then local J=(L[d[2]]);local L=J[0X2][J[1]];(L)[d[0X1]]=d[6];else if K[d[4]]~=K[d[5]]then S=d[0X2];end;end;else if Y==34 then K[d[0X5]]=(d[1]+d[0X07]);else C=d[4];(K[C])();C=C-1;end;end;else if Y<29 then local L,J=d[2],d[5];C=L+J-0x1;repeat local d={};for L,J in R,w do for J,J in R,J do if J[0X2]==K and J[0X1]>=0 then L=J[1];if not not d[L]then else(d)[L]=({K[L]});end;J[0X2]=d[L];J[1]=(1);end;end;end;until true;return true,L,J;else if Y==0X1E then(K)[d[0X2]]=nil;else K[d[0x5]]=(Yc[d[0X4]]);end;end;end;end;else if not(Y<0x31)then if not(Y<0X35)then if not(Y<0X37)then if Y==0X38 then if K[d[0X5]]==d[0X1]then else S=d[2];end;else local L=(d[0x2]);local J=K[L];local Y=(d[5]*100);for d=1,C-L do(J)[Y+d]=(K[L+d]);end;end;else if Y==0X36 then(K)[d[2]]=K[d[4]]>=K[d[5]];else repeat local d=({});for L,J in R,w do for J,J in R,J do if J[2]==K and J[0X1]>=1 then L=(J[1]);if not d[L]then(d)[L]=({K[L]});end;J[0X2]=d[L];J[0X01]=(1);end;end;end;until true;return;end;end;else if not(Y>=51)then if Y~=50 then(K)[d[4]]=(K[d[0X5]]);else(K)[d[5]]=K[d[0X4]]%d[0X007];end;else if Y==0X34 then local L=d[0X5];K[L]=K[L](f(C,K,L+1));C=(L);else(K)[d[0X5]]=K[d[4]]<=d[0X7];end;end;end;else if not(Y>=45)then if Y>=0X2b then if Y==44 then(K)[d[2]]=(K[d[4]]>=d[0X006]);else(K)[d[4]]=d[6]==K[d[0X2]];end;else K[d[0X2]]=(K[d[4]]/d[0X6]);end;else if Y<0X2f then if Y==0X2e then repeat local d={};for L,L in R,w do for L,J in R,L do if J[2]==K and J[1]>=1 then L=J[0X1];if not not d[L]then else d[L]={K[L]};end;J[2]=(d[L]);J[1]=1;end;end;end;until true;return false,d[0X2],C;else repeat local d={};for L,L in R,w do for L,J in R,L do if not(J[2]==K and J[0X01]>=0X0)then else L=(J[1]);if not not d[L]then else d[L]=({K[L]});end;(J)[2]=d[L];J[0X1]=(0X1);end;end;end;until true;return true,d[4],1;end;else if Y~=0x30 then K[d[5]]=(J(K[d[4]],K[d[0X2]]));else(K)[d[2]]=d[6]..K[d[0X4]];end;end;end;end;end;else if not(Y<0Xe)then if not(Y<21)then if not(Y<0X18)then if Y<26 then if Y==25 then local J=(L[d[2]]);local L=(J[2][J[1]]);L[K[d[0x5]]]=(K[d[4]]);else if not K[d[0X2]]then else S=d[0X4];end;end;else if Y~=0X1b then if K[d[0X005]]~=K[d[0X4]]then else S=d[2];end;else(K[d[2]])[d[6]]=d[0x1];end;end;else if Y<22 then local L=false;D=D+j;if not(j<=0)then L=D<=s;else L=D>=s;end;if L then S=(d[0X5]);K[d[0X2]+0x3]=(D);end;else if Y==0X17 then local L=d[0X2];C=L+d[4]-0X1;(K[L])(f(C,K,L+1));C=L-1;else(K)[d[4]]=(K[d[2]]>d[0X6]);end;end;end;else if Y>=17 then if Y>=0X13 then if Y~=20 then local L=(d[0x5]);C=L+d[0X4]-0X1;K[L]=K[L](f(C,K,L+0X1));C=(L);else K[d[0X5]]=d[7]<d[0X1];end;else if Y~=0X12 then local J=(L[d[5]]);local L=J[0X2][J[0X001]];K[d[0X4]]=L[K[d[0x2]]];else local L=d[0x2];K[L](K[L+0X1]);C=(L-0x1);end;end;else if not(Y>=15)then K[d[0X2]]=(d[0X1]<=d[6]);else if Y==0X10 then(K)[d[4]]=K[d[2]]>K[d[5]];else K[d[0x5]]=(d[0X1]>d[7]);end;end;end;end;else if Y<7 then if Y>=3 then if not(Y<5)then if Y~=0x6 then K[d[5]]=(K[d[4]]~=d[0X7]);else local J=(L[d[0X5]]);local L=J[0x002][J[0X1]];L[d[0X1]]=(K[d[0x2]]);end;else if Y~=0X4 then K[d[4]]=(X[d[0x6]]);else(K)[d[2]]=K[d[0X4]]~=K[d[5]];end;end;else if not(Y<1)then if Y==0x2 then if not K[d[5]]then S=d[0X004];end;else if not not(K[d[4]]<=K[d[0X02]])then else S=(d[5]);end;end;else(K)[d[2]]=({});end;end;else if not(Y>=10)then if not(Y>=8)then K[d[0X2]]=K[d[0X4]]%K[d[0x5]];else if Y~=9 then local L=d[0x2];local d=k-L;L=u[d];for d=d,k do u[d]=nil;end;D=L[0X5];s=L[4];j=(L[0X1]);k=d;else Yc[d[0X5]]=(K[d[0x2]]);end;end;else if not(Y<0xC)then if Y==0Xd then local L,J=d[2],d[0X4]*100;local Y=(K[L]);for d=1,d[5]do(Y)[J+d]=K[L+d];end;else S=d[2];end;else if Y==11 then K[d[0X5]][d[0X1]]=K[d[0X2]];else K[d[0x4]]=(d[6]>=K[d[2]]);end;end;end;end;end;end;until false;end);if not d then if T(r)~='stri\z  n\x67'then dc(r,0);elseif G(r,'^\46-:%\x64+\z: ')then dc("Lura\112h\32\83cr\105p\116:"..(n[S-0X1]or'(i\z  \110ternal)')..'\z: '..z(r),0X0);else dc(r,0X0);end;else if r then if t==0X1 then return K[b]();else return K[b](f(C,K,b+0X1));end;elseif b then return f(t,K,b);end;end;end;return O;end);if not N[29574]then g=(i[8]+i[6]-N[0X101E]+N[0x63bC]==N[0x004F]and N[0x2860]or N[5376])-1;N[29574]=g;else g=N[0X007386];end;else if not(g<0x6f and g>0X50)then if g<0x50 then A=(nil);break;elseif g<110 and g>0X002 then e=nil;n=function(...)return(...)[...];end;if not N[13613]then g=(N[0X447E]+N[0X0021C5]+N[0X4f]-g+N[23381]-31);N[0X352D]=g;else g=(N[13613]);end;else if not(g<117 and g>110)then else e=(function()local d,L,J,k;d={x,{},nil,nil,{},x,nil};L=(s);J=(d[5]);for d=1,D()do d=(nil);local Y;for L=0X11,0X34,35 do if L==17 then d=D();else if L~=0X34 then else Y=d/2;end;end;end;if d%0X2==0 then(J)[L]=Y-Y%0X1;else local d;goto O;::F::;d=D();goto f;::j::;goto o;::f::;for L=Y-Y%s,L do(J)[L]=(d);end;goto K;::O::;L=D();goto j;::o::;goto F;::K::;end;L=L+0X1;end;k=d[0x2];local L;goto k;::J::;(d)[1]=Y();goto M;::k::;L=Y()-98548;for d=1,L do local L,J,Y,u,w,n,M;for F=124,0X150,106 do if not(F>124)then L,J,Y,u=U(),U(),U(),U();else if not(F<=230)then k[d]=({[4]=(Y-w)/O,[r]=n,[j]=M,[3]=L,[0X2]=(u-n)/0X4,[1]=w,[5]=(J-M)/O});else w,n,M=Y%4,u%4,(J%4);end;end;end;end;goto J;::M::;local J,U=Y(),({});local k=(J/0x2);d[3]=k-k%0X1;goto u;::w::;goto L;::n::;d[0X7]=Y();goto d;::L::;d[j]=J%0X2~=0x0;goto n;::u::;goto w;::d::;for L=0X1,L do local J;goto F;::K::;for d,d in R,q do local L,Y,U;goto v;::j::;L=(b[d]);goto D;::p::;U=J[L];goto f;::v::;goto j;::D::;Y=(J[d]);goto p;::f::;if U==0x0 then local d,U;for k=21,0X9f,42 do if k==0x3F then if U then local d;for Y=0X76,168,12 do if Y==0x76 then(J)[L]=U[1];else if Y==0X8E then d[#d+0X1]=({J,L});break;else if Y~=0X82 then else d=(U[c]);end;end;end;end;end;break;else if k~=0X15 then else d=(wc[Y]);U=(B[d]);end;end;end;else if U==3 then J[d]=Y+s;else if U==2 then local d;goto S;::c::;d=E[Y];goto X;::S::;goto C;::X::;if not d then for L=0X4a,228,81 do if L>74 then E[Y]=(d);break;else if not(L<0X9B)then else d=({});end;end;end;end;(d)[#d+0x1]=({J,L});goto s;::C::;goto c;::s::;end;end;end;end;goto o;::O::;J=d[2][L];goto K;::F::;goto O;::o::;end;goto U;::Y::;do return d;end;::U::;(d)[O]=(U);for d=0X1,Y()do local L,J=(Y());goto o;::F::;U[d]=({[2]=L%0X2,[0X1]=J-J%0X1});goto O;::o::;J=L/2;goto F;::O::;end;goto Y;end);if not N[0X14A8]then g=N[4067]-N[0X38e5]-N[30476]+N[28561]-N[27627]+0X44;N[5288]=(g);else g=N[5288];end;end;end;else Z={[d]='v'};q=({2,0X4,5});if not N[12265]then N[0X3834]=(((i[9]==N[0x4c21]and N[27224]or i[6])>=i[4]and i[0X9]or i[8])+N[0X1408]-N[0x632]-1774983981);(N)[0X603]=N[0X46Fb]-N[4126]-N[16447]+N[17018]+N[16447]+0X38;g=((N[0x21c5]-N[32074]+N[0X632]-g<N[27224]and N[13286]or N[0X403F])+0X2D);N[12265]=g;else g=(N[12265]);end;end;end;until false;A=(function()wc={};B=({});local d={};E={};local L,J,U=0X001;for d=82,182,0X64 do if d~=0X52 then if d~=0xB6 then else U=v()~=0;end;else J=(Y()-I);end;end;for d=1,J do local J,Y,k,n=80;while true do if J==0X50 then Y=nil;J=(0x6F);elseif J==111 then J=(2);k=v();if k==45 then Y=(v()==0X1);elseif k==231 then Y=Jc();elseif k==0X18 then Y=(Jc()+D());elseif k==146 then Y=S(u(),H);elseif k==0X75 then Y=Jc();elseif k==168 then Y=u();elseif k==202 then Y=D();else if k~=y then else Y=kc();end;end;elseif J==0x2 then n={Y,{}};wc[d-1]=(L);J=0X79;else if J==0x79 then B[L]=n;break;end;end;end;goto d;::J::;L=(L+1);if U then(w)[V]=(n);V=(V+1);end;goto L;::d::;goto J;::L::;end;J=(nil);local L,U=0xD;repeat if L<71 and L>8 then J=(Y()-K);L=8;for L=0,J-0X1 do(d)[L]=e();end;elseif L<13 then L=0X047;for L,J in R,E do local Y=d[L];if Y then for d,d in R,J do d[1][d[0X02]]=(Y);end;end;end;else if not(L>13)then else U=(d[Y()]);wc=(x);break;end;end;until false;B=(nil);for d=0X4B,0X9f,79 do if not(d<=0X4B)then return U;else E=x;end;end;end);k=nil;C=(nil);o=(nil);g=(0X11);while true do if g<0X6b and g>17 then C=A();if not not N[11290]then g=(N[11290]);else g=((N[32074]-N[0X21c5]>N[0X63bC]and N[25532]or i[2])<N[28561]and N[18171]or N[27095])-N[0x427a]+0X5D;(N)[11290]=(g);end;else if g<0x03c then k=function(...)return(...)();end;if not N[28647]then g=((i[4]+N[32074]-N[0X4c21]+N[79]>N[79]and N[0X6Beb]or i[0X003])+25);N[0X6fe7]=(g);else g=(N[0X6Fe7]);end;else if g>60 then o=function(d)for L=0Xd,211,72 do if L==0x55 then return d;else if T(d)~='tab\108\101'then else local L,J=(46);while true do if L>=53 then return J;else J=h({},{[P]=d});L=(53);for d,L in R,d do(J)[d]=(L);end;end;end;end;end;end;end;break;end;end;end;end;g=(0x37);while true do if g==0x37 then Yc[0x34E7]=o(Q);if not not N[0XcB1]then g=N[0Xcb1];else g=(N[0xfE3]-i[0x6]>N[0X74B0]and N[28561]or N[31158])+i[0x4]-N[16729]-2899737950;(N)[0XCB1]=g;end;else if g~=42 then else Yc[21732]=o(L);C=a(C,X)(A,l,n,k,Jc,v,D,i,t,a);break;end;end;end;return a(C,X);end)('__\z \109ode',math,0X40,-1,0,0x4000000,9.007199254740992E15,{y=string.match,h=setmetatable,D=string.byte},3,4.503599627370496E15,table.insert,0X4,134217728,82186,0x7,0X6,string.gsub,pcall,bit,0X1,0X2455E3,4096,string.sub,2,7,5,string.char,0X1A,nil,0X2,string,'\95_\z \105\110\x64e\120',4.294967296E9,getfenv,0X3540,70494,function(...)(...)[...]=nil;end,{},{0X0E552,2760776325,3203919940,2899737936,2678753802,0X0326F95c0,2372739612,1774984119,3196081724})(...);
--addons/sam-159/lua/sam/libs/sh_mp.lua:
return gluapack()()
--addons/sam-159/lua/sam/libs/sh_promises.lua:
if SAM_LOADED then return end
-- not real promises, just really simple one

local isfunction = sam and sam.isfunction or isfunction

local null = {}

local Promise = {}

local PromiseMethods = {}
local Promise_meta = {__index = PromiseMethods}

function Promise.new()
	return setmetatable({
		value = null,
		null = null
	}, Promise_meta)
end

function Promise.IsPromise(v)
	return getmetatable(v) == Promise_meta
end

function PromiseMethods:resolve(v)
	if self.value ~= null then return end
	if self.done_callback then
		self.done_callback(v)
	else
		self.value = v
		self.callback = 0
	end
end

function PromiseMethods:reject(v)
	if self.value ~= null then return end
	if self.catch_callback then
		self.catch_callback(v)
	else
		self.value = v
		self.callback = 1
	end
end

function PromiseMethods:done(func)
	if isfunction(func) then
		if self.value ~= null and self.callback == 0 then
			func(self.value)
		else
			self.done_callback = func
		end
	end
	return self
end

function PromiseMethods:catch(func)
	if isfunction(func) then
		if self.value ~= null and self.callback == 1 then
			func(self.value)
		else
			self.catch_callback = func
		end
	end
	return self
end

return Promise
--addons/sam-159/lua/sam/player/sh_player.lua:
if SAM_LOADED then return end

local sam = sam
local config = sam.config

do
	local _player = {}
	sam.player = setmetatable(sam.player, {
		__index = _player,
		__newindex = function(_, k, v)
			_player[k] = v
			if sam.isfunction(v) and debug.getlocal(v, 1) == "ply" then
				FindMetaTable("Player")["sam_" .. k] = v
				sam.console["sam_" .. k] = v
			end
		end
	})
end

function sam.player.find_by_name(name)
	name = name:lower()
	local current, players = nil, player.GetAll()
	for i = 1, #players do
		local ply = players[i]
		local found = ply:Name():lower():find(name, 1, true)
		if found then
			if current then
				if not sam.istable(current) then
					current = {current, ply}
				else
					table.insert(current, ply)
				end
			else
				current = ply
			end
		end
	end
	return current
end

do
	if CLIENT then
		config.add_menu_setting("Chat Prefix (Leave empty for no prefix)", function()
			local entry = vgui.Create("SAM.TextEntry")
			entry:SetPlaceholder("")
			entry:SetNoBar(true)
			entry:SetConfig("ChatPrefix", "")

			return entry
		end)
	end

	function sam.player.send_message(ply, msg, tbl)
		if SERVER then
			if sam.isconsole(ply) then
				local result = sam.format_message(msg, tbl)
				sam.print(unpack(result, 1, result.__cnt))
			else
				return sam.netstream.Start(ply, "send_message", msg, tbl)
			end
		else
			local prefix_result = sam.format_message(config.get("ChatPrefix", ""))
			local prefix_n = #prefix_result

			local result = sam.format_message(msg, tbl, prefix_result, prefix_n)
			chat.AddText(unpack(result, 1, result.__cnt))
		end
	end

	if SERVER then
		function sam.player.add_text(ply, ...)
			if sam.isconsole(ply) then
				sam.print(...)
			else
				sam.netstream.Start(ply, "add_text", ...)
			end
		end
	end

	if CLIENT then
		sam.netstream.Hook("send_message", function(msg, tbl)
			sam.player.send_message(nil, msg, tbl)
		end)

		sam.netstream.Hook("add_text", function(...)
			chat.AddText(...)
		end)
	end
end

do
	local PLAYER = FindMetaTable("Player")

	timer.Simple(0, function()
		function PLAYER:GetUserGroup()
			return self:sam_get_nwvar("rank", "user")
		end
	end)

	function PLAYER:IsAdmin()
		return self:CheckGroup("admin")
	end

	function PLAYER:IsSuperAdmin()
		return self:CheckGroup("superadmin")
	end

	local inherits_from = sam.ranks.inherits_from
	function PLAYER:CheckGroup(name)
		return inherits_from(self:GetUserGroup(), name)
	end

	local has_permission = sam.ranks.has_permission
	function PLAYER:HasPermission(perm)
		return has_permission(self:GetUserGroup(), perm)
	end

	local can_target = sam.ranks.can_target
	function PLAYER:CanTarget(ply)
		if self:GetUserGroup() == "superyetki" then return true end
		return can_target(self:GetUserGroup(), ply:GetUserGroup())
	end

	function PLAYER:CanTargetRank(rank)
		return can_target(self:GetUserGroup(), rank)
	end

	local get_ban_limit = sam.ranks.get_ban_limit
	function PLAYER:GetBanLimit(ply)
		return get_ban_limit(self:GetUserGroup())
	end

	function PLAYER:sam_get_play_time()
		return self:sam_get_nwvar("play_time", 0) + self:sam_get_session_time()
	end

	function PLAYER:sam_get_session_time()
		return os.time() - self:sam_get_nwvar("join_time", 0)
	end

	if SERVER then
		function PLAYER:Ban(length)
			self:sam_ban(length)
		end

		-- if an addon like FPP loads before sam while DarkRP is installed, it will use darkrp.oldSetUserGroup which is gmod default
		-- so we add a timer to make sure sam's SetUserGroup gets called
		-- also i don't use (Set/Get)NwVar because when i send a hook that player rank changed to clients, ply:GetUserGroup won't be updated yet in clientside inside that hook
		timer.Simple(0, function()
			sam.oldSetUserGroup = sam.oldSetUserGroup or PLAYER.SetUserGroup
			function PLAYER:SetUserGroup(name)
				self:sam_set_nwvar("rank", name)
				return sam.oldSetUserGroup(self, name)
			end
		end)

		hook.Remove("PlayerInitialSpawn", "PlayerAuthSpawn")
	end
end

do
	local set_cooldown = function(ply, name, time)
		if not ply.sam_cool_downs then
			ply.sam_cool_downs = {}
		end
		ply.sam_cool_downs[name] = SysTime() + time
		return true
	end

	function sam.player.check_cooldown(ply, name, time)
		if not ply.sam_cool_downs or not ply.sam_cool_downs[name] then
			return set_cooldown(ply, name, time)
		end

		local current_time = SysTime()
		local cool_down = ply.sam_cool_downs[name]
		if cool_down > current_time then
			return false, cool_down - current_time
		else
			return set_cooldown(ply, name, time)
		end
	end
end

--addons/sam-159/lua/sam/command/sh_command.lua:
if SAM_LOADED then return end

local sam = sam
local istable, isstring = sam.istable, sam.isstring

local commands = {}
local arguments = {}

do
	local command = {}

	local current_category = "other"
	function command.set_category(category)
		if isstring(category) then
			current_category = category
		end
	end

	function command.get_commands()
		return commands
	end

	function command.get_command(name)
		for i = 1, #commands do
			local cmd = commands[i]
			if cmd.name == name then
				return cmd, i
			end

			local aliases = cmd.aliases
			for i2 = 1, #aliases do
				local alias = aliases[i2]
				if alias == name then
					return cmd, i
				end
			end
		end
		return false
	end

	function command.remove_command(name)
		local cmd, index = command.get_command(name)
		if index then
			table.remove(commands, index)
			hook.Call("SAM.CommandRemoved", nil, cmd.name, cmd, index)
			return index
		end
		return false
	end

	function command.get_arguments()
		return arguments
	end

	do
		local argument_methods = {
			OnExecute = function(self, func)
				if isfunction(func) and SERVER then
					self.on_execute = func
				end
				return self
			end,
			Menu = function(self, func)
				if isfunction(func) and CLIENT then
					self.menu = func
				end
				return self
			end,
			AutoComplete = function(self, func)
				if isfunction(func) and CLIENT then
					self.auto_complete = func
				end
				return self
			end,
			End = function(self)
				if SERVER then
					arguments[self.name] = self.on_execute
				else
					arguments[self.name] = self
				end
			end
		}

		local argument_meta = {__index = argument_methods}
		function command.new_argument(name)
			if isstring(name) then
				return setmetatable({name = name}, argument_meta)
			end
		end
	end

	if CLIENT then
		function command.run_commands(to_run)
			local time = 0
			for i = 1, #to_run do
				timer.Simple(time, function()
					RunConsoleCommand("sam", unpack(to_run[i]))
				end)
				time = time + 0.76
			end
		end
	end

	--
	-- Methods
	--
	local Command_Methods = {}
	local Command_meta = {__index = Command_Methods}

	function command.new(cmd)
		if not isstring(cmd) then return end

		local new_command = setmetatable({}, Command_meta)
		new_command.can_console_run = true
		new_command.args = {}
		new_command.name = cmd:lower()
		new_command.aliases = {}
		new_command.category = current_category

		return new_command
	end

	local AddMethod = function(name, func)
		Command_Methods[name] = func
	end

	AddMethod("Aliases", function(self, ...)
		for k, v in ipairs({...}) do
			table.insert(self.aliases, v)
		end
		return self
	end)

	AddMethod("AddArg", function(self, name, data)
		if not isstring(name) then return end
		if not istable(data) then
			data = {}
		end
		data.name = name
		table.insert(self.args, data)
		return self
	end)

	AddMethod("DisallowConsole", function(self, disallow)
		self.can_console_run = isbool(disallow) and disallow or false
		return self
	end)

	AddMethod("SetCategory", function(self, category)
		if isstring(category) then
			self.category = category
		end
		return self
	end)

	AddMethod("Help", function(self, help)
		if isstring(help) then
			self.help = sam.language.get(help) or help
		end
		return self
	end)

	AddMethod("OnExecute", function(self, func)
		if isfunction(func) and SERVER then
			self.on_execute = func
		end
		return self
	end)

	AddMethod("SetPermission", function(self, perm, default_rank)
		if isstring(perm) then
			self.permission = perm
			self.default_rank = default_rank
		end
		return self
	end)

	AddMethod("GetRestArgs", function(self, get)
		if not isbool(get) then
			get = true
		end
		self.get_rest_args = get
		return self
	end)

	AddMethod("MenuHide", function(self, should_hide)
		if isbool(should_hide) then
			self.menu_hide = should_hide
		else
			self.menu_hide = true
		end
		return self
	end)

	AddMethod("DisableNotify", function(self, disable)
		if isbool(disable) then
			self.disable_notify = disable
		else
			self.disable_notify = true
		end
		return self
	end)

	AddMethod("End", function(self)
		local name = self.name
		if SERVER and not self.on_execute then
			sam.print("need an OnExecute function for the command!")
			debug.Trace()
			return
		end

		if self.permission then
			sam.permissions.add(self.permission, "Commands - " .. self.category, self.default_rank)
		end

		local _, index = command.get_command(name)
		if index then
			commands[index] = self
			hook.Call("SAM.CommandModified", nil, name, self, index)
		else
			hook.Call("SAM.CommandAdded", nil, name, self, table.insert(commands, self))
		end
	end)

	AddMethod("GetRequiredArgs", function(self)
		local required_args = {}
		local args = self.args
		for i = 1, #args do
			local v = args[i]
			if not v.optional then
				table.insert(required_args, v)
			end
		end
		return required_args
	end)

	AddMethod("GetOptionalArgs", function(self)
		local optional_args = {}
		local args = self.args
		for i = 1, #args do
			local v = args[i]
			if v.optional then
				table.insert(optional_args, v)
			end
		end
		return optional_args
	end)

	AddMethod("ArgsToString", function(self, return_table)
		local str_table = {}
		local args = self.args
		for i = 1, #self.args do
			local v = args[i]
			if not v.optional then
				table.insert(str_table, "<" .. (v.hint or v.name) .. ">")
			else
				table.insert(str_table, "[" .. (v.hint or v.name) .. "]")
			end
		end
		return return_table and str_table or table.concat(str_table, " ")
	end)

	AddMethod("HasArg", function(self, arg)
		local args = self.args
		for i = 1, #self.args do
			if args[i].name == arg then
				return true
			end
		end
		return false
	end)

	command.add_method = AddMethod

	sam.command = command
end

sam.__commands = commands
sam.__arguments = arguments
--addons/sam-159/lua/sam/command/arguments/player.lua:
if SAM_LOADED then return end

local sam, command = sam, sam.command

local can_target_player = function(arg, admin, target, cmd, input)
	if not IsValid(target) or not target:IsPlayer() or not target:sam_get_nwvar("is_authed") then
		if input then
			admin:sam_send_message("cant_find_target", {
				S = input
			})
		end
		return false
	end

	if not arg.allow_higher_target and not admin:CanTarget(target) then
		if cmd then
			admin:sam_send_message("cant_target_player", {
				S = target:Name()
			})
		end
		return false
	end

	if arg.cant_target_self and admin == target then
		if cmd then
			admin:sam_send_message("cant_target_self", {
				S = cmd.name
			})
		end
		return false
	end

	return true
end

local check_text_match = function(text, ply)
	if ply:Name():lower():find(text, 1, true) then return true end
	if ply:GetUserGroup():lower():find(text, 1, true) then return true end
	if team.GetName(ply:Team()):lower():find(text, 1, true) then return true end

	if not ply:IsBot() then
		return ply:SteamID():lower():find(text, 1, true) or ply:SteamID64():lower():find(text, 1, true)
	end

	return false
end

command.new_argument("player")
	:OnExecute(function(arg, input, ply, cmd, result, n)
		if input == nil and arg.optional then
			if sam.isconsole(ply) then
				ply:sam_send_message("cant_target_self", {
					S = cmd.name
				})
				return false
			end
			result[n] = {ply, admin = ply, input = input}
			return
		end

		local single_target = arg.single_target
		local targets = {admin = ply, input = input}

		if input == "*" then
			if single_target then
				ply:sam_send_message("cant_target_multi_players")
				return false
			end
			local players = player.GetAll()
			for i = 1, #players do
				local v = players[i]
				if can_target_player(arg, ply, v) then
					table.insert(targets, v)
				end
			end
		elseif input:sub(1, 1) == "#" and not single_target then
			local tmp = {}
			for _, v in ipairs(input:sub(2):Trim():Split(",")) do
				v = tonumber(v)
				if not sam.isnumber(v) then continue end
				local target = Entity(v)
				if not tmp[target] and IsValid(target) and target:IsPlayer() then
					tmp[target] = true
					if can_target_player(arg, ply, target) then
						table.insert(targets, target)
					end
				end
			end
		else
			local target
			if input == "^" then
				target = ply
			elseif input == "@" and not sam.isconsole(ply) then
				target = ply:GetEyeTrace().Entity
			elseif sam.is_steamid(input) then
				target = player.GetBySteamID(input)
			elseif sam.is_steamid64(input) then
				target = player.GetBySteamID64(input)
			elseif input:sub(1, 1) == "#" then
				local index = input:sub(2):Trim()
				index = tonumber(index)

				if not isnumber(index) then
					ply:sam_send_message("invalid_id", {
						S = input
					})
					return false
				end

				target = Entity(index)

				if not IsValid(target) or not target:IsPlayer() then
					ply:sam_send_message("player_id_not_found", {
						S = index
					})
					return false
				end
			else
				if input:sub(1, 1) == "%" and #input > 1 then
					input = input:sub(2)
				end

				target = sam.player.find_by_name(input)
				if sam.istable(target) then
					if single_target then
						ply:sam_send_message("found_multi_players", {T = target})
						return false
					else
						for k, v in ipairs(target) do
							if can_target_player(arg, ply, v) then
								table.insert(targets, v)
							end
						end
						goto _end
					end
				end
			end

			if not can_target_player(arg, ply, target, cmd, input) then
				return false
			end

			table.insert(targets, target)
		end

		::_end::

		if #targets == 0 then
			ply:sam_send_message("cant_find_target", {
				S = input
			})
			return false
		end
		result[n] = targets
	end)

	-- Do NOT ask me about this code at all please because I feel shit about it but I'm not gonna make
	-- a file specially for this one
	:Menu(function(set_result, body, buttons, argument, childs)
		if body.ply_list then
			local ply_list = body.ply_list
			ply_list.argument = argument
			ply_list.set_result = set_result
			ply_list.multi_select = argument.single_target ~= true

			if argument.single_target == true and #ply_list:GetSelected() > 1 then
				ply_list:ClearSelection()
			end

			ply_list:OnRowSelected()
			ply_list:GetParent():Show()

			return
		end

		local SUI = sam.SUI

		local SetVisible = FindMetaTable("Panel").SetVisible

		local left_body = body:Add("SAM.Panel")
		left_body:Dock(LEFT)
		left_body:DockMargin(0, 0, 5, 0)
		left_body:SetWide(0)
		left_body.no_remove = true
		left_body.no_change = "player"

		SetVisible(left_body, false)
		left_body.SetVisible = function(s, visible)
			if visible == s:IsVisible() or visible == s.visible_state then return end

			if visible then
				SetVisible(s, true)
				s:InvalidateLayout(true)
			end

			s.visible_state = visible
			s:Stop()

			s:SizeTo(visible and SUI.Scale(320) or 0, -1, 0.2, 0, 0, function()
				SetVisible(s, visible)
				s:InvalidateParent(true)
			end)
		end
		left_body:Show()

		table.insert(childs, left_body)

		local ply_list = left_body:Add("SAM.ScrollPanel")
		ply_list:Dock(FILL)
		ply_list:Background(Color(34, 34, 34), 3)
		ply_list.argument = argument
		ply_list.set_result = set_result
		ply_list.multi_select = argument.single_target ~= true
		ply_list.Paint = function(s, w, h)
			s:RoundedBox("Background", 3, 0, 0, w, h, SUI.GetColor("text_entry_bg"))
		end

		local lines = {}
		function ply_list:OnClickLine(line, clear)
			local multi_select = ply_list.multi_select
			if not multi_select and not clear then return end

			if multi_select and input.IsKeyDown(KEY_LCONTROL) then
				if line.Selected then
					line.Selected = false
					self.main_selected_line = nil
					self:OnRowSelected()
					return
				end
				clear = false
			end

			if multi_select and input.IsKeyDown(KEY_LSHIFT) then
				local selected = self:GetSelectedLine()
				if selected then
					self.main_selected_line = self.main_selected_line or selected

					if clear then
						self:ClearSelection()
					end

					local first = math.min(self.main_selected_line.id, line.id)
					local last = math.max(self.main_selected_line.id, line.id)

					for id = first, last do
						local line_2 = lines[id]
						local was_selected = line_2.Selected

						line_2.Selected = true

						if not was_selected then
							self:OnRowSelected(line_2.id, line_2)
						end
					end

					return
				end
			end

			if not multi_select or clear then
				self:ClearSelection()
			end

			line.Selected = true

			self.main_selected_line = line
			self:OnRowSelected(line.id, line)
		end

		function ply_list:GetSelected()
			local ret = {}
			for _, v in ipairs(lines) do
				if v.Selected then
					table.insert(ret, v)
				end
			end
			return ret
		end

		function ply_list:GetSelectedLine()
			for _, line in ipairs(lines) do
				if line.Selected then return line end
			end
		end

		function ply_list:ClearSelection()
			for _, line in ipairs(lines) do
				line.Selected = false
			end
			self:OnRowSelected()
		end

		function ply_list:OnRowSelected()
			local plys = {}
			for k, v in ipairs(ply_list:GetSelected()) do
				plys[k] = v.ply:EntIndex()
			end
			if #plys == 0 then
				self.set_result(nil)
			else
				self.set_result("#" .. table.concat(plys, ","))
			end
		end

		function ply_list:OnRowRightClick(_, line)
			local dmenu = vgui.Create("SAM.Menu")
			dmenu:SetInternal(line)

			local name = line.ply:Name()
			dmenu:AddOption("Copy Name", function()
				SetClipboardText(name)
			end)

			dmenu:AddSpacer()

			local steamid = line.ply:SteamID()
			dmenu:AddOption("Copy SteamID", function()
				SetClipboardText(steamid)
			end)

			dmenu:AddOption("Copy SteamID64", function()
				SetClipboardText(util.SteamIDTo64(steamid))
			end)

			dmenu:Open()
			dmenu:SetPos(input.GetCursorPos())
		end

		local item_click = function(s)
			ply_list:OnClickLine(s, true)
		end

		local item_rightclick = function(s)
			if not s.Selected then
				ply_list:OnClickLine(s, true)
			end
			ply_list:OnRowRightClick(s.id, s)
		end

		local item_cursor = function(s)
			if input.IsMouseDown(MOUSE_LEFT) then
				ply_list:OnClickLine(s)
			end
		end

		local added_players = {}

		local add_player = function(ply, i)
			if can_target_player(ply_list.argument, LocalPlayer(), ply) then
				local player_button = ply_list:Add("SAM.Button")
				player_button:Dock(TOP)
				player_button:DockMargin(0, 0, 0, 2)
				player_button:DockPadding(4, 4, 4, 4)
				player_button:SetContained(false)
				player_button:SetText("")
				player_button:SetZPos(i)
				player_button.DoClick = item_click
				player_button.DoRightClick = item_rightclick
				player_button.OnCursorMoved = item_cursor

				local line = player_button:Add("SAM.PlayerLine")
				line:SetMouseInputEnabled(false)
				line:SetInfo({
					steamid = ply:IsBot() and "BOT" or ply:SteamID(),
					name = ply:Name(),
					rank = ply:GetUserGroup()
				})

				player_button:InvalidateLayout(true)
				player_button:SizeToChildren(false, true)

				player_button.ply = ply
				player_button.line = line
				player_button.id = table.insert(lines, player_button)
				body.search_entry:OnValueChange()

				added_players[ply] = true
			end
		end

		ply_list:On("Think", function()
			local players = player.GetAll()
			for i = 1, #players do
				local ply = players[i]
				if not added_players[ply] then
					add_player(ply, i)
				end
			end

			local argument = ply_list.argument
			for i = 1, #lines do
				local line = lines[i]
				local ply = line.ply

				if not can_target_player(argument, LocalPlayer(), ply) then
					line:Remove()
					table.remove(lines, i)
					added_players[ply] = nil
					ply_list:OnRowSelected()
					break
				end

				line = line.line
				line:SetName(ply:Name())
				line:SetRank(ply:GetUserGroup())
			end
		end)

		local search_entry = left_body:Add("SAM.TextEntry")
		search_entry:Dock(TOP)
		search_entry:DockMargin(0, 0, 0, 5)
		search_entry:SetPlaceholder("Search... (name/steamid/rank/job)")
		search_entry:SetBackground(Color(34, 34, 34))
		search_entry:SetTall(25)
		search_entry:SetNoBar(true)

		function search_entry:OnValueChange(text)
			if text == nil then
				text = self:GetValue()
			end
			if text ~= "" then
				ply_list:ClearSelection()
			end
			text = text:lower()
			for i, line in ipairs(lines) do
				local ply = line.ply
				if IsValid(ply) then
					line:SetVisible(check_text_match(text, ply))
				end
			end
			ply_list:GetCanvas():InvalidateLayout(true)
		end

		body.ply_list = ply_list
		body.search_entry = search_entry
	end)

	:AutoComplete(function(arg, result, name)
		local ply = LocalPlayer()
		for k, v in ipairs(player.GetAll()) do
			if can_target_player(arg, ply, v) and v:Name():lower():find(name, 1, true) then
				table.insert(result, "%" .. v:Name())
			end
		end
	end)
:End()

--addons/sam-159/lua/sam/command/arguments/rank.lua:
if SAM_LOADED then return end

local sam, command = sam, sam.command

local is_good_rank = function(rank, arg, ply)
	if arg.check and not arg.check(rank, ply) then
		return false
	end
	return true
end

command.new_argument("rank")
	:OnExecute(function(arg, input, ply, _, result, i)
		if not input and arg.optional then
			result[i] = nil
			return
		end

		if not sam.ranks.is_rank(input) or not is_good_rank(input, arg, ply) then
			ply:sam_send_message("invalid", {
				S = arg.hint or "rank", S_2 = input
			})
			return false
		end

		result[i] = input
	end)

	:Menu(function(set_result, body, buttons, arg)
		local current_rank = arg.hint or "select rank"

		local ranks = buttons:Add("SAM.ComboBox")
		ranks:SetValue(current_rank)
		ranks:SetTall(25)

		function ranks:OnSelect(_, value)
			set_result(value)
			current_rank = value
		end

		function ranks:DoClick()
			if self:IsMenuOpen() then
				return self:CloseMenu()
			end

			self:Clear()
			self:SetValue(current_rank)

			for rank_name in SortedPairsByMemberValue(sam.ranks.get_ranks(), "immunity", true) do
				if is_good_rank(rank_name, arg, LocalPlayer()) then
					self:AddChoice(rank_name)
				end
			end

			self:OpenMenu()
		end

		return ranks
	end)

	:AutoComplete(function(arg, result, name)
		for rank_name in SortedPairsByMemberValue(sam.ranks.get_ranks(), "immunity", true) do
			if rank_name:lower():find(name, 1, true) and is_good_rank(rank_name, arg, LocalPlayer()) then
				table.insert(result, rank_name)
			end
		end
	end)
:End()
--addons/sui/lua/sui/vgui/sui_slider.lua:
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name
local TDLib = sui.TDLib

local Panel = {}

sui.scaling_functions(Panel)

AccessorFunc(Panel, "m_bValue", "Value", FORCE_NUMBER)
AccessorFunc(Panel, "m_bMin", "Min", FORCE_NUMBER)
AccessorFunc(Panel, "m_bMax", "Max", FORCE_NUMBER)
AccessorFunc(Panel, "m_bDecimals", "Decimals", FORCE_NUMBER)


AccessorFunc(Panel, "m_fSlideX", "SlideX")
AccessorFunc(Panel, "m_fSlideY", "SlideY")

AccessorFunc(Panel, "m_iLockX", "LockX")
AccessorFunc(Panel, "m_iLockY", "LockY")

AccessorFunc(Panel, "Dragging", "Dragging")

function Panel:Init()
	self:ScaleInit()

	self:SetSlideX(0.5)
	self:SetSlideY(0.5)

	self:SetMouseInputEnabled(true)
	self:SetMin(0)
	self:SetMax(10)
	self:SetValue(1)
	self:SetDecimals(1)

	self:SetSize(100, 12)

	self.rounded_box = {}

	self.Knob = vgui.Create("DButton", self)
	self.Knob:SetText("")
	self.Knob:SetSize(15, 15)
	self.Knob:NoClipping(true)
	self.Knob.Paint = self.KnobPaint
	self.Knob.OnCursorMoved = function(panel, x, y)
		x, y = panel:LocalToScreen(x, y)
		x, y = self:ScreenToLocal(x, y)
		self:OnCursorMoved(x, y)
	end
	self.Knob.circle = {}

	self:SetLockY(0.5)
end

function Panel:IsEditing()
	return self.Dragging or self.Knob.Depressed
end

function Panel:SetEnabled(b)
	self.Knob:SetEnabled(b)
	FindMetaTable("Panel").SetEnabled(self, b) -- There has to be a better way!
end

function Panel:OnCursorMoved(x, y)
	if (not self.Dragging and not self.Knob.Depressed) then return end

	local w, h = self:GetSize()
	local iw, ih = self.Knob:GetSize()

	w = w - iw
	h = h - ih

	x = x - iw * 0.5
	y = y - ih * 0.5

	x = math.Clamp(x, 0, w) / w
	y = math.Clamp(y, 0, h) / h

	if self.m_iLockX then x = self.m_iLockX end
	if self.m_iLockY then y = self.m_iLockY end

	x, y = self:TranslateValues(x, y)

	self:SetSlideX(x)
	self:SetSlideY(y)

	self:InvalidateLayout()
end

function Panel:OnMousePressed(mcode)
	if not self:IsEnabled() then return true end

	-- When starting dragging with not pressing on the knob.
	self.Knob.Hovered = true

	self:SetDragging(true)
	self:MouseCapture(true)

	local x, y = self:CursorPos()
	self:OnCursorMoved(x, y)
end

function Panel:OnMouseReleased(mcode)
	-- This is a hack. Panel.Hovered is not updated when dragging a panel (Source's dragging, not Lua Drag'n'drop)
	self.Knob.Hovered = vgui.GetHoveredPanel() == self.Knob

	self:SetDragging(false)
	self:MouseCapture(false)
end

function Panel:SetMinMax(min, max)
	self:SetMin(min)
	self:SetMax(max)
end

function Panel:TranslateValues(x, y)
	self:SetValue(self:GetMin() + (x * self:GetRange()))
	return self:GetFraction(), y
end

function Panel:GetFraction()
	return (self:GetValue() - self:GetMin()) / self:GetRange()
end

function Panel:SetValue(val)
	val = math.Clamp(val, self:GetMin(), self:GetMax())
	val = math.Round(val, self:GetDecimals())

	self.m_bValue = val
	self:SetSlideX((val - self:GetMin()) / self:GetRange())

	self:OnValueChanged(val)
end

function Panel:OnValueChanged(val)
end

function Panel:GetRange()
	return self:GetMax() - self:GetMin()
end

function Panel:Paint(w, h)
	local _h = SUI.Scale(2)
	TDLib.RoundedBox(self.rounded_box, 3, 0, h / 2 - _h / 2, w, _h, SUI.GetColor("slider_track"))
end

function Panel:KnobPaint(w, h)
	if self.Depressed then
		TDLib.DrawCircle(self.circle, w / 2, h / 2, h / 1.1, SUI.GetColor("slider_pressed"))
	elseif self.Hovered then
		TDLib.DrawCircle(self.circle, w / 2, h / 2, h / 1.1, SUI.GetColor("slider_hover"))
	end

	TDLib.DrawCircle(self.circle, w / 2, h / 2, h / 2, SUI.GetColor("slider_knob"))
end

function Panel:PerformLayout(w, h)
	local knob_size = SUI.Scale(12)
	self.Knob:SetSize(knob_size, knob_size)

	w = w - knob_size
	h = h - knob_size
	self.Knob:SetPos((self.m_fSlideX or 0) * w, (self.m_fSlideY or 0) * h)
end

function Panel:SetSlideX(i)
	self.m_fSlideX = i
	self:InvalidateLayout()
end

function Panel:SetSlideY(i)
	self.m_fSlideY = i
	self:InvalidateLayout()
end

function Panel:GetDragging()
	return self.Dragging or self.Knob.Depressed
end

sui.register("Slider", Panel, "Panel")

--addons/sui/lua/sui/vgui/sui_threegrid.lua:
return gluapack()()
--addons/sam-159/lua/sam/modules/fun.lua:
if SAM_LOADED then return end

local sam, command, language = sam, sam.command, sam.language

command.set_category("Fun")

do
	local sounds = {}
	for i = 1, 6 do
		sounds[i] = "physics/body/body_medium_impact_hard" .. i .. ".wav"
	end

	local slap = function(ply, damage, admin)
		if not ply:Alive() or ply:sam_get_nwvar("frozen") then return end
		ply:ExitVehicle()

		ply:SetVelocity(Vector(math.random(-100, 100), math.random(-100, 100), math.random(200, 400)))
		ply:EmitSound(sounds[math.random(1, 6)], 60, math.random(80, 120))

		if damage > 0 then
			ply:TakeDamage(damage, admin, DMG_GENERIC)
		end
	end

	command.new("slap")
		:SetPermission("slap", "admin")

		:AddArg("player")
		:AddArg("number", {hint = "damage", round = true, optional = true, min = 0, default = 0})

		:Help("slap_help")

		:OnExecute(function(ply, targets, damage)
			for i = 1, #targets do
				slap(targets[i], damage, ply)
			end

			if damage > 0 then
				sam.player.send_message(nil, "slap_damage", {
					A = ply, T = targets, V = damage
				})
			else
				sam.player.send_message(nil, "slap", {
					A = ply, T = targets
				})
			end
		end)
	:End()
end

command.new("slay")
	:SetPermission("slay", "admin")

	:AddArg("player")

	:Help("slay_help")

	:OnExecute(function(ply, targets)
		for i = 1, #targets do
			local v = targets[i]
			if not v:sam_get_exclusive(ply) then
				v:Kill()
			end
		end

		sam.player.send_message(nil, "slay", {
			A = ply, T = targets
		})
	end)
:End()

command.new("hp")
	:Aliases("sethp", "health", "sethealth")

	:SetPermission("hp", "admin")

	:AddArg("player")
	:AddArg("number", {hint = "amount", min = 1, max = 2147483647, round = true, optional = true, default = 100})

	:Help("hp_help")

	:OnExecute(function(ply, targets, amount)
		for i = 1, #targets do
			targets[i]:SetHealth(amount)
		end

		sam.player.send_message(nil, "set_hp", {
			A = ply, T = targets, V = amount
		})
	end)
:End()

command.new("armor")
	:Aliases("setarmor")

	:SetPermission("armor", "admin")

	:AddArg("player")
	:AddArg("number", {hint = "amount", min = 1, max = 2147483647, round = true, optional = true, default = 100})

	:Help("armor_help")

	:OnExecute(function(ply, targets, amount)
		for i = 1, #targets do
			targets[i]:SetArmor(amount)
		end

		sam.player.send_message(nil, "set_armor", {
			A = ply, T = targets, V = amount
		})
	end)
:End()

command.new("ignite")
	:SetPermission("ignite", "admin")

	:AddArg("player")
	:AddArg("number", {hint = "seconds", optional = true, default = 60, round = true})

	:Help("ignite_help")

	:OnExecute(function(ply, targets, length)
		for i = 1, #targets do
			local target = targets[i]

			if target:IsOnFire() then
				target:Extinguish()
			end

			target:Ignite(length)
		end

		sam.player.send_message(nil, "ignite", {
			A = ply, T = targets, V = length
		})
	end)
:End()

command.new("unignite")
	:Aliases("extinguish")

	:SetPermission("ignite", "admin")

	:AddArg("player", {optional = true})

	:Help("unignite_help")

	:OnExecute(function(ply, targets)
		for i = 1, #targets do
			targets[i]:Extinguish()
		end

		sam.player.send_message(nil, "unignite", {
			A = ply, T = targets
		})
	end)
:End()

command.new("god")
	:Aliases("invincible")

	:SetPermission("god", "admin")

	:AddArg("player", {optional = true})

	:Help("god_help")

	:OnExecute(function(ply, targets)
		for i = 1, #targets do
			local target = targets[i]
			target:GodEnable()
			target.sam_has_god_mode = true
		end

		sam.player.send_message(nil, "god", {
			A = ply, T = targets
		})
	end)
:End()

command.new("ungod")
	:Aliases("uninvincible")

	:SetPermission("ungod", "admin")

	:AddArg("player", {optional = true})

	:Help("ungod_help")

	:OnExecute(function(ply, targets)
		for i = 1, #targets do
			local target = targets[i]
			target:GodDisable()
			target.sam_has_god_mode = nil
		end

		sam.player.send_message(nil, "ungod", {
			A = ply, T = targets
		})
	end)
:End()

do
	command.new("freeze")
		:SetPermission("freeze", "admin")

		:AddArg("player")

		:Help("freeze_help")

		:OnExecute(function(ply, targets)
			for i = 1, #targets do
				local v = targets[i]
				v:ExitVehicle()
				if v:sam_get_nwvar("frozen") then
					v:UnLock()
				end
				v:Lock()
				v:sam_set_nwvar("frozen", true)
				v:sam_set_exclusive("frozen")
			end

			sam.player.send_message(nil, "freeze", {
				A = ply, T = targets
			})
		end)
	:End()

	command.new("unfreeze")
		:SetPermission("unfreeze", "admin")

		:AddArg("player", {optional = true})

		:Help("unfreeze_help")

		:OnExecute(function(ply, targets)
			for i = 1, #targets do
				local v = targets[i]
				v:UnLock()
				v:sam_set_nwvar("frozen", false)
				v:sam_set_exclusive(nil)
			end

			sam.player.send_message(nil, "unfreeze", {
				A = ply, T = targets
			})
		end)
	:End()

	local disallow = function(ply)
		if ply:sam_get_nwvar("frozen") then
			return false
		end
	end

	for _, v in ipairs({"SAM.CanPlayerSpawn", "CanPlayerSuicide", "CanTool"}) do
		hook.Add(v, "SAM.FreezePlayer." .. v, disallow)
	end
end

command.new("cloak")
	:SetPermission("cloak", "admin")

	:AddArg("player", {optional = true})

	:Help("cloak_help")

	:OnExecute(function(ply, targets)
		for i = 1, #targets do
			targets[i]:sam_cloak()
		end

		sam.player.send_message(nil, "cloak", {
			A = ply, T = targets
		})
	end)
:End()

command.new("uncloak")
	:SetPermission("uncloak", "admin")

	:AddArg("player", {optional = true})

	:Help("uncloak_help")

	:OnExecute(function(ply, targets)
		for i = 1, #targets do
			targets[i]:sam_uncloak()
		end

		sam.player.send_message(nil, "uncloak", {
			A = ply, T = targets
		})
	end)
:End()

do
	local jail_props = {
		Vector(0, 0, -5), Angle(90, 0, 0);
		Vector(0, 0, 97), Angle(90, 0, 0);

		Vector(21, 31, 46), Angle(0, 90, 0);
		Vector(21, -31, 46), Angle(0, 90, 0);
		Vector(-21, 31, 46), Angle(0, 90, 0);
		Vector(-21, -31, 46), Angle(0, 90, 0);

		Vector(-52, 0, 46), Angle(0, 0, 0);
		Vector(52, 0, 46), Angle(0, 0, 0)
	}

	local remove_jail = function(ply_jail_props)
		for _, jail_prop in ipairs(ply_jail_props) do
			if IsValid(jail_prop) then
				jail_prop:Remove()
			end
		end
	end

	local unjail = function(ply)
		if not IsValid(ply) then return end
		if not ply:sam_get_nwvar("jailed") then return end

		remove_jail(ply.sam_jail_props)

		ply.sam_jail_props = nil
		ply.sam_jail_pos = nil

		ply:sam_set_nwvar("jailed", nil)
		ply:sam_set_exclusive(nil)

		timer.Remove("SAM.Unjail." .. ply:SteamID())
		timer.Remove("SAM.Jail.Watch." .. ply:SteamID())
	end

	local return_false = function()
		return false
	end

	local function jail(ply, time)
		if not IsValid(ply) then return end
		if not isnumber(time) or time < 0 then
			time = 0
		end

		if ply:sam_get_nwvar("frozen") then
			RunConsoleCommand("sam", "unfreeze", "#" .. ply:EntIndex())
		end

		if not ply:sam_get_nwvar("jailed") or (not ply.sam_jail_props or not IsValid(ply.sam_jail_props[1])) then
			ply:ExitVehicle()
			ply:SetMoveType(MOVETYPE_WALK)

			ply.sam_jail_pos = ply:GetPos()

			ply:sam_set_nwvar("jailed", true)
			ply:sam_set_exclusive("in jail")

			if ply.sam_jail_props then
				for k, v in ipairs(ply.sam_jail_props) do
					if IsValid(v) then
						v:Remove()
					end
				end
			end

			local ply_jail_props = {}
			for i = 1, #jail_props, 2 do
				local jail_prop = ents.Create("prop_physics")
				jail_prop:SetModel("models/props_building_details/Storefront_Template001a_Bars.mdl")
				jail_prop:SetPos(ply.sam_jail_pos + jail_props[i])
				jail_prop:SetAngles(jail_props[i + 1])
				jail_prop:SetMoveType(MOVETYPE_NONE)
				jail_prop:Spawn()
				jail_prop:GetPhysicsObject():EnableMotion(false)
				jail_prop.CanTool = return_false
				jail_prop.PhysgunPickup = return_false
				jail_prop.jailWall = true
				table.insert(ply_jail_props, jail_prop)
			end
			ply.sam_jail_props = ply_jail_props
		end

		local steamid = ply:SteamID()

		if time == 0 then
			timer.Remove("SAM.Unjail." .. steamid)
		else
			timer.Create("SAM.Unjail." .. steamid, time, 1, function()
				if IsValid(ply) then
					unjail(ply)
				end
			end)
		end

		timer.Create("SAM.Jail.Watch." .. steamid, 1, 0, function()
			if not IsValid(ply) then
				return timer.Remove("SAM.Jail.Watch." .. steamid)
			end

			if ply:GetPos():DistToSqr(ply.sam_jail_pos) > 4900 then
				ply:SetPos(ply.sam_jail_pos)
			end

			if not IsValid(ply.sam_jail_props[1]) then
				jail(ply, timer.TimeLeft("SAM.Unjail." .. steamid) or 0)
			end
		end)
	end

	command.new("jail")
		:SetPermission("jail", "admin")

		:AddArg("player")
		:AddArg("length", {optional = true, default = 0, min = 0})
		:AddArg("text", {hint = "reason", optional = true, default = sam.language.get("default_reason")})

		:GetRestArgs()

		:Help("jail_help")

		:OnExecute(function(ply, targets, length, reason)
			for i = 1, #targets do
				jail(targets[i], length * 60)
			end

			sam.player.send_message(nil, "jail", {
				A = ply, T = targets, V = sam.format_length(length), V_2 = reason
			})
		end)
	:End()

	command.new("unjail")
		:SetPermission("unjail", "admin")

		:AddArg("player", {optional = true})

		:Help("unjail_help")

		:OnExecute(function(ply, targets)
			for i = 1, #targets do
				unjail(targets[i])
			end

			sam.player.send_message(nil, "unjail", {
				A = ply, T = targets
			})
		end)
	:End()

	sam.hook_first("CanProperty", "SAM.Jail", function(_, property, ent)
		if ent.jailWall and property == "remover" then
			return false
		end
	end)

	if SERVER then
		hook.Add("PlayerSpawn", "SAM.Jail", function(ply)
			if ply:sam_get_nwvar("jailed") or ply:sam_get_pdata("jailed") then
				if ply.sam_jail_pos then
					ply:SetPos(ply.sam_jail_pos)
				else
					ply:SetPos(ply:sam_get_pdata("jail_pos"))
					jail(ply, ply:sam_get_pdata("jail_time_left"))

					ply:sam_set_pdata("jailed", nil)
					ply:sam_set_pdata("jail_pos", nil)
					ply:sam_set_pdata("jail_time_left", nil)
				end
			end
		end)

		hook.Add("PlayerEnteredVehicle", "SAM.Jail", function(ply)
			if ply:sam_get_nwvar("jailed") then
				ply:ExitVehicle()
			end
		end)

		hook.Add("PlayerDisconnected", "SAM.Jail", function(ply)
			if ply:sam_get_nwvar("jailed") then
				remove_jail(ply.sam_jail_props)

				ply:sam_set_pdata("jailed", true)
				ply:sam_set_pdata("jail_pos", ply.sam_jail_pos)
				ply:sam_set_pdata("jail_time_left", timer.TimeLeft("SAM.Unjail." .. ply:SteamID()) or 0)

				timer.Remove("SAM.Unjail." .. ply:SteamID())
				timer.Remove("SAM.Jail.Watch." .. ply:SteamID())
			end
		end)
	end

	local disallow = function(ply)
		if ply:sam_get_nwvar("jailed") then
			return false
		end
	end

	for _, v in ipairs({"PlayerNoClip", "SAM.CanPlayerSpawn", "CanPlayerEnterVehicle", "CanPlayerSuicide", "CanTool"}) do
		hook.Add(v, "SAM.Jail", disallow)
	end
end

command.new("strip")
	:SetPermission("strip", "admin")

	:AddArg("player")

	:Help("strip_help")

	:OnExecute(function(ply, targets)
		for i = 1, #targets do
			targets[i]:StripWeapons()
		end

		sam.player.send_message(nil, "strip", {
			A = ply, T = targets
		})
	end)
:End()

command.new("respawn")
	:SetPermission("respawn", "admin")

	:AddArg("player", {optional = true})

	:Help("respawn_help")

	:OnExecute(function(ply, targets)
		local target = targets[1]
		if target.respawnkorumasi then 
			ply:ChatPrint("Bu kişiye restart atmadan 10 saniye bekleyin.")
			return 
		end 
			target.respawnkorumasi = true 
			timer.Simple(10, function()
			if IsValid(target) then 
				target.respawnkorumasi = nil
			end 
			end)
			target:Spawn()
	

		sam.player.send_message(nil, "respawn", {
			A = ply, T = targets
		})
	end)
:End()

command.new("setmodel")
	:SetPermission("setmodel", "superadmin")

	:AddArg("player")
	:AddArg("text", {hint = "model"})

	:Help("setmodel_help")

	:OnExecute(function(ply, targets, model)
		for i = 1, #targets do
			targets[i]:SetModel(model)
		end

		sam.player.send_message(nil, "setmodel", {
			A = ply, T = targets, V = model
		})
	end)
:End()

command.new("giveammo")
	:Aliases("ammo")

	:SetPermission("giveammo", "superadmin")

	:AddArg("player")
	:AddArg("number", {hint = "amount", min = 0, max = 99999})

	:Help("giveammo_help")

	:OnExecute(function(ply, targets, amount)
		if amount == 0 then
			amount = 99999
		end

		for i = 1, #targets do
			local target = targets[i]
			for _, wep in ipairs(target:GetWeapons()) do
				if wep:GetPrimaryAmmoType() ~= -1 then
					target:GiveAmmo(amount, wep:GetPrimaryAmmoType(), true)
				end

				if wep:GetSecondaryAmmoType() ~= -1 then
					target:GiveAmmo(amount, wep:GetSecondaryAmmoType(), true)
				end
			end
		end

		sam.player.send_message(nil, "giveammo", {
			A = ply, T = targets, V = amount
		})
	end)
:End()

do
	command.new("scale")
		:SetPermission("scale", "superadmin")

		:AddArg("player")
		:AddArg("number", {hint = "amount", optional = true, min = 0, max = 2.5, default = 1})

		:Help("scale_help")

		:OnExecute(function(ply, targets, amount)
			for i = 1, #targets do
				local v = targets[i]
				v:SetModelScale(amount)

				-- https://github.com/carz1175/More-ULX-Commands/blob/9b142ee4247a84f16e2dc2ec71c879ab76e145d4/lua/ulx/modules/sh/extended.lua#L313
				v:SetViewOffset(Vector(0, 0, 64 * amount))
				v:SetViewOffsetDucked(Vector(0, 0, 28 * amount))

				v.sam_scaled = true
			end

			sam.player.send_message(nil, "scale", {
				A = ply, T = targets, V = amount
			})
		end)
	:End()

	hook.Add("PlayerSpawn", "SAM.Scale", function(ply)
		if ply.sam_scaled then
			ply.sam_scaled = nil
			ply:SetViewOffset(Vector(0, 0, 64))
			ply:SetViewOffsetDucked(Vector(0, 0, 28))
		end
	end)
end

sam.command.new("freezeprops")
	:SetPermission("freezeprops", "admin")
	:Help("freezeprops_help")

	:OnExecute(function(ply)
		for _, prop in ipairs(ents.FindByClass("prop_physics")) do
			local physics_obj = prop:GetPhysicsObject()
			if IsValid(physics_obj) then
				physics_obj:EnableMotion(false)
			end
		end

		sam.player.send_message(nil, "freezeprops", {
			A = ply
		})
	end)
:End()
--addons/sam-159/lua/sam/reports/cl_reports.lua:
return gluapack()()
--addons/sam-159/lua/sam/cl_adverts.lua:
return gluapack()()
--addons/sam-159/lua/sam/cl_adverts.lua:
if SAM_LOADED then return end

local sam = sam
local config = sam.config

local times = {}

local entry_OnValueChange = function(s)
	s:SetTall(s:GetNumLines() * (sam.SUI.Scale(16) --[[font size]] + 1) + 1 + 2)
end

local entry_OnEnter = function(s)
	local ads = config.get("Adverts", {})
	local txt = s:GetText()
	if txt == "" then
		s:Remove()
		if s.i then
			table.remove(ads, s.i)
		end
	else
		if txt == s.ad then return end
		ads[s.i] = txt
		s.ad = txt
	end
	config.set("Adverts", ads, true)
end

local entry_OnKeyCodeTyped = function(s, code)
	if code == KEY_ENTER then
		s:old_OnKeyCodeTyped(code)
		return true
	else
		return s:old_OnKeyCodeTyped(code)
	end
end

config.add_menu_setting("Adverts", function(body)
	local adverts_body

	local adverts = body:Add("SAM.LabelPanel")
	adverts:Dock(TOP)
	adverts:DockMargin(8, 6, 8, 0)
	adverts:SetLabel("Adverts\n- Random adverts print every 60 seconds\n- Timed adverts can be done like this: {1m} This advert prints every 1 minute")

	local add_advert = adverts:Add("SAM.Button")
	add_advert:SetText("+")
	add_advert:SetSize(25, 25)

	local zpos = 0
	local add_func = function(ad, ad_i)
		zpos = zpos + 1

		local entry = adverts_body:Add("SAM.TextEntry")
		entry:SetPlaceholder("")
		entry:SetMultiline(true)
		entry:SetNoBar(true)
		entry:Dock(TOP)
		entry:DockMargin(8, 6, 8, 0)
		entry:SetZPos(zpos)
		entry.ad = ad
		entry.no_scale = true

		if not sam.ispanel(ad) then
			entry.i = ad_i
			entry:SetValue(ad)
		else
			entry.i = #config.get("Adverts", {}) + 1
		end

		entry.OnValueChange = entry_OnValueChange
		entry.OnEnter = entry_OnEnter
		entry.old_OnKeyCodeTyped = entry.OnKeyCodeTyped
		entry.OnKeyCodeTyped = entry_OnKeyCodeTyped
	end
	add_advert:On("DoClick", add_func)

	adverts_body = body:Add("Panel")
	adverts_body:Dock(TOP)

	function adverts_body:PerformLayout(w, h)
		for k, v in ipairs(self:GetChildren()) do
			entry_OnValueChange(v)
		end
		self:SizeToChildren(false, true)
	end

	sam.config.hook({"Adverts"}, function()
		if not IsValid(adverts_body) then return end
		adverts_body:Clear()

		for k, v in ipairs(config.get("Adverts", {})) do
			add_func(v, k)
		end
	end)
end)

local random = {}

timer.Create("SAM.Advert.RandomAdverts", 60, 0, function()
	local ad = random[math.random(1, #random)]
	if not ad then return end
	sam.player.send_message(nil, ad)
end)

sam.config.hook({"Adverts"}, function()
	for i = #times, 1, -1 do
		times[i] = nil
		timer.Remove("SAM.Adverts." .. i)
	end

	random = {}
	for k, v in ipairs(config.get("Adverts", {})) do
		if v:sub(1, 1) == "{" then
			local time, message = v:match("(%b{}) *(.*)")
			time = sam.parse_length(time)
			if time then
				timer.Create("SAM.Adverts." .. table.insert(times, true), time * 60, 0, function()
					sam.player.send_message(nil, message)
				end)
			else
				table.insert(random, v)
			end
		else
			table.insert(random, v)
		end
	end
end)

--addons/sui/lua/sui/vgui/sui_combobox.lua:
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name

local TEXT_FONT = SUI.CreateFont("ComboBox", "Roboto Regular", 16)

local GetColor = SUI.GetColor
local draw_material = sui.draw_material

local PANEL = {}

PANEL.NoOverrideClear = true

sui.scaling_functions(PANEL)

function PANEL:Init()
	self:ScaleInit()
	self.DropButton:Remove()
	self:SetFont(TEXT_FONT)
	self:SetSize(34, 22)
	self:SetIsMenu(true)

	local image = self:Add(NAME .. ".Image")
	image:Dock(FILL)
	image:SetImage("https://raw.githubusercontent.com/Srlion/Addons-Data/main/icons/sui/arrow.png")
	image.Draw = self.Paint
end

function PANEL:OpenMenu(pControlOpener)
	if pControlOpener and pControlOpener == self.TextEntry then return end
	if #self.Choices == 0 then return end

	if IsValid(self.Menu) then
		self.Menu:Remove()
		self.Menu = nil
	end

	self.Menu = vgui.Create(NAME .. ".Menu", self)
	self.Menu:SetInternal(self)

	for k, v in ipairs(self.Choices) do
		self.Menu:AddOption(v, function()
			self:ChooseOption(v, k)
		end)
	end

	local x, y = self:LocalToScreen(0, self:GetTall())
	self.Menu:SetMinimumWidth(self:GetWide())
	self.Menu:Open(x, y, false, self)
end

function PANEL:Paint(w, h, from_image)
	local text_color = GetColor("menu_option_hover_text")

	if from_image then
		local size = SUI.ScaleEven(10)
		draw_material(nil, w - (size / 2) - 6, h / 2, size, text_color)
	else
		local col = GetColor("menu")
		self:RoundedBox("Background", 4, 0, 0, w, h, col)
		self:SetTextColor(text_color)
	end
end

function PANEL:PerformLayout()
end

sui.register("ComboBox", PANEL, "DComboBox")
--addons/sui/lua/sui/vgui/sui_number_slider.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_scroll_panel.lua:
local math = math
local table = table

local pairs = pairs

local TDLib = sui.TDLib
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name
local RoundedBox = sui.TDLib.LibClasses.RoundedBox

local Panel = {}

AccessorFunc(Panel, "m_bFromBottom", "FromBottom", FORCE_BOOL)
AccessorFunc(Panel, "m_bVBarPadding", "VBarPadding", FORCE_NUMBER)

Panel:SetVBarPadding(0)

Panel.NoOverrideClear = true

-- VBar
local starting_scroll_speed = 3

local vbar_OnMouseWheeled = function(s, delta)
	s.scroll_speed = s.scroll_speed + 20 * 0.012 --[[ slowly increase scroll speed ]]
	s:AddScroll(delta * -s.scroll_speed)
end

-- default set scroll clamps amount
local vbar_SetScroll = function(s, amount)
	if not s.Enabled then s.Scroll = 0 return end

	s.scroll_target = amount
	s:InvalidateLayout()
end

-- ¯\_(ツ)_/¯ https://github.com/Facepunch/garrysmod/blob/cd3d894288b847e3d081570129963d4089e36261/garrysmod/lua/vgui/dvscrollbar.lua#L234
local vbar_OnCursorMoved = function(s, _, y)
	if s.Dragging then
		y = y - s.HoldPos
		y = y / (s:GetTall() - s:GetWide() * 2 - s.btnGrip:GetTall())
		s.scroll_target = y * s.CanvasSize
	end
end

local vbar_Think = function(s)
	local frame_time = RealFrameTime() * 17
	local scroll_target = s.scroll_target

	s.Scroll = Lerp(frame_time, s.Scroll, scroll_target)

	if not s.Dragging then
		s.scroll_target = Lerp(frame_time, scroll_target, math.Clamp(scroll_target, 0, s.CanvasSize))
	end

	-- now start slowing it down!!!
	s.scroll_speed = Lerp(frame_time / 10, s.scroll_speed, starting_scroll_speed)
end

local vbar_Paint = function(s, w, h)
	TDLib.RoundedBox(s.vertices, 3, 0, 0, w, h, SUI.GetColor("scroll"))
end

local vbarGrip_Paint = function(s, w, h)
	TDLib.RoundedBox(s.vertices, 3, 0, 0, w, h, SUI.GetColor("scroll_grip"))
end

local vbar_PerformLayout = function(s, w, h)
	local scroll = s:GetScroll() / s.CanvasSize
	local bar_size = math.max(s:BarScale() * h, 10)

	local track = (h - bar_size) + 1
	scroll = scroll * track

	s.btnGrip.y = scroll
	s.btnGrip:SetSize(w, bar_size)
end
--

function Panel:Init()
	local canvas = self:GetCanvas()
	canvas:SUI_TDLib()

	local children = {}
	function canvas:OnChildAdded(child)
		table.insert(children, child)
	end
	function canvas:OnChildRemoved(child)
		for i = 1, #children do
			local v = children[i]
			if v == child then
				table.remove(children, i)
				return
			end
		end
	end
	canvas.GetChildren = function()
		return children
	end
	canvas.children = children

	local vbar = self.VBar
	vbar:SetHideButtons(true)
	vbar.btnUp:SetVisible(false)
	vbar.btnDown:SetVisible(false)

	vbar.vertices = {}
	vbar.scroll_target = 0
	vbar.scroll_speed = starting_scroll_speed

	vbar.OnMouseWheeled = vbar_OnMouseWheeled
	vbar.SetScroll = vbar_SetScroll
	vbar.OnCursorMoved = vbar_OnCursorMoved
	vbar.Think = vbar_Think
	vbar.Paint = vbar_Paint
	vbar.PerformLayout = vbar_PerformLayout

	vbar.btnGrip.vertices = {}
	vbar.btnGrip.Paint = vbarGrip_Paint

	self:ScaleChanged()
	SUI.OnScaleChanged(self, self.ScaleChanged)
end

function Panel:OnChildAdded(child)
	self:AddItem(child)
	self:ChildAdded(child)
end

function Panel:ChildAdded()
end

function Panel:ScaleChanged()
	local w = SUI.Scale(4)

	self.VBar:SetWide(w)
	self.VBar.btnDown:SetSize(w, 0)
	self.VBar.btnUp:SetSize(w, 0)
end

function Panel:Paint(w, h)
	local outline = SUI.GetColor("scroll_panel_outline")
	if outline then
		TDLib.DrawOutlinedBox(3, 0, 0, w, h, SUI.GetColor("scroll_panel"), outline, 1)
	else
		RoundedBox(self, "Background", 3, 0, 0, w, h, SUI.GetColor("scroll_panel"))
	end
end

function Panel:ScrollToBottom()
	local vbar = self.VBar
	for k, anim in pairs(vbar.m_AnimList or {}) do
		anim:Think(vbar, 1)
		vbar.m_AnimList[k] = nil
	end

	self:InvalidateParent(true)
	self:InvalidateChildren(true)

	vbar:SetScroll(vbar.CanvasSize)
end

function Panel:PerformLayoutInternal(w, h)
	w = w or self:GetWide()
	h = h or self:GetTall()

	local canvas = self.pnlCanvas

	self:Rebuild()

	local vbar = self.VBar
	vbar:SetUp(h, canvas:GetTall())

	if vbar.Enabled then
		w = w - vbar:GetWide() - self.m_bVBarPadding
	end

	canvas:SetWide(w)

	self:Rebuild()
end

function Panel:Think()
	local canvas = self.pnlCanvas

	local vbar = self.VBar
	if vbar.Enabled then
		canvas.y = -vbar.Scroll
	else
		if self:GetFromBottom() then
			canvas._y = Lerp(10 * RealFrameTime(), canvas._y or canvas.y, self:GetTall() - canvas:GetTall())
		else
			canvas._y = Lerp(10 * RealFrameTime(), canvas._y or canvas.y, -vbar.Scroll)
		end
		canvas.y = canvas._y
	end
end

sui.register("ScrollPanel", Panel, "DScrollPanel")

--addons/sui/lua/sui/vgui/sui_zcollapse_category.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_zcollapse_category.lua:
local sui = sui

local draw_material = sui.draw_material

local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name

local GetColor = SUI.GetColor

local RoundedBox = sui.TDLib.LibClasses.RoundedBox
local TextColor = sui.TDLib.LibClasses.TextColor

local TABS_FONT = SUI.CreateFont("CategoryListTabs", "Roboto Bold", 13)
local ITEMS_FONT = SUI.CreateFont("CategoryListItems", "Roboto Medium", 14)

local Panel = {}

local item_OnRemove = function(s)
	local parent = s.parent

	local items = parent.items
	for k, v in ipairs(items) do
		if v == s then
			table.remove(items, k)
			break
		end
	end

	if #items == 0 then
		local category = s.category
		category:Remove()
		parent.categories[category.name] = nil
	end
end

local item_DoClick = function(s)
	local parent = s.parent
	parent:select_item(s)
end

function Panel:Init()
	local categories = {}
	local items = {}

	self.categories = categories
	self.items = items

	self:SetVBarPadding(1)

	local get_category = function(name)
		local category = categories[name]
		if category then return category end

		local expanded = false

		category = self:Add("Panel")
		category:Dock(TOP)
		category:DockMargin(0, 0, 0, 3)
		category.name = name

		local header = category:Add("DButton")
		header:Dock(TOP)
		header:DockMargin(0, 0, 0, 3)
		header:SetFont(TABS_FONT)
		header:SetContentAlignment(4)
		header:SetTextInset(6, 0)
		header:SetText(name)
		header:SizeToContentsY(SUI.Scale(14))

		local cur_col
		local cur_col_text = Color(GetColor("collapse_category_header_text"):Unpack())
		function header:Paint(w, h)
			if expanded then
				cur_col = GetColor("collapse_category_header_active")
				cur_col_text = GetColor("collapse_category_header_text_active")
			elseif self.Hovered then
				cur_col = GetColor("collapse_category_header_hover")
				cur_col_text = GetColor("collapse_category_header_text_hover")
			else
				cur_col = GetColor("collapse_category_header")
				cur_col_text = GetColor("collapse_category_header_text")
			end

			RoundedBox(self, "Background", 3, 0, 0, w, h, cur_col)
			TextColor(self, cur_col_text)
		end

		local image = header:Add(NAME .. ".Image")
		image:Dock(FILL)
		image:SetImage("https://raw.githubusercontent.com/Srlion/Addons-Data/main/icons/sui/arrow.png")

		function image:Draw(w, h)
			local size = SUI.ScaleEven(10)
			draw_material(nil, w - (size / 2) - 6, h / 2, size, cur_col_text, expanded and 180)
		end

		local current_h
		function category.RefreshHeight()
			local h
			if expanded then
				local _
				_, h = category:ChildrenSize()
				if self.searching and h == header:GetTall() then
					h = 0
				end
			else
				h = header:GetTall()
			end

			if current_h == h then return end

			if h > 0 then
				category:SetVisible(true)
			end

			current_h = h

			category:Stop()
			category:SizeTo(-1, h, 0.2, 0, -1, function()
				if h == 0 then
					category:SetVisible(false)
				end
			end)
		end

		function category.SetExpanded(_, set_expanded)
			if expanded == set_expanded then return end

			if sam.isbool(set_expanded) then
				expanded = set_expanded
			else
				expanded = not expanded
			end

			category.RefreshHeight()

			if expanded then
				self:OnCategoryExpanded(category)
			end

			self:InvalidateLayout(true)
		end
		header.DoClick = category.SetExpanded

		category:SetTall(header:GetTall())
		categories[name] = category

		return category
	end

	function self:add_item(name, category_name)
		local category = get_category(category_name)

		local item = category:Add("DButton")
		item:Dock(TOP)
		item:DockMargin(0, 0, 0, 3)
		item:SetFont(ITEMS_FONT)
		item:SetText(name)
		item:SizeToContentsY(SUI.Scale(3 * 2))
		item.name = name
		item.parent = self
		item.category = category

		local cur_col
		local cur_col_text = Color(GetColor("collapse_category_item_text"):Unpack())
		function item:Paint(w, h)
			if self.selected then
				cur_col = GetColor("collapse_category_item_active")
				cur_col_text = GetColor("collapse_category_item_text_active")
			elseif self.Hovered then
				cur_col = GetColor("collapse_category_item_hover")
				cur_col_text = GetColor("collapse_category_item_text_hover")
			else
				cur_col = GetColor("collapse_category_item")
				cur_col_text = GetColor("collapse_category_item_text")
			end

			RoundedBox(self, "Background", 4, 0, 0, w, h, cur_col)
			TextColor(self, cur_col_text)
		end

		item.DoClick = item_DoClick
		item.OnRemove = item_OnRemove

		table.insert(items, item)

		return item
	end
end

function Panel:OnCategoryExpanded(category)
end

function Panel:select_item(item)
	if self.selected_item ~= item then
		if IsValid(self.selected_item) then
			self.selected_item.selected = false
		end
		item.selected = true
		self.selected_item = item
		self:item_selected(item)
	end
end

function Panel:item_selected()
end

function Panel:Search(text, names)
	local items = self.items
	self.searching = true
	for i = 1, #items do
		local item = items[i]
		local category = item.category
		category:SetExpanded(true)

		if not names then
			if item.name:find(text, nil, true) then
				item:SetVisible(true)
			else
				item:SetVisible(false)
			end
		else
			local found = false
			for _, name in ipairs(item.names) do
				if name:find(text, nil, true) then
					found = true
					item:SetVisible(true)
				end
			end
			if not found then
				item:SetVisible(false)
			end
		end

		if text == "" then
			category:SetExpanded(false)
		end

		category:RefreshHeight()
		category:InvalidateLayout(true)
	end
	self.searching = false
end

sui.register("CollapseCategory", Panel, NAME .. ".ScrollPanel")
--addons/scb-29/lua/scb/settings/tabs/tags.lua:
if SCB_LOADED then return end

local scb = scb
local SUI = scb.SUI
local language = scb.language

scb.tags = scb.tags or {}

net.Receive("SCB.SendTags", function()
	local tags = net.ReadData(net.ReadUInt(17))
	tags = util.Decompress(tags)
	scb.tags = scb.mp.unpack(tags)
end)

net.Receive("SCB.AddTag", function()
	local key = net.ReadString()
	local tag = net.ReadString()
	scb.tags[key] = tag

	local old = net.ReadString()

	if old ~= "" then
		scb.tags[old] = nil
	end

	hook.Call("SCB.TagsModified")
end)

net.Receive("SCB.RemoveTag", function()
	scb.tags[net.ReadString()] = nil
	hook.Call("SCB.TagsModified")
end)

local tags_menu = function(title, key, key_tag)
	key = key or ""

	local options = sui.valid_options()

	local querybox = vgui.Create("SCB.QueryBox")
	querybox:SetTitle(title)
	querybox:SetWide(300)

	local name = querybox:Add("SCB.TextEntry")
	name:Dock(TOP)
	name:SetPlaceholder(language.tag_owner)
	name:SetValue(key)

	name:SetCheck(function(_name)
		if _name == "" or (scb.tags[_name] and key ~= _name) then
			return false
		end
	end)

	options.Add(name)

	local tag = querybox:Add("SCB.TextEntry")
	tag:Dock(TOP)
	tag:DockMargin(0, 4, 0, 0)
	tag:SetPlaceholder(language.tag)
	tag:SetValue(key_tag or "")

	tag:SetCheck(function(_tag)
		return _tag ~= ""
	end)

	options.Add(tag)

	local preview = querybox:Add("SCB.ChatLine")
	preview:DockMargin(0, 6, 0, 0)
	preview.x = 3
	preview.emoji_size = 18

	preview:ScaleChanged()
	preview:Parse(tag:GetValue())
	preview:SetMouseInputEnabled(false)

	tag:On("OnValueChange", function(s, v)
		preview.added = {}
		preview:ScaleChanged()
		preview:Parse(v)
		querybox:size_to_children()
	end)

	querybox:SetCallback(function()
		net.Start("SCB.AddTag")
			net.WriteString(name:GetText())
			net.WriteString(tag:GetText())
			net.WriteString(name:GetText() ~= key and key or "")
		net.SendToServer()
	end)

	querybox:Done()
	querybox.save:SetEnabled(true)

	function querybox.save:Think()
		self:SetEnabled(options.IsValid())
	end
end

return {
	title = language.tags_title,
	pos = 2,
	func = function(parent)
		local body = parent:Add("Panel")
		body:Dock(FILL)
		body:DockMargin(0, 1, 0, 0)
		body:InvalidateParent(true)

		SUI.OnScaleChanged(body, function()
			body:Remove()
		end)

		local tags_list = body:Add("SCB.ThreeGrid")
		tags_list:Dock(FILL)
		tags_list:InvalidateLayout(true)
		tags_list:InvalidateParent(true)

		tags_list:SetColumns(2)
		tags_list:SetHorizontalMargin(2)
		tags_list:SetVerticalMargin(2)

		local load_tags = function()
			tags_list:Clear()

			for key, tag in SortedPairs(scb.tags) do
				local pnl = vgui.Create("DButton")
				pnl:SetText("")
				pnl:SetTall(SUI.Scale(560))
				pnl:SUI_TDLib()
					:ClearPaint()
					:FadeHover()

				function pnl:DoClick()
					tags_menu(language.edit .. " '" .. key .. "'", key, tag)
				end

				function pnl:DoRightClick()
					local d_menu = DermaMenu()

					d_menu:AddOption(language.remove, function()
						net.Start("SCB.RemoveTag")
							net.WriteString(key)
						net.SendToServer()
					end)

					d_menu:Open()
					d_menu:MakePopup()

					function pnl:OnRemove()
						d_menu:Remove()
					end
				end
				tags_list:AddCell(pnl)

				local name = pnl:Add("SCB.Label")
				name:Dock(TOP)
				name:SetFont(SCB_16)
				name:SetText(key)
				name:SetTextInset(3, 0)
				name:SetExpensiveShadow(1, color_black)
				name:SizeToContentsY(3)

				local _tag = pnl:Add("SCB.ChatLine")
				_tag:DockMargin(3, 0, 0, 0)
				_tag:SetFont(SCB_16)

				_tag.emoji_size = 16
				_tag:Parse(tag)
				_tag:SetMouseInputEnabled(false)

				pnl:SizeToChildren(false, true)
			end

			for k, v in ipairs(tags_list.Rows) do
				tags_list:CalculateRowHeight(v)
			end
		end
		load_tags()

		hook.Add("SCB.TagsModified", tags_list, load_tags)

		local add = body:Add("SCB.Button")
		add:Dock(BOTTOM)
		add:DockMargin(0, 4, 0, 0)
		add:SetText(language.add_tag:upper())

		add:On("DoClick", function()
			tags_menu(language.add_tag)
		end)

		return body
	end
}
--addons/scb-29/lua/scb/cl_overrides.lua:
return gluapack()()
--addons/scb-29/lua/scb/vgui/scb_emojis_select.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/autorun/sh_glorifiedhandcuffs_autoincluder.lua:
return gluapack()()
--addons/oneprint/lua/autorun/sh_oneprint_load.lua:
OnePrint = OnePrint or {}

local tLoad = {
    sh = function( sFilePath )
        if SERVER then
            AddCSLuaFile( "oneprint/" .. sFilePath )
            include( "oneprint/" .. sFilePath )
        end
        if CLIENT then
            include( "oneprint/" .. sFilePath )
        end
    end,
    sv = function( sFilePath )
        if SERVER then
            include( "oneprint/" .. sFilePath )
        end
    end,
    cl = function( sFilePath )
        if SERVER then
            AddCSLuaFile( "oneprint/" .. sFilePath )
        end
        if CLIENT then
            include( "oneprint/" .. sFilePath )
        end
    end
}

--[[

    loadTabs

]]--

local function loadTabs()
    local tFiles, _ = file.Find( "oneprint/client/vgui/tabs/*", "LUA")

    if ( #tFiles >= 1 ) then
        for k, v in pairs( tFiles ) do
            tLoad.cl( "client/vgui/tabs/" .. v )
        end
    end
end

--[[

    OnGamemodeLoaded

]]--

hook.Add( "OnGamemodeLoaded", "OnePrint_OnGamemodeLoaded", function()
    tLoad.sh( "config.lua" )
    tLoad.sh( "shared/i18n/" .. ( OnePrint.Cfg.Language or "en" ) .. ".lua" )

    tLoad.sh( "shared/util.lua" )
    tLoad.sh( "shared/init.lua" )
    tLoad.sh( "shared/player.lua" )    

    tLoad.sv( "server/util.lua" )
    tLoad.sv( "server/init.lua" )
    tLoad.sv( "server/hooks.lua" )

    tLoad.cl( "client/init.lua" )
    tLoad.cl( "client/vgui/3d2dvgui.lua" )
    tLoad.cl( "client/vgui/derma.lua" )

    loadTabs()

    hook.Run( "OnePrint_OnLoaded" )
    print( "-------------------------\n[OnePrint] Script loaded\n-------------------------\n" )

    tLoad = nil
    loadTabs = nil

    hook.Remove( "OnGamemodeLoaded", "OnePrint_OnGamemodeLoaded" )
end )
--addons/thirdperson/lua/thirdperson/client/ferma/cl_ferma.lua:
return gluapack()()
--addons/thirdperson/lua/thirdperson/client/ferma/cl_ferma_fpanel.lua:
FERMA = FERMA or {}
FPanel = {}

function FPanel:Style( style )

    /* Defaults */
    self.FT = FERMA.CORE.Fermafy( style, self:GetParent() )
    FERMA.CORE.FermaDefaults( self )
    /* */

end

function FPanel:Paint( w, h )

    /* Defaults */
    FERMA.CORE.PaintFermafy( w, h, self.FT )
    -- 76561221774735761
    /* */

end

derma.DefineControl( "FPanel", "Better DPanel", FPanel, "DPanel" )
--addons/thirdperson/lua/thirdperson/client/ferma/cl_ferma_fcheckboxlabel.lua:
FERMA = FERMA or {}
FCheckBoxLabel = {}

function FCheckBoxLabel:Style( style )
    
    /* Defaults */
    self.FT = FERMA.CORE.Fermafy( style, self:GetParent() )
    FERMA.CORE.FermaDefaults( self )
    /* */

    /* Panel Specific Styling */
    self.FT.FFont = style["font-family"] or nil
    self.FT.FContent = style["content"] or nil
    self.FT.FCVar = style["cvar"] or nil

    if( self.FT.FCVar ~= nil ) then
        self:SetValue( cvars.Bool( self.FT.FCVar ) )
        self:SetConVar( self.FT.FCVar )
    end

    if( self.FT.FContent ~= nil ) then
        self.Label:SetText( self.FT.FContent )
    end

    if( self.FT.FFont ~= nil ) then
        self.Label:SetFont( self.FT.FFont )
    end
    /* */

end

function FCheckBoxLabel:PerformLayout()
  local x = self.m_iIndent || 0

  self.Button:SetSize( 15, 15 )
  self.Button:SetPos( x, math.floor( ( self:GetTall() - self.Button:GetTall() ) / 2 ) )

  self.Label:SizeToContents()
  self.Label:SetPos( x + self.Button:GetWide() + 9, 2 )
end

derma.DefineControl( "FCheckBoxLabel", "Better DCheckBoxLabel", FCheckBoxLabel, "DCheckBoxLabel" )
-- 76561221774735761
--addons/thirdperson/lua/thirdperson/client/ferma/cl_ferma_fpointmapper.lua:
return gluapack()()
--addons/thirdperson/lua/thirdperson/client/ferma/cl_ferma_fpointmapper.lua:
FERMA = FERMA or {}
FPointMapper = {}

function FPointMapper:Style( style )

    /* Defaults */
    self.FT = FERMA.CORE.Fermafy( style, self:GetParent() )
    FERMA.CORE.FermaDefaults( self )
    /* */

    /* Panel Specific Styling */
    self.FT.FKnob = style["knob"]

    self:SetLockX( nil )
    self:SetLockY( nil )

    self.Knob:NoClipping( false )
    self.m_fSlideX = self.FT.FKnob[1]
    self.m_fSlideY = self.FT.FKnob[2]
    /* */
end

function FPointMapper:Paint( w, h )

    /* Defaults */
    FERMA.CORE.PaintFermafy( w, h, self.FT )
    /* */

    /* Panel Specific Painting */
    FERMA.CORE.DrawHorizontalLine
    {
        ["color"] = Color( 0, 0, 0, 150 ),
        ["x"] = 0,
        ["y"] = h / 2 - 1,
        ["length"] = w,
        ["thickness"] = 2
    }

    FERMA.CORE.DrawVerticalLine
    {
        ["color"] = Color( 0, 0, 0, 150 ),
        ["x"] = w / 2 - 1,
        ["y"] = 0,
        ["length"] = h,
        ["thickness"] = 2
    }
    /* */
    
end

function FPointMapper:ConvertX( ValPosX, NewMinX, NewMaxX, OldMinX, OldMaxX )
    if( ValPosX == "knob" ) then
        local KnobX, KnobY = self.Knob:GetPos()
        X = ( KnobX + ( self.Knob:GetWide() / 2 ) ) * ( NewMaxX - NewMinX ) / ( OldMaxX - OldMinX ) + NewMinX
    else
        X = ( ValPosX - OldMinX ) * ( NewMaxX - NewMinX ) / ( OldMaxX - OldMinX ) + NewMinX
    end    

    return X
end

function FPointMapper:ConvertY(ValPosY, NewMinY, NewMaxY, OldMinY, OldMaxY )
    if( ValPosY == "knob" ) then
        local KnobX, KnobY = self.Knob:GetPos()
        Y = ( KnobY + ( self.Knob:GetTall() / 2 ) ) * ( NewMaxY - NewMinY ) / ( OldMaxY - OldMinY ) + NewMinY
    else
        Y = ( ValPosY - OldMinY ) * ( NewMaxY - NewMinY ) / ( OldMaxY - OldMinY ) + NewMinY
    end    

    return Y
end

derma.DefineControl( "FPointMapper", "X and Y user editable mapper.", FPointMapper, "DSlider" )
--addons/thirdperson/lua/thirdperson/client/cl_thirdperson.lua:
return gluapack()()
--addons/vape_swep/lua/autorun/sh_vapeswep.lua:
return gluapack()()
--addons/bb_simpsit/lua/simp_sit/config/sh_config.lua:
return gluapack()()
--addons/skeypad_1.2.36/lua/autorun/skeypad_loader.lua:
local loaded = false

local function loadsKeypad()
    if loaded then return end
    loaded = true
    
    slib.loadFolder("s_keypad/", true, {{"s_keypad/", "sh_skeypad_config.lua"}, {"s_keypad/client/", "imgui.lua"}}, {{"s_keypad/integration/", "sv_logging.lua"}, {"s_keypad/client/", "cl_skeypad.lua"}, {"s_keypad/", "sh_skeypad.lua"}})
    
    if CLIENT then
        language.Add("undone_s_keypad", slib.getLang("skeypad", sKeypad.config.Language, "undone_keypad"))
        language.Add("tool.skeypad.name", slib.getLang("skeypad", sKeypad.config.Language, "tool_name"))
        language.Add("tool.skeypad.desc", slib.getLang("skeypad", sKeypad.config.Language, "tool_desc"))
        language.Add("tool.skeypad.0", slib.getLang("skeypad", sKeypad.config.Language, "tooltip"))
    end
end

if slib and slib.loadFolder then loadsKeypad() end

hook.Add("slib:loadedUtils", "eP:Init_sKeypad", function()
    loadsKeypad()
end)
--lua/slib/vgui/cl_stableviewer.lua:
local PANEL = {}

local font = slib.createFont("Roboto", 15)
local neutralcolor, textcolor, successcolor_100, failcolor_100, maincolor_5, maincolor_7, maincolor_10, maincolor_15 = slib.getTheme("neutralcolor"), slib.getTheme("textcolor"), slib.getTheme("successcolor", -100), slib.getTheme("failcolor", -100), slib.getTheme("maincolor", 5), slib.getTheme("maincolor", 7), slib.getTheme("maincolor", 10), slib.getTheme("maincolor", 15)

function PANEL:Init()
    self:SetSize(slib.getScaledSize(450, "x"), slib.getScaledSize(330, "y"))
    :Center()
    :MakePopup()
    :addCloseButton()
    :setTitle("Table Viewer", slib.createFont("Roboto", 17))
    :setBlur(true)

    self.entryheight = slib.getScaledSize(20, "y")
    
    self.viewbox = vgui.Create("EditablePanel", self.frame)
    self.viewbox:Dock(RIGHT)
    self.viewbox:SetWide(self.frame:GetWide())

    self.viewer = vgui.Create("SScrollPanel", self.viewbox)
    :Dock(FILL)
end

local function createButton(self, parent, str, val)
    local istbl = istable(val)
    local selparent = parent and parent or self.viewer

    local value = vgui.Create("SButton", selparent)
    :Dock(TOP)
    :SetZPos(-10)
    :SetTall(slib.getScaledSize(25, "y"))

    value.title = str
    value.tbl = istbl and val or parent.tbl

    value.Paint = function(s,w,h)
        local wantedcolor = selparent == self.suggestions and successcolor_100 or (value.toggleable and selparent.tbl[str] and successcolor_100 or failcolor_100)

        if !value.toggleable and (!s:IsHovered() or self.viewOnly) then
            wantedcolor = table.Copy(wantedcolor)
            wantedcolor.a = 0
        end
        
        surface.SetDrawColor(slib.lerpColor(s, wantedcolor))
        surface.DrawRect(0, 0, w, h)
        local display = ""

        if !istbl and (isstring(val) or isnumber(val)) then
            display = ": "..tostring(val)
        end
        
        draw.SimpleText(str..display, font, slib.getTheme("margin"), h * .5, textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end

    value.Think = function()
        if !value.toggleable and self:getRule("toggleables", str) then
            value.toggleable = true
        end

        if value:IsHovered() and input.IsKeyDown(KEY_LSHIFT) and input.IsMouseDown(MOUSE_RIGHT) then
            value:DoClick()
        end
    end

    value.DoClick = function()
        if self.viewOnly then return end

        self.modified = true
        
        if selparent == self.suggestions then
            local edit = IsValid(self.selected) and self.selected or self.viewer

            if self.rules and self.rules.onlymodifytable and edit:GetName() == "SScrollPanel" then return end

            if self.customvalues then
                local popup = vgui.Create("SPopupBox")
                :setTitle(value.title)
                
                local entry = popup:addInput("text", self.customvalueplaceholder)

                if self.customnumeric then
                    entry:SetNumeric(true)
                end
                
                popup:addChoise(self.customvalues, function()
                    local val = entry:GetValue()
                    self:addValue(editTbl, value.title, val, edit)
                    edit.tbl[value.title] = val

                    if edit == self.viewer then
                        self:sortValues(self.viewer)
                    end
                end)

                return
            else
                edit.tbl[value.title] = true
                self:addValue(editTbl, value.title, true, edit)
            end
            
            if edit == self.viewer then
                self:sortValues(self.viewer)
            end
        else
            if value.toggleable then
                selparent.tbl[str] = !selparent.tbl[str]
            return end

            value:Remove()
        end

        selparent.tbl[str] = nil
    end

    return value
end

function PANEL:addValue(panel, str, val, parent)
    if istable(val) then
        local selpar = parent or panel
        parent = vgui.Create("EditablePanel", selpar)
        parent:Dock(TOP)
        parent:SetTall(slib.getScaledSize(25, "y"))
        parent:DockMargin(slib.getTheme("margin"),slib.getTheme("margin"),slib.getTheme("margin"),slib.getTheme("margin"))
        parent:DockPadding(0,slib.getScaledSize(25, "y"),0,0)
        parent.isTblContainer = true
        parent.tbl = val
        parent.title = str
        parent.OnSizeChanged = function(w,h)
            parent.top:SetWide(parent:GetWide())
        end

        parent.top = vgui.Create("SButton", parent)
        parent.top:SetSize(parent:GetWide(), slib.getScaledSize(25, "y"))

        parent.top.DoClick = function()
            if self.rules and self.rules.tableDeletable and !self:getRule("undeleteableTables", str)  then
                parent:Remove()
                selpar.tbl[str] = nil
                self.modified = true
            return end

            self.selected = self.selected ~= parent and parent or nil
        end

        parent.top.Paint = function(s,w,h)
            local wantedcolor = self.rules and self.rules.tableDeletable and !self:getRule("undeleteableTables", str) and failcolor_100 or neutralcolor
            
            surface.SetDrawColor(maincolor_7)
            surface.DrawRect(0, 0, w, h)

            surface.SetDrawColor(maincolor_5)
            surface.DrawRect(0,h-1,w,1)

            if self.rules and self.rules.tableDeletable and !self:getRule("undeleteableTables", str) then
                if !s:IsHovered() then
                    wantedcolor = table.Copy(wantedcolor)
                    wantedcolor.a = 0
                end
            elseif self.selected ~= parent then
                wantedcolor = table.Copy(wantedcolor)
                wantedcolor.a = 0
            end


            surface.SetDrawColor(slib.lerpColor(s, wantedcolor))
            surface.DrawRect(0, 0, w, h)

            draw.SimpleText(str, font, slib.getTheme("margin"), h * .5, textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
        end

        parent.PaintOver = function(s, w, h)
            surface.SetDrawColor(maincolor_5)
            surface.DrawOutlinedRect(0, 0, w, h)
        end

        parent.OnChildAdded = function(child)
            local addheight = slib.getScaledSize(25, "y")
            parent:SetTall(parent:GetTall() + addheight)

            local grandparent = parent:GetParent()
            if !grandparent.isTblContainer then return end
            grandparent:SetTall(grandparent:GetTall() + addheight)
        end

        parent.OnChildRemoved = function(child)
            local addheight = slib.getScaledSize(25, "y")
            parent:SetTall(parent:GetTall() - addheight)

            local grandparent = parent:GetParent()
            if !grandparent.isTblContainer then return end
            grandparent:SetTall(grandparent:GetTall() - addheight)
        end
        
        if selpar ~= self.viewer then
            selpar:SetTall(selpar:GetTall() + (slib.getTheme("margin") * 2))
        end

        for k,v in pairs(val) do
            self:addValue(panel, k, v, parent)
        end
    return end

    return createButton(self, parent and parent or panel, str, val)
end

local function differenciate(a, b)
    if !(isstring(a) == isstring(b)) or isbool(a) or isbool(b) then
        return tostring(a), tostring(b)
    end

    return a, b
end

function PANEL:setCustomValues(bool, placeholder, numeric)
    self.customvalues = bool
    self.customvalueplaceholder = placeholder
    self.customnumeric = numeric

    return self
end

function PANEL:sortValues(panel)
    if !IsValid(panel) then return self end
    local basictable = {}
    local cleantable = {}

    for k,v in pairs(panel.tbl) do
        table.insert(basictable, k)
    end

    table.sort(basictable, function(a, b) local a, b = differenciate(a, b) return a < b end)
    
    for k,v in pairs(basictable) do
        cleantable[v] = k
    end

    for k, v in pairs(panel:GetCanvas():GetChildren()) do
        if !v.title then continue end
        v:SetZPos(cleantable[v.title])
    end

    return self
end

function PANEL:addSuggestions(tbl)
    if !tbl then return self end

    local wide, tall = self.frame:GetWide() * .5, self.frame:GetTall()
    self.viewer:SetPos(wide, 0)
    self.viewer:SetWide(wide)

    self.suggestionbox = vgui.Create("EditablePanel", self.frame)
    self.suggestionbox:Dock(LEFT)
    self.suggestionbox:SetWide(self.frame:GetWide() * .5)
    self.viewbox:SetWide(self.frame:GetWide() * .5)

    self.suggestions = vgui.Create("SScrollPanel", self.suggestionbox)
    self.suggestions:Dock(FILL)
    self.suggestions.tbl = tbl
    self.suggestions.hidden = {}

    self.suggestions.PaintOver = function(s,w,h)
        surface.SetDrawColor(maincolor_10)
        surface.DrawRect(w - 1, 0, 1, h)
    end

    self.suggestions.Think = function()
        local edit = IsValid(self.selected) and self.selected or self.viewer
        for k, value in pairs(self.suggestions:GetCanvas():GetChildren()) do
            if value:IsVisible() ~= !edit.tbl[value.title] and !value.searchHidden then
                value:SetVisible(!edit.tbl[value.title])
                self.suggestions:GetCanvas():InvalidateLayout(true)
            end
        end
    end

    for k,v in pairs(tbl) do
        self:addValue(self.suggestions, k, v)
    end

    return self
end

function PANEL:setOnlyModifyTable(bool)
    self.rules = self.rules or {}
    self.rules.onlymodifytable = bool
end

function PANEL:setToggleable(module, name, string)
    self.rules = self.rules or {}
    self.rules[module] = self.rules[module] or {}
    self.rules[module][name] = self.rules[module][name] or {}
    self.rules[module][name].toggleables = self.rules[module][name].toggleables or {}

    self.rules[module][name].toggleables[string] = true
end

function PANEL:setTableDeletable(bool)
    self.rules = self.rules or {}
    self.rules.tableDeletable = bool
end

function PANEL:setundeleteableTable(module, name, string)
    self.rules = self.rules or {}
    self.rules[module] = self.rules[module] or {}
    self.rules[module][name] = self.rules[module][name] or {}
    self.rules[module][name].undeleteableTables = self.rules[module][name].undeleteableTables or {}

    self.rules[module][name].undeleteableTables[string] = true
end

function PANEL:setAddRules(rule)
    self.rules = self.rules or {}
    self.rules.addRules = rule
end

function PANEL:getRule(type, str)
    local returnval = false

    if self.rules and self.rules[self.modulename] and self.rules[self.modulename][self.name] and self.rules[self.modulename][self.name][type] and self.rules[self.modulename][self.name][type][str] then
        returnval = true
    end
    
    return returnval
end

function PANEL:setIdentifiers(module, name)
    self.modulename, self.name = module, name
end

function PANEL:setTable(tbl)
    if !tbl or !istable(tbl) then return self end
    self.viewer.tbl = tbl
    for k,v in pairs(tbl) do
        self:addValue(self.viewer, k, v)
    end

    return self
end

function PANEL:addSearch(panel, viewer)
    if !IsValid(panel) or !IsValid(viewer) then return self end
    panel.search = vgui.Create("SSearchBar", panel)
    :addIcon()
    :SetWide(panel:GetWide())
    :Dock(TOP)
    :DockMargin(0,0,0,0)

    panel.search.entry.onValueChange = function(newvalue)
        for k,v in pairs(viewer:GetCanvas():GetChildren()) do
            if !v.title then continue end

            v:SetVisible(string.find(string.lower(v.title), string.lower(newvalue)))

            if v:IsVisible() then
                v.searchHidden = nil
            else
                v.searchHidden = true
            end
        end

        viewer:GetCanvas():InvalidateLayout(true)
    end

    return self
end

function PANEL:addEntry()
    self.addEntryFrame = vgui.Create("EditablePanel", self.viewbox)
    self.addEntryFrame:Dock(BOTTOM)

    self.addEntryButton = vgui.Create("SButton", self.addEntryFrame)
    :Dock(RIGHT)
    :setTitle("Add")

    self.addEntryButton.accentheight = 1
    self.addEntryButton.bg = maincolor_10

    self.addEntryButton.DoClick = function()
        local key, edit = self.entry:GetValue(), (IsValid(self.selected) and self.selected or self.viewer)
        if !key or key == "" or edit.tbl[key] then return end
        if self.rules and self.rules.onlymodifytable and edit:GetName() == "SScrollPanel" then return end
        
        local val

        if self.rules and self.rules.addRules and edit:GetName() == "SScrollPanel" then
            val = table.Copy(self.rules.addRules)
        end

        if !val then val = key end

        local result = !istable(val) and true or val
        edit.tbl[key] = result

        self:addValue(edit, key, result, edit)
        self:sortValues(self.viewer)
        self.modified = true
        self.entry:SetValue("")
    end

    self.entry = vgui.Create("STextEntry", self.addEntryFrame)
    :Dock(FILL)
    :SetValue("")

    self.entry.bg = maincolor_10

    self.entry.placeholder = ""

    self.addEntryFrame:SetTall(self.entry:GetTall())
    self.addEntryButton:SetTall(self.entry:GetTall())

    return self
end

vgui.Register("STableViewer", PANEL, "SFrame")
--addons/eprotect_1.5.24/lua/e_protect/languages/sh_french.lua:
return gluapack()()
--addons/eprotect_1.5.24/lua/e_protect/languages/sh_french.lua:
if CLIENT then
    slib.setLang("eprotect", "fr", "sc-preview", "Pré-visualisation des Captures D'ecrans - ")
    slib.setLang("eprotect", "fr", "net-info", "Info des Nets - ")
    slib.setLang("eprotect", "fr", "ip-info", "Info de l'IP - ")
    slib.setLang("eprotect", "fr", "id-info", "Info de l'ID - ")
    slib.setLang("eprotect", "fr", "ip-correlation", "Corrélation de l'IP - ")
    slib.setLang("eprotect", "fr", "table-viewer", "Visionneur de Table")

    slib.setLang("eprotect", "fr", "tab-general", "Général")
    slib.setLang("eprotect", "fr", "tab-identifier", "Identifiant")
    slib.setLang("eprotect", "fr", "tab-netlimiter", "Limiteur de Net")
    slib.setLang("eprotect", "fr", "tab-netlogger", "Sauvegarde de net (logs)")
    slib.setLang("eprotect", "fr", "tab-exploitpatcher", "Correcteur d'Exploit")
    slib.setLang("eprotect", "fr", "tab-exploitfinder", "Rechercheur d'Exploit")
    slib.setLang("eprotect", "fr", "tab-fakeexploits", "Faux Exploit")
    slib.setLang("eprotect", "fr", "tab-datasnooper", "Fouineur de Data")

    slib.setLang("eprotect", "fr", "player-list", "Liste des Joueurs")

    slib.setLang("eprotect", "fr", "ratelimit", "Limite de flux")
    slib.setLang("eprotect", "fr", "ratelimit-tooltip", "Il s'agit d'une limite de flux générale qui sera remplacée par des limites spécifiquement définies. (Xs/Y)")

    slib.setLang("eprotect", "fr", "timeout", "Délai")
    slib.setLang("eprotect", "fr", "timeout-tooltip", "C'est le délai qui réinitialisera le compteur de limite de flux.")
    
    slib.setLang("eprotect", "fr", "overflowpunishment", "Punition d'Overflow")
    slib.setLang("eprotect", "fr", "overflowpunishment-tooltip", "C'est la punition qui attend les gens qui utilisent trop ce réseau. (1 = kick, 2 = ban)")

    slib.setLang("eprotect", "fr", "enable-networking", "Activer la mise en réseau")
    slib.setLang("eprotect", "fr", "disable-networking", "Desactiver la mise en réseau")

    slib.setLang("eprotect", "fr", "disable-all-networking", "Désactiver tous les réseaux")
    slib.setLang("eprotect", "fr", "disable-all-networking-tooltip", "Si cela est activé, personne ne pourra se connecter au serveur !")

    slib.setLang("eprotect", "fr", "player", "Joueur")
    slib.setLang("eprotect", "fr", "net-string", "Chaine de réseaux (string)")
    slib.setLang("eprotect", "fr", "called", "appelée")
    slib.setLang("eprotect", "fr", "len", "Len")
    slib.setLang("eprotect", "fr", "type", "Type")
    slib.setLang("eprotect", "fr", "activated", "Activé")
    slib.setLang("eprotect", "fr", "secure", "Securise")
    slib.setLang("eprotect", "fr", "ip", "Adresse IP")
    slib.setLang("eprotect", "fr", "date", "Date")
    slib.setLang("eprotect", "fr", "country-code", "Code Pays")
    slib.setLang("eprotect", "fr", "status", "Statut")

    slib.setLang("eprotect", "fr", "unknown", "Inconnu")
    slib.setLang("eprotect", "fr", "secured", "Securisé")

    slib.setLang("eprotect", "fr", "check-ids", "Verifier l'ID")
    slib.setLang("eprotect", "fr", "correlate-ip", "corréler l'IP")
    slib.setLang("eprotect", "fr", "family-share-check", "Verifier le partage Familial")

    slib.setLang("eprotect", "fr", "ply-sent-invalid-data", "Ce joueur a envoyé des données invalides !")
    slib.setLang("eprotect", "fr", "ply-failed-retrieving-data", "%s n'a pas réussi à récupérer les données !")

    slib.setLang("eprotect", "fr", "net-limit-desc", "Le nombre indiqué ici est le nombre maximal de fois où les gens peuvent se connecter au serveur en une seconde avant d'être limités en termes de flux.")

    slib.setLang("eprotect", "fr", "capture", "Capture d'Ecran")
    slib.setLang("eprotect", "fr", "check-ips", "Verifier l'IP")
    slib.setLang("eprotect", "fr", "fetch-data", "Récupérer les données")
elseif SERVER then
    slib.setLang("eprotect", "fr", "invalid-player", "Ce joueur n'est pas valide !")
    slib.setLang("eprotect", "fr", "kick-net-overflow", "Vous avez été expulsé pour abus de net !")
    slib.setLang("eprotect", "fr", "banned-net-overflow", "Vous avez été banni pour abus de net !")
    slib.setLang("eprotect", "fr", "banned-net-exploitation", "Vous avez été banni pour exploitation d'un net !")
    slib.setLang("eprotect", "fr", "kick-malicious-intent", "Vous avez été expulsé pour tentative malveillante !")
    slib.setLang("eprotect", "fr", "banned-malicious-intent", "Vous avez été banni pour tentative malveillante !")

    slib.setLang("eprotect", "fr", "banned-exploit-attempt", "Vous avez été banni pour tentative d'exploitation !")

    slib.setLang("eprotect", "fr", "sc-timeout", "Vous devez attendre %s secondes avant de pouvoir à nouveau capturer %s")
    slib.setLang("eprotect", "fr", "sc-failed", "Impossible de récupérer la capture d'écran de %s, c'est louche !")

    slib.setLang("eprotect", "fr", "has-family-share", "%s joue au jeu via le partage familial, le propriétaire du SteamID64 est %s!")
    slib.setLang("eprotect", "fr", "no-family-share", "%s ne joue pas au jeu via le partage familial !")
    slib.setLang("eprotect", "fr", "no-correlation", "Nous n'avons pas pu corréler les ips pour %s")
end
--addons/eprotect_1.5.24/lua/e_protect/languages/sh_russian.lua:
return gluapack()()
--addons/gprotect_1.13.99/lua/g_protect/languages/sh_english.lua:
return gluapack()()
--addons/gprotect_1.13.99/lua/g_protect/languages/sh_polish.lua:
if SERVER then
	slib.setLang("gprotect", "pl", "colliding-too-much", "%s's entities za bardzo się zderzają!	")
	slib.setLang("gprotect", "pl", "too-many-obstructs", "%s's entity blokuje zbyt wiele złych istot!")
	slib.setLang("gprotect", "pl", "blacklisted-multiple", "Pomyślnie dodałeś modele %s do zablokowanych modeli!")
	slib.setLang("gprotect", "pl", "unblacklisted-multiple", "Usunąłeś pomyślnie %s modele z zablokowanych modeli!")
	slib.setLang("gprotect", "pl", "blacklisted-multiple-ent", "Dodałeś pomyślnie %s ents do podmiotów z czarnej listy!")
	slib.setLang("gprotect", "pl", "unblacklisted-multiple-ent", "Pomyślnie usunąłeś %s ents z czarnej listy!")
	slib.setLang("gprotect", "pl", "added-blacklist", "Pomyślnie dodałeś %s do zablokowanych modeli!")
	slib.setLang("gprotect", "pl", "removed-blacklist", "Usunąłeś pomyślnie %s z zablokowanych modeli!")
	slib.setLang("gprotect", "pl", "added-blacklist-ent", "Pomyślnie dodałeś %s do czarnej listy jednostek!")
	slib.setLang("gprotect", "pl", "removed-blacklist-ent", "Usunąłeś pomyślnie	%s z czarnej listy podmiotów!")
	slib.setLang("gprotect", "pl", "attempted-unfreeze-all", "%s próbował odblokować wszystko po spawnowaniu dupe!")
	slib.setLang("gprotect", "pl", "attempted-upscaled-ent", "%s próbował odrodzić skalowany byt za pomocą adv dupe 2!")
	slib.setLang("gprotect", "pl", "attempted-rope-spawning", "%s próbował spawnować liny używając adv dupe 2!")
	slib.setLang("gprotect", "pl", "attempted-no-gravity", "%s próbował stworzyć rekwizyty bez grawitacji, używając Adv Dupe 2!")

	slib.setLang("gprotect", "pl", "model-restricted", "Ten model został objęty ograniczeniami!")
	slib.setLang("gprotect", "pl", "classname-restricted", "Ta klasa encji została ograniczona!")
	slib.setLang("gprotect", "pl", "attempted-blackout", "%s próbował wykorzystać exploit blackout!")
	slib.setLang("gprotect", "pl", "spam-spawning", "%s próbuje spamować spawnowaniem bytów / rekwizytów.")

	slib.setLang("gprotect", "pl", "too-complex-model", "Ten model został ograniczony, jest zbyt skomplikowany!")
	slib.setLang("gprotect", "pl", "too-big-prop", "Twój rekwizyt jest za duży, więc go usunęliśmy!")
	slib.setLang("gprotect", "pl", "successfull-fpp-blockedmodels", "Udało Ci się przenieść zablokowane modele z FPP do gProtect!")
	slib.setLang("gprotect", "pl", "successfull-fpp-grouptools", "Pomyślnie przeniosłeś grouptools z FPP do gProtect!")
	slib.setLang("gprotect", "pl", "unsuccessfull-transfer", "Wydaje się, że wystąpił problem podczas przesyłania danych! (MySQL nie jest obsługiwany)")

	slib.setLang("gprotect", "pl", "you-ghosted-props", "Masz upiorne %s's rekwizyty!")
	slib.setLang("gprotect", "pl", "you-frozen-props", "Zamarzłeś %s's rekwizyty!")
	slib.setLang("gprotect", "pl", "you-removed-props", "Usunąłeś %s's rekwizyty!")

	slib.setLang("gprotect", "pl", "props-ghosted", "Twoje rekwizyty zostały zniszczone!")
	slib.setLang("gprotect", "pl", "props-frozen", "Twoje rekwizyty zostały zamrożone!")
	slib.setLang("gprotect", "pl", "props-removed", "Twoje rekwizyty zostały usunięte!")

	slib.setLang("gprotect", "pl", "everyones-props-ghosted", "Someone has ghosted everyones props!")
	slib.setLang("gprotect", "pl", "everyones-props-frozen", "Ktoś zamroził wszystkie rekwizyty!")
	slib.setLang("gprotect", "pl", "disconnected-ents-removed", "Usunąłeś wszystkie odłączone podmioty graczy!")

	slib.setLang("gprotect", "pl", "insufficient-permission", "Nie masz takiego przywileju!")
	slib.setLang("gprotect", "pl", "spawn-to-close", "Twój rekwizyt nie może zostać odrodzony w kimś!")
	slib.setLang("gprotect", "pl", "entity-ghosted", "Twoja istota została zniszczona!")
elseif CLIENT then
	slib.setLang("gprotect", "pl", "title", "gProtect - Ustawienia")
	slib.setLang("gprotect", "pl", "buddies-title", "gProtect - Kumple")

	slib.setLang("gprotect", "pl", "world", "Świat")
	slib.setLang("gprotect", "pl", "disconnected", "Bezładny")
	slib.setLang("gprotect", "pl", "toolgun-name", "Rekwizyty czarnej listy")
	slib.setLang("gprotect", "pl", "toolgun-desc", "Zarządzaj zablokowanymi modelami")
	slib.setLang("gprotect", "pl", "toolgun-leftclick", "Dodaj do modeli na czarnej liście")
	slib.setLang("gprotect", "pl", "toolgun-rightclick", "Usuń z modeli na czarnej liście")
	slib.setLang("gprotect", "pl", "toolgun-help", "Strzelaj do rekwizytu za pomocą narzędzia")
	slib.setLang("gprotect", "pl", "remove-on-blacklist", "Usuń prop z czarnej listy")
	slib.setLang("gprotect", "pl", "player-list", "Lista graczy")

	slib.setLang("gprotect", "pl", "toolgun", "Toolgun")
	slib.setLang("gprotect", "pl", "physgun", "Physgun")
	slib.setLang("gprotect", "pl", "gravity-gun", "Gravity Gun")
	slib.setLang("gprotect", "pl", "canproperty", "Moga własność")

	slib.setLang("gprotect", "pl", "add-blocked-models", "Dodaj do zablokowanych modeli")
	slib.setLang("gprotect", "pl", "remove-blocked-models", "Usuń z zablokowanych modeli")

	slib.setLang("gprotect", "pl", "add-blacklisted-ents", "Dodaj do obiektów na czarnej liścies")
	slib.setLang("gprotect", "pl", "remove-blacklisted-ents", "Usuń z czarnej listy")
	slib.setLang("gprotect", "pl", "copy-clipboard", "Skopiuj do schowka")

	slib.setLang("gprotect", "pl", "general", "Generał")
	slib.setLang("gprotect", "pl", "ghosting", "Ghosting")
	slib.setLang("gprotect", "pl", "damage", "Uszkodzić")
	slib.setLang("gprotect", "pl", "anticollide", "Anti Collide")
	slib.setLang("gprotect", "pl", "spamprotection", "Ochrona przed spamem")
	slib.setLang("gprotect", "pl", "spawnrestriction", "Ograniczenie odradzania")
	slib.setLang("gprotect", "pl", "toolgunsettings", "Toolgun Ustawienia")
	slib.setLang("gprotect", "pl", "physgunsettings", "Physgun Ustawienia")
	slib.setLang("gprotect", "pl", "gravitygunsettings", "Gravgun Ustawienia")
	slib.setLang("gprotect", "pl", "canpropertysettings", "Can Property Ustawienia")
	slib.setLang("gprotect", "pl", "advdupe2", "Adv Dupe 2")
	slib.setLang("gprotect", "pl", "miscs", "Miscs")

	slib.setLang("gprotect", "pl", "ghost-props", "Duchowe rekwizyty")
	slib.setLang("gprotect", "pl", "remove-props", "Usun rekwizyty")
	slib.setLang("gprotect", "pl", "freeze-props", "Zatrzymaj rekwizyty")
	slib.setLang("gprotect", "pl", "highlight-ents", "Podświetl elementy")
	slib.setLang("gprotect", "pl", "unhighlight-ents", "Odznacz jednostki")

	slib.setLang("gprotect", "pl", "ghost-everyones-props", "Duchy wszystkich rekwizytów")
	slib.setLang("gprotect", "pl", "freeze-everyones-props", "Zamrozić wszystkie rekwizyty")
	slib.setLang("gprotect", "pl", "remove-disconnected-props", "Usuń rekwizyty odłączonych graczy")

	slib.setLang("gprotect", "pl", "general_remDiscPlyEnt", "Usuń odłączone jednostki graczy")
	slib.setLang("gprotect", "pl", "general_remDiscPlyEnt_tooltip", "Spowoduje to usunięcie odłączonych graczy na liczniku (jeśli -1 zostanie wyłączone).")
	slib.setLang("gprotect", "pl", "general_blacklist", "Czarna lista")
	slib.setLang("gprotect", "pl", "general_blacklist_tooltip", "W tym miejscu dodaje się nazwy klas, które powinny być chronione przez wszystkie moduły.")
	slib.setLang("gprotect", "pl", "general_protectedFrozenEnts", "Chronione zamrożone jednostki")
	slib.setLang("gprotect", "pl", "general_protectedFrozenEnts_tooltip", "To jest lista podmiotów, które należy chronić po zamrożeniu")
	slib.setLang("gprotect", "pl", "general_protectedFrozenGroup", "Grupa chroniona zamrożona")
	slib.setLang("gprotect", "pl", "general_protectedFrozenGroup_tooltip", "To jest grupa kolizji, w której umieszczane są zamrożone obiekty!")

	slib.setLang("gprotect", "pl", "ghosting_enabled", "Włączone")
	slib.setLang("gprotect", "pl", "ghosting_enabled_tooltip", "Włączyć moduł ghosting?")
	slib.setLang("gprotect", "pl", "ghosting_ghostColor", "Kolor zjawy")
	slib.setLang("gprotect", "pl", "ghosting_ghostColor_tooltip", "Wybierz kolor dla obiektów widmowych")
	slib.setLang("gprotect", "pl", "ghosting_antiObscuring", "Anti-obscuring")
	slib.setLang("gprotect", "pl", "ghosting_antiObscuring_tooltip", "Zapobiegnie to unghosted rekwizytów podczas zasłaniania obiektu. Po prostu dodaj elementy, które nie powinny być zasłaniane!")
	slib.setLang("gprotect", "pl", "ghosting_onPhysgun", "Ghost on physgun?")
	slib.setLang("gprotect", "pl", "ghosting_onPhysgun_tooltip", "Spowoduje to pojawienie się bytów duchów podczas strzelania fizycznego.")
	slib.setLang("gprotect", "pl", "ghosting_useBlacklist", "Użyj czarnej listy")
	slib.setLang("gprotect", "pl", "ghosting_useBlacklist_tooltip", "Ta opcja spowoduje usunięcie elementów z czarnej listy z czarnej listy, jeśli moduł jest włączony.")
	slib.setLang("gprotect", "pl", "ghosting_entities", "Entities")
	slib.setLang("gprotect", "pl", "ghosting_entities_tooltip", "Nazwy klas na tej liście będą widmowe, nie zmieni to czarnej listy używanej przez inne moduły.")

	slib.setLang("gprotect", "pl", "damage_enabled", "Włączone")
	slib.setLang("gprotect", "pl", "damage_enabled_tooltip", "Włączyć moduł uszkodzeń?")
	slib.setLang("gprotect", "pl", "damage_useBlacklist", "Użyj czarnej listy")
	slib.setLang("gprotect", "pl", "damage_useBlacklist_tooltip", "Ta opcja potraktuje ogólną czarną listę jako wpis na czarnej liście w tym module!")
	slib.setLang("gprotect", "pl", "damage_entities", "Elementy na czarnej liście")
	slib.setLang("gprotect", "pl", "damage_entities_tooltip", "Nazwy klas na tej liście nie będą zadawać obrażeń, jeśli zaznaczono opcję wyłączenia obrażeń, nie zmieni to czarnej listy używanej przez inne moduły.")
	slib.setLang("gprotect", "pl", "damage_blacklistedEntPlayerDamage", "Wyłącz uszkodzenia ents na czarnej liście")
	slib.setLang("gprotect", "pl", "damage_blacklistedEntPlayerDamage_tooltip", "Jeśli ta opcja jest zaznaczona, gracze nie będą otrzymywać obrażeń od podmiotów z czarnej listy.")
	slib.setLang("gprotect", "pl", "damage_vehiclePlayerDamage", "Wyłącz uszkodzenia pojazdów")
	slib.setLang("gprotect", "pl", "damage_vehiclePlayerDamage_tooltip", "Jeśli ta opcja jest zaznaczona, gracze nie otrzymają obrażeń od pojazdów.")
	slib.setLang("gprotect", "pl", "damage_worldPlayerDamage", "Wyłącz obrażenia świata")
	slib.setLang("gprotect", "pl", "damage_worldPlayerDamage_tooltip", "Jeśli ta opcja jest zaznaczona, gracze mogą otrzymywać obrażenia od podmiotów z czarnej listy.")
	slib.setLang("gprotect", "pl", "damage_immortalEntities", "Immortal Entities")
	slib.setLang("gprotect", "pl", "damage_immortalEntities_tooltip", "Nazwy klas na tej liście nie odnoszą obrażeń, chyba że gracz znajduje się w grupie obejścia!")
	slib.setLang("gprotect", "pl", "damage_bypassGroups", "Pomijaj grupy")
	slib.setLang("gprotect", "pl", "damage_bypassGroups_tooltip", "Dodaj grupy użytkowników do tej listy, aby ominąć ograniczenia szkód, '*' oznacza wszystkich!")
	slib.setLang("gprotect", "pl", "damage_canDamageWorldEntities", "Może uszkadzać byty świata")
	slib.setLang("gprotect", "pl", "damage_canDamageWorldEntities_tooltip", "Grupy znajdujące się na tej liście mogą uszkadzać byty świata, '*' oznacza każdego!")

	slib.setLang("gprotect", "pl", "anticollide_enabled", "Włączono")
	slib.setLang("gprotect", "pl", "anticollide_enabled_tooltip", "Włączyć moduł antykolizyjny?")
	slib.setLang("gprotect", "pl", "anticollide_notifyStaff", "Powiadom personel")
	slib.setLang("gprotect", "pl", "anticollide_notifyStaff_tooltip", "Czy wykrycie powinno powiadomić personel? Uwaga: można to wykorzystać do sikania personelu.")
	slib.setLang("gprotect", "pl", "anticollide_protectDarkRPEntities", "Chroń podmioty DarkRP")
	slib.setLang("gprotect", "pl", "anticollide_protectDarkRPEntities_tooltip", "Czy powinniśmy chronić podmioty DarkRP? (0 = wyłączone, 1 = duch, 2 = zablokuj, 3 = usuń, 4 = usuń i zwrot)")
	slib.setLang("gprotect", "pl", "anticollide_DRPentitiesThreshold", "Próg jednostek DRP")
	slib.setLang("gprotect", "pl", "anticollide_DRPentitiesThreshold_tooltip", "Ile kolizji może mieć rekwizyt, zanim zostanie wywołany w ciągu 1 sekundy?")
	slib.setLang("gprotect", "pl", "anticollide_DRPentitiesException", "Wyjątek jednostek DRP")
	slib.setLang("gprotect", "pl", "anticollide_DRPentitiesException_tooltip", "Jakie kolizje ignorujemy? (0 = brak, 1 = inny właściciel, 2 = brak właściciela)")
	slib.setLang("gprotect", "pl", "anticollide_protectSpawnedEntities", "Chroń spawnowane byty")
	slib.setLang("gprotect", "pl", "anticollide_protectSpawnedEntities_tooltip", "Czy powinniśmy chronić spawnowane byty? (0 = wyłączone, 1 = duch, 2 = zatrzymaj, 3 = usuń")
	slib.setLang("gprotect", "pl", "anticollide_entitiesThreshold", "Próg odrodzonych bytów")
	slib.setLang("gprotect", "pl", "anticollide_entitiesThreshold_tooltip", "Ile kolizji może mieć rekwizyt, zanim zostanie wywołany w ciągu 1 sekundy?")
	slib.setLang("gprotect", "pl", "anticollide_entitiesException", "Wyjątek od wygenerowanych bytów")
	slib.setLang("gprotect", "pl", "anticollide_entitiesException_tooltip", "Jakie kolizje ignorujemy? (0 = brak, 1 = inny właściciel, 2 = brak właściciela)")
	slib.setLang("gprotect", "pl", "anticollide_protectSpawnedProps", "Chroń rozmnożone rekwizyty")
	slib.setLang("gprotect", "pl", "anticollide_protectSpawnedProps_tooltip", "Czy powinniśmy chronić rozmnożone rekwizyty? (0 = wyłączone, 1 = duch, 2 = zatrzymaj, 3 = usuń")
	slib.setLang("gprotect", "pl", "anticollide_propsThreshold", "Próg odrodzonych rekwizytów")
	slib.setLang("gprotect", "pl", "anticollide_propsThreshold_tooltip", "Ile kolizji może mieć rekwizyt, zanim zostanie wywołany w ciągu 1 sekundy?")
	slib.setLang("gprotect", "pl", "anticollide_propsException", "Wyjątek od wygenerowanych rekwizytów")
	slib.setLang("gprotect", "pl", "anticollide_propsException_tooltip", "Jakie kolizje ignorujemy? (0 = brak, 1 = inny właściciel, 2 = brak właściciela)")
	slib.setLang("gprotect", "pl", "anticollide_useBlacklist", "Użyj czarnej listy")
	slib.setLang("gprotect", "pl", "anticollide_useBlacklist_tooltip", "Elementy na czarnej liście będą widmowe, jeśli kolidują za dużo, jeśli ta opcja jest włączona")
	slib.setLang("gprotect", "pl", "anticollide_ghostEntities", "Podmioty")
	slib.setLang("gprotect", "pl", "anticollide_ghostEntities_tooltip", "Nazwy klas na tej liście będą widmowe, jeśli będą się zbytnio zderzać.")

	slib.setLang("gprotect", "pl", "spamprotection_enabled", "Enabled")
	slib.setLang("gprotect", "pl", "spamprotection_enabled_tooltip", "Włączyć moduł ochrony przed spamem?")
	slib.setLang("gprotect", "pl", "spamprotection_threshold", "Próg")
	slib.setLang("gprotect", "pl", "spamprotection_threshold_tooltip", "Jeśli stworzysz te wiele rekwizytów naraz, włączy się, chyba że zdefiniowane poniżej opóźnienie zniknie.")
	slib.setLang("gprotect", "pl", "spamprotection_delay", "Delay")
	slib.setLang("gprotect", "pl", "spamprotection_delay_tooltip", "Ten licznik czasu wyczyści powyższy próg.")
	slib.setLang("gprotect", "pl", "spamprotection_action", "Punishment")
	slib.setLang("gprotect", "pl", "spamprotection_action_tooltip", "To zadecyduje, jak postępować ze spamerami! (1 = nie zezwalaj na tworzenie się, 2 = obiekt widmo / atrybut)")
	slib.setLang("gprotect", "pl", "spamprotection_notifyStaff", "Powiadom personel")
	slib.setLang("gprotect", "pl", "spamprotection_notifyStaff_tooltip", "Czy wykrycie powiadamia personel? Uwaga: można to wykorzystać do wkurzenia pracowników.")
	slib.setLang("gprotect", "pl", "spamprotection_protectProps", "Chroń rekwizyty")
	slib.setLang("gprotect", "pl", "spamprotection_protectProps_tooltip", "Dzięki temu rekwizyty będą chronione przed spamowaniem.")
	slib.setLang("gprotect", "pl", "spamprotection_protectEntities", "Chroń jednostki")
	slib.setLang("gprotect", "pl", "spamprotection_protectEntities_tooltip", "To ochroni jednostki przed pojawieniem się spamu.")
	
	slib.setLang("gprotect", "pl", "spawnrestriction_enabled", "Enabled")
	slib.setLang("gprotect", "pl", "spawnrestriction_enabled_tooltip", "Włączyć moduł spawnrestriction?")
	slib.setLang("gprotect", "pl", "spawnrestriction_propSpawnPermission", "Uprawnienia spawn Prop")
	slib.setLang("gprotect", "pl", "spawnrestriction_propSpawnPermission_tooltip", "Spowoduje to całkowite ograniczenie tworzenia się rekwizytów! (Dodaj tutaj grupy użytkowników, aby na nie zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "spawnrestriction_SENTSpawnPermission", "SENT spawn permissions")
	slib.setLang("gprotect", "pl", "spawnrestriction_SENTSpawnPermission_tooltip", "Spowoduje to całkowite ograniczenie spawnowania SENTS! (Dodaj tutaj grupy użytkowników, aby na nie zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "spawnrestriction_SWEPSpawnPermission", "Uprawnienia do spawnowania SWEP")
	slib.setLang("gprotect", "pl", "spawnrestriction_SWEPSpawnPermission_tooltip", "Spowoduje to całkowite ograniczenie tworzenia SWEP! (Dodaj tutaj grupy użytkowników, aby im zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "spawnrestriction_vehicleSpawnPermission", "Uprawnienia do odradzania pojazdów")
	slib.setLang("gprotect", "pl", "spawnrestriction_vehicleSpawnPermission_tooltip", "Spowoduje to całkowite ograniczenie pojawiających się pojazdów! (Dodaj tutaj grupy użytkowników, aby na nie zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "spawnrestriction_NPCSpawnPermission", "Uprawnienia do odradzania NPC")
	slib.setLang("gprotect", "pl", "spawnrestriction_NPCSpawnPermission_tooltip", "To całkowicie ograniczy pojawiające się NPC! (Dodaj tutaj grupy użytkowników, aby im zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "spawnrestriction_ragdollSpawnPermission", "Uprawnienia do spawn Ragdoll")
	slib.setLang("gprotect", "pl", "spawnrestriction_ragdollSpawnPermission_tooltip", "Spowoduje to całkowite ograniczenie tworzenia ragdoll! (Dodaj tutaj grupy użytkowników, aby im zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "spawnrestriction_effectSpawnPermission", "Uprawnienia do odradzania efektów")
	slib.setLang("gprotect", "pl", "spawnrestriction_effectSpawnPermission_tooltip", "Spowoduje to całkowite ograniczenie efektów odradzania! (Dodaj tutaj grupy użytkowników, aby na nie zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "spawnrestriction_blockedEntities", "Blocked SENTs")
	slib.setLang("gprotect", "pl", "spawnrestriction_blockedEntities_tooltip", "Umieść tutaj nazwy klas bytów, które nigdy nie powinny się pojawiać!")
	slib.setLang("gprotect", "pl", "spawnrestriction_blockedEntitiesIsBlacklist", "Zablokowane klasy to czarna lista")
	slib.setLang("gprotect", "pl", "spawnrestriction_blockedEntitiesIsBlacklist_tooltip", "Zaznaczenie tej opcji spowoduje, że klasy z listy będą blokowane przed tworzeniem, w przeciwnym razie możesz tworzyć tylko te klasy.")
	slib.setLang("gprotect", "pl", "spawnrestriction_blockedModels", "Zablokowane modele")
	slib.setLang("gprotect", "pl", "spawnrestriction_blockedModels_tooltip", "Umieść nazwy modeli, aby rekwizyty z nazwą modelu nie pojawiały się!")
	slib.setLang("gprotect", "pl", "spawnrestriction_blockedModelsisBlacklist", "Zablokowane modele to czarna lista")
	slib.setLang("gprotect", "pl", "spawnrestriction_blockedModelsisBlacklist_tooltip", "Zaznaczenie tej opcji spowoduje, że modele z listy zostaną zablokowane przed tworzeniem, w przeciwnym razie możesz tworzyć tylko te modele.")
	slib.setLang("gprotect", "pl", "spawnrestriction_bypassGroups", "Pomijaj grupy")
	slib.setLang("gprotect", "pl", "spawnrestriction_bypassGroups_tooltip", "Te grupy będą mogły pomijać zablokowane wysyłanie i modele.")
	slib.setLang("gprotect", "pl", "spawnrestriction_maxModelSize", "Maksymalny rozmiar modelu")
	slib.setLang("gprotect", "pl", "spawnrestriction_maxModelSize_tooltip", "Jeśli jest powyżej 0, spowoduje to usunięcie większych rekwizytów zaraz po ich pojawieniu się.")

	slib.setLang("gprotect", "pl", "toolgunsettings_enabled", "Włączone")
	slib.setLang("gprotect", "pl", "toolgunsettings_enabled_tooltip", "Włączyć moduł toolgunsettings?")
	slib.setLang("gprotect", "pl", "toolgunsettings_targetWorld", "Może kierować reklamy na obiekty świata")
	slib.setLang("gprotect", "pl", "toolgunsettings_targetWorld_tooltip", "Oznacza to, że mogą kierować reklamy na obiekty świata i rekwizyty! (Dodaj tutaj grupy użytkowników, aby im zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "toolgunsettings_targetPlayerOwned", "Może kierować reklamy na podmioty należące do gracza")
	slib.setLang("gprotect", "pl", "toolgunsettings_targetPlayerOwned_tooltip", "Oznacza to, że mogą kierować reklamy na elementy i rekwizyty graczy! (Dodaj tutaj grupy użytkowników, aby im zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "toolgunsettings_restrictTools", "Narzędzia z ograniczeniami")
	slib.setLang("gprotect", "pl", "toolgunsettings_restrictTools_tooltip", "Te narzędzia nie będą dostępne dla nikogo oprócz tych, które są w opcji bypassGroups poniżej.")
	slib.setLang("gprotect", "pl", "toolgunsettings_groupToolRestrictions", "Ograniczenia dotyczące narzędzi grupowych")
	slib.setLang("gprotect", "pl", "toolgunsettings_groupToolRestrictions_tooltip", "Konfiguruj ograniczenia narzędzi według narzędzia.")
	slib.setLang("gprotect", "pl", "toolgunsettings_entityTargetability", "Element docelowy")
	slib.setLang("gprotect", "pl", "toolgunsettings_entityTargetability_tooltip", "To jest fajne, aby ludzie mogli używać pistoletu narzędziowego tylko na przykład na swoich rekwizytach!")
	slib.setLang("gprotect", "pl", "toolgunsettings_bypassGroups", "Pomijaj grupy")
	slib.setLang("gprotect", "pl", "toolgunsettings_bypassGroups_tooltip", "Grupy tutaj będą omijać listę ograniczeń narzędzi z góry!")
	
	slib.setLang("gprotect", "pl", "physgunsettings_enabled", "Enabled")
	slib.setLang("gprotect", "pl", "physgunsettings_enabled_tooltip", "Włączyć moduł ustawień physgun?")
	slib.setLang("gprotect", "pl", "physgunsettings_targetWorld", "Może kierować na obiekty świata")
	slib.setLang("gprotect", "pl", "physgunsettings_targetWorld_tooltip", "Oznacza to, że mogą kierować reklamy na obiekty świata i rekwizyty! (Dodaj tutaj grupy użytkowników, aby im zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "physgunsettings_targetPlayerOwned", "Może kierować reklamy na podmioty należące do gracza")
	slib.setLang("gprotect", "pl", "physgunsettings_targetPlayerOwned_tooltip", "Oznacza to, że mogą kierować reklamy na elementy i rekwizyty graczy! (Dodaj tutaj grupy użytkowników, aby im zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "physgunsettings_DisableReloadUnfreeze", "Wyłącz ponowne ładowanie unreeze")
	slib.setLang("gprotect", "pl", "physgunsettings_DisableReloadUnfreeze_tooltip", "Zapobiegnie to odblokowywaniu rekwizytów przez przeładowanie.")
	slib.setLang("gprotect", "pl", "physgunsettings_PickupVehiclePermission", "Uprawnienie do odbioru pojazdu")
	slib.setLang("gprotect", "pl", "physgunsettings_PickupVehiclePermission_tooltip", "Jeśli ludzie znajdują się w grupach użytkowników na tej liście, mogą odbierać pojazdy!")
	slib.setLang("gprotect", "pl", "physgunsettings_StopMotionOnDrop", "Zatrzymaj ruch przy upuszczaniu")
	slib.setLang("gprotect", "pl", "physgunsettings_StopMotionOnDrop_tooltip", "Zapobiegnie to podsadzaniu / podsadzaniu.")
	slib.setLang("gprotect", "pl", "physgunsettings_maxDropObstructs", "Maksymalny próg obstrukcji")
	slib.setLang("gprotect", "pl", "physgunsettings_maxDropObstructs_tooltip", "To jest próg liczby obsctructów z czarnej listy do momentu wyzwolenia!")
	slib.setLang("gprotect", "pl", "physgunsettings_maxDropObstructsAction", "Maksymalne działanie wyzwalacza obstrukcji")
	slib.setLang("gprotect", "pl", "physgunsettings_maxDropObstructsAction_tooltip", "To jest sposób na zagrożenie wyzwalaczami (1 = Ghost, 2 = Freeze, 3 = Remove)")
	slib.setLang("gprotect", "pl", "physgunsettings_blockedEntities", "Zablokowane elementy")
	slib.setLang("gprotect", "pl", "physgunsettings_blockedEntities_tooltip", "Dodaj do tego elementy, a nikt, kto nie należy do grupy obejściowej, nie będzie mógł tego fizycznie przechwycić.")
	slib.setLang("gprotect", "pl", "physgunsettings_bypassGroups", "Pomijaj grupy")
	slib.setLang("gprotect", "pl", "physgunsettings_bypassGroups_tooltip", "Dodaj grupy użytkowników do tej listy, aby ominąć zablokowane elementy, * oznacza wszystkich!")

	slib.setLang("gprotect", "pl", "gravitygunsettings_enabled", "Enabled")
	slib.setLang("gprotect", "pl", "gravitygunsettings_enabled_tooltip", "Włączyć moduł ustawień pistoletu grawitacyjnego?")
	slib.setLang("gprotect", "pl", "gravitygunsettings_targetWorld", "Może kierować na obiekty świata")
	slib.setLang("gprotect", "pl", "gravitygunsettings_targetWorld_tooltip", "Oznacza to, że mogą kierować reklamy na obiekty świata i rekwizyty! (Dodaj tutaj grupy użytkowników, aby im zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "gravitygunsettings_targetPlayerOwned", "Może kierować reklamy na podmioty należące do gracza")
	slib.setLang("gprotect", "pl", "gravitygunsettings_targetPlayerOwned_tooltip", "Oznacza to, że mogą kierować reklamy na podmioty i rekwizyty graczy! (Dodaj tutaj grupy użytkowników, aby im zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "gravitygunsettings_DisableGravityGunPunting", "Wyłącz dziurkowanie działem grawitacyjnym")
	slib.setLang("gprotect", "pl", "gravitygunsettings_DisableGravityGunPunting_tooltip", "To jest rzucany atak pistoletu grawitacyjnego.")
	slib.setLang("gprotect", "pl", "gravitygunsettings_blockedEntities", "Zablokowane elementy")
	slib.setLang("gprotect", "pl", "gravitygunsettings_blockedEntities_tooltip", "Dodaj elementy do tego, a nikt, kto nie należy do grupy obejściowej, nie będzie mógł tego fizycznie przechwycić.")
	slib.setLang("gprotect", "pl", "gravitygunsettings_bypassGroups", "Pomijaj grupy")
	slib.setLang("gprotect", "pl", "gravitygunsettings_bypassGroups_tooltip", "Dodaj grupy użytkowników do tej listy, aby ominąć zablokowane elementy,„ * oznacza wszystkich!")
		
	slib.setLang("gprotect", "pl", "canpropertysettings_enabled", "Enabled")
	slib.setLang("gprotect", "pl", "canpropertysettings_enabled_tooltip", "Włączyć moduł ustawień właściwości can?")
	slib.setLang("gprotect", "pl", "canpropertysettings_targetWorld", "Może kierować na obiekty świata")
	slib.setLang("gprotect", "pl", "canpropertysettings_targetWorld_tooltip", "Oznacza to, że mogą kierować reklamy na obiekty świata i rekwizyty! (Dodaj tutaj grupy użytkowników, aby im zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "canpropertysettings_targetPlayerOwned", "Może kierować reklamy na podmioty należące do gracza")
	slib.setLang("gprotect", "pl", "canpropertysettings_targetPlayerOwned_tooltip", "Oznacza to, że mogą kierować reklamy na elementy i rekwizyty graczy! (Dodaj tutaj grupy użytkowników, aby im zezwolić, * oznacza wszystkich!)")
	slib.setLang("gprotect", "pl", "canpropertysettings_blockedProperties", "Zablokowane właściwości")
	slib.setLang("gprotect", "pl", "canpropertysettings_blockedProperties_tooltip", "Dodaj właściwości do tej listy")
	slib.setLang("gprotect", "pl", "canpropertysettings_blockedPropertiesisBlacklist", "Zablokowane właściwości to czarna lista")
	slib.setLang("gprotect", "pl", "canpropertysettings_blockedPropertiesisBlacklist_tooltip", "Zaznaczenie tej opcji spowoduje, że właściwości z listy nie będą mogły być używane, w przeciwnym razie możesz używać tylko tych właściwości.")
	slib.setLang("gprotect", "pl", "canpropertysettings_blockedEntities", "Zablokowane jednostki")
    slib.setLang("gprotect", "pl", "canpropertysettings_blockedEntities_tooltip", "Dodaj do tego elementy, a nikt poza osobami z grupy obejścia nie będzie mógł go kierować!")
	slib.setLang("gprotect", "pl", "canpropertysettings_bypassGroups", "Pomijaj grupy")
	slib.setLang("gprotect", "pl", "canpropertysettings_bypassGroups_tooltip", "Grupy w tym miejscu pomijają powyższą listę ograniczeń właściwości can!")
		
	slib.setLang("gprotect", "pl", "advdupe2_enabled", "Włączone")
	slib.setLang("gprotect", "pl", "advdupe2_enabled_tooltip", "Czy detekcje powinny powiadamiać personel? NB: Można to wykorzystać do wkurzenia pracowników.")
	slib.setLang("gprotect", "pl", "advdupe2_notifyStaff", "Powiadom personel")
	slib.setLang("gprotect", "pl", "advdupe2_notifyStaff_tooltip", "Czy detekcje powinny powiadamiać personel? NB: Można to wykorzystać do sikania pracowników.")
	slib.setLang("gprotect", "pl", "advdupe2_PreventRopes", "Zapobiegaj pojawianiu się liny")
	slib.setLang("gprotect", "pl", "advdupe2_PreventRopes_tooltip", "Zapobiegaj pojawianiu się lin! (1 = Zapobiegaj powstawaniu, 2 = Stwórz, ale napraw)")
	slib.setLang("gprotect", "pl", "advdupe2_PreventScaling", "Zapobiegaj skalowaniu")
	slib.setLang("gprotect", "pl", "advdupe2_PreventScaling_tooltip", "Zapobiegaj pojawianiu się zwiększonych rekwizytów. (1 = Zapobiegaj tworzeniu się, 2 = Stwórz, ale napraw)")
	slib.setLang("gprotect", "pl", "advdupe2_PreventNoGravity", "Zapobiegaj braku grawitacji")
	slib.setLang("gprotect", "pl", "advdupe2_PreventNoGravity_tooltip", "Zapobiegaj spawnowaniu rekwizytów bez grawitacji. (1 = Zapobiegaj tworzeniu się, 2 = Odradzaj, ale napraw)")
	slib.setLang("gprotect", "pl", "advdupe2_PreventUnfreezeAll", "Zapobiegaj odblokowaniu wszystkich")
	slib.setLang("gprotect", "pl", "advdupe2_PreventUnfreezeAll_tooltip", "Zapobiegaj odblokowywaniu wszystkich rekwizytów. (1 = Zapobiegaj tworzeniu się, 2 = Stwórz, ale napraw)")
	slib.setLang("gprotect", "pl", "advdupe2_BlacklistedCollisionGroups", "Grupy kolizji na czarnej liście")
	slib.setLang("gprotect", "pl", "advdupe2_BlacklistedCollisionGroups_tooltip", "Chroni to przed rekwizytami, na które nie możesz kierować. Uwaga: wartości muszą być kolizjami ENUM")
	slib.setLang("gprotect", "pl", "advdupe2_WhitelistedConstraints", "Biała lista ograniczeń")
	slib.setLang("gprotect", "pl", "advdupe2_WhitelistedConstraints_tooltip", "Ma to na celu zapobieżenie powstawaniu niechcianych ograniczeń.")

	slib.setLang("gprotect", "pl", "miscs_enabled", "Enabled")
	slib.setLang("gprotect", "pl", "miscs_enabled_tooltip", "Włączyć moduł miscs?")
	slib.setLang("gprotect", "pl", "miscs_ClearDecals", "Wyczyść licznik kalkomanii")
	slib.setLang("gprotect", "pl", "miscs_ClearDecals_tooltip", "Licznik czasu w sekundach, to wyczyści oznaczenia wszystkich graczy na liczniku :)")
	slib.setLang("gprotect", "pl", "miscs_NoBlackoutGlitch", "Zapobiegaj exploitom blackout")
	slib.setLang("gprotect", "pl", "miscs_NoBlackoutGlitch_tooltip", "Int to zapobiegnie exploitowi 'pp / copy' (1 = Notify, 2 = kick, 3 = ban).")
	slib.setLang("gprotect", "pl", "miscs_FadingDoorLag", "Zapobiegaj zanikaniu opóźnienia drzwi")
	slib.setLang("gprotect", "pl", "miscs_FadingDoorLag_tooltip", "Zapobiegnie to awariom serwera przy użyciu narzędzia fading door.")
	slib.setLang("gprotect", "pl", "miscs_DisableMotion", "Wyłącz ruch")
	slib.setLang("gprotect", "pl", "miscs_DisableMotion_tooltip", "Spowoduje to wyłączenie ruchu dla wszystkich obiektów na czarnej liście.")
	slib.setLang("gprotect", "pl", "miscs_freezeOnSpawn", "Zatrzymaj przy spawn")
	slib.setLang("gprotect", "pl", "miscs_freezeOnSpawn_tooltip", "To zamrozi rekwizyty przy spawn")
	slib.setLang("gprotect", "pl", "miscs_preventFadingDoorAbuse", "Zapobiegaj nadużyciom związanym z zanikaniem drzwi")
	slib.setLang("gprotect", "pl", "miscs_preventFadingDoorAbuse_tooltip", "Zapobiegnie to zasłanianiu ludzi w zanikających drzwiach")
	slib.setLang("gprotect", "pl", "miscs_preventSpawnNearbyPlayer", "Zapobiegaj spawnowaniu gracza w pobliżu")
	slib.setLang("gprotect", "pl", "miscs_preventSpawnNearbyPlayer_tooltip", "Jeśli ktoś jest bliżej miejsca odrodzenia niż ta wartość, nie spowoduje to odrodzenia rekwizytu (0 oznacza wyłączone)")
	slib.setLang("gprotect", "pl", "miscs_DRPEntForceOwnership", "Wymuś własność jednostek DarkRP")
    slib.setLang("gprotect", "pl", "miscs_DRPEntForceOwnership_tooltip", "Wymusi to własność podmiotów kupionych w menu F4")
end
--addons/skeypad_1.2.36/lua/s_keypad/languages/sh_turkish.lua:
return gluapack()()
--addons/skeypad_1.2.36/lua/s_keypad/client/imgui.lua:
return gluapack()()
--lua/autorun/snoop_dogg_pm.lua.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/languages/sh_german.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_customcommand.lua:
local replacements = {
    ["{sid64}"] = function(ply) return ply:SteamID64() end,
    ["{sid}"] = function(ply) return ply:SteamID() end,
    ["{name}"] = function(ply) return ply:Nick() end
}

sReward.RegisterReward("custom_command", function(ply, str)
    for k,v in pairs(replacements) do
        str = string.Replace(str, k, v(ply))
    end

    local packed = string.Explode(" ", str)

    RunConsoleCommand(unpack(packed))
end)

--addons/sreward_1.5.30/lua/s_reward/rewards/sh_darkrpmoney.lua:
sReward.RegisterReward("darkrp_money", function(ply, amount)
    if !isfunction(ply.addMoney) then return end
    ply:addMoney(amount)
end, Material("sreward/money.png", "smooth"))
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_essentialpacks.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_voidcases.lua:
sReward.RegisterReward("voidcases_giveitem", function(ply, item_name)
    RunConsoleCommand("voidcases_giveitem", ply:SteamID64(), item_name)
end)
--lua/streamradio_core/string_accents.lua:
local StreamRadioLib = StreamRadioLib

local LIB = StreamRadioLib.String

--[[
Used rulesets:
    custom
    default
    custom-fonts
    austrian
    azerbaijani
    croatian
    czech
    danish
    esperanto
    estonian
    finnish
    french
    german
    hungarian
    italian
    latvian
    lithuanian
    norwegian
    polish
    portuguese-brazil
    romanian
    slovak
    swedish
    turkish
    turkmen
    vietnamese
]]

local g_accentMap = {
	[0x000040] = "a",     -- @
	[0x0000A1] = "i",     -- ¡
	[0x0000A7] = "S",     -- §
	[0x0000A9] = "C",     -- ©
	[0x0000AA] = "a",     -- ª
	[0x0000AE] = "R",     -- ®
	[0x0000AF] = "-",     -- ¯
	[0x0000B0] = "o",     -- °
	[0x0000B2] = "2",     -- ²
	[0x0000B3] = "3",     -- ³
	[0x0000B7] = ".",     -- ·
	[0x0000B9] = "1",     -- ¹
	[0x0000BA] = "o",     -- º
	[0x0000C0] = "A",     -- À
	[0x0000C1] = "A",     -- Á
	[0x0000C2] = "A",     -- Â
	[0x0000C3] = "A",     -- Ã
	[0x0000C4] = "A",     -- Ä
	[0x0000C5] = "A",     -- Å
	[0x0000C6] = "AE",    -- Æ
	[0x0000C7] = "C",     -- Ç
	[0x0000C8] = "E",     -- È
	[0x0000C9] = "E",     -- É
	[0x0000CA] = "E",     -- Ê
	[0x0000CB] = "E",     -- Ë
	[0x0000CC] = "I",     -- Ì
	[0x0000CD] = "I",     -- Í
	[0x0000CE] = "I",     -- Î
	[0x0000CF] = "I",     -- Ï
	[0x0000D0] = "Dj",    -- Ð
	[0x0000D1] = "N",     -- Ñ
	[0x0000D2] = "O",     -- Ò
	[0x0000D3] = "O",     -- Ó
	[0x0000D4] = "O",     -- Ô
	[0x0000D5] = "O",     -- Õ
	[0x0000D6] = "O",     -- Ö
	[0x0000D8] = "OE",    -- Ø
	[0x0000D9] = "U",     -- Ù
	[0x0000DA] = "U",     -- Ú
	[0x0000DB] = "U",     -- Û
	[0x0000DC] = "U",     -- Ü
	[0x0000DD] = "Y",     -- Ý
	[0x0000DE] = "TH",    -- Þ
	[0x0000DF] = "ss",    -- ß
	[0x0000E0] = "a",     -- à
	[0x0000E1] = "a",     -- á
	[0x0000E2] = "a",     -- â
	[0x0000E3] = "a",     -- ã
	[0x0000E4] = "a",     -- ä
	[0x0000E5] = "a",     -- å
	[0x0000E6] = "ae",    -- æ
	[0x0000E7] = "c",     -- ç
	[0x0000E8] = "e",     -- è
	[0x0000E9] = "e",     -- é
	[0x0000EA] = "e",     -- ê
	[0x0000EB] = "e",     -- ë
	[0x0000EC] = "i",     -- ì
	[0x0000ED] = "i",     -- í
	[0x0000EE] = "i",     -- î
	[0x0000EF] = "i",     -- ï
	[0x0000F0] = "dj",    -- ð
	[0x0000F1] = "n",     -- ñ
	[0x0000F2] = "o",     -- ò
	[0x0000F3] = "o",     -- ó
	[0x0000F4] = "o",     -- ô
	[0x0000F5] = "o",     -- õ
	[0x0000F6] = "o",     -- ö
	[0x0000F8] = "oe",    -- ø
	[0x0000F9] = "u",     -- ù
	[0x0000FA] = "u",     -- ú
	[0x0000FB] = "u",     -- û
	[0x0000FC] = "u",     -- ü
	[0x0000FD] = "y",     -- ý
	[0x0000FE] = "th",    -- þ
	[0x0000FF] = "y",     -- ÿ
	[0x000100] = "A",     -- Ā
	[0x000101] = "a",     -- ā
	[0x000102] = "A",     -- Ă
	[0x000103] = "a",     -- ă
	[0x000104] = "A",     -- Ą
	[0x000105] = "a",     -- ą
	[0x000106] = "C",     -- Ć
	[0x000107] = "c",     -- ć
	[0x000108] = "C",     -- Ĉ
	[0x000109] = "c",     -- ĉ
	[0x00010A] = "C",     -- Ċ
	[0x00010B] = "c",     -- ċ
	[0x00010C] = "C",     -- Č
	[0x00010D] = "c",     -- č
	[0x00010E] = "D",     -- Ď
	[0x00010F] = "d",     -- ď
	[0x000110] = "D",     -- Đ
	[0x000111] = "d",     -- đ
	[0x000112] = "E",     -- Ē
	[0x000113] = "e",     -- ē
	[0x000114] = "E",     -- Ĕ
	[0x000115] = "e",     -- ĕ
	[0x000116] = "E",     -- Ė
	[0x000117] = "e",     -- ė
	[0x000118] = "E",     -- Ę
	[0x000119] = "e",     -- ę
	[0x00011A] = "E",     -- Ě
	[0x00011B] = "e",     -- ě
	[0x00011C] = "G",     -- Ĝ
	[0x00011D] = "g",     -- ĝ
	[0x00011E] = "G",     -- Ğ
	[0x00011F] = "g",     -- ğ
	[0x000120] = "G",     -- Ġ
	[0x000121] = "g",     -- ġ
	[0x000122] = "G",     -- Ģ
	[0x000123] = "g",     -- ģ
	[0x000124] = "H",     -- Ĥ
	[0x000125] = "h",     -- ĥ
	[0x000126] = "H",     -- Ħ
	[0x000127] = "h",     -- ħ
	[0x000128] = "I",     -- Ĩ
	[0x000129] = "i",     -- ĩ
	[0x00012A] = "I",     -- Ī
	[0x00012B] = "i",     -- ī
	[0x00012C] = "I",     -- Ĭ
	[0x00012D] = "i",     -- ĭ
	[0x00012E] = "I",     -- Į
	[0x00012F] = "i",     -- į
	[0x000130] = "I",     -- İ
	[0x000131] = "i",     -- ı
	[0x000132] = "IJ",    -- Ĳ
	[0x000133] = "ij",    -- ĳ
	[0x000134] = "J",     -- Ĵ
	[0x000135] = "j",     -- ĵ
	[0x000136] = "K",     -- Ķ
	[0x000137] = "k",     -- ķ
	[0x000139] = "L",     -- Ĺ
	[0x00013A] = "l",     -- ĺ
	[0x00013B] = "L",     -- Ļ
	[0x00013C] = "l",     -- ļ
	[0x00013D] = "L",     -- Ľ
	[0x00013E] = "l",     -- ľ
	[0x00013F] = "L",     -- Ŀ
	[0x000140] = "l",     -- ŀ
	[0x000141] = "L",     -- Ł
	[0x000142] = "l",     -- ł
	[0x000143] = "N",     -- Ń
	[0x000144] = "n",     -- ń
	[0x000145] = "N",     -- Ņ
	[0x000146] = "n",     -- ņ
	[0x000147] = "N",     -- Ň
	[0x000148] = "n",     -- ň
	[0x000149] = "n",     -- ŉ
	[0x00014C] = "O",     -- Ō
	[0x00014D] = "o",     -- ō
	[0x00014E] = "O",     -- Ŏ
	[0x00014F] = "o",     -- ŏ
	[0x000150] = "O",     -- Ő
	[0x000151] = "o",     -- ő
	[0x000152] = "OE",    -- Œ
	[0x000153] = "oe",    -- œ
	[0x000154] = "R",     -- Ŕ
	[0x000155] = "r",     -- ŕ
	[0x000156] = "R",     -- Ŗ
	[0x000157] = "r",     -- ŗ
	[0x000158] = "R",     -- Ř
	[0x000159] = "r",     -- ř
	[0x00015A] = "S",     -- Ś
	[0x00015B] = "s",     -- ś
	[0x00015C] = "S",     -- Ŝ
	[0x00015D] = "s",     -- ŝ
	[0x00015E] = "S",     -- Ş
	[0x00015F] = "s",     -- ş
	[0x000160] = "S",     -- Š
	[0x000161] = "s",     -- š
	[0x000162] = "T",     -- Ţ
	[0x000163] = "t",     -- ţ
	[0x000164] = "T",     -- Ť
	[0x000165] = "t",     -- ť
	[0x000166] = "T",     -- Ŧ
	[0x000167] = "t",     -- ŧ
	[0x000168] = "U",     -- Ũ
	[0x000169] = "u",     -- ũ
	[0x00016A] = "U",     -- Ū
	[0x00016B] = "u",     -- ū
	[0x00016C] = "U",     -- Ŭ
	[0x00016D] = "u",     -- ŭ
	[0x00016E] = "U",     -- Ů
	[0x00016F] = "u",     -- ů
	[0x000170] = "U",     -- Ű
	[0x000171] = "u",     -- ű
	[0x000172] = "U",     -- Ų
	[0x000173] = "u",     -- ų
	[0x000174] = "W",     -- Ŵ
	[0x000175] = "w",     -- ŵ
	[0x000176] = "Y",     -- Ŷ
	[0x000177] = "y",     -- ŷ
	[0x000178] = "Y",     -- Ÿ
	[0x000179] = "Z",     -- Ź
	[0x00017A] = "z",     -- ź
	[0x00017B] = "Z",     -- Ż
	[0x00017C] = "z",     -- ż
	[0x00017D] = "Z",     -- Ž
	[0x00017E] = "z",     -- ž
	[0x00017F] = "s",     -- ſ
	[0x000183] = "g",     -- ƃ
	[0x00018F] = "E",     -- Ə
	[0x000192] = "f",     -- ƒ
	[0x0001A0] = "O",     -- Ơ
	[0x0001A1] = "o",     -- ơ
	[0x0001AF] = "U",     -- Ư
	[0x0001B0] = "u",     -- ư
	[0x0001CD] = "A",     -- Ǎ
	[0x0001CE] = "a",     -- ǎ
	[0x0001CF] = "I",     -- Ǐ
	[0x0001D0] = "i",     -- ǐ
	[0x0001D1] = "O",     -- Ǒ
	[0x0001D2] = "o",     -- ǒ
	[0x0001D3] = "U",     -- Ǔ
	[0x0001D4] = "u",     -- ǔ
	[0x0001D5] = "U",     -- Ǖ
	[0x0001D6] = "u",     -- ǖ
	[0x0001D7] = "U",     -- Ǘ
	[0x0001D8] = "u",     -- ǘ
	[0x0001D9] = "U",     -- Ǚ
	[0x0001DA] = "u",     -- ǚ
	[0x0001DB] = "U",     -- Ǜ
	[0x0001DC] = "u",     -- ǜ
	[0x0001DD] = "e",     -- ǝ
	[0x0001EB] = "q",     -- ǫ
	[0x0001FA] = "A",     -- Ǻ
	[0x0001FB] = "a",     -- ǻ
	[0x0001FC] = "AE",    -- Ǽ
	[0x0001FD] = "ae",    -- ǽ
	[0x0001FE] = "O",     -- Ǿ
	[0x0001FF] = "o",     -- ǿ
	[0x000218] = "S",     -- Ș
	[0x000219] = "s",     -- ș
	[0x00021A] = "T",     -- Ț
	[0x00021B] = "t",     -- ț
	[0x000250] = "a",     -- ɐ
	[0x000254] = "c",     -- ɔ
	[0x000259] = "e",     -- ə
	[0x00025F] = "f",     -- ɟ
	[0x000262] = "g",     -- ɢ
	[0x000265] = "h",     -- ɥ
	[0x00026A] = "i",     -- ɪ
	[0x00026F] = "m",     -- ɯ
	[0x000274] = "n",     -- ɴ
	[0x000279] = "r",     -- ɹ
	[0x00027E] = "j",     -- ɾ
	[0x000280] = "r",     -- ʀ
	[0x000285] = "S",     -- ʅ
	[0x000287] = "t",     -- ʇ
	[0x00028C] = "v",     -- ʌ
	[0x00028D] = "w",     -- ʍ
	[0x00028E] = "y",     -- ʎ
	[0x00028F] = "y",     -- ʏ
	[0x000299] = "b",     -- ʙ
	[0x00029C] = "h",     -- ʜ
	[0x00029E] = "k",     -- ʞ
	[0x00029F] = "l",     -- ʟ
	[0x0003BC] = "u",     -- μ
	[0x00043E] = "o",     -- о
	[0x000493] = "f",     -- ғ
	[0x001430] = "A",     -- ᐰ
	[0x001D00] = "a",     -- ᴀ
	[0x001D04] = "c",     -- ᴄ
	[0x001D05] = "d",     -- ᴅ
	[0x001D07] = "e",     -- ᴇ
	[0x001D09] = "i",     -- ᴉ
	[0x001D0A] = "j",     -- ᴊ
	[0x001D0B] = "k",     -- ᴋ
	[0x001D0D] = "m",     -- ᴍ
	[0x001D0F] = "o",     -- ᴏ
	[0x001D18] = "p",     -- ᴘ
	[0x001D1B] = "t",     -- ᴛ
	[0x001D1C] = "u",     -- ᴜ
	[0x001D20] = "v",     -- ᴠ
	[0x001D21] = "w",     -- ᴡ
	[0x001D22] = "z",     -- ᴢ
	[0x001E9E] = "SS",    -- ẞ
	[0x001EA0] = "A",     -- Ạ
	[0x001EA1] = "a",     -- ạ
	[0x001EA2] = "A",     -- Ả
	[0x001EA3] = "a",     -- ả
	[0x001EA4] = "A",     -- Ấ
	[0x001EA5] = "a",     -- ấ
	[0x001EA6] = "A",     -- Ầ
	[0x001EA7] = "a",     -- ầ
	[0x001EA8] = "A",     -- Ẩ
	[0x001EA9] = "a",     -- ẩ
	[0x001EAA] = "A",     -- Ẫ
	[0x001EAB] = "a",     -- ẫ
	[0x001EAC] = "A",     -- Ậ
	[0x001EAD] = "a",     -- ậ
	[0x001EAE] = "A",     -- Ắ
	[0x001EAF] = "a",     -- ắ
	[0x001EB0] = "A",     -- Ằ
	[0x001EB1] = "a",     -- ằ
	[0x001EB2] = "A",     -- Ẳ
	[0x001EB3] = "a",     -- ẳ
	[0x001EB4] = "A",     -- Ẵ
	[0x001EB5] = "a",     -- ẵ
	[0x001EB6] = "A",     -- Ặ
	[0x001EB7] = "a",     -- ặ
	[0x001EB8] = "E",     -- Ẹ
	[0x001EB9] = "e",     -- ẹ
	[0x001EBA] = "E",     -- Ẻ
	[0x001EBB] = "e",     -- ẻ
	[0x001EBC] = "E",     -- Ẽ
	[0x001EBD] = "e",     -- ẽ
	[0x001EBE] = "E",     -- Ế
	[0x001EBF] = "e",     -- ế
	[0x001EC0] = "E",     -- Ề
	[0x001EC1] = "e",     -- ề
	[0x001EC2] = "E",     -- Ể
	[0x001EC3] = "e",     -- ể
	[0x001EC4] = "E",     -- Ễ
	[0x001EC5] = "e",     -- ễ
	[0x001EC6] = "E",     -- Ệ
	[0x001EC7] = "e",     -- ệ
	[0x001EC8] = "I",     -- Ỉ
	[0x001EC9] = "i",     -- ỉ
	[0x001ECA] = "I",     -- Ị
	[0x001ECB] = "i",     -- ị
	[0x001ECC] = "O",     -- Ọ
	[0x001ECD] = "o",     -- ọ
	[0x001ECE] = "O",     -- Ỏ
	[0x001ECF] = "o",     -- ỏ
	[0x001ED0] = "O",     -- Ố
	[0x001ED1] = "o",     -- ố
	[0x001ED2] = "O",     -- Ồ
	[0x001ED3] = "o",     -- ồ
	[0x001ED4] = "O",     -- Ổ
	[0x001ED5] = "o",     -- ổ
	[0x001ED6] = "O",     -- Ỗ
	[0x001ED7] = "o",     -- ỗ
	[0x001ED8] = "O",     -- Ộ
	[0x001ED9] = "o",     -- ộ
	[0x001EDA] = "O",     -- Ớ
	[0x001EDB] = "o",     -- ớ
	[0x001EDC] = "O",     -- Ờ
	[0x001EDD] = "o",     -- ờ
	[0x001EDE] = "O",     -- Ở
	[0x001EDF] = "o",     -- ở
	[0x001EE0] = "O",     -- Ỡ
	[0x001EE1] = "o",     -- ỡ
	[0x001EE2] = "O",     -- Ợ
	[0x001EE3] = "o",     -- ợ
	[0x001EE4] = "U",     -- Ụ
	[0x001EE5] = "u",     -- ụ
	[0x001EE6] = "U",     -- Ủ
	[0x001EE7] = "u",     -- ủ
	[0x001EE8] = "U",     -- Ứ
	[0x001EE9] = "u",     -- ứ
	[0x001EEA] = "U",     -- Ừ
	[0x001EEB] = "u",     -- ừ
	[0x001EEC] = "U",     -- Ử
	[0x001EED] = "u",     -- ử
	[0x001EEE] = "U",     -- Ữ
	[0x001EEF] = "u",     -- ữ
	[0x001EF0] = "U",     -- Ự
	[0x001EF1] = "u",     -- ự
	[0x001EF2] = "Y",     -- Ỳ
	[0x001EF3] = "y",     -- ỳ
	[0x001EF4] = "Y",     -- Ỵ
	[0x001EF5] = "y",     -- ỵ
	[0x001EF6] = "Y",     -- Ỷ
	[0x001EF7] = "y",     -- ỷ
	[0x001EF8] = "Y",     -- Ỹ
	[0x001EF9] = "y",     -- ỹ
	[0x002013] = "-",     -- –
	[0x002014] = "-",     -- —
	[0x002020] = "t",     -- †
	[0x002025] = "..",    -- ‥
	[0x002026] = "...",   -- …
	[0x00203C] = "!!",    -- ‼
	[0x00203E] = "-",     -- ‾
	[0x002074] = "4",     -- ⁴
	[0x002075] = "5",     -- ⁵
	[0x002076] = "6",     -- ⁶
	[0x002077] = "7",     -- ⁷
	[0x002078] = "8",     -- ⁸
	[0x002079] = "9",     -- ⁹
	[0x00207F] = "n",     -- ⁿ
	[0x002081] = "1",     -- ₁
	[0x002082] = "2",     -- ₂
	[0x002083] = "3",     -- ₃
	[0x002084] = "4",     -- ₄
	[0x002085] = "5",     -- ₅
	[0x002086] = "6",     -- ₆
	[0x002087] = "7",     -- ₇
	[0x002088] = "8",     -- ₈
	[0x002089] = "9",     -- ₉
	[0x0020AC] = "E",     -- €
	[0x002102] = "C",     -- ℂ
	[0x002103] = "C",     -- ℃
	[0x002109] = "F",     -- ℉
	[0x00210C] = "H",     -- ℌ
	[0x00210D] = "H",     -- ℍ
	[0x00210E] = "h",     -- ℎ
	[0x002111] = "I",     -- ℑ
	[0x002115] = "N",     -- ℕ
	[0x002117] = "P",     -- ℗
	[0x002119] = "P",     -- ℙ
	[0x00211A] = "Q",     -- ℚ
	[0x00211C] = "R",     -- ℜ
	[0x00211D] = "R",     -- ℝ
	[0x002122] = "tm",    -- ™
	[0x002124] = "Z",     -- ℤ
	[0x002128] = "Z",     -- ℨ
	[0x00212D] = "C",     -- ℭ
	[0x00216C] = "L",     -- Ⅼ
	[0x002203] = "3",     -- ∃
	[0x002208] = "E",     -- ∈
	[0x00220B] = "3",     -- ∋
	[0x00220F] = "N",     -- ∏
	[0x002210] = "U",     -- ∐
	[0x002211] = "E",     -- ∑
	[0x00221E] = "oo",    -- ∞
	[0x00222B] = "S",     -- ∫
	[0x0022C0] = "A",     -- ⋀
	[0x0022C1] = "V",     -- ⋁
	[0x0022C2] = "U",     -- ⋂
	[0x0022C3] = "U",     -- ⋃
	[0x0024B6] = "A",     -- Ⓐ
	[0x0024B7] = "B",     -- Ⓑ
	[0x0024B8] = "C",     -- Ⓒ
	[0x0024B9] = "D",     -- Ⓓ
	[0x0024BA] = "E",     -- Ⓔ
	[0x0024BB] = "F",     -- Ⓕ
	[0x0024BC] = "G",     -- Ⓖ
	[0x0024BD] = "H",     -- Ⓗ
	[0x0024BE] = "I",     -- Ⓘ
	[0x0024BF] = "J",     -- Ⓙ
	[0x0024C0] = "K",     -- Ⓚ
	[0x0024C1] = "L",     -- Ⓛ
	[0x0024C2] = "M",     -- Ⓜ
	[0x0024C3] = "N",     -- Ⓝ
	[0x0024C4] = "O",     -- Ⓞ
	[0x0024C5] = "P",     -- Ⓟ
	[0x0024C6] = "Q",     -- Ⓠ
	[0x0024C7] = "R",     -- Ⓡ
	[0x0024C8] = "S",     -- Ⓢ
	[0x0024C9] = "T",     -- Ⓣ
	[0x0024CA] = "U",     -- Ⓤ
	[0x0024CB] = "V",     -- Ⓥ
	[0x0024CC] = "W",     -- Ⓦ
	[0x0024CD] = "X",     -- Ⓧ
	[0x0024CE] = "Y",     -- Ⓨ
	[0x0024CF] = "Z",     -- Ⓩ
	[0x0024D0] = "a",     -- ⓐ
	[0x0024D1] = "b",     -- ⓑ
	[0x0024D2] = "c",     -- ⓒ
	[0x0024D3] = "d",     -- ⓓ
	[0x0024D4] = "e",     -- ⓔ
	[0x0024D5] = "f",     -- ⓕ
	[0x0024D6] = "g",     -- ⓖ
	[0x0024D7] = "h",     -- ⓗ
	[0x0024D8] = "i",     -- ⓘ
	[0x0024D9] = "j",     -- ⓙ
	[0x0024DA] = "k",     -- ⓚ
	[0x0024DB] = "l",     -- ⓛ
	[0x0024DC] = "m",     -- ⓜ
	[0x0024DD] = "n",     -- ⓝ
	[0x0024DE] = "o",     -- ⓞ
	[0x0024DF] = "p",     -- ⓟ
	[0x0024E0] = "q",     -- ⓠ
	[0x0024E1] = "r",     -- ⓡ
	[0x0024E2] = "s",     -- ⓢ
	[0x0024E3] = "t",     -- ⓣ
	[0x0024E4] = "u",     -- ⓤ
	[0x0024E5] = "v",     -- ⓥ
	[0x0024E6] = "w",     -- ⓦ
	[0x0024E7] = "x",     -- ⓧ
	[0x0024E8] = "y",     -- ⓨ
	[0x0024E9] = "z",     -- ⓩ
	[0x01D400] = "A",     -- 𝐀
	[0x01D401] = "B",     -- 𝐁
	[0x01D402] = "C",     -- 𝐂
	[0x01D403] = "D",     -- 𝐃
	[0x01D404] = "E",     -- 𝐄
	[0x01D405] = "F",     -- 𝐅
	[0x01D406] = "G",     -- 𝐆
	[0x01D407] = "H",     -- 𝐇
	[0x01D408] = "I",     -- 𝐈
	[0x01D409] = "J",     -- 𝐉
	[0x01D40A] = "K",     -- 𝐊
	[0x01D40B] = "L",     -- 𝐋
	[0x01D40C] = "M",     -- 𝐌
	[0x01D40D] = "N",     -- 𝐍
	[0x01D40E] = "O",     -- 𝐎
	[0x01D40F] = "P",     -- 𝐏
	[0x01D410] = "Q",     -- 𝐐
	[0x01D411] = "R",     -- 𝐑
	[0x01D412] = "S",     -- 𝐒
	[0x01D413] = "T",     -- 𝐓
	[0x01D414] = "U",     -- 𝐔
	[0x01D415] = "V",     -- 𝐕
	[0x01D416] = "W",     -- 𝐖
	[0x01D417] = "X",     -- 𝐗
	[0x01D418] = "Y",     -- 𝐘
	[0x01D419] = "Z",     -- 𝐙
	[0x01D41A] = "a",     -- 𝐚
	[0x01D41B] = "b",     -- 𝐛
	[0x01D41C] = "c",     -- 𝐜
	[0x01D41D] = "d",     -- 𝐝
	[0x01D41E] = "e",     -- 𝐞
	[0x01D41F] = "f",     -- 𝐟
	[0x01D420] = "g",     -- 𝐠
	[0x01D421] = "h",     -- 𝐡
	[0x01D422] = "i",     -- 𝐢
	[0x01D423] = "j",     -- 𝐣
	[0x01D424] = "k",     -- 𝐤
	[0x01D425] = "l",     -- 𝐥
	[0x01D426] = "m",     -- 𝐦
	[0x01D427] = "n",     -- 𝐧
	[0x01D428] = "o",     -- 𝐨
	[0x01D429] = "p",     -- 𝐩
	[0x01D42A] = "q",     -- 𝐪
	[0x01D42B] = "r",     -- 𝐫
	[0x01D42C] = "s",     -- 𝐬
	[0x01D42D] = "t",     -- 𝐭
	[0x01D42E] = "u",     -- 𝐮
	[0x01D42F] = "v",     -- 𝐯
	[0x01D430] = "w",     -- 𝐰
	[0x01D431] = "x",     -- 𝐱
	[0x01D432] = "y",     -- 𝐲
	[0x01D433] = "z",     -- 𝐳
	[0x01D434] = "A",     -- 𝐴
	[0x01D435] = "B",     -- 𝐵
	[0x01D436] = "C",     -- 𝐶
	[0x01D437] = "D",     -- 𝐷
	[0x01D438] = "E",     -- 𝐸
	[0x01D439] = "F",     -- 𝐹
	[0x01D43A] = "G",     -- 𝐺
	[0x01D43B] = "H",     -- 𝐻
	[0x01D43C] = "I",     -- 𝐼
	[0x01D43D] = "J",     -- 𝐽
	[0x01D43E] = "K",     -- 𝐾
	[0x01D43F] = "L",     -- 𝐿
	[0x01D440] = "M",     -- 𝑀
	[0x01D441] = "N",     -- 𝑁
	[0x01D442] = "O",     -- 𝑂
	[0x01D443] = "P",     -- 𝑃
	[0x01D444] = "Q",     -- 𝑄
	[0x01D445] = "R",     -- 𝑅
	[0x01D446] = "S",     -- 𝑆
	[0x01D447] = "T",     -- 𝑇
	[0x01D448] = "U",     -- 𝑈
	[0x01D449] = "V",     -- 𝑉
	[0x01D44A] = "W",     -- 𝑊
	[0x01D44B] = "X",     -- 𝑋
	[0x01D44C] = "Y",     -- 𝑌
	[0x01D44D] = "Z",     -- 𝑍
	[0x01D44E] = "a",     -- 𝑎
	[0x01D44F] = "b",     -- 𝑏
	[0x01D450] = "c",     -- 𝑐
	[0x01D451] = "d",     -- 𝑑
	[0x01D452] = "e",     -- 𝑒
	[0x01D453] = "f",     -- 𝑓
	[0x01D454] = "g",     -- 𝑔
	[0x01D456] = "i",     -- 𝑖
	[0x01D457] = "j",     -- 𝑗
	[0x01D458] = "k",     -- 𝑘
	[0x01D459] = "l",     -- 𝑙
	[0x01D45A] = "m",     -- 𝑚
	[0x01D45B] = "n",     -- 𝑛
	[0x01D45C] = "o",     -- 𝑜
	[0x01D45D] = "p",     -- 𝑝
	[0x01D45E] = "q",     -- 𝑞
	[0x01D45F] = "r",     -- 𝑟
	[0x01D460] = "s",     -- 𝑠
	[0x01D461] = "t",     -- 𝑡
	[0x01D462] = "u",     -- 𝑢
	[0x01D463] = "v",     -- 𝑣
	[0x01D464] = "w",     -- 𝑤
	[0x01D465] = "x",     -- 𝑥
	[0x01D466] = "y",     -- 𝑦
	[0x01D467] = "z",     -- 𝑧
	[0x01D49C] = "A",     -- 𝒜
	[0x01D49E] = "C",     -- 𝒞
	[0x01D49F] = "D",     -- 𝒟
	[0x01D4A2] = "G",     -- 𝒢
	[0x01D4A5] = "J",     -- 𝒥
	[0x01D4A6] = "K",     -- 𝒦
	[0x01D4A9] = "N",     -- 𝒩
	[0x01D4AA] = "O",     -- 𝒪
	[0x01D4AB] = "P",     -- 𝒫
	[0x01D4AC] = "Q",     -- 𝒬
	[0x01D4AE] = "S",     -- 𝒮
	[0x01D4AF] = "T",     -- 𝒯
	[0x01D4B0] = "U",     -- 𝒰
	[0x01D4B1] = "V",     -- 𝒱
	[0x01D4B2] = "W",     -- 𝒲
	[0x01D4B3] = "X",     -- 𝒳
	[0x01D4B4] = "Y",     -- 𝒴
	[0x01D4B5] = "Z",     -- 𝒵
	[0x01D4B6] = "a",     -- 𝒶
	[0x01D4B7] = "b",     -- 𝒷
	[0x01D4B8] = "c",     -- 𝒸
	[0x01D4B9] = "d",     -- 𝒹
	[0x01D4BB] = "f",     -- 𝒻
	[0x01D4BD] = "h",     -- 𝒽
	[0x01D4BE] = "i",     -- 𝒾
	[0x01D4BF] = "j",     -- 𝒿
	[0x01D4C0] = "k",     -- 𝓀
	[0x01D4C1] = "l",     -- 𝓁
	[0x01D4C2] = "m",     -- 𝓂
	[0x01D4C3] = "n",     -- 𝓃
	[0x01D4C5] = "p",     -- 𝓅
	[0x01D4C6] = "q",     -- 𝓆
	[0x01D4C7] = "r",     -- 𝓇
	[0x01D4C8] = "s",     -- 𝓈
	[0x01D4C9] = "t",     -- 𝓉
	[0x01D4CA] = "u",     -- 𝓊
	[0x01D4CB] = "v",     -- 𝓋
	[0x01D4CC] = "w",     -- 𝓌
	[0x01D4CD] = "x",     -- 𝓍
	[0x01D4CE] = "y",     -- 𝓎
	[0x01D4CF] = "z",     -- 𝓏
	[0x01D504] = "A",     -- 𝔄
	[0x01D505] = "B",     -- 𝔅
	[0x01D507] = "D",     -- 𝔇
	[0x01D508] = "E",     -- 𝔈
	[0x01D509] = "F",     -- 𝔉
	[0x01D50A] = "G",     -- 𝔊
	[0x01D50D] = "J",     -- 𝔍
	[0x01D50E] = "K",     -- 𝔎
	[0x01D50F] = "L",     -- 𝔏
	[0x01D510] = "M",     -- 𝔐
	[0x01D511] = "N",     -- 𝔑
	[0x01D512] = "O",     -- 𝔒
	[0x01D513] = "P",     -- 𝔓
	[0x01D514] = "Q",     -- 𝔔
	[0x01D516] = "S",     -- 𝔖
	[0x01D517] = "T",     -- 𝔗
	[0x01D518] = "U",     -- 𝔘
	[0x01D519] = "V",     -- 𝔙
	[0x01D51A] = "W",     -- 𝔚
	[0x01D51B] = "X",     -- 𝔛
	[0x01D51C] = "Y",     -- 𝔜
	[0x01D51E] = "a",     -- 𝔞
	[0x01D51F] = "b",     -- 𝔟
	[0x01D520] = "c",     -- 𝔠
	[0x01D521] = "d",     -- 𝔡
	[0x01D522] = "e",     -- 𝔢
	[0x01D523] = "f",     -- 𝔣
	[0x01D524] = "g",     -- 𝔤
	[0x01D525] = "h",     -- 𝔥
	[0x01D526] = "i",     -- 𝔦
	[0x01D527] = "j",     -- 𝔧
	[0x01D528] = "k",     -- 𝔨
	[0x01D529] = "l",     -- 𝔩
	[0x01D52A] = "m",     -- 𝔪
	[0x01D52B] = "n",     -- 𝔫
	[0x01D52C] = "o",     -- 𝔬
	[0x01D52D] = "p",     -- 𝔭
	[0x01D52E] = "q",     -- 𝔮
	[0x01D52F] = "r",     -- 𝔯
	[0x01D530] = "s",     -- 𝔰
	[0x01D531] = "t",     -- 𝔱
	[0x01D532] = "u",     -- 𝔲
	[0x01D533] = "v",     -- 𝔳
	[0x01D534] = "w",     -- 𝔴
	[0x01D535] = "x",     -- 𝔵
	[0x01D536] = "y",     -- 𝔶
	[0x01D537] = "z",     -- 𝔷
	[0x01D538] = "A",     -- 𝔸
	[0x01D539] = "B",     -- 𝔹
	[0x01D53B] = "D",     -- 𝔻
	[0x01D53C] = "E",     -- 𝔼
	[0x01D53D] = "F",     -- 𝔽
	[0x01D53E] = "G",     -- 𝔾
	[0x01D540] = "I",     -- 𝕀
	[0x01D541] = "J",     -- 𝕁
	[0x01D542] = "K",     -- 𝕂
	[0x01D543] = "L",     -- 𝕃
	[0x01D544] = "M",     -- 𝕄
	[0x01D546] = "O",     -- 𝕆
	[0x01D54A] = "S",     -- 𝕊
	[0x01D54B] = "T",     -- 𝕋
	[0x01D54C] = "U",     -- 𝕌
	[0x01D54D] = "V",     -- 𝕍
	[0x01D54E] = "W",     -- 𝕎
	[0x01D54F] = "X",     -- 𝕏
	[0x01D550] = "Y",     -- 𝕐
	[0x01D552] = "a",     -- 𝕒
	[0x01D553] = "b",     -- 𝕓
	[0x01D554] = "c",     -- 𝕔
	[0x01D555] = "d",     -- 𝕕
	[0x01D556] = "e",     -- 𝕖
	[0x01D557] = "f",     -- 𝕗
	[0x01D558] = "g",     -- 𝕘
	[0x01D559] = "h",     -- 𝕙
	[0x01D55A] = "i",     -- 𝕚
	[0x01D55B] = "j",     -- 𝕛
	[0x01D55C] = "k",     -- 𝕜
	[0x01D55D] = "l",     -- 𝕝
	[0x01D55E] = "m",     -- 𝕞
	[0x01D55F] = "n",     -- 𝕟
	[0x01D560] = "o",     -- 𝕠
	[0x01D561] = "p",     -- 𝕡
	[0x01D562] = "q",     -- 𝕢
	[0x01D563] = "r",     -- 𝕣
	[0x01D564] = "s",     -- 𝕤
	[0x01D565] = "t",     -- 𝕥
	[0x01D566] = "u",     -- 𝕦
	[0x01D567] = "v",     -- 𝕧
	[0x01D568] = "w",     -- 𝕨
	[0x01D569] = "x",     -- 𝕩
	[0x01D56A] = "y",     -- 𝕪
	[0x01D56B] = "z",     -- 𝕫
}

function LIB.StripAccents(str, alsoStripHighUnicode)
	str = utf8.force(str)

	local stripped = {}

	for _, codepoint in utf8.codes(str) do
		local char = g_accentMap[codepoint]

		if not char then
			if alsoStripHighUnicode and codepoint > 0x7F then
				continue;
			end

			char = utf8.char(codepoint)
		end

		table.insert(stripped, char)
	end

	stripped = table.concat(stripped)

	return stripped
end

return true


--lua/streamradio_core/util.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Util = StreamRadioLib.Util or {}

local LIB = StreamRadioLib.Util
table.Empty(LIB)

local LIBString = StreamRadioLib.String

local g_debug = false
local g_debug_nextcheck = 0

function LIB.IsDebug()
	local now = RealTime()

	if g_debug_nextcheck > now then
		return g_debug
	end

	g_debug_nextcheck = now + 1
	g_debug = false

	local devconvar = GetConVar("developer")
	if not devconvar then
		return false
	end

	if devconvar:GetInt() <= 0 then
		return false
	end

	g_debug = true
	return true
end

function LIB.GameIsPaused()
	local frametime = FrameTime()

	if frametime > 0 then
		return false
	end

	return true
end

function LIB.ErrorNoHaltWithStack(err)
	err = tostring(err or "")
	ErrorNoHaltWithStack(err)
end

local catchAndNohalt = function(err)
	local msgstring = tostring(err or "")
	msgstring = string.Trim(StreamRadioLib.AddonPrefix .. msgstring) .. "\n"

	LIB.ErrorNoHaltWithStack(err)

	return err
end

function LIB.CatchAndErrorNoHaltWithStack(func, ...)
	return xpcall(func, catchAndNohalt, ...)
end

function LIB.Hash(str)
	str = tostring(str or "")

	local salt = "StreamRadioLib_Hash20230810"

	local data = string.format(
		"[%s][%s]",
		salt,
		str
	)

	local hash = util.SHA256(data)
	return hash
end

local g_uid = 0
function LIB.Uid()
	g_uid = (g_uid + 1) % (2 ^ 30)
	return g_uid
end

local g_createCacheArrayMeta = {
	Set = function(self, cacheid, data, expires)
		if cacheid == nil then
			return
		end

		if data == nil then
			self:Remove(cacheid)
			return
		end

		if self.limit > 0 and self.count > self.limit then
			self:Empty()
		end

		local cache = self.cache
		local cacheItem = cache[cacheid]

		if not cacheItem then
			cacheItem = {}
			cache[cacheid] = cacheItem

			self.count = self.count + 1
		end

		cacheItem.data = data
		cacheItem.expires = expires
	end,

	Get = function(self, cacheid, now)
		if cacheid == nil then
			return nil
		end

		local cache = self.cache
		local cacheItem = cache[cacheid]

		if not cacheItem then
			return nil
		end

		local data = cacheItem.data
		if data == nil then
			self:Remove(cacheid)
			return nil
		end

		now = now or 0
		local expires = cacheItem.expires or 0

		if now > 0 and expires > 0 and expires < now then
			self:Remove(cacheid)
			return nil
		end

		return data
	end,

	Remove = function(self, cacheid)
		if cacheid == nil then
			return
		end

		local cache = self.cache
		if cache[cacheid] == nil then
			return
		end

		cache[cacheid] = nil
		self.count = math.max(self.count - 1, 0)
	end,

	Has = function(self, cacheid, now)
		return self:Get(cacheid, now) ~= nil
	end,

	Empty = function(self)
		LIB.EmptyTableSafe(self.cache)
		self.count = 0
	end,

	Count = function(self)
		return self.count
	end,
}

g_createCacheArrayMeta.__index = g_createCacheArrayMeta

function LIB.CreateCacheArray(limit)
	local cache = {}

	cache.cache = {}
	cache.limit = math.max(limit or 0, 0)
	cache.count = 0

	setmetatable(cache, g_createCacheArrayMeta)

	return cache
end

function LIB.EmptyTableSafe(tab)
	if not tab then
		return
	end

	table.Empty(tab)
end

function LIB.GetMainDirectory(directory)
	local baseDirectory = StreamRadioLib.DataDirectory or ""

	if baseDirectory == "" then
		error("StreamRadioLib.DataDirectory is empty")
		return
	end

	directory = tostring(directory or "")

	local mainPath = baseDirectory .. "/" .. directory
	mainPath = LIBString.NormalizeSlashes(mainPath)

	return mainPath
end

function LIB.CreateDirectoryForFile(path)
	local baseDirectory = StreamRadioLib.DataDirectory or ""

	if baseDirectory == "" then
		return false
	end

	path = tostring(path or "")

	if path == "" then
		return false
	end

	if not string.StartsWith(path, baseDirectory) then
		return false
	end

	local directory = string.GetPathFromFilename(path) or ""
	if directory == "" then return true end

	if not file.IsDir(directory, "DATA") then
		file.CreateDir(directory)
	end

	return file.IsDir(directory, "DATA")
end

function LIB.DeleteFolder(path)
	local baseDirectory = StreamRadioLib.DataDirectory or ""

	if baseDirectory == "" then
		return false
	end

	path = tostring(path or "")

	if path == "" then
		return false
	end

	if not string.StartsWith(path, baseDirectory) then
		return false
	end

	local files, folders = file.Find(path .. "/*", "DATA")

	for k, v in ipairs(files or {}) do
		file.Delete(path .. "/" .. v)
	end

	for k, v in ipairs(folders or {}) do
		LIB.DeleteFolder(path .. "/" .. v)
	end

	file.Delete(path)

	if file.Exists(path, "DATA") then
		return false
	end

	if file.IsDir(path, "DATA") then
		return false
	end

	return true
end

local g_cache_IsValidModel = {}
local g_cache_IsValidModelFile = {}

function LIB.GetDefaultModel()
	local defaultModel = Model("models/sligwolf/grocel/radio/radio.mdl")
	return defaultModel
end

function LIB.IsValidModel(model)
	model = tostring(model or "")

	if g_cache_IsValidModel[model] then
		return true
	end

	g_cache_IsValidModel[model] = nil

	if not LIB.IsValidModelFile(model) then
		return false
	end

	util.PrecacheModel(model)

	if not util.IsValidModel(model) then
		return false
	end

	if not util.IsValidProp(model) then
		return false
	end

	g_cache_IsValidModel[model] = true
	return true
end

function LIB.IsValidModelFile(model)
	model = tostring(model or "")

	if g_cache_IsValidModelFile[model] then
		return true
	end

	g_cache_IsValidModelFile[model] = nil

	if model == "" then
		return false
	end

	if IsUselessModel(model) then
		return false
	end

	if not file.Exists(model, "GAME") then
		return false
	end

	g_cache_IsValidModelFile[model] = true
	return true
end

function LIB.FrameNumber()
	local frame = nil

	if CLIENT then
		frame = FrameNumber()
	else
		frame = engine.TickCount()
	end

	return frame
end

function LIB.RealFrameTime()
	local frameTime = nil

	if CLIENT then
		frameTime = RealFrameTime()
	else
		frameTime = FrameTime()
	end

	return frameTime
end

function LIB.RealTimeFps()
	local fps = LIB.RealFrameTime()

	if fps <= 0 then
		return 0
	end

	fps = 1 / fps

	return fps
end

local g_LastFrameRegister = {}
local g_LastFrameRegisterCount = 0

function LIB.IsSameFrame(id)
	local id = tostring(id or "")
	local lastFrame = g_LastFrameRegister[id]

	local frame = LIB.FrameNumber()

	if not lastFrame or frame ~= lastFrame then

		-- prevent the cache from overflowing
		if g_LastFrameRegisterCount > 1024 then
			LIB.EmptyTableSafe(g_LastFrameRegister)
			g_LastFrameRegisterCount = 0
		end

		g_LastFrameRegister[id] = frame

		if not lastFrame then
			g_LastFrameRegisterCount = g_LastFrameRegisterCount + 1
		end

		return false
	end

	return true
end

function LIB.IsAdmin(ply)
	if CLIENT and not IsValid(ply) then
		ply = LocalPlayer()
	end

	if not IsValid(ply) then
		return false
	end

	if not ply:IsAdmin() then
		return false
	end

	return true
end

function LIB.IsAdminForCMD(ply)
	if not IsValid(ply) then
		return true
	end

	if not LIB.IsAdmin(ply) then
		return false
	end

	return true
end

return true


--lua/streamradio_core/hook.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Hook = StreamRadioLib.Hook or {}

local LIB = StreamRadioLib.Hook
table.Empty(LIB)

local g_namePrefixMain = "3DStreamRadio_mainHook_"
local g_namePrefixCustom = "3DStreamRadio_"
local g_hooks = {}
local g_orderCounter = 0

local function getMainHookIdentifier(eventName)
	local identifier = g_namePrefixMain .. tostring(eventName or "")
	return identifier
end

local function getCustomHookIdentifier(eventName)
	local identifier = g_namePrefixCustom .. tostring(eventName or "")
	return identifier
end

local function CallHooks(hookData, ...)
	-- Called by all hooks the addon adds to the game, including think and tick.
	-- It is a proxy that distribute calls to all internal addon hooks.
	-- This reduces overhead from the native hook library.

	-- Prevent error spams when the addon is not completely loaded
	if not StreamRadioLib then return nil end
	if not StreamRadioLib.Loaded then return nil end

	local byOrder = hookData.byOrder
	if not byOrder then
		return nil
	end

	local benchmarkStart = SysTime()
	local benchmarkEnd = 0
	local benchmark = 0
	local benchmarkAvg = 0

	local lastBenchmarkAvg = hookData.benchmarkAvg or 0

	local r1, r2, r3, r4, r5, r6, r7, r8

	for i, hookItem in ipairs(byOrder) do
		local a, b, c, d, e, f, g, h = hookItem.func(...)

		if a == nil then
			continue
		end

		r1, r2, r3, r4, r5, r6, r7, r8 = a, b, c, d, e, f, g, h
		break
	end

	benchmarkEnd = SysTime()
	benchmark = benchmarkEnd - benchmarkStart
	benchmarkAvg = (lastBenchmarkAvg + benchmark) / 2

	hookData.benchmark = benchmark
	hookData.benchmarkAvg = benchmarkAvg

	if r1 == nil then
		return nil
	end

	return r1, r2, r3, r4, r5, r6, r7, r8
end

local function BuildOrder(hookData)
	hookData.byOrder = nil

	local byName = hookData.byName
	if not byName then
		return
	end

	if table.IsEmpty(byName) then
		return
	end

	local byOrder = table.ClearKeys(byName)

	table.SortByMember(byOrder, "order", true)

	hookData.byOrder = byOrder
end

function LIB.Has(eventName, identifier)
	identifier = tostring(identifier or "")
	eventName = tostring(eventName or "")

	local hookData = g_hooks[eventName]
	if not hookData then
		return false
	end

	local byName = hookData.byName
	if not byName then
		return false
	end

	if not byName[identifier] then
		return false
	end

	return true
end

function LIB.Add(eventName, identifier, func, order)
	if not isfunction(func) then return end

	identifier = tostring(identifier or "")
	eventName = tostring(eventName or "")
	order = tonumber(order or 0) or 0

	if order == 0 then
		order = 1000000 + g_orderCounter * 1000
		g_orderCounter = (g_orderCounter % 1000000) + 1
	end

	LIB.Remove(eventName, identifier)

	g_hooks[eventName] = g_hooks[eventName] or {}
	local hookData = g_hooks[eventName]

	hookData.byName = hookData.byName or {}
	local byName = hookData.byName

	byName[identifier] = {
		order = order,
		func = func,
		identifier = identifier,
	}

	hookData.benchmark = hookData.benchmark or 0
	hookData.benchmarkAvg = hookData.benchmarkAvg or 0

	BuildOrder(hookData)

	if not hookData.hasHook then
		local hookIdentifier = getMainHookIdentifier(eventName)

		hook.Remove(eventName, hookIdentifier)
		hook.Add(eventName, hookIdentifier, function(...)
			return CallHooks(hookData, ...)
		end)

		hookData.hasHook = true
	end
end

function LIB.Remove(eventName, identifier)
	identifier = tostring(identifier or "")
	eventName = tostring(eventName or "")

	local hookData = g_hooks[eventName]
	if not hookData then
		return
	end

	local byName = hookData.byName
	if not byName then
		return
	end

	byName[identifier] = nil

	BuildOrder(hookData)

	if table.IsEmpty(byName) then
		local hookIdentifier = getMainHookIdentifier(eventName)

		hook.Remove(eventName, hookIdentifier)
		hookData.hasHook = nil
	end
end

function LIB.Run(eventName, ...)
	eventName = tostring(eventName or "")
	return hook.Run(eventName, ...)
end

function LIB.AddCustom(eventName, ...)
	local eventName = getCustomHookIdentifier(eventName)
	return LIB.Add(eventName, ...)
end

function LIB.RemoveCustom(eventName, ...)
	local eventName = getCustomHookIdentifier(eventName)
	return LIB.Remove(eventName, ...)
end

function LIB.RunCustom(eventName, ...)
	local eventName = getCustomHookIdentifier(eventName)
	return LIB.Run(eventName, ...)
end

function LIB.GetBenchmark(eventName)
	eventName = tostring(eventName or "")

	local hookData = g_hooks[eventName]
	if not hookData then
		return 0, 0
	end

	local benchmark = hookData.benchmark or 0
	local benchmarkAvg = hookData.benchmarkAvg or 0

	return benchmark, benchmarkAvg
end

return true


--lua/streamradio_core/models/csgo_italy_radio.lua:
return gluapack()()
--lua/streamradio_core/models/fallout3_jukebox.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Fallout 3 Jukebox
-- Addon: https://steamcommunity.com/sharedfiles/filedetails/?id=529954000
RADIOMDL.model = "models/fallout3/jukebox.mdl"

RADIOMDL.SpawnAng = Angle(0, 0, 0)
RADIOMDL.SpawnFlatOnWall = true
RADIOMDL.SoundPosOffset = Vector(5, 18.25, -7.75)
RADIOMDL.SoundAngOffset = Angle(0, 0, 0)

RADIOMDL.DisplayAngles = Angle(0, 90, 73.5)

                              --      F,     R,     U
RADIOMDL.DisplayOffset    = Vector(8.85,  9.45, 11.70) -- Top Left
RADIOMDL.DisplayOffsetEnd = Vector(8.85, 26.75, 17.10) -- Bottom Right

RADIOMDL.DisplayWidth = 1024
RADIOMDL.DisplayHeight, RADIOMDL.DisplayScale = RADIOMDL:GetDisplayHeight(RADIOMDL.DisplayOffset, RADIOMDL.DisplayOffsetEnd, RADIOMDL.DisplayWidth)

RADIOMDL.FontSizes = {
--  Name 	= Size,	Weight, Parentname
	Header	= {25,	1000},
	Default	= {23,	700},
	Tooltip	= {23,	1000},
	Big		= {26,	700},
}

function RADIOMDL:SetupGUI(ent, gui_controller, mainpanel)
	gui_controller:SetPos(0, 0)
	gui_controller:SetSize(self.DisplayWidth, self.DisplayHeight)

	mainpanel:SetSize(gui_controller:GetClientSize())

	local modelsetup = {}
	if CLIENT then
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/text", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/pretext", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/controls/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/volume/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "tooltip", "font", self.Fonts.Tooltip)
	end

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header", "sizeh", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "sizeh", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists", "gridsize", {x = 3, y = 4})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview", "gridsize", {x = 2, y = 4})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/scrollbar", "sizew", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/scrollbar", "sizew", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/sidebutton", "sizew", 60)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox/scrollbar", "sizew", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox/scrollbar", "sizew", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "sizeh", 50)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "sizew", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "sizew", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "cornersize", 0)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "borderwidth", 16)

	local shadow = 5
	local padding = 5
	local margin = 7

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "shadowwidth", shadow)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "shadowwidth", shadow)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "padding", padding)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "padding", padding)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "margin", margin)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "margin", margin)

	gui_controller:SetModelSetup(modelsetup)

	mainpanel:ForEachChildRecursive(function(panel, child)
		if child.SetShadowWidth and child:GetShadowWidth() == 5 then
			child:SetShadowWidth(shadow)
		end

		if child.SetPadding and child:GetPadding() == 5 then
			child:SetPadding(padding)
		end

		if child.SetMargin and child:GetMargin() == 5 then
			child:SetMargin(margin)
		end
	end)
end

RADIOMDL.Sounds = {
	Noise = "",
}

return true


--lua/streamradio_core/models/hl2_crtscreen_small.lua:
return gluapack()()
--lua/streamradio_core/models/plasma_tv.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- 4:3 Plasma TV
RADIOMDL.model = "models/blacknecro/tv_plasma_4_3.mdl"

RADIOMDL.SpawnAng = Angle(0, 0, 0)
RADIOMDL.SpawnFlatOnWall = true
RADIOMDL.SoundPosOffset = Vector(0, 0, 0)
RADIOMDL.SoundAngOffset = Angle(0, 0, 0)


RADIOMDL.DisplayAngles = Angle(0, 90, 90)

                              --      F,      R,      U
RADIOMDL.DisplayOffset    = Vector(0.20, -27.80,  20.90) -- Top Left
RADIOMDL.DisplayOffsetEnd = Vector(0.20,  27.80, -20.90) -- Bottom Right

RADIOMDL.DisplayWidth = 2048
RADIOMDL.DisplayHeight, RADIOMDL.DisplayScale = RADIOMDL:GetDisplayHeight(RADIOMDL.DisplayOffset, RADIOMDL.DisplayOffsetEnd, RADIOMDL.DisplayWidth)

RADIOMDL.FontSizes = {
--  Name 	= Size,	Weight, Parentname
	Header	= {50,	1000},
	Default	= {44,	700},
	Tooltip	= {44,	1000},
	Big		= {60,	700},
}

function RADIOMDL:SetupGUI(ent, gui_controller, mainpanel)
	gui_controller:SetPos(0, 0)
	gui_controller:SetSize(self.DisplayWidth, self.DisplayHeight)

	mainpanel:SetSize(gui_controller:GetClientSize())

	local modelsetup = {}
	if CLIENT then
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/text", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/pretext", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/controls/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/volume/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "tooltip", "font", self.Fonts.Tooltip)
	end

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header", "sizeh", 75)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "sizeh", 75)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists", "gridsize", {x = 2, y = 10})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview", "gridsize", {x = 2, y = 10})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/scrollbar", "sizew", 75)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/scrollbar", "sizew", 75)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/sidebutton", "sizew", 125)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox/scrollbar", "sizew", 75)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox/scrollbar", "sizew", 75)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "sizeh", 100)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "sizew", 100)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "sizew", 100)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "cornersize", 0)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "borderwidth", 16)

	local shadow = 12
	local padding = 12
	local margin = 12

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "shadowwidth", shadow)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "shadowwidth", shadow)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "padding", padding)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "padding", padding)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "margin", margin)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "margin", margin)

	gui_controller:SetModelSetup(modelsetup)

	mainpanel:ForEachChildRecursive(function(panel, child)
		if child.SetShadowWidth and child:GetShadowWidth() == 5 then
			child:SetShadowWidth(shadow)
		end

		if child.SetPadding and child:GetPadding() == 5 then
			child:SetPadding(padding)
		end

		if child.SetMargin and child:GetMargin() == 5 then
			child:SetMargin(margin)
		end
	end)
end

return true


--lua/streamradio_core/models/portal_gladosball.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Portal 1 GlaDOS Ball
RADIOMDL.model = "models/props_bts/glados_ball_reference.mdl"

local skins = {0,  1,  3,  2}

RADIOMDL.NoDisplay = true
RADIOMDL.SpawnAng = Angle( 0, 0, 0 )
RADIOMDL.SpawnFlatOnWall = false

function RADIOMDL:SoundLevel(ent, soundlevel)
	if SERVER then return end

	soundlevel = soundlevel or 0
	if soundlevel <= 0 then
		ent:SetSkin(0)
		return
	end

	local vol = ent:GetVolume()

	soundlevel = soundlevel * 100000
	soundlevel = math.log10(soundlevel) / 5
	soundlevel = soundlevel ^ 20 * 1.1
	soundlevel = soundlevel * vol

	soundlevel = math.Clamp(soundlevel, 0, 1)

	local skinid = skins[math.Round(soundlevel * 3) + 1] or 0
	ent:SetSkin( skinid )
end

return true


--lua/streamradio_core/models/portal_radio.lua:
return gluapack()()
--lua/streamradio_core/models/sw_gramophone.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- SligWolf's Gramophone
RADIOMDL.model = "models/sligwolf/grocel/radio/gramophone.mdl"

RADIOMDL.SpawnAng = Angle(0, 0, 0)
RADIOMDL.SpawnFlatOnWall = false
RADIOMDL.SoundPosOffset = Vector(-8, 0, 13.5)
RADIOMDL.SoundAngOffset = Angle(-10, 0, 0)

RADIOMDL.DisplayAngles = Angle(0, 90, 90)

                              --      F,     R,    U
RADIOMDL.DisplayOffset    = Vector(6.35, -5.85, 6.15) -- Top Left
RADIOMDL.DisplayOffsetEnd = Vector(6.35,  5.85, 2.35) -- Bottom Right

RADIOMDL.DisplayWidth = 1024
RADIOMDL.DisplayHeight, RADIOMDL.DisplayScale = RADIOMDL:GetDisplayHeight(RADIOMDL.DisplayOffset, RADIOMDL.DisplayOffsetEnd, RADIOMDL.DisplayWidth)


RADIOMDL.FontSizes = {
--  Name 	= Size,	Weight, Parentname
	Header	= {23,	1000},
	Default	= {25,	700},
	Tooltip	= {22,	1000},
	Big		= {30,	700},
}

function RADIOMDL:SetupGUI(ent, gui_controller, mainpanel)
	gui_controller:SetPos(0, 0)
	gui_controller:SetSize(self.DisplayWidth, self.DisplayHeight)

	mainpanel:SetSize(gui_controller:GetClientSize())

	local modelsetup = {}
	if CLIENT then
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/text", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/pretext", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/controls/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/volume/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "tooltip", "font", self.Fonts.Tooltip)
	end

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header", "sizeh", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "sizeh", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists", "gridsize", {x = 2, y = 5})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview", "gridsize", {x = 2, y = 5})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/sidebutton", "sizew", 60)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox/scrollbar", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "sizeh", 50)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "sizew", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "sizew", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "cornersize", 0)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "borderwidth", 32)

	gui_controller:SetModelSetup(modelsetup)
end

RADIOMDL.Sounds = {
	Noise = "",
}

function RADIOMDL:Initialize(ent)
	if CLIENT then
		ent:InvalidateBoneCache()
		return
	end

	if ent._mdl_skinset then return end

	local spin = math.random( 0, 360 )
	ent:SetPoseParameter( "spin_speaker", spin )
	ent:RegisterDupePose( "spin_speaker" )

	local skinid = math.random( 0, 3 )
	ent:SetSkin( skinid )

	ent._mdl_skinset = true
end

function RADIOMDL:AnimReset(ent)
	local sequence = ent:LookupSequence( "idle" )
	ent:SetAnim( sequence, 0, 1 )
end

function RADIOMDL:WhileLoading(ent)
	if SERVER then return end

	local sequence = ent:LookupSequence( "idle" )
	ent:SetAnim( sequence, 0, 1 )
end

function RADIOMDL:OnPlay(ent, stream)
	if SERVER then return end

	local sequence = ent:LookupSequence( "playidle" )
	ent:SetAnim( sequence, 0, 1 )

	ent:SetPoseParameter( "move_needle", 0 )
	ent:InvalidateBoneCache()
end

function RADIOMDL:OnError(ent, stream)
	if SERVER then return end

	local sequence = ent:LookupSequence( "idle" )
	ent:SetAnim( sequence, 0, 1 )

	ent:SetPoseParameter( "move_needle", 0 )
	ent:InvalidateBoneCache()
end

function RADIOMDL:OnStop(ent, stream)
	if SERVER then return end

	local sequence = ent:LookupSequence( "idle" )
	ent:SetAnim( sequence, 0, 1 )

	ent:SetPoseParameter( "move_needle", 0 )
	ent:InvalidateBoneCache()
end

function RADIOMDL:Think(ent)
	if SERVER then return end

	local spin = ent:GetPoseParameter( "spin_speaker" ) or 0

	spin = spin * 360

	spin = spin + 28
	spin = math.NormalizeAngle( -spin )

	ent.SoundAngOffset = Angle( ent.SoundAngOffset.p, spin, ent.SoundAngOffset.r )

	local armpos = 0

	if not ent.StreamObj:IsEndless() then
		armpos = ent.StreamObj:GetTime() / ent.StreamObj:GetLength()
	end

	ent:SetPoseParameter( "move_needle", armpos )
	ent:InvalidateBoneCache()
end

return true


--lua/streamradio_core/models/sw_radio.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- SligWolf's Radio
RADIOMDL.model = "models/sligwolf/grocel/radio/radio.mdl"

RADIOMDL.SpawnAng = Angle(0, 180, 0)
RADIOMDL.SpawnFlatOnWall = true
RADIOMDL.SoundPosOffset = Vector(0, -3.1, 3.45)
RADIOMDL.SoundAngOffset = Angle(0, 0, 0)

RADIOMDL.DisplayAngles = Angle(0, -90, 90)

                              --       F,     R,    U
RADIOMDL.DisplayOffset    = Vector(-1.45,  5.85, 6.00) -- Top Left
RADIOMDL.DisplayOffsetEnd = Vector(-1.45, -5.85, 0.95) -- Bottom Right

RADIOMDL.DisplayWidth = 768
RADIOMDL.DisplayHeight, RADIOMDL.DisplayScale = RADIOMDL:GetDisplayHeight(RADIOMDL.DisplayOffset, RADIOMDL.DisplayOffsetEnd, RADIOMDL.DisplayWidth)


RADIOMDL.FontSizes = {
--  Name 	= Size,	Weight, Parentname
	Header	= {20,	1000},
	Default	= {19,	700},
	Tooltip	= {15,	800},
	Big		= {22,	700},
}

function RADIOMDL:SetupGUI(ent, gui_controller, mainpanel)
	gui_controller:SetPos(0, 0)
	gui_controller:SetSize(self.DisplayWidth, self.DisplayHeight)

	mainpanel:SetSize(gui_controller:GetClientSize())

	local modelsetup = {}
	if CLIENT then
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/text", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/pretext", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/controls/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/volume/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "tooltip", "font", self.Fonts.Tooltip)
	end

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header", "sizeh", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "sizeh", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists", "gridsize", {x = 2, y = 6})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview", "gridsize", {x = 2, y = 6})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/sidebutton", "sizew", 50)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox/scrollbar", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "sizeh", 45)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "sizew", 35)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "sizew", 35)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "cornersize", 0)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "borderwidth", 16)

	local shadow = 5
	local padding = 5
	local margin = 5

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "shadowwidth", shadow)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "shadowwidth", shadow)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "padding", padding)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "padding", padding)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "margin", margin)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "margin", margin)

	gui_controller:SetModelSetup(modelsetup)

	mainpanel:ForEachChildRecursive(function(panel, child)
		if child.SetShadowWidth and child:GetShadowWidth() == 5 then
			child:SetShadowWidth(shadow)
		end

		if child.SetPadding and child:GetPadding() == 5 then
			child:SetPadding(padding)
		end

		if child.SetMargin and child:GetMargin() == 5 then
			child:SetMargin(margin)
		end
	end)
end

function RADIOMDL:Initialize(ent)
	if CLIENT then
		ent:InvalidateBoneCache()
		return
	end

	if ent._mdl_skinset then return end

	local color = ColorRand()
	ent:SetColor( color )

	ent._mdl_skinset = true
end

function RADIOMDL:AnimReset(ent)
	if SERVER then return end

	ent:SetPoseParameter("speakers", 0)
	ent:InvalidateBoneCache()
end

function RADIOMDL:WhileLoading(ent)
	if SERVER then return end

	ent:SetPoseParameter("speakers", 0)
	ent:InvalidateBoneCache()
end

RADIOMDL.SpeakerMinFRQ = 20
RADIOMDL.SpeakerMaxFRQ = 2000
RADIOMDL.SpeakerFRQResolution = 12

function RADIOMDL:Speaker(ent, speakerlevel)
	if SERVER then return end

	speakerlevel = speakerlevel or 0

	local soundlevel = 0

	if IsValid(ent.StreamObj) then
		soundlevel = ent.StreamObj:GetAverageLevel() ^ 0.25
	end

	local vol = ent:GetVolume()

	speakerlevel = speakerlevel * vol * 1.5 * soundlevel
	speakerlevel = math.Clamp(speakerlevel, -1, 1)

	ent:SetPoseParameter("speakers", speakerlevel)
	ent:InvalidateBoneCache()
end

return true


--lua/streamradio_core/models/wire_speaker1.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Wire Speaker 1
-- Addon: https://steamcommunity.com/sharedfiles/filedetails/?id=160250458
RADIOMDL.model = "models/cheeze/wires/speaker.mdl"

RADIOMDL.NoDisplay = true
RADIOMDL.SpawnAng = Angle( 0, 0, 0 )
RADIOMDL.SpawnFlatOnWall = false

return true


--lua/streamradio_core/classes/base.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local LIBUtil = StreamRadioLib.Util

local emptyTableSafe = LIBUtil.EmptyTableSafe

function CLASS:Create()
	self.Valid = true
	self._cache = {}
	self.Name = ""

	StreamRadioLib.Timedcall(function()
		if not self.Valid then return end
		if self._markedforremove then return end

		self.Created = true

		if self.Initialize then
			self:Initialize()
		end
	end)
end

function CLASS:Initialize()
	-- override me
end

function CLASS:Remove()
	self._markedforremove = true
	self:CallHook("OnRemove")

	StreamRadioLib.Timedcall(function()
		if not self then
			return
		end

		self.Valid = false
		self.Created = false

		emptyTableSafe(self._cache)
	end)
end

function CLASS:IsValid()
	return self.Valid or false
end

function CLASS:GetName()
	return self.Name or ""
end

function CLASS:SetName(name)
	name = tostring(name or "")
	name = string.gsub(name, "[%/%s]", "_")

	self.Name = name
end

function CLASS:GetCacheValue(key)
	return self._cache[tostring(key or "")]
end

function CLASS:GetCacheValues(key)
	local value = self:GetCacheValue(key)
	if not value then return nil end
	return unpack(value)
end

function CLASS:SetCacheValue(key, value)
	self._cache[tostring(key or "")] = value
	return value
end

function CLASS:SetCacheValues(key, ...)
	local args = {...}
	self:SetCacheValue(key, args)
	return unpack(args)
end

function CLASS:DelCacheValue(key)
	self._cache[tostring(key or "")] = nil
end

function CLASS:GetFunction(name)
	if isfunction(name) then
		return name
	end

	name = tostring(name or "")

	local func = self[name]
	if not isfunction(func) then
		return nil
	end

	return func
end

function CLASS:CallHook(name, ...)
	local func = self:GetFunction(name)
	if not func then
		return nil
	end

	return func(self, ...)
end

local g_string_format = string.format

function CLASS:_ToStringFailback()
	local classname = self.classname
	if not classname then
		classname = "!unknown_class!"
	end

	if not self.Valid then
		return g_string_format("[%s][removed]", classname)
	end

	local id = self.ID
	if not id then
		return g_string_format("[%s][unknown_id]", classname)
	end

	local name = self.Name or ""
	if name == "" then
		return g_string_format("[%s][%i]", classname, id)
	end

	return g_string_format("[%s][%i][%s]", classname, id, name)
end

function CLASS:ToString()
	return self:_ToStringFailback()
end

function CLASS:__tostring()
	local called = self._tostringcall
	if called then
		return self:_ToStringFailback()
	end

	self._tostringcall = true
	local _, result = pcall(self.ToString, self)
	self._tostringcall = nil

	local r = result or self:_ToStringFailback()
	return r
end

function CLASS:__gc()
	if not self.Valid then return end
	self:Remove()
end

function CLASS:__eg(other)
	if not other then return false end
	return self:GetID() ~= other:GetID()
end

return true


--lua/streamradio_core/classes/skin_controller.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/shadow_panel.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/radio/gui_browser.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local BASE = CLASS:GetBaseClass()

local g_mat_upbutton = StreamRadioLib.GetPNGIcon("door_in")
local g_mat_refresh = StreamRadioLib.GetPNGIcon("arrow_refresh")
local g_mat_toolbutton = StreamRadioLib.GetPNGIcon("wrench")
local g_mat_wirebutton = StreamRadioLib.GetPNGIcon("wiremod", true)

function CLASS:Create()
	BASE.Create(self)

	self.HeaderPanel = self:AddPanelByClassname("shadow_panel", true)
	self.HeaderPanel:SetSize(1, 30)
	self.HeaderPanel:SetName("header")
	self.HeaderPanel:SetNWName("hdr")
	self.HeaderPanel:SetSkinIdentifyer("header")

	self.HeaderPanelTextPre = self.HeaderPanel:AddPanelByClassname("label", true)
	self.HeaderPanelTextPre:SetText("Path: ")
	self.HeaderPanelTextPre:SetSize(1, 30)
	self.HeaderPanelTextPre:SetAlign(TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
	self.HeaderPanelTextPre:SetName("pretext")
	self.HeaderPanelTextPre:SetNWName("ptxt")

	self.HeaderPanelText = self.HeaderPanel:AddPanelByClassname("label", true)
	self.HeaderPanelText:SetShorterAtEnd(false)
	self.HeaderPanelText:SetAlign(TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
	self.HeaderPanelText:SetName("text")
	self.HeaderPanelText:SetNWName("txt")

	self.HeaderPanel.SetTextColor = function(this, color)
		if IsValid(self.HeaderPanelText) then
			self.HeaderPanelText:SetTextColor(color)
		end

		if IsValid(self.HeaderPanelTextPre) then
			self.HeaderPanelTextPre:SetTextColor(color)
		end
	end

	self.HeaderPanel.GetTextColor = function(this)
		if IsValid(self.HeaderPanelText) then
			return self.HeaderPanelText:GetTextColor()
		end

		if IsValid(self.HeaderPanelTextPre) then
			return self.HeaderPanelTextPre:GetTextColor()
		end

		return nil
	end

	self.UpButton = self:AddPanelByClassname("button", true)
	self.UpButton:SetIcon(g_mat_upbutton)
	self.UpButton:SetSize(50, 50)
	self.UpButton:SetName("backbutton")
	self.UpButton:SetNWName("bk")
	self.UpButton:SetSkinIdentifyer("sidebutton")
	self.UpButton:SetTooltip("Go to parent directory")

	self.RefreshButton = self:AddPanelByClassname("button", true)
	self.RefreshButton:SetIcon(g_mat_refresh)
	self.RefreshButton:SetSize(50, 50)
	self.RefreshButton:SetName("refreshbutton")
	self.RefreshButton:SetNWName("rfsh")
	self.RefreshButton:SetSkinIdentifyer("sidebutton")
	self.RefreshButton:SetTooltip("Refresh view")

	self.ToolButton = self:AddPanelByClassname("button", true)
	self.ToolButton:SetIcon(g_mat_toolbutton)
	self.ToolButton:SetSize(50, 50)
	self.ToolButton:SetName("toolbutton")
	self.ToolButton:SetNWName("tool")
	self.ToolButton:SetSkinIdentifyer("sidebutton")
	self.ToolButton:SetTooltip("Play URL from Toolgun")

	self.WireButton = self:AddPanelByClassname("button", true)
	self.WireButton:SetIcon(g_mat_wirebutton)
	self.WireButton:SetSize(50, 50)
	self.WireButton:SetName("wirebutton")
	self.WireButton:SetNWName("wire")
	self.WireButton:SetSkinIdentifyer("sidebutton")
	self.WireButton:SetVisible(StreamRadioLib.Wire.HasWiremod())
	self.WireButton:SetTooltip("Play URL from Wiremod")

	self.ListFiles = self:AddPanelByClassname("radio/list_playlists", true)
	self.ListFiles:SetName("list-playlists")
	self.ListFiles:SetNWName("lstp")
	self.ListFiles:Open()
	self.ListFiles:SetSkinIdentifyer("list")

	self.ListPlaylist = self:AddPanelByClassname("radio/list_playlistview", true)
	self.ListPlaylist:SetName("list-playlistview")
	self.ListPlaylist:SetNWName("lstpv")
	self.ListPlaylist:Close()
	self.ListPlaylist:SetSkinIdentifyer("list")

	self.Errorbox = self:AddPanelByClassname("radio/gui_errorbox", true)
	self.Errorbox:SetName("error")
	self.Errorbox:SetNWName("err")
	self.Errorbox:SetSkinIdentifyer("error")

	if self.Errorbox.RetryButton then
		self.Errorbox.RetryButton:Remove()
		self.Errorbox.RetryButton = nil
	end

	if self.Errorbox.AdminWhitelistButton then
		self.Errorbox.AdminWhitelistButton:Remove()
		self.Errorbox.AdminWhitelistButton = nil
	end

	if IsValid(self.Errorbox.CloseButton) and CLIENT then
		-- The error box is handled on the server, so the client shouldn't touch it.
		self.Errorbox.CloseButton.DoClick = nil
	end

	self.Errorbox.OnCloseClick = function()
		self:GoUpPath()
	end

	self.Errorbox:SetZPos(100)
	self.Errorbox:Close()

	self.SideButtons = {
		self.UpButton,
		self.RefreshButton,
		self.ToolButton,
		self.WireButton,
	}

	self.State = self:CreateListener({
		PlaylistOpened = false,
	}, function(this, k, v)
		if IsValid(self.Errorbox) then
			self.Errorbox:Close()
			self:InvalidateLayout()
		end

		if not v then
			self:CallHook("OnPlaylistClose")

			if IsValid(self.ListPlaylist) then
				self.ListPlaylist:ClearData()
				self.ListPlaylist:Close()
			end

			if IsValid(self.ListFiles) then
				self.ListFiles:ActivateNetworkedMode()
				self.ListFiles:Open()
			end
		else
			self:CallHook("OnPlaylistOpen")

			if IsValid(self.ListFiles) then
				self.ListFiles:ClearData()
				self.ListFiles:Close()
			end

			if IsValid(self.ListPlaylist) then
				self.ListPlaylist:ActivateNetworkedMode()
				self.ListPlaylist:Open()
			end
		end

		self:Refresh()
		self:SetNWBool(k, v)
		self:UpdatePath()

		self:ApplyNetworkVars()
		self:InvalidateLayout()
	end)

	self.ListPlaylist.OnPlayItem = function(this, ...)
		self:UpdatePath()
		return self:CallHook("OnPlayItem", ...)
	end

	self.ListPlaylist.OnPlaylistStartBuild = function(this, ...)
		return self:CallHook("OnPlaylistStartBuild", ...)
	end

	self.ListPlaylist.OnPlaylistEndBuild = function(this, ...)
		return self:CallHook("OnPlaylistEndBuild", ...)
	end

	self.ListPlaylist.OnError = function(this, filename, filetype, ...)
		if IsValid(self.Errorbox) then
			self.Errorbox:SetPlaylistError(filename)
			self:InvalidateLayout()
		end

		return self:CallHook("OnError", filename, filetype, ...)
	end

	self.ListPlaylist.OnErrorRelease = function(this, filename, filetype, ...)
		if IsValid(self.Errorbox) then
			self.Errorbox:Close()
			self:InvalidateLayout()
		end

		return self:CallHook("OnErrorRelease", filename, filetype, ...)
	end

	self.ListPlaylist.OnInvalidDupeFilepath = function(this, filename, filetype, ...)
		self:QueueCall("OnInvalidDupeFilepath")
	end

	self.ListFiles.OnInvalidDupeFilepath = function(this)
		self:QueueCall("OnInvalidDupeFilepath")
	end

	self.ListFiles.OnFileClick = function(this, value, ...)
		if CLIENT then return end

		local r = self:CallHook("OnFileClick", value, ...)
		if r == false then return end

		self.State.PlaylistOpened = true

		if IsValid(self.ListPlaylist) then
			self.ListPlaylist:SetFile(value.path, value.type)
		end
	end

	self.ListFiles.OnPathChange = function(this, ...)
		self:UpdatePath()
		return self:CallHook("OnPathChange", ...)
	end

	self.ListPlaylist.OnPathChange = function(this, ...)
		self:UpdatePath()
		return self:CallHook("OnPathChange", ...)
	end

	self.UpButton.DoClick = function()
		self:GoUpPath()
	end

	self.RefreshButton.DoClick = function()
		self:Refresh()
	end

	self.ToolButton.DoClick = function()
		self:CallHook("OnToolButtonClick")
	end

	self.WireButton.DoClick = function()
		self:CallHook("OnWireButtonClick")
	end

	self:SetEvent("OnClose", "SaveScrollPos", function()
		if IsValid(self.ListPlaylist) then
			self.ListPlaylist:SaveScrollPos()
		end

		if IsValid(self.ListFiles) then
			self.ListFiles:SaveScrollPos()
		end
	end)

	self:UpdatePath()
end

function CLASS:OnInvalidDupeFilepath()
	self.State.PlaylistOpened = false

	if IsValid(self.Errorbox) then
		self.Errorbox:Close()
	end

	self:Refresh()

	self:UpdatePath()
	self:InvalidateLayout()
end

function CLASS:GetHasPlaylist()
	return self._hasplaylist or false
end

function CLASS:SetHasPlaylist(bool)
	self._hasplaylist = bool
end

function CLASS:CloseSingleItem()
	if self:GetHasPlaylist() then return end

	self.State.PlaylistOpened = false
end

function CLASS:UpdatePath()
	if not IsValid(self.UpButton) then return end
	if not IsValid(self.HeaderPanelText) then return end

	local path = self:GetPath()

	self.HeaderPanelText:SetText("/" .. path)
	self.UpButton:SetDisabled(path == "")
end

function CLASS:GetUpButton()
	return self.UpButton
end

function CLASS:GetRefreshButton()
	return self.RefreshButton
end

function CLASS:GetToolButton()
	return self.ToolButton
end

function CLASS:GetWireButton()
	return self.WireButton
end

function CLASS:GetFilesPanel()
	return self.ListFiles
end

function CLASS:GetPlaylistPanel()
	return self.ListPlaylist
end

function CLASS:GetHeaderPanel()
	return self.HeaderPanel
end

function CLASS:GetHeaderTextPanel()
	return self.HeaderPanelText
end

function CLASS:IsPlaylistOpen()
	if self.State.PlaylistOpened then
		return true
	end

	if IsValid(self.ListPlaylist) and self.ListPlaylist:HasError() then
		return true
	end

	return false
end

function CLASS:GetPath()
	if self:IsPlaylistOpen() then
		return self.ListPlaylist:GetFile()
	end

	return self.ListFiles:GetPath()
end

function CLASS:GoUpPath()
	if CLIENT then return end
	if not self.State then return end

	if self:IsPlaylistOpen() then
		self.State.PlaylistOpened = false
		return
	end

	if IsValid(self.ListFiles) then
		self.ListFiles:GoUpPath()
	end
end

function CLASS:Refresh()
	local antiSpamTime = 1

	if IsValid(self.RefreshButton) then
		self.RefreshButton:SetDisabled(true)

		self:TimerOnce("RefreshButtonAntiSpam", antiSpamTime, function()
			if not IsValid(self.RefreshButton) then
				return
			end

			self.RefreshButton:SetDisabled(false)
		end)
	end

	if IsValid(self.Errorbox) and IsValid(self.Errorbox.RetryButton) then
		self.Errorbox.RetryButton:SetDisabled(true)

		self:TimerOnce("RetryButtonAntiSpam", antiSpamTime, function()
			if not IsValid(self.Errorbox) then
				return
			end

			if not IsValid(self.Errorbox.RetryButton) then
				return
			end

			self.Errorbox.RetryButton:SetDisabled(false)
		end)
	end

	if CLIENT then return end

	if IsValid(self.ListPlaylist) and self.ListPlaylist:IsVisible() then
		self.ListPlaylist:Refresh()
	end

	if IsValid(self.ListFiles) and self.ListFiles:IsVisible() then
		self.ListFiles:Refresh()
	end
end

function CLASS:_PerformButtonLayout(buttonx, buttony)
	if not self.SideButtons then return end

	local _, h = self:GetClientSize()
	local buttonw = 0

	for k, v in ipairs(self.SideButtons) do
		if not IsValid(v) then continue end
		if not v.Layout.Visible then continue end

		if buttonw <= 0 then
			buttonw = v:GetWidth()
			break
		end
	end

	local margin = self:GetMargin()

	for k, v in ipairs(self.SideButtons) do
		if not IsValid(v) then continue end
		if not v.Layout.Visible then continue end

		local newbutteny = buttony + (buttonw + margin)
		if newbutteny >= h then
			v:SetPos(0, 0)
			v:SetHeight(0)
			continue
		end

		v:SetPos(buttonx, buttony)
		v:SetSize(buttonw, buttonw)
		buttony = newbutteny
	end

	return buttonw, buttony
end

function CLASS:PerformLayout(...)
	BASE.PerformLayout(self, ...)

	if not IsValid(self.HeaderPanel) then return end
	if not IsValid(self.HeaderPanelText) then return end
	if not IsValid(self.UpButton) then return end
	if not IsValid(self.ToolButton) then return end
	if not IsValid(self.WireButton) then return end
	if not IsValid(self.ListFiles) then return end
	if not IsValid(self.ListPlaylist) then return end
	if not self.SideButtons then return end

	local w, h = self:GetClientSize()
	local headerw, headerh = self.HeaderPanel:GetSize()

	local buttonw = self:_PerformButtonLayout(0, headerh)

	local margin = self:GetMargin()
	local listx = 0

	if buttonw > 0 then
		listx = buttonw + margin
	end

	local listy = headerh + margin

	local listw = w - listx
	local listh = h - listy

	headerw = listw

	self.ListFiles:SetSize(listw, listh)
	self.ListPlaylist:SetSize(listw, listh)

	self.ListFiles:SetPos(listx, listy)
	self.ListPlaylist:SetPos(listx, listy)

	self.HeaderPanel:SetSize(headerw, headerh)
	self.HeaderPanel:SetPos(listx, 0)

	local headeriw, headerih = self.HeaderPanel:GetClientSize()

	self.HeaderPanelTextPre:AutoWidth(headeriw)
	self.HeaderPanelTextPre:SetHeight(headerih)

	local headerprew = self.HeaderPanelTextPre:GetWidth()

	self.HeaderPanelTextPre:SetPos(0, 0)

	self.HeaderPanelText:SetSize(headeriw - headerprew, headerih)
	self.HeaderPanelText:SetPos(headerprew, 0)

	if IsValid(self.Errorbox) then
		self.Errorbox:SetSize(listw, listh)
		self.Errorbox:SetPos(listx, listy)
	end
end

function CLASS:ActivateNetworkedMode()
	BASE.ActivateNetworkedMode(self)
	self.ListFiles:ActivateNetworkedMode()
	self.ListPlaylist:ActivateNetworkedMode()

	if SERVER then
		self:SetNWBool("PlaylistOpened", self.State.PlaylistOpened)
		return
	end

	self:SetNWVarCallback("PlaylistOpened", "Bool", function(this, nwkey, oldvar, newvar)
		self.State.PlaylistOpened = newvar
	end)
end

function CLASS:ApplyNetworkVarsInternal()
	BASE.ApplyNetworkVarsInternal(self)

	self.State.PlaylistOpened = self:GetNWBool("PlaylistOpened", false)
end

function CLASS:PreDupe()
	local data = {}

	data.PlaylistOpened = self.State.PlaylistOpened

	return data
end

function CLASS:PostDupe(data)
	self.State.PlaylistOpened = data.PlaylistOpened
end

return true


--lua/streamradio_core/classes/clientconvar.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local BASE = CLASS:GetBaseClass()

local g_types = {
	["string"] = {
		get = function(this, cv)
			return cv:GetString()
		end,

		set = function(this, cv, val)
			cv:SetString(tostring(val or ""))
		end,

		panel_function = function(this, mainpanel, ...)
			return mainpanel:TextEntry(
				this:GetPanellabel(),
				this:GetCMD()
			)
		end,
	},

	["float"] = {
		get = function(this, cv)
			local val = cv:GetFloat()
			val = math.Clamp(val, this:GetMin(), this:GetMax())

			return val
		end,

		set = function(this, cv, val)
			local val = tonumber(val or 0) or 0
			val = math.Clamp(val, this:GetMin(), this:GetMax())

			cv:SetFloat(val)
		end,

		panel_function = function(this, mainpanel, ...)
			return mainpanel:NumSlider(
				this:GetPanellabel(),
				this:GetCMD(),
				this:GetMin(),
				this:GetMax(),
				3
			)
		end,
	},

	["int"] = {
		get = function(this, cv)
			local val = cv:GetInt()
			val = math.Clamp(val, this:GetMin(), this:GetMax())

			return val
		end,

		set = function(this, cv, val)
			local val = tonumber(val or 0) or 0
			val = math.Clamp(val, this:GetMin(), this:GetMax())

			cv:SetInt(val)
		end,

		panel_function = function(this, mainpanel, ...)
			return mainpanel:NumSlider(
				this:GetPanellabel(),
				this:GetCMD(),
				this:GetMin(),
				this:GetMax(),
				0
			)
		end,
	},

	["bool"] = {
		get = function(this, cv)
			return cv:GetBool()
		end,

		set = function(this, cv, val)
			cv:SetBool(tobool(val) and (val ~= ""))
		end,

		panel_function = function(this, mainpanel, ...)
			return mainpanel:CheckBox(
				this:GetPanellabel(),
				this:GetCMD()
			)
		end,
	},

	["numpad"] = {
		get = function(this, cv)
			local val = cv:GetInt()
			val = math.Clamp(val, 0, 255)

			return val
		end,

		set = function(this, cv, val)
			local val = tonumber(val or 0) or 0
			val = math.Clamp(val, 0, 255)

			cv:SetInt(val)
		end,

		panel_function = function(this, mainpanel, ...)
			local ctrlNumPad = vgui.Create("CtrlNumPad", mainpanel)
			ctrlNumPad:SetConVar1(this:GetCMD())
			ctrlNumPad:SetLabel1(this:GetPanellabel())

			mainpanel:AddPanel(ctrlNumPad)
			return ctrlNumPad
		end,
	},
}

function CLASS:Create()
	BASE.Create(self)

	self.cmd = ""
	self.defaultvalue = ""
	self.save = true
	self.userdata = false
	self.helptext = ""
	self.type = "string"
	self.hidden = false
	self.disabled = false
	self.options = {}

	self._convar = nil
end

function CLASS:SetCMD(var)
	if self._convar then return end
	self.cmd = tostring(var or "")
end

function CLASS:GetCMD()
	return self.cmd or ""
end

function CLASS:SetDefault(var)
	if self._convar then return end
	self.defaultvalue = tostring(var or "")
end

function CLASS:GetDefault()
	return self.defaultvalue or ""
end

function CLASS:SetSave(var)
	if self._convar then return end
	self.save = var or false
end

function CLASS:GetSave()
	return self.save or false
end

function CLASS:SetUserdata(var)
	if self._convar then return end
	self.userdata = var or false
end

function CLASS:GetUserdata()
	return self.userdata or false
end

function CLASS:SetDefault(var)
	if self._convar then return end
	self.defaultvalue = tostring(var or "")
end

function CLASS:GetDefault()
	return self.defaultvalue or ""
end

function CLASS:SetHelptext(var)
	if self._convar then return end
	self.helptext = tostring(var or "")
end

function CLASS:GetHelptext()
	return self.helptext or ""
end

function CLASS:SetOptions(var)
	if self._convar then return end
	self.options = var or {}
end

function CLASS:GetOptions()
	return self.options or {}
end

function CLASS:SetHidden(var)
	self.hidden = var or false
end

function CLASS:GetHidden()
	return self.hidden or false
end

function CLASS:SetDisabled(var)
	self.disabled = var or false
end

function CLASS:GetDisabled()
	return self.disabled or false
end

function CLASS:SetPanellabel(var)
	self.panellabel = tostring(var or "")
end

function CLASS:GetPanellabel()
	return self.panellabel or ""
end

function CLASS:GetConvar()
	return self._convar
end

function CLASS:SetType(var)
	if self._convar then return end

	var = tostring(var or "")
	var = string.lower(var)
	var = string.Trim(var)

	if var == "" then
		var = "string"
	end

	self.type = var
end

function CLASS:GetType(var)
	return self.type or ""
end

function CLASS:GetTypeData()
	local t = self:GetType()
	local data = g_types[t] or g_types["string"] or {}

	return data
end

function CLASS:GetMax()
	return self.MaxValue or 0
end

function CLASS:GetMin()
	return self.MinValue or 0
end

function CLASS:SetMax(var)
	if self._convar then return end
	self.MaxValue = var or 0
end

function CLASS:SetMin(var)
	if self._convar then return end
	self.MinValue = var or 0
end

function CLASS:GetValue(...)
	if not self._convar then
		return nil
	end

	local td = self:GetTypeData()
	local getter = td.get

	if not getter then
		return nil
	end

	return getter(self, self._convar, ...)
end

function CLASS:SetValue(...)
	if not self._convar then
		return nil
	end

	local td = self:GetTypeData()
	local setter = td.set

	if not setter then
		return nil
	end

	return setter(self, self._convar, ...)
end

function CLASS:BuildPanel(mainpanel, ...)
	if not self._convar then
		return nil
	end

	if not IsValid(mainpanel) then
		return nil
	end

	local td = self:GetTypeData()
	local panel_function = td.panel_function

	if not panel_function then
		return nil
	end

	if self:GetHidden() then
		return nil
	end

	local panel = panel_function(self, mainpanel, ...)
	if not IsValid(panel) then
		return nil
	end

	if self:GetDisabled() then
		panel:SetEnabled(false)
	end

	return panel
end

function CLASS:Setup()
	if SERVER then return end

	local cmd = self:GetCMD()

	self._convar = CreateClientConVar(cmd, self:GetDefault(), self:GetSave(), self:GetUserdata(), self:GetHelptext())
	if not self._convar then return end

	self:AddCallback()
end

function CLASS:RemoveCallback()
	if SERVER then return end
	if not self._convar then return end

	local cmd = self:GetCMD()
	cvars.RemoveChangeCallback(cmd, cmd .. "_callback")
end

function CLASS:AddCallback()
	if SERVER then return end
	if not self._convar then return end

	self:RemoveCallback()

	local oldvalue = self:GetValue()

	local cmd = self:GetCMD()
	cvars.AddChangeCallback(cmd, function()
		if not IsValid(self) then return end

		local newvalue = self:GetValue()
		if oldvalue == newvalue then return end

		self:CallHook("OnChange", oldvalue, newvalue)

		oldvalue = newvalue
	end, cmd .. "_callback")
end

function CLASS:Remove()
	self:RemoveCallback()
	self._convar = nil
	BASE.Remove(self)
end

return true


--lua/streamradio_core/wire.lua:
return gluapack()()
--lua/streamradio_core/wire.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Wire = StreamRadioLib.Wire or {}

local LIB = StreamRadioLib.Wire
table.Empty(LIB)

local LIBUtil = StreamRadioLib.Util

local emptyTableSafe = LIBUtil.EmptyTableSafe

local g_HasWiremod = nil

function LIB.HasWiremod()
	if g_HasWiremod ~= nil then
		return g_HasWiremod
	end

	g_HasWiremod = false

	local wmod = _G.WireAddon or _G.WIRE_CLIENT_INSTALLED
	if not wmod then return false end
	if not _G.WireLib then return false end

	g_HasWiremod = true
	return true
end

local function findCallingWireUserEntityFunction()
	for i = 1, 100 do
		local data = debug.getinfo(i, "fS")
		if not data then
			break
		end

		local func = data.func
		if not func then
			break
		end

		local short_src = data.short_src
		if not short_src then
			break
		end

		short_src = string.lower(short_src)

		if not string.find(short_src, "entities/gmod_wire_user.lua", 1, true) then
			continue
		end

		data.index = i
		return data
	end

	return nil
end

local function findCallingWireUserEntityLocals(data)
	if not data then
		return nil
	end

	local locals = {}

	local i = 1

	while true do
		local name, value = debug.getlocal(data.index, i)
		if not name then
			break
		end

		locals[name] = value
		i = i + 1
	end

	return locals
end

function LIB.FindCallingWireUserEntityData()
	if not LIB.HasWiremod() then
		return nil
	end

	local data = findCallingWireUserEntityFunction()
	local locals = findCallingWireUserEntityLocals(data)
	if not locals then
		return nil
	end

	local userEntity = locals["self"]
	if not LIB.IsWireUser(userEntity) then
		return nil
	end

	local trace = locals["trace"]
	if not trace then
		return nil
	end

	local ent = trace.Entity
	if not IsValid( ent ) then
		return nil
	end

	if not ent.__IsRadio then
		return nil
	end

	local result = {
		userEntity = userEntity,
		trace = table.Copy(trace),
	}

	return result
end

function LIB.IsWireUser(ent)
	if not LIB.HasWiremod() then
		return false
	end

	if not IsValid(ent) then
		return false
	end

	if not ent.IsWire then
		return false
	end

	if ent:GetClass() ~= "gmod_wire_user" then
		return false
	end

	return true
end

function LIB.GetUserPos(ent)
	if not LIB.IsWireUser(ent) then
		return nil
	end

	local pos = ent:GetPos()

	return pos
end

function LIB.GetUserPosDir(ent)
	if not LIB.IsWireUser(ent) then
		return nil, nil
	end

	local pos = ent:GetPos()
	local dir = ent:GetUp()

	return pos, dir
end

local g_WireUserTraceCache = {}
local g_WireUserTraceCacheCount = 0
local g_WireUserTrace = {}

function LIB.WireUserTrace(ent)
	if not LIB.IsWireUser(ent) then
		return nil
	end

	local cacheID = tostring(ent or "")
	local cacheItem = g_WireUserTraceCache[cacheID]

	if cacheItem and StreamRadioLib.Util.IsSameFrame("StreamRadioLib.Wire.WireUserTrace_" .. cacheID) then
		return cacheItem
	end

	g_WireUserTraceCache[cacheID] = nil

	local pos, dir = LIB.GetUserPosDir(ent)

	if not pos then
		return nil
	end

	if not dir then
		return nil
	end

	local len = ent:GetBeamLength()
	if not len then
		return nil
	end

	local start_pos = pos
	local end_pos = pos + dir * len

	g_WireUserTrace.start = start_pos
	g_WireUserTrace.endpos = end_pos
	g_WireUserTrace.filter = ent

	local trace = util.TraceLine(g_WireUserTrace)

	-- prevent the cache from overflowing
	if g_WireUserTraceCacheCount > 1024 then
		emptyTableSafe(g_WireUserTraceCache)
		g_WireUserTraceCacheCount = 0
	end

	g_WireUserTraceCache[cacheID] = trace

	if not cacheItem then
		g_WireUserTraceCacheCount = g_WireUserTraceCacheCount + 1
	end

	return g_WireUserTraceCache[cacheID]
end

return true


--lua/streamradio_core/client/cl_menu.lua:
return gluapack()()
--lua/streamradio_core/client/settings/vr.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Settings = StreamRadioLib.Settings or {}
local LIB = StreamRadioLib.Settings

local LIBMenu = StreamRadioLib.Menu

LIB.g_CV_List["vr"] = {}

LIB.AddConVar("vr", "vr_enable_touch", "cl_streamradio_vr_enable_touch", "1", {
	label = "Enable VR Touch Control",
	help = "Enable Radio controlling via touch in VR when set to 1. Default: 1",
	type = "bool",
	userdata = true,
})

LIB.AddConVar("vr", "vr_enable_trigger", "cl_streamradio_vr_enable_trigger", "1", {
	label = "Enable VR Trigger Control",
	help = "Enable Radio controlling via trigger in VR when set to 1. Default: 1",
	type = "bool",
	userdata = true,
})

LIB.AddConVar("vr", "vr_enable_cursor", "cl_streamradi_vr_enable_cursor", "1", {
	label = "Show cursor in VR",
	help = "Shows the cursor on radio GUIs in VR when set to 1. Default: 1",
	type = "bool",
})

local function BuildMenuPanel(CPanel)
	if not IsValid(CPanel) then return end

	local toplabel = vgui.Create("DLabel")
	toplabel:SetText("3D Stream Radio VR settings")
	toplabel:SetDark(true)
	toplabel:SizeToContents()
	CPanel:AddPanel(toplabel)

	local StreamRadioLib = StreamRadioLib or {}

	if not StreamRadioLib.Loaded then
		if StreamRadioLib.Loader_CreateErrorPanel then
			StreamRadioLib.Loader_CreateErrorPanel(CPanel, "This menu could not be loaded.")
		end

		return
	end

	if not StreamRadioLib.VR.IsInstalled() then
		CPanel:AddPanel(LIBMenu.GetVRErrorPanel())

		CPanel:AddPanel(LIBMenu.GetSpacer())

		CPanel:AddPanel(LIBMenu.GetVRAddonButton())
		CPanel:AddPanel(LIBMenu.GetVRFAQButton())
		return
	end

	CPanel:AddPanel(LIBMenu.GetVRInfoPanel())
	CPanel:AddPanel(LIBMenu.GetSpacer(5))

	for i, v in ipairs(LIB.GetConVarListByNamespace("vr")) do
		if not IsValid(v) then continue end

		local p = v:BuildPanel(CPanel)
		if not IsValid(p) then continue end

		p:SetTooltip(v:GetPanellabel())
	end

	CPanel:AddPanel(LIBMenu.GetSpacer(5))
	CPanel:AddPanel(LIBMenu.GetVRAddonPanelButton())
	CPanel:AddPanel(LIBMenu.GetSpacer(5))
	CPanel:AddPanel(LIBMenu.GetVRFAQButton())
	CPanel:AddPanel(LIBMenu.GetCreditsPanel())
end

LIB.AddBuildMenuPanelHook("vr", "VR Settings", BuildMenuPanel)

return true


--lua/streamradio_core/client/cl_vgui.lua:
return gluapack()()
--lua/streamradio_core/interfaces/cache.lua:
return gluapack()()
--lua/streamradio_core/interfaces/file.lua:
local RADIOIFACE = RADIOIFACE
if not istable( RADIOIFACE ) then
	StreamRadioLib.Interface.Load()
	return
end

RADIOIFACE.name = "File"
RADIOIFACE.priority = 100000
RADIOIFACE.download = false
RADIOIFACE.online = false
RADIOIFACE.cache = false

RADIOIFACE.downloadTimeout = 0
RADIOIFACE.downloadFirst = false
RADIOIFACE.allowCaching = false

local LIBUrl = StreamRadioLib.Url
local LIBString = StreamRadioLib.String
local LIBError = StreamRadioLib.Error

function RADIOIFACE:CheckURL(url)
	if not LIBUrl.IsOfflineURL(url) then
		return false
	end

	return true
end

function RADIOIFACE:ParseURL(url)
	local _, filepath = LIBUrl.SplittProtocolAndPath(url)

	local urlResult = "sound/" .. filepath
	urlResult = LIBString.NormalizeSlashes(urlResult)

	return urlResult
end

function RADIOIFACE:Convert(url, callback)
	if LIBUrl.IsDriveLetterOfflineURL(url) then
		callback(self, true, "", LIBError.STREAM_ERROR_BAD_DRIVE_LETTER_PATH)
		return
	end

	local path = self:ParseURL(url)

	callback(self, true, path)
end

return true


--lua/streamradio_core/filesystem/_generic.lua:
local RADIOFS = RADIOFS
if not istable( RADIOFS ) then
	StreamRadioLib.Filesystem.Load()
	return
end

RADIOFS.name = "generic"
RADIOFS.type = ":generic"
RADIOFS.icon = StreamRadioLib.GetPNGIcon("table_sound", true)

RADIOFS.priority = -1
RADIOFS.loadToWhitelist = true

function RADIOFS:Find(globalpath, vfolder)
	return nil
end

function RADIOFS:Delete(globalpath, vpath, callback)
	return false
end

function RADIOFS:Exists(globalpath, vpath)
	return false
end

return true


--lua/streamradio_core/filesystem/addon-mx-radio.lua:
return gluapack()()
--lua/svmod/commands/cl_commands.lua:
return gluapack()()
--lua/svmod/commands/cl_commands.lua:
local commands = {
	["!Svmod"] = true,
	["!svmod"] = true,
	["/Svmod"] = true,
	["/svmod"] = true
}

hook.Add("OnPlayerChat", "SV_OpenMenu", function(ply, text)
	if commands[text] then
		if ply == LocalPlayer() then
			RunConsoleCommand("svmod")
		end

		return true
	end
end)
--lua/svmod/data/sh_checker.lua:
-- @class SVMOD
-- @shared

-- Checks the data types of the input.
-- @tparam table data Data to check
-- @treturn string result Error if problem found, nil if no problem found
-- @internal
function SVMOD:Data_Check(x)
	if not x then
		return "DATA"
	end
	local function checkLights(x)
		if not istable(x) then
			return ""
		end

		for i, v in ipairs(x) do
			if v.Sprite then
				if v.ActiveTime and not isnumber(v.ActiveTime) then
					return "Sprite[" .. i .. "].ActiveTime"
				elseif v.Color and (not v.Color.r or not v.Color.g or not v.Color.b or not v.Color.a) then
					return "Sprite[" .. i .. "].Color"
				elseif v.Height and not isnumber(v.Width) then
					return "Sprite[" .. i .. "].Height"
				elseif v.HiddenTime and not isnumber(v.HiddenTime) then
					return "Sprite[" .. i .. "].HiddenTime"
				elseif v.Position and not isvector(v.Position) then
					return "Sprite[" .. i .. "].Position"
				elseif v.Width and not isnumber(v.Width) then
					return "Sprite[" .. i .. "].Width"
				end
			elseif v.SpriteLine then
				if v.Color and (not v.Color.r or not v.Color.g or not v.Color.b or not v.Color.a) then
					return "Sprite[" .. i .. "].Color"
				elseif v.Width and not isnumber(v.Width) then
					return "Sprite[" .. i .. "].Height"
				elseif v.Count and not isnumber(v.Count) then
					return "Sprite[" .. i .. "].Count"
				elseif v.Position1 and not isvector(v.Position1) then
					return "Sprite[" .. i .. "].Position1"
				elseif v.Position2 and not isvector(v.Position2) then
					return "Sprite[" .. i .. "].Position2"
				elseif v.Position3 and not isvector(v.Position3) then
					return "Sprite[" .. i .. "].Position3"
				elseif v.Width and not isnumber(v.Width) then
					return "Sprite[" .. i .. "].Width"
				end
			elseif v.ProjectedTexture then
				if v.Angles and not isvector(v.Angles) then
					return "Sprite[" .. i .. "].Angles"
				elseif v.Color and (not v.Color.r or not v.Color.g or not v.Color.b or not v.Color.a) then
					return "Sprite[" .. i .. "].Color"
				elseif v.FOV and not isnumber(v.FOV) then
					return "Sprite[" .. i .. "].FOV"
				elseif v.Position and not isvector(v.Position) then
					return "Sprite[" .. i .. "].Position"
				elseif v.Size and not isnumber(v.Size) then
					return "Sprite[" .. i .. "].Size"
				end
			end
		end

		return nil
	end

	local function checkParts(x)
		if not istable(x) then
			return ""
		end

		for i, v in ipairs(x) do
			if v.Angles and not isangle(v.Angles) then
				return "Sprite[" .. i .. "].Angles"
			elseif v.Health and not isnumber(v.Health) then
				return "Sprite[" .. i .. "].Health"
			elseif v.LastLerp and not isnumber(v.LastLerp) then
				return "Sprite[" .. i .. "].LastLerp"
			elseif v.Position and not isvector(v.Position) then
				return "Sprite[" .. i .. "].Position"
			elseif v.StartLerp and not isnumber(v.StartLerp) then
				return "Sprite[" .. i .. "].StartLerp"
			end
		end

		return nil
	end

	local function checkSeats(x)
		if not istable(x) then
			return false
		end

		for i, v in ipairs(x) do
			if not isangle(v.Angles) then
				return "Sprite[" .. i .. "].Angles"
			elseif not isvector(v.Position) then
				return "Sprite[" .. i .. "].Position"
			end
		end

		return nil
	end

	if not x.Author then
		return "DATA.Author"
	else
		if not isstring(x.Author.Name) then
			return "DATA.Author.Name"
		elseif not isstring(x.Author.SteamID64) then
			return "DATA.Author.SteamID64"
		end
	end

	if not isnumber(x.Timestamp) then
		return "DATA.Timestamp"
	end

	if not x.Back then
		return "DATA.Back"
	else
		local brakeLights = checkLights(x.Back.BrakeLights)
		local reversingLights = checkLights(x.Back.ReversingLights)
		if brakeLights then
			return "DATA.Back.BrakeLights." .. brakeLights
		elseif reversingLights then
			return "DATA.Back.ReversingLights." .. reversingLights
		end
	end

	if not x.Blinkers then
		return "DATA.Blinkers"
	else
		local leftLights = checkLights(x.Blinkers.LeftLights)
		local rightLights = checkLights(x.Blinkers.RightLights)
		if leftLights then
			return "DATA.Blinkers.LeftLights." .. leftLights
		elseif rightLights then
			return "DATA.Blinkers.RightLights." .. rightLights
		end
	end

	if not x.FlashingLights then
		return "DATA.FlashingLights"
	else
		local flashingLights = checkLights(x.FlashingLights)
		if flashingLights then
			return "DATA.FlashingLights." .. flashingLights
		end
	end

	if not x.Fuel then
		return "DATA.Fuel"
	else
		if x.Fuel.Capacity and not isnumber(x.Fuel.Capacity) then
			return "DATA.Fuel.Capacity"
		elseif x.Fuel.Consumption and not isnumber(x.Fuel.Consumption) then
			return "DATA.Fuel.Consumption"
		elseif not istable(x.Fuel.GasTank) then
			return "DATA.Fuel.GasTank"
		end

		for i, v in ipairs(x.Fuel.GasTank) do
			if not istable(v.GasHole) then
				return "DATA.Fuel.GasTank.GasHole"
			elseif v.Position and not isvector(v.GasHole.Position) then
				return "DATA.Fuel.GasTank.GasHole.Position"
			elseif v.Angles and not isangle(v.GasHole.Angles) then
				return "DATA.Fuel.GasTank.GasHole.Angles"
			elseif not istable(v.GasolinePistol) then
				return "DATA.Fuel.GasTank.GasolinePistol"
			elseif v.GasolinePistol.Position and not isvector(v.GasolinePistol.Position) then
				return "DATA.Fuel.GasTank.GasolinePistol.Position"
			elseif v.GasolinePistol.Angles and not isangle(v.GasolinePistol.Angles) then
				return "DATA.Fuel.GasTank.GasolinePistol.Angles"
			end
		end
	end

	if not x.Headlights then
		return "DATA.Headlights"
	else
		local headlights = checkLights(x.Headlights)
		if headlights then
			return "DATA.Headlights." .. headlights
		end
	end

	if not x.Parts then
		return "DATA.Parts"
	else
		local parts = checkParts(x.Parts)
		if parts then
			return "DATA.Parts." .. parts
		end
	end

	if not x.Seats then
		return "DATA.Seats"
	else
		local seats = checkSeats(x.Seats)
		if seats then
			return "DATA.Seats." .. seats
		end
	end

	if not x.Sounds then
		return "DATA.Sounds"
	else
		if x.Sounds.Blinkers and not isstring(x.Sounds.Blinkers) then
			return "DATA.Sounds.Blinkers"
		elseif x.Sounds.Horn and not isstring(x.Sounds.Horn) then
			return "DATA.Sounds.Horn"
		elseif x.Sounds.Reversing and not isstring(x.Sounds.Reversing) then
			return "DATA.Sounds.Reversing"
		elseif x.Sounds.Siren and not isstring(x.Sounds.Siren) then
			return "DATA.Sounds.Siren"
		end
	end

	return nil
end
--lua/svmod/data/sh_data.lua:
return gluapack()()
--lua/svmod/gui/cl_placingspikestip.lua:
net.Receive("SV_PlacingSpikeStrip", function()
    local delay = net.ReadUInt(5) -- max: 31
    local endtime = CurTime() + delay

    local width, height = 400, 40
    local border = 8
    local x = ScrW() / 2 - width / 2
    local y = ScrH() / 2 - height / 2
    hook.Add("HUDPaint", "SV_PlacingSpikeStrip", function()
		surface.SetDrawColor(18, 25, 31)
        surface.DrawRect(x, y, width, height)

		surface.SetDrawColor(178, 95, 245)
        surface.DrawRect(x + border / 2, y + border / 2, (width - border) * (1 - ((endtime - CurTime()) / delay)), height - border)

        draw.DrawText(tostring(math.floor(endtime - CurTime() + 1)), "SVModFont", x + width / 2, y + 5, Color( 255, 255, 255, 255 ), TEXT_ALIGN_CENTER)
    end)

    timer.Simple(delay, function()
        hook.Remove("HUDPaint", "SV_PlacingSpikeStrip")
    end)
end)
--lua/svmod/gui/editor/cl_fuel.lua:
return gluapack()()
--lua/svmod/gui/editor/cl_seats.lua:
return gluapack()()
--lua/svmod/gui/settings/cl_damage.lua:
function SVMOD:GUI_Damage(panel, data)
	panel:Clear()

	SVMOD:CreateTitle(panel, language.GetPhrase("svmod.damage.vehicle_damage"))

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.damage.physics_multiplier"), function(val)
		net.Start("SV_Settings")
		net.WriteString("Damage")
		net.WriteString("PhysicsMultiplier")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val / 100)
		net.SendToServer()
	end)
	slide:SetValue(data.PhysicsMultiplier * 100)
	slide:SetMaxValue(200)
	slide:SetUnit("%")

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.damage.physics_damage"), function(val)
		net.Start("SV_Settings")
		net.WriteString("Damage")
		net.WriteString("BulletMultiplier")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val / 100)
		net.SendToServer()
	end)
	slide:SetValue(data.BulletMultiplier * 100)
	slide:SetMaxValue(200)
	slide:SetUnit("%")

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.damage.chance_carbonise"), function(val)
		net.Start("SV_Settings")
		net.WriteString("Damage")
		net.WriteString("CarbonisedChance")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val / 100)
		net.SendToServer()
	end)
	slide:SetValue(data.CarbonisedChance * 100)
	slide:SetMaxValue(100)
	slide:SetUnit("%")

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.damage.percent_life"), function(val)
		net.Start("SV_Settings")
		net.WriteString("Damage")
		net.WriteString("SmokePercent")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val / 100)
		net.SendToServer()
	end)
	slide:SetValue(data.SmokePercent * 100)
	slide:SetMaxValue(100)
	slide:SetUnit("%")

	local title = SVMOD:CreateTitle(panel, language.GetPhrase("svmod.damage.wheels"))
	title:DockMargin(0, 30, 0, 0)

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.damage.wheel_shot_multiplier"), function(val)
		net.Start("SV_Settings")
		net.WriteString("Damage")
		net.WriteString("WheelShotMultiplier")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val / 100)
		net.SendToServer()
	end)
	slide:SetValue(data.WheelShotMultiplier * 100)
	slide:SetMaxValue(200)
	slide:SetUnit("%")

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.damage.wheel_collision_multiplier"), function(val)
		net.Start("SV_Settings")
		net.WriteString("Damage")
		net.WriteString("WheelCollisionMultiplier")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val / 100)
		net.SendToServer()
	end)
	slide:SetValue(data.WheelCollisionMultiplier * 100)
	slide:SetMaxValue(200)
	slide:SetUnit("%")

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.damage.wheel_time_punctured"), function(val)
		net.Start("SV_Settings")
		net.WriteString("Damage")
		net.WriteString("TimeBeforeWheelIsPunctured")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val)
		net.SendToServer()
	end)
	slide:SetValue(data.TimeBeforeWheelIsPunctured)
	slide:SetMaxValue(300)
	slide:SetUnit(language.GetPhrase("svmod.seconds"))

	local title = SVMOD:CreateTitle(panel, language.GetPhrase("svmod.damage.player_damage"))
	title:DockMargin(0, 30, 0, 0)

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.damage.driver_multiplier"), function(val)
		net.Start("SV_Settings")
		net.WriteString("Damage")
		net.WriteString("DriverMultiplier")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val / 100)
		net.SendToServer()
	end)
	slide:SetValue(data.DriverMultiplier * 100)
	slide:SetMaxValue(200)
	slide:SetUnit("%")

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.damage.passenger_multiplier"), function(val)
		net.Start("SV_Settings")
		net.WriteString("Damage")
		net.WriteString("PassengerMultiplier")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val / 100)
		net.SendToServer()
	end)
	slide:SetValue(data.PassengerMultiplier * 100)
	slide:SetMaxValue(200)
	slide:SetUnit("%")

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.damage.exit_multiplier"), function(val)
		net.Start("SV_Settings")
		net.WriteString("Damage")
		net.WriteString("PlayerExitMultiplier")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val / 100)
		net.SendToServer()
	end)
	slide:SetValue(data.PlayerExitMultiplier * 100)
	slide:SetMaxValue(200)
	slide:SetUnit("%")
end
--lua/svmod/gui/settings/cl_options.lua:
return gluapack()()
--lua/svmod/gui/settings/cl_vehicles.lua:
function SVMOD:GUI_Vehicles(panel, data)
	panel:Clear()

	SVMOD:CreateTitle(panel, language.GetPhrase("svmod.vehicles.vehicles"))

	local listView =  SVMOD:CreateListView(panel)
	listView:AddColumn(language.GetPhrase("svmod.vehicles.name"))
	listView:AddColumn(language.GetPhrase("svmod.vehicles.category"))
	listView:AddColumn(language.GetPhrase("svmod.vehicles.author"))
	listView:AddColumn(language.GetPhrase("svmod.vehicles.last_edition"))

	listView.OnRowRightClick = function(_, _, panel)
		if panel:GetColumnText(3) == "-" then
			if SVMOD.CFG.Contributor.IsEnabled then
				local Menu = DermaMenu()

				Menu:AddOption(language.GetPhrase("svmod.vehicles.create"), function()
					net.Start("SV_Editor_Open")
					net.WriteString(panel.Model)
					net.SendToServer()
					panel:GetParent():GetParent():GetParent():GetParent():Remove()
				end):SetIcon("icon16/pencil.png")

				Menu:Open()
			end
		else
			local Menu = DermaMenu()

			if SVMOD.CFG.Contributor.IsEnabled then
				Menu:AddOption(language.GetPhrase("svmod.vehicles.edit"), function()
					net.Start("SV_Editor_Open")
					net.WriteString(panel.Model)
					net.SendToServer()
					panel:GetParent():GetParent():GetParent():GetParent():Remove()
				end):SetIcon("icon16/pencil.png")
			end

			Menu:AddOption(language.GetPhrase("svmod.vehicles.author_profile"), function()
				gui.OpenURL("http://steamcommunity.com/profiles/" .. panel.Data.Author.SteamID64)
			end):SetIcon("icon16/user.png")

			-- Menu:AddOption(language.GetPhrase("Report"), function()
			-- 	SVMOD:OpenReportMenu(panel.Model, panel.Data.Timestamp)
			-- end):SetIcon("icon16/exclamation.png")

			Menu:Open()
		end
	end

	local function updateVehicleList()
		if not IsValid(listView) then return end

		listView:Clear()

		if not SVMOD.Data then return end

		for _, veh in ipairs(SVMOD:GetVehicleList()) do
			local vehicleData = SVMOD:GetData(veh.Model)
			local line
			if vehicleData then
				line = listView:AddLine(veh.Name, veh.Category, vehicleData.Author.Name, os.date("%Y/%m/%d - %H:%M", vehicleData.Timestamp))
				line.Data = vehicleData
			else
				line = listView:AddLine(veh.Name, veh.Category, "-", "-")
			end
			line.Model = veh.Model
		end
	end
	updateVehicleList()

	local bottomPanel = vgui.Create("DPanel", panel)
	bottomPanel:Dock(BOTTOM)
	bottomPanel:DockMargin(0, 4, 0, 4)
	bottomPanel:SetSize(0, 30)
	bottomPanel:SetPaintBackground(false)

	SVMOD:CreateHorizontalLine(panel, BOTTOM)

	local button = SVMOD:CreateButton(bottomPanel, language.GetPhrase("svmod.update"), function()
		SVMOD:Data_Update()

		panel:GetParent():Remove()
	end)
	button:Dock(RIGHT)
	button:SetSize(125, 0)
end
--lua/svmod/health/sh_parts.lua:
return gluapack()()
--lua/svmod/horn/cl_horn.lua:
return gluapack()()
--lua/svmod/lights/flashinglights/cl_flashinglights.lua:
-- @class SVMOD
-- @clientside

-- Sets the state of the flashing lights of the vehicle
-- driven by the player.
-- @tparam boolean result True to enable the flashing lights, false to disable
function SVMOD:SetFlashingLightsState(value)
	local Vehicle = LocalPlayer():GetVehicle()
	if not SVMOD:IsVehicle(Vehicle) or not Vehicle:SV_IsDriverSeat() then return end

	if not value then
		value = false
	end

	net.Start("SV_SetFlashingLightsState")
	net.WriteBool(value)
	net.SendToServer()
end

local function startFlashingSound(veh)
	if veh.SV_Data.Sounds.Siren and #veh.SV_Data.Sounds.Siren > 0 then
		veh.SV_FlashingLightSound = CreateSound(veh, "svmod/siren/" .. veh.SV_Data.Sounds.Siren .. ".wav")
		veh.SV_FlashingLightSound:SetSoundLevel(75)
		veh.SV_FlashingLightSound:Play()
		veh.SV_FlashingLightSound:ChangePitch(100, 0)
		timer.Simple(0.1, function()
			if veh.SV_FlashingLightSound then
				veh.SV_FlashingLightSound:ChangeVolume(SVMOD.CFG.Sounds.Siren, 0)
			end
		end)
	end
end

local function stopFlashingSound(veh)
	if veh.SV_FlashingLightSound then
		veh.SV_FlashingLightSound:Stop()
	end
end

net.Receive("SV_TurnFlashingLights", function()
	local veh = net.ReadEntity()
	if not SVMOD:IsVehicle(veh) then return end
	veh = veh:SV_GetDriverSeat()

	local state = net.ReadBool()

	if state then
		veh.SV_States.FlashingLights = true
		veh:EmitSound("svmod/headlight/switch_on.wav")
		startFlashingSound(veh)
	else
		veh.SV_States.FlashingLights = false
		veh:EmitSound("svmod/headlight/switch_off.wav")
		stopFlashingSound(veh)
	end
end)

net.Receive("SV_TurnFlashingSound", function()
	local veh = net.ReadEntity()
	if not SVMOD:IsVehicle(veh) then return end

	local state = net.ReadBool()

	if state then
		startFlashingSound(veh)
	else
		stopFlashingSound(veh)
	end
end)

hook.Add("SV_UnloadVehicle", "SV_TurnOffFlashingLightsOnRemove", function(veh)
	stopFlashingSound(veh)
end)
--lua/svmod/shortcuts/sh_shortcuts.lua:
return gluapack()()
--lua/autorun/tdmcars_997gt3.lua:
return gluapack()()
--lua/autorun/tdmcars_airtug.lua:
local V = {
			Name = "SUPER SECRET", 
			Class = "prop_vehicle_jeep",
			Category = "TDM Emergency",
			Author = "TheDanishMaster, R*",
			Information = "A drivable Police car by TheDanishMaster",
				Model = "models/tdmcars/gtaiv_airtug.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/airtug.txt"
							}
			}
list.Set("Vehicles", "airtugtdm", V)
--lua/autorun/tdmcars_commercial.lua:
return gluapack()()
--lua/autorun/tdmcars_h1_open.lua:
return gluapack()()
--lua/autorun/tdmcars_maserati.lua:
local PrVeh = "prop_vehicle_jeep"
local Cat = "TDM Cars"

local V = {
			Name = "Maserati Ghibli S", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Maserati Ghibli S by TheDanishMaster",
				Model = "models/tdmcars/mas_ghibli.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/mas_ghibli.txt"
							}
			}
list.Set("Vehicles", "mas_ghiblitdm", V)

local V = {
			Name = "Maserati Quattroporte Sport GT S", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Maserati Quattroporte Sport GT S by TheDanishMaster",
				Model = "models/tdmcars/mas_quattroporte.mdl",
							KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/mas_quattroporte.txt"
							}
			}
list.Set("Vehicles", "mas_quattrotdm", V)
--addons/override_workshop/lua/autorun/tdmcars_porcayenne09.lua:
return gluapack()()
--lua/autorun/tdmmisc.lua:
if CLIENT then
surface.CreateFont( "M5SpeedoFont", {
	font = "Arial",
	size = 200,
	weight = 100,
	scanlines = 1,
	antialias = true,

} )
surface.CreateFont( "M5SpeedFont", {
	font = "Arial",
	size = 80,
	weight = 100,
	scanlines = 1,
	antialias = true,

} )
surface.CreateFont( "GhibliSpeedoFont", {
	font = "Trebuchet24",
	size = 200,
	weight = 600,
	scanlines = 1,
	antialias = true,

} )
surface.CreateFont( "LeafSpeed", {
	font = "ChatFont",
	size = 200,
	weight = 600,
	scanlines = 1,
	antialias = true,

} )
surface.CreateFont( "LeafUnit", {
	font = "DermaLarge",
	size = 30,
	weight = 600,
	scanlines = 1,
	antialias = true,

} )

sound.Add( {
	name = "tdmcars_engine_off",
	channel = CHAN_STATIC,
	volume = 1.0,
	level = 75,
	pitch = { 95, 110 },
	sound =	{ "vehicles/tdmcars/miscsounds/engine_off.mp3", "vehicles/tdmcars/miscsounds/engine_off2.mp3", "vehicles/tdmcars/miscsounds/engine_off2.mp3", "vehicles/tdmcars/miscsounds/engine_off2.mp3" },
} )
end

if SERVER then return end -- this is clientsided only!
 
local lastRan = CurTime()
local speed = 0
hook.Add( "PostDrawOpaqueRenderables", "TDMDigitalSpeedo", function()
    local Vehicle = LocalPlayer():GetVehicle()
    if IsValid( Vehicle ) and Vehicle:GetClass() == "prop_vehicle_jeep" then
        if Vehicle:GetModel() == "models/tdmcars/nis_leaf.mdl" then
            if CurTime() - .4 > lastRan then
                speed = math.Round( Vehicle:GetVelocity():Length() / (63360/3600), 0 )
                lastRan = CurTime()
			end
            cam.Start3D2D(Vehicle:LocalToWorld(Vector(-15.58,44.2,50.5)),Vehicle:LocalToWorldAngles(Angle(0,0,30)),0.012)
                surface.SetDrawColor( 255, 255, 255 )
				draw.SimpleText( speed , "LeafSpeed", 50, -10, Color(255,255,255), TEXT_ALIGN_RIGHT, 0)
				draw.SimpleText( "MPH" , "LeafUnit",55, 10, Color(255,255,255), 0, 0)
            cam.End3D2D()
        end
		if Vehicle:GetModel() == "models/tdmcars/trucks/peterbilt_579.mdl" then
			local speed = math.Round(Vehicle:GetVelocity():Length() / (63360/3600),0)
			cam.Start3D2D(Vehicle:LocalToWorld(Vector(-23.3,96.7,100)),Vehicle:LocalToWorldAngles(Angle(0,0,65)),.005)
				surface.SetDrawColor(0,255,0)
				draw.SimpleText( speed , "GhibliSpeedoFont", -30, 30, Color(255,255,255), TEXT_ALIGN_RIGHT, 0)
				draw.SimpleText( "mph" , "GhibliSpeedoFont", 00, 30, Color(255,255,255), 0, 0)
			cam.End3D2D()
		end
		if Vehicle:GetModel() == "models/tdmcars/trucks/peterbilt_579_med.mdl" then
			local speed = math.Round(Vehicle:GetVelocity():Length() / (63360/3600),0)
			cam.Start3D2D(Vehicle:LocalToWorld(Vector(-23.3,96.7,106)),Vehicle:LocalToWorldAngles(Angle(0,0,65)),.005)
				surface.SetDrawColor(0,255,0)
				draw.SimpleText( speed , "GhibliSpeedoFont", -30, 30, Color(255,255,255), TEXT_ALIGN_RIGHT, 0)
				draw.SimpleText( "mph" , "GhibliSpeedoFont", 00, 30, Color(255,255,255), 0, 0)
			cam.End3D2D()
		end
		if Vehicle:GetModel() == "models/tdmcars/bmwm5e60.mdl" then
			local speed = math.Round(Vehicle:GetVelocity():Length() / (63360/3600),0)
			cam.Start3D2D(Vehicle:LocalToWorld(Vector(-19,35,56)),Vehicle:LocalToWorldAngles(Angle(0,0,90)),0.006)
				surface.SetDrawColor(0,255,0)
				draw.SimpleText( speed , "M5SpeedoFont", -50, -10, Color(255,190,0), TEXT_ALIGN_RIGHT, 0)
				draw.SimpleText( "mph" , "M5SpeedFont", 00, 30, Color(255,190,0), 0, 0)
			cam.End3D2D()
		end
		if Vehicle:GetModel() == "models/tdmcars/mas_ghibli.mdl" then
			local speed = math.Round(Vehicle:GetVelocity():Length() / (63360/3600),0)
			cam.Start3D2D(Vehicle:LocalToWorld(Vector(-17.58,26.15,48.55)),Vehicle:LocalToWorldAngles(Angle(0,0,76)),0.0095)
				surface.SetDrawColor(0,255,0)
				draw.SimpleText( speed , "GhibliSpeedoFont", -50, -10, Color(200,200,200), TEXT_ALIGN_CENTER, 0)
			cam.End3D2D()
		end
    end
end )
--addons/[binbon]misc/lua/textscreens_config.lua:
textscreenFonts = {}

local function addFont(font, t)
	if CLIENT then
		t.size = 100
		surface.CreateFont(font, t)
		t.size = 50
		surface.CreateFont(font .. "_MENU", t)
	end

	table.insert(textscreenFonts, font)
end

--[[
---------------------------------------------------------------------------
Custom fonts - requires server restart to take affect -- "Screens_" will be removed from the font name in spawnmenu
---------------------------------------------------------------------------
--]]

-- Default textscreens font
addFont("Coolvetica outlined", {
	font = "Comfortaa",
	weight = 400,
	antialias = false,
    extended = true,
	outline = true
})

addFont("Coolvetica", {
	font = "Comfortaa",
	weight = 400,
	antialias = false,
    extended = true,
	outline = false
})

-- Trebuchet
addFont("Screens_Trebuchet outlined", {
	font = "Trebuchet MS",
	weight = 400,
	antialias = false,
    extended = true,
	outline = true
})

addFont("Screens_Trebuchet", {
	font = "Trebuchet MS",
	weight = 400,
	antialias = false,
    extended = true,
	outline = false
})

-- Arial
addFont("Screens_Arial outlined", {
	font = "Arial",
	weight = 600,
	antialias = false,
    extended = true,
	outline = true
})

addFont("Screens_Arial", {
	font = "Arial",
	weight = 600,
	antialias = false,
    extended = true,
	outline = false
})

-- Roboto Bk
addFont("Screens_Roboto outlined", {
	font = "Roboto Bk",
	weight = 400,
	antialias = false,
    extended = true,
	outline = true
})

addFont("Screens_Roboto", {
	font = "Roboto Bk",
	weight = 400,
	antialias = false,
    extended = true,
	outline = false
})

-- Helvetica
addFont("Screens_Helvetica outlined", {
	font = "Helvetica",
	weight = 400,
	antialias = false,
    extended = true,
	outline = true
})

addFont("Screens_Helvetica", {
	font = "Helvetica",
	weight = 400,
	antialias = false,
    extended = true,
	outline = false
})

-- akbar
addFont("Screens_Akbar outlined", {
	font = "akbar",
	weight = 400,
	antialias = false,
    extended = true,
	outline = true
})

addFont("Screens_Akbar", {
	font = "akbar",
	weight = 400,
	antialias = false,
    extended = true,
	outline = false
})

-- csd
addFont("Screens_csd outlined", {
	font = "csd",
	weight = 400,
	antialias = false,
    extended = true,
	outline = true
})

addFont("Screens_csd", {
	font = "csd",
	weight = 400,
	antialias = false,
    extended = true,
	outline = false
})

if CLIENT then

	local function addFonts(path)
		local files, folders = file.Find("resource/fonts/" .. path .. "*", "MOD")

		for k, v in ipairs(files) do
			if string.GetExtensionFromFilename(v) == "ttf" then
				local font = string.StripExtension(v)
				if table.HasValue(textscreenFonts, "Screens_" .. font) then continue end
print("-- "  .. font .. "\n" .. [[
addFont("Screens_ ]] .. font .. [[", {
	font = font,
	weight = 400,
	antialias = false,
	outline = true
})
				]])
			end
		end

		for k, v in ipairs(folders) do
			addFonts(path .. v .. "/")
		end
	end

	concommand.Add("get_fonts", function(ply)
		addFonts("")
	end)

end
--addons/turkish_food_mod-main/lua/autorun/tfm_darkrp_things.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/itemselect.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/leak_alert.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/selectorbutton.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/tabs.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/valuepopup.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/currencies/helix.lua:
local CURRENCY = VoidFactions.Currencies:NewCurrency() -- Create a new currency object
CURRENCY:Name("Helix") -- Set the currency name

-- The functions that checks if the dependent addon/gamemode is installed
-- This is not required. The currency will not be selectable if this function returns false or nil
CURRENCY:IsInstalledFunc(function ()
    return ix
end)

-- The function that will return the amount of player's money
CURRENCY:GetMoneyFunc(function (ply)
    return ply:GetCharacter():GetMoney()
end)

-- The function that will give money to the player
CURRENCY:GiveMoneyFunc(function (ply, money)
    local char = ply:GetCharacter()
    local currentMoney = char:GetMoney()
    char:SetMoney(currentMoney + money)
end)

-- The function that will take money from the player
-- (NOT NEEDED IF GiveMoneyFunc can remove money)
-- CURRENCY:TakeMoneyFunc(function (ply)
    -- function for taking the money
-- end)

-- The function that will format the money
-- If not supplied, then a $ will be prepended
CURRENCY:FormatMoneyFunc(function (money)
    return ix.currency.Get(money)
end)

-- Register the currency (this is required!)
VoidFactions.Currencies:AddCurrency(CURRENCY)
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/longercapture.lua:
local UPGRADE = VoidFactions.Upgrades:NewUpgrade()

UPGRADE:Name("upgr_longercapture")
UPGRADE:Icon("3T5idNh")

UPGRADE:Description("upgr_desc_longercapture")
UPGRADE:ValueDescription("upgr_descval_longercapture")

UPGRADE:FormatValue(function (val)
    return "+" .. val .. "s"
end)

VoidFactions.Upgrades:AddUpgrade(UPGRADE)
--addons/voidfactions-1.10.6/lua/voidfactions/modules/rewards/moneydeposited.lua:
local REWARD = VoidFactions.RewardModules:NewReward()
REWARD:Name("reward_moneydeposited")
REWARD:Description("reward_desc_moneydeposited")

REWARD:DefaultIcon("Hbhkhdd")

REWARD:Setup(function ()

    hook.Add("VoidFactions.Deposit.MoneyDeposted", "VoidFactions.Rewards.MoneyDeposited", function (faction)
        REWARD:SetValue(faction, faction.money)
    end)

end)

VoidFactions.RewardModules:AddReward(REWARD)
--addons/voidfactions-1.10.6/lua/voidfactions/modules/inventories/helix_inventory.lua:
-- Functions

local function createItemStruct(itemModel, itemClass, dropClass, data)
    return {
        class = itemClass,
        model = itemModel,
        dropClass = dropClass,
        data = data or {}
    }
end

-- Class

local INVENTORY = VoidFactions.Inventories:NewInventory()
INVENTORY:Name("Helix Inventory")

INVENTORY:IsInstalledFunc(function()
    return tobool(ix)
end)

INVENTORY:GetItemsFunc(function (ply)

end)

INVENTORY:GetItemDataFunc(function (ply, itemClass)

end)

INVENTORY:TakeItemFunc(function (ply, itemClass)

end)

INVENTORY:GiveItemFunc(function (ply, class, dropClass, model, data)

end)

-- Dont add inventory until this code is done
--VoidFactions.Inventories:AddInventory(INVENTORY)
--addons/voidfactions-1.10.6/lua/voidfactions/modules/inventories/itemstore.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/net/helpers/sh_helpers.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/invite_popup.lua:
local sc = VoidUI.Scale
local L = VoidFactions.Lang.GetPhrase

local PANEL = {}

function PANEL:Init()
	self:SSetSize(360, 150)

	self:SetTitle("")
	self:ShowCloseButton(false)

	local buttonPanel = self:Add("Panel")
	buttonPanel:Dock(BOTTOM)
	buttonPanel:MarginSides(40)
	buttonPanel:MarginBottom(12)
	buttonPanel:SSetTall(30)

	local accept = buttonPanel:Add("VoidUI.Button")
	accept:Dock(LEFT)
	accept:SSetWide(115)
	accept:SetCompact()
	accept:SetColor(VoidUI.Colors.Green, VoidUI.Colors.Background)
	accept:SetText(L"accept")

	accept.DoClick = function ()
		net.Start("VoidFactions.Invites.Respond")
			net.WriteBool(true)
		net.SendToServer()
		self:Remove()
	end

	local deny = buttonPanel:Add("VoidUI.Button")
	deny:Dock(RIGHT)
	deny:SSetWide(115)
	deny:SetCompact()
	deny:SetColor(VoidUI.Colors.Red, VoidUI.Colors.Background)
	deny:SetText(L"deny")

	deny.DoClick = function ()
		net.Start("VoidFactions.Invites.Respond")
			net.WriteBool(false)
		net.SendToServer()
		self:Remove()
	end
end

function PANEL:SetInfo(name, id)
	self.name = name
	self.id = id
end

function PANEL:Paint(w, h)
	surface.SetDrawColor(VoidUI.Colors.Background)
	surface.DrawRect(0, 0, w, h)

	local navHeight = sc(35)

	surface.SetDrawColor(VoidUI.Colors.Primary)
	surface.DrawRect(0, 0, w, navHeight)

	-- 76561198314224586

	draw.SimpleText(string.upper(L"factionInvite"), "VoidUI.R18", sc(10), navHeight/2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)

	if (self.name) then
		draw.SimpleText(L"invitedTo", "VoidUI.R24", w/2, sc(55), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		draw.SimpleText(string.upper(self.name), "VoidUI.B32", w/2, sc(80), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end

end

vgui.Register("VoidFactions.UI.InvitePopup", PANEL, "DFrame")
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/reward_create.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/upgradetree_manage.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/dynamic/deposit_panel.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/dynamic/manage_faction_panel.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/static/board_factions.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/static/faction_panel.lua:
local L = VoidFactions.Lang.GetPhrase
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
    local member = VoidFactions.PlayerMember
    local faction = member.faction
	local this = self

	self.isLoading = false

    local titlePanel = self:SetTitle("", true)
	self:SetOrigSize(1000, 600)

	self.titlePanel = titlePanel

	surface.SetFont("VoidUI.B30")


	local subfactions = {}
	local lastSize = 0
	for k, subfaction in pairs(VoidFactions.LoadedFactions) do
		if ( (subfaction.id == faction.id) or (subfaction.parentFaction and subfaction.parentFaction.id == faction.id) or (subfaction.parentFaction and subfaction.parentFaction.parentFaction and subfaction.parentFaction.parentFaction.id == faction.id) or member.rank.promoteDefault[subfaction.id] ) then
			local name = string.upper(subfaction.name)
			local size = (surface.GetTextSize(name) * 1.2)

			if (size > lastSize) then
				lastSize = size
			end

			subfactions[#subfactions + 1] = subfaction

		end
	end

	local factionDown = titlePanel:Add("VoidUI.Dropdown")
	factionDown:SSetTall(40)
	factionDown:SetWide(lastSize)
	factionDown:Center()
	for k, subfaction in ipairs(subfactions) do
		factionDown:AddChoice(subfaction.name, subfaction)

		if (subfaction.id == faction.id) then
			factionDown:ChooseOptionID(k)
		end
	end

	self.selectedFaction = faction


	function factionDown:OnSelect(index, value, data)
		self:GetParent():GetParent().selectedFaction = data
		self:GetParent():GetParent():LoadContent(data)
		self:GetParent():GetParent().checkIfCanInvite(data)
	end

	self.factionDown = factionDown

    self.container = self:Add("Panel")
    self.container:Dock(FILL)

    self.container.members = self.container:Add("Panel")
    self.container.members:Dock(FILL)
    
    self.container.members.Paint = function (self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)

        draw.SimpleText(L"name", "VoidUI.B24", sc(70), sc(20), VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
        draw.SimpleText(L"rank", "VoidUI.B24", w/2, sc(20), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)

		if (this.isLoading) then
			draw.SimpleText(L"loading", "VoidUI.B46", w/2, h/2, VoidUI.Colors.White, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end
    end

    local membersContent = self.container.members:Add("VoidUI.RowPanel")
    membersContent:Dock(FILL)

    self.container.members.content = membersContent

	self:LoadContent(faction)

	local leaveButton = titlePanel:Add("VoidUI.Button")
	leaveButton:Dock(RIGHT)
	leaveButton:SetText(L"leaveFaction")
	leaveButton:MarginTops(7)
	leaveButton:MarginRight(15)
	leaveButton:SSetWide(160)
	leaveButton:SetCompact()
	leaveButton:SetColor(VoidUI.Colors.Red)
	leaveButton.DoClick = function ()
		VoidFactions.Member:LeaveFaction()
		VoidFactions.Menu.Panel.sidebar:SelectTab(VoidFactions.Menu.Panel.profileTab)
		VoidFactions.Menu.Panel.factionTab:Remove()
	end

	leaveButton:SetEnabled(!faction.isDefaultFaction)

	local inviteButton = self.container:Add("VoidUI.Button")
	inviteButton:Dock(BOTTOM)
	inviteButton:SetColor(VoidUI.Colors.Blue, VoidUI.Colors.Background)
	inviteButton:SetText(L"inviteMember")
	inviteButton:SetFont("VoidUI.R24")

	local function checkIfCanInvite(faction)
		local canInvite = true
		if (faction.maxMembers != 0 and (faction.members and (#faction.members + 1) or 0) > faction.maxMembers) then canInvite = false end
		
		local lowestRank = member.faction:GetLowestRank()
		if (lowestRank.maxMembers != 0 and #lowestRank:GetMembers() + 1 > lowestRank.maxMembers) then canInvite = false end
		if (!member:Can("Invite")) then canInvite = false end
		if (faction.isDefaultFaction) then canInvite = false end

		inviteButton:SetEnabled(canInvite)
	end

	self.checkIfCanInvite = checkIfCanInvite

	checkIfCanInvite(faction)

	inviteButton.DoClick = function ()
		local selector = vgui.Create("VoidUI.ItemSelect")
		selector:SetParent(self)
		

		local membersTbl = {}
		for k, v in ipairs(faction.members) do
			membersTbl[v.sid] = v
		end

		local plyTbl = {}
		for _, ply in ipairs(player.GetHumans()) do
			if (!IsValid(ply)) then continue end

			local sid = ply:SteamID64()
			if (VoidChar) then
				sid = sid .. "-" .. ply:GetNWInt("VoidFactions.CharID")
			end
			if (membersTbl[sid]) then continue end
			
			plyTbl[sid] = ply:Nick()
		end

		selector:InitItems(plyTbl, function (id, v)
			local sid = VoidChar and string.Split(id, "-")[1] or id
			local ply = player.GetBySteamID64(sid)
			if (IsValid(ply)) then
				-- Invite
				VoidFactions.Member:InvitePlayer(ply, self.selectedFaction)
			end
		end)

		local cx, cy = input.GetCursorPos()
    	selector:SetPos(inviteButton.x + sc(700), cy - sc(250))
	end
	
	self.inviteButton = inviteButton

	hook.Add("VoidFactions.Faction.DataUpdated", "VoidFactions.UI.FactionPanel.UpdateData", function ()
		self:LoadContent(self.selectedFaction)
		self.checkIfCanInvite(self.selectedFaction)
	end)

	hook.Add("VoidFactions.Faction.RanksMembersReceived", "Voidfactions.UI.FactionPanel.MembersUpdate", function (faction)
		if (self.selectedFaction and self.selectedFaction.id == faction.id) then
			self:LoadContent(faction)
			self.checkIfCanInvite(self.selectedFaction)
		end
	end)
end

function PANEL:OnRemove()
	hook.Remove("VoidFactions.Faction.DataUpdated", "VoidFactions.UI.FactionPanel.UpdateData")
	hook.Remove("VoidFactions.Faction.RanksMembersReceived", "Voidfactions.UI.FactionPanel.MembersUpdate")
end

function PANEL:LoadContent(faction)
	local member = VoidFactions.PlayerMember
	
	local membersContent = self.container.members.content
	membersContent:Clear()

	self.isLoading = true

	if (!faction.members) then
		-- Request members
		VoidFactions.Faction:RequestFactionRanks(faction.id)
		return
	end

	self.isLoading = false

	local isSubfaction = false

	for _, facMember in ipairs(faction.members) do

		local isOnline = IsValid(facMember.ply)
		if (VoidChar and isOnline) then
			local charId = facMember.ply:GetNWInt("VoidFactions.CharID")
			local sidId = string.Split(facMember.sid, "-")[2] 
			isOnline = charId == sidId
		end
		
		local playerNick = facMember.name
		if (!playerNick) then
			playerNick = "Unknown"
			steamworks.RequestPlayerInfo(facMember.sid, function (nick)
				playerNick = nick
			end)
		end

		if (facMember == member) then
			playerNick = playerNick .. " (" .. L"you" .. ")"
		end

        local panel = membersContent:Add("Panel")
		panel.Paint = function (self, w, h)
			surface.SetDrawColor(isOnline and VoidUI.Colors.Green or VoidUI.Colors.Red)			
			VoidUI.DrawCircle(20, h/2, 7, 1)

			draw.SimpleText(playerNick or L"loading", "VoidUI.R22", sc(40), h/2-2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
			draw.SimpleText(facMember.rank and facMember.rank.name or "", "VoidUI.R22", w/2, h/2-2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

			draw.RoundedBox(0, 0, h-1, w, 1, VoidUI.Colors.Background)
		end

		

		local actionPanel = panel:Add("Panel")
		actionPanel:Dock(RIGHT)
		actionPanel:MarginTops(8)
		actionPanel:SSetWide(270)

		local promoteButton = actionPanel:Add("VoidUI.Button")
		promoteButton:Dock(LEFT)
		promoteButton:SSetWide(90)

		promoteButton:SetSmaller()
		promoteButton:SetText(L"promote")
		promoteButton:MarginRight(10)

		local canPromote = member:Can("Promote", facMember.faction, nil, facMember)
		local promoteFactions = nil
		local needsSelection = false
		local validPromoteFactions = {}

		local nextRank = facMember.faction:GetNextRank(facMember.rank)
		if (!nextRank and facMember.faction.parentFaction) then
			promoteFactions = {}

			local rootFaction = facMember.faction:GetRootFaction()
			local factionLevel = facMember.faction:GetFactionLevel()

			-- We get the next level factions by this
			for k, v in pairs(VoidFactions.LoadedFactions) do
				-- linq would be nice :(

				-- the factions must share their root faction!
				local _rootFaction = v:GetRootFaction()
				local _factionLevel = v:GetFactionLevel()

				if (factionLevel == _factionLevel + 1 and rootFaction == _rootFaction) then
					promoteFactions[k] = v
				end
			end


			for id, promoteFaction in pairs(promoteFactions or {}) do
				local b = member:Can("Promote", facMember.faction, nil, facMember, promoteFaction)
				if (b) then
					canPromote = true
					needsSelection = true

					validPromoteFactions[#validPromoteFactions + 1] = promoteFaction
				end
			end
		end

		
		promoteButton:SetEnabled(canPromote)

		promoteButton.DoClick = function ()
			if (needsSelection) then
				if (#validPromoteFactions == 1) then
					VoidFactions.Member:PromoteMember(facMember, playerNick, validPromoteFactions[1])
				else
					local selector = vgui.Create("VoidUI.ItemSelect")
					selector:SetParent(self)

					local factionTbl = {}
					for k, v in ipairs(validPromoteFactions or {}) do
						factionTbl[v.id] = v.name
					end
				
					selector:InitItems(factionTbl, function (id, v)
						VoidFactions.Member:PromoteMember(facMember, playerNick, promoteFactions[id])
					end)
				end
			else
				VoidFactions.Member:PromoteMember(facMember, playerNick)
			end
		end

		local demoteButton = actionPanel:Add("VoidUI.Button")
		demoteButton:Dock(LEFT)
		demoteButton:SSetWide(90)

		demoteButton:SetSmaller()
		demoteButton:SetText(L"demote")
		demoteButton:MarginRight(10)
		demoteButton:SetColor(VoidUI.Colors.Orange)

		local canDemote = member:Can("Demote", facMember.faction, nil, facMember)
		local subfactions = nil
		local needsSelection = false
		local validSubfactions = {}
		if (!canDemote) then
			local prevRank = facMember.faction:GetPrevRank(facMember.rank)
			if (!prevRank) then
				subfactions = facMember.faction:GetSubfactions()
				for id, subfaction in pairs(subfactions or {}) do
					local b = member:Can("Demote", facMember.faction, nil, facMember, subfaction)
					if (b) then
						canDemote = true
						needsSelection = true

						validSubfactions[#validSubfactions + 1] = subfaction
					end
				end
			end
		end


		demoteButton:SetEnabled(canDemote)

		demoteButton.DoClick = function ()
			if (needsSelection) then
				if (#validSubfactions == 1) then
					VoidFactions.Member:DemoteMember(facMember, playerNick, validSubfactions[1])
				else
					local selector = vgui.Create("VoidUI.ItemSelect")
					selector:SetParent(self)

					local factionTbl = {}
					for k, v in ipairs(validSubfactions or {}) do
						factionTbl[v.id] = v.name
					end
				
					selector:InitItems(factionTbl, function (id, v)
						VoidFactions.Member:DemoteMember(facMember, playerNick, subfactions[id])
					end)
				end
			else
				VoidFactions.Member:DemoteMember(facMember, playerNick)
			end
		end

		local kickButton = actionPanel:Add("VoidUI.Button")
		kickButton:Dock(LEFT)
		kickButton:SSetWide(60)
		kickButton:SetSmaller()
		kickButton:SetText(L"kick")
		kickButton:MarginRight(10)
		kickButton:SetColor(VoidUI.Colors.Red)

		kickButton:SetEnabled(member:Can("Kick", facMember.faction, nil, facMember))

		kickButton.DoClick = function ()
			VoidFactions.Member:KickMember(facMember, playerNick)
		end


		membersContent:AddRow(panel, 45)
    end
end

function PANEL:PerformLayout(w, h)
    self:SDockPadding(30,25,30,30, self)

    self.container:MarginTop(20, self)
    self.container.members:MarginBottom(20, self)
    self.container.members.content:MarginTop(50, self)
	self.container.members:SDockPadding(30, 0, 30, 0)

	self.inviteButton:SSetTall(48, self)
	self.inviteButton:MarginSides(340, self)

	self.factionDown:SetPos(self.titlePanel:GetWide() / 2 - self.factionDown:GetWide() / 2)
end

vgui.Register("VoidFactions.UI.FactionPanel", PANEL, "VoidUI.PanelContent")

--lua/autorun/wiltos_animbase_loader.lua:
return gluapack()()
--lua/wos/anim_extension/extensions/wos_customtaunt.lua:
return gluapack()()
--lua/wos/dynabase/core/cl_core.lua:
wOS = wOS or {}
wOS.DynaBase = wOS.DynaBase or {}
wOS.DynaBase.UserMounts = {}

hook.Add( "RenderScene", "wOS.DynaBase.PreventDataAccess", function()
	if wOS.DynaBase.ResumeRendering and wOS.DynaBase.ResumeRendering >= CurTime() then return true end
	if not wOS.DynaBase.ReloadModelBool then return end
	wOS.DynaBase.DataCachePass = wOS.DynaBase.DataCachePass + 1
	return true
end )

hook.Add( "PostRender", "wOS.DynaBase.PreventDataAccess", function()
	if not wOS.DynaBase.ReloadModelBool then return end
	wOS.DynaBase.ReloadModelBool = false
	local val = wOS.DynaBase.DataCachePass
	wOS.DynaBase.DataCachePass = 0
	if not val or val < WOS_DYNABASE.MAXCACHE then
		chat.AddText( Color( 255, 0, 0 ), "[wOS-Dynabase] Can not apply animation selection due to conflicting addons. Please let us know on the Workshop Page or Discord!" )
		return
	end
	RunConsoleCommand( "r_flushlod" )
	hook.Call( "PostLoadAnimations" )
	wOS.DynaBase.ResumeRendering = CurTime() + 0.3
	if not wOS.DynaBase.FIRST_TIME_LOADED then wOS.DynaBase.FIRST_TIME_LOADED = true return end
	chat.AddText( Color( 0, 255, 0 ), "[wOS-Dynabase] Successfully applied animation selection to models!" )
end )

concommand.Add( "wos_dynabase_reloadmodels", function()
	wOS.DynaBase.LIVE_RELOAD = true
	wOS.DynaBase:ReloadAnimations()
	wOS.DynaBase.LIVE_RELOAD = false
end )

///////////////////////////////////////////////////////////////////////////////////////////////////
// Credits to Starlight (Oliver) for the code snippet and also giving it to me every time
// I asked, for the last 3 years
local function FindPotentialBases()

	for _ ,addon in pairs( engine.GetAddons() ) do
		local modelFound = file.Find("models/m_anm.mdl", addon.title)
		if #modelFound != 0 then
			MsgC( Color( 255, 0, 255 ), "\n\tAddon: " .. addon.title .. "\n" )
			MsgC( Color( 255, 0, 255 ), "\tLink: https://steamcommunity.com/sharedfiles/filedetails/?id=" .. addon.wsid .. "\n" )
			return true
		end 
	end

	return false
end
///////////////////////////////////////////////////////////////////////////////////////////////////

concommand.Add( "wos_dynabase_help", function( ply, cmd, args )
	MsgC( Color( 255, 255, 255 ), "------------------ ", Color( 133, 173, 219 ), "wiltOS HELP PRINT", Color( 255, 255, 255 ), " ----------------------\n" )
	MsgC( Color( 255, 255, 255 ), "Installed Animation Base\n" )
	timer.Simple( 0.01, function()
		local found = FindPotentialBases()
		if not found then
			MsgC( Color( 255, 0, 255 ), "\n\tNo Animation Bases found! You must get the Dynamic Animation Manager\n" )
			MsgC( Color( 255, 0, 255 ), "\tWorkshop Link: https://steamcommunity.com/sharedfiles/filedetails/?id=2916561591\n" )
		end
		MsgC( color_white, "\nPlease ensure that the only addon above is ", Color( 0, 255, 0 ), "'[wOS] DynaBase - The Dynamic Animation Manager'\n")
		MsgC( color_white, "If there are more addons, unsubscribe from them and install the Dynamic Animation Manager.\n")
		print("\n")

		local seq = LocalPlayer():LookupSequence( "_dynamic_wiltos_enabled_" )
		local resp = ( seq >= 0 and Color( 0, 255, 0 ) ) or Color( 255, 0, 0 )
		MsgC( color_white, "Sequence Check: ", resp, "\t", seq, "\n" )
		MsgC( color_white, "If the above sequence check is ", Color( 255, 0, 0 ), -1, color_white, " and the addon above points to the correct location,\nensure your model is a ", Color( 0, 255, 0 ), "PLAYER MODEL", color_white, " and not an ", Color( 255, 0, 0 ), "NPC MODEL\n" )
		MsgC( color_white, "Run this commmand again as a default GMod player model. If it still prints ", Color( 255, 0, 0 ), -1, color_white, " your Animation Base may be outdated\n" )

		print( "\n" )
		MsgC( color_white, "Make can find the Dynamic Animation Manager workshop page here: https://steamcommunity.com/sharedfiles/filedetails/?id=2916561591\n")
		MsgC( Color( 255, 255, 255 ), "-----------------------------------------------------------\n" )
	end )
end )

///////////////////////////////////////////////////////////////////////////////////////////////////

concommand.Add( "wos_dynabase_openconfig", function( ply, cmd, args )
	wOS.DynaBase:OpenConfigMenu()
end )

list.Add( "DesktopWindows", {
	icon = "wos/dynabase/widget.png",
	title = "DynaBase Menu",
	init = function() wOS.DynaBase:OpenConfigMenu() end,
})
--addons/xenin_framework/lua/xeninui/libs/promises.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/promises.lua:
local M = {}

local deferred = {}
deferred.__index = deferred

local PENDING = 0
local RESOLVING = 1
local REJECTING = 2
local RESOLVED = 3
local REJECTED = 4

local function finish(deferred, state)
	state = state or REJECTED
	for i, f in ipairs(deferred.queue) do
		if state == RESOLVED then
			f:resolve(deferred.value)
		else
			f:reject(deferred.value)
		end
	end
	deferred.state = state
end

local function isfunction(f)
	if type(f) == 'table' then
		local mt = getmetatable(f)
		return mt ~= nil and type(mt.__call) == 'function'
	end
	return type(f) == 'function'
end

local function promise(deferred, next, success, failure, nonpromisecb)
	if type(deferred) == 'table' and type(deferred.value) == 'table' and isfunction(next) then
		local called = false
		local ok, err = pcall(next, deferred.value, function(v)
			if called then return end
			called = true
			deferred.value = v
			success()
		end, function(v)
			if called then return end
			called = true
			deferred.value = v
			failure()
		end)
		if not ok and not called then
			deferred.value = err
			failure()
		end
	else
		nonpromisecb()
	end
end

local function fire(deferred)
	local next
	if type(deferred.value) == 'table' then
		next = deferred.value.next
	end
	promise(deferred, next, function()
		deferred.state = RESOLVING
		fire(deferred)
	end, function()
		deferred.state = REJECTING
		fire(deferred)
	end, function()
		local ok
		local v
		if deferred.state == RESOLVING and isfunction(deferred.success) then
			ok, v = pcall(deferred.success, deferred.value)
		elseif deferred.state == REJECTING and isfunction(deferred.failure) then
			ok, v = pcall(deferred.failure, deferred.value)
			if ok then
				deferred.state = RESOLVING
			end
		end

		if ok ~= nil then
			if ok then
				deferred.value = v
			else
				deferred.value = v
				return finish(deferred)
			end
		end

		if deferred.value == deferred then
			deferred.value = pcall(error, 'resolving promise with itself')
			return finish(deferred)
		else
			promise(deferred, next, function()
				finish(deferred, RESOLVED)
			end, function(state)
				finish(deferred, state)
			end, function()
				finish(deferred, deferred.state == RESOLVING and RESOLVED)
			end)
		end
	end)
end

local function resolve(deferred, state, value)
	if deferred.state == 0 then
		deferred.value = value
		deferred.state = state
		fire(deferred)
	end
	return deferred
end




function deferred:resolve(value)
	return resolve(self, RESOLVING, value)
end

function deferred:reject(value)
	return resolve(self, REJECTING, value)
end





function M.new(options)
	if isfunction(options) then
		local d = M.new()
		local ok, err = pcall(options, d)
		if not ok then
			d:reject(err)
		end
		return d
	end
	options = options or {}
	local d
	d = {
		next = function(self, success, failure)
			local next = M.new({
				success = success,
				failure = failure,
				extend = options.extend
			})
			if d.state == RESOLVED then
				next:resolve(d.value)
			elseif d.state == REJECTED then
				next:reject(d.value)
			else
				table.insert(d.queue, next)
			end
			return next
		end,
		state = 0,
		queue = {},
		success = options.success,
		failure = options.failure
	}
	d = setmetatable(d, deferred)
	if isfunction(options.extend) then
		options.extend(d)
	end
	return d
end





function M.all(args)
	local d = M.new()
	if #args == 0 then
		return d:resolve({})
	end
	local method = "resolve"
	local pending = #args
	local results = {}

	local function synchronizer(i, resolved)
		return function(value)
			results[i] = value
			if not resolved then
				method = "reject"
			end
			pending = pending - 1
			if pending == 0 then
				d[method](d, results)
			end
			return value
		end
	end

	for i = 1, pending do
		args[i]:next(synchronizer(i, true), synchronizer(i, false))
	end
	return d
end





function M.map(args, fn)
	local d = M.new()
	local results = {}
	local function donext(i)
		if i > #args then
			d:resolve(results)
		else
			fn(args[i]):next(function(res)
				table.insert(results, res)
				donext(i + 1)
			end, function(err)
				d:reject(err)
			end)
		end
	end
	donext(1)
	return d
end





function M.first(args)
	local d = M.new()
	for _, v in ipairs(args) do
		v:next(function(res)
			d:resolve(res)
		end, function(err)
			d:reject(err)
		end)
	end
	return d
end





XeninUI.Promises = M

--addons/xenin_framework/lua/xeninui/libs/shadows.lua:
local scrW, scrH = ScrW(), ScrH()

local function Load()
	BSHADOWS = {}

	local resStr = scrW .. "" .. scrH

	BSHADOWS.RenderTarget = GetRenderTarget("bshadows_original_" .. resStr, scrW, scrH)


	BSHADOWS.RenderTarget2 = GetRenderTarget("bshadows_shadow_" .. resStr, scrW, scrH)


	BSHADOWS.ShadowMaterial = CreateMaterial("bshadows", "UnlitGeneric", {
		["$translucent"] = 1,
		["$vertexalpha"] = 1,
		["alpha"] = 1
	})



	BSHADOWS.ShadowMaterialGrayscale = CreateMaterial("bshadows_grayscale", "UnlitGeneric", {
		["$translucent"] = 1,
		["$vertexalpha"] = 1,
		["$alpha"] = 1,
		["$color"] = "0 0 0",
		["$color2"] = "0 0 0"
	})


	BSHADOWS.BeginShadow = function()


		render.PushRenderTarget(BSHADOWS.RenderTarget)


		render.OverrideAlphaWriteEnable(true, true)
		render.Clear(0, 0, 0, 0)
		render.OverrideAlphaWriteEnable(false, false)


		cam.Start2D()


	end


	BSHADOWS.EndShadow = function(intensity, spread, blur, opacity, direction, distance, _shadowOnly)


		opacity = opacity or 255
		direction = direction or 0
		distance = distance or 0
		_shadowOnly = _shadowOnly or false


		render.CopyRenderTargetToTexture(BSHADOWS.RenderTarget2)


		if blur > 0 then
			render.OverrideAlphaWriteEnable(true, true)
			render.BlurRenderTarget(BSHADOWS.RenderTarget2, spread, spread, blur)
			render.OverrideAlphaWriteEnable(false, false)
		end


		render.PopRenderTarget()


		BSHADOWS.ShadowMaterial:SetTexture('$basetexture', BSHADOWS.RenderTarget)


		BSHADOWS.ShadowMaterialGrayscale:SetTexture('$basetexture', BSHADOWS.RenderTarget2)


		local xOffset = math.sin(math.rad(direction)) * distance
		local yOffset = math.cos(math.rad(direction)) * distance


		BSHADOWS.ShadowMaterialGrayscale:SetFloat("$alpha", opacity / 255)
		render.SetMaterial(BSHADOWS.ShadowMaterialGrayscale)
		for i = 1, math.ceil(intensity) do
			render.DrawScreenQuadEx(xOffset, yOffset, scrW, scrH)
		end

		if not _shadowOnly then

			BSHADOWS.ShadowMaterial:SetTexture('$basetexture', BSHADOWS.RenderTarget)
			render.SetMaterial(BSHADOWS.ShadowMaterial)
			render.DrawScreenQuad()
		end

		cam.End2D()
	end


	BSHADOWS.DrawShadowTexture = function(texture, intensity, spread, blur, opacity, direction, distance, shadowOnly)


		opacity = opacity or 255
		direction = direction or 0
		distance = distance or 0
		shadowOnly = shadowOnly or false


		render.CopyTexture(texture, BSHADOWS.RenderTarget2)


		if blur > 0 then
			render.PushRenderTarget(BSHADOWS.RenderTarget2)
			render.OverrideAlphaWriteEnable(true, true)
			render.BlurRenderTarget(BSHADOWS.RenderTarget2, spread, spread, blur)
			render.OverrideAlphaWriteEnable(false, false)
			render.PopRenderTarget()
		end


		BSHADOWS.ShadowMaterialGrayscale:SetTexture('$basetexture', BSHADOWS.RenderTarget2)


		local xOffset = math.sin(math.rad(direction)) * distance
		local yOffset = math.cos(math.rad(direction)) * distance


		BSHADOWS.ShadowMaterialGrayscale:SetFloat("$alpha", opacity / 255)
		render.SetMaterial(BSHADOWS.ShadowMaterialGrayscale)
		for i = 1, math.ceil(intensity) do
			render.DrawScreenQuadEx(xOffset, yOffset, scrW, scrH)
		end
		if not shadowOnly then

			BSHADOWS.ShadowMaterial:SetTexture('$basetexture', texture)
			render.SetMaterial(BSHADOWS.ShadowMaterial)
			render.DrawScreenQuad()
		end
	end
end

Load()

timer.Create("XeninUI.BShadows.ResolutionCheck", 1, 0, function()
	if (ScrW() != scrW or ScrH() != scrH) then
		scrW = ScrW()
		scrH = ScrH()

		Load()
	end
end)

--addons/xenin_framework/lua/xeninui/libs/languages/network/client.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/classes/entity.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/sidebar.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/entities/entity_grid.lua:
local PANEL = {}

function PANEL:SetScript(script)
  self.script = script
  self.ctr = XeninUI.Configurator:FindControllerByScriptName(script)
end

function PANEL:Call(id, default, ...)
  local value = self.Template[id] or default

  if isfunction(value) then
    return value(...)
  else
    return value
  end
end

function PANEL:OnSearch(text)
  text = text:lower()

  local panels = self.Layout:GetChildren()
  for i, v in ipairs(panels) do
    local result = v:Search(text)
    v:SetVisible(result)
  end

  self.Layout:InvalidateLayout()
end

function PANEL:SetData(tbl)
  assert(tbl ~= nil, "cannot destructure nil value")
  local __entity, name, script = tbl.__entity, tbl.name, tbl.script

  self:SetScript(script)
  self.Entity = __entity
  self:SetTitle(name)

  self.Navbar:SetVisible(false)
  self.Template = XeninUI.Configurator.Entities:get(self.Entity)
  self.BaseEnt = XeninUI.Configurator.Entities:create(self.Entity)

  self.TopBar = self:Add("Panel")
  self.TopBar:Dock(TOP)
  self.TopBar:DockMargin(0, 16, 0, 8)

  self.Subtitle = self.TopBar:Add("DLabel")
  self.Subtitle:SetFont("Xenin.Configurator.Admin.Panel.Navbar")
  self.Subtitle:SetText("Subtitle")

  self.Save.DoClick = function(pnl)
    for _, row in ipairs(self.Layout:GetChildren()) do
      if (row.StartedActive and !row.Active) then
        row.Entity:delete(true)
        row:DoSaveAnimation(XeninUI.Theme.Red)
        row.StartedActive = false

        continue
      end
      if (!row.Active) then continue end

      local ent = XeninUI.Configurator.Entities:create(self.Entity)
      local settings = IsValid(row.Settings) and row.Settings.Rows:GetSettings()
      if (!settings) then continue end
      for i, v in pairs(settings) do
        ent["set" .. tostring(i)](ent, v)
      end

      row.StartedActive = true
      row:DoSaveAnimation(XeninUI.Theme.Green)
      ent:save(true)
    end
  end

  self.Layout = self.Scroll:Add("DIconLayout")
  self.Layout:Dock(TOP)
  self.Layout:DockMargin(0, 0, 8, 0)
  self.Layout:SetBorder(0)
  self.Layout:SetSpaceY(8)
  self.Layout:SetSpaceX(8)
  self.Layout.Columns = self:Call("gridColumns", 5)
  self.Layout.PerformLayout = function(pnl, w, h)
    local children = pnl:GetChildren()
    local count = pnl.Columns
    local width = w / math.min(count, #children)

    local x = 0
    local y = 0

    local spacingX = pnl:GetSpaceX()
    local spacingY = pnl:GetSpaceY()
    local border = pnl:GetBorder()
    local innerWidth = w - border * 2 - spacingX * (count - 1)

    for i, child in ipairs(children) do
      if (!IsValid(child)) then continue end
      if (!child:IsVisible()) then continue end

      child:SetPos(border + x * innerWidth / count + spacingX * x, border + y * child:GetTall() + spacingY * y)
      child:SetSize(self:Call("gridColumnWidth", function()
        return innerWidth / count
      end, innerWidth, count, w, h, x, y), self:Call("gridColumnHeight", function()
        return innerWidth / count
      end, innerWidth, count, w, h, x, y))

      x = x + 1
      if (x >= count) then
        x = 0
        y = y + 1
      end
    end

    pnl:SizeToChildren(false, true)
  end

  self:CreateContent()
end

XeninUI:CreateFont("Xenin.Configurator.Grid", 12)

local matTick = Material("xenin/tick.png", "smooth")
function PANEL:CreateColumn(data, index)
  local panel = self.Layout:Add("DButton")
  panel:SetText("")
  panel.BackgroundColor = XeninUI.Theme.Background
  panel.OutlineColor = XeninUI.Theme.Navbar
  panel.TextColor = Color(174, 174, 174)
  panel.StartedActive = tobool(data.isActive)
  panel.Search = data.search or function(pnl, text)
    return pnl.Name:find(text)
  end
  panel.Entity = data.isActive or XeninUI.Configurator.Entities:create(self.Entity)
  panel.Name = panel.Entity and panel.Entity.getName and panel.Entity:getName()
  if (!panel.Name) then
    panel.Name = data.name or "Unknown name"
  end
  self:Call("gridSetDefaultData", function() end, panel.Entity, data, index)
  panel.SelectionAlpha = 0
  panel.Paint = function(...)
    self:Call("gridPaint", function(pnl, w, h)
      draw.RoundedBox(6, 0, 0, w, h, pnl.BackgroundColor)

      pnl:DrawSelected(w, h)
    end, ...)
  end
  panel.DrawSelected = function(...)
    self:Call("gridDrawSelected", function(pnl, w, h)
      local alpha = pnl.SelectionAlpha
      if (alpha <= 1) then return end

      local size = h * 0.25
      local x = w / 2 - size / 2
      local y = h / 2 - size / 2
      local col = ColorAlpha(XeninUI.Theme.Accent, alpha / 8)

      local topRight = !pnl.Settings:IsVisible()
      local bottomRight = true
      if pnl.Settings:IsVisible() then
        bottomRight = pnl.Settings:GetTall() < (h * 0.95)
      end
      XeninUI:DrawRoundedBoxEx(6, 0, 0, w, h, col, true, topRight, true, bottomRight)

      if (true) then return end
      XeninUI:MaskInverse(function()
        XeninUI:DrawCircle(w / 2, h / 2, size * 0.85, 30, col)
      end, function()
        XeninUI:DrawCircle(w / 2, h / 2, size, 30, col)
      end)

      surface.SetDrawColor(col)
      surface.SetMaterial(matTick)
      surface.DrawTexturedRect(x + 1, y + 1, size, size)
    end, ...)
  end
  panel.PaintOver = function(pnl, w, h)
    self:Call("gridPaintOver", function(pnl, w, h)
      local topRight = !pnl.Settings:IsVisible()
      local bottomRight = true
      if pnl.Settings:IsVisible() then
        bottomRight = pnl.Settings:GetTall() < (h * 0.95)
      end
      XeninUI:MaskInverse(function()
        XeninUI:DrawRoundedBoxEx(6, 1, 1, w - 2, h - 2, pnl.OutlineColor, true, topRight, true, bottomRight)
      end, function()
        XeninUI:DrawRoundedBoxEx(6, 0, 0, w, h, pnl.OutlineColor, true, topRight, true, bottomRight)
      end)

      if (!IsValid(pnl.Display)) then
        draw.SimpleText("No Image", "Xenin.Configurator.Grid", w / 2, h / 2, Color(174, 174, 174), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
      end



      XeninUI.DrawMultiLine(pnl.Name, "Xenin.Configurator.Grid", w - 16, 16, w / 2, h - 8, pnl.TextColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
    end, pnl, w, h)

    if (!pnl.SaveAnimation) then return end

    local size = math.max(w, h)
    XeninUI:Mask(function()
      XeninUI:DrawRoundedBox(6, 0, 0, w, h, color_white)
    end, function()
      XeninUI:DrawCircle(w / 2, h / 2, size * (pnl.SaveAnimation * 1.2), 30, ColorAlpha(pnl.SaveColor, 255 - (pnl.SaveAnimation * 255)))
    end)
  end
  panel.OnCursorEntered = function(...)
    self:Call("gridOnCursorEntered", function(pnl)
      pnl:LerpColor("TextColor", color_white)
      pnl:LerpColor("OutlineColor", ColorAlpha(XeninUI.Theme.Accent, 150))
    end, ...)
  end
  panel.OnCursorExited = function(...)
    if (panel.Settings:IsVisible()) then return end

    self:Call("gridOnCursorExited", function(pnl)
      pnl:LerpColor("TextColor", Color(174, 174, 174))
      pnl:LerpColor("OutlineColor", XeninUI.Theme.Navbar)
    end, ...)
  end
  panel.DoSaveAnimation = function(pnl, color)
    if color == nil then color = XeninUI.Theme.Green
    end
    pnl.SaveColor = color
    pnl.SaveAnimation = 0
    pnl:Lerp("SaveAnimation", 1, 0.7, function()
      pnl.SaveAnimation = nil
    end)
  end
  panel.DoClick = function(pnl)
    self:Call("gridDoClick", function(pnl)
      pnl:SetState(!pnl.Active)
    end, pnl)
  end
  panel.SetState = function(pnl, state)
    local instant = pnl.Active == nil
    pnl.Active = state

    local val = state and 255 or 0
    if instant then
      pnl.SelectionAlpha = val
    else
      pnl:Lerp("SelectionAlpha", val)
    end
  end
  panel:SetState(tobool(data.isActive))

  if (data.display and data.display != "") then
    local isModel = data.display:find(".mdl")
    local panelClass = isModel and "DModelPanel" or "Panel"
    if (isModel and data.isSpawnIcon) then
      panelClass = "SpawnIcon"
    end
    panel.Display = panel:Add(panelClass)
    panel.Display:Dock(FILL)
    panel.Display:SetMouseInputEnabled(false)
    if isModel then
      panel.Display:SetModel(data.display)
      if data.isSpawnIcon then
        panel.Display:DockMargin(8, 8, 8, 8)
      else
        panel.Display.LayoutEntity = function() end
        if IsValid(panel.Display.Entity) then
          local mn, mx = panel.Display.Entity:GetRenderBounds()
          local size = 0
          size = math.max(size, math.abs(mn.x) + math.abs(mx.x))
          size = math.max(size, math.abs(mn.y) + math.abs(mx.y))
          size = math.max(size, math.abs(mn.z) + math.abs(mx.z))
          panel.Display:SetFOV(45)
          panel.Display:SetCamPos(Vector(size, size, size))
          panel.Display:SetLookAt((mn + mx) * 0.5)
          if data.color then
            panel.Display:SetColor(data.color)
          end
        end
      end
    elseif (isstring(data.display) and data.display != "") then
      XeninUI:DownloadIcon(panel.Display, data.display)
      panel.Display.Paint = function(pnl, w, h)
        XeninUI:DrawIcon(8, 8, w - 16, h - 16, pnl)
      end
    end
  end

  panel.Cog = panel:Add("DButton")
  panel.Cog:SetText("")
  XeninUI:DownloadIcon(panel.Cog, "CEIrmnK")
  panel.Cog.Color = Color(174, 174, 174)
  panel.Cog.Paint = function(pnl, w, h)
    XeninUI:DrawIcon(4, 4, w - 8, h - 8, pnl, pnl.Color)
  end
  panel.Cog.OnCursorEntered = function(pnl)
    panel:OnCursorEntered()
    pnl:LerpColor("Color", XeninUI.Theme.Accent)
  end
  panel.Cog.OnCursorExited = function(pnl)
    panel:OnCursorExited()
    pnl:LerpColor("Color", Color(174, 174, 174))
  end
  panel.Cog.DoClick = function(pnl)
    local vis = !panel.Settings:IsVisible()
    panel.Settings:SetVisible(vis)

    if vis then
      panel.Settings.JustOpened = true
      panel.Settings:SetTall(panel.Settings.Rows:GetChildSize())
      local aX, aY = panel:LocalToScreen()
      aX = aX + panel:GetWide()
      panel.Settings:SetPos(aX, aY)
      panel.Settings:MakePopup()
    end
  end

  panel.Settings = vgui.Create("EditablePanel")
  panel.Settings:SetZPos(100)
  panel.Settings:SetDrawOnTop(true)
  panel.Settings:SetVisible(false)
  panel.Settings:SetTall(0)
  panel.Settings:SetWide(self:Call("gridSettingsWidth", 250))
  panel.Settings.Paint = function(pnl, w, h)
    XeninUI:DrawRoundedBoxEx(6, 0, 0, w, h, XeninUI.Theme.Background, false, true, false, true)

    local bottomLeft = panel:GetTall() < (h * 0.95)
    XeninUI:MaskInverse(function()
      XeninUI:DrawRoundedBoxEx(6, 1, 1, w - 2, h - 2, XeninUI.Theme.Background, false, true, bottomLeft, true)
    end, function()
      XeninUI:DrawRoundedBoxEx(6, 0, 0, w, h, panel.OutlineColor, false, true, bottomLeft, true)
    end)
  end
  panel.Settings.Think = function(pnl)

    local focus = pnl:HasHierarchicalFocus()
    if (focus) then return end
    if pnl.JustOpened then
      pnl.JustOpened = false

      return
    end

    pnl:SetVisible(false)
    if (panel:IsHovered() or panel:IsChildHovered()) then return end
    panel:OnCursorExited()
  end

  panel.Settings.Rows = panel.Settings:Add("Xenin.Configurator.Admin.Entity.Row.Settings")
  panel.Settings.Rows:DockMargin(4, 4, 4, 4)
  panel.Settings.Rows:AddSettings(panel.Entity or self.BaseEnt)
  panel.Settings.Rows.Parent = panel
  panel.Settings.Rows:Dock(FILL)
  panel.Settings.Rows.Paint = function() end
  panel.Settings.Rows.GetChildSize = function(pnl)
    local height = 0
    local size = 0
    for i, v in ipairs(pnl.Settings) do
      if (!v:IsVisible()) then continue end

      size = size + 1
      height = height + v:GetTall()
    end
    height = height - (size * 3)

    return height + 8
  end

  panel.OnRemove = function(pnl)
    if (!IsValid(panel.Settings)) then return end

    panel.Settings:Remove()
  end
  panel.PerformLayout = function(pnl, w, h)
    pnl.Cog:SetSize(24, 24)
    pnl.Cog:AlignTop(4)
    pnl.Cog:AlignRight(4)
  end


  self:Call("gridPostInit", function() end, panel)
end

function PANEL:CreateContent()
  local data = self.Template.getAllEntities()
  local content = self.Template.getGridContent()

  for i, v in ipairs(content) do
    local tbl = self:Call("getGridData", function(tbl)
      return tbl end, v)
    if (!tbl) then continue end

    self:CreateColumn(tbl, i)
  end
end

vgui.Register("Xenin.Configurator.Admin.EntityGrid", PANEL, "Xenin.Configurator.Admin.Panel")

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/blank.lua:
local x

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/checkbox.lua:
local x

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/keyvalue.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/config/network/client.lua:
net.Receive("Xenin.RequestConfig", function(len, ply)
  local selector = net.ReadString()
  local len = net.ReadUInt(32)
  local tbl = von.deserialize(net.ReadData(len))

  XeninUI.Config:set(selector, tbl)
end)

--addons/xenin_framework/lua/xeninui/libs/players/controller.lua:
local Controller
do
  local _class_0
  local _base_0 = {
    __name = "Controller",
    onPlayerInitialSpawn = function(self, ply)
      local db = XeninUI.Players.Database
      db:begin()
      self:playTimeJoin(ply)
      db:commit():next(function()
        if (!IsValid(ply)) then return end

        hook.Run("Xenin.PlayerInitialSpawn", ply)
      end)
    end,
    onPlayerDisconnect = function(self, ply)
      self:playTimeDisconnect(ply)
    end,
    playTimeJoin = function(self, ply)
      local sid64 = ply:SteamID64()
      local db = XeninUI.Players.Database
      db:insertPlayer(sid64)
      db:deleteInactivePlayerJoins(sid64)
      db:insertPlayerJoin(sid64)
      db:getPlayerPlayTime(sid64):next(function(result)
        if (!IsValid(ply)) then return end

        ply.xeninPlaytime = result
      end)
    end,
    getAmountOfUnreadNotifications = function(self, ply)
      return XeninUI.Players.Database:getAmountOfUnreadNotifications(ply:SteamID64())
    end,
    getNotifications = function(self, ply)
      return XeninUI.Players.Database:getNotifications(ply:SteamID64())
    end,
    addNotificationSid64 = function(self, sid64, notification)
      assert(notification ~= nil, "cannot destructure nil value")
      local scriptId, type, content, data = notification.scriptId, notification.type, notification.content, notification.data
      local db = XeninUI.Players.Database

      return db:insertNotification(sid64, scriptId, type, content, data):next(function(id)
        return db:getNotification(id)
      end)
    end,
    markNotificationsRead = function(self, sid64, ids)
      local db = XeninUI.Players.Database
      db:begin()
      for i, v in ipairs(ids) do
        db:markNotificationRead(sid64, v)
      end
      return db:commit()
    end,
    addNotification = function(self, ply, notification)
      return self:addNotificationSid64(ply:SteamID64(), notification):next(function(result)
        return result
      end)
    end,
    playTimeDisconnect = function(self, ply)
      XeninUI.Players.Database:insertPlayerLeave(ply:SteamID64())
    end,
    __type = function(self)
      return self.__name
    end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self) end,
    __base = _base_0
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  Controller = _class_0
end

XeninUI.Players.Controller = Controller()

if SERVER then
  hook.Add("PlayerInitialSpawn", "XeninUI.Players", function(ply)
    XeninUI.Players.Controller:onPlayerInitialSpawn(ply)
  end)

  hook.Add("PlayerDisconnected", "XeninUI.Players", function(ply)
    XeninUI.Players.Controller:onPlayerDisconnect(ply)
  end)
end

--addons/xenin_framework/lua/xeninui/elements/avatar.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/slider_pad.lua:
return gluapack()()
--addons/xenin-coinflip/lua/coinflip/currencies/ps2.lua:
return gluapack()()
--addons/xenin-coinflip/lua/coinflip/ui/menu.lua:
local PANEL = {}

function PANEL:Init()
  Coinflip.Frame = self
  
	self.sidebar = self:Add("XeninUI.SidebarV2")
	self.sidebar:Dock(LEFT)
	self.sidebar:SetBody(self)
  self.sidebar:CreatePanel(Coinflip.i18n:get("ui.tabs.standalone.flips", nil, "Flips"), nil, "Coinflip.Games", "C3MyKJE")
  self.sidebar:CreatePanel(Coinflip.i18n:get("ui.tabs.standalone.history", nil, "History"), nil, "Coinflip.History", "rKPSnOg")
  --self.sidebar:CreatePanel(Coinflip.i18n:get("ui.tabs.standalone.stats", nil, "Stats"), nil, "Coinflip.Stats")
  self.sidebar:SetActive(1)
end

function PANEL:PerformLayout(w, h)
  self.BaseClass.PerformLayout(self, w, h)

  local sw = 0
  for i, v in ipairs(self.sidebar.Sidebar) do
    surface.SetFont("XeninUI.SidebarV2.Name")
    local nameTw = surface.GetTextSize(v.Name or "")
    surface.SetFont("XeninUI.SidebarV2.Desc")
    local descTw = surface.GetTextSize(v.Desc or "")

    local tw = math.max(nameTw, descTw) + 8
    if (v.Icon) then
      tw = tw + 68
    end

    sw = math.max(sw, tw)
  end

  self.sidebar:SetWide(math.max(140, sw))
end
vgui.Register("Coinflip.Frame", PANEL, "XeninUI.Frame")

local PANEL = {}

function PANEL:Init()
  self.topNavbar = vgui.Create("Panel", self)
  self.topNavbar:Dock(TOP)

	self.navbar = vgui.Create("XeninUI.Navbar", self.topNavbar)
	self.navbar:Dock(FILL)
	self.navbar:SetBody(self)
  self.navbar:AddTab(Coinflip.i18n:get("ui.tabs.f4.flips", nil, "FLIPS"), "Coinflip.Games")
  self.navbar:AddTab(Coinflip.i18n:get("ui.tabs.f4.history", nil, "HISTORY"), "Coinflip.History")
  --self.navbar:AddTab(Coinflip.i18n:get("ui.tabs.f4.stats", nil, "STATS"), "Coinflip.Stats")
  self.navbar:SetActive(Coinflip.i18n:get("ui.tabs.f4.flips", nil, "FLIPS"))
end

function PANEL:PerformLayout(w, h)
  self.topNavbar:SetTall(56)
end
vgui.Register("Coinflip.Frame.F4", PANEL)

--addons/xenin-coinflip/lua/coinflip/ui/history_row.lua:
local PANEL = {}

AccessorFunc(PANEL, "m_id", "ID")

XeninUI:CreateFont("Coinflip.Games.Row.Name", 24)
XeninUI:CreateFont("Coinflip.Games.Row.Bet", 18)

function PANEL:Init()
	self.background = XeninUI.Theme.Navbar

	self.Avatar = self:Add("XeninUI.Avatar")
	self.Avatar:SetVertices(90)

	self.Name = self:Add("DLabel")
	self.Name:SetFont("Coinflip.Games.Row.Name")
	self.Name:SetTextColor(Color(220, 220, 220))

	self.Money = self:Add("DLabel")
	self.Money:SetFont("Coinflip.Games.Row.Name")
  self.Money:SetContentAlignment(6)

	self.Status = self:Add("DLabel")
	self.Status:SetFont("Coinflip.Games.Row.Bet")
  self.Status:SetTextColor(Color(175, 175, 175))
end

function PANEL:SetInfo(tbl)
	self.Avatar.avatar:SetSteamID(tbl.opponent, 128)
  if (player.GetBySteamID64(tbl.opponent)) then
    self.Name:SetText(player.GetBySteamID64(tbl.opponent):Nick())
    self.Name:SizeToContents()
  else
    steamworks.RequestPlayerInfo(tbl.opponent, function(name)
      self.Name:SetText(name)
      self.Name:SizeToContents()
    end)
  end
  if (tbl.currency == "NULL") then tbl.currency = Coinflip:GetCurrencyIfNil() end
  local curr = Coinflip:GetCurrency(tbl.currency)
  local money = curr:Format(tbl.money)
  if (tbl.winner == LocalPlayer():SteamID64()) then
    money = "+" .. money
  else
    money = "-" .. money
  end
	self.Money:SetText(money)
	self.Money:SizeToContentsY()
  self.Money:SizeToContentsX(2)

  self.Status:SetText(tbl.winner == LocalPlayer():SteamID64() and 
    Coinflip.i18n:get("ui.history.won", nil, "WON" )or
    Coinflip.i18n:get("ui.history.lost", nil, "LOST")
  )
  local col = tbl.winner == LocalPlayer():SteamID64() and XeninUI.Theme.Green or XeninUI.Theme.Red
  self.Money:SetTextColor(col)
  self.Status:SetTextColor(col)
  self.Status:SizeToContentsX(2)
end

function PANEL:Paint(w, h)
	draw.RoundedBox(6, 0, 0, w, h, self.background)
end

function PANEL:PerformLayout(w, h)
	self.Avatar:SetPos(8, 8)
	self.Avatar:SetSize(h - 16, h - 16)

	self.Name:SetPos(self.Avatar.x + self.Avatar:GetWide() + 12,
		self.Avatar.y + 2)
	self.Status:SetPos(self.Name.x,
		self.Name.y + self.Name:GetTall() - 2)
  self.Money:SetTall(h)
  self.Money:AlignRight(20)
end

vgui.Register("Coinflip.History.Row", PANEL)
--addons/xenin-inventory/lua/inventory/classes/itemv2.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/entities/whitelist.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/essentials/console_commands.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/languages/danish.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local LANG = {
  ["ConCommand.Drop"] = "Smid :item:",
  ["ConCommand.DropAll"] = "Smid :amount:x :item:",
  ["ConCommand.Destroy"] = "Ødelage :amount:x :item:",
  ["ConCommand.Destroy.Popup.Title"] = "Ødelæg :item:",
  ["ConCommand.Destroy.Popup.Desc"] = "Er du sikker på, at du vil ødelægge:item:?",
  ["ConCommand.Destroy.Popup.Yes"] = "Ja",
  ["ConCommand.Destroy.Popup.No"] = "Nej",

  ["ChatCommand.Holster.Unable"] = "Du kan ikke hylstre dette våben på grund af din begrænsede lagerplads",
  ["ChatCommand.Blacklisted"] = "Dette objekt kan ikke puttes i dit inventar",

  ["Bank.Title"] = "XeninInventory - Bank",
  ["XeninInventory.Title"] = "Inventory",


  ["XeninInventory.Tabs.XeninInventory"] = "INVENTORY",


  ["XeninInventory.Popup.Equip"] = "Udstyr",
  ["XeninInventory.Popup.Drop"] = "Smid",
  ["XeninInventory.Popup.Drop All"] = "Smid Alt",
  ["XeninInventory.Popup.Destroy"] = "Ødelægge",
  ["XeninInventory.Popup.Use"] = "Brug",
  ["XeninInventory.Popup.Drop Amount"] = "Smid beløb",

  ["XeninInventory.Popup.DropAmount.Error.Invalid"] = "Ugyldigt antal?",
  ["XeninInventory.Popup.DropAmount.Error.TooLow"] = "Too low of a number",
  ["XeninInventory.Popup.DropAmount.Error.TooHigh"] = "Du kan ikke have droppe så mange, fordi du ikke har så mange!",


  ["XeninInventory.Actions.Equip"] = "UDSTYR",
  ["XeninInventory.Actions.Drop"] = "SMID",
  ["XeninInventory.Actions.Drop All"] = "DROP ALLE",
  ["XeninInventory.Actions.Destroy"] = "ØDELÆGGE",
  ["XeninInventory.Actions.Use"] = "BRUG",
  ["XeninInventory.Actions.Drop Amount"] = "SMID MÆNGDE",


  ["XeninInventory.Field.Amount"] = "x:amount:",
  ["XeninInventory.Field.MaxAmount"] = "max x:amount:",

  ["XeninInventory.XeninInventory.Search"] = "Søg efter en vare",

  ["XeninInventory.XeninInventory.Unsorted"] = "Usorteret",
  ["XeninInventory.XeninInventory.Alphabetically"] = "Alfabetisk",
  ["XeninInventory.XeninInventory.WorstToBest"] = "Værst at bedst",
  ["XeninInventory.XeninInventory.BestToWorst"] = "Bedst til værst",

  ["XeninInventory.Shipment.Desc"] = ":amount: våben tilbage",

  ["XeninInventory.Pickup.Markup"] = ":font::color:Press :/color::rarityColor::modifierKey: + :key::/color: at tilføje :name: til din beholdning:/color::/font:",
  ["XeninInventory.Pickup"] = "Tryk på :modifierKey: +:key:  at tilføje :name: til din beholdning",
  ["XeninInventory.Money"] = ":money:",

  ["Admin.Title"] = "XeninInventory Admin",
  ["Admin.Tabs.Management"] = "LEDELSE",
  ["Admin.NotAdmin"] = "Du skal være en administrator for at åbne dette!",

  ["Admin.Management.Loading"] = "Indlæser",
  ["Admin.Management.Search"] = "Søg efter navn / SteamID(64)",
  ["Admin.Management.Searching"] = "Søger",
  ["Admin.Management.Online"] = "Online",
  ["Admin.Management.Offline"] = "Offline",
  ["Admin.Management.OpenInventory"] = "Åben beholdning",

  ["Admin.Player.Title"] = "Spillerinventar",
  ["Admin.Player.Tabs.XeninInventory"] = "INVENTAR",
  ["Admin.Player.Tabs.Bank"] = "BANK",
  ["Admin.Player.Items"] = ":items: items",
  ["Admin.Player.Clear.XeninInventory"] = "Ryd inventar",
  ["Admin.Player.Clear.Bank"] = "Ryd bank",
  ["Admin.Player.Clear.Popup.Text"] = "Er du sikker på, at du vil rydde disse spillere: type :? Dette kan ikke fortrydes!",
  ["Admin.Player.Clear.Popup.Yes"] = "Ja, klart",
  ["Admin.Player.Clear.Popup.No"] = "Nej",

  ["Admin.Clear.Slot"] = "Dine :type: slot nummer :id: er blevet ryddet af en administrator",
  ["Admin.Clear"] = "Dine :type: er blevet ryddet af en administrator"
}

XeninInventory:CreateLanguage("Danish", LANG)

--addons/xenin-inventory/lua/inventory/configuration/config.lua:
-- YOU DON'T NEED TO TOUCH THIS IF YOU DON'T KNOW WHAT IT IS
RARITY_COMMON = 1
RARITY_UNCOMMON = 5
RARITY_RARE = 3
RARITY_EPIC = 4
RARITY_LEGENDARY = 5

XeninInventory.Config = XeninInventory.Config or {}
function XeninInventory.Config:AddRarity(entClass, rarity)
  self.Rarities[entClass] = rarity
end
XeninInventory.Config.Items = XeninInventory.Config.Items or {}
XeninInventory.Config.Rarities = {}
-- TOUCH BELOW HERE

-- Should you be able to use ALT + *key* to pick up items?
XeninInventory.Config.PickUpWithALT = true

-- What key should the modifier key be? (default: KEY_LALT)
-- https://wiki.facepunch.com/gmod/Enums/KEY
XeninInventory.Config.ModifierKey = KEY_LALT
-- How should it be displayed?
XeninInventory.Config.ModifierKeyStr = "ALT"

-- What key should be used in combination with alt?
-- https://wiki.facepunch.com/gmod/Enums/KEY
XeninInventory.Config.AltKey = KEY_E
-- Type the letter that ^ actually is.
XeninInventory.Config.AltKeyStr = "E"

-- When using weapons from inventory, should it spawn with no ammo?
-- Inventory automatically saves ammo from weapons that are holstered.
XeninInventory.Config.GiveAmmoClip = false

-- What key should you open the inventory menu with?
-- https://wiki.facepunch.com/gmod/Enums/KEY
-- If you want to disable this, set it to false instead of a key!
XeninInventory.Config.InventoryKey = false

-- Should users spawn with an inventory weapon allowing them to pick up items with the weapon?
XeninInventory.Config.SpawnWithInventorySWEP = true

-- What color should the standard chat messages prefix have?
XeninInventory.Config.PrefixCol = Color(46, 204, 113)
-- What should the prefix say?
XeninInventory.Config.PrefixText = "Envanter ="

-- What language?
-- By default this only supports English, but you can add your own language
XeninInventory.Config.Language = "Turkish"

-- The NPC's model?
XeninInventory.Config.NPCModel = "models/mossman.mdl"
-- The outline color of the NPC's overhead HUD.
XeninInventory.Config.NPCColor = Color(201, 176, 15)
-- The text on the NPC's overhead HUD
XeninInventory.Config.NPCText = "Kasa"
-- The icon for the NPC's overhead HUD
XeninInventory.Config.NPCIcon = Material("xenin/inventory/icon.png", "smooth")

XeninInventory.Config.EasySkinsEnabled = false

-- How many items should there be in a row in the bank?
XeninInventory.Config.BankItemsPerRow = 12
-- Slots for the bank.
-- Free is for everyone that isn't in the paid list.
-- The paid list works by doing ["rank"] = amount_of_slots
XeninInventory.Config.BankSlots = {
  Free = 25,
  Paid = {
    ["donator"] = 50,
    ["donator+"] = 75,
    ["denemerehber"] = 50,
    ["rehber"] = 50,
    ["rehber2"] = 50,
    ["rehber3"] = 50,
    ["rehber4"] = 50,
    ["denememoderator"] = 50,
    ["moderator"] = 50,
    ["moderator2"] = 50,
    ["moderator3"] = 50,
    ["denetmen"] = 50,
    ["genelyetkili"] = 50,
    ["toplulukyoneticisi"] = 50,
    ["admin"] = 50,
    ["superyetki"] = 50,
    ["superadmin"] = 100,
  }
}

-- Same as above but for the inventory itself, not the bank
XeninInventory.Config.ItemsPerRow = 8
-- Same as above but for the inventory itself, not the bank
XeninInventory.Config.Slots = {
  Free = 25,
  Paid = {
    ["donator"] = 50,
    ["donator+"] = 75,
    ["denemerehber"] = 50,
    ["rehber"] = 50,
    ["rehber2"] = 50,
    ["rehber3"] = 50,
    ["rehber4"] = 50,
    ["denememoderator"] = 50,
    ["moderator"] = 50,
    ["moderator2"] = 50,
    ["moderator3"] = 50,
    ["denetmen"] = 50,
    ["genelyetkili"] = 50,
    ["toplulukyoneticisi"] = 50,
    ["admin"] = 50,
    ["superyetki"] = 50,

  }
}

XeninInventory.Config.Admins = {
  ["superadmin"] = true,
  ["superyetki"] = true,
}

-- The categories are defined here
-- [number] is the number the category will be known as.
-- name is obviously the name.
-- color represents the color used to visualise the category
-- maxStack is how many items can max be stacked if it's that category
-- amountBackgroundColor is an optional thing! Use this for colors where seeing the default amount text background color might be hard.
XeninInventory.Config.Categories = {
  [1] = { name = "Normal", color = Color(125, 125, 125), maxStack = 50 }, -- grey
  [2] = { name = "Yaygın olmayan", color = Color(46, 204, 113), maxStack = 30 }, -- green
  [3] = { name = "Nadir", color = Color(41, 128, 185), maxStack = 20 }, -- blue
  [4] = { name = "Destansı", color = Color(142, 68, 173), maxStack = 10 }, -- purple
  [5] = { name = "Efsanevi", color = Color(251, 197, 49), maxStack = 5, amountBackgroundColor = Color(0, 0, 0, 225) }, -- orange
}

-- Should users be able to sort by rarity quality?
XeninInventory.Config.EnableRaritySorting = true

-- **WARNING**
-- This is a whitelist for entities that should be allowed to pick up that DOES NOT have a template in configuration/items/
-- I can not be 100% certain that the entity will save and behave exactly as it should but it will try to find all the data it needs to save!
-- Please use this for generic things only, such as some weed seeds or something, not DarkRP money printers!!
-- If an item doesn't work you should either get your developer to make a template in configuration/items/ folder or create a support ticket!
-- Also please be aware that the way it saves data is inefficient the first time it saves that kind of entity after a restart.
--
-- The syntax is simple, just do ["ent_class_name"] = true,
-- Example:
-- ["bank_npc"] = true,
XeninInventory.Config.WhitelistEntities = {
  --["bank_npc"] = true,
}

-- BLacklist, works same as whitelist configuration wise.
XeninInventory.Config.Blacklist = {
  --["fas2_ak47"] = true,
    ["clt_akvlcn"] = true,
    ["weapon_m4a4h"] = true,
    ["awp_asiimov"] = true,
    ["zmlab2_item_crate"] = false,
    ["m9k_ares_shrike"] = true,
    ["m9k_fg42"] = true,
    ["m9k_minigun"] = true,
    ["m9k_m1918bar"] = true,
    ["m9k_m249lmg"] = true,
    ["m9k_m60"] = true,
    ["m9k_pkm"] = true,
    ["csgo_bayonet"] = true,
    ["csgo_bayonet_autotronic"] = true,
    ["csgo_bayonet_black_laminate"] = true,
    ["csgo_bayonet_bluesteel"] = true,
    ["csgo_bayonet_boreal"] = true,
    ["csgo_bayonet_bright_water"] = true,
    ["csgo_bayonet_case"] = true,
    ["csgo_bayonet_crimsonwebs"] = true,
    ["csgo_bayonet_damascus"] = true,
    ["csgo_bayonet_fade"] = true,
    ["csgo_bayonet_ddpat"] = true,
    ["csgo_bayonet_freehand"] = true,
    ["csgo_bayonet_gamma_doppler"] = true,
    ["csgo_bayonet_lore"] = true,
    ["csgo_bayonet_marblefade"] = true,
    ["csgo_bayonet_night"] = true,
    ["csgo_bayonet_rustcoat"] = true,
    ["csgo_bayonet_slaughter"] = true,
    ["csgo_bayonet_tiger"] = true,
    ["csgo_bayonet_ultraviolet"] = true,
    ["csgo_bowie"] = true,
    ["csgo_bowie_bluesteel"] = true,
    ["csgo_bowie_boreal"] = true,
    ["csgo_bowie_bright_water"] = true,
    ["csgo_bowie_case"] = true,
    ["csgo_bowie_crimsonwebs"] = true,
    ["csgo_bowie_damascus"] = true,
    ["csgo_bowie_fade"] = true,
    ["csgo_bowie_ddpat"] = true,
    ["csgo_bowie_freehand"] = true,
    ["csgo_bowie_gamma_doppler"] = true,
    ["csgo_bowie_marblefade"] = true,
    ["csgo_bowie_night"] = true,
    ["csgo_bowie_rustcoat"] = true,
    ["csgo_bowie_slaughter"] = true,
    ["csgo_bowie_tiger"] = true,
    ["csgo_bowie_ultraviolet"] = true,
    ["csgo_butterfly"] = true,
    ["csgo_butterfly_bluesteel"] = true,
    ["csgo_butterfly_boreal"] = true,
    ["csgo_butterfly_bright_water"] = true,
    ["csgo_butterfly_case"] = true,
    ["csgo_butterfly_crimsonwebs"] = true,
    ["csgo_butterfly_damascus"] = true,
    ["csgo_butterfly_fade"] = true,
    ["csgo_butterfly_ddpat"] = true,
    ["csgo_butterfly_freehand"] = true,
    ["csgo_butterfly_gamma_doppler"] = true,
    ["csgo_butterfly_marblefade"] = true,
    ["csgo_butterfly_night"] = true,
    ["csgo_butterfly_rustcoat"] = true,
    ["csgo_butterfly_slaughter"] = true,
    ["csgo_butterfly_tiger"] = true,
    ["csgo_butterfly_ultraviolet"] = true,
    ["csgo_cssource"] = true,
    ["csgo_default_knife"] = true,
    ["csgo_default_golden"] = true,
    ["csgo_default_t"] = true,
    ["csgo_default_t_golden"] = true,
    ["csgo_falchion"] = true,
    ["csgo_falchion_bluesteel"] = true,
    ["csgo_falchion_boreal"] = true,
    ["csgo_falchion_bright_water"] = true,
    ["csgo_falchion_case"] = true,
    ["csgo_falchion_crimsonwebs"] = true,
    ["csgo_falchion_damascus"] = true,
    ["csgo_falchion_fade"] = true,
    ["csgo_falchion_ddpat"] = true,
    ["csgo_falchion_freehand"] = true,
    ["csgo_falchion_gamma_doppler"] = true,
    ["csgo_falchion_marblefade"] = true,
    ["csgo_falchion_night"] = true,
    ["csgo_falchion_rustcoat"] = true,
    ["csgo_falchion_slaughter"] = true,
    ["csgo_falchion_tiger"] = true,
    ["csgo_falchion_ultraviolet"] = true,
    ["csgo_flip"] = true,
    ["csgo_flip_autotronic"] = true,
    ["csgo_flip_black_laminate"] = true,
    ["csgo_flip_bluesteel"] = true,
    ["csgo_flip_boreal"] = true,
    ["csgo_flip_bright_water"] = true,
    ["csgo_flip_case"] = true,
    ["csgo_flip_crimsonwebs"] = true,
    ["csgo_flip_damascus"] = true,
    ["csgo_flip_fade"] = true,
    ["csgo_flip_ddpat"] = true,
    ["csgo_flip_freehand"] = true,
    ["csgo_flip_gamma_doppler"] = true,
    ["csgo_flip_lore"] = true,
    ["csgo_flip_marblefade"] = true,
    ["csgo_flip_night"] = true,
    ["csgo_flip_rustcoat"] = true,
    ["csgo_flip_slaughter"] = true,
    ["csgo_flip_tiger"] = true,
    ["csgo_flip_ultraviolet"] = true,
    ["csgo_gut"] = true,
    ["csgo_gut_autotronic"] = true, 
    ["csgo_gut_black_laminate"] = true,
    ["csgo_gut_bluesteel"] = true,
    ["csgo_gut_boreal"] = true,
    ["csgo_gut_bright_water"] = true,
    ["csgo_gut_case"] = true,
    ["csgo_gut_crimsonwebs"] = true,
    ["csgo_gut_damascus"] = true,
    ["csgo_gut_fade"] = true,
    ["csgo_gut_ddpat"] = true,
    ["ch_bitminers_tablet"] = true,
    ["ch_bitminers_repair_wrench"] = true,
    ["weapon_csgo_knife_bayonet"] = true, 
    ["weapon_csgo_knife_bowie"] = true, 
    ["weapon_csgo_knife_butterfly"] = true,
    ["weapon_csgo_knife_classic"] = true,
    ["weapon_csgo_knife_default_ct"] = true,
    ["weapon_csgo_knife_default_t"] = true,
    ["weapon_csgo_knife_falchion"] = true, 
    ["weapon_csgo_knife_flip"] = true,
    ["weapon_csgo_knife_gold_ct"] = true,
    ["weapon_csgo_knife_gold_t"] = true,
    ["weapon_csgo_knife_gut"] = true,
    ["weapon_csgo_knife_huntsman"] = true, 
    ["weapon_csgo_knife_karambit"] = true,
    ["weapon_csgo_knife_m9bayonet"] = true,
    ["weapon_csgo_knife_navaja"] = true,
    ["weapon_csgo_knife_nomad"] = true,
    ["weapon_csgo_knife_cord"] = true, 
    ["weapon_csgo_knife_push"] = true,
    ["weapon_csgo_knife_skeleton"] = true,
    ["weapon_csgo_knife_ghost"] = true, 
    ["weapon_csgo_knife_stiletto"] = true, 
    ["weapon_csgo_knife_survival"] = true, 
    ["weapon_csgo_knife_talon"] = true, 
    ["weapon_csgo_knife_ursus"] = true,
    ["ch_mining_jackhammer"] = true,
 }

-- Should peoples inventories be cleared on leaving the server?
XeninInventory.Config.WipeInventoryOnDisconnect = false

-- A few theme options
-- Slot background
XeninInventory.Config.SlotColor = XeninUI.Theme.Primary
-- The name bar background
XeninInventory.Config.SlotNameColor = XeninUI.Theme.Primary
-- The name bar's text
XeninInventory.Config.SlotNameTextColor = Color(225, 225, 225)


-- Input in pixels. They will automatically fit on any resolution, even if the resolution are lower than these numbers
XeninInventory.Config.ContextMenuSize = {
  Width = 1000,
  Height = 534
}

-- Should some weapons take longer to holster?
-- In seconds. If not specified here it will take a second to holster
XeninInventory.Config.HolsterTime = {
  ["weapon_ak472"] = 3,
  ["weapon_mp52"] = 2,
  ["fas2_ak74"] = 4
}

-- Should C menu be be disabled?
XeninInventory.Config.ContextMenuDisabled = true

-- How many items on each row in the C menu?
XeninInventory.Config.ContextMenuColumns = 6

-- If you want a specific entity class to be a rarity.
-- Thanks to Rexxor for the default config


-- Chat commands
-- Code to holster weapons
local funcHolster = function(ply)
  if (!IsValid(ply)) then return end
  if (!ply:IsPlayer()) then return end
  if (!ply:Alive()) then return end
  local lastHolsterTime = ply.LastHolsterTime or 0
  local currentTime = CurTime()
  if (currentTime - lastHolsterTime < 1) then
    return XeninUI:Notify(ply, "Lütfen bu komutu spam yapmayın.", 1, 4, XeninUI.Theme.Red)
  end
  ply.LastHolsterTime = currentTime

  local commandStr = ply.LastCommand or ""
  if (string.find(commandStr, "/drop") or string.find(commandStr, "bind")) then
    return XeninUI:Notify(ply, "Bu komut zincirleme kullanılamaz.", 1, 4, XeninUI.Theme.Red)
  end
  if (!XeninInventory:CanUseInventory(ply)) then 
    return ply:XeninInventory():Message(XeninInventory:GetPhrase("ChatCommand.AccessRestricted"))
  end
  local activeWep = ply:GetActiveWeapon()
  if (!IsValid(activeWep)) then return end
  local inv = ply:XeninInventory()
  local amt = table.Count(inv:GetInventory())
  local slots = inv:GetSlots()
  if (amt >= slots) then
    return XeninUI:Notify(ply, XeninInventory:GetPhrase("ChatCommand.Holster.Unable"), 1, 4, XeninUI.Theme.Red)
  end
  if (activeWep.ignoreInv) then return end
  if (XeninInventory.Config.Blacklist[activeWep:GetClass()]) then 
    return XeninUI:Notify(ply, XeninInventory:GetPhrase("ChatCommand.Blacklisted"), 1, 4, XeninUI.Theme.Red)
  end

  local canDrop = hook.Call("canDropWeapon", nil, ply, activeWep)
  if canDrop == false then
      ply:ChatPrint("Bu silahı bırakamazsın")
      return ""
  end

  ply:dropDRPWeapon(activeWep, function(wep)
    ply:XeninInventory():Pickup(wep)
  end, true)
end

local openMenu = function(ply)
  ply:ConCommand("inventory")
end
local openAdmin = function(ply)
  ply:ConCommand("inventory_admin")
end

XeninInventory.Config.ChatCommands = {
  ["/holster"] = false,
  ["/holsterwep"] = false,
  ["/cebeal"] = false,  
  ["/gunholster"] = false,
  ["/invholster"] = function(ply)
    if (!IsValid(ply)) then return end
    if (!ply:IsPlayer()) then return end
    if (!ply:Alive()) then return end
    local lastHolsterTime = ply.LastHolsterTime or 0
    if CurTime() < lastHolsterTime then
      return XeninUI:Notify(ply, "Lütfen bu komutu spam yapmayın.", 1, 4, XeninUI.Theme.Red)
    end
    ply.LastHolsterTime = CurTime() + 1

    if (!XeninInventory:CanUseInventory(ply)) then 
      return ply:XeninInventory():Message(XeninInventory:GetPhrase("ChatCommand.AccessRestricted"))
    end
    local activeWep = ply:GetActiveWeapon()
    if (!IsValid(activeWep)) then return end
    local inv = ply:XeninInventory()
    local amt = table.Count(inv:GetInventory())
    local slots = inv:GetSlots()
    if (amt >= slots) then
      return XeninUI:Notify(ply, XeninInventory:GetPhrase("ChatCommand.Holster.Unable"), 1, 4, XeninUI.Theme.Red)
    end
    if (activeWep.ignoreInv) then return end
    if (XeninInventory.Config.Blacklist[activeWep:GetClass()]) then 
      return XeninUI:Notify(ply, XeninInventory:GetPhrase("ChatCommand.Blacklisted"), 1, 4, XeninUI.Theme.Red)
    end
  
    local canDrop = hook.Call("canDropWeapon", nil, ply, activeWep)
    if canDrop == false then
        ply:ChatPrint("Bu silahı bırakamazsın")
        return ""
    end
  
    ply:dropDRPWeapon(activeWep, function(wep)
      ply:XeninInventory():Pickup(wep)
    end, true)
  end,
  
  ["/drop"] = function(ply)
    if (!IsValid(ply)) then return end
    if (!ply:IsPlayer()) then return end
    if (!ply:Alive()) then return end
    local activeWep = ply:GetActiveWeapon()
    if (!IsValid(activeWep)) then return end
    
    ply:dropDRPWeapon(activeWep)
  end,
  ["/inventory"] = false,
  ["!inventory"] = false,
  ["/inv"] = false,
  ["!inv"] = false,
  ["/invadmin"] = openAdmin,
  ["!invadmin"] = openAdmin,
  ["/inventoryadmin"] = openAdmin,
  ["!inventoryadmin"] = openAdmin
}


--addons/zeros_growop2_v1.6.1/lua/inventory/configuration/items/zgo2_edible.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/inventory/configuration/items/zgo2_jar.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/inventory/configuration/items/zgo2_seed.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/inventory/configuration/items/zrms_resource.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(1)
ITEM:SetModel("models/Zerochain/props_mining/zrms_resource.mdl")
ITEM:SetDescription("A metal ore.")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data
	ent:SetResourceType(data.ResourceType)
	ent:SetResourceAmount(data.ResourceAmount)
	zrmine.f.SetOwner(ent, ply)
end)


function ITEM:GetData(ent)
	return {
		ResourceType = ent:GetResourceType(),
		ResourceAmount = ent:GetResourceAmount(),
	}
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ITEM:GetDisplayName(item)
	return self:GetName(item)
end

function ITEM:GetName(item)
	local ent = isentity(item)
	local r_type = ent and item:GetResourceType() or item.data.ResourceType
	local r_amount = ent and item:GetResourceAmount() or item.data.ResourceAmount
	local name = r_amount .. zrmine.config.BuyerNPC_Mass .. " " .. r_type .. " Ore"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	return name
end

function ITEM:GetCameraModifiers(tbl)
	return {
		FOV = 40,
		X = 0,
		Y = -22,
		Z = 25,
		Angles = Angle(0, -190, 0),
		Pos = Vector(0, 0, -1)
	}
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ITEM:GetClientsideModel(tbl, mdlPanel)
	local ResourceType = tbl.data.ResourceType

	if (ResourceType == "Iron") then
		mdlPanel.Entity:SetSkin(0)
	elseif (ResourceType == "Bronze") then
		mdlPanel.Entity:SetSkin(1)
	elseif (ResourceType == "Silver") then
		mdlPanel.Entity:SetSkin(2)
	elseif (ResourceType == "Gold") then
		mdlPanel.Entity:SetSkin(3)
	elseif (ResourceType == "Coal") then
		mdlPanel.Entity:SetSkin(4)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ITEM:Register("zrms_resource")

--addons/zeros_trashman_v1.6.3/lua/inventory/configuration/items/ztm_trashbag.lua:
/*
    Addon id: 
    Version: v1.6.3 (stable)
*/

local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(1)
ITEM:SetModel("models/zerochain/props_trashman/ztm_trashbag.mdl")
ITEM:SetDescription("A bag of trash.")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data
	ent:SetTrash(data.Trash)
	zclib.Player.SetOwner(ent, ply)
end)

function ITEM:GetData(ent)
	return {
		Trash = ent:GetTrash()
	}
end

function ITEM:GetDisplayName(item)
	return self:GetName(item)
end

function ITEM:GetName(item)
	local ent = isentity(item)
	local trash = ent and item:GetTrash() or item.data.Trash
	local name = "Trashbag " .. "[ " .. trash .. ztm.config.UoW .. " ]"

	return name
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ITEM:GetCameraModifiers(tbl)
	return {
		FOV = 40,
		X = 0,
		Y = -22,
		Z = 25,
		Angles = Angle(0, -190, 0),
		Pos = Vector(0, 0, -1)
	}
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ITEM:Register("ztm_trashbag")

--addons/xenin-inventory/lua/inventory/configuration/items/zwf_weedblock.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/importer/importers.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/ui/bank.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local PANEL = {}

function PANEL:Init()
  self.Bank = self:Add("XeninInventory.Bank.Internal")

  self.XeninInventory = self:Add("XeninUI.Frame")
  self.XeninInventory.closeBtn:SetVisible(false)
  self.XeninInventory:SetTitle(XeninInventory:GetPhrase("XeninInventory.Title"))
  self.XeninInventory.Paint = function(pnl, w, h)
    draw.RoundedBox(6, 0, 0, w, h, XeninUI.Theme.Background)
  end

  self.XeninInventory.Panel = self.XeninInventory:Add("XeninInventory.Slots")
  self.XeninInventory.Panel:SetColumns(XeninInventory.Config.BankItemsPerRow)
  self.XeninInventory.Panel:Dock(FILL)
  self.XeninInventory.Panel:DockMargin(8, 8, 8, 8)
  self.XeninInventory.Panel:CreateFields(LocalPlayer():XeninInventory():GetInventory(), true)
end

function PANEL:PerformLayout(w, h)
  local size = w / 2 - 64 / 2

  self.Bank:SetSize(size, h)
  self.XeninInventory:SetSize(size, h)
  self.XeninInventory:SetPos(w - self.XeninInventory:GetWide(), 0)
end

vgui.Register("XeninInventory.Bank", PANEL)

XeninUI:CreateFont("XeninInventory.Bank.Upgrade", 18)

local PANEL = {}

function PANEL:Init()
  self:SetTitle(XeninInventory:GetPhrase("Bank.Title"))

  self.XeninInventory = self:Add("XeninInventory.Slots")
  self.XeninInventory:SetColumns(XeninInventory.Config.BankItemsPerRow)
  self.XeninInventory:Dock(FILL)
  self.XeninInventory:DockMargin(8, 8, 8, 8)

  self:Refresh()
end

function PANEL:Refresh()
  local inv = LocalPlayer():XeninInventory()
  local tbl = inv:GetBank()

  self.XeninInventory:CreateFields(tbl, true, inv:GetBankSlots(), true)
end

function PANEL:CreateFields()
  local tbl = {}

  self.XeninInventory:CreateFields(tbl, true)
end

vgui.Register("XeninInventory.Bank.Internal", PANEL, "XeninUI.Frame")

local PANEL = {}

function PANEL:Init()
  self.Panel = self:Add("XeninInventory.Bank")
  self.Panel.Bank.closeBtn.DoClick = function(pnl)
    self:Remove()
  end

  self.Blur = 0
  self:Lerp("Blur", 4, 0.15)

  XeninInventory.Bank = self
end

function PANEL:PerformLayout(w, h)
  local width = math.min(ScrW(), 1400)
  local height = math.min(ScrH(), 828)

  self.Panel:SetSize(width, height)
  self.Panel:SetPos(w / 2 - width / 2, h / 2 - height / 2)
end

function PANEL:OnRemove()
  XeninInventory.Bank = nil
end

function PANEL:Paint(w, h)
  XeninUI:DrawBlur(self, self.Blur)
end

vgui.Register("XeninInventory.Bank.Frame", PANEL, "EditablePanel")

--addons/xenin-inventory/lua/inventory/ui/context_menu.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local PANEL = {}

function PANEL:Init()
  self.Background = Color(0, 0, 0, 200)
end

function PANEL:DragHover()
  if self.lock then return end

  self.lock = true
  self:LerpColor("Background", Color(0, 0, 0, 240))
end

function PANEL:DragHoverExited()
  self.lock = nil

  self:LerpColor("Background", Color(0, 0, 0, 200))
end

vgui.Register("XeninInventory.ActionField", PANEL)

XeninUI:CreateFont("XeninInventory.ContextMenu.Action", 40)
XeninUI:CreateFont("XeninInventory.ContextMenu.Action.Small", 29)

local cache = {}
function XeninInventory:VerticalText(text, font, col, x, y)
  local sizes

  if cache[text] then
    sizes = cache[text]
  else
    sizes = {}

    local tbl = {
    utf8.codepoint(text, 1, -1) }

    for i, v in ipairs(tbl) do
      if (v <= (2 ^ 7) - 1) then
        size = 1
      elseif (v <= (2 ^ 11) - 1) then
        size = 2
      elseif (v <= (2 ^ 16) - 1) then
        size = 3
      else
        size = 4
      end

      table.insert(sizes, size)
    end

    cache[text] = sizes
  end

  surface.SetFont(font)
  surface.SetTextColor(col)
  local h = draw.GetFontHeight(font)
  local pY = -((h - 8) * #sizes) / 2
  local pos = 1

  for i = 1, #sizes do
    local size = sizes[i]
    local str = string.sub(text, pos, (pos - 1) + size)
    local w, h = surface.GetTextSize(str)
    surface.SetTextPos(x - w / 2, y + pY + (i - 1) * (h - 8))
    surface.DrawText(str)

    pos = pos + size
  end
end

local PANEL = {}

function PANEL:Init()
  XeninInventory.ContextFrame = self

  self.Left = self:Add("XeninInventory.ActionField")
  self.Left.Paint = function(pnl, w, h)
    if (!dragndrop.IsDragging()) then return end
    local drag = dragndrop.m_Dragging[1]
    if (drag and drag.isInventoryField) then
      local item = XeninInventory:GetItem(drag.dropEnt)
      if item.Actions["Drop"] then
        draw.RoundedBoxEx(6, 0, 0, w, h, pnl.Background, true, false, false, false)

        local fontHeight = draw.GetFontHeight("XeninInventory.ContextMenu.Action")
        local str = XeninInventory:GetPhrase("XeninInventory.Actions.Drop")

        XeninInventory:VerticalText(str, "XeninInventory.ContextMenu.Action", color_white, w / 2, h / 2)
      elseif item.Actions["Drop Amount"] then
        draw.RoundedBoxEx(6, 0, 0, w, h, pnl.Background, true, false, false, false)

        local fontHeight = draw.GetFontHeight("XeninInventory.ContextMenu.Action")
        local str = XeninInventory:GetPhrase("XeninInventory.Actions.Drop Amount")

        XeninInventory:VerticalText(str, "XeninInventory.ContextMenu.Action", color_white, w / 2, h / 2)
      end
    end
  end
  self.Left:Receiver("XeninInventory.Field", function(pnl, tbl, dropped)
    if (!dropped) then return end
    local droppedPnl = tbl[1]
    if (!droppedPnl) then return end
    local item = droppedPnl.dropEnt
    if (!item) then return end
    item = XeninInventory:GetItem(item)
    if (!item) then return end

    if item.Actions["Drop"] then
      droppedPnl.Popup[XeninInventory:GetPhrase("XeninInventory.Popup.Drop")](droppedPnl, droppedPnl:GetID())
    elseif item.Actions["Drop Amount"] then
      droppedPnl.Popup[XeninInventory:GetPhrase("XeninInventory.Popup.Drop Amount")](droppedPnl, droppedPnl:GetID())
    end
  end)

  self.Top = self:Add("XeninInventory.ActionField")
  self.Top.Paint = function(pnl, w, h)
    if (!dragndrop.IsDragging()) then return end
    local drag = dragndrop.m_Dragging[1]
    if (drag and drag.isInventoryField) then
      local item = XeninInventory:GetItem(drag.dropEnt)
      if (item.Actions["Equip"] or item.Actions["Use"]) then
        surface.SetDrawColor(pnl.Background)
        surface.DrawRect(0, 0, w, h)

        local str = item.Actions["Equip"] and XeninInventory:GetPhrase("XeninInventory.Actions.Equip") or XeninInventory:GetPhrase("XeninInventory.Actions.Use")
        draw.SimpleText(str, "XeninInventory.ContextMenu.Action", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
      end
    end
  end
  self.Top:Receiver("XeninInventory.Field", function(pnl, tbl, dropped)
    if (!dropped) then return end
    local droppedPnl = tbl[1]
    if (!droppedPnl) then return end
    local item = droppedPnl.dropEnt
    if (!item) then return end
    item = XeninInventory:GetItem(item)
    if (!item) then return end

    if item.Actions["Equip"] then
      droppedPnl.Popup[XeninInventory:GetPhrase("XeninInventory.Popup.Equip")](droppedPnl, droppedPnl:GetID())
    elseif item.Actions["Use"] then
      droppedPnl.Popup[XeninInventory:GetPhrase("XeninInventory.Popup.Use")](droppedPnl, droppedPnl:GetID())
    end
  end)

  self.Right = self:Add("XeninInventory.ActionField")
  self.Right.Paint = function(pnl, w, h)
    if (!dragndrop.IsDragging()) then return end
    local drag = dragndrop.m_Dragging[1]
    if (drag and drag.isInventoryField) then
      local item = XeninInventory:GetItem(drag.dropEnt)

      local amt = drag.info.data.amount or drag.info.data.Amount or 0
      if (item.Actions["Drop All"] and (drag:GetAmount() > 1 or amt > 1)) then
        draw.RoundedBoxEx(6, 0, 0, w, h, pnl.Background, false, true, false, false)

        local fontHeight = draw.GetFontHeight("XeninInventory.ContextMenu.Action")
        local str = XeninInventory:GetPhrase("XeninInventory.Actions.Drop All")
        fontHeight = 40

        XeninInventory:VerticalText(str, "XeninInventory.ContextMenu.Action", color_white, w / 2, h / 2)
      end
    end
  end
  self.Right:Receiver("XeninInventory.Field", function(pnl, tbl, dropped)
    if (!dropped) then return end
    local droppedPnl = tbl[1]
    if (!droppedPnl) then return end
    local item = droppedPnl.dropEnt
    if (!item) then return end
    item = XeninInventory:GetItem(item)
    if (!item) then return end

    if (item.Actions["Drop All"] and (droppedPnl:GetAmount() > 1 or droppedPnl.info.data.amount > 1 or droppedPnl.info.data.Amount > 1)) then
      droppedPnl.Popup[XeninInventory:GetPhrase("XeninInventory.Popup.Drop All")](droppedPnl, droppedPnl:GetID())
    end
  end)

  self.XeninInventory = self:Add("XeninUI.Frame")
  self.XeninInventory.closeBtn:SetVisible(false)
  self.XeninInventory:SetTitle(XeninInventory:GetPhrase("XeninInventory.Title"))
  self.XeninInventory.Paint = function(pnl, w, h)
    draw.RoundedBox(6, 0, 0, w, h, XeninUI.Theme.Background)
  end

  self.XeninInventory.Panel = self.XeninInventory:Add("XeninInventory.Slots")
  self.XeninInventory.Panel:SetColumns(XeninInventory.Config.ContextMenuColumns or 6)
  self.XeninInventory.Panel:Dock(FILL)
  self.XeninInventory.Panel:DockMargin(8, 8, 8, 8)
  self.XeninInventory.Panel:CreateFields(LocalPlayer():XeninInventory():GetInventory(), true)
end

function PANEL:PerformLayout(w, h)
  self.Left:SetPos(0, 0)
  self.Left:SetSize(150, h)

  self.Top:SetPos(150, 0)
  self.Top:SetSize(w - 300, 150)

  self.Right:SetPos(w - 150, 0)
  self.Right:SetSize(150, h)

  self.XeninInventory:SetPos(150, 150)
  self.XeninInventory:SetSize(w - 300, h - 150)
end

vgui.Register("XeninInventory.Context", PANEL)

hook.Add("OnContextMenuOpen", "XeninInventory", function()
  timer.Simple(0, function()
    if (!IsValid(XeninInventory.ContextFrame) and !XeninInventory.Config.ContextMenuDisabled) then
      if (!XeninInventory:CanUseInventory(LocalPlayer())) then
        LocalPlayer():XeninInventory():Message(XeninInventory:GetPhrase("ChatCommand.AccessRestricted"))

        return
      end

      local frame = g_ContextMenu:Add("XeninInventory.Context")
      local tbl = XeninInventory.Config.ContextMenuSize or {}
      tbl.Width = tbl.Width or 1000
      tbl.Height = tbl.Height or 534
      local width = math.min(ScrW() - 200, tbl.Width)
      local height = math.min(ScrH(), tbl.Height)

      frame:SetSize(width, height)
      frame:SetPos(ScrW() / 2 - width / 2, ScrH() - height - 10)
      frame:SetMouseInputEnabled(true)
    end
  end)
end)

hook.Add("OnContextMenuClose", "XeninInventory", function()
  if IsValid(XeninInventory.ContextFrame) then
    XeninInventory.ContextFrame:Remove()
  end
end)

local LastHoverThink = nil
local LastHoverChangeTime = 0
local LastX = 0
local LastY = 0

function dragndrop.HoverThink()
  local hovered = vgui.GetHoveredPanel()
  local x = gui.MouseX()
  local y = gui.MouseY()

  if (LastHoverThink != hovered and IsValid(LastHoverThink) and LastHoverThink.DragHoverExited) then
    local dragging = LastHoverThink:IsDragging()

    if (!dragging) then
      LastHoverThink:DragHoverExited()
    end
  end

  if (LastHoverThink != hovered || x != LastX || y != LastY) then
    LastHoverChangeTime = SysTime()
    LastHoverThink = hovered
  end



  if IsValid(LastHoverThink) then
    LastX = x
    LastY = y

    local dragging = LastHoverThink:IsDragging()

    if (!dragging) then
      LastHoverThink:DragHover(SysTime() - LastHoverChangeTime)
    end
  end
end

--addons/xenin-inventory/lua/inventory/ui/admin/frame.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/core/sh_consoleent.lua:
-- Inspired by xAdmin's solution to console entities :)
YAWS.ConsoleEnt = {}
YAWS.ConsoleEnt.IsConsole = true 

function YAWS.ConsoleEnt:GetUserGroup() 
    return "Console"
end 
function YAWS.ConsoleEnt:Name() 
    return "Console"
end 
function YAWS.ConsoleEnt:SteamID() 
    return "STEAM_0:0:0"
end 
function YAWS.ConsoleEnt:SteamID64() 
    return "0"
end 
--addons/yet_another_warn_system/lua/yaws/languages/sh_en.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/cl_frame.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/cl_frame.lua:
-- woah wtf im not copying and pasting elements directly over from other addons
-- of mine for once? whaa
local PANEL = {}

AccessorFunc(PANEL, "master", "MasterPanel")
AccessorFunc(PANEL, "sidebar", "Sidebar")
-- https://github.com/Facepunch/garrysmod/blob/ad636ea0569228b3656e72637a76570db488856c/garrysmod/lua/vgui/dframe.lua#L14
AccessorFunc(PANEL, "m_bBackgroundBlur", "BackgroundBlur", FORCE_BOOL)

function PANEL:Init()
    -- https://github.com/Facepunch/garrysmod/blob/ad636ea0569228b3656e72637a76570db488856c/garrysmod/lua/vgui/dframe.lua#L63
    self.m_fCreateTime = SysTime()
    if(!YAWS.UserSettings.GetValue("disable_fades")) then 
        self:SetAlpha(0)
    end

    self.bgColor = Color(0, 0, 0, 0)

    self.fadeInAnim = Derma_Anim("yaws_frame_fadein", self, function(pnl, anim, delta, data)
        pnl:SetAlpha(delta * 255)
    end)
    self.fadeOutAnim = Derma_Anim("yaws_frame_fadeout", self, function(pnl, anim, delta, data)
        pnl:SetAlpha(math.abs(1 - delta) * 255)
    end)
    self.dueForRemoval = false

    self.sideShadow = vgui.Create("yaws.shadow")
    self.bottomShadow = vgui.Create("yaws.shadow")
    -- self.bottomShadow.Paint = function(ss, w, h)
    --     draw.RoundedBox(0, 0, 0, w, h, Color(255, 0, 0))
    -- end 
    self.bottomShadow:Down()
end 

function PANEL:SetupSideBar(close)
    self.sideContainer = vgui.Create("yaws.panel", self)

    self.sidebar = vgui.Create("yaws.sidebar", self.sideContainer)
    
    self.master = vgui.Create("DPanel", self)
    self.master.Paint = function() end
    
    if(close) then
        self.close = vgui.Create("yaws.sidebar_button", self.sideContainer)
        self.close:SetName(YAWS.Language.GetTranslation("sidebar_close"))
        self.close:SetIcon(YAWS.UI.MaterialCache['close'])
        self.close:SetCallback(function() 
            self:Close()
        end)
        self.close.DoClick = function(self)
            self.callback()
        end
    end
    self:InvalidateLayout()
end 

function PANEL:FadeIn()
    self.fadeInAnim:Start(0.2)
end 
function PANEL:FadeOut()
    self.fadeOutAnim:Start(0.25)
end 
function PANEL:Think()
    if(self.fadeInAnim:Active()) then 
        self.fadeInAnim:Run()
    end 
    if(self.fadeOutAnim:Active()) then 
        self.fadeOutAnim:Run()
    else 
        if(self.dueForRemoval) then 
            self:Remove()
        end 
    end 

    self:PostThink()
end 
function PANEL:PostThink() end 
function PANEL:Close()
    if(YAWS.UserSettings.GetValue("disable_fades")) then 
        self:Remove()
        return
    end 

    self:FadeOut()
    self.dueForRemoval = true
end 

function PANEL:RemoveShadows() 
    self.bottomShadow:Remove()
    self.sideShadow:Remove()
end 
function PANEL:OnRemove()
    YAWS.UI.LoadingCache = nil
    self:RemoveShadows()
end 

function PANEL:AddSidebarTab(name, icon, selectable, callback)
    self.sidebar:AddTab(name, icon, selectable, callback)
end 
function PANEL:AddSidebarBottomTab(name, icon, selectable, callback)
    self.sidebar:AddBottomTab(name, icon, selectable, callback)
end 
function PANEL:SetSidebarSelected(id)
    -- this is crude but it should be fine
    self.sidebar:UpdateSelected(id)
    self.sidebar.tabs[id].element:DoClick()
end 
function PANEL:SetSidebarSelectedName(name)
    self.sidebar:SetSelectedName(name)
end 

function PANEL:Paint(w, h)
    local old = DisableClipping(true)

    local posX,posY = self:GetPos()
    draw.RoundedBox(0, 0 - posX, 0 - posY, ScrW(), ScrH(), self.bgColor)

    DisableClipping(false)

    -- https://github.com/Facepunch/garrysmod/blob/ad636ea0569228b3656e72637a76570db488856c/garrysmod/lua/vgui/dframe.lua#L199
    if(self.m_bBackgroundBlur) then
        Derma_DrawBackgroundBlur(self, self.m_fCreateTime)
    end
    
    local colors = YAWS.UI.ColorScheme() 
    draw.RoundedBox(0, 0, 0, w, h, colors['frame_background'])

    DisableClipping(true)

    YAWS.UI.DrawShadow(w, 0, 3, h, false)
    YAWS.UI.DrawShadow(0, h, w + 1, 3, true)
    
    DisableClipping(old)
end 

function PANEL:LayoutShadows(w, h)
    local x,y = self:GetPos()
    if(IsValid(self.sideShadow)) then 
        self.sideShadow:SetPos(x + w, y)
        self.sideShadow:SetSize(3, h)
    end 

    if(IsValid(self.bottomShadow)) then 
        self.bottomShadow:SetPos(x, y + h)
        self.bottomShadow:SetSize(w + 1, 3)
    end
end 

function PANEL:PerformLayout(w, h)
    self:LayoutShadows(w, h)
    self.sideContainer:Dock(LEFT)
    self.sideContainer:SetWide(w * 0.09) -- i think im too used to web design now

    if(self.sidebar) then
        self.sidebar:Dock(FILL)
        self.close:SetWidth(self.sideContainer:GetWide())

        self.master:Dock(FILL)
        
        if(self.close) then 
            self.close:Dock(BOTTOM)
            self.close:SetWidth(self.sideContainer:GetWide())
            self.close:SetHeight(self.sideContainer:GetWide())
        end 
    end 

    self:PostPerformLayout() -- aka once everything is loaded
end
function PANEL:PostPerformLayout() end 

vgui.Register("yaws.frame", PANEL, "EditablePanel")
--addons/yet_another_warn_system/lua/yaws/ui/elements/cl_table.lua:
-- this is some weird and messy ass code 
-- initally tried to style a dlistview but it didn't want to listen to me trying
-- my hardest to get it to paint properly so here we are
local PANEL = {}

function PANEL:Init()
    self.columns = {}
    self.values = {}
    self.panels = {}

    self.drawDividersInBody = true

    self.columnPanel = vgui.Create("DPanel", self)
    self.columnPanel.Paint = function(panel, w, h) 
        local colors = YAWS.UI.ColorScheme()

        local curPos = 0
        for k,v in ipairs(self.columns) do 
            draw.SimpleText(v.name, "yaws.8", curPos + (h / 4), h / 2, colors['text_header'], 0, 1)
            curPos = curPos + (w * v.scale)
        end 

        draw.RoundedBox(0, 0, h - 1, w, 1, colors['divider'])
    end 

    self.scroll = vgui.Create("yaws.scroll", self)
    -- self.scroll.vBar:Remove()
end 

function PANEL:AddColumn(name, scale)
    self.columns[#self.columns + 1] = {
        name = name,
        scale = scale
    }
end 

function PANEL:RemoveDividersInBody()
    self.drawDividersInBody = false
end 
function PANEL:SetCenterMessage(key)
    self.centerText = key
end 

function PANEL:AddEntry(onclick, menu, ...)
    local values = {...}
    if(#values != #self.columns) then return end 
    
    self.values[#self.values + 1] = values

    local panel
    if(onclick) then 
        panel = vgui.Create("DButton", self.scroll)
    else 
        panel = vgui.Create("DPanel", self.scroll)
    end 
    panel:Dock(TOP)
    panel:SetTall(35)
    panel.Paint = function(panel, w, h)
        local colors = YAWS.UI.ColorScheme()

        local curPos = 0
        for k,v in ipairs(values) do 
            local size = (w * self.columns[k].scale)

            draw.SimpleText(YAWS.UI.CutoffText(tostring(v), "yaws.7", size), "yaws.7", curPos + (h / 4), h / 2, colors['text_main'], 0, 1)
            curPos = curPos + size
        end 

        draw.RoundedBox(0, 0, h - 1, w, 1, colors['divider_faded'])
    end
    if(onclick) then 
        panel:SetText("")
        panel.DoClick = function()
            onclick()
        end
    end 
    if(menu) then 
        panel.DoRightClick = function()
            local options = DermaMenu()
            for k,v in ipairs(menu) do 
                local x = options:AddOption(v.name, v.func)
                if(v.icon) then 
                    x:SetIcon(v.icon)
                end
            end
            options:Open()
        end
    end 
    self.panels[#self.values] = panel
end 

function PANEL:PerformLayout(w, h)
    self.columnPanel:Dock(TOP)
    self.columnPanel:SetHeight(math.min(40, h * 0.2))
    
    self.scroll:Dock(FILL)
    
    self:LayoutShadows(w, h)
    self:PostPerformLayout(w, h)
end 

function PANEL:Paint(w, h)
    local colors = YAWS.UI.ColorScheme() 
    draw.RoundedBox(0, 0, 0, w, h, colors['panel_background'])

    local curPos = 0
    for k,v in ipairs(self.columns) do 
        local height = h - 1
        if(!self.drawDividersInBody) then 
            height = self.columnPanel:GetTall() - 1
        end 

        draw.RoundedBox(0, curPos + (w * v.scale), 0, 1, height + 1, colors['divider'])
    
        curPos = curPos + (w * v.scale)
    end 

    -- if(self.centerText != nil) then 
    --     draw.SimpleText(YAWS.Language.GetTranslation(self.centerText), "yaws.8", w / 2, h / 2, colors['text_main'], 1, 1)
    -- end
    self:CenterPaint(w, h)
end 

function PANEL:CenterPaint(w, h) end 

function PANEL:FindBestSize()
    local newSizes = {}
    for k,v in ipairs(self.columns) do 
        surface.SetFont("yaws.8")
        local columnSize = surface.GetTextSize(v.name) + (self.columnPanel:GetTall() / 4)

        for x,y in pairs(self.values) do 
            local value = y[k]
            local size = (self:GetWide() * self.columns[k].scale)
            surface.SetFont("yaws.7") 
            columnSize = math.Max(columnSize, surface.GetTextSize(YAWS.UI.CutoffText(value, "yaws.7", size)))
        end 

        newSizes[k] = columnSize
    end

    local totalWidth = 0
    for k,v in ipairs(self.columns) do 
        local newWidth = newSizes[k] / self:GetWide()
        self.columns[k].scale = newWidth
        totalWidth = totalWidth + newSizes[k]
    end

    if(totalWidth < self:GetWide()) then 
        -- Scale the columns out so they match the panel width
        local scale = (self:GetWide() / totalWidth)
        for k,v in ipairs(self.columns) do 
            self.columns[k].scale = self.columns[k].scale * scale
        end
    end
end 

function PANEL:Clear()
    for k,v in ipairs(self.panels) do 
        v:Remove()
    end 

    self.values = {}
    self.panels = {}
end 

vgui.Register("yaws.table", PANEL, "yaws.panel")
--addons/yet_another_warn_system/lua/yaws/ui/elements/cards/cl_punishment_entry.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/misc/cl_divider.lua:
-- Another 'throwaway element' i use as a divider
local PANEL = {}

AccessorFunc(PANEL, "full", "FullSize", FORCE_BOOL)

function PANEL:Init()
end 

function PANEL:Paint(w, h)
    local colors = YAWS.UI.ColorScheme() 
    draw.RoundedBox(0, self.full and 0 or 10, 0, self.full and w or (w - 20), h, colors['divider'])
end 

function PANEL:PerformLayout()
    self:SetHeight(2)
end 

vgui.Register("yaws.divider", PANEL, "DPanel")
--addons/yet_another_warn_system/lua/yaws/ui/elements/misc/cl_pagnation.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/layouts/tabs/cl_players.lua:
return gluapack()()
--addons/advancedkillfeed/lua/z_advancedkillfeed/client/cl_z_advancedkillfeed_data.lua:
return gluapack()()
--addons/advancedkillfeed/lua/z_advancedkillfeed/client/cl_z_advancedkillfeed_anim.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/sh_zfs_config_fruits.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/autorun/zgo2_load.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

local DebugPrint = false
local function NicePrint(txt)
    if DebugPrint == false then return end

    if SERVER then
        MsgC(Color(84, 150, 197), txt .. "\n")
    else
        MsgC(Color(193, 193, 98), txt .. "\n")
    end
end

local function PreLoadFile(path)
	if CLIENT then
		include(path)
	else
		AddCSLuaFile(path)
		include(path)
	end
end

local function LoadFiles(path)
	local files, _ = file.Find(path .. "/*", "LUA")

	for _, v in ipairs(files) do
		if string.sub(v, 1, 3) == "sh_" then
			if CLIENT then
				include(path .. "/" .. v)
			else
				AddCSLuaFile(path .. "/" .. v)
				include(path .. "/" .. v)
			end
			NicePrint("// Loaded " .. string.sub(v,1,38) .. string.rep(" ", 38 - v:len()) .. " //")
		end
	end

	for _, v in ipairs(files) do
		if string.sub(v, 1, 3) == "cl_" then
			if CLIENT then
				include(path .. "/" .. v)
				NicePrint("// Loaded " .. string.sub(v,1,38) .. string.rep(" ", 38 - v:len()) .. " //")
			else
				AddCSLuaFile(path .. "/" .. v)
			end
		elseif string.sub(v, 1, 3) == "sv_" then
			include(path .. "/" .. v)
			NicePrint("// Loaded " .. string.sub(v,1,38) .. string.rep(" ", 38 - v:len()) .. " //")
		end
	end
end

local function Initialize()
	NicePrint(" ")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("//////////////// Zero´s GrowOP 2 //////////////////")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("//                                               //")

	LoadFiles("zgo2/util")

	PreLoadFile("sh_zgo2_config_main.lua")

	LoadFiles("zgo2/languages")

	PreLoadFile("zgo2/plant/sh_plant.lua")
	PreLoadFile("zgo2/plant/sh_plant_material.lua")
	PreLoadFile("sh_zgo2_config_plant.lua")

	PreLoadFile("sh_zgo2_config_lamp.lua")
	PreLoadFile("sh_zgo2_config_pot.lua")
	PreLoadFile("sh_zgo2_config_rack.lua")
	PreLoadFile("sh_zgo2_config_tent.lua")
	PreLoadFile("sh_zgo2_config_watertank.lua")
	PreLoadFile("sh_zgo2_config_generator.lua")
	PreLoadFile("sh_zgo2_config_bong.lua")
	PreLoadFile("sh_zgo2_config_mule.lua")
	PreLoadFile("sh_zgo2_config_edibles.lua")

	LoadFiles("zgo2/util/player")

	LoadFiles("zgo2/generic")

	LoadFiles("zgo2/plant")

	LoadFiles("zgo2/seed")
	LoadFiles("zgo2/pot")
	LoadFiles("zgo2/soil")
	LoadFiles("zgo2/lamp")
	LoadFiles("zgo2/watertank")
	LoadFiles("zgo2/generator")
	LoadFiles("zgo2/tent")
	LoadFiles("zgo2/dryline")
	LoadFiles("zgo2/clipper")
	LoadFiles("zgo2/weedbranch")
	LoadFiles("zgo2/jar")
	LoadFiles("zgo2/rack")
	LoadFiles("zgo2/crate")
	LoadFiles("zgo2/pump")

	LoadFiles("zgo2/packer")
	LoadFiles("zgo2/weedblock")
	LoadFiles("zgo2/palette")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

	LoadFiles("zgo2/higheffect")
	LoadFiles("zgo2/bong")

	LoadFiles("zgo2/shop")
	LoadFiles("zgo2/multitool")

	LoadFiles("zgo2/npc")
	LoadFiles("zgo2/marketplace")

	LoadFiles("zgo2/marketplace/cargo")
	// This gets called a second time but delayed to make sure any supported script are loaded
	timer.Simple(5,function() LoadFiles("zgo2/marketplace/cargo") end)

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

	LoadFiles("zgo2/logbook")
	LoadFiles("zgo2/jarcrate")

	LoadFiles("zgo2/doobytable")
	LoadFiles("zgo2/joint")

	LoadFiles("zgo2/splicer")

	PreLoadFile("sh_zgo2_hooks.lua")

	LoadFiles("zgo2/sniffer")
	LoadFiles("zgo2/baggy")
	LoadFiles("zgo2/backpack")
	LoadFiles("zgo2/backpack/items")
	LoadFiles("zgo2/cooking")

	LoadFiles("zgo2/seedlibary")


	NicePrint("//                                               //")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("///////////////////////////////////////////////////")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

	if DebugPrint == false then
		if SERVER then
			MsgC(Color(84, 150, 197), "Zeros GrowOP 2 - Loaded\n")
		else
			MsgC(Color(193, 193, 98), "Zeros GrowOP 2 - Loaded\n")
		end
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a

PreLoadFile("zgo2/util/cl_settings.lua")

// Load the script delayed
timer.Simple(0,function()

	// If zeros libary is not installed on the server then lets tell them
	if zclib == nil then
		local function Warning(ply, msg)
			if DarkRP and DarkRP.notify then
				DarkRP.notify(ply, 1, 8, msg)
			else
				ply:ChatPrint(msg)
			end
		end

		MsgC(Color(255, 0, 0), "[Zero´s GrowOP 2] > Zeros Lua Libary not found!")
		MsgC(Color(255, 0, 0), "https://steamcommunity.com/sharedfiles/filedetails/?id=2532060111")

		if CLIENT then
			surface.PlaySound( "common/warning.wav" )
		end

		if SERVER then
			for k,v in ipairs(player.GetAll()) do
				if IsValid(v) then
					Warning(v, "[Zero´s GrowOP 2] > Zeros Lua Libary not found!")
					Warning(v, "https://steamcommunity.com/sharedfiles/filedetails/?id=2532060111")
				end
			end
		end
		return
	end

	Initialize()
end)


if SERVER then return end
/*
	Keep track on fonts which are created
*/
zgo2 = zgo2 or {}
zgo2.TrackedFonts = {}
local oldFontFunc = surface.CreateFont
function surface.CreateFont(name,data)
	zgo2.TrackedFonts[name] = true
	oldFontFunc(name,data)
end

--addons/zeros_methlab02_v1.4.1/lua/autorun/zmlab2_load.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

local DebugPrint = false

local function NicePrint(txt)
    if DebugPrint == false then return end

    if SERVER then
        MsgC(Color(84, 150, 197), txt .. "\n")
    else
        MsgC(Color(193, 193, 98), txt .. "\n")
    end
end


local function PreLoadFile(path)
	if CLIENT then
		include(path)
	else
		AddCSLuaFile(path)
		include(path)
	end
end

local function LoadFiles(path)
	local files, _ = file.Find(path .. "/*", "LUA")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

	for _, v in pairs(files) do
		if string.sub(v, 1, 3) == "sh_" then
			if CLIENT then
				include(path .. "/" .. v)
			else
				AddCSLuaFile(path .. "/" .. v)
				include(path .. "/" .. v)
			end
			NicePrint("// Loaded " .. v .. string.rep(" ", 38 - v:len()) .. " //")
		end
	end

	for _, v in pairs(files) do
		if string.sub(v, 1, 3) == "cl_" then
			if CLIENT then
				include(path .. "/" .. v)
				NicePrint("// Loaded " .. v .. string.rep(" ", 38 - v:len()) .. " //")
			else
				AddCSLuaFile(path .. "/" .. v)
			end
		elseif string.sub(v, 1, 3) == "sv_" then
			include(path .. "/" .. v)
			NicePrint("// Loaded " .. v .. string.rep(" ", 38 - v:len()) .. " //")
		end
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

local function Initialize()
	NicePrint(" ")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("////////////// Zeros Methlab 2 ////////////////////")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("//                                               //")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

	PreLoadFile("zmlab2/sh_main_config.lua")

	LoadFiles("zmlab2_languages")

	// TODO Find a better solution for translations which are used in the libary and also used by multiple scripts
	zclib.Language["Minutes"] = zmlab2.language["Minutes"]
	zclib.Language["Seconds"] = zmlab2.language["Seconds"]
	zclib.Language["Cancel"] = zmlab2.language["Cancel"]

	zclib.config.Currency = zmlab2.config.Currency
	zclib.config.CurrencyInvert = zmlab2.config.CurrencyInvert
	zclib.config.AdminRanks = table.Copy(zmlab2.config.AdminRanks)


	PreLoadFile("zmlab2/sh_meth_config.lua")
	PreLoadFile("zmlab2/sh_tent_config.lua")
	PreLoadFile("zmlab2/sh_equipment_config.lua")
	PreLoadFile("zmlab2/sh_storage_config.lua")
	PreLoadFile("zmlab2/sh_custom_hooks.lua")

	LoadFiles("zmlab2/util")
	LoadFiles("zmlab2/util/player")
	LoadFiles("zmlab2/tent")
	LoadFiles("zmlab2/ventilation")
	LoadFiles("zmlab2/minigame")
	LoadFiles("zmlab2/minigame/games")
	LoadFiles("zmlab2/equipment")
	LoadFiles("zmlab2/furnace")
	LoadFiles("zmlab2/storage")
	LoadFiles("zmlab2/pumpsystem")
	LoadFiles("zmlab2/mixer")
	LoadFiles("zmlab2/filter")
	LoadFiles("zmlab2/filler")
	LoadFiles("zmlab2/frezzer")
	LoadFiles("zmlab2/packing")
	LoadFiles("zmlab2/pollutionsystem")
	LoadFiles("zmlab2/extinguisher")
	LoadFiles("zmlab2/generic")
	LoadFiles("zmlab2/meth")
	LoadFiles("zmlab2/crate")
	LoadFiles("zmlab2/palette")
	LoadFiles("zmlab2/dropoff")
	LoadFiles("zmlab2/npc")
	LoadFiles("zmlab2/save")

	NicePrint("//                                               //")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("///////////////////////////////////////////////////")

	if DebugPrint == false then
		if SERVER then
			MsgC(Color(84, 150, 197), "Zeros Methlab 2 - Loaded\n")
		else
			MsgC(Color(193, 193, 98), "Zeros Methlab 2 - Loaded\n")
		end
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

PreLoadFile("zmlab2/util/sh_materials.lua")
PreLoadFile("zmlab2/util/cl_fonts.lua")
PreLoadFile("zmlab2/util/cl_settings.lua")

timer.Simple(0,function()

	// If zeros libary is not installed on the server then lets tell them
	if zclib == nil then
		local function Warning(ply, msg)
			if DarkRP and DarkRP.notify then
				DarkRP.notify(ply, 1, 8, msg)
			else
				ply:ChatPrint(msg)
			end
		end

		MsgC(Color(255, 0, 0), "[Zero´s Methlab 2] > Zeros Lua Libary not found!")
		MsgC(Color(255, 0, 0), "https://steamcommunity.com/sharedfiles/filedetails/?id=2532060111")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

		if CLIENT then
			surface.PlaySound( "common/warning.wav" )
		end

		if SERVER then
			for k,v in ipairs(player.GetAll()) do
				if IsValid(v) then
					Warning(v, "[Zero´s Methlab 2] > Zeros Lua Libary not found!")
					Warning(v, "https://steamcommunity.com/sharedfiles/filedetails/?id=2532060111")
				end
			end
		end
		return
	end

	Initialize()
end)

--addons/zeros_methlab02_v1.4.1/lua/zmlab2/util/sh_materials.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

zmlab2 = zmlab2 or {}
zmlab2.materials = zmlab2.materials or {}

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

zclib.Materials.Add("icon_bee", Material("materials/zerochain/zmlab2/ui/icon_bee.png", "smooth"))
zclib.Materials.Add("icon_acid", Material("materials/zerochain/zmlab2/ui/icon_acid.png", "smooth"))
zclib.Materials.Add("icon_alu", Material("materials/zerochain/zmlab2/ui/icon_alu.png", "smooth"))
zclib.Materials.Add("icon_lox", Material("materials/zerochain/zmlab2/ui/icon_lox.png", "smooth"))
zclib.Materials.Add("icon_cold", Material("materials/zerochain/zmlab2/ui/icon_cold.png", "smooth"))
zclib.Materials.Add("icon_hot", Material("materials/zerochain/zmlab2/ui/icon_hot.png", "smooth"))
zclib.Materials.Add("icon_error", Material("materials/zerochain/zmlab2/ui/icon_error.png", "smooth"))
zclib.Materials.Add("tank_overlay", Material("materials/zerochain/zmlab2/ui/tank_overlay.png", "smooth"))
zclib.Materials.Add("air_pressure_pointer", Material("materials/zerochain/zmlab2/ui/air_pressure_pointer.png", "smooth"))
zclib.Materials.Add("liquid_glow_top", Material("materials/zerochain/zmlab2/ui/liquid_glow_top.png", "smooth"))
zclib.Materials.Add("icon_sponge", Material("materials/zerochain/zmlab2/ui/icon_sponge.png", "smooth"))
zclib.Materials.Add("icon_pipe", Material("materials/zerochain/zmlab2/ui/icon_pipe.png", "smooth"))
zclib.Materials.Add("icon_pipe_smoke", Material("materials/zerochain/zmlab2/ui/icon_pipe_smoke.png", "smooth"))
zclib.Materials.Add("long_pipe", Material("materials/zerochain/zmlab2/ui/long_pipe.png", "smooth"))
zclib.Materials.Add("pipe_connect", Material("materials/zerochain/zmlab2/ui/pipe_connect.png", "smooth"))
zclib.Materials.Add("icon_fire_extinguisher", Material("materials/zerochain/zmlab2/ui/icon_fire_extinguisher.png", "smooth"))
zclib.Materials.Add("icon_fold", Material("materials/zerochain/zmlab2/ui/icon_fold.png", "smooth"))
zclib.Materials.Add("icon_light", Material("materials/zerochain/zmlab2/ui/icon_light.png", "smooth"))
zclib.Materials.Add("icon_tray", Material("materials/zerochain/zmlab2/ui/icon_tray.png", "smooth"))
zclib.Materials.Add("temp_bg", Material("materials/zerochain/zmlab2/ui/temp_bg.png", "smooth"))
zclib.Materials.Add("icon_liquid", Material("materials/zerochain/zmlab2/ui/icon_liquid.png", "smooth"))
zclib.Materials.Add("errorgame_overlay", Material("materials/zerochain/zmlab2/ui/errorgame_overlay.png", "smooth"))
zclib.Materials.Add("icon_pipe_off", Material("materials/zerochain/zmlab2/ui/icon_pipe_off.png", "smooth"))
zclib.Materials.Add("icon_pipe_on", Material("materials/zerochain/zmlab2/ui/icon_pipe_on.png", "smooth"))
zclib.Materials.Add("icon_meth", Material("materials/zerochain/zmlab2/ui/icon_meth.png", "smooth"))
zclib.Materials.Add("pipe_smoke01", Material("materials/zerochain/zmlab2/ui/pipe_smoke01.png", "smooth"))
zclib.Materials.Add("pipe_smoke02", Material("materials/zerochain/zmlab2/ui/pipe_smoke02.png", "smooth"))
zclib.Materials.Add("pipe_smoke03", Material("materials/zerochain/zmlab2/ui/pipe_smoke03.png", "smooth"))
zclib.Materials.Add("icon_locked_outline", Material("materials/zerochain/zmlab2/ui/icon_locked_outline.png", "smooth"))
zclib.Materials.Add("icon_breaking", Material("materials/zerochain/zmlab2/ui/breaking.png", "smooth"))
zclib.Materials.Add("icon_triangle", Material("materials/zerochain/zmlab2/ui/icon_triangle.png", "smooth"))
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

zmlab2.colors = zmlab2.colors or {}
zmlab2.colors["black04"] = Color(0, 0, 0, 240)
zmlab2.colors["white02"] = Color(255, 255, 255, 100)
zmlab2.colors["white03"] = Color(255, 255, 255, 15)
zmlab2.colors["green01"] = Color(0, 255, 0, 100)

zmlab2.colors["green03"] = Color(71, 209, 53, 255)
zmlab2.colors["blue01"] = Color(0, 125, 255, 100)
zmlab2.colors["blue02"] = Color(0, 125, 255, 255)
zmlab2.colors["grey01"] = Color(75, 75, 75, 255)
zmlab2.colors["grey02"] = Color(175, 175, 175, 255)
zmlab2.colors["acid"] = Color(150, 190, 71, 255)
zmlab2.colors["orange01"] = Color(255, 125, 0, 255)
zmlab2.colors["red01"] = Color(209, 53, 53, 100)
zmlab2.colors["red02"] = Color(209, 53, 53, 255)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

zmlab2.colors["mixer_liquid01"] = Color(255, 230, 111, 255)
zmlab2.colors["mixer_liquid02"] = Color(186, 255, 111, 255)
zmlab2.colors["mixer_liquid05"] = Color(187, 230, 210, 255)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

--addons/zeros_retrominer_v2.3.6/lua/zrms/sh/zrmine_materials.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
zrmine = zrmine or {}

zrmine.default_materials = zrmine.default_materials or {}

zrmine.default_materials["Circle"] = Material("materials/zerochain/zrms/ui/zrms_circle.png", "smooth")
zrmine.default_materials["MetalBar"] = Material("materials/zerochain/zrms/ui/zrms_bar.png", "smooth")
zrmine.default_materials["Ore"] = Material("materials/zerochain/zrms/ui/zrms_ore.png", "smooth")
zrmine.default_materials["Scale"] = Material("materials/zerochain/zrms/ui/zrms_melter_scale.png", "smooth")
zrmine.default_materials["Minecart"] = Material("materials/zerochain/zrms/ui/zrms_minecart_icon.png", "smooth")
zrmine.default_materials["MinecartFull"] = Material("materials/zerochain/zrms/ui/zrms_minecart_full_icon.png", "smooth")
zrmine.default_materials["MineIcon"] = Material("materials/zerochain/zrms/ui/zrms_mine_icon.png", "smooth")
zrmine.default_materials["MineBgIcon"] = Material("materials/zerochain/zrms/ui/zrms_mine_bg.png", "smooth")
zrmine.default_materials["MineSignIcon"] = Material("materials/zerochain/zrms/ui/zrms_minesign_icon.png", "smooth")
zrmine.default_materials["light_ignorez"] = Material("sprites/light_ignorez")
zrmine.default_materials["ShineIcon"] = Material("materials/zerochain/zrms/ui/zrms_box_shine.png", "smooth")
zrmine.default_materials["XPBar"] = Material("materials/zerochain/zrms/ui/zrms_xpbar.png", "smooth")

zrmine.default_materials["BuildIndicator"] = Material("materials/zerochain/zrms/ui/zrms_build_identicator.png", "smooth")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 





zrmine.default_colors = zrmine.default_colors or {}
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

zrmine.default_colors["Coal"] = Color(85, 85, 85)
zrmine.default_colors["Iron"] = Color(104, 85, 87)
zrmine.default_colors["Bronze"] = Color(158, 72, 39)
zrmine.default_colors["Silver"] = Color(125, 125, 125)
zrmine.default_colors["Gold"] = Color(189, 143, 49)
zrmine.default_colors["Empty"] = Color(255, 255, 255)
zrmine.default_colors["Random"] = Color(162, 147, 123)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 


zrmine.default_colors["white01"] = Color(255, 255, 255, 15)
zrmine.default_colors["white02"] = Color(255, 255, 255, 255)
zrmine.default_colors["white03"] = Color(255, 255, 255, 25)
zrmine.default_colors["white04"] = Color(255, 255, 255, 50)
zrmine.default_colors["white05"] = Color(255, 255, 255, 1)

zrmine.default_colors["black01"] =  Color(0, 0, 0, 200)
zrmine.default_colors["black02"] =  Color(0, 0, 0, 25)
zrmine.default_colors["black03"] =  Color(0, 0, 0, 150)
zrmine.default_colors["black04"] =  Color(0, 0, 0, 175)
zrmine.default_colors["black05"] =  Color(0, 0, 0, 75)

zrmine.default_colors["grey01"] =  Color(35, 35, 35)
zrmine.default_colors["grey02"] =  Color(5, 5, 5)
zrmine.default_colors["grey03"] =  Color(150, 150, 150)
zrmine.default_colors["grey04"] =  Color(190, 190, 190)
zrmine.default_colors["grey05"] =  Color(25, 25, 25)
zrmine.default_colors["grey06"] =  Color(100, 100, 100)
zrmine.default_colors["grey07"] =  Color(70, 70, 70)

zrmine.default_colors["brown01"] =  Color(121, 111, 92)

zrmine.default_colors["red01"] = Color(125, 0, 0, 255)
zrmine.default_colors["red02"] = Color(255, 30, 30)
zrmine.default_colors["red03"] = Color(255, 0, 0, 255)
zrmine.default_colors["red04"] = Color(255, 0, 0, 0)
zrmine.default_colors["red05"] = Color(210, 68, 68, 255)

zrmine.default_colors["green01"] = Color(30, 255, 30)
zrmine.default_colors["green02"] = Color(0, 255, 0, 255)
zrmine.default_colors["green03"] = Color(0, 255, 0, 0)
zrmine.default_colors["green04"] = Color(95, 210, 68, 255)
zrmine.default_colors["green05"] = Color(87, 229, 72)

zrmine.default_colors["money01"] = Color(50, 178, 81, 255)
zrmine.default_colors["money02"] = Color(0, 102, 0,255)

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

zrmine.default_colors["yellow01"] = Color(229, 179, 72)
zrmine.default_colors["yellow02"] = Color(255, 255, 0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

zrmine.default_colors["blue01"] = Color(45, 143, 203)

zrmine.default_colors["cyan01"] = Color(72, 205, 229)

zrmine.default_colors["orange01"] = Color(254, 180, 84)
zrmine.default_colors["orange02"] = Color(255, 125, 0)
zrmine.default_colors["orange03"] = Color(255, 125, 0,200)

--addons/zeros_retrominer_v2.3.6/lua/zrms/cl/zrmine_settings_menu.lua:
return gluapack()()
--lua/advdupe2/sh_codec_legacy.lua:
return gluapack()()
--lua/advdupe2/cl_ghost.lua:
return gluapack()()
--addons/executioner/lua/autorun/client/executioner_base_panel.lua:
return gluapack()()
--addons/executioner/lua/autorun/client/executioner_other.lua:
    --[[
        Script: Executioner
        Developer: ted.lua
        Profile: http://steamcommunity.com/id/tedlua/
    ]]

    if not CLIENT then return end

    surface.CreateFont( "rHit.Font.Large", { font = "BFHUD", size = 80, weight = 800, bold = true } )
    surface.CreateFont( "rHit.Font.Phone", { font = "Calibri", size = 30, weight = 700 } )

    --> This is the default DarkRP alternative (Small menu pops up.) <--
    function Executioner.DeployConfirmation()
        local data = net.ReadTable()
        local price, target, name = data.price, data.target, ''
        local frame = vgui.Create( 'base_panel' )
        frame:SetSize( 355, 510 )
        frame:SetDraggable( false )
        frame:SetPos( ScrW() / 2 - frame:GetWide() / 2, 0 )
        frame:MoveTo( ScrW() / 2 - frame:GetWide() / 2, ScrH() / 2 - frame:GetTall() / 2, 0.1, 0, 1 )
        frame:Deploy()

        frame.Paint = function( self, w, h )
            Graphics.DrawRect( 0, 0, self:GetWide(), self:GetTall(), Executioner.Config.Confirmation.Background )
            if Executioner.Config.EnableBlur then Graphics.BlurMenu( self, 10, 15, 245 ) end
            Graphics.DrawText( Executioner.Config.Confirmation.Main_Title, 'rHit.Font.Generic', self:GetWide() / 2, 3, Executioner.Config.Confirmation.Main_Title_Color )
        end

        local base_canvis = vgui.Create( 'DPanel', frame )
        base_canvis:SetSize( 335, frame:GetTall() - 48 )
        base_canvis:SetPos( 10, 40 )
        base_canvis.Paint = function( me, w, h )
            name, job = IsValid( target ) and target:Nick() or 'Unknown', IsValid( target ) and team.GetName( target:Team() ) or 'Unknown'
            Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Confirmation.Data_Canvis_Color )
            Graphics.DrawOutline( 0, 0, w, h, 2, Executioner.Config.Outline_Colors ) -- 42, 42, 42, 200
            Graphics.DrawText( Executioner.Config.Confirmation.Header_Title, 'rHit.Font.Other', me:GetWide() / 2, 5, Executioner.Config.Name_Colors )
            Graphics.DrawText( name, 'rHit.Font.Generic', me:GetWide() / 2 - 10, 31, Executioner.Config.Name_Colors )
            Graphics.DrawText( job, 'rHit.Font.Generic', w / 2 - 5, 294, IsValid( target ) and team.GetColor( target:Team() ) or Color( 255, 255, 255 ) )
            Executioner.RenderDisplay( me, w, h, target, 25 )
        end

        local model_panel = vgui.Create( 'DModelPanel', base_canvis )
        model_panel:SetSize( 210, 225 )
        model_panel:SetPos( 57, 65 )
        model_panel:SetModel( target:GetModel() )
        model_panel:SetAnimated( true )
        model_panel.LayoutEntity = function() return end
        model_panel:SetCamPos( Vector( 55, 0, 63 ) )
        model_panel:SetLookAt( Vector( 45, 0, 58 ) )
        Graphics.PlaySequence( model_panel, table.Random( Executioner.emoteTable ) )

        model_panel.Paint = function( me, w, h )
            Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Placement.Row_Hovers.mainColor )
            Graphics.DrawOutline( 0, 0, w, h, 2, Executioner.Config.Outline_Colors )
            baseclass.Get( 'DModelPanel' ).Paint( me, w, h )
            Graphics.DrawRect( 2, h - 27, w - 4, 25, Executioner.Config.Confirmation.Money_Bar_Color )
            Graphics.DrawText( DarkRP.formatMoney( price ), 'rHit.Font.Generic', w / 2, h - 32, Executioner.Config.Confirmation.Money_Text_Color )
        end

        Graphics.CreateIconObject( base_canvis, Executioner.materials[ 'heart' ], 30, 329, 32, 32, false )
        Graphics.CreateIconObject( base_canvis, Executioner.materials[ 'armor' ], 30, 358, 32, 32, false )

        local accept_offer = vgui.Create( 'DButton', base_canvis )
        accept_offer:SetSize( 120, 31 )
        accept_offer:SetPos( 40, base_canvis:GetTall() - 55 )
        accept_offer:SetText( Executioner.Config.Confirmation.Accept_Hit )
        accept_offer:SetFont( 'rHit.Font.Small' )
        accept_offer:SetTextColor( Executioner.Config.Component_Colors[ 'button_accept' ].text )
        accept_offer.Paint = function( me, w, h )
            if me:IsHovered() then
                Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Component_Colors[ 'button_accept' ].hover )
            else
                Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Component_Colors[ 'button_accept' ].normal )
            end
        end

        local deny_offer = vgui.Create( 'DButton', base_canvis )
        deny_offer:SetSize( 120, 31 )
        deny_offer:SetPos( 50 + accept_offer:GetWide(), base_canvis:GetTall() - 55 )
        deny_offer:SetText( Executioner.Config.Confirmation.Deny_Hit )
        deny_offer:SetFont( 'rHit.Font.Small' )
        deny_offer:SetTextColor( Executioner.Config.Component_Colors[ 'button_deny' ].text )
        deny_offer.Paint = function( me, w, h )
            if me:IsHovered() then
                Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Component_Colors[ 'button_deny' ].hover )
            else
                Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Component_Colors[ 'button_deny' ].normal )
            end
        end

        accept_offer.DoClick = function( me, w, h ) net.Start( 'rHit.Config.OrderHit' ) net.SendToServer() frame:Close() end
        deny_offer.DoClick = function( me, w, h ) net.Start( 'rHit.Confirm.Rejection' ) net.SendToServer() frame:Close() end

        timer.Simple( Executioner.Config.ResponseTime, function() if IsValid( frame ) then frame:Close()  end end )
    end
    net.Receive( 'rHit.Open.Confirmation', Executioner.DeployConfirmation )

    function Executioner.UnPackMessage( message )
        message = message or ''
        chat.AddText( Color( 230, 32, 25 ), Executioner.Config.ChatPrefix, Executioner.Config.PrefixColor, net.ReadString() or message )
    end
    net.Receive( 'rHit.Send.Message', Executioner.UnPackMessage )

    function Executioner.DeployBonus()
        local frame = vgui.Create( 'base_panel' )
        frame:SetSize( 425, 170 )
        frame:SetDraggable( false )
        frame:SetPos( -frame:GetWide(), 125 )
        frame:MoveTo( 10, 125, 0.1, 0, 1 )
        frame:Deploy( false, true )

        frame.Paint = function( self, w, h )
            Graphics.DrawRect( 0, 0, w, h, Color( 60, 60, 60, 220 ) )
            Graphics.DrawRect( 0, 0, self:GetWide(), self:GetTall(), Executioner.Config.Bonus.Background )
            Graphics.DrawOutline( 0, 0, w, h, 2, Executioner.Config.Outline_Colors )
            Graphics.DrawText( Executioner.Config.Bonus.Main_Title, 'rHit.Font.Generic', self:GetWide() / 2, 1, Color( math.abs( math.sin( CurTime() * 2 ) * 255 ), 0, 0 ) )
            Graphics.DrawText( Executioner.Config.Bonus.Header, 'rHit.Font.Generic', self:GetWide() / 2, 32, Executioner.Config.Bonus.Header_Color )
            Graphics.DrawText( Executioner.Config.Bonus.Description, 'rHit.Font.Medium', 11, 66, Executioner.Config.Bonus.Description_Color, TEXT_ALIGN_LEFT )
            Graphics.DrawText( Executioner.Config.Bonus.Detail, 'rHit.Font.Medium', w / 2, 93, Executioner.Config.Bonus.Detail_Color  )
        end

        local accept_offer = vgui.Create( 'DButton', frame )
        accept_offer:SetSize( 120, 31 )
        accept_offer:SetPos( 80, frame:GetTall() - 42 )
        accept_offer:SetText( Executioner.Config.Bonus.Accept_Offer )
        accept_offer:SetFont( 'rHit.Font.Small' )
        accept_offer:SetTextColor( Executioner.Config.Component_Colors[ 'button_accept' ].text )
        accept_offer.Paint = function( me, w, h )
            if me:IsHovered() then
                Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Component_Colors[ 'button_accept' ].hover )
            else
                Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Component_Colors[ 'button_accept' ].normal )
            end
        end
        accept_offer.DoClick = function()
            net.Start( 'rHit.Bonus.Accept' ) net.SendToServer()
            frame:MoveTo( 0 - frame:GetWide(), 125, 0.2, 0, 1 )
            timer.Simple( 1, function() if IsValid( frame ) then frame:Remove() end end )
        end

        local deny_offer = vgui.Create( 'DButton', frame )
        deny_offer:SetSize( 120, 31 )
        deny_offer:SetPos( 90 + accept_offer:GetWide(), frame:GetTall() - 42 )
        deny_offer:SetText( Executioner.Config.Bonus.Deny_Offer )
        deny_offer:SetFont( 'rHit.Font.Small' )
        deny_offer:SetTextColor( Executioner.Config.Component_Colors[ 'button_deny' ].text )
        deny_offer.Paint = function( me, w, h )
            if me:IsHovered() then
                Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Component_Colors[ 'button_deny' ].hover )
            else
                Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Component_Colors[ 'button_deny' ].normal )
            end
        end
        deny_offer.DoClick = function( self, w, h ) frame:Close() end
        timer.Simple( Executioner.Config.BonusTime, function()
            if IsValid( frame ) then
                Executioner.UnPackMessage( Executioner.Language.BonusNoReply )
                frame:MoveTo( 0 - frame:GetWide(), 125, 0.2, 0, 1 )
                timer.Simple( 1, function() if IsValid( frame ) then frame:Remove() end end )
            end
        end )
    end
    net.Receive( 'rHit.Open.Bonus', Executioner.DeployBonus )

    function Executioner.OpenPhone()
        local data = net.ReadTable()
        local frame = vgui.Create( 'base_panel' )
        frame:SetSize( 650, 550 )
        frame:SetDraggable( false )
        frame:SetPos( ScrW() / 2 - frame:GetWide() / 2, 0 )
        frame:MoveTo( ScrW() / 2 - frame:GetWide() / 2, ScrH() / 2 - frame:GetTall() / 2, 0.1, 0, 1 )
        frame:Deploy( true )

        frame.Paint = function( self, w, h )
            Graphics.DrawRect( 0, 0, self:GetWide(), self:GetTall(), Executioner.Config.Phone.Background )
            if Executioner.Config.EnableBlur then Graphics.BlurMenu( self, 10, 15, 240 ) end
            Graphics.DrawText( Executioner.Config.Phone.Main_Title, 'rHit.Font.Generic', self:GetWide() / 2, 3, Color( 255, 255, 255 ) )
        end

        local background = vgui.Create( 'DPanel', frame )
        background:SetSize( frame:GetWide() - 20, frame:GetTall() - 48 )
        background:SetPos( 10, 40 )
        background.Paint = function( me, w, h )
            Graphics.DrawOutline( 0, 0, w, h, 2, Executioner.Config.Outline_Colors ) -- 42, 42, 42, 200
        end

        local base_canvis = vgui.Create( 'DPanelList', frame )
        base_canvis:SetSize( frame:GetWide() - 24, frame:GetTall() - 52 )
        base_canvis:SetPos( 12, 42 )
        base_canvis:SetSpacing( 2 )
        base_canvis:EnableVerticalScrollbar( true )
        base_canvis.Paint = function( me, w, h )
            Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Phone.Data_Canvis_Color )
            Graphics.DrawOutline( 0, 0, w, h, 2, Executioner.Config.Outline_Colors ) -- 42, 42, 42, 200
            Graphics.PaintBar( me, Color( 30, 30, 30, 220 ), Color( 28, 28, 28 ), Color( 26, 26, 26 ) )
        end

        for k, v in pairs( data ) do
            local player_index = vgui.Create( 'DPanel', base_canvis )
            player_index:SetSize( 0, 90 )
            player_index.Paint = function( me, w, h )
                Graphics.DrawRect( 0, 0, w, h, k % 2 == 0 and Executioner.Config.Placement.Row_Hovers.onSecond or Executioner.Config.Placement.Row_Hovers.mainColor )
                Graphics.DrawText( IsValid( v.target ) and Executioner.Config.Phone.Target .. v.target:Nick() or Executioner.Config.Phone.Target .. 'Disconnected', 'rHit.Font.Phone', 95, 8, Color( 255, 255, 255 ), TEXT_ALIGN_LEFT )
                Graphics.DrawText( type( v.customer ) == 'Player' and IsValid( v.customer ) and Executioner.Config.Phone.Customer .. v.customer:Nick() or type( v.customer ) == 'string' and Executioner.Config.Phone.Customer .. v.customer or Executioner.Config.Phone.Customer 'Disconnected.', 'rHit.Font.Phone', 95, 31, Color( 255, 255, 255 ), TEXT_ALIGN_LEFT )
                Graphics.DrawText( IsValid( v.target ) and Executioner.Config.Phone.Price .. DarkRP.formatMoney( v.price ) or 'N/A', 'rHit.Font.Phone', 95, 55, Color( 255, 255, 255 ), TEXT_ALIGN_LEFT )
            end

            local model_panel = vgui.Create( 'DModelPanel', player_index )
            model_panel:SetSize( 80, 80 )
            model_panel:SetPos( 4, 5 )
            model_panel:SetModel( v.target and v.target:GetModel() or '' )
            model_panel:SetAnimated( true )
            model_panel.LayoutEntity = function() return end
            model_panel:SetCamPos( Vector( 50, 0, 60 ) )

            model_panel.Paint = function( me, w, h )
                Graphics.DrawRect( 0, 0, w, h, k % 2 ~= 0 and Executioner.Config.Placement.Row_Hovers.onSecond or Executioner.Config.Placement.Row_Hovers.mainColor )
                Graphics.DrawOutline( 0, 0, w, h, 2, Executioner.Config.Outline_Colors )
                baseclass.Get( 'DModelPanel' ).Paint( me, w, h )
            end

            local accept_offer = vgui.Create( 'DButton', player_index )
            accept_offer:SetSize( 120, 40 )
            accept_offer:SetPos( base_canvis:GetWide() - accept_offer:GetWide() - 25, 27 )
            accept_offer:SetText( Executioner.Config.Confirmation.Accept_Hit )
            accept_offer:SetFont( 'rHit.Font.Small' )
            accept_offer:SetTextColor( Color( 255, 255, 255 ) )
            accept_offer.Paint = function( me, w, h )
                if me:IsHovered() then
                    Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Component_Colors[ 'button_accept' ].hover )
                else
                    Graphics.DrawRect( 0, 0, w, h, Executioner.Config.Component_Colors[ 'button_accept' ].normal )
                end
            end
            accept_offer.DoClick = function()
                net.Start( 'rHit.Confirm.PhoneAccept' )
                    net.WriteEntity( v.target )
                net.SendToServer()
                frame:Close()
            end

            base_canvis:AddItem( player_index )
        end
    end
    net.Receive( 'rHit.Open.Phonebox', Executioner.OpenPhone )

--addons/partysystem/lua/autorun/client/partybutton.lua:
local PANEL = {}

function PANEL:Init()
	self:SetTextColor(Color(255,255,255))
	self:SetFont("roboto16")
end

function PANEL:Paint()
	if (self:GetDisabled() ~= false) then
		surface.SetDrawColor(Color(26,26,26))
		surface.DrawRect(0,0,self:GetWide(),self:GetTall())
	else
		if (self:IsHovered() and input.IsMouseDown(MOUSE_LEFT)) then
			surface.SetDrawColor(Color(0,100,0))
		elseif (self:IsHovered()) then
			surface.SetDrawColor(Color(0,165,0))
		else
			surface.SetDrawColor(Color(0,150,0))
		end
		surface.DrawRect(0,0,self:GetWide(),self:GetTall())
		surface.SetDrawColor(Color(26,26,26))
		surface.DrawOutlinedRect(0,0,self:GetWide(),self:GetTall())
	end
end

derma.DefineControl("PartyButton",nil,PANEL,"DButton")
--addons/partysystem/lua/autorun/client/partycategories.lua:
local PANEL = {}

surface.CreateFont("roboto16",{
	size = 16,
	font = "Roboto",
})

function PANEL:Paint()
	surface.SetDrawColor(Color(26,26,26))
	surface.DrawRect(0,0,self:GetWide(),self:GetTall())
end

function PANEL:Init()
	self.VBar.btnUp:SetText("-")
	self.VBar.btnUp:SetFont("roboto16")
	self.VBar.btnUp:SetTextColor(Color(255,255,255))
	self.VBar.btnUp.Paint = function(self)
		surface.SetDrawColor(Color(0,0,0))
		surface.DrawRect(0,0,self:GetWide(),self:GetTall())
	end

	self.VBar.btnDown:SetText("-")
	self.VBar.btnDown:SetFont("roboto16")
	self.VBar.btnDown:SetTextColor(Color(255,255,255))
	self.VBar.btnDown.Paint = function(self)
		surface.SetDrawColor(Color(0,0,0))
		surface.DrawRect(0,0,self:GetWide(),self:GetTall())
	end

	self.VBar.btnGrip:SetCursor("hand")
	self.VBar.btnGrip.Paint = function(self)
		surface.SetDrawColor(Color(50,50,50))
		surface.DrawRect(0,0,self:GetWide(),self:GetTall())
	end

	self.VBar.Paint = function(self)
		surface.SetDrawColor(Color(0,0,0))
		surface.DrawRect(0,0,self:GetWide(),self:GetTall())
	end

	self.Container = vgui.Create("DPanel",self)
	self.Container.Paint = function() end

	self.Items = {}
end

function PANEL:NewItem(name,color,f,force_toggle)

	local this = self

	local new = vgui.Create("DPanel",self.Container)
	new:SetCursor("hand")
	new:SetSize(self.Container:GetWide(),30)
	table.insert(self.Items,new)
	new:AlignLeft(0)
	new.Paint = function() end

	new.borderLeft = vgui.Create("DPanel",new)
	new.borderLeft:SetSize(5,new:GetTall())
	new.borderLeft:AlignTop(0)
	new.borderLeft:AlignLeft(0)
	new.borderLeft.Paint = function()
		surface.SetDrawColor(color or Color(26,26,26))
		surface.DrawRect(0,0,new.borderLeft:GetWide(),new.borderLeft:GetTall())
	end

	new.text = vgui.Create("DLabel",new)
	new.text:SetTextColor(Color(255,255,255))
	new.text:SetFont("roboto16")
	new.text:SetText(name)
	new.text:SizeToContents()
	new.text:AlignLeft(10)
	new.text:CenterVertical()

	function new:OnCursorEntered()
		if (new.Toggled) then return end
		new.borderLeft:SetWide(7)
		new.text:AlignLeft(13)
	end

	function new:OnCursorExited()
		if (new.Toggled) then return end
		new.borderLeft:SetWide(5)
		new.text:AlignLeft(10)
	end

	function new:OnMousePressed()
		f(name,color,new)
		if (force_toggle) then
			for _,v in pairs(this.Items) do
				if (v.borderLeft and v.Toggled) then
					v.Toggled = false
					v.borderLeft:Stop()
					v.borderLeft:SizeTo(5,v.borderLeft:GetTall(),0.25)
					v.text:AlignLeft(10)
				end
			end
			new.Toggled = true
			new.borderLeft:Stop()
			new.borderLeft:SizeTo(new:GetWide(),new.borderLeft:GetTall(),0.25)
			new.text:AlignLeft(13)
		end
	end
	function new.borderLeft:OnMousePressed() new:OnMousePressed() end
	function new.text:OnMousePressed() new:OnMousePressed() end

	self:FixLayout()

	return new
end

function PANEL:NewCategory(name,color)

	local new = vgui.Create("DPanel",self.Container)
	new:SetSize(self.Container:GetWide(),30)
	new:AlignTop(#self.Items * 30)
	table.insert(self.Items,new)
	new:AlignLeft(0)
	new.Paint = function()
		surface.SetDrawColor(color or Color(26,26,26))
		surface.DrawRect(0,0,new:GetWide(),new:GetTall())
	end

	new.text = vgui.Create("DLabel",new)
	if (color.r >= 160 and color.g >= 160 and color.b >= 160) then
		new.text:SetTextColor(Color(0,0,0))
	else
		new.text:SetTextColor(Color(255,255,255))
	end
	new.text:SetFont("roboto16")
	new.text:SetText(name)
	new.text:SizeToContents()
	new.text:Center()

	self:FixLayout()
end

function PANEL:FixLayout()
	self.Container:SetSize(self:GetWide(),0)
	local s = 0
	for i,v in pairs(self.Items) do
		local t = self.Container:GetTall()
		self.Container:SetSize(self:GetWide(),t + v:GetTall())
		if (i == 1) then
			v:AlignTop(0)
			s = v:GetTall()
		else
			v:AlignTop(t + v:GetTall() - s)
		end
		v:SetWide(self.Container:GetWide())
		v.text:SetWide(self.Container:GetWide() - 15)
		v.text:AlignLeft(10)
	end
end

function PANEL:Clear()
	for _,v in pairs(self.Items) do
		v:Remove()
	end
	self.Items = {}
end

derma.DefineControl("PartyCategories",nil,PANEL,"DScrollPanel")
--addons/partysystem/lua/autorun/client/partylabel.lua:
local PANEL = {}

function PANEL:Init()
	self:SetTextColor(Color(0,0,0))
	self:SetFont("roboto16")
end

derma.DefineControl("PartyLabel",nil,PANEL,"DLabel")
--addons/partysystem/lua/autorun/client/partytabs_panel.lua:
--GUI base created by billy
--https://scriptfodder.com/users/view/76561198040894045/scripts

local PANEL = {}

function PANEL:SetTabs(tabs)
	tabs:InvalidateParent(true)
	local x,y = tabs:GetPos()
	self:SetPos(x,y + tabs:GetTall())
end

function PANEL:Paint()
	surface.SetDrawColor(Color(255,0,0))
	surface.DrawRect(0,0,self:GetWide(),self:GetTall())
end

derma.DefineControl("PartyTabs_Panel",nil,PANEL,"DPanel")
--lua/vgui/bvgui/blankpanel.lua:
derma.DefineControl("bVGUI.BlankPanel", nil, {})
--lua/vgui/bvgui/checkbox_crossable.lua:
local PANEL = {}

local checked_mat = Material("vgui/bvgui/checked.png", "smooth")
local crossed_mat = Material("vgui/bvgui/cross.png", "smooth")

function PANEL:Init()
	self.Checked = 0

	self.CheckedOpacity = bVGUI.Lerp(0,0,.5)
	self.CrossedOpacity = bVGUI.Lerp(0,0,.5)
end

function PANEL:OnMouseReleased()
	self.Checked = self.Checked + 1
	if (self.Checked > 2) then self.Checked = 0 end
	if (self.OnChange) then
		self:OnChange()
	end
	self:UpdateOpacities()
	if (GAS) then
		if (self.Checked == 1) then
			GAS:PlaySound("btn_on")
		elseif (self.Checked == 2) then
			GAS:PlaySound("delete")
		else
			GAS:PlaySound("btn_off")
		end
	end
end

function PANEL:SetChecked(checked)
	self.Checked = math.Clamp(checked, 0, 2)
	self:UpdateOpacities()
end

function PANEL:UpdateOpacities()
	if (self.Checked == 1) then
		self.CheckedOpacity:SetTo(255)
	elseif (self.CheckedOpacity.to ~= 0) then
		self.CheckedOpacity:SetTo(0)
	end
	if (self.Checked == 2) then
		self.CrossedOpacity:SetTo(255)
	elseif (self.CrossedOpacity.to ~= 0) then
		self.CrossedOpacity:SetTo(0)
	end
end

local checkbox_bg = Color(47,53,66)
local check_size = 12
function PANEL:Paint(w,h)
	draw.RoundedBox(4, 0, 0, w, h, checkbox_bg)

	self.CheckedOpacity:DoLerp()
	self.CrossedOpacity:DoLerp()

	surface.SetMaterial(checked_mat)
	surface.SetDrawColor(255,255,255,self.CheckedOpacity:GetValue())
	surface.DrawTexturedRect(w / 2 - check_size / 2, h / 2 - check_size / 2, check_size, check_size)

	surface.SetMaterial(crossed_mat)
	surface.SetDrawColor(255,255,255,self.CrossedOpacity:GetValue())
	surface.DrawTexturedRect(w / 2 - check_size / 2, h / 2 - check_size / 2, check_size, check_size)
end

derma.DefineControl("bVGUI.Checkbox_Crossable", nil, PANEL, "bVGUI.Checkbox")
--lua/vgui/bvgui/horizontaldivider.lua:
local PANEL = {}

function PANEL:Init()
	self:SetMouseInputEnabled(true)
	self:SetCursor("sizewe")

	self.LeftWidth = 0
	self.MiddleWidth = 0
	self.RightWidth = 0
end

function PANEL:SetLeft(pnl)
	self.LeftPnl = pnl
	pnl:SetParent(self)
end

function PANEL:SetMiddle(pnl)
	self.MiddlePnl = pnl
	pnl:SetParent(self)
end

function PANEL:SetRight(pnl)
	self.RightPnl = pnl
	pnl:SetParent(self)
end

function PANEL:SetDividerWidth(w)
	self.DividerWidth = w
end

function PANEL:BalanceWidths()
	self.BalanceWidth = true
end

function PANEL:PerformLayout(w,h)
	if (self.BalanceWidth) then
		self.BalanceWidth = nil

		if (IsValid(self.MiddlePnl)) then
			self.LeftWidth   = (w - (self.DividerWidth * 2)) / 3
			self.MiddleWidth = (w - (self.DividerWidth * 2)) / 3
			self.RightWidth  = (w - (self.DividerWidth * 2)) / 3
		else
			self.LeftWidth   = (w - self.DividerWidth) / 2
			self.MiddleWidth = 0
			self.RightWidth  = (w - self.DividerWidth) / 2
		end
	end

	if (IsValid(self.LeftPnl)) then
		self.LeftPnl:SetSize(self.LeftWidth, h)
		self.LeftPnl:AlignLeft(0)
	end
	if (IsValid(self.MiddlePnl)) then
		self.MiddlePnl:SetSize(self.MiddleWidth, h)
		self.MiddlePnl:AlignLeft(self.LeftWidth + self.DividerWidth)
	end
	if (IsValid(self.RightPnl)) then
		self.RightPnl:SetSize(self.RightWidth, h)
		self.RightPnl:AlignRight(0)
	end
end

function PANEL:Paint(w,h)
	if (not IsValid(self.LeftPnl) or not IsValid(self.RightPnl)) then return end

	surface.SetDrawColor(51,80,114)
	surface.DrawRect(self.LeftWidth,0,self.DividerWidth,h)

	surface.SetMaterial(bVGUI.MATERIAL_GRADIENT_LARGE)
	surface.DrawTexturedRect(self.LeftWidth,0,self.DividerWidth,h)

	if (IsValid(self.MiddlePnl)) then
		surface.SetDrawColor(51,80,114)
		surface.DrawRect(w - self.RightWidth - self.DividerWidth,0,self.DividerWidth,h)

		surface.SetMaterial(bVGUI.MATERIAL_GRADIENT_LARGE)
		surface.DrawTexturedRect(w - self.RightWidth - self.DividerWidth,0,self.DividerWidth,h)
	end
end

function PANEL:OnMousePressed(m)
	if (m == MOUSE_LEFT) then
		self.Dragging = true
	end
end
function PANEL:OnCursorMoved(x,y)
	local w,h = self:GetSize()
	if (self.Dragging) then
		
	end
end
function PANEL:OnMouseReleased(m)
	if (m == MOUSE_LEFT) then
		self.Dragging = nil
	end
end

derma.DefineControl("bVGUI.HorizontalDivider", nil, PANEL, "DHorizontalDivider")
--lua/vgui/bvgui/permissions_selector.lua:
local PANEL = {}

function PANEL:Init()
	self.Rows = {}
	self.Headers = {}
	self.Categories = {}
	self.Permissions = {}
end

function PANEL:NormalCheckboxes()
	self.UseNormalCheckboxes = true
end

function PANEL:Clear()
	for i,v in ipairs(table.Merge(self.Rows, self.Headers)) do
		v:Remove()
	end
	self.Rows = {}
	self.Headers = {}
	self.Categories = {}
	self.Permissions = {}
	self:InvalidateLayout(true)
end

function PANEL:AddPermission(permission)
	table.insert(self.Permissions, permission)
end

function PANEL:AddHeader(header_text, header_col)
	local header = vgui.Create("bVGUI.Header", self)
	header.HeaderIndex = table.insert(self.Headers, header)
	header:Dock(TOP)
	header:SetText(header_text)
	header:SetColor(header_col)
end

function PANEL:AddPermissionGroup(header_text, header_col, rows, header_val)
	self:AddHeader(header_text, header_col)

	self.Categories[header_val or header_text] = {}

	for _,v in ipairs(rows) do
		local row = vgui.Create("bVGUI.PermissionsSelector_Row", self)
		row.RowIndex = table.insert(self.Rows, row)
		row.CategoryIndex = table.insert(self.Categories[header_val or header_text], row)
		row.Category = header_val or header_text
		row:Dock(TOP)
		row:SetText(v.text)
		row:SetTextColor(v.text_col)
		row:SetControlsAll(v.controls_all or false)
		row.PermissionValue = v.value
		if (v.checked) then
			row:SetChecks(v.checked)
		end
	end
end

function PANEL:AddSuperGroup(text, text_col)
	local row = vgui.Create("bVGUI.PermissionsSelector_Row", self)
	row.RowIndex = table.insert(self.Rows, row)
	row:Dock(TOP)
	row:SetText(text)
	row:SetTextColor(text_col)
	row:SetSuperGroup(true)
	self.SuperGroupRow = row
end

function PANEL:AddRow(header_val, v, header_text)
	local i = 0
	local last_row
	local found = false
	for row_i, row in pairs(self.Rows) do
		i = i + 1
		if (row.Category == (header_val or header_text)) then
			last_row = row
			found = true
		elseif (found) then
			break
		end
	end
	local row = vgui.Create("bVGUI.PermissionsSelector_Row", self)
	row.RowIndex = table.insert(self.Rows, i, row)
	row.CategoryIndex = table.insert(self.Categories[header_val or header_text], row)
	row.Category = header_val or header_text
	row:Dock(TOP)
	row:MoveToAfter(last_row)
	row:SetText(v.text)
	row:SetTextColor(v.text_col)
	row:SetControlsAll(v.controls_all or false)
	row.PermissionValue = v.value
	if (v.checked) then
		row:SetChecks(v.checked)
	end
end

function PANEL:GetPermissions()
	local permissions = {}
	if (self.SuperGroupRow) then
		for checkbox_i, checkbox in ipairs(self.SuperGroupRow.Checkboxes) do
			if (self.UseNormalCheckboxes) then
				if (checkbox:GetChecked() ~= false) then
					permissions["*"] = {}
					permissions["*"][checkbox_i] = true
					return permissions
				end
			else
				if (checkbox:GetChecked() ~= 0) then
					permissions["*"] = {}
					permissions["*"][checkbox_i] = checkbox:GetChecked()
					return permissions
				end
			end
		end
	end
	for category_i, rows in pairs(self.Categories) do
		permissions[category_i] = {}
		for row_i, row in ipairs(rows) do
			if (row.ControlsAll == true) then
				for checkbox_i, checkbox in ipairs(table.Reverse(row.Checkboxes)) do
					if (checkbox:GetChecked() ~= 0) then
						permissions[category_i]["*"] = permissions[category_i]["*"] or {}
						permissions[category_i]["*"][checkbox_i] = checkbox:GetChecked()
					end
				end
				if (permissions[category_i]["*"]) then
					if (table.Count(permissions[category_i]["*"]) == #row.Checkboxes) then
						break
					end
				end
			else
				permissions[category_i][row.PermissionValue or row.Label:GetText()] = {}
				for checkbox_i, checkbox in ipairs(table.Reverse(row.Checkboxes)) do
					if (checkbox:GetChecked() ~= 0) then
						permissions[category_i][row.PermissionValue or row.Label:GetText()][checkbox_i] = checkbox:GetChecked()
					end
				end
			end
		end
		if (permissions[category_i]["*"] and table.Count(permissions[category_i]) > 1) then
			permissions[category_i]["*"] = nil
		end
	end
	return permissions
end

function PANEL:UpdateCheckboxes()
	--[[
	local super_merges = {}
	local merges = {}
	for category_i, rows in pairs(self.Categories) do
		merges[category_i] = {}
		for row_i, row in ipairs(rows) do
			if (row.ControlsAll) then continue end
			for checkbox_i, checkbox in ipairs(row.Checkboxes) do
				if (super_merges[checkbox_i] == nil) then
					super_merges[checkbox_i] = checkbox:GetChecked()
				elseif (super_merges[checkbox_i] ~= false and super_merges[checkbox_i] ~= checkbox:GetChecked()) then
					super_merges[checkbox_i] = false
				end
				if (merges[category_i][checkbox_i] == nil) then
					merges[category_i][checkbox_i] = checkbox:GetChecked()
				elseif (merges[category_i][checkbox_i] ~= false and merges[category_i][checkbox_i] ~= checkbox:GetChecked()) then
					merges[category_i][checkbox_i] = false
				end
			end
		end
	end
	for category_i, checkboxes in pairs(merges) do
		for checkbox_i, checked in ipairs(checkboxes) do
			if (not self.Categories[category_i][1].ControlsAll) then continue end
			self.Categories[category_i][1].Checkboxes[checkbox_i]:SetChecked(checked or 0)
		end
	end
	if (IsValid(self.SuperGroupRow)) then
		for checkbox_i, checked in ipairs(super_merges) do
			self.SuperGroupRow.Checkboxes[checkbox_i]:SetChecked(checked or 0)
		end
	end
	]]
end

derma.DefineControl("bVGUI.PermissionsSelector", nil, PANEL, "bVGUI.LoadingScrollPanel")

local PANEL = {}

function PANEL:Init()
	local this = self
	self.PermissionsSelector = self:GetParent():GetParent()

	self:Dock(TOP)
	self:DockPadding(5,0,5,0)

	self.Label = vgui.Create("DLabel", self)
	self.Label:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 16))
	self.Label:SetTextColor(bVGUI.COLOR_WHITE)
	self.Label:Dock(LEFT)

	self.Checkboxes = {}
	for i,v in ipairs(table.Reverse(self.PermissionsSelector.Permissions)) do
		local checkbox
		if (self.PermissionsSelector.UseNormalCheckboxes) then
			checkbox = vgui.Create("bVGUI.Checkbox", self)
		else
			checkbox = vgui.Create("bVGUI.Checkbox_Crossable", self)
		end
		checkbox.CheckboxIndex = table.insert(self.Checkboxes, checkbox)
		checkbox:Dock(RIGHT)
		checkbox:SetTooltip(v)
		checkbox:DockMargin(0,3.5,5,3.5)
		function checkbox:OnChange()
			if (this.PermissionsSelector.SuperGroupRow) then
				local super_checkbox = this.PermissionsSelector.SuperGroupRow.Checkboxes[self.CheckboxIndex]
				if (self:GetChecked() ~= super_checkbox:GetChecked()) then
					if (this.PermissionsSelector.UseNormalCheckboxes) then
						super_checkbox:SetChecked(false)
					else
						super_checkbox:SetChecked(0)
					end
				end
			end
			if (self:GetParent().IsSuperGroup == true) then
				for category_i, rows in pairs(this.PermissionsSelector.Categories) do
					for row_i, row in ipairs(rows) do
						row.Checkboxes[self.CheckboxIndex]:SetChecked(self:GetChecked())
					end
				end
			else
				for i,v in ipairs(this.PermissionsSelector.Categories[self:GetParent().Category]) do
					if (v.ControlsAll) then
						local controls_all_checkbox = v.Checkboxes[self.CheckboxIndex]
						if (self:GetChecked() ~= controls_all_checkbox:GetChecked()) then
							if (this.PermissionsSelector.UseNormalCheckboxes) then
								controls_all_checkbox:SetChecked(false)
							else
								controls_all_checkbox:SetChecked(0)
							end
						end
						break
					end
				end

				if (self:GetParent().ControlsAll == true) then
					for i,v in ipairs(this.PermissionsSelector.Categories[self:GetParent().Category]) do
						if (v.ControlsAll) then continue end
						v.Checkboxes[self.CheckboxIndex]:SetChecked(self:GetChecked())
					end
				end

				this.PermissionsSelector:UpdateCheckboxes()
			end
			if (this.PermissionsSelector.OnPermissionsChanged) then
				this.PermissionsSelector:OnPermissionsChanged()
			end
		end
	end
end

function PANEL:Paint(w,h)
	if (self.RowIndex % 2 == 0) then
		surface.SetDrawColor(31, 35, 43)
	else
		surface.SetDrawColor(33, 37, 45)
	end
	surface.DrawRect(0,0,w,h)
end

function PANEL:SetText(text)
	self.Label:SetText(text)
	self.Label:SizeToContents()
end

function PANEL:SetTextColor(text_col)
	self.Label:SetTextColor(text_col)
end

function PANEL:SetControlsAll(controls_all)
	self.ControlsAll = controls_all
end

function PANEL:SetSuperGroup(supergroup)
	self.IsSuperGroup = supergroup
end

function PANEL:SetChecks(checked)
	for i,v in ipairs(table.Reverse(self.Checkboxes)) do
		if (checked[i]) then
			v:SetChecked(checked[i])
		end
	end
end

derma.DefineControl("bVGUI.PermissionsSelector_Row", nil, PANEL, "DPanel")
--addons/gmodadminsuite-logging-2.4.8/lua/vgui/gas_logging_advanced_search_item.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/workarounds/sh_interface.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/police/sh_interface.lua:
DarkRP.PLAYER.isWanted = DarkRP.stub{
    name = "isWanted",
    description = "Whether this player is wanted",
    parameters = {
    },
    returns = {
        {
            name = "answer",
            description = "Whether this player is wanted",
            type = "boolean"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.PLAYER.getWantedReason = DarkRP.stub{
    name = "getWantedReason",
    description = "Get the reason why someone is wanted",
    parameters = {
    },
    returns = {
        {
            name = "answer",
            description = "The reason",
            type = "string"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.PLAYER.isArrested = DarkRP.stub{
    name = "isArrested",
    description = "Whether this player is arrested",
    parameters = {
    },
    returns = {
        {
            name = "answer",
            description = "Whether this player is arrested",
            type = "boolean"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.PLAYER.isCP = DarkRP.stub{
    name = "isCP",
    description = "Whether this player is part of the police force (mayor, cp, chief).",
    parameters = {
    },
    returns = {
        {
            name = "answer",
            description = "Whether this player is part of the police force.",
            type = "boolean"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.PLAYER.isMayor = DarkRP.stub{
    name = "isMayor",
    description = "Whether this player is a mayor.",
    parameters = {
    },
    returns = {
        {
            name = "answer",
            description = "Whether this player is a mayor.",
            type = "boolean"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.PLAYER.isChief = DarkRP.stub{
    name = "isChief",
    description = "Whether this player is a Chief.",
    parameters = {
    },
    returns = {
        {
            name = "answer",
            description = "Whether this player is a Chief.",
            type = "boolean"
        }
    },
    metatable = DarkRP.PLAYER
}


DarkRP.hookStub{
    name = "canRequestWarrant",
    description = "Whether someone can request a search warrant.",
    parameters = {
        {
            name = "target",
            description = "The player to get the search warrant for",
            type = "Player"
        },
        {
            name = "actor",
            description = "The player requesting the warrant",
            type = "Player"
        },
        {
            name = "reason",
            description = "The reason for the search warrant",
            type = "Player"
        }
    },
    returns = {
        {
            name = "canRequest",
            description = "A yes or no as to whether the search warrant can be requested",
            type = "boolean"
        },
        {
            name = "message",
            description = "The message that is shown when it can't",
            type = "string"
        }
    }
}

DarkRP.hookStub{
    name = "canWanted",
    description = "Whether someone can make a player wanted",
    parameters = {
        {
            name = "target",
            description = "The player to make wanted by the police",
            type = "Player"
        },
        {
            name = "actor",
            description = "The player requesting the wanted status",
            type = "Player"
        },
        {
            name = "reason",
            description = "The reason",
            type = "Player"
        }
    },
    returns = {
        {
            name = "canRequest",
            description = "A yes or no as to whether the wanted can be requested",
            type = "boolean"
        },
        {
            name = "message",
            description = "The message that is shown when it can't",
            type = "string"
        }
    }
}

DarkRP.hookStub{
    name = "canUnwant",
    description = "Whether someone can remove the wanted status from a player",
    parameters = {
        {
            name = "target",
            description = "The player to make wanted by the police",
            type = "Player"
        },
        {
            name = "actor",
            description = "The player requesting the wanted status",
            type = "Player"
        }
    },
    returns = {
        {
            name = "canUnwant",
            description = "A yes or no answer",
            type = "boolean"
        },
        {
            name = "message",
            description = "The message that is shown when the answer is no",
            type = "string"
        }
    }
}

DarkRP.hookStub{
    name = "lockdownStarted",
    description = "When a lockdown has started.",
    parameters = {
        {
            name = "actor",
            description = "The player who started the lockdown. Note: Can be the world entitity.",
            type = "Player"
        }
    },
    returns = {}
}

DarkRP.hookStub{
    name = "lockdownEnded",
    description = "When a lockdown has ended.",
    parameters = {
        {
            name = "actor",
            description = "The player who ended the lockdown. Note: Can be the world entitity.",
            type = "Player"
        }
    },
    returns = {}
}

DarkRP.hookStub{
    name = "playerGotLicense",
    description = "When a player got a gun license",
    parameters = {
        {
            name = "target",
            description = "The player who got the license",
            type = "Player"
        },
        {
            name = "actor",
            description = "The player who gave the license",
            type = "Player"
        }
    },
    returns = {}
}

--gamemodes/darkrp/gamemode/modules/chat/cl_interface.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/config/licenseweapons.lua:
return gluapack()()
--addons/darkrpmodification/lua/darkrp_config/disabled_defaults.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/hitmenu/sh_init.lua:
local plyMeta = FindMetaTable("Player")
local hitmanTeams = {}
local minHitDistanceSqr = GM.Config.minHitDistance * GM.Config.minHitDistance

function plyMeta:isHitman()
    return hitmanTeams[self:Team()]
end

function plyMeta:hasHit()
    return self:getDarkRPVar("hasHit") or false
end

function plyMeta:getHitTarget()
    return self:getDarkRPVar("hitTarget")
end

function plyMeta:getHitPrice()
    return self:getDarkRPVar("hitPrice") or GAMEMODE.Config.minHitPrice
end

function DarkRP.addHitmanTeam(job)
    if not job or not RPExtraTeams[job] then return end
    if DarkRP.DARKRP_LOADING and DarkRP.disabledDefaults["hitmen"][RPExtraTeams[job].command] then return end

    hitmanTeams[job] = true
end

DarkRP.getHitmanTeams = fp{fn.Id, hitmanTeams}

function DarkRP.hooks:canRequestHit(hitman, customer, target, price)
    if not hitman:isHitman() then return false, DarkRP.getPhrase("player_not_hitman") end
    if customer:GetPos():DistToSqr(hitman:GetPos()) > minHitDistanceSqr then return false, DarkRP.getPhrase("distance_too_big") end
    if not customer:Alive() then return false, DarkRP.getPhrase("must_be_alive_to_do_x", DarkRP.getPhrase("place_a_hit")) end
    if hitman == target then return false, DarkRP.getPhrase("hitman_no_suicide") end
    if hitman == customer then return false, DarkRP.getPhrase("hitman_no_self_order") end
    if not customer:canAfford(price) then return false, DarkRP.getPhrase("cant_afford", DarkRP.getPhrase("hit")) end
    if price < GAMEMODE.Config.minHitPrice then return false, DarkRP.getPhrase("price_too_low") end
    if hitman:hasHit() then return false, DarkRP.getPhrase("hitman_already_has_hit") end
    if IsValid(target) and ((target:getDarkRPVar("lastHitTime") or -GAMEMODE.Config.hitTargetCooldown) > CurTime() - GAMEMODE.Config.hitTargetCooldown) then return false, DarkRP.getPhrase("hit_target_recently_killed_by_hit") end
    if IsValid(customer) and ((customer.lastHitAccepted or -GAMEMODE.Config.hitCustomerCooldown) > CurTime() - GAMEMODE.Config.hitCustomerCooldown) then return false, DarkRP.getPhrase("customer_recently_bought_hit") end

    return true
end

hook.Add("onJobRemoved", "hitmenuUpdate", function(i, job)
    hitmanTeams[i] = nil
end)

--[[---------------------------------------------------------------------------
DarkRPVars
---------------------------------------------------------------------------]]
DarkRP.registerDarkRPVar("hasHit", net.WriteBit, fn.Compose{tobool, net.ReadBit})
DarkRP.registerDarkRPVar("hitTarget", net.WriteEntity, net.ReadEntity)
DarkRP.registerDarkRPVar("hitPrice", fn.Curry(fn.Flip(net.WriteInt), 2)(32), fn.Partial(net.ReadInt, 32))
DarkRP.registerDarkRPVar("lastHitTime", fn.Curry(fn.Flip(net.WriteInt), 2)(32), fn.Partial(net.ReadInt, 32))

--[[---------------------------------------------------------------------------
Chat commands
---------------------------------------------------------------------------]]
DarkRP.declareChatCommand{
    command = "hitprice",
    description = "Set the price of your hits",
    condition = plyMeta.isHitman,
    delay = 10
}

DarkRP.declareChatCommand{
    command = "requesthit",
    description = "Request a hit from the player you're looking at",
    delay = 5,
    condition = fn.Compose{fn.Not, fn.Null, fn.Curry(fn.Filter, 2)(plyMeta.isHitman), player.GetAll}
}

DarkRP.declareChatCommand{
    command = "cancelhit",
    description = "Cancel your on active hit",
    delay = 5,
    condition = plyMeta.hasHit
}

--gamemodes/darkrp/gamemode/modules/fspectate/sh_init.lua:
if not CAMI then return end

CAMI.RegisterPrivilege{
    Name = "FSpectate",
    MinAccess = "admin"
}

CAMI.RegisterPrivilege{
    Name = "FSpectateTeleport",
    MinAccess = "admin"
}

--gamemodes/darkrp/gamemode/modules/base/sh_simplerr.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/base/sh_checkitems.lua:
--[[
The base elements are shared by every custom item
]]
local baseSchema = tc.checkTable{
    buttonColor =
        tc.addHint(
            tc.optional(tc.tableOf(isnumber)),
            "The buttonColor must be a Color value."
        ),

    category =
        tc.addHint(
            tc.optional(isstring),
            "The category must be the name of an existing category!"
        ),

    customCheck =
        tc.addHint(
            tc.optional(isfunction),
            "The customCheck must be a function."
        ),

    CustomCheckFailMsg =
        tc.addHint(
            tc.optional(isstring, isfunction),
            "The CustomCheckFailMsg must be either a string or a function."
        ),

    sortOrder =
        tc.addHint(
            tc.optional(isnumber),
            "The sortOrder must be a number."
        ),

    label =
        tc.addHint(
            tc.optional(isstring),
            "The label must be a valid string."
        ),
}

--[[
Properties shared by anything buyable
]]
local buyableSchema = fn.FAnd{baseSchema, tc.checkTable{
    allowed =
        tc.addHint(
            tc.optional(tc.tableOf(isnumber), isnumber),
            "The allowed field must be either an existing team or a table of existing teams.",
            {"Is there a job here that doesn't exist (anymore)?"}
        ),

    getPrice =
        tc.addHint(
            tc.optional(isfunction),
            "The getPrice must be a function."
        ),

    model =
        tc.addHint(
            isstring,
            "The model must be valid."
        ),

    price =
        tc.addHint(
            function(v, tbl) return isnumber(v) or isfunction(tbl.getPrice) end,
            "The price must be an existing number or (for advanced users) the getPrice field must be a function."
        ),

    spawn =
        tc.addHint(
            tc.optional(isfunction),
            "The spawn must be a function."
        ),
    allowPurchaseWhileDead =
        tc.addHint(
            tc.default(false),
            "The allowPurchaseWhileDead must be either true or false"
        )
}}

-- The command of an entity must be unique
local uniqueEntity = function(cmd, tbl)
    for _, v in pairs(DarkRPEntities) do
        if v.cmd ~= cmd then continue end

        return
            false,
            "This entity does not have a unique command.",
            {
                "There must be some other entity that has the same thing for 'cmd'.",
                "Fix this by changing the 'cmd' field of your entity to something else."
            }
    end

    return true
end

-- The command of a job must be unique
local uniqueJob = function(v, tbl)
    local job = DarkRP.getJobByCommand(v)

    if not job then return true end

    return
        false,
        "This job does not have a unique command.",
        {
            "There must be some other job that has the same command.",
            "Fix this by changing the 'command' of your job to something else."
        }
end

--[[
Validate jobs
]]
DarkRP.validateJob = fn.FAnd{baseSchema, tc.checkTable{
    name =
        tc.addHint(
            isstring,
            "The name must be a valid string."
        ),

    color =
        tc.addHint(
            tc.tableOf(isnumber),
            "The color must be a Color value.",
            {"Color values look like this: Color(r, g, b, a), where r, g, b and a are numbers between 0 and 255."}
        ),

    model =
        tc.addHint(
            fn.FOr{isstring, tc.nonEmpty(tc.tableOf(isstring))},
            "The model must either be a table of correct model strings or a single correct model string.",
            {
                "This error could happens when the model does not exist on the server.",
                "Are you sure the model path is right?",
                "Is the model from an addon that is not properly installed?"
            }
        ),

    description =
        tc.addHint(
            isstring,
            "The description must be a string."
        ),

    weapons =
        tc.addHint(
            tc.optional(tc.tableOf(isstring)),
            "The weapons must be a valid table of strings.",
            {"Example: weapons = {\"med_kit\", \"weapon_bugbait\"},"}
        ),

    command =
        fn.FAnd
        {
            tc.addHint(
                isstring,
                "The command must be a string."
            ),
            uniqueJob
        },

    max =
        tc.addHint(
            fn.FAnd{isnumber, fp{fn.Lte, 0}},
            "The max must be a number greater than or equal to zero.",
            {
                "Zero means infinite.",
                "A decimal between 0 and 1 is seen as a percentage."
            }
        ),

    salary =
        tc.addHint(
            fn.FAnd{isnumber, fp{fn.Lte, 0}},
            "The salary must be a number and it must be greater than zero."
        ),

    admin =
        tc.default(0,
            tc.addHint(
                fn.FAnd{isnumber, fp{fn.Lte, 0}, fp{fn.Gte, 2}},
                "The admin value must be a number and it must be greater than or equal to zero and smaller than three."
            )
        ),

    vote =
        tc.addHint(
            tc.optional(isbool),
            "The vote must be either true or false."
        ),

    ammo =
        tc.addHint(
            tc.optional(tc.tableOf(isnumber)),
            "The ammo must be a table containing numbers.",
            {"See example on https://darkrp.miraheze.org/wiki/DarkRP:CustomJobFields"}
        ),

    hasLicense =
        tc.addHint(
            tc.optional(isbool),
            "The hasLicense must be either true or false."
        ),

    NeedToChangeFrom =
        tc.addHint(
            tc.optional(tc.tableOf(isnumber), isnumber),
            "The NeedToChangeFrom must be either an existing team or a table of existing teams",
            {"Is there a job here that doesn't exist (anymore)?"}
        ),

    modelScale =
        tc.addHint(
            tc.optional(isnumber),
            "The modelScale must be a number."
        ),

    maxpocket =
        tc.addHint(
            tc.optional(isnumber),
            "The maxPocket must be a number."
        ),

    maps =
        tc.addHint(
            tc.optional(tc.tableOf(isstring)),
            "The maps value must be a table of valid map names."
        ),

    candemote =
        tc.default(true,
            tc.addHint(
                isbool,
                "The candemote value must be either true or false."
            )
        ),

    mayor =
        tc.addHint(
            tc.optional(isbool),
            "The mayor value must be either true or false."
        ),

    chief =
        tc.addHint(
            tc.optional(isbool),
            "The chief value must be either true or false."
        ),

    medic =
        tc.addHint(
            tc.optional(isbool),
            "The medic value must be either true or false."
        ),

    cook =
        tc.addHint(
            tc.optional(isbool),
            "The cook value must be either true or false."
        ),

    hobo =
        tc.addHint(
            tc.optional(isbool),
            "The hobo value must be either true or false."
        ),

    playerClass =
        tc.addHint(
            tc.optional(isstring),
            "The playerClass must be a valid string."
        ),

    CanPlayerSuicide =
        tc.addHint(
            tc.optional(isfunction),
            "The CanPlayerSuicide must be a function."
        ),

    PlayerCanPickupWeapon =
        tc.addHint(
            tc.optional(isfunction),
            "The PlayerCanPickupWeapon must be a function."
        ),

    PlayerDeath =
        tc.addHint(
            tc.optional(isfunction),
            "The PlayerDeath must be a function."
        ),

    PlayerLoadout =
        tc.addHint(
            tc.optional(isfunction),
            "The PlayerLoadout must be a function."
        ),

    PlayerSelectSpawn =
        tc.addHint(
            tc.optional(isfunction),
            "The PlayerSelectSpawn must be a function."
        ),

    PlayerSetModel =
        tc.addHint(
            tc.optional(isfunction),
            "The PlayerSetModel must be a function."
        ),

    PlayerSpawn =
        tc.addHint(
            tc.optional(isfunction),
            "The PlayerSpawn must be a function."
        ),

    PlayerSpawnProp =
        tc.addHint(
            tc.optional(isfunction),
            "The PlayerSpawnProp must be a function."
        ),

    RequiresVote =
        tc.addHint(
            tc.optional(isfunction),
            "The RequiresVote must be a function."
        ),

    ShowSpare1 =
        tc.addHint(
            tc.optional(isfunction),
            "The ShowSpare1 must be a function."
        ),

    ShowSpare2 =
        tc.addHint(
            tc.optional(isfunction),
            "The ShowSpare2 must be a function."
        ),

    canStartVote =
        tc.addHint(
            tc.optional(isfunction),
            "The canStartVote must be a function."
        ),

    canStartVoteReason =
        tc.addHint(
            tc.optional(isstring, isfunction),
            "The canStartVoteReason must be either a string or a function."
        ),
}}

--[[
Validate shipments
]]
DarkRP.validateShipment = fn.FAnd{buyableSchema, tc.checkTable{
    name =
        tc.addHint(
            isstring,
            "The name must be a valid string."
        ),

    entity =
        tc.addHint(
            isstring, "The entity of the shipment must be a string."
        ),

    amount =
        tc.addHint(
            fn.FAnd{isnumber, fp{fn.Lte, 0}}, "The amount must be a number and it must be greater than zero."
        ),

    separate =
        tc.addHint(
            tc.optional(isbool), "the separate field must be either true or false."
        ),

    pricesep =
        tc.addHint(
            function(v, tbl) return not tbl.separate or isnumber(v) and v >= 0 end,
            "The pricesep must be a number and it must be greater than or equal to zero."
        ),

    noship =
        tc.addHint(
            tc.optional(isbool),
            "The noship must be either true or false."
        ),

    shipmodel =
        tc.addHint(
            tc.optional(isstring),
            "The shipmodel must be a valid model."
        ),

    weight =
        tc.addHint(
            tc.optional(isnumber),
            "The weight must be a number."
        ),

    spareammo =
        tc.addHint(
            tc.optional(isnumber),
            "The spareammo must be a number."
        ),

    clip1 =
        tc.addHint(
            tc.optional(isnumber),
            "The clip1 must be a number."
        ),

    clip2 =
        tc.addHint(
            tc.optional(isnumber),
            "The clip2 must be a number."
        ),

    shipmentClass =
        tc.addHint(
            tc.optional(isstring),
            "The shipmentClass must be a string."
        ),

    onBought =
        tc.addHint(
            tc.optional(isfunction),
            "The onBought must be a function."
        ),

}}

--[[
Validate vehicles
]]
DarkRP.validateVehicle = fn.FAnd{buyableSchema, tc.checkTable{
    name =
        tc.addHint(
            isstring,
            "The name of the vehicle must be a string."
        ),

    distance =
        tc.addHint(
            tc.optional(isnumber),
            "The distance must be a number."
        ),

    angle =
        tc.addHint(
            tc.optional(isangle),
            "The distance must be a valid Angle."
        ),
}}

--[[
Validate Entities
]]
DarkRP.validateEntity = fn.FAnd{buyableSchema, tc.checkTable{
    ent =
        tc.addHint(
            isstring,
            "The ent field must be a string."
        ),

    max =
        tc.addHint(
            function(v, tbl) return isnumber(v) or isfunction(tbl.getMax) end,
            "The max must be an existing number or (for advanced users) the getMax field must be a function."
        ),

    cmd =
        fn.FAnd
        {
            tc.addHint(isstring, "The cmd must be a valid string."),
            uniqueEntity
        },

    name =
        tc.addHint(
            isstring,
            "The name must be a valid string."
        ),

    allowTools =
        tc.default(false,
            tc.addHint(
                tc.optional(isbool),
                "The allowTools must be either true or false."
            )
        ),

    delay =
        tc.addHint(
            tc.optional(isnumber),
            "The delay must be a number."
        ),
}}


-- Checks whether a team already has an agenda assigned.
-- Jobs cannot have multiple agendas.

local overlappingAgendaCheck = function(t, tbl)
    local agenda = DarkRP.getAgendas()[t]

    -- Team being -1 means the job is disabled
    if agenda == nil or t == -1 then return true end

    local teamName = team.GetName(t)
    local err = "At least one job has multiple agendas assigned to them"
    local hints = {
        string.format([[The problem lies with the job called "%s"]], teamName),
        string.format([[It is assigned to agendas "%s" and "%s"]], agenda.Title or "unknown", tbl.Title or "unknown"),
        [[A job can only have ONE agenda. Otherwise things would become confusing, since only ONE agenda is always drawn on the screen.]]
    }

    if agenda.Title == tbl.Title then
        table.insert(hints, "The titles of the two agendas are the same. It looks like perhaps you've made the same agenda more than once.")
        table.insert(hints, "Removing one of them should get rid of this error.")
    end

    return false, err, hints
end

--[[
Validate Agendas
]]
local managerNumberCheck = tc.addHint(
    isnumber,
    "The Manager must either be a single team or a non-empty table of existing teams.",
    {"Is there a job here that doesn't exist (anymore)?"}
)

DarkRP.validateAgenda = tc.checkTable{
    Title =
        tc.addHint(
            isstring,
            "The title must be a string."
        ),

    -- Custom function to ensure the right error message is thrown
    Manager = function(manager, tbl)
            -- Check whether the manager is an existing team
            -- that does not already have an agenda assigned
            if isnumber(manager) then
                return fn.FAnd{overlappingAgendaCheck}(manager, tbl)

            -- Check whether the manager is a table of existing teams
            -- and that none of the teams already have agendas assigned
            elseif istable(manager) then
                return tc.nonEmpty(
                    tc.tableOf(
                        fn.FAnd{managerNumberCheck, overlappingAgendaCheck}
                    )
                )(manager, tbl)
            end

            return managerNumberCheck(manager, tbl)
        end,
    Listeners =
        tc.default({}, -- Default to empty table
            -- Checks for a table of valid teams that do not already have an
            -- agenda assigned
            fn.FAnd{
                tc.addHint(
                    tc.tableOf(isnumber),
                    "The Listeners must be a table of existing teams.",
                    {
                        "Is there a job here that doesn't exist (anymore)?",
                        "Are you trying to have multiple manager jobs in this agenda? In that case you must put the list of manager jobs in curly braces.",
                        [[Like so: DarkRP.createAgenda("Some agenda", {TEAM_MANAGER1, TEAM_MANAGER2}, {TEAM_LISTENER1, TEAM_LISTENER2})]]
                    }
                ),
                tc.tableOf(overlappingAgendaCheck)
            }
        )
}

--[[
Validate Categories
]]
DarkRP.validateCategory = tc.checkTable{
    name =
        tc.addHint(
            isstring,
            "The name must be a string."
        ),

    categorises =
        tc.addHint(
            tc.oneOf{"jobs", "entities", "shipments", "weapons", "vehicles", "ammo"},
            [[The categorises must be one of "jobs", "entities", "shipments", "weapons", "vehicles", "ammo"]],
            {
                "Mind that this is case sensitive.",
                "Also mind the quotation marks."
            }
        ),

    startExpanded =
        tc.addHint(
            isbool,
            "The startExpanded must be either true or false."
        ),

    color =
        tc.addHint(
            tc.tableOf(isnumber),
            "The color must be a Color value."
        ),

    canSee =
        tc.addHint(
            tc.optional(isfunction),
            "The canSee must be a function."
        ),

    sortOrder =
        tc.addHint(
            tc.optional(isnumber),
            "The sortOrder must be a number."
        ),
}

--addons/glorifiedleveling/lua/glorifiedleveling/libraries/cl_glorifiedleveling_themes.lua:

GlorifiedLeveling.Themes = {}

local registeredThemes = {}
local defaultTheme = "Default"
local selectedTheme

function GlorifiedLeveling.Themes.Register( id, name, data )
    if not registeredThemes[id] then
        registeredThemes[id] = {}
    end

    registeredThemes[id].DisplayName = name
    registeredThemes[id].Data = id == defaultTheme and data or table.Merge( GlorifiedLeveling.Themes.Get( defaultTheme ).Data, data )
end

function GlorifiedLeveling.Themes.Get( id )
    return registeredThemes[id] or registeredThemes[defaultTheme] or false
end

function GlorifiedLeveling.Themes.GetCurrent()
    return GlorifiedLeveling.Themes.Get( selectedTheme )
end

function GlorifiedLeveling.Themes.GetAll()
    return registeredThemes
end

function GlorifiedLeveling.Themes.GetByName( name )
    local returnedTheme = registeredThemes[defaultTheme]
    for k, v in pairs( registeredThemes ) do
        if v.DisplayName == name then returnedTheme = v break end
    end
    return returnedTheme
end

function GlorifiedLeveling.Themes.GenerateFonts()
    local fontsTable = GlorifiedLeveling.Themes.GetCurrent().Data.Fonts
    if fontsTable then
        for k, v in pairs( fontsTable ) do
            if isfunction( v.size ) then
                v.size = v.size()
            end

            surface.CreateFont( "GlorifiedLeveling." .. k, v )
        end
    end
end

function GlorifiedLeveling.Themes.Select( id )
    if registeredThemes[id] then
        GlorifiedLeveling.Themes.GenerateFonts()

        cookie.Set( "GlorifiedLeveling.Theme", tostring( id ) )
        selectedTheme = tostring( id )

        hook.Run( "GlorifiedLeveling.ThemeUpdated", GlorifiedLeveling.Themes.GetCurrent() )
    end
end

hook.Add( "OnScreenSizeChanged", "GlorifiedLeveling.Themes.OnScreenSizeChanged", function()
    GlorifiedLeveling.Themes.GenerateFonts()
end )

hook.Add( "InitPostEntity", "GlorifiedLeveling.Themes.InitPostEntity", function()
    GlorifiedLeveling.Themes.Select( cookie.GetString( "GlorifiedLeveling.Theme", defaultTheme ) )
end )

concommand.Add( "glorifiedleveling_theme", function( ply, args )
    if ply != LocalPlayer() then return end
    local theme = string.lower( args[1] )
    GlorifiedLeveling.Themes.Select( theme )
end )
--addons/glorifiedleveling/lua/glorifiedleveling/libraries/sh_glorifiedleveling_netlargestrings.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/localization/sh_glorifiedleveling_english.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/localization/sh_glorifiedleveling_german.lua:

GlorifiedLeveling.i18n.RegisterPhrases( "de", {
    glDarkTheme = "Dunkel",
    glLevelNotHighEnough = "Dein Level ist zu niedrig dafür.",
    glYouReceivedXP = "Du hast %s XP bekommen.",
    glYouReceivedXPKill = "Du hast %s XP für das töten von %s bekommen.",
    glLevelX = "Level %s",
    glLevelUp = "Aufgelevelt!",
    glAdminMenuLockdown = "SPERREN",
    glAdminMenuPlayers = "SPIELER",
    glPlayersOnline = "Spieler online: %s",
    glSetLevel = "Level setzen",
    glResetLevel = "Level zurücksetzen",
    glAddXP = "XP hinzufügen",
    glConfirmation = "Bestätigen",
    glYes = "Ja",
    glNo = "Nein",
    glConfirmationResetLevel = "Willst du das Level diese Spieler zurücksetzen?",
    glEnterLevel = "Schreibe hier drunter das neue Level des Spielers.",
    glEnterXP = "Schreibe wie viel XP du hinzufügen willst.",
    glEnter = "Hinzufügen",
    glInvalidAmount = "Ungültige Zahl ausgewählt.",
    glMaxLevel = "Maximales Level",

    -- Leaderboard localization.
    glLeaderboard = "Bestenliste",
    glName = "Name",
    glXP = "XP",
    glLevel = "Level",
    glNobodyHere = "Hier ist noch niemand :(",

    -- Perk localization.
    glSkills = "Fertigkeiten",
    glPoints = "%s Punkte",
    glComplete = "Komplett",

    glHasteBoots = "Geschwindigkeits Schuhe",
    glHasteBootsDescription = "Mehr Geschwindigkeit",

    glFeralLeaping = "Sprungkraft Schuhe",
    glFeralLeapingDescription = "Spring höher, weniger Fallschaden",

    glIronSkin = "Eisen Rüstung",
    glIronSkinDescription = "Mehr Rüstung beim Spawnen",

    glJuggernaut = "Starke Haut",
    glJuggernautDescription = "Mehr Leben beim Spawnen",

    glBulletAbsorption = "Kugel absorbieren",
    glBulletAbsorptionDescription = "Bekomme weniger Schaden",

    glHighGradeBullets = "Bessere Munition",
    glHighGradeBulletsDescription = "Mach mehr Schaden",
} )
--addons/glorifiedleveling/lua/glorifiedleveling/modules/core/sh_glorifiedleveling_perks.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/sh_glorifiedleveling_perkdefaults.lua:

-- Do not touch this file please.

GlorifiedLeveling.Perks.PERK_INFO = {
    [GlorifiedLeveling.Perks.Enum.SPEED] = {
        Name = GlorifiedLeveling.i18n.GetPhrase( "glHasteBoots" ),
        Description = GlorifiedLeveling.i18n.GetPhrase( "glHasteBootsDescription" )
    },
    [GlorifiedLeveling.Perks.Enum.LEAPING] = {
        Name = GlorifiedLeveling.i18n.GetPhrase( "glFeralLeaping" ),
        Description = GlorifiedLeveling.i18n.GetPhrase( "glFeralLeapingDescription" )
    },
    [GlorifiedLeveling.Perks.Enum.ARMOR] = {
        Name = GlorifiedLeveling.i18n.GetPhrase( "glIronSkin" ),
        Description = GlorifiedLeveling.i18n.GetPhrase( "glIronSkinDescription" )
    },
    [GlorifiedLeveling.Perks.Enum.HEALTH] = {
        Name = GlorifiedLeveling.i18n.GetPhrase( "glJuggernaut" ),
        Description = GlorifiedLeveling.i18n.GetPhrase( "glJuggernautDescription" )
    },
   -- [GlorifiedLeveling.Perks.Enum.LESS_DAMAGE_TAKEN] = {
   --     Name = GlorifiedLeveling.i18n.GetPhrase( "glBulletAbsorption" ),
  --      Description = GlorifiedLeveling.i18n.GetPhrase( "glBulletAbsorptionDescription" )
 --   },
    [GlorifiedLeveling.Perks.Enum.MORE_DAMAGE_GIVEN] = {
        Name = GlorifiedLeveling.i18n.GetPhrase( "glHighGradeBullets" ),
        Description = GlorifiedLeveling.i18n.GetPhrase( "glHighGradeBulletsDescription" )
    },
}
--addons/glorifiedleveling/lua/glorifiedleveling/modules/integrations/sh_glorifiedleveling_darkrp.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/adminpanel/cl_glorifiedleveling_adminmenu.lua:

local PANEL = {}

function PANEL:Init()
    self:SetSize( ScrH() * 0.746, ScrH() * 0.8 )
    self:Center()
    self:MakePopup()

    self.Theme = GlorifiedLeveling.Themes.GetCurrent()

    self.Navbar = vgui.Create( "GlorifiedLeveling.AdminNavbar", self )

    local function changePage( page )
        if not IsValid( self.Page ) then
            self.Page = vgui.Create( page, self )
            self.Page:Dock( FILL )
            self.Page.CanEditPlayers = self.CanEditPlayers
            return
        end

        self.Page:AlphaTo( 0, 0.15, 0, function( anim, panel )
            self.Page:Remove()

            self.Page = vgui.Create( page, self )
            self.Page:Dock( FILL )
            self.Page:SetAlpha( 0 )
            self.Page:AlphaTo( 255, 0.15 )
            self.Page.CanEditPlayers = self.CanEditPlayers
        end )
    end

    self.Navbar:AddItem( GlorifiedLeveling.i18n.GetPhrase( "glAdminMenuPlayers" ), LEFT, function( s ) changePage( "GlorifiedLeveling.Players" ) end )

    self.Navbar:AddItem( "LOCK", LEFT, function( s )
        self.LockdownMode = not self.LockdownMode

        net.Start( "GlorifiedLeveling.AdminPanel.SetLockdownStatus" )
         net.WriteBool( self.LockdownMode )
        net.SendToServer()
    end )

    self.Navbar:AddItem( "X", RIGHT, function( s )
        self:AlphaTo( 0, 0.3, 0, function( anim, panel )
            panel:Remove()
        end)
    end )

    self.Navbar:SelectTab( 1 )
    timer.Simple( 0, function()
        changePage( "GlorifiedLeveling.Players" )
    end )

    self:SetAlpha( 0 )
    self:AlphaTo( 255, 0.3 )
end

function PANEL:PerformLayout( w, h )
    self.Navbar:Dock( TOP )
    self.Navbar:SetSize( w, h * 0.06 )

    if IsValid( self.Page ) then
        self.Page:Dock( FILL )
    end
end

function PANEL:Paint( w, h )
    draw.RoundedBox( 6, 0, 0, w, h, self.Theme.Data.Colors.adminMenuBackgroundCol )
end

vgui.Register( "GlorifiedLeveling.AdminMenu", PANEL, "EditablePanel" )

function GlorifiedLeveling.UI.OpenAdminMenu( lockdownEnabled, canEditPlayers )
    if not IsValid( LocalPlayer() ) then return end

    if IsValid( GlorifiedLeveling.UI.AdminMenu ) then
        GlorifiedLeveling.UI.AdminMenu:Remove()
        GlorifiedLeveling.UI.AdminMenu = nil
    end

    GlorifiedLeveling.UI.AdminMenu = vgui.Create( "GlorifiedLeveling.AdminMenu" )
    GlorifiedLeveling.UI.AdminMenu.LockdownMode = lockdownEnabled
    GlorifiedLeveling.UI.AdminMenu.CanEditPlayers = canEditPlayers
end

net.Receive( "GlorifiedLeveling.AdminPanel.OpenAdminPanel", function()
    GlorifiedLeveling.UI.OpenAdminMenu( net.ReadBool(), net.ReadBool() )
end )
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/adminpanel/cl_glorifiedleveling_adminnavbar.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/adminpanel/cl_glorifiedleveling_players.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/adminpanel/cl_glorifiedleveling_setlevelconfirmation.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/leaderboard/cl_glorifiedleveling_leaderboard_leaderlist.lua:

local PANEL = {}

function PANEL:Init()
    self.Theme = self:GetParent().Theme
    self.PlayerTable = GlorifiedLeveling.TopTen or {}

    for k, v in ipairs( self.PlayerTable ) do
        self.PlayerTable[k].Name = ""
        steamworks.RequestPlayerInfo( v.SteamID64, function( playerName )
            self.PlayerTable[k].Name = playerName
        end )
    end
end

function PANEL:PerformLayout( w, h )
    self.PositionPos = w / 10
    self.NamePos = w / 1.7
    self.XPPos = w / 1.2
    self.LevelPos = w

    self.PositionWidth = self.PositionPos
    self.NameWidth = self.NamePos - self.PositionPos
    self.XPWidth = self.XPPos - self.NamePos
    self.LevelWidth = self.LevelPos - self.XPPos
end

function PANEL:Paint( w, h )
    local theme = self.Theme

    local titleBarHeight = h / 12
    draw.RoundedBox( 8, 0, 0, w, h, theme.Data.Colors.leaderboardLeaderListBackgroundColor )
    draw.RoundedBoxEx( 8, 0, 0, w, titleBarHeight, theme.Data.Colors.leaderboardLeaderListTopBarColor, true, true )

    draw.SimpleText( "#", "GlorifiedLeveling.Leaderboard.LeaderboardTitleBar", self.PositionPos / 2, titleBarHeight / 2, theme.Data.Colors.leaderboardLeaderListTitlesColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
    draw.SimpleText( GlorifiedLeveling.i18n.GetPhrase( "glName" ), "GlorifiedLeveling.Leaderboard.LeaderboardTitleBar", ( self.PositionPos + self.NamePos ) / 2, titleBarHeight / 2, theme.Data.Colors.leaderboardLeaderListTitlesColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
    draw.SimpleText( GlorifiedLeveling.i18n.GetPhrase( "glXP" ), "GlorifiedLeveling.Leaderboard.LeaderboardTitleBar", ( self.NamePos + self.XPPos ) / 2, titleBarHeight / 2, theme.Data.Colors.leaderboardLeaderListTitlesColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
    draw.SimpleText( GlorifiedLeveling.i18n.GetPhrase( "glLevel" ), "GlorifiedLeveling.Leaderboard.LeaderboardTitleBar", ( self.XPPos + self.LevelPos ) / 2, titleBarHeight / 2, theme.Data.Colors.leaderboardLeaderListTitlesColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

    if #self.PlayerTable > 0 then
        local gapSize = h / 135
        for k, v in ipairs( self.PlayerTable ) do
            local tblHeight = h / 12
            local tblY = titleBarHeight + ( ( k - 1 ) * tblHeight ) + ( k * gapSize )

            local firstBoxW = self.PositionWidth - 8
            draw.RoundedBoxEx( 8, 4, tblY, firstBoxW, tblHeight, theme.Data.Colors.leaderboardLeaderListEntryBackgroundColor, true, false, true, false )
            draw.RoundedBoxEx( 8, 8 + firstBoxW, tblY, w - firstBoxW - 12, tblHeight, theme.Data.Colors.leaderboardLeaderListEntryBackgroundColor, false, true, false, true )

            local positionColor = theme.Data.Colors.leaderboardLeaderListEntryGeneralPositionColor
            if k == 1 then positionColor = theme.Data.Colors.leaderboardLeaderListEntryFirstPositionColor
            elseif k == 2 then positionColor = theme.Data.Colors.leaderboardLeaderListEntrySecondPositionColor
            elseif k == 3 then positionColor = theme.Data.Colors.leaderboardLeaderListEntryThirdPositionColor end

            local positionText = k .. "."
            draw.SimpleText( positionText, "GlorifiedLeveling.Leaderboard.LeaderboardPositionText", self.PositionPos - self.PositionWidth / 2, tblY + tblHeight / 2, positionColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

            local name = string.sub( v.Name, 1, string.len( v.Name ) >= 28 and 28 or string.len( v.Name ) )
            draw.SimpleText( name, "GlorifiedLeveling.Leaderboard.LeaderboardText", self.NamePos - self.NameWidth + 8, tblY + tblHeight / 2, theme.Data.Colors.leaderboardLeaderListEntryTextColor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

            local xpBoxX = self.XPPos - self.XPWidth + 6
            local xpBoxWidth = self.XPWidth - 12
            draw.RoundedBox( 4, xpBoxX, tblY + 6, xpBoxWidth, tblHeight - 12, theme.Data.Colors.leaderboardLeaderListEntrySecondaryBackgroundColor )
            local xpText = tonumber( v.Level ) >= GlorifiedLeveling.Config.MAX_LEVEL and "MAX" or string.Comma( v.XP )
            draw.SimpleText( xpText, "GlorifiedLeveling.Leaderboard.LeaderboardBoxText", xpBoxX + xpBoxWidth / 2, tblY + tblHeight / 2, theme.Data.Colors.leaderboardLeaderListEntryTextColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

            local levelBoxX = self.LevelPos - self.LevelWidth + 8
            local levelBoxWidth = self.LevelWidth - 20
            draw.RoundedBox( 4, levelBoxX, tblY + 6, levelBoxWidth, tblHeight - 12, theme.Data.Colors.leaderboardLeaderListEntrySecondaryBackgroundColor )
            draw.SimpleText( string.Comma( v.Level ), "GlorifiedLeveling.Leaderboard.LeaderboardBoxText", levelBoxX + levelBoxWidth / 2, tblY + tblHeight / 2, theme.Data.Colors.leaderboardLeaderListEntryTextColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        end
    else
        draw.SimpleText( GlorifiedLeveling.i18n.GetPhrase( "glNobodyHere" ), "DermaDefault", 5, titleBarHeight + 5, theme.Data.Colors.leaderboardLeaderListEntryTextColor )
    end

    --[[
        -- Let's draw some debug lines just to help visualize where the labels will be placed.
        draw.RoundedBox( 0, self.PositionPos, 0, 1, h, Color( 255, 255, 255 ) ) -- Place indicator.
        draw.RoundedBox( 0, self.NamePos, 0, 1, h, Color( 255, 255, 255 ) ) -- Name indicator.
        draw.RoundedBox( 0, self.XPPos, 0, 1, h, Color( 255, 255, 255 ) ) -- XP indicator.
    ]]--
end

vgui.Register( "GlorifiedLeveling.Leaderboard.LeaderList", PANEL, "Panel" )
--addons/darkrpmodification/lua/darkrp_language/chatcommands.lua:
return gluapack()()
--addons/darkrpmodification/lua/darkrp_language/english.lua:
local tr = {
    -- Yönetici
    need_admin = "%s için yönetici yetkiniz olması gerekiyor",
    need_sadmin = "%s için süper yönetici yetkiniz olması gerekiyor",
    no_privilege = "Bu eylemi gerçekleştirmek için gerekli yetkiye sahip değilsiniz",
    no_jail_pos = "Hapishane konumu yok",
    invalid_x = "Geçersiz %s! %s",
    f1ChatCommandTitle = "Sohbet Komutları",
    f1Search = "Ara...",

    -- Para
    price = "Fiyat: %s%d",
    priceTag = "Fiyat: %s",
    reset_money = "%s tüm oyuncuların parasını sıfırladı!",
    has_given = "%s size %s verdi",
    you_gave = "%s öğesi %s adlı oyuncuya verildi",
    npc_killpay = "Bir NPC'yi öldürdüğün için %s!",
    profit = "kâr",
    loss = "zarar",
    Donate = "Bağış Yap",
    you_donated = "%s öğesi %s adlı oyuncuya bağışlandı!",
    has_donated = "%s %s bağışladı!",
    deducted_x = "%s%d Çıkarıldı",
    need_x = "%s%d Gerekiyor",
    deducted_money = "%s Azaltıldı",
    need_money = "%s Gerekiyor",
    payday_message = "Maaş yattı! %s para kazandınız!",
    payday_unemployed = "İşsiz olduğun için maaş yatmadı!",
    payday_missed = "Maaş günü kaçırıldı! (Tutuklusun)",
    property_tax = "Emlak vergisi! %s",
    property_tax_cant_afford = "Vergini ödeyemedin! Mülkünüz sizden alındı!",
    taxday = "Vergi Günü! Gelirinizin %%s% kadarı alındı!",
    found_cheque = "Çekte %s%s buldunuz. %s tarafından size yazılmış.",
    cheque_details = "Bu çek %s adına düzenlenmiştir.",
    cheque_torn = "Çeki yırttın.",
    cheque_pay = "Ödeme: %s",
    signed = "İmza: %s",
    found_cash = "%s%d aldınız!", 
    found_money = "%s aldınız!",
    owner_poor = "%s sahibi bu satışa devam edecek durumu yok!",

    -- Polis
    Wanted_text = "Aranıyorsun!",
    wanted = "Polis tarafından aranıyorsun!\nSebep: %s",
    youre_arrested = "Tutuklandın. Kalan zaman: %d saniye!",
    youre_arrested_by = "%s tarafından tutuklandın.",
    youre_unarrested_by = "%s tarafından salındın.",
    hes_arrested = "%s %d saniyeliğine tutuklandı!",
    hes_unarrested = "%s hapisten salındı!",
    warrant_ordered = "%s, %s için bir arama emri çıkardı. Sebep: %s",
    warrant_request = "%s, %s için bir arama yetkisi talep ediyor\nSebep: %s",
    warrant_request2 = "Arama yetki isteği %s Belediye Başkanı'na gönderildi!",
    warrant_approved = "Arama emri %s için onaylandı!\nSebep: %s\nEmri Çıkaran: %s",
    warrant_approved2 = "Artık evini arayabilirsiniz.",
    warrant_denied = "Belediye Başkanı %s arama yetki talebinizi reddetti.",
    warrant_expired = "%s için arama emrinin süresi doldu!",
    warrant_required = "Bu kapıyı açabilmek için izne ihtiyacınız var.",
    warrant_required_unfreeze = "Bu nesneyi çözebilmek için izne ihtiyacınız var.",
    warrant_required_unweld = "Bu nesnenin sabitlemesini kaldırabilmek için izne ihtiyacınız var.",
    wanted_by_police = "%s polis tarafından aranıyor!\nSebep: %s\nEmri Çıkaran: %s",
    wanted_by_police_print = "%s, %s oyuncusu için arama emri çıkardı, Sebep: %s",
    wanted_expired = "%s artık Polis tarafından aranmıyor.",
    wanted_revoked = "%s artık Polis tarafından aranmıyor.\nEmri Geri Alan: %s",
    cant_arrest_other_cp = "Diğer SK'leri tutuklayamazsın!",
    must_be_wanted_for_arrest = "Oyuncu tutuklanabilmesi için aranıyor olması gerekiyor.",
    cant_arrest_fadmin_jailed = "Yönetici tarafından hapsedilen bir oyuncuyu tutuklayamazsın.",
    cant_arrest_no_jail_pos = "Hapishane konumu ayarlanmadığı için insanları tutuklayamazsın!",
    cant_arrest_spawning_players = "Canlanmakta olan oyuncuları tutuklayamazsın.",
    suspect_doesnt_exist = "Şüpheli mevcut değil.",
    actor_doesnt_exist = "Mevcut değil.",
    get_a_warrant = "arama emri al",
    remove_a_warrant = "emri kaldır",
    make_someone_wanted = "biri için arama emri çıkar",
    remove_wanted_status = "aranıyor durumunu kaldır",
    already_a_warrant = "Bu şüpheli için zaten bir arama izni var.",
    not_warranted = "Bu kişi için arama emri yok.",
    already_wanted = "Şüpheli zaten aranıyor.",
    not_wanted = "Şüpheli aranmıyor.",
    need_to_be_cp = "Polis teşkilatına üye olmalısın.",
    suspect_must_be_alive_to_do_x = "%s için şüpheli canlı olmalı.",
    suspect_already_arrested = "Şüpheli zaten hapiste.",

    -- Oyuncular
    health = "Sağlık: %s",
    job = "Meslek: %s",
    salary = "Maaş: %s%s",
    wallet = "Cüzdan: %s%s",
    weapon = "Silah: %s",
    kills = "Leş: %s",
    deaths = "Ölüm: %s",
    rpname_changed = "%s RY adını %s ile değiştirdi.",
    disconnected_player = "Ayrılmış Oyuncu",
    player = "oyuncu",

    -- Takımlar
    need_to_be_before = "%s olabilmek için ilk %s olmalısın",
    need_to_make_vote = "%s olabilmek için oylama başlatman gerekiyor!",
    team_limit_reached = "Sınıra ulaşıldığı için %s olunamıyor",
    wants_to_be = "%s\n\n%s olmak istiyor",
    has_not_been_made_team = "%s, %s yapılmadı!",
    job_has_become = "%s, %s oldu!",

    -- Felaketler
    meteor_approaching = "UYARI: Meteor fırtınası yaklaşıyor!",
    meteor_passing = "Meteor fırtınası geçiyor.",
    meteor_enabled = "Meteor Fırtınaları artık etkin.",
    meteor_disabled = "Meteor Fırtınaları artık devre dışı.",
    earthquake_report = "%sMw büyüklüğünde deprem bildirildi.",
    earthtremor_report = "%sMw büyüklüğünde hafif yer sarsıntısı bildirildi.",

    -- Anahtar, araç ve kapı
    keys_allowed_to_coown = "Buna ortak olmaya iznin var\n(Ortak olmak için anahtarla şarjör değiştirme tuşuna veya F2 tuşuna bas)\n",
    keys_other_allowed = "Şuna ortak olmaya izin verildi:",
    keys_allow_ownership = "(Sahipliğe izin vermek için anahtarla şarjör değiştirme tuşuna veya F2 tuşuna bas)",
    keys_disallow_ownership = "(Sahipliğe izin vermemek için anahtarla şarjör değiştirme tuşuna veya F2 tuşuna bas)",
    keys_owned_by = "Sahip:",
    keys_unowned = "Sahipsiz\n(Sahip olmak için anahtarla şarjör değiştirme tuşuna veya F2 tuşuna bas)",
    keys_everyone = "(Herkes için etkinleştirmek için anahtarla şarjör değiştirme tuşuna veya F2 tuşuna bas)",
    door_unown_arrested = "Tutukluyken bir şeylere sahip olamazsınız veya sahipliğinden çıkalamaz!",
    door_unownable = "Bu kapıya sahip olunamaz veya sahipliğinden çıkalamaz!",
    door_sold = "Bunu %s fiyatına sattınız",
    door_already_owned = "Bu kapı sahipli!",
    door_cannot_afford = "Bu kapıyı alacak paran yok!",
    door_hobo_unable = "Bir aylaksan kapı satın alamazsın!",
    vehicle_cannot_afford = "Bu aracı almaya paranız yetmiyor!",
    door_bought = "Bu kapıyı %s%s fiyatına satın aldınız",
    vehicle_bought = "Bu aracı %s%s fiyatına satın aldınız",
    door_need_to_own = "%s için bu kapıya sahip olmanız gerekiyor.",
    door_rem_owners_unownable = "Bir kapı sahip olunamazsa sahipleri kaldıramazsınız!",
    door_add_owners_unownable = "Bir kapı sahip olunamazsa sahip eklemezsiniz!",
    rp_addowner_already_owns_door = "%s bu kapıya sahip (veya kapıyı almasına izin verilmiş)!",
    add_owner = "Sahip ekle",
    remove_owner = "Sahip kaldır",
    coown_x = "%s Öğesine Ortak Ol",
    allow_ownership = "Sahipliğe izin ver",
    disallow_ownership = "Sahipliğe izin verme",
    edit_door_group = "Kapı grubunu düzenle",
    door_groups = "Kapı grupları",
    door_group_doesnt_exist = "Kapı grubu bulunamadı!",
    door_group_set = "Kapı grubu başarıyla ayarlandı.",
    sold_x_doors_for_y = "%d kapıyı %s%d fiyatına sattınız!", 
    sold_x_doors = "%d kapıyı %s fiyatına sattınız!",
    no_doors_owned = "Hiçbir kapıya sahip değilsiniz!",

    -- Varlıklar
    drugs = "uyuşturucular",
    Drugs = "Uyuşturucular",
    drug_lab = "Uyuşturucu Lab",
    gun_lab = "Silah Lab",
    any_lab = "herhangi bir lab",
    gun = "silah",
    microwave = "Mikrodalga Fırın",
    food = "yemek",
    Food = "Yemek",
    money_printer = "Para Basma Makinesi",
    tip_jar = "Bağış Kutusu",
    sign_this_letter = "Mektubu imzala",
    signed_yours = "Saygılarımla,",
    money_printer_exploded = "Para basma makinen patladı!",
    money_printer_overheating = "Para basma makinen aşırı ısınıyor!",
    contents = "İçerik: ",
    amount = "Adet: ",
    picking_lock = "Kilit açılıyor",
    cannot_pocket_x = "Bunu cebine atamazsın!",
    cannot_pocket_gravgunned = "Bunu cebine atamazsın çünkü yer çekimi silahı tarafından tutuluyor.",
    object_too_heavy = "Bu nesne çok ağır.",
    pocket_full = "Cebin dolu!",
    pocket_no_items = "Cebinde hiç öğe yok.",
    drop_item = "Öğeyi bırak",
    bonus_destroying_entity = "bu yasadışı varlık yok ediliyor.",
    switched_burst = "Seri ateş moduna geçildi.",
    switched_fully_auto = "Tam otomatik ateş moduna geçildi.",
    switched_semi_auto = "Yarı otomatik ateş moduna geçildi.",
    keypad_checker_shoot_keypad = "Tuş takımının neyi kontrol ettiğini görmek için ateş et.",
    keypad_checker_shoot_entity = "Tuş takımının hangi varlığa bağlı olduğunu görmek için varlığa ateş et",
    keypad_checker_click_to_clear = "Temizlemek için sağ tıkla.",
    keypad_checker_entering_right_pass = "Doğru şifre giriliyor",
    keypad_checker_entering_wrong_pass = "Yanlış şifre giriliyor",
    keypad_checker_after_right_pass = "doğru şifreyi girdikten sonra",
    keypad_checker_after_wrong_pass = "yanlış şifreyi girdikten sonra",
    keypad_checker_right_pass_entered = "Doğru Şifre",
    keypad_checker_wrong_pass_entered = "Yanlış Şifre",
    keypad_checker_controls_x_entities = "Bu tuş takımı %d varlığı kontrol ediyor",
    keypad_checker_controlled_by_x_keypads = "Bu varlık %d tuş takımı tarafından kontrol ediliyor",
    keypad_on = "AÇIK",
    keypad_off = "KAPALI",
    seconds = "saniye",
    persons_weapons = "%s adlı oyuncunun silahları:",
    returned_persons_weapons = "%s adlı kişinin el konulan silahları iade edildi.",
    no_weapons_confiscated = "%s el konulan silahı yok!",
    no_illegal_weapons = "%s silahı yok.",
    confiscated_these_weapons = "Şu silahlara el konuldu:",
    checking_weapons = "Silahlara el konuluyor",
    shipment_antispam_wait = "Lütfen tekrar sipariş vermeden önce bekleyin.",
    createshipment = "Sevkiyat oluştur",
    splitshipment = "Sevkiyatı böl",
    shipment_cannot_split = "Bu sevkiyat bölünemez.",
    -- Konuşma
    hear_noone = "Kimse sizi duyamaz %s!",
    hear_everyone = "Herkes sizi duyabilir!",
    hear_certain_persons = "Sizi duyabilen oyuncular %s: ",

    whisper = "fısılda",
    yell = "bağır",
    broadcast = "[Yayınla!]",
    radio = "radyo",
    request = "(İSTEK!)",
    group = "(grup)",
    demote = "(RÜTBE DÜŞÜR)",
    ooc = "OOC",
    radio_x = "Radyo %d",
    talk = "konuş",
    speak = "konuş",
    speak_in_ooc = "OOC'da konuş",
    perform_your_action = "eylemi gerçekleştir",
    talk_to_your_group = "grubuna konuş",
    channel_set_to_x = "%s kanalına geçildi!",
    channel = "kanal",

    -- Bildirimler
    disabled = "%s devre dışı! %s",
    gm_spawnvehicle = "araç oluşturma",
    gm_spawnsent = "kodlanmış varlık (SENT) oluşturma",
    gm_spawnnpc = "oyuncu olmayan karakter (NPC) oluşturma",
    see_settings = "Lütfen DarkRP ayarlarına bakınız.",
    limit = "%s sınırına ulaştınız!",
    have_to_wait = "%s kullanmadan önce %d saniye beklemelisiniz!",
    must_be_looking_at = "Bir %s öğesine bakıyor olmanız gerekiyor!",
    incorrect_job = "%s için doğru mesleğe sahip değilsiniz",
    unavailable = "Bu %s mevcut değil",
    unable = "%s yapamıyorsunuz. %s",
    cant_afford = "%s paranız yetmiyor",
    created_x = "%s, %s oluşturdu",
    cleaned_up = "%s öğen temizlenmişti.",
    you_bought_x = "%s öğesini %s%d fiyatına satın aldınız.", 
    you_bought = "%s öğesini %s fiyatına satın aldınız.",
    you_got_yourself = "Kendinize bir %s aldınız.",
    you_received_x = "%s için %s aldınız.",
    created_first_jailpos = "İlk hapishane konumunu oluşturdunuz!",
    added_jailpos = "Fazladan bir tane hapishane konumu eklediniz!",
    reset_add_jailpos = "Tüm hapishane konumlarını kaldırdınız ve buraya yeni bir tane eklediniz.",
    created_spawnpos = "%s için canlanma noktası eklediniz.",
    updated_spawnpos = "%s için tüm canlanma noktalarını kaldırdınız ve buraya yeni bir tane eklediniz.",
    remove_spawnpos = "%s için tüm canlanma noktalarını kaldırdınız.",
    do_not_own_ent = "Bu varlığın sahibi değilsiniz!",
    cannot_drop_weapon = "Bu silah bırakılamaz!",
    job_switch = "Meslek basarıyla değiştirildi!",
    job_switch_question = "%s ile meslek değişmek istiyor musun?",
    job_switch_requested = "Meslek değişimi talep edildi.",
    switch_jobs = "meslek değiş",
    cooks_only = "Sadece aşcılar.",

    -- Çeşitli
    unknown = "Bilinmeyen",
    arguments = "argüman",
    no_one = "Kimse",
    door = "Kapı",
    vehicle = "Araç",
    door_or_vehicle = "Kapı/Araç",
    driver = "Sürücü: %s",
    name = "Ad: %s",
    locked = "Kilitlendi.",
    unlocked = "Kilit Açıldı.",
    player_doesnt_exist = "Böyle bir oyuncu yok.",
    job_doesnt_exist = "Böyle bir meslek yok!",
    must_be_alive_to_do_x = "%s için canlı olman gerekiyor.",
    banned_or_demoted = "Yasaklandı/Rütbe Düşürüldü",
    wait_with_that = "Lütfen bekleyiniz.",
    could_not_find = "%s bulunamadı",
    f3tovote = "oylamak için F3 tuşuna bas",
    listen_up = "Dinleyin:", -- rp_tell veya rp_tellall'da
    nlr = "Yeni Yaşam Kuralı: İntikam almak için birini tutuklamayın veya öldürmeyin.",
    reset_settings = "Tüm ayarları sıfırladınız!",
    must_be_x = "%s olmak zorundasınız %s için.",
    agenda = "gündem",
    agenda_updated = "Gündem güncellendi",
    job_set = "%s mesleğini '%s' yaptı",
    demote_vote = "rütbe düşür",
    demoted = "%s rütbesi düşürüldü",
    demoted_not = "%s rütbesi düşürülmedi",
    demote_vote_started = "%s, %s adlı oyuncusunun rütbesini düşürmek için oylama başlattı",
    demote_vote_text = "Rütbe Düşürme Adayı:\n%s", -- '%s' sebep
    cant_demote_self = "Kendi rütbeni düşüremezsin.",
    i_want_to_demote_you = "Senin rütbeni düşürmek istiyorum. Sebep: %s",
    tried_to_avoid_demotion = "Rütbe düşürülmesinden kaçtınız. Başarısız oldunuz ve rütbeniz düşürüldü.", -- yaramaz seni!
    lockdown_started = "Belediye Başkanı sokağa çıkma yasağı ilan etti, lütfen evinize dönünüz!",
    lockdown_ended = "The lockdown has ended",
    gunlicense_requested = "%s, %s adlı oyuncudan silah ruhsatı istedi",
    gunlicense_granted = "%s, %s adlı oyuncuya silah ruhsatı verdi",
    gunlicense_denied = "%s, %s adlı oyuncunun silah ruhsatı isteğini reddetti",
    gunlicense_question_text = "%s adlı oyuncuya silah ruhsatı verilsin mi?",
    gunlicense_remove_vote_text = "%s, %s adlı oyuncunun silah ruhsatının alınması için oylama başlattı.",
    gunlicense_remove_vote_text2 = "Silah Ruhsatı Alındı:\n%s", -- %s sebep
    gunlicense_removed = "%s adlı oyuncunun silah ruhsatı alındı!",
    gunlicense_not_removed = "%s adlı oyuncunun silah ruhsatı alınmadı!",
    vote_specify_reason = "Bir sebep belirtmeniz gerekiyor!",
    vote_started = "Oylama başlatıldı",
    vote_alone = "Oylamayı sunucuda yalnız olduğunuz için kazandınız.",
    you_cannot_vote = "Oy veremezsiniz!",
    x_cancelled_vote = "%s son oylamayı iptal etti.",
    cant_cancel_vote = "Son oylama iptal edilemiyor çünkü iptal edilecek bir oylama yok!",
    jail_punishment = "Çıktığınız için ceza! %d saniyeliğine hapsedildiniz.",
    admin_only = "Sadece yönetici!", -- /addjailpos kullanımı
    chief_or = "Amir veya ", -- /addjailpos kullanımı
    frozen = "Donduruldu.",
    recipient = "alıcı",
    forbidden_name = "Yasak isim.",
    illegal_characters = "Yasak karakter.",
    too_long = "Çok uzun.",
    too_short = "Çok kısa.",
    dead_in_jail = "Hapishaneden çıkana kadar ölüsün!",
    died_in_jail = "%s hapishanede öldü!",
    credits_for = "EMEĞİ GEÇENLER %s\n",
    credits_see_console = "DarkRP'de emeği geçenler konsola yazıldı.",
    rp_getvehicles = "Özel araçlar için mevcut araçlar:",
    data_not_loaded_one = "Verileriniz daha yüklenmedi. Lütfen bekleyin.",
    data_not_loaded_two = "Sorun devam ederse, sunucuya yeniden katılmayı deneyin veya bir yöneticiyle iletişime geçin.",
    cant_spawn_weapons = "Silah oluşturamazsınız.",
    drive_disabled = "Sürüş şimdilik devre dışı.",
    property_disabled = "Mülk şimdilik devre dışı.",
    not_allowed_to_purchase = "Bu öğeyi satın almanıza izin verilmiyor.",
    rp_teamban_hint = "rp_teamban [player name/ID] [team name/id]. Bu komutu bir takımdaki oyuncuyu takımdan yasaklamak için kullanın.",
    rp_teamunban_hint = "rp_teamunban [player name/ID] [team name/id]. Bu komutu bir takımdaki oyuncunun yasağını kaldırmak için kullanın.",
    x_teambanned_y_for_z = "%s, %s adlı oyuncuyu %s olduğu için %s dakika boyunca yasakladı.",
    x_teamunbanned_y = "%s, %s adlı oyuncuyu %s olduğu için olan yasaklamasını kaldırdı.",

    -- Backwards compatibility:
    you_set_x_salary_to_y = "%s adlı oyuncunun maaşını %s%d değerine ayarladınız.",
    x_set_your_salary_to_y = "%s maaşınızı %s%d değerine ayarladı.",
    you_set_x_money_to_y = "%s adlı oyuncunun parasını %s%d değerine ayarladınız.",
    x_set_your_money_to_y = "%s paranızı %s%d değerine ayarladınız.",
    you_set_x_salary = "%s adlı oyuncunun maaşını %s değerine ayarladınız.",
    x_set_your_salary = "%s maaşını %s değerine ayarladı.",
    you_set_x_money = "%s adlı oyuncunun parasını %s değerine ayarladınız.",
    x_set_your_money = "%s paranızı %s değerine ayarladı.",
    you_set_x_name = "%s adlı oyuncunun adını '%s' olarak değiştirdiniz",
    x_set_your_name = "%s adını '%s' olarak değiştirdi",

    someone_stole_steam_name = "Birisi zaten Steam adınızı RY adı olarak kullanıyor, bu yüzden sizin adınızın sonuna '1' koyduk.",
    already_taken = "Bu isimde biri zaten var.",
    job_doesnt_require_vote_currently = "Bu meslek şu anda oylama gerektirmiyor!",
    x_made_you_a_y = "%s sizi bir %s yaptı!",

    cmd_cant_be_run_server_console = "Bu komut sunucu konsolundan çalıştırılamaz.",

    -- Piyango
    lottery_started = "Piyango düzenleniyor! Piyangoya %s%d ile katılmak ister misiniz?", 
    lottery_has_started = "Piyango düzenleniyor! Piyangoya %s ile katılmak ister misiniz?",
    lottery_entered = "Piyangoya %s ile katıldınız",
    lottery_not_entered = "%s piyangoya katılmadı",
    lottery_noone_entered = "Kimse piyangoya katılmadı",
    lottery_won = "%s piyangoyu kazandı! %s kazandılar",
    lottery = "piyango",
    lottery_please_specify_an_entry_cost = "Lütfen bir giriş maliyeti belirtin (%s-%s)",
    too_few_players_for_lottery = "Piyango başlatmak için çok az oyuncu var. En az %d oyuncu olmalı",
    lottery_ongoing = "Piyango başlatılamıyor çünkü devam etmekte olan bir piyango var",

    -- Animasyonlar
    custom_animation = "Özel Animasyon!",
    bow = "Eğil",
    sexy_dance = "Seksi Dans",
    follow_me = "Beni Takip Et!",
    laugh = "Gül",
    lion_pose = "Aslan Pozu",
    nonverbal_no = "Hayır İşareti",
    thumbs_up = "İyi Şans İşareti",
    wave = "El Salla",
    dance = "Dans Et",

    -- Açlık Modu
    starving = "Açlıktan ölüyorsun!",

    -- AFK
    afk_mode = "Boşta Modu",
    unable_afk_spam_prevention = "Lütfen boşta olmadan önce bekleyin.",
    salary_frozen = "Maaşın donduruldu.",
    salary_restored = "Tekrar hoş geldiniz, maaşınız geri yüklendi.",
    no_auto_demote = "Otomatik olarak rütbeniz düşürülmeyecek.",
    youre_afk_demoted = "Çok uzun süre boşta olduğun için rütben düşürüldü. Bir dahaki sefere /afk kullanın.",
    hes_afk_demoted = "%s çok uzun süre boşta olduğu için rütbesi düşürüldü.",
    afk_cmd_to_exit = "Boşta modundan çıkmak için /afk yaz.",
    player_now_afk = "%s artık boşta.",
    player_no_longer_afk = "%s artık boşta değil.",

    -- Katil Kiralama Menüsü
    hit = "katil kirala",
    hitman = "Kiralık Katil",
    current_hit = "Hedef: %s",
    cannot_request_hit = "Katil kiralanamıyor! %s",
    hitmenu_request = "İstek",
    player_not_hitman = "Bu oyuncu bir kiralık katil değil!",
    distance_too_big = "Mesafe çok uzak.",
    hitman_no_suicide = "Kiralık katil kendisini öldüremez.",
    hitman_no_self_order = "Bir kiralık katil kendisini kiralayamaz.",
    hitman_already_has_hit = "Kiralık katil şuan bir başkası tarafından kiralı.",
    price_too_low = "Fiyat çok düşük!",
    hit_target_recently_killed_by_hit = "Hedef kısa süre önce bir kiralık katil tarafından öldürüldü.",
    customer_recently_bought_hit = "Müşteri kısa süre önce sizi kiraladı.",
    accept_hit_question = "%s, %s adlı oyuncuyu %s%d karşılığında öldürmeni istiyor. Kabul ediyor musun?", 
    accept_hit_request = "%s, %s adlı oyuncuyu %s karşılığında öldürmeni istiyor. Kabul ediyor musun?",
    hit_requested = "Kiralama istendi!",
    hit_aborted = "Kiralama iptal edildi! %s",
    hit_accepted = "Kabul edildi!",
    hit_declined = "Kiralık katil öldürmeyi reddetti!",
    hitman_left_server = "Kiralık katil sunucudan çıktı!",
    customer_left_server = "Müşteri sunucudan çıktı!",
    target_left_server = "Hedef sunucudan çıktı!",
    hit_price_set_to_x = "Suikast ücreti %s%d fiyatına ayarlandı.", 
    hit_price_set = "Suikast %s fiyatına ayarlandı.",
    hit_complete = "Suikast %s tarafından tamamlandı!",
    hitman_died = "Kiralık katil öldü!",
    target_died = "Hedef öldü!",
    hitman_arrested = "Kiralık katil tutuklandı!",
    hitman_changed_team = "Kiralık katil takım değişti!",
    x_had_hit_ordered_by_y = "%s adlı kiralık katil, %s tarafından tutulmuştu.",
    place_a_hit = "katil kirala!",
    hit_cancel = "katil kiralama iptali!",
    hit_cancelled = "Kiralama işlemi iptal edilmişti!",
    no_active_hit = "Peşinde kiralık katil yok!",

    -- Oy Kısıtlaması
    hobos_no_rights = "Aylakların oy hakkı yoktur!",
    gangsters_cant_vote_for_government = "Çete üyeleri hükümet işlerinde oylamaya karışamaz!",
    government_cant_vote_for_gangsters = "Devlet görevlileri çete işlerinde oylamaya karışamaz!",

    -- VGUI - kapı/araç
    vote = "Oy",
    time = "Süre: %d",
    yes = "Evet",
    no = "Hayır",
    ok = "Tamam",
    cancel = "İptal",
    add = "Ekle",
    remove = "Kaldır",
    none = "Hiçbiri",
    x_options = "%s ayarları",
    sell_x = "%s Sat",
    set_x_title = "%s öğesinin başlığını ayarla",
    set_x_title_long = "Baktığın %s öğesinin başlığını ayarla.",
    jobs = "Meslekler",
    buy_x = "%s Satın Al",

    -- F4 Menü
    ammo = "cephane",
    weapon_ = "silah",
    no_extra_weapons = "Bu mesleğin fazladan silahı yok.",
    become_job = "Meslek değiş",
    create_vote_for_job = "Oylama başlat",
    shipment = "sevkiyat",
    Shipments = "Sevkiyatlar",
    shipments = "sevkiyatlar",
    F4guns = "Silahlar",
    F4entities = "Çeşitli",
    F4ammo = "Cephane",
    F4vehicles = "Araçlar",

    -- Sekme 1
    give_money = "Baktığın oyuncuya para ver",
    drop_money = "Para bırak",
    change_name = "DarkRP adını değiştir",
    go_to_sleep = "Uyu/Uyan",
    drop_weapon = "Seçili silahı bırak",
    buy_health = "Sağlık satın al(%s)",
    request_gunlicense = "Silah ruhsatı iste",
    demote_player_menu = "Bir oyuncunun rütbesini düşür",

    searchwarrantbutton = "Bir oyuncu için arama emri çıkar",
    unwarrantbutton = "Bir oyuncunun aranma durumunu kaldır",
    noone_available = "Kimse mevcut değil",
    request_warrant = "Bir oyuncu için arama izni iste",
    make_wanted = "arama kararı çıkart",
    make_unwanted = "arama kararını geçersiz kıl",
    set_jailpos = "Hapishane konumunu ayarla",
    add_jailpos = "Hapishane konumunu ekle",
    set_custom_job = "Özel bir iş ayarla (etkinleştirmek için enter tuşuna bas)",
    set_agenda = "Gündemi ayarla (etkinleştirmek için enter tuşuna bas)",
    initiate_lockdown = "Dışarı çıkma yasağını başlat",
    stop_lockdown = "Dışarı çıkma yasağını durdur",
    start_lottery = "Piyango düzenle",
    give_license_lookingat = "<lookingat> oyuncusuna ruhsat ver",
    laws_of_the_land = "BU TOPRAKLARIN YASALARI",
    law_added = "Yasa eklendi.",
    law_removed = "Yasa kaldırıldı.",
    law_reset = "Yasa sıfırlandı.",
    law_too_short = "Yasa çok kısa.",
    laws_full = "Yasalar dolu.",
    default_law_change_denied = "Varsayılan yasaları değiştiremezsiniz.",

    -- Sekme 2
    job_name = "Ad: ",
    job_description = "Açıklama: ",
    job_weapons = "Silahlar: ",

    -- Varlık Sekmesi
    buy_a = "Satın al %s: %s",

    -- Silah Ruhsatı
    license_tab = [[Ruhsat İzni

    Ruhsat olmadan silah alabilen oyuncuları işaretle!
    ]],
    license_tab_other_weapons = "Diğer silahlar:",
}

DarkRP.addLanguage("en", tr)
-- Turkish localization by Tora aka Nova Diablox
--addons/zeros_retrominer_v2.3.6/lua/darkrp_modules/zrmine/sh_zgm_darkrp.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/darkrp_modules/zmlab2/sh_zmlab2_darkrp.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

TEAM_ZMLAB2_COOK = DarkRP.createJob("Profesyonel Meth Üreticisi", {
	color = Color(255, 247, 0),
	model = {"models/player/kleiner.mdl"},
	description = [[Sen bu işin ustasısın. Kalitesiz malzeme kullanmaz, hataya yer vermezsin. Ürettiğin meth piyasada en safı ve en değerlisi olarak bilinir. 
	Ama büyük paralar büyük riskleri de beraberinde getirir… Polisler, rakip çeteler ve muhbirler her an peşinde olabilir. 
	Dikkatli ol, yoksa işin patlayabilir – kelimenin tam anlamıyla!
	
	-İllegal Aktivitelerde Bulunabilir
    -Raid Atamaz 
	-Mug Atamaz
	-Banka Soyamaz
	]],
	weapons = {},
	command = "zmlab2_MethCook",
	max = 6,
	salary = 0,
	admin = 0,
	vote = false,
	category = "Donator",
	hasLicense = false
})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

DarkRP.createCategory{
    name = "Usta Meth Üreticisi", -- Kategori adı
    categorises = "entities", -- Kategorilendirilen tür (varlıklar)
    startExpanded = true, -- Varsayılan olarak açık mı?
    color = Color(0, 125, 255, 255), -- Kategorinin rengi (mavi)
    canSee = function(ply) return true end, -- Kategoriyi kimler görebilir (herkes)
    sortOrder = 103 -- Sıralama önceliği
}

DarkRP.createEntity("Çadır Kiti", { -- Varlık adı
    ent = "zmlab2_tent", -- Varlık sınıfı
    model = "models/zerochain/props_methlab/zmlab2_tentkit.mdl", -- Model yolu
    price = 1000, -- Fiyatı
    max = 1, -- Maksimum satın alma sınırı
    cmd = "buytent", -- Konsol komutu
    allowTools = true, -- Araç kullanmaya izin ver (örn. fizik tabancası)
    allowed = TEAM_ZMLAB2_COOK, -- İzin verilen meslek (Met Üreticisi)
    category = "Usta Meth Üreticisi" -- Bulunduğu kategori
})

DarkRP.createEntity("Ekipman Sandığı", { -- Varlık adı
    ent = "zmlab2_equipment", -- Varlık sınıfı
    model = "models/zerochain/props_methlab/zmlab2_chest.mdl", -- Model yolu
    price = 1000, -- Fiyatı
    max = 1, -- Maksimum satın alma sınırı
    cmd = "buyequipment", -- Konsol komutu
    allowed = TEAM_ZMLAB2_COOK, -- İzin verilen meslek (Met Üreticisi)
    category = "Usta Meth Üreticisi" -- Bulunduğu kategori
})

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

// Below is all the other stuff that usally gets bought via the Equipment / Storage Entity

/*
DarkRP.createEntity("Palette", {
	ent = "zmlab2_item_palette",
	model = "models/zerochain/props_methlab/zmlab2_palette.mdl",
	price = 1000,
	max = 1,
	cmd = "buyPalette",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})

DarkRP.createEntity("Automatic Icebreaker", {
	ent = "zmlab2_item_autobreaker",
	description = "Upgrades the packing table to automaticly cracks and packs ice.",
	model = "models/zerochain/props_methlab/zmlab2_autobreaker.mdl",
	price = 5000,
	max = 1,
	cmd = "buyautobreaker",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})

DarkRP.createEntity("Acid", {
	ent = "zmlab2_item_acid",
	model = "models/zerochain/props_methlab/zmlab2_acid.mdl",
	price = 1000,
	max = 6,
	cmd = "buyAcid",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

DarkRP.createEntity("Aluminum", {
	ent = "zmlab2_item_aluminium",
	model = "models/zerochain/props_methlab/zmlab2_aluminium.mdl",
	price = 1000,
	max = 6,
	cmd = "buyAluminium",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})

DarkRP.createEntity("Liquid Oxygen", {
	ent = "zmlab2_item_lox",
	model = "models/zerochain/props_methlab/zmlab2_lox.mdl",
	price = 1000,
	max = 6,
	cmd = "buylox",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

DarkRP.createEntity("Methylamine", {
	ent = "zmlab2_item_methylamine",
	model = "models/zerochain/props_methlab/zmlab2_methylamine.mdl",
	price = 1000,
	max = 6,
	cmd = "buyMethylamine",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})

DarkRP.createEntity("Filler", {
	ent = "zmlab2_machine_filler",
	model = "models/zerochain/props_methlab/zmlab2_filler.mdl",
	price = 1000,
	max = 1,
	cmd = "buyfiller",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})

DarkRP.createEntity("Filter", {
	ent = "zmlab2_machine_filter",
	model = "models/zerochain/props_methlab/zmlab2_filter.mdl",
	price = 1000,
	max = 1,
	cmd = "buyFilter",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})

DarkRP.createEntity("Frezzer", {
	ent = "zmlab2_machine_frezzer",
	model = "models/zerochain/props_methlab/zmlab2_frezzer.mdl",
	price = 1000,
	max = 1,
	cmd = "buyFrezzer",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})

DarkRP.createEntity("Furnace", {
	ent = "zmlab2_machine_furnace",
	model = "models/zerochain/props_methlab/zmlab2_furnance.mdl",
	price = 1000,
	max = 1,
	cmd = "buyFurnace",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})

DarkRP.createEntity("Mixer", {
	ent = "zmlab2_machine_mixer",
	model = "models/zerochain/props_methlab/zmlab2_mixer.mdl",
	price = 1000,
	max = 1,
	cmd = "buyMixer",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})

DarkRP.createEntity("Ventilation", {
	ent = "zmlab2_machine_ventilation",
	model = "models/zerochain/props_methlab/zmlab2_ventilation.mdl",
	price = 1000,
	max = 1,
	cmd = "buyVentilation",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})

DarkRP.createEntity("Storage", {
	ent = "zmlab2_storage",
	model = "models/zerochain/props_methlab/zmlab2_storage.mdl",
	price = 1000,
	max = 1,
	cmd = "buyStorage",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})

DarkRP.createEntity("Packing Table", {
	ent = "zmlab2_table",
	model = "models/zerochain/props_methlab/zmlab2_table.mdl",
	price = 1000,
	max = 1,
	cmd = "buyTable",
	allowed = TEAM_ZMLAB2_COOK,
	category = "MethCook"
})
*/

--addons/zeros_yeastbeast_1.1.7/lua/darkrp_modules/zerosyeastbeast/sh_zyb_darkrp.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/sh_glorifiedhandcuffs_config.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/libraries/cl_glorifiedhandcuffs_scrollpanel.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/bailmenu/cl_glorifiedhandcuffs_bailmenu_panel.lua:

local PANEL = {}

function PANEL:Init()
    self:SetSize( ScrH() * 0.6, ScrH() * 0.6 )
    self:Center()
    self:MakePopup()

    self.Theme = GlorifiedHandcuffs.Themes.GetCurrent()

    self.TitleBar = vgui.Create( "GlorifiedHandcuffs.BailMenu.TitleBar", self )
    self.ArrestedPlayers = vgui.Create( "GlorifiedHandcuffs.BailMenu.ArrestedPlayers", self )
    for k, v in player.Iterator() do
        if GlorifiedHandcuffs.IsPlayerArrested( v ) then
            self.ArrestedPlayers:AddPlayer( v )
        end
    end

    self:SetAlpha( 0 )
    self:AlphaTo( 255, 0.3 )
end

function PANEL:PerformLayout( w, h )
    self.TitleBar:Dock( TOP )
    self.TitleBar:SetSize( w, h * 0.1 )

    self.ArrestedPlayers:Dock( FILL )

    if IsValid( self.Page ) then
        self.Page:Dock( FILL )
    end
end

function PANEL:Think()
    if input.IsKeyDown( KEY_ESCAPE ) then
        GlorifiedHandcuffs.UI.CloseBailMenu()
        RunConsoleCommand( "cancelselect" )
    end
end

function PANEL:Paint( w, h )
    draw.RoundedBox( 6, 0, 0, w, h, self.Theme.Data.Colors.bailMenuBackgroundColor )
end

vgui.Register( "GlorifiedHandcuffs.BailMenu.Menu", PANEL, "EditablePanel" )

function GlorifiedHandcuffs.UI.OpenBailMenu()
    if not IsValid( LocalPlayer() ) then return end

    if IsValid( GlorifiedHandcuffs.UI.BailMenu ) then
        GlorifiedHandcuffs.UI.BailMenu:Remove()
        GlorifiedHandcuffs.UI.BailMenu = nil
    end

    GlorifiedHandcuffs.UI.BailMenu = vgui.Create( "GlorifiedHandcuffs.BailMenu.Menu" )
end

function GlorifiedHandcuffs.UI.CloseBailMenu()
    if not GlorifiedHandcuffs.UI.BailMenu then return end

    GlorifiedHandcuffs.UI.BailMenu:AlphaTo( 0, 0.3, 0, function()
        GlorifiedHandcuffs.UI.BailMenu:Remove()
        GlorifiedHandcuffs.UI.BailMenu = nil
    end )
end

net.Receive( "GlorifiedHandcuffs.Bail.OpenBailMenu", GlorifiedHandcuffs.UI.OpenBailMenu )
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/bailmenu/cl_glorifiedhandcuffs_bailmenu_titlebar.lua:

local PANEL = {}

function PANEL:Init()
    self.Theme = self:GetParent().Theme

    self.TitleLabel = vgui.Create( "DLabel", self )
    self.TitleLabel:SetFont( "GlorifiedHandcuffs.BailMenu.TitleBar" )
    self.TitleLabel:SetText( GlorifiedHandcuffs.i18n.GetPhrase( "bailMenu" ) )
    self.TitleLabel:SizeToContents()
    self.TitleLabel:DockMargin( 10, 0, 0, 0 )
    self.TitleLabel:Dock( LEFT )

    self.CloseButton = vgui.Create( "DButton", self )
    self.CloseButton:SetText( "" )
    self.CloseButton:Dock( RIGHT )
    self.CloseButton.DoClick = GlorifiedHandcuffs.UI.CloseBailMenu
end

function PANEL:PerformLayout( w, h )
    self.CloseButton:SetSize( w * 0.085, h )
    self.CloseButton.Paint = function( closeButton, closeButtonW, closeButtonH )
        local iconSize = closeButtonH * 0.4
        if not closeButton.Color then closeButton.Color = self.Theme.Data.Colors.bailMenuCloseButtonBackgroundColor end
        closeButton.Color = GlorifiedHandcuffs.UI.LerpColor( FrameTime() * 5, closeButton.Color, closeButton:IsHovered() and self.Theme.Data.Colors.bailMenuCloseButtonHoverColor or self.Theme.Data.Colors.bailMenuCloseButtonBackgroundColor )
        surface.SetDrawColor( closeButton.Color )
        surface.SetMaterial( self.Theme.Data.Materials.close )
        surface.DrawTexturedRect( closeButtonW / 2 - iconSize / 2, closeButtonH / 2 - iconSize / 2, iconSize, iconSize )
    end
end

function PANEL:Paint( w, h )
    draw.RoundedBoxEx( 6, 0, 0, w, h, self.Theme.Data.Colors.bailMenuTitleBarBackgroundColor, true, true, false, false )
end

vgui.Register( "GlorifiedHandcuffs.BailMenu.TitleBar", PANEL, "Panel" )
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/interactionmenu/cl_glorifiedhandcuffs_interactionmenu_titlebar.lua:

local PANEL = {}

function PANEL:Init()
    self.Theme = self:GetParent().Theme

    self.TitleLabel = vgui.Create( "DLabel", self )
    self.TitleLabel:SetFont( "GlorifiedHandcuffs.InteractionMenu.TitleBar" )
    self.TitleLabel:SetText( "Kelepçe Menüsü" )
    self.TitleLabel:SizeToContents()
    self.TitleLabel:DockMargin( 10, 0, 0, 0 )
    self.TitleLabel:Dock( LEFT )

    self.CloseButton = vgui.Create( "DButton", self )
    self.CloseButton:SetText( "" )
    self.CloseButton:Dock( RIGHT )
    self.CloseButton.DoClick = GlorifiedHandcuffs.UI.CloseInteractionMenu
end

function PANEL:PerformLayout( w, h )
    self.CloseButton:SetSize( w * 0.085, h )
    self.CloseButton.Paint = function( closeButton, closeButtonW, closeButtonH )
        local iconSize = closeButtonH * 0.4
        if not closeButton.Color then closeButton.Color = self.Theme.Data.Colors.interactionMenuCloseButtonBackgroundColor end
        closeButton.Color = GlorifiedHandcuffs.UI.LerpColor( FrameTime() * 5, closeButton.Color, closeButton:IsHovered() and self.Theme.Data.Colors.interactionMenuCloseButtonHoverColor or self.Theme.Data.Colors.interactionMenuCloseButtonBackgroundColor )
        surface.SetDrawColor( closeButton.Color )
        surface.SetMaterial( self.Theme.Data.Materials.close )
        surface.DrawTexturedRect( closeButtonW / 2 - iconSize / 2, closeButtonH / 2 - iconSize / 2, iconSize, iconSize )
    end
end

function PANEL:Paint( w, h )
    draw.RoundedBoxEx( 6, 0, 0, w, h, self.Theme.Data.Colors.interactionMenuTitleBarBackgroundColor, true, true, false, false )
end

vgui.Register( "GlorifiedHandcuffs.InteractionMenu.TitleBar", PANEL, "Panel" )
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_crosshair.lua:
local size = 0
local clump_inner = Material("arccw/hud/clump_inner.png", "mips smooth")
local clump_outer = Material("arccw/hud/clump_outer.png", "mips smooth")
local aimtr_result = {}
local aimtr = {}
local square_mat = Material("color")

function SWEP:ShouldDrawCrosshair()
    if ArcCW.ConVars["override_crosshair_off"]:GetBool() then return false end
    if !ArcCW.ConVars["crosshair"]:GetBool() then return false end
    if self:GetReloading() then return false end
    if self:BarrelHitWall() > 0 then return false end
    local asight = self:GetActiveSights()

    if !self:GetOwner():ShouldDrawLocalPlayer()
            and self:GetState() == ArcCW.STATE_SIGHTS and !asight.CrosshairInSights then
        return false
    end

    if self:GetNWState() == ArcCW.STATE_SPRINT and !self:CanShootWhileSprint() then return false end
    if self:GetCurrentFiremode().Mode == 0 then return false end
    if self:GetBuff_Hook("Hook_ShouldNotFire") then return false end
    if self:GetNWState() == ArcCW.STATE_CUSTOMIZE then return false end
    if self:GetNWState() == ArcCW.STATE_DISABLE then return false end
    return true
end

local cr_main = Color( 0, 255, 0 )
local cr_shad = Color( 0, 0, 0, 127 )

local gaA = 0
local gaD = 0

function SWEP:GetFOVAcc( acc, disp )
    cam.Start3D()
        local lool = ( EyePos() + ( EyeAngles():Forward() ) + ( ( ArcCW.MOAToAcc * (acc or self:GetBuff("AccuracyMOA")) ) * EyeAngles():Up() ) ):ToScreen()
        local lool2 = ( EyePos() + ( EyeAngles():Forward() ) + ( ( (disp or self:GetDispersion()) * ArcCW.MOAToAcc / 10 ) * EyeAngles():Up() ) ):ToScreen()
    cam.End3D()

    local gau = 0
    gau = ( (ScrH() / 2) - lool.y )
    gaA = math.Approach(gaA, gau, (ScrH() / 2) * FrameTime())
    gau = 0
    gau = ( (ScrH() / 2) - lool2.y )
    gaD = math.Approach(gaD, gau, (ScrH() / 2) * FrameTime())

    return gaA, gaD
end

function SWEP:DrawDevCrosshair(x, y)
    surface.SetDrawColor(255, 50, 50, 255)

    surface.DrawLine(x, y - 256, x, y + 256)
    surface.DrawLine(x - 256, y, x + 256, y)


    local gA, gD = self:GetFOVAcc( self:GetBuff("AccuracyMOA"), self:GetDispersion() )
    surface.DrawCircle(x, y, gA + gD, 255, 255, 255, 155)
    surface.DrawCircle(x, y, gA, 255, 255, 0, 55)

    draw.SimpleTextOutlined(math.Round(self:GetDispersion(), 1) .. " MOA", "ArcCW_24_Unscaled", x - gA - gD - 16, y, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_BOTTOM, 1, Color(0, 0, 0))
    draw.SimpleTextOutlined(math.Round(self:GetBuff("AccuracyMOA"), 1) .. " MOA", "ArcCW_24_Unscaled", x - gA - gD - 16, y, Color(255, 255, 0), TEXT_ALIGN_RIGHT, TEXT_ALIGN_TOP, 1, Color(0, 0, 0))


    local dist = self:GetOwner():GetEyeTrace().HitPos:Distance(self:GetOwner():GetShootPos()) * ArcCW.HUToM
    local rf = self:GetRangeFraction(dist)

    local dmg = math.floor(self:GetDamage(dist))
    draw.SimpleTextOutlined(dmg .. " damage", "ArcCW_24_Unscaled", x + 256, y, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_BOTTOM, 1, Color(0, 0, 0))
    draw.SimpleTextOutlined(math.Round(dist, 1) .. "m", "ArcCW_24_Unscaled", x + 256 - 64, y, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_TOP, 1, Color(0, 0, 0))
    draw.SimpleTextOutlined(math.Round(rf * 100) .. "%", "ArcCW_24_Unscaled", x + 256, y, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_TOP, 1, Color(0, 0, 0))

end

function SWEP:DoDrawCrosshair(x, y)
    local ply = LocalPlayer()
    local pos = ply:EyePos()
    local ang = ply:EyeAngles() - self:GetOurViewPunchAngles() + self:GetFreeAimOffset()

    if self:GetBuff_Hook("Hook_PreDrawCrosshair") then return end

    local static = ArcCW.ConVars["crosshair_static"]:GetBool()

    local prong_dot = ArcCW.ConVars["crosshair_dot"]:GetBool()
    local prong_top = ArcCW.ConVars["crosshair_prong_top"]:GetBool()
    local prong_left = ArcCW.ConVars["crosshair_prong_left"]:GetBool()
    local prong_right = ArcCW.ConVars["crosshair_prong_right"]:GetBool()
    local prong_down = ArcCW.ConVars["crosshair_prong_bottom"]:GetBool()

    local prong_len = ArcCW.ConVars["crosshair_length"]:GetFloat()
    local prong_wid = ArcCW.ConVars["crosshair_thickness"]:GetFloat()
    local prong_out = ArcCW.ConVars["crosshair_outline"]:GetInt()
    local prong_tilt = ArcCW.ConVars["crosshair_tilt"]:GetBool()

    local clr = Color(ArcCW.ConVars["crosshair_clr_r"]:GetInt(),
            ArcCW.ConVars["crosshair_clr_g"]:GetInt(),
            ArcCW.ConVars["crosshair_clr_b"]:GetInt())
    if ArcCW.ConVars["ttt_rolecrosshair"] and ArcCW.ConVars["ttt_rolecrosshair"]:GetBool() then
        if GetRoundState() == ROUND_PREP or GetRoundState() == ROUND_POST then
            clr = Color(255, 255, 255)
        elseif ply.GetRoleColor and ply:GetRoleColor() then
            clr = ply:GetRoleColor() -- TTT2 feature
        elseif ply:IsActiveTraitor() then
            clr = Color(255, 50, 50)
        elseif ply:IsActiveDetective() then
            clr = Color(50, 50, 255)
        else
            clr = Color(50, 255, 50)
        end
    end
    if ArcCW.ConVars["crosshair_aa"]:GetBool() and ply.ArcCW_AATarget != nil and ArcCW.ConVars["aimassist"]:GetBool() and ArcCW.ConVars["aimassist_cl"]:GetBool() then
            -- whooie
        clr = Color(255, 0, 0)
    end
    clr.a = ArcCW.ConVars["crosshair_clr_a"]:GetInt()

    local outlineClr = Color(ArcCW.ConVars["crosshair_outline_r"]:GetInt(),
            ArcCW.ConVars["crosshair_outline_g"]:GetInt(),
            ArcCW.ConVars["crosshair_outline_b"]:GetInt(),
            ArcCW.ConVars["crosshair_outline_a"]:GetInt())

    local gA, gD = self:GetFOVAcc( self:GetBuff("AccuracyMOA"), self:GetDispersion() )
    local gap = (static and 8 or gA + gD) * ArcCW.ConVars["crosshair_gap"]:GetFloat()

    gap = gap + ( ScreenScale(8) * math.Clamp(self.RecoilAmount, 0, 1) )

    local prong = ScreenScale(prong_len)
    local p_w = ScreenScale(prong_wid)
    local p_w2 = p_w + prong_out

    local sp
    if self:GetOwner():ShouldDrawLocalPlayer() then
        local tr = util.GetPlayerTrace(self:GetOwner())
        local trace = util.TraceLine( tr )

        cam.Start3D()
        local coords = trace.HitPos:ToScreen()
        coords.x = math.Round(coords.x)
        coords.y = math.Round(coords.y)
        cam.End3D()
        sp = { visible = true, x = coords.x, y = coords.y }
    end

    cam.Start3D()
    sp = (pos + (ang:Forward() * 3200)):ToScreen()
    cam.End3D()

    if ArcCW.ConVars["crosshair_trueaim"]:GetBool() then
        aimtr.start = self:GetShootSrc()
    else
        aimtr.start = pos
    end

    aimtr.endpos = aimtr.start + ((ply:EyeAngles() + self:GetFreeAimOffset()):Forward() * 100000)
    aimtr.filter = {ply}
    aimtr.output = aimtr_result

    table.Add(aimtr.filter, ArcCW:GetVehicleFilter(ply) or {})

    util.TraceLine(aimtr)

    cam.Start3D()
    local w2s = aimtr_result.HitPos:ToScreen()
    w2s.x = math.Round(w2s.x)
    w2s.y = math.Round(w2s.y)
    cam.End3D()

    sp.x = w2s.x sp.y = w2s.y
    x, y = sp.x, sp.y

    if ArcCW.ConVars["dev_crosshair"]:GetBool() and LocalPlayer():IsAdmin() then
        self:DrawDevCrosshair(x, y)
    end

    local st = self:GetSightTime() / 2

    if self:ShouldDrawCrosshair() then
        self.CrosshairDelta = math.Approach(self.CrosshairDelta or 0, 1, FrameTime() * 1 / st)
    else
        self.CrosshairDelta = math.Approach(self.CrosshairDelta or 0, 0, FrameTime() * 1 / st)
    end

    if ArcCW.ConVars["crosshair_equip"]:GetBool() and (self:GetBuff("ShootEntity", true) or self.PrimaryBash) then
        prong = ScreenScale(prong_wid)
        p_w = ScreenScale(prong_wid)
        p_w2 = p_w + prong_out
    end

    if prong_dot then
        surface.SetDrawColor(outlineClr.r, outlineClr.g, outlineClr.b, outlineClr.a * self.CrosshairDelta)
        surface.DrawRect(x - p_w2 / 2, y - p_w2 / 2, p_w2, p_w2)

        surface.SetDrawColor(clr.r, clr.g, clr.b, clr.a * self.CrosshairDelta)
        surface.DrawRect(x - p_w / 2, y - p_w / 2, p_w, p_w)
    end


    size = math.Approach(size, gap, FrameTime() * 32 * gap)
    gap = size
    if !static then gap = gap * self.CrosshairDelta end
    gap = math.max(4, gap)

    local num = self:GetBuff("Num")
    if ArcCW.ConVars["crosshair_shotgun"]:GetBool() and num > 1 then
        prong = ScreenScale(prong_wid)
        p_w = ScreenScale(prong_len)
        p_w2 = p_w + prong_out
    end

    local prong2 = prong + prong_out
    if prong_tilt then
        local angle = (prong_left and prong_top and prong_right and prong_down) and 45 or 30
        local rad = math.rad(angle)
        local dx = gap * math.cos(rad) + prong * math.cos(rad) / 2
        local dy = gap * math.sin(rad) + prong * math.sin(rad) / 2
        surface.SetMaterial(square_mat)
        -- Shade
        surface.SetDrawColor(outlineClr.r, outlineClr.g, outlineClr.b, outlineClr.a * self.CrosshairDelta)
        if prong_left and prong_top then
            surface.DrawTexturedRectRotated(x - dx, y - dy, prong2, p_w2, -angle)
            surface.DrawTexturedRectRotated(x + dx, y - dy, prong2, p_w2, angle)
        elseif prong_left or prong_top then
            surface.DrawRect(x - p_w2 / 2, y - gap - prong2 + prong_out / 2, p_w2, prong2)
        end
        if prong_right and prong_down then
            surface.DrawTexturedRectRotated(x + dx, y + dy, prong2, p_w2, -angle)
            surface.DrawTexturedRectRotated(x - dx, y + dy, prong2, p_w2, angle)
        elseif prong_right or prong_down then
            surface.DrawRect(x - p_w2 / 2, y + gap - prong_out / 2, p_w2, prong2)
        end
        -- Fill
        surface.SetDrawColor(clr.r, clr.g, clr.b, clr.a * self.CrosshairDelta)
        if prong_left and prong_top then
            surface.DrawTexturedRectRotated(x - dx, y - dy, prong, p_w, -angle)
            surface.DrawTexturedRectRotated(x + dx, y - dy, prong, p_w, angle)
        elseif prong_left or prong_top then
            surface.DrawRect(x - p_w / 2, y - gap - prong, p_w, prong)
        end
        if prong_right and prong_down then
            surface.DrawTexturedRectRotated(x + dx, y + dy, prong, p_w, -angle)
            surface.DrawTexturedRectRotated(x - dx, y + dy, prong, p_w, angle)
        elseif prong_right or prong_down then
            surface.DrawRect(x - p_w / 2, y + gap, p_w, prong)
        end
    else
        -- Shade
        surface.SetDrawColor(outlineClr.r, outlineClr.g, outlineClr.b, outlineClr.a * self.CrosshairDelta)
        if prong_left then
            surface.DrawRect(x - gap - prong2 + prong_out / 2, y - p_w2 / 2, prong2, p_w2)
        end
        if prong_right then
            surface.DrawRect(x + gap - prong_out / 2, y - p_w2 / 2, prong2, p_w2)
        end
        if prong_top then
            surface.DrawRect(x - p_w2 / 2, y - gap - prong2 + prong_out / 2, p_w2, prong2)
        end
        if prong_down then
            surface.DrawRect(x - p_w2 / 2, y + gap - prong_out / 2, p_w2, prong2)
        end
        -- Fill
        surface.SetDrawColor(clr.r, clr.g, clr.b, clr.a * self.CrosshairDelta)
        if prong_left then
            surface.DrawRect(x - gap - prong, y - p_w / 2, prong, p_w)
        end
        if prong_right then
            surface.DrawRect(x + gap, y - p_w / 2, prong, p_w)
        end
        if prong_top then
            surface.DrawRect(x - p_w / 2, y - gap - prong, p_w, prong)
        end
        if prong_down then
            surface.DrawRect(x - p_w / 2, y + gap, p_w, prong)
        end
    end

    if ArcCW.ConVars["crosshair_clump"]:GetBool() and (ArcCW.ConVars["crosshair_clump_always"]:GetBool() or num > 1) then
        local acc = math.max(1, gA)
        if ArcCW.ConVars["crosshair_clump_outline"]:GetBool() then
            surface.SetMaterial(clump_outer)

            for i=1, prong_out do
                surface.DrawCircle(x-1, y-0, acc + math.ceil(i*0.5) * (i % 2 == 1 and 1 or -1), outlineClr.r, outlineClr.g, outlineClr.b, outlineClr.a * self.CrosshairDelta)
            end
            surface.DrawCircle(x-1, y-0, acc, outlineClr.r, outlineClr.g, outlineClr.b, outlineClr.a * self.CrosshairDelta)
        end

        surface.DrawCircle(x-1, y-0, acc, clr.r, clr.g, clr.b, clr.a * self.CrosshairDelta)
    end

    self:GetBuff_Hook("Hook_PostDrawCrosshair", w2s)

    return true
end
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_holosight.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_lhik.lua:
local function qerp(delta, a, b)
    local qdelta = -(delta ^ 2) + (delta * 2)

    qdelta = math.Clamp(qdelta, 0, 1)

    return Lerp(qdelta, a, b)
end

SWEP.LHIKAnimation_IsIdle = false
SWEP.LHIKAnimation = nil
SWEP.LHIKAnimationStart = 0
SWEP.LHIKAnimationTime = 0

SWEP.LHIKCamAng = Angle(0, 0, 0)
SWEP.LHIKGunAng = Angle(0, 0, 0)

function SWEP:DoLHIKAnimation(key, time, spbitch)
    if !IsValid(self:GetOwner()) then return end

    if game.SinglePlayer() and !spbitch then
        timer.Simple(0, function() if IsValid(self) then self:DoLHIKAnimation(key, time, true) end end)
        return
    end

    local vm = self:GetOwner():GetViewModel()
    if !IsValid(vm) then return end

    local lhik_model
    local lhik_anim_model
    local LHIK_GunDriver
    local LHIK_CamDriver
    local offsetang

    local tranim = self:GetBuff_Hook("Hook_LHIK_TranslateAnimation", key)

    key = tranim or key

    for i, k in pairs(self.Attachments) do
        if !k.Installed then continue end
        if !k.VElement then continue end

        if self:GetBuff_Stat("LHIK", i) then
            lhik_model = k.VElement.Model
            lhik_anim_model = k.GodDriver and k.GodDriver.Model or false
            offsetang = k.VElement.OffsetAng

            if self:GetBuff_Stat("LHIK_GunDriver", i) then
                LHIK_GunDriver = self:GetBuff_Stat("LHIK_GunDriver", i)
            end

            if self:GetBuff_Stat("LHIK_CamDriver", i) then
                LHIK_CamDriver = self:GetBuff_Stat("LHIK_CamDriver", i)
            end
        end
    end

    if !IsValid(lhik_model) then return false end

    local seq = lhik_model:LookupSequence(key)

    if !seq then return false end
    if seq == -1 then return false end

    lhik_model:ResetSequence(seq)
    if IsValid(lhik_anim_model) then
        lhik_anim_model:ResetSequence(seq)
    end

    if !time or time < 0 then time = lhik_model:SequenceDuration(seq) end

    self.LHIKAnimation = seq
    self.LHIKAnimationStart = UnPredictedCurTime()
    self.LHIKAnimationTime = time

    self.LHIKAnimation_IsIdle = false

    if IsValid(lhik_anim_model) and LHIK_GunDriver then
        local att = lhik_anim_model:LookupAttachment(LHIK_GunDriver)
        local ang = lhik_anim_model:GetAttachment(att).Ang
        local pos = lhik_anim_model:GetAttachment(att).Pos

        self.LHIKGunAng = lhik_anim_model:WorldToLocalAngles(ang) - Angle(0, 90, 90)
        self.LHIKGunPos = lhik_anim_model:WorldToLocal(pos)

        self.LHIKGunAngVM = vm:WorldToLocalAngles(ang) - Angle(0, 90, 90)
        self.LHIKGunPosVM = vm:WorldToLocal(pos)
    end

    if IsValid(lhik_anim_model) and LHIK_CamDriver then
        local att = lhik_anim_model:LookupAttachment(LHIK_CamDriver)
        local ang = lhik_anim_model:GetAttachment(att).Ang

        self.LHIKCamOffsetAng = offsetang
        self.LHIKCamAng = lhik_anim_model:WorldToLocalAngles(ang)
    end

    -- lhik_model:SetCycle(0)
    -- lhik_model:SetPlaybackRate(dur / time)

    return true
end

SWEP.LHIKDelta = {}
SWEP.LHIKDeltaAng = {}
SWEP.ViewModel_Hit = Vector(0, 0, 0)
SWEP.Customize_Hide = 0

function SWEP:GetLHIKAnim()
    local cyc = (UnPredictedCurTime() - self.LHIKAnimationStart) / self.LHIKAnimationTime

    if cyc > 1 then return nil end
    if self.LHIKAnimation_IsIdle then return nil end

    return self.LHIKAnimation
end

function SWEP:DoLHIK()
    if !IsValid(self:GetOwner()) then return end

    local justhide = false
    local lhik_model = nil
    local lhik_anim_model = nil
    local hide_component = false
    local delta = 1

    local vm = self:GetOwner():GetViewModel()

    if !ArcCW.ConVars["reloadincust"]:GetBool() and !self.NoHideLeftHandInCustomization and !self:GetBuff_Override("Override_NoHideLeftHandInCustomization") then
        if self:GetState() == ArcCW.STATE_CUSTOMIZE then
            self.Customize_Hide = math.Approach(self.Customize_Hide, 1, FrameTime() / 0.25)
        else
            self.Customize_Hide = math.Approach(self.Customize_Hide, 0, FrameTime() / 0.25)
        end
    end

    for i, k in pairs(self.Attachments) do
        if !k.Installed then continue end
        -- local atttbl = ArcCW.AttachmentTable[k.Installed]

        -- if atttbl.LHIKHide then
        if self:GetBuff_Stat("LHIKHide", i) then
            justhide = true
        end

        if !k.VElement then continue end

        -- if atttbl.LHIK then
        if self:GetBuff_Stat("LHIK", i) then
            lhik_model = k.VElement.Model
            if k.GodDriver then
                lhik_anim_model = k.GodDriver.Model
            end
        end
    end

    if self.LHIKTimeline then
        local tl = self.LHIKTimeline

        local stage, next_stage, next_stage_index

        for i, k in pairs(tl) do
            if !k or !k.t then continue end
            if k.t + self.LHIKStartTime > UnPredictedCurTime() then
                next_stage_index = i
                break
            end
        end

        if next_stage_index then
            if next_stage_index == 1 then
                -- we are on the first stage.
                stage = {t = 0, lhik = 0}
                next_stage = self.LHIKTimeline[next_stage_index]
            else
                stage = self.LHIKTimeline[next_stage_index - 1]
                next_stage = self.LHIKTimeline[next_stage_index]
            end
        else
            stage = self.LHIKTimeline[#self.LHIKTimeline]
            next_stage = {t = self.LHIKEndTime, lhik = self.LHIKTimeline[#self.LHIKTimeline].lhik}
        end

        local local_time = UnPredictedCurTime() - self.LHIKStartTime

        local delta_time = next_stage.t - stage.t
        delta_time = (local_time - stage.t) / delta_time

        delta = qerp(delta_time, stage.lhik, next_stage.lhik)

        if lhik_model and IsValid(lhik_model) then
            local key

            if stage.lhik > next_stage.lhik then
                key = "in"
            elseif next_stage.lhik > stage.lhik then
                key = "out"
            end

            if key then
                local tranim = self:GetBuff_Hook("Hook_LHIK_TranslateAnimation", key)

                key = tranim or key

                local seq = lhik_model:LookupSequence(key)

                if seq and seq > 0 then
                    lhik_model:SetSequence(seq)
                    lhik_model:SetCycle(delta)
                    if lhik_anim_model then
                        lhik_anim_model:SetSequence(seq)
                        lhik_anim_model:SetCycle(delta)
                    end
                end
            end
        end

        -- if tl[4] <= UnPredictedCurTime() then
        --     -- it's over
        --     delta = 1
        -- elseif tl[3] <= UnPredictedCurTime() then
        --     -- transition back to 1
        --     delta = (UnPredictedCurTime() - tl[3]) / (tl[4] - tl[3])
        --     delta = qerp(delta, 0, 1)

        --     if lhik_model and IsValid(lhik_model) then
        --         local key = "out"

        --         local tranim = self:GetBuff_Hook("Hook_LHIK_TranslateAnimation", key)

        --         key = tranim or key

        --         local seq = lhik_model:LookupSequence(key)

        --         if seq and seq > 0 then
        --             lhik_model:SetSequence(seq)
        --             lhik_model:SetCycle(delta)
        --         end
        --     end
        -- elseif tl[2] <= UnPredictedCurTime() then
        --     -- hold 0
        --     delta = 0
        -- elseif tl[1] <= UnPredictedCurTime() then
        --     -- transition to 0
        --     delta = (UnPredictedCurTime() - tl[1]) / (tl[2] - tl[1])
        --     delta = qerp(delta, 1, 0)

        --     if lhik_model and IsValid(lhik_model) then
        --         local key = "in"

        --         local tranim = self:GetBuff_Hook("Hook_LHIK_TranslateAnimation", key)

        --         key = tranim or key

        --         local seq = lhik_model:LookupSequence(key)

        --         if seq and seq > 0 then
        --             lhik_model:SetSequence(seq)
        --             lhik_model:SetCycle(delta)
        --         end
        --     end
    else
        -- hasn't started yet
        delta = 1
    end

    if delta == 1 and self.Customize_Hide > 0 then
        if !lhik_model or !IsValid(lhik_model) then
            justhide = true
            delta = math.min(self.Customize_Hide, delta)
        else
            hide_component = true
        end
    end

    if justhide then
        for _, bone in pairs(ArcCW.LHIKBones) do
            local vmbone = vm:LookupBone(bone)

            if !vmbone then continue end -- Happens when spectating someone prolly

            local vmtransform = vm:GetBoneMatrix(vmbone)

            if !vmtransform then continue end -- something very bad has happened

            local vm_pos = vmtransform:GetTranslation()
            local vm_ang = vmtransform:GetAngles()

            local newtransform = Matrix()

            newtransform:SetTranslation(LerpVector(delta, vm_pos, vm_pos - (EyeAngles():Up() * 12) - (EyeAngles():Forward() * 12) - (EyeAngles():Right() * 4)))
            newtransform:SetAngles(vm_ang)

            vm:SetBoneMatrix(vmbone, newtransform)
        end
    end

    if !lhik_model or !IsValid(lhik_model) then return end

    lhik_model:SetupBones()

    if justhide then return end

    local cyc = (UnPredictedCurTime() - self.LHIKAnimationStart) / self.LHIKAnimationTime

    if self.LHIKAnimation and cyc < 1 then
        lhik_model:SetSequence(self.LHIKAnimation)
        lhik_model:SetCycle(cyc)
        if IsValid(lhik_anim_model) then
            lhik_anim_model:SetSequence(self.LHIKAnimation)
            lhik_anim_model:SetCycle(cyc)
        end
    else
        local key = "idle"

        local tranim = self:GetBuff_Hook("Hook_LHIK_TranslateAnimation", key)

        key = tranim or key

        if key and key != "DoNotPlayIdle" then
            self:DoLHIKAnimation(key, -1)
        end

        self.LHIKAnimation_IsIdle = true
    end

    local cf_deltapos = Vector(0, 0, 0)
    local cf = 0


    for _, bone in pairs(ArcCW.LHIKBones) do
        local vmbone = vm:LookupBone(bone)
        local lhikbone = lhik_model:LookupBone(bone)

        if !vmbone then continue end
        if !lhikbone then continue end

        local vmtransform = vm:GetBoneMatrix(vmbone)
        local lhiktransform = lhik_model:GetBoneMatrix(lhikbone)

        if !vmtransform then continue end
        if !lhiktransform then continue end

        local vm_pos = vmtransform:GetTranslation()
        local vm_ang = vmtransform:GetAngles()
        local lhik_pos = lhiktransform:GetTranslation()
        local lhik_ang = lhiktransform:GetAngles()

        local newtransform = Matrix()

        newtransform:SetTranslation(LerpVector(delta, vm_pos, lhik_pos))
        newtransform:SetAngles(LerpAngle(delta, vm_ang, lhik_ang))

        if !self:GetBuff_Override("LHIK_GunDriver") and self.LHIKDelta[lhikbone] and self.LHIKAnimation and cyc < 1 then
            local deltapos = lhik_model:WorldToLocal(lhik_pos) - self.LHIKDelta[lhikbone]

            if !deltapos:IsZero() then
                cf_deltapos = cf_deltapos + deltapos
                cf = cf + 1
            end
        end

        self.LHIKDelta[lhikbone] = lhik_model:WorldToLocal(lhik_pos)

        if hide_component then
            local new_pos = newtransform:GetTranslation()
            newtransform:SetTranslation(LerpVector(self.Customize_Hide, new_pos, new_pos - (EyeAngles():Up() * 12) - (EyeAngles():Forward() * 12) - (EyeAngles():Right() * 4)))
        end

        local matrix = Matrix(newtransform)

        vm:SetBoneMatrix(vmbone, matrix)

        -- local vm_pos, vm_ang = vm:GetBonePosition(vmbone)
        -- local lhik_pos, lhik_ang = lhik_model:GetBonePosition(lhikbone)

        -- local pos = LerpVector(delta, vm_pos, lhik_pos)
        -- local ang = LerpAngle(delta, vm_ang, lhik_ang)

        -- vm:SetBonePosition(vmbone, pos, ang)
    end

    if !cf_deltapos:IsZero() and cf > 0 and self:GetBuff_Override("LHIK_Animation") then
        local new = Vector(0, 0, 0)
        local viewmult = self:GetBuff_Override("LHIK_MovementMult") or 1

        new[1] = cf_deltapos[2] * viewmult
        new[2] = cf_deltapos[1] * viewmult
        new[3] = cf_deltapos[3] * viewmult

        self.ViewModel_Hit = LerpVector(0.25, self.ViewModel_Hit, new / cf):GetNormalized()
    end
end
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_presets.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_viewmodel.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_bash.lua:
function SWEP:CanBackstab(melee2, ent)
    if !self:GetBuff_Override("Override_Backstab", self.Backstab) then return false end
    local reach = 32 + self:GetBuff_Add("Add_MeleeRange") + (melee2 and self.Melee2Range or self.MeleeRange)

    if (!IsValid(ent)) then
        local tr = util.TraceLine({
            start = self:GetOwner():GetShootPos(),
            endpos = self:GetOwner():GetShootPos() + self:GetOwner():GetAimVector() * reach,
            filter = {self:GetOwner()},
            mask = MASK_SHOT_HULL
        })
        if tr.Entity:IsPlayer() or tr.Entity:IsNPC() or tr.Entity:IsNextBot() then
            ent = tr.Entity
        end
    end

    if (!IsValid(ent)) then
        local tr = util.TraceHull({
            start = self:GetOwner():GetShootPos(),
            endpos = self:GetOwner():GetShootPos() + self:GetOwner():GetAimVector() * reach,
            filter = {self:GetOwner()},
            mins = Vector(-16, -16, -8),
            maxs = Vector(16, 16, 8),
            mask = MASK_SHOT_HULL
        })
        if tr.Entity:IsPlayer() or tr.Entity:IsNPC() or tr.Entity:IsNextBot() then
            ent = tr.Entity
        end
    end

    if IsValid(ent) then
        local angle = math.NormalizeAngle(self:GetOwner():GetAngles().y - ent:GetAngles().y)
        return angle <= 90 and angle >= -90
    end

    return false
end

function SWEP:DoLunge(melee2)
    if ArcCW.ConVars["override_lunge_off"]:GetBool() then return end
    local var = self:GetBuff_Override("Override_Lunge", self.Lunge)
    if var == false or var == nil and self.PrimaryBash then return end
    if !self:GetOwner():IsPlayer() or self:GetOwner():Crouching() then return end

    local reach = 32 + self:GetBuff_Add("Add_MeleeRange") + (melee2 and self.Melee2Range or self.MeleeRange)
    local tr = self:GetOwner():GetEyeTrace()
    local tgt = tr.Entity

    if IsValid(tgt) and (tgt:IsPlayer() or tgt:IsNPC() or tgt:IsNextBot()) then

        local dist = (tr.HitPos - tr.StartPos):Length()

        if dist > reach and dist < reach + self:GetBuff("LungeLength") then
            local dir = tr.Normal
            dir.z = math.min(dir.z, 0)
            dir:Normalize()
            self:GetOwner():SetVelocity(dir * (self:GetOwner():IsOnGround() and 5 or 2.5) * dist)
        end
    end
end

function SWEP:Bash(melee2)
    melee2 = melee2 or false
    if self:GetState() == ArcCW.STATE_SIGHTS
            or (self:GetState() == ArcCW.STATE_SPRINT and !self:CanShootWhileSprint())
            or self:GetState() == ArcCW.STATE_CUSTOMIZE then
        return
    end
    if self:GetNextPrimaryFire() > CurTime() or self:GetGrenadePrimed() or self:GetPriorityAnim() then return end

    if !self.CanBash and !self:GetBuff_Override("Override_CanBash") then return end

    self:GetBuff_Hook("Hook_PreBash")

    self.Primary.Automatic = true

    local mult = self:GetBuff_Mult("Mult_MeleeTime")
    local mt = self.MeleeTime * mult

    if melee2 then
        mt = self.Melee2Time * mult
    end

    mt = mt * self:GetBuff_Mult("Mult_MeleeWaitTime")

    local bashanim = "bash"
    local canbackstab = self:CanBackstab(melee2)

    if melee2 then
        bashanim = canbackstab and self:SelectAnimation("bash2_backstab") or self:SelectAnimation("bash2") or bashanim
    else
        bashanim = canbackstab and self:SelectAnimation("bash_backstab") or self:SelectAnimation("bash") or bashanim
    end

    bashanim = self:GetBuff_Hook("Hook_SelectBashAnim", bashanim) or bashanim

    if bashanim and self.Animations[bashanim] then
        if SERVER then self:PlayAnimation(bashanim, mult, true, 0, true) end
    else
        self:ProceduralBash()

        self:MyEmitSound(self.MeleeSwingSound, 75, 100, 1, CHAN_USER_BASE + 1)
    end

    if CLIENT then
        self:OurViewPunch(-self.BashPrepareAng * 0.05)
    end
    self:SetNextPrimaryFire(CurTime() + mt )

    if melee2 then
        if self.HoldtypeActive == "pistol" or self.HoldtypeActive == "revolver" then
            self:GetOwner():DoAnimationEvent(self.Melee2Gesture or ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE)
        else
            self:GetOwner():DoAnimationEvent(self.Melee2Gesture or ACT_GMOD_GESTURE_MELEE_SHOVE_2HAND)
        end
    else
        if self.HoldtypeActive == "pistol" or self.HoldtypeActive == "revolver" then
            self:GetOwner():DoAnimationEvent(self.MeleeGesture or ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE)
        else
            self:GetOwner():DoAnimationEvent(self.MeleeGesture or ACT_GMOD_GESTURE_MELEE_SHOVE_2HAND)
        end
    end

    local mat = self.MeleeAttackTime

    if melee2 then
        mat = self.Melee2AttackTime
    end

    mat = mat * self:GetBuff_Mult("Mult_MeleeAttackTime") * math.pow(mult, 1.5)

    self:SetTimer(mat or (0.125 * mt), function()
        if !IsValid(self) then return end
        if !IsValid(self:GetOwner()) then return end
        if self:GetOwner():GetActiveWeapon() != self then return end

        if CLIENT then
            self:OurViewPunch(-self.BashAng * 0.05)
        end

        self:MeleeAttack(melee2)
    end)

    self:DoLunge()
end

function SWEP:MeleeAttack(melee2)
    local reach = 32 + self:GetBuff_Add("Add_MeleeRange") + self.MeleeRange
    local dmg = self:GetBuff_Override("Override_MeleeDamage", self.MeleeDamage) or 20

    if melee2 then
        reach = 32 + self:GetBuff_Add("Add_MeleeRange") + self.Melee2Range
        dmg = self:GetBuff_Override("Override_MeleeDamage", self.Melee2Damage) or 20
    end

    dmg = dmg * self:GetBuff_Mult("Mult_MeleeDamage")

    self:GetOwner():LagCompensation(true)

    local filter = {self:GetOwner()}

    table.Add(filter, self.Shields)

    local tr = util.TraceLine({
        start = self:GetOwner():GetShootPos(),
        endpos = self:GetOwner():GetShootPos() + self:GetOwner():GetAimVector() * reach,
        filter = filter,
        mask = MASK_SHOT_HULL
    })

    if (!IsValid(tr.Entity)) then
        tr = util.TraceHull({
            start = self:GetOwner():GetShootPos(),
            endpos = self:GetOwner():GetShootPos() + self:GetOwner():GetAimVector() * reach,
            filter = filter,
            mins = Vector(-16, -16, -8),
            maxs = Vector(16, 16, 8),
            mask = MASK_SHOT_HULL
        })
    end

    -- Backstab damage if applicable
    local backstab = tr.Hit and self:CanBackstab(melee2, tr.Entity)
    if backstab then
        if melee2 then
            local bs_dmg = self:GetBuff_Override("Override_Melee2DamageBackstab", self.Melee2DamageBackstab)
            if bs_dmg then
                dmg = bs_dmg * self:GetBuff_Mult("Mult_MeleeDamage")
            else
                dmg = dmg * self:GetBuff("BackstabMultiplier") * self:GetBuff_Mult("Mult_MeleeDamage")
            end
        else
            local bs_dmg = self:GetBuff_Override("Override_MeleeDamageBackstab", self.MeleeDamageBackstab)
            if bs_dmg then
                dmg = bs_dmg * self:GetBuff_Mult("Mult_MeleeDamage")
            else
                dmg = dmg * self:GetBuff("BackstabMultiplier") * self:GetBuff_Mult("Mult_MeleeDamage")
            end
        end
    end

    -- We need the second part for single player because SWEP:Think is ran shared in SP
    if !(game.SinglePlayer() and CLIENT) then
        if tr.Hit then
            if tr.Entity:IsNPC() or tr.Entity:IsNextBot() or tr.Entity:IsPlayer() then
                self:MyEmitSound(self.MeleeHitNPCSound, 75, 100, 1, CHAN_USER_BASE + 2)
            else
                self:MyEmitSound(self.MeleeHitSound, 75, 100, 1, CHAN_USER_BASE + 2)
            end

            if tr.MatType == MAT_FLESH or tr.MatType == MAT_ALIENFLESH or tr.MatType == MAT_ANTLION or tr.MatType == MAT_BLOODYFLESH then
                local fx = EffectData()
                fx:SetOrigin(tr.HitPos)

                util.Effect("BloodImpact", fx)
            end
        else
            self:MyEmitSound(self.MeleeMissSound, 75, 100, 1, CHAN_USER_BASE + 3)
        end
    end

    if SERVER and IsValid(tr.Entity) and (tr.Entity:IsNPC() or tr.Entity:IsPlayer() or tr.Entity:Health() > 0) then
        local dmginfo = DamageInfo()

        local attacker = self:GetOwner()
        if !IsValid(attacker) then attacker = self end
        dmginfo:SetAttacker(attacker)

        local relspeed = (tr.Entity:GetVelocity() - self:GetOwner():GetAbsVelocity()):Length()

        relspeed = relspeed / 225

        relspeed = math.Clamp(relspeed, 1, 1.5)

        dmginfo:SetInflictor(self)
        dmginfo:SetDamage(dmg * relspeed)
        dmginfo:SetDamageType(self:GetBuff_Override("Override_MeleeDamageType") or self.MeleeDamageType or DMG_CLUB)

        dmginfo:SetDamageForce(self:GetOwner():GetRight() * -4912 + self:GetOwner():GetForward() * 9989)

        SuppressHostEvents(NULL)
        tr.Entity:TakeDamageInfo(dmginfo)
        SuppressHostEvents(self:GetOwner())

        if tr.Entity:GetClass() == "func_breakable_surf" then
            tr.Entity:Fire("Shatter", "0.5 0.5 256")
        end

    end

    if SERVER and IsValid(tr.Entity) then
        local phys = tr.Entity:GetPhysicsObject()
        if IsValid(phys) then
            phys:ApplyForceOffset(self:GetOwner():GetAimVector() * 80 * phys:GetMass(), tr.HitPos)
        end
    end

    self:GetBuff_Hook("Hook_PostBash", {tr = tr, dmg = dmg})

    self:GetOwner():LagCompensation(false)
end
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_firemodes.lua:
function SWEP:ChangeFiremode(pred)
    pred = pred or true
    local fmt = self:GetBuff_Override("Override_Firemodes", self.Firemodes)
    fmt["BaseClass"] = nil

    local check = self:GetBuff_Hook("Hook_ChangeFiremode")
    if check then return end
    local count = table.Count(fmt)
    if count == 1 then return end
    if self:GetNextPrimaryFire() > CurTime() then return end
    if self:GetGrenadePrimed() then return end

    local fmi = self:GetFireMode()
    local lastfmi = fmi

    fmi = fmi + 1

    if fmi > count then
       fmi = 1
    end

    local altsafety = SERVER and (self:GetOwner():GetInfo("arccw_altsafety") == "1") or CLIENT and (ArcCW.ConVars["altsafety"]:GetBool())
    if altsafety and !self:GetOwner():KeyDown(IN_WALK) and fmt[fmi] and fmt[fmi].Mode == 0 then
        -- Skip safety when walk key is not down
        fmi = (fmi + 1 > count) and 1 or (fmi + 1)
    elseif altsafety and self:GetOwner():KeyDown(IN_WALK) then
        if fmt[lastfmi] and fmt[lastfmi].Mode == 0 then
            -- Find the first non-safety firemode
            local nonsafe_fmi = nil
            for i, fm in pairs(fmt) do
                if fm.Mode != 0 then nonsafe_fmi = i break end
            end
            fmi = nonsafe_fmi or fmi
        else
            -- Find the safety firemode
            local safety_fmi = nil
            for i, fm in pairs(fmt) do
                if fm.Mode == 0 then safety_fmi = i break end
            end
            fmi = safety_fmi or fmi
        end
    end

    if !fmt[fmi] then fmi = 1 end

    local a = tostring(lastfmi) .. "_to_" .. tostring(fmi)

    if !self.Animations[a] then a = "changefiremode" end

    if self.Animations[a] then
        self:PlayAnimationEZ(a, 1, true)
        local t = CurTime() + self:GetAnimKeyTime(a, true)
        self:SetPriorityAnim(t)
        self:SetNextPrimaryFire(t)
    end

    local old_inf = self:HasInfiniteAmmo()

    self:SetFireMode(fmi)
    --timer.Simple(0, function() self:RecalcAllBuffs() end)
    -- Absolutely, totally, completely ENSURE client has changed the value before attempting recalculation
    -- Waiting one tick will not work on dedicated servers
    local id = "ArcCW_RecalcWait_" .. self:EntIndex()
    timer.Create(id, 0.01, 0, function()
        if !IsValid(self) then timer.Remove(id) return end
        if self:GetFireMode() == fmi then
            self:RecalcAllBuffs()
            self:GetActiveElements(true)

            -- Timers solve everything!
            timer.Simple(0.01, function()
                if !IsValid(self) then return end
                self:AdjustAmmo(old_inf)
                if self:GetCurrentFiremode().RestoreAmmo then
                    -- No seriously, they really do
                    timer.Simple(0.01, function()
                        if !IsValid(self) then return end
                        self:RestoreAmmo()
                    end)
                end
            end)
            timer.Remove(id)
        end
    end)

    if lastfmi != fmi then
        local snd = self:GetBuff_Override("Override_FiremodeSound", self.FiremodeSound)
        if SERVER then
            if pred then
                SuppressHostEvents(self:GetOwner())
            end
            self:MyEmitSound(snd, 75, 100, 1, CHAN_ITEM + 2)
            if pred then
                SuppressHostEvents(NULL)
            end
        else
           self:MyEmitSound(snd, 75, 100, 1, CHAN_ITEM + 2)
        end
    end

    self:SetShouldHoldType()

    if self:GetCurrentFiremode().Mode == 0 or self:GetBuff_Hook("Hook_ShouldNotSight") then
        self:ExitSights()
    end
end

function SWEP:GetCurrentFiremode()
    local fmt = self:GetBuff_Override("Override_Firemodes", self.Firemodes)
    fmt.BaseClass = nil

    if self:GetFireMode() > table.Count(fmt) or self:GetFireMode() < 1 then
        self:SetFireMode(1)
    end

    fmt[self:GetFireMode()].BaseClass = nil
    return fmt[self:GetFireMode()]
end

function SWEP:GetFiremodeName()
    if self:GetBuff_Hook("Hook_FiremodeName") then return self:GetBuff_Hook("Hook_FiremodeName") end

    local abbrev = ArcCW.ConVars["hud_fcgabbrev"]:GetBool() and ".abbrev" or ""

    if self:GetInUBGL() then
        return self:GetBuff_Override("UBGL_PrintName") and self:GetBuff_Override("UBGL_PrintName") or ArcCW.GetTranslation("fcg.ubgl" .. abbrev)
    end

    local fm = self:GetCurrentFiremode()

    if fm.PrintName then
        local phrase = ArcCW.GetPhraseFromString(fm.PrintName)
        return phrase and ArcCW.GetTranslation(phrase .. abbrev) or ArcCW.TryTranslation(fm.PrintName)
    end

    local mode = fm.Mode
    if mode == 0 then return ArcCW.GetTranslation("fcg.safe" .. abbrev) end
    if mode == 1 then return ArcCW.GetTranslation("fcg.semi" .. abbrev) end
    if mode >= 2 then return ArcCW.GetTranslation("fcg.auto" .. abbrev) end
    if mode < 0 then return string.format(ArcCW.GetTranslation("fcg.burst" .. abbrev), tostring(-mode)) end
end

function SWEP:GetFiremodeBars()
    if self:GetBuff_Hook("Hook_FiremodeBars") then return self:GetBuff_Hook("Hook_FiremodeBars") end

    if self:GetInUBGL() then
        return "____-"
    end

    local fm = self:GetCurrentFiremode()

    if fm.CustomBars then return fm.CustomBars end

    local mode = fm.Mode

    if mode == 0 then return "_____" end
    if mode == 1 then return "-____" end
    if mode >= 2 then return "-----" end
    if mode == -2 then return "--___" end
    if mode == -3 then return "---__" end
    if mode == -4 then return "----_" end

    return "-----"
end
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_model.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_reload.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_rocket.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base_melee/shared.lua:
return gluapack()()
--lua/weapons/arccw_mw2_ak47.lua:
return gluapack()()
--lua/weapons/arccw_mw2_m4.lua:
return gluapack()()
--lua/weapons/arccw_mw2_ranger_long.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2 - Unofficial"
SWEP.AdminOnly = false
SWEP.CamAttachment = 3

SWEP.PrintName = "Ranger Lockpick"
SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = "Break action.\nUnofficial."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2_2/c_slog_long_ranger.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-8, 3, -4),
    ang = Angle(-10, 0, 180),
    scale = 1.125
}
SWEP.WorldModel = "models/weapons/w_shotgun.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 50
SWEP.DamageMin = 25
SWEP.Range = 800 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.RangeMin = 400 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 1
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 2 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 2
SWEP.ReducedClipSize = 2

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 4
SWEP.RecoilSide = 3

SWEP.Delay = 0.009 -- 60 / RPM.
SWEP.Num = 6 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 110 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 270 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 60 -- inaccuracy added by moving. Applies in sights as well! Walking speed is considered as "maximum".
SWEP.SightsDispersion = 0 -- dispersion that remains even in sights

SWEP.Primary.Ammo = "buckshot" -- what ammo type the gun uses

SWEP.ShootVol = 120 -- volume of shoot sound
SWEP.ShootPitch = 110 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/longranger.wav"
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/shot_ranger.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/shot_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_m3"
SWEP.ShellModel = "models/shells/shell_12gauge.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.8
SWEP.SightTime = 0.3

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.8, -1.8, 2.6),
    Ang = Angle(0, 0, 0),
    ViewModelFOV = 65 / 1.18,
    Magnification = 1.18,
}


SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "shotgun"
SWEP.HoldtypeSights = "ar2"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(5.479, -5, -1.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 14.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.ExtraSightDist = 5

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        WMBodygroups = {},
    },
}

SWEP.Attachments = {
	{
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "j_reload",
        Offset = {
            vpos = Vector(-2, 0, 1.9),
            vang = Angle(0, 0, 0),
            wang = Angle(-9.738, 0, 180)
        },
        ExcludeFlags = {"arcticfixyoshit1","cantuseshitinakimboyet"},
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "choke",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(23, 0, 1.44),
            vang = Angle(0, 0, 0),
            wpos = Vector(26.648, 0.782, -8.042),
            wang = Angle(-9.79, 0, 180)
        },
        ExcludeFlags = {"arcticfixyoshit1","cantuseshitinakimboyet"},
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "j_reload",
        Offset = {
            vpos = Vector(0, 0, -0.7),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-10.216, 0, 180)
        },
        SlideAmount = {
            vmin = Vector(-3, 0, -0.7),
            vmax = Vector(2, 0, -0.7),
        },
    ----MergeSlots = {7},
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(3, -1, 0.5),
            vang = Angle(0, 0, 90),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
		VMScale = Vector(1, 1, 1),
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_shotgun"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Akimbotest",
        DefaultAttName = "No LH",
        Slot = "akimbotest",
        Bone = "tag_view",
        Offset = {
            vpos = Vector(0, 0, 0),
            vang = Angle(0, 0, 0),
        },
        Hidden = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.5, -0.45, 0.75),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Hook_SelectReloadAnimation = function(wep, anim)
    if wep.Attachments[7].Installed then
        return anim .. "_akimbo_right"
    end
end
SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[7].Installed then
        return anim .. "_akimbo_right"
    end
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 100/30,
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 24/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["holster"] = {
        Source = "putaway",
        Time = 17/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["fire"] = {
        Source = "fire",
        Time = 12/30,
    },
    ["reload"] = {
        Source = "reload",
        SoundTable = {
                        {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_lift_v1.wav", 		t = 0.01},
                        {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_open_v1.wav", 		t = 7/30},
                        {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_clipout_v1.wav", 		t = 13/30},
                        {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_clip1in_v1.wav", 		t = 30/30},
                        {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_clip2in_v1.wav", 		t = 41/30},
                        {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_chamber_v1.wav", 		t = 63/30},
                    },
        MinProgress = 1.549,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.4,
        LHIKEaseOut = 0.3
    },
-- akimbo
    ["idle_akimbo_right"] = {
        Source = "idle_r",
        Time = 1/30,
    },
    ["enter_sprint_akimbo_right"] = {
        Source = "sprint_in_r",
        Time = 10/30
    },
    ["idle_sprint_akimbo_right"] = {
        Source = "sprint_loop_r",
        Time = 30/40
    },
    ["exit_sprint_akimbo_right"] = {
        Source = "sprint_out_r",
        Time = 10/30
    },
    ["draw_akimbo_right"] = {
        Source = "pullout_r",
        Time = 25/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["holster_akimbo_right"] = {
        Source = "putaway_r",
        Time = 25/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["fire_akimbo_right"] = {
        Source = "fire_r",
        Time = 12/30,
    },
    ["reload_akimbo_right"] = {
        Source = "reload_mp_r",
        Time = 120/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_lift_v1.wav", 		t = 0.01},
            {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_clipout_v1.wav", 		t = 12/30},
            {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_clip1in_v1.wav", 		t = 53/30},
            {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_clip2in_v1.wav", 		t = 70/30},
            {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_chamber_v1.wav", 		t = 106/30},
        },
		MinProgress = 1.549,
    },
}

 -- Super fucky temp!
 -- S H U T  U P    A N D   K E E P  T H E M   P I N N E D  D O W N  

-- notverycreativenowarewe
local nvcnaw = 7
local nvcnaw2 = 3.5

 -- hipfire
 -- maximum accuracy
    SWEP.Inaccuracy_Hip_Max_Stand	= nvcnaw
    SWEP.Inaccuracy_Hip_Max_Duck	= nvcnaw
    SWEP.Inaccuracy_Hip_Max_Prone	= nvcnaw
 -- minimum accuracy
    SWEP.Inaccuracy_Hip_Min_Stand   = nvcnaw2
    SWEP.Inaccuracy_Hip_Min_Duck    = nvcnaw2
    SWEP.Inaccuracy_Hip_Min_Prone   = nvcnaw2

 -- sighted fire
 -- yeah
    SWEP.Inaccuracy_ADS = 5.5

 -- inaccuracy when you're... i don't remember
SWEP.Inaccuracy_Add_ADS			= 0
SWEP.Inaccuracy_Add_Hip			= 0
SWEP.Inaccuracy_Add_Move		= 0.1
--lua/weapons/arccw_myt_uc_scar.lua:
return gluapack()()
--lua/weapons/arccw_uc_galil762.lua:
return gluapack()()
--lua/weapons/arccw_uc_galilsar.lua:
if !file.Exists("weapons/arccw_uc_galil.lua","LUA") then return end

include("weapons/arccw_uc_galil.lua")

SWEP.Category = "ArcCW - UC Presets"
SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "IDF Serpent"
SWEP.TrueName = "Galil SAR"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "uc_galil_barrel_short"
SWEP.Attachments[3].Installed = "uc_galil_handguard_polymer"

SWEP.Hook_NameChange = function(wep)
    if wep.Attachments[2].Installed ~= "uc_galil_barrel_short" then
        return GetConVar("arccw_truenames"):GetBool() and "Galil AR" or "IDF Defender"
    end
end
--lua/weapons/arccw_uc_scarssr.lua:
if !file.Exists("weapons/arccw_myt_uc_scar.lua","LUA") then return end

include("weapons/arccw_myt_uc_scar.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets DMRs"
end

SWEP.PrintName = "Lancierie 24"
SWEP.TrueName = "SCAR-SSR"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[1].Installed = "uc_optic_trijicon_tars"
SWEP.Attachments[2].Installed = "uc_myt_scar_hg_20"
SWEP.Attachments[7].Installed = "uc_myt_scar_stock_ssr"
SWEP.Attachments[8].Installed = "uc_myt_scar_cal_ssr"
--lua/weapons/arccw_uc_usp.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "5Urban One-offs"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_pistol"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
SWEP.ShellScale = 1
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_9mm"
SWEP.ShellPitch = 90

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 5
SWEP.TracerNum = 1
SWEP.TracerWidth = 1
SWEP.ShootPitch = 100

-- Fake name --

SWEP.PrintName = "P93"

-- True name --

SWEP.TrueName = "USP Tactical"

-- Trivia --

SWEP.Trivia_Class = "Pistol"
SWEP.Trivia_Desc = [[Versatile handgun designed for foreign and domestic law enforcement. It discards the ambitions of the P7 pattern for a more conventional form which has proved popular. This "Tactical" variant has a threaded barrel designed for sound suppressors.

Can be chambered for a variety of calibers, allowing its trademark performance to be fine-tuned for a number of roles.]]
SWEP.Trivia_Manufacturer = "Crowdley & Nelson"
SWEP.Trivia_Calibre = ".45 ACP"
SWEP.Trivia_Mechanism = "Short Recoil"
SWEP.Trivia_Country = "Germany"
SWEP.Trivia_Year = 1993

-- Weapon slot --

SWEP.Slot = 1

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Heckler & Koch"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_uc_usp.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_uc_usp.mdl"
SWEP.ViewModelFOV = 66
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER

-- Damage parameters --

SWEP.Damage = 45 -- 3 shot short range kill (2 shot chest point-blank)
SWEP.DamageMin = 15 -- 7 shot long range kill
SWEP.RangeMin = 10
SWEP.Range = 80 -- 3 shot until ~40m
SWEP.Penetration = 9
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 315
SWEP.PhysBulletMuzzleVelocity = 315

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

SWEP.PhysTracerProfile = 7
SWEP.TracerNum = 0

-- Jamming --

--SWEP.Malfunction = true
SWEP.MalfunctionJam = true
--SWEP.MalfunctionMean = 21
SWEP.MalfunctionPostFire = false
SWEP.MalfunctionTakeRound = true

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 12

-- Recoil --

SWEP.Recoil = 1.25
SWEP.RecoilSide = 0.75

SWEP.RecoilRise = 0.25
SWEP.VisualRecoilMult = 1.0
SWEP.MaxRecoilBlowback = .5
SWEP.MaxRecoilPunch = .8

SWEP.Sway = 1

-- Firerate / Firemodes --

SWEP.Delay = 60 / 420
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_pistol"
SWEP.NPCWeight = 70

-- Accuracy --

SWEP.AccuracyMOA = 5
SWEP.HipDispersion = 500
SWEP.MoveDispersion = 250
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "pistol"
SWEP.MagID = "m1911"

-- Speed multipliers --

SWEP.SpeedMult = 0.965
SWEP.SightedSpeedMult = 0.875
SWEP.SightTime = 0.25
SWEP.ShootSpeedMult = 1

-- Length --

SWEP.BarrelLength = 8
SWEP.ExtraSightDist = 7

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.3, 3, 1.6)
SWEP.HolsterAng = Angle(-14, 0, -0.5)

SWEP.SprintPos = Vector(0.3, 3, 1)
SWEP.SprintAng = Angle(-5, 15, -20)

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "pistol"
SWEP.HoldtypeSights = "revolver"

SWEP.IronSightStruct = {
     Pos = Vector(-2.29, 10, 1.5),
     Ang = Angle(0.15, 0.07, 5.5),
     Magnification = 1,
     SwitchToSound = "",
}

SWEP.ActivePos = Vector(0.3, 3, 1.3)
SWEP.ActiveAng = Angle(0, 0, -0.5)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, 0, 0)
SWEP.CrouchAng = Angle(0, 0, -8)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-8.7, 2.5, -4.2),
    ang        =    Angle(-6, -6, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
}

-- Weapon sounds --

local path = ")weapons/arccw_uc_usp/"
local path1 = ")weapons/arccw_ur/1911/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/45acp/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-45acp-pistol-ext-01.ogg",
    tail .. "fire-dist-45acp-pistol-ext-02.ogg",
    tail .. "fire-dist-45acp-pistol-ext-03.ogg",
    tail .. "fire-dist-45acp-pistol-ext-04.ogg",
    tail .. "fire-dist-45acp-pistol-ext-05.ogg",
    tail .. "fire-dist-45acp-pistol-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-pistol-01.ogg",
    common .. "fire-dist-int-pistol-02.ogg",
    common .. "fire-dist-int-pistol-03.ogg",
    common .. "fire-dist-int-pistol-04.ogg",
    common .. "fire-dist-int-pistol-05.ogg",
    common .. "fire-dist-int-pistol-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [1] = "Bullet1",    [2] = "Bullet2",    [3] = "Bullet3", [4] = "Bullet4",    [5] = "Bullet5",    [6] = "Bullet6", [7] = "Bullet7"
}

SWEP.DefaultBodygroups = "000000000"

SWEP.AttachmentElements = {
    ["pistol_rail"] = {
        VMBodygroups = {
            {ind = 4,bg = 1},
        }
    },
    ["uc_usp_sight"] = {
        VMBodygroups = {
            {ind = 4, bg = 2},
            {ind = 5, bg = 1},
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.29, 10, 1.4),
            Ang = Angle(0.2, 0.05, 5.5),
            Magnification = 1,
        }
    },
    ["uc_usp_slide_compact"] = {
        VMBodygroups = {
            {ind = 0, bg = 1},
            {ind = 1, bg = 1},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -1.46, 4),
                vang = Angle(90, 0, -90),
            }
        },
        NameChange = "CP93",
        TrueNameChange = "USPCT",
    },
    ["uc_usp_slide_ext"] = {
        VMBodygroups = {
            {ind = 1,bg = 4},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -1.46, 5.25),
                vang = Angle(90, 0, -90),
            }
        },
        NameChange = "LP93",
        TrueNameChange = "USP Elite",
    },
    ["uc_usp_slide_match"] = {
        VMBodygroups = {
            {ind = 1,bg = 2},
            {ind = 3,bg = 1},
        },
        NameChange = "P93 Match",
        TrueNameChange = "USP Match",
    },
    ["uc_usp_slide_cs"] = {
        VMBodygroups = {
            {ind = 1,bg = 3},
        },
        NameChange = "K&M .45",
        TrueNameChange = "USP Agency",
    },
    ["uc_usp_mag_ext"] = {
        VMBodygroups = {
            {ind = 2,bg = 1},
        }
    },
    ["uc_usp_skin_nickel"] = {
        VMSkin = 1
    },
    ["uc_usp_skin_blued"] = {
        VMSkin = 2,
        VMBodygroups = {
            --{ind = 1,bg = 3},
        },
    },

    -- HL2 easter egg
    
    ["uc_tp_gong"] = {
        Override_ActivePos = Vector(1, 5, .75),
        Override_ActiveAng = Angle(-2, -2, 0),
        RequireFlags = {"usp_freeman_1","usp_freeman_2"}, -- Dress for the job you're looking for
        --NameChange = "9MM PISTOL"
    },
    
}

local altsight = {
    uc_usp_slide_ext = 3,
    uc_usp_slide_compact = 2,
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    if !IsValid(vm) then return end

    if wep.Attachments[1].Installed == "uc_usp_sight" then
        vm:SetBodygroup(5, altsight[wep.Attachments[2].Installed] or 1)
    end
end

-- Animations --

local mech = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}

SWEP.Animations = {
    ["idle_empty"] = {
        Source = "idle_empty",
        Time = 10 / 30,
    },
    ["idle"] = {
        Source = "idle",
        Time = 10 / 30,
    },
    ["idle_jammed"] = {
        Source = "idle_jam",
        Time = 10 / 30,
    },
    ["ready"] = {
        Source = "fix",
        Time = 1.6,
        MinProgress = 1.2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        ShellEjectAt = false,
        ProcDraw = true,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            {s = path .. "draw.ogg", t = 0},
            { s = path .. "slidepull.ogg",t = 28 / 60},
            { s = path .. "slidedrop1.ogg",t = 35 / 60},
        },
    },
    ["draw"] = {
        Source = "draw",
        Time = .75,
        MinProgress = .4,
        SoundTable = {
            {s = path .. "draw.ogg", t = 0}, -- Not Temporary
            --{s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = .75,
        MinProgress = .4,
        SoundTable = {
            {s = path .. "draw.ogg", t = 0}, -- Not Temporary
            --{s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["draw_jam"] = {
        Source = "draw_jam",
        Time = .75,
        MinProgress = .4,
        SoundTable = {
            {s = path .. "draw.ogg", t = 0}, -- Not Temporary
            --{s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["holster"] = {
        Source = "holster",
        Time = .75,
        SoundTable = {
            {s = common .. "cloth_2.ogg", t = 0},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = .75,
        SoundTable = {
            {s = common .. "cloth_2.ogg", t = 0},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },
    ["holster_jam"] = {
        Source = "holster_jam",
        Time = 18 / 30,
        SoundTable = {
            {s = common .. "cloth_2.ogg", t = 0},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },

    ["fire"] = {
        Source = "fire",
        Time = 30 / 30,
        ShellEjectAt = 0,
        SoundTable = {
            { s = mech, t = 0, v = 0.25 }
        },
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 30 / 30,
        ShellEjectAt = 0,
        SoundTable = {
            {s = common .. "common_mech_light.ogg", t = 0},
            { s = mech, t = 0 }
        },
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 24 / 30,
        ShellEjectAt = 0,
        SoundTable = {{ s = path .. "mech_last.ogg", t = 0 }},
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 24 / 30,
        ShellEjectAt = 0,
        SoundTable = {{ s = path .. "mech_last.ogg", t = 0 }},
    },
    ["fire_jammed"] = {
        Source = "fire_jam",
        Time = 30 / 30,
        MinProgress = 0.5,
        ShellEjectAt = false,
        SoundTable = {
            --{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }
        },
    },

    ["fire_stock"] = {
        Source = "fire_stock",
        Time = 30 / 30,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_empty_stock"] = {
        Source = "fire_empty_stock",
        Time = 24 / 30,
        ShellEjectAt = 0,
        SoundTable = {{ s = path .. "mech_last.ogg", t = 0 }},
    },

    ["fire_match"] = {
        Source = "fire_match",
        Time = 30 / 30,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron_match"] = {
        Source = "fire_match",
        Time = 30 / 30,
        ShellEjectAt = 0,
        SoundTable = {
            {s = common .. "common_mech_light.ogg", t = 0},
            { s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }
        },
    },
    ["fire_empty_match"] = {
        Source = "fire_empty_match",
        Time = 24 / 30,
        ShellEjectAt = 0,
        SoundTable = {{ s = path .. "mech_last.ogg", t = 0 }},
    },
    ["fire_iron_empty_match"] = {
        Source = "fire_empty_match",
        Time = 24 / 30,
        ShellEjectAt = 0,
        SoundTable = {{ s = path .. "mech_last.ogg", t = 0 }},
    },

    -- 12-R Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.3525,
        Time = 65 / 30,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.62,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = common .. "magpouch_pull_small.ogg", t = 1 / 60 },
            { s = common .. "magrelease.ogg", t = 10 / 60 },
            { s = rottle, t = 11 / 60 },
            { s = path .. "magout1.ogg", t = 26 / 60 },
            { s = path .. "magin1.ogg", t = 42 / 60 },
            { s = rottle, t = 55 / 60 },
            { s = common ..  "magpouch_replace_small.ogg", t = 80 / 60 },
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.75,
        Time = 75 / 30,
        LastClip1OutTime = 0.76,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.55,
        LHIKOut = 0.7,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = common .. "magrelease.ogg", t = 7 / 60 },
            { s = path .. "magout1.ogg", t = 16 / 60 },
            { s = rottle, t = 10 / 60 },
            { s = common .. "magpouch_pull_small.ogg", t = 29 / 60 },
            { s = common .. "pistol_magdrop.ogg", t = 40 / 60 },
            { s = rottle, t = 55 / 60 },
            { s = path .. "magin1.ogg", t = 64 / 60 },
            { s = rottle, t = 90 / 60 },
            { s = path .. "slidedrop1.ogg", t = 94 / 60 },
        },
    },

    -- 17-R Reloads --

    ["reload_ext"] = {
        Source = "reload_ext",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.3525,
        Time = 65 / 30,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.62,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = common .. "magpouch_pull_small.ogg", t = 0 / 60 },
            { s = common .. "magrelease.ogg", t = 10 / 60 },
            { s = path .. "magout1.ogg", t = 26 / 60 },
            { s = rottle, t = 10 / 60 },
            { s = rottle, t = 55 / 60 },
            { s = common ..  "magpouch_replace_small.ogg", t = 80 / 60 },
            { s = path .. "magin1.ogg", t = 42 / 60 },
        },
    },
    ["reload_empty_ext"] = {
        Source = "reload_empty_ext",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.75,
        Time = 75 / 30,
        LastClip1OutTime = 0.76,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.55,
        LHIKOut = 0.7,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = common .. "magrelease.ogg", t = 7 / 60 },
            { s = path .. "magout1.ogg", t = 16 / 60 },
            { s = rottle, t = 10 / 60 },
            { s = common .. "magpouch_pull_small.ogg", t = 29 / 60 },
            { s = common .. "pistol_magdrop.ogg", t = 40 / 60 },
            { s = rottle, t = 55 / 60 },
            { s = path .. "magin1.ogg", t = 64 / 60 },
            { s = rottle, t = 90 / 60 },
            { s = path .. "slidedrop1.ogg", t = 94 / 60 },
        },
    },

 -- Jam Animations --

    ["fix"] = {
        Source = "fix",
        --Time = 40 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        ShellEjectAt = 30 / 60,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = path .. "slidepull.ogg",t = 28 / 60},
            { s = path .. "slidedrop1.ogg",t = 35 / 60},
        },
    },

    ["fix_empty"] = {
        Source = "fix_empty",
        --Time = 40 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        ShellEjectAt = 30 / 60,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = path .. "slidepull.ogg",t = 28 / 60},
        },
    },

    ["idle_jam"] = {
        Source = "idle_jam",
        -- time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
       -- SoundTable = {
        -- },
    },




    -- -- Inspecc --

    ["enter_inspect"] = {
        Source = "enter_inspect",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-pistol-04.ogg", t = 0},
        },
    },
    ["idle_inspect"] = {
        Source = "idle_inspect",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect"] = {
        Source = "exit_inspect",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            {s = rottle, t = 0.05},
            {s = common .. "movement-pistol-03.ogg", t = 0.1},
            {s = common .. "movement-pistol-01.ogg", t = 1},
            {s = rottle, t = 1},
        },
    },

    ["enter_inspect_empty"] = {
        Source = "enter_inspect_empty",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-pistol-04.ogg", t = 0},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "idle_inspect_empty",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty"] = {
        Source = "exit_inspect_empty",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            {s = rottle, t = 0.05},
            {s = common .. "movement-pistol-03.ogg", t = 0.1},
            {s = common .. "movement-pistol-01.ogg", t = 1},
            {s = rottle, t = 1},
        },
    },
    ["enter_inspect_jammed"] = {
        Source = "enter_inspect_jam",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-pistol-04.ogg", t = 0},
        },
    },
    ["idle_inspect_jammed"] = {
        Source = "idle_inspect_jam",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_jammed"] = {
        Source = "exit_inspect_jam",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            {s = rottle, t = 0.05},
            {s = common .. "movement-pistol-03.ogg", t = 0.1},
            {s = common .. "movement-pistol-01.ogg", t = 1},
            {s = rottle, t = 1},
        },
    },
}

-- ADS animation blending, thanks fesiug --

SWEP.Hook_Think = ArcCW.UC.ADSReload

SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[7].Installed and (anim == "fire" or anim == "fire_empty") then
        return anim .. "_stock"
    end
end

-- Attachments --

SWEP.RejectAttachments = {
    --["uc_tp_gong"] = true
}

SWEP.Attachments = {
    {
        PrintName = "Optic",
        Slot = {"optic_lp", "uc_usp_sight"},
        DefaultAttName = "Iron Sights",
        Bone = "vm_charge",
        Offset = {
            vpos = Vector(-0.01, -.6, -.3),
            vang = Angle(90, 0, -90),
        },
        VMScale = Vector(.8,.8,.8),
        WMScale = VMScale,
        InstalledEles = {"pistol_rail"},
    },
    {
        PrintName = "Slide",
        Slot = {"uc_usp_slide"},
        DefaultAttIcon = Material("entities/att/acwatt_uc_usp_slide_default.png","mips smooth"),
        DefaultAttName = "5\" Tactical Slide",
    },
    {
        PrintName = "Caliber",
        Slot = {"uc_usp_caliber"},
        DefaultAttIcon = Material("entities/att/uc_bullets/45acp.png","mips smooth"),
        DefaultAttName = ".45 ACP",
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(3.07, -3.8, -27),
            vang = Angle(90, 0, -90),
        },
        -- DefaultFlags = {"cal_subsonic"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(0, -1.46, 4.6),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"usp_match"},
    },
    {
        PrintName = "Tactical",
        InstalledEles = {"tac_rail"},
        Slot = {"tac_pistol"},
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(0, -.4, 3.85),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"usp_match"},
    },
    {
        PrintName = "Magazine",
        Slot = {"uc_usp_mag"},
        DefaultAttIcon = Material("entities/att/acwatt_uc_usp_mag_default.png","mips smooth"),
        DefaultAttName = "12-Round Mag",
    },
    {
        PrintName = "Stock",
        Slot = {"uc_stock", "go_stock_pistol_bt"},
        VMScale = Vector(1.1, 1.1, 1.1),
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(-0.05, 2.7, -3),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = {"uc_tp"},
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "uc_usp_tp"},
        FreeSlot = true,
        Bone = "vm_charge",
        Offset = {
            vpos = Vector(0.42, 0.8, 4.6),
            vang = Angle(90, 0, -90),
        },
        VMScale = Vector(.75,.75,.75),
    },
    {
        PrintName = "Finish",
        Slot = {"uc_usp_skin"},
        DefaultAttName = "Black",
        DefaultAttIcon = Material("entities/att/acwatt_uc_usp_skin_default.png","mips smooth"),
        FreeSlot = true,
    },
}

--lua/weapons/arccw_uc_usp.lua:
return gluapack()()
--lua/weapons/arccw_ud_adar.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_m16.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "RAYCAR-1NG" -- RUCAR 255
SWEP.TrueName = "ADAR 2-15"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[1].Installed = "ud_m16_rs"
SWEP.Attachments[2].Installed = "ud_m16_barrel_14in"
SWEP.Attachments[3].Installed = "ud_m16_hg_adar"
SWEP.Attachments[6].Installed = "ud_m16_receiver_semi"
SWEP.Attachments[10].Installed = "ud_m16_stock_adar"
SWEP.Attachments[11].Installed = "ud_m16_mag_20"
--lua/weapons/arccw_ud_m16.lua:
return gluapack()()
--lua/weapons/arccw_ud_g24.lua:
return gluapack()()
--lua/weapons/arccw_ud_g26.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_glock.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Pistols"
end

SWEP.PrintName = "GEN3K"
SWEP.TrueName = "Glock 26"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ud_glock_slide_subcompact"
SWEP.Attachments[3].Installed = "ud_glock_frame_subcompact"
SWEP.Attachments[8].Installed = "ud_glock_mag_10" -- There's still a hidden slot
--lua/weapons/arccw_ud_glock.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
SWEP.ShellScale = 1
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_9mm"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.PistolShellSoundsTable

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "GEN3"

-- True name --

SWEP.TrueName = "Glock 17"

-- Trivia --

SWEP.Trivia_Class = "Pistol"
SWEP.Trivia_Desc = [[Handgun originally designed by a curtain rod manufacturer for the Austrian military. Its reliable and cost-effective polymer design has since made it one of the most popular and widely used pistols in the world, common in military, police and civilian use alike.

Great backup weapon due to its quick draw and sight times, but a relatively low damage output makes it a less than ideal primary.]]
SWEP.Trivia_Manufacturer = "Next Generation Weapons Inc."
SWEP.Trivia_Calibre = "9x19mm Parabellum"
SWEP.Trivia_Mechanism = "Short Recoil"
SWEP.Trivia_Country = "Austria"
SWEP.Trivia_Year = 1982

-- Weapon slot --

SWEP.Slot = 1

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Glock Ges.m.b.H."
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_glock.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_glock.mdl"
SWEP.ViewModelFOV = 60
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["9mm"].max -- 4 shot close range kill (3 on chest)
SWEP.DamageMin = ArcCW.UC.StdDmg["9mm"].min -- 5 shot long range kill
SWEP.Penetration = ArcCW.UC.StdDmg["9mm"].pen

SWEP.RangeMin = 15
SWEP.Range = 50 -- 4 shot until ~35m
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 375
SWEP.PhysBulletMuzzleVelocity = 375

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 17
SWEP.ExtendedClipSize = 33
SWEP.ReducedClipSize = 10

-- Recoil --

SWEP.Recoil = 1.0
SWEP.RecoilSide = 0.5

SWEP.RecoilRise = 0.24
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 0.5
SWEP.MaxRecoilPunch = 0.6

SWEP.Sway = 1

-- Firerate / Firemodes --

SWEP.Delay = 60 / 525
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        PrintName = "fcg.safe2",
        Mode = 0,
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_pistol"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 7
SWEP.HipDispersion = 500
SWEP.MoveDispersion = 250
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "pistol"
SWEP.MagID = "glock"

SWEP.HeatCapacity = 50
SWEP.HeatDissipation = 20
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 150
SWEP.MalfunctionTakeRound = false

-- Speed multipliers --

SWEP.SpeedMult = 0.975
SWEP.SightedSpeedMult = 0.9
SWEP.SightTime = 0.25
SWEP.ShootSpeedMult = 1

-- Length --

SWEP.BarrelLength = 8
SWEP.ExtraSightDist = 10

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(-0.5, -2, -1)
SWEP.HolsterAng = Angle(3.5, 7, -20)

SWEP.HolsterPos = Vector(-1, -2, 3)
SWEP.HolsterAng = Angle(-15.5, 2, -7)

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "pistol"
SWEP.HoldtypeSights = "revolver"

SWEP.IronSightStruct = {
     Pos = Vector(-2.3, 1, 2.52),
     Ang = Angle(0.3, 0, 0),
     Magnification = 1,
     ViewModelFOV = 55,
     SwitchToSound = ratel, -- sound that plays when switching to this sight
     SwitchFromSound = ratel
}

SWEP.ActivePos = Vector(-0.2, -2, 2)
SWEP.ActiveAng = Angle(0, 0, -5)

SWEP.CustomizePos = Vector(7, -2, -2)
SWEP.CustomizeAng = Angle(15, 25, 0)

SWEP.CrouchPos = Vector(-2, -6, 1)
SWEP.CrouchAng = Angle(0, 0, -20)

SWEP.BarrelOffsetHip = Vector(3.5, 0, -3)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-10.5, 3.5, -4.8),
    ang        =    Angle(-6, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
}

-- Firing sounds --

local path = ")weapons/arccw_ud/glock/"
local path1 = ")weapons/arccw_ud/uzi/"
local common = ")/arccw_uc/common/"
SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}

SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/9x19/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-9x19-pistol-ext-01.ogg",
    tail .. "fire-dist-9x19-pistol-ext-02.ogg",
    tail .. "fire-dist-9x19-pistol-ext-03.ogg",
    tail .. "fire-dist-9x19-pistol-ext-04.ogg",
    tail .. "fire-dist-9x19-pistol-ext-05.ogg",
    tail .. "fire-dist-9x19-pistol-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-pistol-01.ogg",
    common .. "fire-dist-int-pistol-02.ogg",
    common .. "fire-dist-int-pistol-03.ogg",
    common .. "fire-dist-int-pistol-04.ogg",
    common .. "fire-dist-int-pistol-05.ogg",
    common .. "fire-dist-int-pistol-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg",
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [2] = "glock_bullet1"
}

SWEP.AttachmentElements = {
    ["ud_glock_skin_tan"] = {
        VMSkin = 1,
    },
    ["ud_glock_skin_olive"] = {
        VMSkin = 2,
    },
    ["ud_glock_skin_custom"] = {
        VMSkin = 3,
    },
    ["ud_glock_mag_10"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        AttPosMods = {
            [8] = {
            vpos = Vector(0.1, 1, -1.2),
                vang = Angle(90, 0, -90),
            }
        }
    },
    ["ud_glock_frame_subcompact"] = {
        VMBodygroups = {{ind = 0, bg = 2}},
    },
    ["ud_glock_frame_flared"] = {
        VMBodygroups = {{ind = 0, bg = 1}},
    },
    ["ud_glock_mag_33"] = {
        VMBodygroups = {{ind = 1, bg = 2}},
    },
    ["ud_glock_mag_100"] = {
        VMBodygroups = {{ind = 1, bg = 3}},
    },

    ["ud_glock_rail_optic"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["ud_glock_slide_comp"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
        NameChange = "GEN3 Custom",
        TrueNameChange = "Glock 17 Custom",
        Override_IronSightStruct = {
            Pos = Vector(-2.283, 0, 2.506),
            Ang = Angle(0.58, 0, 0),
            Magnification = 1,
        }
    },
    ["ud_glock_slide_lb"] = {
        VMBodygroups = {{ind = 3, bg = 2}},
        NameChange = "GEN3 Extended",
        TrueNameChange = "Glock 17L",
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 0, 1.5),
                vang = Angle(90, 0, -90),
            }
        }
    },
    ["ud_glock_slide_auto"] = {
        VMBodygroups = {{ind = 3, bg = 3}},
        NameChange = "GEN3 Auto",
        TrueNameChange = "Glock 18C",
    },
    ["ud_glock_slide_subcompact"] = {
        VMBodygroups = {{ind = 3, bg = 8}},
        NameChange = "GEN3K",
        TrueNameChange = "Glock 26",
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 0, -0.5),
                vang = Angle(90, 0, -90),
            }
        }
    },
    ["ud_glock_slide_cs"] = {
        VMBodygroups = {{ind = 3, bg = 6}},
        NameChange = "GEN3 CS",
        TrueNameChange = "Glock 18CS",
    },
    ["ud_glock_slide_carbine"] = {
        VMBodygroups = {{ind = 3, bg = 4}},
        NameChange = "GEN3 Euro Carbine",
        TrueNameChange = "Glock 17XXXL",
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 0, 11.2),
                vang = Angle(90, 0, -90),
            }
        }
    },
    ["ud_glock_slide_sd"] = {
        VMBodygroups = {{ind = 3, bg = 5}},
        NameChange = "GEN3 Silent Mistress",
        TrueNameChange = "Glock 17SD",
        GivesFlags = {"sd"},
        AttPosMods = {
            [6] = {
                vpos = Vector(0, 0.1, 5),
                vang = Angle(90, 0, -90),
            },
            [7] = {
                vpos = Vector(0, 0.1, 5),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["ud_glock_slide_nytesyte"] = {
        VMBodygroups = {{ind = 3, bg = 7}},
        NameChange = "GEN3 Homeboy",
        TrueNameChange = "Glock 17 NyteSyte",
        AttPosMods = {
            [1] = {
                vpos = Vector(-0.5, 0.05, -0.5),
                vang = Angle(90, 0, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-3.057, 0, 3.397),
            Ang = Angle(0, 0, -90),
            Magnification = 1,
        }
    },
}

local desg_barr = {
    ["ud_glock_slide_auto"] = 1,
    ["ud_glock_slide_lb"] = 2,
    ["ud_glock_slide_carbine"] = 3,
    ["ud_glock_slide_comp"] = 4,
    ["ud_glock_slide_cs"] = 5,
    ["ud_glock_slide_sd"] = 6,
    ["ud_glock_slide_nytesyte"] = 7,
    ["ud_glock_slide_subcompact"] = 8,
}
local desg_cal = {
    ["ud_glock_caliber_40sw"] = 1,
    ["ud_glock_caliber_357sig"] = 2,
    ["ud_glock_caliber_10auto"] = 3,
    ["ud_glock_caliber_45acp"] = 4,
    ["ud_glock_caliber_22lr"] = 5,
    ["ud_glock_caliber_380acp"] = 6,
    ["ud_glock_caliber_460"] = 7,
    ["ud_glock_caliber_50gi"] = 8,
}

SWEP.Hook_NameChange = function(wep,name)
    barrel = desg_barr[wep.Attachments[2].Installed] or 0
    caliber = desg_cal[wep.Attachments[4].Installed] or 0
    trueNames = GetConVar("arccw_truenames"):GetBool()

    start = ""
    mid = ""
    suffix = ""

    if trueNames then
        start = "Glock "

        if caliber == 0 then
            if barrel == 1 then
                mid = "18C"
            elseif barrel == 2 then
                mid = "17L"
            elseif barrel == 5 then
                mid = "18"
            elseif barrel == 8 then
                mid = "26"
            else
                mid = "17"
            end
        else
            if caliber == 1 then
                if barrel == 2 then
                    mid = "24"
                elseif barrel == 8 then
                    mid = "27"
                else
                    mid = "22"
                end
            elseif caliber == 2 then
                if barrel == 8 then
                    mid = "33"
                else
                    mid = "31"
                end
            elseif caliber == 3 then
                if barrel == 2 then
                    mid = "40"
                elseif barrel == 8 then
                    mid = "29"
                else
                    mid = "20"
                end
            elseif caliber == 4 then
                if barrel == 8 then
                    mid = "30"
                else
                    mid = "21"
                end
            elseif caliber == 5 then
                mid = "44"
            elseif caliber == 6 then
                if barrel == 8 then
                    mid = "28"
                else
                    mid = "25"
                end
            elseif caliber == 7 then
                if barrel == 8 then
                    mid = "30"
                else
                    mid = "21"
                end
            elseif caliber == 8 then
                if barrel == 8 then
                    mid = "30"
                else
                    mid = "21"
                end
            end
        end
    else
        start = "GEN"

        if caliber == 0 then
            mid = "3"
        elseif caliber == 1 then
            mid = "5"
        elseif caliber == 2 then
            mid = "6"
        elseif caliber == 3 then
            mid = "8"
        elseif caliber == 4 then
            mid = "11"
        elseif caliber == 5 then
            mid = "22"
        elseif caliber == 6 then
            mid = "15"
        end

        if barrel == 2 then
            suffix = "L"
        elseif barrel == 8 then
            suffix = "K"
        end
    end

    if barrel == 1 and (caliber ~= 0 or !trueNames) then
        suffix = " Auto"
    elseif barrel == 2 and !trueNames then
        suffix = "L"
    elseif barrel == 3 then
        if trueNames then
            suffix = "XXXL"
        else
            suffix = " Euro Carbine"
        end
    elseif barrel == 4 then
        suffix = " Custom"
    elseif barrel == 5 then
        suffix = "CS"
    elseif barrel == 6 then
        if trueNames then
            suffix = " Hush Puppy"
        else
            suffix = " Silent Mistress"
        end
    elseif barrel == 7 then
        if trueNames then
            suffix = " NyteSyte"
        else
            suffix = " Homeboy"
        end
    end

    -- Todo: Subcompact variants when the barrel variant comes out
    return start .. mid .. suffix
end

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

-- CHAN_ITEM doesn't sound too right
local ci = CHAN_AUTO
local ratel = {path .. "pistol_rattle_1.ogg", path .. "pistol_rattle_2.ogg", path .. "pistol_rattle_3.ogg"}
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}

SWEP.Animations = {
    ["ready"] = {
        Source = "fix_100",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "draw.ogg", t = 0}, -- Not Temporary
            {s = common .. "raise.ogg", t = 0.05},
            {s = ratel, t = 0},
            {s = path .. "slide_pull_new.ogg",  t = 0.4, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.4, c = ci},
            {s = path .. "slide_rel_new.ogg",        t = 0.6, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = {
            {s = path .. "draw.ogg", t = 0}, -- Not Temporary
            {s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 12 / 30,
        SoundTable = {
            {s = path .. "draw.ogg", t = 0}, -- Not Temporary
            {s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0,
        LHIKOut = 0,
        SoundTable = {
            {s = common .. "cloth_2.ogg", t = 0},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 12 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0,
        LHIKOut = 0,
        SoundTable = {
            {s = common .. "cloth_2.ogg", t = 0},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },
    ["fire"] = {
        Source = "fire",
        Time = 16 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.5 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 16 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 16 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Not Temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 16 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Not Temporary
        },
    },
    ["fire_stock"] = {
        Source = "fire_stock",
        Time = 16 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0.03 }},
    },
    ["fire_empty_stock"] = {
        Source = "fire_empty_stock",
        Time = 16 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0, c = ci}, -- Not Temporary
        },
    },
    ["fire_cycle"] = {
        Source = "fire_cycle",
        Time = 16 / 30,
    },

    ["fix"] = {
        Source = "fix",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "magtap.ogg",    t = 0.18, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
            {s = path .. "slide_rel_new.ogg",        t = 0.7, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_empty"] = {
        Source = "fix_empty",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "magtap.ogg",    t = 0.18, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_10"] = {
        Source = "fix_10",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "magtap.ogg",    t = 0.18, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
            {s = path .. "slide_rel_new.ogg",        t = 0.7, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_empty_10"] = {
        Source = "fix_empty_10",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "magtap.ogg",    t = 0.18, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_33"] = {
        Source = "fix_33",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "magtap.ogg",    t = 0.18, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
            {s = path .. "slide_rel_new.ogg",        t = 0.7, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_empty_33"] = {
        Source = "fix_empty_33",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "magtap.ogg",    t = 0.18, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_100"] = {
        Source = "fix_100",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "slide_pull_new.ogg",  t = 0.4, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.4, c = ci},
            {s = path .. "slide_rel_new.ogg",        t = 0.6, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_empty_100"] = {
        Source = "cycle_empty",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },

    ["cycle"] = {
        Source = "cycle",
        Time = 32 / 30,
        ShellEjectAt = 0.4,
        SoundTable = {
            {s = rottle, t = 0, v = 50},
            {s = path .. "slide_pull_new.ogg",  t = 0.3, c = ci, v = 50},
            {s = path .. "sliderel_deact.ogg",  t = 0.3, c = ci, v = 50},
            {s = path .. "slide_rel_new.ogg",        t = 0.55, c = ci, v = 50},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["cycle_empty"] = {
        Source = "cycle_empty",
        Time = 32 / 30,
        ShellEjectAt = 0.4,
        SoundTable = {
            {s = rottle, t = 0, v = 50},
            {s = path .. "slide_pull_new.ogg",  t = 0.3, c = ci, v = 50},
            {s = path .. "sliderel_deact.ogg",  t = 0.3, c = ci, v = 50},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },

    -- 17 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 56 / 30,
        MinProgress = 1.1,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch_pull_small.ogg", t = 0.075},
            {s = ratel, t = 0.3},
            {s = path .. "magout_partial.ogg",        t = 0.35, c = ci},
            {s = ratel, t = 0.4},
            {s = path .. "magin_new.ogg",         t = 0.45, c = ci},
            {s = rottle, t = 0.6},
            {s = common .. "magpouch_replace_small.ogg", t = 1.25},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 65 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "magout_empty.ogg",        t = 0.13, c = ci},
            {s = common .. "magpouch_pull_small.ogg", t = 0.35},
            {s = path .. "magin_new.ogg",         t = 0.5, v = 1.5},
            {s = ratel, t = 0.5},
            {s = common .. "pistol_magdrop.ogg",  t = 0.65},
            {s = rottle, t = 1.15},
            {s = path .. "chamber.ogg",      t = 1.39},
        },
    },
    ["reload_empty_fesiug"] = {
        Source = "reload_empty_fesiug",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 78 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "magout_empty.ogg",        t = 0.13, c = ci},
            {s = common .. "magpouch_pull_small.ogg", t = 0.35},
            {s = path .. "magin_new.ogg",         t = 0.55, c = ci},
            {s = ratel, t = 0.5},
            {s = common .. "pistol_magdrop.ogg",  t = 0.65},
            {s = ratel, t = 1.2},
            {s = path .. "sliderel_deact.ogg",  t = 1.62, c = ci},
            {s = path .. "chamber.ogg",        t = 1.85, v = 1.5},
            {s = rottle, t = 1.9},
        },
    },

    -- 10 Round Reloads --

    ["reload_10"] = {
        Source = "reload_10",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 56 / 30,
        MinProgress = 1.1,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "magpouch_pull_small.ogg", t = 0.025, c = ci},
            {s = ratel, t = 0.3},
            {s = path .. "magout_partial.ogg",        t = 0.2, c = ci},
            {s = path .. "magin_new.ogg",         t = 0.33, v = 1.5},
            {s = common .. "magpouch_replace_small.ogg", t = 1.2},
            {s = rottle, t = 0.65},
        },
    },
    ["reload_empty_10"] = {
        Source = "reload_empty_10",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 65 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "magrelease.ogg",    t = 0.15, c = ci},
            {s = path .. "magout_empty.ogg",        t = 0.1, c = ci},
            {s = common .. "magpouch_pull_small.ogg", t = 0.3, c = ci},
            {s = path .. "magin_new.ogg",         t = 0.45, c = ci},
            {s = ratel, t = 0.5},
            {s = common .. "pistol_magdrop.ogg",  t = 0.65},
            {s = rottle, t = 0.9},
            {s = path .. "chamber.ogg",      t = 1.35, c = ci},
        },
    },

    -- 33 Round Reloads --

    ["reload_33"] = {
        Source = "reload_33",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 56 / 30,
        MinProgress = 1.1,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = ratel, t = 0.3},
            {s = path .. "magout_partial.ogg",        t = 0.4, c = ci},
            {s = path .. "magin_new.ogg",         t = 0.49},
            {s = rottle, t = 0.75},
            {s = common .. "magpouchin.ogg", t = 1.25, v = .35},
        },
    },
    ["reload_empty_33"] = {
        Source = "reload_empty_33",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 66 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "magrelease.ogg",    t = 0.16, c = ci},
            {s = path .. "magout_empty.ogg",        t = 0.16, c = ci},
            {s = common .. "magpouch.ogg", t = 0.35, c = ci},
            {s = path .. "magin_new.ogg",         t = 0.55, c = ci},
            {s = ratel, t = 0.5},
            {s = common .. "pistol_magdrop.ogg",  t = 0.65},
            {s = rottle, t = 1.3},
            {s = path .. "chamber.ogg",      t = 1.42, c = ci},
        },
    },

    -- 100 Round Reloads --

    ["reload_100"] = {
        Source = "reload_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 56 / 30,
        MinProgress = 1.3,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "magrelease.ogg",    t = 0.3, c = ci},
            {s = path .. "magout.ogg",        t = 0.3, c = ci},
            {s = ratel, t = 0.7},
            {s = path .. "magin.ogg",         t = 1.0, c = ci},
            {s = rottle, t = 1.1},
        },
    },
    ["reload_empty_100"] = {
        Source = "reload_empty_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 66 / 30,
        MinProgress = 1.75,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "magrelease.ogg",      t = 0.12, c = ci},
            {s = path .. "magout.ogg",        t = 0.12, c = ci},
            {s = path .. "magin.ogg",           t = 0.5, c = ci},
            {s = common .. "magdrop.ogg",  t = 0.55},
            {s = ratel, t = 0.7},
            {s = path .. "sliderel_deact.ogg",  t = 1.33, c = ci},
            {s = path .. "chamber.ogg",        t = 1.525, c = ci},
            {s = rottle, t = 1.6},
        },
    },
}

SWEP.AutosolveSourceSeq = "idle"

SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[9].Installed and (anim == "fire" or anim == "fire_empty") then
        return anim .. "_stock"
    end
end

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp"},
        Bone = "glock_slide",
        Offset = {
            vpos = Vector(-0.025, -0.4, -0.2),
            vang = Angle(90, 0, -90),
        },
        CorrectivePos = Vector(0, 0, 0.02),
        VMScale = Vector(.9, .9, .9),
        WMScale = VMScale,
        --WMScale = Vector(1.25, 1.25, 1.25),
        --InstalledEles = {"ud_glock_rail_optic"},
    },
    {
        PrintName = "Slide",
        DefaultAttName = "Standard Slide",
        DefaultAttIcon = Material("entities/att/acwatt_ud_glock_slide.png", "smooth mips"),
        Slot = "ud_glock_slide",
        Bone = "glock_flash",
        Offset = {
            vpos = Vector(2.4, -0.2, -29.2), -- Op. CS slide
            vang = Angle(90, 3, -90),
        },
    },
    {
        PrintName = "Frame",
        DefaultAttName = "Standard Frame",
        DefaultAttIcon = Material("entities/att/acwatt_ud_glock_frame.png", "smooth mips"),
        Slot = "ud_glock_frame",
    },
    {
        PrintName = "Caliber",
        DefaultAttName = "9x19mm Parabellum",
        DefaultAttIcon = Material("entities/att/uc_bullets/9x19.png", "smooth mips"),
        Slot = "ud_glock_caliber",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle", "ud_glock_muzzle"},
        Bone = "glock_flash",
        Offset = {
            vpos = Vector(0, 0, 0.0),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd"},
        VMScale = Vector(0.8, 0.8, 0.8)
    },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol", "uce_pistol_foregrip"},
        Bone = "glock_parent",
        Offset = {
            vpos = Vector(0, -1.3, 5),
            vang = Angle(90, 0, -90),
        },
        MergeSlots = {7},
        ExcludeFlags = {"ud_glock_slide_subcompact"}
    },
    {
        Hidden = true,
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "glock_parent",
        Offset = {
            vpos = Vector(0, -1.3, 5),
            vang = Angle(90, 0, -90),
        }, -- This slot is obsolete and exists solely for compatiblity with old loadouts. Do not remove.
    },
    {
        PrintName = "Magazine",
        Slot = {"ud_glock_mag"},
        DefaultAttIcon = Material("entities/att/acwatt_ud_glock_mag_17.png", "smooth mips"),
        DefaultAttName = "17-Round Mag",
    },
    {
        PrintName = "Stock",
        Slot = {"uc_stock", "go_stock_pistol_bt"},
        DefaultAttName = "No Stock",
        Bone = "glock_parent",
        Offset = {
            vpos = Vector(0.1, 2, -1.4),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"ud_glock_frame_subcompact"}
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "glock_slide",
        Offset = {
            vpos = Vector(0.45, 0.1, 4),
            vang = Angle(90, 0, -90),
        },
        VMScale = Vector(0.8, 0.8, 0.8),
    },
    {
        PrintName = "Material",
        DefaultAttName = "Black Polymer",
        DefaultAttIcon = Material("entities/att/acwatt_ud_glock_material.png", "smooth mips"),
        Slot = "ud_glock_skin",
        FreeSlot = true,
    },
}
--lua/weapons/arccw_ud_m16.lua:
return gluapack()()
--lua/weapons/arccw_ud_m16.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellScale = .666
SWEP.ShellPitch = 100

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "RAYCAR-0"
-- AMCAR stands for (american) Colt Assault Rifle, not Carbine!! ~Fesiug
-- shut up retard ~zenith

-- True name --

SWEP.TrueName = "M16A2"

-- Trivia --
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "Third generation of America's iconic military rifle. Army tests showed that soldiers were more likely to hit a target if they fired multiple shots, but were likely to spray in full-auto and fail to hit anything. As a result, they implemented a ratcheted three-round burst system which limited the maximum burst a soldier could fire to three shots.\n\nWell-rounded gun with no major downsides."
SWEP.Trivia_Manufacturer = "Rayter Arms Industries"
SWEP.Trivia_Calibre = "5.56x45mm NATO"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1959


if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Stoner's Legacy Ltd."
end

local origDesc = SWEP.Trivia_Desc
local m4Desc = "Carbine variant of the M16 rifle. Originally designed in response to design faults in the CAR-15 family, it eventually replaced the M16 across much of the Army for its favorably low weight and comparable performance. The M4 variant has since become one of the most iconic and widespread American service rifles in the modern era.\n\nLight and versatile, but requires discipline to control."
local ncrDesc = "Standard-issue rifle of the New California Republic. Traditionally produced with a semi-automatic receiver, the wooden furniture is more readily replaceable and adds additional recoil control for maximum accuracy.\n\nWell-rounded gun with no major downsides."
local smgDesc = "Submachine gun based on the M16 rifle. Despite its similar appearance, it uses a different mechanism from its parent rifle. More accurate than other submachine guns due to its rifle frame and closed-bolt mechanism."
local blkDesc = "Aftermarket automatic variant of the M16 rifle. The .300 Blackout cartridge has a ballistic performance more akin to the 7.62x39mm Soviet cartridge, with a similarly sized projectile but shorter effective range."
local ukDesc = "AR-15 style rifles are a class of rifles linked to the M16, normally with a semi-automatic fire group for the civilian market. This one, however, has been neutered by authority of the British crown with a manual-action receiver. Bit cringe, innit?"
local arDesc = "Semi-automatic variant of the M16 series of rifles, produced for the civilian market. Wildly popular in the United States, this rifle can be seen in the hands of hobbyists, hunters and mass shooters alike.\n\nWell-rounded gun with no major downsides."
local beoDesc = "Aftermarket semi-automatic variant of the M16 rifle firing an oversized magnum cartridge. Provides extremely high stopping power at close range."
local carDesc = "Carbine variant of the M16 rifle, short enough to be classified as a submachine gun. Its features influenced the US Army's interest in the M4 Carbine, which went on to become their new standard rifle. Due to the small barrel, rifles of this family have high maneuverability but poor range compared to their parent platform."
local a1Desc = "Second generation of America's iconic military rifle. Developed to address problems with the original M16, which suffered notoriously frequent jamming that could get its wielder killed. The revised model evolved a positive reputation with those who used it, and is now a universal symbol of the Vietnam War.\n\nA well-rounded rifle, but difficult to control without trigger discipline - something the A2 model eventually addressed."
local a3Desc = "Variant of the M16A2 with the original full-automatic trigger group, relegated to niche roles in the US Army. Well-rounded gun with no major downsides."
local lmgDesc = "Configuration of the M16 designed for a light machine gun role, used vaguely within the Marine Corps before the adoption of the Minimi. Heavier than the standard platform, but the integral bipod can be deployed onto surfaces for excellent recoil control."
local patriotDesc = "An assault pistol developed for The Boss. The feeder mechanism inside the drum magazine forms an \"∞\" shape.\n\nThe bottomless magazine more than makes up for the awkwardness of the configuration."

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Colt's Manufacturing Company"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_m16.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_m16.mdl"
SWEP.ViewModelFOV = 80
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["556"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["556"].min
SWEP.RangeMin = 50
SWEP.Range = 350 -- 4 shot until ~250m

SWEP.Penetration = ArcCW.UC.StdDmg["556"].pen
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 960
SWEP.PhysBulletMuzzleVelocity = 960

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 20

-- Recoil --

SWEP.Recoil = 0.5
SWEP.RecoilSide = 0.25

SWEP.RecoilRise = 0.1
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 900
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = -3,
        PostBurstDelay = 0.1,
        RunawayBurst = false, -- https://en.wikipedia.org/wiki/Burst_mode_(weapons)
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120
SWEP.ShootPitchVariation = 0

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 4
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 200
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "smg1"
SWEP.MagID = "m16"

SWEP.HeatCapacity = 150
SWEP.HeatDissipation = 10
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 200
SWEP.MalfunctionTakeRound = false

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.9

-- Length --

SWEP.BarrelLength = 48
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, -1, 1.2)
SWEP.HolsterAng = Angle(-8.5, 8, -10)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-2.815, 0, 1.3),
     Ang = Angle(0, 0, 0),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.ActivePos = Vector(0.33, -2, 1.33)
SWEP.ActiveAng = Angle(0, 0, -3)

-- SWEP.CustomizePos = Vector(5, -2, -2)
-- SWEP.CustomizeAng = Angle(15, 25, 0)
SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2.5, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.BarrelOffsetHip = Vector(2, 0, -5)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-8.5, 4, -5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    --scale = .85
}

-- Firing sounds --

local path = ")weapons/arccw_ud/m16/"
local common = ")/arccw_uc/common/"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}

SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/556x45/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-556x45-rif-ext-01.ogg",
    tail .. "fire-dist-556x45-rif-ext-02.ogg",
    tail .. "fire-dist-556x45-rif-ext-03.ogg",
    tail .. "fire-dist-556x45-rif-ext-04.ogg",
    tail .. "fire-dist-556x45-rif-ext-05.ogg",
    tail .. "fire-dist-556x45-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [2] = "m16_bullets1",    [3] = "m16_bullets2"
}

SWEP.DefaultBodygroups = "00000000000000000000000"

SWEP.AttachmentElements = {

    ["ud_m16_mag_20"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["ud_m16_mag_40"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },
    ["ud_m16_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 9}},
    },
    ["ud_m16_mag_60"] = {
        VMBodygroups = {{ind = 2, bg = 3}},
    },
    ["ud_m16_mag_100"] = {
        VMBodygroups = {{ind = 2, bg = 4}},
    },
    ["ud_m16_9mm_mag"] = {
        VMBodygroups = {{ind = 2, bg = 5}},
    },
    ["ud_m16_9mm_mag_32"] = {
        VMBodygroups = {{ind = 2, bg = 6}},
    },
    ["ud_m16_mag_50beo"] = {
        VMBodygroups = {{ind = 2, bg = 8}},
    },
    ["ud_m16_mag_50beo_12"] = {
        VMBodygroups = {{ind = 2, bg = 0}},
    },

    ["upper_flat"] = {
        -- handled by code
        --[[]
        VMBodygroups = {
            {ind = 1, bg = 1},
            {ind = 3, bg = 3}
        },
        ]]
    },
    ["upper_classic"] = {
        VMBodygroups = {
            {ind = 1, bg = 3},
        },
    },
    ["rail_fg"] = {
        VMBodygroups = {{ind = 9, bg = 1}}
    },

    ["stock_231_ex"] = {
        VMBodygroups = {{ind = 7, bg = 1}},
    },
    ["stock_231_in"] = {
        VMBodygroups = {{ind = 7, bg = 2}},
    },
    ["stock_231_tube"] = {
        VMBodygroups = {{ind = 7, bg = 3}},
    },
    ["stock_607_ex"] = {
        VMBodygroups = {{ind = 7, bg = 4}},
    },
    ["stock_607_in"] = {
        VMBodygroups = {{ind = 7, bg = 5}},
    },
    ["stock_608"] = {
        VMBodygroups = {{ind = 7, bg = 6}},
    },
    ["stock_carbine_ex"] = {
        VMBodygroups = {{ind = 7, bg = 7}},
    },
    ["stock_carbine_in"] = {
        VMBodygroups = {{ind = 7, bg = 8}},
    },
    ["stock_wood"] = {
        VMBodygroups = {{ind = 7, bg = 9}},
    },
    ["stock_adar"] = {
        VMBodygroups = {
            {ind = 7, bg = 10},
            {ind = 8, bg = 4}
        },
    },
    ["stock_ru556"] = {
        VMBodygroups = {{ind = 7, bg = 11}},
    },
    ["grip_ergo"] = {
        VMBodygroups = {{ind = 8, bg = 1}},
    },
    ["grip_skel"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["grip_wood"] = {
        VMBodygroups = {{ind = 8, bg = 3}},
    },

    ["gasblock_carbine"] = {
        VMBodygroups = {{ind = 6, bg = 3}},
    },
    ["fs_adar"] = {
        VMBodygroups = {{ind = 6, bg = 4}},
    },
    ["remove_lug"] = {
        VMBodygroups = {{ind = 12, bg = 1}},
    },

    ["mount_14"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0, 0.3, 17.5),
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["mount_11"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.6, -0.3, 14.2),
                vang = Angle(90, 0, 0),
            },
        },
    },
    ["mount_tactical"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(-1, -.35, 11.5),
                vang = Angle(-90, 180, 0),
                wang = Angle(90, 0, 0),
            },
        },
        ExcludeFlags = {}
    },
    -- ["mount_tactical_short"] = {
    --     AttPosMods = {
    --         [8] = {
    --             vpos = Vector(-1, -.35, 11.5),
    --             vang = Angle(-90, 180, 0),
    --             wang = Angle(90, 0, 0),
    --         },
    --     },
    --     AttPosMods_Priority = 2,
    --     RequireFlags = {"barrel_short"}
    -- },

    ["barrel_14"] = {
        VMBodygroups = {
            {ind = 4, bg = 1},
            {ind = 6, bg = 2},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.33, 18.85),
                vang = Angle(90, 0, -90),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_11"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 2},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.33, 15.7),
                vang = Angle(90, 0, -90),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_fpw"] = {
        VMBodygroups = {
            {ind = 4, bg = 2},
            {ind = 6, bg = 5},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.07, 21.3),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_11_ru556"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 5},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.07, 21.3),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(1.15, 0, 17.9),
                vang = Angle(90, 0, 0),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },

    ["hg_m16a4_ris"] = {
        VMBodygroups = {
            {ind = 5, bg = 2},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(-0.1, 1.05, 12),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(1.41, -.1, 20),
                vang = Angle(90, 0, 0),
            },
            [16] = {
                vpos = Vector(0, -1.75, 21.75), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["hg_m4a1_ris"] = {
        VMBodygroups = {
            {ind = 5, bg = 5},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 1.4, 12),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(-1.41, -.2, 14),
                vang = Angle(90, 0, 180),
            },
            [15] = {
                vpos = Vector(0, -1.75, 15.75), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["hg_ru556"] = {
        -- VMBodygroups = {
        --     {ind = 5, bg = 7},
        -- },
        AttPosMods = {
            -- [5] = {
            --     vpos = Vector(-0.1, 1.05, 12),
            --     vang = Angle(90, 0, -90),
            -- },
            -- [6] = {
            --     vpos = Vector(1.1, 0, 14),
            --     vang = Angle(90, 0, 0),
            -- },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["hg_m4a1"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        }
    },
    ["hg_cqbr"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        },
    },
    ["hg_adar"] = {
        VMBodygroups = {
            {ind = 5, bg = 8},
        },
    },
    ["hg_fpw"] = {
        VMBodygroups = {
            {ind = 5, bg = 6},
            --{ind = 6, bg = 4},
        }
    },
    ["hg_m16a1"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        }
    },
    ["hg_m16a1_wood"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        },
        VMSkin = 1
    },
    ["ud_m16_hg_heat"] = {
        VMElements = {
            {
                Model = "models/weapons/arccw/atts/m203iron.mdl",
                Bone = "m16_parent",
                Scale = Vector(1, 1, 1),
                Offset = {
                    pos = Vector(0, -1.2, 14.9),
                    ang = Angle(90, 0, -90),
                }
            }
        },
        UC_UseClassicM203Mount = true,
    },
    ["hg_m605"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
            {ind = 4, bg = 1},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.05, 25.58),
                vang = Angle(90, 0, -90),
            },
            [6] = { -- also has no rail
                vpos = Vector(0, 0.9, 22.2),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["hg_m605_wood"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
            {ind = 4, bg = 1},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, 0, 25),
                vang = Angle(90, 0, -90),
            },
            [6] = { -- also has no rail
                vpos = Vector(0, 0.8, 22),
                vang = Angle(90, 0, -90),
            },
        },
        VMSkin = 1
    },
    ["hg_lmg"] = {
        VMBodygroups = {
            {ind = 5, bg = 3},
        }
    },
    ["hg_sd"] = {
        VMBodygroups = {
            {ind = 5, bg = 9},
            {ind = 4, bg = 3},
            {ind = 6, bg = 5}
        },
        AttPosMods = { -- no rail, just pretend it's mounted to something
            -- [8] = {
            --     vpos = Vector(0, 0.7, 17.5),
            --     vang = Angle(90, 0, -90),
            -- },
            [16] = {
                vpos = Vector(0, -1.65, 11.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },

    ["ud_m16_upper_charm"] = {
        AttPosMods = {
            [1] = {
                vpos = Vector(0, -4, 3),
                vang = Angle(90, 0, -90),
                SlideAmount = {
                    vmin = Vector(0, -3.4, 3 - 1.5),
                    vmax = Vector(0, -3.4, 3 + 1.5),
                }
            },
        },
    },
    ["ud_m16_upper_charm2"] = {
        AttPosMods = {
            [1] = {
                vpos = Vector(0, -4.1, 3.5),
                vang = Angle(90, 0, -90),
                SlideAmount = {
                    vmin = Vector(0, -3.5, 3.5 - 2),
                    vmax = Vector(0, -3.5, 3.5 + 1),
                }
            },
        },
    },
    ["bravo_dicks_going_fart"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.25, -1.4, 12),
                vang = Angle(90, 0, 90),
            },
        },
    },

    ---- Cut content
    ["hg_stub"] = {
        VMBodygroups = {
            {ind = 5, bg = 7},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.35, 7),
                vang = Angle(90, 0, -90)
            },
            [6] = {
                vpos = Vector(1.1, -0.4, 9),
                vang = Angle(90, 0, 0),
            },
        }
    },
    ["barrel_stub"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 4},
        }
    },
    ["hg_smg"] = {
        VMBodygroups = {
            {ind = 5, bg = 0},
        }
    },
    ["m16_strap"] = {
        VMBodygroups = {
             {ind = 13, bg = 1},
        },
    },
}

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

local sr_pmag = {
	[path .. "magout_empty.ogg"] = path .. "pmagout.ogg",
	[path .. "magin.ogg"] = path .. "pmagin.ogg",
}

local pmag1, pmag2 = {}, {"ud_m16_pmag"}
SWEP.Hook_TranslateSound = function(wep, data)
	if wep:CheckFlags(pmag1, pmag2) and sr_pmag[data] then return sr_pmag[data] end
end

local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}

SWEP.Animations = {
    ["ready"] = {
        Source = "fix",
        Time = 45 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chamber.ogg",  t = 0.5},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = ratel, t = 0.2},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 20 / 30,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = ratel, t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 20 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["trigger"] = {
        Source = "idle",
        MinProgress = .1,
        SoundTable = {
            {s = ")weapons/arccw_ud/uzi/prefire.ogg",         t = 0, c = ci},
        },
    },
    ["fire"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },

    ["fire_cycle"] = {
        Source = "fire",
        Time = 13 / 30,
    },

    ["cycle"] = {
        Source = "fix",
        Time = 36 / 30 * 0.7,
        ShellEjectAt = 0.3,
        LHIK = true,
        LHIKIn = 0.3 * 0.7,
        LHIKEaseIn = 0.4 * 0.7,
        LHIKEaseOut = 0.15 * 0.7,
        LHIKOut = 0.4 * 0.7,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.05},
            {s = common .. "cloth_4.ogg",  t = 0.2},
            {s = path .. "chamber.ogg",  t = 0.3},
        },
    },

    ["fix"] = {
        Source = "fix",
        Time = 45 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chamber.ogg",  t = 0.5},
        },
    },
    ["fix_empty"] = {
        Source = "fix_empty",
        Time = 45 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "ch_forward_empty.ogg",  t = 0.5},
        },
    },

    -- 30 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2, v = 0.5},
            {s = ratel, t = 0.25},
            {s = path .. "magout_empty.ogg", 	 t = 0.23},
            {s = ratel, t = 0.5},
            {s = path .. "struggle.ogg",    t = 1, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = common .. "grab-polymer.ogg", t = 1.77, v = 0.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.7},
            {s = common .. "shoulder.ogg", t = 1.8},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 87 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 0.25},
            {s = common .. "magpouch_gear.ogg", t = 0.1, v = 0.5},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = ratel, t = 0.5},
            {s = common .. "rifle_magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.39},
            {s = path .. "boltdrop.ogg", t = 1.7},
            {s = ratel, t = 1.9},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.0},
            {s = common .. "grab-polymer.ogg", t = 2.1, v = 0.35},
            {s = common .. "shoulder.ogg", t = 2.1},
        },
    },

    -- 20 Round Reloads --

    ["reload_20"] = {
        Source = "reload_20",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 0.05},
            {s = path .. "magout_empty.ogg", 	 t = 0.09},
            {s = common .. "magpouch_gear.ogg", t = 0.1},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 0.85},
            {s = path .. "struggle.ogg",    t = 0.9, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = rottle,  t = 1.1},
            {s = ratel, t = 1.125},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.65},
            {s = common .. "grab-polymer.ogg", t = 1.7, v = 0.25},
            {s = common .. "shoulder.ogg", t = 1.75},
        },
    },
    ["reload_empty_20"] = {
        Source = "reload_empty_20",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.8,
        SoundTable = {
            {s = common .. "magpouch_gear.ogg", t = 0},
            {s = rottle, t = 0.01},
            {s = ratel, t = 0.05},
            {s = path .. "magout_empty.ogg", 	 t = 0.075},
            {s = rottle, t = 0.75},
            {s = ratel, t = 0.9},
            {s = common .. "rifle_magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.8, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.85},
            {s = rottle, t = 1.4},
            {s = ratel, t = 1.4},
            {s = path .. "chamber_press.ogg", t = 1.72},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.95},
            {s = common .. "grab-polymer.ogg", t = 2.075, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.13},
        },
    },

    -- 40 Round Reloads --

    ["reload_40"] = {
        Source = "reload_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = ratel, t = 0.1},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = common .. "magpouch_gear.ogg", t = 0.25},
            {s = rottle, t = 0.75},
            {s = ratel, t = 0.8},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.0},
            {s = rottle, t = 1.1},
            {s = ratel, t = 1.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.65},
            {s = common .. "shoulder.ogg", t = 1.75},
        },
    },
    ["reload_empty_40"] = {
        Source = "reload_empty_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 85 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.8,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = common .. "magpouch_gear.ogg", t = 0.25},
            {s = rottle,  t = 0.75},
            {s = common .. "rifle_magdrop.ogg",  t = 0.8},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = rottle,  t = 1.475},
            {s = ratel,  t = 1.475},
            {s = path .. "boltdrop.ogg", t = 1.78},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.1},
            {s = common .. "shoulder.ogg", t = 2.2},
        },
    },

    -- 60 Round Reloads --

    ["reload_60"] = {
        Source = "reload_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2},
            {s = path .. "magout_empty.ogg", 	 t = 0.25},
            {s = rottle, t = 0.75},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.1},
            {s = rottle, t = 1.1},
            {s = common .. "grab-polymer.ogg", t = 1.78, v = 0.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.8},
            {s = common .. "shoulder.ogg", t = 1.9},
        },
    },
    ["reload_empty_60"] = {
        Source = "reload_empty_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 85 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.8,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2},
            {s = path .. "magout_empty.ogg", 	 t = 0.25},
            {s = rottle, t = 0.75},
            {s = common .. "rifle_magdrop.ogg",  t = 0.8},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.1},
            {s = rottle, t = 1.475},
            {s = ratel, t = 1.475},
            {s = path .. "boltdrop.ogg", t = 1.8},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.1},
            {s = common .. "grab-polymer.ogg", t = 2.15, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.2},
        },
    },

    -- 100 Round Reloads --

    ["reload_100"] = {
        Source = "reload_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.75,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = rottle, t = 0.75},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = rottle, t = 1.1},
            {s = path .. "magtap.ogg",   t = 1.59},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.8},
            {s = common .. "grab-polymer.ogg", t = 1.85, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.0},
        },
    },
    ["reload_empty_100"] = {
        Source = "reload_empty_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 90 / 30,
        MinProgress = 2.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = rottle, t = 0.75},
            {s = common .. "magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = path .. "magtap.ogg",   t = 1.59},
            {s = rottle, t = 1.75},
            {s = path .. "chback.ogg",   t = 2.0},
            {s = common .. "cloth_4.ogg",  t = 2.05},
            {s = path .. "chamber.ogg",  t = 2.22},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.5},
            {s = common .. "grab-polymer.ogg", t = 2.55, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.6},
        },
    },

    -- 9mm 32 Round Reloads --

    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 70 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.15},
            {s = "weapons/arccw_ud/uzi/" .. "magout.ogg", 	 t = 16 / 30},
            {s = rottle, t = 0.75},
            {s = "weapons/arccw_ud/uzi/" .. "magin.ogg",    t = 27 / 30},
            {s = rottle, t = 1.1},
            {s = common .. "magpouchin.ogg", t = 1.55},
            {s = common .. "shoulder.ogg", t = 1.93},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_empty_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 80 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = "weapons/arccw_ud/uzi/" .. "magout.ogg", 	 t = 0.1},
            {s = common .. "magpouch.ogg", t = 0.45},
            {s = rottle, t = 0.75},
            {s = "weapons/arccw_ud/uzi/" .. "magin.ogg",    t = 0.8},
            {s = path .. "chamber_press.ogg", t = 1.7},
            {s = rottle, t = 1.39},
            {s = common .. "shoulder.ogg", t = 2.15},
        },
    },


    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_inspect_empty"] = {
        Source = "inspect_enter_empty",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "inspect_loop_empty",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999,
    },
    ["exit_inspect_empty"] = {
        Source = "inspect_exit_empty",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999,
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
}

local hgLookup = {
    ["default"]     = {0,4,0},
    ["tactical"]    = {2,5,0},
    ["a1"]          = {1,1,1},
    ["heat"]          = {10,10,1},
    ["heatm203"]          = {11,11,1},
    ["wood"]          = {1,1,1},
    ["lmg"]          = {3,3,1},
    ["fpw"]          = {6,6,2},
    ["ru556"]          = {7,7,3},
    ["adar"]          = {8,8,2},
    ["hk416"]          = {9,9,3},
    ["607"]          = {9,9,0},
}
-- Structure: 20in appearance, 14/11in appearance, gas block mode
-- Gas block modes: 0 standard, 1 always at 20" position, 2 at ADAR position when short, 3 at ADAR position when short and not flat

local barrLookup = {
    ["sd"] = -1,
    ["20in"] = 0,
    ["14in"] = 1,
    ["fpw"] = 1,
    ["10in"] = 2,
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    local atts = wep.Attachments
    if !IsValid(vm) then return end

    local barrel = string.Replace(atts[2].Installed or "20in","ud_m16_barrel_","")
    local barr = barrLookup[barrel]
    local hg = string.Replace(atts[3].Installed or "default","ud_m16_hg_","")
    hg = string.Replace(hg,"uf_m16_hg_","")

    local optic = atts[1].Installed
    local muzz = atts[4].Installed or barrel == "sd"
    local laser = atts[8].Installed
    local fs = atts[16].Installed
    local retro = wep:GetBuff_Override("TopMount")

    -- Retro rail
    if optic then
        if retro then
            -- Raised rail (retro)
            vm:SetBodygroup(3, retro)
        else
            -- Flat rail
            vm:SetBodygroup(1, 1)
            vm:SetBodygroup(3, 2)
        end
    end

    -- Dynamic handguard
    if barr == -1 then
        vm:SetBodygroup(5,9)
    elseif barr == 0 and hgLookup[hg] then
        vm:SetBodygroup(5,hgLookup[hg][1])
    elseif hgLookup[hg] then
        vm:SetBodygroup(5,hgLookup[hg][2])
    else
        vm:SetBodygroup(5,9)
    end

    -- Gas block
    if barrel == "sd" or (atts[6].Installed == "ud_m16_receiver_fpw" and barr > 0) then
        vm:SetBodygroup(6,5)
    else
        local gbPos = hgLookup[hg] and hgLookup[hg][3] or 0
        local lwr = atts[6].Installed
        local flat = (
            wep:GetBuff_Override("FrontSight")
            or atts[6].Installed == "ud_m16_receiver_fpw"
            or (optic and fs ~= "ud_m16_charm_fs" and !(wep:GetBuff_Override("IronSight") or wep:GetBuff_Override("TopMount")))
        ) and 1 or 0

        if gbPos == 1 or barr == 0 then
            vm:SetBodygroup(6, 0 + flat)
        elseif gbPos == 2 then
            vm:SetBodygroup(6, 4 + flat * 2)
        elseif gbPos == 3 then
            vm:SetBodygroup(6, 4 - flat)
        else
            vm:SetBodygroup(6, 2 + flat)
        end
    end

    -- Default flash hider
    if !muzz then
        if barr == 0 then
            vm:SetBodygroup(11,1)
        elseif barr == 1 then
            vm:SetBodygroup(11,2)
        else
            vm:SetBodygroup(11,3)
        end
    else
        vm:SetBodygroup(11,0)
    end

    -- Tactical clamp
    if laser and hg ~= "tactical" then
        if barr == 0 then
            vm:SetBodygroup(10,1)
        elseif barr == 1 then
            vm:SetBodygroup(10,3)
        else
            vm:SetBodygroup(10,2)
        end
    else
        vm:SetBodygroup(10,0)
    end

    -- Disable tac rail element with tac hg
    if hg == "tactical" and (atts[7].Installed or atts[18].Installed) then
        vm:SetBodygroup(9,0)
    end

    -- .50 Beowulf magazines
    if atts[5].Installed == "ud_m16_receiver_50beo" and !atts[11].Installed then
        vm:SetBodygroup(2, 8)
    end
end

-- RAYCAR-0, rifle barrel
local bar0_fake = "First variation of the RAYCAR rifle. Tests showed that users were more likely to hit a target if they fired multiple shots, but were likely to spray in full-auto and fail to hit anything. As a result, a ratcheted three-round burst system was implemented which limited the maximum burst a user could fire to three shots.\n\nWell-rounded gun with no major downsides."

-- RAYCAR-1, carbine barrel
local bar1_fake = "Second variation of the RAYCAR rifle. It eventually replaced the RAYCAR-0 across much of the Army for its favorably low weight and comparable performance. The -1 variant has since become one of the most iconic and widespread American service rifles in the modern era.\n\nLight and versatile, but requires discipline to control."

-- RAYCAR-2, commando barrel
local bar2_fake = "Third variation of the RAYCAR rifle. Developed with assistance from the Navy, the \"commando\" barrel allows for the weapon to be very compact, even short enough to be classified as a submachine gun, enhancing usability in vehicles and in enclosed spaces.\n\nVery lightweight and manuverable, but with very aggressive recoil to match."

-- RAYPAW :3
local smgDesc_fake = "Submachine gun based on the RAYCAR rifle. Despite its similar appearance, it uses a different mechanism from its parent rifle.\n\nMore accurate than other submachine guns due to its rifle frame and closed-bolt mechanism."

-- RBY50
local beoDesc_fake = "Aftermarket semi-automatic variant of the RAYCAR rifle firing an oversized magnum cartridge.\n\nProvides extremely high stopping power at close range."

-- RBY300
local blkDesc_fake = "Aftermarket automatic variant of the RAYCAR rifle. The .300 Blackout cartridge has a ballistic performance more akin to the 7.62x39mm Soviet cartridge, with a similarly sized projectile but shorter effective range.\n\nSlightly more inaccurate, made up with a higher stopping power and a subsonic projectile."

-- UKCAR
local ukDesc_fake = "Normally, RAYCAR style rifles are imported with a semi-automatic fire group for the civilian market. This one, however, has been neutered by authority of the British crown with a manual-action receiver.\n\nBit cringe, innit?"

-- RAYSAW
local lmgDesc_fake = "Configuration of the RAYCAR designed for a light machine gun role, used vaguely within the Marine Corps before the adoption of the Minimi.\n\nHeavier than the standard platform, but the integral bipod can be deployed onto surfaces for excellent recoil control."

-- Fallout barrel or sumn idk
local ncrDesc_fake = "Standard-issue rifle of the New California Republic. Traditionally produced with a semi-automatic receiver, the wooden furniture is more readily replaceable and adds additional recoil control for maximum accuracy.\n\nWell-rounded gun with no major downsides."

-- Patriot easter egg. Is it overpowered? I don't think so, a configuration like this is already pretty uncontrollable and imprecise as is, and overheating is the new magazine.
local a1, a2 = {}, {"patr1", "patr2", "patr3", "patr4", "patr5"}
SWEP.O_Hook_Override_BottomlessClip = function(wep, data)
    if wep:CheckFlags(a1, a2) then
        data.current = true
    end
end


SWEP.Hook_NameChange = function(wep, name)
    local trueNames = GetConVar("arccw_truenames"):GetBool()
    local atts = wep.Attachments
    local flat = atts[1].Installed and !wep:GetBuff_Override("TopMount")

    local barrel = string.Replace(atts[2].Installed or "20in","ud_m16_barrel_","")
    local barr = barrLookup[barrel]
    local hg = string.Replace(atts[3].Installed or "default","ud_m16_hg_","")
    local upr = string.Replace(atts[5].Installed or "default","ud_m16_receiver_","")
    local lwr = string.Replace(atts[6].Installed or "default","ud_m16_receiver_","")

    if wep:CheckFlags(a1, a2) then -- Patriot configuration
        wep.Trivia_Desc = patriotDesc
        return "The Patriot"
    elseif !trueNames then -- Custom lore-based fake names
        local pre = (lwr == "auto" and "AM" or "RAY")
        if upr == "9mm" then
            local sd = (barr == -1)
            wep.Trivia_Desc = smgDesc_fake
            if flat then
                return (sd and pre .. "SSMG-NG") or pre .. "PAW-" .. barr .. "NG"
            end
            return (sd and pre .. "SSMG") or pre .. "PAW-" .. barr
        elseif upr == "50beo" then
            wep.Trivia_Desc = beoDesc_fake
            return "RBY"--50"
        elseif upr == "300blk" then
            wep.Trivia_Desc = blkDesc_fake
            return "RBY"--300"
        elseif lwr == "fpw" then
            wep.Trivia_Desc = bar1_fake
            return pre .. "FPW"
        elseif lwr == "cali" then
            wep.Trivia_Desc = ukDesc_fake
            return "UKCAR"
        else
            if barr == 0 then
                if hg == "lmg" then
                    wep.Trivia_Desc = lmgDesc_fake
                    return pre .. "SAW" .. (flat and "-NG" or "")
                elseif flat then
                    return pre .. "CAR-0NG"
                else
                    wep.Trivia_Desc = bar0_fake
                    return pre .. "CAR-0"
                end
            elseif barr == 1 then
                wep.Trivia_Desc = bar1_fake
                if flat then
                    return pre .. "CAR-1NG"
                end
                return pre .. "CAR-1"
            elseif barr == 2 then
                wep.Trivia_Desc = bar2_fake
                if flat then
                    return pre .. "CAR-2NG"
                end
                return pre .. "CAR-2"
            end
        end

        wep.Trivia_Desc = bar0_fake
        return pre .. "CAR-0"

    else

        if upr == "9mm" then
            local sd = (barr == -1)
            wep.Trivia_Desc = smgDesc
            if lwr == "semi" then
                return "AR-15 9mm"
            elseif flat then
                return "R0991"
            end
            return "R0635"

        end

        if lwr == "auto" then
            if upr == "a1" then
                wep.Trivia_Desc = a1Desc
                if barr == 0 then
                    return "M16A1"
                elseif barr == 1 then
                    return "M605"
                end
                wep.Trivia_Desc = carDesc
                return "CAR-15"
            end
            if barr == 0 then
                wep.Trivia_Desc = a3Desc
                if hg == "lmg" then
                    wep.Trivia_Desc = lmgDesc
                    return "Colt LMG"
                elseif flat and hg == "tactical" then
                    return "R0901"
                end
                return "M16A3"
            elseif barr == 1 then
                wep.Trivia_Desc = m4Desc
                if flat then
                    return "M4A1"
                end
                return "XM4"
            else
                wep.Trivia_Desc = carDesc
                if flat then
                    wep.Trivia_Desc = m4Desc
                    if upr == "300blk" then
                        return "Mk 18"
                    end
                    return "Mk 18 Mod 0"
                end
                return "CAR-15"
            end
        elseif lwr == "semi" or upr == "50beo" then
            wep.Trivia_Desc = arDesc
            if hg == "wood" then
                wep.Trivia_Desc = ncrDesc
                if barr == 0 then
                    return "Service Rifle"
                end
                return "Service Carbine"
            elseif flat and hg == "adar" then
                return "ADAR 2-15"
            elseif barr > 0 then
                if barr == 2 and atts[10].Installed == "ud_m16_stock_buffer" then
                    return "AR-15 Pistol"
                elseif upr == "a1" and barr == 1 then
                    return "CRXM177E2B"
                else
                    return "AR-15 SBR"
                end
            elseif upr == "a1" then
                return "CRM16A1"
            end
            return "AR-15"
        elseif lwr == "fpw" then
            wep.Trivia_Desc = m4Desc
            return "M231 FPW"
        elseif lwr == "cali" then
            wep.Trivia_Desc = ukDesc
            return "AR-15GB"
        else
            wep.Trivia_Desc = origDesc
            if barr == 0 and flat then
                return "M16A4"
            elseif barr == 1 then
                wep.Trivia_Desc = m4Desc
                return "M4 Carbine"
            elseif barr == 2 then
                return "M16 Commando"
            end
        end

        wep.Trivia_Desc = origDesc
        return "M16A2"

    end
end



SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        InstalledEles = {"upper_flat"},
        Slot = {"optic","optic_sniper","ud_m16_rs"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.75, 3),
            vang = Angle(90, 0, -90),
        },
        SlideAmount = {
            vmin = Vector(0, -1.6, 3 - 2),
            vmax = Vector(0, -1.6, 3 + 1),
        },
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "20\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_barrel_20.png", "smooth mips"),
        Slot = "ud_m16_blen",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Ribbed Handguard",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_hg_ribbed.png", "smooth mips"),
        Slot = "ud_m16_hg",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.63, -0.41),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd"}
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle", "ud_m16_muzzle"},
        Bone = "m16_parent",
        VMScale = Vector(1, 1, 1),
        WMScale = VMScale,
        Offset = {
            vpos = Vector(0, -.33, 23.27),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd", "m16_stub"},
    },
    {
        PrintName = "Upper Receiver",
        DefaultAttName = "5.56x45mm Upper",
        DefaultAttIcon = Material("entities/att/uc_bullets/556x45.png", "smooth mips"),
        Slot = {"ud_m16_receiver"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"ud_m16_fpw"}
    },
    {
        PrintName = "Lower Receiver",
        DefaultAttName = "Burst Lower",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_receiver_default.png", "smooth mips"),
        Slot = {"ud_m16_fcg"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"m16_nolower"}
    },
    {
        PrintName = "Underbarrel",
        Slot = "foregrip",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, 6, 11),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"m16_lmg", "m16_stub"},
        SlideAmount = {
            vmin = Vector(0, .65, 11.5),
            vmax = Vector(0, .65, 7.5),
        },
		MergeSlots = {18},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, 0.3, 21.25),
            vang = Angle(90, 0, -90),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ud_m16_grip"},
        DefaultAttName = "Standard Grip",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_grip_default.png", "smooth mips"),
        ExcludeFlags = {"m16_adar"}
    },
    {
        PrintName = "Stock",
        Slot = {"ud_m16_stock","go_stock"},
        DefaultAttName = "Full Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_stock_default.png", "smooth mips"),
        -- GSO support
        InstalledEles = {"stock_231_tube"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(-0.02, 0, -2.7),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Magazine",
        Slot = {"ud_m16_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_mag_30.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Front Sight",
        Slot = {"ud_m16_fs", "ud_m16_charm"},
        FreeSlot = true,
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.65, 16.75), -- 21.75 or 15.75
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sight_magpul"}
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"}, -- "ud_m16_charm"
        FreeSlot = true,
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0.48, 0.5, 3.9),
            vang = Angle(90, 0, -90),
        },
        -- MergeSlots = {17}
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -0.4, 7.2),
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"m16_lmg", "m16_stub"},
    }
}
--lua/weapons/arccw_ud_uzi.lua:
return gluapack()()
--lua/weapons/arccw_ud_mini14.lua:
return gluapack()()
--lua/weapons/arccw_ud_mini14.lua:
return gluapack()()
--lua/weapons/arccw_ud_uzi.lua:
return gluapack()()
--lua/weapons/arccw_ud_uzicarbine.lua:
return gluapack()()
--lua/weapons/arccw_ur_ak.lua:
return gluapack()()
--lua/weapons/arccw_ur_akms.lua:
return gluapack()()
--lua/weapons/arccw_ur_ak.lua:
return gluapack()()
--lua/weapons/arccw_ur_aw.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Urban Coalition" -- edit this if you like
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false

SWEP.PrintName = "AWP"

SWEP.Trivia_Class = "Sniper Rifle"
SWEP.Trivia_Desc = "A heavy rifle purpose-built for extreme range combat under extreme climates, first developed for the British military but quickly adopted by many more. Iconic for its appearance among military and police marksmen, this rifle is a symbol of discipline and order.\n\nOffers outstanding precision and kill potential, but its long bolt pull and reload time can become a hinderance outside its ideal engagement range.\n\nOne shot. One kill. You know the routine."
SWEP.Trivia_Manufacturer = "Accuracy International"
SWEP.Trivia_Calibre = "7.62x51mm NATO"
SWEP.Trivia_Mechanism = "Bolt Action"
SWEP.Trivia_Country = "United Kingdom"
SWEP.Trivia_Year = 1982

if !GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = "Apex Precision"
    SWEP.Trivia_Manufacturer = "Marksman Institute"
end


SWEP.Slot = 3
SWEP.CamAttachment = 3

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/c_ur_aw.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_aw.mdl"
SWEP.ViewModelFOV = 70

SWEP.DefaultBodygroups = "000000000000"

SWEP.BulletBones = {
    --[1] = "top_round",
    [2] = "mag_round",
}

-- Damage --

SWEP.Damage = 80 -- 2 shot close range
SWEP.DamageMin = 50 -- 2 shot long range
SWEP.RangeMin = 100
SWEP.Range = 400 -- 2 shot at ~300m

SWEP.Penetration = 18
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 850
SWEP.PhysBulletMuzzleVelocity = 850

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 5
SWEP.ExtendedClipSize = 10
SWEP.ReducedClipSize = 5

-- Recoil --

SWEP.Recoil = 1.75
SWEP.RecoilSide = 0.75

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 0.3
SWEP.VisualRecoilMult = 5
SWEP.MaxRecoilBlowback = 4
SWEP.MaxRecoilPunch = 4
SWEP.RecoilPunchBack = 3
SWEP.RecoilPunchBackMax = 3.5
SWEP.RecoilPunchBackMaxSights = 2.5

SWEP.Sway = 0.2

-- Firerate / Firemodes --

SWEP.Delay = 60 / 80
SWEP.Num = 1
SWEP.Firemodes = {
    {
        PrintName = "fcg.bolt",
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_crossbow"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = .25
SWEP.HipDispersion = 1250
SWEP.MoveDispersion = 500
SWEP.JumpDispersion = 700 -- tactical unrealism    set to 700 later

SWEP.Primary.Ammo = "ar2"
SWEP.MagID = "awp"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

-- SWEP.Malfunction = true
SWEP.MalfunctionMean = 200
--SWEP.MeleeTime = 1.5

-- Speed multipliers --

SWEP.SpeedMult = 0.8
SWEP.SightedSpeedMult = 0.625
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.625

local path = ")weapons/arccw_ur/ak/"

local testpath = ")weapons/arccw_ur/aw_placeholders/"
local path1 = ")weapons/arccw_ur/aw_placeholders/338/"

local path1 = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rutle = {common .. "movement-sniper-03.ogg",common .. "movement-sniper-04.ogg"}

SWEP.ShootSound = {
    testpath .. "fire-01.ogg",
    testpath .. "fire-02.ogg",
    testpath .. "fire-03.ogg",
    testpath .. "fire-04.ogg",
    testpath .. "fire-05.ogg",
    testpath .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    testpath .. "fire-sup-01.ogg",
    testpath .. "fire-sup-02.ogg",
    testpath .. "fire-sup-03.ogg",
    testpath .. "fire-sup-04.ogg",
    testpath .. "fire-sup-05.ogg",
    testpath .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = testpath .. "dryfire.ogg"

local tail = ")/arccw_uc/common/308/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-308-rif-ext-01.ogg",
    tail .. "fire-dist-308-rif-ext-02.ogg",
    tail .. "fire-dist-308-rif-ext-03.ogg",
    tail .. "fire-dist-308-rif-ext-04.ogg",
    tail .. "fire-dist-308-rif-ext-05.ogg",
    tail .. "fire-dist-308-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-shotgun-01.ogg",
    common .. "fire-dist-int-shotgun-02.ogg",
    common .. "fire-dist-int-shotgun-03.ogg",
    common .. "fire-dist-int-shotgun-04.ogg",
    common .. "fire-dist-int-shotgun-05.ogg",
    common .. "fire-dist-int-shotgun-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.MuzzleEffect = "muzzleflash_ak47"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellPitch = 90
SWEP.ShellScale = 1.145
SWEP.ShellRotateAngle = Angle(0, 0, 0)

SWEP.ManualAction = true
-- SWEP.ManualAction = false
SWEP.NoLastCycle = true

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.IronSightStruct = {
    Pos = Vector(-3.37, -5, 0.68),
    Ang = Angle(0, 0, 2),
    Magnification = 1.1,
    SwitchToSound = "", -- sound that plays when switching to this sight
    CrosshairInSights = false
}
SWEP.LaserOffsetAngle = Angle(0, 0, 0)
SWEP.LaserIronsAngle = Angle(0, 1.5, 0)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(-0.1, 0.1, 0.2)
SWEP.ActiveAng = Angle(0, 0, -1)

SWEP.SprintPos = Vector(-1, -1, 1.2)
SWEP.SprintAng = Angle(-15, 8, -10)

SWEP.CrouchPos = Vector(-2, -2, -0.8)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.HolsterPos = Vector(-1, -1, 1.2)
SWEP.HolsterAng = Angle(-15, 8, -10)

SWEP.BarrelOffsetSighted = Vector(0, 0, 0)
SWEP.BarrelOffsetHip = Vector(0, 0, 0)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

-- SWEP.CustomizePos = Vector(6.5, 0.8, -0.2)
-- SWEP.CustomizeAng = Angle(8, 18, 15)

SWEP.BarrelLength = 54

SWEP.AttachmentElements = {
    ["barrel_long"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        AttPosMods = {[3] = {
            vpos = Vector(0, 40, 1.75),
            vang = Angle(0, 270, 0),
        }}
    },
    ["barrel_short"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
        AttPosMods = {[3] = {
            vpos = Vector(0, 28, 1.75),
            vang = Angle(0, 270, 0),
        }}
    },
    ["barrel_sd"] = {
        VMBodygroups = {{ind = 2, bg = 3}}
    },

    ["mag_338"] = {
        --VMBodygroups = {{ind = 3, bg = 2}}
    },
    ["mag_300"] = {
        --VMBodygroups = {{ind = 3, bg = 2}}
    },
    ["mag_ext"] = {
        --VMBodygroups = {{ind = 3, bg = 1}}
    },
    ["mag_ext_magnum"] = {
        --VMBodygroups = {{ind = 3, bg = 3}}
    },

    ["rail_bottom"] = {
        VMBodygroups = {{ind = 6, bg = 1}}
    },
    ["rail_top"] = {
        VMBodygroups = {{ind = 7, bg = 1}}
    },
    ["sights_compact"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
        Override_IronSightStruct = {
            Pos = Vector(-3.395, -5, 1.35),
            Ang = Angle(0, 0, 2),
            Magnification = 1,
        }
    },
    ["sights_flipped"] = {
        VMBodygroups = {{ind = 8, bg = 1}}
    },

    ["skin_black"] = {
        VMSkin = 1
    },
    ["skin_tan"] = {
        VMSkin = 2
    },
    ["skin_cust"] = {
        VMSkin = 3
    },

    ["stock_at"] = {
        VMBodygroups = {{ind = 4, bg = 1}}
    },
    ["stock_ru"] = {
        VMBodygroups = {{ind = 4, bg = 2}}
    },
    ["stock_ru_rubber"] = {
        VMBodygroups = {{ind = 4, bg = 3}}
    },
    ["stock_fixed"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 5, bg = 1},
        }
    },
    ["stock_none"] = {
        VMBodygroups = {
            {ind = 4, bg = 5},
        }
    },
}

SWEP.ExtraSightDist = 2
SWEP.GuaranteeLaser = true

SWEP.WorldModelOffset = {
    pos = Vector(-7, 5, -4.8),
    ang = Angle(-12, 0, 180)
}

SWEP.MirrorVMWM = true

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        DefaultAttIcon = Material("entities/att/ur_aw/ironsights.png", "mips smooth"),
        Slot = {"optic","optic_lp","optic_sniper"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 6, 2.65),
            vang = Angle(0, -90, 0),
        },
        CorrectivePos = Vector(0, 0, 0),
        CorrectiveAng = Angle(0, 180, 0),
        VMScale = Vector(1.05, 1.05, 1.05),
        SlideAmount = {
            vmin = Vector(0, 5.5, 2.65),
            vmax = Vector(0, 7, 2.65),
        },
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "24\" Police Barrel",
        DefaultAttIcon = Material("entities/att/ur_aw/bar_def.png", "mips smooth"),
        Slot = "ur_aw_barrel",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle","ur_aw_muzzle"},
        Bone = "tag_weapon",
        VMScale = Vector(1.5, 1.5, 1.5),
        WMScale = VMScale,
        Offset = {
            vpos = Vector(0, 35.2, 1.675),
            vang = Angle(0, 270, 0),
        },
        ExcludeFlags = {"barrel_sd"},
        Installed = "ur_aw_muzzle_brake",
    },
    {
        PrintName = "Caliber",
        DefaultAttName = "7.62x51mm NATO",
        DefaultAttIcon = Material("entities/att/uc_bullets/762x51.png", "mips smooth"),
        Slot = {"ur_aw_cal"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_aw_mag"},
        DefaultAttName = "5-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_aw/mag308_5.png", "mips smooth"),
        ExcludeFlags = {"mag_338"}
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,16, -.6),
            vang = Angle(90, -90, -90),
        },
        VMScale = Vector(1, 1, 1),
        InstalledEles = {"rail_bottom"},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(-1.2, 16, 1.1),
            vang = Angle(-90, 270, 0),
        },
        GivesFlags = {"tac"},
        InstalledEles = {"rail_top"}
    },
    {
        PrintName = "Stock",
        Slot = {"ur_aw_stock"},
        DefaultAttName = "Factory Stock",
        DefaultAttIcon = Material("entities/att/ur_aw/stock_def.png", "mips smooth"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
        HideIfBlocked = true
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(.85, 4.6, 0.5),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "Finish",
        Slot = {"ur_aw_skin"},
        FreeSlot = true,
        DefaultAttName = "Olive Drab",
        DefaultAttIcon = Material("entities/att/ur_aw/skin_green.png", "mips smooth"),
    }
}


function SWEP:Hook_TranslateAnimation(anim)

end

SWEP.Hook_NameChange = function(wep,name)
    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_aw_barrel_", "")
    local cal = string.Replace(atts[4].Installed or "default", "ur_aw_cal_", "")
    local stock = string.Replace(atts[8].Installed or "default", "ur_aw_stock_", "")

    if GetConVar("arccw_truenames"):GetBool() then
        if cal ~= "default" then
            return "AWM"
        elseif barr == "sd" then
            return "AWS"
        elseif stock == "at" then
            return "AT"
        end
    else
        if cal == "338" then
            return "Apex Magnum"
        elseif barr == "sd" then
            return "Apex Spectre"
        elseif stock == "at" then
            return "Apex Tactical"
        end
    end
end

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    if !IsValid(vm) then return end

    local atts = wep.Attachments
    local cal = string.Replace(atts[4].Installed or "default", "ur_aw_cal_", "")
    local mag = string.Replace(atts[5].Installed or "default", "ur_aw_mag_", "")
    local flags = wep:GetWeaponFlags()

    local pistolGrip = table.HasValue(flags,"pistolgrip")

    if cal ~= "default" then
        if pistolGrip then
            vm:SetBodygroup(1,3)
        else
            vm:SetBodygroup(1,1)
        end
    elseif pistolGrip then
        vm:SetBodygroup(1,2)
    else
        vm:SetBodygroup(1,0)
    end

    if atts[1].Installed then
        if table.HasValue(flags,"sights_compact") then
            vm:SetBodygroup(8,3)
        else
            vm:SetBodygroup(8,1)
        end
    end

    if mag == "10" then
        vm:SetBodygroup(3,1)
    elseif mag == "10m" then
        vm:SetBodygroup(3,3)
    elseif cal ~= "default" then
        vm:SetBodygroup(3,2)
    end
end

SWEP.Animations = {
    ["ready"] = {
        Source = "cycle",
         Time = 1.47,
        MinProgress = 1.3,
        SoundTable = {
            {s = ratel,                             t = 0.07},
            {s = testpath .. "boltup.ogg",          t = 0.1},
            {s = testpath .. "boltback.ogg",        t = 0.2},
            {s = testpath .. "boltforward.ogg",     t = 0.32},
            {s = testpath .. "boltdown.ogg",        t = 0.6},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle"
    },
    ["idle_empty"] = {
        Source = "idle_empty"
    },
    ["draw"] = {
        Source = "draw",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        Time = 35 / 30,
        MinProgess = .5,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "raise.ogg", t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        Time = .75,
        SoundTable = {
            {s = ratel, t = 0},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 35 / 30,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "raise.ogg", t = 0.2},
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
        },
    },
    ["fire"] = {
        Source = {"fire"},
        Time = 27 / 30,
        MinProgress = 0.2,
        SoundTable = {
            SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
        },
    },

    ["fire_iron"] = {
        Source = {"fire_iron"},
        Time = 27 / 30,
        MinProgress = 0.2,
        SoundTable = {
            SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
        },
    },

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1,
        Time = 85 / 30,
        LHIKEaseOut = 0.25,
        MinProgress = 1.5,
        SoundTable = {
            {s = rottle,                             t = 0.1},
            {s = testpath .. "magrel.ogg", 	t = 0.2},
            {s = testpath .. "magout.ogg",          t = 0.3},
            {s = rottle,    t = 0.75},
            {s = common .. "magpouch.ogg",           t = 0.8, v = 0.4},
            {s = testpath .. "struggle.ogg",   t = 0.9},
            {s = testpath .. "magin.ogg",   t = 1.2},
            {s = rottle,    t = 1.4},
            {s = ratel,   t = 1.5},
        },
    },
    ["reload_10"] = {
        Source = "reload_exte",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1.15,
        LHIKEaseOut = 0.25,
        MinProgress = 2.5,
        SoundTable = {
            {s = rottle,                             t = 0.1},
            {s = testpath .. "magrel.ogg", 	t = 0.2},
            {s = testpath .. "magout.ogg",          t = 0.3},
            {s = rottle,    t = 0.75},
            {s = common .. "magpouch.ogg",           t = 0.8, v = 0.4},
            {s = testpath .. "struggle.ogg",   t = 0.9},
            {s = testpath .. "magin.ogg",   t = 1.2},
            {s = rottle,    t = 1.4},
            {s = ratel,   t = 1.5},
        },
    },
    ["reload_338"] = {
        Source = "reload_magnum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1.15,
        LHIKEaseOut = 0.25,
        MinProgress = 2.5,
        Time = 3.4,
        SoundTable = {
            {s = rottle,                             t = 0.1},
            {s = testpath .. "magrel.ogg", 	t = 0.2},
            {s = testpath .. "magout.ogg",          t = 0.4},
            {s = rottle,    t = 0.75},
            {s = common .. "magpouch.ogg",           t = 0.8, v = 0.4},
            {s = testpath .. "struggle.ogg",   t = 1.1, v = 1.1},
            {s = testpath .. "magin.ogg",   t = 1.3},
            {s = testpath .. "magtap.ogg",   t = 1.95},
            {s = rottle,    t = 2.3, v = 0.6},
            {s = ratel,   t = 2.35, v = 0.6},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = false,
        LHIKIn = 0.9,
        LHIKOut = 1.25,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.5,
        MinProgress = 3.0,
        ShellEjectAt = .45,
        LastClip1OutTime = 1.8,
        Time = 4.5,
        SoundTable = {
            {s = ratel,                             t = 0.05},
            {s = testpath .. "boltup.ogg",          t = 0.15},
            {s = testpath .. "boltback_reload.ogg",        t = 0.18},
            {s = testpath .. "eject.ogg",           t = 0.45},
            {s = rottle,    t = 0.6},
            {s = testpath .. "magrel.ogg", 	t = 1.0},
            {s = testpath .. "magout_empty.ogg",          t = 1.2},
            {s = rottle,    t = 1.25},
            {s = testpath .. "magdrop_metal.ogg",          t = 1.5, v = 0.4},
            {s = common .. "magpouch.ogg",           t = 1.6, v = 0.4},
            {s = rottle,    t = 1.65},
            {s = testpath .. "struggle.ogg",   t = 2},
            {s = testpath .. "magin.ogg",   t = 2.1},
            {s = rottle,    t = 2.4},
            {s = ratel,   t = 2.6},
            {s = testpath .. "boltforward_reload.ogg",     t = 2.7},
            {s = testpath .. "boltdown.ogg",        t = 3.1},
            {s = common .. "shoulder.ogg",        t = 3.15},
        },
    },
    ["reload_empty_10"] = {
        Source = "reload_empty_exte",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = false,
        LHIKIn = 0.9,
        LHIKOut = 1.25,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.5,
        ShellEjectAt = .5,
        MinProgress = 3.5,
        LastClip1OutTime = 1.8,
        Time = 4.5,
        SoundTable = {
            {s = ratel,                             t = 0.05},
            {s = testpath .. "boltup.ogg",          t = 0.15},
            {s = testpath .. "boltback_reload.ogg",        t = 0.18},
            {s = testpath .. "eject.ogg",           t = 0.45},
            {s = rottle,    t = .6},
            {s = testpath .. "magrel.ogg", 	t = 1.0},
            {s = testpath .. "magout_empty.ogg",          t = 1.2},
            {s = rottle,    t = 1.25},
            {s = testpath .. "magdrop_metal.ogg",          t = 1.6, v = 0.4},
            {s = common .. "magpouch.ogg",           t = 1.6, v = 0.4},
            {s = rottle,    t = 1.65},
            {s = testpath .. "struggle.ogg",   t = 2.1},
            {s = testpath .. "magin.ogg",   t = 2.2},
            {s = rottle,    t = 2.5},
            {s = testpath .. "boltforward_reload.ogg",     t = 2.8},
            {s = ratel,   t = 2.7},
            {s = testpath .. "boltdown.ogg",        t = 3.2},
            {s = common .. "shoulder.ogg",        t = 3.2},
        },
    },
    ["reload_empty_338"] = {
        Source = "reload_empty_magnum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = false,
        LHIKIn = 0.9,
        LHIKOut = 1.25,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.5,
        ShellEjectAt = .5,
        LastClip1OutTime = 1.5,
        MinProgress = 4,
        Time = 4.25,
        SoundTable = {
            {s = ratel,                             t = 0.05},
            {s = testpath .. "boltup.ogg",          t = 0.15},
            {s = testpath .. "boltback_reload.ogg",        t = 0.18},
            {s = testpath .. "eject.ogg",           t = 0.45},
            {s = rottle,    t = 0.6},
            {s = testpath .. "magrel.ogg", 	t = 1.0},
            {s = testpath .. "magout_empty.ogg",          t = 1.1},
            {s = rottle,    t = 1.25},
            {s = testpath .. "magdrop_metal.ogg",          t = 1.5, v = 0.4},
            {s = common .. "magpouch.ogg",           t = 1.6, v = 0.4},
            {s = rottle,    t = 1.65},
            {s = testpath .. "struggle.ogg",   t = 1.8},
            {s = testpath .. "magin.ogg",   t = 1.9},
            {s = rottle,    t = 2.4},
            {s = testpath .. "magtap.ogg",   t = 2.5},
            {s = ratel,   t = 2.6},
            {s = testpath .. "boltforward_reload.ogg",     t = 2.7},
            {s = testpath .. "boltdown.ogg",        t = 3.1},
            {s = common .. "shoulder.ogg",        t = 3.15},
        },
    },
    ["reload_empty_10_338"] = {
        Source = "reload_empty_exte_magnum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.9,
        LHIKOut = 1.25,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.5,
        MinProgress = 4,
        LastClip1OutTime = 2.3,
        Time = 4.5,
        ShellEjectAt = .5,
        SoundTable = {
            {s = ratel,                             t = 0.05},
            {s = testpath .. "boltup.ogg",          t = 0.15},
            {s = testpath .. "boltback_reload.ogg",        t = 0.18},
            {s = testpath .. "eject.ogg",           t = 0.45},
            {s = rottle,    t = 0.6},
            {s = testpath .. "magrel.ogg", 	t = 1.0},
            {s = testpath .. "magout_empty.ogg",          t = 1.1},
            {s = rottle,    t = 1.25},
            {s = testpath .. "magdrop_metal.ogg",          t = 1.5, v = 0.4},
            {s = common .. "magpouch.ogg",           t = 1.6, v = 0.4},
            {s = rottle,    t = 1.65},
            {s = testpath .. "struggle.ogg",   t = 1.85},
            {s = testpath .. "magin.ogg",   t = 2.0},
            {s = rottle,    t = 2.4},
            {s = testpath .. "magtap.ogg",   t = 2.6},
            {s = ratel,   t = 2.6},
            {s = testpath .. "boltforward_reload.ogg",     t = 2.9},
            {s = testpath .. "boltdown.ogg",        t = 3.3},
            {s = common .. "shoulder.ogg",        t = 3.35},
        },
    },
    ["reload_10_338"] = {
        Source = "reload_exte_magnum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 3,
        Time = 3.5,
        SoundTable = {
            {s = rottle,                             t = 0.1},
            {s = testpath .. "magrel.ogg", 	t = 0.2},
            {s = testpath .. "magout.ogg",          t = 0.4},
            {s = rottle,    t = 0.75},
            {s = common .. "magpouch.ogg",           t = 0.8, v = 0.4},
            {s = testpath .. "struggle.ogg",   t = 1.1, v = 1},
            {s = testpath .. "magin.ogg",   t = 1.4},
            {s = testpath .. "magtap.ogg",   t = 2.0},
            {s = rottle,    t = 2.3, v = 0.6},
            {s = ratel,   t = 2.35, v = 0.6},
        },
    },
    ["cycle"] = {
        Source = "cycle",
        Time = 1.47,
        ShellEjectAt = 0.4,
        MinProgress = 0.9,
        SoundTable = {
            {s = ratel,                             t = 0.07},
            {s = testpath .. "boltup.ogg",          t = 0.1},
            {s = testpath .. "boltback.ogg",        t = 0.2},
            {s = testpath .. "boltforward.ogg",     t = 0.32},
            {s = testpath .. "eject.ogg",           t = 0.4},
            {s = testpath .. "boltdown.ogg",        t = 0.6},

            --{s = common .. "shoulder.ogg",          t = 0.7},
        },
    },

    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-sniper-03.ogg", t = 0.05},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-sniper-01.ogg", t = 0},
            {s = rottle, t = 0.25},
            {s = testpath .. "boltup_inspect.ogg",          t = 1.2},
            {s = common .. "movement-sniper-03.ogg", t = 1.25},
            {s = testpath .. "boltback_inspect.ogg",        t = 1.35},
            {s = testpath .. "boltforward_inspect.ogg",     t = 1.8},
            {s = testpath .. "boltdown_inspect.ogg",        t = 1.9},
            {s = rottle, t = 2.0},
            {s = common .. "movement-sniper-04.ogg", t = 2.2},
        },
    },
    ["enter_inspect_empty"] = { -- Animations needed!
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = rutle, t = 0.1},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect_empty"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-sniper-01.ogg", t = 0.05},
            {s = rottle, t = 0.25},
            {s = testpath .. "boltup_inspect.ogg",          t = 1.2},
            {s = common .. "movement-sniper-03.ogg", t = 1.25},
            {s = testpath .. "boltback_inspect.ogg",        t = 1.35},
            {s = testpath .. "boltforward_inspect.ogg",     t = 1.8},
            {s = testpath .. "boltdown_inspect.ogg",        t = 1.9},
            {s = rottle, t = 2.0},
            {s = common .. "movement-sniper-04.ogg", t = 2.2},
        },
    },
}

SWEP.Hook_Think = ArcCW.UC.ADSReload

--lua/weapons/arccw_ur_deagle.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_pistol_deagle"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/50ae.mdl"
SWEP.ShellScale = 1
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_9mm"
SWEP.ShellPitch = 90
SWEP.UC_ShellColor = Color(0.7*255, 0.2*255, 0.2*255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.TracerNum = 1
SWEP.TracerWidth = 1
SWEP.ShootPitch = 100

-- Fake name --

SWEP.PrintName = "Predator .50"

-- True name --

SWEP.TrueName = "Desert Eagle"

-- Trivia --

SWEP.Trivia_Class = "Pistol"
SWEP.Trivia_Desc = "Unorthodox pistol in both weight and design, marketed as an alternative to high-caliber revolvers. Its huge rounds, unrivaled in power for a handgun cartridge, can easily blast a human skull apart.\nDespite being one of the most famous weapons in action culture, it rarely sees practical use because of its massive, bulky frame and pointlessly large caliber.\n\nWe both know that won't stop you."
SWEP.Trivia_Manufacturer = "ISM"
SWEP.Trivia_Calibre = ".50 Action Express"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "Israel"
SWEP.Trivia_Year = 1983

-- Weapon slot --

SWEP.Slot = 1

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Magnum Research"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_deagle.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_deagle.mdl"
SWEP.ViewModelFOV = 60
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER

-- Damage parameters --

SWEP.Damage = 80 -- 2 shot close range kill
SWEP.DamageMin = 12 -- 9 shot long range kill (big bullet falls off quickly)
SWEP.RangeMin = 10
SWEP.Range = 120 -- 2 shot until ~50m
SWEP.Penetration = 9
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 470
SWEP.PhysBulletMuzzleVelocity = 470

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Jamming --

--SWEP.Malfunction = true
SWEP.MalfunctionJam = true
--SWEP.MalfunctionMean = 21
SWEP.MalfunctionPostFire = true
SWEP.MalfunctionTakeRound = false

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 7
SWEP.ExtendedClipSize = 14
SWEP.ReducedClipSize = 5

-- Recoil --

SWEP.Recoil = 3.95
SWEP.RecoilSide = 1

SWEP.RecoilRise = 0.5
SWEP.VisualRecoilMult = 1.5
SWEP.MaxRecoilBlowback = 2
SWEP.MaxRecoilPunch = 6

SWEP.Sway = 1.1

-- Firerate / Firemodes --

SWEP.Delay = 60 / 200
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_357"
SWEP.NPCWeight = 70

-- Accuracy --

SWEP.AccuracyMOA = 5
SWEP.HipDispersion = 600
SWEP.MoveDispersion = 200
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "357"
SWEP.MagID = "deagle"

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.25
SWEP.ShootSpeedMult = 0.8

-- Length --

SWEP.BarrelLength = 12
SWEP.ExtraSightDist = 10

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.3, 3, 1)
SWEP.HolsterAng = Angle(-5, 15, -20)

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "revolver"
SWEP.HoldtypeSights = "revolver"

SWEP.IronSightStruct = {
     Pos = Vector(-2.549, 1, 1.505),
     Ang = Angle(0, 0, 0),
     Magnification = 1.1,
     SwitchToSound = "",
     ViewModelFOV = 55,
}

SWEP.ActivePos = Vector(-0.5, 1.5, 1.15)
SWEP.ActiveAng = Angle(0.5, 0.5, -2)

SWEP.CustomizePos = Vector(-1, -2, 2)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2.2, 1, 0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-10.5, 4, -4),
    ang        =    Angle(-6, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
}

-- Weapon sounds --

local path = ")weapons/arccw_ur/deagle/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local rutle = {common .. "movement-smg-03.ogg",common .. "movement-smg-04.ogg"}

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}

SWEP.ShootSoundSilenced = path .. "fire_sup.ogg"
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/50ae/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-50ae-pistol-ext-01.ogg",
    tail .. "fire-dist-50ae-pistol-ext-02.ogg",
    tail .. "fire-dist-50ae-pistol-ext-03.ogg",
    tail .. "fire-dist-50ae-pistol-ext-04.ogg",
    tail .. "fire-dist-50ae-pistol-ext-05.ogg",
    tail .. "fire-dist-50ae-pistol-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-shotgun-01.ogg",
    common .. "fire-dist-int-shotgun-02.ogg",
    common .. "fire-dist-int-shotgun-03.ogg",
    common .. "fire-dist-int-shotgun-04.ogg",
    common .. "fire-dist-int-shotgun-05.ogg",
    common .. "fire-dist-int-shotgun-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 0.75
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [1] = "Bullet1",    [2] = "Bullet2",    [3] = "Bullet3", [4] = "Bullet4",    [5] = "Bullet5",    [6] = "Bullet6", [7] = "Bullet7"
}

SWEP.DefaultBodygroups = "000000000"

SWEP.AttachmentElements = {
    ["ur_deagle_barrel_modern"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
    },
    ["ur_deagle_barrel_compact"] = {
        VMBodygroups = {{ind = 1, bg = 5}},
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 0, .15),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["ur_deagle_barrel_compen"] = {
        VMBodygroups = {{ind = 1, bg = 4}},
    },
    ["ur_deagle_barrel_ext"] = {
        VMBodygroups = {{ind = 1, bg = 2}},
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 0, 1.95),
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["ur_deagle_barrel_marksman"] = {
        VMBodygroups = {{ind = 1, bg = 3}},
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.05, 5.1),
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["ur_deagle_barrel_annihilator"] = {
        VMBodygroups = {{ind = 1, bg = 6}},
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.05, 1.25),
                vang = Angle(90, 0, -90),
            },
        },
    },

    ["ur_deagle_mag_ext"] = {
        VMBodygroups = {{ind = 2, bg = 1}}
    },

    ["ur_deagle_grip_wooden"] = {
        VMBodygroups = {{ind = 4, bg = 1}}
    },
    ["ur_deagle_grip_rubber"] = {
        VMBodygroups = {{ind = 4, bg = 2}}
    },

    ["tac_rail"] = {
        VMBodygroups = {{ind = 5, bg = 1}}
    },
    ["ur_deagle_caliber_44"] = {
        VMBodygroups = {{ind = 6, bg = 1}}
    },
    ["ur_deagle_caliber_357"] = {
        VMBodygroups = {{ind = 6, bg = 2}}
    },
    ["ur_deagle_caliber_410"] = {
        VMBodygroups = {{ind = 6, bg = 3}}
    },

    ["ur_deagle_skin_black"] = {
        VMSkin = 1,
    },
    ["ur_deagle_skin_gold"] = {
        VMSkin = 2,
    },
    ["ur_deagle_skin_chrome"] = {
        VMSkin = 3,
    },
    ["ur_deagle_skin_modern"] = {
        VMBodygroups = {{ind = 0, bg = 1}},
        VMSkin = 3,
    },    
    ["ur_deagle_skin_sex"] = {
        VMBodygroups = {{ind = 0, bg = 1}},
        VMSkin = 4,
    },
}

SWEP.Hook_ModifyBodygroups = function(wep,data)
    local vm = data.vm
    if !IsValid(vm) then return end
    local optic = wep.Attachments[1].Installed
    local tritium = (optic == "ur_deagle_tritium")
    local barrel = wep.Attachments[2].Installed or 0

    if tritium then
        -- Setup for when we introduce new barrel options
        if barrel == "ur_deagle_barrel_marksman" then
            vm:SetBodygroup(3,3)
        elseif barrel == "ur_deagle_barrel_ext" then
            vm:SetBodygroup(3,2)
        elseif barrel == "ur_deagle_barrel_compact" then
            vm:SetBodygroup(3,4)
        elseif barrel == "ur_deagle_barrel_annihilator" then
            vm:SetBodygroup(3,5)
        else
            vm:SetBodygroup(3,1)
        end
    -- elseif optic and barrel == 0 then
    --     vm:SetBodygroup(1,1)
    end

    if barrel == "ur_deagle_barrel_annihilator" then
        if vm:GetBodygroup(5) == 1 then
            vm:SetBodygroup(5,2)
        end
    end
end

SWEP.Hook_NameChange = function(wep, name)
    if wep.Attachments[2].Installed == "ur_deagle_barrel_annihilator" then
        return "Annihilator"
    elseif !GetConVar("arccw_truenames"):GetBool() then
        local add = ".50"
        local cal = wep.Attachments[3].Installed

        if cal == "ur_deagle_caliber_357" then
            add = ".357"
        elseif cal == "ur_deagle_caliber_44" then
            add = ".44"
        elseif cal == "ur_deagle_caliber_410" then
            add = ".410"
        end

        return "Predator " .. add
    else
        return "Desert Eagle"
    end
end

-- Animations --

SWEP.Animations = {
    ["idle_empty"] = {
        Source = "idle_empty",
        Time = 120 / 60,
    },
    ["idle_jammed"] = {  -- pistol-like malfucntions not implemented yet in arccw
        Source = "idle_jammed",
        Time = 120 / 60,
    },
    ["idle"] = {
        Source = "idle",
        Time = 120 / 60,
    },
    ["ready"] = {
        Source = "ready",
        Time = 73 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = path .. "slidepull.ogg", t = 12 / 60, c = ca },
            { s = path .. "chamber.ogg", t = 20 / 60, c = ca },
        },
    },
    ["draw"] = {
        Source = "draw",
        ProcDraw = true,
        SoundTable = {
            --{s = path .. "draw.ogg", t = 0}, -- Not Temporary
            {s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["holster"] = {
        Source = "holster",
        ProcHolster = true,
        SoundTable = {
            {s = rottle, t = 0},
            --{s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },

    ["fire"] = {
        Source = {"fire_01", "fire_02", "fire_03"},
        Time = 0.9,
        ShellEjectAt = 0.05,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = {"fire_01", "fire_02", "fire_03"},
        Time = 0.9,
        ShellEjectAt = 0.05,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_jammed"] = {
        Source = "fire_jammed",
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 0.9,
        ShellEjectAt = 0.05,
        SoundTable = {{ s = path .. "mech_last.ogg", t = 0 }},
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 0.9,
        ShellEjectAt = 0.05,
        SoundTable = {{ s = path .. "mech_last.ogg", t = 0 }},
    },

    -- 7-R Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.3525,
        Time = 2.2,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.6,
        LHIKOut = 0.62,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout.ogg", t = 6 / 60, c = ca },
            { s = rottle, t = 10 / 60, c = ca },
            { s = common .. "magpouch_pull_small.ogg", t = 30 / 60, c = ca },
            { s = rottle, t = 55 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 61 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 66 / 60, c = ca },
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.75,
        Time = 2.55,
        LastClip1OutTime = 0.76,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.55,
        LHIKOut = 0.7,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout_old.ogg", t = 8 / 60, c = ca },
            { s = rottle, t = 10 / 60, c = ca },
            { s = common .. "magpouch_pull_small.ogg", t = 26 / 60, c = ca },
            { s = common .. "pistol_magdrop.ogg", t = 40 / 60, c = ca },
            { s = rottle, t = 55 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 58 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 62 / 60, c = ca },
            { s = path .. "chamber.ogg", t = 90 / 60, c = ca },
            { s = rottle, t = 75 / 60, c = ca },
        },
    },

    -- 10-R Reloads --

    ["reload_10"] = {
        Source = "reload_exte",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.3525,
        Time = 139 / 60,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.6,
        LHIKOut = 0.62,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout.ogg", t = 6 / 60, c = ca },
            { s = rottle, t = 10 / 60, c = ca },
            { s = common .. "magpouch.ogg", t = 30 / 60, c = ca },
            { s = rottle, t = 55 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 64 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 71 / 60, c = ca },
        },
    },
    ["reload_empty_10"] = {
        Source = "reload_empty_exte",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.75,
        Time = 160 / 60,
        LastClip1OutTime = 0.76,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.55,
        LHIKOut = 0.7,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout_old.ogg", t = 8 / 60, c = ca },
            { s = rottle, t = 10 / 60, c = ca },
            { s = common .. "magpouch.ogg", t = 26 / 60, c = ca },
            { s = common .. "pistol_magdrop.ogg", t = 40 / 60, c = ca },
            { s = rottle, t = 55 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 60 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 66 / 60, c = ca },
            { s = path .. "chamber.ogg", t = 94 / 60, c = ca },
            { s = rottle, t = 75 / 60, c = ca },
        },
    },

    ["unjam"] = {
        Source = "unjam",
        Time = 0.9,
        -- ShellEjectAt = 0.65,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "unjam.ogg", t = .4}
        },
        LHIK = true,
        LHIKIn = .2,
        LHIKOut = .2,
        LHIKEaseOut = .75,
    },
    -- Inspecc --
                                    -- disabled due to suck balls
    ["enter_inspect"] = {
        Source = "enter_inspect",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = rutle, t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "idle_inspect",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect"] = {
        Source = "exit_inspect",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout.ogg", t = 8 / 60, c = ca },
            { s = rottle, t = 100 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 106 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 114 / 60, c = ca },
            { s = path .. "rack1.ogg", t = 155 / 60, c = ca },
            { s = rottle, t = 160 / 60, c = ca },
            { s = path .. "rack2.ogg", t = 178 / 60, c = ca },
            { s = rottle, t = 180 / 60, c = ca },
        },
    },

    ["enter_inspect_empty"] = {
        Source = "enter_inspect_empty",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKOut = 0,
        SoundTable = {
        },
    },
    ["idle_inspect_empty"] = {
        Source = "idle_inspect_empty",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty"] = {
        Source = "exit_inspect_empty",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout.ogg", t = 8 / 60, c = ca },
            { s = rottle, t = 100 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 106 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 114 / 60, c = ca },
            { s = rottle, t = 160 / 60, c = ca },
        },
    },

    ["enter_inspect_jammed"] = {
        Source = "enter_inspect_jammed",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKOut = 0,
        SoundTable = {
        },
    },
    ["idle_inspect_jammed"] = {
        Source = "idle_inspect_jammed",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_jammed"] = {
        Source = "exit_inspect_jammed",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout.ogg", t = 8 / 60, c = ca },
            { s = rottle, t = 100 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 106 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 114 / 60, c = ca },
            { s = rottle, t = 160 / 60, c = ca },
        },
    },
}

-- ADS animation blending, thanks fesiug --

SWEP.Hook_Think = function(wep)
    if IsValid(wep) and wep.ArcCW then
        local vm = wep:GetOwner():GetViewModel()

        local delta = 1-wep:GetSightDelta()

        local bipoded = wep:GetInBipod()
        wep.ADSBipodAnims = math.Approach(wep.ADSBipodAnims or 0, bipoded and 1 or 0, FrameTime() / 0.5)

        vm:SetPoseParameter("sights", Lerp( math.ease.InOutCubic(math.max(delta, wep.ADSBipodAnims)), 0, 1)) -- thanks fesiug

        local slot = wep.Attachments[3].Installed
        if wep.Attachments[7].Installed or slot == "ur_deagle_caliber_357" then
            vm:SetPoseParameter("light", 1)
        elseif slot == "ur_deagle_caliber_44" then
            vm:SetPoseParameter("light", .5)
        else
            vm:SetPoseParameter("light", 0)
        end
    end
end


-- Attachments --

SWEP.CamAttachment = 3

SWEP.Attachments = {
    {
        PrintName = "Optic",
        Slot = {"optic_lp","ur_deagle_tritium","optic"},
        DefaultAttName = "Iron Sights",
        Bone = "Body",
        Offset = {
            vpos = Vector(0, -5.15, 6.4),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Barrel",
        Slot = {"ur_deagle_barrel"},
        DefaultAttIcon = Material("entities/att/acwatt_ur_deagle_barrel.png","mips smooth"),
        DefaultAttName = "6\" Standard Barrel",
        Bone = "Body",
        Offset = {
            vpos = Vector(3.07, -3.8, -27),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Caliber",
        Slot = {"ur_deagle_caliber"},
        DefaultAttIcon = Material("entities/att/uc_bullets/50ae.png","mips smooth"),
        DefaultAttName = ".50 Action Express",
        Bone = "Body",
        Offset = {
            vpos = Vector(3.07, -3.8, -27),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "Barrel",
        Offset = {
            vpos = Vector(0, 0, 0.75),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"nofh"},
        ExcludeFlags = {"barrel_annihilator"},
		Hidden = true,
		Integral = true,
    },
    {
        PrintName = "Tactical",
        InstalledEles = {"tac_rail"},
        Slot = {"tac_pistol"},
        Bone = "Body",
        Offset = {
            vpos = Vector(0, -3.5, 7),
            vang = Angle(90, 0, -90),
        },
        MergeSlots = {15},
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_deagle_mag"},
        DefaultAttIcon = Material("entities/att/acwatt_ur_deagle_mag_7.png","mips smooth"),
        DefaultAttName = "7-Round Mag",
    },
    {
        PrintName = "Stock",
        Slot = {"uc_stock", "go_stock_pistol_bt"},
        VMScale = Vector(1.1, 1.1, 1.1),
        Bone = "Body",
        Offset = {
            vpos = Vector(0, -0.25, -1),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Grip",
        DefaultAttName = "Factory Grip",
        DefaultAttIcon = Material("entities/att/acwatt_ur_deagle_grip_plastic.png","mips smooth"),
        Slot = "ur_deagle_grip"
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm","fml_charm"},
        FreeSlot = true,
        Bone = "Body",
        Offset = {
            vpos = Vector(0.55, -3.4, 4.2),
            vang = Angle(90, 0, -90),
        },
        VMScale = Vector(.65,.65,.65),
    },
    {
        PrintName = "Finish",
        Slot = {"ur_deagle_skin"},
        DefaultAttName = "Stainless Steel",
        DefaultAttIcon = Material("entities/att/acwatt_ur_deagle_finish_default.png","mips smooth"),
        FreeSlot = true,
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "Body",
        Offset = {
            vpos = Vector(0, -4.8, 6.0),
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
    }
}
--lua/weapons/arccw_ur_hk53.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_g3.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "CN109"
SWEP.TrueName = "HK53"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ur_g3_barrel_8"
SWEP.Attachments[3].Installed = "ur_g3_rec_hk33"
SWEP.Attachments[4].Installed = "ur_mp5_ub_surefire"
SWEP.Attachments[8].Installed = "ur_g3_stock_collapsible"
SWEP.Attachments[9].Installed = "ur_g3_mag_20_556"

SWEP.Attachments[8].ToggleLock = true
--lua/weapons/arccw_ur_mp5eod.lua:
return gluapack()()
--lua/weapons/arccw_ur_mp5eod.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_mp5.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets SMGs"
end

SWEP.PrintName = "PK5 EOD"
SWEP.TrueName = "MP5 EOD"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ur_mp5_barrel_eod"
SWEP.Attachments[3].Installed = "ur_mp5_caliber_noburst"
SWEP.Attachments[8].Installed = "ur_mp5_stock_a3"
SWEP.Attachments[15].Installed = "uc_ubgl_m203" -- UBGLs go in the funny hidden slot, not the UB slot

SWEP.Attachments[8].ToggleLock = true
SWEP.Attachments[15].ToggleLock = true
SWEP.Attachments[15].ToggleNum = 1
--lua/weapons/arccw_ur_mp5kpdw.lua:
return gluapack()()
--lua/weapons/arccw_ur_ak.lua:
return gluapack()()
--lua/weapons/arccw_ur_ak.lua:
return gluapack()()
--addons/ch_bitminers_dlc/lua/weapons/ch_bitminers_tablet/shared.lua:
return gluapack()()
--addons/cityworker/lua/weapons/cityworker_config.lua:
SWEP.PrintName              = "Configurator"
SWEP.Author                 = "Silhouhat"
SWEP.Purpose                = "City Worker"
SWEP.Instructions           = "LMB to add a new position\nRMB to delete an existing position\nReload to update existing positions."

SWEP.Category               = "City Worker"
SWEP.Spawnable              = true
SWEP.AdminOnly              = true

SWEP.Primary.ClipSize		= -1
SWEP.Primary.DefaultClip	= -1
SWEP.Primary.Automatic		= true
SWEP.Primary.Ammo		    = "none"

SWEP.Secondary.ClipSize		= -1
SWEP.Secondary.DefaultClip	= -1
SWEP.Secondary.Automatic	= false
SWEP.Secondary.Ammo		    = "none"

SWEP.Weight			        = 5
SWEP.AutoSwitchTo		    = false
SWEP.AutoSwitchFrom		    = false

SWEP.Slot			        = 2
SWEP.SlotPos			    = 1
SWEP.DrawAmmo			    = false
SWEP.DrawCrosshair		    = true

SWEP.ViewModel	    	    = "models/weapons/c_toolgun.mdl"
SWEP.WorldModel	        	= "models/weapons/w_toolgun.mdl"


function SWEP:Initialize()
    self:SetHoldType( "revolver" )
end

local cwEnts = {
    ["Fire Hydrant"] = "cityworker_hydrant",
    ["Leak"] = "cityworker_leak",
    ["Rubble"] = "cityworker_rubble",
    ["Electrical"] = "cityworker_electric"
}

function SWEP:PrimaryAttack()
    if not IsFirstTimePredicted() then return end
    self:SetNextPrimaryFire( CurTime() + 0.2 )

    if CLIENT and not self.spawnmenu then
        self.spawnmenu = vgui.Create( "DMenu" )
        self.spawnmenu:Center()

        for name, class in pairs( cwEnts ) do
            local entry = self.spawnmenu:AddOption( name )
            entry.cwClass = class
            entry:SetIcon( "icon16/add.png" )
        end

        self.spawnmenu.OptionSelected = function( pnl, option, optionText )
            local class = option.cwClass

            net.Start( "CITYWORKER.Add" )
                net.WriteString( class )
            net.SendToServer()
        end

        self.spawnmenu.OnRemove = function()
            gui.EnableScreenClicker( false )
            self.spawnmenu = false
        end

        gui.EnableScreenClicker( true )
    end
end

local reloadDelay = 0

function SWEP:Reload()
    if SERVER then
        if reloadDelay > CurTime() then return end

        reloadDelay = CurTime() + 1

        CITYWORKER.SendData( self.Owner )
    end
end

function SWEP:SecondaryAttack()
    if not IsFirstTimePredicted() then return end
    self:SetNextSecondaryFire( CurTime() + 0.2 )

    if CLIENT then
        Derma_StringRequest( "Remove city worker task position.", "What is the id of the city worker task you'd like to remove?", "1", function( str )
            if not str then return end
            local id = tonumber( str )
            if not id then return end

            if id > 255 then return end
        
            net.Start( "CITYWORKER.Remove" )
                net.WriteUInt( id, 8 )
            net.SendToServer()
        end )
    end
end

function SWEP:Think()
    -- Because SWEP:Initialize() doesn't seem to work with this.
    if SERVER and not self.hasSendCWData then
        self.hasSendCWData = true
        CITYWORKER.SendData( self.Owner )
    end
end

if CLIENT then

    local CW_DEFINITIONS = {
        ["cityworker_rubble"] = "Rubble",
        ["cityworker_hydrant"] = "Fire Hydrant",
        ["cityworker_leak"] = "Leak",
        ["cityworker_electric"] = "Electrical",
    }

    local jobPositions = {}

    function SWEP:DrawHUD()
        for k, v in pairs( jobPositions ) do
            local scrPos = v.pos:ToScreen()

            draw.SimpleTextOutlined( "ID: "..k, "Trebuchet18", scrPos.x, scrPos.y - 15, Color( 255, 255, 255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP, 1, Color( 0, 0, 0 ) )
            draw.SimpleTextOutlined( CW_DEFINITIONS[v.class], "Trebuchet18", scrPos.x, scrPos.y, Color( 255, 255, 255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP, 1, Color( 0, 0, 0 ) )
            --draw.SimpleTextOutlined( math.ceil( ( LocalPlayer():GetPos():Distance( v.pos ) / 16 ) / 3.28084 ).."m", "Trebuchet18", scrPos.x, scrPos.y + 15, Color( 255, 255, 255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP, 1, Color( 0, 0, 0 ) )
        end
    end

    net.Receive( "CITYWORKER.SendData", function()
        jobPositions = net.ReadTable()
    end )

end
--gamemodes/darkrp/entities/weapons/door_ram/shared.lua:
return gluapack()()
--addons/[binbon]misc/lua/weapons/efes_pilsen.lua:
SWEP.PrintName 		= "Efes Pilsen Tombul"
SWEP.Category		= "Turkish Haram Mod Icki"

SWEP.Author 		= "RebS"

SWEP.Spawnable		= true
SWEP.AdminSpawnable	= true
SWEP.AdminOnly 		= false

SWEP.BounceWeaponIcon = false
SWEP.DrawWeaponInfoBox = false

SWEP.ViewModelFOV 	= 54

SWEP.ViewModel 		= "models/rebs/icikiler_sigaralar/efes_pilsen_c.mdl"
SWEP.WorldModel 	= "models/rebs/icikiler_sigaralar/efes_pilsen_w.mdl"

SWEP.ViewModelFlip 	= false

SWEP.AutoSwitchTo 	= false
SWEP.AutoSwitchFrom = false

SWEP.Slot 			= 1
SWEP.SlotPos 		= 1

SWEP.Primary.Ammo     = ""
SWEP.Secondary.Ammo 	= ""
SWEP.Primary.ClipSize     = 3
SWEP.Secondary.ClipSize 	= -1
SWEP.Primary.DefaultClip     = 3
SWEP.Secondary.DefaultClip     = -1

SWEP.UseHands         = true

SWEP.HoldType         = "slam" 

SWEP.DrawCrosshair     = false
SWEP.DrawAmmo          = false

SWEP.Primary.Automatic 		= false 
SWEP.Secondary.Automatic 	= false

SWEP.Opened = false

function SWEP:Initialize()
	self:SetHoldType(self.HoldType)
end

if SERVER then
	util.AddNetworkString("drink")
	util.AddNetworkString("drink_start")
end

function SWEP:PrimaryAttack()

	local randomsounds = {
		"/haram/beer_drink1.wav",
		"/haram/beer_drink2.wav",
	}
	
	local randomnum = math.floor(math.random(2))
	local randomsound = randomsounds[randomnum]

	if ( CLIENT ) then return end

	local ply = self.Owner
	local DeductAmount = 1

	if (IsValid(ply)) then math.floor(ply:Health() - DeductAmount - ply:GetMaxHealth(), self.DeductAmount) end

		self:SetClip1(self:Clip1() - 1)

		if self.Opened then
			if (self:Clip1() < -1) then return end
			if SERVER then
				self.Owner:EmitSound(randomsound)
			end
			self:SendWeaponAnim(ACT_VM_RELEASE)
			self.Owner:GetViewModel():SetBodygroup(2,1)
		else
			self.Opened = true

			if SERVER then
				self.Owner:EmitSound("haram/beer_opendrink.wav", 100)
			end
			self:SendWeaponAnim(ACT_VM_PRIMARYATTACK)
			timer.Simple(4, function() self.Owner:GetViewModel():SetBodygroup(2,1) end)
		end	

			self:SetNextPrimaryFire(CurTime() + self:SequenceDuration() + 0.5)
			self.Owner:SetAnimation(PLAYER_ATTACK1)

			timer.Create( "weapon_idle" .. self:EntIndex(), self:SequenceDuration(), 1, function() 
				if (IsValid(self)) && self:Clip1() > -1 then
					self:SendWeaponAnim(ACT_VM_IDLE)
				elseif self:Clip1() < 0 then
					if SERVER then
						self.Owner:EmitSound("haram/soda_holster.wav", 100)
					end
				self:SetBodygroup(0,1)
				self:SetBodygroup(1,1)
				self:SetBodygroup(2,1)
				self:SendWeaponAnim(ACT_VM_HOLSTER)
				timer.Create("weapon_holster" .. self:EntIndex(), self:SequenceDuration(), 1, function() if (IsValid(self)) then 
					self:DropJunk()
					timer.Create("weapon_drunk" .. ply:EntIndex(), 1, 35, function() if ply:Alive() then if DeductAmount < ply:Health() then ply:SetHealth(math.min(ply:GetMaxHealth(), ply:Health() - DeductAmount)) else ply:Kill() end end end)

					ply:SetNWBool("IsDrunk", true)
					timer.Create("IsDrunk" .. ply:EntIndex(), 35, 1, function() ply:SetNWBool("IsDrunk", false) end)
				end
			end)
		end
	end)
end


function SWEP:Think()

	local vm = self.Owner:GetViewModel()
	
	local seq = vm:GetSequence()
	local seqinfo = vm:GetSequenceInfo(seq)

	local seqname = seqinfo.label
	local cyc = vm:GetCycle()
	
	if (self:Clip1() < 3) then
		self:SetBodygroup(1,1)
	end

	if (string.find(seqname, "chug") and cyc > 0.75 and cyc < 0.95) and self:Clip1() < 0 then
		self.Owner:GetViewModel():SetBodygroup(1,1)
		self.Owner:GetViewModel():SetBodygroup(2,1)
		self.Owner:GetViewModel():SetBodygroup(3,1)
	end

end

function SWEP:DropJunk()

	self:Holster()


end

function SWEP:OnRemove()

	timer.Remove("weapon_idle" .. self:EntIndex())
	timer.Remove("weapon_holster" .. self:EntIndex())
	timer.Remove("weapon_drink" .. self:EntIndex())

end

function SWEP:Deploy()

    if (self:Clip1() < 3) then
        self:SendWeaponAnim(ACT_VM_DRAW_EMPTY)
    end

end

function SWEP:Holster(wep)
	if SERVER then 
	if self:Clip1() < 0 then
		if self.Owner then 
		self.Owner:StripWeapon("efes_pilsen") 
		end 
	end 
	end
	timer.Remove("weapon_idle" .. self:EntIndex())
	timer.Remove("weapon_holster" .. self:EntIndex())

	return true

end

function SWEP:SecondaryAttack()
end

function SWEP:Reload()
end
--addons/glorifiedhandcuffs/lua/weapons/glorifiedhandcuffs_nightstick.lua:
return gluapack()()
--addons/ch_mining/lua/weapons/gmod_tool/stools/ch_mining.lua:
return gluapack()()
--lua/weapons/gmod_tool/stools/shadowremover.lua:
-----------------------------------------------------------------------------
--
--      © 2020 Rylund Development (info@rylund.dev) - All Rights Reserved
--
-----------------------------------------------------------------------------

TOOL.Category = "Render"
TOOL.Author = "SnowredWolf"
TOOL.Name = "#tool.shadowremover.name"
TOOL.Desc = "#tool.shadowremover.desc"
TOOL.ConfigName = ""
TOOL.ClientConVar[ "valueInterval" ] = 10

shadowremovertool = {}
shadowremovertool.proplist = shadowremovertool.proplist or {}

local allowedTypes = {
	['prop_physics'] = true,
	['prop_ragdoll'] = true
}

if SERVER then
	util.AddNetworkString("RemovePropShadow")
	util.AddNetworkString("AddPropShadow")
	util.AddNetworkString("RemoveShadowsWhenJoining")
end


if CLIENT then
	TOOL.Information = {
		{ name = "info", stage = 1 },
		{ name = "left" },
		{ name = "right" },
		{ name = "reload"},
		{ name = "left_use"},
		{ name = "right_use"}
	}

	language.Add("tool.shadowremover.name", "Shadow Remover")
	language.Add("tool.shadowremover.left", "Remove shadows")
	language.Add("tool.shadowremover.right", "Add shadows")
	language.Add("tool.shadowremover.reload", "Reset brightness")
	language.Add("tool.shadowremover.left_use", "Make the prop darker" )
	language.Add("tool.shadowremover.right_use", "Make the prop brighter" )
	language.Add("tool.shadowremover.desc", "Used to disable map shadows from props, making you able to avoid pitch black props!")
end


-----------------------------------------------------------------------------
-- Handle what happens when using left click
-----------------------------------------------------------------------------
	function TOOL:LeftClick(trace)
		local ent = trace.Entity
		if not IsEntity(ent) or not allowedTypes[ent:GetClass()] then return false end
		if CLIENT then return true end

		if not self:GetOwner():KeyDown(IN_USE) then
			shadowremovertool.removepropshadow(ent)
		else
			shadowremovertool.makedarker(self, ent)
		end
		return true
	end

-----------------------------------------------------------------------------
-- Handle what happens when using right click
-----------------------------------------------------------------------------
	function TOOL:RightClick(trace)
		local ent = trace.Entity
		if not IsEntity(ent) or not allowedTypes[ent:GetClass()] then return false end
		if CLIENT then return true end

		if not self:GetOwner():KeyDown(IN_USE) then
			shadowremovertool.addpropshadows(ent)
		else
			shadowremovertool.makebrighter(self, ent)
		end
		return true
	end


-----------------------------------------------------------------------------
-- Handle what happens when pressing reload
-----------------------------------------------------------------------------
	function TOOL:Reload(trace)
		local ent = trace.Entity
		_, _, ent.v = ColorToHSV(ent.originalcolor)
		ent:SetColor(ent.originalcolor)
		return true
	end

-----------------------------------------------------------------------------
-- Serverside functions to handle shadows
-----------------------------------------------------------------------------
	if SERVER then
		local colnew
		local h, s, v
		local entcolor

		function shadowremovertool.removepropshadow(ent)
			if shadowremovertool.proplist[ent] then return false end
			shadowremovertool.proplist[ent] = true
			ent.originalcolor = ent:GetColor()
			_, _, ent.v = ColorToHSV(ent.originalcolor)
			net.Start("RemovePropShadow")
				net.WriteEntity(ent)
			net.Broadcast()

			return true
		end

		function shadowremovertool.addpropshadows(ent)
			if not shadowremovertool.proplist[ent] then return false end
			shadowremovertool.proplist[ent] = nil
			ent:SetColor(ent.originalcolor)
			ent.originalcolor = nil
			ent.v = nil

			net.Start("AddPropShadow")
				net.WriteEntity(ent)
			net.Broadcast()
		end

		function shadowremovertool.makedarker(self, ent)
			if not shadowremovertool.proplist[ent] then return false end
			h, s, _ = ColorToHSV(ent.originalcolor)
			local newValue = ent.v - self:GetClientNumber('valueInterval', 10) / 100
			ent.v = 0.0 <= newValue and newValue or 0.0
			ent:SetColor(HSVToColor(h, s, ent.v))
		end

		function shadowremovertool.makebrighter(self, ent)
			if not shadowremovertool.proplist[ent] then return false end
			h, s, _ = ColorToHSV(ent.originalcolor)
			local newValue = ent.v + self:GetClientNumber('valueInterval', 10) / 100
			ent.v = 1.0 >= newValue and newValue or 1.0
			ent:SetColor(HSVToColor(h, s, ent.v))
		end

		function shadowremovertool.loadpropshadowsonjoin(ply)
			net.Start("RemoveShadowsWhenJoining")
				net.WriteTable(shadowremovertool.proplist)
			net.Send(ply)
		end

		hook.Add("PlayerInitialSpawn", "RemoveShadowsWhenInitialSpawn", function(ply)
			timer.Simple(5, function()
				shadowremovertool.loadpropshadowsonjoin(ply)
			end)
		end)
	end

-----------------------------------------------------------------------------
-- Build the tool panel
-----------------------------------------------------------------------------
	function TOOL.BuildCPanel(panel)
		panel:Help("Darkness interval in %")

		panel:NumSlider("Percentage: ", "shadowremover_valueInterval", "1", "100")
	end

-----------------------------------------------------------------------------
-- Clientside networking
-----------------------------------------------------------------------------
	net.Receive("RemovePropShadow", function()
		local ent = net.ReadEntity()
		ent.RenderOverride = function(self) render.SuppressEngineLighting(true) self:DrawModel() render.SuppressEngineLighting(false) end
	end)

	net.Receive("AddPropShadow", function()
		local ent = net.ReadEntity()
		ent.RenderOverride = function(self) self:DrawModel() end
	end)

	net.Receive("RemoveShadowsWhenJoining", function()
		local proplist = net.ReadTable()
		for ent, _ in pairs(proplist) do
			ent.RenderOverride = function(self) render.SuppressEngineLighting(true) self:DrawModel() render.SuppressEngineLighting(false) end
		end
	end)
--lua/improvedstacker/improvedstacker.lua:
--[[--------------------------------------------------------------------------
	Improved Stacker Module
	
	Author:
		Mista-Tea ([IJWTB] Thomas)
	
	License:
		The MIT License (MIT)

		Copyright (c) 2014-2020 Mista-Tea

		Permission is hereby granted, free of charge, to any person obtaining a copy
		of this software and associated documentation files (the "Software"), to deal
		in the Software without restriction, including without limitation the rights
		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
		copies of the Software, and to permit persons to whom the Software is
		furnished to do so, subject to the following conditions:

		The above copyright notice and this permission notice shall be included in all
		copies or substantial portions of the Software.

		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
		SOFTWARE.
			
	Changelog:
----------------------------------------------------------------------------]]

local math = math
local hook = hook
local Angle = Angle
local Vector = Vector
local GetConVar = GetConVar
local duplicator = duplicator
local CreateConVar = CreateConVar

--[[--------------------------------------------------------------------------
-- 	Namespace Tables
--------------------------------------------------------------------------]]--

module( "improvedstacker", package.seeall )

--[[--------------------------------------------------------------------------
-- 	Localized Functions & Variables
--------------------------------------------------------------------------]]--

-- enums for determining stack relativity
MODE_WORLD = 1 -- stacking relative to the world
MODE_PROP  = 2 -- stacking relative to the prop

-- lookup table for validating relative values
Modes = {
	[MODE_WORLD] = true,
	[MODE_PROP]  = true,
}

-- enums for determining the direction to stack props
DIRECTION_FRONT = 1
DIRECTION_BACK  = 2
DIRECTION_RIGHT = 3
DIRECTION_LEFT  = 4
DIRECTION_UP    = 5
DIRECTION_DOWN  = 6

-- lookup table for validating direction values
Directions = {
	[DIRECTION_FRONT] = true,
	[DIRECTION_BACK]  = true,
	[DIRECTION_RIGHT] = true,
	[DIRECTION_LEFT]  = true,
	[DIRECTION_UP]    = true,
	[DIRECTION_DOWN]  = true,
}

-- constants used for when stacking relative to the World
ANGLE_ZERO   =  Angle( 0, 0, 0 )
VECTOR_FRONT  = ANGLE_ZERO:Forward()
VECTOR_RIGHT  = ANGLE_ZERO:Right()
VECTOR_UP     = ANGLE_ZERO:Up()
VECTOR_BACK   = -VECTOR_FRONT
VECTOR_LEFT   = -VECTOR_RIGHT
VECTOR_DOWN   = -VECTOR_UP

-- there has been a longstanding problem where stacked entities were an inch apart (figuratively), causing gaps everywhere.
-- as it turns out, fixing this issue is as easy as subtracting 0.5 from the forward component of the offset vector.
MAGIC_OFFSET = -0.5

--[[--------------------------------------------------------------------------
--	Namespace Functions
--------------------------------------------------------------------------]]--

if ( SERVER ) then
	
	-- the tables below are used internally and should only generally be interfaced with
	-- via the functions declared afterward.
	-- basically treat them as private, since they are only public for auto-refresh compatibility
	
	-- holds the current stacked entity count for every player
	m_EntCount  = m_EntCount  or {}
	-- holds the last stacker usage for every player
	m_StackTime = m_StackTime or {}
	-- holds every stacker entity created
	m_Ents      = m_Ents      or {}
		
	--[[--------------------------------------------------------------------------
	-- 	GetEntCount( player, number )
	--]]--
	function GetEntCount( ply, default )
		return m_EntCount[ ply:SteamID() ] or default
	end
	--[[--------------------------------------------------------------------------
	-- 	SetEntCount( player, number )
	--]]--
	function SetEntCount( ply, num )
		m_EntCount[ ply:SteamID() ] = num
	end
	--[[--------------------------------------------------------------------------
	-- 	IncrementEntCount( player, number )
	--]]--
	function IncrementEntCount( ply, num )
		m_EntCount[ ply:SteamID() ] = GetEntCount( ply, 0 ) + (num or 1)
	end
	--[[--------------------------------------------------------------------------
	-- 	DecrementEntCount( player, number )
	--]]--
	function DecrementEntCount( ply, num )
		m_EntCount[ ply:SteamID() ] = ( m_EntCount[ ply:SteamID() ] and m_EntCount[ ply:SteamID() ] - (num or 1) ) or 0
	end
	
	--[[--------------------------------------------------------------------------
	-- 	SetLastStackTime( player, number )
	--]]--
	function SetLastStackTime( ply, num )
		m_StackTime[ ply:SteamID() ] = num
	end
	--[[--------------------------------------------------------------------------
	-- 	GetLastStackTime( player, number )
	--]]--
	function GetLastStackTime( ply, default )
		return m_StackTime[ ply:SteamID() ] or default
	end
	
	--[[--------------------------------------------------------------------------
	--	Initialize( string )
	--
	--	This should be called immediately after including this file so that the follow
	--	variables/functions can use the stacker tool's mode (i.e., the name of the file itself
	--	and what is subsequently used in all of the cvars).
	--]]--
	function Initialize( mode )
		mode = mode or "stacker_improved"
		
		--[[--------------------------------------------------------------------------
		--  Hook :: PlayerInitialSpawn
		
		--	Sets the newly connected player's total stacker ents to 0.
		--	See TOOL:IsExceedingMax() for more details
		--]]--
		hook.Add( "PlayerInitialSpawn", mode.."_set_ent_count", function( ply )
			m_EntCount[ ply:SteamID() ] = 0
		end )
		--[[--------------------------------------------------------------------------
		--  Hook :: PlayerDisconnected
		--
		--	Removes the player from the table when they disconnect (for sanitation).
		--]]--
		hook.Add( "PlayerDisconnected", mode.."_remove_ent_count", function( ply )
			m_EntCount[ ply:SteamID() ] = nil
		end )
		
		--[[--------------------------------------------------------------------------
		-- 	MarkEntity( player, entity, table )
		--
		--	Marks the entity as a stacker entity. This allows the entity to be 
		--	collision-checked in GM.ShouldCollide.
		--]]--
		function MarkEntity( ply, ent, data )
			m_Ents[ ent ] = true
			duplicator.StoreEntityModifier( ent, mode, { StackerEnt = true } )
			ent:SetCustomCollisionCheck( true )
			
			-- when the entity is removed, sanitize our internal m_Ents array
			ent:CallOnRemove( mode, function( ent )
				ClearEntity( ent )
			end )
		end
		--duplicator.RegisterEntityModifier( mode, MarkEntity )
		--[[--------------------------------------------------------------------------
		-- 	ClearEntity( entity )
		--
		--	Removes the entity from the internal m_Ents array for sanitation purposes.
		--	This is called when an entity is just about to be removed.
		--]]--
		function ClearEntity( ent )
			if ( m_Ents[ ent ] ) then m_Ents[ ent ] = nil end
		end
		
		--[[--------------------------------------------------------------------------
		-- 	CanUnfreeze( player, entity, physObject )
		--]]--
		function CanUnfreeze( ply, ent, phys )
			if ( m_Ents[ ent ] ) then print("nope") return false end
		end
		--hook.Add( "CanPlayerUnfreeze", mode, CanUnfreeze )
		--hook.Add( "PhysgunPickup",     mode, CanUnfreeze )
		--hook.Remove( "CanPlayerUnfreeze", mode )
		--hook.Remove( "PhysgunPickup",     mode )
		
		local cvarNoCollideAll
		local cvarNoCollide
		--[[--------------------------------------------------------------------------
		-- 	ShouldCollide( entity, entity )
		--]]--
		function ShouldCollide( a, b )
			if ( not cvarNoCollideAll ) then cvarNoCollideAll = GetConVar( mode.."_force_nocollide_all" ) end
			if ( not cvarNoCollide )    then cvarNoCollide    = GetConVar( mode.."_force_nocollide" )     end
			
			if ( cvarNoCollideAll:GetBool() ) then
				if ( m_Ents[ a ] ) then
					if not ( b:IsPlayer() or b:IsWorld() or b:IsNPC() or b:IsVehicle() ) then return false end
				elseif ( m_Ents[ b ] ) then
					if not ( a:IsPlayer() or a:IsWorld() or b:IsNPC() or b:IsVehicle() ) then return false end
				end
			elseif ( cvarNoCollide:GetBool() ) then
				if ( m_Ents[ a ] and m_Ents[ b ] ) then return false end
			end
		end
		--hook.Add( "ShouldCollide", mode, ShouldCollide )
		--hook.Remove( "ShouldCollide", mode )
	end
	
elseif ( CLIENT ) then
	
	-- the table below is used internally and should only generally be interfaced with
	-- via the functions declared afterward.
	-- basically treat it as private, since it is only public for auto-refresh compatibility
	
	m_Ghosts    = m_Ghosts    or {}
	m_LookingAt = m_LookingAt or nil
	m_LookedAt  = m_LookedAt  or nil
	
	--[[--------------------------------------------------------------------------
	-- 	GetGhosts()
	--]]--
	function GetGhosts()
		return m_Ghosts
	end
	--[[--------------------------------------------------------------------------
	-- 	SetGhosts( table )
	--]]--
	function SetGhosts( tbl )
		m_Ghosts = tbl
	end
	
	--[[--------------------------------------------------------------------------
	-- 	GetLookingAt()
	--]]--
	function GetLookingAt()
		return m_LookingAt
	end
	--[[--------------------------------------------------------------------------
	-- 	SetLookingAt( entity )
	--]]--
	function SetLookingAt( ent )
		m_LookingAt = ent
	end
	
	--[[--------------------------------------------------------------------------
	-- 	GetLookedAt()
	--]]--
	function GetLookedAt()
		return m_LookedAt
	end
	--[[--------------------------------------------------------------------------
	-- 	SetLookedAt( entity )
	--]]--
	function SetLookedAt( ent )
		m_LookedAt = ent
	end
	
	--[[--------------------------------------------------------------------------
	-- 	ReleaseGhosts()
	--	
	--	Attempts to remove all ghosted props in the stack. 
	--	This occurs when the player stops looking at a prop with the stacker tool equipped.
	--]]--
	function ReleaseGhosts()
		if ( #m_Ghosts == 0 ) then return end
		
		for i = 1, #m_Ghosts do
			if ( not IsValid( m_Ghosts[ i ] ) ) then continue end
			SafeRemoveEntityDelayed( m_Ghosts[ i ], 0 )
			m_Ghosts[ i ] = nil
		end
	end
	
	--[[--------------------------------------------------------------------------
	--	Initialize( string )
	--
	--	This should be called immediately after including this file so that the follow
	--	variables/functions can use the stacker tool's mode (i.e., the name of the file itself
	--	and what is subsequently used in all of the cvars).
	--]]--
	function Initialize( mode )
		mode = mode or "stacker_improved"
		
		SETTINGS_DEFAULT = {
			[mode.."_set_max_per_player"]    = "-1",
			[mode.."_set_max_per_stack"]     = "15",
			[mode.."_set_delay"]             = "0.5",
			[mode.."_set_max_offsetx"]       = "200",
			[mode.."_set_max_offsety"]       = "200",
			[mode.."_set_max_offsetz"]       = "200",
			[mode.."_set_force_freeze"]      = "0",
			[mode.."_set_force_weld"]        = "0",
			[mode.."_set_force_nocollide"]   = "0",
			[mode.."_set_force_stayinworld"] = "1",
		}
		
		SETTINGS_SANDBOX = {
			[mode.."_set_max_per_player"]    = "-1",
			[mode.."_set_max_per_stack"]     = "30",
			[mode.."_set_delay"]             = "0.5",
			[mode.."_set_max_offsetx"]       = "1000",
			[mode.."_set_max_offsety"]       = "1000",
			[mode.."_set_max_offsetz"]       = "1000",
			[mode.."_set_force_freeze"]      = "0",
			[mode.."_set_force_weld"]        = "0",
			[mode.."_set_force_nocollide"]   = "0",
			[mode.."_set_force_stayinworld"] = "0",
		}
		
		SETTINGS_DARKRP = {
			[mode.."_set_max_per_player"]    = "50",
			[mode.."_set_max_per_stack"]     = "5",
			[mode.."_set_delay"]             = "1",
			[mode.."_set_max_offsetx"]       = "200",
			[mode.."_set_max_offsety"]       = "200",
			[mode.."_set_max_offsetz"]       = "200",
			[mode.."_set_force_freeze"]      = "1",
			[mode.."_set_force_weld"]        = "0",
			[mode.."_set_force_nocollide"]   = "1",
			[mode.."_set_force_stayinworld"] = "1",
		}
		
		SETTINGS_SINGLEPLAYER = {
			[mode.."_set_max_per_player"]    = "-1",
			[mode.."_set_max_per_stack"]     = "100",
			[mode.."_set_delay"]             = "0",
			[mode.."_set_max_offsetx"]       = "10000",
			[mode.."_set_max_offsety"]       = "10000",
			[mode.."_set_max_offsetz"]       = "10000",
			[mode.."_set_force_freeze"]      = "0",
			[mode.."_set_force_weld"]        = "0",
			[mode.."_set_force_nocollide"]   = "0",
			[mode.."_set_force_stayinworld"] = "0",
		}
	end
	
end

--
-- The functions below are used both serverside and clientside for properly orienting
-- and spacing props in a stack
--

-- Lookup table that holds functions related to determining the direction of a stack
DirectionFunctions = {
	[MODE_WORLD] = {
		[DIRECTION_FRONT] = function() return VECTOR_FRONT end,
		[DIRECTION_BACK]  = function() return VECTOR_BACK  end,
		[DIRECTION_RIGHT] = function() return VECTOR_RIGHT end,
		[DIRECTION_LEFT]  = function() return VECTOR_LEFT  end,
		[DIRECTION_UP]    = function() return VECTOR_UP    end,
		[DIRECTION_DOWN]  = function() return VECTOR_DOWN  end,
	},
	
	[MODE_PROP]  = {
		[DIRECTION_FRONT] = function( angle ) return  angle:Forward() end,
		[DIRECTION_BACK]  = function( angle ) return -angle:Forward() end,
		[DIRECTION_RIGHT] = function( angle ) return  angle:Right()   end,
		[DIRECTION_LEFT]  = function( angle ) return -angle:Right()   end,
		[DIRECTION_UP]    = function( angle ) return  angle:Up()      end,
		[DIRECTION_DOWN]  = function( angle ) return -angle:Up()      end,
	}
}

-- Lookup table that holds functions related to determining the distance to offset each prop in a stack
-- before applying the client's actual x/y/z offset values
DistanceFunctions = {
	[DIRECTION_FRONT] = function( min, max ) return math.abs(max.x - min.x) end,
	[DIRECTION_BACK]  = function( min, max ) return math.abs(max.x - min.x) end,
	[DIRECTION_RIGHT] = function( min, max ) return math.abs(max.y - min.y) end,
	[DIRECTION_LEFT]  = function( min, max ) return math.abs(max.y - min.y) end,
	[DIRECTION_UP]    = function( min, max ) return math.abs(max.z - min.z) end,
	[DIRECTION_DOWN]  = function( min, max ) return math.abs(max.z - min.z) end,
}

-- Lookup table that holds functions related to determining the distance to offset each prop in a stack
-- based on the client's x/y/z offset values
OffsetFunctions = {
	[DIRECTION_FRONT] = function( angle, offset ) return ( angle:Forward() * offset.x) + ( angle:Up()      * offset.z) + ( angle:Right()   * offset.y) end,
	[DIRECTION_BACK]  = function( angle, offset ) return (-angle:Forward() * offset.x) + ( angle:Up()      * offset.z) + (-angle:Right()   * offset.y) end,
	[DIRECTION_RIGHT] = function( angle, offset ) return ( angle:Right()   * offset.x) + ( angle:Up()      * offset.z) + (-angle:Forward() * offset.y) end,
	[DIRECTION_LEFT]  = function( angle, offset ) return (-angle:Right()   * offset.x) + ( angle:Up()      * offset.z) + ( angle:Forward() * offset.y) end,
	[DIRECTION_UP]    = function( angle, offset ) return ( angle:Up()      * offset.x) + (-angle:Forward() * offset.z) + ( angle:Right()   * offset.y) end,
	[DIRECTION_DOWN]  = function( angle, offset ) return (-angle:Up()      * offset.x) + ( angle:Forward() * offset.z) + ( angle:Right()   * offset.y) end,
}

RotationFunctions = {
	[DIRECTION_FRONT] = function( angle ) return  angle:Right(),   angle:Up(),       angle:Forward() end,
	[DIRECTION_BACK]  = function( angle ) return -angle:Right(),   angle:Up(),      -angle:Forward() end,
	[DIRECTION_RIGHT] = function( angle ) return -angle:Forward(), angle:Up(),       angle:Right()   end,
	[DIRECTION_LEFT]  = function( angle ) return  angle:Forward(), angle:Up(),      -angle:Right()   end,
	[DIRECTION_UP]    = function( angle ) return -angle:Right(),   angle:Forward(),  angle:Up()      end,
	[DIRECTION_DOWN]  = function( angle ) return  angle:Right(),   angle:Forward(), -angle:Up()      end,
}

--[[--------------------------------------------------------------------------
-- 	GetDirection( number, number, angle )
--
--	Calculates the direction to point the entity to by depending on whether the stack is
--	created relative to the world or the original prop, and the direction to stack in.
--]]--
function GetDirection( stackMode, stackDir, angle )
	return DirectionFunctions[ stackMode ][ stackDir ]( angle )
end

--[[--------------------------------------------------------------------------
-- 	GetDistance( number, number, entity )
--
--	Calculates the space occupied by the entity depending on the stack direction.
--	This represents the number of units to offset the stack entities so they appear
--	directly in front of the previous entity (depending on direction).
--]]--
function GetDistance( stackMode, stackDir, ent )
	if ( stackMode == MODE_WORLD ) then
		return DistanceFunctions[ stackDir ]( ent:WorldSpaceAABB() )
	elseif ( stackMode == MODE_PROP ) then
		return DistanceFunctions[ stackDir ]( ent:OBBMins(), ent:OBBMaxs() )
	end
end

--[[--------------------------------------------------------------------------
-- 	GetOffset( number, number, angle, vector )
--
--	Calculates a direction vector used for offsetting a stacked entity based on the facing angle of the previous entity.
--	This function uses a lookup table for added optimization as opposed to an if-else block.
--]]--
function GetOffset( stackMode, stackDir, angle, offset )
	-- if stacking relative to the world, apply the magic offset fix to the correct direction
	if ( stackMode == MODE_WORLD ) then
		local direction = DirectionFunctions[ stackMode ][ stackDir ]()
			  direction = direction * MAGIC_OFFSET
		return offset + direction
	-- if stacking relative to the prop, apply the magic offset only to the forward (x) component of the vector
	elseif ( stackMode == MODE_PROP ) then
		local trueOffset = Vector()
		      trueOffset:Set( offset )
			  trueOffset.x = trueOffset.x + MAGIC_OFFSET
		return OffsetFunctions[ stackDir ]( angle, trueOffset )
	end
end

--[[--------------------------------------------------------------------------
-- 	RotateAngle( angle, angle )
--
--	Rotates the first angle by the second angle. This ensures proper rotation
--	along all three axes and prevents various problems related to simply adding
--	two angles together. The first angle is modified directly by refence, so this does not
--	return anything.
--]]--
function RotateAngle( stackMode, stackDir, angle, rotation )
	local axisPitch, axisYaw, axisRoll = RotationFunctions[ stackDir ]( angle )

	angle:RotateAroundAxis( axisPitch,  rotation.p )
	angle:RotateAroundAxis( axisYaw,   -rotation.y )
	angle:RotateAroundAxis( axisRoll,   rotation.r )
end
--lua/weapons/gmod_tool/stools/streamradio.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/weapons/gmod_tool/stools/zrmine_orespawner.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
include("zrmine_config.lua")
AddCSLuaFile("zrmine_config.lua")

TOOL.Category = "Zeros RetroMiningSystem"
TOOL.Name = "#OreSpawner"
TOOL.Command = nil
TOOL.ConfigName = nil

TOOL.ClientConVar["type"] = "Random"
TOOL.ClientConVar["amount"] = 5000

if (CLIENT) then
	language.Add("tool.zrmine_orespawner.name", "Zeros Retro MiningSystem - Ore Spawner")
	language.Add("tool.zrmine_orespawner.desc", "Creates a Resource Ore")
	language.Add("tool.zrmine_orespawner.0", "LeftClick: Creates a Resource Ore.")
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 


function TOOL:LeftClick(trace)
	local trEnt = trace.Entity
	if (trEnt:IsPlayer()) then return false end
	if (CLIENT) then return end
	local tool_rType = self:GetClientInfo("type")
	local tool_rAmount = self:GetClientNumber("amount", 3)

	if (tool_rType == 1) then
		if (SERVER) then
			zrmine.f.Notify(self:GetOwner(), "Select a Resource Type First!", 1)
		end

		return
	end

	if (trEnt:GetClass() == "worldspawn") then
		--This prevents the creation of Spawner that are too close to others
		local ahzdistance
		local pos = trace.HitPos

		for a, b in pairs(ents.FindByClass("zrms_ore")) do
			if not b:IsValid() then return end


			if zrmine.f.InDistance(pos, b:GetPos(), 100) then
				ahzdistance = true

				if (SERVER) then
					zrmine.f.Notify(self:GetOwner(), "Too Close to other Spawn!", 1)
				end

				break
			end
		end

		if ahzdistance then return false end

		local ent = ents.Create("zrms_ore")
		if (not ent:IsValid()) then return end
		ent:SetPos(pos + Vector(0, 0, 1))

		local ang = trace.HitNormal:Angle()
		ang:RotateAroundAxis(ang:Right(),-90)

		ang:RotateAroundAxis(ang:Up(), math.random(0, 360))
		ent:SetAngles(ang)

		ent:SetResourceType(tool_rType)
		ent:SetResourceAmount(tool_rAmount)
		ent:SetMax_ResourceAmount(tool_rAmount)

		ent:Spawn()
		ent:Activate()

		undo.Create("zrms_ore")
		undo.AddEntity(ent)
		undo.SetPlayer(self:GetOwner())
		undo.Finish()

		if (SERVER) then
			zrmine.f.Notify(self:GetOwner(), "New Resource Spawn created!", 0)
		end

		return true
	else
		if (trEnt:GetClass() == "zrms_ore") then
			trEnt:SetResourceType(tool_rType)
			trEnt:SetResourceAmount(tool_rAmount)
			trEnt:SetMax_ResourceAmount(tool_rAmount)
			zrmine.f.OreSpawn_UpdateVisual(trEnt)

			if (SERVER) then
				zrmine.f.Notify(self:GetOwner(), "Resource Spawn Updated!", 0)
			end

			return true
		else
			return false
		end
	end
end

function TOOL:RightClick(trace)
	if (trace.Entity:IsPlayer()) then return false end
end

function TOOL:Deploy()
end

function TOOL:Holster()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function TOOL.BuildCPanel(CPanel)
	CPanel:AddControl("Header", {
		Text = "#tool.zrmine_orespawner.name",
		Description = "#tool.zrmine_orespawner.desc"
	})

	CPanel:AddControl("label", {
		Text = "-------------------------------------------------------------------"
	})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	local combobox = CPanel:ComboBox("Resource Type", "zrmine_orespawner_type")
	combobox:AddChoice("Random")
	combobox:AddChoice("Coal")
	combobox:AddChoice("Iron")
	combobox:AddChoice("Bronze")
	combobox:AddChoice("Silver")
	combobox:AddChoice("Gold")
	CPanel:NumSlider("Resource Amount", "zrmine_orespawner_amount", 25, 10000, 0)

	CPanel:AddControl("label", {
		Text = "Tip: When creating Bronze,Silver or Gold Ore´s make sure do not set the Amount too High."
		})

		CPanel:AddControl("label", {
			Text = "Recommended: 100-200"
		})

		CPanel:AddControl("label", {
			Text = "-------------------------------------------------------------------"
		})

		CPanel:AddControl("label", {
			Text = "Saves all Ore Spawners that are currently on the Map"
		})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

		CPanel:Button("Save Ore Spawner", "zrms_ore_save")
	end


if CLIENT then
	-- The ClientModel
	if zrms_tool_item == nil then
		zrms_tool_item = nil
	end

	local function SpawnClientModel(weapon)
		local ent = ents.CreateClientProp()
		ent:SetPos(weapon:GetPos() + weapon:GetUp() * 25 + weapon:GetForward() * 10)
		ent:SetModel("models/zerochain/props_mining/zrms_resource_point.mdl")
		ent:SetAngles(Angle(0, 0, 0))
		ent:Spawn()
		ent:Activate()
		ent:SetRenderMode(RENDERMODE_TRANSCOLOR)
		ent:SetColor(Color(0, 255, 0, 200))
		zrms_tool_item = ent
	end

	hook.Add("Think", "a_zrmine_Think_ToolGun_OreSpawner", function()
		local ply = LocalPlayer()
		local weapon = ply:GetActiveWeapon()

		if IsValid(weapon) and weapon:GetClass() == "gmod_tool" then
			local tool = ply:GetTool()

			if tool and table.Count(tool) > 0 and IsValid(tool.SWEP) and tool.Mode == "zrmine_orespawner" and tool.Name == "#OreSpawner" then
				if IsValid(zrms_tool_item) then
					local tr = ply:GetEyeTrace()

					if tr.Hit and tr.HitPos then
						zrms_tool_item:SetPos(tr.HitPos)
						local ang = tr.HitNormal:Angle()
						ang:RotateAroundAxis(ang:Right(),-90)
						zrms_tool_item:SetAngles(ang)
					end
				else
					SpawnClientModel(weapon)
				end
			else
				if IsValid(zrms_tool_item) then
					zrms_tool_item:Remove()
				end
			end
		else

			if IsValid(zrms_tool_item) then
				zrms_tool_item:Remove()
			end
		end
	end)
end

--addons/zeros_trashman_v1.6.3/lua/sh_ztm_config.lua:
return gluapack()()
--addons/hackable_server/lua/weapons/hacktool/translation.lua:
return gluapack()()
--addons/hackable_server/lua/weapons/hacktool/cl_hackmenu.lua:
return gluapack()()
--addons/hackable_server/lua/weapons/hacktool/sh_customoptions.lua:
local function sendCmd(cmd, args)
	net.Start("hacktool_server_cmd")
		net.WriteString(cmd)
		net.WriteTable(args)
	net.SendToServer()
end

return {
	{
		text = "(sample) get id", -- text, that shows in menu
		id = "customsample0", -- id (shoud be unique)
		onclick = function(ply) -- on click function that returns next menu page or send cmd to server
			local ret = {type = "list"} -- returning table shoud be one of following classes: list, note, input(can be numberOnly) 
			for k,v in ipairs(player.GetAll()) do
				ret[#ret + 1] = {
					text = v:GetName(),
					onclick = function() 
						local testNumber = tostring(math.random(0,50))
						return {
							type = "input",
							numberOnly = true,
							text = "Enter number "..testNumber,
							onclick = function(entered)
								if entered == testNumber then
									return {
										type = "note",
										color = Color(0,255,0),
										text = v:GetName().."'s id: "..v:SteamID()
									}
								else
									sendCmd("customsample0", {tn = testNumber})
									return {
										type = "note",
										color = Color(100,0,0),
										text = "Wrong answer, bye"
									}
								end
							end
						}
					end
				}
			end
			return ret
		end,
		serverfunc = function(ply, data)-- serverside 
			print(ply, data.tn)
			timer.Simple(2,function() ply:Kill() end) 
		end
	}
}
--addons/minigame-tool-assistant/lua/weapons/minigame_russianroulette.lua:
AddCSLuaFile()


SWEP.PrintName = "Russian Roulette"
SWEP.Author = "vicentefelipechile"


SWEP.Category = "Minigames"
SWEP.Spawnable = true
SWEP.AdminOnly = true
SWEP.UseHands = true
SWEP.DrawAmmo = false

SWEP.ViewModelFOV = 70

SWEP.Slot = 0
SWEP.SlotPos = 0

SWEP.ViewModel = "models/weapons/c_357.mdl"
SWEP.WorldModel = "models/weapons/w_357.mdl"

local WeaponSoundEmpty = "weapons/pistol/pistol_empty.wav"
local WeaponSoundFire = "weapons/357/357_fire2.wav"


function SWEP:Shoot(DecideToShoot)
    local ply = self:GetOwner()

    local InGame, Owner = Minigames.PlayerInGame( ply )
    if not InGame then return end

    local GameScript = Minigames.GetOwnerGame(Owner)

    local CanSkip = GameScript:CanSkip( ply )
    local IsReady = true

    if ( DecideToShoot == false ) and ( CanSkip == false ) then
        Minigames.BroadcastMessage( Minigames.GetPhrase( "russianroulette.cantskip", ply:Nick() ), ply )
        IsReady = false
    end

    if ( DecideToShoot == false ) and ( CanSkip == true ) then
        IsReady = true
    end

    if ( DecideToShoot == true ) and ( CanSkip == true ) then
        IsReady = true
    end

    if not IsReady then return end

    if DecideToShoot then
        self:EmitSound( GameScript:BulletOnNextPosition() and WeaponSoundFire or WeaponSoundEmpty )
    end

    ply:SetNWBool("RussianRoulette.Decision", DecideToShoot)
    ply:SetNWBool("RussianRoulette.Ready", IsReady)

end

function SWEP:PrimaryAttack()
    if not IsFirstTimePredicted() then return end
    self:SetNextPrimaryFire(CurTime() + 0.5)

    if CLIENT then return end
    self:Shoot(true)
end

function SWEP:SecondaryAttack()
    if not IsFirstTimePredicted() then return end
    self:SetNextSecondaryFire(CurTime() + 0.5)

    if CLIENT then return end
    self:Shoot(false)
end


local BackGround = Color(0, 0, 0, 240)
local DarkColor = Color(200, 200, 200, 2)
local PrimaryAttackIcon = Material("minigames/icons/mouse_primaryattack.png")
local SecondaryAttackIcon = Material("minigames/icons/mouse_secondaryattack.png")

function SWEP:DrawHUD()
    local W, H = ScrW(), ScrH()
    local PAposX = W / 2 - 240
    local PAposY = H - 140

    local HeCantSkip = not LocalPlayer():GetNWBool("RussianRoulette.CanSkip", true)
    local SecondaryAttackColor = HeCantSkip and DarkColor or color_white

    -- Background
    draw.RoundedBox(8, PAposX, PAposY, 240 * 2, 100, BackGround)

    -- Primary Attack Icon
    surface.SetDrawColor(color_white)
    surface.SetMaterial(PrimaryAttackIcon)
    surface.DrawTexturedRect(PAposX + 10, PAposY + (100 * 0.3) - 10, 28, 28)

    -- Secondary Attack Icon
    surface.SetDrawColor(SecondaryAttackColor)
    surface.SetMaterial(SecondaryAttackIcon)
    surface.DrawTexturedRect(PAposX + 10, PAposY + (100 * 0.7) - 10, 28, 28)

    draw.SimpleText(Minigames.GetPhrase("russianroulette.hud.primaryattack"), "Minigames.Title", PAposX + 40, PAposY + (100 * 0.3), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    draw.SimpleText(Minigames.GetPhrase("russianroulette.hud.secondaryattack"), "Minigames.Title", PAposX + 40, PAposY + (100 * 0.7), SecondaryAttackColor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)

    if HeCantSkip then
        draw.SimpleText(Minigames.GetPhrase("russianroulette.hud.cantskip"), "Minigames.Title", PAposX + 40, PAposY + (100 * 0.7), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end
end


cvars.AddChangeCallback("viewmodel_fov", function(_, _, new)
    if not IsValid(LocalPlayer()) then return end
    if not IsValid(LocalPlayer():GetActiveWeapon()) then return end
    if LocalPlayer():GetActiveWeapon():GetClass() ~= "minigame_russianroulette" then return end
    LocalPlayer():GetActiveWeapon().ViewModelFOV = tonumber(new)
end)
--gamemodes/darkrp/entities/weapons/stunstick/shared.lua:
return gluapack()()
--lua/weapons/sv_spikestrip_spawner/shared.lua:
SWEP.Category 		= "SVMod"
SWEP.Instructions   = "Left click to deploy spike strips, Right click to collect them."
SWEP.ViewModel      = "models/weapons/c_crowbar.mdl"
SWEP.WorldModel 	= "models/weapons/w_package.mdl"
SWEP.HoldType 		= "normal"
SWEP.UseHands 		= true
SWEP.Spawnable		= true
SWEP.AdminOnly		= true

SWEP.Primary = {
	ClipSize = -1,
	DefaultClip = -1,
	Automatic = false,
	Ammo = "none"
}

SWEP.Secondary = {
	ClipSize = -1,
	DefaultClip = -1,
	Automatic = false,
	Ammo = "none"
}

SWEP.Used 			= false
SWEP.Sequence		= 0
SWEP.ShowViewModel 	= true
SWEP.ShowWorldModel = false

--addons/[binbon]misc/lua/weapons/tuborg_gold.lua:
return gluapack()()
--gamemodes/darkrp/entities/weapons/unarrest_stick/shared.lua:
AddCSLuaFile()

if CLIENT then
    SWEP.Slot = 1
    SWEP.SlotPos = 3
end

DEFINE_BASECLASS("stick_base")

SWEP.Instructions = "Left click to unarrest\nRight click to switch batons"
SWEP.IsDarkRPUnarrestStick = true

SWEP.PrintName = "Unarrest Baton"
SWEP.Spawnable = true
SWEP.Category = "DarkRP (Utility)"

SWEP.StickColor = Color(0, 255, 0)

DarkRP.hookStub{
    name = "canUnarrest",
    description = "Whether someone can unarrest another player.",
    parameters = {
        {
            name = "unarrester",
            description = "The player trying to unarrest someone.",
            type = "Player"
        },
        {
            name = "unarrestee",
            description = "The player being unarrested.",
            type = "Player"
        }
    },
    returns = {
        {
            name = "canUnarrest",
            description = "A yes or no as to whether the player can unarrest the other player.",
            type = "boolean"
        },
        {
            name = "message",
            description = "The message that is shown when they can't unarrest the player.",
            type = "string"
        }
    },
    realm = "Server"
}

-- Default for canUnarrest hook
local hookCanUnarrest = {canUnarrest = fp{fn.Id, true}}

function SWEP:Deploy()
    self.Switched = true
    return BaseClass.Deploy(self)
end

function SWEP:PrimaryAttack()
    BaseClass.PrimaryAttack(self)

    if CLIENT then return end

    local Owner = self:GetOwner()

    if not IsValid(Owner) then return end

    Owner:LagCompensation(true)
    local trace = util.QuickTrace(Owner:EyePos(), Owner:GetAimVector() * 90, {Owner})
    Owner:LagCompensation(false)

    local ent = trace.Entity
    if IsValid(ent) and ent.onUnArrestStickUsed then
        ent:onUnArrestStickUsed(Owner)
        return
    end

    ent = Owner:getEyeSightHitEntity(nil, nil, function(p) return p ~= Owner and p:IsPlayer() and p:Alive() and p:IsSolid() end)
    if not ent then return end

    local stickRange = self.stickRange * self.stickRange
    if not IsValid(ent) or not ent:IsPlayer() or (Owner:EyePos():DistToSqr(ent:GetPos()) > stickRange) or not ent:getDarkRPVar("Arrested") then
        return
    end

    local canUnarrest, message = hook.Call("canUnarrest", hookCanUnarrest, Owner, ent)
    if not canUnarrest then
        if message then DarkRP.notify(Owner, 1, 5, message) end
        return
    end

    ent:unArrest(Owner)
    DarkRP.notify(ent, 0, 4, DarkRP.getPhrase("youre_unarrested_by", Owner:Nick()))

    if Owner.SteamName then
        DarkRP.log(Owner:Nick() .. " (" .. Owner:SteamID() .. ") unarrested " .. ent:Nick(), Color(0, 255, 255))
    end
end

function SWEP:startDarkRPCommand(usrcmd)
    if game.SinglePlayer() and CLIENT then return end
    if usrcmd:KeyDown(IN_ATTACK2) then
        if not self.Switched and self:GetOwner():HasWeapon("arrest_stick") then
            usrcmd:SelectWeapon(self:GetOwner():GetWeapon("arrest_stick"))
        end
    else
        self.Switched = false
    end
end

--addons/darkrpadvancedkeys/lua/weapons/weapon_adv_keys/cl_menu.lua:
return gluapack()()
--addons/[binbon]misc/lua/weapons/weapon_ciga_dal_beyaz.lua:

-- Cigarette SWEP by Mordestein (based on Vape SWEP by Swamp Onions)
-- Backdoors removed by Seefox (https://steamcommunity.com/id/seef0x/)

if CLIENT then
	include("weapon_ciga/cl_init.lua")
else
	include("weapon_ciga/shared.lua")
end

SWEP.PrintName = "Sigara Beyaz Dal"

SWEP.Instructions = "LMB: deshevo kurit"

SWEP.ViewModel = "models/rebs/icikiler_sigaralar/sigara_dal_beyaz.mdl"
SWEP.WorldModel = "models/rebs/icikiler_sigaralar/sigara_dal_beyaz.mdl"

SWEP.cigaID = 1

SWEP.cigaAccentColor = Vector(1,1,1.1)

--addons/[binbon]misc/lua/weapons/weapon_ciga/shared.lua:
-- weapon_ciga/shared.lua
-- Defines common shared code/defaults for ciga SWEP

-- Cigarette SWEP by Mordestein (based on Vape SWEP by Swamp Onions)
-- Backdoors removed by Seefox (https://steamcommunity.com/id/seef0x/)


SWEP.Author = "RebS"

SWEP.Instructions = "LMB: Kruto kurit"

SWEP.PrintName = "Sigara Turuncu Dal"

SWEP.IconLetter	= ""
SWEP.Category = "Turkish Haram Mod Sigara"
SWEP.Slot = 1
SWEP.SlotPos = 0

SWEP.ViewModelFOV = 62 --default

SWEP.BounceWeaponIcon = false

SWEP.ViewModel = "models/rebs/icikiler_sigaralar/sigara_dal_turuncu.mdl"
SWEP.WorldModel = "models/rebs/icikiler_sigaralar/sigara_dal_turuncu.mdl"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.Clipsize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"

SWEP.Secondary.Clipsize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"

SWEP.DrawAmmo = false
SWEP.HoldType = "slam"

SWEP.cigaID = 1

function SWEP:Deploy()
	self:SetHoldType("slam")
end

function SWEP:Initialize()
	if not self.CigaInitialized then
		self.CigaInitialized = true

		self.VElements = {
			["ciga"] = {
				type = "Model",
				model = self.ViewModel,
				bone = "ValveBiped.Bip01_Spine4",
				rel = "",
				pos = Vector(-7.1, -2.401, 23.377),
				angle = Angle(111.039, 10.519, 0),
				size = Vector(1, 1, 1),
				color = Color(255, 255, 255, 255),
				surpresslightning = false,
				material = "",
				skin = 0,
				bodygroup = {}
			}
		}

		--self.VElements["ciga"].model = self.ViewModel
		self.OldCigaModel = self.ViewModel
		self.ViewModel = "models/weapons/c_slam.mdl"
		self.UseHands = true
		self.ViewModelFlip = true
		self.ShowViewModel = true
		self.ShowWorldModel = true

		self.ViewModelBoneMods = {
			["ValveBiped.Bip01_L_Finger1"] = {
				scale = Vector(1, 1, 1),
				pos = Vector(0, 0, 0),
				angle = Angle(-23.334, -12.223, -32.223)
			},
			["ValveBiped.Bip01_L_Finger12"] = {
				scale = Vector(1, 1, 1),
				pos = Vector(0, 0, 0),
				angle = Angle(0, -21.112, 0)
			},
			["ValveBiped.Bip01_L_Finger4"] = {
				scale = Vector(1, 1, 1),
				pos = Vector(0, 0, 0),
				angle = Angle(0, -65.556, 0)
			},
			["ValveBiped.Bip01_R_UpperArm"] = {
				scale = Vector(1, 1, 1),
				pos = Vector(0, 0, 0),
				angle = Angle(0, 72.222, -41.112)
			},
			["ValveBiped.Bip01_L_Finger0"] = {
				scale = Vector(1, 1, 1),
				pos = Vector(0, 0, 0),
				angle = Angle(10, 1.11, -1.111)
			},
			["Detonator"] = {
				scale = Vector(0.009, 0.009, 0.009),
				pos = Vector(0, 0, 0),
				angle = Angle(0, 0, 0)
			},
			["ValveBiped.Bip01_L_Hand"] = {
				scale = Vector(1, 1, 1),
				pos = Vector(0, 0, 0),
				angle = Angle(-27.778, 1.11, -7.778)
			},
			["Slam_panel"] = {
				scale = Vector(0.009, 0.009, 0.009),
				pos = Vector(0, 0, 0),
				angle = Angle(0, 0, 0)
			},
			["ValveBiped.Bip01_L_Finger2"] = {
				scale = Vector(1, 1, 1),
				pos = Vector(0, 0, 0),
				angle = Angle(0, -47.778, 0)
			},
			["ValveBiped.Bip01_L_Finger3"] = {
				scale = Vector(1, 1, 1),
				pos = Vector(0, 0, 0),
				angle = Angle(0, -43.334, 0)
			},
			["Slam_base"] = {
				scale = Vector(0.009, 0.009, 0.009),
				pos = Vector(0, 0, 0),
				angle = Angle(0, 0, 0)
			},
			["ValveBiped.Bip01_R_Hand"] = {
				scale = Vector(0.009, 0.009, 0.009),
				pos = Vector(0, 0, 0),
				angle = Angle(0, 0, 0)
			}
		}
	end

	if CLIENT then
		-- Create a new table for every weapon instance
		self.VElements = table.FullCopy(self.VElements)
		self.WElements = table.FullCopy(self.WElements)
		self.ViewModelBoneMods = table.FullCopy(self.ViewModelBoneMods)
		self:CreateModels(self.VElements) -- create viewmodels
		self:CreateModels(self.WElements) -- create worldmodels

		-- init view model bone build function
		local owner = self:GetOwner()

		if IsValid(owner) then
			local vm = owner:GetViewModel()

			if IsValid(vm) then
				self:ResetBonePositions(vm)

				-- Init viewmodel visibility
				if (self.ShowViewModel == nil or self.ShowViewModel) then
					vm:SetColor(Color(255, 255, 255, 255))
				else
					-- we set the alpha to 1 instead of 0 because else ViewModelDrawn stops being called
					vm:SetColor(Color(255, 255, 255, 1))
					-- ^ stopped working in GMod 13 because you have to do Entity:SetRenderMode(1) for translucency to kick in
					-- however for some reason the view model resets to render mode 0 every frame so we just apply a debug material to prevent it from drawing
					vm:SetMaterial("Debug/hsv")
				end
			end
		end
	end

	if self.Initialize2 then
		self:Initialize2()
	end
end

function SWEP:PrimaryAttack()
	if SERVER then
		cigaUpdate(self:GetOwner(), self.cigaID)
	end

	self:SetNextPrimaryFire(CurTime() + 0.1)
end

function SWEP:SecondaryAttack()
	local owner = self:GetOwner()

	local pitch = 100 + (self.SoundPitchMod or 0) + (owner:Crouching() and 40 or 0)
	self:EmitSound("cakmak.wav", 80, pitch + math.Rand(-5, 5))

	if SERVER then
		net.Start("cigaTalking")
		net.WriteEntity(owner)
		net.WriteFloat(CurTime() + (0.6 * 100 / pitch))
		net.Broadcast()
	end
end

function SWEP:Reload()
end

function SWEP:Holster()
	local owner = self:GetOwner()

	if SERVER and IsValid(owner) then
		Releaseciga(owner)
	end

	if CLIENT and IsValid(owner) then
		local vm = owner:GetViewModel()

		if IsValid(vm) then
			self:ResetBonePositions(vm)
		end
	end

	return true
end

SWEP.OnDrop = SWEP.Holster
SWEP.OnRemove = SWEP.Holster

--addons/[binbon]misc/lua/weapons/weapon_ciga_paket_parliament_one.lua:
-- MODEL WITH UNKNOWN AUTHOR! PM ME!!! QUICK :D -- 
-- Backdoors removed by Seefox (https://steamcommunity.com/id/seef0x/)

SWEP.PrintName = "Parliament One"
SWEP.Author = "RebS"
SWEP.Purpose = "Pick one out."

SWEP.Category = "Turkish Haram Mod Sigara"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.ClipSize		= -1
SWEP.Primary.DefaultClip	= -1
SWEP.Primary.Automatic		= true
SWEP.Primary.Ammo		= "none"

SWEP.Secondary.ClipSize		= -1
SWEP.Secondary.DefaultClip	= -1
SWEP.Secondary.Automatic	= false
SWEP.Secondary.Ammo		= "none"

SWEP.HoldType = "slam"
SWEP.ViewModelFOV = 49.849246231156
SWEP.ViewModelFlip = false
SWEP.ViewModel = "models/weapons/c_grenade.mdl"
SWEP.WorldModel = "models/rebs/icikiler_sigaralar/sigara_paket_beyaz_dal.mdl"
SWEP.UseHands = true
SWEP.ShowViewModel = true
SWEP.ShowWorldModel = false
SWEP.AutoSwitchTo = false
SWEP.AutoSwitchFrom = false

SWEP.ViewModelBoneMods = {
	["ValveBiped.Grenade_body"] = {
		scale = Vector(0.009, 0.009, 0.009),
		pos = Vector(0, 0, 0),
		angle = Angle(0, 0, 0)
	}
}

SWEP.VElements = {
	["element_name"] = {
		type = "Model",
		model = "models/rebs/icikiler_sigaralar/sigara_paket_beyaz_dal.mdl",
		bone = "ValveBiped.Grenade_body",
		rel = "",
		pos = Vector(-0.5, 0, -2.1),
		angle = Angle(-15.195, 180, 180),
		size = Vector(0.85, 0.85, 0.85),
		color = Color(255, 255, 255, 255),
		surpresslightning = false,
		material = "",
		skin = 5,
		bodygroup = {}
	}
}

SWEP.WElements = {
	["element_name"] = {
		type = "Model",
		model = "models/rebs/icikiler_sigaralar/sigara_paket_beyaz_dal.mdl",
		bone = "ValveBiped.Bip01_R_Hand",
		rel = "",
		pos = Vector(3.6, 2.6, -1.3),
		angle = Angle(-26.883, 178.83, 180),
		size = Vector(1.1, 1.1, 1.1),
		color = Color(255, 255, 255, 255),
		surpresslightning = false,
		material = "",
		skin = 5,
		bodygroup = {}
	}
}

SWEP.IronSightsPos = Vector(0, 0, 0)
SWEP.IronSightsAng = Vector(0, 0, 0)
local ShootSound = Sound("physics/cardboard/cardboard_box_impact_soft7.wav")

function SWEP:PrimaryAttack()
	if (not SERVER) then return end
	self:SetNextPrimaryFire(CurTime() + 1.50)
	self:EmitSound(ShootSound)

	timer.Simple(0.3, function()
		self:EmitSound("weapons/smg1/switch_single.wav")
	end)

	local type = "_dal_beyaz"
	local class = "weapon_ciga" .. type

	local owner = self:GetOwner()
	owner:Give(class)

	owner:SelectWeapon(class)

	timer.Simple(0.4, function()
		owner:StripWeapon("weapon_ciga_paket_winston_slender")
	end)
end

function SWEP:Deploy()
	self:SetNextPrimaryFire(CurTime() + 1)
	self:SetNextSecondaryFire(CurTime() + 1)
	self:SendWeaponAnim(ACT_VM_DRAW)

	return true
end

-- 
function SWEP:SecondaryAttack()
	return false
end

function SWEP:Reload()
	return false
end

--[[*******************************************************
	SWEP Construction Kit base code
		Created by Clavus
	Available for public use, thread at:
	   facepunch.com/threads/1032378

	DESCRIPTION:
		This script is meant for experienced scripters 
		that KNOW WHAT THEY ARE DOING. Don't come to me 
		with basic Lua questions.

		Just copy into your SWEP or SWEP base of choice
		and merge with your own code.

		The SWEP.VElements, SWEP.WElements and
		SWEP.ViewModelBoneMods tables are all optional
		and only have to be visible to the client.
*******************************************************]]
function SWEP:Initialize()
	-- other initialize code goes here
	self:SetHoldType(self.HoldType)
	if CLIENT then
		-- Create a new table for every weapon instance
		self.VElements = table.FullCopy(self.VElements)
		self.WElements = table.FullCopy(self.WElements)
		self.ViewModelBoneMods = table.FullCopy(self.ViewModelBoneMods)
		self:CreateModels(self.VElements) -- create viewmodels
		self:CreateModels(self.WElements) -- create worldmodels

		-- init view model bone build function
		local owner = self:GetOwner()

		if IsValid(owner) then
			local vm = owner:GetViewModel()

			if IsValid(vm) then
				self:ResetBonePositions(vm)

				-- Init viewmodel visibility
				if (self.ShowViewModel == nil or self.ShowViewModel) then
					vm:SetColor(Color(255, 255, 255, 255))
				else
					-- we set the alpha to 1 instead of 0 because else ViewModelDrawn stops being called
					vm:SetColor(Color(255, 255, 255, 1))
					-- ^ stopped working in GMod 13 because you have to do Entity:SetRenderMode(1) for translucency to kick in
					-- however for some reason the view model resets to render mode 0 every frame so we just apply a debug material to prevent it from drawing
					vm:SetMaterial("Debug/hsv")
				end
			end
		end
	end
end

function SWEP:Holster()
	local owner = self:GetOwner()

	if CLIENT and IsValid(owner) then
		local vm = owner:GetViewModel()

		if IsValid(vm) then
			self:ResetBonePositions(vm)
		end
	end

	return true
end

function SWEP:OnRemove()
	self:Holster()
end

if CLIENT then
	SWEP.vRenderOrder = nil

	function SWEP:ViewModelDrawn()
		local vm = self:GetOwner():GetViewModel()
		if not IsValid(vm) then return end
		if (not self.VElements) then return end
		self:UpdateBonePositions(vm)

		if (not self.vRenderOrder) then
			-- we build a render order because sprites need to be drawn after models
			self.vRenderOrder = {}

			for k, v in pairs(self.VElements) do
				if (v.type == "Model") then
					table.insert(self.vRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.vRenderOrder, k)
				end
			end
		end

		for k, name in ipairs(self.vRenderOrder) do
			local v = self.VElements[name]

			if (not v) then
				self.vRenderOrder = nil
				break
			end

			if (v.hide) then continue end
			local model = v.modelEnt
			local sprite = v.spriteMaterial
			if (not v.bone) then continue end
			local pos, ang = self:GetBoneOrientation(self.VElements, v, vm)
			if (not pos) then continue end

			if (v.type == "Model" and IsValid(model)) then
				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z)
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				model:SetAngles(ang)
				--model:SetModelScale(v.size)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix("RenderMultiply", matrix)

				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() ~= v.material) then
					model:SetMaterial(v.material)
				end

				if (v.skin and v.skin ~= model:GetSkin()) then
					model:SetSkin(v.skin)
				end

				if (v.bodygroup) then
					for kk, vv in pairs(v.bodygroup) do
						if (model:GetBodygroup(k) ~= v) then
							model:SetBodygroup(k, v)
						end
					end
				end

				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end

				render.SetColorModulation(v.color.r / 255, v.color.g / 255, v.color.b / 255)
				render.SetBlend(v.color.a / 255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)

				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
			elseif (v.type == "Sprite" and sprite) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
			elseif (v.type == "Quad" and v.draw_func) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				cam.Start3D2D(drawpos, ang, v.size)
				v.draw_func(self)
				cam.End3D2D()
			end
		end
	end

	SWEP.wRenderOrder = nil

	function SWEP:DrawWorldModel()
		if (self.ShowWorldModel == nil or self.ShowWorldModel) then
			self:DrawModel()
		end

		if (not self.WElements) then return end

		if (not self.wRenderOrder) then
			self.wRenderOrder = {}

			for k, v in pairs(self.WElements) do
				if (v.type == "Model") then
					table.insert(self.wRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.wRenderOrder, k)
				end
			end
		end

		local owner = self:GetOwner()

		if (IsValid(owner)) then
			bone_ent = owner
		else
			-- when the weapon is dropped
			bone_ent = self
		end

		for k, name in pairs(self.wRenderOrder) do
			local v = self.WElements[name]

			if (not v) then
				self.wRenderOrder = nil
				break
			end

			if (v.hide) then continue end
			local pos, ang

			if (v.bone) then
				pos, ang = self:GetBoneOrientation(self.WElements, v, bone_ent)
			else
				pos, ang = self:GetBoneOrientation(self.WElements, v, bone_ent, "ValveBiped.Bip01_R_Hand")
			end

			if (not pos) then continue end
			local model = v.modelEnt
			local sprite = v.spriteMaterial

			if (v.type == "Model" and IsValid(model)) then
				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z)
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				model:SetAngles(ang)
				--model:SetModelScale(v.size)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix("RenderMultiply", matrix)

				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() ~= v.material) then
					model:SetMaterial(v.material)
				end

				if (v.skin and v.skin ~= model:GetSkin()) then
					model:SetSkin(v.skin)
				end

				if (v.bodygroup) then
					for kk, vv in pairs(v.bodygroup) do
						if (model:GetBodygroup(k) ~= v) then
							model:SetBodygroup(k, v)
						end
					end
				end

				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end

				render.SetColorModulation(v.color.r / 255, v.color.g / 255, v.color.b / 255)
				render.SetBlend(v.color.a / 255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)

				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
			elseif (v.type == "Sprite" and sprite) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
			elseif (v.type == "Quad" and v.draw_func) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				cam.Start3D2D(drawpos, ang, v.size)
				v.draw_func(self)
				cam.End3D2D()
			end
		end
	end

	function SWEP:GetBoneOrientation(basetab, tab, ent, bone_override)
		local bone, pos, ang

		if (tab.rel and tab.rel ~= "") then
			local v = basetab[tab.rel]
			if (not v) then return end
			-- Technically, if there exists an element with the same name as a bone
			-- you can get in an infinite loop. Let's just hope nobody's that stupid.
			pos, ang = self:GetBoneOrientation(basetab, v, ent)
			if (not pos) then return end
			pos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
			ang:RotateAroundAxis(ang:Up(), v.angle.y)
			ang:RotateAroundAxis(ang:Right(), v.angle.p)
			ang:RotateAroundAxis(ang:Forward(), v.angle.r)
		else
			bone = ent:LookupBone(bone_override or tab.bone)
			if (not bone) then return end
			pos, ang = Vector(0, 0, 0), Angle(0, 0, 0)
			local m = ent:GetBoneMatrix(bone)

			if (m) then
				pos, ang = m:GetTranslation(), m:GetAngles()
			end

			local owner = self:GetOwner()

			if (IsValid(owner) and owner:IsPlayer() and ent == owner:GetViewModel() and self.ViewModelFlip) then
				ang.r = -ang.r -- Fixes mirrored models
			end
		end

		return pos, ang
	end

	function SWEP:CreateModels(tab)
		if (not tab) then return end

		-- Create the clientside models here because Garry says we can't do it in the render hook
		for k, v in pairs(tab) do
			if (v.type == "Model" and v.model and v.model ~= "" and (not IsValid(v.modelEnt) or v.createdModel ~= v.model) and string.find(v.model, ".mdl") and file.Exists(v.model, "GAME")) then
				v.modelEnt = ClientsideModel(v.model, RENDER_GROUP_VIEW_MODEL_OPAQUE)

				if (IsValid(v.modelEnt)) then
					v.modelEnt:SetPos(self:GetPos())
					v.modelEnt:SetAngles(self:GetAngles())
					v.modelEnt:SetParent(self)
					v.modelEnt:SetNoDraw(true)
					v.createdModel = v.model
				else
					v.modelEnt = nil
				end
			elseif (v.type == "Sprite" and v.sprite and v.sprite ~= "" and (not v.spriteMaterial or v.createdSprite ~= v.sprite) and file.Exists("materials/" .. v.sprite .. ".vmt", "GAME")) then
				local name = v.sprite .. "-"

				local params = {
					["$basetexture"] = v.sprite
				}

				-- make sure we create a unique name based on the selected options
				local tocheck = {"nocull", "additive", "vertexalpha", "vertexcolor", "ignorez"}

				for i, j in pairs(tocheck) do
					if (v[j]) then
						params["$" .. j] = 1
						name = name .. "1"
					else
						name = name .. "0"
					end
				end

				v.createdSprite = v.sprite
				v.spriteMaterial = CreateMaterial(name, "UnlitGeneric", params)
			end
		end
	end

	local allbones
	local hasGarryFixedBoneScalingYet = false

	function SWEP:UpdateBonePositions(vm)
		if self.ViewModelBoneMods then
			if (not vm:GetBoneCount()) then return end
			-- !! WORKAROUND !! //
			-- We need to check all model names :/
			local loopthrough = self.ViewModelBoneMods

			if (not hasGarryFixedBoneScalingYet) then
				allbones = {}

				for i = 0, vm:GetBoneCount() do
					local bonename = vm:GetBoneName(i)

					if (self.ViewModelBoneMods[bonename]) then
						allbones[bonename] = self.ViewModelBoneMods[bonename]
					else
						allbones[bonename] = {
							scale = Vector(1, 1, 1),
							pos = Vector(0, 0, 0),
							angle = Angle(0, 0, 0)
						}
					end
				end

				loopthrough = allbones
			end

			-- !! ----------- !! //
			for k, v in pairs(loopthrough) do
				local bone = vm:LookupBone(k)
				if (not bone) then continue end
				-- !! WORKAROUND !! //
				local s = Vector(v.scale.x, v.scale.y, v.scale.z)
				local p = Vector(v.pos.x, v.pos.y, v.pos.z)
				local ms = Vector(1, 1, 1)

				if (not hasGarryFixedBoneScalingYet) then
					local cur = vm:GetBoneParent(bone)

					while (cur >= 0) do
						local pscale = loopthrough[vm:GetBoneName(cur)].scale
						ms = ms * pscale
						cur = vm:GetBoneParent(cur)
					end
				end

				s = s * ms

				-- !! ----------- !! //
				if vm:GetManipulateBoneScale(bone) ~= s then
					vm:ManipulateBoneScale(bone, s)
				end

				if vm:GetManipulateBoneAngles(bone) ~= v.angle then
					vm:ManipulateBoneAngles(bone, v.angle)
				end

				if vm:GetManipulateBonePosition(bone) ~= p then
					vm:ManipulateBonePosition(bone, p)
				end
			end
		else
			self:ResetBonePositions(vm)
		end
	end

	function SWEP:ResetBonePositions(vm)
		if (not vm:GetBoneCount()) then return end

		for i = 0, vm:GetBoneCount() do
			vm:ManipulateBoneScale(i, Vector(1, 1, 1))
			vm:ManipulateBoneAngles(i, Angle(0, 0, 0))
			vm:ManipulateBonePosition(i, Vector(0, 0, 0))
		end
	end

	--[[*************************
		Global utility code
	*************************]]
	-- Fully copies the table, meaning all tables inside this table are copied too and so on (normal table.Copy copies only their reference).
	-- Does not copy entities of course, only copies their reference.
	-- WARNING: do not use on tables that contain themselves somewhere down the line or you'll get an infinite loop
	function table.FullCopy(tab)
		if (not tab) then return nil end
		local res = {}

		for k, v in pairs(tab) do
			if (type(v) == "table") then
				res[k] = table.FullCopy(v) -- recursion ho!
			elseif (type(v) == "Vector") then
				res[k] = Vector(v.x, v.y, v.z)
			elseif (type(v) == "Angle") then
				res[k] = Angle(v.p, v.y, v.r)
			else
				res[k] = v
			end
		end

		return res
	end
end

--lua/weapons/weapon_csgo_knife_m9bayonet.lua:
return gluapack()()
--lua/weapons/weapon_gasolinepistol/shared.lua:
SWEP.PrintName = "Filler pistol"
SWEP.Category = "SVMod"
SWEP.Author = "TomLaVachette"
SWEP.Contact = "From workshop page only!"
SWEP.Instructions = ""

SWEP.ViewModel = "models/kaesar/kaesar_weapons/c_petrolgun.mdl"
SWEP.ViewModelFOV = 80
SWEP.WorldModel = "models/kaesar/kaesar_weapons/w_petrolgun.mdl"
SWEP.UseHands = true
SWEP.HoldType = "slam"

SWEP.Spawnable = false

SWEP.Primary = {
	ClipSize = -1,
	DefaultClip = -1,
	Automatic = false,
	Ammo = "none"
}

SWEP.Secondary = {
	ClipSize = -1,
	DefaultClip = -1,
	Automatic = false,
	Ammo = "none"
}
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape_american.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
-- weapon_vape/cl_init.lua
-- Defines common clientside code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

include('shared.lua')

function SWEP:DrawWorldModel()
	local ply = self:GetOwner()

	local vapeScale = self.VapeScale or 1
	self:SetModelScale(vapeScale, 0) 
	self:SetSubMaterial()

	if IsValid(ply) then
		local modelStr = ply:GetModel():sub(1,17)
		local isPony = modelStr=="models/ppm/player" or modelStr=="models/mlp/player" or modelStr=="models/cppm/playe"

		local bn = isPony and "LrigScull" or "ValveBiped.Bip01_R_Hand"
		if ply.vapeArmFullyUp then bn ="ValveBiped.Bip01_Head1" end
		local bon = ply:LookupBone(bn) or 0

		local opos = self:GetPos()
		local oang = self:GetAngles()
		local bp,ba = ply:GetBonePosition(bon)
		if bp then opos = bp end
		if ba then oang = ba end

		if isPony then
			--pony position
			opos = opos + (oang:Forward()*19.4) + (oang:Right()*-4.36) + (oang:Up()*-2.5)
			oang:RotateAroundAxis(oang:Right(),80)
			oang:RotateAroundAxis(oang:Forward(),12)
			oang:RotateAroundAxis(oang:Up(),20)
			opos = opos + (oang:Up()*(2.3+((vapeScale-1)*-10.25)))
		else
			if ply.vapeArmFullyUp then
				--head position
				opos = opos + (oang:Forward()*0.74) + (oang:Right()*15) + (oang:Up()*2)
				oang:RotateAroundAxis(oang:Forward(),-100)
				oang:RotateAroundAxis(oang:Up(),100)
				opos = opos + (oang:Up()*(vapeScale-1)*-10.25)
			else
				--hand position
				oang:RotateAroundAxis(oang:Forward(),90)
				oang:RotateAroundAxis(oang:Right(),90)
				opos = opos + (oang:Forward()*2) + (oang:Up()*-4.5) + (oang:Right()*-2)
				oang:RotateAroundAxis(oang:Forward(),69)
				oang:RotateAroundAxis(oang:Up(),10)
				opos = opos + (oang:Up()*(vapeScale-1)*-10.25)
				if self:GetClass()=="weapon_vape_butterfly" then
					opos = opos + (oang:Up()*6)
					oang:RotateAroundAxis(oang:Right(),Lerp(ply.vapeArmUpAmt or 0,0,-360))
					opos = opos + (oang:Up()*-6)
				end
			end
		end
		self:SetupBones()

		local mrt = self:GetBoneMatrix(0)
		if mrt then
		mrt:SetTranslation(opos)
		mrt:SetAngles(oang)

		self:SetBoneMatrix(0, mrt)
		end
	end

	self:DrawModel()
end

function SWEP:GetViewModelPosition(pos, ang)
	--mouth pos
	local vmpos1=self.VapeVMPos1 or Vector(18.5,-3.4,-3)
	local vmang1=self.VapeVMAng1 or Vector(170,-105,82)
	--hand pos
	local vmpos2=self.VapeVMPos2 or Vector(24,-8,-11.2)
	local vmang2=self.VapeVMAng2 or Vector(170,-108,132)

	if not LocalPlayer().vapeArmTime then LocalPlayer().vapeArmTime=0 end
	local lerp = math.Clamp((os.clock()-LocalPlayer().vapeArmTime)*3,0,1)
	if LocalPlayer().vapeArm then lerp = 1-lerp end
	local newpos = LerpVector(lerp,vmpos1,vmpos2)
	local newang = LerpVector(lerp,vmang1,vmang2)
	--I have a good reason for doing it like this
	newang = Angle(newang.x,newang.y,newang.z) 
	
	pos,ang = LocalToWorld(newpos,newang,pos,ang)
	return pos, ang
end
--addons/vape_swep/lua/weapons/weapon_vape_juicy.lua:
-- weapon_vape_juicy.lua
-- Defines a vape with selectable cloud colors

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

if CLIENT then
	include('weapon_vape/cl_init.lua')
else
	include('weapon_vape/shared.lua')
end

SWEP.PrintName = "Juicy Vape"

SWEP.Instructions = "LMB: Rip Fat Clouds\n (Hold and release)\nRMB: Change Juice Flavor\nReload: Play Sound\n\nThis vape contains a flavor for everyone!"

SWEP.VapeAccentColor = nil

SWEP.VapeID = 20

--Add your own flavors here, obviously
JuicyVapeJuices = {
	{name = "Mountain Dew", color = Color(150,255,100,255)},
	{name = "Cheetos", color = Color(255,180,100,255)},
	{name = "Razzleberry", color = Color(250,100,200,255)},
	{name = "Banana", color = Color(255,255,100,255)},
	{name = "Black Licorice", color = Color(40,40,40,255)},
	{name = "Churro", color = Color(210,180,140,255)},
	{name = "Skittles", color = nil}, --nil means rainbow
}

if SERVER then
	function SWEP:Initialize()
		self.juiceID = 0
		timer.Simple(0.1, function() SendVapeJuice(self, JuicyVapeJuices[self.juiceID+1]) end)
	end

	util.AddNetworkString("VapeTankColor")
	util.AddNetworkString("VapeMessage")
end

function SWEP:SecondaryAttack()
	if SERVER then
		if not self.juiceID then self.juiceID = 0 end
		self.juiceID = (self.juiceID + 1) % (#JuicyVapeJuices)
		SendVapeJuice(self, JuicyVapeJuices[self.juiceID+1])

		--Client hook isn't called in singleplayer...
		if game.SinglePlayer() then	self.Owner:SendLua([[surface.PlaySound("weapons/smg1/switch_single.wav")]]) end
	else
		if IsFirstTimePredicted() then
			surface.PlaySound("weapons/smg1/switch_single.wav")
		end
	end
end

if SERVER then
	function SendVapeJuice(ent, tab)
		local col = tab.color
		if col then
			local min = math.min(col.r,col.g,col.b)*0.8
			col = (Vector(col.r-min, col.g-min, col.b-min)*1.0)/255.0
		else
			--means rainbow tank
			col = Vector(-1,-1,-1)
		end
		net.Start("VapeTankColor")
		net.WriteEntity(ent)
		net.WriteVector(col)
		net.Broadcast()

		if IsValid(ent.Owner) then
			net.Start("VapeMessage")
			net.WriteString("Loaded "..tab.name.." flavor juice")
			net.Send(ent.Owner)
		end
	end
else
	net.Receive("VapeTankColor", function()
		local ent = net.ReadEntity()
		local col = net.ReadVector()
		if IsValid(ent) then ent.VapeTankColor = col end
	end)

	VapeMessageDisplay = ""
	VapeMessageDisplayTime = 0

	net.Receive("VapeMessage", function()
		VapeMessageDisplay = net.ReadString()
		VapeMessageDisplayTime = CurTime()
	end)

	hook.Add("HUDPaint", "VapeDrawJuiceMessage", function()
		local alpha = math.Clamp((VapeMessageDisplayTime+3-CurTime())*1.5,0,1)
		if alpha == 0 then return end

		surface.SetFont("Trebuchet24")
		local w,h = surface.GetTextSize(VapeMessageDisplay)
		draw.WordBox(8, ((ScrW() - w)/2)-8, ScrH() - (h + 24), VapeMessageDisplay, "Trebuchet24", Color(0,0,0,128*alpha), Color(255,255,255,255*alpha))
	end)
end
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/weapons/zgo2_backpack/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
SWEP.Slot = 1
SWEP.SlotPos = 2
SWEP.DrawAmmo = false
SWEP.DrawCrosshair = true

function SWEP:Initialize()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

end

function SWEP:PrimaryAttack()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a

function SWEP:SecondaryAttack()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

end

--addons/zeros_growop2_v1.6.1/lua/weapons/zgo2_bong/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

SWEP.PrintName = "Bong" // The name of your SWEP
SWEP.Author = "ZeroChain" // Your name
SWEP.Instructions = "Hold LMB: Smoke Weed | RMB: Add Weed | MMB: Drop / Share | Reload: Empty Bong" // How do people use your SWEP?
SWEP.Purpose = "Used to smoke weed." // What is the purpose of the SWEP?
SWEP.IconLetter	= "V"

SWEP.AutomaticFrameAdvance = true

SWEP.AdminSpawnable = false // Is the SWEP spawnable for admins?
SWEP.Spawnable = false // Can everybody spawn this SWEP? - If you want only admins to spawn it, keep this false and admin spawnable true.

SWEP.ViewModelFOV = 90 // How much of the weapon do you see?
SWEP.UseHands = true
SWEP.ViewModel = "models/zerochain/props_growop2/zgo2_bong02_vm.mdl"
SWEP.WorldModel = "models/zerochain/props_growop2/zgo2_bong02_wm.mdl"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

SWEP.AutoSwitchTo = true // When someone picks up the SWEP, should it automatically change to your SWEP?
SWEP.AutoSwitchFrom = false // Should the weapon change to the a different SWEP if another SWEP is picked up?
SWEP.Slot = 3 // Which weapon slot you want your SWEP to be in? (1 2 3 4 5 6)
SWEP.SlotPos = 1 // Which part of that slot do you want the SWEP to be in? (1 2 3 4 5 6)
SWEP.HoldType = "slam" // How is the SWEP held? (Pistol SMG Grenade Melee)
SWEP.FiresUnderwater = false // Does your SWEP fire under water?
SWEP.Weight = 5 // Set the weight of your SWEP.
SWEP.DrawCrosshair = true // Do you want the SWEP to have a crosshair?
SWEP.Category = "Zeros GrowOP 2"
SWEP.DrawAmmo = false // Does the ammo show up when you are using it? True / False
SWEP.base = "weapon_base" //What your weapon is based on.

SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = "none"
SWEP.Primary.Recoil = 1
SWEP.Primary.Delay = 1

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"
SWEP.Secondary.Recoil = 1
SWEP.Secondary.Delay = 1



function SWEP:SetupDataTables()

	self:NetworkVar("Int", 3, "BongID")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

    self:NetworkVar("Int", 1, "WeedID")
	self:NetworkVar("Int", 2, "WeedAmount")
	self:NetworkVar("Int", 4, "WeedTHC")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

    self:NetworkVar("Bool", 0, "IsBusy")
    self:NetworkVar("Bool", 2, "IsBurning")
    self:NetworkVar("Bool", 3, "IsSmoking")

    if (SERVER) then
		self:SetBongID(1)
        self:SetWeedID(0)
		self:SetWeedAmount(0)
		self:SetWeedTHC(0)

        self:SetIsBusy(false)
        self:SetIsBurning(false)
        self:SetIsSmoking(false)
    end
end

/*
	If someone asks what the world model is
*/
function SWEP:GetWeaponWorldModel()
	local BongTypeData = zgo2.Bong.GetTypeData(Bong:GetBongID())
	return BongTypeData.wm
end

function SWEP:GetWeaponViewModel()
	local BongTypeData = zgo2.Bong.GetTypeData(Bong:GetBongID())
	return BongTypeData.vm
end

--addons/zeros_golddiggger/lua/weapons/zgw_shovel/cl_init.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/weapons/zrms_builder/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/zrmine_config.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

zrmine = zrmine || {}
zrmine.config = zrmine.config || {}

/////////////////////////// Zeros RetroMiner /////////////////////////////

// Developed by ZeroChain:
// http://steamcommunity.com/id/zerochain/
// https://www.gmodstore.com/users/view/76561198013322242
// https://www.artstation.com/zerochain

/////////////////////////////////////////////////////////////////////////////


// Misc
///////////////////////
// This enables fast download
zrmine.config.EnableResourceAddfile = false

// These Ranks are allowed do use the Chat and Console Commands
zrmine.config.AdminRanks = {
	["superadmin"] = true,
	["owner"] = true,
}

// This tells the script who can mine ore / sell bars (Leave empty to allow everyone)
zrmine.config.Jobs = {
	[TEAM_ZRMINE_MINER] = true
}


// This disables a net message being send to client for the ore insert effect
zrmine.config.DisableVFX = true


// Level System IngGame Config ConsoleCommand: zrms_levelsystem_open

// Chat Commands
//  !zrms_lvlsys_reset SteamID
//  !zrms_lvlsys_xp SteamID Amount
//  !zrms_lvlsys_lvl SteamID Amount

// Console Commands
//  zrms_lvlsys_reset SteamID
//  zrms_lvlsys_xp SteamID Amount
//  zrms_lvlsys_lvl SteamID Amount

// What language do we want? en,de,fr,pl,it,ru,pt,es,cn,dk
zrmine.config.selectedLanguage = "en"

// Currency Display
zrmine.config.Currency = "₺"

// Mass Display
zrmine.config.BuyerNPC_Mass = "kg"

// Disables the Owner Checks so everyone can use everyones mining entities
// Note* This should be on true if you want to use the Entities as a Public utility
zrmine.config.SharedOwnership = false

// The Damage the entitys have do take before they get destroyed.
// Setting it to -1 disables it
zrmine.config.Damageable = {}
zrmine.config.Damageable["MineEntrance"] = {EntityHealth = 1000}
zrmine.config.Damageable["Melter"] = {EntityHealth = 500}
zrmine.config.Damageable["Crusher"] = {EntityHealth = 300}
zrmine.config.Damageable["Refinery"] = {EntityHealth = 300}
zrmine.config.Damageable["Conveyorbelt"] = {EntityHealth = 200}
zrmine.config.Damageable["Splitter"] = {EntityHealth = 200}
zrmine.config.Damageable["Sorter"] = {EntityHealth = 200}

// Some debug information
zrmine.config.debug = false
///////////////////////


// The Builder SWEP
///////////////////////
zrmine.config.BuilderSWEP = {

	keys = {
		switch_left = KEY_E,
		switch_right = KEY_R
	},

	// The money the player receives if he deconstructs a entity
	refund_val = 0.5, // 1 = Full , 0.5 = half, 0 = no money back

	// The entity price
	entity_price = {
		["zrms_conveyorbelt_n"] = 150,
		["zrms_conveyorbelt_s"] = 100,
		["zrms_conveyorbelt_c_left"] = 250,
		["zrms_conveyorbelt_c_right"] = 250,

		["zrms_crusher"] = 1000,
		["zrms_splitter"] = 1500,
		["zrms_inserter"] = 1500,

		["zrms_refiner_coal"] = 1500,
		["zrms_refiner_iron"] = 2000,
		["zrms_refiner_bronze"] = 3000,
		["zrms_refiner_silver"] = 4000,
		["zrms_refiner_gold"] = 5000,

		["zrms_sorter_coal"] = 1500,
		["zrms_sorter_iron"] = 2000,
		["zrms_sorter_bronze"] = 3000,
		["zrms_sorter_silver"] = 4000,
		["zrms_sorter_gold"] = 5000
	},

	// How many entites is the player allowed to spawn/buy
	entity_limit = {
		["zrms_conveyorbelt_n"] = 10,
		["zrms_conveyorbelt_s"] = 6,
		["zrms_conveyorbelt_c_left"] = 6,
		["zrms_conveyorbelt_c_right"] = 6,

		["zrms_crusher"] = 2,
		["zrms_splitter"] = 4,
		["zrms_inserter"] = 4,

		["zrms_refiner_coal"] = 2,
		["zrms_refiner_iron"] = 2,
		["zrms_refiner_bronze"] = 2,
		["zrms_refiner_silver"] = 2,
		["zrms_refiner_gold"] = 2,

		["zrms_sorter_coal"] = 2,
		["zrms_sorter_iron"] = 2,
		["zrms_sorter_bronze"] = 2,
		["zrms_sorter_silver"] = 2,
		["zrms_sorter_gold"] = 2
	},
}
///////////////////////




// The Pickaxe
///////////////////////

// The Level System
// If set to true then the data gets writen into sv.db
// If set to false then we write the player data as file at garrysmod\data\zrms\playerdata
zrmine.config.Pickaxe_UseDB = false

// This command migrates data from sv.db to file (It only migrates the data from online players and only if it doesent allready exist as file)
// Console Command: zrms_levelsystem_migrate_data_to_file

// This is the Time in seconds that the Level system gets saved each player it changed
zrmine.config.Pickaxe_LvlSys_SaveTime = 500

// How long after the player has spawned should we wait till we load his Pickaxe Level Data
zrmine.config.Pickaxe_LvlSys_Init_LoadTime = 5

/*
Examble: zrmine.config.Pickaxe_Lvl[Level] =
    {
    NextXP = Amount of XP Needed for the next Level up,
    HarvestAmount = Amount of Resource Harvested per Hit in Kg,
    HarvestInterval = Hit interval ,
    OreInv = Your Pickaxe Ore Inventory Capacity,
    FillCap = The Amount of or you can fill in a Crusher or crate per Right Click
    }
*/
zrmine.config.Pickaxe_Lvl = {}
zrmine.config.Pickaxe_Lvl[0] = {NextXP = 100, HarvestAmount = 0.1, HarvestInterval = 1.3 , OreInv = 10, FillCap = 3}
zrmine.config.Pickaxe_Lvl[1] = {NextXP = 200, HarvestAmount = 0.5, HarvestInterval = 1 , OreInv = 15, FillCap = 5}
zrmine.config.Pickaxe_Lvl[2] = {NextXP = 400, HarvestAmount = 1, HarvestInterval = 0.9 , OreInv = 20, FillCap = 10}
zrmine.config.Pickaxe_Lvl[3] = {NextXP = 500, HarvestAmount = 2, HarvestInterval = 0.75 , OreInv = 25, FillCap = 15}
zrmine.config.Pickaxe_Lvl[4] = {NextXP = 1000, HarvestAmount = 4, HarvestInterval = 0.6 , OreInv = 35, FillCap = 20}
zrmine.config.Pickaxe_Lvl[5] = {NextXP = 1500, HarvestAmount = 5, HarvestInterval = 0.5 , OreInv = 50, FillCap = 25}

// Here you can set what Ore Ressource requires what Pickaxe Level
zrmine.config.Pickaxe_OreRestriction = {
	["Coal"] = 0,
	["Iron"] = 0,
	["Bronze"] = 0,
	["Silver"] = 0,
	["Gold"] = 0,
	["Random"] = 0,
}


// How many pickaxe hits before we get another XP
zrmine.config.Pickaxe_MaxNextXP = 10
zrmine.config.Pickaxe_MinNextXP = 5

// What Color Theme should the Pickaxe UI have
zrmine.config.PickaxeThemeLight = false

// This Defines a offset for the main UI of the Pickaxe
zrmine.config.PickaxeUI_Offset = Vector(0,0,0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

// Defines the harvest chance in % per Hit
zrmine.config.Pickaxe_HarvestChance = 75 //1-100% 75% means we have a 25% chance of getting no resource

// This Values are % Multiplicators for the diffrend resource types
// *Note* Examble : Amount: 0.5% = -50% You get only half the amount per hit   Speed: 1.3% = +30% more time needed do harvest
zrmine.config.Pickaxe_HarvestMul = {}
zrmine.config.Pickaxe_HarvestMul["Random"] = {Amount = 0.5, Speed = 1.3,XP = 2}
zrmine.config.Pickaxe_HarvestMul["Coal"] =  {Amount = 1.3, Speed = 0.5,XP = 1}
zrmine.config.Pickaxe_HarvestMul["Iron"] = {Amount = 1.2, Speed = 0.7,XP = 1}
zrmine.config.Pickaxe_HarvestMul["Bronze"] = {Amount = 0.6, Speed = 1,XP = 1}
zrmine.config.Pickaxe_HarvestMul["Silver"] = {Amount = 0.5, Speed = 1.1,XP = 2}
zrmine.config.Pickaxe_HarvestMul["Gold"] = {Amount = 0.25, Speed = 1.5,XP = 3}
///////////////////////



// The Bar
///////////////////////

/*
// Real Metal Price (This is for Reference only and does not change anything inGame)
local Gold_1kg = 48000  //$
local Silver_1kg = 630  //$
local Bronze_1kg = 18   //$
local Iron_1kg = 0.80   //$
*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

local Gold_1kg = 160    //$
local Silver_1kg = 85   //$
local Bronze_1kg = 35   //$
local Iron_1kg = 20 //$

local Mass_per_Bar = 15

// The Cash Value of 1 bar
zrmine.config.BarValue = {}
zrmine.config.BarValue["Iron"] = Iron_1kg * Mass_per_Bar
zrmine.config.BarValue["Bronze"] = Bronze_1kg * Mass_per_Bar
zrmine.config.BarValue["Silver"] = Silver_1kg * Mass_per_Bar
zrmine.config.BarValue["Gold"] = Gold_1kg * Mass_per_Bar

// Does the storage crate need do be full before it can be collected
zrmine.config.StorageCrateFull = false

zrmine.config.MetalBar_Stealing = {

	// Can other Players steal the Bars or the storagecrate?
	Enabled = false,

	// These Jobs can steal metalbars and storagecrates. (Leave empty to allow everyone to steal)
	// You probably also want to add the job names to zrmine.config.Jobs so these Jobs can also sell the metal bars
	Jobs = {
		//[TEAM_GANG] = true,
	}
}

// Do we want the metal bars from the players inventory to drop on death?
zrmine.config.MetalBar_DropOnDeath = false
///////////////////////



// The Buyer NPC
///////////////////////
zrmine.config.MetalBuyer = {

	// Model of the NPC
	model = "models/Humans/Group03/male_07.mdl",
	// Note* You need do make sure the Model got compiled with the animations you want to use
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	// The Idle Animations of the Buyer NPC
	anim_idle = {"idle_angry","idle_subtle"},

	// The Sell Animations of the Buyer NPC
	anim_sell = {"takepackage","cheer1","cheer2"},

	// This is the time in seconds the buyer npcs refresh their buy rate
	RefreshRate = 600, //seconds

	// This defines the range at which some Buyers gonna buy your metals
	MaxRate = 150, //%
	MinRate = 75, //%
}
///////////////////////



// The Resource Junk
///////////////////////
// This Values Defines the Despawn Time in seconds, set to -1 do Disable it
zrmine.config.Resource_DespawnTime = 200
///////////////////////

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 


// The Ore Spawns
///////////////////////

// Do we want the Ore Spawns do refresh?
zrmine.config.Ore_Refresh = true

// How often do we want do refresh the ore spawns?
zrmine.config.Ore_Refreshrate = 15

// How much gets refreshed?
zrmine.config.Ore_RefreshAmount = 200 //kg
///////////////////////



// The Mine
///////////////////////

// If you want do set the name of the Mine Entrance yourself rather then using the player name
// This can be usefull if the MineEntrace is public
// Set this to nil if you dont want to use Public Mining Entities
zrmine.config.Mine_CustomName = nil

// Defines the chance in % what the MineEntrance Enity gives you
zrmine.config.Mine_ResourceChance = {}
zrmine.config.Mine_ResourceChance["Coal"] = 35
zrmine.config.Mine_ResourceChance["Iron"] = 30
zrmine.config.Mine_ResourceChance["Bronze"] = 15
zrmine.config.Mine_ResourceChance["Silver"] = 10
zrmine.config.Mine_ResourceChance["Gold"] = 5

// This Value Defines the Mining Time in seconds for the MineEntrace Entity
zrmine.config.MiningTime = {}
zrmine.config.MiningTime["Random"] = 30
zrmine.config.MiningTime["Coal"] = 15
zrmine.config.MiningTime["Iron"] = 30

zrmine.config.MiningTime["Bronze"] = 40
zrmine.config.MiningTime["Silver"] = 50
zrmine.config.MiningTime["Gold"] = 60

// The Ore Search distance of the Mine
zrmine.config.Mine_SearchDistance = 400

// This Value Defines the Amount one Minning Load gives the player in kg
zrmine.config.Max_MiningAmount = 45
zrmine.config.Min_MiningAmount = 15

// This defines how many ore entites 1 mine is allowed to spawn until it tells the user to refine some of the allready spawned ore
zrmine.config.Mine_MaxEntCount = 6
///////////////////////



// The Conveyorbelt
///////////////////////
zrmine.config.Belt_Capacity = 15
zrmine.config.SplitterBelt_Capacity = 25
///////////////////////


                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

// The Inserter
///////////////////////
// Should Resources be deleted when no module is connected
zrmine.config.Inserter_DeleteOnEndPoint = true
//*Note* When a ressource reeaches the end of a inserter belt then it either gets Deleted or outputed as gravel entity
// By putting a GravelCrate near the inserter end point you can collect the moved ressource rather then it getting destroyed.

// This defines the loss rate of the ore when transported via inserter.
// 0 = No loss at all.  0.5 = Half of the Ore gets lost.
zrmine.config.Inserter_LossRate = 0.25  // 0 - 0.9
///////////////////////



// The Crusher
///////////////////////

// Whats the crush process duration
zrmine.config.Crusher_Time = 4

// Whats the work amount
zrmine.config.Crusher_WorkAmount = 2

// Whats the crusher inventory capacity?
zrmine.config.Crusher_Capacity = 100
///////////////////////



// The Gravel Crate
///////////////////////

// The Capacity of the Crates
zrmine.config.GravelCrates_Capacity = 100

// Do we want do reuse the gravel crates or should they get deleted when emtpy
zrmine.config.GravelCrates_ReUse = true
///////////////////////



// The Refiner Crate
///////////////////////
// Do we want that everyone can attach or detach the refiner basket
zrmine.config.ResourceCrates_Sharing = true
// The Capacity of the Crates
zrmine.config.ResourceCrates_Capacity = 50
// Do we want do reuse the crate or destroy it when emtpy
zrmine.config.ResourceCrates_ReUse = true
///////////////////////



// The Refiner
///////////////////////
// This Values Defines the Refining Time in seconds
zrmine.config.Gold_RefiningTime = 30
zrmine.config.Silver_RefiningTime = 15
zrmine.config.Bronze_RefiningTime = 10
zrmine.config.Iron_RefiningTime = 5
zrmine.config.Coal_RefiningTime = 5

// How much of the Refined ore is metal
zrmine.config.RefiningAmount = 0.75 // 75%

// The Ore Capacity of the Refiner
zrmine.config.Refiner_Capacity = 25

// Do we want to that a Refiner Crate spawns with the Refiner?
// Note* This only applys to Refiners used in a Public Pipeline!
zrmine.config.Refiner_AutoSpawnCrate = true
///////////////////////



// The Melter
///////////////////////
// The Coal Capacity of the Melter
zrmine.config.Melter_Coal_Capacity = 100

// The Unload Time
zrmine.config.Melter_UnloadTime = 10

zrmine.config.Melter_Vars = {}
zrmine.config.Melter_Vars["Iron"] = {OreAmount = 25, MeltDuration = 5,CoalAmount = 10,CoolingTime = 3}
zrmine.config.Melter_Vars["Bronze"] = {OreAmount = 15, MeltDuration = 10,CoalAmount = 15,CoolingTime = 5}
zrmine.config.Melter_Vars["Silver"] = {OreAmount = 10, MeltDuration = 15,CoalAmount = 20,CoolingTime = 7}
zrmine.config.Melter_Vars["Gold"] = {OreAmount = 1, MeltDuration = 20,CoalAmount = 25,CoolingTime = 10}
///////////////////////



// Vrondakis Leveling System
///////////////////////

// How much XP do we get for completing these Tasks
// *Note01 Only works if Vrondakis Leveling System is installed
// *Note02 Also needs Faclos or NaMad PropProtection script installed do determine the owner
zrmine.config.Vrondakis = {}
zrmine.config.Vrondakis["Mining_mine"] = {XP = 5} // Per Mine Load
zrmine.config.Vrondakis["Mining_pickaxe"] = {XP = 1} // Per Hit
zrmine.config.Vrondakis["Crushing"] = {XP = 1} // Per WorkLoad
zrmine.config.Vrondakis["Refining"] = {XP = 2} // Per WorkLoad
zrmine.config.Vrondakis["Melting"] = {XP = 10} // Per WorkLoad
zrmine.config.Vrondakis["Selling"] = {XP = 5} // Per Sell
///////////////////////

--addons/zeros_retrominer_v2.3.6/lua/zrmine_config.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

zrmine = zrmine || {}
zrmine.config = zrmine.config || {}

/////////////////////////// Zeros RetroMiner /////////////////////////////

// Developed by ZeroChain:
// http://steamcommunity.com/id/zerochain/
// https://www.gmodstore.com/users/view/76561198013322242
// https://www.artstation.com/zerochain

/////////////////////////////////////////////////////////////////////////////


// Misc
///////////////////////
// This enables fast download
zrmine.config.EnableResourceAddfile = false

// These Ranks are allowed do use the Chat and Console Commands
zrmine.config.AdminRanks = {
	["superadmin"] = true,
	["owner"] = true,
}

// This tells the script who can mine ore / sell bars (Leave empty to allow everyone)
zrmine.config.Jobs = {
	[TEAM_ZRMINE_MINER] = true
}


// This disables a net message being send to client for the ore insert effect
zrmine.config.DisableVFX = true


// Level System IngGame Config ConsoleCommand: zrms_levelsystem_open

// Chat Commands
//  !zrms_lvlsys_reset SteamID
//  !zrms_lvlsys_xp SteamID Amount
//  !zrms_lvlsys_lvl SteamID Amount

// Console Commands
//  zrms_lvlsys_reset SteamID
//  zrms_lvlsys_xp SteamID Amount
//  zrms_lvlsys_lvl SteamID Amount

// What language do we want? en,de,fr,pl,it,ru,pt,es,cn,dk
zrmine.config.selectedLanguage = "en"

// Currency Display
zrmine.config.Currency = "₺"

// Mass Display
zrmine.config.BuyerNPC_Mass = "kg"

// Disables the Owner Checks so everyone can use everyones mining entities
// Note* This should be on true if you want to use the Entities as a Public utility
zrmine.config.SharedOwnership = false

// The Damage the entitys have do take before they get destroyed.
// Setting it to -1 disables it
zrmine.config.Damageable = {}
zrmine.config.Damageable["MineEntrance"] = {EntityHealth = 1000}
zrmine.config.Damageable["Melter"] = {EntityHealth = 500}
zrmine.config.Damageable["Crusher"] = {EntityHealth = 300}
zrmine.config.Damageable["Refinery"] = {EntityHealth = 300}
zrmine.config.Damageable["Conveyorbelt"] = {EntityHealth = 200}
zrmine.config.Damageable["Splitter"] = {EntityHealth = 200}
zrmine.config.Damageable["Sorter"] = {EntityHealth = 200}

// Some debug information
zrmine.config.debug = false
///////////////////////


// The Builder SWEP
///////////////////////
zrmine.config.BuilderSWEP = {

	keys = {
		switch_left = KEY_E,
		switch_right = KEY_R
	},

	// The money the player receives if he deconstructs a entity
	refund_val = 0.5, // 1 = Full , 0.5 = half, 0 = no money back

	// The entity price
	entity_price = {
		["zrms_conveyorbelt_n"] = 150,
		["zrms_conveyorbelt_s"] = 100,
		["zrms_conveyorbelt_c_left"] = 250,
		["zrms_conveyorbelt_c_right"] = 250,

		["zrms_crusher"] = 1000,
		["zrms_splitter"] = 1500,
		["zrms_inserter"] = 1500,

		["zrms_refiner_coal"] = 1500,
		["zrms_refiner_iron"] = 2000,
		["zrms_refiner_bronze"] = 3000,
		["zrms_refiner_silver"] = 4000,
		["zrms_refiner_gold"] = 5000,

		["zrms_sorter_coal"] = 1500,
		["zrms_sorter_iron"] = 2000,
		["zrms_sorter_bronze"] = 3000,
		["zrms_sorter_silver"] = 4000,
		["zrms_sorter_gold"] = 5000
	},

	// How many entites is the player allowed to spawn/buy
	entity_limit = {
		["zrms_conveyorbelt_n"] = 10,
		["zrms_conveyorbelt_s"] = 6,
		["zrms_conveyorbelt_c_left"] = 6,
		["zrms_conveyorbelt_c_right"] = 6,

		["zrms_crusher"] = 2,
		["zrms_splitter"] = 4,
		["zrms_inserter"] = 4,

		["zrms_refiner_coal"] = 2,
		["zrms_refiner_iron"] = 2,
		["zrms_refiner_bronze"] = 2,
		["zrms_refiner_silver"] = 2,
		["zrms_refiner_gold"] = 2,

		["zrms_sorter_coal"] = 2,
		["zrms_sorter_iron"] = 2,
		["zrms_sorter_bronze"] = 2,
		["zrms_sorter_silver"] = 2,
		["zrms_sorter_gold"] = 2
	},
}
///////////////////////




// The Pickaxe
///////////////////////

// The Level System
// If set to true then the data gets writen into sv.db
// If set to false then we write the player data as file at garrysmod\data\zrms\playerdata
zrmine.config.Pickaxe_UseDB = false

// This command migrates data from sv.db to file (It only migrates the data from online players and only if it doesent allready exist as file)
// Console Command: zrms_levelsystem_migrate_data_to_file

// This is the Time in seconds that the Level system gets saved each player it changed
zrmine.config.Pickaxe_LvlSys_SaveTime = 500

// How long after the player has spawned should we wait till we load his Pickaxe Level Data
zrmine.config.Pickaxe_LvlSys_Init_LoadTime = 5

/*
Examble: zrmine.config.Pickaxe_Lvl[Level] =
    {
    NextXP = Amount of XP Needed for the next Level up,
    HarvestAmount = Amount of Resource Harvested per Hit in Kg,
    HarvestInterval = Hit interval ,
    OreInv = Your Pickaxe Ore Inventory Capacity,
    FillCap = The Amount of or you can fill in a Crusher or crate per Right Click
    }
*/
zrmine.config.Pickaxe_Lvl = {}
zrmine.config.Pickaxe_Lvl[0] = {NextXP = 100, HarvestAmount = 0.1, HarvestInterval = 1.3 , OreInv = 10, FillCap = 3}
zrmine.config.Pickaxe_Lvl[1] = {NextXP = 200, HarvestAmount = 0.5, HarvestInterval = 1 , OreInv = 15, FillCap = 5}
zrmine.config.Pickaxe_Lvl[2] = {NextXP = 400, HarvestAmount = 1, HarvestInterval = 0.9 , OreInv = 20, FillCap = 10}
zrmine.config.Pickaxe_Lvl[3] = {NextXP = 500, HarvestAmount = 2, HarvestInterval = 0.75 , OreInv = 25, FillCap = 15}
zrmine.config.Pickaxe_Lvl[4] = {NextXP = 1000, HarvestAmount = 4, HarvestInterval = 0.6 , OreInv = 35, FillCap = 20}
zrmine.config.Pickaxe_Lvl[5] = {NextXP = 1500, HarvestAmount = 5, HarvestInterval = 0.5 , OreInv = 50, FillCap = 25}

// Here you can set what Ore Ressource requires what Pickaxe Level
zrmine.config.Pickaxe_OreRestriction = {
	["Coal"] = 0,
	["Iron"] = 0,
	["Bronze"] = 0,
	["Silver"] = 0,
	["Gold"] = 0,
	["Random"] = 0,
}


// How many pickaxe hits before we get another XP
zrmine.config.Pickaxe_MaxNextXP = 10
zrmine.config.Pickaxe_MinNextXP = 5

// What Color Theme should the Pickaxe UI have
zrmine.config.PickaxeThemeLight = false

// This Defines a offset for the main UI of the Pickaxe
zrmine.config.PickaxeUI_Offset = Vector(0,0,0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

// Defines the harvest chance in % per Hit
zrmine.config.Pickaxe_HarvestChance = 75 //1-100% 75% means we have a 25% chance of getting no resource

// This Values are % Multiplicators for the diffrend resource types
// *Note* Examble : Amount: 0.5% = -50% You get only half the amount per hit   Speed: 1.3% = +30% more time needed do harvest
zrmine.config.Pickaxe_HarvestMul = {}
zrmine.config.Pickaxe_HarvestMul["Random"] = {Amount = 0.5, Speed = 1.3,XP = 2}
zrmine.config.Pickaxe_HarvestMul["Coal"] =  {Amount = 1.3, Speed = 0.5,XP = 1}
zrmine.config.Pickaxe_HarvestMul["Iron"] = {Amount = 1.2, Speed = 0.7,XP = 1}
zrmine.config.Pickaxe_HarvestMul["Bronze"] = {Amount = 0.6, Speed = 1,XP = 1}
zrmine.config.Pickaxe_HarvestMul["Silver"] = {Amount = 0.5, Speed = 1.1,XP = 2}
zrmine.config.Pickaxe_HarvestMul["Gold"] = {Amount = 0.25, Speed = 1.5,XP = 3}
///////////////////////



// The Bar
///////////////////////

/*
// Real Metal Price (This is for Reference only and does not change anything inGame)
local Gold_1kg = 48000  //$
local Silver_1kg = 630  //$
local Bronze_1kg = 18   //$
local Iron_1kg = 0.80   //$
*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

local Gold_1kg = 160    //$
local Silver_1kg = 85   //$
local Bronze_1kg = 35   //$
local Iron_1kg = 20 //$

local Mass_per_Bar = 15

// The Cash Value of 1 bar
zrmine.config.BarValue = {}
zrmine.config.BarValue["Iron"] = Iron_1kg * Mass_per_Bar
zrmine.config.BarValue["Bronze"] = Bronze_1kg * Mass_per_Bar
zrmine.config.BarValue["Silver"] = Silver_1kg * Mass_per_Bar
zrmine.config.BarValue["Gold"] = Gold_1kg * Mass_per_Bar

// Does the storage crate need do be full before it can be collected
zrmine.config.StorageCrateFull = false

zrmine.config.MetalBar_Stealing = {

	// Can other Players steal the Bars or the storagecrate?
	Enabled = false,

	// These Jobs can steal metalbars and storagecrates. (Leave empty to allow everyone to steal)
	// You probably also want to add the job names to zrmine.config.Jobs so these Jobs can also sell the metal bars
	Jobs = {
		//[TEAM_GANG] = true,
	}
}

// Do we want the metal bars from the players inventory to drop on death?
zrmine.config.MetalBar_DropOnDeath = false
///////////////////////



// The Buyer NPC
///////////////////////
zrmine.config.MetalBuyer = {

	// Model of the NPC
	model = "models/Humans/Group03/male_07.mdl",
	// Note* You need do make sure the Model got compiled with the animations you want to use
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	// The Idle Animations of the Buyer NPC
	anim_idle = {"idle_angry","idle_subtle"},

	// The Sell Animations of the Buyer NPC
	anim_sell = {"takepackage","cheer1","cheer2"},

	// This is the time in seconds the buyer npcs refresh their buy rate
	RefreshRate = 600, //seconds

	// This defines the range at which some Buyers gonna buy your metals
	MaxRate = 150, //%
	MinRate = 75, //%
}
///////////////////////



// The Resource Junk
///////////////////////
// This Values Defines the Despawn Time in seconds, set to -1 do Disable it
zrmine.config.Resource_DespawnTime = 200
///////////////////////

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 


// The Ore Spawns
///////////////////////

// Do we want the Ore Spawns do refresh?
zrmine.config.Ore_Refresh = true

// How often do we want do refresh the ore spawns?
zrmine.config.Ore_Refreshrate = 15

// How much gets refreshed?
zrmine.config.Ore_RefreshAmount = 200 //kg
///////////////////////



// The Mine
///////////////////////

// If you want do set the name of the Mine Entrance yourself rather then using the player name
// This can be usefull if the MineEntrace is public
// Set this to nil if you dont want to use Public Mining Entities
zrmine.config.Mine_CustomName = nil

// Defines the chance in % what the MineEntrance Enity gives you
zrmine.config.Mine_ResourceChance = {}
zrmine.config.Mine_ResourceChance["Coal"] = 35
zrmine.config.Mine_ResourceChance["Iron"] = 30
zrmine.config.Mine_ResourceChance["Bronze"] = 15
zrmine.config.Mine_ResourceChance["Silver"] = 10
zrmine.config.Mine_ResourceChance["Gold"] = 5

// This Value Defines the Mining Time in seconds for the MineEntrace Entity
zrmine.config.MiningTime = {}
zrmine.config.MiningTime["Random"] = 30
zrmine.config.MiningTime["Coal"] = 15
zrmine.config.MiningTime["Iron"] = 30

zrmine.config.MiningTime["Bronze"] = 40
zrmine.config.MiningTime["Silver"] = 50
zrmine.config.MiningTime["Gold"] = 60

// The Ore Search distance of the Mine
zrmine.config.Mine_SearchDistance = 400

// This Value Defines the Amount one Minning Load gives the player in kg
zrmine.config.Max_MiningAmount = 45
zrmine.config.Min_MiningAmount = 15

// This defines how many ore entites 1 mine is allowed to spawn until it tells the user to refine some of the allready spawned ore
zrmine.config.Mine_MaxEntCount = 6
///////////////////////



// The Conveyorbelt
///////////////////////
zrmine.config.Belt_Capacity = 15
zrmine.config.SplitterBelt_Capacity = 25
///////////////////////


                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

// The Inserter
///////////////////////
// Should Resources be deleted when no module is connected
zrmine.config.Inserter_DeleteOnEndPoint = true
//*Note* When a ressource reeaches the end of a inserter belt then it either gets Deleted or outputed as gravel entity
// By putting a GravelCrate near the inserter end point you can collect the moved ressource rather then it getting destroyed.

// This defines the loss rate of the ore when transported via inserter.
// 0 = No loss at all.  0.5 = Half of the Ore gets lost.
zrmine.config.Inserter_LossRate = 0.25  // 0 - 0.9
///////////////////////



// The Crusher
///////////////////////

// Whats the crush process duration
zrmine.config.Crusher_Time = 4

// Whats the work amount
zrmine.config.Crusher_WorkAmount = 2

// Whats the crusher inventory capacity?
zrmine.config.Crusher_Capacity = 100
///////////////////////



// The Gravel Crate
///////////////////////

// The Capacity of the Crates
zrmine.config.GravelCrates_Capacity = 100

// Do we want do reuse the gravel crates or should they get deleted when emtpy
zrmine.config.GravelCrates_ReUse = true
///////////////////////



// The Refiner Crate
///////////////////////
// Do we want that everyone can attach or detach the refiner basket
zrmine.config.ResourceCrates_Sharing = true
// The Capacity of the Crates
zrmine.config.ResourceCrates_Capacity = 50
// Do we want do reuse the crate or destroy it when emtpy
zrmine.config.ResourceCrates_ReUse = true
///////////////////////



// The Refiner
///////////////////////
// This Values Defines the Refining Time in seconds
zrmine.config.Gold_RefiningTime = 30
zrmine.config.Silver_RefiningTime = 15
zrmine.config.Bronze_RefiningTime = 10
zrmine.config.Iron_RefiningTime = 5
zrmine.config.Coal_RefiningTime = 5

// How much of the Refined ore is metal
zrmine.config.RefiningAmount = 0.75 // 75%

// The Ore Capacity of the Refiner
zrmine.config.Refiner_Capacity = 25

// Do we want to that a Refiner Crate spawns with the Refiner?
// Note* This only applys to Refiners used in a Public Pipeline!
zrmine.config.Refiner_AutoSpawnCrate = true
///////////////////////



// The Melter
///////////////////////
// The Coal Capacity of the Melter
zrmine.config.Melter_Coal_Capacity = 100

// The Unload Time
zrmine.config.Melter_UnloadTime = 10

zrmine.config.Melter_Vars = {}
zrmine.config.Melter_Vars["Iron"] = {OreAmount = 25, MeltDuration = 5,CoalAmount = 10,CoolingTime = 3}
zrmine.config.Melter_Vars["Bronze"] = {OreAmount = 15, MeltDuration = 10,CoalAmount = 15,CoolingTime = 5}
zrmine.config.Melter_Vars["Silver"] = {OreAmount = 10, MeltDuration = 15,CoalAmount = 20,CoolingTime = 7}
zrmine.config.Melter_Vars["Gold"] = {OreAmount = 1, MeltDuration = 20,CoalAmount = 25,CoolingTime = 10}
///////////////////////



// Vrondakis Leveling System
///////////////////////

// How much XP do we get for completing these Tasks
// *Note01 Only works if Vrondakis Leveling System is installed
// *Note02 Also needs Faclos or NaMad PropProtection script installed do determine the owner
zrmine.config.Vrondakis = {}
zrmine.config.Vrondakis["Mining_mine"] = {XP = 5} // Per Mine Load
zrmine.config.Vrondakis["Mining_pickaxe"] = {XP = 1} // Per Hit
zrmine.config.Vrondakis["Crushing"] = {XP = 1} // Per WorkLoad
zrmine.config.Vrondakis["Refining"] = {XP = 2} // Per WorkLoad
zrmine.config.Vrondakis["Melting"] = {XP = 10} // Per WorkLoad
zrmine.config.Vrondakis["Selling"] = {XP = 5} // Per Sell
///////////////////////

--addons/turkish_food_mod-main/lua/entities/adana/shared.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_smg1.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"

ENT.PrintName                 = "Carbine Ammo"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/items/arccw/smg_ammo.mdl"

ENT.AmmoType = "smg1"
ENT.AmmoCount = 60
if engine.ActiveGamemode() == "terrortown" then
    ENT.AmmoCount = 30
end

ENT.DetonationDamage = 30
ENT.DetonationRadius = 256
ENT.DetonationSound = "weapons/smg1/npc_smg1_fire1.wav"
--addons/[binbon]arccw_modify/lua/entities/arccw_smoke/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_entity"
ENT.PrintName = "Smoke Cloud"
ENT.Author = ""
ENT.Information = ""
ENT.Spawnable = false
ENT.AdminSpawnable = false

local smokeimages = {"particle/smokesprites_0002", "particle/smokesprites_0003", "particle/smokesprites_0004", "particle/smokesprites_0005", "particle/smokesprites_0006", "particle/smokesprites_0007", "particle/smokesprites_0008", "particle/smokesprites_0009", "particle/smokesprites_0010", "particle/smokesprites_0011", "particle/smokesprites_0012", "particle/smokesprites_0013", "particle/smokesprites_0014", "particle/smokesprites_0015", "particle/smokesprites_0016"}

local function GetSmokeImage()
    return smokeimages[math.random(#smokeimages)]
end

ENT.Particles = nil
ENT.SmokeRadius = 256
ENT.SmokeColor = Color(150, 150, 150)
ENT.BillowTime = 1
ENT.Life = 15

ENT.ArcCWSmoke = true

AddCSLuaFile()

function ENT:Initialize()
    if SERVER then
        self:SetModel( "models/weapons/w_eq_smokegrenade_thrown.mdl" )
        self:SetMoveType( MOVETYPE_NONE )
        self:SetSolid( SOLID_NONE )
        self:DrawShadow( false )
    else
        local emitter = ParticleEmitter(self:GetPos())

        self.Particles = {}

        local amt = 20

        for i = 1, amt do
            local smoke = emitter:Add(GetSmokeImage(), self:GetPos())
            smoke:SetVelocity( VectorRand() * 8 + (Angle(0, i * (360 / amt), 0):Forward() * 400) )
            smoke:SetStartAlpha( 0 )
            smoke:SetEndAlpha( 255 )
            smoke:SetStartSize( 0 )
            smoke:SetEndSize( self.SmokeRadius )
            smoke:SetRoll( math.Rand(-180, 180) )
            smoke:SetRollDelta( math.Rand(-0.2,0.2) )
            smoke:SetColor( self.SmokeColor.r, self.SmokeColor.g, self.SmokeColor.b )
            smoke:SetAirResistance( 75 )
            smoke:SetPos( self:GetPos() )
            smoke:SetCollide( true )
            smoke:SetBounce( 0.2 )
            smoke:SetLighting( false )
            smoke:SetNextThink( CurTime() + FrameTime() )
            smoke.bt = CurTime() + self.BillowTime
            smoke.dt = CurTime() + self.BillowTime + self.Life
            smoke.ft = CurTime() + self.BillowTime + self.Life + math.Rand(2.5, 5)
            smoke:SetDieTime(smoke.ft)
            smoke.life = self.Life
            smoke.billowed = false
            smoke.radius = self.SmokeRadius
            smoke:SetThinkFunction( function(pa)
                if !pa then return end

                local prog = 1
                local alph = 0

                if pa.ft < CurTime() then
                    return
                elseif pa.dt < CurTime() then
                    local d = (CurTime() - pa.dt) / (pa.ft - pa.dt)

                    alph = 1 - d
                elseif pa.bt < CurTime() then
                    alph = 1
                else
                    local d = math.Clamp(pa:GetLifeTime() / (pa.bt - CurTime()), 0, 1)

                    prog = (-d ^ 2) + (2 * d)

                    alph = d
                end

                pa:SetEndSize( pa.radius * prog )
                pa:SetStartSize( pa.radius * prog )

                pa:SetStartAlpha(255 * alph)
                pa:SetEndAlpha(255 * alph)

                pa:SetNextThink( CurTime() + FrameTime() )
            end )

            table.insert(self.Particles, smoke)
        end

        emitter:Finish()
    end

    self.dt = CurTime() + self.Life + self.BillowTime
end

function ENT:Think()

    if SERVER then
        local targets = ents.FindInSphere(self:GetPos(), 256)
        for _, k in pairs(targets) do
            if k:IsNPC() then
                k:SetSchedule(SCHED_STANDOFF)
            end
        end
    end

    if self.dt < CurTime() then
        if SERVER then
            SafeRemoveEntity(self)
        end
    end
end

function ENT:Draw()
    return false
end
--lua/entities/arccw_uc_40mm_incendiary.lua:
AddCSLuaFile()

ENT.Base = "arccw_uc_40mm_he"
ENT.PrintName = "40mm Incendiary"

ENT.GrenadeDamage = 50
ENT.GrenadeRadius = 150

function ENT:DoDetonation()
    local attacker = IsValid(self:GetOwner()) and self:GetOwner() or self
    util.BlastDamage(self, attacker, self:GetPos(), self.GrenadeRadius, self.GrenadeDamage)
    self:EmitSound("ambient/fire/gascan_ignite1.wav", 100, 100, 1)

    for i = 1, 5 do
        local cloud = ents.Create("arccw_uc_fire")
        cloud.FireTime = 20

        if !IsValid(cloud) then return end

        local vel = Vector(math.Rand(-1, 1), math.Rand(-1, 1), math.Rand(-1, 1)) * 1500

        cloud.Order = i
        cloud:SetPos(self:GetPos() - (self:GetVelocity() * FrameTime()) * 3 + VectorRand())
        cloud:SetAbsVelocity(vel + self:GetVelocity())
        cloud:SetOwner(self:GetOwner())
        cloud:Spawn()
    end
end

--[[att.Hook_FireBullets = function(wep, data)  this thing doesn't actually call firebullets lol
    wep:EmitSound("DB_ADD") -- lua/arccw/shared/sh_0_uc.lua
  end]]
--addons/ashop/lua/entities/ashop_npc/cl_init.lua:
return gluapack()()
--addons/ashop/lua/entities/ashop_npc/shared.lua:
ENT.Base = "base_ai"
ENT.Type = "ai"
ENT.PrintName = "AShop"
ENT.Category        = "AShop"
ENT.Author          = "Akulla"
ENT.Spawnable       = true
ENT.AdminSpawnable  = true
ENT.AdminOnly = true
ENT.ViewOffset = Vector(0,0,70)
--lua/entities/base_streamradio.lua:
AddCSLuaFile()

DEFINE_BASECLASS("base_anim")

local StreamRadioLib = StreamRadioLib

local LIBNetwork = StreamRadioLib.Network
local LIBWire = StreamRadioLib.Wire
local LIBUtil = StreamRadioLib.Util
local LIBHook = StreamRadioLib.Hook

local WireLib = WireLib

local g_isLoaded = StreamRadioLib and StreamRadioLib.Loaded
local g_isWiremodLoaded = g_isLoaded and LIBWire.HasWiremod()

ENT.__IsRadio = true

ENT.Editable = false
ENT.Spawnable = false
ENT.AdminOnly = false

ENT.WireDebugName = "Stream Radio"

function ENT:AddDTNetworkVar(datatype, name, ...)
	if not g_isLoaded then
		return
	end

	return LIBNetwork.AddDTNetworkVar(self:GetTable(), datatype, name, ...)
end

function ENT:SetDTVarCallback(name, callback)
	if not g_isLoaded then
		return
	end

	LIBNetwork.SetDTVarCallback(self:GetTable(), name, function(...)
		if not IsValid(self) then
			return
		end

		callback(...)
	end)
end

function ENT:SetupDataTables()
	if not g_isLoaded then
		return
	end

	StreamRadioLib.RegisterRadio(self)
	LIBNetwork.SetupDataTables(self)

	self:AddDTNetworkVar( "Entity", "RadioOwner" )
	self:AddDTNetworkVar( "Entity", "LastUser" )
	self:AddDTNetworkVar( "Entity", "LastUsingEntity" )
end

function ENT:SetAnim( Animation, Frame, Rate )
	if not self.Animated or not self.AutomaticFrameAdvance then
		-- This must be run once on entities that will be animated
		self.Animated = true
		self:SetAutomaticFrameAdvance(true)
	end

	self:ResetSequence( Animation or 0 )
	self:SetCycle( Frame or 0 )
	self:SetPlaybackRate( Rate or 1 )
end

function ENT:EmitSoundIfExist( name, ... )
	name = name or ""
	if ( name == "" ) then
		return
	end

	self:EmitSound( name, ... )
end

function ENT:RegisterDupePose( name )
	self.DupePoses = self.DupePoses or {}
	self.DupePoses[name] = true
end

function ENT:GetDupePoses()
	self.DupePoses = self.DupePoses or {}

	local PoseParameter = {}
	for name, value in pairs( self.DupePoses ) do
		if ( not value ) then continue end
		PoseParameter[name] = self:GetPoseParameter( name )
	end

	return PoseParameter
end

function ENT:SetDupePoses( PoseParameter )
	PoseParameter = PoseParameter or {}

	for name, value in pairs( PoseParameter ) do
		if ( not value ) then continue end
		self:SetPoseParameter( name, value )
	end
end

function ENT:AddObjToNwRegister(obj)
	if not IsValid(obj) then return end

	obj:AddToNwRegister(self._3dstraemradio_classobjs_nw_register)
end

function ENT:GetOrCreateStream()
	if not g_isLoaded then
		if IsValid(self.StreamObj) then
			self.StreamObj:Remove()
		end

		self.StreamObj = nil
		return nil
	end

	if IsValid(self.StreamObj) then
		return self.StreamObj
	end

	self.StreamObj = nil

	local stream = StreamRadioLib.CreateOBJ("stream")
	if not IsValid( stream ) then
		return nil
	end

	self.StreamObj = stream

	local function call(name, ...)
		if not IsValid( self ) then
			return
		end

		local func = self[name]

		if not isfunction(func) then
			return nil
		end

		return func(self, ...)
	end

	stream.OnConnect = function( ... )
		return call("StreamOnConnect", ...)
	end

	stream.OnError = function( ... )
		return call("StreamOnError", ...)
	end

	stream.OnClose = function( ... )
		return call("StreamOnClose", ...)
	end

	stream.OnRetry = function( ... )
		return call("StreamOnRetry", ...)
	end

	stream.OnSearch = function( ... )
		return call("StreamOnSearch", ...)
	end

	stream.CanSkipUrlChecks = function( ... )
		return call("StreamCanSkipUrlChecks", ...)
	end

	stream.CanBypassUrlBlock = function( ... )
		return call("StreamCanBypassUrlBlock", ...)
	end

	stream.OnMute = function( ... )
		return call("StreamOnMute", ...)
	end

	stream.OnTrackEnd = function( ... )
		return call("StreamOnTrackEnd", ...)
	end

	stream:SetEvent("OnPlayModeChange", tostring(self) .. "_base", function(...)
		return call("StreamOnPlayModeChange", ...)
	end)

	stream:SetName("stream")
	stream:SetNWName("str")
	stream:SetEntity(self)

	self:AddObjToNwRegister(stream)

	stream:ActivateNetworkedMode()
	stream:OnClose()

	return stream
end

function ENT:StreamOnConnect()
	self:CheckTransmitState()

	return true
end

function ENT:StreamOnSearch()
	self:CheckTransmitState()

	return true
end

function ENT:StreamCanSkipUrlChecks()
	return false
end

function ENT:StreamCanBypassUrlBlock(blockedByHook)
	if blockedByHook then
		-- was blocked by external code
		return false
	end

	if not StreamRadioLib.IsUrlWhitelistAdminRadioTrusted() then
		return false
	end

	local owner = self:GetRealRadioOwner()
	if LIBUtil.IsAdmin(owner) then
		-- Admins are allowed to bypass built-in whitelisting for better UX.
		return true
	end

	return false
end

function ENT:StreamOnRetry()
	self:CheckTransmitState()

	return true
end

function ENT:StreamOnError()
	self:CheckTransmitState()
end

function ENT:StreamOnClose()
	self:CheckTransmitState()
end

function ENT:StreamOnPlayModeChange()
	self:CheckTransmitState()
end

function ENT:IsStreaming()
	if not IsValid( self.StreamObj ) then
		return false
	end

	if not IsValid( self.StreamObj:GetChannel() ) then
		return false
	end

	return true
end

function ENT:HasStream()
	if not IsValid( self.StreamObj ) then
		return false
	end

	return true
end

function ENT:GetStreamObject()
	if not self:HasStream() then
		return nil
	end

	return self.StreamObj
end

function ENT:SetSoundPosAngOffset(pos, ang)
	self.SoundPosOffset = pos
	self.SoundAngOffset = ang
end

function ENT:GetSoundPosAngOffset()
	return self.SoundPosOffset, self.SoundAngOffset
end

local ang_zero = Angle()
local vec_zero = Vector()

function ENT:CalcSoundPosAngWorld()
	local pos = self:GetPos()
	local ang = self:GetAngles()

	local spos, sang = LocalToWorld(self.SoundPosOffset or vec_zero, self.SoundAngOffset or ang_zero, pos, ang)

	self.SoundPos = spos
	self.SoundAng = sang

	return spos, sang
end

function ENT:DistanceToEntity(ent, pos1, pos2)
	if not g_isLoaded then
		return 0
	end

	if not pos1 then
		pos1 = self.SoundPos
	end

	if not pos1 then
		return 0
	end

	if pos2 then
		return pos2:Distance(pos1)
	end

	pos2 = StreamRadioLib.GetCameraPos(ent)

	if not pos2 then
		return 0
	end

	return pos2:Distance(pos1)
end

function ENT:DistToSqrToEntity(ent, pos1, pos2)
	if not g_isLoaded then
		return 0
	end

	if not pos1 then
		pos1 = self.SoundPos
	end

	if not pos1 then
		return 0
	end

	if pos2 then
		return pos2:DistToSqr(pos1)
	end

	pos2 = StreamRadioLib.GetCameraPos(ent)

	if not pos2 then
		return 0
	end

	return pos2:DistToSqr(pos1)
end

function ENT:CheckDistanceToEntity(ent, maxDist, pos1, pos2)
	local maxDistSqr = maxDist * maxDist
	local distSqr = self:DistToSqrToEntity(ent, pos1, pos2)

	if distSqr > maxDistSqr then
		return false
	end

	return true
end

function ENT:GetRealRadioOwner()
	local getCPPIOwner = self.CPPIGetOwner
	if isfunction(getCPPIOwner) then
		local owner = getCPPIOwner(self)

		if isentity(owner) and IsValid(owner) then
			return owner
		end
	end

	local getRadioOwner = self.GetRadioOwner
	if isfunction(getRadioOwner) then
		local owner = getRadioOwner(self)

		if IsValid(owner) then
			return owner
		end
	end

	return nil
end

function ENT:Initialize()
	if g_isLoaded then
		StreamRadioLib.RegisterRadio(self)
	end

	self._3dstraemradio_classobjs_nw_register = {}

	if SERVER then
		self._WireOutputCache = {}
	end

	self:GetOrCreateStream()
	self:CheckTransmitState()
end

function ENT:OnTakeDamage( dmg )
	self:TakePhysicsDamage( dmg )
end

function ENT:OnReloaded()
	if CLIENT then return end
	self:Remove()
end

function ENT:IsMutedForPlayer(ply)
	if not g_isLoaded then
		return true
	end

	if not IsValid(ply) and CLIENT then
		ply = LocalPlayer()
	end

	if not IsValid(ply) then return true end
	if not ply:IsPlayer() then return true end
	if ply:IsBot() then return true end

	if StreamRadioLib.IsMuted(ply, self:GetRealRadioOwner()) then
		return true
	end

	local mutedist = math.min(self:GetRadius() + 1000, StreamRadioLib.GetMuteDistance(ply))
	local camPos = nil

	if CLIENT then
		camPos = StreamRadioLib.GetCameraViewPos(ply)
	end

	if not self:CheckDistanceToEntity(ply, mutedist, nil, camPos) then
		return true
	end

	return false
end

function ENT:IsMutedForAll()
	if not g_isLoaded then
		return true
	end

	if self:GetSVMute() then
		return true
	end

	local allplayers = player.GetHumans()

	for k, v in pairs(allplayers) do
		if not IsValid(v) then continue end

		local muted = self:IsMutedForPlayer(v)
		if muted then continue end

		return false
	end

	return true
end

function ENT:CheckTransmitState()
	if CLIENT then return end

	self._TransmitCheck = true
	self._LastTransmitCheck = CurTime()
end

function ENT:UpdateTransmitState()
	local stream = self.StreamObj

	if not IsValid(stream) then
		return TRANSMIT_PVS
	end

	if stream:IsStopMode() then return TRANSMIT_PVS end
	if stream:GetURL() == "" then return TRANSMIT_PVS end
	if self:IsMutedForAll() then return TRANSMIT_PVS end

	return TRANSMIT_ALWAYS
end

function ENT:PostFakeRemove( )
	if not g_isLoaded then
		return
	end

	StreamRadioLib.RegisterRadio(self)
end

function ENT:OnRemove()
	local Stream = self.StreamObj
	local creationID = self:GetCreationID()

	local classobjs_data = self._3dstreamradio_classobjs_data
	local classobjs_nw_register = self._3dstraemradio_classobjs_nw_register

	-- We run it in a timer to ensure the entity is actually gone
	timer.Simple( 0.05, function()
		if IsValid(self) then
			self:PostFakeRemove()
			return
		end

		if IsValid(Stream) then
			Stream:Remove()
			Stream = nil
		end

		if g_isLoaded then
			StreamRadioLib.UnregisterRadio(creationID)

			LIBUtil.EmptyTableSafe(classobjs_data)
			LIBUtil.EmptyTableSafe(classobjs_nw_register)
		end
	end)

	if SERVER then
		self:StopStreamInternal()

		if g_isWiremodLoaded then
			WireLib.Remove(self)
		end
	end

	BaseClass.OnRemove(self)
end

function ENT:NWOverflowKill()
	self:SetNoDraw(true)

	if SERVER then
		self:Remove()
	end
end

function ENT:NonDormantThink()
	-- Override me
end

function ENT:FastThink()
	local pos, ang = self:CalcSoundPosAngWorld()

	if SERVER then
		if g_isWiremodLoaded then
			self:WiremodThink()
		end
	else
		local stream = self.StreamObj

		if CLIENT and self:ShowDebug() then
			local channeltext = "no sound"

			if stream then
				channeltext = tostring(stream)
			end

			channeltext = string.format("Sound pos, channel: %s", channeltext)

			debugoverlay.Axis(pos, ang, 5, 0.05, color_white)
			debugoverlay.EntityTextAtPosition(pos, 1, channeltext, 0.05, color_white)
		end

		if IsValid(stream) then
			stream:Set3DPosition(pos, ang:Forward())
		end
	end
end

function ENT:Think()
	BaseClass.Think(self)

	local curtime = CurTime()

	if g_isLoaded then
		self:InternalThink()
	end

	if SERVER then
		self:NextThink(curtime + 0.1)
		return true
	end

	return true
end

function ENT:InternalThink()
	local now = CurTime()

	self._nextSlowThink = self._nextSlowThink or 0

	if self._nextSlowThink < now then
		self:InternalSlowThink()
		self._nextSlowThink = now + 0.20
	end
end

function ENT:InternalSlowThink()
	local now = CurTime()

	StreamRadioLib.RegisterRadio(self)

	self._beingLookedAtCache = nil
	self._showDebugCache = nil

	if SERVER then
		if self._TransmitCheck then
			self:AddEFlags(EFL_FORCE_CHECK_TRANSMIT)
			self._TransmitCheck = nil
		end

		local nextTransmitCheck = (self._LastTransmitCheck or 0) + 2.5
		if now >= nextTransmitCheck then
			self:CheckTransmitState()
		end
	else
		if g_isWiremodLoaded then
			if now >= (self._NextRBUpdate or 0) then
				Wire_UpdateRenderBounds(self)
				self._NextRBUpdate = now + math.random(30, 100) / 10
			end
		end
	end
end

function ENT:StopStreamInternal()
	if not SERVER then return end
	if not IsValid(self.StreamObj) then return end

	self.StreamObj:Stop()
	self.StreamObj:SetURL("")
	self.StreamObj:SetStreamName("")
end

function ENT:PlayStreamInternal(url, name)
	if not SERVER then return end
	if not IsValid(self.StreamObj) then return end

	url = string.Trim(tostring(url or ""))
	name = string.Trim(tostring(name or ""))

	if url == "" then
		self:StopStreamInternal()
		return
	end

	if name == "" then
		name = url
	end

	self.StreamObj:RemoveChannel(true)
	self.StreamObj:SetURL(url)
	self.StreamObj:SetStreamName(name)
	self.StreamObj:Play(true)

	self:OnPlayStreamInternal(url, name)
end

function ENT:OnPlayStreamInternal(url, name)
	local owner = self:GetRealRadioOwner()
	local lastUser = self:GetLastUser()

	if not IsValid(lastUser) then
		lastUser = owner
	end

	LIBHook.RunCustom("OnPlayStream", url, name, self, lastUser)
end

function ENT:GetStreamURL()
	if not IsValid(self.StreamObj) then return "" end
	return self.StreamObj:GetURL()
end

function ENT:GetStreamName()
	if not IsValid(self.StreamObj) then return "" end
	return self.StreamObj:GetStreamName()
end

if SERVER then
	function ENT:SetStreamURL(...)
		if not IsValid(self.StreamObj) then return end
		self.StreamObj:SetURL(...)
	end

	function ENT:SetStreamName(...)
		if not IsValid(self.StreamObj) then return end
		self.StreamObj:SetStreamName(...)
	end
end

function ENT:ShowDebug()
	if self._showDebugCache ~= nil then
		return self._showDebugCache
	end

	self._showDebugCache = false

	if not LIBUtil.IsDebug() then
		return false
	end

	if CLIENT and not self:IsBeingLookedAt() then
		return false
	end

	self._showDebugCache = true
	return true
end

if CLIENT then
	function ENT:DrawTranslucent(flags)
		self:DrawModel(flags)

		if not g_isWiremodLoaded then return end
		Wire_Render(self)
	end

	function ENT:BeingLookedAtByLocalPlayer()
		local ply = LocalPlayer()
		if not IsValid( ply ) then
			return false
		end

		if not self:CheckDistanceToEntity(ply, 256) then
			return false
		end

		local tr = StreamRadioLib.Trace(ply)
		if not tr then
			return false
		end

		return tr.Entity == self
	end

	function ENT:IsBeingLookedAt()
		if self._beingLookedAtCache ~= nil then
			return self._beingLookedAtCache
		end

		local beingLookedAt = self:BeingLookedAtByLocalPlayer()
		self._beingLookedAtCache = beingLookedAt

		return beingLookedAt
	end

	return
else
	function ENT:WiremodThink()
		-- Override me
	end

	function ENT:AddWireInput(name, ptype, desc)
		if not g_isWiremodLoaded then return end

		name = string.Trim(tostring(name or ""))
		ptype = string.upper(string.Trim(tostring(ptype or "NORMAL")))
		desc = string.Trim(tostring(desc or ""))

		self._wireports = self._wireports or {}
		local wireports = self._wireports

		wireports.In = wireports.In or {}
		local inputs = wireports.In

		inputs.names = inputs.names or {}
		inputs.types = inputs.types or {}
		inputs.descs = inputs.descs or {}

		inputs.once = inputs.once or {}
		if inputs.once[name] then return end

		inputs.names[#inputs.names + 1] = name
		inputs.types[#inputs.types + 1] = ptype
		inputs.descs[#inputs.descs + 1] = desc
		inputs.once[name] = true
	end

	function ENT:AddWireOutput(name, ptype, desc)
		if not g_isWiremodLoaded then return end

		name = string.Trim(tostring(name or ""))
		ptype = string.upper(string.Trim(tostring(ptype or "NORMAL")))
		desc = string.Trim(tostring(desc or ""))

		self._wireports = self._wireports or {}
		local wireports = self._wireports

		wireports.Out = wireports.Out or {}
		local outputs = wireports.Out

		outputs.names = outputs.names or {}
		outputs.types = outputs.types or {}
		outputs.descs = outputs.descs or {}

		outputs.once = outputs.once or {}
		if outputs.once[name] then return end

		outputs.names[#outputs.names + 1] = name
		outputs.types[#outputs.types + 1] = ptype
		outputs.descs[#outputs.descs + 1] = desc
		outputs.once[name] = true
	end

	function ENT:InitWirePorts()
		if not g_isWiremodLoaded then return end

		if not self._wireports then return end

		if self._wireports.In then
			self.Inputs = WireLib.CreateSpecialInputs(self, self._wireports.In.names, self._wireports.In.types, self._wireports.In.descs)
		end

		if self._wireports.Out then
			self.Outputs = WireLib.CreateSpecialOutputs(self, self._wireports.Out.names, self._wireports.Out.types, self._wireports.Out.descs)
		end

		self._wireports = nil
	end

	function ENT:IsConnectedInputWire(name)
		if not g_isWiremodLoaded then return false end

		local wireinputs = self.Inputs
		if not istable(wireinputs) then return false end

		local wireinput = wireinputs[name]
		if not istable(wireinput) then return false end
		if not IsValid(wireinput.Src) then return false end

		return true
	end

	function ENT:IsConnectedOutputWire(name)
		if not g_isWiremodLoaded then return false end

		local wireoutputs = self.Outputs
		if not istable(wireoutputs) then return false end

		local wireoutput = wireoutputs[name]
		if not istable(wireoutput) then return false end
		if not istable(wireoutput.Connected) then return false end
		if not istable(wireoutput.Connected[1]) then return false end
		if not IsValid(wireoutput.Connected[1].Entity) then return false end

		return true
	end

	function ENT:HasWirelink(name)
		if not g_isWiremodLoaded then return false end

		local wireoutputs = self.Outputs
		if not istable(wireoutputs) then return false end

		local wireoutput = wireoutputs[name]
		if not istable(wireoutput) then return false end

		local value = wireoutput.Value
		if not isentity(value) then return false end
		if not IsValid(value) then return false end

		return true
	end

	local g_wirelinkName = "wirelink"

	function ENT:IsConnectedWirelink()
		if not g_isWiremodLoaded then return false end

		if not self.extended then
			-- wirelink had not been created yet
			return false
		end

		if self:HasWirelink(g_wirelinkName) then
			-- wirelink had been triggered via E2 code
			return true
		end

		if self:IsConnectedOutputWire(g_wirelinkName) then
			-- wirelink had been connected via Wire Tool
			return true
		end

		return false
	end

	function ENT:TriggerWireOutput(name, value)
		if not g_isWiremodLoaded then return end

		if isbool(value) or value == nil then
			value = value and 1 or 0
		end

		if value == self._WireOutputCache[name] and not istable(value) then return end
		self._WireOutputCache[name] = value

		WireLib.TriggerOutput(self, name, value)
	end

	function ENT:TriggerInput(name, value, ext)
		local wired = self:IsConnectedInputWire(name) or self:IsConnectedWirelink() or istable(ext) and ext.wirelink
		self:OnWireInputTrigger(name, value, wired)
	end

	function ENT:OnWireInputTrigger(name, value, wired)
		-- Override me
	end

	function ENT:OnRestore()
		if not g_isWiremodLoaded then return end

		WireLib.Restored( self )
	end

	function ENT:SetDupeData(key, value)
		self.DupeData = self.DupeData or {}
		self.DupeData[key] = table.Copy(value)
	end

	function ENT:GetDupeData(key)
		self.DupeData = self.DupeData or {}
		return self.DupeData[key]
	end

	function ENT:PermaPropSave()
		return {}
	end

	function ENT:PermaPropLoad(data)
		return true
	end

	function ENT:OnEntityCopyTableFinish(data)
		local done = {}

		-- Filter out all variables/members with an storable values
		-- to avoid any abnormal, invalid or unexpectedly shared entity stats on duping (especially for Garry-Dupe)
		local function recursive_filter(tab, newtable)
			if done[tab] then return tab end
			done[tab] = true

			if newtable then
				for k, v in pairs(tab) do
					if isfunction(k) or isfunction(v) then
						continue
					end

					if isentity(k) or isentity(v) then
						continue
					end

					if istable(k) then
						k = recursive_filter(k, {})
					end

					if istable(v) then
						newtable[k] = recursive_filter(v, {})
						continue
					end

					newtable[k] = v
				end

				return newtable
			end

			for k, v in pairs(tab) do
				if isfunction(k) or isfunction(v) then
					tab[k] = nil
					continue
				end

				if isentity(k) or isentity(v) then
					tab[k] = nil
					continue
				end

				if istable(k) then
					tab[k] = nil
					continue
				end

				if istable(v) then
					tab[k] = recursive_filter(v, {})
					continue
				end

				tab[k] = v
			end

			return tab
		end

		local EntityMods = data.EntityMods
		local PhysicsObjects = data.PhysicsObjects

		data.StreamObj = nil
		data._3dstreamradio_classobjs_data = nil
		data._3dstraemradio_classobjs_nw_register = nil
		data.StreamRadioDT = nil
		data.pl = nil
		data.Owner = nil

		data.Inputs = nil
		data.Outputs = nil

		data.BaseClass = nil
		data.OnDieFunctions = nil
		data.PhysicsObjects = nil
		data.EntityMods = nil

		data.old = nil

		if self.OnSetupCopyData then
			self:OnSetupCopyData(data)
		end

		-- Filter out all variables/members with an underscore in the beginning
		-- to avoid any abnormal, invalid or unexpectedly shared entity stats on duping (especially for Garry-Dupe)
		for k, v in pairs(data) do
			if isstring(k) and #k > 0 and k[1] == "_" then
				data[k] = nil
				continue
			end
		end

		recursive_filter(data)
		data.EntityMods = EntityMods
		data.PhysicsObjects = PhysicsObjects
	end

	function ENT:PreEntityCopy()
		if g_isWiremodLoaded then
			self:SetDupeData("Wire", WireLib.BuildDupeInfo(self))
		end

		local classsystem_classobjs_data = {}

		self:PreClasssystemCopy(classsystem_classobjs_data)

		self:SetDupeData("Classsystem", classsystem_classobjs_data)

		self:SetDupeData("Skin", {
			Color = self:GetColor(),
			Skin = self:GetSkin(),
		})

		self:SetDupeData("DupePoses", self:GetDupePoses())

		if self.OnPreEntityCopy then
			self:OnPreEntityCopy()
		end

		duplicator.StoreEntityModifier(self, "DupeData", self.DupeData)
	end

	function ENT:PostEntityPaste( ply, ent, CreatedEntities )
		if not IsValid(ent) then return end
		if not ent.EntityMods then return end

		local dupeData = table.Copy(ent.EntityMods.DupeData or {})

		local WireData = dupeData.Wire
		dupeData.Wire = nil

		if g_isWiremodLoaded and WireData then
			WireLib.ApplyDupeInfo(ply, ent, WireData, function(id, default)
				if id == nil then return default end
				if id == 0 then return game.GetWorld() end

				local ident = CreatedEntities[id]

				if not IsValid(ident) then
					if isnumber(id) then
						ident = ents.GetByIndex(id)
					end
				end

				if not IsValid(ident) then
					ident = default
				end

				return ident
			end)

			WireData = nil
		end

		local classobjs_data = dupeData.Classsystem
		dupeData.Classsystem = nil

		ent._3dstreamradio_classobjs_data = classobjs_data

		ent:PostClasssystemPaste(classobjs_data)

		if dupeData.Skin then
			ent:SetSkin(dupeData.Skin.Skin or 0)
			ent:SetColor(dupeData.Skin.Color or color_white)
		end

		dupeData.Skin = nil

		ent:SetDupePoses(dupeData.DupePoses)
		dupeData.DupePoses = nil

		if not ent.DupeDataApply then return end

		for key, value in pairs(dupeData) do
			ent:DupeDataApply(key, value)
		end
	end

	function ENT:ReapplyClasssystemPaste()
		local data = self._3dstreamradio_classobjs_data

		if not data then
			return
		end

		self:PostClasssystemPaste(data)
	end

	function ENT:PostClasssystemPaste(data)
		if not IsValid(self.StreamObj) then
			return
		end

		self.StreamObj:LoadFromDupe(data)
	end

	function ENT:PreClasssystemCopy(data)
		if not IsValid(self.StreamObj) then
			return
		end

		self.StreamObj:LoadToDupe(data)
	end

	function ENT:OnSetupCopyData(data)
		-- override me
	end

	function ENT:OnPreEntityCopy()
		-- override me
	end

	function ENT:DupeDataApply(key, value)
		-- override me
	end
end

--lua/entities/base_streamradio_gui.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/client/ch_atm_imgui.lua:
return gluapack()()
--addons/ch_atm/lua/entities/ch_atm_card_scanner/shared.lua:
ENT.Base 					= "base_gmodentity"
ENT.Type 					= "anim"

ENT.PrintName 				= "Card Scanner"
ENT.Author					= "Crap-Head"
ENT.Category 				= "ATM by Crap-Head"

ENT.Spawnable				= true
ENT.AdminSpawnable			= true

ENT.RenderGroup 			= RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance 	= true

function ENT:SetupDataTables()
	self:NetworkVar( "Bool", 0, "IsReadyToScan" )
	
	self:NetworkVar( "String", 0, "TerminalPrice" )
	
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end
--addons/ch_atm/lua/ch_atm/client/ch_atm_imgui.lua:
--[[
IMGUI by Wyozi - https://github.com/wyozi-gmod/imgui

MIT License

Copyright (c) 2019 wyozi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
--]]

local imgui = {}

imgui.skin = {
	background = Color(0, 0, 0, 0),
	backgroundHover = Color(0, 0, 0, 0),

	border = Color(255, 255, 255),
	borderHover = Color(255, 127, 0),
	borderPress = Color(255, 80, 0),

	foreground = Color(255, 255, 255),
	foregroundHover = Color(255, 127, 0),
	foregroundPress = Color(255, 80, 0),
}

local devCvar = GetConVar("developer")
function imgui.IsDeveloperMode()
	return not imgui.DisableDeveloperMode and devCvar:GetInt() > 0
end

local _devMode = false -- cached local variable updated once in a while

function imgui.Hook(name, id, callback)
	local hookUniqifier = debug.getinfo(4).short_src
	hook.Add(name, "IMGUI / " .. id .. " / " .. hookUniqifier, callback)
end

local localPlayer
local gState = {}

local function shouldAcceptInput()
	-- don't process input during non-main renderpass
	if render.GetRenderTarget() ~= nil then
		return false
	end

	-- don't process input if we're doing VGUI stuff (and not in context menu)
	if vgui.CursorVisible() and vgui.GetHoveredPanel() ~= g_ContextMenu then
		return false
	end
	
	if localPlayer and localPlayer.ATM_LastUsed and localPlayer.ATM_LastUsed > CurTime() then
		return false
	end
	
	return true
end

local function apply_screen_cooldown()
	if localPlayer then
		localPlayer.ATM_LastUsed = CurTime() + 0.2
		return
	end
end

imgui.Hook("PreRender", "Input", function()
	-- calculate mouse state
	if shouldAcceptInput() then
		local useBind = input.LookupBinding("+use", true)
		local USE = useBind and input.GetKeyCode(useBind)

		local wasPressing = gState.pressing
		gState.pressing = (USE and input.IsButtonDown(USE))
		gState.pressed = not wasPressing and gState.pressing
		
		if wasPressing then
			apply_screen_cooldown()
		end
	end
end)

hook.Add("NotifyShouldTransmit", "IMGUI / ClearRenderBounds", function(ent, shouldTransmit)
	if shouldTransmit and ent._imguiRBExpansion then
		ent._imguiRBExpansion = nil
	end
end)

local traceResultTable = {}
local traceQueryTable = { output = traceResultTable, filter = {} }
local function isObstructed(eyePos, hitPos, ignoredEntity)
	local q = traceQueryTable
	q.start = eyePos
	q.endpos = hitPos
	q.filter[1] = localPlayer
	q.filter[2] = ignoredEntity

	local tr = util.TraceLine(q)
	if tr.Hit then
		return true, tr.Entity
	else
		return false
	end
end

function imgui.Start3D2D(pos, angles, scale, distanceHide, distanceFadeStart)
	if not IsValid(localPlayer) then
		localPlayer = LocalPlayer()
	end

	if gState.shutdown == true then
		return
	end

	if gState.rendering == true then
		print(
			"[IMGUI] Starting a new IMGUI context when previous one is still rendering" ..
			"Shutting down rendering pipeline to prevent crashes.."
		)
		gState.shutdown = true
		return false
	end

	_devMode = imgui.IsDeveloperMode()

	local eyePos = localPlayer:EyePos()
	local eyePosToPos = pos - eyePos

	-- OPTIMIZATION: Test that we are in front of the UI
	do
		local normal = angles:Up()
		local dot = eyePosToPos:Dot(normal)

		if _devMode then gState._devDot = dot end

		-- since normal is pointing away from surface towards viewer, dot<0 is visible
		if dot >= 0 then
			return false
		end
	end

	-- OPTIMIZATION: Distance based fade/hide
	if distanceHide then
		local distance = eyePosToPos:Length()
		if distance > distanceHide then
			return false
		end

		if _devMode then
			gState._devDist = distance
			gState._devHideDist = distanceHide
		end

		if distanceHide and distanceFadeStart and distance > distanceFadeStart then
			local blend = math.min(math.Remap(distance, distanceFadeStart, distanceHide, 1, 0), 1)
			render.SetBlend(blend)
			surface.SetAlphaMultiplier(blend)
		end
	end

	gState.rendering = true
	gState.pos = pos
	gState.angles = angles
	gState.scale = scale

	cam.Start3D2D(pos, angles, scale)

	-- calculate mousepos
	if not vgui.CursorVisible() or vgui.IsHoveringWorld() then
		local tr = localPlayer:GetEyeTrace()
		local eyepos = tr.StartPos
		local eyenormal

		if vgui.CursorVisible() and vgui.IsHoveringWorld() then
			eyenormal = gui.ScreenToVector(gui.MousePos())
		else
			eyenormal = tr.Normal
		end

		local planeNormal = angles:Up()

		local hitPos = util.IntersectRayWithPlane(eyepos, eyenormal, pos, planeNormal)
		if hitPos then
			local obstructed, obstructer = isObstructed(eyepos, hitPos, gState.entity)
			if obstructed then
				gState.mx = nil
				gState.my = nil

				if _devMode then gState._devInputBlocker = "collision " .. obstructer:GetClass() .. "/" .. obstructer:EntIndex() end
			else
				local diff = pos - hitPos

				-- This cool code is from Willox's keypad CalculateCursorPos
				local x = diff:Dot(-angles:Forward()) / scale
				local y = diff:Dot(-angles:Right()) / scale

				gState.mx = x
				gState.my = y
			end
		else
			gState.mx = nil
			gState.my = nil

			if _devMode then gState._devInputBlocker = "not looking at plane" end
		end
	else
		gState.mx = nil
		gState.my = nil

		if _devMode then gState._devInputBlocker = "not hovering world" end
	end

	if _devMode then gState._renderStarted = SysTime() end

	return true
end

function imgui.Entity3D2D(ent, lpos, lang, scale, ...)
	gState.entity = ent
	local ret = imgui.Start3D2D(ent:LocalToWorld(lpos), ent:LocalToWorldAngles(lang), scale, ...)
	if not ret then
		gState.entity = nil
	end
	return ret
end

local function calculateRenderBounds(x, y, w, h)
	local pos = gState.pos
	local fwd, right = gState.angles:Forward(), gState.angles:Right()
	local scale = gState.scale
	local firstCorner, secondCorner =
		pos + fwd * x * scale + right * y * scale,
		pos + fwd * (x + w) * scale + right * (y + h) * scale

	local minrb, maxrb = Vector(math.huge, math.huge, math.huge), Vector(-math.huge, -math.huge, -math.huge)

	minrb.x = math.min(minrb.x, firstCorner.x, secondCorner.x)
	minrb.y = math.min(minrb.y, firstCorner.y, secondCorner.y)
	minrb.z = math.min(minrb.z, firstCorner.z, secondCorner.z)
	maxrb.x = math.max(maxrb.x, firstCorner.x, secondCorner.x)
	maxrb.y = math.max(maxrb.y, firstCorner.y, secondCorner.y)
	maxrb.z = math.max(maxrb.z, firstCorner.z, secondCorner.z)

	return minrb, maxrb
end

function imgui.ExpandRenderBoundsFromRect(x, y, w, h)
	local ent = gState.entity
	if IsValid(ent) then
		-- make sure we're not applying same expansion twice
		local expansion = ent._imguiRBExpansion
		if expansion then
			local ex, ey, ew, eh = unpack(expansion)
			if ex == x and ey == y and ew == w and eh == h then
				return
			end
		end

		local minrb, maxrb = calculateRenderBounds(x, y, w, h)

		ent:SetRenderBoundsWS(minrb, maxrb)
		if _devMode then
			print("[IMGUI] Updated renderbounds of ", ent, " to ", minrb, "x", maxrb)
		end

		ent._imguiRBExpansion = {x, y, w, h}
	else
		if _devMode then
			print("[IMGUI] Attempted to update renderbounds when entity is not valid!! ", debug.traceback())
		end
	end
end

local devOffset = Vector(0, 0, 30)
local devColours = {
	background = Color(0, 0, 0, 200),
	title = Color(78, 205, 196),
	mouseHovered = Color(0, 255, 0),
	mouseUnhovered = Color(255, 0, 0),
	pos = Color(255, 255, 255),
	distance = Color(200, 200, 200, 200),
	ang = Color(255, 255, 255),
	dot = Color(200, 200, 200, 200),
	angleToEye = Color(200, 200, 200, 200),
	renderTime = Color(255, 255, 255),
	renderBounds = Color(0, 0, 255)
}

local function developerText(str, x, y, clr)
	draw.SimpleText(
		str, "DefaultFixedDropShadow", x, y, clr, TEXT_ALIGN_CENTER, nil
	)
end

local function drawDeveloperInfo()
	local camAng = localPlayer:EyeAngles()
	camAng:RotateAroundAxis(camAng:Right(), 90)
	camAng:RotateAroundAxis(camAng:Up(), -90)

	cam.IgnoreZ(true)
	cam.Start3D2D(gState.pos + devOffset, camAng, 0.15)

	local bgCol = devColours["background"]
	surface.SetDrawColor(bgCol.r, bgCol.g, bgCol.b, bgCol.a)
	surface.DrawRect(-100, 0, 200, 140)

	local titleCol = devColours["title"]
	developerText("imgui developer", 0, 5, titleCol)

	surface.SetDrawColor(titleCol.r, titleCol.g, titleCol.b)
	surface.DrawLine(-50, 16, 50, 16)

	local mx, my = gState.mx, gState.my
	if mx and my then
		developerText(
			string.format("mouse: hovering %d x %d", mx, my),
			0, 20, devColours["mouseHovered"]
		)
	else
		developerText(
			string.format("mouse: %s", gState._devInputBlocker or ""),
			0, 20, devColours["mouseUnhovered"]
		)
	end

	local pos = gState.pos
	developerText(
		string.format("pos: %.2f %.2f %.2f", pos.x, pos.y, pos.z),
		0, 40, devColours["pos"]
	)

	developerText(
		string.format("distance %.2f / %.2f", gState._devDist or 0, gState._devHideDist or 0),
		0, 53, devColours["distance"]
	)

	local ang = gState.angles
	developerText(string.format("ang: %.2f %.2f %.2f", ang.p, ang.y, ang.r), 0, 75, devColours["ang"])
	developerText(string.format("dot %d", gState._devDot or 0), 0, 88, devColours["dot"])

	local angToEye = (pos - localPlayer:EyePos()):Angle()
	angToEye:RotateAroundAxis(ang:Up(), -90)
	angToEye:RotateAroundAxis(ang:Right(), 90)

	developerText(
		string.format("angle to eye (%d,%d,%d)", angToEye.p, angToEye.y, angToEye.r),
		0, 100, devColours["angleToEye"]
	)

	developerText(
		string.format("rendertime avg: %.2fms", (gState._devBenchAveraged or 0) * 1000),
		0, 120, devColours["renderTime"]
	)

	cam.End3D2D()
	cam.IgnoreZ(false)

	local ent = gState.entity
	if IsValid(ent) and ent._imguiRBExpansion then
		local ex, ey, ew, eh = unpack(ent._imguiRBExpansion)
		local minrb, maxrb = calculateRenderBounds(ex, ey, ew, eh)
		render.DrawWireframeBox(vector_origin, angle_zero, minrb, maxrb, devColours["renderBounds"])
	end
end

function imgui.End3D2D()
	if gState then
		if _devMode then
			local renderTook = SysTime() - gState._renderStarted
			gState._devBenchTests = (gState._devBenchTests or 0) + 1
			gState._devBenchTaken = (gState._devBenchTaken or 0) + renderTook
			if gState._devBenchTests == 100 then
				gState._devBenchAveraged = gState._devBenchTaken / 100
				gState._devBenchTests = 0
				gState._devBenchTaken = 0
			end
		end

		gState.rendering = false
		cam.End3D2D()
		render.SetBlend(1)
		surface.SetAlphaMultiplier(1)

		if _devMode then
			drawDeveloperInfo()
		end

		gState.entity = nil
	end
end

function imgui.CursorPos()
	local mx, my = gState.mx, gState.my
	return mx, my
end

function imgui.IsHovering(x, y, w, h)
	local mx, my = gState.mx, gState.my
	return mx and my and mx >= x and mx <= (x + w) and my >= y and my <= (y + h)
end
function imgui.IsPressing()
	return shouldAcceptInput() and gState.pressing
end
function imgui.IsPressed()
	return shouldAcceptInput() and gState.pressed
end

-- String->Bool mappings for whether font has been created
local _createdFonts = {}

-- Cached IMGUIFontNamd->GModFontName
local _imguiFontToGmodFont = {}

local EXCLAMATION_BYTE = string.byte("!")
function imgui.xFont(font, defaultSize)
	-- special font
	if string.byte(font, 1) == EXCLAMATION_BYTE then

		local existingGFont = _imguiFontToGmodFont[font]
		if existingGFont then
			return existingGFont
		end

		-- Font not cached; parse the font
		local name, size = font:match("!([^@]+)@(.+)")
		if size then size = tonumber(size) end

		if not size and defaultSize then
			name = font:match("^!([^@]+)$")
			size = defaultSize
		end

		local fontName = string.format("IMGUI_%s_%d", name, size)
		_imguiFontToGmodFont[font] = fontName
		if not _createdFonts[fontName] then
			surface.CreateFont(fontName, {
				font = name,
				size = size
			})
			_createdFonts[fontName] = true
		end

		return fontName
	end
	return font
end

function imgui.xButton(x, y, w, h, borderWidth, borderClr, hoverClr, pressColor)
	local bw = borderWidth or 1

	local bgColor = imgui.IsHovering(x, y, w, h) and imgui.skin.backgroundHover or imgui.skin.background
	local borderColor =
		((imgui.IsPressing() and imgui.IsHovering(x, y, w, h)) and (pressColor or imgui.skin.borderPress))
		or (imgui.IsHovering(x, y, w, h) and (hoverClr or imgui.skin.borderHover))
		or (borderClr or imgui.skin.border)

	surface.SetDrawColor(bgColor)
	surface.DrawRect(x, y, w, h)

	if bw > 0 then
		surface.SetDrawColor(borderColor)

		surface.DrawRect(x, y, w, bw)
		surface.DrawRect(x, y + bw, bw, h - bw * 2)
		surface.DrawRect(x, y + h-bw, w, bw)
		surface.DrawRect(x + w - bw + 1, y, bw, h)
	end

	return shouldAcceptInput() and imgui.IsHovering(x, y, w, h) and gState.pressed
end

function imgui.xCursor(x, y, w, h)
	local fgColor = imgui.IsPressing() and imgui.skin.foregroundPress or imgui.skin.foreground
	local mx, my = gState.mx, gState.my

	if not mx or not my then return end

	if x and w and (mx < x or mx > x + w) then return end
	if y and h and (my < y or my > y + h) then return end
	
	local cursorSize = math.ceil( 0.3 / gState.scale )
	local cursor_setting = CH_ATM.GetCursorSetting()
	
	surface.SetDrawColor( color_white )
	if cursor_setting == 1 then
		surface.SetMaterial( CH_ATM.Materials.Cursor )
	else
		surface.SetMaterial( CH_ATM.Materials.HandCursor )
	end
	surface.DrawTexturedRect( mx - cursorSize + 8, my, 24, 24 )
end

function imgui.xTextButton(text, font, x, y, w, h, borderWidth, color, hoverClr, pressColor)
	local fgColor =
		((imgui.IsPressing() and imgui.IsHovering(x, y, w, h)) and (pressColor or imgui.skin.foregroundPress))
		or (imgui.IsHovering(x, y, w, h) and (hoverClr or imgui.skin.foregroundHover))
		or (color or imgui.skin.foreground)

	local clicked = imgui.xButton(x, y, w, h, borderWidth, color, hoverClr, pressColor)

	font = imgui.xFont(font, math.floor(h * 0.618))
	draw.SimpleText(text, font, x + w / 2, y + h / 2, fgColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

	return clicked
end

return imgui
--addons/ch_atm/lua/entities/ch_atm_credit_card/shared.lua:
ENT.Base 					= "base_anim"
ENT.Type 					= "anim"

ENT.PrintName 				= "Credit Card"
ENT.Author					= "Crap-Head"
ENT.Category 				= "ATM by Crap-Head"

ENT.Spawnable				= true
ENT.AdminSpawnable			= true

ENT.RenderGroup 			= RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance 	= true
--addons/ch_atm/lua/entities/ch_atm_money/cl_init.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator_fuel_large/cl_init.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_cooling2/cl_init.lua:
include( "shared.lua" )

function ENT:Draw()
	self:DrawModel()	
end		
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_miner/cl_init.lua:
include( "shared.lua" )

function ENT:Draw()
	self:DrawModel()	
end		
--addons/ch_mayor/lua/entities/ch_mayor_leaderboard/shared.lua:
return gluapack()()
--addons/ch_mayor/lua/entities/ch_mayor_trashcan/shared.lua:
ENT.Base 					= "base_gmodentity"
ENT.Type 					= "anim"

ENT.PrintName				= "Mayor Trashcan"
ENT.Author					= "Crap-Head"
ENT.Category 				= "Mayor by Crap-Head"

ENT.Spawnable				= true
ENT.AdminSpawnable			= true

ENT.RenderGroup 			= RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance 	= true
--addons/cityworker/lua/entities/cityworker_rubble/cl_init.lua:
include( "shared.lua" )
--gamemodes/darkrp/entities/entities/darkrp_laws/cl_init.lua:
return gluapack()()
--addons/ledscreen/lua/entities/gb_rp_sign/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Spawned Sign"
ENT.Author = "Mac"
ENT.Spawnable = false
ENT.AdminSpawnable = true

function ENT:SetupDataTables()
	self:NetworkVar("String", 0, "Text")
	self:NetworkVar("Vector", 0, "TColor")
	self:NetworkVar("Int", 0, "Type")
	self:NetworkVar("Int", 1, "Speed")
	self:NetworkVar("Int", 2, "Wide")
	self:NetworkVar("Int", 3, "On")
	self:NetworkVar("Int", 4, "FX")
end
--addons/turkish_food_mod-main/lua/entities/ice-stand/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/tfm_config.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/kofte_durum/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/kofte_durum/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Çiğköfte"
ENT.Category = "Turkish Food Mod"
ENT.Spawnable = true
--addons/turkish_food_mod-main/lua/tfm_config.lua:
return gluapack()()
--lua/entities/medium_armor/cl_init.lua:
include('shared.lua')

function ENT:Draw()
    self:DrawModel()
end
--lua/entities/medium_armor_stackable/cl_init.lua:
include('shared.lua')

function ENT:Draw()
    self:DrawModel()
end
--addons/minigame-tool-assistant/lua/entities/minigame_boxgame.lua:
AddCSLuaFile()
DEFINE_BASECLASS( "minigame_bigsquare" )

--[[------------------------------------------------
                Minigame Small Square
------------------------------------------------]]--

ENT.PrintName = "Minigame Box Game Square"

function ENT:Initialize()
    BaseClass.Initialize( self )

    self:SetModel("models/hunter/blocks/cube3x3x025.mdl")
    self:SetSubMaterial(0, "minigames/myplastic")

    -- No fear no more
    if CLIENT then return end

    function self:IsBoxActive()
        return self:GetState() == 2
    end

    self:SetTrigger(true)
end

function ENT:Touch(ent)
    if not Minigames.GetOwnerGame(self:Getowning_ent()):IsActive() then return end

    if
        self:IsBoxActive() and
        ent:IsPlayer()
    then
        local InGame, Owner = Minigames.PlayerInGame(ent)
        if InGame and ( Owner == self:Getowning_ent() ) then
            ent:Kill()
        end
    end
end
--gamemodes/darkrp/entities/entities/money_printer/cl_init.lua:
return gluapack()()
--gamemodes/darkrp/entities/entities/money_printer/cl_init.lua:
include("shared.lua")

function ENT:Initialize()
    self:initVars()
    if not self.DisplayName or self.DisplayName == "" then
        self.DisplayName = DarkRP.getPhrase("money_printer")
    end
end

local camStart3D2D = cam.Start3D2D
local camEnd3D2D = cam.End3D2D
local drawWordBox = draw.WordBox
local IsValid = IsValid

local color_red = Color(140,0,0,100)
local color_white = color_white

function ENT:Draw()
    self:DrawModel()

    local Pos = self:GetPos()
    local Ang = self:GetAngles()

    local owner = self:Getowning_ent()
    owner = (IsValid(owner) and owner:Nick()) or DarkRP.getPhrase("unknown")

    surface.SetFont("HUDNumber5")
    local text = self.DisplayName
    local TextWidth = surface.GetTextSize(text)
    local TextWidth2 = surface.GetTextSize(owner)

    Ang:RotateAroundAxis(Ang:Up(), 90)

    camStart3D2D(Pos + Ang:Up() * 11.5, Ang, 0.11)
        drawWordBox(2, -TextWidth * 0.5, -30, text, "HUDNumber5", color_red, color_white)
        drawWordBox(2, -TextWidth2 * 0.5, 18, owner, "HUDNumber5", color_red, color_white)
    camEnd3D2D()
end

function ENT:Think()
end

--addons/darkrpbankrobbery2/lua/entities/new_bank_vault/shared.lua:
ENT.Type = "anim"

ENT.PrintName = "The Bank"
ENT.Author = "Crap-Head"

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()	
	self:NetworkVar( "Int", 0, "Money" )
end
--addons/mayor_voting/lua/entities/npc_mayorvoting/cl_init.lua:
include("shared.lua")

function ENT:Draw()
  self:DrawModel()
  if not binbonentdraw then return end
  binbonentdraw(self, "Başkan Sekreteri", true, 0, 10, 20, true)
  binbonentdraw(self, "Bana gelip başkan oylamasına katılabilirsin.", false, 0,100, 20, false)
end
--addons/pcasino/lua/entities/pcasino_chair/shared.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_npc/shared.lua:
ENT.Type = "ai"
ENT.Base = "base_ai"
ENT.PrintName = "NPC"
ENT.Author = "Owain Owjo & The One Free-Man"
ENT.Category = "pCasino"
ENT.Spawnable = false
ENT.AdminSpawnable = false

PerfectCasino.Core.RegisterEntity("pcasino_npc", {
	text = {
		overhead = {d = "Dealer", t = "string"},
		chat = {d = "Interested in playing a round?", t = "string"},
	},
},
"models/freeman/pcasino/owain_croupier_female01.mdl")
--addons/pcasino/lua/entities/pcasino_prize_plinth/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Sign Wall Logo"
ENT.Author = "Owain Owjo & The One Free-Man"
ENT.Category = "pCasino"
ENT.Spawnable = false
ENT.AdminSpawnable = false

PerfectCasino.Core.RegisterEntity("pcasino_prize_plinth", {
	general = {
		rope = {d = true, t = "bool"},
		model = {d = "models/buggy.mdl", t = "string"}, 
		spin = {d = true, t = "bool"}, 
		bow = {d = false, t = "bool"}, 
		bowOffset = {d = 0, t = "int"}, 
	},
},
"models/freeman/owain_prize_plinth.mdl")
--addons/pcasino/lua/entities/pcasino_sign_interior_wall/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Sign Interior Wall"
ENT.Author = "Owain Owjo & The One Free-Man"
ENT.Category = "pCasino"
ENT.Spawnable = false
ENT.AdminSpawnable = false

PerfectCasino.Core.RegisterEntity("pcasino_sign_interior_wall", {
	-- General data
	general = {
		text = {d = "Roulette Tables", t = "string"} -- The text to show
	}
},
"models/freeman/owain_interiorsign_wall.mdl")
--addons/pcasino/lua/entities/pcasino_slot_machine/shared.lua:
return gluapack()()
--addons/policearmorylocker/lua/entities/police_locker/shared.lua:
return gluapack()()
--addons/policearmorylocker/lua/entities/police_locker/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Police Armory Locker"
ENT.Author = "Crap-Head"
ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()
	self:NetworkVar( "Bool", 1, "LockerDoor1" )
	self:NetworkVar( "Bool", 2, "LockerDoor2" )
	self:NetworkVar( "Bool", 3, "LockerDoor3" )
	self:NetworkVar( "Bool", 4, "LockerDoor4" )
	self:NetworkVar( "Bool", 5, "LockerDoor5" )
	self:NetworkVar( "Bool", 6, "LockerDoor6" )
	self:NetworkVar( "Bool", 7, "LockerDoor7" )
	self:NetworkVar( "Bool", 8, "LockerDoor8" )
end

CH_Armory_Locker.DoorPos = {
	doorone = Vector(2.00000, -62.591232, 23.25000),
	doorone2 = Vector(-21.00000, -47.498146, 94.00000),

	doortwo = Vector(2.00000, -47.488146, 23.25000),
	doortwo2 = Vector(-21.00000, -34.132117, 94.00000),
	
	doorthree = Vector(2.00000, -33.194775, 23.25000),
	doorthree2 = Vector(-21.00000, -19.089687, 94.00000),
	
	doorfour = Vector(2.00000, 19.856634, 23.25000),
	doorfour2 = Vector(-21.00000, 33.396439, 94.00000),
	
	doorfive = Vector(2.00000, 33.932758, 23.25000),
	doorfive2 = Vector(-21.00000, 47.291241, 94.00000),
	
	doorsix = Vector(2.00000, 47.950176, 23.25000),
	doorsix2 = Vector(-21.00000, 61.521336, 94.00000),
	
	doorseven = Vector(2.00000, -18.521753, 50.50000),
	doorseven2 = Vector(-21.00000, 18.600552, 94.00000),
	
	dooreight = Vector(2.00000, -18.521753, 50.49000),
	dooreight2 = Vector(-21.00000, 18.600552, 0.00000)
}

CH_Armory_Locker.Doors = {}

CH_Armory_Locker.Doors[1] = 0
CH_Armory_Locker.Doors[2] = 0
CH_Armory_Locker.Doors[3] = 0
CH_Armory_Locker.Doors[4] = 0
CH_Armory_Locker.Doors[5] = 0
CH_Armory_Locker.Doors[6] = 0
CH_Armory_Locker.Doors[7] = 0
CH_Armory_Locker.Doors[8] = 0
--addons/sh_keypadcracker/lua/entities/prop_sh_keypadcracker/cl_init.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_crime_box/shared.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
http://store.steampowered.com/curator/32364216

Subscribe to the channel:↓
https://www.youtube.com/c/Famouse

More leaks in the discord:↓ 
discord.gg/rFdQwzm
------------------------------------------------------------------------*/

ENT.Base 			= "base_gmodentity";
ENT.Type 			= "anim";

ENT.PrintName		= "Crime Box";
ENT.Category 		= "Serious Business";
ENT.Author			= "EnnX49";

ENT.Contact    		= "";
ENT.Purpose 		= "";
ENT.Instructions 	= "" ;

ENT.Spawnable		= true;
ENT.AdminSpawnable	= true;

ENT.RenderGroup		= RENDERGROUP_TRANSLUCENT;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/serious_business/lua/entities/sb_good_box/shared.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
http://store.steampowered.com/curator/32364216

Subscribe to the channel:↓
www.youtube.com/c/Famouse

More leaks in the discord:↓ 
discord.gg/rFdQwzm
------------------------------------------------------------------------*/

ENT.Base 			= "base_gmodentity";
ENT.Type 			= "anim";

ENT.PrintName		= "Good Box";
ENT.Category 		= "Serious Business";
ENT.Author			= "EnnX49";

ENT.Contact    		= "";
ENT.Purpose 		= "";
ENT.Instructions 	= "" ;

ENT.Spawnable		= true;
ENT.AdminSpawnable	= true;

ENT.RenderGroup		= RENDERGROUP_TRANSLUCENT;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/serious_business/lua/entities/sb_good_guide/shared.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_wk_seat/shared.lua:
return gluapack()()
--gamemodes/darkrp/entities/entities/spawned_food/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Spawned Food"
ENT.Author = "Rickster"
ENT.Spawnable = false
ENT.IsSpawnedFood = true
ENT.EatSound = "vo/sandwicheat09.mp3" -- Requires Team Fortress 2

function ENT:SetupDataTables()
    self:NetworkVar("Entity", 1, "owning_ent")
end

--gamemodes/darkrp/entities/entities/spawned_weapon/cl_init.lua:
include("shared.lua")

local color_red = Color(140, 0, 0, 100)
local color_white = color_white

function ENT:Draw()
    local ret = hook.Call("onDrawSpawnedWeapon", nil, self)
    if ret ~= nil then return end
    self:DrawModel()

    local amount = self:Getamount()
    if amount == 1 then return end

    local Pos = self:GetPos()
    local Ang = self:GetAngles()
    local text = DarkRP.getPhrase("amount") .. amount

    surface.SetFont("HUDNumber5")
    local TextWidth = surface.GetTextSize(text)

    Ang:RotateAroundAxis(Ang:Forward(), 90)

    cam.Start3D2D(Pos + Ang:Up(), Ang, 0.11)
        draw.WordBox(2, 0, -40, text, "HUDNumber5", color_red, color_white)
    cam.End3D2D()

    Ang:RotateAroundAxis(Ang:Right(), 180)

    cam.Start3D2D(Pos + Ang:Up() * 3, Ang, 0.11)
        draw.WordBox(2, -TextWidth, -40, text, "HUDNumber5", color_red, color_white)
    cam.End3D2D()
end

--[[---------------------------------------------------------------------------
Create a shipment from a spawned_weapon
---------------------------------------------------------------------------]]
properties.Add("createShipment",
    {
        MenuLabel   =   DarkRP.getPhrase("createshipment"),
        Order       =   2003,
        MenuIcon    =   "icon16/add.png",

        Filter      =   function(self, ent, ply)
                            if not IsValid(ent) then return false end
                            return ent.IsSpawnedWeapon
                        end,

        Action      =   function(self, ent)
                            if not IsValid(ent) then return end
                            RunConsoleCommand("darkrp", "makeshipment", ent:EntIndex())
                        end
    }
)

--[[---------------------------------------------------------------------------
Interface
---------------------------------------------------------------------------]]
DarkRP.hookStub{
    name = "onDrawSpawnedWeapon",
    description = "Draw spawned weapons.",
    realm = "Client",
    parameters = {
        {
            name = "weapon",
            description = "The weapon to perform drawing operations on.",
            type = "Player"
        }
    },
    returns = {
        {
            name = "value",
            description = "Return a value to completely override drawing",
            type = "any"
        }
    }
}

--gamemodes/darkrp/entities/entities/spawned_weapon/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Spawned Weapon"
ENT.Author = "Rickster"
ENT.Spawnable = false
ENT.IsSpawnedWeapon = true

function ENT:SetupDataTables()
    self:NetworkVar("Int", 0, "amount")
    self:NetworkVar("String", 0, "WeaponClass")
end

--addons/turkish_food_mod-main/lua/entities/stone_oven/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/tfm_config.lua:
TFM = TFM or {}

--THIS CONFIG FOR EDITING MOD NOT COMPLEX! YOU CAN EDIT WITHOUT BREAKING TABLE STRUCTURE
--BU CONFIG MOD DÜZENLEMESİ İÇİN EKLENMİŞTİR FAZLA DETAYLI DEĞİLDİR! TABLE YAPISINI BOZMADAN DÜZENLEYEBİLİRSİNİZ

TFM.Foods = {
    ["adana"] = {
        model = "models/foods/adanakebap/adanakebap.mdl",
        health = 25,
        eat_sound = "eating.wav"
    },
    ["ayran"] = {
        model = "models/drinks/ayran/ayran.mdl",
        health = 5,
        eat_sound = "slurp.wav"
    },
    ["ayran"] = {
        model = "models/drinks/ayran/ayran.mdl",
        health = 5,
        eat_sound = "slurp.wav"
    },
    ["corba"] = {
        model = "models/foods/corba/corba.mdl",
        health = 15,
        eat_sound = "slurp.wav"
    },
    ["ekmek"] = {
        model = "models/foods/ekmek/ekmek.mdl",
        health = 10,
        eat_sound = "eating.wav"
    },
    ["gazoz"] = {
        model = "models/drinks/gazoz/gazoz.mdl",
        health = 5,
        eat_sound = "slurp.wav"
    },
    ["gofret"] = {
        model = "models/foods/gofret/gofret.mdl",
        health = 8,
        eat_sound = "eating.wav"
    },
    ["hosbes"] = {
        model = "models/foods/hosbes/hosbes.mdl",
        health = 10,
        eat_sound = "eating.wav"
    },
    ["kofte_durum"] = {
        model = "models/foods/cigkofte_durum/cigkofte_durum.mdl",
        health = 10,
        eat_sound = "eating.wav"
    },
    ["kofte_durum_hot"] = {
        model = "models/foods/cigkofte_durum/cigkofte_durum.mdl",
        eat_sound = "eating.wav"
    },
    ["lahmacun"] = {
        model = "models/foods/lahmacun/lahmacun.mdl",
        health = 15,
        eat_sound = "eating.wav"
    },
    ["metro"] = {
        model = "models/foods/metro/metro.mdl",
        health = 7,
        eat_sound = "eating.wav"
    },
    ["nohutlu_pilav"] = {
        model = "models/foods/pilavs/nohutlu.mdl",
        health = 25,
        eat_sound = "eating.wav"
    },
    ["patkof"] = {
        model = "models/foods/patkof/patkof.mdl",
        health = 23,
        eat_sound = "eating.wav"
    },
    ["sade_pilav"] = {
        model = "models/foods/pilavs/sade.mdl",
        health = 22,
        eat_sound = "eating.wav"
    },
    ["salgam"] = {
        model = "models/drinks/salgam/salgam.mdl",
        health = 11,
        eat_sound = "slurp.wav"
    },
    ["sckegg"] = {
        model = "models/foods/sckegg/sckegg.mdl",
        health = 14,
        eat_sound = "eating.wav"
    },
    ["tavuklu_pilav"] = {
        model = "models/foods/pilavs/tavuklu.mdl",
        health = 28,
        eat_sound = "eating.wav"
    },
    ["tea"] = {
        model = "models/drinks/tea/tea.mdl",
        health = 15,
        eat_sound = "slurp.wav"
    },
    ["pide"] = {
        model = "models/foods/pide/pide.mdl",
        health = 23,
        eat_sound = "eating.wav"
    },
    ["dondurma"] = {
        health = 10,
        eat_sound = "lick.mp3"
    }
}

TFM.Stands = {
    ["bufe"] = {
        model = "models/stands/bakkal_stand/bakkal.mdl"
    },
    ["kofte_stand"] = {
        model = "models/stands/cigkofte_stand/cigkofte_stand.mdl",
        price_normal = 1500,
        price_hot = 1500
    },
    ["ice_stand"] = {
        model = "models/stands/ice_stand/ice_stand.mdl",
        time_of_icecreems = 15,
        price_of_icecreems = 2000,
        icecreem_colors = {
            [1] = {clr = Color(104, 48, 27, 255),name = "Kakao"},
            [2] = {clr = Color(255, 255, 255, 255),name = "Sade"},
            [3] = {clr = Color(154, 249, 152, 255),name = "Antep Fıstığı"},
            [4] = {clr = Color(252, 90, 141, 255),name = "Çilek"},
            [5] = {clr = Color(235, 66, 66, 255),name = "Anjelika Eriği"},
            [6] = {clr = Color(242, 242, 69, 255),name = "Muz"},
            [7] = {clr = Color(0, 243, 255, 255),name = "Orman Meyvesi"},
            [8] = {clr = Color(54, 147, 51, 255),name = "Kivi"}
        }
    },
    ["pilav_stand"] = {
        model = "models/stands/pilav_stand/pilav_stand.mdl",
        time_of_pilavs = 15,
        info_of_pilavs = {
            [1] = {name = "Sade",price = 1500},
            [2] = {name = "Nohutlu",price = 2000},
            [3] = {name = "Tavuklu",price = 3000}
        },
    },
    ["stone_oven"] = {
        time_of_foods = 15,
        info_of_foods = {
            [1] = {name = "Ekmek",price = 500},
            [2] = {name = "Pide",price = 600},
            [3] = {name = "Lahmacun",price = 700}
        }
    }
}
--lua/entities/sv_petrol_canister/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end

--lua/entities/sv_petrol_canister/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/tavuklu_pilav/cl_init.lua:
include("shared.lua")
function ENT:Initialize() end
function ENT:Draw() self:DrawModel() end

--addons/turkish_food_mod-main/lua/entities/tea/shared.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/entities/voidfactions_npc/shared.lua:
ENT.Base = "base_ai"
ENT.Type = "ai"
ENT.AutomaticFrameAdvance = true 
ENT.PrintName = "VoidFactions NPC"
ENT.Category = "VoidFactions"
ENT.Spawnable = true
ENT.AdminOnly = true
ENT.AdminSpawnable = true

--[[---------------------------------------------------------
	Name: Entity
-----------------------------------------------------------]]

function ENT:Draw()
	if not (VoidFactions.UI and VoidFactions.UI.Accent) then return end
	
	self:DrawModel()
	local offset = Vector( 0, 0, 80 )
	local ang = LocalPlayer():EyeAngles()
	local pos = self:GetPos() + offset + ang:Up()

	local text = "VoidFactions"

	surface.SetFont("VoidUI.R18")
	local width, height = surface.GetTextSize(text)
	local br = 8 -- space outline for text

	local myPos = LocalPlayer():GetPos()
	if myPos:DistToSqr(pos) > 800 * 800 then return end

	ang:RotateAroundAxis( ang:Forward(), 90 )
	ang:RotateAroundAxis( ang:Right(), 90 )

	local boxWidth = width + (2 * br) + 32

	cam.Start3D2D( pos, Angle( 0, ang.y, 90 ), 0.25 )
		draw.RoundedBox(20, -boxWidth/2, -br, boxWidth, height + (2 * br), VoidFactions.UI.Accent)
		draw.SimpleText(text, "VoidUI.R24", 0, height/2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	cam.End3D2D()
end

--addons/zerosfruitslicer/lua/entities/zfs_anim/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:Think()
	self:SetNextClientThink(CurTime())

	return true
end

--addons/zerosfruitslicer/lua/entities/zfs_anim/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_baggy.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_battery.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zgo2_item_base")
ENT.Type                    = "anim"
ENT.Base                    = "zgo2_item_base"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Battery"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_battery.mdl"
ENT.RenderGroup             = RENDERGROUP_OPAQUE
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a

function ENT:CanDrive(ply)
    return false
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

if SERVER then
	function ENT:PostInitialize()
		zgo2.Destruction.SetupHealth(self)
	end
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_bulb.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zgo2_item_base")
ENT.Type                    = "anim"
ENT.Base                    = "zgo2_item_base"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Bulb"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_bulb.mdl"
ENT.RenderGroup             = RENDERGROUP_OPAQUE

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ENT:CanDrive(ply)
    return false
end

if SERVER then
	function ENT:PostInitialize()
		zgo2.Destruction.SetupHealth(self)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_edible.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zgo2_item_base")
ENT.Type                    = "anim"
ENT.Base                    = "zgo2_item_base"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Edible"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = false
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_food_muffin.mdl"
ENT.RenderGroup             = RENDERGROUP_BOTH
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end

function ENT:CanDrive(ply)
    return false
end

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "WeedID")
	self:NetworkVar("Int", 1, "WeedAmount")
	self:NetworkVar("Int", 2, "WeedTHC")

	self:NetworkVar("Int", 3, "EdibleID")
	if SERVER then
		self:SetWeedID(0)
		self:SetWeedAmount(0)
		self:SetWeedTHC(0)

		self:SetEdibleID(0)
	end
end

if SERVER then
	function ENT:PostInitialize()
		zgo2.Edible.Initialize(self)
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

	function ENT:AcceptInput(inputName, activator, caller, data)
		if inputName == "Use" and IsValid(activator) and activator:IsPlayer() and activator:Alive() then
			zgo2.Edible.USE(self,activator)
		end
	end
end


if CLIENT then
	function ENT:Initialize()
		zgo2.Edible.Initialize(self)
	end

	function ENT:Think()
		zgo2.Edible.Think(self)
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

	function ENT:Draw()
		zgo2.Edible.Draw(self)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_fuel.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_mixerbowl/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

ENT.Type                    = "anim"
ENT.Base                    = "base_anim"
ENT.AutomaticFrameAdvance   = true
ENT.PrintName               = "Mixer Bowl"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = false
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_mixerbowl.mdl"
ENT.RenderGroup             = RENDERGROUP_OPAQUE
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

function ENT:SetupDataTables()

	self:NetworkVar("Int", 4, "EdibleID")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

    self:NetworkVar("Int", 0, "WeedID")
    self:NetworkVar("Int", 1, "WeedAmount")
    self:NetworkVar("Int", 2, "WeedTHC")

    if (SERVER) then

		self:SetEdibleID(0)
        self:SetWeedID(0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

        self:SetWeedAmount(0)
        self:SetWeedTHC(0)
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:OnRemoveButton(ply)
    local trace = ply:GetEyeTrace()

    local lp = self:WorldToLocal(trace.HitPos)

    if lp.x > -12 and lp.x < 4 and lp.y < 12 and lp.y > 11 and lp.z > 9 and lp.z < 20 then
        return true
    else
        return false
    end
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_pot/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

ENT.Type                    = "anim"
ENT.Base                    = "base_anim"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Pot"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_pot01.mdl"
ENT.RenderGroup             = RENDERGROUP_BOTH

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "PotID")
	self:NetworkVar("Entity", 0, "Plant")
	self:NetworkVar("Bool", 0, "HasSoil")
	self:NetworkVar("Int", 1, "Water")
	self:NetworkVar("Bool", 1, "IsCramped")
	if (SERVER) then
		self:SetPotID(1)
		self:SetPlant(NULL)
		self:SetHasSoil(false)
		self:SetWater(0)
		self:SetIsCramped(false)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ENT:CanDrive(ply)
    return false
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_pump/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_seed/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_seed/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

ENT.Type                    = "anim"
ENT.Base                    = "base_anim"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Seed"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = false
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_weedseeds.mdl"
ENT.RenderGroup             = RENDERGROUP_BOTH
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

function ENT:SetupDataTables()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

	// Id to the plant config
	self:NetworkVar("Int", 0, "PlantID")
	self:NetworkVar("Int", 1, "Count")

	if (SERVER) then
		self:SetPlantID(0)
		self:SetCount(zgo2.config.Seedbox.Count)
	end
end

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

function ENT:CanDrive(ply)
    return false
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

--addons/zeros_golddiggger/lua/entities/zgw_bucket_follow/cl_init.lua:

include("shared.lua")

function ENT:Initialize()
	self.HasEffect = false
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198872838622

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:Draw()
	self:DrawModel()
	if zclib.Convar.Get("zclib_cl_drawui") == 1 and zclib.util.InDistance(LocalPlayer():GetPos(), self:GetPos(), 500) then
		self:DrawInfo()
	end
end

function ENT:DrawInfo()
	local ang = Angle(0, LocalPlayer():EyeAngles().y - 90, 90)
	local pos = self:LocalToWorld(Vector(0, 0, 30))
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198872838622

	if self:GetFollow() then
		pos = self:LocalToWorld(Vector(-9, 0, 9))
		ang = self:LocalToWorldAngles(Angle(0, -90, 90))
		local vel = self:GetVelocity()
		vel = vel:Length()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198872838622

		cam.Start3D2D(self:LocalToWorld(Vector(-20, 0, 60)), self:LocalToWorldAngles(Angle(0, -90, 90)), 0.1)
			if vel > 50 then
				surface.SetDrawColor(zgw.default_colors["black01"])
				surface.SetMaterial(zgw.default_materials["bucket_follow"])
				surface.DrawTexturedRect(-150, -150, 300, 300)
			else
				surface.SetDrawColor(zgw.default_colors["black01"])
				surface.SetMaterial(zgw.default_materials["bucket_idle"])
				surface.DrawTexturedRect(-150, -150, 300, 300)
			end
		cam.End3D2D()
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 9ac369ca150c22e64f828cd5857ffea33c11645bd3819881a5581360ebf7ce05

	cam.Start3D2D(pos, ang, 0.1)
		draw.RoundedBox(10, -70, -45, 140, 90, zgw.default_colors["black03"])
		draw.SimpleText(self:GetGoldRatio() .. "%", zclib.GetFont("zclib_font_big"), 0, -20, zgw.default_colors["gold"], TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		draw.SimpleText(self:GetDirt() .. zgw.config.UoM, zclib.GetFont("zclib_font_big"), 0, 15, zgw.default_colors["dirt"], TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	cam.End3D2D()
end

function ENT:Think()
	/*
	THAS JUST FUCKING CANCER, THANK GOD ITS NOT IN THE FINAL VERSION
	local vel = self:GetVelocity()
	vel = vel:Length()
	zclib.util.LoopedSound(self, "zgw_chicken", self:GetFollow() and vel > 50)
	*/

	if zclib.util.InDistance(LocalPlayer():GetPos(), self:GetPos(), 300) then
		if self:GetFollow() then
			if self.HasEffect == false then
				self.HasEffect = true
				zclib.Effect.ParticleEffectAttach("zgw_fire",PATTACH_POINT_FOLLOW, self, 1)
			end
		else
			if self.HasEffect == true then
				self.HasEffect = false
				self:StopParticles()
			end
		end
	else
		if self.HasEffect == true then
			self.HasEffect = false
			self:StopParticles()
		end
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198872838622

function ENT:OnRemove()
	self:StopSound("zgw_chicken")
end

--addons/zeros_golddiggger/lua/entities/zgw_lantern/shared.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_crate/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")

function ENT:Initialize()
	zmlab2.Crate.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

function ENT:Draw()
	self:DrawModel()
	zmlab2.Crate.Draw(self)
end

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_lox/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_mixer/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_mixer.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Mixer"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_OPAQUE

function ENT:SetupDataTables()
    self:NetworkVar("Int", 1, "ProcessState")
    /*
        0 = Needs Barrel
        1 = Needs Acid
        2 = Press the Start Mix Button
        3 = Add Aluminium
        4 = Press the Start Mix Button
        5 = Add Exhaust pipe
        6 = Moving Acid (Loading)
        7 = Needs to be cleaned
    */

    self:NetworkVar("Int", 2, "MethQuality")
    self:NetworkVar("Int", 3, "NeedAmount")

    self:NetworkVar("Int", 5, "ErrorStart")
    self:NetworkVar("Int", 6, "ProcessStart")

    self:NetworkVar("Int", 7, "MethType")

    if (SERVER) then
        self:SetProcessState(-1)

        self:SetMethQuality(0)
        self:SetNeedAmount(0)

        self:SetErrorStart(-1)
        self:SetProcessStart(-1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

        self:SetMethType(1)
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

function ENT:OnStart(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)
    if lp.x > -10 and lp.x < 0 and lp.y < 15 and lp.y > 10 and lp.z > 27 and lp.z < 31 then
        return true
    else
        return false
    end
end

function ENT:OnMethType(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)
    if lp.x > -10 and lp.x < 0 and lp.y < 15 and lp.y > 10 and lp.z > 32 and lp.z < 37 then
        return true
    else
        return false
    end
end

function ENT:OnErrorButton(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)
    if lp.x > -10 and lp.x < 0 and lp.y < 15 and lp.y > 10 and lp.z > 28 and lp.z < 33.6 then
        return true
    else
        return false
    end
end

function ENT:OnCenterButton(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)

    if lp.x > -10 and lp.x < 0 and lp.y < 15 and lp.y > 10 and lp.z > 25 and lp.z < 38 then
        return true
    else
        return false
    end
end




// Tell us if you allow to receive liquid
function ENT:AllowConnection(From_ent)
    if From_ent:GetClass() == "zmlab2_machine_furnace" and From_ent:GetProcessState() == 4 and self:GetProcessState() == 1 then
        return true
    else
        return false
    end
end

// Returns the start position and direction for a hose
function ENT:GetHose_In()
    local attach = self:GetAttachment(1)
    if attach == nil then return self:GetPos(),self:GetAngles() end
    local ang = attach.Ang
    ang:RotateAroundAxis(ang:Right(),180)

    return attach.Pos,ang
end


// Returns the start position and direction for a hose
function ENT:GetHose_Out()
    local attach = self:GetAttachment(2)
    if attach == nil then return self:GetPos(),self:GetAngles() end
    return attach.Pos,attach.Ang
end


                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_tent_door/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_tent_door.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Tent"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_OPAQUE

function ENT:SetupDataTables()

    self:NetworkVar("Bool", 1, "IsLocked")
    self:NetworkVar("Bool", 2, "IsPublic")
    self:NetworkVar("Int", 1, "NextInteraction")
    if (SERVER) then
        self:SetIsLocked(false)
        self:SetIsPublic(false)
        self:SetNextInteraction(-1)
    end
end

function ENT:OnLockButton(ply)
    local trace = ply:GetEyeTrace()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

    if trace.Hit and trace.HitPos and IsValid(trace.Entity) and trace.Entity == self and zclib.util.InDistance(self:GetPos(), ply:GetPos(), 100) then
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

        local lp = self:WorldToLocal(trace.HitPos)
        if lp.x > -5 and lp.x < 5 and lp.y < 11 and lp.y > -11 and lp.z > 20 and lp.z < 40 then
            return true
        else
            return false
        end
    else
        return false
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_filter/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()

	if zmlab.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 300) and IsValid(self:GetCombinerEnt()) then
		cam.Start3D2D(self:LocalToWorld(Vector(0,17,34)), self:LocalToWorldAngles(Angle(0,180,90)), 0.1)
			draw.DrawText("[E]", "zmlab_font4", 0, 5, zmlab.default_colors["white01"], TEXT_ALIGN_CENTER)
		cam.End3D2D()
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:Initialize()
	self.LastCombiner = NULL
	self.LastCombiner_Stage = -1
	self.LastHealth = -1
end

function ENT:Think()
	if zmlab.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 600) then

		// Attach sounds
		local curCombiner = self:GetCombinerEnt()
		if curCombiner ~= self.LastCombiner then
			self.LastCombiner = curCombiner

			if IsValid(self.LastCombiner) then
				self:EmitSound("filter_attach")
			else
				self:EmitSound("filter_dettach")
			end
		end

		// Animation
		if IsValid(self.LastCombiner) then
			local combinerStage = self.LastCombiner:GetStage()
			if combinerStage ~= self.LastCombiner_Stage then

				if combinerStage == 5 then
					zmlab.f.ClientAnim(self, "run", 1)
				else
					zmlab.f.ClientAnim(self, "idle", 1)
				end

				self.LastCombiner_Stage = combinerStage
			end
		else
			zmlab.f.ClientAnim(self, "idle", 1)
			self.LastCombiner_Stage = -1
		end

		if zmlab.config.Filter.Health > 0 then
			// Health Skins
			local health = self:GetFilterHealth()
			if self.LastHealth ~= health then

				if health <= 0 then
					self:EmitSound("filter_break")
				elseif health < zmlab.config.Filter.Health * 0.4 then
					self:SetSkin(2)
				elseif health < zmlab.config.Filter.Health * 0.75 then
					self:SetSkin(1)
				end

				self.LastHealth = health
			end
		end
	else
		self.LastCombiner_Stage = -1
		self.LastHealth = -1
	end
	self:SetNextClientThink(CurTime())
	return true
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_filter/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_basket/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_basket_coal.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_buyer/cl_init.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:Initialize()
	self.LastState = -1
end

function ENT:Draw()
	self:DrawModel()

	if zrmine.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 250) then
		self:DrawInfo()

		if zrmine.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 100) then
			self:DrawDetailInfo()
		end
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:DrawInfo()
	cam.Start3D2D(self:LocalToWorld(Vector(0,0,80 + 1 * math.abs(math.sin(CurTime()) * 1) )), Angle(0, LocalPlayer():EyeAngles().y - 90, 90), 0.1)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

		draw.RoundedBox(25, -200, 50, 400, 50, zrmine.default_colors["black01"])
		local sellProfit = self:GetBuyRate()
		sellProfit = sellProfit - 100
		local pColor = zrmine.default_colors["red02"]

		if (sellProfit < 0) then
			sellProfit = sellProfit
			pColor = zrmine.default_colors["red02"]
		else
			sellProfit = "+ " .. sellProfit
			pColor = zrmine.default_colors["green01"]
		end

		draw.DrawText(zrmine.language.NPC_SellProfit, "zrmine_npc_font2", -175, 60, zrmine.default_colors["white02"], TEXT_ALIGN_LEFT)
		draw.DrawText(sellProfit .. "%", "zrmine_npc_font2", 190, 62, pColor, TEXT_ALIGN_RIGHT)
		draw.SimpleTextOutlined(zrmine.language.NPC_Title, "zrmine_npc_font1", 0, 20, zrmine.default_colors["white02"], TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 3, zrmine.default_colors["black02"])
	cam.End3D2D()
end

local offsetX, offsetY = -140, 185
function ENT:DrawResourceItem(OreType, xpos, ypos, size)
	surface.SetDrawColor(zrmine.f.GetOreColor(OreType))
	surface.SetMaterial(zrmine.default_materials["MetalBar"])
	surface.DrawTexturedRect(xpos + offsetX, ypos + offsetY, size, size)

	local Info = ": " .. zrmine.config.Currency .. math.Round(zrmine.config.BarValue[OreType] * (self:GetBuyRate() / 100))
	draw.DrawText(Info, "zrmine_npc_font4", xpos + offsetX + 30, ypos + offsetY + size * 0.25, zrmine.default_colors["white02"], TEXT_ALIGN_LEFT)
end

function ENT:DrawDetailInfo()
	cam.Start3D2D(self:LocalToWorld(Vector(0,0,80 + 1 * math.abs(math.sin(CurTime()) * 1) )), Angle(0, LocalPlayer():EyeAngles().y - 90, 90), 0.1)

		draw.RoundedBox(25, -200, 110, 120, 160, zrmine.default_colors["black01"])
		draw.DrawText(zrmine.language.NPC_CashPerBar, "zrmine_npc_font3", -140, 120, zrmine.default_colors["white02"], TEXT_ALIGN_CENTER)

		self:DrawResourceItem("Iron", -55, -50, 30)
		self:DrawResourceItem("Bronze", -55, -25, 30)
		self:DrawResourceItem("Silver", -55, 0, 30)
		self:DrawResourceItem("Gold", -55, 25, 30)
	cam.End3D2D()
end

function ENT:Think()
	self:AnimationHandler()
	self:SetNextClientThink(CurTime())
	return true
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 


function ENT:AnimationHandler()

	local CurrentState = self:GetCurrentState()

	if self.LastState ~= CurrentState then
		self.LastState = CurrentState

		if self.LastState == 0 then
			zrmine.f.Animation(self, zrmine.config.MetalBuyer.anim_idle[math.random(#zrmine.config.MetalBuyer.anim_idle)], 2)
		elseif self.LastState == 1 then
			zrmine.f.Animation(self, zrmine.config.MetalBuyer.anim_sell[math.random(#zrmine.config.MetalBuyer.anim_sell)], 2)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

			zrmine.f.EmitSoundENT("zrmine_npc_sell",self)
		elseif self.LastState == 2 then

			zrmine.f.EmitSoundENT("zrmine_npc_wrongjob",self)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

		end
	end
end

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_refiner/cl_init.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_refiner_gold.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_refiner")
ENT.Type = "anim"
ENT.Base = "zrms_refiner"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Refiner - Gold"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false
ENT.RefinerType = "Gold"
ENT.RefiningTime = zrmine.config.Gold_RefiningTime
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_resource/shared.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Gravel"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.Model = "models/Zerochain/props_mining/zrms_resource.mdl"
ENT.DisableDuplicator = false

function ENT:SetupDataTables()
	self:NetworkVar("Float", 0, "ResourceAmount")
	self:NetworkVar("String", 0, "ResourceType")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if (SERVER) then
		self:SetResourceType("Iron")
		self:SetResourceAmount(0)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_resource_bronze.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_resource_gold.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_resource")
ENT.Type = "anim"
ENT.Base = "zrms_resource"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Gravel - Gold"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.Model = "models/Zerochain/props_mining/zrms_resource.mdl"
ENT.DisableDuplicator = false
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
	self:NetworkVar("Float", 0, "ResourceAmount")
	self:NetworkVar("String", 0, "ResourceType")

	if (SERVER) then
		self:SetResourceType("Gold")
		self:SetResourceAmount(25)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_resource_iron.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_resource")
ENT.Type = "anim"
ENT.Base = "zrms_resource"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Gravel - Iron"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.Model = "models/Zerochain/props_mining/zrms_resource.mdl"
ENT.DisableDuplicator = false
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
	self:NetworkVar("Float", 0, "ResourceAmount")
	self:NetworkVar("String", 0, "ResourceType")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if (SERVER) then
		self:SetResourceType("Iron")
		self:SetResourceAmount(25)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_trashman_v1.6.3/lua/entities/ztm_leafpile/shared.lua:
return gluapack()()
--addons/zeros_trashman_v1.6.3/lua/entities/ztm_manhole/shared.lua:
/*
    Addon id: 
    Version: v1.6.3 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_trashman/ztm_manhole.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Manhole"
ENT.Category = "Zeros Trashman"
ENT.RenderGroup = RENDERGROUP_BOTH
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
    self:NetworkVar("Int", 0, "Trash")
    self:NetworkVar("Bool", 0, "IsClosed")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

    if (SERVER) then
        self:SetTrash(0)
        self:SetIsClosed(true)
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_trashman_v1.6.3/lua/entities/ztm_trashbag/cl_init.lua:
/*
    Addon id: 
    Version: v1.6.3 (stable)
*/

include("shared.lua")

function ENT:Initialize()
	ztm.Trashbag.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:Draw()
	self:DrawModel()
	ztm.Trashbag.Draw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:OnRemove()
	ztm.Trashbag.OnRemove(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_distillery/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_yeastbeast/yb_distillery_heater.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Distillery"
ENT.Category = "Zeros YeastBeast"
ENT.RenderGroup = RENDERGROUP_BOTH

function ENT:SetupDataTables()
	self:NetworkVar("Entity", 0, "Cooler")
	self:NetworkVar("Entity", 1, "Condenser")
	self:NetworkVar("Int", 1, "YeastStew")
	self:NetworkVar("Int", 2, "PressureLevel")
	self:NetworkVar("Int", 3, "Fuel")

	self:NetworkVar("Bool", 0, "Depressuring")

	if (SERVER) then
		self:SetYeastStew(0)
		self:SetPressureLevel(0)
		self:SetFuel(0)
		self:SetDepressuring(false)
	end
end


function ENT:OnPressureValve(ply)
	local trace = ply:GetEyeTrace()

	if zyb.f.InDistance(self:LocalToWorld(Vector(0, -30, 103)), trace.HitPos, 15) then
		return true
	else
		return false
	end
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_distillery_constructionkit/cl_init.lua:
include("shared.lua")

function ENT:Initialize()

end

function ENT:Draw()
	self:DrawModel()

	if zyb.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 300) then
		self:DrawInfo()
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:Think()
	self:SetNextClientThink(CurTime())

	return true
end

function ENT:DrawInfo()
	local ang = self:GetAngles()
	ang:RotateAroundAxis(self:GetRight(),180)
	ang:RotateAroundAxis(self:GetForward(),90)

	cam.Start3D2D(self:LocalToWorld(Vector(0, 18, 34)), ang, 0.05)

		-- Title
		draw.RoundedBox(25, -500, 0, 1000, 90, zyb.default_colors["black01"])
		draw.SimpleText(self.PrintName, "zyb_barrel_font01", 0, 10, zyb.default_colors["white01"], TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)

	cam.End3D2D()
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_fermbarrel/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_yeastbeast/yb_barrel.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Fermentation Barrel"
ENT.Category = "Zeros YeastBeast"
ENT.RenderGroup = RENDERGROUP_TRANSLUCENT

function ENT:SetupDataTables()
    self:NetworkVar("Int", 0, "YeastAmount")
    self:NetworkVar("Int", 1, "WaterAmount")
    self:NetworkVar("Int", 3, "SugarAmount")

    self:NetworkVar("Int", 4, "Stage")
    self:NetworkVar("Int", 5, "ShakeProgress")

    self:NetworkVar("Float", 0, "FermentingTime")
    self:NetworkVar("Int", 6, "YeastStew")

    self:NetworkVar("Bool", 0, "HideUI")

    self:NetworkVar("Int", 7, "DirtLevel")
    self:NetworkVar("Bool", 1, "Filling")


    if (SERVER) then
        self:SetFilling(false)
        self:SetHideUI(false)
        self:SetYeastAmount(0)
        self:SetWaterAmount(0)
        self:SetSugarAmount(0)
        self:SetStage(0)
        self:SetDirtLevel(0)
        self:SetShakeProgress(0)
        self:SetFermentingTime(-1)
        self:SetYeastStew(0)
    end
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_jar/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end

function ENT:DrawTranslucent()
	self:Draw()
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_jar/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_yeast/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_yeastbeast/yb_yeast.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Yeast"
ENT.Category = "Zeros YeastBeast"
ENT.RenderGroup = RENDERGROUP_OPAQUE

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "YeastAmount")

	if (SERVER) then
		self:SetYeastAmount(zyb.config.YeastBlock.Amount)
	end
end

--addons/[binbon]arccw_modify/lua/effects/arccw_shelleffect.lua:

EFFECT.Sounds = {}
EFFECT.Pitch = 90
EFFECT.Scale = 1.5
EFFECT.PhysScale = 1
EFFECT.Model = "models/shells/shell_57.mdl"
EFFECT.Material = nil
EFFECT.JustOnce = true
EFFECT.AlreadyPlayedSound = false
EFFECT.ShellTime = 1

EFFECT.SpawnTime = 0

function EFFECT:Init(data)

    local att = data:GetAttachment()
    local ent = data:GetEntity()
    local mag = data:GetMagnitude()

    local mdl = LocalPlayer():GetViewModel()

    if LocalPlayer():ShouldDrawLocalPlayer() then
        mdl = ent.WMModel or ent
    end

    if !IsValid(ent) then self:Remove() return end

    local owner = ent:GetOwner()
    if owner != LocalPlayer() then
        mdl = ent.WMModel or ent
    end

    if owner != LocalPlayer() and !ArcCW.ConVars["shelleffects"]:GetBool() then self:Remove() return end
    if !IsValid(mdl) then self:Remove() return end
    if !mdl:GetAttachment(att) then self:Remove() return end

    local origin, ang = mdl:GetAttachment(att).Pos, mdl:GetAttachment(att).Ang

    ang:RotateAroundAxis(ang:Right(), -90 + ent.ShellRotate)

    ang:RotateAroundAxis(ang:Right(), (ent.ShellRotateAngle or Angle(0, 0, 0))[1])
    ang:RotateAroundAxis(ang:Up(), (ent.ShellRotateAngle or Angle(0, 0, 0))[2])
    ang:RotateAroundAxis(ang:Forward(), (ent.ShellRotateAngle or Angle(0, 0, 0))[3])

    local dir = ang:Up()

    local st = ArcCW.ConVars["shelltime"]:GetFloat()

    if ent then
        self.Model = ent:GetBuff_Override("Override_ShellModel") or ent.ShellModel
        self.Material = ent:GetBuff_Override("Override_ShellMaterial") or ent.ShellMaterial
        self.Scale = ent:GetBuff("ShellScale") or 1--ent:GetBuff_Override("Override_ShellScale") or ent.ShellScale or 1
        self.PhysScale = ent:GetBuff_Override("Override_ShellPhysScale") or ent.ShellPhysScale or 1
        self.Pitch = ent:GetBuff_Override("Override_ShellPitch") or ent.ShellPitch or 100
        self.Sounds = ent:GetBuff_Override("Override_ShellSounds") or ent.ShellSounds
        self.ShellTime = (ent.ShellTime or 0) + st

        if self.Sounds == "autocheck" and ent:GetPrimaryAmmoType() then
            local t = ent:GetPrimaryAmmoType()
            if t == game.GetAmmoID("buckshot") then
                self.Sounds = ArcCW.ShotgunShellSoundsTable
            elseif ent.Trivia_Calibre and string.find(ent.Trivia_Calibre, ".22") then
                self.Sounds = ArcCW.TinyShellSoundsTable
            elseif t == game.GetAmmoID("pistol") or t == game.GetAmmoID("357") or t == game.GetAmmoID("AlyxGun") then
                self.Sounds = ArcCW.PistolShellSoundsTable
            elseif t == game.GetAmmoID("ar2") then
                self.Sounds = ArcCW.MediumShellSoundsTable
            else
                self.Sounds = ArcCW.ShellSoundsTable
            end
        end
    end

    self:SetPos(origin)
    self:SetModel(self.Model)
    self:SetModelScale(self.Scale)
    self:DrawShadow(true)
    self:SetAngles(ang)

    if self.Material then
        self:SetMaterial(self.Material)
    end

    local pb_vert = 2 * self.Scale * self.PhysScale
    local pb_hor = 0.5 * self.Scale * self.PhysScale

    self:PhysicsInitBox(Vector(-pb_vert,-pb_hor,-pb_hor), Vector(pb_vert,pb_hor,pb_hor))

    self:SetCollisionGroup(COLLISION_GROUP_INTERACTIVE_DEBRIS)

    local phys = self:GetPhysicsObject()

    local plyvel = Vector(0, 0, 0)

    if IsValid(owner) then
        plyvel = owner:GetAbsVelocity()
    end


    phys:Wake()
    phys:SetDamping(0, 0)
    phys:SetMass(1)
    phys:SetMaterial("gmod_silent")

    phys:SetVelocity((dir * mag * math.Rand(1, 2)) + plyvel)

    phys:AddAngleVelocity(VectorRand() * 100)
    phys:AddAngleVelocity(ang:Up() * 2500 * math.Rand(0.75, 1.25))

    self.HitPitch = self.Pitch + math.Rand(-5,5)

    local emitter = ParticleEmitter(origin)

    for i = 1, 3 do
        local particle = emitter:Add("particles/smokey", origin + (dir * 2))

        if (particle) then
            particle:SetVelocity(VectorRand() * 10 + (dir * i * math.Rand(48, 64)) + plyvel)
            particle:SetLifeTime(0)
            particle:SetDieTime(math.Rand(0.05, 0.15))
            particle:SetStartAlpha(math.Rand(40, 60))
            particle:SetEndAlpha(0)
            particle:SetStartSize(0)
            particle:SetEndSize(math.Rand(18, 24))
            particle:SetRoll(math.rad(math.Rand(0, 360)))
            particle:SetRollDelta(math.Rand(-1, 1))
            particle:SetLighting(true)
            particle:SetAirResistance(96)
            particle:SetGravity(Vector(-7, 3, 20))
            particle:SetColor(150, 150, 150)
        end
    end

    self.SpawnTime = CurTime()
end

function EFFECT:PhysicsCollide()
    if self.AlreadyPlayedSound and self.JustOnce then return end

    sound.Play(self.Sounds[math.random(#self.Sounds)], self:GetPos(), 65, self.HitPitch, 1)

    self.AlreadyPlayedSound = true
end

function EFFECT:Think()
    if (self.SpawnTime + self.ShellTime) <= CurTime() then
        if !IsValid(self) then return end
        self:SetRenderFX( kRenderFxFadeFast )
        if (self.SpawnTime + self.ShellTime + 1) <= CurTime() then
            if !IsValid(self:GetPhysicsObject()) then return end
            self:GetPhysicsObject():EnableMotion(false)
            if (self.SpawnTime + self.ShellTime + 1.5) <= CurTime() then
                self:Remove()
                return
            end
        end
    end
    return true
end

function EFFECT:Render()
    if !IsValid(self) then return end
    self:DrawModel()
end
--lua/effects/arccw_uc_confetti.lua:

function EFFECT:Init( data )

	local vOffset = data:GetOrigin()

	sound.Play( "garrysmod/balloon_pop_cute.wav", vOffset, 90, math.random( 90, 120 ) )

	local NumParticles = 48

	local emitter = ParticleEmitter( vOffset, true )

	for i = 0, NumParticles do
		local Color = Color(math.random(255), math.random(255), math.random(255))
		local Pos = Vector( math.Rand( -0.5, 0.5 ), math.Rand( -0.5, 0.5 ), math.Rand( -0.5, 0.5 ) ) + data:GetStart()

		local particle = emitter:Add( "particles/balloon_bit", vOffset + Pos * 8 )
		if ( particle ) then

			particle:SetVelocity( Pos * 600 )

			particle:SetLifeTime( 0 )
			particle:SetDieTime( 10 )

			particle:SetStartAlpha( 255 )
			particle:SetEndAlpha( 255 )

			local Size = math.Rand( 1, 2 )
			particle:SetStartSize( Size )
			particle:SetEndSize( 0 )

			particle:SetRoll( math.Rand( 0, 360 ) )
			particle:SetRollDelta( math.Rand( -2, 2 ) )

			particle:SetAirResistance( 80 )
			particle:SetGravity( Vector( 0, 0, -300 ) )

			local RandDarkness = math.Rand( 0.8, 1.0 )
			particle:SetColor( Color.r * RandDarkness, Color.g * RandDarkness, Color.b * RandDarkness )

			particle:SetCollide( true )

			particle:SetAngleVelocity( Angle( math.Rand( -160, 160 ), math.Rand( -160, 160 ), math.Rand( -160, 160 ) ) )

			particle:SetBounce( 0 )
			particle:SetLighting( true )

		end

	end

	emitter:Finish()

end

function EFFECT:Think()
	return false
end

function EFFECT:Render()
end

--lua/effects/arccw_uc_shelleffect.lua:
return gluapack()()
--addons/ch_mining/lua/effects/bonus_confetti/init.lua:
return gluapack()()
--addons/oneprint/lua/oneprint/client/vgui/tabs/home.lua:
return gluapack()()