--Stealed clientside server code by exechack.cc
--Hostname: [TR] Venom Roleplay | DarkRP #venom25 - discord.gg/eniyisi  - Part 8/12 - 06/04/2025


--PATH lua/zclib/sh_main_config.lua:
return gluapack()()
--lua/zclib/util/sh_atracker.lua:
return gluapack()()
--lua/zclib/generic/cl_vibrate.lua:
if SERVER then return end

zclib = zclib or {}
zclib.VibrationSystem = zclib.VibrationSystem or {}

/*

    This system vibrates certain bones of machines

*/

local function RandomJiggle(Machine,boneID,intensity,Fade)
    local amount = 0.1 * intensity * Fade
    local vibrate = math.Rand(-amount, amount)
    Machine:ManipulateBonePosition(boneID, Vector(vibrate, vibrate, vibrate))
end

function zclib.VibrationSystem.Run(Machine,enabled,intensity)
    if zclib.util.InDistance(Machine:GetPos(), LocalPlayer():GetPos(), 150) == false then return end

    // Here we calculate the fade in multiplier
    local Fade = 1
    if Machine.LastState ~= enabled then
        Machine.LastState = enabled
        Machine.VibrationChange = CurTime()
    end
    Fade = math.Clamp((1 / 3) * (CurTime() - Machine.VibrationChange), 0, 1)

    // Here we jiggle the pickle
    for boneID = 1, Machine:GetBoneCount() do
        local boneName = Machine:GetBoneName(boneID)

        if boneName and string.sub(boneName, 1, 7) == "vibrate" then
            if enabled then
                RandomJiggle(Machine,boneID,intensity,Fade)
            else
                if Fade >= 1 then
                    Machine:ManipulateBonePosition(boneID, vector_origin)
                else
                    RandomJiggle(Machine,boneID,intensity,1-Fade)
                end
            end
        end
    end
end

--addons/darkrpadvancedkeys/lua/autorun/advkeys_config.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/__header/sh_language.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/_utilities/cl__gui.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/_utilities/cl_loadconfigapps.lua:
hook.Add("aphone_PostLoad", "APhone_LoadConfigLinks", function()
    for k, v in pairs(aphone.Links) do
        local APP = v
        APP.Complete_Detour = true

        function APP:Open()
            gui.OpenURL(self.link)
        end

        aphone.RegisterApp(APP)
    end
end)
--addons/aphone/lua/aphone/_libs/_utilities/sh_compatibilities.lua:
-- aphone.RegisterNumber(name, icon, func, desc, showcondition)
hook.Add("aphone_PostLoad", "Load_Compatibilities", function()
    -- 911 Emergency
    if CLIENT then
        aphone.RegisterNumber({
            name = aphone.L("Police"),
            icon = "akulla/aphone/specialcall_police.png",
            func = function()
                EmergencyResponse:CreateVictimInterface(false, "")
            end,
            desc = aphone.L("Police_Desc"),
            showcondition = function() return tobool(EmergencyResponse) end,
            clr = Color(55, 79, 107)
        })

        aphone.RegisterNumber({
            name = aphone.L("Services"),
            icon = "akulla/aphone/specialcall_services.png",
            func = function()
                RunConsoleCommand("fleodon_services")
            end,
            desc = aphone.L("Services_Desc"),
            showcondition = function()
                return tobool(FleodonServices)
            end,
            clr = Color(55, 79, 107)
        })

        for k, v in pairs(aphone.SpecialCalls) do
            if !v.name or !v.icon or !v.teams or table.IsEmpty(v.teams) then continue end

            aphone.RegisterNumber({
                name = v.name,
                icon = v.icon,
                func = function()
                    net.Start("aphone_SpecialCall")
                        net.WriteUInt(k, 8)
                    net.SendToServer()
                end,
                desc = v.desc,
                clr = Color(125, 125, 125)
            })
        end
    end
end)
--addons/aphone/lua/aphone/_libs/gamemodes_related/sh_darkrp.lua:
hook.Add("DarkRPFinishedLoading", "aphone_LoadGMDarkRP", function()
    aphone.Gamemode = {}

    function aphone.Gamemode.Afford(ply, amt)
        return ply:canAfford(amt)
    end

    function aphone.Gamemode.AddMoney(ply, amt)
        local money = ply:getDarkRPVar("money")
        if money + amt < 0 then return false end

        ply:addMoney(amt)
        return true
    end

    function aphone.Gamemode.GetMoney(ply)
        if CLIENT then
            return LocalPlayer():getDarkRPVar("money")
        else
            return ply:getDarkRPVar("money")
        end
    end

    function aphone.Gamemode.Format(amt)
        return DarkRP.formatMoney(amt)
    end
end)

--addons/aphone/lua/aphone/_libs/panels/cl_imageshow.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/panels/cl_onlinepicturelist.lua:
local PANEL = {}

local blue = Color(111, 231, 252)
local stencil_clr = Color(1, 1, 1, 1)

function PANEL:Init()
    local pnl = self
    local main_x, main_y = aphone.MainDerma:GetSize()
    local screenmode = aphone.Horizontal

    self.phone_cachewhite = aphone:Color("White")
    self:SetSize(main_x, main_y)
    self:SetMouseInputEnabled(true)

    local margin = screenmode and main_y * 0.1 or main_x * 0.1

    surface.SetFont(aphone:GetFont("Roboto40_700"))
    local _, title_y = surface.GetTextSize(aphone.L("Online_Pictures"))

    local title = vgui.Create("DLabel", pnl)
    title:Dock(TOP)
    title:DockMargin(0, screenmode and main_x*0.05 or main_y * 0.05, 0, 0)
    title:SetTall(title_y)
    title:SetFont(aphone:GetFont("Roboto40_700"))
    title:SetTextColor(aphone:Color("Black3"))
    title:SetText(aphone.L("Online_Pictures"))
    title:SetContentAlignment(5)
    title:SetMouseInputEnabled(true)

    local top_back = vgui.Create("DLabel", title)
    top_back:Dock(LEFT)
    top_back:SetWide(title_y)
    top_back:SetFont(aphone:GetFont("SVG_30"))
    top_back:SetText("l")
    top_back:SetPaintBackground(false)
    top_back:SetTextColor(aphone:Color("Black48"))
    top_back:SetMouseInputEnabled(true)
    top_back:SetContentAlignment(5)

    function top_back:DoClick()
        pnl:MoveTo(main_x, 0, 0.5, 0, 0.5, function(_, p)
            p:Remove()
        end)
    end

    local s = vgui.Create( "DScrollPanel", self )
    s:Dock( FILL )
    s:DockMargin(margin, margin, margin, margin + aphone.GUI.ScaledSizeY(24))
    s:aphone_PaintScroll()

    local l = vgui.Create("DIconLayout", s)
    l:Dock(FILL)
    l:SetSpaceX(10)
    l:SetSpaceY(10)

    // 19 = 5*3 margin between pictures + 4 for the scroll wide
    local perfect_iconsize

    if screenmode then
        perfect_iconsize = (main_y - margin * 2 - l:GetSpaceX() * 2 - 4) / 3
    else
        perfect_iconsize = (main_x - margin * 2 - l:GetSpaceX() * 2 - 4) / 3
    end

    for k,v in ipairs(aphone.GetImgurPics()) do
        local but = l:Add("DButton")
        but:SetText("")
        but:SetSize(perfect_iconsize, perfect_iconsize)
        local cache_roundedbox = aphone.GUI.RoundedBox(0, 0, perfect_iconsize, perfect_iconsize, 8)

        function but:Paint(w, h)
            aphone.Stencils.Start()
                surface.SetDrawColor(stencil_clr)
                surface.DrawPoly(cache_roundedbox)
            aphone.Stencils.AfterMask(false)
                local sub_mat = aphone.GetImgurMat(v)

                if sub_mat then
                    surface.SetMaterial(aphone.GetImgurMat(v))
                    surface.SetDrawColor(self:IsHovered() and blue or color_white)
                    surface.DrawTexturedRect(0, 0, w, h)
                end
            aphone.Stencils.End()
        end

        function but:DoClick()
            local p = vgui.Create("aphone_ShowImage", pnl)

            local oldThink = p.Think
            local lastCheck = 0

            function p:Think()
                if oldThink then
                    oldThink(self)
                end

                if lastCheck + 0.25 < CurTime() then
                    lastCheck = CurTime()

                    local mat = aphone.GetImgurMat(v)

                    if type(mat) == "IMaterial" then
                        p.Think = oldThink

                        self:SetMat(mat)

                        self:SetValid(function()
                            pnl:OnSelected(v)
                            pnl:Remove()
                        end)
                    end
                end
            end
        end
    end

    l:Layout()
    self:aphone_RemoveCursor()
end

function PANEL:Paint(w,h)
    surface.SetDrawColor(self.phone_cachewhite)
    surface.DrawRect(0,0,w,h)
end

vgui.Register("aphone_OnlinePictureList", PANEL, "Panel")
--addons/aphone/lua/aphone/_libs/printers/sh_rprint.lua:
hook.Add("PostGamemodeLoaded", "APhone_LoadPrinter_RPrint", function()
    if rPrint then
        aphone.Printer = aphone.Printer or {}

        function aphone.Printer.GetPrinters(ply)
            local tbl = {}

            for k, v in ipairs(ents.FindByClass("rprint*")) do
                if v:CPPIGetOwner() == ply or v:Getowning_ent() == ply then
                    table.insert(tbl, v)
                end
            end

            return tbl
        end

        function aphone.Printer.FormatMoney(amt)
            return aphone.Gamemode.Format(amt)
        end

        function aphone.Printer.GetInfo(ents)
            local capacity = 0
            local money = 0
            local sec = 0
            local danger = 0

            for k, v in ipairs(ents or {}) do
                if IsValid(v) then
                    money = money + v:GetMoney()
                    capacity = money

                    if (v:GetPower() > 0) then
                        sec = sec + v.Params.PrintRate*60
                    end

                    danger = danger + (v:GetTemp() < v.Params.TempMax and 0 or 1)
                else
                    ents[k] = nil
                end
            end

            return {
                [1] = {
                    val = money,
                    name = "money",
                },

                [2] = {
                    val = sec,
                    name = "sec",
                },

                [3] = {
                    val = capacity,
                    name = "capacity",
                },

                [4] = {
                    val = danger,
                    name = "danger",
                },
            }, ents
        end
    end
end)
--addons/aphone/lua/aphone/apps/radio/cl_main.lua:
local APP = {}

APP.name = aphone.L("Radio")
APP.icon = "akulla/aphone/app_radio.png"
APP.Default = true

local radio_id = 0
aphone.RadioEnts = aphone.RadioEnts or {}
aphone.RadioTimers = aphone.RadioTimers or {}
local radio_owner = {}

// We instantly load radios, That's a way to avoid to wait 5min the radio to play
// I prefer getting 1 radio playing each time, I think it would be a issue if 40 people stream the same link or things like that. So I prefer found the closest player with each radio and let play it.
local function create_radios(force)
    for k, v in pairs(aphone.RadioList) do
        if v.logo then
            aphone.GUI.WebPicture(v.name, v.logo)
        end
        
        local valid = IsValid(aphone.RadioEnts[k])
        
        if !valid or force then
            // Why noblock ? I don't know either, but with this flag, my radio don't stop randomly
            sound.PlayURL(v.url, "noplay noblock", function(station, err)
                if IsValid(station) then
                    if valid then
                        aphone.RadioEnts[k]:Stop()
                    end

                    station:SetVolume(0)
                    station:Play()
                    aphone.RadioEnts[k] = station
                    aphone.RadioTimers[k] = CurTime() + 0.5 // Give some extra time

                    if force and radio_id == k then
                        aphone.My_Radio = station
                    end
                else
                    aphone.RadioList[k] = nil
                end
            end)
        end
    end
end
create_radios()

//timer.Create("APhone_RefreshBadRadios", 15, 0, function()
//    create_radios()
//end)

hook.Add("PostCleanupMap", "APhone_RecreateRadios", function()
    for k, v in pairs(aphone.RadioEnts) do
        if IsValid(v) then
            v:Stop()
            aphone.RadioEnts[k] = nil
        end
    end
    
    create_radios(true)
end)

// SetPos, check volume change, get good player, refresh on stopsound
local last_checkradios = CurTime()

hook.Add("Think", "aphone_RadioRefresh", function()
    if last_checkradios + 1 < CurTime() then
        for k, v in pairs(aphone.RadioEnts) do
            if isnumber(station) then
                -- Double if, we don't want to make something if it's refreshing
                -- Avoid calling multiples URLs
                if station < CurTime() then
                    station = nil
                end
            elseif !IsValid(v) or v:GetTime() < (CurTime() - aphone.RadioTimers[k]) or (v:GetState() == 0 and v:GetVolume() > 0) then
                station = CurTime() + 5

                sound.PlayURL(aphone.RadioList[k].url, "3d noplay noblock", function(station)
                    if IsValid(station) then
                        if IsValid(v) then
                            v:Stop()
                        end

                        station:SetVolume(0)
                        station:Play()

                        aphone.RadioEnts[k] = station
                        aphone.RadioTimers[k] = CurTime() + 0.5 // Give some extra time

                        if force and radio_id == k then
                            aphone.My_Radio = station
                        end
                    end
                end)
            end
        end
        last_checkradios = CurTime()
    end

    local lp = LocalPlayer()
    local only_mine = aphone:GetParameters("Core", "OnlyMyRadio", false)

    if IsValid(lp) then
        local lp_pos = lp:GetPos()

        for k, v in pairs(aphone.RadioEnts) do
            if IsValid(v) then
                local owner = radio_owner[k]

                if owner and IsValid(owner) and owner:GetPos():DistToSqr(lp_pos) < 600*600 and (!only_mine or owner == lp) then
                    v:Play()
                    v:SetPos(owner:GetPos())
                    local vol = owner.aphone_RadioVolume

                    if vol != v:GetVolume() then
                        v:SetVolume(vol or 0.5)
                    end
                else
                    v:SetVolume(0)
                end
            end
        end
    end
end)

// Change the radio, take the closest
timer.Create("aphone_RefreshRadios", 0.5, 0, function()
    local local_ply = LocalPlayer()
    if !IsValid(local_ply) then return end

    local tbl = {}

    for k,v in ipairs(player.GetHumans()) do
        if v.aphone_RadioID and v:HasWeapon("aphone") then
            tbl[v.aphone_RadioID] = tbl[v.aphone_RadioID] or {}
            table.insert(tbl[v.aphone_RadioID], v)
        end
    end

    // get the closest radio
    radio_owner = {}
    local pos = local_ply:GetPos()
    for k, v in pairs(tbl) do
        local best_dist

        for i, j in ipairs(v) do
            if !best_dist then
                best_dist = j
            else
                if v.aphone_RadioVolume and v.aphone_RadioVolume != 0 and best_dist:GetPos():DistToSqr(pos) > v:GetPos():DistToSqr(pos) then
                    best_dist = v
                end
            end
        end

        tbl[k] = best_dist
        radio_owner[k] = tbl[k]
    end

    // Stop radios if nobody use them
    for id, station in ipairs(aphone.RadioEnts) do
        if IsValid(station) then
            local state = station:GetState()

            if !tbl[id] then
                // We don't pause them, because radio can timeout ( from BASS playurl wiki )
                station:SetVolume(0)
            elseif tbl[id] and state != 1 then
                station:Play()
            end
        end
    end
end)

// Nets
net.Receive("aphone_ChangeRadio", function()
    local ent = net.ReadEntity()
    ent.aphone_RadioID = net.ReadUInt(12)

    if ent.aphone_RadioID == 0 then
        ent.aphone_RadioID = nil
    end

    if ent == LocalPlayer() then
        if ent.aphone_RadioID != 0 then
            aphone.My_Radio = aphone.RadioEnts[ent.aphone_RadioID]
        else
            aphone.My_Radio = nil
        end
    end
end)

net.Receive("aphone_RadioVolume", function()
    local ent = net.ReadEntity()
    local volume = net.ReadUInt(7) / 100

    ent.aphone_RadioVolume = volume or 0.5
end)

// Meta extraction
function APP:ExtractMusicTitle(str)
    if str then
        local tbl = string.Explode( "'", str, true)
        for k,v in ipairs(tbl) do
            if v == "StreamTitle=" and tbl[k + 1] != "" then
                return tbl[k + 1]
            end
        end
    end
    return aphone.L("Music_NotFound")
end





--[[
    APP PART
]]--

local lua_grad = Material("akulla/aphone/lua_grad1.png")
local clr_125_20 = Color(125, 125, 125, 20)

function APP:Open(main, main_x, main_y, screenmode)
    local clr_volbar = aphone:Color("Radio_VolumeBar")
    local clr_bg = aphone:Color("Radio_Background")
    local clr_white180 = aphone:Color("Text_White180")
    local clr_white = aphone:Color("Text_White")
    local clr_white120 = aphone:Color("Text_White120")
    local clr_shadow = aphone:Color("Text_Shadow")

    local font_mediumheader = aphone:GetFont("MediumHeader")
    local font_little = aphone:GetFont("Little")
    local font_header = aphone:GetFont("Roboto40")
    local font_Small = aphone:GetFont("Small")

    function main:Paint(w,h)
        surface.SetDrawColor(clr_volbar)
        surface.DrawRect(0, 0, w, h)
    end

    // Lua refresh break local infos, try to get them back
    if radio_id == 0 and IsValid(aphone.My_Radio) then
        for k, v in pairs(aphone.RadioEnts) do
            if v == aphone.My_Radio then
                radio_id = k
                break
            end
        end
    end

    local app = self
    local radio = aphone.RadioList[radio_id]
    local radio_title = radio and radio.name or aphone.L("Radio_Off")
    local radio_clr = radio and radio.clr or color_transparent
    local radio_music = (IsValid(aphone.My_Radio) and app:ExtractMusicTitle(aphone.My_Radio:GetTagsMeta()) or "")
    local lerptable

    local radio_top = vgui.Create("DPanel", main)

    if screenmode then
        radio_top:Dock(LEFT)
        radio_top:SetWide(main_y)
    else
        radio_top:Dock(TOP)
        radio_top:SetTall(main_x)
    end

    function radio_top:Paint(w, h)
        surface.SetDrawColor(clr_bg)
        surface.DrawRect(0, 0, w, h)

        surface.SetMaterial(lua_grad)
        surface.SetDrawColor(radio_clr)
        surface.DrawTexturedRect(0, 0, w, h)

        local infos = aphone.RadioList[radio_id]

        if infos then
            local logo = infos.logo
            if logo then
                local mat = aphone.GUI.WebPicture(radio_title, logo, "smooth 1")

                if mat and !mat:IsError() then
                    surface.SetMaterial(aphone.GUI.WebPicture(radio_title, logo, "smooth 1"))
                    surface.SetDrawColor(color_white)
                    surface.DrawTexturedRect(w * 0.1, w * 0.1, w * 0.8, w * 0.8)
                end
            end

            // Visualizer
            if IsValid(aphone.My_Radio) then
                local data = {}
                aphone.My_Radio:FFT(data, FFT_1024)

                if !lerptable then
                    lerptable = data
                elseif data and !table.IsEmpty(data) then
                    local div = math.ceil(w / 60)
                    for i = 1, 60 do
                        if lerptable[i] and lerptable[i] > data[i] then
                            lerptable[i] = math.Clamp(lerptable[i]-0.0025, 0, 1)
                        else
                            lerptable[i] = data[i]
                        end

                        surface.SetDrawColor(clr_white180)
                        surface.DrawRect(div * i, h - (lerptable[i] * 0.5 * h), div * 0.8, lerptable[i] * 0.5 * h)
                    end
                end
            end
        end

        // Music/Radio Name
        surface.SetFont(font_mediumheader)
        local txt_x, txt_y = surface.GetTextSize(radio_music)
        local font = txt_x < w and font_mediumheader or font_little

        draw.SimpleTextOutlined(radio_music, font, w / 2, h * 0.95, clr_white120, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM, 1, clr_shadow)
        draw.SimpleTextOutlined(radio_title, font_header, w / 2, h * 0.95 - txt_y, clr_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM, 2, clr_shadow)
    end

    local soundbar_panel = vgui.Create("DPanel", main)
    soundbar_panel:SetPaintBackground(false)
    soundbar_panel:Dock(TOP)
    soundbar_panel:SetTall((screenmode and main_x or main_y) * 0.08)

    local space_soundbar_but = (screenmode and soundbar_panel:GetWide() or soundbar_panel:GetTall())
    local space_soundbar_margin = (screenmode and main_y or main_x) * 0.05

    local soundbar_button_low = vgui.Create("DButton", soundbar_panel)
    soundbar_button_low:SetText("q")
    soundbar_button_low:SetFont(aphone:GetFont("SVG_30"))
    soundbar_button_low:SetTextColor(color_white)
    soundbar_button_low:SetPaintBackground(false)
    soundbar_button_low:Dock(LEFT)
    soundbar_button_low:SetTall(space_soundbar_but)
    soundbar_button_low:DockMargin(space_soundbar_margin, space_soundbar_margin, space_soundbar_margin, space_soundbar_margin)

    local soundbar_button_high = vgui.Create("DButton", soundbar_panel)
    soundbar_button_high:SetText("p")
    soundbar_button_high:SetFont(aphone:GetFont("SVG_30"))
    soundbar_button_high:SetTextColor(color_white)
    soundbar_button_high:SetPaintBackground(false)
    soundbar_button_high:Dock(RIGHT)
    soundbar_button_high:SetTall(space_soundbar_but)
    soundbar_button_high:DockMargin(space_soundbar_margin, space_soundbar_margin, space_soundbar_margin, space_soundbar_margin)

    local soundbar_slider = vgui.Create( "DSlider", soundbar_panel )
    soundbar_slider:Dock(FILL)
    soundbar_slider:DockMargin(0, soundbar_panel:GetTall() / 2-4, 0, soundbar_panel:GetTall() / 2-4)
    soundbar_slider:SetSlideX(0.5)

    function soundbar_slider:Paint(w, h)
        draw.RoundedBox(4, 1, 0, w-2, h, color_white)
        draw.RoundedBox(4, 0, 0, w * self:GetSlideX(), h, radio_clr)
    end
    function soundbar_slider.Knob:Paint(w, h) end

    // not gonna spam net. Wait he finished
    local was_edited = false
    function soundbar_slider:Think()
        if self:IsEditing() and !was_edited then
            was_edited = self:GetSlideX()
        end

        if !self:IsEditing() and was_edited then
            net.Start("aphone_RadioVolume")
                net.WriteUInt(self:GetSlideX() * 100, 7)
            net.SendToServer()
            was_edited = false
        end
    end

    local list_scroll = vgui.Create("DScrollPanel", main)
    list_scroll:Dock(FILL)
    list_scroll:aphone_PaintScroll()

    local scaled_size80 = aphone.GUI.ScaledSizeY(80)
    local scaled_size10 = aphone.GUI.ScaledSizeX(10)
    //local disabled_text = aphone.L("Music_Disabled")

    for k, v in pairs(aphone.RadioList) do
        //local disabled = (!aphone.RadioEnts[k] or !IsValid(aphone.RadioEnts[k])) and k != 0
        local disabled = false
        surface.SetFont(font_mediumheader)
        local name = ""

        if k != 0 then
            //name = !disabled and v.name or v.name .. disabled_text
            name = v.name
        else
            name = aphone.L("Radio_Off")
        end

        local font = surface.GetTextSize(name) > main_x - 20 and font_Small or font_header

        local r_bg = vgui.Create("DPanel")
        list_scroll:AddItem(r_bg)
        r_bg:Dock(TOP)
        r_bg:SetTall(scaled_size80)

        function r_bg:Paint(w, h)
            if radio_id == k then
                surface.SetDrawColor(radio_clr)
                surface.DrawRect(0, 0, w, h)
            elseif k % 2 == 0 then
                surface.SetDrawColor(clr_125_20)
                surface.DrawRect(0, 0, w, h)
            end
        end

        local r = vgui.Create("Button", r_bg)
        r:Dock(FILL)
        r:SetText(name)
        r:DockMargin(scaled_size10, 0, 0, 0)
        r:SetContentAlignment(4)
        r:SetFont(font)
        r:SetPaintBackground(false)

        if disabled then
            r:SetTextColor(clr_white120)
        else
            r:Phone_AlphaHover()
        end

        function r:DoClick()
            if disabled then return end

            if radio_id == k then
                radio_id = 0
                radio_clr = color_transparent
                radio_title = aphone.L("Radio_Off")
                radio_music = ""
                aphone.My_Radio = nil

                net.Start("aphone_ChangeRadio")
                    net.WriteUInt(0, 12)
                net.SendToServer()
            else
                radio_id = k
                radio_clr = aphone.RadioList[k].clr
                radio_title = name
                radio_music = (k != 0 and app:ExtractMusicTitle(aphone.RadioEnts[k]:GetTagsMeta()) or "")
                aphone.My_Radio = aphone.RadioEnts[k]

                net.Start("aphone_ChangeRadio")
                    net.WriteUInt(k, 12)
                net.SendToServer()
            end
        end
    end

    if !screenmode then
        main:Phone_DrawTop(main_x, main_y)
    end

    main:aphone_RemoveCursor()
end

function APP:Open2D(main, main_x, main_y)
    self:Open(main, main_x, main_y, true)
end

aphone.RegisterApp(APP)
--addons/aphone/lua/aphone/apps/settings/cl_main.lua:
return gluapack()()
--lua/arccw/shared/sh_0_uc.lua:
hook.Add("Initialize", "ArcCW_Plinking", function()
    game.AddAmmoType({
        name = "plinking",
    })

    if CLIENT then
        language.Add("plinking_ammo", "Plinking Ammo")
    end
end)

sound.Add({
    name = "DB_ADD",
    channel = CHAN_AUTO,
    volume = 1.0,
    level = 100,
    sound = {"^arccw_uc/common/db_add_1.ogg", "^arccw_uc/common/db_add_2.ogg", "^arccw_uc/common/db_add_3.ogg"}
})

CreateConVar("arccw_uc_infiniteubwammo", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Infinite underbarrel weapon ammo.")
CreateConVar("arccw_uc_apobjmult", 3, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Damage multiplier against vehicles and objects.")

game.AddParticles("particles/muzzleflash_dragonsbreath.pcf")
PrecacheParticleSystem("muzzleflash_dragonbreath")
game.AddParticles("particles/uo_explosions_fas2.pcf")
PrecacheParticleSystem("explosion_HE_m79_fas2")
PrecacheParticleSystem("explosion_he_grenade_fas2")
PrecacheParticleSystem("explosion_HE_claymore_fas2")
PrecacheParticleSystem("explosion_grenade_fas2")
ArcCW.UC = {}

ArcCW.UC.BodyDamageMults = {
    [HITGROUP_HEAD] = 3.5,
    [HITGROUP_CHEST] = 1.15,
    [HITGROUP_STOMACH] = 1,
    [HITGROUP_LEFTARM] = 0.85,
    [HITGROUP_RIGHTARM] = 0.85,
    [HITGROUP_LEFTLEG] = 0.5,
    [HITGROUP_RIGHTLEG] = 0.5,
}

ArcCW.UC.BodyDamageMults_Shotgun = {
    [HITGROUP_HEAD] = 1.5,
    [HITGROUP_CHEST] = 1,
    [HITGROUP_STOMACH] = 1,
    [HITGROUP_LEFTARM] = 0.85,
    [HITGROUP_RIGHTARM] = 0.85,
    [HITGROUP_LEFTLEG] = 0.5,
    [HITGROUP_RIGHTLEG] = 0.5,
}

ArcCW.UC.RifleAmmoTypes = {
    ["smg1"] = true,
    ["ar2"] = true,
    ["SniperPenetratedRound"] = true
}

ArcCW.UC.PistolAmmoTypes = {
    ["pistol"] = true,
    ["357"] = true,
    ["plinking"] = true
}


local common = ")^/arccw_uc/common/"
ArcCW.UC.DrawSounds = {
    {s = common .. "raise.ogg", t = 0},
    {s = common .. "shoulder.ogg", t = 0.15},
    {s = common .. "rattle.ogg", t = 0.2},
}

ArcCW.UC.HolsterSounds = {
    {s = common .. "rattle.ogg", t = 0},
    {s = common .. "cloth_6.ogg", t = 0.2},
}

ArcCW.UC.SubsonicThreshold = 340

-- Refer to http://www.ballisticsbytheinch.com/ for muzzle velocity per barrel length if possible
ArcCW.UC.StdDmg = {
    -- Pistol/plinking calibers
    ["22lr"] = {
        max = 12,
        min = 7,
        pen = 3,
        vel = 330
    },
    ["9mm"] = {
        max = 30,
        min = 17,
        pen = 6,
        vel = 380
    },
    ["10mm"] = {
        max = 35,
        min = 20,
        pen = 8,
        vel = 400
    },
    ["380acp"] = {
        max = 30,
        min = 15,
        pen = 3,
        vel = 390
    },
    ["40sw"] = {
        max = 30,
        min = 23,
        pen = 8,
        vel = 340
    },
    ["45acp"] = {
        max = 45,
        min = 15,
        pen = 9,
        vel = 250
    },
    ["357sig"] = {
        max = 33,
        min = 17,
        pen = 6,
        vel = 440
    },
    -- Magnum calibers
    ["357"] = {
        max = 60,
        min = 20,
        pen = 9,
        vel = 430
    },
    ["44"] = {
        max = 75,
        min = 16,
        pen = 10,
        vel = 360
    },
    ["50ae"] = {
        max = 80,
        min = 12,
        pen = 12,
        vel = 450
    },
    ["50beo"] = {
        max = 80,
        min = 20,
        pen = 12,
        vel = 540
    },
    -- Carbine/rifle calibers
    ["57fn"] = {
        max = 28,
        min = 20,
        pen = 15,
        vel = 910
    }, -- 5.7x28mm FN
    ["556"] = {
        max = 34,
        min = 20,
        pen = 14,
        vel = 910
    },
    ["300blk"] = {
        max = 40,
        min = 15,
        pen = 10,
        vel = 310
    },
    ["545"] = {
        max = 40,
        min = 20,
        pen = 12,
        vel = 880
    },
    ["762_39"] = {
        max = 50,
        min = 25,
        pen = 16,
        vel = 730
    }, -- 7.62x39, not 7.62x51 NATO
    ["762_51"] = {
        max = 65,
        min = 35,
        pen = 20,
        vel = 850
    }, -- 7.62x51 NATO
    ["366"] = {
        max = 60,
        min = 30,
        pen = 18,
        vel = 600
    }, -- .366 TKM
    -- Shotgun calibers
    ["12g_p"] = {
        max = 20,
        min = 13,
        pen = 2,
        num = 8,
        vel = 400
    }, -- Pump
    ["12g_s"] = {
        max = 18,
        min = 10,
        pen = 2,
        num = 8,
        vel = 400
    }, -- Semi
    ["410b"] = {
        max = 18,
        min = 5,
        pen = 2,
        vel = 400
    },
    -- Sniper calibers
    ["338"] = {
        max = 85,
        min = 160,
        pen = 36,
        vel = 1000
    },
    ["300"] = {
        max = 44,
        min = 85,
        pen = 24,
        vel = 950
    },
    ["50bmg"] = {
        max = 104,
        min = 180,
        pen = 46,
        vel = 920
    },
}

function ArcCW.UC.CalConv(from, to, stat)
    return math.Round(ArcCW.UC.StdDmg[to][stat] / ArcCW.UC.StdDmg[from][stat], 2)
end

ArcCW.UC.ADSReload = function(wep)
    if IsValid(wep) and wep.ArcCW then
        local vm = wep:GetOwner():GetViewModel()

        local delta = 1-wep:GetSightDelta()

        local bipoded = wep:GetInBipod()
        wep.ADSBipodAnims = math.Approach(wep.ADSBipodAnims or 0, bipoded and 1 or 0, FrameTime() / 0.5)

        vm:SetPoseParameter("sights", Lerp( math.ease.InOutCubic(math.max(delta, wep.ADSBipodAnims)), 0, 1)) -- thanks fesiug
    end
end

-- right forward up
local traces1 = {
    {
        Distance = Vector(0, 0, 1024),
        Influence = 1,
    }, -- Up

}

local traces2 = {
    {
        Distance = Vector(0, 0, 1024),
        Influence = 1,
    }, -- Up
    {
        Distance = Vector(768, 768, 0),
        Influence = 0.5,
    }, -- Right
    {
        Distance = Vector(-768, 768, 0),
        Influence = 0.5,
    }, -- Left

}

local traces3 = {
    {
        Distance = Vector(0, 0, 1024),
        Influence = 0,
    }, -- Up
    {
        Distance = Vector(0, 768, 768),
        Influence = 1,
    }, -- Up Forward
    {
        Distance = Vector(0, -768, 768),
        Influence = 1,
    }, -- Up Back
    {
        Distance = Vector(0, 768, 0),
        Influence = 0.5,
    }, -- Forward
    {
        Distance = Vector(768, 768, 0),
        Influence = 0.5,
    }, -- Right
    {
        Distance = Vector(-768, 768, 0),
        Influence = 0.5,
    }, -- Left

}

local traces4 = {
    {
        Distance = Vector(0, 0, 1024),
        Influence = 0.5,
    }, -- Up
    {
        Distance = Vector(0, 768, 768),
        Influence = 1,
    }, -- Up Forward
    {
        Distance = Vector(0, -768, 768),
        Influence = 1,
    }, -- Up Back
    {
        Distance = Vector(0, 768, 0),
        Influence = 0.5,
    }, -- Forward
    {
        Distance = Vector(0, -1024, 0),
        Influence = 0.5,
    }, -- Back
    {
        Distance = Vector(768, 768, 0),
        Influence = 0.5,
    }, -- Right
    {
        Distance = Vector(-768, 768, 0),
        Influence = 0.5,
    }, -- Left
    {
        Distance = Vector(-768, -768, 0),
        Influence = 0.5,
    }, -- Left Back
    {
        Distance = Vector(768, -768, 0),
        Influence = 0.5,
    }, -- Right Back

}

-- Halve the magnification because
-- real people have like 180 degrees of vision AND
-- it's too high to be useful and
-- games like to make it shorter why shouldn't we
function UC_HalfScope( num )
    local result = num
    result = num - 1
    result = result / 2
    result = result + 1

    -- print( num .. "x turned into " .. result .. "x" )
    return result
end

local tracebase = {
    start = 0,
    endpos = 0,
    filter = NULL,
}

local choice = {
    [1] = traces1,
    [2] = traces2,
    [3] = traces3,
    [4] = traces4,
}

if game.SinglePlayer() and SERVER then
    util.AddNetworkString("ArcCW_UC_InnyOuty")
elseif game.SinglePlayer() and CLIENT then
    net.Receive("ArcCW_UC_InnyOuty", function(len, ply)
        local ent = net.ReadEntity()
        if IsValid(ent) then
            ArcCW.UC.InnyOuty(ent)
        end
    end)
end

ArcCW.UC.InnyOuty = function(wep)
    if wep:GetBuff_Override("UC_NoInnyOuty") then return end

    local dist = wep:GetBuff_Hook("Hook_GetDistantShootSound")
    if dist == false then return end

    if game.SinglePlayer() and SERVER then
        net.Start("ArcCW_UC_InnyOuty")
        net.WriteEntity(wep)
        net.Send(Entity(1))
    elseif CLIENT and (wep:GetOwner() == LocalPlayer() or game.SinglePlayer()) then
        if wep.DistantShootSoundOutdoors and wep.DistantShootSoundIndoors then
            local dso = wep.DistantShootSoundOutdoors
            local dsi = wep.DistantShootSoundIndoors
            local dsov = wep.DistantShootSoundOutdoorsVolume
            local dsiv = wep.DistantShootSoundIndoorsVolume

            if wep:GetBuff_Override("Silencer") then
                if wep:GetBuff("PhysBulletMuzzleVelocity") < ArcCW.UC.SubsonicThreshold then--if wep:CheckFlags(nil, {"powder_subsonic"}) or wep:CheckFlags(nil, {"cal_subsonic"}) then
                    return -- no tail
                else
                    dso = wep.DistantShootSoundOutdoorsSilenced
                    dsi = wep.DistantShootSoundIndoorsSilenced
                end
            end

            dso = wep:GetBuff_Hook("Hook_GetDistantShootSoundOutdoors", dso)
            dsi = wep:GetBuff_Hook("Hook_GetDistantShootSoundIndoors", dsi)
            local vol = 0
            local wo = wep:GetOwner()
            if !IsValid(wo) then return end
            local wop = wo:EyePos()
            local woa = Angle(0, wo:EyeAngles().y, 0)
            local t_influ = 0
            local option = GetConVar("arccw_uc_disttrace"):GetInt()
            local fps = 1 / RealFrameTime()

            if wep:GetOwner() ~= LocalPlayer() then
                option = choice[1]
            elseif option > 0 then
                option = choice[option]
            else
                if fps > 100 then
                    option = 4
                elseif fps > 40 then
                    option = 3
                else
                    option = 2
                end

                if GetConVar("developer"):GetInt() > 1 then
                    print("perf" .. option)
                end

                option = choice[option]
            end

            for _, tin in ipairs(option) do
                tracebase.start = wop
                offset = Vector()
                --if !tin.AngleUp then--_ != 1 then
                offset = offset + (tin.Distance.x * woa:Right())
                offset = offset + (tin.Distance.y * woa:Forward())
                offset = offset + (tin.Distance.z * woa:Up())
                --end
                tracebase.endpos = wop + offset
                tracebase.filter = wo
                t_influ = t_influ + (tin.Influence or 1)
                local result = util.TraceLine(tracebase)
                if GetConVar("developer"):GetInt() > 2 then
                    debugoverlay.Line(wop - (vector_up * 4), result.HitPos - (vector_up * 4), 1, Color((_ / 4) * 255, 0, (1 - (_ / 4)) * 255))
                    debugoverlay.Text(result.HitPos - (vector_up * 4), math.Round((result.HitSky and 1 or result.Fraction) * 100) .. "%", 1)
                end
                vol = vol + (result.HitSky and 1 or result.Fraction) * tin.Influence
            end

            vol = vol / t_influ

            if GetConVar("developer"):GetInt() > 1 then
                print(vol)
            end

            if dso then
                for _, snd in ipairs(dso) do
                    wep:StopSound(snd)
                end

                if math.max(0.15, vol) ~= 0.15 then
                    wep:EmitSound(dso[math.random(1, #dso)], 75, 100, vol * dsov or 1, CHAN_VOICE2)
                end
            end

            if dsi then
                for _, snd in ipairs(dsi) do
                    wep:StopSound(snd)
                end

                if math.min(0.85, vol) ~= 0.85 then
                    wep:EmitSound(dsi[math.random(1, #dsi)], 75, 100, (1 - vol) * dsiv or 1, CHAN_STREAM)
                end
            end
        end
    end
end

ArcCW.UC.CustColorUpdateInterval = 5

if CLIENT then
    CreateClientConVar("arccw_uc_disttrace", 0, true, false, "Mode for traces", 0, 4)
    CreateClientConVar("arccw_uc_custcolor_enable", 255, true, true, "1 for custom colors, 0 for playermodel color", 0, 1)
    CreateClientConVar("arccw_uc_custcolor_1_r", 255, true, true, "Main color R", 0, 255)
    CreateClientConVar("arccw_uc_custcolor_1_g", 255, true, true, "Main color G", 0, 255)
    CreateClientConVar("arccw_uc_custcolor_1_b", 255, true, true, "Main color B", 0, 255)
    CreateClientConVar("arccw_uc_custcolor_2_r", 255, true, true, "Second color R", 0, 255)
    CreateClientConVar("arccw_uc_custcolor_2_g", 255, true, true, "Second color G", 0, 255)
    CreateClientConVar("arccw_uc_custcolor_2_b", 255, true, true, "Second color B", 0, 255)

    -- CreateClientConVar("arccw_uc_menu", 1, true, false, "Cool menu!", 0, 1)

    -- These convars are already known serverside; this only serves to tell the server it's time to update our colors to other clients.
    if not game.SinglePlayer() then
        local t = "ArcCW_UC_UpdateColor"
        local custcolorcallback = function(cvar, old, new)
            if timer.Exists(t) then
                timer.Adjust(t, ArcCW.UC.CustColorUpdateInterval)
            else
                timer.Create(t, ArcCW.UC.CustColorUpdateInterval, 1, function()
                    net.Start("ArcCW_UC_CustColor")
                    net.SendToServer()
                end)
            end
        end
        cvars.AddChangeCallback("arccw_uc_custcolor_enable", custcolorcallback)
        cvars.AddChangeCallback("arccw_uc_custcolor_1_r", custcolorcallback)
        cvars.AddChangeCallback("arccw_uc_custcolor_1_g", custcolorcallback)
        cvars.AddChangeCallback("arccw_uc_custcolor_1_b", custcolorcallback)
        cvars.AddChangeCallback("arccw_uc_custcolor_2_r", custcolorcallback)
        cvars.AddChangeCallback("arccw_uc_custcolor_2_g", custcolorcallback)
        cvars.AddChangeCallback("arccw_uc_custcolor_2_b", custcolorcallback)
    end

    matproxy.Add({
        name = "UC_ShellColor",
        init = function(self, mat, values)
            --self.envMin = values.min
            --self.envMax = values.max
            self.col = Vector()
        end,
        bind = function(self, mat, ent)
            local swent = ent

            if IsValid(swent) then
                local herg = color_white
                local r = 255
                local g = 255
                local b = 255

                if swent:IsWeapon() and swent.ArcCW then
                    herg = swent:GetBuff_Override("Override_UC_ShellColor") or swent.UC_ShellColor or herg
                    r = herg.r or 255
                    g = herg.g or 255
                    b = herg.b or 255
                elseif IsValid(swent:GetOwner()) and IsValid(swent:GetOwner():GetActiveWeapon()) and swent:GetOwner():GetActiveWeapon().ArcCW then
                    swent = swent:GetOwner():GetActiveWeapon()
                    herg = swent:GetBuff_Override("Override_UC_ShellColor") or swent.UC_ShellColor or herg
                    r = herg.r or 255
                    g = herg.g or 255
                    b = herg.b or 255
                elseif swent then
                    herg = swent.UC_ShellColor or herg
                    r = herg.r or 255
                    g = herg.g or 255
                    b = herg.b or 255
                end

                self.col.x = r / 255
                self.col.y = g / 255
                self.col.z = b / 255
                mat:SetVector("$color2", self.col)
            end
        end
    })

    local function proxystuff(digit)
        return {
            name = "UC_Weapon_Color" .. digit,
            init = function(self, mat, values)
                self.ResultTo = values.resultvar
            end,
            bind = function(self, mat, ent)
                local owner = ent:GetOwner()

                if IsValid(ent) and ent.ArcCW and IsValid(owner) and owner:IsPlayer() then
                    local net_color = owner["UC_CustColor" .. digit]
                    if (owner == LocalPlayer() and owner:GetInfoNum("arccw_uc_custcolor_enable", 0) == 1) or (owner.UC_CustEnable and net_color) then -- ply.UC_CustEnable
                        if net_color then
                            mat:SetVector(self.ResultTo, Vector(net_color.r, net_color.g, net_color.b) / 230)
                        else
                            mat:SetVector(self.ResultTo, Vector(owner:GetInfoNum("arccw_uc_custcolor_" .. digit .. "_r", 255), owner:GetInfoNum("arccw_uc_custcolor_" .. digit .. "_g", 255), owner:GetInfoNum("arccw_uc_custcolor_" .. digit .. "_b", 255)) / 230)
                        end
                    else
                        mat:SetVector(self.ResultTo, owner:GetPlayerColor() * 0.9)
                    end
                    -- else
                    -- mat:SetVector(self.ResultTo, Vector(0.8, 0.8, 0.8))
                end
            end
        }
    end

    matproxy.Add(proxystuff(1))
    matproxy.Add(proxystuff(2))

    net.Receive("ArcCW_UC_CustColor", function()
        local ply = net.ReadEntity()
        ply.UC_CustEnable = net.ReadBool()
        if ply.UC_CustEnable then
            ply.UC_Weapon_Color1 = net.ReadColor(false)
            ply.UC_Weapon_Color2 = net.ReadColor(false)
        end
    end)

    local function menu_uc(panel)
        panel:AddControl("header", {
            description = "This menu contains options for configuring Urban Coalition weapons and items."
        })

        local combobox = panel:ComboBox("Trace count", "arccw_uc_disttrace") --vgui.Create( "DComboBox", panel )
        combobox:SetSortItems(false)
        combobox:AddChoice("Automatic", 0)
        combobox:AddChoice("1-way (performance, not recommended)", 1)
        combobox:AddChoice("3-way (default)", 2)
        combobox:AddChoice("6-way (expensive)", 3)
        combobox:AddChoice("9-way (absurd)", 4)
        panel:ControlHelp("How accurate should the weapon tail calculation be for when used outdoors or indoors?")

        panel:AddControl("header", {
            description = "________________"
        })

        -- idk write better   Write something about list of guns that supports it or something
        panel:AddControl("checkbox", {
            label = "Use defined colors for customisation",
            command = "arccw_uc_custcolor_enable"
        })
        panel:ControlHelp("will use playermodel color if off")
    
        panel:AddControl("checkbox", {
            label = "Infinite Underbarrel Ammo",
            command = "arccw_uc_infiniteubwammo"
        })
        panel:ControlHelp("Infinite ammo for Urban Coalition underbarrel weapons.")
    
        panel:AddControl("slider", {
            label = "AP Damage Mult",
            command = "arccw_uc_apobjmult",
            min = 1,
            max = 10,
        })
        panel:ControlHelp("Multiplier for damage dealt to objects while using 'Armor-piercing' rounds.")

        panel:AddControl("color", {
            label = "Primary Color",
            red = "arccw_uc_custcolor_1_r",
            green = "arccw_uc_custcolor_1_g",
            blue = "arccw_uc_custcolor_1_b"
        })

        panel:AddControl("color", {
            label = "Secondary Color",
            red = "arccw_uc_custcolor_2_r",
            green = "arccw_uc_custcolor_2_g",
            blue = "arccw_uc_custcolor_2_b"
        })

        panel:AddControl("header", {
            description = "________________"
        })
        panel:AddControl("header", {
            description = "Asset precaching"
        })

        panel:AddControl("button", {
            label = "Clientside Asset Cache",
            command = "arccw_uc_cache_client"
        })
        panel:ControlHelp("Begin a clientside caching of all Urban Coalition assets.")
        panel:AddControl("slider", {
            label = "Attempts per second",
            command = "arccw_uc_cache_client_persecond",
            min = 10,
            max = 60,
        })

        panel:AddControl("button", {
            label = "Serverside Asset Cache",
            command = "arccw_uc_cache_server"
        })
        panel:ControlHelp("Command the server to do a caching of all Urban Coalition assets.")
    end

    hook.Add("PopulateToolMenu", "ARCCW_UC_MenuOptions", function()
        spawnmenu.AddToolMenuOption("Options", "ArcCW", "ArcCW_UC", "Urban Coalition", "", "", menu_uc)
    end)

elseif SERVER then

    util.AddNetworkString("ArcCW_UC_CustColor")

    net.Receive("ArcCW_UC_CustColor", function(len, ply)
        if (ply.UC_LastColorUpdate or 0) + ArcCW.UC.CustColorUpdateInterval > CurTime() then return end
        ply.UC_LastColorUpdate = CurTime()
        net.Start("ArcCW_UC_CustColor")
            local enabled = tobool(ply:GetInfoNum("arccw_uc_custcolor_enable", 0))
            net.WriteBool(enabled)
            if enabled then
                net.WriteColor(Color(ply:GetInfoNum("arccw_uc_custcolor_1_r", 255), ply:GetInfoNum("arccw_uc_custcolor_1_g", 255), ply:GetInfoNum("arccw_uc_custcolor_1_b", 255)), false)
                net.WriteColor(Color(ply:GetInfoNum("arccw_uc_custcolor_2_r", 255), ply:GetInfoNum("arccw_uc_custcolor_2_g", 255), ply:GetInfoNum("arccw_uc_custcolor_2_b", 255)), false)
            end
        net.SendOmit(ply)
    end)
end

hook.Add("ArcCW_InitBulletProfiles", "UrbanCoalition", function()
    ArcCW:AddBulletProfile("uc_tracer_g", {
        color = Color(100, 255, 100),
        size = 1.5,
        size_min = 2,
        tail_length = 0.05,
    })

    ArcCW:AddBulletProfile("uc_tracer_r", {
        color = Color(255, 100, 100),
        size = 1.5,
        size_min = 2,
        tail_length = 0.05,
    })

    ArcCW:AddBulletProfile("uc_tracer_w", {
        color = Color(255, 255, 255),
        size = 1.5,
        size_min = 2,
        tail_length = 0.05,
    })

    ArcCW:AddBulletProfile("uc_plinking", {
        color = Color(255, 255, 255, 200),
        size = 0.5,
        size_min = 0.25,
        tail_length = 0.03,
    })

    ArcCW:AddBulletProfile("uc_api", {
        color = Color(255, 175, 100),
        size = 1,
        size_min = 1,
        tail_length = 0.05,
    })

    ArcCW:AddBulletProfile("uc_dragon", {
        color = Color(255, 220, 175),
        sprite_head = false,
        sprite_tail = false,

        DrawBullet = function(bulinfo, bullet)

            if CurTime() - bullet.StartTime <= 0.05 then return end
            local a = bullet.PosStart and Lerp((bullet.PosStart - bullet.Pos):LengthSqr() / 40000, 0, 1) or 0
            if a == 0 then return end

            -- Do not try to keep emitting while time is frozen (singleplayer pause)
            if bullet.LastTick and bullet.LastTick == CurTime() then return end
            bullet.LastTick = CurTime()

            local emitter = ParticleEmitter(bullet.Pos)
            if not IsValid(emitter) then return end

            local vec = bullet.Vel * engine.TickInterval()
            local count = math.ceil(vec:Length() / 12)

            local count2 = math.ceil(math.sqrt(count) / 3 * a)
            for j = 1, count2 do
                local p = bullet.Pos - vec * (j / count2) + VectorRand() * math.Clamp((CurTime() - bullet.StartTime) / 0.5, 0, 8)

                local spark = emitter:Add("effects/spark", p)
                spark:SetVelocity(VectorRand() * 100 + vec * 0.75)
                spark:SetGravity(Vector(math.Rand(-10, 10), math.Rand(-10, 10), -75))
                spark:SetDieTime(math.Rand(0.15, 0.2))
                spark:SetStartAlpha(255)
                spark:SetEndAlpha(0)
                spark:SetStartSize(math.Rand(3, 6))
                spark:SetEndSize(0)
                spark:SetRoll(math.Rand(-180, 180))
                spark:SetRollDelta(math.Rand(-0.2, 0.2))
                spark:SetColor(255, 220, 175)
                spark:SetAirResistance(50)
                spark:SetLighting(false)
                spark:SetCollide(true)
                spark:SetBounce(0.8)
            end

            emitter:Finish()
            bullet.RenderTick = (bullet.RenderTick or 0) + 1
        end,

        PhysBulletHit = function(bulinfo, bullet, tr)
            if not CLIENT then return end

            local emitter = ParticleEmitter(bullet.Pos)
            if not IsValid(emitter) then return end

            local dir = bullet.Vel:GetNormalized()
            local reflect = dir:Dot(tr.HitNormal) * 2 * tr.HitNormal  - dir
            local vec = (reflect + VectorRand() * 0.1):GetNormalized()

            for i = 1, math.random(16, 32) do
                local ember = emitter:Add("effects/spark", tr.HitPos + VectorRand() * 4)
                ember:SetVelocity(VectorRand() * 100 - vec * math.Rand(100, 500) + Vector(0, 0, math.Rand(75, 150)))
                ember:SetGravity(Vector(0, 0, -600))
                ember:SetDieTime(math.Rand(0.6, 1.2))
                ember:SetStartAlpha(255)
                ember:SetEndAlpha(0)
                ember:SetStartSize(math.Rand(3, 6))
                ember:SetEndSize(0)
                ember:SetRoll(math.Rand(-180, 180))
                ember:SetRollDelta(math.Rand(-0.2, 0.2))
                ember:SetColor(255, 220, 175)
                ember:SetAirResistance(80)
                ember:SetLighting(false)
                ember:SetCollide(true)
                ember:SetBounce(0.5)
            end

            emitter:Finish()
        end
    })
end)

local paths = {
    "sound/weapons/arccw/",
    "sound/weapons/arccw_ud/",
    "sound/weapons/arccw_ur/",
    "sound/weapons/arccw_uo/",
    "sound/weapons/arccw_uc_ar57/",
    "sound/weapons/arccw_uc_galil/",
    "sound/weapons/arccw_uc_lynx/",
    "sound/weapons/arccw_uc_usp/",
    "sound/arccw_uc/",
    "sound/weapons/arccw/",
    "models/weapons/arccw/",
    "models/items/arccw/",

    "models/uc/",
    "sound/uc/",
}

if CLIENT then
    local procedure = {
        ["sound"] = function(asset)
            asset = string.Replace( asset, "sound\\", "" )
            asset = string.Replace( asset, "sound/", "" )
            if !IsValid(LocalPlayer()) then
                print("LocalPlayer is NULL! You're too early!!")
            else
                LocalPlayer():EmitSound( asset, 75, 100, 0.01, CHAN_WEAPON )
            end
        end,
        ["model"] = function(asset)
            local cmdl = ClientsideModel( asset )
            cmdl:Remove()
        end,
    }

    local cooltable = {}
    function fukc()
        local function recurse( path, dir )
            local files, directories = file.Find( path .. (dir and (dir .. "/") or "") .. "*", "GAME" )
            for i, fie in ipairs(files) do
                local fiex = string.GetExtensionFromFilename(fie)
                if fiex == "ogg" or fiex == "wav" or fiex == "mp3" or fiex == "mdl" then
                    table.insert( cooltable, path .. (dir and (dir .. "/") or "") .. fie )
                end
            end
            for i, dir in ipairs(directories) do
                recurse( path, dir )
            end
        end

        cooltable = {}

        UC_Precache = true
        UC_PrecachePer = 0
        UC_PrecachePeh = 0
        UC_PrecacheCur = "..."
        for i, path in ipairs(paths) do
            recurse( path )
        end

        -- PrintTable(cooltable)

        for i, fie in ipairs(cooltable) do
            timer.Simple(i / GetConVar("arccw_uc_cache_client_persecond"):GetFloat(), function()
                UC_PrecachePer = i
                UC_PrecachePeh = #cooltable
                UC_PrecacheCur = fie
                local fiex = string.GetExtensionFromFilename(fie)
                if fiex == "ogg" or fiex == "wav" or fiex == "mp3" then
                    procedure["sound"](fie)
                elseif fiex == "mdl" then
                    procedure["model"](fie)
                elseif fiex == "phy" or fiex == "vvd" or fiex == "vtx" then
                    -- ignore these
                else
                    print("Unknown what to do with " .. fie .. "!")
                end
                if i == #cooltable then UC_Precache = false end
            end)
        end
    end

    hook.Add("HUDPaint", "UC_Precache", function()
        if UC_Precache then
            local i_1 = UC_PrecachePer or 1
            local i_2 = UC_PrecachePeh or 1
            local i_per = i_1 / i_2
            local i_cur = UC_PrecacheCur or "..."
            surface.SetDrawColor(255, 255, 255, 255)
            local ss = ScreenScale(1) * GetConVar("arccw_hud_size"):GetFloat()
            local bx, by = (ss * 150), (ss * 10)

            -- Bar
            surface.DrawOutlinedRect( ( ScrW() / 2 ) - ( bx / 2 ), ( ScrH() * 0.7 ) - ( by / 2 ), bx, by, 2 )
            surface.DrawRect( ( ScrW() / 2 ) - ( bx / 2 ), ( ScrH() * 0.7 ) - ( by / 2 ), bx * i_per, by )

            -- Top left
            draw.SimpleText( "CACHING:", "ArcCW_12", ( ScrW() / 2 ) - ( bx / 2 ), ( ScrH() * 0.7 ) - ( by / 2 ) - (ss*1), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM )

            -- Bottom right
            draw.SimpleText( math.Round(i_per * 100) .. "%", "ArcCW_12", ( ScrW() / 2 ) + ( bx / 2 ), ( ScrH() * 0.7 ) + ( by / 2 ) - (ss*1), color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_TOP )

            -- Top right
            draw.SimpleText( i_1 .. "/" .. i_2, "ArcCW_8", ( ScrW() / 2 ) + ( bx / 2 ), ( ScrH() * 0.7 ) - ( by / 2 ) - (ss*1), color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_BOTTOM )

            -- Bottom left
            draw.SimpleText( i_cur, "ArcCW_6", ( ScrW() / 2 ) - ( bx / 2 ), ( ScrH() * 0.7 ) + ( by / 2 ) + (ss*1), color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP )
        end
    end)
    CreateClientConVar("arccw_uc_cache_client_persecond", 60, true, false)
    concommand.Add( "arccw_uc_cache_client", function()
        fukc()
    end)
end

if SERVER then
    local procedure = {
        ["sound"] = function(asset)
            local cmdl = ents.Create( "prop_dynamic" )
            asset = string.Replace( asset, "sound\\", "" )
            asset = string.Replace( asset, "sound/", "" )
            cmdl:EmitSound( asset, 75, 100, 0.4, CHAN_WEAPON )
            cmdl:Remove()
        end,
        ["model"] = function(asset)
            local cmdl = ents.Create( "prop_dynamic" )
            -- print(cmdl)
            cmdl:SetModel(asset)
            cmdl:Spawn()
            cmdl:Remove()
        end,
    }
    local cooltable = {}
    function fukc_server()
        local function recurse( path, dir )
            local files, directories = file.Find( path .. (dir and (dir .. "/") or "") .. "*", "GAME" )
            for i, fie in ipairs(files) do
                local fiex = string.GetExtensionFromFilename(fie)
                if fiex == "ogg" or fiex == "wav" or fiex == "mp3" or fiex == "mdl" then
                    table.insert( cooltable, path .. (dir and (dir .. "/") or "") .. fie )
                end
            end
            for i, dir in ipairs(directories) do
                recurse( path, dir )
            end
        end

        cooltable = {}

        UC_Precache = true
        UC_PrecachePer = 0
        UC_PrecachePeh = 0
        UC_PrecacheCur = "..."
        for i, path in ipairs(paths) do
            recurse( path )
        end

        -- PrintTable(cooltable)

        for i, fie in ipairs(cooltable) do
            timer.Simple(i / (1 / 20), function()
                -- print(fie)
                UC_PrecachePer = i
                UC_PrecachePeh = #cooltable
                UC_PrecacheCur = fie
                local fiex = string.GetExtensionFromFilename(fie)
                if fiex == "ogg" or fiex == "wav" or fiex == "mp3" then
                    procedure["sound"](fie)
                elseif fiex == "mdl" then
                    procedure["model"](fie)
                elseif fiex == "phy" or fiex == "vvd" or fiex == "vtx" then
                    -- ignore these
                else
                    print("Unknown what to do with " .. fie .. "!")
                end
                if i == #cooltable then UC_Precache = false end
            end)
        end
    end

    concommand.Add( "arccw_uc_cache_server", function()
        print("hi")
        fukc_server()
    end, nil, "command server to cache")
end
--lua/arccw/shared/attachments/deagle_gold.lua:
return gluapack()()
--lua/arccw/shared/attachments/deagle_gold.lua:
att.PrintName = "Gold Eagle"
att.Icon = Material("entities/acwatt_deagle_gold.png", "smooth")
att.Description = "Call of Duty 4's golden Desert Eagle."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "skin_mw2deagle"

att.Free = true

att.ActivateElements = {"skin_gold"}
--lua/arccw/shared/attachments/mw2_wepcamo_blackout.lua:
att.PrintName = "Blackout"
att.Icon = Material("entities/mw2_wepcamo_blackout.png", "smooth"
)
att.Description = "Pure black paint finish.\nUnofficial."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Slot = "mw2_wepcamo"
att.Free = true

att.ActivateElements = {"wepcamo-blackout"}

att.SortOrder = 10 *-1
--lua/arccw/shared/attachments/mw2_wepcamo_redtiger.lua:
att.PrintName = "Red Tiger"
att.Icon = Material("entities/mw2_wepcamo_redtiger.png", "smooth"
)
att.Description = "Red tiger stripe camouflage finish."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Slot = "mw2_wepcamo"
att.Free = true

att.ActivateElements = {"wepcamo-redtiger"}

att.SortOrder = 7 *-1
--lua/arccw/shared/attachments/mw2_wepedit_ak47_cod.lua:
return gluapack()()
--lua/arccw/shared/attachments/optic_mw2_mars.lua:
return gluapack()()
--lua/arccw/shared/attachments/optic_mw2_thermal.lua:
att.PrintName = "Thermal (FLIR)"
att.Icon = Material("entities/acwatt_optic_mw2_thermal.png", "smooth")
att.Description = "thermal scope"

att.SortOrder = 50

att.Desc_Pros = {
    "autostat.holosight",
    "autostat.zoom",
    "autostat.thermal"
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = "optic"

att.Model =				"models/weapons/arccw/fesiugmw2/atts/scopes/thermal_base.mdl"
att.HolosightPiece =	"models/weapons/arccw/fesiugmw2/atts/scopes/thermal_lens.mdl"
att.ModelOffset = Vector(0, 0, -0.2)

att.AdditionalSights = {
    {
        Pos = Vector(0, 6.5, -0.8),
        Ang = Angle(0, 0, 0),
        ViewModelFOV = 65 / 1.9,
        Magnification = 1.9,
        Thermal = true,
        IgnoreExtra = true,
    }
}

att.ScopeGlint = true

att.Holosight = true
att.HolosightReticle = Material("hud/scopes/mw2_thermal.png", "mips smooth")
att.HolosightNoFlare = true
att.HolosightSize = 16
att.HolosightBone = "holosight"

att.HolosightMagnification = 2.1
att.HolosightBlackbox = true

att.HolosightConstDist = 42

att.Mult_SightTime = 1.2
att.Mult_SightedSpeedMult = 0.85
-- att.Mult_SpeedMult = 0.95

att.AddSuffix = " Thermal"
--lua/arccw/shared/attachments/uc_40mm_dp.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_40mm_flash.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_40mm_hornetnest.lua:
att.PrintName = "40mm 'Hornet's Nest' Grenades"
att.AbbrevName = "Hornet's Nest"
att.Icon = Material("entities/att/arccw_uc_40mm_generic.png", "mips smooth")
att.Description = "Aftermarket grenades that fit 16 .22 LR cartridges.\nMade to circumvent legal restrictions, these grenades are less lethal but more accurate than an equivalent 40mm buckshot round."
att.Desc_Pros = {
    "uc.40mm.hornet"
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_40mm"

att.AutoStats = true

att.Override_ShootEntity = false
att.Override_Num = 16

att.Override_Damage = 12 * 16
att.Override_DamageMin = 5 * 16

att.Override_Range = 60
att.Override_RangeMin = 15
att.Override_HullSize = 0.1

att.Override_AccuracyMOA = 25
att.Mult_Recoil = 0.4

-- att.Mult_AccuracyMOA = 1

att.ActivateElements = {"40mm_hornetnest"}

att.Hook_GetShootSound = function(wep, fsound)
    if fsound == wep.ShootSound then return ")^/arccw_uc/common/gl_fire_hornet.ogg" end
end

att.Hook_GetDistantShootSound = function(wep, distancesound)
    if distancesound == wep.DistantShootSound then
        return ")^/arccw_uc/common/gl_fire_hornet_dist.ogg" end
end

if engine.ActiveGamemode() == "urbanstrife" then
    att.PenetrationAmmoType = "plinking"
end
--lua/arccw/shared/attachments/uc_40mm_hv.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ammo_ap.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ammo_jhp.lua:
att.PrintName = "\"JHP\" Jacketed Hollow-point Rounds"
att.AbbrevName = "\"JHP\" Jacketed Hollow-point"

att.SortOrder = 4
att.Icon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth")
att.Description = "A type of bullet with a hollow tip that expands on impact, causing a more lethal hit without penetrating further than necessary.\nFor use in environments where over-penetration could cause collateral damage."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_ammo"

att.AutoStats = true

att.Mult_RangeMin = 0.5
att.Mult_Penetration = 0.25
att.Mult_Damage = 1.17

att.Mult_DamageMin = 0.85

att.Hook_Compatible = function(wep)
    if wep:GetIsShotgun() then
        return false
    end
end
--lua/arccw/shared/attachments/uc_charm_sgmanual.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_fg_civvy.lua:
att.PrintName = "Competition Internals"

att.Icon = Material("entities/att/arccw_uc_fg_civvy.png", "smooth mips")
att.Description = "High quality, precision manufactured aftermarket parts that improve weapon performance. Because of the parts' civilian origin, the fire control group doesn't support automatic fire."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.semionly"
}
att.Desc_Neutrals = {
}
att.Slot = "uc_fg"
att.AutoStats = true

att.Hook_Compatible = function(wep)
    if wep:GetIsShotgun() or wep:GetBuff_Override("Override_ManualAction", wep.ManualAction) then
        return false
    end
    for i, v in pairs(wep.Firemodes) do
        if !v then continue end
        if v.Mode and v.Override_ManualAction then
            return false
        end
    end
end

att.Override_Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}
att.Override_Firemodes_Priority = 10

att.Mult_Range = 1.25
att.Mult_AccuracyMOA = 0.75
att.Mult_RPM = 0.75
att.Mult_MalfunctionMean = 1.5

att.AttachSound = "arccw_uc/common/gunsmith/internal_modification.ogg"
--lua/arccw/shared/attachments/uc_fg_preciserifling.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_fg_sg_rifled.lua:
att.PrintName = "Rifled Barrel"

att.Icon = Material("entities/att/arccw_uc_precisionrifling.png", "mips smooth")
att.Description = "Specially made lightweight barrel designed for slug rounds. Improves precision and time to aim noticably."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
    "uc.reqslug"
}
att.Slot = {"uc_fg","uc_fg_singleshot"}
att.AutoStats = true

att.Hook_Compatible = function(wep)
    if !wep:GetIsShotgun() then -- or wep:GetBuff("Num") > 1
        return false
    end
end

att.Mult_AccuracyMOA = 0.5
att.Mult_SightTime = 0.75
att.Mult_HipDispersion = 1.25

att.RequireFlags = {"uc_slug"}
att.GivesFlags = {"uc_fg_sg_rifled"}
att.ExcludeFlags = {"uc_choke_rifled"}

att.AttachSound = "arccw_uc/common/gunsmith/internal_modification.ogg"
--lua/arccw/shared/attachments/uc_grip_bcmvfg.lua:
att.PrintName = "BCMGUNFIGHTER Vertical Grip Mod 3"
att.AbbrevName = "BCM Stubby Foregrip"
att.Icon = Material("entities/att/acwatt_uc_grip_bcmvfg.png", "mips smooth")
att.Description = "A short grip providing a more natural holding position, making the weapon easier to use while moving.\n"

att.SortOrder = 1300

att.AutoStats = true
att.Slot = "foregrip"

att.LHIK = true

att.ModelOffset = Vector(0, 0, -0.14)
att.Model = "models/weapons/arccw/atts/ud_foregrip_mod3.mdl"
-- att.ModelSkin  = 1

att.Mult_MoveDispersion = 0.75

att.Mult_SightedSpeedMult = 0.9

att.Override_HoldtypeActive = "smg"
att.Override_HoldtypeActive_Priority = 2
--lua/arccw/shared/attachments/uc_muzzle_brake2.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_muzzle_brake2.lua:
att.PrintName = "Helix Muzzle Brake" -- fictional
att.AbbrevName = "Helix Brake"
att.Icon = Material("entities/att/acwatt_uc_muzzle_brake2.png", "mips smooth")
att.Description = "Redirects propellant gases to reduce weapon recoil.\nSlightly reduces recoil."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.AutoStats = true
att.AutoStats = true
att.Slot = {"muzzle"}

att.SortOrder = 100

att.Model = "models/weapons/arccw/atts/uc_muzzle3.mdl"
att.ModelOffset = Vector(2.3, 0, 0)
att.ModelScale = Vector(1.0, 1.0, 1.0)
att.OffsetAng = Angle(0, 0, 0)

att.IsMuzzleDevice = true

att.Mult_Recoil = 0.9
att.Mult_RecoilSide = 0.85

att.Mult_ShootSpeedMult = 0.9
att.Mult_Sway = 1.15

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"

--lua/arccw/shared/attachments/uc_muzzle_supp_lighthouse.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_muzzle_supp_pbs1.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_muzzle_supp_ssq.lua:
att.PrintName = "US G.I. 45 Suppressor"
att.AbbrevName = "G.I. Suppressor"
att.Icon = Material("entities/att/acwatt_uc_muzzle_supp_ssq.png", "mips smooth")
att.Description = "Traps propellant gas from the muzzle, reducing visual and audible report.\nEnhances ballistics performance significantly, but its low maximum pressure makes it incompatible with supersonic ammunition."
att.Desc_Neutrals = {"uc.exclusive.subsonic", "uc.subsonic"}

att.AutoStats = true
att.Slot = {"muzzle"}

att.SortOrder = 150

att.Model = "models/weapons/arccw/atts/ud_silencer_ssq.mdl"
att.ModelOffset = Vector(0.5, 0, 0.0)
att.ModelScale = Vector(0.8, 0.8, 0.8)
att.OffsetAng = Angle(0, 0, 0)

att.Silencer = true
att.Override_MuzzleEffect = "muzzleflash_suppressed"
att.IsMuzzleDevice = true

att.Mult_ShootPitch = 1.1
att.Mult_ShootVol = 0.75
att.Mult_Range = 1.25

att.Add_BarrelLength = 5
att.Mult_SightTime = 1.1
att.Mult_Sway = 1.15

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"

-- att.Hook_Compatible = function(wep,data)
--     local flags = wep:GetWeaponFlags()
--     if !(table.HasValue(flags,"cal_subsonic") or table.HasValue(flags,"powder_subsonic")) then
--         return false
--     end
-- end

att.Hook_Compatible = function(wep,data)
    if !ArcCW.UC.PistolAmmoTypes[wep:GetBuff_Override("Override_Ammo", wep.Primary.Ammo)] or wep:GetBuff("PhysBulletMuzzleVelocity") > ArcCW.UC.SubsonicThreshold then
        return false
    end
end

att.Hook_GetDistantShootSound = function(wep, distancesound)
    return false
end

att.HideIfBlocked = true
--lua/arccw/shared/attachments/uc_optic_eotech552.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_optic_trijicon_tars.lua:
att.PrintName = "Trijicon Tactical Advanced Riflescope (3-8x)"
att.AbbrevName = "TARS (3-8x)"
att.Icon = Material("entities/att/acwatt_uc_optic_trijicon_tars.png", "mips smooth")
att.Description = "Variable power scope, adjustable for a very wide range of magnifications."

att.SortOrder = 8

att.Desc_Pros = {
    "autostat.holosight",
    "autostat.zoom"
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"optic"}

att.Model = "models/weapons/arccw/atts/uc_trijicon_tars.mdl"
att.ModelOffset = Vector(0, 0, 0.1)
att.ModelScale = Vector(1.05,1.05,1.05)

att.AdditionalSights = {
    {
        Pos = Vector(0, 10.6, -1.51),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
		ViewModelFOV = 25,
        ScrollFunc = ArcCW.SCROLL_ZOOM,
        ScopeMagnification = UC_HalfScope( 3 ),
        ScopeMagnificationMin = UC_HalfScope( 3 ),
        ScopeMagnificationMax = UC_HalfScope( 8 ),
        HolosightData = {
            Holosight = true,
            HolosightReticle = Material("hud/scopes/uc_tars_reticle.png", "mips smooth"),
            HolosightNoFlare = true,
            HolosightSize = 18,
            HolosightPiece = "models/weapons/arccw/atts/uc_trijicon_tars_hsp.mdl",
            HolosightBlackbox = true,
            HolosightMagnification = UC_HalfScope( 3 ),
            HolosightMagnificationMin = UC_HalfScope( 3 ),
            HolosightMagnificationMax = UC_HalfScope( 8 ),
            Colorable = true,
            SpecialScopeFunction = function(screen)
                render.PushRenderTarget(screen)

                DrawBloom(0,0.3,5,5,3,0.5,1,1,1)
                DrawSharpen(1,1.65)
                DrawMotionBlur(0.45,1,1/45)

                render.PopRenderTarget()
            end,
        },
    }
}

-- att.Holosight = true
-- att.HolosightReticle = Material("mifl_tarkov_reticle/dot.png", "mips smooth")

att.HolosightPiece = "models/weapons/arccw/atts/uc_trijicon_tars_hsp.mdl"
-- att.HolosightNoFlare = true
-- att.HolosightSize = 1
-- att.HolosightBone = "holosight"
att.Colorable = true

att.Mult_SightedSpeedMult = .7
att.Mult_SightTime = 1.1
--lua/arccw/shared/attachments/uc_tac_anpeq16a.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tac_anpeq16a_tan.lua:
att.PrintName = "Insight Technologies MIPIM AN/PEQ-16A (Tan)"
att.AbbrevName = "AN/PEQ-16A (Tan)"
att.Icon = Material("entities/att/acwatt_uc_tac_anpeq16a_tan.png", "mips smooth")
att.Description = "Low-profile flashlight and laser module for rifles. The laser increases accuracy without the use of sights.\nThe laser and flashlight can be toggled individually.\nThis unit is cosmetically colored tan."
att.Desc_Pros = {
    "uc.light"
}
att.Desc_Cons = {
    "con.light"
}
att.Desc_Neutrals = {}
att.AutoStats = true

att.Slot = {"tac"}
att.SortOrder = 20+2

att.Model = "models/weapons/arccw/atts/uc_anpeq16a.mdl"
att.ModelOffset = Vector(0, 0.1, 0.25)
att.OffsetAng = Angle(0, 0,180)
att.ModelScale = Vector(1.2, 1.2, 1.2)
att.Laser = false
att.LaserStrength = 2 / 5
att.LaserBone = "laser"

att.ColorOptionsTable = {Color(255, 0, 0, 150)}

att.Mult_SightTime = 1.05
att.Mult_SightedSpeedMult = 0.95
att.Mult_MoveSpeed = 1

att.Flashlight = false
att.FlashlightFOV = 50
att.FlashlightFarZ = 512 -- how far it goes
att.FlashlightNearZ = 1 -- how far away it starts
att.FlashlightAttenuationType = ArcCW.FLASH_ATT_LINEAR -- LINEAR, CONSTANT, QUADRATIC are available
att.FlashlightColor = Color(255, 235, 229)
att.FlashlightTexture = "effects/flashlight001"
att.FlashlightBrightness = 2
att.FlashlightBone = "laser"

att.ToggleStats = {
    {
        PrintName = "Laser",
        Laser = true,
        Mult_HipDispersion = 0.8,
        Mult_MoveDispersion = 0.8
    },
    {
        PrintName = "Both",
        Laser = true,
        Flashlight = true,
        Mult_HipDispersion = 0.8,
        Mult_MoveDispersion = 0.8
    },
    {
        PrintName = "Light",
        Flashlight = true,
    },
    {
        PrintName = "Off",
    }
}
--lua/arccw/shared/attachments/uc_tac_laser_red.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tp_gong.lua:
att.PrintName = "Action Hero"
att.Icon = Material("entities/att/arccw_uc_tp_actionhero.png", "smooth mips")
att.Description = "Operate the firearm using only one hand. This improves weapon mobility, but accurate fire becomes difficult at best and near impossible at worst.\nBecause accuracy is already out the window, practictioners of this style also opt to shoot while sprinting at full speed."
att.Desc_Pros = {
    --"+6% Coolness"
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_tp"

att.AutoStats = true
att.SortOrder = 20

att.Override_ShootWhileSprint = true
att.Mult_HipDispersion = 0.75

att.Mult_Recoil = 1.5
att.Mult_RecoilSide = 2
att.Mult_SightTime = 1.5
att.Mult_Sway = 2
--att.Mult_MoveDispersion = 2
att.Mult_MoveSpeed = .95

att.LHIK = true
att.LHIKHide = true
att.Override_HoldtypeActive = "pistol"
att.Override_HoltypeActive_Priority = 999
att.Override_HoldtypeSights = "pistol"
att.Override_HoltypeSights_Priority = 999
att.Override_HoldtypeHolstered = "normal"

att.Hook_Compatible = function(wep, data)
    if wep:GetIsManualAction() and wep:GetBuff("HoldtypeActive") ~= "pistol" and wep:GetBuff("HoldtypeActive") ~= "revolver" then return false end
end

att.NotForNPCs = true
--lua/arccw/shared/attachments/uc_tp_strafe.lua:
att.PrintName = "Strafe"

att.Icon = Material("entities/att/arccw_uc_tp_strafe.png", "smooth mips")
att.Description = "Active experience in simulated combat drills has conditioned you to shoot while walking towards the enemy. When firing, you can walk at your normal speed."
att.Desc_Pros = {
    "uc.neverflinch"
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_tp"

att.AutoStats = true
att.SortOrder = 2

att.Override_ShootSpeedMult = 1
att.Mult_SightedSpeedMult = 1.2

att.NotForNPCs = true
--lua/arccw/shared/attachments/uc_usp_cal_40sw.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_usp_mag_ext.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_usp_tp_hl.lua:
att.PrintName = "Free Man"
att.Icon = Material("entities/att/acwatt_uc_usp_tp_hl.png", "smooth mips")
att.Description = "You are the right man in the wrong place."
att.Desc_Pros = {
    --"+6% Coolness"
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
    "uc.cosmetic"
}
att.Slot = "uc_usp_tp"

att.AutoStats = true
att.SortOrder = 999

att.LHIK = true
att.LHIKHide = true

att.Override_ActivePos = Vector(1, 5, .75)
att.Override_ActiveAng = Angle(-2, -2, 0)

att.RequireFlags = {"uc_usp_slide_match", "uc_usp_skin_nickel", "uc_tp_gong"}
att.HideIfBlocked = true

att.Free = true
att.IgnorePickX = true

att.Ignore = true
--lua/arccw/shared/attachments/ud_870_slide_moe.lua:
att.PrintName = "Express-12 MOE Forend"
att.AbbrevName = "MOE Forend"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Remington 870 MOE Forend"
end

att.Icon = Material("entities/att/acwatt_ud_870_slide_moe.png", "smooth mips")
att.Description = "A lightweight polymer forend. Easier to cycle but harder to grip on, increasing both fire rate and recoil."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_870_slide"

att.AutoStats = true

-- att.Mult_SightTime = 0.75
-- att.Mult_Recoil = 1.15
-- att.Mult_Sway = 1.15

att.Mult_SightTime = 0.85

att.Mult_Sway = 1.25
att.Mult_Recoil = 1.1
att.Mult_RecoilSide = 1.5

att.Mult_CycleTime = 0.9

att.LHIK = true

att.Model = "models/weapons/arccw/atts/moe_lhik.mdl"

att.ActivateElements = {"ud_870_slide_moe"}
--lua/arccw/shared/attachments/ud_870_stock_poly.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_caliber_40sw.lua:
att.PrintName = "Glock .40 S&W Conversion"
att.AbbrevName = ".40 S&W"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "GEN3 .40 S&W Conversion"
end

att.SortOrder = 100
att.Icon = Material("entities/att/uc_bullets/40sw.png", "smooth mips")
att.Description = "Law-enforcement caliber with a slightly larger bullet and shorter case.\nRetains damage over distance better than other calibers."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_glock_caliber"

att.AutoStats = true

att.Override_Trivia_Calibre = ".40 S&W"

att.Mult_Damage = ArcCW.UC.CalConv("9mm", "40sw", "max")
att.Mult_DamageMin = ArcCW.UC.CalConv("9mm", "40sw", "min")
att.Mult_Penetration = ArcCW.UC.CalConv("9mm", "40sw", "pen")

att.Mult_Recoil = 1.15

att.Override_PhysBulletMuzzleVelocity = 300

att.Mult_ClipSize = .9
att.Override_ShellModel = "models/weapons/arccw/uc_shells/40sw.mdl"
att.Override_ShellScale = 1

local path = ")weapons/arccw_ud/glock/"
local common = ")/arccw_uc/common/"
local tail = common .. "40sw/"
local fire40 = {path .. "fire-40-01.ogg",path .. "fire-40-02.ogg",path .. "fire-40-03.ogg",path .. "fire-40-04.ogg",path .. "fire-40-05.ogg",path .. "fire-40-06.ogg"}
local fire40sup = {path .. "fire-40-sup-01.ogg",path .. "fire-40-sup-02.ogg",path .. "fire-40-sup-03.ogg",path .. "fire-40-sup-04.ogg",path .. "fire-40-sup-05.ogg",path .. "fire-40-sup-06.ogg"}
local fire40dist = {tail .. "fire-dist-40sw-pistol-ext-01.ogg", tail .. "fire-dist-40sw-pistol-ext-02.ogg", tail .. "fire-dist-40sw-pistol-ext-03.ogg", tail .. "fire-dist-40sw-pistol-ext-04.ogg", tail .. "fire-dist-40sw-pistol-ext-05.ogg", tail .. "fire-dist-40sw-pistol-ext-06.ogg"}
local fire40distint = {common .. "fire-dist-int-pistol-heavy-01.ogg", common .. "fire-dist-int-pistol-heavy-02.ogg", common .. "fire-dist-int-pistol-heavy-03.ogg", common .. "fire-dist-int-pistol-heavy-04.ogg", common .. "fire-dist-int-pistol-heavy-05.ogg", common .. "fire-dist-int-pistol-heavy-06.ogg"}

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return fire40sup
    else
        return fire40
    end
end


att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire40dist
    end
end



att.Hook_GetDistantShootSoundIndoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire40distint
    end
end

att.GivesFlags = {"cal_subsonic"}
att.ExcludeFlags = {"powder_subsonic"}

--lua/arccw/shared/attachments/ud_glock_caliber_45acp.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_frame_subcompact.lua:
att.PrintName = "GEN3K Subcompact Frame"
att.AbbrevName = "Subcompact Frame"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Glock 26 Subcompact Frame"
end

att.Icon = Material("entities/att/acwatt_ud_glock_frame_subcompact.png", "smooth mips")
att.Description = "A smaller frame that is noticably shorter on the magwell.\nFast to handle, but the smaller grip surface affects recoil control."
att.Desc_Pros = {
    "ud.glock.subcompact"
}
att.Desc_Cons = {
    "uc.nostocks"
}
att.Desc_Neutrals = {
}
att.Slot = "ud_glock_frame"

att.AutoStats = true

att.Mult_DrawTime = 0.75
att.Mult_HolsterTime = 0.75
att.Mult_Recoil = 1.15
att.Mult_SightedSpeedMult = 1.05
att.Mult_SightTime = 0.8

att.ActivateElements = {"ud_glock_frame_subcompact"}
att.GivesFlags = {"ud_glock_frame_subcompact"}
--lua/arccw/shared/attachments/ud_glock_mag_33.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_slide_comp.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_slide_cs.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_slide_sd.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_slide_sd.lua:
att.PrintName = "GEN3 Silent Mistress Slide"
att.AbbrevName = "SD Slide"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "G17SD Hush Puppy Slide"
end

att.Icon = Material("entities/att/acwatt_ud_glock_slide_sd.png", "smooth mips")
att.Description = "A slide with an integrated silencer installed. A slide lock system can prevent the weapon from cycling when fired, reducing its audible report even further."
att.Desc_Pros = {
    "uc.invistracer"
}
att.Desc_Cons = {
    --"uc.manual",
    "uc.nomuzzle"
}
att.Desc_Neutrals = {
    "ud.hushpuppy",
    "uc.supptail"
}
att.Slot = "ud_glock_slide"

att.AutoStats = true

att.Mult_SightTime = 1.15
att.Mult_Recoil = 0.85
att.Mult_AccuracyMOA = 0.75
att.Mult_Sway = 1.5
att.Mult_Range = 1.25

att.Mult_ShootVol = 0.65
att.Mult_ShootPitch = 1.25

att.Mult_PhysBulletMuzzleVelocity = 0.85

att.Mult_RPM = 0.55

--att.Override_ManualAction = true

att.Silencer = true
att.Override_MuzzleEffect = "muzzleflash_suppressed"

att.Add_BarrelLength = 8

att.ActivateElements = {"ud_glock_slide_sd"}

att.GivesFlags = {"sd"}

att.Override_Firemodes_Priority = 10
att.Override_Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 1,
        PrintName = "fcg.slidelock",
        Override_ManualAction = true,
        Mult_ShootVol = 0.8,
        Mult_AccuracyMOA = 0.75,
        Mult_HipDispersion = 0.75,
    },
    {
        PrintName = "fcg.safe2",
        Mode = 0,
    }
}

att.Override_TracerNum = 0
att.Override_PhysTracerProfile = 7

att.Hook_TranslateAnimation = function(wep, anim)
    if not wep:GetBuff_Override("Override_ManualAction") then return end
    if (anim == "fire" || anim == "fire_empty") then
        return "fire_cycle"
    elseif (anim == "idle" || anim == "idle_empty") then
        if wep:GetNeedCycle() then
            return "idle"
        end
    end
end

att.Hook_GetDistantShootSound = function(wep, distancesound)
    if wep:GetBuff("PhysBulletMuzzleVelocity") < ArcCW.UC.SubsonicThreshold then
        return false
    end
end
--lua/arccw/shared/attachments/ud_m1014_barrel_sawn.lua:
att.PrintName = "12\" M4 Super 90 Sawn-Off Barrel"
att.AbbrevName = "12\" Sawn-Off Barrel"
att.Icon = Material("entities/att/acwatt_ud_m1014_barrel_short.png", "smooth mips")
att.Description = "Homemade short barrel with a very large spread and cannot use muzzle attachments. Marginally increases rate of fire."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.nofs",
    "uc.nomuzzle"
}
att.Desc_Neutrals = {
}
att.Slot = "ud_1014_barrel"

att.AutoStats = true

att.Mult_AccuracyMOA = 2
att.Mult_Recoil = 1.25
att.Mult_Range = 0.5

att.Mult_Sway = 0.5
att.Mult_SightTime = 0.6
att.Mult_SpeedMult = 1.05
att.Mult_ShootSpeedMult = 1.2
att.Mult_RPM = 240 / 220

att.Mult_HipDispersion = 0.75

att.Add_BarrelLength = -6

att.ActivateElements = {"ud_autoshotgun_barrel_sawnoff"}
att.GivesFlags = {"nomuzzle"}

att.A_Hook_Add_SightsDispersion = function(wep, data)
    if data and !wep.Attachments[1].Installed then
        data.add = data.add + 50
    end
end

att.Ignore = true
--lua/arccw/shared/attachments/ud_m1014_handguard_sport.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m1014_stock_buffer.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m1014_stock_gripstock.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m1014_stock_in.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m1014_stock_in.lua:
att.PrintName = "Collapsed Stock"
att.Icon = Material("entities/att/acwatt_ud_m1014_stock_in.png", "smooth mips")
att.Description = "Pushing in the collapsable stock makes the weapon significantly shorter, allowing for easier use around corners and making it easier on the move at the cost of less stability."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_1014_stock"
att.AttachSound = "arccw_uc/common/stockslide.ogg"

att.AutoStats = true
att.Free = true
att.IgnorePickX = true
att.SortOrder = 999

att.Mult_Recoil = 1.1
att.Mult_RecoilSide = 1.25

att.Mult_SightedSpeedMult = 1.1
att.Mult_ShootSpeedMult = 1.1

att.Mult_Sway = 1.5
att.Add_BarrelLength = -8

att.ActivateElements = {"ud_autoshotgun_stock_in"}
--lua/arccw/shared/attachments/ud_m1014_tube_ext.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_fs_sig.lua:
att.PrintName = "SIG Flip-Up Front Sight"
att.AbbrevName = "SIG Front Sight"
att.Icon = Material("entities/att/acwatt_ud_m16_fs_sig.png", "mips smooth")
att.Description = [[Removable front sight made by SIG Sauer. Designed to be mounted on forend rails.]]
att.Desc_Neutrals = {"uc.cosmetic"}
att.SortOrder = 1
att.IgnorePickX = true

att.Model = "models/weapons/arccw/atts/sig_fs.mdl"
att.ModelScale = Vector(0.7, 0.7, 0.7)
att.Slot = {"ud_m16_fs"}
att.RequireFlags = {"ud_m16_rscompatible"}
att.GivesFlags = {"ud_m16_rs"}

att.FrontSight = 1
--lua/arccw/shared/attachments/ud_m16_grip_ergo.lua:
att.PrintName = "Ergonomic Grip"
att.Icon = Material("entities/att/acwatt_ud_m16_grip_ergo.png", "smooth mips")
att.Description = "Polymer grip with a comfortable shape, enabling faster handling."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_m16_grip"

att.AutoStats = true

att.Mult_SightTime = 0.9
att.Mult_SightedSpeedMult = 0.95
--att.Mult_Recoil = 1
--att.Mult_SpeedMult = 1

att.ActivateElements = {"grip_ergo"}
--lua/arccw/shared/attachments/ud_m16_mag_50beo_12.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_mag_60.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_mag_9mm_32.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_receiver_auto.lua:
att.PrintName = "AMCAR-NG Automatic Receiver"
att.AbbrevName = "Automatic Lower"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "M16A3 Automatic Receiver"
end

att.Description = "A fire control group that supports fully automatic fire. Comes in semi-auto-safe configuration."

att.Icon = Material("entities/att/acwatt_ud_m16_receiver_auto.png", "smooth mips")
att.Desc_Pros = {
    "uc.auto",
    --"ud.flattop"
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_m16_fcg"
--att.InvAtt = "ud_m16_receiver_auto"

att.AutoStats = true
att.SortOrder = 5

att.Mult_AccuracyMOA = 1.25
att.Mult_RPM = 0.85
att.Mult_HipDispersion = 1.125
att.Mult_ShootSpeedMult = 0.85

att.Override_Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

att.GivesFlags = {"m16_auto"}
att.ExcludeFlags = {"m16_noauto"}
-- att.ActivateElements = {"ud_m16_upper_flat"}

--lua/arccw/shared/attachments/ud_m16_receiver_cali.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_rs_ch.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_stock_moe.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_stock_wood.lua:
att.PrintName = "AMCAR Wooden Stock"
att.AbbrevName = "Wooden Stock"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "M16 Wooden Stock"
end

att.Icon = Material("entities/att/acwatt_ud_m16_stock_default.png", "smooth mips")
att.Description = "A sturdy stock made from wood. Heavier than polymer, and almost makes you wish for a nuclear winter."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_m16_stock"

att.AutoStats = true
att.SortOrder = 9

att.Mult_Recoil = 0.85
att.Mult_SightedSpeedMult = 0.9
att.Mult_SpeedMult = 0.975
att.Mult_Sway = 0.75

att.ActivateElements = {"stock_wood"}
--lua/arccw/shared/attachments/ud_mini14_mag_30.lua:
att.PrintName = "Mini-14 30-Round Extended Mag"
att.AbbrevName = "30-Round Extended Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Patriot 809 30-Round Extended Mag"
end

att.SortOrder = 30
att.Icon = Material("entities/att/acwatt_ud_mini14_mag_30.png", "smooth mips")
att.Description = "An official but rare extended magazine. Despite its similar appearance, this is not STANAG compatible."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_mini14_mag"

att.AutoStats = true

att.Mult_SightTime = 1.1
att.Mult_ReloadTime = 1.15
att.Override_ClipSize = 30
att.Mult_Sway = 1.5
att.Mult_ShootSpeedMult = 0.95

att.ActivateElements = {"ud_mini14_mag_30"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_30"
end

att.ExcludeFlags = {"mini14_762", "mini14_22lr"}
att.HideIfBlocked = true
--lua/arccw/shared/attachments/ud_mini14_mag_30_762.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_mini14_receiver_22lr.lua:
att.PrintName = "Mini-14 .22 LR Receiver"
att.AbbrevName = ".22 LR Receiver"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Patriot 809 .22 LR Receiver"
end

att.Icon = Material("entities/att/uc_bullets/22lr.png", "smooth mips")
att.Description = "Aftermarket .22 Long Rifle conversion for the Mini-14. While the light, weak cartridge has poor stopping power, its recoil is extremely manageable, making it a cinch to follow up shots."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_mini14_receiver"

att.AutoStats = true

att.Mult_SightTime = 0.8
att.Mult_ReloadTime = 0.85
att.Mult_Sway = 0.75

att.Mult_Damage = ArcCW.UC.CalConv("556", "22lr", "max")
att.Mult_DamageMin = ArcCW.UC.CalConv("556", "22lr", "min")
att.Mult_Penetration = ArcCW.UC.CalConv("556", "22lr", "pen")

att.Mult_Range = 0.5
att.Mult_Recoil = 0.25
att.Mult_VisualRecoilMult = 0.25
att.Mult_RPM = 1000 / 540
att.Mult_ShootSpeedMult = 1.2

att.Mult_HipDispersion = 0.6

att.Override_ClipSize = 15

att.ActivateElements = {"ud_mini14_mag_15_22lr", "ud_mini14_receiver_22lr"}
att.GivesFlags = {"mini14_22lr"}

-- att.GivesFlags = {"mini14_22lr","cal_subsonic"}
-- att.ExcludeFlags = {"powder_subsonic"}

att.Override_Ammo = "plinking"
att.Override_Trivia_Calibre = ".22 Long Rifle"
att.Override_ShellModel = "models/weapons/arccw/uc_shells/22lr.mdl"
att.Override_ShellScale = 1
att.Override_ShellSounds = ArcCW.TinyShellSoundsTable

att.Override_PhysTracerProfile = "uc_plinking"
att.Override_PhysBulletMuzzleVelocity = 370

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_15_22lr"
end

local path = "arccw_uc/common/"

local fire22 = {path .. "fire-22-01.ogg",path .. "fire-22-02.ogg",path .. "fire-22-03.ogg",path .. "fire-22-04.ogg",path .. "fire-22-05.ogg",path .. "fire-22-06.ogg"}
local fire22sup = {path .. "fire-22-sup-01.ogg",path .. "fire-22-sup-02.ogg",path .. "fire-22-sup-03.ogg",path .. "fire-22-sup-04.ogg",path .. "fire-22-sup-05.ogg",path .. "fire-22-sup-06.ogg"}

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return fire22sup
    else
        return fire22
    end
end

local fire22dist = {path .. "fire-22-dist-01.ogg", path .. "fire-22-dist-02.ogg", path .. "fire-22-dist-03.ogg", path .. "fire-22-dist-04.ogg", path .. "fire-22-dist-05.ogg", path .. "fire-22-dist-06.ogg"}

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire22dist
    end
end


local fire22distint = {path .. "fire-dist-int-pistol-light-01.ogg", path .. "fire-dist-int-pistol-light-02.ogg", path .. "fire-dist-int-pistol-light-03.ogg", path .. "fire-dist-int-pistol-light-04.ogg", path .. "fire-dist-int-pistol-light-05.ogg", path .. "fire-dist-int-pistol-light-06.ogg"}

att.Hook_GetDistantShootSoundIndoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire22distint
    end
end


local slotinfo = {
    [7] = {"15-Round Mag", "15-Round Mag", Material("entities/att/acwatt_ud_mini14_mag_15_22lr.png", "smooth mips")},
}
att.Hook_GetDefaultAttName = function(wep, slot)
    if slotinfo[slot] then
        return GetConVar("arccw_truenames"):GetBool() and slotinfo[slot][2] or slotinfo[slot][1]
    end
end
att.Hook_GetDefaultAttIcon = function(wep, slot)
    if slotinfo[slot] then
        return slotinfo[slot][3]
    end
end
--lua/arccw/shared/attachments/ud_mini14_stock_sawnoff.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_uzi_mag_45_22.lua:
att.PrintName = "Uzi 22-Round Extended Mag"
att.AbbrevName = "22-Round Extended Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "IAL-9 22-Round Extended Mag"
end

att.SortOrder = 40
att.Icon = Material("entities/att/acwatt_ud_uzi_mag_40.png", "smooth mips")
att.Description = "Extended magazine for the Uzi. It is only somewhat longer than the standard magazine, making it not that difficult to handle."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_uzi_mag"

att.AutoStats = true

att.Mult_SightTime = 1.08
--att.Mult_Recoil = 0.9
att.Mult_ReloadTime = 1.12
--att.Mult_SpeedMult = 0.9
att.Override_ClipSize = 22
att.Override_ClipSize_Priority = 2
att.Mult_Sway = 1.15

att.Mult_HipDispersion = 1.25

att.ActivateElements = {"ud_uzi_41_mag"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_41"
end

att.RequireFlags = {"uzi_45"}
att.HideIfBlocked = true
--lua/arccw/shared/attachments/ud_uzi_stock_folded.lua:
att.PrintName = "Folded Stock"
att.Icon = Material("entities/att/acwatt_ud_uzi_stock_folded.png", "smooth mips")
att.Description = "Tuck in the folding stock, making the weapon easier to manuver but less controllable."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_uzi_stock"
att.AttachSound = "arccw_uc/common/stockslide.ogg"

att.AutoStats = true
att.Free = true
att.IgnorePickX = true
att.SortOrder = 2

att.Mult_Recoil = 1.15
att.Mult_RecoilSide = 1.25
att.Mult_VisualRecoilMult = 2
att.Mult_Sway = 1.5

att.Mult_SightTime = 0.85
att.Mult_SightedSpeedMult = 1.05
att.Mult_ShootSpeedMult = 1.05

att.Mult_DrawTime = 0.75
att.Mult_HolsterTime = 0.75
att.Add_BarrelLength = -2

att.ActivateElements = {"ud_uzi_folded_stock"}
--lua/arccw/shared/attachments/ur_1911_grip_pachmayr.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_1911_slide_compact_custom.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_1911_slide_custom.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_1911_slide_custom.lua:
att.PrintName = "5\" Government Slide w/ Custom Finish"
att.AbbrevName = "5\" Custom Slide"
att.Icon = Material("entities/att/ur_1911/slide_std.png","mips smooth")
att.Description = "A factory slide with a secondary color, for use with obnoxious two-tone finishes."

att.Desc_Neutrals = {
    "uc.cosmetic",
    "uc.custcolor",
}
att.AutoStats = true
att.Slot = "ur_m1911_slide"
att.SortOrder = 99
att.Free = true
--lua/arccw/shared/attachments/ur_329_caliber_44special.lua:
att.PrintName = "Model 329PD .44 Special Chambering"
att.AbbrevName = ".44 Special"
att.Icon = Material("entities/att/uc_bullets/44special.png","smooth mips")
att.Description = "A shorter length cartridge with lower recoil but reduced stopping power."

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Enforcement .44 Special Chambering"
end

att.AutoStats = true
att.Slot = "ur_329_caliber"

att.Mult_RangeMin = 0.5
att.Mult_Range = 0.6
att.Mult_Recoil = 0.75
att.Override_PhysBulletMuzzleVelocity = 265

att.Override_Trivia_Calibre = ".44 Special"

local path = "weapons/arccw_ur/sw586/"

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return -- how tf did you equip a suppressor with this
    else
        return {
            path .. "fire-01.ogg",
            path .. "fire-02.ogg",
            path .. "fire-03.ogg",
            path .. "fire-04.ogg",
            path .. "fire-05.ogg",
            path .. "fire-06.ogg",
        } -- Placeholder(?)
    end
end

local tail = ")^/arccw_uc/common/357mag/"

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return {
            tail .. "fire-dist-357mag-pistol-ext-01.ogg",
            tail .. "fire-dist-357mag-pistol-ext-02.ogg",
            tail .. "fire-dist-357mag-pistol-ext-03.ogg",
            tail .. "fire-dist-357mag-pistol-ext-04.ogg",
            tail .. "fire-dist-357mag-pistol-ext-05.ogg",
            tail .. "fire-dist-357mag-pistol-ext-06.ogg"
        }
    end
end

--lua/arccw/shared/attachments/ur_ak_barrel_vepr.lua:
att.PrintName = "Vepr 20\" Marksman Barrel"
att.AbbrevName = "20\" Marksman Barrel"
att.Icon = Material("entities/att/ur_ak/barrel/vepr.png", "mips smooth")
att.Description = "Long civilian hunting barrel. Improved performance at range, but fires much slower."
att.Slot = {"ur_ak_barrel"}
att.AutoStats = true

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Amur 20\" Marksman Barrel"
end

att.SortOrder = 20

att.Add_BarrelLength = 4
att.Mult_SightTime = 1.15
att.Mult_SpeedMult = .97
att.Mult_SightedSpeedMult = 0.85

att.Mult_Recoil = 0.85
att.Mult_AccuracyMOA = 0.5
att.Mult_Range = 1.5
att.Mult_HipDispersion = 1.25
att.Mult_ShootPitch = 0.9
att.Mult_RPM = 0.8
att.ActivateElements = {"barrel_vepr"}
att.GivesFlags = {"ak_barrelchange"}
--lua/arccw/shared/attachments/ur_ak_barrel_vityaz.lua:
att.PrintName = "PP-19 9\" SMG Barrel"
att.AbbrevName = "9\" SMG Barrel"
att.Icon = Material("entities/att/ur_ak/barrel/smg.png", "mips smooth")
att.Description = "Submachine gun barrel with a rail interface for additional modularity. More lightweight than the compact barrel, but confers more recoil."
att.Slot = {"ur_ak_barrel"}
att.AutoStats = true

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Bogatyr SMG 9\" SMG Barrel"
end

att.SortOrder = 9

att.Add_BarrelLength = -5
att.Mult_ShootPitch = 115 / 100
att.Mult_RPM = 1.131
att.Mult_SightTime = 0.7
att.Mult_HipDispersion = 0.7
att.Mult_SightedSpeedMult = 1.12
att.Mult_SpeedMult = 1.03
att.Mult_Sway = 0.85

att.Mult_Recoil = 1.4
att.Mult_AccuracyMOA = 1.5
att.Mult_Range = 0.65

att.ActivateElements = {"barrel_vityaz"}
att.GivesFlags = {"ak_barrelchange", "barrel_carbine", "ak_railedguard"}

att.LHIK = true

att.ModelOffset = Vector(-24, -3.4, 3.3)
att.OffsetAng = Angle(10, 0, 0)
att.Model = "models/weapons/arccw/ak_lhik_u.mdl"
--lua/arccw/shared/attachments/ur_ak_cover_alpha.lua:
att.PrintName = "Alpha AK Dust Cover"
att.AbbrevName = "Alpha Dust Cover"
att.Icon = Material("entities/att/ur_ak/dustcover_alpha.png", "mips smooth")
att.Description = "Alternative US-made dust cover with an upper picattiny rail."
att.Slot = {"ur_ak_cover"}
att.AutoStats = true

att.Desc_Neutrals = {
    "uc.cosmetic",
    "ur.ak.alpha"
}

att.ActivateElements = {"cover_alpha"}
att.GivesFlags = {"cover_rail"}
att.ExcludeFlags = {"ak_barrelkrinkov", "ak_norail"}
--lua/arccw/shared/attachments/ur_ak_cover_truniun_rail.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_muzzle_akm.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_stock_none.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_aw_muzzle_brake.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_aw_muzzle_brake_sights.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_aw_stock_ru.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_dbs_barrel_mid.lua:
att.PrintName = "IZh-58 22\" Trimmed Barrel"
att.AbbrevName = "22\" Trimmed Barrel"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Volga SuperShotgun 22\" Trimmed Barrel"
end

att.Icon = Material("entities/att/ur_dbs/bmid.png","smooth mips")
att.Description = "Take off just a bit of the barrel for an edge in close-quarters while maintaining as much performance as possible."
att.Slot = {"ur_db_barrel"}
att.AutoStats = true
att.SortOrder = 22


att.Mult_Sway = .85
att.Add_BarrelLength = -4
att.Mult_SightTime = 0.95
att.Mult_HipDispersion = 0.9

att.Mult_Recoil = 1.1
att.Mult_AccuracyMOA = 1.1
att.Mult_Range = 0.9


att.ActivateElements = {"barrel_mid"}
--lua/arccw/shared/attachments/ur_dbs_barrel_sawedoff.lua:
att.PrintName = "IZh-58 12\" Sawed-off Barrel"
att.AbbrevName = "12\" Sawed-off Barrel"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Volga SuperShotgun 12\" Sawed-off Barrel"
end

att.Icon = Material("entities/att/ur_dbs/bsw.png","smooth mips")
att.Description = "Sawed-off barrel, often associated with outlaws. Enhances portability and looks the part for hunting unholy creatures."
att.Slot = {"ur_db_barrel"}
att.AutoStats = true
att.SortOrder = 12


att.Add_BarrelLength = -16
att.Mult_Sway = .6
att.Mult_SightTime = .85
att.Mult_DrawTime = .85
att.Mult_HolsterTime = .85
att.Mult_SpeedMult = 1.03
att.Mult_HipDispersion = 0.75

att.Mult_Recoil = 1.4
att.Mult_AccuracyMOA = 2
att.Mult_Range = .65


att.ActivateElements = {"barrel_sw"}
att.GivesFlags = {"sawnoff"}
--lua/arccw/shared/attachments/ur_deagle_barrel_annihilator.lua:
att.PrintName = "6.75\" Desert Eagle Annihilator Barrel"
att.AbbrevName = "6.75\" Annihilator Barrel"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "6.75\" Predator Annihilator Barrel"
end
att.Icon = Material("entities/att/acwatt_ur_deagle_barrel_annihilator.png","smooth mips")
att.Description = "Heavily modified barrel with gilded parts and an oversized integral muzzle brake. Effects are exacerbated, and the sheer volume of vented gas can get disorienting."
att.Slot = "ur_deagle_barrel"
att.AutoStats = true
att.Desc_Cons = {
    "+150% Visual recoil",
    --"uc.nomuzzle"
}
att.SortOrder = 6

att.Mult_Recoil = 0.8
att.Mult_RecoilSide = 0.6
att.Mult_VisualRecoilMult = 2.5
att.Mult_ShootVol = 1.2
att.Mult_Range = 0.8
att.Mult_ShootPitch = 0.95
att.Mult_SightedSpeedMult = 1.05
att.Mult_AccuracyMOA = 1.15
att.Mult_RPM = .8

--att.ActivateElements = {"ur_deagle_barrel_annihilator"}
att.GivesFlags = {"barrel_annihilator"}
--lua/arccw/shared/attachments/ur_deagle_barrel_marksman.lua:
att.PrintName = "10\" Desert Eagle Marksman Barrel"
att.AbbrevName = "10\" Marksman Barrel"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "10\" Predator Marksman Barrel"
end
att.Icon = Material("entities/att/acwatt_ur_deagle_barrel_police.png","smooth mips")
att.Description = "Elongated barrel for niche mid-range roles. Especially front-heavy."
att.Slot = "ur_deagle_barrel"
att.AutoStats = true
att.SortOrder = 10

att.Mult_AccuracyMOA = 0.5
att.Mult_Range = 2
att.Mult_Recoil = 0.75
att.Mult_SightTime = 1.25
att.Mult_Sway = 1.25
att.Mult_ShootPitch = 0.9
att.Mult_HipDispersion = 1.2

att.Add_BarrelLength = 10

att.Mult_DrawTime = 1.5
att.Mult_HolsterTime = 1.5

att.ActivateElements = {"ur_deagle_barrel_marksman"}
--lua/arccw/shared/attachments/ur_deagle_caliber_44.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_deagle_grip_wood.lua:
att.PrintName = "Desert Eagle Wooden Grip"
att.AbbrevName = "Wooden Grip"
att.Icon = Material("entities/att/acwatt_ur_deagle_grip_plastic.png","smooth mips")
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Predator Wooden Grip"
end
att.Description = "Premium and hand-carved. Classy and smooth, but more difficult to grip."
att.Slot = "ur_deagle_grip"
att.AutoStats = true

att.Mult_Recoil = 1.05
att.Mult_RecoilSide = 1.1
att.Mult_SightTime = 0.95

att.ActivateElements = {"ur_deagle_grip_wooden"}
--lua/arccw/shared/attachments/ur_deagle_skin_modern.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_mp5_barrel_eod.lua:
att.PrintName = "11\" EOD Barrel"

att.Icon = Material("entities/att/ur_mp5/upper_eod.png", "smooth mips")
att.Description = "Extended barrel and handguard assembly with a massive integrated muzzle brake to protect underbarrel weapons.\nDecreases muzzle rise, but performs poorly when hip firing."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.nomuzzle",
    "uc.nohg",
}
att.AutoStats = true

att.Slot = "ur_mp5_barrel"

att.SortOrder = 11

att.Mult_SightTime = 1.1
att.Mult_Sway = 1.15
att.Mult_Range = 1.25
att.Mult_Recoil = 0.8
att.Mult_AccuracyMOA = 0.75
att.Mult_HipDispersion = 1.2
att.Add_BarrelLength = 4

att.ActivateElements = {"ur_mp5_barrel_eod"}
att.GivesFlags = {"barrel_eod"}

att.Hook_AddShootSound = function(wep)
    wep:EmitSound("weapons/arccw_ur/mp5/eod" .. math.random(1, 5) .. ".ogg", 70, math.Rand(98, 102), 1, CHAN_STATIC)
    wep:EmitSound("weapons/arccw_ur/mp5/eo2" .. math.random(1, 6) .. ".ogg", 70, 100, 0.5, CHAN_STATIC)
end
--lua/arccw/shared/attachments/ur_mp5_caliber_22lr.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_mp5_mag_40.lua:
att.PrintName = "MP5 40-Round Extended Mag"
att.AbbrevName = "40-Round Ext Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "PK5 40-Round Extended Mag"
end

att.SortOrder = 20
att.Icon = Material("entities/att/acwatt_ur_mp5_mag_40.png", "smooth mips")
att.Description = "40-round extended magazine. The extra protruding length is cumbersome, but the magazine maintains high reliability."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ur_mp5_mag"

att.AutoStats = true

att.Mult_SightTime = 1.08
--att.Mult_Recoil = 0.9
--att.Mult_SpeedMult = 0.9
att.Override_ClipSize = 50
att.Mult_Sway = 1.15

att.ActivateElements = {"ur_mp5_mag_40"}

att.ExcludeFlags = {"ur_mp5_cal_10mm","ur_mp5_cal_40sw"}

att.Ignore = true
--lua/arccw/shared/attachments/ur_mp5_optic_mount.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_mp5_stock_future.lua:
att.PrintName = "MP5 \"Swordfish\" Futuristic Stock"
att.AbbrevName = "Futuristic Stock"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "PK5-Future Folding Stock"
end

att.Icon = Material("entities/att/ur_mp5/stock_fish.png", "smooth mips")
att.Description = "Plastic-polymer stock with a telescoping buttstock and adjustable cheek riser. Though these features make for much situational adaptability, recoil control suffers as a result of the light construction.\n\nToggling the stock modifies performance accordingly."
att.AutoStats = true
att.Slot = "ur_mp5_stock"

att.ToggleLockDefault = true
att.ToggleSound = "arccw_uc/common/stockslide.ogg"

att.Mult_MoveDispersion = .85
att.Mult_Sway = 1.5
att.Mult_SightTime = 1.2
att.Mult_RecoilSide = 1.15
att.Mult_HipDispersion = 0.85

att.ToggleStats = {
    {
        PrintName = "Extended",
        ActivateElements = {"stock_future"},
        AutoStats = true,
    },
    {
        PrintName = "Collapsed",
        ActivateElements = {"stock_future_folded"},
        AutoStats = true,
        Mult_ShootSpeedMult = 1.15,
        Add_BarrelLength = -4
    }
}
--lua/arccw/shared/attachments/ur_spas12_stock_full.lua:
return gluapack()()
--lua/arccw/shared/attachments_bulk/uc_myt_scar.lua:
-- Call ArcCW.LoadAttachmentType(att, "attachment_name") to define attachments in bulk
-- This reduces loading times by reducing the amount of lua files needed.

local att = {}


-- Magazines/Caliber Conversions ---------------------------------------------------------
att.PrintName = "SCAR-9 40-Round 9x19mm Mag"
att.AbbrevName = "40-Round 9mm Mag"

att.Icon = Material("entities/att/ue_scar/l_9mm.png", "smooth mips")
att.Description = "Evil magazine adaptor. Takes anything that goes in to a Glock, especially Vector mags."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "uc_myt_scar_mag"
att.SortOrder = 40 + 9

att.Mult_RPM = 1.25 -- 750 rpm

att.AutoStats = true
att.HideIfBlocked = true

att.Override_ClipSize = 40  -- bof?

att.Mult_Range = 0.4
att.Mult_ShootSpeedMult = 1.1
att.Mult_Recoil = 0.3
att.Mult_HipDispersion = 0.85

att.Mult_SightTime = 0.9
att.Mult_Damage = ArcCW.UC.StdDmg["9mm"].max / ArcCW.UC.StdDmg["762_51"].max
att.Mult_DamageMin = ArcCW.UC.StdDmg["9mm"].min / ArcCW.UC.StdDmg["762_51"].min

att.Mult_Penetration = ArcCW.UC.StdDmg["9mm"].pen / ArcCW.UC.StdDmg["762_51"].pen
att.Mult_MuzzleVelocity = ArcCW.UC.StdDmg["9mm"].vel / ArcCW.UC.StdDmg["762_51"].vel
att.Mult_PhysBulletMuzzleVelocity = ArcCW.UC.StdDmg["9mm"].vel / ArcCW.UC.StdDmg["762_51"].vel

att.ActivateElements = {"conv_9mm"}

att.Override_Ammo = "pistol"
att.Override_Trivia_Calibre = "9x19mm Parabellum"
att.Override_Trivia_Class = "Submachine Gun"
att.Override_ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
att.Override_ShellScale = 0.8
att.Override_ShellSounds = ArcCW.PistolShellSoundsTable

local path = ")weapons/uc_osk/"
local common = ")/arccw_uc/common/"
local tail9 = ")/arccw_uc/common/9x19/"
local fire9dist = {tail9 .. "fire-dist-9x19-pistol-ext-01.ogg", tail9 .. "fire-dist-9x19-pistol-ext-02.ogg", tail9 .. "fire-dist-9x19-pistol-ext-03.ogg", tail9 .. "fire-dist-9x19-pistol-ext-04.ogg", tail9 .. "fire-dist-9x19-pistol-ext-05.ogg", tail9 .. "fire-dist-9x19-pistol-ext-06.ogg"}
local fire9distint = {tail9 .. "fire-dist-9x19-pistol-int-01.ogg", tail9 .. "fire-dist-9x19-pistol-int-02.ogg", tail9 .. "fire-dist-9x19-pistol-int-03.ogg", tail9 .. "fire-dist-9x19-pistol-int-04.ogg", tail9 .. "fire-dist-9x19-pistol-int-05.ogg", tail9 .. "fire-dist-9x19-pistol-int-06.ogg"}
local fire9 = {path .. "fire-9-01.ogg", path .. "fire-9-02.ogg", path .. "fire-9-03.ogg", path .. "fire-9-04.ogg", path .. "fire-9-05.ogg", path .. "fire-9-06.ogg"}
local fire9supp = {path .. "fire-9-sup-01.ogg", path .. "fire-9-sup-02.ogg", path .. "fire-9-sup-03.ogg", path .. "fire-9-sup-04.ogg", path .. "fire-9-sup-05.ogg", path .. "fire-9-sup-06.ogg"}

att.Hook_GetShootSound = function(wep, fsound)
    if wep:GetBuff_Override("Silencer") then
        return fire9supp
    else
        return fire9
    end
end

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire9dist
    end
end

att.Hook_GetDistantShootSoundIndoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire9distint
    end
end

att.Hook_SelectReloadAnimation = function(wep, anim)  -- i remember why arccw is rubbish	MinProgress changes doesn't work with TranslateAnimation
    return anim .. "_9mm"
end

att.Hook_TranslateAnimation = function(wep, anim)
    return anim .. "_9mm"
end

ArcCW.LoadAttachmentType(att, "uc_myt_scar_cal_9mm")

local att = {}
---------------------------------------------------------------------------------------------------------------------
att.PrintName = "SCAR-47 30-Round 7.62x39mm Mag"
att.AbbrevName = "30-Round 7.62 Mag"

att.Icon = Material("entities/att/ue_scar/l_762.png", "smooth mips")
att.Description = "Multi-Calibre configuration adapted for scavenging in Eastern Europe. Conversion retains more stopping power relative to .308 than the more common SCAR-L at the cost of unreliablity."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "uc_myt_scar_mag"
att.SortOrder = 30 + 308

att.AutoStats = true
att.HideIfBlocked = true

att.Override_ClipSize = 30
att.Override_Trivia_Calibre = "7.62x39mm Soviet"
att.Override_Trivia_Class = "Assault Rifle"
att.Override_ShellModel = "models/weapons/arccw/uc_shells/762x39.mdl"
att.Override_ShellScale = 1

att.Mult_Recoil = .7
att.Mult_Damage = ArcCW.UC.StdDmg["762_39"].max / ArcCW.UC.StdDmg["762_51"].max
att.Mult_DamageMin = ArcCW.UC.StdDmg["762_39"].min / ArcCW.UC.StdDmg["762_51"].min

att.Mult_Penetration = ArcCW.UC.StdDmg["762_39"].pen / ArcCW.UC.StdDmg["762_51"].pen
att.Mult_MuzzleVelocity = ArcCW.UC.StdDmg["762_39"].vel / ArcCW.UC.StdDmg["762_51"].vel
att.Mult_PhysBulletMuzzleVelocity = ArcCW.UC.StdDmg["762_39"].vel / ArcCW.UC.StdDmg["762_51"].vel

att.Override_Malfunction = true
att.Mult_MalfunctionMean = 0.7
att.Mult_MalfunctionVariance = 1.5

att.ActivateElements = {"conv_ak"}

local tail762 = ")/arccw_uc/common/762x39/"
local fire762dist = {tail762 .. "fire-dist-762x39-rif-ext-01.ogg", tail762 .. "fire-dist-762x39-rif-ext-02.ogg", tail762 .. "fire-dist-762x39-rif-ext-03.ogg", tail762 .. "fire-dist-762x39-rif-ext-04.ogg", tail762 .. "fire-dist-762x39-rif-ext-05.ogg", tail762 .. "fire-dist-762x39-rif-ext-06.ogg"}
local fire762distint = {tail762 .. "fire-dist-762x39-rif-int-01.ogg", tail762 .. "fire-dist-762x39-rif-int-02.ogg", tail762 .. "fire-dist-762x39-rif-int-03.ogg", tail762 .. "fire-dist-762x39-rif-int-04.ogg", tail762 .. "fire-dist-762x39-rif-int-05.ogg", tail762 .. "fire-dist-762x39-rif-int-06.ogg"}
local fire762 = {path .. "fire-762-01.ogg", path .. "fire-762-02.ogg", path .. "fire-762-03.ogg", path .. "fire-762-04.ogg", path .. "fire-762-05.ogg", path .. "fire-762-06.ogg"}
local fire762supp = {path .. "fire-762-sup-01.ogg", path .. "fire-762-sup-02.ogg", path .. "fire-762-sup-03.ogg", path .. "fire-762-sup-04.ogg", path .. "fire-762-sup-05.ogg", path .. "fire-762-sup-06.ogg"}

att.Hook_GetShootSound = function(wep, fsound)
    if wep:GetBuff_Override("Silencer") then
        return fire762supp
    else
        return fire762
    end
end

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire762dist
    end
end

att.Hook_GetDistantShootSoundIndoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire762distint
    end
end

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_ak"
end
att.Hook_TranslateAnimation = function(wep, anim)
    return anim .. "_ak"
end

ArcCW.LoadAttachmentType(att, "uc_myt_scar_cal_762")

---------------------------------------------------------------------------------------------------------------------
local att = {}

att.PrintName = "SCAR-47 70-Round 7.62x39mm Mag"
att.AbbrevName = "70-Round 7.62 Mag"

att.Icon = Material("entities/att/ue_scar/l_hamr.png", "smooth mips")
att.Description = "You are not getting a proper HAMR. Bulky contraption is more prone to jamming"
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "uc_myt_scar_mag"
att.SortOrder = 70 + 308

att.AutoStats = true
att.HideIfBlocked = true

att.Override_ClipSize = 70
att.Override_Trivia_Calibre = "7.62x39mm Soviet"
att.Override_Trivia_Class = "Assault Rifle"
att.Override_ShellModel = "models/weapons/arccw/uc_shells/762x39.mdl"
att.Override_ShellScale = 1

att.Mult_Recoil = .7
att.Mult_Damage = ArcCW.UC.StdDmg["762_39"].max / ArcCW.UC.StdDmg["762_51"].max
att.Mult_DamageMin = ArcCW.UC.StdDmg["762_39"].min / ArcCW.UC.StdDmg["762_51"].min

att.Mult_Penetration = ArcCW.UC.StdDmg["762_39"].pen / ArcCW.UC.StdDmg["762_51"].pen
att.Mult_MuzzleVelocity = ArcCW.UC.StdDmg["762_39"].vel / ArcCW.UC.StdDmg["762_51"].vel
att.Mult_PhysBulletMuzzleVelocity = ArcCW.UC.StdDmg["762_39"].vel / ArcCW.UC.StdDmg["762_51"].vel

att.ActivateElements = {"conv_ak70"}
att.ExcludeFlags = {"hg_short"}

att.Override_Malfunction = true
att.Mult_MalfunctionMean = 0.6
att.Mult_MalfunctionVariance = 1.75

att.Mult_SightTime = 1.3
att.Mult_Sway = 2.5
att.Mult_SpeedMult = 0.9
att.Mult_ShootSpeedMult = 0.8
att.Mult_DrawTime = 1.2
att.Mult_RecoilSide = 1.5
att.Mult_HolsterTime = 1.2
att.Mult_RecoilSide = 1.1

att.LHIK = true
att.LHIK_Priority = -10
att.Model = "models/weapons/arccw/c_uc_myt_scar_ik_bodge.mdl"
att.ModelBodygroups = "0"
att.DroppedModel = "models/items/boxsrounds.mdl"
att.ModelOffset = Vector(-17, -3.5, 5.1)

local tail762 = ")/arccw_uc/common/762x39/"
local fire762dist = {tail762 .. "fire-dist-762x39-rif-ext-01.ogg", tail762 .. "fire-dist-762x39-rif-ext-02.ogg", tail762 .. "fire-dist-762x39-rif-ext-03.ogg", tail762 .. "fire-dist-762x39-rif-ext-04.ogg", tail762 .. "fire-dist-762x39-rif-ext-05.ogg", tail762 .. "fire-dist-762x39-rif-ext-06.ogg"}
local fire762distint = {tail762 .. "fire-dist-762x39-rif-int-01.ogg", tail762 .. "fire-dist-762x39-rif-int-02.ogg", tail762 .. "fire-dist-762x39-rif-int-03.ogg", tail762 .. "fire-dist-762x39-rif-int-04.ogg", tail762 .. "fire-dist-762x39-rif-int-05.ogg", tail762 .. "fire-dist-762x39-rif-int-06.ogg"}
local fire762 = {path .. "fire-762-01.ogg", path .. "fire-762-02.ogg", path .. "fire-762-03.ogg", path .. "fire-762-04.ogg", path .. "fire-762-05.ogg", path .. "fire-762-06.ogg"}
local fire762supp = {path .. "fire-762-sup-01.ogg", path .. "fire-762-sup-02.ogg", path .. "fire-762-sup-03.ogg", path .. "fire-762-sup-04.ogg", path .. "fire-762-sup-05.ogg", path .. "fire-762-sup-06.ogg"}

att.Hook_GetShootSound = function(wep, fsound)
    if wep:GetBuff_Override("Silencer") then
        return fire762supp
    else
        return fire762
    end
end

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire762dist
    end
end

att.Hook_GetDistantShootSoundIndoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire762distint
    end
end

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_ak_drum"
end

att.Hook_TranslateAnimation = function(wep, anim)
    return anim .. "_ak_drum"
end

ArcCW.LoadAttachmentType(att, "uc_myt_scar_cal_762_70")

---------------------------------------------------------------------------------------------------------------------
local att = {}

att.PrintName = "SCAR-L 30-Round STANAG Mag"
att.AbbrevName = "30-Round 5.56 Mag"

att.Icon = Material("entities/att/ue_scar/l_556.png", "smooth mips")
att.Description = "Barrel and receiver group that accepts an intermediate cartridge, downgrading the weapon into an assault rifle."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "uc_myt_scar_mag"
att.SortOrder = 30 + 56

att.Override_Ammo = "smg1"
att.Override_Trivia_Calibre = "5.56x45mm NATO"
att.Override_Trivia_Class = "Assault Rifle"

att.Mult_RPM = 1.083 -- 650 rpm
att.Mult_SightedSpeedMult = 1.05
att.Mult_ReloadTime = .95
att.Mult_Recoil = 0.45
att.Mult_HipDispersion = .75

att.Mult_Damage = ArcCW.UC.StdDmg["762_39"].max / ArcCW.UC.StdDmg["762_51"].max
att.Mult_DamageMin = ArcCW.UC.StdDmg["762_39"].min / ArcCW.UC.StdDmg["762_51"].min

att.Mult_Penetration = ArcCW.UC.StdDmg["762_39"].pen / ArcCW.UC.StdDmg["762_51"].pen
att.Mult_MuzzleVelocity = ArcCW.UC.StdDmg["762_39"].vel / ArcCW.UC.StdDmg["762_51"].vel
att.Mult_PhysBulletMuzzleVelocity = ArcCW.UC.StdDmg["762_39"].vel / ArcCW.UC.StdDmg["762_51"].vel
att.ShootPitchVariation = 1
att.Override_ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
att.Override_ShellScale = 1

att.GivesFlags = {"cal_556"}

att.AutoStats = true
att.HideIfBlocked = true

att.Override_ClipSize = 30

att.ActivateElements = {"conv_556"}

local tail556 = ")/arccw_uc/common/556x45/"
local fire556dist = {tail556 .. "fire-dist-556x45-rif-ext-01.ogg", tail556 .. "fire-dist-556x45-rif-ext-02.ogg", tail556 .. "fire-dist-556x45-rif-ext-03.ogg", tail556 .. "fire-dist-556x45-rif-ext-04.ogg", tail556 .. "fire-dist-556x45-rif-ext-05.ogg", tail556 .. "fire-dist-556x45-rif-ext-06.ogg"}
local fire556distint = {tail556 .. "fire-dist-556x45-rif-int-01.ogg", tail556 .. "fire-dist-556x45-rif-int-02.ogg", tail556 .. "fire-dist-556x45-rif-int-03.ogg", tail556 .. "fire-dist-556x45-rif-int-04.ogg", tail556 .. "fire-dist-556x45-rif-int-05.ogg", tail556 .. "fire-dist-556x45-rif-int-06.ogg"}
local fire556 = {path .. "fire-556-01.ogg", path .. "fire-556-02.ogg", path .. "fire-556-03.ogg", path .. "fire-556-04.ogg", path .. "fire-556-05.ogg", path .. "fire-556-06.ogg"}
local fire556supp = {path .. "fire-556-sup-01.ogg", path .. "fire-556-sup-02.ogg", path .. "fire-556-sup-03.ogg", path .. "fire-556-sup-04.ogg", path .. "fire-556-sup-05.ogg", path .. "fire-556-sup-06.ogg"}

att.Hook_GetShootSound = function(wep, fsound)
    if wep:GetBuff_Override("Silencer") then
        return fire556supp
    else
        return fire556
    end
end

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire556dist
    end
end

att.Hook_GetDistantShootSoundIndoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire556distint
    end
end

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_556"
end

att.Hook_TranslateAnimation = function(wep, anim)
    return anim .. "_556"
end

ArcCW.LoadAttachmentType(att, "uc_myt_scar_cal_556")

---------------------------------------------------------------------------------------------------------------------
local att = {}

att.PrintName = "SCAR-H 10-Round SPP Mag"
att.AbbrevName = "10-Round .308 Mag"

att.Icon = Material("entities/att/ue_scar/l_308.png", "smooth mips")
att.Description = "Flush magazine armed with     harder    bullets     what increases    damage    by      making it     sharper?? Text impending."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "uc_myt_scar_mag"
att.SortOrder = 10 + 308

att.Mult_DamageMin = 1.2   --- a fucking reason to use it, lol it reloads slower than 20 round
att.Mult_Damage = 1.2
att.Mult_Penetration = 40 / 20

att.AutoStats = true
att.HideIfBlocked = true

att.Override_ClipSize = 10

att.ActivateElements = {"conv_ssr"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_ssr"
end

att.Hook_TranslateAnimation = function(wep, anim)
    return anim .. "_ssr"
end

ArcCW.LoadAttachmentType(att, "uc_myt_scar_cal_ssr")



-- Stocks ---------------------------------------------------------
local att = {}

att.PrintName = "Marksman Stock"
att.Icon = Material("entities/att/ue_scar/s_ssr.png", "smooth mips")
att.Description = [[Heavy-duty and cumbersome marksman stock. Advised to use with according marksman build.]]
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_myt_scar_stock"

att.AutoStats = true
att.SortOrder = 4

att.Mult_HipDispersion = 0.65
att.Mult_MoveDispersion = 0.95
att.Mult_SightTime = 1.15
att.Mult_Recoil = 0.85
att.Mult_Sway = 0.75

att.Add_BarrelLength = 0

att.ActivateElements = {"stock_ssr"}

ArcCW.LoadAttachmentType(att, "uc_myt_scar_stock_ssr")

local att = {}

att.PrintName = "AMCAR 231 Wire Stock"
att.AbbrevName = "M231 Wire Stock"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "M16 M231 Wire Stock"
end

att.Icon = Material("entities/att/acwatt_ud_m16_stock_231.png", "smooth mips")
att.Description = "Wire stock used on the M231 FPW that provides some semblance of recoil control. Can be made even more agile by collapsing, improving point-shooting capabilities at the cost of recoil control.\n\nToggling this stock modifies performance accordingly."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_myt_scar_stock"

att.AutoStats = true
att.SortOrder = 3

att.Mult_SightTime = 0.75
att.Mult_Recoil = 1.25

att.Add_BarrelLength = -4

att.Mult_DrawTime = 0.75
att.Mult_HolsterTime = 0.75

att.ToggleSound = "arccw_uc/common/stockslide.ogg"

att.ToggleLockDefault = true
att.ToggleStats = {
    {
        PrintName = "Extended",
        AutoStats = true,
        ActivateElements = {"stock_231_ex"},
    },
    {
        PrintName = "Collapsed",
        AutoStats = true,
        Mult_HipDispersion = 0.6,
        Mult_MoveDispersion = 0.6,
        Mult_RecoilSide = 2,
        ActivateElements = {"stock_231_in"},
    },
}

ArcCW.LoadAttachmentType(att, "uc_myt_scar_stock_wire")

local att = {}

att.PrintName = "PDW Stock"
if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "MK16 Stock"
end
att.Icon = Material("entities/att/ue_scar/s_mk16.png", "smooth mips")
att.Description = "Collapsable stock what shortens the rifle when collapsed while still retaining a proper cheek weld.\n\nToggling this stock modifies performance accordingly."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_myt_scar_stock"

att.AutoStats = true
att.SortOrder = 4

att.Add_BarrelLength = 0

att.ToggleLockDefault = true
att.ToggleStats = {
    {
        PrintName = "Extended",
        AutoStats = true,
        ActivateElements = {"stock_pdw"},
		Mult_HipDispersion = 1.25,
		Mult_MoveDispersion = 1.2,
		Mult_SightTime = 0.75,
		Mult_Recoil = 1.25,
		Mult_Sway = 1.5,
    },
    {
        PrintName = "Collapsed",
        AutoStats = true,
        Mult_HipDispersion = 0.6,
        Mult_MoveDispersion = 0.6,
        Mult_RecoilSide = 2,
        ActivateElements = {"stock_pdwf"},
    },
}

ArcCW.LoadAttachmentType(att, "uc_myt_scar_stock_pdw")

local att = {}

att.PrintName = "Folding Stock"
att.Icon = Material("entities/att/ur_ak/stock/fold.png", "smooth mips")
att.Description = "Wrong gun. Completes with ARM CLIPPING when folded"
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Ignore = false
att.Slot = "uc_myt_scar_stock"

att.AutoStats = true
att.SortOrder = 4

att.Add_BarrelLength = 0

att.ToggleStats = {
    {
        PrintName = "Extended",
        AutoStats = true,
        ActivateElements = {"stock_fold"},
		Mult_HipDispersion = 0.75,
		Mult_MoveDispersion = 0.85,
		Mult_SightTime = 1.15,
		Mult_Recoil = 1.25,
		Mult_Sway = 1.5,
    },
    {
        PrintName = "Collapsed",
        AutoStats = true,
        Mult_HipDispersion = 0.6,
        Mult_MoveDispersion = 0.6,
        Mult_RecoilSide = 2,
        ActivateElements = {"stock_foldf"},
    },
}

ArcCW.LoadAttachmentType(att, "uc_myt_scar_stock_fold")

local att = {}

att.PrintName = "Folded Stock"

att.Icon = Material("entities/att/ue_scar/s_fold.png", "smooth mips")
att.Description = "Collapse the stock, enhancing the weapon's utility in corps-a-corps environment."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_myt_scar_stock"
att.ActivateElements = {"stock_folded"}
att.AutoStats = true
att.SortOrder = 65
att.Free = true

att.Mult_Sway = 1.25

att.Mult_SightedSpeedMult = 1.1
att.Mult_ShootSpeedMult = 1.1
att.Mult_RecoilSide = 1.5
att.Add_BarrelLength = -4

ArcCW.LoadAttachmentType(att, "uc_myt_scar_stock_folded")




local att = {}

-- Barrels ---------------------------------------------------------
att.PrintName = "20\" LB Barrel"
att.Icon = Material("entities/att/ue_scar/u_rail.png", "smooth mips")
att.Description = "Extended barrel with added railling."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_myt_scar_hg"

att.AutoStats = true
att.SortOrder = 20

att.Mult_SightTime = 1.15
att.Mult_SightedSpeedMult = 0.9
att.Mult_HipDispersion = 1.2

att.Mult_Recoil = 0.8
att.Mult_AccuracyMOA = 0.75
att.Mult_Range = 1.5
att.Mult_RPM = 0.9
att.Mult_Sway = 1.2

att.Add_BarrelLength = 5
att.Mult_PhysBulletMuzzleVelocity = 0.8

att.ActivateElements = {"hg_l"}
ArcCW.LoadAttachmentType(att, "uc_myt_scar_hg_l")

local att = {}

att.PrintName = "24\" MKX Barrel"
att.Icon = Material("entities/att/ue_scar/u_20.png", "smooth mips")
att.Description = "Extended barrel with added handguard. Texture scretching galore."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_myt_scar_hg"

att.AutoStats = true
att.SortOrder = 24

att.Mult_SightTime = 1.2
att.Mult_SightedSpeedMult = 0.7
att.Mult_HipDispersion = 1.25

att.Mult_Recoil = 0.75
att.Mult_AccuracyMOA = 0.65
att.Mult_Range = 2
att.Mult_RPM = 0.875
att.Mult_Sway = 1.5

att.Add_BarrelLength = 8
att.Mult_PhysBulletMuzzleVelocity = 1.2

att.ActivateElements = {"hg_20"}
ArcCW.LoadAttachmentType(att, "uc_myt_scar_hg_20")

local att = {}

att.PrintName = "10\" CQC Barrel"
att.Icon = Material("entities/att/ue_scar/u_xs.png", "smooth mips")
att.Description = "Carbine length handguard and barrel package."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_myt_scar_hg"

att.AutoStats = true
att.SortOrder = 10

att.LHIK = true
att.LHIK_Priority = -20
att.Model = "models/weapons/arccw/c_uc_myt_scar.mdl"
att.ModelBodygroups = "1460563944"
att.DroppedModel = "models/items/boxsrounds.mdl"
att.ModelOffset = (Vector(0.41, 0, -1.63) - Vector(3.5, 0, -3.2))

att.Mult_SightTime = 0.85
att.Mult_SpeedMult = 1.025
att.Mult_SightedSpeedMult = 1.1
att.Mult_HipDispersion = 0.7

att.Mult_RPM = 1.15
att.Mult_Recoil = 1.5
att.Mult_AccuracyMOA = 2
att.Mult_Range = 0.5
att.Mult_Sway = 0.75

att.Add_BarrelLength = -6
att.Mult_PhysBulletMuzzleVelocity = 0.729167

att.ActivateElements = {"hg_s", "hg_short"}
att.ExcludeFlags = {"conv_ak70"}
ArcCW.LoadAttachmentType(att, "uc_myt_scar_hg_s")

local att = {}

att.PrintName = "6.5\" PDW Barrel"
att.Icon = Material("entities/att/ue_scar/u_s.png", "smooth mips")
att.Description = "Shoot your finger off with this one trick."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_myt_scar_hg"

att.AutoStats = true
att.SortOrder = 6.5

att.LHIK = true
att.LHIK_Priority = -20
att.Model = "models/weapons/arccw/c_uc_myt_scar.mdl"
att.ModelBodygroups = "1460563944"
att.DroppedModel = "models/items/boxsrounds.mdl"
att.ModelOffset = (Vector(0.41, 0, -1.63) - Vector(5, 0, -3.2))

att.Mult_SightTime = 0.85
att.Mult_SpeedMult = 1.025
att.Mult_SightedSpeedMult = 1.1
att.Mult_HipDispersion = 0.7

att.Mult_RPM = 1.25
att.Mult_Recoil = 1.75
att.Mult_AccuracyMOA = 2.5
att.Mult_Range = 0.35
att.Mult_Sway = 0.7

att.Add_BarrelLength = -10
att.Mult_PhysBulletMuzzleVelocity = 0.65

att.ActivateElements = {"hg_xs", "hg_short"}
att.ExcludeFlags = {"conv_ak70"}
ArcCW.LoadAttachmentType(att, "uc_myt_scar_hg_xs")



local att = {}

att.PrintName = "16\" Whisper Barrel"
att.Icon = Material("entities/att/ue_scar/u_sd.png", "smooth mips")
att.Description = "Mytton, youre susposed to stop digging up dead horses"
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_myt_scar_hg"

att.AutoStats = true
att.SortOrder = 16

att.Silencer = true
att.SDBarrel = true
att.Override_MuzzleEffect = "muzzleflash_suppressed"

att.Mult_SightTime = 1.05

att.Mult_Range = 0.85
att.Mult_Recoil = 0.95
att.Mult_AccuracyMOA = 1.15
att.Mult_HipDispersion = 0.9

att.Add_BarrelLength = 4
att.Mult_PhysBulletMuzzleVelocity = 1.2

att.Override_Jamming = true
att.Override_HeatLockout = false
att.Override_HeatFix = false
att.Override_HeatCapacity = 90
att.Override_HeatDelayTime = 2
att.Override_HeatDissipation = 7.5

att.Mult_ShootVol = 0.65

att.ActivateElements = {"hg_sd"}
att.GivesFlags = {"sd"}
ArcCW.LoadAttachmentType(att, "uc_myt_scar_hg_sd")



-- Grips ---------------------------------------------------------

local att = {}

att.PrintName = "Flat Grip"
att.Icon = Material("entities/att/acwatt_ud_m16_stock_608.png", "smooth mips")
att.Description = "you cant even fucking see it"
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_myt_scar_grip"

att.AutoStats = true

att.ActivateElements = {"grip_flat"}
ArcCW.LoadAttachmentType(att, "uc_myt_scar_grip_flat")

local att = {}

att.PrintName = "Skeleton Grip"
att.Icon = Material("entities/att/acwatt_ud_m16_stock_608.png", "smooth mips")
att.Description = "Hollow Knight Silksong"
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_myt_scar_grip"

att.AutoStats = true

att.ActivateElements = {"grip_hollow"}
ArcCW.LoadAttachmentType(att, "uc_myt_scar_grip_ske")

--addons/[binbon]arccw_modify/lua/arccw/shared/sh_localization.lua:
return gluapack()()
--lua/arccw/shared/languages/ur_en.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_penetration.lua:
local mth      = math
local m_rand   = mth.Rand
local m_lerp   = Lerp

local function draw_debug()
    return (CLIENT or game.SinglePlayer()) and ArcCW.ConVars["dev_shootinfo"]:GetInt() >= 2
end

function ArcCW:GetRicochetChance(penleft, tr)
    if !ArcCW.ConVars["enable_ricochet"]:GetBool() then return 0 end
    local degree = tr.HitNormal:Dot((tr.StartPos - tr.HitPos):GetNormalized())

    local ricmult = ArcCW.PenTable[tr.MatType] or 1

    -- 0 at 1
    -- 100 at 0

    local c = Lerp(degree, math.min(penleft * ricmult * 2, 45), 0)

    -- c = c * ArcCW.ConVars["ricochet_mult"]:GetFloat()

    -- c = 100

    return math.Clamp(c, 0, 100)
end

function ArcCW:IsPenetrating(ptr, ptrent)
    if ptrent:IsWorld() then
        return ptr.Contents != CONTENTS_EMPTY
    elseif IsValid(ptrent) then

        local withinbounding = false
        local hboxset = ptrent:GetHitboxSet()
        local hitbone = ptrent:GetHitBoxBone(ptr.HitBox, hboxset)
        if hitbone then
            -- If we hit a hitbox, compare against that hitbox only
            local mins, maxs = ptrent:GetHitBoxBounds(ptr.HitBox, hboxset)
            local bonepos, boneang = ptrent:GetBonePosition(hitbone)
            mins = mins * 1.1
            maxs = maxs * 1.1
            local lpos = WorldToLocal(ptr.HitPos, ptr.HitNormal:Angle(), bonepos, boneang)

            withinbounding = lpos:WithinAABox(mins, maxs)
            if draw_debug() then
                debugoverlay.BoxAngles(bonepos, mins, maxs, boneang, 5, Color(255, 255, 255, 10))
            end
        elseif util.PointContents(ptr.HitPos) != CONTENTS_EMPTY then
            -- Otherwise default to rotated OBB
            local mins, maxs = ptrent:OBBMins(), ptrent:OBBMaxs()
            withinbounding = ptrent:WorldToLocal(ptr.HitPos):WithinAABox(mins, maxs)
            if draw_debug() then
                debugoverlay.BoxAngles(ptrent:GetPos(), mins, maxs, ptrent:GetAngles(), 5, Color(255, 255, 255, 10))
            end
        end
        if draw_debug() then
            debugoverlay.Cross(ptr.HitPos, withinbounding and 4 or 6, 5, withinbounding and Color(255, 255, 0) or Color(128, 255, 0), true)
        end


        return withinbounding
    end
    return false
end

function ArcCW:DoPenetration(tr, damage, bullet, penleft, physical, alreadypenned)
    local hitpos, startpos = tr.HitPos, tr.StartPos
    local dir    = (hitpos - startpos):GetNormalized()

    -- Added in e5adb54: "temporarily disable visual pen bullet until a solution is found"
    -- i don't remember the issue though
    -- if CLIENT then
    --     return
    -- end

    if tr.HitSky then return end

    if penleft <= 0 then return end

    alreadypenned = alreadypenned or {}

    local skip = false

    local trent = tr.Entity

    local penmult     = ArcCW.PenTable[tr.MatType] or 1
    local pentracelen = 4
    local curr_ent    = trent
    local startpen = penleft

    if !tr.HitWorld then penmult = penmult * 1.5 end

    if trent.mmRHAe then penmult = trent.mmRHAe end

    penmult = penmult * m_rand(0.9, 1.1) * m_rand(0.9, 1.1)

    local endpos = hitpos

    local td  = {}
    td.start  = endpos
    td.endpos = endpos + (dir * pentracelen)
    td.mask   = MASK_SHOT

    local ptr = util.TraceLine(td)

    local ptrent = ptr.Entity

    if ArcCW:GetRicochetChance(penleft, tr) > math.random(0, 100) then
        local degree = tr.HitNormal:Dot((tr.StartPos - tr.HitPos):GetNormalized())
        if degree == 0 or degree == 1 then return end
        sound.Play(ArcCW.RicochetSounds[math.random(#ArcCW.RicochetSounds)], tr.HitPos)
        if (tr.Normal:Length() == 0) then return end
        -- ACT3_ShootPBullet(tr.HitPos, ((2 * degree * tr.HitNormal) + tr.Normal) * (vel * math.Rand(0.25, 0.75)), owner, inflictor, bulletid, false, 1, penleft, dist)
        -- return

        dir = (2 * degree * tr.HitNormal) + tr.Normal
        ang = dir:Angle()
        ang = ang + (AngleRand() * (1 - degree) * 15 / 360)
        dir = ang:Forward()

        local d = math.Rand(0.25, 0.95)

        penleft = penleft * d

        skip = true
    end

    if !ArcCW.ConVars["enable_penetration"]:GetBool() then return end

    local factor = 1
    while !skip and penleft > 0 and ArcCW:IsPenetrating(ptr, ptrent) and ptr.Fraction < 1 and ptrent == curr_ent do
        penleft = penleft - (pentracelen * penmult) * factor

        -- Prevent extremely long penetrations (such as with glass)
        factor = factor * 1.05

        td.start  = endpos
        td.endpos = endpos + (dir * pentracelen)
        td.mask   = MASK_SHOT

        ptr = util.TraceLine(td)

        -- This is never called because curr_ent is never updated, genius
        -- Damage is handled in abullet.Callback anyways
        --[[]
        if ptrent != curr_ent then
            ptrent = ptr.Entity

            curr_ent = ptrent

            local ptrhp  = ptr.HitPos
            -- local dist   = (ptrhp - tr.StartPos):Length() * ArcCW.HUToM
            local pdelta = penleft / bullet.Penetration

            local dmg = DamageInfo()
            dmg:SetDamageType(bullet.DamageType)
            dmg:SetDamage(damage * pdelta)
            dmg:SetDamagePosition(ptrhp)

            if IsValid(ptrent) and !alreadypenned[ptrent:EntIndex()] then ptrent:TakeDamageInfo(dmg) end

            penmult = ArcCW.PenTable[ptr.MatType] or 1

            if !ptr.HitWorld then penmult = penmult * 1.5 end

            if ptrent.mmRHAe then penmult = ptrent.mmRHAe end

            penmult = penmult * m_rand(0.9, 1.1) * m_rand(0.9, 1.1)

            debugoverlay.Line(endpos, endpos + (dir * pentracelen), 10, Color(0, 0, 255), true)
        end
        ]]

        if draw_debug() then
            local pdeltap = penleft / bullet.Penetration
            local colorlr = m_lerp(pdeltap, 0, 255)

            debugoverlay.Line(endpos, endpos + (dir * pentracelen), 10, Color(255, colorlr, colorlr), true)
        end

        endpos = endpos + (dir * pentracelen)

        dir = dir + (VectorRand() * 0.025 * penmult)
    end

    if penleft > 0 then
        if (dir:Length() == 0) then return end

        -- Recover penetration lost from extra distance in the trace
        --penleft = penleft + ptr.Fraction * pentracelen / penmult

        if draw_debug() then
            debugoverlay.Text(endpos + Vector(0, 0, 2), "(" .. math.Round(penleft, 2) .. "mm)", 5)
        end

        local pdelta = penleft / bullet.Penetration

        local attacker = bullet.Attacker

        if !IsValid(attacker) then
            attacker = game.GetWorld()
        end

        if physical then
            if !ptr.HitWorld then
                alreadypenned[ptrent:EntIndex()] = true
            end

            local newbullet = {}
            newbullet.DamageMin = bullet.DamageMin or 1
            newbullet.DamageMax = bullet.DamageMax or 10
            newbullet.Range = bullet.Range or 100
            newbullet.DamageType = bullet.DamageType or DMG_BULLET
            newbullet.Penleft = penleft
            newbullet.Penetration = bullet.Penetration
            newbullet.Num = bullet.Num or 1
            newbullet.Pos = endpos
            local spd = bullet.Vel:Length()
            newbullet.Attacker = bullet.Attacker
            newbullet.Vel = dir * spd * (penleft / startpen)
            newbullet.Drag = bullet.Drag or 1
            newbullet.Travelled = bullet.Travelled + (endpos - hitpos):Length()
            newbullet.Damaged = alreadypenned
            newbullet.Profile = bullet.Profile or 1
            newbullet.Gravity = bullet.Gravity or 1
            newbullet.StartTime = bullet.StartTime or CurTime()
            newbullet.PhysBulletImpact = bullet.PhysBulletImpact or true
            newbullet.Weapon = bullet.Weapon

            if bit.band( util.PointContents( endpos ), CONTENTS_WATER ) == CONTENTS_WATER then
                newbullet.Underwater = true
            end

            table.insert(ArcCW.PhysBullets, newbullet)

            ArcCW:SendBullet(newbullet)
        else
            local abullet = {}
            abullet.Attacker = owner
            abullet.Dir      = dir
            abullet.Src      = endpos
            abullet.Spread   = Vector(0, 0, 0)
            abullet.Damage   = 0
            abullet.Num      = 1
            abullet.Force    = 0
            abullet.Distance = 33000
            abullet.Tracer   = 0
            --abullet.IgnoreEntity = ptr.Entity
            abullet.Callback = function(att, btr, dmg)
                local dist = bullet.Travelled * ArcCW.HUToM
                bullet.Travelled = bullet.Travelled + (btr.HitPos - endpos):Length()

                if alreadypenned[btr.Entity:EntIndex()] then
                    dmg:SetDamage(0)
                else
                    dmg:SetDamageType(bullet.DamageType)
                    dmg:SetDamage(bullet.Weapon:GetDamage(dist, true) * pdelta, true)
                end

                if draw_debug() then
                    local e = endpos + dir * (btr.HitPos - endpos):Length()
                    debugoverlay.Line(endpos, e, 10, Color(150, 150, 150), true)
                    debugoverlay.Cross(e, 3, 10, alreadypenned[btr.Entity:EntIndex()] and Color(0, 128, 255) or Color(255, 128, 0), true)
                    debugoverlay.Text(e, math.Round(penleft, 1) .. "mm", 10)
                end
                if (CLIENT or game.SinglePlayer()) and ArcCW.ConVars["dev_shootinfo"]:GetInt() >= 1 and IsValid(btr.Entity) and !alreadypenned[btr.Entity:EntIndex()] then
                    local str = string.format("%ddmg/%dm(%d%%)", math.floor(bullet.Weapon:GetDamage(dist)), dist, math.Round((1 - bullet.Weapon:GetRangeFraction(dist)) * 100))
                    debugoverlay.Text(btr.Entity:WorldSpaceCenter(), str, 5)
                end

                alreadypenned[btr.Entity:EntIndex()] = true

                ArcCW:DoPenetration(btr, damage, bullet, penleft, false, alreadypenned)

                -- if !game.SinglePlayer() and CLIENT then
                    local fx = EffectData()
                    fx:SetStart(tr.HitPos)
                    fx:SetOrigin(btr.HitPos)
                    util.Effect("arccw_ricochet", fx)
                -- end
            end

            attacker:FireBullets(abullet)
        end

        --[[
        local atk = bullet.Attacker

        local supbullet = {}
            supbullet.Src      = hitpos
            supbullet.Dir      = -dir
            supbullet.Damage   = 0
            supbullet.Distance = 8
            supbullet.Tracer   = 0
            supbullet.Force    = 0

            attacker:FireBullets(supbullet, true)
        ]]

    end
end

function ArcCW:BulletCallback(att, tr, dmg, bullet, phys)

    local wep = phys and bullet.Weapon or bullet
    local hitpos, hitnormal = tr.HitPos, tr.HitNormal
    local trent = tr.Entity

    local dist = (phys and bullet.Travelled or (hitpos - tr.StartPos):Length() ) * ArcCW.HUToM
    local pen  = IsValid(wep) and wep:GetBuff("Penetration") or bullet.Penleft

    if ArcCW.ConVars["dev_shootinfo"]:GetInt() >= 1 then
        debugoverlay.Cross(hitpos, 1, 5, SERVER and Color(255, 0, 0) or Color(0, 0, 255), true)
    end

    local randfactor = IsValid(wep) and wep:GetBuff("DamageRand") or 0
    local mul = 1
    if randfactor > 0 then
        mul = mul * math.Rand(1 - randfactor, 1 + randfactor)
    end

    local delta = !IsValid(wep) and math.Clamp(bullet.Travelled / (bullet.Range / ArcCW.HUToM), 0, 1) or wep:GetRangeFraction(dist)
    local calc_damage = (!IsValid(wep) and Lerp(delta, bullet.DamageMax, bullet.DamageMin) or wep:GetDamage(dist, true)) * mul
    local dmgtyp = !IsValid(wep)  and bullet.DamageType or wep:GetBuff_Override("Override_DamageType", wep.DamageType) or DMG_BULLET

    local hit   = {}
    hit.att     = att
    hit.tr      = tr
    hit.dmg     = dmg
    hit.range   = dist
    hit.damage  = calc_damage
    hit.dmgtype = dmgtyp
    hit.penleft = pen

    if IsValid(wep) then
        hit = wep:GetBuff_Hook("Hook_BulletHit", hit)

        if !hit then return end
    end

    if bullet.Damaged and bullet.Damaged[tr.Entity:EntIndex()] then
        dmg:SetDamage(0)
    else
        dmg:SetDamageType(hit.dmgtype)
        dmg:SetDamage(hit.damage)
    end

    local dmgtable
    if phys and IsValid(bullet.Weapon) then
        dmgtable = bullet.Weapon:GetBuff_Override("Override_BodyDamageMults", bullet.Weapon.BodyDamageMults)
    elseif IsValid(wep) then
        dmgtable = wep:GetBuff_Override("Override_BodyDamageMults", wep.BodyDamageMults)
    else
        dmgtable = bullet.BodyDamageMults
    end

    if dmgtable then
        local hg = tr.HitGroup
        local gam = ArcCW.LimbCompensation[engine.ActiveGamemode()] or ArcCW.LimbCompensation[1]
        if dmgtable[hg] then
            dmg:ScaleDamage(dmgtable[hg])

            -- cancelling gmod's stupid default values (but only if we have a multiplier)
            if ArcCW.ConVars["bodydamagemult_cancel"]:GetBool() and gam[hg] then dmg:ScaleDamage(gam[hg]) end
        end
    end

    if IsValid(att) and att:IsNPC() then
        dmg:ScaleDamage(wep:GetBuff_Mult("Mult_DamageNPC") or 1)
    end

    local effect = phys and bullet.ImpactEffect or (IsValid(wep) and wep:GetBuff_Override("Override_ImpactEffect", wep.ImpactEffect))
    local decal  = phys and bullet.ImpactDecal or (IsValid(wep) and wep:GetBuff_Override("Override_ImpactDecal", wep.ImpactDecal))

    -- Do our handling of damage types, if not ignored by the gun or some attachment
    if IsValid(wep) and !wep:GetBuff_Override("Override_DamageTypeHandled", wep.DamageTypeHandled) then
        local _, maxrng = wep:GetMinMaxRange()
        -- ignite target
        if dmg:IsDamageType(DMG_BURN) then
            if maxrng <= hit.range then
                dmg:SetDamageType(DMG_BULLET)
            else
                effect = "arccw_incendiaryround"
                decal  = "FadingScorch"

                if SERVER then
                    if vFireInstalled then
                        CreateVFire(trent, hitpos, hitnormal, hit.damage * 0.02)
                    else
                        trent:Ignite(1, 0)
                    end
                end
            end
        end
        -- explode target
        if dmg:IsDamageType(DMG_BLAST) then
            if dmg:GetDamage() >= 200 then
                effect = "Explosion"
                decal  = "Scorch"
            else
                effect = "arccw_incendiaryround"
                decal  = "FadingScorch"
            end
            dmg:ScaleDamage(0.5) -- half applied as explosion and half done to hit target
            util.BlastDamageInfo(dmg, tr.HitPos, math.Clamp(dmg:GetDamage(), 48, 256))
            dmg:SetDamageType(dmg:GetDamageType() - DMG_BLAST)
        end
        -- damage helicopters
        if dmg:IsDamageType(DMG_BULLET) and !dmg:IsDamageType(DMG_AIRBOAT)
                and IsValid(hit.tr.Entity) and hit.tr.Entity:GetClass() == "npc_helicopter" then
            dmg:SetDamageType(dmg:GetDamageType() + DMG_AIRBOAT)
            dmg:ScaleDamage(0.1) -- coostimizable?
        elseif dmg:GetDamageType() != DMG_BLAST and IsValid(hit.tr.Entity) and hit.tr.Entity:GetClass() == "npc_combinegunship" then
            dmg:SetDamageType(DMG_BLAST)
            dmg:ScaleDamage(0.05)
            -- there is a damage threshold of 50 for damaging gunships
            if dmg:GetDamage() < 50 and dmg:GetDamage() / 200 >= math.random() then
                dmg:SetDamage(50)
            end
        end

        -- pure DMG_BUCKSHOT do not create blood decals, somehow
        if dmg:GetDamageType() == DMG_BUCKSHOT then
            dmg:SetDamageType(dmg:GetDamageType() + DMG_BULLET)
        end
    end

    if SERVER and IsValid(wep) then wep:TryBustDoor(trent, dmg) end

    -- INCONSISTENCY: For physbullet, the entire bullet is copied; hitscan bullets reset some attributes in SWEP:DoPenetration (most notably damage)
    -- For now, we just reset some changes as a temporary workaround
    if !IsValid(wep) then
        bullet.Damage = calc_damage
        bullet.DamageType = dmgtyp
        ArcCW:DoPenetration(tr, hit.damage, bullet, bullet.Penleft, true, bullet.Damaged)
    else
        wep:DoPenetration(tr, hit.penleft, { [trent:EntIndex()] = true })
    end

    if effect then
        local ed = EffectData()
        ed:SetOrigin(hitpos)
        ed:SetNormal(hitnormal)
        util.Effect(effect, ed)
    end

    if decal then
        util.Decal(decal, tr.StartPos, hitpos - (hitnormal * 16), wep:GetOwner())
    end

    if (CLIENT or game.SinglePlayer()) and (!phys or SERVER) and ArcCW.ConVars["dev_shootinfo"]:GetInt() >= 1 then
        local str = string.format("%ddmg/%dm(%d%%)", math.floor(dmg:GetDamage()), dist, math.Round((1 - delta) * 100))
        debugoverlay.Text(hitpos, str, 10)
        print(str)
    end

    if IsValid(wep) then
        wep:GetBuff_Hook("Hook_PostBulletHit", hit)
    end
end
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_physbullet2.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/client/cl_darkrp_optimization.lua:
-- DarkRP optimization file
-- This file caches commonly used functions and disables visual features for better performance

-- Cache LocalPlayer
local LPONLY = {} -- Functions that should only be cached during rendering/think hooks
local LP = NULL -- Will be set in hooks that run frequently

-- Cache LocalPlayer and commonly used methods
hook.Add("Think", "ArcCW_CacheLP", function()
    LP = LocalPlayer()
    if !IsValid(LP) then return end
    
    LPONLY.GetActiveWeapon = LP.GetActiveWeapon
    LPONLY.Health = LP.Health
    LPONLY.Alive = LP.Alive
    LPONLY.Team = LP.Team
    LPONLY.GetAmmo = LP.GetAmmo
    LPONLY.GetViewModel = LP.GetViewModel
end)

-- Make these functions available globally
function ArcCW.LocalPlayer()
    return LP
end

function ArcCW.LocalPlayerActiveWeapon()
    return IsValid(LP) and LPONLY.GetActiveWeapon and LPONLY.GetActiveWeapon(LP) or NULL
end

function ArcCW.LocalPlayerHealth() 
    return IsValid(LP) and LPONLY.Health and LPONLY.Health(LP) or 0
end

function ArcCW.LocalPlayerAlive()
    return IsValid(LP) and LPONLY.Alive and LPONLY.Alive(LP) or false
end

-- Disable visual effects through convars
hook.Add("InitPostEntity", "ArcCW_DisableVisualEffects", function()
    -- Disable shell ejection effects
    RunConsoleCommand("arccw_shelleffects", "0")
    
    -- Disable blur effects
    RunConsoleCommand("arccw_blur", "0")
    
    -- Disable muzzle effects
    RunConsoleCommand("arccw_muzzleeffects", "0")
    
    -- Use fast tracers
    RunConsoleCommand("arccw_fasttracers", "1")
    
    -- Disable shell time (how long shells stay in world)
    RunConsoleCommand("arccw_shelltime", "0")
    
    -- Force fast muzzle effects
    RunConsoleCommand("arccw_fastmuzzles", "1")
    
    -- Disable other visual features
    RunConsoleCommand("arccw_shake", "0")
    RunConsoleCommand("arccw_shakevm", "0")
    
    print("ArcCW: Visual effects disabled for performance")
end)

-- Replace NPC-related functions with empty stubs
ArcCW.NPC_SetupAttachments = function() end
ArcCW.NPC_SelectBestAttachments = function() end
ArcCW.NPCAttachmentTable = {}


--addons/[binbon]arccw_modify/lua/arccw/client/cl_npc.lua:
hook.Add("PopulateMenuBar", "ArcCW_NPCWeaponMenu", function (menubar)
    local menu = menubar:AddOrGetMenu("ArcCW NPC Weapons")

    menu:AddCVar("None", "gmod_npcweapon", "none")
    menu:AddSpacer()

    local weaponlist = weapons.GetList()

    table.SortByMember(weaponlist, "PrintName", true)

    local cats = {}

    for _, k in pairs(weaponlist) do
        if weapons.IsBasedOn(k.ClassName, "arccw_base") and !k.NotForNPCs and !k.PrimaryBash and k.Spawnable then
            local cat = k.Category or "Other"

            if !cats[cat] then cats[cat] = menu:AddSubMenu(cat) end

            cats[cat]:SetDeleteSelf(false)
            cats[cat]:AddCVar(k.PrintName, "gmod_npcweapon", k.ClassName)
        end
    end
end)

net.Receive("arccw_npcgiverequest", function(len, ply)
    local class = GetConVar("gmod_npcweapon"):GetString()

    net.Start("arccw_npcgivereturn")
    net.WriteString(class)
    net.SendToServer()
end)
--addons/policearmorylocker/lua/armory_locker/client/armory_locker_client.lua:
local col_invs = Color( 0, 0, 0, 0 )
local col_white = Color( 255, 255, 255, 175 )
local mat_col = Color( 255, 255, 255, 255 )
local wa_ui = Material( "craphead_scripts/armory_robbery_ui/armory_ui.png" )

local col_green = Color( 0, 75, 0, 150 )
local col_light_green = Color( 0, 125, 0, 150 )
local col_red = Color( 125, 0, 0, 210 )

net.Receive( "ARM_LOCKER_Weapon_Menu", function( len, ply )
	local locker_ent = net.ReadEntity()
	local locker_num = net.ReadInt( 8 )
	
	local item_1 = net.ReadTable()
	local item_2 = net.ReadTable()
	local item_3 = net.ReadTable()
	
	local wep1taken = false
	local wep2taken = false
	local wep3taken = false

	local LOCKER_GUI_Frame = vgui.Create("DFrame")
	LOCKER_GUI_Frame:SetTitle("")
	LOCKER_GUI_Frame:SetSize( ScrW() * 0.5432, ScrH() * 0.47226 )
	LOCKER_GUI_Frame:Center()
	LOCKER_GUI_Frame.Paint = function(CHPaint)
		surface.SetDrawColor( mat_col )
		surface.SetMaterial( wa_ui )

		surface.DrawTexturedRect( 0, 0, ScrW() * 0.5432, ScrH() * 0.47226 )
		-- Draw the top title.
		draw.SimpleText("Weapon Locker", "ARMORY_UIFontTitle", ScrW() * 0.09, ScrH() * 0.02, mat_col, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		
		if wep1taken then
			draw.SimpleText("Item Taken", "ARMORY_UIFontButton", ScrW() * 0.115, ScrH() * 0.338, col_red, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end
		if wep2taken then
			draw.SimpleText("Item Taken", "ARMORY_UIFontButton", ScrW() * 0.272, ScrH() * 0.338, col_red, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end
		if wep3taken then
			draw.SimpleText("Item Taken", "ARMORY_UIFontButton", ScrW() * 0.428, ScrH() * 0.338, col_red, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end
	end
	LOCKER_GUI_Frame:MakePopup()
	LOCKER_GUI_Frame:SetDraggable( false )
	LOCKER_GUI_Frame:ShowCloseButton( false )

	local GUI_Armory_Exit = vgui.Create( "DButton", LOCKER_GUI_Frame )
	GUI_Armory_Exit:SetSize( ScrW() * 0.015, ScrW() * 0.015 )
	GUI_Armory_Exit:SetPos( ScrW() * 0.498, ScrH() * 0.0075 )
	GUI_Armory_Exit:SetText( "" )
	GUI_Armory_Exit.Paint = function()
		draw.RoundedBox( 8, 1, 1, GUI_Armory_Exit:GetWide(), GUI_Armory_Exit:GetTall(), col_invs )
	end
	GUI_Armory_Exit.DoClick = function()
		LOCKER_GUI_Frame:Remove()
		
		net.Start( "ARM_LOCKER_FinishLockpicking" )
			net.WriteEntity( locker_ent )
			net.WriteInt( locker_num, 8 )
		net.SendToServer()
	end
	
	-- Panel 1
	surface.SetFont( "ARMORY_UIFontButton" )
	local x, y = surface.GetTextSize( item_1.Name )
	if item_1.EntType == "ammo" then
		x, y = surface.GetTextSize( item_1.AmmoAmt .." x ".. item_1.Name )
	end
	
	local ItemName = vgui.Create( "DLabel", LOCKER_GUI_Frame )
	ItemName:SetPos( ( LOCKER_GUI_Frame:GetWide() / 4.7 ) - ( x / 2 ), ScrH() * 0.0925 )
	ItemName:SetFont( "ARMORY_UIFontButton" )
	ItemName:SetColor( mat_col )
	if item_1.EntType == "ammo" then
		ItemName:SetText( item_1.AmmoAmt .." x ".. item_1.Name )
	else
		ItemName:SetText( item_1.Name )
	end
	ItemName:SizeToContents()
	
	local Weapon1Panel = vgui.Create( "DPanel", LOCKER_GUI_Frame )
	Weapon1Panel:SetSize( ScrW() * 0.13, ScrH() * 0.3 )
	Weapon1Panel:SetPos( ScrW() * 0.05, ScrH() * 0.08 )
	Weapon1Panel.Paint = function()
		draw.RoundedBox( 8, 1, 1, Weapon1Panel:GetWide(), Weapon1Panel:GetTall(), col_invs )	
	end

	local Weapon1Icon = vgui.Create( "DModelPanel", Weapon1Panel )
	Weapon1Icon:SetPos( ScrW() * 0.13 * - 1, ScrH() * 0.343 * - 1 )
	Weapon1Icon:SetSize( ScreenScale( 250 ), ScreenScale( 250 ) )
	Weapon1Icon:SetModel( item_1.Model )
	Weapon1Icon:SetFOV( 90 )
	Weapon1Icon:SetCamPos( Vector( 90, 0, 0 ) )
	
	local GUI_Weapon1Take = vgui.Create( "DButton", Weapon1Panel )	
	GUI_Weapon1Take:SetSize( ScrW() * 0.0886, ScrH() * 0.039 )
	GUI_Weapon1Take:SetPos( ScrW() * 0.022, ScrH() * 0.24 )
	GUI_Weapon1Take:SetText( "" )
	GUI_Weapon1Take.Paint = function()
		if GUI_Weapon1Take:IsHovered() then
			draw.RoundedBoxEx( 8, 0, 0, GUI_Weapon1Take:GetWide(), GUI_Weapon1Take:GetTall(), col_light_green, false, false, false, false )
		else
			draw.RoundedBoxEx( 8, 0, 0, GUI_Weapon1Take:GetWide(), GUI_Weapon1Take:GetTall(), col_green, false, false, false, false )
		end

		local struc = {}
		struc.pos = {}
		struc.pos[1] = ScrW() * 0.0443
		struc.pos[2] = ScrH() * 0.0195
		struc.color = col_white
		struc.text = "Retrieve Item"
		struc.font = "ARMORY_UIFontButton" 
		struc.xalign = TEXT_ALIGN_CENTER
		struc.yalign = TEXT_ALIGN_CENTER
		draw.Text( struc )
	end
	GUI_Weapon1Take.DoClick = function()
		wep1taken = true
		
		net.Start( "ARM_LOCKER_StealItem" )
			net.WriteEntity( locker_ent )
			net.WriteTable( item_1 )
		net.SendToServer()
		
		GUI_Weapon1Take:Remove()
	end
	
	-- Panel 2
	local x, y = surface.GetTextSize( item_2.Name )
	if item_2.EntType == "ammo" then
		x, y = surface.GetTextSize( item_2.AmmoAmt .." x ".. item_2.Name )
	end
			
	local ItemName = vgui.Create( "DLabel", LOCKER_GUI_Frame )
	ItemName:SetPos( ( LOCKER_GUI_Frame:GetWide() / 2 ) - ( x / 2 ), ScrH() * 0.0925 )
	ItemName:SetFont( "ARMORY_UIFontButton" )
	ItemName:SetColor( mat_col )
	if item_2.EntType == "ammo" then
		ItemName:SetText( item_2.AmmoAmt .." x ".. item_2.Name )
	else
		ItemName:SetText( item_2.Name )
	end
	ItemName:SizeToContents()
	
	local Weapon2Panel = vgui.Create( "DPanel", LOCKER_GUI_Frame )
	Weapon2Panel:SetSize( ScrW() * 0.13, ScrH() * 0.3 )
	Weapon2Panel:SetPos( ScrW() * 0.207, ScrH() * 0.08 )
	Weapon2Panel.Paint = function()
		draw.RoundedBox( 8, 1, 1, Weapon2Panel:GetWide(), Weapon2Panel:GetTall(), col_invs )	
	end
	
	local Weapon2Icon = vgui.Create( "DModelPanel", Weapon2Panel )
	Weapon2Icon:SetPos( ScrW() * 0.13 * - 1, ScrH() * 0.343 * - 1 )
	Weapon2Icon:SetSize( ScreenScale( 250 ), ScreenScale( 250 ) )
	Weapon2Icon:SetModel( item_2.Model )
	Weapon2Icon:SetFOV( 90 )
	Weapon2Icon:SetCamPos( Vector( 90, 0, 0 ) )
	
	local GUI_Weapon2Take = vgui.Create("DButton", Weapon2Panel)	
	GUI_Weapon2Take:SetSize( ScrW() * 0.0886, ScrH() * 0.039 )
	GUI_Weapon2Take:SetPos( ScrW() * 0.021, ScrH() * 0.24 )
	GUI_Weapon2Take:SetText( "" )
	GUI_Weapon2Take.Paint = function()
		if GUI_Weapon2Take:IsHovered() then
			draw.RoundedBoxEx( 8, 0, 0, GUI_Weapon2Take:GetWide(), GUI_Weapon2Take:GetTall(), col_light_green, false, false, false, false )
		else
			draw.RoundedBoxEx( 8, 0, 0, GUI_Weapon2Take:GetWide(), GUI_Weapon2Take:GetTall(), col_green, false, false, false, false )
		end

		local struc = {}
		struc.pos = {}
		struc.pos[1] = ScrW() * 0.0443
		struc.pos[2] = ScrH() * 0.0195
		struc.color = col_white
		struc.text = "Retrieve Item"
		struc.font = "ARMORY_UIFontButton" 
		struc.xalign = TEXT_ALIGN_CENTER
		struc.yalign = TEXT_ALIGN_CENTER
		draw.Text( struc )
	end
	GUI_Weapon2Take.DoClick = function()
		wep2taken = true
		
		net.Start( "ARM_LOCKER_StealItem" )
			net.WriteEntity( locker_ent )
			net.WriteTable( item_2 )
		net.SendToServer()
		
		GUI_Weapon2Take:Remove()
	end
	
	-- Panel 3
	local x, y = surface.GetTextSize( item_3.Name )
	if item_3.EntType == "ammo" then
		x, y = surface.GetTextSize( item_3.AmmoAmt .." x ".. item_3.Name )
	end
	
	local ItemName = vgui.Create( "DLabel", LOCKER_GUI_Frame )
	ItemName:SetPos( ( LOCKER_GUI_Frame:GetWide() / 1.27 ) - ( x / 2 ), ScrH() * 0.0925 )
	ItemName:SetFont( "ARMORY_UIFontButton" )
	ItemName:SetColor( mat_col )
	if item_3.EntType == "ammo" then
		ItemName:SetText( item_3.AmmoAmt .." x ".. item_3.Name )
	else
		ItemName:SetText( item_3.Name )
	end
	ItemName:SizeToContents()
	
	local Weapon3Panel = vgui.Create( "DPanel", LOCKER_GUI_Frame )
	Weapon3Panel:SetSize( ScrW() * 0.13, ScrH() * 0.3 )
	Weapon3Panel:SetPos( ScrW() * 0.364, ScrH() * 0.08 )
	Weapon3Panel.Paint = function()
		draw.RoundedBox( 8, 1, 1, Weapon3Panel:GetWide(), Weapon3Panel:GetTall(), col_invs )	
	end
	
	local Weapon3Icon = vgui.Create( "DModelPanel", Weapon3Panel )
	Weapon3Icon:SetPos( ScrW() * 0.13 * - 1, ScrH() * 0.343 * - 1 )
	Weapon3Icon:SetSize( ScreenScale( 250 ), ScreenScale( 250 ) )
	Weapon3Icon:SetModel( item_3.Model )
	Weapon3Icon:SetFOV( 90 )
	Weapon3Icon:SetCamPos( Vector( 90, 0, 0 ) )
	
	local GUI_Weapon3Take = vgui.Create("DButton", Weapon3Panel)	
	GUI_Weapon3Take:SetSize( ScrW() * 0.0886, ScrH() * 0.039 )
	GUI_Weapon3Take:SetPos( ScrW() * 0.02, ScrH() * 0.24 )
	GUI_Weapon3Take:SetText("")
	GUI_Weapon3Take.Paint = function()
		if GUI_Weapon3Take:IsHovered() then
			draw.RoundedBoxEx( 8, 0, 0, GUI_Weapon3Take:GetWide(), GUI_Weapon3Take:GetTall(), col_light_green, false, false, false, false )
		else
			draw.RoundedBoxEx( 8, 0, 0, GUI_Weapon3Take:GetWide(), GUI_Weapon3Take:GetTall(), col_green, false, false, false, false )
		end

		local struc = {}
		struc.pos = {}
		struc.pos[1] = ScrW() * 0.0443
		struc.pos[2] = ScrH() * 0.0195
		struc.color = col_white
		struc.text = "Retrieve Item"
		struc.font = "ARMORY_UIFontButton" 
		struc.xalign = TEXT_ALIGN_CENTER
		struc.yalign = TEXT_ALIGN_CENTER
		draw.Text( struc )
	end
	GUI_Weapon3Take.DoClick = function()
		wep3taken = true
		
		net.Start( "ARM_LOCKER_StealItem" )
			net.WriteEntity( locker_ent )
			net.WriteTable( item_3 )
		net.SendToServer()
		
		GUI_Weapon3Take:Remove()
	end
end )
--addons/policearmorylocker/lua/armory_locker/client/armory_locker_fonts.lua:
-- Police Armory/Locker
surface.CreateFont("ARMORY_UIFontLarge", {
    font = "helvetica", 
    size = ScreenScale( 17 ), 
    weight = ScreenScale( 7 )
})

surface.CreateFont("ARMORY_UIFontButton", {
    font = "helvetica", 
    size = ScreenScale( 7 ), 
    weight = ScreenScale( 7 )
})

surface.CreateFont("ARMORY_OverheadTitle", {
    font = "Poetsen One", 
    size = 80, 
    weight = 600
})

surface.CreateFont("ARMORY_UIFontTitle", {
    font = "Trebuchet MS", 
    size = ScreenScale( 9 ), 
    weight = ScreenScale( 12 )
})

surface.CreateFont("ARMORY_UIFontText", {
    font = "Trebuchet MS", 
	size = ScreenScale( 7.5 ), 
	weight = ScreenScale( 300 )
})

surface.CreateFont("ARMORY_UIFontTextButton", {
    font = "Trebuchet MS", 
	size = ScreenScale( 7 ), 
	weight = ScreenScale( 300 )
})
--addons/ashop/lua/ashop/config/sh_config.lua:
local l = ashop.Config or {} // don't touch that

l.Language = "english"
l.create_money = 0
l.create_premiummoney = 0
l.modelPanelDisplayWeapon = "arccw_ur_mp5"
l.PetSnapAngle = true // Instantly teleport the pet to the good pos, this avoid the shaking
l.UnequipOnMissingRanks = false // Unequip + Block equip if the player does not have the rank anymore
l.OpenKey = KEY_F6
l.OpenTauntMenuKey = KEY_F7 // Open Taunt Menu
l.PS2Compatibility = true // Add PS2 functions AND SH, for easy compatibility
l.PetDistanceBeforeMoving = 256 // The distance before the pet start moving
l.TitleVerticalPosAdd = 0 // Do we add value to the verical position of the title ?

// NPC
l.NPCName = "Cosmetic Seller"
l.NPCModel = "models/Humans/Group03/Female_01.mdl"

// Size of the displayed title
// If you are using AHud, a recommended value is 20 or 25
l.FontSizeTitle = 120

// Can people sell items they obtained/bought ?
// If this is less or equal to 0 OR more than 1, it will hide the option
l.SellPrice = 0

// Restrict some jobs/team to have accessories/wearables
// Examples are commented, to make them works, remove the "//" at the front of the line
// Follow the format of the examples, [TEAM_SOMETHING] = true. Replace TEAM_SOMETHING by the variable for your team/job.

l.jobsBlockEquipAccessories = {
    // [TEAM_UNDEAD or -100] = true, // Zombie survival zombie team
    // [TEAM_POLICE or -101] = true, // Darkrp, police team for example
}

// Unboxing notification parameters
l.notif_holdDiv = 5 // How much parts we have in the notification
l.notif_holdPart = 3 // How much parts are used to keep the notification at the middle
l.notif_time = 5 // How much time the notification will stay
l.UnboxChatPrint = false // Print the unbox in the chat, rather than a popup

// UI
l.colors = {
    Separator = Color(47, 73, 109),

    // 25, 30, 62
    Grad1_0 = Color(31, 35, 64),

    // 33, 38, 70
    Grad1_1 = Color(38, 43, 72),
    Grad1_12 = Color(33, 38, 70),

    // 31, 47, 81
    Grad2_0 = Color(36, 51, 82),

    // 34, 53, 89
    Grad2_1 = Color(39, 56, 89),

    // 29, 44, 75
    ItemBg = Color(35,48,76,255),

    // 71, 108, 184
    StateOn = Color(50, 121, 215, 255),
    StateOff = Color(47, 67, 109, 255),

    // 30 35 67
    Good = Color(50, 203, 113),
    entryColor = Color(35, 40, 66, 255),

    badInput = Color(230, 77, 62),
    badInputBg = Color(64, 31, 36),
    badInputBg2 = Color(64, 31, 36),

    White = Color(231, 240, 241),
    White50 = Color(231, 240, 241, 255*0.5),
    White25 = Color(231, 240, 241, 255*0.15),
    White5 = Color(231, 240, 241, 255*0.05),
    BlurpleWrite = Color(193, 186, 237),

    blurple = Color(115, 97, 230),
    blurpleBg = Color(46, 68, 111),

    normalMoneyBg = Color(40, 186, 189, 255*0.4),
    normalMoney = Color(40, 186, 189),

    pink = Color(50, 121, 215, 255*0.4),
    premiumMoneyLogo = Color(50, 121, 215),
}

l.round = 8

// Ranks that can access to the parameters of the addon completely.
l.fullEdit = {
	["superadmin"] = true,
    ["superyetki"] = true,
}

// Modify it only if your TFA skins doesn't apply on your weapon
// for some reasons.
// This will apply the skin on every "elements" that is a model with bone merging
// Use the weapon class
l.aggressiveTFASkinDetection = {
    ["at_sw_dc15s_all"] = true,
    ["at_sw_dc15s_base1"] = true,
    ["at_sw_dc15s_base2"] = true,
    ["at_sw_dc15s_base3"] = true,
    ["at_sw_dc15s_heavy1"] = true,
    ["at_sw_dc15s_heavy2"] = true,
    ["at_sw_dc15s_heavy3"] = true,
    ["at_sw_dc15s_recon1"] = true,
    ["at_sw_dc15s_recon2"] = true,
    ["at_sw_dc15s_recon3"] = true,
    ["at_sw_dc15s_security1"] = true,
    ["at_sw_dc15s_security2"] = true,
    ["at_sw_dc15s_security3"] = true,
    ["at_sw_dc15a_all"] = true,
    ["at_sw_dc15a_base1"] = true,
    ["at_sw_dc15a_base2"] = true,
    ["at_sw_dc15a_base3"] = true,
    ["at_sw_dc15a_heavy1"] = true,
    ["at_sw_dc15a_heavy2"] = true,
    ["at_sw_dc15a_heavy3"] = true,
    ["at_sw_dc15a_recon1"] = true,
    ["at_sw_dc15a_recon2"] = true,
    ["at_sw_dc15a_recon3"] = true,
    ["at_sw_dc15a_security1"] = true,
    ["at_sw_dc15a_security2"] = true,
    ["at_sw_dc15a_security3"] = true,
}








// DON'T TOUCH BELOW !
// DON'T TOUCH BELOW !
// DON'T TOUCH BELOW !
// DON'T TOUCH BELOW !
// DON'T TOUCH BELOW !
// DON'T TOUCH BELOW !
// DON'T TOUCH BELOW !
// DON'T TOUCH BELOW !
// DON'T TOUCH BELOW !
// DON'T TOUCH BELOW !
// DON'T TOUCH BELOW !

l.SendItemsChunkSeconds = 0.2
l.BitsRender = 8
l.BitsObjectType = 8
l.BitsPac3 = 10
l.BitsRarity = 8
l.BitsItemID = 20
l.BitsPlyItemID = 20
l.BitsRankPromotion = 7
l.BitsGroupRank = 10
l.BitsSubObjectType = 8

ashop.Config = l // and also don't touch that
--addons/ashop/lua/ashop/code/_kernel/sh_cami.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/_kernel/sh_cami.lua:
--[[
CAMI - Common Admin Mod Interface.
Copyright 2020 CAMI Contributors

Makes admin mods intercompatible and provides an abstract privilege interface
for third party addons.

Follows the specification on this page:
https://github.com/glua/CAMI/blob/master/README.md

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]

-- Version number in YearMonthDay format.
local version = 20211019

if CAMI and CAMI.Version >= version then return end

CAMI = CAMI or {}
CAMI.Version = version


--- @class CAMI_USERGROUP
--- defines the charactaristics of a usergroup
--- @field Name string @The name of the usergroup
--- @field Inherits string @The name of the usergroup this usergroup inherits from
--- @field CAMI_Source string @The source specified by the admin mod which registered this usergroup (if any, converted to a string)

--- @class CAMI_PRIVILEGE
--- defines the charactaristics of a privilege
--- @field Name string @The name of the privilege
--- @field MinAccess "'user'" | "'admin'" | "'superadmin'" @Default group that should have this privilege
--- @field Description string | nil @Optional text describing the purpose of the privilege
local CAMI_PRIVILEGE = {}
--- Optional function to check if a player has access to this privilege
--- (and optionally execute it on another player)
---
--- ⚠ **Warning**: This function may not be called by all admin mods
--- @param actor GPlayer @The player
--- @param target GPlayer | nil @Optional - the target
--- @return boolean @If they can or not
--- @return string | nil @Optional reason
function CAMI_PRIVILEGE:HasAccess(actor, target)
end

--- Contains the registered CAMI_USERGROUP usergroup structures.
--- Indexed by usergroup name.
--- @type CAMI_USERGROUP[]
local usergroups = CAMI.GetUsergroups and CAMI.GetUsergroups() or {
    user = {
        Name = "user",
        Inherits = "user",
        CAMI_Source = "Garry's Mod",
    },
    admin = {
        Name = "admin",
        Inherits = "user",
        CAMI_Source = "Garry's Mod",
    },
    superadmin = {
        Name = "superadmin",
        Inherits = "admin",
        CAMI_Source = "Garry's Mod",
    }
}

--- Contains the registered CAMI_PRIVILEGE privilege structures.
--- Indexed by privilege name.
--- @type CAMI_PRIVILEGE[]
local privileges = CAMI.GetPrivileges and CAMI.GetPrivileges() or {}

--- Registers a usergroup with CAMI.
---
--- Use the source parameter to make sure CAMI.RegisterUsergroup function and
--- the CAMI.OnUsergroupRegistered hook don't cause an infinite loop
--- @param usergroup CAMI_USERGROUP @The structure for the usergroup you want to register
--- @param source any @Identifier for your own admin mod. Can be anything.
--- @return CAMI_USERGROUP @The usergroup given as an argument
function CAMI.RegisterUsergroup(usergroup, source)
    if source then
        usergroup.CAMI_Source = tostring(source)
    end
    usergroups[usergroup.Name] = usergroup

    hook.Call("CAMI.OnUsergroupRegistered", nil, usergroup, source)
    return usergroup
end

--- Unregisters a usergroup from CAMI. This will call a hook that will notify
--- all other admin mods of the removal.
---
--- ⚠ **Warning**: Call only when the usergroup is to be permanently removed.
---
--- Use the source parameter to make sure CAMI.UnregisterUsergroup function and
--- the CAMI.OnUsergroupUnregistered hook don't cause an infinite loop
--- @param usergroupName string @The name of the usergroup.
--- @param source any @Identifier for your own admin mod. Can be anything.
--- @return boolean @Whether the unregistering succeeded.
function CAMI.UnregisterUsergroup(usergroupName, source)
    if not usergroups[usergroupName] then return false end

    local usergroup = usergroups[usergroupName]
    usergroups[usergroupName] = nil

    hook.Call("CAMI.OnUsergroupUnregistered", nil, usergroup, source)

    return true
end

--- Retrieves all registered usergroups.
--- @return CAMI_USERGROUP[] @Usergroups indexed by their names.
function CAMI.GetUsergroups()
    return usergroups
end

--- Receives information about a usergroup.
--- @param usergroupName string
--- @return CAMI_USERGROUP | nil @Returns nil when the usergroup does not exist.
function CAMI.GetUsergroup(usergroupName)
    return usergroups[usergroupName]
end

--- Checks to see if potentialAncestor is an ancestor of usergroupName.
--- All usergroups are ancestors of themselves.
---
--- Examples:
--- * `user` is an ancestor of `admin` and also `superadmin`
--- * `admin` is an ancestor of `superadmin`, but not `user`
--- @param usergroupName string @The usergroup to query
--- @param potentialAncestor string @The ancestor to query
--- @return boolean @Whether usergroupName inherits potentialAncestor.
function CAMI.UsergroupInherits(usergroupName, potentialAncestor)
    repeat
        if usergroupName == potentialAncestor then return true end

        usergroupName = usergroups[usergroupName] and
                         usergroups[usergroupName].Inherits or
                         usergroupName
    until not usergroups[usergroupName] or
          usergroups[usergroupName].Inherits == usergroupName

    -- One can only be sure the usergroup inherits from user if the
    -- usergroup isn't registered.
    return usergroupName == potentialAncestor or potentialAncestor == "user"
end

--- Find the base group a usergroup inherits from.
---
--- This function traverses down the inheritence chain, so for example if you have
--- `user` -> `group1` -> `group2`
--- this function will return `user` if you pass it `group2`.
---
--- ℹ **NOTE**: All usergroups must eventually inherit either user, admin or superadmin.
--- @param usergroupName string @The name of the usergroup
--- @return "'user'" | "'admin'" | "'superadmin'" @The name of the root usergroup
function CAMI.InheritanceRoot(usergroupName)
    if not usergroups[usergroupName] then return end

    local inherits = usergroups[usergroupName].Inherits
    while inherits ~= usergroups[usergroupName].Inherits do
        usergroupName = usergroups[usergroupName].Inherits
    end

    return usergroupName
end

--- Registers an addon privilege with CAMI.
---
--- ⚠ **Warning**: This should only be used by addons. Admin mods must *NOT*
---  register their privileges using this function.
--- @param privilege CAMI_PRIVILEGE
--- @return CAMI_PRIVILEGE @The privilege given as argument.
function CAMI.RegisterPrivilege(privilege)
    privileges[privilege.Name] = privilege

    hook.Call("CAMI.OnPrivilegeRegistered", nil, privilege)

    return privilege
end

--- Unregisters a privilege from CAMI.
--- This will call a hook that will notify any admin mods of the removal.
---
--- ⚠ **Warning**: Call only when the privilege is to be permanently removed.
--- @param privilegeName string @The name of the privilege.
--- @return boolean @Whether the unregistering succeeded.
function CAMI.UnregisterPrivilege(privilegeName)
    if not privileges[privilegeName] then return false end

    local privilege = privileges[privilegeName]
    privileges[privilegeName] = nil

    hook.Call("CAMI.OnPrivilegeUnregistered", nil, privilege)

    return true
end

--- Retrieves all registered privileges.
--- @return CAMI_PRIVILEGE[] @All privileges indexed by their names.
function CAMI.GetPrivileges()
    return privileges
end

--- Receives information about a privilege.
--- @param privilegeName string
--- @return CAMI_PRIVILEGE | nil
function CAMI.GetPrivilege(privilegeName)
    return privileges[privilegeName]
end

-- Default access handler
local defaultAccessHandler = {["CAMI.PlayerHasAccess"] =
    function(_, actorPly, privilegeName, callback, targetPly, extraInfoTbl)
        -- The server always has access in the fallback
        if not IsValid(actorPly) then return callback(true, "Fallback.") end

        local priv = privileges[privilegeName]

        local fallback = extraInfoTbl and (
            not extraInfoTbl.Fallback and actorPly:IsAdmin() or
            extraInfoTbl.Fallback == "user" and true or
            extraInfoTbl.Fallback == "admin" and actorPly:IsAdmin() or
            extraInfoTbl.Fallback == "superadmin" and actorPly:IsSuperAdmin())


        if not priv then return callback(fallback, "Fallback.") end

        local hasAccess =
            priv.MinAccess == "user" or
            priv.MinAccess == "admin" and actorPly:IsAdmin() or
            priv.MinAccess == "superadmin" and actorPly:IsSuperAdmin()

        if hasAccess and priv.HasAccess then
            hasAccess = priv:HasAccess(actorPly, targetPly)
        end

        callback(hasAccess, "Fallback.")
    end,
    ["CAMI.SteamIDHasAccess"] =
    function(_, _, _, callback)
        callback(false, "No information available.")
    end
}

--- @class CAMI_ACCESS_EXTRA_INFO
--- @field Fallback "'user'" | "'admin'" | "'superadmin'" @Fallback status for if the privilege doesn't exist. Defaults to `admin`.
--- @field IgnoreImmunity boolean @Ignore any immunity mechanisms an admin mod might have.
--- @field CommandArguments table @Extra arguments that were given to the privilege command.

--- Checks if a player has access to a privilege
--- (and optionally can execute it on targetPly)
---
--- This function is designed to be asynchronous but will be invoked
---  synchronously if no callback is passed.
---
--- ⚠ **Warning**: If the currently installed admin mod does not support
---                 synchronous queries, this function will throw an error!
--- @param actorPly GPlayer @The player to query
--- @param privilegeName string @The privilege to query
--- @param callback fun(hasAccess: boolean, reason: string|nil) @Callback to receive the answer, or nil for synchronous
--- @param targetPly GPlayer | nil @Optional - target for if the privilege effects another player (eg kick/ban)
--- @param extraInfoTbl CAMI_ACCESS_EXTRA_INFO | nil @Table of extra information for the admin mod
--- @return boolean | nil @Synchronous only - if the player has the privilege
--- @return string | nil @Synchronous only - optional reason from admin mod
function CAMI.PlayerHasAccess(actorPly, privilegeName, callback, targetPly,
extraInfoTbl)
    local hasAccess, reason = nil, nil
    local callback_ = callback or function(hA, r) hasAccess, reason = hA, r end

    hook.Call("CAMI.PlayerHasAccess", defaultAccessHandler, actorPly,
        privilegeName, callback_, targetPly, extraInfoTbl)

    if callback ~= nil then return end

    if hasAccess == nil then
        local err = [[The function CAMI.PlayerHasAccess was used to find out
        whether Player %s has privilege "%s", but an admin mod did not give an
        immediate answer!]]
        error(string.format(err,
            actorPly:IsPlayer() and actorPly:Nick() or tostring(actorPly),
            privilegeName))
    end

    return hasAccess, reason
end

--- Get all the players on the server with a certain privilege
--- (and optionally who can execute it on targetPly)
---
--- ℹ **NOTE**: This is an asynchronous function!
--- @param privilegeName string @The privilege to query
--- @param callback fun(players: GPlayer[]) @Callback to receive the answer
--- @param targetPly GPlayer | nil @Optional - target for if the privilege effects another player (eg kick/ban)
--- @param extraInfoTbl CAMI_ACCESS_EXTRA_INFO | nil @Table of extra information for the admin mod
function CAMI.GetPlayersWithAccess(privilegeName, callback, targetPly,
extraInfoTbl)
    local allowedPlys = {}
    local allPlys = player.GetAll()
    local countdown = #allPlys

    local function onResult(ply, hasAccess, _)
        countdown = countdown - 1

        if hasAccess then table.insert(allowedPlys, ply) end
        if countdown == 0 then callback(allowedPlys) end
    end

    for _, ply in ipairs(allPlys) do
        CAMI.PlayerHasAccess(ply, privilegeName,
            function(...) onResult(ply, ...) end,
            targetPly, extraInfoTbl)
    end
end

--- @class CAMI_STEAM_ACCESS_EXTRA_INFO
--- @field IgnoreImmunity boolean @Ignore any immunity mechanisms an admin mod might have.
--- @field CommandArguments table @Extra arguments that were given to the privilege command.

--- Checks if a (potentially offline) SteamID has access to a privilege
--- (and optionally if they can execute it on a target SteamID)
---
--- ℹ **NOTE**: This is an asynchronous function!
--- @param actorSteam string | nil @The SteamID to query
--- @param privilegeName string @The privilege to query
--- @param callback fun(hasAccess: boolean, reason: string|nil) @Callback to receive  the answer
--- @param targetSteam string | nil @Optional - target SteamID for if the privilege effects another player (eg kick/ban)
--- @param extraInfoTbl CAMI_STEAM_ACCESS_EXTRA_INFO | nil @Table of extra information for the admin mod
function CAMI.SteamIDHasAccess(actorSteam, privilegeName, callback,
targetSteam, extraInfoTbl)
    hook.Call("CAMI.SteamIDHasAccess", defaultAccessHandler, actorSteam,
        privilegeName, callback, targetSteam, extraInfoTbl)
end

--- Signify that your admin mod has changed the usergroup of a player. This
--- function communicates to other admin mods what it thinks the usergroup
--- of a player should be.
---
--- Listen to the hook to receive the usergroup changes of other admin mods.
--- @param ply GPlayer @The player for which the usergroup is changed
--- @param old string @The previous usergroup of the player.
--- @param new string @The new usergroup of the player.
--- @param source any @Identifier for your own admin mod. Can be anything.
function CAMI.SignalUserGroupChanged(ply, old, new, source)
    hook.Call("CAMI.PlayerUsergroupChanged", nil, ply, old, new, source)
end

--- Signify that your admin mod has changed the usergroup of a disconnected
--- player. This communicates to other admin mods what it thinks the usergroup
--- of a player should be.
---
--- Listen to the hook to receive the usergroup changes of other admin mods.
--- @param steamId string @The steam ID of the player for which the usergroup is changed
--- @param old string @The previous usergroup of the player.
--- @param new string @The new usergroup of the player.
--- @param source any @Identifier for your own admin mod. Can be anything.
function CAMI.SignalSteamIDUserGroupChanged(steamId, old, new, source)
    hook.Call("CAMI.SteamIDUsergroupChanged", nil, steamId, old, new, source)
end
--addons/ashop/lua/ashop/code/_kernel/sh_permissions.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/_kernel/sh_utils.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/_kernel/lang/cl_lang.lua:
net.Receive("ashop_notify", function()
    local str
    if net.ReadBool() then
        local uid = net.ReadUInt(math.log(#ashop.lang.IDToStr, 2)+1)
        local tbl = {}

        for i = 1, net.ReadUInt(3) do
            table.insert(tbl, net.ReadString())
        end

        local good, res = pcall(function()
            return ashop.FormatLanguage(uid, unpack(tbl))
        end)

        if !good then
            notification.AddLegacy("[ashop] Issue while getting formatted string of: " .. ashop.lang.IDToStr[uid], 1, 4)
            return
        else
            str = res
        end
    else
        str = net.ReadString()
    end

    notification.AddLegacy(str, net.ReadInt(5) or 0, net.ReadInt(5) or 4)
end)
--addons/ashop/lua/ashop/code/gamemodes/currencies/integrations/sh_nutscript.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/badges/cl_b.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/bundles/sh_bundles.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('Bundles')
OBJECT_TYPE.DefaultRender = "Consumables"

OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = ashop.L('ListOfObjects'),
        type = 'LIST',
        options = {
            listObjects = {
                {"ITEMID", 'Item'},
                {"UInt8", 'Amount'},
            },
            required = true
        },
    },
}

OBJECT_TYPE.UniqueIdentifier = "Bundles"

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/car_dealer/sh_cd.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = "Cars"
OBJECT_TYPE.UniqueIdentifier = "Cars"

OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = ashop.L('CarDealer_1'),
        type = TYPE_STRING,
        options = {
            required = true
        }
    },

    [2] = {
        name = ashop.L('CarDealer_2'),
        type = TYPE_STRING
    }
}

OBJECT_TYPE.DefaultRender = "Consumables"

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/case_opening/cl_caseopening.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/case_opening/sh_hiddenmethods.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/pac3/sh_pac3.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/pets/cl_pets.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('PetClass')
OBJECT_TYPE.UniqueIdentifier = "Pets"

net.Receive('ashop_pet', function()
    local eIndex = net.ReadUInt(16)
    local id = net.ReadUInt(ashop.Config.BitsPlyItemID)
    local ply = net.ReadEntity()

    timer.Create('ashop_waitpetEnt_' .. eIndex, 1, 300, function()
        local e = Entity(eIndex)

        if !IsValid(ply) then
            timer.Remove('ashop_waitpetEnt_' .. eIndex)
            return
        end

        if !IsValid(e) or !e.RegenerateClientsideModel or !ply.ashop_data then return end

        local plyItem = ply.ashop_data.items[id]
        local item = ashop.items[plyItem.item_id]

        e.ashop_item = item
        e.ashop_plyitem = plyItem
        ply.ashop_data.items[id].ent = e
        e.owner = ply

        e:RegenerateClientsideModel()

        timer.Remove('ashop_waitpetEnt_' .. eIndex)
    end)
end)

function OBJECT_TYPE.UI_FILL(plyItem, item, pnl, parent, w, h, noCircle, fullSize)
    local circleParent = vgui.Create("EditablePanel", pnl)
    circleParent:SetSize(w, h)
    circleParent:SetMouseInputEnabled(false)

    local c = fullSize and math.max(w, h) or math.max(w, h) * 0.6

    local SpawnI = vgui.Create( "SpawnIcon" , circleParent ) -- SpawnIcon
    SpawnI:SetSize(c, c)
    SpawnI:Center()
    SpawnI:SetModel( item.metadata[1], item.metadata[2] ) -- Model we want for this spawn icon
    SpawnI:SetMouseInputEnabled(false)

    if item.metadata[2] then
        SpawnI:SetSkin(item.metadata[2])
    end
end

function OBJECT_TYPE.OnEquip(ply, plyItem, item, _, slotID)
    if !ply:IsPlayer() then
        if IsValid(plyItem.modelPanelPreview) then
            plyItem.modelPanelPreview:Remove()
        end

        local invertDir = slotID == 1
        local e = ClientsideModel(item.metadata[1])
        e:SetModelScale(math.Clamp((item.metadata[9] or 1), 0.1, 2))
        e:SetNoDraw(true)

        local p = select(2, e:GetModelBounds())*e:GetModelScale()
        p.y = !invertDir and (-p.y) or p.y
        p.z = 0

        p:Rotate(ply:GetAngles())
        e:SetPos(ply:GetPos() + p)
        e:SetAngles(Angle(0, ply:GetAngles().y + (!invertDir and 45 or -45), 0))
        e:SetParent(ply)

        if item.metadata[2] then
            e:SetSkin(item.metadata[2])
        end
        e.offsetY = item.metadata[3] or 0
        e:Spawn()

        plyItem.modelPanelPreview = e
    end
end

function OBJECT_TYPE.OnRemove(ply, plyItem, item)
    if IsValid(plyItem.modelPanelPreview) then
        plyItem.modelPanelPreview:Remove()
    end
end

function OBJECT_TYPE.OnPostPlayerDraw(ply, plyItem, item, inModelPanel)
    if inModelPanel and plyItem.modelPanelPreview and IsValid(plyItem.modelPanelPreview) then
        local self = plyItem.modelPanelPreview
        local seq = item.metadata[5]

        local old = self:GetCycle()
        local new = (CurTime() * (self.seqSpeed or 1) / self:SequenceDuration()) % 1
        self:SetCycle(new)
        
        if old > new or !self.seqSpeed and !table.IsEmpty(seq) then
            local t = seq[math.random(#seq)]
            self.seqSpeed = t[2]
            self:SetSequence(t[1])
        end

        self:DrawModel()
    end
end

// All players / // 76561198314223650
function OBJECT_TYPE.OnMetadataUpdate(ply, plyItem, item, metadataKey, oldValue, newValue)
    return true
end

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/pets/sh_pets.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/title_code/cl_init.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/title_code/color/cl_text.lua:
local OBJECT_TYPE = {}

// UI
OBJECT_TYPE.Name = ashop.L('ColorClass')
OBJECT_TYPE.BlockSlotEdit = true
OBJECT_TYPE.UniqueIdentifier = "TitleColor"

function OBJECT_TYPE.UI_FILL(plyItem, item, pnl, parent, w, h)
    local circleParent = vgui.Create("EditablePanel", pnl)
    circleParent:Dock(FILL)
    circleParent:SetMouseInputEnabled(false)

    function circleParent:Paint(w, h)
        ashop.DrawTitle(nil, item.metadata[2] or item.metadata[1], nil, w/2, h/2, nil, TEXT_ALIGN_CENTER)
    end
end

// Rendering
function OBJECT_TYPE.OnLocalEquip(ply, plyItem, item)
    OBJECT_TYPE.OnEquip(ply, plyItem, item)
end

function OBJECT_TYPE.OnEquip(ply, plyItem, item)
    ply.ashop_titlecolor = nil
    if item.metadata then
        ply.ashop_titlecolor = item.metadata[2] or item.metadata[1]
    end
end

function OBJECT_TYPE.OnMetadataUpdate(ply, plyItem, item)
    OBJECT_TYPE.OnEquip(ply, plyItem, item)
end

function OBJECT_TYPE.OnLocalRemove(ply, plyItem, item)
    OBJECT_TYPE.OnRemove(ply, plyItem, item)
end

function OBJECT_TYPE.OnLocalFPDraw(ply)
end

function OBJECT_TYPE.OnRemove(ply, plyItem, item)
    ply.ashop_titlecolor = nil
end

function OBJECT_TYPE.OnPostPlayerDraw(ply, plyItem, item, inModelPanel)
end

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/title_code/effect/cl_styles.lua:
ashop.titles.styles = ashop.titles.styles or {}

ashop.titles.styles[1] = {
    name = "Glitch",
    draw = function(text, colorIndex, txtw, txth, textOriginal, topAlign, font)
        local randNumber = math.floor(((CurTime() * 50) % #text)) + 1
        local old = text[randNumber]
        if !old then return end

        text[randNumber] = string.char(math.Round(math.Rand(33,125)))
        ashop.titles.styles[0](text, colorIndex, txtw, txth, textOriginal, topAlign, font)
        text[randNumber] = old
    end,
}

ashop.titles.styles[2] = {
    name = "Shiny",
    draw = function(text, color, xOffset, yOffset, textOriginal, topAlign, font)
        local textSize = #text
        surface.SetFont(font or "ashop_18")
        local w, h = surface.GetTextSize(textOriginal)
        local xOffset = xOffset or 0
        local yOffset = yOffset or 0

        xOffset = xOffset - w/2
        yOffset = yOffset - (topAlign == TEXT_ALIGN_CENTER and h/2 or 0)

        local r, g, b, isFunc

        if istable(color) then
            r = color.r
            g = color.g
            b = color.b
            isFunc = false
        else
            isFunc = true
        end

        for i = 1, textSize do
            local c = text[i]

            local outlinewidth = 3
            local steps = 1

            if isFunc then
                r, g, b = ashop.titles.colors[color].draw(i, textSize)
            end

            surface.SetTextColor(r - 40, g - 40, b - 40, 10)

            for _x = -outlinewidth, outlinewidth, steps do
                for _y = -outlinewidth, outlinewidth, steps do
                    surface.SetTextPos(xOffset + _x, yOffset + _y)
                    surface.DrawText(c)
                end
            end

            surface.SetTextPos(xOffset, yOffset)
            surface.SetTextColor(r, g, b)
            surface.DrawText(c)

            xOffset = xOffset + select(1, surface.GetTextSize(c))
        end
    end,
}

ashop.titles.styles[3] = {
    name = "Waves",
    draw = function(text, color, xOffset, yOffset, textOriginal, topAlign, font)
        local textSize = #text
        surface.SetFont(font or "ashop_18")
        local w, h = surface.GetTextSize(textOriginal)
        xOffset = xOffset or 0
        yOffset = yOffset or 0
        local cT = CurTime()

        xOffset = xOffset - w/2
        yOffset = yOffset - (topAlign == TEXT_ALIGN_CENTER and h/2 or 0)

        local r, g, b, isFunc

        if istable(color) then
            r = color.r
            g = color.g
            b = color.b
            isFunc = false
        else
            isFunc = true
        end

        for i = 1, textSize do
            if isFunc then
                r, g, b  = ashop.titles.colors[color].draw(i, textSize)
            end

            local c = text[i]

            surface.SetTextColor( r, g, b )
            surface.SetTextPos(xOffset, yOffset + math.sin(cT*2 + i/10)*10)
            surface.DrawText( c )

            xOffset = xOffset + surface.GetTextSize(c)
        end
    end,
}

ashop.titles.styles[4] = {
    name = "Reverse",
    draw = function(text, color, xOffset, yOffset, textOriginal, topAlign, font)
        local textSize = #text
        surface.SetFont(font or "ashop_18")
        local w, h = surface.GetTextSize(textOriginal)

        surface.SetTextPos((xOffset or 0) - w/2, 
            (yOffset or 0) - (topAlign == TEXT_ALIGN_CENTER and h/2 or 0))

        local r, g, b, isFunc

        if istable(color) then
            r = color.r
            g = color.g
            b = color.b
            isFunc = false
        else
            isFunc = true
        end

        for i = 1, textSize do
            if isFunc then
                r, g, b  = ashop.titles.colors[color].draw(i, textSize)
            end

            surface.SetTextColor( r, g, b )
            surface.DrawText( text[textSize - (i - 1)] )
        end
    end,
}

ashop.titles.styles[5] = {
    name = "Pixel Wave",
    draw = function(text, color, xOffset, yOffset, textOriginal, topAlign, font)
        local textSize = #text
        surface.SetFont(font or "ashop_18")
        local w, h = surface.GetTextSize(textOriginal)
        local xOffset = xOffset or 0
        local yOffset = yOffset or 0
        local cT = CurTime()

        xOffset = xOffset - w/2
        yOffset = yOffset - (topAlign == TEXT_ALIGN_CENTER and h/2 or 0)

        local r, g, b, isFunc

        if istable(color) then
            r = color.r
            g = color.g
            b = color.b
            isFunc = false
        else
            isFunc = true
        end

        for i = 1, textSize do
            if isFunc then
                r, g, b = ashop.titles.colors[color].draw(i, textSize)
            end

            local c = text[i]
            local htxt = math.floor(math.sin(cT*2 + i/10)*5)*2

            surface.SetTextColor( r, g, b )
            surface.SetTextPos(xOffset, yOffset + htxt)
            surface.DrawText( c )

            xOffset = xOffset + surface.GetTextSize(c)
        end
    end,
}

local clrHypnotique = {
    Color(253, 121, 168),
    Color(225, 112, 85),
    Color(253, 203, 110),
    Color(85, 239, 196),
    Color(116, 185, 255),
}
local clrAmt = #clrHypnotique
local rat = 1 / clrAmt

ashop.titles.styles[6] = {
    name = "Psychodelic",
    draw = function(text, color, xOffset, yOffset, textOriginal, topAlign, font)
        surface.SetFont(font or "ashop_18")
        local w, h = surface.GetTextSize(textOriginal)

        local c = CurTime()
        local cT = c % 1 // Get the current anim, on 1sec
        local cL = c % rat
        local index = math.floor(clrAmt * cT) + 1 // Get current color

        local radius = (w + h*4) / 2

        local xOffset = (xOffset or 0) - w/2
        local yOffset = (yOffset or 0) - (topAlign == TEXT_ALIGN_CENTER and h/2 or 0)

        draw.NoTexture()
        for i=clrAmt, 0, -1 do
            local id = (index + i) % #clrHypnotique + 1
            local clr = clrHypnotique[id]

            local irad = (i*rat) - cL

            if irad < 0 then continue end

            ashop.StartStencil()
                surface.SetDrawColor(1, 1, 1, 1)
                ashop.ui.DrawCircle(xOffset + w/2, yOffset + h/2, radius * irad, 5)

            ashop.ReplaceStencil(1)
                draw.SimpleText(textOriginal, font or "ashop_18", xOffset, yOffset, clr, 0, 0)
            ashop.EndStencil()
        end
    end,
}

ashop.titles.styles[7] = {
    name = "Psychodelic 2",
    draw = function(text, color, xOffset, yOffset, textOriginal, topAlign, font)
        local clrAmt = 4
        local rat = 1 / clrAmt
        surface.SetFont(font or "ashop_18")
        local w, h = surface.GetTextSize(textOriginal)

        local c = CurTime()
        local cT = c % 1 // Get the current anim, on 1sec
        local cL = c % rat
        local index = math.floor(clrAmt * cT) + 1 // Get current color

        local radius = (w + h*4) / 2

        local xOffset = (xOffset or 0) - w/2
        local yOffset = (yOffset or 0) - (topAlign == TEXT_ALIGN_CENTER and h/2 or 0)

        draw.NoTexture()
        local r, g, b, isFunc

        if istable(color) then
            r = color.r
            g = color.g
            b = color.b
            isFunc = false
        else
            isFunc = true
        end

        for i=clrAmt, 0, -1 do
            local id = (index + i) % clrAmt + 1
            local clr = clrHypnotique[id]

            local irad = (i*rat) - cL

            if isFunc then
                r, g, b = ashop.titles.colors[color].draw(id, clrAmt)
            end

            r = r + id * 4 - id * 2
            g = g + id * 4 - id * 2
            b = b + id * 4 - id * 2

            if irad < 0 then continue end

            ashop.StartStencil()
                surface.SetDrawColor(1, 1, 1, 1)
                ashop.ui.DrawCircle(xOffset + w/2, yOffset + h/2, radius * irad, 5)

            ashop.ReplaceStencil(1)
                draw.SimpleText(textOriginal, font or "ashop_18", xOffset, yOffset, Color(r, g, b), 0, 0)
            ashop.EndStencil()
        end
    end,
}
--addons/ashop/lua/ashop/code/object_types/title_code/effect/cl_text.lua:
local OBJECT_TYPE = {}

// UI
OBJECT_TYPE.Name = ashop.L('EffectClass')
OBJECT_TYPE.BlockSlotEdit = true
OBJECT_TYPE.UniqueIdentifier = "TitleEffect"

local circle = Material('akulla/circle.png', 'smooth')
function OBJECT_TYPE.UI_FILL(plyItem, item, pnl, parent, w, h)
    local circleParent = vgui.Create("EditablePanel", pnl)
    circleParent:Dock(FILL)
    circleParent:SetMouseInputEnabled(false)

    local clrR, clrG, clrB, clrA = ColorAlpha(ashop.rarity[item.rarity], 20):Unpack()
    function circleParent:Paint(w, h)
        if !noCircle then
            surface.SetDrawColor(clrR, clrG, clrB, clrA)
            surface.SetMaterial(circle)
            surface.DrawTexturedRect(w*0.1, h*0.1, w*0.8, h*0.8)
        end

        ashop.DrawTitle(nil, nil, ashop.titles.styles[item.metadata[1]] and ashop.titles.styles[item.metadata[1]].draw or nil, w/2, h/2, nil, TEXT_ALIGN_CENTER)
    end
end

// Rendering
function OBJECT_TYPE.OnLocalEquip(ply, plyItem, item)
    OBJECT_TYPE.OnEquip(ply, plyItem, item)
end

function OBJECT_TYPE.OnEquip(ply, plyItem, item)
    ply.ashop_titlestyle = nil
    if item.metadata[1] and ashop.titles.styles[item.metadata[1]] then
        ply.ashop_titlestyle = ashop.titles.styles[item.metadata[1]].draw
    end
end

function OBJECT_TYPE.OnMetadataUpdate(ply, plyItem, item)
    OBJECT_TYPE.OnEquip(ply, plyItem, item)
end

function OBJECT_TYPE.OnLocalRemove(ply, plyItem, item)
    OBJECT_TYPE.OnRemove(ply, plyItem, item)
end

function OBJECT_TYPE.OnLocalFPDraw(ply)
end

function OBJECT_TYPE.OnRemove(ply, plyItem, item)
    ply.ashop_titlestyle = nil
end

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/title_code/effect/sh_text.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('EffectClass')
OBJECT_TYPE.DefaultRender = "Titles"
OBJECT_TYPE.UniqueIdentifier = "TitleEffect"

// Name, and extra data
OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = ashop.L('Style'),
        type = "UInt8",
        options = {
            required = true
        }
    },
}

OBJECT_TYPE.SlotDefault = 1
OBJECT_TYPE.NoChild = true
OBJECT_TYPE.BlockSlotEdit = true

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/weapon_skins/sh_weaponskin.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/players/equip/sh_init.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/players/money/sh_money.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/players/network_data/cl_playernets.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/players/network_data/cl_playernets.lua:
local luadata

ashop.Network = ashop.Network or {}

function ashop.Network.R_Render()
    local t = {
        name = net.ReadString(),
        cat = {}
    }

    local a = ashop.Network.R_Bulk(function(t)
        return net.ReadUInt(ashop.Config.BitsObjectType)
    end, 0, 8, 6)

    for k, v in ipairs(a) do
        t.cat[v] = true
    end

    return t
end

function ashop.Network.R_GroupRank()
    local t = {}
    t.name = net.ReadString()
    t.desc = net.ReadBool() and net.ReadString() or nil
    t.messageOnFail = net.ReadBool() and net.ReadString() or nil
    t.id = net.ReadUInt(ashop.Config.BitsGroupRank)
    t.freePerTime = net.ReadBool() and net.ReadUInt(16) or nil
    t.premiumPerTime = net.ReadBool() and net.ReadUInt(16) or nil
    t.ranks = {}

    local a = ashop.Network.R_Bulk(function(t)
        return net.ReadString()
    end, 0, 8, 6)

    for k, v in ipairs(a) do
        t.ranks[v] = true
    end

    return t
end

function ashop.Network.R_CurrencyTrade()
    return {
        currencyName = net.ReadString(),
        toCoins = net.ReadBool(),
        //convertRate = net.ReadFloat(),
        convertRate = tonumber(net.ReadString()),
        toPremium = net.ReadBool(),
        id = net.ReadUInt(10)
    }
end

function ashop.Network.R_Pac3()
    local t = ashop.Network.R_Compress()

    if !luadata and file.Exists('pac3/libraries/luadata.lua', 'LUA') then
        luadata = include('pac3/libraries/luadata.lua')
    end

    assert(luadata, "There is pac3 data without pac3 installed")

    return {
        outfit_text = t,
        outfit = luadata.Decode(t),
        name = net.ReadString(),
        model_attach = net.ReadBool()
    }
end

function ashop.Network.R_Rarity()
    local t = {
        id = net.ReadUInt(8),
        name = net.ReadString(),
        r = net.ReadUInt(8),
        g = net.ReadUInt(8),
        b = net.ReadUInt(8),
    }

    if net.ReadBool() then
        t.style = net.ReadUInt(8)
    end

    t.notif_unbox = net.ReadBool()

    if net.ReadBool() then
        t.notif_unboxsound = net.ReadString()
    end

    t.clr = Color(t.r, t.g, t.b)
    return t
end

function ashop.Network.R_ItemData()
    local t = {
        id = net.ReadUInt(ashop.Config.BitsItemID),
        object_types = net.ReadUInt(ashop.Config.BitsObjectType),
        sub_types = net.ReadBool() and net.ReadUInt(ashop.Config.BitsSubObjectType) or nil,
        name = net.ReadString(),
        price = net.ReadBool() and net.ReadUInt(32) or nil,
        premium_price = net.ReadBool() and net.ReadUInt(32) or nil,
        promotion_start = net.ReadBool() and net.ReadUInt(32) or nil,
        promotion_end = net.ReadBool() and net.ReadUInt(32) or nil,
        promotion_amount = net.ReadBool() and net.ReadUInt(7) or nil,
        rarity = net.ReadBool() and net.ReadUInt(ashop.Config.BitsRarity) or nil,
        delete_death = net.ReadBool(),
        group_restrained = net.ReadBool() and net.ReadUInt(ashop.Config.BitsGroupRank) or nil,
        picture_link = net.ReadBool() and net.ReadString() or nil,
        expireTime = net.ReadBool() and net.ReadUInt(32) or nil,
        metadata = {}
    }

    if net.ReadBool() then
        for k, v in SortedPairs(ashop.object_types[t.object_types].ItemParameters) do
            local b = net.ReadBool()
            if b then
                t.metadata[k] = ashop.Network.GetReadFunction(v.type, v.options)
            end
        end
    end

    return t
end

function ashop.Network.R_PlyItem()
    local t = {}
    t.id = net.ReadUInt(ashop.Config.BitsPlyItemID)
    t.item_id = net.ReadUInt(ashop.Config.BitsItemID)

    local item = ashop.items[t.item_id]
    if item.expireTime then
        t.when = net.ReadUInt(32)
    end

    t.premium_buy = net.ReadBool()
    t.price_buy = net.ReadUInt(32)

    t.metadata = {}

    if net.ReadBool() then
        assert(item, "Missing item, when sending R_PlyItem. Item: " .. t.item_id .. ". PlyItem ID: " .. t.id)

        for k, v in SortedPairs(ashop.object_types[item.object_types].ItemParameters) do
            if net.ReadBool() then
                t.metadata[k] = ashop.Network.GetReadFunction(v.type, v.options)
            end
        end
    end

    return t
end

function ashop.Network.R_PlyItemFull()
    return {
        id = net.ReadUInt(ashop.Config.BitsPlyItemID),
        item_id = net.ReadUInt(ashop.Config.BitsItemID),
        metadata = net.ReadBool() and util.JSONToTable(net.ReadString()) or {},
        when = net.ReadUInt(32),
        price_buy = net.ReadUInt(32),
        premium_buy = net.ReadBool()
    }
end

function ashop.Network.R_SubCategory()
    return {
        object_typeid = net.ReadUInt(ashop.Config.BitsObjectType),
        id = net.ReadUInt(12),
        name = net.ReadString(),
        slotSize = net.ReadUInt(6),
        metadata = util.JSONToTable(ashop.Network.R_Compress())
    }
end

function ashop.Network.R_WeaponMaterials()
    local t = {vm = {}, wm = {}}

    for i = 1, net.ReadUInt(8) do
        t.vm[net.ReadUInt(8)] = true
    end

    for i = 1, net.ReadUInt(8) do
        t.wm[net.ReadUInt(8)] = true
    end

    return t
end

function ashop.Network.R_CarMaterials()
    local t = {}

    for i = 1, net.ReadUInt(8) do
        t[net.ReadUInt(8)] = true
    end

    return t
end
--addons/ashop/lua/ashop/code/ui/cl_fonts.lua:
// Flux shenanigans once again

local ScrH = ScrH
local ScrW = ScrW
local surface = surface
local createfonts = createfonts
local hook = hook

local w, h = ScrW(), ScrH()
local ratio_h = h / 1080
local ratio_w = w / 1920
local ratio = ratio_h < ratio_w and ratio_h or ratio_w

function ashop.GetSize(n)
    return n * ratio
end

function ashop.GetMargin(rat)
    return ashop.GetSize(h*0.0333 * (rat or 1))
end

// I searched 1h to debug this,
// https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/includes/modules/draw.lua#L33-L49
// The cache doesn't reset when you change screen size ...
local CachedFontHeights = {}
function ashop.GetFontHeight(font)
	if ( CachedFontHeights[ font ] != nil ) then
		return CachedFontHeights[ font ]
	end

	surface.SetFont( font )
	local w, h = surface.GetTextSize( "W" )
	CachedFontHeights[ font ] = h

	return h
end

local fontList = {
    {
        font = "Inter",
        prefix = "ashop_",
        size = {
            [-1] = {16, 18, 12, 14, 24},
            [700] = {16, 14, 24}
        },
    },

    {
        font = "Inter SemiBold",
        prefix = "ashop_",
        size = {
            [600] = {24, 12, 14, 20, 30, 60, 16, 32, 100},
        },
    },

    {
        font = "Inter",
        prefix = "ashop_3D2D_",
        size = {
            [-1] = {18, ashop.Config.FontSizeTitle, 40},
        }
    },

    {
        font = "After Miles Swash",
        prefix = "ashop_logo_bottom",
        size = {
            [-1] = {54},
        },
    },

    {
        font = "Pacifico",
        prefix = "ashop_logo_top",
        size = {
            [-1] = {48}
        }
    },

    {
        font = "ashop-",
        prefix = "ashop_icon_",
        size = {
            [-1] = {20, 25, 16, 50, 18}
        }
    }
}

// antialias
function createfonts()
    for _, fontInfo in pairs(fontList) do
        for weight, sizeTable in pairs(fontInfo.size) do
            for _, size in ipairs(sizeTable) do
                local name = fontInfo.prefix .. size

                if weight != -1 then
                    name = name .. "_" .. weight
                end

                local _, err = pcall(function()
                    surface.CreateFont(name, {
                        antialias = true,
                        size = fontInfo["3D2D"] and size or ashop.GetSize(size),
                        font = fontInfo.font,
                        underline = fontInfo.underline
                    })
                end)

                if err then
                    print("[AShop] Couldn't load the font " .. name .. " composed of : " .. fontInfo.font)
                    skip = true
                    break
                end
            end
        end
    end
end

createfonts()

function ashop.GetScreen()
    return w, h
end

hook.Add("OnScreenSizeChanged", "ashop_RefreshFont", function()
    w, h = ScrW(), ScrH()
    ratio_h = h / 1080
    ratio_w = w / 1920
    ratio = (ratio_h < ratio_w and ratio_h or ratio_w)
    createfonts()
    CachedFontHeights = {}
end)
--addons/ashop/lua/ashop/code/ui/cl_notification.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels/cl_adjustablemodelpanel.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels/cl_form.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels/cl_shopdisplayer.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/cl_premade.lua:
local white = ashop.GetColor('White')

ashop.premades = ashop.premades or {}

function ashop.RegisterPremade(name, t)
    ashop.premades[name] = t
end

local function callback1(IDtoObjectTypesData, missingObjectTypes, selectItems, value, items, unloadableItems, itemWidth, editor)
    local function callback()
        local selected = {}

        local saveMe = vgui.Create('DButton', selectItems)
        saveMe:Dock(RIGHT)
        saveMe:SetFont('ashop_14_600')
        saveMe:SetTextColor(white)
        saveMe:SetText(ashop.L('ClickHereToSaveSelection'))
        saveMe:SetWide(saveMe:GetContentSize())
        saveMe:SetPaintBackground(false)

        saveMe.DoClick = function()
            for k, v in pairs(selected) do
                net.Start('ashop_Item_New')
                    net.WriteUInt(v.object_types, ashop.Config.BitsObjectType)
        
                    net.WriteBool(v.sub_cat != nil)
        
                    if v.sub_cat != nil then
                        net.WriteUInt(v.sub_cat, ashop.Config.BitsObjectType)
                    end
        
                    net.WriteString(v.name)
                    net.WriteUInt(v.rarity, ashop.Config.BitsRarity)

                    net.WriteBool(false)
                    net.WriteBool(false)
                    net.WriteBool(false)
                    net.WriteBool(false)
                    net.WriteBool(false)
                    net.WriteBool(false)
                    net.WriteBool(false)
                    net.WriteBool(false)
                    net.WriteBool(false)

                    for k, itemParam in SortedPairs(ashop.object_types[v.object_types].ItemParameters) do
                        if itemParam.userEditable then continue end

                        if v.metadata[k] == nil then
                            net.WriteBool(false)
                        else
                            net.WriteBool(true)
                            ashop.Network.GetWriteFunction(itemParam.type, v.metadata[k], itemParam.options)
                        end
                    end
                net.SendToServer()
            end
            editor:Clear()
        end

        for k, v in pairs(value.items) do
            if !IDtoObjectTypesData[v.rendering] then
                unloadableItems = unloadableItems + 1
                continue
            end

            // Derma
            local itemTbl = {
                rarity = ashop.FindFirstRarity(),
                name = v.name,
                object_types = IDtoObjectTypesData[v.rendering][1],
                sub_cat = IDtoObjectTypesData[v.rendering][2],
                metadata = v.metadata
            }

            local p = vgui.Create("AShop_ShopItem", items)
            p:SetSize(itemWidth, ashop.GetSize(189))
            
            function p:Paint()
                p:SetItem(nil, itemTbl, true)
            end

            function p:DoClick()
                if selected[k] then
                    selected[k] = nil
                    self.isEquipped = nil
                else
                    selected[k] = itemTbl
                    self.isEquipped = true
                end
            end
        end
    end

    if table.Count(IDtoObjectTypesData) == table.Count(missingObjectTypes) then
        callback()
    else
        ashop.ui.popAskbox(ashop.L('CreateMissingSubCat'), ashop.L('NeededToCreateProperly'), function()
            local count = 0
            // Il ne créer pas ici
            hook.Add("ashop_createdobjecttype", "checkPremade", function()
                count = count - 1

                if count <= 0 then
                    callback()
                end
            end)
        end, callback)
    end
end

local function callback2(editor, wepKey, value, parent)
    local marginVertical = ashop.GetSize(20)
    local selectItems = vgui.Create('DLabel', editor)
    selectItems:Dock(TOP)
    selectItems:SetFont('ashop_14_600')
    selectItems:SetTextColor(white)
    selectItems:SetTall(select(2, selectItems:GetContentSize()))
    selectItems:SetText(ashop.L('SelectItemsToImport'))
    selectItems:SetMouseInputEnabled(true)

    local scroll = vgui.Create("DScrollPanel", editor)
    scroll:Dock(FILL)
    local vbar = scroll:GetVBar()
    vbar:SetWide(1)
    function vbar.btnUp:Paint() end
    function vbar.btnDown:Paint() end
    function vbar:Paint(w, h) end

    local stateOff = ashop.GetColor('StateOff')
    function vbar.btnGrip:Paint(w, h)
        DisableClipping(true)
        draw.RoundedBox(2, w + 4, 0, 2, h, stateOff)
        DisableClipping(false)
    end

    local items = vgui.Create('DIconLayout', scroll)
    items:Dock(TOP)
    items:SetSpaceY(marginVertical)
    items:SetSpaceX(marginVertical)
    items:DockMargin(0, 0, 0, 0)

    local itemWidth = math.floor((editor:GetWide() - marginVertical * 6) / 7) - 1

    // Missing object_types
    local IDtoObjectTypesData = {}
    local missingObjectTypes = table.Copy(value.objectTypes)
    local unloadableItems = 0
    local selectCategories = {}

    for k, v in ipairs(missingObjectTypes) do
        local good, objectTypeID, objectType = pcall(ashop.GetObjectTypeIDByUID, v[1])

        if !good then
            ashop.DermaNotify(ashop.L('ObjectTypeXIsMissing', v[1]), NOTIFY_ERROR, 6)
            missingObjectTypes[k] = nil
        end

        // Great, no sub_type, the best thing to happens
        if !v[2] then
            IDtoObjectTypesData[k] = {objectTypeID}
            continue
        end

        // Search if we can find any matching sub_type with same data
        for subCatID, subCatValues in pairs(objectType.sub_cat) do
            local cont = false

            for k, v in pairs(v[2]) do
                if v != subCatValues.metadata[k] then
                    cont = true
                    break
                end
            end

            if cont then continue end

            //IDtoObjectTypesData[k] = {objectTypeID, subCatID}
            selectCategories[k] = selectCategories[k] or {}
            table.insert(selectCategories[k], {objectTypeID, subCatID, subCatValues.name})
            //break
        end
    end

    if unloadableItems > 0 then
        ashop.DermaNotify(ashop.L('XItemsCouldntBeLoaded', unloadableItems), NOTIFY_HINT, 4)
    end

    if !table.IsEmpty(selectCategories) then
        local a = vgui.Create('AShop_Form', ashop.menu)
        a:SetTitle(ashop.L('WhichExistingCat'))

        for k, v in pairs(selectCategories) do
            local createList = {}

            for _, selectCat in pairs(v) do
                table.insert(createList, {selectCat[3], selectCat})
            end

            // Input list
            a:CreateEntry(true, ashop.L('UsedCatForX', missingObjectTypes[k][3]), 'SELECT', {selects = createList, required = true})
        end

        function a:OnSend(...)
            local t = {...}

            for k, v in pairs(selectCategories) do
                IDtoObjectTypesData[k] = {t[k][1], t[k][2]}
            end

            callback1(IDtoObjectTypesData, missingObjectTypes, selectItems, value, items, unloadableItems, itemWidth, editor)
        end

        a:Center()
    else
        callback1(IDtoObjectTypesData, missingObjectTypes, selectItems, value, items, unloadableItems, itemWidth, editor)
    end

    function editor:OnRemove()
        hook.Remove("ashop_createdobjecttype", "checkPremade")
    end
end

local function DrawInterior(editor, wepKey, value, parent)
    if value.requireWorkshop and value.requireWorkshop != "" then
        ashop.ui.popAskbox(ashop.L('RequireWorkshop'), ashop.L('AcceptToOpenPopup'), function()
            gui.OpenURL("https://steamcommunity.com/workshop/filedetails/?id=" .. value.requireWorkshop)
            callback2(editor, wepKey, value, parent)
        end, function()
            callback2(editor, wepKey, value, parent)
        end)
    else
        callback2(editor, wepKey, value, parent)
    end
end

ashop.registerParameter('Premades', DrawInterior, function()
    local o = {}

    for k, v in pairs(ashop.premades) do
        table.insert(o, {k, k, v})
    end

    return o
end)
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_hatpack.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_piratehat.lua:
ashop.RegisterPremade("Pirate Hat", {
        requireWorkshop = "351194925",

        objectTypes = {
            {
                "Wearables",
                {"ValveBiped.Bip01_Head1"},
                "Hat"
            },
        },

        items = {
            {
                name = "Pirate Hat",
                rendering = 1,
                metadata = {
                    [1] = 'models/piratehat/piratehat.mdl',
                    [3] = Vector(5.03125, 0.0625, 0.21875),
                    [4] = Angle(180, -70.3125, -90.40625),
                },
            },
        }
    }
)
--addons/sh_reports/lua/reports/lib_easynet.lua:
return gluapack()()
--addons/bodygroupr/lua/bodyman/bodyman_client.lua:
return gluapack()()
--addons/bodygroupr/lua/bodyman/bodyman_config.lua:
return gluapack()()
--lua/autorun/cfm_sparrow_gr.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/shared/ch_atm_config_lang.lua:
-- I DO NOT ADVISE YOU TRY TO EDIT BELOW THIS LINE UNLESS YOU UNDERSTAND HOW THIS WORKS!
-- IF YOU WANT TO ADD A LANAGUE PLEASE OPEN A SUPPORT TICKET ON GMODSTORE.
-- I WILL HELP YOU WITH ANYTHING YOU NEED AND ADD THE LANGUAGE TO THE OFFICIAL SCRIPT.
CH_ATM.Config.Lang = CH_ATM.Config.Lang or {}

CH_ATM.Config.Lang["Browse Cryptocurrencies"] = {
	["en"] = "Browse Cryptocurrencies",
	["fr"] = "Rechercher Crypto-monnaies",
	["da"] = "Gennemse Kryptovalutaer",
	["de"] = "Kryptowährungen durchsuchen",
	["pl"] = "Przeglądaj Kryptowaluty",
	["ru"] = "Просмотр Криптовалюты",
	["es"] = "Buscar Criptomonedas",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kripto Para Birimlerine Göz Atın",
	["no"] = "",
}

CH_ATM.Config.Lang["Portfolio"] = {
	["en"] = "Portfolio",
	["fr"] = "Portefeuille",
	["da"] = "Portefølje",
	["de"] = "Portfolie",
	["pl"] = "Portfolio",
	["ru"] = "Портфолио",
	["es"] = "Cartera",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Belgeler",
	["no"] = "",
}

CH_ATM.Config.Lang["Welcome"] = {
	["en"] = "Welcome",
	["fr"] = "Bienvenue",
	["da"] = "Velkommen",
	["de"] = "Willkommen",
	["pl"] = "Witaj",
	["ru"] = "Добро пожаловать",
	["es"] = "Bienvenido",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hoş geldin",
	["no"] = "",
}

CH_ATM.Config.Lang["Send Crypto"] = {
	["en"] = "Send Crypto",
	["fr"] = "Envoyer Crypto",
	["da"] = "Send krypto",
	["de"] = "Krypto senden",
	["pl"] = "Wyślij Krypto",
	["ru"] = "Отправить Крипто",
	["es"] = "Enviar Cripto",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kripto Para Gönder",
	["no"] = "",
}

CH_ATM.Config.Lang["Transaction History"] = {
	["en"] = "Transaction History",
	["fr"] = "Historique de transactions",
	["da"] = "Transaktionshistorik",
	["de"] = "Transaktionsverlauf",
	["pl"] = "Historia Transakcji",
	["ru"] = "История Транзакций",
	["es"] = "Historial de Transacciones",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İşlem Geçmişi",
	["no"] = "",
}

CH_ATM.Config.Lang["Total Balance"] = {
	["en"] = "Total Balance",
	["fr"] = "Solde total",
	["da"] = "Samlet balance",
	["de"] = "Balance",
	["pl"] = "Saldo",
	["ru"] = "Итоговый Баланс",
	["es"] = "Balance Total",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Toplam Bakiye",
	["no"] = "",
}

CH_ATM.Config.Lang["Deposit"] = {
	["en"] = "Deposit",
	["fr"] = "Déposer",
	["da"] = "Indbetal",
	["de"] = "Einzahlen",
	["pl"] = "Wpłać",
	["ru"] = "Внести",
	["es"] = "Depositar",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Depozito",
	["no"] = "",
}

CH_ATM.Config.Lang["Withdraw"] = {
	["en"] = "Withdraw",
	["fr"] = "Retirer",
	["da"] = "Hæv",
	["de"] = "Auszahlen",
	["pl"] = "Wypłać",
	["ru"] = "Снять",
	["es"] = "Retirar",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Para Çek",
	["no"] = "",
}

CH_ATM.Config.Lang["Transfer"] = {
	["en"] = "Transfer",
	["fr"] = "Transférer",
	["da"] = "Overførsel",
	["de"] = "Überweisen",
	["pl"] = "Przelej",
	["ru"] = "Перевести",
	["es"] = "Transferir",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Para Aktar",
	["no"] = "",
}

CH_ATM.Config.Lang["Please enter a valid number"] = {
	["en"] = "Please enter a valid number",
	["fr"] = "Merci d'entrer un nombre valide",
	["da"] = "Indtast venligst et gyldigt nummer",
	["de"] = "Bitte geben Sie eine gültige Nummer ein",
	["pl"] = "Prosze wprowadź poprawną kwote",
	["ru"] = "Пожалуйста введите правильное число",
	["es"] = "Por favor ingrese un número válido",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Lütfen geçerli bir numara girin",
	["no"] = "",
}

CH_ATM.Config.Lang["Press 'USE' to use the ATM"] = {
	["en"] = "Press 'USE' to use the ATM",
	["fr"] = "Appuyez sur 'UTILISER' pour utiliser l'ATM",
	["da"] = "Tryk på 'USE' for at bruge pengeautomaten",
	["de"] = "Drücken Sie 'USE', um den Geldautomaten zu benutzen",
	["pl"] = "Wciśnij 'USE' aby użyć bankomatu",
	["ru"] = "Нажмите 'USE' чтобы использовать банкомат",
	["es"] = "Presiona 'USE' (Por defecto 'E') para usar el ATM",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "'E' Tuşuna basarak ATM'ye erişebilirsiniz",
	["no"] = "",
}

CH_ATM.Config.Lang["Action Successful"] = {
	["en"] = "Action Successful",
	["fr"] = "Action réussie",
	["da"] = "Handlingen lykkedes",
	["de"] = "Aktion erfolgreich",
	["pl"] = "Akcja powiodła się",
	["ru"] = "Действие успешно",
	["es"] = "Acción Exitosa",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İşlem Başarılı",
	["no"] = "",
}

CH_ATM.Config.Lang["Action Unsuccessful"] = {
	["en"] = "Action Unsuccessful",
	["fr"] = "Action échouée",
	["da"] = "Handling mislykkedes",
	["de"] = "Aktion fehlgeschlagen",
	["pl"] = "Akcja nie powiodła się",
	["ru"] = "Действие неудачно",
	["es"] = "Acción no completada",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İşlem Başarısız",
	["no"] = "",
}

CH_ATM.Config.Lang["Loading page"] = {
	["en"] = "Loading page",
	["fr"] = "Chargement...",
	["da"] = "Indlæser side",
	["de"] = "Seite laden...",
	["pl"] = "Strona ładowania",
	["ru"] = "Загрузка страницы",
	["es"] = "Cargando página",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Yükleniyor..",
	["no"] = "",
}

CH_ATM.Config.Lang["Bank Account"] = {
	["en"] = "Bank Account",
	["fr"] = "Compte bancaire",
	["da"] = "Bankkonto",
	["de"] = "Bankkonto",
	["pl"] = "Konto Bankowe",
	["ru"] = "Банковский Счет",
	["es"] = "Cuenta Bancaria",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Banka Hesabı",
	["no"] = "",
}

CH_ATM.Config.Lang["Cryptocurrencies"] = {
	["en"] = "Cryptocurrencies",
	["fr"] = "Crypto-monnaies",
	["da"] = "Kryptovalutaer",
	["de"] = "Kryptowährungen",
	["pl"] = "Kryptowaluty",
	["ru"] = "Криптовалюты",
	["es"] = "Criptomonedas",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kripto Para Birimleri",
	["no"] = "",
}

CH_ATM.Config.Lang["Enter the amount using the keypad"] = {
	["en"] = "Enter the amount using the keypad",
	["fr"] = "Entrez le montant en utilisant le pavé numérique",
	["da"] = "Indtast beløbet ved hjælp af tastaturet",
	["de"] = "Geben Sie den Betrag über das Tastenfeld ein",
	["pl"] = "Wprowadź kwote używając klawiatury",
	["ru"] = "Введите сумму, используя клавиатуру",
	["es"] = "Ingresa la cantidad usando el pad",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Tuş takımını kullanarak miktarı girin",
	["no"] = "",
}

CH_ATM.Config.Lang["Select Player"] = {
	["en"] = "Select Player",
	["fr"] = "Selectionner un joueur",
	["da"] = "Vælg spiller",
	["de"] = "Wähle einen Spieler",
	["pl"] = "Wybierz Gracza",
	["ru"] = "Выберите Игрока",
	["es"] = "Seleccionar Jugador",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Oyuncu Seçin",
	["no"] = "",
}

CH_ATM.Config.Lang["Disconnected Player"] = {
	["en"] = "Disconnected Player",
	["fr"] = "Joueur déconnecté",
	["da"] = "Spiller afbrudt",
	["de"] = "Spieler ist nicht mehr auf dem Server",
	["pl"] = "Rozłączony Gracz",
	["ru"] = "Отключенный игрок",
	["es"] = "Jugador Desconectado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bağlantısı Kesilmiş Oyuncu",
	["no"] = "",
}

CH_ATM.Config.Lang["You need to select a player"] = {
	["en"] = "You need to select a player",
	["fr"] = "Vous avez besoin de sélectionner un joueur",
	["da"] = "Du skal vælge en spiller",
	["de"] = "Sie müssen einen Spieler auswählen",
	["pl"] = "Musisz wybrać gracza",
	["ru"] = "Вам нужно выбрать игрока",
	["es"] = "Debes seleccionar a un jugador",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Oyuncu seçmeniz gerekiyor",
	["no"] = "",
}

CH_ATM.Config.Lang["Crypto Worth"] = {
	["en"] = "Crypto Worth",
	["fr"] = "Valeur de la crypto",
	["da"] = "Krypto værdi",
	["de"] = "Krypto-Werte",
	["pl"] = "Wartość Krypto",
	["ru"] = "Крипто Стоит",
	["es"] = "Valor de la Cripto",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kripto Değeri",
	["no"] = "",
}

CH_ATM.Config.Lang["You don't have this much money!"] = {
	["en"] = "You don't have this much money!",
	["fr"] = "Vous n'avez pas autant d'argent !",
	["da"] = "Du har ikke så mange penge!",
	["de"] = "Du hast nicht so viel Geld!",
	["pl"] = "Nie masz takiej kwoty pieniędzy",
	["ru"] = "У вас нет таких денег!",
	["es"] = "¡No tienes esa cantidad de dinero!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu kadar paran yok!",
	["no"] = "",
}

CH_ATM.Config.Lang["The amount must be positive!"] = {
	["en"] = "The amount must be positive!",
	["fr"] = "Le montant doit être positif !",
	["da"] = "Beløbet skal være positivt!",
	["de"] = "Der Betrag muss positiv sein!",
	["pl"] = "Kwota musi być pozytywna",
	["ru"] = "Сумма должна быть положительной!",
	["es"] = "¡La cantidad debe ser positiva!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Miktar pozitif olmalı",
	["no"] = "",
}

CH_ATM.Config.Lang["You have deposited"] = {
	["en"] = "You have deposited",
	["fr"] = "Vous avez déposé",
	["da"] = "Du har indbetalt",
	["de"] = "Sie haben eingezahlt",
	["pl"] = "Wpłaciłeś",
	["ru"] = "Вы внесли депозит",
	["es"] = "Has depositado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Para yatırdın",
	["no"] = "",
}

CH_ATM.Config.Lang["You have withdrawn"] = {
	["en"] = "You have withdrawn",
	["fr"] = "Vous avez retiré",
	["da"] = "",
	["de"] = "Sie haben ausgezahlt",
	["pl"] = "Wypłaciłeś",
	["ru"] = "Вы сняли",
	["es"] = "Has retirado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Para çektin",
	["no"] = "",
}

CH_ATM.Config.Lang["You have sent"] = {
	["en"] = "You have sent",
	["fr"] = "Vous avez envoyé",
	["da"] = "Du har sendt",
	["de"] = "Sie haben gesendet",
	["pl"] = "Wysłałeś",
	["ru"] = "Вы отправили",
	["es"] = "Has enviado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Para gönderdin",
	["no"] = "",
}

CH_ATM.Config.Lang["The money has been deducted from your bank account."] = {
	["en"] = "The money has been deducted from your bank account.",
	["fr"] = "L'argent a été déduit de votre compte bancaire.",
	["da"] = "Pengene er trukket fra din bankkonto.",
	["de"] = "Das Geld wurde von Ihrem Bankkonto abgebucht.",
	["pl"] = "Pieniądze zostały odliczone z twojego konta bankowego.",
	["ru"] = "Деньги были вычтены с вашего банковского счета.",
	["es"] = "El dinero ha sido retirado de tu cuenta bancaria.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Paranız banka hesabınızdan çekildi.",
	["no"] = "",
}

CH_ATM.Config.Lang["You have received"] = {
	["en"] = "You have received",
	["fr"] = "Vous avez reçu",
	["da"] = "Du har modtaget",
	["de"] = "Sie haben erhalten",
	["pl"] = "Otrzymałeś",
	["ru"] = "Вы получили",
	["es"] = "Has recibido",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Almış olduğunuz",
	["no"] = "",
}

CH_ATM.Config.Lang["The money has been sent to your bank account."] = {
	["en"] = "The money has been sent to your bank account.",
	["fr"] = "L'argent a été envoyé sur votre compte bancaire.",
	["da"] = "Pengene er blevet sat ind på din bankkonto.",
	["de"] = "Das Geld ist auf Ihr Bankkonto überwiesen worden.",
	["pl"] = "Pieniądze zostały wysłane na twoje konto bankowe",
	["ru"] = "Деньги были отправлены на ваш банковский счет.",
	["es"] = "El dinero ha sido envíado a tu cuenta bancaria.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Para banka hesabınıza gönderildi.",
	["no"] = "",
}

CH_ATM.Config.Lang["You have died and dropped"] = {
	["en"] = "You have died and dropped",
	["fr"] = "Vous êtes mort et vous avez lâché",
	["da"] = "Du er død og tabte",
	["de"] = "Du bist gestorben",
	["pl"] = "Umarłeś i wyrzuciłeś",
	["ru"] = "Вы умерли и уронили",
	["es"] = "Has muerto y has soltado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Öldün ve düştün",
	["no"] = "",
}

CH_ATM.Config.Lang["Interest for having money in your bank account has been paid."] = {
	["en"] = "Interest for having money in your bank account has been paid.",
	["fr"] = "Les intérêts bancaires ont été payés.",
	["da"] = "Der er indbetalt renter for at have penge på din bankkonto.",
	["de"] = "Die Zinsen für das Guthaben auf Ihrem Bankkonto wurden bereits gezahlt.",
	["pl"] = "Odsetki za posiadanie pieniędzy na twoim koncie bankowym zostały opłacone.",
	["ru"] = "Вы получили проценты за деньги на вашем банковском счете.",
	["es"] = "El interés por tener dinero en la cuenta bancaria ha sido pagado.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Banka hesabınızda para olması için faiz ödendi.",
	["no"] = "",
}

CH_ATM.Config.Lang["Your interest rate has been updated."] = {
	["en"] = "Your interest rate has been updated.",
	["fr"] = "Votre pourcentage d'intérêt a été amélioré.",
	["da"] = "Din rente er blevet opdateret.",
	["de"] = "Ihr Zinssatz wurde aktualisiert.",
	["pl"] = "Twoje oprocentowanie zosało zaaktualizowane.",
	["ru"] = "Ваша процентная ставка была обновлена.",
	["es"] = "Tu tasa de interés ha sido actualizada.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Faiz oranınız güncellendi!.",
	["no"] = "",
}

CH_ATM.Config.Lang["Your interest rate is now"] = {
	["en"] = "Your interest rate is now",
	["fr"] = "Votre pourcentage d'intérêt est maintenant",
	["da"] = "Din rente er nu",
	["de"] = "Ihr Zinssatz beträgt jetzt",
	["pl"] = "Twoje oprocentowanie wynosi",
	["ru"] = "Ваша процентная ставка сейчас",
	["es"] = "Tu tasa de interés es ahora",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Faiz oranınız artık",
	["no"] = "",
}

CH_ATM.Config.Lang["Wallet Balance"] = {
	["en"] = "Wallet Balance",
	["fr"] = "Portefeuille",
	["da"] = "Pung balance",
	["de"] = "Geld dabei",
	["pl"] = "Saldo w portfelu",
	["ru"] = "Баланс кошелька",
	["es"] = "Balance de Cartera",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Cüzdan Bakiyesi",
	["no"] = "",
}

CH_ATM.Config.Lang["Upgrade Account - Next Level"] = {
	["en"] = "Upgrade Account - Next Level",
	["fr"] = "Mise à jour du compte - Prochain Niveau",
	["da"] = "Opgrader konto - Næste niveau",
	["de"] = "Upgrade-Konto - Nächste Stufe",
	["pl"] = "Ulepsz Konto - Następny Poziom",
	["ru"] = "Улучшение аккаунта - Следующий Уровень",
	["es"] = "Mejorar la cuenta - Siguiente Nivel",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hesabı Yükselt - Sonraki Seviye",
	["no"] = "",
}

CH_ATM.Config.Lang["Costs"] = {
	["en"] = "Costs",
	["fr"] = "Frais",
	["da"] = "Koster",
	["de"] = "Kosten",
	["pl"] = "Koszta",
	["ru"] = "Расходы",
	["es"] = "Costos",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Maliyetler",
	["no"] = "",
}

CH_ATM.Config.Lang["Your bank account has been upgraded to level"] = {
	["en"] = "Your bank account has been upgraded to level",
	["fr"] = "Votre compte bancaire a été amélioré au niveau",
	["da"] = "Din bankkonto er blevet opgraderet til niveau",
	["de"] = "Ihr Bankkonto wurde auf eine höhere Stufe gebracht",
	["pl"] = "Twoje konto bankowe zostało ulepszone do poziomu",
	["ru"] = "Ваш банковский аккаунт был улучшен до уровня",
	["es"] = "Tu cuenta bancaria ha sido mejorada al nivel",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Banka hesabınızın seviyesi geliştirildi",
	["no"] = "",
}

CH_ATM.Config.Lang["Your account cannot be upgraded anymore!"] = {
	["en"] = "Your account cannot be upgraded anymore!",
	["fr"] = "Votre compte ne peut plus être amélioré !",
	["da"] = "Din konto kan ikke længere opgraderes!",
	["de"] = "Ihr Konto kann nicht mehr aufgewertet werden!",
	["pl"] = "Twoje konto nie może już zostac ulepszone!",
	["ru"] = "Ваша учетная запись больше не может быть улучшена!",
	["es"] = "¡Tu cuenta bancaria ya no puede ser mejorada!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hesabınız artık yükseltilemez!",
	["no"] = "",
}

CH_ATM.Config.Lang["Sending"] = { -- Sending 0.002 Bitcoin to Crap-Head
	["en"] = "Sending",
	["fr"] = "Vous avez envoyé",
	["da"] = "Sender",
	["de"] = "Senden",
	["pl"] = "Wysyłasz",
	["ru"] = "Отправка",
	["es"] = "Enviando",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Gönderiliyor",
	["no"] = "",
}

CH_ATM.Config.Lang["to"] = { -- Sending 0.002 Bitcoin to Crap-Head
	["en"] = "to",
	["fr"] = "à",
	["da"] = "til",
	["de"] = "zu",
	["pl"] = "do",
	["ru"] = "-",
	["es"] = "a",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kişisine",
	["no"] = "",
}

CH_ATM.Config.Lang["User Settings"] = {
	["en"] = "User Settings",
	["fr"] = "Paramètres d'utilisateur",
	["da"] = "Bruger indstillinger",
	["de"] = "Benutzereinstellungen",
	["pl"] = "Ustawienia Użytkownika",
	["ru"] = "Пользовательские настройки",
	["es"] = "Configuración de Usuario",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kullanıcı Ayarları",
	["no"] = "",
}

CH_ATM.Config.Lang["White Icons"] = {
	["en"] = "White Icons",
	["fr"] = "Icônes Blanches",
	["da"] = "Brugerindstillinger",
	["de"] = "Weiße-Symbole",
	["pl"] = "Białe Ikony",
	["ru"] = "Белые иконки",
	["es"] = "Íconos Blancos",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Beyaz Simgeler",
	["no"] = "",
}

CH_ATM.Config.Lang["Gradient Icons"] = {
	["en"] = "Gradient Icons",
	["fr"] = "Icônes Dégradées",
	["da"] = "Gradient ikoner",
	["de"] = "Farbverlauf-Symbole",
	["pl"] = "Ikony Gradientowe",
	["ru"] = "Градиент иконки",
	["es"] = "Íconos con Degradado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Gradyan Simgeler",
	["no"] = "",
}

CH_ATM.Config.Lang["Flat Color Icons"] = {
	["en"] = "Flat Color Icons",
	["fr"] = "Icônes 'Flat' Colorées",
	["da"] = "Flade farveikoner",
	["de"] = "Flache Farbsymbole",
	["pl"] = "Płaskie Kolorowe Ikony",
	["ru"] = "Одноцветные иконки",
	["es"] = "Íconos de Color Fijo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Düz Renkli İkonlar",
	["no"] = "",
}

CH_ATM.Config.Lang["Use Cursor"] = {
	["en"] = "Use Cursor",
	["fr"] = "Utiliser Curseur",
	["da"] = "Brug markøren",
	["de"] = "Cursor verwenden",
	["pl"] = "Użyj Kursora",
	["ru"] = "Использовать курсор",
	["es"] = "Usar Cursor",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "İmleçi kullan",
	["no"] = "",
}

CH_ATM.Config.Lang["Use Hand"] = {
	["en"] = "Use Hand",
	["fr"] = "Utiliser Main",
	["da"] = "Brug hånd",
	["de"] = "Hand benutzen",
	["pl"] = "Użyj Ręki",
	["ru"] = "Использовать руку",
	["es"] = "Usar Mano",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Elini Kullan",
	["no"] = "",
}

CH_ATM.Config.Lang["Account Information"] = {
	["en"] = "Account Information",
	["fr"] = "Information du compte",
	["da"] = "Kontooplysninger",
	["de"] = "Konto-Informationen",
	["pl"] = "Informacje o Koncie",
	["ru"] = "Информация об аккаунте",
	["es"] = "Información de la Cuenta",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hesap Bilgileri",
	["no"] = "",
}

CH_ATM.Config.Lang["Account Level"] = {
	["en"] = "Account Level",
	["fr"] = "Niveau du compte",
	["da"] = "Kontoniveau",
	["de"] = "Konto-Level",
	["pl"] = "Poziom Konta",
	["ru"] = "Уровень аккаунта",
	["es"] = "Nivel de la Cuenta",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hesap Seviyesi",
	["no"] = "",
}

CH_ATM.Config.Lang["Interest Rate"] = {
	["en"] = "Interest Rate",
	["fr"] = "Pourcentage d'intérêts",
	["da"] = "Rente",
	["de"] = "Zinssatz",
	["pl"] = "Oprocentowanie",
	["ru"] = "Процентная ставка",
	["es"] = "Tasa de Interés",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Faiz Oranı",
	["no"] = "",
}

CH_ATM.Config.Lang["Max"] = {
	["en"] = "Max",
	["fr"] = "Maximum",
	["da"] = "Maks",
	["de"] = "Max",
	["pl"] = "Maksimum",
	["ru"] = "Максимум",
	["es"] = "Máx",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Maksimum",
	["no"] = "",
}

CH_ATM.Config.Lang["Unlimited"] = {
	["en"] = "Unlimited",
	["fr"] = "Illimité",
	["da"] = "Ubegrænset",
	["de"] = "Unendlich",
	["pl"] = "bez limitu",
	["ru"] = "Неограниченный",
	["es"] = "Ilimitada",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sınırsız",
	["no"] = "",
}

CH_ATM.Config.Lang["Max Interest"] = {
	["en"] = "Max Interest",
	["fr"] = "Intérêts maximums",
	["da"] = "Maks rente",
	["de"] = "Höchstzinssatz",
	["pl"] = "Maksymalne Odsetki",
	["ru"] = "Максимальный процент",
	["es"] = "Interés Máximo",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Maksimum Faiz",
	["no"] = "",
}

CH_ATM.Config.Lang["Upgrade Account"] = {
	["en"] = "Upgrade Account",
	["fr"] = "Améliorer le compte",
	["da"] = "Opgrader konto",
	["de"] = "Upgrade-Konto",
	["pl"] = "Ulepsz Konto",
	["ru"] = "Улучшить аккаунт",
	["es"] = "Mejorar Cuenta",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hesabını Geliştir",
	["no"] = "",
}

CH_ATM.Config.Lang["has been deducted from your bank account."] = { -- $100 has been deducted from your bank account.
	["en"] = "has been deducted from your bank account.",
	["fr"] = "a été déduit de votre compte bancaire.",
	["da"] = "er blevet trukket på din bankkonto.",
	["de"] = "wurden von Ihrem Bankkonto abgebucht.",
	["pl"] = "zostało odliczone z twojego konta bankowego",
	["ru"] = "были вычтены с вашего банковского счета.",
	["es"] = "han sido retirados de tu cuenta bancaria.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "banka hesabınızdan düşülmüştür.",
	["no"] = "",
}

CH_ATM.Config.Lang["Your bank account holding has gone above your maximum of"] = { -- Your bank account holding has gone above your maximum of $3.000.000
	["en"] = "Your bank account holding has gone above your maximum of",
	["fr"] = "Votre compte bancaire a dépassé votre maximum de",
	["da"] = "Din bankkontobeholdning har overskredet dit maksimum på",
	["de"] = "Ihr Bankguthaben hat den Höchstbetrag von",
	["pl"] = "Twoje konto bankowe przekroczyło twoją kwote maksymalną",
	["ru"] = "Ваш банковский счет превысил максимальное значение в",
	["es"] = "Tu saldo de cuenta bancaria ha superado el máximo de",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Banka hesap bakiyeniz maksimum tutarınızın üstüne çıktı.",
	["no"] = "",
}

CH_ATM.Config.Lang["Your bank account cannot receive more money and it has been set to your maximum."] = {
	["en"] = "Your bank account cannot receive more money and it has been set to your maximum.",
	["fr"] = "Votre compte bancaire ne peut plus recevoir d'argent, car vous avez atteint la limite de votre compte.",
	["da"] = "Din bankkonto kan ikke modtage flere penge, og den er sat til dit maksimum.",
	["de"] = "Ihr Bankkonto kann kein Geld mehr erhalten und ist auf Ihren Höchstbetrag eingestellt.",
	["pl"] = "Twoje konto bankowe nie może otrzymywać więcej pieniędzy i zostało ustawione do twojej kwoty maksymalnej.",
	["ru"] = "Ваш банковский счет не может получить больше денег, он достиг вашего максимума.",
	["es"] = "Tu cuenta bancaria ya no puede recibir dinero y ha llegado al máximo.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Banka hesabınız daha fazla para alamaz ve limitiniz maksimuma ayarlanmıştır.",
	["no"] = "",
}

CH_ATM.Config.Lang["Upgrade your account to increase your max holding."] = {
	["en"] = "Upgrade your account to increase your max holding.",
	["fr"] = "Améliorez votre compte pour augmenter la limite maximale d'argent stocké.",
	["da"] = "Opgrader din konto for at øge din maksimale beholdning.",
	["de"] = "Erhöhen Sie Ihr Konto, um Ihr maximales Guthaben zu erhöhen.",
	["pl"] = "Ulepsz swoje konto aby zwiększyć maksymalną przetrzymywaną kwote.",
	["ru"] = "Обновите свою учетную запись, чтобы увеличить максимальный холдинг.",
	["es"] = "Incrementa el nivel de tu cuenta para elevar el máximo dinero contenido en ella.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Maksimum kazancınızı artırmak için hesabınızı yükseltin.",
	["no"] = "",
}

CH_ATM.Config.Lang["You have not earned interest due to your account maximum being reached."] = {
	["en"] = "You have not earned interest due to your account maximum being reached.",
	["fr"] = "Vous n'avez pas reçu vos intérêts, car votre compte a atteint le solde maximum.",
	["da"] = "Du har ikke optjent renter, fordi dit kontomaksimum er nået.",
	["de"] = "Sie haben keine Zinsen erhalten, weil Ihr Kontomaximum erreicht wurde.",
	["pl"] = "Nie dostałeś odsetek z powodu przekroczenia maksimum twojego konta.",
	["ru"] = "Вы не получили проценты из-за достижения максимальной суммы на вашем счете.",
	["es"] = "No has ganado ningún interés ya que tu cuenta ha llegado al límite disponible de saldo.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hesabınız maksimum sınıra ulaştığı için faiz kazanamadınız.",
	["no"] = "",
}

CH_ATM.Config.Lang["Someone is hacking an ATM. It has been marked on your map!"] = {
	["en"] = "Someone is hacking an ATM. It has been marked on your map!",
	["fr"] = "Quelqu'un pirate un ATM. Il est marqué sur votre carte !",
	["da"] = "Nogen hacker en hæveautomat. Dens lokation er blevet markeret på dit kort!",
	["de"] = "Jemand hackt einen Geldautomaten. Der Standort wurde auf Ihrer Karte markiert!",
	["pl"] = "Ktoś hackuje bankomat. Został oznaczony na twojej mapie!",
	["ru"] = "Кто-то взламывает банкомат. Он отмечен на вашей карте!",
	["es"] = "¡Alguien está hackeando un ATM! Ha sido marcado en tu mapa.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Birisi ATM'yi soyuyor. Haritanızda işaretlendi",
	["no"] = "",
}

CH_ATM.Config.Lang["Out of order"] = {
	["en"] = "Out of order",
	["fr"] = "Hors service",
	["da"] = "Ude af drift",
	["de"] = "Außer Betrieb",
	["pl"] = "Nieczynny",
	["ru"] = "Вышел из строя",
	["es"] = "Fuera de Servicio",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Hizmet Dışı",
	["no"] = "",
}

CH_ATM.Config.Lang["Rebooting in"] = {
	["en"] = "Rebooting in",
	["fr"] = "Redémarrage dans",
	["da"] = "Genstarter om",
	["de"] = "Startet neu in",
	["pl"] = "Restartowanie za",
	["ru"] = "Перезагрузка через",
	["es"] = "Reiniciando en",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Yeniedn başlatılıyor",
	["no"] = "",
}

CH_ATM.Config.Lang["Distance"] = {
	["en"] = "Distance",
	["fr"] = "Distance",
	["da"] = "Afstand",
	["de"] = "Entfernung",
	["pl"] = "Dystans",
	["ru"] = "Расстояние",
	["es"] = "Distancia",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Mesafe",
	["no"] = "",
}

CH_ATM.Config.Lang["ATM Being Hacked"] = {
	["en"] = "ATM Being Hacked",
	["fr"] = "ATM piraté",
	["da"] = "ATM bliver hacket",
	["de"] = "ATM wird gehackt",
	["pl"] = "Bankomat jest hackowany",
	["ru"] = "Банкомат взломан",
	["es"] = "ATM Siendo hackeado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM soyuldu",
	["no"] = "",
}

CH_ATM.Config.Lang["Hacking ATM"] = {
	["en"] = "Hacking ATM",
	["fr"] = "Piratage de l'ATM",
	["da"] = "Hacker ATM",
	["de"] = "ATM hacken",
	["pl"] = "Hackowanie Bankomatu",
	["ru"] = "Банкомат взламывается",
	["es"] = "Hackeando ATM",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM'yi soy",
	["no"] = "",
}

CH_ATM.Config.Lang["In progress..."] = {
	["en"] = "In progress...",
	["fr"] = "En cours...",
	["da"] = "I gang...",
	["de"] = "In Arbeit...",
	["pl"] = "W trakcie...",
	["ru"] = "В ходе выполнения...",
	["es"] = "En progreso...",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Devam etmekte...",
	["no"] = "",
}

CH_ATM.Config.Lang["Scan credit card"] = { -- MAX 21 CHARACTERS INCLUDING SPACES
	["en"] = "Scan credit card",
	["fr"] = "Scanner la carte",
	["da"] = "Scan kreditkort",
	["de"] = "Kreditkarte scannen",
	["pl"] = "Skanuj karte",
	["ru"] = "Скан. кредитку",
	["es"] = "Escanear tarjeta",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kredi kartını okut",
	["no"] = "",
}

CH_ATM.Config.Lang["Enter and confirm"] = { -- MAX 21 CHARACTERS INCLUDING SPACES
	["en"] = "Enter and confirm",
	["fr"] = "Entrer et confirmer",
	["da"] = "Indtast og godkend",
	["de"] = "Bestätigen",
	["pl"] = "Wprowadź i potwierdź",
	["ru"] = "Ввести и подтвердить",
	["es"] = "Entrar y confirmar",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Girin ve onaylayın",
	["no"] = "",
}

CH_ATM.Config.Lang["has been charged from your bank account."] = {
	["en"] = "has been charged from your bank account.",
	["fr"] = "a été chargé de votre compte bancaire.",
	["da"] = "er blevet debiteret fra din bankkonto.",
	["de"] = "von Ihrem Bankkonto abgebucht worden.",
	["pl"] = "zostało obciążone z twojego konta bankowego.",
	["ru"] = "списано с вашего банковского счета.",
	["es"] = "ha sido cobrado de tu cuenta bancaria.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "banka hesabınızdan tahsil edilmiştir.",
	["no"] = "",
}

CH_ATM.Config.Lang["has swiped their credit card on your card terminal."] = {
	["en"] = "has swiped their credit card on your card terminal.",
	["fr"] = "a passé sa carte bancaire dans votre terminal.",
	["da"] = "har swipet deres kreditkort på din kortterminal.",
	["de"] = "ihre Kreditkarte an Ihrem Kartenterminal durchgezogen haben.",
	["pl"] = "użył swojej karty na twoim terminalu.",
	["ru"] = "провел свою кредитную карту на вашем терминале.",
	["es"] = "ha pasado su tarjeta en tu terminal de tarjetas.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "kredi kartı pos cihazınıza okutuldu.",
	["no"] = "",
}

CH_ATM.Config.Lang["The card scanner terminal does not have a valid owner!"] = {
	["en"] = "The card scanner terminal does not have a valid owner!",
	["fr"] = "Le terminal bancaire n'a pas de propriétaire valide !",
	["da"] = "Kortscannerterminalen har ikke en gyldig ejer!",
	["de"] = "Das Kartenterminal hat keinen gültigen Besitzer!",
	["pl"] = "Terminal nie posiada właściciela!",
	["ru"] = "Терминал сканера карт не имеет действительного владельца!",
	["es"] = "¡El escáner de tarjetas no tiene un dueño válido!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Pos cihazının bir sahibi yok!",
	["no"] = "",
}

CH_ATM.Config.Lang["The card scanner terminal price is 0 or below!"] = {
	["en"] = "The card scanner terminal price is 0 or below!",
	["fr"] = "Le montant sur le terminal bancaire est égal ou inférieur à 0 !",
	["da"] = "Prisen er 0 eller derunder!",
	["de"] = "Der Preis für das Kartenterminal ist 0 oder niedriger!",
	["pl"] = "Cena w terminalu wynosi 0 lub mniej!",
	["ru"] = "Цена на терминале 0 или ниже!",
	["es"] = "¡El precio del escáner de tarjetas es 0 o negativo!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Pos cihazı fiyatı 0 veya altındadır!",
	["no"] = "",
}

CH_ATM.Config.Lang["The credit card scanner is not ready to take your card. Waiting for owner..."] = {
	["en"] = "The credit card scanner is not ready to take your card. Waiting for owner...",
	["fr"] = "Le terminal bancaire n'est pas prêt pour prendre votre carte. En attente du propriétaire...",
	["da"] = "",
	["de"] = "Der Kreditkartenscanner ist nicht bereit, Ihre Karte zu akzeptieren. Warten sie auf den Besitzer...",
	["pl"] = "Terminal nie jest gotowy do przyjęcia twojej karty. Czekanie na właściciela...",
	["ru"] = "Сканер кредитных карт не готов принять вашу карту. Ожидание хозяина...",
	["es"] = "El escáner de tarjetas no está preparado para detectar tu tarjeta. Esperando al dueño...",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Pos cihazı kartınızı almaya hazır değil. sahibini bekliyor...",
	["no"] = "",
}

CH_ATM.Config.Lang["has been added to your bank account."] = {
	["en"] = "has been added to your bank account.",
	["fr"] = "a été ajouté à votre compte bancaire.",
	["da"] = "er blevet tilføjet til din bankkonto.",
	["de"] = "wurde Ihrem Bankkonto gutgeschrieben.",
	["pl"] = "zostało dodane do twojego konta bankowego.",
	["ru"] = "добавлено на ваш банковский счет.",
	["es"] = "ha sido depositado en tu cuenta.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "banka hesabınıza eklendi.",
	["no"] = "",
}

CH_ATM.Config.Lang["Left or right click while looking at a card scanner to pay the owner."] = {
	["en"] = "Left or right click while looking at a card scanner to pay the owner.",
	["fr"] = "Clique gauche ou droit quand vous regardez le terminal bancaire pour payer le propriétaire.",
	["da"] = "Venstre- eller højreklik, mens du ser på en kortscanner for at betale ejeren.",
	["de"] = "Klicken Sie auf die linke oder rechte Maustaste, während Sie auf einen Kartenscanner schauen, um den Besitzer zu bezahlen.",
	["pl"] = "Wciśnij lewy lub prawy guzik patrząc się na terminal aby zapłacić właścicielowi.",
	["ru"] = "Щелкните левой или правой кнопкой мыши, глядя на сканер карт, чтобы заплатить владельцу.",
	["es"] = "Click izquierdo o derecho mientras miras al escáner para pagarle al dueño de este.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Sahibine ödeme yapmak için bir pos tarayıcısına bakarken sol veya sağ tıklayın.",
	["no"] = "",
}

CH_ATM.Config.Lang["Please move closer to the credit card scanner."] = {
	["en"] = "Please move closer to the credit card scanner.",
	["fr"] = "Merci de vous rapprocher du terminal bancaire.",
	["da"] = "Flyt venligst tættere på kreditkortscanneren.",
	["de"] = "Bitte gehen Sie näher an den Kreditkartenscanner heran.",
	["pl"] = "Prosze przesuń się bliżej terminalu.",
	["ru"] = "Пожалуйста, подойдите ближе к сканеру кредитных карт.",
	["es"] = "Por favor acérquese al escáner",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Lütfen pos cihazına yaklaşın.",
	["no"] = "",
}

CH_ATM.Config.Lang["Only administrators can perform this action!"] = {
	["en"] = "Only administrators can perform this action!",
	["fr"] = "Seuls les administrateurs peuvent faire cette action !",
	["da"] = "Kun administratorer kan udføre denne handling!",
	["de"] = "Nur Administratoren können diese Aktion durchführen!",
	["pl"] = "Tylko adnimistrator może wykonać tą akcje!",
	["ru"] = "Это действие могут выполнять только администраторы!",
	["es"] = "¡Sólo los adminsitradores pueden hacer esto!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu işlemi sadece yöneticiler gerçekleştirebilir.",
	["no"] = "",
}

CH_ATM.Config.Lang["All ATM's have been saved to the map!"] = {
	["en"] = "All ATM's have been saved to the map!",
	["fr"] = "Tous les ATM ont été sauvegardés sur la carte !",
	["da"] = "Alle pengeautomater er blevet gemt på banen!",
	["de"] = "Alle Geldautomaten wurden auf der Karte gespeichert!",
	["pl"] = "Wszystkie bankomaty zostały zapisane na mapie!",
	["ru"] = "Все банкоматы сохранены на карте!",
	["es"] = "¡Todos los ATMs fueron guardados en el mapa!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Tüm ATM'ler haritada kaydedildi!",
	["no"] = "",
}

CH_ATM.Config.Lang["players required to hack ATM's."] = {
	["en"] = "players required to hack ATM's.",
	["fr"] = "joueurs requis pour pirater l'ATM.",
	["da"] = "spillere nødvendig for at hacke pengeautomater.",
	["de"] = "Spieler, die zum Hacken von Geldautomaten benötigt werden.",
	["pl"] = "graczy wymaganych do zhackowania bankomatów.",
	["ru"] = "требуедтся игроков чтобы взломать банкомат.",
	["es"] = "jugadores necesarios para hackear ATMs.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM'yi soymak için gerekli oyuncu sayısı",
	["no"] = "",
}

CH_ATM.Config.Lang["police officers required to hack ATM's."] = {
	["en"] = "police officers required to hack ATM's.",
	["fr"] = "agents de police pour pirater l'ATM.",
	["da"] = "politibetjente nødvendig for at hacke pengeautomater.",
	["de"] = "Es müssen Polizisten Online sein um ein ATM zu Hacken.",
	["pl"] = "policjantów wymaganych do zhackowania bankomatów.",
	["ru"] = "требуедтся полиции чтобы взломать банкомат.",
	["es"] = "oficiales de policía para hackear ATMs",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM'leri soymak için gerekli polis memurları.",
	["no"] = "",
}

CH_ATM.Config.Lang["You are not allowed to rob the bank with your current team!"] = {
	["en"] = "You are not allowed to rob the bank with your current team!",
	["fr"] = "Vous n'êtes pas autorisé à braquer la banque avec votre métier actuel !",
	["da"] = "Du må ikke røve banken med dit nuværende job!",
	["de"] = "Du darfst mit deinem aktuellen Team nicht die Bank ausrauben!",
	["pl"] = "Nie możesz okraść banku z twoją obecną pracą!",
	["ru"] = "Вам не разрешено грабить банк в своей нынешней профессии!",
	["es"] = "¡No tienes permitido robar el banco con tu trabajo/equipo actual!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Mevcut mesleğinizle bankayı soymanıza izin verilmiyor.",
	["no"] = "",
}

CH_ATM.Config.Lang["You cannot lockpick this ATM at the moment."] = {
	["en"] = "You cannot lockpick this ATM at the moment.",
	["fr"] = "Vous ne pouvez pas crocheter l'ATM pour le moment.",
	["da"] = "Du kan ikke hacke denne pengeautomat i øjeblikket.",
	["de"] = "Sie können diesen Geldautomaten zur Zeit nicht knacken.",
	["pl"] = "Nie możesz teraz włamać się do tego bankomatu.",
	["ru"] = "На данный момент вы не можете взломать этот банкомат.",
	["es"] = "No puedes forzar este ATM en este momento.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Şu anda bu ATM'nin kilidini açamazsın",
	["no"] = "",
}

CH_ATM.Config.Lang["Please wait"] = {
	["en"] = "Please wait",
	["fr"] = "Merci de patienter",
	["da"] = "Vent venligst",
	["de"] = "Bitte warten",
	["pl"] = "Prosze poczekaj",
	["ru"] = "Пожалуйста подождите",
	["es"] = "Por favor espere",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Lütfen bekleyin",
	["no"] = "",
}

CH_ATM.Config.Lang["before lockpicking another ATM."] = {
	["en"] = "before lockpicking another ATM.",
	["fr"] = "avant de crocheter un autre ATM.",
	["da"] = "før du prøver på en anden hæveautomat.",
	["de"] = "bevor sie einen anderen Geldautomaten knacken.",
	["pl"] = "przed włamaniem się do innego bankomatu.",
	["ru"] = "перед взломом другого банкомата.",
	["es"] = "antes de forzar otro ATM.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "önceki ATM'nin kilidini kırmadan önce.",
	["no"] = "",
}

CH_ATM.Config.Lang["You are already lockpicking an ATM."] = {
	["en"] = "You are already lockpicking an ATM.",
	["fr"] = "Vous êtes déjà en train de crocheter un ATM.",
	["da"] = "Du stjæler allerede fra en hæveautomat.",
	["de"] = "Sie sind bereits dabei, einen Geldautomaten zu knacken.",
	["pl"] = "Już włamujesz się do tego bankomatu.",
	["ru"] = "Вы уже взламываете банкомат.",
	["es"] = "Ya estás forzando un ATM.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Zaten bir ATM'nin kilidini kırıyorsun.",
	["no"] = "",
}

CH_ATM.Config.Lang["You have successfully lockpicked the ATM and have stolen"] = { -- You have successfully lockpicked the ATM and have stolen $1235
	["en"] = "You have successfully lockpicked the ATM and have stolen",
	["fr"] = "Vous avez crocheté l'ATM avec succès et avez volé",
	["da"] = "Du har hacket pengeautomaten og har stjålet",
	["de"] = "Sie haben den Geldautomaten erfolgreich geknackt und haben Geld bekommen:",
	["pl"] = "Pomyślnie włamałeś się do Bankomatu i ukradłeś",
	["ru"] = "Вы успешно взломали банкомат и украли",
	["es"] = "Has forzado el ATM exitosamente y te has llevado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM'nin kilidini başarıyla kırdınız ve şu kadar çaldınız",
	["no"] = "",
}

CH_ATM.Config.Lang["A bank ATM has been robbed and the robber got away with"] = { -- A bank ATM has been robbed and the robber got away with $1234
	["en"] = "A bank ATM has been robbed and the robber got away with",
	["fr"] = "Un distributeur de banque a été braqué et le braqueur s'est enfuit avec",
	["da"] = "En bankhæveautomat er blevet røvet, og røveren slap af sted med",
	["de"] = "Ein Bankautomat wurde ausgeraubt, und der Dieb hat so viel Geld bekommen:",
	["pl"] = "Bankomat został okradziony i złodziej uciekł z",
	["ru"] = "Ограблен банкомат, грабителю удалось скрыться и унести",
	["es"] = "Un banco ATM ha sido robado y el ladrón se ha ido con",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bir ATM soyuldu ve soyguncu kaçtı",
	["no"] = "",
}

CH_ATM.Config.Lang["from your account."] = {
	["en"] = "from your account.",
	["fr"] = "depuis votre compte.",
	["da"] = "fra din konto.",
	["de"] = "von Ihrem Konto.",
	["pl"] = "z twojego konta.",
	["ru"] = "с вашего аккаунта.",
	["es"] = "de tu cuenta.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "hesabınızdan.",
	["no"] = "",
}

CH_ATM.Config.Lang["You have failed lockpicking the ATM!"] = {
	["en"] = "You have failed lockpicking the ATM!",
	["fr"] = "Vous avez échoué le crochetage de l'ATM !",
	["da"] = "Du har mislykkedes med at stjæle fra pengeautomaten!",
	["de"] = "Du hast es nicht geschafft, den Geldautomaten zu knacken!",
	["pl"] = "Nie udało ci się włamać do bankomatu!",
	["ru"] = "Вы не смогли взломать банкомат!",
	["es"] = "¡Has fallado al intentar forzar este ATM!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM'nin kilidini kırmayı başaramadınız",
	["no"] = "",
}

CH_ATM.Config.Lang["An admin has reset your bank account level!"] = {
	["en"] = "An admin has reset your bank account level!",
	["fr"] = "Un administrateur a réinitialisé votre niveau de compte !",
	["da"] = "En administrator har nulstillet dit bankkontoniveau!",
	["de"] = "Ein Administrator hat Ihren Kontostand zurückgesetzt!",
	["pl"] = "Administrator zresetował poziom twojego konta bankowego!",
	["ru"] = "Администратор сбросил уровень вашего банковского счета!",
	["es"] = "¡Un administrador ha reiniciado tu cuenta bancaria!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Yönetici sizin banka seviyenizi sıfırladı",
	["no"] = "",
}

CH_ATM.Config.Lang["Admin Menu"] = {
	["en"] = "Admin Menu",
	["fr"] = "Menu Admin",
	["da"] = "Admin Menu",
	["de"] = "Admin Menu",
	["pl"] = "Admin Menu",
	["ru"] = "Меню администратора",
	["es"] = "Menu de Adminsitrador",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Yönetici Menüsü",
	["no"] = "",
}

CH_ATM.Config.Lang["Players"] = {
	["en"] = "Players",
	["fr"] = "Joueurs",
	["da"] = "Spillere",
	["de"] = "Spieler",
	["pl"] = "Gracze",
	["ru"] = "Игроки",
	["es"] = "Jugadores",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Oyuncular",
	["no"] = "",
}

CH_ATM.Config.Lang["ATM Settings"] = {
	["en"] = "ATM Settings",
	["fr"] = "ATM Paramètres",
	["da"] = "ATM Indstillinger",
	["de"] = "Einstellungen",
	["pl"] = "ATM Ustawienia",
	["ru"] = "ATM Настройки",
	["es"] = "ATM Configuración",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM Ayarlar",
	["no"] = "",
}

CH_ATM.Config.Lang["View"] = { -- MAX 6 CHARACTERS
	["en"] = "View",
	["fr"] = "Voir",
	["da"] = "Se",
	["de"] = "Siehe",
	["pl"] = "Pokaż",
	["ru"] = "Вид",
	["es"] = "Vista",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Gör",
	["no"] = "",
}

CH_ATM.Config.Lang["Save ATM entities"] = {
	["en"] = "Save ATM entities",
	["fr"] = "Sauvegarder les ATMs",
	["da"] = "Gem ATM's",
	["de"] = "ATM-Entities speichern",
	["pl"] = "Zapisz Bankomaty",
	["ru"] = "Сохранить банкоматы",
	["es"] = "Guardar Entidades ATM",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM'leri Kaydet",
	["no"] = "",
}

CH_ATM.Config.Lang["View Player"] = {
	["en"] = "View Player",
	["fr"] = "Voir le joueur",
	["da"] = "Vis spiller",
	["de"] = "Spieler anzeigen",
	["pl"] = "Wyświetl Profil",
	["ru"] = "Просмотр игрока",
	["es"] = "Vista de Jugador",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Oyuncuyu Gör",
	["no"] = "",
}

CH_ATM.Config.Lang["Viewing profile of"] = {
	["en"] = "Viewing profile of",
	["fr"] = "Vue du profil de",
	["da"] = "Viser profilen for",
	["de"] = "Profil anzeigen für",
	["pl"] = "Wyświetlanie profilu",
	["ru"] = "Просмотр профиля",
	["es"] = "Viendo el perfil de",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Profil görüntüleniyor",
	["no"] = "",
}

CH_ATM.Config.Lang["Give Money"] = {
	["en"] = "Give Money",
	["fr"] = "Donner de l'argent",
	["da"] = "Giv penge",
	["de"] = "Geld geben",
	["pl"] = "Daj Pieniądze",
	["ru"] = "Давать деньги",
	["es"] = "Dar Dinero",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Para Ver",
	["no"] = "",
}

CH_ATM.Config.Lang["Take Money"] = {
	["en"] = "Take Money",
	["fr"] = "Retirer de l'argent",
	["da"] = "Tag penge",
	["de"] = "Geld nehmen",
	["pl"] = "Zabierz Pieniądze",
	["ru"] = "Взять деньги",
	["es"] = "Tomar Dinero",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Para Al",
	["no"] = "",
}

CH_ATM.Config.Lang["Reset Level"] = {
	["en"] = "Reset Level",
	["fr"] = "Réinitialiser le niveau",
	["da"] = "Nulstil niveau",
	["de"] = "Level zurücksetzen",
	["pl"] = "Zresetuj Poziom",
	["ru"] = "Сброс Уровень",
	["es"] = "Reiniciar Nivel",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Seviyesini Sıfırla",
	["no"] = "",
}

CH_ATM.Config.Lang["You have to be alone on the server to do this!"] = {
	["en"] = "You have to be alone on the server to do this!",
	["fr"] = "Vous devez être seul sur le serveur pour faire ceci !",
	["da"] = "Du skal være alene på serveren for at gøre dette!",
	["de"] = "Sie müssen allein auf dem Server sein, um dies zu tun!",
	["pl"] = "Musisz być sam na serwerze aby to zrobić!",
	["ru"] = "Вы должны быть один на сервере, чтобы сделать это!",
	["es"] = "¡Debes estar tú solo en el servidor para hacer esto!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bunu yapmak için sunucuda yalnız olmalısınız!",
	["no"] = "",
}

CH_ATM.Config.Lang["Import SlownLS Accounts"] = {
	["en"] = "Import SlownLS Accounts",
	["fr"] = "Convertir les comptes SlownLS",
	["da"] = "Konverter SlownLS Brugere",
	["de"] = "SlownLS-Benutzer konvertieren",
	["pl"] = "Przekonwertuj Konta SlownLS",
	["ru"] = "Конвертировать SlownLS аккаунты",
	["es"] = "Convertir cuentas de SlownLS",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "SlownLS hesaplarını yapılandır.",
	["no"] = "",
}

CH_ATM.Config.Lang["Please check your server console for transfer output!"] = {
	["en"] = "Please check your server console for transfer output!",
	["fr"] = "Merci de vérifier la console du serveur !",
	["da"] = "Check venligst din server konsol for overførsels output!",
	["de"] = "Bitte überprüfen Sie Ihre Server-Konsole auf Transferausgaben!",
	["pl"] = "Prosze sprawdż konsole twojego serwera po dane transferu!",
	["ru"] = "Пожалуйста, проверьте консоль вашего сервера на наличие передачи!",
	["es"] = "¡Por favor verifique la consola del servidor para ver el cambio de sistema (mensaje de salida)!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Lütfen yapılandırma çıktısı için konsolu kontrol edin!",
	["no"] = "",
}

CH_ATM.Config.Lang["You cannot swipe your card on your own card scanner terminal!"] = {
	["en"] = "You cannot swipe your card on your own card scanner terminal!",
	["fr"] = "Vous ne pouvez pas utiliser votre carte bancaire sur votre terminal bancaire!",
	["da"] = "Du kan ikke betale med dit kort på din egen terminal!",
	["de"] = "Sie können nicht mit Ihrer Karte an Ihrem eigenen Terminal bezahlen!",
	["pl"] = "Nie mużysz użyć swojej karty na swoim terminalu!",
	["ru"] = "Вы не можете провести карту на своем собственном терминале сканера карт!",
	["es"] = "¡No puedes pasar tu tarjeta por tu propio escáner de tarjetas!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kartınızı kendi kart tarayıcı terminalinizde kaydıramazsınız!",
	["no"] = "",
}

CH_ATM.Config.Lang["ATM occupied by"] = {
	["en"] = "ATM occupied by",
	["fr"] = "ATM occupé par",
	["da"] = "Hæveautomat i brug af",
	["de"] = "ATM besetzt durch",
	["pl"] = "Bankomat używany przez",
	["ru"] = "Банкомат занят",
	["es"] = "ATM ocupado por",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "tarafından işgal edilen ATM",
	["no"] = "",
}

CH_ATM.Config.Lang["Credit Card"] = {
	["en"] = "Credit Card",
	["fr"] = "Carte bancaire",
	["da"] = "Kreditkort",
	["de"] = "Kreditkarte",
	["pl"] = "Karta Kredytowa",
	["ru"] = "Кредитная карта",
	["es"] = "Tarjeta de Crédito",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kredi kartı",
	["no"] = "",
}

CH_ATM.Config.Lang["Your money printer has printed"] = {
	["en"] = "Your money printer has printed",
	["fr"] = "Votre imprimante à billets a imprimé",
	["da"] = "Din pengeprinter har udskrevet",
	["de"] = "Ihr Gelddrucker hat gedruckt",
	["pl"] = "Twoja drukarka pieniędzy wydrukowała",
	["ru"] = "Ваш денежный принтер напечатал",
	["es"] = "Su impresora de dinero ha impreso",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Para yazıcınız yazdırdı",
	["no"] = "",
}

CH_ATM.Config.Lang["Your paycheck has been sent to your bank account."] = {
	["en"] = "Your paycheck has been sent to your bank account.",
	["fr"] = "Votre chèque de paie a été envoyé sur votre compte bancaire.",
	["da"] = "Din løndseddel er blevet sendt til din bankkonto.",
	["de"] = "Ihr Gehalt ist auf Ihr Bankkonto überwiesen worden.",
	["pl"] = "Twoja wypłata została wysłana na Twoje konto bankowe.",
	["ru"] = "Ваш чек отправлен на ваш банковский счет.",
	["es"] = "Su cheque de pago ha sido enviado a su cuenta bancaria.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Maaş çekiniz banka hesabınıza gönderilmiştir.",
	["no"] = "",
}

CH_ATM.Config.Lang["rewarded for stopping an ATM hacker!"] = {
	["en"] = "rewarded for stopping an ATM hacker!",
	["fr"] = "gagné pour avoir arrêté un hackeur de distributeur !",
	["da"] = "belønnet for at stoppe en ATM-hacker!",
	["de"] = "Belohnung für das Aufhalten eines ATM-Hackers!",
	["pl"] = "nagrodzony za zatrzymanie hakera bankomatu!",
	["ru"] = "вознаграждение за остановку хакера банкомата!",
	["es"] = "recompensado por detener a un hacker de cajero automático!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM korsanını durdurduğu için ödüllendirildi!",
	["no"] = "",
}

CH_ATM.Config.Lang["Please move closer to the ATM."] = {
	["en"] = "Please move closer to the ATM.",
	["fr"] = "Veuillez vous rapprocher du guichet automatique.",
	["da"] = "Kom venligst tættere på hæveautomaten.",
	["de"] = "Bitte gehen Sie näher an den Geldautomaten heran.",
	["pl"] = "Podejdź bliżej do bankomatu.",
	["ru"] = "Пожалуйста, подойдите ближе к банкомату.",
	["es"] = "Acérquese al cajero automático.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Lütfen ATM'ye yaklaşın.",
	["no"] = "",
}

CH_ATM.Config.Lang["Insert credit card to use the ATM"] = {
	["en"] = "Insert credit card to use the ATM",
	["fr"] = "Insérez la carte de crédit à utiliser",
	["da"] = "Indsæt kreditkort for at bruge pengeautomaten",
	["de"] = "Kreditkarte einführen, um den Geldautomaten zu benutzen",
	["pl"] = "Włóż kartę kredytową, aby skorzystać z bankomatu",
	["ru"] = "Вставьте кредитную карту, чтобы использовать банкомат",
	["es"] = "Inserte la tarjeta de crédito para usar el cajero automático",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM'yi kullanmak için kredi kartını takın",
	["no"] = "",
}

CH_ATM.Config.Lang["The remaining amount has been paid out to your wallet. Wallet credited with"] = {
	["en"] = "The remaining amount has been paid out to your wallet. Wallet credited with",
	["fr"] = "Le montant restant a été versé sur votre portefeuille. Portefeuille crédité de",
	["da"] = "Det resterende beløb er blevet udbetalt til din pung. Tegnebog krediteret med",
	["de"] = "Der Restbetrag wurde auf Ihr Wallet ausgezahlt. Wallet gutgeschrieben",
	["pl"] = "Pozostała kwota została wypłacona do Twojego portfela. Portfel zasilony",
	["ru"] = "Оставшаяся сумма была выплачена на ваш кошелек. Кошелек зачислен на",
	["es"] = "El monto restante se ha pagado a su billetera. Monedero acreditado con",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Kalan miktar cüzdanınıza ödenmiştir. Cüzdan ile kredilendirildi",
	["no"] = "",
}

CH_ATM.Config.Lang["Manage Offline"] = {
	["en"] = "Manage Offline",
	["fr"] = "Gérer hors-ligne",
	["da"] = "Administrer offline",
	["de"] = "Offline verwalten",
	["pl"] = "Zarządzaj offline",
	["ru"] = "Не в сети",
	["es"] = "Administrar desconectados",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Çevrimdışı Yönet",
	["no"] = "",
}

CH_ATM.Config.Lang["Import Data"] = {
	["en"] = "Import Data",
	["fr"] = "Importer données",
	["da"] = "Importer data",
	["de"] = "Daten importieren",
	["pl"] = "Zaimportować dane",
	["ru"] = "Импорт данных",
	["es"] = "Importar data",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Verileri İçe Aktar",
	["no"] = "",
}

CH_ATM.Config.Lang["Show ATM entities on map"] = {
	["en"] = "Show ATM entities on map",
	["fr"] = "Voir les entitées ATM sur la map",
	["da"] = "Vis ATM-enheder på kortet",
	["de"] = "Geldautomateneinheiten auf der Karte anzeigen",
	["pl"] = "Pokaż podmioty bankomatu na mapie",
	["ru"] = "Показать объекты банкоматов на карте",
	["es"] = "Mostrar entidades ATM en el mapa",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM varlıklarını haritada göster",
	["no"] = "",
}

CH_ATM.Config.Lang["Stop showing ATM entities on map"] = {
	["en"] = "Stop showing ATM entities on map",
	["fr"] = "Arrêter de voir les entitées ATM sur la map",
	["da"] = "Stop med at vise ATM-enheder på kortet",
	["de"] = "Stoppen Sie die Anzeige von Geldautomaten auf der Karte",
	["pl"] = "Przestań pokazywać podmioty bankomatu na mapie",
	["ru"] = "Прекратить отображение объектов банкомата на карте",
	["es"] = "Dejar de mostrar entidades ATM en el mapa",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM varlıklarını haritada göstermeyi durdur",
	["no"] = "",
}

CH_ATM.Config.Lang["Reset all balances"] = {
	["en"] = "Reset all balances",
	["fr"] = "Réinitialiser tous les comptes",
	["da"] = "Nulstil alle konti",
	["de"] = "Alle Salden zurücksetzen",
	["pl"] = "Zresetuj wszystkie salda",
	["ru"] = "Сбросить все балансы",
	["es"] = "Reiniciar todos los saldos",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Tüm bakiyeleri sıfırla",
	["no"] = "",
}

CH_ATM.Config.Lang["Reset all balances (Confirmation)"] = {
	["en"] = "Reset all balances (Confirmation)",
	["fr"] = "Réinitialiser tous les comptes (Confirmation)",
	["da"] = "Nulstil alle konti (bekræft)",
	["de"] = "Alle Salden zurücksetzen (Bestätigung)",
	["pl"] = "Zresetuj wszystkie salda (potwierdzenie)",
	["ru"] = "Сброс всех балансов (Подтверждение)",
	["es"] = "Confirmar el reinicio de todos los saldos",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Tüm bakiyeleri sıfırla (Onay)",
	["no"] = "",
}

CH_ATM.Config.Lang["SQL must be enabled to do this in-game."] = {
	["en"] = "SQL must be enabled to do this in-game.",
	["fr"] = "Le SQL doit être activé pour faire ceci en jeu.",
	["da"] = "SQL skal være aktiveret for at gøre dette.",
	["de"] = "SQL muss dazu im Spiel aktiviert sein.",
	["pl"] = "Aby to zrobić, w grze musi być włączony SQL.",
	["ru"] = "Для этого в игре должен быть включен SQL.",
	["es"] = "SQL debe estar habilitado para hacer esto en el juego.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bunu oyun içinde yapmak için SQL'in etkinleştirilmesi gerekir.",
	["no"] = "",
}

CH_ATM.Config.Lang["Wipe it manually in garrysmod/data/craphead_scripts/ch_atm/accounts/"] = {
	["en"] = "Wipe it manually in garrysmod/data/craphead_scripts/ch_atm/accounts/",
	["fr"] = "Supprimer manuellement dans garrysmod/data/craphead_scripts/ch_atm/accounts/",
	["da"] = "Slet det manuelt i garrysmod/data/craphead_scripts/ch_atm/accounts/",
	["de"] = "Löschen Sie es manuell in garrysmod/data/craphead_scripts/ch_atm/accounts/",
	["pl"] = "Wyczyść go ręcznie w garrysmod/data/craphead_scripts/ch_atm/accounts/",
	["ru"] = "Сотрите его вручную в garrysmod/data/craphead_scripts/ch_atm/accounts/",
	["es"] = "Borra manualmente en garrysmod/data/craphead_scripts/ch_atm/accounts/",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Garrysmod/data/craphead_scripts/ch_atm/accounts/ içinde manuel olarak silin",
	["no"] = "",
}

CH_ATM.Config.Lang["Import Blues ATM Accounts"] = {
	["en"] = "Import Blues ATM Accounts",
	["fr"] = "Importer les comptes Blues ATM",
	["da"] = "Importer Blues ATM konti",
	["de"] = "Importieren Sie Blues-ATM-Konten",
	["pl"] = "Importuj konta bankomatów Blues",
	["ru"] = "Импорт счетов Blues ATM",
	["es"] = "Importar data de Blues ATM",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Blues ATM Hesaplarını İçe Aktarın",
	["no"] = "",
}

CH_ATM.Config.Lang["Import Better Banking Accounts"] = {
	["en"] = "Import Better Banking Accounts",
	["fr"] = "Importer les comptes Better Banking",
	["da"] = "Importer Better Banking konti",
	["de"] = "Importieren Sie bessere Bankkonten",
	["pl"] = "Importuj lepsze konta bankowe",
	["ru"] = "Импортируйте лучшие банковские счета",
	["es"] = "Importar cuentas de Better Banking Accounts",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Daha İyi Bankacılık Hesaplarını İçe Aktarın",
	["no"] = "",
}

CH_ATM.Config.Lang["Import Glorified Banking Accounts"] = {
	["en"] = "Import Glorified Banking Accounts",
	["fr"] = "Importer les comptes Glorified Banking Accounts",
	["da"] = "Importer Glorified Banking konti",
	["de"] = "Importieren Sie verherrlichte Bankkonten",
	["pl"] = "Importuj uwielbione konta bankowe",
	["ru"] = "Импорт прославленных банковских счетов",
	["es"] = "Importar cuentas de Glorified Banking",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Değerli Bankacılık Hesaplarını İçe Aktarın",
	["no"] = "",
}

CH_ATM.Config.Lang["Emergency Lockdown"] = {
	["en"] = "Emergency Lockdown",
	["fr"] = "Verrouillage d'urgence",
	["da"] = "Nødnedlukning",
	["de"] = "Notfall-Sperre",
	["pl"] = "Blokada awaryjna",
	["ru"] = "Аварийная блокировка",
	["es"] = "Bloqueo de emergencia",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Acil Kilitleme",
	["no"] = "",
}

CH_ATM.Config.Lang["An administrator has initiated an emergency lockdown on all ATMs in the city!"] = {
	["en"] = "An administrator has initiated an emergency lockdown on all ATMs in the city!",
	["fr"] = "Un administrateur à initié le verrouillage d'urgence sur tout les ATM de la ville!",
	["da"] = "En administrator har indledt en nødnedlukning på alle pengeautomater i byen!",
	["de"] = "Ein Administrator hat eine Notfallsperre für alle Geldautomaten in der Stadt eingeleitet!",
	["pl"] = "Administrator zainicjował awaryjną blokadę wszystkich bankomatów w mieście!",
	["ru"] = "Администрация инициировала экстренную блокировку всех банкоматов в городе!",
	["es"] = "¡Un administrador ha iniciado un bloqueo de emergencia en todos los cajeros automáticos de la ciudad!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bir yönetici şehirdeki tüm ATM'lerde acil durum kilitleme başlattı!",
	["no"] = "",
}

CH_ATM.Config.Lang["Emergency ATM lockdown has ended. They are available for use again!"] = {
	["en"] = "Emergency ATM lockdown has ended. They are available for use again!",
	["fr"] = "Le verrouillage d'urgence des ATM est terminé. Ils sont à nouveau utilisables !",
	["da"] = "Nødnedlukning af pengeautomater er afsluttet. De er klar til brug igen!",
	["de"] = "Die Notsperrung der Geldautomaten ist beendet. Sie stehen wieder zur Verfügung!",
	["pl"] = "Awaryjna blokada bankomatu została zakończona. Są ponownie dostępne do użytku!",
	["ru"] = "Аварийная блокировка банкомата завершена. Они снова доступны для использования!",
	["es"] = "El cierre de emergencia del cajero automático ha terminado. ¡Están disponibles para su uso nuevamente!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Acil ATM kilitlenmesi sona erdi. Tekrar kullanıma hazırlar!",
	["no"] = "",
}

CH_ATM.Config.Lang["Initiate emergency ATM lockdown"] = {
	["en"] = "Initiate emergency ATM lockdown",
	["fr"] = "Lancer le verrouillage d'urgence des ATM",
	["da"] = "Start nødnedlukning af pengeautomater",
	["de"] = "Leiten Sie die Notsperrung des Geldautomaten ein",
	["pl"] = "Zainicjuj awaryjną blokadę bankomatu",
	["ru"] = "Инициировать экстренную блокировку банкомата",
	["es"] = "Iniciar bloqueo de cajero automático de emergencia",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Acil durum ATM kilitlemesini başlatın",
	["no"] = "",
}

CH_ATM.Config.Lang["Cancel emergency ATM lockdown"] = {
	["en"] = "Cancel emergency ATM lockdown",
	["fr"] = "Annuler le verrouillage de tout les ATM",
	["da"] = "Annuller nødnedlukning af hæveautomat",
	["de"] = "Heben Sie die Notsperrung des Geldautomaten auf",
	["pl"] = "Anuluj awaryjną blokadę bankomatu",
	["ru"] = "Отменить экстренную блокировку банкомата",
	["es"] = "Cancelar bloqueo de cajero automático de emergencia",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Acil ATM kilitlemesini iptal edin",
	["no"] = "",
}

CH_ATM.Config.Lang["Enter SteamID64"] = {
	["en"] = "Enter SteamID64",
	["fr"] = "Entrer un SteamID64",
	["da"] = "Skriv SteamID64",
	["de"] = "Geben Sie SteamID64 ein",
	["pl"] = "Wpisz SteamID64",
	["ru"] = "Введите SteamID64",
	["es"] = "Introduzca SteamID64",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "SteamID64'ü girin",
	["no"] = "",
}

CH_ATM.Config.Lang["Lookup Player"] = {
	["en"] = "Lookup Player",
	["fr"] = "Rechercher un joueur",
	["da"] = "Slå spiller op",
	["de"] = "Lookup-Player",
	["pl"] = "Wyszukaj odtwarzacz",
	["ru"] = "Поиск игрока",
	["es"] = "Búsqueda de Jugador",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Oyuncu Ara",
	["no"] = "",
}

CH_ATM.Config.Lang["No account found with this SteamID!"] = {
	["en"] = "No account found with this SteamID!",
	["fr"] = "Aucun compte n'a été trouvé avec ce SteamID!",
	["da"] = "Ingen konto fundet med dette SteamID!",
	["de"] = "Kein Account mit dieser SteamID gefunden!",
	["pl"] = "Nie znaleziono konta z tym SteamID!",
	["ru"] = "Аккаунт с таким SteamID не найден!",
	["es"] = "¡No se encontró ninguna cuenta con ese SteamID!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bu SteamID ile hesap bulunamadı!",
	["no"] = "",
}

CH_ATM.Config.Lang["Update Player Profile"] = {
	["en"] = "Update Player Profile",
	["fr"] = "Mettre à jour le profil du joueur",
	["da"] = "Opdater spiller profil",
	["de"] = "Spielerprofil aktualisieren",
	["pl"] = "Zaktualizuj profil gracza",
	["ru"] = "Обновить профиль игрока",
	["es"] = "Actualizar perfil de jugador",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Oyuncu Profilini Güncelle",
	["no"] = "",
}

CH_ATM.Config.Lang["for forgetting your card at the ATM"] = {
	["en"] = "for forgetting your card at the ATM",
	["fr"] = "pour avoir oublier de retirer votre carte de l'ATM",
	["da"] = "for at glemme dit kreditkort i hæveautomaten.",
	["de"] = "weil Sie Ihre Karte am Geldautomaten vergessen haben",
	["pl"] = "za zapomnienie karty w bankomacie",
	["ru"] = "за то, что забыли карту в банкомате",
	["es"] = "por olvidar tu tarjeta en el cajero automático",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "ATM'de kartınızı unutmak için",
	["no"] = "",
}

CH_ATM.Config.Lang["is not installed on your server!"] = {
	["en"] = "is not installed on your server!",
	["fr"] = "n'est pas installé sur votre serveur !",
	["da"] = "er ikke installeret på din server!",
	["de"] = "ist nicht auf Ihrem Server installiert!",
	["pl"] = "nie jest zainstalowany na twoim serwerze!",
	["ru"] = "не установлен на вашем сервере!",
	["es"] = "no está instalado en su servidor!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "sunucunuzda yüklü değil!",
	["no"] = "",
}

CH_ATM.Config.Lang["All leaderboards have been saved to the map!"] = {
	["en"] = "All leaderboards have been saved to the map!",
	["fr"] = "Tous les classements ont été enregistrés sur la carte !",
	["da"] = "Alle ranglister er blevet gemt på kortet!",
	["de"] = "Alle Bestenlisten wurden auf der Karte gespeichert!",
	["pl"] = "Wszystkie rankingi zostały zapisane na mapie!",
	["ru"] = "Все таблицы лидеров сохранены на карте!",
	["es"] = "¡Todas las tablas de clasificación se han guardado en el mapa!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Tüm liderlik tabloları haritaya kaydedildi!",
	["no"] = "",
}

CH_ATM.Config.Lang["Save leaderboard entities"] = {
	["en"] = "Save leaderboard entities",
	["fr"] = "Enregistrer les entités du classement",
	["da"] = "Gem leaderboard-enheder",
	["de"] = "Speichern Sie Leaderboard-Elemente",
	["pl"] = "Zapisz elementy tabeli liderów",
	["ru"] = "Сохранение объектов таблицы лидеров",
	["es"] = "Guardar entidades de la tabla de clasificación",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Skor tablosu varlıklarını kaydet",
	["no"] = "",
}

CH_ATM.Config.Lang["Online Player"] = {
	["en"] = "Online Player",
	["fr"] = "Joueur en ligne",
	["da"] = "Online spiller",
	["de"] = "Online-Spieler",
	["pl"] = "Gracz online",
	["ru"] = "Онлайн-плеер",
	["es"] = "Jugadora en linea",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Çevrimiçi Oyuncu",
	["no"] = "",
}

CH_ATM.Config.Lang["Offline Player"] = {
	["en"] = "Offline Player",
	["fr"] = "Joueur hors ligne",
	["da"] = "Offline spiller",
	["de"] = "Offline-Spieler",
	["pl"] = "Odtwarzacz offline",
	["ru"] = "Оффлайн-плеер",
	["es"] = "Jugador fuera de línea",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Çevrimdışı Oyuncu",
	["no"] = "",
}

CH_ATM.Config.Lang["Transfering money to SteamID64"] = {
	["en"] = "Transfering money to SteamID64",
	["fr"] = "Transférer de l'argent vers SteamID64",
	["da"] = "Overførsel af penge til SteamID64",
	["de"] = "Geld an SteamID64 überweisen",
	["pl"] = "Przesyłanie pieniędzy na SteamID64",
	["ru"] = "Перевод денег на SteamID64",
	["es"] = "Transferir dinero a SteamID64",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "SteamID64'e para aktarma",
	["no"] = "",
}

CH_ATM.Config.Lang["Enter SteamID64 of receiving account"] = {
	["en"] = "Enter SteamID64 of receiving account",
	["fr"] = "Entrez SteamID64 du compte de réception",
	["da"] = "Indtast SteamID64 for den modtagende konto",
	["de"] = "Geben Sie die SteamID64 des empfangenden Kontos ein",
	["pl"] = "Wprowadź SteamID64 konta odbierającego",
	["ru"] = "Введите SteamID64 принимающей учетной записи",
	["es"] = "Ingrese SteamID64 de la cuenta receptora",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Alıcı hesabın SteamID64'ünü girin",
	["no"] = "",
}

CH_ATM.Config.Lang["Enter the SteamID64 using the keypad"] = {
	["en"] = "Enter the SteamID64 using the keypad",
	["fr"] = "Entrez le SteamID64 à l'aide du clavier",
	["da"] = "Indtast SteamID64 ved hjælp af tastaturet",
	["de"] = "Geben Sie die SteamID64 über die Tastatur ein",
	["pl"] = "Wprowadź SteamID64 za pomocą klawiatury",
	["ru"] = "Введите SteamID64 с помощью клавиатуры",
	["es"] = "Ingrese el SteamID64 usando el teclado",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Tuş takımını kullanarak SteamID64'ü girin",
	["no"] = "",
}

CH_ATM.Config.Lang["There is noone with this SteamID in the banking system."] = {
	["en"] = "There is noone with this SteamID in the banking system.",
	["fr"] = "Il n'y a personne avec ce SteamID dans le système bancaire.",
	["da"] = "Der er ingen med dette SteamID i banksystemet.",
	["de"] = "Es gibt niemanden mit dieser SteamID im Bankensystem.",
	["pl"] = "W systemie bankowym nie ma nikogo o tym SteamID.",
	["ru"] = "В банковской системе нет никого с этим SteamID.",
	["es"] = "No hay nadie con este SteamID en el sistema bancario.",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Bankacılık sisteminde bu SteamID'ye sahip kimse yok.",
	["no"] = "",
}

CH_ATM.Config.Lang["The SteamID64 must be 17 characters long!"] = {
	["en"] = "The SteamID64 must be 17 characters long!",
	["fr"] = "Le SteamID64 doit comporter 17 caractères !",
	["da"] = "SteamID64 skal være på 17 tegn!",
	["de"] = "Die SteamID64 muss 17 Zeichen lang sein!",
	["pl"] = "SteamID64 musi mieć 17 znaków!",
	["ru"] = "SteamID64 должен состоять из 17 символов!",
	["es"] = "¡El SteamID64 debe tener 17 caracteres!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "SteamID64, 17 karakter uzunluğunda olmalıdır!",
	["no"] = "",
}

CH_ATM.Config.Lang["You must press ALT + E to pay on a terminal!"] = {
	["en"] = "You must press ALT + E to pay on a terminal!",
	["fr"] = "Vous devez appuyer sur ALT + E pour payer sur un terminal !",
	["da"] = "Du skal trykke ALT + E for at betale på en terminal!",
	["de"] = "Sie müssen ALT + E drücken, um an einem Terminal zu bezahlen!",
	["pl"] = "Aby zapłacić na terminalu, musisz nacisnąć ALT + E!",
	["ru"] = "Для оплаты на терминале необходимо нажать ALT + E!",
	["es"] = "¡Debes presionar ALT + E para pagar en una terminal!",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Terminalde ödeme yapmak için ALT + E tuşlarına basmalısınız!",
	["no"] = "",
}

CH_ATM.Config.Lang["You have died and lost"] = {
	["en"] = "You have died and lost",
	["fr"] = "Tu es mort et perdu",
	["da"] = "Du er død og har mistet",
	["de"] = "Du bist gestorben und hast verloren",
	["pl"] = "Umarłeś i przegrałeś",
	["ru"] = "Ты умер и проиграл",
	["es"] = "Has muerto y perdido",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "Öldün ve kaybettin",
	["no"] = "",
}

--[[
CH_ATM.Config.Lang[""] = {
	["en"] = "",
	["fr"] = "",
	["da"] = "",
	["de"] = "",
	["pl"] = "",
	["ru"] = "",
	["es"] = "",
	["pt"] = "",
	["cn"] = "",
	["tr"] = "",
	["no"] = "",
}
--]]
--addons/ch_atm/lua/ch_atm/shared/currencies/darkrp.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/client/ch_atm_fonts.lua:
return gluapack()()
--addons/darkrpbankrobbery2/lua/ch_bank_robbery/client/bank_client.lua:
CH_BankVault.BankRobberyCooldown = 0
CH_BankVault.BankRobberyCountdown = 0

net.Receive( "CH_BankVault_RestartCooldown", function()
	CH_BankVault.BankRobberyCooldown = CurTime() + CH_BankVault.Config.CooldownTime
end )

net.Receive( "CH_BankVault_KillCooldown", function()
	CH_BankVault.BankRobberyCooldown = 0
end )

net.Receive( "CH_BankVault_RestartCountdown", function()
	CH_BankVault.BankRobberyCountdown = CurTime() + CH_BankVault.Config.AliveTime
	table.Empty( CH_BankVault.CurrentRobbers)
end )

net.Receive( "CH_BankVault_KillCooldown", function()
	CH_BankVault.BankRobberyCountdown = 0
	
	table.Empty( CH_BankVault.CurrentRobbers )
	table.insert( CH_BankVault.CurrentRobbers, "NONE")
end )

net.Receive( "CH_BankVault_UpdateCurrentRobbers", function()
	local therobberupdate = net.ReadString()
	
	table.insert( CH_BankVault.CurrentRobbers, therobberupdate )
end )

net.Receive( "CH_BankVault_RemoveCurrentRobbers", function()
	local therobberremove = net.ReadString()
	
	table.RemoveByValue( CH_BankVault.CurrentRobbers, therobberremove )
end )

--addons/ch_bitminers_dlc/lua/ch_bitminers_dlc/shared/bitminers_dlc_config.lua:
return gluapack()()
--addons/ch_bitminers_dlc/lua/ch_bitminers_dlc/shared/bitminers_dlc_darkrp_entities.lua:
-- Kategorileri ve DarkRP varlıklarını otomatik olarak ekle.

function CH_Bitminers_DLC.DarkRPEntities()
	-- Silah kategorisi
	DarkRP.createCategory{
		name = "Bitminer Ekipmanları",  -- Kategori adı (silahlar için)
		categorises = "weapons",
		startExpanded = true,
		color = Color(0, 107, 0, 255),
		canSee = function(ply) return true end,
		sortOrder = 70,
	}
	
	DarkRP.createCategory{
		name = "Bitminer Ekipmanları",  -- Kategori adı (kargolar/shipments için)
		categorises = "shipments",
		startExpanded = true,
		color = Color(0, 107, 0, 255),
		canSee = function(ply) return true end,
		sortOrder = 71,
	}
	
	DarkRP.createCategory{
		name = "Bitminer Ekipmanları",  -- Kategori adı (varlıklar/entities için)
		categorises = "entities",
		startExpanded = true,
		color = Color(0, 107, 0, 255),
		canSee = function(ply) return true end,
		sortOrder = 50,
	}
	
	-- Varlıklar (Entities)
	DarkRP.createEntity("Hackleme USB'si", {
		ent = "ch_bitminer_hacking_usb",
		model = "models/craphead_scripts/bitminers/dlc/usb.mdl",
		price = 1500,
		max = 2,
		category = "Bitminer Ekipmanları",
		cmd = "satinalhacklemeusb",
	})
	
	DarkRP.createEntity("Antivirüs USB'si", {
		ent = "ch_bitminer_antivirus_usb",
		model = "models/craphead_scripts/bitminers/dlc/usb_second.mdl",
		price = 1500,
		max = 2,
		category = "Bitminer Ekipmanları",
		cmd = "satinalantivirususb",
	})

	-- Uzaktan Tablet (Shipment)
	DarkRP.createShipment("Bitminer Uzaktan Tablet", {
		model = "models/craphead_scripts/bitminers/dlc/mediapad.mdl",
		entity = "ch_bitminers_tablet",
		price = 5000,
		amount = 1,
		separate = true,
		pricesep = 2500,
		noship = true,
		--allowed = {TEAM_GANG, TEAM_CRIMINAL, TEAM_COCAINE, TEAM_ADMIN},
		category = "Bitminer Ekipmanları",
	})
	
	DarkRP.createShipment("Bitminer Tamir Anahtarı", {
		model = "models/craphead_scripts/the_cocaine_factory/wrench/w_wrench.mdl",
		entity = "ch_bitminers_repair_wrench",
		price = 4000,
		amount = 1,
		separate = true,
		pricesep = 1750,
		noship = true,
		--allowed = {TEAM_GANG, TEAM_CRIMINAL, TEAM_COCAINE, TEAM_ADMIN},
		category = "Bitminer Ekipmanları",
	})
end

hook.Add("loadCustomDarkRPItems", "CH_Bitminers_DLC.DarkRPEntities", CH_Bitminers_DLC.DarkRPEntities)

--addons/ch_bitminers/lua/ch_bitminers/shared/bitminers_darkrp_entities.lua:
-- Add all categories and DarkRP entities here automatically.

function CH_BITMINERS_DarkRPEntities()
	-- Categories
	DarkRP.createCategory{
		name = "Bitminer Equipment",
		categorises = "entities",
		startExpanded = true,
		color = Color(0, 107, 0, 255),
		canSee = function(ply) return true end,
		sortOrder = 50,
	}

	-- Entities
	DarkRP.createEntity("Güç Kablosu", {
        ent = "ch_bitminer_power_cable",
        model = "models/craphead_scripts/bitminers/utility/plug.mdl",
        price = 1000,
        max = 5,
		category = "Bitminer Equipment",
        cmd = "buypowercable",
          customCheck = function(ply) 
        return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup()) 
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })

    DarkRP.createEntity("Jenerator", {
        ent = "ch_bitminer_power_generator",
        model = "models/craphead_scripts/bitminers/power/generator.mdl",
        price = 30000,
        max = 4,
		category = "Bitminer Equipment",
        cmd = "buypowergenerator",
          customCheck = function(ply) 
            return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup()) 
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })
	
	DarkRP.createEntity("Güneş Paneli", {
        ent = "ch_bitminer_power_solar",
        model = "models/craphead_scripts/bitminers/power/solar_panel.mdl",
        price = 20000,
        max = 2,
		category = "Bitminer Equipment",
        cmd = "buysolarpanel",
          customCheck = function(ply) 
                return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup())   
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })
	
	DarkRP.createEntity("Piriz", {
        ent = "ch_bitminer_power_combiner",
        model = "models/craphead_scripts/bitminers/power/power_combiner.mdl",
        price = 5000,
        max = 2,
		category = "Bitminer Equipment",
        cmd = "buypowercombiner",
          customCheck = function(ply) 
                return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup()) 
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })
	
    DarkRP.createEntity("Bitcoin Rafı", {
        ent = "ch_bitminer_shelf",
        model = "models/craphead_scripts/bitminers/rack/rack.mdl",
        price = 15000,
        max = 1,
		category = "Bitminer Equipment",
        cmd = "buyminingshelf",
          customCheck = function(ply) 
               return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup())  
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })
	
	DarkRP.createEntity("Soğutma Yükselticisi 1", {
        ent = "ch_bitminer_upgrade_cooling1",
        model = "models/craphead_scripts/bitminers/utility/cooling_upgrade_1.mdl",
        price = 30000,
        max = 1,
		category = "Bitminer Equipment",
        cmd = "buycooling1",
          customCheck = function(ply) 
                return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup())  
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })

    DarkRP.createEntity("Soğutma Yükselticisi 2", {
        ent = "ch_bitminer_upgrade_cooling2",
        model = "models/craphead_scripts/bitminers/utility/cooling_upgrade_2.mdl",
        price = 50000,
        max = 1,
		category = "Bitminer Equipment",
        cmd = "buycooling2",
          customCheck = function(ply) 
                return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup())  
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })
	
	DarkRP.createEntity("Soğutma Yükselticisi 3", {
        ent = "ch_bitminer_upgrade_cooling3",
        model = "models/craphead_scripts/bitminers/utility/cooling_upgrade_3.mdl",
        price = 80000,
        max = 1,
		category = "Bitminer Equipment",
        cmd = "buycooling3",
          customCheck = function(ply) 
                return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup())  
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })

    DarkRP.createEntity("Bitcoin Sunucusu", {
        ent = "ch_bitminer_upgrade_miner",
        model = "models/craphead_scripts/bitminers/utility/miner_solo.mdl",
        price = 15000,
        max = 8,
		category = "Bitminer Equipment",
        cmd = "buysingleminer",
          customCheck = function(ply) 
                return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup())  
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })

    DarkRP.createEntity("RGB Yükseltme", {
        ent = "ch_bitminer_upgrade_rgb",
        model = "models/craphead_scripts/bitminers/utility/rgb_kit.mdl",
        price = 20000,
        max = 1,
		category = "Bitminer Equipment",
        cmd = "buyrgbkit",
          customCheck = function(ply) 
                return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup())  
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })
	
	DarkRP.createEntity("Güç Kaynağı Yükseltme", {
        ent = "ch_bitminer_upgrade_ups",
        model = "models/craphead_scripts/bitminers/utility/ups_solo.mdl",
        price = 500,
        max = 8,
		category = "Bitminer Equipment",
        cmd = "buyupsupgrade",
          customCheck = function(ply) 
                return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup())  
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })
	
	DarkRP.createEntity("Yakıt - Az", {
        ent = "ch_bitminer_power_generator_fuel_small",
        model = "models/craphead_scripts/bitminers/utility/jerrycan.mdl",
        price = 500,
        max = 5,
		category = "Bitminer Equipment",
        cmd = "buygeneratorfuelsmall",
          customCheck = function(ply) 
                return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup())  
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })
	
	DarkRP.createEntity("Yakıt - Orta", {
        ent = "ch_bitminer_power_generator_fuel_medium",
        model = "models/craphead_scripts/bitminers/utility/jerrycan.mdl",
        price = 1000,
        max = 5,
		category = "Bitminer Equipment",
        cmd = "buygeneratorfuelmedium",
          customCheck = function(ply) 
                return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup())  
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })
	
	DarkRP.createEntity("Yakıt - Büyük", {
        ent = "ch_bitminer_power_generator_fuel_large",
        model = "models/craphead_scripts/bitminers/utility/jerrycan.mdl",
        price = 1500,
        max = 5,
		category = "Bitminer Equipment",
        cmd = "buygeneratorfuellarge",
          customCheck = function(ply) 
                return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup()) 
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })
	
	DarkRP.createEntity("Temizleyici sprey", {
        ent = "ch_bitminer_upgrade_clean_dirt",
        model = "models/craphead_scripts/bitminers/cleaning/spraybottle.mdl",
        price = 500,
        max = 5,
		category = "Bitminer Equipment",
        cmd = "buydirtcleanfluid",
          customCheck = function(ply) 
               return CLIENT or table.HasValue({"donator", "donator+", "denemerehber", "rehber", "rehber2", "rehber3", "rehber4", "denememoderator", "moderator", "moderator2", "eventmanager", "moderator3", "denetmen", "genelyetkili", "toplulukyoneticisi", "ezel", "admin", "superadmin"}, ply:GetUserGroup()) 
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
    })
end
hook.Add( "loadCustomDarkRPItems", "CH_BITMINERS_DarkRPEntities", CH_BITMINERS_DarkRPEntities )
--addons/ch_mayor/lua/ch_adv_mayor/shared/config/ch_mayor_config_lang.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/ch_mayor_playtime.lua:
function CH_Mayor.FormatPlaytime( t )
	local TimeLeft = tonumber( t ) or 0
	local Minutes = math.floor( TimeLeft )
	local Hours = math.floor( Minutes / 60 )
	local Days = math.floor( Hours / 24 )
	
	if Hours >= 1 then
		Minutes = math.Round( Minutes - Hours * 60 )
	end
	
	if Days >= 1 then
		Hours = math.Round( Hours - Days * 24 )
	end
	
	if Minutes == 1 then
		MinFormat = CH_Mayor.LangString( "minute" )
	else
		MinFormat = CH_Mayor.LangString( "minutes" )
	end
	
	if Hours == 1 then
		HourFormat = CH_Mayor.LangString( "hour" )
	else
		HourFormat = CH_Mayor.LangString( "hours" )
	end
	
	if Days == 1 then
		DayFormat = CH_Mayor.LangString( "day" )
	else
		DayFormat = CH_Mayor.LangString( "days" )
	end
	
	if TimeLeft == 0 then
		return "0 ".. CH_Mayor.LangString( "minutes" )
	end
	
	if Days < 1 && Hours < 1 && Minutes >= 1 then
		return Minutes.." "..MinFormat
	elseif Days < 1 && Hours >= 1 then
		return Hours.." "..HourFormat..", "..Minutes.." "..MinFormat
	elseif Days >=1 && Hours < 1 then
		return Days.." "..DayFormat..", "..Minutes.." "..MinFormat
	else
		return Days.." "..DayFormat.." "..Hours.." "..HourFormat.." "..Minutes.." "..MinFormat
	end
end
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_catalog.lua:
--[[
	CATALOG MENU
--]]
function CH_Mayor.CatalogMenu()
	local ply = LocalPlayer()
	
	local GUI_CatalogFrame = vgui.Create( "DFrame" )
	GUI_CatalogFrame:SetTitle( "" )
	GUI_CatalogFrame:SetSize( CH_Mayor.ScrW * 0.6, CH_Mayor.ScrH * 0.665 )
	GUI_CatalogFrame:Center()
	GUI_CatalogFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "City Management" ), "CH_Mayor_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_CatalogFrame:MakePopup()
	GUI_CatalogFrame:SetDraggable( false )
	GUI_CatalogFrame:ShowCloseButton( false )

	local GUI_CloseMenu = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_CloseMenu:SetPos( CH_Mayor.ScrW * 0.582, CH_Mayor.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.Red or color_white )
		surface.SetMaterial( CH_Mayor.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_CatalogFrame:Remove()
	end
	
	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Dashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Dashboard" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.DashboardMenu()
	end

	local GUI_UpgradesFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_UpgradesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_UpgradesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.095 )
	GUI_UpgradesFrameBtn:SetText( "" )
	GUI_UpgradesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Upgrades )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Upgrades" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_UpgradesFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.UpgradesMenu()
	end
	
	local GUI_TaxesFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_TaxesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_TaxesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.1425 )
	GUI_TaxesFrameBtn:SetText( "" )
	GUI_TaxesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Taxes )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Taxes" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TaxesFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.TaxesMenu()
	end

	local GUI_CatalogFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_CatalogFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CatalogFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.19 )
	GUI_CatalogFrameBtn:SetText( "" )
	GUI_CatalogFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Catalog )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Catalog" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CatalogFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.CatalogMenu()
	end
	
	local GUI_LawsFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_LawsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LawsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.2375 )
	GUI_LawsFrameBtn:SetText( "" )
	GUI_LawsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Laws )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Laws" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LawsFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.LawsMenu()
	end
	
	local GUI_CiviliansFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_CiviliansFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.285 )
	GUI_CiviliansFrameBtn:SetText( "" )
	GUI_CiviliansFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Licenses )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Licenses" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.LicensesMenu( )
	end
	
	local GUI_OfficialsManagementFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_OfficialsManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_OfficialsManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.3325 )
	GUI_OfficialsManagementFrameBtn:SetText( "" )
	GUI_OfficialsManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_OfficialsManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Officials" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OfficialsManagementFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.OfficialsMenu()
	end
	
	local GUI_CiviliansManagementFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_CiviliansManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.38 )
	GUI_CiviliansManagementFrameBtn:SetText( "" )
	GUI_CiviliansManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_CivilianManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Civilians" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansManagementFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.CiviliansMenu()
	end
	
	local GUI_WantedFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_WantedFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WantedFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.4275 )
	GUI_WantedFrameBtn:SetText( "" )
	GUI_WantedFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Wanted )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Wanted" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WantedFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.WantedMenu()
	end
	
	local GUI_WarrantFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_WarrantFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WarrantFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.475 )
	GUI_WarrantFrameBtn:SetText( "" )
	GUI_WarrantFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Warrant )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Warrant" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WarrantFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.WarrantMenu()
	end
	
	local GUI_AnnouncementFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_AnnouncementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_AnnouncementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.5225 )
	GUI_AnnouncementFrameBtn:SetText( "" )
	GUI_AnnouncementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Announcement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Announcement" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_AnnouncementFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.AnnouncementMenu()
	end
	
	local GUI_LockdownFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_LockdownFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LockdownFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.57 )
	GUI_LockdownFrameBtn:SetText( "" )
	GUI_LockdownFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Lockdown )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Lockdown" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LockdownFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.LockdownMenu()
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_CatalogFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.6175 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Economy )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Statistics" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_CatalogFrame:Remove()
		
		CH_Mayor.StatisticsMenu()
	end
	
	-- The list of items
	local total_items = table.Count( CH_Mayor.Catalog )
	local mayor_money = CH_Mayor.VaultMoney
	
	local GUI_CatalogList = vgui.Create( "DPanelList", GUI_CatalogFrame )
	GUI_CatalogList:SetSize( CH_Mayor.ScrW * 0.491, CH_Mayor.ScrH * 0.61 )
	GUI_CatalogList:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.0475 )
	GUI_CatalogList:EnableVerticalScrollbar( true )
	GUI_CatalogList:EnableHorizontal( true )
	GUI_CatalogList:SetSpacing( 9 )
	GUI_CatalogList.Paint = function( self, w, h )
		draw.RoundedBox( 0, 0, 0, w, h, color_transparent )
	end
	if ( GUI_CatalogList.VBar ) then
		GUI_CatalogList.VBar.Paint = function( self, w, h ) -- BG
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_CatalogList.VBar.btnUp.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_CatalogList.VBar.btnGrip.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_CatalogList.VBar.btnDown.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
	end
	
	for k, item in pairs( CH_Mayor.Catalog ) do
		local GUI_ItemPanel = vgui.Create( "DPanelList" )
		GUI_ItemPanel:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.1351 )
		GUI_ItemPanel.Paint = function( self, w, h )
			-- Background
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			if total_items <= 4 then
				surface.DrawRect( 0, 0, w, h )
			else
				surface.DrawRect( 0, 0, w * 0.986, h )
			end
			
			-- Name
			draw.SimpleText( item.Name, "CH_Mayor_Font_Size12", w * 0.18, h * 0.185, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			
			-- Description
			local wrapped_text = DarkRP.textWrap( item.Description, "CH_Mayor_Font_Size8", w * 0.54 )
			draw.DrawText( wrapped_text, "CH_Mayor_Font_Size8", w * 0.18, h * 0.3, CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT )
			
			-- Price
			draw.SimpleText( DarkRP.formatMoney( item.Price ), "CH_Mayor_Font_Size12", w * 0.972, h * 0.185, mayor_money > item.Price and CH_Mayor.Colors.Green or CH_Mayor.Colors.Red, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
		end

		local GUI_ItemModel = vgui.Create( "SpawnIcon", GUI_ItemPanel )
		GUI_ItemModel:SetSize( CH_Mayor.ScrW * 0.08, CH_Mayor.ScrH * 0.13 )
		GUI_ItemModel:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.005 )
		GUI_ItemModel:SetModel( item.Model )
		GUI_ItemModel:SetVisible( true )
		GUI_ItemModel.PaintOver = function( self )
			EndTooltip( self )
		end
		GUI_ItemModel.OnMousePressed = function()
			return
		end
	
		local GUI_PurchaseItemBtn = vgui.Create( "DButton", GUI_ItemPanel )
		GUI_PurchaseItemBtn:SetSize( CH_Mayor.ScrW * 0.125, CH_Mayor.ScrH * 0.04 )
		GUI_PurchaseItemBtn:SetPos( CH_Mayor.ScrW * 0.35, CH_Mayor.ScrH * 0.085 )
		GUI_PurchaseItemBtn:SetText( "" )
		GUI_PurchaseItemBtn.Paint = function( self, w, h )
			if self:IsHovered() then
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
			
				surface.SetDrawColor( mayor_money > item.Price and CH_Mayor.Colors.Green or CH_Mayor.Colors.Red )
				surface.DrawRect( 0, 0, w, 1 )
				surface.DrawRect( 0, h-1, w, 1 )
				surface.DrawRect( w-1, 0, 1, h )
				surface.DrawRect( 0, 0, 1, h )
			else
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( mayor_money > item.Price and CH_Mayor.Colors.Green or CH_Mayor.Colors.Red )
				surface.DrawRect( 0, 0, 1, 10 )
				surface.DrawRect( 0, 0, 10, 1 )
				surface.DrawRect( 0, h-10, 1, 10 )
				surface.DrawRect( 0, h-1, 10, 1 )
				surface.DrawRect( w-1, 0, 1, 10 )
				surface.DrawRect( w-10, 0, 10, 1 )
				surface.DrawRect( w-1, h-10, 1, 10 )
				surface.DrawRect( w-10, h-1, 10, 1 )
			end
			
			draw.SimpleText( mayor_money > item.Price and CH_Mayor.LangString( "Purchase Item" ) or CH_Mayor.LangString( "Cannot Afford" ), "CH_Mayor_Font_Size9", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
		GUI_PurchaseItemBtn.DoClick = function()
			if mayor_money < item.Price then
				surface.PlaySound( "common/wpn_denyselect.wav" )
				return
			end
			
			net.Start( "CH_Mayor_Net_BuyCatalogItem" )
				net.WriteString( k )
			net.SendToServer()
			
			GUI_CatalogFrame:Remove()
		end
		
		
		GUI_CatalogList:AddItem( GUI_ItemPanel )
	end
end
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_civilians.lua:
--[[
	MAYOR CIVILIANS MENU
--]]
function CH_Mayor.CiviliansMenu()
	local ply = LocalPlayer()

	local GUI_CiviliansFrame = vgui.Create( "DFrame" )
	GUI_CiviliansFrame:SetTitle( "" )
	GUI_CiviliansFrame:SetSize( CH_Mayor.ScrW * 0.6, CH_Mayor.ScrH * 0.665 )
	GUI_CiviliansFrame:Center()
	GUI_CiviliansFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "City Management" ), "CH_Mayor_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Draw titles
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( w * 0.182, h * 0.0724, w * 0.812, h * 0.06 )
		
		draw.SimpleText( "#", "CH_Mayor_Font_Size10", w * 0.2, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Citizen" ), "CH_Mayor_Font_Size10", w * 0.375, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Job" ), "CH_Mayor_Font_Size10", w * 0.55, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Action" ), "CH_Mayor_Font_Size10", w * 0.725, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Action" ), "CH_Mayor_Font_Size10", w * 0.9, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansFrame:MakePopup()
	GUI_CiviliansFrame:SetDraggable( false )
	GUI_CiviliansFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_CloseMenu:SetPos( CH_Mayor.ScrW * 0.582, CH_Mayor.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.Red or color_white )
		surface.SetMaterial( CH_Mayor.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_CiviliansFrame:Remove()
	end
	
	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Dashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Dashboard" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.DashboardMenu()
	end

	local GUI_UpgradesFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_UpgradesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_UpgradesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.095 )
	GUI_UpgradesFrameBtn:SetText( "" )
	GUI_UpgradesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Upgrades )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Upgrades" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_UpgradesFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.UpgradesMenu()
	end
	
	local GUI_TaxesFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_TaxesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_TaxesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.1425 )
	GUI_TaxesFrameBtn:SetText( "" )
	GUI_TaxesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Taxes )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Taxes" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TaxesFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.TaxesMenu()
	end

	local GUI_CatalogFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_CatalogFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CatalogFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.19 )
	GUI_CatalogFrameBtn:SetText( "" )
	GUI_CatalogFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Catalog )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Catalog" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CatalogFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.CatalogMenu()
	end
	
	local GUI_LawsFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_LawsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LawsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.2375 )
	GUI_LawsFrameBtn:SetText( "" )
	GUI_LawsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Laws )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Laws" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LawsFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.LawsMenu()
	end
	
	local GUI_CiviliansFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_CiviliansFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.285 )
	GUI_CiviliansFrameBtn:SetText( "" )
	GUI_CiviliansFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Licenses )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Licenses" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.LicensesMenu( )
	end
	
	local GUI_OfficialsManagementFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_OfficialsManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_OfficialsManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.3325 )
	GUI_OfficialsManagementFrameBtn:SetText( "" )
	GUI_OfficialsManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_OfficialsManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Officials" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OfficialsManagementFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.OfficialsMenu()
	end
	
	local GUI_CiviliansManagementFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_CiviliansManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.38 )
	GUI_CiviliansManagementFrameBtn:SetText( "" )
	GUI_CiviliansManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_CivilianManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Civilians" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansManagementFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.CiviliansMenu()
	end
	
	local GUI_WantedFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_WantedFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WantedFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.4275 )
	GUI_WantedFrameBtn:SetText( "" )
	GUI_WantedFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Wanted )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Wanted" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WantedFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.WantedMenu()
	end
	
	local GUI_WarrantFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_WarrantFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WarrantFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.475 )
	GUI_WarrantFrameBtn:SetText( "" )
	GUI_WarrantFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Warrant )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Warrant" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WarrantFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.WarrantMenu()
	end
	
	local GUI_AnnouncementFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_AnnouncementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_AnnouncementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.5225 )
	GUI_AnnouncementFrameBtn:SetText( "" )
	GUI_AnnouncementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Announcement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Announcement" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_AnnouncementFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.AnnouncementMenu()
	end
	
	local GUI_LockdownFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_LockdownFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LockdownFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.57 )
	GUI_LockdownFrameBtn:SetText( "" )
	GUI_LockdownFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Lockdown )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Lockdown" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LockdownFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.LockdownMenu()
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_CiviliansFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.6175 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Economy )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Statistics" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_CiviliansFrame:Remove()
		
		CH_Mayor.StatisticsMenu()
	end
	
	-- The list of players
	local total_players = player.GetCount()
	local civilian_players = {}
	
	for k, v in ipairs( player.GetAll() ) do
		if not v:CH_Mayor_IsGovTeam() and ply != v then
			table.insert( civilian_players, v )
		end
	end
	
	local GUI_PlayerList = vgui.Create( "DPanelList", GUI_CiviliansFrame )
	GUI_PlayerList:SetSize( CH_Mayor.ScrW * 0.491, CH_Mayor.ScrH * 0.563 )
	GUI_PlayerList:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.095 )
	GUI_PlayerList:EnableVerticalScrollbar( true )
	GUI_PlayerList:EnableHorizontal( true )
	GUI_PlayerList:SetSpacing( 8.4 )
	GUI_PlayerList.Paint = function( self, w, h )
		draw.RoundedBox( 0, 0, 0, w, h, color_transparent )
	end
	if ( GUI_PlayerList.VBar ) then
		GUI_PlayerList.VBar.Paint = function( self, w, h ) -- BG
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_PlayerList.VBar.btnUp.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_PlayerList.VBar.btnGrip.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_PlayerList.VBar.btnDown.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
	end
	
	for k, v in ipairs( civilian_players ) do
		if not IsValid(v) then continue end
		local GUI_PlayerPanel = vgui.Create( "DPanelList" )
		GUI_PlayerPanel:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.04 )
		GUI_PlayerPanel.Paint = function( self, w, h )
			-- Background
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			if total_players <= 13 then
				surface.DrawRect( 0, 0, w, h )
			else
				surface.DrawRect( 0, 0, w * 0.986, h )
			end
			
			-- Number
			draw.SimpleText( k, "CH_Mayor_Font_Size8", w * 0.0225, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			if IsValid(v) then 
			-- Name
			draw.SimpleText( v:Nick(), "CH_Mayor_Font_Size8", w * 0.241, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Job
			draw.SimpleText( team.GetName( v:Team() ), "CH_Mayor_Font_Size8", w * 0.455, h / 2, team.GetColor( v:Team() ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
		end
		
		if not v:isWanted() then
			local GUI_WantedPlayerBtn = vgui.Create( "DButton", GUI_PlayerPanel )
			GUI_WantedPlayerBtn:SetSize( CH_Mayor.ScrW * 0.05, CH_Mayor.ScrH * 0.03 )
			GUI_WantedPlayerBtn:SetPos( CH_Mayor.ScrW * 0.3025, CH_Mayor.ScrH * 0.005 )
			GUI_WantedPlayerBtn:SetText( "" )
			GUI_WantedPlayerBtn.Paint = function( self, w, h )
				if self:IsHovered() then
					surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
					surface.DrawRect( 0, 0, w, h )
					
					surface.SetDrawColor( CH_Mayor.Colors.Red )
					surface.DrawRect( 0, 0, w, 1 )
					surface.DrawRect( 0, h-1, w, 1 )
					surface.DrawRect( w-1, 0, 1, h )
					surface.DrawRect( 0, 0, 1, h )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
					surface.DrawRect( 0, 0, w, h )
					
					surface.SetDrawColor( CH_Mayor.Colors.Red )
					surface.DrawRect( 0, 0, 1, 10 )
					surface.DrawRect( 0, 0, 10, 1 )
					surface.DrawRect( 0, h-10, 1, 10 )
					surface.DrawRect( 0, h-1, 10, 1 )
					surface.DrawRect( w-1, 0, 1, 10 )
					surface.DrawRect( w-10, 0, 10, 1 )
					surface.DrawRect( w-1, h-10, 1, 10 )
					surface.DrawRect( w-10, h-1, 10, 1 )
				end

				draw.SimpleText( CH_Mayor.LangString( "Wanted" ), "CH_Mayor_Font_Size8", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			GUI_WantedPlayerBtn.DoClick = function()
				CH_Mayor.WantedPlayerMenu( v )
				
				GUI_CiviliansFrame:Remove()
			end
		end
		
		if not CH_Mayor.WarrantedPlayers[ v ] then
			local GUI_WarrantPlayerBtn = vgui.Create( "DButton", GUI_PlayerPanel )
			GUI_WarrantPlayerBtn:SetSize( CH_Mayor.ScrW * 0.05, CH_Mayor.ScrH * 0.03 )
			GUI_WarrantPlayerBtn:SetPos( CH_Mayor.ScrW * 0.408, CH_Mayor.ScrH * 0.005 )
			GUI_WarrantPlayerBtn:SetText( "" )
			GUI_WarrantPlayerBtn.Paint = function( self, w, h )
				if self:IsHovered() then
					surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
					surface.DrawRect( 0, 0, w, h )
					
					surface.SetDrawColor( CH_Mayor.Colors.Red )
					surface.DrawRect( 0, 0, w, 1 )
					surface.DrawRect( 0, h-1, w, 1 )
					surface.DrawRect( w-1, 0, 1, h )
					surface.DrawRect( 0, 0, 1, h )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
					surface.DrawRect( 0, 0, w, h )
					
					surface.SetDrawColor( CH_Mayor.Colors.Red )
					surface.DrawRect( 0, 0, 1, 10 )
					surface.DrawRect( 0, 0, 10, 1 )
					surface.DrawRect( 0, h-10, 1, 10 )
					surface.DrawRect( 0, h-1, 10, 1 )
					surface.DrawRect( w-1, 0, 1, 10 )
					surface.DrawRect( w-10, 0, 10, 1 )
					surface.DrawRect( w-1, h-10, 1, 10 )
					surface.DrawRect( w-10, h-1, 10, 1 )
				end

				draw.SimpleText( CH_Mayor.LangString( "Warrant" ), "CH_Mayor_Font_Size8", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			GUI_WarrantPlayerBtn.DoClick = function()
				CH_Mayor.WarrantPlayerMenu( v )
				
				GUI_CiviliansFrame:Remove()
			end
		end
		
		GUI_PlayerList:AddItem( GUI_PlayerPanel )
	end
end



--[[
	MAKE WANTED MENU
--]]
function CH_Mayor.WantedPlayerMenu( target )
	local ply = LocalPlayer()

	local GUI_MakePlayerWantedFrame = vgui.Create( "DFrame" )
	GUI_MakePlayerWantedFrame:SetTitle( "" )
	GUI_MakePlayerWantedFrame:SetSize( CH_Mayor.ScrW * 0.23, CH_Mayor.ScrH * 0.25 )
	GUI_MakePlayerWantedFrame:Center()
	GUI_MakePlayerWantedFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, CH_Mayor.ScrH * 0.032 )

		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "Wanted Player" ), "CH_Mayor_Font_Size9", w / 2, CH_Mayor.ScrH * 0.015, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Criminal name
		draw.SimpleText( target:Nick(), "CH_Mayor_Font_Size12", CH_Mayor.ScrW * 0.04, CH_Mayor.ScrH * 0.055, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( team.GetName( target:Team() ), "CH_Mayor_Font_Size8", CH_Mayor.ScrW * 0.04, CH_Mayor.ScrH * 0.078, team.GetColor( target:Team() ), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		-- Wanted time entry BG
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.102, CH_Mayor.ScrW * 0.221, CH_Mayor.ScrH * 0.04 )
		
		-- Wanted reason entry BG
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.151, CH_Mayor.ScrW * 0.221, CH_Mayor.ScrH * 0.04 )

	end
	GUI_MakePlayerWantedFrame:MakePopup()
	GUI_MakePlayerWantedFrame:SetDraggable( false )
	GUI_MakePlayerWantedFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_MakePlayerWantedFrame )
	GUI_CloseMenu:SetPos( CH_Mayor.ScrW * 0.2175, CH_Mayor.ScrH * 0.0085 )
	GUI_CloseMenu:SetSize( 16, 16 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.Red or color_white )
		surface.SetMaterial( CH_Mayor.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, 16, 16 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_MakePlayerWantedFrame:Remove()
	end
	
	local GUI_GoBack = vgui.Create( "DButton", GUI_MakePlayerWantedFrame )
	GUI_GoBack:SetPos( CH_Mayor.ScrW * 0.205, CH_Mayor.ScrH * 0.0085 )
	GUI_GoBack:SetSize( 16, 16 )
	GUI_GoBack:SetText( "" )
	GUI_GoBack.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or color_white )
		surface.SetMaterial( CH_Mayor.Materials.BackIcon )
		surface.DrawTexturedRect( 0, 0, 16, 16 )
	end
	GUI_GoBack.DoClick = function()
		CH_Mayor.CiviliansMenu()
		
		GUI_MakePlayerWantedFrame:Remove()
	end
	
	local GUI_TeamModelSpawnI = vgui.Create( "SpawnIcon", GUI_MakePlayerWantedFrame )
	GUI_TeamModelSpawnI:SetSize( CH_Mayor.ScrW * 0.03, CH_Mayor.ScrH * 0.051 )
	GUI_TeamModelSpawnI:SetPos( CH_Mayor.ScrW * 0.0055, CH_Mayor.ScrH * 0.04 )
	GUI_TeamModelSpawnI:SetModel( target:GetModel(), target:GetSkin() )
	GUI_TeamModelSpawnI:SetVisible( true )
	GUI_TeamModelSpawnI.PaintOver = function( self )
		EndTooltip( self )
	end
	GUI_TeamModelSpawnI.OnMousePressed = function()
		return
	end
	
	local GUI_WantedTimeField = vgui.Create( "DTextEntry", GUI_MakePlayerWantedFrame )
	GUI_WantedTimeField:RequestFocus()
	GUI_WantedTimeField:SetPos( CH_Mayor.ScrW * 0.008, CH_Mayor.ScrH * 0.106 )
	GUI_WantedTimeField:SetSize( CH_Mayor.ScrW * 0.216, CH_Mayor.ScrH * 0.03 )
	GUI_WantedTimeField:SetFont( "CH_Mayor_Font_Size9" )
	GUI_WantedTimeField:SetTextColor( color_white )
	GUI_WantedTimeField:SetValue( 30 )
	GUI_WantedTimeField:SetAllowNonAsciiCharacters( CH_Mayor.Config.UsingSetAllowNonAsciiCharacters ) -- When allowing non-ASCII characters, a small box appears inside the text entry, indicating your keyboard's current language.  That makes the user unable to input some letters from German, French, Swedish, etc. alphabet. 
	GUI_WantedTimeField:SetMultiline( false )
	GUI_WantedTimeField:SetNumeric( true )
	GUI_WantedTimeField:SetDrawBackground( false )
	
	local GUI_WantedReasonField = vgui.Create( "DTextEntry", GUI_MakePlayerWantedFrame )
	GUI_WantedReasonField:RequestFocus()
	GUI_WantedReasonField:SetPos( CH_Mayor.ScrW * 0.008, CH_Mayor.ScrH * 0.155 )
	GUI_WantedReasonField:SetSize( CH_Mayor.ScrW * 0.216, CH_Mayor.ScrH * 0.03 )
	GUI_WantedReasonField:SetFont( "CH_Mayor_Font_Size9" )
	GUI_WantedReasonField:SetTextColor( color_white )
	GUI_WantedReasonField:SetPlaceholderText( CH_Mayor.LangString( "Enter reason" ) )
	GUI_WantedReasonField:SetAllowNonAsciiCharacters( CH_Mayor.Config.UsingSetAllowNonAsciiCharacters ) -- When allowing non-ASCII characters, a small box appears inside the text entry, indicating your keyboard's current language.  That makes the user unable to input some letters from German, French, Swedish, etc. alphabet. 
	GUI_WantedReasonField:SetMultiline( false )
	GUI_WantedReasonField:SetNumeric( false )
	GUI_WantedReasonField:SetDrawBackground( false )
	
	local GUI_MakeWantedBtn = vgui.Create( "DButton", GUI_MakePlayerWantedFrame )
	GUI_MakeWantedBtn:SetSize( CH_Mayor.ScrW * 0.221, CH_Mayor.ScrH * 0.04 )
	GUI_MakeWantedBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.2 )
	GUI_MakeWantedBtn:SetText( "" )
	GUI_MakeWantedBtn.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
		
			surface.SetDrawColor( CH_Mayor.Colors.Red )
			surface.DrawRect( 0, 0, w, 1 )
			surface.DrawRect( 0, h-1, w, 1 )
			surface.DrawRect( w-1, 0, 1, h )
			surface.DrawRect( 0, 0, 1, h )
		else
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			surface.SetDrawColor( CH_Mayor.Colors.Red )
			surface.DrawRect( 0, 0, 1, 10 )
			surface.DrawRect( 0, 0, 10, 1 )
			surface.DrawRect( 0, h-10, 1, 10 )
			surface.DrawRect( 0, h-1, 10, 1 )
			surface.DrawRect( w-1, 0, 1, 10 )
			surface.DrawRect( w-10, 0, 10, 1 )
			surface.DrawRect( w-1, h-10, 1, 10 )
			surface.DrawRect( w-10, h-1, 10, 1 )
		end
		
		draw.SimpleText( CH_Mayor.LangString( "Make Wanted" ), "CH_Mayor_Font_Size9", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_MakeWantedBtn.DoClick = function()
		local reason = tostring( GUI_WantedReasonField:GetValue() )
		local time = tonumber( GUI_WantedTimeField:GetValue() )
		
		if not reason or string.len( reason ) < 1 then
			ply:ChatPrint( "You must supply a reason" )
			
			surface.PlaySound( "common/wpn_denyselect.wav" )
			return
		end
		
		if time <= 0 then
			ply:ChatPrint( "You must supply a time" )
			
			surface.PlaySound( "common/wpn_denyselect.wav" )
			return
		end
		
		net.Start( "CH_Mayor_Net_WantedPlayer" )
			net.WriteEntity( target )
			net.WriteString( reason )
			net.WriteUInt( time, 8 )
		net.SendToServer()
		
		GUI_MakePlayerWantedFrame:Remove()
	end
end



--[[
	SEARCH WARRANT MENU
--]]
function CH_Mayor.WarrantPlayerMenu( target )
	local ply = LocalPlayer()

	local GUI_SearchWarrantPlayerFrame = vgui.Create( "DFrame" )
	GUI_SearchWarrantPlayerFrame:SetTitle( "" )
	GUI_SearchWarrantPlayerFrame:SetSize( CH_Mayor.ScrW * 0.23, CH_Mayor.ScrH * 0.2 )
	GUI_SearchWarrantPlayerFrame:Center()
	GUI_SearchWarrantPlayerFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, CH_Mayor.ScrH * 0.032 )

		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "Warrant Player" ), "CH_Mayor_Font_Size9", w / 2, CH_Mayor.ScrH * 0.015, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Criminal name
		draw.SimpleText( target:Nick(), "CH_Mayor_Font_Size12", CH_Mayor.ScrW * 0.04, CH_Mayor.ScrH * 0.055, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( team.GetName( target:Team() ), "CH_Mayor_Font_Size8", CH_Mayor.ScrW * 0.04, CH_Mayor.ScrH * 0.078, team.GetColor( target:Team() ), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

		-- Warrant reason entry BG
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.1, CH_Mayor.ScrW * 0.221, CH_Mayor.ScrH * 0.04 )

	end
	GUI_SearchWarrantPlayerFrame:MakePopup()
	GUI_SearchWarrantPlayerFrame:SetDraggable( false )
	GUI_SearchWarrantPlayerFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_SearchWarrantPlayerFrame )
	GUI_CloseMenu:SetPos( CH_Mayor.ScrW * 0.2175, CH_Mayor.ScrH * 0.0085 )
	GUI_CloseMenu:SetSize( 16, 16 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.Red or color_white )
		surface.SetMaterial( CH_Mayor.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, 16, 16 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_SearchWarrantPlayerFrame:Remove()
	end
	
	local GUI_GoBack = vgui.Create( "DButton", GUI_SearchWarrantPlayerFrame )
	GUI_GoBack:SetPos( CH_Mayor.ScrW * 0.205, CH_Mayor.ScrH * 0.0085 )
	GUI_GoBack:SetSize( 16, 16 )
	GUI_GoBack:SetText( "" )
	GUI_GoBack.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or color_white )
		surface.SetMaterial( CH_Mayor.Materials.BackIcon )
		surface.DrawTexturedRect( 0, 0, 16, 16 )
	end
	GUI_GoBack.DoClick = function()
		CH_Mayor.CiviliansMenu()
		
		GUI_SearchWarrantPlayerFrame:Remove()
	end
	
	local GUI_TeamModelSpawnI = vgui.Create( "SpawnIcon", GUI_SearchWarrantPlayerFrame )
	GUI_TeamModelSpawnI:SetSize( CH_Mayor.ScrW * 0.03, CH_Mayor.ScrH * 0.051 )
	GUI_TeamModelSpawnI:SetPos( CH_Mayor.ScrW * 0.0055, CH_Mayor.ScrH * 0.04 )
	GUI_TeamModelSpawnI:SetModel( target:GetModel(), target:GetSkin() )
	GUI_TeamModelSpawnI:SetVisible( true )
	GUI_TeamModelSpawnI.PaintOver = function( self )
		EndTooltip( self )
	end
	GUI_TeamModelSpawnI.OnMousePressed = function()
		return
	end
	
	local GUI_WarrantReasonField = vgui.Create( "DTextEntry", GUI_SearchWarrantPlayerFrame )
	GUI_WarrantReasonField:RequestFocus()
	GUI_WarrantReasonField:SetPos( CH_Mayor.ScrW * 0.008, CH_Mayor.ScrH * 0.104 )
	GUI_WarrantReasonField:SetSize( CH_Mayor.ScrW * 0.216, CH_Mayor.ScrH * 0.03 )
	GUI_WarrantReasonField:SetFont( "CH_Mayor_Font_Size9" )
	GUI_WarrantReasonField:SetTextColor( color_white )
	GUI_WarrantReasonField:SetPlaceholderText( CH_Mayor.LangString( "Enter reason" ) )
	GUI_WarrantReasonField:SetAllowNonAsciiCharacters( CH_Mayor.Config.UsingSetAllowNonAsciiCharacters ) -- When allowing non-ASCII characters, a small box appears inside the text entry, indicating your keyboard's current language.  That makes the user unable to input some letters from German, French, Swedish, etc. alphabet. 
	GUI_WarrantReasonField:SetMultiline( false )
	GUI_WarrantReasonField:SetNumeric( false )
	GUI_WarrantReasonField:SetDrawBackground( false )
	
	local GUI_SearchWarrantBtn = vgui.Create( "DButton", GUI_SearchWarrantPlayerFrame )
	GUI_SearchWarrantBtn:SetSize( CH_Mayor.ScrW * 0.221, CH_Mayor.ScrH * 0.04 )
	GUI_SearchWarrantBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.15 )
	GUI_SearchWarrantBtn:SetText( "" )
	GUI_SearchWarrantBtn.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
		
			surface.SetDrawColor( CH_Mayor.Colors.Red )
			surface.DrawRect( 0, 0, w, 1 )
			surface.DrawRect( 0, h-1, w, 1 )
			surface.DrawRect( w-1, 0, 1, h )
			surface.DrawRect( 0, 0, 1, h )
		else
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			surface.SetDrawColor( CH_Mayor.Colors.Red )
			surface.DrawRect( 0, 0, 1, 10 )
			surface.DrawRect( 0, 0, 10, 1 )
			surface.DrawRect( 0, h-10, 1, 10 )
			surface.DrawRect( 0, h-1, 10, 1 )
			surface.DrawRect( w-1, 0, 1, 10 )
			surface.DrawRect( w-10, 0, 10, 1 )
			surface.DrawRect( w-1, h-10, 1, 10 )
			surface.DrawRect( w-10, h-1, 10, 1 )
		end
		
		draw.SimpleText( CH_Mayor.LangString( "Search Warrant" ), "CH_Mayor_Font_Size9", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_SearchWarrantBtn.DoClick = function()
		local reason = tostring( GUI_WarrantReasonField:GetValue() )

		if not reason or string.len( reason ) < 1 then
			ply:ChatPrint( "You must supply a reason" )
			
			surface.PlaySound( "common/wpn_denyselect.wav" )
			return
		end
		
		net.Start( "CH_Mayor_Net_WarrantPlayer" )
			net.WriteEntity( target )
			net.WriteString( reason )
		net.SendToServer()
		
		GUI_SearchWarrantPlayerFrame:Remove()
	end
end
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_lockdown.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_lockdown.lua:
--[[
	MAYOR DASHBOARD MENU
--]]
function CH_Mayor.LockdownMenu()
	local ply = LocalPlayer()

	local GUI_LockdownFrame = vgui.Create( "DFrame" )
	GUI_LockdownFrame:SetTitle( "" )
	GUI_LockdownFrame:SetSize( CH_Mayor.ScrW * 0.6, CH_Mayor.ScrH * 0.665 )
	GUI_LockdownFrame:Center()
	GUI_LockdownFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "City Management" ), "CH_Mayor_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_LockdownFrame:MakePopup()
	GUI_LockdownFrame:SetDraggable( false )
	GUI_LockdownFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_CloseMenu:SetPos( CH_Mayor.ScrW * 0.582, CH_Mayor.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.Red or color_white )
		surface.SetMaterial( CH_Mayor.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_LockdownFrame:Remove()
	end
	
	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Dashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Dashboard" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.DashboardMenu()
	end

	local GUI_UpgradesFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_UpgradesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_UpgradesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.095 )
	GUI_UpgradesFrameBtn:SetText( "" )
	GUI_UpgradesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Upgrades )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Upgrades" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_UpgradesFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.UpgradesMenu()
	end
	
	local GUI_TaxesFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_TaxesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_TaxesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.1425 )
	GUI_TaxesFrameBtn:SetText( "" )
	GUI_TaxesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Taxes )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Taxes" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TaxesFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.TaxesMenu()
	end

	local GUI_CatalogFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_CatalogFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CatalogFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.19 )
	GUI_CatalogFrameBtn:SetText( "" )
	GUI_CatalogFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Catalog )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Catalog" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CatalogFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.CatalogMenu()
	end
	
	local GUI_LawsFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_LawsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LawsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.2375 )
	GUI_LawsFrameBtn:SetText( "" )
	GUI_LawsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Laws )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Laws" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LawsFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.LawsMenu()
	end
	
	local GUI_LicensesFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_LicensesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LicensesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.285 )
	GUI_LicensesFrameBtn:SetText( "" )
	GUI_LicensesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Licenses )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Licenses" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LicensesFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.LicensesMenu( )
	end
	
	local GUI_OfficialsManagementFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_OfficialsManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_OfficialsManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.3325 )
	GUI_OfficialsManagementFrameBtn:SetText( "" )
	GUI_OfficialsManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_OfficialsManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Officials" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OfficialsManagementFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.OfficialsMenu()
	end
	
	local GUI_CiviliansManagementFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_CiviliansManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.38 )
	GUI_CiviliansManagementFrameBtn:SetText( "" )
	GUI_CiviliansManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_CivilianManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Civilians" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansManagementFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.CiviliansMenu()
	end
	
	local GUI_WantedFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_WantedFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WantedFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.4275 )
	GUI_WantedFrameBtn:SetText( "" )
	GUI_WantedFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Wanted )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Wanted" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WantedFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.WantedMenu()
	end
	
	local GUI_WarrantFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_WarrantFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WarrantFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.475 )
	GUI_WarrantFrameBtn:SetText( "" )
	GUI_WarrantFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Warrant )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Warrant" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WarrantFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.WarrantMenu()
	end
	
	local GUI_AnnouncementFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_AnnouncementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_AnnouncementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.5225 )
	GUI_AnnouncementFrameBtn:SetText( "" )
	GUI_AnnouncementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Announcement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Announcement" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_AnnouncementFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.AnnouncementMenu()
	end
	
	local GUI_LockdownFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_LockdownFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LockdownFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.57 )
	GUI_LockdownFrameBtn:SetText( "" )
	GUI_LockdownFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Lockdown )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Lockdown" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LockdownFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.LockdownMenu()
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.6175 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Economy )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Statistics" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_LockdownFrame:Remove()
		
		CH_Mayor.StatisticsMenu()
	end
	
	-- The lockdown panel
	local GUI_LockdownPanel = vgui.Create( "DPanel", GUI_LockdownFrame )
	GUI_LockdownPanel:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.6 )
	GUI_LockdownPanel:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.0475 )
	GUI_LockdownPanel.Paint = function( self, w, h )
		-- Background
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		-- Top box with info
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.146 )
		
		surface.SetFont( "CH_Mayor_Font_Size14" )
		local welcome_back = CH_Mayor.LangString( "Hey" ) ..", ".. ply:Nick()
		local x, y = surface.GetTextSize( welcome_back )

		draw.SimpleText( welcome_back, "CH_Mayor_Font_Size14", w * 0.01, h * 0.04, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Below you can initiate or callback a lockdown on your city." ), "CH_Mayor_Font_Size9", w * 0.01, h * 0.1, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.WavingHand )
		surface.DrawTexturedRect( w * 0.01 + ( x + CH_Mayor.ScrW * 0.005 ), h * 0.0225, 28, 28 )
	end
	
	local GUI_LockdownBtn = vgui.Create( "DButton", GUI_LockdownFrame )
	GUI_LockdownBtn:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.0875 )
	GUI_LockdownBtn:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.1425 )
	GUI_LockdownBtn:SetText( "" )
	GUI_LockdownBtn.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
		
			surface.SetDrawColor( CH_Mayor.Colors.Red )
			surface.DrawRect( 0, 0, w, 1 )
			surface.DrawRect( 0, h-1, w, 1 )
			surface.DrawRect( w-1, 0, 1, h )
			surface.DrawRect( 0, 0, 1, h )
		else
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			surface.SetDrawColor( CH_Mayor.Colors.Red )
			surface.DrawRect( 0, 0, 1, 10 )
			surface.DrawRect( 0, 0, 10, 1 )
			surface.DrawRect( 0, h-10, 1, 10 )
			surface.DrawRect( 0, h-1, 10, 1 )
			surface.DrawRect( w-1, 0, 1, 10 )
			surface.DrawRect( w-10, 0, 10, 1 )
			surface.DrawRect( w-1, h-10, 1, 10 )
			surface.DrawRect( w-10, h-1, 10, 1 )
		end
		
		if GetGlobalBool( "DarkRP_LockDown" ) then
			draw.SimpleText( CH_Mayor.LangString( "Stop Lockdown" ), "CH_Mayor_Font_Size18", w / 2, h * 0.45, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		else
			draw.SimpleText( CH_Mayor.LangString( "Start Lockdown" ), "CH_Mayor_Font_Size18", w / 2, h * 0.45, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
	end
	GUI_LockdownBtn.DoClick = function()
		if GetGlobalBool( "DarkRP_LockDown" ) then
			net.Start( "CH_Mayor_Net_StopLockdown" )
			net.SendToServer()
		else
			net.Start( "CH_Mayor_Net_StartLockdown" )
			net.SendToServer()
		end
	end
end
--addons/ch_mining/lua/ch_mining/shared/ch_mining_xp.lua:
local PMETA = FindMetaTable( "Player" )

function PMETA:CH_Mining_GetXP()
	return self.CH_Mining_Experience and self.CH_Mining_Experience["xp"] or 0
end

function PMETA:CH_Mining_GetLevel()
	return self.CH_Mining_Experience and self.CH_Mining_Experience["level"] or 1
end

function PMETA:CH_Mining_GetXPMultiplier()
	return CH_Mining.Config.RankXPMultiplier[ self:GetUserGroup() ] or 1
end

function PMETA:CH_Mining_XPRequiredForLevel()
	local default = CH_Mining.Config.XPRequiredForLevelDefault
	local percent_increase = default / 100 * CH_Mining.Config.PercentIncreasePerLevel
	
	local cur_level = self:CH_Mining_GetLevel() + 1

	-- Return the default amount + ( their percentage increasement multiplied by their current level )
	return default + ( percent_increase * cur_level )
end
--addons/ch_mining/lua/ch_mining/shared/currencies/basewars.lua:
CH_Mining.Currencies[ "basewars" ] = {
	Name = "Basewars Money",
	
	AddMoney = function( ply, amount )
		ply:GiveMoney( amount )
	end,
	
	TakeMoney = function( ply, amount )
		ply:TakeMoney( amount )
	end,
	
	GetMoney = function( ply )
		return ply:GetMoney()
	end,
	
	CanAfford = function( ply, amount )
		return ply:GetMoney() >= amount
	end,
	
	FormatMoney = function( amount )
		return DarkRP.formatMoney( amount )
	end,
}
--addons/ch_mining/lua/ch_mining/shared/currencies/pointshop2.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/client/ch_mining_transactions.lua:
return gluapack()()
--addons/xenin-coinflip/lua/autorun/coinflip_load.lua:
Coinflip = Coinflip or {}
Coinflip.Database = {}
Coinflip.Games = Coinflip.Games or {}

function Coinflip:IncludeClient(path)
	if (CLIENT) then
		include("coinflip/" .. path .. ".lua")
	end

	if (SERVER) then
		AddCSLuaFile("coinflip/" .. path .. ".lua")
	end
end

function Coinflip:IncludeServer(path)
	if (SERVER) then
		include("coinflip/" .. path .. ".lua")
	end
end

function Coinflip:IncludeShared(path)
	self:IncludeServer(path)
	self:IncludeClient(path)
end

local function Load()
	Coinflip:IncludeShared("essentials/config_wrapper")
	Coinflip:IncludeShared("essentials/currency")
	Coinflip:IncludeShared("essentials/i18n")

	local currencies = file.Find("coinflip/currencies/*.lua", "LUA") 
	for i, v in pairs(currencies) do
		-- Strips the extension
		Coinflip:IncludeShared("currencies/" .. v:sub(1, v:len() - 4))
	end

	Coinflip:IncludeShared("configuration/config")

	Coinflip:IncludeServer("database/database")

	Coinflip:IncludeClient("networking/client")
	Coinflip:IncludeServer("networking/server")

	Coinflip:IncludeServer("essentials/coinflip")
	Coinflip:IncludeServer("essentials/ratelimiter")
	Coinflip:IncludeServer("essentials/anti_spam")

	-- UI
	Coinflip:IncludeClient("ui/menu")
	Coinflip:IncludeClient("ui/games")
	Coinflip:IncludeClient("ui/games_row")
	Coinflip:IncludeClient("ui/games_create")
	Coinflip:IncludeClient("ui/games_flip")

	-- History
	Coinflip:IncludeClient("ui/history")
	Coinflip:IncludeClient("ui/history_row")

	-- Stats
	Coinflip:IncludeClient("ui/stats")

	MsgC(XeninUI.Theme.Green, "[CF] Loaded Coinflip\n")

	Coinflip.FinishedLoading = true

	--CFMySQLite.initialize(Coinflip.Config.Database)

	hook.Run("Coinflip.FinishedLoading")
end

if (XeninUI) then
	Load()
else
	hook.Add("XeninUI.Loaded", "Coinflip", Load)
end

if (SERVER) then
	resource.AddFile("resource/fonts/Montserrat-Bold.ttf")
	resource.AddFile("resource/fonts/Montserrat-Regular.ttf")

	resource.AddWorkshop("1900562881")
	resource.AddWorkshop("1900579814")
end
--addons/sh_keypadcracker/lua/autorun/deployable_keypadcracker_settings.lua:
return gluapack()()
--lua/autorun/donald_duck.lua:
player_manager.AddValidModel( "Donald Duck", "models/player/donald_duck/donald_duck.mdl" );
player_manager.AddValidHands( "Donald Duck", "models/player/donald_duck/hands/donald_duck/donaldarms.mdl", 0, "00000000" )

--addons/executioner/lua/autorun/executioner_config.lua:
    --[[
        Script: Executioner
        Developer: ted.lua
        Profile: http://steamcommunity.com/id/tedlua/
    ]]

    Executioner = Executioner or {}
    Executioner.Config = Executioner.Config or {}

    Executioner.Config.Placement = {}
    Executioner.Config.Confirmation = {}
    Executioner.Config.Bonus = {}
    Executioner.Config.Phone = {}
    Executioner.Config.Language = {}

    ---------------------------------
    --> Start of Server Settings <---
    ---------------------------------

    Executioner.Config.Developer_Mode = false

    --> Language Support <--
    -- Languages Supported: english, dutch, norwegian
    Executioner.Config.Language.Choice = 'english'

    Executioner.Config.ChatPrefix = '[Hitman] '
    Executioner.Config.PrefixColor = Color( 255, 105, 105 )

    Executioner.Config.Phone_Command = '/hitler'
    Executioner.Config.Phone_Save = '/save_phones'
    Executioner.Config.Reset_Phones = '/reset_phones'
    Executioner.Config.Cancel_Hit = '/cancel_hit'

    Executioner.Config.Hitman_Teams = { -- These are your Hitman teams. Use the name of the job you want as a Hitman (case sensitive)
        [ 'Mob boss' ] = true,
        [ 'Hitman' ] = true
    }

    Executioner.Config.Banned_Groups = { -- Which groups can not have a hit placed against them?
        [ 'superadmin' ] = true,
        [ 'owner' ] = true
    }

    Executioner.Config.No_Place_Teams = { -- These can still have a hit against them, but they not place hits at all.
        [ 'Devlet Görevlisi' ] = true,
        [ 'Polis' ] = true,
        [ 'Başkan' ] = true
    }

    Executioner.Config.BlackList_Teams = { -- Which teams can not have a hit placed against them? These teams also can't use the Phone.
        [ 'Yetkili Görevde' ] = true,
        [ 'Staff on Duty' ] = true,
        --[ 'Mob boss' ] = true
    }

    Executioner.Config.Clean_Ranks = { -- Translates a usergroup into a nicer string for the first interface.
        [ 'superadmin' ] = 'Super Administrator', [ 'admin' ] = 'Administrator', [ 'moderator' ] = 'Moderator',
        [ 'helper' ] = 'Helper', [ 'user' ] = 'User'
    }

    --[[
        Bonus Weapons are removed when the Hitman has attempted the hit.
        You can put anything in here, as long as it's capable of killing someone.
        Dildo Launcher, frying pan, whatever the fuck you want.
    --]]
    Executioner.BonusWeapons = {
        { name = 'Glock 18', ent = 'fas2_glock20' },
        { name = 'Revolver', ent = 'fas2_ragingbull' },
        { name = 'MP5', ent = 'fas2_mp5a5' },
        { name = 'AK-47', ent = 'fas2_ak47' },
        { name = 'SR-25', ent = 'fas2_sr25' },
        { name = 'M4A1', ent = 'fas2_m4a1' },
        { name = 'M82', ent = 'fas2_m82' },
        { name = 'SG 552', ent = 'fas2_sg552' }
    }

    Executioner.Config.BonusChance = 25 -- The chance 1 - 100% that a Hitman is offered a bonus.
    Executioner.Config.BonusMoney = 27500 -- How much money is given on a bonus hit? From a bonus weapon
    Executioner.Config.TaxOnKill = 0 -- What percentage is taken when a hit is completed? 0 to disable.

    Executioner.Config.Max_Hit_Price = 75000 -- The maximum price the customer can place
    Executioner.Config.Min_Hit_Price = 27500 -- The minimum price the customer can place

    Executioner.Config.PhoneEnabled = true -- If this enabled, you may only place hits via the phone.
    Executioner.Config.Enable_Face_To_Face = true -- Can people place hits on a Hitman by pressing 'E'?

    Executioner.Config.EnableDistance = true -- Enable a Distance tracker for the Hitman to see?
    Executioner.Config.EnableHitTime = true -- Enable random time limits the hit must be done in?
    Executioner.Config.EnableHitGeneration = false -- Enable random hits? (Now works for both face to face and phone hits)

    Executioner.Config.EnableUTimeSupport = false -- Enable uTime support?
    Executioner.Config.Min_Play_Time = 1 -- Minimum time until a hit can be placed on them? (In hours)

    Executioner.Config.Hit_Time_Min = 60 -- (Seconds). Default: Start at a minimum of 60 seconds
    Executioner.Config.Hit_Time_Max = 600 --(Seconds). Default: Max of 300 seconds

    Executioner.Config.RangeDistance = 1200 -- The distance before distance turns into ???? (Too close)
    Executioner.Config.HitCooldown = 60 * 5 -- How long must the customer place before placing another Hit?
    Executioner.Config.Grace_Cooldown = 60 * 10 -- How long until a hit can be placed on the same person?
    Executioner.Config.Draw_Info = true -- When close to a Hitman, show that they're a hitman and their status?

    Executioner.Config.Generate_Hit_Intervals = 60 * 15 -- How long for a hit to be placed? In seconds?
    Executioner.Config.Generate_Remove_Time = 60 * 40 -- How long until a hit is removed as nobody has taken it?
    Executioner.Config.Minimum_Players = 6 -- How many people need to be on the server for a random hit to take place?
    -- This number also required a hitman to be on the server, with no active hit.
    --------------------------------
    --> Start of Client Settings <--
    --------------------------------
    --> Interface Settings <--
    Executioner.Config.ResponseTime = 60 -- How long does the Hitman have to reply to a Hit that a customer has directly requested? (Seconds)
    Executioner.Config.BonusTime = 15 -- How long does the Hitman have to accept the Bonus Weapon Offer?
    Executioner.Config.MenuSounds = true -- Do you want there to be sounds in the interfaces?
    Executioner.Config.GlobalAlpha = 255 -- The Alpha of all the interfaces.
    Executioner.Config.Name_Colors = Color( 255, 255, 255 ) -- The color of all the names.
    Executioner.Config.EnableBlur = true -- Enable blur on all of the interfaces?
    Executioner.Config.Component_Colors = { -- All the colors for components. Normal = default look, no hover. Hover = color on hover, text = color of text.
        [ 'button_request' ] = { normal = Color( 22, 22, 22 ), hover = Color( 18, 18, 18 ), text = Color( 255, 255, 255 ) },
        [ 'button_accept' ] = { normal = Color( 46, 200, 113 ), hover = Color( 46, 230, 113 ), text = Color( 255, 255, 255 ) },
        [ 'button_deny' ] = { normal = Color( 170, 32, 25 ), hover = Color( 230, 32, 25 ), text = Color( 255, 255, 255 ) },
        [ 'hit_price_entry' ] = { normal = Color( 22, 22, 22 ), hover = Color( 18, 18, 18 ), text = Color( 255, 255, 255, 200 ) },
        [ 'health_armor_display' ] = { -- This is a bit of a bitch.
            barBackground = Color( 22, 22, 22 ),
            healthBar = Color( 46, 204, 133 ),
            armorBar = Color( 52, 152, 219, 170 ),
            outline = Color( 24, 24, 24 ),
            healthColor = Color( 255, 255, 255 ),
            armorColor = Color( 255, 255, 255 )
        }
    }
    Executioner.Config.GroupConfiguration = { -- Rank colors in the menu.
        [ 'superadmin' ] = Color( 200, 0, 0 ),
        [ 'admin' ] = Color( 155, 89, 182 )
    }
    Executioner.Config.Outline_Colors = Color( 42, 42, 42, 200 ) -- This will change the outline of every grey outline.
    Executioner.Config.Main_Text_Color = Color( 52, 152, 219 )
    ---------------------------------------------
    --> Start of Placement Menu Configuration <--
    ---------------------------------------------
    --> Strings <--
    Executioner.Config.Placement.Main_Title = 'Hit Menüsü'
    Executioner.Config.Placement.No_Preview = 'Hit Verebileceğin Kimse Yok!'
    Executioner.Config.Placement.Request_Hit = 'Hit Talep Et'
    --> Colors <--
    Executioner.Config.Placement.Background = Color( 34, 34, 34, 250 )
    Executioner.Config.Placement.Main_Title_Color = Color( 255, 255, 255 )
    Executioner.Config.Placement.Split_Bar = Color( 42, 42, 42, 240 ) -- The line down the middle of the first screen.
    Executioner.Config.Placement.No_Preview_Color = Color( 230, 32, 25 )
    ---------------------------------------------------------------------
    -- mainColor = the default color in row renders. onSecond = for every set of 2 use this color..
    Executioner.Config.Placement.Row_Hovers = { mainColor = Color( 23, 23, 23 ), onSecond = Color( 20, 20, 20 ) }
    Executioner.Config.Placement.Data_Canvis_Color = Color( 28, 28, 28, 220 )
    ------------------------------------------------
    --> Start of Confirmation Menu Configuration <--
    ------------------------------------------------
    --> Strings <--
    Executioner.Config.Confirmation.Main_Title = 'Onay Menüsü'
    Executioner.Config.Confirmation.Header_Title = 'Size suikast teklif edildi'
    Executioner.Config.Confirmation.Accept_Hit = 'Hiti Kabul Et'
    Executioner.Config.Confirmation.Deny_Hit = 'Hiti Reddet'
    --> Colors <--
    Executioner.Config.Confirmation.Background = Color( 30, 30, 30 )
    Executioner.Config.Confirmation.Main_Title_Color = Color( 255, 255, 255 )
    Executioner.Config.Confirmation.Data_Canvis_Color = Color( 28, 28, 28, 220 )
    Executioner.Config.Confirmation.Money_Bar_Color = Color( 20, 20, 20 )
    Executioner.Config.Confirmation.Money_Text_Color = Color( 46, 204, 113 )
    -----------------------------------------
    --> Start of Bonus Menu Configuration <--
    -----------------------------------------
    --> Strings <--
    Executioner.Config.Bonus.Main_Title = 'Bonus Silah Teklifi'
    Executioner.Config.Bonus.Header = 'Gizem'
    Executioner.Config.Bonus.Description = 'Bonus ödül için hedefinizi bu silahla öldürün'
    Executioner.Config.Bonus.Detail = 'Silah geçici olarak sağlanır'
    Executioner.Config.Bonus.Accept_Offer = 'Teklifi Kabul Et'
    Executioner.Config.Bonus.Deny_Offer = 'Teklifi Reddet'
    
    --> Colors <--
    Executioner.Config.Bonus.Background = Color( 8, 8, 8, 240 )
    Executioner.Config.Bonus.Header_Color = Color( 156, 136, 255 )
    Executioner.Config.Bonus.Description_Color = Color( 255, 255, 255 )
    Executioner.Config.Bonus.Detail_Color = Color( 255, 255, 255 )
    -----------------------------------------
    --> Start of Phone Menu Configuration <--
    -----------------------------------------
    --> Strings <--
    Executioner.Config.Phone.Main_Title = 'Mevcut Hit'
    Executioner.Config.Phone.Text_On_Entity = 'Telefon Kutusu'
    Executioner.Config.Phone.Target = 'Hedef: '
    Executioner.Config.Phone.Customer = 'Müşteri: '
    Executioner.Config.Phone.Price = 'Ücret: '
    --> Colors <--
    Executioner.Config.Phone.Background = Color( 30, 30, 30 )
    Executioner.Config.Phone.Main_Title_Color = Color( 255, 255, 255 )
    Executioner.Config.Phone.Data_Canvis_Color = Color( 28, 28, 28, 220 )

    -----------------------------------------
    --> Start of Hitman HUD Conifguration <--
    -----------------------------------------
    --> Strings <--
    --> The panel on the right of the screen for Hitmen when they have an active hit <--
    -- Target: inherts from Executioner.Config.Phone.Target --
    Executioner.Config.Occupation = 'Meslek: '
    Executioner.Config.Time_Left = 'Kalan Süre: '
    Executioner.Config.Active_Hit = 'Aktif Hit'
    Executioner.Config.Distance_Text = 'Mesafe'
    ----------------------------------------------------------
    Executioner.Config.Background = Color( 60, 60, 60, 220 )
    Executioner.Config.Foreground = Color( 8, 8, 8, 245 )
    Executioner.Config.Main_Title_Color = Color( 255, 255, 255 )
    Executioner.Config.HUD_Outline = Color( 30, 30, 30, 245 )
    --> The text which appears in the middle of the screen <--
    Executioner.Config.Hit_Completed = 'Hit Tamamlandı'
    Executioner.Config.Hit_Completed_Color = Color( 255, 255, 255 )
    --> The Text which appears when looking at a Hitman <--
    Executioner.Config.Hitman_Text = 'Hitman'
    Executioner.Config.Busy_Text = 'Meşgul'
    Executioner.Config.Request_Hit_Text = 'Hit Ver'
    --> The Green color is taken from the Money Green <--
    -- Executioner.Config.Confirmation.Money_Text_Color -
    -----------------------------------------------------

--addons/executioner/lua/autorun/executioner_language.lua:
    --[[
        Want a new language added to the script with full credit given in the description?
        Copy the table and fill it out with a non Google Translated translation.
        Feel free to add me on Steam; http://steamcommunity.com/id/tedlua/ or message me on GModStore.

        Please use the main config file to select between the support languages.
        Only edit this if you want to create a language on your own. I will not help you if you break something in here.
        Thanks.
    ]]

    Executioner.Config.Language[ 'english' ] = {
        HitPriceFormatError = 'Hit fiyatında bir sorun var. Maksimum %s - Minimum %s.',
        HitPriceCantAfford = 'Bu Hiti %s ye mal olduğu ve şu anda %s ye sahip olduğunuz için yerleştirmeyi göze alamazsınız.',
        BonusWeaponAccepted = 'Hit denendikten sonra %s kaldırılacaktır.',
        HitTimeReached = '%s isabetlerini tamamlamak için zaman tükendi. İsabet başarısız oldu!',
        HitTooSoon = 'Bu kadar çabuk bir vuruş yapamazsın.',
        HitmanBusy = '%s zaten biriyle uğraşıyor.',
        RequestSent = 'Hit ettiğiniz istek %s adresine gönderildi.',
        CustomerNoResponse = '%s isteğinize yanıt vermedi.',
        HitmanNoResponse = 'Hit isteğine zamanında yanıt veremediniz.',
        TargetRejectHit = 'Bu kişiye bir vuruş yapamazsınız.',
        InvalidTargets = 'Hit alamadı. İstemci (ler) sunucuya bağlı değil veya siz öldünüz.',
        CustomerOnHitAccepted = '%s, %s karşısındaki isabet talebinizi kabul etti. Para şimdi alındı.',
        CustomerOnHitDeclined = '%s isabet isteğinizi reddetti. Suçlanmadınız..',
        HitmanOnHitAccepted = '%s için%s ye karşı %s bok teklifini kabul ettiniz.',
        HitmanOnHitDeclined = '%s isabet oranını red ettiniz.',
        MessageAllOnAccepted = 'Birisi bir hiti kabul etti. Dikkat et, hedef sen olabilirsin.',
        BonusWeaponHitComplete = '%s, %s kullanarak %s\'e karşı hiti tamamladı. Karşılığında %s ödül ve %s bonus verildi.',
        HitCompletedNoBonus = '%s, %s\'e karşı hiti tamamladı ve %s ödül aldı.',
        TaxOnKill = 'Genel geliriniz ' .. Executioner.Config.TaxOnKill .. '% oranında vergilendirildi.',
        TargetDiedBeforeHit = '%s\'nin hedefi %s, hiti tamamlamadan önce öldürüldü. Hiti başarısız oldu!',
        TargetKilledHitman = '%s, hedefi %s karşısında yetersiz kaldı. Öldürüldü. Hiti başarısız oldu!',
        HitmanDied = 'Hitman %s, hiti tamamlamadan önce öldürüldü. Hiti başarısız oldu!',
        TargetDisconnected = 'Hedef %s, aktif bir hit ile sunucudan ayrıldı. Müşteri para iadesi aldı.',
        HitmanDisconnected = 'Hitman %s sunucudan ayrıldı. Hiti iptal ettik, müşteri para iadesi aldı.',
        CustomerDisconnected = 'Müşteri %s sunucudan ayrıldı. Hit kaldırıldı.',
        HitmanChangedJob = 'Hitman %s mesleğini değiştirdi. Hiti iptal ettik ve müşteriye %s geri verildi.',
        HitmanArrested = 'Hitman %s, %s tarafından tutuklandı. Hiti iptal ettik, müşteri para iadesi aldı.',
        TargetArrested = 'Hedef %s, %s tarafından tutuklandı. Hiti iptal ettik, müşteri para iadesi aldı.',
        PhoneNoSave = 'Kaydedecek hiçbir şey yok.',
        PhoneOnSave = '%i telefon başarıyla kaydedildi.',
        PhoneOnReset = '%i telefon kaldırıldı ve tüm veriler sıfırlandı.',
        OnSwitchTeam = '%s, %s takımına geçti. Hiti iptal ettik, müşteri para iadesi aldı.',
        BonusNoReply = 'Bonus Silah teklifine cevap vermek için çok uzun sürdünüz.',
        HitActive = 'Bu kişi zaten aktif bir hit işleminde. Üzerine hit yapılamaz.',
        SameTargetTooSoon = 'Bu kişiye yakın zamanda hit yapıldı, şu anda tekrar hit yapılamaz.',
        CantDrop = 'Bonus Silahı bırakamazsınız.',
        --> Telefon İle İlgili Mesajların Başlangıcı <--
        OnRandomHit = 'Anonim biri, şüpheliye hit yaptı. Telefonunuzda daha fazla detay gösteriliyor. ' .. Executioner.Config.Phone_Command .. ' yazın.',
        OnRadomHitAccepted = '%s karşısında rastgele oluşturulan hiti %s için kabul ettiniz.',
        HitmanActiveHit = 'Zaten aktif bir hit işleminiz var. Başka bir hit almanıza gerek yok.',
        NotEnoughHitmen = 'Sunucuya bağlı yeterli hitmen yok. Hit yapılamaz.',
        CustomerOnPhoneHitPlaced = '%s\'e karşı hit yaptınız. Hitmen yakında bu istekle ilgilenecek. Ücret olarak %s kesildi.',
        HitmanNotifyRequest = '%s hit yapılmasını talep etti. Daha fazla detay telefonunuzda görüntüleniyor. ' .. Executioner.Config.Phone_Command .. ' yazın.',
        PhoneNotInService = 'Telefon şu anda hizmet dışı, daha sonra tekrar deneyin.',
        HitmanOnUsePhone = 'Hitman olarak telefonu kullanamazsınız.'
        
    }

    Executioner.Config.Language[ 'norwegian' ] = {
        HitPriceFormatError = 'Det er noe galt med hit prisen. Maks %s - Minst %s.',
        HitPriceCantAfford = 'Du har ikke råd til å å sette hit i og med at det koster %s og for øyeblikket har du %s.',
        BonusWeaponAccepted = '%s vil bli borte når mordet har blitt forsøkt.',
        HitTimeReached = '%s har gått tom for tid for å fullføre deres hit. Mordet var mislykket!',
        HitTooSoon = 'Du kan ikke allerede plassere et nytt hit.',
        HitmanBusy = '%s jobber allerede med noen.',
        RequestSent = 'Din forespørsel er sendt til %s.',
        CustomerNoResponse = '%s har ikke svart på din forespørsel.',
        HitmanNoResponse = 'Du klarte ikke å svare på forespørselen i tide.',
        TargetRejectHit = 'Du kan ikke plassere et hit på denne personen.',
        InvalidTargets = 'Kunne ikke plassere et hit. Kunden(e) er ikke koblet til serveren, eller så er du død.',
        CustomerOnHitAccepted = '%s har akseptert ditt hit-forespørsel på %s. Pengene har nå blitt overført.',
        CustomerOnHitDeclined = '%s har avvist ditt hit-forespørsel. Du har ikke blitt belastet.',
        HitmanOnHitAccepted = 'Du har akseptert %s\'s hit-forespørsel mot %s for %s.',
        HitmanOnHitDeclined = 'Du har avvist %s\'s hit.',
        MessageAllOnAccepted = 'Noen har akseptert et hit. Se deg for, du er kanskje neste mål.',
        BonusWeaponHitComplete = '%s har fullført et hit ved bruk av %s mot %s. De har blitt belønnet med %s og et bonus av %s.',
        HitCompletedNoBonus = '%s har fullført deres hit på %s og har blitt belønnet med %s.',
        TaxOnKill = 'Din samlede inntekt har blitt skattelagt av ' .. Executioner.Config.TaxOnKill .. '%.',
        TargetDiedBeforeHit = '%s\'s mål %s ble drept før de kunne fullføre deres hit. Hit-forespørselet som ble satt, mislyktes!',
        TargetKilledHitman = '%s slo %s i sitt eget spill. Leiemorderen har blitt drept. Mordet mislyktes!',
        HitmanDied = 'Leiemorder %s ble drept før han/hun hadde muligheten til å fullføre deres hit. Hit-forespørselen var misslykket!',
        TargetDisconnected = 'Målet %s forlot serveren med et aktiv hit. Kunden har blitt betalt tilbake.',
        HitmanDisconnected = 'Leiemorder %s har forlatt serveren. Hit-forespørselen er tatt tilbake.',
        CustomerDisconnected = 'Kunden %s har forlatt serveren. Hit-forespørselen er tatt tilbake.',
        HitmanChangedJob = 'Leiemorder %s har byttet jobb. Hit-forespørselen har blitt refundert og kunden har fått %s tilbake.',
        HitmanArrested = 'Leiemorder %s har blitt arrestert av %s. Hit-forespørselen har blitt refundert.',
        TargetArrested = 'Målet %s har blitt arrestert av %s. Hit-forespørselen har blitt refundert.',
        PhoneNoSave = 'Det er ingenting å lagre.',
        PhoneOnSave = '%i Telefon(er) har blitt lagret.',
        PhoneOnReset = 'Telefonene til %i ble vellykket fjernet og alle dataene er tilbakestilt',
        OnSwitchTeam = '%s har endret seg til %s hvis Hit er refundert.',
        BonusNoReply = 'Du tok for lang tid til å svare på bonustilbudet',
        HitActive = 'Denne personen er allerede fra en Hit-transaksjon. Du kan ikke plassere et slag på dem.',
        SameTargetTooSoon = 'Denne personen har nylig hatt et Hit mot dem, du kan ikke plassere en på denne personen ennå.',
        CantDrop = 'Du kan ikke slippe en bonusvåpen.',
        --> Starten på telefon relatert meldinger <--
        OnRandomHit = 'Det har blitt plassert et hit anonymt på en mistenkt. Flere detaljer er vist på telefonen. Skriv ' .. Executioner.Config.Phone_Command .. '.',
        OnRadomHitAccepted = 'Du har akseptert et tilfeldig generert hit på %s for %s.',
        HitmanActiveHit = 'Du har allerede et aktivt hit. Det er ikke nødvendig med en til.',
        NotEnoughHitmen = 'Det er ikke nok leiemordere på serveren for øyeblikket. Du kan ikke plassere et hit.',
        CustomerOnPhoneHitPlaced = 'Du har satt et hit på %s. Leiemordere vil ta hånd om ditt forespørsel snart. Du har blitt belastet %s.',
        HitmanNotifyRequest = '%s har bedt om at et hit skal utføres. Flere detaljer vises på telefonen. Skriv ' .. Executioner.Config.Phone_Command .. '.',
        PhoneNotInService = 'Telefonen er ikke i tjeneste for øyeblikket, kom tilbake senere.',
        HitmanOnUsePhone = 'Du kan ikke bruke telefonen som en leiemorder. Skriv ' .. Executioner.Config.Phone_Command .. ' istedet.'
    }

    Executioner.Config.Language[ 'dutch' ] = {
        HitPriceFormatError = 'Er is iets fout met de kosten van de hit. Maximaal %s - Minimaal %s.',
        HitPriceCantAfford = 'Je hebt niet genoeg geld voor deze hit. Het kost %s, je hebt op dit moment %s.',
        BonusWeaponAccepted = 'Het %s zal weggehaald worden wanneer een poging is gedaan tot de hit.',
        HitTimeReached = '%s heeft geen tijd meer om de hit te voltooien. De hit was niet geslaagd!',
        HitTooSoon = 'Je kunt de hit niet zo vroeg plaatsen.',
        HitmanBusy = '%s is al bezig met iemand.',
        RequestSent = 'Je hit verzoek is verstuurd naar %s.',
        CustomerNoResponse = '%s heeft niet geantwoord op je verzoek.',
        HitmanNoResponse = 'Je was te laat om het hit verzoek te beantwoorden.',
        TargetRejectHit = 'Je kan geen hit plaatsen op dit persoon.',
        InvalidTargets = 'Kon de hit niet plaatsen. Client(en) zijn niet verbonden met de server, of je bent dood.',
        CustomerOnHitAccepted = 'Je hebt %s\'s hit verzoek op %s voor %s geaccepteerd.',
        CustomerOnHitDeclined = '%s heeft je hit geweigerd. Je hebt niets hoeven betalen.',
        HitmanOnHitAccepted = 'Je hebt geaccepteerd %s\'s hit verzoek op %s voor %s.',
        HitmanOnHitDeclined = 'Je hebt %s\'s hit geweigerd.',
        MessageAllOnAccepted = 'Iemand heeft je hit geaccepteerd. Kijk uit, jij zou het doelwit kunnen zijn.',
        BonusWeaponHitComplete = '%s heeft de hit volbracht met %s op %s. Ze zijn beloond met %s en een bonus van %s.',
        HitCompletedNoBonus = '%s heeft zijn hit op %s volbracht en is beloond met %s.',
        TaxOnKill = 'Je totale inkomen is belast met ' .. Executioner.Config.TaxOnKill .. '%.',
        TargetDiedBeforeHit = '%s\'s doelwit %s was vermoord voordat ze de hit konden voltooien. De hit is gefaald!',
        TargetKilledHitman = '%s was geen match voor hun doelwit %s. Ze zijn vermoord. De hit is gefaald!',
        HitmanDied = 'Hitman %s was vermoord voordat ze een kans hadden om hun hit te voltooien. De hit is gefaald!',
        TargetDisconnected = 'Doelwit %s heeft de server verlaten met een active hit. De klant is terugbetaald.',
        HitmanDisconnected = 'Hitman %s heeft de server verlaten. De hit is terugbetaald.',
        CustomerDisconnected = 'Klant %s heeft de server verlaten. De hit is terugbetaald.',
        HitmanChangedJob = 'Hitman %s heeft zijn klasse veranderd. De hit is terugbetaald en aan de klant is %s terug gegeven.',
        HitmanArrested = 'Hitman %s is gearresteerd door %s. De hit is terugbetaald.',
        TargetArrested = 'Target %s is gearresteerd door %s. De hit is terugbetaald.',
        PhoneNoSave = 'Er is niets om te redden.',
        PhoneOnSave = '%i Telefoon(s) zijn succesvol opgeslagen.',
        PhoneOnReset = 'Succesvol verwijderd %i phones en reset alle gegevens.',
        OnSwitchTeam = '%s is veranderd in een %s the Hit is terugbetaald.',
        BonusNoReply = 'Je hebt te lang geduurd om te antwoorden op de bonusaanbieding',
        HitActive = 'Deze persoon maakt al deel uit van een Hit-transactie. Je kunt geen Hit op hem plaatsen.',
        SameTargetTooSoon = 'Deze persoon heeft recent een klap tegen zich gekregen, je kunt er nog geen één op deze persoon plaatsen.',
        CantDrop = 'Je kunt een bonuswapen niet laten vallen.',
        --> Start of Phone Related Messages <--
        OnRandomHit = 'Anoniem heeft een hit op de verdachte geplaatst. Meer details zijn zichtbaar op je telefoon. Typ ' .. Executioner.Config.Phone_Command .. '.',
        OnRadomHitAccepted = 'Je hebt een willekeurig gegenereerde hit geaccepteerd op %s voor %s.',
        HitmanActiveHit = 'Je hebt al een actieve hit. Het is niet nodig er nog een te plaatsen.',
        NotEnoughHitmen = 'Er zijn niet genoeg hitmans verbonden met de server op het moment. Je kunt geen hit plaatsen',
        CustomerOnPhoneHitPlaced = 'Je hebt een hit gecreerd op %s. Hitmen zullen je verzoek spoedig behandelen. Je hebt betaald',
        HitmanNotifyRequest = '%s heeft verzocht een hit uit te voeren. Meer details zijn zichtbaar op je telefoon. Typ ' .. Executioner.Config.Phone_Command .. '.',
        PhoneNotInService = 'De telefoon is niet beschikbaar op dit moment, kom later terug.',
        HitmanOnUsePhone = 'Je kunt de telefoon niet als Hitman gebruiken. Typ ' .. Executioner.Config.Phone_Command .. ' inplaats daarvan.'
    }

    Executioner.Language = Executioner.Config.Language[ Executioner.Config.Language.Choice ]

--addons/executioner_v2/lua/executioner_v2/ui/executioner_v2_lib.lua:
 
    --[[ 
        Coded by: Teddy (https://steamcommunity.com/id/tedlua/)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
    --]]
 
 
    if not CLIENT then return end
 
    TSS.Colors = {
        BASE_BACKGROUND = Color( 22, 22, 22 ),
        BASE_HEADER = Color( 30, 30, 30 ),
        BASE_CONTAINER = Color( 24, 24, 24 ),
        MENU_ITEM = Color( 32, 32, 32 ),
        MENU_ITEM_ACTIVE = Color( 28, 28, 28, 240 ),
        WHITE = Color( 255, 255, 255 ),
        RED = Color( 214, 48, 49 ),
        ORANGE = Color( 238,90,36 ),
        GREEN = Color( 54, 205, 66, 175 ),
        GREY = Color( 104, 104, 104 ),
        DARK_BLACK = Color( 52, 52, 52, 20 ),
        PURPLE = Color( 112, 111, 211 ),
        GOLD = Color( 251, 197, 49 ),
        SILVER = Color( 173, 168, 162 ),
        BRONZE = Color( 154, 93, 48 ),
        BLUE = Color( 40, 212, 230 )
    }
 
    local scr_h = ScrH()
    local max = math.max
    function TSS.Scale( value )
        return max( value * (scr_h / 1080), 1 )
    end
 
    local blur = Material( "pp/blurscreen" )
    function TSS.BlurRect(x, y, w, h, alpha)
    	local X, Y = 0,0
 
    	surface.SetDrawColor(255,255,255)
    	surface.SetMaterial(blur)
 
    	for i = 1, 5 do
    		blur:SetFloat("$blur", (i / 4) * (4))
    		blur:Recompute()
 
    		render.UpdateScreenEffectTexture()
 
    		render.SetScissorRect( x, y, x+w, y+h, true )
    			surface.DrawTexturedRect( X * -1, Y * -1, ScrW(), ScrH() )
    		render.SetScissorRect( 0, 0, 0, 0, false )
    	end
 
       draw.RoundedBox(0,x,y,w,h,Color(0,0,0,alpha))
    end
 
    function TSS.BlurMenu( panel, layers, density, alpha )
        -- Its a scientifically proven fact that blur improves a script
        local x, y = panel:LocalToScreen( 0, 0 )
 
        surface.SetDrawColor( 255, 255, 255, alpha )
        surface.SetMaterial( blur )
 
        for i = 1, 5 do
            blur:SetFloat( "$blur", ( i / 4 ) * 4 )
            blur:Recompute()
 
            render.UpdateScreenEffectTexture()
            surface.DrawTexturedRect( -x, -y, ScrW(), ScrH() )
        end
    end
 
 
    function TSS.DrawRect( x, y, w, h, col )
        surface.SetDrawColor( col )
        surface.DrawRect( x, y, w, h )
    end
 
    function TSS.BuildFont( font, start, finish )
        for x = start, finish do
            surface.CreateFont( "TSS.Font." .. x, { font = font, size = ScreenScale( x ), weight = 0 } )
        end
    end
 
    TSS.BuildFont( "Roboto", 2, 30 )
 
    function TSS.DrawText( msg, fnt, x, y, c, align, extra )
        if extra then 
            draw.SimpleText( msg, fnt, x, y, c, align and align or TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        else
            draw.SimpleText( msg, fnt, x, y, c, align and align or TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        end
    end
 
    function TSS.DrawOutline( x, y, w, h, t, c )
    surface.SetDrawColor( c )
        for i = 0, t - 1 do
            surface.DrawOutlinedRect( x + i, y + i, w - i * 2, h - i * 2 )
        end
    end
 
    function TSS.DrawRoundedBox( rad, x, y, w, h, col )
        draw.RoundedBox( rad, x, y, w, h, col )
    end
 
    function TSS.ConvertColour( hovered, col, reduction )
        reduction = reduction or 10
        return hovered and Color( col.r - reduction, col.g - reduction, col.b - reduction, col.a or 220 ) or col
    end
 
    function TSS.CreateButton( parent, x, y, w, h, font, txt )
        local btn = vgui.Create( 'DButton', parent )
        btn:SetSize( w, h )
        btn:SetFont( font )
        btn:SetText( txt )
        btn:SetPos( x, y )
        btn:SetTextColor( Color( 255, 255, 255 ) )
        btn.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.ConvertColour( me:IsHovered(), TSS.Colors.DARK_BLACK, 10 ) )
        end
        return btn
    end
 
    function TSS.DrawIcon( mat, x, y, col, w, h )
        surface.SetDrawColor( col and col or Color( 255, 255, 255 ) )
        surface.SetMaterial( mat )
        surface.DrawTexturedRect( x, y, w and w or 32, h and h or 32 )
    end
 
    function TSS.PaintBar( parent, base_color, switch_color, bar_color )
        if not parent.VBar then print( 'No VBar found.' ) return end
        parent.VBar.Paint = function( me, w, h ) if not base_color then return else TSS.DrawRect( 0, 0, w, h, base_color ) end end
        parent.VBar.btnUp.Paint = function( me, w, h ) if not switch_color then return else TSS.DrawRect( 0, 0, w, h, switch_color ) end end
        parent.VBar.btnDown.Paint = function( me, w, h ) if not switch_color then return else TSS.DrawRect( 0, 0, w, h, switch_color ) end end
        parent.VBar.btnGrip.Paint = function( me, w, h ) if not bar_color then return else TSS.DrawRect( 3, 0, w / 2, h, bar_color ) end end
    end
 
    local blue = Color( 97, 114, 160 )
    function TSS.CreateClickableRow( parent, main_panel_size, base_size, extra )
        local player_panel = vgui.Create( "DCollapsibleCategory", parent )
        player_panel:SetExpanded( 0 )
        player_panel:SetLabel( '' )
        player_panel:GetChildren()[ 1 ]:SetTall( base_size )
 
        local hidden_list = vgui.Create( 'DPanelList' )
        hidden_list:SetSpacing( 1 )
        player_panel:SetContents( hidden_list )
 
        local hidden_panel = vgui.Create( "DPanel" )
        hidden_panel:SetSize( hidden_list:GetWide(), extra )
        hidden_list:AddItem( hidden_panel )
        hidden_panel.Paint = function( me, w, h ) TSS.DrawRect( 0, 0, w, h, blue ) end
        return player_panel, hidden_panel
    end
 
    function TSS.SecondsToClock( seconds )
        local seconds = tonumber( seconds )
        if seconds <= 0 then
            return "00:00:00"
        else
            if seconds >= 3600 then
                local hours = string.format( "%02.f", math.floor( seconds / 3600 ) )
                local mins = string.format( "%02.f", math.floor( seconds / 60 - (hours*60) ) )
                local secs = string.format( "%02.f", math.floor( seconds - hours*3600 - mins *60 ) )
                return hours .. ":" .. mins.. ":" .. secs
            else
                local mins = string.format( "%02.f", math.floor( seconds / 60 ) )
                local secs = string.format( "%02.f", math.floor( seconds - mins * 60 ) )
                return mins.. ":" .. secs
            end
        end
    end
 
    function TSS.MakeDFrame( width, height, title, close_button, close_button_func, no_blur )
        local scr_w, scr_h, ply = ScrW(), ScrH(), LocalPlayer()
 
        local Scale = TSS.Scale
        if scr_h > 1080 and height >= Scale( 400 ) then height = height + Scale( 125 ) end
 
        local self = vgui.Create( "DFrame" )
        self:SetSize( width, height )
        self:SetTitle( "" )
        self:ShowCloseButton( false )
        self:SetDraggable( false )
        if hover then 
            self:SetPos( hover.x, hover.y ) 
        else
            self:Center()
        end
 
        self:MakePopup()
 
        self.Title = title
        self.Title_Color = TSS.Colors.WHITE
 
        local start_time = CurTime()
        self.Paint = function( me, w, h )
            if not no_blur then Derma_DrawBackgroundBlur( me, start_time ) end
            if blur then TSS.BlurMenu( me, 16, 16, 255 ) end
            TSS.DrawRect( 0, 0, w, h, TSS.Colors.BASE_BACKGROUND )
        end
 
        self.Header = self:Add( "DPanel" )
        self.Header:SetWide( self:GetWide() )
        self.Header:SetTall( Scale( 40 ) )
        self.Header:Dock( TOP )
        self.Header:DockMargin( 0, -30, 0, 0 )
 
        self.Header.Paint = function( me, w, h )
            --TSS.DrawRect( 0, h / 2, w, 1, TSS.Colors.RED )
            TSS.DrawText( self.Title, "TSS.Font.8", Scale( 5 ), Scale( 20 ), TSS.Colors.GREY, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
        end
 
        if close_button then
            self.Close_Button = TSS.CreateButton( self.Header, self.Header:GetWide() - Scale( 50 ), Scale( 6 ), Scale( 50 ), Scale( 25 ), 'TSS.Font.16', '×', TSS.Colors.WHITE )
            self.Close_Button.DoClick = function() 
                self:Close() 
                surface.PlaySound( "physics/plaster/ceiling_tile_impact_soft2.wav" ) 
                if close_button_func then close_button_func() end
            end
            self.Close_Button.Paint = function( me, w, h ) 
                me:SetTextColor( me:IsHovered() and TSS.Colors.RED or TSS.Colors.GREY )
            end
        end
 
        return self
    end
 
    function TSS.BuildHTMLPanel( self, link, use_browser )
        local scale = ScreenScale( 1 )
 
        self.Core_Container = self:MakeBaseContainer()
 
        local panel = vgui.Create( "DHTML", self.Core_Container )
        panel:Dock( FILL )
        if not use_browser then
            panel:OpenURL( link )
        else
            gui.OpenURL( link )
        end
    end
 
    function TSS.CreateLabel( parent, txt, font, color )
        local label = parent:Add( "DLabel" )
        label:SetText( txt )
        label:SetWrap( true )
        label:SetContentAlignment( 7 )
        label:SetFont( font )
        label:SetTextColor( color )
        return label
    end
 
    function TSS.SendScreenMessage( header, footer, time )
        local frame = vgui.Create( 'DFrame' )
        frame:SetSize( 800, 200 )
        frame:SetDraggable( false )
        frame:ShowCloseButton( false )
        frame:SetTitle( "" )
        frame:SetPos( ScrW() / 2 - frame:GetWide() / 2, ScrH() - frame:GetTall() )
        frame:MoveTo( ScrW() / 2 - frame:GetWide() / 2, ScrH() / 2 - frame:GetTall() / 2, 0.3, 0, time )
        timer.Simple( 3, function()
            if IsValid( frame ) then
                frame:MoveTo( ScrW() + frame:GetWide(), ScrH() / 2 - frame:GetTall() / 2, 0.3, 0, time )
                timer.Simple( 1, function() if IsValid( frame ) then frame:Remove() end end )
            end
        end  )
        frame:SetVisible( true )
        frame.Paint = function( me, w, h )
            TSS.DrawText( header, 'TSS.Font.12', w / 2, 20, TSS.Colors.WHITE )
            TSS.DrawText( footer, 'TSS.Font.12', w / 2, 50, TSS.Colors.GREEN )
        end
    end
 
    function TSS.UnpackChatMessage( tag, message )
        local data = net.ReadTable()
        if not data then
            tag = tag
            message = message
        end
        chat.AddText( TSS.Colors.RED, data.tag or tag, ": ", TSS.Colors.WHITE, data.message or message )
    end
    net.Receive( "TSS.Executioner.SendMessage", TSS.UnpackChatMessage )
--addons/executioner_v2/lua/executioner_v2/ui/executioner_v2_shop.lua:
    if not TSS.Executioner.Store.Enabled then return end
    
    local LANG = TSS.Executioner.Config.Language    
    local format = string.format
    
    TSS.Executioner.Store.Open = function()
        local data = net.ReadTable()
        if not data then return end 

        local Scale, ply = TSS.Scale, LocalPlayer()
        local self = TSS.MakeDFrame( Scale( 1100 ), Scale( 615 ), "Executioner 2.0 Hitman Store", true )
        local level = tonumber( data.level )

        self.Info_Container = self:Add( "DPanel" )
        self.Info_Container:SetTall( Scale( 45 ) )
        self.Info_Container:DockMargin( 0, 0, 0, 4 )
        self.Info_Container:Dock( TOP )

        local bar_x, bar_y, bar_width, bar_height = 155, 7, 150, 30

        local start_xp = TSS.Executioner.XP.Level_Data[ data.level ]
        local end_xp = TSS.Executioner.XP.Level_Data[ data.level + 1 ]
        local maxed = false
        if end_xp == nil then
            end_xp = 0
            maxed = true
        end
        local current_xp = data.xp
        local progress = ( current_xp - start_xp ) / ( end_xp - start_xp ) * 100
        local percentage = math.Round( progress, 0 )
    
        self.Info_Container.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.BASE_HEADER )
            TSS.DrawText( LANG.UI_CURRENT_LEVEL .. data.level, "TSS.Font.8", Scale( 10 ), h / 2, TSS.Colors.GREY, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
            TSS.DrawRoundedBox( 6, w - Scale( bar_x ), Scale( bar_y ), Scale( bar_width ), Scale( bar_height ), TSS.Colors.BASE_CONTAINER )
            TSS.DrawRoundedBox( 6, w - Scale( bar_x ), Scale( bar_y ), Scale( maxed and 0 or percentage / 100 * bar_width ), Scale( bar_height ), TSS.Colors.GREEN )
            TSS.DrawText(maxed and "Max Level" or "XP: " .. percentage .. "%", "TSS.Font.7", w - Scale( bar_x ) / 2, Scale( bar_y + bar_height / 2 ), TSS.Colors.WHITE, TSS.TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
        end

        self.Category_Scroll = self:Add( "DScrollPanel" )
        self.Category_Scroll:Dock( FILL )
        self.Category_Scroll:DockMargin( Scale( 5 ), Scale( 5 ), Scale( 5 ), Scale( 5 ) )
        self.Category_Scroll.Paint = function( me, w, h )
            --TSS.DrawRect( 0, 0, w, h, TSS.Colors.RED )
        end
        TSS.PaintBar( self.Category_Scroll, nil, nil, TSS.Colors.BASE_HEADER )
        
        self.Layout = self.Category_Scroll:Add( "DIconLayout" )
        self.Layout:Dock( FILL )

        self.Layout.Paint = function( me, w, h )
            TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.BASE_CONTAINER )
        end

        self.Level_Categories = {}
        self.Parent_Categories = {}
        -- Let's find out what categories actually exist..
        for k, v in pairs( TSS.Executioner.Config.Hitman_Perks ) do
            if not self.Level_Categories[ v.level ] then
                self.Level_Categories[ v.level ] = v.level
            end
        end

        -- Now create the actual categories
        for k, v in SortedPairsByValue( self.Level_Categories, false ) do
            self.Category_Content = self.Layout:Add( "DIconLayout" )
            self.Category_Content:Dock( TOP )
            self.Category_Content:SetSpaceX( 3 )
            self.Category_Content:SetSpaceY( 3 )
            self.Category_Content:DockPadding( 0, 0, 0, Scale( 5 ) )

            self.Category_Header = self.Category_Content:Add( "DPanel" )
            self.Category_Header:SetTall( Scale( 45 ) )
            self.Category_Header:Dock( TOP )
            self.Category_Header.Paint = function( me, w, h )
                TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.BASE_HEADER )
                TSS.DrawText( format( LANG.UI_PERK_CATEGORY, v ), "TSS.Font.8", Scale( 10 ), h / 2, level < v and TSS.Colors.RED or TSS.Colors.GREEN, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
            end

            for perk_id, perk in pairs( TSS.Executioner.Config.Hitman_Perks ) do
                ---if not self.Parent_Categories[ v.level ] then continue end -- Fucky wucky
                ---if not IsValid( self.Parent_Categories[ v.level ] ) then return end
                if perk.level != v then continue end
                local locked = level < perk.level
                local owned = data.perks[ perk_id ]

                local x_pos = Scale( 90 )
                local item = self.Category_Content:Add( "DPanel" )
                item:SetSize( self:GetWide() / 2 - Scale( 20 ), Scale( 80 ) )
                
                local item_description = item:Add( "DLabel" )
                item_description:SetPos( x_pos, item:GetTall() / 2 - Scale ( 7 ) )
                item_description:SetSize( item:GetWide() - Scale( 100 ), Scale( 80 ) )
                item_description:SetText( locked and "Capybaras are kind of cool, no? Why are you trying to read this?" or perk.description )
                item_description:SetContentAlignment( 7 )
                item_description:SetFont( "TSS.Font.7" )
                item_description:SetWrap( true )
                item_description:SetTextColor( TSS.Colors.GREY )

                item_description.PaintOver = function( me, w, h )
                    if locked then 
                        TSS.BlurMenu( item_description, 0, 0, 150 ) 
                    end
                end

                item.Paint = function( me, w, h )
                    --TSS.DrawText( perk.description, "TSS.Font.7", x_pos + 1, h / 2, TSS.Colors.WHTIE, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
                    if not me:IsHovered() then 
                        if not item_description:IsVisible() then item_description:SetVisible( true ) end
                        TSS.DrawRoundedBox( 6, 0, 0, w, h, TSS.Colors.DARK_BLACK )   
                        TSS.DrawIcon( perk.icon, Scale( 10 ), h / 2 - Scale( 32 ), TSS.Colors.GREY, Scale( 64 ), Scale( 64 ) )
                        if locked then TSS.BlurMenu( item, 50, 50, 255 ) end
                        TSS.DrawText( locked and "???" or perk.name, "TSS.Font.8", x_pos, Scale( 20 ), locked and TSS.Colors.RED or TSS.Colors.WHITE, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
                        TSS.DrawText( locked and "" or owned and LANG.UI_PERK_ACTIVE or "$" .. string.Comma( perk.price ), "TSS.Font.8", item:GetWide() - Scale( 18 ), Scale( 20 ), locked and TSS.Colors.RED or TSS.Colors.GREEN, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
                    else
                        if item_description:IsVisible() then item_description:SetVisible( false ) end
                        TSS.DrawText( locked and LANG.UI_PERK_ERROR or owned and LANG.UI_PERK_OWNED or LANG.UI_PERK_BUY, "TSS.Font.8", w / 2, h / 2, TSS.Colors.GREY, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER ) 
                    end
                end

                item.OnMousePressed = function()
                    net.Start( "TSS.Executioner.Store.Purchase" )
                        net.WriteString( perk_id )
                    net.SendToServer()
                    if not data.perks[ perk_id ] and ply:canAfford( perk.price ) then data.perks[ perk_id ] = true owned = true end
                end
            end  
        end  
    end
    net.Receive( "TSS.Executioner.Store.Send", TSS.Executioner.Store.Open )

    
    
--addons/glicence/lua/autorun/glicence_init.lua:
return gluapack()()
--addons/glicence/lua/glicence/core/cl_main.lua:
return gluapack()()
--lua/autorun/gmodadminsuite.lua:
return gluapack()()
--lua/gmodadminsuite/lang/chinese.lua:
return gluapack()()
--lua/gmodadminsuite/modules/commands/lang/chinese.lua:
return gluapack()()
--lua/gmodadminsuite/modules/commands/lang/french.lua:
return gluapack()()
--addons/gmodadminsuite-jobwhitelist-1.3.4/lua/gmodadminsuite/modules/jobwhitelist/lang/polish.lua:
return gluapack()()
--addons/gmodadminsuite-jobwhitelist-1.3.4/lua/gmodadminsuite/modules/jobwhitelist/lang/polish.lua:
return {
	Name = "Polish",
	Flag = "flags16/pl.png",
	Phrases = function() return {

		module_name = "Billy's Whitelist",

		insufficient_permissions_jobwhitelist = "Whitelista/Czarna Lista nie jest wlączona dla tej pracy,\noraz nie posiadasz wystarczających permisji do wlączenia jej.",
		no_data                               = "Brak danych",
		type                                  = "Typ",
		value                                 = "Wartość",
		name                                  = "Nazwa",
		added_by                              = "Dodano przez",
		click_delete_entry_tip                = "Kliknij na pozycje, by ją usunąć!",
		copied                                = "Skopiowano!",
		delete_entry                          = "Usuń Pozycję",
		add_player                            = "Dodaj Gracza",
		add_usergroup                         = "Dodaj Rangę",
		add_lua_function                      = "Dodaj funkcję Lua",
		lua_function                          = "Funkcja Lua",
		script_page                           = "Strona Skryptu",
		wiki                                  = "Wikipedia",
		jobs                                  = "Prace",
		whitelist                             = "Whitelista",
		blacklist                             = "Blacklista",
		settings                              = "Ustawienia",
		enable_whitelist                      = "Włącz Whiteliste",
		enable_blacklist                      = "Włącz Czarną Listę",
		default_whitelisted                   = "Dodany do Whitelisty domyślnie",
		default_blacklisted                   = "Dodany do Czarnej Listy domyślnie",
		disable_autoswitch                    = "Wyłącz Automatyczną Zmianę dla tej Pracy",
		players                               = "Gracze",
		job                                   = "Praca",
		usergroup                             = "Ranga",
		distance                              = "Dystans",
		click_for_options_tip                 = "Kliknij po Więcej!",
		refreshing_ellipsis                   = "Odświeżanie...",
		refreshing_in_1_second                = "Odświeżanie za 1 sekundę",
		refreshing_in_seconds                 = "Odświeżanie w %s sekundy",
		operator                              = "SuperAdministrator",
		OperatorsSkipWhitelists_help          = "Jeśli to jest włączone, SuperAdministratorzy omijają Whiteliste.",
		OperatorsSkipBlacklists_help          = "Jeśli to jest włączone, SuperAdministratorzy omijają Czarną Listę.",
		ShowUnjoinableJobs_help               = "Jeśli wyłączone, Gracze nie widzą prac w F4 w których są na Czarnej Liście/nie mają Whitelisty.\nJeśli włączone, widzą wszystkie prace.",
		ContextMenu_help                      = "Jeśli włączone, Gracze mogą używać Whitelisty w Context Menu (pod C) Zalecane!\nJeśli wyłączone, ta opcja jest niedostępna.",
		off                                   = "Wyłączone",
		FunctionMenuKey_help                  = "Pozwala dodać klawisz Funkcyjny do Menu Whitelisty (F1/F2/F3/F4)",
		AutoSwitch_help                       = "Jeśli włączone, kiedy Gracz otrzymuje Whitelistę do danej pracy, automatycznie zostanie w nią zmieniony. (Działa tylko ze SteamID)",
		SwitchJobOnUnwhitelist_help           = "Jeśli włączone, kiedy Whitelista zostanie odebrana od Gracza do danej pracy, automatycznie zostanie zmieniony w podstawową pracę. (Działa tylko ze SteamID)",
		SwitchJobOnBlacklist_help             = "Jeśli włączone, kiedy Gracz zostaje dodany do Czarnej Listy danej pracy, automatycznie zostanie zmieniony w podstawową pracę. (Działa tylko ze SteamID)",
		NotWhitelistedMsg_help                = "Wiadomość, którą zobaczy Gracz kiedy nie ma dostępu do danej pracy, kiedy próbuje do niej dołączyć.",
		BlacklistedMsg_help                   = "Wiadomość, którą zobaczy Gracz kiedy znajduje się na Czarnej Liście danej pracy, oraz próbuje do niej dołączyć.",
		NotifyWhitelisted_help                = "Włącz by powiadamiać Graczy, jeśli dostali Whitelistę do danej pracy. (Działa tylko ze SteamID)",
		NotifyWhitelisted_Msg_help            = "Wiadomość, którą zobaczy Gracz kiedy otrzyma Whitelistę do danej pracy.",
		NotifyUnwhitelisted_help              = "Włącz by powiadamiać Graczy, jeśli odebrano Whitelistę do danej pracy. (Działa tylko ze SteamID)",
		NotifyUnwhitelisted_Msg_help          = "Wiadomość, którą zobaczy Gracz kiedy zostanie odebrana Whitelista do danej pracy.",
		NotifyBlacklisted_help                = "Włącz by powiadamiać Graczy, jeśli zostali dodani na Czarną Listę danej pracy. (Działa tylko ze SteamID)",
		NotifyBlacklisted_Msg_help            = "Wiadomość, którą zobaczy Gracz kiedy zostanie dodany do Czarnej Listy danej pracy.",
		NotifyUnblacklisted_help              = "Włącz by powiadamiać Graczy, jeśli zostali usunięci z Czarnej Listy danej pracy. (Działa tylko ze SteamID)",
		NotifyUnblacklisted_Msg_help          = "Wiadomość, którą zobaczy Gracz kiedy zostanie usunięty z Czarnej Listy danej pracy.",
		permissions                           = "Uprawnienia",
		modify_whitelist                      = "Edytuj Whiteliste",
		modify_blacklist                      = "Edytuj Czarną Listę",
		enable_disable_whitelist              = "Włącz/Wyłącz Whiteliste",
		enable_disable_blacklist              = "Włącz/Wyłącz Czarną Listę",
		job_category                          = "Kategoria",
		steamid                               = "SteamID",
		all_jobs                              = "Wszystkie Prace",
		save                                  = "Zapisz",
		all_jobs_in_category                  = "Wszystkie Prace w Kategorii",
		job_categories                        = "Kategorie",
		usergroups                            = "Rangi",
		steamids                              = "SteamID",
		lua_functions                         = "Funkcje Lua",
		usergroup_ellipsis                    = "Ranga...",
		steamid_ellipsis                      = "SteamID...",
		enter_steamid_ellipsis                = "Wpisz SteamID...",
		resets                                = "Zaawansowane",
		enable_buttons                        = "Odblokuj przyciski",
		reset_config                          = "Zresetuj Konfig",
		done_exclamation                      = "Gotowe!",
		reset_permissions_config              = "Zresetuj konfig Uprawnień",
		disable_all_whitelists                = "Wyłącz wszystkie Whitelisty",
		disable_all_blacklists                = "Wyłącz wszystkie Czarne Listy",
		destroy_whitelist                     = "Zniszcz Dane Whitelisty...",
		destroy_blacklist                     = "Zniszcz Dane Czarnych List...",
		destroy_all_data                      = "Zniszcz wszystkie Dane",
		destroy_all_data_help                 = "Usuń Dane Whitelisty i Czarnej Listy, wyłącz Whiteliste i Czarną Liste, lecz nie resetuj konfiguracji.",
		reset_everything                      = "Zresetuj wszystko (!)",
		reset_everything_help                 = "Usuń Dane Whitelisty i Czarnej Listy, wyłącz Whiteliste i Czarną Liste, i resetuje konfiguracje.",
		disable_buttons                       = "Zablokuj przyciski",
		open_menu                             = "Otwórz Menu",
		add_to_whitelist                      = "Dodaj do Whitelisty",
		loading_ellipsis                      = "Wczytywanie...",
		no_whitelists_available               = "Brak dostępnych Whitelist!",
		add_to_blacklist                      = "Dodaj do Czarnej Listy",
		no_blacklists_available               = "Brak dostępnych Czarnych List!",
		click_to_focus                        = "Kliknij by przypiąć",
		right_click_to_focus                  = "Prawy Przycisk by przypiąć",
		copy_steamid                          = "Skopiuj SteamID",
		copy_steamid64                        = "Skopiuj SteamID64",
		copy                                  = "Skopiuj",
		default_team_error                    = "Nie możesz używać Whitelisty/Czarnej Listy, bo jest to domyślna praca.",
		saved_exclamation                     = "Zapisano!",
		whitelisted                           = "Dodano do Whitelisty",
		blacklisted                           = "Dodano do Czarnej Listy",
		choose_faction                        = "Wybierz frakcję",
		faction_not_permitted                 = "(Nie masz uprawnień, by dołączyć do tej Frakcji)",
		factions                              = "Frakcje",
		new_faction                           = "Nowa Frakcja",
		destroy_faction_data                  = "Usuń dane Frakcji",
		destroy_faction_data_help             = "Usuń wszystkie dane Frakcji (np. jakie Frakcje wybrali Gracze)",
		reset_factions_config                 = "Zresetuj konfig Frakcji",
		logo_url                              = "Link do Logo... (PNG)",
		faction_name                          = "Nazwa frakcji",
		faction_name_tip                      = "Nazwa tej frakcji",
		description                           = "Opis",
		faction_description_tip               = "Gracze zobaczą opis po najechaniu na Frakcję",
		ShowIfNotPermitted                    = "Pokaż ignorując uprawnienia Gracza",
		ShowIfNotPermitted_help               = "Jeśli Gracz nie ma uprawnień by dołączyć do Frakcji, powinna być ona pokazana?",
		SetTeam                               = "Praca Gracza",
		SetTeam_help                          = "W jaką pracę powinien zamienić się Gracz po wybraniu tej Frakcji?",
		WhitelistedTo                         = "Dodaj Whiteliste do",
		WhitelistedTo_help                    = "Do jakich prac Gracz powinien mieć Whitelistę w tej Frakcji?",
		BlacklistedFrom                       = "Dodaj do Czarnej Listy",
		BlacklistedFrom_help                  = "W jakich pracach Gracz powinien być na Czarnej Liście w tej Frakcji?",
		delete_faction_confirm                = "Jesteś pewien, że chcesz usunąć te Frakcję?",
		confirm_action                        = "Potwierdź",
		yes                                   = "Tak",
		no                                    = "Nie",
		save_faction                          = "Zapisz Frakcję",
		delete_faction                        = "Usuń Frakcję",
		factions_ShowOnFirstJoin              = "Pokaż na pierwszym dołączeniu",
		factions_ShowOnFirstJoin_help         = "Pokaż wybór Frakcji, kiedy Gracz dołączy pierwszy raz?",
		factions_ShowOnEveryJoin              = "Pokaż na każdym dołączeniu",
		factions_ShowOnEveryJoin_help         = "Pokaż wybór Frakcji za każdym razem, kiedy Gracz dołączy?",
		factions_ShowOnEverySpawn             = "Pokaż na każdym respawnie",
		factions_ShowOnEverySpawn_help        = "Pokaż wybór Frakcji za każdym razem, kiedy Gracz się zrespi?",
		factions_HelpText                     = "Wskazówka",
		factions_HelpText_help                = "Wyświetlony tekst, kiedy żadna Frakcja nie jest najechana myszką",
		factions_OnPopupSound                 = "Dźwięk otwarcia",
		factions_OnPopupSound_help            = "Dźwięk do odtworzenia, kiedy Menu wybrania Frakcji jest otwarte",
		factions_OnHoverSound                 = "Dźwięk najechania",
		factions_OnHoverSound_help            = "Dźwięk do odtworzenia, kiedy Frakcja jest najechana myszką",
		factions_OnSelectionSound             = "Dźwięk wybrania",
		factions_OnSelectionSound_help        = "Dźwięk do odtworzenia, kiedy Frakcja jest wybrana",
		factions_PermissionDeniedSound        = "Dźwięk braku Uprawnień",
		factions_PermissionDeniedSound_help   = "Dźwięk do odtworzenia, kiedy wybrana Frakcja jest niedostępna",
		enable_factions                       = "Włącz Frakcje",
		edit_factions                         = "Edytuj Frakcje",
		chat_command                          = "Komenda Chatu",
		console_command                       = "Komenda w Konsoli",
		blank_to_disable                      = "Zostaw puste by wyłączyć",
		add_to_all_whitelists                 = "DODAJ do wszystkich Whitelist",
		add_to_all_blacklists                 = "DODAJ do wszystkich Czarnych List",
		remove_from_all_whitelists            = "USUŃ z wszystkich Whitelist",
		remove_from_all_blacklists            = "USUŃ z wszystkich Czarnych List",
		bulk_actions                          = "Masowe Akcje",
		add                                   = "Dodaj",
		remove                                = "Usuń",
		remove_player                         = "Usuń Gracza",
		remove_usergroup                      = "Usuń Rangę",
		remove_lua_function                   = "Usuń funkcję Lua",
		convert_old_data                      = "Importuj dane starej Whitelisty",
		offline                               = "Offline",
		add_usergroup                         = "Dodaj Rangę",
		no_permission_action                  = "Nie masz uprawnień do wykonania tej Akcji!",

} end }
--lua/gmodadminsuite/modules/playerdatabase/lang/english.lua:
return gluapack()()
--lua/gmodadminsuite/cl_country_codes.lua:
return gluapack()()
--lua/gmodadminsuite/modules/commands/sh_init.lua:
if (SERVER) then
	AddCSLuaFile("cl_commands.lua")
end

GAS.Commands = {}

GAS.Commands.ACTION_COMMANDS_MENU   = 0
GAS.Commands.ACTION_COMMAND         = 1
GAS.Commands.ACTION_CHAT            = 2
GAS.Commands.ACTION_WEBSITE         = 3
GAS.Commands.ACTION_TELEPORT        = 4
GAS.Commands.ACTION_LUA_FUNCTION_SV = 5
GAS.Commands.ACTION_LUA_FUNCTION_CL = 6
GAS.Commands.ACTION_GAS_MODULE      = 7

GAS:hook("gmodadminsuite:LoadModule:commands", "LoadModule:commands", function()
	if (SERVER) then
		include("gmodadminsuite/modules/commands/sv_commands.lua")
		include("gmodadminsuite/modules/commands/sv_permissions.lua")
	else
		include("gmodadminsuite/modules/commands/cl_commands.lua")
	end
end)
--addons/gmodadminsuite-jobwhitelist-1.3.4/lua/gmodadminsuite/modules/jobwhitelist/_gas_info.lua:
return gluapack()()
--addons/gmodadminsuite-jobwhitelist-1.3.4/lua/gmodadminsuite/modules/jobwhitelist/_gas_info.lua:
return {
	DefaultEnabled = true,
	Name = "Billy's Whitelist",
	Category = GAS.MODULE_CATEGORY_PLAYER_MANAGEMENT,
	Wiki = "https://gmodsto.re/bwhitelist-wiki",
	Icon = "icon16/vcard_edit.png",
	DarkRP = true,
	GmodStore = "6017",
	License = '{"licensee":"76561199133752879","keys":{"xeon-de":"LXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","xeon-us":"LXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"}}'
}
--addons/gmodadminsuite-logging-2.4.8/lua/gmodadminsuite/modules/logging/sh_init.lua:
if (SERVER) then
	include("sv_backwards_compatibility.lua")

	GAS_Logging_ReadyCallbacks = {}
	function GAS_Logging_Init(callback)
		if (GAS and GAS.Logging and GAS.Logging.Loaded) then
			callback()
		else
			table.insert(GAS_Logging_ReadyCallbacks, callback)
		end
	end
	
	AddCSLuaFile("cl_menu.lua")
	AddCSLuaFile("cl_livelogs.lua")
	AddCSLuaFile("sh_log_formatting.lua")
	AddCSLuaFile("sh_scenes.lua")
end

GAS:hook("gmodadminsuite:LoadModule:logging", "LoadModule:jobwhitelist:logging", function(module_info)
	if (GAS.Logging and IsValid(GAS.Logging.Menu)) then
		GAS.Logging.Menu:Close()
	end

	GAS.Logging = {}

	GAS.Logging.FORMAT_PLAYER    = 0
	GAS.Logging.FORMAT_WEAPON    = 1
	GAS.Logging.FORMAT_ENTITY    = 2
	GAS.Logging.FORMAT_PROP      = 3
	GAS.Logging.FORMAT_RAGDOLL   = 4
	GAS.Logging.FORMAT_CURRENCY  = 5
	GAS.Logging.FORMAT_COUNTRY   = 6
	GAS.Logging.FORMAT_AMMO      = 7
	GAS.Logging.FORMAT_TEAM      = 8
	GAS.Logging.FORMAT_USERGROUP = 9
	GAS.Logging.FORMAT_STRING    = 10
	GAS.Logging.FORMAT_HIGHLIGHT = 11
	GAS.Logging.FORMAT_ROLE      = 12
	GAS.Logging.FORMAT_VEHICLE   = 13
	GAS.Logging.FORMAT_DAMAGE    = 14
	
	function GAS.Logging:ClassTypeNames(L) return {
		[GAS.Logging.FORMAT_PLAYER]    = L"class_type_player",
		[GAS.Logging.FORMAT_WEAPON]    = L"class_type_weapon",
		[GAS.Logging.FORMAT_ENTITY]    = L"class_type_entity",
		[GAS.Logging.FORMAT_PROP]      = L"class_type_prop",
		[GAS.Logging.FORMAT_RAGDOLL]   = L"class_type_ragdoll",
		[GAS.Logging.FORMAT_COUNTRY]   = L"class_type_country",
		[GAS.Logging.FORMAT_AMMO]      = L"class_type_ammo",
		[GAS.Logging.FORMAT_TEAM]      = L"class_type_team",
		[GAS.Logging.FORMAT_USERGROUP] = L"class_type_usergroup",
		[GAS.Logging.FORMAT_ROLE]      = L"class_type_role",
		[GAS.Logging.FORMAT_VEHICLE]   = L"class_type_vehicle",
		[GAS.Logging.FORMAT_DAMAGE]    = L"class_type_damage",
	} end

	GAS.Logging.PvP_LOG_TYPE_CHAT                = 0
	GAS.Logging.PvP_LOG_TYPE_CHAT_TEAM           = 1
	GAS.Logging.PvP_LOG_TYPE_WEAPON_PICKUP       = 2
	GAS.Logging.PvP_LOG_TYPE_WEAPON_DROPPED      = 3
	GAS.Logging.PvP_LOG_TYPE_ITEM_PICKUP         = 4
	GAS.Logging.PvP_LOG_TYPE_SPAWNMENU           = 5
	GAS.Logging.PvP_LOG_TYPE_DARKRP_PURCHASE     = 6
	GAS.Logging.PvP_LOG_TYPE_DISCONNECT          = 7
	GAS.Logging.PvP_LOG_TYPE_WEAPON_SWITCHED     = 8
	GAS.Logging.PvP_LOG_TYPE_TEAM_SWITCH         = 9
	GAS.Logging.PVP_LOG_TYPE_SILENT_DEATH        = 10
	GAS.Logging.PvP_LOG_TYPE_DEATH_WORLD         = 11
	GAS.Logging.PvP_LOG_TYPE_DEATH_PLAYER_WEP    = 12
	GAS.Logging.PvP_LOG_TYPE_DEATH_PLAYER        = 13
	GAS.Logging.PvP_LOG_TYPE_DEATH_ENT           = 14
	GAS.Logging.PvP_LOG_TYPE_DEATH               = 15
	GAS.Logging.PvP_LOG_TYPE_DEATH_PROPKILL_SELF = 16
	GAS.Logging.PvP_LOG_TYPE_DEATH_PROPKILL      = 17

	GAS.Logging.PvP_FLAG_FRIENDLYFIRE     = 0
	GAS.Logging.PvP_FLAG_LAWENFORCEMENT   = 1
	GAS.Logging.PvP_FLAG_LINKED           = 2
	GAS.Logging.PvP_FLAG_ADMIN            = 3
	GAS.Logging.PvP_FLAG_SUPERADMIN       = 4
	GAS.Logging.PvP_FLAG_VEHICLE          = 5
	GAS.Logging.PvP_FLAG_PROPS            = 6
	GAS.Logging.PvP_FLAG_DISCONNECT       = 7
	GAS.Logging.PvP_FLAG_WORLD            = 9
	GAS.Logging.PvP_FLAG_ONGOING          = 10
	GAS.Logging.PvP_FLAG_FINISHED         = 11
	GAS.Logging.PvP_FLAG_TEAM_SWITCHED    = 12
	GAS.Logging.PvP_FLAG_INSTIGATOR_DEATH = 13
	GAS.Logging.PvP_FLAG_VICTIM_DEATH     = 14

	GAS.Logging.PvP_EVENT_ID              = 1
	GAS.Logging.PvP_PRECISE_CREATION_TIME = 2
	GAS.Logging.PvP_LAST_UPDATED          = 3
	GAS.Logging.PvP_INSTIGATOR            = 4
	GAS.Logging.PvP_INSTIGATOR_WEPS       = 5
	GAS.Logging.PvP_INSTIGATOR_DMG_TKN    = 6
	GAS.Logging.PvP_INSTIGATOR_DMG_GVN    = 7
	GAS.Logging.PvP_INSTIGATOR_TEAM       = 8
	GAS.Logging.PvP_VICTIM                = 9
	GAS.Logging.PvP_VICTIM_WEPS           = 10
	GAS.Logging.PvP_VICTIM_DMG_TKN        = 11
	GAS.Logging.PvP_VICTIM_DMG_GVN        = 12
	GAS.Logging.PvP_VICTIM_TEAM           = 13
	GAS.Logging.PvP_TOTAL_DMG             = 14
	GAS.Logging.PvP_LINKED_EVENTS         = 15
	GAS.Logging.PvP_EVENT_LOGS            = 16
	GAS.Logging.PvP_EVENT_LOGS_CHRONOLOGY = 17
	GAS.Logging.PvP_WEP_VEHICLES          = 18
	GAS.Logging.PvP_FLAGS                 = 19
	GAS.Logging.PvP_ONGOING               = 20
	GAS.Logging.PvP_INSTIGATOR_NICK       = 21
	GAS.Logging.PvP_VICTIM_NICK           = 22
	GAS.Logging.PvP_COMBAT_SCENE          = 23
	GAS.Logging.PvP_CREATION_TIMESTAMP    = 24

	GAS.Logging.PvP_SCENE_MODEL              = 1
	GAS.Logging.PvP_SCENE_POS                = 2
	GAS.Logging.PvP_SCENE_ANG                = 3
	GAS.Logging.PvP_SCENE_PLY_COLOR          = 4
	GAS.Logging.PvP_SCENE_SHOOT_POS          = 5
	GAS.Logging.PvP_SCENE_EYE_POS            = 6
	GAS.Logging.PvP_SCENE_HEAD_ANG           = 7
	GAS.Logging.PvP_SCENE_WEAPON_MDL         = 8
	GAS.Logging.PvP_SCENE_WEAPON_CLASS       = 9
	GAS.Logging.PvP_SCENE_SEQUENCE           = 10
	GAS.Logging.PvP_SCENE_VEHICLE_MODEL      = 11
	GAS.Logging.PvP_SCENE_VEHICLE_POS        = 12
	GAS.Logging.PvP_SCENE_VEHICLE_ANG        = 13
	GAS.Logging.PvP_SCENE_VEHICLE_ATTACHMENT = 14

	GAS.Logging.PvP_DAMAGE_TYPES = {
		DMG_GENERIC,
		DMG_CRUSH,
		DMG_BULLET,
		DMG_SLASH,
		DMG_BURN,
		DMG_VEHICLE,
		DMG_FALL,
		DMG_BLAST,
		DMG_CLUB,
		DMG_SHOCK,
		DMG_SONIC,
		DMG_ENERGYBEAM,
		DMG_PREVENT_PHYSICS_FORCE,
		DMG_NEVERGIB,
		DMG_ALWAYSGIB,
		DMG_DROWN,
		DMG_PARALYZE,
		DMG_NERVEGAS,
		DMG_POISON,
		DMG_RADIATION,
		DMG_DROWNRECOVER,
		DMG_ACID,
		DMG_SLOWBURN,
		DMG_REMOVENORAGDOLL,
		DMG_PHYSGUN,
		DMG_PLASMA,
		DMG_AIRBOAT,
		DMG_DISSOLVE,
		DMG_BLAST_SURFACE,
		DMG_DIRECT,
		DMG_BUCKSHOT,
		DMG_SNIPER,
		DMG_MISSILEDEFENSE
	}

	GAS.Logging.ThirdPartyAddons = {
		["ULX Admin Mod"] = {installed = function()
			return ulx ~= nil
		end, website = "https://ulyssesmod.net"},

		["ServerGuard Admin Mod"] = {installed = function()
			return SERVERGUARD ~= nil
		end, gmodstore = "1847"},

		["AWarn"] = {installed = function()
			return AWarn ~= nil
		end, gmodstore = "629"},

		["Cuffs - Handcuffs and Restraints"] = {installed = function()
			return ConVarExists("cuffs_allowbreakout")
		end, gmodstore = "910"},

		["Medic / Armor NPC"] = {installed = function()
			return MavNPCModel ~= nil
		end, workshop = "912372779"},

		["PAC3"] = {installed = function()
			return pac ~= nil
		end, workshop = "104691717"},

		["Pointshop Trading System"] = {installed = function()
			return TRADING ~= nil
		end, gmodstore = "1672"},

		["Simple Party System"] = {installed = function()
			return party ~= nil
		end, gmodstore = "2109"},

		["SprayMesh"] = {installed = function()
			return SprayMesh ~= nil
		end, workshop = "394091909"},

		["Star Wars Vehicles"] = {installed = function()
			local SWVehicles = list.Get("SWVehicles")
			return SWVehicles and table.Count(SWVehicles) > 0
		end, workshop = "1311553933"},

		["WAC Aircraft"] = {installed = function()
			return wac ~= nil
		end, workshop = "104990330"},

		["Wyozi Cinema Kit"] = {installed = function()
			return wck ~= nil
		end, gmodstore = "1471"},

		["Wyozi DJ Kit"] = {installed = function()
			return wdj ~= nil
		end, gmodstore = "1534"},

		["bWhitelist"] = {installed = function()
			return GAS.JobWhitelist ~= nil
		end, gmodadminsuite = "jobwhitelist", gmodstore = "6017"},

		["bKeycardScanner"] = {installed = function()
			return bKeycardScanner ~= nil
		end, gmodstore = "3192"},
	}

	GAS.Logging.RolesEnabled = false
	function GAS.Logging:EnableRoles()
		GAS.Logging.RolesEnabled = true
	end

	if (SERVER) then
		include("gmodadminsuite/modules/logging/sv_logging.lua")
		include("gmodadminsuite/modules/logging/sv_logscanning.lua")

		GAS.XEON:PostLoad(function()
			XEON:Init("6016", "[GAS] Billy's Logs", "2.4", "gmodadminsuite/modules/logging/sv_drm.lua", include("gmodadminsuite/modules/logging/license.lua"))
		end)
	else
		include("gmodadminsuite/modules/logging/cl_menu.lua")
		include("gmodadminsuite/modules/logging/cl_livelogs.lua")
	end

	include("gmodadminsuite/modules/logging/sh_log_formatting.lua")
	include("gmodadminsuite/modules/logging/sh_scenes.lua")

	if (CLIENT) then
		local _,ds = file.Find("gmodadminsuite/modules/logging/modules/gamemodes/*", "LUA")
		for _,d in ipairs(ds) do
			if (file.Exists("gmodadminsuite/modules/logging/modules/gamemodes/" .. d .. "/_roles.lua", "LUA")) then
				include("gmodadminsuite/modules/logging/modules/gamemodes/" .. d .. "/_roles.lua")
			end
		end

		GAS:netReceive("logging:NetworkConfig", function()
			GAS.Logging.Config = {}
			GAS.Logging.Config.OverrideMoneyFormat = net.ReadBool()
			GAS.Logging.Config.MoneyFormat = net.ReadString()
			GAS.Logging.Config.Player_RecordTeam = net.ReadBool()
			GAS.Logging.Config.Player_RecordUsergroup = net.ReadBool()
			GAS.Logging.Config.Player_RecordHealth = net.ReadBool()
			GAS.Logging.Config.Player_RecordArmor = net.ReadBool()
			GAS.Logging.Config.Player_RecordWeapon = net.ReadBool()
			GAS.Logging.Config.Player_RecordRole = net.ReadBool()
			GAS.Logging.Config.DeepStorageEnabled = net.ReadBool()

			GAS.Logging.Config.Player_RecordWeapon_DoNotRecord = {}
			for i=1,net.ReadUInt(6) do
				GAS.Logging.Config.Player_RecordWeapon_DoNotRecord[net.ReadString()] = true
			end
		end)

		GAS:InitPostEntity(function()
			GAS:netStart("logging:NetworkConfig")
			net.SendToServer()
		end)
	end
end)
--addons/gprofiler/lua/gprofiler/cl_menu.lua:
return gluapack()()
--addons/gprofiler/lua/gprofiler/sh_access.lua:
return gluapack()()
--addons/gprofiler/lua/gprofiler/profilers/entvars/cl_entvars.lua:
return gluapack()()
--addons/gprofiler/lua/gprofiler/profilers/functions/cl_functions.lua:
return gluapack()()
--addons/gprofiler/lua/gprofiler/profilers/netvars/cl_netvars.lua:
return gluapack()()
--lua/autorun/gtavfambal.lua:
return gluapack()()
--lua/autorun/inf_blackwidow.lua:
return gluapack()()
--lua/vgui/stackercontrolpresets.lua:
return gluapack()()
--lua/autorun/keegan.lua:
list.Set( "PlayerOptionsModel", "Keegan", "models/Keegan.mdl" )
player_manager.AddValidModel( "Keegan", "models/Keegan.mdl" )
player_manager.AddValidHands( "Keegan", "models/Keegan_arms.mdl", 0, "00000000" )
--addons/minigame-tool-assistant/lua/minigames/configuration.lua:
--[[--------------------------------------------
            Minigames Configuration
--------------------------------------------]]--

-- Set the main language
Minigames.Config["MainLang"] = "turkish"


-- Remove the player from the game when he joins to any game
-- he would recover his weapons after the game ends or after spawn
-- for owner, he will strip his weapons when the game begins
Minigames.Config["StripWeaponsOnGame"] = true


-- When the game begins, the player will be teleported to the game
Minigames.Config["TeleportToGame"] = true


-- Force disable the noclip when the game begins (even if the player is an admin)
Minigames.Config["ForceDisableNoclip"] = true


-- Enable this to have a blur effect in VGUI menus
-- Disabling this will help to improve performance
Minigames.Config["BlurVGUI"] = true


-- Shortcut to toggle the state of current game
-- https://wiki.facepunch.com/gmod/Enums/KEY
-- Note: You can't use the RELOAD key, that key is reserved for
-- toolgun.
Minigames.Config["ToggleGameShortcut"] = KEY_NONE


-- Owner can set the voice chat in the game
Minigames.Config["OwnerCanSetVoice"] = true

-- Enable or disable the ability for owner to request players to join the game
Minigames.Config["JoinGameCommandEnabled"] = true
Minigames.Config["JoinGameCommand"] = "/eventkatil"
Minigames.Config["JoinGameCommandTime"] = 30 -- how many seconds players can join the game

-- Teleport joined players to the game
Minigames.Config["JoinGameCommandTeleport"] = true


--[[------------------------------------
          Bypass Configuration
------------------------------------]]--

-- Use the function instead of usergroups
Minigames.Config["UseFunction"] = false


-- What Usergroup is allowed to use the toolgun
Minigames.Config["AllowUserGroup"] = {
    ["superadmin"] = true,
    ["superyetki"] = true,
    ["eventmanager"] = true,
}

Minigames.Config["AllowUserFunction"] = function(ply)
    return ply:IsAdmin()
end



--[[------------------------------------
           Sound Configuration
------------------------------------]]--
-- relative to "sound/..."

Minigames.Config["PlayMusic"] = true
Minigames.Config["PlayMusicVolume"] = 1

Minigames.Config["BackgroundMusic"] = "minigames/beethoven_virus.wav"
Minigames.Config["BackgroundMusicFast"] = "minigames/beethoven_virus_fast.wav"
Minigames.Config["PlayersToFastMusic"] = 2


Minigames.Config["PlaySounds"] = true

Minigames.Config["OnBeginGameSound"] = "minigames/onbegingame.mp3"
Minigames.Config["OnStopGameSound"] = "minigames/onwingame.mp3"

Minigames.Config["GreenLight"] = "minigames/en/green_light.mp3"
Minigames.Config["RedLight"] = "minigames/en/red_light.mp3"


Minigames.Config["BotComment"] = {
    ["Positive"] = {
        "vo/npc/male01/ok01.wav",
        "vo/npc/male01/yeah02.wav",
        "vo/npc/male01/squad_affirm04.wav",
    },

    ["Negative"] = {
        "vo/npc/male01/no02.wav",
        "vo/npc/male01/sorry01.wav",
        "vo/npc/male01/answer37.wav",
        "vo/npc/male01/answer39.wav",
    },

    ["Comments"] = {
        "vo/npc/male01/finally.wav",
        "vo/npc/male01/whoops01.wav",
        "vo/npc/male01/uhoh.wav",
        "vo/npc/male01/squad_affirm06.wav",
    }
}



--[[------------------------------------
        Global Bot Configuration
------------------------------------]]--

Minigames.Config["BotsCanTalk"] = true

Minigames.Config["BotTalkVolume"] = 75



--[[------------------------------------
         Minigames Configuration
------------------------------------]]--

Minigames.Config["WeaponsKit"] = {
    ["Half Life 2 Kit"] = {
        "weapon_crowbar", -- First item will be the default weapon when the player spawns
        "weapon_physcannon",
        "weapon_pistol",
    },
    ["Heavy weapons"] = {
        "weapon_rpg",
        "weapon_ar2",
        "weapon_crossbow",
    },
    ["Light weapons"] = {
        "weapon_smg1",
        "weapon_shotgun",
        "weapon_357",
    },
    ["Special weapons"] = {
        "weapon_frag",
        "weapon_slam",
        "weapon_stunstick",
    }
}


--[[------------------------------------
         Developer Configuration
------------------------------------]]--

-- Enable this option to prevent players from taking damage while are in a minigame
Minigames.Config["DisableDamageInGame"] = true
--addons/minigame-tool-assistant/lua/minigames/languages/turkish.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/languages/turkish.lua:
--[[--------------------------------------------
               Türkçe Çeviri
--------------------------------------------]]--

Minigames.Language["turkish"] = {
    -- Genel
    ["tool.desc"] = "Otomatik olarak mini oyunlar oluşturmak için bu aracı kullanın",
    ["tool.left"] = "Mini Oyun Oluştur - Mini oyununa oyuncu ekle/çıkar",
    ["tool.right"] = "Mini Oyun Ayarları",
    ["tool.reload"] = "Özel seçenek, örneğin: Mini oyunu duraklat",
    ["tool.singleplayer"] = "Uyarı: Tek oyunculu moddasınız, yeniden yükleme tuşu düzgün çalışmayacak",

    ["setupmenu.title"] = "Mini Oyun Aracı Asistanı - Ayarlar",
    ["setupmenu.togglegame"] = "Mevcut mini oyunu başlat/durdur",
    ["setupmenu.players"] = "Mevcut oyuncular",

    ["reward.title"] = "Ödüller",
    ["reward.select"] = "Bir ödül seç",
    ["reward.desc"] = "Ödüller mini oyunun sonunda verilir. \nKazanan oyuncu seçilen ödülü ve miktarını alacaktır.",
    ["reward.onlyone"] = "Ödül aynı %str",
    ["reward.nothing"] = "Ödül seçilmedi",
    ["reward.disabled"] = "Ödül eklemek için hazır bir oyununuz olmalı",
    ["reward.add"] = "Ödül ekle",

    ["playerlist.add"] = "Oyuncu ekle",
    ["playerlist.remove"] = "Oyuncu çıkar",
    ["playerlist.toggle"] = "Oyuncuyu değiştir",
    ["playerlist.sendtogame"] = "Oyuncuyu mini oyuna gönder",
    ["playerlist.sendtooldpos"] = "Oyuncuyu önceki konumuna gönder",
    ["playerlist.sendtospawn"] = "Oyuncuyu doğum noktasına gönder",
    ["playerlist.mute"] = "Oyuncuyu sustur",
    ["playerlist.unmute"] = "Oyuncunun sesini aç",
    ["playerlist.hearowner"] = "Oyuncular sahibi duyabilir",
    ["playerlist.muteall"] = "Tüm oyuncuları sustur",
    ["playerlist.hearself"] = "Yakınlık olmadan ses kullan",

    ["playerlist.broadcast"] = "Oyunculara mini oyuna katılmaları için duyuru oluştur",
    ["playerlist.broadcast.alreadywaiting"] = "Şu anda başka bir mini oyun sahibi oyuncu arıyor, bunu kullanmadan önce bitmesini bekleyin",
    ["playerlist.broadcast.join"] = "%ply bir mini oyun düzenliyor, sohbete şunu yazarak katılın: %str",
    ["playerlist.broadcast.gameremoved"] = "%ply'in mini oyunu iptal edildi",
    ["playerlist.broadcast.gamestarted"] = "%ply'in mini oyunu başladı, artık giriş kabul edilmiyor",

    ["minigames.title"] = "Mini Oyunlar",
    ["minigames.desc"] = "Açıklama:",
    ["minigames.gameconfig"] = "Oyun yapılandırması",
    ["minigames.playzoneconfig"] = "Oyun alanı",
    ["minigames.onjoin"] = "Oyuncu %ply oyuna katıldı",
    ["minigames.onleft"] = "Oyuncu %ply oyundan ayrıldı",
    ["minigames.onwin"] = "%ply oyunu kazandı ve %str aldı!",
    ["minigames.onlose"] = "%ply oyunu kaybetti!",
    ["minigames.gamestopped"] = "Mini oyun iptal edildi, kimse kazanmadı!",
    ["minigames.removeyourgame"] = "Başka bir oyuna geçmeden önce mevcut oyununuzu kaldırın",

    ["minigames.player.notingame"] = "Oyuncu %ply oyunda değil!",
    ["minigames.player.alreadyingame"] = "Oyuncu %ply zaten oyunda!",
    ["minigames.player.cantjoin"] = "Oyuncu %ply oyununuza katılamaz, zaten bir oyunda veya başka bir oyuna ait!",
    ["minigames.player.cantjoin.dead"] = "Oyuncu %ply öldü!",
    ["minigames.player.cantjoin.you"] = "Bu oyuna katılamazsınız!",
    ["minigames.player.cantjoin.owner"] = "Bu oyuncu oyununuza katılamaz!",

    ["minigames.error.gameisactive"] = "Silmek için önce oyununuzu durdurmalısınız!",
    ["minigames.error.gamedontexists"] = "%s mini oyunu mevcut değil!",
    ["minigames.error.gameneed"] = "Henüz bir oyun oluşturmadınız!",

    ["minigame_ammo"] = "Mühimmat",
    ["minigame_health"] = "Sağlık",
    ["minigame_spawnpoint"] = "Yeniden doğma noktası",
    ["minigame_weapon"] = "Silah",
    ["minigame_armor"] = "Zırh",

    -- Platformlar
    ["plataforms.name"] = "Platformlar",
    ["plataforms.desc"] = "Amaç düşmekten kaçınmakken, her turda giderek daha fazla platformun kaybolduğu bir platform oyunu.",
    ["plataforms.tip"] = "Oyunu duraklatmak için yeniden yükleme tuşunu (R) kullanın",
    ["plataforms.sizex"] = "Genişlik",
    ["plataforms.sizex.desc"] = "Oyunda genişlik olarak oluşturulacak platform sayısı",
    ["plataforms.sizey"] = "Uzunluk",
    ["plataforms.sizey.desc"] = "Oyunda uzunluk olarak oluşturulacak platform sayısı",
    ["plataforms.increment"] = "Tur başına artış",
    ["plataforms.increment.desc"] = "Her turda kaybolması gereken platform sayısı",
    ["plataforms.delay"] = "Gecikme",
    ["plataforms.delay.desc"] = "Platformun tamamen kaybolmadan önceki süre",
    ["plataforms.min"] = "Başlangıç (Minimum)",
    ["plataforms.min.desc"] = "Oyunun başlayacağı minimum platform yüzdesi",
    ["plataforms.max"] = "Bitiş (Maksimum)",
    ["plataforms.max.desc"] = "Kaybolması gereken maksimum platform yüzdesi",
    ["plataforms.timereaction"] = "Tepki süresi",
    ["plataforms.timereaction.desc"] = "Platform kaybolmadan önce oyuncuların tepki verme süresi",
    ["plataforms.offset"] = "Mesafe",
    ["plataforms.offset.desc"] = "Platformlar arasındaki ayrım mesafesi",
    ["plataforms.height"] = "Yükseklik",
    ["plataforms.height.desc"] = "Oyunun oluşturulacağı yükseklik",

    -- Drop Out
    ["dropout.name"] = "Düşüş",
    ["dropout.desc"] = "Platformlar sonsuza dek kaybolurken düşmekten kaçınmanın hedeflendiği bir platform oyunu.",
    ["dropout.tip"] = "Oyunu duraklatmak için yeniden yükleme tuşunu (R) kullanın",
    ["dropout.sizex"] = "Genişlik",
    ["dropout.sizex.desc"] = "Platform cinsinden oyunun genişliği",
    ["dropout.sizey"] = "Uzunluk",
    ["dropout.sizey.desc"] = "Platform cinsinden oyunun uzunluğu",
    ["dropout.increment"] = "Tur başına artış",
    ["dropout.increment.desc"] = "Her turda kaybolacak platform sayısı",
    ["dropout.delay"] = "Tur başına süre",
    ["dropout.delay.desc"] = "Bir platform kaybolduktan sonra diğerinin kaybolmasına kadar geçen süre",
    ["dropout.timereaction"] = "Tepki süresi",
    ["dropout.timereaction.desc"] = "Platform kaybolmadan önce oyuncuların tepki verme süresi",
    ["dropout.offset"] = "Mesafe",
    ["dropout.offset.desc"] = "Platformlar arasındaki ayrım mesafesi",
    ["dropout.height"] = "Yükseklik",
    ["dropout.height.desc"] = "Oyunun oluşturulacağı yükseklik",

    -- Kırmızı Işık Yeşil Işık
    ["cigarrillo43.name"] = "Kırmızı Işık Yeşil Işık",
    ["cigarrillo43.desc"] = "Oyuncular sona ulaşmak için yolu geçmelidir, sona ilk ulaşan oyuncu kazanır.",
    ["cigarrillo43.tip"] = "Kırmızı ve yeşil ışığı değiştirmek için yeniden yükleme tuşunu (R) kullanın",
    ["cigarrillo43.sizex"] = "Genişlik",
    ["cigarrillo43.sizex.desc"] = "Oyunda genişlik olarak oluşturulacak platform sayısı",
    ["cigarrillo43.sizey"] = "Uzunluk",
    ["cigarrillo43.sizey.desc"] = "Oyunda uzunluk olarak oluşturulacak platform sayısı",
    ["cigarrillo43.safetime"] = "Tepki süresi",
    ["cigarrillo43.safetime.desc"] = "Kırmızı Işık denildiğinde oyuncuların tepki verip durması için ne kadar süre (saniye cinsinden) var",
    ["cigarrillo43.height"] = "Yükseklik",
    ["cigarrillo43.height.desc"] = "Oyunun oluşturulacağı yükseklik",
    ["cigarrillo43.onespawn"] = "Tek doğuş noktası",
    ["cigarrillo43.onespawn.desc"] = "Etkinleştirildiğinde, oyuncular tek bir doğuş noktasında belirecek",

    -- Simon Diyor ki
    ["simonsays.name"] = "Simon Diyor ki",
    ["simonsays.desc"] = "Oyuncular ekranlarda gösterilen renkleri takip etmelidir, ayakta kalan son oyuncu kazanır.",
    ["simonsays.tip"] = "Oyunu duraklatmak için yeniden yükleme tuşunu (R) kullanın",
    ["simonsays.sizex"] = "Genişlik",
    ["simonsays.sizex.desc"] = "Oyunda genişlik olarak oluşturulacak platform sayısı",
    ["simonsays.sizey"] = "Uzunluk",
    ["simonsays.sizey.desc"] = "Oyunda uzunluk olarak oluşturulacak platform sayısı",
    ["simonsays.offset"] = "Mesafe",
    ["simonsays.offset.desc"] = "Platformlar arasındaki ayrım mesafesi",
    ["simonsays.timereaction"] = "Tepki süresi",
    ["simonsays.timereaction.desc"] = "Platform kaybolmadan önce oyuncuların tepki verme süresi",
    ["simonsays.substracttimereaction"] = "Daha hızlı tepki süresi",
    ["simonsays.substracttimereaction.desc"] = "Her turda tepki süresinin ne kadar azaltılacağı",
    ["simonsays.delay"] = "Tur başına süre",
    ["simonsays.delay.desc"] = "Platformun tamamen kaybolmadan önceki süre (Bu süre 'Çıkarma süresi'nden etkilenir)",
    ["simonsays.substracttime"] = "Daha hızlı turlar",
    ["simonsays.substracttime.desc"] = "Her turda oyunun ne kadar saniye hızlanacağı",
    ["simonsays.height"] = "Yükseklik",
    ["simonsays.height.desc"] = "Oyunun oluşturulacağı yükseklik",
    ["simonsays.amountcolors"] = "Renk sayısı",
    ["simonsays.amountcolors.desc"] = "Oyunda kullanılacak renk sayısı",
    ["simonsays.samecolors"] = "Aynı renkler",
    ["simonsays.samecolors.desc"] = "Etkinleştirildiğinde, her tur için renkler aynı kalacak",

    -- Rus Ruleti
    ["russianroulette.name"] = "Rus Ruleti",
    ["russianroulette.desc"] = "Şansa dayalı bir mini oyun, oyuncuların ateş etme veya pas geçme olmak üzere 2 seçeneği vardır, hayatta kalan son oyuncu kazanır.",
    ["russianroulette.tip"] = "Oyuncular sıra kendilerine geldiğinde bir silah alırlar.",
    ["russianroulette.decisiontime"] = "Karar süresi",
    ["russianroulette.decisiontime.desc"] = "Oyuncuların ateş edip etmeyeceğine karar verme süresi (Sadece karar süresi etkinse)",
    ["russianroulette.magazinesize"] = "Şarjör boyutu",
    ["russianroulette.magazinesize.desc"] = "Silahın şarjöründe kaç mermi olacak",
    ["russianroulette.resetonfire"] = "Ateşleme sıfırlama",
    ["russianroulette.resetonfire.desc"] = "Bir oyuncu silahı ateşlediğinde, şarjör mermi konumunu değiştirecek ve pozisyon sıfırlanacak",
    ["russianroulette.header.bots"] = "Botlar",
    ["russianroulette.bots"] = "Bot Sayısı",
    ["russianroulette.bots.desc"] = "Oyunda kaç bot olacak",
    ["russianroulette.hud.primaryattack"] = "Şansınızı silahı ateşleyerek test edin",
    ["russianroulette.hud.secondaryattack"] = "Riski almayın ve sıranızı geçin",
    ["russianroulette.hud.cantskip"] = "Sıranızı geçemezsiniz",

    -- Kutu Oyunu
    ["boxgame.name"] = "Kutular",
    ["boxgame.desc"] = "Kutu oyunu, oyuncuların kutular tarafından ezilmekten kaçınmasını içerir, ayakta kalan son oyuncu kazanır.",
    ["boxgame.tip"] = "Kutular sadece kırmızı olduğunda öldürür, oyuncular dokunur dokunmaz ölür.",
    ["boxgame.delaybetweendrops"] = "Düşen kutular arası süre",
    ["boxgame.delaybetweendrops.desc"] = "Kutuların her tur arasında belirmesi ne kadar sürecek",
    ["boxgame.dropdelay"] = "Düşme süresi",
    ["boxgame.dropdelay.desc"] = "Kutuların düşmesi ne kadar sürecek",
    ["boxgame.dropreaction"] = "Tepki süresi",
    ["boxgame.dropreaction.desc"] = "Oyuncuların kutulara tepki vermesi için ne kadar süre (saniye cinsinden) var",
    ["boxgame.startboxes"] = "Başlangıç kutuları",
    ["boxgame.startboxes.desc"] = "Oyunun başında düşecek kutu sayısı",
    ["boxgame.maxboxes"] = "Maksimum kutu",
    ["boxgame.maxboxes.desc"] = "Oyunda düşecek maksimum kutu sayısı. (Tur başına artacak kutu sayısıyla ilişkilidir)",
    ["boxgame.addmoreboxes"] = "Kutu ekle",
    ["boxgame.addmoreboxes.desc"] = "Her turda eklenecek kutu sayısı",
    ["boxgame.sizex"] = "Genişlik",
    ["boxgame.sizex.desc"] = "Oyunda genişlik olarak oluşturulacak platform sayısı",
    ["boxgame.sizey"] = "Uzunluk",
    ["boxgame.sizey.desc"] = "Oyunda uzunluk olarak oluşturulacak platform sayısı",
    ["boxgame.offset"] = "Mesafe",
    ["boxgame.offset.desc"] = "Platformlar arasındaki ayrım mesafesi",
    ["boxgame.height"] = "Yükseklik",
    ["boxgame.height.desc"] = "Oyunun oluşturulacağı yükseklik",

    -- Ölüm Maçı
    ["deathmatch.name"] = "Ölüm Maçı",
    ["deathmatch.desc"] = "Diğer oyuncuları öldürmenin hedeflendiği bir ölüm maçı mini oyunu, en çok öldüren oyuncu kazanır.",
    ["deathmatch.tip"] = "Oyunu duraklatmak için yeniden yükleme tuşunu (R) kullanın",
    ["deathmatch.insufficientspawns"] = "Oyunu başlatmak için en az %s yeniden doğma noktasına ihtiyacınız var",
    ["deathmatch.leaderboard"] = "Lider Tablosu",
    ["deathmatch.leaderboard.andmore"] = "ve %str daha fazlası",
    ["deathmatch.tall"] = "Yükseklik",
    ["deathmatch.tall.desc"] = "Lider tablosunun ne kadar yüksek olacağı",
    ["deathmatch.wide"] = "Genişlik",
    ["deathmatch.wide.desc"] = "Lider tablosunun ne kadar geniş olacağı",
    ["deathmatch.heightoffset"] = "Yükseklik",
    ["deathmatch.heightoffset.desc"] = "Lider tablosunun yerden ne kadar yüksekte görüneceği",
    ["deathmatch.angleoffset"] = "Yön",
    ["deathmatch.angleoffset.desc"] = "Lider tablosunun hangi yöne bakacağı",
    ["deathmatch.winbytime"] = "Zamanla kazan",
    ["deathmatch.winbytime.desc"] = "Etkinleştirildiğinde, zamanın sonunda en çok öldürmeye sahip oyuncu kazanır.\nDevre dışı bırakıldığında, öldürme sayısına ulaşan oyuncu kazanır.",
    ["deathmatch.time"] = "Süre",
    ["deathmatch.time.desc"] = "Oyunun ne kadar süreceği",
    ["deathmatch.killstowin"] = "Kazanmak için gereken öldürmeler",
    ["deathmatch.killstowin.desc"] = "Oyunu kazanmak için gereken öldürme sayısı (Sadece \"Zamanla kazan\" devre dışıysa çalışır)",
    ["deathmatch.falldamage"] = "Düşme hasarı",
    ["deathmatch.falldamage.desc"] = "Oyuncular düşme hasarı alır",
    ["deathmatch.respawntime"] = "Yeniden doğma süresi",
    ["deathmatch.respawntime.desc"] = "Bir oyuncunun yeniden doğması ne kadar sürecek",
    ["deathmatch.respawnprotection"] = "Yeniden doğma koruması",
    ["deathmatch.respawnprotection.desc"] = "Bir oyuncunun yeniden doğduğunda sahip olacağı koruma süresi",
    ["deathmatch.entitysettings"] = "Varlıklar",
    ["deathmatch.spawnentitytype"] = "Varlık türü",
    ["deathmatch.spawnentitytype.desc"] = "Mini oyun için oluşturacağınız varlık türü",
    ["deathmatch.spawnentitytypeoffset"] = "Yükseklik",
    ["deathmatch.spawnentitytypeoffset.desc"] = "Varlığın yerden ne kadar yüksekte görüneceği",
    ["deathmatch.spawnpointrotation"] = "Yeniden doğma noktası açısı",
    ["deathmatch.spawnpointrotation.desc"] = "Oyuncu belirdiğinde yeniden doğma noktasının hangi yöne bakacağı",
    ["deathmatch.health"] = "Sağlık",
    ["deathmatch.health.desc"] = "Oyuncuların sağlık topladığında kazanacağı can miktarı",
    ["deathmatch.healthrespawn"] = "Sağlık (Yeniden doğma süresi)",
    ["deathmatch.healthrespawn.desc"] = "Sağlığın yeniden belirmesi ne kadar sürecek",
    ["deathmatch.armor"] = "Zırh",
    ["deathmatch.armor.desc"] = "Oyuncuların zırh topladığında kazanacağı zırh miktarı",
    ["deathmatch.armorrespawn"] = "Zırh (Yeniden doğma süresi)",
    ["deathmatch.armorrespawn.desc"] = "Zırhın yeniden belirmesi ne kadar sürecek",
    ["deathmatch.ammo"] = "Mühimmat",
    ["deathmatch.ammo.desc"] = "Oyuncuların mühimmat topladığında kazanacağı mühimmat miktarı",
    ["deathmatch.ammorespawn"] = "Mühimmat (Yeniden doğma süresi)",
    ["deathmatch.ammorespawn.desc"] = "Mühimmatın yeniden belirmesi ne kadar sürecek",
    ["deathmatch.weaponskit"] = "Silah seti",
    ["deathmatch.weaponskit.desc"] = "BİNBONA ULAŞIN Oyunda belirecek silah seti, kategoriler ve silahlar eklemek için \"configuration.lua\" dosyanızı düzenleyin"
}
--addons/minigame-tool-assistant/lua/minigames/enum.lua:
--[[--------------------------------------------
              Minigame Enumeration
--------------------------------------------]]--

Minigames.Enum = Minigames.Enum or {}

-- Minigames.Enum["<Alias Name> <Hook Name>"] = function(GameScript, ...)

--[[----------------------------
           Kill Methods
----------------------------]]--

Minigames.Enum["KILL_ONTOUCH"] = function(self, ent)
    if not ( IsValid(ent) and ent:IsPlayer() ) then return end

    local TriggerOwner = self:Getowning_ent()
    local GameScript = Minigames.GetOwnerGame( TriggerOwner )

    local InGame, Owner = Minigames.PlayerInGame( ent )
    if InGame and ( Owner == TriggerOwner ) then
        if GameScript:IsActive() then
            ent:Kill()
        else
            if GetGlobalInt("eventkaybetme", 2) == 1 then 
                GameScript:RemovePlayer( ply )
            elseif GetGlobalInt("eventkaybetme", 2) == 2 then 
                GameScript:TeleportPlayer( ent )
                GameScript:RemovePlayer( ply )
            elseif GetGlobalInt("eventkaybetme", 2) == 3 then 
                ent:Kill()
                GameScript:RemovePlayer( ply )
            end 
 
        end
    end
end

Minigames.Enum["KILL_ONKEYPRESS KeyPress"] = function(ply, key)
    local InGame, Owner = Minigames.PlayerInGame( ply )
    if ply == Owner then return end

    local GameScript = Minigames.GetOwnerGame( Owner )
    if not GameScript then return end

    if InGame and GameScript:IsLookingBack() and GameScript.KeyPressKill[key] then
        ply:Kill()
    end
end



--[[----------------------------
           Win Methods
----------------------------]]--

Minigames.Enum["WIN_GENERIC"] = function(GameScript)
    local Players = GameScript:GetPlayers(true)

    if #Players > 0 then
        GameScript:SetPlayersWinner( Players[1] )
    end
end

Minigames.Enum["WIN_LASTSURVIVOR"] = function(GameScript)
    local Players = GameScript:GetPlayers(true)

    if #Players == 1 then
        GameScript:SetPlayerWinner( Players[1] )
        GameScript:StopGame()
    elseif #Players < 1 then
        GameScript:StopGame()
    end
end

Minigames.Enum["WIN_ONTOUCHTRIGGER"] = function(self, ent)
    if not ( self:IsActive() ) then return end
    if not ( IsValid(ent) and ent:IsPlayer() ) then return end

    local TriggerOwner = self:Getowning_ent()
    local GameScript = Minigames.GetOwnerGame( TriggerOwner )

    local InGame, Owner = Minigames.PlayerInGame( ent )
    if InGame and ( Owner == TriggerOwner ) then
        GameScript:SetPlayerWinner( ent )
        GameScript:StopGame()
    end
end

Minigames.Enum["WIN_RUSSIANROULETTE"] = function(GameScript)
    local Players = GameScript:GetPlayers(true)
    local Bots = GameScript:GetAllBots()

    if #Players == 1 and #Bots == 0 then
        GameScript:SetPlayerWinner( Players[1] )
    end

    if ( #Players == 0 and #Bots > 0 ) and not GameScript.OnlyBotsPlaying then
        GameScript:SetPlayerWinner( Bots[1] )
    end

    if GameScript.OnlyBotsPlaying and #Bots == 1 then
        GameScript:SetPlayerWinner( Bots[1] )
    end
end



--[[----------------------------
           Extra Methods
----------------------------]]--

Minigames.Enum["GetFallDamage"] = function(ply, speed)
    local InGame, Owner = Minigames.PlayerInGame( ply )
    if InGame then
        local GameScript = Minigames.GetOwnerGame( Owner )
        if GameScript:IsActive() then
            return ply:Health()
        end
    end
end

Minigames.Enum["PostPlayerDeath"] = function(ply)
    local InGame, Owner = Minigames.PlayerInGame( ply )
    if InGame then
        local GameScript = Minigames.GetOwnerGame( Owner )
        GameScript:RemovePlayer( ply )
    end
end



Minigames.Enum["STOP_ONNOBODY PostPlayerDeath"] = function(ply)
    local InGame, Owner = Minigames.PlayerInGame( ply )
    if InGame then
        local GameScript = Minigames.GetOwnerGame( Owner )
        GameScript:RemovePlayer( ply )

        if #GameScript:GetPlayers(true) == 0 then
            GameScript:StopGame()
        end
    end
end

Minigames.Enum["RUSSIANROULETTE PostPlayerDeath"] = function(ply)
    local InGame, Owner = Minigames.PlayerInGame( ply )
    if not InGame then return end

    local GameScript = Minigames.GetOwnerGame( Owner )
    if GameScript:GetGameID() ~= "russianroulette" then return end

    GameScript:RemovePlayer( ply )

    if GameScript.MainGameTimer then
        local Variable = GameScript.MainGameTimer:GetVariable()

        for k, inPlayer in ipairs(Variable.Players) do
            if ( inPlayer == ply ) then
                table.remove(Variable.Players, k)
                break
            end
        end
    end
end

Minigames.Enum["DEATHMATCH PlayerDeath"] = function(Victim, Inflictor, Attacker)
    local VictimInGame, VictimOwner = Minigames.PlayerInGame( Victim )
    if not VictimInGame then return end

    local GameScript = Minigames.GetOwnerGame( VictimOwner )
    if GameScript:GetGameID() ~= "deathmatch" then return end

    local AttackerInGame, AttackerOwner = Minigames.PlayerInGame( Attacker )
    if not AttackerInGame then return end

    if ( VictimOwner ~= AttackerOwner ) then return end
    if ( Victim == Attacker ) then return end

    GameScript:AddPoint( Attacker )
end

Minigames.Enum["DEATHMATCH PlayerSelectSpawn"] = function(ply)
    local InGame, Owner = Minigames.PlayerInGame( ply )
    if not InGame then return end

    local GameScript = Minigames.GetOwnerGame( Owner )
    if GameScript:GetGameID() ~= "deathmatch" then return end

    return GameScript:SelectSpawnPoint( ply )
end

Minigames.Enum["DEATHMATCH PlayerSpawn"] = function(ply)
    local InGame, Owner = Minigames.PlayerInGame( ply )
    if not InGame then return end

    local GameScript = Minigames.GetOwnerGame( Owner )
    if GameScript:GetGameID() ~= "deathmatch" then return end

    timer.Simple(0, function()
        ply:StripWeapons()
        ply:Give(GameScript.WeaponDefault)
        ply:SelectWeapon(GameScript.WeaponDefault)
    end)
end

Minigames.Enum["DEATHMATCH GetFallDamage"] = function(ply)
    local InGame, Owner = Minigames.PlayerInGame( ply )
    if not InGame then return end

    local GameScript = Minigames.GetOwnerGame( Owner )
    if GameScript:GetGameID() ~= "deathmatch" then return end

    if not GameScript.FallDamageEnabled then
        return 0
    end
end
--addons/minigame-tool-assistant/lua/minigames/vgui/gameconfig.lua:
--[[--------------------------------------------
        Minigame Setup Menu - Game Config
--------------------------------------------]]--

local Gray = Color(170, 170, 170)
local Grayest = Color(170, 170, 170, 40)
local Background = Color(30, 30, 30, 180)
local ConfigBackground = Color(60, 60, 60, 150)

local function GetPhraseText(Str, GameID)
    if string.sub( Str, 1, 1 ) == "#" then
        Str = Minigames.GetPhrase( GameID .. ".header." .. string.sub( Str, 2 ) )
    elseif string.sub( Str, 1, 1 ) == "!" then
        Str = Minigames.GetPhrase( "minigames." .. string.sub( Str, 2 ) )
    end

    return Minigames.GetPhrase( Str )
end


--[[----------------------------
           Config Menu
----------------------------]]--

local CONFIG = {}

function CONFIG:Init()
    self.Title = self:Add("DLabel")
    self.Title:SetText("Template")
    self.Title:SetFont("Minigames.Text")
    self.Title:SetTextColor(color_white)
    self.Title:Dock(TOP)
    self.Title:DockMargin(5, 5, 5, 5)
    self.Title:SetTall(20)
    self.Title:SetContentAlignment(4)

    self.Setting = self:Add("Panel")
    self.Setting:Dock(TOP)
    self.Setting:DockMargin(10, 0, 10, 0)

    local HorizontalLine = self:Add("Panel")
    HorizontalLine:Dock(TOP)
    HorizontalLine:DockMargin(4, 4, 4, 4)
    HorizontalLine:SetTall(1)
    HorizontalLine.Paint = function(_, w, h)
        surface.SetDrawColor(Grayest)
        surface.DrawRect(0, 0, w, h)
    end

    self.Description = self:Add("DLabel")
    self.Description:SetText("Template")
    self.Description:SetFont("Minigames.Text")
    self.Description:SetTextColor(color_white)
    self.Description:Dock(TOP)
    self.Description:DockMargin(5, 0, 10, 5)
    self.Description:SetWrap(true)
    self.Description:SetAutoStretchVertical(true)
end

function CONFIG:Paint(w, h)
    draw.RoundedBox(4, 0, 0, w, h, ConfigBackground)
end

function CONFIG:SetConfig(ConfigData, GameID)
    self.Title:SetText( Minigames.GetPhrase(GameID .. "." .. ConfigData["Name"]) )
    self.Description:SetText( Minigames.GetPhrase(GameID .. "." .. ConfigData["Name"] .. ".desc") )
    local Convar = GetConVar( "minigames_" .. GameID .. "_" .. ConfigData["Name"] )

    if ConfigData["Config"]["type"] == "boolean" then
        local Checkbox = self.Setting:Add("DCheckBoxLabel")
        Checkbox:SetText("")
        Checkbox:SetValue(Convar:GetBool())
        Checkbox:Dock(LEFT)
        Checkbox:DockMargin(5, 0, 5, 0)

        Checkbox.OnChange = function(_, Value)
            Convar:SetString(Value and 1 or 0)
        end
    elseif ConfigData["Config"]["type"] == "table" then
        local Dropdown = self.Setting:Add("DComboBox")
        Dropdown:Dock(FILL)
        Dropdown:DockMargin(5, 0, 5, 0)

        for Key, Value in ipairs(ConfigData["Config"]["def"]) do
            Dropdown:AddChoice( GetPhraseText(Value, GameID), Key )
        end

        Dropdown:ChooseOptionID( Convar:GetInt() )

        Dropdown.OnSelect = function(_, Value)
            Convar:SetInt(Value)
        end
    else

        local ValueBackground = self.Setting:Add("Panel")
        ValueBackground:Dock(RIGHT)
        ValueBackground:SetWide(30)

        ValueBackground.Paint = function(_, w, h)
            surface.SetDrawColor(60, 60, 60, 150)
            surface.DrawRect(0, 0, w, h)

            surface.SetDrawColor(Gray)
            surface.DrawOutlinedRect(0, 0, w, h)
        end

        local ValueEditor = vgui.Create("DTextEntry", ValueBackground)
        ValueEditor:SetTextColor(color_white)
        ValueEditor:SetContentAlignment(6)
        ValueEditor:Dock(FILL)
        ValueEditor:SetPaintBackground(false)
        ValueEditor:SetNumeric(true)
        ValueEditor:SetValue( math.Round(Convar:GetFloat(), ConfigData["Config"]["dec"]) )
        ValueEditor:SetUpdateOnType(true)
        ValueEditor:SetTooltip("Press Enter to apply")

        local CustomSlider = self.Setting:Add("DSlider")
        CustomSlider:Dock(FILL)
        CustomSlider:DockMargin(5, 0, 10, 0)
        CustomSlider:SetLockY(0.5)
        CustomSlider:SetSlideX( math.Round(Convar:GetFloat(), ConfigData["Config"]["dec"]) )
        CustomSlider:SetTrapInside(true)

        local Scratch = self.Setting:Add("DNumberScratch")
        Scratch:Dock(LEFT)
        Scratch:SetWide(16)
        Scratch:SetDecimals(ConfigData["Config"]["dec"])
        Scratch:SetValue( math.Round(Convar:GetFloat(), ConfigData["Config"]["min"]) )
        Scratch:SetMin(ConfigData["Config"]["min"])
        Scratch:SetMax(ConfigData["Config"]["max"])
        Scratch:SetConVar(Convar:GetName())

        Scratch:SetFraction( Convar:GetFloat() )

        CustomSlider.Paint = function(SubSelf, w, h)
            surface.SetDrawColor(Gray)
            surface.DrawRect(7, h / 2 - 1, w - 14, 1)

            surface.SetDrawColor(Gray)
            surface.DrawRect(7, h / 2 + 4, 1, 4)
            for i = 1, 8 do
                surface.DrawRect(8 + i * (w - 16) / 8, h / 2 + 4, 1, 4)
            end
        end

        local NoLoop = false
        ValueEditor.OnEnter = function(SubSelf)
            if NoLoop then NoLoop = false return end

            NewValue = math.Clamp(tonumber(SubSelf:GetValue()), ConfigData["Config"]["min"], ConfigData["Config"]["max"])

            CustomSlider:SetSlideX(NewValue)
            Scratch:SetValue(NewValue)
            ValueEditor:SetValue(NewValue)
            NoLoop = true
        end

        if ConfigData["Config"]["dec"] == 0 then
            Scratch.OnValueChanged = function(_, Value)
                CustomSlider:SetSlideX( (Value - ConfigData["Config"]["min"]) / (ConfigData["Config"]["max"] - ConfigData["Config"]["min"]) )
                ValueEditor:SetValue( math.floor(Value) )
            end
        else
            Scratch.OnValueChanged = function(_, Value)
                CustomSlider:SetSlideX( (Value - ConfigData["Config"]["min"]) / (ConfigData["Config"]["max"] - ConfigData["Config"]["min"]) )
                ValueEditor:SetValue( math.Round(Value, ConfigData["Config"]["dec"]) )
            end
        end

        CustomSlider.TranslateValues = function(SubSelf, x, y)
            ValueEditor:SetValue( math.Round( Lerp(x, ConfigData["Config"]["min"], ConfigData["Config"]["max"]), ConfigData["Config"]["dec"] ) )
            Scratch:SetValue( ValueEditor:GetValue() )
            return x, y
        end

        --[[
        NSlider.OnValueChanged = function(_, Value)
            RunConsoleCommand("minigame_" .. GameID .. "_" .. string.lower(ConfigData["Name"]), Value)
        end
        --]]
    end
end

function CONFIG:OnSizeChanged(w, h)
    self:SizeToChildren(false, true)
end

vgui.Register("Minigames.Config", CONFIG, "DPanel")



--[[----------------------------
            Main Menu
----------------------------]]--

local PANEL = {}

function PANEL:Init()
    self.Container = vgui.Create("Panel", self)

    self.GameTargetConvar = GetConVar("minigames_game")

    self.GameList = self:Add("DComboBox")
    self.GameList:Dock(TOP)
    self.GameList:DockMargin(5, 5, 5, 5)
    self.GameList:SetValue( Minigames.GetPhrase("minigames.selectone") )
    self.GameList:SetSortItems(false)

    local TargetGame = self.GameTargetConvar:GetString()
    local ChoiceValue, ChoiceIndex
    for GameID, GameData in pairs(Minigames.Games) do
        local index = self.GameList:AddChoice( Minigames.GetPhrase(GameID .. ".name"), GameID )

        if GameID == TargetGame then
            ChoiceValue = Minigames.GetPhrase(GameID .. ".name")
            ChoiceIndex = index
        end
    end

    self.Header = vgui.Create("DLabel", self.Container)
    self.Header:SetText( Minigames.GetPhrase("minigames.selectone") )
    self.Header:SetFont("Minigames.Title")

    self.Description = vgui.Create("DLabel", self.Container)
    self.Description:SetText("")
    self.Description:SetFont("Minigames.Text")
    self.Description:SetWrap(true)
    self.Description:SetAutoStretchVertical(true)

    self.GameConfig = vgui.Create("DScrollPanel", self.Container)
    self.GameConfig:Dock(FILL)
    self.GameConfig:DockMargin(5, 5, 5, 5)
    self.GameConfig:DockPadding(5, 5, 5, 5)
    self.GameConfig.Paint = function(_, w, h)
        draw.RoundedBox(4, 0, 0, w, h, Background)
    end

    self.GameConfig:GetVBar().Paint = nil

    if ChoiceValue then
        self.GameList:ChooseOptionID(ChoiceIndex)
        self:SetGameID(TargetGame)
        self.GameTargetConvar:SetString(TargetGame)
    end

    self.GameList.OnSelect = function(_, _, _, Value)
        self:SetGameID(Value, true)
        self.GameTargetConvar:SetString(Value)
    end

    self.GameList:SetEnabled( Minigames.GetOwnerGame( LocalPlayer() ) == nil )
    if not self.GameList:IsEnabled() then
        self.GameList:SetTooltip(Minigames.GetPhrase("minigames.removeyourgame"))
    end
end

function PANEL:Update()
    self.GameConfig:Clear()
    if not self.GameData then return end

    local GameID = self.GameData:GetGameID()
    self.Header:SetText( Minigames.GetPhrase(GameID .. ".name") )
    self.Description:SetText( Minigames.GetPhrase(GameID .. ".desc") )

    local Configs = self.GameData:GetAllConfig()
    for _, ConfigData in ipairs(Configs) do

        if ConfigData["Header"] then
            local Header = self.GameConfig:Add("DLabel")
            Header:SetText(GetPhraseText(ConfigData["Name"], GameID))
            Header:SetFont("Minigames.Title")
            Header:Dock(TOP)
            Header:SetTall(32)
            Header:DockMargin(10, 15, 5, 5)
            Header:SetTextColor(color_white)

        else
            local Config = vgui.Create("Minigames.Config")
            Config:SetConfig(ConfigData, GameID)
            Config:Dock(TOP)
            Config:DockMargin(10, 0, 10, 5)
            Config:DockPadding(5, 5, 5, 5)
            self.GameConfig:AddItem(Config)
        end

    end

    local EmptySpace = self.GameConfig:Add("Panel")
    EmptySpace:Dock(TOP)
    EmptySpace:DockMargin(5, 5, 5, 5)
    EmptySpace:SetTall(12)

    timer.Simple(.07, function()
        for _, Setting in ipairs(self.GameConfig:GetCanvas():GetChildren()) do
            if Setting:GetName() ~= "Minigames.Config" then continue end
            Setting:SizeToChildren(false, true)
        end
        timer.Simple(.07, function()
            self.GameConfig:GetVBar():SetScroll( GetGlobalInt("minigames_scrollpos", 0) )
            for _, Setting in ipairs(self.GameConfig:GetCanvas():GetChildren()) do
                if Setting:GetName() ~= "Minigames.Config" then continue end
                Setting:SizeToChildren(false, true)
            end
        end)
    end)
end

function PANEL:SetGameID(ID, ClearScroll)
    local GameData = Minigames.Games[ID]

    if ClearScroll then
        SetGlobalInt("minigames_scrollpos", 0)
    end

    self.GameData = GameData
    self:Update()
end

function PANEL:SaveScroll()
    SetGlobalInt("minigames_scrollpos", self.GameConfig:GetVBar():GetScroll()) -- for some reason, the game remove the old variable
end

function PANEL:PostInit()
    self.Header:Dock(TOP)
    self.Header:DockMargin(5, 5, 5, 5)
    self.Header:SetWrap(true)
    self.Header:SetContentAlignment(5)
    self.Header:SetTextColor(color_white)

    self.Description:Dock(TOP)
    self.Description:SetTall(32)
    self.Description:DockMargin(5, 0, 5, 5)
    self.Description:SetTextColor(color_white)
end

vgui.Register("Minigames.GameConfig", PANEL, "Panel")
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/base_cl.lua:
--[[--------------------------------------------
        Minigame Games Module Client-Side
--------------------------------------------]]--

--[[----------------------------
         Event Functions
----------------------------]]--

function MinigameObject:DrawHUD()
    -- Anything you want to draw on the HUD
end


--[[----------------------------
      Shared Compatibility
----------------------------]]--

function MinigameObject:AddHook() end
function MinigameObject:OnPlayerChanged() end


--[[----------------------------
    All Networking Receivers
----------------------------]]--

net.Receive("Minigames.TogglePlayer", function()
    local PlayerTarget = net.ReadPlayer()
    local Owner = net.ReadPlayer()
    local State = net.ReadBool()

    hook.Run("Minigames.TogglePlayer", PlayerTarget, Owner, State)
end)

net.Receive("Minigames.GameToggle", function()
    local Owner = net.ReadEntity()
    local GameStarted = net.ReadBool()

    local GameScript = Minigames.GetOwnerGame(Owner)
    if GameScript == nil then
        Minigames.ThrowError("GameScript of Owner is nil", Owner, "MinigameObject", true)
    end

    if GameStarted then
        hook.Run("Minigames.GameStart", Owner, GameScript)
    else
        hook.Run("Minigames.GameStop", Owner, GameScript)
    end
end)
--addons/minigame-tool-assistant/lua/minigames/rewards/rank.lua:
local Reward = Minigames.CreateNewReward()

Reward:SetName("[ULX] Give usergroup")
Reward:SetNameAmount(function(usergroup)
    return "rank " .. usergroup
end)

Reward:SetIcon("minigames/icons/ulx_rank.png")

Reward:SetFunctionReward(function(owner, ply, usergroup)
    -- This prevents the event owner to give a rank higher than his own
    owner:ConCommand("ulx adduserid " .. ply:SteamID() .. " " .. usergroup)
end)

local Ranks = {}
if ULib then
    for rank, _ in pairs( ULib.ucl.groups ) do
        table.insert(Ranks, rank)
    end
else
    table.insert(Ranks, "user")
    table.insert(Ranks, "admin")
    table.insert(Ranks, "superadmin")
end

Reward:AddArgument({ --> usergroup
    ["Name"] = "Usergroup",
    ["Type"] = "List",
    ["Options"] = Ranks,
    ["Default"] = "user"
})

Minigames.RegisterReward(Reward)
--addons/mayor_voting/lua/panels/cl_votingpanel.lua:
return gluapack()()
--addons/mayor_voting/lua/panels/cl_playericon.lua:
local PANEL = {}

AccessorFunc( PANEL, "m_strModelName", 		"ModelName" )
AccessorFunc( PANEL, "m_iSkin", 			"SkinID" )
AccessorFunc( PANEL, "m_strBodyGroups", 	"BodyGroup" )
AccessorFunc( PANEL, "m_strIconName", 		"IconName" )


--[[---------------------------------------------------------
   Name: Paint
-----------------------------------------------------------]]
function PANEL:Init()

	self:SetText( "" )
	
	self.Icon = vgui.Create( "ModelImage", self )
	self.Icon:SetMouseInputEnabled( false )
	self.Icon:SetKeyboardInputEnabled( false )
	
	self:SetSize( 64, 64 )	
	
	self.m_strBodyGroups = "000000000";

end

function PANEL:DoRightClick()

	local pCanvas = self:GetSelectionCanvas()
	if ( IsValid( pCanvas ) && pCanvas:NumSelectedChildren() > 0 ) then
		return hook.Run( "SpawnlistOpenGenericMenu", pCanvas )
	end

	self:OpenMenu()
end

function PANEL:Paint( w, h )

	if ( !self.Hovered ) then return end
	
	//derma.SkinHook( "Paint", "Shadow", self, w, h )

end

function PANEL:PerformLayout()
	
	self.Icon:StretchToParent( 0, 0, 0, 0 )

end

function PANEL:SetSpawnIcon( name )
	self.m_strIconName = name
	self.Icon:SetSpawnIcon( name )
end

function PANEL:SetBodyGroup( k, v )

	if ( k < 0 ) then return end
	if ( k > 9 ) then return end
	if ( v < 0 ) then return end
	if ( v > 9 ) then return end
	
	self.m_strBodyGroups = self.m_strBodyGroups:SetChar( k+1, v )

end

function PANEL:SetModel( mdl, iSkin, BodyGorups )

	if (!mdl) then debug.Trace() return end

	self:SetModelName( mdl )
	self:SetSkinID( iSkin )
	
	if ( tostring(BodyGorups):len() != 9 ) then
		BodyGorups = "000000000"
	end
	
	self.m_strBodyGroups = BodyGorups;

	self.Icon:SetModel( mdl, iSkin, BodyGorups )
	
	if ( iSkin && iSkin > 0 ) then
		self:SetToolTip( Format( "%s (Skin %i)", mdl, iSkin+1 ) )
	else
		self:SetToolTip( Format( "%s", mdl ) )
	end

end

function PANEL:RebuildSpawnIcon()

	self.Icon:RebuildSpawnIcon()

end

function PANEL:RebuildSpawnIconEx( t )

	self.Icon:RebuildSpawnIconEx( t )

end

function PANEL:SkinChanged( i )

	self:SetSkinID( i )
	self:SetModel( self:GetModelName(), self:GetSkinID(), self:GetBodyGroup() )
	
end

function PANEL:BodyGroupChanged( k, v )

	self:SetBodyGroup( k, v )
	self:SetModel( self:GetModelName(), self:GetSkinID(), self:GetBodyGroup() )
	
end

vgui.Register( "VotingPlayerIcon", PANEL, "DLabel" )
--addons/media_player_fixed_edition/lua/mediaplayer/sh_events.lua:
MP.EVENTS = {
	MEDIA_CHANGED = "mediaChanged",
	QUEUE_CHANGED = "mp.events.queueChanged",
	PLAYER_STATE_CHANGED = "mp.events.playerStateChanged"
}

if CLIENT then

	table.Merge( MP.EVENTS, {
		VOLUME_CHANGED = "mp.events.volumeChanged"
	} )

end

--addons/media_player_fixed_edition/lua/mediaplayer/players/entity/shared.lua:
include "sh_meta.lua"

DEFINE_BASECLASS( "mp_base" )

--[[---------------------------------------------------------
	Entity Media Player
-----------------------------------------------------------]]

local MEDIAPLAYER = MEDIAPLAYER
MEDIAPLAYER.Name = "entity"

function MEDIAPLAYER:IsValid()
	if not BaseClass.IsValid(self) then
		return false
	end

	local ent = self.Entity

	if ent then
		return IsValid(ent)
	end

	-- Client may still be waiting on the entity to be created by the network;
	-- let's just say it's valid until the entity is setup
	return true
end

function MEDIAPLAYER:Init(...)
	BaseClass.Init(self, ...)

	if SERVER then
		-- Manually manage listeners by default
		self._TransmitState = TRANSMIT_NEVER
	end
end

function MEDIAPLAYER:SetEntity(ent)
	self.Entity = ent

	if SERVER then
		local creator = ent:GetCreator()

		if IsValid(creator) and creator:IsPlayer() then
			self:SetOwner(creator)
		end
	else
		-- Setup hooks for drawing the screen onto the entity
		hook.Add( "HUDPaint", self, self.DrawFullscreen )
		hook.Add( "PostDrawOpaqueRenderables", self, self.Draw )
	end
end

function MEDIAPLAYER:GetEntity()
	-- Clients may wait for the entity to become valid
	if CLIENT and self._EntIndex then
		local ent = Entity(self._EntIndex)

		if IsValid(ent) and ent ~= NULL then
			ent:InstallMediaPlayer(self)
			self._EntIndex = nil
		else
			return nil
		end
	end

	return self.Entity
end

function MEDIAPLAYER:GetPos()
	return IsValid(self.Entity) and self.Entity:GetPos() or Vector(0,0,0)
end

function MEDIAPLAYER:GetLocation()
	if IsValid(self.Entity) and self.Entity.Location then
		return self.Entity:Location()
	end
	return self._Location
end

function MEDIAPLAYER:Think()
	BaseClass.Think(self)

	local ent = self:GetEntity()

	if IsValid(ent) then
		-- Lua refresh fix
		if ent._mp ~= self then
			self:Remove()
		end
	elseif SERVER then
		-- Only remove on the server since the client may still be connecting
		-- and the entity will be created when they finish.
		self:Remove()
	end
end

function MEDIAPLAYER:Remove()
	-- remove draw hooks
	if CLIENT then
		hook.Remove( "HUDPaint", self )
		hook.Remove( "PostDrawOpaqueRenderables", self )
	end

	-- remove reference to media player installed on entity
	if self.Entity then
		self.Entity._mp = nil
	end

	BaseClass.Remove(self)
end

--addons/media_player_fixed_edition/lua/mediaplayer/services/twitch/shared.lua:
DEFINE_BASECLASS( "mp_service_base" )

SERVICE.Name 	= "Twitch.TV - Stream"
SERVICE.Id 		= "twl"
SERVICE.Base 	= "browser"

function SERVICE:New( url )
	local obj = BaseClass.New(self, url)

	local channel = obj:GetTwitchChannel()
	obj._data = channel

	return obj
end

function SERVICE:Match( url )
	return string.match(url, "twitch.tv") and
			string.match(url, ".tv/[%w_]+$")
end

function SERVICE:IsTimed()
	return false
end

function SERVICE:GetTwitchChannel()

	local channel

	if self._twitchChannel then

		channel = self._twitchChannel

	elseif self.urlinfo then

		local url = self.urlinfo

		channel = string.match(url.path, "^/([%w_]+)")
		self._twitchChannel = channel

	end

	return channel

end

--addons/media_player_fixed_edition/lua/mediaplayer/services/audiofile/shared.lua:
local urllib = url

SERVICE.Name 	= "Audio file"
SERVICE.Id 		= "af"

SERVICE.PrefetchMetadata = true

local SupportedEncodings = {
	"([^/]+%.mp3)",    -- mp3
	"([^/]+%.wav)", -- wav
	"([^/]+%.ogg)"  -- ogg
}

function SERVICE:Match( url )
	url = string.lower(url or "")

	-- check supported encodings
	for _, encoding in pairs(SupportedEncodings) do
		if url:find(encoding) then
			return true
		end
	end

	return false
end

--addons/media_player_fixed_edition/lua/mediaplayer/sh_metadata.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mp_menu/sidebar_tabs.lua:
return gluapack()()
--lua/autorun/netstream.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/init.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/sh_inconfig.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

03/05/2023

--]]

if (netchunk == nil) then
    include('sh_netchunk.lua')
end

netchunk.Register('onyx:SyncConfig')

onyx.inconfig = onyx.inconfig or {}
onyx.inconfig.options = onyx.inconfig.options or {}
onyx.inconfig.values = onyx.inconfig.values or {}
onyx.inconfig.index = onyx.inconfig.index or {}

local inconfig = onyx.inconfig

function inconfig:Register(id, data)
    assert(isstring(id), 'bad argument #1 to \'inconfig:Register\' (string expected, got ' .. type(id) .. ')')
    assert(istable(data), 'bad argument #2 to \'inconfig:Register\' (table expected, got ' .. type(data) .. ')')
    assert(data.type, 'you must provide type in option data (' .. id .. ')')
    assert(data.default ~= nil, 'you must provide default value in option data (' .. id .. ')')
    assert(isstring(data.cami), Format('bad field \"cami\"\'s value in option \"%s\" (expected string, got %s)', id, type(data.cami)))                                                                                                                                             -- 9ad7c9aa-1560-4920-b64e-ac40347a307b | 383d2256-b14f-4b1e-9117-29df8bc9547d
    data.id = id
    if (SERVER) then
        data.title = nil
        data.desc = nil
    end
    if (not self.options[id]) then
        data.index = table.insert(inconfig.index, id)
    end
    self.options[id] = data
    return data
end

function inconfig:Get(id)
    local value = self.values[id]
    if (value ~= nil) then
        return value
    else
        local option = self.options[id]
        assert(option, 'trying to get value from unregistered option (' .. id .. ')')
        return option.default
    end
end

do
    inconfig.Error = {
        INVALID_VALUE = 0x0,
        NUMBER_EXPECTED = 0x1,
        STRING_EXPECTED = 0x2,
        MIN_CHARS = 0x3,
        MAX_CHARS = 0x4,
        MIN_NUMBER = 0x5,
        MAX_NUMBER = 0x6,
        INVALID_MODEL = 0x7
    }

    local types = {}
    types['bool'] = function(option, value)
        return isbool(value)
    end
    types['int'] = function(option, value)
        if (not isnumber(value)) then
            return false, inconfig.Error.NUMBER_EXPECTED
        end

        if (option.min and value < option.min) then
            return false, inconfig.Error.MIN_NUMBER, option.min
        end

        if (option.max and value > option.max) then
            return false, inconfig.Error.MAX_NUMBER, option.max
        end

        return true
    end
    types['string'] = function(option, value)
        if (not isstring(value)) then
            return false, inconfig.Error.STRING_EXPECTED
        end

        value = value:Trim()

        local len = utf8.len(value)

        if (option.min and len < option.min) then
            return false, inconfig.Error.MIN_CHARS
        end

        if (option.max and len > option.max) then
            return false, inconfig.Error.MAX_CHARS
        end

        return true
    end
    types['model'] = function(option, value)
        if (not isstring(value)) then
            return false, inconfig.Error.STRING_EXPECTED
        end

        value = value:Trim()

        local validModel = value:Right(4) == '.mdl'

        return validModel, inconfig.Error.INVALID_MODEL
    end

    function inconfig:CheckValue(id, value)
        local option = self.options[id]
        if (value == nil) then return false, inconfig.Error.INVALID_VALUE end

        local check = types[option.type]

        assert(check, 'invalid type (' .. option.type .. ') for option (' .. id .. ')')

        local allowed, enumError, argument = check(option, value)

        if (allowed and option.check) then
            return option.check(value)
        end

        return allowed, enumError, argument
    end
end

if (SERVER) then
    util.AddNetworkString('onyx.inconfig:Set')
    util.AddNetworkString('onyx.inconfig:SetTable')
    util.AddNetworkString('onyx.inconfig:SyncSingle')

    function inconfig:Set(id, value, bIgnoreOnSet)
        local option = self.options[id]
        assert(option, 'invalid option (' .. id .. ')')

        self.values[id] = value

        if (not bIgnoreOnSet and option.onSet) then
            option.onSet(value)
        end

        net.Start('onyx.inconfig:SyncSingle')
            net.WriteString(id)
            net.WriteString(onyx.TypeToString(value))
        net.Broadcast()

        hook.Run('onyx.inconfig.OnValueChange', id, value)
    end

    function inconfig:Sync(ply)
        netchunk.Send(ply, 'onyx:SyncConfig', self.values)
    end

    net.Receive('onyx.inconfig:Set', function(len, ply)
        local optionID = net.ReadString()
        local optionTable = inconfig.options[optionID]
        if (not optionTable) then return end
        if (ply:GetVar('onyx_inconfigRequestDelay', 0) > CurTime()) then return end

        ply:SetVar('onyx_inconfigRequestDelay', CurTime() + 1)

        local valueStr = net.ReadString() -- I guess that would be better than net.ReadType
        local success, valueParsed = pcall(onyx.StringToType, valueStr) -- in case someone tries to throw errors
        if (not success) then return end

        if (not inconfig:CheckValue(optionID, valueParsed)) then
            return
        end

        CAMI.PlayerHasAccess(ply, optionTable.cami, function(bAllowed)
            if (bAllowed) then
                inconfig:Set(optionID, valueParsed)
            end
        end)
    end)

    net.Receive('onyx.inconfig:SetTable', function(len, ply)
        -- local optionID = net.ReadString()
        if (ply:GetVar('onyx_inconfigRequestDelay', 0) > CurTime()) then return end

        ply:SetVar('onyx_inconfigRequestDelay', CurTime() + 1)

        local amount = net.ReadUInt(6)
        for index = 1, amount do
            local optionID = net.ReadString()
            local optionTable = inconfig.options[optionID]
            if (not optionTable) then return end -- not continue, just return, how can a player request to set invalid option without sending fake net messages :\

            local valueStr = net.ReadString() -- I guess that would be better than net.ReadType
            local success, valueParsed = pcall(onyx.StringToType, valueStr) -- in case someone tries to throw errors
            if (not success) then continue end -- just in case

            if (not inconfig:CheckValue(optionID, valueParsed)) then
                continue
            end

            CAMI.PlayerHasAccess(ply, optionTable.cami, function(bAllowed) -- every option may have own cami privilege
                if (bAllowed) then
                    inconfig:Set(optionID, valueParsed)
                end
            end)
        end
    end)

    hook.Add('onyx.PlayerNetworkReady', 'onyx.inconfig.Sync', function(ply)
        inconfig:Sync(ply)
    end)
else
    netchunk.Callback('onyx:SyncConfig', function(data)
        onyx.inconfig.values = data
        onyx:Print('Synchronized settings.')
        hook.Run('onyx.inconfig.Synchronized')
    end)

    net.Receive('onyx.inconfig:SyncSingle', function()
        local optionID = net.ReadString()
        local value = net.ReadString()
        local optionValue = onyx.StringToType(value)
        local oldValue = onyx.inconfig.values[optionID]

        onyx:Print('Updated option #, new value: #', optionID, value)
        onyx.inconfig.values[optionID] = optionValue

        hook.Run('onyx.inconfig.Updated', optionID, oldValue, optionValue)
    end)
end
--addons/onyx_framework_2/lua/onyx/ui/sh_init_ui.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

05/06/2022

--]]

onyx.IncludeFolder('onyx/ui/libs/thirdparty/')
onyx.IncludeFolder('onyx/ui/libs/')
onyx.IncludeFolder('onyx/ui/cfg/', true)
onyx.IncludeFolder('onyx/ui/core/', true)
onyx.IncludeFolder('onyx/ui/traits/', true)
onyx.IncludeFolder('onyx/ui/elements/', true)
--addons/onyx_framework_2/lua/onyx/ui/libs/cl_anim.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

16/04/2022

--]]

onyx.anim = {}
onyx.anim.list = {}

-- Reservation
onyx.anim.ANIM_HOVER = 0x100
onyx.anim.ANIM_X = 0x101
onyx.anim.ANIM_Y = 0x102
onyx.anim.ANIM_SCALE = 0x103

local anim = onyx.anim
local tween = onyx.tween
local cv = CreateClientConVar('cl_onyx_smooth', '1', true, false, 'Enable smooth animations')

function anim.Create(panel, duration, data)
    if not panel.onyxAnims then
        anim.list[#anim.list + 1] = panel
        panel.onyxAnims = {}
    end

    local index = data.index
    local subject = data.subject or panel
    local target = data.target
    local easing = data.easing or 'linear'
    local think = data.think
    local onFinished = data.onFinished

    local instance = tween.new(duration, subject, target, easing)

    instance.index = index
    instance.think = think
    instance.onFinished = onFinished

    if (cv:GetBool() and not data.skipAnimation) then
        instance:set(0)
    else
        instance:set(duration)
    end

    panel.onyxAnims[index] = instance
end

function anim.Simple(panel, duration, target, index, think, onFinished, easing)
    anim.Create(panel, duration, {
        index = index,
        target = target,
        think = think,
        onFinished = onFinished,
        easing = easing
    })
end

function anim.Remove(panel, index)
    if panel.onyxAnims and panel.onyxAnims[index] then
        panel.onyxAnims[index] = nil
    end
end

do
    local table_remove = table.remove
    local RealFrameTime = RealFrameTime
    local pairs = pairs
    local IsValid = IsValid

    local function handle(index, instance, panel, time)
        local isFinished = instance:update(time)
        local onFinished = instance.onFinished
        local think = instance.think

        if think then
            think(instance, panel)
        end

        if isFinished then
            panel.onyxAnims[index] = nil

            if onFinished then
                onFinished(instance, panel)
            end

            return true
        end

        return false
    end

    hook.Add('Think', 'onyx.anim.Controller', function()
        local time = FrameTime() -- lol, `RealFrameTime` in some rare cases it might return 0 all the time (how is it even possible???)
        local index = 0

        while (true) do
            index = index + 1
            local panel = anim.list[index]
            if panel == nil then
                break
            end
            if IsValid(panel) then
                for animIndex, instance in pairs(panel.onyxAnims) do
                    handle(animIndex, instance, panel, time)
                end
            else
                table_remove(anim.list, index)
            end
        end
        -- for i = 1, anim.index do
        --     local panel = anim.list[i]
        --     if IsValid(panel) then
        --         for index, instance in pairs(panel.onyxAnims) do
        --             handle(index, instance, panel, time)
        --         end
        --     else
        --         anim.index = anim.index - 1
        --         table_remove(anim.list, i)
        --     end
        -- end
    end)
end
--addons/onyx_framework_2/lua/onyx/ui/libs/cl_trait.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

16/04/2022

--]]

onyx.trait = onyx.trait or {}
onyx.trait.list = onyx.trait.list or {}

local trait = onyx.trait

function trait.Register(id, data)
    trait.list[id] = data
end

function trait.Get(id)
    return trait.list[id]
end

do
    local hookList = {
        ['Think'] = true,
        ['OnMousePressed'] = true,
        ['OnMouseReleased'] = true,
        ['PerformLayout'] = true,
        ['OnCursorEntered'] = true,
        ['OnCursorExited'] = true,
    }

    function trait.Import(panel, id)
        panel.onyxTraits = panel.onyxTraits or {}

        local data = trait.Get(id)

        -- Check if trait is valid
        if not data then return false end

        -- Check if already imported
        if panel.onyxTraits[id] then return false end

        local initFunc = data.Init

        for k, v in pairs(data) do
            if k == 'Init' then
                goto skip
            end

            if hookList[k] then
                onyx.gui.InjectEventHandler(panel, k)
                onyx.gui.AddEvent(panel, k, v)
            else
                panel[k] = v
            end

            ::skip::
        end

        if initFunc then
            initFunc(panel)
        end

        panel.onyxTraits[id] = true

        return true
    end
end
--addons/onyx_framework_2/lua/onyx/ui/core/cl_draw_functions.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_label.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_menu.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_pie_chart.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_rounded_avatar.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_scrollpanel.lua:
--[[

Author: tochonement
Email: tochonement@gmail.com

22.08.2021

--]]

local PANEL = {}

function PANEL:Init()
    self.canvas = vgui.Create('onyx.ScrollPanel.Canvas', self)

    self.scroll = vgui.Create('onyx.Scroll', self)

    self.canvas:On('OnContainerTallUpdated', function(panel, canvasTall, containerTall)
        self.scroll:SetUp(canvasTall, containerTall)
    end)

    self:Combine(self.canvas, 'AddPanel')
    self:Combine(self.canvas, 'OnPanelAdded')
    self:Combine(self.scroll, 'OnMouseWheeled')
    self:CombineMutator(self.canvas, 'Space')
end

function PANEL:PerformLayout(w, h)
    self.canvas:Dock(FILL)

    self.scroll:Dock(RIGHT)
    self.scroll:SetWide(onyx.ScaleWide(6))
    self.scroll:DockMargin(ScreenScale(2), 0, 0, 0)
end

function PANEL:OnVScroll(offset)
    self:GetContainer():SetY(offset)
end

function PANEL:GetContainer()
    return self.canvas.container
end

function PANEL:GetItems()
    return self:GetContainer():GetChildren()
end

function PANEL:Add(class)
    local panel = vgui.Create(class)

    assert(panel, 'Panel class \"' .. class .. '\" doesn\'t exist')

    self:AddPanel(panel)

    return panel
end

-- hack
function PANEL:Think()
    local scroll = self.scroll:GetScroll()
    local canvasSize = self.scroll.CanvasSize
    if (scroll ~= canvasSize) then
        local target = math.min(scroll, canvasSize)
        self.scroll:SetScroll(target)
        if (canvasSize <= 1) then
            self.canvas.container:SetPos(0, -scroll)
            self.scroll.Current = 0
            self.scroll.Scroll = 0
        end
    end
end

onyx.gui.Register('onyx.ScrollPanel', PANEL)

-- ANCHOR Test

-- onyx.gui.Test('onyx.Frame', .66, .66, function(self)
--     self:MakePopup()

--     local list = self:Add('onyx.ScrollPanel')
--     list:Dock(FILL)

--     for i = 1, 32 do
--         local button = list:Add('onyx.Button')
--         button:SetText('Button #' .. i)
--     end
-- end)
--addons/onyx_f4/lua/onyx/modules/f4/cfg/cl_tabs.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

30/12/2023

--]]

onyx.f4.tabs = {}

onyx.f4:RegisterTab('dashboard', {
    order = 1,
    name = 'f4_dashboard_u',
    desc = 'f4_dashboard_desc',
    icon = 'https://i.imgur.com/L6Dbwjm.png',
    class = 'onyx.f4.Dashboard'
})

onyx.f4:RegisterTab('jobs', {
    order = 2,
    name = 'f4_jobs_u',
    desc = 'f4_jobs_desc',
    icon = 'https://i.imgur.com/B5jmfXa.png',
    class = 'onyx.f4.Jobs'
})

onyx.f4:RegisterTab('shop', {
    order = 3,
    name = 'f4_shop_u',
    desc = 'f4_shop_desc',
    icon = 'https://i.imgur.com/duyBVAS.png',
    class = 'onyx.f4.Shop'
})
--addons/bb_onyx_hud/lua/onyx/modules/hud/languages/cl_french.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/languages/cl_spanish.lua:
--[[

Editor: Benjaa635 | Rusherr
GmodStore Profile: https://www.gmodstore.com/users/Rusherr635

13/10/2024

--]]

local LANG = {}

--[[
    .............
    Palabras generales
]]--

LANG[ 'hud_status_wanted' ] = 'Buscado'
LANG[ 'hud_status_speaking' ] = 'Hablando'
LANG[ 'hud_status_typing' ] = 'Escribiendo'
LANG[ 'props' ] = 'Objetos'
LANG[ 'close' ] = 'Cerrar'
LANG[ 'alert' ] = 'Alerta'
LANG[ 'message' ] = 'Mensaje'
LANG[ 'unknown' ] = 'Desconocido'
LANG[ 'accept' ] = 'Aceptar'
LANG[ 'deny' ] = 'Denegar'
LANG[ 'none' ] = 'Ninguno'
LANG[ 'add' ] = 'Añadir'
LANG[ 'remove' ] = 'Eliminar'
LANG[ 'jobs' ] = 'Trabajos'
LANG[ 'door' ] = 'Puerta'
LANG[ 'vehicle' ] = 'Vehículo'
LANG[ 'door_groups' ] = 'Grupos de puertas'
LANG[ 'display' ] = 'Pantalla'
LANG[ 'general' ] = 'General'
LANG[ 'speedometer' ] = 'Velocímetro'
LANG[ 'fuel' ] = 'Combustible'
LANG[ 'vote' ] = 'Votar'
LANG[ 'question' ] = 'Pregunta'


--[[
    .......
    Timeout
]]--

LANG[ 'timeout_title' ] = 'CONEXIÓN PERDIDA'
LANG[ 'timeout_info' ] = 'El servidor no está disponible en este momento, lo sentimos'
LANG[ 'timeout_status' ] = 'Serás reconectado en %d segundos'


--[[
    ......
    Themes
]]--

LANG[ 'hud.theme.default.name' ] = 'Predeterminado'
LANG[ 'hud.theme.forest.name' ] = 'Bosque'
LANG[ 'hud.theme.violet_night.name' ] = 'Noche Violeta'
LANG[ 'hud.theme.rustic_ember.name' ] = 'Brasa Rústica'
LANG[ 'hud.theme.green_apple.name' ] = 'Manzana Verde'
LANG[ 'hud.theme.lavender.name' ] = 'Lavanda'
LANG[ 'hud.theme.elegance.name' ] = 'Elegancia'
LANG[ 'hud.theme.mint_light.name' ] = 'Menta'
LANG[ 'hud.theme.gray.name' ] = 'Gris'
LANG[ 'hud.theme.rose_garden.name' ] = 'Jardín de Rosas'
LANG[ 'hud.theme.ocean_wave.name' ] = 'Olas del Océano'
LANG[ 'hud.theme.sky_blue.name' ] = 'Cielo Azul'
LANG[ 'hud.theme.golden_dawn.name' ] = 'Amanecer Dorado'

--[[
    ....
    Help
    - Frase completa: "Escribe <commando> para abrir la configuracion"
]]

LANG[ 'hud_help_type' ] = 'Escribe'
LANG[ 'hud_help_to' ] = 'para abrir la configuracion'


--[[
    .............
    Puertas 3D2D
]]--

LANG[ 'door_purchase' ] = 'Comprar {object}'
LANG[ 'door_sell' ] = 'Vender {object}'
LANG[ 'door_addowner' ] = 'Agregar propietario'
LANG[ 'door_rmowner' ] = 'Eliminar propietario'
LANG[ 'door_rmowner_help' ] = 'Elige al jugador al que deseas revocar la propiedad'
LANG[ 'door_addowner_help' ] = 'Elige al jugador al que deseas otorgar la propiedad'
LANG[ 'door_title' ] = 'Establecer título'
LANG[ 'door_title_help' ] = '¿Qué título deseas establecer?'
LANG[ 'door_admin_disallow' ] = 'Prohibir propiedad'
LANG[ 'door_admin_allow' ] = 'Permitir propiedad'
LANG[ 'door_admin_edit' ] = 'Editar acceso'
LANG[ 'door_owned' ] = 'Propiedad Privada'
LANG[ 'door_unowned' ] = 'En Venta'

LANG[ 'hud_door_help' ] = 'Presiona {bind} para comprar por {price}'
LANG[ 'hud_door_owner' ] = 'Propietario: {name}'
LANG[ 'hud_door_allowed' ] = 'Permitido poseer'
LANG[ 'hud_door_coowners' ] = 'Copropietarios'
LANG[ 'hud_and_more' ] = 'y más...'


--[[
    .........
    Uppercase
]]--

LANG[ 'reconnect_u' ] = 'RECONEXIÓN'
LANG[ 'disconnect_u' ] = 'DESCONECTAR'
LANG[ 'settings_u' ] = 'AJUSTES'
LANG[ 'configuration_u' ] = 'CONFIGURACIÓN'
LANG[ 'introduction_u' ] = 'INTRODUCCIÓN'


--[[
    .........
    Lowercase
]]--

LANG[ 'seconds_l' ] = 'segundos'
LANG[ 'minutes_l' ] = 'minutos'

--[[
    .............
    Configuration
]]--

LANG[ 'hud.timeout.name' ] = 'Duración del Tiempo de Espera'
LANG[ 'hud.timeout.desc' ] = 'Cuántos segundos antes de la reconexión automática'

LANG[ 'hud.alert_queue.name' ] = 'Cola de Alertas'
LANG[ 'hud.alert_queue.desc' ] = '¿Deben colocarse las alertas en cola?'

LANG[ 'hud.props_counter.name' ] = 'Contador de Objetos'
LANG[ 'hud.props_counter.desc' ] = 'Mostrar contador de objetos'

LANG[ 'hud.main_avatar_mode.name' ] = 'Tipo de Avatar Principal'
LANG[ 'hud.main_avatar_mode.desc' ] = 'Elige el tipo'

LANG[ 'hud.voice_avatar_mode.name' ] = 'Tipo de Avatar de Voz'
LANG[ 'hud.voice_avatar_mode.desc' ] = 'Elige el tipo'

LANG[ 'hud.restrict_themes.name' ] = 'Restringir Temas'
LANG[ 'hud.restrict_themes.desc' ] = 'Restringir a los jugadores la elección de temas'

LANG[ 'hud.speedometer_mph.name' ] = 'Usar Millas'
LANG[ 'hud.speedometer_mph.desc' ] = 'Cambiar unidades a millas por hora'

LANG[ 'hud.speedometer_max_speed.name' ] = 'Velocidad Máxima Predeterminada'
LANG[ 'hud.speedometer_max_speed.desc' ] = 'La velocidad máxima para el velocímetro'

LANG[ 'hud_should_draw' ] = 'Debe dibujar el elemento'
LANG[ 'hud.main.name' ] = 'HUD Principal'
LANG[ 'hud.ammo.name' ] = 'Munición'
LANG[ 'hud.agenda.name' ] = 'Agenda'
LANG[ 'hud.alerts.name' ] = 'Alertas'
LANG[ 'hud.pickup_history.name' ] = 'Historial de Recolección'
LANG[ 'hud.level.name' ] = 'Nivel'
LANG[ 'hud.voice.name' ] = 'Paneles de Voz'
LANG[ 'hud.overhead_health.name' ] = 'Salud Superior 3D2D'
LANG[ 'hud.overhead_armor.name' ] = 'Armadura Superior 3D2D'
LANG[ 'hud.vehicle.name' ] = 'HUD de Vehículo'


--[[
    ........
    Ajustes
]]--

LANG[ 'hud.theme.name' ] = 'Tema'
LANG[ 'hud.theme.desc' ] = 'Elige el tema del HUD'

LANG[ 'hud.scale.name' ] = 'Escala'
LANG[ 'hud.scale.desc' ] = 'Ajusta la escala del HUD'

LANG[ 'hud.roundness.name' ] = 'Redondez'
LANG[ 'hud.roundness.desc' ] = 'Ajusta la redondez del HUD'

LANG[ 'hud.margin.name' ] = 'Margen'
LANG[ 'hud.margin.desc' ] = 'La distancia entre el HUD y los bordes'

LANG[ 'hud.icons_3d.name' ] = 'Modelos 3D'
LANG[ 'hud.icons_3d.desc' ] = 'Renderizar íconos de modelo en 3D'

LANG[ 'hud.compact.name' ] = 'Modo Compacto'
LANG[ 'hud.compact.desc' ] = 'Habilitar el modo compacto'

LANG[ 'hud.speedometer_blur.name' ] = 'Desenfoque del Velocímetro'
LANG[ 'hud.speedometer_blur.desc' ] = 'Habilitar el desenfoque para el velocímetro'

LANG[ 'hud.3d2d_max_details.name' ] = 'Máximo de Detalles 3D2D'
LANG[ 'hud.3d2d_max_details.desc' ] = 'La cantidad máxima de información detallada que se renderiza'

--[[
    ......
    Status
]]--

LANG[ 'hud_lockdown' ] = 'TOQUE DE QUEDA'
LANG[ 'hud_lockdown_help' ] = '¡Por favor, regresen a sus hogares!'

LANG[ 'hud_wanted' ] = 'BUSCADO'
LANG[ 'hud_wanted_help' ] = 'Razón: {reason}'

LANG[ 'hud_arrested' ] = 'ARRESTADO'
LANG[ 'hud_arrested_help' ] = 'Serás liberado en {time}'


onyx.lang:AddPhrases( 'spanish', LANG )
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_agenda.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

18/08/2024

--]]

local hud = onyx.hud
local agendaWrapped = ''
local lastTitle = ''
local titleFormatted = ''

local function drawAgenda( element, client, scrW, scrH )
    /*
    local agendaTable = client:getAgendaTable()
    local agendaText = client:getDarkRPVar( 'agenda' ) or ''
    
    element.active = agendaTable and agendaText ~= ''
    if ( not element.active ) then return end

    local screenPadding = hud.GetScreenPadding()
    local padding = hud.ScaleTall( element.padding )
    local w = hud.ScaleWide( element.width )
    local h = hud.ScaleTall( element.height )
    local fontTitle = hud.fonts.TinyBold
    local fontDesc = hud.fonts.Tiny

    local title = agendaTable.Title
    local titleH = hud.ScaleTall( 25 )

    if ( agendaText ~= agendaWrapped ) then
        agendaWrapped = DarkRP.textWrap( agendaText, fontDesc, w - padding * 2 )
    end

    if ( lastTitle ~= title ) then
        lastTitle = title
        titleFormatted = onyx.utf8.upper( title )
    end

    local x, y = scrW - w - screenPadding, screenPadding
    
    hud.DrawRoundedBox( x, y, w, h, hud:GetColor( 'primary' ) )
    hud.DrawRoundedBoxEx( x, y, w, titleH, hud:GetColor( 'secondary' ), true, true )
    draw.SimpleText( titleFormatted, fontTitle, x + w * .5, y + titleH * .5, hud:GetColor( 'textSecondary' ), 1, 1 )
    draw.DrawText( agendaWrapped, fontDesc, x + padding, y + titleH + padding, hud:GetColor( 'textPrimary' ), 0, 1 )
    */
end

onyx.hud:RegisterElement( 'agenda', { drawFn = drawAgenda, height = 120, width = 250, padding = 10 } )
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_door_menu.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

16/08/2024

--]]

local MAX_DISTANCE = 128 ^ 2 -- DarkRP default is 200
local L = function( ... ) return onyx.lang:Get( ... ) end
local doorFrame

local function checkEntity( client, ent )
    if ( not IsValid( ent ) ) then return false end
    if ( not ent:isKeysOwnable() ) then return false end
    if ( ent:GetPos():DistToSqr( client:GetPos() ) > MAX_DISTANCE ) then return false end

    return true
end

local function safeClose( panel )
    if ( IsValid( panel ) ) then
        panel:Close()
    end
end

local function choosePlayer( ... )
    local colors = onyx.hud:GetCurrentTheme().colors
    local frame = onyx.ChoosePlayer( ... )

    frame.colorBG = onyx.OffsetColor( colors.primary, -5 )
    frame.lblDesc:SetTextColor( colors.textPrimary )
    frame.divHeader.colorBG = colors.secondary
    frame.divHeader.lblText:SetTextColor( colors.textPrimary )
    frame.divHeader.btnClose:SetColorIdle( colors.textPrimary )

    for _, button in ipairs( frame.buttons ) do
        button:SetColorIdle( colors.primary )
        button:SetColorHover( colors.secondary )
        button.lblTitle:SetTextColor( colors.textPrimary )
        button.colorTertiary = colors.tertiary
    end
end

local function openDoorMenu( client, setDoorOwnerAccess, canChangeSettings )
    local trace = client:GetEyeTrace()
    local ent = trace.Entity

    if ( not checkEntity( client, ent ) ) then return end

    local isClientOwner = ent:isKeysOwnedBy( client )
    local isOwned = ent:isKeysOwned()
    local isNonOwnable = ent:getKeysNonOwnable()
    local doorGroup = ent:getKeysDoorGroup()
    local doorTeams = ent:getKeysDoorTeams()
    local isAllowedToOwn = ent:isKeysAllowedToOwn( client )
    local entType = onyx.utf8.lower( L( ent:IsVehicle() and 'vehicle' or 'door' ) )
    local hasTeams = table.Count( doorTeams or {} ) > 0
    local colors = onyx.hud:GetCurrentTheme().colors

    local options = {}
    local insert = function( name, callback, wimgID )
        if ( isstring( callback ) ) then
            local cmd = tostring( callback )
            callback = function()
                RunConsoleCommand( 'darkrp', cmd )
            end
        end
        
        table.insert( options, {
            name = name,
            callback = callback,
            wimgID = wimgID
        } )
    end

    -- Buy door
    if ( not isOwned and ( not isNonOwnable and not doorGroup and not doorTeams ) or isAllowedToOwn ) then
        insert( L( 'door_purchase', { object = entType } ), 'toggleown', 'door_own' )
    end

    -- Sell door
    if ( isClientOwner ) then
        insert( L( 'door_sell', { object = entType } ), 'toggleown', 'door_sell' )

        table.insert( options, { 
            name = L( 'door_addowner' ),
            ignoreClose = true,
            wimgID = 'door_add_user',
            callback = function()
                choosePlayer( L( 'door_addowner' ), L( 'door_addowner_help' ), function(ply)
                    RunConsoleCommand( 'darkrp', 'ao', ply:SteamID() ) 
                end, false, function( ply )
                    return ( not ent:isKeysOwnedBy( ply ) and not ent:isKeysAllowedToOwn( ply ) )
                end )
            end
        } )

        table.insert( options, { 
            name = L( 'door_rmowner' ),
            ignoreClose = true,
            wimgID = 'door_remove_user',
            callback = function()
                choosePlayer( L( 'door_rmowner' ), L( 'door_rmowner_help' ), function( ply )
                    RunConsoleCommand( 'darkrp', 'ro', ply:SteamID() ) 
                end, false, function( ply )
                    return ( ( ent:isKeysOwnedBy( ply ) and not ent:isMasterOwner( ply ) ) or ent:isKeysAllowedToOwn( ply ) )
                end )
            end
        } )
    end

    -- Change title
    if ( canChangeSettings and ( isOwned or isNonOwnable or doorGroup or hasTeams ) or isClientOwner ) then
        local title = L( 'door_title' )
        insert( title, function()
            local frame = onyx.SimpleQuery( title, L( 'door_title_help' ), true, function( value )
                RunConsoleCommand( 'darkrp', 'title', value )
            end )

            frame.colorBG = onyx.OffsetColor( colors.primary, -5 )
            frame.divHeader.colorBG = colors.secondary
            frame.divHeader.lblText:SetTextColor( colors.textPrimary )

            frame.lblDesc:SetTextColor( colors.textPrimary )

            frame.textEntry:SetColorIdle( colors.primary )
            frame.textEntry:SetColorHover( onyx.OffsetColor( colors.primary, -10 ) )
            frame.textEntry:SetTextColor( colors.textPrimary )
            frame.textEntry:SetPlaceholderColor( colors.textTertiary )
            frame.textEntry.colors.accent = colors.accent
            frame.textEntry.colors.outline = colors.secondary
            frame.textEntry.currentOutlineColor = onyx.CopyColor( colors.secondary )
        end, 'door_title' )
    end
    
    -- Admin settings
    if ( canChangeSettings ) then
        insert( L( isNonOwnable and 'door_admin_allow' or 'door_admin_disallow' ):gsub( ' ', '\n' ), 'toggleownable', isNonOwnable and 'door_enable_own' or 'door_disable_own' )

        table.insert( options, {
            name = L( 'door_admin_edit' ),
            ignoreClose = true,
            wimgID = 'door_groups',
            callback = function( wheel )
                local dmenu = vgui.Create( 'onyx.Menu' )
                dmenu:ToCursor()
                dmenu.backgroundColor = colors.primary
                dmenu.outlineColor = colors.secondary
                dmenu.Think = function( this )
                    if ( not IsValid( wheel ) ) then
                        this:Close()
                    end
                end

                local groups = dmenu:AddSubMenu( L( 'door_groups' ) )
                local teams = dmenu:AddSubMenu( L( 'jobs' ) )
                local add = teams:AddSubMenu( L( 'add' ) )
                local remove = teams:AddSubMenu( L( 'remove' ) )
            
                dmenu:AddOption( L( 'none' ), function()
                    RunConsoleCommand( 'darkrp', 'togglegroupownable' )
                    safeClose( wheel )
                end )

                for name in pairs( RPExtraTeamDoors ) do
                    groups:AddOption( name, function()
                        RunConsoleCommand( 'darkrp', 'togglegroupownable', name )
                        safeClose( wheel )
                    end )
                end

                for index, data in ipairs( RPExtraTeams ) do
                    local which = ( not doorTeams or not doorTeams[ index ] ) and add or remove
                    which:AddOption( data.name, function()
                        RunConsoleCommand( 'darkrp', 'toggleteamownable', index )
                        safeClose( wheel )
                    end )
                end
            
                dmenu:Open()
            end
        } )
    end

    local amount = #options
    if ( amount == 1 ) then
        options[ 1 ].callback()
    elseif ( amount > 0 and not IsValid( doorFrame ) ) then
        local size = onyx.hud.ScaleTall( 512 )
    
        local choiceWheel = vgui.Create( 'onyx.hud.ChoiceWheel' )
        doorFrame = choiceWheel
        choiceWheel:SetSize( size, size )
        choiceWheel:SetShowLabel( true )
        choiceWheel:MakePopup()
        choiceWheel:Center()
        choiceWheel.OnRemove = function()
            doorFrame = nil
        end
        choiceWheel.PostThink = function( this )
            if ( not checkEntity( client, ent ) ) then
                this:Close()
            end
        end
        
        choiceWheel:AddChoice( { name = onyx.lang:Get( 'close' ), wimgID = 'radial_close' } )
    
        for _, data in ipairs( options ) do
            choiceWheel:AddChoice( data )
        end
    end
end

local function overrideDarkRP()
    local gmTable = GAMEMODE or GM
    
    DarkRP.openKeysMenu = function()
        local client = LocalPlayer()
        CAMI.PlayerHasAccess( client, 'DarkRP_SetDoorOwner', function( setDoorOwnerAccess )
            CAMI.PlayerHasAccess( client, 'DarkRP_ChangeDoorSettings', function( canChangeSettings )
                openDoorMenu( client, setDoorOwnerAccess, canChangeSettings )
            end )
        end )
    end

    gmTable.ShowTeam = DarkRP.openKeysMenu
    usermessage.Hook( 'KeysMenu', DarkRP.openKeysMenu )
end

onyx.hud.OverrideGamemode( 'onyx.hud.OverrideKeysMenu', overrideDarkRP )
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_weapon_selector.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/ui/cl_settings.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/core/columns/sh_columns.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

03/03/2024

--]]

onyx.scoreboard.columns = onyx.scoreboard.columns or {}
onyx.scoreboard.columnsCustomizable = onyx.scoreboard.columnsCustomizable or {}
onyx.scoreboard.columnsMaxAmount = 5
onyx.scoreboard.columnsDefault = {
    [1] = 'team',
    [2] = 'rank',
    [3] = 'money',
    [4] = 'playtime',
}

function onyx.scoreboard:RegisterColumn(id, data)
    if (SERVER) then data = {} end -- server doesn't need that

    data.name = 'scoreboard_col_' .. id
    data.id = id

    onyx.scoreboard.columns[id] = data
end

do
    local BASE_COLUMNS = {
        {
            name = '',
            icon = 'https://i.imgur.com/FQK7XQx.png',
            small = true,
            getValue = function(client)
                return client:Frags()
            end
        },
        {
            name = '',
            icon = 'https://i.imgur.com/13t90iD.png',
            small = true,
            getValue = function(client)
                return client:Deaths()
            end
        }
    }

    function onyx.scoreboard:GetActiveColumns()
        local columns = {}

        -- configurable options
        for index = 1, self.columnsMaxAmount do
            local cfgID = self.columnsCustomizable[index]
            if (cfgID) then
                local cfgData = self.columns[cfgID]
                if (cfgData and (not cfgData.customCheck or cfgData.customCheck())) then
                    table.insert(columns, cfgData)
                end
            else
                local defaultID = onyx.scoreboard.columnsDefault[index]
                if (defaultID) then
                    local defaultData = self.columns[defaultID]
                    if (defaultData and (not defaultData.customCheck or defaultData.customCheck())) then
                        table.insert(columns, defaultData)
                    end
                end
            end
        end

        -- default columns
        for _, column in ipairs(BASE_COLUMNS) do
            table.insert(columns, column)
        end

        return columns
    end
end
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/core/integrations/sh_brick_gangs.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

19/03/2024

--]]

netchunk.Register('onyx.scoreboard:SyncBrickGangs')
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/cfg/cl_actions.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/ui/cl_player.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/ui/cl_player.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

28/02/2024

--]]

local COLOR_PRIMARY = onyx:Config('colors.primary')
local COLOR_SECONDARY = onyx:Config('colors.secondary')
local COLOR_TERTIARY = onyx:Config('colors.tertiary')
local COLOR_HOVERED = onyx.ColorBetween(COLOR_PRIMARY, COLOR_SECONDARY)

local COLOR_HIGH_PING = Color(196, 0, 0)
local COLOR_LOW_PING = Color(98, 255, 108)
local COLOR_PING_BG = onyx.OffsetColor(COLOR_PRIMARY, -10)

local COLOR_MUTED = Color(195, 147, 147)
local COLOR_SHADOW = Color(0, 0, 0, 100)

local WIMG_PING = onyx.wimg.Simple('https://i.imgur.com/z9OfU9m.png', 'smooth mips')
local WIMG_MIC_COMMON = onyx.wimg.Simple('https://i.imgur.com/WOBOLh8.png', 'smooth mips')
local WIMG_MIC_MUTE = onyx.wimg.Simple('https://i.imgur.com/eSYvIFa.png', 'smooth mips')

local SHADOW_DISTANCE = 2

local drawPlayerName do
    local fontCommon = onyx.Font('Comfortaa SemiBold@16') -- the size got dynamically changed
    local fontGlow = onyx.Font('Comfortaa SemiBold@16', 'blursize:2') -- the size got dynamically changed

    local draw_SimpleText = draw.SimpleText

    function drawPlayerName(text, x, y, rankData, ax, ay, realX, realY)
        local color = istable(rankData) and rankData.color or color_white
        local effectIndex = istable(rankData) and rankData.effect or 1
        local effectData = onyx.scoreboard.nameEffects[effectIndex] or onyx.scoreboard.nameEffects[1]
        local effectDrawFn = effectData.func

        -- common
        effectDrawFn(text, x, y, color, ax, ay, realX + x, realY + y)
    end
end

--[[------------------------------
PANEL
--------------------------------]]
local PANEL = {}

AccessorFunc(PANEL, 'm_ePlayer', 'Player')

function PANEL:Init()
    local font = onyx.Font('Comfortaa SemiBold@16')

    self.lineThickness = 1
    self.colorOutline = COLOR_TERTIARY
    self.blur = onyx.scoreboard.IsBlurActive()

    self.avatar = self:Add('onyx.RoundedAvatar')
    self.avatar:SetMouseInputEnabled(false)
    self.avatar.PaintOver = function(panel, w, h)
        onyx.DrawOutlinedCircle(w * .5, h * .5, math.Round(h * .5), 5, panel.color or color_white)
    end

    self.lblName = self:Add('Panel')
    self.lblName:SetMouseInputEnabled(false)
    AccessorFunc(self.lblName, 'Text', 'Text')
    self.lblName.Paint = function(panel, w, h)
        drawPlayerName(panel.Text, 0, h * .5, self.rankData, 0, 1, panel:LocalToScreen(0, 0))
    end

    self.buttonMute = self:AddMuteButton()

    self.pingIcon = self:Add('Panel')
    self.pingIcon:SetMouseInputEnabled(false)
    self.pingIcon.count = 4
    self.pingIcon.Paint = function(panel, w, h)
        local maxLines = 4
        local curLines = math.min(maxLines, panel.count)
        local fraction = (curLines / maxLines)
        local scissorWidth = w * fraction -- the image has perfect element distance
        local color = onyx.LerpColor(1 - fraction, COLOR_LOW_PING, COLOR_HIGH_PING)

        local x, y = panel:LocalToScreen(0, 0)

        WIMG_PING:Draw(0, 0, w, h, COLOR_PING_BG)

        render.SetScissorRect(x, y, x + scissorWidth, y + h, true)
            WIMG_PING:Draw(0, 0, w, h, color)
        render.SetScissorRect(0, 0, 0, 0, false)
    end

    self.content = self:Add('onyx.Scoreboard.ColumnsRow')
    self.content:SetMouseInputEnabled(false)
    self.content:Dock(FILL)
    self.content:InitColumns()
end

function PANEL:GetPingLineCount(playerPing)
    -- calculations on how many lines

    local goodPing = 95
    local step = 50
    local maxLines = 4

    for index = 0, (maxLines - 1) do
        local lineCount = maxLines - index
        local iterPing = goodPing + (index * step)
        if (playerPing < iterPing) then
            return lineCount
        end
    end

    return 1
end

function PANEL:AddMuteButton(url)
    -- muted: https://i.imgur.com/eSYvIFa.png

    local button = self:Add('onyx.ImageButton')
    button.DoClick = function(panel)
        local ply = self:GetPlayer()
        if (IsValid(ply)) then
            ply:SetMuted(not ply:IsMuted())
            panel:Update()
        end
    end
    button.Update = function(panel)
        local ply = self:GetPlayer()
        if (IsValid(ply)) then
            local state = ply:IsMuted()
            panel:SetColor(state and COLOR_MUTED or color_white)
            panel.m_WebImage = (state and WIMG_MIC_MUTE or WIMG_MIC_COMMON)
        end
    end

    return button
end

function PANEL:Paint(w, h)
    local lineThickness = self.lineThickness
    local category = self.category
    local isExpanded = category:GetExpanded()
    local rounded = category.canvas:GetTall() < 1
    local isHovered = self:IsHovered()
    local color = isHovered and COLOR_HOVERED or COLOR_PRIMARY

    if (self.blur) then
        draw.RoundedBoxEx(8, 0, 0, w, h, ColorAlpha(color, 230), true, true, rounded, rounded)
    else
        draw.RoundedBoxEx(8, 0, 0, w, h, self.colorOutline, true, true, rounded, rounded)
        draw.RoundedBoxEx(8, lineThickness, lineThickness, w - lineThickness * 2, h - lineThickness * 2, color, true, true, rounded, rounded)
    end

    local mask = rounded and self.maskAllRounded or self.maskExpanded
    if (mask) then
        onyx.DrawWithPolyMask(mask, function()
            onyx.DrawMatGradient(0, 0, w, h, TOP, self.colorGradient)
        end)
    end
end

function PANEL:PerformLayout(w, h)
    local padding = self.padding
    local height = h - padding * 2
    local paddingX = self.paddingX + 1 -- this got set in cl_frame.lua
    local firstElementWidth = self.firstElementWidth
    local avatarMargin = onyx.ScaleTall(5)
    local lineThickness = self.lineThickness

    self:DockPadding(paddingX, padding, paddingX, padding)

    self.avatar:Dock(LEFT)
    self.avatar:SetWide(height)
    self.avatar:DockMargin(0, 0, avatarMargin, 0)

    self.lblName:Dock(LEFT)
    self.lblName:SetWide(firstElementWidth - height - avatarMargin)
    self.lblName:DockMargin(0, 0, self.paddingX, 0)

    self.buttonMute:SetWide(height)
    self.buttonMute:Dock(RIGHT)
    self.buttonMute:DockMargin(self.paddingX, 0, 0, 0)

    self.pingIcon:SetWide(height)
    self.pingIcon:Dock(RIGHT)
    self.pingIcon:DockMargin(self.paddingX, 0, 0, 0)

    if (onyx.scoreboard:GetOptionValue('colored_players') or onyx.scoreboard.IsTTT()) then
        self.maskAllRounded = onyx.CalculateRoundedBox(8, lineThickness, lineThickness, w - lineThickness * 2, h - lineThickness * 2)
        self.maskExpanded = onyx.CalculateRoundedBoxEx(8, lineThickness, lineThickness, w - lineThickness * 2, h - lineThickness * 2, true, false, false, true)
    end
end

function PANEL:SetupPlayer(ply)
    local teamIndex = ply:Team()
    local teamColor = team.GetColor(teamIndex)

    if (onyx.scoreboard.IsTTT()) then
        teamColor = onyx.scoreboard.GetRoleColorTTT(ply)
    end

    local convertedColor = onyx.scoreboard.ConvertTeamColor(teamColor)
    local usergroup = ply:GetUserGroup()

    self:SetPlayer(ply)

    self.colorGradient = ColorAlpha(onyx.LerpColor(.5, teamColor, color_black), 40) -- lerp makes gradients look better
    self.rankData = onyx.scoreboard:GetRankData(usergroup)

    self.avatar.color = convertedColor
    self.avatar:SetPlayer(ply, 64)

    self.lblName:SetText(ply:Name())

    self.buttonMute:Update()

    self:UpdateColumnValues(self.rankData)
end

function PANEL:UpdateColumnValues()
    local ply = self:GetPlayer()
    if (not IsValid(ply)) then return end

    for index, data in ipairs(onyx.scoreboard:GetActiveColumns()) do
        local value = data.getValue(ply)
        local formatted = data.formatValue and data.formatValue(value) or value

        self.content:SetValue(index, formatted, value)

        if (data.getColor) then
            self.content:SetColor(index, data.getColor(ply))
        end

        if (data.buildFunc) then
            data.buildFunc(self.content.columns[index], ply)
        end
    end
end

function PANEL:Think()
    local ply = self:GetPlayer()
    if (IsValid(ply)) then
        self.pingIcon.count = self:GetPingLineCount(ply:Ping())
    end
end

onyx.gui.Register('onyx.Scoreboard.PlayerLine', PANEL)

--[[------------------------------
// ANCHOR Debug
--------------------------------]]
-- onyx.gui.Test('onyx.Scoreboard.Frame', .66, .66, function(self)
--     self:Center()
--     self:MakePopup()
-- end)
--addons/gmodadminsuite-config/lua/openpermissions_lua_functions.lua:
--[[

	    __                   ______                 __  _                 
	   / /   __  ______ _   / ____/_  ______  _____/ /_(_)___  ____  _____
	  / /   / / / / __ `/  / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
	 / /___/ /_/ / /_/ /  / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  ) 
	/_____/\__,_/\__,_/  /_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/  
	                                                                      

	Welcome to the Lua functions config.
	OpenPermissions has been designed to be as customizable as possible.
	In this configuration, you can define custom Lua functions which OpenPermissions can use.

	These Lua functions can be used as Access Groups, which allow you to assign permissions to people
	who successfully pass your own custom Lua code.

]]

return {
	["example_function"] = function(ply, permission_id)
		if (ply:SteamID() == "STEAM_0:1:40314158" or ply:SteamID64() == "76561198112561190") then
			return true -- allow!
		elseif (ply:SteamID() == "STEAM_0:1:7099") then
			return false -- disallow!
		else
			return -- ignore!
		end
	end,
}

--lua/openpermissions/sh.lua:
function OpenPermissions:CreatePermissionsRegistry()
	local registry = {}
	for _, enum in pairs(OpenPermissions.ACCESS_GROUP) do registry[enum] = {} end
	return registry
end

OpenPermissions.REGISTRY = {}
OpenPermissions.REGISTRY.NETWORKED = 0
OpenPermissions.REGISTRY.FLAT_FILE = 1
function OpenPermissions:SerializeRegistry(dataType)
	if (dataType == OpenPermissions.REGISTRY.NETWORKED) then

		if (file.Exists("openpermissions_v2.dat", "DATA")) then
			-- Lazy but still probably quicker
			local data = file.Read("openpermissions_v2.dat", "DATA")
			net.WriteUInt(#data, 32)
			net.WriteData(data, #data)
		else
			net.WriteUInt(0, 32)
		end

	elseif (dataType == OpenPermissions.REGISTRY.FLAT_FILE) then

		local f = file.Open("openpermissions_v2.dat", "wb", "DATA")

		-- Write file header
		f:Write("OPENPERMISSIONS")

		local ids = {}
		local id = 0
		local ids_pos = f:Tell()
		f:Seek(ids_pos + (32 / 8)) -- Allocate a UShort for seeker position of IDs

		-- Write permissions registry
		local access_group_count = 0
		local access_group_pos = f:Tell()
		f:Seek(access_group_pos + (32 / 8))
		for access_group, accessors in pairs(OpenPermissions.PermissionsRegistry) do
			f:WriteUShort(access_group)
			access_group_count = access_group_count + 1

			local accessors_count = 0
			local accessors_pos = f:Tell()
			f:Seek(accessors_pos + (32 / 8))
			for accessor, permissions in pairs(accessors) do
				if (isnumber(accessor)) then
					f:WriteBool(false)
					f:WriteULong(accessor)
				elseif (isstring(accessor)) then
					f:WriteBool(true)
					f:WriteUShort(#accessor)
					f:Write(accessor)
				else
					error("Invalid accessor key type! (" .. type(accessor) .. ")")
				end
				accessors_count = accessors_count + 1

				local permissions_count = 0
				local permissions_pos = f:Tell()
				f:Seek(permissions_pos + (32 / 8))
				for permission_id, access in pairs(permissions) do
					if (not ids[permission_id]) then
						id = id + 1
						ids[permission_id] = id
					end
					f:WriteUShort(ids[permission_id])
					f:WriteBool(access == OpenPermissions.CHECKBOX.INHERIT)
					f:WriteBool(access == OpenPermissions.CHECKBOX.TICKED)
					permissions_count = permissions_count + 1
				end
				local pos = f:Tell()
				f:Seek(permissions_pos)
				f:WriteULong(permissions_count)
				f:Seek(pos)
			end
			local pos = f:Tell()
			f:Seek(accessors_pos)
			f:WriteULong(accessors_count)
			f:Seek(pos)
		end
		local pos = f:Tell()
		f:Seek(access_group_pos)
		f:WriteULong(access_group_count)
		f:Seek(pos)

		-- Write IDs
		local count = 0
		local countPos = f:Tell()
		f:Seek(countPos + (32 / 8)) -- We can seek back and write the count here
		for str, id in pairs(ids) do
			f:WriteUShort(#str)
			f:Write(str)
			f:WriteUShort(id)
			count = count + 1
		end
		f:Seek(countPos)
		f:WriteULong(count)

		f:Seek(ids_pos)
		f:WriteULong(countPos)

		f:Close()

		file.Write("openpermissions_v2.dat", util.Compress(file.Read("openpermissions_v2.dat", "DATA")))

	end
end
function OpenPermissions:DeserializeRegistry(dataType, stream)
	if (dataType == OpenPermissions.REGISTRY.NETWORKED) then
		
		-- Lazy but still probably quicker
		local data_len = net.ReadUInt(32)
		if (data_len == 0) then return end

		local data = net.ReadData(data_len)

		file.Write("openpermissions_networked.dat", data)
		OpenPermissions:DeserializeRegistry(OpenPermissions.REGISTRY.FLAT_FILE, "openpermissions_networked.dat")
		file.Delete("openpermissions_networked.dat")

	elseif (dataType == OpenPermissions.REGISTRY.FLAT_FILE) then
		
		local data = file.Read(stream or "openpermissions_v2.dat", "DATA")
		file.Write("openpermissions_stream.dat", util.Decompress(data))
		local f = file.Open("openpermissions_stream.dat", "rb", "DATA")

		assert(f:Read(#("OPENPERMISSIONS")) == "OPENPERMISSIONS", "Error! OpenPermissions data corrupted!")

		OpenPermissions.IDs = { Int = {}, Str = {} }
		OpenPermissions.PermissionsRegistry = OpenPermissions:CreatePermissionsRegistry()

		local ids = {}

		local pointer = f:ReadULong()
		local pos = f:Tell()
		f:Seek(pointer)

		-- Read permission IDs
		for i = 1, f:ReadULong() do
			local permission_str = f:Read(f:ReadUShort())
			local permission_id = f:ReadUShort()
			ids[permission_id] = permission_str
		end
		
		f:Seek(pos)

		-- Read permission registry
		for i = 1, f:ReadULong() do
			local access_group = f:ReadUShort()
			OpenPermissions.PermissionsRegistry[access_group] = {}
			
			for j = 1, f:ReadULong() do
				local accessor = f:ReadBool() and f:Read(f:ReadUShort()) or f:ReadULong()
				OpenPermissions.PermissionsRegistry[access_group][accessor] = {}

				for k = 1, f:ReadULong() do
					OpenPermissions.PermissionsRegistry[access_group][accessor][ids[f:ReadUShort()]] = f:ReadBool() and OpenPermissions.CHECKBOX.INHERIT or (f:ReadBool() and OpenPermissions.CHECKBOX.TICKED or OpenPermissions.CHECKBOX.CROSSED)
				end
			end
		end

		f:Close()
		file.Delete("openpermissions_stream.dat")

		return OpenPermissions.PermissionsRegistry

	end
end

function OpenPermissions:SerializeTable(tbl)
	return OpenPermissions.pon.encode(tbl)
end

function OpenPermissions:DeserializeTable(tbl)
	return OpenPermissions.pon.decode(tbl)
end

local NetworkedTblCache = {}
function OpenPermissions:ClearNetworkCache(tbl)
	NetworkedTblCache[tostring(tbl)] = nil
end
function OpenPermissions:StartNetworkTable(tbl, cache, clear_cache)
	if (tbl == OpenPermissions.PermissionsRegistry) then
		return OpenPermissions:SerializeRegistry(OpenPermissions.REGISTRY.NETWORKED)
	end

	local tbl_enc
	if (cache and not clear_cache and NetworkedTblCache[tostring(tbl)] ~= nil) then
		tbl_enc = NetworkedTblCache[tostring(tbl)]
	else
		tbl_enc = util.Compress(OpenPermissions:SerializeTable(tbl))
		if (cache) then
			NetworkedTblCache[tostring(tbl)] = tbl_enc
		end
	end
	net.WriteUInt(#tbl_enc, 32)
	net.WriteData(tbl_enc, #tbl_enc)
end
function OpenPermissions:ReceiveNetworkTable()
	local tbl_enc_len = net.ReadUInt(32)
	local tbl_dec = OpenPermissions:DeserializeTable(util.Decompress(net.ReadData(tbl_enc_len)))
	return tbl_dec
end

--## SteamIDs ##--

function OpenPermissions:SteamID64ToAccountID(steamid64)
	return OpenPermissions:SteamIDToAccountID(util.SteamIDFrom64(steamid64))
end

function OpenPermissions:SteamIDToAccountID(steamid)
	local acc32 = tonumber(steamid:sub(11))
	return (acc32 * 2) + tonumber(steamid:sub(9,9))
end

function OpenPermissions:AccountIDToSteamID(account_id)
	local sid32 = tonumber(account_id) / 2
	if (sid32 % 1 > 0) then
		return "STEAM_0:1:" .. math.floor(sid32)
	else
		return "STEAM_0:0:" .. sid32
	end
end

function OpenPermissions:AccountIDToSteamID64(account_id)
	return util.SteamIDTo64(OpenPermissions:AccountIDToSteamID(account_id))
end

--## Usergroup Management ##--

function OpenPermissions:IsUserGroup(ply, ...)
	local vararg = {...}
	if (#vararg == 1) then
		return ply:IsUserGroup(vararg[1]) or (not ply:IsBot() and hook.Run("OpenPermissions:IsUserGroup", ply, vararg[1]) == true) or false
	else
		for _,ug in ipairs(vararg) do
			if (ply:IsUserGroup(ug) or (not ply:IsBot() and hook.Run("OpenPermissions:IsUserGroup", ply, ug) == true)) then
				return true
			end
		end
		return false
	end
end

function OpenPermissions:IsUsergroups(ply, usergroups)
	local ply_usergroups = OpenPermissions:GetUserGroups(ply)
	for _,usergroup in ipairs(usergroups) do
		if (ply_usergroups[usergroup]) then
			return true
		end
	end
	return false
end

function OpenPermissions:GetUserGroups(ply)
	local usergroups_tbl = {[ply:GetUserGroup()] = true}
	if (not ply:IsBot()) then
		hook.Run("OpenPermissions:GetUserGroups", ply, usergroups_tbl)
	end
	return usergroups_tbl
end

--## Internal Operators Indexing ##--
OpenPermissions.IndexedOperators = {}
for _,_s in ipairs(OpenPermissions.Operators.SteamIDs) do
	local s = string.Trim(_s)
	if (s:find("^STEAM_%d:%d:%d+$")) then
		OpenPermissions.IndexedOperators[OpenPermissions:SteamIDToAccountID(s)] = true
	elseif (s:find("^7656119%d+$")) then
		OpenPermissions.IndexedOperators[OpenPermissions:SteamID64ToAccountID(s)] = true
	else
		OpenPermissions:Print("Invalid SteamID in config file; not a SteamID/SteamID64: \"" .. _s .. "\"", "[ERROR]", OpenPermissions.COLOR_RED)
	end
end

function OpenPermissions:IsOperator(ply)
	if (ply:IsBot()) then return false end
	if (OpenPermissions.IndexedOperators[ply:AccountID()]) then
		return true
	end
	for _,u in ipairs(OpenPermissions.Operators.Usergroups) do
		if (OpenPermissions:IsUserGroup(ply, u)) then
			return true
		end
	end
	if (hook.Run("OpenPermissions:IsOperator", ply) == true) then
		return true
	end
	return false
end

--## HasPermission, GetPermission ##--

function OpenPermissions:GetPermission(ply, permission_id, is_operator)
	if (type(ply) ~= "Player" or ply:AccountID() == nil) then
		OpenPermissions:Print("Tried to do a permission check on a non-player or a player without an assigned account ID?", "[ERROR]", OpenPermissions.COLOR_RED)
		debug.Trace()
		return false
	end
	if (ply:IsBot()) then return false end
	if (is_operator == true or (is_operator ~= false and OpenPermissions:IsOperator(ply))) then return true end
	
	local has_permission = OpenPermissions.CHECKBOX.INHERIT

	if (type(permission_id) == "table") then
		for _,v in ipairs(permission_id) do
			local r = OpenPermissions:GetPermission(ply, v)
			if (r ~= OpenPermissions.CHECKBOX.INHERIT) then
				return r
			end
		end
		return OpenPermissions.CHECKBOX.INHERIT
	end

	for usergroup in pairs(OpenPermissions:GetUserGroups(ply)) do
		local ply_usergroup_registry = OpenPermissions.PermissionsRegistry[OpenPermissions.ACCESS_GROUP.USERGROUP][usergroup]
		if (ply_usergroup_registry) then
			if (ply_usergroup_registry[permission_id] == OpenPermissions.CHECKBOX.TICKED or ply_usergroup_registry[permission_id] == true) then
				has_permission = OpenPermissions.CHECKBOX.TICKED
			elseif (ply_usergroup_registry[permission_id] == OpenPermissions.CHECKBOX.CROSSED) then
				return OpenPermissions.CHECKBOX.CROSSED
			end
		end
	end

	local ply_steamid_registry = OpenPermissions.PermissionsRegistry[OpenPermissions.ACCESS_GROUP.STEAMID][ply:AccountID()]
	if (ply_steamid_registry) then
		if (ply_steamid_registry[permission_id] == OpenPermissions.CHECKBOX.TICKED or ply_steamid_registry[permission_id] == true) then
			has_permission = OpenPermissions.CHECKBOX.TICKED
		elseif (ply_steamid_registry[permission_id] == OpenPermissions.CHECKBOX.CROSSED) then
			return OpenPermissions.CHECKBOX.CROSSED
		end
	end

	if (ply:Team()) then
		local ply_team_registry = OpenPermissions.PermissionsRegistry[OpenPermissions.ACCESS_GROUP.TEAM][OpenPermissions:GetTeamIdentifier(ply:Team())]
		if (ply_team_registry) then
			if (ply_team_registry[permission_id] == OpenPermissions.CHECKBOX.TICKED or ply_team_registry[permission_id] == true) then
				has_permission = OpenPermissions.CHECKBOX.TICKED
			elseif (ply_team_registry[permission_id] == OpenPermissions.CHECKBOX.CROSSED) then
				return OpenPermissions.CHECKBOX.CROSSED
			end
		end

		if (OpenPermissions.IsDarkRP and RPExtraTeams[ply:Team()]) then
			local ply_category_name = RPExtraTeams[ply:Team()].category
			local ply_category
			for i,category in ipairs(DarkRP.getCategories().jobs) do
				if (category.name == ply_category_name) then
					ply_category = i
					break
				end
			end
			if (ply_category) then
				local ply_category_registry = OpenPermissions.PermissionsRegistry[OpenPermissions.ACCESS_GROUP.DARKRP_CATEGORY][OpenPermissions:DarkRP_GetCategoryIdentifier(ply_category)]
				if (ply_category_registry) then
					if (ply_category_registry[permission_id] == OpenPermissions.CHECKBOX.TICKED or ply_category_registry[permission_id] == true) then
						has_permission = OpenPermissions.CHECKBOX.TICKED
					elseif (ply_category_registry[permission_id] == OpenPermissions.CHECKBOX.CROSSED) then
						return OpenPermissions.CHECKBOX.CROSSED
					end
				end
			end
		end
	end

	for name, func in pairs(OpenPermissions.LuaFunctions) do
		local lua_function_registry = OpenPermissions.PermissionsRegistry[OpenPermissions.ACCESS_GROUP.LUA_FUNCTION][name]
		if (lua_function_registry) then
			if (func(ply, permission_id) == true) then
				if (lua_function_registry[permission_id] == OpenPermissions.CHECKBOX.TICKED or lua_function_registry[permission_id] == true) then
					has_permission = OpenPermissions.CHECKBOX.TICKED
				elseif (lua_function_registry[permission_id] == OpenPermissions.CHECKBOX.CROSSED) then
					return OpenPermissions.CHECKBOX.CROSSED
				end
			end
		end
	end

	if (has_permission == OpenPermissions.CHECKBOX.INHERIT and OpenPermissions.DefaultPermissions[permission_id] == OpenPermissions.CHECKBOX.TICKED) then
		has_permission = OpenPermissions.CHECKBOX.TICKED
	end

	return has_permission
end

function OpenPermissions:HasPermission(ply, permission_id, is_operator)
	if (type(ply) ~= "Player" or ply:AccountID() == nil) then
		OpenPermissions:Print("Tried to do a permission check on a non-player or a player without an assigned account ID?", "[ERROR]", OpenPermissions.COLOR_RED)
		debug.Trace()
		return false
	end
	if (ply:IsBot()) then return false end
	if (is_operator == true or (is_operator ~= false and OpenPermissions:IsOperator(ply))) then return true end

	local has_permission = false

	if (type(permission_id) == "table") then
		for _,v in ipairs(permission_id) do
			if (OpenPermissions:HasPermission(ply, v)) then
				return true
			end
		end
		return false
	end

	for usergroup in pairs(OpenPermissions:GetUserGroups(ply)) do
		local ply_usergroup_registry = OpenPermissions.PermissionsRegistry[OpenPermissions.ACCESS_GROUP.USERGROUP][usergroup]
		if (ply_usergroup_registry) then
			if (ply_usergroup_registry[permission_id] == OpenPermissions.CHECKBOX.TICKED or ply_usergroup_registry[permission_id] == true) then
				has_permission = true
			elseif (ply_usergroup_registry[permission_id] == OpenPermissions.CHECKBOX.CROSSED) then
				return false
			end
		end
	end

	local ply_steamid_registry = OpenPermissions.PermissionsRegistry[OpenPermissions.ACCESS_GROUP.STEAMID][ply:AccountID()]
	if (ply_steamid_registry) then
		if (ply_steamid_registry[permission_id] == OpenPermissions.CHECKBOX.TICKED or ply_steamid_registry[permission_id] == true) then
			has_permission = true
		elseif (ply_steamid_registry[permission_id] == OpenPermissions.CHECKBOX.CROSSED) then
			return false
		end
	end

	if (ply:Team()) then
		local ply_team_registry = OpenPermissions.PermissionsRegistry[OpenPermissions.ACCESS_GROUP.TEAM][OpenPermissions:GetTeamIdentifier(ply:Team())]
		if (ply_team_registry) then
			if (ply_team_registry[permission_id] == OpenPermissions.CHECKBOX.TICKED or ply_team_registry[permission_id] == true) then
				has_permission = true
			elseif (ply_team_registry[permission_id] == OpenPermissions.CHECKBOX.CROSSED) then
				return false
			end
		end

		if (OpenPermissions.IsDarkRP and RPExtraTeams[ply:Team()]) then
			local ply_category_name = RPExtraTeams[ply:Team()].category
			local ply_category
			for i,category in ipairs(DarkRP.getCategories().jobs) do
				if (category.name == ply_category_name) then
					ply_category = i
					break
				end
			end
			if (ply_category) then
				local ply_category_registry = OpenPermissions.PermissionsRegistry[OpenPermissions.ACCESS_GROUP.DARKRP_CATEGORY][OpenPermissions:DarkRP_GetCategoryIdentifier(ply_category)]
				if (ply_category_registry) then
					if (ply_category_registry[permission_id] == OpenPermissions.CHECKBOX.TICKED or ply_category_registry[permission_id] == true) then
						has_permission = true
					elseif (ply_category_registry[permission_id] == OpenPermissions.CHECKBOX.CROSSED) then
						return false
					end
				end
			end
		end
	end

	for name, func in pairs(OpenPermissions.LuaFunctions) do
		local lua_function_registry = OpenPermissions.PermissionsRegistry[OpenPermissions.ACCESS_GROUP.LUA_FUNCTION][name]
		if (lua_function_registry) then
			if (func(ply, permission_id) == true) then
				if (lua_function_registry[permission_id] == OpenPermissions.CHECKBOX.TICKED or lua_function_registry[permission_id] == true) then
					has_permission = true
				elseif (lua_function_registry[permission_id] == OpenPermissions.CHECKBOX.CROSSED) then
					return false
				end
			end
		end
	end

	if (has_permission == false and OpenPermissions.DefaultPermissions[permission_id] == OpenPermissions.CHECKBOX.TICKED) then
		has_permission = true
	end

	return has_permission
end

--## Teams ##--

local team_identifier_index = {}
function OpenPermissions:GetTeamIdentifier(team_index)
	local team_identifier = hook.Run("OpenPermissions:GetTeamIdentifier", team_index)
	if (team_identifier) then
		team_identifier_index[team_identifier] = team_index
		return team_identifier
	end
	if (OpenPermissions.IsDarkRP and RPExtraTeams and team_index ~= 0) then
		if (RPExtraTeams[team_index]) then
			local team_identifier = RPExtraTeams[team_index].OPENPERMISSIONS_IDENTIFIER or RPExtraTeams[team_index].GAS_IDENTIFIER or RPExtraTeams[team_index].command
			team_identifier_index[team_identifier] = team_index
			return team_identifier
		end
	else
		local team_identifier = team.GetName(team_index)
		team_identifier_index[team_identifier] = team_index
		return team_identifier
	end
end

function OpenPermissions:GetTeamFromIdentifier(team_identifier)
	if (team_identifier == "Joining/Connecting") then return TEAM_CONNECTING end
	if (team_identifier == "Unassigned") then return TEAM_UNASSIGNED end
	if (team_identifier == "Spectator") then return TEAM_SPECTATOR end
	if (team_identifier_index[team_identifier]) then return team_identifier_index[team_identifier] end

	local team_index = hook.Run("OpenPermissions:GetTeamFromIdentifier", team_identifier)
	if (team_index) then
		team_identifier_index[team_identifier] = team_index
		return team_index
	end
	if (OpenPermissions.IsDarkRP and RPExtraTeams) then
		for _,job in ipairs(RPExtraTeams) do
			if (job.OPENPERMISSIONS_IDENTIFIER == team_identifier or job.command == team_identifier) then
				team_identifier_index[team_identifier] = job.team
				return job.team
			end
		end
	else
		for i,t in ipairs(team.GetAllTeams()) do
			if (t.Name == team_identifier) then
				team_identifier_index[team_identifier] = i
				return i
			end
		end
	end
end

local category_identifier_index = {}
function OpenPermissions:DarkRP_GetCategoryIdentifier(category_index)
	local category_identifier = hook.Run("OpenPermissions:DarkRP_GetCategoryIdentifier", category_index)
	if (category_identifier) then
		category_identifier_index[category_identifier] = category_index
		return category_identifier
	end

	local category = DarkRP.getCategories().jobs[category_index]
	local category_identifier = category.OPENPERMISSIONS_IDENTIFIER or category.GAS_IDENTIFIER or category.name

	category_identifier_index[category_identifier] = category_index
	return category_identifier
end

function OpenPermissions:DarkRP_GetCategoryFromIdentifier(category_identifier)
	if (category_identifier_index[category_identifier]) then return category_identifier_index[category_identifier] end

	local category_index = hook.Run("OpenPermissions:DarkRP_GetCategoryFromIdentifier", category_identifier)
	if (category_index) then
		category_identifier_index[category_index] = category_identifier
		return category_index
	end

	for i,category in pairs(DarkRP.getCategories().jobs) do
		local category_id = category.OPENPERMISSIONS_IDENTIFIER or category.GAS_IDENTIFIER or category.name
		if (category_id == category_identifier) then
			category_identifier_index[category_id] = i
			return i
		end
	end
end

--## Misc ##--

function OpenPermissions:table_IsEmpty(tbl)
	return next(tbl) == nil
end

function OpenPermissions:table_IsIdentical(tbl1, tbl2)
	local function r(tbl1, tbl2)
		for key, val in pairs(tbl1) do
			if (tbl2[key] == nil) then
				return false
			elseif (type(val) == "table") then
				if (r(val, tbl2[key]) == false) then
					return false
				end
			elseif (tbl2[key] ~= val) then
				return false
			end
		end
		for key, val in pairs(tbl2) do
			if (tbl1[key] == nil) then
				return false
			elseif (type(val) == "table") then
				if (r(val, tbl1[key]) == false) then
					return false
				end
			elseif (tbl1[key] ~= val) then
				return false
			end
		end
	end
	return r(tbl1, tbl2) ~= false
end

--## Enums ##--

OpenPermissions.ADDON = 0
OpenPermissions.PERMISSION = 1
OpenPermissions.CATEGORY = 2
OpenPermissions.SUBPERMISSION = 3

OpenPermissions.PermissionsRegistry = OpenPermissions:CreatePermissionsRegistry()
OpenPermissions.DefaultPermissions = {}

--## Networking ##--

if (SERVER) then
	-- Convert old file format to new
	if (file.Exists("openpermissions.dat", "DATA") and not file.Exists("openpermissions_v2.dat", "DATA")) then
		local read_file = file.Read("openpermissions.dat", "DATA")
		if (not read_file) then
			OpenPermissions:Print("Failed to read saved permissions data", "[ERROR]", OpenPermissions.COLOR_RED)
		else
			read_file = util.Decompress(read_file)
			if (not read_file) then
				OpenPermissions:Print("Failed to decompress saved permissions data", "[ERROR]", OpenPermissions.COLOR_RED)
			else
				local no_errors, deserialized = pcall(OpenPermissions.pon.decode, read_file)
				if (not no_errors) then
					OpenPermissions:Print("Failed to deserialize decompressed saved permissions data", "[ERROR]", OpenPermissions.COLOR_RED)
				else
					--OpenPermissions:Print("Saved permissions data successfully loaded", "[INFO]", OpenPermissions.COLOR_GREEN)

					-- Restructure
					for access_group_str, permissions in pairs(deserialized) do
						local access_group, accessor = access_group_str:match("(%d) (.+)")
						OpenPermissions.PermissionsRegistry[access_group] = OpenPermissions.PermissionsRegistry[access_group] or {}
						OpenPermissions.PermissionsRegistry[access_group][accessor] = {}
						for permission_id_str, permission in pairs(permissions) do
							OpenPermissions.PermissionsRegistry[access_group][accessor][permission_id_str] = permission
						end
					end

					-- Save new data
					OpenPermissions:SerializeRegistry(OpenPermissions.REGISTRY.FLAT_FILE)

					file.Rename("openpermissions.dat", "openpermissions_v1.dat")
				end
			end
		end
	end

	if (file.Exists("openpermissions_v2.dat", "DATA")) then
		local no_errors = xpcall(OpenPermissions.DeserializeRegistry, function(err)
			OpenPermissions:Print("Failed to deserialize decompressed saved permissions data", "[ERROR]", OpenPermissions.COLOR_RED)

			print(err)
			debug.Trace()
		end, OpenPermissions, OpenPermissions.REGISTRY.FLAT_FILE)

		if (no_errors) then
			OpenPermissions:Print("Saved permissions data successfully loaded", "[INFO]", OpenPermissions.COLOR_GREEN)
		end
	end
	net.Receive("OpenPermissions.SavePermissions", function(_, ply)
		if (not OpenPermissions:IsOperator(ply)) then return end
		OpenPermissions:DeserializeRegistry(OpenPermissions.REGISTRY.NETWORKED)
		OpenPermissions:SerializeRegistry(OpenPermissions.REGISTRY.FLAT_FILE)

		net.Start("OpenPermissions.PermissionsRegistry")
			OpenPermissions:StartNetworkTable(OpenPermissions.PermissionsRegistry, true, true)
			OpenPermissions:StartNetworkTable(OpenPermissions.DefaultPermissions, true)
		net.SendOmit(ply)
	end)
	net.Receive("OpenPermissions.PermissionsRegistry", function(_, ply)
		net.Start("OpenPermissions.PermissionsRegistry")
			OpenPermissions:StartNetworkTable(OpenPermissions.PermissionsRegistry, true)
			OpenPermissions:StartNetworkTable(OpenPermissions.DefaultPermissions, true)
		net.Send(ply)
	end)
else
	net.Receive("OpenPermissions.PermissionsRegistry", function()
		OpenPermissions:DeserializeRegistry(OpenPermissions.REGISTRY.NETWORKED)
		OpenPermissions.DefaultPermissions = OpenPermissions:ReceiveNetworkTable()
		OpenPermissions:Print("Received permissions registry", "[INFO]")
	end)
	if (OpenPermissions_PermissionsRegistry_InitPostEntity) then
		net.Start("OpenPermissions.PermissionsRegistry")
		net.SendToServer()
	else
		hook.Add("InitPostEntity", "OpenPermissions.PermissionsRegistry", function()
			OpenPermissions_PermissionsRegistry_InitPostEntity = true
			net.Start("OpenPermissions.PermissionsRegistry")
			net.SendToServer()
		end)
	end
end
--lua/autorun/pd2_swat_shield_zeal_player_npc.lua:
return gluapack()()
--lua/autorun/pet_loader.lua:
return gluapack()()
--lua/autorun/pet_loader.lua:
local kinds = {
    ["Akali Dragon"] = {
        Model = "models/gonzo/akalid_pet.mdl",
        Class = "akalid"
    },
    ["Buglet"] = {
        Model = "models/gonzo/buglet_pet.mdl",
        Class = "buglet"
    },
    ["Fox"] = {
        Model = "models/gonzo/fox_pet.mdl",
        Class = "fox"
    },
    ["Gargoyle"] = {
        Model = "models/gonzo/gargoyle_pet.mdl",
        Class = "gargoyle"
    },
    ["Tiger"] = {
        Model = "models/gonzo/tiger_pet.mdl",
        Class = "tiger"
    },
    ["Griffin"] = {
        Model = "models/gonzo/griffin_pet.mdl",
        Class = "griffin"
    }
}

function AddLeagueOfPet(name, model, class)
    local ENT = {}
    ENT.Base = "pet_base"
    ENT.ClassName = "pet_" .. class
    ENT.Type = "anim"
    ENT.AutomaticFrameAdvance = true
    ENT.Category = "League Of Pets"
    ENT.Author = "Gonzo"
    ENT.Spawnable = true

    ENT.PrintName = name
    ENT.PetModel = model

    scripted_ents.Register(ENT, "pet_" .. class, true)
end

hook.Add("PopulatePets", "Default.Pets", function()
    for k, v in pairs(kinds) do
        AddLeagueOfPet(k, v.Model, v.Class)
    end
end)

hook.Run("PopulatePets")
--lua/autorun/polisozelharekat_npc_rebs.lua:
return gluapack()()
--lua/autorun/polisozelharekat_rebs.lua:
player_manager.AddValidModel( "POH Maskeli", "models/player/icpd/swat/male_gta_masked.mdl" )

list.Set( "PlayerOptionsModel", "POH Maskeli", "models/player/icpd/swat/male_gta_masked.mdl" )

player_manager.AddValidHands( "POH Maskeli", "models/weapons/icpd/swat/c_arms_swat_male_white.mdl", 0, "0" )

player_manager.AddValidModel( "Polis Ozel Harekat 01", "models/player/icpd/swat/male_01.mdl" )

list.Set( "PlayerOptionsModel", "Polis Ozel Harekat 01", "models/player/icpd/swat/male_01.mdl" )

player_manager.AddValidHands( "Polis Ozel Harekat 01", "models/weapons/icpd/swat/c_arms_swat_male_black.mdl", 0, "0" )

player_manager.AddValidModel( "Polis Ozel Harekat 02", "models/player/icpd/swat/male_02.mdl" )

list.Set( "PlayerOptionsModel", "Polis Ozel Harekat 02", "models/player/icpd/swat/male_02.mdl" )

player_manager.AddValidHands( "Polis Ozel Harekat 02", "models/weapons/icpd/swat/c_arms_swat_male_white.mdl", 0, "0" )

player_manager.AddValidModel( "Polis Ozel Harekat 03", "models/player/icpd/swat/male_03.mdl" )

list.Set( "PlayerOptionsModel", "Polis Ozel Harekat 03", "models/player/icpd/swat/male_03.mdl" )

player_manager.AddValidHands( "Polis Ozel Harekat 03", "models/weapons/icpd/swat/c_arms_swat_male_black.mdl", 0, "0" )

player_manager.AddValidModel( "Polis Ozel Harekat 04", "models/player/icpd/swat/male_04.mdl" )

list.Set( "PlayerOptionsModel", "Polis Ozel Harekat 04", "models/player/icpd/swat/male_04.mdl" )

player_manager.AddValidHands( "Polis Ozel Harekat 04", "models/weapons/icpd/swat/c_arms_swat_male_white.mdl", 0, "0" )

player_manager.AddValidModel( "Polis Ozel Harekat 05", "models/player/icpd/swat/male_05.mdl" )

list.Set( "PlayerOptionsModel", "Polis Ozel Harekat 05", "models/player/icpd/swat/male_05.mdl" )

player_manager.AddValidHands( "Polis Ozel Harekat 05", "models/weapons/icpd/swat/c_arms_swat_male_white.mdl", 0, "0" )

player_manager.AddValidModel( "Polis Ozel Harekat 06", "models/player/icpd/swat/male_06.mdl" )

list.Set( "PlayerOptionsModel", "Polis Ozel Harekat 06", "models/player/icpd/swat/male_06.mdl" )

player_manager.AddValidHands( "Polis Ozel Harekat 06", "models/weapons/icpd/swat/c_arms_swat_male_white.mdl", 0, "0" )

player_manager.AddValidModel( "Polis Ozel Harekat 07", "models/player/icpd/swat/male_07.mdl" )

list.Set( "PlayerOptionsModel", "Polis Ozel Harekat 07", "models/player/icpd/swat/male_07.mdl" )

player_manager.AddValidHands( "Polis Ozel Harekat 07", "models/weapons/icpd/swat/c_arms_swat_male_white.mdl", 0, "0" )

player_manager.AddValidModel( "Polis Ozel Harekat 08", "models/player/icpd/swat/male_08.mdl" )

list.Set( "PlayerOptionsModel", "Polis Ozel Harekat 08", "models/player/icpd/swat/male_08.mdl" )

player_manager.AddValidHands( "Polis Ozel Harekat 08", "models/weapons/icpd/swat/c_arms_swat_male_white.mdl", 0, "0" )

player_manager.AddValidModel( "Polis Ozel Harekat 09", "models/player/icpd/swat/male_09.mdl" )

list.Set( "PlayerOptionsModel", "Polis Ozel Harekat 09", "models/player/icpd/swat/male_09.mdl" )

player_manager.AddValidHands( "Polis Ozel Harekat 09", "models/weapons/icpd/swat/c_arms_swat_male_white.mdl", 0, "0" )

--addons/undertale/lua/psa_undertale/psa_undertale.lua:
-- This script is copyright of !cake, STEAM_0:1:19269760, http://steamcommunity.com/profiles/76561197998805249
-- Undertale is copyright of Toby Fox
-- Undertale audio samples are copyright of Toby Fox

PSA = PSA or {}
PSA.Undertale = PSA.Undertale or {}

PSA.Undertale.Commands = {}
PSA.Undertale.Commands [#PSA.Undertale.Commands + 1] = { CommandName = "psa",       TextStyle = nil       }
PSA.Undertale.Commands [#PSA.Undertale.Commands + 1] = { CommandName = "undertale", TextStyle = nil       }
PSA.Undertale.Commands [#PSA.Undertale.Commands + 1] = { CommandName = "sans",      TextStyle = "Sans"    }
PSA.Undertale.Commands [#PSA.Undertale.Commands + 1] = { CommandName = "papyrus",   TextStyle = "Papyrus" }
PSA.Undertale.Commands [#PSA.Undertale.Commands + 1] = { CommandName = "flowey",    TextStyle = "Flowey"  }
PSA.Undertale.Commands [#PSA.Undertale.Commands + 1] = { CommandName = "toriel",    TextStyle = "Toriel"  }
PSA.Undertale.Commands [#PSA.Undertale.Commands + 1] = { CommandName = "temmie",    TextStyle = "Temmie"  }

include ("ulx.lua")

function PSA.Class (methodTable)
	local metatable = { __index = methodTable }
	
	return function (...)
		local instance = {}
		setmetatable (instance, metatable)
		
		if instance.ctor then
			instance:ctor (...)
		end
		
		return instance
	end
end

if SERVER then
	include ("psa_undertale_sv.lua")
elseif CLIENT then
	include ("psa_undertale_cl.lua")
end
--addons/undertale/lua/psa_undertale/psa_undertale_cl.lua:
-- This script is copyright of !cake, STEAM_0:1:19269760, http://steamcommunity.com/profiles/76561197998805249
-- Undertale is copyright of Toby Fox
-- Undertale audio samples are copyright of Toby Fox

concommand.Add ("psa_undertale_export_sounds",
	function ()
		local sounds = file.Find ("data/undertale/*.raw", "GAME")
		local data = {}
		for i = 1, #sounds do
			local name = string.match (sounds [i], "[^%.]+")
			data [#data + 1] = "PSA.Undertale.Resources.audio_"
			data [#data + 1] = name
			data [#data + 1] = " = "
			data [#data + 1] = string.format ("%q", util.Compress (file.Read ("data/undertale/" .. sounds [i], "GAME")))
			data [#data + 1] = "\r\n"
		end
		
		SetClipboardText (table.concat (data))
	end
)

-- Undertale is copyright of Toby Fox
-- Undertale audio samples are copyright of Toby Fox
PSA.Undertale.Resources = {}
include ("resources_00.lua")
include ("resources_01.lua")
include ("resources_02.lua")

for resourceName, compressedData in pairs (PSA.Undertale.Resources) do
	if string.byte (compressedData) == 0x5D then
		PSA.Undertale.Resources [resourceName] = util.Decompress (compressedData)
	end
end

local oneOver32768 = 1 / 32768
function PSA.Undertale.LoadSoundInt16Mono (name, sampleRate, int16Array)
	local sampleDuration = 1 / sampleRate
	
	name = string.lower (name)
	name = name .. "_" .. sampleRate .. "_" .. string.format ("%08x", util.CRC (int16Array))
	local sampleCount = #int16Array / 2
	
	local iterator = string.gmatch (int16Array, "..?")
	sound.Generate (name, sampleRate, sampleCount * sampleDuration,
		function (t)
			local c = iterator () or "\x00\x00"
			local uint80, uint81 = string.byte (c, 1, 2)
			uint81 = uint81 or 0
			local int16 = uint81 * 0x0100 + uint80
			if int16 >= 0x8000 then
				int16 = int16 - 65536
			end
			return int16 * oneOver32768
		end
	)
	
	return name
end

function PSA.Undertale.CreateFont (fontFamily, size, weight, antialias, blurSize)
	blurSize = blurSize or 0
	
	if antialias == nil then antialias = true end
	
	local fontName = fontFamily .. size .. "W" .. weight .. "A" .. (antialias and 1 or 0) .. "B" .. blurSize
	surface.CreateFont (fontName,
		{
			font      = fontFamily,
			size      = size,
			weight    = weight,
			antialias = antialias,
			blursize  = blurSize
		}
	)
	return fontName
end

PSA.Undertale.TextStyles = {}
PSA.Undertale.TextStyles ["Default"] =
{
	Sound            = PSA.Undertale.LoadSoundInt16Mono ("psa.undertale.resources.audio_000029ed_int16_44100hz_mono", 44100, PSA.Undertale.Resources.audio_000029ed_int16_44100hz_mono),
	Font             = system.IsWindows () and PSA.Undertale.CreateFont ("Fixedsys", 32, 500, false) or PSA.Undertale.CreateFont ("Verdana", 32, 900, false),
	GraphemeInterval = 0.05,
	PositionFilter   = function (x, y) return x, y end
}
PSA.Undertale.TextStyles ["Papyrus"] =
{
	Sound            = PSA.Undertale.LoadSoundInt16Mono ("psa.undertale.resources.audio_000029e5_int16_44100hz_mono", 44100, PSA.Undertale.Resources.audio_000029e5_int16_44100hz_mono),
	Font             = PSA.Undertale.CreateFont ("Papyrus", 32, 900, false)
}
PSA.Undertale.TextStyles ["Sans"] =
{
	Sound            = PSA.Undertale.LoadSoundInt16Mono ("psa.undertale.resources.audio_000029e6_int16_44100hz_mono", 44100, PSA.Undertale.Resources.audio_000029e6_int16_44100hz_mono),
	Font             = PSA.Undertale.CreateFont ("Comic Sans MS", 32, 500, false),
	GraphemeInterval = 0.1
}
PSA.Undertale.TextStyles ["Flowey"] =
{
	Sound            = PSA.Undertale.LoadSoundInt16Mono ("psa.undertale.resources.audio_000029ef_int16_44100hz_mono", 44100, PSA.Undertale.Resources.audio_000029ef_int16_44100hz_mono)
}
PSA.Undertale.TextStyles ["Toriel"] =
{
	Sound            = PSA.Undertale.LoadSoundInt16Mono ("psa.undertale.resources.audio_000029f3_int16_44100hz_mono", 44100, PSA.Undertale.Resources.audio_000029f3_int16_44100hz_mono),
	GraphemeInterval = 0.1
}
PSA.Undertale.TextStyles ["Temmie"] =
{
	PositionFilter   = function (x, y) return x + math.random (-2, 2), y + math.random (-2, 2) end
}

for textStyle, t in pairs (PSA.Undertale.TextStyles) do
	if textStyle ~= "Default" then
		setmetatable (t, { __index = PSA.Undertale.TextStyles ["Default"] })
	end
end

function PSA.Undertale.ChooseTextStyle (text)
	local lowercaseText = string.lower (text)
	lowercaseText = string.gsub (lowercaseText, "[ \r\n\t]+", " ")
	
	if text == string.upper (text) then
		if string.find (lowercaseText, "cool") ~= nil or
		   string.find (lowercaseText, "standards") ~= nil or
		   string.find (lowercaseText, "nyeh") ~= nil then
			return "Papyrus"
		end
	end
	
	if string.find (lowercaseText, "hoi") ~= nil or
	   string.find (lowercaseText, "temmie") ~= nil or
	   string.find (text, "!!!") ~= nil or
	   string.find (text, "%.%.%.%.") ~= nil then
		return "Temmie"
	end
	
	if string.find (lowercaseText, "greet") ~= nil or
	   string.find (lowercaseText, "bad time") ~= nil or
	   string.find (lowercaseText, "brother") ~= nil or
	   string.find (lowercaseText, "dunked") ~= nil or
	   string.find (lowercaseText, "beautiful[ \r\n\t]+day") ~= nil or
	   string.find (lowercaseText, "birds[ \r\n\t]+are") ~= nil or
	   string.find (lowercaseText, "kids[ \r\n\t]+like[ \r\n\t]+you") ~= nil or
	   string.find (lowercaseText, "in[ \r\n\t]+hell") ~= nil then
		return "Sans"
	end
	
	if string.find (lowercaseText, "be good") ~= nil or
	   string.find (lowercaseText, "my child") ~= nil then
		return "Toriel"
	end
	
	return "Default"
end

local self = {}
PSA.Undertale.UndertaleTextRenderer = PSA.Class (self)

function self:ctor (text, textStyle)
	if not PSA.Undertale.TextStyles [textStyle] then textStyle = nil end
	textStyle = textStyle or PSA.Undertale.ChooseTextStyle (text)
	self.TextStyle = textStyle
	
	self.Lines = string.Split (text, "\n")
	self.LineProgress = { 1 }
	
	self.FadeStartTime    = math.huge
	self.FadeDuration     = 1
	
	self.LastGraphemeTime = nil
	self.LastLine         = 1
	
	self.Finished         = false
end

local textColor = Color (255, 255, 255, 255)
function self:Render (t, x, y, color)
	t = t or SysTime ()
	self.LastGraphemeTime = self.LastGraphemeTime or SysTime ()
	self:Update (t)
	
	x, y = PSA.Undertale.TextStyles [self.TextStyle].PositionFilter (x, y)
	
	surface.SetFont (PSA.Undertale.TextStyles [self.TextStyle].Font)
	local textWidth, textHeight = self:ComputeTextSize ()
	
	textColor.r = color.r
	textColor.g = color.g
	textColor.b = color.b
	textColor.a = math.min (1, math.max (0, 1 - (t - self.FadeStartTime) / self.FadeDuration)) * 255
	surface.SetTextColor (textColor)
	for i = 1, #self.Lines do
		surface.SetTextPos (x - 0.5 * textWidth, y + (i - 1) * textHeight)
		local endIndexExclusive = self.LineProgress [i] or 1
		
		local text = self.Lines [i]
		if endIndexExclusive <= #text then
			text = string.sub (text, 1, endIndexExclusive - 1)
		end
		surface.DrawText (text)
	end
	
	if textColor.a == 0 then
		self.Finished = true
	end
end

function self:IsFinished ()
	return self.Finished
end

function self:ComputeTextSize ()
	local textWidth, textHeight = surface.GetTextSize (self.Lines [1] or "")
	for i = 2, #self.Lines do
		local lineWidth = surface.GetTextSize (self.Lines [i])
		textWidth = math.max (textWidth, lineWidth)
	end
	
	return textWidth, textHeight
end

function self:Update (t)
	while t > self.LastGraphemeTime + PSA.Undertale.TextStyles [self.TextStyle].GraphemeInterval do
		if self.LastLine == #self.Lines + 1 then return end
		
		self.LastGraphemeTime = self.LastGraphemeTime + PSA.Undertale.TextStyles [self.TextStyle].GraphemeInterval
		
		-- Push self.LastLine
		if self.LineProgress [self.LastLine] == #self.Lines [self.LastLine] + 1 then
			self.LastLine = self.LastLine + 1
			self.LineProgress [self.LastLine] = 1
			
			if self.LastLine == #self.Lines + 1 then
				self.FadeStartTime = t + 0.5
			end
		else
			self.LineProgress [self.LastLine] = self.LineProgress[self.LastLine] + 1
			surface.PlaySound (PSA.Undertale.TextStyles [self.TextStyle].Sound)
		end
	end
end

PSA.Undertale.Queue = {}
PSA.Undertale.CurrentText = nil

function PSA.Undertale.Message (text, textStyle)
	PSA.Undertale.Queue [#PSA.Undertale.Queue + 1] = { Text = text, TextStyle = textStyle }
end

hook.Add ("HUDPaint", "PSA.Undertale",
	function ()
		if not PSA.Undertale.CurrentText then
			if #PSA.Undertale.Queue == 0 then return end
			PSA.Undertale.CurrentText = PSA.Undertale.UndertaleTextRenderer (PSA.Undertale.Queue [1].Text, PSA.Undertale.Queue [1].TextStyle)
			table.remove (PSA.Undertale.Queue, 1)
		end
		
		if not PSA.Undertale.CurrentText then return end
		
		PSA.Undertale.CurrentText:Render (SysTime (), 0.5 * ScrW (), 360, color_white)
		if PSA.Undertale.CurrentText:IsFinished () then
			PSA.Undertale.CurrentText = nil
		end
	end
)

-- PSA.Undertale.Message ("it's a beautiful day\noutside.")
-- PSA.Undertale.Message ("birds are singing,\nflowers are\nblooming...")
-- PSA.Undertale.Message ("on days like these,\nkids like you...")
-- PSA.Undertale.Message ("Should\nbe\nburning\nin hell.")
-- PSA.Undertale.Message ("* (You're filled with\n   DETERMINATION.)")
-- PSA.Undertale.Message ("Don't you know how to greet a new pal?")
-- PSA.Undertale.Message ("POT?\n\n\n   PAT?")

net.Receive ("PSA.Undertale",
	function (ply, len)

		local textStyleLength = net.ReadUInt (8)
		local textStyle       = net.ReadData (textStyleLength)
		local textLength      = net.ReadUInt (16)
		local text            = net.ReadData (textLength)
		PSA.Undertale.Message (text, textStyle)
	end
)
--addons/realisticcardealer/lua/autorun/rcd_loader.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/languages/sh_language_pl.lua:
RCD = RCD or {}
RCD.Language = RCD.Language or {}

RCD.Language["pl"] = {
	["undefined"] = "nieznaleziono",
	["adminMenuConfig"] = "MENU ADMINA - KONFIGURACJA",
	["configureGroupsVehicles"] = "Konfigurowanie grup i pojazdów",
	["groups"] = "GRUPY",
	["vehicles"] = "POJAZDY",
	["createGroup"] = "STWÓRZ NOWĄ GRUPĘ",
	["createVehicle"] = "STWÓRZ NOWY POJAZD",
	["dealerConfiguration"] = "KONFIGURACJA SPRZEDAWCY",
	["enterDealerName"] = "Wprowadź nazwę sprzedawcy aut",
	["groupsConfig"] = "Konfiguracja grup",
	["newPlateforms"] = "NOWE PLATFORMY SPAWNU",
	["deletePlateforms"] = "USUŃ WSZYSTKIE PLATFORMY",
	["deleteNPC"] = "USUŃ NPC'TA",
	["saveInformations"] = "ZAPISZ WSZYSTKIE INFORMACJE",
	["configureGroups"] = "KONFIGURACJA INFORMACJI GRUP",
	["rankAccess"] = "DOSTĘP RANG",
	["jobAccess"] = "DOSTĘP PRAC",
	["enterGroupName"] = "Wprowadź nazwę grup",
	["cancel"] = "ANULUJ",
	["validateCreateGroup"] = "ZATWIERDŹ I STWÓRZ GRUPĘ",
	["configureVehicleInformations"] = "Skonfiguruj informacje o pojazdach",
	["preview"] = "PODGLĄD",
	["chooseVehicleClass"] = "Wybierz klase pojazdu...",
	["chooseVehicleGroup"] = "Wybierz grupe pojazdu...",
	["enterVehicleName"] = "Wprowadź nazwę pojazdu",
	["enterVehiclePrice"] = "Wprowadź cenę pojazdu",
	["vehicleView"] = "WIDOK POJAZDU",
	["generalSettings"] = "USTAWIENIA OGÓLNE",
	["priceSettings"] = "USTAWIENIA CEN",
	["validateCreateVehicle"] = "ZATWIERDŹ I STWÓRZ POJAZD",
	["configureAddon"] = "Skonfiguruj wszystkie ustawienia addona",
	["beltConfig"] = "USTAWIENIA PASÓW",
	["engineConfig"] = "USTAWIENIA SILNIKA",
	["speedometerConfig"] = "USTAWIENIA PRĘDKOŚCIOMIERZA",
	["driveConfig"] = "USTAWIENIA JAZDY",
	["configureCarDealers"] = "USTAWIENIA SPRZEDAWCÓW AUT",
	["validateSaveSettings"] = "ZATWIERDŹ I ZAPISZ USTAWIENIA",
	["underglow"] = "Podświetlenie",
	["skins"] = "Skiny",
	["bodygroups"] = "Bodygroupy",
	["carDealer"] = "Sprzedawca Aut",
	["spawnVehicle"] = "ZESPAWNIJ POJAZD",
	["bringBack"] = "PRZYWOŁAJ SPOWROTEM",
	["testVehicle"] = "TEST POJAZDU",
	["customize"] = "PERSONALIZUJ (%s)",
	["sell"] = "SPRZEDAJ",
	["buyVehicle"] = "ZAKUP",
	["customizationTitle"] = "PERSONALIZACJA",
	["mainMenuTitle"] = "MENU GŁÓWNE",
	["modifyVehicle"] = "PERSONALIZUJ SWÓJ POJAZD",
	["buySaleVehicles"] = "ZAKUP ALBO SPRZEDAJ POJAZD",
	["vehicleOwned"] = "POSIADANY POJAZD",
	["vehicleForSale"] = "POJAZD NA SPRZEDAŻ",
	["allowed"] = "DOZWOLONE",
	["cantCustomizeVehicle"] = "Nie możesz personalizować tego pojazdu \n przepraszamy za niedogodności",
	["testDrive"] = "Jazda testowa",
	["testDriveEnd"] = "Jazda testowa zakończy się za %ss",
	["addonNotInstalled"] = "Addon %s nie jest zainstalowan",
	["vehicleTooFar"] = "Twój pojazd jest za daleko by go personalizować",
	["customizeVehicleText"] = "Spersonalizuj swój pojazd za %s",
	["invalidUsergroup"] = "Nie masz odpowiedniej rangi by wykonać tą czynność",
	["invalidJob"] = "Nie masz odpowiedniej pracy by wykonać tą czynność",
	["cantAfford"] = "Nie masz wystarczająco pięniedzy by to zrobić",
	["buyVehicleText"] = "Kupiłeś %s za %s",
	["cantReturnVehicle1"] = "Nie można sprzedać pojazdu, gdy jest on wyciągnięty",
	["sellVehicleText"] = "Sprzedałeś swój pojazd %s za %s",
	["testVehicleText"] = "Zacząłeś testowanie pojazdu, masz %ss",
	["vehicleAlreadyExited"] = "Ten pojazd jest już wyciągniety",
	["maxVehicleLimitReached"] = "Osiągnąłeś maksymalną ilość zespawnowanych pojazdów",
	["cantSpawnVehicle2"] = "Możesz wyciągnąć pojazd podczas testu",
	["noPlaceAvailable"] = "Nie ma wolnego miejsca, przyjdź później",
	["vehicleExitedText2"] = "Właśnie wyjąłeś pojazd %s",
	["returnAroundVehicles"] = "Właśnie odstawiłeś pojazdy, które Cię otaczają",
	["noVehiclesAround"] = "Obok ciebie nie ma żadnego pojazdu",
	["vehicleTooFarText"] = "Twój pojazd jest za daleko by go zwrócić",
	["vehicleReturned2"] = "Właśnie zwróciłeś swój pojazd",
	["carDealerNotConfigured"] = "Sprzedawca aut nie jest skonfigurowany, prosimy o kontakt z administratorem",
	["npcTooFar"] = "Jesteś za daleko od NPC by wykonać tą czynność",
	["npcNotOwnedVehicle"] = "NPC nie ma tego pojazdu",
	["cantExitVehicle2"] = "Nie możesz wyjść z pojazdu ponieważ nie jest on w bezruchu",
	["cantExitVehicle3"] = "Nie możesz wyjść z pojadu ponieważ masz zapięte pasy",
	["invalidGroupName"] = "Nazwa grupy jest niepoprawna",
	["vehicleGroupEdited"] = "Zmodyfikowałeś grupę %s",
	["vehicleGroupCreated"] = "Stworzyłeś grupę pojazdów %s",
	["invalidGroupVehicle"] = "Grupa pojazdów jest niepoprawna",
	["vehicleGroupDeleted"] = "Usunąłeś grupę pojazdów #%s",
	["invalidVehicleClass"] = "Klasa pojazdu jest niepoprawna",
	["invalidVehicleName"] = "Nazwa pojazdu jest niepoprawna",
	["invalidVehiclePrice"] = "Cena pojazdu jest niepoprawna",
	["vehicleEdited"] = "Zmodyfikowałeś pojazd %s",
	["vehicleCreated"] = "Stworzyłeś pojazd %s",
	["vehicleDeleted"] = "Usunąłeś pojazd #%s",
	["pnjUpdated"] = "Zaktualizowałeś NPC %s",
	["pnjDeleted"] = "Usunąłeś NPC #%s",
	["plateformEditMode"] = "Aktualnie jesteś trybie edycji do stworzenia platform",
	["beenSaved"] = "Zapisałeś %s platform",
	["allPlateformsDeleted"] = "Usunąłeś wszystkie platformy na serwerze",
	["serverConfigurationUpdated"] = "Zaktualizowałeś konfiguracje swojego serwera",
	["close"] = "Zamknij",
	["car"] = "Samochód",
	["returnButton"] = "Powróć",
	["maxSpeed"] = "Maksymalna prędkość",
	["horsePower"] = "Koni mechanicznych",
	["wheelsPerAxles"] = "Kół na oś",
	["posX"] = "Pozycja - X",
	["angleX"] = "Kąt - X",
	["posY"] = "Pozycja - Y",
	["AngleY"] = "Kąt - Y",
	["posZ"] = "Pozycja - Z",
	["angleZ"] = "Kąt - Z",
	["fov"] = "FOV",
	["useCustomNotification"] = "Użyj personalizowanych notyfikacji",
	["enterIntoVehicle"] = "Wejdź do pojazdu",
	["currency"] = "Waluta",
	["adminCommand"] = "Komendy admina",
	["maxVehicle"] = "Maks. pojazd",
	["testTime"] = "Czas testowy",
	["distanceToReturn"] = "Dystans do zwrócenia",
	["underglowKey"] = "Przycisk podświetlenia",
	["activateBelt"] = "Włącz moduł pasów",
	["warningSound"] = "Dźwięk ostrzegawczy",
	["beltKey"] = "Przycisk pasów bezpieczeństwa",
	["activateEngine"] = "Włącz moduł silnika",
	["engineKey"] = "Przycisk silnika",
	["timeToLunchVehicle"] = "Czas uruchomienia pojazdu",
	["cantLeaveVehicleInMotion"] = "Nie możesz wyjść z pojazdu w ruchu",
	["activateSmallAccident"] = "Włączenie drobnych wypadków",
	["activateEjectionAccident"] = "Włączenie wylatywania z pojazdu",
	["lowerSpeedToExit"] = "Zmniejsz prędkość, aby wyjść.",
	["minDamageSmallAccident"] = "Minimalne uszkodzenia dla drobnego wypadku",
	["minDamageEjectionAccident"] = "Minimalne uszkodzenia dla wyrzucenia z pojazdu",
	["activateSpeedometer"] = "Włącz prędkościomierz",
	["activateSimfphysSpeedometer"] = "Włącz prędkościomierz z simfphys dla pojazdów z simfphys",
	["speedometerSize"] = "Rozmiar prędkościomierza",
	["count"] = "Liczba",
	["space"] = "Przestrzeń",
	["defaultSkin"] = "Domyślny skin",
	["choose"] = "Wybierz",
	["skin"] = "Skin",
	["defaultColor"] = "Domyślny kolor",
	["chooseColor"] = "Wybierz kolor",
	["configureDefaultColor"] = "Konfiguruj kolor podstawowy",
	["setDefaultColor"] = "USTAW KOLOR PODSTAWOWY",
	["canModifyBodygroup"] = "Może modyfikować bodygroupy",
	["canModifySkin"] = "Może modyfikować skiny",
	["canModifyColor"] = "Może modyfikować kolor",
	["canModifyUngerglow"] = "Może modyfikować podświetlenie",
	["canTestVehicle"] = "Może testować pojazd",
	["canBuyNitro"] = "Może kupić nitro",
	["priceToChangeBodygroups"] = "Cena do zmiany bodygroupy",
	["priceToChangeSkins"] = "Cena do zmiany skinów",
	["priceToChangeColors"] = "Cena do zmiany kolorów",
	["colors"] = "Kolory",
	["nitro"] = "Nitro",
	["priceToChangeUnderglow"] = "Cena do zmiany podświetlenia",
	["priceToBuyNitro"] = "Cena do zakupu nitro",
	["pourcentSell"] = "Odsetek sprzedaży",
	["noText"] = "Brak tekstu",
	["invalidText"] = "Problem tekstu",
	["language"] = "Język",
	["speedUnit"] = "Jednostka prędkości",
	["free"] = "DARMOWE",
	["buyForFree"] = "ZAKUP ZA DARMO",
	["customizePrice"] = "Nie masz wystarczająco pięniedzy do modyfikacji tego pojazdu",
	["notEnoughtMoney"] = "Nie masz wystarczająco pięniedzy do zrobienia tej czynności",
	["rentVehc"] = "Wypożyczyłeś pojazd %s za %s",
	["cantSwitch"] = "Nie możesz zmieniać miejsca, ponieważ masz zapięte pasy",
	["canSellWithJob"] = "Nie możesz wypożyczać pojazdów kiedy jesteś na pracy sprzedawcy aut",
	["brakePower"] = "Moc hamowania",
	["modifyRentVehicle"] = "Zmodyfikowałeś informację o pojeździe",
	["refundRentVehicle"] = "Zwrócono Ci pieniądze za %s",
	["turnSpeed"] = "Prędkość obrotowa",
	["mass"] = "Masa",
	["owned"] = "POSIADANY",
	["cardealerJobSettings"] = "KONFIGURACJA PRACY SPRZEDAWCY AUT",
	["cardealerJobDiscount"] = "Odsetka ceny pojazdu przy sprzedaży przez gracza",
	["minCommissionPrice"] = "Minimalna cena prowizji",
	["maxCommissionPrice"] = "Maksymalna cena prowizji",
	["alreadyBought"] = "Nie możesz kupić pojazdy, ponieważ już go posiadasz",
	["notGoodTeam"] = "Nie masz do tego odpowiedniej pracy",
	["rentPrice"] = "Cena wynajmu dla pracy sprzedawcy aut",
	["vcmodTransfert"] = "Przenieś wszystkie dane z VCMOD",
	["wcdTransfert"] = "Przenieś wszystkie dane z WCD",
	["advancedTransfert"] = "Przenieś wszystkie dane z ACD",
	["modernTransfert"] = "Przenieś wszystkie dane z MODERN",
	["compatibilities"] = "USTAWIENIA KOMPATYBILNOŚCI",
	["transfertStart"] = "Rozpocząłeś przesyłanie danych, może to trochę potrwać...",
	["alreadyTransfert"] = "Te dane zostały już przesłane",
	["problem"] = "Wystąpił problem, proszę spróbować ponownie",
	["invoiceOptions"] = "Opcje",
	["invoiceCarName"] = "Nazwa auta",
	["invoiceOptionPrice"] = "Opcje cen",
	["invoiceTotalPrice"] = "Cena ogółem",
	["sellerSignature"] = "Podpis sprzedawcy",
	["buyerSignature"] = "Podpis nabywcy",
	["invoice"] = "Faktura",
	["seller"] = "Sprzedawca : %s",
	["chooseSkin"] = "Wybierz Skin",
	["chooseVehicle"] = "Wybierz pojazd",
	["sign"] = "Podpisz",
	["print"] = "Wydrukuj",
	["openAdminConfiguration"] = "OTWÓRZ KONFIGURACJE ADMINISTRATORA",
	["selectVehicle"] = "Musisz wybrać pojazd",
	["noVehicles"] = "Nie masz żadnych pojazdów do personalizacji",
	["toolName"] = "Ustaw NPC",
	["toolDesc"] = "Ustaw NPC i go skonfiguruj",
	["toolLeft1"] = "Naciśnij lewym przyciskiem myszy, aby utworzyć platformy.",
	["toolLeft2"] = "Naciśnij lewym przyciskiem myszy, aby stworzyć lub zmodyfikować NPC.",
	["toolRight1"] = "Kliknij prawym przyciskiem myszy, aby usunąć ostatnią umieszczoną platformę.",
	["toolRight2"] = "Kliknij prawym przyciskiem myszy na NPC, aby ją usunąć.",
	["toolReload1"] = "Naciśnij przycisk PRZEŁADOWANIA, aby zapisać platformy",
	["toolReload2"] = "Naciśnij przycisk PRZEŁADOWANIA, aby załadować wszystkie NPC.",
	["invoiceLimit"] = "Osiągnąłeś limit faktur",
	["stand"] = "STANOWISKO",
	["pressE"] = "WCIŚNIJ E",
	["yourCommission"] = "Twoje prowizje",
	["rentVehicle"] = "Wynajmij pojazd na %s",
	["saveRentInformation"] = "ZAPISZ INFORMACJE",
	["startEngineProblem"] = "Podczas uruchamiania pojazdu występuje problem z silnikiem",
	["giveVehicle"] = "Dałeś pojazd %s dla tego STEAMID %s",
	["carDealerJobConfig"] = "Nazwa pracy sprzedawcy aut",
	["areYouSure"] = "JESTEŚ PEWIEN ?",
	["reset"] = "RESET",
	["acceptedInvoice"] = "%s właśnie kupił pojazd %s za %s",
	["cantAcceptYourInvoice"] = "Nie możesz zaakceptować własnej faktury",
	["import"] = "Import",
	["standTitle"] = "SPRZEDAWCA AUT",
	["sellVehicle"] = "Sprzedaj Pojazd",
	["rentVehicleSpace"] = "Nie masz miejsca na wynajem pojazdu",
	["nitroKey"] = "Przycisk do Nitro",
	["nitroSpeed"] = "Mnożnik szybkości nitro",
	["minSpeedNitro"] = "Min. prędkość do aktywacji nitro",
	["cantSell"] = "Nie możesz sprzedać tego pojazdu",
	["cantSellSetting"] = "Nie może sprzedać tego pojazdu",
	["playersManagement"] = "Zarządzanie graczami",
	["open"] = "Otwórz",
	["searchDisconnected"] = "ODŁĄCZONY GRACZ",
	["connectedPlayers"] = "PODŁĄCZENI GRACZE",
	["selectedPlayer"] = "WYBRANY GRACZ",
	["allVehicles"] = "WSZYSTKIE POJAZDU",
	["adminMenuPlayer"] = "MENU ADMINA - GRACZE",
	["adminMenuPlayerDesc"] = "Zarządzaj pojazdami kupionymi przez graczy",
	["modifiedInformation"] = "Zmieniłeś informacje o %s",
	["searchSteamId2"] = "Szukaj przez SteamID / SteamID64",
	["refreshList"] = "ODŚWIEŻ LISTE",
	["searchPlayer"] = "SZUKAJ GRACZA",
	["savePlayerInfo"] = "ZAPISZ INFORMACJE GRACZA",
	["nitroConfig"] = "KONFIGURACJA NITRO",
	["nitroDuration"] = "Czas działania nitro",
	["nitroCooldowns"] = "Czas przeładowywania nitro",
	["cooldownsNitroNotify"] = "Twoje nitro nie jest gotowe do następnego załadunku przed następne %ss",
	["alreadyRented"] = "Już wynająłeś ten pojazd",
	["sellVehicleRented"] = "Otrzymałeś %s za sprzedaż pojazdu %s",
    ["boatSettingText"] = "Czy pojazd jest łodzią?",
	["disableBeltVehicle"] = "Wyłącz moduł pasów bezpieczeństwa dla tego pojazdu",
	["disableEngineVehicle"] = "Wyłączenie modułu silnika dla tego pojazdu",
}
--addons/realisticcardealer/lua/realistic_cardealer/client/cl_fonts.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/vgui/cl_dmodel.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/vgui/cl_dtextentry.lua:
local PANEL = {}

function PANEL:Init()
    self.entry = vgui.Create("DTextEntry", self)
    self.entry:Dock(FILL)
    self.entry:DockMargin(RCD.ScrW*0.0035, 0, 0, 0)
    self.entry:SetText("")
    self.entry:SetDrawLanguageID(false)
    self.entry:SetFont("RCD:Font:13")
    
    self.entry.RCDPlaceHolder = ""
    self.entry.RCDBackgroundColor = RCD.Colors["white5"]
    self.entry.RCDRounded = 0

    self.entry.Paint = function(pnl,w,h)
        pnl:DrawTextEntryText(RCD.Colors["white100"], RCD.Colors["white100"], RCD.Colors["white100"])
    end

    self.entry.OnGetFocus = function()
        if string.Trim(self.entry:GetValue()) == "" or tostring(self.entry:GetValue()) == tostring(self.entry.RCDPlaceHolder) then
            self.entry:SetValue("")
        end
    end
    
    self.entry.OnLoseFocus = function()
        if string.Trim(self.entry:GetValue()) == "" then
            self.entry:SetText(self.entry.RCDPlaceHolder)
        end
    end
 /* 76561198447872548 */
end

function PANEL:BackGroundColor(color)
    self.entry.RCDBackgroundColor = color
end

function PANEL:SetPlaceHolder(text)
    self.entry.RCDPlaceHolder = text
    self.entry:SetText(self.entry.RCDPlaceHolder)
end

function PANEL:SetNumeric()
    self.entry:SetNumeric(true)
end

function PANEL:SetRounded(number)
    self.entry.RCDRounded = (number or 0)
end

function PANEL:GetText()
    return self.entry:GetText()
end


function PANEL:SetText(text)
    return self.entry:SetText(text)
end

function PANEL:Paint(w,h) 
    draw.RoundedBox(self.entry.RCDRounded, 0, 0, w, h, self.entry.RCDBackgroundColor)
end

derma.DefineControl("RCD:TextEntry", "RCD TextEntry", PANEL, "DPanel")
--addons/rsc/lua/rsc/services/oshi.at.lua:
return gluapack()()
--addons/rsc/lua/rsc/client/cl_capture.lua:
return gluapack()()
--addons/rsc/lua/rsc/client/cl_admin.lua:
return gluapack()()
--addons/sam-159/lua/sam/libs/sh_mp.lua:
if SAM_LOADED then return end

local sam = sam
local mp = sam.load_file("sam/libs/message_pack/sh_messagepack.lua")
local EXT_VECTOR  = 1
local EXT_ANGLE   = 2
local EXT_ENTITY  = 3
local EXT_PLAYER  = 4
local EXT_COLOR   = 5
local EXT_CONSOLE = 6

mp.packers["Entity"] = function(buffer, ent)
	local buf = {}
	mp.packers["number"](buf, ent:EntIndex())
	mp.packers["ext"](buffer, EXT_ENTITY, buf[1])
end
mp.packers["Vehicle"] = mp.packers["Entity"]
mp.packers["Weapon"] = mp.packers["Entity"]
mp.packers["NPC"] = mp.packers["Entity"]
mp.packers["NextBot"] = mp.packers["Entity"]
mp.packers["PhysObj"] = mp.packers["Entity"]

mp.packers["Player"] = function(buffer, ply)
	local buf = {}
	mp.packers["number"](buf, ply:UserID())
	mp.packers["ext"](buffer, EXT_PLAYER, buf[1])
end

local VECTOR = {}
mp.packers["Vector"] = function(buffer, vec)
	VECTOR[1] = vec.x
	VECTOR[2] = vec.y
	VECTOR[3] = vec.z

	local buf = {}
	mp.packers["_table"](buf, VECTOR)
	mp.packers["ext"](buffer, EXT_VECTOR, table.concat(buf))
end

local ANGLE = {}
mp.packers["Angle"] = function(buffer, ang)
	ANGLE[1] = ang.p
	ANGLE[2] = ang.y
	ANGLE[3] = ang.r

	local buf = {}
	mp.packers["_table"](buf, ANGLE)
	mp.packers["ext"](buffer, EXT_ANGLE, table.concat(buf))
end

local COLOR = {}
mp.packers["Color"] = function(buffer, col)
	COLOR[1] = col.r
	COLOR[2] = col.g
	COLOR[3] = col.b
	COLOR[4] = col.a

	local buf = {}
	mp.packers["_table"](buf, COLOR)
	mp.packers["ext"](buffer, EXT_COLOR, table.concat(buf))
end

mp.packers["console"] = function(buffer)
	mp.packers["ext"](buffer, EXT_CONSOLE, "")
end

local Entity = Entity
local Player = Player
local Color = Color
local Vector = Vector
local Angle = Angle
local unpackers = {
	[EXT_ENTITY] = function(v)
		return Entity(v)
	end,
	[EXT_PLAYER] = function(v)
		return Player(v)
	end,
	[EXT_VECTOR] = function(v)
		return Vector(v[1], v[2], v[3])
	end,
	[EXT_ANGLE] = function(v)
		return Angle(v[1], v[2], v[3])
	end,
	[EXT_COLOR] = function(v)
		return Color(v[1], v[2], v[3], v[4])
	end,
	[EXT_CONSOLE] = function(v)
		return sam.console
	end
}

mp.build_ext = function(tag, data)
	local f = mp.unpacker(data)
	local _, v = f()
	return unpackers[tag](v)
end

sam.mp = mp

--addons/sam-159/lua/sam/libs/sh_netstream.lua:
return gluapack()()
--addons/sam-159/lua/sam/sh_colors.lua:
if SAM_LOADED then return end

local colors = {
	Red   = Color(244, 67, 54),
	Blue  = Color(13, 130, 223),
	Green = Color(0, 230, 64),
	White = Color(236, 240, 241),
	Black = Color(10, 10, 10)
}

function sam.get_color(name)
	return colors[name]
end

function sam.add_color(name, color)
	if isstring(name) and IsColor(color) then
		colors[name] = color
	end
end
--addons/sam-159/lua/sam_language.lua:
return gluapack()()
--addons/sam-159/lua/sam/ranks/sh_ranks.lua:
if SAM_LOADED then return end

SAM_IMMUNITY_SUPERADMIN = 100
SAM_IMMUNITY_ADMIN = 50
SAM_IMMUNITY_USER = 1

function sam.ranks.get_ranks()
	return sam.get_global("Ranks", {})
end

function sam.ranks.get_rank(rank)
	local ranks = sam.ranks.get_ranks()
	return ranks[rank]
end

function sam.ranks.is_rank(rank)
	if sam.ranks.get_rank(rank) then
		return true
	else
		return false
	end
end

function sam.ranks.is_default_rank(rank)
	return rank == "superadmin" or rank == "admin" or rank == "user"
end

function sam.ranks.inherits_from(rank, rank_2)
	if rank == rank_2 then
		return true
	end

	while true do
		rank = sam.ranks.get_rank(rank)

		if rank then
			local inherits_from = rank.inherit
			if inherits_from == rank_2 then
				return true
			end

			rank = rank.inherit
		else
			return false
		end
	end
end

function sam.ranks.has_permission(rank, permission)
	while true do
		if rank == "superadmin" then
			return true
		end

		rank = sam.ranks.get_rank(rank)

		if rank then
			local rank_permission = rank.data.permissions[permission]
			if rank_permission ~= nil then
				return rank_permission
			end

			rank = rank.inherit
		else
			return false
		end
	end
end

function sam.ranks.get_limit(rank, limit_type)
	while true do
		if rank == "superadmin" then return -1 end

		rank = sam.ranks.get_rank(rank)

		if rank then
			local limit = rank.data.limits[limit_type]
			if limit ~= nil then
				return limit
			end

			rank = rank.inherit
		else
			return cvars.Number("sbox_max" .. limit_type, 0)
		end
	end
end

function sam.ranks.get_immunity(rank)
	rank = sam.ranks.get_rank(rank)
	return rank and rank.immunity or false
end

function sam.ranks.can_target(rank_1, rank_2)
	rank_1, rank_2 = sam.ranks.get_rank(rank_1), sam.ranks.get_rank(rank_2)
	if not rank_1 or not rank_2 then
		return false
	end
	return rank_1.immunity >= rank_2.immunity
end

function sam.ranks.get_ban_limit(rank)
	rank = sam.ranks.get_rank(rank)
	return rank and rank.ban_limit or false
end

if CLIENT then
	hook.Add("SAM.ChangedGlobalVar", "SAM.Ranks.CheckLoadedRanks", function(key, value)
		if key == "Ranks" then
			hook.Call("SAM.LoadedRanks", nil, value)
			hook.Remove("SAM.ChangedGlobalVar", "SAM.Ranks.CheckLoadedRanks")
		end
	end)
end

--addons/sam-159/lua/sam/player/cl_player.lua:
if SAM_LOADED then return end

local sam = sam
local netstream = sam.netstream

netstream.Hook("PlaySound", function(sound)
	surface.PlaySound(sound)
end)
--addons/sam-159/lua/sam/command/arguments/map.lua:
return gluapack()()
--addons/sam-159/lua/sam/command/arguments/number.lua:
if SAM_LOADED then return end

local sam, command = sam, sam.command

local get_number = function(argument, input, gsub)
	if (input == "" or input == nil) and argument.optional then
		if argument.default ~= nil then
			return argument.default
		end
		return ""
	end

	local number = tonumber(input)
	if gsub ~= false and not isnumber(number) then
		number = tonumber(input:gsub("%D", ""), 10 /*gsub returns two args*/)
	end

	return number
end

command.new_argument("number")
	:OnExecute(function(argument, input, ply, _, result, i)
		local number = get_number(argument, input)
		if number == "" then
			result[i] = nil
		elseif not number then
			ply:sam_send_message("invalid", {
				S = argument.hint or "number", S_2 = input
			})
			return false
		else
			if argument.min then
				number = math.max(number, argument.min)
			end

			if argument.max then
				number = math.min(number, argument.max)
			end

			if argument.round then
				number = math.Round(number)
			end

			result[i] = number
		end
	end)
	:Menu(function(set_result, body, buttons, argument)
		local number_entry = buttons:Add("SAM.TextEntry")
		number_entry:SetUpdateOnType(true)
		number_entry:SetNumeric(true)
		number_entry:SetTall(25)

		number_entry:SetCheck(function(number)
			number = get_number(argument, number, false)
			set_result(number)
			return number or false
		end)

		local hint = argument.hint or "number"
		if argument.default then
			hint = hint .. " = " .. tostring(argument.default)
		end
		number_entry:SetPlaceholder(hint)

		return number_entry
	end)
:End()
--addons/sam-159/lua/sam/command/arguments/rank.lua:
return gluapack()()
--addons/sui/lua/sui/libs/tdlib/cl_tdlib.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_combobox.lua:
return gluapack()()
--addons/sui/lua/sui/libs/png_encoder.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_zmenu.lua:
local BSHADOWS = sui.BSHADOWS
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name

local GetColor = SUI.GetColor

local RoundedBox = sui.TDLib.LibClasses.RoundedBox
local TextColor = sui.TDLib.LibClasses.TextColor

local OPTION_FONT = SUI.CreateFont("MenuOption", "Roboto Medium", 15, 500)

local PANEL = {}

AccessorFunc(PANEL, "m_bIsMenuComponent", "IsMenu")
AccessorFunc(PANEL, "m_bDeleteSelf", "DeleteSelf")
AccessorFunc(PANEL, "m_iMinimumWidth", "MinimumWidth")
AccessorFunc(PANEL, "m_SetInternal", "Internal")

PANEL:SetIsMenu(true)
PANEL:SetDeleteSelf(true)

local pad = 4
local max_height = 300

local PerformLayout = function(s)
	local w, h = s:ChildrenSize()
	if h > SUI.Scale(max_height) then
		h = SUI.Scale(max_height)
	end
	s:SetSize(math.max(s:GetMinimumWidth(), w), h)
end

function PANEL:Init()
	self:GetCanvas():DockPadding(0, pad, 0, pad)
	self:SetMinimumWidth(SUI.Scale(100))
	self:SetKeyboardInputEnabled(false)
	self:SetTall(pad * 2)
	self:SetAlpha(0)
	self.tall = pad * 2
	RegisterDermaMenuForClose(self)
	self:On("PerformLayoutInternal", PerformLayout)
end

function PANEL:Paint(w, h)
	local x, y = self:LocalToScreen()

	BSHADOWS.BeginShadow()
		self:RoundedBox("Background", pad, x, y, w, h, GetColor("menu"))
	BSHADOWS.EndShadow(1, 3, 3)

	self:MoveToFront()
end

function PANEL:Open(x, y)
	self:SizeToChildren(true, false)

	local w, h = self:GetSize()
	if h > SUI.Scale(max_height) then
		h = SUI.Scale(max_height)
	end

	local internal = self:GetInternal()
	internal:On("OnRemove", function()
		self:Remove()
	end)
	if not x then
		x, y = internal:LocalToScreen(0, 0)
		y = y + (internal:GetTall() + 2)
	end

	if y + h > ScrH() then
		y = y - h
	end

	if x + w > ScrW() then
		x = x - w
	end

	if y < 1 then
		y = 1
	end

	if x < 1 then
		x = 1
	end

	self:SetPos(x, y)
	self:MakePopup()
	self:AlphaTo(255, 0.23)
	self:SetDrawOnTop(true)
	self:MoveToFront()
end

local option_OnMouseReleased = function(s, mousecode)
	if s.Depressed and mousecode == MOUSE_LEFT then
		CloseDermaMenus()
	end
	DButton.OnMouseReleased(s, mousecode)
end

function PANEL:AddOption(str, callback)
	local option = self:Add("DButton")
	option:Dock(TOP)
	option:SetFont(OPTION_FONT)
	option:SetText(str)
	option:SizeToContentsX(20)
	option:SizeToContentsY(10)
	option:InvalidateLayout(true)
	option.OnMouseReleased = option_OnMouseReleased

	function option:Paint(w, h)
		RoundedBox(self, "Background", 0, 0, 0, w, h, self.Hovered and GetColor("menu_option_hover") or GetColor("menu_option"))
		TextColor(self, self.Hovered and GetColor("menu_option_hover_text") or GetColor("menu_option_text"))
	end

	option.DoClick = callback

	self.tall = self.tall + option:GetTall()
	self:SetTall(self.tall)

	return option
end

function PANEL:AddSpacer()
	local spacer = self:Add("Panel")
	spacer:Dock(TOP)
	spacer:DockMargin(0, 1, 0, 1)
	spacer:SetTall(2)

	function spacer:Paint(w, h)
		RoundedBox(self, "Background", 0, 0, 0, w, h, GetColor("menu_spacer"))
	end

	spacer:InvalidateLayout(true)
end

sui.register("Menu", PANEL, NAME .. ".ScrollPanel")
--addons/sam-159/lua/sui/vgui/sam_player_line.lua:
return gluapack()()
--addons/sam-159/lua/sam/menu/tabs/commands.lua:
return gluapack()()
--addons/sam-159/lua/sam/menu/tabs/commands.lua:
if SAM_LOADED then return end
if SERVER then return end

local sam = sam
local SUI = sam.SUI
local type = sam.type

local Line = sui.TDLib.LibClasses.Line

local COMMAND_HELP = SUI.CreateFont("CommandHelp", "Roboto", 14)
local COMMAND_RUN = SUI.CreateFont("CommandRun", "Roboto Medium", 14)

sam.menu.add_tab("https://raw.githubusercontent.com/Srlion/Addons-Data/main/icons/sam/command_window.png", function(column_sheet)
	local tab_body = column_sheet:Add("Panel")
	tab_body:Dock(FILL)
	tab_body:DockMargin(0, 1, 0, 0)

	do
		local title = tab_body:Add("SAM.Label")
		title:Dock(TOP)
		title:DockMargin(10, 10, 0, 0)
		title:SetFont(SAM_TAB_TITLE_FONT)
		title:SetText("Commands")
		title:SetTextColor(SUI.GetColor("menu_tabs_title"))
		title:SizeToContents()
	end

	local body = tab_body:Add("Panel")
	body:Dock(FILL)
	body:DockMargin(10, 5, 10, 10)

	Line(body)

	local left_body = body:Add("SAM.Panel")
	left_body:Dock(LEFT)
	left_body:SetWide(148)

	local search_entry = left_body:Add("SAM.TextEntry")
	search_entry:Dock(TOP)
	search_entry:SetNoBar(true)
	search_entry:SetPlaceholder("Search...")
	search_entry:SetRadius(4)
	search_entry:SetTall(27)

	local category_list = left_body:Add("SAM.CollapseCategory")
	category_list:Dock(FILL)
	category_list:DockMargin(0, SUI.Scale(10), 0, 0)

	local canvas = category_list:GetCanvas()

	local commands_refresh = function()
		if not IsValid(category_list) then return end

		canvas:Clear()
		table.Empty(category_list.items)
		table.Empty(category_list.categories)

		for k, v in ipairs(sam.command.get_commands()) do
			if (v.permission and not LocalPlayer():HasPermission(v.permission)) or v.menu_hide then
				continue
			end

			local item = category_list:add_item(v.name, v.category)
			item:InvalidateParent(true)
			item.help = v.help
			item.command = v

			item.names = {v.name:lower()}
			for _, aliase in ipairs(v.aliases) do
				table.insert(item.names, aliase:lower())
			end
		end
	end
	commands_refresh()

	do
		local hooks = {
			"SAM.CommandAdded", "SAM.CommandModified", "SAM.CommandRemoved",
			"SAM.RemovedPermission",
			{"SAM.ChangedPlayerRank", func = function(ply, rank, old_rank)
				if rank == old_rank then return end
				if ply == LocalPlayer() then
					commands_refresh()
				end
			end},
			{
				"SAM.RankPermissionGiven", "SAM.RankPermissionTaken", "SAM.ChangedInheritRank",
				func = function(rank)
					if rank == LocalPlayer():GetUserGroup() then
						commands_refresh()
					end
				end
			},
			{
				"SAM.AddedPermission", "SAM.PermissionModified",
				func = function(_, _, rank)
					if rank == LocalPlayer():GetUserGroup() then
						commands_refresh()
					end
				end
			}
		}
		for _, v in ipairs(hooks) do
			if type(v) == "table" then
				for _, v2 in ipairs(v) do
					hook.Add(v2, "SAM.Menu.RefreshCommands", v.func)
				end
			else
				hook.Add(v, "SAM.Menu.RefreshCommands", commands_refresh)
			end
		end
	end

	function search_entry:OnValueChange(text)
		category_list:Search(text:lower())
	end

	do
		local line = Line(body, LEFT)
		line:DockMargin(10, 0, 10, 0)
		line:SetWide(1)
	end

	local buttons = body:Add("SAM.ScrollPanel")
	buttons:Dock(FILL)

	local childs = {}
	local pos = 0
	buttons:GetCanvas():On("OnChildAdded", function(s, child)
		child:Dock(TOP)
		child:DockMargin(0, 0, 0, 5)
		child:SetAlpha(0)
		child:SetVisible(false)
		table.insert(childs, child)

		pos = pos + 1
		child:SetZPos(pos)
	end)

	local run_command = buttons:Add("SAM.Button")
	run_command:Dock(TOP)
	run_command:SetTall(25)
	run_command:SetFont(COMMAND_RUN)
	run_command:SetZPos(100)
	run_command:SetEnabled(false)

	run_command:On("DoClick", function(self)
		LocalPlayer():ConCommand("sam\"" .. self:GetText() .. "\"\"" .. table.concat(self.input_arguments, "\"\"") .. "\"")
	end)

	local help = buttons:Add("SAM.Label")
	help:Dock(TOP)
	help:SetFont(COMMAND_HELP)
	help:SetZPos(101)
	help:SetWrap(true)
	help:SetAutoStretchVertical(true)

	sam.menu.get():On("OnKeyCodePressed", function(s, key_code)
		if key_code == KEY_ENTER and IsValid(run_command) and run_command:IsEnabled() and run_command:IsMouseInputEnabled() and tab_body:IsVisible() then
			run_command:DoClick()
		end
	end)

	function category_list:item_selected(item)
		local arguments = sam.command.get_arguments()
		local command = item.command
		local command_arguments = command.args
		local input_arguments = {}

		for i = #childs, 3, -1 do
			local v = childs[i]
			if not v.no_change or not command:HasArg(v.no_change) then
				if v.no_remove ~= true then
					v:Remove()
				else
					v:Hide()
				end
			end
		end

		local NIL = {}
		for _, v in ipairs(command_arguments) do
			local func = arguments[v.name]["menu"]
			if not func then continue end

			local i = table.insert(input_arguments, NIL)
			local p = func(function(allow)
				if not IsValid(run_command) then return end
				input_arguments[i] = allow == nil and NIL or allow
				for i_2 = 1, #input_arguments do
					if input_arguments[i_2] == NIL then
						run_command:SetEnabled(false)
						return
					end
				end
				run_command:SetEnabled(true)
			end, body, buttons, v, childs)
			if p then
				p:AnimatedSetVisible(true)
			end
		end

		if #command_arguments == 0 then
			run_command:SetEnabled(true)
		end

		run_command:SetText(command.name)
		run_command:AnimatedSetVisible(true)
		run_command.input_arguments = input_arguments

		if command.help then
			help:SetText(command.help)
			help:AnimatedSetVisible(true)
			help:SizeToContents()
		else
			help:AnimatedSetVisible(false)
		end

		buttons:InvalidateLayout(true)
	end

	return tab_body
end, nil, 1)

--addons/sam-159/lua/sam/modules/chat.lua:
return gluapack()()
--addons/sam-159/lua/sam/modules/chat.lua:
if SAM_LOADED then return end

local sam, command, language = sam, sam.command, sam.language

command.set_category("Chat")

command.new("pm")
	:SetPermission("pm", "user")

	:AddArg("player", {allow_higher_target = true, single_target = true, cant_target_self = true})
	:AddArg("text", {hint = "message", check = function(str)
		return str:match("%S") ~= nil
	end})

	:GetRestArgs()

	:Help("pm_help")

	:OnExecute(function(ply, targets, message)
		if ply:sam_get_pdata("unmute_time") then
			return ply:sam_send_message("you_muted")
		end

		local target = targets[1]

		ply:sam_send_message("pm_to", {
			T = targets, V = message
		})

		if ply ~= target then
			target:sam_send_message("pm_from", {
				A = ply, V = message
			})
		end
	end)
:End()

do
	sam.permissions.add("see_admin_chat", nil, "admin")

	local reports_enabled = sam.config.get_updated("Reports", true)
	command.new("asay")
		:SetPermission("asay", "user")

		:AddArg("text", {hint = "message"})
		:GetRestArgs()

		:Help("asay_help")

		:OnExecute(function(ply, message)
			if reports_enabled.value and not ply:HasPermission("see_admin_chat") then
				local success, time = sam.player.report(ply, message)
				if success == false then
					ply:sam_send_message("You need to wait {S Red} seconds.", {
						S = time
					})
				else
					ply:sam_send_message("to_admins", {
						A = ply, V = message
					})
				end
				return
			end

			local targets = {ply}

			local players = player.GetHumans()
			for i = 1, #players do
				local v = players[i]
				if v:HasPermission("see_admin_chat") and v ~= ply then
					table.insert(targets, v)
				end
			end

			sam.player.send_message(targets, "to_admins", {
				A = ply, V = message
			})
		end)
	:End()

	if SERVER then
		sam.hook_last("PlayerSay", "SAM.Chat.Asay", function(ply, text)
			if text:sub(1, 1) == "@" then
				ply:Say("!asay " .. text:sub(2))
				return ""
			end
		end)
	end
end

do
	command.new("mute")
		:SetPermission("mute", "admin")

		:AddArg("player")
		:AddArg("length", {optional = true, default = 0, min = 0})
		:AddArg("text", {hint = "reason", optional = true, default = sam.language.get("default_reason")})

		:GetRestArgs()

		:Help("mute_help")

		:OnExecute(function(ply, targets, length, reason)
			local current_time = SysTime()

			for i = 1, #targets do
				local target = targets[i]
				target:sam_set_pdata("unmute_time", length ~= 0 and (current_time + length * 60) or 0)
			end

			sam.player.send_message(nil, "mute", {
				A = ply, T = targets, V = sam.format_length(length), V_2 = reason
			})
		end)
	:End()

	command.new("unmute")
		:SetPermission("unmute", "admin")
		:AddArg("player", {optional = true})
		:Help("unmute_help")

		:OnExecute(function(ply, targets)
			for i = 1, #targets do
				targets[i]:sam_set_pdata("unmute_time", nil)
			end

			sam.player.send_message(nil, "unmute", {
				A = ply, T = targets
			})
		end)
	:End()

	if SERVER then
		sam.hook_first("PlayerSay", "SAM.Chat.Mute", function(ply, text)
			local unmute_time = ply:sam_get_pdata("unmute_time")
			if not unmute_time then return end

			if text:sub(1, 1) == "!" and text:sub(2, 2):match("%S") ~= nil then
				local args = sam.parse_args(text:sub(2))

				local cmd_name = args[1]
				if not cmd_name then return end

				local cmd = command.get_command(cmd_name)
				if cmd then
					return
				end
			end

			if unmute_time == 0 or unmute_time > SysTime() then
				return ""
			else
				ply:sam_set_pdata("unmute_time", nil)
			end
		end)
	end
end

do
	command.new("gag")
		:SetPermission("gag", "admin")

		:AddArg("player")
		:AddArg("length", {optional = true, default = 0, min = 0})
		:AddArg("text", {hint = "reason", optional = true, default = sam.language.get("default_reason")})

		:GetRestArgs()

		:Help("gag_help")

		:OnExecute(function(ply, targets, length, reason)
			for i = 1, #targets do
				local target = targets[i]
				target.sam_gagged = true
				if length ~= 0 then
					timer.Create("SAM.UnGag" .. target:SteamID64(), length * 60, 1, function()
						RunConsoleCommand("sam", "ungag", "#" .. target:EntIndex())
					end)
				end
			end

			sam.player.send_message(nil, "gag", {
				A = ply, T = targets, V = sam.format_length(length), V_2 = reason
			})
		end)
	:End()

	command.new("ungag")
		:SetPermission("ungag", "admin")

		:AddArg("player", {optional = true})
		:Help("ungag_help")

		:OnExecute(function(ply, targets)
			for i = 1, #targets do
				local target = targets[i]
				target.sam_gagged = nil
				timer.Remove("SAM.UnGag" .. target:SteamID64())
			end

			sam.player.send_message(nil, "ungag", {
				A = ply, T = targets
			})
		end)
	:End()

	if SERVER then
		hook.Add("PlayerCanHearPlayersVoice", "SAM.Chat.Gag", function(_, ply)
			if ply.sam_gagged then
				return false
			end
		end)

		hook.Add("PlayerInitialSpawn", "SAM.Gag", function(ply)
			local gag_time = ply:sam_get_pdata("gagged")
			if gag_time then
				ply:sam_set_pdata("gagged", nil)
				RunConsoleCommand("sam", "gag", "#" .. ply:EntIndex(), gag_time / 60, "LTAP")
			end
		end)

		hook.Add("PlayerDisconnected", "SAM.Gag", function(ply)
			if ply.sam_gagged then
				ply:sam_set_pdata("gagged", timer.TimeLeft("SAM.UnGag" .. ply:SteamID64()) or 0)
			end
		end)
	end
end
--addons/sam-159/lua/sam/modules/murder.lua:
return gluapack()()
--addons/rsc/lua/sam/modules/screengrab.lua:
sam.command.new("screengrab")
    :SetPermission("screengrab")
    :SetCategory("Utility")
    :Help("Screengrab a player")
    :AddArg("player", {
        optional = true,
        single_target = true,
        cant_target_self = false,
        allow_higher_target = false,
    })
    :OnExecute(function(calling_ply, target_plys)
        if target_plys and target_plys[1] then
            return calling_ply:ConCommand("screengrab " .. target_plys[1]:SteamID64())
        end
        calling_ply:ConCommand("screengrab")
    end)
:End()

--addons/sam-159/lua/sam/modules/teleport.lua:
return gluapack()()
--addons/sam-159/lua/sam/modules/ttt.lua:
if SAM_LOADED then return end

local run = function(fn)
	if not GAMEMODE then
		timer.Simple(0, fn)
	else
		fn()
	end
end

run(function()
	if engine.ActiveGamemode() ~= "terrortown" then return end

	local sam, command, language = sam, sam.command, sam.language

	command.set_category("TTT")

	command.new("setslays")
		:SetPermission("setslays", "admin")

		:AddArg("player", {single_target = true})
		:AddArg("number", {hint = "amount", optional = true, min = 1, default = 1, round = true})

		:Help("setslays_help")

		:OnExecute(function(ply, targets, amount)
			targets[1]:sam_set_pdata("slays_amount", amount)

			sam.player.send_message(nil, "setslays", {
				A = ply, T = targets, V = amount
			})
		end)
	:End()

	command.new("removeslays")
		:SetPermission("removeslays", "admin")

		:AddArg("player", {single_target = true})

		:Help("removeslays_help")

		:OnExecute(function(ply, targets, amount)
			local target = targets[1]
			target:sam_set_pdata("slays_amount", nil)
			target:SetForceSpec(false)

			sam.player.send_message(nil, "removeslays", {
				A = ply, T = targets
			})
		end)
	:End()

	OldBeginRound = OldBeginRound or BeginRound
	function BeginRound(...)
		local players = player.GetAll()
		for i = 1, #players do
			local ply = players[i]

			local slays = ply:sam_get_pdata("slays_amount")
			if not slays then continue end

			if not ply:IsSpec() then
				ply:Kill()
			end

			GAMEMODE:PlayerSpawnAsSpectator(ply)

			ply:SetTeam(TEAM_SPEC)
			ply:SetForceSpec(true)
			ply:Spawn()

			ply:SetRagdollSpec(false) -- dying will enable this, we don't want it here

			slays = slays - 1

			if slays == 0 then
				timer.Simple(0, function()
					ply:SetForceSpec(false)
				end)
				ply:sam_set_pdata("slays_amount", nil)
			else
				ply:sam_set_pdata("slays_amount", slays)
			end

			sam.player.send_message(nil, "setslays_slayed", {
				T = {ply}, V = slays
			})
		end

		return OldBeginRound(...)
	end
end)
--addons/sam-159/lua/sam/modules/user.lua:
return gluapack()()
--addons/sam-159/lua/sam/modules/utime.lua:
if SAM_LOADED then return end

local PLAYER = FindMetaTable("Player")

function PLAYER:GetUTime()
	return self:sam_get_nwvar("TotalUTime")
end

function PLAYER:SetUTime(time)
	self:sam_set_nwvar("TotalUTime", time)
end

function PLAYER:GetUTimeStart()
	return self:sam_get_nwvar("UTimeStart")
end

function PLAYER:SetUTimeStart(time)
	self:sam_set_nwvar("UTimeStart", time)
end

function PLAYER:GetUTimeSessionTime()
	return CurTime() - self:GetUTimeStart()
end

function PLAYER:GetUTimeTotalTime()
	return self:GetUTime() + CurTime() - self:GetUTimeStart()
end

if SERVER then
	hook.Add("SAM.AuthedPlayer", "SAM.UTime", function(ply)
		ply:SetUTime(ply:sam_get_play_time())
		ply:SetUTimeStart(CurTime())
	end)
end
--addons/sam-159/lua/sam/modules/vote.lua:
if SAM_LOADED then return end

-- DONT EVER TALK TO ME ABOUT THIS CODE

local sam, command = sam, sam.command

command.set_category("Voting")

local start_vote, end_vote
if SERVER then
	local vote_on = false
	local options, players_voted

	local shuffle = function(tbl) -- https://gist.github.com/Uradamus/10323382
		for i = #tbl, 2, -1 do
			local j = math.random(i)
			tbl[i], tbl[j] = tbl[j], tbl[i]
		end
		return tbl
	end

	end_vote = function(ply, callback)
		if not vote_on then
			return ply:sam_add_text(color_white, "There is no vote to end.")
		end

		vote_on = false

		sam.set_global("Vote", nil)

		if callback then
			local tbl = {}
			local total_count = 0

			for i = 1, #options do
				local count = sam.get_global("Votings" .. i)
				total_count = total_count + count
				table.insert(tbl, {i, count})
				sam.set_global("Votings" .. i, nil)
			end

			if total_count == 0 then
				return sam.player.add_text(nil, color_white, "The vote have been canceled because nobody voted.")
			end

			table.sort(shuffle(tbl), function(a,b) return a[2] > b[2] end)

			local v = tbl[1]
			local winner, count = v[1], v[2]

			callback(winner, options[winner], count, total_count)
		else
			for i = 1, #options do
				sam.set_global("Votings" .. i, nil)
			end
		end

		options, players_voted = nil, nil

		timer.Remove("SAM.Vote")
	end

	start_vote = function(ply, callback, title, ...)
		if vote_on then
			return ply:sam_add_text(color_white, "There is an active vote, wait for it to finish.")
		end

		vote_on = true

		options, players_voted = {}, {}

		local args, n = {...}, select("#", ...)
		for i = 1, n do
			local v = args[i]
			if v then
				table.insert(options, v)
			end
		end

		sam.set_global("Vote", {title, options, CurTime()})

		for k in ipairs(options) do
			sam.set_global("Votings" .. k, 0)
		end

		timer.Create("SAM.Vote", 25, 1, function()
			end_vote(ply, callback)
		end)

		return true
	end

	sam.netstream.Hook("Vote", function(ply, index)
		if not sam.isnumber(index) or index > 5 then return end

		local votings = sam.get_global("Votings" .. index)
		if not votings then return end

		local old_index = players_voted[ply:AccountID()]
		if old_index == index then return end

		if old_index then
			sam.set_global("Votings" .. old_index, sam.get_global("Votings" .. old_index) - 1)
		end

		sam.set_global("Votings" .. index, votings + 1)

		players_voted[ply:AccountID()] = index
	end)
end

if CLIENT then
	local SUI = sam.SUI
	-- https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/includes/extensions/client/player.lua

	local VOTING_TITLE = SUI.CreateFont("VotingTitle", "Roboto Bold", 15)
	local VOTING_OPTION = SUI.CreateFont("VotingTitle", "Roboto Medium", 14)

	local bind_translation = {}
	for i = 0, 9 do
		bind_translation["slot" .. i] = i
	end

	local voting_frame

	end_vote = function()
		if IsValid(voting_frame) then
			voting_frame:Remove()
		end
		hook.Remove("PlayerBindPress", "SAM.Voting")
		hook.Remove("SAM.ChangedGlobalVar", "SAM.VotingCount")
	end

	hook.Add("SAM.ChangedGlobalVar", "Voting", function(key, value)
		if key ~= "Vote" then return end

		if not value then
			end_vote()
			return
		end

		local title, options, start_time = value[1], value[2], value[3]

		sui.TDLib.Start()

		voting_frame = vgui.Create("EditablePanel")
		voting_frame:SetSize(SUI.Scale(165), SUI.Scale(230))
		voting_frame:SetPos(5, ScrH() * 0.25)
		voting_frame:DockPadding(4, 4, 4, 4)
		voting_frame:Blur()
			:Background(Color(30, 30, 30, 240))

		local voting_title = voting_frame:Add("SAM.Label")
		voting_title:Dock(TOP)
		voting_title:SetFont(VOTING_TITLE)
		voting_title:TextColor(Color(220, 220, 220))
		voting_title:SetText(title)
		voting_title:SetWrap(true)
		voting_title:SetAutoStretchVertical(true)

		local line = voting_frame:Add("SAM.Label")
		line:Dock(TOP)
		line:TextColor(Color(220, 220, 220))
		line:SetText("-")

		local options_added = {}
		for i, v in ipairs(options) do
			local option = voting_frame:Add("SAM.Label")
			option:Dock(TOP)
			option:SetFont(VOTING_OPTION)
			option:TextColor(Color(220, 220, 220), true)
			option:SetText(i .. ". " .. v .. " (0)")
			option:SetWrap(true)
			option:SetAutoStretchVertical(true)

			options_added[i] = option
		end

		function voting_frame:Think() -- fucking gmod
			self:SizeToChildren(false, true)

			local time_left = math.floor(25 - (CurTime() - start_time))
			if time_left <= 0 then
				end_vote()
				voting_frame.Think = nil
				return
			end

			voting_title:SetText(title .. " (" .. time_left .. ")")
		end

		line = voting_frame:Add("SAM.Label")
		line:Dock(TOP)
		line:TextColor(Color(220, 220, 220))
		line:SetText("-")

		local option = voting_frame:Add("SAM.Label")
		option:Dock(TOP)
		option:SetFont(VOTING_OPTION)
		option:TextColor(Color(220, 220, 220), true)
		option:SetText("0. Close")
		option:SetWrap(true)
		option:SetAutoStretchVertical(true)

		sui.TDLib.End()

		local current_index
		hook.Add("PlayerBindPress", "SAM.Voting", function(_, bind, down)
			if not down then return end

			local index = bind_translation[bind]
			if not index then return end

			if index == 0 then
				end_vote()
				return true
			end

			if not options[index] then return true end

			if current_index then
				options_added[current_index]:TextColor(Color(220, 220, 220), true)
			end

			options_added[index]:TextColor(Color(65, 185, 255), true)
			current_index = index

			sam.netstream.Start("Vote", index)

			return true
		end)

		hook.Add("SAM.ChangedGlobalVar", "SAM.VotingCount", function(key2, count)
			if key2:sub(1, 7) ~= "Votings" then return end
			if not count then return end

			local index = tonumber(key2:sub(8))
			options_added[index]:SetText(index .. ". " .. options[index] .. " (" .. count .. ")")
		end)
	end)
end

local vote_check = function(str)
	return str:match("%S") ~= nil
end

command.new("vote")
	:SetPermission("vote", "admin")

	:AddArg("text", {hint = "title", check = vote_check})
	:AddArg("text", {hint = "option", check = vote_check})
	:AddArg("text", {hint = "option", check = vote_check})
	:AddArg("text", {hint = "option", optional = true, check = vote_check})
	:AddArg("text", {hint = "option", optional = true, check = vote_check})
	:AddArg("text", {hint = "option", optional = true, check = vote_check})

	:Help("Start a vote!")

	:OnExecute(function(ply, title, ...)
		local callback = function(_, option, count, total_count)
			sam.player.send_message(nil, "Vote {V} for {V_2} has been passed. ({V_3}/{V_4})", {
				V = title, V_2 = option, V_3 = count, V_4 = total_count
			})
		end

		if start_vote(ply, callback, title, ...) then
			sam.player.send_message(nil, "{A} started a vote with title {V}.", {
				A = ply, V = title
			})
		end
	end)
:End()

command.new("endvote")
	:SetPermission("endvote", "admin")

	:Help("End current vote.")

	:OnExecute(function(ply)
		end_vote(ply)
	end)
:End()

command.new("votekick")
	:SetPermission("votekick", "admin")

	:AddArg("player", {single_target = true})
	:AddArg("text", {hint = "reason", optional = true})

	:GetRestArgs()

	:Help("Start a vote to kick a player.")

	:OnExecute(function(ply, targets, reason)
		local target = targets[1]
		local target_name = target:Name()

		local callback = function(index, option, count, total_count)
			if not IsValid(ply) then
				sam.player.send_message(nil, "Vote was canceled because {T} left.", {
					T = target_name
				})
				return
			end

			if index == 1 then
				target:Kick("Vote was successful (" .. (reason or "none") .. ")")

				sam.player.send_message(nil, "Vote was successful, {T} has been kicked. ({V})", {
					T = targets, V = reason
				})
			else
				sam.player.send_message(nil, "Vote was unsuccessful, {T} won't be kicked.", {
					T = target_name
				})
			end
		end

		local title = "Kick " .. target_name .. "?"
		if reason then
			title = title .. " (" .. reason .. ")"
		end

		if start_vote(ply, callback, title, "Yes", "No") then
			if reason then
				sam.player.send_message(nil, "{A} started a votekick against {T} ({V})", {
					A = ply, T = targets, V = reason
				})
			else
				sam.player.send_message(nil, "{A} started a votekick against {T}", {
					A = ply, T = targets
				})
			end
		end
	end)
:End()

command.new("voteban")
	:SetPermission("voteban", "admin")

	:AddArg("player", {single_target = true})
	:AddArg("length", {optional = true, default = 60, min = 30, max = 120})
	:AddArg("text", {hint = "reason", optional = true})

	:GetRestArgs()

	:Help("Start a vote to ban a player.")

	:OnExecute(function(ply, targets, length, reason)
		local target = targets[1]
		local target_steamid, target_name = target:SteamID(), target:Name()
		local ply_steamid = ply:SteamID()

		local callback = function(index, option, count, total_count)
			if index == 1 then
				sam.player.ban_id(target_steamid, length, "Vote was successful (" .. (reason or "none") .. ")", ply_steamid)

				sam.player.send_message(nil, "Vote was successful, {T} has been banned. ({V})", {
					T = target_name, V = reason
				})
			else
				sam.player.send_message(nil, "Vote was unsuccessful, {T} won't be banned.", {
					T = target_name
				})
			end
		end

		local title = "Ban " .. target_name .. "?"
		if reason then
			title = title .. " (" .. reason .. ")"
		end

		if start_vote(ply, callback, title, "Yes", "No") then
			if reason then
				sam.player.send_message(nil, "{A} started a voteban against {T} for {V} ({V_2})", {
					A = ply, T = targets, V = sam.format_length(length), V_2 = reason
				})
			else
				sam.player.send_message(nil, "{A} started a voteban against {T} for {V}", {
					A = ply, T = targets, V = sam.format_length(length)
				})
			end
		end
	end)
:End()

command.new("votemute")
	:SetPermission("votemute", "admin")

	:AddArg("player", {single_target = true})
	:AddArg("text", {hint = "reason", optional = true})

	:GetRestArgs()

	:Help("Start a vote to mute and gag a player.")

	:OnExecute(function(ply, targets, reason)
		local _reason = reason and (" (" .. reason .. ")") or ""

		local target = targets[1]
		local target_name = target:Name()

		local callback = function(index, option, count, total_count)
			if not IsValid(target) then
				sam.player.send_message(nil, "Vote was canceled because {T} left.", {
					T = target_name
				})
				return
			end

			if index == 1 then
				RunConsoleCommand("sam", "mute", "#" .. target:EntIndex(), 0, "votemute" .. _reason)
				RunConsoleCommand("sam", "gag", "#" .. target:EntIndex(), 0, "votemute" .. _reason)

				sam.player.send_message(nil, "Vote was successful, {T} has been muted. ({V})", {
					T = target_name, V = reason
				})
			else
				sam.player.send_message(nil, "Vote was unsuccessful, {T} won't be muted.", {
					T = target_name
				})
			end
		end

		local title = "Mute " .. target_name .. "?" .. _reason
		if start_vote(ply, callback, title, "Yes", "No") then
			if reason then
				sam.player.send_message(nil, "{A} started a votemute against {T} ({V}).", {
					A = ply, T = targets, V = reason
				})
			else
				sam.player.send_message(nil, "{A} started a votemute against {T}.", {
					A = ply, T = targets
				})
			end
		end
	end)
:End()

command.new("votemap")
	:SetPermission("votemap", "admin")

	:AddArg("map", {exclude_current = true})
	:AddArg("map", {optional =  true, exclude_current = true})
	:AddArg("map", {optional =  true, exclude_current = true})

	:GetRestArgs()

	:Help("Start a vote to change map.")

	:OnExecute(function(ply, ...)
		local callback = function(_, option, count, total_count)
			sam.player.send_message(nil, "Map vote for {V} has been passed. ({V_2}/{V_3})", {
				V = option, V_2 = count, V_3 = total_count
			})

			if sam.is_valid_map(option) then
				RunConsoleCommand("sam", "map", option)
			end
		end

		local args = {...}
		for i = select("#", ...), 1, -1 do
			if args[i] == "None" then
				args[i] = nil
			end
		end
		table.insert(args, "Extend Current Map")

		if start_vote(ply, callback, "Vote for the next map!", unpack(args)) then
			sam.player.send_message(nil, "{A} started a map change vote.", {
				A = ply
			})
		end
	end)
:End()
--addons/scb-29/lua/autorun/scb.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_property_sheet.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_query_box.lua:
local ScrW, ScrH = ScrW, ScrH
local DisableClipping = DisableClipping
local SetDrawColor = surface.SetDrawColor
local DrawRect = surface.DrawRect
local BlurPanel = sui.TDLib.BlurPanel
local lerp_color = sui.lerp_color

local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name

local GetColor = SUI.GetColor

local PANEL = {}

function PANEL:SetCallback(callback)
	self.callback = callback
end

function PANEL:Init()
	self:SetSize(0, 0)

	local bottom = self:Add("Panel")
	bottom:Dock(BOTTOM)
	bottom:DockMargin(4, 10, 4, 4)
	bottom:SetZPos(100)

	local save = bottom:Add(NAME .. ".Button")
	save:SetText("SAVE")
	save:Dock(RIGHT)
	save:SetEnabled(false)
	self.save = save

	function save.DoClick()
		self.callback()
		self:Remove()
	end

	local cancel = bottom:Add(NAME .. ".Button")
	cancel:Dock(RIGHT)
	cancel:DockMargin(0, 0, 4, 0)
	cancel:SetContained(false)
	cancel:SetColors(GetColor("query_box_cancel"), GetColor("query_box_cancel_text"))
	cancel:SetText("CANCEL")
	self.cancel = cancel

	function cancel.DoClick()
		self:Remove()
	end

	bottom:SetSize(save:GetWide() * 2 + 4, SUI.Scale(30))

	local body = self:Add("Panel")
	body:Dock(FILL)
	body:DockMargin(4, 4, 4, 4)
	body:DockPadding(3, 3, 3, 3)
	body:InvalidateLayout(true)
	body:InvalidateParent(true)

	local added = 1
	function body.OnChildAdded(s, child)
		added = added + 1
		child:Dock(TOP)
		child:SetZPos(added)
		child:InvalidateLayout(true)
		s:InvalidateLayout(true)
	end
	self.body = body

	function self:Add(name)
		return body:Add(name)
	end

	local old_Paint = self.Paint
	local trans = Color(0, 0, 0, 0)
	local new_col = Color(70, 70, 70, 100)
	function self:Paint(w, h)
		lerp_color(trans, new_col)

		local x, y = self:LocalToScreen(0, 0)
		DisableClipping(true)
			BlurPanel(self)
			SetDrawColor(trans)
			DrawRect(x * -1, y * -1, ScrW(), ScrH())
		DisableClipping(false)

		old_Paint(self, w, h)
	end
end

function PANEL:ChildrenHeight()
	local body = self.body

	self.header:InvalidateLayout(true)
	local height = self.header:GetTall()

	body:InvalidateLayout(true)
	self:InvalidateLayout(true)
	height = height + select(2, body:ChildrenSize())

	height = height + SUI.Scale(30) + 14 + 6

	return height
end

function PANEL:Paint(w, h)
	if GetColor("frame_blur") then
		BlurPanel(self)
	end

	self:RoundedBox("Background", 8, 0, 0, w, h, GetColor("query_box_bg"))
end

function PANEL:Done()
	self:InvalidateChildren(true)

	self.size_to_children = function()
		local h = self:ChildrenHeight()
		self:RealSetSize(self:GetWide(), h)
		self.real_h = h
	end

	self:Center()
	self:MakePopup()
	self:DoModal(true)

	timer.Simple(0.08, function()
		self:AddAnimations(self:GetWide(), self:ChildrenHeight(), true)
	end)
end

sui.register("QueryBox", PANEL, NAME .. ".Frame")
--addons/sui/lua/sui/vgui/sui_text_entry.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_zbutton.lua:
local draw = draw
local render = render

local TDLib = sui.TDLib
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name

local lerp_color = sui.lerp_color
local contrast_color = sui.contrast_color

local BUTTON_FONT = SUI.CreateFont("Button", "Roboto Medium", 16)

local color_white = color_white
local color_transparent = Color(0, 0, 0, 0)

local PANEL = {}

AccessorFunc(PANEL, "m_Background", "Background")
AccessorFunc(PANEL, "m_bContained", "Contained", FORCE_BOOL)

sui.TDLib.Install(PANEL)
sui.scaling_functions(PANEL)

PANEL:ClearPaint()
PANEL:SetContained(true)

local Panel = FindMetaTable("Panel")
local SetMouseInputEnabled = Panel.SetMouseInputEnabled
local IsMouseInputEnabled = Panel.IsMouseInputEnabled
local SetCursor = Panel.SetCursor
local SetContentAlignment = Panel.SetContentAlignment
function PANEL:Init()
	self:ScaleInit()

	self.vertices, self.vertices_2 = {}, {}

	SetMouseInputEnabled(self, true)
	SetCursor(self, "hand")
	SetContentAlignment(self, 5)

	self:SetSize(90, 30)
	self:SetFont(BUTTON_FONT)

	self:CircleClick(nil, 7)

	self.OldPaint, self.Paint = self.Paint, self.Paint2

	self.cur_col = Color(0, 0, 0, 0)
end

function PANEL:SetEnabled(b)
	SetMouseInputEnabled(self, b)
end

function PANEL:IsEnabled()
	return IsMouseInputEnabled(self)
end

function PANEL:ContainedPaint(w, h)
	local enabled = self:IsEnabled()
	local col
	if enabled then
		col = self:GetBackground() or SUI.GetColor("button")
		self:SetTextColor(SUI.GetColor("button_text"))
	else
		col = SUI.GetColor("button_disabled")
		self:SetTextColor(SUI.GetColor("button_disabled_text"))
	end
	self:RoundedBox("Background", 4, 0, 0, w, h, col)

	if not enabled then return end

	self.circle_click_color = SUI.GetColor("button_click")

	if self.Hovered or self.Selected then
		self:RoundedBox("Hover", 4, 0, 0, w, h, SUI.GetColor("button_hover"))
	end
end

function PANEL:SetColors(hover_color, text_color)
	self.hover = hover_color
	self.text_color = text_color
end

function PANEL:Paint2(w, h)
	if self:GetContained() then
		self:ContainedPaint(w, h)
		self:OldPaint(w, h)
		return
	end

	render.ClearStencil()
	render.SetStencilEnable(true)

	render.SetStencilWriteMask(1)
	render.SetStencilTestMask(1)

	render.SetStencilFailOperation(STENCILOPERATION_REPLACE)
	render.SetStencilPassOperation(STENCILOPERATION_ZERO)
	render.SetStencilZFailOperation(STENCILOPERATION_ZERO)
	render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_NEVER)
	render.SetStencilReferenceValue(1)

	TDLib.RoundedBox(self.vertices, 4, 0, 0, w, h, color_white)

	render.SetStencilFailOperation(STENCILOPERATION_ZERO)
	render.SetStencilPassOperation(STENCILOPERATION_REPLACE)
	render.SetStencilZFailOperation(STENCILOPERATION_ZERO)
	render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_EQUAL)
	render.SetStencilReferenceValue(1)

	local cur_col = self.cur_col
	if self.Selected then
		lerp_color(cur_col, SUI.GetColor("button2_selected"))
	elseif self.Hovered then
		lerp_color(cur_col, self.hover or SUI.GetColor("button2_hover"))
	else
		lerp_color(cur_col, color_transparent)
	end

	TDLib.RoundedBox(self.vertices_2, 4, 0, 0, w, h, cur_col)

	if self.text_color then
		self.circle_click_color = self.text_color
		self:SetTextColor(self.text_color)
	else
		local col = contrast_color(cur_col)
		self.circle_click_color = col
		self:SetTextColor(col)
	end

	self:OldPaint(w, h)

	render.SetStencilEnable(false)
	render.ClearStencil()
end

sui.register("Button", PANEL, NAME .. ".Label")
--addons/sui/lua/sui/vgui/sui_zmenu.lua:
local BSHADOWS = sui.BSHADOWS
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name

local GetColor = SUI.GetColor

local RoundedBox = sui.TDLib.LibClasses.RoundedBox
local TextColor = sui.TDLib.LibClasses.TextColor

local OPTION_FONT = SUI.CreateFont("MenuOption", "Roboto Medium", 15, 500)

local PANEL = {}

AccessorFunc(PANEL, "m_bIsMenuComponent", "IsMenu")
AccessorFunc(PANEL, "m_bDeleteSelf", "DeleteSelf")
AccessorFunc(PANEL, "m_iMinimumWidth", "MinimumWidth")
AccessorFunc(PANEL, "m_SetInternal", "Internal")

PANEL:SetIsMenu(true)
PANEL:SetDeleteSelf(true)

local pad = 4
local max_height = 300

local PerformLayout = function(s)
	local w, h = s:ChildrenSize()
	if h > SUI.Scale(max_height) then
		h = SUI.Scale(max_height)
	end
	s:SetSize(math.max(s:GetMinimumWidth(), w), h)
end

function PANEL:Init()
	self:GetCanvas():DockPadding(0, pad, 0, pad)
	self:SetMinimumWidth(SUI.Scale(100))
	self:SetKeyboardInputEnabled(false)
	self:SetTall(pad * 2)
	self:SetAlpha(0)
	self.tall = pad * 2
	RegisterDermaMenuForClose(self)
	self:On("PerformLayoutInternal", PerformLayout)
end

function PANEL:Paint(w, h)
	local x, y = self:LocalToScreen()

	BSHADOWS.BeginShadow()
		self:RoundedBox("Background", pad, x, y, w, h, GetColor("menu"))
	BSHADOWS.EndShadow(1, 3, 3)

	self:MoveToFront()
end

function PANEL:Open(x, y)
	self:SizeToChildren(true, false)

	local w, h = self:GetSize()
	if h > SUI.Scale(max_height) then
		h = SUI.Scale(max_height)
	end

	local internal = self:GetInternal()
	internal:On("OnRemove", function()
		self:Remove()
	end)
	if not x then
		x, y = internal:LocalToScreen(0, 0)
		y = y + (internal:GetTall() + 2)
	end

	if y + h > ScrH() then
		y = y - h
	end

	if x + w > ScrW() then
		x = x - w
	end

	if y < 1 then
		y = 1
	end

	if x < 1 then
		x = 1
	end

	self:SetPos(x, y)
	self:MakePopup()
	self:AlphaTo(255, 0.23)
	self:SetDrawOnTop(true)
	self:MoveToFront()
end

local option_OnMouseReleased = function(s, mousecode)
	if s.Depressed and mousecode == MOUSE_LEFT then
		CloseDermaMenus()
	end
	DButton.OnMouseReleased(s, mousecode)
end

function PANEL:AddOption(str, callback)
	local option = self:Add("DButton")
	option:Dock(TOP)
	option:SetFont(OPTION_FONT)
	option:SetText(str)
	option:SizeToContentsX(20)
	option:SizeToContentsY(10)
	option:InvalidateLayout(true)
	option.OnMouseReleased = option_OnMouseReleased

	function option:Paint(w, h)
		RoundedBox(self, "Background", 0, 0, 0, w, h, self.Hovered and GetColor("menu_option_hover") or GetColor("menu_option"))
		TextColor(self, self.Hovered and GetColor("menu_option_hover_text") or GetColor("menu_option_text"))
	end

	option.DoClick = callback

	self.tall = self.tall + option:GetTall()
	self:SetTall(self.tall)

	return option
end

function PANEL:AddSpacer()
	local spacer = self:Add("Panel")
	spacer:Dock(TOP)
	spacer:DockMargin(0, 1, 0, 1)
	spacer:SetTall(2)

	function spacer:Paint(w, h)
		RoundedBox(self, "Background", 0, 0, 0, w, h, GetColor("menu_spacer"))
	end

	spacer:InvalidateLayout(true)
end

sui.register("Menu", PANEL, NAME .. ".ScrollPanel")
--addons/scb-29/lua/scb/libs/sh_types.lua:
if SCB_LOADED then return end

-- https://gist.github.com/CapsAdmin/0d9c1e77d0fc22d910e182bfeb9812e5
local getmetatable = getmetatable

do
	local types = {
		["string"] = "",
		["boolean"] = true,
		["number"] = 0,
		["function"] = function() end,
		["thread"] = coroutine.create(getmetatable),
		["Color"] = Color(0, 0, 0),
	}

	for k, v in pairs(types) do
		if not getmetatable(v) then
			debug.setmetatable(v, {MetaName = k})
		else
			getmetatable(v).MetaName = k
		end
	end
end

function scb.type(value)
	if value == nil then
		return "nil"
	end
	local meta = getmetatable(value)
	if meta then
		meta = meta.MetaName
		if meta then
			return meta
		end
	end
	return "table"
end

do
	local function add(name)
		local new_name = name
		if name == "bool" then
			new_name = "boolean"
		end
		scb["is" .. name:lower()] = function(value)
			local meta = getmetatable(value)
			if meta and meta.MetaName == new_name then
				return true
			else
				return false
			end
		end
	end

	add("string")
	add("number")
	add("bool")
	add("function")

	add("Angle")
	add("Vector")
	add("Panel")
	add("Matrix")
end

function scb.isentity(value)
	local meta = getmetatable(value)
	if meta then
		if meta.MetaName == "Entity" then
			return true
		end
		meta = meta.MetaBaseClass
		if meta then
			return meta.MetaName == "Entity"
		end
	end
	return false
end
scb.IsEntity = scb.isentity

local type = scb.type
function scb.istable(value)
	return type(value) == "table"
end
--addons/scb-29/lua/scb/vgui/scb_emojis.lua:
return gluapack()()
--lua/autorun/sentryoldmob.lua:
return gluapack()()
--addons/thirdperson/lua/thirdperson/client/ferma/cl_ferma_fbutton.lua:
return gluapack()()
--addons/thirdperson/lua/thirdperson/client/ferma/cl_ferma_ftitlebar.lua:
FERMA = FERMA or {}
FTitleBar = {}

function FTitleBar:Style( style )

    /* Defaults */
    self.FT = FERMA.CORE.Fermafy( style, self:GetParent() )
    FERMA.CORE.FermaDefaults( self )
    /* */

    /* Panel Specific Styling */
    self.FT.FTitle = style["content"] or ""
    self.FT.FColor = style["color"] or Color( 255, 255, 255 )
    self.FT.FFont = style["font-family"] or "Default"

    self.Label = vgui.Create( "FLabel", self )
    self.Label:Style
    {
        ["width"] = "100%",
        ["height"] = "100%",
        ["content"] = "   " .. self.FT.FTitle,
        ["color"] = self.FT.FColor,
        ["font-family"] = self.FT.FFont,
        ["text-align"] = 4,
        ["visibility"] = "hidden"
    }

    self.Button = vgui.Create( "FButton", self )
    self.Button:Style
    {
        ["float"] = "right",
        ["width"] = "90vh",
        ["height"] = "100%",
        ["font-family"] = "Default",
        ["content"] = "X",
        ["visibility"] = "hidden"
    }

    function self.Button.DoClick()
        self:GetParent():Remove()
    end
    /* */

end

function FTitleBar:Paint( w, h )

    /* Defaults */
    FERMA.CORE.PaintFermafy( w, h, self.FT )
    -- 76561221774735761
    /* */

end

derma.DefineControl( "FTitleBar", "A title bar for closable windows.", FTitleBar, "DPanel" )
--lua/slib/vgui/cl_sframe.lua:
local PANEL = {}

slib.setTheme("maincolor", Color(36,36,36))
slib.setTheme("accentcolor", Color(66,179,245))
slib.setTheme("margin", slib.getScaledSize(3, "x"))
slib.setTheme("textcolor", Color(255,255,255))
slib.setTheme("neutralcolor", Color(0,0,200,40))
slib.setTheme("topbarcolor", Color(44,44,44))
slib.setTheme("sidebarcolor", Color(34,34,34))
slib.setTheme("sidebarbttncolor", Color(39,39,39))
slib.setTheme("whitecolor", Color(255,255,255))
slib.setTheme("hovercolor", Color(255,255,255,100))
slib.setTheme("orangecolor", Color(130, 92, 10))
slib.setTheme("successcolor", Color(0,200,0))
slib.setTheme("failcolor", Color(200,0,0))
slib.setTheme("bgblur", true)

local topbarcolor, topbarcolor_min10, sidebarcolor, sidebarbttncolor, textcolor, accentcolor, maincolor, maincolor_7, maincolor_15, hovercolor = slib.getTheme("topbarcolor"), slib.getTheme("topbarcolor", -10), slib.getTheme("sidebarcolor"), slib.getTheme("sidebarbttncolor"), slib.getTheme("textcolor"), slib.getTheme("accentcolor"), slib.getTheme("maincolor"), slib.getTheme("maincolor", 7), slib.getTheme("maincolor", 15), slib.getTheme("hovercolor")
local accentcol_a100 = slib.getTheme("accentcolor")
accentcol_a100.a = 100

local black_a160 = Color(0,0,0,160)
local black_a140 = Color(0,0,0,140)

function PANEL:Init()
	self.topbarheight = slib.getScaledSize(30, "y")
	self.font = slib.createFont("Roboto", 21)
	self.tab = {}
	self.iterator = 0

	self.topbar = vgui.Create("EditablePanel", self)
	self.topbar:SetCursor("sizeall")
	self.topbar:SetSize(self:GetWide(), self.topbarheight)

	self.topbar.OnSizeChanged = function()
		if IsValid(self.close) then
			self.close:SetPos(self.topbar:GetWide() - self.close:GetWide() - slib.getScaledSize(3,"x"), 0)
		end
	end

	self.topbar.Paint = function(s, w, h)
		if !s.Holding and input.IsMouseDown(MOUSE_LEFT) then
				if s:IsHovered() then
					s.Move = true
				end

				s.Holding = true
				local x, y = gui.MouseX(), gui.MouseY()
				s.startedx, s.startedy = s:ScreenToLocal(x, y)
		elseif s.Holding and !input.IsMouseDown(MOUSE_LEFT) then
			s.Holding = nil
			s.Move = nil
		end

		if s.Move then
			local x, y = gui.MouseX(), gui.MouseY()
			local offsetx, offsety =  s:ScreenToLocal(x, y)
			
			self:SetPos(x - s.startedx, y - s.startedy)
		end

		draw.RoundedBoxEx(5, 0, 0, w, h, topbarcolor, true, true)

		surface.SetDrawColor(black_a160)
		surface.DrawRect(0, h - 1, w, 1)

		surface.SetDrawColor(black_a140)
		surface.DrawRect(0, h - 2, w, 1)
		draw.SimpleText(self.title, self.font, slib.getScaledSize(3,"x"), h * .5, textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
	end

	self.frame = vgui.Create("EditablePanel", self)

	self.frame.Resize = function()
		local wide = 0

		if self.tabmenu then
			wide = wide + self.tabmenu:GetWide()
		end

		self.frame:SetPos(wide,self.topbarheight)
		self.frame:SetSize(self:GetWide() - wide, self:GetTall() - self.topbarheight)
		
		for k,v in pairs(self.tab) do
			self.tab[k]:SetSize(self.frame:GetWide(), self.frame:GetTall())
		end
	end

	self.frame.Resize()

	self.MadePanel = SysTime()

	slib.wrapFunction(self, "SetSize", nil, function() return self end, true)
	slib.wrapFunction(self, "SetWide", nil, function() return self end, true)
	slib.wrapFunction(self, "Center", nil, function() return self end, true)
	slib.wrapFunction(self, "SetPos", nil, function() return self end, true)
	slib.wrapFunction(self, "MakePopup", nil, function() return self end, true)
	slib.wrapFunction(self, "DockPadding", nil, function() return self end, true)
end

function PANEL:OnRemove()
	if !IsValid(self.bgclose) then return end
	self.bgclose:Remove()
end

function PANEL:SetBG(bool, close, col, makepopup)
	if !bool and IsValid(self.bgclose) then
		self:SetParent()
		self.bgclose:Remove()
		
		return
	end

	local parent = self:GetParent()

	local w, h

	if IsValid(parent) then
		w, h = parent:GetSize() 
	else
		w, h = ScrW(), ScrH()
	end

	self.bgclose = vgui.Create("SButton", parent)
	self.bgclose:SetSize(w, h)

	if makepopup then
		self.bgclose:MakePopup()
	else
		self.bgclose:MoveToFront()
	end

	self.bgclose.DoClick = function()
		if !close then return end

		if IsValid(self.bgclose) then
			self.bgclose:Remove()
		end

		if IsValid(self) then
			self:Remove()
		end
	end

	self.bgclose.bg = col

	self.bgclose.Paint = function(s,w,h)
		if !IsValid(self) then s:Remove() end
		
		if !s.bg then return end
		surface.SetDrawColor(s.bg)
		surface.DrawRect(0,0,w,h)
	end

	self:SetParent(self.bgclose)
	self:MoveToFront()
	
	return self
end

function PANEL:SetDraggable(bool)
	if IsValid(self.topbar) then
		self.topbar:SetMouseInputEnabled(bool)
	end

	return self
end

function PANEL:setTitle(str, font)
	self.title = str

	if font then
		self.font = font
	end
	
	return self
end

function PANEL:addCloseButton()
	self.close = vgui.Create("DButton", self)
	self.close:SetSize(slib.getScaledSize(25, "y"),slib.getScaledSize(25, "y"))
	self.close:SetMouseInputEnabled(true)
	self.close:SetPos(self.topbar:GetWide() - self.close:GetWide() - slib.getScaledSize(3,"x"), self.topbarheight * .5 - self.close:GetTall() * .5)
	self.close:SetText("")

	self.close.DoClick = function()
		if isfunction(self.onClose) then
			self.onClose()
		end
		
		if self.onlyHide then
			self:SetVisible(false)
		return end

		self:Remove()
	end

	self.close.Paint = function(s,w,h)
		local width = slib.getScaledSize(2, "X")
		local height = h * .7

		draw.NoTexture()

		local wantedCol = s:IsHovered() and color_white or hovercolor

        surface.SetDrawColor(slib.lerpColor(s, wantedCol))
		surface.DrawTexturedRectRotated(w - (height * .5), h * .5 - (width * .5), width, height, 45)
		surface.DrawTexturedRectRotated(w - (height * .5), h * .5 - (width * .5), width, height, -45)
	end

	return self
end

function PANEL:OnSizeChanged()
	self.topbar:SetSize(self:GetWide(), self.topbarheight)
	self.frame.Resize()
end

function PANEL:setBlur(bool)
	self.blur = bool

	return self
end

function PANEL:setDoClick(func)
	self.DoClick = func

	return self
end

function PANEL:Paint(w, h)
	if slib.getTheme("bgblur") and self.blur then
		Derma_DrawBackgroundBlur( self, self.MadePanel )
	end
	
	draw.RoundedBox(5, 0, 0, w, h, maincolor)
end

function PANEL:addTab(name, icon)
	if !IsValid(self.tabmenu) then
		self.tabmenu = vgui.Create("DScrollPanel", self)
		self.tabmenu:SetTall(self:GetTall() - self.topbarheight)
		self.tabmenu:SetPos(0, self.topbarheight)
		self.tabmenu.font = slib.createFont("Roboto", 14)
		self.tabmenu.Paint = function(s,w,h)
			draw.RoundedBoxEx(5, 0, 0, w, h, sidebarcolor, false, false, true, false)
		end

		self.tabmenu.OnSizeChanged = function()
			self.frame.Resize()
		end

		self.frame.Resize()
	end

	self.tab[name] = vgui.Create("EditablePanel", self.frame)
	self.tab[name]:SetSize(self.frame:GetWide(), self.frame:GetTall())
	self.tab[name]:SetVisible(false)
	self.tab[name].addTab = function(tab_name)
		local w, h, tab_h = self.tab[name]:GetWide(), self.tab[name]:GetTall(), slib.getScaledSize(32, "y")
		if !IsValid(self.tab[name].topbar) then
			self.tab[name].topbar = vgui.Create("EditablePanel", self.tab[name])
			self.tab[name].topbar:Dock(TOP)
			self.tab[name].topbar:SetTall(tab_h)
			self.tab[name].topbar.Paint = function(s,w,h)
				surface.SetDrawColor(maincolor_7)
				surface.DrawRect(0,0,w,h)
			end
		end

		local frame = vgui.Create("EditablePanel", self.tab[name])
		frame:SetPos(0, tab_h)
		frame:SetSize(w, h - tab_h)
		frame:SetVisible(false)

		local tab_button = vgui.Create("SButton", self.tab[name].topbar)
		tab_button.font = slib.createFont("Roboto", 16)
		tab_button.bg = maincolor_7
		tab_button.tab = frame

		tab_button.DoClick = function()
			if IsValid(self.tab[name].selTab) and self.tab[name].selTab:IsVisible() then
				self.tab[name].selTab.tabbttn.forcehover = nil
				self.tab[name].selTab.tabbttn.bg = maincolor_7
				self.tab[name].selTab:SetVisible(false)
			end

			frame:SetVisible(true)
			self.tab[name].selTab = frame

			tab_button.bg = maincolor_15
			tab_button.forcehover = true
		end

		frame.tabbttn = tab_button

		tab_button:setTitle(tab_name)
		:Dock(LEFT)

		local childs = self.tab[name].topbar:GetChildren()
		local width = math.ceil(self.frame:GetWide() / #childs)
		for k,v in ipairs(childs) do
			v:SetWide(width)
		end

		if #childs == 1 then
			tab_button.DoClick()
		end

		return frame
	end

	local height = slib.getScaledSize(28, "y")
	self.iterator = self.iterator + 1
	local tabbttn = vgui.Create("DButton", self.tabmenu)
	tabbttn:Dock(TOP)
	tabbttn:SetZPos(self.iterator)
	tabbttn:SetTall(height)
	tabbttn:SetText("")
	tabbttn.name = name

	tabbttn.getFrame = function()
		return self.tab[name]
	end

	if icon then
		tabbttn.icon = Material(icon, "smooth")
	end

	local icosize = height * .6
	local gap = height * .20

	tabbttn.Paint = function(s,w,h)
		surface.SetDrawColor(sidebarbttncolor)
		surface.DrawRect(0, 0, w, h)

		local wantedh = self.seltab == name and h or 0
		local curH = slib.lerpNum(s, wantedh, .9, true)

		if self.seltab == name then
			surface.SetDrawColor(accentcol_a100)
			surface.DrawRect(0, h * .5 - curH * .5, w, curH)
		end

		if s.icon then
			surface.SetDrawColor(color_white)
			surface.SetMaterial(s.icon)
			surface.DrawTexturedRect(gap,gap,icosize,icosize)
		end

		draw.SimpleText(name, self.tabmenu.font, (s.icon and icosize + gap or 0) + slib.getTheme("margin"), h * .5, textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
	end

	tabbttn.DoClick = function()
		self:setActiveTab(name)

		if isfunction(self.changedTab) then
			self.changedTab(name)
		end
	end

	self.tab[name].tabbttn = tabbttn
	
	surface.SetFont(self.tabmenu.font)
	local w = select(1, surface.GetTextSize(name)) + (slib.getTheme("margin") * 4) + height

	if w > self.tabmenu:GetWide() then
		self.tabmenu:SetWide(w)
	end

	return self, tabbttn
end

function PANEL:setActiveTab(name)
	if !name then
		local childs = self.tabmenu:GetCanvas():GetChildren()
		local lowest, selected = math.huge
		for k,v in ipairs(childs) do
			local zpos = v:GetZPos()
			if zpos < lowest then
				selected = v.name
				lowest = zpos
			end

		end

		if selected then
			self:setActiveTab(selected)
		end

		return
	end

	if self.seltab and IsValid(self.tab[self.seltab]) then
		self.tab[self.seltab]:SetVisible(false)
	end

	self.seltab = name

	self.tab[name]:SetVisible(true)

	return self
end

vgui.Register("SFrame", PANEL, "EditablePanel")
--addons/eprotect_1.5.24/lua/e_protect/sh_config.lua:
eProtect = eProtect or {}

eProtect.config = eProtect.config or {}

eProtect.config["language"] = "en"

eProtect.config["prefix"] = "[eProtect] "

eProtect.config["storage_type"] = "sql_local"-- (sql_local or mysql)

eProtect.config["disablehttplogging"] = true -- If a DRM is ran after eProtect it could break if they check for HTTP modifications! If so make this true.

eProtect.config["ignoreDRM"] = false

eProtect.config["scURL"] = "https://stromic.dev/eprotect/img.php" -- This is the URL used to handle screenshots, can be self hosted here: https://github.com/Stromic/eprotect-web

eProtect.config["punishMaliciousIntent"] = true

eProtect.config["disabledModules"] = {
    ["identifier"] = false,
    ["detection_log"] = false,
    ["net_limiter"] = false,
    ["net_logger"] = false,
    ["exploit_patcher"] = false,
    ["exploit_finder"] = false,
    ["fake_exploits"] = false,
    ["data_snooper"] = false
}

eProtect.config["permission"] = {
    ["owner"] = true,
    ["superadmin"] = true
}
--addons/eprotect_1.5.24/lua/e_protect/client/cl_overrides.lua:
return gluapack()()
--addons/eprotect_1.5.24/lua/e_protect/client/cl_utils.lua:
-- devre disi
--addons/eprotect_1.5.24/lua/e_protect/languages/sh_turkish.lua:
if CLIENT then
    slib.setLang("eprotect", "tr", "sc-preview", "Ekranı Görüntüle - ")
    slib.setLang("eprotect", "tr", "net-info", "Ağ bilgisi - ")
    slib.setLang("eprotect", "tr", "ip-info", "IP bilgisi - ")
    slib.setLang("eprotect", "tr", "id-info", "ID bilgisi - ")
    slib.setLang("eprotect", "tr", "ip-correlation", "IP ilişkisi - ")
    slib.setLang("eprotect", "tr", "table-viewer", "Masa Görüntülemesi")

    slib.setLang("eprotect", "tr", "tab-general", "Genel")
    slib.setLang("eprotect", "tr", "tab-identifier", "Tanımlayıcı")
    slib.setLang("eprotect", "tr", "tab-netlimiter", "Bağ limitleyicisi")
    slib.setLang("eprotect", "tr", "tab-netlogger", "Ağ kayıtçısı")
    slib.setLang("eprotect", "tr", "tab-exploitpatcher", "Exploit Güncelleyici")
    slib.setLang("eprotect", "tr", "tab-exploitfinder", "Exploit Bulucusu")
    slib.setLang("eprotect", "tr", "tab-fakeexploits", "Sahte Exploitler")
    slib.setLang("eprotect", "tr", "tab-datasnooper", "Kayıt ağı")

    slib.setLang("eprotect", "tr", "player-list", "Oyuncu Listesi")

    slib.setLang("eprotect", "tr", "ratelimit", "Hız sınırlayıcısı")
    slib.setLang("eprotect", "tr", "ratelimit-tooltip", "Bu genel bir hız sınırlayıcısı. (Xs/Y)")

    slib.setLang("eprotect", "tr", "timeout", "Zaman Aşımı")
    slib.setLang("eprotect", "tr", "timeout-tooltip", "Bu zaman aşımı genel hız sınırlayıcısına karşıdır.")
    
    slib.setLang("eprotect", "tr", "overflowpunishment", "Taşma cezası")
    slib.setLang("eprotect", "tr", "overflowpunishment-tooltip", "Bu ceza ağı rahatlatmak için uygulanır. (1 = kick, 2 = ban)")

    slib.setLang("eprotect", "tr", "enable-networking", "Ağ oluşturmayı aktifleştir")
    slib.setLang("eprotect", "tr", "disable-networking", "Ağ oluşturmayı engelle")

    slib.setLang("eprotect", "tr", "disable-all-networking", "Tüm ağ oluşturmayı engelle")
    slib.setLang("eprotect", "tr", "disable-all-networking-tooltip", "Eğer bu aktif olursa kimse sunucuya giremez!")

    slib.setLang("eprotect", "tr", "player", "Player")
    slib.setLang("eprotect", "tr", "net-string", "Net String")
    slib.setLang("eprotect", "tr", "called", "Called")
    slib.setLang("eprotect", "tr", "len", "Len")
    slib.setLang("eprotect", "tr", "type", "Type")
    slib.setLang("eprotect", "tr", "activated", "Activated")
    slib.setLang("eprotect", "tr", "secure", "Secured")
    slib.setLang("eprotect", "tr", "ip", "IP Adress")
    slib.setLang("eprotect", "tr", "date", "Date")
    slib.setLang("eprotect", "tr", "country-code", "Country code")
    slib.setLang("eprotect", "tr", "status", "Status")

    slib.setLang("eprotect", "tr", "unknown", "Unknown")
    slib.setLang("eprotect", "tr", "secured", "Secured")

    slib.setLang("eprotect", "tr", "check-ids", "ID'leri kontrol et")
    slib.setLang("eprotect", "tr", "correlate-ip", "IP adreslerini ilişkilendir")
    slib.setLang("eprotect", "tr", "family-share-check", "Aile paylaşımını kontrol et")

    slib.setLang("eprotect", "tr", "ply-sent-invalid-data", "Bu oyuncu geçersiz data gönderdi!")
    slib.setLang("eprotect", "tr", "ply-failed-retrieving-data", "%s data alınamadı!")

    slib.setLang("eprotect", "tr", "net-limit-desc", "Buradaki sayı, insanların hız sınırlandırılmadan önce bir saniye içinde sunucuya maksimum ağ kurma sayısıdır..")

    slib.setLang("eprotect", "tr", "capture", "Screenshot")
    slib.setLang("eprotect", "tr", "check-ips", "Check IP(s)")
    slib.setLang("eprotect", "tr", "fetch-data", "Fetch Data")
elseif SERVER then
    slib.setLang("eprotect", "tr", "invalid-player", "böyle bir oyuncu yok!")
    slib.setLang("eprotect", "tr", "kick-net-overflow", "Net ağına karşı kötü niyetli eylem gerçekleştirdiğinizden dolayı atıldınız!")
    slib.setLang("eprotect", "tr", "banned-net-overflow", "Net ağına karşı kötü niyetli eylem gerçekleştirdiğinizden dolayı yasaklandınız !")
    slib.setLang("eprotect", "tr", "banned-net-exploitation", "Net ağına karşı kötü niyetli eylem gerçekleştirdiğinizden dolayı yasaklandınız!")
    slib.setLang("eprotect", "tr", "kick-malicious-intent", "Kötü niyetli eylem gerçekleştirdiğinizden dolayı sunucudan atıldınız!")
    slib.setLang("eprotect", "tr", "banned-malicious-intent", "Kötü niyetli eylem gerçekleştirdiğinizden dolayı sunucudan yasaklandınız!")

    slib.setLang("eprotect", "tr", "banned-exploit-attempt", "Exploit kullanmaya çalıştığın için sunucudan yasaklandın !")

    slib.setLang("eprotect", "tr", "sc-timeout", "Şu kadar  %s saniye beklemen gerek %s tekrar ekran görüntüsü almak için!")
    slib.setLang("eprotect", "tr", "sc-failed", "Şu kişiden ekran görüntüsü alınamadı %s, şüpheli!")

    slib.setLang("eprotect", "tr", "has-family-share", "%s Aile paylaşımından oynuyor oyunu  ödünç aldığı kişinin ID'si %s!")
    slib.setLang("eprotect", "tr", "no-family-share", "%s Aile paylaşımından oynamıyor!")
    slib.setLang("eprotect", "tr", "no-correlation", "Şu değer için hiç bir IP adresi ilişkilendirilemedi %s")
end
--addons/skeypad_1.2.36/lua/s_keypad/sh_skeypad_config.lua:
sKeypad = sKeypad or {}
sKeypad.config = sKeypad.config or {}

--  _______       _          _______              ___ _       
-- (_______)     (_)        (_______)            / __|_)      
--  _  _  _ _____ _ ____     _       ___  ____ _| |__ _  ____ 
-- | ||_|| (____ | |  _ \   | |     / _ \|  _ (_   __) |/ _  |
-- | |   | / ___ | | | | |  | |____| |_| | | | || |  | ( (_| |
-- |_|   |_\_____|_|_| |_|   \______)___/|_| |_||_|  |_|\___ |
--                                                     (_____|

sKeypad.config.Language = "en"

if CLIENT then
	sKeypad.config.UI = { -- This can only be edited in this file.
	["accentcolor"] = Color(66, 179, 245),
	["maincolor"] = Color(36, 36, 36),
	["textcolor"] = Color(255,255,255),
	["BGBlur"] = false
}

    sKeypad.config.FrameSize = {x = 330, y = 380}
end

sKeypad.config.FadeCollisionGroup = COLLISION_GROUP_VEHICLE_CLIP

sKeypad.config.AllowLockpicking = true

sKeypad.config.AllowKeypadCracking = true

sKeypad.config.ReturnKeycardInstantly = true -- This will return the keycard instantly after the keypad grants/denies access.

sKeypad.config.DigitalTextFontType = 1 -- (1 = Digital Dream, 2 = Digital Display)

sKeypad.config.MaxDistance = 7500

sKeypad.config.MaxKeypads = 15 -- This is the max amout of keypads per user, 0 disables this!

sKeypad.config.MaxPerDoor = 4 -- This is the max amout of keypads per entity, 0 disables this!

sKeypad.config.BlacklistedModels = { -- Add models that you dont want people to place keypads on!
	["models/props_c17/lampshade001a.mdl"] = true
}

sKeypad.config.ShockDamageRange = {min = 10, max = 15}

sKeypad.config.BypassGroups = {
	["owner"] = true,
	["superyetki"] = true,
	["genelyetkili"] = true,
	["superadmin"] = true
}

sKeypad.config.DisabledModes = { -- If you want to disable any modes you can do so in here. (code, fingerprint or keycard)
	["code"] = false,
	["fingerprint"] = false,
	["keycard"] = false
}

sKeypad.config.Prefix = "[Venom] "

sKeypad.config.Currency = "₺"

sKeypad.config.KeypressSound = "skeypad/beep.wav"

sKeypad.config.ShockSound = "buttons/jizz.wav"

sKeypad.config.GrantedSound = "buttons/button2.wav"

sKeypad.config.DeniedSound = "buttons/button8.wav"

sKeypad.config.AlarmSound = "ambient/alarms/city_firebell_loop1.wav"

sKeypad.config.FadeMaterial = "models/props_combine/portalball001_sheet"

sKeypad.config.AllowCustomFadingMaterial = true -- If enabled people can select a material from the list below.

sKeypad.config.CustomFadingMaterials = {
	"sprites/heatwave",
	"models/wireframe",
	"debug/env_cubemap_model",
	"models/shadertest/shader3",
	"models/shadertest/shader4",
	"models/shadertest/shader5",
	"models/shiny",
	"models/debug/debugwhite",
	"Models/effects/comball_sphere",
	"Models/effects/comball_tape",
	"Models/effects/splodearc_sheet",
	"Models/effects/vol_light001"
}

sKeypad.config.DoorObscuredSound = "buttons/blip1.wav"

sKeypad.config.EMPBeaconSound = "buttons/blip1.wav"

sKeypad.config.EMPExplosionSound = "weapons/stunstick/alyx_stunner1.wav"

sKeypad.config.EnableKeypadPreview = true

sKeypad.config.AllowDoorLinking = true

sKeypad.config.EnableHalos = true

sKeypad.config.HaloColor = Color(66, 179, 245)

sKeypad.config.EnableLinkBeam = true

sKeypad.config.BeamColor = Color(66, 179, 245)

sKeypad.config.BeamMat = Material("cable/cable2")

sKeypad.config.DeniedTimeout = 2.5

sKeypad.config.GrantedDelay = {min = 5, max = 15}

sKeypad.config.GrantedDelayBypass = {
	["superadmin"] = true,
	["owner"] = true,
}

sKeypad.config.breakable = true

sKeypad.config.brokenTimeout = {min = 3, max = 5} -- This is the time it will be glitchy for if it takes too much damage before it recovers! PS: It works with a hard defined number aswell!

sKeypad.config.alarmTimer = 5

sKeypad.config.alarmNotify = true

sKeypad.config.empRadius = 500


--  _     _                             _            
-- (_)   (_)                           | |           
--  _     _ ____   ____  ____ _____  __| |_____  ___ 
-- | |   | |  _ \ / _  |/ ___|____ |/ _  | ___ |/___)
-- | |___| | |_| ( (_| | |   / ___ ( (_| | ____|___ |
--  \_____/|  __/ \___ |_|   \_____|\____|_____|___/ 
--         |_|   (_____|                             

sKeypad.config.Upgrades = { -- Make a value into -1 to disable upgrade!
    ["shock"] = {
		price = 90000,
		sortOrder = 1,
		icon = "skeypad/shock.png",
		groups = {}
	},
    ["alarm"] = {
		price = 52500,
		sortOrder = 2,
		icon = "skeypad/alarm.png",
		groups = {}
	},
    ["emp"] = {
		price = 125000,
		sortOrder = 3,
		icon = "skeypad/emp.png",
		groups = {}
	},
    ["armor"] = {
		price = 25000,
		sortOrder = 4,
		icon = "skeypad/armor.png",
		groups = {}
	}
}

sKeypad.config.WhitelistedEnts = {
    ["prop_physics"] = true
}


--  _     _                             _                            _                     
-- (_)   | |                           | |                          | |                    
--  _____| |_____ _   _ ____  _____  __| |    ____  ____ _____  ____| |  _ _____  ____ ___ 
-- |  _   _) ___ | | | |  _ \(____ |/ _  |   / ___)/ ___|____ |/ ___) |_/ ) ___ |/ ___)___)
-- | |  \ \| ____| |_| | |_| / ___ ( (_| |  ( (___| |   / ___ ( (___|  _ (| ____| |  |___ |
-- |_|   \_)_____)\__  |  __/\_____|\____|   \____)_|   \_____|\____)_| \_)_____)_|  (___/ 
--               (____/|_|                                                                 

sKeypad.config.keypads = {
    ["Keypad Cracker"] = {
		classname = "regular_keypad_cracker",
		cracktime = 15,
		destructonopen = true,
		deployable = true,
		cracksound = Sound("buttons/blip2.wav"),
		maxdistance = 50,
		fov = 60,
		v_mdl = "models/weapons/v_c4.mdl",
		w_mdl = "models/weapons/w_c4.mdl"
	},

    ["Pro Keypad Cracker"] = {
		classname = "pro_keypad_cracker",
		cracktime = 10,
		cracksound = Sound("buttons/blip2.wav"),
		maxdistance = 50,
		fov = 60,
		v_mdl = "models/weapons/v_c4.mdl",
		w_mdl = "models/weapons/w_c4.mdl"
	},

    ["God Keypad Cracker"] = {
		classname = "god_keypad_cracker",
		cracktime = 5,
		cracksound = Sound("buttons/blip2.wav"),
		maxdistance = 50,
		deployable = true,
		dropondamage = true,
		fov = 60,
		v_mdl = "models/weapons/v_c4.mdl",
		w_mdl = "models/weapons/w_c4.mdl"
	}
}
--addons/skeypad_1.2.36/lua/s_keypad/languages/sh_italian.lua:
return gluapack()()
--addons/skeypad_1.2.36/lua/s_keypad/languages/sh_spanish.lua:
slib.setLang("skeypad", "es", "title", "sKeypad - Configuraciones")
slib.setLang("skeypad", "es", "granted", "Concedido")
slib.setLang("skeypad", "es", "denied", "Negado")
slib.setLang("skeypad", "es", "awaiting", "Esperando")
slib.setLang("skeypad", "es", "undone_keypad", "Teclado deshecho")
slib.setLang("skeypad", "es", "tool_name", "sKeypad")
slib.setLang("skeypad", "es", "tool_usage", [[Esta herramienta crea puertas que se desvanecen y las vincula a los teclados.
1. Haga clic en un accesorio para designar una puerta.
2. Haga clic en otro lugar para crear un teclado.
3. Presione F2 en un teclado para modificar su configuración.]])

slib.setLang("skeypad", "es", "tool_desc", "Coloque una puerta descolorida y un teclado, todo en una sola herramienta.")
slib.setLang("skeypad", "es", "hold_length", "Retención de longitud")
slib.setLang("skeypad", "es", "start_faded", "Empezar desvanecido")
slib.setLang("skeypad", "es", "start_faded_help", "Si está marcado, la puerta comenzará a desvanecerse.")
slib.setLang("skeypad", "es", "auth_cansettings", "Auth Administrar configuración")
slib.setLang("skeypad", "es", "auth_cansettings_help", "Si está seleccionada, las personas autorizadas pueden cambiar la configuración.")
slib.setLang("skeypad", "es", "tooltip", "¡Asegúrese de cambiar la contraseña predeterminada!")
slib.setLang("skeypad", "es", "hide_passcode", "Ocultar contraseña")
slib.setLang("skeypad", "es", "hide_passcode_help", "Habilite esto para ocultar el código de acceso.")
slib.setLang("skeypad", "es", "access_code", "Código de acceso")
slib.setLang("skeypad", "es", "4digit_passcode", "Longitud máxima: 4")
slib.setLang("skeypad", "es", "max_4digit", "El código de acceso puede tener un máximo de 4 dígitos.")
slib.setLang("skeypad", "es", "triggered_alarm", "¡Alguien ha activado una alarma en su teclado!")
slib.setLang("skeypad", "es", "cannot_afford", "¡No puede permitirse hacer esta actualización!")
slib.setLang("skeypad", "es", "purchased_upgrade", "Ha actualizado con éxito su teclado para $%s")
slib.setLang("skeypad", "es", "auth_list", "Lista de autenticación")
slib.setLang("skeypad", "es", "no_entries", "No hay entradas.")
slib.setLang("skeypad", "es", "auth_party", "Auth miembros del grupo")
slib.setLang("skeypad", "es", "auth_gang", "Auth miembros de pandillas")
slib.setLang("skeypad", "es", "auth_fpp_buddy", "Auth FPP amigo")
slib.setLang("skeypad", "es", "upgrades", "Actualizaciones")
slib.setLang("skeypad", "es", "modes", "Modos")
slib.setLang("skeypad", "es", "exploit_attempt", "Intentó explotar")
slib.setLang("skeypad", "es", "insufficient_rank", "¡Tienes un rango insuficiente para hacer esto!")
slib.setLang("skeypad", "es", "access_granted", "Acceso permitido")
slib.setLang("skeypad", "es", "access_denied", "Acceso denegado")
slib.setLang("skeypad", "es", "log_granted", "{1} se ha abierto con éxito {2}.")
slib.setLang("skeypad", "es", "log_denied", "{1} no ha podido abrir {2}.")
slib.setLang("skeypad", "es", "select_option", "Seleccionar opción")
slib.setLang("skeypad", "es", "players", "Jugadores")
slib.setLang("skeypad", "es", "darkrp_jobs", "Empleos en DarkRP")
slib.setLang("skeypad", "es", "cracking", "Agrietamiento")
--addons/skeypad_1.2.36/lua/s_keypad/client/cl_skeypad.lua:
return gluapack()()
--lua/autorun/squid_game_palyer.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/languages/sh_french.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/modules/sh_playtime.lua:
sReward.CheckAllPlaytimes = function(ply, sec)
    if ply.GetUTimeTotalTime and ply:GetUTimeTotalTime() >= sec then return true end

    return false
end
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_basewars.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_essentialpacks.lua:
sReward.RegisterReward("essentials_level", function(ply, levels)
    if !isfunction(ply.AddLevel) then return end
    ply:AddLevel(levels)
end, Material("sreward/level-up.png", "smooth"))

sReward.RegisterReward("essentials_xp", function(ply, xp)
    if !isfunction(ply.AddExperience) then return end
    ply:AddExperience(xp, "")
end)
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_voidcases.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_zpncandy.lua:
sReward.RegisterReward("zpn_candy", function(ply, amount)
    if !zpn or !zpn.Candy or !zpn.Candy.AddPoints then return end
    
    zpn.Candy.AddPoints(ply, amount)
end, Material("sreward/money.png", "smooth"))
--lua/autorun/streamradio_loader.lua:
-- 3D Stream Radio. Made By Grocel.
AddCSLuaFile()

local g_addonBrokenError = nil

if SERVER then
	g_addonBrokenError = "Addon loadup is broken on SERVER! To many addons?"
else
	g_addonBrokenError = "Addon loadup is broken on CLIENT! To many addons?"
end

local function initStreamRadioLibGlobal()
	_G.StreamRadioLib = _G.StreamRadioLib or {}
	local lib = _G.StreamRadioLib

	table.Empty(lib)

	lib.Loaded = nil
	lib.Errors = {g_addonBrokenError}

	-- this is the failback content for tools and menus
	lib.Loader_CreateErrorPanel = function(CPanel, message)
		if not IsValid(CPanel) then
			return
		end

		local lib = _G.StreamRadioLib or {}
		if lib.Loaded then
			return
		end

		local addonPrefix = tostring(lib.AddonPrefix or "")
		addonPrefix = string.Trim(addonPrefix)

		if addonPrefix ~= "" then
			local prefixlabel = vgui.Create("DLabel")

			prefixlabel:SetDark(true)
			prefixlabel:SetHighlight(false)
			prefixlabel:SetWrap(true)
			prefixlabel:SetText(addonPrefix)

			prefixlabel:SetAutoStretchVertical(true)
			prefixlabel:SizeToContents()

			CPanel:AddPanel(prefixlabel)
		end

		local errors = lib.Errors or {}

		for i, thiserr in ipairs(errors) do
			thiserr = tostring(thiserr or "")
			thiserr = string.Trim(thiserr)

			if thiserr == "" then
				continue
			end

			local errorlabel = vgui.Create("DLabel")

			errorlabel:SetDark(false)
			errorlabel:SetHighlight(true)
			errorlabel:SetWrap(true)
			errorlabel:SetText(i .. ". " .. thiserr)
			errorlabel:SetTooltip(thiserr)

			errorlabel:SetAutoStretchVertical(true)
			errorlabel:SizeToContents()

			CPanel:AddPanel(errorlabel)
		end

		message = tostring(message or "")
		message = string.Trim(message)

		if message ~= "" then
			local messagelabel = vgui.Create("DLabel")

			messagelabel:SetDark(false)
			messagelabel:SetHighlight(true)
			messagelabel:SetWrap(true)
			messagelabel:SetText(message)
			messagelabel:SetTooltip(message)

			messagelabel:SetAutoStretchVertical(true)
			messagelabel:SizeToContents()

			CPanel:AddPanel(messagelabel)
		end
	end

	-- this is the failback error message for radio entity spawn
	lib.Loader_ShowSpawnError = function(message)
		local lib = _G.StreamRadioLib or {}
		if lib.Loaded then
			return
		end

		local addonPrefix = tostring(lib.AddonPrefix or "")
		addonPrefix = string.Trim(addonPrefix)

		local errors = lib.Errors or {}

		local errorString = table.concat(errors, "\n\n")
		errorString = string.Trim(errorString)

		message = tostring(message or "")
		message = string.Trim(message)

		local err = string.format("%s\n\n%s\n\n%s", addonPrefix, errorString, message)

		ErrorNoHaltWithStack(err)
	end
end

do
	initStreamRadioLibGlobal()

	local status, loaded = xpcall(function()
		AddCSLuaFile("streamradio_core/_load.lua")
		return include("streamradio_core/_load.lua")
	end, ErrorNoHaltWithStack)

	if not _G.StreamRadioLib then
		initStreamRadioLibGlobal()
	end

	if not status then
		_G.StreamRadioLib.Loaded = nil
	end

	if not loaded then
		_G.StreamRadioLib.Loaded = nil
	end

	local errors = _G.StreamRadioLib.Errors or {}

	local errorString = tostring(errors[1] or "")
	errorString = string.Trim(errorString)

	if errorString ~= "" then
		_G.StreamRadioLib.Loaded = nil
	end

	if errorString == g_addonBrokenError then
		-- something went horribly wrong, so tell the user about it.

		error(g_addonBrokenError)
		return
	end
end

--lua/streamradio_core/language.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Language = StreamRadioLib.Language or {}

local LIB = StreamRadioLib.Language
table.Empty(LIB)

local g_nameprefix = "3dstreamradio."
local g_translated = {}

function LIB.GetName(identifier)
	identifier = g_nameprefix .. tostring(identifier or "")
	identifier = string.lower(identifier)

	return identifier
end

function LIB.GetPhrase(identifier)
	identifier = LIB.GetName(identifier)

	if g_translated[identifier] then
		return g_translated[identifier]
	end

	local backup = '#' .. identifier
	if g_translated[backup] then
		return g_translated[backup]
	end

	if CLIENT then
		g_translated[identifier] = language.GetPhrase(identifier) or backup
	else
		g_translated[identifier] = backup
	end

	g_translated[backup] = g_translated[identifier]
	return g_translated[identifier]
end

function LIB.Translate(identifier, defaultEnglishText)
	identifier = LIB.GetName(identifier)
	defaultEnglishText = tostring(defaultEnglishText or "")

	if #defaultEnglishText >= 1024 then
		-- Limit by GMod: https://github.com/Facepunch/garrysmod-issues/issues/5524
		error("defaultEnglishText is too long (length >= 1024)")
	end

	if defaultEnglishText == "" then
		defaultEnglishText = nil
	end

	if g_translated[identifier] then
		return g_translated[identifier]
	end

	local backup = '#' .. identifier
	if g_translated[backup] then
		return g_translated[backup]
	end

	if CLIENT then
		if defaultEnglishText then
			language.Add(identifier, defaultEnglishText)
		end

		g_translated[identifier] = language.GetPhrase(identifier) or defaultEnglishText or backup
	else
		g_translated[identifier] = defaultEnglishText or backup
	end

	g_translated[backup] = g_translated[identifier]
	return g_translated[identifier]
end

LIB.T = LIB.Translate

return true


--lua/streamradio_core/bass3.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Bass = StreamRadioLib.Bass or {}

local LIB = StreamRadioLib.Bass
table.Empty(LIB)

LIB.g_IsInstalledOnServer = false

local catchAndErrorNoHaltWithStack = StreamRadioLib.Util.CatchAndErrorNoHaltWithStack

local g_dll = "bass3"
local g_dllName = string.upper("gm_" .. g_dll)
local g_dllMinVersion = 14

local g_dllSupportedBranches = {
	["dev"] = true,
	["prerelease"] = true,
	["unknown"] = true,
	["none"] = true,
	["live"] = true,
	["main"] = true,
	[""] = true,
}

local g_bass_loaded = nil
local g_bass_dll_required = nil
local g_bass_can_loaded = nil
local g_bass_info_shown = nil

local g_cvar_cl_bass3_enable = nil
local g_cvar_sv_bass3_enable = nil
local g_cvar_sv_bass3_allow_client = nil

local function resetCache(...)
	g_bass_loaded = nil
	g_bass_can_loaded = nil
end

if SERVER then
	cvars.AddChangeCallback("sv_streamradio_bass3_enable", resetCache, "streamradio_bass3_callback")
end

if CLIENT then
	cvars.AddChangeCallback("cl_streamradio_bass3_enable", resetCache, "streamradio_bass3_callback")
	cvars.AddChangeCallback("sv_streamradio_bass3_allow_client", resetCache, "streamradio_bass3_callback")
end

local g_colDefault = Color(255, 255, 255)
local g_colOk = Color(100, 200, 100)
local g_colCL = Color(255, 222, 137)
local g_colSV = Color(137, 222, 255)

local function printBass3Info()
	if g_bass_info_shown then
		return
	end

	g_bass_info_shown = true

	local baseString = string.format(
		"loaded %s (ver. %s, %s)",
		g_dllName,
		BASS3.ModuleVersion or 0,
		BASS3.Version or 0
	)

	local message = nil
	local realmcol = nil

	if SERVER then
		message = "Serverside streaming API for advanced wire outputs active!"
		realmcol = g_colSV
	else
		message = "Clientside streaming API active!"
		realmcol = g_colCL
	end

	MsgN()
	MsgN()
	MsgC(realmcol, "###########################################################################")
	MsgN()
	MsgN()

	MsgC(g_colDefault, "    ", StreamRadioLib.AddonTitle, " ")
	MsgC(g_colOk, baseString)
	MsgN()
	MsgN()
	MsgC(g_colOk, "    ", message)
	MsgN()

	MsgN()
	MsgC(realmcol, "###########################################################################")
	MsgN()
	MsgN()
end

local function onLoadBASS3()
	StreamRadioLib.Error.AddStreamErrorCode({
		id = 102,
		name = "STREAM_ERROR_BASS3_FILESYSTEM",
		description = "Valve Filesystem is missing in " .. g_dllName,
	})

	printBass3Info()
end

local function loadBASS3()
	if g_bass_dll_required ~= nil then
		-- only attempt to load gm_bass3 once
		return
	end

	g_bass_dll_required = false
	require(g_dll)

	if not BASS3 then
		error("Couldn't load '" .. g_dllName .. "'! BASS3 is missing!")
		return false
	end

	if not BASS3.Version then
		error("Couldn't load '" .. g_dllName .. "'! BASS3.Version is missing!")
		return false
	end

	if not BASS3.ModuleVersion then
		error("Couldn't load '" .. g_dllName .. "'! BASS3.ModuleVersion is missing!")
		return false
	end

	if not BASS3.ENUM then
		error("Couldn't load '" .. g_dllName .. "'! BASS3.ENUM is missing!")
		return false
	end

	local BassModuleVersion = tonumber(BASS3.ModuleVersion) or 0

	if BassModuleVersion < g_dllMinVersion then
		error("Couldn't load '" .. g_dllName .. "'! Version is outdated!")
		return false
	end

	g_bass_dll_required = true
	return true
end

function LIB.HasLoadedDLL()
	if not g_bass_dll_required then
		return false
	end

	if not BASS3 then
		return false
	end

	if not BASS3.Version then
		return false
	end

	if not BASS3.ModuleVersion then
		return false
	end

	if not BASS3.ENUM then
		return false
	end

	local BassModuleVersion = tonumber(BASS3.ModuleVersion) or 0

	if BassModuleVersion < g_dllMinVersion then
		return false
	end

	return true
end

function LIB.IsInstalled()
	if g_bass_dll_required == false then
		-- already attempted to load, but failed
		return false
	end

	local branch = tostring(BRANCH or "")

	if not g_dllSupportedBranches[branch] then
		-- GM_BASS3 is broken on some branches
		return false
	end

	if not util.IsBinaryModuleInstalled(g_dll) then
		return false
	end

	return true
end

function LIB.CanLoadDLL()
	if g_bass_loaded ~= nil then
		return g_bass_loaded
	end

	if g_bass_can_loaded ~= nil then
		return g_bass_can_loaded
	end

	g_bass_can_loaded = false

	if not LIB.IsInstalled() then
		return false
	end

	if SERVER then
		if not g_cvar_sv_bass3_enable then
			g_cvar_sv_bass3_enable = GetConVar("sv_streamradio_bass3_enable")
		end

		if g_cvar_sv_bass3_enable and g_cvar_sv_bass3_enable:GetInt() <= 0 then
			return false
		end
	end

	if CLIENT then
		if not g_cvar_cl_bass3_enable then
			g_cvar_cl_bass3_enable = GetConVar("cl_streamradio_bass3_enable")
		end

		if g_cvar_cl_bass3_enable and g_cvar_cl_bass3_enable:GetInt() <= 0 then
			return false
		end

		if not g_cvar_sv_bass3_allow_client then
			g_cvar_sv_bass3_allow_client = GetConVar("sv_streamradio_bass3_allow_client")
		end

		if g_cvar_sv_bass3_allow_client and g_cvar_sv_bass3_allow_client:GetInt() <= 0 then
			return false
		end
	end

	g_bass_can_loaded = true
	return true
end

function LIB.ClearCache()
	resetCache()
end

function LIB.LoadDLL()
	if g_bass_loaded ~= nil then
		return g_bass_loaded
	end

	if not LIB.CanLoadDLL() then
		g_bass_loaded = false
		return g_bass_loaded
	end

	if LIB.HasLoadedDLL() then
		onLoadBASS3()

		g_bass_loaded = true
		return g_bass_loaded
	end

	catchAndErrorNoHaltWithStack(loadBASS3)

	g_bass_loaded = LIB.HasLoadedDLL()

	if g_bass_loaded then
		onLoadBASS3()
	end

	return g_bass_loaded
end

function LIB.IsInstalledOnServer()
	return LIB.g_IsInstalledOnServer or false
end

if SERVER then
	LIB.g_IsInstalledOnServer = LIB.IsInstalled()
end

return true


--lua/streamradio_core/models.lua:
return gluapack()()
--lua/streamradio_core/models/111as_h500_radio.lua:
return gluapack()()
--lua/streamradio_core/models/sw_ghettoblaster.lua:
return gluapack()()
--lua/streamradio_core/models/sw_ghettoblaster.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- SligWolf's Ghetto Blaster
RADIOMDL.model = "models/sligwolf/grocel/radio/ghettoblaster.mdl"

RADIOMDL.SpawnAng = Angle(0, 0, 0)
RADIOMDL.SpawnFlatOnWall = true
RADIOMDL.SoundPosOffset = Vector(1.5, 0, 4.5)
RADIOMDL.SoundAngOffset = Angle(0, 0, 0)

RADIOMDL.DisplayAngles = Angle(0, 90, 90)

                              --      F,     R,    U
RADIOMDL.DisplayOffset    = Vector(1.85, -6.48, 9.18) -- Top Left
RADIOMDL.DisplayOffsetEnd = Vector(1.85,  6.48, 4.92) -- Bottom Right

RADIOMDL.DisplayWidth = 768
RADIOMDL.DisplayHeight, RADIOMDL.DisplayScale = RADIOMDL:GetDisplayHeight(RADIOMDL.DisplayOffset, RADIOMDL.DisplayOffsetEnd, RADIOMDL.DisplayWidth)


RADIOMDL.FontSizes = {
--  Name 	= Size,	Weight, Parentname
	Header	= {20,	1000},
	Default	= {19,	700},
	Tooltip	= {15,	800},
	Big		= {22,	700},
}

function RADIOMDL:SetupGUI(ent, gui_controller, mainpanel)
	gui_controller:SetPos(0, 0)
	gui_controller:SetSize(self.DisplayWidth, self.DisplayHeight)

	mainpanel:SetSize(gui_controller:GetClientSize())

	local modelsetup = {}
	if CLIENT then
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/text", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/pretext", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/controls/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/volume/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "tooltip", "font", self.Fonts.Tooltip)
	end

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header", "sizeh", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "sizeh", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists", "gridsize", {x = 2, y = 4})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview", "gridsize", {x = 2, y = 4})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/sidebutton", "sizew", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox/scrollbar", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "sizeh", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "sizew", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "sizew", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "cornersize", 0)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "borderwidth", 16)

	local shadow = 5
	local padding = 5
	local margin = 5

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "shadowwidth", shadow)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "shadowwidth", shadow)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "padding", padding)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "padding", padding)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "margin", margin)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "margin", margin)

	gui_controller:SetModelSetup(modelsetup)

	mainpanel:ForEachChildRecursive(function(panel, child)
		if child.SetShadowWidth and child:GetShadowWidth() == 5 then
			child:SetShadowWidth(shadow)
		end

		if child.SetPadding and child:GetPadding() == 5 then
			child:SetPadding(padding)
		end

		if child.SetMargin and child:GetMargin() == 5 then
			child:SetMargin(margin)
		end
	end)
end

function RADIOMDL:Initialize(ent)
	if CLIENT then
		ent:InvalidateBoneCache()
		return
	end

	if ent._mdl_skinset then return end

	local color = ColorRand()
	ent:SetColor( color )

	ent._mdl_skinset = true
end

function RADIOMDL:AnimReset(ent)
	if SERVER then return end

	ent:SetPoseParameter("speakers", 0)
	ent:InvalidateBoneCache()
end

function RADIOMDL:WhileLoading(ent)
	if SERVER then return end

	ent:SetPoseParameter("speakers", 0)
	ent:InvalidateBoneCache()
end

RADIOMDL.SpeakerMinFRQ = 20
RADIOMDL.SpeakerMaxFRQ = 2000
RADIOMDL.SpeakerFRQResolution = 12

function RADIOMDL:Speaker(ent, speakerlevel)
	if SERVER then return end

	speakerlevel = speakerlevel or 0

	local soundlevel = 0

	if IsValid(ent.StreamObj) then
		soundlevel = ent.StreamObj:GetAverageLevel() ^ 0.25
	end

	local vol = ent:GetVolume()

	speakerlevel = speakerlevel * vol * 1.5 * soundlevel
	speakerlevel = math.Clamp(speakerlevel, -1, 1)

	ent:SetPoseParameter("speakers", speakerlevel)
	ent:InvalidateBoneCache()
end

return true


--lua/streamradio_core/models/sw_jukebox.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- SligWolf's Jukebox
RADIOMDL.model = "models/sligwolf/grocel/radio/jukebox.mdl"

RADIOMDL.SpawnAng = Angle(0, 0, 0)
RADIOMDL.SpawnFlatOnWall = true
RADIOMDL.SoundPosOffset = Vector(10, 0, 25)
RADIOMDL.SoundAngOffset = Angle(0, 0, 0)

RADIOMDL.DisplayAngles = Angle(0, 90, 90)

                               --      F,     R,     U
RADIOMDL.DisplayOffset    = Vector(12.30, -9.60, 40.00) -- Top Left
RADIOMDL.DisplayOffsetEnd = Vector(12.30,  9.60, 35.00) -- Bottom Right

RADIOMDL.DisplayWidth = 1024
RADIOMDL.DisplayHeight, RADIOMDL.DisplayScale = RADIOMDL:GetDisplayHeight(RADIOMDL.DisplayOffset, RADIOMDL.DisplayOffsetEnd, RADIOMDL.DisplayWidth)


RADIOMDL.FontSizes = {
--  Name 	= Size,	Weight, Parentname
	Header	= {23,	1000},
	Error	= {17,	700},
	Default	= {22,	700},
	Tooltip	= {22,	1000},
	Big		= {23,	700},
}

function RADIOMDL:SetupGUI(ent, gui_controller, mainpanel)
	gui_controller:SetPos(0, 0)
	gui_controller:SetSize(self.DisplayWidth, self.DisplayHeight)

	mainpanel:SetSize(gui_controller:GetClientSize())

	local modelsetup = {}
	if CLIENT then
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/text", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/pretext", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/controls/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/volume/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox", "font", self.Fonts.Error)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "font", self.Fonts.Error)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox", "font", self.Fonts.Error)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "font", self.Fonts.Error)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "tooltip", "font", self.Fonts.Tooltip)
	end

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header", "sizeh", 35)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "sizeh", 35)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists", "gridsize", {x = 3, y = 4})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview", "gridsize", {x = 2, y = 4})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/scrollbar", "sizew", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/scrollbar", "sizew", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/sidebutton", "sizew", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox/scrollbar", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "sizeh", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "cornersize", 0)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "borderwidth", 16)

	local shadow = 3
	local padding = 5
	local margin = 5

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "shadowwidth", shadow)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "shadowwidth", shadow)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "padding", padding)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "padding", padding)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "margin", margin)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "margin", margin)

	gui_controller:SetModelSetup(modelsetup)

	mainpanel:ForEachChildRecursive(function(panel, child)
		if child.SetShadowWidth and child:GetShadowWidth() == 5 then
			child:SetShadowWidth(shadow)
		end

		if child.SetPadding and child:GetPadding() == 5 then
			child:SetPadding(padding)
		end

		if child.SetMargin and child:GetMargin() == 5 then
			child:SetMargin(margin)
		end
	end)
end

RADIOMDL.Sounds = {
	Noise = "",
}

function RADIOMDL:Initialize(ent)
	if CLIENT then
		ent:InvalidateBoneCache()
		return
	end

	if ent._mdl_skinset then return end

	local skinid = math.random(0, 4)
	ent:SetSkin( skinid )

	local color = ColorRand()
	ent:SetColor( color )

	ent._mdl_skinset = true
end

function RADIOMDL:AnimReset(ent)
	local sequence = ent:LookupSequence( "idle" )
	ent:SetAnim( sequence, 0, 1 )
end

function RADIOMDL:OnPlay(ent, stream)
	if SERVER then return end

	local sequence = ent:LookupSequence( "cdplayidle" )
	ent:SetAnim( sequence, 0, 1 )
end

function RADIOMDL:OnError(ent, stream)
	if SERVER then return end

	local sequence = ent:LookupSequence( "idle" )
	ent:SetAnim( sequence, 0, 1 )
end

function RADIOMDL:OnStop(ent, stream)
	if SERVER then return end

	local sequence = ent:LookupSequence( "idle" )
	ent:SetAnim( sequence, 0, 1 )
end

function RADIOMDL:WhileLoading(ent)
	if SERVER then return end

	local sequence = ent:LookupSequence( "idle" )
	ent:SetAnim( sequence, 0, 1 )
end

return true


--lua/streamradio_core/models/wire_speaker2.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Wire Speaker 2
-- Addon: https://steamcommunity.com/sharedfiles/filedetails/?id=160250458
RADIOMDL.model = "models/killa-x/speakers/speaker_medium.mdl"

RADIOMDL.NoDisplay = true
RADIOMDL.SpawnAng = Angle( 0, 0, 0 )
RADIOMDL.SpawnFlatOnWall = false

return true


--lua/streamradio_core/models/wire_speaker3.lua:
return gluapack()()
--lua/streamradio_core/cache.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Cache = StreamRadioLib.Cache or {}

local LIB = StreamRadioLib.Cache
table.Empty(LIB)

local LIBUtil = StreamRadioLib.Util

local g_emptyFunction = function() end
local g_forbidden = LIBUtil.CreateCacheArray(256)

local g_nextCacheCleanup = 0

StreamRadioLib.Hook.Add("PostCleanupMap", "reset_cache_download_cache", function()
	g_forbidden:Empty()
	g_nextCacheCleanup = 0
end)

local g_mainDir = nil
local g_mainDirLegacy = nil

local g_minFileSize = 2 ^ 16 -- 64 KB
local g_maxFileSize = 2 ^ 29 -- 28 -- 256 MB
local g_maxFileAge = 7 * 24 * 3600 -- 7 days
local g_maxCacheSize = 2 ^ 34 -- 16 GB
local g_maxCacheCount = 1024

local g_minCacheCleanupInterval = 60 -- 1 Minute

g_maxFileSize = math.min(g_maxCacheSize, g_maxFileSize)

local function CreateBaseFolder(dir)
	if file.IsDir(dir, "DATA") then
		return
	end

	file.CreateDir(dir)
end

local function IsValidFile(path)
	if not file.Exists(path, "DATA") then
		return false
	end

	if file.IsDir(path, "DATA") then
		return false
	end

	return true
end

local function Hash(var)
	var = tostring(var or "")

	local hash = util.SHA1("StreamRadioLib: '" .. var .. "'")
	return hash
end

local function GetFilenameFromURL(url)
	if not g_mainDir then
		return nil
	end

	url = tostring(url or "")
	url = StreamRadioLib.Url.SanitizeUrl(url)

	if filename == "" then
		return nil
	end

	local hash = Hash(url)
	local path = string.format("%s/cache_%s.dat", g_mainDir, hash)

	return path
end

local function Cache_GetCacheMap()
	if not g_mainDir then
		return nil
	end

	if not file.IsDir(g_mainDir, "DATA") then
		return nil
	end

	local map = {}
	map.files = {}
	map.totalsize = 0

	local now = os.time()
	local files = file.Find(g_mainDir .. "/*", "DATA") or {}

	for k, v in ipairs(files) do
		local path = g_mainDir .. "/" .. v

		if not IsValidFile(path) then
			continue
		end

		local size = file.Size(path, "DATA") or 0
		size = math.max(size, 0)

		local time = file.Time(path, "DATA") or 0
		time = math.max(time, 0)

		local age = now - time
		age = math.max(age, 0)

		local filestats = {
			path = path,
			name = v,
			size = size,
			time = time,
			age = age,
		}

		map.totalsize = map.totalsize + size
		table.insert(map.files, filestats)
	end

	return map
end

local function Cache_Cleanup(force)
	local now = RealTime()

	if not force and g_nextCacheCleanup > now then
		return
	end

	g_nextCacheCleanup = now + g_minCacheCleanupInterval

	local map = Cache_GetCacheMap()

	if not map then
		return
	end

	local files = map.files
	local filesleft = {}

	local sizeleft = map.totalsize - g_maxCacheSize
	sizeleft = math.max(sizeleft, 0)

	local delete = function(item)
		local path = item.path
		local size = item.size

		file.Delete(path)
		sizeleft = math.max(sizeleft - size, 0)
	end

	-- new -> old
	table.SortByMember(files, "time", false)

	local count = 0

	for k, item in ipairs(files) do
		local size = item.size
		local age = item.age

		if count >= g_maxCacheCount then
			-- max file count reached, deleting oldest files
			delete(item)
			continue
		end

		if age > g_maxFileAge then
			-- too old
			delete(item)
			continue
		end

		if size < g_minFileSize then
			-- too small, likly broken or not a real sound file
			delete(item)
			continue
		end

		if size > g_maxFileSize then
			-- too large
			delete(item)
			continue
		end

		table.insert(filesleft, v)
		count = count + 1
	end

	files = nil

	-- old -> new
	table.SortByMember(filesleft, "time", true)

	for k, item in ipairs(filesleft) do
		if sizeleft <= 0 then
			break
		end

		-- delete all files that exceed the total size limit
		-- oldest are deleted first
		delete(item)
	end
end

local function Cache_Save(url, data)
	if not g_mainDir then
		return nil
	end

	if not url then
		return false
	end

	if not data then
		return false
	end

	local path = GetFilenameFromURL(url)
	if not path then
		return false
	end

	CreateBaseFolder(g_mainDir)

	LIB.DeleteFileRaw(path)

	local f = file.Open(path, "wb", "DATA")
	if not f then
		return false
	end

	f:Write(data)
	f:Close()

	Cache_Cleanup(false)

	return true
end

function LIB.DeleteFileForUrl(url)
	local path = GetFilenameFromURL(url)

	if not LIB.DeleteFileRaw(path) then
		return false
	end

	return true
end

function LIB.DeleteFileRaw(path)
	if not path then return false end

	if not IsValidFile(path) then
		return true
	end

	file.Delete(path)

	if IsValidFile(path) then
		return false
	end

	return true
end

function LIB.GetFile(url)
	local path = GetFilenameFromURL(url)

	if not path then return nil end
	if not IsValidFile(path) then return nil end

	return path
end

local contenttype_blacklist = {
	["text/*"] = true,
	["image/*"] = true,
}

local function GetContentType( headers )
	if not istable(headers) then return "" end

	local contenttype = headers["Content-Type"] or headers["content-type"] or ""
	contenttype = (string.Explode(";", contenttype) or {})[1] or contenttype
	contenttype = string.Trim(contenttype)
	contenttype = string.lower(contenttype)

	local maintypes = string.Explode("/", contenttype) or {}
	local maintype = string.Trim(maintypes[1] or "")
	local subtype = string.Trim(maintypes[2] or "")

	if maintype == "" then
		maintype = nil
	end

	if subtype == "" then
		subtype = nil
	end

	return contenttype, maintype, subtype
end

function LIB.CanDownload(filesize)
	filesize = tonumber(filesize or 0) or 0

	if filesize == -1 then
		-- we don't know the file size yet
		return true
	end

	if filesize > g_maxFileSize then
		-- too large
		return false
	end

	if filesize < g_minFileSize then
		-- too small, likly broken or not a real sound file
		return false
	end

	return true
end

function LIB.Download(url, callback, saveAsUrl)
	url = tostring(url or "")
	saveAsUrl = tostring(saveAsUrl or "")
	callback = callback or g_emptyFunction

	if saveAsUrl == "" then
		saveAsUrl = url
	end

	if url == "" then
		callback(false, false, saveAsUrl)
		return
	end

	if saveAsUrl == "" then
		callback(false, false, saveAsUrl)
		return
	end

	local cacheid = util.SHA256(saveAsUrl)

	if g_forbidden:Has(cacheid) then
		callback(false, false, saveAsUrl)
		return
	end

	local onLoad = function(success, data)
		local len = data.len
		local headers = data.headers

		if not success then
			callback(false, false, saveAsUrl)
			return
		end

		if g_forbidden:Has(cacheid) then
			callback(false, false, saveAsUrl)
			return
		end

		local contenttype, maintype, subtype = GetContentType( headers )

		if contenttype_blacklist[contenttype] then
			g_forbidden:Set(cacheid, true)
			callback(false, false, saveAsUrl)
			return
		end

		if maintype and contenttype_blacklist[maintype .. "/*"] then
			g_forbidden:Set(cacheid, true)
			callback(false, false, saveAsUrl)
			return
		end

		if subtype and contenttype_blacklist["*/" .. subtype] then
			g_forbidden:Set(cacheid, true)
			callback(false, false, saveAsUrl)
			return
		end

		if len == -1 then
			-- still unknown sizes can't be cached
			g_forbidden:Set(cacheid, true)

			callback(false, false, saveAsUrl)
			return
		end

		if not LIB.CanDownload(len) then
			g_forbidden:Set(cacheid, true)

			callback(false, false, saveAsUrl)
			return
		end

		g_forbidden:Remove(cacheid)

		local saved = Cache_Save(saveAsUrl, data.body)

		callback(true, saved, saveAsUrl)
	end

	StreamRadioLib.Http.Request(url, onLoad)
end

function LIB.Load()
	local cacheRealm = SERVER and "sv" or "cl"

	g_mainDir = LIBUtil.GetMainDirectory(string.format("cache-%s", cacheRealm))
	g_mainDirLegacy = LIBUtil.GetMainDirectory("cache")

	LIBUtil.DeleteFolder(g_mainDirLegacy)
	Cache_Cleanup(true)
end

do
	local function Cache_Clear(ply, cmd, args)
		if not LIBUtil.IsAdminForCMD(ply) then
			StreamRadioLib.Print.Msg(ply, "You need to be an admin clear the server stream cache.")
			return
		end

		LIBUtil.DeleteFolder(g_mainDirLegacy)

		if not LIBUtil.DeleteFolder(g_mainDir) then
			StreamRadioLib.Print.Msg(ply, "Server stream cache could not be cleared!")
			return
		end

		g_forbidden:Empty()
		StreamRadioLib.Print.Msg(ply, "Server stream cache cleared!")
	end

	concommand.Add( "sv_streamradio_cacheclear", Cache_Clear )

	if CLIENT then
		local function Cache_Clear(ply, cmd, args)
			LIBUtil.DeleteFolder(g_mainDirLegacy)

			if not LIBUtil.DeleteFolder(g_mainDir) then
				StreamRadioLib.Print.Msg(ply, "Client stream cache could not be cleared!")
				return
			end

			g_forbidden:Empty()
			StreamRadioLib.Print.Msg(ply, "Client stream cache cleared!")
		end

		concommand.Add("cl_streamradio_cacheclear", Cache_Clear)
	end
end

return true


--lua/streamradio_core/classes/ui/panel.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local LIBUtil = StreamRadioLib.Util

local emptyTableSafe = LIBUtil.EmptyTableSafe

local BASE = CLASS:GetBaseClass()

function CLASS:AssignToListenGroup()
	local superparent = self:GetSuperParent()

	if IsValid(superparent) and superparent ~= self then
		local group = superparent:AssignToListenGroup()

		if group then
			return group
		end
	end

	local group = tonumber(self:GetGlobalVar("gui_controller_listengroup")) or self:GetID()
	return group
end

function CLASS:Create()
	BASE.Create(self)

	self.Pos = self:CreateListener({
		x = 0,
		y = 0,
	}, function()
		self:InvalidateLayout(true)
		self:CallHook("OnPositionChanged")
	end)

	self.Size = self:CreateListener({
		w = 0,
		h = 0,
	}, function()
		self:InvalidateLayout(true)
		self:CallHook("OnResize")
	end)

	local updateothers = function(this, panel)
		if panel == self then return end
		panel:InvalidateLayout(false, true)
	end

	local recache = function(this)
		emptyTableSafe(this._ChildrenPanelsSorted)

		this:DelCacheValue("IsVisible")
		this:DelCacheValue("GetClickPanel")
		this:DelCacheValue("GetPanelsAtCursor")
		this:DelCacheValue("GetTopmostPanelAtCursor")
	end

	self.SkinMap = {}

	self.Layout = self:CreateListener({
		Disabled = false,
		Padding = 0,
		Margin = 5,
		ZIndex = 0,
		Visible = true,
		PaintBackground = true,
		Tooltip = "",
	}, function(this, k, v)
		self:InvalidateLayout()

		if k == "Disabled" then
			if v then
				self:ReleaseClick()
			end
		end

		if k == "ZIndex" or k == "Visible" then
			recache(self)

			local parent = self:GetParent()
			if not IsValid(parent) then return end

			recache(parent)
			parent:ForEachChild(updateothers)
		end

		if k == "Visible" then
			if v then
				self:ApplyNetworkedMode()

				self:CallHook("OnOpen")
				self:StartListenRecursive()
			else
				self:CallHook("OnClose")
				self:ReleaseClick()
				self:StopListenRecursive()
			end
		end

		if k == "Tooltip" then
			self:UpdateTooltip(v)
		end
	end)

	self._ChildrenPanels = {}
	self._ChildrenPanelsSorted = {}

	self.Parent = nil
	self.SuperParent = self

	self.Clickable = true
	self.IsPressed = false
	self.SkinAble = false

	self.SkinMap["color"] = {
		set = "SetColor",
		get = "GetColor",
	}

	if CLIENT then
		self.Colors = self:CreateListener({
			Main = Color(255,255,255),
			DrawAlpha = 1,
		}, function(...)
			self:QueueCall("PerformRerender")
		end)
	end

	self:Clear()
	self:InvalidateLayout()
end

function CLASS:Initialize()
	BASE.Initialize(self)

	self:DelCacheValue("GetAbsolutePos")
	self:DelCacheValue("GetRenderPos")
	self:DelCacheValue("IsVisible")
	self:DelCacheValue("GetClickPanel")
	self:DelCacheValue("GetPanelsAtCursor")
	self:DelCacheValue("GetTopmostPanelAtCursor")

	self:ApplyHierarchy()
end

function CLASS:Remove(childmode)
	self:ForEachChild(function(this, panel)
		panel:Remove(true)
	end)

	emptyTableSafe(self._ChildrenPanels)
	emptyTableSafe(self._ChildrenPanelsSorted)

	if childmode then
		BASE.Remove(self)
		return
	end

	self:SetParent(nil)
	BASE.Remove(self)
end

function CLASS:InvalidateLayout(layoutnow, nochildren)
	if layoutnow then
		self:PerformLayout(nochildren)
		return
	end

	self:QueueCall("PerformLayout", nochildren)
end

function CLASS:PerformRerender(force)
	if not force and not self._rendered then return end
	self._rendered = false

	self:GetSuperParent():CallHook("OnContentChanged")
end

local function CursorChangedInternalFunc(this, panel)
	if not panel.Clickable then return end
	if not panel:IsVisible() then return end
	panel:CursorChangedInternal()
end

function CLASS:CursorChangedInternal(nochildren)
	self:DelCacheValue("IsVisible")
	self:DelCacheValue("GetClickPanel")
	self:DelCacheValue("GetPanelsAtCursor")
	self:DelCacheValue("GetTopmostPanelAtCursor")

	self:_OpenTooltipPanel()

	if nochildren then return end

	if not self:IsCursorInBounds() or not self.Clickable or not self:IsVisible() then
		self._CursorChangedInternalOutCount = (self._CursorChangedInternalOutCount or 0) - 1

		if self._CursorChangedInternalOutCount <= 0 then
			return
		end
	else
		self._CursorChangedInternalOutCount = 2
	end

	self:ForEachChild(CursorChangedInternalFunc)
end

local function PerformLayoutFunc(this, panel)
	panel:InvalidateLayout(true)
end

function CLASS:PerformLayout(nochildren)
	self:DelCacheValue("GetAbsolutePos")
	self:DelCacheValue("GetRenderPos")
	self:DelCacheValue("IsVisible")
	self:DelCacheValue("GetClickPanel")
	self:DelCacheValue("GetPanelsAtCursor")
	self:DelCacheValue("GetTopmostPanelAtCursor")

	self:ForEachChild(PerformLayoutFunc)
	self:CursorChangedInternal(true)
	self:PerformRerender(true)

	self:DelCacheValue("GetAbsolutePos")
	self:DelCacheValue("GetRenderPos")
	self:DelCacheValue("IsVisible")
	self:DelCacheValue("GetClickPanel")
	self:DelCacheValue("GetPanelsAtCursor")
	self:DelCacheValue("GetTopmostPanelAtCursor")

	self:CallHook("OnPerformLayout")
end

local function RenderInternalPanel(this, panel)
	if not panel._RenderInternal then return end
	panel:_RenderInternal()
end

function CLASS:_RenderInternal()
	if SERVER then return end
	if not self.Valid then return end

	if not self:IsVisibleSimple() then
		self._rendered = true
		return
	end

	local currentRenderAlpha = surface.GetAlphaMultiplier()
	local drawAlpha = self:GetDrawAlpha()
	local alpha = drawAlpha * currentRenderAlpha
	local isTransparent = drawAlpha < 1

	if isTransparent then
		surface.SetAlphaMultiplier(alpha)
	end

	if self:GetPaintBackground() then
		self:Render()
	end

	self:ForEachChild(RenderInternalPanel, true)

	if isTransparent then
		surface.SetAlphaMultiplier(currentRenderAlpha)
	end

	self._rendered = true
end

local g_colDebug = Color(0,0,0,200)

function CLASS:Render()
	if not self.debugborders then return end

	local x, y = self:GetRenderPos()
	local w, h = self:GetSize()

	surface.SetDrawColor( g_colDebug:Unpack() )
	surface.DrawOutlinedRect(x, y, w, h)
	surface.DrawOutlinedRect(x + 1, y + 1, w - 2, h - 2)
end

local function StartListenRecursiveFunc(this, panel)
	panel:StartListenRecursive()
end

local function StopListenRecursiveFunc(this, panel)
	panel:StopListenRecursive()
end

function CLASS:StartListenRecursive()
	self.CanListen = true
	self:ForEachChild(StartListenRecursiveFunc)
	self:StartListen()
end

function CLASS:StopListenRecursive()
	self.CanListen = false
	self:ForEachChild(StopListenRecursiveFunc)
	self:StopListen()
end

function CLASS:_SortPanels()
	if not self.Valid then
		return
	end

	local childrenPanels = self._ChildrenPanels
	local childrenPanelsSorted = self._ChildrenPanelsSorted

	if not childrenPanels or table.IsEmpty(childrenPanels) then
		-- we don't have child panels

		if not childrenPanelsSorted or #childrenPanelsSorted <= 0 then
			-- we already "sorted" the empty table
			return
		end

		-- we "sort" the empty table

		emptyTableSafe(childrenPanelsSorted)

		local superparent = self:GetSuperParent()
		if IsValid(superparent) then
			superparent:QueueCall("OnPanelElementLoaded")
		end

		return
	end

	if childrenPanelsSorted and #childrenPanelsSorted > 0 then
		-- we have child panels and we sorted them already
		return
	end

	-- we have child panels, but we didn't sorted them yet

	local tmp = {}
	for _, panel in pairs(childrenPanels) do
		if not IsValid(panel) then continue end
		if panel == self then continue end
		if panel:GetParent() ~= self then continue end

		table.insert(tmp, panel)
	end

	table.sort(tmp, function(a, b)
		local a_strong_composition = a._strong_composition and 1 or -1
		local b_strong_composition = b._strong_composition and 1 or -1

		if a_strong_composition ~= b_strong_composition then
			return a_strong_composition < b_strong_composition
		end

		local a_zindex = a:GetZPos()
		local b_zindex = b:GetZPos()

		if a_zindex ~= b_zindex then
			return a_zindex > b_zindex
		end

		return a:GetID() > b:GetID()
	end)

	emptyTableSafe(childrenPanelsSorted)
	for _, panel in pairs(tmp) do
		table.insert(childrenPanelsSorted, panel)
	end

	local superparent = self:GetSuperParent()
	if IsValid(superparent) then
		superparent:QueueCall("OnPanelElementLoaded")
	end
end

function CLASS:AddPanel(panel, strong_composition)
	if not IsValid(panel) then return end
	if panel == self then return end

	local id = tostring(panel)
	if IsValid(self._ChildrenPanels[id]) then return self._ChildrenPanels[id] end

	self._ChildrenPanels[id] = panel
	emptyTableSafe(self._ChildrenPanelsSorted)

	panel:SetParent(self)
	panel:ApplyHierarchy()
	panel._strong_composition = strong_composition or false

	panel:InvalidateLayout()
	self:InvalidateLayout()

	self:QueueCall("_SetSkinAfterAddedPanel")
	self:QueueCall("_SetModelSetupAfterAddedPanel")

	return panel
end

function CLASS:AddPanelByClassname(name, ...)
	local panel = StreamRadioLib.CreateOBJ("ui/" .. name)
	return self:AddPanel(panel, ...)
end

function CLASS:RemovePanel(panel)
	if not IsValid(panel) then return end
	if panel == self then return end

	local id = tostring(panel)
	if not self._ChildrenPanels[id] then return panel end

	panel:SetParent(nil)
	panel:ApplyHierarchy()

	self._ChildrenPanels[id] = nil
	emptyTableSafe(self._ChildrenPanelsSorted)

	if panel._strong_composition then
		panel:Remove()

		self:InvalidateLayout()
		return nil
	end

	self:InvalidateLayout()
	panel:InvalidateLayout()

	return panel
end

function CLASS:Clear()
	self:ForEachChild("RemovePanel")

	emptyTableSafe(self._ChildrenPanels)
	emptyTableSafe(self._ChildrenPanelsSorted)

	self:InvalidateLayout(true)
end

function CLASS:ClearInvisible()
	self:ForEachChild(function(this, panel)
		if not IsValid(panel) then return end
		if panel:IsVisible() then return end

		self:RemovePanel(panel)
	end)

	emptyTableSafe(self._ChildrenPanelsSorted)
	self:InvalidateLayout(true)
end

function CLASS:ForEachParent(func)
	func = self:GetFunction(func)
	if not func then
		return nil
	end

	local once = {}
	local curparent = self:GetParent()

	while true do
		if not IsValid(curparent) then break end
		if once[curparent] then break end
		once[curparent] = true

		local rv = func(self, curparent)
		if rv ~= nil then
			return rv
		end

		curparent = curparent:GetParent()
	end

	return nil
end

function CLASS:ForEachChild(func, reverse)
	self:_SortPanels()
	local children = self._ChildrenPanelsSorted

	func = self:GetFunction(func)
	if not func then
		return nil
	end

	if not children then
		return nil
	end

	local invalid = false
	local len = #children

	if len <= 0 then
		return nil
	end

	if reverse then
		for i = len, 1, -1 do
			local panel = children[i]
			if not IsValid(panel) then
				invalid = true
				continue
			end

			local rv = func(self, panel)
			if rv ~= nil then
				return rv
			end
		end
	else
		for i = 1, len do
			local panel = children[i]
			if not IsValid(panel) then
				invalid = true
				continue
			end

			local rv = func(self, panel)
			if rv ~= nil then
				return rv
			end
		end
	end

	if invalid then
		emptyTableSafe(self._ChildrenPanelsSorted)
		self:_SortPanels()
	end

	return nil
end

function CLASS:ForEachChildRecursive(func, reverse)
	func = self:GetFunction(func)
	if not func then
		return
	end

	local nodouble = {}

	local function recursive(this, child)
		local cid = child:GetID()

		if nodouble[cid] then
			return
		end

		local rv = func(self, child)
		nodouble[cid] = true

		if rv ~= nil then
			return rv
		end

		return child:ForEachChild(recursive, reverse)
	end

	return self:ForEachChild(recursive, reverse)
end

function CLASS:GetPanelByName(name)
	name = StreamRadioLib.GetHierarchy(name)
	local maxlevel = #name

	local panel = self

	for level, v in ipairs(name) do
		if not IsValid(panel) then break end

		if not panel._panelmap then break end
		if not panel._panelmap.names then break end

		panel = panel._panelmap.names[v]

		if level >= maxlevel then
			return panel
		end
	end

	return nil
end

function CLASS:GetPanelsBySkinIdentifyer(name)
	name = StreamRadioLib.GetHierarchy(name)
	local maxlevel = #name
	local panels = {}

	local function recursive(thispanel, level)
		if not IsValid(thispanel) then return end

		local thisname = name[level] or ""

		if level > maxlevel then
			table.insert(panels, thispanel)
			return
		end

		if not thispanel._panelmap then return end
		if not thispanel._panelmap.skin then return end

		for k, panel in pairs(thispanel._panelmap.skin[thisname] or {}) do
			recursive(panel, level + 1)
		end
	end

	recursive(self, 1)

	return panels
end

function CLASS:ReleaseClick()
	if not self.IsPressed then
		return
	end

	self.IsPressed = false
	self:CallHook("OnMouseReleased")
end

function CLASS:Click(pressed)
	if not pressed then
		local sp = self:GetSuperParent()
		local LastClickedPanel = sp.LastClickedPanel

		if IsValid(LastClickedPanel) then
			LastClickedPanel:ReleaseClick()
			sp.LastClickedPanel = nil
		end

		self:ReleaseClick()
		return
	end

	local panel = self:GetClickPanel()
	if not IsValid(panel) then return end

	if panel ~= self then
		panel:Click(pressed)
		return
	end

	if self:IsInputDisabled() then return end
	if self:IsDisabled() then return end

	local sp = self:GetSuperParent()
	local LastClickedPanel = sp.LastClickedPanel

	if IsValid(LastClickedPanel) and LastClickedPanel ~= self then
		LastClickedPanel:ReleaseClick()
	end

	self.IsPressed = pressed

	if pressed then
		sp.LastClickedPanel = self

		local lastclicktime = self.LastClickTime or 0
		self.LastClickTime = RealTime()

		local clickdistance = self.LastClickTime - lastclicktime

		if clickdistance < 0.5 and isfunction(self.DoDoubleClick) then
			self:DoDoubleClick()
		end

		self:CallHook("DoClick")
	else
		sp.LastClickedPanel = nil
		self:CallHook("OnMouseReleased")
	end
end

local function GetFirstClickableChildPanel(this, panel)
	if not panel.Clickable then return end
	if not panel:IsVisible() then return end
	if not panel:IsCursorInBounds() then return end

	return panel
end

function CLASS:GetClickPanel()
	if not self:IsVisible() then return end
	if not self:IsCursorInBounds() then return end

	local chpanel = self:GetCacheValue("GetClickPanel")
	if IsValid(chpanel) then
		return chpanel
	end

	local panel = self:ForEachChild(GetFirstClickableChildPanel)

	if not IsValid(panel) then
		panel = GetFirstClickableChildPanel(self, self) or self
	end

	return self:SetCacheValue("GetClickPanel", panel)
end

function CLASS:IsCursorInBounds()
	local cxr, cyr = self:GetCursorRelative()
	return self:IsInBounds(cxr, cyr)
end

function CLASS:IsCursorOnPanel()
	local parent = self:GetParent()

	local self_onself = self:GetClickPanel() == self
	if not IsValid(parent) then
		return self_onself
	end

	return self_onself and parent:GetClickPanel() == self
end

function CLASS:IsInBounds(x, y)
	local w, h = self:GetSize()

	if x < 0 then return false end
	if x > w then return false end
	if y < 0 then return false end
	if y > h then return false end

	return true
end

function CLASS:GetPanelsAtCursor()
	local chpanels = self:GetCacheValue("GetPanelsAtCursor")
	if IsValid(chpanels) then
		return chpanels
	end

	local cx, cy = self:GetCursor()
	local panels = self:GetPanelsAtPos(cx, cy)

	return self:SetCacheValue("GetPanelsAtCursor", panels)
end

function CLASS:GetPanelsAtPos(x, y)
	local panels = {}

	local function func(this, panel)
		if not panel:IsVisible() then return end

		local px, py = panel:GetAbsolutePos()
		if not panel:IsInBounds(x - px, y - py) then return end

		table.insert(panels, panel)
	end

	func(self, self)
	self:ForEachChildRecursive(func)

	return panels
end

function CLASS:GetTopmostPanelAtCursor()
	local chpanel = self:GetCacheValue("GetTopmostPanelAtCursor")
	if IsValid(chpanel) then
		return chpanel
	end

	local panels = self:GetPanelsAtCursor()

	local area = nil
	local panel = nil

	for i, v in ipairs(panels) do
		local w, h = v:GetSize()
		local a = w * h

		if not area or area >= a then
			area = a
			panel = v
		end
	end

	return self:SetCacheValue("GetTopmostPanelAtCursor", panel)
end

function CLASS:GetAbsolutePos()
	local chx, chy = self:GetCacheValues("GetAbsolutePos")
	if chx then
		return chx, chy
	end

	local getpos = self.GetClientPos or self.GetPos
	local x, y = getpos(self)

	local parent = self:GetParent()
	if not IsValid(parent) then
		return self:SetCacheValues("GetAbsolutePos", x, y)
	end

	local px, py = parent:GetAbsolutePos()

	return self:SetCacheValues("GetAbsolutePos", px + x, py + y)
end

function CLASS:GetRenderPos()
	local chx, chy = self:GetCacheValues("GetRenderPos")
	if chx then
		return chx, chy
	end

	local getpos = self.GetClientPos or self.GetPos
	local x, y = getpos(self)

	local parent = self:GetParent()
	if not IsValid(parent) then
		return self:SetCacheValues("GetRenderPos", x, y)
	end

	local px, py = parent:GetRenderPos()

	return self:SetCacheValues("GetRenderPos", px + x, py + y)
end

function CLASS:GetArea()
	local x, y = self:GetPos()
	local w, h = self:GetSize()

	return x, y, x + w, y + h
end

function CLASS:SetPos(x, y)
	self.Pos.x = x or 0
	self.Pos.y = y or 0
end

function CLASS:GetPos()
	return self.Pos.x or 0, self.Pos.y or 0
end

function CLASS:SetPosX(x)
	self.Pos.x = x or 0
end

function CLASS:GetPosX()
	return self.Pos.x or 0
end

function CLASS:SetPosY(y)
	self.Pos.y = y or 0
end

function CLASS:GetPosY()
	return self.Pos.y or 0
end

function CLASS:GetClientPos()
	local x, y = self:GetPos()
	local parent = self:GetParent()

	if not IsValid(parent) then return x, y end
	local p = parent:GetPadding()

	return x + p, y + p
end

function CLASS:SetSize(w, h)
	w = w or 0
	h = h or 0

	if w < 0 then
		w = 0
	end

	if h < 0 then
		h = 0
	end

	local size = self.Size

	size.w = w
	size.h = h
end

function CLASS:SetWidth(w)
	w = w or 0

	if w < 0 then
		w = 0
	end

	self.Size.w = w
end

function CLASS:SetHeight(h)
	h = h or 0

	if h < 0 then
		h = 0
	end

	self.Size.h = h
end

function CLASS:GetSize()
	local size = self.Size

	return size.w or 0, size.h or 0
end

function CLASS:GetWidth()
	return self.Size.w or 0
end

function CLASS:GetHeight()
	return self.Size.h or 0
end

function CLASS:GetClientSize()
	local w, h = self:GetSize()
	local p = 2 * self:GetPadding()

	w = w - p
	h = h - p

	if w < 0 then
		w = 0
	end

	if h < 0 then
		h = 0
	end

	return w, h
end

function CLASS:GetClientWidth()
	local w = self:GetWidth()
	local p = 2 * self:GetPadding()

	w = w - p

	if w < 0 then
		w = 0
	end

	return w
end

function CLASS:GetClientHeight()
	local h = self:GetHeight()
	local p = 2 * self:GetPadding()

	h = h - p

	if h < 0 then
		h = 0
	end

	return h
end

function CLASS:GetSquareSize()
	local w, h = self:GetClientSize()

	local square = w

	if square > h then
		square = h
	end

	return square
end

function CLASS:SetColor(color)
	if SERVER then return end

	color = color or {}
	color = Color(
		color.r or 0,
		color.g or 0,
		color.b or 0,
		color.a or 0
	)

	self.Colors.Main = color
end

function CLASS:GetColor()
	if SERVER then return end

	local col = self.Colors.Main
	return col
end

function CLASS:SetDrawAlpha(alpha)
	if SERVER then return end

	alpha = math.Clamp(alpha, 0, 1)
	self.Colors.DrawAlpha = alpha
end

function CLASS:GetDrawAlpha()
	if SERVER then return end
	local alpha = self.Colors.DrawAlpha

	return alpha or 0
end

function CLASS:SetParent(panel)
	local oldpanel = self:GetParent()

	if oldpanel == panel then return end
	if panel == self then
		error("Do not set the parent to self!", 2)
	end

	self.Parent = panel

	if IsValid(oldpanel) then
		oldpanel:RemovePanel(self)
	end

	if IsValid(panel) then
		panel:AddPanel(self)
	end
end

function CLASS:GetParent()
	return self.Parent
end

function CLASS:GetSuperParent()
	return self.SuperParent
end

function CLASS:CalcSuperParent()
	local superparent = self

	self:ForEachParent(function(this, parent)
		superparent = parent
	end)

	self.SuperParent = superparent
	return superparent
end

function CLASS:SetTooltip(text)
	if SERVER then return end
	self.Layout.Tooltip = tostring(text or "")
end

function CLASS:GetTooltip()
	if SERVER then return "" end
	return self.Layout.Tooltip or ""
end

function CLASS:GetTooltipPanel()
	if SERVER then return nil end

	local sp = self:GetSuperParent()
	return sp.Tooltip
end

function CLASS:UpdateTooltip(text)
	if SERVER then return nil end

	local sp = self:GetSuperParent()
	if not IsValid(sp) then return end
	if not IsValid(sp.Tooltip) then return end
	if not sp.Tooltip:IsVisible() then return end
	if not sp.UpdateTooltip then return end

	local onpanel = self:IsCursorOnPanel()
	if not onpanel then return end

	return sp:UpdateTooltip(text)
end

function CLASS:_OpenTooltipPanel()
	if SERVER then return end

	local text = self:GetTooltip()
	if text == "" then return end

	local sp = self:GetSuperParent()
	if not IsValid(sp) then return end
	if not IsValid(sp.Tooltip) then return end
	if not sp.OpenTooltipDelay then return end

	local onpanel = self:IsCursorOnPanel()

	local oldonpanel = self._oldonpanel
	self._oldonpanel = onpanel

	if onpanel == oldonpanel then return end

	if not onpanel then
		sp:CloseTooltip()
		return
	end


	sp:CloseTooltip()
	sp:OpenTooltipDelay(text, 0.75, function()
		local text = self:GetTooltip()
		if text == "" then return false end

		local onpanel = self:IsCursorOnPanel()

		if not onpanel then
			sp:CloseTooltip()
		end

		return onpanel
	end)
end

function CLASS:IsDisabled()
	return self.Layout.Disabled or false
end

function CLASS:IsEnabled()
	return not self.Layout.Disabled
end

function CLASS:SetEnabled(bool)
	self.Layout.Disabled = not bool
end

function CLASS:SetDisabled(bool)
	self.Layout.Disabled = bool or false
end

function CLASS:IsInputDisabled()
	return CLIENT and self.Network.Active
end

function CLASS:SetPadding(padding)
	padding = padding or 0

	if padding < 0 then
		padding = 0
	end

	self.Layout.Padding = padding or 0
end

function CLASS:GetPadding()
	return self.Layout.Padding or 0
end

function CLASS:SetMargin(margin)
	margin = margin or 0

	if margin < 0 then
		margin = 0
	end

	self.Layout.Margin = margin or 0
end

function CLASS:GetMargin()
	return self.Layout.Margin or 0
end

function CLASS:HasChildren()
	self:_SortPanels()

	local childrenPanelsSorted = self._ChildrenPanelsSorted
	if not childrenPanelsSorted then
		return false
	end

	if #childrenPanelsSorted <= 0 then
		return false
	end

	return true
end

function CLASS:IsSeen()
	local superparent = self:GetSuperParent()

	if superparent == self then
		return true
	end

	if superparent:IsSeen() then
		return true
	end

	return false
end

function CLASS:IsVisible()
	local isvisible = self:GetCacheValue("IsVisible")
	if isvisible ~= nil then
		return isvisible
	end

	if not self:IsVisibleSimple() then
		return self:SetCacheValue("IsVisible", false)
	end

	local parent = self:GetParent()
	if IsValid(parent) then
		return self:SetCacheValue("IsVisible", parent:IsVisible())
	end

	return self:SetCacheValue("IsVisible", true)
end

function CLASS:IsVisibleSimple()
	local w, h = self:GetSize()

	if w <= 0 then
		return false
	end

	if h <= 0 then
		return false
	end

	return self.Layout.Visible
end

function CLASS:SetVisible(bool)
	self.Layout.Visible = bool or false
end

function CLASS:IsVisibleSimple()
	local w, h = self:GetSize()

	if w <= 0 then
		return false
	end

	if h <= 0 then
		return false
	end

	return self.Layout.Visible
end

function CLASS:SetPaintBackground(bool)
	self.Layout.PaintBackground = bool or false
end

function CLASS:GetPaintBackground()
	return self.Layout.PaintBackground
end

function CLASS:GetZPos()
	return self.Layout.ZIndex or 0
end

function CLASS:SetZPos(zindex)
	self.Layout.ZIndex = zindex or 0
end

function CLASS:Close()
	self:SetVisible(false)
end

function CLASS:Open()
	self:SetVisible(true)
end

function CLASS:Hide()
	self:SetVisible(false)
end

function CLASS:Show()
	self:SetVisible(true)
end

function CLASS:_GetCursorInternal()
	return -1, -1
end

function CLASS:GetCursor()
	local sp = self:GetSuperParent()
	return sp:_GetCursorInternal()
end

function CLASS:GetCursorRelative()
	local cx, cy = self:GetCursor()
	local posx, posy = self:GetAbsolutePos()

	return cx - posx, cy - posy
end

function CLASS:CalcHierarchy(func)
	local thisfunc = self:GetFunction(func)
	if not thisfunc then return end

	local hierarchy = {}
	table.insert(hierarchy, thisfunc(self))

	self:ForEachParent(function(this, parent)
		local thisfunc = parent:GetFunction(func)
		if not thisfunc then return end

		table.insert(hierarchy, thisfunc(parent))
	end)

	hierarchy = table.Reverse(hierarchy)
	return hierarchy
end

function CLASS:ApplyHierarchy()
	self:CalcSuperParent()
	self:CalcName()
	self:CalcNWName()
	self:CalcSkinIdentifyer()
end

function CLASS:GetReferenceClassobjsNWRegister()
	local superparent = self:GetSuperParent()
	return superparent.entityClassobjsNwRegister
end

function CLASS:SetReferenceClassobjsNWRegister(nwRegister)
	if not istable(nwRegister) then
		return
	end

	local superparent = self:GetSuperParent()
	superparent.entityClassobjsNwRegister = nwRegister
end

function CLASS:GetEntity()
	local superparent = self:GetSuperParent()
	return superparent.Entity
end

function CLASS:GetEntityTable()
	local superparent = self:GetSuperParent()

	if not superparent._entityTableGetter then
		return nil
	end

	return superparent._entityTableGetter()
end

function CLASS:SetEntity(ent)
	self:ApplyHierarchy()

	local superparent = self:GetSuperParent()

	if not IsValid(ent) then
		superparent.Entity = nil
		superparent._entityTableGetter = nil

		superparent:RemoveFromNwRegister(superparent.entityClassobjsNwRegister)

		self:ApplyNetworkedMode()
		return
	end

	superparent.Entity = ent
	local entTable = ent:GetTable()

	superparent._entityTableGetter = function()
		-- avoid storing the entity table directly, so we dont leak memory
		return entTable
	end

	superparent:SetReferenceClassobjsNWRegister(entTable._3dstraemradio_classobjs_nw_register)

	self:ApplyNetworkedMode()
end

function CLASS:SetName(name)
	self:ApplyHierarchy()

	name = tostring(name or "")
	name = string.gsub(name, "[%/%\\%s]", "_")

	local oldname = self:GetName()

	self.Name = name
	self:CalcName()

	local parent = self:GetParent()
	if IsValid(parent) then
		parent._panelmap = parent._panelmap or {}
		parent._panelmap.names = parent._panelmap.names or {}
		parent._panelmap.names[oldname] = nil
		parent._panelmap.names[name] = self
	end
end

function CLASS:GetNameWithoutHierarchy()
	return self.Name or ""
end

function CLASS:GetName()
	return self.HierarchyName or ""
end

function CLASS:SetNWName(nwname)
	self:ApplyHierarchy()

	nwname = tostring(nwname or "")
	nwname = string.gsub(nwname, "[%/%\\%s]", "_")

	self.NWName = nwname
	self:CalcNWName()

	local parent = self:GetParent()
	if IsValid(parent) then
		parent._panelmap = parent._panelmap or {}
		parent._panelmap.nwnames = parent._panelmap.nwnames or {}
		parent._panelmap.nwnames[nwname] = self
	end

	self:ApplyNetworkedMode()
end

function CLASS:GetNWNameWithoutHierarchy()
	return self.NWName or ""
end

function CLASS:GetNWName()
	return self.HierarchyNWName or ""
end

function CLASS:SetSkinIdentifyer(name)
	name = tostring(name or "")
	name = string.gsub(name, "[%/%\\%s]", "_")

	local parent = self:GetParent()
	if IsValid(parent) then
		parent._panelmap = parent._panelmap or {}
		parent._panelmap.skin = parent._panelmap.skin or {}
		parent._panelmap.skin[name] = parent._panelmap.skin[name] or {}

		table.insert(parent._panelmap.skin[name], self)
	end

	self.SkinName = name
	self:CalcSkinIdentifyer()
end

function CLASS:GetSkinIdentifyerHierarchy()
	if not self.HierarchySkinIdentifyer then
		return self:CalcSkinIdentifyer()
	end

	return self.HierarchySkinIdentifyer
end

function CLASS:GetSkinIdentifyer(name)
	return self.SkinName or ""
end

function CLASS:CalcName()
	local hierarchy = self:CalcHierarchy("GetNameWithoutHierarchy")
	local name = table.concat(hierarchy, "/")

	self.HierarchyName = name
	return self.HierarchyName
end

function CLASS:CalcNWName()
	local hierarchy = self:CalcHierarchy("GetNWNameWithoutHierarchy")
	local name = table.concat(hierarchy, "/")

	self.HierarchyNWName = name
	return self.HierarchyNWName
end

function CLASS:CalcSkinIdentifyer()
	local hierarchy = self:CalcHierarchy("GetSkinIdentifyer")
	table.remove(hierarchy, 1)

	local name = table.concat(hierarchy, "/")

	self.HierarchySkinIdentifyer = name
	return self.HierarchySkinIdentifyer
end

function CLASS:IsSkinAble()
	if self:GetSkinIdentifyer() == "" then return false end
	if not self.SkinAble then return false end
	if not self.SkinMap then return false end

	return true
end

function CLASS:SetSkinAble(bool)
	self.SkinAble = bool or false
end

function CLASS:_SetSkinAfterAddedPanel()
	if not self._skindata then return end
	self:SetSkin(self._skindata)
end

function CLASS:_SetModelSetupAfterAddedPanel()
	if not self._modelsetupdata then return end
	self:SetModelSetup(self._modelsetupdata)
end

function CLASS:SetSkin(skindata)
	if SERVER then return end

	skindata = skindata or {}
	self._skindata = skindata

	local thisdata = skindata.data
	local childrendata = skindata.children

	if thisdata and self:IsSkinAble() then
		if self.SkinMap then
			for k, v in pairs(thisdata) do
				if not self.SkinMap[k] then continue end

				local setter = self:GetFunction(self.SkinMap[k].set)
				if not setter then continue end

				setter(self, v)
			end
		end

		self:CallHook("OnSkin", thisdata)
	end

	if childrendata then
		self:ForEachChild(function(this, panel)
			local name = panel:GetSkinIdentifyer()

			local childdata = childrendata[name]
			if not childdata then return end

			panel:SetSkin(childdata)
		end)
	end
end

function CLASS:GetSkinValue(key, ...)
	key = tostring(key or "")

	if not self.SkinMap then return nil end
	if not self.SkinMap[key] then return nil end

	local getter = self:GetFunction(self.SkinMap[key].get)
	if not getter then return nil end

	return getter(self, ...)
end

function CLASS:GetSkinValues(...)
	local tmp = {}

	for k, v in pairs(self.SkinMap or {}) do
		local getter = self:GetFunction(v.get)
		if not getter then continue end

		tmp[k] = getter(self, ...)
	end

	return tmp
end

function CLASS:SetModelSetup(setupdata)
	setupdata = setupdata or {}
	local thisdata = setupdata.data
	local childrendata = setupdata.children

	if thisdata then
		self:CallHook("OnModelSetup", thisdata)
	end

	if childrendata then
		self:ForEachChild(function(this, panel)
			local name_id = panel:GetNameWithoutHierarchy()
			local name_skin = panel:GetSkinIdentifyer()


			local childdata = childrendata[name_id or ""] or childrendata[name_skin or ""]
			if not childdata then return end

			panel:SetModelSetup(childdata)
		end)
	end

	self._modelsetupdata = setupdata
	self:InvalidateLayout(false, true)
end

function CLASS:OnModelSetup(setup)
	if setup.margin then
		self:SetMargin(setup.margin)
	end

	if setup.padding then
		self:SetPadding(setup.padding)
	end

	if setup.visible ~= nil then
		self:SetVisible(setup.visible or false)
	end

	if setup.size then
		local s = setup.size
		local w = s.width or s.w or s.x or s[1] or 0
		local h = s.height or s.y or s[2] or 0

		self:SetSize(w, h)
	end

	if setup.pos then
		local p = setup.pos
		local x = p.x or p[1] or 0
		local y = p.y or p[2] or 0

		self:SetPos(x, y)
	end


	if setup.sizex or setup.sizew then
		local w = setup.sizex or setup.sizew
		self:SetWidth(w)
	end

	if setup.sizey or setup.sizeh then
		local h = setup.sizex or setup.sizeh
		self:SetHeight(h)
	end

	if setup.posx then
		local x = setup.posx
		self:SetPosX(x)
	end

	if setup.posy then
		local x = setup.posy
		self:SetPosY(x)
	end
end

return true


--lua/streamradio_core/classes/ui/progressbar.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local BASE = CLASS:GetBaseClass()

function CLASS:Create()
	BASE.Create(self)

	self.Progress = self:CreateListener({
		Fraction = 0,
		AllowEdit = false,
	}, function(this, k, v)
		if k == "Fraction" then
			if v > 1 then
				self.Progress.Fraction = 1
				return
			end

			if v < 0 then
				self.Progress.Fraction = 0
				return
			end

			self:CallHook("OnFractionChange", v)
			self:UpdateText()

			self:SetNWFloat("Fraction", v)
			self:InvalidateLayout(true)
		end

		if k == "AllowEdit" then
			self:SetNWBool(k, v)
			self:InvalidateLayout()
		end
	end)

	self.SkinMap["color_hover"] = {
		set = "SetHoverColor",
		get = "GetHoverColor",
	}

	self.SkinMap["color_disabled"] = {
		set = "SetDisabledColor",
		get = "GetDisabledColor",
	}

	self.SkinMap["color_foreground_hover"] = {
		set = "SetTextHoverColor",
		get = "GetTextHoverColor",
	}

	self.SkinMap["color_foreground_disabled"] = {
		set = "SetTextDisabledColor",
		get = "GetTextDisabledColor",
	}

	if not SERVER then
		self.Colors.Disabled = Color(128,128,128)
		self.Colors.DisabledText = Color(255,255,255)
		self.Colors.DisabledIcon = Color(255,255,255)

		self.Colors.Hover = Color(192,192,192)
		self.Colors.HoverText = Color(0,0,0)
		self.Colors.HoverIcon = Color(255,255,255)

		self.Colors.NoHover = Color(255,255,255)
		self.Colors.NoHoverText = Color(0,0,0)
		self.Colors.NoHoverIcon = Color(255,255,255)

		self.Colors = self.Colors + function(this, k, v)
			if k == "Main" then
				self.Colors.Secondary = Color(
					v.r * 0.65,
					v.g * 0.65,
					v.b * 0.65,
					v.a * 0.75
				)

				return
			end

			if k == "Secondary" then
				return
			end
	
			self:QueueCall("UpdateColor")
		end
	end

	self.CanHaveLabel = true
	self.SkinAble = true
	self:SetAlign(TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

	self:QueueCall("UpdateText")
	self:InvalidateLayout()
end

function CLASS:PerformLayout(...)
	BASE.PerformLayout(self, ...)

	self:QueueCall("UpdateColor")
end

function CLASS:CursorChangedInternal()
	BASE.CursorChangedInternal(self)

	if SERVER then return end
	self:UpdateColor()
end

function CLASS:UpdateColor()
	if SERVER then return end

	if self:IsDisabled() then
		self.Colors.Main = self.Colors.Disabled

		if IsValid(self.TextPanel) then
			self.TextPanel:SetColor(self.Colors.DisabledText)
		end

		return
	end

	if self.Progress.AllowEdit and self:IsCursorOnPanel() then
		self.Colors.Main = self.Colors.Hover

		if IsValid(self.TextPanel) then
			self.TextPanel:SetColor(self.Colors.HoverText)
		end

		return
	end

	self.Colors.Main = self.Colors.NoHover

	if IsValid(self.TextPanel) then
		self.TextPanel:SetColor(self.Colors.NoHoverText)
	end
end

function CLASS:Render()
	local x, y = self:GetRenderPos()
	local w, h = self:GetSize()
	local shadowWidth = self:GetShadowWidth()

	local col1 = self.Colors.Main or color_white
	local col2 = self.Colors.Secondary or color_white

	local fraction1 = self.Progress.Fraction

	if shadowWidth <= 0 then
		surface.SetDrawColor(col1:Unpack())
		surface.DrawRect(x, y, w, h)

		surface.SetDrawColor(col2:Unpack())
		surface.DrawRect(x, y, w * fraction1, h)

		return
	end

	local colShadow = self.Colors.Shadow or color_black

	local sx, sy = x + shadowWidth, y + shadowWidth
	local sw, sh = w - shadowWidth, h - shadowWidth

	surface.SetDrawColor(colShadow:Unpack())
	surface.DrawRect(sx, sy, sw, sh)
	surface.SetDrawColor(col1:Unpack())
	surface.DrawRect(x, y, sw, sh)
	surface.SetDrawColor(col2:Unpack())
	surface.DrawRect(x, y, sw * fraction1, sh)
end

function CLASS:DoEditProgress(force)
	if self:IsDisabled() then
		return
	end

	if not self.Progress.AllowEdit then
		return
	end

	if CLIENT and self.Network.Active then
		return
	end

	BASE.CursorChangedInternal(self)

	local cx = self:GetCursorRelative()
	local w = self:GetClientSize()

	local fraction = 0
	if w > 0 then
		fraction = math.Clamp(cx / w, 0, 1)
	end

	fraction = self:CallHook("OnFractionChangeEdit", fraction) or fraction

	self:SetFraction(fraction)
end

function CLASS:CursorChangedInternal()
	BASE.CursorChangedInternal(self)

	if not self.IsPressed then return end
	self:DoEditProgress()
end

function CLASS:DoClick()
	self:DoEditProgress()
end

function CLASS:OnMouseReleased()
	self:DoEditProgress()
end

function CLASS:UpdateText()
	local text = tostring(self:CallHook("FractionChangeText", self.Progress.Fraction) or "")
	self:SetText(text)
end

function CLASS:FractionChangeText(fraction)
	return math.Round(fraction * 100) .. "%"
end

function CLASS:SetFraction(fraction)
	self.Progress.Fraction = fraction or 0
end

function CLASS:GetFraction()
	return self.Progress.Fraction or 0
end

function CLASS:SetAllowFractionEdit(bool)
	self.Progress.AllowEdit = bool or false
end

function CLASS:GetAllowFractionEdit()
	return self.Progress.AllowEdit or false
end


function CLASS:SetColor(color)
	if SERVER then return end

	color = color or {}
	color = Color(
		color.r or 0,
		color.g or 0,
		color.b or 0,
		color.a or 0
	)

	self.Colors.NoHover = color
end

function CLASS:GetColor()
	if SERVER then return end

	local col = self.Colors.NoHover
	return col
end

function CLASS:SetHoverColor(color)
	if SERVER then return end

	color = color or {}
	color = Color(
		color.r or 0,
		color.g or 0,
		color.b or 0,
		color.a or 0
	)

	self.Colors.Hover = color
end

function CLASS:GetHoverColor()
	if SERVER then return end

	local col = self.Colors.Hover
	return col
end

function CLASS:SetDisabledColor(color)
	if SERVER then return end

	color = color or {}
	color = Color(
		color.r or 0,
		color.g or 0,
		color.b or 0,
		color.a or 0
	)

	self.Colors.Disabled = color
end

function CLASS:GetDisabledColor()
	if SERVER then return end

	local col = self.Colors.Disabled
	return col
end

function CLASS:SetTextColor(color)
	if SERVER then return end

	color = color or {}
	color = Color(
		color.r or 0,
		color.g or 0,
		color.b or 0,
		color.a or 0
	)

	self.Colors.NoHoverText = color
end

function CLASS:GetTextColor()
	if SERVER then return end

	local col = self.Colors.NoHoverText
	return col
end

function CLASS:SetTextHoverColor(color)
	if SERVER then return end

	color = color or {}
	color = Color(
		color.r or 0,
		color.g or 0,
		color.b or 0,
		color.a or 0
	)

	self.Colors.HoverText = color
end

function CLASS:GetTextHoverColor()
	if SERVER then return end

	local col = self.Colors.HoverText
	return col
end

function CLASS:SetTextDisabledColor(color)
	if SERVER then return end

	color = color or {}
	color = Color(
		color.r or 0,
		color.g or 0,
		color.b or 0,
		color.a or 0
	)

	self.Colors.DisabledText = color
end

function CLASS:GetTextDisabledColor()
	if SERVER then return end

	local col = self.Colors.DisabledText
	return col
end


function CLASS:ActivateNetworkedMode()
	BASE.ActivateNetworkedMode(self)

	if SERVER then
		self:SetNWFloat("Fraction", self:GetFraction())
		self:SetNWBool("AllowEdit", self:GetAllowFractionEdit())
		return
	end

	self:SetNWVarCallback("Fraction", "Float", function(this, nwkey, oldvar, newvar)
		self:SetFraction(newvar)
	end)

	self:SetNWVarCallback("AllowEdit", "Bool", function(this, nwkey, oldvar, newvar)
		self:SetAllowFractionEdit(newvar)
	end)

	self:SetFraction(self:GetNWFloat("Fraction", 0))
	self:SetAllowFractionEdit(self:GetNWBool("AllowEdit", false))
end

function CLASS:PreDupe()
	local data = {}

	data.Fraction = self:GetFraction()
	data.AllowEdit = self:GetAllowFractionEdit()

	return data
end

function CLASS:PostDupe(data)
	self:SetFraction(data.Fraction)
	self:SetAllowFractionEdit(data.AllowEdit)
end

return true


--lua/streamradio_core/classes/ui/list_files.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/list_files.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local BASE = CLASS:GetBaseClass()

function CLASS:Create()
	BASE.Create(self)

	self.Scollposes = StreamRadioLib.Util.CreateCacheArray(128)

	self.Path = self:CreateListener({
		Value = nil,
	}, function(this, k, v_new, v_old)
		if k ~= "Value" then return end

		local v = tostring(v_new or "")
		v = string.gsub(v, "[\\/]+", "/")
		v = string.TrimRight(v, "/")

		v_old = tostring(v_old or "")
		v_old = string.gsub(v_old, "[\\/]+", "/")
		v_old = string.TrimRight(v_old, "/")

		if v_old ~= v then
			self:SaveScrollPos(v_old)
		end

		if v_new ~= v then
			self.Path.Value = v
			return
		end

		self:SetNWString("Path", v)

		self:BuildList()
		self:CallHook("OnPathChange")
	end)

	self:SetEvent("OnClose", "SaveScrollPos", "SaveScrollPos")
	self:BuildList()
end

function CLASS:SetIDIcon(ID, icon)
	-- Dummy
end

function CLASS:GetIDIcon(ID)
	return StreamRadioLib.Filesystem.GetIcon(ID)
end

function CLASS:OnItemClickInternal(button, value, buttonindex, ListX, ListY, i)
	if CLIENT and self.Network.Active then return end

	if value.isfolder then
		local shouldswitch = self:CallHook("OnFolderClick", value)
		if shouldswitch == false then
			return
		end

		self.Path.Value = value.path
		return
	end

	self:CallHook("OnFileClick", value)
end

function CLASS:BuildList()
	if CLIENT and self.Network.Active then return end
	self:QueueCall("BuildListInternal")
end

function CLASS:BuildListInternal()
	-- override me
end

function CLASS:GetUpPath()
	return string.GetPathFromFilename(self.Path.Value or "") or ""
end

function CLASS:GoUpPath()
	if CLIENT and self.Network.Active then return end
	self:SetPath(self:GetUpPath())
end

function CLASS:GetPath()
	return self.Path.Value or ""
end

function CLASS:SetPath(path)
	if CLIENT and self.Network.Active then return end
	self.Path.Value = path or ""
end

function CLASS:Refresh()
	self:SaveScrollPos()

	self:ClearData()
	self:BuildList()

	self:CallHook("OnRefresh")
end

function CLASS:SaveScrollPos(path)
	if CLIENT and self.Network.Active then return end
	if not IsValid(self.ScrollBar) then return end

	local dd = self.ScrollBar.DupeData or {}
	local dupescroll = dd.Scroll or 0

	path = path or self:GetPath()
	self.Scollposes:Set(path, self.ScrollBar.Scroll.Pos or dupescroll)
end

function CLASS:RestoreScrollPos()
	if CLIENT and self.Network.Active then return end
	if not IsValid(self.ScrollBar) then return end

	local dd = self.ScrollBar.DupeData or {}
	local dupescroll = dd.Scroll or 0

	local path = self:GetPath()
	self.ScrollBar.Scroll.Pos = self.Scollposes:Get(path) or dupescroll
end

function CLASS:ActivateNetworkedMode()
	BASE.ActivateNetworkedMode(self)
	if SERVER then
		self:SetNWString("Path", self.Path.Value or "")
		self:BuildList()
		return
	end

	self:SetNWVarCallback("Path", "String", function(this, nwkey, oldvar, newvar)
		self.Path.Value = newvar
	end)

	self.Path.Value = self:GetNWString("Path", "")
end

function CLASS:PreDupe()
	local data = {}

	data.Path = self:GetPath()

	return data
end

function CLASS:PostDupe(data)
	self:SetPath(data.Path)
end

return true


--lua/streamradio_core/classes/ui/radio/list_playlists.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/radio/list_playlistview.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local BASE = CLASS:GetBaseClass()
local g_mat_sound = StreamRadioLib.GetPNGIcon("sound")

function CLASS:Create()
	BASE.Create(self)

	self.Path.Type = StreamRadioLib.TYPE_FOLDER
	self.Path = self.Path + function(this, k, v_new, v_old)
		if k ~= "Type" then return end

		local v = v_new or StreamRadioLib.TYPE_FOLDER
		v_old = v_old or StreamRadioLib.TYPE_FOLDER

		if v_new ~= v then
			self.Path.Type = v
			return
		end

		self:SetNWInt("PathType", v)
		self:BuildList()
	end

	self.State = self:CreateListener({
		Error = false,
	}, function(this, k, v)
		self:SetNWBool("Error", v)
		self:QueueCall("CallErrorState")
	end)

	self:SetIDIcon(0, g_mat_sound)
end

function CLASS:SetIDIcon(ID, icon)
	ID = ID or -1
	if ID < 0 then return end

	self.IconIDs[ID] = icon or ID
	self:UpdateButtons()
end

function CLASS:GetIDIcon(ID)
	ID = ID or -1
	if ID < 0 then return end

	return self.IconIDs[ID]
end

function CLASS:OnItemClickInternal(button, value, buttonindex, ListX, ListY, i)
	if CLIENT and self.Network.Active then return end
	self:PlayItem(value)
end

function CLASS:PlayItem(value)
	if CLIENT then return end
	if not self.Network.Active then return end
	if not value then return end

	self:CallHook("OnPlayItem", value)
end

function CLASS:CallErrorState()
	if self.State.Error then
		self:CallHook("OnError", self.Path.Value, self.Path.Type)
	else
		self:CallHook("OnErrorRelease", self.Path.Value, self.Path.Type)
	end
end

function CLASS:UpdateErrorState()
	if CLIENT then return end
	self.State.Error = self.tmperror or false
end

function CLASS:HasError()
	return self.State.Error
end

function CLASS:ClearData()
	if SERVER then
		self.State.Error = false
		self.tmperror = nil
	end

	BASE.ClearData(self)
end

function CLASS:BuildListInternal()
	if CLIENT then return end
	if not self.Network.Active then return end

	self:CallHook("OnPlaylistStartBuild")

	self:ClearData()

	if not self:IsVisible() then
		self:UpdateButtons()
		self:RestoreScrollPos()

		self:CallHook("OnPlaylistEndBuild")
		return
	end

	self.PathUid = StreamRadioLib.Util.Uid()

	if self.Path.Value == "" then
		self:UpdateButtons()
		self:RestoreScrollPos()

		self:CallHook("OnPlaylistEndBuild")
		return
	end

	local uid = self.PathUid

	StreamRadioLib.Filesystem.Read(self.Path.Value, self.Path.Type, function(success, playlist)
		if uid ~= self.PathUid then
			return
		end

		if not success then
			self.tmperror = true
			self:QueueCall("UpdateErrorState")
			self:CallHook("OnPlaylistEndBuild")
			return
		end

		self:QueueCall("_BuildListInternalAsyc", uid, playlist or {})
	end)
end

function CLASS:_BuildListInternalAsyc(uid, playlist)
	if uid ~= self.PathUid then
		return
	end

	local playlistItems = {}

	local len = #playlist
	if len <= 0 then
		self.tmperror = true
		self:QueueCall("UpdateErrorState")
		self:CallHook("OnPlaylistEndBuild", playlistItems)
		return
	end

	for i, v in ipairs(playlist) do
		local entry = {
			name = v.name,
			url = v.url,
			index = i,
		}

		playlistItems[i] = entry

		local data = {}
		data.value = entry
		data.text = entry.name
		data.icon = 0

		self:AddData(data, true)
	end

	if len == 1 then
		self:PlayItem(playlistItems[1])
	end

	self:UpdateButtons()
	self:QueueCall("RestoreScrollPos")

	self:CallHook("OnPlaylistEndBuild", playlistItems)
end

function CLASS:GetFile()
	return self.Path.Value or "", self.Path.Type or StreamRadioLib.TYPE_FOLDER
end

function CLASS:SetFile(path, ty)
	if CLIENT and self.Network.Active then return end

	self.Path.Value = path or ""
	self.Path.Type = ty or StreamRadioLib.TYPE_FOLDER
end

function CLASS:ActivateNetworkedMode()
	BASE.ActivateNetworkedMode(self)

	if SERVER then
		self:SetNWInt("PathType", self.Path.Type)
		self:SetNWBool("Error", self.State.Error)
		return
	end

	self:SetNWVarCallback("PathType", "Int", function(this, nwkey, oldvar, newvar)
		self.Path.Type = newvar
	end)

	self:SetNWVarCallback("Error", "Bool", function(this, nwkey, oldvar, newvar)
		self.State.Error = newvar
	end)

	self.Path.Type = self:GetNWInt("PathType", StreamRadioLib.TYPE_FOLDER)
	self.State.Error = self:GetNWBool("Error", false)
end

function CLASS:PreDupe()
	local data = {}
	local path, ty = self:GetFile()

	data.Path = path
	data.PathType = ty

	return data
end

function CLASS:ApplyLegacyDataFromDupe(dupedata)
	if not dupedata then return end

	local data = dupedata.Playlist
	local pos = dupedata.EntryOpen or 1

	if not data then return end
	if #data <= 1 then return end

	local ent = self:GetEntity()
	if not IsValid(ent) then return end
	if not ent.DupeDataApply then return end

	-- Legacy support:
	--  Old dupes still have the playlist data in this UI element.
	--  We moved the playlist to the entity, so move the legacy playlist data as well.

	ent:DupeDataApply("PlaylistData", {
		data = data,
		pos = pos,
	})
end

function CLASS:PostDupe(dupedata)
	local path = dupedata.Path
	local type = dupedata.PathType

	self.PathUid = StreamRadioLib.Util.Uid()
	local uid = self.PathUid

	StreamRadioLib.Filesystem.Read(path, type, function(success, data)
		if uid ~= self.PathUid then
			return
		end

		if not success or #data <= 0 then
			self:SetFile("", type)
			self:ApplyLegacyDataFromDupe(dupedata)

			self:CallHook("OnInvalidDupeFilepath")
			return
		end

		self:SetFile(path, type)
		self:ApplyLegacyDataFromDupe(dupedata)
	end)
end

return true


--lua/streamradio_core/classes/ui/radio/gui_player_controls.lua:
return gluapack()()
--lua/streamradio_core/client/cl_presets.lua:
local StreamRadioLib = StreamRadioLib

local LIBPrint = StreamRadioLib.Print
local LIBUtil = StreamRadioLib.Util

local g_mainPath = LIBUtil.GetMainDirectory("presets_test")
local g_radioColorToolName = "streamradio_gui_color_global"

-- Generated stock presets via concommand "debug_streamradio_convertpresets"
local g_settings = {
	[g_radioColorToolName] = {
		["Cold"] = {
			["streamradio_gui_color_global_border_color_border_a"] = "255",
			["streamradio_gui_color_global_border_color_border_b"] = "0",
			["streamradio_gui_color_global_border_color_border_g"] = "0",
			["streamradio_gui_color_global_border_color_border_r"] = "0",
			["streamradio_gui_color_global_button_color_a"] = "255",
			["streamradio_gui_color_global_button_color_b"] = "173",
			["streamradio_gui_color_global_button_color_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_disabled_b"] = "64",
			["streamradio_gui_color_global_button_color_disabled_g"] = "64",
			["streamradio_gui_color_global_button_color_disabled_r"] = "64",
			["streamradio_gui_color_global_button_color_foreground_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_b"] = "0",
			["streamradio_gui_color_global_button_color_foreground_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_b"] = "0",
			["streamradio_gui_color_global_button_color_foreground_disabled_g"] = "0",
			["streamradio_gui_color_global_button_color_foreground_disabled_r"] = "0",
			["streamradio_gui_color_global_button_color_foreground_g"] = "0",
			["streamradio_gui_color_global_button_color_foreground_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_b"] = "0",
			["streamradio_gui_color_global_button_color_foreground_hover_g"] = "0",
			["streamradio_gui_color_global_button_color_foreground_hover_r"] = "0",
			["streamradio_gui_color_global_button_color_foreground_r"] = "0",
			["streamradio_gui_color_global_button_color_g"] = "173",
			["streamradio_gui_color_global_button_color_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_hover_b"] = "128",
			["streamradio_gui_color_global_button_color_hover_g"] = "128",
			["streamradio_gui_color_global_button_color_hover_r"] = "128",
			["streamradio_gui_color_global_button_color_icon_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_r"] = "255",
			["streamradio_gui_color_global_button_color_r"] = "0",
			["streamradio_gui_color_global_button_color_shadow_a"] = "255",
			["streamradio_gui_color_global_button_color_shadow_b"] = "40",
			["streamradio_gui_color_global_button_color_shadow_g"] = "40",
			["streamradio_gui_color_global_button_color_shadow_r"] = "40",
			["streamradio_gui_color_global_cursor_color_cursor_a"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_b"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_g"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_r"] = "255",
			["streamradio_gui_color_global_error_color_a"] = "255",
			["streamradio_gui_color_global_error_color_b"] = "113",
			["streamradio_gui_color_global_error_color_foreground_a"] = "255",
			["streamradio_gui_color_global_error_color_foreground_b"] = "255",
			["streamradio_gui_color_global_error_color_foreground_g"] = "255",
			["streamradio_gui_color_global_error_color_foreground_r"] = "255",
			["streamradio_gui_color_global_error_color_g"] = "105",
			["streamradio_gui_color_global_error_color_r"] = "90",
			["streamradio_gui_color_global_error_color_shadow_a"] = "255",
			["streamradio_gui_color_global_error_color_shadow_b"] = "40",
			["streamradio_gui_color_global_error_color_shadow_g"] = "40",
			["streamradio_gui_color_global_error_color_shadow_r"] = "40",
			["streamradio_gui_color_global_header_color_a"] = "255",
			["streamradio_gui_color_global_header_color_b"] = "88",
			["streamradio_gui_color_global_header_color_foreground_a"] = "255",
			["streamradio_gui_color_global_header_color_foreground_b"] = "255",
			["streamradio_gui_color_global_header_color_foreground_g"] = "255",
			["streamradio_gui_color_global_header_color_foreground_r"] = "255",
			["streamradio_gui_color_global_header_color_g"] = "82",
			["streamradio_gui_color_global_header_color_r"] = "68",
			["streamradio_gui_color_global_header_color_shadow_a"] = "255",
			["streamradio_gui_color_global_header_color_shadow_b"] = "40",
			["streamradio_gui_color_global_header_color_shadow_g"] = "40",
			["streamradio_gui_color_global_header_color_shadow_r"] = "40",
			["streamradio_gui_color_global_main_color_a"] = "255",
			["streamradio_gui_color_global_main_color_b"] = "68",
			["streamradio_gui_color_global_main_color_g"] = "0",
			["streamradio_gui_color_global_main_color_r"] = "15",
			["streamradio_gui_color_global_spectrum_color_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_b"] = "52",
			["streamradio_gui_color_global_spectrum_color_foreground_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_foreground_b"] = "182",
			["streamradio_gui_color_global_spectrum_color_foreground_g"] = "170",
			["streamradio_gui_color_global_spectrum_color_foreground_r"] = "110",
			["streamradio_gui_color_global_spectrum_color_g"] = "50",
			["streamradio_gui_color_global_spectrum_color_icon_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_b"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_g"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_r"] = "255",
			["streamradio_gui_color_global_spectrum_color_r"] = "46",
			["streamradio_gui_color_global_spectrum_color_shadow_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_shadow_b"] = "40",
			["streamradio_gui_color_global_spectrum_color_shadow_g"] = "40",
			["streamradio_gui_color_global_spectrum_color_shadow_r"] = "40",
		},
		["Gray"] = {
			["streamradio_gui_color_global_border_color_border_a"] = "255",
			["streamradio_gui_color_global_border_color_border_b"] = "2",
			["streamradio_gui_color_global_border_color_border_g"] = "2",
			["streamradio_gui_color_global_border_color_border_r"] = "2",
			["streamradio_gui_color_global_button_color_a"] = "255",
			["streamradio_gui_color_global_button_color_b"] = "173",
			["streamradio_gui_color_global_button_color_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_disabled_b"] = "52",
			["streamradio_gui_color_global_button_color_disabled_g"] = "52",
			["streamradio_gui_color_global_button_color_disabled_r"] = "52",
			["streamradio_gui_color_global_button_color_foreground_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_b"] = "0",
			["streamradio_gui_color_global_button_color_foreground_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_b"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_g"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_r"] = "255",
			["streamradio_gui_color_global_button_color_foreground_g"] = "0",
			["streamradio_gui_color_global_button_color_foreground_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_b"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_g"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_r"] = "255",
			["streamradio_gui_color_global_button_color_foreground_r"] = "0",
			["streamradio_gui_color_global_button_color_g"] = "173",
			["streamradio_gui_color_global_button_color_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_hover_b"] = "79",
			["streamradio_gui_color_global_button_color_hover_g"] = "79",
			["streamradio_gui_color_global_button_color_hover_r"] = "79",
			["streamradio_gui_color_global_button_color_icon_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_r"] = "255",
			["streamradio_gui_color_global_button_color_r"] = "173",
			["streamradio_gui_color_global_button_color_shadow_a"] = "255",
			["streamradio_gui_color_global_button_color_shadow_b"] = "40",
			["streamradio_gui_color_global_button_color_shadow_g"] = "40",
			["streamradio_gui_color_global_button_color_shadow_r"] = "40",
			["streamradio_gui_color_global_cursor_color_cursor_a"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_b"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_g"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_r"] = "255",
			["streamradio_gui_color_global_error_color_a"] = "255",
			["streamradio_gui_color_global_error_color_b"] = "200",
			["streamradio_gui_color_global_error_color_foreground_a"] = "255",
			["streamradio_gui_color_global_error_color_foreground_b"] = "0",
			["streamradio_gui_color_global_error_color_foreground_g"] = "0",
			["streamradio_gui_color_global_error_color_foreground_r"] = "0",
			["streamradio_gui_color_global_error_color_g"] = "200",
			["streamradio_gui_color_global_error_color_r"] = "200",
			["streamradio_gui_color_global_error_color_shadow_a"] = "255",
			["streamradio_gui_color_global_error_color_shadow_b"] = "40",
			["streamradio_gui_color_global_error_color_shadow_g"] = "40",
			["streamradio_gui_color_global_error_color_shadow_r"] = "40",
			["streamradio_gui_color_global_header_color_a"] = "255",
			["streamradio_gui_color_global_header_color_b"] = "107",
			["streamradio_gui_color_global_header_color_foreground_a"] = "255",
			["streamradio_gui_color_global_header_color_foreground_b"] = "0",
			["streamradio_gui_color_global_header_color_foreground_g"] = "0",
			["streamradio_gui_color_global_header_color_foreground_r"] = "0",
			["streamradio_gui_color_global_header_color_g"] = "107",
			["streamradio_gui_color_global_header_color_r"] = "109",
			["streamradio_gui_color_global_header_color_shadow_a"] = "255",
			["streamradio_gui_color_global_header_color_shadow_b"] = "40",
			["streamradio_gui_color_global_header_color_shadow_g"] = "40",
			["streamradio_gui_color_global_header_color_shadow_r"] = "40",
			["streamradio_gui_color_global_main_color_a"] = "255",
			["streamradio_gui_color_global_main_color_b"] = "0",
			["streamradio_gui_color_global_main_color_g"] = "0",
			["streamradio_gui_color_global_main_color_r"] = "0",
			["streamradio_gui_color_global_spectrum_color_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_b"] = "59",
			["streamradio_gui_color_global_spectrum_color_foreground_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_foreground_b"] = "194",
			["streamradio_gui_color_global_spectrum_color_foreground_g"] = "194",
			["streamradio_gui_color_global_spectrum_color_foreground_r"] = "195",
			["streamradio_gui_color_global_spectrum_color_g"] = "59",
			["streamradio_gui_color_global_spectrum_color_icon_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_b"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_g"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_r"] = "255",
			["streamradio_gui_color_global_spectrum_color_r"] = "59",
			["streamradio_gui_color_global_spectrum_color_shadow_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_shadow_b"] = "40",
			["streamradio_gui_color_global_spectrum_color_shadow_g"] = "40",
			["streamradio_gui_color_global_spectrum_color_shadow_r"] = "40",
		},
		["Jamaica"] = {
			["streamradio_gui_color_global_border_color_border_a"] = "255",
			["streamradio_gui_color_global_border_color_border_b"] = "0",
			["streamradio_gui_color_global_border_color_border_g"] = "0",
			["streamradio_gui_color_global_border_color_border_r"] = "0",
			["streamradio_gui_color_global_button_color_a"] = "255",
			["streamradio_gui_color_global_button_color_b"] = "0",
			["streamradio_gui_color_global_button_color_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_disabled_b"] = "0",
			["streamradio_gui_color_global_button_color_disabled_g"] = "0",
			["streamradio_gui_color_global_button_color_disabled_r"] = "43",
			["streamradio_gui_color_global_button_color_foreground_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_b"] = "0",
			["streamradio_gui_color_global_button_color_foreground_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_b"] = "161",
			["streamradio_gui_color_global_button_color_foreground_disabled_g"] = "161",
			["streamradio_gui_color_global_button_color_foreground_disabled_r"] = "161",
			["streamradio_gui_color_global_button_color_foreground_g"] = "0",
			["streamradio_gui_color_global_button_color_foreground_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_b"] = "0",
			["streamradio_gui_color_global_button_color_foreground_hover_g"] = "0",
			["streamradio_gui_color_global_button_color_foreground_hover_r"] = "0",
			["streamradio_gui_color_global_button_color_foreground_r"] = "0",
			["streamradio_gui_color_global_button_color_g"] = "86",
			["streamradio_gui_color_global_button_color_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_hover_b"] = "91",
			["streamradio_gui_color_global_button_color_hover_g"] = "91",
			["streamradio_gui_color_global_button_color_hover_r"] = "91",
			["streamradio_gui_color_global_button_color_icon_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_r"] = "255",
			["streamradio_gui_color_global_button_color_r"] = "0",
			["streamradio_gui_color_global_button_color_shadow_a"] = "255",
			["streamradio_gui_color_global_button_color_shadow_b"] = "0",
			["streamradio_gui_color_global_button_color_shadow_g"] = "0",
			["streamradio_gui_color_global_button_color_shadow_r"] = "0",
			["streamradio_gui_color_global_cursor_color_cursor_a"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_b"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_g"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_r"] = "255",
			["streamradio_gui_color_global_error_color_a"] = "255",
			["streamradio_gui_color_global_error_color_b"] = "64",
			["streamradio_gui_color_global_error_color_foreground_a"] = "255",
			["streamradio_gui_color_global_error_color_foreground_b"] = "200",
			["streamradio_gui_color_global_error_color_foreground_g"] = "200",
			["streamradio_gui_color_global_error_color_foreground_r"] = "200",
			["streamradio_gui_color_global_error_color_g"] = "64",
			["streamradio_gui_color_global_error_color_r"] = "64",
			["streamradio_gui_color_global_error_color_shadow_a"] = "255",
			["streamradio_gui_color_global_error_color_shadow_b"] = "0",
			["streamradio_gui_color_global_error_color_shadow_g"] = "0",
			["streamradio_gui_color_global_error_color_shadow_r"] = "0",
			["streamradio_gui_color_global_header_color_a"] = "255",
			["streamradio_gui_color_global_header_color_b"] = "0",
			["streamradio_gui_color_global_header_color_foreground_a"] = "255",
			["streamradio_gui_color_global_header_color_foreground_b"] = "0",
			["streamradio_gui_color_global_header_color_foreground_g"] = "0",
			["streamradio_gui_color_global_header_color_foreground_r"] = "0",
			["streamradio_gui_color_global_header_color_g"] = "86",
			["streamradio_gui_color_global_header_color_r"] = "86",
			["streamradio_gui_color_global_header_color_shadow_a"] = "255",
			["streamradio_gui_color_global_header_color_shadow_b"] = "0",
			["streamradio_gui_color_global_header_color_shadow_g"] = "0",
			["streamradio_gui_color_global_header_color_shadow_r"] = "0",
			["streamradio_gui_color_global_main_color_a"] = "255",
			["streamradio_gui_color_global_main_color_b"] = "40",
			["streamradio_gui_color_global_main_color_g"] = "40",
			["streamradio_gui_color_global_main_color_r"] = "40",
			["streamradio_gui_color_global_spectrum_color_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_b"] = "0",
			["streamradio_gui_color_global_spectrum_color_foreground_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_foreground_b"] = "0",
			["streamradio_gui_color_global_spectrum_color_foreground_g"] = "195",
			["streamradio_gui_color_global_spectrum_color_foreground_r"] = "195",
			["streamradio_gui_color_global_spectrum_color_g"] = "0",
			["streamradio_gui_color_global_spectrum_color_icon_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_b"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_g"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_r"] = "255",
			["streamradio_gui_color_global_spectrum_color_r"] = "77",
			["streamradio_gui_color_global_spectrum_color_shadow_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_shadow_b"] = "0",
			["streamradio_gui_color_global_spectrum_color_shadow_g"] = "0",
			["streamradio_gui_color_global_spectrum_color_shadow_r"] = "0",
		},
		["Lava"] = {
			["streamradio_gui_color_global_border_color_border_a"] = "255",
			["streamradio_gui_color_global_border_color_border_b"] = "0",
			["streamradio_gui_color_global_border_color_border_g"] = "0",
			["streamradio_gui_color_global_border_color_border_r"] = "104",
			["streamradio_gui_color_global_button_color_a"] = "255",
			["streamradio_gui_color_global_button_color_b"] = "84",
			["streamradio_gui_color_global_button_color_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_disabled_b"] = "64",
			["streamradio_gui_color_global_button_color_disabled_g"] = "64",
			["streamradio_gui_color_global_button_color_disabled_r"] = "64",
			["streamradio_gui_color_global_button_color_foreground_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_b"] = "130",
			["streamradio_gui_color_global_button_color_foreground_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_b"] = "200",
			["streamradio_gui_color_global_button_color_foreground_disabled_g"] = "200",
			["streamradio_gui_color_global_button_color_foreground_disabled_r"] = "200",
			["streamradio_gui_color_global_button_color_foreground_g"] = "130",
			["streamradio_gui_color_global_button_color_foreground_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_b"] = "0",
			["streamradio_gui_color_global_button_color_foreground_hover_g"] = "0",
			["streamradio_gui_color_global_button_color_foreground_hover_r"] = "255",
			["streamradio_gui_color_global_button_color_foreground_r"] = "255",
			["streamradio_gui_color_global_button_color_g"] = "84",
			["streamradio_gui_color_global_button_color_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_hover_b"] = "0",
			["streamradio_gui_color_global_button_color_hover_g"] = "0",
			["streamradio_gui_color_global_button_color_hover_r"] = "38",
			["streamradio_gui_color_global_button_color_icon_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_r"] = "255",
			["streamradio_gui_color_global_button_color_r"] = "84",
			["streamradio_gui_color_global_button_color_shadow_a"] = "255",
			["streamradio_gui_color_global_button_color_shadow_b"] = "27",
			["streamradio_gui_color_global_button_color_shadow_g"] = "27",
			["streamradio_gui_color_global_button_color_shadow_r"] = "27",
			["streamradio_gui_color_global_cursor_color_cursor_a"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_b"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_g"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_r"] = "255",
			["streamradio_gui_color_global_error_color_a"] = "255",
			["streamradio_gui_color_global_error_color_b"] = "16",
			["streamradio_gui_color_global_error_color_foreground_a"] = "255",
			["streamradio_gui_color_global_error_color_foreground_b"] = "64",
			["streamradio_gui_color_global_error_color_foreground_g"] = "64",
			["streamradio_gui_color_global_error_color_foreground_r"] = "255",
			["streamradio_gui_color_global_error_color_g"] = "16",
			["streamradio_gui_color_global_error_color_r"] = "16",
			["streamradio_gui_color_global_error_color_shadow_a"] = "255",
			["streamradio_gui_color_global_error_color_shadow_b"] = "27",
			["streamradio_gui_color_global_error_color_shadow_g"] = "27",
			["streamradio_gui_color_global_error_color_shadow_r"] = "27",
			["streamradio_gui_color_global_header_color_a"] = "255",
			["streamradio_gui_color_global_header_color_b"] = "36",
			["streamradio_gui_color_global_header_color_foreground_a"] = "255",
			["streamradio_gui_color_global_header_color_foreground_b"] = "0",
			["streamradio_gui_color_global_header_color_foreground_g"] = "0",
			["streamradio_gui_color_global_header_color_foreground_r"] = "255",
			["streamradio_gui_color_global_header_color_g"] = "36",
			["streamradio_gui_color_global_header_color_r"] = "36",
			["streamradio_gui_color_global_header_color_shadow_a"] = "255",
			["streamradio_gui_color_global_header_color_shadow_b"] = "27",
			["streamradio_gui_color_global_header_color_shadow_g"] = "27",
			["streamradio_gui_color_global_header_color_shadow_r"] = "27",
			["streamradio_gui_color_global_main_color_a"] = "255",
			["streamradio_gui_color_global_main_color_b"] = "45",
			["streamradio_gui_color_global_main_color_g"] = "45",
			["streamradio_gui_color_global_main_color_r"] = "45",
			["streamradio_gui_color_global_spectrum_color_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_b"] = "0",
			["streamradio_gui_color_global_spectrum_color_foreground_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_foreground_b"] = "0",
			["streamradio_gui_color_global_spectrum_color_foreground_g"] = "0",
			["streamradio_gui_color_global_spectrum_color_foreground_r"] = "255",
			["streamradio_gui_color_global_spectrum_color_g"] = "14",
			["streamradio_gui_color_global_spectrum_color_icon_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_b"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_g"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_r"] = "255",
			["streamradio_gui_color_global_spectrum_color_r"] = "54",
			["streamradio_gui_color_global_spectrum_color_shadow_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_shadow_b"] = "27",
			["streamradio_gui_color_global_spectrum_color_shadow_g"] = "27",
			["streamradio_gui_color_global_spectrum_color_shadow_r"] = "27",
		},
		["Nature"] = {
			["streamradio_gui_color_global_border_color_border_a"] = "255",
			["streamradio_gui_color_global_border_color_border_b"] = "23",
			["streamradio_gui_color_global_border_color_border_g"] = "128",
			["streamradio_gui_color_global_border_color_border_r"] = "0",
			["streamradio_gui_color_global_button_color_a"] = "255",
			["streamradio_gui_color_global_button_color_b"] = "0",
			["streamradio_gui_color_global_button_color_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_disabled_b"] = "3",
			["streamradio_gui_color_global_button_color_disabled_g"] = "36",
			["streamradio_gui_color_global_button_color_disabled_r"] = "0",
			["streamradio_gui_color_global_button_color_foreground_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_b"] = "0",
			["streamradio_gui_color_global_button_color_foreground_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_b"] = "175",
			["streamradio_gui_color_global_button_color_foreground_disabled_g"] = "175",
			["streamradio_gui_color_global_button_color_foreground_disabled_r"] = "175",
			["streamradio_gui_color_global_button_color_foreground_g"] = "0",
			["streamradio_gui_color_global_button_color_foreground_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_b"] = "0",
			["streamradio_gui_color_global_button_color_foreground_hover_g"] = "0",
			["streamradio_gui_color_global_button_color_foreground_hover_r"] = "0",
			["streamradio_gui_color_global_button_color_foreground_r"] = "0",
			["streamradio_gui_color_global_button_color_g"] = "132",
			["streamradio_gui_color_global_button_color_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_hover_b"] = "112",
			["streamradio_gui_color_global_button_color_hover_g"] = "175",
			["streamradio_gui_color_global_button_color_hover_r"] = "116",
			["streamradio_gui_color_global_button_color_icon_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_r"] = "255",
			["streamradio_gui_color_global_button_color_r"] = "0",
			["streamradio_gui_color_global_button_color_shadow_a"] = "255",
			["streamradio_gui_color_global_button_color_shadow_b"] = "40",
			["streamradio_gui_color_global_button_color_shadow_g"] = "40",
			["streamradio_gui_color_global_button_color_shadow_r"] = "40",
			["streamradio_gui_color_global_cursor_color_cursor_a"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_b"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_g"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_r"] = "255",
			["streamradio_gui_color_global_error_color_a"] = "255",
			["streamradio_gui_color_global_error_color_b"] = "64",
			["streamradio_gui_color_global_error_color_foreground_a"] = "255",
			["streamradio_gui_color_global_error_color_foreground_b"] = "175",
			["streamradio_gui_color_global_error_color_foreground_g"] = "175",
			["streamradio_gui_color_global_error_color_foreground_r"] = "175",
			["streamradio_gui_color_global_error_color_g"] = "64",
			["streamradio_gui_color_global_error_color_r"] = "64",
			["streamradio_gui_color_global_error_color_shadow_a"] = "255",
			["streamradio_gui_color_global_error_color_shadow_b"] = "40",
			["streamradio_gui_color_global_error_color_shadow_g"] = "40",
			["streamradio_gui_color_global_error_color_shadow_r"] = "40",
			["streamradio_gui_color_global_header_color_a"] = "255",
			["streamradio_gui_color_global_header_color_b"] = "0",
			["streamradio_gui_color_global_header_color_foreground_a"] = "255",
			["streamradio_gui_color_global_header_color_foreground_b"] = "177",
			["streamradio_gui_color_global_header_color_foreground_g"] = "177",
			["streamradio_gui_color_global_header_color_foreground_r"] = "177",
			["streamradio_gui_color_global_header_color_g"] = "80",
			["streamradio_gui_color_global_header_color_r"] = "91",
			["streamradio_gui_color_global_header_color_shadow_a"] = "255",
			["streamradio_gui_color_global_header_color_shadow_b"] = "40",
			["streamradio_gui_color_global_header_color_shadow_g"] = "40",
			["streamradio_gui_color_global_header_color_shadow_r"] = "40",
			["streamradio_gui_color_global_main_color_a"] = "255",
			["streamradio_gui_color_global_main_color_b"] = "34",
			["streamradio_gui_color_global_main_color_g"] = "56",
			["streamradio_gui_color_global_main_color_r"] = "0",
			["streamradio_gui_color_global_spectrum_color_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_b"] = "0",
			["streamradio_gui_color_global_spectrum_color_foreground_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_foreground_b"] = "0",
			["streamradio_gui_color_global_spectrum_color_foreground_g"] = "128",
			["streamradio_gui_color_global_spectrum_color_foreground_r"] = "51",
			["streamradio_gui_color_global_spectrum_color_g"] = "0",
			["streamradio_gui_color_global_spectrum_color_icon_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_b"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_g"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_r"] = "255",
			["streamradio_gui_color_global_spectrum_color_r"] = "0",
			["streamradio_gui_color_global_spectrum_color_shadow_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_shadow_b"] = "40",
			["streamradio_gui_color_global_spectrum_color_shadow_g"] = "40",
			["streamradio_gui_color_global_spectrum_color_shadow_r"] = "40",
		},
		["Pink"] = {
			["streamradio_gui_color_global_border_color_border_a"] = "255",
			["streamradio_gui_color_global_border_color_border_b"] = "0",
			["streamradio_gui_color_global_border_color_border_g"] = "0",
			["streamradio_gui_color_global_border_color_border_r"] = "0",
			["streamradio_gui_color_global_button_color_a"] = "255",
			["streamradio_gui_color_global_button_color_b"] = "186",
			["streamradio_gui_color_global_button_color_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_disabled_b"] = "61",
			["streamradio_gui_color_global_button_color_disabled_g"] = "61",
			["streamradio_gui_color_global_button_color_disabled_r"] = "61",
			["streamradio_gui_color_global_button_color_foreground_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_b"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_b"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_g"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_r"] = "255",
			["streamradio_gui_color_global_button_color_foreground_g"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_b"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_g"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_r"] = "255",
			["streamradio_gui_color_global_button_color_foreground_r"] = "255",
			["streamradio_gui_color_global_button_color_g"] = "0",
			["streamradio_gui_color_global_button_color_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_hover_b"] = "0",
			["streamradio_gui_color_global_button_color_hover_g"] = "0",
			["streamradio_gui_color_global_button_color_hover_r"] = "168",
			["streamradio_gui_color_global_button_color_icon_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_r"] = "255",
			["streamradio_gui_color_global_button_color_r"] = "174",
			["streamradio_gui_color_global_button_color_shadow_a"] = "255",
			["streamradio_gui_color_global_button_color_shadow_b"] = "91",
			["streamradio_gui_color_global_button_color_shadow_g"] = "91",
			["streamradio_gui_color_global_button_color_shadow_r"] = "91",
			["streamradio_gui_color_global_cursor_color_cursor_a"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_b"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_g"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_r"] = "255",
			["streamradio_gui_color_global_error_color_a"] = "255",
			["streamradio_gui_color_global_error_color_b"] = "29",
			["streamradio_gui_color_global_error_color_foreground_a"] = "255",
			["streamradio_gui_color_global_error_color_foreground_b"] = "255",
			["streamradio_gui_color_global_error_color_foreground_g"] = "255",
			["streamradio_gui_color_global_error_color_foreground_r"] = "255",
			["streamradio_gui_color_global_error_color_g"] = "29",
			["streamradio_gui_color_global_error_color_r"] = "93",
			["streamradio_gui_color_global_error_color_shadow_a"] = "255",
			["streamradio_gui_color_global_error_color_shadow_b"] = "91",
			["streamradio_gui_color_global_error_color_shadow_g"] = "91",
			["streamradio_gui_color_global_error_color_shadow_r"] = "91",
			["streamradio_gui_color_global_header_color_a"] = "255",
			["streamradio_gui_color_global_header_color_b"] = "71",
			["streamradio_gui_color_global_header_color_foreground_a"] = "255",
			["streamradio_gui_color_global_header_color_foreground_b"] = "255",
			["streamradio_gui_color_global_header_color_foreground_g"] = "255",
			["streamradio_gui_color_global_header_color_foreground_r"] = "255",
			["streamradio_gui_color_global_header_color_g"] = "0",
			["streamradio_gui_color_global_header_color_r"] = "102",
			["streamradio_gui_color_global_header_color_shadow_a"] = "255",
			["streamradio_gui_color_global_header_color_shadow_b"] = "91",
			["streamradio_gui_color_global_header_color_shadow_g"] = "91",
			["streamradio_gui_color_global_header_color_shadow_r"] = "91",
			["streamradio_gui_color_global_main_color_a"] = "255",
			["streamradio_gui_color_global_main_color_b"] = "125",
			["streamradio_gui_color_global_main_color_g"] = "0",
			["streamradio_gui_color_global_main_color_r"] = "102",
			["streamradio_gui_color_global_spectrum_color_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_b"] = "141",
			["streamradio_gui_color_global_spectrum_color_foreground_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_foreground_b"] = "152",
			["streamradio_gui_color_global_spectrum_color_foreground_g"] = "0",
			["streamradio_gui_color_global_spectrum_color_foreground_r"] = "127",
			["streamradio_gui_color_global_spectrum_color_g"] = "141",
			["streamradio_gui_color_global_spectrum_color_icon_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_b"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_g"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_r"] = "255",
			["streamradio_gui_color_global_spectrum_color_r"] = "141",
			["streamradio_gui_color_global_spectrum_color_shadow_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_shadow_b"] = "91",
			["streamradio_gui_color_global_spectrum_color_shadow_g"] = "91",
			["streamradio_gui_color_global_spectrum_color_shadow_r"] = "91",
		},
		["Steam Original"] = {
			["streamradio_gui_color_global_border_color_border_a"] = "255",
			["streamradio_gui_color_global_border_color_border_b"] = "68",
			["streamradio_gui_color_global_border_color_border_g"] = "88",
			["streamradio_gui_color_global_border_color_border_r"] = "76",
			["streamradio_gui_color_global_button_color_a"] = "255",
			["streamradio_gui_color_global_button_color_b"] = "68",
			["streamradio_gui_color_global_button_color_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_disabled_b"] = "61",
			["streamradio_gui_color_global_button_color_disabled_g"] = "61",
			["streamradio_gui_color_global_button_color_disabled_r"] = "61",
			["streamradio_gui_color_global_button_color_foreground_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_b"] = "149",
			["streamradio_gui_color_global_button_color_foreground_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_b"] = "120",
			["streamradio_gui_color_global_button_color_foreground_disabled_g"] = "120",
			["streamradio_gui_color_global_button_color_foreground_disabled_r"] = "120",
			["streamradio_gui_color_global_button_color_foreground_g"] = "170",
			["streamradio_gui_color_global_button_color_foreground_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_b"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_g"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_r"] = "255",
			["streamradio_gui_color_global_button_color_foreground_r"] = "160",
			["streamradio_gui_color_global_button_color_g"] = "88",
			["streamradio_gui_color_global_button_color_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_hover_b"] = "103",
			["streamradio_gui_color_global_button_color_hover_g"] = "123",
			["streamradio_gui_color_global_button_color_hover_r"] = "113",
			["streamradio_gui_color_global_button_color_icon_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_r"] = "255",
			["streamradio_gui_color_global_button_color_r"] = "76",
			["streamradio_gui_color_global_button_color_shadow_a"] = "255",
			["streamradio_gui_color_global_button_color_shadow_b"] = "34",
			["streamradio_gui_color_global_button_color_shadow_g"] = "46",
			["streamradio_gui_color_global_button_color_shadow_r"] = "40",
			["streamradio_gui_color_global_cursor_color_cursor_a"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_b"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_g"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_r"] = "255",
			["streamradio_gui_color_global_error_color_a"] = "255",
			["streamradio_gui_color_global_error_color_b"] = "46",
			["streamradio_gui_color_global_error_color_foreground_a"] = "255",
			["streamradio_gui_color_global_error_color_foreground_b"] = "80",
			["streamradio_gui_color_global_error_color_foreground_g"] = "181",
			["streamradio_gui_color_global_error_color_foreground_r"] = "196",
			["streamradio_gui_color_global_error_color_g"] = "56",
			["streamradio_gui_color_global_error_color_r"] = "99",
			["streamradio_gui_color_global_error_color_shadow_a"] = "255",
			["streamradio_gui_color_global_error_color_shadow_b"] = "34",
			["streamradio_gui_color_global_error_color_shadow_g"] = "46",
			["streamradio_gui_color_global_error_color_shadow_r"] = "40",
			["streamradio_gui_color_global_header_color_a"] = "255",
			["streamradio_gui_color_global_header_color_b"] = "68",
			["streamradio_gui_color_global_header_color_foreground_a"] = "255",
			["streamradio_gui_color_global_header_color_foreground_b"] = "80",
			["streamradio_gui_color_global_header_color_foreground_g"] = "181",
			["streamradio_gui_color_global_header_color_foreground_r"] = "196",
			["streamradio_gui_color_global_header_color_g"] = "88",
			["streamradio_gui_color_global_header_color_r"] = "76",
			["streamradio_gui_color_global_header_color_shadow_a"] = "255",
			["streamradio_gui_color_global_header_color_shadow_b"] = "34",
			["streamradio_gui_color_global_header_color_shadow_g"] = "46",
			["streamradio_gui_color_global_header_color_shadow_r"] = "40",
			["streamradio_gui_color_global_main_color_a"] = "255",
			["streamradio_gui_color_global_main_color_b"] = "46",
			["streamradio_gui_color_global_main_color_g"] = "58",
			["streamradio_gui_color_global_main_color_r"] = "52",
			["streamradio_gui_color_global_spectrum_color_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_b"] = "68",
			["streamradio_gui_color_global_spectrum_color_foreground_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_foreground_b"] = "80",
			["streamradio_gui_color_global_spectrum_color_foreground_g"] = "181",
			["streamradio_gui_color_global_spectrum_color_foreground_r"] = "196",
			["streamradio_gui_color_global_spectrum_color_g"] = "88",
			["streamradio_gui_color_global_spectrum_color_icon_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_b"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_g"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_r"] = "255",
			["streamradio_gui_color_global_spectrum_color_r"] = "76",
			["streamradio_gui_color_global_spectrum_color_shadow_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_shadow_b"] = "34",
			["streamradio_gui_color_global_spectrum_color_shadow_g"] = "46",
			["streamradio_gui_color_global_spectrum_color_shadow_r"] = "40",
		},
		["Warm"] = {
			["streamradio_gui_color_global_border_color_border_a"] = "255",
			["streamradio_gui_color_global_border_color_border_b"] = "0",
			["streamradio_gui_color_global_border_color_border_g"] = "0",
			["streamradio_gui_color_global_border_color_border_r"] = "0",
			["streamradio_gui_color_global_button_color_a"] = "255",
			["streamradio_gui_color_global_button_color_b"] = "0",
			["streamradio_gui_color_global_button_color_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_disabled_b"] = "132",
			["streamradio_gui_color_global_button_color_disabled_g"] = "132",
			["streamradio_gui_color_global_button_color_disabled_r"] = "132",
			["streamradio_gui_color_global_button_color_foreground_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_b"] = "190",
			["streamradio_gui_color_global_button_color_foreground_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_disabled_b"] = "0",
			["streamradio_gui_color_global_button_color_foreground_disabled_g"] = "0",
			["streamradio_gui_color_global_button_color_foreground_disabled_r"] = "0",
			["streamradio_gui_color_global_button_color_foreground_g"] = "190",
			["streamradio_gui_color_global_button_color_foreground_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_foreground_hover_b"] = "190",
			["streamradio_gui_color_global_button_color_foreground_hover_g"] = "190",
			["streamradio_gui_color_global_button_color_foreground_hover_r"] = "190",
			["streamradio_gui_color_global_button_color_foreground_r"] = "190",
			["streamradio_gui_color_global_button_color_g"] = "35",
			["streamradio_gui_color_global_button_color_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_hover_b"] = "0",
			["streamradio_gui_color_global_button_color_hover_g"] = "0",
			["streamradio_gui_color_global_button_color_hover_r"] = "79",
			["streamradio_gui_color_global_button_color_icon_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_disabled_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_a"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_b"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_g"] = "255",
			["streamradio_gui_color_global_button_color_icon_hover_r"] = "255",
			["streamradio_gui_color_global_button_color_icon_r"] = "255",
			["streamradio_gui_color_global_button_color_r"] = "97",
			["streamradio_gui_color_global_button_color_shadow_a"] = "255",
			["streamradio_gui_color_global_button_color_shadow_b"] = "63",
			["streamradio_gui_color_global_button_color_shadow_g"] = "63",
			["streamradio_gui_color_global_button_color_shadow_r"] = "113",
			["streamradio_gui_color_global_cursor_color_cursor_a"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_b"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_g"] = "255",
			["streamradio_gui_color_global_cursor_color_cursor_r"] = "255",
			["streamradio_gui_color_global_error_color_a"] = "255",
			["streamradio_gui_color_global_error_color_b"] = "52",
			["streamradio_gui_color_global_error_color_foreground_a"] = "255",
			["streamradio_gui_color_global_error_color_foreground_b"] = "190",
			["streamradio_gui_color_global_error_color_foreground_g"] = "190",
			["streamradio_gui_color_global_error_color_foreground_r"] = "190",
			["streamradio_gui_color_global_error_color_g"] = "52",
			["streamradio_gui_color_global_error_color_r"] = "75",
			["streamradio_gui_color_global_error_color_shadow_a"] = "255",
			["streamradio_gui_color_global_error_color_shadow_b"] = "63",
			["streamradio_gui_color_global_error_color_shadow_g"] = "63",
			["streamradio_gui_color_global_error_color_shadow_r"] = "113",
			["streamradio_gui_color_global_header_color_a"] = "255",
			["streamradio_gui_color_global_header_color_b"] = "54",
			["streamradio_gui_color_global_header_color_foreground_a"] = "255",
			["streamradio_gui_color_global_header_color_foreground_b"] = "190",
			["streamradio_gui_color_global_header_color_foreground_g"] = "190",
			["streamradio_gui_color_global_header_color_foreground_r"] = "190",
			["streamradio_gui_color_global_header_color_g"] = "54",
			["streamradio_gui_color_global_header_color_r"] = "93",
			["streamradio_gui_color_global_header_color_shadow_a"] = "255",
			["streamradio_gui_color_global_header_color_shadow_b"] = "63",
			["streamradio_gui_color_global_header_color_shadow_g"] = "63",
			["streamradio_gui_color_global_header_color_shadow_r"] = "113",
			["streamradio_gui_color_global_main_color_a"] = "255",
			["streamradio_gui_color_global_main_color_b"] = "0",
			["streamradio_gui_color_global_main_color_g"] = "47",
			["streamradio_gui_color_global_main_color_r"] = "61",
			["streamradio_gui_color_global_spectrum_color_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_b"] = "0",
			["streamradio_gui_color_global_spectrum_color_foreground_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_foreground_b"] = "129",
			["streamradio_gui_color_global_spectrum_color_foreground_g"] = "129",
			["streamradio_gui_color_global_spectrum_color_foreground_r"] = "139",
			["streamradio_gui_color_global_spectrum_color_g"] = "46",
			["streamradio_gui_color_global_spectrum_color_icon_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_b"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_g"] = "255",
			["streamradio_gui_color_global_spectrum_color_icon_r"] = "255",
			["streamradio_gui_color_global_spectrum_color_r"] = "100",
			["streamradio_gui_color_global_spectrum_color_shadow_a"] = "255",
			["streamradio_gui_color_global_spectrum_color_shadow_b"] = "63",
			["streamradio_gui_color_global_spectrum_color_shadow_g"] = "63",
			["streamradio_gui_color_global_spectrum_color_shadow_r"] = "113",
		},
	},
}

function StreamRadioLib.GetPresets( Toolname, Setting )
	if not Toolname then return end
	if not Setting then return end
	if Toolname == "" then return end
	if Setting == "" then return end
	if not g_settings[Toolname] then return end

	return table.Copy(g_settings[Toolname][Setting])
end

function StreamRadioLib.GetPresetsTable( Toolname )
	if not Toolname then return end
	if Toolname == "" then return end

	return table.Copy(g_settings[Toolname])
end

do
	-- Preset to lua converter
	local function createpresets( ply, cmd, args )
		if not LIBUtil.IsAdminForCMD(ply) then
			return
		end

		local files = file.Find( "settings/presets/streamradio_gui_color_global/*.txt", "GAME" )

		local data = {}

		local settings = StreamRadioLib.GetPresetsTable(g_radioColorToolName)

		for _, f in ipairs( files or {} ) do
			local presetsString = file.Read( "settings/presets/streamradio_gui_color_global/" .. f, "GAME" ) or ""
			if presetsString == "" then
				continue
			end

			local presetsData = util.KeyValuesToTable(presetsString) or {}
			if table.IsEmpty(presetsData) then
				continue
			end

			local name = string.sub( f, 1, -5 )
			settings[name] = presetsData
		end

		table.insert(data, "{")
		table.insert(data, "\n")

		for name, items in SortedPairs(settings) do
			table.insert(data, "\t")
			table.insert(data, "[\"")
			table.insert(data, name)
			table.insert(data, "\"] = {")
			table.insert(data, "\n")

			for k, v in SortedPairs(items) do
				local len = #k
				local is_t = string.sub(k, len - 1) == "_t"

				if is_t then
					if name == "default" then
						v = 1
					else
						continue
					end
				end

				table.insert(data, "\t\t")
				table.insert(data, "[\"")
				table.insert(data, tostring(k or ""))
				table.insert(data, "\"] = \"")
				table.insert(data, tostring(v or ""))
				table.insert(data, "\",")
				table.insert(data, "\n")
			end

			table.insert(data, "\t")
			table.insert(data, "},")
			table.insert(data, "\n")
		end

		table.insert(data, "}")
		table.insert(data, "\n")

		data = table.concat(data, "")

		local filePath = g_mainPath .. "/streamradio_gui_color_global.txt"

		LIBUtil.CreateDirectoryForFile(filePath)

		file.Delete(filePath)
		file.Write(filePath, data)

		if file.Exists(filePath, "DATA") then
			LIBPrint.Msg(ply, "Lua formated presets for 'streamradio_gui_color_global' saved to '%s'", filePath)
		else
			LIBPrint.Msg(ply, "Could not write to '%s'", filePath)
		end
	end

	concommand.Add( "debug_streamradio_convertpresets", createpresets, nil, nil, FCVAR_CHEAT )
end

return true


--lua/streamradio_core/client/settings/vr.lua:
return gluapack()()
--lua/autorun/svmod_loader.lua:
return gluapack()()
--lua/svmod/compatibility/sh_compatiblity.lua:
-- VC_VehCanEnter has compatibility issues that impact seats switch from inside a vehicle.
function SVMOD:Compatiblity_VCMod_Seat_Fix()
	hook.Remove("CanPlayerEnterVehicle", "VC_VehCanEnter")
end

-- Players scrubbing vehicles could get killed without this fix.
hook.Add("EntityTakeDamage", "SV_CollisionFix", function(target, dmg)
	if target:IsPlayer() and dmg:GetAttacker() == game.GetWorld() and dmg:GetDamageType() == 1 then
		dmg:SetDamage(0)
	end
end)
--lua/svmod/config/sh_config.lua:
SVMOD.FCFG = {}

-- FCFG for File Configuration
-- The configurations in this table are not saved to a file.

SVMOD.FCFG.Version = "1.5.2"
SVMOD.FCFG.FileVersion = "1.5.2"
SVMOD.FCFG.DataVersion = 2
SVMOD.FCFG.LastVersion = "?" -- Do not change

SVMOD.FCFG.ShortcutTime = 0.3

SVMOD.FCFG.BlacklistedModels = {
	["models/nova/airboat_seat.mdl"] = true,
	["models/nova/chair_office02.mdl"] = true,
	["models/props_phx/carseat2.mdl"] = true,
	["models/props_phx/carseat3.mdl"] = true,
	["models/props_phx/carseat2.mdl"] = true,
	["models/nova/chair_plastic01.mdl"] = true,
	["models/nova/jeep_seat.mdl"] = true,
	["models/nova/chair_wood01.mdl"] = true,
	["models/nova/chair_office01.mdl"] = true,
	["models/vehicles/prisoner_pod_inner.mdl"] = true,
	["models/nova/jalopy_seat.mdl"] = true
}

SVMOD.FCFG.ConflictList = {
	{
		Name = "VCMod Main",
		Variable = "vcmod_main"
	},
	{
		Name = "Novacars",
		Variable = "NOVA_Config"
	}
}

function SVMOD:Load()
	local config
	if SERVER then
		config = file.Read("svmod/server_" .. string.Replace(SVMOD.FCFG.FileVersion, ".", "_") .. ".txt")
	else
		config = file.Read("svmod/client_" .. string.Replace(SVMOD.FCFG.FileVersion, ".", "_") .. ".txt")
	end

	if config then
		config = util.JSONToTable(config)

		if config then
			self.CFG = config

			if SERVER then
				self.CFG.Others.HUDColor = Color(self.CFG.Others.HUDColor.r, self.CFG.Others.HUDColor.g, self.CFG.Others.HUDColor.b)
			elseif self.CFG.Shortcuts then
				-- CLIENT
				for i, s in ipairs(self.CFG.Shortcuts) do
					if self.Shortcuts[i] then
						self.Shortcuts[i].Key = s
					else
						SVMOD:PrintConsole(SVMOD.LOG.Alert, "Shortcut " .. i .. " from the configuration file is not registered!")
					end
				end
			end
		end
	else
		if SERVER then
			if file.Exists("svmod/server_1_5_0.txt", "DATA") then
				self.CFG = util.JSONToTable(file.Read("svmod/server_1_5_0.txt"))
				self.CFG.Seats.AllowWeaponsInVehicle = self.CFG.Others.IsWeaponsEnabled
				self.CFG.Others.IsWeaponsEnabled = nil
				self.CFG.Others.TimeDeploySpikeStrips = 5
				SVMOD:Save()
				SVMOD:PrintConsole(SVMOD.LOG.Info, "Configuration file server-side converted from 1.5.0 to 1.5.2.")
				return
			elseif file.Exists("svmod/server_1_4_0.txt", "DATA") then
				self.CFG = util.JSONToTable(file.Read("svmod/server_1_4_0.txt"))
				self.CFG.Seats.AllowWeaponsInVehicle = false
				self.CFG.Others.IsWeaponsEnabled = nil
				self.CFG.Others.TimeDeploySpikeStrips = 5
				SVMOD:Save()
				SVMOD:PrintConsole(SVMOD.LOG.Info, "Configuration file server-side converted from 1.4 to 1.5.2.")
				return
			elseif file.Exists("svmod/server_1_3_2.txt", "DATA") then
				self.CFG = util.JSONToTable(file.Read("svmod/server_1_3_2.txt"))
				self.CFG.Damage.WheelShotMultiplier = 1
				self.CFG.Damage.WheelCollisionMultiplier = 1
				self.CFG.Damage.TimeBeforeWheelIsPunctured = 60
				self.CFG.Others = {
					IsHUDEnabled = true,
					HUDPositionX = 0.21,
					HUDPositionY = 0.92,
					HUDSize = 90,
					HUDColor = Color(178, 95, 245),
					CustomSuspension = 0,
					IsWeaponsEnabled = false
				}
				self.CFG.Seats.AllowWeaponsInVehicle = false
				self.CFG.Others.TimeDeploySpikeStrips = 5
				SVMOD:Save()
				SVMOD:PrintConsole(SVMOD.LOG.Info, "Configuration file server-side converted from 1.3 to 1.5.2.")
				return
			end
		elseif CLIENT then
			if file.Exists("svmod/client_1_5_0.txt", "DATA") then
				self.CFG = util.JSONToTable(file.Read("svmod/client_1_5_0.txt"))
				SVMOD:Save()
				SVMOD:PrintConsole(SVMOD.LOG.Info, "Configuration file client-side converted from 1.5.0 to 1.5.2.")
				return
			elseif file.Exists("svmod/client_1_4_0.txt", "DATA") then
				self.CFG = util.JSONToTable(file.Read("svmod/client_1_4_0.txt"))
				SVMOD:Save()
				SVMOD:PrintConsole(SVMOD.LOG.Info, "Configuration file client-side converted from 1.4 to 1.5.2.")
				return
			elseif file.Exists("svmod/client_1_3_2.txt", "DATA") then
				self.CFG = util.JSONToTable(file.Read("svmod/client_1_3_2.txt"))
				SVMOD:Save()
				SVMOD:PrintConsole(SVMOD.LOG.Info, "Configuration file client-side converted from 1.3 to 1.5.2.")
				return
			end
		end

		if SERVER then
			hook.Add("PlayerInitialSpawn", "SV_SendWelcomeGUI", function(ply)
				timer.Simple(10, function()
					if game.SinglePlayer() or ply:IsSuperAdmin() then
						hook.Remove("PlayerInitialSpawn", "SV_SendWelcomeGUI")
						net.Start("SV_WelcomeGUI")
						net.Send(ply)
					end
				end)
			end)
		end

		SVMOD:Save()
	end
end

function SVMOD:Save()
	local cfg = table.Copy(self.CFG)

	if SERVER then
		file.Write("svmod/server_" .. string.Replace(SVMOD.FCFG.FileVersion, ".", "_") .. ".txt", util.TableToJSON(cfg))
	else
		-- Save shortcuts
		cfg.Shortcuts = {}
		for i, s in ipairs(self.Shortcuts) do
			cfg.Shortcuts[i] = s.Key
		end

		-- Disable contributor mode
		cfg.Contributor.IsEnabled = false

		-- Do not save enterprise ID client-side
		cfg.Contributor.EnterpriseID = nil

		file.Write("svmod/client_" .. string.Replace(SVMOD.FCFG.FileVersion, ".", "_") .. ".txt", util.TableToJSON(cfg))
	end
end

--lua/svmod/fuel/cl_fuel.lua:
return gluapack()()
--lua/svmod/gui/cl_welcome.lua:
return gluapack()()
--lua/svmod/gui/editor/cl_editor.lua:
return gluapack()()
--lua/svmod/gui/editor/cl_editor.lua:
local function openEditor(veh)
	if not veh.SV_Data then
		SVMOD.Data[string.lower(veh:GetModel())] = {
			Author = {},
			Seats = {},
			Parts = {},
			Sounds = {},
			Headlights = {},
			Back = {
				BrakeLights = {},
				ReversingLights = {}
			},
			Blinkers = {
				LeftLights = {},
				RightLights = {}
			},
			FlashingLights = {},
			Fuel = {
				Capacity = 60,
				Consumption = 5,
				GasTank = {},
				GasolinePistol = {}
			}
		}

		veh.SV_IsEditMode = true

		SVMOD:LoadVehicle(veh)
	end

	local function activeTab(name)
		net.Start("SV_Editor_ActiveTab")
		net.WriteEntity(veh)
		net.WriteString(name)
		net.SendToServer()
	end

	local frame = SVMOD:CreateFrame("SVMOD : EDITOR")
	frame:SetSize(900, 930)
	frame:SetPos(10, 10)
	frame:SetAlpha(25)

	frame.EnableFocus = function(self)
		hook.Remove("ScoreboardShow", "SV_Editor_Show")
		hook.Remove("ScoreboardHide", "SV_Editor_Hide")

		self:MakePopup()
	end

	frame.DisableFocus = function(self)
		frame:Remove()
		openEditor(veh)
	end

	frame.ManualClose = function(self)
		self:Remove()

		net.Start("SV_Editor_Close")
		net.WriteEntity(veh)
		net.SendToServer()

		gui.EnableScreenClicker(false)

		hook.Remove("ScoreboardShow", "SV_Editor_Show")
		hook.Remove("ScoreboardHide", "SV_Editor_Hide")
	end

	hook.Add("ScoreboardShow", "SV_Editor_Show", function()
		frame:SetAlpha(255)
		gui.EnableScreenClicker(true)

		return true
	end)

	hook.Add("ScoreboardHide", "SV_Editor_Hide", function()
		frame:SetAlpha(25)
		gui.EnableScreenClicker(false)

		return true
	end)

	frame:CreateMenuButton(language.GetPhrase("svmod.home.home"), TOP, function()
		activeTab("None")
		SVMOD:EDITOR_General(frame:GetCenterPanel(), veh)
	end)

	frame:CreateMenuButton(language.GetPhrase("svmod.seats.seats"), TOP, function()
		activeTab("None")
		SVMOD:EDITOR_Seats(frame:GetCenterPanel(), veh)
	end)

	for i, light in ipairs(veh.SV_Data.Headlights) do
		if light.Sprite and light.ProjectedTexture then
			table.insert(veh.SV_Data.Headlights, { Sprite = SVMOD:DeepCopy(light.Sprite) })
			veh.SV_Data.Headlights[i].Sprite = nil
		end
	end

	frame:CreateMenuButton(language.GetPhrase("svmod.lights.headlights"), TOP, function()
		activeTab("Headlights")
		SVMOD:EDITOR_Lights(frame:GetCenterPanel(), veh.SV_Data.Headlights, veh)
	end)

	frame:CreateMenuButton(language.GetPhrase("svmod.editor.brake"), TOP, function()
		activeTab("Brake")
		SVMOD:EDITOR_Lights(frame:GetCenterPanel(), veh.SV_Data.Back.BrakeLights, veh)
	end)

	frame:CreateMenuButton(language.GetPhrase("svmod.editor.reversing"), TOP, function()
		activeTab("Reversing")
		timer.Simple(0.1, function()
			timer.Remove("SV_DetectReversing_" .. veh:EntIndex())
			veh.SV_IsReversing = true
		end)

		SVMOD:EDITOR_Lights(frame:GetCenterPanel(), veh.SV_Data.Back.ReversingLights, veh)
	end)

	frame:CreateMenuButton(language.GetPhrase("svmod.editor.left_blinker"), TOP, function()
		activeTab("Left Blinkers")
		SVMOD:EDITOR_Lights(frame:GetCenterPanel(), veh.SV_Data.Blinkers.LeftLights, veh)
	end)

	frame:CreateMenuButton(language.GetPhrase("svmod.editor.right_blinker"), TOP, function()
		activeTab("Right Blinkers")
		SVMOD:EDITOR_Lights(frame:GetCenterPanel(), veh.SV_Data.Blinkers.RightLights, veh)
	end)

	frame:CreateMenuButton(language.GetPhrase("svmod.els.els"), TOP, function()
		activeTab("Flashing")
		SVMOD:EDITOR_Lights(frame:GetCenterPanel(), veh.SV_Data.FlashingLights, veh, true)
	end)

	frame:CreateMenuButton(language.GetPhrase("svmod.editor.parts"), TOP, function()
		activeTab("None")
		SVMOD:EDITOR_Parts(frame:GetCenterPanel(), veh, veh.SV_Data.Parts)
	end)

	frame:CreateMenuButton(language.GetPhrase("svmod.fuel.fuel"), TOP, function()
		activeTab("None")
		SVMOD:EDITOR_Fuel(frame:GetCenterPanel(), veh, veh.SV_Data.Fuel)
	end)

	frame:CreateMenuButton(language.GetPhrase("svmod.sounds.sounds"), TOP, function()
		activeTab("None")
		SVMOD:EDITOR_Sounds(frame:GetCenterPanel(), veh.SV_Data.Sounds)
	end)

	frame.CustomClose = function()
		local closeFrame = vgui.Create("DFrame")
		closeFrame:SetSize(300, 110)
		closeFrame:Center()
		closeFrame:ShowCloseButton(false)
		closeFrame:SetTitle("")
		closeFrame.Paint = function(self, w, h)
			surface.SetDrawColor(18, 25, 31)
			surface.DrawRect(0, 0, w, h)

			surface.SetDrawColor(178, 95, 245)
			surface.DrawRect(0, 0, w, 4)
		end
		closeFrame:MakePopup()

		local button = SVMOD:CreateButton(closeFrame, language.GetPhrase("svmod.editor.close_and_lose"), function()
			closeFrame:Close()
			frame:ManualClose()
		end)
		button:Dock(TOP)
		button:SetSize(0, 30)

		local button = SVMOD:CreateButton(closeFrame, language.GetPhrase("svmod.editor.cancel_close"), function()
			closeFrame:Close()
		end)
		button:Dock(TOP)
		button:SetSize(0, 30)
	end

	SVMOD:EDITOR_General(frame:GetCenterPanel(), veh)
end

net.Receive("SV_Editor_Open", function()
	local veh = net.ReadEntity()

	openEditor(veh)
end)
--lua/svmod/gui/settings/cl_lights.lua:
function SVMOD:GUI_Lights(panel, data)
	panel:Clear()

	SVMOD:CreateTitle(panel, language.GetPhrase("svmod.lights.headlights"))

	SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.lights.enable_headlights"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (data.AreHeadlightsEnabled == true),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("Lights")
				net.WriteString("AreHeadlightsEnabled")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(true)
				net.SendToServer()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (data.AreHeadlightsEnabled == false),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("Lights")
				net.WriteString("AreHeadlightsEnabled")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(false)
				net.SendToServer()
			end
		}
	})

	SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.lights.disable_headlights"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (data.TurnOffHeadlightsOnExit == true),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("Lights")
				net.WriteString("TurnOffHeadlightsOnExit")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(true)
				net.SendToServer()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (data.TurnOffHeadlightsOnExit == false),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("Lights")
				net.WriteString("TurnOffHeadlightsOnExit")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(false)
				net.SendToServer()
			end
		}
	})

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.lights.time_headlights"), function(val)
		net.Start("SV_Settings")
		net.WriteString("Lights")
		net.WriteString("TimeTurnOffHeadlights")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val)
		net.SendToServer()
	end)
	slide:SetValue(data.TimeTurnOffHeadlights)
	slide:SetMaxValue(300)
	slide:SetUnit(language.GetPhrase("svmod.seconds"))

	local title = SVMOD:CreateTitle(panel, language.GetPhrase("svmod.lights.blinkers"))
	title:DockMargin(0, 30, 0, 0)

	SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.lights.enable_blinkers"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (data.AreHazardLightsEnabled == true),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("Lights")
				net.WriteString("AreHazardLightsEnabled")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(true)
				net.SendToServer()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (data.AreHazardLightsEnabled == false),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("Lights")
				net.WriteString("AreHazardLightsEnabled")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(false)
				net.SendToServer()
			end
		}
	})

	SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.lights.disable_blinkers"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (data.TurnOffHazardOnExit == true),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("Lights")
				net.WriteString("TurnOffHazardOnExit")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(true)
				net.SendToServer()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (data.TurnOffHazardOnExit == false),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("Lights")
				net.WriteString("TurnOffHazardOnExit")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(false)
				net.SendToServer()
			end
		}
	})

	local slide = SVMOD:CreateNumSlidePanel(panel, language.GetPhrase("svmod.lights.time_blinkers"), function(val)
		net.Start("SV_Settings")
		net.WriteString("Lights")
		net.WriteString("TimeTurnOffHazard")
		net.WriteUInt(1, 2) -- float
		net.WriteFloat(val)
		net.SendToServer()
	end)
	slide:SetValue(data.TimeTurnOffHazard)
	slide:SetMaxValue(300)
	slide:SetUnit(language.GetPhrase("svmod.seconds"))

	local title = SVMOD:CreateTitle(panel, language.GetPhrase("svmod.lights.reverse"))
	title:DockMargin(0, 30, 0, 0)

	SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.lights.enable_reverse"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (data.AreReverseLightsEnabled == true),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("Lights")
				net.WriteString("AreReverseLightsEnabled")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(true)
				net.SendToServer()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (data.AreReverseLightsEnabled == false),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("Lights")
				net.WriteString("AreReverseLightsEnabled")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(false)
				net.SendToServer()
			end
		}
	})
end
--lua/svmod/gui/settings/cl_seats.lua:
return gluapack()()
--lua/svmod/gui/settings/cl_shortcut.lua:
return gluapack()()
--lua/svmod/lights/flashinglights/sh_flashinglights.lua:
return gluapack()()
--lua/svmod/lights/hazardlights/sh_hazardlights.lua:
return gluapack()()
--lua/svmod/lights/headlights/sh_headlights.lua:
return gluapack()()
--lua/svmod/seats/cl_seats.lua:
hook.Add("PlayerBindPress", "SV_EnterExitVehicle", function(ply, bind, pressed)
	-- Return if the player does not attempt to use something
	if not pressed or bind ~= "+use" then return end

	if ply:InVehicle() then

		-- |
		-- EXIT VEHICLE
		-- |

		-- Return if not a SVMod vehicle
		if not SVMOD:IsVehicle(ply:GetVehicle()) then return end

		-- Check if shortcut is not in cooldown
		if CurTime() >= SVMOD.ShortcutTime then
			net.Start("SV_ExitVehicle")
			net.SendToServer()

			SVMOD.ShortcutTime = CurTime() + SVMOD.FCFG.ShortcutTime
		end

	else

		-- |
		-- ENTER VEHICLE
		-- |

		-- Get the vehicle
		local veh = ply:GetEyeTrace().Entity

		-- Return if not a vehicle
		if not SVMOD:IsVehicle(veh) then
			return -- DO NOT RETURN TRUE HERE!
		end

		-- Return if the vehicle is picked up from the physgun
		if veh.SV_PhysgunPickup then
			return true
		end

		-- Return if too far
		if ply:GetShootPos():DistToSqr(veh:GetPos()) > 30000 then
			return true
		end

		-- Check if shortcut is not in cooldown
		if CurTime() >= SVMOD.ShortcutTime then
			net.Start("SV_EnterVehicle")
			net.SendToServer()

			SVMOD.ShortcutTime = CurTime() + SVMOD.FCFG.ShortcutTime
		end

	end

	-- Prevent the bind
	return true
end)

hook.Add("PlayerBindPress", "SV_SwitchSeat", function(ply, bind, pressed)
	local veh = ply:GetVehicle()
	if not SVMOD:IsVehicle(veh) then
		return
	end

	-- Return if the player does not attempt to switch seat
	if not pressed or not string.match(bind, "slot") then
		return
	end

	local SeatIndex = tonumber(string.Replace(bind, "slot", ""))
	if not isnumber(SeatIndex) then return end

	-- Check if shortcut is not in cooldown
	if CurTime() >= SVMOD.ShortcutTime then
		if veh:SV_IsDriverSeat() and ply:KeyDown(IN_WALK) then
			net.Start("SV_KickSeat")
			net.WriteUInt(SeatIndex, 4) -- max: 15
			net.SendToServer()

			SVMOD.SV_PlayerKickedFromSeat = true
		else
			net.Start("SV_SwitchSeat")
			net.WriteUInt(SeatIndex, 4) -- max: 15
			net.SendToServer()
		end

		SVMOD.ShortcutTime = CurTime() + SVMOD.FCFG.ShortcutTime
	end

	-- Prevent the bind
	return true
end)

function SVMOD:CreateCSSeat(veh)
	local seat = ents.CreateClientProp()
	seat:SetModel("models/nova/jeep_seat.mdl")
	seat:SetParent(veh)
	seat:SetLocalPos(Vector(0, 0, 0))
	seat:SetLocalAngles(Angle(0, 0, 0))
	seat:Spawn()

	return seat
end

hook.Add("PhysgunPickup", "SV_DisableEnterOnPhysgunPickup", function(ply, ent)
	if SVMOD:IsVehicle(ent) then
		ent.SV_PhysgunPickup = true
	end
end)

hook.Add("PhysgunDrop", "SV_DisableEnterOnPhysgunDrop", function(ply, ent)
	if SVMOD:IsVehicle(ent) then
		ent.SV_PhysgunPickup = false
	end
end)
--lua/svmod/shortcuts/cl_shortcuts.lua:
hook.Add("SV_PlayerEnteredVehicle", "SV_StartShortcutsThink", function(_, veh)
	local LastShortcut
	hook.Add("Think", "SV_DetectShortcuts", function()
		-- Return if menu open
		if vgui.CursorVisible() then return end

		-- Return if not driver seat
		local veh = LocalPlayer():GetVehicle()
		if not SVMOD:IsVehicle(veh) or not veh:SV_IsDriverSeat() then return end

		if LastShortcut and not (input.IsKeyDown(LastShortcut.Key) or input.IsMouseDown(LastShortcut.Key)) then
			if LastShortcut.ReleasedFunction then
				LastShortcut.ReleasedFunction(veh)

				if not LastShortcut.BypassTimer then
					SVMOD.ShortcutTime = CurTime() + SVMOD.FCFG.ShortcutTime
				end
			end

			LastShortcut = nil
		end

		-- Return if shortcut in cooldown
		if CurTime() < SVMOD.ShortcutTime then
			return
		end

		for _, s in ipairs(SVMOD.Shortcuts) do
			if (input.IsKeyDown(s.Key) or input.IsMouseDown(s.Key)) and (not LastShortcut or s.Key ~= LastShortcut.Key) then
				if s.PressedFunction then
					s.PressedFunction(veh)

					if not s.BypassTimer then
						SVMOD.ShortcutTime = CurTime() + SVMOD.FCFG.ShortcutTime
					end
				end

				LastShortcut = s

				break
			end
		end
	end)
end)

hook.Add("SV_PlayerLeaveVehicle", "SV_StopShortcutsThink", function()
	hook.Remove("Think", "SV_DetectShortcuts")
end)
--lua/svmod/vehicles/cl_vehicles.lua:
game.AddParticles("particles/fire_01.pcf")
PrecacheParticleSystem("smoke_small_01")

hook.Add("InitPostEntity", "SV_InitializeCS", function()
	SVMOD.ShortcutTime = CurTime()
end)

net.Receive("SV_PlayerEnteredVehicle", function()
	local veh = net.ReadEntity()

	hook.Run("SV_PlayerEnteredVehicle", LocalPlayer(), veh)
end)

net.Receive("SV_PlayerLeaveVehicle", function()
	local veh = net.ReadEntity()

	hook.Run("SV_PlayerLeaveVehicle", LocalPlayer(), veh)
end)

hook.Add("SV_LoadVehicle", "SV_GetVehicleStates", function(veh)
	net.Start("SV_GetVehicleStates")
	net.WriteEntity(veh)
	net.SendToServer()
end)
--lua/svmod/vehicles/cl_view.lua:
return gluapack()()
--lua/autorun/tdm__init.lua:
return gluapack()()
--lua/autorun/tdmcars_918spyd.lua:
local V = {
			Name = "Porsche 918 Spyder", 
			Class = "prop_vehicle_jeep",
			Category = "TDM Cars",
			Author = "TheDanishMaster, Porsche",
			Information = "A drivable Porsche 918 Spyder by TheDanishMaster",
			Model = "models/tdmcars/por_918.mdl",					
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/918spyd.txt"
							}
			}
list.Set("Vehicles", "918spydtdm", V)

--lua/autorun/tdmcars_997gt3.lua:
local V = {
			Name = "Porsche 997 GT3", 
			Class = "prop_vehicle_jeep",
			Category = "TDM Cars",
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Porsche 997 GT3 by TheDanishMaster",
			Model = "models/tdmcars/997gt3.mdl",					
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/997gt3.txt"
							}
			}
list.Set("Vehicles", "997gt3tdm", V)

--lua/autorun/triton.lua:
player_manager.AddValidModel( "Triton",                     "models/player/spike/Triton.mdl" )
list.Set( "PlayerOptionsModel",  "Triton",                     "models/player/spike/Triton.mdl" ) 

--Add NPC
local Category = "Spike's NPCs"

local NPC = { 	Name = "Triton", 
				Class = "npc_citizen",
				Model = "models/player/spike/Triton.mdl",
				Health = "1000",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "Triton", NPC )

local Category = "Spike's NPCs"

local NPC = { 	Name = "Triton Hostile", 
				Class = "npc_combine",
				Model = "models/player/spike/Triton.mdl",
				Health = "1000",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "Triton Hostile", NPC )
--addons/voidlib/lua/autorun/voidlib_init.lua:

--[[---------------------------------------------------------
	Name: Setup
-----------------------------------------------------------]]
VoidLib = VoidLib or {}
VoidUI = VoidUI or {}

VoidLib.Dir = "voidlib"
VoidLib.Debug = false

VoidLib.Version = "1.0.0"

--[[---------------------------------------------------------
	Name: Main
-----------------------------------------------------------]]
function VoidLib.Load(dir)
	local files = file.Find(dir.. "/".. "*", "LUA")

	for k, v in pairs(files) do
		if string.StartWith(v, "cl") then

			AddCSLuaFile(dir.. "/".. v)

			if CLIENT then
				local load = include(dir.. "/".. v)
				if load then load() end
			end
		end

		if string.StartWith(v, "sv") then
			if SERVER then
				local load = include(dir.. "/".. v)
				if load then load() end
			end
		end

		if string.StartWith(v, "sh") then

			AddCSLuaFile(dir.. "/".. v)

			local load = include(dir.. "/".. v)
			if load then load() end
		end
	end
end

function VoidLib.AddCSDir(dir)
	local files = file.Find(dir.. "/".. "*", "LUA")

	for k, v in pairs(files) do
		AddCSLuaFile(dir.. "/".. v)

		if CLIENT then
			include(dir.. "/".. v)
		end
	end
end

--[[---------------------------------------------------------
	Name: Functions
-----------------------------------------------------------]]
function VoidLib.PrintError(...)
	MsgC(Color(120, 255, 120), "[VoidLib] (ERROR): ", Color(255, 255, 255), ..., "\n")
end

function VoidLib.PrintDebug(...)
	if (!VoidLib.Debug) then return end

	MsgC(Color(120, 255, 120), "[VoidLib] (DEBUG): ", Color(255, 255, 255), ..., "\n")
end

function VoidLib.Print(...)
	MsgC(Color(255, 120, 120), "[VoidLib]: ", Color(255, 255, 255), ..., "\n")
end

--[[---------------------------------------------------------
	Name: Loading
-----------------------------------------------------------]]

VoidLib.Load(VoidLib.Dir)
VoidLib.AddCSDir(VoidLib.Dir.. "/vgui")
hook.Run("VoidLib.Loaded")
--addons/voidlib/lua/voidlib/vgui/textgrid.lua:
local sc = VoidUI.Scale

local PANEL = {}

AccessorFunc(PANEL, "horizontalMargin", "HorizontalMargin", FORCE_NUMBER)
AccessorFunc(PANEL, "verticalMargin", "VerticalMargin", FORCE_NUMBER)
AccessorFunc(PANEL, "columns", "Columns", FORCE_NUMBER)

AccessorFunc(PANEL, "maxHeight", "MaxHeight", FORCE_NUMBER)


function PANEL:Init()
    self.Rows = {}
	self.Cells = {}

    self:SetColumns(2)
    self:SetVerticalMargin(sc(25))
end

function PANEL:AddEntry(title, text)
    local entryPanel = vgui.Create("Panel")
    entryPanel:SetTall(50)
    entryPanel.text = text
    entryPanel.textColor = VoidUI.Colors.White
    entryPanel.Paint = function (self, w, h)
        draw.SimpleText(string.upper(title), "VoidUI.B22", 0, 0, VoidUI.Colors.Blue)

        draw.SimpleText(self.text, "VoidUI.R24", 0, sc(20), self.textColor or VoidUI.Colors.White)
    end

    self:AddCell(entryPanel)

    return entryPanel
end

vgui.Register("VoidUI.TextGrid", PANEL, "VoidUI.Grid")
--addons/voidlib/lua/voidlib/vgui/threegrid.lua:

-- Threegrid made by Threebow

local sc = VoidUI.Scale

local PANEL = {}

AccessorFunc(PANEL, "horizontalMargin", "HorizontalMargin", FORCE_NUMBER)
AccessorFunc(PANEL, "verticalMargin", "VerticalMargin", FORCE_NUMBER)
AccessorFunc(PANEL, "columns", "Columns", FORCE_NUMBER)

AccessorFunc(PANEL, "maxHeight", "MaxHeight", FORCE_NUMBER)

function PANEL:Init()
	self:SetHorizontalMargin(10)
	self:SetVerticalMargin(10)

	self.Rows = {}
	self.Cells = {}

end


function PANEL:AddCell(pnl, fixedWidth, fixedHeight)
	local cols = self:GetColumns()
	local idx = math.floor(#self.Cells/cols)+1
	self.Rows[idx] = self.Rows[idx] || self:CreateRow()

	local margin = sc(self:GetHorizontalMargin())
	
	pnl:SetParent(self.Rows[idx])
	pnl:Dock(LEFT)
	pnl:DockMargin(0, 0, #self.Rows[idx].Items+1 < cols && sc(self:GetHorizontalMargin()) || 0, 0)
	if (!fixedWidth) then
		local sub = fixedHeight and 0 or 10
		pnl:SetWide((self:GetWide()-margin*(cols-1))/cols - sub)

		pnl.PerformLayout = function ()
			pnl:SetWide((self:GetWide()-margin*(cols-1))/cols - sub)
		end
	end

	table.insert(self.Rows[idx].Items, pnl)
	table.insert(self.Cells, pnl)
	self:CalculateRowHeight(self.Rows[idx], fixedHeight)
end

function PANEL:CalculateRows()
	for k, v in pairs(self.Rows) do
		self:CalculateRowHeight(v)
	end
end

function PANEL:AutoSize()
	
	local totalHeight = 0

	for _, row in pairs(self.Rows) do
		local height = 0
		local bottomMargin = 0
		for k, v in pairs(row.Items) do
			local left, top, right, bottom = v:GetDockMargin()

			height = math.max(height, v:GetTall())
			bottomMargin = sc(self:GetVerticalMargin())
		end

		totalHeight = totalHeight + height + bottomMargin
	end

	totalHeight = math.max(0, totalHeight - sc(self:GetVerticalMargin()))
	if (self:GetMaxHeight() and self:GetMaxHeight() != 0) then
		totalHeight = math.min(totalHeight, sc(self:GetMaxHeight()))
	end

	self:SetTall(totalHeight)

	if (self:GetParent():GetName() == "VoidUI.PanelContent") then
		self:GetParent():SetTall(totalHeight + self:GetTopMargin())
	end

	return totalHeight

end

function PANEL:CreateRow()
	local row = self:Add("DPanel")
	row:Dock(TOP)
	row:DockMargin(0, 0, 0, sc(self:GetVerticalMargin()))
	row.Paint = nil
	row.Items = {}
	return row
end

function PANEL:CalculateRowHeight(row)
	local height = 0

	for k, v in pairs(row.Items) do
		height = math.max(height, v:GetTall())
	end

	row:SetTall(height)
end

function PANEL:Skip()
	local cell = vgui.Create("DPanel")
	cell.Paint = nil
	self:AddCell(cell)
end

function PANEL:Clear()
	for _, row in pairs(self.Rows) do
		for _, cell in pairs(row.Items) do
			cell:Remove()
		end
		row:Remove()
	end

	self.Cells, self.Rows = {}, {}
end

PANEL.OnRemove = PANEL.Clear

vgui.Register("VoidUI.Grid", PANEL, "VoidUI.ScrollPanel")

--addons/voidfactions-1.10.6/lua/voidfactions/features/api/sh_api.lua:
VoidFactions.API = VoidFactions.API or {}

local PLAYER = FindMetaTable("Player")

local DEFAULT_FALLBACK = "None"

function PLAYER:VF_GetFactionVar(varName, fallback)
    fallback = fallback or DEFAULT_FALLBACK
    
    -- before the second argument was a boolean, to return nil instead of a string,
    -- so we need this to not break other addons using the old implementation of the API
    if fallback == true then
        fallback = nil
    end
    
    if (SERVER) then
        local faction = self:GetVFFaction()
        return faction and faction[varName] or fallback
    else
        local plyData = VoidFactions.Utils.SyncedFactionPlayers[self]
        return plyData and plyData[varName] or fallback
    end
end

function PLAYER:VF_GetMemberVar(varName)
    if (SERVER) then
        local member = self:GetVFMember()
        return member and member[varName]
    end
end

function PLAYER:VF_GetFactionName(fallback)
    -- because the client doesn't know about the whole faction object, 
    -- 'faction' will return a string instead.
    local var = SERVER and "name" or "faction"
    return self:VF_GetFactionVar(var, fallback)
end

function PLAYER:VF_GetFactionLogo(fallback)
    return self:VF_GetFactionVar("factionLogo", fallback)
end

function PLAYER:VF_GetFactionTag(fallback)
    return self:VF_GetFactionVar("tag", fallback)
end

function PLAYER:VF_GetRankName(fallback)
    if (CLIENT) then
        return self:VF_GetFactionVar("rank", fallback)
    end
    
    fallback = fallback or DEFAULT_FALLBACK
    local rank = self:VF_GetMemberVar("rank")
    
    return rank and rank.name or fallback
end

function PLAYER:VF_GetRankTag(fallback)
    if (CLIENT) then
        return self:VF_GetFactionVar("rankTag", b)
    end
    
    fallback = fallback or DEFAULT_FALLBACK

    local rank = self:VF_GetMemberVar("rank")
    return rank and rank.tag or fallback
end

function PLAYER:VF_GetFactionColor(fallback)
    fallback = fallback or color_white
    return self:VF_GetFactionVar("factionColor", fallback)
end

--addons/voidfactions-1.10.6/lua/voidfactions/features/experience/sh_experience.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/classes/sh_upgradepoint.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/classes/sh_upgradepoint.lua:
VoidFactions.UpgradePoints = VoidFactions.UpgradePoints or {}
VoidFactions.UpgradePoints.List = SERVER and {} or nil

-- Class

local UPGRADEPOINT_CLASS = {}
UPGRADEPOINT_CLASS.__index = UPGRADEPOINT_CLASS

function UPGRADEPOINT_CLASS:New(id, upgrade, posX, posY, to)
	local newObject = setmetatable({}, UPGRADEPOINT_CLASS)
		newObject.id = id
        newObject.upgrade = upgrade

        newObject.posX = posX
        newObject.posY = posY

        -- to is a table with all the points that this point is pointing to
        newObject.to = {}
	return newObject
end

-- Setter functions

function UPGRADEPOINT_CLASS:SetTo(to)
    self.to = to
end

function UPGRADEPOINT_CLASS:AddTo(to)
    self.to[#self.to + 1] = to
end

function UPGRADEPOINT_CLASS:SetPos(posX, posY)
    self.posX = posX
    self.posY = posY
end

-- Helper functions

function UPGRADEPOINT_CLASS:CanPurchase(faction)
    -- Check if any of the purchased upgrades has a to for this one
    -- Or if it's a starting point
    
    local hasTo = false
    local isStarting = true 
    for k, v in pairs(VoidFactions.UpgradePoints.List or {}) do
        if (table.HasValue(v.to, self)) then
            isStarting = false
            if (faction.upgrades[v.id]) then
                hasTo = true
            end
        end
    end

    return hasTo or isStarting
end

-- Functions

function VoidFactions.UpgradePoints:New(...)
    return UPGRADEPOINT_CLASS:New(...)
end
--addons/voidfactions-1.10.6/lua/voidfactions/modules/currencies/darkrp.lua:
local CURRENCY = VoidFactions.Currencies:NewCurrency() -- Create a new currency object
CURRENCY:Name("DarkRP") -- Set the currency name

-- The functions that checks if the dependent addon/gamemode is installed
-- This is not required. The currency will not be selectable if this function returns false or nil
CURRENCY:IsInstalledFunc(function ()
    return DarkRP
end)

-- The function that will return the amount of player's money
CURRENCY:GetMoneyFunc(function (ply)
    return ply:getDarkRPVar("money")
end)

-- The function that will give money to the player
CURRENCY:GiveMoneyFunc(function (ply, money)
    ply:addMoney(money)
end)

-- The function that will take money from the player
-- (NOT NEEDED IF GiveMoneyFunc can remove money)
-- CURRENCY:TakeMoneyFunc(function (ply)
    -- function for taking the money
-- end)

-- The function that will format the money
-- If not supplied, then a $ will be prepended
CURRENCY:FormatMoneyFunc(function (money)
    return DarkRP.formatMoney(money)
end)

-- Register the currency (this is required!)
VoidFactions.Currencies:AddCurrency(CURRENCY)
--addons/voidfactions-1.10.6/lua/voidfactions/modules/currencies/pointshop2.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/memberhalo.lua:
local UPGRADE = VoidFactions.Upgrades:NewUpgrade()

UPGRADE:Name("upgr_memberhalo")
UPGRADE:Icon("rDFcEq6")

UPGRADE:Description("upgr_desc_memberhalo")
UPGRADE:ValueDescription("upgr_descval_memberhalo")

UPGRADE:FormatValue(function (val)
    return "+" .. val .. "m"
end)

if (CLIENT) then
    local ply = LocalPlayer()
    local factionHasUpgrade = false
    local factionSum = 0
    local listOfMembers = {}
    hook.Add("InitPostEntity", "VoidFactions.MemberHalo.SetupPly", function ()
        timer.Simple(1, function ()
            local lP = LocalPlayer()
            if (IsValid(lP)) then
                ply = lP
            end
        end)
    end)

    -- Check every 1 sec
    timer.Create("VoidFactions.MemberHalo.CheckUpgrade", 5, 0, function ()
        if (!IsValid(ply)) then return end
        local member = ply:GetVFMember()
        if (!member) then return end
        if (!member.faction) then return end

        local faction = member.faction

        local hUpgrade = faction:HasUpgrade("upgr_memberhalo")
        if (hUpgrade) then
            factionHasUpgrade = true
            factionSum = faction:SumOfUpgradeValues("upgr_memberhalo")

            local plys = {}
            local plyPos = ply:GetPos()
            local sqrDist = math.pow(factionSum * 53, 2)
            local facMembers = faction.members
            for k, v in ipairs(facMembers) do
                if (!IsValid(v.ply)) then continue end
                if (v.ply != ply and plyPos:DistToSqr(v.ply:GetPos()) < sqrDist) then
                    plys[#plys + 1] = v.ply
                end
            end

            listOfMembers = plys

        else
            factionHasUpgrade = false
        end
    end)

    hook.Add("PreDrawHalos", "VoidFactions.MemberHalo.Draw", function ()
        if (!IsValid(ply)) then return end
        local member = ply:GetVFMember()
        if (!member) then return end
        if (!member.faction) then return end

        local faction = member.faction
        local haloColor = faction.color

        if (factionHasUpgrade) then
            halo.Add(listOfMembers, haloColor, 2, 2, 1, true, true)
        end
    end)
end

VoidFactions.Upgrades:AddUpgrade(UPGRADE)
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/faction_settingsinfo.lua:
local sc = VoidUI.Scale
local L = VoidFactions.Lang.GetPhrase

local PANEL = {}

function PANEL:Init()
	local this = self
	self:SetOrigSize(660, 506)
	local ply = LocalPlayer()

	self.isLoading = true
	

	self.selectedFaction = nil

	local namePanel = self:Add("Panel")
	namePanel:Dock(TOP)
	namePanel.Paint = function (self, w, h)
		if (!this.selectedFaction) then return end
		draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)

		draw.SimpleText(string.upper(this.selectedFaction.name), "VoidUI.B28", w/2, h/2-1, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end

	local manageButton = namePanel:Add("VoidUI.Button")
	manageButton:Dock(RIGHT)
	manageButton:SetText(L"manage")
	manageButton:MarginTops(10)
	manageButton:MarginRight(10)
	manageButton:SSetWide(80)
	manageButton:SetCompact()
	manageButton:SetColor(VoidFactions.UI.Accent)
	manageButton.DoClick = function ()
		if (!self.selectedFaction) then return end

		local frame = vgui.Create("VoidFactions.UI.FactionCreate")
		frame:EditMode(self.selectedFaction)
	end

	local ply = LocalPlayer()
	if (!CAMI.PlayerHasAccess(ply, "VoidFactions_EditFactions")) then
		manageButton:SetEnabled(false)
	end

	local rankPanel = self:Add("Panel")
	rankPanel:Dock(FILL)
	rankPanel.Paint = function (self, w, h)
		if (!this.selectedFaction) then return end
		draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)
	end

	local rankPanelContainer = rankPanel:Add("Panel")
	rankPanelContainer:Dock(FILL)
	rankPanelContainer.Paint = function (self, w, h)
		draw.SimpleText(L"rank", "VoidUI.B24", 0, 0, VoidUI.Colors.Gray)
		draw.SimpleText(L"members", "VoidUI.B24", w/2, 0, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER)
		draw.SimpleText(L"actions", "VoidUI.B24", w-w*0.1, 0, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER)
	end

	local rankContent = rankPanelContainer:Add("Panel")
	rankContent:Dock(FILL)

	rankContent.Paint = function (self, w, h)
		if (this.isLoading or (this.selectedFaction and table.Count(this.selectedFaction.ranks or {}) == 0 and !this.isTemplate) ) then
			local text = this.isLoading and L"loading" or L"noRanksAvailable"
			draw.SimpleText(text, "VoidUI.B40", w/2, h/2-h*0.05, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end
	end


	local scrollContainer = rankContent:Add("VoidUI.ScrollPanel")
	scrollContainer:Dock(FILL)

	local rankRows = scrollContainer:Add("DListLayout")
	rankRows:Dock(TOP)

	function rankRows:OnModified()
		for k, v in pairs(this.rankPanels) do
			VoidFactions.Rank:UpdateRankWeight(v.rank, v:GetZPos())
		end
	end

	rankRows:MakeDroppable("rankRowsOrder")

	local addButton = rankPanelContainer:Add("VoidUI.Button")
	addButton:Dock(BOTTOM)
	addButton:SetText(L"addRank")
	addButton:SetColor(VoidFactions.UI.Accent)
	addButton:SetFont("VoidUI.R22")
	addButton.DoClick = function ()
		local frame = vgui.Create("VoidFactions.UI.RankCreate")
		frame:SetFaction(self.isTemplate and 0 or self.selectedFaction)
	end

	if (!CAMI.PlayerHasAccess(ply, "VoidFactions_EditFactions")) then
		addButton:SetEnabled(false)
	end

	self.rankContent = rankContent
	self.scrollContainer = scrollContainer
	self.rankPanelContainer = rankPanelContainer
	self.addButton = addButton
	self.rankRows = rankRows
	self.rankPanel = rankPanel
	self.namePanel = namePanel
	self.manageButton = manageButton

	self.rankEditFrame = nil

	hook.Add("VoidFactions.Faction.DataUpdated", "VoidFactions.UI.FactionSettingsInfo.DataUpdate", function (faction)
		if (this.selectedFaction and this.selectedFaction.id == faction.id) then
			self:SetRanks(faction)
		end
	end)

	hook.Add("VoidFactions.Rank.RankTemplatesReceived", "VoidFactions.UI.FactionSettingsInfo.DataRankTempalteUpdate", function (ranks)
		self:SetRanks({ranks = ranks})
	end)
end

function PANEL:OnRemove()
	hook.Remove("VoidFactions.Faction.DataUpdated", "VoidFactions.UI.FactionSettingsInfo.DataUpdate")
end

function PANEL:SetRanks(faction)

	local ranks = faction.ranks
	local members = faction.members

	self.rankRows:Clear()

	local rankTbl = {}
	for k, member in ipairs(members or {}) do
		if (!member.rank) then
			VoidFactions.PrintError("Member SID " .. member.sid .. " does not have a rank!")
			continue
		end
		if (rankTbl[member.rank.id]) then
			rankTbl[member.rank.id] = rankTbl[member.rank.id] + 1
		else
			rankTbl[member.rank.id] = 1
		end
	end

	local rankRows = self.rankRows

	local root = self

	self.isLoading = false

	self.rankPanels = {}
	self.panelRanks = {}


	for id, rank in SortedPairsByMemberValue(ranks, "weight") do
		local memberCount = rankTbl[id] or 0

		local rankPanel = self.rankRows:Add("DButton")
		rankPanel:SetText("")
		rankPanel.Paint = function (self, w, h)
			draw.SimpleText(rank.name, "VoidUI.R22", 5, h/2-sc(10), VoidUI.Colors.Gray)

			draw.SimpleText(memberCount .. "/" .. rank.maxMembers, "VoidUI.R22", w/2, h/2-sc(10), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER)

			surface.SetDrawColor(VoidUI.Colors.Background)
			surface.DrawLine(0, h-1, w, h-1)
		end

		local function duplicatePopup()
			local popup = vgui.Create("VoidUI.Popup")
			popup:SetText(L"duplicate", L("duplicate_confirm", { faction = rank.name }))

			popup:Continue(L"duplicate", function (val)
				VoidFactions.Rank:CreateRank(faction, rank.name .. " (copy)", rank.weight, rank.tag, rank.maxMembers, rank.canInvite, rank.canPromote, rank.canDemote, rank.canPurchasePerks, rank.kickMembers, rank.manageFaction, rank.minLevel, rank.jobs, rank.canWithdrawMoney, rank.canDepositMoney, rank.canWithdrawItems, rank.canDepositItems, rank.autoPromoteLevel, {})
			end)
			
			popup:Cancel(L"cancel")
		end

		local origPress = rankPanel.OnMousePressed
		rankPanel.OnMousePressed = function (s, keycode)
			origPress(s, keycode)

			if (keycode == MOUSE_RIGHT) then
				local ctxMenu = VoidUI:CreateDropdownPopup()

				local duplicate = ctxMenu:AddOption(L"duplicate", function ()
					duplicatePopup()
				end)

				ctxMenu.y = ctxMenu.y - 15
				ctxMenu.x = ctxMenu.x + 10
			end
		end

		rankPanel.rank = rank
		rankPanel:SetCursor("sizeall")


		local actionPanel = rankPanel:Add("Panel")
		actionPanel:Dock(RIGHT)

		local manageButton = actionPanel:Add("VoidUI.Button")
		manageButton:Dock(TOP)
		manageButton:SetText(L"manage")
		manageButton:SetCompact()
		manageButton:SetColor(VoidFactions.UI.Accent)
		manageButton.DoClick = function ()
			local frame = vgui.Create("VoidFactions.UI.RankCreate")
			frame:SetFaction(self.selectedFaction)
			frame:EditMode(rank)

			self.rankEditFrame = frame
		end
		
		
		rankPanel.actionPanel = actionPanel
		rankPanel.actionPanel.manage = manageButton

		self.rankPanels[#self.rankPanels + 1] = rankPanel

		self.rankRows:Add(rankPanel)
		
	end

	self.scrollContainer:SetVisible(true)

	self:InvalidateLayout(true)
	self.scrollContainer:InvalidateLayout(true)
	self.scrollContainer:InvalidateChildren(true)
	self.rankRows:InvalidateLayout(true)
	self.rankRows:SizeToChildren(false, true)
end

function PANEL:SetFaction(faction, isTemplate)
	if (!isTemplate) then
		faction = VoidFactions.LoadedFactions[faction.id]
	end

	self.selectedFaction = faction
	self.isLoading = true

	self.scrollContainer:SetVisible(false)

	self.isTemplate = isTemplate or false
	if (isTemplate) then
		self.manageButton:SetVisible(false)
	else
		self.manageButton:SetVisible(true)
	end

	if (faction.ranks and faction.members) then
		self:SetRanks(faction)
	end

	if ((isTemplate and VoidFactions.RankTemplates)) then
		self:SetRanks({ranks = VoidFactions.RankTemplates}, "template")
	else
		-- Request ranks from server
		VoidFactions.Faction:RequestFactionRanks(faction.id)
	end
end

function PANEL:PerformLayout(w, h)

	self.addButton:MarginSides(180, self)
	self.addButton:SSetTall(40, self)

	self.namePanel:SSetTall(45, self)
	self.rankPanel:MarginTop(10, self)

	self.rankContent:MarginTop(30, self)
	self.rankContent:MarginBottom(10, self)

	self.rankPanel:SDockPadding(35, 10, 35, 20, self)

	if (self.rankPanels) then
		for k, panel in ipairs(self.rankPanels) do
			panel:SSetTall(40, self)

			panel.actionPanel:SSetWide(165, self)
			panel.actionPanel:MarginTop(10, self)
			panel.actionPanel:MarginBottom(8, self)
			panel.actionPanel.manage:MarginLeft(65, self)
			panel.actionPanel.manage:MarginRight(15, self)
		end
	end
end

vgui.Register("VoidFactions.UI.FactionSettingsInfo", PANEL, "Panel")

--addons/voidfactions-1.10.6/lua/voidfactions/vgui/dynamic/faction_panel.lua:
local L = VoidFactions.Lang.GetPhrase
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
    self:SetTitle(string.upper(L"faction"))
    self:SetOrigSize(1000, 600)

    local member = VoidFactions.PlayerMember
    local faction = member.faction

    local container = self:Add("Panel")
    container:Dock(FILL)

    local factionPanel = container:Add("Panel")
    factionPanel:Dock(TOP)
    factionPanel.Paint = function (self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)
    end

    local factionIcon = factionPanel:Add("Panel")
    factionIcon:Dock(LEFT)
    factionIcon.Paint = function (self, w, h)
        surface.SetDrawColor(faction.color)
        surface.DrawRect(0, 0, w, h)
    end

    local factionImage = factionIcon:Add("DImage")
    factionImage:Dock(FILL)
    VoidLib.FetchImage(faction.logo, function (mat)
        factionImage:SetMaterial(mat)
    end)

    local factionPanelInner = factionPanel:Add("Panel")
    factionPanelInner:Dock(FILL)

    local factionText = factionPanelInner:Add("Panel")
    factionText:Dock(LEFT)
    factionText.Paint = function (self, w, h)
        draw.SimpleText(string.upper(L"faction"), "VoidUI.B24", 0, h/2, VoidUI.Colors.Green, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM)
        draw.SimpleText(faction.name, "VoidUI.R24", 0, h/2-2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
    end

    local factionRank = factionPanelInner:Add("Panel")
    factionRank:Dock(LEFT)
    factionRank.Paint = function (self, w, h)
        draw.SimpleText(string.upper(L"rank"), "VoidUI.B24", w/2, h/2, VoidUI.Colors.Green, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
        draw.SimpleText(member.rank.name, "VoidUI.R24", w/2, h/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
    end

    local factionLeave = factionPanelInner:Add("VoidUI.Button")
    factionLeave:Dock(RIGHT)
    factionLeave:SetMedium()
    factionLeave:SetText(L"leave")
    factionLeave:SetColor(VoidUI.Colors.Red)

	factionLeave.DoClick = function ()
		VoidFactions.Member:LeaveFaction()
		VoidFactions.Menu.Panel:Remove()
	end

    -- Dont show for boss - faction can be disbanded in faction management
    factionLeave:SetVisible(member.rank.weight != 1)

    local factionManage = factionPanelInner:Add("VoidUI.Button")
    factionManage:Dock(RIGHT)
    factionManage:SetMedium()
    factionManage:SetText(L"details")
    factionManage:SetColor(VoidUI.Colors.Green)

	factionManage.DoClick = function ()
		self:GetParent():ManageFaction()
	end

    factionManage:SetVisible(true)
    
    
    local membersPanel = container:Add("Panel")
    membersPanel:Dock(FILL)
    membersPanel.Paint = function (self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)
    end

    local membersHeader = membersPanel:Add("Panel")
    membersHeader:Dock(TOP)
    membersHeader.Paint = function (self, w, h)
        local formattedString = VoidLib.StringFormat(L"memberCount",
        {
            x = #faction.members,
            total = faction.GetMaxMembers and faction:GetMaxMembers() or 0
        })
        draw.SimpleText(string.upper(formattedString), "VoidUI.B24", sc(25), h/2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end

    local membersContent = membersPanel:Add("Panel")
    membersContent:Dock(FILL)
    membersContent.Paint = function (self, w, h)
		draw.RoundedBox(4, 0, 0, w, sc(22), VoidUI.Colors.BackgroundTransparent)
		
        draw.SimpleText(string.upper(L"name"), "VoidUI.B22", sc(35), sc(10), VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
        draw.SimpleText(string.upper(L"rank"), "VoidUI.B22", w/2, sc(10), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end

    local membersRows = membersContent:Add("VoidUI.RowPanel")
    membersRows:Dock(FILL)
    membersRows.Paint = function (self, w, h)
        draw.RoundedBox(4, 0, 0, w, h, VoidUI.Colors.BackgroundTransparent)
    end

	local inviteButton = membersPanel:Add("VoidUI.Button")
	inviteButton:Dock(BOTTOM)
	inviteButton:SetMedium()
	inviteButton:SetText(L"inviteMember")

	local canInvite = true
	if (faction.members and #faction.members + 1 > faction:GetMaxMembers()) then canInvite = false end
	if (!member:Can("Invite")) then canInvite = false end

	inviteButton:SetEnabled(canInvite)

	local localPly = LocalPlayer()
	inviteButton.DoClick = function ()
		local selector = vgui.Create("VoidUI.ItemSelect")
		selector:SetParent(self)

		local membersTbl = {}
		for k, v in ipairs(faction.members) do
			membersTbl[v.sid] = v
		end

		local plyTbl = {}
		for _, ply in ipairs(player.GetHumans()) do
			if (!IsValid(ply)) then continue end
			if (ply == localPly) then continue end

			local sid = ply:SteamID64()
			if (membersTbl[sid]) then continue end
			
			plyTbl[sid] = ply:Nick()
		end

		selector:InitItems(plyTbl, function (id, v)
			local sid = id
			local ply = player.GetBySteamID64(sid)
			if (IsValid(ply)) then
				VoidFactions.Member:InvitePlayer(ply)
			end
		end)

		local cx, cy = input.GetCursorPos()
    	selector:SetPos(inviteButton.x + sc(700), cy - sc(250))
	end

    self.factionPanel = factionPanel
    self.factionPanelContent = factionPanelContent
    self.factionIcon = factionIcon
    self.factionImage = factionImage
    self.factionText = factionText
    self.factionPanelInner = factionPanelInner
    self.factionRank = factionRank

    self.factionLeave = factionLeave
    self.factionManage = factionManage

    self.membersPanel = membersPanel
    self.membersHeader = membersHeader
    self.membersContent = membersContent
    self.membersRows = membersRows

	self.inviteButton = inviteButton

    self.container = container

    self:PopulateMembers()

	hook.Add("VoidFactions.Faction.DataUpdated", "VoidFactions.UI.FactionPanel.UpdateData", function ()
		self:PopulateMembers()
	end)
end

function PANEL:OnRemove()
	hook.Remove("VoidFactions.Faction.DataUpdated", "VoidFactions.UI.FactionPanel.UpdateData")
end

function PANEL:PopulateMembers()
    local member = VoidFactions.PlayerMember
    local faction = member.faction

    self.membersRows:Clear()

    for _, facMember in ipairs(faction.members or {}) do
		local isOnline = IsValid(facMember.ply)
		
		local playerNick = L"loading"
		steamworks.RequestPlayerInfo(facMember.sid, function (nick)
            playerNick = nick
        end)

		if (facMember == member) then
			playerNick = playerNick .. " (" .. L"you" .. ")"
		end

        local canPromote = member:Can("ChangeRank", faction, nil, facMember)
        local canKick = member:Can("Kick", faction, nil, facMember)
        
        if (facMember.ply == LocalPlayer()) then
            canPromote = false
            canKick = false
        end

        local panel = self.membersRows:Add("Panel")
		panel.Paint = function (self, w, h)
			surface.SetDrawColor(isOnline and VoidUI.Colors.Green or VoidUI.Colors.Red)			
			VoidUI.DrawCircle(20, h/2, 5, 1)

			draw.SimpleText(playerNick or L"loading", "VoidUI.R22", sc(35), h/2-2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
			draw.SimpleText(facMember.rank and facMember.rank.name or "", "VoidUI.R22", w/2, h/2-2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end

		local actionPanel = panel:Add("Panel")
		actionPanel:Dock(RIGHT)
		actionPanel:SSetWide(225)
		actionPanel:MarginRight(30)
		actionPanel:MarginTops(10)

		-- We need to fake the color because button background dont work with transparent backgrounds
		local buttonBg = Color(28, 28, 28)

		local panelKick = actionPanel:Add("VoidUI.Button")
		panelKick:Dock(RIGHT)
		panelKick:SSetWide(70)
		panelKick:SetSmallerMedium()
		panelKick:SetColor(VoidUI.Colors.Red, buttonBg)
		panelKick:SetText(L"kick")
		panelKick:SetEnabled(canKick)

		panelKick.DoClick = function ()
			VoidFactions.Member:KickMember(facMember, playerNick)
		end

		local panelChangeRank = actionPanel:Add("VoidUI.Button")
		panelChangeRank:Dock(LEFT)
		panelChangeRank:SSetWide(140)
		panelChangeRank:SetSmallerMedium()
		panelChangeRank:SetColor(VoidUI.Colors.Orange, buttonBg)
		panelChangeRank:SetText(L"changeRank")
		panelChangeRank:SetEnabled(canPromote)

		panelChangeRank.DoClick = function ()
			local selector = vgui.Create("VoidUI.ItemSelect")
            selector:SetParent(self)

            local rankTbl = {}
            for k, rank in ipairs(member.rank:GetRanksBelow()) do
                rankTbl[rank.id] = rank.name
            end

            selector:InitItems(rankTbl, function (id, v)
				local rank = faction.ranks[id]
                VoidFactions.Member:SetMemberRank(facMember, playerNick, rank)
            end)
		end


        self.membersRows:AddRow(panel, 45)
	end
end

function PANEL:PerformLayout(w, h)
    self.container:MarginSides(45, self)
    self.container:MarginTop(10, self)
    self.container:MarginBottom(25, self)

    self.factionPanel:SSetTall(100, self)
    self.factionPanel:SDockPadding(20, 10, 10, 10, self)
    self.factionIcon:SSetWide(80, self)
    self.factionImage:SDockMargin(2, 2, 2, 2, self)

    self.factionPanelInner:MarginSides(25, self)
    self.factionPanelInner:MarginTops(15, self)

    self.factionText:SSetWide(245, self)
    self.factionRank:SSetWide(165, self)

    self.factionLeave:MarginTops(8, self)
    self.factionLeave:SSetWide(85, self)

    self.factionManage:MarginTops(8, self)
    self.factionManage:SSetWide(110, self)
    self.factionManage:MarginRight(10, self)

    self.membersPanel:MarginTop(15, self)

    self.membersHeader:SSetTall(50)
    self.membersHeader:SDockPadding(20, 20, 20, 20)
    self.membersContent:SDockMargin(25, 0, 25, 15)
    self.membersRows:MarginTop(25, self)

	self.inviteButton:MarginSides(340, self)
	self.inviteButton:MarginBottom(15, self)
	self.inviteButton:SSetTall(35, self)

end

vgui.Register("VoidFactions.UI.DynamicFactionDashboard", PANEL, "VoidUI.PanelContent")

-- Faction panel dashboard

local PANEL = {}

function PANEL:Init()
    local dashboard = self:Add("VoidFactions.UI.DynamicFactionDashboard")
    dashboard:Dock(FILL)
    dashboard:SetVisible(true)

    local manageFaction = self:Add("VoidFactions.UI.DynamicManageFactionsPanel")
    manageFaction:Dock(FILL)
    manageFaction:SetVisible(false)

    self.dashboard = dashboard
    self.manageFaction = manageFaction
end

function PANEL:ManageFaction()
    self.dashboard:SetVisible(false)
    self.manageFaction:SetVisible(true)
end

function PANEL:GoBack()
	self.dashboard:SetVisible(true)
	self.manageFaction:SetVisible(false)
end

vgui.Register("VoidFactions.UI.DynamicFactionPanel", PANEL, "VoidUI.PanelContent")

--addons/voidfactions-1.10.6/lua/voidfactions/vgui/static/faction_selection.lua:
local L = VoidFactions.Lang.GetPhrase
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
	self:MakePopup()
	self:SetDraggable(false)
	self:SetTitle("")
	self:ShowCloseButton(false)

	local factions = {}
	for k, v in pairs(VoidFactions.LoadedFactions) do
		if (v.isDefaultFaction) then
			factions[#factions + 1] = v
		end
	end

	local titlePanel = self:Add("Panel")
	titlePanel:Dock(TOP)
	titlePanel.Paint = function (s, w, h)
		draw.RoundedBox(10, 0, 0, w, h, VoidUI.Colors.Primary)

		draw.SimpleText(string.upper(L"chooseFaction"), "VoidUI.R32", w/2, h/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end

	self.titlePanel = titlePanel

	local cardContainer = self:Add("DHorizontalScroller")
	cardContainer:Dock(FILL)
	cardContainer:MarginTop(40)
	cardContainer:MarginBottom(35)
	cardContainer:SetOverlap(-sc(30))

	cardContainer.btnLeft.Paint = function (self, w, h)
		local paintColor = self:IsHovered() and VoidUI.Colors.GrayText or VoidUI.Colors.InputLight
		draw.RoundedBox(6, 0, 0, w, h, paintColor)

		draw.SimpleText("<", "VoidUI.B26", w/2, h/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end

	cardContainer.btnRight.Paint = function (self, w, h)
		local paintColor = self:IsHovered() and VoidUI.Colors.GrayText or VoidUI.Colors.InputLight
		draw.RoundedBox(6, 0, 0, w, h, paintColor)

		draw.SimpleText(">", "VoidUI.B26", w/2, h/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end

	local origPerformLayout = cardContainer.PerformLayout
	function cardContainer:PerformLayout(w, h)
		origPerformLayout(self, w, h)

		self.btnLeft:SSetSize(30, 30)
		self.btnRight:SSetSize(30, 30)

		self.btnLeft.y = self.btnLeft.y - 15
		self.btnRight.y = self.btnRight.y - 15
		self.btnRight.x = self.btnRight.x - 15
	end

	local factionCount = #factions
	if (factionCount == 2) then
		-- Ugly workaround
		cardContainer:MarginLeft(200)
	end

	local selectButton = self:Add("VoidUI.Button")

	self.selectedFaction = nil

	if (factionCount == 0) then
		VoidLib.Notify(L"error", L"noDefaultFactions", VoidUI.Colors.Red, 20)
		self:Remove()
		return
	end

	-- Select automatically the first one
	if (factionCount == 1) then
		net.Start("VoidFactions.FactionSelection.Select")
			net.WriteUInt(factions[1].id, 20)
		net.SendToServer()
		self:Remove()
	end

	for _, faction in pairs(factions) do
		local card = cardContainer:Add("DButton")
		card:SetText("")
		card:SetWide(356)

		local iconMat = nil
		VoidLib.FetchImage(faction.logo or "none", function (mat)
			if (!mat) then return end

			iconMat = mat
		end)

		local logoSize = sc(215)

		local facSelectedColor = Color(faction.color.r, faction.color.g, faction.color.b, 60)
		local facHoveredColor = Color(faction.color.r, faction.color.g, faction.color.b, 1)

		local this = self

		local wrappedDesc = VoidUI.TextWrap(faction.description, "VoidUI.R20", sc(260))

		card.Paint = function (self, w, h)
			draw.RoundedBox(8, 0, 0, w, h, faction.color)
			draw.RoundedBox(8, 3, 3, w-6, h-6, VoidUI.Colors.Background)
			draw.RoundedBox(8, 3, 3, w-6, h-6, (this.selectedFaction == faction and facSelectedColor) or (self:IsHovered() and facHoveredColor) or VoidUI.Colors.Primary)

			draw.SimpleText(faction.name, "VoidUI.R32", w/2, sc(15), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)

			if (iconMat) then
				surface.SetDrawColor(VoidUI.Colors.White)
				surface.SetMaterial(iconMat)
				surface.DrawTexturedRect(w/2-logoSize/2, sc(65), logoSize, logoSize)
			end

			draw.DrawText(wrappedDesc, "VoidUI.R24", w/2, sc(315), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

		end

		card.DoClick = function ()
			this.selectedFaction = faction
			selectButton:SetEnabled(true)
		end

		cardContainer:AddPanel(card)
	end

	selectButton:Dock(BOTTOM)

	selectButton:MarginBottom(25)
	selectButton:MarginSides(460)
	selectButton:SSetTall(60)

	selectButton.rounding = 32

	selectButton:SetText(L"select")

	selectButton:SetColor(VoidUI.Colors.Green, VoidUI.Colors.Background)
	selectButton:SetEnabled(false)

	selectButton.DoClick = function ()
		-- Send data to server
		net.Start("VoidFactions.FactionSelection.Select")
			net.WriteUInt(self.selectedFaction.id, 20)
		net.SendToServer()
		self:Remove()
	end
end

function PANEL:PerformLayout(w, h)
	self:SDockPadding(35, 35, 35, 20)
	self.titlePanel:SSetTall(60)
end

function PANEL:Paint(w, h)
	surface.SetDrawColor(VoidUI.Colors.Background)
	surface.DrawRect(0, 0, w, h)
end

vgui.Register("VoidFactions.UI.FactionSelection", PANEL, "DFrame")

--lua/autorun/wiltos_animbase_loader.lua:

--[[-------------------------------------------------------------------
	Animation Base:
		Create your own animations, mount animations from other games, and more!
			Powered by
						  _ _ _    ___  ____  
				__      _(_) | |_ / _ \/ ___| 
				\ \ /\ / / | | __| | | \___ \ 
				 \ V  V /| | | |_| |_| |___) |
				  \_/\_/ |_|_|\__|\___/|____/ 
											  
 _____         _                 _             _           
|_   _|__  ___| |__  _ __   ___ | | ___   __ _(_) ___  ___ 
  | |/ _ \/ __| '_ \| '_ \ / _ \| |/ _ \ / _` | |/ _ \/ __|
  | |  __/ (__| | | | | | | (_) | | (_) | (_| | |  __/\__ \
  |_|\___|\___|_| |_|_| |_|\___/|_|\___/ \__, |_|\___||___/
                                         |___/             
-------------------------------------------------------------------]]--[[
							  
	Lua Developer: King David
	Contact: http://steamcommunity.com/groups/wiltostech
		
----------------------------------------]]--


if SERVER then
	AddCSLuaFile( "wos/anim_extension/loader/loader.lua" )
end

include( "wos/anim_extension/loader/loader.lua" )
--lua/wos/anim_extension/extensions/wos_customtaunt.lua:
--[[-------------------------------------------------------------------
	wiltOS Animation Extension Register:
		Prints some feedback saying the Animation Extension successfully loaded.
			Powered by
						  _ _ _    ___  ____  
				__      _(_) | |_ / _ \/ ___| 
				\ \ /\ / / | | __| | | \___ \ 
				 \ V  V /| | | |_| |_| |___) |
				  \_/\_/ |_|_|\__|\___/|____/ 
											  
 _____         _                 _             _           
|_   _|__  ___| |__  _ __   ___ | | ___   __ _(_) ___  ___ 
  | |/ _ \/ __| '_ \| '_ \ / _ \| |/ _ \ / _` | |/ _ \/ __|
  | |  __/ (__| | | | | | | (_) | | (_) | (_| | |  __/\__ \
  |_|\___|\___|_| |_|_| |_|\___/|_|\___/ \__, |_|\___||___/
                                         |___/             
-------------------------------------------------------------------]]--[[
							  
	Lua Developer: King David
	Contact: http://steamcommunity.com/groups/wiltostech
		
----------------------------------------]]--

wOS.AnimExtension.Mounted[ "Custom Taunt" ] = true
MsgC( Color( 255, 255, 255 ), "[wOS] Successfully mounted animation extension: Custom Taunt\n" )
--lua/wos/anim_extension/core/sh_prone_support.lua:
--[[-------------------------------------------------------------------
	wiltOS Prone Compatability:
		Fixes hold types for Prone Mod
			Powered by
						  _ _ _    ___  ____  
				__      _(_) | |_ / _ \/ ___| 
				\ \ /\ / / | | __| | | \___ \ 
				 \ V  V /| | | |_| |_| |___) |
				  \_/\_/ |_|_|\__|\___/|____/ 
											  
 _____         _                 _             _           
|_   _|__  ___| |__  _ __   ___ | | ___   __ _(_) ___  ___ 
  | |/ _ \/ __| '_ \| '_ \ / _ \| |/ _ \ / _` | |/ _ \/ __|
  | |  __/ (__| | | | | | | (_) | | (_) | (_| | |  __/\__ \
  |_|\___|\___|_| |_|_| |_|\___/|_|\___/ \__, |_|\___||___/
                                         |___/             
-------------------------------------------------------------------]]--[[
							  
	Lua Developer: King David
	Contact: http://steamcommunity.com/groups/wiltostech
		
----------------------------------------]]--

wOS.AnimExtension.HoldTypes = wOS.AnimExtension.HoldTypes or {}

hook.Add("prone.Initialized", "wOS.AnimExtension.AddProneTypes", function()
	for holdtype, data in pairs( wOS.AnimExtension.HoldTypes ) do
		local iseq = prone.GetIdleAnimation( data.BaseHoldType ) 
		local mseq = prone.GetMovingAnimation( data.BaseHoldType ) 
		prone.AddNewHoldTypeAnimation( holdtype, mseq, iseq )
	end
end )


--lua/wos/dynabase/loader/loader.lua:
return gluapack()()
--lua/wos/dynabase/core/sh_mounting.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/debug.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/classes/controller.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/sidebar.lua:
local PANEL = {}

XeninUI:CreateFont("Xenin.Configurator.Admin.Sidebar", 20)

function PANEL:Init()
  self.Tabs = {}
  self.Panels = {}

  self:DockPadding(5, 8, 16, 16)

end

function PANEL:SetActiveByName(name)
  for i, v in ipairs(self.Tabs) do
    if (v.Name != name) then continue end

    self:SetActive(v.Id)
    break
  end
end

function PANEL:GetActivePanel()
  return self.Panels[self.Active]
end

function PANEL:SetActive(id)
  local active = self.Active
  self.Active = id

  local tab = self.Tabs[active]
  local pnl = self.Panels[active]
  if IsValid(tab) then
    tab:OnCursorExited()
  end
  if IsValid(pnl) then
    pnl:SetVisible(false)
  end

  tab = self.Tabs[id]
  pnl = self.Panels[id]
  if IsValid(tab) then
    tab:OnCursorEntered()
  end
  if IsValid(pnl) then
    pnl:SetVisible(true)
  end
end

function PANEL:AddTab(name, icon, color, panel, script, rawData)
  local btn = self:Add("DButton")
  btn:Dock(TOP)
  btn:DockMargin(0, 0, 0, -4)
  btn:SetText("")
  btn:SetTall(42)
  btn.Name = name
  btn.Color = color
  btn.TextColor = Color(208, 208, 208)
  XeninUI:DownloadIcon(btn, icon)
  btn.Paint = function(pnl, w, h)
    XeninUI:DrawIcon(11, 11, h - 22, h - 22, pnl, color, color)

    draw.SimpleText(pnl.Name, "Xenin.Configurator.Admin.Sidebar", h, h / 2, pnl.TextColor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
  end
  btn.OnCursorEntered = function(pnl)
    pnl:LerpColor("TextColor", pnl.Color)
  end
  btn.OnCursorExited = function(pnl)
    if (self.Active == pnl.Id) then return end

    pnl:LerpColor("TextColor", Color(208, 208, 208))
  end
  btn.DoClick = function(pnl)
    self:SetActive(pnl.Id)
  end

  local panel = self:GetParent():Add(panel)
  panel:Dock(FILL)
  panel:SetVisible(false)
  if panel.SetScript then
    panel:SetScript(script)
  end
  if panel.SetData then
    panel:SetData(rawData)
  end

  local id = table.insert(self.Tabs, btn)
  self.Tabs[id].Id = id
  self.Panels[id] = panel
  self.Panels[id].Id = id
end

function PANEL:Paint(w, h)
  XeninUI:DrawRoundedBoxEx(6, 0, 0, w, h, XeninUI.Theme.Navbar, false, false, true, false)
end

vgui.Register("Xenin.Configurator.Admin.Sidebar", PANEL)

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/top.lua:
local PANEL = {}

XeninUI:CreateFont("Xenin.Configurator.Admin.Title", 26)
XeninUI:CreateFont("Xenin.Configurator.Admin.Subtitle", 14)

function PANEL:Init()
	self.CloseBtn = self:Add("DButton")
	self.CloseBtn:Dock(RIGHT)
	self.CloseBtn:SetText("")
	self.CloseBtn.CloseButton = Color(100, 100, 100)
	self.CloseBtn.Alpha = 0
	self.CloseBtn.DoClick = function(pnl)
		self:GetParent():Remove()
	end
	self.CloseBtn.Paint = function(pnl, w, h)
		draw.RoundedBox(h / 2, 0, 0, w, h, ColorAlpha(XeninUI.Theme.Red, pnl.Alpha))

		surface.SetDrawColor(pnl.CloseButton)
		surface.SetMaterial(XeninUI.Materials.CloseButton)
		surface.DrawTexturedRect(12, 12, w - 24, h - 24)
	end
	self.CloseBtn.OnCursorEntered = function(pnl)
		pnl:Lerp("Alpha", 255)
		pnl:LerpColor("CloseButton", Color(255, 255, 255))
	end
	self.CloseBtn.OnCursorExited = function(pnl)
		pnl:Lerp("Alpha", 0)
		pnl:LerpColor("CloseButton", Color(100, 100, 100))
	end

	self.Name = self:Add("DPanel")
	self.Name:Dock(LEFT)
	self.Name.Paint = function(pnl, w, h)
		local text = self.Text
		if isstring(text) then
			XeninUI:DrawShadowText(text, "Xenin.Configurator.Admin.Title", 0, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, 2, 150)
		elseif istable(text) then
			XeninUI:DualText({
				text[1],
				"Xenin.Configurator.Admin.Title",
				color_white,
				TEXT_ALIGN_LEFT,
				2,
				150
			}, {
				text[2],
				"Xenin.Configurator.Admin.Subtitle",
				Color(145, 145, 145),
				TEXT_ALIGN_LEFT,
				0,
				0
			}, 0, -2, w, h)
		end
	end

	self.Search = self:Add("Xenin.Configurator.Admin.SearchBar")
	self.Search:Dock(FILL)
	self.Search:DockMargin(36, 0, 250, 0)
	self.Search:SetPlaceholder("Search for anything")
	self.Search:SetIcon(XeninUI.Materials.Search, true)
end

function PANEL:SetText(text)
	self.Text = text
end

function PANEL:PerformLayout(w, h)
	self.CloseBtn:SetWide(h)

	local text = self.Text
	local nW
	if istable(text) then
		surface.SetFont("Xenin.Configurator.Admin.Title")
		local tW = surface.GetTextSize(text[1])
		surface.SetFont("Xenin.Configurator.Admin.Subtitle")
		local sW = surface.GetTextSize(text[2])
		nW = math.max(tW, sW)
	else
		surface.SetFont("Xenin.Configurator.Admin.Title")
		local tW = surface.GetTextSize(text)
		nW = math.max(tW, 170)
	end

	self.Name:SetWide(nW)
end

function PANEL:SetScript(script, ctr)
	self.script = script
	self.ctr = ctr

	self.Search:SetScript(script, ctr)
end

vgui.Register("Xenin.Configurator.Admin.Top", PANEL)

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/entities/row_settings.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/players/controller.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/players/notification.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/colorpicker.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/combobox.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/slider.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/core/ui/main.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/core/ui/main.lua:
local PANEL = {}

XeninUI:CreateFont("Xenin.Framework.Load", 48)
XeninUI:CreateFont("Xenin.Framework.Tab", 20)

function PANEL:Init()
  self:SetSize(XeninUI.Frame.Width, XeninUI.Frame.Height)
  self:Center()
  self:SetTitle("Xenin Framework - Admin")
  self:MakePopup()

  self:AddHook("Xenin.Framework.ReceivedScripts", "Xenin.Framework", function(self, scripts)
    self:CreateSidebar()
  end)

  XeninUI.ScriptsNetwork:requestScripts()
end

function PANEL:CreateCategory(name, col)
  if col == nil then col = Color(64, 64, 64)
  end
  local panel = self.Sidebar.Scroll:Add("DPanel")
  panel:Dock(TOP)
  panel:SetTall(draw.GetFontHeight("Xenin.Framework.Tab") + 16)
  panel.Paint = function(pnl, w, h)
    draw.SimpleText(name, "Xenin.Framework.Tab", w / 2, h / 2, Color(212, 212, 212), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

    surface.SetDrawColor(col)
    if (name != "1st party") then
      surface.DrawRect(0, 0, w, 1)
    end
    surface.DrawRect(0, h - 1, w, 1)
  end
end

function PANEL:CreateSidebar(tbl)
  self.Sidebar = self:Add("XeninUI.SidebarV2")
  self.Sidebar:Dock(LEFT)
  self.Sidebar:SetBody(self)

  local scripts = XeninUI.Scripts:getAll()


  for i, v in pairs(scripts) do
    self.Sidebar:CreatePanel(v.name, v.desc, "Xenin.Framework.Tab", v.icon, v)
  end





  self.Sidebar:SetActive(1)
end

function PANEL:PerformLayout(w, h)
  self.BaseClass.PerformLayout(self, w, h)

  if (!IsValid(self.Sidebar)) then return end

  local sw = 0
  for i, v in ipairs(self.Sidebar.Sidebar) do
    surface.SetFont("XeninUI.SidebarV2.Name")
    local nameTw = surface.GetTextSize(v.Name or "")
    surface.SetFont("XeninUI.SidebarV2.Desc")
    local descTw = surface.GetTextSize(v.Desc or "")

    local tw = math.max(nameTw, descTw) + 8
    if v.Icon then
      tw = tw + 68
    end

    sw = math.max(sw, tw)
  end

  self.Sidebar:SetWide(math.max(140, sw))
end

function PANEL:Paint(w, h)
  self.BaseClass.Paint(self, w, h)

  if self.Sidebar then return end

  XeninUI:DrawLoadingCircle(w / 2, h / 2 + 18, h / 4)
  XeninUI:DrawShadowText("Loading all addons", "Xenin.Framework.Load", w / 2, h / 2 - h / 8, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM, 1, 150)
end

vgui.Register("Xenin.Framework", PANEL, "XeninUI.Frame")

concommand.Add("xenin_admin", function()
  if (!XeninUI.Permissions:canAccessFramework(LocalPlayer())) then
    chat.AddText(XeninUI.Theme.Red, "[Xenin] ", color_white, "You don't have the required authority to do this")

    return
  end

  vgui.Create("Xenin.Framework")
end)

--addons/xenin_framework/lua/xeninui/libs/units/classes/assert.lua:
do
  local _class_0
  local _base_0 = {
    __name = "XeninUI.Units.Assert",
    isType = function(self, name, errMsg)
      local valType = type(self.val)
      assert(valType == name, errMsg or "Expected \"" .. tostring(self.val) .. "\"\" type to be \"" .. tostring(name) .. "\", but it is type \"" .. tostring(valType) .. "\"")

      return self
    end,
    isTrue = function(self, errMsg)
      self:isType("boolean")
      assert(self.val == true, errMsg or "Boolean is not true")

      return self
    end,
    isFalse = function(self, errMsg)
      self:isType("boolean")
      assert(!self.val, errMsg or "Boolean is not false")

      return self
    end,
    isNil = function(self, errMsg)
      assert(self.val == nil, errMsg or "Excepted nil, got \"" .. tostring(self.val) .. "\" of type \"" .. tostring(type(self.val)) .. "\"")

      return self
    end,
    isNotNil = function(self, errMsg)
      assert(self.val != nil, errMsg or "Expected not nil, but got nil")

      return self
    end,
    isNull = function(self, errMsg)
      assert(self.val == NULL, errMsg or "Expected NULL, but got \"" .. tostring(type(self.val)) .. "\"")

      return self
    end,
    isNotNull = function(self, errMsg)
      assert(self.val != NULL, errMsg or "Expected not NULL, but got NULL\"")

      return self
    end,
    isPlayer = function(self)
      assert(IsValid(self.val), "Player entity is not valid")
      assert(self.val:IsPlayer(), "This entity is not a player")

      return self
    end,
    shouldEqual = function(self, compare, errMsg)
      assert(self.val == compare, errMsg or "Expected \"" .. tostring(self.val) .. "\" of type \"" .. tostring(type(self.val)) .. "\" to equal \"" .. tostring(compare) .. "\" of type \"" .. tostring(type(compare)) .. "\", it does not")

      return self
    end,
    shouldNotEqual = function(self, compare, errMsg)
      assert(self.val != compare, errMsg or "Expected \"" .. tostring(self.val) .. "\" of type \"" .. tostring(type(self.val)) .. "\" to not equal \"" .. tostring(compare) .. "\" of type \"" .. tostring(type(compare)) .. "\", it does")

      return self
    end,
    __type = function(self)
      return self.__name
    end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self, val, args)
      self.val = val
      self.args = args
    end,
    __base = _base_0
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  XeninUI.Units.Assert = _class_0
end

--addons/xenin_framework/lua/xeninui/libs/units/classes/test.lua:
return gluapack()()
--addons/xenin-coinflip/lua/coinflip/configuration/config.lua:
local cfg = Coinflip:CreateConfig()
-- This is how fast the coin should be spinning at the start. 
-- I recommend 18, but you shouldn't really put it below 12.
cfg:SetSpeed(18)

-- What colour should the prefix be?
-- You can use Color(r, g, b)
cfg:SetChatPrefixColor(XeninUI.Theme.Accent)

-- What text should the prefix for chat messages?
cfg:SetChatPrefix("[YAZI-TURA] ")

-- What is the minimum amount someone can bet?
cfg:SetMinBet(1000)

-- What is the maximum amount someone can bet?
cfg:SetMaxBet(2000000)

-- How many coinflips can a user have active at once?
cfg:SetMaxCoinflips(3)

-- How long must a user wait before they can create another coinflip?
-- This exists to prevent spamming of coinflips creation & deletion, which will cause notification spam
-- If you don't want a cooldown, set it to 0
-- This accepts a number in seconds
cfg:SetCooldownBetweenCreation(1.25)

-- Should the system ban people who spam create & then immediately delete coinflips?
-- This is to prevent spamming of notifications
cfg:SetBanSpammers(false)

-- What should it say in the top left of the menu?
cfg:SetMenuTitle("Yazı-Tura")

-- What text should be in the overhead of the NPC?
cfg:SetNPCTitle("YaziTura NPC")

-- What model should the NPC have?
cfg:SetNPCModel("models/Barney.mdl")

-- What icon should there be in the overhead of the NPC besides the text?
-- Example: Material("xenin/coinflip/icon.png", "smooth")
-- By default it's set to nil, which means it wont have an icon.
cfg:SetNPCIcon(nil)

-- What color should the NPC overhead have as an outline?
cfg:SetNPCOutlineColor(Color(205, 50, 50))

-- Disable the creation annoucement?
cfg:SetCreationAnnouncementDisabled(false)

-- Disable the win announcement?
cfg:SetWinAnnouncementDisabled(false)

-- Seed regularly
-- Changes how the coinflip deals with randomness.
-- Not really more random, just a different way
cfg:SetSeedRegularly(false)

-- What currency should coinflips pre v2 be?
-- If you have never had a coinflip in your database before v2 this will do literally nothing.
-- If not, make sure it's the right currency.
cfg:SetOldCurrency("DarkRP")

-- What currency?
-- Supports:
-- DarkRP
-- Pointshop
-- Pointshop 2
------
-- You can make this a table, i.e { "DarkRP", "Pointshop" } to have multiple currencies
-- To make it a single currency, just have it "DarkRP"
cfg:SetCurrency("DarkRP")

/*
	Set the language!
	You can find the languages you can use here: https://gitlab.com/sleeppyy/xenin-languages/tree/master/coinflip
	You don't need to write the .json part

	If you want to add your own language you can
	1. Create a pull request (create new file) that will be uploaded to that website with the language
	2. Use a second argument in the :SetLanguage function

	How to do now #2. This will set the language without needing to use the version from a website. 
	cfg:SetLanguage("french", [[
		{
			"phrases": {
				"ui": {
					
				}
			}
		}
	]])

	So for example
	cfg:SetLanguage("russian", [[
		-- copy the contents of english.json and translate it here
	]])

	It's recommended you use method #1, but you can use method #2 till the file you upload have been approved
*/

cfg:SetLanguage("Turkish", [[
	{
	"phrases": {
	  "ui": {
		"tabs": {
		  "standalone": {
			"flips": "Yazı Tura",
			"history": "Geçmiş",
			"stats": "İstatistikler"
		  },
		  "f4": {
			"flips": "YAZI TURA",
			"history": "GEÇMİŞ",
			"stats": "İSTATİSTİKLER"
		  }
		},
		"flips": {
		  "title": ":flips: aktif yazı turalar",
		  "createFlip": "Yazı tura oluştur",
		  "maxFlipsReached": "En fazla :number: aktif yazı tura oluşturabilirsiniz!",
		  "row": {
			"join": "Katıl",
			"delete": "Sil",
			"cantAfford": "Bu yazı turaya katılmak için yeterli paranız yok! Gerekli miktar: :number:"
		  },
		  "create": {
			"title": "Yazı tura oluştur",
			"howMuch": "Ne kadar bahis yapmak istiyorsunuz?",
			"currency": "Para Birimi",
			"announceCreation": "Oluşturmayı duyur?",
			"announceWinner": "Kazananı duyur?",
			"timeLimit": {
			  "msg": "Zaman sınırı",
			  "time": ":number: dakika"
			},
			"create": "Oluştur",
			"no": "HAYIR",
			"yes": "EVET"
		  },
		  "game": {
			 "countdown": "Yazı Tura - atış :number: saniye içinde",
			 "flipping": "Yazı Tura - atılıyor",
			 "blue": "Mavi",
			 "red": "Kırmızı"
		  }
		},
		"history": {
		  "title": "Son :flips: yazı turalar",
		  "won": "KAZANDI",
		  "lost": "KAYBETTİ"
		}
	  },
	  "chat": {
		"done": ":winner:, :loser: karşısında :money: kazanarak yazı turayı kazandı!",
		"created": ":creator:, :money: değerinde bir yazı tura oluşturdu.",
		"createdNotification": "ID :id: ile yazı tura oluşturuldu.",
		"won": "Bir yazı turada :money: kazandınız!",
		"deleted": {
		  "timeLimit": "ID :id: olan yazı turanız zaman sınırına ulaştı. Size :money: iade edildi.",
		  "user": "ID :id: olan yazı turanızı sildiniz. Size :money: iade edildi."
		}
	  }
	}
	}
  ]]
  )
  

-- What text messages should work as a way to open up the flip menu?
-- If you don't want any chat commands you just remove every command
cfg:AddChatCommand("!flip")
cfg:AddChatCommand("/flip")
cfg:AddChatCommand("!flips")
cfg:AddChatCommand("/flips")
cfg:AddChatCommand("!createflip")
cfg:AddChatCommand("/createflip")
cfg:AddChatCommand("!createflips")
cfg:AddChatCommand("/createflips")
cfg:AddChatCommand("!coinflip")
cfg:AddChatCommand("/coinflip")
cfg:AddChatCommand("!coinflips")
cfg:AddChatCommand("/coinflips")
cfg:AddChatCommand("!cf")
cfg:AddChatCommand("/cf")
cfg:AddChatCommand("/yazitura")
cfg:AddChatCommand("!yazitura")
cfg:AddChatCommand("/yazıtura")
cfg:AddChatCommand("!yazıtura")
--addons/xenin-coinflip/lua/coinflip/ui/games.lua:
return gluapack()()
--addons/xenin-coinflip/lua/coinflip/ui/stats.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/inventory/configuration/items/zgo2_baggy.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(1)
ITEM:SetModel("models/zerochain/props_growop2/zgo2_baggy.mdl")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data

	if not zgo2.Plant.IsValid(data.WeedID) then
		zclib.Notify(ply, zgo2.language["InvalidPlantData"], 1)
		SafeRemoveEntity(ent)
		return
	end

	if zgo2.Baggy.ReachedSpawnLimit(ply) then
		zclib.Notify(ply, zgo2.language[ "Spawnlimit" ], 1)
		zclib.Inventory.Pickup(ply,ent,ent:GetClass())
		//SafeRemoveEntity(ent)
		return false
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

	ent:SetWeedID(zgo2.Plant.GetListID(data.WeedID))
	ent:SetWeedAmount(data.WeedAmount)
	ent:SetWeedTHC(data.WeedTHC or 50)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

	zclib.Player.SetOwner(ent, ply)
end)

function ITEM:GetData(ent)
	return {
		WeedID = zgo2.Plant.GetID(ent:GetWeedID()),
		WeedAmount = math.Round(ent:GetWeedAmount()),
		WeedTHC = math.Round(ent:GetWeedTHC())
	}
end

function ITEM:GetVisualAmount(item)
	return item.data.WeedAmount
end

function ITEM:GetName(item)
	local ent = isentity(item)
	local WeedID = ent and item:GetWeedID() or item.data.WeedID
	local WeedTHC = ent and item:GetWeedTHC() or ( item.data.WeedTHC or 50 )

	local WeedData = zgo2.Plant.GetData(WeedID)
	if not WeedData then return "Baggy" end

	return zgo2.Plant.GetName(WeedID) .. " THC: " .. WeedTHC .. "%"
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

function ITEM:GetDisplayName(item)
    return self:GetName(item)
end

local ang = Angle(0, 45, 0)
function ITEM:GetCameraModifiers(tbl)
    return {
        FOV = 30,
        X = 0,
        Y = 0,
        Z = 50,
        Angles = ang,
        Pos = vector_origin
    }
end

function ITEM:GetClientsideModel(tbl, mdlPanel)
	local WeedData = zgo2.Plant.GetData(tbl.data.WeedID)
	if not WeedData then return end
	zgo2.Plant.UpdateMaterial(mdlPanel.Entity, WeedData)
end

ITEM:Register("zgo2_baggy")

--addons/zeros_growop2_v1.6.1/lua/inventory/configuration/items/zgo2_joint_ent.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/inventory/configuration/items/zgo2_weedblock.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/inventory/configuration/items/zrms_storagecrate.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/inventory/configuration/items/zrms_storagecrate.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(1)
ITEM:SetModel("models/Zerochain/props_mining/zrms_storagecrate_closed.mdl")
//ITEM:SetDescription("Used to store and sell metal bars.")

ITEM:SetDescription(function(self, tbl)
	local data = tbl.data
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	local desc = ""

	if data.Iron and data.Iron > 0 then
		desc = desc .. "Iron: " .. tostring(data.Iron)
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if data.Bronze and data.Bronze > 0 then
		desc = desc .. " | Bronze: " .. tostring(data.Bronze)
	end

	if data.Silver and data.Silver > 0 then
		desc = desc .. " | Silver: " .. tostring(data.Silver)
	end

	if data.Gold and data.Gold > 0 then
		desc = desc .. " | Gold: " .. tostring(data.Gold)
	end

	return desc
end)


ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data

	ent:SetbIron(data.Iron)
	ent:SetbBronze(data.Bronze)
	ent:SetbSilver(data.Silver)
	ent:SetbGold(data.Gold)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	zrmine.f.SetOwner(ent, ply)

	ent:SpawnFromInventory()
end)

function ITEM:GetData(ent)
	return {
		Iron = ent:GetbIron(),
		Bronze = ent:GetbBronze(),
		Silver = ent:GetbSilver(),
		Gold = ent:GetbGold(),
	}
end

function ITEM:GetDisplayName(item)
	return self:GetName(item)
end

function ITEM:GetName(item)
	local name = "Storage Crate"

	return name
end

function ITEM:GetCameraModifiers(tbl)
	return {
		FOV = 40,
		X = 0,
		Y = -22,
		Z = 25,
		Angles = Angle(0, -190, 0),
		Pos = Vector(0, 0, -1)
	}
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ITEM:Register("zrms_storagecrate")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_yeastbeast_1.1.7/lua/inventory/configuration/items/zyb_jarcrate.lua:
local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(1)
ITEM:SetModel("models/zerochain/props_yeastbeast/yb_jarcrate_full.mdl")
ITEM:SetDescription("A crate with Moonshine jars.")

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data
	ent:SetJarCount(data.JarCount)
	zyb.f.SetOwner(ent, ply)
end)

/*
function ITEM:CanStack(newItem, invItem)
	return newItem.data.JarCount == invItem.data.JarCount
end
*/

function ITEM:OnPickup(ply, ent)
	if (not IsValid(ent)) then return end
	if ent:GetJarCount() <= 0 then
		return
	end

	local info = {
		ent = self:GetEntityClass(ent),
		dropEnt = self:GetDropEntityClass(ent),
		amount = self:GetEntityAmount(ent),
		data = self:GetData(ent)
	}

	self:Pickup(ply, ent, info)

	return true
end

function ITEM:GetData(ent)
	return {
		JarCount = ent:GetJarCount(),
	}
end

function ITEM:GetVisualAmount(item)
	return item.data.JarCount
end


function ITEM:GetDisplayName(item)
	return self:GetName(item)
end

function ITEM:GetName(item)
	return "Moonshine Crate"
end

function ITEM:GetCameraModifiers(tbl)
	return {
		FOV = 40,
		X = 0,
		Y = -22,
		Z = 25,
		Angles = Angle(0, -190, 0),
		Pos = Vector(0, 0, -1)
	}
end
/*
function ITEM:GetClientsideModel(tbl, mdlPanel)

	local genValue = tbl.data.GenValue
	local genType = tbl.data.GenType
	local genclass = tbl.data.GenClass

	if genType ~= 0 then
		mdlPanel.Entity:SetBodygroup(0, 1)
	end

	if genType == 1 then
		// Check if sample is from player and color the liquid red
		if genclass and genclass == "player" then
			mdlPanel.Entity:SetSubMaterial(0, "zerochain/props_bloodlab/flask/zyb_flask_liquid_bloodsample")
		end
	elseif genType == 2 then
		local vaccine_data = zyb.config.Vaccines[genValue]
		if vaccine_data then
			if vaccine_data.isvirus == true then

				mdlPanel.Entity:SetSubMaterial(0, vaccine_data.mat)
			else
				mdlPanel.Entity:SetSubMaterial(0, "zerochain/props_bloodlab/flask/zyb_flask_liquid_abillity_diff")
			end
		end
	elseif genType == 3 then
		mdlPanel.Entity:SetSubMaterial(0, "zerochain/props_bloodlab/flask/zyb_flask_liquid_cure_diff")
	end
end
*/
ITEM:Register("zyb_jarcrate")

--addons/xenin-inventory/lua/inventory/importer/importer.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/importer/importers/itemstore.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/ui/admin/frame.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local PANEL = {}

function PANEL:Init()
  if IsValid(XeninInventory.AdminFrame) then
    XeninInventory.AdminFrame:Remove()
  end

  XeninInventory.AdminFrame = self

  self.topNavbar = vgui.Create("Panel", self)
  self.topNavbar:Dock(TOP)

  self.navbar = vgui.Create("XeninUI.Navbar", self.topNavbar)
  self.navbar:Dock(FILL)
  self.navbar:SetBody(self)
  self.navbar:AddTab(XeninInventory:GetPhrase("Admin.Tabs.Management"), "XeninInventory.Admin.Management")
  self.navbar:AddTab("IMPORTER", "XeninInventory.Admin.Importer")

  self.navbar:SetActive(XeninInventory:GetPhrase("Admin.Tabs.Management"))
end

function PANEL:PerformLayout(w, h)
  self.BaseClass.PerformLayout(self, w, h)

  self.topNavbar:SetTall(56)
end
vgui.Register("XeninInventory.Admin", PANEL, "XeninUI.Frame")

concommand.Add("inventory_admin", function()
  local inv = LocalPlayer():XeninInventory()
  if (!XeninInventory:IsAdmin(LocalPlayer())) then
    inv:Message(XeninInventory:GetPhrase("Admin.Tabs.NotAdmin"))

    return
  end

  local frame = vgui.Create("XeninInventory.Admin")
  local width = math.min(ScrW(), XeninUI.Frame.Width)
  local height = math.min(ScrH(), XeninUI.Frame.Height + 100)
  frame:SetSize(width, height)
  frame:Center()
  frame:MakePopup()
  frame:SetTitle(XeninInventory:GetPhrase("Admin.Title"))
end)

--addons/yet_another_warn_system/lua/yaws/config/sh_config.lua:
---------------------------------------------------------------------------------------------------
-- __     __  _                          _   _                __          __              _                _____           _
-- \ \   / / | |       /\               | | | |               \ \        / /             (_)              / ____|         | |
--  \ \_/ /__| |_     /  \   _ __   ___ | |_| |__   ___ _ __   \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _  | (___  _   _ ___| |_ ___ _ __ ___
--   \   / _ \ __|   / /\ \ | '_ \ / _ \| __| '_ \ / _ \ '__|   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |  \___ \| | | / __| __/ _ \ '_ ` _ \
--    | |  __/ |_   / ____ \| | | | (_) | |_| | | |  __/ |       \  /\  / (_| | |  | | | | | | | | (_| |  ____) | |_| \__ \ ||  __/ | | | | |
--    |_|\___|\__| /_/    \_\_| |_|\___/ \__|_| |_|\___|_|        \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, | |_____/ \__, |___/\__\___|_| |_| |_|
--                                                                                                 __/ |          __/ |
--                                                                                                |___/          |___/
---------------------------------------------------------------------------------------------------
-- Welcome to the configruation file for Yet Another Warning System!
-- This file is for anything that is somewhat secure, or that the addon requires immedietely without loading the in-game config.
-- The config you will be editing mostly is in-game, and can be accessed from the !warn menu inside the Admin tab.
--
-- Of course, if you require help or guidance, making a support ticket or joining my discord server will allow you to ask
-- any questions you might have, and allow me to answer them. If you end up enjoying the addon, please make a review. It helps
-- me a lot more than you might think. And if you hate it, make a ticket and tell me why, I might be able to help you out!
--
-- Thanks!
---------------------------------------------------------------------------------------------------


-- This is a list of usergroups or SteamID(64)'s that will always have full permissions.
-- Anyone in this list will always have full access to the addon, regardless of their permissions set inside the addon.
-- Accepts SteamID's, SteamID64's and usergroups.
YAWS.ManualConfig.FullPerms['superadmin'] = true
YAWS.ManualConfig.FullPerms['STEAM_0:1:80376292'] = true
YAWS.ManualConfig.FullPerms['76561198121018313'] = true


-- This list is of usergroups or SteamID(64)'s that can never be warned.
-- Anyone in this list can never be given a warning, for any reason or any point count.
-- Accepts SteamID's, SteamID64's and usergroups.
YAWS.ManualConfig.Immunes['superadmin'] = true
YAWS.ManualConfig.Immunes['STEAM_0:1:80376292'] = true
YAWS.ManualConfig.Immunes['76561198121018313'] = true


-- The command to access the UI in-game. Set this to whatever you want to type into chat.
-- Default: !warn
YAWS.ManualConfig.Command = "!warn"


-- The amount of items shown in pages. The reason this is defined here is because it's used serverside to serve data
-- to the client, at a point before the client can send a request to it, for optimization. 
-- (if you're a glua nerd and want futher explanation as to why it's here: https://upload.livaco.dev/u/IjRoPxd0L2.txt)
--
-- Keep this value ideally ~15 for small servers, ~20 for large servers with beefy CPU's, as a larger value means more 
-- data needs to be retieved and sent. Try to keep it above about 12, as keep in mind people could be using the more 
-- compact table view. Or, just keep it at the default if you're not sure.
--
-- Default: 15
YAWS.ManualConfig.PagnationCount = 15



--
-- Now, you can go in-game using the command you set above, and set up the rest of the addon!
-- There are some other config files you can view if you want to enable extra stuff
--    > If you want to change some super important, secure settings or set up MySQL, you can have a peep about sv_config.lua
--      and set that up however you want 
--    > If you know your Lua and want to add your own Punishment categories, e.g a punishment that slaps the player about
--      a bit, you can go into sh_punishments.lua and add it easily!
--    > If you want to enable those fancy Discord Webhooks you saw in the addon media, go into sv_discord.lua to go about that.
--





























--
-- This is all stuff for debugging, and development. If you don't know what these do, keep them on their default values
-- as guided in the comments. If you've not changed them and don't know what these do, don't touch them at all.
-- (Or do, I'm a comment not a cop)
--


-- Print net message payload lengths client-side. Lots of data being thrown about so this is a concern sometimes.
-- Try not to enable this without an actual reason. They can just lag your server if enough net messages are used.
-- Default: false
YAWS.ManualConfig.ClientNetDebug = false

-- Same as above, but on the server-side realm.
-- Default: false
YAWS.ManualConfig.ServerNetDebug = false

-- Supresses Async call error logging into the console. NEVER recommended to enable.
-- Default: false
YAWS.ManualConfig.SupressAsyncTraces = false

-- Supresses the config checks the addon runs. Only enable if you are 110% sure on what you're doing and don't
-- want the addon to waste procesing power checking and yelling at you for pushing it past the reccomended limits.
-- Default: false
YAWS.ManualConfig.SupressConfigChecks = false
--addons/yet_another_warn_system/lua/yaws/ui/elements/cl_panel.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/inputs/cl_numberwang.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/misc/cl_shadow.lua:
-- A panel I can kinda just place so I can paint shadows without messing with widths n shit
local PANEL = {}

function PANEL:Init()
    self.down = false
end 
function PANEL:Down()
    self.down = true
end 

function PANEL:Paint(w, h)
    -- shadows suck in dark theme
    if(YAWS.UI.UseDarkTheme()) then return end 
    YAWS.UI.DrawShadow(0, 0, w, h, self.down)
end 

vgui.Register("yaws.shadow", PANEL, "DPanel")
--addons/yet_another_warn_system/lua/yaws/ui/elements/sidebar/cl_sidebar_button.lua:
local PANEL = {}

AccessorFunc(PANEL, "name", "Name", FORCE_STRING)
AccessorFunc(PANEL, "callback", "Callback")
AccessorFunc(PANEL, "icon", "Icon")

function PANEL:Init()
    self:SetText("")

    self.id = 0;
    self.name = "Unnamed"
    self.color = YAWS.UI.ColorScheme()['sidebutton_dull']
    self.callback = function() end 
    self.bgColor = Color(0, 0, 0, 0)
    self.icon = YAWS.UI.MaterialCache['close']
    self.selectable = true
    self.selected = false

    self.frameTime = RealFrameTime()
end 

function PANEL:AllowSelectable(selectable) 
    self.selectable = selectable
end 

function PANEL:DoClick()
    if(self.selected) then return end 
    
    if(self.selectable) then 
        self.selected = true
        self:GetParent():GetParent():UpdateSelected(self.id)
    end 

    self.callback()
end

function PANEL:Paint(w, h) 
    self.frameTime = RealFrameTime()
    
    -- draw.RoundedBox(0, 0, 0, w, h, Color(255, 0, 0))
    local colors = YAWS.UI.ColorScheme()
    local useThis = "sidebutton_dull"
    if(self:IsHovered() || self.selected) then 
        useThis = "sidebutton_highlight"
    end 
    
    self.color = YAWS.UI.LerpColor(10 * self.frameTime, self.color, colors[useThis])

    if(self.selected) then 
        self.bgColor = YAWS.UI.LerpColor(8 * self.frameTime, self.bgColor, colors["sidebutton_highlightbg"])
    else 
        self.bgColor = YAWS.UI.LerpColor(8 * self.frameTime, self.bgColor, colors["sidebutton_highlightbg2"])
    end 

    local pad = w * 0.05
    draw.RoundedBox(5, pad, pad, w - (pad * 2), w - (pad * 2), self.bgColor)

    draw.NoTexture()
    surface.SetDrawColor(self.color.r, self.color.g, self.color.b)
    surface.SetMaterial(self.icon)

    surface.DrawTexturedRect(w * 0.37, w * 0.37 - (h * 0.08), w - (w * 0.37 * 2), (h - (w * 0.37 * 2)))

    draw.SimpleText(self.name, "yaws.6", (w / 2) - 1, h * 0.7, self.color, 1, 1)
end 

function PANEL:PerformLayout()
    self:SetHeight(self:GetWide())
end 

vgui.Register("yaws.sidebar_button", PANEL, "DButton")
--addons/yet_another_warn_system/lua/yaws/ui/layouts/tabs/cl_settings.lua:
return gluapack()()
--addons/advancedkillfeed/lua/z_advancedkillfeed/client/cl_z_advancedkillfeed_menu_vgui.lua:
-- [[ CREATED BY ZOMBIE EXTINGUISHER]]

local menuCol = Color(100,100,100)
local menuTextCol = Color(25,75,100,250)
local colGreen,colRed = SH_ADVANCEDFEED.Col.GREEN,SH_ADVANCEDFEED.Col.RED
local labelCol = SH_ADVANCEDFEED.Col.BLUE
local settingsBtnCol = color_white
local textInputCol = color_white

local function SaveChangesToServer()
	/* Save settings to server data file */
	CL_ADVANCEDFEED.Save()
end

function CL_ADVANCEDFEED.SkinScrollPanel(scrollP)
	
	local sbar = scrollP:GetVBar()
	local sbarCol = Color( 0, 0, 0, 100 )
	
	sbar:SetWide(4)
	sbar:SetHideButtons( true )
	
	function sbar:Paint( w, h )
		draw.RoundedBox( 0, 0, 0, w, h, sbarCol )
	end
	
	function sbar.btnGrip:Paint( w, h )
		draw.RoundedBox( 0, 0, 0, w, h, color_white )
	end

end

function CL_ADVANCEDFEED.SkinListView(listView)
 
	-- skin scrollbar
	listView.GetVBar = function(self) 
		return self.VBar 
	end
	
	-- block default behaviour from overriding size
	local __OldSetSize = listView.VBar.SetSize
	listView.VBar.SetSize = function(self, w, h)
		__OldSetSize(self, 4, h)
		self:SetPos(listView:GetWide()-4)
	end
	
	CL_ADVANCEDFEED.SkinScrollPanel(listView)
	
	-- resize canvas due to new scrollbar width
	local __OldSetSize = listView.pnlCanvas.SetSize
	local initialWidth = nil
	listView.pnlCanvas.SetSize = function(self, w, h)
		
		if listView.VBar.Enabled then
			__OldSetSize(self, w+16-listView.VBar:GetWide(), h)
		else
			__OldSetSize(self, w, h)
		end
		
	end
	
	-- skin headers
	for _, col in pairs(listView.Columns) do
	
		-- header btn
		col.Header.Paint = function(self, w, h)
			
			-- bg
			surface.SetDrawColor(SH_ADVANCEDFEED.Col.GREY)
			surface.DrawRect(0,0,w,h)
			
			-- lines
			surface.SetDrawColor(SH_ADVANCEDFEED.Col.LIGHTGREY)
			surface.DrawRect(0,0,w,1)
			surface.DrawRect(0,h-1,w,1)
				
		end
		
		col.Header:SetTextColor(SH_ADVANCEDFEED.Col.LIGHTGREY)
	
	end
	
	listView.Paint = function(self, w, h)
		surface.SetDrawColor(SH_ADVANCEDFEED.Col.GREY)
		surface.DrawRect(0,0,w,h)
	end
	
	local __OldAddLine = listView.AddLine
	listView.AddLine = function(self, ...)
		
		local line = __OldAddLine(self, ...)
		local isEvenLine = #self:GetLines()%2 == 0
		local lineColor = isEvenLine and SH_ADVANCEDFEED.Col.GREY or Color(45, 45, 45)

		-- skin lines
		for k, lineCol in pairs(line.Columns) do
			
			lineCol:SetColor(color_white)
			
			lineCol.Paint = function(self, w, h)
				
				if line.mouseIsIn or line:IsSelected() then
					surface.SetDrawColor(SH_ADVANCEDFEED.Col.BLUE)
					surface.DrawRect(0,0,w,h)
				else
					surface.SetDrawColor(lineColor)
					surface.DrawRect(0,0,w,h)
				end
			
			end
			
		end
		
		line.OnCursorEntered = function(self)
			self.mouseIsIn = true
			
			-- OnCursorExited will not always trigger when scrolling
			local lines = listView:GetLines()
			for i=1, #lines do
				
				local l =lines[i]
				
				if l == self then continue end
				
				l.mouseIsIn = false
				
			end
			
		end
		
		line.OnCursorExited = function(self)
			self.mouseIsIn = false
		end
		
		return line
		
	end
	

end

local function CreateCheckBox(parent,pos,text,tableId)
		local checkBox = vgui.Create("DCheckBoxLabel", parent)
		checkBox:SetPos(pos[1],pos[2])
		checkBox:SetFont("z_advancedkillfeed_checkbox")
		checkBox:SetText( text )
		checkBox.OnChange = function ()
			SH_ADVANCEDFEED.Settings[tableId] = !SH_ADVANCEDFEED.Settings[tableId]
			SaveChangesToServer()
		end
		checkBox.Think = function()
			checkBox:SetChecked(SH_ADVANCEDFEED.Settings[tableId])
			if checkBox:GetChecked() then 
				checkBox:SetTextColor(colGreen)
			else 
				checkBox:SetTextColor(colRed)
			end
		end
end

local function AddLabel(parent,pos,text)
	local label = vgui.Create("DLabel",parent)
	label:SetPos(pos[1],pos[2])
	label:SetFont("z_advancedkillfeed_checkbox_big_big")
	label:SetText(text)
	label:SetTextColor(labelCol)
	label:SizeToContents()
	return label
end

local function AddLabelItem(parent,pos,text)
	local label = vgui.Create("DLabel",parent)
	label:SetPos(pos[1],pos[2])
	label:SetFont("z_advancedkillfeed_checkbox")
	label:SetText(text)
	label:SetTextColor(labelCol)
	label:SizeToContents()
end

local function OpenColorPicker(parent,tableId,askColor,oldTbl)
	
	local parentW,parentH = parent:GetSize()
	
	local mixerFrame = vgui.Create( "DFrame" )
	mixerFrame:SetSize(parentW*0.5,parentH*0.8)
	mixerFrame:SetTitle("")
	mixerFrame:ShowCloseButton(false)
	mixerFrame:Center()
	-- mixerFrame:MoveToFront()
	mixerFrame.startTime = SysTime()
	mixerFrame:MakePopup() 
	mixerFrame.Paint = function(_,w,h)
		Derma_DrawBackgroundBlur( mixerFrame, mixerFrame.startTime )
	end
	
	local mixerW,mixerH = mixerFrame:GetSize()
	
	local mixer = vgui.Create( "DColorMixer",mixerFrame )
	mixer:Dock( TOP )
	mixer:SetPalette( true )
	mixer:SetAlphaBar( true )
	mixer:SetWangs( true )
	if !askColor then
		mixer:SetColor(SH_ADVANCEDFEED.Settings[tableId])
	else
		mixer:SetColor(SH_ADVANCEDFEED.Col.RED)
	end
	
	local btnWidth,btnHeight = parentW*0.12,parentH*0.07
	
	local _, mixerY = mixer:GetPos()
	local btnY = mixerY+mixer:GetTall()+btnHeight*1.3
		
	local okBtn = CL_ADVANCEDFEED.CreatePaintButton(mixerFrame)
	okBtn:SetPos( mixerW*0.2, btnY ) 
	okBtn:SetFont("DermaDefaultBold")
	okBtn:SetText("Ok")
	okBtn:SetTextColor(labelCol)
	okBtn:SetSize( btnWidth, btnHeight)
	okBtn.DoClick = function()
		local c = mixer:GetColor()
		if !askColor then 
			SH_ADVANCEDFEED.Settings[tableId] = c
		else
			oldTbl[3] = c
			table.insert(SH_ADVANCEDFEED.Settings[tableId],oldTbl)
		end
		SaveChangesToServer()
		mixerFrame:Close()
	end
	
	local cancelBtn = CL_ADVANCEDFEED.CreatePaintButton(mixerFrame)
	cancelBtn:SetPos( mixerW*0.6, btnY ) 
	cancelBtn:SetFont("DermaDefaultBold")
	cancelBtn:SetText("Cancel")
	cancelBtn:SetTextColor(settingsBtnCol)
	cancelBtn:SetSize( btnWidth, btnHeight)
	cancelBtn.DoClick = function()
		mixerFrame:Close()
	end
	
end

local function AddColorPickerButton(parent,pos,str,tableId)
	
	local parentW,parentH = parent:GetSize()
	local btnWidth,btnHeight = parentW*0.35,parentH*0.05
		
	local colPickBtn = CL_ADVANCEDFEED.CreatePaintButton(parent,tableId)
	colPickBtn:SetPos( pos[1], pos[2] ) 
	colPickBtn:SetFont("z_advancedkillfeed_checkbox")
	colPickBtn:SetText(str)
	colPickBtn:SetTextColor(color_white)
	colPickBtn:SetSize( btnWidth, btnHeight)
	colPickBtn.DoClick = function()
		OpenColorPicker(parent,tableId)
	end
	
end

local function AddTextEdit(parent,pos,tableId)

	local parentW,parentH = parent:GetSize()
		
	local textEntry = vgui.Create( "DTextEntry", parent) -- create the form as a child of frame
	textEntry:SetPos( pos[1],pos[2])
	textEntry:SetSize(parentW*0.35, parentH*0.05)
	textEntry:SetFont("DermaDefaultBold")
	textEntry:SetTextColor(textInputCol)
	textEntry:SetDrawBackground(false)
	textEntry.m_colCursor = labelCol
	textEntry.m_colPlaceholder = labelCol
	
	local oldPaint = textEntry.Paint
	textEntry.Paint = function(self, w, h)
	
		-- background
		surface.SetDrawColor(SH_ADVANCEDFEED.Col.GREY_150)
		surface.DrawRect(0,0,w,h)
		
		-- input box
		oldPaint(self,w,h)

	end
	
	textEntry.OnEnter = function( self )
		local str = string.Trim(textEntry:GetText())
		textEntry:SetText(str)
		SH_ADVANCEDFEED.Settings[tableId] = str
		SaveChangesToServer()
	end
	
	textEntry.Think = function()
		if !textEntry:IsEditing() then 
			textEntry:SetText( SH_ADVANCEDFEED.Settings[tableId] )
		end
	end
	
	
end

local function GetValForNumSlider(tableId)
	local val = SH_ADVANCEDFEED.Settings[tableId]
	
	if istable(val) then
		for i=1,#val do 
			
			if isnumber(val[i]) then
				return val[i]
			end
			
		end
	end

	return val
end

local function SetValForNumSlider(tableId,newVal)
	
	local val = SH_ADVANCEDFEED.Settings[tableId]
	
	if istable(val) then
		for i=1,#val do 
			
			if isnumber(val[i]) then
				val[i] = newVal
			end
			
		end
	else
		SH_ADVANCEDFEED.Settings[tableId] = newVal
	end
	
end

local function AddComboBox(parent,pos,title,options,tableId,isFontTbl,fontSizeSlider)

	local parentW,parentH = parent:GetSize()
	
	local label = vgui.Create("DLabel",parent)
	label:SetPos(pos[1],pos[2])
	label:SetFont("z_advancedkillfeed_checkbox")
	label:SetText(title.." ")
	label:SetTextColor(labelCol)
	
	if isFontTbl then
		label:SetFont("z_CODKillFeedFont_FontChooser")
	end
	
	label:SizeToContents()
	
	local lblX,lblY = label:GetPos()

	local comboBox = vgui.Create( "DComboBox",parent )
	comboBox:SetSize( parentW*0.1, parentH*0.05 )
	comboBox:SetTextColor(settingsBtnCol)
	
	local function populateMenu()
		comboBox:Clear()
		for k,v in pairs(options) do
			if (v == SH_ADVANCEDFEED.Settings[tableId]) or ( isFontTbl and v == SH_ADVANCEDFEED.Settings[tableId][1] ) then continue end
			comboBox:AddChoice( v )
		end
	end
	populateMenu()

	comboBox.OnSelect = function( panel, index, value )	
		if isFontTbl then
			SH_ADVANCEDFEED.Settings[tableId] = SH_ADVANCEDFEED.FindFont(value)
			fontSizeSlider:SetValue(GetValForNumSlider(tableId))
			CL_ADVANCEDFEED.ReloadFont()
		else
			SH_ADVANCEDFEED.Settings[tableId] = value
		end
		
		populateMenu()
		SaveChangesToServer()
	end
	
	comboBox.Paint = function(_,cw,ch)
		surface.SetDrawColor(menuCol)
		surface.DrawOutlinedRect(0, 0,cw,ch)
	end
	
	comboBox.Think = function()
		comboBox:SetPos(lblX+label:GetWide(),pos[2])
		if isFontTbl then 
			comboBox:SetValue( SH_ADVANCEDFEED.Settings[tableId][1] )
			label:SizeToContents()
			label:SetPos(pos[1],pos[2])
		else 
			comboBox:SetValue( SH_ADVANCEDFEED.Settings[tableId] )
		end
		comboBox:SizeToContentsX(parentW*0.05)
	end

end

local function AddListViewTeam(parent,pos,tableId,leftStr,rightStr) 

	local parentW,parentH = parent:GetSize()
	local items = 0

	local listView = vgui.Create( "DListView", parent )
	listView:SetPos(pos[1],pos[2])
	listView:SetSize(parentW*0.35,parentH*0.2)
	listView:SetMultiSelect( false )
	listView:AddColumn( "Team" )
	listView:AddColumn( "Name" )
	CL_ADVANCEDFEED.SkinListView(listView)

	local function fillList()
		listView:Clear()
		for _,t in pairs(SH_ADVANCEDFEED.Settings[tableId]) do 
			listView:AddLine( t[1], t[2] )
		end
	end
	
	listView.OnRowSelected = function( lst, index, pnl )
		local tNum = pnl:GetColumnText( 1 )
		local tName = pnl:GetColumnText( 2 )
		
		table.remove(SH_ADVANCEDFEED.Settings[tableId],index)
		SaveChangesToServer()
		
	end
	
	local listX,listY = listView:GetPos()
	local listW,listH = listView:GetSize()
	
	-- 1 label per column
	AddLabel(parent,{listX,listY-parentH*0.055},leftStr)
	local rightLbl = AddLabel(parent,{0,0},rightStr)
	-- left align the rightStr
	rightLbl:SetPos(listX+(listW*2)-rightLbl:GetWide(),listY-parentH*0.055)
	
	local listViewAll = vgui.Create( "DListView", parent )
	listViewAll:SetPos(listX+listW,pos[2])
	listViewAll:SetSize(parentW*0.35,parentH*0.2)
	listViewAll:SetMultiSelect( false )
	listViewAll:AddColumn( "Team" )
	listViewAll:AddColumn( "Name" )
	CL_ADVANCEDFEED.SkinListView(listViewAll)

	local function fillListAll()
		listViewAll:Clear()
		
		local teams = SH_ADVANCEDFEED.GetAllTeams()
		
		for i=1, #teams do
			
			local id, name, isTeam = teams[i][1], teams[i][2], teams[i][3]
			
			local checkBy = name
			
			if isTeam then
				checkBy = id
			end
			
			if !SH_ADVANCEDFEED.IsTeamInTable(SH_ADVANCEDFEED.Settings[tableId],checkBy) then
				listViewAll:AddLine( id, name )
			end
			
		end
	end
	fillListAll()

	listViewAll.OnRowSelected = function( lst, index, pnl )
		local tNum = pnl:GetColumnText( 1 )
		local tName = pnl:GetColumnText( 2 )
		
		table.insert(SH_ADVANCEDFEED.Settings[tableId],{tNum,tName})
		SaveChangesToServer()
		
	end

	listView.Think = function()
		-- check if items where added/removed
		if items != #SH_ADVANCEDFEED.Settings[tableId] then 
			items = #SH_ADVANCEDFEED.Settings[tableId]
			fillList()
			fillListAll()
		end
	end
	
end

local function AddNumSlider(parent,pos,text,minValue,maxValue,decimals,tableId)

	local parentW,parentH = parent:GetSize()
	
	local numSlider = vgui.Create( "DNumSlider", parent )
	numSlider:SetPos(pos[1]+parentW*0.02,pos[2])
	numSlider:SetSize( parentW*0.7, parentH*0.05)
	numSlider:SetText( text )
	numSlider:SetMinMax(minValue,maxValue)
	numSlider:SetDecimals( decimals )
	
	numSlider.Label:SetColor(labelCol)
	numSlider.Label:SetTextColor(labelCol)
	numSlider.Label:SetFont("z_advancedkillfeed_checkbox")
	numSlider.TextArea:SetTextColor(settingsBtnCol)
	numSlider.TextArea:SetFont("z_advancedkillfeed_checkbox")
	
	-- for reference in restore default btn
	numSlider.tableId = tableId
	
	numSlider:SetValue(GetValForNumSlider(tableId))
	
	numSlider.OnValueChanged = function(_,newVal)
	
		timer.Stop("reloadSliders")
		timer.Create( "reloadSliders", 0.5, 1, function()
			
			SetValForNumSlider(tableId,newVal)
			SaveChangesToServer()
			
		end )
	
	end
	
	return numSlider

end

local function AddRestoreDefaultsBtn(parent,pos,tableIds,sliders,txt)

	local parentW,parentH = parent:GetSize()
	local btnWidth,btnHeight = parentW*0.35,parentH*0.05
	
	if txt then 
		btnWidth = parentW*0.3
	end
		
	local restoreDefault = CL_ADVANCEDFEED.CreatePaintButton(parent,tableId)
	restoreDefault:SetPos( pos[1], pos[2] ) 
	restoreDefault:SetFont("z_advancedkillfeed_checkbox")
	
	if txt != nil then
		restoreDefault:SetText(txt)
	else 
		restoreDefault:SetText("Restore Default Value's")
	end
	
	restoreDefault:SetTextColor(settingsBtnCol)
	restoreDefault:SetSize( btnWidth, btnHeight)
	restoreDefault.DoClick = function()
		
		for _,t in pairs(tableIds) do 
			SH_ADVANCEDFEED.Settings[t[1]] = t[2]
		end
		
		if sliders != nil then
			for _,slider in pairs(sliders) do
				
				local val = GetValForNumSlider(slider.tableId)
				slider:SetValue(val)
				
			end
		end
		
		SaveChangesToServer()
		
	end
	
end

local function AddListViewForTeamAndPlayers(parent,pos,tableId,connectedTables,askColor)

	connectedTables = connectedTables || {}
	askColor = askColor || false

	local function RemoveIndexByValue(value)
		
		for k,tbl in pairs(SH_ADVANCEDFEED.Settings[tableId]) do 
			
			local val = tbl[2]
			
			if val == value then 
				table.remove(SH_ADVANCEDFEED.Settings[tableId],k)
				break
			end
		
		end
		
	end
	
	local function FindTeamIndex(teamName)
		
		for teamNum,t in pairs(team.GetAllTeams()) do
			if team.GetName(teamNum) == teamName then 
				return teamNum
			end
		end
		
		return nil
		
	end
	
	local function FindPlayerByName(name)
	
		for _,p in player.Iterator() do
			if p:Nick() == name then 
				return p:SteamID()
			end
		end
	
	end
	
	local function ItemAllowedInList(tbl,tblItem) 
	
		for k,tbl in pairs(tbl) do 
			
			local key = tbl[1]
			
			if key == tblItem then 
				return false
			end
		
		end
		
		return true
		
	end
	
	local function CheckAllListsForItem(tblItem) 
		
		for _,id in pairs(connectedTables) do 
			if !ItemAllowedInList(SH_ADVANCEDFEED.Settings[id],tblItem) then 
				return false
			end
		end
		
		return true
		
	end

	/* ALL */	
	local parentW,parentH = parent:GetSize()
	local items = 0

	local listView = vgui.Create( "DListView", parent )	
	listView:SetPos(pos[1],pos[2])
	listView:SetSize(parentW*0.35,parentH*0.3)
	listView:SetMultiSelect( false )
	listView:AddColumn( "Players/Ranks/Teams" )
	CL_ADVANCEDFEED.SkinListView(listView)
	
	local function fillList()
		listView:Clear()
		for _,t in pairs(SH_ADVANCEDFEED.Settings[tableId]) do
			listView:AddLine( t[2] )
		end
	end
	fillList()
	
	listView.OnRowSelected = function( lst, index, pnl )
	
		local nameRankTeam = pnl:GetColumnText( 1 )
		
		RemoveIndexByValue(nameRankTeam)
		SaveChangesToServer()
		
	end
	
	/* TEAMS */	
	local listX,listY = listView:GetPos()
	local listW,listH = listView:GetSize()
	
	AddLabel(parent,{listX+listW+parentW*0.07,pos[2] - (parentH*0.075) },"Teams")

	
	local listViewTeams = vgui.Create( "DListView", parent )
	listViewTeams:SetPos(listX+listW+parentW*0.02,pos[2])
	listViewTeams:SetSize(parentW*0.2,parentH*0.3)
	listViewTeams:SetMultiSelect( false )
	listViewTeams:AddColumn( "Team" ):SetMaxWidth(parentW*0.05)
	listViewTeams:AddColumn( "Name" )
	CL_ADVANCEDFEED.SkinListView(listViewTeams)

	local function fillListTeams()
		listViewTeams:Clear()
		
		local teams = SH_ADVANCEDFEED.GetAllTeams()
		
		for i=1, #teams do
			
			local id, name, isTeam = teams[i][1], teams[i][2], teams[i][3]
			
			local checkBy = name
			
			if isTeam then
				checkBy = id
			end
			
			if CheckAllListsForItem(checkBy) then
				listViewTeams:AddLine( id, name )
			end
			
		end
		
	end
	fillListTeams()

	listViewTeams.OnRowSelected = function( lst, index, pnl )
	
		local value,index = pnl:GetColumnText( 2 )
		index = FindTeamIndex(value)
		 
		// selected item is a usergroup
		if index == nil then
			index = value
		end
		
		if !askColor then 
			table.insert(SH_ADVANCEDFEED.Settings[tableId],{index,value})
		else 
			OpenColorPicker(parent,tableId,askColor,{index,value})
		end
		SaveChangesToServer() 
		
	end
	
	
	/* PLAYERS */	
	local listX,listY = listViewTeams:GetPos()
	local listW,listH = listViewTeams:GetSize()
	
	AddLabel(parent,{listX+listW+parentW*0.11,pos[2] - (parentH*0.075)},"Players")
	
	local listViewPlayers = vgui.Create( "DListView", parent )
	listViewPlayers:SetPos(listX+listW+parentW*0.02,pos[2])
	listViewPlayers:SetSize(parentW*0.3,parentH*0.3)
	listViewPlayers:SetMultiSelect( false )
	listViewPlayers:AddColumn( "Players" )
	CL_ADVANCEDFEED.SkinListView(listViewPlayers)

	local function fillListPlayers()
		listViewPlayers:Clear()
		for _,p in player.Iterator() do
			if CheckAllListsForItem(p:SteamID()) then
				listViewPlayers:AddLine( p:Nick() )
			end
		end
	end
	fillListPlayers()

	listViewPlayers.OnRowSelected = function( lst, index, pnl )
	
		local playerName = pnl:GetColumnText( 1 )
		
		if !askColor then 
			table.insert(SH_ADVANCEDFEED.Settings[tableId],{FindPlayerByName(playerName),playerName})		
		else 
			OpenColorPicker(parent,tableId,askColor,{FindPlayerByName(playerName),playerName})
		end
		SaveChangesToServer() 
		
	end
	
	
	local listsPerKeys = {}
	local function checkListsForChange(init)
	
		for _,id in pairs(connectedTables) do 
			
			if init then 	
				listsPerKeys[id] = #SH_ADVANCEDFEED.Settings[id]
			else 
				if listsPerKeys[id] != #SH_ADVANCEDFEED.Settings[id] then 
					listsPerKeys[id] = #SH_ADVANCEDFEED.Settings[id]
					return true
				end
			end
			
		end
		
		return false
		
	end
	checkListsForChange(true)
	
	listView.Think = function()
		-- check if items where added/removed
		if checkListsForChange(init) then 
			fillList()
			fillListTeams()
			fillListPlayers()
		end
	end
	
end



/*GENERAL PANEL*/
local GENERALPANEL =  {}

function GENERALPANEL:Init()

	local parent = self:GetParent()		
	local parentW,parentH = parent:GetSize()
	
	self:SetText("")
	self:SetSize(parentW*0.988,parentH*0.99)
	
	local pw,ph = self:GetSize()
	
	local function getColumnPos(column)
		if column == 1 then 
			return pw*0.05
		elseif column == 1.5 then 
			return pw*0.065
		elseif column == 2 then
			return pw*0.505
		elseif column == 2.5 then
			return pw*0.525
		end
	end
	
	local startH,spaceH = ph*0.05,ph*0.07
	
	local height = startH
	
	local function addSpace()
		height=height+(spaceH*0.8)
	end

	local function addMediumSpace()
		height=height+(spaceH*0.9)
	end
	
	local function addBiggerSpace()
		height=height+(spaceH*1)
	end
	
	local function addMakeUpSpace()
		height=height+(spaceH*0.1)
	end
	
	-- hide for teams
	addSpace()
	AddListViewTeam(self,{pw*0.14,height},"hideForTeams","Hide For","Visible For")
	addBiggerSpace();addBiggerSpace();addBiggerSpace();addBiggerSpace()
	
	-- global
	AddLabel(self,{getColumnPos(1),height},"Global")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Show Npc Logs","showNpcs")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Show Weapon Icon","showWeaponIcon")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1.5),height},"Text If No Icon","showWeaponNameWhenIconInvalid")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Show Player Avatars","showPlayerAvatar")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Show Kill Streaks","showStreaks")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Show Kill Combos","showCombos")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Show Kill Distance","showDistance")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Show Kill Assists","showAssists")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1.5),height},"Assists On Npc's","assistsOnNPC")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1.5),height},"Assists On Same Team","assistsOnSameTeam")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Hide Other Player Names","hidePlayerName")
	addSpace()
	AddTextEdit(self,{getColumnPos(1.5),height},"hidePlayerNameText")
	addBiggerSpace();addMediumSpace()
	AddComboBox(self,{getColumnPos(1),height},"Show Last Hit Pos",{SH_ADVANCEDFEED.Hitgroup.NONE,SH_ADVANCEDFEED.Hitgroup.ALL,SH_ADVANCEDFEED.Hitgroup.HEAD},"showHitGroup")
	addBiggerSpace();addSpace()
	
	AddLabelItem(self,{getColumnPos(1),height},"Player Suicide Notification")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Notify Suicide","showSelfKill")
	addSpace()
	AddTextEdit(self,{getColumnPos(1.5),height},"selfKillText")
	addSpace();addMakeUpSpace()
	
	addBiggerSpace()
	AddLabelItem(self,{getColumnPos(1),height},"Player Connection")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Notify Connection","showSelfConnect")
	addSpace()
	AddTextEdit(self,{getColumnPos(1.5),height},"selfConnectText")
	addSpace()
	AddTextEdit(self,{getColumnPos(1.5),height},"selfDisconnectText")
	addSpace();addMakeUpSpace()

	addBiggerSpace()
	AddLabelItem(self,{getColumnPos(1),height},"Npc Kills Player")
	addSpace()
	AddTextEdit(self,{getColumnPos(1.5),height},"npcKillsPlayerText")
	addSpace();addMakeUpSpace()


	AddLabel(self,{getColumnPos(2),height},"")
	height = startH
	addSpace();addBiggerSpace();addBiggerSpace();addBiggerSpace();addBiggerSpace()
	
	-- ulx
	AddLabel(self,{getColumnPos(2),height},"ULX")
	addSpace()
	CreateCheckBox(self,{getColumnPos(2),height},"Use Group Tags","useULXTeamTags")
	addBiggerSpace();addMakeUpSpace()
	
	-- darkrp
	AddLabel(self,{getColumnPos(2),height},"Dark Rp")
	addSpace()
	CreateCheckBox(self,{getColumnPos(2),height},"Use Group Tags","useDarkRPJobTags")
	addSpace()
	CreateCheckBox(self,{getColumnPos(2),height},"Notify on Job change","notifyOnJobChange")
	addSpace()
	CreateCheckBox(self,{getColumnPos(2),height},"Notify on First Join","notifyOnFirstJoin")
	addSpace()
	AddTextEdit(self,{getColumnPos(2.5),height},"notifyOnFirstJoinText")
	
	addBiggerSpace()
	addBiggerSpace()
	
	-- ttt
	AddLabel(self,{getColumnPos(2),height},"TTT")
	addSpace()
	CreateCheckBox(self,{getColumnPos(2),height},"Show Player kills","TTTlogPlayerKills")
	addMediumSpace()
	
	CreateCheckBox(self,{getColumnPos(2),height},"Notify Round start","notifyOnTTTBeginRound")
	addSpace()
	AddTextEdit(self,{getColumnPos(2.5),height},"notifyOnTTTBeginRoundText")
	addSpace();addMakeUpSpace()
	
	CreateCheckBox(self,{getColumnPos(2),height},"Notify Round end","notifyOnTTTEndRound")
	addSpace()
	AddTextEdit(self,{getColumnPos(2.5),height},"notifyOnTTTEndRoundText")

	height=height+(spaceH*13)
	
	-- restore defaults button
	AddRestoreDefaultsBtn(self,{pw*0.3,height},{
		{"hideForTeams",{}},
		{"showNpcs",true},
		{"showWeaponIcon",true},
		{"showWeaponNameWhenIconInvalid",true},
		{"showPlayerAvatar",false},
		{"showCombos",true},
		{"showStreaks",true},
		{"showDistance",false},
		{"showAssists",true},
		{"assistsOnNPC",true},
		{"assistsOnSameTeam",true},
		{"showHitGroup",SH_ADVANCEDFEED.Hitgroup.HEAD},
		{"showSelfKill",true},
		{"selfKillText","mistakes were made"},
		{"showSelfConnect",true},
		{"selfConnectText","connected"},
		{"selfDisconnectText","disconnected"},
		{"npcKillsPlayerText","X"},
		{"useULXTeamColors",false},
		{"useULXTeamTags",false},
		{"useDarkRPJobColors",true},	
		{"useDarkRPJobTags",true},
		{"notifyOnJobChange",true},
		{"notifyOnJobChangeColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"notifyOnFirstJoin",true},
		{"notifyOnFirstJoinText","joined for the first time!"},
		{"notifyOnFirstJoinColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"TTTlogPlayerKills",false},
		{"notifyOnTTTBeginRound",true},
		{"notifyOnTTTBeginRoundText","Round Begins!"},
		{"notifyOnTTTBeginRoundColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"notifyOnTTTEndRound",true},
		{"notifyOnTTTEndRoundText","Round Ended!"},
		{"notifyOnTTTEndRoundColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"hidePlayerName",false},
		{"hidePlayerNameText","Someone"}
	})
	
	addBiggerSpace()
	addSpace()
	AddLabel(self,{getColumnPos(2),height},"")
	
end

function GENERALPANEL:Paint(w,h)
end
vgui.Register('z_AdvancedKillFeedGeneralSettings', GENERALPANEL, 'DScrollPanel')

/*POSITIONING PANEL*/
local APPEARANCE =  {}

function APPEARANCE:Init()

	local parent = self:GetParent()		
	local parentW,parentH = parent:GetSize()
	
	self:SetText("")
	self:SetSize(parentW*0.988,parentH*0.99)
	
	local pw,ph = self:GetSize()
	
	local function getColumnPos(column)
		if column == 1 then 
			return pw*0.05
		elseif column == 1.5 then 
			return pw*0.07
		elseif column == 2 then
			return pw*0.505
		elseif column == 2.5 then
			return pw*0.525
		end
	end
	
	local startH,spaceH = ph*0.05,ph*0.07
	
	local height = startH
	
	local function addSpace()
		height=height+(spaceH*1.1)
	end
	local function addSpaceSmall()
		height=height+(spaceH*0.7)
	end
	local function addBiggerSpace()
		height=height+(spaceH*1)
	end
	
	-- text font will be positioned first 
	addSpace()
	
	-- align text
	AddComboBox(self,{getColumnPos(1.5),height},"Align text",{SH_ADVANCEDFEED.Align.RIGHT,SH_ADVANCEDFEED.Align.LEFT,SH_ADVANCEDFEED.Align.CENTER},"align")
	addSpace()
	
	-- log modus
	AddComboBox(self,{getColumnPos(1.5),height},"Logs go from ? to ?",{SH_ADVANCEDFEED.LogModus.BOTTOMTOTOP,SH_ADVANCEDFEED.LogModus.TOPTOBOTTOM},"logModus")
	addSpace()
	addSpace()
	
	-- font size
	local sliderSize = AddNumSlider(self,{getColumnPos(1),height},"Text size",0.008,0.03,3,"font")
	addSpace()
	
	-- text font
	AddComboBox(self,{getColumnPos(1.5),startH},"Text font",SH_ADVANCEDFEED.GetFonts(),"font",true,sliderSize)
	
	-- y pos 
	local sliderY = AddNumSlider(self,{getColumnPos(1),height},"Y position of log feed",0,1,3,"startPosY")
	addSpace()
	
	-- x pos 
	local sliderX = AddNumSlider(self,{getColumnPos(1),height},"X position of log feed",0,1,3,"startPosX")
	addSpace()
	addSpace()
	
	-- presets
	AddLabel(self,{pw*0.43,height},"Presets")
	addSpace()
	
	-- top left
	AddRestoreDefaultsBtn(self,{pw*0.015,height},{
		{"startPosY",0.265},
		{"startPosX",0.005},
		{"align",SH_ADVANCEDFEED.Align.LEFT}
	},
	{
		sliderY,
		sliderX
	},"Top Left")
	
	-- top center
	AddRestoreDefaultsBtn(self,{pw*0.345,height},{
		{"startPosY",0.265},
		{"startPosX",0.5},
		{"align",SH_ADVANCEDFEED.Align.CENTER}
	},
	{
		sliderY,
		sliderX
	},"Top Center")
	-- top right
	AddRestoreDefaultsBtn(self,{pw*0.675,height},{
		{"startPosY",0.265},
		{"startPosX",0.995},
		{"align",SH_ADVANCEDFEED.Align.RIGHT}
	},
	{
		sliderY,
		sliderX
	},"Top Right")
	addSpace()
	-- bottom center
	AddRestoreDefaultsBtn(self,{pw*0.345,height},{
		{"startPosY",0.955},
		{"startPosX",0.5},
		{"align",SH_ADVANCEDFEED.Align.CENTER}
	},
	{
		sliderY,
		sliderX
	},"Bottom Center")
	
	addSpace()
	addSpace()
	
	-- restore defaults button
	AddRestoreDefaultsBtn(self,{pw*0.325,height},{
		{"startPosY",0.265},
		{"startPosX",0.995},
		{"font",SH_ADVANCEDFEED.Settings.fonts[1]},
		{"logModus",SH_ADVANCEDFEED.LogModus.BOTTOMTOTOP},
		{"align",SH_ADVANCEDFEED.Align.RIGHT},
		{"fonts",{
			{"TargetID", 0.012},
			{"Bank Gothic", 0.011},
			{"Teko Light", 0.02},
			{"ArcadeClassic", 0.012 }
		}}
	},
	{
		sliderSize,
		sliderY,
		sliderX
	})
	
	addBiggerSpace()
	height = height + spaceH*0.8
	AddLabel(self,{getColumnPos(2),height},"")
	
end
function APPEARANCE:Paint(w,h)
end
vgui.Register('z_AdvancedKillFeedAppearanceSettings', APPEARANCE, 'DScrollPanel')

/*ANIMATIONS PANEL*/
local ANIMATIONSPANEL =  {}

function ANIMATIONSPANEL:Init()

	local parent = self:GetParent()		
	local parentW,parentH = parent:GetSize()
	
	self:SetText("")
	self:SetSize(parentW*0.988,parentH*0.99)
	
	local pw,ph = self:GetSize()
	
	local function getColumnPos(column)
		if column == 1 then 
			return pw*0.05
		elseif column == 1.5 then 
			return pw*0.065
		elseif column == 2 then
			return pw*0.505
		elseif column == 2.5 then
			return pw*0.525
		end
	end
	
	local startH,spaceH = ph*0.05,ph*0.07
	
	local height = startH
	
	local function addSpace()
		height=height+(spaceH*1.1)
	end
	
	local function addSpaceBig()
		height=height+(ph*0.4)
	end
	
	
	local connectedTables = {"animWavePlayers","animWaveDoublePlayers","animWaveDistortionPlayers","animSwitchPlayers"}
	
	-- wave
	local waveCharTbl = CL_ADVANCEDFEED.DrawExampleStr(getColumnPos(1),height,"Wave Animation",settingsBtnCol,self,false)
	addSpace()
	AddListViewForTeamAndPlayers(self,{getColumnPos(1),height},"animWavePlayers",connectedTables)
	addSpaceBig()
	
	-- double 
	local doubleWaveCharTbl = CL_ADVANCEDFEED.DrawExampleStr(getColumnPos(1),height,"DAonuibmlaetwiaovne",settingsBtnCol,self,false)
	addSpace()
	AddListViewForTeamAndPlayers(self,{getColumnPos(1),height},"animWaveDoublePlayers",connectedTables)
	addSpaceBig()
	
	-- distortion
	local distortionWaveCharTbl = CL_ADVANCEDFEED.DrawExampleStr(getColumnPos(1),height,"Distortion Wave Animation",settingsBtnCol,self,false)
	addSpace()
	AddListViewForTeamAndPlayers(self,{getColumnPos(1),height},"animWaveDistortionPlayers",connectedTables)
	addSpaceBig()
	
	-- switch
	local switchCharTbl = CL_ADVANCEDFEED.DrawExampleStr(getColumnPos(1),height,"Switch Animation",settingsBtnCol,self,false)
	addSpace()
	AddListViewForTeamAndPlayers(self,{getColumnPos(1),height},"animSwitchPlayers",connectedTables)
	addSpaceBig()
	
	-- typewriter 
	local typewriterCharTbl = CL_ADVANCEDFEED.DrawExampleStr(getColumnPos(1),height,"Type Writer Animation",settingsBtnCol,self,false)
	addSpace()
	AddListViewForTeamAndPlayers(self,{getColumnPos(1),height},"animTypeWriterPlayers",{"animTypeWriterPlayers"})
	addSpaceBig()
	
	local nextTime = 0
	self.Think = function()
	
		if nextTime < CurTime() then
		
			CL_ADVANCEDFEED.AnimWave(waveCharTbl)
			CL_ADVANCEDFEED.AnimWaveDouble(doubleWaveCharTbl)
			CL_ADVANCEDFEED.AnimWaveDistortion(distortionWaveCharTbl)
			CL_ADVANCEDFEED.AnimSwitch(switchCharTbl)
			CL_ADVANCEDFEED.AnimTypeWriter(typewriterCharTbl,true)
		
			-- limit everything to 30FPS
			nextTime = CurTime() + 0.033
		end
	end

	-- space bottom
	AddLabel(self,{getColumnPos(2),height},"")
	
end
function ANIMATIONSPANEL:Paint(w,h)
end
vgui.Register('z_AdvancedKillFeedAnimationSettings', ANIMATIONSPANEL, 'DScrollPanel')


/*EFFECTS PANEL*/
local EFFECTSPANEL =  {}

function EFFECTSPANEL:Init()

	local parent = self:GetParent()		
	local parentW,parentH = parent:GetSize()
	
	self:SetText("")
	self:SetSize(parentW*0.988,parentH*0.99)
	
	local pw,ph = self:GetSize()
	
	local function getColumnPos(column)
		if column == 1 then 
			return pw*0.05
		elseif column == 1.5 then 
			return pw*0.065
		elseif column == 2 then
			return pw*0.505
		elseif column == 2.5 then
			return pw*0.525
		end
	end
	
	local startH,spaceH = ph*0.05,ph*0.07
	
	local height = startH
	
	local function addSpace()
		height=height+(spaceH*1.1)
	end
	
	local function addSpaceBig()
		height=height+(ph*0.4)
	end
	
	
	local connectedTables = {"effectMovingColorPlayers","effectWordFlashPlayers","effectLetterFlashPlayers","effectRainbowPlayers","effectMovingRainbowPlayers"}
	
	-- moving colors
	local moveColEffectCharTbl = CL_ADVANCEDFEED.DrawExampleStr(getColumnPos(1),height,"Moving Color Effect",settingsBtnCol,self,false)
	addSpace()
	AddListViewForTeamAndPlayers(self,{getColumnPos(1),height},"effectMovingColorPlayers",connectedTables,true)
	addSpaceBig()
	
	-- moving rainbow
	local moveRainbowCharTbl = CL_ADVANCEDFEED.DrawExampleStr(getColumnPos(1),height,"Moving Rainbow Effect",settingsBtnCol,self,false)
	addSpace()
	AddListViewForTeamAndPlayers(self,{getColumnPos(1),height},"effectMovingRainbowPlayers",connectedTables)
	addSpaceBig()
	
	-- word flash 
	local wordFlashCharTbl = CL_ADVANCEDFEED.DrawExampleStr(getColumnPos(1),height,"Word Flash Effect",settingsBtnCol,self,false)
	addSpace()
	AddListViewForTeamAndPlayers(self,{getColumnPos(1),height},"effectWordFlashPlayers",connectedTables)
	addSpaceBig()
	
	-- letter flash 
	local letterFlashCharTbl = CL_ADVANCEDFEED.DrawExampleStr(getColumnPos(1),height,"Letter Flash Effect",settingsBtnCol,self,false)
	addSpace()
	AddListViewForTeamAndPlayers(self,{getColumnPos(1),height},"effectLetterFlashPlayers",connectedTables)
	addSpaceBig()	
	
	-- rainbow
	local rainbowCharTbl = CL_ADVANCEDFEED.DrawExampleStr(getColumnPos(1),height,"Rainbow Effect",settingsBtnCol,self,false)
	addSpace()
	AddListViewForTeamAndPlayers(self,{getColumnPos(1),height},"effectRainbowPlayers",connectedTables)
	addSpaceBig()
	
	-- pulse line 
	local pulseLineCharsTbl,waveStrWidth = CL_ADVANCEDFEED.DrawExampleStr(getColumnPos(1),height*0.99,"Pulse Line Effect",settingsBtnCol,self,false)
	addSpace()
	AddListViewForTeamAndPlayers(self,{getColumnPos(1),height},"effectPulseLinePlayers",{"effectPulseLinePlayers"},true)
	addSpaceBig()
	CL_ADVANCEDFEED.EffectPulseLine(SH_ADVANCEDFEED.Col.RED,pulseLineCharsTbl,waveStrWidth,self,true) 
	
	local nextTime = 0
	self.Think = function()
	
		if nextTime < CurTime() then
		
			CL_ADVANCEDFEED.EffectMovingColor(moveColEffectCharTbl,SH_ADVANCEDFEED.Col.RED)
			CL_ADVANCEDFEED.EffectMovingRainbow(moveRainbowCharTbl)
			CL_ADVANCEDFEED.EffectWordFlash(wordFlashCharTbl)
			CL_ADVANCEDFEED.EffectLetterFlash(letterFlashCharTbl)
			CL_ADVANCEDFEED.EffectRainbow(rainbowCharTbl)
		
			-- limit everything to 30FPS
			nextTime = CurTime() + 0.033
		end
	end

	-- space bottom
	AddLabel(self,{getColumnPos(2),height},"")
	
end
function EFFECTSPANEL:Paint(w,h)
end
vgui.Register('z_AdvancedKillFeedEffectSettings', EFFECTSPANEL, 'DScrollPanel')

/*SKIN PANEL*/
local SKINPANEL =  {}

function SKINPANEL:Init()

	local parent = self:GetParent()		
	local parentW,parentH = parent:GetSize()
	
	self:SetText("")
	self:SetSize(parentW*0.988,parentH*0.99)
	
	local pw,ph = self:GetSize()
	
	local function getColumnPos(column)
		if column == 1 then 
			return pw*0.05
		elseif column == 1.5 then 
			return pw*0.065
		elseif column == 2 then
			return pw*0.505
		elseif column == 2.5 then
			return pw*0.525
		end
	end
	
	local startH,spaceH = ph*0.05,ph*0.07
	
	local height = startH
	
	local function addSpace()
		height=height+(spaceH*0.8)
	end

	local function addMediumSpace()
		height=height+(spaceH*0.9)
	end
	
	local function addBiggerSpace()
		height=height+(spaceH*1)
	end
	
	local function addMakeUpSpace()
		height=height+(spaceH*0.1)
	end
	
	-- global
	AddLabel(self,{getColumnPos(1),height},"Global")
	addBiggerSpace()
	AddColorPickerButton(self,{getColumnPos(1),height},"Own Team","ownTeamColor")
	addSpace()
	AddColorPickerButton(self,{getColumnPos(1),height},"Other Teams","otherTeamColor")
	addSpace()
	AddColorPickerButton(self,{getColumnPos(1),height},"Npc","npcTeamColor")
	addSpace()
	AddColorPickerButton(self,{getColumnPos(1),height},"Weapon","weaponColor")
	addSpace()
	AddColorPickerButton(self,{getColumnPos(1),height},"Distance","distanceColor")
	addSpace()
	AddColorPickerButton(self,{getColumnPos(1),height},"Suicide","selfKillTextColor")
	addSpace()
	AddColorPickerButton(self,{getColumnPos(1),height},"Player Connect","selfConnectColor")
	
	addSpace()
	AddColorPickerButton(self,{getColumnPos(1),height},"Background","backgroundColor")
	addSpace()
	AddColorPickerButton(self,{getColumnPos(1),height},"Border","borderColor")
	addBiggerSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Background Gradient","useBackgroundGradient")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Border on Selfkill","borderOnSelfKill")
	addBiggerSpace();addMakeUpSpace()

	-- preset skins
	AddLabel(self,{getColumnPos(1),height},"Preset Skins")
	addBiggerSpace()
	AddRestoreDefaultsBtn(self,{getColumnPos(1),height},{
		{"selfKillTextColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"selfConnectColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"useULXTeamColors",true},
		{"npcTeamColor",SH_ADVANCEDFEED.Col.RED},
		{"weaponColor",SH_ADVANCEDFEED.Col.WHITE},
		{"distanceColor",SH_ADVANCEDFEED.Col.WHITE},
		{"backgroundColor",SH_ADVANCEDFEED.Col.TRANS},
		{"borderColor",SH_ADVANCEDFEED.Col.TRANS},
		{"useBackgroundGradient",false},
		{"borderOnSelfKill",false},
		{"csgoSkinActive",false},
		{"notifyOnJobChangeColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"notifyOnFirstJoinColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"notifyOnTTTBeginRoundColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"notifyOnTTTEndRoundColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
	},{},"Gmod")
	addBiggerSpace()
	AddRestoreDefaultsBtn(self,{getColumnPos(1),height},{
		{"selfKillTextColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"selfConnectColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"useULXTeamColors",false},
		{"ownTeamColor",Color(255,190,0)},
		{"otherTeamColor",SH_ADVANCEDFEED.Col.WHITE},
		{"npcTeamColor",Color(150,140,130)},
		{"weaponColor",SH_ADVANCEDFEED.Col.RED},
		{"distanceColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"backgroundColor",SH_ADVANCEDFEED.Col.TRANS},
		{"borderColor",SH_ADVANCEDFEED.Col.TRANS},
		{"useBackgroundGradient",false},
		{"borderOnSelfKill",false},
		{"csgoSkinActive",false},
		{"notifyOnJobChangeColor",SH_ADVANCEDFEED.Col.LIGHTGREY},	
		{"notifyOnFirstJoinColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"notifyOnTTTBeginRoundColor",SH_ADVANCEDFEED.Col.LIGHTGREY},	
		{"notifyOnTTTEndRoundColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
	},{},"Call of Duty")
	addBiggerSpace()
	AddRestoreDefaultsBtn(self,{getColumnPos(1),height},{
		{"selfKillTextColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"selfConnectColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"useULXTeamColors",false},
		{"ownTeamColor",Color(79,158,222)}, -- CT color
		{"otherTeamColor",Color(199,162,71)}, -- T color
		{"npcTeamColor",Color(199,162,71)},
		{"weaponColor",SH_ADVANCEDFEED.Col.WHITE},
		{"distanceColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"backgroundColor",Color(0,0,0,200)},
		{"borderColor",Color(128,0,0,200)},
		{"useBackgroundGradient",true},
		{"borderOnSelfKill",true},
		{"csgoSkinActive",true},
		{"notifyOnJobChangeColor",SH_ADVANCEDFEED.Col.LIGHTGREY},	
		{"notifyOnFirstJoinColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"notifyOnTTTBeginRoundColor",SH_ADVANCEDFEED.Col.LIGHTGREY},	
		{"notifyOnTTTEndRoundColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
	},{},"CS:GO")
	addBiggerSpace()
	AddRestoreDefaultsBtn(self,{getColumnPos(1),height},{
		{"selfKillTextColor",Color(200,200,200,255)},
		{"selfConnectColor",Color(200,200,200,255)},
		{"useULXTeamColors",false},
		{"ownTeamColor",Color(255,255,255,200)}, -- CT color
		{"otherTeamColor",Color(255,255,255,200)}, -- T color
		{"npcTeamColor",Color(255,0,0,200)},
		{"weaponColor",Color(200,200,200,255)},
		{"distanceColor",Color(200,200,200,255)},
		{"backgroundColor",Color(0,0,0,150)},
		{"borderColor",Color(0,0,0,0)},
		{"useBackgroundGradient",false},
		{"borderOnSelfKill",false},
		{"csgoSkinActive",false},
		{"notifyOnJobChangeColor",Color(200,200,200,255)},	
		{"notifyOnFirstJoinColor",Color(200,200,200,255)},
		{"notifyOnTTTBeginRoundColor",Color(200,200,200,255)},	
		{"notifyOnTTTEndRoundColor",Color(200,200,200,255)},
	},{},"Dark")

	height = startH
	
	-- ulx
	AddLabel(self,{getColumnPos(2),height},"ULX")
	addBiggerSpace()
	CreateCheckBox(self,{getColumnPos(2),height},"Use Group Colors","useULXTeamColors")
	addBiggerSpace();addMakeUpSpace()
	
	-- darkrp
	AddLabel(self,{getColumnPos(2),height},"Dark Rp")
	addBiggerSpace()
	CreateCheckBox(self,{getColumnPos(2),height},"Use Group Colors","useDarkRPJobColors")
	addSpace()
	AddColorPickerButton(self,{getColumnPos(2),height},"Job Change","notifyOnJobChangeColor")
	addSpace();addMakeUpSpace()
	AddColorPickerButton(self,{getColumnPos(2),height},"First Join","notifyOnFirstJoinColor")
	addBiggerSpace();addMakeUpSpace()
	
	-- ttt
	AddLabel(self,{getColumnPos(2),height},"TTT")
	addBiggerSpace()
	AddColorPickerButton(self,{getColumnPos(2),height},"Begin Round","notifyOnTTTBeginRoundColor")
	addSpace();addMakeUpSpace()
	AddColorPickerButton(self,{getColumnPos(2),height},"End Round","notifyOnTTTEndRoundColor")
	
	addBiggerSpace()
	addBiggerSpace()
	addBiggerSpace()
	addBiggerSpace()
	addBiggerSpace()
	addBiggerSpace()
	addBiggerSpace()
	addBiggerSpace()
	
	-- restore defaults button
	AddRestoreDefaultsBtn(self,{pw*0.325,height},{
		{"selfKillTextColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"selfConnectColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"useULXTeamColors",true},
		{"npcTeamColor",SH_ADVANCEDFEED.Col.RED},
		{"weaponColor",SH_ADVANCEDFEED.Col.WHITE},
		{"distanceColor",SH_ADVANCEDFEED.Col.WHITE},
		{"backgroundColor",SH_ADVANCEDFEED.Col.TRANS},
		{"borderColor",SH_ADVANCEDFEED.Col.TRANS},
		{"useBackgroundGradient",false},
		{"borderOnSelfKill",false},
		{"csgoSkinActive",false},
		{"notifyOnJobChangeColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"notifyOnFirstJoinColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"notifyOnTTTBeginRoundColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
		{"notifyOnTTTEndRoundColor",SH_ADVANCEDFEED.Col.LIGHTGREY},
	})
	
	addBiggerSpace()
	addSpace()
	AddLabel(self,{getColumnPos(2),height},"")
	
end
function SKINPANEL:Paint(w,h)
end
vgui.Register('z_AdvancedKillFeedSkinSettings', SKINPANEL, 'DScrollPanel')

/*ACCESS PANEL*/
local ACCESS =  {}

function ACCESS:Init()

	local parent = self:GetParent()		
	local parentW,parentH = parent:GetSize()
	
	self:SetText("")
	self:SetSize(parentW*0.988,parentH*0.99)
	
	local pw,ph = self:GetSize()
	
	local function getColumnPos(column)
		if column == 1 then 
			return pw*0.05
		elseif column == 1.5 then 
			return pw*0.07
		elseif column == 2 then
			return pw*0.505
		elseif column == 2.5 then
			return pw*0.525
		end
	end
	
	local startH,spaceH = ph*0.05,ph*0.07
	
	local height = startH
	
	local function addSpace()
		height=height+(spaceH*0.8)
	end
	local function addBiggerSpace()
		height=height+(spaceH*1)
	end
	
	-- global
	AddLabel(self,{getColumnPos(1),height},"Global")
	addSpace()
	CreateCheckBox(self,{getColumnPos(1),height},"Allow admin access","accessForAdmin")	
	
	addBiggerSpace()
	AddLabel(self,{getColumnPos(1),height},"Has Access")
	addBiggerSpace()
	-- access for teams/players
	AddListViewForTeamAndPlayers(self,{getColumnPos(1),height},"accessForTeams",{"accessForTeams"})
	
end
function ACCESS:Paint(w,h)
end
vgui.Register('z_AdvancedKillFeedAccessSettings', ACCESS, 'DScrollPanel')
--addons/advancedkillfeed/lua/z_advancedkillfeed/client/cl_z_advancedkillfeed_extra.lua:
-- [[ CREATED BY ZOMBIE EXTINGUISHER]]

local tex_corner8	= surface.GetTextureID( "gui/corner8" )
local tex_corner16	= surface.GetTextureID( "gui/corner16" )
local tex_corner32	= surface.GetTextureID( "gui/corner32" )
local tex_corner64	= surface.GetTextureID( "gui/corner64" )
local tex_corner512	= surface.GetTextureID( "gui/corner512" )

function CL_ADVANCEDFEED.RoundedOutlinedRect(bordersize, x, y, w, h, color)
	
	if color == nil then return end

	surface.SetDrawColor( color )

	-- Do not waste performance if they don't want rounded corners
	if ( bordersize <= 0 ) then
		surface.DrawRect( x, y, w, h )
		return
	end

	x = math.Round( x )
	y = math.Round( y )
	w = math.Round( w )
	h = math.Round( h )
	bordersize = math.min( math.Round( bordersize ), math.floor( w / 2 ) )

	-- Draw lines between corners
	
	-- left to right ( top )
	surface.DrawRect( x+bordersize, y, w-bordersize*2, bordersize )
	-- left to right ( bottom ) 
	surface.DrawRect( x+bordersize, y+h-bordersize, w-bordersize*2, bordersize )
	-- right to bottom
	surface.DrawRect( x+w-bordersize, y+bordersize, bordersize, h-bordersize*2 )
	-- left to bottom  
	surface.DrawRect( x, y+bordersize, bordersize, h-bordersize*2 )

	-- Draw corners
	local tex = tex_corner8
	if ( bordersize > 8 ) then tex = tex_corner16 end
	if ( bordersize > 16 ) then tex = tex_corner32 end
	if ( bordersize > 32 ) then tex = tex_corner64 end
	if ( bordersize > 64 ) then tex = tex_corner512 end

	surface.SetTexture( tex )
	surface.DrawTexturedRectUV( x, y, bordersize, bordersize, 0, 0, 1, 1 )
	surface.DrawTexturedRectUV( x + w - bordersize, y, bordersize, bordersize, 1, 0, 0, 1 )
	surface.DrawTexturedRectUV( x, y + h -bordersize, bordersize, bordersize, 0, 1, 1, 0 )
	surface.DrawTexturedRectUV( x + w - bordersize, y + h - bordersize, bordersize, bordersize, 1, 1, 0, 0 )

end
--addons/advancedkillfeed/lua/z_advancedkillfeed/client/cl_z_advancedkillfeed_effects.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/zmlab2/util/cl_fonts.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

if SERVER then return end

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

////////////////////////////////////////////
///////////////// DEFAULT //////////////////
////////////////////////////////////////////
zclib.FontData["zmlab2_font00"] = {
	font = "Nexa Bold",
	extended = true,
	size = 20,
	weight = 100,
	antialias = true
}

zclib.FontData["zmlab2_font01"] = {
	font = "Nexa Bold",
	extended = true,
	size = 20,
	weight = 1,
	antialias = true
}

zclib.FontData["zmlab2_font02"] = {
	font = "Nexa Bold",
	extended = true,
	size = 50,
	weight = 1,
	antialias = true
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

zclib.FontData["zmlab2_font03"] = {
	font = "Nexa Bold",
	extended = true,
	size = 80,
	weight = 1,
	antialias = true
}

zclib.FontData["zmlab2_font04"] = {
	font = "Nexa Bold",
	extended = true,
	size = 40,
	weight = 1,
	antialias = true
}


zclib.FontData["zmlab2_font05"] = {
	font = "Nexa Bold",
	extended = true,
	size = 30,
	weight = 1,
	antialias = true
}


////////////////////////////////////////////
///////////////// VGUI /////////////////////
////////////////////////////////////////////
zclib.FontData["zmlab2_vgui_font02"] = {
	font = "Nexa Bold",
	extended = true,
	size = ScreenScale(5.9),
	weight = ScreenScale(100),
	antialias = true
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

zclib.FontData["zmlab2_vgui_font05"] = {
	font = "Nexa Bold",
	extended = true,
	size = ScreenScale(4.6),
	weight = ScreenScale(100),
	antialias = true
}

--addons/zeros_retrominer_v2.3.6/lua/zrms/sh/zrmine_materials.lua:
return gluapack()()
--lua/autorun/client/advdupe2_cl_init.lua:
AdvDupe2 = {
	Version = "1.1.0",
	Revision = 51,
	InfoText = {},
	DataFolder = "advdupe2",
	FileRenameTryLimit = 256,
	ProgressBar = {}
}

if(!file.Exists(AdvDupe2.DataFolder, "DATA"))then
	file.CreateDir(AdvDupe2.DataFolder)
end

include( "advdupe2/file_browser.lua" )
include( "advdupe2/sh_codec.lua" )
include( "advdupe2/cl_file.lua" )
include( "advdupe2/cl_ghost.lua" )

function AdvDupe2.Notify(msg,typ,dur)
	surface.PlaySound(typ == 1 and "buttons/button10.wav" or "ambient/water/drip1.wav")
	GAMEMODE:AddNotify(msg, typ or NOTIFY_GENERIC, dur or 5)
	//if not game.SinglePlayer() then
		print("[AdvDupe2Notify]\t"..msg)
	//end
end

net.Receive("AdvDupe2Notify", function()
	AdvDupe2.Notify(net.ReadString(), net.ReadUInt(8), net.ReadFloat())
end)

--addons/dwep/lua/autorun/client/cl_dwep.lua:

include("autorun/sh_dwep_config.lua")

local scrw = ScrW()
local scrh = ScrH()
local colors = DWEP.Config.Colors
local background = colors["background"]
local foreground = colors["foreground"]
local inactiveClr = colors["inactiveClr"]
local theme = colors["theme"] 
local highlight = Color(theme.r, theme.g, theme.b, 10)
surface.CreateFont( "dwep_24", { font = "Roboto", size = 24, weight = 600, bold = true, strikeout = false, outline = false, shadow = false, outline = false,})
surface.CreateFont( "dwep_22", { font = "Roboto", size = 22, weight = 600, bold = true, strikeout = false, outline = false, shadow = false, outline = false,})
surface.CreateFont( "dwep_20", { font = "Roboto", size = 20, weight = 600, bold = true, strikeout = false, outline = false, shadow = false, outline = false,})
surface.CreateFont( "dwep_18", { font = "Roboto", size = 18, weight = 600, bold = true, strikeout = false, outline = false, shadow = false, outline = false,})
surface.CreateFont( "dwep_16", { font = "Roboto", size = 16, weight = 600, bold = true, strikeout = false, outline = false, shadow = false, outline = false,})
DWEP.SearchData = DWEP.SearchData or {
	["search"] = "",
	["results"] = DWEP.Sweps,
	["searchTime"] = 0,
	["searchComplete"] = 0,
}

hook.Add("InitPostEntity", "LoadDWEPData", function()

	net.Start("dwep_load_weapon")
	net.SendToServer()

end)

net.Receive("dwep_load_weapon", function()

	local updateData = net.ReadTable()
	local class = net.ReadString()

	for k,v in pairs(updateData) do
		DWEP.AdjustValue(class, k, v)
	end 

end)

local function generateSearch()

	if not DWEP.Menu then return end 
	local searchResults = DWEP.SearchData["results"]
	local searchScroll = DWEP.Menu.SearchPanel.ScrollPanel
	searchScroll.ypos = 0
	local highlight = Color(theme.r, theme.g, theme.b, 10)
	for k,v in pairs(searchResults) do
		local id = #DWEP.Menu.SearchPanel.Results + 1 or 1
		DWEP.Menu.SearchPanel.Results[id] = vgui.Create("DButton", searchScroll)
		local resultPanel = DWEP.Menu.SearchPanel.Results[id]
		resultPanel.value = v
		resultPanel:SetPos(0,searchScroll.ypos)
		resultPanel:SetSize(searchScroll:GetWide(), 29)
		resultPanel:SetText("")
		local name = weapons.GetStored(v).PrintName or "Missing PrintName"
		local barClr = k % 2 == 0 and foreground or Color(foreground.r, foreground.g, foreground.b, 150)
		resultPanel.Paint = function(me,w,h)
			surface.SetDrawColor(barClr)
			surface.DrawRect(0,0,w,h)
			draw.SimpleText(string.upper(v .. " - " .. name), "dwep_20", w * .05, h / 2, string.find(v, DWEP.SearchData["search"]) and color_white or inactiveClr, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
			if me:IsHovered() then 
				surface.SetDrawColor(highlight)
				surface.DrawRect(0,0,w,h)
			end 

		end 
		resultPanel.DoClick = function()
			OpenDWEPWeapon(v)
		end 
		searchScroll.ypos = searchScroll.ypos + 29 * 1.05
	end 

end 

local oldResults = {}
local function refreshResults()
	if IsValid(DWEP.Menu) and IsValid(DWEP.Menu.SearchPanel) then
		if DWEP.SearchData["results"] != oldResults then 
			DWEP.SearchData["searchTime"] = nil
			local total = #DWEP.Menu.SearchPanel.Results
			for k,v in pairs(DWEP.Menu.SearchPanel.Results) do
				v:Remove()
			end 
			generateSearch()
		end 
	end 

end 

 
local function updateSearch(searchText, forward)

	local searchData = DWEP.SearchData 
	local results = searchData["results"] 
	searchData["search"] = searchText
	local searchTable = DWEP.Sweps

	if #results <= 0 or not forward then
		searchTable = DWEP.Sweps
	elseif #results >= 0 and forward then
		searchTable = results
	end 
	results = {}
	local searchTotal = #searchTable
	timer.Create("dwep_searchtime", .5, 1, function()
		searchData["searchTime"] = CurTime()
	end)
	
	for i = 1 , searchTotal do
		local v = searchTable[i]
		if string.find(v, searchText) and not table.HasValue(results, v) then
			results[#results + 1 or 1] = v
			if i >= searchTotal then
				searchData["results"] = results
			end 
		else
			searchTotal = searchTotal - 1
		end
	end 
end 

local barClr = Color(foreground.r, foreground.g, foreground.b, 150)
local function paintSbar(sbar)

local bar = sbar:GetVBar()

local buttH = 0
function bar.btnUp:Paint( w, h )
	buttH = h
end

function bar:Paint( w, h )
	draw.RoundedBox( 8, w / 2 - w / 2, buttH, w / 2, h - buttH * 2, barClr )
end

function bar.btnDown:Paint( w, h )
	
end
function bar.btnGrip:Paint( w, h )
	draw.RoundedBox( 8, w / 2 - w / 2, 0, w / 2, h , theme )
end
 
end 


function OpenDWEP(refresh)
	if not DWEP.CanDWEP(LocalPlayer()) then return end 
	DWEP.Menu = vgui.Create("DFrame")
	local dmenu = DWEP.Menu
	if not refresh then 
		dmenu:SetPos(scrw / 2 - scrw * .25, scrh * 2)
		dmenu:MoveTo(scrw / 2 - scrw * .25, scrh / 2 - scrh * .3, .5)
	else
		dmenu:SetPos(scrw / 2 - scrw * .25, scrh / 2 - scrh * .3)
	end 
	dmenu:SetSize(scrw * .5, scrh * .6)
	dmenu:SetTitle("")
	dmenu:MakePopup()
	dmenu.Paint = function(me,w,h)
		surface.SetDrawColor(background)
		surface.DrawRect(0,0,w,h)
		surface.SetDrawColor(foreground)
		surface.DrawRect(0,0,w,h * .05)
		draw.SimpleText("Venom Roleplay", "dwep_22", w / 2, h * .025, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end 
	local frameW, frameH = dmenu:GetWide(), dmenu:GetTall()
	DWEP.Menu.SearchPanel = vgui.Create("DPanel", dmenu)
	DWEP.Menu.SearchPanel.Results = DWEP.Menu.SearchPanel.Results or {}
	local searchPanel = DWEP.Menu.SearchPanel
	searchPanel:SetPos(0, frameH * .05)
	searchPanel:SetSize(frameW, frameH * .95)
	local searchData = DWEP.SearchData
	searchPanel.Paint = function(me,w,h)
		--draw.SimpleText("Weapons: ", "dwep_22", frameW * .05, frameH * .025, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
		draw.RoundedBox(8, w / 2 - w * .25, h * .108, w * .5, h * .025, foreground)
		if searchData["searchTime"] then
			local searchTime = searchData["searchTime"] * 100
			local waitTime = .35 * 100
			draw.RoundedBox(8, w / 2 - w * .25, h * .108, (w * .5) * ( math.Clamp(math.ceil(searchTime - CurTime() * 100) * -1, 0, waitTime) /  waitTime), h * .025, theme)
		end 
		--if searchData["results"] then
			draw.SimpleText(#searchData["results"] .. " Sonuç", "dwep_20", w / 2, h * .97, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		--end 
	end 
	local oldstring = DWEP.SearchData["search"]
	local searchBar = vgui.Create("DTextEntry", searchPanel)
	searchBar:SetFont("dwep_20")
	searchBar:SetPos(frameW * .05, frameH * .05)
	searchBar:SetSize(frameW * .9, frameH * .045)
	searchBar:SetUpdateOnType(true)
	searchBar.Paint = function(me,w,h) 
		surface.SetDrawColor(foreground)
		surface.DrawRect(0,0,w,h)
		me:DrawTextEntryText(color_white, theme, theme)
		if string.len(me:GetText()) <= 0 then
			draw.SimpleText("Silah ara..", "dwep_20", 5, h / 2, Color(80, 80, 80, 255), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
		end  
	end
	searchBar:SetValue(DWEP.SearchData["search"] or "")
	function searchBar:OnValueChange(value)
		oldstring = DWEP.SearchData["search"]
		local forward = false
		if #value > #oldstring then
			forward = true 
		end 
		updateSearch(value, forward)
	end 
 
	DWEP.Menu.SearchPanel.ScrollPanel = vgui.Create("DScrollPanel", searchPanel)
	local searchScroll = DWEP.Menu.SearchPanel.ScrollPanel
	searchScroll:SetPos(frameW * .05, frameH * .135)
	searchScroll:SetSize(frameW * .9, frameH * .75)
	paintSbar(searchScroll)

	generateSearch()


end 


hook.Add("Think", "DWEP_SearchUpdate", function()

	if DWEP.SearchData["searchTime"] and DWEP.SearchData["searchTime"] + .35 < CurTime() then
		refreshResults()
		DWEP.SearchData["searchTime"] = nil
	end  

end)
local checked = Material("dconfig/checked.png")


local function formatWeapon(weaponData)

	local updateData = {} 
	local function formatWeaponData(tbl, parent)
		for k, v in pairs(tbl) do
			if type(v) != "function" then 
				if type(v) == "table" then
					formatWeaponData(v, parent .. " | " .. k)
				else
					updateData[parent .. " | " .. k] = v
				end 
			end 
		end 

	end 

	for k,v in pairs(weaponData) do
		local valType = type(v)
		if valType == "table" then 
			formatWeaponData(v, k) 
		elseif valType != "Vector" and valType != "function" then 
			updateData[k] = v
		end 
	end 
	return updateData 
end 

local function UpdateWeapon(class, data)

	for k,v in pairs(data) do
		DWEP.AdjustValue(class, k, v)
	end 
	
	net.Start("dwep_update_weapon")
	net.WriteTable(data)
	net.WriteString(class)
	net.SendToServer()
	

end  

local optionButtons = {
	["Delete Data"] = {color = theme, callback = function(class, data)
		local weapon = weapons.GetStored(class) 
		weapon = DWEP.DefaultSweps[class]
		net.Start("dwep_reset_weapon")
		net.WriteString(class)
		net.SendToServer()
		DWEP.Menu:Remove()
		OpenDWEP(true) 
		LocalPlayer():ChatPrint("Verilerin silinmesi, değerlerin varsayılana dönmesi için sunucuya restart gerektirir.")
		LocalPlayer():ChatPrint(class .. " veriler silindi.")
	end},
	["Save"] = {color = theme, callback = function(class, data) UpdateWeapon(class, data) end},
	["Close"] = {color = foreground, callback = function() DWEP.Menu:Remove() OpenDWEP(true) end},
}

local function __genOrderedIndex( t )
    local orderedIndex = {}
    for key in pairs(t) do
        table.insert( orderedIndex, key )
    end
    table.sort( orderedIndex )
    return orderedIndex
end

local function orderedNext(t, state)
    -- Equivalent of the next function, but returns the keys in the alphabetic
    -- order. We use a temporary ordered key table that is stored in the
    -- table being iterated.

    local key = nil
    --print("orderedNext: state = "..tostring(state) )
    if state == nil then
        -- the first time, generate the index
        t.__orderedIndex = __genOrderedIndex( t )
        key = t.__orderedIndex[1]
    else
        -- fetch the next value
        for i = 1,table.getn(t.__orderedIndex) do
            if t.__orderedIndex[i] == state then
                key = t.__orderedIndex[i+1]
            end
        end
    end

    if key then
        return key, t[key]
    end

    -- no more value to return, cleanup
    t.__orderedIndex = nil
    return
end

local function orderedPairs(t)
    -- Equivalent of the pairs() function on tables. Allows to iterate
    -- in order
    return orderedNext, t, nil
end

function OpenDWEPWeapon(class)

	local parent = DWEP.Menu
	local weapon = weapons.GetStored(class) or nil
	local updateData = {}
	if weapon and IsValid(parent) then 
		local drawData = {
			["name"] = weapon.PrintName or "Missing Printname",
		}
		local searchPanel = DWEP.Menu.SearchPanel 
		searchPanel:Remove()
		DWEP.Menu.WeaponEditor = vgui.Create("DPanel", parent)
		local weaponEditor = DWEP.Menu.WeaponEditor
		weaponEditor:SetPos(0,parent:GetTall() * .05)
		weaponEditor:SetSize(parent:GetWide(), parent:GetTall())
		weaponEditor.Paint = function(me,w,h)

		end 
		local frameW,frameH = weaponEditor:GetWide(), weaponEditor:GetTall()

		local offset = frameW / 2 - frameW * .4
		local count = -1
		for k,v in pairs(optionButtons) do 
			count = count + 1
			local optionButton = vgui.Create("DButton", weaponEditor)
			optionButton:SetPos(offset + frameW * .2 + (count * weaponEditor:GetWide() * .2) + 10, weaponEditor:GetTall() * .15)
			optionButton:SetSize(weaponEditor:GetWide() * .2 , weaponEditor:GetTall() * .05)
			optionButton:SetText("")
			optionButton.Paint = function(me,w,h)
				surface.SetDrawColor(foreground)
				surface.DrawRect(0,0,w,h)
				draw.SimpleText(k, "dwep_20", w / 2, h /2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
				if me:IsHovered() then 
					surface.SetDrawColor(highlight)
					surface.DrawRect(0,0,w,h)
				end 
			end 
			optionButton.DoClick = function()
				v.callback(class, updateData)
			end 
		end 
		local weaponModel = vgui.Create("DModelPanel", weaponEditor)
		local model = weapon.WorldModel

		if not model or #model <= 0 then
			model = "models/weapons/w_crowbar.mdl"
		end 
		local previewSize = frameW * .4
		weaponModel:SetPos(offset, frameH * .05 )
		weaponModel:SetSize(previewSize * .5, frameH * .15)
		weaponModel:SetModel(model)
		function weaponModel:LayoutEntity( Entity ) return end 
		local CamPos = Vector( 15, -6, 60 )
		local LookAt = Vector( 0, 0, 60 )
		weaponModel.Entity:SetPos( weaponModel.Entity:GetPos() + Vector(0,0,-2))
		weaponModel:SetFOV(50)
		weaponModel:SetCamPos( CamPos )
		weaponModel:SetLookAt( LookAt ) 
		local num = .7
		local min, max = weaponModel.Entity:GetRenderBounds()
		weaponModel:SetCamPos(min:Distance(max) * Vector(num, num, num))
		weaponModel:SetLookAt((max + min) / 2)
		local oldPaint = weaponModel.Paint
		weaponModel.Paint = function(me,w,h)
			surface.SetDrawColor(foreground)
			surface.DrawRect(0,0,w,h)
			oldPaint(me,w,h)
			draw.SimpleText(string.upper(drawData["name"]), "dwep_18", w / 2, h * .1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
			draw.SimpleText(string.upper(class), "dwep_18", w / 2, h * .9, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end 
		local weaponScroll = vgui.Create("DScrollPanel", weaponEditor)  
		weaponScroll:SetPos(0, frameH * .22)
		weaponScroll:SetSize(frameW, frameH - frameH * .29)
		paintSbar(weaponScroll)

		local ypos = 0
		local inputSize = offset * 4
		local inputColor = Color(foreground.r, foreground.g, foreground.b, 150)
		local parents = {}
		local parentLayer = nil 
		local weaponData = formatWeapon(weapon) 
		for k,v in orderedPairs(weaponData) do
		local defaultValue = ""
			if type(v) == "Vector" or type(v) == "Angle" then continue end
			--if type(v) == "table" then updateData[parentLayer][k] = {value = v, changed = true, parent = parentLayer} targetUpdate = updateData[parentLayer][k]  end 
			local configOption = vgui.Create("DPanel", weaponScroll)
			configOption:SetPos(offset, ypos)
			configOption:SetSize(weaponScroll:GetWide() - offset * 2, 29)
			configOption.Paint = function(me,w,h) 
				surface.SetDrawColor(foreground)
				surface.DrawRect(0,0,w - inputSize - 2,h)
				me:DrawTextEntryText(color_white, theme, theme)
				draw.SimpleText(k .. ":", "dwep_16", 5, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
			end

			if type(v) == "string" or type(v) == "number" then
				local configInput = vgui.Create("DTextEntry", weaponScroll)
				configInput:SetPos(weaponScroll:GetWide() - offset - inputSize, ypos)
				configInput:SetSize(inputSize, 29)
				configInput:SetFont("dwep_16")
				configInput:SetUpdateOnType(true)
				configInput.Paint = function(me,w,h)
					surface.SetDrawColor(inputColor)
					surface.DrawRect(0,0,w,h)
					me:DrawTextEntryText(color_white, theme, theme)
					if string.len(me:GetText()) <= 0 and type(defaultValue) == "string" and string.len(defaultValue) > 0 then
						draw.SimpleText("Default: " .. defaultValue, "hub_20", 5, h / 2, Color(80, 80, 80, 255), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
					end 
				end
				if type(v) == "number" then
					configInput:SetNumeric(true)
				end 
				configInput:SetValue(v)
				function configInput:OnValueChange(value)
					if type(v) == "string" then
						value = tostring(value)
					else
						value = tonumber(value)
					end 
					updateData[k] = value
				end 
			end 
			if type(v) == "boolean" then
				local configInput = vgui.Create("DCheckBox", weaponScroll)
				configInput:SetPos(weaponScroll:GetWide() - offset - inputSize, ypos)
				configInput:SetSize(29, 29)
				configInput.Paint = function(me,w,h)
					surface.SetDrawColor(foreground)
					surface.DrawRect(0,0,w,h) 
					if me:GetChecked() then
						surface.SetDrawColor(theme)
						surface.SetMaterial(checked)
						surface.DrawTexturedRect(0,0,w,h)
					elseif me:IsHovered() then
						surface.SetDrawColor(highlight)
						surface.SetMaterial(checked)
						surface.DrawTexturedRect(0,0,w,h)
					end 

				end

				function configInput:OnChange(value)
					updateData[k] = value
				end 
				configInput:SetChecked(v)
			end
			ypos = ypos + 29 * 1.1
		end
	end
end 



concommand.Add("dwep", OpenDWEP)


--addons/[binbon]misc/lua/autorun/client/gorevhud.lua:

local levelgorev = {
    [1] = { gorev = "Sunucuda 2 saat vakit geçir.", renk = Color(255, 13, 13) },
    [2] = { gorev = "Bir printer kullan.", renk = Color(255, 13, 13) },
    [3] = { gorev = "Bir bitcoin kullan.", renk = Color(255, 13, 13) },
    [4] = { gorev = "Bir yere saldır, printer patlat.", renk = Color(255, 13, 13) },
    [5] = { gorev = "Bir yere saldır, bitcoin patlat.", renk = Color(255, 13, 13) },
    [6] = { gorev = "Birini öldür.", renk = Color(255, 13, 13) },
    [7] = { gorev = "Legal meslekte 1 saat zaman geçir", renk = Color(255, 13, 13) },
    [8] = { gorev = "Başkan ol.", renk = Color(255, 13, 13) },
    [9] = { gorev = "Bir silah sat.", renk = Color(255, 13, 13) },
    [10] = { gorev = "Bir silaha sahip ol.", renk = Color(255, 13, 13) },
    [11] = { gorev = "Sunucu steam grubuna katıl.", renk = Color(255, 13, 13) },
    [12] = { gorev = "Bir yapı inşa et.", renk = Color(255, 13, 13) },

}

net.Receive("gorevclient_renk", function(len, ply)
    -- Gönderilen veriyi oku
    local isValid = net.ReadBool()

    if isValid then
        local taskIndex = net.ReadUInt(4) -- İkinci veri: Görev tablosundaki indeks (1-12 arasında olmalı)

        if levelgorev[taskIndex] then
            levelgorev[taskIndex].renk = Color(95, 247, 36) 
        else
            print("Geçersiz görev indeksi: " .. tostring(taskIndex))
        end
    else
        levelgorev[taskIndex].renk = Color(255,13,13)
    end
end)


local balance_icon = Material( "lawui/balance.png", "noclamp smooth" )
local color_red = Color(255,13,13)
local color_green = Color(95,247,36)
local function lawui_open()
    lawui_main = vgui.Create("DFrame")
    lawui_main:SetSize(425, 350)
    lawui_main:SetPos(-600, ScrH() * -1 + 910)
    lawui_main:SetTitle("")
    lawui_main:SetDraggable(false)
    lawui_main:ShowCloseButton(false)
    lawui_main:MoveTo(5, ScrH() * -1 + 910, 1, 0, -1, function()
	end)
    lawui_main.Paint = function( self, w, h )
        draw.RoundedBox( 8, 0, 0, w, h, Color( 33, 34, 42 ) ) 
        draw.RoundedBox( 8, 0, 0, w, 30, Color( 37, 40, 47 ) ) 
        draw.SimpleText("Level Görevleri [F2 İle Aç/Kapa]", "LAWUI_Title", 10, 0, Color(210,210,210),TEXT_ALIGN_LEFT,TEXT_ALIGN_LEFT)

        local lastHeight = 0
        for k, v in ipairs(levelgorev) do
            draw.DrawNonParsedText(string.format("%u. %s", k, v.gorev), "LAWUI_Text", 5, 35 + lastHeight, v.renk)
            lastHeight = lastHeight + 25
        end
    end
end

local next_third = CurTime()
local lawui_openbutton = false
hook.Add("PlayerButtonDown","thirdPerson",function(ply, button)
	if button==KEY_F2 then
		if next_third > CurTime() then return end
		next_third = CurTime() + 0.5
			
        lawui_openbutton = !lawui_openbutton

        if lawui_openbutton == false then 
            if IsValid(lawui_main) then 
                lawui_main:MoveTo(-600, (ScrH() * -1) - 100, 1, 0, -1, function()
                    lawui_main:Remove()
                end)
            end 
            return 
        end 

        if lawui_openbutton == true then 
            lawui_open()
            return 
        end 
	end
end)

surface.CreateFont("loading_font", {
    font = "Comfortaa",
    size = 48,
    weight = 500,
    extended = true,
    antialias = true
})

surface.CreateFont("loading_small", {
    font = "Comfortaa",
    size = 20,
    weight = 500,
    extended = true,
    antialias = true
})

surface.CreateFont("loading_server_info", {
    font = "Comfortaa",
    size = 18,
    extended = true,
    antialias = true
})



local lastDotChange = 0
local loading_text = "Yükleniyor"
local dots = 0

hook.Add("PostDrawHUD", "draw_loading_screen", function()


    local w, h = ScrW(), ScrH()
    if RealTime() - lastDotChange >= 0.5 then
        lastDotChange = RealTime()
        dots = (dots + 1) % 4
    end
    local dotString = string.rep(".", dots)
    local loading_text = "Yükleniyor" .. dotString
    -- Arka plan
    draw.RoundedBox(0, -20, -20, w + 50, h + 50, Color(16, 16, 16, 255))

    -- Yükleniyor Yazısı
    draw.SimpleText(loading_text, "loading_font", w / 2, h / 2 - 50, Color(255, 255, 255), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    
    -- Alt Bilgi Yazısı
    draw.SimpleText("Bağlantınız tamamlandıktan sonra oynayabilirsiniz.", "loading_small", w / 2, h / 2 + 10, Color(200, 200, 200), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

    draw.SimpleText("Venom DarkRP | discord.gg/eniyisi", "loading_server_info", w / 2, h - 30, Color(180, 180, 180), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
end)

net.Receive("tamamenbaglandimnet", function()
    hook.Remove("PostDrawHUD", "draw_loading_screen")
end)

--addons/partysystem/lua/autorun/client/partyclosebutton.lua:
local PANEL = {}

function PANEL:Init()
	self:GetParent().btnClose:SetVisible(false)
	self:GetParent().btnMaxim:SetVisible(false)
	self:GetParent().btnMinim:SetVisible(false)

	self.Paint = function() end
	self:SetSize(18,18)
	self:SetText("X")
	self:SetFont("roboto16")
	self:SetTextColor(Color(255,255,255))
	self:AlignRight(2)
	self:AlignTop(2)
	self.DoClick = function()
		self:GetParent():Close()
	end
end

function PANEL:ShowCloseButton(shouldshow)
	self:SetVisible(shouldshow)
end

derma.DefineControl("PartyCloseButton",nil,PANEL,"DButton")
--lua/vgui/bvgui/columnlayout.lua:
local PANEL = {}

bVGUI.COLUMN_LAYOUT_COLUMN_GROW = 0
bVGUI.COLUMN_LAYOUT_COLUMN_SHRINK = 1
bVGUI.COLUMN_LAYOUT_COLUMN_GROW_COLUMN = 2

function PANEL:Init()
	self.Columns = {}
	self.Rows = {}
	self.ColumnPadding = 0
	self.RowPadding = 0

	function self.pnlCanvas:PerformLayout()
		self:GetParent():ColumnLayout()
		self:InvalidateParent(true)
	end
end

function PANEL:SetPaddings(column_padding, row_padding)
	self.ColumnPadding = column_padding
	self.RowPadding = row_padding
end

function PANEL:SetColumns(...)
	self.Columns = {...}
	self.GrowColumnCount = 0
	for _,v in ipairs(self.Columns) do
		if (v == bVGUI.COLUMN_LAYOUT_COLUMN_GROW or v == bVGUI.COLUMN_LAYOUT_COLUMN_GROW_COLUMN) then
			self.GrowColumnCount = self.GrowColumnCount + 1
		end
	end
end

function PANEL:AddRow(...)
	local i = table.insert(self.Rows, {...})
	self.pnlCanvas:InvalidateLayout(true)
	return i
end

function PANEL:RemoveRow(row_index)
	for _,element in ipairs(self.Rows[row_index]) do
		element:Remove()
	end
	table.remove(self.Rows, row_index)
	self.pnlCanvas:InvalidateLayout(true)
end

function PANEL:ColumnLayout()
	local column_widths = {}
	local row_heights = {}
	for row_i, elements in ipairs(self.Rows) do
		for column_i, element in ipairs(elements) do
			if (self.Columns[column_i] == bVGUI.COLUMN_LAYOUT_COLUMN_SHRINK) then
				local element_w = element:GetWide()
				local column_w = column_widths[column_i]
				if (not column_w or element_w > column_w) then
					column_widths[column_i] = element_w
				end
			end
			local element_h = element:GetTall()
			local row_h = row_heights[row_i]
			if (not row_h or element_h > row_h) then
				row_heights[row_i] = element_h
			end
		end
	end
	local grow_column_width = 0
	for i,v in pairs(column_widths) do
		grow_column_width = grow_column_width - v - self.ColumnPadding
	end
	grow_column_width = ((grow_column_width + self:GetWide()) / self.GrowColumnCount) - 4

	local row_y = 0
	for row_i, elements in ipairs(self.Rows) do
		local column_x = 0
		for column_i, element in ipairs(elements) do
			local column_sizing = self.Columns[column_i]
			if (column_sizing == bVGUI.COLUMN_LAYOUT_COLUMN_SHRINK) then
				element:SetWide(column_widths[column_i])
				element:SetPos(column_x, row_y)
				column_x = column_x + column_widths[column_i] + self.ColumnPadding
			elseif (column_sizing == bVGUI.COLUMN_LAYOUT_COLUMN_GROW or column_sizing == bVGUI.COLUMN_LAYOUT_COLUMN_GROW_COLUMN) then
				if (bVGUI.COLUMN_LAYOUT_COLUMN_GROW_COLUMN) then
					element:SetWide(grow_column_width)
				else
					element:SetSize(grow_column_width, row_heights[row_i])
				end
				element:SetPos(column_x, row_y)
				column_x = column_x + grow_column_width + self.ColumnPadding
			end
		end
		row_y = row_y + row_heights[row_i] + self.RowPadding
	end
end

derma.DefineControl("bVGUI.ColumnLayout", nil, PANEL, "bVGUI.ScrollPanel")
--lua/vgui/bvgui/header.lua:
local PANEL = {}

function PANEL:Init()
	self:SetTall(24)
	self:DockPadding(5,5,5,5)

	self.Label = vgui.Create("DLabel", self)
	self.Label:SetTextColor(bVGUI.COLOR_BLACK)
	self.Label:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "BOLD", 14))
	self.Label:Dock(FILL)
	self.Label:SetContentAlignment(5)

	self:SetText("Header")
	self:SetColor(bVGUI.COLOR_GMOD_BLUE)
end

function PANEL:SetText(text)
	self.Text = text
	self.Label:SetText(self.Text)
end
function PANEL:SetColor(color)
	self.Color = color
	self.Label:SetTextColor(bVGUI.TextColorContrast(color))
end

function PANEL:SetIcon(icon)
	if (icon == false) then
		if (IsValid(self.IconLeft)) then
			self.IconLeft:Remove()
		end
		if (IsValid(self.IconRight)) then
			self.IconRight:Remove()
		end
	else
		if (IsValid(self.IconLeft)) then
			self.IconLeft:SetImage(icon)
		else
			self.IconLeft = vgui.Create("DImage", self)
			self.IconLeft:SetSize(16,16)
			self.IconLeft:SetImage(icon)
		end

		if (IsValid(self.IconRight)) then
			self.IconRight:SetImage(icon)
		else
			self.IconRight = vgui.Create("DImage", self)
			self.IconRight:SetSize(16,16)
			self.IconRight:SetImage(icon)
		end
	end
end

function PANEL:PerformLayout()
	if (IsValid(self.IconLeft)) then
		self.IconLeft:AlignLeft(5)
		self.IconLeft:CenterVertical()
	end
	if (IsValid(self.IconRight)) then
		self.IconRight:AlignRight(5)
		self.IconRight:CenterVertical()
	end
end

function PANEL:Paint(w,h)
	surface.SetDrawColor(self.Color)
	surface.DrawRect(0,0,w,h)

	surface.SetMaterial(bVGUI.MATERIAL_GRADIENT_LIGHT)
	surface.DrawTexturedRect(0,0,w,h)
end
function PANEL:PaintOver(w,h)
	surface.SetDrawColor(0,0,0,200)
	surface.DrawRect(0,h - 1,w,1)
end

derma.DefineControl("bVGUI.Header", nil, PANEL, "DPanel")
--lua/vgui/bvgui/loadingpanel.lua:
local PANEL = {}

function PANEL:Init()
	self.LoadingPaint = self.Paint
end

function PANEL:Paint(w,h)
	if (not self.EndTime or SysTime() >= self.EndTime) then
		self.EndTime = SysTime() + 2
	end
	self.Rotation = ((self.EndTime - SysTime()) / 2) * 360

	if (self.Loading == true) then
		local size = 24
		surface.SetDrawColor(bVGUI.COLOR_WHITE)
		surface.SetMaterial(bVGUI.MATERIAL_LOADING_ICON)
		surface.DrawTexturedRectRotated(w / 2, h / 2, size, size, math.Round(self.Rotation))
	end
end

function PANEL:SetLoading(is_loading)
	self.Loading = is_loading
end
function PANEL:GetLoading()
	return self.Loading
end

derma.DefineControl("bVGUI.LoadingPanel", nil, PANEL, "DPanel")
derma.DefineControl("bVGUI.LoadingScrollPanel", nil, table.Copy(PANEL), "bVGUI.ScrollPanel")
--lua/vgui/bvgui/pagination.lua:
local PANEL = {}

local page_btn_font = bVGUI.FONT(bVGUI.FONT_RUBIK, "REGULAR", 14)
local page_btn_width = 23
local page_btn_padding = 15
local inactive_page_textcolor = Color(175,175,175)

local next_btn_mat = Material("vgui/bvgui/right-arrow.png", "smooth")
local prev_btn_mat = Material("vgui/bvgui/left-arrow.png", "smooth")

function PANEL:LoadingDebounce()
	if (IsValid(self.LoadingPanel)) then
		if (self.LoadingPanel:GetLoading() == true) then
			return true
		end
	end
	return false
end
function PANEL:SetLoadingPanel(loading_panel)
	self.LoadingPanel = loading_panel
end

function PANEL:Init()
	local pagination = self

	self.CurrentPage = 1
	self.Pages = 0

	self.Previous = vgui.Create("bVGUI.BlankPanel", self)
	self.Previous:SetMouseInputEnabled(true)
	self.Previous:SetCursor("hand")
	self.Previous:Dock(LEFT)
	self.Previous.Old_OnMouseReleased = self.Previous.OnMouseReleased
	function self.Previous:OnMouseReleased(m)
		if (self:GetParent().LoadingPanel and self:GetParent():LoadingDebounce() == true) then return end
		if (pagination:GetPage() ~= 1) then
			pagination:SetPage(pagination:GetPage() - 1)
			if (pagination.OnPageSelected) then
				pagination:OnPageSelected(pagination:GetPage())
			end
		end
		if (self.Old_OnMouseReleased) then
			self:Old_OnMouseReleased(m)
		end
	end
	self.Previous.Btn = vgui.Create("DImage", self.Previous)
	self.Previous.Btn:SetSize(16,16)
	self.Previous.Btn:SetMaterial(prev_btn_mat)
	function self.Previous:PerformLayout()
		self.Btn:Center()
	end

	self.PagesContainer = vgui.Create("bVGUI.BlankPanel", self)
	self.PagesContainer:SetMouseInputEnabled(true)
	self.PagesContainer:SetCursor("hand")
	function self.PagesContainer:OnMouseReleased()
		if (self:GetParent().LoadingPanel and self:GetParent():LoadingDebounce() == true) then return end
		if (self.HoveredButton and self.HoveredButton > 0 and (self:GetParent().Infinite == true or self.HoveredButton <= math.min(9, self:GetParent():GetPages()))) then
			if self:GetParent().MovingTo == self.HoveredButton then return end
			self:GetParent().MovingTo = self.HoveredButton
			if (pagination.DrawPages[self.HoveredButton] == "∞") then
				return
			elseif (pagination.DrawPages[self.HoveredButton] == "..") then
				if (self.HoveredButton == #pagination.DrawPages - 1) then
					if (self:GetParent().Infinite) then
						self:GetParent().Next:OnMouseReleased(MOUSE_LEFT)
						return
					else
						pagination:SetPage(pagination.DrawPages[self.HoveredButton - 1] + 1)
					end
				elseif (self.HoveredButton == 2) then
					if (self:GetParent().Infinite) then
						self:GetParent().Previous:OnMouseReleased(MOUSE_LEFT)
						return
					else
						pagination:SetPage(pagination.DrawPages[self.HoveredButton + 1] - 1)
					end
				end
			else
				pagination:SetPage(pagination.DrawPages[self.HoveredButton])
			end
			if (pagination.OnPageSelected) then
				pagination:OnPageSelected(pagination:GetPage())
			end
		end
	end

	self.Next = vgui.Create("bVGUI.BlankPanel", self)
	self.Next:SetMouseInputEnabled(true)
	self.Next:SetCursor("hand")
	self.Next:Dock(RIGHT)
	self.Next.Old_OnMouseReleased = self.Next.OnMouseReleased
	function self.Next:OnMouseReleased(m)
		if (self:GetParent().LoadingPanel and self:GetParent():LoadingDebounce() == true) then return end
		if (self:GetParent().Infinite or pagination:GetPage() < pagination:GetPages()) then
			pagination:SetPage(pagination:GetPage() + 1)
			if (pagination.OnPageSelected) then
				pagination:OnPageSelected(pagination:GetPage())
			end
		end
		if (self.Old_OnMouseReleased) then
			self:Old_OnMouseReleased(m)
		end
	end
	self.Next.Btn = vgui.Create("DImage", self.Next)
	self.Next.Btn:SetSize(16,16)
	self.Next.Btn:SetMaterial(next_btn_mat)
	function self.Next:PerformLayout()
		self.Btn:Center()
	end

	local page_poly = {
		{x = 0, y = 0},
		{x = 0, y = 0},
		{x = 0, y = 0},
		{x = 0, y = 0}
	}
	local hover_poly = {
		{x = 0, y = 0},
		{x = 0, y = 0},
		{x = 0, y = 0},
		{x = 0, y = 0}
	}
	function self.PagesContainer:Paint(w,h)
		local pages = pagination.Pages
		local current_page = pagination.CurrentPage
		if (pages == 0) then return end

		local infinite_controlled_pages = pages
		if (self:GetParent().Infinite) then infinite_controlled_pages = current_page + 2 end

		for i=0,math.min(infinite_controlled_pages, 9) do
			surface.SetDrawColor(40, 40, 40)
			surface.DrawLine((i * page_btn_width) + (i * page_btn_padding), h, ((i + 1) * page_btn_width) + (i * page_btn_padding), 0)
		end

		self.RhombusLerp:DoLerp()

		draw.NoTexture()

		local position = self.RhombusLerp:GetValue()

		page_poly[1].x = position + page_btn_width
		--page_poly[1].y = 0

		page_poly[2].x = position + page_btn_width + page_btn_padding + page_btn_width + 1
		--page_poly[2].y = 0

		page_poly[3].x = position + page_btn_width + page_btn_padding + 1
		page_poly[3].y = h

		page_poly[4].x = position
		page_poly[4].y = h

		surface.SetDrawColor(27, 127, 249)
		surface.DrawPoly(page_poly)

		if (self:IsHovered()) then
			-- please, a moment of silence for the amount of hours this took
			local x,y = self:ScreenToLocal(gui.MousePos())
			local rel_x = (x / (page_btn_width + page_btn_padding) % 1) * (page_btn_width + page_btn_padding)
			local rhombus_midpoint = h * (1 - (rel_x / page_btn_width))
			local hovered_position = x / (page_btn_width + page_btn_padding)
			if (rel_x < page_btn_width) then
				if (rhombus_midpoint < y) then
					hovered_position = math.floor(hovered_position + 1)
				else
					hovered_position = math.floor(hovered_position)
				end
			else
				hovered_position = math.ceil(hovered_position)
			end
			self.HoveredButton = hovered_position
			if (hovered_position > 0 and hovered_position <= math.min(9, infinite_controlled_pages)) then
				hovered_position = (hovered_position - 1) * (page_btn_width + page_btn_padding)

				hover_poly[1].x = hovered_position + page_btn_width
				--hover_poly[1].y = 0

				hover_poly[2].x = hovered_position + page_btn_width + page_btn_padding + page_btn_width + 1
				--hover_poly[2].y = 0

				hover_poly[3].x = hovered_position + page_btn_width + page_btn_padding + 1
				hover_poly[3].y = h

				hover_poly[4].x = hovered_position
				hover_poly[4].y = h

				surface.SetDrawColor(27, 127, 249, 100)
				surface.DrawPoly(hover_poly)
			end
		end

		for i,v in ipairs(self:GetParent().DrawPages) do
			if (v == current_page or (i == self.HoveredButton and self:IsHovered())) then
				draw.SimpleText(v, page_btn_font, ((page_btn_width + page_btn_padding) * i) - (page_btn_padding / 2), h / 2, bVGUI.COLOR_WHITE, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
			else
				draw.SimpleText(v, page_btn_font, ((page_btn_width + page_btn_padding) * i) - (page_btn_padding / 2), h / 2, inactive_page_textcolor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
			end
		end
	end
end

function PANEL:UpdatePageButtons()
	self.DrawPages = {}

	local all_pages = self:GetPages()
	if (self.Infinite) then all_pages = "∞" end
	local current_page = self:GetPage()

	if (current_page < 8) then
		local _all_pages = all_pages
		if (self.Infinite) then _all_pages = current_page end
		for i=1,math.min(_all_pages, 7) do
			table.insert(self.DrawPages, i)
		end
		table.insert(self.DrawPages, "..")
		table.insert(self.DrawPages, all_pages)
	elseif (self.Infinite ~= true and current_page >= (all_pages - 6)) then
		table.insert(self.DrawPages, 1)
		table.insert(self.DrawPages, "..")
		for i=all_pages - 6, all_pages do
			table.insert(self.DrawPages, i)
		end
	elseif (self.Infinite) then
		table.insert(self.DrawPages, 1)
		table.insert(self.DrawPages, "..")
		for i=current_page - 4, current_page do
			table.insert(self.DrawPages, i)
		end
		table.insert(self.DrawPages, "..")
		table.insert(self.DrawPages, all_pages)
	elseif (current_page <= 12) then
		table.insert(self.DrawPages, 1)
		table.insert(self.DrawPages, "..")
		for i=8,12 do
			table.insert(self.DrawPages, i)
		end
		table.insert(self.DrawPages, "..")
		table.insert(self.DrawPages, all_pages)
	else
		table.insert(self.DrawPages, 1)
		table.insert(self.DrawPages, "..")
		table.insert(self.DrawPages, current_page - 2)
		table.insert(self.DrawPages, current_page - 1)
		table.insert(self.DrawPages, current_page)
		table.insert(self.DrawPages, current_page + 1)
		table.insert(self.DrawPages, current_page + 2)
		table.insert(self.DrawPages, "..")
		table.insert(self.DrawPages, all_pages)
	end
	for i,v in ipairs(self.DrawPages) do
		if (v == current_page) then
			local rhombus_pos = (i - 1) * (page_btn_width + page_btn_padding)
			if (not self.PagesContainer.RhombusLerp) then
				self.PagesContainer.RhombusLerp = bVGUI.Lerp(rhombus_pos, rhombus_pos, .5)
			else
				self.PagesContainer.RhombusLerp:SetTo(rhombus_pos)
			end
			break
		end
	end
	if (self.Infinite) then all_pages = current_page + 2 end
	self.PagesContainer:SetWide(((math.min(all_pages, 9) + 1) * page_btn_width) + (math.min(all_pages, 9) * page_btn_padding))
end

function PANEL:SetPage(page)
	if (page == "∞") then return end
	self.CurrentPage = page
	self:UpdatePageButtons()
end
function PANEL:GetPage()
	return self.CurrentPage
end

function PANEL:SetPages(pages)
	self.Pages = pages
	self.CurrentPage = math.min(self.CurrentPage, pages)
	self:UpdatePageButtons()
end
function PANEL:GetPages()
	return self.Pages
end

function PANEL:SetInfinite(infinite)
	self.Infinite = infinite
	self:UpdatePageButtons()
end

function PANEL:PerformLayout()
	self.PagesContainer:SetTall(self:GetTall())
	self.PagesContainer:CenterHorizontal()
	self.Previous:SetSize(self:GetTall(), self:GetTall())
	self.Next:SetSize(self:GetTall(), self:GetTall())
end

derma.DefineControl("bVGUI.Pagination", nil, PANEL, "bVGUI.BlankPanel")
--lua/vgui/bvgui/player_tooltip.lua:
if (bVGUI.PlayerTooltip) then
	if (IsValid(bVGUI.PlayerTooltip.Panel)) then
		bVGUI.PlayerTooltip.Panel:Remove()
	end
end

bVGUI.PlayerTooltip = {}
bVGUI.PlayerTooltip.Close = function()
	if (IsValid(bVGUI.PlayerTooltip.Panel)) then
		if (bVGUI.PlayerTooltip.Panel.Focused ~= true) then
			bVGUI.PlayerTooltip.Panel:Remove()
		end
	end
end
bVGUI.PlayerTooltip.Create = function(options)
	if (IsValid(bVGUI.PlayerTooltip.Panel)) then
		if (bVGUI.PlayerTooltip.Panel.Focused ~= true) then
			bVGUI.PlayerTooltip.Panel:Remove()
		end
	end

	if (not IsValid(options.player) and options.account_id) then
		local ply = player.GetByAccountID(options.account_id)
		if (IsValid(ply)) then
			options.player = ply
		end
	elseif (not IsValid(options.player) and options.steamid64) then
		local ply = player.GetBySteamID64(options.steamid64)
		if (IsValid(ply)) then
			options.player = ply
		end
	end

	local data = {}
	data.nick = "Loading..."
	data.usergroup = "Loading..."
	data.team_name = "(offline)"
	data.team_color = bVGUI.BUTTON_COLOR_RED
	if (IsValid(options.player)) then
		data.account_id = options.player:AccountID()
		data.steamid = options.player:SteamID()
		data.steamid64 = options.player:SteamID64()
		data.team_name = team.GetName(options.player:Team())
		data.team_color = team.GetColor(options.player:Team())
		data.nick = options.player:Nick()
		data.usergroup = options.player:GetUserGroup()
	elseif (options.steamid64) then
		data.account_id = GAS:SteamID64ToAccountID(options.steamid64)
		data.steamid = util.SteamIDFrom64(options.steamid64)
		data.steamid64 = options.steamid64
	elseif (options.account_id) then
		data.account_id = options.account_id
		data.steamid = GAS:AccountIDToSteamID(options.account_id)
		data.steamid64 = util.SteamIDTo64(data.steamid)
	end

	bVGUI.PlayerTooltip.Panel = vgui.Create("bVGUI.Frame")
	local pnl = bVGUI.PlayerTooltip.Panel
	pnl.Options = options
	pnl.CreatorPanel = options.creator
	pnl:ShowFullscreenButton(false)
	pnl:SetSize(316, 234)
	pnl:SetPos(gui.MouseX() + 15, gui.MouseY() + 15)
	pnl:DockPadding(10,24 + 10,10,10)
	pnl:MakePopup()
	pnl:SetMouseInputEnabled(false)
	pnl:SetKeyBoardInputEnabled(false)
	pnl:SetDrawOnTop(true)
	pnl.OriginalTitle = data.nick

	function pnl:OnRemove()
		timer.Simple(1, function()
			if (not IsValid(bVGUI.PlayerTooltip.Panel)) then
				bVGUI.PlayerTooltip.MouseX = false 
				bVGUI.PlayerTooltip.MouseY = false
			end
		end)
	end

	function pnl:PostPerformLayout(w, h)
		if (options.focustip) then
			pnl:SetTitle(bVGUI.EllipsesText(data.nick, bVGUI.FONT(bVGUI.FONT_RUBIK, "BOLD", 14), w / 3) .. " · " .. options.focustip)
		else
			pnl:SetTitle(data.nick)
		end
	end

	function pnl:OnFocusChanged(got)
		if got then return end 
		if self.Pinned then return end 
		if not GAS.LocalConfig.ClosePlayerPopups then return end		
		self:Close()
	end

	pnl.OldPaint = pnl.Paint
	function pnl:Paint(w,h)
		if (not self.Focused) then
			surface.SetAlphaMultiplier(0.5)
		end
		self:OldPaint(w,h)

		if (self.Focused ~= true) then
			local x,y = gui.MouseX(), gui.MouseY()
			bVGUI.PlayerTooltip.MouseX = Lerp(FrameTime() * 10, bVGUI.PlayerTooltip.MouseX or x, x)
			bVGUI.PlayerTooltip.MouseY = Lerp(FrameTime() * 10, bVGUI.PlayerTooltip.MouseY or y, y)

			self:SetPos(bVGUI.PlayerTooltip.MouseX + 15, bVGUI.PlayerTooltip.MouseY + 15)
		end

		if (not self.Focused) then
			if (not system.HasFocus()) then
				self:Remove()
			elseif (self.CreatorPanel) then
				if (not IsValid(self.CreatorPanel)) then
					self:Remove()
				elseif (vgui.GetHoveredPanel() ~= self.CreatorPanel) then
					if (self.HoverFrameNumber) then
						if (FrameNumber() > self.HoverFrameNumber) then
							self:Remove()
						end
					else
						self.HoverFrameNumber = FrameNumber() + 1
					end
				end
			end
		end
	end

	local avatar_container = vgui.Create("bVGUI.BlankPanel", pnl)
	avatar_container:SetMouseInputEnabled(true)
	avatar_container:Dock(LEFT)
	avatar_container:DockMargin(0,0,10,0)
	avatar_container:SetWide(110)

	local avatar = vgui.Create("AvatarImage", avatar_container)
	avatar:Dock(TOP)
	avatar:SetSize(avatar_container:GetWide(), avatar_container:GetWide())
	if (IsValid(options.player)) then
		avatar:SetPlayer(options.player, 128)
	else
		avatar:SetSteamID(data.steamid64, 128)
	end

	local usergroup = vgui.Create("bVGUI.InfoBar", avatar_container)
	usergroup:Dock(TOP)
	usergroup:DockMargin(0,10,0,10)
	usergroup:SetText(data.usergroup)
	usergroup:AllowCopy(options.copiedphrase)
	usergroup:SetColor(bVGUI.INFOBAR_COLOR_PURPLE)
	bVGUI.AttachTooltip(usergroup, {Text = "Usergroup"})

	local job = vgui.Create("bVGUI.InfoBar", avatar_container)
	job:Dock(TOP)
	job:DockMargin(0,0,0,10)
	job:SetText(data.team_name)
	job:AllowCopy(options.copiedphrase)
	job:SetColor(data.team_color)
	if (DarkRP) then
		bVGUI.AttachTooltip(job, {Text = "Job"})
	else
		bVGUI.AttachTooltip(job, {Text = "Team"})
	end

	local info_container = vgui.Create("bVGUI.BlankPanel", pnl)
	info_container:Dock(FILL)
	info_container:SetMouseInputEnabled(true)
	info_container.SIG = true

	local nick = vgui.Create("bVGUI.InfoBar", info_container)
	nick:Dock(TOP)
	nick:DockMargin(0,0,0,10)
	nick:SetText(data.nick)
	nick:AllowCopy(options.copiedphrase)
	nick:SetColor(bVGUI.INFOBAR_COLOR_PURPLE)

	local steamid = vgui.Create("bVGUI.InfoBar", info_container)
	steamid:Dock(TOP)
	steamid:DockMargin(0,0,0,10)
	steamid:SetText(data.steamid)
	steamid:AllowCopy(options.copiedphrase)

	local steamid64 = vgui.Create("bVGUI.InfoBar", info_container)
	steamid64:Dock(TOP)
	steamid64:DockMargin(0,0,0,10)
	steamid64:SetText(data.steamid64)
	steamid64:AllowCopy(options.copiedphrase)

	local steam_profile = vgui.Create("bVGUI.Button", info_container)
	steam_profile:Dock(TOP)
	steam_profile:DockMargin(0,0,0,10)
	steam_profile:SetText(bVGUI.L("open_steam_profile"))
	steam_profile:SetColor(bVGUI.BUTTON_COLOR_BLUE)
	function steam_profile:DoClick()
		if (GAS) then
			GAS:OpenURL("https://steamcommunity.com/profiles/" .. steamid64:GetText())
		else
			gui.OpenURL("https://steamcommunity.com/profiles/" .. steamid64:GetText())
		end
	end

	local context_menu = vgui.Create("bVGUI.Button", info_container)
	context_menu:Dock(TOP)
	context_menu:DockMargin(0,0,0,10)
	context_menu:SetText(bVGUI.L("open_context_menu"))
	context_menu:SetColor(bVGUI.BUTTON_COLOR_RED)
	context_menu:SetDisabled(not IsValid(options.player))
	function context_menu:DoClick()
		if (IsValid(options.player)) then
			if (GAS) then GAS:PlaySound("popup") end
			properties.OpenEntityMenu(options.player, LocalPlayer():GetEyeTrace())
		else
			if (GAS) then GAS:PlaySound("error") end
			self:SetDisabled(true)
		end
	end
	
	if (not IsValid(options.player)) then
		pnl.GetPlayerData = function()
			GAS:untimer("PlayerTooltip:Load:" .. data.account_id)
			GAS.OfflinePlayerData:AccountID(tonumber(data.account_id), function(success, offline_data)
				if (not IsValid(pnl)) then return end
				if (success) then
					data.nick = offline_data.nick
					data.usergroup = offline_data.usergroup

					pnl.OriginalTitle = offline_data.nick
					nick:SetText(offline_data.nick)
					usergroup:SetText(offline_data.usergroup)
					if (options.focustip) then
						pnl:SetTitle(offline_data.nick .. " · " .. options.focustip)
					else
						pnl:SetTitle(offline_data.nick)
					end
				else
					data.nick = "(unknown)"
					data.usergroup = "(unknown)"

					pnl.OriginalTitle = bVGUI.L("unknown")
					nick:SetText(bVGUI.L("unknown"))
					usergroup:SetText(bVGUI.L("unknown"))
					if (options.focustip) then
						pnl:SetTitle(bVGUI.L("unknown") .. " · " .. options.focustip)
					else
						pnl:SetTitle(bVGUI.L("unknown"))
					end
				end
			end)
			pnl.GetPlayerData = nil
		end
		if (GAS.OfflinePlayerData.data[data.account_id] ~= nil) then
			pnl.GetPlayerData()
		else
			GAS:timer("PlayerTooltip:Load:" .. data.account_id, .5, 1, function()
				if (not IsValid(pnl)) then return end
				pnl.GetPlayerData()
			end)
		end
	end

	return pnl
end
bVGUI.PlayerTooltip.Focus = function()
	if (IsValid(bVGUI.PlayerTooltip.Panel)) then
		if (GAS) then GAS:PlaySound("flash") end
		bVGUI.PlayerTooltip.Panel.Focused = true
		bVGUI.PlayerTooltip.Panel:MakePopup()
		bVGUI.PlayerTooltip.Panel:MoveToFront()
		bVGUI.PlayerTooltip.Panel:SetTitle(bVGUI.PlayerTooltip.Panel.OriginalTitle)
		bVGUI.PlayerTooltip.Panel:SetDrawOnTop(false)
		if (bVGUI.PlayerTooltip.Panel.GetPlayerData) then
			bVGUI.PlayerTooltip.Panel.GetPlayerData()
		end
	end
end

bVGUI.PlayerTooltip.Attach = function(pnl, options)
	options.creator = pnl
	if (pnl.bVGUI_PlayerTooltipOptions) then
		pnl.bVGUI_PlayerTooltipOptions = options
		return
	else
		pnl.bVGUI_PlayerTooltipOptions = options
	end

	pnl.bVGUI_PLAYER_TOOLTIP_OLD_CURSOR_ENTER = pnl.OnCursorEntered
	pnl.bVGUI_PLAYER_TOOLTIP_OLD_CURSOR_EXIT = pnl.OnCursorExited
	function pnl:OnCursorEntered(...)
		bVGUI.PlayerTooltip.Create(self.bVGUI_PlayerTooltipOptions)
		if (self.bVGUI_PLAYER_TOOLTIP_OLD_CURSOR_ENTER) then self.bVGUI_PLAYER_TOOLTIP_OLD_CURSOR_ENTER(self, ...) end
	end
	function pnl:OnCursorExited(...)
		bVGUI.PlayerTooltip.Close()
		if (self.bVGUI_PLAYER_TOOLTIP_OLD_CURSOR_EXIT) then self.bVGUI_PLAYER_TOOLTIP_OLD_CURSOR_EXIT(self, ...) end
	end
end

bVGUI.PlayerTooltip.Unattach = function(pnl)
	pnl.bVGUI_PlayerTooltipOptions = nil
	pnl.OnCursorEntered = pnl.bVGUI_PLAYER_TOOLTIP_OLD_CURSOR_ENTER
	pnl.OnCursorExited = pnl.bVGUI_PLAYER_TOOLTIP_OLD_CURSOR_EXIT
end
--lua/vgui/bvgui/progressbar.lua:
return gluapack()()
--lua/vgui/bvgui/progressbar.lua:
local PANEL = {}

function PANEL:Init()
	self.Min = 0
	self.Max = 0
	self.Progress = 0
	self.Fraction = 0
	self.Decimals = false

	self.Text = vgui.Create("DLabel", self)
	self.Text:SetText("")
	self.Text:SetTextColor(bVGUI.COLOR_WHITE)
	self.Text:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "BOLD", 14))

	self.ProgressBar_X = -1
	self.ProgressBar_Col = -1
end

function PANEL:Paint(w,h)
	surface.SetDrawColor(bVGUI.COLOR_SLATE)
	surface.DrawRect(0,0,w,h)

	--surface.SetMaterial(bVGUI.MATERIAL_GRADIENT_LIGHT)
	--surface.DrawTexturedRect(0,0,w,h)

	local w_frac = self.Fraction * w
	if (self.ProgressBar_X == -1) then
		self.ProgressBar_X = w_frac
	else
		self.ProgressBar_X = Lerp(FrameTime() * 10, self.ProgressBar_X, w_frac)
	end

	local frac_255 = self.Fraction * 255
	if (self.ProgressBar_Col == -1) then
		self.ProgressBar_Col = frac_255
	else
		self.ProgressBar_Col = Lerp(FrameTime() * 10, self.ProgressBar_Col, frac_255)
	end

	surface.SetDrawColor(255 - self.ProgressBar_Col, self.ProgressBar_Col, 0, 255)
	surface.DrawRect(0, 0, self.ProgressBar_X, h)

	--surface.SetMaterial(bVGUI.MATERIAL_GRADIENT_LIGHT)
	--surface.DrawTexturedRect(0, 0, self.ProgressBar_X, h)

	surface.SetDrawColor(bVGUI.COLOR_BLACK)
	surface.DrawOutlinedRect(0,0,w,h)
end

function PANEL:Think()
	self.Fraction = (self.Progress - self.Min) / (self.Max - self.Min)
	if (self.Decimals == false and tostring(self.Fraction * 100):find("%.")) then
		self.Decimals = true
	end

	if (self.Fraction > 0) then
		if (self.Decimals) then
			local percentage = math.Round(self.Fraction * 100, 1)
			if (percentage % 1 == 0 and self.Fraction ~= 1) then
				percentage = percentage .. ".0"
			end
			self.Text:SetText(percentage .. "%")
		else
			self.Text:SetText(math.Round(self.Fraction * 100, 1) .. "%")
		end
		self.Text:SizeToContents()
		self.Text:Center()
	elseif (self.Text:GetText() ~= "") then
		self.Text:SetText("")
	end
end

derma.DefineControl("bVGUI.ProgressBar", nil, PANEL, "DPanel")
--lua/vgui/openpermissions_tree.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/config/config.lua:
--[[-------------------------------------------------------------------------
DarkRP config settings.
-----------------------------------------------------------------------------

This is the settings file of DarkRP. Every DarkRP setting is listed here.

Warning:
If this file is missing settings (because of e.g. an update), DarkRP will assume default values for these settings.
Don't worry about updating this file. If a new setting is added you can manually add them to this file.
---------------------------------------------------------------------------]]


--[[
Toggle settings.
Set to true or false.
]]

-- voice3D - Enable/disable 3DVoice is enabled.
GM.Config.voice3D                       = true
-- AdminsCopWeapons - Enable/disable admins spawning with cop weapons.
GM.Config.AdminsCopWeapons              = true
-- adminBypassJobCustomCheck - Enable/disable whether an admin can force set a job with whenever customCheck returns false.
GM.Config.adminBypassJobRestrictions    = true
-- Acts/Taunts - Enable/disable Taunts (e.g. act salute)
GM.Config.allowActs                     = false
-- allow people getting their own custom jobs.
GM.Config.allowjobswitch                = true
-- allowrpnames - Allow Players to Set their RP names using the /rpname command.
GM.Config.allowrpnames                  = true
-- allowsprays - Enable/disable the use of sprays on the server.
GM.Config.allowsprays                   = true
-- allowvehicleowning - Enable/disable whether people can own vehicles.
GM.Config.allowvehicleowning            = true
-- allowvnocollide - Enable/disable the ability to no-collide a vehicle (for security).
GM.Config.allowvnocollide               = false
-- alltalk - Enable for global chat, disable for local chat.
GM.Config.alltalk                       = false
-- antimultirun - Disallow people joining your server(s) twice on the same account.
GM.Config.antimultirun                  = true
-- autovehiclelock - Enable/Disable automatic locking of a vehicle when a player exits it.
GM.Config.autovehiclelock               = false
-- babygod - people spawn godded (prevent spawn killing).
GM.Config.babygod                       = true
-- canforcedooropen - whether players can force an unownable door open with lockpick or battering ram or w/e.
GM.Config.canforcedooropen              = true
-- chatsounds - sounds are played when some things are said in chat.
GM.Config.chatsounds                    = true
-- chiefjailpos - Allow the Chief to set the jail positions.
GM.Config.chiefjailpos                  = true
-- cit_propertytax - Enable/disable property tax that is exclusive only for citizens.
GM.Config.cit_propertytax               = false
-- copscanunfreeze - Enable/disable the ability of cops to unfreeze other people's props.
GM.Config.copscanunfreeze               = true
-- copscanunweld - Enable/disable the ability of cops to unweld other people's props.
GM.Config.copscanunweld                 = false
-- cpcanarrestcp - Allow/Disallow CPs to arrest other CPs.
GM.Config.cpcanarrestcp                 = true
-- currencyLeft - The position of the currency symbol. true for left, false for right.
GM.Config.currencyLeft                  = true
-- customjobs - Enable/disable the /job command (personalized job names).
GM.Config.customjobs                    = true
-- customspawns - Enable/disable whether custom spawns should be used.
GM.Config.customspawns                  = true
-- deathblack - Whether or not a player sees black on death.
GM.Config.deathblack                    = false
-- showdeaths - Display kill information in the upper right corner of everyone's screen.
GM.Config.showdeaths                    = true
-- deadtalk - Enable/disable whether people talk and use commands while dead.
GM.Config.deadtalk                      = true
-- deadvoice - Enable/disable whether people talk through the microphone while dead.
GM.Config.deadvoice                     = true
-- deathpov - Enable/disable whether people see their death in first person view.
GM.Config.deathpov                      = false
-- decalcleaner - Enable/Disable clearing every player's decals.
GM.Config.decalcleaner                  = false
-- disallowClientsideScripts - Clientside scripts can be very useful for customizing the HUD or to aid in building. This option bans those scripts.
GM.Config.disallowClientsideScripts     = false
-- doorwarrants - Enable/disable Warrant requirement to enter property.
GM.Config.doorwarrants                  = true
-- dropmoneyondeath - Enable/disable whether people drop money on death.
GM.Config.dropmoneyondeath              = false
-- droppocketarrest - Enable/disable whether people drop the stuff in their pockets when they get arrested.
GM.Config.droppocketarrest              = false
-- droppocketdeath - Enable/disable whether people drop the stuff in their pockets when they die.
GM.Config.droppocketdeath               = true
-- dropweapondeath - Enable/disable whether people drop their current weapon when they die.
GM.Config.dropweapondeath               = false
-- Whether players can drop the weapons they spawn with.
GM.Config.dropspawnedweapons            = false
-- dynamicvoice - Enable/disable whether only people in the same room as you can hear your mic.
GM.Config.dynamicvoice                  = true
-- earthquakes - Enable/disable earthquakes.
GM.Config.earthquakes                   = false
-- enablebuypistol - Turn /buy on of off.
GM.Config.enablebuypistol               = true
-- enforceplayermodel - Whether or not to force players to use their role-defined character models.
GM.Config.enforceplayermodel            = true
-- globalshow - Whether or not to display player info above players' heads in-game.
GM.Config.globalshow                    = false
-- ironshoot - Enable/disable whether people need iron sights to shoot.
GM.Config.ironshoot                     = true
-- showjob - Whether or not to display a player's job above their head in-game.
GM.Config.showjob                       = true
-- letters - Enable/disable letter writing / typing.
GM.Config.letters                       = true
-- license - Enable/disable People need a license to be able to pick up guns.
GM.Config.license                       = false
-- lockdown - Enable/Disable initiating lockdowns for mayors.
GM.Config.lockdown                      = true
-- lockpickfading - Enable/disable the lockpicking of fading doors.
GM.Config.lockpickfading                = true
-- logging - Enable/disable logging everything that happens.
GM.Config.logging                       = true
-- lottery - Enable/disable creating lotteries for mayors.
GM.Config.lottery                       = true
-- showname - Whether or not to display a player's name above their head in-game.
GM.Config.showname                      = true
-- showhealth - Whether or not to display a player's health above their head in-game.
GM.Config.showhealth                    = true
-- needwantedforarrest - Enable/disable Cops can only arrest wanted people.
GM.Config.needwantedforarrest           = false
-- noguns - Enabling this feature bans Guns and Gun Dealers.
GM.Config.noguns                        = false
-- norespawn - Enable/Disable that people don't have to respawn when they change job.
GM.Config.norespawn                     = true
-- keepPickedUp - Enable/Disable keeping picked up weapons when switching jobs.
GM.Config.keepPickedUp                  = false
-- instantjob - Enable/Disable instantly respawning when norespawn is false
GM.Config.instantjob                    = false
-- npcarrest - Enable/disable arresting npc's.
GM.Config.npcarrest                     = true
-- ooc - Whether or not OOC tags are enabled.
GM.Config.ooc                           = true
-- propertytax - Enable/disable property tax.
GM.Config.propertytax                   = false
-- proppaying - Whether or not players should pay for spawning props.
GM.Config.proppaying                    = false
-- propspawning - Enable/disable props spawning. Applies to admins too.
GM.Config.propspawning                  = true
-- removeclassitems - Enable/disable shipments/microwaves/etc. removal when someone changes team.
GM.Config.removeclassitems              = true
-- removeondisconnect - Enable/disable shipments/microwaves/etc. removal when someone disconnects.
GM.Config.removeondisconnect            = true
-- respawninjail - Enable/disable whether people can respawn in jail when they die.
GM.Config.respawninjail                 = true
-- restrictallteams - Enable/disable Players can only be citizen until an admin allows them.
GM.Config.restrictallteams              = false
-- restrictbuypistol - Enabling this feature makes /buy available only to Gun Dealers.
GM.Config.restrictbuypistol             = false
-- restrictdrop - Enable/disable restricting the weapons players can drop. Setting this to true disallows weapons from shipments from being dropped.
GM.Config.restrictdrop                  = false
-- revokeLicenseOnJobChange - Whether licenses are revoked when a player changes jobs.
GM.Config.revokeLicenseOnJobChange      = true
-- shouldResetLaws - Enable/Disable resetting the laws back to the default law set when the mayor changes.
GM.Config.shouldResetLaws               = false
-- strictsuicide - Whether or not players should spawn where they suicided.
GM.Config.strictsuicide                 = false
-- telefromjail - Enable/disable teleporting from jail.
GM.Config.telefromjail                  = true
-- teletojail - Enable/disable teleporting to jail.
GM.Config.teletojail                    = true
-- unlockdoorsonstart - Enable/Disable unlocking all doors on map start.
GM.Config.unlockdoorsonstart            = false
-- voiceradius - Enable/disable local voice chat.
GM.Config.voiceradius                   = true
-- tax - Whether players pay taxes on their wallets.
GM.Config.wallettax                     = false
-- wantedrespawn - Whether players remain wanted on respawn.
GM.Config.wantedrespawn                 = false
-- wantedsuicide - Enable/Disable suiciding while you are wanted by the police.
GM.Config.wantedsuicide                 = false
-- realisticfalldamage - Enable/Disable dynamic fall damage. Setting mp_falldamage to 1 will over-ride this.
GM.Config.realisticfalldamage           = true
-- printeroverheat - Whether the default money printer can overheat on its own.
GM.Config.printeroverheat               = true
-- weaponCheckerHideDefault - Hide default weapons when checking weapons.
GM.Config.weaponCheckerHideDefault      = true
-- weaponCheckerHideNoLicense - Hide weapons that do not require a license.
GM.Config.weaponCheckerHideNoLicense    = false

--[[
Value settings
]]
-- adminnpcs - Whether or not NPCs should be admin only. 0 = everyone, 1 = admin or higher, 2 = superadmin or higher, 3 = rcon only
GM.Config.adminnpcs                     = 3
-- adminsents - Whether or not SENTs should be admin only. 0 = everyone, 1 = admin or higher, 2 = superadmin or higher, 3 = rcon only
GM.Config.adminsents                    = 1
-- adminvehicles - Whether or not vehicles should be admin only. 0 = everyone, 1 = admin or higher, 2 = superadmin or higher, 3 = rcon only
GM.Config.adminvehicles                 = 3
-- adminweapons - Who can spawn weapons: 0: admins only, 1: supadmins only, 2: no one, 3: everyone
GM.Config.adminweapons                  = 1
-- arrestspeed - Sets the max arrest speed.
GM.Config.arrestspeed                   = 120
-- babygodtime - How long the babygod lasts.
GM.Config.babygodtime                   = 5
-- chatsoundsdelay - How long to wait before letting a player emit a sound from their chat again.
-- Leave this on at least a few seconds to prevent people from spamming sounds. Set to 0 to disable.
GM.Config.chatsoundsdelay               = 5
-- deathfee - the amount of money someone drops when dead.
GM.Config.deathfee                      = 30
-- decaltimer - Sets the time to clear clientside decals (in seconds).
GM.Config.decaltimer                    = 120
-- demotetime - Number of seconds before a player can rejoin a team after demotion from that team.
GM.Config.demotetime                    = 120
-- doorcost - Sets the cost of a door.
GM.Config.doorcost                      = 30
-- EntitySpamTime - Antispam time between spawning entities.
GM.Config.EntitySpamTime                = 2
-- entremovedelay - how long to wait before removing a bought entity after disconnect.
GM.Config.entremovedelay                = 0
-- gunlabweapon - The weapon that the gunlab spawns.
GM.Config.gunlabweapon                  = "weapon_p2282"
-- jailtimer - Sets the jailtimer (in seconds).
GM.Config.jailtimer                     = 120
-- lockdowndelay - The amount of time a mayor must wait before starting the next lockdown.
GM.Config.lockdowndelay                 = 120
-- maxadvertbillboards - The maximum number of /advert billboards a player can place.
GM.Config.maxadvertbillboards           = 3
-- maxCheques - The maximum number of cheques someone can write
GM.Config.maxCheques                    = 5
-- maxdoors - Sets the max amount of doors one can own.
GM.Config.maxdoors                      = 20
-- maxdrugs - Sets max drugs.
GM.Config.maxdrugs                      = 2
-- maxfoods - Sets the max food cartons per Microwave owner.
GM.Config.maxfoods                      = 2
-- maxfooditems - Sets the max amount of food items a player can buy from the F4 menu.
GM.Config.maxfooditems                  = 20
-- maxlawboards - The maximum number of law boards the mayor can place.
GM.Config.maxlawboards                  = 2
-- maxletters - Sets max letters.
GM.Config.maxletters                    = 10
-- maxlotterycost - Maximum payment the mayor can set to join a lottery.
GM.Config.maxlotterycost                = 250
-- maxvehicles - Sets how many vehicles one can buy.
GM.Config.maxvehicles                   = 5
-- microwavefoodcost - Sets the sale price of Microwave Food.
GM.Config.microwavefoodcost             = 30
-- gunlabguncost - Sets the initial price of a gun from a gunlab. Note that the
-- gunlab owner can change this price.
GM.Config.gunlabguncost                 = 200
-- druglabdrugcost - Sets the initial price of drugs from a drugs lab. Note that
-- the drugs lab owner can change this price.
GM.Config.druglabdrugcost               = 100
-- minlotterycost - Minimum payment the mayor can set to join a lottery.
GM.Config.minlotterycost                = 30
-- Money packets will get removed if they don't get picked up after a while. Set to 0 to disable.
GM.Config.moneyRemoveTime               = 600
-- mprintamount - Value of the money printed by the money printer.
GM.Config.mprintamount                  = 250
-- normalsalary - Sets the starting salary for newly joined players.
GM.Config.normalsalary                  = 45
-- npckillpay - Sets the money given for each NPC kill.
GM.Config.npckillpay                    = 10
-- paydelay - Sets how long it takes before people get salary.
GM.Config.paydelay                      = 160
-- pocketitems - Sets the amount of objects the pocket can carry.
GM.Config.pocketitems                   = 10
-- pricecap - The maximum price of items (using /price).
GM.Config.pricecap                      = 500
-- pricemin - The minimum price of items (using /price).
GM.Config.pricemin                      = 50
-- propcost - How much prop spawning should cost (prop paying must be enabled for this to have an effect).
GM.Config.propcost                      = 10
-- quakechance - Chance of an earthquake happening.
GM.Config.quakechance                   = 4000
-- respawntime - Minimum amount of seconds a player has to wait before respawning.
GM.Config.respawntime                   = 1
-- changejobtime - Minimum amount of seconds a player has to wait before changing job.
GM.Config.changejobtime                 = 10
-- runspeed - Sets the max running speed.
GM.Config.runspeed                      = 240
-- runspeed - Sets the max running speed for CP teams.
GM.Config.runspeedcp                    = 255
-- searchtime - Number of seconds for which a search warrant is valid.
GM.Config.searchtime                    = 30
-- ShipmentSpamTime - Antispam time between spawning shipments.
GM.Config.ShipmentSpamTime              = 3
-- shipmenttime - The number of seconds it takes for a shipment to spawn.
GM.Config.shipmentspawntime             = 10
-- startinghealth - the health when you spawn.
GM.Config.startinghealth                = 100
-- startingmoney - your wallet when you join for the first time.
GM.Config.startingmoney                 = 500
-- stunstickdamage - amount of damage the stunstick will do to entities.
-- When between 0 and 1, the damage is relative, where 1 takes the entire health of the entity.
-- When above 1, the damage is absolute
GM.Config.stunstickdamage               = 1000
-- vehiclecost - Sets the cost of a vehicle (To own it).
GM.Config.vehiclecost                   = 40
-- wallettaxmax - Maximum percentage of tax to be paid.
GM.Config.wallettaxmax                  = 5
-- wallettaxmin - Minimum percentage of tax to be paid.
GM.Config.wallettaxmin                  = 1
-- wallettaxtime - Time in seconds between taxing players. Requires server restart.
GM.Config.wallettaxtime                 = 600
-- wantedtime - Number of seconds for which a player is wanted for.
GM.Config.wantedtime                    = 120
-- walkspeed - Sets the max walking speed.
GM.Config.walkspeed                     = 160
-- falldamagedamper - The damper on realistic fall damage. Default is 15. Decrease this for more damage.
GM.Config.falldamagedamper              = 15
-- falldamageamount - The base damage taken from falling for static fall damage. Default is 10.
GM.Config.falldamageamount              = 10
-- printeroverheatchance - The likelyhood of a printer overheating. The higher this number, the less likely (minimum 3, default 22).
GM.Config.printeroverheatchance         = 22
-- printerreward - Reward for destroying a money printer.
GM.Config.printerreward                 = 950

--[[---------------------------------------------------------------------------
Chat distance settings
Distance is in source units (similar to inches)
---------------------------------------------------------------------------]]
GM.Config.talkDistance    = 250
GM.Config.whisperDistance = 90
GM.Config.yellDistance    = 550
GM.Config.meDistance      = 250
GM.Config.voiceDistance   = 550

--[[---------------------------------------------------------------------------
Other settings
---------------------------------------------------------------------------]]

-- The classname of money packets. Use this to create your own money entity!
-- Note: the money packet must support the "Setamount" method (or the amount DTVar).
GM.Config.MoneyClass = "spawned_money"
-- In case you do wish to keep the default money, but change the model, this option is the way to go:
GM.Config.moneyModel = "models/props/cs_assault/money.mdl"
-- You can set your own, custom sound to be played for all players whenever a lockdown is initiated.
-- Note: Remember to include the folder where the sound file is located.
GM.Config.lockdownsound = "npc/overwatch/cityvoice/f_confirmcivilstatus_1_spkr.wav"

-- The skin DarkRP uses. Set to "default" to use the GMod default derma theme.
GM.Config.DarkRPSkin = "DarkRP"
GM.Config.currency = "$"
GM.Config.currencyThousandSeparator = ","
GM.Config.chatCommandPrefix = "/"
GM.Config.F1MenuHelpPage = "https://darkrp.miraheze.org/wiki/Main_Page"
GM.Config.F1MenuHelpPageTitle = "DarkRP Wiki"

-- The sound that plays when you get a DarkRP notification
GM.Config.notificationSound = "buttons/lightswitch2.wav"

-- Put Steam ID's and ranks in this list, and the players will have that rank when they join.
GM.Config.DefaultPlayerGroups = {
    ["STEAM_0:0:00000000"] = "superadmin",
    ["STEAM_0:0:11111111"] = "admin",
}

-- Custom modules in this addon that are disabled.
GM.Config.DisabledCustomModules = {
    ["hudreplacement"] = false,
    ["extraf4tab"] = false,
}

-- The list of weapons that players are not allowed to drop. Items set to true are not allowed to be dropped.
GM.Config.DisallowDrop = {
    ["arrest_stick"] = true,
    ["door_ram"] = true,
    ["gmod_camera"] = true,
    ["gmod_tool"] = true,
    ["keys"] = true,
    ["lockpick"] = true,
    ["med_kit"] = true,
    ["pocket"] = true,
    ["stunstick"] = true,
    ["unarrest_stick"] = true,
    ["weapon_keypadchecker"] = true,
    ["weapon_physcannon"] = true,
    ["weapon_physgun"] = true,
    ["weaponchecker"] = true,
}

-- The list of weapons people spawn with.
GM.Config.DefaultWeapons = {
    "keys",
    "weapon_physcannon",
    "gmod_camera",
    "gmod_tool",
    "pocket",
    "weapon_physgun",
}

-- Override categories.
-- NOTE: categories are to be set in the "category" field of the custom jobs/shipments/entities/ammo/pistols/vehicles.
-- Use this only to override the categories of _default_ things.
-- This will NOT work for your own custom stuff.
-- Make sure the category is created in the darkrp_customthings/categories.lua, otherwise it won't work!
GM.Config.CategoryOverride = {
    jobs = {
        ["Citizen"]                             = "Citizens",
        ["Hobo"]                                = "Citizens",
        ["Gun Dealer"]                          = "Citizens",
        ["Medic"]                               = "Citizens",
        ["Civil Protection"]                    = "Civil Protection",
        ["Gangster"]                            = "Gangsters",
        ["Mob boss"]                            = "Gangsters",
        ["Civil Protection Chief"]              = "Civil Protection",
        ["Mayor"]                               = "Civil Protection",
    },
    entities = {
        ["Drug lab"]                            = "Other",
        ["Money printer"]                       = "Other",
        ["Gun lab"]                             = "Other",

    },
    shipments = {
        ["AK47"]                                = "Rifles",
        ["MP5"]                                 = "Rifles",
        ["M4"]                                  = "Rifles",
        ["Mac 10"]                              = "Other",
        ["Pump shotgun"]                        = "Shotguns",
        ["Sniper rifle"]                        = "Snipers",

    },
    weapons = {
        ["Desert eagle"]                        = "Pistols",
        ["Fiveseven"]                           = "Pistols",
        ["Glock"]                               = "Pistols",
        ["P228"]                                = "Pistols",
    },
    vehicles = {}, -- There are no default vehicles.
    ammo = {
        ["Pistol ammo"]                         = "Other",
        ["Shotgun ammo"]                        = "Other",
        ["Rifle ammo"]                          = "Other",
    },
}

-- The list of weapons admins spawn with, in addition to the default weapons, a job's weapons and GM.Config.AdminsCopWeapons.
GM.Config.AdminWeapons = {
    "weapon_keypadchecker",
}

-- These are the default laws, they're unchangeable in-game.
GM.Config.DefaultLaws = {
    "Do not attack other citizens except in self-defence.",
    "Do not steal or break into people's homes.",
    "Money printers/drugs are illegal.",
}

GM.Config.PocketBlacklist = {
    ["fadmin_jail"] = true,
    ["meteor"] = true,
    ["door"] = true,
    ["func_"] = true,
    ["player"] = true,
    ["beam"] = true,
    ["worldspawn"] = true,
    ["env_"] = true,
    ["path_"] = true,
    ["prop_physics"] = true,
    ["money_printer"] = true,
    ["gunlab"] = true,
    ["prop_dynamic"] = true,
    ["prop_vehicle_prisoner_pod"] = true,
    ["keypad_wire"] = true,
    ["gmod_button"] = true,
    ["gmod_rtcameraprop"] = true,
    ["gmod_cameraprop"] = true,
    ["gmod_dynamite"] = true,
    ["gmod_thruster"] = true,
    ["gmod_light"] = true,
    ["gmod_lamp"] = true,
    ["gmod_emitter"] = true,
}

-- These weapons are classed as 'legal' in the weapon checker and are not stripped when confiscating weapons.
-- This setting is used IN ADDITION to GM.Config.weaponCheckerHideDefault and GM.Config.weaponCheckerHideNoLicense.
-- You should use the former if you want to class the default weapons (GM.Config.DefaultWeapons and, if admin, GM.Config.AdminWeapons) and a player's job weapons as legal.
-- The latter takes GM.NoLicense weapons as legal (see licenseweapons.lua).
-- The format of this config is similar to GM.Config.DisallowDrop.
GM.Config.noStripWeapons = {

}

-- The entities listed here will not be removed when a player changes their job.
-- This only applies when removeclassitems is set to true.
-- Note: entities will only be removed when the player changes to a job that is not allowed to have the entity.
GM.Config.preventClassItemRemoval = {
    ["gunlab"] = false,
    ["microwave"] = false,
    ["spawned_shipment"] = false,
}

-- Properties set to true are allowed to be used. Values set to false or are missing from this list are blocked.
GM.Config.allowedProperties = {
    remover = true,
    ignite = false,
    extinguish = true,
    keepupright = true,
    gravity = true,
    collision = true,
    skin = true,
    bodygroups = true,
}

--[[---------------------------------------------------------------------------
F4 menu
---------------------------------------------------------------------------]]
-- hide the items that you can't buy and the jobs you can't get (instead of graying them out).
-- this option hides items when you don't have enough money, when the maximum is reached for a job or any other reason.
GM.Config.hideNonBuyable = false

-- Hide only the items that you have the wrong job for (or for which the customCheck says no).
-- When you set this option to true and hideNonBuyable to false, you WILL see e.g. items that are too expensive for you to buy.
-- but you won't see gundealer shipments when you have the citizen job.
GM.Config.hideTeamUnbuyable = true

--[[---------------------------------------------------------------------------
AFK module
---------------------------------------------------------------------------]]
-- The time of inactivity before being demoted.
GM.Config.afkdemotetime = 600
-- Prevent people from spamming AFK.
GM.Config.AFKDelay = 300

--[[---------------------------------------------------------------------------
Hitmenu module
---------------------------------------------------------------------------]]
-- The minimum price for a hit.
GM.Config.minHitPrice = 200
-- The maximum price for a hit.
GM.Config.maxHitPrice = 50000
-- The minimum distance between a hitman and his customer when they make the deal.
GM.Config.minHitDistance = 150
-- The text that tells the player he can press use on the hitman to request a hit.
GM.Config.hudText = "I am a hitman.\nPress E on me to request a hit!"
-- The text above a hitman when he's got a hit.
GM.Config.hitmanText = "Hit\naccepted!"
-- The cooldown time for a hit target (so they aren't spam killed).
GM.Config.hitTargetCooldown = 120
-- How long a customer has to wait to be able to buy another hit (from the moment the hit is accepted).
GM.Config.hitCustomerCooldown = 240

--[[---------------------------------------------------------------------------
Hungermod module
---------------------------------------------------------------------------]]
-- hungerspeed <Amount> - Set the rate at which players will become hungry (2 is the default).
GM.Config.hungerspeed = 2
-- starverate <Amount> - How much health that is taken away every second the player is starving  (3 is the default).
GM.Config.starverate = 3

--gamemodes/darkrp/gamemode/libraries/simplerr.lua:
local CompileFile = CompileFile
local CompileString = CompileString
local debug = debug
local error = error
local file = file
local hook = hook
local include = include
local isfunction = isfunction
local isstring = isstring
local math = math
local os = os
local string = string
local table = table
local tonumber = tonumber
local unpack = unpack
local xpcall = xpcall

-- Template for syntax errors
-- The [ERROR] start of it cannot be removed, because that would make the
-- error mechanism remove all square brackets. Only Garry can make that bullshit up.
local synErrTranslation = [=[[ERROR] Lua is unable to understand file "%s" because its author made a mistake around line number %i.
The best help I can give you is this:

%s

Hints:
%s

------- End of Simplerr error -------
]=] -- The end is a special string by which simplerr errors are internally recognised

-- Template for runtime errors
local runErrTranslation = [=[[ERROR] A runtime error has occurred in "%s" on line %i.
The best help I can give you is this:

%s

Hints:
%s

The responsibility for the error above lies with (the authors of) one (or more) of these files:
%s
------- End of Simplerr error -------
]=]

-- Structure that contains syntax errors and their translations. Catches only the most common errors.
-- Order is important: the structure with the first match is taken.
local synErrs = {
    {
        match = "'=' expected near '(.*)'",
        text = "Right before the '%s', Lua expected to read an '='-sign, but it didn't.",
        format = function(m) return m[1] end,
        hints = {
            "Did you simply forget the '='-sign?",
            "Did you forget a comma?",
            "Is this supposed to be a local variable?"
        }
    },
    {
        match = "'.' expected [(]to close '([{[(])' at line ([0-9-]+)[)] near '(.*)'",
        text = "There is an opening '%s' bracket at line %i, but this bracket is never closed or not closed in time. It was expected to be closed before the '%s' at line %i.",
        format = function(m, l) return m[1], m[2], m[3], l end,
        hints = {
            "Did you forget a comma?",
            "All open brackets ({, (, [) must have a matching closing bracket. Are you sure it's there?",
            "Brackets must be opened and closed in the right order. This will work: ({}), but this won't: ({)}."
        }
    },
    {
        match = "'end' expected [(]to close '(.*)' at line ([0-9-]+)[)] near '(.*)'",
        text = "An '%s' was started on line %i, but it was never ended or not ended in time. It was expected to be ended before the '%s' at line %i",
        format = function(m, l) return m[1], m[2], m[3], l end,
        hints = {
            "For every if/for/do/while/function there must be an 'end' that closes it."
        }
    },
    {
        match = "unfinished string near '(.*)'",
        text = "The string '%s' at line %i is opened, but not closed.",
        format = function(m, l) return m[1], l end,
        hints = {
            "A string is a different word for literal text.",
            "Strings must be in single or double quotation marks (e.g. 'example', \"example\")",
            "A third option for strings is for them to be in double square brackets.",
            "Whatever you use (quotations or square brackets), you must not forget that strings are enclosed within a pair of quotation marks/square brackets."
        }
    },
    {
        match = "unfinished long string near '(.*)'",
        text = "Lua expected to see the end of a multiline string somewhere before the '%s' at line %i.",
        format = function(m, l) return m[1], l end,
        hints = {
            "A string is a different word for literal text.",
            "Multiline strings are strings that span over multiple lines.",
            "Multiline strings must be enclosed by double square brackets.",
            "Whatever you use (quotations or square brackets), you must not forget that strings are enclosed within a pair of quotation marks/square brackets.",
            "If you used brackets, the source of the mistake may be somewhere above the reported line."
        }
    },
    {
        match = "unfinished long comment near '(.*)'",
        text = "Lua expected to see the end of a multiline comment somewhere before the '%s' at line %i.",
        format = function(m, l) return m[1], l end,
        hints = {
            "A comment is text ignored by Lua.",
            "Multiline comments are ones that span multiple lines.",
            "Multiline comments must be enclosed by either /* and */ or double square brackets.",
            "Whatever you use (/**/ or square brackets), you must not forget that once you start a comment, you must end it.",
            "The source of the mistake may be somewhere above the reported line."
        }
    },
    -- Generic error messages
    {
        match = "function arguments expected near '(.*)'",
        text = "A function is being called right before '%s', but its arguments are not given.",
        format = function(m) return m[1] end,
        hints = {
            "Did you write 'something:otherthing'? Try changing it to 'something:otherthing()'"
        }
    },
    {
        match = "unexpected symbol near '(.*)'",
        text = "Right before the '%s', Lua encountered something it could not make sense of.",
        format = function(m) return m[1] end,
        hints = {"Did you forget something here? (Perhaps a closing bracket)", "Is it a typo?"}
    },
    {
        match = "'(.*)' expected near '(.*)'",
        text = "Right before the '%s', Lua expected to read a '%s', but it didn't.",
        format = function(m) return m[2], m[1] end,
        hints = {"Did you forget a keyword?", "Did you forget a comma?"}
    },
    {
        match = "malformed number near '(.*)'",
        text = "Lua attempted to read '%s' as a number, but failed to do so.",
        format = function(m) return m[1] end,
        hints = {
            "Numbers starting with '0x' are hexidecimal.",
            "Lua can get confused when doing '<number>..\"some text\"'. Try inserting a space between the number and the '..'."
        }
    },
}

-- Similar structure for runtime errors. Catches only the most common errors.
-- Order is important: the structure with the first match is taken
local runErrs = {
    {
        match = "table index is nil",
        text = "A table is being indexed by something that does not exist (table index is nil).", -- Requires improvement
        format = function() end,
        hints = {
            "The thing between square brackets does not exist (is nil)."
        }
    },
    {
        match = "table index is NaN",
        text = "A table is being indexed by something that is not really a number (table index is NaN).",
        format = function() end,
        hints = {
            "Did you divide zero by zero thinking it would be funny?"
        }
    },
    {
        match = "attempt to index global '(.*)' [(]a nil value[)]",
        text = "'%s' is being indexed like it is a table, but in reality it does not exist (is nil).",
        format = function(m) return m[1] end,
        hints = {
            "You either have 'something.somethingElse', 'something[somethingElse]' or 'something:somethingElse(more)'. The 'something' here does not exist."
        }
    },
    {
        match = "attempt to index global '(.*)' [(]a (.*) value[)]",
        text = "'%s' is being indexed like it is a table, but in reality it is a %s value.",
        format = function(m) return m[1], m[2] end,
        hints = {
            "You either have 'something.somethingElse' or 'something:somethingElse(more)'. The 'something' here is not a table."
        }
    },
    {
        match = "attempt to index a nil value",
        text = "Something is being indexed like it is a table, but in reality does not exist (is nil).",
        format = function() end,
        hints = {
            "You either have 'something.somethingElse', 'something[somethingElse]' or 'something:somethingElse(more)'. The 'something' here does not exist."
        }
    },
    {
        match = "attempt to index a (.*) value",
        text = "Something is being indexed like it is a table, but in reality it is a %s value.",
        format = function(m) return m[1] end,
        hints = {
            "You either have 'something.somethingElse', 'something[somethingElse]' or 'something:somethingElse(more)'. The 'something' here is not a table."
        }
    },
    {
        match = "attempt to call global '(.*)' [(]a nil value[)]",
        text = "'%s' is being called like it is a function, but in reality does not exist (is nil).",
        format = function(m) return m[1] end,
        hints = {
            "You are doing something(<otherstuff>). The 'something' here does not exist."
        }
    },
    {
        match = "attempt to call a nil value",
        text = "Something is being called like it is a function, but in reality it does not exist (is nil).",
        format = function() end,
        hints = {
            "You are doing something(<otherstuff>). The 'something' here does not exist."
        }
    },
    {
        match = "attempt to call global '(.*)' [(]a (.*) value[)]",
        text = "'%s' is being called like it is a function, but in reality it is a %s.",
        format = function(m) return m[1], m[2] end,
        hints = {
            "You are doing something(<otherstuff>). The 'something' here is not a function."
        }
    },
    {
        match = "attempt to call a (.*) value",
        text = "Something is being called like it is a function, but in reality it is a %s.",
        format = function(m) return m[1] end,
        hints = {
            "You are doing something(<otherstuff>). The 'something' here is not a function."
        }
    },
    {
        match = "attempt to call field '(.*)' [(]a nil value[)]",
        text = "'%s' is being called like it is a function, but in reality it does not exist (is nil).",
        format = function(m) return m[1] end,
        hints = {
            "You are doing either stuff.something(<otherstuff>) or stuff:something(<otherstuff>). The 'something' here does not exist."
        }
    },
    {
        match = "attempt to call field '(.*)' [(]a (.*) value[)]",
        text = "'%s' is being called like it is a function, but in reality it is a %s.",
        format = function(m) return m[1], m[2] end,
        hints = {
            "You are doing either stuff.something(<otherstuff>) or stuff:something(<otherstuff>). The 'something' here is not a function."
        }
    },
    {
        match = "attempt to concatenate global '(.*)' [(]a nil value[)]",
        text = "'%s' is being concatenated to something else, but '%s' does not exist (is nil).",
        format = function(m) return m[1], m[1] end,
        hints = {
            "Concatenation looks like this: something .. otherThing. Either something or otherThing does not exist."
        }
    },
    {
        match = "attempt to concatenate global '(.*)' [(]a (.*) value[)]",
        text = "'%s' is being concatenated to something else, but %s values cannot be concatenated.",
        format = function(m) return m[1], m[2] end,
        hints = {
            "Concatenation looks like this: something .. otherThing. Either something or otherThing is neither string nor number."
        }
    },
    {
        match = "attempt to concatenate a nil value",
        text = "Two (or more) things are being concatenated and one of them does not exist (is nil).",
        format = function() end,
        hints = {
            "Concatenation looks like this: something .. otherThing. Either something or otherThing does not exist."
        }
    },
    {
        match = "attempt to concatenate a (.*) value",
        text = "Two (or more) things are being concatenated and one of them is neither string nor number, but a %s.",
        format = function(m) return m[1] end,
        hints = {
            "Concatenation looks like this: something .. otherThing. Either something or otherThing is neither string nor number."
        }
    },
    {
        match = "stack overflow",
        text = "The stack of function calls has overflowed",
        format = function() end,
        hints = {
            "Most likely infinite recursion.",
            "Do you have a function calling itself?"
        }
    },
    {
        match = "attempt to compare two (.*) values",
        text = "A comparison is being made between two %s values. They cannot be compared.",
        format = function(m) return m[1] end,
        hints = {
            "This error usually occurs when two incompatible things are being compared.",
            "'comparison' in this context means one of <, >, <=, >= (smaller than, greater than, etc.)"
        }
    },
    {
        match = "attempt to compare (.*) with (.*)",
        text = "A comparison is being made between a %s and a %s. This is not possible.",
        format = function(m) return m[1], m[2] end,
        hints = {
            "This error usually occurs when two incompatible things are being compared.",
            "'Comparison' in this context means one of <, >, <=, >= (smaller than, greater than, etc.)"
        }
    },
    {
        match = "attempt to perform arithmetic on a (.*) value",
        text = "Arithmetic operations are being performed on a %s. This is not possible.",
        format = function(m) return m[1] end,
        hints = {
            "'Arithmetic' in this context means adding, multiplying, dividing, etc."
        }
    },
    {
        match = "attempt to get length of global '(.*)' [(]a nil value[)]",
        text = "The length of '%s' is requested as if it is a table, but in reality it does not exist (is nil).",
        format = function(m) return m[1] end,
        hints = {
            "You are doing #something. The 'something' here is does not exist."
        }
    },
    {
        match = "attempt to get length of global '(.*)' [(]a (.*) value[)]",
        text = "The length of '%s' is requested as if it is a table, but in reality it is a %s.",
        format = function(m) return m[1], m[2] end,
        hints = {
            "You are doing #something. The 'something' here is not a table."
        }
    },
    {
        match = "attempt to get length of a nil value",
        text = "The length of something is requested as if it is a table, but in reality it does not exist (is nil).",
        format = function(m) return m[1] end,
        hints = {
            "You are doing #something. The 'something' here is does not exist."
        }
    },
    {
        match = "attempt to get length of a (.*) value",
        text = "The length of something is requested as if it is a table, but in reality it is a %s.",
        format = function(m) return m[1] end,
        hints = {
            "You are doing #something. The 'something' here is not a table."
        }
    },
}

module("simplerr")

-- Get a nicely formatted stack trace. Start is where to start numbering
-- stackMod allows the caller to modify the stack before it is numbered
local function getStack(i, start, stackMod)
    i = i or 1
    start = start or 1
    local stack = {}

    -- Invariant: stack level (i + count) >= 2 and <= last stack item
    for count = 1, math.huge do -- user visible count
        local info = debug.getinfo(i + count, "Sln")
        if not info then break end

        local line = info.currentline or "unknown"
        if line == -1 and info.name then
            table.insert(stack, string.format("function '%s'", info.name))
        else
            table.insert(stack, string.format("%s on line %s", info.short_src, line))
        end
    end

    -- Allow modification of the stack
    if stackMod then stack = stackMod(stack) end

    -- add the numbering
    for count = 1, #stack do
        local stackLevel = start + count - 1
        stack[count] = string.format("\t%i. %s", stackLevel, stack[count])
    end

    return table.concat(stack, "\n")
end

-- Translate a runtime error to simplerr format.
-- Decorate with e.g. wrapError to have it actually throw the error.
function runError(msg, stackNr, hints, path, line, stack)
    stackNr = stackNr or 1
    hints = hints or {"No hints, sorry."}
    hints = "\t- " .. table.concat(hints, "\n\t- ")

    if not path and not line then
        local info = debug.getinfo(stackNr + 1, "Sln") or debug.getinfo(stackNr, "Sln")
        path = info.short_src
        line = info.currentline
    end

    return false, string.format(runErrTranslation, path, line, msg, hints, stack or getStack(stackNr + 1))
end

-- Translate the message of an error
local function translateMsg(msg, path, line, errs)
    local res
    local hints = {"No hints, sorry."}

    for i = 1, #errs do
        local trans = errs[i]
        if not string.find(msg, trans.match) then continue end

        -- translate <eof>
        msg = string.Replace(msg, "<eof>", "end of the file")

        res = string.format(trans.text, trans.format({string.match(msg, trans.match)}, line, path))
        hints = trans.hints

        break
    end

    return res or msg, "\t- " .. table.concat(hints, "\n\t- ")
end

-- Translate an error into a language understandable by non-programmers
local function translateError(path, line, err, translation, errs, stack)
    -- Using .* instead of path because path may be wrong when error is called
    local msg, hints = translateMsg(string.match(err, ".*:[0-9-]+: (.*)"), path, line, errs)
    local res = string.format(translation, path, line, msg, hints, stack)
    return res
end


-- Trims the [C] functions at the beginning of the stack
local function trimStart(stack)
    while true do
        if string.StartWith(stack[1], "function ") then
            table.remove(stack, 1)
        else
            break
        end
    end

    return stack
end

-- safeCall uses xpcall, which has the downside that both xpcall and
-- the safeCall function itself end up in the stack trace.
-- This function removes them from the stack trace
local function removeXpcall(stack)
    for i = #stack - 1, 1, -1 do
        if stack[i] == "function 'xpcall'" and string.find(stack[i + 1], "simplerr") then
            table.remove(stack, i)
            table.remove(stack, i) -- also remove the simplerr safeCall call

            return stack
        end
    end

    return stack
end

-- Combines the two above functions
local function stackModAggregate(stack)
    stack = trimStart(stack)
    return removeXpcall(stack)
end

-- Used as the error handler in safeCall
local function errorHandler(err, func)
    -- Investigate the stack. Not using err matching because calls to error can give a different path and line
    local stack = getStack(func and 1 or 2, 1, stackModAggregate) -- add called func to stack

    -- Fetch the path and line number from the top of the stack
    local firstLine = string.sub(stack, 1, string.match(stack, "()\n") - 1)
    local path, line = string.match(firstLine, "\t[0-9-]+%. (.*) on line ([0-9-]+)")
    line = tonumber(line)

    return {err, path, line, stack}
end

-- Call a function and catch immediate runtime errors
function safeCall(f, ...)
    -- Use xpcall so fetching of debug info is in the stack of the error rather than after it is unwound
    local res = {xpcall(f, errorHandler, ...)}

    local succ, errInfo = res[1], res[2]

    if succ then return unpack(res) end

    -- This will only happen if the error is "not enough memory" or "error in error handling".
    -- The former tends to crash the game and the latter will mean it'll probably error in the next line.
    -- But we will try anyway.
    -- Note: stack trace will be less accurate.
    if isstring(errInfo) then errInfo = errorHandler(errInfo, f) end

    -- Skip translation if the error is already a simplerr error
    -- This prevents nested simplerr errors when runError is called by a file loaded by runFile
    local mustTranslate = not string.find(errInfo[1], "------- End of Simplerr error -------")
    return false, mustTranslate and translateError(errInfo[2], errInfo[3], errInfo[1], runErrTranslation, runErrs, errInfo[4]) or errInfo[1]
end

-- Run a file or explain its syntax errors in layman's terms
-- Returns bool succeed, [string error]
-- Do NOT use this on clientside files.
-- Clientside files sent by the server cannot be read using file.Read unless you're the host of a listen server
function runFile(path)
    if not file.Exists(path, "LUA") then error(string.format("Could not run file '%s' (file not found)", path)) end
    local contents = file.Read(path, "LUA")

    -- Files can make a comment containing #NoSimplerr# to disable simplerr (and thus enable autorefresh)
    if string.find(contents, "#NoSimplerr#") then include(path) return true end

    -- Catch syntax errors with CompileString
    local err = CompileString(contents, path, false)

    -- CompileString returns the following string whenever a file is empty: Invalid script - or too short.
    -- It also prints: Not running script <path> - it's too short.
    -- If so, do nothing.
    if err == "Invalid script - or too short." then return true end

    -- No syntax errors, check for immediate runtime errors using CompileFile
    -- Using the function CompileString returned leads to relative path trouble
    if isfunction(err) then return safeCall(CompileFile(path), path) end

    -- Fetch the line number from the error
    local line = string.match(err, ".*:([0-9-]+): .*")
    line = tonumber(line)

    return false, translateError(path, line, err, synErrTranslation, synErrs)
end

-- Error wrapper: decorator for runFile and safeCall that throws an error on failure.
-- Breaks execution. Must be the last decorator.
function wrapError(succ, err, ...)
    if succ then return succ, err, ... end

    error(err)
end

-- Hook wrapper: Calls a hook on error
function wrapHook(succ, err, ...)
    if not succ then hook.Call("onSimplerrError", nil, err) end

    return succ, err, ...
end

-- Logging wrapper: decorator for runFile and safeCall that logs failures.
local log = {}
function wrapLog(succ, err, ...)
    if succ then return succ, err, ... end

    local data = {
        err = err,
        time = os.time()
    }

    table.insert(log, data)

    return succ, err, ...
end

-- Retrieve the log
function getLog() return log end

-- Clear the log
function clearLog() log = {} end

--gamemodes/darkrp/gamemode/modules/hitmenu/sh_interface.lua:
DarkRP.PLAYER.isHitman = DarkRP.stub{
    name = "isHitman",
    description = "Whether this player is a hitman.",
    parameters = {
    },
    returns = {
        {
            name = "answer",
            description = "Whether this player is a hitman.",
            type = "boolean"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.PLAYER.hasHit = DarkRP.stub{
    name = "hasHit",
    description = "Whether this hitman has a hit.",
    parameters = {
    },
    returns = {
        {
            name = "answer",
            description = "Whether this player has a hit.",
            type = "boolean"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.PLAYER.getHitTarget = DarkRP.stub{
    name = "getHitTarget",
    description = "Get the target of a hitman.",
    parameters = {
    },
    returns = {
        {
            name = "target",
            description = "The target of the hit.",
            type = "Player"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.PLAYER.getHitPrice = DarkRP.stub{
    name = "getHitPrice",
    description = "Get the price the hitman demands for his work.",
    parameters = {
    },
    returns = {
        {
            name = "price",
            description = "The price of the next hit.",
            type = "number"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.addHitmanTeam = DarkRP.stub{
    name = "addHitmanTeam",
    description = "Make this team a hitman.",
    parameters = {
        {
            name = "team number",
            description = "The number of the team (e.g. TEAM_MOB)",
            type = "number",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.getHitmanTeams = DarkRP.stub{
    name = "getHitmanTeams",
    description = "Get all the hitman teams.",
    parameters = {
    },
    returns = {
        {
            name = "tbl",
            description = "A table in which the keys are TEAM_ numbers and the values are just true.",
            type = "table"
        }
    },
    metatable = DarkRP
}

DarkRP.hookStub{
    name = "canRequestHit",
    description = "Whether someone can request a hit.",
    parameters = {
        {
            name = "hitman",
            description = "The hitman performing the hit",
            type = "Player"
        },
        {
            name = "customer",
            description = "The customer for the current hit.",
            type = "Player"
        },
        {
            name = "target",
            description = "The target of the current hit",
            type = "Player"
        },
        {
            name = "price",
            description = "The agreed upon price.",
            type = "number"
        }
    },
    returns = {
        {
            name = "canRequest",
            description = "A yes or no as to whether the hit can be requested.",
            type = "boolean"
        },
        {
            name = "message",
            description = "The message that is shown when they can't request the hit.",
            type = "string"
        },
        {
            name = "price",
            description = "An override for the price of the hit.",
            type = "number"
        }
    }
}

DarkRP.hookStub{
    name = "onHitAccepted",
    description = "When a hitman accepts a hit.",
    parameters = {
        {
            name = "hitman",
            description = "The hitman performing the hit.",
            type = "Player"
        },
        {
            name = "target",
            description = "The target of the current hit.",
            type = "Player"
        },
        {
            name = "customer",
            description = "The customer of the current hit.",
            type = "Player"
        }
    },
    returns = {

    }
}

DarkRP.hookStub{
    name = "onHitCompleted",
    description = "When a hitman finishes a hit.",
    parameters = {
        {
            name = "hitman",
            description = "The hitman performing the hit.",
            type = "Player"
        },
        {
            name = "target",
            description = "The target of the current hit.",
            type = "Player"
        },
        {
            name = "customer",
            description = "The customer of the current hit.",
            type = "Player"
        }
    },
    returns = {

    }
}

DarkRP.hookStub{
    name = "onHitFailed",
    description = "When a hit fails for some reason.",
    parameters = {
        {
            name = "hitman",
            description = "The hitman performing the hit.",
            type = "Player"
        },
        {
            name = "target",
            description = "The target of the current hit.",
            type = "Player"
        },
        {
            name = "reason",
            description = "why the hit failed.",
            type = "string"
        }
    },
    returns = {

    }
}

--gamemodes/darkrp/gamemode/modules/hitmenu/cl_interface.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/animations/sh_interface.lua:
DarkRP.addPlayerGesture = DarkRP.stub{
    name = "addPlayerGesture",
    description = "Add a player gesture to the DarkRP animations menu (the one that opens with the keys weapon.). Note: This function must be called BOTH serverside AND clientside!",
    parameters = {
        {
            name = "anim",
            description = "The gesture enumeration.",
            type = "number",
            optional = false
        },
        {
            name = "text",
            description = "The textual description of the animation. This is what players see on the button in the menu.",
            type = "string",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.removePlayerGesture = DarkRP.stub{
    name = "removePlayerGesture",
    description = "Removes a player gesture from the DarkRP animations menu (the one that opens with the keys weapon.). Note: This function must be called BOTH serverside AND clientside!",
    parameters = {
        {
            name = "anim",
            description = "The gesture enumeration.",
            type = "number",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

--gamemodes/darkrp/gamemode/config/licenseweapons.lua:
GM.NoLicense["weapon_physcannon"] = true
GM.NoLicense["weapon_physgun"] = true
GM.NoLicense["weapon_bugbait"] = true
GM.NoLicense["gmod_tool"] = true
GM.NoLicense["gmod_camera"] = true

--addons/darkrpmodification/lua/darkrp_config/licenseweapons.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/positions/sh_commands.lua:
local plyMeta = FindMetaTable("Player")

DarkRP.declareChatCommand{
    command = "setspawn",
    description = "Reset the spawn position for some job and place a new one at your position (use the command name of the job as argument)",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "addspawn",
    description = "Add a spawn position for some job (use the command name of the job as argument)",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "removespawn",
    description = "Remove a spawn position for some job (use the command name of the job as argument)",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "jailpos",
    description = "Reset jail positions and create a new one at your position.",
    delay = 1.5,
    condition = fn.FAnd{plyMeta.isChief, fn.Compose{fn.Curry(fn.GetValue, 2)("chiefjailpos"), fn.Curry(fn.GetValue, 2)("Config"), gmod.GetGamemode}}
}

DarkRP.declareChatCommand{
    command = "setjailpos",
    description = "Reset jail positions and create a new one at your position.",
    delay = 1.5,
    condition = fn.FAnd{plyMeta.isChief, fn.Compose{fn.Curry(fn.GetValue, 2)("chiefjailpos"), fn.Curry(fn.GetValue, 2)("Config"), gmod.GetGamemode}}
}

DarkRP.declareChatCommand{
    command = "addjailpos",
    description = "Add a jail position where you're standing.",
    delay = 1.5,
    condition = fn.FAnd{plyMeta.isChief, fn.Compose{fn.Curry(fn.GetValue, 2)("chiefjailpos"), fn.Curry(fn.GetValue, 2)("Config"), gmod.GetGamemode}}
}

--gamemodes/darkrp/gamemode/modules/money/sh_money.lua:
local pMeta = FindMetaTable("Player")
local entMeta = FindMetaTable("Entity")

function pMeta:canAfford(amount)
    if not amount or self.DarkRPUnInitialized then return false end
    return math.floor(amount) >= 0 and (self:getDarkRPVar("money") or 0) - math.ceil(amount) >= 0
end

function entMeta:isMoneyBag()
    return self.IsSpawnedMoney or self:GetClass() == GAMEMODE.Config.MoneyClass
end

--gamemodes/darkrp/gamemode/modules/logging/cl_init.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/jobs/sh_commands.lua:
local plyMeta = FindMetaTable("Player")

DarkRP.declareChatCommand{
    command = "job",
    description = "Change your job name",
    delay = 1.5,
    condition = fn.Compose{fn.Not, plyMeta.isArrested}
}

DarkRP.declareChatCommand{
    command = "demote",
    description = "Demote a player from their job",
    delay = 1.5,
    condition = fn.Compose{fn.Curry(fn.Flip(fn.Gt), 2)(1), fn.Length, player.GetAll},
    tableArgs = true
}

DarkRP.declareChatCommand{
    command = "switchjob",
    description = "Switch jobs with the player you're looking at",
    delay = 1.5,
    condition = fn.Compose{fn.Curry(fn.GetValue, 2)("allowjobswitch"), fn.Curry(fn.GetValue, 2)("Config"), gmod.GetGamemode}
}

DarkRP.declareChatCommand{
    command = "switchjobs",
    description = "Switch jobs with the player you're looking at",
    delay = 1.5,
    condition = fn.Compose{fn.Curry(fn.GetValue, 2)("allowjobswitch"), fn.Curry(fn.GetValue, 2)("Config"), gmod.GetGamemode}
}

DarkRP.declareChatCommand{
    command = "jobswitch",
    description = "Switch jobs with the player you're looking at",
    delay = 1.5,
    condition = fn.Compose{fn.Curry(fn.GetValue, 2)("allowjobswitch"), fn.Curry(fn.GetValue, 2)("Config"), gmod.GetGamemode}
}

DarkRP.declareChatCommand{
    command = "teamban",
    description = "Ban someone from getting a certain job",
    delay = 1.5,
    tableArgs = true
}

DarkRP.declareChatCommand{
    command = "teamunban",
    description = "Undo a teamban",
    delay = 1.5,
    tableArgs = true
}

--gamemodes/darkrp/gamemode/modules/hitmenu/cl_menu.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/chat/sh_chatcommands.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/base/sh_createitems.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/base/cl_fonts.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/base/cl_fonts.lua:
--[[---------------------------------------------------------------------------
The fonts that DarkRP uses
---------------------------------------------------------------------------]]
local function loadFonts()
    surface.CreateFont("DarkRPHUD1", {
        size = 20,
        weight = 600,
        antialias = true,
        shadow = true,
        font = "Roboto",
        extended = true,
    })

    surface.CreateFont("DarkRPHUD2", {
        size = 23,
        weight = 400,
        antialias = true,
        shadow = false,
        font = "Roboto",
        extended = true,
    })

    surface.CreateFont("Roboto20", {
        size = 20,
        weight = 600,
        antialias = true,
        shadow = false,
        font = "Roboto",
        extended = true,
    })

    surface.CreateFont("Trebuchet18", {
        size = 18,
        weight = 500,
        antialias = true,
        shadow = false,
        font = "Trebuchet MS",
        extended = true,
    })

    surface.CreateFont("Trebuchet20", {
        size = 20,
        weight = 500,
        antialias = true,
        shadow = false,
        font = "Trebuchet MS",
        extended = true,
    })

    surface.CreateFont("Trebuchet24", {
        size = 24,
        weight = 500,
        antialias = true,
        shadow = false,
        font = "Trebuchet MS",
        extended = true,
    })

    surface.CreateFont("Trebuchet48", {
        size = 48,
        weight = 500,
        antialias = true,
        shadow = false,
        font = "Trebuchet MS",
        extended = true,
    })

    surface.CreateFont("TabLarge", {
        size = 18,
        weight = 700,
        antialias = true,
        shadow = false,
        font = "Roboto",
        extended = true,
    })

    surface.CreateFont("UiBold", {
        size = 16,
        weight = 800,
        antialias = true,
        shadow = false,
        font = "Verdana",
        extended = true,
    })

    surface.CreateFont("HUDNumber5", {
        size = 30,
        weight = 800,
        antialias = true,
        shadow = false,
        font = "Verdana",
        extended = true,
    })

    surface.CreateFont("ScoreboardHeader", {
        size = 32,
        weight = 500,
        antialias = true,
        shadow = false,
        font = "Roboto",
        extended = true,
    })

    surface.CreateFont("ScoreboardSubtitle", {
        size = 22,
        weight = 500,
        antialias = true,
        shadow = false,
        font = "Roboto",
        extended = true,
    })

    surface.CreateFont("ScoreboardPlayerName", {
        size = 19,
        weight = 500,
        antialias = true,
        shadow = false,
        font = "Roboto",
        extended = true,
    })

    surface.CreateFont("ScoreboardPlayerName2", {
        size = 15,
        weight = 500,
        antialias = true,
        shadow = false,
        font = "Roboto",
        extended = true,
    })

    surface.CreateFont("ScoreboardPlayerNameBig", {
        size = 22,
        weight = 500,
        antialias = true,
        shadow = false,
        font = "Roboto",
        extended = true,
    })

    surface.CreateFont("AckBarWriting", {
        size = 20,
        weight = 500,
        antialias = true,
        shadow = false,
        font = "Akbar",
        extended = true,
    })

    surface.CreateFont("DarkRP_tipjar", {
        size = 100,
        weight = 500,
        antialias = true,
        shadow = true,
        font = "Verdana",
        extended = true,
    })
end
loadFonts()
--gamemodes/darkrp/gamemode/modules/base/cl_entityvars.lua:
local DarkRPVars = {}

--[[---------------------------------------------------------------------------
Interface
---------------------------------------------------------------------------]]
local pmeta = FindMetaTable("Player")
-- This function is made local to optimise getDarkRPVar, which is called often
-- enough to warrant optimizing. See https://github.com/FPtje/DarkRP/pull/3212
local get_user_id = pmeta.UserID
function pmeta:getDarkRPVar(var, fallback)
    local vars = DarkRPVars[get_user_id(self)]
    if vars == nil then return fallback end

    local results = vars[var]
    if results == nil then return fallback end

    return results
end

--[[---------------------------------------------------------------------------
Retrieve the information of a player var
---------------------------------------------------------------------------]]
local function RetrievePlayerVar(userID, var, value)
    local ply = Player(userID)
    DarkRPVars[userID] = DarkRPVars[userID] or {}

    hook.Call("DarkRPVarChanged", nil, ply, var, DarkRPVars[userID][var], value)
    DarkRPVars[userID][var] = value

    -- Backwards compatibility
    if IsValid(ply) then
        ply.DarkRPVars = DarkRPVars[userID]
    end
end

--[[---------------------------------------------------------------------------
Retrieve a player var.
Read the usermessage and attempt to set the DarkRP var
---------------------------------------------------------------------------]]
local function doRetrieve()
    local userID = net.ReadUInt(16)
    local var, value = DarkRP.readNetDarkRPVar()

    RetrievePlayerVar(userID, var, value)
end
net.Receive("DarkRP_PlayerVar", doRetrieve)

--[[---------------------------------------------------------------------------
Retrieve the message to remove a DarkRPVar
---------------------------------------------------------------------------]]
local function doRetrieveRemoval()
    local userID = net.ReadUInt(16)
    local vars = DarkRPVars[userID] or {}
    local var = DarkRP.readNetDarkRPVarRemoval()
    local ply = Player(userID)

    hook.Call("DarkRPVarChanged", nil, ply, var, vars[var], nil)

    vars[var] = nil
end
net.Receive("DarkRP_PlayerVarRemoval", doRetrieveRemoval)

--[[---------------------------------------------------------------------------
Initialize the DarkRPVars at the start of the game
---------------------------------------------------------------------------]]
local function InitializeDarkRPVars(len)
    local plyCount = net.ReadUInt(8)

    for i = 1, plyCount, 1 do
        local userID = net.ReadUInt(16)
        local varCount = net.ReadUInt(DarkRP.DARKRP_ID_BITS + 2)

        for j = 1, varCount, 1 do
            local var, value = DarkRP.readNetDarkRPVar()
            RetrievePlayerVar(userID, var, value)
        end
    end
end
net.Receive("DarkRP_InitializeVars", InitializeDarkRPVars)
timer.Simple(0, fp{RunConsoleCommand, "_sendDarkRPvars"})

net.Receive("DarkRP_DarkRPVarDisconnect", function(len)
    local userID = net.ReadUInt(16)
    DarkRPVars[userID] = nil
end)

--[[---------------------------------------------------------------------------
Request the DarkRPVars when they haven't arrived
---------------------------------------------------------------------------]]
timer.Create("DarkRPCheckifitcamethrough", 15, 0, function()
    for _, v in player.Iterator() do
        if v:getDarkRPVar("rpname") then continue end

        RunConsoleCommand("_sendDarkRPvars")
        return
    end

    timer.Remove("DarkRPCheckifitcamethrough")
end)

--gamemodes/darkrp/gamemode/modules/animations/sh_animations.lua:
local Anims = {}

-- Load animations after the languages for translation purposes
hook.Add("loadCustomDarkRPItems", "loadAnimations", function()
    Anims[ACT_GMOD_GESTURE_BOW] = DarkRP.getPhrase("bow")
    Anims[ACT_GMOD_TAUNT_MUSCLE] = DarkRP.getPhrase("sexy_dance")
    Anims[ACT_GMOD_GESTURE_BECON] = DarkRP.getPhrase("follow_me")
    Anims[ACT_GMOD_TAUNT_LAUGH] = DarkRP.getPhrase("laugh")
    Anims[ACT_GMOD_TAUNT_PERSISTENCE] = DarkRP.getPhrase("lion_pose")
    Anims[ACT_GMOD_GESTURE_DISAGREE] = DarkRP.getPhrase("nonverbal_no")
    Anims[ACT_GMOD_GESTURE_AGREE] = DarkRP.getPhrase("thumbs_up")
    Anims[ACT_GMOD_GESTURE_WAVE] = DarkRP.getPhrase("wave")
    Anims[ACT_GMOD_TAUNT_DANCE] = DarkRP.getPhrase("dance")
end)

function DarkRP.addPlayerGesture(anim, text)
    if not anim then DarkRP.error("Argument #1 of DarkRP.addPlayerGesture (animation/gesture) does not exist.", 2) end
    if not text then DarkRP.error("Argument #2 of DarkRP.addPlayerGesture (text) does not exist.", 2) end

    Anims[anim] = text
end

function DarkRP.removePlayerGesture(anim)
    if not anim then DarkRP.error("Argument #1 of DarkRP.removePlayerGesture (animation/gesture) does not exist.", 2) end

    Anims[anim] = nil
end

if SERVER then
    local function CustomAnim(ply, cmd, args)
        if ply:EntIndex() == 0 then return end
        local Gesture = tonumber(args[1] or 0)
        if not Anims[Gesture] then return end

        local RP = RecipientFilter()
        RP:AddAllPlayers()

        umsg.Start("_DarkRP_CustomAnim", RP)
        umsg.Entity(ply)
        umsg.Short(Gesture)
        umsg.End()
    end
    concommand.Add("_DarkRP_DoAnimation", CustomAnim)
    return
end

local function KeysAnims(um)
    local ply = um:ReadEntity()
    local act = um:ReadString()

    if not IsValid(ply) then return end
    ply:AnimRestartGesture(GESTURE_SLOT_CUSTOM, act == "usekeys" and ACT_GMOD_GESTURE_ITEM_PLACE or ACT_HL2MP_GESTURE_RANGE_ATTACK_FIST, true)
end
usermessage.Hook("anim_keys", KeysAnims)

local function CustomAnimation(um)
    local ply = um:ReadEntity()
    local act = um:ReadShort()

    if not IsValid(ply) then return end
    ply:AnimRestartGesture(GESTURE_SLOT_CUSTOM, act, true)
end
usermessage.Hook("_DarkRP_CustomAnim", CustomAnimation)

local AnimFrame
local function AnimationMenu()
    if AnimFrame then return end

    local Panel = vgui.Create("Panel")
    Panel:SetPos(0,0)
    Panel:SetSize(ScrW(), ScrH())
    function Panel:OnMousePressed()
        AnimFrame:Close()
    end

    AnimFrame = AnimFrame or vgui.Create("DFrame", Panel)
    local Height = table.Count(Anims) * 55 + 32
    AnimFrame:SetSize(130, Height)
    AnimFrame:SetPos(ScrW() / 2 + ScrW() * 0.1, ScrH() / 2 - (Height / 2))
    AnimFrame:SetTitle(DarkRP.getPhrase("custom_animation"))
    AnimFrame.btnMaxim:SetVisible(false)
    AnimFrame.btnMinim:SetVisible(false)
    AnimFrame:SetVisible(true)
    AnimFrame:MakePopup()
    AnimFrame:ParentToHUD()

    function AnimFrame:Close()
        Panel:Remove()
        AnimFrame:Remove()
        AnimFrame = nil
    end

    local i = 0
    for k, v in SortedPairs(Anims) do
        i = i + 1
        local button = vgui.Create("DButton", AnimFrame)
        button:SetPos(10, (i - 1) * 55 + 30)
        button:SetSize(110, 50)
        button:SetText(v)

        button.DoClick = function()
            RunConsoleCommand("_DarkRP_DoAnimation", k)
        end
    end
    AnimFrame:SetSkin(GAMEMODE.Config.DarkRPSkin)
end
concommand.Add("_DarkRP_AnimationMenu", AnimationMenu)

--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/adminpanel/cl_glorifiedleveling_player.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/adminpanel/cl_glorifiedleveling_players.lua:

local PANEL = {}

function PANEL:Init()
    net.Start( "GlorifiedLeveling.AdminPanel.PlayerListOpened" )
    net.SendToServer()

    self.Theme = self:GetParent().Theme

    self.TopBar = vgui.Create( "Panel", self )
    self.TopBar.Theme = self:GetParent().Theme
    self.TopBar.Paint = function( s, w, h )
        draw.SimpleText( GlorifiedLeveling.i18n.GetPhrase( "glPlayersOnline", #self.Players ), "GlorifiedLeveling.AdminMenu.PlayersOnline", w * 0.026, w * 0.026 + 3, self.Theme.Data.Colors.playerTopBarColor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
    end

    self.ScrollPanel = vgui.Create( "GlorifiedLeveling.ScrollPanel", self )

    self.Players = {}
end

function PANEL:AddPlayer( ply, level )
    local playerid = #self.Players + 1

    self.Players[playerid] = vgui.Create( "GlorifiedLeveling.Player", self.ScrollPanel )
    self.Players[playerid].Theme = self.Theme
    self.Players[playerid].CanEditPlayers = self.CanEditPlayers
    self.Players[playerid]:AddPlayer( ply, level )
end

function PANEL:ResetPlayers()
    self.ScrollPanel:Clear()
    table.Empty( self.Players )
end

function PANEL:PerformLayout( w, h )
    self.TopBar:SetSize( w, h * 0.05 )
    self.TopBar:Dock( TOP )

    self.ScrollPanel:Dock( FILL )
    self.ScrollPanel:DockMargin( 0, 0, 0, h * 0.02 )
    self.ScrollPanel:DockPadding( 0, 0, w * 0.013, 0 )

    local plyh = h * 0.08
    local plymarginx, plymarginy = w * 0.026, h * 0.008
    for k,v in ipairs( self.Players ) do
        v:SetHeight( plyh )
        v:Dock( TOP )
        v:DockMargin( plymarginx, plymarginy, plymarginx, plymarginy )
    end
end

vgui.Register( "GlorifiedLeveling.Players", PANEL, "Panel" )

net.Receive( "GlorifiedLeveling.AdminPanel.PlayerListOpened.SendInfo", function()
    local playersLevels = util.JSONToTable( net.ReadLargeString() )
    if not playersLevels then return end

    local panel = GlorifiedLeveling.UI.AdminMenu.Page
    if not panel.ResetPlayers then return end

    panel:ResetPlayers()

    for k, v in ipairs( player.GetAll() ) do
        if IsValid(v) then 
        panel:AddPlayer( v, playersLevels[v:SteamID()] or -1 )
        end
    end
end )
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/leaderboard/cl_glorifiedleveling_leaderboard_panel.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/leaderboard/cl_glorifiedleveling_leaderboard_panel.lua:

local PANEL = {}

function PANEL:PerformLayout( w, h )
    self.TitleBar:Dock( TOP )
    self.TitleBar:SetSize( w, h * 0.1 )

    self.LeaderList:Dock( FILL )
    self.LeaderList:DockMargin( 10, 10, 10, 10 )
end

function PANEL:UpdateCache( leaderboardTbl )
    self:SetSize( ScrH() * 0.65, ScrH() * 0.6 )
    self:Center()
    self:MakePopup()

    self.Theme = GlorifiedLeveling.Themes.GetCurrent()

    self.TitleBar = vgui.Create( "GlorifiedLeveling.Leaderboard.TitleBar", self )
    self.LeaderList = vgui.Create( "GlorifiedLeveling.Leaderboard.LeaderList", self )

    self:SetAlpha( 0 )
    self:AlphaTo( 255, 0.3 )
end

function PANEL:Think()
    if input.IsKeyDown( KEY_ESCAPE ) then
        GlorifiedLeveling.UI.CloseLeaderboard()
        RunConsoleCommand( "cancelselect" )
    end
end

function PANEL:Paint( w, h )
    draw.RoundedBox( 6, 0, 0, w, h, self.Theme.Data.Colors.leaderboardBackgroundColor )
end

vgui.Register( "GlorifiedLeveling.Leaderboard.Menu", PANEL, "EditablePanel" )

function GlorifiedLeveling.UI.OpenLeaderboard()
    if not IsValid( LocalPlayer() ) then return end

    if IsValid( GlorifiedLeveling.UI.Leaderboard ) then
        GlorifiedLeveling.UI.Leaderboard:Remove()
        GlorifiedLeveling.UI.Leaderboard = nil
    end

    GlorifiedLeveling.UI.Leaderboard = vgui.Create( "GlorifiedLeveling.Leaderboard.Menu" )
    GlorifiedLeveling.UI.Leaderboard:UpdateCache()
end

function GlorifiedLeveling.UI.CloseLeaderboard()
    if not GlorifiedLeveling.UI.Leaderboard then return end

    GlorifiedLeveling.UI.Leaderboard:AlphaTo( 0, 0.3, 0, function()
        if not GlorifiedLeveling.UI.Leaderboard then return end
        GlorifiedLeveling.UI.Leaderboard:Remove()
        GlorifiedLeveling.UI.Leaderboard = nil
    end )
end

concommand.Add( "glorifiedleveling_leaderboard", GlorifiedLeveling.UI.OpenLeaderboard )

hook.Add( "OnPlayerChat", "GlorifiedLeveling.LeaderboardPanel.OnPlayerChat", function( ply, text )
    if ply ~= LocalPlayer() or not text or text == "" then return end
    text = string.lower( text )
    local firstCharacter = string.sub( text, 1, 1 )
    if ( firstCharacter == "!" or firstCharacter == "/" ) and GlorifiedLeveling.Config.LEADERBOARD_OPEN_COMMANDS[string.sub( text, 2 )] and not GlorifiedLeveling.UI.Leaderboard then
        GlorifiedLeveling.UI.OpenLeaderboard()
        return true
    end
end )

hook.Add( "PlayerButtonDown", "GlorifiedLeveling.LeaderboardPanel.PlayerButtonDown", function( ply, button )
   -- if ply == LocalPlayer() and GlorifiedLeveling.Config.LEADERBOARD_KEY_ENABLED and button == GlorifiedLeveling.Config.LEADERBOARD_OPEN_KEY and not GlorifiedLeveling.UI.Leaderboard then
   --     GlorifiedLeveling.UI.OpenLeaderboard()
   -- end
end )
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/perkmenu/cl_glorifiedleveling_perkmenu_perkentry.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/darkrp_modules/zfs/sh_zfs_darkrp.lua:
return gluapack()()
--addons/oneprint/lua/darkrp_modules/oneprint/sh_entities.lua:
-- TEAM_PRINTER = DarkRP.createJob("OnePrint", {
--     color = Color(228, 130, 38),
--     model = {"models/player/odessa.mdl"},
--     description = [[ Farm with printers ]],
--     weapons = {},
--     command = "oneprint_job",
--     max = 1,
--     salary = 20,
--     admin = 0,
--     vote = false,
--     category = "Citizens",
--     hasLicense = false
-- })

DarkRP.createCategory{
	name = "OnePrint", 
	categorises = "entities",
	startExpanded = true,
	color = Color(228, 152, 38),
	canSee = function(ply) return true end,
	sortOrder = 100,
}

DarkRP.createEntity("OnePrint", {
	ent = "oneprint",
	model = "models/ogl/ogl_oneprint.mdl",
	price = 7500,
	max = 1,
	cmd = "oneprint_ent",
	-- allowed = {TEAM_PRINTER},
    category = "OnePrint",
})
--addons/ch_mining/lua/darkrp_modules/ch_mining/sh_ch_mining_darkrp.lua:
return gluapack()()
--addons/bb_contextmenumenu/lua/darkrp_modules/base/cl_init.lua:
local C_CONFIG_POSITION = "left" --Uploaded by OverlordAkise --Sent by a friend, no idea where the script is from --Random contextmenu script here, it's cool, level 3 -- left, right, top or bottom
local Menu = {}
local function Option(title, icon, cmd, check)
    table.insert(Menu, {
        title = title,
        icon = icon,
        cmd = cmd,
        check = check
    })
end

local function SubMenu(title, icon, func, check)
    table.insert(Menu, {
        title = title,
        icon = icon,
        func = func,
        check = check
    })
end

local function Spacer(check)
    table.insert(Menu, {
        check = check
    })
end

local function Request(title, text, func)
    return function() Derma_StringRequest(DarkRP.getPhrase(title) or title, DarkRP.getPhrase(text) or text, nil, function(s) func(s) end) end
end

local function isCP()
    return LocalPlayer():isCP()
end

local function icon(name)
    return "icon16/" .. name .. ".png"
end
local menu
Option("1. Veya 3. Bakış Açısını Aktifleştir", "icon16/user_go.png", function() RunConsoleCommand("thirdperson_toggle") end)
Option("Bakış Açısı Ayarlama Menüsü", "icon16/user_go.png", function() RunConsoleCommand("thirdperson_menu") end)
Option("Prop Dostları Menüsü", "icon16/group_add.png", function() RunConsoleCommand("buddies") end)
Option("FPS Menü", "icon16/cog_add.png", function() RunConsoleCommand("say", "!fps") end)
Option("Kasa Sistemi", "icon16/package_add.png", function() RunConsoleCommand("say", "!unbox") end)
Option("Yazı - Tura", "icon16/coins.png", function() RunConsoleCommand("say", "!flips") end)
Option("Parti Menüsü", "icon16/group.png", function() RunConsoleCommand("say", "!parti") end)
Option("HUD Ayarlarını Aç", "icon16/group.png", function() RunConsoleCommand("say", "!hud") end)
Option("Koleksiyon Paketi", "icon16/group.png", function() RunConsoleCommand("say", "!w") end)
Option("Steam Grup", "icon16/group.png", function() RunConsoleCommand("say", "!grup") end)
Option("Grup Ödülünü Al", "icon16/group.png", function() RunConsoleCommand("say", "/grupodul") end)
Option("Dj Sesini Kapat", "icon16/group.png", function() RunConsoleCommand("say", "!djseskapat") end)
Option("Dj Sesini Aç", "icon16/group.png", function() RunConsoleCommand("say", "!djsesac") end)
SubMenu("Para Etkileşimleri", "icon16/money.png", function(self)
    self:AddOption("Para bırak", Request("", "Ne kadar?", function(s) RunConsoleCommand("darkrp", "dropmoney", s) end)):SetImage("icon16/money_delete.png")
    self:AddOption("Para ver", Request("", "Ne Kadar?", function(s) RunConsoleCommand("darkrp", "give", s) end)):SetImage("icon16/money.png")
    local mo, pm = self:AddSubMenu("Çek yaz")
    for k, v in ipairs(player.GetAll()) do
        if v == LocalPlayer() then continue end
        mo:AddOption(v:Name(), Request("Çek yaz", "Ne kadar?", function(s) RunConsoleCommand("darkrp", "check", v:UserID(), s) end)):SetColor(v:getJobTable().color)
    end

    pm:SetImage("icon16/application_form_edit.png")
end)

Option("Elindeki Silahın Mermisini Al", "icon16/application.png", function() RunConsoleCommand("darkrp", "buyammo", LocalPlayer():GetActiveWeapon().Primary.Ammo) end, function() return IsValid(LocalPlayer():GetActiveWeapon()) and istable(LocalPlayer():GetActiveWeapon().Primary) and LocalPlayer():GetActiveWeapon().Primary.Ammo and fn.Head(fn.Filter(function(x) return x.ammoType == LocalPlayer():GetActiveWeapon().Primary.Ammo end, GAMEMODE.AmmoTypes)) end)
Option("Yetkili Çağır", "icon16/user_go.png", function()
    RunConsoleCommand("say", "/calladmin")
end)
Option("Polis Çağır", "icon16/user_go.png", function() RunConsoleCommand("say", "!polis") end)
Option("Tüm Kapıları Sat", "icon16/door.png", function() RunConsoleCommand("say", "/unownalldoors") end)
Spacer()
Spacer()
Option("Silahını Bırak", "icon16/gun.png", function() RunConsoleCommand("darkrp", "dropweapon") end)
SubMenu("Birisini Meslekten At", "icon16/user_delete.png", function(self)
    for k, v in ipairs(player.GetAll()) do
        if v == LocalPlayer() then continue end
        self:AddOption(v:Name(), Request("Meslekten at", "Meslekten atılma sebebi nedir?", function(s) RunConsoleCommand("darkrp", "demote", v:UserID(), s) end)):SetColor(v:getJobTable().color)
    end
end)

Option("Meslek yazısını görünümünü değiştir", "icon16/user.png", Request("Meslek yazısı", "Mesleğinin ismi ne olacak?", function(s) RunConsoleCommand("darkrp", "job", s) end))
Spacer(isCP)
SubMenu("Birisini Arat", "icon16/flag_red.png", function(self)
    for k, v in ipairs(player.GetAll()) do
        if v == LocalPlayer() then continue end
        if not v:isWanted() then self:AddOption(v:Name(), Request("Birisini arat", "Aranma sebebi nedir?", function(s) RunConsoleCommand("darkrp", "wanted", v:UserID(), s) end)):SetColor(v:getJobTable().color) end
    end
end, isCP)

SubMenu("Birisini Aranan Listesinden Çıkar", "icon16/flag_green.png", function(self)
    for k, v in ipairs(player.GetAll()) do
        if v:isWanted() then self:AddOption(v:Name(), function() RunConsoleCommand("darkrp", "unwanted", v:UserID(), s) end):SetColor(v:getJobTable().color) end
    end
end, isCP)

SubMenu("Baskın İzni İste", "icon16/door_in.png", function(self)
    for k, v in ipairs(player.GetAll()) do
        if v == LocalPlayer() then continue end
        if not v:isWanted() then self:AddOption(v:Name(), Request("Baskın izni iste", "Baskın sebebi nedir?", function(s) RunConsoleCommand("darkrp", "warrant", v:UserID(), s) end)):SetColor(v:getJobTable().color) end
    end
end, isCP)

Option("Silah Lisansı Ver", "icon16/page_add.png", function(self) RunConsoleCommand("darkrp", "givelicense") end, function()
    local ply = LocalPlayer()
    local noMayorExists = fn.Compose{fn.Null, fn.Curry(fn.Filter, 2)(ply.isMayor), player.GetAll}
    local noChiefExists = fn.Compose{fn.Null, fn.Curry(fn.Filter, 2)(ply.isChief), player.GetAll}
    local canGiveLicense = fn.FOr{ply.isMayor, fn.FAnd{ply.isChief, noMayorExists}, fn.FAnd{ply.isCP, noChiefExists, noMayorExists}}
    return canGiveLicense(ply) -- Mayors can hand out licenses -- Chiefs can if there is no mayor -- CP's can if there are no chiefs nor mayors
end)

Spacer(function() return LocalPlayer():isMayor() end)
Option("Milli Piyango Başlat", "icon16/coins.png", Request("Milli Piyango Başlat", "Piyango ne kadar değerde olacak? (₺100 - ₺1M)", function(s) RunConsoleCommand("darkrp", "lottery", s) end), function() return LocalPlayer():isMayor() and not GetGlobalBool("LockDown1") end)
Option("Yasa Ekle", "icon16/application_side_list.png", Request("Yasa ekle", "Ney yasası eklemek istiyorsun?", function(s) RunConsoleCommand("say", "/addlaw " .. s) end), function() return LocalPlayer():isMayor() end)
Option("Yasaları Sıfırla", "icon16/arrow_refresh.png", function() RunConsoleCommand("say", "/resetlaws") end, function() return LocalPlayer():isMayor() end)
Option("Yasa Ekranı Çıkar", "icon16/application_view_list.png", function() RunConsoleCommand("say", "/placelaws") end, function() return LocalPlayer():isMayor() end)
Option("Sokağa Çıkma Yasağı Başlat", "icon16/stop.png", Request("Lockdown", "Sokağa çıkma yasağı başlatma sebebi nedir?", function(s)
    RunConsoleCommand("say", "/lockdown " .. s) --RunConsoleCommand("darkrp", "lockdown")
end), function() return LocalPlayer():isMayor() end)

Option("Sokağa Çıkma Yasağını Bitir", "icon16/stop.png", function()
    RunConsoleCommand("say", "/unlockdown") --RunConsoleCommand("darkrp", "unlockdown")
end, function() return LocalPlayer():isMayor() end)

Spacer()
SubMenu("Yetkili Menüsü", "icon16/book.png", function(self)
    self:AddOption("Log Menü", function() RunConsoleCommand("say", "!blogs") end):SetIcon("icon16/report_add.png")
    self:AddOption("Spectate", function() RunConsoleCommand("say", "!spectate") end):SetIcon("icon16/zoom.png")
    self:AddOption("Cloak", function() RunConsoleCommand("sam", "cloak") end):SetIcon("icon16/status_offline.png")
    self:AddOption("Uncloak", function() RunConsoleCommand("sam", "uncloak") end):SetIcon("icon16/status_offline.png")
    self:AddOption("God", function() RunConsoleCommand("sam", "god") end):SetIcon("icon16/shield.png")
    self:AddOption("Ungod", function() RunConsoleCommand("sam", "ungod") end):SetIcon("icon16/shield.png")
    self:AddOption("Noclip", function() RunConsoleCommand("sam", "noclip") end):SetIcon("icon16/arrow_out.png")
end, function() return LocalPlayer():HasPermission("sam") end)
local lastMenuOpenTime = CurTime()
hook.Add("OnContextMenuOpen", "CMenuOnContextMenuOpen", function()
    if CurTime() - lastMenuOpenTime < 0.25 then 
        return
    end
    lastMenuOpenTime = CurTime()
    local trace = LocalPlayer():GetEyeTrace()
    if IsValid(trace.Entity) and trace.Entity:GetClass() == "mediaplayer_tv" then
        return
    end

    if not g_ContextMenu:IsVisible() then
        local orig = g_ContextMenu.Open
        g_ContextMenu.Open = function(self, ...)
            self.Open = orig
            orig(self, ...)

            if IsValid(menu) then
                menu:Remove()
            end

            menu = vgui.Create("CMenuExtension")
            menu:SetDrawOnTop(false)

            for k, v in pairs(Menu) do
                if not v.check or v.check() then
                    if v.cmd then
                        menu:AddOption(v.title, isfunction(v.cmd) and v.cmd or function() RunConsoleCommand(v.cmd) end):SetImage(v.icon)
                    elseif v.func then
                        local m, s = menu:AddSubMenu(v.title)
                        s:SetImage(v.icon)
                        v.func(m)
                    else
                        menu:AddSpacer()
                    end
                end
            end

            menu:Open()
            if C_CONFIG_POSITION == "bot" then
                menu:CenterHorizontal()
                menu.y = ScrH()
                menu:MoveTo(menu.x, ScrH() - menu:GetTall() - 8, .1, 0)
            elseif C_CONFIG_POSITION == "right" then
                menu:CenterVertical()
                menu.x = ScrW()
                menu:MoveTo(ScrW() - menu:GetWide() - 8, menu.y, .1, 0)
            elseif C_CONFIG_POSITION == "left" then
                menu:CenterVertical()
                menu.x = - menu:GetWide()
                menu:MoveTo(8, menu.y, .1, 0)
            else
                menu:CenterHorizontal()
                menu.y = - menu:GetTall()
                menu:MoveTo(menu.x, 30 + 8, .1, 0)
            end

            menu:MakePopup()
        end
    end
end)

hook.Add("CloseDermaMenus", "CMenuCloseDermaMenus", function()
	if menu && menu:IsValid() then
		menu:MakePopup()
	end
end)

hook.Add("OnContextMenuClose", "CMenuOnContextMenuClose", function()

    if IsValid(menu) then
        menu:Remove()
        menu = nil
    end

    CloseDermaMenus()

end)

concommand.Add("cmenukapat", function()
    if IsValid(menu) then
        menu:Remove()
        menu = nil
    end
    
    if IsValid(g_ContextMenu) then
        g_ContextMenu:Close()
    end

    CloseDermaMenus()
end)

local f = RegisterDermaMenuForClose
local PANEL = {}
AccessorFunc(PANEL, "m_bBorder", "DrawBorder")
AccessorFunc(PANEL, "m_bDeleteSelf", "DeleteSelf")
AccessorFunc(PANEL, "m_iMinimumWidth", "MinimumWidth")
AccessorFunc(PANEL, "m_bDrawColumn", "DrawColumn")
AccessorFunc(PANEL, "m_iMaxHeight", "MaxHeight")
AccessorFunc(PANEL, "m_pOpenSubMenu", "OpenSubMenu")
function PANEL:Init()
    self:SetIsMenu(true)
    self:SetDrawBorder(true)
    self:SetDrawBackground(true)
    self:SetMinimumWidth(100)
    self:SetDrawOnTop(true)
    self:SetMaxHeight(ScrH() * 0.9)
    self:SetDeleteSelf(true)
    self:SetPadding(0)
end

function PANEL:AddPanel(pnl)
    self:AddItem(pnl)
    pnl.ParentMenu = self
end

function PANEL:AddOption(strText, funcFunction)
    local pnl = vgui.Create("CMenuOption", self)
    pnl:SetMenu(self)
    pnl:SetText(strText)
    pnl:SetTextColor(Color(255, 255, 255, 255))
    if funcFunction then pnl.DoClick = funcFunction end
    self:AddPanel(pnl)
    return pnl
end

function PANEL:AddCVar(strText, convar, on, off, funcFunction)
    local pnl = vgui.Create("DMenuOptionCVar", self)
    pnl:SetMenu(self)
    pnl:SetText(strText)
    pnl:SetTextColor(Color(255, 255, 255, 255))
    if funcFunction then pnl.DoClick = funcFunction end
    pnl:SetConVar(convar)
    pnl:SetValueOn(on)
    pnl:SetValueOff(off)
    self:AddPanel(pnl)
    return pnl
end

function PANEL:AddSpacer(strText, funcFunction)
    local pnl = vgui.Create("DPanel", self)
    pnl.Paint = function(p, w, h)
        surface.SetDrawColor(Color(90, 90, 90, 0))
        surface.DrawRect(0, 0, w, h)
    end

    pnl:SetTall(1)
    self:AddPanel(pnl)
    return pnl
end

function PANEL:AddSubMenu(strText, funcFunction)
    local pnl = vgui.Create("CMenuOption", self)
    local SubMenu = pnl:AddSubMenu(strText, funcFunction)
    pnl:SetText(strText)
    pnl:SetTextColor(Color(255, 255, 255, 255))
    if funcFunction then pnl.DoClick = funcFunction end
    self:AddPanel(pnl)
    return SubMenu, pnl
end

function PANEL:Hide()
    local openmenu = self:GetOpenSubMenu()
    if openmenu then openmenu:Hide() end
    self:SetVisible(false)
    self:SetOpenSubMenu(nil)
end

function PANEL:OpenSubMenu(item, menu)
    local openmenu = self:GetOpenSubMenu()
    if IsValid(openmenu) then
        if menu and openmenu == menu then return end
        self:CloseSubMenu(openmenu)
    end

    if not IsValid(menu) then return end
    local x, y = item:LocalToScreen(self:GetWide(), 0)
    menu:Open(x - 3, y, false, item)
    self:SetOpenSubMenu(menu)
end

function PANEL:CloseSubMenu(menu)
    menu:Hide()
    self:SetOpenSubMenu(nil)
end

function PANEL:Paint(w, h)
    if not self:GetDrawBackground() then return end
    draw.RoundedBox(0, 0, 0, w, h, Color(0, 0, 0, 200))
    surface.SetDrawColor(0, 0, 0, 240)
    surface.DrawOutlinedRect(0, 0, w, h)
end

function PANEL:ChildCount()
    return #self:GetCanvas():GetChildren()
end

function PANEL:GetChild(num)
    return self:GetCanvas():GetChildren()[num]
end

function PANEL:PerformLayout()
    local w = self:GetMinimumWidth()
    for k, pnl in pairs(self:GetCanvas():GetChildren()) do
        pnl:PerformLayout()
        w = math.max(w, pnl:GetWide())
    end

    self:SetWide(w)
    local y = 0
    for k, pnl in pairs(self:GetCanvas():GetChildren()) do
        pnl:SetWide(w)
        pnl:SetPos(0, y)
        pnl:InvalidateLayout(true)
        y = y + pnl:GetTall()
    end

    y = math.min(y, self:GetMaxHeight())
    self:SetTall(y)
    derma.SkinHook("Layout", "Menu", self)
    DScrollPanel.PerformLayout(self)
end

function PANEL:Open(x, y, skipanimation, ownerpanel)
    local maunal = x and y
    x = x or gui.MouseX()
    y = y or gui.MouseY()
    local OwnerHeight = 0
    local OwnerWidth = 0
    if ownerpanel then OwnerWidth, OwnerHeight = ownerpanel:GetSize() end
    self:PerformLayout()
    local w = self:GetWide()
    local h = self:GetTall()
    self:SetSize(w, h)
    if y + h > ScrH() then y = ((maunal and ScrH()) or (y + OwnerHeight)) - h end
    if x + w > ScrW() then x = ((maunal and ScrW()) or x) - w end
    if y < 1 then y = 1 end
    if x < 1 then x = 1 end
    self:SetPos(x, y)
   -- self:MakePopup()
    self:SetVisible(true)
    self:SetKeyboardInputEnabled(false)
end

function PANEL:OptionSelectedInternal(option)
    self:OptionSelected(option, option:GetText())
end

function PANEL:OptionSelected(option, text)
end

function PANEL:ClearHighlights()
    for k, pnl in pairs(self:GetCanvas():GetChildren()) do
        pnl.Highlight = nil
    end
end

function PANEL:HighlightItem(item)
    for k, pnl in pairs(self:GetCanvas():GetChildren()) do
        if pnl == item then pnl.Highlight = true end
    end
end

function PANEL:GenerateExample(ClassName, PropertySheet, Width, Height)
end

derma.DefineControl("CMenuExtension", "ContxtMenuC", PANEL, "DScrollPanel")
local PANEL = {}
AccessorFunc(PANEL, "m_pMenu", "Menu")
AccessorFunc(PANEL, "m_bChecked", "Checked")
AccessorFunc(PANEL, "m_bCheckable", "IsCheckable")
function PANEL:Init()
    self:SetContentAlignment(4)
    self:SetTextInset(30, 0)
    self:SetTextColor(Color(255, 255, 255))
    self:SetChecked(false)
end

function PANEL:SetSubMenu(menu)
    self.SubMenu = menu
    if not self.SubMenuArrow then
        self.SubMenuArrow = vgui.Create("DPanel", self)
        self.SubMenuArrow.Paint = function(panel, w, h)
            local rightarrow = {
                {
                    x = 5,
                    y = 3
                },
                {
                    x = w - 5,
                    y = h / 2
                },
                {
                    x = 5,
                    y = h - 3
                }
            }

            surface.SetDrawColor(255, 255, 255, 255)
            draw.NoTexture()
            surface.DrawPoly(rightarrow)
        end
    end
end

function PANEL:AddSubMenu()
    if not self then CloseDermaMenus() end
    local SubMenu = vgui.Create("CMenuExtension", self)
    SubMenu:SetVisible(false)
    SubMenu:SetParent(self)
    SubMenu.Paint = function(p, w, h)
        draw.RoundedBox(0, 3, 0, w, h, Color(0, 0, 0, 200))
        surface.SetDrawColor(0, 0, 0, 240)
        surface.DrawOutlinedRect(2, 0, w - 2, h)
    end

    self:SetSubMenu(SubMenu)
    return SubMenu
end

function PANEL:OnCursorEntered()
    if IsValid(self.ParentMenu) then
        self.ParentMenu:OpenSubMenu(self, self.SubMenu)
        return
    end
    if self and self.SubMenu then 
    self:GetParent():OpenSubMenu(self, self.SubMenu)
    end
end

function PANEL:OnCursorExited()
end

function PANEL:Paint(w, h)
    if self:IsHovered() then draw.RoundedBox(0, 2, 1, w - 3, h - 2, Color(255, 255, 255, 3)) end
    return false
end

function PANEL:OnMousePressed(mousecode)
    self.m_MenuClicking = true
    DButton.OnMousePressed(self, mousecode)
end

function PANEL:OnMouseReleased(mousecode)
    DButton.OnMouseReleased(self, mousecode)
    if self.m_MenuClicking and mousecode == MOUSE_LEFT then
        self.m_MenuClicking = false
        CloseDermaMenus()
    end
end

function PANEL:DoRightClick()
    if self:GetIsCheckable() then self:ToggleCheck() end
end

function PANEL:DoClickInternal()
    if self:GetIsCheckable() then self:ToggleCheck() end
    if self.m_pMenu then self.m_pMenu:OptionSelectedInternal(self) end
end

function PANEL:ToggleCheck()
    self:SetChecked(not self:GetChecked())
    self:OnChecked(self:GetChecked())
end

function PANEL:OnChecked(b)
end

function PANEL:PerformLayout()
    self:SizeToContents()
    self:SetWide(self:GetWide() + 30)
    local w = math.max(self:GetParent():GetWide(), self:GetWide())
    self:SetSize(w, 22)
    if self.SubMenuArrow then
        self.SubMenuArrow:SetSize(15, 15)
        self.SubMenuArrow:CenterVertical()
        self.SubMenuArrow:AlignRight(4)
    end

    DButton.PerformLayout(self)
end

function PANEL:GenerateExample()
end

derma.DefineControl("CMenuOption", "ContxtMenuD", PANEL, "DButton")
--addons/darkrpmodification/lua/darkrp_customthings/demotegroups.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/localization/sh_glorifiedhandcuffs_german.lua:

GlorifiedHandcuffs.i18n.RegisterPhrases( "de", {
        cuffed = "Kelepçelisin",
    blindfolded = "Gözlerin bağlı",
    gagged = "Ağzın bağlı",
    hitToFree = "%s  tuşunu spamlayarak kelepçeden kurtulabilirsin",
    brokenFreeWanted = "Tutsaklıktan kaçtı",
    bailMenu = "Kefalet Menüsü",
    bailPlayer = "Oyuncunun Kefaletini Öde",
    bailNpc = "Kefalet NPC’si",
    jailerNpc = "Gardiyan NPC’si",
    noPlayers = "Tutuklu hiçbir oyuncu yok.",
    surrendering = "Teslim oluyorsun",
    putHandsDown = "Ellerini indirmek için %s  tuşuna bas",
    playersJailed = "%s’yı %s süreliğine hapise attın.",
    name = "İsim",
    job = "Meslek",
    wallet = "Cüzdan",
    confiscateAll = "Tüm Eşyalarına El Koy",
    confiscateIllegal = "İllegal Eşyalarına El Koy",
    takeAll = "Hepsini Al",
    takeIllegal = "İllegal Eşyasını Al",
    dragPlayer = "Oyuncuyu Sürükle",
    blindfoldPlayer = "Oyuncunun Gözlerini Bağla",
    removeBlindfold = "Göz Bağını Çıkar",
    gagPlayer = "Oyuncunun Ağzını Bağla",
    removeGag = "Oyuncunun Ağzını Çöz",
    confiscate = "El Koy",
    handcuffs = "Kelepçe",
    baton = "Cop",
    --[[
    cuffed = "You are cuffed",
    blindfolded = "You are blindfolded",
    gagged = "You are gagged",
    hitToFree = "Spam  %s  to break free",
    brokenFreeWanted = "Escaped from custody",
    bailMenu = "Bail Menu",
    bailPlayer = "Bail Player",
    bailNpc = "Bail NPC",
    jailerNpc = "Jailer NPC",
    noPlayers = "There are no arrested players.",
    surrendering = "You are surrendering",
    putHandsDown = "Press  %s  to put your hands down",
    playersJailed = "You jailed %s player(s) for %s.",
    name = "Name",
    job = "Job",
    wallet = "Wallet",
    confiscateAll = "Confiscate All",
    confiscateIllegal = "Confiscate Illegal",
    takeAll = "Take All",
    takeIllegal = "Take Illegal",
    dragPlayer = "Drag Player",
    blindfoldPlayer = "Blindfold Player",
    removeBlindfold = "Remove Blindfold",
    gagPlayer = "Gag Player",
    removeGag = "Remove Gag",
    confiscate = "Confiscate",
    handcuffs = "Handcuffs",
    baton = "Baton",
    --]]
} )
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/localization/sh_glorifiedhandcuffs_russian.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/interactionmenu/cl_glorifiedhandcuffs_interactionmenu_weaponsbox_weapon.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_customize2.lua:
local translate = ArcCW.GetTranslation
local try_translate = ArcCW.TryTranslation
local defaultatticon = Material("arccw/hud/atts/default.png", "mips smooth")
local blockedatticon = Material("arccw/hud/atts/blocked.png", "mips smooth")

local bullseye = Material("arccw/hud/bullseye.png", "mips smooth")
local mat_hit = Material("arccw/hud/hit.png", "mips smooth")
local mat_hit_dot = Material("arccw/hud/hit_dot.png", "mips smooth")

local pickx_empty = Material("arccw/hud/pickx_empty.png", "mips smooth")
local pickx_full = Material("arccw/hud/pickx_filled.png", "mips smooth")

local bird = Material("arccw/hud/arccw_bird.png", "mips smooth")

local iconlock = Material("arccw/hud/locked_32.png", "mips smooth")
local iconunlock = Material("arccw/hud/unlocked_32.png", "mips smooth")

local col_fg = Color(255, 255, 255, 255)
local col_fg_tr = Color(255, 255, 255, 100)
local col_shadow = Color(0, 0, 0, 255)
local col_button = Color(0, 0, 0, 175)
local col_button_hv = Color(75, 75, 75, 175)
local col_mayomustard = Color(255, 255, 127)
local mayoicons = false

local col_block = Color(50, 0, 0, 175)
local col_block_txt = Color(175, 10, 10, 255)

local col_bad = Color(255, 50, 50, 255)
local col_good = Color(100, 255, 100, 255)
local col_info = Color(150, 150, 255, 255)

local col_unowned = col_block
local col_unowned_txt = col_block_txt

local ss, rss, thicc

local function ScreenScaleMulti(input)
    return ScreenScale(input) * ArcCW.ConVars["hud_size"]:GetFloat()
end

local function LerpColor(d, col1, col2)
    local r = Lerp(d, col1.r, col2.r)
    local g = Lerp(d, col1.g, col2.g)
    local b = Lerp(d, col1.b, col2.b)
    local a = Lerp(d, col1.a, col2.a)
    return Color(r, g, b, a)
end

local function DrawTextRot(span, txt, x, y, tx, ty, maxw, only)
    local tw, th = surface.GetTextSize(txt)

    span.TextRot = span.TextRot or {}

    if tw > maxw then
        local realx, realy = span:LocalToScreen(x, y)
        render.SetScissorRect(realx, realy, realx + maxw, realy + (th * 2), true)

        span.TextRot[txt] = span.TextRot[txt] or 0

        if !only then
            span.StartTextRot = span.StartTextRot or CurTime()
            span.TextRotState = span.TextRotState or 0 -- 0: start, 1: moving, 2: end
            if span.TextRotState == 0 then
                span.TextRot[txt] = 0
                if span.StartTextRot < CurTime() - 2 then
                    span.TextRotState = 1
                end
            elseif span.TextRotState == 1 then
                span.TextRot[txt] = span.TextRot[txt] + (FrameTime() * ScreenScaleMulti(16))
                if span.TextRot[txt] >= (tw - maxw) + ScreenScaleMulti(8) then
                    span.StartTextRot = CurTime()
                    span.TextRotState = 2
                end
            elseif span.TextRotState == 2 then
                if span.StartTextRot < CurTime() - 2 then
                    span.TextRotState = 3
                    span.StartTextRot = CurTime()
                end
            elseif span.TextRotState == 3 then
                span.TextRot[txt] = span.TextRot[txt] - (FrameTime() * ScreenScaleMulti(16))
                if span.TextRot[txt] <= 0 then
                    span.StartTextRot = CurTime()
                    span.TextRotState = 0
                end
            end
        end
        surface.SetTextPos(tx - span.TextRot[txt], ty)
        surface.DrawText(txt)
        render.SetScissorRect(0, 0, 0, 0, false)
    else
        surface.DrawText(txt)
    end
end

local function multlinetext(text, maxw, font)
    local content = {}
    local tline = ""
    local x = 0
    surface.SetFont(font)

    local newlined = string.Split(text, "\n")

    for _, line in pairs(newlined) do
        local words = string.Split(line, " ")

        for _, word in pairs(words) do
            local tx = surface.GetTextSize(word)

            if x + tx >= maxw then
                table.insert(content, tline)
                tline = ""
                x = surface.GetTextSize(word)
            end

            tline = tline .. word .. " "

            x = x + surface.GetTextSize(word .. " ")
        end

        table.insert(content, tline)
        tline = ""
        x = 0
    end

    return content
end

-- given fov and distance solve apparent size
local function solvetriangle(angle, dist)
    local a = angle / 2
    local b = dist
    return b * math.tan(a) * 2
end

local hits_1 = {}
local hits_3 = {}

local function rollhit(radius)
    local anglerand = math.Rand(0, 360)
    local dist = math.Rand(0, radius)

    local hit_x = math.sin(anglerand) * dist
    local hit_y = math.cos(anglerand) * dist

    return {x = hit_x, y = hit_y}
end

local function rollallhits(self, range_3, range_1)

    hits_1 = {}
    hits_3 = {}

    local ang = self:GetBuff("AccuracyMOA") / 60

    local radius_1 = solvetriangle(ang, range_1 * ArcCW.HUToM)
    local radius_3 = solvetriangle(ang, range_3 * ArcCW.HUToM)

    local hitcount = math.Clamp(math.max(math.Round(self:GetCapacity() / 4), math.Round(self:GetBuff("Num") * 2)), 10, 20)

    for i = 1, hitcount do
        table.insert(hits_1, rollhit(radius_1))
    end

    for i = 1, hitcount do
        table.insert(hits_3, rollhit(radius_3))
    end
end

local function RangeText(range)
    local metres = tostring(math.Round(range)) .. "m"
    local hu = tostring(math.Round(range / ArcCW.HUToM / 100) * 100) .. "HU"

    return metres, hu
end

local shot_limit = 12
local max_shots = 8

local function shotstokill(mult, dmgmin, dmgmax, mran, sran)

    -- for i, return range where i * damage == 100
    -- return -1 if can't kill with i shots, math.huge if can kill at any range
    local result = {}

    for i = 1, shot_limit do
        local req_damage = math.ceil(100 / mult / i) -- target damage to kill in i shots
        if req_damage > dmgmin and req_damage > dmgmax then
            -- cannot reach target damage ever
            result[i] = -1
        elseif req_damage <= dmgmin and req_damage <= dmgmax then
            -- will always exceed target damage
            result[i] = math.huge
        elseif dmgmin < dmgmax then
            -- damage decays over range
            local frac = 1 - math.Clamp((req_damage - dmgmin) / (dmgmax - dmgmin), 0, 1)
            result[i] = mran + frac * (sran - mran)
        else
            -- damage increases over range
            local frac = math.Clamp((req_damage - dmgmax) / (dmgmin - dmgmax), 0, 1)
            result[i] = mran + frac * (sran - mran)
        end
    end
    return result
end

local function linepaintfunc(self2, w, h)
    surface.SetDrawColor(Color(self2.Color.r, self2.Color.g, self2.Color.b, self2.Color.a * ArcCW.Inv_Fade))
    surface.SetMaterial(pickx_full)

    local imsize = h * 0.45

    surface.DrawTexturedRect((h - imsize) / 2, ((h - imsize) / 2) + (ss * 2), imsize, imsize)

    local tp = h + (ss * 2)

    surface.SetFont("ArcCWC2_10_Glow")
    surface.SetTextColor(col_shadow)
    surface.SetTextPos(tp, 0)
    DrawTextRot(self2, self2.Text, tp, 0, tp, 0, self2:GetWide() - tp)

    surface.SetFont("ArcCWC2_10")
    surface.SetTextColor(Color(self2.Color.r, self2.Color.g, self2.Color.b, self2.Color.a * ArcCW.Inv_Fade))
    surface.SetTextPos(tp, 0)
    DrawTextRot(self2, self2.Text, tp, 0, tp, 0, self2:GetWide() - tp, true)
end

local function headpaintfunc(self2, w, h)
    local tp = 0

    surface.SetFont("ArcCWC2_8_Glow")
    surface.SetTextColor(col_shadow)
    surface.SetTextPos(tp, 0)
    DrawTextRot(self2, self2.Text, tp, 0, tp, 0, self2:GetWide() - tp)

    surface.SetFont("ArcCWC2_8")
    surface.SetTextColor(Color(self2.Color.r, self2.Color.g, self2.Color.b, self2.Color.a * ArcCW.Inv_Fade))
    surface.SetTextPos(tp, 0)
    DrawTextRot(self2, self2.Text, tp, 0, tp, 0, self2:GetWide() - tp, true)
end

function SWEP:ShowInventoryButton()
    if ArcCW.ConVars["attinv_free"]:GetBool() then return false end
    --if ArcCW.ConVars["attinv_lockmode"]:GetBool() then return false end
    if !ArcCW.ConVars["enable_dropping"]:GetBool() then return false end

    return true
end

function SWEP:GetSlotInstalled(i)
    local slot = self.Attachments[i]
    local installed = slot.Installed

    if !installed then
        for _, slot2 in pairs(slot.MergeSlots or {}) do
            if !isnumber(slot2) then continue end
            if self.Attachments[slot2] and self.Attachments[slot2].Installed then
                installed = self.Attachments[slot2].Installed
                break
            elseif !self.Attachments[slot2] then
                print("ERROR! No attachment " .. tostring(slot2))
            end
        end
    end

    return installed
end

-- 1: Customize
-- 2: Presets
-- 3: Inventory
ArcCW.Inv_SelectedMenu = 1

-- Selected inventory slot
SWEP.Inv_SelectedSlot = 0

SWEP.Inv_Scroll = {}

-- 1: Stats
-- 2: Trivia
-- 3: Ballistics
ArcCW.Inv_SelectedInfo = 1

ArcCW.Inv_Fade = 0.01

ArcCW.Inv_ShownAtt = nil
ArcCW.Inv_Hidden = false

function SWEP:CreateCustomize2HUD()
    local cvar_reloadincust = ArcCW.ConVars["reloadincust"]
    local cvar_cust_sounds = ArcCW.ConVars["cust_sounds"]
    local cvar_darkunowned = ArcCW.ConVars["attinv_darkunowned"]
    local cvar_lockmode = ArcCW.ConVars["attinv_lockmode"]
    local cvar_truenames = ArcCW.ConVars["truenames"]

    if cvar_darkunowned:GetBool() then
        col_unowned = Color(0, 0, 0, 150)
        col_unowned_txt = Color(150, 150, 150, 255)
    else
        col_unowned = col_block
        col_unowned_txt = col_block_txt
    end

    ArcCW.Inv_ShownAtt = nil

    local scrw, scrh = ScrW(), ScrH()
    if vrmod and vrmod.IsPlayerInVR(self:GetOwner()) then
        -- Other resolutions seem to cause stretching issues
        scrw = 1366
        scrh = 768
    end

    ArcCW.InvHUD = vgui.Create("DFrame")

    local scrwmult = ArcCW.ConVars["hud_deadzone_x"]:GetFloat() * scrw
    local scrhmult = ArcCW.ConVars["hud_deadzone_y"]:GetFloat() * scrh

    ss = ArcCW.AugmentedScreenScale(1)
    rss = ss -- REAL SCREEN SCALE
    thicc = math.ceil(ss * 2)

    scrw, scrh = scrw - scrwmult, scrh - scrhmult

    local bar1_w = scrw / 4
    local bar2_w = scrw / 5
    local bar3_w = scrw / 2
    local airgap_x = ss * 24
    local airgap_y = ss * 24
    local smallgap = ss * 4

    local top_zone = ss * 24
    local bottom_zone = ss * 40

    local cornerrad = ss * 4

    local bigbuttonheight = ss * 36
    local smallbuttonheight = rss * 16

    local function PaintScrollBar(panel, w, h)
        local s = ss * 2
        draw.RoundedBox(ss * 1, (w - s) / 2, 0, s, h, col_fg)
    end

    local function clearrightpanel()
        if ArcCW.Inv_SelectedInfo == 1 then
            ArcCW.InvHUD_FormWeaponStats()
        elseif ArcCW.Inv_SelectedInfo == 2  then
            ArcCW.InvHUD_FormWeaponTrivia()
        elseif ArcCW.Inv_SelectedInfo == 3 then
            ArcCW.InvHUD_FormWeaponBallistics()
        end
    end

    ArcCW.Inv_Fade = 0.01

    ArcCW.InvHUD:SetPos(0, 0)
    ArcCW.InvHUD:SetSize(scrw, scrh)
    ArcCW.InvHUD:Center()
    ArcCW.InvHUD:SetDraggable(false)
    ArcCW.InvHUD:SetText("")
    ArcCW.InvHUD:SetTitle("")
    ArcCW.InvHUD:ShowCloseButton(false)
    ArcCW.InvHUD.Paint = function(self2)
        if !IsValid(self) then
            gui.EnableScreenClicker(false)
            ArcCW.InvHUD:Remove()
            return
        end

        if self:GetReloading() and !cvar_reloadincust:GetBool() then
            ArcCW.InvHUD:Remove()
            return
        end

        local st = 1 / 5
        if self:GetState() == ArcCW.STATE_CUSTOMIZE and !ArcCW.Inv_Hidden then
            ArcCW.Inv_Fade = math.Approach(ArcCW.Inv_Fade, 1, FrameTime() * 1 / st)
            --print("nooo")
        else
            ArcCW.Inv_Fade = math.Approach(ArcCW.Inv_Fade, 0, FrameTime() * 1 / st)
            --if (!game.SinglePlayer() and IsFirstTimePredicted() or true) and (self:GetState() != ArcCW.STATE_CUSTOMIZE or !ArcCW.Inv_Hidden) and ArcCW.Inv_Fade == 0 then ArcCW.InvHUD:Remove() end
            --print(CurTime())
                -- This'll completely screw up on multiplayer games and sometimes even singleplayer
        end
        col_fg = Color(255, 255, 255, Lerp(ArcCW.Inv_Fade, 0, 255))
        col_mayomustard = Color(255, 255, 127, Lerp(ArcCW.Inv_Fade, 0, 255))
        col_fg_tr = Color(255, 255, 255, Lerp(ArcCW.Inv_Fade, 0, 125))
        col_shadow = Color(0, 0, 0, Lerp(ArcCW.Inv_Fade, 0, 255))
        col_button = Color(0, 0, 0, Lerp(ArcCW.Inv_Fade, 0, 175))

        col_block = Color(50, 0, 0, 175 * ArcCW.Inv_Fade)
        col_block_txt = Color(175, 10, 10, Lerp(ArcCW.Inv_Fade, 0, 255))

        if cvar_darkunowned:GetBool() then
            col_unowned = Color(0, 0, 0, Lerp(ArcCW.Inv_Fade, 0, 150))
            col_unowned_txt = Color(150, 150, 150, Lerp(ArcCW.Inv_Fade, 0, 255))
        else
            col_unowned = col_block
            col_unowned_txt = col_block_txt
        end

        --col_bad = Color(255, 50, 50, 255 * ArcCW.Inv_Fade)
        --col_good = Color(100, 255, 100, 255 * ArcCW.Inv_Fade)
        --col_info = Color(75, 75, 255, 255 * ArcCW.Inv_Fade)
    end
    ArcCW.InvHUD.ActiveWeapon = self
    ArcCW.InvHUD.OnRemove = function()
        local close = false
        if self:IsValid() and self:GetState() == ArcCW.STATE_CUSTOMIZE then
            close = true
        end

        if LocalPlayer():GetActiveWeapon() != ArcCW.InvHUD.ActiveWeapon then
            close = true
        end

        if close then
            net.Start("arccw_togglecustomize")
            net.WriteBool(false)
            net.SendToServer()

            if IsValid(self) and self.ToggleCustomizeHUD then
                self:ToggleCustomizeHUD(false)
            end
        end

        --print("INVHUD REMOVED", CurTime())
        ArcCW.Inv_Fade = 0.01
        gui.EnableScreenClicker(false)
    end

    if ArcCW.ConVars["attinv_onlyinspect"]:GetBool() then
        return
    end

    local menu1_w = bar1_w - airgap_x
    local menu1_h = scrh - (2 * airgap_y) - bottom_zone - top_zone + smallgap

    local closebutton = vgui.Create("DButton", ArcCW.InvHUD)
    closebutton:SetText("")
    closebutton:SetPos(scrw - smallbuttonheight - airgap_x, smallgap)
    closebutton:SetSize(rss * 24, bigbuttonheight)
    closebutton.Paint = function(self2, w, h)
        local col = col_fg

        if self2:IsHovered() then
            col = col_shadow
        end
        --draw.RoundedBox(ss * 1, 0, 0, w, h, Color(127, 127, 127, 127))
            -- Comment me! But it'll show when the HUD is alive.

        surface.SetTextColor(col_shadow)
        surface.SetTextPos(ss * 8, 0)
        surface.SetFont("ArcCWC2_24_Glow")
        surface.DrawText("x")

        surface.SetTextColor(col)
        surface.SetTextPos(ss * 8, 0)
        surface.SetFont("ArcCWC2_24")
        surface.DrawText("x")
    end
    closebutton.DoClick = function(self2, clr, btn)
        net.Start("arccw_togglecustomize")
        net.WriteBool(false)
        net.SendToServer()

        if IsValid(self) and self.ToggleCustomizeHUD then
            self:ToggleCustomizeHUD(false)
        end
    end
    closebutton.DoRightClick = function(self2, clr, btn)
        ArcCW.InvHUD:Remove()
    end

    local hidebutton = vgui.Create("DButton", ArcCW.InvHUD)
    hidebutton:SetText("")
    hidebutton:SetPos(scrw - smallbuttonheight * 2 - airgap_x, smallgap)
    hidebutton:SetSize(smallbuttonheight, bigbuttonheight)
    hidebutton.Paint = function(self2, w, h)
        local col = col_fg

        if self2:IsHovered() then
            col = Color(col_shadow.r, col_shadow.g, col_shadow.b, col_shadow.a * ArcCW.Inv_Fade)
        end
        --draw.RoundedBox(ss * 1, 0, 0, w, h, Color(127, 127, 127, 127))
            -- Comment me! But it'll show when the HUD is alive.

        surface.SetTextColor(col_shadow)
        surface.SetTextPos(ss * 8, ss * -4)
        surface.SetFont("ArcCWC2_24_Glow")
        surface.DrawText("_")

        surface.SetTextColor(col)
        surface.SetTextPos(ss * 8, ss * -4)
        surface.SetFont("ArcCWC2_24")
        surface.DrawText("_")
    end
    hidebutton.DoClick = function(self2, clr, btn)
        if IsValid(self) and self.ToggleCustomizeHUD then
            ArcCW.Inv_Hidden = !ArcCW.Inv_Hidden
            gui.EnableScreenClicker(false)
        end
    end

    -- Menu for attachment slots/presets
    ArcCW.InvHUD_Menu1 = vgui.Create("DScrollPanel", ArcCW.InvHUD)
    ArcCW.InvHUD_Menu1:SetPos(airgap_x, airgap_y + top_zone + smallgap)
    ArcCW.InvHUD_Menu1:SetSize(menu1_w, menu1_h)

    local scroll_1 = ArcCW.InvHUD_Menu1:GetVBar()
    scroll_1.Paint = function() end

    scroll_1.btnUp.Paint = function(span, w, h)
    end
    scroll_1.btnDown.Paint = function(span, w, h)
    end
    scroll_1.btnGrip.Paint = PaintScrollBar

    local topframe = vgui.Create("DPanel", ArcCW.InvHUD)
    topframe:SetSize(menu1_w, ss * 16)
    topframe:SetPos(airgap_x, airgap_y + ss * 8)
    topframe.Paint = function() end

    local customizebutton = vgui.Create("DButton", topframe)
    customizebutton:SetSize(ss * 90, ss * 16)
    customizebutton:SetPos(0, 0)
    customizebutton:SetText("")
    customizebutton.Text = translate("ui.customize")
    customizebutton.Val = 1
    customizebutton.DoClick = function(self2, clr, btn)
        ArcCW.Inv_SelectedMenu = 1
        ArcCW.InvHUD_FormAttachments()

        surface.PlaySound("weapons/arccw/hover.wav")
    end
    customizebutton.Paint = function(self2, w, h)
        local col = col_button
        local col2 = col_fg

        if self2:IsHovered() or (ArcCW.Inv_SelectedMenu == self2.Val) then
            col = col_fg_tr
            col2 = col_shadow
        end

        draw.RoundedBox(cornerrad, 0, 0, w, h, col)

        surface.SetFont("ArcCWC2_8")
        local tw, th = surface.GetTextSize(self2.Text)

        surface.SetFont("ArcCWC2_8_Glow")
        surface.SetTextColor(col_shadow)
        surface.SetTextPos((w - tw) / 2, (h - th) / 2)
        surface.DrawText(self2.Text)

        surface.SetFont("ArcCWC2_8")
        surface.SetTextColor(col2)
        surface.SetTextPos((w - tw) / 2, (h - th) / 2)
        surface.DrawText(self2.Text)
    end

    local presetsbutton = vgui.Create("DButton", topframe)
    presetsbutton:SetSize(ss * 80, ss * 16)
    presetsbutton:SetPos(ss * 94, 0)
    presetsbutton:SetText("")
    presetsbutton.Text = translate("ui.presets")
    presetsbutton.Val = 2
    presetsbutton.DoClick = function(self2, clr, btn)
        ArcCW.Inv_SelectedMenu = 2
        ArcCW.InvHUD_FormPresets()

        surface.PlaySound("weapons/arccw/hover.wav")
    end
    presetsbutton.Paint = customizebutton.Paint

    if self:ShowInventoryButton() then
        customizebutton:SetSize(ss * 60, ss * 16)
        presetsbutton:SetSize(ss * 55, ss * 16)
        presetsbutton:SetPos(ss * 65, 0)

        local inventorybutton = vgui.Create("DButton", topframe)
        inventorybutton:SetSize(ss * 50, ss * 16)
        inventorybutton:SetPos(ss * 125, 0)
        inventorybutton:SetText("")
        inventorybutton.Text = translate("ui.inventory")
        inventorybutton.Val = 3
        inventorybutton.DoClick = function(self2, clr, btn)
            ArcCW.Inv_SelectedMenu = 3
            ArcCW.InvHUD_FormInventory()

            surface.PlaySound("weapons/arccw/hover.wav")
        end
        inventorybutton.Paint = customizebutton.Paint
    end

    local menu2_x, menu2_y = ArcCW.InvHUD_Menu1:GetPos()
    menu2_x = menu2_x + ArcCW.InvHUD_Menu1:GetWide() + smallgap
    local menu2_w = bar2_w
    local menu2_h = scrh - top_zone - airgap_y - airgap_y - (ss * 16)

    -- Menu for attachments
    ArcCW.InvHUD_Menu2 = vgui.Create("DScrollPanel", ArcCW.InvHUD)
    ArcCW.InvHUD_Menu2:SetPos(menu2_x, menu2_y)
    ArcCW.InvHUD_Menu2:SetSize(menu2_w, menu2_h)

    -- ArcCW.InvHUD_Menu2.Paint = function(self2, w, h)
    --     draw.RoundedBox(2, 0, 0, w, h, col_fg)
    -- end

    local scroll_2 = ArcCW.InvHUD_Menu2:GetVBar()
    scroll_2.AlreadySet = false
    scroll_2.Paint = function(self2, w, h)
        if !self2.AlreadySet then
            self2:SetScroll(self.Inv_Scroll[self.Inv_SelectedSlot or 0] or 0)
            self2.AlreadySet = true
        end

        local scroll = self2:GetScroll()

        self.Inv_Scroll[self.Inv_SelectedSlot or 0] = scroll
    end

    scroll_2.btnUp.Paint = function(span, w, h)
    end
    scroll_2.btnDown.Paint = function(span, w, h)
    end
    scroll_2.btnGrip.Paint = PaintScrollBar

    function ArcCW.InvHUD_FormInventory()
        if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
        ArcCW.InvHUD_Menu1:Clear()
        ArcCW.InvHUD_Menu2:Clear()
        self.Inv_SelectedSlot = nil
        clearrightpanel()

        local attinv = LocalPlayer().ArcCW_AttInv or {}

        local atts = table.GetKeys(attinv)

        table.sort(atts)

        local str = nil
        if #atts == 0 then
            str = translate("ui.noatts")
        elseif cvar_lockmode:GetBool() then
            str = translate("ui.lockinv")
        end

        if str then
            local msg = vgui.Create("DPanel", ArcCW.InvHUD_Menu1)
            msg:SetText("")
            msg:SetSize(menu2_w - (2 * ss), rss * 12)
            msg:Dock(TOP)
            msg.Paint = function(self2, w, h)
                local old = DisableClipping(true)
                surface.SetTextColor(col_shadow)
                surface.SetTextPos(ss * 4, ss * 2)
                surface.SetFont("ArcCWC2_12_Glow")
                surface.DrawText(str)
                --DrawTextRot(self2, str, ss * 4, 0, ss * 4, ss * 2, w - (ss * 4))

                surface.SetTextColor(col_fg)
                surface.SetTextPos(ss * 4, ss * 2)
                surface.SetFont("ArcCWC2_12")
                surface.DrawText(str)
                --DrawTextRot(self2, str, ss * 4, 0, ss * 4, ss * 2, w - (ss * 4))
                DisableClipping(old)
            end
        end

        for i, k in ipairs(atts) do
            if (ArcCW:PlayerGetAtts(self:GetOwner(), k) or 0) <= 0 then continue end
            local atttbl = ArcCW.AttachmentTable[k or ""]

            if atttbl.Free then continue end

            local button = vgui.Create("DButton", ArcCW.InvHUD_Menu1)
            button.att = k
            button:SetText("")
            button:SetSize(menu2_w - (2 * ss), smallbuttonheight)
            button:DockMargin(0, smallgap, 0, 0)
            button:Dock(TOP)
            button.DoClick = function(self2, clr, btn)
                if cvar_lockmode:GetBool() then return end

                surface.PlaySound("weapons/arccw/uninstall.wav")

                net.Start("arccw_asktodrop")
                    net.WriteUInt(ArcCW.AttachmentTable[self2.att].ID, 24)
                net.SendToServer()

                ArcCW:PlayerTakeAtt(self:GetOwner(), self2.att)
                if (self:GetOwner().ArcCW_AttInv[self2.att] or 0) == 0 then
                    self2:Remove()
                end
                clearrightpanel()
            end
            button.DoRightClick = function(self2, clr, btn)
                ArcCW.InvHUD_FormAttachmentStats(self2.att, self2.attslot)
            end
            button.Paint = function(self2, w, h)
                local col = col_button
                local col2 = col_fg

                if self2:IsHovered() then
                    col = col_fg_tr
                    col2 = col_shadow
                end

                --[[]
                if self2:IsHovered() then
                    ArcCW.InvHUD_FormAttachmentStats(self2.att, self2.attslot)
                end
                ]]

                draw.RoundedBox(cornerrad, 0, 0, w, h, col)

                local icon_h = h
                local buffer = 0

                if !cvar_lockmode:GetBool() then
                    local amt = ArcCW:PlayerGetAtts(self:GetOwner(), self2.att) or 0
                    amt = math.min(amt, 99)
                    local amttxt = tostring(amt)
                    surface.SetFont("ArcCWC2_8")
                    local amt_w = surface.GetTextSize(amttxt)

                    -- surface.SetTextColor(col_shadow)
                    -- surface.SetFont("ArcCWC2_8_Glow")
                    -- surface.SetTextPos(w - amt_w - (ss * 1), h - (rss * 8) - (ss * 1))
                    -- surface.DrawText(amttxt)

                    surface.SetTextColor(col2)
                    surface.SetFont("ArcCWC2_8")
                    surface.SetTextPos(w - amt_w - (ss * 4), h - (rss * 8) - (ss * 1))
                    surface.DrawText(amttxt)

                    buffer = amt_w + (ss * 6)
                end

                local txt = translate("name." .. self2.att .. ".short") or atttbl.AbbrevName
                if !txt then
                    txt = translate("name." .. self2.att) or atttbl.PrintName
                end

                surface.SetTextColor(atttbl.Ignore and col_mayomustard or col2)
                surface.SetTextPos(icon_h + ss * 4, ss * 2)
                surface.SetFont("ArcCWC2_12")

                DrawTextRot(self2, txt, icon_h + (ss * 4), 0, icon_h + ss * 4, ss * 2, w - icon_h - (ss * 4) - buffer)

                local icon = atttbl.Icon
                if !icon or icon:IsError() then icon = bird end

                surface.SetDrawColor(atttbl.Ignore and mayoicons and col_mayomustard or col2)
                surface.SetMaterial(icon)
                surface.DrawTexturedRect(ss * 2, 0, icon_h, icon_h)
            end
        end
    end

    function ArcCW.InvHUD_FormPresets()
        if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
        ArcCW.InvHUD_Menu1:Clear()
        ArcCW.InvHUD_Menu2:Clear()
        self.Inv_SelectedSlot = nil
        self.Preset_DeleteMode = false
        clearrightpanel()

        local framer = vgui.Create("DPanel", ArcCW.InvHUD_Menu1)
        framer:SetSize(menu1_w, smallbuttonheight * 1.2)
        framer:DockMargin(0, 0, 0, smallgap)
        framer:Dock(TOP)
        framer.Paint = function() end

        local button = vgui.Create("DButton", framer)
        button:SetText("")
        button:Dock(LEFT)
        button:SetWide(menu1_w * 0.5)
        button:DockMargin(0, 0, smallgap, 0)
        button.DoClick = function(self2, clr, btn)
            self:CreatePresetSave()
            surface.PlaySound("weapons/arccw/open.wav")
        end
        button.Paint = function(self2, w, h)
            local col = col_button
            local col2 = col_fg

            if self2:IsHovered() then
                col = col_fg_tr
                col2 = col_shadow
            end

            draw.RoundedBox(cornerrad, 0, 0, w, h, col)

            local preset_txt = translate("ui.createpreset") --"Create New Preset"

            surface.SetFont("ArcCWC2_14")
            surface.SetTextPos(ss * 4, ss * 0)
            surface.SetTextColor(col2)
            DrawTextRot(self2, preset_txt, 0, 0, ss * 4, ss * 0, w - ss * 4)
        end

        local remov = vgui.Create("DButton", framer)
        remov:SetText("")
        remov:Dock(FILL)
        remov.DoClick = function(self2, clr, btn)
            self.Preset_DeleteMode = !self.Preset_DeleteMode
            surface.PlaySound(self.Preset_DeleteMode and "weapons/arccw/open.wav" or "weapons/arccw/close.wav")
        end
        remov.Paint = function(self2, w, h)
            local col = col_button
            local col2 = col_fg

            if self.Preset_DeleteMode then
                if self2:IsHovered() then
                    col = Color(200, 0, 0, Lerp(ArcCW.Inv_Fade, 0, 125))
                    col2 = col_shadow
                else
                    col = Color(100, 0, 0, Lerp(ArcCW.Inv_Fade, 0, 175))
                end
            elseif self2:IsHovered() then
                col = col_fg_tr
                col2 = col_shadow
            end

            draw.RoundedBox(cornerrad, 0, 0, w, h, col)

            local preset_txt = translate("ui.deletepreset")

            surface.SetFont("ArcCWC2_14")
            surface.SetTextPos(ss * 4, ss * 0)
            surface.SetTextColor(col2)
            DrawTextRot(self2, preset_txt, 0, 0, ss * 4, ss * 0, w - ss * 4)
        end

        local presetpanel = vgui.Create("DScrollPanel", ArcCW.InvHUD_Menu1)
        presetpanel:SetSize(menu1_w, menu1_h - smallbuttonheight * 1.2 - smallgap)
        presetpanel:SetPos(0, smallbuttonheight * 1.2 + smallgap)

        local scroll_preset = presetpanel:GetVBar()
        scroll_preset.Paint = function() end
        scroll_preset.btnUp.Paint = function(span, w, h)
        end
        scroll_preset.btnDown.Paint = function(span, w, h)
        end
        scroll_preset.btnGrip.Paint = PaintScrollBar

        local preset = {}

        preset = self:GetPresets()

        for i, k in pairs(preset) do
            if string.StripExtension(k) == "autosave" then continue end
            local load_btn = vgui.Create("DButton", presetpanel)
            load_btn:SetText("")
            load_btn.PresetName = string.StripExtension(k)
            load_btn.PresetFile = k
            load_btn:SetSize(menu1_w, smallbuttonheight)
            load_btn:DockMargin(0, smallgap, 0, 0)
            load_btn:Dock(TOP)
            load_btn.DoClick = function(self2, clr, btn)
                if !self.Preset_DeleteMode then
                    self.LastPresetName = self2.PresetName
                    self:LoadPreset(self2.PresetName)
                else
                    file.Delete(ArcCW.PresetPath .. self:GetPresetBase() .. "/" .. self2.PresetFile)
                    self2:Remove()
                    surface.PlaySound("weapons/arccw/uninstall.wav")
                end
            end
            --[[]
            load_btn.DoRightClick = function(self2)
                local filename = ArcCW.PresetPath .. self:GetPresetBase() .. "/" .. self2.PresetName .. ".txt"
                file.Delete(filename)
                self2:Remove()
            end
            ]]
            load_btn.Paint = function(self2, w, h)
                local col = col_button
                local col2 = col_fg

                if self.Preset_DeleteMode then
                    if self2:IsHovered() then
                        col = Color(200, 0, 0, Lerp(ArcCW.Inv_Fade, 0, 125))
                        col2 = col_shadow
                    --else
                    --    col = Color(100, 0, 0, Lerp(ArcCW.Inv_Fade, 0, 175))
                    end
                elseif self2:IsHovered() then
                    col = col_fg_tr
                    col2 = col_shadow
                end

                draw.RoundedBox(cornerrad, 0, 0, w, h, col)

                local preset_txt = self2.PresetName:upper()

                surface.SetFont("ArcCWC2_14")
                surface.SetTextPos(ss * 4, ss * 0)
                surface.SetTextColor(col2)
                DrawTextRot(self2, preset_txt, 0, 0, ss * 4, ss * 0, w - ss * 4)
            end
        end
    end

    function ArcCW.InvHUD_FormAttachmentSelect()
        if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
        ArcCW.InvHUD_Menu2:Clear()

        local slot = self.Attachments[self.Inv_SelectedSlot or 0]

        if !slot then return end

        local atts = {}
        local slots = {self.Inv_SelectedSlot}
        local attCheck = {}

        table.Add(slots, slot.MergeSlots or {})

        for _, y in pairs(slots) do
            for _, bruh in pairs(ArcCW:GetAttsForSlot((self.Attachments[y] or {}).Slot, self)) do
                if attCheck[bruh] then continue end
                table.insert(atts, {
                    att = bruh,
                    slot = y
                })
                attCheck[bruh] = true
            end
        end

        atts[0] = {
            att = "",
            slot = self.Inv_SelectedSlot
        }

        table.sort(atts, function(a, b)
            a = a.att or ""
            b = b.att or ""
            local atttbl_a = ArcCW.AttachmentTable[a]
            local atttbl_b = ArcCW.AttachmentTable[b]

            local order_a = 0
            local order_b = 0

            order_a = atttbl_a.SortOrder or order_a
            order_b = atttbl_b.SortOrder or order_b

            if order_a == order_b then
                return (translate("name." .. a) or atttbl_a.PrintName or "") > (translate("name." .. b) or atttbl_b.PrintName or "")
            end

            return order_a > order_b
        end)

        local has = false
        for _, att in pairs(atts) do
            if !att then continue end
            if !istable(att) then continue end

            local show, _, _ = self:ValidateAttachment(att.att, nil, att.slot)
            -- if !ArcCW.AttachmentTable[att] then continue end

            if !show then continue end
            has = (att.att != "")

            local button = vgui.Create("DButton", ArcCW.InvHUD_Menu2)
            button.att = att.att
            button.attslot = att.slot
            button:SetText("")
            button:SetSize(menu2_w - (2 * ss), smallbuttonheight)
            button:DockMargin(0, smallgap, 0, 0)
            button:Dock(TOP)
            button.DoClick = function(self2, clr, btn)
                -- self.Inv_SelectedSlot = self2.attindex
                -- ArcCW.InvHUD_FormAttachmentSelect()
                -- self:DetachAllMergeSlots(self2.attslot, true)
                --if ArcCW.ConVars["enable_customization"]:GetInt() < 0 then return end
                if ArcCW:PlayerCanAttach(LocalPlayer(), self, self2.att, self2.attslot, false) then
                    if self2.att == "" then
                        self2:DoRightClick()
                    elseif self:Attach(self2.attslot, self2.att) then
                        ArcCW.Inv_ShownAtt = nil -- Force a regen on the panel so we can see toggle/slider options
                        ArcCW.InvHUD_FormAttachmentStats(self2.att, self2.attslot, true)
                    elseif self:CountAttachments() >= self:GetPickX() then
                        ArcCW.Inv_LastPickXBlock = CurTime()
                    end
                else
                    if CLIENT then surface.PlaySound("items/medshotno1.wav") end
                end
            end
            button.DoRightClick = function(self2)
                if ArcCW:PlayerCanAttach(LocalPlayer(), self, self2.att, self2.attslot, true) then
                    self:DetachAllMergeSlots(self2.attslot)
                    ArcCW.InvHUD_FormAttachmentSelect()
                else
                    if CLIENT then surface.PlaySound("items/medshotno1.wav") end
                end
            end
            button.Paint = function(self2, w, h)
                if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
                local col = col_button
                local col2 = col_fg

                local atttbl = ArcCW.AttachmentTable[self2.att or ""] or {}

                local _, _, blocked, showqty = self:ValidateAttachment(att.att, nil, att.slot)

                if blocked and atttbl.HideIfBlocked then self2:Remove() return end

                local installed = self:GetSlotInstalled(self2.attslot)

                if self2:IsHovered() or self2.att == installed or (self2.att == "" and !installed) then
                    col = col_fg_tr
                    col2 = col_shadow

                --     self2:SetSize(menu2_w - (2 * ss), smallbuttonheight * 2)
                -- else
                --     self2:SetSize(menu2_w - (2 * ss), smallbuttonheight)
                end

                if self2:IsHovered() then
                    ArcCW.InvHUD_FormAttachmentStats(self2.att, self2.attslot, installed == self2.att)
                end

                local owned = ArcCW:PlayerGetAtts(self:GetOwner(), att.att) > 0

                if blocked then
                    col = col_block
                    col2 = col_block_txt
                elseif !owned and installed != self2.att then
                    col = col_unowned
                    col2 = col_unowned_txt
                end

                if !owned and installed != self2.att then
                    showqty = false
                end

                draw.RoundedBox(cornerrad, 0, 0, w, h, col)

                local icon_h = h

                if !self2.att or self2.att == "" then
                    local attslot = self.Attachments[self2.attslot]
                    local att_txt = self:GetBuff_Hook("Hook_GetDefaultAttName", self2.attslot, true) or attslot.DefaultAttName
                    att_txt = att_txt and try_translate(att_txt) or translate("attslot.noatt")
                    atttbl = {
                        PrintName = att_txt,
                        Icon = self:GetBuff_Hook("Hook_GetDefaultAttIcon", self2.attslot, true) or attslot.DefaultAttIcon or defaultatticon
                    }
                end

                local buffer = 0

                if showqty then
                    local amt = ArcCW:PlayerGetAtts(self:GetOwner(), self2.att) or 0

                    amt = math.min(amt, 99)

                    local amttxt = tostring(amt)

                    surface.SetFont("ArcCWC2_8")
                    local amt_w = surface.GetTextSize(amttxt)

                    -- surface.SetTextColor(col_shadow)
                    -- surface.SetFont("ArcCWC2_8_Glow")
                    -- surface.SetTextPos(w - amt_w - (ss * 1), h - (rss * 8) - (ss * 1))
                    -- surface.DrawText(amttxt)

                    surface.SetTextColor(col2)
                    surface.SetFont("ArcCWC2_8")
                    surface.SetTextPos(w - amt_w - (ss * 4), h - (rss * 8) - (ss * 1))
                    surface.DrawText(amttxt)

                    buffer = amt_w + (ss * 6)
                end

                local txt = translate("name." .. self2.att .. ".short") or atttbl.AbbrevName
                if !txt then
                    txt = translate("name." .. self2.att) or atttbl.PrintName
                end

                surface.SetTextColor(atttbl.Ignore and col_mayomustard or col2)
                surface.SetTextPos(icon_h + ss * 4, ss * 2)
                surface.SetFont("ArcCWC2_12")

                DrawTextRot(self2, txt, icon_h + (ss * 4), 0, icon_h + ss * 4, ss * 2, w - icon_h - (ss * 4) - buffer)

                local icon = atttbl.Icon
                if !icon or icon:IsError() then icon = bird end

                surface.SetDrawColor(atttbl.Ignore and mayoicons and col_mayomustard or col2)
                surface.SetMaterial(icon)
                surface.DrawTexturedRect(ss * 2, 0, icon_h, icon_h)
            end
        end

        if table.Count(atts) > 1 and !has then
            local msg = vgui.Create("DPanel", ArcCW.InvHUD_Menu2)
            msg:SetText("")
            msg:SetSize(menu2_w - (2 * ss), smallbuttonheight)
            msg:Dock(TOP)
            msg.Paint = function(self2, w, h)
                local txt = translate("ui.noatts_slot")

                surface.SetTextColor(col_shadow)
                surface.SetTextPos(ss * 4, ss * 2)
                surface.SetFont("ArcCWC2_10_Glow")
                DrawTextRot(self2, txt, ss * 4, 0, ss * 4, ss * 2, w - (ss * 4))

                surface.SetTextColor(col_fg)
                surface.SetTextPos(ss * 4, ss * 2)
                surface.SetFont("ArcCWC2_10")
                DrawTextRot(self2, txt, ss * 4, 0, ss * 4, ss * 2, w - (ss * 4))
            end
        end
    end

    -- add attachments

    function ArcCW.InvHUD_FormAttachments()
        if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
        ArcCW.InvHUD_Menu1:Clear()
        for i, slot in pairs(self.Attachments) do
            if !istable(slot) then continue end
            if !slot.PrintName then continue end
            if i == "BaseClass" then continue end
            if slot.Hidden or slot.Blacklisted then continue end
            if slot.Integral then continue end

            local button = vgui.Create("DButton", ArcCW.InvHUD_Menu1)
            button.attindex = i
            button:SetText("")
            button:SetSize(menu1_w, bigbuttonheight)
            button:DockMargin(0, 0, 0, smallgap)
            button:Dock(TOP)
            button.DoClick = function(self2, clr, btn)
                if self.Inv_SelectedSlot == self2.attindex then
                    self.Inv_SelectedSlot = nil
                    ArcCW.InvHUD_Menu2:Clear()
                    clearrightpanel()
                    if cvar_cust_sounds:GetBool() then surface.PlaySound("weapons/arccw/close.wav") end
                else
                    local aslot = self.Attachments[i]

                    if self:CheckFlags(aslot.ExcludeFlags, aslot.RequireFlags) then
                        self.Inv_SelectedSlot = self2.attindex
                        ArcCW.InvHUD_FormAttachmentSelect()
                        ArcCW.InvHUD_FormAttachmentStats(self2.attindex, self2.attindex, true)
                        if cvar_cust_sounds:GetBool() then surface.PlaySound("weapons/arccw/open.wav") end
                    end
                end
            end
            button.DoRightClick = function(self2)
                if ArcCW:PlayerCanAttach(LocalPlayer(), self, nil, self2.attindex, true) then
                    self:DetachAllMergeSlots(self2.attindex)
                    ArcCW.InvHUD_FormAttachmentSelect()
                else
                    if CLIENT then surface.PlaySound("items/medshotno1.wav") end
                end
            end
            button.Paint = function(self2, w, h)
                if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
                local col = col_button
                local col2 = col_fg

                if self2:IsHovered() or self.Inv_SelectedSlot == self2.attindex then
                    col = col_fg_tr
                    col2 = col_shadow
                end

                local aslot = self.Attachments[i]

                if !self:CheckFlags(aslot.ExcludeFlags, aslot.RequireFlags) then
                    col = col_block
                    col2 = col_block_txt
                end

                draw.RoundedBox(cornerrad, 0, 0, w, h, col)

                local installed = self:GetSlotInstalled(i)

                local att_icon = self:GetBuff_Hook("Hook_GetDefaultAttIcon", i, true) or slot.DefaultAttIcon or defaultatticon
                local att_txt = self:GetBuff_Hook("Hook_GetDefaultAttName", i, true) or slot.DefaultAttName
                att_txt = att_txt and try_translate(att_txt) or translate("attslot.noatt")
                local atttbl = ArcCW.AttachmentTable[installed or ""]

                if atttbl then
                    att_txt = translate("name." .. installed .. ".short") or atttbl.AbbrevName
                    if !att_txt then
                        att_txt = translate("name." .. installed) or atttbl.PrintName
                    end
                    att_icon = atttbl and atttbl.Icon
                    if !att_icon or att_icon:IsError() then att_icon = bird end
                end

                local slot_txt = try_translate(slot.PrintName)

                surface.SetDrawColor((atttbl and atttbl.Ignore and mayoicons and col_mayomustard) or col2)
                local icon_h = h
                surface.SetMaterial(att_icon)
                surface.DrawTexturedRect(w - icon_h - ss * 2, 0, icon_h, icon_h)

                surface.SetTextColor((atttbl and atttbl.Ignore and col_mayomustard) or col2)
                surface.SetFont("ArcCWC2_10")
                surface.SetTextPos(ss * 6, ss * 4)
                DrawTextRot(self2, slot_txt, 0, 0, ss * 6, ss * 4, w - icon_h - ss * 4)
                -- surface.DrawText(slot.PrintName)

                surface.SetFont("ArcCWC2_14")
                surface.SetTextPos(ss * 6, ss * 14)
                DrawTextRot(self2, att_txt, 0, 0, ss * 6, ss * 14, w - icon_h - ss * 4)
            end
        end

        local pickxpanel = vgui.Create("DPanel", ArcCW.InvHUD)
        pickxpanel:SetSize(menu1_w - ArcCW.InvHUD_Menu1:GetVBar():GetWide(), bottom_zone - smallgap * 4)
        pickxpanel:SetPos(airgap_x, scrh - bottom_zone - smallgap * 4)
        pickxpanel.Paint = function(self2, w, h)
            if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
            local pickx_amount = self:GetPickX()
            local pickedatts = self:CountAttachments()

            local col_fg_pick = col_fg
            local d = 0.5
            local diff = CurTime() - (ArcCW.Inv_LastPickXBlock or 0 + d)
            if diff > 0 then
                col_fg_pick = Color(255, 255 * diff / d, 255 * diff / d, 255*ArcCW.Inv_Fade)
            end

            if pickx_amount == 0 then return end
            if pickx_amount > 8 then
                surface.SetFont("ArcCWC2_16")
                local txt = string.format(translate("ui.pickx"), pickedatts, pickx_amount)
                local s = surface.GetTextSize(txt)
                surface.SetTextColor(col_fg_pick)
                surface.SetTextPos(w / 2 - s / 2, ss * 4)
                surface.DrawText(txt)
                return
            end

            local x = 0
            local y = ss * 4

            local s = ss * 20

            x = (w - (s * pickx_amount)) / 2

            local icons = {}
            for k, v in pairs(self.Attachments) do
                if v.Installed and !v.FreeSlot and !ArcCW.AttachmentTable[v.Installed].IgnorePickX then
                    local icon = (ArcCW.AttachmentTable[v.Installed] or {}).Icon or defaultatticon
                    if !icon or icon:IsError() then icon = bird end
                    table.insert(icons, icon)
                end
            end

            for i = 1, pickx_amount do
                surface.SetDrawColor(col_fg_pick)
                if i > pickedatts then
                    surface.SetMaterial(pickx_empty)
                else
                    surface.SetMaterial(pickx_full)
                end
                surface.DrawTexturedRect(x, y, s, s)
                if i <= pickedatts and icons[i] then
                    surface.SetDrawColor(col_shadow)
                    surface.SetMaterial(icons[i])
                    surface.DrawTexturedRect(x + ss * 3, y + ss * 3, ss * 14, ss * 14)
                end

                x = x + s
            end
        end
    end

    local menu3_h = scrh - airgap_y - bottom_zone
    local menu3_w = bar3_w

    -- weapon details
    ArcCW.InvHUD_Menu3 = vgui.Create("DScrollPanel", ArcCW.InvHUD)
    ArcCW.InvHUD_Menu3:SetPos(scrw - menu3_w, airgap_y + smallgap)
    ArcCW.InvHUD_Menu3:SetSize(menu3_w, menu3_h)

    function ArcCW.InvHUD_FormAttachmentStats(att, slot, equipped)
        if ArcCW.Inv_ShownAtt == att then
            return
        end
        if isnumber(att) then
            local installed = self:GetSlotInstalled(att)

            att = installed
        end
        if !att then
            clearrightpanel()
            return
        end
        local atttbl = ArcCW.AttachmentTable[att]

        if !atttbl then return end

        ArcCW.InvHUD_Menu3:Clear()

        ArcCW.Inv_ShownAtt = att

        local s = ss * 250

        local bgim = vgui.Create("DLabel", ArcCW.InvHUD_Menu3)
        bgim:SetText("")
        bgim:SetPos(menu3_w - s - (ss * 25), 0)
        bgim:SetSize(s, s)
        bgim.Paint = function(self2, w, h)
            local icon = atttbl.Icon
            if !icon or icon:IsError() then icon = bird end

            surface.SetDrawColor(255, 255, 255, 25 * ArcCW.Inv_Fade)
            surface.SetMaterial(icon)
            surface.DrawTexturedRect(0, 0, w, h)
        end

        local attname_panel = vgui.Create("DPanel", ArcCW.InvHUD_Menu3)
        attname_panel:SetSize(menu3_w, rss * 24)
        attname_panel:SetPos(0, rss * 16)
        attname_panel.Paint = function(self2, w, h)
            local name = translate("name." .. atttbl.ShortName) or atttbl.PrintName

            surface.SetFont("ArcCWC2_24")
            local tw = surface.GetTextSize(name)

            surface.SetTextColor(col_shadow)
            surface.SetFont("ArcCWC2_24_Glow")
            surface.SetTextPos(w - tw - airgap_x, 0)
            DrawTextRot(self2, name, 0, 0, 0, 0, w - airgap_x)

            surface.SetTextColor(col_fg)
            surface.SetFont("ArcCWC2_24")
            surface.SetTextPos(w - tw - airgap_x, 0)
            DrawTextRot(self2, name, 0, 0, 0, 0, w - airgap_x, true)
        end

        local scroll = vgui.Create("DScrollPanel", ArcCW.InvHUD_Menu3)
        --scroll:SetSize(menu3_w - airgap_x, ss * 128)
        --scroll:SetPos(0, rss * 32 + ss * 16)

        local scroll_bar = scroll:GetVBar()
        scroll_bar.Paint = function() end

        scroll_bar.btnUp.Paint = function(span, w, h)
        end
        scroll_bar.btnDown.Paint = function(span, w, h)
        end
        scroll_bar.btnGrip.Paint = PaintScrollBar

        local bottombuffer = 0

        local m_w = menu3_w * 0.75
        local leftbuffer = 0

        if equipped and self.Attachments[slot].SlideAmount and !atttbl.MountPositionOverride then
            local slider = vgui.Create("DButton", ArcCW.InvHUD_Menu3)

            slider:SetSize(m_w * 2 / 3, rss * 10)
            slider:SetPos(0, rss * 16 + rss * 24 + ss * 128 - (rss * 10))
            slider:SetText("")
            slider.Dragging = false
            slider.NextDrag = 0
            slider.OnRemove = function(self2)
                self:SendDetail_SlidePos(slot)
                self:SavePreset("autosave")
            end
            slider.Paint = function(self2, w, h)
                local col = col_button
                local col2 = col_fg

                if self2:IsHovered() or self2.Dragging then
                    col = col_fg_tr
                    col2 = col_shadow
                end

                draw.RoundedBox(cornerrad, 0, 0, w, h, col)

                local linebuffer = ss * 8
                local line_w = w - (linebuffer * 2)

                if self2.Dragging or (self2:IsHovered() and input.IsMouseDown(MOUSE_LEFT)) then
                    local x, _ = self2:LocalCursorPos()

                    local mouse_line_x = x - linebuffer

                    local delta = mouse_line_x / line_w

                    delta = math.Clamp(delta, 0, 1)

                    if self.Attachments[slot].SlidePos != delta and self2.NextDrag <= CurTime() then
                        -- local amt = math.abs(self.Attachments[slot].SlidePos - delta)
                        EmitSound("weapons/arccw/dragatt.wav", EyePos(), -2, CHAN_ITEM, 1,75, 0, math.Clamp(90+(delta * 20), 90, 110))
                        self2.NextDrag = CurTime() + 0.05
                    end

                    self.Attachments[slot].SlidePos = delta

                    self2.Dragging = true

                    if !input.IsMouseDown(MOUSE_LEFT) then
                        self2.Dragging = false

                        self:SetupActiveSights()
                        self:SendDetail_SlidePos(slot)
                        self:SavePreset("autosave")
                    end
                end

                local slide = (self.Attachments[slot] or {}).SlidePos or 0.5

                surface.SetDrawColor(col2)
                surface.DrawLine(linebuffer, h / 2, w - linebuffer, h / 2)

                local rect_x = slide * line_w + linebuffer
                local rect_w = ss * 6
                surface.DrawRect(rect_x - (rect_w / 2), (h - rect_w) / 2, rect_w, rect_w)
            end

            leftbuffer = m_w * 2 / 3
            bottombuffer = bottombuffer + rss * 10
        end

        if equipped and atttbl.ToggleStats then
            local toggle = vgui.Create("DButton", ArcCW.InvHUD_Menu3)

            toggle:SetSize(m_w * 1 / 3 - rss * 2, rss * 10)
            toggle:SetPos(leftbuffer + (ss * 4), rss * 16 + rss * 24 + ss * 128 - (rss * 10))
            toggle:SetText("")
            toggle.OnMousePressed = function(self2, kc)
                if kc == MOUSE_LEFT then
                    self:ToggleSlot(slot)
                elseif kc == MOUSE_RIGHT then
                    self:ToggleSlot(slot, nil, nil, true)
                end
            end
            toggle.Paint = function(self2, w, h)
                local col = col_button
                local col2 = col_fg

                if self2:IsHovered() or ArcCW.Inv_SelectedInfo == self2.Val then
                    col = col_fg_tr
                    col2 = col_shadow
                end

                draw.RoundedBox(cornerrad, 0, 0, w, h, col)

                local txt = (translate("ui.toggle"))
                local catttbl = ArcCW.AttachmentTable[att]
                if catttbl and catttbl.ToggleStats[self.Attachments[slot].ToggleNum]
                        and catttbl.ToggleStats[self.Attachments[slot].ToggleNum].PrintName then
                    txt = try_translate(catttbl.ToggleStats[self.Attachments[slot].ToggleNum].PrintName)
                end

                surface.SetFont("ArcCWC2_8")
                local tw, th = surface.GetTextSize(txt)

                surface.SetFont("ArcCWC2_8_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos((w - tw) / 2, (h - th) / 2)
                surface.DrawText(txt)

                surface.SetFont("ArcCWC2_8")
                surface.SetTextColor(col2)
                surface.SetTextPos((w - tw) / 2, (h - th) / 2)
                surface.DrawText(txt)
            end

            local togglelock = vgui.Create("DButton", ArcCW.InvHUD_Menu3)
            togglelock:SetSize(rss * 10, rss * 10)
            togglelock:SetPos(leftbuffer + (ss * 4) + m_w * 1 / 3, rss * 16 + rss * 24 + ss * 128 - (rss * 10))
            togglelock:SetText("")
            togglelock.OnMousePressed = function(self2, kc)
                self.Attachments[slot].ToggleLock = !self.Attachments[slot].ToggleLock
                if self.Attachments[slot].ToggleLock then
                    self:EmitSound("weapons/arccw/dragatt.wav", 0, 150)
                else
                    self:EmitSound("weapons/arccw/dragatt.wav", 0, 80)
                end
            end
            togglelock.Paint = function(self2, w, h)
                local col = col_button
                local col2 = col_fg

                if self2:IsHovered() or ArcCW.Inv_SelectedInfo == self2.Val then
                    col = col_fg_tr
                    col2 = col_shadow
                end

                draw.RoundedBox(cornerrad, 0, 0, w, h, col)
                surface.SetDrawColor(col2.r, col2.g, col2.b)
                surface.SetMaterial(self.Attachments[slot].ToggleLock and iconlock or iconunlock)
                surface.DrawTexturedRect(4, 4, w - 8, h - 8)
            end

            bottombuffer = bottombuffer + rss * 10
        end

        scroll:SetPos(0, rss * 32 + ss * 16 + bottombuffer)
        scroll:SetSize(menu3_w - airgap_x, ss * 128 - bottombuffer)

        local multiline = {}
        local desc = translate("desc." .. atttbl.ShortName) or translate(atttbl.Description) or atttbl.Description

        multiline = multlinetext(desc, scroll:GetWide() - (ss * 2), "ArcCW_10")

        local desc_title = vgui.Create("DPanel", scroll)
        desc_title:SetSize(scroll:GetWide(), rss * 8)
        desc_title:SetPos(0, 0)
        desc_title.Paint = function(self2, w, h)
            surface.SetFont("ArcCWC2_8")
            local txt = translate("trivia.description")
            local tw_1 = surface.GetTextSize(txt)

            surface.SetFont("ArcCWC2_8_Glow")
            surface.SetTextColor(col_shadow)
            surface.SetTextPos(w - tw_1, 0)
            surface.DrawText(txt)

            surface.SetFont("ArcCWC2_8")
            surface.SetTextColor(col_fg)
            surface.SetTextPos(w - tw_1, 0)
            surface.DrawText(txt)
        end

        for i, text in pairs(multiline) do
            local desc_line = vgui.Create("DPanel", scroll)
            desc_line:SetSize(scroll:GetWide(), rss * 10)
            desc_line:SetPos(0, (rss * 10 * i) - (rss * 2))
            desc_line.Paint = function(self2, w, h)
                surface.SetFont("ArcCWC2_10")
                local tw = surface.GetTextSize(text)

                surface.SetFont("ArcCWC2_10_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos(w - tw, 0)
                surface.DrawText(text)

                surface.SetFont("ArcCWC2_10")
                surface.SetTextColor(col_fg)
                surface.SetTextPos(w - tw, 0)
                surface.DrawText(text)
            end
        end

        local scroll_pros = vgui.Create("DScrollPanel", ArcCW.InvHUD_Menu3)
        scroll_pros:SetSize(menu3_w, ss * 172)
        scroll_pros:SetPos(0, menu3_h - (ss * 172))
        scroll_pros.Paint = function() end

        local scroll_bar_pros = scroll_pros:GetVBar()
        scroll_bar_pros.Paint = function() end

        scroll_bar_pros.btnUp.Paint = function(span, w, h)
        end
        scroll_bar_pros.btnDown.Paint = function(span, w, h)
        end
        scroll_bar_pros.btnGrip.Paint = PaintScrollBar

        -- Don't have stats disappear due to toggle state
        local pros, cons, infos = ArcCW:GetProsCons(self, atttbl) -- self.Attachments[slot].ToggleNum

        pros = pros or {}
        cons = cons or {}
        infos = infos or {}

        local p_w = menu3_w / 2

        local pan_pros = vgui.Create("DPanel", scroll_pros)
        pan_pros:SetPos(0, 0)
        pan_pros.Paint = function() end

        local pan_cons = vgui.Create("DPanel", scroll_pros)
        pan_cons:SetPos(#pros > 0 and (menu3_w * 1 / 2) or 0, 0)
        pan_cons.Paint = function() end

        local pan_infos

        if #infos > 0 then
            pan_infos = vgui.Create("DPanel", scroll_pros)
            pan_infos:SetWide(menu3_w)
            pan_infos.Paint = function() end
        end
        p_w = (pan_pros and pan_cons) and (menu3_w / 2) or p_w

        if #pros > 0 then
            local pan_head = vgui.Create("DPanel", pan_pros)
            pan_head:SetTall(rss * 8)
            pan_head:Dock(TOP)
            pan_head.Paint = headpaintfunc
            pan_head.Text = translate("ui.positives")
            pan_head.Color = col_good
        end

        if #cons > 0 then
            local pan_head = vgui.Create("DPanel", pan_cons)
            pan_head:SetTall(rss * 8)
            pan_head:Dock(TOP)
            pan_head.Paint = headpaintfunc
            pan_head.Text = translate("ui.negatives")
            pan_head.Color = col_bad
        end

        for i, line in pairs(pros) do
            if !line or line == "" then continue end
            local pan_line = vgui.Create("DPanel", pan_pros)
            pan_line:SetSize(p_w, rss * 10)
            pan_line:SetPos(0, rss * 10 * i)
            pan_line.Paint = linepaintfunc
            pan_line.Text = line
            pan_line.Color = col_good
        end

        pan_pros:SizeToChildren(true, true)

        for i, line in pairs(cons) do
            if !line or line == "" then continue end
            local pan_line = vgui.Create("DPanel", pan_cons)
            pan_line:SetSize(p_w, rss * 10)
            pan_line:SetPos(0, rss * 10 * i)
            pan_line.Paint = linepaintfunc
            pan_line.Text = line
            pan_line.Color = col_bad
        end

        pan_cons:SizeToChildren(true, true)

        if #infos > 0 then
            local pan_head = vgui.Create("DPanel", pan_infos)
            pan_head:SetTall(rss * 8)
            pan_head:Dock(TOP)
            pan_head.Paint = headpaintfunc
            pan_head.Text = translate("ui.information")
            pan_head.Color = col_info

            for i, line in pairs(infos) do
                if !line or line == "" then continue end
                local pan_line = vgui.Create("DPanel", pan_infos)
                pan_line:SetSize(menu3_w, rss * 10)
                pan_line:SetPos(0, rss * 10 * i)
                pan_line.Paint = linepaintfunc
                pan_line.Text = line
                pan_line.Color = col_info
            end

            -- We can't do this on initialize because SizeToChildren isn't called yet
            local h = math.max(pan_pros and pan_pros:GetTall() or 0, pan_cons and pan_cons:GetTall() or 0)
            h = (h > 0) and (h + rss * 10) or 0 -- if only info, don't add padding
            pan_infos:SetPos(0, h)
            pan_infos:SizeToChildren(true, true)
        end
    end

    function ArcCW.InvHUD_FormStatsTriviaBar()
        if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
        local statsbutton = vgui.Create("DButton", ArcCW.InvHUD_Menu3)
        statsbutton:SetSize(ss * 48, ss * 16)
        statsbutton:SetPos(menu3_w - (ss * 48 * 2) - airgap_x - (ss * 4), rss * 48 + ss * 12)
        statsbutton:SetText("")
        statsbutton.Text = translate("ui.stats")
        statsbutton.Val = 1
        statsbutton.DoClick = function(self2, clr, btn)
            ArcCW.InvHUD_FormWeaponStats()
            ArcCW.Inv_SelectedInfo = 1
        end
        statsbutton.Paint = function(self2, w, h)
            local col = col_button
            local col2 = col_fg

            if self2:IsHovered() or ArcCW.Inv_SelectedInfo == self2.Val then
                col = col_fg_tr
                col2 = col_shadow
            end

            draw.RoundedBox(cornerrad, 0, 0, w, h, col)

            surface.SetFont("ArcCWC2_8")
            local tw, th = surface.GetTextSize(self2.Text)

            surface.SetFont("ArcCWC2_8_Glow")
            surface.SetTextColor(col_shadow)
            surface.SetTextPos((w - tw) / 2, (h - th) / 2)
            surface.DrawText(self2.Text)

            surface.SetFont("ArcCWC2_8")
            surface.SetTextColor(col2)
            surface.SetTextPos((w - tw) / 2, (h - th) / 2)
            surface.DrawText(self2.Text)
        end

        local triviabutton = vgui.Create("DButton", ArcCW.InvHUD_Menu3)
        triviabutton:SetSize(ss * 48, ss * 16)
        triviabutton:SetPos(menu3_w - ss * 48 - airgap_x, rss * 48 + ss * 12)
        triviabutton:SetText("")
        triviabutton.Text = translate("ui.trivia")
        triviabutton.Val = 2
        triviabutton.DoClick = function(self2, clr, btn)
            ArcCW.InvHUD_FormWeaponTrivia()
            ArcCW.Inv_SelectedInfo = 2
        end
        triviabutton.Paint = statsbutton.Paint

        local ballisticsbutton = vgui.Create("DButton", ArcCW.InvHUD_Menu3)
        ballisticsbutton:SetSize(ss * 48, ss * 16)
        ballisticsbutton:SetPos(menu3_w - (ss * 48 * 3) - airgap_x - (ss * 4 * 2), rss * 48 + ss * 12)
        ballisticsbutton:SetText("")
        ballisticsbutton.Text = translate("ui.ballistics")
        ballisticsbutton.Val = 3
        ballisticsbutton.DoClick = function(self2, clr, btn)
            ArcCW.InvHUD_FormWeaponBallistics()
            ArcCW.Inv_SelectedInfo = 3
        end
        ballisticsbutton.Paint = statsbutton.Paint
    end

    function ArcCW.InvHUD_FormWeaponName()
        if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
        ArcCW.InvHUD_FormStatsTriviaBar()
        local weapon_title = vgui.Create("DPanel", ArcCW.InvHUD_Menu3)
        weapon_title:SetSize(menu3_w, rss * 32)
        weapon_title:SetPos(0, 0)
        weapon_title.Paint = function(self2, w, h)
            if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
            local name = translate("name." .. self:GetClass() .. (cvar_truenames:GetBool() and ".true" or "")) or translate(self.PrintName) or self.PrintName

            surface.SetFont("ArcCWC2_32")
            local tw = surface.GetTextSize(name)

            surface.SetTextColor(col_shadow)
            surface.SetFont("ArcCWC2_32_Glow")
            surface.SetTextPos(w - tw - airgap_x, 0)
            DrawTextRot(self2, name, 0, 0, 0, 0, w - airgap_x)

            surface.SetTextColor(col_fg)
            surface.SetFont("ArcCWC2_32")
            surface.SetTextPos(w - tw - airgap_x, 0)
            DrawTextRot(self2, name, 0, 0, 0, 0, w - airgap_x, true)
        end

        local weapon_cat = vgui.Create("DPanel", ArcCW.InvHUD_Menu3)
        weapon_cat:SetSize(menu3_w, rss * 16)
        weapon_cat:SetPos(0, rss * 32)
        weapon_cat.Paint = function(self2, w, h)
            if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
            local class = try_translate(self:GetBuff_Override("Override_Trivia_Class") or self.Trivia_Class) or "missing"
            local cal = try_translate(self:GetBuff_Override("Override_Trivia_Calibre") or self.Trivia_Calibre)
            local name = class

            if !self.PrimaryMelee and !self.Throwing and cal then
                name = name .. ", " .. cal
            end

            surface.SetFont("ArcCWC2_16")
            local tw = surface.GetTextSize(name)

            surface.SetTextColor(col_shadow)
            surface.SetFont("ArcCWC2_16_Glow")
            surface.SetTextPos(w - tw - airgap_x, 0)
            DrawTextRot(self2, name, 0, 0, 0, 0, w - airgap_x)

            surface.SetTextColor(col_fg)
            surface.SetFont("ArcCWC2_16")
            surface.SetTextPos(w - tw - airgap_x, 0)
            DrawTextRot(self2, name, 0, 0, 0, 0, w - airgap_x, true)
        end
    end

    function ArcCW.InvHUD_FormWeaponTrivia()
        if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
        ArcCW.InvHUD_Menu3:Clear()
        ArcCW.InvHUD_FormWeaponName()

        local scroll = vgui.Create("DScrollPanel", ArcCW.InvHUD_Menu3)
        scroll:SetSize(menu3_w - airgap_x, ss * 110)
        scroll:SetPos(0, rss * 48 + ss * 32)

        local scroll_bar = scroll:GetVBar()
        scroll_bar.Paint = function() end

        scroll_bar.btnUp.Paint = function(span, w, h)
        end
        scroll_bar.btnDown.Paint = function(span, w, h)
        end
        scroll_bar.btnGrip.Paint = PaintScrollBar

        local multiline = {}
        local desc = translate(self:GetBuff_Override("Override_Trivia_Desc")) or translate("desc." .. self:GetClass()) or self.Trivia_Desc

        multiline = multlinetext(desc, scroll:GetWide() - (ss * 2), "ArcCW_10")

        local desc_title = vgui.Create("DPanel", scroll)
        desc_title:SetSize(scroll:GetWide(), rss * 8)
        desc_title:Dock(TOP)
        desc_title.Paint = function(self2, w, h)
            surface.SetFont("ArcCWC2_8")
            local txt = translate("trivia.description")
            local tw_1 = surface.GetTextSize(txt)

            surface.SetFont("ArcCWC2_8_Glow")
            surface.SetTextColor(col_shadow)
            surface.SetTextPos(w - tw_1, 0)
            surface.DrawText(txt)

            surface.SetFont("ArcCWC2_8")
            surface.SetTextColor(col_fg)
            surface.SetTextPos(w - tw_1, 0)
            surface.DrawText(txt)
        end

        for i, text in pairs(multiline) do
            local desc_line = vgui.Create("DPanel", scroll)
            desc_line:SetSize(scroll:GetWide(), rss * 10)
            desc_line:Dock(TOP)
            desc_line.Paint = function(self2, w, h)
                surface.SetFont("ArcCWC2_10")
                local tw = surface.GetTextSize(text)

                surface.SetFont("ArcCWC2_10_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos(w - tw, 0)
                surface.DrawText(text)

                surface.SetFont("ArcCWC2_10")
                surface.SetTextColor(col_fg)
                surface.SetTextPos(w - tw, 0)
                surface.DrawText(text)
            end
        end

        local info = vgui.Create("DPanel", ArcCW.InvHUD_Menu3)
        info:SetSize(menu3_w - airgap_x, menu3_h - ss * 110 - rss * 48 - ss * 32)
        info:SetPos(0, rss * 48 + ss * 32 + ss * 110)
        info.Paint = function(self2, w, h)
            local infos = self.Infos_Trivia or {}

            local year = try_translate(self:GetBuff_Override("Override_Trivia_Year") or self.Trivia_Year)

            if year then
                if isnumber(year) and year < 0 then
                    table.insert(infos, {
                        title = translate("trivia.year"),
                        value = tostring(-year),
                        unit = translate("unit.bce"),
                    })
                else
                    table.insert(infos, {
                        title = translate("trivia.year"),
                        value = tostring(year),
                    })
                end
            end

            local mech = try_translate(self:GetBuff_Override("Override_Trivia_Mechanism") or self.Trivia_Mechanism)

            if mech then
                table.insert(infos, {
                    title = translate("trivia.mechanism"),
                    value = translate(mech) or mech,
                })
            end

            local country = try_translate(self:GetBuff_Override("Override_Trivia_Country") or self.Trivia_Country)

            if country then
                table.insert(infos, {
                    title = translate("trivia.country"),
                    value = translate(country) or country,
                })
            end

            local manufacturer = try_translate(self:GetBuff_Override("Override_Trivia_Manufacturer") or self.Trivia_Manufacturer)

            if manufacturer then
                table.insert(infos, {
                    title = translate("trivia.manufacturer"),
                    value = translate(manufacturer) or manufacturer,
                })
            end

            local calibre = try_translate(self:GetBuff_Override("Override_Trivia_Calibre") or self.Trivia_Calibre)

            if calibre then
                table.insert(infos, {
                    title = translate("trivia.calibre"),
                    value = translate(calibre) or calibre,
                })
            end

            for i, triv in pairs(infos) do
                triv.unit = triv.unit or ""
                local i_2 = i - 1
                surface.SetFont("ArcCWC2_8")
                local tw_1 = surface.GetTextSize(triv.title)

                surface.SetFont("ArcCWC2_8_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos(w - tw_1, i_2 * (rss * 24))
                surface.DrawText(triv.title)

                surface.SetFont("ArcCWC2_8")
                surface.SetTextColor(col_fg)
                surface.SetTextPos(w - tw_1, i_2 * (rss * 24))
                surface.DrawText(triv.title)

                surface.SetFont("ArcCWC2_8")
                local tw_2 = surface.GetTextSize(triv.unit)

                surface.SetFont("ArcCWC2_8_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos(w - tw_2, (i_2 * (rss * 24)) + (rss * 12))
                surface.DrawText(triv.unit)

                surface.SetFont("ArcCWC2_8")
                surface.SetTextColor(col_fg)
                surface.SetTextPos(w - tw_2, (i_2 * (rss * 24)) + (rss * 12))
                surface.DrawText(triv.unit)

                surface.SetFont("ArcCWC2_16")
                local tw_3 = surface.GetTextSize(tostring(triv.value))

                surface.SetFont("ArcCWC2_16_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos(w - tw_2 - tw_3, (i_2 * (rss * 24)) + (rss * 6))
                -- surface.DrawText(triv.value)
                DrawTextRot(self2, triv.value, 0, i_2 * (rss * 24), math.max(w - tw_2 - tw_3, 0), (i_2 * (rss * 24)) + (rss * 6), w)

                -- (span, txt, x, y, tx, ty, maxw, only)

                surface.SetFont("ArcCWC2_16")
                surface.SetTextColor(col_fg)
                surface.SetTextPos(w - tw_2 - tw_3, (i_2 * (rss * 24)) + (rss * 6))
                -- surface.DrawText(triv.value)
                DrawTextRot(self2, triv.value, 0, i_2 * (rss * 24), math.max(w - tw_2 - tw_3, 0), (i_2 * (rss * 24)) + (rss * 6), w, true)
            end
        end
    end

    function ArcCW.InvHUD_FormWeaponStats()
        if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
        ArcCW.InvHUD_Menu3:Clear()
        ArcCW.InvHUD_FormWeaponName()

        self.Infos_Stats = nil
        self.Infos_Breakpoints = nil
        local stats_breakpoint = false

        local info = vgui.Create("DPanel", ArcCW.InvHUD_Menu3)
        info:SetSize(menu3_w - airgap_x, menu3_h - ss * 110 - rss * 48 - ss * 32)
        info:SetPos(0, rss * 48 + ss * 32 + ss * 110)
        info.Paint = function(self2, w, h)
            if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
            --local infos = self.Infos_Stats or {}

            if !self.Infos_Stats then

                self.Infos_Stats = {}

                -- rpm
                local rpm = math.Round(60 / self:GetFiringDelay())

                if self:GetIsManualAction() then

                    local fireanim = self:GetBuff_Hook("Hook_SelectFireAnimation") or self:SelectAnimation("fire")
                    local firedelay = self.Animations[fireanim].MinProgress or 0
                    rpm = math.Round(60 / ((firedelay + self:GetAnimKeyTime("cycle", true)) * self:GetBuff_Mult("Mult_CycleTime")))

                    table.insert(self.Infos_Stats, {
                        title = translate("trivia.firerate"),
                        value = "~" .. tostring(rpm),
                        unit = translate("unit.rpm"),
                    })
                elseif !self.PrimaryBash and !self.Throwing then
                    table.insert(self.Infos_Stats, {
                        title = translate("trivia.firerate"),
                        value = tostring(rpm),
                        unit = translate("unit.rpm"),
                    })
                    local mode = self:GetCurrentFiremode()
                    if mode.Mode < 0 then
                        table.insert(self.Infos_Stats, {
                            title = translate("trivia.firerate_burst"),
                            value = tostring( math.Round( 60 / (self:GetFiringDelay() + ((mode.PostBurstDelay or 0) / -mode.Mode)) ) ),
                            unit = translate("unit.rpm"),
                        })
                    end
                end

                -- precision
                local precision = math.Round(self:GetBuff("AccuracyMOA"), 1)

                if !self.PrimaryBash and !self.Throwing then
                    table.insert(self.Infos_Stats, {
                        title = translate("trivia.precision"),
                        value = precision,
                        unit = translate("unit.moa"),
                    })
                end

                -- ammo type
                local ammo = string.lower(self:GetBuff_Override("Override_Ammo", self.Primary.Ammo))
                if (ammo or "") != "" and ammo != "none" then
                    local ammotype = ArcCW.TranslateAmmo(ammo) --language.GetPhrase(self.Primary.Ammo .. "_ammo")
                    if ammotype then
                        table.insert(self.Infos_Stats, {
                            title = translate("trivia.ammo"),
                            value = ammotype,
                            --unit = " (" .. ammo .. ")",
                        })
                    end
                end

                -- penetration
                local shootent = self:GetBuff("ShootEntity", true)

                if !self.PrimaryBash and !shootent then
                    local pen = math.Round( self:GetBuff("Penetration") )
                    table.insert(self.Infos_Stats, {
                        title = translate("trivia.penetration"),
                        value = pen,
                        unit = translate("unit.mm"),
                    })
                end

                -- noise
                local noise = self:GetBuff("ShootVol")

                if !self.PrimaryBash and !self.Throwing then
                    table.insert(self.Infos_Stats, {
                        title = translate("trivia.noise"),
                        value = math.Round(noise),
                        unit = translate("unit.db"),
                    })
                end

                if self.Throwing then
                    local ft = self:GetBuff_Override("Override_FuseTime") or self.FuseTime
                    if ft and ft > 0 then
                        table.insert(self.Infos_Stats, {
                            title = translate("trivia.fusetime"),
                            value = tostring(math.Round(ft, 1)),
                            unit = "s"
                        })
                    end
                end

                if self.PrimaryBash then
                    local meleedelay = self.MeleeTime * self:GetBuff_Mult("Mult_MeleeTime")
                    table.insert(self.Infos_Stats, {
                        title = translate("trivia.attackspersecond"),
                        value = tostring(math.Round(1 / meleedelay, 1)),
                        unit = translate("unit.aps")
                    })

                    local meleerange = self:GetBuff("MeleeRange")
                    table.insert(self.Infos_Stats, {
                        title = translate("trivia.range"),
                        value = tostring(math.Round(meleerange * ArcCW.HUToM)),
                        unit = "m"
                    })

                    local dmg = self.MeleeDamage * self:GetBuff_Mult("Mult_MeleeDamage")
                    table.insert(self.Infos_Stats, {
                        title = translate("trivia.damage"),
                        value = dmg,
                    })

                    local dmgtype = self:GetBuff_Override("Override_MeleeDamageType") or self.MeleeDamageType

                    if ArcCW.MeleeDamageTypes[dmgtype or ""] then
                        table.insert(self.Infos_Stats, {
                            title = translate("trivia.meleedamagetype"),
                            value = translate(ArcCW.MeleeDamageTypes[dmgtype]),
                        })
                    end
                end

            end

            for i, triv in pairs(self.Infos_Stats) do
                triv.unit = triv.unit or ""
                local i_2 = i - 1
                surface.SetFont("ArcCWC2_8")
                local tw_1 = surface.GetTextSize(triv.title)

                surface.SetFont("ArcCWC2_8_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos(w - tw_1, i_2 * (rss * 24))
                surface.DrawText(triv.title)

                surface.SetFont("ArcCWC2_8")
                surface.SetTextColor(col_fg)
                surface.SetTextPos(w - tw_1, i_2 * (rss * 24))
                surface.DrawText(triv.title)


                surface.SetFont("ArcCWC2_16")
                local tw_3a = select(2, surface.GetTextSize(tostring(triv.value)))

                surface.SetFont("ArcCWC2_8")
                local tw_2 = surface.GetTextSize(triv.unit)
                local tw_2a = select(2, surface.GetTextSize(triv.unit))

                surface.SetFont("ArcCWC2_8_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos(w - tw_2, (i_2 * (rss * 24)) + (rss * 4.4) + tw_2a)
                surface.DrawText(triv.unit)

                surface.SetFont("ArcCWC2_8")
                surface.SetTextColor(col_fg)
                surface.SetTextPos(w - tw_2, (i_2 * (rss * 24)) + (rss * 4.4) + tw_2a)
                surface.DrawText(triv.unit)

                surface.SetFont("ArcCWC2_16")
                local tw_3 = surface.GetTextSize(tostring(triv.value))

                surface.SetFont("ArcCWC2_16_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos(math.max(w - tw_2 - tw_3, 0), (i_2 * (rss * 24)) + (rss * 6))
                surface.DrawText(triv.value)

                surface.SetFont("ArcCWC2_16")
                surface.SetTextColor(col_fg)
                surface.SetTextPos(math.max(w - tw_2 - tw_3, 0), (i_2 * (rss * 24)) + (rss * 6))
                surface.DrawText(triv.value)
            end
        end

        local stk_min, stk_max, stk_count = 1, shot_limit, shot_limit
        local stk_num = self:GetBuff("Num")
        local dmgt = tostring("DMG")

        local rangegraph = vgui.Create("DButton", ArcCW.InvHUD_Menu3)
        rangegraph:SetSize(ss * 200, ss * 110)
        rangegraph:SetPos(menu3_w - ss * 200 - airgap_x, rss * 48 + ss * 32)
        rangegraph:SetText("")
        rangegraph.DoClick = function(self2)
            stats_breakpoint = !stats_breakpoint
        end
        rangegraph.Paint = function(self2, w, h)
            if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end

            local col = col_button
            if self2:IsHovered() then
                col = col_button_hv
            end
            draw.RoundedBox(cornerrad, 0, 0, w, h, col)

            if self.PrimaryBash or
                self.ShootEntity or
                self:GetBuff_Override("Override_ShootEntity") or
                self.NoRangeGraph
            then

                local txt = translate("ui.nodata")

                surface.SetTextColor(col_fg)
                surface.SetFont("ArcCWC2_24")
                local tw, th = surface.GetTextSize(txt)
                surface.SetTextPos((w - tw) / 2, (h - th) / 2)
                surface.DrawText(txt)

                return
            elseif self:GetBuff("Num") <= 0 then

                local txt = translate("ui.nonum")

                surface.SetTextColor(col_fg)
                surface.SetFont("ArcCWC2_12")
                local tw, th = surface.GetTextSize(txt)
                surface.SetTextPos((w - tw) / 2, (h - th) / 2)
                surface.DrawText(txt)

                return
            end

            local dmgmax = self:GetDamage(0)
            local dmgmin = self:GetDamage(math.huge)

            local mran, sran = self:GetMinMaxRange()

            if stats_breakpoint then

                if !self.Infos_Breakpoints then
                    self.Infos_Breakpoints = {}

                    local our = self:GetBuff_Override("Override_BodyDamageMults", self.BodyDamageMults)
                    local gam = ArcCW.LimbCompensation[engine.ActiveGamemode()] or ArcCW.LimbCompensation[1]
                    if our and ArcCW.ConVars["bodydamagemult_cancel"]:GetBool() then
                        gam = {}
                    elseif !our then
                        our = {}
                    end

                    -- Head
                    table.insert(self.Infos_Breakpoints, {"ui.hitgroup.head", shotstokill((our[HITGROUP_HEAD] or 1) / (gam[HITGROUP_HEAD] or 1), dmgmin, dmgmax, mran, sran)})

                    -- Torso
                    -- separates into Chest and Stomach if they have different values
                    local m_chest = (our[HITGROUP_CHEST] or 1) / (gam[HITGROUP_CHEST] or 1)
                    local m_stomach = (our[HITGROUP_STOMACH] or 1) / (gam[HITGROUP_STOMACH] or 1)
                    if m_chest == m_stomach then
                        table.insert(self.Infos_Breakpoints, {"ui.hitgroup.torso", shotstokill(m_chest, dmgmin, dmgmax, mran, sran)})
                    else
                        table.insert(self.Infos_Breakpoints, {"ui.hitgroup.chest", shotstokill(m_chest, dmgmin, dmgmax, mran, sran)})
                        table.insert(self.Infos_Breakpoints, {"ui.hitgroup.stomach", shotstokill(m_stomach, dmgmin, dmgmax, mran, sran)})
                    end

                    -- Arms and Legs
                    -- if two limbs have different multipliers (why???), use the smaller one
                    local m_arms = math.min((our[HITGROUP_LEFTARM] or 1) / (gam[HITGROUP_LEFTARM] or 1), (our[HITGROUP_RIGHTARM] or 1) / (gam[HITGROUP_RIGHTARM] or 1))
                    table.insert(self.Infos_Breakpoints, {"ui.hitgroup.arms", shotstokill(m_arms, dmgmin, dmgmax, mran, sran)})
                    local m_legs = math.min((our[HITGROUP_LEFTLEG] or 1) / (gam[HITGROUP_LEFTLEG] or 1), (our[HITGROUP_RIGHTLEG] or 1) / (gam[HITGROUP_RIGHTLEG] or 1))
                    table.insert(self.Infos_Breakpoints, {"ui.hitgroup.legs", shotstokill(m_legs, dmgmin, dmgmax, mran, sran)})

                    stk_num = self:GetBuff("Num")
                    local max = max_shots * (stk_num > 1 and 0.5 or 1)

                    -- Trim table values that are all -1 or math.huge on either end
                    stk_min, stk_max = 1, 1 + max_shots
                    local stk_min_n, stk_min_y = true, true
                    for i = 1, shot_limit do
                        if stk_min_y or stk_min_n then
                            stk_min = i
                        else
                            break
                        end
                        for j = 1, #self.Infos_Breakpoints do
                            if stk_min_n and self.Infos_Breakpoints[j][2][i] != -1 then
                                stk_min_n = false
                            elseif stk_min_y and self.Infos_Breakpoints[j][2][i] != math.huge then
                                stk_min_y = false
                            end
                            if !stk_min_y and !stk_min_n then
                                stk_min = math.Clamp(shot_limit, 1, math.max(1, i - 1))
                                break
                            end
                        end
                    end

                    local stk_max_n, stk_max_y = true, true
                    for i = shot_limit, 1, -1 do
                        if stk_max_y or stk_max_n then
                            stk_max = i
                        else
                            break
                        end
                        for j = 1, #self.Infos_Breakpoints do
                            if stk_max_n and self.Infos_Breakpoints[j][2][i] != -1 then
                                stk_max_n = false
                            elseif stk_max_y and self.Infos_Breakpoints[j][2][i] != math.huge then
                                stk_max_y = false
                            end
                            if !stk_max_y and !stk_max_n then
                                stk_max = math.Clamp(i + 1, 1, shot_limit)
                                break
                            end
                        end
                    end

                    stk_count = stk_max - stk_min + 1
                    if stk_count > max then
                        stk_max = stk_min + max - 1
                        stk_count = max
                    end


                    if GetConVar("developer"):GetInt() > 0 then
                        print(dmgmax .. "-" .. dmgmin .. "DMG; range " .. mran .. "/" .. sran)
                        print("table range: " .. stk_min .. " - " .. stk_max .. " (" .. stk_count .. ")")
                        PrintTable(self.Infos_Breakpoints)
                    end
                end

                local header_w = ss * 48
                local column_w = (w - header_w) / stk_count
                local header_h = ss * 16
                local column_h = (h - header_h) / #self.Infos_Breakpoints

                -- header texts
                surface.SetTextColor(col_fg)
                surface.SetFont("ArcCWC2_8")

                local hg_t = translate("ui.hitgroup")
                local _, hg_h = surface.GetTextSize(hg_t)
                surface.SetTextPos(ss, header_h - (thicc / 2) - hg_h)
                surface.DrawText(hg_t)

                local stk_t = translate("ui.shotstokill")
                local stk_w, _ = surface.GetTextSize(stk_t)
                surface.SetTextPos(header_w - (thicc / 2) - stk_w, 0)
                surface.DrawText(stk_t)

                -- vertical dividers
                local cnt_t = stk_num > 1 and ("×" .. stk_num) or ""
                surface.SetFont("ArcCWC2_8")
                local cnt_w, cnt_h = surface.GetTextSize(cnt_t)

                surface.SetDrawColor(255, 255, 255, Lerp(ArcCW.Inv_Fade, 0, 255))
                for i = 1, stk_count do
                    surface.DrawLine(header_w + i * column_w, 0, header_w + i * column_w, header_h)
                    surface.SetFont("ArcCWC2_16")
                    local num_t = tostring(i + stk_min - 1)
                    local num_w, num_h = surface.GetTextSize(num_t)
                    surface.SetTextPos(header_w + (i - 0.5) * column_w - num_w / 2 - cnt_w / 2, header_h / 2 - num_h / 2)
                    surface.DrawText(num_t)

                    if stk_num > 1 then
                        surface.SetFont("ArcCWC2_8")
                        surface.SetTextPos(header_w + (i - 0.5) * column_w + num_w / 2 - cnt_w / 2, header_h / 2 - num_h / 2 + cnt_h / 2)
                        surface.DrawText(cnt_t)
                    end
                end

                -- table info
                surface.SetFont("ArcCWC2_8")
                for i, tbl in ipairs(self.Infos_Breakpoints) do
                    local row_t = translate(tbl[1])
                    local row_w, row_h = surface.GetTextSize(row_t)
                    surface.SetTextPos(header_w / 2 - row_w / 2, header_h + column_h * (i - 0.5) - row_h / 2)
                    surface.DrawText(row_t)

                    for j = 1, stk_count do
                        local val = tbl[2][j + stk_min - 1]
                        local mat, siz
                        if val == -1 then
                            --ran_t = "⨯"
                            siz = ss * 8
                            mat = mat_hit
                            surface.SetDrawColor(col_bad.r, col_bad.g, col_bad.b, Lerp(ArcCW.Inv_Fade, 0, 255))
                        elseif val == math.huge then
                            --ran_t = "⚫"
                            siz = ss * 16
                            mat = mat_hit_dot
                            surface.SetDrawColor(col_good.r, col_good.g, col_good.b, Lerp(ArcCW.Inv_Fade, 0, 255))
                        else
                            local ran_t = math.floor(val) .. "m"
                            local ran_w, ran_h = surface.GetTextSize(ran_t)
                            surface.SetTextPos(header_w + (j - 0.5) * column_w - ran_w / 2, header_h + column_h * (i - 0.5) - ran_h / 2)
                            surface.DrawText(ran_t)
                        end

                        if mat then
                            surface.SetMaterial(mat)
                            surface.DrawTexturedRect(header_w + (j - 0.5) * column_w - siz / 2, header_h + column_h * (i - 0.5) - siz / 2, siz, siz)
                        end
                    end
                end


                for i = 1, thicc do
                    local meth = ((thicc - i) / thicc)
                    surface.SetDrawColor(255, 255, 255, Lerp(ArcCW.Inv_Fade, 0, 127 * meth))

                    local of
                    if i == 1 then
                        surface.SetDrawColor(col_fg)
                        of = 0
                    elseif (i % 2 == 0) then
                        -- even
                        of = -1 * i / 2
                    else
                        -- odd
                        of = 1 * i / 2
                    end

                    -- first vertical
                    surface.DrawLine(header_w + of, 0, header_w + of, h)

                    -- first horizontal
                    surface.DrawLine(0, header_h + of, w, header_h + of)

                    -- diagonal header
                    --surface.DrawLine(0, of, header_w, header_h + of)

                    -- horizontal dividers
                    for j = 1, #self.Infos_Breakpoints - 1 do
                        surface.DrawLine(0, header_h + column_h * j + of, w, header_h + column_h * j + of)
                    end
                end

                return
            end

            local scale = math.ceil((math.max(dmgmax, dmgmin) + 10) / 25) * 25
            local hscale = math.ceil(math.max(mran, sran) / 150) * 150

            scale = math.max(scale, 75)
            hscale = math.max(hscale, 150)

            local wmin = mran / hscale * w
            local wmax = math.min(sran / hscale * w, w - ss * 32)
            if sran == hscale then wmax = w end

            -- segment 1: minimum range
            local x_1 = 0
            local y_1 = h - (dmgmax / scale * h)
            y_1 = math.Clamp(y_1, ss * 16, h - (ss * 16))
            -- segment 2: slope
            local x_2 = 0
            local y_2 = y_1
            -- segment 3: maximum range
            local x_3 = wmax
            local y_3 = h - (dmgmin / scale * h)
            y_3 = math.Clamp(y_3, ss * 16, h - (ss * 16))

            local x_4 = w
            local y_4 = y_3

            if sran == mran then
                x_2 = w / 2
                x_3 = w / 2
            elseif mran > 0 then
                x_2 = wmin -- w * 1 / 3
            end

            local col_vline = LerpColor(0.5, col_fg, Color(0, 0, 0, 0))

            surface.SetDrawColor(col_vline)

            -- line for min range
            if dmgmax != dmgmin and mran > 0 then
                surface.DrawLine(x_2, 0, x_2, h)
            end

            -- line for max range
            if dmgmax != dmgmin then
                surface.DrawLine(x_3, 0, x_3, h)
            end

            -- damage number text
            for i = 1, thicc do
                local meth = ((thicc - i) / thicc)
                surface.SetDrawColor(255, 255, 255, Lerp(ArcCW.Inv_Fade, 0, 127 * meth))

                local of
                if i == 1 then
                    surface.SetDrawColor(col_fg)
                    of = 0
                elseif (i % 2 == 0) then
                    -- even
                    of = -1 * i / 2
                else
                    -- odd
                    of = 1 * i / 2
                end

                if mran > 0 then
                    -- draw seg 1
                    surface.DrawLine(x_1, y_1 + of, x_2, y_2 + of)
                end
                -- draw seg 2
                surface.DrawLine(x_2, y_2 + of, x_3, y_3 + of)
                -- drag seg 3
                surface.DrawLine(x_3, y_3 + of, x_4, y_4 + of)
            end

            surface.SetTextColor(col_fg)
            surface.SetFont("ArcCWC2_8")

            local drawndmg = false
            if dmgmax != dmgmin then

                if mran == 0 or wmin > ss * 24 then
                    local m_1, hu_1 = RangeText(0)

                    surface.SetTextPos(ss * 2, h - rss * 16)
                    surface.DrawText(m_1)
                    surface.SetTextPos(ss * 2, h - rss * 10)
                    surface.DrawText(hu_1)
                end

                if sran != hscale and w - wmax > ss * 40 then
                    local m_1x, hu_1x = RangeText(hscale)
                    local w_m, _ = surface.GetTextSize(m_1x)
                    local w_hu, _ = surface.GetTextSize(hu_1x)

                    surface.SetTextPos(w - w_m - ss * 2, h - rss * 16)
                    surface.DrawText(m_1x)
                    surface.SetTextPos(w - w_hu - ss * 2, h - rss * 10)
                    surface.DrawText(hu_1x)
                end

                if mran > 0 then
                    -- min damage
                    local dmg = tostring(math.Round(dmgmax))
                    local tw = surface.GetTextSize(dmg)
                    if wmin < tw then
                        surface.SetTextPos(x_2 + ss * 1, ss * 1)
                    else
                        surface.SetTextPos(x_2 - (tw / 2), ss * 1)
                    end
                    surface.DrawText(dmg)

                    local m_2, hu_2 = RangeText(mran)

                    surface.SetTextPos(x_2, h - rss * 16)
                    surface.DrawText(m_2)
                    surface.SetTextPos(x_2, h - rss * 10)
                    surface.DrawText(hu_2)

                    local twt = surface.GetTextSize(dmgt)

                    if wmin < tw then
                        surface.SetTextPos(x_2 + ss * 1, ss * 8)
                    else
                        surface.SetTextPos(x_2 - (twt / 2), ss * 8)
                    end
                    surface.DrawText(dmgt)

                    drawndmg = true
                end

                if sran == hscale then
                    -- draw max damage at edge
                    local dmg = tostring(math.Round(dmgmin))
                    local tw = surface.GetTextSize(dmg)
                    surface.SetTextPos(w - ss * 2 - tw, ss * 1)
                    surface.DrawText(dmg)

                    local m_3, hu_3 = RangeText(sran)
                    local w_m, _ = surface.GetTextSize(m_3)
                    local w_hu, _ = surface.GetTextSize(hu_3)

                    surface.SetTextPos(w - ss * 2 - w_m, h - rss * 16)
                    surface.DrawText(m_3)
                    surface.SetTextPos(w - ss * 2 - w_hu, h - rss * 10)
                    surface.DrawText(hu_3)

                    local twt = surface.GetTextSize(dmgt)
                    surface.SetTextPos(w - ss * 2 - twt, ss * 8)
                    surface.DrawText(dmgt)

                elseif sran != mran then
                    -- draw max damage centered
                    local dmg = tostring(math.Round(dmgmin))
                    local tw = surface.GetTextSize(dmg)
                    surface.SetTextPos(x_3 - (tw / 2), ss * 1)
                    surface.DrawText(dmg)

                    local m_3, hu_3 = RangeText(sran)

                    surface.SetTextPos(x_3, h - rss * 16)
                    surface.DrawText(m_3)
                    surface.SetTextPos(x_3, h - rss * 10)
                    surface.DrawText(hu_3)

                    local twt = surface.GetTextSize(dmgt)
                    surface.SetTextPos(x_3 - (twt / 2), ss * 8)
                    surface.DrawText(dmgt)
                end


                if sran != mran and self2:IsHovered() then
                    local mouse_x, _ = self2:ScreenToLocal(input.GetCursorPos())
                    local mouse_frac = math.Clamp((mouse_x - x_2) / (x_3 - x_2), 0, 1)

                    if mouse_frac > 0 and mouse_frac < 1 then
                        local mouse_range = mran + mouse_frac * (sran - mran)
                        local mouse_dmg = math.Round(self:GetDamage(mouse_range))
                        local y_slope = Lerp(mouse_frac, y_2, y_3)

                        surface.SetDrawColor(col_vline)
                        surface.DrawLine(mouse_x, 0, mouse_x, h)

                        local mouse_text1 = tostring(mouse_dmg)
                        local mouse_text_w, _ = surface.GetTextSize(mouse_text1)
                        local nudge = -mouse_text_w * 0.5
                        local side_margin = ss * 12
                        local a = 255
                        if mouse_x - x_2 <= side_margin then
                            local f = (1 - (mouse_x - x_2) / side_margin)
                            a = Lerp(f, 255, 0)
                        elseif x_3 - mouse_x <= side_margin then
                            local f = (1 - (x_3 - mouse_x) / side_margin)
                            a = Lerp(f, 255, 25)
                        end
                        surface.SetTextColor(255, 255, 255, a)
                        surface.SetTextPos(mouse_x + nudge, y_slope - ss * 12)
                        surface.DrawText(mouse_text1)

                        local m_mouse, hu_mouse = RangeText(mouse_range)
                        local w_m, _ = surface.GetTextSize(m_mouse)
                        local w_hu, _ = surface.GetTextSize(hu_mouse)
                        surface.SetTextPos(mouse_x - w_m * 0.5, y_slope + rss * 5)
                        surface.DrawText(m_mouse)
                        surface.SetTextPos(mouse_x - w_hu * 0.5, y_slope + rss * 11)
                        surface.DrawText(hu_mouse)

                    end
                end
            end

            if !drawndmg then
                surface.SetTextColor(col_fg)

                local dmg = tostring(math.Round(dmgmax))
                surface.SetTextPos(ss * 2, ss * 1)
                surface.DrawText(dmg)

                surface.SetTextPos(ss * 2, ss * 8)
                surface.DrawText(dmgt)

            end
        end
    end

    function ArcCW.InvHUD_FormWeaponBallistics()
        if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
        ArcCW.InvHUD_Menu3:Clear()
        ArcCW.InvHUD_FormWeaponName()

        self.Infos_Ballistics = nil

        local info = vgui.Create("DPanel", ArcCW.InvHUD_Menu3)
        info:SetSize(menu3_w - airgap_x, menu3_h - (ss * 110) - (ss * 70) - rss * 48 - ss * 32)
        info:SetPos(0, rss * 48 + ss * 32 + (ss * 110) + (ss * 70))
        info.Paint = function(self2, w, h)
            if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end

            if !self.Infos_Ballistics then

                self.Infos_Ballistics = {}

                table.insert(self.Infos_Ballistics, {
                    title = translate("trivia.muzzlevel"),
                    value = math.Round(self:GetMuzzleVelocity() * ArcCW.HUToM),
                    unit = translate("unit.mps"),
                })

                table.insert(self.Infos_Ballistics, {
                    title = translate("trivia.recoil"),
                    value = math.Round(self.Recoil * ArcCW.RecoilUnit * self:GetBuff_Mult("Mult_Recoil"), 1),
                    unit = translate("unit.lbfps"),
                })

                table.insert(self.Infos_Ballistics, {
                    title = translate("trivia.recoilside"),
                    value = math.Round(self.RecoilSide * ArcCW.RecoilUnit * self:GetBuff_Mult("Mult_RecoilSide"), 1),
                    unit = translate("unit.lbfps"),
                })

                -- arccw_approved_recoil_score
                local aars = 0
                local disclaimers = ""

                aars = aars + (self.Recoil + self:GetBuff_Add("Add_Recoil")) * self:GetBuff_Mult("Mult_Recoil")
                aars = aars + (self.RecoilSide + self:GetBuff_Add("Add_RecoilSide")) * self:GetBuff_Mult("Mult_RecoilSide") * 0.5

                local arpm = (60 / self:GetFiringDelay())

                if self:GetIsManualAction() then
                    local fireanim = self:GetBuff_Hook("Hook_SelectFireAnimation") or self:SelectAnimation("fire")
                    local firedelay = self.Animations[fireanim].MinProgress or 0

                    arpm = math.Round(60 / ((firedelay + self:GetAnimKeyTime("cycle", true)) * self:GetBuff_Mult("Mult_CycleTime")))
                elseif self:GetCurrentFiremode().Mode == 1 then
                    arpm = math.min(400, 60 / self:GetFiringDelay())
                end
                aars = aars * arpm

                --[[
                if self:GetCurrentFiremode().Mode == 1 or self:GetIsManualAction() then
                    disclaimers = disclaimers .. " " .. arpm .. translate("unit.rpm")
                end
                ]]

                table.insert(self.Infos_Ballistics, {
                    title = translate("trivia.recoilscore"),
                    value = math.Round(aars),
                    unit = " points" .. disclaimers,
                })

            end

            for i, triv in pairs(self.Infos_Ballistics) do
                triv.unit = triv.unit or ""
                local i_2 = i - 1
                surface.SetFont("ArcCWC2_8")
                local tw_1 = surface.GetTextSize(triv.title)

                surface.SetFont("ArcCWC2_8_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos(w - tw_1, i_2 * (rss * 24))
                surface.DrawText(triv.title)

                surface.SetFont("ArcCWC2_8")
                surface.SetTextColor(col_fg)
                surface.SetTextPos(w - tw_1, i_2 * (rss * 24))
                surface.DrawText(triv.title)


                surface.SetFont("ArcCWC2_16")
                local tw_3a = select(2, surface.GetTextSize(tostring(triv.value)))

                surface.SetFont("ArcCWC2_8")
                local tw_2 = surface.GetTextSize(triv.unit)
                local tw_2a = select(2, surface.GetTextSize(triv.unit))

                surface.SetFont("ArcCWC2_8_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos(w - tw_2, (i_2 * (rss * 24)) + (rss * 4.4) + tw_2a)
                surface.DrawText(triv.unit)

                surface.SetFont("ArcCWC2_8")
                surface.SetTextColor(col_fg)
                surface.SetTextPos(w - tw_2, (i_2 * (rss * 24)) + (rss * 4.4) + tw_2a)
                surface.DrawText(triv.unit)

                surface.SetFont("ArcCWC2_16")
                local tw_3 = surface.GetTextSize(tostring(triv.value))

                surface.SetFont("ArcCWC2_16_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos(math.max(w - tw_2 - tw_3, 0), (i_2 * (rss * 24)) + (rss * 6))
                surface.DrawText(triv.value)

                surface.SetFont("ArcCWC2_16")
                surface.SetTextColor(col_fg)
                surface.SetTextPos(math.max(w - tw_2 - tw_3, 0), (i_2 * (rss * 24)) + (rss * 6))
                surface.DrawText(triv.value)
            end
        end

        local range_3 = math.max(math.Round(self:GetBuff("Range") / 25) * 25, 50) --self.Range * self:GetBuff_Mult("Mult_Range")
        local range_1 = math.max(math.Round(range_3 / 3 / 25) * 25, 15) --(self.RangeMin or 0) * self:GetBuff_Mult("Mult_RangeMin")

        if range_1 == 0 then
            range_1 = range_3 * 0.5
        end

        rollallhits(self, range_3, range_1)

        local ballisticchart = vgui.Create("DButton", ArcCW.InvHUD_Menu3)
        ballisticchart:SetSize(ss * 200, ss * 110)
        ballisticchart:SetPos(menu3_w - ss * 200 - airgap_x, rss * 48 + ss * 32)
        ballisticchart:SetText("")
        ballisticchart.DoClick = function(self2)
            rollallhits(self, range_3, range_1)
        end
        ballisticchart.Paint = function(self2, w, h)
            if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end

            local col = col_button
            if self2:IsHovered() then
                col = col_button_hv
            end

            if self.PrimaryBash then
                draw.RoundedBox(cornerrad, 0, 0, w, h, col)

                local txt = translate("ui.nodata")

                surface.SetTextColor(col_fg)
                surface.SetFont("ArcCWC2_24")
                local tw, th = surface.GetTextSize(txt)
                surface.SetTextPos((w - tw) / 2, (h - th) / 2)
                surface.DrawText(txt)
                return
            end

            draw.RoundedBox(cornerrad, 0, 0, w, h, col)

            local s = w / 2
            local s2 = ss * 10

            local range_1_txt = tostring(range_1) .. "m / " .. tostring(math.Round(range_1 / ArcCW.HUToM / 100) * 100) .. "HU"
            local range_3_txt = tostring(range_3) .. "m / " .. tostring(math.Round(range_3 / ArcCW.HUToM / 100) * 100) .. "HU"

            local col_bullseye = Color(200, 200, 200, Lerp(ArcCW.Inv_Fade, 0, 100))

            surface.SetMaterial(bullseye)
            surface.SetDrawColor(col_bullseye)
            surface.DrawTexturedRect(0, 0, s, s)

            local r_1_x, r_1_y = self2:LocalToScreen(0, 0)

            render.SetScissorRect(r_1_x, r_1_y, r_1_x + s, r_1_y + s, true)

            for _, hit in ipairs(hits_1) do
                if self:GetBuff("Num") > 1 then
                    surface.SetMaterial(mat_hit_dot)
                else
                    surface.SetMaterial(mat_hit)
                end
                surface.SetDrawColor(col_fg)
                surface.DrawTexturedRect((s / 2) + (hit.x * s) - (s2 / 2), (s / 2) + (hit.y * s) - (s2 / 2), s2, s2)
            end

            render.SetScissorRect(r_1_x, r_1_y, r_1_x + s, r_1_y + s, false)

            surface.SetTextColor(col_fg)
            surface.SetFont("ArcCWC2_12")
            local range_1_txtw = surface.GetTextSize(range_1_txt)
            surface.SetTextPos((s - range_1_txtw) / 2, h - (ss * 12) - (ss * 1))
            surface.DrawText(range_1_txt)

            surface.SetMaterial(bullseye)
            surface.SetDrawColor(col_bullseye)
            surface.DrawTexturedRect(s, 0, s, s)

            render.SetScissorRect(r_1_x + s, r_1_y, r_1_x + (s * 2), r_1_y + s, true)

            for _, hit in ipairs(hits_3) do
                if self:GetBuff("Num") > 1 then
                    surface.SetMaterial(mat_hit_dot)
                else
                    surface.SetMaterial(mat_hit)
                end
                surface.SetDrawColor(col_fg)
                surface.DrawTexturedRect(s + (s / 2) + (hit.x * s) - (s2 / 2), (s / 2) + (hit.y * s) - (s2 / 2), s2, s2)
            end

            render.SetScissorRect(r_1_x, r_1_y, r_1_x + s, r_1_y + s, false)

            surface.SetTextColor(col_fg)
            surface.SetFont("ArcCWC2_12")
            local range_3_txtw = surface.GetTextSize(range_3_txt)
            surface.SetTextPos(s + (s - range_3_txtw) / 2, h - (ss * 12) - (ss * 1))
            surface.DrawText(range_3_txt)
        end

        local penchart = vgui.Create("DPanel", ArcCW.InvHUD_Menu3)
        penchart:SetSize(ss * 200, ss * 60)
        penchart:SetPos(menu3_w - ss * 200 - airgap_x, rss * 48 + ss * 32 + (ss * 115))
        penchart:SetText("")
        penchart.Paint = function(self2, w, h)
            if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end

            local col = col_button

            draw.RoundedBox(cornerrad, 0, 0, w, h, col)

            local pen = self:GetBuff("Penetration")

            local pm_wood = ArcCW.PenTable[MAT_WOOD]
            local pm_metal = ArcCW.PenTable[MAT_METAL]
            local pm_concrete = ArcCW.PenTable[MAT_CONCRETE]

            local line_s = ss * 1
            local line_h = h - (rss * 8 * 2) - (ss * 2)

            -- wood

            local pen_wood = math.Round(pen / pm_wood, 1)
            local wood_txt = "WOOD"

            surface.SetTextColor(col_fg)
            surface.SetFont("ArcCWC2_8")
            local wood_txtw = surface.GetTextSize(wood_txt)
            surface.SetTextPos((w * 1 / 6) - (wood_txtw / 2), h - (rss * 8))
            surface.DrawText(wood_txt)

            local wood_txt2 = tostring(pen_wood) .. "HU"

            surface.SetTextColor(col_fg)
            surface.SetFont("ArcCWC2_8")
            local wood_txt2w = surface.GetTextSize(wood_txt)
            surface.SetTextPos((w * 1 / 6) - (wood_txt2w / 2), h - (rss * 8 * 2))
            surface.DrawText(wood_txt2)

            local wood_width = (math.ceil(pen_wood / 5) * 5)
            wood_width = math.max(wood_width, 5)
            wood_width = math.min(wood_width, 20)

            local wood_s = wood_width * ss

            surface.SetDrawColor(col_fg_tr)
            surface.DrawRect((w * 1 / 6) - (wood_s / 2), ss * 4, wood_s, line_h / 2 - (line_s / 2) - (ss * 4))
            surface.DrawRect((w * 1 / 6) - (wood_s / 2), line_h / 2 + (line_s / 2), wood_s, line_h / 2 - (line_s / 2))
            -- bullet
            surface.DrawRect((w * 1 / 6) - (wood_s / 2) - (w / 6), line_h / 2 - (line_s / 2), w / 6, line_s)

            if pen_wood > wood_width then
                -- penetrated
                surface.DrawRect((w * 1 / 6) + (wood_s / 2), line_h / 2 - (line_s / 2), ss * 4, line_s)
            else
                -- did not penetrate
                local pen_percent = (pen_wood / wood_width)
                surface.DrawRect((w * 1 / 6) - (wood_s / 2) + math.ceil(wood_s * pen_percent), line_h / 2 - (line_s / 2) - 1, wood_s - math.ceil(wood_s * pen_percent), line_s + 1)
            end

            -- metal

            local pen_metal = math.Round(pen / pm_metal, 1)
            local metal_txt = "METAL"

            surface.SetTextColor(col_fg)
            surface.SetFont("ArcCWC2_8")
            local metal_txtw = surface.GetTextSize(metal_txt)
            surface.SetTextPos((w * 3 / 6) - (metal_txtw / 2), h - (rss * 8))
            surface.DrawText(metal_txt)

            local metal_txt2 = tostring(pen_metal) .. "HU"

            surface.SetTextColor(col_fg)
            surface.SetFont("ArcCWC2_8")
            local metal_txt2w = surface.GetTextSize(metal_txt)
            surface.SetTextPos((w * 3 / 6) - (metal_txt2w / 2), h - (rss * 8 * 2))
            surface.DrawText(metal_txt2)

            local metal_width = (math.ceil(pen_metal / 5) * 5)
            metal_width = math.max(metal_width, 5)
            metal_width = math.min(metal_width, 20)

            local metal_s = metal_width * ss

            surface.SetDrawColor(col_fg_tr)
            surface.DrawRect((w * 3 / 6) - (metal_s / 2), ss * 4, metal_s, line_h / 2 - (line_s / 2) - (ss * 4))
            surface.DrawRect((w * 3 / 6) - (metal_s / 2), line_h / 2 + (line_s / 2), metal_s, line_h / 2 - (line_s / 2))
            -- bullet
            surface.DrawRect((w * 3 / 6) - (metal_s / 2) - (w / 6), line_h / 2 - (line_s / 2), w / 6, line_s)

            if pen_metal > metal_width then
                -- penetrated
                surface.DrawRect((w * 3 / 6) + (metal_s / 2), line_h / 2 - (line_s / 2), ss * 4, line_s)
            else
                -- did not penetrate
                local pen_percent = (pen_metal / metal_width)
                surface.DrawRect((w * 3 / 6) - (metal_s / 2) + math.ceil(metal_s * pen_percent), line_h / 2 - (line_s / 2) - 1, metal_s - math.ceil(metal_s * pen_percent), line_s + 1)
            end

            -- concrete

            local pen_concrete = math.Round(pen / pm_concrete, 1)
            local concrete_txt = "CONCRETE"

            surface.SetTextColor(col_fg)
            surface.SetFont("ArcCWC2_8")
            local concrete_txtw = surface.GetTextSize(concrete_txt)
            surface.SetTextPos((w * 5 / 6) - (concrete_txtw / 2), h - (rss * 8))
            surface.DrawText(concrete_txt)

            local concrete_txt2 = tostring(pen_concrete) .. "HU"

            surface.SetTextColor(col_fg)
            surface.SetFont("ArcCWC2_8")
            local concrete_txt2w = surface.GetTextSize(concrete_txt)
            surface.SetTextPos((w * 5 / 6) - (concrete_txt2w / 2), h - (rss * 8 * 2))
            surface.DrawText(concrete_txt2)

            local concrete_width = (math.ceil(pen_concrete / 5) * 5)
            concrete_width = math.max(concrete_width, 5)
            concrete_width = math.min(concrete_width, 20)

            local concrete_s = concrete_width * ss

            surface.SetDrawColor(col_fg_tr)
            surface.DrawRect((w * 5 / 6) - (concrete_s / 2), ss * 4, concrete_s, line_h / 2 - (line_s / 2) - (ss * 4))
            surface.DrawRect((w * 5 / 6) - (concrete_s / 2), line_h / 2 + (line_s / 2), concrete_s, line_h / 2 - (line_s / 2))
            -- bullet
            surface.DrawRect((w * 5 / 6) - (concrete_s / 2) - (w / 6), line_h / 2 - (line_s / 2), w / 6, line_s)

            if pen_concrete > concrete_width then
                -- penetrated
                surface.DrawRect((w * 5 / 6) + (concrete_s / 2), line_h / 2 - (line_s / 2), ss * 4, line_s)
            else
                -- did not penetrate
                local pen_percent = (pen_concrete / concrete_width)
                surface.DrawRect((w * 5 / 6) - (concrete_s / 2) + math.ceil(concrete_s * pen_percent), line_h / 2 - (line_s / 2) - 1, concrete_s - math.ceil(concrete_s * pen_percent), line_s + 1)
            end
        end
    end

    function ArcCW.InvHUD_FormGamemodeFunctions()
        if !IsValid(ArcCW.InvHUD) or !IsValid(self) then return end
        if !ArcCW.ConVars["attinv_gamemodebuttons"]:GetBool() then return end

        local shoulddrawtitle = false
        local function paint_gmbutton(self2, w, h)
            local col = col_button
            local col2 = col_fg

            if self2:IsHovered() then
                col = col_fg_tr
                col2 = col_shadow
            end

            draw.RoundedBox(cornerrad, 0, 0, w, h, col)

            surface.SetFont("ArcCWC2_14")
            local tw, th = surface.GetTextSize(self2.Text)

            surface.SetFont("ArcCWC2_14_Glow")
            surface.SetTextColor(col_shadow)
            surface.SetTextPos((w - tw) / 2, (h - th) / 2)
            surface.DrawText(self2.Text)

            surface.SetFont("ArcCWC2_14")
            surface.SetTextColor(col2)
            surface.SetTextPos((w - tw) / 2, (h - th) / 2)
            surface.DrawText(self2.Text)
        end

        if engine.ActiveGamemode() == "terrortown" then
            shoulddrawtitle = true
            local shop = vgui.Create("DButton", ArcCW.InvHUD)
            shop:SetSize(ss * 64, ss * 24)
            shop:SetPos(ScrW() * 0.5 - ss * (64 + 4), ScrH() - ss * (24 + 10))
            shop:SetText("")
            shop.Text = translate("ui.tttequip")
            shop.DoClick = function(self2, clr, btn)
                RunConsoleCommand("ttt_cl_traitorpopup")
            end
            shop.Paint = paint_gmbutton

            local quickchat = vgui.Create("DButton", ArcCW.InvHUD)
            quickchat:SetSize(ss * 64, ss * 24)
            quickchat:SetPos(ScrW() * 0.5 + ss * 4, ScrH() - ss * (24 + 10))
            quickchat:SetText("")
            quickchat.Text = translate("ui.tttchat")
            quickchat.DoClick = function(self2, clr, btn)
                if RADIO then RADIO:ShowRadioCommands(!RADIO.Show) end
            end
            quickchat.Paint = paint_gmbutton
        elseif engine.ActiveGamemode() == "darkrp" or DarkRP then
            -- Check for the global table, as DarkRP has many derivatives
            shoulddrawtitle = true
            local drop = vgui.Create("DButton", ArcCW.InvHUD)
            drop:SetSize(ss * 96, ss * 24)
            drop:SetPos(ScrW() * 0.5 - ss * 48, ScrH() - ss * (24 + 10))
            drop:SetText("")
            drop.Text = translate("ui.darkrpdrop")
            drop.DoClick = function(self2, clr, btn)
                LocalPlayer():ConCommand("say /drop")
            end
            drop.Paint = paint_gmbutton
        end

        if shoulddrawtitle then
            local text = vgui.Create("DPanel", ArcCW.InvHUD)
            text:SetSize(ss * 256, ss * 12)
            text:SetPos(ScrW() * 0.5 - ss * 128, ScrH() - ss * (24 + 12 + 12))
            text.Paint = function(self2, w, h)
                local col2 = col_fg
                local str = translate("ui.gamemode_buttons")
                surface.SetFont("ArcCWC2_12")
                local tw, th = surface.GetTextSize(str)

                surface.SetFont("ArcCWC2_12_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos((w - tw) / 2, (h - th) / 2)
                surface.DrawText(str)

                surface.SetFont("ArcCWC2_12")
                surface.SetTextColor(col2)
                surface.SetTextPos((w - tw) / 2, (h - th) / 2)
                surface.DrawText(str)
            end

            local text2 = vgui.Create("DPanel", ArcCW.InvHUD)
            text2:SetSize(ss * 256, ss * 8)
            text2:SetPos(ScrW() * 0.5 - ss * 128, ScrH() - ss * 9)
            text2.Paint = function(self2, w, h)
                local col2 = col_fg
                local str = translate("ui.gamemode_usehint")
                surface.SetFont("ArcCWC2_8")
                local tw, th = surface.GetTextSize(str)

                surface.SetFont("ArcCWC2_8_Glow")
                surface.SetTextColor(col_shadow)
                surface.SetTextPos((w - tw) / 2, (h - th) / 2)
                surface.DrawText(str)

                surface.SetFont("ArcCWC2_8")
                surface.SetTextColor(col2)
                surface.SetTextPos((w - tw) / 2, (h - th) / 2)
                surface.DrawText(str)
            end
        end
    end

    clearrightpanel()

    ArcCW.Inv_SelectedMenu = ArcCW.Inv_SelectedMenu or 1

    if ArcCW.Inv_SelectedMenu == 1 then
        ArcCW.InvHUD_FormAttachments()
        if self.Inv_SelectedSlot then
            ArcCW.InvHUD_FormAttachmentSelect()
        end
    elseif ArcCW.Inv_SelectedMenu == 2 then
        ArcCW.InvHUD_FormPresets()
    elseif ArcCW.Inv_SelectedMenu == 3 then
        ArcCW.InvHUD_FormInventory()
    end

    ArcCW.InvHUD_FormGamemodeFunctions()

end

--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_light.lua:
SWEP.Flashlights = {} -- tracks projectedlights
-- {{att = int, light = ProjectedTexture}}
SWEP.CheapFlashlights = {} -- tracks cheap flashlight models + lights
-- {{att = int, dlight = DynamicLight, vlight = ClientsideModel}}

function SWEP:GetHasFlashlights()
    for i, k in pairs(self.Attachments) do
        if !k.Installed then continue end
        if self:GetBuff_Stat("Flashlight", i) != nil then return true end
    end

    return false
end

function SWEP:CreateFlashlightsVM()
    self:KillFlashlights()
    self.Flashlights = {}

    local total_lights = 0

    for i, k in pairs(self.Attachments) do
        if !k.Installed then continue end
        if self:GetBuff_Stat("Flashlight", i) then
            local newlight = {
                att = i,
                light = ProjectedTexture(),
                bone = self:GetBuff_Stat("FlashlightBone", i) or "laser",
                col = self:GetBuff_Stat("FlashlightColor", i) or Color(255, 255, 255),
                br = self:GetBuff_Stat("FlashlightBrightness", i) or 2
            }
            total_lights = total_lights + 1

            local l = newlight.light
            if !IsValid(l) then continue end

            table.insert(self.Flashlights, newlight)

            l:SetFOV(self:GetBuff_Stat("FlashlightFOV", i) or 50)

            if self:GetBuff_Stat("FlashlightHFOV", i) then
                l:SetHorizontalFOV(self:GetBuff_Stat("FlashlightHFOV", i))
            end

            if self:GetBuff_Stat("FlashlightVFOV", i) then
                l:SetVerticalFOV(self:GetBuff_Stat("FlashlightVFOV", i))
            end

            l:SetFarZ(self:GetBuff_Stat("FlashlightFarZ", i) or 512)
            l:SetNearZ(self:GetBuff_Stat("FlashlightNearZ", i) or 4)

            local atten = self:GetBuff_Stat("FlashlightAttenuationType", i) or ArcCW.FLASH_ATT_LINEAR

            l:SetLinearAttenuation(0)
            l:SetConstantAttenuation(0)
            l:SetQuadraticAttenuation(0)

                if atten == ArcCW.FLASH_ATT_CONSTANT then
                    l:SetConstantAttenuation(100)
                elseif atten == ArcCW.FLASH_ATT_QUADRATIC then
                    l:SetQuadraticAttenuation(100)
                else
                    l:SetLinearAttenuation(100)
                end

            l:SetColor(self:GetBuff_Stat("FlashlightColor", i) or Color(255, 255, 255))
            l:SetTexture(self:GetBuff_Stat("FlashlightTexture", i))
            l:SetBrightness(self:GetBuff_Stat("FlashlightBrightness", i))
            l:SetEnableShadows(true)
            l:Update()

            local g_light = {
                Weapon = self,
                ProjectedTexture = l
            }

            table.insert(ArcCW.FlashlightPile, g_light)
        end
    end

    if total_lights > 2 then -- you are a madman
        for i, k in pairs(self.Flashlights) do
            if k.light:IsValid() then k.light:SetEnableShadows(false) end
        end
    end
end

-- for world model flashlights we will use a cheap solution similar to what HL2 uses
-- throw up a volumetric light model
-- function SWEP:CreateFlashlightsWM()
--     self:KillFlashlights()
--     self.CheapFlashlights = {}
--     for i, k in pairs(self.Attachments) do
--         if !k.Installed then continue end
--         local atttbl = ArcCW.AttachmentTable[k.Installed]

--         if atttbl.Flashlight then
--             local newlight = {
--                 att = i,
--                 vlight = ClientsideModel(ArcCW.VolumetricLightModel),
--                 scale_x = 1,
--                 scale_y = 1,
--                 maxz = atttbl.FlashlightFarZ or 512,
--                 bone = atttbl.FlashlightBone or "laser",
--                 col = Color(255, 255, 255)
--             }

--             local vl = newlight.vlight

--             if !IsValid(vl) then continue end

--             table.insert(self.CheapFlashlights, newlight)

--             local xfov = atttbl.FlashlightHFOV or atttbl.FlashlightFOV or 50
--             local yfov = atttbl.FlashlightVFOV or atttbl.FlashlightFOV or 50

--             local target_x = 128 * (xfov / 90)
--             local target_y = 128 * (yfov / 90)

--             local scale_x = target_x / ArcCW.VolumetricLightX
--             local scale_y = target_y / ArcCW.VolumetricLightY

--             newlight.scale_x = scale_x
--             newlight.scale_y = scale_y

--             vl:SetNoDraw(ArcCW.NoDraw)
--             vl:DrawShadow(false)
--             local col = atttbl.FlashlightColor or Color(255, 255, 255)
--             col = Color(255, 0, 0)
--             newlight.col = col
--             -- vl:SetColor(col)

--             local g_light = {
--                 Model = vl,
--                 Weapon = self
--             }

--             table.insert(ArcCW.CSModelPile, g_light)
--         end
--     end
-- end

function SWEP:KillFlashlights()
    self:KillFlashlightsVM()
    -- self:KillFlashlightsWM()
end

function SWEP:KillFlashlightsVM()
    if !self.Flashlights then return end

    for i, k in pairs(self.Flashlights) do
        if k.light and k.light:IsValid() then
            k.light:Remove()
        end
    end

    self.Flashlights = nil
end

function SWEP:KillFlashlightsWM()
    -- if !self.CheapFlashlights then return end

    -- for i, k in pairs(self.CheapFlashlights) do
    --     if k.vlight and k.vlight:IsValid() then
    --         k.vlight:Remove()
    --     end
    -- end

    -- self.CheapFlashlights = nil
end

-- given fov and distance solve apparent size
local function solvetriangle(angle, dist)
    local a = angle / 2
    local b = dist
    return b * math.tan(a) * 2
end

local flashlight_mat = Material("models/effects/vol_light002")
-- local flashlight_mat = Material("effects/blueblacklargebeam")

function SWEP:DrawFlashlightsWM()
    -- if !self.CheapFlashlights then
    --     self:CreateFlashlightsWM()
    -- end

    local owner = self:GetOwner()

    for i, k in pairs(self.Attachments) do
        if !k.Installed then continue end
        local atttbl = ArcCW.AttachmentTable[k.Installed]

        if !atttbl or !self:GetBuff_Stat("Flashlight", i) then continue end

        local maxz = atttbl.FlashlightFarZ or 512
        local bone = atttbl.FlashlightBone or "laser"
        local col = atttbl.FlashlightColor or Color(255, 255, 255)

        if !k.WElement then continue end
        local model = k.WElement.Model
        if !IsValid(model) then return end

        local pos, ang, dir

        if !model then
            pos = owner:EyePos()
            ang = owner:EyeAngles()
            dir = ang:Forward()
        else
            local att = model:LookupAttachment(bone or "laser")

            att = att == 0 and model:LookupAttachment("muzzle") or att

            if att == 0 then
                pos = model:GetPos()
                ang = IsValid(owner) and owner:EyeAngles() or model:GetAngles()
                dir = ang:Forward()
                dir_2 = ang:Up()
            else
                local attdata  = model:GetAttachment(att)
                pos, ang = attdata.Pos, attdata.Ang
                dir = -ang:Right()
                dir_2 = ang:Up()
            end
        end

        local maxs = Vector(2, 2, 2)
        local mins = -maxs

        -- scale volumetric light
        local tr = util.TraceHull({
            start = pos,
            endpos = pos + (dir * maxz),
            mask = MASK_OPAQUE,
            mins = mins,
            maxs = maxs
        })

        local z = (tr.HitPos - tr.StartPos):Length()
        -- local s_z = z / ArcCW.VolumetricLightZ

        local xfov = atttbl.FlashlightHFOV or atttbl.FlashlightFOV or 50
        local yfov = atttbl.FlashlightVFOV or atttbl.FlashlightFOV or 50

        -- local target_x = 128 * (xfov / 90)
        -- local target_y = 128 * (yfov / 90)

        local target_x = solvetriangle(xfov, z)
        local target_y = target_x

        if xfov != yfov then
            target_y = solvetriangle(yfov, z)
        end

        local vs = EyeAngles():Up()

        local c1 = pos + vs
        local c4 = pos - vs
        local c2 = tr.HitPos + (vs * target_y * 0.75)
        local c3 = tr.HitPos - (vs * target_y * 0.75)

        render.SetMaterial(flashlight_mat)
        render.DrawQuad(c1,c2,c3,c4, col)

        -- local scale = Matrix()
        -- scale:Scale(Vector(s_x, s_y, s_z))

        -- k.vlight:SetPos(pos)
        -- k.vlight:SetAngles(ang + Angle(0, 0, 90))
        -- k.vlight:EnableMatrix("RenderMultiply", scale)
        -- k.vlight:SetColor(Color(255, 0, 0, 255))
        -- k.vlight:SetRenderMode(RENDERMODE_NORMAL)
        -- k.vlight:SetKeyValue("RenderFX", kRenderFxNone)
        -- k.vlight:DrawModel()
        -- place dynamic light to make some light appear

        local dl = DynamicLight(self:EntIndex())

        local delta = (z / maxz)
        delta = math.Clamp(delta, 0, 1)

        if dl then
            dl.pos = tr.HitPos
            dl.r = col.r
            dl.g = col.g
            dl.b = col.b
            dl.brightness = Lerp(delta, atttbl.FlashlightBrightness or 2, 0)
            -- print(z / maxz)
            dl.Decay = 1000 / 1
            dl.dietime = CurTime() + 0.1
            dl.size = xfov * 5
        end
    end
end

function SWEP:DrawFlashlightsVM()
    if !self.Flashlights then
        self:CreateFlashlightsVM()
    end

    local owner = self:GetOwner()

    for i, k in pairs(self.Flashlights) do
        local model = (self.Attachments[k.att].VElement or {}).Model

        local pos, ang

        if !model then
            pos = owner:EyePos()
            ang = owner:EyeAngles()
        else
            local att = model:LookupAttachment(k.bone or "laser")

            att = att == 0 and model:LookupAttachment("muzzle") or att

            if att == 0 then
                pos = model:GetPos()
                ang = owner:EyeAngles()
            else
                local attdata  = model:GetAttachment(att)
                pos, ang = attdata.Pos, attdata.Ang
            end
        end

        local tr = util.TraceLine({
            start = owner:EyePos(),
            endpos = owner:EyePos() - ang:Right() * 128,
            mask = MASK_OPAQUE,
            filter = LocalPlayer(),
        })
        if tr.Fraction < 1 then -- We need to push the flashlight back
            local tr2 = util.TraceLine({
                start = owner:EyePos(),
                endpos = owner:EyePos() + ang:Right() * 128,
                mask = MASK_OPAQUE,
                filter = LocalPlayer(),
            })
            -- push it as back as the area behind us allows
            pos = pos + ang:Right() * 128 * math.min(1 - tr.Fraction, tr2.Fraction)
        end

        ang:RotateAroundAxis(ang:Up(), 90)

        k.light:SetPos(pos)
        k.light:SetAngles(ang)
        k.light:Update()

        -- local col = k.col

        -- local dl = DynamicLight(self:EntIndex())

        -- if dl then
        --     dl.pos = pos
        --     dl.r = col.r
        --     dl.g = col.g
        --     dl.b = col.b
        --     dl.brightness = k.br or 2
        --     -- print(z / maxz)
        --     dl.Decay = 1000 / 0.1
        --     dl.dietime = CurTime() + 0.1
        --     dl.size = (k.br or 2) * 64
        -- end
    end
end

--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_presets.lua:
-- atts are comma separated
-- optic_mrs,,,perk_quickdraw,ammo_match



local function ScreenScaleMulti(input)
    return ScreenScale(input) * ArcCW.ConVars["hud_size"]:GetFloat()
end

function SWEP:GetPresetBase()
    return self.PresetBase or self:GetClass()
end

function SWEP:GetPresets()
    local path = ArcCW.PresetPath .. self:GetPresetBase() .. "/*.txt"

    local files = file.Find(path, "DATA")

    files = table.Add(files, file.Find(ArcCW.PresetPath .. self:GetPresetBase() .. "/*.json", "DATA"))

    return files
end

function SWEP:LoadPreset(presetname)
    presetname = presetname or "autosave"
    if presetname == "autosave" then
        if self:GetNWBool("ArcCW_DisableAutosave", false) then return end
        if !ArcCW.ConVars["autosave"]:GetBool() then return end
    end

    if presetname != "autosave" then
        surface.PlaySound("weapons/arccw/install.wav")
    end

    -- ???
    self.Attachments.BaseClass = nil

    local presetTbl


    -- New behavior
    local filename = ArcCW.PresetPath .. self:GetPresetBase() .. "/" .. presetname .. ".json"
    if file.Exists(filename, "DATA") then
        presetTbl = util.JSONToTable(file.Read(filename))
        if presetTbl and presetTbl != {} then
            for i = 1, table.Count(self.Attachments) do
                local ok = true

                if !presetTbl[i] or !ArcCW.AttachmentTable[presetTbl[i].Installed or ""] then
                    ok = false
                end

                if !ok then
                    presetTbl[i] = nil
                end
            end
        end
    end

    -- Legacy behavior
    filename = ArcCW.PresetPath .. self:GetPresetBase() .. "/" .. presetname .. ".txt"
    if presetTbl == nil and file.Exists(filename, "DATA") then
        local f = file.Open(filename, "r", "DATA")
        if !f then return end

        presetTbl = {}

        for i = 1, table.Count(self.Attachments) do
            local line = f:ReadLine()
            if !line then continue end
            local split = string.Split(string.Trim(line, "\n"), ",")
            if !ArcCW.AttachmentTable[split[1]] then continue end
            presetTbl[i] = {
                Installed = split[1],
                SlidePos = split[2] and tonumber(split[2]),
                SightMagnifications = split[3] and tonumber(split[3]),
                ToggleNum = nil, -- not implemented in legacy preset
            }
        end
        f:Close()
    end

    if !presetTbl then return end

    net.Start("arccw_applypreset")
    net.WriteEntity(self)
    for k, v in pairs(self.Attachments) do
        local att = (presetTbl[k] or {}).Installed

        if !att or !ArcCW.AttachmentTable[att] then
            net.WriteUInt(0, ArcCW.GetBitNecessity())
            continue
        end

        net.WriteUInt(ArcCW.AttachmentTable[att].ID, ArcCW.GetBitNecessity())

        net.WriteBool(presetTbl[k].SlidePos)
        if presetTbl[k].SlidePos then
            net.WriteFloat(presetTbl[k].SlidePos)
        end

        if ArcCW.AttachmentTable[att].ToggleStats != nil then
            net.WriteUInt(presetTbl[k].ToggleNum or 1, 8)
        end
        v.ToggleNum = presetTbl[k].ToggleNum or 1

        -- not networked
        self.SightMagnifications[k] = presetTbl[k].SightMagnifications
    end
    net.SendToServer()

    --[[]
    for i = 1, table.Count(self.Attachments) do
        local att = presetTbl[i]
        if !att then continue end

        if ArcCW:PlayerGetAtts(self:GetOwner(), att) == 0 then continue end
        if !self.Attachments[i] then continue end

        -- detect commas
        -- no commas = do nothing
        -- commas: If exactly two commas are detected
        -- try to parse them as slidepos, magnification

        local split = string.Split(att, ",")
        local sc = table.Count(split)

        local slidepos = 0.5
        local mag = -1

        if sc == 3 then
            att = split[1]
            slidepos = tonumber(split[2])
            mag = tonumber(split[3])
        end

        if att == self.Attachments[i].Installed then continue end

        self:Detach(i, true, true)

        if !ArcCW.AttachmentTable[att] then continue end

        self:Attach(i, att, true, true)

        if slidepos != 0.5 then
            self.Attachments[i].SlidePos = slidepos
        end

        if mag != -1 then
            self.SightMagnifications[i] = mag
        end
    end

    self:SendAllDetails()

    self:SavePreset()
    ]]
end

function SWEP:SavePreset(presetname)
    presetname = presetname or "autosave"
    if presetname == "autosave" and !ArcCW.ConVars["attinv_free"]:GetBool() then return end

    local presetTbl = {}
    for i, k in pairs(self.Attachments) do
        if k.Installed then
            presetTbl[i] = {
                Installed = k.Installed,
                SlidePos = k.SlidePos,
                SightMagnifications = self.SightMagnifications[i],
                ToggleNum = k.ToggleNum
            }
        end
    end

    filename = ArcCW.PresetPath .. self:GetPresetBase() .. "/" .. presetname .. ".json"
    file.CreateDir(ArcCW.PresetPath .. self:GetPresetBase())
    file.Write(filename, util.TableToJSON(presetTbl))

    local legacy_filename = ArcCW.PresetPath .. self:GetPresetBase() .. "/" .. presetname .. ".txt"
    if file.Exists(legacy_filename, "DATA") then
        file.Delete(legacy_filename)
    end

    -- Legacy presets
    --[[]
    local str = ""
    for i, k in pairs(self.Attachments) do
        if k.Installed then
            str = str .. k.Installed
            if k.SlidePos or self.SightMagnifications[i] then
                str = str .. "," .. tostring(k.SlidePos or 0.5) .. "," .. tostring(self.SightMagnifications[i] or -1)
            end
        end

        str = str .. "\n"
    end

    filename = ArcCW.PresetPath .. self:GetPresetBase() .. "/" .. filename .. ".txt"

    file.CreateDir(ArcCW.PresetPath .. self:GetPresetBase())
    file.Write(filename, str)
    ]]
end

function SWEP:CreatePresetSave()
    if !IsValid(ArcCW.InvHUD) then return end
    local bg = vgui.Create("DFrame", ArcCW.InvHUD)
    bg:SetPos(0, 0)
    bg:SetSize(ScrW(), ScrH())
    bg:SetText("")
    bg:SetTitle("")
    bg:SetDraggable(false)
    bg:ShowCloseButton(false)
    bg.Paint = function(span)
        surface.SetDrawColor(0, 0, 0, 200)
        surface.DrawRect(0, 0, ScrW(), ScrH())
    end
    bg:MakePopup()

    local text = vgui.Create("DTextEntry", bg)
    text:SetSize(ScreenScaleMulti(256), ScreenScaleMulti(26))
    text:Center()
    text:RequestFocus()
    text:SetFont("ArcCW_24")
    text:SetText(self.LastPresetName or "")

    local accept = vgui.Create("DButton", bg)
    accept:SetSize((ScreenScaleMulti(256) - ScreenScaleMulti(2)) / 2, ScreenScaleMulti(14))
    accept:SetText("")
    accept:SetPos((ScrW() - ScreenScaleMulti(256)) / 2, ((ScrH() - ScreenScaleMulti(14)) / 2) + ScreenScaleMulti(26) + ScreenScaleMulti(2))

    accept.OnMousePressed = function(spaa, kc)
        local txt = text:GetText()
        txt = string.sub(txt, 0, 36)
        self.LastPresetName = txt
        self:SavePreset(txt)
        bg:Close()
        bg:Remove()

        ArcCW.InvHUD_FormPresets()
    end

    accept.Paint = function(spaa, w, h)
        if !self:IsValid() then return end
        local Bfg_col = Color(255, 255, 255, 255)
        local Bbg_col = Color(0, 0, 0, 100)

        if spaa:IsHovered() then
            Bbg_col = Color(255, 255, 255, 100)
            Bfg_col = Color(0, 0, 0, 255)
        end

        surface.SetDrawColor(Bbg_col)
        surface.DrawRect(0, 0, w, h)

        local txt = "Save"

        surface.SetTextColor(Bfg_col)
        surface.SetTextPos(ScreenScaleMulti(2), ScreenScaleMulti(1))
        surface.SetFont("ArcCW_12")
        surface.DrawText(txt)
    end

    local cancel = vgui.Create("DButton", bg)
    cancel:SetSize((ScreenScaleMulti(256) - ScreenScaleMulti(2)) / 2, ScreenScaleMulti(14))
    cancel:SetText("")
    cancel:SetPos(((ScrW() - ScreenScaleMulti(256)) / 2) + ScreenScaleMulti(128 + 1), ((ScrH() - ScreenScaleMulti(14)) / 2) + ScreenScaleMulti(26) + ScreenScaleMulti(2))

    cancel.OnMousePressed = function(spaa, kc)
        bg:Close()
        bg:Remove()
    end

    cancel.Paint = function(spaa, w, h)
        if !self:IsValid() then return end
        local Bfg_col = Color(255, 255, 255, 255)
        local Bbg_col = Color(0, 0, 0, 100)

        if spaa:IsHovered() then
            Bbg_col = Color(255, 255, 255, 100)
            Bfg_col = Color(0, 0, 0, 255)
        end

        surface.SetDrawColor(Bbg_col)
        surface.DrawRect(0, 0, w, h)

        local txt = "Cancel"

        surface.SetTextColor(Bfg_col)
        surface.SetTextPos(ScreenScaleMulti(2), ScreenScaleMulti(1))
        surface.SetFont("ArcCW_12")
        surface.DrawText(txt)
    end
end

function SWEP:CreatePresetMenu()
    if !IsValid(ArcCW.InvHUD) then return end

    if !IsValid(ArcCW.InvHUD) then return end
    local bg = vgui.Create("DFrame", ArcCW.InvHUD)
    bg:SetPos(0, 0)
    bg:SetSize(ScrW(), ScrH())
    bg:SetText("")
    bg:SetTitle("")
    bg:SetDraggable(false)
    bg:ShowCloseButton(false)
    bg.Paint = function(span)
        surface.SetDrawColor(0, 0, 0, 200)
        surface.DrawRect(0, 0, ScrW(), ScrH())
    end

    local cancel = vgui.Create("DButton", bg)
    cancel:SetSize(ScreenScaleMulti(128), ScreenScaleMulti(14))
    cancel:SetText("")
    cancel:SetPos((ScrW() - ScreenScaleMulti(128)) / 2, ScrH() - ScreenScaleMulti(32))

    cancel.OnMousePressed = function(spaa, kc)
        bg:Close()
        bg:Remove()
    end

    cancel.Paint = function(spaa, w, h)
        if !self:IsValid() then return end
        local Bfg_col = Color(255, 255, 255, 255)
        local Bbg_col = Color(0, 0, 0, 100)

        if spaa:IsHovered() then
            Bbg_col = Color(255, 255, 255, 100)
            Bfg_col = Color(0, 0, 0, 255)
        end

        surface.SetDrawColor(Bbg_col)
        surface.DrawRect(0, 0, w, h)

        local txt = "Cancel"

        surface.SetTextColor(Bfg_col)
        surface.SetTextPos(ScreenScaleMulti(2), ScreenScaleMulti(1))
        surface.SetFont("ArcCW_12")
        surface.DrawText(txt)
    end

    local presetsmenu = vgui.Create("DScrollPanel", bg)
    presetsmenu:SetText("")
    presetsmenu:SetSize(ScreenScaleMulti(256), ScrH() - ScreenScaleMulti(64))
    presetsmenu:SetPos((ScrW() - ScreenScaleMulti(256)) / 2, ScreenScaleMulti(8))
    presetsmenu.Paint = function(span, w, h)
    end

    local sbar = presetsmenu:GetVBar()
    sbar.Paint = function() end

    sbar.btnUp.Paint = function(span, w, h)
    end

    sbar.btnDown.Paint = function(span, w, h)
    end

    sbar.btnGrip.Paint = function(span, w, h)
        surface.SetDrawColor(255, 255, 255, 255)
        surface.DrawRect(0, 0, w, h)
    end

    local c = 0

    for i, k in pairs(self:GetPresets()) do
        if string.StripExtension(k) == "autosave" then continue end
        local preset = vgui.Create("DButton", presetsmenu)
        preset:SetSize(ScreenScaleMulti(254), ScreenScaleMulti(14))
        preset:SetText("")
        preset:Dock(TOP)
        preset:DockMargin( 0, 0, 0, ScreenScaleMulti(2) )

        preset.PresetName = string.StripExtension(k) --string.sub(k, 1, -5)
        preset.PresetFile = k

        preset.OnMousePressed = function(spaa, kc)
            self.LastPresetName = spaa.PresetName
            self:LoadPreset(spaa.PresetName)
            bg:Close()
            bg:Remove()
        end

        preset.Paint = function(spaa, w, h)
            if !self:IsValid() then return end
            local Bfg_col = Color(255, 255, 255, 255)
            local Bbg_col = Color(0, 0, 0, 100)

            if spaa:IsHovered() then
                Bbg_col = Color(255, 255, 255, 100)
                Bfg_col = Color(0, 0, 0, 255)
            end

            surface.SetDrawColor(Bbg_col)
            surface.DrawRect(0, 0, w, h)

            surface.SetTextColor(Bfg_col)
            surface.SetTextPos(ScreenScaleMulti(2), ScreenScaleMulti(1))
            surface.SetFont("ArcCW_12")
            surface.DrawText(string.upper(spaa.PresetName))
        end

        local close = vgui.Create("DButton", preset)
        close:SetSize(ScreenScaleMulti(16), ScreenScaleMulti(16))
        close:SetText("")
        close:Dock(RIGHT)

        close.OnMousePressed = function(spaa, kc)
            local filename = spaa.PresetFile
            file.Delete(filename)
            preset:Remove()
        end

        close.Paint = function(spaa, w, h)
            if !self:IsValid() or preset:IsHovered() then return end
            local Bfg_col = Color(255, 255, 255, 255)
            local Bbg_col = Color(0, 0, 0, 100)

            if spaa:IsHovered() then
                Bbg_col = Color(255, 255, 255, 100)
                Bfg_col = Color(0, 0, 0, 255)
            end

            surface.SetDrawColor(Bbg_col)
            surface.DrawRect(0, 0, w, h)

            local w_x, h_x = surface.GetTextSize("×")
            surface.SetTextColor(Bfg_col)
            surface.SetTextPos((ScreenScaleMulti(16) - w_x) / 2, (ScreenScaleMulti(16) - h_x) / 2)
            surface.SetFont("ArcCW_12")
            surface.DrawText("×")
        end
        c = c + 1
    end

    if c == 0 then
        local label = vgui.Create("DLabel", presetsmenu)
        label:SetSize(ScreenScaleMulti(254), ScreenScaleMulti(14))
        label:SetText("")
        label:Dock(TOP)
        label:DockMargin( 0, 0, 0, ScreenScaleMulti(2) )

        label.Paint = function(spaa, w, h)
            local Bfg_col = Color(255, 255, 255, 255)

            local txt = "No presets found! Go make some!"

            surface.SetTextColor(Bfg_col)
            surface.SetTextPos(ScreenScaleMulti(2), ScreenScaleMulti(1))
            surface.SetFont("ArcCW_12")
            surface.DrawText(txt)
        end
    end
end

function SWEP:ClosePresetMenu()
end
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_sights.lua:
SWEP.Sighted = false
SWEP.Sprinted = false

local function linearlerp(a, b, c)
    return b + (c - b) * a
end

function SWEP:GetSightTime()
    return self:GetBuff("SightTime")
end

function SWEP:EnterSprint()
    if engine.ActiveGamemode() == "terrortown" and !(TTT2 and self:GetOwner().isSprinting) then return end
    if self:GetState() == ArcCW.STATE_SPRINT then return end
    if self:GetState() == ArcCW.STATE_CUSTOMIZE then return end
    if self:GetTriggerDelta() > 0 then return end
    if self:GetGrenadePrimed() and !self:CanShootWhileSprint() then return end
    self:SetState(ArcCW.STATE_SPRINT)
    self.Sighted = false
    self.Sprinted = true

    local ct = CurTime()

    -- self.SwayScale = 1
    -- self.BobScale = 5

    self:SetShouldHoldType()

    local s = self:CanShootWhileSprint()

    if !s and self:GetNextPrimaryFire() <= ct then
        self:SetNextPrimaryFire(ct)
    end

    local anim = self:SelectAnimation("enter_sprint")
    if anim and !s and self:GetNextSecondaryFire() <= ct then
        self:PlayAnimation(anim, self:GetBuff("SightTime") / self:GetAnimKeyTime(anim, true), true, nil, false, nil, false, false)
    end
end

function SWEP:ExitSprint()
    if self:GetState() == ArcCW.STATE_IDLE then return end

    local delta = self:GetNWSprintDelta()
    local ct = CurTime()

    self:SetState(ArcCW.STATE_IDLE)
    self.Sighted = false
    self.Sprinted = false

    -- self.SwayScale = 1
    -- self.BobScale = 1.5

    self:SetShouldHoldType()

    local s = self:CanShootWhileSprint()

    if !s and self:GetNextPrimaryFire() <= ct then
        self:SetNextPrimaryFire(ct + self:GetSprintTime() * delta)
    end

    if self:GetOwner():KeyDown(IN_ATTACK2) then
        self:EnterSights()
    end

    local anim = self:SelectAnimation("exit_sprint")
    if anim and !s then -- and self:GetNextSecondaryFire() <= ct
        self:PlayAnimation(anim, self:GetBuff("SightTime") / self:GetAnimKeyTime(anim, true), true, nil, false, nil, false, false)
    end
end

-- defined above already?

function SWEP:EnterSights()
    local asight = self:GetActiveSights()
    if !asight then return end
    if self:GetState() != ArcCW.STATE_IDLE then return end
    if self:GetCurrentFiremode().Mode == 0 then return end
    if !self.ReloadInSights and (self:GetReloading() or self:GetOwner():KeyDown(IN_RELOAD)) then return end
    if self.LockSightsInPriorityAnim and self:GetPriorityAnim() then return end
    if self:GetBuff_Hook("Hook_ShouldNotSight") then return end
    if (!game.SinglePlayer() and !IsFirstTimePredicted()) then return end

    self:SetupActiveSights()

    self:SetState(ArcCW.STATE_SIGHTS)
    self.Sighted = true
    self.Sprinted = false

    self:SetShouldHoldType()

    self:MyEmitSound(asight.SwitchToSound or "", 75, math.Rand(95, 105), 0.5, CHAN_AUTO)

    local anim = self:SelectAnimation("enter_sight")
    if anim then
        self:PlayAnimation(anim, 1 * self:GetBuff_Mult("Mult_SightTime"), true)
    end

    self:GetBuff_Hook("Hook_SightToggle", true)
end

function SWEP:ExitSights()
    local asight = self:GetActiveSights()
    if self:GetState() != ArcCW.STATE_SIGHTS then return end
    if self.LockSightsInReload and self:GetReloading() then return end
    if self.LockSightsInPriorityAnim and self:GetPriorityAnim() then return end
    if (!game.SinglePlayer() and !IsFirstTimePredicted()) then return end

    self:SetState(ArcCW.STATE_IDLE)
    self.Sighted = false
    self.Sprinted = false

    self:SetShouldHoldType()

    self:MyEmitSound(asight.SwitchFromSound or "", 75, math.Rand(80, 90), 0.5, CHAN_AUTO)

    if self:InSprint() then
        self:EnterSprint()
    end

    self:MyEmitSound(asight.SwitchFromSound or "", 75, math.Rand(80, 90), 0.5, CHAN_AUTO)

    local anim = self:SelectAnimation("exit_sight")
    if anim then
        self:PlayAnimation(anim, 1 * self:GetBuff_Mult("Mult_SightTime"), true)
    end

    self:GetBuff_Hook("Hook_SightToggle", false)
end

function SWEP:GetSprintTime()
    return self:GetSightTime()
end

SWEP.SightTable = {}
SWEP.SightMagnifications = {}

function SWEP:SetupActiveSights()
    if !self.IronSightStruct then return end
    if self:GetBuff_Hook("Hook_ShouldNotSight") then return false end

    if !self:GetOwner():IsPlayer() then return end

    local sighttable = {}
    local vm = self:GetOwner():GetViewModel()

    if !vm or !vm:IsValid() then return end

    local kbi = self.KeepBaseIrons or true
    local bif = self.BaseIronsFirst or true

    for i, k in pairs(self.Attachments) do
        if !k.Installed then continue end

        local atttbl = ArcCW.AttachmentTable[k.Installed]

        local addsights = self:GetBuff_Stat("AdditionalSights", i)
        if !addsights then continue end

        if !k.KeepBaseIrons and !atttbl.KeepBaseIrons then kbi = false end
        if !k.BaseIronsFirst and !atttbl.BaseIronsFirst then bif = false end

        for _, s in pairs(addsights) do
            local stab = table.Copy(s)

            stab.Slot = i

            if stab.HolosightData then atttbl = stab.HolosightData end

            stab.HolosightData = atttbl

            if atttbl.HolosightMagnification then
                stab.MagnifiedOptic = true
                stab.ScopeMagnification = atttbl.HolosightMagnification or 1

                if atttbl.HolosightMagnificationMin then
                    stab.ScopeMagnificationMin = atttbl.HolosightMagnificationMin
                    stab.ScopeMagnificationMax = atttbl.HolosightMagnificationMax

                    stab.ScopeMagnification = math.max(stab.ScopeMagnificationMax, stab.ScopeMagnificationMin)

                    if !i and self.SightMagnifications[0] then
                        stab.ScopeMagnification = self.SightMagnifications[0]
                    elseif self.SightMagnifications[i] then
                        stab.ScopeMagnification = self.SightMagnifications[i]
                    end
                else
                    stab.ScopeMagnification = atttbl.HolosightMagnification
                end
            end

            if atttbl.Holosight then
                stab.Holosight = true
            end

            if !k.Bone then return end

            local boneid = vm:LookupBone(k.Bone)

            if !boneid then return end

            if CLIENT then

                if atttbl.HolosightPiece then
                    stab.HolosightPiece = (k.HSPElement or {}).Model
                end

                if atttbl.Holosight then
                    stab.HolosightModel = (k.VElement or {}).Model
                end

                local bpos, bang = self:GetFromReference(boneid)

                local offset
                local offset_ang

                local vmang = Angle()

                offset = k.Offset.vpos or Vector(0, 0, 0)

                local attslot = k

                local delta = attslot.SlidePos or 0.5

                local vmelemod = nil
                local slidemod = nil

                for _, e in pairs(self:GetActiveElements()) do
                    local ele = self.AttachmentElements[e]

                    if !ele then continue end

                    if ((ele.AttPosMods or {})[i] or {}).vpos then
                        vmelemod = ele.AttPosMods[i].vpos
                    end

                    if ((ele.AttPosMods or {})[i] or {}).slide then
                        slidemod = ele.AttPosMods[i].slide
                    end

                    -- Refer to sh_model Line 837
                    if ((ele.AttPosMods or {})[i] or {}).SlideAmount then
                        slidemod = ele.AttPosMods[i].SlideAmount
                    end
                end

                offset = vmelemod or attslot.Offset.vpos or Vector()

                if slidemod or attslot.SlideAmount then
                    offset = LerpVector(delta, (slidemod or attslot.SlideAmount).vmin, (slidemod or attslot.SlideAmount).vmax)
                end

                offset_ang = k.Offset.vang or Angle(0, 0, 0)
                offset_ang = offset_ang + (atttbl.OffsetAng or Angle(0, 0, 0))

                offset_ang = k.VMOffsetAng or offset_ang

                bpos, bang = WorldToLocal(Vector(0, 0, 0), Angle(0, 0, 0), bpos, bang)

                bpos = bpos + bang:Forward() * offset.x
                bpos = bpos + bang:Right() * offset.y
                bpos = bpos + bang:Up() * offset.z

                bang:RotateAroundAxis(bang:Right(), offset_ang.p)
                bang:RotateAroundAxis(bang:Up(), -offset_ang.y)
                bang:RotateAroundAxis(bang:Forward(), offset_ang.r)

                local vpos = Vector()

                vpos.y = -bpos.x
                vpos.x = bpos.y
                vpos.z = -bpos.z

                local corpos = (k.CorrectivePos or Vector(0, 0, 0))

                vpos = vpos + bang:Forward() * corpos.x
                vpos = vpos + bang:Right() * corpos.y
                vpos = vpos + bang:Up() * corpos.z

                -- vpos = vpos + (bang:Forward() * s.Pos.x)
                -- vpos = vpos - (bang:Right() * s.Pos.y)
                -- vpos = vpos + (bang:Up() * s.Pos.z)

                vmang:Set(-bang)

                bang.r = -bang.r
                bang.p = -bang.p
                bang.y = -bang.y

                corang = k.CorrectiveAng or Angle(0, 0, 0)

                bang:RotateAroundAxis(bang:Right(), corang.p)
                bang:RotateAroundAxis(bang:Up(), corang.y)
                bang:RotateAroundAxis(bang:Forward(), corang.r)

                -- vpos = LocalToWorld(s.Pos + Vector(0, self.ExtraSightDist or 0, 0), Angle(0, 0, 0), vpos, bang)

                -- local vmf = (vmang):Forward():GetNormalized()
                -- local vmr = (vmang):Right():GetNormalized()
                -- local vmu = (vmang):Up():GetNormalized()

                -- print(" ----- vmf, vmr, vmu")
                -- print(vmf)
                -- print(vmr)
                -- print(vmu)

                -- vmf = -vmf
                -- vmf.x = -vmf.x

                -- local r = vmf.y
                -- vmf.y = vmf.z
                -- vmf.z = r

                -- vmr = -vmr
                -- vmr.y = -vmr.y

                -- -- local r = vmr.y
                -- -- vmr.y = vmr.z
                -- -- vmr.z = r

                -- vmu = -vmu
                -- vmu.z = vmu.z

                -- local evpos = Vector(0, 0, 0)

                -- evpos = evpos + (vmf * (s.Pos.x + k.CorrectivePos.x))
                -- evpos = evpos - (vmr * (s.Pos.y + (self.ExtraSightDist or 0) + k.CorrectivePos.y))
                -- evpos = evpos + (vmu * (s.Pos.z + k.CorrectivePos.z))

                -- print(vmang:Forward())

                local evpos = s.Pos

                evpos = evpos * (k.VMScale or Vector(1, 1, 1))

                if atttbl.Holosight and !atttbl.HolosightMagnification then
                    evpos = evpos + Vector(0, k.ExtraSightDist or self.ExtraSightDist or 0, 0)
                end

                evpos = evpos + (k.CorrectivePos or Vector(0, 0, 0))

                stab.Pos, stab.Ang = vpos, bang

                stab.EVPos = evpos
                stab.EVAng = s.Ang

                if s.GlobalPos then
                    stab.EVPos = Vector(0, 0, 0)
                    stab.Pos = s.Pos
                end

                if s.GlobalAng then
                    stab.Ang = Angle(0, 0, 0)
                end

            end

            table.insert(sighttable, stab)
        end
    end

    if kbi then
        local extra = self.ExtraIrons
        if extra then
            for _, ot in pairs(extra) do
                local t = table.Copy(ot)
                t.IronSight = true
                if bif then
                    table.insert(sighttable, 1, t)
                else
                    table.insert(sighttable, t)
                end
            end
        end

        local t = table.Copy(self:GetBuff_Override("Override_IronSightStruct") or self.IronSightStruct)
        t.IronSight = true
        if bif then
            table.insert(sighttable, 1, t)
        else
            table.insert(sighttable, t)
        end
    end

    self.SightTable = sighttable
end

function SWEP:SwitchActiveSights()
    if table.Count(self.SightTable) == 1 then return end

    self.ActiveSight = (self.ActiveSight or 1) + 1

    if self.ActiveSight > table.Count(self.SightTable) then
        self.ActiveSight = 1
    end

    local asight = self:GetActiveSights()

    local tbl = self:GetBuff_Hook("Hook_SwitchActiveSights", {active = self.ActiveSight, asight = asight})

    self.ActiveSight = tbl.active or self.ActiveSight

    if self.ActiveSight > table.Count(self.SightTable) then
        self.ActiveSight = 1
    end

    local asight2 = self:GetActiveSights()

    if asight2.SwitchToSound then
        self:MyEmitSound(asight2.SwitchToSound, 75, math.Rand(95, 105), 0.5, CHAN_VOICE2)
    end
end

function SWEP:GetActiveSights()
    if (self.ActiveSight or 1) > table.Count(self.SightTable) then
        self.ActiveSight = 1
    end

    if table.Count(self.SightTable) == 0 then
        return self.IronSightStruct
    else
        return self.SightTable[self.ActiveSight or 1]
    end
end

local function ScaleFOVByWidthRatio( fovDegrees, ratio )
    local halfAngleRadians = fovDegrees * ( 0.5 * math.pi / 180 )
    local t = math.tan( halfAngleRadians )
    t = t * ratio
    local retDegrees = ( 180 / math.pi ) * math.atan( t )
    return retDegrees * 2
end

function SWEP:QuickFOVix( fov )
    return ScaleFOVByWidthRatio( fov, (ScrW and ScrW() or 4)/(ScrH and ScrH() or 3)/(4/3) )
end

SWEP.LastTranslateFOV = 0
function SWEP:TranslateFOV(fov)
    local irons = self:GetActiveSights()

    if CLIENT and ArcCW.ConVars["dev_benchgun"]:GetBool() then self.CurrentFOV = fov self.CurrentViewModelFOV = fov return fov end

    self.ApproachFOV = self.ApproachFOV or fov
    self.CurrentFOV = self.CurrentFOV or fov

    -- Only update every tick (this function is called multiple times per tick)
    if self.LastTranslateFOV == UnPredictedCurTime() then return self.CurrentFOV end
    local timed = UnPredictedCurTime() - self.LastTranslateFOV
    self.LastTranslateFOV = UnPredictedCurTime()

    local app_vm = self.ViewModelFOV + self:GetOwner():GetInfoNum("arccw_vm_fov", 0)
    if CLIENT then
        app_vm = app_vm * (LocalPlayer():GetFOV()/GetConVar("fov_desired"):GetInt())
    end

    if self:GetState() == ArcCW.STATE_SIGHTS then
        local asight = self:GetActiveSights()
        local mag = asight and asight.ScopeMagnification or 1

        local delta = math.pow(self:GetSightDelta(), 2)

        if CLIENT then
            local addads = math.Clamp(ArcCW.ConVars["vm_add_ads"]:GetFloat() or 0, -2, 14)
            local csratio = math.Clamp(GetConVar("arccw_cheapscopesv2_ratio"):GetFloat() or 0, 0, 1)
            local pfov = GetConVar("fov_desired"):GetInt()

            if ArcCW.ConVars["cheapscopes"]:GetBool() and mag > 1 then
                fov = (pfov / (asight and asight.Magnification or 1)) / (mag / (1 + csratio * mag) + (addads or 0) / 3)
            else
                fov = ( (pfov / (asight and asight.Magnification or 1)) * (1 - delta)) + (GetConVar("fov_desired"):GetInt() * delta)
            end

            app_vm = irons.ViewModelFOV or 45

            app_vm = app_vm - (asight.MagnifiedOptic and (addads or 0) * 3 or 0)
        end
    end

    self.ApproachFOV = fov

    -- magic number? multiplier of 10 seems similar to previous behavior
    self.CurrentFOV = math.Approach(self.CurrentFOV, self.ApproachFOV, timed * 10 * (self.CurrentFOV - self.ApproachFOV))

    self.CurrentViewModelFOV = self.CurrentViewModelFOV or self.ViewModelFOV
    self.CurrentViewModelFOV = math.Approach(self.CurrentViewModelFOV, app_vm, timed * 10 * (self.CurrentViewModelFOV - app_vm))

    return self.CurrentFOV
end

function SWEP:SetShouldHoldType()
    if self:GetCurrentFiremode().Mode == 0 then
        self:SetHoldType(self.HoldtypeHolstered)
        return
    end

    if IsValid(self:GetOwner()) and self:GetOwner():IsNPC() and self.HoldtypeNPC then
        self:SetHoldType(self.HoldtypeNPC)
        return
    end

    local ht = "normal"

    if self:GetState() == ArcCW.STATE_SIGHTS then
        ht = self:GetBuff_Override("Override_HoldtypeSights", self.HoldtypeSights)
    elseif self:GetState() == ArcCW.STATE_SPRINT then
        if self:CanShootWhileSprint() then
            ht = self:GetBuff_Override("Override_HoldtypeSprintShoot", self.HoldtypeSprintShoot) or self:GetBuff_Override("Override_HoldtypeActive", self.HoldtypeActive)
        else
            ht = self:GetBuff_Override("Override_HoldtypeHolstered", self.HoldtypeHolstered)
        end
    elseif self:GetState() == ArcCW.STATE_CUSTOMIZE then
        ht = self:GetBuff_Override("Override_HoldtypeCustomize", self.HoldtypeCustomize)
    elseif self:GetCurrentFiremode().Mode == 0 then
        ht = self:GetBuff_Override("Override_HoldtypeHolstered", self.HoldtypeHolstered)
    elseif self.Throwing and self:GetGrenadePrimed() then
        ht = self:GetBuff_Override("Override_HoldtypeSights", self.HoldtypeSights)
    else
        ht = self:GetBuff_Override("Override_HoldtypeActive", self.HoldtypeActive)
    end

    self:SetHoldType(ht)
end

--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_think.lua:
return gluapack()()
--lua/weapons/arccw_mkb44h.lua:
return gluapack()()
--lua/weapons/arccw_mw2_f2000.lua:
return gluapack()()
--lua/weapons/arccw_mw2_spas12.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.WeaponCamBone = tag_camera

SWEP.PrintName = "SPAS-12"
SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = "Pump action."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2/c_spas12.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-6, 4, -5),
    ang = Angle(-10, 0, 180),
    scale = 1.125
}
SWEP.WorldModel = "models/weapons/w_shotgun.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 40
SWEP.DamageMin = 20
SWEP.RangeMin = 400 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Range = 700 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 1
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 8 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 16
SWEP.ReducedClipSize = 4

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 3
SWEP.RecoilSide = 3

SWEP.ShotgunReload = true
SWEP.ManualAction = true

SWEP.Delay = 12/30 -- 60 / RPM.
SWEP.Num = 8 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        PrintName = "PUMP",
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 100 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 250 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 50 -- inaccuracy added by moving. Applies in sights as well! Walking speed is considered as "maximum".
SWEP.SightsDispersion = 0 -- dispersion that remains even in sights

SWEP.Primary.Ammo = "buckshot" -- what ammo type the gun uses

SWEP.ShootVol = 120 -- volume of shoot sound
SWEP.ShootPitch = 110 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/shot_ranger.wav"
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/shot_ranger.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/shot_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_m3"
SWEP.ShellModel = "models/shells/shell_12gauge.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.8
SWEP.SightTime = 0.3

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-3.45, -3.9, 1.3),
    Ang = Angle(0.5, 0, 0),
    ViewModelFOV = 65 / 1.18,
    Magnification = 1.18,
}


SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "shotgun"
SWEP.HoldtypeSights = "ar2"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(5.479, -5, -1.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 14.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.ExtraSightDist = 5

SWEP.AttachmentElements = {
    ["grip"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["nors"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        WMBodygroups = {},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
}

SWEP.Attachments = {
	{
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2, 0, 2.35),
            vang = Angle(0, 0, 0),
            wang = Angle(-9.738, 0, 180)
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle_shotgun",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(23, 0, 1.44),
            vang = Angle(0, 0, 0),
            wpos = Vector(26.648, 0.782, -8.042),
            wang = Angle(-9.79, 0, 180)
        },
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "foregrip_mw2exclusive", "ubgl"},
        Bone = "j_pump",
        Offset = {
            vpos = Vector(0, 0, -0.7),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-10.216, 0, 180)
        },
        SlideAmount = {
            vmin = Vector(-4, 0, -0.7),
            vmax = Vector(3, 0, -0.7),
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "j_pump",
        Offset = {
            vpos = Vector(3, -1, 0.5),
            vang = Angle(0, 0, 90),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
		VMScale = Vector(1, 1, 1),
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_shotgun"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.5, -0.45, 0.75),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[3].Installed then
        return anim .. "_fgrip"
    end
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 2/30,
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 19/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 14/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["fire"] = {
        Source = "fire",
        Time = 12/30,
		MinProgress = 0.467,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 12/30,
		MinProgress = 0.467,
    },
    ["cycle"] = {
        Source = "rechamber",
        Time = 28/30,
		MinProgress = 0.469,
        SoundTable = {
						--{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_lift_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_open_v1.wav", 	t = 4/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_close_v1.wav", 	t = 10/30},
					},
        ShellEjectAt = 2/30,
    },
    ["cycle_iron"] = {
        Source = "rechamber_ads",
        Time = 28/30,
		MinProgress = 0.469,
        SoundTable = {
						--{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_lift_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_open_v1.wav", 	t = 1/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_close_v1.wav", 	t = 8/30},
					},
        ShellEjectAt = 2/30,
    },
    ["sgreload_start"] = {
        Source = "reload_start",
        Time = 40/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
		RestoreAmmo = 1, -- loads a shell since the first reload has a shell in animation
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_lift_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_loop_v1.wav", 	t = 24/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0,
		MinProgress = 0.6,
    },
    ["sgreload_insert"] = {
        Source = "reload_loop",
        Time = 26/40,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_loop_v1.wav", 		t = 3/30}},
        TPAnimStartTime = 0.3,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
		MinProgress = 1,
    },
    ["sgreload_finish"] = {
        Source = "reload_finish",
        Time = 30/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_open_v1.wav", 	t = 6/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_close_v1.wav", 	t = 12/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.8,
    },
    ["sgreload_finish_empty"] = {
        Source = "reload_finish",
        Time = 30/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_open_v1.wav", 	t = 6/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_close_v1.wav", 	t = 12/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.8,
    },
---------------------------------------
---------------------------------------
---------------------------------------
	["idle_fgrip"] = {
        Source = "idle_fgrip",
        Time = 2/30,
    },
    ["enter_sprint_fgrip"] = {
        Source = "sprint_in_fgrip",
        Time = 10/30
    },
    ["idle_sprint_fgrip"] = {
        Source = "sprint_loop_fgrip",
        Time = 30/40
    },
    ["exit_sprint_fgrip"] = {
        Source = "sprint_out_fgrip",
        Time = 10/30
    },
    ["draw_fgrip"] = {
        Source = "pullout_fgrip",
        Time = 19/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["holster_fgrip"] = {
        Source = "putaway_fgrip",
        Time = 14/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["fire_fgrip"] = {
        Source = "fire_fgrip",
        Time = 12/30,
		MinProgress = 0.433,
    },
    ["fire_iron_fgrip"] = {
        Source = "fire_ads_fgrip",
        Time = 12/30,
		MinProgress = 0.433,
    },
    ["cycle_fgrip"] = {
        Source = "rechamber_fgrip",
        Time = 28/30,
		MinProgress = 0.469,
        SoundTable = {
						--{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_lift_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_open_v1.wav", 	t = 4/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_close_v1.wav", 	t = 10/30},
					},
        ShellEjectAt = 2/30,
    },
    ["cycle_iron_fgrip"] = {
        Source = "rechamber_ads_fgrip",
        Time = 28/30,
		MinProgress = 0.469,
        SoundTable = {
						--{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_lift_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_open_v1.wav", 	t = 1/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_close_v1.wav", 	t = 8/30},
					},
        ShellEjectAt = 2/30,
    },
    ["sgreload_start_fgrip"] = {
        Source = "reload_start_fgrip",
        Time = 40/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
		RestoreAmmo = 1, -- only used by shotgun empty insert reload
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_lift_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_loop_v1.wav", 	t = 24/30},
					},
    },
    ["sgreload_insert_fgrip"] = {
        Source = "reload_loop_fgrip",
        Time = 26/40,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_loop_v1.wav", 		t = 3/30}},
        TPAnimStartTime = 0.3,
    },
    ["sgreload_finish_fgrip"] = {
        Source = "reload_finish_fgrip",
        Time = 30/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_open_v1.wav", 	t = 6/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_close_v1.wav", 	t = 12/30},
					},
    },
    ["sgreload_finish_empty_fgrip"] = {
        Source = "reload_finish_fgrip",
        Time = 30/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_open_v1.wav", 	t = 6/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_spas12_reload_close_v1.wav", 	t = 12/30},
					},
    },
}

 -- Super fucky temp!
 -- S H U T  U P    A N D   K E E P  T H E M   P I N N E D  D O W N  

-- notverycreativenowarewe
local nvcnaw = 5

 -- hipfire
 -- maximum accuracy
    SWEP.Inaccuracy_Hip_Max_Stand	= nvcnaw
    SWEP.Inaccuracy_Hip_Max_Duck	= nvcnaw
    SWEP.Inaccuracy_Hip_Max_Prone	= nvcnaw
 -- minimum accuracy
    SWEP.Inaccuracy_Hip_Min_Stand   = nvcnaw
    SWEP.Inaccuracy_Hip_Min_Duck    = nvcnaw
    SWEP.Inaccuracy_Hip_Min_Prone   = nvcnaw

 -- sighted fire
 -- yeah
    SWEP.Inaccuracy_ADS = 5.5

 -- inaccuracy when you're... i don't remember
SWEP.Inaccuracy_Add_ADS			= 0
SWEP.Inaccuracy_Add_Hip			= 0
SWEP.Inaccuracy_Add_Move		= 0.1
--lua/weapons/arccw_uc_scarpdw.lua:
return gluapack()()
--lua/weapons/arccw_ud_mini14.lua:
return gluapack()()
--lua/weapons/arccw_ud_car15.lua:
return gluapack()()
--lua/weapons/arccw_ud_m16.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellScale = .666
SWEP.ShellPitch = 100

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "RAYCAR-0"
-- AMCAR stands for (american) Colt Assault Rifle, not Carbine!! ~Fesiug
-- shut up retard ~zenith

-- True name --

SWEP.TrueName = "M16A2"

-- Trivia --
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "Third generation of America's iconic military rifle. Army tests showed that soldiers were more likely to hit a target if they fired multiple shots, but were likely to spray in full-auto and fail to hit anything. As a result, they implemented a ratcheted three-round burst system which limited the maximum burst a soldier could fire to three shots.\n\nWell-rounded gun with no major downsides."
SWEP.Trivia_Manufacturer = "Rayter Arms Industries"
SWEP.Trivia_Calibre = "5.56x45mm NATO"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1959


if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Stoner's Legacy Ltd."
end

local origDesc = SWEP.Trivia_Desc
local m4Desc = "Carbine variant of the M16 rifle. Originally designed in response to design faults in the CAR-15 family, it eventually replaced the M16 across much of the Army for its favorably low weight and comparable performance. The M4 variant has since become one of the most iconic and widespread American service rifles in the modern era.\n\nLight and versatile, but requires discipline to control."
local ncrDesc = "Standard-issue rifle of the New California Republic. Traditionally produced with a semi-automatic receiver, the wooden furniture is more readily replaceable and adds additional recoil control for maximum accuracy.\n\nWell-rounded gun with no major downsides."
local smgDesc = "Submachine gun based on the M16 rifle. Despite its similar appearance, it uses a different mechanism from its parent rifle. More accurate than other submachine guns due to its rifle frame and closed-bolt mechanism."
local blkDesc = "Aftermarket automatic variant of the M16 rifle. The .300 Blackout cartridge has a ballistic performance more akin to the 7.62x39mm Soviet cartridge, with a similarly sized projectile but shorter effective range."
local ukDesc = "AR-15 style rifles are a class of rifles linked to the M16, normally with a semi-automatic fire group for the civilian market. This one, however, has been neutered by authority of the British crown with a manual-action receiver. Bit cringe, innit?"
local arDesc = "Semi-automatic variant of the M16 series of rifles, produced for the civilian market. Wildly popular in the United States, this rifle can be seen in the hands of hobbyists, hunters and mass shooters alike.\n\nWell-rounded gun with no major downsides."
local beoDesc = "Aftermarket semi-automatic variant of the M16 rifle firing an oversized magnum cartridge. Provides extremely high stopping power at close range."
local carDesc = "Carbine variant of the M16 rifle, short enough to be classified as a submachine gun. Its features influenced the US Army's interest in the M4 Carbine, which went on to become their new standard rifle. Due to the small barrel, rifles of this family have high maneuverability but poor range compared to their parent platform."
local a1Desc = "Second generation of America's iconic military rifle. Developed to address problems with the original M16, which suffered notoriously frequent jamming that could get its wielder killed. The revised model evolved a positive reputation with those who used it, and is now a universal symbol of the Vietnam War.\n\nA well-rounded rifle, but difficult to control without trigger discipline - something the A2 model eventually addressed."
local a3Desc = "Variant of the M16A2 with the original full-automatic trigger group, relegated to niche roles in the US Army. Well-rounded gun with no major downsides."
local lmgDesc = "Configuration of the M16 designed for a light machine gun role, used vaguely within the Marine Corps before the adoption of the Minimi. Heavier than the standard platform, but the integral bipod can be deployed onto surfaces for excellent recoil control."
local patriotDesc = "An assault pistol developed for The Boss. The feeder mechanism inside the drum magazine forms an \"∞\" shape.\n\nThe bottomless magazine more than makes up for the awkwardness of the configuration."

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Colt's Manufacturing Company"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_m16.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_m16.mdl"
SWEP.ViewModelFOV = 80
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["556"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["556"].min
SWEP.RangeMin = 50
SWEP.Range = 350 -- 4 shot until ~250m

SWEP.Penetration = ArcCW.UC.StdDmg["556"].pen
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 960
SWEP.PhysBulletMuzzleVelocity = 960

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 20

-- Recoil --

SWEP.Recoil = 0.5
SWEP.RecoilSide = 0.25

SWEP.RecoilRise = 0.1
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 900
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = -3,
        PostBurstDelay = 0.1,
        RunawayBurst = false, -- https://en.wikipedia.org/wiki/Burst_mode_(weapons)
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120
SWEP.ShootPitchVariation = 0

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 4
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 200
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "smg1"
SWEP.MagID = "m16"

SWEP.HeatCapacity = 150
SWEP.HeatDissipation = 10
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 200
SWEP.MalfunctionTakeRound = false

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.9

-- Length --

SWEP.BarrelLength = 48
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, -1, 1.2)
SWEP.HolsterAng = Angle(-8.5, 8, -10)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-2.815, 0, 1.3),
     Ang = Angle(0, 0, 0),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.ActivePos = Vector(0.33, -2, 1.33)
SWEP.ActiveAng = Angle(0, 0, -3)

-- SWEP.CustomizePos = Vector(5, -2, -2)
-- SWEP.CustomizeAng = Angle(15, 25, 0)
SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2.5, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.BarrelOffsetHip = Vector(2, 0, -5)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-8.5, 4, -5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    --scale = .85
}

-- Firing sounds --

local path = ")weapons/arccw_ud/m16/"
local common = ")/arccw_uc/common/"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}

SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/556x45/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-556x45-rif-ext-01.ogg",
    tail .. "fire-dist-556x45-rif-ext-02.ogg",
    tail .. "fire-dist-556x45-rif-ext-03.ogg",
    tail .. "fire-dist-556x45-rif-ext-04.ogg",
    tail .. "fire-dist-556x45-rif-ext-05.ogg",
    tail .. "fire-dist-556x45-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [2] = "m16_bullets1",    [3] = "m16_bullets2"
}

SWEP.DefaultBodygroups = "00000000000000000000000"

SWEP.AttachmentElements = {

    ["ud_m16_mag_20"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["ud_m16_mag_40"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },
    ["ud_m16_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 9}},
    },
    ["ud_m16_mag_60"] = {
        VMBodygroups = {{ind = 2, bg = 3}},
    },
    ["ud_m16_mag_100"] = {
        VMBodygroups = {{ind = 2, bg = 4}},
    },
    ["ud_m16_9mm_mag"] = {
        VMBodygroups = {{ind = 2, bg = 5}},
    },
    ["ud_m16_9mm_mag_32"] = {
        VMBodygroups = {{ind = 2, bg = 6}},
    },
    ["ud_m16_mag_50beo"] = {
        VMBodygroups = {{ind = 2, bg = 8}},
    },
    ["ud_m16_mag_50beo_12"] = {
        VMBodygroups = {{ind = 2, bg = 0}},
    },

    ["upper_flat"] = {
        -- handled by code
        --[[]
        VMBodygroups = {
            {ind = 1, bg = 1},
            {ind = 3, bg = 3}
        },
        ]]
    },
    ["upper_classic"] = {
        VMBodygroups = {
            {ind = 1, bg = 3},
        },
    },
    ["rail_fg"] = {
        VMBodygroups = {{ind = 9, bg = 1}}
    },

    ["stock_231_ex"] = {
        VMBodygroups = {{ind = 7, bg = 1}},
    },
    ["stock_231_in"] = {
        VMBodygroups = {{ind = 7, bg = 2}},
    },
    ["stock_231_tube"] = {
        VMBodygroups = {{ind = 7, bg = 3}},
    },
    ["stock_607_ex"] = {
        VMBodygroups = {{ind = 7, bg = 4}},
    },
    ["stock_607_in"] = {
        VMBodygroups = {{ind = 7, bg = 5}},
    },
    ["stock_608"] = {
        VMBodygroups = {{ind = 7, bg = 6}},
    },
    ["stock_carbine_ex"] = {
        VMBodygroups = {{ind = 7, bg = 7}},
    },
    ["stock_carbine_in"] = {
        VMBodygroups = {{ind = 7, bg = 8}},
    },
    ["stock_wood"] = {
        VMBodygroups = {{ind = 7, bg = 9}},
    },
    ["stock_adar"] = {
        VMBodygroups = {
            {ind = 7, bg = 10},
            {ind = 8, bg = 4}
        },
    },
    ["stock_ru556"] = {
        VMBodygroups = {{ind = 7, bg = 11}},
    },
    ["grip_ergo"] = {
        VMBodygroups = {{ind = 8, bg = 1}},
    },
    ["grip_skel"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["grip_wood"] = {
        VMBodygroups = {{ind = 8, bg = 3}},
    },

    ["gasblock_carbine"] = {
        VMBodygroups = {{ind = 6, bg = 3}},
    },
    ["fs_adar"] = {
        VMBodygroups = {{ind = 6, bg = 4}},
    },
    ["remove_lug"] = {
        VMBodygroups = {{ind = 12, bg = 1}},
    },

    ["mount_14"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0, 0.3, 17.5),
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["mount_11"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.6, -0.3, 14.2),
                vang = Angle(90, 0, 0),
            },
        },
    },
    ["mount_tactical"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(-1, -.35, 11.5),
                vang = Angle(-90, 180, 0),
                wang = Angle(90, 0, 0),
            },
        },
        ExcludeFlags = {}
    },
    -- ["mount_tactical_short"] = {
    --     AttPosMods = {
    --         [8] = {
    --             vpos = Vector(-1, -.35, 11.5),
    --             vang = Angle(-90, 180, 0),
    --             wang = Angle(90, 0, 0),
    --         },
    --     },
    --     AttPosMods_Priority = 2,
    --     RequireFlags = {"barrel_short"}
    -- },

    ["barrel_14"] = {
        VMBodygroups = {
            {ind = 4, bg = 1},
            {ind = 6, bg = 2},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.33, 18.85),
                vang = Angle(90, 0, -90),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_11"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 2},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.33, 15.7),
                vang = Angle(90, 0, -90),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_fpw"] = {
        VMBodygroups = {
            {ind = 4, bg = 2},
            {ind = 6, bg = 5},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.07, 21.3),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_11_ru556"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 5},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.07, 21.3),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(1.15, 0, 17.9),
                vang = Angle(90, 0, 0),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },

    ["hg_m16a4_ris"] = {
        VMBodygroups = {
            {ind = 5, bg = 2},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(-0.1, 1.05, 12),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(1.41, -.1, 20),
                vang = Angle(90, 0, 0),
            },
            [16] = {
                vpos = Vector(0, -1.75, 21.75), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["hg_m4a1_ris"] = {
        VMBodygroups = {
            {ind = 5, bg = 5},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 1.4, 12),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(-1.41, -.2, 14),
                vang = Angle(90, 0, 180),
            },
            [15] = {
                vpos = Vector(0, -1.75, 15.75), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["hg_ru556"] = {
        -- VMBodygroups = {
        --     {ind = 5, bg = 7},
        -- },
        AttPosMods = {
            -- [5] = {
            --     vpos = Vector(-0.1, 1.05, 12),
            --     vang = Angle(90, 0, -90),
            -- },
            -- [6] = {
            --     vpos = Vector(1.1, 0, 14),
            --     vang = Angle(90, 0, 0),
            -- },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["hg_m4a1"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        }
    },
    ["hg_cqbr"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        },
    },
    ["hg_adar"] = {
        VMBodygroups = {
            {ind = 5, bg = 8},
        },
    },
    ["hg_fpw"] = {
        VMBodygroups = {
            {ind = 5, bg = 6},
            --{ind = 6, bg = 4},
        }
    },
    ["hg_m16a1"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        }
    },
    ["hg_m16a1_wood"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        },
        VMSkin = 1
    },
    ["ud_m16_hg_heat"] = {
        VMElements = {
            {
                Model = "models/weapons/arccw/atts/m203iron.mdl",
                Bone = "m16_parent",
                Scale = Vector(1, 1, 1),
                Offset = {
                    pos = Vector(0, -1.2, 14.9),
                    ang = Angle(90, 0, -90),
                }
            }
        },
        UC_UseClassicM203Mount = true,
    },
    ["hg_m605"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
            {ind = 4, bg = 1},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.05, 25.58),
                vang = Angle(90, 0, -90),
            },
            [6] = { -- also has no rail
                vpos = Vector(0, 0.9, 22.2),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["hg_m605_wood"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
            {ind = 4, bg = 1},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, 0, 25),
                vang = Angle(90, 0, -90),
            },
            [6] = { -- also has no rail
                vpos = Vector(0, 0.8, 22),
                vang = Angle(90, 0, -90),
            },
        },
        VMSkin = 1
    },
    ["hg_lmg"] = {
        VMBodygroups = {
            {ind = 5, bg = 3},
        }
    },
    ["hg_sd"] = {
        VMBodygroups = {
            {ind = 5, bg = 9},
            {ind = 4, bg = 3},
            {ind = 6, bg = 5}
        },
        AttPosMods = { -- no rail, just pretend it's mounted to something
            -- [8] = {
            --     vpos = Vector(0, 0.7, 17.5),
            --     vang = Angle(90, 0, -90),
            -- },
            [16] = {
                vpos = Vector(0, -1.65, 11.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },

    ["ud_m16_upper_charm"] = {
        AttPosMods = {
            [1] = {
                vpos = Vector(0, -4, 3),
                vang = Angle(90, 0, -90),
                SlideAmount = {
                    vmin = Vector(0, -3.4, 3 - 1.5),
                    vmax = Vector(0, -3.4, 3 + 1.5),
                }
            },
        },
    },
    ["ud_m16_upper_charm2"] = {
        AttPosMods = {
            [1] = {
                vpos = Vector(0, -4.1, 3.5),
                vang = Angle(90, 0, -90),
                SlideAmount = {
                    vmin = Vector(0, -3.5, 3.5 - 2),
                    vmax = Vector(0, -3.5, 3.5 + 1),
                }
            },
        },
    },
    ["bravo_dicks_going_fart"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.25, -1.4, 12),
                vang = Angle(90, 0, 90),
            },
        },
    },

    ---- Cut content
    ["hg_stub"] = {
        VMBodygroups = {
            {ind = 5, bg = 7},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.35, 7),
                vang = Angle(90, 0, -90)
            },
            [6] = {
                vpos = Vector(1.1, -0.4, 9),
                vang = Angle(90, 0, 0),
            },
        }
    },
    ["barrel_stub"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 4},
        }
    },
    ["hg_smg"] = {
        VMBodygroups = {
            {ind = 5, bg = 0},
        }
    },
    ["m16_strap"] = {
        VMBodygroups = {
             {ind = 13, bg = 1},
        },
    },
}

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

local sr_pmag = {
	[path .. "magout_empty.ogg"] = path .. "pmagout.ogg",
	[path .. "magin.ogg"] = path .. "pmagin.ogg",
}

local pmag1, pmag2 = {}, {"ud_m16_pmag"}
SWEP.Hook_TranslateSound = function(wep, data)
	if wep:CheckFlags(pmag1, pmag2) and sr_pmag[data] then return sr_pmag[data] end
end

local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}

SWEP.Animations = {
    ["ready"] = {
        Source = "fix",
        Time = 45 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chamber.ogg",  t = 0.5},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = ratel, t = 0.2},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 20 / 30,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = ratel, t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 20 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["trigger"] = {
        Source = "idle",
        MinProgress = .1,
        SoundTable = {
            {s = ")weapons/arccw_ud/uzi/prefire.ogg",         t = 0, c = ci},
        },
    },
    ["fire"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },

    ["fire_cycle"] = {
        Source = "fire",
        Time = 13 / 30,
    },

    ["cycle"] = {
        Source = "fix",
        Time = 36 / 30 * 0.7,
        ShellEjectAt = 0.3,
        LHIK = true,
        LHIKIn = 0.3 * 0.7,
        LHIKEaseIn = 0.4 * 0.7,
        LHIKEaseOut = 0.15 * 0.7,
        LHIKOut = 0.4 * 0.7,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.05},
            {s = common .. "cloth_4.ogg",  t = 0.2},
            {s = path .. "chamber.ogg",  t = 0.3},
        },
    },

    ["fix"] = {
        Source = "fix",
        Time = 45 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chamber.ogg",  t = 0.5},
        },
    },
    ["fix_empty"] = {
        Source = "fix_empty",
        Time = 45 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "ch_forward_empty.ogg",  t = 0.5},
        },
    },

    -- 30 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2, v = 0.5},
            {s = ratel, t = 0.25},
            {s = path .. "magout_empty.ogg", 	 t = 0.23},
            {s = ratel, t = 0.5},
            {s = path .. "struggle.ogg",    t = 1, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = common .. "grab-polymer.ogg", t = 1.77, v = 0.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.7},
            {s = common .. "shoulder.ogg", t = 1.8},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 87 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 0.25},
            {s = common .. "magpouch_gear.ogg", t = 0.1, v = 0.5},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = ratel, t = 0.5},
            {s = common .. "rifle_magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.39},
            {s = path .. "boltdrop.ogg", t = 1.7},
            {s = ratel, t = 1.9},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.0},
            {s = common .. "grab-polymer.ogg", t = 2.1, v = 0.35},
            {s = common .. "shoulder.ogg", t = 2.1},
        },
    },

    -- 20 Round Reloads --

    ["reload_20"] = {
        Source = "reload_20",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 0.05},
            {s = path .. "magout_empty.ogg", 	 t = 0.09},
            {s = common .. "magpouch_gear.ogg", t = 0.1},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 0.85},
            {s = path .. "struggle.ogg",    t = 0.9, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = rottle,  t = 1.1},
            {s = ratel, t = 1.125},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.65},
            {s = common .. "grab-polymer.ogg", t = 1.7, v = 0.25},
            {s = common .. "shoulder.ogg", t = 1.75},
        },
    },
    ["reload_empty_20"] = {
        Source = "reload_empty_20",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.8,
        SoundTable = {
            {s = common .. "magpouch_gear.ogg", t = 0},
            {s = rottle, t = 0.01},
            {s = ratel, t = 0.05},
            {s = path .. "magout_empty.ogg", 	 t = 0.075},
            {s = rottle, t = 0.75},
            {s = ratel, t = 0.9},
            {s = common .. "rifle_magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.8, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.85},
            {s = rottle, t = 1.4},
            {s = ratel, t = 1.4},
            {s = path .. "chamber_press.ogg", t = 1.72},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.95},
            {s = common .. "grab-polymer.ogg", t = 2.075, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.13},
        },
    },

    -- 40 Round Reloads --

    ["reload_40"] = {
        Source = "reload_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = ratel, t = 0.1},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = common .. "magpouch_gear.ogg", t = 0.25},
            {s = rottle, t = 0.75},
            {s = ratel, t = 0.8},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.0},
            {s = rottle, t = 1.1},
            {s = ratel, t = 1.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.65},
            {s = common .. "shoulder.ogg", t = 1.75},
        },
    },
    ["reload_empty_40"] = {
        Source = "reload_empty_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 85 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.8,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = common .. "magpouch_gear.ogg", t = 0.25},
            {s = rottle,  t = 0.75},
            {s = common .. "rifle_magdrop.ogg",  t = 0.8},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = rottle,  t = 1.475},
            {s = ratel,  t = 1.475},
            {s = path .. "boltdrop.ogg", t = 1.78},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.1},
            {s = common .. "shoulder.ogg", t = 2.2},
        },
    },

    -- 60 Round Reloads --

    ["reload_60"] = {
        Source = "reload_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2},
            {s = path .. "magout_empty.ogg", 	 t = 0.25},
            {s = rottle, t = 0.75},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.1},
            {s = rottle, t = 1.1},
            {s = common .. "grab-polymer.ogg", t = 1.78, v = 0.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.8},
            {s = common .. "shoulder.ogg", t = 1.9},
        },
    },
    ["reload_empty_60"] = {
        Source = "reload_empty_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 85 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.8,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2},
            {s = path .. "magout_empty.ogg", 	 t = 0.25},
            {s = rottle, t = 0.75},
            {s = common .. "rifle_magdrop.ogg",  t = 0.8},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.1},
            {s = rottle, t = 1.475},
            {s = ratel, t = 1.475},
            {s = path .. "boltdrop.ogg", t = 1.8},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.1},
            {s = common .. "grab-polymer.ogg", t = 2.15, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.2},
        },
    },

    -- 100 Round Reloads --

    ["reload_100"] = {
        Source = "reload_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.75,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = rottle, t = 0.75},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = rottle, t = 1.1},
            {s = path .. "magtap.ogg",   t = 1.59},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.8},
            {s = common .. "grab-polymer.ogg", t = 1.85, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.0},
        },
    },
    ["reload_empty_100"] = {
        Source = "reload_empty_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 90 / 30,
        MinProgress = 2.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = rottle, t = 0.75},
            {s = common .. "magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = path .. "magtap.ogg",   t = 1.59},
            {s = rottle, t = 1.75},
            {s = path .. "chback.ogg",   t = 2.0},
            {s = common .. "cloth_4.ogg",  t = 2.05},
            {s = path .. "chamber.ogg",  t = 2.22},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.5},
            {s = common .. "grab-polymer.ogg", t = 2.55, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.6},
        },
    },

    -- 9mm 32 Round Reloads --

    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 70 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.15},
            {s = "weapons/arccw_ud/uzi/" .. "magout.ogg", 	 t = 16 / 30},
            {s = rottle, t = 0.75},
            {s = "weapons/arccw_ud/uzi/" .. "magin.ogg",    t = 27 / 30},
            {s = rottle, t = 1.1},
            {s = common .. "magpouchin.ogg", t = 1.55},
            {s = common .. "shoulder.ogg", t = 1.93},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_empty_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 80 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = "weapons/arccw_ud/uzi/" .. "magout.ogg", 	 t = 0.1},
            {s = common .. "magpouch.ogg", t = 0.45},
            {s = rottle, t = 0.75},
            {s = "weapons/arccw_ud/uzi/" .. "magin.ogg",    t = 0.8},
            {s = path .. "chamber_press.ogg", t = 1.7},
            {s = rottle, t = 1.39},
            {s = common .. "shoulder.ogg", t = 2.15},
        },
    },


    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_inspect_empty"] = {
        Source = "inspect_enter_empty",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "inspect_loop_empty",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999,
    },
    ["exit_inspect_empty"] = {
        Source = "inspect_exit_empty",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999,
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
}

local hgLookup = {
    ["default"]     = {0,4,0},
    ["tactical"]    = {2,5,0},
    ["a1"]          = {1,1,1},
    ["heat"]          = {10,10,1},
    ["heatm203"]          = {11,11,1},
    ["wood"]          = {1,1,1},
    ["lmg"]          = {3,3,1},
    ["fpw"]          = {6,6,2},
    ["ru556"]          = {7,7,3},
    ["adar"]          = {8,8,2},
    ["hk416"]          = {9,9,3},
    ["607"]          = {9,9,0},
}
-- Structure: 20in appearance, 14/11in appearance, gas block mode
-- Gas block modes: 0 standard, 1 always at 20" position, 2 at ADAR position when short, 3 at ADAR position when short and not flat

local barrLookup = {
    ["sd"] = -1,
    ["20in"] = 0,
    ["14in"] = 1,
    ["fpw"] = 1,
    ["10in"] = 2,
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    local atts = wep.Attachments
    if !IsValid(vm) then return end

    local barrel = string.Replace(atts[2].Installed or "20in","ud_m16_barrel_","")
    local barr = barrLookup[barrel]
    local hg = string.Replace(atts[3].Installed or "default","ud_m16_hg_","")
    hg = string.Replace(hg,"uf_m16_hg_","")

    local optic = atts[1].Installed
    local muzz = atts[4].Installed or barrel == "sd"
    local laser = atts[8].Installed
    local fs = atts[16].Installed
    local retro = wep:GetBuff_Override("TopMount")

    -- Retro rail
    if optic then
        if retro then
            -- Raised rail (retro)
            vm:SetBodygroup(3, retro)
        else
            -- Flat rail
            vm:SetBodygroup(1, 1)
            vm:SetBodygroup(3, 2)
        end
    end

    -- Dynamic handguard
    if barr == -1 then
        vm:SetBodygroup(5,9)
    elseif barr == 0 and hgLookup[hg] then
        vm:SetBodygroup(5,hgLookup[hg][1])
    elseif hgLookup[hg] then
        vm:SetBodygroup(5,hgLookup[hg][2])
    else
        vm:SetBodygroup(5,9)
    end

    -- Gas block
    if barrel == "sd" or (atts[6].Installed == "ud_m16_receiver_fpw" and barr > 0) then
        vm:SetBodygroup(6,5)
    else
        local gbPos = hgLookup[hg] and hgLookup[hg][3] or 0
        local lwr = atts[6].Installed
        local flat = (
            wep:GetBuff_Override("FrontSight")
            or atts[6].Installed == "ud_m16_receiver_fpw"
            or (optic and fs ~= "ud_m16_charm_fs" and !(wep:GetBuff_Override("IronSight") or wep:GetBuff_Override("TopMount")))
        ) and 1 or 0

        if gbPos == 1 or barr == 0 then
            vm:SetBodygroup(6, 0 + flat)
        elseif gbPos == 2 then
            vm:SetBodygroup(6, 4 + flat * 2)
        elseif gbPos == 3 then
            vm:SetBodygroup(6, 4 - flat)
        else
            vm:SetBodygroup(6, 2 + flat)
        end
    end

    -- Default flash hider
    if !muzz then
        if barr == 0 then
            vm:SetBodygroup(11,1)
        elseif barr == 1 then
            vm:SetBodygroup(11,2)
        else
            vm:SetBodygroup(11,3)
        end
    else
        vm:SetBodygroup(11,0)
    end

    -- Tactical clamp
    if laser and hg ~= "tactical" then
        if barr == 0 then
            vm:SetBodygroup(10,1)
        elseif barr == 1 then
            vm:SetBodygroup(10,3)
        else
            vm:SetBodygroup(10,2)
        end
    else
        vm:SetBodygroup(10,0)
    end

    -- Disable tac rail element with tac hg
    if hg == "tactical" and (atts[7].Installed or atts[18].Installed) then
        vm:SetBodygroup(9,0)
    end

    -- .50 Beowulf magazines
    if atts[5].Installed == "ud_m16_receiver_50beo" and !atts[11].Installed then
        vm:SetBodygroup(2, 8)
    end
end

-- RAYCAR-0, rifle barrel
local bar0_fake = "First variation of the RAYCAR rifle. Tests showed that users were more likely to hit a target if they fired multiple shots, but were likely to spray in full-auto and fail to hit anything. As a result, a ratcheted three-round burst system was implemented which limited the maximum burst a user could fire to three shots.\n\nWell-rounded gun with no major downsides."

-- RAYCAR-1, carbine barrel
local bar1_fake = "Second variation of the RAYCAR rifle. It eventually replaced the RAYCAR-0 across much of the Army for its favorably low weight and comparable performance. The -1 variant has since become one of the most iconic and widespread American service rifles in the modern era.\n\nLight and versatile, but requires discipline to control."

-- RAYCAR-2, commando barrel
local bar2_fake = "Third variation of the RAYCAR rifle. Developed with assistance from the Navy, the \"commando\" barrel allows for the weapon to be very compact, even short enough to be classified as a submachine gun, enhancing usability in vehicles and in enclosed spaces.\n\nVery lightweight and manuverable, but with very aggressive recoil to match."

-- RAYPAW :3
local smgDesc_fake = "Submachine gun based on the RAYCAR rifle. Despite its similar appearance, it uses a different mechanism from its parent rifle.\n\nMore accurate than other submachine guns due to its rifle frame and closed-bolt mechanism."

-- RBY50
local beoDesc_fake = "Aftermarket semi-automatic variant of the RAYCAR rifle firing an oversized magnum cartridge.\n\nProvides extremely high stopping power at close range."

-- RBY300
local blkDesc_fake = "Aftermarket automatic variant of the RAYCAR rifle. The .300 Blackout cartridge has a ballistic performance more akin to the 7.62x39mm Soviet cartridge, with a similarly sized projectile but shorter effective range.\n\nSlightly more inaccurate, made up with a higher stopping power and a subsonic projectile."

-- UKCAR
local ukDesc_fake = "Normally, RAYCAR style rifles are imported with a semi-automatic fire group for the civilian market. This one, however, has been neutered by authority of the British crown with a manual-action receiver.\n\nBit cringe, innit?"

-- RAYSAW
local lmgDesc_fake = "Configuration of the RAYCAR designed for a light machine gun role, used vaguely within the Marine Corps before the adoption of the Minimi.\n\nHeavier than the standard platform, but the integral bipod can be deployed onto surfaces for excellent recoil control."

-- Fallout barrel or sumn idk
local ncrDesc_fake = "Standard-issue rifle of the New California Republic. Traditionally produced with a semi-automatic receiver, the wooden furniture is more readily replaceable and adds additional recoil control for maximum accuracy.\n\nWell-rounded gun with no major downsides."

-- Patriot easter egg. Is it overpowered? I don't think so, a configuration like this is already pretty uncontrollable and imprecise as is, and overheating is the new magazine.
local a1, a2 = {}, {"patr1", "patr2", "patr3", "patr4", "patr5"}
SWEP.O_Hook_Override_BottomlessClip = function(wep, data)
    if wep:CheckFlags(a1, a2) then
        data.current = true
    end
end


SWEP.Hook_NameChange = function(wep, name)
    local trueNames = GetConVar("arccw_truenames"):GetBool()
    local atts = wep.Attachments
    local flat = atts[1].Installed and !wep:GetBuff_Override("TopMount")

    local barrel = string.Replace(atts[2].Installed or "20in","ud_m16_barrel_","")
    local barr = barrLookup[barrel]
    local hg = string.Replace(atts[3].Installed or "default","ud_m16_hg_","")
    local upr = string.Replace(atts[5].Installed or "default","ud_m16_receiver_","")
    local lwr = string.Replace(atts[6].Installed or "default","ud_m16_receiver_","")

    if wep:CheckFlags(a1, a2) then -- Patriot configuration
        wep.Trivia_Desc = patriotDesc
        return "The Patriot"
    elseif !trueNames then -- Custom lore-based fake names
        local pre = (lwr == "auto" and "AM" or "RAY")
        if upr == "9mm" then
            local sd = (barr == -1)
            wep.Trivia_Desc = smgDesc_fake
            if flat then
                return (sd and pre .. "SSMG-NG") or pre .. "PAW-" .. barr .. "NG"
            end
            return (sd and pre .. "SSMG") or pre .. "PAW-" .. barr
        elseif upr == "50beo" then
            wep.Trivia_Desc = beoDesc_fake
            return "RBY"--50"
        elseif upr == "300blk" then
            wep.Trivia_Desc = blkDesc_fake
            return "RBY"--300"
        elseif lwr == "fpw" then
            wep.Trivia_Desc = bar1_fake
            return pre .. "FPW"
        elseif lwr == "cali" then
            wep.Trivia_Desc = ukDesc_fake
            return "UKCAR"
        else
            if barr == 0 then
                if hg == "lmg" then
                    wep.Trivia_Desc = lmgDesc_fake
                    return pre .. "SAW" .. (flat and "-NG" or "")
                elseif flat then
                    return pre .. "CAR-0NG"
                else
                    wep.Trivia_Desc = bar0_fake
                    return pre .. "CAR-0"
                end
            elseif barr == 1 then
                wep.Trivia_Desc = bar1_fake
                if flat then
                    return pre .. "CAR-1NG"
                end
                return pre .. "CAR-1"
            elseif barr == 2 then
                wep.Trivia_Desc = bar2_fake
                if flat then
                    return pre .. "CAR-2NG"
                end
                return pre .. "CAR-2"
            end
        end

        wep.Trivia_Desc = bar0_fake
        return pre .. "CAR-0"

    else

        if upr == "9mm" then
            local sd = (barr == -1)
            wep.Trivia_Desc = smgDesc
            if lwr == "semi" then
                return "AR-15 9mm"
            elseif flat then
                return "R0991"
            end
            return "R0635"

        end

        if lwr == "auto" then
            if upr == "a1" then
                wep.Trivia_Desc = a1Desc
                if barr == 0 then
                    return "M16A1"
                elseif barr == 1 then
                    return "M605"
                end
                wep.Trivia_Desc = carDesc
                return "CAR-15"
            end
            if barr == 0 then
                wep.Trivia_Desc = a3Desc
                if hg == "lmg" then
                    wep.Trivia_Desc = lmgDesc
                    return "Colt LMG"
                elseif flat and hg == "tactical" then
                    return "R0901"
                end
                return "M16A3"
            elseif barr == 1 then
                wep.Trivia_Desc = m4Desc
                if flat then
                    return "M4A1"
                end
                return "XM4"
            else
                wep.Trivia_Desc = carDesc
                if flat then
                    wep.Trivia_Desc = m4Desc
                    if upr == "300blk" then
                        return "Mk 18"
                    end
                    return "Mk 18 Mod 0"
                end
                return "CAR-15"
            end
        elseif lwr == "semi" or upr == "50beo" then
            wep.Trivia_Desc = arDesc
            if hg == "wood" then
                wep.Trivia_Desc = ncrDesc
                if barr == 0 then
                    return "Service Rifle"
                end
                return "Service Carbine"
            elseif flat and hg == "adar" then
                return "ADAR 2-15"
            elseif barr > 0 then
                if barr == 2 and atts[10].Installed == "ud_m16_stock_buffer" then
                    return "AR-15 Pistol"
                elseif upr == "a1" and barr == 1 then
                    return "CRXM177E2B"
                else
                    return "AR-15 SBR"
                end
            elseif upr == "a1" then
                return "CRM16A1"
            end
            return "AR-15"
        elseif lwr == "fpw" then
            wep.Trivia_Desc = m4Desc
            return "M231 FPW"
        elseif lwr == "cali" then
            wep.Trivia_Desc = ukDesc
            return "AR-15GB"
        else
            wep.Trivia_Desc = origDesc
            if barr == 0 and flat then
                return "M16A4"
            elseif barr == 1 then
                wep.Trivia_Desc = m4Desc
                return "M4 Carbine"
            elseif barr == 2 then
                return "M16 Commando"
            end
        end

        wep.Trivia_Desc = origDesc
        return "M16A2"

    end
end



SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        InstalledEles = {"upper_flat"},
        Slot = {"optic","optic_sniper","ud_m16_rs"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.75, 3),
            vang = Angle(90, 0, -90),
        },
        SlideAmount = {
            vmin = Vector(0, -1.6, 3 - 2),
            vmax = Vector(0, -1.6, 3 + 1),
        },
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "20\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_barrel_20.png", "smooth mips"),
        Slot = "ud_m16_blen",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Ribbed Handguard",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_hg_ribbed.png", "smooth mips"),
        Slot = "ud_m16_hg",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.63, -0.41),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd"}
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle", "ud_m16_muzzle"},
        Bone = "m16_parent",
        VMScale = Vector(1, 1, 1),
        WMScale = VMScale,
        Offset = {
            vpos = Vector(0, -.33, 23.27),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd", "m16_stub"},
    },
    {
        PrintName = "Upper Receiver",
        DefaultAttName = "5.56x45mm Upper",
        DefaultAttIcon = Material("entities/att/uc_bullets/556x45.png", "smooth mips"),
        Slot = {"ud_m16_receiver"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"ud_m16_fpw"}
    },
    {
        PrintName = "Lower Receiver",
        DefaultAttName = "Burst Lower",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_receiver_default.png", "smooth mips"),
        Slot = {"ud_m16_fcg"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"m16_nolower"}
    },
    {
        PrintName = "Underbarrel",
        Slot = "foregrip",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, 6, 11),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"m16_lmg", "m16_stub"},
        SlideAmount = {
            vmin = Vector(0, .65, 11.5),
            vmax = Vector(0, .65, 7.5),
        },
		MergeSlots = {18},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, 0.3, 21.25),
            vang = Angle(90, 0, -90),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ud_m16_grip"},
        DefaultAttName = "Standard Grip",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_grip_default.png", "smooth mips"),
        ExcludeFlags = {"m16_adar"}
    },
    {
        PrintName = "Stock",
        Slot = {"ud_m16_stock","go_stock"},
        DefaultAttName = "Full Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_stock_default.png", "smooth mips"),
        -- GSO support
        InstalledEles = {"stock_231_tube"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(-0.02, 0, -2.7),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Magazine",
        Slot = {"ud_m16_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_mag_30.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Front Sight",
        Slot = {"ud_m16_fs", "ud_m16_charm"},
        FreeSlot = true,
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.65, 16.75), -- 21.75 or 15.75
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sight_magpul"}
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"}, -- "ud_m16_charm"
        FreeSlot = true,
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0.48, 0.5, 3.9),
            vang = Angle(90, 0, -90),
        },
        -- MergeSlots = {17}
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -0.4, 7.2),
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"m16_lmg", "m16_stub"},
    }
}
--lua/weapons/arccw_ud_m16.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellScale = .666
SWEP.ShellPitch = 100

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "RAYCAR-0"
-- AMCAR stands for (american) Colt Assault Rifle, not Carbine!! ~Fesiug
-- shut up retard ~zenith

-- True name --

SWEP.TrueName = "M16A2"

-- Trivia --
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "Third generation of America's iconic military rifle. Army tests showed that soldiers were more likely to hit a target if they fired multiple shots, but were likely to spray in full-auto and fail to hit anything. As a result, they implemented a ratcheted three-round burst system which limited the maximum burst a soldier could fire to three shots.\n\nWell-rounded gun with no major downsides."
SWEP.Trivia_Manufacturer = "Rayter Arms Industries"
SWEP.Trivia_Calibre = "5.56x45mm NATO"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1959


if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Stoner's Legacy Ltd."
end

local origDesc = SWEP.Trivia_Desc
local m4Desc = "Carbine variant of the M16 rifle. Originally designed in response to design faults in the CAR-15 family, it eventually replaced the M16 across much of the Army for its favorably low weight and comparable performance. The M4 variant has since become one of the most iconic and widespread American service rifles in the modern era.\n\nLight and versatile, but requires discipline to control."
local ncrDesc = "Standard-issue rifle of the New California Republic. Traditionally produced with a semi-automatic receiver, the wooden furniture is more readily replaceable and adds additional recoil control for maximum accuracy.\n\nWell-rounded gun with no major downsides."
local smgDesc = "Submachine gun based on the M16 rifle. Despite its similar appearance, it uses a different mechanism from its parent rifle. More accurate than other submachine guns due to its rifle frame and closed-bolt mechanism."
local blkDesc = "Aftermarket automatic variant of the M16 rifle. The .300 Blackout cartridge has a ballistic performance more akin to the 7.62x39mm Soviet cartridge, with a similarly sized projectile but shorter effective range."
local ukDesc = "AR-15 style rifles are a class of rifles linked to the M16, normally with a semi-automatic fire group for the civilian market. This one, however, has been neutered by authority of the British crown with a manual-action receiver. Bit cringe, innit?"
local arDesc = "Semi-automatic variant of the M16 series of rifles, produced for the civilian market. Wildly popular in the United States, this rifle can be seen in the hands of hobbyists, hunters and mass shooters alike.\n\nWell-rounded gun with no major downsides."
local beoDesc = "Aftermarket semi-automatic variant of the M16 rifle firing an oversized magnum cartridge. Provides extremely high stopping power at close range."
local carDesc = "Carbine variant of the M16 rifle, short enough to be classified as a submachine gun. Its features influenced the US Army's interest in the M4 Carbine, which went on to become their new standard rifle. Due to the small barrel, rifles of this family have high maneuverability but poor range compared to their parent platform."
local a1Desc = "Second generation of America's iconic military rifle. Developed to address problems with the original M16, which suffered notoriously frequent jamming that could get its wielder killed. The revised model evolved a positive reputation with those who used it, and is now a universal symbol of the Vietnam War.\n\nA well-rounded rifle, but difficult to control without trigger discipline - something the A2 model eventually addressed."
local a3Desc = "Variant of the M16A2 with the original full-automatic trigger group, relegated to niche roles in the US Army. Well-rounded gun with no major downsides."
local lmgDesc = "Configuration of the M16 designed for a light machine gun role, used vaguely within the Marine Corps before the adoption of the Minimi. Heavier than the standard platform, but the integral bipod can be deployed onto surfaces for excellent recoil control."
local patriotDesc = "An assault pistol developed for The Boss. The feeder mechanism inside the drum magazine forms an \"∞\" shape.\n\nThe bottomless magazine more than makes up for the awkwardness of the configuration."

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Colt's Manufacturing Company"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_m16.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_m16.mdl"
SWEP.ViewModelFOV = 80
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["556"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["556"].min
SWEP.RangeMin = 50
SWEP.Range = 350 -- 4 shot until ~250m

SWEP.Penetration = ArcCW.UC.StdDmg["556"].pen
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 960
SWEP.PhysBulletMuzzleVelocity = 960

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 20

-- Recoil --

SWEP.Recoil = 0.5
SWEP.RecoilSide = 0.25

SWEP.RecoilRise = 0.1
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 900
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = -3,
        PostBurstDelay = 0.1,
        RunawayBurst = false, -- https://en.wikipedia.org/wiki/Burst_mode_(weapons)
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120
SWEP.ShootPitchVariation = 0

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 4
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 200
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "smg1"
SWEP.MagID = "m16"

SWEP.HeatCapacity = 150
SWEP.HeatDissipation = 10
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 200
SWEP.MalfunctionTakeRound = false

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.9

-- Length --

SWEP.BarrelLength = 48
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, -1, 1.2)
SWEP.HolsterAng = Angle(-8.5, 8, -10)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-2.815, 0, 1.3),
     Ang = Angle(0, 0, 0),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.ActivePos = Vector(0.33, -2, 1.33)
SWEP.ActiveAng = Angle(0, 0, -3)

-- SWEP.CustomizePos = Vector(5, -2, -2)
-- SWEP.CustomizeAng = Angle(15, 25, 0)
SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2.5, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.BarrelOffsetHip = Vector(2, 0, -5)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-8.5, 4, -5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    --scale = .85
}

-- Firing sounds --

local path = ")weapons/arccw_ud/m16/"
local common = ")/arccw_uc/common/"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}

SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/556x45/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-556x45-rif-ext-01.ogg",
    tail .. "fire-dist-556x45-rif-ext-02.ogg",
    tail .. "fire-dist-556x45-rif-ext-03.ogg",
    tail .. "fire-dist-556x45-rif-ext-04.ogg",
    tail .. "fire-dist-556x45-rif-ext-05.ogg",
    tail .. "fire-dist-556x45-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [2] = "m16_bullets1",    [3] = "m16_bullets2"
}

SWEP.DefaultBodygroups = "00000000000000000000000"

SWEP.AttachmentElements = {

    ["ud_m16_mag_20"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["ud_m16_mag_40"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },
    ["ud_m16_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 9}},
    },
    ["ud_m16_mag_60"] = {
        VMBodygroups = {{ind = 2, bg = 3}},
    },
    ["ud_m16_mag_100"] = {
        VMBodygroups = {{ind = 2, bg = 4}},
    },
    ["ud_m16_9mm_mag"] = {
        VMBodygroups = {{ind = 2, bg = 5}},
    },
    ["ud_m16_9mm_mag_32"] = {
        VMBodygroups = {{ind = 2, bg = 6}},
    },
    ["ud_m16_mag_50beo"] = {
        VMBodygroups = {{ind = 2, bg = 8}},
    },
    ["ud_m16_mag_50beo_12"] = {
        VMBodygroups = {{ind = 2, bg = 0}},
    },

    ["upper_flat"] = {
        -- handled by code
        --[[]
        VMBodygroups = {
            {ind = 1, bg = 1},
            {ind = 3, bg = 3}
        },
        ]]
    },
    ["upper_classic"] = {
        VMBodygroups = {
            {ind = 1, bg = 3},
        },
    },
    ["rail_fg"] = {
        VMBodygroups = {{ind = 9, bg = 1}}
    },

    ["stock_231_ex"] = {
        VMBodygroups = {{ind = 7, bg = 1}},
    },
    ["stock_231_in"] = {
        VMBodygroups = {{ind = 7, bg = 2}},
    },
    ["stock_231_tube"] = {
        VMBodygroups = {{ind = 7, bg = 3}},
    },
    ["stock_607_ex"] = {
        VMBodygroups = {{ind = 7, bg = 4}},
    },
    ["stock_607_in"] = {
        VMBodygroups = {{ind = 7, bg = 5}},
    },
    ["stock_608"] = {
        VMBodygroups = {{ind = 7, bg = 6}},
    },
    ["stock_carbine_ex"] = {
        VMBodygroups = {{ind = 7, bg = 7}},
    },
    ["stock_carbine_in"] = {
        VMBodygroups = {{ind = 7, bg = 8}},
    },
    ["stock_wood"] = {
        VMBodygroups = {{ind = 7, bg = 9}},
    },
    ["stock_adar"] = {
        VMBodygroups = {
            {ind = 7, bg = 10},
            {ind = 8, bg = 4}
        },
    },
    ["stock_ru556"] = {
        VMBodygroups = {{ind = 7, bg = 11}},
    },
    ["grip_ergo"] = {
        VMBodygroups = {{ind = 8, bg = 1}},
    },
    ["grip_skel"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["grip_wood"] = {
        VMBodygroups = {{ind = 8, bg = 3}},
    },

    ["gasblock_carbine"] = {
        VMBodygroups = {{ind = 6, bg = 3}},
    },
    ["fs_adar"] = {
        VMBodygroups = {{ind = 6, bg = 4}},
    },
    ["remove_lug"] = {
        VMBodygroups = {{ind = 12, bg = 1}},
    },

    ["mount_14"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0, 0.3, 17.5),
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["mount_11"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.6, -0.3, 14.2),
                vang = Angle(90, 0, 0),
            },
        },
    },
    ["mount_tactical"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(-1, -.35, 11.5),
                vang = Angle(-90, 180, 0),
                wang = Angle(90, 0, 0),
            },
        },
        ExcludeFlags = {}
    },
    -- ["mount_tactical_short"] = {
    --     AttPosMods = {
    --         [8] = {
    --             vpos = Vector(-1, -.35, 11.5),
    --             vang = Angle(-90, 180, 0),
    --             wang = Angle(90, 0, 0),
    --         },
    --     },
    --     AttPosMods_Priority = 2,
    --     RequireFlags = {"barrel_short"}
    -- },

    ["barrel_14"] = {
        VMBodygroups = {
            {ind = 4, bg = 1},
            {ind = 6, bg = 2},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.33, 18.85),
                vang = Angle(90, 0, -90),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_11"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 2},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.33, 15.7),
                vang = Angle(90, 0, -90),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_fpw"] = {
        VMBodygroups = {
            {ind = 4, bg = 2},
            {ind = 6, bg = 5},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.07, 21.3),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_11_ru556"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 5},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.07, 21.3),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(1.15, 0, 17.9),
                vang = Angle(90, 0, 0),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },

    ["hg_m16a4_ris"] = {
        VMBodygroups = {
            {ind = 5, bg = 2},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(-0.1, 1.05, 12),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(1.41, -.1, 20),
                vang = Angle(90, 0, 0),
            },
            [16] = {
                vpos = Vector(0, -1.75, 21.75), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["hg_m4a1_ris"] = {
        VMBodygroups = {
            {ind = 5, bg = 5},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 1.4, 12),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(-1.41, -.2, 14),
                vang = Angle(90, 0, 180),
            },
            [15] = {
                vpos = Vector(0, -1.75, 15.75), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["hg_ru556"] = {
        -- VMBodygroups = {
        --     {ind = 5, bg = 7},
        -- },
        AttPosMods = {
            -- [5] = {
            --     vpos = Vector(-0.1, 1.05, 12),
            --     vang = Angle(90, 0, -90),
            -- },
            -- [6] = {
            --     vpos = Vector(1.1, 0, 14),
            --     vang = Angle(90, 0, 0),
            -- },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["hg_m4a1"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        }
    },
    ["hg_cqbr"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        },
    },
    ["hg_adar"] = {
        VMBodygroups = {
            {ind = 5, bg = 8},
        },
    },
    ["hg_fpw"] = {
        VMBodygroups = {
            {ind = 5, bg = 6},
            --{ind = 6, bg = 4},
        }
    },
    ["hg_m16a1"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        }
    },
    ["hg_m16a1_wood"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        },
        VMSkin = 1
    },
    ["ud_m16_hg_heat"] = {
        VMElements = {
            {
                Model = "models/weapons/arccw/atts/m203iron.mdl",
                Bone = "m16_parent",
                Scale = Vector(1, 1, 1),
                Offset = {
                    pos = Vector(0, -1.2, 14.9),
                    ang = Angle(90, 0, -90),
                }
            }
        },
        UC_UseClassicM203Mount = true,
    },
    ["hg_m605"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
            {ind = 4, bg = 1},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.05, 25.58),
                vang = Angle(90, 0, -90),
            },
            [6] = { -- also has no rail
                vpos = Vector(0, 0.9, 22.2),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["hg_m605_wood"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
            {ind = 4, bg = 1},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, 0, 25),
                vang = Angle(90, 0, -90),
            },
            [6] = { -- also has no rail
                vpos = Vector(0, 0.8, 22),
                vang = Angle(90, 0, -90),
            },
        },
        VMSkin = 1
    },
    ["hg_lmg"] = {
        VMBodygroups = {
            {ind = 5, bg = 3},
        }
    },
    ["hg_sd"] = {
        VMBodygroups = {
            {ind = 5, bg = 9},
            {ind = 4, bg = 3},
            {ind = 6, bg = 5}
        },
        AttPosMods = { -- no rail, just pretend it's mounted to something
            -- [8] = {
            --     vpos = Vector(0, 0.7, 17.5),
            --     vang = Angle(90, 0, -90),
            -- },
            [16] = {
                vpos = Vector(0, -1.65, 11.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },

    ["ud_m16_upper_charm"] = {
        AttPosMods = {
            [1] = {
                vpos = Vector(0, -4, 3),
                vang = Angle(90, 0, -90),
                SlideAmount = {
                    vmin = Vector(0, -3.4, 3 - 1.5),
                    vmax = Vector(0, -3.4, 3 + 1.5),
                }
            },
        },
    },
    ["ud_m16_upper_charm2"] = {
        AttPosMods = {
            [1] = {
                vpos = Vector(0, -4.1, 3.5),
                vang = Angle(90, 0, -90),
                SlideAmount = {
                    vmin = Vector(0, -3.5, 3.5 - 2),
                    vmax = Vector(0, -3.5, 3.5 + 1),
                }
            },
        },
    },
    ["bravo_dicks_going_fart"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.25, -1.4, 12),
                vang = Angle(90, 0, 90),
            },
        },
    },

    ---- Cut content
    ["hg_stub"] = {
        VMBodygroups = {
            {ind = 5, bg = 7},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.35, 7),
                vang = Angle(90, 0, -90)
            },
            [6] = {
                vpos = Vector(1.1, -0.4, 9),
                vang = Angle(90, 0, 0),
            },
        }
    },
    ["barrel_stub"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 4},
        }
    },
    ["hg_smg"] = {
        VMBodygroups = {
            {ind = 5, bg = 0},
        }
    },
    ["m16_strap"] = {
        VMBodygroups = {
             {ind = 13, bg = 1},
        },
    },
}

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

local sr_pmag = {
	[path .. "magout_empty.ogg"] = path .. "pmagout.ogg",
	[path .. "magin.ogg"] = path .. "pmagin.ogg",
}

local pmag1, pmag2 = {}, {"ud_m16_pmag"}
SWEP.Hook_TranslateSound = function(wep, data)
	if wep:CheckFlags(pmag1, pmag2) and sr_pmag[data] then return sr_pmag[data] end
end

local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}

SWEP.Animations = {
    ["ready"] = {
        Source = "fix",
        Time = 45 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chamber.ogg",  t = 0.5},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = ratel, t = 0.2},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 20 / 30,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = ratel, t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 20 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["trigger"] = {
        Source = "idle",
        MinProgress = .1,
        SoundTable = {
            {s = ")weapons/arccw_ud/uzi/prefire.ogg",         t = 0, c = ci},
        },
    },
    ["fire"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },

    ["fire_cycle"] = {
        Source = "fire",
        Time = 13 / 30,
    },

    ["cycle"] = {
        Source = "fix",
        Time = 36 / 30 * 0.7,
        ShellEjectAt = 0.3,
        LHIK = true,
        LHIKIn = 0.3 * 0.7,
        LHIKEaseIn = 0.4 * 0.7,
        LHIKEaseOut = 0.15 * 0.7,
        LHIKOut = 0.4 * 0.7,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.05},
            {s = common .. "cloth_4.ogg",  t = 0.2},
            {s = path .. "chamber.ogg",  t = 0.3},
        },
    },

    ["fix"] = {
        Source = "fix",
        Time = 45 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chamber.ogg",  t = 0.5},
        },
    },
    ["fix_empty"] = {
        Source = "fix_empty",
        Time = 45 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "ch_forward_empty.ogg",  t = 0.5},
        },
    },

    -- 30 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2, v = 0.5},
            {s = ratel, t = 0.25},
            {s = path .. "magout_empty.ogg", 	 t = 0.23},
            {s = ratel, t = 0.5},
            {s = path .. "struggle.ogg",    t = 1, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = common .. "grab-polymer.ogg", t = 1.77, v = 0.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.7},
            {s = common .. "shoulder.ogg", t = 1.8},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 87 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 0.25},
            {s = common .. "magpouch_gear.ogg", t = 0.1, v = 0.5},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = ratel, t = 0.5},
            {s = common .. "rifle_magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.39},
            {s = path .. "boltdrop.ogg", t = 1.7},
            {s = ratel, t = 1.9},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.0},
            {s = common .. "grab-polymer.ogg", t = 2.1, v = 0.35},
            {s = common .. "shoulder.ogg", t = 2.1},
        },
    },

    -- 20 Round Reloads --

    ["reload_20"] = {
        Source = "reload_20",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 0.05},
            {s = path .. "magout_empty.ogg", 	 t = 0.09},
            {s = common .. "magpouch_gear.ogg", t = 0.1},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 0.85},
            {s = path .. "struggle.ogg",    t = 0.9, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = rottle,  t = 1.1},
            {s = ratel, t = 1.125},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.65},
            {s = common .. "grab-polymer.ogg", t = 1.7, v = 0.25},
            {s = common .. "shoulder.ogg", t = 1.75},
        },
    },
    ["reload_empty_20"] = {
        Source = "reload_empty_20",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.8,
        SoundTable = {
            {s = common .. "magpouch_gear.ogg", t = 0},
            {s = rottle, t = 0.01},
            {s = ratel, t = 0.05},
            {s = path .. "magout_empty.ogg", 	 t = 0.075},
            {s = rottle, t = 0.75},
            {s = ratel, t = 0.9},
            {s = common .. "rifle_magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.8, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.85},
            {s = rottle, t = 1.4},
            {s = ratel, t = 1.4},
            {s = path .. "chamber_press.ogg", t = 1.72},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.95},
            {s = common .. "grab-polymer.ogg", t = 2.075, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.13},
        },
    },

    -- 40 Round Reloads --

    ["reload_40"] = {
        Source = "reload_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = ratel, t = 0.1},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = common .. "magpouch_gear.ogg", t = 0.25},
            {s = rottle, t = 0.75},
            {s = ratel, t = 0.8},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.0},
            {s = rottle, t = 1.1},
            {s = ratel, t = 1.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.65},
            {s = common .. "shoulder.ogg", t = 1.75},
        },
    },
    ["reload_empty_40"] = {
        Source = "reload_empty_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 85 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.8,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = common .. "magpouch_gear.ogg", t = 0.25},
            {s = rottle,  t = 0.75},
            {s = common .. "rifle_magdrop.ogg",  t = 0.8},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = rottle,  t = 1.475},
            {s = ratel,  t = 1.475},
            {s = path .. "boltdrop.ogg", t = 1.78},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.1},
            {s = common .. "shoulder.ogg", t = 2.2},
        },
    },

    -- 60 Round Reloads --

    ["reload_60"] = {
        Source = "reload_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2},
            {s = path .. "magout_empty.ogg", 	 t = 0.25},
            {s = rottle, t = 0.75},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.1},
            {s = rottle, t = 1.1},
            {s = common .. "grab-polymer.ogg", t = 1.78, v = 0.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.8},
            {s = common .. "shoulder.ogg", t = 1.9},
        },
    },
    ["reload_empty_60"] = {
        Source = "reload_empty_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 85 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.8,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2},
            {s = path .. "magout_empty.ogg", 	 t = 0.25},
            {s = rottle, t = 0.75},
            {s = common .. "rifle_magdrop.ogg",  t = 0.8},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.1},
            {s = rottle, t = 1.475},
            {s = ratel, t = 1.475},
            {s = path .. "boltdrop.ogg", t = 1.8},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.1},
            {s = common .. "grab-polymer.ogg", t = 2.15, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.2},
        },
    },

    -- 100 Round Reloads --

    ["reload_100"] = {
        Source = "reload_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.75,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = rottle, t = 0.75},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = rottle, t = 1.1},
            {s = path .. "magtap.ogg",   t = 1.59},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.8},
            {s = common .. "grab-polymer.ogg", t = 1.85, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.0},
        },
    },
    ["reload_empty_100"] = {
        Source = "reload_empty_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 90 / 30,
        MinProgress = 2.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = rottle, t = 0.75},
            {s = common .. "magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = path .. "magtap.ogg",   t = 1.59},
            {s = rottle, t = 1.75},
            {s = path .. "chback.ogg",   t = 2.0},
            {s = common .. "cloth_4.ogg",  t = 2.05},
            {s = path .. "chamber.ogg",  t = 2.22},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.5},
            {s = common .. "grab-polymer.ogg", t = 2.55, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.6},
        },
    },

    -- 9mm 32 Round Reloads --

    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 70 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.15},
            {s = "weapons/arccw_ud/uzi/" .. "magout.ogg", 	 t = 16 / 30},
            {s = rottle, t = 0.75},
            {s = "weapons/arccw_ud/uzi/" .. "magin.ogg",    t = 27 / 30},
            {s = rottle, t = 1.1},
            {s = common .. "magpouchin.ogg", t = 1.55},
            {s = common .. "shoulder.ogg", t = 1.93},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_empty_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 80 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = "weapons/arccw_ud/uzi/" .. "magout.ogg", 	 t = 0.1},
            {s = common .. "magpouch.ogg", t = 0.45},
            {s = rottle, t = 0.75},
            {s = "weapons/arccw_ud/uzi/" .. "magin.ogg",    t = 0.8},
            {s = path .. "chamber_press.ogg", t = 1.7},
            {s = rottle, t = 1.39},
            {s = common .. "shoulder.ogg", t = 2.15},
        },
    },


    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_inspect_empty"] = {
        Source = "inspect_enter_empty",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "inspect_loop_empty",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999,
    },
    ["exit_inspect_empty"] = {
        Source = "inspect_exit_empty",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999,
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
}

local hgLookup = {
    ["default"]     = {0,4,0},
    ["tactical"]    = {2,5,0},
    ["a1"]          = {1,1,1},
    ["heat"]          = {10,10,1},
    ["heatm203"]          = {11,11,1},
    ["wood"]          = {1,1,1},
    ["lmg"]          = {3,3,1},
    ["fpw"]          = {6,6,2},
    ["ru556"]          = {7,7,3},
    ["adar"]          = {8,8,2},
    ["hk416"]          = {9,9,3},
    ["607"]          = {9,9,0},
}
-- Structure: 20in appearance, 14/11in appearance, gas block mode
-- Gas block modes: 0 standard, 1 always at 20" position, 2 at ADAR position when short, 3 at ADAR position when short and not flat

local barrLookup = {
    ["sd"] = -1,
    ["20in"] = 0,
    ["14in"] = 1,
    ["fpw"] = 1,
    ["10in"] = 2,
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    local atts = wep.Attachments
    if !IsValid(vm) then return end

    local barrel = string.Replace(atts[2].Installed or "20in","ud_m16_barrel_","")
    local barr = barrLookup[barrel]
    local hg = string.Replace(atts[3].Installed or "default","ud_m16_hg_","")
    hg = string.Replace(hg,"uf_m16_hg_","")

    local optic = atts[1].Installed
    local muzz = atts[4].Installed or barrel == "sd"
    local laser = atts[8].Installed
    local fs = atts[16].Installed
    local retro = wep:GetBuff_Override("TopMount")

    -- Retro rail
    if optic then
        if retro then
            -- Raised rail (retro)
            vm:SetBodygroup(3, retro)
        else
            -- Flat rail
            vm:SetBodygroup(1, 1)
            vm:SetBodygroup(3, 2)
        end
    end

    -- Dynamic handguard
    if barr == -1 then
        vm:SetBodygroup(5,9)
    elseif barr == 0 and hgLookup[hg] then
        vm:SetBodygroup(5,hgLookup[hg][1])
    elseif hgLookup[hg] then
        vm:SetBodygroup(5,hgLookup[hg][2])
    else
        vm:SetBodygroup(5,9)
    end

    -- Gas block
    if barrel == "sd" or (atts[6].Installed == "ud_m16_receiver_fpw" and barr > 0) then
        vm:SetBodygroup(6,5)
    else
        local gbPos = hgLookup[hg] and hgLookup[hg][3] or 0
        local lwr = atts[6].Installed
        local flat = (
            wep:GetBuff_Override("FrontSight")
            or atts[6].Installed == "ud_m16_receiver_fpw"
            or (optic and fs ~= "ud_m16_charm_fs" and !(wep:GetBuff_Override("IronSight") or wep:GetBuff_Override("TopMount")))
        ) and 1 or 0

        if gbPos == 1 or barr == 0 then
            vm:SetBodygroup(6, 0 + flat)
        elseif gbPos == 2 then
            vm:SetBodygroup(6, 4 + flat * 2)
        elseif gbPos == 3 then
            vm:SetBodygroup(6, 4 - flat)
        else
            vm:SetBodygroup(6, 2 + flat)
        end
    end

    -- Default flash hider
    if !muzz then
        if barr == 0 then
            vm:SetBodygroup(11,1)
        elseif barr == 1 then
            vm:SetBodygroup(11,2)
        else
            vm:SetBodygroup(11,3)
        end
    else
        vm:SetBodygroup(11,0)
    end

    -- Tactical clamp
    if laser and hg ~= "tactical" then
        if barr == 0 then
            vm:SetBodygroup(10,1)
        elseif barr == 1 then
            vm:SetBodygroup(10,3)
        else
            vm:SetBodygroup(10,2)
        end
    else
        vm:SetBodygroup(10,0)
    end

    -- Disable tac rail element with tac hg
    if hg == "tactical" and (atts[7].Installed or atts[18].Installed) then
        vm:SetBodygroup(9,0)
    end

    -- .50 Beowulf magazines
    if atts[5].Installed == "ud_m16_receiver_50beo" and !atts[11].Installed then
        vm:SetBodygroup(2, 8)
    end
end

-- RAYCAR-0, rifle barrel
local bar0_fake = "First variation of the RAYCAR rifle. Tests showed that users were more likely to hit a target if they fired multiple shots, but were likely to spray in full-auto and fail to hit anything. As a result, a ratcheted three-round burst system was implemented which limited the maximum burst a user could fire to three shots.\n\nWell-rounded gun with no major downsides."

-- RAYCAR-1, carbine barrel
local bar1_fake = "Second variation of the RAYCAR rifle. It eventually replaced the RAYCAR-0 across much of the Army for its favorably low weight and comparable performance. The -1 variant has since become one of the most iconic and widespread American service rifles in the modern era.\n\nLight and versatile, but requires discipline to control."

-- RAYCAR-2, commando barrel
local bar2_fake = "Third variation of the RAYCAR rifle. Developed with assistance from the Navy, the \"commando\" barrel allows for the weapon to be very compact, even short enough to be classified as a submachine gun, enhancing usability in vehicles and in enclosed spaces.\n\nVery lightweight and manuverable, but with very aggressive recoil to match."

-- RAYPAW :3
local smgDesc_fake = "Submachine gun based on the RAYCAR rifle. Despite its similar appearance, it uses a different mechanism from its parent rifle.\n\nMore accurate than other submachine guns due to its rifle frame and closed-bolt mechanism."

-- RBY50
local beoDesc_fake = "Aftermarket semi-automatic variant of the RAYCAR rifle firing an oversized magnum cartridge.\n\nProvides extremely high stopping power at close range."

-- RBY300
local blkDesc_fake = "Aftermarket automatic variant of the RAYCAR rifle. The .300 Blackout cartridge has a ballistic performance more akin to the 7.62x39mm Soviet cartridge, with a similarly sized projectile but shorter effective range.\n\nSlightly more inaccurate, made up with a higher stopping power and a subsonic projectile."

-- UKCAR
local ukDesc_fake = "Normally, RAYCAR style rifles are imported with a semi-automatic fire group for the civilian market. This one, however, has been neutered by authority of the British crown with a manual-action receiver.\n\nBit cringe, innit?"

-- RAYSAW
local lmgDesc_fake = "Configuration of the RAYCAR designed for a light machine gun role, used vaguely within the Marine Corps before the adoption of the Minimi.\n\nHeavier than the standard platform, but the integral bipod can be deployed onto surfaces for excellent recoil control."

-- Fallout barrel or sumn idk
local ncrDesc_fake = "Standard-issue rifle of the New California Republic. Traditionally produced with a semi-automatic receiver, the wooden furniture is more readily replaceable and adds additional recoil control for maximum accuracy.\n\nWell-rounded gun with no major downsides."

-- Patriot easter egg. Is it overpowered? I don't think so, a configuration like this is already pretty uncontrollable and imprecise as is, and overheating is the new magazine.
local a1, a2 = {}, {"patr1", "patr2", "patr3", "patr4", "patr5"}
SWEP.O_Hook_Override_BottomlessClip = function(wep, data)
    if wep:CheckFlags(a1, a2) then
        data.current = true
    end
end


SWEP.Hook_NameChange = function(wep, name)
    local trueNames = GetConVar("arccw_truenames"):GetBool()
    local atts = wep.Attachments
    local flat = atts[1].Installed and !wep:GetBuff_Override("TopMount")

    local barrel = string.Replace(atts[2].Installed or "20in","ud_m16_barrel_","")
    local barr = barrLookup[barrel]
    local hg = string.Replace(atts[3].Installed or "default","ud_m16_hg_","")
    local upr = string.Replace(atts[5].Installed or "default","ud_m16_receiver_","")
    local lwr = string.Replace(atts[6].Installed or "default","ud_m16_receiver_","")

    if wep:CheckFlags(a1, a2) then -- Patriot configuration
        wep.Trivia_Desc = patriotDesc
        return "The Patriot"
    elseif !trueNames then -- Custom lore-based fake names
        local pre = (lwr == "auto" and "AM" or "RAY")
        if upr == "9mm" then
            local sd = (barr == -1)
            wep.Trivia_Desc = smgDesc_fake
            if flat then
                return (sd and pre .. "SSMG-NG") or pre .. "PAW-" .. barr .. "NG"
            end
            return (sd and pre .. "SSMG") or pre .. "PAW-" .. barr
        elseif upr == "50beo" then
            wep.Trivia_Desc = beoDesc_fake
            return "RBY"--50"
        elseif upr == "300blk" then
            wep.Trivia_Desc = blkDesc_fake
            return "RBY"--300"
        elseif lwr == "fpw" then
            wep.Trivia_Desc = bar1_fake
            return pre .. "FPW"
        elseif lwr == "cali" then
            wep.Trivia_Desc = ukDesc_fake
            return "UKCAR"
        else
            if barr == 0 then
                if hg == "lmg" then
                    wep.Trivia_Desc = lmgDesc_fake
                    return pre .. "SAW" .. (flat and "-NG" or "")
                elseif flat then
                    return pre .. "CAR-0NG"
                else
                    wep.Trivia_Desc = bar0_fake
                    return pre .. "CAR-0"
                end
            elseif barr == 1 then
                wep.Trivia_Desc = bar1_fake
                if flat then
                    return pre .. "CAR-1NG"
                end
                return pre .. "CAR-1"
            elseif barr == 2 then
                wep.Trivia_Desc = bar2_fake
                if flat then
                    return pre .. "CAR-2NG"
                end
                return pre .. "CAR-2"
            end
        end

        wep.Trivia_Desc = bar0_fake
        return pre .. "CAR-0"

    else

        if upr == "9mm" then
            local sd = (barr == -1)
            wep.Trivia_Desc = smgDesc
            if lwr == "semi" then
                return "AR-15 9mm"
            elseif flat then
                return "R0991"
            end
            return "R0635"

        end

        if lwr == "auto" then
            if upr == "a1" then
                wep.Trivia_Desc = a1Desc
                if barr == 0 then
                    return "M16A1"
                elseif barr == 1 then
                    return "M605"
                end
                wep.Trivia_Desc = carDesc
                return "CAR-15"
            end
            if barr == 0 then
                wep.Trivia_Desc = a3Desc
                if hg == "lmg" then
                    wep.Trivia_Desc = lmgDesc
                    return "Colt LMG"
                elseif flat and hg == "tactical" then
                    return "R0901"
                end
                return "M16A3"
            elseif barr == 1 then
                wep.Trivia_Desc = m4Desc
                if flat then
                    return "M4A1"
                end
                return "XM4"
            else
                wep.Trivia_Desc = carDesc
                if flat then
                    wep.Trivia_Desc = m4Desc
                    if upr == "300blk" then
                        return "Mk 18"
                    end
                    return "Mk 18 Mod 0"
                end
                return "CAR-15"
            end
        elseif lwr == "semi" or upr == "50beo" then
            wep.Trivia_Desc = arDesc
            if hg == "wood" then
                wep.Trivia_Desc = ncrDesc
                if barr == 0 then
                    return "Service Rifle"
                end
                return "Service Carbine"
            elseif flat and hg == "adar" then
                return "ADAR 2-15"
            elseif barr > 0 then
                if barr == 2 and atts[10].Installed == "ud_m16_stock_buffer" then
                    return "AR-15 Pistol"
                elseif upr == "a1" and barr == 1 then
                    return "CRXM177E2B"
                else
                    return "AR-15 SBR"
                end
            elseif upr == "a1" then
                return "CRM16A1"
            end
            return "AR-15"
        elseif lwr == "fpw" then
            wep.Trivia_Desc = m4Desc
            return "M231 FPW"
        elseif lwr == "cali" then
            wep.Trivia_Desc = ukDesc
            return "AR-15GB"
        else
            wep.Trivia_Desc = origDesc
            if barr == 0 and flat then
                return "M16A4"
            elseif barr == 1 then
                wep.Trivia_Desc = m4Desc
                return "M4 Carbine"
            elseif barr == 2 then
                return "M16 Commando"
            end
        end

        wep.Trivia_Desc = origDesc
        return "M16A2"

    end
end



SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        InstalledEles = {"upper_flat"},
        Slot = {"optic","optic_sniper","ud_m16_rs"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.75, 3),
            vang = Angle(90, 0, -90),
        },
        SlideAmount = {
            vmin = Vector(0, -1.6, 3 - 2),
            vmax = Vector(0, -1.6, 3 + 1),
        },
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "20\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_barrel_20.png", "smooth mips"),
        Slot = "ud_m16_blen",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Ribbed Handguard",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_hg_ribbed.png", "smooth mips"),
        Slot = "ud_m16_hg",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.63, -0.41),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd"}
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle", "ud_m16_muzzle"},
        Bone = "m16_parent",
        VMScale = Vector(1, 1, 1),
        WMScale = VMScale,
        Offset = {
            vpos = Vector(0, -.33, 23.27),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd", "m16_stub"},
    },
    {
        PrintName = "Upper Receiver",
        DefaultAttName = "5.56x45mm Upper",
        DefaultAttIcon = Material("entities/att/uc_bullets/556x45.png", "smooth mips"),
        Slot = {"ud_m16_receiver"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"ud_m16_fpw"}
    },
    {
        PrintName = "Lower Receiver",
        DefaultAttName = "Burst Lower",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_receiver_default.png", "smooth mips"),
        Slot = {"ud_m16_fcg"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"m16_nolower"}
    },
    {
        PrintName = "Underbarrel",
        Slot = "foregrip",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, 6, 11),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"m16_lmg", "m16_stub"},
        SlideAmount = {
            vmin = Vector(0, .65, 11.5),
            vmax = Vector(0, .65, 7.5),
        },
		MergeSlots = {18},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, 0.3, 21.25),
            vang = Angle(90, 0, -90),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ud_m16_grip"},
        DefaultAttName = "Standard Grip",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_grip_default.png", "smooth mips"),
        ExcludeFlags = {"m16_adar"}
    },
    {
        PrintName = "Stock",
        Slot = {"ud_m16_stock","go_stock"},
        DefaultAttName = "Full Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_stock_default.png", "smooth mips"),
        -- GSO support
        InstalledEles = {"stock_231_tube"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(-0.02, 0, -2.7),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Magazine",
        Slot = {"ud_m16_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_mag_30.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Front Sight",
        Slot = {"ud_m16_fs", "ud_m16_charm"},
        FreeSlot = true,
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.65, 16.75), -- 21.75 or 15.75
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sight_magpul"}
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"}, -- "ud_m16_charm"
        FreeSlot = true,
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0.48, 0.5, 3.9),
            vang = Angle(90, 0, -90),
        },
        -- MergeSlots = {17}
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -0.4, 7.2),
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"m16_lmg", "m16_stub"},
    }
}
--lua/weapons/arccw_ud_m1014.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_shotgun"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/12g.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.UC_ShellColor = Color(0.7*255, 0.2*255, 0.2*255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3

-- Fake name --

SWEP.PrintName = "FC1040"

-- True name --

SWEP.TrueName = "Benelli M4"

-- Trivia --

SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = [[Semi-automatic shotgun designed for close-quarters urban warfare. Uses an innovative short-stroke gas system that eliminates complex mechanisms found on most gas-operated automatic weapons. Its main use is in destroying locked doors.

Devastating damage output, but control is required to avoid spending more time reloading than fighting.]]
SWEP.Trivia_Manufacturer = "Iscapelli Armaments"
SWEP.Trivia_Calibre = "12 Gauge"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "Italy"
SWEP.Trivia_Year = 1998

-- Weapon slot --

SWEP.Slot = 3

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Benelli Armi SpA"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_m1014.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_m1014.mdl"
SWEP.ViewModelFOV = 60
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-4, 4, -4.5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1
}
SWEP.DefaultPoseParams = {["grip"] = 0}

-- Damage parameters --


SWEP.Damage = ArcCW.UC.StdDmg["12g_s"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["12g_s"].min
SWEP.Penetration = ArcCW.UC.StdDmg["12g_s"].pen
SWEP.Num = ArcCW.UC.StdDmg["12g_s"].num

SWEP.Range = 40
SWEP.RangeMin = 4
SWEP.DamageType = DMG_BUCKSHOT
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 200

SWEP.HullSize = 0.25

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults_Shotgun

-- Jamming --

SWEP.Malfunction = true
SWEP.MalfunctionJam = true
SWEP.MalfunctionPostFire = true
SWEP.MalfunctionTakeRound = false

-- Mag size --

SWEP.ChamberSize = 2
SWEP.Primary.ClipSize = 4
SWEP.ExtendedClipSize = 7
SWEP.ReducedClipSize = 2

SWEP.ChamberLoadNonEmpty = 2
SWEP.ChamberLoadEmpty = 1

-- Recoil --

SWEP.Recoil = 2.89
SWEP.RecoilSide = 2

SWEP.RecoilRise = 0.24
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 220
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShotgunReload = true

SWEP.ShootVol = 160
SWEP.ShootPitch = 100

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 210

-- Accuracy --

SWEP.AccuracyMOA = 30
SWEP.HipDispersion = 400
SWEP.MoveDispersion = 100
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "buckshot"

-- Speed multipliers --

SWEP.SpeedMult = 0.92
SWEP.SightedSpeedMult = 0.6
SWEP.SightTime = 0.4
SWEP.ShootSpeedMult = 0.75

-- Length --

SWEP.BarrelLength = 48
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-2.73, -2, 1.1),
     Ang = Angle(.25, 0.01, 0),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.HolsterPos = Vector(2, 0, -3)
SWEP.HolsterAng = Angle(-5.5, 20, -20)

SWEP.SprintPos = Vector(-0.5, -4, -3)
SWEP.SprintAng = Angle(3.5, 7, -20)

SWEP.ActivePos = Vector(-0.1, -0.5, 0.75)
SWEP.ActiveAng = Angle(0, 0, -0)

SWEP.CrouchPos = Vector(-4, -2, 0)
SWEP.CrouchAng = Angle(0, 0, -30)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(3, 0, -4.5)

-- Firing sounds --

local path2 = ")weapons/arccw_ud/m16/"
local path1 = ")weapons/arccw_ud/870/"
local path = ")weapons/arccw_ud/m1014/"
local common = ")/arccw_uc/common/"
SWEP.ShootSound = {
    path1 .. "fire-01.ogg",
    path1 .. "fire-02.ogg",
    path1 .. "fire-03.ogg",
    path1 .. "fire-04.ogg",
    path1 .. "fire-05.ogg",
    path1 .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path1 .. "fire-sup-01.ogg",
    path1 .. "fire-sup-02.ogg",
    path1 .. "fire-sup-03.ogg",
    path1 .. "fire-sup-04.ogg",
    path1 .. "fire-sup-05.ogg",
    path1 .. "fire-sup-06.ogg"
}
--[[SWEP.DistantShootSound = path .. "fire_dist.ogg"
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"]]
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/12ga/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-12ga-pasg-ext-01.ogg",
    tail .. "fire-dist-12ga-pasg-ext-02.ogg",
    tail .. "fire-dist-12ga-pasg-ext-03.ogg",
    tail .. "fire-dist-12ga-pasg-ext-04.ogg",
    tail .. "fire-dist-12ga-pasg-ext-05.ogg",
    tail .. "fire-dist-12ga-pasg-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-shotgun-01.ogg",
    common .. "fire-dist-int-shotgun-02.ogg",
    common .. "fire-dist-int-shotgun-03.ogg",
    common .. "fire-dist-int-shotgun-04.ogg",
    common .. "fire-dist-int-shotgun-05.ogg",
    common .. "fire-dist-int-shotgun-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

local shellin = {path .. "shell-insert-01.ogg", path .. "shell-insert-02.ogg", path .. "shell-insert-03.ogg"}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["idle_jammed"] = {
        Source = "idle_jammed",
    },
    ["ready"] = {
        Source = "equip",
        Time = 60 / 30,
        SoundTable = {
            {s = rottle, t = 0.35},
            {s = path .. "chback.ogg", t = 0.35},
            {s = path .. "chamber.ogg", t = 0.6},
            {s = rottle, t = 0.75},
        },
    },
    ["draw"] = {
        Source = "draw",
        Time = 30 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 30 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_jammed"] = {
        Source = "draw_jammed",
        Time = 30 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster"] = {
        Source = "holster",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_jammed"] = {
        Source = "holster_jammed",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire"] = {
        Source = "fire",
        Time = 16 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg", t = 0, v = 0.45}, -- Not temporary
            {s = path1 .. "eject.ogg", t = 0.01}, -- Not temporary
        },
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 18 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg", t = 0}, -- Not temporary
            {s = path1 .. "eject.ogg", t = 0.01}, -- Not temporary
        },
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 18 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Not temporary
            {s = path1 .. "eject.ogg", t = 0.01}, -- Not temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 20 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Not temporary
            {s = path1 .. "eject.ogg", t = 0.01}, -- Not temporary
        },
    },
    ["fire_jammed"] = {
        Source = "fire_jam",
        Time = 23 / 25,--30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg", t = 0}, -- Not temporary
            --{s = path1 .. "eject.ogg", t = 0}, -- Not temporary
        },
    },
    ["unjam"] = {
        Source = "jam_fix",
        Time = 60 / 30,
        ShellEjectAt = 0.8,
        LHIK = false,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path2 .. "grab.ogg", t = 0.1},
            {s = path .. "chback.ogg", t = 0.7},
            {s = path1 .. "eject.ogg", t = 0.8, v = 0.4},
            {s = path .. "chamber.ogg", t = 0.9},
            {s = rottle, t = 1.2},
        },
    },
    ["unjam_empty"] = {
        Source = "jam_fix_empty",
        Time = 60 / 30,
        ShellEjectAt = 1.1,
        LHIK = false,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path2 .. "grab.ogg", t = .4},
            {s = path .. "chback.ogg", t = 0.8},
            {s = path1 .. "eject.ogg", t = 1.1},
            {s = rottle, t = 1.2},
        },
    },
    ["sgreload_start"] = {
        Source = "sgreload_start",
        Time = 16 / 30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        LHIK = false,
        //LHIKIn = 0.2,
        //LHIKEaseIn = 0.2,
        //LHIKOut = 0,
    },
    ["sgreload_start_empty"] = {
        Source = "sgreload_start_empty",
        Time = 40 / 30,
        MinProgress = 1,
        LHIK = false,
        //LHIKIn = 0.2,
        //LHIKOut = 0,
        TPAnimStartTime = 0.5,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "breechload.ogg",  t = 0.25},
            {s = path .. "breechclose.ogg",  t = 0.9},
        },
        ForceEmpty = true,
    },
    ["sgreload_insert"] = {
        Source = "sgreload_insert",
        Time = 18 / 30,
        MinProgress = 0.24,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.3,
        LHIK = false,
        //LHIKIn = 0,
        //LHIKOut = 0,
        SoundTable = {
            {s = shellin, t = 0},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.05},
        },
    },
    ["sgreload_finish"] = {
        Source = "sgreload_finish",
        Time = 30 / 30,
        LHIK = false,
        //LHIKIn = 0,
        //LHIKEaseOut = 0.3,
        //LHIKOut = 0.6,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.8,
        SoundTable = {
            {s = common .. "shoulder.ogg",  t = 0.3},
        },
    },

    -- stock animla below

    ["idle_stock"] = {
        Source = "idle_stock",
    },
    ["idle_empty_stock"] = {
        Source = "idle_empty_stock",
    },
    ["idle_jammed_stock"] = {
        Source = "idle_jammed_stock",
    },
    ["draw_stock"] = {
        Source = "draw_stock",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_empty_stock"] = {
        Source = "draw_empty_stock",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_jammed_stock"] = {
        Source = "draw_jammed_stock",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster_stock"] = {
        Source = "holster_stock",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_empty_stock"] = {
        Source = "holster_empty_stock",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_jammed_stock"] = {
        Source = "holster_jammed_stock",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire_stock"] = {
        Source = "fire_stock",
        Time = 23 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg", t = 0}, -- Not temporary
            {s = path1 .. "eject.ogg", t = 0.01}, -- Not temporary
        },
    },
    ["fire_empty_stock"] = {
        Source = "fire_empty_stock",
        Time = 23 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Not temporary
            {s = path1 .. "eject.ogg", t = 0.01}, -- Not temporary
        },
    },
    ["fire_jammed_stock"] = {
        Source = "fire_jam_stock",
        Time = 23 / 25,--30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Not temporary
            --{s = path1 .. "eject.ogg", t = 0}, -- Not temporary
        },
    },
    ["unjam_stock"] = {
        Source = "jam_fix_stock",
        Time = 60 / 30,
        ShellEjectAt = 1.1,
        LHIK = false,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path2 .. "grab.ogg", t = .4},
            {s = path .. "chback.ogg", t = 0.8},
            {s = path1 .. "eject.ogg", t = 1.1},
            {s = path .. "breechclose.ogg", t = 0.9},
            {s = rottle, t = 1.2},
        },
    },
    ["unjam_empty_stock"] = {
        Source = "jam_fix_empty_stock",
        Time = 60 / 30,
        ShellEjectAt = 1.1,
        LHIK = false,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path2 .. "grab.ogg", t = .4},
            {s = path .. "chback.ogg", t = 0.8},
            {s = path1 .. "eject.ogg", t = 1.1},
            --{s = path .. "breechclose.ogg", t = 1.2},
            {s = rottle, t = 1.2},
        },
    },
    ["sgreload_start_stock"] = {
        Source = "sgreload_start_stock",
        Time = 16 / 30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        LHIK = false,
        //LHIKIn = 0.2,
        //LHIKEaseIn = 0.2,
        //LHIKOut = 0,
    },
    ["sgreload_start_empty_stock"] = {
        Source = "sgreload_start_empty_stock",
        Time = 40 / 30,
        MinProgress = 1,
        LHIK = false,
        //LHIKIn = 0.2,
        //LHIKOut = 0,
        TPAnimStartTime = 0.5,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "breechload.ogg",  t = 0.05},
            {s = path .. "breechclose.ogg",  t = 0.75},
        },
        ForceEmpty = true,
    },
    ["sgreload_finish_stock"] = {
        Source = "sgreload_finish_stock",
        Time = 22 / 30,
        LHIK = false,
        //LHIKIn = 0,
        //LHIKEaseOut = 0.3,
        //LHIKOut = 0.6,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.8,
        SoundTable = {
            {s = common .. "shoulder.ogg",  t = 0.4},
        },
    },
}

SWEP.BulletBones = {
    --[1] = "1014_shell1",
}

-- Bodygroups --

SWEP.AttachmentElements = {
    ["ud_autoshotgun_barrel_short"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.40, 19.6),
            }
        },
    },
    ["ud_autoshotgun_barrel_sawnoff"] = {
        VMBodygroups = {{ind = 1, bg = 2}},
        AttPosMods = {
            [3] = {
                vpos = Vector(-0.03, -0.75, 22.2),
            }
        },
    },
    ["ud_autoshotgun_barrel_sport"] = {
        VMBodygroups = {{ind = 1, bg = 2}},
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.40, 26.3),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.73, -2, 1.01),
            Ang = Angle(0.95, 0.01, 0),
            Magnification = 1.1
        },
    },
    ["ud_autoshotgun_tube_short"] = {
        VMBodygroups = {
            {ind = 2, bg = 1},
            {ind = 4, bg = 1},
        },
    },
    ["ud_autoshotgun_tube_long"] = {
        VMBodygroups = {{ind = 2, bg = 0}},
    },

    ["ud_autoshotgun_stock_in"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
        VMPoseParams = {["grip"] = 0}
    },
    ["ud_autoshotgun_stock_buffer"] = {
        VMBodygroups = {{ind = 3, bg = 2}},
        VMPoseParams = {["grip"] = 0}
    },
    ["ud_autoshotgun_stock_sport"] = {
        VMBodygroups = {
            {ind = 3, bg = 3},
            {ind = 6, bg = 1},
        },
        VMPoseParams = {["grip"] = 1}
    },
    ["ud_autoshotgun_stock_gripstock"] = {
        VMBodygroups = {
            {ind = 3, bg = 5},
        },
        VMPoseParams = {["grip"] = 0}
    },

    ["ud_m1014_handguard_sport"] = {
        VMBodygroups = {{ind = 5, bg = 2}},
    },
    ["ud_autoshotgun_rail_fg"] = {
        VMBodygroups = {{ind = 5, bg = 1}},
    },
}

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp", "optic", "optic_sniper"},
        Bone = "1014_parent",
        Offset = {
            vpos = Vector(-0.025, -1.35, 2.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "18.5\" Factory Barrel", --16\" M4 Super 90 SBS Barrel
        DefaultAttIcon = Material("entities/att/acwatt_ud_m1014_barrel.png", "smooth mips"),
        Slot = "ud_1014_barrel",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"choke", "muzzle_shotgun"},
        Bone = "1014_parent",
        Offset = {
            vpos = Vector(0, -0.40, 24.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"nomuzzle"}
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip","ud_1014_handguard"},
        Bone = "1014_parent",
        Offset = {
            vpos = Vector(0, 1.7, 9),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_autoshotgun_rail_fg"},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "1014_parent",
        Offset = {
            vpos = Vector(0.8, 0.8, 13),
            vang = Angle(90, 0, 0),
        },
        InstalledEles = {"ud_autoshotgun_rail_fg"},
    },
    {
        PrintName = "Stock",
        Slot = {"ud_1014_stock"},
        Bone = "1014_parent",
        Offset = {
            vpos = Vector(-0.02, 1.9, -2.07),
            vang = Angle(90, 0, -90),
        },
        DefaultAttName = "Extended Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m1014_stock.png", "smooth mips"),
    },
    {
        PrintName = "Tube Type",
        Slot = {"ud_1014_tube"},
        DefaultAttName = "4 Shell Tube",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m1014_tube.png", "smooth mips"),
        DefaultEles = {"ud_autoshotgun_tube_short"},
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"BUCK\" #00 Buckshot",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_shotgun_generic.png", "mips smooth"),
        Slot = "ud_ammo_shotgun",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "1014_parent",
        Offset = {
            vpos = Vector(0.7, -0.5, 4),
            vang = Angle(90, 0, -90),
        },
    },
}

local lookup_barrel = {
    default = 1,
    ud_m1014_barrel_short = 0,
}

local lookup_tube = {
    default = 0,
    ud_m1014_tube_ext = 1,
}

SWEP.Hook_ExtraFlags = function(wep, data)

    local barrel = wep.Attachments[2].Installed and lookup_barrel[wep.Attachments[2].Installed] or lookup_barrel["default"]
    local tube = wep.Attachments[7].Installed and lookup_tube[wep.Attachments[7].Installed] or lookup_tube["default"]

    if barrel < tube then
        table.insert(data, "nomuzzleblocking")
    end
end
--lua/weapons/arccw_ud_m16.lua:
return gluapack()()
--lua/weapons/arccw_ud_mini30.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_mini14.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets DMRs"
end

SWEP.PrintName = "Patriot 816"
SWEP.TrueName = "Mini Thirty"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

--SWEP.Attachments[1].Installed = "uc_optic_trijicon_tars"
--SWEP.Attachments[2].Installed = "ud_mini14_barrel_long"
SWEP.Attachments[4].Installed = "ud_mini14_receiver_762"
SWEP.Attachments[7].Installed = "ud_mini14_mag_10_762"
SWEP.Attachments[8].Installed = "ud_mini14_stock_polymer"
--lua/weapons/arccw_ud_m16.lua:
return gluapack()()
--lua/weapons/arccw_ud_r0635.lua:
return gluapack()()
--lua/weapons/arccw_ud_r870long.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_870.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Shotguns"
end

SWEP.PrintName = "Express-12 Pioneer"
SWEP.TrueName = "R870 Wingmaster"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[1].Installed = "ud_870_optic_ringsight"
SWEP.Attachments[2].Installed = "ud_870_barrel_long"
SWEP.Attachments[4].Installed = "ud_870_slide_long"
SWEP.Attachments[8].Installed = "ud_870_tube_reduced"

SWEP.Hook_NameChange = function()
    return (GetConVar("arccw_truenames"):GetBool() and "Remington 870") or "Express-12"
end

SWEP.NPCWeaponType = nil
--lua/weapons/arccw_ud_r870poly.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_870.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Shotguns"
end

SWEP.PrintName = "Express-12 Tactical"
SWEP.TrueName = "R870 Express Tactical"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[1].Installed = "ud_870_optic_ringsight"
SWEP.Attachments[4].Installed = "ud_870_slide_poly"
SWEP.Attachments[7].Installed = "ud_870_stock_poly"
SWEP.Attachments[8].Installed = "ud_870_tube_ext"

SWEP.Hook_NameChange = function()
    return (GetConVar("arccw_truenames"):GetBool() and "Remington 870") or "Express-12"
end
--lua/weapons/arccw_ud_uzi.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
SWEP.ShellScale = 1
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_9mm"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.PistolShellSoundsTable

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "IAL-9"

-- True name --

SWEP.TrueName = "Uzi"

-- Trivia --

SWEP.Trivia_Class = "Submachine Gun"
SWEP.Trivia_Desc = "Revolutionary submachine gun developed to arm a young State of Israel following the Second World War. Its ergonomic design, low cost, reliability, and great handling made it popular among militaries, police forces, and private security firms worldwide.\n\nBoasts excellent recoil control partially due to a below average cyclic rate. Good for hip firing in close quarters."
SWEP.Trivia_Manufacturer = "IAL Metal Industries"
SWEP.Trivia_Calibre = "9x19mm Parabellum"
SWEP.Trivia_Mechanism = "Open Bolt"
SWEP.Trivia_Country = "Israel"
SWEP.Trivia_Year = 1950

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Israeli Military Industries"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_uzi.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_uzi.mdl"
SWEP.ViewModelFOV = 70
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["9mm"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["9mm"].min
SWEP.Penetration = ArcCW.UC.StdDmg["9mm"].pen

SWEP.RangeMin = 15
SWEP.Range = 100 -- 4 shot until ~35m

SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 400
SWEP.PhysBulletMuzzleVelocity = 400

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 32
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 16

-- Recoil --

SWEP.Recoil = 0.28
SWEP.RecoilSide = 0.35

SWEP.RecoilRise = 0.2
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 0.6
SWEP.RecoilPunchBack = 1.5

SWEP.Sway = 0.3

-- Firerate / Firemodes --

SWEP.TriggerDelay = true

SWEP.Delay = 60 / 700
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
        Mult_TriggerDelayTime = 2,
    },
    {
        Mode = 1,
        Mult_TriggerDelayTime = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_smg1"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 6
SWEP.HipDispersion = 400
SWEP.MoveDispersion = 100
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "pistol"
SWEP.MagID = "uzi"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 200
SWEP.MalfunctionTakeRound = false

-- Speed multipliers --

SWEP.SpeedMult = 0.95
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.3
SWEP.ShootSpeedMult = 0.95

-- Length --

SWEP.BarrelLength = 24
SWEP.ExtraSightDist = 7

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, -2, 1)
SWEP.HolsterAng = Angle(-8.5, 8, -10)

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-2.869, -6, 1.95),
     Ang = Angle(0, 0, 0),
     Magnification = 1,
     SwitchToSound = "",
     ViewModelFOV = 55,
}

SWEP.ActivePos = Vector(0.4, -1.9, 1.4)
SWEP.ActiveAng = Angle(0, 0, -3)

SWEP.CustomizePos = Vector(5, -2, -2)
SWEP.CustomizeAng = Angle(15, 25, 0)

SWEP.CrouchPos = Vector(-3, -3, 0)
SWEP.CrouchAng = Angle(0, 0, -30)

SWEP.BarrelOffsetHip = Vector(4, 0, -4)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-16, 4, -3),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1
}

-- Firing sounds --
local path = ")weapons/arccw_ud/uzi/"
local path1 = ")weapons/arccw_ud/glock/"
local common = ")/arccw_uc/common/"
--SWEP.FirstShootSound = path .. "fire.ogg"
--SWEP.ShootSound = path .. "fire_auto.ogg"
SWEP.ShootSoundSilenced = path1 .. "fire_supp.ogg"
SWEP.ShootDrySound = path .. "dryfire.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}

local tail = ")/arccw_uc/common/9x19/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-9x19-smg-ext-01.ogg",
    tail .. "fire-dist-9x19-smg-ext-02.ogg",
    tail .. "fire-dist-9x19-smg-ext-03.ogg",
    tail .. "fire-dist-9x19-smg-ext-04.ogg",
    tail .. "fire-dist-9x19-smg-ext-05.ogg",
    tail .. "fire-dist-9x19-smg-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-pistol-01.ogg",
    common .. "fire-dist-int-pistol-02.ogg",
    common .. "fire-dist-int-pistol-03.ogg",
    common .. "fire-dist-int-pistol-04.ogg",
    common .. "fire-dist-int-pistol-05.ogg",
    common .. "fire-dist-int-pistol-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 0.5
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [1] = "uzi_b1", [2] = "uzi_b2", [3] = "uzi_b3", [4] = "uzi_b4"
}

SWEP.AttachmentElements = {

    ["ud_uzi_mag_20"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["ud_uzi_mag_40"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },
    ["ud_uzi_mag_100"] = {
        VMBodygroups = {{ind = 2, bg = 3}},
    },
    ["ud_uzi_mag_45_10"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["ud_uzi_mag_45_22"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },

    ["ud_uzi_rail_optic"] = {
        VMBodygroups = {{ind = 4, bg = 2}},
    },

    ["ud_uzi_clamp"] = {
        VMBodygroups = {{ind = 6, bg = 1}},
    },

    ["ud_uzi_rail_fg"] = {
        VMBodygroups = {{ind = 5, bg = 1}},
    },

    ["ud_uzi_stock_wood"] = {
        VMBodygroups = {{ind = 3, bg = 2}},
    },
    ["ud_uzi_stock_polymer"] = {
        VMBodygroups = {{ind = 3, bg = 3}},
    },
    ["ud_uzi_stock_folded"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
    },
    ["ud_uzi_stock_remove"] = {
        VMBodygroups = {{ind = 3, bg = 4}},
    },

    ["ud_uzi_body_carbine"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        NameChange = "IAL-C9",
        TrueNameChange = "Uzi Carbine",
        AttPosMods = {
            [4] = {
                vpos = Vector(-0.2, 0.5, 20.8),
            },
        },
    },
    ["ud_uzi_body_mini"] = {
        VMBodygroups = {{ind = 1, bg = 2}},
        NameChange = "IAL-S9",
        TrueNameChange = "Mini Uzi",
        AttPosMods = {
            [4] = {
                vpos = Vector(-0.2, 0.5, 11.8),
            },
        },
    },
    ["ud_uzi_body_micro"] = {
        VMBodygroups = {{ind = 1, bg = 3},{ind = 4, bg = 1},{ind = 3, bg = 4}},
        NameChange = "IAL-M9",
        TrueNameChange = "Micro Uzi",
        Override_IronSightStruct = {
            Pos = Vector(-2.869, 3, 1.95),
            Ang = Angle(-0, 0.035, 0),
            Magnification = 1,
            CrosshairInSights = false
        },
        AttPosMods = {
            [1] = {
                vpos = Vector(-0.2, -1.8, -1.5),
            },
            [4] = {
                vpos = Vector(-0.2, 0.3, 7.8),
            },
            [6] = {
                vpos = Vector(-0.25, 1.4, 6),
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["ud_uzi_body_civvy"] = {
        VMBodygroups = {{ind = 1, bg = 4}},
        NameChange = "IAL-C9 Model GB",
        TrueNameChange = "Uzi Action-B",
        AttPosMods = {
            [4] = {
                vpos = Vector(-0.2, 0.5, 23.8),
            },
        },
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    if !IsValid(vm) then return end
    local barrel = wep.Attachments[2].Installed
    if barrel == "ud_uzi_body_micro" then
        if wep.Attachments[1].Installed then
            vm:SetBodygroup(4, 3)
        end
        if wep.Attachments[6].Installed then
            vm:SetBodygroup(6, 0)
            vm:SetBodygroup(5, 2)
        end
    end
end

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

SWEP.Animations = {
    ["ready"] = {
        Source = "fix",
        Time = 40 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.15},
            {s = path .. "chback.ogg",         t = 0.3, c = ci},
            {s = path .. "chforward.ogg",         t = 0.65, c = ci},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster"] = {
        Source = "holster",
        Time = 0.25,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 0.25,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = path .. "chforward.ogg", t = 0 }},
    },

    ["trigger"] = {
        Source = "idle",
        Time = 0.025,
        SoundTable = {
            {s = path .. "prefire.ogg",         t = 0, c = ci},
        },
    },
    ["trigger_empty"] = {
        Source = "idle",
        Time = 0,
        SoundTable = nil,
    },

    ["fix"] = {
        Source = "fix",
        Time = 40 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.15},
            {s = path .. "chback.ogg",         t = 0.3, c = ci},
            {s = path .. "chforward.ogg",         t = 0.65, c = ci},
        },
    },
    ["fix_empty"] = {
        Source = "fix_empty",
        Time = 40 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.15},
            {s = path .. "chback.ogg",         t = 0.3, c = ci},
            {s = path .. "chforward.ogg",         t = 0.65, c = ci},
        },
    },

    ["fix_micro"] = {
        Source = "fix_micro",
        Time = 40 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.15},
            {s = path .. "chback.ogg",         t = 0.3, c = ci},
            {s = path .. "chforward.ogg",         t = 0.65, c = ci},
        },
    },
    ["fix_empty_micro"] = {
        Source = "fix_empty_micro",
        Time = 40 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.15},
            {s = path .. "chback.ogg",         t = 0.3, c = ci},
            {s = path .. "chforward.ogg",         t = 0.65, c = ci},
        },
    },

    -- 32 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 67 / 30,
        MinProgress = 1.2,
        LastClip1OutTime = 67 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = common .. "magpouch.ogg", t = 0.025},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.55, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.35, v = .35},
            {s = common .. "shoulder.ogg",  t = 1.75},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "magout.ogg",        t = 0.4, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = common .. "magpouch.ogg", t = 0.85},
            {s = common .. "magdrop_smg.ogg",  t = 1.0},
            {s = path .. "magin.ogg",         t = 1.1, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.25},
            {s = path .. "chback.ogg",         t = 1.935, c = ci},
            {s = path .. "chforward.ogg",         t = 2.15, c = ci},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 16 Round Reloads --

    ["reload_16"] = {
        Source = "reload_16",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 67 / 30,
        MinProgress = 1.2,
        LastClip1OutTime = 67 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = common .. "magpouch.ogg", t = 0.025},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.55, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.35, v = .35},
            {s = common .. "shoulder.ogg",  t = 1.75},
        },
    },
    ["reload_empty_16"] = {
        Source = "reload_empty_16",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "magout.ogg",        t = 0.4, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = common .. "magpouch.ogg", t = 0.85},
            {s = common .. "magdrop_smg.ogg",  t = 1.0},
            {s = path .. "magin.ogg",         t = 1.1, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.25},
            {s = path .. "chback.ogg",         t = 1.947, c = ci},
            {s = path .. "chforward.ogg",         t = 2.15, c = ci},
            {s = common .. "shoulder.ogg",  t = 2.45},
        },
    },

    -- 41 Round Reloads --

    ["reload_41"] = {
        Source = "reload_41",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 67 / 30,
        MinProgress = 1.2,
        LastClip1OutTime = 67 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = common .. "magpouch.ogg", t = 0.025},
            {s = path .. "magout.ogg",        t = 0.35, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.65, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.35, v = .35},
            {s = common .. "shoulder.ogg",  t = 1.75},
        },
    },
    ["reload_empty_41"] = {
        Source = "reload_empty_41",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "magout.ogg",        t = 0.4, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = common .. "magpouch.ogg", t = 0.85},
            {s = common .. "magdrop_smg.ogg",  t = 1.0},
            {s = path .. "magin.ogg",         t = 1.1, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.25},
            {s = path .. "chback.ogg",         t = 1.947, c = ci},
            {s = path .. "chforward.ogg",         t = 2.15, c = ci},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 100 Round Reloads --

    ["reload_100"] = {
        Source = "reload_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 67 / 30,
        MinProgress = 1.6,
        LastClip1OutTime = 1,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.75},
            {s = path .. "magin.ogg",         t = 1.15, c = ci},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = common .. "shoulder.ogg",  t = 1.95},
        },
    },
    ["reload_empty_100"] = {
        Source = "reload_empty_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        Time = 90 / 30,
        MinProgress = 2.4,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.25},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.75},
            {s = common .. "magdrop.ogg",  t = 1.0},
            {s = path .. "magin.ogg",         t = 1.15, c = ci},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = path .. "chback.ogg",         t = 2.0, c = ci},
            {s = path .. "chforward.ogg",         t = 2.25, c = ci},
            {s = common .. "shoulder.ogg",  t = 2.7},
        },
    },
}

SWEP.AutosolveSourceSeq = "idle"

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp","optic"}, -- ,"optic"
        Bone = "uzi_parent",
        Offset = {
            vpos = Vector(-0.2, -1.55, -0.5),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_uzi_rail_optic"}
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "10\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_uzi_body.png", "smooth mips"),
        Slot = "ud_uzi_frame",
        Bone = "uzi_parent",
        Offset = {
            vpos = Vector(2.6, -3.7, -17.3),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Caliber",
        DefaultAttName = "9x19mm Parabellum",
        DefaultAttIcon = Material("entities/att/uc_bullets/9x19.png", "smooth mips"),
        Slot = "ud_uzi_caliber",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "uzi_parent",
        Offset = {
            vpos = Vector(-0.2, 0.5, 14.8),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "uzi_parent",
        Offset = {
            vpos = Vector(-0.2, 1.85, 6.9), -- nice
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_uzi_rail_fg"},
        ExcludeFlags = {"micro"}
    },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "uzi_parent",
        Offset = {
            vpos = Vector(-1.35, 0.9,5.8),
            vang = Angle(90, 0, 180),
        },
        InstalledEles = {"ud_uzi_clamp"}
    },
    {
        PrintName = "Stock",
        Slot = {"ud_uzi_stock"},
        DefaultAttName = "Folding Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_uzi_stock.png", "smooth mips"),
        ExcludeFlags = {"micro"},
    },
    {
        PrintName = "Magazine",
        Slot = {"ud_uzi_mag"},
        DefaultAttName = "32-Round Mag",
        DefaultAttIcon = Material("entities/att/acwatt_ud_uzi_mag_32.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "uzi_parent",
        Offset = {
            vpos = Vector(0.4, 1.3, 2.3),
            vang = Angle(90, 0, -90),
        },
    },
}

--lua/weapons/arccw_ur_ak.lua:
return gluapack()()
--lua/weapons/arccw_ur_aks74u.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_ak.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "KFSU-76" -- make this something russian and cool
SWEP.TrueName = "AKS-74U"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ur_ak_barrel_krinkov"
SWEP.Attachments[5].Installed = "ur_ak_cal_545"
SWEP.Attachments[10].Installed = "ur_ak_stock_aks"

SWEP.NPCWeaponType = "weapon_smg1"
SWEP.Attachments[10].ToggleLock = true
--lua/weapons/arccw_ur_deagle.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_pistol_deagle"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/50ae.mdl"
SWEP.ShellScale = 1
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_9mm"
SWEP.ShellPitch = 90
SWEP.UC_ShellColor = Color(0.7*255, 0.2*255, 0.2*255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.TracerNum = 1
SWEP.TracerWidth = 1
SWEP.ShootPitch = 100

-- Fake name --

SWEP.PrintName = "Predator .50"

-- True name --

SWEP.TrueName = "Desert Eagle"

-- Trivia --

SWEP.Trivia_Class = "Pistol"
SWEP.Trivia_Desc = "Unorthodox pistol in both weight and design, marketed as an alternative to high-caliber revolvers. Its huge rounds, unrivaled in power for a handgun cartridge, can easily blast a human skull apart.\nDespite being one of the most famous weapons in action culture, it rarely sees practical use because of its massive, bulky frame and pointlessly large caliber.\n\nWe both know that won't stop you."
SWEP.Trivia_Manufacturer = "ISM"
SWEP.Trivia_Calibre = ".50 Action Express"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "Israel"
SWEP.Trivia_Year = 1983

-- Weapon slot --

SWEP.Slot = 1

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Magnum Research"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_deagle.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_deagle.mdl"
SWEP.ViewModelFOV = 60
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER

-- Damage parameters --

SWEP.Damage = 80 -- 2 shot close range kill
SWEP.DamageMin = 12 -- 9 shot long range kill (big bullet falls off quickly)
SWEP.RangeMin = 10
SWEP.Range = 120 -- 2 shot until ~50m
SWEP.Penetration = 9
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 470
SWEP.PhysBulletMuzzleVelocity = 470

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Jamming --

--SWEP.Malfunction = true
SWEP.MalfunctionJam = true
--SWEP.MalfunctionMean = 21
SWEP.MalfunctionPostFire = true
SWEP.MalfunctionTakeRound = false

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 7
SWEP.ExtendedClipSize = 14
SWEP.ReducedClipSize = 5

-- Recoil --

SWEP.Recoil = 3.95
SWEP.RecoilSide = 1

SWEP.RecoilRise = 0.5
SWEP.VisualRecoilMult = 1.5
SWEP.MaxRecoilBlowback = 2
SWEP.MaxRecoilPunch = 6

SWEP.Sway = 1.1

-- Firerate / Firemodes --

SWEP.Delay = 60 / 200
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_357"
SWEP.NPCWeight = 70

-- Accuracy --

SWEP.AccuracyMOA = 5
SWEP.HipDispersion = 600
SWEP.MoveDispersion = 200
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "357"
SWEP.MagID = "deagle"

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.25
SWEP.ShootSpeedMult = 0.8

-- Length --

SWEP.BarrelLength = 12
SWEP.ExtraSightDist = 10

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.3, 3, 1)
SWEP.HolsterAng = Angle(-5, 15, -20)

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "revolver"
SWEP.HoldtypeSights = "revolver"

SWEP.IronSightStruct = {
     Pos = Vector(-2.549, 1, 1.505),
     Ang = Angle(0, 0, 0),
     Magnification = 1.1,
     SwitchToSound = "",
     ViewModelFOV = 55,
}

SWEP.ActivePos = Vector(-0.5, 1.5, 1.15)
SWEP.ActiveAng = Angle(0.5, 0.5, -2)

SWEP.CustomizePos = Vector(-1, -2, 2)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2.2, 1, 0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-10.5, 4, -4),
    ang        =    Angle(-6, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
}

-- Weapon sounds --

local path = ")weapons/arccw_ur/deagle/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local rutle = {common .. "movement-smg-03.ogg",common .. "movement-smg-04.ogg"}

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}

SWEP.ShootSoundSilenced = path .. "fire_sup.ogg"
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/50ae/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-50ae-pistol-ext-01.ogg",
    tail .. "fire-dist-50ae-pistol-ext-02.ogg",
    tail .. "fire-dist-50ae-pistol-ext-03.ogg",
    tail .. "fire-dist-50ae-pistol-ext-04.ogg",
    tail .. "fire-dist-50ae-pistol-ext-05.ogg",
    tail .. "fire-dist-50ae-pistol-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-shotgun-01.ogg",
    common .. "fire-dist-int-shotgun-02.ogg",
    common .. "fire-dist-int-shotgun-03.ogg",
    common .. "fire-dist-int-shotgun-04.ogg",
    common .. "fire-dist-int-shotgun-05.ogg",
    common .. "fire-dist-int-shotgun-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 0.75
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [1] = "Bullet1",    [2] = "Bullet2",    [3] = "Bullet3", [4] = "Bullet4",    [5] = "Bullet5",    [6] = "Bullet6", [7] = "Bullet7"
}

SWEP.DefaultBodygroups = "000000000"

SWEP.AttachmentElements = {
    ["ur_deagle_barrel_modern"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
    },
    ["ur_deagle_barrel_compact"] = {
        VMBodygroups = {{ind = 1, bg = 5}},
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 0, .15),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["ur_deagle_barrel_compen"] = {
        VMBodygroups = {{ind = 1, bg = 4}},
    },
    ["ur_deagle_barrel_ext"] = {
        VMBodygroups = {{ind = 1, bg = 2}},
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 0, 1.95),
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["ur_deagle_barrel_marksman"] = {
        VMBodygroups = {{ind = 1, bg = 3}},
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.05, 5.1),
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["ur_deagle_barrel_annihilator"] = {
        VMBodygroups = {{ind = 1, bg = 6}},
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.05, 1.25),
                vang = Angle(90, 0, -90),
            },
        },
    },

    ["ur_deagle_mag_ext"] = {
        VMBodygroups = {{ind = 2, bg = 1}}
    },

    ["ur_deagle_grip_wooden"] = {
        VMBodygroups = {{ind = 4, bg = 1}}
    },
    ["ur_deagle_grip_rubber"] = {
        VMBodygroups = {{ind = 4, bg = 2}}
    },

    ["tac_rail"] = {
        VMBodygroups = {{ind = 5, bg = 1}}
    },
    ["ur_deagle_caliber_44"] = {
        VMBodygroups = {{ind = 6, bg = 1}}
    },
    ["ur_deagle_caliber_357"] = {
        VMBodygroups = {{ind = 6, bg = 2}}
    },
    ["ur_deagle_caliber_410"] = {
        VMBodygroups = {{ind = 6, bg = 3}}
    },

    ["ur_deagle_skin_black"] = {
        VMSkin = 1,
    },
    ["ur_deagle_skin_gold"] = {
        VMSkin = 2,
    },
    ["ur_deagle_skin_chrome"] = {
        VMSkin = 3,
    },
    ["ur_deagle_skin_modern"] = {
        VMBodygroups = {{ind = 0, bg = 1}},
        VMSkin = 3,
    },    
    ["ur_deagle_skin_sex"] = {
        VMBodygroups = {{ind = 0, bg = 1}},
        VMSkin = 4,
    },
}

SWEP.Hook_ModifyBodygroups = function(wep,data)
    local vm = data.vm
    if !IsValid(vm) then return end
    local optic = wep.Attachments[1].Installed
    local tritium = (optic == "ur_deagle_tritium")
    local barrel = wep.Attachments[2].Installed or 0

    if tritium then
        -- Setup for when we introduce new barrel options
        if barrel == "ur_deagle_barrel_marksman" then
            vm:SetBodygroup(3,3)
        elseif barrel == "ur_deagle_barrel_ext" then
            vm:SetBodygroup(3,2)
        elseif barrel == "ur_deagle_barrel_compact" then
            vm:SetBodygroup(3,4)
        elseif barrel == "ur_deagle_barrel_annihilator" then
            vm:SetBodygroup(3,5)
        else
            vm:SetBodygroup(3,1)
        end
    -- elseif optic and barrel == 0 then
    --     vm:SetBodygroup(1,1)
    end

    if barrel == "ur_deagle_barrel_annihilator" then
        if vm:GetBodygroup(5) == 1 then
            vm:SetBodygroup(5,2)
        end
    end
end

SWEP.Hook_NameChange = function(wep, name)
    if wep.Attachments[2].Installed == "ur_deagle_barrel_annihilator" then
        return "Annihilator"
    elseif !GetConVar("arccw_truenames"):GetBool() then
        local add = ".50"
        local cal = wep.Attachments[3].Installed

        if cal == "ur_deagle_caliber_357" then
            add = ".357"
        elseif cal == "ur_deagle_caliber_44" then
            add = ".44"
        elseif cal == "ur_deagle_caliber_410" then
            add = ".410"
        end

        return "Predator " .. add
    else
        return "Desert Eagle"
    end
end

-- Animations --

SWEP.Animations = {
    ["idle_empty"] = {
        Source = "idle_empty",
        Time = 120 / 60,
    },
    ["idle_jammed"] = {  -- pistol-like malfucntions not implemented yet in arccw
        Source = "idle_jammed",
        Time = 120 / 60,
    },
    ["idle"] = {
        Source = "idle",
        Time = 120 / 60,
    },
    ["ready"] = {
        Source = "ready",
        Time = 73 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = path .. "slidepull.ogg", t = 12 / 60, c = ca },
            { s = path .. "chamber.ogg", t = 20 / 60, c = ca },
        },
    },
    ["draw"] = {
        Source = "draw",
        ProcDraw = true,
        SoundTable = {
            --{s = path .. "draw.ogg", t = 0}, -- Not Temporary
            {s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["holster"] = {
        Source = "holster",
        ProcHolster = true,
        SoundTable = {
            {s = rottle, t = 0},
            --{s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },

    ["fire"] = {
        Source = {"fire_01", "fire_02", "fire_03"},
        Time = 0.9,
        ShellEjectAt = 0.05,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = {"fire_01", "fire_02", "fire_03"},
        Time = 0.9,
        ShellEjectAt = 0.05,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_jammed"] = {
        Source = "fire_jammed",
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 0.9,
        ShellEjectAt = 0.05,
        SoundTable = {{ s = path .. "mech_last.ogg", t = 0 }},
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 0.9,
        ShellEjectAt = 0.05,
        SoundTable = {{ s = path .. "mech_last.ogg", t = 0 }},
    },

    -- 7-R Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.3525,
        Time = 2.2,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.6,
        LHIKOut = 0.62,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout.ogg", t = 6 / 60, c = ca },
            { s = rottle, t = 10 / 60, c = ca },
            { s = common .. "magpouch_pull_small.ogg", t = 30 / 60, c = ca },
            { s = rottle, t = 55 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 61 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 66 / 60, c = ca },
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.75,
        Time = 2.55,
        LastClip1OutTime = 0.76,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.55,
        LHIKOut = 0.7,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout_old.ogg", t = 8 / 60, c = ca },
            { s = rottle, t = 10 / 60, c = ca },
            { s = common .. "magpouch_pull_small.ogg", t = 26 / 60, c = ca },
            { s = common .. "pistol_magdrop.ogg", t = 40 / 60, c = ca },
            { s = rottle, t = 55 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 58 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 62 / 60, c = ca },
            { s = path .. "chamber.ogg", t = 90 / 60, c = ca },
            { s = rottle, t = 75 / 60, c = ca },
        },
    },

    -- 10-R Reloads --

    ["reload_10"] = {
        Source = "reload_exte",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.3525,
        Time = 139 / 60,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.6,
        LHIKOut = 0.62,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout.ogg", t = 6 / 60, c = ca },
            { s = rottle, t = 10 / 60, c = ca },
            { s = common .. "magpouch.ogg", t = 30 / 60, c = ca },
            { s = rottle, t = 55 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 64 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 71 / 60, c = ca },
        },
    },
    ["reload_empty_10"] = {
        Source = "reload_empty_exte",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.75,
        Time = 160 / 60,
        LastClip1OutTime = 0.76,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.55,
        LHIKOut = 0.7,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout_old.ogg", t = 8 / 60, c = ca },
            { s = rottle, t = 10 / 60, c = ca },
            { s = common .. "magpouch.ogg", t = 26 / 60, c = ca },
            { s = common .. "pistol_magdrop.ogg", t = 40 / 60, c = ca },
            { s = rottle, t = 55 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 60 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 66 / 60, c = ca },
            { s = path .. "chamber.ogg", t = 94 / 60, c = ca },
            { s = rottle, t = 75 / 60, c = ca },
        },
    },

    ["unjam"] = {
        Source = "unjam",
        Time = 0.9,
        -- ShellEjectAt = 0.65,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "unjam.ogg", t = .4}
        },
        LHIK = true,
        LHIKIn = .2,
        LHIKOut = .2,
        LHIKEaseOut = .75,
    },
    -- Inspecc --
                                    -- disabled due to suck balls
    ["enter_inspect"] = {
        Source = "enter_inspect",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = rutle, t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "idle_inspect",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect"] = {
        Source = "exit_inspect",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout.ogg", t = 8 / 60, c = ca },
            { s = rottle, t = 100 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 106 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 114 / 60, c = ca },
            { s = path .. "rack1.ogg", t = 155 / 60, c = ca },
            { s = rottle, t = 160 / 60, c = ca },
            { s = path .. "rack2.ogg", t = 178 / 60, c = ca },
            { s = rottle, t = 180 / 60, c = ca },
        },
    },

    ["enter_inspect_empty"] = {
        Source = "enter_inspect_empty",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKOut = 0,
        SoundTable = {
        },
    },
    ["idle_inspect_empty"] = {
        Source = "idle_inspect_empty",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty"] = {
        Source = "exit_inspect_empty",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout.ogg", t = 8 / 60, c = ca },
            { s = rottle, t = 100 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 106 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 114 / 60, c = ca },
            { s = rottle, t = 160 / 60, c = ca },
        },
    },

    ["enter_inspect_jammed"] = {
        Source = "enter_inspect_jammed",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKOut = 0,
        SoundTable = {
        },
    },
    ["idle_inspect_jammed"] = {
        Source = "idle_inspect_jammed",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_jammed"] = {
        Source = "exit_inspect_jammed",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            { s = rottle, t = 0 / 60, c = ca },
            { s = common .. "magrelease.ogg", t = 7 / 60, c = ca },
            { s = path .. "magout.ogg", t = 8 / 60, c = ca },
            { s = rottle, t = 100 / 60, c = ca },
            { s = path .. "magin_miss.ogg", t = 106 / 60, c = ca },
            { s = path .. "magin_old.ogg", t = 114 / 60, c = ca },
            { s = rottle, t = 160 / 60, c = ca },
        },
    },
}

-- ADS animation blending, thanks fesiug --

SWEP.Hook_Think = function(wep)
    if IsValid(wep) and wep.ArcCW then
        local vm = wep:GetOwner():GetViewModel()

        local delta = 1-wep:GetSightDelta()

        local bipoded = wep:GetInBipod()
        wep.ADSBipodAnims = math.Approach(wep.ADSBipodAnims or 0, bipoded and 1 or 0, FrameTime() / 0.5)

        vm:SetPoseParameter("sights", Lerp( math.ease.InOutCubic(math.max(delta, wep.ADSBipodAnims)), 0, 1)) -- thanks fesiug

        local slot = wep.Attachments[3].Installed
        if wep.Attachments[7].Installed or slot == "ur_deagle_caliber_357" then
            vm:SetPoseParameter("light", 1)
        elseif slot == "ur_deagle_caliber_44" then
            vm:SetPoseParameter("light", .5)
        else
            vm:SetPoseParameter("light", 0)
        end
    end
end


-- Attachments --

SWEP.CamAttachment = 3

SWEP.Attachments = {
    {
        PrintName = "Optic",
        Slot = {"optic_lp","ur_deagle_tritium","optic"},
        DefaultAttName = "Iron Sights",
        Bone = "Body",
        Offset = {
            vpos = Vector(0, -5.15, 6.4),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Barrel",
        Slot = {"ur_deagle_barrel"},
        DefaultAttIcon = Material("entities/att/acwatt_ur_deagle_barrel.png","mips smooth"),
        DefaultAttName = "6\" Standard Barrel",
        Bone = "Body",
        Offset = {
            vpos = Vector(3.07, -3.8, -27),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Caliber",
        Slot = {"ur_deagle_caliber"},
        DefaultAttIcon = Material("entities/att/uc_bullets/50ae.png","mips smooth"),
        DefaultAttName = ".50 Action Express",
        Bone = "Body",
        Offset = {
            vpos = Vector(3.07, -3.8, -27),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "Barrel",
        Offset = {
            vpos = Vector(0, 0, 0.75),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"nofh"},
        ExcludeFlags = {"barrel_annihilator"},
		Hidden = true,
		Integral = true,
    },
    {
        PrintName = "Tactical",
        InstalledEles = {"tac_rail"},
        Slot = {"tac_pistol"},
        Bone = "Body",
        Offset = {
            vpos = Vector(0, -3.5, 7),
            vang = Angle(90, 0, -90),
        },
        MergeSlots = {15},
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_deagle_mag"},
        DefaultAttIcon = Material("entities/att/acwatt_ur_deagle_mag_7.png","mips smooth"),
        DefaultAttName = "7-Round Mag",
    },
    {
        PrintName = "Stock",
        Slot = {"uc_stock", "go_stock_pistol_bt"},
        VMScale = Vector(1.1, 1.1, 1.1),
        Bone = "Body",
        Offset = {
            vpos = Vector(0, -0.25, -1),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Grip",
        DefaultAttName = "Factory Grip",
        DefaultAttIcon = Material("entities/att/acwatt_ur_deagle_grip_plastic.png","mips smooth"),
        Slot = "ur_deagle_grip"
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm","fml_charm"},
        FreeSlot = true,
        Bone = "Body",
        Offset = {
            vpos = Vector(0.55, -3.4, 4.2),
            vang = Angle(90, 0, -90),
        },
        VMScale = Vector(.65,.65,.65),
    },
    {
        PrintName = "Finish",
        Slot = {"ur_deagle_skin"},
        DefaultAttName = "Stainless Steel",
        DefaultAttIcon = Material("entities/att/acwatt_ur_deagle_finish_default.png","mips smooth"),
        FreeSlot = true,
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "Body",
        Offset = {
            vpos = Vector(0, -4.8, 6.0),
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
    }
}
--lua/weapons/arccw_ur_dbsawn.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_db.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Shotguns"
end

SWEP.PrintName = "Volga Sawed-off"
SWEP.TrueName = "IZh-58 Sawed-off"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[1].Installed = "ur_dbs_barrel_sawedoff"
SWEP.Attachments[3].Installed = "ur_dbs_stock_sawedoff"
SWEP.Attachments[7].Installed = "ur_dbs_fg_extractor"

SWEP.Hook_NameChange = function()
    return (GetConVar("arccw_truenames"):GetBool() and "IZh-58") or "Volga SuperShotgun"
end
--lua/weapons/arccw_ur_hk33ka3.lua:
if true then return end
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_g3.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "CN66K"
SWEP.TrueName = "HK33KA3"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ur_g3_barrel_12"
SWEP.Attachments[3].Installed = "ur_g3_rec_hk33"
SWEP.Attachments[4].Installed = "ur_g3_hg_slim"
SWEP.Attachments[8].Installed = "ur_g3_stock_collapsible"
-- SWEP.Attachments[9].Installed = "ur_g3_mag_20_556"

SWEP.Attachments[8].ToggleLock = true
--lua/weapons/arccw_ur_m45.lua:
return gluapack()()
--lua/weapons/arccw_ur_mp5a3.lua:
return gluapack()()
--lua/weapons/arccw_ur_mp5kpdw.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_mp5.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets SMGs"
end

SWEP.PrintName = "PK5C-PDW" -- make this something russian and cool
SWEP.TrueName = "MP5K-PDW"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ur_mp5_barrel_kurz"
--SWEP.Attachments[3].Installed = "ur_mp5_caliber_noburst"
--SWEP.Attachments[5].Installed = "ur_mp5_ub_kurzgrip"
SWEP.Attachments[8].Installed = "ur_mp5_stock_pdw"
SWEP.Attachments[9].Installed = "ur_mp5_mag_15"

SWEP.Attachments[8].ToggleLock = true
--lua/weapons/arccw_ur_obrez.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_aw.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "Apex Precision Obrez"
SWEP.TrueName = "AWP Obrez"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ur_aw_barrel_short"
SWEP.Attachments[3].Installed = "ur_aw_muzzle_brake_sights"
--SWEP.Attachments[4].Installed = "ur_aw_cal_338"
SWEP.Attachments[8].Installed = "ur_aw_stock_none"

SWEP.Hook_NameChange = function(wep,name)
    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_aw_barrel_", "")
    local cal = string.Replace(atts[4].Installed or "default", "ur_aw_cal_", "")
    local stock = string.Replace(atts[8].Installed or "default", "ur_aw_stock_", "")

    if GetConVar("arccw_truenames"):GetBool() then
        if cal ~= "default" then
            return "AWM"
        elseif barr == "sd" then
            return "AWS"
        elseif stock == "at" then
            return "AT"
        else
            return "AWP"
        end
    else
        if cal == "338" then
            return "Apex Magnum"
        elseif barr == "sd" then
            return "Apex Spectre"
        elseif stock == "at" then
            return "Apex Tactical"
        else
            return "Apex Precision"
        end
    end
end
--lua/weapons/arccw_ur_pp19.lua:
return gluapack()()
--lua/weapons/arccw_ur_rpk74m.lua:
return gluapack()()
--lua/weapons/arccw_ur_rpk74m.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_ak.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets LMGs"
end

SWEP.PrintName = "PKF-76M"
SWEP.TrueName = "RPK-74M"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ur_ak_barrel_rpk"
SWEP.Attachments[3].Installed = "ur_ak_hg_rpk74m"
SWEP.Attachments[4].Installed = "uc_muzzle_fhider1"
SWEP.Attachments[5].Installed = "ur_ak_cal_545"
SWEP.Attachments[6].Installed = "ur_ak_mag_545_45"
SWEP.Attachments[9].Installed = "ur_ak_grip_alpha"
SWEP.Attachments[10].Installed = "ur_ak_stock_rpk"
--addons/[binbon]misc/lua/weapons/bomonti_filtresiz.lua:
return gluapack()()
--addons/dradio/lua/weapons/dradio/shared.lua:

SWEP.PrintName = "Radyo"
SWEP.Slot = 4
SWEP.SlotPos = 1
SWEP.DrawAmmo = false
SWEP.DrawCrosshair = false
SWEP.Author = "BinBon"
SWEP.Purpose = "Voice Communication"
SWEP.Instructions = ""
SWEP.Category = "Dan's Addons"

SWEP.Spawnable = true
SWEP.AdminSpawnable = true
SWEP.UseHands = true
SWEP.ViewModel = "models/danradio/c_radio.mdl"
SWEP.WorldModel = "models/danradio/w_radio.mdl"
 
SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = "none"
SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"


function SWEP:Deploy()

	self:SetHoldType("slam")

end


--CONFIGURATION - ANY CHANGES REQUIRE RESTART

local function CreateConfig()
	RADIO = {}
	RADIO.RADIOCHANNELS = {

		{
			name = "Polis Teşkilatı", 
			frequency = 155, 
			teams = {
				TEAM_MAYOR,
				TEAM_POH,
				TEAM_HAKIM,
				TEAM_BEKCI,
				TEAM_EMNIYETAMIR, 
				TEAM_BASKANKORUMA,
				TEAM_POHAMIR,
				TEAM_POHDOKTOR,
				TEAM_POHKESKIN,
				TEAM_CIA,
				TEAM_AGIRZIRH,
				TEAM_Polis,
			}
		},
		/*
		{name = YOUR TITLE, frequency = SECURE FREQUENCY VALUE, TEAMS = {YOUR_TEAM, YOUR_TEAMA, YOUR_TEAMB,}}, <--- Needs comma after every entry.
		{name = YOUR TITLE, frequency = SECURE FREQUENCY VALUE, TEAMS = {YOUR_TEAM, YOUR_TEAMA, YOUR_TEAMB,}}, <-- Do not make a ticket about this.
		FOR CUSTOM GAMEMODES REPLACE TEAM_WHATEVER with either a team NUMBER or a team ENUMERATOR.
		*/

	}
	
	RADIO.WhileHolding = false -- True: Radio must be in hand to speak False: Radio just has to be on the person. FIXED NOW
	RADIO.FailMessage = "Mesaj iletimi başarısız oldu. Radyonuz kapalı veya geçersiz bir frekans kullanıyor."
	RADIO.ChatCommand = "/r"
	RADIO.SpawnActive = false
	RADIO.AllowWeaponsInVehicles = false -- Enabling this will allow users to use SWEPS while in vehicles. This does not limit weapon usage to just the radio.
	RADIO.MenuKey = KEY_C -- Key used to open the menu
end

CreateConfig()

if DCONFIG then 
	hook.Add("DConfigDataLoaded", "CreateRadioChannels", function() //ANY CHANGES REQUIRE  A RESTART
		CreateConfig()
	end) 
else 
	hook.Add("Initialize", "CreateRadioChannels", function()
		CreateConfig()
	end)
end 


--IF RECEIVE THIS ERROR: [ERROR] addons/dradio/lua/weapons/dradio/cl_init.lua:X: attempt to index upvalue 'staticSound' (a nil value)
--IT'S BECAUSE YOU MADE A CHANGE AND DID NOT RESTART YOUR SERVER.
--Thank u
--addons/[binbon]misc/lua/weapons/efes_pilsen.lua:
return gluapack()()
--addons/ch_mining/lua/weapons/gmod_tool/stools/ch_mining.lua:
TOOL.Category = "Crap-Head Scripts"
TOOL.Name = "Setup Minerals"

TOOL.Information = {
	{ name = "left" },
	{ name = "right" }
}

if CLIENT then
	language.Add( "tool.ch_mining.name", "Setup Minerals" )
	language.Add( "tool.ch_mining.desc", "Configure, spawn & save mining entities" )
	
	language.Add( "tool.ch_mining.selecttype", "Select mineral" )
	language.Add( "tool.ch_mining.minerals", "Amount of minerals" )
	language.Add( "tool.ch_mining.durability", "Rock durability" )
	language.Add( "tool.ch_mining.scale", "Rock scale" )
	language.Add( "tool.ch_mining.small_rocks", "Show small rocks" )
	
	language.Add( "tool.ch_mining.left", "Spawn selected mineral at your aim." )
	language.Add( "tool.ch_mining.right", "Save all entities." )
end

TOOL.ClientConVar[ "mineral_type" ] = "None selected"
TOOL.ClientConVar[ "minerals" ] = CH_Mining.Config.MinimumMinerals
TOOL.ClientConVar[ "durability" ] = CH_Mining.Config.MinimumDurability
TOOL.ClientConVar[ "scale" ] = 1
TOOL.ClientConVar[ "small_rocks" ] = 1

local map = string.lower( game.GetMap() )

function TOOL:LeftClick( tr )
	local cur_time = CurTime()
	
	if ( self.LastUsed or 0 ) > cur_time then
		return
	end
	self.LastUsed = cur_time + 1
	
	local target = tr.Entity
	local hitpos = tr.HitPos + tr.HitNormal
	local ply = self:GetOwner()
	
	if not SERVER then
		return
	end
	
	-- Admin only check
	if not ply:IsSuperAdmin() then
		CH_Mining.NotifyPlayer( ply, "Only administrators can perform this action!" )
		return
	end

	-- Server variables from Q menu
	local selected_type = self:GetClientInfo( "mineral_type" )
	
	-- Must have selected an entity
	if selected_type == "None selected" then
		CH_Mining.NotifyPlayer( ply, "You must select a type of mineral from the list!" )
		return
	end
	
	if selected_type == "Random" then
		local rand_mineral_keys = table.GetKeys( CH_Mining.Rocks )
		local rand_mineral = table.Random( rand_mineral_keys )
		
		selected_type = rand_mineral
	end
	
	local rock_scale = self:GetClientInfo( "scale" )
	local show_small_rocks = tonumber( self:GetClientInfo( "small_rocks" ) )
	local minerals_amount = self:GetClientInfo( "minerals" )
	local rock_durability = self:GetClientInfo( "durability" )
	
	local rock_entity = ents.Create( "ch_mining_rock" )
	rock_entity:SetPos( hitpos )
	rock_entity:SetAngles( Angle( 0, ply:GetAngles().y - 180, 0 ) )
	rock_entity:SetCreator( ply )
	rock_entity:Spawn()
	rock_entity:SetModelScale( rock_entity:GetModelScale() * rock_scale, 0 ) -- scale based on settings
	rock_entity:Activate()
	
	-- Set mineral type
	rock_entity:SetMineralType( selected_type )
	
	-- Adjust bodygroup
	if show_small_rocks == 0 then
		rock_entity:SetBodygroup( 1, 1 )
	elseif show_small_rocks == 1 then
		rock_entity:SetBodygroup( 1, 0 )
	end
	
	-- Set amount of minerals
	rock_entity:SetStartMinerals( minerals_amount )
	rock_entity:SetMineralsLeft( minerals_amount )
	
	-- Set amount of minerals
	rock_entity:SetStartDurability( rock_durability )
	rock_entity:SetDurabilityLeft( rock_durability )
	
	-- Save it immediately
	local ent_table = {
		EntityVector = rock_entity:GetPos(),
		EntityAngles = rock_entity:GetAngles(),
		MineralType = rock_entity:GetMineralType(),
		Scale = rock_entity:GetModelScale(),
		SmallRocks = rock_entity:GetBodygroup( 1 ),
		MineralsAmount = rock_entity:GetStartMinerals(),
		Durability = rock_entity:GetStartDurability(),
	}
	
	local auto_increment_id = 0
	
	for k, v in ipairs( file.Find( "craphead_scripts/ch_mining/".. map .."/rock_*.json", "DATA" ) ) do
		auto_increment_id = auto_increment_id + 1
	end
	file.Write( "craphead_scripts/ch_mining/".. map .."/rock_".. auto_increment_id + 1 ..".json", util.TableToJSON( ent_table ), "DATA" )
	
	rock_entity.FileName = "rock_".. auto_increment_id ..".json"

	-- Notify player
	CH_Mining.NotifyPlayer( ply, "The rock has successfully been spawned." )
	CH_Mining.NotifyPlayer( ply, "Right click to save all rocks to the map." )
end

function TOOL:RightClick( tr )
	local cur_time = CurTime()
	
	if ( self.LastUsed or 0 ) > cur_time then
		return
	end
	self.LastUsed = cur_time + 1

	if not SERVER then
		return
	end
	
	local ply = self:GetOwner()
	ply:ConCommand( "ch_mining_saveents" )
end

function TOOL.BuildCPanel( panel )
	panel:SetName( "#tool.ch_mining.name" )
	
	panel:AddControl( "Header", { Description = "#tool.ch_mining.desc" } )
	
	local combo = panel:AddControl( "ListBox", { Label = "#tool.ch_mining.selecttype" } )
	for k, type in pairs( CH_Mining.Rocks ) do
		combo:AddOption( type.Name, { ch_mining_mineral_type = type.Name } )
	end
	combo:AddOption( "Random", { ch_mining_mineral_type = "Random" } )
	
	panel:AddControl( "Slider", { Label = "#tool.ch_mining.minerals", Command = "ch_mining_minerals", Type = "Int", Min = CH_Mining.Config.MinimumMinerals, Max = CH_Mining.Config.MaximumMinerals } )
	panel:AddControl( "Slider", { Label = "#tool.ch_mining.durability", Command = "ch_mining_durability", Type = "Float", Min = CH_Mining.Config.MinimumDurability, Max = CH_Mining.Config.MaximumDurability } )
	panel:AddControl( "Slider", { Label = "#tool.ch_mining.scale", Command = "ch_mining_scale", Type = "Float", Min = 0.4, Max = 2 } )
	panel:AddControl( "Checkbox", { Label = "#tool.ch_mining.small_rocks", Command = "ch_mining_small_rocks" } )
end

local tool_col_bg = Color( 62, 173, 229, 255 )

function TOOL:DrawToolScreen( w, h )
	-- Draw tool background
	surface.SetDrawColor( tool_col_bg )
	surface.DrawRect( 0, 0, w, h )
	
	local selected_type = self:GetClientInfo( "mineral_type" )
	local minerals_amount = self:GetClientInfo( "minerals" )
	local rock_durability = self:GetClientInfo( "durability" )
	
	-- Draw title
	draw.SimpleText( "#tool.ch_mining.name", "CH_Mining_Font_Toolgun", w / 2, h * 0.15, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	
	-- Draw info
	draw.SimpleText( "Selected: ".. selected_type, "CH_Mining_Font_Toolgun", w * 0.05, h * 0.3, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_LEFT )
	
	draw.SimpleText( "Minerals: ".. minerals_amount, "CH_Mining_Font_Toolgun", w * 0.05, h * 0.45, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_LEFT )
	
	draw.SimpleText( "Durability: ".. rock_durability, "CH_Mining_Font_Toolgun", w * 0.05, h * 0.60, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_LEFT )
end

-- Credits to https://github.com/Facepunch/garrysmod/blob/master/garrysmod/gamemodes/sandbox/entities/weapons/gmod_tool/stools/button.lua
-- Modified code 15-09-2022
function TOOL:UpdateGhostEntity( ent, ply )
	if not IsValid( ent ) then
		return
	end

	local trace = ply:GetEyeTrace()
	local target = trace.Entity
	
	if ( not trace.Hit or IsValid( target ) and ( target:GetClass() == "ch_mining_rock" or target:IsPlayer() ) ) then
		ent:SetNoDraw( true )
		return
	end

	local ang = Angle( 0, ply:GetAngles().y - 180, 0 )

	local min = ent:OBBMins()
	ent:SetPos( trace.HitPos - trace.HitNormal * min.z )
	ent:SetAngles( ang )

	ent:SetNoDraw( false )
end

function TOOL:Think()
	local mdl = "models/craphead_scripts/mining/craphead_miningrock.mdl"

	if not IsValid( self.GhostEntity ) or self.GhostEntity:GetModel() != mdl then
		self:MakeGhostEntity( mdl, Vector( 0, 0, 0 ), Angle( 0, 0, 0 ) )
	end

	self:UpdateGhostEntity( self.GhostEntity, self:GetOwner() )
end
--addons/realisticcardealer/lua/weapons/gmod_tool/stools/rcd_npc_config.lua:
AddCSLuaFile()

TOOL.Category = "Realistic Car Dealer"
TOOL.Name = "Setup NPC"
TOOL.Author = "Kobralost"

if CLIENT then 
	TOOL.Information = {
		{ name = "left" },
		{ name = "right" },
		{ name = "reload" },
	}

	language.Add("tool.rcd_npc_config.name", RCD.GetSentence("toolName"))
	language.Add("tool.rcd_npc_config.desc", RCD.GetSentence("toolDesc"))
end

local function paintCPanel(CPanel)
	CPanel.Paint = function(self,w,h)
		draw.RoundedBox(4, 0, 0, w, h, color_black)
		
		surface.SetDrawColor(RCD.Colors["white"])
		surface.SetMaterial(RCD.Materials["background"])
		surface.DrawTexturedRect(0, 0, w, h)

		surface.SetDrawColor(RCD.Colors["white100"])
		surface.SetMaterial(RCD.Materials["logo"])
		surface.DrawTexturedRect(w/2-RCD.ScrH*0.1, h*0.1, RCD.ScrH*0.2, RCD.ScrH*0.2)
	end
	
	local mainPanel = vgui.Create("DPanel")
	mainPanel:SetSize(RCD.ScrW*0.3, RCD.ScrH*0.3)
	mainPanel:SetPos(0,0)
	mainPanel.Paint = function(self,w,h) end

	CPanel:AddPanel(mainPanel)

    local openMenu = vgui.Create("RCD:SlideButton", mainPanel)
    openMenu:SetText(RCD.GetSentence("openAdminConfiguration"))
    openMenu:SetFont("RCD:Font:12")
    openMenu:SetTextColor(RCD.Colors["white"])
    openMenu:InclineButton(0)
    openMenu.MinMaxLerp = {100, 200}
    openMenu:SetIconMaterial(nil)
    openMenu:SetButtonColor(RCD.Colors["purple"])
	openMenu.Think = function()
		openMenu:SetPos(0, RCD.ScrH*0.22)
		openMenu:SetSize(CPanel:GetWide(), RCD.ScrH*0.041)
	end
    openMenu.DoClick = function()
		RCD.Settings()
    end
end

function TOOL.BuildCPanel(CPanel)
	if CLIENT then
		CPanel:AddControl("Header", {
			Text = "#tool.rcd_npc_config.name",
			Description = ""
		})

		paintCPanel(CPanel)
	end
end

function TOOL:LeftClick(trace)
	local ply = self:GetOwner()
	if not IsValid(ply) or not ply:IsPlayer() then return end
	if not RCD.AdminRank[ply:GetUserGroup()] then return end

	ply.RCD = ply.RCD or {}

	local curTime = CurTime()

	ply.RCD["toolSpam"] = ply.RCD["toolSpam"] or 0
    if ply.RCD["toolSpam"] > curTime then return end
    ply.RCD["toolSpam"] = curTime + 0.5

	local trace = util.TraceLine({
		start = ply:EyePos(),
		endpos = ply:EyePos() + ply:EyeAngles():Forward() * 300,
		filter = function(ent) if ent:GetClass() == "prop_physics" then return true end end
	})
	local pos = trace.HitPos

	if SERVER then
		local angSet = Angle(0, ply:GetAimVector():Angle().Yaw - 180, 0)
		local placePlateform = RCD.GetNWVariables("rcd_place_plateform", ply)

		if not placePlateform then
			local ent = ply:GetEyeTrace().Entity
			local npcId
			if IsValid(ent) && ent:GetClass() == "rcd_cardealer" then
				npcId = ent.NPCId
			else
				RCD.CreateNPC(nil, "Default Name", "models/breen.mdl", pos, angSet, {}, {}, string.lower(game.GetMap()))
			end

			local npcInfo = RCD.GetNPCInfo(ent)
			if not istable(npcInfo) then return end
			
			ply:RCDSendAllGroups()

			net.Start("RCD:Admin:Configuration")
				net.WriteUInt(8, 4)
				net.WriteUInt(npcId, 32)
				net.WriteString(npcInfo["model"])
				net.WriteString(npcInfo["name"])
				net.WriteUInt(table.Count(npcInfo["groups"]), 12)
				for k, v in pairs(npcInfo["groups"]) do
					if not v then continue end

					net.WriteUInt(k, 32)
				end
				net.WriteUInt(#npcInfo["plateforms"], 12)
				for k, v in pairs(npcInfo["plateforms"]) do
					net.WriteVector(v.pos)
					net.WriteAngle(v.ang)
				end
			net.Send(ply)
		end
	else 
		local placePlateform = RCD.GetNWVariables("rcd_place_plateform", LocalPlayer())
		if placePlateform then
			local angSet = Angle(0, ply:GetAimVector():Angle().Yaw - 90, 0)

			RCD.CreateRCDPlateform(pos, angSet)
		end
	end
end

function TOOL:RightClick(trace)
	if SERVER then
		local placePlateform = RCD.GetNWVariables("rcd_place_plateform", self:GetOwner())
		if placePlateform then return end

		local ply = self:GetOwner()
		if not IsValid(ply) or not ply:IsPlayer() then return end
		if not RCD.AdminRank[ply:GetUserGroup()] then return end

		local curTime = CurTime()

		ply.RCD["toolSpam"] = ply.RCD["toolSpam"] or 0
		if ply.RCD["toolSpam"] > curTime then return end
		ply.RCD["toolSpam"] = curTime + 0.5

		local ent = ply:GetEyeTrace().Entity
		RCD.RemoveNPC(ent.NPCId, true)
	else
		local curTime = CurTime()

		RCD["toolSpam"] = RCD["toolSpam"] or 0
		if RCD["toolSpam"] > curTime then return end
		RCD["toolSpam"] = curTime + 0.5

		local placePlateform = RCD.GetNWVariables("rcd_place_plateform", LocalPlayer())
		if not placePlateform then return end

		RCD["plateforms"] = RCD["plateforms"] or {}

		local ent = RCD["plateforms"][#RCD["plateforms"]]
		if IsValid(ent) then
			ent:Remove()
			RCD["plateforms"][#RCD["plateforms"]] = nil
		end
	end
end 

function TOOL:CreateRCDEnt()
	if CLIENT then
		if not IsValid(self.RCDEnt) then
 			self.RCDEnt = ClientsideModel("models/breen.mdl", RENDERGROUP_OPAQUE)
			self.RCDEnt:SetModel("models/breen.mdl")
			self.RCDEnt:Spawn()
			self.RCDEnt:Activate()	
			self.RCDEnt:SetRenderMode(RENDERMODE_TRANSALPHA)
		end
	end 
end

function RCD.CreateRCDPlateform(pos, angSet)
	if CLIENT then
		RCD["plateforms"] = RCD["plateforms"] or {}
		RCD["plateforms"][#RCD["plateforms"] + 1] = ClientsideModel("models/dimitri/kobralost/spawn.mdl", RENDERGROUP_OPAQUE)
		
		local ent = RCD["plateforms"][#RCD["plateforms"]]
		ent:SetModel("models/dimitri/kobralost/spawn.mdl")
		ent:SetPos(pos)
		ent:SetAngles(angSet)
		ent:Spawn()
		ent:Activate()
		ent:SetRenderMode(RENDERMODE_TRANSALPHA)
	end 
end

function TOOL:RemoveAllPlateforms()
	if CLIENT then
		if istable(RCD["plateforms"]) then
			for k, v in ipairs(RCD["plateforms"]) do
				if IsValid(v) then v:Remove() end
			end
			RCD["plateforms"] = {}
		end
	end
end

function TOOL:Reload()
	if CLIENT then
		local curTime = CurTime()

		RCD["toolSpam"] = RCD["toolSpam"] or 0
		if RCD["toolSpam"] > curTime then return end
		RCD["toolSpam"] = curTime + 0.5

		local plateforms = {}
		if not istable(RCD["plateforms"]) then return end

		for k,v in ipairs(RCD["plateforms"]) do
			if not IsValid(v) then continue end

			plateforms[#plateforms + 1] = {
				["pos"] = v:GetPos(),
				["ang"] = v:GetAngles(),
			}
		end

		net.Start("RCD:Admin:Configuration")
			net.WriteUInt(8, 4)
			net.WriteUInt(#RCD["plateforms"], 8)
			for k, v in ipairs(RCD["plateforms"]) do
				net.WriteVector(v:GetPos())
				net.WriteAngle(v:GetAngles())
			end
		net.SendToServer()

		self:RemoveAllPlateforms()
	end
end

function TOOL:Think()
	if CLIENT then
		local trace = util.TraceLine({
			start = LocalPlayer():EyePos(),
			endpos = LocalPlayer():EyePos() + LocalPlayer():EyeAngles():Forward() * 300,
			filter = function(ent) if ent:GetClass() == "prop_physics" then return true end end
		})
		local ent = LocalPlayer():GetEyeTrace().Entity
		local class = IsValid(ent) and ent:GetClass() or ""
		
		if class != "rcd_cardealer" then
			if IsValid(self.RCDEnt) then
				if not isvector(self.RCDLerpPos) then self.RCDLerpPos = RCD.Constants["vectorOrigin"] end
				self.RCDLerpPos = Lerp(RealFrameTime()*40, self.RCDLerpPos, trace.HitPos)

				local placePlateform = RCD.GetNWVariables("rcd_place_plateform", LocalPlayer())
				local angSet = Angle(0, LocalPlayer():GetAimVector():Angle().Yaw - (placePlateform and 90 or 180), 0)
				
				self.RCDEnt:SetPos(self.RCDLerpPos)
				self.RCDEnt:SetAngles(Angle(angSet, 0, 0))
				self.RCDEnt:SetModel(placePlateform and "models/dimitri/kobralost/spawn.mdl" or "models/breen.mdl")
			else 
				self:CreateRCDEnt() 
			end
		else
			if IsValid(self.RCDEnt) then 
				self.RCDEnt:Remove()
			end
		end

		local placePlateform = RCD.GetNWVariables("rcd_place_plateform", LocalPlayer())

		language.Add("tool.rcd_npc_config.left", RCD.GetSentence((placePlateform and "toolLeft1" or "toolLeft2")))
		language.Add("tool.rcd_npc_config.right", RCD.GetSentence((placePlateform and "toolRight1" or "toolRight2")))
		language.Add("tool.rcd_npc_config.reload", RCD.GetSentence((placePlateform and "toolReload1" or "toolReload2")))
	end
end 

function TOOL:Holster()
	local ply = self:GetOwner()
	if not IsValid(ply) and not ply:IsPlayer() then return end
	if not RCD.AdminRank[ply:GetUserGroup()] then return end

	if CLIENT then
		if IsValid(self.RCDEnt) then 
			self.RCDEnt:Remove()
		end
		self:RemoveAllPlateforms()
	else
		RCD.SetNWVariable("rcd_place_plateform", false, ply, true, ply)
		RCD.SetNWVariable("rcd_npc_id", false, ply, true, ply)
	end
end

function TOOL:DrawToolScreen(w, h)
	surface.SetDrawColor(RCD.Colors["white"])
	surface.SetMaterial(RCD.Materials["toolgun"])
	surface.DrawTexturedRect(0, 0, w, h)
end

hook.Add("CanTool", "RCD:CanTool:PNJ", function(ply, tr, toolname, tool, button)
	if not RCD.AdminRank[ply:GetUserGroup()] then return end

	local ent = tr.Entity
	if not IsValid(ent) then return end

	if toolname == "rcd_npc_config" && string.StartWith(ent:GetClass(), "rcd_") then
	   return true
	end
end)
--addons/zeros_trashman_v1.6.3/lua/weapons/gmod_tool/stools/ztm_trashspawner.lua:
return gluapack()()
--addons/hackable_server/lua/weapons/hacktool/cl_init.lua:
include("translation.lua")
include("settings.lua")
include("shared.lua")
include("cl_hackanim1.lua")
include("cl_hackanim2.lua")
include("cl_hackanim3.lua")
include("cl_hackmenu.lua")
include("cl_screen.lua")

local settings = {
    reloadingTime = GetConVar("hacktool_reloadingtime"),
    overheatTime = GetConVar("hacktool_overheattime"),
    hackingTime = GetConVar("hacktool_hackingtime"),
    ropeLength = GetConVar("hacktool_ropelength"),
    showPanel = CreateConVar("hacktool_showpanel", "0", FCVAR_ARCHIVE)
}

SWEP.WepSelectIcon = surface.GetTextureID( "models/weapons/hacktool/hacktool_select" )

local tr = hacktoolTranslate.Translate


local function doBeep(n,vol)
	vol = vol or 1
	if n == "beep" then
		LocalPlayer():EmitSound("buttons/button17.wav", 75, 200, vol, CHAN_AUTO)
	elseif n == "tick" then
		LocalPlayer():EmitSound("buttons/button14.wav", 75, 200, vol, CHAN_AUTO)
	elseif n == "bebeep" then
		LocalPlayer():EmitSound("buttons/button24.wav", 75, 50, vol, CHAN_AUTO)
	elseif n == "deny" then
		LocalPlayer():EmitSound("buttons/button10.wav", 75, 100, vol, CHAN_AUTO)
	elseif n == "bzz" then
		LocalPlayer():EmitSound("buttons/button10.wav", 75, 200, vol, CHAN_AUTO)
	end
end

hacktoolMats = {}
local mcnt = 0

local function recreateMaterials()
	local dim = 1024
	mcnt = mcnt + 1

	local hh = 1080
	local ww = 1920
	local pw,ph = hh*1.5, hh
	if pw > ww then
		pw,ph = ww, ww/1.5
	end


	
	hacktoolMats.font11 = "HackPanel1_font1_"..mcnt
	hacktoolMats.font12 = "HackPanel1_font2_"..mcnt
	hacktoolMats.font21 = "HackPanel2_font1_"..mcnt

	hacktoolMats.panelRt = GetRenderTarget("panelrt0"..mcnt, pw, ph)
	hacktoolMats.panelMat = CreateMaterial("panelrtmat0"..mcnt,"UnlitGeneric",{['$basetexture'] = hacktoolMats.panelRt})
	hacktoolMats.vmatrt = GetRenderTargetEx("vmrt0"..mcnt, dim, dim, RT_SIZE_NO_CHANGE, MATERIAL_RT_DEPTH_NONE, 8192, 0, IMAGE_FORMAT_BGRA8888)
	hacktoolMats.vmmat = Material("models/weapons/hacktool/hacktool_mon_active")

	local fontTable = {
		font = "Arial",
		extended = true,
		size = hh*0.0786,
		weight = 0,
		blursize = 0,
		scanlines = 0,
		antialias = true,
		underline = false,
		italic = false,
		strikeout = false,
		symbol = false,
		rotary = false,
		shadow = false,
		additive = false,
		outline = false,
	}

	surface.CreateFont( hacktoolMats.font11, fontTable)
	fontTable.size = hh*0.04
	surface.CreateFont( hacktoolMats.font12, fontTable)

	fontTable.size = hh*0.0671
	surface.CreateFont( hacktoolMats.font21, fontTable)

end

recreateMaterials()

net.Receive('hack_tool.gui', function()
	local swep = net.ReadEntity()
	local ent = net.ReadEntity()
	local startTime = net.ReadFloat()
	if swep.panel and swep.panel.Remove then
		swep.panel:Remove()
		swep.panel = nil
	end

	if not IsValid(ent) or ent:IsWorld() then
		return
	end

--	local panel = vgui.Create("HackPanel"..math.ceil(math.random()*3))
	local panel = vgui.Create((ent:GetClass() == "hacktool_server" and ent.GetIsOpen and ent:GetIsOpen()) and "HackMenu0" or "HackPanel"..math.ceil(math.random()*3))
--	local panel = vgui.Create("HackMenu0")
	swep.everyPanel = swep.everyPanel or {}
	swep.everyPanel[#swep.everyPanel + 1] = panel

	panel.doBeep = doBeep

	panel.swep = swep

	panel.drawToScreen = settings.showPanel:GetBool()

	panel:SetTimeout(startTime, startTime + settings.hackingTime:GetFloat())

	swep.panel = panel
	panel.OnFail = function ()
		net.Start("hack_tool.gui")
			net.WriteEntity(swep)
			net.WriteEntity(ent)
			net.WriteUInt(0, 2)
		net.SendToServer()
	end
	panel.OnSuccess = function ()
		net.Start("hack_tool.gui")
			net.WriteEntity(swep)
			net.WriteEntity(ent)
			net.WriteUInt(1, 2)
		net.SendToServer()
		panel:Remove()
	end
	panel.OnTimeOut = function() end
end)

function SWEP:Think()
    if self:GetIsHacking() and CurTime() > (self.nextBeep or 0) then
        self.nextBeep = CurTime() + (math.random() < 0.5 and 0.2 or 0.1)
        self:EmitSound("buttons/button15.wav", 100, util.SharedRandom("HackingToolSnd",220,250,CurTime()),0.4)  
    end
    if not self.mainPanel then
    	self.everyPanel = self.everyPanel or {}
        self.mainPanel = vgui.Create("HackDisplay1")
        self.everyPanel[#self.everyPanel + 1] = self.mainPanel
        self.mainPanel.swep = self
    end
    if self:GetNextUseTime() > CurTime() and self.panel and self.panel.Remove then
    	self.panel:Remove()
		self.panel = nil
    end
end

function SWEP:Initialize()
	if self:GetOwner() ~= LocalPlayer() then return end
    self:SetNextUseTime(CurTime())
	self:ClearAllPanels()
end

function SWEP:ClearAllPanels()
	if self.everyPanel then
		for k,v in pairs(self.everyPanel) do
			if v and v.Remove then
				v:Remove()
			end
		end
	end
	self.everyPanel = {}
	self.mainPanel = nil
	self.panel = nil
end

function SWEP:OnRemove()
	self:ClearAllPanels()
end


function SWEP:OwnerChanged()
	self:Initialize()
end


function SWEP:PrimaryAttack()
end

function SWEP:SecondaryAttack()
end

function SWEP:Holster()
	self:ClearAllPanels()
	return true
end

function SWEP:CustomAmmoDisplay()

	self.AmmoDisplay = self.AmmoDisplay or {}
	self.AmmoDisplay.Draw = false
	self.AmmoDisplay.PrimaryClip = self:Clip1()

	return self.AmmoDisplay

end

function SWEP:PreDrawViewModel(vm)
	if self.panel or self.mainPanel then
		vm:SetSubMaterial(1, hacktoolMats.vmmat:GetName(), true)
	end
end

function SWEP:PostDrawViewModel(vm)
	vm:SetSubMaterial()
end
--addons/hackable_server/lua/languages/hacktool/lang_de.lua:
return "german",{
    ["Wanted"] = "Haftbefehl",
    ["Unwanted"] = "Haftbefehl entfernen",
    ["Unarrest"] = "Freilassen",
    ["Warrant"] = "Durchsuchungsbefehl",
    ["Remove warrant"] = "Durchsuchungsbefehl löschen",
    ["Add a law"] = "Gesetz hinzufügen",
    ["Remove the law"] = "Gesetz entfernen",
    ["Initiate a lockdown"] = "Lockdown starten",
    ["Cancel the lockdown"] = "Lockdown beenden",
    ["Steal money"] = "Geld klauen",
    ["Reason"] = "Grund",
    ["Error"] = "Fehler",
    ["Time"] = "Zeit",
    ["Nobody is wanted"] = "Es wird nach niemandem gesucht",
    ["Nobody is arrested"] = "Niemand ist Inhaftiert",
    ["There is no mayor"] = "Es gibt keinen Bürgermeister",
    ["Law"] = "Gesetz",
    ["Law added"] = "Gesetz hinzugefügt",
    ["Success"] = "Erfolg",
    ["There is no laws"] = "Es gibt keine Gesetze",
    ["Success! You got $"] = "Erfolg! Du bekommst €",
    ["Success chance"] = "Erfolsrate",
    ["Not enough police"] = "Nicht genügend Staatsbeamte im Dienst",
    ["LOADING..."] = "LÄDT...",
    ["RELOADING..."] = "LÄDT...",
    ["CPU OVERHEAT!"] = "CPU Überhitzung!",
    ["SYSTEM ERROR!"] = "System Error!",
    ["READY"] = "Fertig"
}
--Credits
--translated by Funny_TV
--https://www.gmodstore.com/users/Funny_TV
--addons/xenin-inventory/lua/weapons/inventory/shared.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

SWEP.PrintName = "Envanter"
SWEP.Instructions = "Primary Fire: Pickup Item\nSecondary Fire: Open Inventory"
SWEP.Base = "weapon_base"
SWEP.Author = "sleeppyy"
SWEP.Category = "Xenin"

SWEP.WorldModel = ""
SWEP.ViewModel = "models/weapons/c_arms.mdl"

SWEP.UseHands = false
SWEP.Spawnable = false

SWEP.ViewModelFOV = 50
SWEP.ViewModelFlip = false

SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = 0
SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = "none"

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = 0
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"

function SWEP:Initialize()
  self:SetHoldType("normal")
end

function SWEP:PrimaryAttack()
  if CLIENT then return end

  if SERVER then
    self.Owner:XeninInventory():Pickup(self.Owner:GetEyeTrace().Entity)
  end
end

function SWEP:SecondaryAttack()
  if SERVER then return end

  self.Owner:ConCommand("inventory")
end

--gamemodes/darkrp/entities/weapons/med_kit/shared.lua:
if SERVER then
    AddCSLuaFile("shared.lua")
end

SWEP.PrintName = "Medic Kit"
SWEP.Author = "DarkRP Developers"
SWEP.Slot = 4
SWEP.SlotPos = 0
SWEP.Description = "Heals the wounded."
SWEP.Contact = ""
SWEP.Purpose = ""
SWEP.Instructions = "Left click to heal someone\nRight click to heal yourself"
SWEP.IsDarkRPMedKit = true

SWEP.Spawnable = true
SWEP.AdminOnly = true
SWEP.Category = "DarkRP (Utility)"

SWEP.ViewModel = "models/weapons/c_medkit.mdl"
SWEP.WorldModel = "models/weapons/w_medkit.mdl"
SWEP.UseHands = true

SWEP.Primary.Recoil = 0
SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = 1
SWEP.Primary.Automatic = true
SWEP.Primary.Delay = 0.1
SWEP.Primary.Ammo = "none"

SWEP.Secondary.Recoil = 0
SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = 1
SWEP.Secondary.Automatic = true
SWEP.Secondary.Delay = 0.3
SWEP.Secondary.Ammo = "none"

function SWEP:PrimaryAttack()
    self:SetNextPrimaryFire(CurTime() + self.Primary.Delay)

    local Owner = self:GetOwner()

    if not IsValid(Owner) then return end

    local found
    local lastDot = -1 -- the opposite of what you're looking at
    Owner:LagCompensation(true)
    local aimVec = Owner:GetAimVector()
    local shootPos = Owner:GetShootPos()

    for _, v in player.Iterator() do
        local maxhealth = v:GetMaxHealth() or 100
        local targetShootPos = v:GetShootPos()
        if v == Owner or targetShootPos:DistToSqr(shootPos) > 7225 or v:Health() >= maxhealth or not v:Alive() then continue end

        local direction = targetShootPos - shootPos
        direction:Normalize()
        local dot = direction:Dot(aimVec)

        -- Looking more in the direction of this player
        if dot > lastDot then
            lastDot = dot
            found = v
        end
    end
    Owner:LagCompensation(false)

    if found then
        found:SetHealth(found:Health() + 1)
        self:EmitSound("hl1/fvox/boop.wav", 150, math.max(found:Health() / found:GetMaxHealth() * 100, 25), 1, CHAN_AUTO)
    end
end

function SWEP:SecondaryAttack()
    self:SetNextSecondaryFire(CurTime() + self.Secondary.Delay)
    local ply = self:GetOwner()
    local maxhealth = ply:GetMaxHealth() or 100
    if ply:Health() < maxhealth then
        ply:SetHealth(ply:Health() + 1)
        self:EmitSound("hl1/fvox/boop.wav", 150, math.max(ply:Health() / ply:GetMaxHealth() * 100, 25), 1, CHAN_AUTO)
    end
end

--gamemodes/darkrp/entities/weapons/pocket/cl_menu.lua:
return gluapack()()
--gamemodes/darkrp/entities/weapons/stick_base/shared.lua:
return gluapack()()
--addons/[binbon]misc/lua/weapons/weapon_ciga_paket_kent_switch.lua:
return gluapack()()
--addons/[binbon]misc/lua/weapons/weapon_ciga_paket_lm_mode_red.lua:
return gluapack()()
--lua/weapons/weapon_csgo_knife_bowie.lua:
return gluapack()()
--lua/weapons/weapon_csgo_knife_default_ct.lua:
return gluapack()()
--lua/weapons/weapon_csgo_knife_gold_ct.lua:
if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Gold CT Knife"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_default_ct/v_gold_ct.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_default_ct/w_gold_ct.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_csgo_knife_m9bayonet.lua:
if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "M9 Bayonet"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_m9bayonet/v_m9bayonet.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_m9bayonet/w_m9bayonet.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_csgo_knife_stiletto.lua:
sound.Add( { name = "Weapon_Stiletto.Flip1", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_stiletto/flip01.wav" } )
sound.Add( { name = "Weapon_Stiletto.Flip2", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_stiletto/flip02.wav" } )
sound.Add( { name = "Weapon_Stiletto.Flip3", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_stiletto/flip03.wav" } )
sound.Add( { name = "Weapon_Stiletto.Flip4", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_stiletto/flip04.wav" } )
sound.Add( { name = "Weapon_Stiletto.Draw", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_stiletto/draw.wav" } )



if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Stiletto Knife"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_stiletto/v_stiletto.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_stiletto/w_stiletto.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_csgo_knife_survival.lua:
if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Survival Knife"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_survival/v_survival.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_survival/w_survival.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_fuelpumpcreator/shared.lua:
SWEP.PrintName = "Fuel Pump Creator"
SWEP.Category = "SVMod"
SWEP.Author = "TomLaVachette"
SWEP.Contact = "From workshop page only!"
SWEP.Instructions = "?"

SWEP.ViewModel = "models/weapons/c_pistol.mdl"
SWEP.ViewModelFOV = 50
SWEP.WorldModel = "models/weapons/w_pistol.mdl"
SWEP.UseHands = true

SWEP.Spawnable = true
SWEP.AdminOnly = true

SWEP.Primary = {
	ClipSize = -1,
	DefaultClip = -1,
	Automatic = false,
	Ammo = "none"
}

SWEP.Secondary = {
	ClipSize = -1,
	DefaultClip = -1,
	Automatic = false,
	Ammo = "none"
}

function SWEP:Initialize()
	self:SetHoldType("normal")
end

function SWEP:DrawWorldModel()
	return true
end
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
-- weapon_vape/cl_init.lua
-- Defines common clientside code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

include('shared.lua')

function SWEP:DrawWorldModel()
	local ply = self:GetOwner()

	local vapeScale = self.VapeScale or 1
	self:SetModelScale(vapeScale, 0) 
	self:SetSubMaterial()

	if IsValid(ply) then
		local modelStr = ply:GetModel():sub(1,17)
		local isPony = modelStr=="models/ppm/player" or modelStr=="models/mlp/player" or modelStr=="models/cppm/playe"

		local bn = isPony and "LrigScull" or "ValveBiped.Bip01_R_Hand"
		if ply.vapeArmFullyUp then bn ="ValveBiped.Bip01_Head1" end
		local bon = ply:LookupBone(bn) or 0

		local opos = self:GetPos()
		local oang = self:GetAngles()
		local bp,ba = ply:GetBonePosition(bon)
		if bp then opos = bp end
		if ba then oang = ba end

		if isPony then
			--pony position
			opos = opos + (oang:Forward()*19.4) + (oang:Right()*-4.36) + (oang:Up()*-2.5)
			oang:RotateAroundAxis(oang:Right(),80)
			oang:RotateAroundAxis(oang:Forward(),12)
			oang:RotateAroundAxis(oang:Up(),20)
			opos = opos + (oang:Up()*(2.3+((vapeScale-1)*-10.25)))
		else
			if ply.vapeArmFullyUp then
				--head position
				opos = opos + (oang:Forward()*0.74) + (oang:Right()*15) + (oang:Up()*2)
				oang:RotateAroundAxis(oang:Forward(),-100)
				oang:RotateAroundAxis(oang:Up(),100)
				opos = opos + (oang:Up()*(vapeScale-1)*-10.25)
			else
				--hand position
				oang:RotateAroundAxis(oang:Forward(),90)
				oang:RotateAroundAxis(oang:Right(),90)
				opos = opos + (oang:Forward()*2) + (oang:Up()*-4.5) + (oang:Right()*-2)
				oang:RotateAroundAxis(oang:Forward(),69)
				oang:RotateAroundAxis(oang:Up(),10)
				opos = opos + (oang:Up()*(vapeScale-1)*-10.25)
				if self:GetClass()=="weapon_vape_butterfly" then
					opos = opos + (oang:Up()*6)
					oang:RotateAroundAxis(oang:Right(),Lerp(ply.vapeArmUpAmt or 0,0,-360))
					opos = opos + (oang:Up()*-6)
				end
			end
		end
		self:SetupBones()

		local mrt = self:GetBoneMatrix(0)
		if mrt then
		mrt:SetTranslation(opos)
		mrt:SetAngles(oang)

		self:SetBoneMatrix(0, mrt)
		end
	end

	self:DrawModel()
end

function SWEP:GetViewModelPosition(pos, ang)
	--mouth pos
	local vmpos1=self.VapeVMPos1 or Vector(18.5,-3.4,-3)
	local vmang1=self.VapeVMAng1 or Vector(170,-105,82)
	--hand pos
	local vmpos2=self.VapeVMPos2 or Vector(24,-8,-11.2)
	local vmang2=self.VapeVMAng2 or Vector(170,-108,132)

	if not LocalPlayer().vapeArmTime then LocalPlayer().vapeArmTime=0 end
	local lerp = math.Clamp((os.clock()-LocalPlayer().vapeArmTime)*3,0,1)
	if LocalPlayer().vapeArm then lerp = 1-lerp end
	local newpos = LerpVector(lerp,vmpos1,vmpos2)
	local newang = LerpVector(lerp,vmang1,vmang2)
	--I have a good reason for doing it like this
	newang = Angle(newang.x,newang.y,newang.z) 
	
	pos,ang = LocalToWorld(newpos,newang,pos,ang)
	return pos, ang
end
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
-- weapon_vape/cl_init.lua
-- Defines common clientside code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

include('shared.lua')

function SWEP:DrawWorldModel()
	local ply = self:GetOwner()

	local vapeScale = self.VapeScale or 1
	self:SetModelScale(vapeScale, 0) 
	self:SetSubMaterial()

	if IsValid(ply) then
		local modelStr = ply:GetModel():sub(1,17)
		local isPony = modelStr=="models/ppm/player" or modelStr=="models/mlp/player" or modelStr=="models/cppm/playe"

		local bn = isPony and "LrigScull" or "ValveBiped.Bip01_R_Hand"
		if ply.vapeArmFullyUp then bn ="ValveBiped.Bip01_Head1" end
		local bon = ply:LookupBone(bn) or 0

		local opos = self:GetPos()
		local oang = self:GetAngles()
		local bp,ba = ply:GetBonePosition(bon)
		if bp then opos = bp end
		if ba then oang = ba end

		if isPony then
			--pony position
			opos = opos + (oang:Forward()*19.4) + (oang:Right()*-4.36) + (oang:Up()*-2.5)
			oang:RotateAroundAxis(oang:Right(),80)
			oang:RotateAroundAxis(oang:Forward(),12)
			oang:RotateAroundAxis(oang:Up(),20)
			opos = opos + (oang:Up()*(2.3+((vapeScale-1)*-10.25)))
		else
			if ply.vapeArmFullyUp then
				--head position
				opos = opos + (oang:Forward()*0.74) + (oang:Right()*15) + (oang:Up()*2)
				oang:RotateAroundAxis(oang:Forward(),-100)
				oang:RotateAroundAxis(oang:Up(),100)
				opos = opos + (oang:Up()*(vapeScale-1)*-10.25)
			else
				--hand position
				oang:RotateAroundAxis(oang:Forward(),90)
				oang:RotateAroundAxis(oang:Right(),90)
				opos = opos + (oang:Forward()*2) + (oang:Up()*-4.5) + (oang:Right()*-2)
				oang:RotateAroundAxis(oang:Forward(),69)
				oang:RotateAroundAxis(oang:Up(),10)
				opos = opos + (oang:Up()*(vapeScale-1)*-10.25)
				if self:GetClass()=="weapon_vape_butterfly" then
					opos = opos + (oang:Up()*6)
					oang:RotateAroundAxis(oang:Right(),Lerp(ply.vapeArmUpAmt or 0,0,-360))
					opos = opos + (oang:Up()*-6)
				end
			end
		end
		self:SetupBones()

		local mrt = self:GetBoneMatrix(0)
		if mrt then
		mrt:SetTranslation(opos)
		mrt:SetAngles(oang)

		self:SetBoneMatrix(0, mrt)
		end
	end

	self:DrawModel()
end

function SWEP:GetViewModelPosition(pos, ang)
	--mouth pos
	local vmpos1=self.VapeVMPos1 or Vector(18.5,-3.4,-3)
	local vmang1=self.VapeVMAng1 or Vector(170,-105,82)
	--hand pos
	local vmpos2=self.VapeVMPos2 or Vector(24,-8,-11.2)
	local vmang2=self.VapeVMAng2 or Vector(170,-108,132)

	if not LocalPlayer().vapeArmTime then LocalPlayer().vapeArmTime=0 end
	local lerp = math.Clamp((os.clock()-LocalPlayer().vapeArmTime)*3,0,1)
	if LocalPlayer().vapeArm then lerp = 1-lerp end
	local newpos = LerpVector(lerp,vmpos1,vmpos2)
	local newang = LerpVector(lerp,vmang1,vmang2)
	--I have a good reason for doing it like this
	newang = Angle(newang.x,newang.y,newang.z) 
	
	pos,ang = LocalToWorld(newpos,newang,pos,ang)
	return pos, ang
end
--addons/vape_swep/lua/weapons/weapon_vape_mega.lua:
-- weapon_vape_mega.lua
-- Defines a big vape that makes massive clouds (admin only recommended)

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

if CLIENT then
	include('weapon_vape/cl_init.lua')
else
	include('weapon_vape/shared.lua')
end

SWEP.PrintName = "Mega Vape"

SWEP.Instructions = "LMB: Rip MASSIVE Clouds\n (Hold and release)\nRMB & Reload: Play Sounds\n\nOriginally developed for military use, this powerful vape quickly creates a large vape-screen ideal for concealment."

SWEP.AdminOnly = true

SWEP.VapeID = 2

SWEP.SoundPitchMod = -30

SWEP.VapeScale = 2.5

SWEP.VapeVMPos1 = Vector(15,-3,-1.5)

SWEP.VapeVMPos2 = Vector(18,-6,-9)

--HOT ROD VAPE
SWEP.VapeAccentColor = Vector(1,0,0.3)
SWEP.VapeTankColor = Vector(0.1,0.1,0.1)

function SWEP:PrimaryAttack()
	if SERVER then
		VapeUpdate(self.Owner, self.VapeID)
	end
	--Takes slightly longer to breathe
	self.Weapon:SetNextPrimaryFire(CurTime() + 0.15)
end
--gamemodes/darkrp/entities/weapons/weaponchecker/shared.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/weapons/zfs_knife/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/weapons/zgo2_backpack/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

if SERVER then
	AddCSLuaFile("shared.lua")
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

SWEP.PrintName = "Backpack"
SWEP.Author = "ZeroChain" -- Your name
SWEP.Instructions = "LBM: Pickup | RMB: Open interface" -- How do people use your SWEP?
SWEP.Contact = "https://www.gmodstore.com/users/76561198013322242" -- How people should contact you if they find bugs, errors, etc
SWEP.Purpose = "LBM: Pickup | RMB: Open interface"
SWEP.AdminSpawnable = true -- Is the SWEP spawnable for admins?
SWEP.Spawnable = true -- Can everybody spawn this SWEP? - If you want only admins to spawn it, keep this false and admin spawnable true.
SWEP.ViewModelFOV = 62
SWEP.ViewModelFlip = false
SWEP.AnimPrefix = "rpg"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

SWEP.ViewModel = "models/zerochain/props_growop2/zgo2_backpack.mdl"
SWEP.WorldModel = "models/zerochain/props_growop2/zgo2_backpack.mdl"


if CLIENT then
	SWEP.WepSelectIcon = surface.GetTextureID("zerochain/zgo2/vgui/zgo2_backpack")
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

SWEP.AutoSwitchTo = true -- When someone picks up the SWEP, should it automatically change to your SWEP?
SWEP.AutoSwitchFrom = false -- Should the weapon change to the a different SWEP if another SWEP is picked up?
SWEP.Slot = 3 -- Which weapon slot you want your SWEP to be in? (1 2 3 4 5 6)
SWEP.SlotPos = 4 -- Which part of that slot do you want the SWEP to be in? (1 2 3 4 5 6)
SWEP.FiresUnderwater = false -- Does your SWEP fire under water?
SWEP.Weight = 5 -- Set the weight of your SWEP.
SWEP.DrawCrosshair = true -- Do you want the SWEP to have a crosshair?
SWEP.Category = "Zeros GrowOP 2"
SWEP.DrawAmmo = false -- Does the ammo show up when you are using it? True / False
SWEP.base = "weapon_base" --What your weapon is based on.
SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = ""
SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Primary.Ammo = ""
SWEP.UseHands = true

function SWEP:Initialize()
	self:SetWeaponHoldType("normal")
end

function SWEP:DrawWorldModel()
end

function SWEP:PreDrawViewModel(vm)
	return true
end

function SWEP:Holster()
	if not SERVER then return true end
	self:GetOwner():DrawViewModel(true)
	self:GetOwner():DrawWorldModel(true)

	return true
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

--addons/zeros_growop2_v1.6.1/lua/weapons/zgo2_bong/shared.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/weapons/zgw_sieve/cl_init.lua:


include("shared.lua")

function SWEP:Initialize()
	zgw.Sieve.Initialize(self)
end

function SWEP:SecondaryAttack()
	zgw.Sieve.Secondary(self)
end

function SWEP:PrimaryAttack()
	zgw.Sieve.Primary(self)
end

function SWEP:Deploy()
	zgw.Sieve.Deploy(self)
end

function SWEP:Holster(swep)
	zgw.Sieve.Holster(self)
end

function SWEP:Reload()
	zgw.Sieve.Reload(self)
end

function SWEP:DrawHUD()
	zgw.Sieve.DrawHUD(self)
end

function SWEP:Think()
	zgw.Sieve.Think(self)
end

function SWEP:PostDrawViewModel(vm, weapon, ply)
	zgw.Sieve.PostDrawViewModel(vm, weapon, ply)
end

--addons/zeros_methlab_1.6.4/lua/weapons/zmlab_extractor/cl_init.lua:
include("shared.lua")
SWEP.PrintName = "Meth Extractor" -- The name of your SWEP
SWEP.Slot = 1
SWEP.SlotPos = 2
SWEP.DrawAmmo = false
SWEP.DrawCrosshair = true -- Do you want the SWEP to have a crosshair?

function SWEP:Initialize()
	self:SetHoldType(self.HoldType)
end

local vmAnims = {ACT_VM_HITCENTER, ACT_VM_HITKILL}

function SWEP:SecondaryAttack()
	self:SendWeaponAnim(vmAnims[math.random(#vmAnims)])
	self.Owner:SetAnimation(PLAYER_ATTACK1)
end

function SWEP:Deploy()
	self:SendWeaponAnim(ACT_VM_DRAW)
end

--Tells the script what to do when the player "Initializes" the SWEP.
function SWEP:Equip()
	self:SendWeaponAnim(ACT_VM_DRAW) -- View model animation
	self.Owner:SetAnimation(PLAYER_IDLE) -- 3rd Person Animation
end

--addons/turkish_food_mod-main/lua/entities/adana/cl_init.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_357.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_357_large.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"
ENT.RenderGroup               = RENDERGROUP_TRANSLUCENT

ENT.PrintName                 = "Magnum Ammo (Large)"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/items/arccw/magnum_ammo_closed.mdl"

ENT.AmmoType = "357"
ENT.AmmoCount = 60
ENT.Scale = 1.5

ENT.DetonationDamage = 50
ENT.DetonationRadius = 128
ENT.DetonationSound = "weapons/357_fire2.wav"
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_buckshot.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"

ENT.PrintName                 = "Shotgun Ammo"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/items/arccw/shotgun_ammo.mdl"

ENT.AmmoType = "buckshot"
ENT.AmmoCount = 20
if engine.ActiveGamemode() == "terrortown" then
    ENT.AmmoCount = 12
end

ENT.DetonationDamage = 80
ENT.DetonationRadius = 128
ENT.DetonationSound = "weapons/shotgun/shotgun_fire6.wav"
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_pistol.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_smg1_large.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"

ENT.PrintName                 = "Carbine Ammo (Large)"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/items/arccw/smg_ammo.mdl"
ENT.Scale = 1.5

ENT.AmmoType = "smg1"
ENT.AmmoCount = 300

ENT.DetonationDamage = 30
ENT.DetonationRadius = 256
ENT.DetonationSound = "weapons/smg1/npc_smg1_fire1.wav"
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_sniper_large.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"

ENT.PrintName                 = "Sniper Ammo (Large)"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/items/arccw/sniper_ammo.mdl"
ENT.Scale = 1.5

ENT.AmmoType = "SniperPenetratedRound"
ENT.AmmoCount = 50
ENT.MaxHealth = 20

ENT.DetonationDamage = 80
ENT.DetonationRadius = 128
ENT.DetonationSound = "npc/sniper/echo1.wav"
--lua/entities/arccw_gl_he_mw2/shared.lua:
ENT.Type 				= "anim"
ENT.Base 				= "base_entity"
ENT.PrintName 			= "40mm HE"
ENT.Author 				= ""
ENT.Information 		= ""

ENT.Spawnable 			= false


AddCSLuaFile()

ENT.Model = "models/items/ar2_grenade.mdl"
ENT.Ticks = 0
ENT.FuseTime = 0.1
ENT.Defused = false

if SERVER then
    function ENT:Initialize()
        local pb_vert = 1
        local pb_hor = 1
        self:SetModel(self.Model)
        self:PhysicsInitBox( Vector(-pb_vert,-pb_hor,-pb_hor), Vector(pb_vert,pb_hor,pb_hor) )

        local phys = self:GetPhysicsObject()
        if phys:IsValid() then
            phys:Wake()
        end

        self.SpawnTime = CurTime()
        self.Ticks = CurTime()

        timer.Simple(0.1, function()
            if !IsValid(self) then return end
            self:SetCollisionGroup(COLLISION_GROUP_PROJECTILE)
        end)
    end

    function ENT:Think()
        if SERVER and self.Defused and CurTime() - self.Defused_When >= self.Defused_RemoveIn then
            self:Remove()
        end
    end
else
    function ENT:Think()
        if CurTime() >= self.Ticks then
            local emitter = ParticleEmitter(self:GetPos())

            if !self:IsValid() or self:WaterLevel() > 2 then return end
            if !IsValid(emitter) then return end

            local smoke = emitter:Add("particle/particle_smokegrenade", self:GetPos())
            smoke:SetVelocity( VectorRand() * 25 )
            smoke:SetGravity( Vector(math.Rand(-5, 5), math.Rand(-5, 5), math.Rand(-20, -25)) )
            smoke:SetDieTime( 1 )
            smoke:SetStartAlpha( 255 )
            smoke:SetEndAlpha( 0 )
            smoke:SetStartSize( 0 )
            smoke:SetEndSize( 50 )
            smoke:SetRoll( math.Rand(-180, 180) )
            smoke:SetRollDelta( math.Rand(-0.2,0.2) )
            smoke:SetColor( 113, 113, 113 )
            smoke:SetAirResistance( 5 )
            smoke:SetPos( self:GetPos() )
            smoke:SetLighting( false )
            emitter:Finish()

            self.Ticks = CurTime() + (1/50)
        end

    end
end

function ENT:Detonate()
    if !self:IsValid() then return end
    if self.Defused then return end
    local effectdata = EffectData()
        effectdata:SetOrigin( self:GetPos() )

    if self:WaterLevel() >= 1 then
        util.Effect( "WaterSurfaceExplosion", effectdata )
    else
        util.Effect( "Explosion", effectdata)
    end

    local attacker = self

    if self.Owner:IsValid() then
        attacker = self.Owner
    end

    util.BlastDamage(self, attacker, self:GetPos(), 300, 150)

    self:FireBullets({
        Attacker = attacker,
        Damage = 0,
        Tracer = 0,
        Distance = 20000,
        Dir = self:GetVelocity(),
        Src = self:GetPos(),
        Callback = function(att, tr, dmg)
            util.Decal("Scorch", tr.StartPos, tr.HitPos - (tr.HitNormal * 16), self)
        end
    })

    self:Remove()
end

function ENT:PhysicsCollide(colData, collider)
	if CurTime() - self.SpawnTime >= self.FuseTime then
		self:Detonate()
	else
		self:Defuse()
	end
end

function ENT:Defuse()
	self.Defused = true
	self.Defused_RemoveIn = 5
	self.Defused_When = CurTime()
	--self:Remove()
end

function ENT:Draw()
    self:DrawModel()
end
--addons/[binbon]arccw_modify/lua/entities/arccw_smoke/shared.lua:
return gluapack()()
--addons/ashop/lua/entities/ashop_pet/cl_init.lua:
return gluapack()()
--addons/bodygroupr/lua/entities/bodyman_closet/cl_init.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
store.steampowered.com/curator/32364216

Subscribe to the channel:↓
https://www.youtube.com/c/Famouse

More leaks in the discord:↓ 
https://discord.gg/rFdQwzm
------------------------------------------------------------------------*/

include("shared.lua")

surface.CreateFont("bodyman_3d2d_large", {
	font = "Comfortaa",
	size = 128,
	weight = 800,
	antialias = true,
	extended = true
})

surface.CreateFont("bodyman_3d2d_small", {
	font = "Comfortaa",
	size = 72,
	weight = 800,
	antialias = true,
	extended = true
})
local cam_Start3D2D = cam.Start3D2D
local cam_End3D2D = cam.End3D2D
local draw_SimpleText = draw.SimpleText
local draw_DrawText = draw.DrawText
function ENT:Draw()
	self:DrawModel()
 if LocalPlayer():GetPos():DistToSqr(self:GetPos()) < 69100 then
	local alpha = 255




	local oang = self:GetAngles()
	local opos = self:GetPos()

	local ang = self:GetAngles()
	local pos = self:GetPos()

	ang:RotateAroundAxis( oang:Up(), 90 )
	ang:RotateAroundAxis( oang:Right(), -90 )
	ang:RotateAroundAxis( oang:Up(), -4)

	pos = pos + oang:Forward()*14 + oang:Up() * 20 + oang:Right() * 20

	
		cam_Start3D2D( pos, ang, 0.025 )
			draw_SimpleText( BODYMAN.ClosetName, "bodyman_3d2d_large", 0, 0, Color(255,255,255, alpha) )
			draw_DrawText( BODYMAN.ClosetHelpText, "bodyman_3d2d_small", 0, 128, Color(255,255,255, alpha) )
		cam_End3D2D()
	end

end

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/ch_atm/lua/entities/ch_atm_credit_card/cl_init.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_combiner/cl_init.lua:
include( "shared.lua" )

function ENT:DrawTranslucent()
	self:DrawModel()
end

function ENT:Initialize()
end
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator/shared.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator_fuel_medium/cl_init.lua:
include( "shared.lua" )

function ENT:Draw()
	self:DrawModel()	
end		
--addons/ch_bitminers/lua/entities/ch_bitminer_power_rtg/cl_init.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_rtg/cl_init.lua:
include( "shared.lua" )

function ENT:DrawTranslucent()
	self:DrawModel()
end

function ENT:Initialize()
end
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_clean_dirt/cl_init.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_cooling2/shared.lua:
return gluapack()()
--addons/ch_mayor/lua/entities/ch_mayor_desk/cl_init.lua:
return gluapack()()
--addons/cityworker/lua/entities/cityworker_electric/shared.lua:
ENT.Type            = "anim"
ENT.Base            = "base_gmodentity"

ENT.PrintName       = "Electric"
ENT.Category        = "City Worker"
ENT.Author          = "Silhouhat"
ENT.Contact 	    = "contact@silhouhat.com"

ENT.Spawnable   	= false
--addons/cityworker/lua/entities/cityworker_hydrant/cl_init.lua:
return gluapack()()
--addons/cityworker/lua/entities/cityworker_hydrant/shared.lua:
return gluapack()()
--addons/cityworker/lua/entities/cityworker_leak/shared.lua:
ENT.Type            = "anim"
ENT.Base            = "base_gmodentity"

ENT.PrintName       = "Leak"
ENT.Category        = "City Worker"
ENT.Author          = "Silhouhat"
ENT.Contact 	    = "contact@silhouhat.com"

ENT.Spawnable   	= false
--addons/turkish_food_mod-main/lua/entities/ekmek/cl_init.lua:
include("shared.lua")
function ENT:Initialize() end
function ENT:Draw() self:DrawModel() end

--addons/turkish_food_mod-main/lua/entities/ekmek/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Ekmek"
ENT.Category = "Turkish Food Mod"
ENT.Spawnable = true
--lua/entities/heavy_armor/shared.lua:
return gluapack()()
--lua/entities/heavy_armor/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
 
ENT.PrintName = "Heavy Armor"
ENT.Category = "improved Armor"
ENT.Author = "LunkLoafGrumble"
ENT.Contact = ""
ENT.Purpose = "Gives body protection."
ENT.Instructions = "Press E to apply."
ENT.Spawnable = true
ENT.AdminSpawnable = false
--addons/turkish_food_mod-main/lua/entities/kofte_durum/cl_init.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/entities/minigame_leaderboard.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/entities/minigame_square.lua:
AddCSLuaFile()
DEFINE_BASECLASS( "minigame_square_base" )

--[[------------------------------------------------
                    Minigame Square
------------------------------------------------]]--

ENT.PrintName = "Minigame Square"

function ENT:Initialize()
    BaseClass.Initialize( self )

    self:SetModel("models/props_phx/construct/plastic/plastic_panel2x2.mdl")
    self:SetType("minigame_square")

    -- Materials
    local Materials = self:GetMaterials()
    for k, v in ipairs( Materials ) do
        self:SetSubMaterial(k-1, string.Replace( v, "phoenix_storms", "minigames" ))
    end
end
--gamemodes/darkrp/entities/entities/money_printer/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/patkof/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Patates Köfte"
ENT.Category = "Turkish Food Mod"
ENT.Spawnable = true
--addons/pcasino/lua/entities/pcasino_chair/cl_init.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_chair/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Sign Plaque"
ENT.Author = "Owain Owjo & The One Free-Man"
ENT.Category = "pCasino"
ENT.Spawnable = false
ENT.AdminSpawnable = false


PerfectCasino.Core.RegisterEntity("pcasino_chair", {
},
"models/freeman/owain_casino_stool.mdl")
--addons/pcasino/lua/entities/pcasino_npc/cl_init.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_prize_plinth/cl_init.lua:
include("shared.lua")

function ENT:PostData()
	self.item = ClientsideModel(self.data.general.model)
	self.item:SetParent(self)
	self.item:SetPos(self:GetPos() + (self:GetUp() * 5))
	self.item:SetAngles(self:GetAngles())

	if self.data.general.bow then
		self.item.bow = ClientsideModel("models/freeman/owain_giantbow.mdl")
		self.item.bow:SetParent(self.item)
		local boundMin, boundMax = self.item:GetModelRenderBounds()
		self.item.bow:SetPos(self.item:GetPos() + Vector(0, 0, boundMax[3] + 8 + (self.data.general.bowOffset or 0)))
		self.item.bow:SetAngles(self.item:GetAngles())
	end
end

function ENT:Think()
	if not IsValid(self.item) then return end

	if not (self:GetBoneMatrix(1)) then return end
	
	local ang = self:GetBoneMatrix(1):GetAngles()
	ang:RotateAroundAxis(ang:Right(), -90)
	self.item:SetAngles(ang)
end

function ENT:OnRemove()

	if IsValid(self.item) then
		self.item:Remove()
		
		if IsValid(self.item.bow) then
			self.item.bow:Remove()
		end
	end

end

function ENT:Draw()
	self:DrawModel()
	if self:GetPos():DistToSqr(LocalPlayer():GetPos()) > 1000000 then return end

	-- We can piggyback off the distance check to only request the entities data when it's needed :D
	if (not self.data) and (not PerfectCasino.Cooldown.Check(self:EntIndex(), 5)) then
		PerfectCasino.Core.RequestConfigData(self)
		return
	end
end
--addons/pcasino/lua/entities/pcasino_roulette_table/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Roulette Table"
ENT.Author = "Owain Owjo & The One Free-Man"
ENT.Category = "pCasino"
ENT.Spawnable = false
ENT.AdminSpawnable = false

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "LastRoundNumber")
	self:NetworkVar("Int", 1, "StartRoundIn")
end

-- This is a lot of confusing math and took me ages to actually get right on the grid. Just accept it for what it is, I cache it, so it's not really a big deal... right? :/
-- I essentially map each bet "type" based on some math, because they're all in a grid. Best way I could think of without manually mapping every button.
function ENT:GetCurrentPad(pos)
	if not self.padCache then
		self.padCache = {}
		-- Set priority
		self.padCache[1] = {} -- The outer buttons, they don't overlap and there's not many of them, so we can do them first.
		self.padCache[2] = {} -- The 2x2 overlaps, they overlap the most so they should be done second.
		self.padCache[3] = {} -- The 1x2 or 2x1 crossovers, they also overlap so they should be done before the base numbers. We put the row bets in here too.
		self.padCache[4] = {} -- The base numbers

		local startPos = Vector(4.1, -13.3, 14)
		local sizeW, sizeH = -6.2, 4.4
		-- 1 to 36 numbers
		for i=1, 36 do
			self.padCache[4]["num_"..i] = {
				boundsA = {x = (startPos.x + (sizeW*((i-1)%3))), y = (startPos.y + (sizeH*math.floor((i-1)/3)))},
				boundsB = {x = (startPos.x + (sizeW*(((i-1)%3)+1))), y = (startPos.y + (sizeH*(math.floor((i-1)/3)+1)))}
			}

			-- Add the numbers it covers
			self.padCache[4]["num_"..i].numbers = {[i] = true}

			-- Add the payout if won
			self.padCache[4]["num_"..i].payout = 35
		end

		local startPos = Vector(-1.1, -10.2, 14)
		local sizeW, sizeH = -2, 2.21
		local row = 0
		local newI
		-- The 2x2 bets
		for i=1, 22 do
			self.padCache[2]["2x2_"..i] = {
				boundsA = {x = (startPos.x + (sizeW*((i-1)%2))) + ((sizeW*2.15)*((i-1)%2)), y = (startPos.y + (sizeH*math.floor((i-1)/2))) + (sizeH*math.floor((i-1)/2))},
				boundsB = {x = (startPos.x + (sizeW*(((i-1)%2)+1))) + ((sizeW*2.15)*((i-1)%2)), y = (startPos.y + (sizeH*(math.floor((i-1)/2)+1))) + (sizeH*math.floor((i-1)/2))}
			}

			-- Add the numbers it covers
			newI = i + row
			self.padCache[2]["2x2_"..i].numbers = {}
			self.padCache[2]["2x2_"..i].numbers[newI] = true
			self.padCache[2]["2x2_"..i].numbers[newI+1] = true
			self.padCache[2]["2x2_"..i].numbers[newI+3] = true
			self.padCache[2]["2x2_"..i].numbers[newI+4] = true
			
			-- The end of a row
			if i%2 == 0 then
				row = row + 1
			end

			-- Add the payout if won
			self.padCache[2]["2x2_"..i].payout = 8
		end

		local startPos = Vector(-1.1, -12.4, 14)
		local sizeW, sizeH = -2, 2.21
		local row = 0
		local newI
		-- The horizontal bets
		for i=1, 24 do
			self.padCache[3]["hrztl_"..i] = {
				boundsA = {x = (startPos.x + (sizeW*((i-1)%2))) + ((sizeW*2.15)*((i-1)%2)), y = (startPos.y + (sizeH*math.floor((i-1)/2))) + (sizeH*math.floor((i-1)/2))},
				boundsB = {x = (startPos.x + (sizeW*(((i-1)%2)+1))) + ((sizeW*2.15)*((i-1)%2)), y = (startPos.y + (sizeH*(math.floor((i-1)/2)+1))) + (sizeH*math.floor((i-1)/2))}
			}

			-- Add the numbers it covers
			newI = i + row
			self.padCache[3]["hrztl_"..i].numbers = {}
			self.padCache[3]["hrztl_"..i].numbers[newI] = true
			self.padCache[3]["hrztl_"..i].numbers[newI+1] = true

			-- The end of a row
			if i%2 == 0 then
				row = row + 1
			end

			-- Add the payout if won
			self.padCache[3]["hrztl_"..i].payout = 17
		end

		local startPos = Vector(2.1, -10.2, 14)
		local sizeW, sizeH = -2, 2.21
		-- The vertical bets
		for i=1, 33 do
			self.padCache[3]["vrtcl_"..i] = {
				boundsA = {x = (startPos.x + (sizeW*((i-1)%3))) + ((sizeW*2.15)*((i-1)%3)), y = (startPos.y + (sizeH*math.floor((i-1)/3))) + (sizeH*math.floor((i-1)/3))},
				boundsB = {x = (startPos.x + (sizeW*(((i-1)%3)+1))) + ((sizeW*2.15)*((i-1)%3)), y = (startPos.y + (sizeH*(math.floor((i-1)/3)+1))) + (sizeH*math.floor((i-1)/3))}
			}

			-- Add the numbers it covers
			self.padCache[3]["vrtcl_"..i].numbers = {}
			self.padCache[3]["vrtcl_"..i].numbers[i] = true
			self.padCache[3]["vrtcl_"..i].numbers[i+3] = true

			-- Add the payout if won
			self.padCache[3]["vrtcl_"..i].payout = 17
		end

		local startPos = Vector(5.3, -13.3, 14)
		local sizeW, sizeH = -2, 4.4
		local start
		-- Row bets
		for i=1, 12 do
			self.padCache[3]["row_"..i] = {
				boundsA = {x = startPos.x, y = (startPos.y + (sizeH*(i-1)))},
				boundsB = {x = (startPos.x + sizeW), y = (startPos.y + (sizeH*(i)))},
			}

			-- Add the numbers it covers
			start = (i-1)*3
			self.padCache[3]["row_"..i].numbers = {[start+1] = true, [start+2] = true, [start+3] = true}

			-- Add the payout if won
			self.padCache[3]["row_"..i].payout = 11
		end

		-- 0 is bigger, so we gotta do it manually
		self.padCache[4]["num_0"] = {
			boundsA = {x = 4.3, y = -18.6},
			boundsB = {x = -14.3, y = -13.6}
		}
		-- Add the numbers it covers
		self.padCache[4]["num_0"].numbers = {[0] = true}
		-- Add the payout if won
		self.padCache[4]["num_0"].payout = 35

		local startPos = Vector(4.1, 39.5, 14)
		local sizeW, sizeH = -6.2, 4.4
		-- Sets of 12
		for i=1, 3 do
			self.padCache[1]["2to1_"..i] = {
				boundsA = {x = (startPos.x + (sizeW*(i-1))), y = startPos.y},
				boundsB = {x = (startPos.x + (sizeW*(i))), y = (startPos.y + sizeH)}
			}

			-- Add the numbers it covers
			self.padCache[1]["2to1_"..i].numbers = {}
			for n=i, 36, 3 do
				self.padCache[1]["2to1_"..i].numbers[n] = true
			end

			-- Add the payout if won
			self.padCache[1]["2to1_"..i].payout = 2
		end

		local startPos = Vector(9.3, -13.4, 14.6)
		local sizeW, sizeH = -5, 17.7
		local start
		-- Sets of 12
		for i=1, 3 do
			self.padCache[1]["12s_"..i] = {
				boundsA = {x = startPos.x, y = (startPos.y + (sizeH*(i-1)))},
				boundsB = {x = (startPos.x + sizeW), y = (startPos.y + (sizeH*(i)))},
			}

			-- Add the numbers it covers
			self.padCache[1]["12s_"..i].numbers = {}
			start = 12*(i-1)+1
			for n=start, start+11 do
				self.padCache[1]["12s_"..i].numbers[n] = true
			end

			-- Add the payout if won
			self.padCache[1]["12s_"..i].payout = 2
		end

		local startPos = Vector(14.5, -13.4, 14.6)
		local sizeW, sizeH = -5, 8.85
		local types = {"1to18", "even", "red", "black", "odd", "19to36"}
		for k, v in ipairs(types) do
			self.padCache[1][v] = {
				boundsA = {x = startPos.x, y = (startPos.y + (sizeH*(k-1)))},
				boundsB = {x = (startPos.x + sizeW), y = (startPos.y + (sizeH*(k)))},
			}

			-- Add the numbers it covers
			self.padCache[1][v].numbers = {}
			for i=1, 36 do
				if (v == "1to18") and (i <= 18) then
					self.padCache[1][v].numbers[i] = true
				elseif (v == "19to36") and (i >= 19) then 
					self.padCache[1][v].numbers[i] = true
				elseif (v == "even") and (i%2 == 0) then 
					self.padCache[1][v].numbers[i] = true
				elseif (v == "odd") and (i%2 == 1) then 
					self.padCache[1][v].numbers[i] = true
				elseif (v == "red") and table.HasValue({1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36}, i) then 
					self.padCache[1][v].numbers[i] = true
				elseif (v == "black") and table.HasValue({2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35}, i) then 
					self.padCache[1][v].numbers[i] = true
				end
			end

			-- Add the payout if won
			self.padCache[1][v].payout = 1
		end

		-- Raise bet
		self.padCache[1]["bet_raise"] = {
			boundsA = {x = -20, y = -5.2},
			boundsB = {x = -23.7, y = -0.567747},
		}
		-- Lower bet
		self.padCache[1]["bet_lower"] = {
			boundsA = {x = -20, y = 10.5},
			boundsB = {x = -23.7, y = 15.5},
		}

		-- Find the center point of all the 3d2d inputs
		for i, _ in ipairs(self.padCache) do
			for k, v in pairs(_) do
				self.padCache[i][k].origin = {x = v.boundsA.x+((v.boundsB.x - v.boundsA.x)/2), y = v.boundsA.y+((v.boundsB.y - v.boundsA.y)/2)}
			end
		end
	end
	for i, _ in ipairs(self.padCache) do
		for k, v in pairs(_) do
			if (pos.x < v.boundsA.x) and (pos.x > v.boundsB.x) and (pos.y > v.boundsA.y) and (pos.y < v.boundsB.y) and (pos.z > 13) and (pos.z < 15) then
				return k, v
			end
		end
	end

	return false
end
function ENT:GetPadByName(padName)
	if not self.padCache then
		self:GetCurrentPad(Vector(0, 0, 0)) -- Generate the cache
	end

	for i, _ in ipairs(self.padCache) do
		for k, v in pairs(_) do
			if k == padName then
				return k, v
			end
		end
	end
end
function ENT:GetPadsFromNumber(number)
	local pads = {}

	for i, _ in ipairs(self.padCache) do
		for k, v in pairs(_) do
			if v.numbers and v.numbers[number] then
				table.insert(pads, k)
			end
		end
	end

	return pads
end

PerfectCasino.Core.RegisterEntity("pcasino_roulette_table", {
	-- Bet data
	bet = {
		betLimit = {d = 3000, t = "num"},
		default = {d = 500, t = "num"},
		max = {d = 1000, t = "num"},
		min = {d = 100, t = "num"},
		iteration = {d = 100, t = "num"}
	},
	general = {
		betPeriod = {d = 30, t = "num"} -- The default bet
	}
},
"models/freeman/owain_roulette_table.mdl")
--addons/pcasino/lua/entities/pcasino_sign_interior_wall/cl_init.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_sign_plaque/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Sign Plaque"
ENT.Author = "Owain Owjo & The One Free-Man"
ENT.Category = "pCasino"
ENT.Spawnable = false
ENT.AdminSpawnable = false

PerfectCasino.Core.RegisterEntity("pcasino_sign_plaque", {
	-- General data
	general = {
		text = {d = "Cool Casino", t = "string"} -- The text to show
	}
},
"models/freeman/owain_casinosign_text.mdl")
--addons/pcasino/lua/entities/pcasino_sign_stand/cl_init.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_wheel_slot_machine/cl_init.lua:
include("shared.lua")

function ENT:Initialize()
	self.active = false
	self.spin = false

	self.wheels = {}
	for i=0, self:GetNumPoseParameters()-2 do
		self.wheels[i+1] = {name = self:GetPoseParameterName(i)}
	end

	self.isPreSpin = false
	self.hasInitialized = true
end
function ENT:PostData()
	if not self.hasInitialized then
		self:Initialize()
	end
end

local colorGold = Color(255, 200, 0)
local colorPurple = Color(255, 0, 255)
local colorDarkWhite = Color(240, 240, 240)
function ENT:Draw()
	self:DrawModel()
	if self:GetPos():DistToSqr(LocalPlayer():GetPos()) > 25000 then return end

	-- We can piggyback off the distance check to only request the entities data when it's needed :D
	if (not self.data) and (not PerfectCasino.Cooldown.Check(self:EntIndex(), 5)) then
		PerfectCasino.Core.RequestConfigData(self)
		return
	end

	if not self.data then return end

	-- For ticking value
	self.curJackpot = math.Approach(self.curJackpot or self:GetCurrentJackpot(), self:GetCurrentJackpot(), math.Round((self.data.bet.default*5)*FrameTime()))

	-- Basic setups
	local pos = self:GetPos()
	local ang = self:GetAngles()
	
	ang:RotateAroundAxis(ang:Up(), 90)
	ang:RotateAroundAxis(ang:Forward(), 90)

	cam.Start3D2D(pos + (ang:Up()*-5.17) + (ang:Right()*-31.63) + (ang:Forward()*-0.1), ang, 0.02)
		-- Spinny wheel icons
		local itter = 0
		for i=1, 360, 360/12 do 
			itter = itter + 1
			local x = math.cos(math.rad(i - 90)) * 115
			local y = math.sin(math.rad(i - 90)) * 115

			draw.NoTexture()
			surface.SetDrawColor(255, 255, 255, 255)
			surface.SetMaterial(PerfectCasino.Icons[self.data.wheel[itter].p].mat)

			PerfectCasino.UI.DrawTexturedRectRotatedPoint(x, y, 80, 80, (-i), 0, -145)
			PerfectCasino.UI.TextRotated(self.data.wheel[itter].n, x, y, colorDarkWhite, "pCasino.Title.Static", i-90)
		end

		-- Pre spin text
		if self.isPreSpin and (math.ceil((CurTime()*2)%2) == 1) then
			draw.SimpleText(PerfectCasino.Translation.UI.SpinThatWheel, "pCasino.Entity.Bid", 0, 590, colorPurple, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end

		draw.SimpleText(string.format(PerfectCasino.Translation.UI.JackPot, PerfectCasino.Config.FormatMoney(self.curJackpot)), "pCasino.Title.Static", 0, 650, colorGold, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

		draw.SimpleText(string.format(PerfectCasino.Translation.UI.Play, PerfectCasino.Config.FormatMoney(self.data.bet.default)), "pCasino.Title.Static", -415, 650, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		
	cam.End3D2D()
end

function ENT:Think()
	if not self.active then return end
	if self.win then
		for i=1, 2 do
			local winLight = DynamicLight(self:EntIndex()+i)
			if winLight then
				winLight.pos = self:GetPos()+(self:GetUp()*13)+(self:GetForward()*-5)+((self:GetRight()*3)*(-3+(2*i)))
				winLight.r = (self.win == 2) and ((math.Round(CurTime()%1) == 1) and 100 or 0) or 100
				winLight.g = self.win == 2 and 0 or 100
				winLight.b = (self.win == 2) and 100 or 0 -- and ((math.Round(CurTime()%2) == 1) and
				winLight.brightness = 3
				winLight.Decay = 1000
				winLight.Size = 100
				winLight.DieTime = CurTime() + 1
			end
		end
	end

	for k, v in pairs(self.wheels) do
		if v.spinning then
			self:SetPoseParameter(v.name, (CurTime()*600)%360)
		end
	end
end

-- Game specific code
function ENT:StartSpinning(i)
	self.wheels[i].spinning = true
end

function ENT:StopSpinning(i, result)
	local wheel = self.wheels[i]
	if not wheel then return end
	
	wheel.spinning = false
end

function ENT:StartWin(winData)
	-- 2 is jackpot, 1 is normal win
	self.win = tobool(winData.j) and 2 or 1
end

function ENT:EndWin()
	self.active = false
	self.win = nil
	self.spin = false
	self.isPreSpin = false
end

net.Receive("pCasino:WheelSlot:Spin:Start", function()
	local entity = net.ReadEntity()
	if not IsValid(entity) then return end
	if entity:GetPos():DistToSqr(LocalPlayer():GetPos()) > 500000 then return end
	if not entity.data then return end

	entity.active = true

	for i=1, 3 do
		entity:StartSpinning(i)
	end
end)

net.Receive("pCasino:WheelSlot:Spin:Stop", function()
	local entity = net.ReadEntity()
	if not IsValid(entity) then return end
	if not entity.active then return end
	if not entity.data then return end

	local key = net.ReadUInt(2)
	local result = net.ReadString()
	entity:StopSpinning(key, result)
end)

net.Receive("pCasino:WheelSlot:Spin:Win", function()
	local entity = net.ReadEntity()
	if not IsValid(entity) then return end
	if not entity.active then return end
	if not entity.data then return end

	local winData = net.ReadTable()
	entity:StartWin(winData)
	
	if tobool(winData.j) then
		entity.isPreSpin = true
		return
	end

	timer.Simple(2, function()
		entity:EndWin()
	end)
end)

net.Receive("pCasino:WheelSlot:Spin:Spin", function()
	local entity = net.ReadEntity()
	if not IsValid(entity) then return end
	if not entity.active then return end
	if not entity.data then return end

	entity.spin = true
	entity.isPreSpin = false
	timer.Simple(5, function()
		entity:EndWin()
	end)
end)
--addons/pcasino/lua/entities/pcasino_wheel_slot_machine/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/pide/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/tfm_config.lua:
return gluapack()()
--addons/policearmorylocker/lua/entities/police_locker/cl_init.lua:
include( "shared.lua" )

function ENT:Initialize()
end

local color_white = Color( 255, 255, 255, 255 )
local color_gray = Color( 125, 125, 125, 255 )
local color_red = Color( 150, 0, 0, 255 )

local mat_cooldown = Material( "craphead_scripts/lockpick/icon_cooldown.png" )
local mat_lockpick = Material( "craphead_scripts/lockpick/icon_lockpick.png")
local mat_icon
local cachevector = Vector( 0, 0, 70 )
function ENT:DrawTranslucent()
	self:DrawModel()
	
	local Dist = self:GetPos():Distance( EyePos() )
	if Dist <= CH_Armory_Locker.Config.DistanceToHeader then 
	if not LocalPlayer():Alive() then
		return
	end
	if not IsValid( LocalPlayer() ) then
		return
	end
	
	-- Header
	
		local pos = self:GetPos() + cachevector
		local PlayersAngle = LocalPlayer():GetAngles()
		local ang = Angle( 0, PlayersAngle.y - 180, 0 )
		
		ang:RotateAroundAxis( ang:Right(), -90 )
		ang:RotateAroundAxis( ang:Up(), 90 )
		
		cam.Start3D2D( pos, ang, 0.11 )
			if CH_Armory_Locker.Config.DisplayHeaderText then
				draw.SimpleTextOutlined( "Polis Cephaneligi", "ARMORY_OverheadTitle", 0, -300, CH_Armory_Locker.Design.ArmoryHeaderColor, 1, 1, 2, CH_Armory_Locker.Design.ArmoryHeaderBoarder )
			end
		cam.End3D2D()
	end
	
	if Dist > CH_Armory_Locker.Config.DistanceToIcons then 
		return 
	end
	
	if not IsValid( LocalPlayer():GetActiveWeapon() ) then
		return
	end
	if LocalPlayer():GetActiveWeapon():GetClass() != "armory_lockpick" then
		return
	end
	
	-- When aiming at it
	local PosEnt = self:GetPos()
	local AngEnt = self:GetAngles()
	
	local tr = self:WorldToLocal( LocalPlayer():GetEyeTrace().HitPos )

	AngEnt:RotateAroundAxis( AngEnt:Up(), 90 )
	AngEnt:RotateAroundAxis( AngEnt:Forward(), 90 )

	if LocalPlayer():GetNWBool( "LockpickCooldown" ) then
		mat_icon = mat_cooldown
	else
		mat_icon = mat_lockpick
	end

	cam.Start3D2D( PosEnt + AngEnt:Up() * 1.1, AngEnt, 0.11 )
		if tr:WithinAABox( CH_Armory_Locker.DoorPos.doorone, CH_Armory_Locker.DoorPos.doorone2 ) and Dist <= 100 then
			if not self:GetLockerDoor1() then
				surface.SetDrawColor( color_white )
				surface.SetMaterial( mat_icon )
				surface.DrawTexturedRect( -534, -559, 53, 53 )
			end
		elseif not self:GetLockerDoor1() then
			surface.SetDrawColor( color_gray )
			surface.SetMaterial( mat_icon )
			surface.DrawTexturedRect( -534, -559, 53, 53 )
		end
		
		if tr:WithinAABox( CH_Armory_Locker.DoorPos.doortwo, CH_Armory_Locker.DoorPos.doortwo2 ) and Dist <= 100 then
			if not self:GetLockerDoor2() then
				surface.SetDrawColor( color_white )
				surface.SetMaterial( mat_icon )
				surface.DrawTexturedRect( -406, -559, 53, 53 )
			end
		elseif not self:GetLockerDoor2() then
			surface.SetDrawColor( color_gray )
			surface.SetMaterial( mat_icon )
			surface.DrawTexturedRect( -406, -559, 53, 53 )
		end
		
		if tr:WithinAABox( CH_Armory_Locker.DoorPos.doorthree, CH_Armory_Locker.DoorPos.doorthree2 ) and Dist <= 100 then
			if not self:GetLockerDoor3() then
				surface.SetDrawColor( color_white )
				surface.SetMaterial( mat_icon )
				surface.DrawTexturedRect( -279, -559, 53, 53 )
			end
		elseif not self:GetLockerDoor3() then
			surface.SetDrawColor( color_gray )
			surface.SetMaterial( mat_icon )
			surface.DrawTexturedRect( -279, -559, 53, 53 )
		end
		
		if tr:WithinAABox( CH_Armory_Locker.DoorPos.doorfour, CH_Armory_Locker.DoorPos.doorfour2 ) and Dist <= 100 then
			if not self:GetLockerDoor4() then
				surface.SetDrawColor( color_white )
				surface.SetMaterial( mat_icon )
				surface.DrawTexturedRect( 227, -559, 53, 53 )
			end
		elseif not self:GetLockerDoor4() then
			surface.SetDrawColor( color_gray )
			surface.SetMaterial( mat_icon )
			surface.DrawTexturedRect( 227, -559, 53, 53 )
		end
		
		if tr:WithinAABox( CH_Armory_Locker.DoorPos.doorfive, CH_Armory_Locker.DoorPos.doorfive2 ) and Dist <= 100 then
			if not self:GetLockerDoor5() then
				surface.SetDrawColor( color_white )
				surface.SetMaterial( mat_icon )
				surface.DrawTexturedRect( 354, -559, 53, 53 )
			end
		elseif not self:GetLockerDoor5() then
			surface.SetDrawColor( color_gray )
			surface.SetMaterial( mat_icon )
			surface.DrawTexturedRect( 354, -559, 53, 53 )
		end
		
		if tr:WithinAABox( CH_Armory_Locker.DoorPos.doorsix, CH_Armory_Locker.DoorPos.doorsix2 ) and Dist <= 100 then
			if not self:GetLockerDoor6() then
				surface.SetDrawColor( color_white )
				surface.SetMaterial( mat_icon )
				surface.DrawTexturedRect( 482, -559, 53, 53 )
			end
		elseif not self:GetLockerDoor6() then
			surface.SetDrawColor( color_gray )
			surface.SetMaterial( mat_icon )
			surface.DrawTexturedRect( 482, -559, 53, 53 )
		end
	cam.End3D2D()
	
	-- ammo doors need special treatment huuuuh
	cam.Start3D2D( PosEnt + AngEnt:Up() * 0.57, AngEnt, 0.11 )
		if tr:WithinAABox( CH_Armory_Locker.DoorPos.doorseven, CH_Armory_Locker.DoorPos.doorseven2 ) and Dist <= 100 then
			if not self:GetLockerDoor7() then
				surface.SetDrawColor( color_white )
				surface.SetMaterial( mat_icon )
				surface.DrawTexturedRect( -78, -525, 48, 48 )
			end
		elseif not self:GetLockerDoor7() then
			surface.SetDrawColor( color_gray )
			surface.SetMaterial( mat_icon )
			surface.DrawTexturedRect( -78, -525, 49, 49 )
		end
		
		if tr:WithinAABox( CH_Armory_Locker.DoorPos.dooreight, CH_Armory_Locker.DoorPos.dooreight2 ) and Dist <= 100 then
			if not self:GetLockerDoor8() then
				surface.SetDrawColor( color_white )
				surface.SetMaterial( mat_icon )
				surface.DrawTexturedRect( -78, -375, 48, 48 )
			end
		elseif not self:GetLockerDoor8() then
			surface.SetDrawColor( color_gray )
			surface.SetMaterial( mat_icon )
			surface.DrawTexturedRect( -78, -375, 48, 48 )
		end
	cam.End3D2D()
end

local LastThink = 0
local SeqSpeed = 200

net.Receive( "ARM_LOCKER_DoorOpenSeq", function( length, ply )
	local locker_ent = net.ReadEntity()
	local door_num = net.ReadInt( 8 )
	local door_open = net.ReadBool()

	locker_ent.SwitchOn = door_open
	locker_ent.DoorNum = door_num
end )

function ENT:Think()
	
	local now = CurTime()
	local timepassed = now - LastThink
	LastThink = now
	
	if not self.DoorNum then
		return
	end
	
	if self.SwitchOn then
		CH_Armory_Locker.Doors[self.DoorNum] = math.Approach( CH_Armory_Locker.Doors[self.DoorNum], 100, SeqSpeed * timepassed )
	else
		CH_Armory_Locker.Doors[self.DoorNum] = math.Approach( CH_Armory_Locker.Doors[self.DoorNum], 0, SeqSpeed * timepassed )
	end

	self:SetPoseParameter( "door_1", CH_Armory_Locker.Doors[1] )
	self:SetPoseParameter( "door_2", CH_Armory_Locker.Doors[2] )
	self:SetPoseParameter( "door_3", CH_Armory_Locker.Doors[3] )
	self:SetPoseParameter( "door_4", CH_Armory_Locker.Doors[4] )
	self:SetPoseParameter( "door_5", CH_Armory_Locker.Doors[5] )
	self:SetPoseParameter( "door_6", CH_Armory_Locker.Doors[6] )
	self:SetPoseParameter( "door_7", CH_Armory_Locker.Doors[7] )
	self:SetPoseParameter( "door_8", CH_Armory_Locker.Doors[8] )
	
	self:InvalidateBoneCache()
end
--addons/sh_keypadcracker/lua/entities/prop_sh_keypadcracker/cl_init.lua:
include("shared.lua")

ENT.m_fNextDot = 0
ENT.m_sDots = ""

function ENT:Think()
	if (CurTime() >= self.m_fNextDot) then
		self.m_fNextDot = CurTime() + 1
		self.m_sDots = self.m_sDots .. "."

		if (self.m_sDots:len() >= 4) then
			self.m_sDots = ""
		end
	end
end

local matDot = Material("sprites/light_glow02_add")
local colDot = Color(255, 0, 0)

function ENT:Draw()
	self:DrawModel()

	if (self.m_sDots:len() % 2 == 0) then
		render.SetMaterial(matDot)
		render.DrawSprite(self:GetPos() + self:GetUp() * 5 - self:GetRight() * 0.5 + self:GetForward() * 1.65, 4, 4, colDot)
	end

	local ang = self:GetAngles()
	ang:RotateAroundAxis(ang:Up(), -90)

	local timeleft = self:GetCompletionTime() - CurTime()
	local frac = math.Clamp(timeleft / (self:GetCompletionTime() - self:GetStartTime()), 0, 1)

	cam.Start3D2D(self:GetPos() + ang:Up() * 4.5 - ang:Right() * 1.9 + ang:Forward() * 2.3, ang, 0.004)
		draw.SimpleTextOutlined("Keypad Cracker", "SH_KEYPADCRACKER_LARGE", 0, 0, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 4, color_black)

		local wi, he = surface.GetTextSize("Keypad Cracker")

		if (KEYPADCRACKER_SETTINGS.ShowProgress) then
			surface.SetDrawColor(0, 0, 0, 100)
			surface.DrawRect(-wi * 0.5, he * 0.75, wi, he)
			surface.SetDrawColor(255 * frac, 255 * (1 - frac), 0, 100)
			surface.DrawRect(-wi * 0.5, he * 0.75, wi * (1 - frac), he)

			surface.SetDrawColor(color_black)

			for i = 0, 3 do
				surface.DrawOutlinedRect(-wi * 0.5 + i, he * 0.75 + i, wi - i * 2, he - i * 2)
			end

			local tl = math.Round(timeleft)
			draw.SimpleTextOutlined(tl .. " second" .. (tl ~= 1 and "s" or "") .. " left" .. self.m_sDots, "SH_KEYPADCRACKER_MEDIUM", 0, he * 2.25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 4, color_black)
		else
			draw.SimpleTextOutlined("Hacking" .. self.m_sDots, "SH_KEYPADCRACKER_LARGE", 0, he * 1.25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 4, color_black)
		end
	cam.End3D2D()
end
--addons/skeypad_1.2.36/lua/entities/s_keypad/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Keypad"
ENT.Author = "Stromic"
ENT.Category = "Keypad" 
ENT.Spawnable = true
ENT.IsKeypad = true

function ENT:SetupDataTables()
	self:NetworkVar("Int",0,"State")
	self:NetworkVar("Entity",1,"owning_ent")
	self:NetworkVar("Bool", 0, "Persisted")
end

function ENT:SendCommand() -- To prevent errors casued by the old keypad.
end

function ENT:IsPermaKeypad()
	return SERVER and self.pid or self:GetPersisted()
end
--addons/turkish_food_mod-main/lua/entities/sade_pilav/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/salgam/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/salgam/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Şalgam"
ENT.Category = "Turkish Food Mod"
ENT.Spawnable = true
--addons/serious_business/lua/entities/sb_product/shared.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
store.steampowered.com/curator/32364216

Subscribe to the channel:↓
www.youtube.com/c/Famouse

More leaks in the discord:↓ 
discord.gg/rFdQwzm
------------------------------------------------------------------------*/

ENT.Base 			= "base_gmodentity";
ENT.Type 			= "anim";

ENT.PrintName		= "Product";
ENT.Category 		= "Serious Business";
ENT.Author			= "EnnX49";

ENT.Contact    		= "";
ENT.Purpose 		= "";
ENT.Instructions 	= "" ;

ENT.Spawnable		= true;
ENT.AdminSpawnable	= true;

ENT.RenderGroup		= RENDERGROUP_TRANSLUCENT;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/serious_business/lua/entities/sb_wk_place/shared.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
store.steampowered.com/curator/32364216

Subscribe to the channel:↓
https://www.youtube.com/c/Famouse

More leaks in the discord:↓ 
https://discord.gg/rFdQwzm
------------------------------------------------------------------------*/

ENT.Base 			= "base_gmodentity";
ENT.Type 			= "anim";

ENT.PrintName		= "Working Place";
ENT.Category 		= "Serious Business";
ENT.Author			= "EnnX49";

ENT.Contact    		= "";
ENT.Purpose 		= "";
ENT.Instructions 	= "" ;

ENT.Spawnable		= true;
ENT.AdminSpawnable	= true;

ENT.RenderGroup		= RENDERGROUP_TRANSLUCENT;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/serious_business/lua/entities/sb_wk_seat/shared.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
store.steampowered.com/curator/32364216

Subscribe to the channel:↓
https://www.youtube.com/c/Famouse

More leaks in the discord:↓ 
discord.gg/rFdQwzm
------------------------------------------------------------------------*/

ENT.Base 			= "base_gmodentity";
ENT.Type 			= "anim";

ENT.PrintName		= "Worker Seat";
ENT.Category 		= "Serious Business";
ENT.Author			= "EnnX49";

ENT.Contact    		= "";
ENT.Purpose 		= "";
ENT.Instructions 	= "" ;

ENT.Spawnable		= true;
ENT.AdminSpawnable	= true;

ENT.RenderGroup		= RENDERGROUP_TRANSLUCENT;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/turkish_food_mod-main/lua/entities/sckegg/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/tavuklu_pilav/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Tavuklu Pilav"
ENT.Category = "Turkish Food Mod"
ENT.Spawnable = true
--addons/voidfactions-1.10.6/lua/entities/voidfactions_npc/shared.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/entities/zfs_smoothie/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_clipper/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a

function ENT:Initialize()
	zgo2.Clipper.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

function ENT:Draw()
	self:DrawModel()
	zgo2.Clipper.OnDraw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ENT:Think()
	zgo2.Clipper.OnThink(self)
	self:SetNextClientThink(CurTime())
	return true
end

function ENT:OnRemove()
	zgo2.Clipper.OnRemove(self)
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_doobytable/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_fuel.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zgo2_item_base")
ENT.Type                    = "anim"
ENT.Base                    = "zgo2_item_base"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Fuel"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_fuel.mdl"
ENT.RenderGroup             = RENDERGROUP_OPAQUE
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end

function ENT:CanDrive(ply)
    return false
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

if SERVER then
	function ENT:PostInitialize()
		zgo2.Destruction.SetupHealth(self)
	end
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_generator/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ENT:Initialize()
	zgo2.Generator.Initialize(self)
end

function ENT:Draw()
	self:DrawModel()
	zgo2.Generator.OnDraw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:Think()
	zgo2.Generator.OnThink(self)
end

function ENT:OnRemove()
	zgo2.Generator.OnRemove(self)
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_jar.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zgo2_item_base")
ENT.Type                    = "anim"
ENT.Base                    = "zgo2_item_base"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Jar"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_jar.mdl"
ENT.RenderGroup             = RENDERGROUP_BOTH
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end

function ENT:CanDrive(ply)
    return false
end

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "WeedID")
	self:NetworkVar("Int", 1, "WeedAmount")
	self:NetworkVar("Int", 2, "WeedTHC")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

	if SERVER then
		self:SetWeedID(0)
		self:SetWeedAmount(0)
		self:SetWeedTHC(0)
	end
end

if SERVER then
	function ENT:PostInitialize()
		zgo2.Jar.Initialize(self)
	end

	function ENT:AcceptInput(inputName, activator, caller, data)
		if inputName == "Use" and IsValid(activator) and activator:IsPlayer() and activator:Alive() then
			zgo2.Jar.OnUse(self, activator)
		end
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

	function ENT:PhysicsCollide(data, physobj)
		zgo2.Jar.OnTouch(self, data.HitEntity)
	end
end

if CLIENT then
	function ENT:Initialize()
		self:DestroyShadow()

		timer.Simple(0.5, function()
			if IsValid(self) then
				self.m_Initialized = true
			end
		end)
	end

	function ENT:Think()
		zgo2.Jar.Think(self)
	end

	function ENT:Draw()
		self:DrawModel()
		zgo2.Jar.Draw(self)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_mixerbowl/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_npc/cl_init.lua:
include("shared.lua")

function ENT:Draw()
  self:DrawModel()
  if not binbonentdraw then return end
  binbonentdraw(self, "Ot/Esrar Alıcısı", true, 0, 10, 20, true)
  binbonentdraw(self, "Esrarlarını veya otlarını satabilirsin.", false, 0,100, 20, false)
end
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_npc/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_npc/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

ENT.Type                    = "ai"
ENT.Base                    = "base_ai"
ENT.AutomaticFrameAdvance   = true
ENT.PrintName               = "Weed Dealer"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.RenderGroup             = RENDERGROUP_BOTH
ENT.Model 					= "models/Eli.mdl"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_splicer/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_tent/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_tent/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

function ENT:Initialize()
	zgo2.Tent.Initialize(self)
end

function ENT:Draw()
	self:DrawModel()
	zgo2.Tent.OnDraw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

function ENT:Think()
	zgo2.Tent.OnThink(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_watertank/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_weedbranch.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zgo2_item_base")
ENT.Type                    = "anim"
ENT.Base                    = "zgo2_item_base"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Weed Branch"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_weedstick.mdl"
ENT.RenderGroup             = RENDERGROUP_OPAQUE

function ENT:CanProperty(ply)
	return ply:IsSuperAdmin()
end

function ENT:CanTool(ply, tab, str)
	return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

function ENT:CanDrive(ply)
	return false
end

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "PlantID")
	self:NetworkVar("Bool", 0, "IsDried")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

	if SERVER then
		self:SetPlantID(1)
		self:SetIsDried(false)
		//self:SetPlantID(zgo2.Plant.GetRandomID())
	end
end

if SERVER then
	function ENT:Initialize()
		zgo2.Weedbranch.Initialize(self)
	end

	function ENT:AcceptInput(inputName, activator, caller, data)
		if inputName == "Use" and IsValid(activator) and activator:IsPlayer() and activator:Alive() then
			zgo2.Weedbranch.OnUse(self, activator)
		end
	end
end

if CLIENT then
	function ENT:Initialize()
		self:DestroyShadow()

		timer.Simple(0.5, function()
			if IsValid(self) then
				self.m_Initialized = true
			end
		end)
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

	function ENT:Think()
		if zgo2.Plant.UpdateMaterials[ self ] == nil then
			zgo2.Plant.UpdateMaterials[ self ] = true
		end
	end
end

--addons/zeros_golddiggger/lua/entities/zgw_goldwasher/cl_init.lua:


include("shared.lua")

function ENT:Initialize()
	zgw.GoldWasher.Initialize(self)
end

function ENT:DrawTranslucent()
	self:Draw()
end


function ENT:Draw()
	self:DrawModel()
	zgw.GoldWasher.Draw(self)
end

function ENT:OnRemove()
	zgw.GoldWasher.OnRemove(self)
end

function ENT:Think()
	zgw.GoldWasher.OnThink(self)
end

--addons/zeros_golddiggger/lua/entities/zgw_jar/shared.lua:

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_goldwash/zgw_jar.mdl"
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Jar"
ENT.Category = "Zeros GoldWasher"
ENT.RenderGroup = RENDERGROUP_TRANSLUCENT

function ENT:SetupDataTables()
    self:NetworkVar("Int", 1, "Gold")

    if (SERVER) then
        self:SetGold(0)
    end
end

--addons/zeros_golddiggger/lua/entities/zgw_mat/shared.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_dropoff/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:Initialize()
	zmlab2.Dropoff.Initialize(self)
end

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:Draw()
	zmlab2.Dropoff.Draw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

function ENT:OnRemove()
	zmlab2.Dropoff.OnRemove(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ENT:Think()
	zmlab2.Dropoff.Think(self)
	self:SetNextClientThink(CurTime())
	return true
end

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_acid/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

function ENT:Initialize()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

end

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

function ENT:Draw()
	self:DrawModel()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_meth/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_filter/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")

function ENT:Initialize()
	zmlab2.Filter.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:Draw()
	self:DrawModel()
	zmlab2.Filter.Draw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

function ENT:OnRemove()
    zmlab2.Filter.OnRemove(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_frezzer/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

function ENT:Initialize()
	zmlab2.Frezzer.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

function ENT:Draw()
	self:DrawModel()
	zmlab2.Frezzer.Draw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:Think()
    zmlab2.Frezzer.Think(self)
	self:SetNextClientThink(CurTime())
	return true
end

function ENT:OnRemove()
    zmlab2.Frezzer.OnRemove(self)
end

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_storage/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_storage.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Storage"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_OPAQUE

function ENT:SetupDataTables()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

    self:NetworkVar("Int", 1, "NextPurchase")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

    if (SERVER) then
        self:SetNextPurchase(0)
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_table/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")

function ENT:Initialize()
	zmlab2.Table.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

function ENT:Draw()
	self:DrawModel()
	zmlab2.Table.Draw(self)
end

function ENT:Think()
	zmlab2.Table.Think(self)
	self:SetNextClientThink(CurTime())
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

	return true
end

function ENT:OnRemove()
	zmlab2.Table.OnRemove(self)
end

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_table/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_table.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Table"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_OPAQUE

function ENT:SetupDataTables()
    self:NetworkVar("Int", 1, "ProcessState")
    self:NetworkVar("Entity", 1, "Crate")
    self:NetworkVar("Entity", 2, "Tray")
    self:NetworkVar("Bool", 1, "IsAutobreaking")

    if (SERVER) then
        self:SetIsAutobreaking(false)
        self:SetProcessState(0)
        self:SetCrate(NULL)
        self:SetTray(NULL)
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

function ENT:OnDrop_Crate(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)
    if lp.x > 5 and lp.x < 19 and lp.y < 13 and lp.y > 6 and lp.z > 35 and lp.z < 38 then
        return true
    else
        return false
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ENT:OnDrop_Tray(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)
    if lp.x > -19 and lp.x < -6 and lp.y < 13 and lp.y > 6 and lp.z > 35 and lp.z < 38 then
        return true
    else
        return false
    end
end

function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_aluminium/cl_init.lua:
include("shared.lua")

function ENT:OnRemove()
	self:StopParticles()
end

function ENT:Initialize()
	self.emitTime = -1
end

function ENT:Draw()
	self:DrawModel()
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:ShakeLogic()
	if ((self:GetVelocity():Length() > 200) and (self:GetVelocity():Length() < 1000) and self.emitTime < CurTime()) then
		self:EmitSound("Aluminium_walk")
		if GetConVar("zmlab_cl_vfx_particleeffects"):GetInt() == 1 then
			ParticleEffect("zmlab_aluminium_drops", self:GetPos(), self:GetAngles(), self)
		end
		self.emitTime = CurTime() + 0.5
	end
end

function ENT:Think()
	self:ShakeLogic()
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_aluminium/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_entity"
ENT.Spawnable = true
ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.PrintName = "Aluminium"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros Meth Lab"
ENT.Model = "models/zerochain/zmlab/zmlab_aluminiumbox.mdl"

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_baseanim/shared.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_meth/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
	if zmlab.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 200) then
		self:DrawInfo()
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:DrawInfo()
	local Pos = self:GetPos() + Vector(0, 0, 20)
	local Ang = Angle(0, LocalPlayer():EyeAngles().y - 90, 90)
	cam.Start3D2D(Pos, Ang, 0.1)
		draw.DrawText(math.Round(self:GetMethAmount()) .. zmlab.config.UoW, "zmlab_font4", 0, 5, zmlab.default_colors["white01"], TEXT_ALIGN_CENTER)
	cam.End3D2D()
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_meth_baggy/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()

	if zmlab.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 200) then
		self:DrawInfo()
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:DrawInfo()
	local Pos = self:GetPos() + Vector(0, 0, 10)
	local Ang = Angle(0, LocalPlayer():EyeAngles().y - 90, 90)
	cam.Start3D2D(Pos, Ang, 0.1)
		draw.DrawText(math.Round(self:GetMethAmount()) .. zmlab.config.UoW, "zmlab_font1", 0, 5, zmlab.default_colors["white01"], TEXT_ALIGN_CENTER)
	cam.End3D2D()
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_methbuyer/shared.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_methdropoff/cl_init.lua:
include("shared.lua")

ZMLAB_SHAFTS = ZMLAB_SHAFTS or {}

function ENT:Initialize()
	self.Closed = true
	self.RenderStencil = false
	self:CreateClientSideModel()
	ZMLAB_SHAFTS[self:EntIndex()] = self
end

function ENT:CreateClientSideModel()
	self.csModel = ClientsideModel("models/zerochain/zmlab/zmlab_dropoffshaft_shaft.mdl")
	self.csModel:SetPos(self:GetPos())
	self.csModel:SetAngles(self:GetAngles())
	self.csModel:SetParent(self)
	self.csModel:SetNoDraw(true)
end

function ENT:Draw()
	self:DrawModel()
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:Think()

	if IsValid(self.csModel) then
		self.csModel:SetPos(self:GetPos())
		self.csModel:SetAngles(self:GetAngles())
	end

	local closed  = self:GetIsClosed()

	if self.Closed ~= closed then
		self.Closed = closed

		if self.Closed then

			zmlab.f.ClientAnim(self, "close", 2)
			self:EmitSound("DropOffSpawn")

			timer.Simple(2,function()
				if IsValid(self) then
					self.RenderStencil = false
				end
			end)
		else
			self.RenderStencil = true
			zmlab.f.ClientAnim(self, "open", 1)
			self:EmitSound("DropOffSpawn")
		end
	end

	self:SetNextClientThink(CurTime())
	return true
end




function ENT:OnRemove()
	self.csModel:Remove()
end


hook.Add("PreDrawTranslucentRenderables", "a_zmlab_DrawDropOff", function(depth, skybox)
	if skybox then return end
	if depth then return end

	for k, s in pairs(ZMLAB_SHAFTS) do
		if not IsValid(s) then continue end
		if (s.RenderStencil == false) then continue end

		render.ClearStencil()
		render.SetStencilEnable(true)
		render.SetStencilWriteMask(255)
		render.SetStencilTestMask(255)
		render.SetStencilReferenceValue(57)
		render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_ALWAYS)
		render.SetStencilPassOperation(STENCILOPERATION_REPLACE)
		render.SetStencilFailOperation(STENCIL_ZERO)
		render.SetStencilZFailOperation(STENCIL_ZERO)

		cam.Start3D2D(s:GetPos() + s:GetUp() * 1, s:GetAngles(), 0.5)
			draw.RoundedBox(0, -45, -45, 90, 90, zmlab.default_colors["white02"])
		cam.End3D2D()

		render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_EQUAL)
		render.SuppressEngineLighting(true)
		render.DepthRange(0, 0.8)

		if (IsValid(s.csModel)) then
			s.csModel:DrawModel()
		else
			s:CreateClientSideModel()
		end

		render.SuppressEngineLighting(false)
		render.SetStencilEnable(false)
		render.DepthRange(0, 1)
	end
end)

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_palette/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()

	if zmlab.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 200) then
		self:DrawInfo()
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:DrawInfo()
	local mAmount = self:GetMethAmount()

	if mAmount > 0 then
		local Ang = Angle(0, LocalPlayer():EyeAngles().y - 90, 90)
		cam.Start3D2D(self:LocalToWorld(Vector(0, 0, 10 + 3 * self.LastCrateCount)), Ang, 0.1)
		draw.DrawText(math.Round(mAmount) .. zmlab.config.UoW, "zmlab_font4", 0, 5, zmlab.default_colors["white01"], TEXT_ALIGN_CENTER)
		cam.End3D2D()
	end
end

function ENT:Initialize()
	self.Count_Y = 0
	self.Count_X = 0
	self.Count_Z = 0

	self.LastCrateCount = 0
end

function ENT:CrateChangeUpdater()
	local crateCount = self:GetCrateCount()

	if self.LastCrateCount ~= crateCount then
		self.LastCrateCount = crateCount

		self:UpdateClientProps()
	end
end


function ENT:Think()
	if zmlab.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 1000) then
		self:CrateChangeUpdater()
	else
		self:RemoveClientModels()
		self.ClientProps = {}
		self.LastCrateCount = -1
	end
end

function ENT:UpdateClientProps()
	self:RemoveClientModels()

	self.ClientProps = {}

	if self.LastCrateCount > 0 then
		for i = 1, self.LastCrateCount do
			self:CreateClientCrate(i)
		end
	end
end

function ENT:OnRemove()
	self:RemoveClientModels()
end

function ENT:CreateClientCrate(cratecount)

	local pos = self:GetPos() - self:GetRight() * 25 - self:GetForward() * 50 + self:GetUp() * 3
	local ang = self:GetAngles()

	if self.Count_X >= 2 then
		self.Count_X = 1
		self.Count_Y = self.Count_Y + 1
	else
		self.Count_X = self.Count_X + 1
	end

	if self.Count_Y >= 3 then
		self.Count_Y = 0
		self.Count_Z = self.Count_Z + 1
	end

	pos = pos + self:GetForward() * 33 * self.Count_X
	pos = pos + self:GetRight() * 25 * self.Count_Y
	pos = pos + self:GetUp() * 13.5 * self.Count_Z


	local crate = ents.CreateClientProp()
	if not IsValid(crate) then return end
	crate:SetAngles(ang)
	crate:SetModel("models/zerochain/zmlab/zmlab_transportcrate_full.mdl")
	crate:SetPos(pos)

	crate:Spawn()
	crate:Activate()

	crate:SetRenderMode(RENDERMODE_NORMAL)
	crate:SetParent(self)

	table.insert(self.ClientProps, crate)
end

function ENT:RemoveClientModels()
	self.Count_Y = 0
	self.Count_X = 0
	self.Count_Z = 0

	if self.ClientProps and table.Count(self.ClientProps) > 0 then
		for k, v in pairs(self.ClientProps) do
			if IsValid(v) then
				v:Remove()
			end
		end
	end
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_palette/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_bar_gold.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_basket/cl_init.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_basket/cl_init.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

include("shared.lua")

function ENT:Initialize()
	self.InsertEffect = ParticleEmitter(self:GetPos())
	self.LastStorage = 0

	timer.Simple(0.25,function()
		if IsValid(self) then self.Initialized = true end
	end)
end

function ENT:Draw()
	self:DrawModel()

	if zrmine.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 200) then
		self:DrawInfo()
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end

// UI STUFF
function ENT:DrawInfo()
	local Pos = self:GetPos() + Vector(0, 0, 20)
	local Ang = Angle(0, LocalPlayer():EyeAngles().y - 90, 90)
	local amount = math.Round(self:GetResourceAmount(), 2)
	local Text = math.Round(amount) .. zrmine.config.BuyerNPC_Mass

	local rtype = self:GetResourceType()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if (amount >= zrmine.config.ResourceCrates_Capacity) then
		info = "- " .. zrmine.language.Basket_Full .. " -"
	end

	local size = 200
	local cSize = math.Round(200 / zrmine.config.ResourceCrates_Capacity)
	cSize = math.Round(cSize * amount)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if (amount > 0) then
		cam.Start3D2D(Pos, Ang, 0.1)
			surface.SetDrawColor(zrmine.default_colors["white01"])
			surface.SetMaterial(zrmine.default_materials["Circle"])
			surface.DrawTexturedRect(-100, -100, size, size)

			if (amount >= zrmine.config.ResourceCrates_Capacity) then
				surface.SetDrawColor(zrmine.default_colors["red01"])
				surface.SetMaterial(zrmine.default_materials["Circle"])
				surface.DrawTexturedRect((-cSize - cSize * 0.1) / 2, (-cSize - cSize * 0.1) / 2, cSize + cSize * 0.1, cSize + cSize * 0.1)
			end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

			surface.SetDrawColor(zrmine.f.GetOreColor(rtype))
			surface.SetMaterial(zrmine.default_materials["Circle"])
			surface.DrawTexturedRect(-cSize / 2, -cSize / 2, cSize, cSize)

			draw.DrawText(zrmine.f.GetOreTranslation(rtype), "zrmine_resource_font1", 0, -50, zrmine.default_colors["white02"], TEXT_ALIGN_CENTER)
			draw.DrawText(Text, "zrmine_resource_font1", 0, 0, zrmine.default_colors["white02"], TEXT_ALIGN_CENTER)
		cam.End3D2D()
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 


                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

local basket_skins = {
	["Empty"] = function(x)
		x:SetSkin(0)
	end,
	["Iron"] = function(x)
		x:SetSkin(1)
	end,
	["Bronze"] = function(x)
		x:SetSkin(2)
	end,
	["Silver"] = function(x)
		x:SetSkin(3)
	end,
	["Gold"] = function(x)
		x:SetSkin(4)
	end,
	["Coal"] = function(x)
		x:SetSkin(5)
	end
}

function ENT:Think()
	if self.Initialized == true and zrmine.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 1000) then
		local r_amount = self:GetResourceAmount()

		if self.LastStorage ~= r_amount then
			self.LastStorage = r_amount
			local r_type = self:GetResourceType()
			basket_skins[r_type](self)

			if (r_amount >= zrmine.config.ResourceCrates_Capacity) then
				self:SetBodygroup(0, 3)
			elseif (r_amount >= zrmine.config.ResourceCrates_Capacity / 2) then
				self:SetBodygroup(0, 2)
			elseif (r_amount > 0) then
				self:SetBodygroup(0, 1)
			else
				self:SetBodygroup(0, 0)
			end
		end
	else
		self.LastStorage = -1
	end
end

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_conveyorbelt/shared.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.RenderGroup = RENDERGROUP_OPAQUE
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Conveyorbelt"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ENT.Model = "models/zerochain/props_mining/zrms_conveyorbelt.mdl"
ENT.GravelModel = "models/zerochain/props_mining/zrms_conveyorbelt_n_gravel.mdl"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ENT.GravelAnimTime = 6.6

ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false

ENT.TransportSpeed = 3
ENT.HoldAmount = zrmine.config.Belt_Capacity
ENT.TransportAmount = 5
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()

	self:NetworkVar("Int", 0, "CurrentState")

	self:NetworkVar("Entity", 0, "ModuleChild")
	self:NetworkVar("Entity", 1, "ModuleParent")
	self:NetworkVar("Int", 2, "ConnectionPos")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if (SERVER) then

		self:SetCurrentState(0)

		self:SetModuleChild(NULL)
		self:SetModuleParent(NULL)
		self:SetConnectionPos(-1)
	end


	self:NetworkVar("Float", 4, "Coal")
	self:NetworkVar("Float", 0, "Iron")
	self:NetworkVar("Float", 1, "Bronze")
	self:NetworkVar("Float", 2, "Silver")
	self:NetworkVar("Float", 3, "Gold")

	if SERVER then
		self:SetCoal(0)
		self:SetIron(0)
		self:SetBronze(0)
		self:SetSilver(0)
		self:SetGold(0)
	end

	// NW SETUP STUFF FOR GRAVEL ANIM
	zrmine.f.Gravel_SetupDataTables(self)
end

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_conveyorbelt_c_left.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_conveyorbelt_c_right.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_crusher/shared.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.RenderGroup = RENDERGROUP_OPAQUE
ENT.Spawnable = false
ENT.AdminSpawnable = false

ENT.PrintName = "Crusher"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"

ENT.Model = "models/zerochain/props_mining/zrms_crusher.mdl"
ENT.GravelModel = "models/zerochain/props_mining/zrms_crushedgravel01.mdl"

ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false

function ENT:SetupDataTables()

	self:NetworkVar("Int", 0, "CurrentState")

	self:NetworkVar("Entity", 0, "ModuleChild")
	self:NetworkVar("Entity", 1, "ModuleParent")
	self:NetworkVar("Int", 2, "ConnectionPos")

	if (SERVER) then

		self:SetModuleChild(NULL)
		self:SetModuleParent(NULL)
		self:SetConnectionPos(-1)

		self:SetCurrentState(0)
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	self:NetworkVar("Float", 4, "Coal")
	self:NetworkVar("Float", 0, "Iron")
	self:NetworkVar("Float", 1, "Bronze")
	self:NetworkVar("Float", 2, "Silver")
	self:NetworkVar("Float", 3, "Gold")

	if SERVER then
		self:SetCoal(0)
		self:SetIron(0)
		self:SetBronze(0)
		self:SetSilver(0)
		self:SetGold(0)
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	// NW SETUP STUFF FOR GRAVEL ANIM
	zrmine.f.Gravel_SetupDataTables(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_inserter.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_conveyorbelt")
ENT.Type = "anim"
ENT.Base = "zrms_conveyorbelt"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Conveyorbelt - Inserter"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ENT.Model = "models/zerochain/props_mining/zrms_inserter.mdl"
ENT.GravelModel = "models/zerochain/props_mining/zrms_inserter_gravel.mdl"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ENT.GravelAnimTime = 7.8
ENT.TransportSpeed = 3
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_melter/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_melter/shared.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.RenderGroup = RENDERGROUP_OPAQUE
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Melter"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.Model = "models/zerochain/props_mining/zrms_melter.mdl"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	self:NetworkVar("Float", 1, "CoalAmount")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	self:NetworkVar("Int", 0, "CurrentState")
	self:NetworkVar("Bool", 0, "IsLowered")

	self:NetworkVar("Float", 0, "ResourceAmount")
	self:NetworkVar("String", 1, "ResourceType")


	if (SERVER) then
		self:SetResourceAmount(0)
		self:SetCoalAmount(0)
		self:SetCurrentState(0)
		self:SetResourceType("Empty")
		self:SetIsLowered(false)
	end
end

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_minecart/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_refiner_iron.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_refiner")
ENT.Type = "anim"
ENT.Base = "zrms_refiner"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Refiner - Iron"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false
ENT.RefinerType = "Iron"
ENT.RefiningTime = zrmine.config.Iron_RefiningTime
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_resource_iron.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_sorter_bronze.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_sorter")
ENT.Type = "anim"
ENT.Base = "zrms_sorter"
ENT.RenderGroup = RENDERGROUP_OPAQUE
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Filter - Bronze"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.Model = "models/zerochain/props_mining/zrms_conveyorbelt_sorter.mdl"
ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false
ENT.SorterSpeed = 3
ENT.WorkAmount = 6
ENT.HoldAmount = 25
ENT.FilterType = "Bronze" // What type of resource are we sorting out
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_splitter/shared.lua:
return gluapack()()
--addons/zeros_trashman_v1.6.3/lua/entities/ztm_manhole/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_constructionkit_cooler.lua:
AddCSLuaFile()
DEFINE_BASECLASS("zyb_distillery_constructionkit")
ENT.Type = "anim"
ENT.Base = "zyb_distillery_constructionkit"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_yeastbeast/yb_crate.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "ConstructionKit - Cooler"
ENT.Category = "Zeros YeastBeast"
ENT.RenderGroup = RENDERGROUP_OPAQUE

ENT.ConstructionID = 2

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_distillery_constructionkit/cl_init.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_fuel/cl_init.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_paperbag/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_yeastbeast/yb_paperbag.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Paperbag"
ENT.Category = "Zeros YeastBeast"
ENT.RenderGroup = RENDERGROUP_OPAQUE



function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "YeastAmount")

	if (SERVER) then
		self:SetYeastAmount(0)
	end
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_water/cl_init.lua:
return gluapack()()