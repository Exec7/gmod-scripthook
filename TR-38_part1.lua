--Stealed clientside server code by exechack.cc
--Hostname: [TR] Venom Roleplay | DarkRP #venom25 - discord.gg/eniyisi  - Part 1/12 - 06/04/2025


--PATH lua/autorun/!!!!!!!!!!!!!!!!!!!!!!!binbon.lua.lua:
return gluapack()()
--lua/zclib/util/sh_convar.lua:
zclib = zclib or {}
zclib.Convar = zclib.Convar or {}
zclib.Convars = zclib.Convars or {}

function zclib.Convar.Get(convar)
    return tonumber(zclib.Convars[convar] or 0, 10)
end

function zclib.Convar.GetBool(convar)
    return tonumber(zclib.Convars[convar] or 0, 10) == 1
end

function zclib.Convar.Set(convar, val)
    zclib.Convars[convar] = val
end

function zclib.Convar.Create(convar, val, data)
    CreateConVar(convar, val, data)
    zclib.Convars[convar] = GetConVar(convar):GetString()

    local identifier = "convar_" .. convar
    cvars.RemoveChangeCallback(convar, identifier)
    cvars.AddChangeCallback(convar, function(convar_name, value_old, value_new)
        zclib.Convar.Set(convar, value_new)
    end, identifier)
end

if CLIENT then
    zclib.Convar.Create("zclib_cl_vfx_dynamiclight", "1", {FCVAR_ARCHIVE})
    zclib.Convar.Create("zclib_cl_sfx_volume", "1", {FCVAR_ARCHIVE})
    zclib.Convar.Create("zclib_cl_drawui", "1", {FCVAR_ARCHIVE})
    zclib.Convar.Create("zclib_cl_particleeffects", "1", {FCVAR_ARCHIVE})
end

--lua/zclib/util/sh_debug.lua:
zclib = zclib or {}

function zclib.Debug(mgs)
	if zclib.config.Debug then
		if istable(mgs) then
			print("[    DEBUG    ] Table Start >")
			PrintTable(mgs)
			print("[    DEBUG    ] Table End <")
		else
			print("[    DEBUG    ] [" .. math.Round(CurTime(), 2) .. "] " .. mgs)
		end
	end
end

function zclib.Debug_Net(NetworkString,Len)
	zclib.Debug("[" .. NetworkString .. "][" .. (Len / 8) .. " Bytes]")
end

function zclib.ConCommand(command,func)
	concommand.Add(command, function(ply, cmd, args)
	    if zclib.Player.IsAdmin(ply) then
			pcall(func,ply, cmd, args)
	    end
	end)
end

// Custom debug function which only debugs objects which have debug enabled
function zclib.Debug_Entity(ent, msg)
	if ent.Debug == nil or ent.Debug == false then return end
	print(tostring(ent) .. " " .. msg)
	debugoverlay.Sphere(ent:GetPos(), 20, 1, Color(255, 0, 255, 25), true)
end

zclib.ConCommand("zclib_debug_setmodel",function(ply,cmd,args)
	if zclib.Player.IsAdmin(ply) then ply:SetModel(args[1]) end
end)

--lua/zclib/util/cl_bluemasks.lua:
if SERVER then return end

// Blues Masks and Shadows
//https://forum.facepunch.com/f/gmoddev/oaxt/Blue-s-Masks-and-Shadows/1/

//This code can be improved alot.
//Feel free to improve, use or modify in anyway altough credit would be apreciated.

// NOTE Implement this in the libary such that it wont conflict with other people who use bluesmasks

BMASKS = {} //Global table, access the functions here
BMASKS.Materials = {} //Cache materials so they dont need to be reloaded
BMASKS.Masks = {} //A table of all active mask objects, you should destroy a mask object when done with it

//The material used to draw the render targets
BMASKS.MaskMaterial = CreateMaterial("!bluemask", "UnlitGeneric", {
	[ "$translucent" ] = 1,
	[ "$vertexalpha" ] = 1,
	[ "$alpha" ] = 1
})

//Creates a mask with the specified options
//Be sure to pass a unique maskName for each mask, otherwise they will override each other
BMASKS.CreateMask = function(maskName, maskPath, maskProperties)
	local mask = {}

	//Set mask name
	mask.name = maskName

	//Load materials
	if BMASKS.Materials[ maskPath ] == nil then
		BMASKS.Materials[ maskPath ] = Material(maskPath, maskProperties)
	end

	//Set the mask material
	mask.material = BMASKS.Materials[ maskPath ]

	//Create the render target
	mask.renderTarget = GetRenderTargetEx("BMASKS:" .. maskName, ScrW(), ScrH(), RT_SIZE_FULL_FRAME_BUFFER, MATERIAL_RT_DEPTH_NONE, 2, CREATERENDERTARGETFLAGS_UNFILTERABLE_OK, IMAGE_FORMAT_RGBA8888)
	BMASKS.Masks[ maskName ] = mask

	return maskName
end

//Call this to begin drawing with a mask.
//After calling this any draw call will be masked until you call EndMask(maskName)
BMASKS.BeginMask = function(maskName)

	//FindMask
	if BMASKS.Masks[ maskName ] == nil then
		print("Cannot begin a mask without creating it first!")

		return false
	end

	//Store current render target
	BMASKS.Masks[ maskName ].previousRenderTarget = render.GetRenderTarget()

	//Confirgure drawing so that we write to the masks render target
	render.PushRenderTarget(BMASKS.Masks[ maskName ].renderTarget)
	render.OverrideAlphaWriteEnable(true, true)
	render.Clear(0, 0, 0, 0)
end

//Ends the mask and draws it
//Not calling this after calling BeginMask will cause some really bad effects
//This done return the render target used, using this you can create other effects such as drop shadows without problems
//Passes true for dontDraw will result in it not being render and only returning the texture of the result (which is ScrW()xScrH())
local CachedOpacities = {}
BMASKS.EndMask = function(maskName, x, y, sizex, sizey, opacity, rotation, dontDraw , MakeTile)
	dontDraw = dontDraw or false
	rotation = rotation or 0
	opacity = opacity or 255

	//Draw the mask
	//render.OverrideBlendFunc(true, BLEND_ZERO, BLEND_SRC_ALPHA, BLEND_DST_ALPHA, BLEND_ZERO)

	render.OverrideBlend(true, BLEND_ZERO, BLEND_SRC_ALPHA, BLENDFUNC_ADD, BLEND_DST_ALPHA, BLEND_ZERO, BLENDFUNC_ADD)

	// Cache that color, no reason to spamm
	if CachedOpacities[ opacity ] == nil then CachedOpacities[ opacity ] = Color(255, 255, 255, opacity) end

	surface.SetDrawColor(CachedOpacities[ opacity ])
	surface.SetMaterial(BMASKS.Masks[ maskName ].material)

	if MakeTile then
		local u0, v0 = 0 + x, 0 + y
		local u1, v1 = 1 + x, 1 + y
		surface.DrawTexturedRectUV(0, 0, sizex, sizex, u0, v0, u1, v1)
	else
		if rotation == nil or rotation == 0 then
			surface.DrawTexturedRect(x, y, sizex, sizey)
		else
			surface.DrawTexturedRectRotated(x, y, sizex, sizey, rotation)
		end
	end

	render.OverrideBlend( false )
	//render.OverrideBlendFunc(false)

	render.OverrideAlphaWriteEnable(false)
	render.PopRenderTarget()

	//Update material
	BMASKS.MaskMaterial:SetTexture('$basetexture', BMASKS.Masks[ maskName ].renderTarget)

	//Clear material for upcoming draw calls
	draw.NoTexture()

	//Only draw if they want it to
	if not dontDraw then

		//Now draw finished result
		surface.SetDrawColor(color_white)
		surface.SetMaterial(BMASKS.MaskMaterial)
		render.SetMaterial(BMASKS.MaskMaterial)
		render.DrawScreenQuad()
	end

	return BMASKS.Masks[ maskName ].renderTarget
end

BMASKS.CreateMask("zclib_Circle", "materials/zerochain/zerolib/mask/mask_circle.png", "smooth")
BMASKS.CreateMask("zclib_gradient_topdown", "materials/zerochain/zerolib/mask/gradient_topdown.png", "smooth")
BMASKS.CreateMask("zclib_gradient_topdown_border", "materials/zerochain/zerolib/mask/gradient_topdown_border.png", "smooth")
BMASKS.CreateMask("zclib_radial_invert_glow", "materials/zerochain/zerolib/mask/radial_invert_glow.png", "smooth")
BMASKS.CreateMask("radial_shadow", "materials/zerochain/zerolib/mask/radial_shadow.png", "smooth")

--lua/zclib/generic/sh_entity.lua:
return gluapack()()
--lua/zclib/generic/sh_vgui.lua:
return gluapack()()
--lua/zclib/generic/cl_hud.lua:
return gluapack()()
--lua/zclib/generic/cl_pointer.lua:
if SERVER then return end

zclib = zclib or {}
zclib.PointerSystem = zclib.PointerSystem or {}

/*

    This system handles the Left / Right Mouse Click logic and displays a 2d colored rope from one Point to another
         Gets used by: Extinguisher(Extinguish Object), PointerSystem(MoveLiquid), Equipment(Build,Move,Remove,Repair)

*/

zclib.PointerSystem.Data = {
    // Stores what entity is the liquid comming from
    From = nil,

    // Will Later be filled with the DummyClientModel
    PreviewModel = nil,

    // The position we are currently aiming at
    Pos = nil,

    // The entity we are currently aiming at
    HitEntity = nil,

    // A valid found target, can be a entity or a position
    Target = nil,

    // Displays on the screen what action is currently active
    ActionName = "Test",

    CancelName = zclib.Language["Cancel"],
}


local IsLeftClickDown = false
local IsRightClickDown = false

local function ClearDummy()
    if IsValid(zclib.PointerSystem.Data.PreviewModel) then
        zclib.ClientModel.Remove(zclib.PointerSystem.Data.PreviewModel)
        zclib.PointerSystem.Data.PreviewModel = nil
    end
end

local function CreateDummy(pos, model)
    ClearDummy()
    local ent = zclib.ClientModel.AddProp()
    if not IsValid(ent) then return end
    ent:SetPos(pos)
    ent:SetModel(model)
    ent:SetAngles(angle_zero)
    ent:Spawn()

    ent:SetRenderMode(RENDERMODE_TRANSCOLOR)
    zclib.PointerSystem.Data.PreviewModel = ent
end

// Starts the pointer system
function zclib.PointerSystem.Start(Machine,OnInit,OnLeftClick,MainLogic,HUDLogic,OnRightClick,PostDrawTranslucentRenderables,OnClose)
    zclib.Debug("zclib.PointerSystem.Start")

    if zclib.PointerSystem.Data.CancelName == nil then zclib.PointerSystem.Data.CancelName = zclib.Language["Cancel"] end

    ClearDummy()

    zclib.PointerSystem.Data.From = Machine

    // Can be used to add something on the hud
    zclib.PointerSystem.Data.HUDLogic = HUDLogic

    // Can be used to setup some main data like (Default Rope color)
    pcall(OnInit)

    // What should happen when the player left clicks (Confirms a action)
    zclib.PointerSystem.Data.OnLeftClick = OnLeftClick

    zclib.PointerSystem.Data.OnRightClick = OnRightClick

	zclib.PointerSystem.Data.OnClose = OnClose

	zclib.PointerSystem.Data.PostDrawTranslucentRenderables = PostDrawTranslucentRenderables

    // This function will later run some core logic of what data should be stored etc
    zclib.PointerSystem.Data.MainLogic = MainLogic

    zclib.PointerSystem.StartHook()
end

// Stops the pointer system
function zclib.PointerSystem.Stop()
    zclib.Debug("zclib.PointerSystem.Stop")

    ClearDummy()

	if zclib.PointerSystem.Data.OnClose then pcall(zclib.PointerSystem.Data.OnClose) end

	zclib.PointerSystem.FinishHook()

    zclib.PointerSystem.Data = {}
end

function zclib.PointerSystem.StartHook()

    local ply = LocalPlayer()

    zclib.Hook.Remove("Think", "PointerSystem")
    zclib.Hook.Add("Think", "PointerSystem", function(depth, skybox)
        zclib.PointerSystem.MainLogic(ply)
        IsLeftClickDown = input.IsMouseDown(MOUSE_LEFT)
        IsRightClickDown = input.IsMouseDown(MOUSE_RIGHT)
    end)

    zclib.Hook.Remove(zclib.PointerSystem.Data.RenderHook2D or "HUDPaint", "PointerSystem")
    zclib.Hook.Add(zclib.PointerSystem.Data.RenderHook2D or "HUDPaint", "PointerSystem", function()
        zclib.PointerSystem.Paint()
    end)

    zclib.Hook.Remove("PostDrawTranslucentRenderables", "PointerSystem")
    zclib.Hook.Add("PostDrawTranslucentRenderables", "PointerSystem", function(depth, bDrawingSkybox,isDraw3DSkybox )
        if isDraw3DSkybox == false then zclib.PointerSystem.PostDrawTranslucentRenderables() end
    end)
end

function zclib.PointerSystem.FinishHook()
    zclib.Hook.Remove("Think", "PointerSystem")
    zclib.Hook.Remove(zclib.PointerSystem.Data.RenderHook2D or "HUDPaint", "PointerSystem")
    zclib.Hook.Remove("PostDrawTranslucentRenderables", "PointerSystem")
end



// Draws the indicator line for the pointer system and also handles the trace for detecting the entity the player is left click on to
local LinePoints = nil
local gravity = Vector(0, 0, -3)
local damping = 0.9
local Length = 10
function zclib.PointerSystem.Paint()
    if zclib.PointerSystem.Data.From then

        // Render the rope
        if zclib.PointerSystem.Data.Pos then

            local r_start = zclib.PointerSystem.Data.RopeStart

			if IsValid(zclib.PointerSystem.Data.From) then
				if isentity(zclib.PointerSystem.Data.From) then
					r_start = zclib.PointerSystem.Data.RopeStart or zclib.PointerSystem.Data.From:GetPos()
				else
					r_start = zclib.PointerSystem.Data.RopeStart or zclib.PointerSystem.Data.From
				end
			end

            // Create rope points
            if LinePoints == nil then
                LinePoints = zclib.Rope.Setup(Length, r_start)
            end

            // Updates the Rope points to move physicly
            if LinePoints and table.Count(LinePoints) > 0 then
                zclib.Rope.Update(LinePoints, r_start, zclib.PointerSystem.Data.Pos, Length, gravity, damping)
            end

            // Draw the rope
            zclib.Rope.Draw(LinePoints, r_start, zclib.PointerSystem.Data.Pos, Length, zclib.Materials.Get("beam01"), zclib.Materials.Get("glow01"), zclib.PointerSystem.Data.MainColor)
        else
            LinePoints = nil
        end
    else
        LinePoints = nil
    end

    // Draw Action Hud indicator
    draw.SimpleText(zclib.PointerSystem.Data.ActionName, zclib.GetFont("zclib_font_big"), zclib.wM *  650, zclib.hM * 895, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    surface.SetDrawColor(color_white)
    surface.SetMaterial(zclib.Materials.Get("icon_mouse_left"))
    surface.DrawTexturedRect(zclib.wM * 560, zclib.hM * 860,zclib.wM * 80, zclib.hM * 80)

    draw.SimpleText(zclib.PointerSystem.Data.CancelName, zclib.GetFont("zclib_font_big"), zclib.wM * 1350, zclib.hM * 895, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER)
    surface.SetDrawColor(color_white)
    surface.SetMaterial( zclib.Materials.Get("icon_mouse_right"))
    surface.DrawTexturedRect(zclib.wM * 1360, zclib.hM * 860,zclib.wM * 80, zclib.hM * 80)

    if zclib.PointerSystem.Data.HUDLogic then pcall(zclib.PointerSystem.Data.HUDLogic) end
end

function zclib.PointerSystem.PostDrawTranslucentRenderables()
    // Render Remove Material
    if zclib.PointerSystem.Data and IsValid(zclib.PointerSystem.Data.PreviewModel) and zclib.PointerSystem.Data.PreviewModel:GetNoDraw() == false then
        render.MaterialOverride(zclib.Materials.Get("highlight"))
        render.SetColorModulation((1 / 255) * zclib.PointerSystem.Data.MainColor.r, (1 / 255) * zclib.PointerSystem.Data.MainColor.g, (1 / 255) * zclib.PointerSystem.Data.MainColor.b)
        zclib.PointerSystem.Data.PreviewModel:DrawModel()
        render.MaterialOverride()
        render.SetColorModulation(1, 1, 1)
    end

	if zclib.PointerSystem.Data.PostDrawTranslucentRenderables then pcall(zclib.PointerSystem.Data.PostDrawTranslucentRenderables) end
end


local NextAction = CurTime()
function zclib.PointerSystem.Wait()
    NextAction = CurTime() + 0.25
end

local function LeftClick(func)
    if IsLeftClickDown == false and input.IsMouseDown(MOUSE_LEFT) == true then
        IsLeftClickDown = true

        pcall(func)

        zclib.PointerSystem.Wait()
    end
end

local function RightClick(func)
    if IsRightClickDown == false and input.IsMouseDown(MOUSE_RIGHT) == true then
        IsRightClickDown = true

        if zclib.PointerSystem.Data.OnRightClick then pcall(zclib.PointerSystem.Data.OnRightClick) end

        pcall(func)

        zclib.PointerSystem.Wait()
    end
end

function zclib.PointerSystem.MainLogic(ply)

    // Stop if the player is dead
    if not IsValid(ply) or ply:Alive() == false then
        zclib.PointerSystem.Stop()
        return
    end

    // Stop if the start entity got invalid
    if not zclib.PointerSystem.Data.From then
        zclib.PointerSystem.Stop()
        return
    end

    // Execute right click function, is mostlikely just cancel
    RightClick(function()

        zclib.PointerSystem.Stop()
        surface.PlaySound("UI/buttonclickrelease.wav")
        return
    end)

    // Trace for data
    local c_trace = zclib.util.TraceLine({
        start = ply:EyePos(),
        endpos = ply:EyePos() + ply:EyeAngles():Forward() * 10000,
        filter = {ply,zclib.PointerSystem.Data.Ignore}
    }, "PointerSystemPointer")

    zclib.PointerSystem.Data.Hit = c_trace.Hit

    if c_trace.Hit then

        zclib.PointerSystem.Data.Pos = c_trace.HitPos
        zclib.PointerSystem.Data.HitEntity = c_trace.Entity
        zclib.PointerSystem.Data.HitNormal = c_trace.HitNormal

        if c_trace.HitNormal then
            zclib.PointerSystem.Data.Ang = c_trace.HitNormal:Angle()
            zclib.PointerSystem.Data.Ang:RotateAroundAxis(zclib.PointerSystem.Data.Ang:Right(),-90)
        end
    else
        zclib.PointerSystem.Data.Pos = nil
        zclib.PointerSystem.Data.HitEntity = nil
    end

    // If we have to wait then stop
    if NextAction > CurTime() then return end

    // Create Preview Model if none exist yet
    if not IsValid(zclib.PointerSystem.Data.PreviewModel) and zclib.PointerSystem.Data.Pos then
        CreateDummy(zclib.PointerSystem.Data.Pos, zclib.PointerSystem.Data.ModelOverwrite or "models/props_junk/PopCan01a.mdl")
        return
    end

    if zclib.PointerSystem.Data.Pos == nil then return end
    if zclib.PointerSystem.Data.Ang == nil then return end

    // Runs the main logic of the pointer system
    pcall(zclib.PointerSystem.Data.MainLogic)

    // Check if the user left clicked on a machine who wants the liquid
    LeftClick(function()
        pcall(zclib.PointerSystem.Data.OnLeftClick)
    end)
end

--lua/zclib/inventory/vgui/cl_slot.lua:
local VGUIItem = {}

function VGUIItem:Init()
    self.LastHoveredByDragPanel = CurTime()
end

function VGUIItem:DoClick()
    zclib.vgui.PlaySound("UI/buttonclick.wav")
    self:OnClick()
    if self:CanSelect() == false then return end
    self:OnSelect()
end

function VGUIItem:OnClick()
end

function VGUIItem:PostDraw(w, h)
end

function VGUIItem:PreDraw(w, h)
end

function VGUIItem:CanSelect()
end

function VGUIItem:CanHover()
end

function VGUIItem:OnSelect()
end

function VGUIItem:GotSelected()
end

function VGUIItem:Paint(w, h)
	zclib.BMASKS.BeginMask("mask_roundbox")
	    if self:CanSelect() then
	        draw.RoundedBox(5, 0, 0, w, h, ( self:IsHovered() or self:GotSelected() ) and zclib.colors["ui_highlight"] or zclib.colors["ui00"])
	    else
	        draw.RoundedBox(5, 0, 0, w, h, zclib.colors["ui00"])
	    end

		if self.ItemData and self.ItemData.BG_Image then
			surface.SetDrawColor(self.ItemData.BG_Color or color_white)
	        surface.SetMaterial(self.ItemData.BG_Image)
	        surface.DrawTexturedRect(0, 0, w, h)
	    end

	    // Recreates the hover effect when a item gets dragged over it
	    if (CurTime() - self.LastHoveredByDragPanel) <= 0 then
	        draw.RoundedBox(5, 0, 0, w, h, zclib.colors["ui_highlight"])
	    end

	    // Draw before the image
	    self:PreDraw(w, h)
	zclib.BMASKS.EndMask("mask_roundbox", 0, 0 , w, h, 255)
end

function VGUIItem:PaintOver(w, h)

    /*
    local mat = self:GetMaterial()
    if mat then
        self.DropScale = math.Clamp((self.DropScale or 1) - FrameTime() * 1,1,1.5)
        surface.SetDrawColor(color_white)
        surface.SetMaterial(mat)
        surface.DrawTexturedRect(0, 0, w * self.DropScale, h * self.DropScale)
    end
    */

    // Draw the name
    if self.ItemData then

		self.XPos = 1

		if not self:CanHover() then

		else

	        if self:IsHovered() then
	            self.YPos = Lerp(FrameTime() * 15,self.YPos or 1,1)
	            self.XPos = Lerp(FrameTime() * 15,self.XPos or 1,1)
	        else
	            self.YPos = Lerp(FrameTime() * 15,self.YPos or 1.45,1.45)
	            self.XPos = Lerp(FrameTime() * 15,self.XPos or 1.5,1.5)
	        end

	        if self.ItemData.Name then
	            draw.RoundedBox(0, 0, (h * 0.7) * self.YPos, w, h * 0.32, zclib.colors["black_a100"])
	            // Welp thats one way to figure out which font to use
	            if self.font_name == nil then self.font_name = zclib.GetFont("zclib_font_mediumsmall") end
	            local txtW = zclib.util.GetTextSize(self.ItemData.Name, self.font_name)
	            if txtW > w * 0.9 then
	                if self.font_name == zclib.GetFont("zclib_font_mediumsmall") then
	                    self.font_name = zclib.GetFont("zclib_font_small")
	                elseif self.font_name == zclib.GetFont("zclib_font_small") then
	                    self.font_name = zclib.GetFont("zclib_font_tiny")
	                elseif self.font_name == zclib.GetFont("zclib_font_tiny") then
	                    self.font_name = zclib.GetFont("zclib_font_nano")
	                end
	            end
	            draw.SimpleText(self.ItemData.Name, self.font_name, w / 2, (h * 0.85) * self.YPos, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	        end

			if self.ItemData.Health and self.ItemData.Health > 0 and (self.ItemData.MaxHealth and self.ItemData.MaxHealth > 0) then
				local fract = (1 / (self.ItemData.MaxHealth or 100)) * self.ItemData.Health
				draw.RoundedBox(0, 0, (h * 0.8) * self.YPos - h * 0.08, w, h * 0.08, zclib.colors["black_a100"])
				draw.RoundedBox(0, 0, (h * 0.8) * self.YPos - h * 0.08, w * fract, h * 0.08, zclib.util.LerpColor(fract, zclib.colors["red01"], zclib.colors["green01"]))
			end
		end

        if self.ItemData.Amount and self.ItemData.Amount > 1 then
            //draw.RoundedBox(5, (w * 0.7) * self.XPos, 0, w * 0.3, h * 0.2, zclib.colors["black_a100"])
            draw.SimpleText("x" .. self.ItemData.Amount, zclib.GetFont("zclib_font_small"), (w * 0.93) * self.XPos, h * 0.12, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER)
        end
    end

    /*
    if self.slot_id then
        draw.SimpleText(self.slot_id,zclib.GetFont("zclib_font_medium"), w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end
    */

    // Draw after the image
    self:PostDraw(w, h)

    /*
    // Draw the hover
    if self:CanSelect() == true and self:IsHovered() then
        draw.RoundedBox(5, 0, 0, w, h, zclib.colors["white_a2"])
    end
    */
    return true
end

function VGUIItem:Update(ItemData)

    self.ItemData = ItemData

    if self:IsEmpty() then
        self:SetTooltip(false)
        self:SetImage("nil")
        self:SetImageVisible(false)
        return
    end
    self:SetImageVisible(true)

    if ItemData.Name then
        self:SetTooltip(ItemData.Name)
    end

    local ItemClass = ItemData.Class

	local mdl = zclib.ItemDefinition.GetModel(ItemClass,ItemData)

	self.ItemData.BG_Image = zclib.ItemDefinition.GetBG_Image(ItemData.Class,ItemData)

	self.ItemData.BG_Color = zclib.ItemDefinition.GetBG_Color(ItemData.Class,ItemData)

    local DefinitionData = zclib.ItemDefinition.Get(ItemClass)
	if DefinitionData and DefinitionData.GetAmount then
		self.ItemData.Amount = DefinitionData.GetAmount(ItemData)
	end

    if DefinitionData and DefinitionData.Image then
        self:SetImage(DefinitionData.Image)
        return
    end

	local RenderData = {
		data = ItemData.Data,
		class = ItemData.Class,
		model = mdl,
		model_color = zclib.ItemDefinition.GetColor(ItemClass, ItemData),
		model_material = zclib.ItemDefinition.GetMaterial(ItemClass, ItemData),
		model_skin = zclib.ItemDefinition.GetSkin(ItemClass, ItemData),
		model_bg = zclib.ItemDefinition.GetBodyGroups(ItemClass, ItemData),
	}

	local img = zclib.Snapshoter.Get(RenderData, self)

	if img then
		self:SetImage(img)
	else
		self:SetImage("materials/zerochain/zerolib/ui/icon_loading.png")
	end
end

function VGUIItem:IsEmpty()
    return self.ItemData == nil or table.Count(self.ItemData) <= 0
end

// Gets called when the slot getting dropped somewhere
function VGUIItem:OnDrop()
    // Play drop sound
    zclib.Sound.EmitFromEntity("inv_add", LocalPlayer())

    // Play drop animation
    self.DropScale = 1.5
end

derma.DefineControl("zclib_inventory_slot", "A inventory slot panel", VGUIItem, "DImageButton")

--addons/aphone/lua/aphone/_libs/_utilities/cl__clientside_save.lua:
-- Save Vars
aphone.Clientside = aphone.Clientside or {}
aphone.Clientside.Varlist = util.JSONToTable(file.Read("aphone/save.json") or "") or {}

-- You can't create a folder with : in the name
local dir = "aphone/" .. string.Replace(game.GetIPAddress(), ":", "_") .. "/"
file.CreateDir(dir)

function aphone.Clientside.GetSetting(name, fallback)
    return aphone.Clientside.Varlist[name] or fallback
end

-- Save, with timer so we don't kill their HDD and gmod with spamming saves
local rewrite = false

function aphone.Clientside.SaveSetting(name, var)
    aphone.Clientside.Varlist[name] = var
    rewrite = true
end

timer.Create("aphone_InsertNewInfosClientside", 10, 0, function()
    if rewrite then
        file.Write("aphone/save.json", util.TableToJSON(aphone.Clientside.Varlist))
        rewrite = false
    end
end)

-- Register Param
local acceptables_types = {
    ["string"] = true,
    ["bool"] = true,
    ["num"] = true,
    ["color"] = true,
    ["sound"] = true,
}

-- Create Params
aphone.Params = aphone.Params or {}

function aphone:RegisterParameters(catName, paramName, short_name, var_type, defaultValue, onChange)
    if catName and paramName and var_type and acceptables_types[var_type] then
        table.Merge(aphone.Params, {
            [catName] = {
                [short_name] = {
                    var_type = var_type,
                    full_name = paramName,
                    def = defaultValue,
                    onChange = onChange
                }
            }
        })
    end
end

function aphone:ChangeParameters(catName, short_name, value, ignore)
    local p = aphone.Params[catName][short_name]
    aphone.Clientside.SaveSetting(catName .. "_" .. short_name, value)

    if p.onChange then
        aphone.Params[catName][short_name].onChange()
    end

    if !ignore then
        hook.Run("APhone_SettingChange", catName, short_name, value)
    end

    return value
end

function aphone:GetParameters(catName, shortName, fallback)
    return aphone.Clientside.GetSetting(catName .. "_" .. shortName, fallback)
end

-- Default/hard-coded params
aphone:RegisterParameters("Core", "2D", "2D", "bool", false, function()
    if IsValid(aphone.MainDerma) then
        gui.EnableScreenClicker(false)
        aphone.MainDerma:Remove()
    end
end)

aphone:RegisterParameters("Core", aphone.L("SilentMode"), "SilentMode", "bool", false)
aphone:RegisterParameters("Core", aphone.L("AutoLight"), "AutoLight", "bool", false)

if aphone.OthersHearRadio then
    aphone:RegisterParameters("Core", aphone.L("OnlyMyRadio"), "OnlyMyRadio", "bool", false)
end

aphone:RegisterParameters("Core", aphone.L("SettingFlashlight"), "Flashlight", "bool", false)

for k, v in ipairs(aphone.Ringtones) do
    aphone:RegisterParameters("Ringtones", v.name, "Ringstone_" .. k, "sound", false)
end
--addons/aphone/lua/aphone/_libs/_utilities/cl_fonts.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/banks/sh_glorifiedbanking.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/printers/sh_rprint.lua:
return gluapack()()
--addons/aphone/lua/aphone/apps/bank/cl_main.lua:
local APP = {}

APP.name = aphone.L("Bank")
APP.icon = "akulla/aphone/app_bank.png"

local lua_grad = Material("akulla/aphone/lua_grad1.png")

function APP:ShowCondition()
	return tobool(aphone.Bank)
end

local functions_table = {
    [1] = {
        name = "Deposit",
        logo = "1",
        max_valuetype = true, // False = Bank amt, true = player amt
    },
    [2] = {
        name = "Withdraw",
        logo = "2",
    },
    [3] = {
        name = "Transfer",
        logo = "0",
        player_param = true,
        transfer = true,
    }
}

function APP:Open(main, main_x, main_y, screenmode)
	// consts
    if BATM and !BATM.GetPersonalAccount() then
        aphone.AddNotif("alert", aphone.L("BATM_Issue"), 5)
        aphone.App_Panel:Remove()
        return
    end

	local font_header = aphone:GetFont("Roboto40")
	local font_mediumheader = aphone:GetFont("MediumHeader")
	local font_svg = aphone:GetFont("SVG_40")
    local font_small = aphone:GetFont("Small")

	local clr_white180 = aphone:Color("Text_White180")
	local clr_white = aphone:Color("Text_White")
    local clr_bg = aphone:Color("Black2")
    local local_ply = LocalPlayer()
    local local_plyname = local_ply:Nick()
    local send_txt = aphone.L("Confirm")

    local boosted_clr = Color(math.Clamp(aphone.Bank.clr.r + 20, 0, 255), math.Clamp(aphone.Bank.clr.g + 20, 0, 255), math.Clamp(aphone.Bank.clr.b + 20, 0, 255))

    function main:Paint(w, h)
        surface.SetDrawColor(clr_bg)
        surface.DrawRect(0, 0, w, h)

        surface.SetMaterial(lua_grad)
        surface.SetDrawColor(aphone.Bank.clr)
        surface.DrawTexturedRectRotated(w / 2, h / 2, w, h, 180)

        draw.SimpleText(aphone.Bank.FormatMoney( local_ply:aphone_getmoney() ), font_mediumheader, w / 2, h * 0.93, clr_white180, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end

    local logo = vgui.Create("DPanel", main)
    logo:Dock(TOP)
    logo:SetTall(main_x / 4)
    logo:DockMargin(0, main_y * 0.08, 0, main_y * 0.04)

    function logo:Paint(w, h)
        surface.SetDrawColor(color_white)
        surface.SetMaterial(aphone.Bank.logo)
        surface.DrawTexturedRect(w / 2 - h / 2, 0, h, h)
    end

    local welcome_txt = aphone.L("Hello")
    surface.SetFont(font_header)

    local txt_h = select(2, surface.GetTextSize(welcome_txt))

    local welcome_text = vgui.Create("DLabel", main)
    welcome_text:Dock(TOP)
    welcome_text:SetText(welcome_txt)
    welcome_text:SetFont(font_header)
    welcome_text:SetTall(txt_h)
    welcome_text:SetTextColor(clr_white)
    welcome_text:SetContentAlignment(5)

    local name_text = vgui.Create("DLabel", main)
    name_text:Dock(TOP)
    name_text:SetText(local_plyname)
    name_text:SetFont(font_header)
    name_text:SetTall(select(2, surface.GetTextSize(local_plyname)))
    name_text:SetContentAlignment(5)
    name_text:SetTextColor(clr_white180)

	main:Phone_DrawTop(main_x, main_y)

    local main_scroll = vgui.Create("DScrollPanel", main)
    main_scroll:Dock(FILL)
    main_scroll:aphone_PaintScroll()
    main_scroll:DockMargin(0, main_y * 0.025, 0, main_y * 0.025)

    for k, v in pairs(functions_table) do
        if aphone.bank_onlytransfer and !v.transfer then continue end

        local sub_pnl = main_scroll:Add("DPanel")
        sub_pnl:SetPaintBackground(false)
        sub_pnl:Dock(TOP)
        sub_pnl:SetTall(txt_h * 1.5)
        sub_pnl:DockMargin(0, main_y * 0.005, 0, main_y * 0.005)

        local sub_pnltop = vgui.Create("DButton", sub_pnl)
        sub_pnltop:Dock(TOP)
        sub_pnltop:SetTall(txt_h * 1.5)
        sub_pnltop:SetPaintBackground(false)
        sub_pnltop:TDLib()
        sub_pnltop:FadeHover(aphone.Bank.clr, 3)
        sub_pnltop:SetText("")
        sub_pnltop:SetIsToggle(true)

        function sub_pnltop:OnToggled(opening)
            if opening then
                sub_pnl:SetTall(txt_h * (v.player_param and 5 or 3))
            else
                sub_pnl:SetTall(txt_h * 1.5)
            end
        end

        local icon = vgui.Create("DLabel", sub_pnltop)
        icon:Dock(LEFT)
        icon:DockMargin(txt_h, 0, txt_h, 0)
        icon:SetWide(txt_h)
        icon:SetText(v.logo)
        icon:SetTextColor(color_white)
        icon:SetFont(font_svg)
        icon:SetContentAlignment(5)

        local title = vgui.Create("DLabel", sub_pnltop)
        title:Dock(FILL)
        title:SetText(v.name)
        title:SetTextColor(clr_white)
        title:SetFont(font_mediumheader)

        local sub_option = vgui.Create("DPanel", sub_pnl)
        sub_option:Dock(TOP)
        sub_option:SetTall(txt_h * (v.player_param and 3.5 or 1.5))
        sub_option:SetPaintBackground(false)

        local p = vgui.Create("DSlider", sub_option)
        p:Dock(TOP)
        p:SetSlideX(0)
        p:DockMargin(aphone.GUI.ScaledSize(main_x * 0.1, 0, main_x * 0.1, 0))

        function p:Paint(w, h)
            draw.RoundedBox(4, 0, h / 2-4, w, 8, clr_white180)
            draw.RoundedBox(4, 0, h / 2-4, w * self:GetSlideX(), 8, boosted_clr)
        end
        function p.Knob:Paint(w, h) end

        local textentry

        if v.player_param then
            textentry = vgui.Create("DLabel", sub_option)
            textentry:Dock(TOP)
            textentry:SetTall(txt_h)
            textentry:SetText(aphone.L("PutName"))
            textentry:SetFont(font_small)
            textentry:SetTextColor(clr_white)
            textentry:SetMouseInputEnabled(true)
            textentry:SetContentAlignment(5)
            textentry:DockMargin(main_x * 0.1, 0, main_x * 0.1, 0)

            local helperTextEntry = vgui.Create("DLabel", sub_option)
            helperTextEntry:Dock(TOP)
            helperTextEntry:SetFont(aphone:GetFont("Roboto18_500"))
            helperTextEntry:SetTextColor(clr_white180)
            helperTextEntry:SetText("")
            helperTextEntry:SetContentAlignment(5)
            helperTextEntry:DockMargin(main_x * 0.1, 0, main_x * 0.1, 0)
            helperTextEntry:SetTall(0)

            local helperTextH = select(2, helperTextEntry:GetContentSize())

            function textentry:textEnd(text_pnl)
                local p = self:textChange(text_pnl)

                if p then
                    self:SetText(p:Nick())
                    self.targetentity = p
                    return
                end

                for k, v in ipairs(player.GetHumans()) do
                    if v:Nick() == text_pnl then
                        self:SetText(text_pnl)
                        self.targetentity = v
                        return
                    end
                end

                self:SetText(aphone.L("PlayerNotFound"))
            end

            function textentry:DoClick()
                self:Phone_AskTextEntry(self:GetText(), 32)
            end

            function textentry:textChange(name)
                if(!name) then
                    helperTextEntry:SetText("")
                    helperTextEntry:SetTall(0)
                    return
                end

                local ply

                for a, b in ipairs(player.GetAll()) do
                    if string.StartWith(b:Nick(), name) then
                        ply = b
                        break
                    end
                end

                if ply then
                    helperTextEntry:SetText(ply:Nick() .. " ?")
                    helperTextEntry:SetTall(helperTextH)

                    return ply
                else
                    helperTextEntry:SetTall(0)
                end
            end
        end

        local p_amt = vgui.Create("DLabel", sub_option)
        p_amt:SetText(send_txt .. " - " .. aphone.Bank.FormatMoney(0))
        p_amt:SetFont(font_small)
        p_amt:SetTextColor(clr_white)
        p_amt:SetTall(txt_h)
        p_amt:Dock(TOP)
        p_amt:SetContentAlignment(5)
        p_amt:SetMouseInputEnabled(true)

        function p_amt:DoClick()
            if !textentry or IsValid(textentry.targetentity) then
                net.Start("aphone_bank")
                    net.WriteUInt(k, 4)
                    net.WriteUInt(math.Round(p:GetSlideX() * (v.max_valuetype and aphone.Gamemode.GetMoney(local_ply) or local_ply:aphone_getmoney()) ), 32)

                    if IsValid(textentry) then
                        net.WriteEntity(textentry.targetentity)
                    end
                net.SendToServer()
            end
        end

        function p:Think()
            self.lastrefresh = self.lastrefresh or CurTime()
            if self:IsEditing() or self.lastrefresh < CurTime() then
                local max_amt = v.max_valuetype and aphone.Gamemode.GetMoney(local_ply) or local_ply:aphone_getmoney()
                p_amt:SetText(send_txt .. " - " .. aphone.Bank.FormatMoney( math.Round(self:GetSlideX() * max_amt )))
                self.lastrefresh = CurTime() + 0.33
            end
        end
    end

	main:aphone_RemoveCursor()
end

aphone.RegisterApp(APP)
--addons/aphone/lua/aphone/apps/gps/cl_main.lua:
local APP = {}

APP.name = aphone.L("GPS")
APP.icon = "akulla/aphone/app_gps.png"

// finalvec = vec + 64 height
local function hammer_to_meters(vec1, vec2)
    return math.floor(vec1:Distance(vec2) / 52.49)
end

local mat_cursor = Material( "akulla/aphone/gps_mark.png", "smooth 1")
local mat_size = mat_cursor:Width()/2
local path = {}
local splitted = {}

local function split()
    -- split it now
    splitted = {}

    for k,v in ipairs(path) do
        if path[k + 1] then
            local split_num = (path[k + 1] - v):Length() / mat_size
            local div = (path[k + 1] - v) / split_num
            local ang = (path[k + 1] - v):GetNormalized()

            -- looks ugly without it
            ang.z = 90

            for i=1, split_num do
                table.insert(splitted, {
                    pos = v + div*i,
                    angle = ang,
                })
            end
        end
    end
end

net.Receive("aphone_AskPath", function()
    local step = net.ReadUInt(16)
    path = {}
    local localpos = LocalPlayer():GetPos()

    for i = 1, step do
        local vec = net.ReadVector()
        if localpos:DistToSqr(vec) < 1200*1200 then
            table.insert(path, vec + Vector(0, 0, 5))
        end
    end
    split()
end)

local selected

/*
There is a more optimised way ?
I don't think so, using material + surface.DrawTexturedRect would take more performances. Maybe using UV textures but can't rotate them, 
except with cam.Start3D2D or matrix
*/

hook.Add("PostDrawTranslucentRenderables", "aphone_GPSLines", function()
    if selected then
        render.SetMaterial(mat_cursor)

        for k,v in ipairs(splitted) do
            if splitted[k + 1] then
                render.DrawQuadEasy(v.pos, v.angle, 32, 32, color_white, 0)
            end
        end
    end
end)


-- Draw logo
local white_trans = Color(230, 240, 241, 120)
hook.Add("HUDPaint", "aphone_GPSShow", function()
    if selected then
        local inf = aphone.GPS[selected]
        local s = inf.vec:ToScreen()

        if s.visible then
            local dist = hammer_to_meters(LocalPlayer():GetPos(), aphone.GPS[selected].vec) .. "m"

            draw.SimpleText(inf.name, "Roboto60_3D", s.x, s.y, color_white, 1, 1)
            draw.SimpleText(dist, "Roboto40_3D", s.x, s.y+40, white_trans, 1, 1)
            draw.SimpleText(inf.icon or "O", "SVG_60_3D", s.x, s.y + 60, inf.clr or color_white, 1, 0)
        end
    end
end)

local mat = Material("akulla/aphone/gps.jpg")
local gps_under = Color(100, 100, 100)

function APP:Open(main, main_x, main_y, screenmode)
    local clr_white = aphone:Color("Text_White")
    local clr_black40 = aphone:Color("Black40")
    local clr_white180 = aphone:Color("Text_White180")
    local font_sf40 = aphone:GetFont("Roboto40")
    local font_mediumheader = aphone:GetFont("MediumHeader")

    function main:Paint(w, h)
        surface.SetDrawColor(clr_black40)
        surface.DrawRect(0, 0, w, h)
    end

    if !screenmode then
        local bg_pnl = vgui.Create("DPanel", main)
        bg_pnl:Dock(TOP)
        bg_pnl:SetTall(main_y * 0.40)

        function bg_pnl:Paint(w, h)
            surface.SetDrawColor(color_white)
            surface.SetMaterial(mat)
            surface.DrawTexturedRect(0, 0, w, h)
        end
    end

    local stats = vgui.Create("DPanel", main)
    stats:Dock(TOP)
    stats:SetTall(selected and (screenmode and main_y or main_x) * 0.24 or 0)
    stats:SetPaintBackground(false)

    function stats:Paint(w, h)
        if selected then
            local dist = hammer_to_meters(LocalPlayer():GetPos(), aphone.GPS[selected].vec) .. "m"

            draw.SimpleText(aphone.GPS[selected].name, font_sf40, w / 2, h / 2 - 5, clr_white, 1, 4)
            draw.SimpleText(dist, font_mediumheader, w / 2, h / 2 + 5, aphone.GPS[selected].clr, 1, 3)

            surface.SetDrawColor(gps_under)
            surface.DrawRect(0, h-2, w, 2)
        end
    end

    local s = vgui.Create("DScrollPanel", main)
    s:Dock(FILL)
    s:aphone_PaintScroll()

    local local_playerpos = LocalPlayer():GetPos()

    for k,v in ipairs(aphone.GPS) do
        if v.map_restricted and game.GetMap() != v.map_restricted then continue end

        local but = s:Add("DButton")
        but:Dock(TOP)
        but:SetTall((screenmode and main_x or main_y) * 0.10)
        but:SetText("")
        but:TDLib()
        but:FadeHover(v.clr)
        but:SetPaintBackground(false)
        but:SetAlpha(selected == k and 255 or 120)

        local sub_txt = vgui.Create("Panel", but)
        sub_txt:Dock(FILL)
        sub_txt:DockMargin(main_x * 0.05, 0, 0, 0)
        sub_txt:TDLib()
        sub_txt:SetMouseInputEnabled(false)
        sub_txt:DualText(
            v.name,
            aphone:GetFont("Roboto40"),
            color_white,

            hammer_to_meters(local_playerpos, v.vec) .. "m",
            aphone:GetFont("MediumHeader"),
            clr_white180, TEXT_ALIGN_LEFT)
        sub_txt:Text(v.icon, aphone:GetFont("SVG_30"), color_white, TEXT_ALIGN_RIGHT, -main_x * 0.05, 0, true)

        function but:DoClick()
            net.Start("aphone_AskPath")
            net.WriteUInt(k, 8)
            net.SendToServer()

            for i, j in ipairs(s:GetCanvas():GetChildren()) do
                if j:GetName() == "DButton" then
                    j:SetAlpha(120)
                end
            end

            if selected and selected == k then
                selected = nil
                stats:SetTall(0)
                path = {}
            else
                stats:SetTall((screenmode and main_y or main_x) * 0.24)
                selected = k
                self:SetAlpha(255)
            end
        end
    end
    main:aphone_RemoveCursor()
end

function APP:Open2D(main, main_x, main_y)
    self:Open(main, main_x, main_y, true)
end

function APP:ShowCondition()
    return aphone.GPS and !table.IsEmpty(aphone.GPS)
end

aphone.RegisterApp(APP)
--addons/aphone/lua/aphone/apps/radio/cl_main.lua:
return gluapack()()
--lua/arccw/shared/attachments/foregrip_exclusive.lua:
att.PrintName = "Exclusive Foregrip"
att.Icon = Material("entities/acwatt_foregrip_mp5k_exclusive.png", "smooth"
)
att.Description = "Weapon-exclusive foregrip with its own unique animations."
att.AutoStats = true
att.SortOrder = 1738 - 10
att.MountPositionOverride = 0.69 -- xd
att.Ignore = false
att.Slot = "foregrip_mw2exclusive"

att.ActivateElements = {"grip"}


att.Mult_Recoil = 0.8

att.Mult_SightTime = 1.1
att.Mult_HipDispersion = 1.1
-- att.Mult_SpeedMult = 0.95

att.AddSuffix = " Grip"
--lua/arccw/shared/attachments/mw2_akimbo_glock17.lua:
att.PrintName = "G17"
att.Icon = Material("entities/acwatt_mw2_akimbo.png", "smooth")
att.Description = "Wholy."
att.Hidden = false
att.Desc_Pros = {
    "+100% more gun",
}
att.Desc_Cons = {
    "- Cannot use ironsights"
}
att.Desc_Neutrals = {
    "Don't toggle the UBGL"
}
att.AutoStats = true
att.Mult_HipDispersion = 4
att.Slot = "akimbotest"

att.GivesFlags = {"cantuseshitinakimboyet"}

att.SortOrder = 1738

att.AddSuffix = " + G17"

att.MountPositionOverride = 0

att.Model = "models/weapons/arccw/fesiugmw2/akimbo/c_glock17_left_1.mdl"

att.LHIK = true
att.LHIK_Animation = true
att.LHIK_MovementMult = 0

att.UBGL = true

att.UBGL_PrintName = "AKIMBO"
att.UBGL_Automatic = false
att.UBGL_MuzzleEffect = "muzzleflash_4"
att.UBGL_ClipSize = 17
att.UBGL_Ammo = "pistol"
att.UBGL_RPM = 60 / 0.079
att.UBGL_Recoil = .4
att.UBGL_RecoilSide = .2
att.UBGL_RecoilRise = .2
att.UBGL_Capacity = 17

att.Hook_ShouldNotSight = function(wep)
    return true
end

local function Ammo(wep)
    return wep.Owner:GetAmmoCount("pistol") -- att.UBGL_Ammo
end

att.Hook_Think = function(wep)
    if wep:GetMW2Masterkey_ShellInsertTime() < CurTime() and wep:GetMW2Masterkey_ShellInsertTime() != 0 then
        wep:SetMW2Masterkey_ShellInsertTime(0)
        local clip = 17
        if wep:Clip2() >= clip then return end
        if Ammo(wep) <= 0 then return end

        local reserve = Ammo(wep)
        reserve = reserve + wep:Clip2()
        local load = math.Clamp(clip, 0, reserve)
        wep.Owner:SetAmmo(reserve - load, "pistol")
        wep:SetClip2(load)
    end

    if !IsFirstTimePredicted() then return end
    if wep:GetOwner():KeyPressed(IN_RELOAD) then
        wep:SetInUBGL(false)
        wep:ReloadUBGL()
    elseif wep:GetOwner():KeyPressed(IN_ATTACK) then
        wep:SetInUBGL(false)
    elseif wep:GetOwner():KeyPressed(IN_ATTACK2) then
        wep:SetInUBGL(true)
        wep:ShootUBGL()
    end
end

local awesomelist = {
    ["sprint_in_akimbo_right"] = {
        time = 10/30,
        anim = "sprint_in",
    },
    ["sprint_out_akimbo_right"] = {
        time = 10/30,
        anim = "sprint_out",
    },
    ["sprint_loop_akimbo_right"] = {
        time = 30/40,
        anim = "sprint_loop",
    },
    ["pullout_akimbo_right"] = {
        time = 26/30 /4,
        anim = "pullout",
    },
    ["putaway_akimbo_right"] = {
        time = 26/30 /4,
        anim = "putaway",
    },
}

att.Hook_TranslateSequence = function(wep, anim)
    if awesomelist[anim] then
        local bab = awesomelist[anim]
        wep:DoLHIKAnimation(bab.anim, bab.time)
    end
end

att.Hook_LHIK_TranslateAnimation = function(wep, anim)
    if anim == "idle" and wep:Clip2() <= 0 then
        return "idle_empty"
    end
end

local function Ammo(wep)
    return wep.Owner:GetAmmoCount("pistol") -- att.UBGL_Ammo
end

att.UBGL_Fire = function(wep, ubgl)
    if wep:Clip2() <= 0 then return end

    -- this bitch
    local fixedcone = wep:GetDispersion() / 360 / 60

    wep.Owner:FireBullets({
		Src = wep.Owner:EyePos(),
		Num = 1,
		Damage = 40,
		Force = 1,
		Attacker = wep.Owner,
		Dir = wep.Owner:EyeAngles():Forward(),
		Spread = Vector(fixedcone, fixedcone, 0),
		Callback = function(_, tr, dmg)
			local dist = (tr.HitPos - tr.StartPos):Length() * ArcCW.HUToM

			local dmgmax = 40
			local dmgmin = 20

			local delta = dist / 800 * 0.025

			delta = math.Clamp(delta, 0, 1)

			local amt = Lerp(delta, dmgmax, dmgmin)

			dmg:SetDamage(amt)
		end
	})
    wep:EmitSound("weapons/fesiugmw2/fire/glock.wav", 110, 105 * math.Rand(1 - 0.05, 1 + 0.05))
                            -- This is kinda important
                                            -- Wep volume
                                                    -- Weapon pitch (along with the pitch randomizer)




    wep:SetClip2(wep:Clip2() - 1)
    
    if wep:Clip2() > 0 then
        wep:DoLHIKAnimation("fire", 6/30)
    else
        wep:DoLHIKAnimation("fire_last", 6/30)
    end

    wep:DoEffects()
end

att.UBGL_Reload = function(wep, ubgl)
        if wep:Clip2() >= 17 then return end
        if Ammo(wep) <= 0 then return end

    wep:SetInUBGL(false)
    wep:Reload()

    if wep:Clip2() <= 0 then
        wep:DoLHIKAnimation("reload_empty", 89/40)
        wep:SetNextSecondaryFire(CurTime() + 89/40)
        wep:SetMW2Masterkey_ShellInsertTime(CurTime() + 1.2)
        wep:PlaySoundTable({
            {s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_lift_v1.wav", 	t = 0},
            {s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipout_v1.wav", 	t = 4/40},
            {s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipin_v1.wav",  	t = 42/40},
            {s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_chamber_v1.wav", 	t = 67/40},
        })
    else
        wep:DoLHIKAnimation("reload", 70/40)
        wep:SetNextSecondaryFire(CurTime() + 70/40)
        wep:SetMW2Masterkey_ShellInsertTime(CurTime() + 1.2)
        wep:PlaySoundTable({
            {s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_lift_v1.wav", 	t = 0},
            {s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipout_v1.wav", 	t = 4/40},
            {s = "weapons/fesiugmw2/foley/wpfoly_glock_reload_clipin_v1.wav", 	    t = 36/40},
        })
    end
end

att.Hook_GetHUDData = function( wep, data )
    if ArcCW:ShouldDrawHUDElement("CHudAmmo") then
        data.clip = wep:Clip2() .. " / " .. wep:Clip1()
    else
        data.clip = wep:Clip1() + wep:Clip2()
    end
    data.ubgl = nil
    return data
end
--lua/arccw/shared/attachments/mw2_wepcamo_arctic.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_wepcamo_bluetiger.lua:
att.PrintName = "Blue Tiger"
att.Icon = Material("entities/mw2_wepcamo_bluetiger.png", "smooth"
)
att.Description = "Blue tiger stripe camouflage finish."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Slot = "mw2_wepcamo"
att.Free = true

att.ActivateElements = {"wepcamo-bluetiger"}

att.SortOrder = 6 *-1
--lua/arccw/shared/attachments/mw2_wepcamo_fall.lua:
att.PrintName = "Fall"
att.Icon = Material("entities/mw2_wepcamo_fall.png", "smooth"
)
att.Description = "Orange fall camouflage finish."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Slot = "mw2_wepcamo"
att.Free = true

att.ActivateElements = {"wepcamo-fall"}

att.SortOrder = 8 *-1
--lua/arccw/shared/attachments/mw2_wepcamo_woodland.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_wepedit_ak47_cod.lua:
att.PrintName = "Of Wood and Steel"
att.Icon = Material("entities/acwatt_mw2_wepedit_ak47_cod.png", "smooth"
)
att.Description = "Call of Duty 4's AK-47, loaded into memory in MW2 Multiplayer."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Slot = "mw2_wepedit_ak47"
att.Free = true

att.ActivateElements = {"wepcamo-ak47_cod4","altirons"}

att.SortOrder = 20 *-1

att.Hook_GetShootSound = function(wep, sound)
    if sound == "weapons/fesiugmw2/fire/ak47.wav" then return "weapons/fesiugmw2/organizelater/weap_ak47_slst_3.wav" end
end
--lua/arccw/shared/attachments/optic_mw2_mars.lua:
att.PrintName = "MARS (RDS)"
att.Icon = Material("entities/acwatt_optic_mw2_mars.png", "smooth")
att.Description = "Funny moon sight."

att.SortOrder = 0

att.Desc_Pros = {
    "autostat.holosight",
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = "optic"

att.Model 			= "models/weapons/arccw/fesiugmw2/atts/scopes/mars_4.mdl"
att.ModelOffset = Vector(-0.7, 0, -0.25)

att.AdditionalSights = {
    {
        Pos = Vector(0, 10, -1.48),
        Ang = Angle(0, 0, 0),
        ViewModelFOV = 65 / 1.3,
        Magnification = 1.3,
        ScrollFunc = ArcCW.SCROLL_NONE,
        IgnoreExtra = true,
    }
}

att.ScopeGlint = false

att.Holosight = true
att.HolosightReticle = Material("holosights/mw2_reddot.png", "mips smooth")
att.HolosightSize = 0.33
att.HolosightBone = "holosight"

att.Colorable = true

att.Mult_SightTime = 1.05

att.AddSuffix = " MARS"
--lua/arccw/shared/attachments/optic_mw2_rds.lua:
return gluapack()()
--lua/arccw/shared/attachments/optic_mw2_susat.lua:
att.PrintName = "SUSAT (2.1x)"
att.Icon = Material("entities/acwatt_optic_mw2_susat.png", "smooth")
att.Description = "Magnified medium-range optic that's just a worse ACOG"

att.SortOrder = 2.1

att.Desc_Pros = {
    "autostat.holosight",
    "autostat.zoom",
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
    "info.togglesight"
}
att.AutoStats = true
att.Slot = {"optic"}

att.Model = "models/weapons/arccw/fesiugmw2/atts/scopes/susat_3.mdl"

att.AdditionalSights = {
    {
        Pos = Vector(-0.015, 10, -1.54),
        Ang = Angle(0, 0, 0),
        ViewModelFOV = 65 / 2.1,
        Magnification = 2.1,
        IgnoreExtra = true
    },
    {
        Pos = Vector(0, 10, -2.6),
        Ang = Angle(1, 0, 0),
        ViewModelFOV = 65 / 1.3,
        Magnification = 1.3,
        IgnoreExtra = true
    },
}

att.ModelOffset = Vector(-0.35, 0, -0.32)

att.Holosight = false

att.Mult_SightTime = 1.12
att.Mult_SightedSpeedMult = 0.92

att.Hook_ModifyRecoil = function(wep)
    return {VisualRecoilMult = wep:GetSightDelta()}
end

att.AddSuffix = " SUSAT"
--lua/arccw/shared/attachments/optic_mw2_thermal.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_40mm_airburst.lua:
att.PrintName = "40mm Airburst Grenades"
att.AbbrevName = "Airburst"
att.Icon = Material("entities/att/arccw_uc_40mm_generic.png", "mips smooth")
att.Description = "Grenades filled with fragmentation. While usually detonated by a time fuse, this one has been modified to detonate by proximity. Intended for indirect fire, the projectile is slow and has high drag, with a safety fuse to prevent point-blank detonations."
att.Desc_Pros = {
    "uc.40mm.airburst",
    "uc.40mm.proximity",
}
att.Desc_Cons = {
    "uc.40mm.mindmg",
    "uc.40mm.arm",
    "uc.40mm.drag.high",
}
att.Desc_Neutrals = {
}
att.Slot = "uc_40mm"

att.AutoStats = true

att.Override_ShootEntity = "arccw_uc_40mm_airburst"

att.Mult_MuzzleVelocity = 0.75

att.Mult_ShootPitch = 0.9

att.ActivateElements = {"40mm_airburst"}
--lua/arccw/shared/attachments/uc_40mm_dummy.lua:
att.PrintName = "40mm Dummy Grenades"
att.AbbrevName = "Dummy"
att.Icon = Material("entities/att/arccw_uc_40mm_generic.png", "mips smooth")
att.Description = "Non-lethal grenades with an empty ceramic shell.\nUsed for target practice, the grenade has a noticable trail and paints its impact point with blue chalk."
att.Desc_Pros = {
    "uc.infiniteammo"
}
att.Desc_Cons = {
    "uc.40mm.nodmg",
}
att.Desc_Neutrals = {
}
att.Slot = "uc_40mm"

att.SortOrder = -9001

att.AutoStats = true

att.Override_ShootEntity = "arccw_uc_40mm_dummy"

att.ActivateElements = {"40mm_dummy"}

att.Mult_VisualRecoil = 0.5
att.Mult_Recoil = 0.5
att.Mult_ReloadTime = 0.8
att.Override_InfiniteAmmo = true
--lua/arccw/shared/attachments/uc_40mm_hv.lua:
att.PrintName = "40mm High Velocity Grenades"
att.AbbrevName = "High Velocity"
att.Icon = Material("entities/att/arccw_uc_40mm_generic.png", "mips smooth")
att.Description = "Fin-stabilized, lightweight grenade with explosive payload.\nFlies fast and with low drag, but creates a smaller and less lethal explosion."
att.Desc_Pros = {
    "uc.40mm.drag.low"
}
att.Desc_Cons = {
    "uc.40mm.blast.low"
}
att.Desc_Neutrals = {
}
att.Slot = "uc_40mm"

att.Override_ShootEntity = "arccw_uc_40mm_hv"

att.AutoStats = true

att.Mult_Damage = 0.85
att.Mult_DamageMin = 0.85

att.Mult_MuzzleVelocity = 2

att.Mult_ShootPitch = 1.15

att.ActivateElements = {"40mm_hv"}
--lua/arccw/shared/attachments/uc_charm_urbancharm_anarchy.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_fg_civvy.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_fg_heavy.lua:
att.PrintName = "Heavy Bolt"

att.Icon = Material("entities/att/arccw_uc_heavybolt.png", "mips smooth")
att.Description = "Heavyweight bolt springs reduce the cyclic rate of the weapon, improving its controllability."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_fg"
att.AutoStats = true
att.SortOrder = 3

att.Mult_Recoil = 0.9
att.Mult_RPM = 0.8
att.Mult_CycleTime = 1.1

--[[]
att.Hook_Compatible = function(wep)
    if wep:GetIsManualAction() then
        return false
    end
end
]]

att.AttachSound = "arccw_uc/common/gunsmith/internal_modification.ogg"
--lua/arccw/shared/attachments/uc_fg_longrifling.lua:
att.PrintName = "Long Rifling"

att.Icon = Material("entities/att/arccw_uc_longrifling.png", "mips smooth")
att.Description = "Custom rifling improves muzzle velocity, allowing the weapon to shoot further."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = {"uc_fg","uc_fg_singleshot"}
att.AutoStats = true
att.SortOrder = 1

att.Hook_Compatible = function(wep)
    if wep:GetIsShotgun() then
        return false
    end
end

att.Mult_Range = 1.1

att.AttachSound = "arccw_uc/common/gunsmith/internal_modification.ogg"
--lua/arccw/shared/attachments/uc_fg_loosesprings.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_fg_match.lua:
att.PrintName = "Match Trigger"

att.Icon = Material("entities/att/arccw_uc_matchgradetrigger.png", "mips smooth")
att.Description = "Hair trigger for competition shooting allows crisp trigger pulls, improving first shot performance."
att.Desc_Pros = {
    "uc.match.1",
    "uc.match.2",
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = {"uc_fg","uc_fg_singleshot"}
att.SortOrder = 2
att.AutoStats = true

att.Hook_Compatible = function(wep)
    if wep:GetIsManualAction() then
        return false
    end
end

att.Override_ShotRecoilTable = {[1] = 0.75}
att.Mult_TriggerDelayTime = 0.5

--[[]
att.M_Hook_Mult_AccuracyMOA = function(wep, data)
    if wep:GetBurstCount() == 0 then
        data.mult = data.mult * 0.5
    end
end
]]

att.AttachSound = "arccw_uc/common/gunsmith/internal_modification.ogg"
--lua/arccw/shared/attachments/uc_muzzle_brake1.lua:
att.PrintName = "Hammerhead Muzzle Brake" -- fictional
att.AbbrevName = "Hammerhead Brake"
att.Icon = Material("entities/att/acwatt_uc_muzzle_brake1.png", "mips smooth")
att.Description = "Redirects propellant gases to reduce weapon recoil.\nReduces muzzle rise substantially."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"muzzle"}

att.SortOrder = 100

att.Model = "models/weapons/arccw/atts/uc_muzzle2.mdl"
att.ModelOffset = Vector(2.3, 0, 0)
att.ModelScale = Vector(1.0, 1.0, 1.0)
att.OffsetAng = Angle(0, 0, 0)

att.IsMuzzleDevice = true

att.Mult_Recoil = 0.8

att.Mult_ShootSpeedMult = 0.9
att.Mult_Sway = 1.15

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"

--lua/arccw/shared/attachments/uc_muzzle_fhider2.lua:
att.PrintName = "Cage Compensator" -- fictional
att.AbbrevName = "Cage Compensator"
att.Icon = Material("entities/att/acwatt_uc_muzzle_fhider2.png", "mips smooth")
att.Description = "Dual purpose compensator and flash hider, improving weapon stability while providing a clearer firing view from the hip."
att.Desc_Pros = {
    "uc.flashhider"
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"muzzle"}

att.SortOrder = 50

att.Model = "models/weapons/arccw/atts/uc_muzzle4.mdl"
att.ModelOffset = Vector(2.2, 0, 0)
att.ModelScale = Vector(0.95, 0.95, 0.95)
att.OffsetAng = Angle(0, 0, 0)

-- att.Silencer = true
att.Override_MuzzleEffect = "muzzleflash_suppressed"
att.IsMuzzleDevice = true

att.Mult_RecoilSide = 0.85
att.Mult_HipDispersion = 0.9

att.Mult_ShootSpeedMult = 0.9
att.Mult_Sway = 1.15

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"
--lua/arccw/shared/attachments/uc_optic_trijicon_tars.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_stock_pistol.lua:
att.PrintName = "FAB Defense Collapsible Tactical Stock"
att.AbbrevName = "Pistol Stock"
att.Icon = Material("entities/att/acwatt_uc_stock_pistol.png", "mips smooth")
att.Description = "Mitigates the recoil disadvantage typical of most pistols, but extends the weapon's profile substantially.\n\nYou probably shouldn't let the feds know you have this."
att.Slot = "go_stock_pistol_bt"
att.AutoStats = true

att.Model = "models/weapons/arccw/atts/stock_fab.mdl"

att.Mult_Recoil = .70
att.Mult_RecoilSide = .5
att.Mult_Sway = .5
att.Mult_SightTime = 1.3
att.Mult_DrawTime = 1.4
att.Add_BarrelLength = 20
--lua/arccw/shared/attachments/uc_tac_flashlight2.lua:
att.PrintName = "Tactical Rail-Mounted Flashlight"
att.AbbrevName = "Tactical Flashlight"
att.Icon = Material("entities/att/acwatt_uc_tac_flashlight2.png", "mips smooth")
att.Description = "Illuminates dark areas in front of the muzzle.\nCan be adjusted for a focused light."
att.Desc_Pros = {
    "uc.light"
}
att.Desc_Cons = {
    "con.light"
}
att.Desc_Neutrals = {}
att.AutoStats = true

att.Slot = {"tac","tac_pistol"}
att.SortOrder = 30+2

att.Model = "models/weapons/arccw/atts/ud_flashlight_2.mdl"
att.ModelOffset = Vector(0,0,-.1)

att.Flashlight = false
att.FlashlightFOV = 50
att.FlashlightFarZ = 1024 -- how far it goes
att.FlashlightNearZ = 1 -- how far away it starts
att.FlashlightAttenuationType = ArcCW.FLASH_ATT_LINEAR -- LINEAR, CONSTANT, QUADRATIC are available
att.FlashlightColor = Color(255, 255, 255)
att.FlashlightTexture = "effects/flashlight001"
att.FlashlightBrightness = 3
att.FlashlightBone = "light"

att.ToggleStats = {
    {
        PrintName = "On",
        Flashlight = true
    },
    {
        PrintName = "Tight",
        Flashlight = true,
        FlashlightFOV = 30,
        FlashlightFarZ = 1536,
        FlashlightBrightness = 5
    },
    {
        PrintName = "Off",
        Flashlight = false,
    }
}
--lua/arccw/shared/attachments/uc_tac_laser_red.lua:
att.PrintName = "Rail-Mounted Laser Sight (Red)"
att.AbbrevName = "Red Laser Sight"
att.Icon = Material("entities/att/acwatt_uc_tac_flashlight2.png", "mips smooth")
att.Description = "Projects a laser in the direction of the target, assisting the user to line up shots without iron sights."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "con.light"
}
att.Desc_Neutrals = {}
att.AutoStats = true

att.Slot = {"tac","tac_pistol"}
att.SortOrder = 29

att.Model = "models/weapons/arccw/atts/ud_flashlight_1.mdl"
att.ModelOffset = Vector(0,0,0)
att.OffsetAng = Angle(0,0,180)
att.ModelScale = Vector(1.2,1.2,1.2)
att.Laser = false
att.LaserStrength = 2 / 5
att.LaserBone = "light"

att.ColorOptionsTable = {Color(255, 0, 0, 150)}

att.ToggleStats = {
    {
        PrintName = "On",
        Laser = true,
        Mult_HipDispersion = 0.8,
        Mult_MoveDispersion = 0.8,
    },
    {
        PrintName = "Off",
        Laser = false,
    }
}
--lua/arccw/shared/attachments/uc_tac_tlr2hl.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tp_fullstroke.lua:
att.PrintName = "Full Stroke"

att.Icon = Material("entities/att/arccw_uc_tp_full_stroke.png", "smooth mips")
att.Description = "Specialist training and a little extra gun oil allow you to cycle the action more quickly after a shot, improving your rate of fire."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_tp"

att.AutoStats = true
att.SortOrder = 15

att.Mult_CycleTime = .9

att.Hook_Compatible = function(wep)
    if wep:GetBuff_Override("Override_ManualAction", wep.ManualAction) then return end
    for i, v in pairs(wep.Firemodes) do
        if !v then continue end
        if v.Mode and v.Override_ManualAction then
            return
        end
    end
    return false
end

att.NotForNPCs = true
--lua/arccw/shared/attachments/uc_tp_pointman.lua:
att.PrintName = "Pointman"

att.Icon = Material("entities/att/arccw_uc_tp_pointman.png", "smooth mips")
att.Description = "Firearms and dexterity training for quick response in breaching situations. Drills in confined spaces allow you to more effectively handle long weapons in close quarters.\n\nThe pointman is always the first to enter, and the first to identify and disable threats."
att.Desc_Pros = {
    "uc.pointman"
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_tp"

att.AutoStats = true
att.SortOrder = 7

att.Add_BarrelLength = -10
att.M_Hook_Mult_RPM = function(wep, data)
    if wep:GetCurrentFiremode().Mode == 1 then
        data.mult = data.mult * 1.15
    end
end

att.NotForNPCs = true
--lua/arccw/shared/attachments/uc_tp_pointshoot.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tp_sway.lua:
att.PrintName = "Nerves of Steel"

att.Icon = Material("entities/att/arccw_uc_tp_nerves_of_steel.png", "smooth mips")
att.Description = "A series of carefully honed concentration and nerve techniques, plus a good helping of Diazepam, reduce hand jitter while aiming."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_tp"

att.AutoStats = true
att.SortOrder = 11

att.Mult_Sway = .5

att.NotForNPCs = true
--lua/arccw/shared/attachments/uc_tp_underload.lua:
att.PrintName = "Underload"

att.Icon = Material("entities/att/arccw_uc_tp_underload.png", "smooth mips")
att.Description = "Just because it fits, does not mean you have to fill it. Partially filled magazines reduces follower stress and improves feeding rate."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.underload"
}
att.Desc_Neutrals = {
}
att.Slot = "uc_tp"

att.AutoStats = true
att.SortOrder = 1

function att.Hook_GetCapacity(wep, cap)
    return math.max(math.floor(cap * (1 - 0.14)), 1)
end

att.Hook_Compatible = function(wep)
    if wep.RejectMagSizeChange or wep:GetCapacity() == 1 then return false end
end


att.Mult_MalfunctionMean = 1.25
att.Mult_HeatCapacity = 1.25
att.Mult_RPM = 1.05
att.Mult_ReloadTime = 0.95

att.GivesFlags = {"ud_underload"}
att.ExcludeFlags = {"ud_loosesprings"}

att.NotForNPCs = true
--lua/arccw/shared/attachments/uc_ubgl_gp25.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ubgl_hk79.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_usp_cal_9mm.lua:
att.PrintName = "USP9 9x19mm Parabellum Conversion"
att.AbbrevName = "9x19mm Parabellum"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "P93-9 9x19mm Parabellum Conversion"
end

att.SortOrder = 9
att.Icon = Material("entities/att/uc_bullets/9x19.png", "smooth mips")
att.Description = "A popular alternative caliber to .45 ACP. With a reduced diameter, the round achieves greater muzzle velocity and magazine capacity."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_usp_caliber"

att.AutoStats = true

att.Override_Trivia_Calibre = "9x19mm Parabellum"

att.Mult_Damage = 30 / 45
att.Mult_DamageMin = 17 / 15
att.Mult_Penetration = 6 / 9
att.Mult_RangeMin = 15 / 10
att.Mult_RPM = 1.05
att.Mult_ReloadTime = .9

att.Mult_Recoil = 0.8
att.Mult_RecoilSide = 0.75

att.Mult_PhysBulletMuzzleVelocity = 355 / 315

--att.Mult_ClipSize = 15 / 12
att.Add_ClipSize = 3
att.Override_ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
att.Override_ShellScale = 1

att.Override_PhysTracerProfile = 0
att.Override_PhysTracerProfile_Priority = -1
att.Override_TracerNum = 1
att.Override_TracerNum_Priority = -1

local path = ")weapons/arccw_uc_usp/"

att.Hook_GetShootSound = function(wep, sound) -- Temporary
    if wep:GetBuff_Override("Silencer") then
        return {path .. "fire-9-sup-01.ogg", path .. "fire-9-sup-02.ogg", path .. "fire-9-sup-03.ogg", path .. "fire-9-sup-04.ogg", path .. "fire-9-sup-05.ogg", path .. "fire-9-sup-06.ogg"}
    else
        return {path .. "fire-9-01.ogg", path .. "fire-9-02.ogg", path .. "fire-9-03.ogg", path .. "fire-9-04.ogg", path .. "fire-9-05.ogg", path .. "fire-9-06.ogg"}
    end
end

local tail = ")/arccw_uc/common/9x19/"

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return {
            tail .. "fire-dist-9x19-pistol-ext-01.ogg",
            tail .. "fire-dist-9x19-pistol-ext-02.ogg",
            tail .. "fire-dist-9x19-pistol-ext-03.ogg",
            tail .. "fire-dist-9x19-pistol-ext-04.ogg",
            tail .. "fire-dist-9x19-pistol-ext-05.ogg",
            tail .. "fire-dist-9x19-pistol-ext-06.ogg"
        }
    end
end
--lua/arccw/shared/attachments/uc_usp_slide_ext.lua:
att.PrintName = "6\" LP93 Slide"
att.AbbrevName = "6\" Long Slide"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "6\" USP Elite Slide"
    att.AbbrevName = "6\" Elite Slide"
end

att.Icon = Material("entities/att/acwatt_uc_usp_slide_long.png", "smooth mips")
att.Description = "A somewhat uncommon long polymer slide.\nThe longer barrel improves precision but is awkward to handle."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_usp_slide"
att.SortOrder = 6

att.AutoStats = true

att.Mult_DrawTime = 1.15
att.Mult_HolsterTime = 1.15
att.Add_BarrelLength = 2

att.Mult_Sway = 1.25
att.Mult_HipDispersion = 1.15
att.Mult_SightTime = 1.1

att.Mult_AccuracyMOA = 0.85
att.Mult_Recoil = 0.85
att.Mult_Range = 1.25
--lua/arccw/shared/attachments/ud_870_slide_long.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_870_slide_moe.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_caliber_10auto.lua:
att.PrintName = "Glock 10mm Auto Conversion"
att.AbbrevName = "10mm Auto"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "GEN3 10mm Auto Conversion"
end

att.SortOrder = 80
att.Icon = Material("entities/att/uc_bullets/10.png", "smooth mips")
att.Description = "The FBI's preferred caliber of choice.\nSignificantly more powerful, but weapon handling suffers."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_glock_caliber"

att.AutoStats = true

att.Override_Trivia_Calibre = "10mm Auto"

att.Mult_Damage = ArcCW.UC.CalConv("9mm", "10mm", "max")
att.Mult_DamageMin = ArcCW.UC.CalConv("9mm", "10mm", "min")
att.Mult_Penetration = ArcCW.UC.CalConv("9mm", "10mm", "pen")

att.Mult_Recoil = 1.25
att.Mult_RecoilSide = 1.25
att.Mult_ReloadTime = 1.15
att.Mult_MalfunctionMean = 0.75
att.Mult_PhysBulletMuzzleVelocity = 400 / 375

att.Mult_ClipSize = 0.9
att.Override_ShellScale = 1

local path = ")weapons/arccw_ud/glock/"
local common = ")/arccw_uc/common/"
local tail = common .. "10x25/"
local fire10 = {path .. "fire-10-01.ogg",path .. "fire-10-02.ogg",path .. "fire-10-03.ogg",path .. "fire-10-04.ogg",path .. "fire-10-05.ogg",path .. "fire-10-06.ogg"}
local fire10sup = {path .. "fire-40-sup-01.ogg",path .. "fire-40-sup-02.ogg",path .. "fire-40-sup-03.ogg",path .. "fire-40-sup-04.ogg",path .. "fire-40-sup-05.ogg",path .. "fire-40-sup-06.ogg"}
local fire10dist = {tail .. "fire-dist-10x25-pistol-ext-01.ogg", tail .. "fire-dist-10x25-pistol-ext-02.ogg", tail .. "fire-dist-10x25-pistol-ext-03.ogg", tail .. "fire-dist-10x25-pistol-ext-04.ogg", tail .. "fire-dist-10x25-pistol-ext-05.ogg", tail .. "fire-dist-10x25-pistol-ext-06.ogg"}
local fire10distint = {common .. "fire-dist-int-pistol-heavy-01.ogg", common .. "fire-dist-int-pistol-heavy-02.ogg", common .. "fire-dist-int-pistol-heavy-03.ogg", common .. "fire-dist-int-pistol-heavy-04.ogg", common .. "fire-dist-int-pistol-heavy-05.ogg", common .. "fire-dist-int-pistol-heavy-06.ogg"}

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return fire10sup
    else
        return fire10
    end
end


att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire10dist
    end
end



att.Hook_GetDistantShootSoundIndoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire10distint
    end
end
--lua/arccw/shared/attachments/ud_glock_caliber_380acp.lua:
att.PrintName = "Glock .380 ACP Conversion"
att.AbbrevName = ".380 ACP"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "GEN3 .380 ACP Conversion"
end

att.SortOrder = 50
att.Icon = Material("entities/att/uc_bullets/380acp.png", "smooth mips")
att.Description = "An old and smaller pistol caliber that is somewhat obsolete.\nHas lower recoil and reduced effective range."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_glock_caliber"

att.AutoStats = true

att.Override_Trivia_Calibre = ".380 ACP"


att.Mult_Damage = ArcCW.UC.CalConv("9mm", "380acp", "max")
att.Mult_DamageMin = ArcCW.UC.CalConv("9mm", "380acp", "min")
att.Mult_Penetration = ArcCW.UC.CalConv("9mm", "380acp", "pen")

att.Mult_Recoil = 0.65
att.Override_PhysBulletMuzzleVelocity = 310

att.Override_ShellModel = "models/weapons/arccw/uc_shells/357sig.mdl"
att.Override_ShellScale = 1

local path = ")weapons/arccw_ud/glock/"
local common = ")/arccw_uc/common/"
local tail = common .. "357sig/"
local fire380 = "weapons/arccw_ud/glock/fire_380.ogg"
local fire380sup = { "weapons/arccw_ud/glock/fire_supp_380.ogg" }
local fire380dist = { "weapons/arccw_ud/glock/fire_dist_380.ogg" }
local fire380distint = {common .. "fire-dist-int-pistol-light-01.ogg",common .. "fire-dist-int-pistol-light-02.ogg",common .. "fire-dist-int-pistol-light-03.ogg",common .. "fire-dist-int-pistol-light-04.ogg",common .. "fire-dist-int-pistol-light-05.ogg",common .. "fire-dist-int-pistol-light-06.ogg"}

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return fire380sup
    else
        return fire380
    end
end

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire380dist
    end
end


att.Hook_GetDistantShootSoundIndoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire380distint
    end
end

att.GivesFlags = {"cal_subsonic"}
att.ExcludeFlags = {"powder_subsonic"}

--lua/arccw/shared/attachments/ud_glock_mag_100.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_mag_33.lua:
att.PrintName = "Glock 33-Round Extended Mag"
att.AbbrevName = "33-Round Extended Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "GEN3 33-Round Extended Mag"
end

att.SortOrder = 33
att.Icon = Material("entities/att/acwatt_ud_glock_mag_33.png", "smooth mips")
att.Description = "Extended stick magazine. Heavier and throws off weapon balance, but does allow you to fire for longer."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "ud_glock_mag"

att.AutoStats = true

att.Mult_SightTime = 1.1
att.Mult_ReloadTime = 1.15
att.Override_ClipSize = 33

att.Mult_HipDispersion = 1.25
att.Mult_Sway = 1.5
att.Mult_ShootSpeedMult = 0.95

att.Mult_HipDispersion = 1.25

att.ActivateElements = {"ud_glock_33_mag"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_33"
end

att.Hook_TranslateAnimation = function(wep, anim)
    if (anim == "fix") then
        return anim .. "_33"
    end
end
--lua/arccw/shared/attachments/ud_glock_skin_custom.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_skin_tan.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_slide_subcompact.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m1014_barrel_sport.lua:
att.PrintName = "19\" M4 Super 90 Competition Barrel"
att.AbbrevName = "19\" Competition Barrel"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "19\" FC1040 Competition Barrel"
end

att.Icon = Material("entities/att/acwatt_ud_m1014_barrel_sport.png", "smooth mips")
att.Description = "Hardened barrel with slightly increased length, designed for target shooting. Abiding by competition restrictions, it has a reduced rate of fire."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_1014_barrel"

att.AutoStats = true
att.Add_BarrelLength = 1

att.Mult_RecoilSide = 0.8
att.Mult_Recoil = 0.9
att.Mult_SightTime = 1.15
att.Mult_Sway = 1.2

att.Mult_AccuracyMOA = 0.9
att.Mult_RangeMin = 2
att.Mult_RPM = 180 / 220

att.Mult_HipDispersion = 1.15

att.ActivateElements = {"ud_autoshotgun_barrel_sport"}
--att.GivesFlags = {"nomuzzle"}
--lua/arccw/shared/attachments/ud_m16_barrel_10in.lua:
att.PrintName = "10.5\" RAYCAR-2 Commando Barrel"
if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "10.5\" Colt Commando Barrel"
end

att.Icon = Material("entities/att/acwatt_ud_m16_barrel_10_5.png", "smooth mips")
att.AbbrevName = "10.5\" Commando Barrel"
att.Description = "Short barrel, technically classified as a submachine gun barrel. Offers high fire rates at the cost of range."
att.Slot = "ud_m16_blen"

att.AutoStats = true

att.Mult_SightTime = 0.85
att.Mult_SpeedMult = 1.025
att.Mult_SightedSpeedMult = 1.1
att.Mult_HipDispersion = 0.7

att.Mult_RPM = 1.15
att.Mult_Recoil = 1.5
att.Mult_AccuracyMOA = 2
att.Mult_Range = 0.5
att.Mult_Sway = 0.75

att.Add_BarrelLength = -10
att.Mult_PhysBulletMuzzleVelocity = 0.729167

--att.LHIK = true
--att.Model = "models/weapons/arccw/atts/tactical_lhik.mdl"
att.DroppedModel = "models/items/boxsrounds.mdl"

att.ActivateElements = {"barrel_11","mount_11"}
att.GivesFlags = {"blen_11","barrel_short", "patr1"}
att.ExcludeFlags = {"hg_no11"}
--lua/arccw/shared/attachments/ud_m16_charm_fs.lua:
att.PrintName = "Preserved Front Sight"
att.Icon = Material("entities/att/acwatt_ud_m16_charm_fs.png", "smooth mips")
att.Description = "Those irons aren't out of style yet."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {
    "ud.m16_fs.1",
    "ud.m16_fs.2",
}
att.Slot = "ud_m16_charm"
att.Free = true
att.IgnorePickX = true

att.SortOrder = 999
att.ExcludeFlags = {"ud_m16_a1", "sight_magpul", "ud_m16_sd"}
--lua/arccw/shared/attachments/ud_m16_hg_wood.lua:
att.PrintName = "\"Service Rifle\" Wooden Handguard"
att.AbbrevName = "Wooden Handguard"

att.Icon = Material("entities/att/acwatt_ud_m16_hg_triangle.png", "smooth mips")
att.Description = "Custom wooden handguard created by independent gunsmiths from the state of California. Its heft gives it some extra stability."
att.Slot = "ud_m16_hg"
att.AutoStats = true

att.Mult_Sway = 0.8
att.Mult_RecoilSide = 0.85
att.Mult_Recoil = 0.9

att.Mult_SightedSpeedMult = 0.8
att.Mult_ShootSpeedMult = 0.9

att.LHIK = true
att.Model = "models/weapons/arccw/atts/classic_lhik.mdl"
att.DroppedModel = "models/items/boxsrounds.mdl"
att.ModelOffset = (Vector(0.41, 0, -1.63) - Vector(11.5, 2.8, -4.2))

att.ActivateElements = {"hg_m16a1_wood"}
att.GivesFlags = {"hg_no11"}
att.ExcludeFlags = {"blen_11"}
--lua/arccw/shared/attachments/ud_m16_mag_pmag.lua:
att.PrintName = "PMAG 30 AR/M4 GEN M2 MOE"
att.AbbrevName = "30-Round PMAG"
att.SortOrder = 40
att.Icon = Material("entities/att/acwatt_ud_m16_mag_pmag.png", "smooth mips")
att.Description = "American aftermarket magazine. The grooves give it a slightly better grip surface, but the difference in practice is negligible."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {"uc.cosmetic"}
att.Slot = "ud_m16_mag"

att.AutoStats = true
att.HideIfBlocked = true

-- att.Mult_SightTime = 1.1
-- att.Mult_ReloadTime = 1.15
-- att.Mult_Sway = 1.5

-- att.Mult_SpeedMult = 0.975
-- att.Mult_ShootSpeedMult = 0.95

att.ActivateElements = {"ud_m16_pmag"}

att.ExcludeFlags = {"m16_usas", "m16_9mm", "m16_50beo"}
--lua/arccw/shared/attachments/ud_m16_receiver_22lr.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_receiver_a1.lua:
att.PrintName = "AMRA1 Classic Upper Receiver"
att.AbbrevName = "Classic Upper"
att.Description = "Authentic upper receiver of the AMRA1 rifle, notable for its use throughout the latter half of the Vietnam War and seldom wielded by fortunate sons. Notorious for its difficult-to-control high RPM and still non-insignificant feeding failures."

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "M16A1 Classic Upper Receiver"
    att.Description = "Authentic upper receiver of the M16A1 rifle, notable for its use throughout the latter half of the Vietnam War and seldom wielded by fortunate sons. Notorious for its difficult-to-control high RPM and still non-insignificant feeding failures."
end

att.Icon = Material("entities/att/acwatt_ud_m16_receiver_a1.png", "smooth mips")
att.Desc_Pros = {
    --"uc.auto"
}
att.Desc_Cons = {
    "uc.jam"
}
att.Desc_Neutrals = {
    "ud.m16_a1"
}
att.Slot = "ud_m16_receiver"
--att.InvAtt = "ud_m16_receiver_auto"

att.AutoStats = true
att.SortOrder = -6

att.Override_Malfunction = true

att.Mult_AccuracyMOA = 1.25
att.Mult_HipDispersion = 1.125

-- att.Override_Firemodes = {
--     {
--         Mode = 2,
--     },
--     {
--         Mode = 1,
--     },
--     {
--         Mode = 0
--     }
-- }
att.Mult_RPM = 900 / 765

att.GivesFlags = {"m16_auto", "ud_m16_retro", "ud_m16_a1"}
att.ExcludeFlags = {"m16_noauto","ud_m16_not_retro"}
att.ActivateElements = {"upper_classic","ud_m16_upper_charm2"}
att.TopMount = 3
--lua/arccw/shared/attachments/ud_m16_receiver_cali.lua:
att.PrintName = "UKCAR .223 Lower Receiver"
att.AbbrevName = "Manual Lower"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "AR-15GB .223 Lower Receiver"
end

att.Icon = Material("entities/att/acwatt_ud_m16_receiver_cali.png", "smooth mips")
att.Description = "Straight-pull bolt action receiver for the M16, designed to comply with British centrefire rifle laws."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.manual"
}
att.Desc_Neutrals = {
}
att.Slot = "ud_m16_fcg"
att.AutoStats = true

att.SortOrder = -5

att.Override_CaseEffectAttachment = 6

att.Mult_PhysBulletMuzzleVelocity = 1.3

att.Override_Firemodes = {
    {
        Mode = 1,
        PrintName = "fcg.bolt",
    },
    {
        Mode = 0
    }
}

att.Hook_TranslateAnimation = function(wep, anim)
    if (anim == "fire" || anim == "fire_empty") then
        return "fire_cycle"
    end
end

att.Override_ManualAction = true
att.Mult_AccuracyMOA = 0.5
att.Mult_Range = 1.25
att.Mult_RangeMin = 1.25
att.Mult_MalfunctionMean = 1.5
--lua/arccw/shared/attachments/ud_m16_receiver_fpw.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_mini14_barrel_long.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_mini14_barrel_short.lua:
att.PrintName = "Mini-14 18\" Short Barrel"
att.AbbrevName = "18\" Short Barrel"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Patriot 809 18\" Short Barrel"
end

att.Icon = Material("entities/att/acwatt_ud_mini14_barrel_short.png", "smooth mips")
att.SortOrder = 18
att.Description = "Compact barrel for popping close-up varmints. More agile but less accurate."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_mini14_barrel"

att.Mult_SightTime = 0.8
att.Mult_Recoil = 1.1
att.Mult_AccuracyMOA = 1.5
att.Mult_Range = 0.5
att.Mult_Sway = 0.75

att.Mult_SightedSpeedMult = 1.1

att.Add_BarrelLength = -4

att.AutoStats = true
--lua/arccw/shared/attachments/ud_uzi_cal_22.lua:
att.PrintName = "Uzi .22 LR Conversion"
att.AbbrevName = ".22 LR"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "IAL-9 .22 LR Conversion"
end
att.Slot = "ud_uzi_caliber"

att.Icon = Material("entities/att/uc_bullets/22lr.png", "smooth mips")
att.Description = "A smaller cartridge that increases the fire rate and magazine capacity, as well as reduced recoil at the cost of greatly reduced damage and range."
att.Desc_Pros = {
}

att.Override_Trivia_Calibre = ".22 Long Rifle"
att.Override_Ammo = "plinking"

att.AutoStats = true

att.Mult_Damage = ArcCW.UC.CalConv("9mm", "22lr", "max")
att.Mult_DamageMin = ArcCW.UC.CalConv("9mm", "22lr", "min")
att.Mult_Penetration = ArcCW.UC.CalConv("9mm", "22lr", "pen")

att.Override_PhysTracerProfile = "uc_plinking"
att.Override_PhysBulletMuzzleVelocity = 365

att.Mult_Recoil = 0.25
att.Mult_VisualRecoilMult = 0.25
att.Mult_RPM = 1.5
att.Mult_ShootSpeedMult = 1.2

att.Mult_ClipSize = 1.2

att.Override_ShellModel = "models/weapons/arccw/uc_shells/22lr.mdl"
att.Override_ShellScale = 1
att.Override_ShellSounds = ArcCW.TinyShellSoundsTable

local path = "arccw_uc/common/"

local fire22 = {path .. "fire-22-01.ogg",path .. "fire-22-02.ogg",path .. "fire-22-03.ogg",path .. "fire-22-04.ogg",path .. "fire-22-05.ogg",path .. "fire-22-06.ogg"}
local fire22sup = {path .. "fire-22-sup-01.ogg",path .. "fire-22-sup-02.ogg",path .. "fire-22-sup-03.ogg",path .. "fire-22-sup-04.ogg",path .. "fire-22-sup-05.ogg",path .. "fire-22-sup-06.ogg"}

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return fire22sup
    else
        return fire22
    end
end

local fire22dist = {path .. "fire-22-dist-01.ogg", path .. "fire-22-dist-02.ogg", path .. "fire-22-dist-03.ogg", path .. "fire-22-dist-04.ogg", path .. "fire-22-dist-05.ogg", path .. "fire-22-dist-06.ogg"}

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire22dist
    end
end


local fire22distint = {path .. "fire-dist-int-pistol-light-01.ogg", path .. "fire-dist-int-pistol-light-02.ogg", path .. "fire-dist-int-pistol-light-03.ogg", path .. "fire-dist-int-pistol-light-04.ogg", path .. "fire-dist-int-pistol-light-05.ogg", path .. "fire-dist-int-pistol-light-06.ogg"}

att.Hook_GetDistantShootSoundIndoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire22distint
    end
end


--lua/arccw/shared/attachments/ud_uzi_mag_100.lua:
att.PrintName = "Uzi 100-Round C-Mag"
att.AbbrevName = "100-Round C-Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "STAP 100-Round C-Mag"
end


att.SortOrder = 100
att.Icon = Material("entities/att/acwatt_ud_uzi_mag_100.png", "smooth mips")
att.Description = "Twin-drum magazine for the Uzi. Allows for a long period between reloads, but harms the weapon's ergonomics significantly. Prone to jamming."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.jam"
}
att.Desc_Neutrals = {
}
att.Slot = "ud_uzi_mag"

att.AutoStats = true

att.Mult_SightTime = 1.5
--att.Mult_Recoil = 0.9
att.Mult_ReloadTime = 1.4
att.Mult_SpeedMult = 0.9
att.Mult_DrawTime = 1.25
att.Override_ClipSize = 100
att.Mult_Sway = 2
att.Mult_ShootSpeedMult = 0.85

att.Mult_HipDispersion = 1.5

att.ActivateElements = {"ud_uzi_100_mag"}

--att.Override_Jamming = true
att.Override_Malfunction = true
att.Mult_MalfunctionMean = 0.75
att.Mult_MalfunctionVariance = 1.5

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_100"
end

att.ExcludeFlags = {"uzi_45","uzi_22"}
att.HideIfBlocked = true

--lua/arccw/shared/attachments/ur_1911_slide_compact_custom.lua:
att.PrintName = "Colt Officer's Model 3.5\" Slide w/ Custom Finish"
att.AbbrevName = "3.5\" Officer Slide (Custom)"
att.Icon = Material("entities/att/ur_1911/slide_compact.png","mips smooth")
att.Description = "A shortened slide reduces the amount of holster to clear and further improves agility to the detriment of long-range performance and recoil control.\n\nThis variant will use your configured custom color for that extra flair."

att.Desc_Neutrals = {
    "uc.custcolor",
}
att.AutoStats = true
att.Slot = "ur_m1911_slide"
att.SortOrder = 3.5 - 0.01
att.InvAtt = "ur_1911_slide_compact"

att.Mult_DrawTime = 0.85
att.Mult_HolsterTime = 0.85
att.Add_BarrelLength = -1

att.Mult_Sway = 0.75
att.Mult_HipDispersion = 0.85
att.Mult_SightTime = 0.85

att.Mult_AccuracyMOA = 1.5
att.Mult_Range = 0.8
att.Mult_Recoil = 1.2
--lua/arccw/shared/attachments/ur_1911_slide_m45.lua:
att.PrintName = "M45 MEUSOC 5\" Slide"
att.AbbrevName = "5\" M45 Slide (Tan)"
att.Icon = Material("entities/att/ur_1911/slide_45tan.png","mips smooth")
att.Description = "Modernized slide, hammer and trigger assembly designed and hand-built for the U.S. Marine Corps, bringing an old gun to a new age.\nImproves handling and ballistics, but is worse when hip fired."

att.AutoStats = true
att.Slot = "ur_m1911_slide"
att.SortOrder = 5.1

att.Mult_RPM = 1.05
att.Mult_SightTime = 0.9
att.Mult_AccuracyMOA = 0.8
att.Mult_RangeMin = 1.5

att.Mult_HipDispersion = 1.25
--lua/arccw/shared/attachments/ur_1911_slide_m45_custom.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_329_grip_polymer.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_cal_366.lua:
att.PrintName = "VPO-209 .366 TKM Receiver"
att.AbbrevName = ".366 TKM Receiver"

--att.Icon = Material("entities/att/uc_bullets/366tkm.png", "mips smooth")
att.Icon = Material("entities/att/uc_bullets/762x39.png", "mips smooth")
att.Description = "Hunting round based on 7.62x39mm, with more powerful ranged ballistics than the parent cartridge. Weapons chambered for it are exclusively produced for the Russian civilian market, and are therefore semi-automatic only."

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "KFN-209 .366 TKM Receiver"
end

att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.semionly"
}
att.Desc_Neutrals = {
}
att.Slot = "ur_ak_cal"
att.AutoStats = true

att.Mult_Damage = 1.2
att.Mult_DamageMin = 1.2
att.Mult_Range = 1.25
att.Mult_PrecisionMOA = .75
att.Mult_Penetration = 1.5
--att.Mult_ReloadTime = .9

att.Mult_RPM = 0.8
att.Mult_Recoil = 1.5
-- att.Override_ClipSize = 10
att.Mult_ShootVol = 130 / 125


-- att.Hook_SelectReloadAnimation = function(wep, anim)
--     return anim .. "_10rnd"
-- end

att.Override_Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

att.Override_ShellModel = "models/weapons/arccw/uc_shells/366tkm.mdl"
att.Override_ShellScale = .666
--att.Override_Trivia_Class = "Shotgun" -- The VPO-209 is considered a shotgun because of its smoothbore barrel
att.Override_Trivia_Calibre = ".366 TKM"
att.Override_Trivia_Manufacturer = "Molot-Oruzhiye"
-- att.ActivateElements = {"mag_366"}
att.GivesFlags = {"cal_366"}

local path = ")weapons/arccw_ur/ak/"

att.Hook_GetShootSound = function(wep, fsound)
    if fsound == wep.ShootSound or fsound == wep.FirstShootSound then return {path .. "fire_366_1.ogg", path .. "fire_366_2.ogg", path .. "fire_366_3.ogg"} end
    if fsound == wep.ShootSoundSilenced then return path .. "fire_sup_1.ogg" end -- Temporary?
end

-- local slotinfo = {
--     [5] = {"10-Round Mag", "10-Round Mag", Material("entities/att/ur_ak/magazines/366_10.png", "smooth mips")},
-- }
-- att.Hook_GetDefaultAttName = function(wep, slot)
--     if slotinfo[slot] then
--         return GetConVar("arccw_truenames"):GetBool() and slotinfo[slot][2] or slotinfo[slot][1]
--     end
-- end
-- att.Hook_GetDefaultAttIcon = function(wep, slot)
--     if slotinfo[slot] then
--         return slotinfo[slot][3]
--     end
-- end
--lua/arccw/shared/attachments/ur_ak_cover_smooth.lua:
att.PrintName = "Smooth Dust Cover"
att.Icon = Material("entities/att/ur_ak/dustcover_ribbed.png", "mips smooth")
att.Description = "Early dust cover with a smooth profile. Realistically down to preference."
att.Slot = {"ur_ak_cover"}

att.Desc_Neutrals = {"uc.cosmetic"}

att.ActivateElements = {"cover_ribbed"}
--lua/arccw/shared/attachments/ur_ak_hg_alpha.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_hg_rpk74m.lua:
att.PrintName = "Polymer SAW Handguard"
att.Icon = Material("entities/att/ur_ak/handguards/rpk.png", "mips smooth")
att.Description = "Light polymer handguard used on the RPK-74M. Its additional grooves makes it a bit steadier to hold."
att.Slot = {"ur_ak_hg"}
att.AutoStats = true

att.SortOrder = 16

att.Mult_Sway = .8
att.Mult_SightTime = 1.05
att.Mult_Recoil = 0.95

att.ActivateElements = {"barrel_rpk74m"}
--lua/arccw/shared/attachments/ur_ak_mag_762_75.lua:
att.PrintName = "AK-47 75-Round Drum Mag"
att.AbbrevName = "75-Round Drum Mag"
att.Icon = Material("entities/att/ur_ak/magazines/762_75.png", "mips smooth")
att.Description = "Cylindrical drum magazine with capacity for a very large number of rounds, ideal for machine gunners. It is heavy enough to shift the weapon's center of mass, disorienting recoil control in addition to the existing drawbacks of extreme weight. Prone to feeding failures."
att.Slot = {"ur_ak_mag"}
att.Desc_Cons = {"uc.jam"}
att.AutoStats = true

att.SortOrder = 75
att.GivesFlags = {"mag_drum"}

att.HideIfBlocked = true

att.Override_ClipSize = 75

att.Mult_SightTime = 1.3
att.Mult_ReloadTime = 1.25
att.Mult_Sway = 2.5
att.Mult_SpeedMult = 0.9
att.Mult_ShootSpeedMult = 0.8
att.Mult_DrawTime = 1.2
att.Mult_RecoilSide = 1.5
att.Mult_HolsterTime = 1.2
att.Mult_RecoilSide = 1.1

att.Override_Malfunction = true
att.Mult_MalfunctionMean = 0.7
att.Mult_MalfunctionVariance = 1.5

att.Mult_HipDispersion = 1.5

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_75"
end

att.Hook_TranslateAnimation = function(wep, anim)
    if (anim == "fix") then
        return anim .. "_75"
    end
end

att.ActivateElements = {"mag_762_75"}
att.ExcludeFlags = ArcCW.UR.AKCalFlags
--lua/arccw/shared/attachments/ur_ak_muzzle_akm.lua:
att.PrintName = "Slant Muzzle Brake"
att.Icon = Material("entities/att/ur_ak/muzzle_m.png", "mips smooth")
att.Description = "External muzzle brake unique to the AKM and some derivatives. The slant-cut design counters muzzle rise without adding as much weight as a universal compensator."
att.AutoStats = true
att.Slot = {"ur_ak_muzzle"}

if !GetConVar("arccw_truenames"):GetBool() then
    att.Description = string.Replace(att.Description,"AKM","AVR-59") -- so we don't have to change the desc twice
end

att.Mult_Recoil = .9
att.Mult_RecoilSide = .95

att.Add_BarrelLength = 1
att.Mult_SightTime = 1.025
att.Mult_Sway = 1.05
att.Mult_ShootVol = 1.1

att.SortOrder = 998

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"
att.ActivateElements = {"muzzle_akm"}
att.ExcludeFlags = {"ak_barrelchange"}
att.RequireFlags = {"cal_default"}

att.Ignore = true
--lua/arccw/shared/attachments/ur_ak_muzzle_bayonet.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_stock_skeletal.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_stock_type3.lua:
att.PrintName = "Type 3 Slanted Stock"
att.AbbrevName = "Slanted Stock"
att.Icon = Material("entities/att/ur_ak/stock/3.png", "mips smooth")
att.Description = "A solid, slanted stock that eases handling. The slant design has a lowered cheek rest, which can impede accuracy."
att.Slot = {"ur_ak_stock"}
att.AutoStats = true

att.SortOrder = 4

att.Mult_Recoil = .9
att.Mult_SightTime = .95
att.Mult_Sway = 1.25
att.Mult_HipDispersion = 1.05

att.ActivateElements = {"stock_akn"}
--lua/arccw/shared/attachments/ur_aw_skin_tan.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_aw_stock_at.lua:
att.PrintName = "Tactical Stock"
att.Description = "Variant folding stock with a pistol grip design. Lighter and perhaps more comfortable, but not as sturdy."
att.Icon = Material("entities/att/ur_aw/stock_at.png", "mips smooth")
att.Slot = {"ur_aw_stock"}
att.AutoStats = true

att.SortOrder = 3

att.Mult_SightTime = .85
att.Mult_Sway = 1.25
att.Mult_Recoil = 1.1

att.ActivateElements = {"stock_at"}
att.GivesFlags = {"pistolgrip"}
--lua/arccw/shared/attachments/ur_dbs_tp_doom.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_barrel_15.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_hg_51_mlok.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_rec_hk33.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_rec_psg.lua:
att.PrintName = "PSG-1 Receiver"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "PMR-2 Receiver"
end

att.Description = "Infamously expensive semi-automatic receiver. Comes with sublime long-range performance and a comfortable wooden grip that improves handling."
att.Icon = Material("entities/att/ur_g3/rec_psg.png","smooth mips")
att.Slot = "ur_g3_rec"
att.Desc_Cons = {
    "uc.semionly"
}
att.AutoStats = true

att.SortOrder = 13

att.Mult_RPM = 400 / 520
att.Mult_Recoil = 0.6
att.Mult_AccuracyMOA = 0.5
att.Mult_Range = 1.25
att.Mult_MoveDispersion = 0.5

att.Mult_PhysBulletMuzzleVelocity = 1.15

att.Override_Firemodes_Priority = 0.5
att.Override_Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

att.Override_Trivia_Class = "Sniper Rifle"
--lua/arccw/shared/attachments/ur_g3_skin_custom.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_skin_wood.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_stock_rucar.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_stock_sg.lua:
att.PrintName = "G3 Padded Stock" 
att.AbbrevName = "Padded Stock"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "AG58 Marksman Stock"
end

att.Icon = Material("entities/att/ur_g3/stock_sg.png","smooth mips")
att.Description = [[Padded stock found on the marksman rifle variant of the rifle. The cheek padding reduces sway but weighs the stock down.]]
att.AutoStats = true
att.Slot = {"ur_g3_stock"}

att.SortOrder = 11


att.Mult_Sway = .75

att.Mult_SightTime = 1.075
--lua/arccw/shared/attachments/ur_mp5_barrel_sd.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_mp5_caliber_10auto.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_mp5_caliber_40sw.lua:
att.PrintName = "MP5/40 .40 Smith & Wesson Conversion"
att.AbbrevName = ".40 S&W Receiver"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "PK5/40 .40 S&W Conversion"
end

att.SortOrder = 100
att.Icon = Material("entities/att/uc_bullets/40sw.png", "smooth mips")
att.Description = "Law-enforcement caliber with a slightly larger bullet and shorter case.\nRetains damage over distance better than other calibers."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ur_mp5_caliber"

att.AutoStats = true

att.Override_Trivia_Calibre = ".40 Smith & Wesson"

att.Mult_DamageMin = 1.35
att.Mult_RangeMin = 0.75
att.Mult_Recoil = 1.15

--att.Mult_ClipSize = .9
att.Override_ShellScale = 1.1

local path = ")weapons/arccw_ur/mp5/"
local fire40 = {path .. "fire-40-01.ogg",path .. "fire-40-02.ogg",path .. "fire-40-03.ogg",path .. "fire-40-04.ogg",path .. "fire-40-05.ogg",path .. "fire-40-06.ogg"}
local fire40sup = {path .. "fire-40-sup-01.ogg",path .. "fire-40-sup-02.ogg",path .. "fire-40-sup-03.ogg",path .. "fire-40-sup-04.ogg",path .. "fire-40-sup-05.ogg",path .. "fire-40-sup-06.ogg"}

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return fire40sup
    else
        return fire40
    end
end

local tail = ")/arccw_uc/common/40sw/"
local fire40dist = {tail .. "fire-dist-40sw-pistol-ext-01.ogg", tail .. "fire-dist-40sw-pistol-ext-02.ogg", tail .. "fire-dist-40sw-pistol-ext-03.ogg", tail .. "fire-dist-40sw-pistol-ext-04.ogg", tail .. "fire-dist-40sw-pistol-ext-05.ogg", tail .. "fire-dist-40sw-pistol-ext-06.ogg"}
local common = ")/arccw_uc/common/"

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire40dist
    end
end


local fire40distint = {common .. "fire-dist-int-pistol-heavy-01.ogg", common .. "fire-dist-int-pistol-heavy-02.ogg", common .. "fire-dist-int-pistol-heavy-03.ogg", common .. "fire-dist-int-pistol-heavy-04.ogg", common .. "fire-dist-int-pistol-heavy-05.ogg", common .. "fire-dist-int-pistol-heavy-06.ogg"}

att.Hook_GetDistantShootSoundIndoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire40distint
    end
end

-- att.Hook_GetDistantShootSound = function(wep, distancesound)
--     if distancesound == wep.DistantShootSound then
--         return "weapons/arccw_ud/glock/fire_dist_40.ogg" end
-- end

att.GivesFlags = {"ur_mp5_cal_40sw"}
--att.ExcludeFlags = {"barrel_sd"}
att.ActivateElements = {"ur_mp5_mag_waffle"}
--lua/arccw/shared/attachments/ur_mp5_stock_a3.lua:
att.PrintName = "MP5A3 Retractable Stock"
att.AbbrevName = "Retractable Stock"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "K7-3 Retractable Stock"
end

att.Icon = Material("entities/att/ur_mp5/stock_colap.png", "smooth mips")
att.Description = "Retractable skeletal stock, signficantly less massive than solid polymer. It can be collapsed to reduce profile even further at the cost of stability.\n\nToggling the stock modifies performance accordingly."
att.AutoStats = true
att.Slot = "ur_mp5_stock"

att.ToggleLockDefault = true
att.ToggleSound = "arccw_uc/common/stockslide.ogg"

att.Mult_Recoil = 1.5
att.Mult_RecoilSide = 1.15
att.Mult_SightTime = 0.90

att.Mult_DrawTime = 0.85
att.Mult_HolsterTime = 0.85

att.Mult_HipDispersion = 0.8

att.ToggleStats = {
    {
        PrintName = "Extended",
        ActivateElements = {"stock_a3"},
        AutoStats = true,
    },
    {
        PrintName = "Collapsed",
        ActivateElements = {"stock_a3_folded"},
        AutoStats = true,
        Add_BarrelLength = -9,

        Mult_Sway = 2,
        Mult_ShootSpeedMult = 1.12,
        Mult_SightedSpeedMult = 1.12,
    }
}
--lua/arccw/shared/attachments/ur_mp5_stock_pdw.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_spas12_barrel_short.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_spas12_stock_full.lua:
att.PrintName = (GetConVar("arccw_truenames"):GetBool() and "SPAS-12 Fixed Polymer Stock") or "Martello 12/70 Fixed Polymer Stock"
att.AbbrevName = "Fixed Stock"
att.Icon = Material("entities/att/acwatt_ud_m1014_stock_in.png", "smooth mips")
att.Description = "Solid, non-adjustable polymer stock designed specifically for the civilian market. Provides a better brace at the cost of combat mobility."
att.Icon = Material("entities/att/ur_spas/stock_full.png", "smooth mips")
att.Slot = "ur_spas12_stock"

att.AutoStats = true

att.Mult_Recoil = .8
att.Mult_Sway = .8

att.Mult_SightedSpeedMult = .85
att.Mult_DrawTime = 1.25
att.Mult_HolsterTime = 1.25
--lua/arccw/shared/languages/uc_es.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_quicknade.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_vehicle.lua:
-- returns a table of entities to ignore (the player's vehicle)
function ArcCW:GetVehicleFilter(ply)
    if !ArcCW.ConVars["driveby"]:GetBool() or !IsValid(ply) or !ply:IsPlayer() then return {} end

    local tbl = {}
    local veh = ply:GetVehicle()

    if simfphys then
        -- gredwitch, why do you think it's a good idea to create the simfphys table yourself???
        -- people might need to do dependency checks, you know
        local car = ply.GetSimfphys and ply:GetSimfphys()
        if IsValid(car) then
            table.insert(tbl, car)
            if SERVER then
                table.insert(tbl, car.DriverSeat)
                for _, seat in ipairs(car.pSeat) do
                    table.insert(tbl, seat)
                    if IsValid(seat:GetDriver()) then
                        table.insert(tbl, seat:GetDriver())
                    end
                end
                table.Add(tbl, car.Wheels or {})
            else
                table.insert(tbl, veh) -- should be the pod
                -- client doesn't know what the wheels/passenger seats are
                -- iterate over all wheels and seats. inefficient, but its client so whatever
                for _, w in ipairs(ents.FindByClass("gmod_sent_vehicle_fphysics_wheel")) do
                    if w:GetBaseEnt() == car then
                        table.insert(tbl, w)
                    end
                end
                for _, s in ipairs(ents.FindByClass("prop_vehicle_prisoner_pod")) do
                    if s:GetParent() == car then
                        table.insert(tbl, s)
                        if IsValid(s:GetDriver()) then
                            table.insert(tbl, s:GetDriver())
                        end
                    end
                end
            end
        elseif IsValid(veh) then
            table.insert(tbl, veh)
        end
    elseif IsValid(veh) then
        table.insert(tbl, veh)
    end

    return tbl
end

-- returns a new source to fire from, this should be moved right outside the vehicle
-- since we can't ignore multiple entities in FireBullets, this is the only solution
function ArcCW:GetVehicleFireTrace(ply, src, dir)
    if !ArcCW.ConVars["driveby"]:GetBool() then return src end
    local tbl = ArcCW:GetVehicleFilter(ply)
    if table.IsEmpty(tbl) then return src end

    -- Make some traces from the outside to find a good spot
    local trace_dist = {256, 128, 64}
    for i = 1, #trace_dist do
        local tr = util.TraceLine({
            start = src + dir * trace_dist[i],
            endpos = src,
            ignoreworld = true,
            mask = MASK_SHOT
        })
        if IsValid(tr.Entity) and table.HasValue(tbl, tr.Entity) then
            return tr.HitPos + tr.HitNormal * 4
        end
    end
    return src
end
--addons/[binbon]arccw_modify/lua/arccw/client/cl_binds.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/client/cl_glint.lua:
local rnd        = render
local r_lightcol = rnd.GetLightColor

local glintmat = Material("effects/blueflare1")

local players
local playerssaver = {}

hook.Add("PostDrawEffects", "ArcCW_ScopeGlint", function()

end)
--addons/policearmorylocker/lua/armory_locker/shared/armory_locker_darkrpadds.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/gamemodes/currencies/sh_init.lua:
ashop.currencies = ashop.currencies or {
    list = {}
}

function ashop.currencies.RegisterCurrency(name, addMoney, getMoney, format)
    assert(name, "Currency must have a name")
    ashop.currencies.list[name] = {
        addMoney = addMoney,
        getMoney = getMoney,
        format = format
    }
end
--addons/ashop/lua/ashop/code/object_types/car_skins/sh_carskin.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('CarSkins')
OBJECT_TYPE.DefaultRender = "Accessories"

OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = ashop.L('CarSkin_1'),
        type = TYPE_STRING,
    },

    [2] = {
        name = ashop.L('CarSkin_2'),
        type = 'LIST',
        options = {
            listObjects = {
                {TYPE_STRING, "List of vehicle that can use this skin"},
            },
            required = true
        },
    }
}

OBJECT_TYPE.SlotDefault = 5
OBJECT_TYPE.UniqueIdentifier = "CarSkin"
OBJECT_TYPE.NoChild = true

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/case_opening/sh_caseopening.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/case_opening/sh_hiddenmethods.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/commandes/sh_commandes.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = "Commandes"
OBJECT_TYPE.DefaultRender = "Consumables"
OBJECT_TYPE.UniqueIdentifier = "Commandes"

// Name, and extra data
OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = ashop.L('Commandes_1'),
        type = TYPE_STRING,
    },

    [2] = {
        name = ashop.L('Commandes_2'),
        type = 'SELECT',
        options = {
            selects = {
                {ashop.L('Commandes_2_0'), 1},
                {ashop.L('Commandes_2_1'), 2},
                {ashop.L('Commandes_2_2'), 3}
            },

            outputType = 'UInt8',
            required = true
        },
    },

    [3] = {
        name = ashop.L('Commandes_3'),
        type = TYPE_STRING
    }
}

OBJECT_TYPE.SlotDefault = 1
OBJECT_TYPE.UniqueIdentifier = "Commandes"

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/finishers/cl_finishers.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/model/sh_model.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('PlayerModelClass')
OBJECT_TYPE.DefaultRender = "Accessories"
OBJECT_TYPE.UniqueIdentifier = "PlayerModel"

OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = ashop.L('PlayerModel1'),
        type = TYPE_STRING,
        options = {
            required = true
        }
    },
}

OBJECT_TYPE.SlotDefault = 1

// All players
function OBJECT_TYPE.OnMetadataUpdate(ply, plyItem, item, metadataKey, oldValue, newValue)
    if !plyItem.ent then return end

    if ply:GetModel() == oldValue then
        ply:SetModel(newValue)
    end
end

function OBJECT_TYPE.OnEquip(ply, plyItem, item)
    if ply.DModelPanel then
        if string.lower(ply.DModelPanel:GetModel()) != string.lower(ashop.GetItemAttribute(plyItem, item, 1)) then
            ply.ashop_oldmodel = ply:GetModel()
            ply.DModelPanel:SetModel(ashop.GetItemAttribute(plyItem, item, 1))
        end
    else
        ply.ashop_oldmodel = ply:GetModel()
        ply:SetModel(ashop.GetItemAttribute(plyItem, item, 1))
    end
end

function OBJECT_TYPE.OnRemove(ply, plyItem, item)
    if ply.ashop_oldmodel then
        local oldModel = ply.ashop_oldmodel
        ply.ashop_oldmodel = nil

        if ply:GetModel() == ashop.GetItemAttribute(plyItem, item, 1) then
            if ply.DModelPanel then
                ply.DModelPanel:SetModel(oldModel)
            else
                ply:SetModel(oldModel)
            end
        end
    end
end

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/taunts/sh_taunts.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('TauntsClass')
OBJECT_TYPE.DefaultRender = "Accessories"

OBJECT_TYPE.ItemParameters = {
    [2] = {
        name = ashop.L('Taunts_2'),
        type = TYPE_STRING,
    },

    [3] = {
        name = ashop.L('Taunts_3'),
        type = TYPE_BOOL,
    },

    [4] = {
        name = ashop.L('Taunts_4'),
        type = TYPE_STRING
    },

    [5] = {
        name = ashop.L('Taunts_5'),
        type = "FLOAT"
    }
}

OBJECT_TYPE.SlotDefault = 10
OBJECT_TYPE.UniqueIdentifier = "Taunts"

ashop.RegisterObjectType(OBJECT_TYPE)

hook.Add("CalcMainActivity", "ashop_anims", function(ply, vel)
    if ply.ashop_anim then
        seq = ply:LookupSequence( ply.ashop_anim[1] )
        if seq < 1 then return end

        local c = ply:GetCycle()
        if c >= 1 then
            if ply.ashop_anim[3] then
                ply:SetCycle(0)
            else
                if SERVER then
                    net.Start('ashop_selectTaunt')
                        net.WriteEntity(ply)
                        net.WriteBool(false)
                    net.Broadcast()
                    ply.ashop_anim = nil
                end
            end
        else
            if ply.ashop_anim[2] then
                local fr = FrameTime()
                c = c - (fr*(1 - ply.ashop_anim[2]))/ply:SequenceDuration()
                ply:SetCycle(c)
            end
        end

        return -1, seq
    end
end)
--addons/ashop/lua/ashop/code/object_types/title_code/text/sh_text.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('TextClass')
OBJECT_TYPE.DefaultRender = "Titles"
OBJECT_TYPE.UniqueIdentifier = "TitleText"

// Name, and extra data
OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = ashop.L('TextClass'),
        type = TYPE_STRING,
        options = {
            required = true
        }
    }
}

OBJECT_TYPE.SlotDefault = 1
OBJECT_TYPE.NoChild = true
OBJECT_TYPE.BlockSlotEdit = true

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/trails/sh_trails.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('TrailsClass')
OBJECT_TYPE.DefaultRender = "Accessories"

// Name, and extra data
OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = ashop.L('Trails_1'),
        type = TYPE_BOOL,
        options = {
            required = true
        }
    },

    [2] = {
        name = ashop.L('Trails_2'),
        type = TYPE_STRING,
        options = {
            required = true
        }
    },

    [3] = {
        name = ashop.L('Trails_3'),
        type = TYPE_BOOL,
        options = {
            required = true
        }
    },

    [4] = {
        name = ashop.L('Trails_4'),
        type = TYPE_STRING,
    },

    [5] = {
        name = ashop.L('Trails_5'),
        type = TYPE_VECTOR,
        options = {
            maxVar = 2
        }
    },

    [6] = {
        name = ashop.L('Trails_6'),
        type = TYPE_STRING,
    },

    [7] = {
        name = ashop.L('Trails_7'),
        type = TYPE_COLOR,
    },

    [8] = {
        name = ashop.L('Trails_8'),
        type = TYPE_BOOL,
    },

    [9] = {
        name = ashop.L('Trails_9'),
        type = "UInt8",
    },

    [10] = {
        name = ashop.L('Trails_10'),
        type = "UInt8",
    },

    [11] = {
        name = ashop.L('Trails_11'),
        type = "UInt4",
    },
}

OBJECT_TYPE.SlotDefault = 1
OBJECT_TYPE.UniqueIdentifier = "Trails"

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/weapon_skins/sh_weaponskin.lua:
local OBJECT_TYPE = {}

ashop.DefaultWeaponsHL2 = {
    ["weapon_357"] = {
        "models/weapons/w_357.mdl",
        "models/weapons/c_357.mdl",
    },
    ["weapon_pistol"] = {
        "models/weapons/w_pistol.mdl",
        "models/weapons/c_pistol.mdl",
    },
    ["weapon_bugbait"] = {
        "models/weapons/w_bugbait.mdl",
        "models/weapons/c_bugbait.mdl",
    },
    ["weapon_crossbow"] = {
        "models/weapons/w_crossbow.mdl",
        "models/weapons/c_crossbow.mdl",
    },
    ["weapon_crowbar"] = {
        "models/weapons/w_crowbar.mdl",
        "models/weapons/c_crowbar.mdl",
    },
    ["weapon_physcannon"] = {
        "models/weapons/w_Physics.mdl",
        "models/weapons/c_physcannon.mdl",
    },
    ["weapon_ar2"] = {
        "models/weapons/w_irifle.mdl",
        "models/weapons/c_irifle.mdl",
    },
    ["weapon_rpg"] = {
        "models/weapons/w_rocket_launcher.mdl",
        "models/weapons/c_rpg.mdl",
    },
    ["weapon_shotgun"] = {
        "models/weapons/w_shotgun.mdl",
        "models/weapons/c_shotgun.mdl",
    },
    ["weapon_smg1"] = {
        "models/weapons/w_smg1.mdl",
        "models/weapons/c_smg1.mdl",
    },
    ["weapon_stunstick"] = {
        "models/weapons/w_stunbaton.mdl",
        "models/weapons/c_stunstick.mdl",
    }
}

function ashop.WeaponSkinApply(ply, wep)
    if !wep or !IsValid(wep) then return end

	local skinWep = ply.ashop_skinwep
    if skinWep == wep.ashop_weaponskin then return end
    local c = wep.ashop_WepClass or wep:GetClass()
	wep.ashop_weaponskin = skinWep

    for i = 1, table.Count(wep:GetMaterials()) do
        wep:SetSubMaterial(i-1, nil)
    end

    if !skinWep then return end
    
    local skinTable = ashop.weaponmaterials[c]
    if !skinTable then return end
    local plyItem = ply.ashop_data.items[ply.ashop_skinwep]
	local skinPath = ashop.GetItemAttribute(plyItem, ashop.items[plyItem.item_id], 1)
    
    if !skinPath then return end

	if wep.IsFAS2Weapon then
        if CLIENT then
            if IsValid(wep.W_Wep) then
                for i = 1, table.Count(wep.W_Wep:GetMaterials()) do
                    wep.W_Wep:SetSubMaterial(i-1, nil)
                end
    
                for matID, _ in pairs(skinTable.wm) do
                    wep.W_Wep:SetSubMaterial(matID, (v != 0 and skinPath or nil))
                end
            end
    
            if IsValid(wep.Wep) then
                for i = 1, table.Count(wep.Wep:GetMaterials()) do
                    wep.Wep:SetSubMaterial(i-1, nil)
                end
    
                for matID, _ in pairs(skinTable.vm) do
                    wep.Wep:SetSubMaterial(matID, (v != 0 and skinPath or nil))
                end
            end
        end
    elseif wep.CW20Weapon and !wep.DrawTraditionalWorldModel then
        if IsValid(wep.WMEnt) then
            for i = 1, table.Count(wep.WMEnt:GetMaterials()) do
                wep.WMEnt:SetSubMaterial(i, nil)
            end

            for matID, _ in pairs(skinTable.wm) do
                wep.WMEnt:SetSubMaterial(matID, skinPath)
            end
        end
    elseif wep.m_WorldModel then
        if IsValid(wep.m_WorldModel) then
            for i = 1, table.Count(wep.m_WorldModel:GetMaterials()) do
                wep.m_WorldModel:SetSubMaterial(i, nil)
            end

            for matID, _ in pairs(skinTable.wm) do
                wep.m_WorldModel:SetSubMaterial(matID, skinPath)
            end
        end
    else
        for matID, _ in pairs(skinTable.wm) do
            wep:SetSubMaterial(matID, skinPath)
        end
    end
end

OBJECT_TYPE.Name = ashop.L('WeaponSkinClass')
OBJECT_TYPE.DefaultRender = "Weapons"

// Name, and extra data
OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = "Skin Dir",
        type = TYPE_STRING,
        options = {
            required = true
        }
    },
}

OBJECT_TYPE.SlotDefault = 1
OBJECT_TYPE.NoChild = true
OBJECT_TYPE.BlockSlotEdit = true
OBJECT_TYPE.UniqueIdentifier = "WeaponSkins"

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/players/equip/sh_init.lua:
local ENTITY = FindMetaTable("Entity")

// Get if the slot have items on it
// We return a table since admin can make multiples slot for the same item subcategory/category
// -1: Empty
function ENTITY:AShop_SlotStateGet(object_type, sub_type)
    if !self.ashop_data then
        return
    end

    assert(ashop.object_types[object_type], "Invalid object_types")

    self.ashop_data.equipped = self.ashop_data.equipped or {}
    local s = self.ashop_data.equipped[object_type] or {}

    local index, count
    local o = ashop.object_types[object_type]
    
    if sub_type then
        assert(o.sub_cat and o.sub_cat[sub_type], "Sub_type specified, but doesn't exist")
        index = sub_type
        count = (o.sub_cat[sub_type].slotSize or o.SlotDefault)
    else
        assert(!(o.sub_cat and !table.IsEmpty(o.sub_cat)), "Sub_type not specified, but there is sub-categories")
        index = 0
        count = o.slotSize or o.SlotDefault
    end

    local tbl = {}
    local state = s[index] or {}
    for i = 1, count do
        tbl[i] = state[i]
    end

    return tbl, count
end

function ENTITY:AShop_ItemEquip(plyItemID, specifiedSlot, onlyRemove)
    assert(self.ashop_data, "No ashop_data")
    local a = self.ashop_data.items[plyItemID]

    if !a then
        return "Player doesn't own this item"
    end
    
    local item = ashop.items[tonumber(a.item_id)]
    if !item then return end
    if !ashop.object_types[item.object_types].SlotDefault then return end

    local slots, slotCount = self:AShop_SlotStateGet(item.object_types, item.sub_types)
    local is_remove, removeID = false

    if specifiedSlot and specifiedSlot > slotCount then
        specifiedSlot = nil
    end

    for i=1, slotCount do
        if !slots[i] and specifiedSlot == nil then
            specifiedSlot = i
        end

        if slots[i] == plyItemID then
            is_remove = true
            removeID = i
            specifiedSlot = i
            break
        end
    end

    if onlyRemove and !is_remove then return end

    if !specifiedSlot then
        specifiedSlot = 1
    end

    self.ashop_data.equipped = self.ashop_data.equipped or {}
    self.ashop_data.equipped[item.object_types] = self.ashop_data.equipped[item.object_types] or {}
    self.ashop_data.equipped[item.object_types][item.sub_types or 0] = self.ashop_data.equipped[item.object_types][item.sub_types or 0] or {}
    local t = self.ashop_data.equipped[item.object_types][item.sub_types or 0]
    local object_type = ashop.object_types[item.object_types]

    if SERVER then
        ashop.sendDataToIgnorants({[item.id] = item}, 'items')
        ashop.sendDataToIgnorants({[plyItemID] = a}, 'plyitem', self)

        local playersReady = {}

        for k, v in ipairs(player.GetHumans()) do
            if v.ashop_ready then
                table.insert(playersReady, v)
            end
        end

        net.Start('ashop_PlayerEquippedItem')
            net.WriteEntity(self)
            net.WriteUInt(plyItemID, ashop.Config.BitsPlyItemID)
            net.WriteUInt(specifiedSlot, math.ceil(math.log(slotCount, 2)))
            net.WriteBool(is_remove)
        net.Send(playersReady)
    end

    if is_remove then
        // Remove object
        hook.Run('ashop_unequip', self, slot, item, self.ashop_data.items[t[specifiedSlot]], specifiedSlot)
        if object_type.OnRemove then
            object_type.OnRemove(self, self.ashop_data.items[t[specifiedSlot]], item)
        end

        hook.Run('ashop_equipStateChange', self, -1, nil, t[specifiedSlot])
        t[specifiedSlot] = nil
    else
        if t[specifiedSlot] then
            swap = true
            local oldplyItem = self.ashop_data.items[t[specifiedSlot]]
            local olditem = ashop.items[oldplyItem.item_id]

            if object_type.OnRemove then
                object_type.OnRemove(self, self.ashop_data.items[t[specifiedSlot]], item)
                hook.Run('ashop_unequip', self, slot, olditem, oldplyItem, specifiedSlot)
            end

            hook.Run('ashop_equipStateChange', self, 0, plyItemID, t[specifiedSlot])
        else
            hook.Run('ashop_equipStateChange', self, 1, plyItemID, nil, specifiedSlot)
        end

        t[specifiedSlot] = plyItemID

        hook.Run('ashop_equip', self, slot, item, a, specifiedSlot)

        if CLIENT and self == LocalPlayer() then
            if object_type.OnLocalEquip then
                object_type.OnLocalEquip(self, a, item)
            end
        else
            if object_type.OnEquip then
                object_type.OnEquip(self, a, item)
            end
        end
    end
end


gameevent.Listen( "player_disconnect" )
hook.Add( "player_disconnect", "ashop_unequipItemsOnDC", function( data )
    local id = data.userid			// Same as Player:UserID()
    local ply = Player(id)
    if !IsValid(ply) or !ply.ashop_data then return end

    for object_typeID, v in pairs(ply.ashop_data.equipped) do
        local objType = ashop.object_types[object_typeID]
        for sub_type, j in pairs(v) do
            for slot, plyItemID in pairs(j) do
                if objType.OnRemove then
                    local plyItem = ply.ashop_data.items[plyItemID]
                    objType.OnRemove(ply, plyItem, ashop.items[plyItem.item_id])
                end
            end
        end
    end
end )
--addons/ashop/lua/ashop/code/ui/panels/cl_avatartooltip.lua:
local vgui = vgui
local IsValid = IsValid
local Color = Color
local draw = draw
local surface = surface
local derma = derma


--
-- The delay before a tooltip appears
--
local PANEL = {}
local clr = ashop.GetColor('Grad2_1')

function PANEL:Paint( w, h )
	self:PositionTooltip()
	draw.RoundedBox(4, 0, 0, w, h, self.bgclr or clr)
end

function PANEL:PositionTooltip()
	if ( !IsValid( self.TargetPanel ) ) then
		self:Close()
		return
	end

	self:InvalidateLayout( true )

	local x, y = input.GetCursorPos()
	local w, h = self:GetSize()

	local lx, ly = self.TargetPanel:LocalToScreen( 0, 0 )

	y = math.min( y, ly - h - 20 )
	if ( y < 2 ) then y = 2 end

	-- Fixes being able to be drawn off screen
	self:SetPos( math.Clamp( x - w * 0.5, 0, ScrW() - self:GetWide() ), math.Clamp( y, 0, ScrH() - self:GetTall() ))

end

function PANEL:SetContents( panel, bDelete )
	panel:SetParent( self )

	self.Contents = panel
	self.DeleteContentsOnClose = bDelete or false
	self.Contents:SizeToContents()
	self.Contents:SetVisible( false )
	self.bgclr = panel.tooltipColor
end

-- Register the new control so that we can use it by doing vgui.Create("panel_example");
derma.DefineControl( "ashop_TooltipAvatar", "", PANEL, "DTooltip" )
--addons/ashop/lua/ashop/code/ui/panels/cl_dmenuoption.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels/cl_dtextentry.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels/cl_main.lua:
local PANEL = {}

local r = ashop.Config.round
local grad = Material('akulla/gradient-d')
local c1R, c1G, c1B = ashop.GetColor('Grad1_0'):Unpack()
local c2R, c2G, c2B = ashop.GetColor('Grad1_1'):Unpack()

function PANEL:Init()
    local sideMargin = ashop.GetSize(64)
    local marginVertical = ashop.GetSize(20)

    self.formAlpha = 0

    self.notifications = {}
    self:MakePopup()
    self:SetSize(ashop.GetSize(1536), ashop.GetSize(864))
    self:Center()
    self:SetMouseInputEnabled(true)
    self:SetKeyboardInputEnabled(true)

    ashop.ui.QuitOnClick(self)

    local navbar = vgui.Create("AShop_Navbar", self)
    navbar:Dock(TOP)
    navbar:SetTall(ashop.GetSize(80))
    navbar:DockMargin(sideMargin, 0, sideMargin, 0)

    local separator = vgui.Create("DPanel", self)
    separator:SetTall(2)
    separator:Dock(TOP)
    separator:SetBackgroundColor(ashop.GetColor("Separator"))

    local rightPartVerticalMargin = ashop.GetSize(20)
    local container = vgui.Create("EditablePanel", self)
    container:DockMargin(sideMargin, rightPartVerticalMargin, sideMargin, rightPartVerticalMargin)
    container:Dock(FILL)

    local t = {}

    for k, v in pairs(ashop.render) do
        table.insert(t, {v.name, function(p)
            local a = vgui.Create('AShop_ShopDisplay', p)
            a:Dock(FILL)
            a:Fill(k)
        end})
    end

    table.insert(t, {ashop.L('Actions'), function(p)
        local a = vgui.Create("AShop_ConfigDisplay", p)
        a:Dock(FILL)
        a:DockMargin(0, 0, 0, marginVertical)
        a:TableFill(ashop.UIUserOptions)
    end})

    if (ashop.Config.fullEdit and ashop.Config.fullEdit[LocalPlayer():GetUserGroup()]) or LocalPlayer():IsSuperAdmin() then
        table.insert(t, {ashop.L('Parameters'), function(p)
            local a = vgui.Create("AShop_ConfigDisplay", p)
            a:Dock(FILL)
            a:DockMargin(0, 0, 0, marginVertical)
            a:TableFill(ashop.UIOptions)
        end})
    end

    local pnls = navbar:Fill(t, container)
    local r = math.random(table.Count(ashop.render))

    pnls[r]:DoClick()
end

function PANEL:Paint(w, h)
    self.boxPoly = self.boxPoly or ashop.ui.RoundedBox(r, 0, 0, w, h)

    ashop.StartStencil()
        draw.NoTexture()
        surface.SetDrawColor(c1R, c1G, c1B)
        surface.DrawPoly(self.boxPoly)
    ashop.ReplaceStencil(1)
        surface.SetDrawColor(c2R, c2G, c2B)
        surface.SetMaterial(grad)
        surface.DrawTexturedRect(0, 0, w, h)
    ashop.EndStencil()
end

function PANEL:PushFocus(pnl)
    if !self.form then
        self.blockClicks = vgui.Create('EditablePanel', self)
        self.blockClicks:SetSize(self:GetSize())
        self.blockClicks:SetMouseInputEnabled(true)
        self.blockClicks:SetZPos(10)

        function self.blockClicks:Paint(w, h)
            draw.NoTexture()
            surface.SetDrawColor(0, 0, 0, math.ease.OutQuint(self:GetParent().formAlpha)*230)
            surface.DrawPoly(self:GetParent().boxPoly)

            render.ClearDepth(true)
        end

        self.form = util.Stack()
    else
        self.form:Top():SetMouseInputEnabled(false)
    end

    self.form:Push(pnl)
    pnl:SetZPos(self.form:Size() + 15)
end

function PANEL:PopFocus()
    self.form:Pop()

    if self.form:Size() == 0 then
        self.form = nil
        self.blockClicks:Remove()
    else
        self.form:Top():SetMouseInputEnabled(true)
    end
end

local ft = FrameTime
function PANEL:PaintOver()
    if self.form then
        if self.formAlpha < 220 then
            local b = ft()
            self.formAlpha = math.min(self.formAlpha + b, 1)
        end
    else
        self.formAlpha = 0
    end

    self.notifications = self.notifications or {}
    if !table.IsEmpty(self.notifications) then
        for k, v in ipairs(self.notifications) do
            v:PaintManual()
        end
    end
end

function PANEL:OnRemove()
    net.Start('ashop_openUI')
    net.SendToServer()
end

derma.DefineControl( "AShop_Main", "", PANEL, "EditablePanel" )
--addons/ashop/lua/ashop/code/ui/panels/cl_roundedavatar.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/cl_rankspromo.lua:
local function DrawInterior(editor, key, value, parent)
    local ranks = {}
    for k, v in pairs(CAMI.GetUsergroups()) do
        table.insert(ranks, {k, k})
    end

    local scroll = vgui.Create("DScrollPanel", editor)
    scroll:Dock(FILL)

    local nameContainer = vgui.Create('AShop_Entry', scroll)
    nameContainer:Dock(TOP)
    nameContainer:SetTall(0)
    nameContainer:IsRequired(true)
    nameContainer:SetInput(ashop.L('RankName'), 'SELECT', key, {
        selects = ranks,
        outputType = TYPE_STRING,
        required = true,
        maxLength = 18,
        minLength = 4
    })
    nameContainer.boxcolor = ashop.GetColor('Grad2_0')
    nameContainer:AddSeparator()

    function nameContainer:OnSave(value)
        if ashop.rankpromo[value] then
            ashop.DermaNotify(ashop.L('RankAlreadyExistWithThatName'), NOTIFY_ERROR, 4)
            return
        end
        parent:SetText(value)
        net.Start('ashop_RankPromotion_Edit')
            net.WriteString(key)

            net.WriteBool(true)
            net.WriteString(value)
        net.SendToServer()

        key = value
    end

    local idContainer = vgui.Create('AShop_Entry', scroll)
    idContainer:Dock(TOP)
    idContainer:SetTall(0)
    idContainer:IsRequired(true)
    idContainer:AddSeparator()

    idContainer:SetInput(ashop.L('PromotionAmount'), 'UInt7', value, {
        required = true
    })
    idContainer.boxcolor = ashop.GetColor('Grad2_0')

    function idContainer:OnSave(value)
        net.Start('ashop_RankPromotion_Edit')
            net.WriteString(key)

            net.WriteBool(false)
            net.WriteUInt(value, 7)
        net.SendToServer()
    end
end

ashop.registerParameter(ashop.L('RankPromo'), DrawInterior, function()
    local o = {}

    for k, v in pairs(ashop.rankpromo) do
        table.insert(o, {k, k, v})
    end

    return o
end, function()
    local ranks = {}
    for k, v in pairs(CAMI.GetUsergroups()) do
        table.insert(ranks, {k, k})
    end

    local a = vgui.Create('AShop_Form', ashop.menu)
    a:SetTitle(ashop.L('CreatePromoBasedOnRank'))
    a:CreateEntry(true, ashop.L('Rank'), 'SELECT', {
        selects = ranks,
        outputType = TYPE_STRING
    })
    a:CreateEntry(true, ashop.L('PromotionAmount'), "UInt7")

    function a:OnSend(rank, amt)
        if ashop.rankpromo[rank] then
            ashop.DermaNotify(ashop.L('RankAlreadyExistWithThatName'), NOTIFY_ERROR, 4)
            return
        end

        net.Start('ashop_RankPromotion_Create')
            net.WriteString(rank)
            net.WriteUInt(amt, 7)
        net.SendToServer()
    end
    a:Center()
end, function(but, settingButton, objectTarget, fullObject)
    function but:DoRightClick()
        CloseDermaMenus()
        local menu = vgui.Create( "AShop_DMenu", but )
        menu:AddOption(ashop.L('Remove'), function()
            ashop.ui.popAskbox(ashop.L('SureToDeletePromotionRank'), "", function()
                net.Start('ashop_RankPromotion_Delete')
                    net.WriteString(fullObject[1])
                net.SendToServer()
            end)
        end)

        menu:Open()
    end
end)
--addons/ashop/lua/ashop/code/ui/panels_settings/cl_rarity.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_fortnitebag.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_gmtower.lua:
ashop.RegisterPremade("GM Tower Accessories", {
        requireWorkshop = "148215278",

        objectTypes = {
            {
                "Wearables",
                {"ValveBiped.Bip01_Head1"},
                "Hat"
            },

            {
                "Wearables",
                {"ValveBiped.Bip01_Head1"},
                "Facemask"
            },

            {
                "Wearables",
                {"ValveBiped.Bip01_Neck1"},
                "Neck"
            },

            {
                "Wearables",
                {"ValveBiped.Bip01_Head1"},
                "Glasses"
            },

            {
                "Wearables",
                {"ValveBiped.Bip01_Spine2"},
                "Back"
            }
        },

        items = {
        {
            name = "Billy Hatcher",
            rendering = 1,
            metadata = {
                [1] = 'models/lordvipes/billyhatcherhat/billyhatcherhat.mdl',
                [3] = Vector(2.0625, -0.90625, 0.71875),
                [4] = Angle(-0.25, -75.1875, -90.40625),
                [12] = 250,
                [13] = Vector(200, 131, 200)
            },
        },

        {
            name = "Black Mage Hat",
            rendering = 1,
            metadata = {
                [1] = 'models/lordvipes/blackmage/blackmage_hat.mdl',
                [3] = Vector(-2.375, -3.0625, -0.0625),
                [4] = Angle(0.25, -62.6875, -90.40625),
                [7] = Vector(0.1875, 0.1875, 0.1875),
            },
        },

        {
            name = "Black Mage Cap",
            rendering = 3,
            metadata = {
                [1] = 'models/lordvipes/blackmage/blackmage_cape.mdl',
                [3] = Vector(-17.5, -20.96875, -0.0625),
                [4] = Angle(0.25, -42.0625, -89.84375),
                [7] = Vector(0.78125, 0.78125, 0.78125),
                [10] = false,
                [11] = 2,
            },
        },

        {
            name = "Cubone Skull",
            rendering = 1,
            metadata = {
                [1] = 'models/lordvipes/cuboneskull/cuboneskull.mdl',
                [3] = Vector(-1.0625, -2.21875, -0.0625),
                [4] = Angle(-0.25, -75.1875, -90.40625),
            },
        },

        {
            name = "Daft Punk",
            rendering = 2,
            metadata = {
                [1] = 'models/lordvipes/daftpunk/thomas.mdl',
                [3] = Vector(3.375, -0.5625, -0.0625),
                [4] = Angle(-0.25, -75.1875, -90.40625),
            },
        },

        {
            name = "General Pepper Hat",
            rendering = 1,
            metadata = {
                [1] = 'models/lordvipes/generalpepperhat/generalpepperhat.mdl',
                [3] = Vector(3.0625, 0.40625, 0.40625),
                [4] = Angle(-0.25, -75.1875, -90.40625),
                [7] = Vector(0.78125, 0.78125, 0.78125),
            },
        },

        {
            name = "Keaton Mask",
            rendering = 2,
            metadata = {
                [1] = 'models/lordvipes/keatonmask/keatonmask.mdl',
                [3] = Vector(2.71875, -0.21875, 0.40625),
                [4] = Angle(-0.25, -70.3125, -90.40625),
                [7] = Vector(0.78125, 0.78125, 0.78125),
            },
        },

        {
            name = "Klonoa Hat",
            rendering = 1,
            metadata = {
                [1] = 'models/lordvipes/klonoahat/klonoahat.mdl',
                [3] = Vector(2.0625, -0.90625, 0.0625),
                [4] = Angle(-0.25, -70.3125, -90.40625),
                [7] = Vector(0.78125, 0.78125, 0.78125),
            },
        },

        {
            name = "Luigi Hat",
            rendering = 1,
            metadata = {
                [1] = 'models/lordvipes/luigihat/luigihat.mdl',
                [3] = Vector(0.5625, 1.21875, 0.0625),
                [4] = Angle(-0.25, -109.9375, -90.40625),
                [7] = Vector(0.78125, 0.78125, 0.78125),
                [12] = 250,
                [13] = Vector(200, 90, 176)
            },
        },

        {
            name = "Majora Mask",
            rendering = 2,
            metadata = {
                [1] = 'models/lordvipes/majoramask/majoramask.mdl',
                [3] = Vector(-2.71875, -6.21875, 0.0625),
                [4] = Angle(-0.25, -74.65625, -90.40625),
                [7] = Vector(0.78125, 0.78125, 0.78125),
                [12] = 200,
                [13] = Vector(200, 105, 200)
            },
        },

        {
            name = "Makar Mask",
            rendering = 2,
            metadata = {
                [1] = 'models/lordvipes/makarmask/makarmask.mdl',
                [3] = Vector(-7.6875, -1.90625, 0.40625),
                [4] = Angle(-0.25, -89.84375, -90.40625),
                [7] = Vector(1.96875, 1.96875, 2.4375),
            },
        },

        {
            name = "Mario Hat",
            rendering = 1,
            metadata = {
                [1] = 'models/lordvipes/mariohat/mariohat.mdl',
                [3] = Vector(1.90625, 0.71875, 0.0625),
                [4] = Angle(-0.25, -90.40625, -90.40625),
                [7] = Vector(0.78125, 0.78125, 0.78125),
            },
        },

        {
            name = "Peach Crown",
            rendering = 1,
            metadata = {
                [1] = 'models/lordvipes/peachcrown/peachcrown.mdl',
                [3] = Vector(5.03125, -1.21875, -0.0625),
                [4] = Angle(-0.25, -73.03125, -90.40625),
                [7] = Vector(0.78125, 0.78125, 0.78125),
            },
        },

        {
            name = "Reds Hat",
            rendering = 1,
            metadata = {
                [1] = 'models/lordvipes/redshat/redshat.mdl',
                [3] = Vector(2.875, 0.71875, -0.21875),
                [4] = Angle(-0.25, -73.03125, -90.40625),
                [7] = Vector(0.78125, 0.78125, 0.78125),
            },
        },

        {
            name = "Serv Bot Head",
            rendering = 2,
            metadata = {
                [1] = 'models/lordvipes/servbothead/servbothead.mdl',
                [3] = Vector(2.875, 0.71875, -0.21875),
                [4] = Angle(-0.25, -73.03125, -90.40625),
                [7] = Vector(0.78125, 0.78125, 0.78125),
            },
        },

        {
            name = "Toad Hat",
            rendering = 1,
            metadata = {
                [1] = 'models/lordvipes/toadhat/toadhat.mdl',
                [3] = Vector(-0.0625, -0.21875, -0.21875),
                [4] = Angle(-0.25, -92.03125, -90.40625),
                [7] = Vector(0.4375, 0.4375, 0.4375),
                [12] = 500,
                [13] = Vector(200, 158, 200)
            },
        },

        {
            name = "Viewtiful Joe Helmet",
            rendering = 2,
            metadata = {
                [1] = 'models/lordvipes/viewtifuljoehelmet/viewtifuljoehelmet.mdl',
                [3] = Vector(2.21875, -0.21875, -0.21875),
                [4] = Angle(-0.25, -83.34375, -90.40625),
                [7] = Vector(0.65625, 0.65625, 0.65625),
                [12] = 300,
                [13] = Vector(200, 107, 41)
            },
        },

        {
            name = "Viewtiful Joe Helmet",
            rendering = 2,
            metadata = {
                [1] = 'models/lordvipes/viewtifuljoehelmet/viewtifuljoehelmet.mdl',
                [3] = Vector(2.21875, -0.21875, -0.21875),
                [4] = Angle(-0.25, -83.34375, -90.40625),
                [7] = Vector(0.65625, 0.65625, 0.65625),
                [12] = 300,
                [13] = Vector(200, 107, 41)
            },
        },

        {
            name = "3D Glasses",
            rendering = 4,
            metadata = {
                [1] = 'models/gmod_tower/3dglasses.mdl',
                [3] = Vector(3.0625, -1.71875, -0.21875),
                [4] = Angle(4.0625, -80.0625, -89.84375),
            },
        },

        {
            name = "Afro",
            rendering = 1,
            metadata = {
                [1] = 'models/gmod_tower/afro.mdl',
                [3] = Vector(5.375, 1.21875, -0.21875),
                [4] = Angle(0.25, -80.0625, -89.84375),
                [12] = 250,
                [13] = Vector(0, 31, 59)
            },
        },

        {
            name = "Aviators",
            rendering = 4,
            metadata = {
                [1] = 'models/gmod_tower/aviators.mdl',
                [3] = Vector(2.5625, -1.40625, 0.0625),
                [4] = Angle(0.25, -80.0625, -89.84375),
                [12] = 110,
                [13] = Vector(200, 119, 96)
            },
        },
    },

    {
        name = "Balloon Icorn",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/balloonicorn_nojiggle.mdl',
            [3] = Vector(17.15625, 2.375, 0.40625),
            [4] = Angle(89.84375, -79.53125, -0.25),
            [7] = Vector(0.78125, 0.78125, 0.78125),
        },
    },

    {
        name = "Baseball Cap",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/baseballcap.mdl',
            [3] = Vector(5.21875, 1.0625, -0.0625),
            [4] = Angle(0, -66.5, -89.84375),
            [7] = Vector(1.09375, 1.09375, 1),
        },
    },

    {
        name = "Batman Mask",
        rendering = 2,
        metadata = {
            [1] = 'models/gmod_tower/batmanmask.mdl',
            [3] = Vector(2.5625, -1.21875, -0.0625),
        },
    },

    {
        name = "Bomberman",
        rendering = 2,
        metadata = {
            [1] = 'models/gmod_tower/bombermanhelmet.mdl',
            [3] = Vector(2.5625, -1.21875, -0.0625),
            [4] = Angle(0, -75.1875, -89.84375),
        },
    },

    {
        name = "Cat ears",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/catears.mdl',
            [3] = Vector(3.71875, -0.5625, -0.0625),
            [4] = Angle(0, -83.875, -89.84375),
        },
    },

    {
        name = "Drink Cap",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/drinkcap.mdl',
            [3] = Vector(3.71875, 0.0625, -0.0625),
            [4] = Angle(0, -77.375, -89.84375),
            [7] = Vector(1, 1.03125, 1),
        },
    },

    {
        name = "Fairy Wings",
        rendering = 5,
        metadata = {
            [1] = 'models/gmod_tower/fairywings.mdl',
            [3] = Vector(4.875, 3.875, -0.3125),
            [4] = Angle(90, 5.15625, -0.25),
        },
    },

    {
        name = "Fedora Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/fedorahat.mdl',
            [3] = Vector(6.03125, 1.0625, -0.0625),
            [4] = Angle(0.25, -69.75, -89.84375),
        },
    },

    {
        name = "Fedora Hat 2",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/fedorahat.mdl',
            [3] = Vector(6.03125, 1.0625, -0.0625),
            [4] = Angle(0.25, -69.75, -89.84375),
            [11] = 1,
        },
    },

    {
        name = "Fedora",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/fedora.mdl',
            [3] = Vector(6.375, 0.0625, 0.0625),
            [4] = Angle(180, -70.3125, -90.40625),
            [10] = false,
            [7] = Vector(0.625, 0.625, 0.625),
        },
    },

    {
        name = "Fedora 2",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/fedora.mdl',
            [3] = Vector(6.375, 0.0625, 0.0625),
            [4] = Angle(180, -70.3125, -90.40625),
            [10] = false,
            [7] = Vector(0.625, 0.625, 0.625),
            [11] = 1,
        },
    },

    {
        name = "Fedora 3",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/fedora.mdl',
            [3] = Vector(6.375, 0.0625, 0.0625),
            [4] = Angle(180, -70.3125, -90.40625),
            [10] = false,
            [7] = Vector(0.625, 0.625, 0.625),
            [11] = 2,
        },
    },

    {
        name = "Fedora 4",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/fedora.mdl',
            [3] = Vector(6.375, 0.0625, 0.0625),
            [4] = Angle(180, -70.3125, -90.40625),
            [10] = false,
            [7] = Vector(0.625, 0.625, 0.625),
            [11] = 3,
        },
    },

    {
        name = "Jason Mask",
        rendering = 2,
        metadata = {
            [1] = 'models/gmod_tower/halloween_jasonmask.mdl',
            [3] = Vector(-4.375, -1.21875, -0.40625),
            [4] = Angle(0.25, -69.75, -89.84375),
        },
    },

    {
        name = "Jason Mask",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/halloween_jasonmask.mdl',
            [3] = Vector(-4.375, -1.21875, -0.40625),
            [4] = Angle(0.25, -69.75, -89.84375),
        },
    },

    {
        name = "Pumpkin Mask",
        rendering = 2,
        metadata = {
            [1] = 'models/gmod_tower/halloween_pumpkinhat.mdl',
            [3] = Vector(-4.375, -1.40625, -0.21875),
            [4] = Angle(-0.25, -75.1875, -89.84375),
            [7] = Vector(0.8125, 0.8125, 0.8125),
        },
    },

    {
        name = "Head Crab",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/headcrabhat.mdl',
            [3] = Vector(7.875, 0.0625, -0.21875),
            [4] = Angle(-0.25, -67.03125, -89.84375),
            [7] = Vector(0.8125, 0.8125, 0.8125),
        },
    },

    {
        name = "Headphones",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/headphones.mdl',
            [3] = Vector(3.375, 0.0625, -0.21875),
            [4] = Angle(-0.25, -74.65625, -89.84375),
            [7] = Vector(0.8125, 0.8125, 0.8125),
        },
    },

    {
        name = "Jetpack",
        rendering = 5,
        metadata = {
            [1] = 'models/gmod_tower/jetpack.mdl',
            [3] = Vector(2.21875, 3.21875, -0.3125),
            [4] = Angle(0.25, 89.84375, 89.84375),
        },
    },

    {
        name = "KFC Bucket",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/kfcbucket.mdl',
            [3] = Vector(3.71875, 0.0625, -0.21875),
            [4] = Angle(-0.25, -58.90625, -89.84375),
            [7] = Vector(0.75, 0.75, 0.75),
        },
    },

    {
        name = "King Boos Crown",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/king_boos_crown.mdl',
            [3] = Vector(6.375, 0.40625, -0.21875),
            [4] = Angle(-0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Kleiner Glasses",
        rendering = 4,
        metadata = {
            [1] = 'models/gmod_tower/klienerglasses.mdl',
            [3] = Vector(2.5625, -1.40625, 0.0625),
            [4] = Angle(0.25, -80.0625, -89.84375),
        },
    },

    {
        name = "Lego Head",
        rendering = 2,
        metadata = {
            [1] = 'models/gmod_tower/legohead.mdl',
            [3] = Vector(2.875, -0.0625, 0.0625),
            [4] = Angle(-0.25, -82.25, -89.84375),
        },
    },

    {
        name = "Link Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/linkhat.mdl',
            [3] = Vector(2.875, -0.0625, 0.0625),
            [4] = Angle(-0.25, -90.40625, -89.84375),
        },
    },

    {
        name = "Metaknight Mask",
        rendering = 2,
        metadata = {
            [1] = 'models/gmod_tower/metaknight_mask.mdl',
            [3] = Vector(-0.90625, -5.375, 0.0625),
            [4] = Angle(-0.25, -81.15625, -89.84375),
            [7] = Vector(1.09375, 1.09375, 1.09375),
        },
    },

    {
        name = "Midna Hat",
        rendering = 2,
        metadata = {
            [1] = 'models/gmod_tower/midnahat.mdl',
            [3] = Vector(4.0625, 0.71875, 0.0625),
            [4] = Angle(-0.25, -89.84375, -89.84375),
        },
    },

    {
        name = "No Face",
        rendering = 2,
        metadata = {
            [1] = 'models/gmod_tower/noface.mdl',
            [3] = Vector(2.375, -5.03125, 0.0625),
            [4] = Angle(-0.25, -75.71875, -89.84375),
        },
    },

    {
        name = "Party Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/partyhat.mdl',
            [3] = Vector(6.21875, -0.21875, 0.40625),
            [4] = Angle(-0.25, -74.65625, -98),
        },
    },

    {
        name = "Pilgrim Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/pilgrimhat.mdl',
            [3] = Vector(4.5625, 0.21875, 0.0625),
            [4] = Angle(-0.25, -74.65625, -90.40625),
        },
    },

    {
        name = "Rubiks Cube",
        rendering = 2,
        metadata = {
            [1] = 'models/gmod_tower/rubikscube.mdl',
            [3] = Vector(4.5625, 0.21875, 0.0625),
            [4] = Angle(-0.25, -74.65625, -90.40625),
            [7] = Vector(0.71875, 0.71875, 0.71875),
        },
    },

    {
        name = "Samus Helmet",
        rendering = 2,
        metadata = {
            [1] = 'models/gmod_tower/samushelmet.mdl',
            [3] = Vector(2.875, -0.0625, 0.0625),
            [4] = Angle(-0.25, -75, -89.84375),
        },
    },

    {
        name = "Santa Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/santahat.mdl',
            [3] = Vector(5.21875, 0.21875, 0.0625),
            [4] = Angle(-0.25, -75.1875, -74.65625),
        },
    },

    {
        name = "Seuss Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/seusshat.mdl',
            [3] = Vector(4.0625, -0.21875, 0.0625),
            [4] = Angle(-0.25, -74.65625, -79.53125),
            [7] = Vector(0.9375, 0.9375, 0.9375),
        },
    },

    {
        name = "Snowboard Goggles",
        rendering = 4,
        metadata = {
            [1] = 'models/gmod_tower/snowboardgoggles.mdl',
            [3] = Vector(2.71875, 1.21875, -0.21875),
            [4] = Angle(0.25, -80.0625, -89.84375),
            [7] = Vector(1.09375, 1.09375, 1.15625),
        },
    },

    {
        name = "Sombrero",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/sombrero.mdl',
            [3] = Vector(5.71875, 0.21875, -0.125),
            [4] = Angle(0, -75.1875, -90),
            [7] = Vector(0.75, 0.75, 0.8125),
        },
    },

    {
        name = "Star Glasses",
        rendering = 4,
        metadata = {
            [1] = 'models/gmod_tower/starglasses.mdl',
            [3] = Vector(2.875, -1.5625, -0.0625),
            [4] = Angle(0.25, -80.0625, -89.84375),
        },
    },

    {
        name = "Team Rocket",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/teamrockethat.mdl',
            [3] = Vector(3.875, 1.40625, -0.21875),
            [4] = Angle(-0.25, -74.09375, -89.84375),
            [7] = Vector(1, 1.0625, 1.02),
        },
    },

    {
        name = "Toeto Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/toetohat.mdl',
            [3] = Vector(4.875, 0.5625, -0.21875),
            [4] = Angle(-0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Top Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/tophat.mdl',
            [3] = Vector(3.375, 0.0625, -0.21875),
            [4] = Angle(-0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Toro Mask",
        rendering = 2,
        metadata = {
            [1] = 'models/gmod_tower/toromask.mdl',
            [3] = Vector(2.375, 1.21875, -0.21875),
            [4] = Angle(-0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Turkey",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/turkey.mdl',
            [3] = Vector(4.21875, -0.0625, 0.0625),
            [4] = Angle(-0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Witch Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/gmod_tower/witchhat.mdl',
            [3] = Vector(5.03125, -0.0625, 0.0625),
            [4] = Angle(-0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Tail Bunny",
        rendering = 5,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/accessories/tail_bunny.mdl',
            [3] = Vector(-10.03125, -2.0625, -3.21875),
            [4] = Angle(0.25, 89.84375, 89.84375),
            [11] = 1,
        },
    },

    {
        name = "Mustache",
        rendering = 2,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/accessories/mustache.mdl',
            [3] = Vector(1.40625, -4.875, -0.0625),
            [4] = Angle(-0.25, -75.1875, -90.40625),
        },
    },

    {
        name = "Glasses 01",
        rendering = 4,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/accessories/glasses01.mdl',
            [3] = Vector(2.875, -1.5625, 0.0625),
            [4] = Angle(-0.25, -75.1875, -90.40625),
        },
    },

    {
        name = "Glasses 02",
        rendering = 4,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/accessories/glasses03.mdl',
            [3] = Vector(2.375, -2.0625, 0.0625),
            [4] = Angle(-0.25, -75.1875, -90.40625),
        },
    },

    {
        name = "Duck Tube",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/accessories/duck_tube.mdl',
            [3] = Vector(6.375, 0.40625, -0.0625),
            [4] = Angle(-0.25, -75.1875, -90.40625),
            [7] = Vector(0.8125, 0.8125, 0.8125),
        },
    },

    {
        name = "Bunny ears",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/bunny_ears.mdl',
            [3] = Vector(3.71875, -0.5625, -0.0625),
            [4] = Angle(0.25, -90.40625, -89.84375),
        },
    },

    {
        name = "Cowboy Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/cowboyhat.mdl',
            [3] = Vector(7.1875, 1.71875, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
            [7] = Vector(0.75, 0.75, 0.75),
        },
    },

    {
        name = "Deadmau 5",
        rendering = 2,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/deadmau5.mdl',
            [3] = Vector(3.21875, -1.40625, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
            [7] = Vector(0.75, 0.75, 0.75),
        },
    },

    {
        name = "Dev Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/devhat.mdl',
            [3] = Vector(5.375, -0.0625, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Frog Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/frog_hat.mdl',
            [3] = Vector(6.375, 1.90625, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Cat Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/cat_hat.mdl',
            [3] = Vector(6.375, 1.90625, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Heartband",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/heartband.mdl',
            [3] = Vector(1.71875, -0.5625, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Heartband 2",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/heartband.mdl',
            [3] = Vector(1.71875, -0.5625, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
            [11] = 1
        },
    },

    {
        name = "Maid Headband",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/maid_headband.mdl',
            [3] = Vector(2.21875, -2.875, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
            [7] = Vector(0.96875, 0.625, 1),
        },
    },

    {
        name = "Pumpkin",
        rendering = 2,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/pumpkin.mdl',
            [3] = Vector(0.0625, 0.0625, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Starband",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/starband.mdl',
            [3] = Vector(1.71875, -0.5625, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
            [7] = Vector(1, 1, 1),
        },
    },

    {
        name = "Starband 2",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/starband.mdl',
            [3] = Vector(1.71875, -0.5625, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
            [7] = Vector(1, 1, 1),
            [11] = 1
        },
    },

    {
        name = "Straw Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/strawhat.mdl',
            [3] = Vector(4.6, -0.0625, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Sun Hat",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/sunhat.mdl',
            [3] = Vector(1.21875, 1.90625, -0.0625),
            [4] = Angle(0.25, -75.1875, -89.84375),
        },
    },

    {
        name = "Top Hat 2",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/tophat02.mdl',
            [3] = Vector(8.1875, 0.0625, -0.71875),
            [4] = Angle(0.25, -74.65625, -89.84375),
        },
    },

    {
        name = "ZHat",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/zhat.mdl',
            [3] = Vector(3.0625, -0.0625, 0.0625),
            [4] = Angle(0.25, -74.65625, -89.84375),
            [11] = 0,
            [7] = Vector(0.84375, 0.84375, 0.84375),
        },
    },

    {
        name = "ZHat 2",
        rendering = 1,
        metadata = {
            [1] = 'models/captainbigbutt/skeyler/hats/zhat.mdl',
            [3] = Vector(3.0625, -0.0625, 0.0625),
            [4] = Angle(0.25, -74.65625, -89.84375),
            [11] = 1,
            [7] = Vector(0.84375, 0.84375, 0.84375),
        },
    },
})
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_trails.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_urafinisher.lua:
ashop.RegisterPremade("Uranium Finishers", {
    requireWorkshop = "",

    objectTypes = {
        {
            "Finishers",
        }
    },

    items = {
        {
            metadata = {"menacing", "particles/menacing.pcf"},
            name = "Menacing",
            rendering = 1
        },

        {
            metadata = {"ssb4_ring_out_blue", "particles/ssb4u_ring_out_explosion.pcf"},
            name = "Ring Out Blue",
            rendering = 1
        },

        {
            metadata = {"ssb4_ring_out_red", "particles/ssb4u_ring_out_explosion.pcf"},
            name = "Ring Out Red",
            rendering = 1
        },

        {
            metadata = {"ssb4_ring_out_green", "particles/ssb4u_ring_out_explosion.pcf"},
            name = "Ring Out Green",
            rendering = 1
        },

        {
            metadata = {"ssb4_ring_out_yellow", "particles/ssb4u_ring_out_explosion.pcf"},
            name = "Ring Out Yellow",
            rendering = 1
        },

        {
            metadata = {"sleep", "particles/sleeping.pcf"},
            name = "Sleeping",
            rendering = 1
        },

        {
            metadata = {"kh_key_impact_stars", "particles/kingdomhearts.pcf", true, nil, nil, 15, 0.2, true},
            name = "Stars",
            rendering = 1
        },

        {
            metadata = {"umbra_succumb", "particles/umbra_fx.pcf", true, nil, nil, nil, nil, true},
            name = "Tentacules",
            rendering = 1
        },

        {
            metadata = {"_leech_kuva", "particles/underscore_fx.pcf", true, Vector(0, 0, 10), nil, nil, nil, true},
            name = "Pixel Blow",
            rendering = 1
        },

        {
            metadata = {"_ghost_fireblast", "particles/underscore_fx.pcf", true, Vector(0, 0, 10), nil, nil, nil, true},
            name = "Blue Smoke",
            rendering = 1
        },

        {
            metadata = {3},
            name = "Ignite",
            rendering = 1
        },

        {
            metadata = {4},
            name = "Electric Dissolve - Small",
            rendering = 1
        },

        {
            metadata = {5},
            name = "Electric Dissolve - Big",
            rendering = 1
        },

        {
            metadata = {6},
            name = "Electric Dissolve - Love",
            rendering = 1
        },

        {
            metadata = {7},
            name = "Hot dog",
            rendering = 1
        },

        {
            metadata = {8},
            name = "Big Head",
            rendering = 1
        },

        {
            metadata = {9},
            name = "Rock",
            rendering = 1
        },

        {
            metadata = {10},
            name = "Puppet",
            rendering = 1
        },

        {
            metadata = {11},
            name = "White Halo",
            rendering = 1
        },

        {
            metadata = {12},
            name = "Red Halo",
            rendering = 1
        },

        {
            metadata = {13},
            name = "Blue Halo",
            rendering = 1
        },

        {
            metadata = {14},
            name = "Yellow Halo",
            rendering = 1
        },

        {
            metadata = {15},
            name = "Green Halo",
            rendering = 1
        },

        {
            metadata = {16},
            name = "Purple Halo",
            rendering = 1
        },

        {
            metadata = {17},
            name = "Ghost",
            rendering = 1
        },

        {
            metadata = {18},
            name = "Glitch",
            rendering = 1
        },

        {
            metadata = {19},
            name = "Cubemap",
            rendering = 1
        },

        {
            metadata = {20},
            name = "Rip Bozo",
            rendering = 1
        },
    }
})
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_xyzweaponskin.lua:
ashop.RegisterPremade("XYZ Weapon Skins", {
    requireWorkshop = "",

    objectTypes = {
        {
            "WeaponSkins",
            // {} metadatas,
        }
    },

    items = {
        {
            metadata = {"xyz/skins/camo_purple"},
            name = "Purple",
            rendering = 1
        },

        {
            metadata = {"xyz/skins/animal_print"},
            name = "Animal Print",
            rendering = 1
        },

        {
            name = "Carbon",
            metadata = {"xyz/skins/carbon"},
            rendering = 1
        },

        {
            name = "Blackice",
            metadata = {"xyz/skins/blackice"},
            rendering = 1
        },

        {
            name = "Turtle Shell",
            metadata = {"xyz/skins/turtle_shell"},
            rendering = 1
        },

        {
            name = "Sunset",
            metadata = {"xyz/skins/sunset"},
            rendering = 1
        },

        {
            name = "Emoji",
            metadata = {"xyz/skins/emoji"},
            rendering = 1
        },

        {
            name = "Bloodbath",
            metadata = {"xyz/skins/bloodbath"},
            rendering = 1
        },

        {
            name = "Pear",
            metadata = {"xyz/skins/pear"},
            rendering = 1
        },

        {
            name = "Anarchy",
            metadata = {"xyz/skins/anarchy"},
            rendering = 1
        },

        {
            name = "Green Slime",
            metadata = {"xyz/skins/green_slime"},
            rendering = 1
        },

        {
            name = "Burger",
            metadata = {"xyz/skins/burger"},
            rendering = 1
        },

        {
            name = "Lost Souls",
            metadata = {"xyz/skins/lostsouls"},
            rendering = 1
        },

        {
            name = "Fiore Souls",
            metadata = {"xyz/skins/firesouls"},
            rendering = 1
        },

        {
            name = "Tokyo",
            metadata = {"xyz/skins/tokyo"},
            rendering = 1
        },

        {
            name = "Paintball",
            metadata = {"xyz/skins/paintball"},
            rendering = 1
        },

        {
            name = "Neon Charge",
            metadata = {"xyz/skins/neoncharge"},
            rendering = 1
        },

        {
            name = "Anime Sin",
            metadata = {"xyz/skins/anime_sin"},
            rendering = 1
        },

        {
            name = "Snacks",
            metadata = {"xyz/skins/snacks"},
            rendering = 1
        },

        {
            name = "Among Us",
            metadata = {"xyz/skins/amongus"},
            rendering = 1
        },
            
        {
            name = "Matrix",
            metadata = {"xyz/skins/matrix"},
            rendering = 1
        },

        {
            name = "Orange Loop",
            metadata = {"xyz/skins/orange_triangle"},
            rendering = 1
        },

        {
            name = "Crazy Shapes",
            metadata = {"xyz/skins/shapes"},
            rendering = 1
        },

        {
            name = "Lego",
            metadata = {"xyz/skins/lego"},
            rendering = 1
        },

        {
            name = "Dirt",
            metadata = {"xyz/skins/mcdirt"},
            rendering = 1
        },

        {
            name = "Plasma",
            metadata = {"xyz/skins/plasma"},
            rendering = 1
        },
    }
})
--lua/autorun/autorun.lua:
player_manager.AddValidModel( "Sanitar Cohrt", "models/player/Sanitar_Cohrt.mdl" );
list.Set( "PlayerOptionsModel", "Sanitar Cohrt", "models/player/Sanitar_Cohrt.mdl" );

player_manager.AddValidModel( "Sanitar 02", "models/player/Sanitar_Male_02.mdl" );
list.Set( "PlayerOptionsModel", "Sanitar 02", "models/player/Sanitar_Male_02.mdl" );

player_manager.AddValidModel( "Sanitar 04", "models/player/Sanitar_Male_04.mdl" );
list.Set( "PlayerOptionsModel", "Sanitar 04", "models/player/Sanitar_Male_04.mdl" );

player_manager.AddValidModel( "Sanitar 05", "models/player/Sanitar_Male_05.mdl" );
list.Set( "PlayerOptionsModel", "Sanitar 05", "models/player/Sanitar_Male_05.mdl" );

player_manager.AddValidModel( "Sanitar 06", "models/player/Sanitar_Male_06.mdl" );
list.Set( "PlayerOptionsModel", "Sanitar 06", "models/player/Sanitar_Male_06.mdl" );

player_manager.AddValidModel( "Sanitar 07", "models/player/Sanitar_Male_07.mdl" );
list.Set( "PlayerOptionsModel", "Sanitar 07", "models/player/Sanitar_Male_07.mdl" );

player_manager.AddValidModel( "Sanitar 08", "models/player/Sanitar_Male_08.mdl" );
list.Set( "PlayerOptionsModel", "Sanitar 08", "models/player/Sanitar_Male_08.mdl" );

player_manager.AddValidModel( "Sanitar 09", "models/player/Sanitar_Male_09.mdl" );
list.Set( "PlayerOptionsModel", "Sanitar 09", "models/player/Sanitar_Male_09.mdl" );


--addons/safezone-sh/lua/safezones/cl_interface.lua:
return gluapack()()
--addons/bodygroupr/lua/bodyman/arizard_derma.lua:


local fontstandard = "Trebuchet24"

-- collection of generic derma panels etc
-- a drop in solution for most of my addons, so that i can get nice UI up and running faster
-- yes, you have to ask me before using this stuff

surface.CreateFont("arizard_derma_Large", {
	font = fontstandard,
	size = 32,
	antialias = true,
	weight = 800
})
surface.CreateFont("arizard_derma_Medium", {
	font = fontstandard,
	size = 24,
	antialias = true,
	weight = 800
})

surface.CreateFont("arizard_derma_Small", {
	font = fontstandard,
	size = 20,
	antialias = true,
	weight = 800
})
surface.CreateFont("arizard_derma_Tiny", {
	font = fontstandard,
	size = 12,
	antialias = true,
	weight = 600
})

local hexvals = {
    ["0"] = 0,
    ["1"] = 1,
    ["2"] = 2,
    ["3"] = 3,
    ["4"] = 4,
    ["5"] = 5,
    ["6"] = 6,
    ["7"] = 7,
    ["8"] = 8,
    ["9"] = 9,
    ["A"] = 10,
    ["B"] = 11,
    ["C"] = 12,
    ["D"] = 13,
    ["E"] = 14,
    ["F"] = 15,
}

function Hex( hex ) -- utility functions

	hex = string.upper( hex )
    hex = string.Split( hex, "" )

    local num = 0

    for i = 1, #hex do
        local h = hex[i]
        local v = hexvals[h]

        v = v * (16^(#hex-i))
        num = num + v
    end

    return num

end

function HexColor(hex, alpha)

    if string.sub(hex, 1, 1) ~= "#" then return Color(255,255,255,255) end

    hex = string.Replace(hex, "#", "") -- remove #

    local ct = {}
    local len = string.len( hex )
    if len ~= 3 and len ~= 6 then return Color(255,255,255,255) end

    for i=1,3 do
        local l2 = len/3
        local m = 1
        ct[i] = Hex( string.sub(hex, l2*i -m, l2*i) )
    end
    --PrintTable(ct)
    return Color( ct[1], ct[2], ct[3], alpha or 255)

end

local COLORS = {}
COLORS.Bad = HexColor("#e74c3c")
COLORS.BadDark = HexColor("#c0392b")
COLORS.Good = HexColor("#2ecc71")
COLORS.GoodDark = HexColor("#27ae60")
COLORS.NeutralHigh = HexColor("#ecf0f1")
COLORS.NeutralMed = HexColor("#bdc3c7")
COLORS.NeutralLow = HexColor("#95a5a6")
COLORS.NeutralDark = HexColor("#7f8c8d")
COLORS.Turq = HexColor("#e67e22")
COLORS.TurqDark = HexColor("#d35400")

function ArizardShadowText( text, font, x, y, col, ax, ay , d)
	draw.DrawText( text, font, x+d, y+d, Color(0,0,0,col.a), ax, ay )
	draw.DrawText( text, font, x, y, col, ax, ay)
end

local blur = Material("pp/blurscreen")
local function ArizardDrawBlur(panel, amount)

	local x, y = panel:LocalToScreen(0,0)
	local w, h = ScrW(), ScrH()

	surface.SetDrawColor(255,255,255)
	surface.SetMaterial(blur)

	for i = 1, 3 do -- 3 pass blur i guess?
		blur:SetFloat("$blur", (i/3) * (amount or 7))
		blur:Recompute()

		render.UpdateScreenEffectTexture()

		surface.DrawTexturedRect(x*-1,y*-1,w,h)
	end
end


local MAIN = {}

function MAIN:OnClose() end-- stub

function MAIN:Init()  
	
	self.bgalpha = 255
	self.bgcolor = COLORS.NeutralHigh
	self.fgcolor = COLORS.NeutralDark
	self.title = "Arizard Window"
   
	self.cb = vgui.Create("DButton", self)      
	function self.cb:DoClick()
		self:GetParent():OnClose()
		self:GetParent():Close()
	end
	function self.cb:PaintOver(w,h)
		draw.RoundedBox(4,0,0,w,h, COLORS.Bad)
		draw.DrawText("✖","arizard_derma_Medium",w/2,-3,COLORS.NeutralHigh, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end	

	self.inner = vgui.Create("DPanel", self)
	function self.inner:Paint() end

	self:SetSize(384,512+28+8)
	self:Center()
	self:MakePopup()
	self:ShowCloseButton( false )
	self.lblTitle:SetVisible(false)

	

end

function MAIN:PerformLayout()

	
	self.cb:SetSize(20,20)
	self.cb:SetPos(self:GetWide()-20-4, 4)

	self.inner:SetSize( self:GetWide(), self:GetTall() - 28 - 8 )
	self.inner:SetPos(0,28)


end

function MAIN:Paint(w,h)
	local inner = {x = 0,y = 28, w = self:GetWide(), h = self:GetTall() - 28 - 8}

	surface.SetDrawColor(255,255,255, 0)
	ArizardDrawBlur(self, 4)

	local bgcol = self:GetSecondaryColor()
	local fgcol = self:GetPrimaryColor()

	surface.SetDrawColor( bgcol )
	surface.DrawRect(inner.x, inner.y, inner.w, inner.h)

	surface.SetDrawColor( fgcol)
	draw.RoundedBox(4,0,0,w,16, fgcol)
	surface.DrawRect(0,8,w,20)

	draw.RoundedBox(4,0,h-8,w,8, fgcol)
	surface.DrawRect(0,h-8,w,4)

	--title
	ArizardShadowText( self.title ,"arizard_derma_Small",w/2,4,Color(255,255,255), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP, 1)
end

function MAIN:SetPrimaryColor( col )
	self.fgcolor = table.Copy(col)
end

function MAIN:SetSecondaryColor( col )
	self.bgcolor = table.Copy(col)
end

function MAIN:GetPrimaryColor( )
	return self.fgcolor
end

function MAIN:GetSecondaryColor( )
	return self.bgcolor
end

function MAIN:SetTitle( str )
	self.title = str
end

vgui.Register("arizard_window", MAIN, "DFrame")

local BUTTN = {} -- custom buttons

function BUTTN:Init()
	self.w, self.h = 64,24
	
	self.color = {}
	self.color.up = Color(192, 57, 43)
	self.color.hover = Color(231, 76, 60)
	self.hover = false
	self.active = false

	self.font = "arizard_derma_Small"
	self.offsets = {0,-11}

	self.text = "Label"

	self.b = vgui.Create("DButton", self)

	self.b.OnCursorEntered = function()
		self.hover = true
	end

	self.b.OnCursorExited = function()
		self.hover = false
	end

	self.b.OnMousePressed = function( self2, mkey )

		self:OnMousePressed(mkey)
	end

	function self.b:Paint() end
	self.b:SetText("")
	self.disabled = false
end

function BUTTN:PerformLayout()
	self.b:SetSize(self:GetWide(),self:GetTall())
end
function BUTTN:Paint() end
function BUTTN:PaintOver(w,h)
	if self.hover == true or self.active == true then
		surface.SetDrawColor(self.color.hover)
		draw.RoundedBox(4,0,0,w,h, self.color.hover)
	elseif self.hover == false then
		surface.SetDrawColor(self.color.up)
		draw.RoundedBox(4,0,0,w,h, self.color.up)
	end
	

	ArizardShadowText(self.text,self.font,self:GetWide()/2 + self.offsets[1], self:GetTall()/2 +self.offsets[2], Color(255,255,255), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 1)
end

function BUTTN:SetFont(fo)
	self.font = fo
end

function BUTTN:SetOffsets(x,y)
	self.offsets = {x,y}
end

function BUTTN:SetSelected( bool )

	self.active = bool

end

function BUTTN:SetText( text )

	self.text = text

end

function BUTTN:SetColors(upcol, hovercol)
	self.color.up = upcol
	self.color.hover = hovercol
end

function BUTTN:DoClick()

end

function BUTTN:DoRightClick()
end

function BUTTN:OnMousePressed( mkey )

	if not self.disabled then
		if mkey == MOUSE_LEFT then
			self:DoClick()
		end

		if mkey == MOUSE_RIGHT then
			self:DoRightClick()
		end
	end

end

function BUTTN:IsDown()

	if self.hover == true then
		if input.IsMouseDown( MOUSE_LEFT ) then
			return true
		end
	end

	return false
end

function BUTTN:SetDisabled( bool )
	self.disabled = bool
end


vgui.Register("arizard_button",BUTTN)


--hub multi panels

local MPANEL = {}

function MPANEL:Init()

	self.buttonoffset = 0

	self:SetSize(640,320)
	self.panels = {}
	self.buttons = {}
	self.tabs = {}

	self.color = {
		HexColor("#c0392b"),
		HexColor("#e74c3c")
	}

	self:PerformLayout()

	self.activetab = 0

	self.spacer = vgui.Create("DPanel",self)

	function self.spacer:Paint()
		surface.SetDrawColor(COLORS.NeutralLow)
		surface.DrawRect(0,0,self:GetWide(),self:GetTall())
	end
	self.spacer:SetPos(0,24)
	 -- Color(46, 204, 113)
	  -- Color(39, 174, 96)
	self.navleft = vgui.Create("arizard_button", self)
	self.navleft:SetColors( Color(39, 174, 96), Color(46, 204, 113))
	self.navleft:SetText( "<" )
	self.navleft:SetSize(24,24)

	function self.navleft:Think()
		if self:IsDown() then
			self:GetParent().buttonoffset = self:GetParent().buttonoffset + 2 * (FrameTime()/(1/100))
			self:GetParent():PerformLayout()
		end
	end

	self.navright = vgui.Create("arizard_button", self)
	self.navright:SetColors( Color(39, 174, 96), Color(46, 204, 113))
	self.navright:SetText( ">" )
	self.navright:SetSize(24,24)

	function self.navright:Think()
		if self:IsDown() then
			print("moving right")
			self:GetParent().buttonoffset = self:GetParent().buttonoffset - 2 * (FrameTime()/(1/100))
			self:GetParent():PerformLayout()
		end
	end

	self.navleft:SetZPos(99)
	self.navright:SetZPos(98)


	self.arrowsvisible = true
end

function MPANEL:ArrowsVisible( bool )

	self.navleft:SetVisible( bool )
	self.navright:SetVisible( bool )

end

function MPANEL:SetTab( idx )

	for i = 1, #self.tabs do
		
		self.buttons[self.tabs[i]]:SetSelected( false )
		self.panels[self.tabs[i]]:SetVisible( false )

	end

	self.buttons[self.tabs[idx]]:SetSelected( true )
	self.panels[self.tabs[idx]]:SetVisible( true )

end

function MPANEL:SetTabDisabled( idx, bool )

	self.buttons[self.tabs[idx]]:SetDisabled( bool )

end

function MPANEL:SetColors(c1, c2)
	self.color[1] = c1
	self.color[2] = c2

end

function MPANEL:AddTab(str_name)

	self.buttons[str_name] = vgui.Create("arizard_button", self)
	self.buttons[str_name]:SetSize(92,24)
	self.buttons[str_name]:SetText(str_name)
	self.buttons[str_name]:SetColors(COLORS.GoodDark, COLORS.Good)

	self.tabs[#self.tabs+1] = str_name

	self.activetab = #self.tabs
	self.buttons[str_name].idx = #self.tabs

	

	local temp = self.buttons[str_name]

	function temp:DoClick()
		local parent = self:GetParent()
		parent:SetTab( self.idx )
	end


	temp.PaintOver = function(self, w, h)
		if self.hover == true or self.active == true then
			surface.SetDrawColor(self.color.hover)
			draw.RoundedBox(4,0,0,self:GetWide(),12, self.color.hover)
		elseif self.hover == false then
			surface.SetDrawColor(self.color.up)
			draw.RoundedBox(4,0,0,self:GetWide(),12,self.color.up)
		end

		surface.DrawRect(0,8,self:GetWide(),self:GetTall()-8)

		ArizardShadowText(self.text,self.font,self:GetWide()/2 + self.offsets[1], self:GetTall()/2 +self.offsets[2], Color(255,255,255), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 1)
	end

	self.panels[str_name] = vgui.Create("DPanel", self)
	self.panels[str_name]:SetSize(self:GetWide(),self:GetTall()-28)
	self.panels[str_name]:SetPos(0,28)
	self.panels[str_name]:SetVisible(false)

	self.panels[str_name].Paint = function(self, w, h)
		surface.SetDrawColor(Color(225,225,225))
		surface.DrawRect(0,0,w, h) -- meh
	end

	self:PerformLayout()

	self:SetTab( self.activetab )

	return self.panels[str_name]

end

function MPANEL:PerformLayout()

	
	local maxoff = -((#self.tabs * 92) - self:GetWide()) -24*2 -8
	if self.buttonoffset > 8 then self.buttonoffset = 8 end
	if self.buttonoffset < maxoff then self.buttonoffset = maxoff end

	if maxoff > 0 then self.buttonoffset = 8 end
	
	if self.navright then
		self.navright:SetPos(self:GetWide() - 24)
	end

	if self.spacer then
		self.spacer:SetSize(self:GetWide(), 4)
	end
	for i = 1,#self.tabs do
		self.buttons[self.tabs[i]]:SetPos(24+(i-1)*92+self.buttonoffset,0)
		self.buttons[self.tabs[i]].OriginalX = 8+(i-1)*92
		self.panels[self.tabs[i]]:SetSize(self:GetWide(),self:GetTall()-28)

	end

end
vgui.Register("arizard_multipanel", MPANEL)

concommand.Add("arizard_test_derma", function()
	vgui.Create("arizard_window")
end)


--addons/ch_atm/lua/ch_atm/shared/ch_atm_config.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/shared/ch_atm_config_upgrades.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/shared/ch_atm_utils.lua:
-- Shared Utils
--[[
	Language functions
--]]
local function CH_ATM_GetLang()
	local lang = CH_ATM.Config.Language or "en"

	return lang
end

function CH_ATM.LangString( text )
	local translation = text .." (Translation missing)"
	
	if CH_ATM.Config.Lang[ text ] then
		translation = CH_ATM.Config.Lang[ text ][ CH_ATM_GetLang() ]
	end
	
	return translation
end

--[[
	Get account holding
--]]
function CH_ATM.GetMoneyBankAccount( ply )
	return ply.CH_ATM_BankAccount or 0
end

--[[
	Get account level
--]]
function CH_ATM.GetAccountLevel( ply )
	return ply.CH_ATM_BankAccountLevel or 1
end

--[[
	Get account interest rate
--]]
function CH_ATM.GetAccountFixedInterestRate( ply )
	return CH_ATM.Config.AccountLevels[ CH_ATM.GetAccountLevel( ply ) ].InterestRate
end

function CH_ATM.GetAccountInterestRate( ply )
	return ply.CH_ATM_InterestRate
end

--[[
	Get account max amount of money
--]]
function CH_ATM.GetAccountMaxMoney( ply )
	return CH_ATM.Config.AccountLevels[ CH_ATM.GetAccountLevel( ply ) ].MaxMoney
end

--[[
	Get account max interest to earn
--]]
function CH_ATM.GetMaxInterestToEarn( ply )
	return CH_ATM.Config.AccountLevels[ CH_ATM.GetAccountLevel( ply ) ].MaxInterestToEarn
end

--[[
	A range of currency functions
--]]
local function CH_ATM_GetCurrency()
	return CH_ATM.Config.ATMCurrency or "darkrp"
end

function CH_ATM.AddMoney( ply, amount )
	CH_ATM.Currencies[ CH_ATM_GetCurrency() ].AddMoney( ply, amount )
end

function CH_ATM.TakeMoney( ply, amount )
	CH_ATM.Currencies[ CH_ATM_GetCurrency() ].TakeMoney( ply, amount )
end

function CH_ATM.GetMoney( ply )
	return CH_ATM.Currencies[ CH_ATM_GetCurrency() ].GetMoney( ply )
end

function CH_ATM.CanAfford( ply, amount )
	return CH_ATM.Currencies[ CH_ATM_GetCurrency() ].CanAfford( ply, amount )
end

function CH_ATM.FormatMoney( amount )
	return CH_ATM.Currencies[ CH_ATM_GetCurrency() ].FormatMoney( amount )
end

function CH_ATM.CurrencyAbbreviation()
	return CH_ATM.Currencies[ CH_ATM_GetCurrency() ].CurrencyAbbreviation()
end
--addons/ch_atm/lua/ch_atm/client/ch_atm_imgui.lua:
--[[
IMGUI by Wyozi - https://github.com/wyozi-gmod/imgui

MIT License

Copyright (c) 2019 wyozi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
--]]

local imgui = {}

imgui.skin = {
	background = Color(0, 0, 0, 0),
	backgroundHover = Color(0, 0, 0, 0),

	border = Color(255, 255, 255),
	borderHover = Color(255, 127, 0),
	borderPress = Color(255, 80, 0),

	foreground = Color(255, 255, 255),
	foregroundHover = Color(255, 127, 0),
	foregroundPress = Color(255, 80, 0),
}

local devCvar = GetConVar("developer")
function imgui.IsDeveloperMode()
	return not imgui.DisableDeveloperMode and devCvar:GetInt() > 0
end

local _devMode = false -- cached local variable updated once in a while

function imgui.Hook(name, id, callback)
	local hookUniqifier = debug.getinfo(4).short_src
	hook.Add(name, "IMGUI / " .. id .. " / " .. hookUniqifier, callback)
end

local localPlayer
local gState = {}

local function shouldAcceptInput()
	-- don't process input during non-main renderpass
	if render.GetRenderTarget() ~= nil then
		return false
	end

	-- don't process input if we're doing VGUI stuff (and not in context menu)
	if vgui.CursorVisible() and vgui.GetHoveredPanel() ~= g_ContextMenu then
		return false
	end
	
	if localPlayer and localPlayer.ATM_LastUsed and localPlayer.ATM_LastUsed > CurTime() then
		return false
	end
	
	return true
end

local function apply_screen_cooldown()
	if localPlayer then
		localPlayer.ATM_LastUsed = CurTime() + 0.2
		return
	end
end

imgui.Hook("PreRender", "Input", function()
	-- calculate mouse state
	if shouldAcceptInput() then
		local useBind = input.LookupBinding("+use", true)
		local USE = useBind and input.GetKeyCode(useBind)

		local wasPressing = gState.pressing
		gState.pressing = (USE and input.IsButtonDown(USE))
		gState.pressed = not wasPressing and gState.pressing
		
		if wasPressing then
			apply_screen_cooldown()
		end
	end
end)

hook.Add("NotifyShouldTransmit", "IMGUI / ClearRenderBounds", function(ent, shouldTransmit)
	if shouldTransmit and ent._imguiRBExpansion then
		ent._imguiRBExpansion = nil
	end
end)

local traceResultTable = {}
local traceQueryTable = { output = traceResultTable, filter = {} }
local function isObstructed(eyePos, hitPos, ignoredEntity)
	local q = traceQueryTable
	q.start = eyePos
	q.endpos = hitPos
	q.filter[1] = localPlayer
	q.filter[2] = ignoredEntity

	local tr = util.TraceLine(q)
	if tr.Hit then
		return true, tr.Entity
	else
		return false
	end
end

function imgui.Start3D2D(pos, angles, scale, distanceHide, distanceFadeStart)
	if not IsValid(localPlayer) then
		localPlayer = LocalPlayer()
	end

	if gState.shutdown == true then
		return
	end

	if gState.rendering == true then
		print(
			"[IMGUI] Starting a new IMGUI context when previous one is still rendering" ..
			"Shutting down rendering pipeline to prevent crashes.."
		)
		gState.shutdown = true
		return false
	end

	_devMode = imgui.IsDeveloperMode()

	local eyePos = localPlayer:EyePos()
	local eyePosToPos = pos - eyePos

	-- OPTIMIZATION: Test that we are in front of the UI
	do
		local normal = angles:Up()
		local dot = eyePosToPos:Dot(normal)

		if _devMode then gState._devDot = dot end

		-- since normal is pointing away from surface towards viewer, dot<0 is visible
		if dot >= 0 then
			return false
		end
	end

	-- OPTIMIZATION: Distance based fade/hide
	if distanceHide then
		local distance = eyePosToPos:Length()
		if distance > distanceHide then
			return false
		end

		if _devMode then
			gState._devDist = distance
			gState._devHideDist = distanceHide
		end

		if distanceHide and distanceFadeStart and distance > distanceFadeStart then
			local blend = math.min(math.Remap(distance, distanceFadeStart, distanceHide, 1, 0), 1)
			render.SetBlend(blend)
			surface.SetAlphaMultiplier(blend)
		end
	end

	gState.rendering = true
	gState.pos = pos
	gState.angles = angles
	gState.scale = scale

	cam.Start3D2D(pos, angles, scale)

	-- calculate mousepos
	if not vgui.CursorVisible() or vgui.IsHoveringWorld() then
		local tr = localPlayer:GetEyeTrace()
		local eyepos = tr.StartPos
		local eyenormal

		if vgui.CursorVisible() and vgui.IsHoveringWorld() then
			eyenormal = gui.ScreenToVector(gui.MousePos())
		else
			eyenormal = tr.Normal
		end

		local planeNormal = angles:Up()

		local hitPos = util.IntersectRayWithPlane(eyepos, eyenormal, pos, planeNormal)
		if hitPos then
			local obstructed, obstructer = isObstructed(eyepos, hitPos, gState.entity)
			if obstructed then
				gState.mx = nil
				gState.my = nil

				if _devMode then gState._devInputBlocker = "collision " .. obstructer:GetClass() .. "/" .. obstructer:EntIndex() end
			else
				local diff = pos - hitPos

				-- This cool code is from Willox's keypad CalculateCursorPos
				local x = diff:Dot(-angles:Forward()) / scale
				local y = diff:Dot(-angles:Right()) / scale

				gState.mx = x
				gState.my = y
			end
		else
			gState.mx = nil
			gState.my = nil

			if _devMode then gState._devInputBlocker = "not looking at plane" end
		end
	else
		gState.mx = nil
		gState.my = nil

		if _devMode then gState._devInputBlocker = "not hovering world" end
	end

	if _devMode then gState._renderStarted = SysTime() end

	return true
end

function imgui.Entity3D2D(ent, lpos, lang, scale, ...)
	gState.entity = ent
	local ret = imgui.Start3D2D(ent:LocalToWorld(lpos), ent:LocalToWorldAngles(lang), scale, ...)
	if not ret then
		gState.entity = nil
	end
	return ret
end

local function calculateRenderBounds(x, y, w, h)
	local pos = gState.pos
	local fwd, right = gState.angles:Forward(), gState.angles:Right()
	local scale = gState.scale
	local firstCorner, secondCorner =
		pos + fwd * x * scale + right * y * scale,
		pos + fwd * (x + w) * scale + right * (y + h) * scale

	local minrb, maxrb = Vector(math.huge, math.huge, math.huge), Vector(-math.huge, -math.huge, -math.huge)

	minrb.x = math.min(minrb.x, firstCorner.x, secondCorner.x)
	minrb.y = math.min(minrb.y, firstCorner.y, secondCorner.y)
	minrb.z = math.min(minrb.z, firstCorner.z, secondCorner.z)
	maxrb.x = math.max(maxrb.x, firstCorner.x, secondCorner.x)
	maxrb.y = math.max(maxrb.y, firstCorner.y, secondCorner.y)
	maxrb.z = math.max(maxrb.z, firstCorner.z, secondCorner.z)

	return minrb, maxrb
end

function imgui.ExpandRenderBoundsFromRect(x, y, w, h)
	local ent = gState.entity
	if IsValid(ent) then
		-- make sure we're not applying same expansion twice
		local expansion = ent._imguiRBExpansion
		if expansion then
			local ex, ey, ew, eh = unpack(expansion)
			if ex == x and ey == y and ew == w and eh == h then
				return
			end
		end

		local minrb, maxrb = calculateRenderBounds(x, y, w, h)

		ent:SetRenderBoundsWS(minrb, maxrb)
		if _devMode then
			print("[IMGUI] Updated renderbounds of ", ent, " to ", minrb, "x", maxrb)
		end

		ent._imguiRBExpansion = {x, y, w, h}
	else
		if _devMode then
			print("[IMGUI] Attempted to update renderbounds when entity is not valid!! ", debug.traceback())
		end
	end
end

local devOffset = Vector(0, 0, 30)
local devColours = {
	background = Color(0, 0, 0, 200),
	title = Color(78, 205, 196),
	mouseHovered = Color(0, 255, 0),
	mouseUnhovered = Color(255, 0, 0),
	pos = Color(255, 255, 255),
	distance = Color(200, 200, 200, 200),
	ang = Color(255, 255, 255),
	dot = Color(200, 200, 200, 200),
	angleToEye = Color(200, 200, 200, 200),
	renderTime = Color(255, 255, 255),
	renderBounds = Color(0, 0, 255)
}

local function developerText(str, x, y, clr)
	draw.SimpleText(
		str, "DefaultFixedDropShadow", x, y, clr, TEXT_ALIGN_CENTER, nil
	)
end

local function drawDeveloperInfo()
	local camAng = localPlayer:EyeAngles()
	camAng:RotateAroundAxis(camAng:Right(), 90)
	camAng:RotateAroundAxis(camAng:Up(), -90)

	cam.IgnoreZ(true)
	cam.Start3D2D(gState.pos + devOffset, camAng, 0.15)

	local bgCol = devColours["background"]
	surface.SetDrawColor(bgCol.r, bgCol.g, bgCol.b, bgCol.a)
	surface.DrawRect(-100, 0, 200, 140)

	local titleCol = devColours["title"]
	developerText("imgui developer", 0, 5, titleCol)

	surface.SetDrawColor(titleCol.r, titleCol.g, titleCol.b)
	surface.DrawLine(-50, 16, 50, 16)

	local mx, my = gState.mx, gState.my
	if mx and my then
		developerText(
			string.format("mouse: hovering %d x %d", mx, my),
			0, 20, devColours["mouseHovered"]
		)
	else
		developerText(
			string.format("mouse: %s", gState._devInputBlocker or ""),
			0, 20, devColours["mouseUnhovered"]
		)
	end

	local pos = gState.pos
	developerText(
		string.format("pos: %.2f %.2f %.2f", pos.x, pos.y, pos.z),
		0, 40, devColours["pos"]
	)

	developerText(
		string.format("distance %.2f / %.2f", gState._devDist or 0, gState._devHideDist or 0),
		0, 53, devColours["distance"]
	)

	local ang = gState.angles
	developerText(string.format("ang: %.2f %.2f %.2f", ang.p, ang.y, ang.r), 0, 75, devColours["ang"])
	developerText(string.format("dot %d", gState._devDot or 0), 0, 88, devColours["dot"])

	local angToEye = (pos - localPlayer:EyePos()):Angle()
	angToEye:RotateAroundAxis(ang:Up(), -90)
	angToEye:RotateAroundAxis(ang:Right(), 90)

	developerText(
		string.format("angle to eye (%d,%d,%d)", angToEye.p, angToEye.y, angToEye.r),
		0, 100, devColours["angleToEye"]
	)

	developerText(
		string.format("rendertime avg: %.2fms", (gState._devBenchAveraged or 0) * 1000),
		0, 120, devColours["renderTime"]
	)

	cam.End3D2D()
	cam.IgnoreZ(false)

	local ent = gState.entity
	if IsValid(ent) and ent._imguiRBExpansion then
		local ex, ey, ew, eh = unpack(ent._imguiRBExpansion)
		local minrb, maxrb = calculateRenderBounds(ex, ey, ew, eh)
		render.DrawWireframeBox(vector_origin, angle_zero, minrb, maxrb, devColours["renderBounds"])
	end
end

function imgui.End3D2D()
	if gState then
		if _devMode then
			local renderTook = SysTime() - gState._renderStarted
			gState._devBenchTests = (gState._devBenchTests or 0) + 1
			gState._devBenchTaken = (gState._devBenchTaken or 0) + renderTook
			if gState._devBenchTests == 100 then
				gState._devBenchAveraged = gState._devBenchTaken / 100
				gState._devBenchTests = 0
				gState._devBenchTaken = 0
			end
		end

		gState.rendering = false
		cam.End3D2D()
		render.SetBlend(1)
		surface.SetAlphaMultiplier(1)

		if _devMode then
			drawDeveloperInfo()
		end

		gState.entity = nil
	end
end

function imgui.CursorPos()
	local mx, my = gState.mx, gState.my
	return mx, my
end

function imgui.IsHovering(x, y, w, h)
	local mx, my = gState.mx, gState.my
	return mx and my and mx >= x and mx <= (x + w) and my >= y and my <= (y + h)
end
function imgui.IsPressing()
	return shouldAcceptInput() and gState.pressing
end
function imgui.IsPressed()
	return shouldAcceptInput() and gState.pressed
end

-- String->Bool mappings for whether font has been created
local _createdFonts = {}

-- Cached IMGUIFontNamd->GModFontName
local _imguiFontToGmodFont = {}

local EXCLAMATION_BYTE = string.byte("!")
function imgui.xFont(font, defaultSize)
	-- special font
	if string.byte(font, 1) == EXCLAMATION_BYTE then

		local existingGFont = _imguiFontToGmodFont[font]
		if existingGFont then
			return existingGFont
		end

		-- Font not cached; parse the font
		local name, size = font:match("!([^@]+)@(.+)")
		if size then size = tonumber(size) end

		if not size and defaultSize then
			name = font:match("^!([^@]+)$")
			size = defaultSize
		end

		local fontName = string.format("IMGUI_%s_%d", name, size)
		_imguiFontToGmodFont[font] = fontName
		if not _createdFonts[fontName] then
			surface.CreateFont(fontName, {
				font = name,
				size = size
			})
			_createdFonts[fontName] = true
		end

		return fontName
	end
	return font
end

function imgui.xButton(x, y, w, h, borderWidth, borderClr, hoverClr, pressColor)
	local bw = borderWidth or 1

	local bgColor = imgui.IsHovering(x, y, w, h) and imgui.skin.backgroundHover or imgui.skin.background
	local borderColor =
		((imgui.IsPressing() and imgui.IsHovering(x, y, w, h)) and (pressColor or imgui.skin.borderPress))
		or (imgui.IsHovering(x, y, w, h) and (hoverClr or imgui.skin.borderHover))
		or (borderClr or imgui.skin.border)

	surface.SetDrawColor(bgColor)
	surface.DrawRect(x, y, w, h)

	if bw > 0 then
		surface.SetDrawColor(borderColor)

		surface.DrawRect(x, y, w, bw)
		surface.DrawRect(x, y + bw, bw, h - bw * 2)
		surface.DrawRect(x, y + h-bw, w, bw)
		surface.DrawRect(x + w - bw + 1, y, bw, h)
	end

	return shouldAcceptInput() and imgui.IsHovering(x, y, w, h) and gState.pressed
end

function imgui.xCursor(x, y, w, h)
	local fgColor = imgui.IsPressing() and imgui.skin.foregroundPress or imgui.skin.foreground
	local mx, my = gState.mx, gState.my

	if not mx or not my then return end

	if x and w and (mx < x or mx > x + w) then return end
	if y and h and (my < y or my > y + h) then return end
	
	local cursorSize = math.ceil( 0.3 / gState.scale )
	local cursor_setting = CH_ATM.GetCursorSetting()
	
	surface.SetDrawColor( color_white )
	if cursor_setting == 1 then
		surface.SetMaterial( CH_ATM.Materials.Cursor )
	else
		surface.SetMaterial( CH_ATM.Materials.HandCursor )
	end
	surface.DrawTexturedRect( mx - cursorSize + 8, my, 24, 24 )
end

function imgui.xTextButton(text, font, x, y, w, h, borderWidth, color, hoverClr, pressColor)
	local fgColor =
		((imgui.IsPressing() and imgui.IsHovering(x, y, w, h)) and (pressColor or imgui.skin.foregroundPress))
		or (imgui.IsHovering(x, y, w, h) and (hoverClr or imgui.skin.foregroundHover))
		or (color or imgui.skin.foreground)

	local clicked = imgui.xButton(x, y, w, h, borderWidth, color, hoverClr, pressColor)

	font = imgui.xFont(font, math.floor(h * 0.618))
	draw.SimpleText(text, font, x + w / 2, y + h / 2, fgColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

	return clicked
end

return imgui
--addons/ch_atm/lua/ch_atm/client/ch_atm_keypad_input.lua:
return gluapack()()
--addons/darkrpbankrobbery2/lua/autorun/ch_bank_initialize.lua:
-- INITIALIZE SCRIPT
if SERVER then
	for k, v in ipairs( file.Find( "ch_bank_robbery/shared/*.lua", "LUA" ) ) do
		include( "ch_bank_robbery/shared/" .. v )
		AddCSLuaFile( "ch_bank_robbery/shared/" .. v )
	end

	for k, v in ipairs( file.Find( "ch_bank_robbery/server/*.lua", "LUA" ) ) do
		include( "ch_bank_robbery/server/" .. v )
	end
	
	for k, v in ipairs( file.Find( "ch_bank_robbery/client/*.lua", "LUA" ) ) do
		AddCSLuaFile( "ch_bank_robbery/client/" .. v )
	end
end

if CLIENT then
	for k, v in ipairs( file.Find( "ch_bank_robbery/shared/*.lua", "LUA" ) ) do
		include( "ch_bank_robbery/shared/" .. v )
	end
	
	for k, v in ipairs( file.Find( "ch_bank_robbery/client/*.lua", "LUA" ) ) do
		include( "ch_bank_robbery/client/" .. v )
	end
end
--addons/darkrpbankrobbery2/lua/ch_bank_robbery/shared/bank_config.lua:
CH_BankVault = CH_BankVault or {}
CH_BankVault.Config = CH_BankVault.Config or {}
CH_BankVault.Content = CH_BankVault.Content or {}
CH_BankVault.Design = CH_BankVault.Design or {}
CH_BankVault.CurrentRobbers = CH_BankVault.CurrentRobbers or { "NONE" }

-- General config options.
CH_BankVault.Config.StartMoney = 1500 -- Amount of money the bank will have from server startup. [Default = 1500]
CH_BankVault.Config.MoneyTimer = 60 -- This is the time that defines when money is added to the bank. In seconds! [Default = 60]
CH_BankVault.Config.MoneyOnTime = 1000 -- This is the amount of money to be added to the bank every x minutes/seconds. Defined by the setting above. [Default = 1000]
CH_BankVault.Config.Max = 50000 -- The maximum the bank can have. Set to 0 for no limit. [Modified to 50000]
CH_BankVault.Config.MaxRobberyPayout = 50000 -- The maximum amount of money a robbery can yield. [Added new setting for maximum payout]

CH_BankVault.Config.AliveTime = 60 -- The amount of SECONDS the player must stay alive before he will receive what the bank has. [Default = 60 seconds]
-- If you own the transport dlc this is also the time the robbers needs to complete the heist/transport of the money in. If not, the mission will fail.

CH_BankVault.Config.CooldownTime = 600 -- The amount of SECONDS the bank is on a cooldown after a robbery! [Default = 600 (10 min)]
CH_BankVault.Config.PlayerLimit = 5 -- The amount of players there must be on the server before you can rob the bank. [Default = 5]
CH_BankVault.Config.PoliceRequired = 3 -- The amount of police officers there must be before a person can rob the bank. [Default = 3]

CH_BankVault.Config.RobberyDistance = 300000 -- The amount of space the player can move away from the armory entity, before the robbery fails. [Default = 300000]
CH_BankVault.Config.DropMoneyOnSucces = false -- Should money drop from the bank when a robbery is successful? true/false option. [Default = false]

CH_BankVault.Config.KillReward = 1750 -- The amount of money a person is rewarded for killing the bank robber. [Default = 1750]
CH_BankVault.Config.RobbersCanJoin = 120 -- Amount of seconds before robbers are no longer able to join a robbery after it has first been started. [Default = 120 (2 minutes)]

-- Alarm Sound Configs
CH_BankVault.Config.EmitSoundOnRob = true -- Should an alarm go off when the bank vault gets robbed. [Default = true]
CH_BankVault.Config.TheSound = "ambient/alarms/alarm_citizen_loop1.wav" -- The sound to be played. [Default = ambient/alarms/alarm1.wav - default gmod sound]
CH_BankVault.Config.SoundVolume = 100 -- The sound volume for the alarm sound. [Default = 100] -- AVAILABLE VALUES https://wiki.facepunch.com/gmod/Enums/SNDLVL
CH_BankVault.Config.SoundDuration = 20 -- Amount of seconds the sound should play for. [Default = 20]

-- Model Requirementsa
CH_BankVault.Config.UseRequiredModels = false -- Should the robber be a specific model to be able to rob the bank? Uses the models from the table below. [Default = false]

CH_BankVault.Config.RequiredModels = { -- These are the models required to rob the bank. These only come in use if the option above (CH_BankVault.Config.UseRequiredModels) is enabled.  
["models/player/Group01/Male_01.mdl"] = true,
["models/player/Group01/Male_02.mdl"] = true,
["models/player/Group01/Male_03.mdl"] = true,
["models/player/Group01/Male_04.mdl"] = true,
["models/player/Group01/Male_05.mdl"] = true,
["models/player/Group01/Male_06.mdl"] = true,
["models/player/Group01/Male_07.mdl"] = true,
["models/player/Group01/Male_08.mdl"] = true,
["models/player/Group01/Male_09.mdl"] = true,
}


-- Team Configuration
CH_BankVault.Config.GovernmentTeams = { -- These teams are considered police/government teams. They will count towards the requirement to start a robbery, receive notifications, and so on.
    ["Pöh Amir"] = true,
    ["Pöh"] = true,
    ["Polis"] = true,
    ["Pöh Doktor"] = true,
    ["Sivil Polis"] = true,
    ["Özel Kuvvet"] = true,
    ["Başkan"] = true,
}

CH_BankVault.Config.AllowedTeams = { -- These are the teams that are allowed to rob the bank.
    ["Hırsız"] = true,
    ["Profesyonel Hırsız"] = true,
    ["İtalyan Mafya Lideri"] = true,
    ["Rus Mafya Lideri"] = true,
    ["Rus Mafya"] = true,
    ["İtalyan Mafya"] = true,
    ["Grove Çete Üyesi"] = true,
    ["Ballas Çete Üyesi"] = true,
    ["Usta Hırsız"] = true,
}

--[[
	XP SUPPORT
--]]
CH_BankVault.Config.SuccessfulBankRobberyMinXP = 20 -- Amount of XP given when succesfully robbing the bank (minimum amount)
CH_BankVault.Config.SuccessfulBankRobberyMaxXP = 50 -- Amount of XP given when succesfully robbing the bank (maximum amount). The amount is randomized between these two values.

CH_BankVault.Config.KillingRobberMinXP = 20 -- Amount of XP given when killing a robber (minimum amount)
CH_BankVault.Config.KillingRobberMaxXP = 50 -- Amount of XP given when killing a robber (maximum amount). The amount is randomized between these two values.
--addons/darkrpbankrobbery2/lua/ch_bank_robbery/shared/bank_config_design.lua:
-- Design options for the bank entity display.

-- 3D2D Distance
CH_BankVault.Design.DistanceTo3D2D = 500000

-- TOP
CH_BankVault.Design.DesignText_VaultName = "Garanti Bankası"
CH_BankVault.Design.DesignColor_VaultName = Color(20, 196, 99, 150)
CH_BankVault.Design.DesignColor_VaultNameBoarder = Color(0, 0, 0, 255)

CH_BankVault.Design.DesignText_BankVault = "Banka Kasası"
CH_BankVault.Design.DesignColor_BankVault = Color(255, 255, 255, 255)
CH_BankVault.Design.DesignColor_BankVaultBoarder = Color(0, 0, 0, 255)

CH_BankVault.Design.DesignColor_BackCircle = Color(0, 0, 0, 220)
CH_BankVault.Design.DesignColor_MoneyCircle = Color(153, 0, 0, 200)
CH_BankVault.Design.DesignColor_FrontCircle = Color(60, 60, 60, 255)

CH_BankVault.Design.DesignText_Money = "PARA"
CH_BankVault.Design.DesignColor_Money = Color( 255, 255, 255, 255 )
CH_BankVault.Design.DesignColor_MoneyBoarder = Color( 0, 0, 0, 255 )

CH_BankVault.Design.DesignColor_VaultAmount = Color(0, 150, 0, 255)
CH_BankVault.Design.DesignColor_VaultAmountBoarder = Color(0, 0, 0, 255)

-- LEFT SIDE BOTTOM
CH_BankVault.Design.DesignColor_LeftBox = Color(0, 0, 0, 220)

CH_BankVault.Design.DesignText_Cooldown = "Soygun Bekleme Süresi"
CH_BankVault.Design.DesignColor_Cooldown = Color( 255, 255, 255, 255 )
CH_BankVault.Design.DesignColor_CooldownBoarder =  Color( 0, 0, 0, 255 )

CH_BankVault.Design.DesignColor_CooldownValue = Color( 255, 255, 255, 255 )
CH_BankVault.Design.DesignColor_CooldownValueBoarder = Color( 0, 0, 0, 255 )

CH_BankVault.Design.DesignText_Countdown = "Soygun Geri Sayımı"
CH_BankVault.Design.DesignColor_Countdown = Color( 255, 255, 255, 255 )
CH_BankVault.Design.DesignColor_CountdownBoarder =  Color( 0, 0, 0, 255 )

CH_BankVault.Design.DesignColor_CountdownValue = Color( 255, 255, 255, 255 )
CH_BankVault.Design.DesignColor_CountdownValueBoarder = Color( 0, 0, 0, 255 )

CH_BankVault.Design.DesignText_RobStatus = "Soygun Durumu"
CH_BankVault.Design.DesignColor_RobStatus = Color( 255, 255, 255, 255 )
CH_BankVault.Design.DesignColor_RobStatusBoarder = Color( 0, 0, 0, 255 )

CH_BankVault.Design.DesignText_EnoughPoliceYes = "Yeterli Polis: Evet"
CH_BankVault.Design.DesignText_AllowedTeamYes = "İzin Verilen Takım: Evet"
CH_BankVault.Design.DesignText_EnoughPlayersYes = "Yeterli Oyuncu: Evet"
CH_BankVault.Design.DesignText_RequiredModelYes = "Gerekli Model: Evet"

CH_BankVault.Design.DesignText_EnoughPoliceNo = "Yeterli Polis: Hayır"
CH_BankVault.Design.DesignText_AllowedTeamNo = "İzin Verilen Takım: Hayır"
CH_BankVault.Design.DesignText_EnoughPlayersNo = "Yeterli Oyuncu: Hayır"
CH_BankVault.Design.DesignText_RequiredModelNo = "Gerekli Model: Hayır"


CH_BankVault.Design.DesignColor_TheYes = Color( 0, 150, 0, 255 )
CH_BankVault.Design.DesignColor_TheNo = Color( 150, 0, 0, 255 )
CH_BankVault.Design.DesignColor_TheBoarder = Color( 0, 0, 0, 255 )

-- RIGHT SIDE BOTTOM
CH_BankVault.Design.DesignColor_RightBox = Color(0, 0, 0, 220)

CH_BankVault.Design.DesignText_CurrentRobbers = "Soyguncular:"
CH_BankVault.Design.DesignColor_CurrentRobbers = Color( 255, 255, 255, 255 )
CH_BankVault.Design.DesignColor_CurrentRobbersBoarder = Color( 0, 0, 0, 255 )

CH_BankVault.Design.DesignColor_Robber1 = Color( 255, 255, 255, 255 )
CH_BankVault.Design.DesignColor_Robber2 = Color( 255, 255, 255, 255 )
CH_BankVault.Design.DesignColor_Robber3 = Color( 255, 255, 255, 255 )

CH_BankVault.Design.DesignColor_Robber1Boarder = Color( 0, 0, 0, 255 )
CH_BankVault.Design.DesignColor_Robber2Boarder = Color( 0, 0, 0, 255 )
CH_BankVault.Design.DesignColor_Robber3Boarder = Color( 0, 0, 0, 255 )
--addons/ch_bitminers_dlc/lua/ch_bitminers_dlc/client/bitminers_dlc_fonts.lua:
return gluapack()()
--addons/ch_bitminers/lua/ch_bitminers/client/bitminers_ui_utility.lua:
function CH_Bitminers.UTIL_CreateCircle( x, y, ang, seg, p, rad )
	local circle = {}

	table.insert( circle, { x = x, y = y } )
	
	for i = 0, seg do
		local a = math.rad( ( i / seg ) * -p + ang )
		table.insert( circle, { x = x + math.sin( a ) * rad, y = y + math.cos( a ) * rad } )
	end
	
	return circle
end

function CH_Bitminers.UTIL_DrawCircle( circle, color )
	surface.SetDrawColor( color )
	draw.NoTexture()
	surface.DrawPoly( circle )
end
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_catalog.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_statistics.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_upgrades.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/shared/config/ch_mining_config_lang.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/shared/ch_mining_skills.lua:
local PMETA = FindMetaTable( "Player" )

function PMETA:CH_Mining_IsSkillMaxed( skill )
	return self.CH_Mining_Skills[ skill ] >= #CH_Mining.Skills[ skill].Levels
end

function PMETA:CH_Mining_CanAffordSkill()
	return self.CH_Mining_Skills[ "Points" ] >= 1
end

function PMETA:CH_Mining_GetSkillPoints( skill )
	return self.CH_Mining_Skills[ skill ]
end

function PMETA:CH_Mining_GetSkillPointsTotal()
	return self.CH_Mining_Skills[ "Points" ]
end
--addons/ch_mining/lua/ch_mining/client/ch_mining_inventory.lua:
net.Receive( "CH_Mining_Net_PlayerInventory", function( length, ply )
	-- Setup their inventory clientside
	local ply = LocalPlayer()
	
	ply.CH_Mining_Inventory = {
		["Gold"] = net.ReadUInt( 32 ),
		["Stone"] = net.ReadUInt( 32 ),
		["Iron"] = net.ReadUInt( 32 ),
		["Diamond"] = net.ReadUInt( 32 ),
		["Ruby"] = net.ReadUInt( 32 ),
		["Amethyst"] = net.ReadUInt( 32 ),
		["Rare"] = net.ReadUInt( 32 ),
		["Emerald"] = net.ReadUInt( 32 ),
		["Bloodstone"] = net.ReadUInt( 32 ),
	}
end )
--addons/ch_mining/lua/ch_mining/client/vgui/ch_mining_menu_stats.lua:
return gluapack()()
--lua/autorun/crsk_tofas.lua:
return gluapack()()
--lua/autorun/crsk_tofas.lua:
local PrVeh = "prop_vehicle_jeep"
local Cat = "CrSk Autos"


local V = {
	-- Required information
	Name = "Tofaş Doğan SLX",
	Model = "models/crsk_autos/tofas/dogan.mdl",
	Class = PrVeh,
	Category = Cat,

	-- Optional information
	Author = "CrushingSkirmish",
	Information = "",

	KeyValues = {
		vehiclescript = "scripts/vehicles/crsk_autos/crsk_tofas_dogan.txt"
	}
}
list.Set( "Vehicles", "crsk_tofas_dogan", V )

local V = {
	-- Required information
	Name = "Tofaş Doğan SLX Low",
	Model = "models/crsk_autos/tofas/dogan.mdl",
	Class = PrVeh,
	Category = Cat,

	-- Optional information
	Author = "CrushingSkirmish",
	Information = "",

	KeyValues = {
		vehiclescript = "scripts/vehicles/crsk_autos/crsk_tofas_dogan_low.txt"
	}
}
list.Set( "Vehicles", "crsk_tofas_dogan_low", V )

local V = {
	-- Required information
	Name = "Tofaş Kartal SLX",
	Model = "models/crsk_autos/tofas/kartal.mdl",
	Class = PrVeh,
	Category = Cat,

	-- Optional information
	Author = "CrushingSkirmish",
	Information = "",

	KeyValues = {
		vehiclescript = "scripts/vehicles/crsk_autos/crsk_tofas_kartal.txt"
	}
}
list.Set( "Vehicles", "crsk_tofas_kartal", V )

local V = {
	-- Required information
	Name = "Tofaş Kartal SLX Low",
	Model = "models/crsk_autos/tofas/kartal.mdl",
	Class = PrVeh,
	Category = Cat,

	-- Optional information
	Author = "CrushingSkirmish",
	Information = "",

	KeyValues = {
		vehiclescript = "scripts/vehicles/crsk_autos/crsk_tofas_kartal_low.txt"
	}
}
list.Set( "Vehicles", "crsk_tofas_kartal_low", V )

--lua/autorun/dauge.lua:
return gluapack()()
--addons/executioner/lua/autorun/executioner_defaults.lua:
    --[[
        Disables the Default DarkRP Hit shit.
        Do not touch this file unless you know what you're doing.
        Want help with something?
        Feel free to add me on Steam; http://steamcommunity.com/id/tedlua/ before you touch anything in here.
    --]]

    if CLIENT then
        local _t = {
            { _hook = 'HUDPaint', _string = 'DrawHitOption' },
            { _hook = 'KeyPress', _string = 'openHitMenu' },
            { _hook = 'PostPlayerDraw', _string = 'drawHitInfo' },
            { _hook = 'InitPostEntity', _string = 'HitmanMenu' }
        }

        hook.Add( 'Initialize', 'rHit.Disable.Default', function()
            for k, v in pairs( _t ) do hook.Remove( v._hook, v._string ) end
        end )
    else
        local _c = { 'requesthit', 'hitprice' }
        hook.Add( 'Initialize', 'rHit.Disable.Commands', function()
            for k, v in pairs( _c ) do DarkRP.removeChatCommand( v ) end
        end )
    end

--addons/executioner/lua/autorun/executioner_logging.lua:
    --[[
        Executioner Logging Support;
        Huge thanks to Billy for allowing me to have a free copy of bLogs.
        Please do not edit this file.
    --]]

    ------------------------------
    --> Start of bLogs Support <--
    ------------------------------

    function Executioner.HandleBLogs()
        if bLogs and SERVER then
            local m = bLogs:Module()
            m.Category = 'General'
            m.Name = 'Executioner'
            m.Colour = Color( 230, 32, 25 )
            m:Hook( 'Executioner.OnHitAccepted', 'Executioner.Log.Accept', function( data )
                m:Log( bLogs:FormatPlayer( data.hitman ) .. ' has accepted a hit against ' .. bLogs:FormatPlayer( data.target ) .. ' for ' .. DarkRP.formatMoney( data.price ) .. '.' )
            end )
            m:Hook( 'Executioner.OnHitDeclined', 'Executioner.Log.Decline', function( data )
                m:Log( bLogs:FormatPlayer( data.hitman ) .. ' has declined a hit against ' .. bLogs:FormatPlayer( data.target ) .. ' for ' .. DarkRP.formatMoney( data.price ) .. '.' )
            end )
            m:Hook( 'Executioner.OnHitCompleted', 'Executioner.Log.Completed', function( data, victim, attacker, bonus )
                m:Log( bLogs:FormatPlayer( data.hitman ) .. ' has completed a hit against ' .. bLogs:FormatPlayer( data.target ) .. ' for ' .. DarkRP.formatMoney( data.price ) .. '.' )
            end )
            m:Hook( 'Executioner.OnHitFailed', 'Executioner.Log.Failed', function( data, victim, attacker, bonus )
                m:Log( bLogs:FormatPlayer( victim ) .. ' was killed. The hit has failed!' )
            end )
            m:Hook( 'Executioner.OnHitDisconnected', 'Executioner.Log.Disconnected', function( data, self )
                m:Log( 'Someone with a hit left the server. ' .. bLogs:FormatPlayer( data.hitman ) .. '\'s hit has failed!' )
            end )
            m:Hook( 'Executioner.OnHitArrested', 'Executioner.Log.Arrested', function( data, target, time, arrestor )
                m:Log( bLogs:FormatPlayer( target ) .. ' has been arrested by ' .. bLogs:FormatPlayer( arrestor ) .. '. The hit has failed!' )
            end )
            m:Hook( 'Executioner.OnHitExpired', 'Executioner.Log.Expired', function( data, reason )
                m:Log( reason )
            end )
            bLogs:AddModule( m )
        end
    end
    hook.Add( 'bLogs_FullyLoaded', 'Executioner.Handle.BLogs', Executioner.HandleBLogs )

    ------------------------------

--addons/executioner_v2/lua/autorun/executioner_v2_loader.lua:
return gluapack()()
--lua/autorun/floyd.lua:
player_manager.AddValidModel( "Floyd", "models/player/Floyd.mdl" );
list.Set( "PlayerOptionsModel", "Floyd", "models/player/Floyd.mdl" );
--lua/autorun/french_police.lua:
return gluapack()()
--addons/glicence/lua/autorun/glicence_init.lua:
GLicence = {}
GLicence.Config = GLicence.Config or {}
GLicence.Lang = GLicence.Lang or {}

function GLicence:Print(msg)
  MsgC(Color(200, 200, 200), "[")
  MsgC(Color(255, 150, 150), "GLicence")
  MsgC(Color(200, 200, 200), "] ")
  MsgC(Color(200, 200, 200), msg)
  MsgC(Color(200, 200, 200), "\n")
end

// Shared files. Not printed in console.
AddCSLuaFile("glicence/config/lang.lua")
AddCSLuaFile("glicence/config/config.lua")

if SERVER then
  GLicence:Print("Loading serverside...")

  include("glicence/core/sv_main.lua") GLicence:Print("sv_main.lua")

  AddCSLuaFile("glicence/core/cl_main.lua")

  GLicence:Print("Loaded serverside.")
else
  GLicence:Print("Loading clientside...")

  include("glicence/core/cl_main.lua") GLicence:Print("cl_main.lua")

  GLicence:Print("Loaded clientside.")
end

--lua/gmodadminsuite/sh_core.lua:
AddCSLuaFile()

--######## LOAD CONFIG ########--

GAS:HeaderPrint("")
GAS:HeaderPrint("Loading configs...", GAS_PRINT_TYPE_INFO)

GAS.Config = {}

local function InstallConfigAddon()
	if (SERVER) then
		GAS.BillysErrors:AddMessage(BillysErrors.IMPORTANCE_FATAL, "Looks like the GmodAdminSuite Config Addon has not been installed to your server: ", {Link = "https://gmodsto.re/gmodadminsuite-config-addon"}, "\nYou need to install this addon in order to use & configure GmodAdminSuite.")
	end
end

if (not file.Exists("gmodadminsuite_config.lua", "LUA")) then
	return InstallConfigAddon()
else
	local worked = include("gmodadminsuite_config.lua")
	if (not worked) then
		if (SERVER) then
			GAS.BillysErrors:AddMessage(BillysErrors.IMPORTANCE_FATAL, "GmodAdminSuite config failed to load. You probably have an error in your config. Please read your server's console.")
			return
		end
		return
	else
		GAS:HeaderPrint("Config successfully loaded", GAS_PRINT_COLOR_GOOD, GAS_PRINT_TYPE_INFO)
	end
end

if (not file.Exists("gmodadminsuite_lua_functions.lua", "LUA")) then
	return InstallConfigAddon()
else
	local worked = include("gmodadminsuite_lua_functions.lua")
	if (not worked) then
		if (SERVER) then
			GAS.BillysErrors:AddMessage(BillysErrors.IMPORTANCE_FATAL, "GmodAdminSuite Lua functions config failed to load. You probably have an error in your config. Please read your server's console.")
			return
		end
		return
	else
		GAS:HeaderPrint("Lua functions successfully loaded", GAS_PRINT_COLOR_GOOD, GAS_PRINT_TYPE_INFO)
	end
end

if (SERVER) then
	if (not file.Exists("gmodadminsuite_mysql_config.lua", "LUA")) then
		return InstallConfigAddon()
	else
		GAS.Config.MySQL = {}
		local worked = include("gmodadminsuite_mysql_config.lua")
		if (not worked) then
			GAS.BillysErrors:AddMessage(BillysErrors.IMPORTANCE_FATAL, "GmodAdminSuite MySQL config failed to load. You probably have an error in your config. Please read your server's console.")
			return
		else
			GAS:HeaderPrint("MySQL config successfully loaded", GAS_PRINT_COLOR_GOOD, GAS_PRINT_TYPE_INFO)
		end
	end

	if (not file.Exists("gmodadminsuite_steam_apikey.lua", "LUA")) then
		return InstallConfigAddon()
	else
		GAS.SteamAPI = {}
		GAS.SteamAPI.Config = {}
		local worked = include("gmodadminsuite_steam_apikey.lua")
		if (not worked) then
			GAS.BillysErrors:AddMessage(BillysErrors.IMPORTANCE_FATAL, "GmodAdminSuite Steam API key config failed to load. You probably have an error in your config. Please read your server's console.")
			return
		end
	end
end

--######## ADD RESOURCES ########--

if (SERVER) then
	-- Fonts must be downloaded from the server
	resource.AddFile("resource/fonts/circular-bold.ttf")
	resource.AddFile("resource/fonts/circular-medium.ttf")
	resource.AddFile("resource/fonts/rubik.ttf")
	resource.AddFile("resource/fonts/rubik-bold.ttf")

	if (GAS.Config.WorkshopDL == true or GAS.Config.WorkshopDL == nil) then
		resource.AddWorkshop("1596971443")
	end
	if (GAS.Config.ServerDL == true) then
		for _,v in ipairs({"materials/gmodadminsuite/*", "sound/gmodadminsuite/*"}) do
			local files = file.Find(v, "GAME")
			for _,f in pairs(files) do
				resource.AddFile((v:gsub("%*$", "")) .. f)
			end
		end
	end
else
	for _,v in ipairs((file.Find("sound/gmodadminsuite/*", "GAME"))) do
		util.PrecacheSound("sound/gmodadminsuite/" .. v)
	end
end

--######## Account ID ########--

function GAS:SteamID64ToAccountID(steamid64)
	return GAS:SteamIDToAccountID(util.SteamIDFrom64(steamid64))
end

function GAS:SteamIDToAccountID(steamid)
	local acc32 = tonumber(steamid:sub(11))
	return (acc32 * 2) + tonumber(steamid:sub(9,9))
end

function GAS:AccountIDToSteamID(account_id)
	local sid32 = tonumber(account_id) / 2
	if (sid32 % 1 > 0) then
		return "STEAM_0:1:" .. math.floor(sid32)
	else
		return "STEAM_0:0:" .. sid32
	end
end

function GAS:AccountIDToSteamID64(account_id)
	return util.SteamIDTo64(GAS:AccountIDToSteamID(account_id))
end

--######## MISC ########--

function GAS:IsIPAddress(ip_address, forbid_port)
	local v1,v2,v3,v4,port = ip_address:match("^(%d+)%.(%d+)%.(%d+)%.(%d+)(.*)")
	return
		(v1 ~= nil and (v1 == "0" or (not v1:find("^0") and tonumber(v1) >= 1 and tonumber(v1) <= 255))) and
		(v2 ~= nil and (v2 == "0" or (not v2:find("^0") and tonumber(v2) >= 1 and tonumber(v2) <= 255))) and
		(v3 ~= nil and (v3 == "0" or (not v3:find("^0") and tonumber(v3) >= 1 and tonumber(v3) <= 255))) and
		(v4 ~= nil and (v4 == "0" or (not v4:find("^0") and tonumber(v4) >= 1 and tonumber(v4) <= 255))) and
		(
			(forbid_port == true and (port == nil or #port == 0)) or
			
			(not forbid_port and (
					(port == nil or #port == 0) or
					(port ~= nil and #port > 1 and #port <= 6 and port:sub(1,1) == ":" and
						(port:sub(2) == "0" or
							(tonumber(port:sub(2)) ~= nil and not port:sub(2):find("^0") and tonumber(port:sub(2)) >= 0 and tonumber(port:sub(2)) <= 65535)
						)
					)
				)
			)
		)
end

function GAS:BoolToBit(bool)
	if (bool == true) then
		return 1
	elseif (bool == false) then
		return 0
	end
end
function GAS:BitToBool(bit)
	if (tonumber(bit) == 1) then
		return true
	elseif (tonumber(bit) == 0) then
		return false
	end
end

function GAS:Unvectorize(vec)
	if (vec.r and vec.g and vec.b) then
		local vec_a = ""
		if (vec.a and vec.a ~= 255) then
			vec_a = "," .. vec.a
		end
		return vec.r .. "," .. vec.g .. "," .. vec.b .. vec_a
	elseif (vec.p and vec.y and vec.r) then
		return vec.p .. "," .. vec.y .. "," .. vec.r
	elseif (vec.x and vec.y and vec.z) then
		return vec.x .. "," .. vec.y .. "," .. vec.z
	end
end

function GAS:SetClipboardText(text)
	SetClipboardText(text)
	GAS:PlaySound("confirmed")
	bVGUI.MouseInfoTooltip.Create(GAS:Phrase("copied"))
end

function GAS:OpenURL(url)
	GAS:PlaySound("popup")
	gui.OpenURL(url)
end

function GAS:table_Flip(tbl)
	local new_tbl = {}
	for i,v in pairs(tbl) do
		new_tbl[v] = i
	end
	return new_tbl
end

function GAS:table_IsEmpty(tbl)
	return next(tbl) == nil
end

function GAS:table_ValuesFromKey(tab, key)
	local res = {}
	for k, v in pairs( tab ) do
		if ( v[ key ] ~= nil ) then res[ #res + 1 ] = v[ key ] end
	end
	return res
end

function GAS:table_RemoveEmptyChildren(tbl, tbl_key, parent_tbl)
	for k,v in pairs(tbl) do
		if (type(v) == "table") then
			if (GAS:table_IsEmpty(v)) then
				tbl[k] = nil
				if (tbl_key ~= nil and parent_tbl ~= nil and GAS:table_IsEmpty(tbl)) then
					parent_tbl[tbl_key] = nil
				end
			else
				tbl[k] = GAS:table_RemoveEmptyChildren(v, k, tbl)
			end
		end
	end
	if (GAS:table_IsEmpty(tbl)) then
		if (tbl_key == nil and parent_tbl == nil) then
			return {}
		else
			return nil
		end
	else
		return tbl
	end
end

function GAS:utf8_force_strip(str)
	return (utf8.force(str):gsub("�", ""))
end

--######## LUA FUNCTIONS ########--

function GAS:RunLuaFunction(lua_func_name, ...)
	if (not GAS.LuaFunctions[lua_func_name]) then
		GAS:print("Tried to run a Lua function that doesn't exist! (" .. lua_func_name .. ")", GAS.PRINT_ERROR)
	else
		return GAS.LuaFunctions[lua_func_name](...)
	end
end

--######## TEAM HELPERS ########--

local indexed_teams = {}
function GAS:TeamFromName(team_name)
	if (indexed_teams[team_name] ~= nil) then
		return indexed_teams[indexed_teams]
	else
		for i,v in pairs(team.GetAllTeams()) do
			if (v.Name == team_name) then
				indexed_teams[i] = v.Name
				return i
			end
		end
	end
end

--######## SOUND ########--

local sounds = {alert = "gmodadminsuite/alert.mp3"}
function GAS:PlaySound(sound_name)
	surface.PlaySound(sounds[sound_name] or "gmodadminsuite/" .. sound_name .. ".ogg")
end

--######## MARKUP HELPERS ########--

function GAS:MarkupToPlaintext(str)
	str = tostring(str)
	if (markup and markup.ToPlaintext) then
		return markup.ToPlaintext(str)
	else
		return (str:gsub("</?%a+=?.->",""))
	end
end

function GAS:EscapeMarkup(str)
	str = tostring(str)
	if (markup and markup.Escape) then
		return markup.Escape(str)
	else
		return (str:gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;"))
	end
end

local special_markdown_chars = {"\\","`","*","_","{","}","[","]","(",")","#","+","-",".","!"}
function GAS:EscapeMarkdown(str)
	for _,v in ipairs(special_markdown_chars) do
		str = (str:gsub("%" .. v, "\\" .. v))
	end
	return str
end

function GAS:EscapeJSON(str)
	return (str:gsub("\\", "\\\\"):gsub('"', '\\"'))
end

--######## MySQL ########--

if (SERVER) then
	GAS:EndHeader()
	GAS:StartHeader("Database")
	if (GAS.Config.MySQL.Enabled == true) then
		GAS:HeaderPrint("MySQL enabled", GAS_PRINT_TYPE_INFO)
		local mysqloo_installed = false
		if (system.IsLinux() or system.IsWindows()) then
			local module_name = system.IsLinux() and (jit.arch == "x64" and "gmsv_mysqloo_linux64.dll" or "gmsv_mysqloo_linux.dll") or (jit.arch == "x64" and "gmsv_mysqloo_win64.dll" or "gmsv_mysqloo_win32.dll")
			if (file.Exists("lua/bin/" .. module_name, "GAME")) then
				mysqloo_installed = true
			else
				GAS.BillysErrors:AddMessage(BillysErrors.IMPORTANCE_FATAL, "You do not have the required MySQLOO module installed on your server (lua/bin/" .. module_name .. ") MySQLOO is required to communicate with your MySQL Server.\n", {Link = "https://github.com/FredyH/MySQLOO#install-instructions"})
			end
		else
			GAS.BillysErrors:AddMessage(BillysErrors.IMPORTANCE_FATAL, "You must be running Linux or Windows to use MySQL and its required module, MySQLOO.\n", {Link = "https://github.com/FredyH/MySQLOO#install-instructions"})
		end
		if (mysqloo_installed) then
			GAS:HeaderPrint("MySQLOO is installed!", GAS_PRINT_COLOR_GOOD, GAS_PRINT_TYPE_INFO)
		else
			return
		end
	else
		GAS:HeaderPrint("MySQL disabled, using local server database", GAS_PRINT_TYPE_INFO)
	end

	include("sv_database.lua")
	GAS:EndHeader()
else
	GAS:EndHeader()
end

--######## NETWORKING ########--

include("sh_networking.lua")

--######## HOOKING ########--

function GAS:hook(event, identifier, func)
	GAS:unhook(event, identifier)
	hook.Add(event, "gmodadminsuite:" .. identifier, func)
end
function GAS:unhook(event, identifier)
	hook.Remove(event, "gmodadminsuite:" .. identifier)
end

if (SERVER) then include("gmodadminsuite/sv_hooks.lua") end

--######## TIMERS ########--

function GAS:timer(name, ...)
	GAS:untimer(name)
	timer.Create("gmodadminsuite:" .. name, ...)
end
function GAS:untimer(name)
	timer.Remove("gmodadminsuite:" .. name)
end

--######## CONFIGS ########--

if (not file.IsDir("gmodadminsuite/configs", "DATA")) then
	file.CreateDir("gmodadminsuite/configs", "DATA")
end
if (SERVER) then
	GAS:netInit("getconfig")
	GAS:netInit("uncacheconfig")

	function GAS:DeleteConfig(config_name)
		file.Delete("gmodadminsuite/configs/" .. config_name .. ".txt")
		GAS.ConfigCache[config_name] = nil
	end

	GAS.ConfigCache = {}
	function GAS:GetConfig(config_name, default_config)
		if (GAS.ConfigCache[config_name]) then return GAS.ConfigCache[config_name] end
		if (file.Exists("gmodadminsuite/configs/" .. config_name .. ".txt", "DATA")) then
			local config = file.Read("gmodadminsuite/configs/" .. config_name .. ".txt", "DATA")
			if (config) then
				config = GAS:DeserializeTable(config)
				if (config) then
					GAS.ConfigCache[config_name] = config
					return config
				end
			end
			GAS:print("Failed to load config: " .. config_name .. "; reverting to default config.", GAS_PRINT_COLOR_BAD, GAS_PRINT_TYPE_FAIL)
			GAS.BillysErrors:AddMessage({"Failed to load config: " .. config_name .. "; reverting to default config."})
		end
		if (default_config) then
			GAS:SaveConfig(config_name, default_config)
			return default_config
		end
	end
	function GAS:SaveConfig(config_name, config)
		GAS.ConfigCache[config_name] = config

		local serialized_config = GAS:SerializeTable(config)

		file.Write("gmodadminsuite/configs/" .. config_name .. ".txt", serialized_config)

		GAS:netStart("uncacheconfig")
			net.WriteString(config_name)
		net.Broadcast()

		return config
	end

	GAS:netReceive("getconfig", function(ply)
		local config_name = net.ReadString()
		if (file.Exists("gmodadminsuite/configs/" .. config_name .. ".txt", "DATA")) then
			local data = util.Compress(file.Read("gmodadminsuite/configs/" .. config_name .. ".txt", "DATA"))
			local data_len = #data
			GAS:netStart("getconfig")
				net.WriteString(config_name)
				net.WriteUInt(data_len, 32)
				net.WriteData(data, data_len)
			net.Send(ply)
		end
	end)
else
	GAS.ConfigCache = {}

	GAS.ConfigCallbacks = {}
	function GAS:GetConfig(config_name, callback)
		if (callback) then
			GAS.ConfigCallbacks[config_name] = callback
		end
		if (GAS.ConfigCache[config_name]) then
			if (callback) then
				callback(GAS.ConfigCache[config_name])
			end
			return GAS.ConfigCache[config_name]
		end
		GAS:netStart("getconfig")
			net.WriteString(config_name)
		net.SendToServer()
	end
	GAS:netReceive("getconfig", function()
		local config_name = net.ReadString()
		local data_len = net.ReadUInt(32)
		local data = net.ReadData(data_len)
		data = util.Decompress(data)
		data = GAS:DeserializeTable(data)

		GAS.ConfigCache[config_name] = data

		GAS.ConfigCallbacks[config_name](data)
	end)

	GAS.LocalConfigCache = {}
	function GAS:GetLocalConfig(config_name, default_config)
		if (GAS.LocalConfigCache[config_name]) then return GAS.LocalConfigCache[config_name] end

		if (file.Exists("gmodadminsuite/configs/" .. config_name .. ".txt", "DATA")) then
			local config = file.Read("gmodadminsuite/configs/" .. config_name .. ".txt", "DATA")
			if (config) then
				config = GAS:DeserializeTable(config)
				if (config) then
					GAS.LocalConfigCache[config_name] = config
					return config
				end
			end
		end

		if (default_config) then
			GAS:SaveLocalConfig(config_name, default_config)
			return default_config
		end
	end
	function GAS:SaveLocalConfig(config_name, config)
		GAS.LocalConfigCache[config_name] = config
		file.Write("gmodadminsuite/configs/" .. config_name .. ".txt", GAS:SerializeTable(config))
		return config
	end

	function GAS:UncacheConfig(config_name)
		GAS.ConfigCache[config_name] = nil
	end
	GAS:netReceive("uncacheconfig", function()
		GAS:UncacheConfig(net.ReadString())
	end)
end

--######## SERIALIZATION ########--

GAS.von = include("gmodadminsuite/thirdparty/von.lua")
GAS.pon = include("gmodadminsuite/thirdparty/pon.lua")
GAS.spon = include("gmodadminsuite/thirdparty/spon.lua")
function GAS:SerializeTable(tbl)
	return GAS.von.serialize(tbl)
end
function GAS:DeserializeTable(tbl)
	local succ, r = pcall(GAS.von.deserialize, tbl)
	if (not succ) then
		return GAS.spon.decode(tbl)
	else
		return r
	end
end

--######## LANGUAGE ########--

include("gmodadminsuite/sh_language.lua")

--######## OFFLINE PLAYER DATA ########--

include("gmodadminsuite/sh_offline_player_data.lua")

--######## TEAMS ########--

include("gmodadminsuite/sh_teams.lua")

--######## STEAM API ########--

if (SERVER) then include("gmodadminsuite/sv_steam_avatar.lua") end

--######## AFK ########--

include("gmodadminsuite/sh_afk.lua")

--######## COUNTRY CODES ########--

if (CLIENT) then include("gmodadminsuite/cl_country_codes.lua") end


--######## COMMANDS ########--

local CmdRegistrations = {}
function GAS:RegisterCommand(text, module_name)
	if (GAS.Commands and GAS.Commands.Loaded) then
		GAS.Commands:RegisterCommand(text, module_name)
	else
		table.insert(CmdRegistrations, {text, module_name})
	end
end
GAS:hook("gmodadminsuite:Commands:Loaded", "CommandManagerLoaded", function()
	if (not CmdRegistrations) then return end
	for _,v in ipairs(CmdRegistrations) do
		GAS.Commands:RegisterCommand(unpack(v))
	end
	CmdRegistrations = nil
end)

--######## REGISTRY TABLES ########--

include("gmodadminsuite/sh_registry_tbl.lua")

--######## XEON ########--

if (SERVER) then include("gmodadminsuite/sv_xeon.lua") end

--######## INCLUDE FILES ########--

function GAS:Init()
	include("gmodadminsuite/sh_modules.lua")
	include("gmodadminsuite/sh_permissions.lua")

	if (CLIENT) then
		include("gmodadminsuite/cl_menubar.lua")
		include("gmodadminsuite/cl_contextmenu.lua")
		include("gmodadminsuite/cl_selection_prompts.lua")
		include("gmodadminsuite/cl_menu.lua")
	else
		include("gmodadminsuite/sv_menu.lua")
	end
end
GAS:Init()
--lua/gmodadminsuite/lang/english.lua:
return gluapack()()
--lua/gmodadminsuite/lang/english.lua:
return {
	Name = "English",
	Flag = "flags16/gb.png",
	Phrases = function() return {

		open_menu                 = "Open Menu",
		menu_nopermission         = "Sorry, but you do not have permission to access the GmodAdminSuite menu.",
		menu_unknown_module       = "Sorry, but a module with that name is not installed or does not exist.",
		menu_disabled_module      = "Sorry, but that module is disabled.",
		menu_module_nopermission  = "Sorry, you don't have permission to access this module.",
		open_gas                  = "Open GmodAdminSuite",
		module_shortcut           = "Module Shortcut",
		module_reset_data		  = "Reset Module Position/Size",
		module_shortcut_info      = [[You can quickly access this GmodAdminSuite module through console and chat commands.

		To access the module through your console, type: %s
		To access the module through chat, type: %s

		Additionally, you can bind a key on your keyboard to a specific module.
		To do this, in your console, type: %s

		Make sure to replace KEY with a key on your keyboard of your choice.
		%s]],
		close                     = "Close",
		wiki                      = "Wiki",
		licensee                  = "Licensee",
		support                   = "Support",
		module_shop               = "Module Shop",
		welcome                   = "Welcome",
		operator                  = "Operator",
		script_page               = "Script Page",
		wiki                      = "Wiki",
		no_modules_available      = "No modules available!",
		no_modules_available_info = [[Sorry, but there aren't any GmodAdminSuite modules available for you to use.
		You may have insufficient permissions to use any, or none are enabled.]],
		custom_ellipsis           = "Custom...",
		usergroup_ellipsis        = "Usergroup...",
		steamid_ellipsis          = "SteamID...",
		enter_steamid_ellipsis    = "Enter SteamID...",
		by_distance               = "By Distance",
		by_usergroup              = "By Usergroup",
		by_team                   = "By Team",
		by_name                   = "By Name",
		right_click_to_focus      = "Right click to focus",
		unknown                   = "Unknown",
		utilities                 = "Utilities",
		player_management         = "Player Management",
		administration            = "Administration",
		s_second                  = "1 second",
		s_seconds                 = "%d seconds",
		s_minute                  = "1 minute",
		s_minutes                 = "%d minutes",
		s_hour                    = "1 hour",
		s_hours                   = "%d hours",
		second_ago                = "1 second ago",
		seconds_ago               = "%d seconds ago",
		minute_ago                = "1 minute ago",
		minutes_ago               = "%d minutes ago",
		hour_ago                  = "1 hour ago",
		hours_ago                 = "%d hours ago",
		just_now                  = "Just now",
		click_to_focus            = "Click to focus",
		right_click_to_focus      = "Right click to focus",
		add_steamid               = "Custom SteamID",
		copied                    = "Copied!",
		settings                  = "Settings",
		add_steamid_help          = [[Enter a SteamID or SteamID64. Examples:
		SteamID: %s
		SteamID64: %s]],

		setting_default_module = "Default Module",
		setting_default_module_tip = "What module should be opened when the GmodAdminSuite main menu is opened?",
		none = "None",
		general = "General",
		localization = "Localization",
		setting_menu_voicechat = "Allow speaking (voice chat)\nwhen GAS menus are open",
		setting_menu_voicechat_tip = "GmodAdminSuite's menus do not block your voice chat key. If this option is on, just press your voice chat key to talk whilst in a menu.",
		use_gas_language = "Use GmodAdminSuite language",
		default_format = "Default Format",
		short_date_format = "Short Date Format",
		long_date_format = "Long Date Format",
		short_date_format_tip = "Date format used for shorter date formats\n\nThe default format automatically matches the date format of your region (North America, Europe, etc.)",
		long_date_format_tip = "Date format used for longer date formats",
		permissions = "Permissions",
		module_enable_switch_tip = "Changes to this will only apply after a server restart/map change",
		enabled = "Enabled",
		modules = "Modules",
		permissions_help = [[GmodAdminSuite utilizes an open-source permissions library called OpenPermissions, which was developed by Billy for GAS. It provides optimized permissions handling for advanced systems running on any sized server.
		
		OpenPermissions is where you will control what groups can access what modules, and what they can do with those modules.
		It can be opened at any time by typing "!openpermissions" in chat or "openpermissions" in console.

		For help & info, click the "Help" tab in the OpenPermissions menu.]],
		website = "Website",
		fun = "Fun",

		bvgui_copied               = "Copied!",
		bvgui_open_context_menu    = "Open Context Menu",
		bvgui_open_steam_profile   = "Open Steam Profile",
		bvgui_right_click_to_focus = "Right click to focus",
		bvgui_click_to_focus       = "Click to focus",
		bvgui_unknown              = "Unknown",
		bvgui_no_data              = "No data",
		bvgui_no_results_found     = "No results found",
		bvgui_done                 = "Done",
		bvgui_enter_text_ellipsis  = "Enter text...",
		bvgui_loading_ellipsis     = "Loading...",
		bvgui_pin_tip              = "Press ESC to click the menu again",
		bvgui_click_to_render      = "Click to render",
		bvgui_teleport             = "Teleport",
		bvgui_inspecting           = "Inspecting",
		bvgui_inspect              = "Inspect",
		bvgui_screenshot           = "Screenshot",
		bvgui_ok                   = "OK",
		bvgui_screenshot_saved     = "Screenshot Saved",
		bvgui_screenshot_saved_to  = "The screenshot has been saved to %s on your computer",
		bvgui_reset                = "Reset",
		bvgui_right_click_to_stop_rendering = "Right click to stop rendering",

		settings_player_popup_close 		= "Close Player Popups when\nthey lose focus",
		settings_player_popup_close_tip	 	= "Should Player Popups close when you click on a different menu?"
} end }
--lua/gmodadminsuite/modules/commands/lang/french.lua:
return {
	Name = "French",
	Flag = "flags16/fr.png",
	Phrases = function() return {

		module_name = "Command Manager",

		no_permission = "Désolé, mais vous n'avez pas la permission d'utiliser cette commande.",
		commands = "Commandes",
		command = "Commande",
		action = "Action",
		help = "Aide",
		new_command = "+ Nouvelle Commande",
		wiki = "Wiki",
		run_command = "Executer Commande",
		edit_command = "Modifier Commande",
		form_help = "Texte d'Assistance... (facultatif)",
		form_help_tip = "C'est le texte qui sera affiché dans le menu des commandes, dans le colonne \"Aide\".",
		select_action = "Selectionnez une Action...",
		hide_in_chat = "Masquer dans le chat ?",
		hide_in_chat_tip = "Si coché, le commande ne sera pas affiché dans le chat lorsque quelqu'un l'écrira.",
		finished = "Terminé",
		commands_case_insensitive = "Toutes les commandes ne sont pas sensibles aux majuscules.",
		ok = "OK",
		cannot_create_command = "Impossible de créer la commande !",
		cancel = "Annuler",
		delete_command = "Supprimer Commander",
		copy_command = "Copier Commande",
		permissions = "Permissions",
		permissions_editor = "Ouvrir l'Editeur de Permissions",
		permissions_tip = "Vous autorise à whitelister et blacklister les groupes d'utilisateurs et les équipes/métiers.",
		can_access_command = "Peu accéder à la commande",
		teams = "Equipes",
		usergroups = "Groupes d'Utilisateurs",
		anyone_can_access = "N'importe qui peut accéder à cette commande",
		whitelisted_only = "Seuls les membres whitelistés peuvent accéder à cette commande",
		non_blacklisted_only = "Seuls les membres non-blacklistés peuvent accéder à cette commande",
		whitelisted_and_blacklisted = "Seuls les membres whitelistés (excepté les blacklistés) peuvent accéder à cette commande",
		custom_usergroup = "+ Groupe d'Utilisateurs Custom",
		custom_usergroup_text = "Entrez groupe d'utilisateurs",
		custom_usergroup_placeholder = "Groupe d'Utilisateurs...",
		reason_usergroup_blacklisted = "Votre groupe d'utilisateurs est blacklisté sur cette commande.",
		reason_usergroup_not_whitelisted = "Votre group d'utilisateur n'est pas whitelisté sur cette commande.",
		reason_team_blacklisted = "Votre équipe est blacklistée sur cette commande.",
		reason_team_not_whitelisted = "Votre équipe n'est pas whitelistée sur cette commande.",
		saved_exclamation = "Sauvegardé !",
		set_position = "Définir Position",
		position_set = "Position Définie !",
		set_position_instruction = "Go to the desired position and face in the desired direction",
		set_position_instruction_2 = "When finished, unpin the menu and the position and angle will then be saved",

		action_open_commands_menu = "Ouvrir le menu des commandes",
		action_command = "Executer commande console",
		action_chat = "Envoyer un message textuel",
		action_website = "Ouvrir Site Web",
		action_lua_function_sv = "Fonction Lua Client",
		action_lua_function_cl = "Fonction Lua Serveur",
		action_gas_module = "Ouvrir Module GAS",
		action_teleport = "Téléportation",

		form_action_command = "Commande console à éxécuter",
		form_action_chat = "Message textuel à envoyer",
		form_action_website = "Site Web à ouvrir",
		form_action_lua_function_sv = "Fonction Lua à éxécuter\nCôté Serveur",
		form_action_lua_function_cl = "Fonction Lua à éxécuter\nCôté Client",
		form_action_gas_module = "Module GAS à ouvrir",
		form_action_teleport = "Téléportation",

		error_command_exists = "Une commande avec ce nom existe déjà !",
		error_no_command = "Vous n'avez entré aucune commande.",
		error_no_command_execute = "Vous n'avez pas entré la commande à éxécuter.",
		error_no_action = "Vous n'avez pas séléctionné d'action pour cette commande.",
		error_invalid_website = "Le site web spécifié n'est pas une adresse valide.",
		error_no_lua_function = "Vous n'avez pas séléctionné de Fonction Lua à éxécuter.",
		error_no_gas_module = "Vous n'avez pas séléctionné de module GAS à ouvrir.",
		error_no_position_set = "Vous n'avez pas spécifié de position et d'angle pour cette téléportation.",

} end }
--addons/gmodadminsuite-jobwhitelist-1.3.4/lua/gmodadminsuite/modules/jobwhitelist/lang/french.lua:
return {
	Name = "French",
	Flag = "flags16/fr.png",
	Phrases = function() return {

		module_name = "Billy's Whitelist",

		insufficient_permissions_jobwhitelist = "La Whitelist/Blacklist ne sont pas activées pour ce métier,\net vous n'avez pas les permissions suffisantes pour les activer.",
		no_data                               = "Aucune Données",
		type                                  = "Type",
		value                                 = "Valeur",
		name                                  = "Nom",
		added_by                              = "Ajouté Par",
		click_delete_entry_tip                = "Cliquez sur une entrée pour la supprimer !",
		copied                                = "Copié !",
		delete_entry                          = "Supprimer Entrée",
		add_player                            = "Ajouter un Joueur",
		add_usergroup                         = "Ajouter Groupe d'Utilisateurs",
		add_lua_function                      = "Ajouter Fonction Lua",
		lua_function                          = "Fonction Lua",
		script_page                           = "Page du Script",
		wiki                                  = "Wiki",
		jobs                                  = "Métiers",
		whitelist                             = "Whitelist",
		blacklist                             = "Blacklist",
		settings                              = "Paramètres",
		enable_whitelist                      = "Activer Whitelist",
		enable_blacklist                      = "Activer Blacklist",
		default_whitelisted                   = "Whitelisté par défaut",
		default_blacklisted                   = "Blacklisté par défaut",
		disable_autoswitch                    = "Désactiver l'AutoSwitch pour ce métier",
		players                               = "Joueurs",
		job                                   = "Métier",
		usergroup                             = "Groupes d'Utilisateurs",
		distance                              = "Distance",
		click_for_options_tip                 = "Cliquez pour les paramètres !",
		refreshing_ellipsis                   = "Actualisation...",
		refreshing_in_1_second                = "Actualisation dans 1 seconde",
		refreshing_in_seconds                 = "Actualisation dans %s secondes",
		operator                              = "Opérateur",
		OperatorsSkipWhitelists_help          = "Lorsque activé, les Opérateurs outre-passeront les whitelists.",
		OperatorsSkipBlacklists_help          = "Lorsque activé, les Opérateurs outre-passeront les blacklists.",
		ShowUnjoinableJobs_help               = "Lorsque désactivé, les joueurs ne verront pas les métiers dont ils ne sont pas whitelistés, ou dont ils sont blacklistés, dans le menu F4.\nSi activé, les joueurs verront le menu F4 dans son état normal.",
		ContextMenu_help                      = "Lorsque activé, les joueurs pourront interragir avec bWhitelist à travers le menu contextuel (recommandé)\nLorsque désactivé, cette fonctionnalité est désactivée.",
		off                                   = "Innactif",
		FunctionMenuKey_help                  = "Vous autorise à assigner une touche de fonction au menu bWhitelist (F1/F2/F3/F4)",
		AutoSwitch_help                       = "Lorsque activé, quand un joueur est whitelisté, il est automatiquement assigné à ce métier. (Fonctionne seulement avec les SteamIDs)",
		SwitchJobOnUnwhitelist_help           = "Lorsque activé, quand un joueur est retiré de la whitelist de son métier, il est automatiquement assigné au métier par défaut. (Fonctionne seulement avec les SteamIDs)",
		SwitchJobOnBlacklist_help             = "Lorsque activé, quand un joueur est blacklisté de son métier, il est automatiquement assigné au métier par défaut. (Fonctionne seulement avec les SteamIDs)",
		NotWhitelistedMsg_help                = "C'est le message affiché lorsqu'un joueur essaie de rejoindre un métier auquel il n'est pas whitelisté.",
		BlacklistedMsg_help                   = "C'est le message affiché lorsqu'un joueur essaie de rejoindre un métier auquel il est blacklisté.",
		NotifyWhitelisted_help                = "Active les notifications lorsqu'un joueur vient d'être whitelisté sur un métier. (Fonctionnement seulement avec les SteamIDs)",
		NotifyWhitelisted_Msg_help            = "C'est le message affiché lorsqu'un joueur vient d'être whitelisté sur un métier.",
		NotifyUnwhitelisted_help              = "Active les notifications lorsqu'un joueur vient d'être retiré de la whitelist d'un métier. (Fonctionnement seulement avec les SteamIDs)",
		NotifyUnwhitelisted_Msg_help          = "C'est le message affiché lorsqu'un joueur vient d'être retiré de la whitelist d'un métier.",
		NotifyBlacklisted_help                = "Active les notifications lorsqu'un joueur vient d'être blacklisté d'un métier. (Fonctionnement seulement avec les SteamIDs)",
		NotifyBlacklisted_Msg_help            = "C'est le message affiché lorsqu'un joueur vient d'être blacklisté d'un métier.",
		NotifyUnblacklisted_help              = "Active les notifications lorsqu'un joueur vient d'être retiré de la blacklist d'un métier. (Fonctionnement seulement avec les SteamIDs)",
		NotifyUnblacklisted_Msg_help          = "C'est le message affiché lorsqu'un joueur vient d'être retiré de la blacklist d'un métier.",
		permissions                           = "Permissions",
		modify_whitelist                      = "Modifier Whitelist",
		modify_blacklist                      = "Modifier Blacklist",
		enable_disable_whitelist              = "Activer/Désactiver Whitelist",
		enable_disable_blacklist              = "Activer/Désactiver Blacklist",
		job_category                          = "Catégorie du Métier",
		steamid                               = "SteamID",
		all_jobs                              = "TOUS LES METIERS",
		save                                  = "Sauvegarder",
		all_jobs_in_category                  = "Tous les métiers dans la catégorie",
		job_categories                        = "Catégories de métier",
		usergroups                            = "Groupes d'Utilisateurs",
		steamids                              = "SteamIDs",
		lua_functions                         = "Fonctions Lua",
		usergroup_ellipsis                    = "Groupes d'Utilisateurs...",
		steamid_ellipsis                      = "SteamID...",
		enter_steamid_ellipsis                = "Entrez SteamID...",
		resets                                = "Réinitialiser",
		enable_buttons                        = "Activer Boutons",
		reset_config                          = "Réinitialiser Config",
		done_exclamation                      = "Terminé !",
		reset_permissions_config              = "Réinitialiser Config Permissions",
		disable_all_whitelists                = "Désactiver Toutes les Whitelists",
		disable_all_blacklists                = "Désactiver Toutes les Blacklists",
		destroy_whitelist                     = "Détruire les Données de Whitelist...",
		destroy_blacklist                     = "Détruire les Données de Blacklist...",
		destroy_all_data                      = "Détruire Toutes les Données",
		destroy_all_data_help                 = "Détruits toutes les données de whitelist et de blacklist, désactive toutes les whitelists et blacklists mais ne réinitialise pas la configuration.",
		reset_everything                      = "Tout Réinitialiser",
		reset_everything_help                 = "Détruits toutes les données de whitelists et blacklists, désactive toutes les whitelists et blacklists et réinitialise la configuration.",
		disable_buttons                       = "Détruits les Boutons",
		open_menu                             = "Ouvrir Menu",
		add_to_whitelist                      = "Ajouter à la Whitelist",
		loading_ellipsis                      = "Chargement...",
		no_whitelists_available               = "Aucunes whitelists disponnibles !",
		add_to_blacklist                      = "Ajouter à la Blacklist",
		no_blacklists_available               = "Aucunes blacklists disponnibles !",
		click_to_focus                        = "Clic pour faire le focus",
		right_click_to_focus                  = "Clic Droit pour faire le focus",
		copy_steamid                          = "Copier SteamID",
		copy_steamid64                        = "Copier SteamID64",
		copy                                  = "Copier",
		default_team_error                    = "Vous ne pouvez pas whitelister/blacklister ce métier car c'est le métier de base.",
		saved_exclamation                     = "Sauvegardé !",
		whitelisted                           = "Whitelisté",
		blacklisted                           = "Blacklisté",
		choose_faction                        = "Choisissez une fonction",
		faction_not_permitted                 = "(Vous n'êtes pas autorisé à rejoindre cette faction)",
		factions                              = "Factions",
		new_faction                           = "Nouvelles Faction",
		destroy_faction_data                  = "Détruire les Données de Faction",
		destroy_faction_data_help             = "Détruits toutes les données de faction (ex: what factions players have chosen)",
		reset_factions_config                 = "Réinitialiser Config des Factions",
		logo_url                              = "URL du Logo... (PNG)",
		faction_name                          = "Nom de la Faction",
		faction_name_tip                      = "Le nom de cette faction",
		description                           = "Description",
		faction_description_tip               = "Les joueurs verront la description lorsqu'ils survoleront la faction avec leur curseur",
		ShowIfNotPermitted                    = "Afficher, même si non-autorisé",
		ShowIfNotPermitted_help               = "Si le joueur n'est pas autorisé à rejoindre la faction, est-ce que cela doit être affiché ?",
		SetTeam                               = "Métier défini pour le joueur",
		SetTeam_help                          = "A quel métier le joueur doit-il est assigné après avoir choisit sa faction ?",
		WhitelistedTo                         = "Whitelisté pour",
		WhitelistedTo_help                    = "A quels métiers de cette faction le joueur doit-il être whitelisté ?",
		BlacklistedFrom                       = "Blacklisté de",
		BlacklistedFrom_help                  = "De quels métiers de cette faction le joueur doit-il est blacklisté ?",
		delete_faction_confirm                = "Etes-vous certain de vouloir supprimer cette faction ?",
		confirm_action                        = "Confirmer Action",
		yes                                   = "Oui",
		no                                    = "Non",
		save_faction                          = "Sauvegarder Faction",
		delete_faction                        = "Supprimer Faction",
		factions_ShowOnFirstJoin              = "Afficher à la première connexion",
		factions_ShowOnFirstJoin_help         = "Afficher le menu de séléction des factions à la première connexion d'un joueur ?",
		factions_ShowOnEveryJoin              = "Afficher à chaque connexion",
		factions_ShowOnEveryJoin_help         = "Afficher le menu de séléction des factions à chaque connexion d'un joueur ?",
		factions_ShowOnEverySpawn             = "Afficher à chaque apparition",
		factions_ShowOnEverySpawn_help        = "Afficher le menu de séléction des factions à chaque apparition d'un joueur ?",
		factions_HelpText                     = "Conseil d'Aide",
		factions_HelpText_help                = "Texte à afficher lorsque le joueur ne survole aucune faction avec son curseur",
		factions_OnPopupSound                 = "Son de Popup",
		factions_OnPopupSound_help            = "Son à jouer lorsque le menu de séléction des factions est ouvert",
		factions_OnHoverSound                 = "Son de Survol",
		factions_OnHoverSound_help            = "Son à jouer lorsqu'une faction est survolée par le curseur du joueur",
		factions_OnSelectionSound             = "Son de Séléction",
		factions_OnSelectionSound_help        = "Son à jouer lorsqu'une faction est séléctionnée",
		factions_PermissionDeniedSound        = "Son Permission Refusée",
		factions_PermissionDeniedSound_help   = "Song à jouer lorsqu'une faction interdite est séléctionnée",
		enable_factions                       = "Activer Factions",
		edit_factions                         = "Modifier Factions",
		chat_command                          = "Commande du Chat",
		console_command                       = "Commande de Console",
		blank_to_disable                      = "Laissez vide pour désactiver",
		add_to_all_whitelists                 = "AJOUTER à toutes les whitelists",
		add_to_all_blacklists                 = "AJOUTER à toutes les blacklists",
		remove_from_all_whitelists            = "SUPPRIMER de toutes les whitelists",
		remove_from_all_blacklists            = "SUPPRIMER de toutes les blacklists",
		bulk_actions                          = "Action de Masse",
		add                                   = "Ajouter",
		remove                                = "Supprimer",
		remove_player                         = "Supprimer Joueur",
		remove_usergroup                      = "Supprimer Groupe d'Utilisateurs",
		remove_lua_function                   = "Supprimer Fonction Lua",
		convert_old_data                      = "Convertir anciennes données de bWhitelist",
		offline                               = "Hors Ligne",
		add_usergroup                         = "Ajouter Groupe d'Utilisateurs",
		no_permission_action                  = "Vous n'avez pas la permission de faire cela !",

} end }
--addons/gmodadminsuite-logging-2.4.8/lua/gmodadminsuite/modules/logging/lang/english.lua:
return {
	Name = "English",
	Flag = "flags16/gb.png",
	Phrases = function() return {

		module_name = "Billy's Logs",

		--####################### UI PHRASES #######################--

		no_data                     = "No data",
		add_to_evidence_box         = "Add to Evidence Box",
		livelogs_show_logs_for      = "Show Logs For",
		background_color            = "Background Color",
		health_abbrieviated         = "%d HP",
		livelogs                    = "Live Logs",
		exit_deep_storage           = "Exit Deep Storage",
		log_formatting              = "Log Formatting",
		strings                     = "Strings",
		when                        = "When",
		copy_log                    = "Copy Log",
		evidence_box                = "Evidence Box",
		livelogs_position_x         = "X Position (pixels)",
		width                       = "Width",
		color                       = "Color",
		help                        = "Help",
		apply_filter                = "Apply Filter",
		live_log_antispam           = "< discarded live log for antispam >",
		settings                    = "Settings",
		loading_ellipsis            = "Loading...",
		livelogs_enabled            = "Enable Live Logs",
		armor_abbrieviated          = "%d ARM",
		deep_storage                = "Deep Storage",
		all_logs                    = "All Logs",
		logs                        = "Logs",
		padding                     = "Padding (pixels)",
		livelogs_position_y         = "Y Position (pixels)",
		livelogs_rows_help          = "What is the maximum amount of logs that should be displayed?",
		livelogs_rows               = "Rows (Log Amount)",
		livelogs_color_help         = "Should logs be displayed in color?",
		export_to_clipboard         = "Export to clipboard",
		players                     = "Players",
		script_page                 = "Script Page",
		wiki                        = "Wiki",
		module                      = "Module",
		modules                     = "Modules",
		localization                = "Localization",
		view_deep_storage           = "View Deep Storage",
		copied                      = "Copied!",
		operator                    = "Operator",
		log                         = "Log",
		reset_to_defaults           = "Reset to Defaults",
		livelogs_show_logs_for_help = "How many seconds should logs be shown for?\nSet to 0 for forever.",
		advanced_search             = "Advanced Search",
		quick_search                = "Quick Search",
		quick_search_ellipsis       = "Quick Search...",
		entities                    = "Entities",
		tutorial                    = "Tutorial",
		clear_filters               = "Clear Filters",
		clear_filter                = "Clear Filter",
		manual_steamid_ellipsis     = "Manual SteamID...",
		no_results_found            = "No results found",
		add_player                  = "+ Add Player",
		add_module                  = "+ Add Module",
		add_entity                  = "+ Add Entity",
		add_string                  = "+ Add String",
		modules_search_tooltip      = "What module(s) do you want to include? (leave blank for any module)",
		players_search_tooltip      = "What player(s) are you looking for? (leave blank for any player)",
		entities_search_tooltip     = "What entities(s) are you looking for? (SWEPs, SENTs, vehicles, props, classes, etc.)",
		strings_search_tooltip      = "Is there any specific text that you are looking for?",
		class_name_ellipsis         = "Class name...",
		add_string_popup_title      = "Add String",
		add_string_popup_text       = "Enter the text you're trying to find.",
		text_ellipsis               = "Text...",
		click_to_focus              = "Click to focus",
		right_click_to_focus        = "Right click to focus",
		highlight_color             = "Highlight Color",
		weapon_color                = "Weapon Color",
		money_color                 = "Money Color",
		vehicle_color               = "Vehicle Color",
		entity_color                = "Entity Color",
		health_color                = "Health Color",
		armor_color                 = "Armor Color",
		usergroup_color             = "Usergroup Color",
		unavailable_color           = "Unavailable/Unknown Color",
		learn_more                  = "Learn more",
		player_combats              = "Player Combats",
		took_damage                 = "[took %d dmg]",
		open_pvp_event_report       = "Open PvP Event Report",
		remove                      = "Remove",
		greedy                      = "Greedy",
		greedy_tip                  = "If your search is greedy, it will attempt to match as many logs as possible. If it's not greedy, it will attempt to match as little logs as possible.",
		log_colouring               = "Log Coloring",
		done_exclamation            = "Done!",
		module_settings             = "Module Settings",
		storage_settings            = "Storage Settings",
		third_party_addons          = "Third Party Addons",
		pvp_settings                = "PvP Logging Settings",
		live_logs_settings          = "Live Logs Settings",
		logging_settings            = "Logging Settings",
		enabled_modules             = "Enabled Modules",
		permissions                 = "Permissions",
		gamemode_modules            = "Gamemode Modules",
		saved_exclamation           = "Saved!",
		save_settings               = "Save Settings",
		weapon_class                = "Weapon class",
		enter_weapon_class          = "Enter the class name of the weapon.\nDon't know it? Open your spawn menu, right click a weapon and click \"Copy to clipboard\"",
		save                        = "Save",
		add_new                     = "+ Add New",
		enabled                     = "Enabled",
		website                     = "Website",
		name                        = "Name",
		usergroups                  = "Usergroups",
		everyone                    = "Everyone",
		all_modules                 = "All modules",
		all_teams                   = "All teams",
		add_usergroup               = "Add Usergroup",
		cl_sv_tooltip               = [[cl represents the time taken for your computer to request logs, receive them, process them and display them
		
		sv represents the time taken for the server to retrieve logs from memory/the database, process them and then send them to you

		Servers using MySQL will see a higher sv value due to the latency between the MySQL server and Garry's Mod]],
		deep_storage_help           = [[Deep Storage is a bLogs feature that improves performance by storing logs from previous server sessions separately from the current session's.

		After clicking "View Deep Storage", you will only see logs from previous server sessions.
		You can view the current session's logs by clicking the button below again or reopening the menu.

		NOTE: Damage logs are not included in deep storage and are deleted on every restart to save disk space]],

		damage = "Damage",

		class_type_other = "Other",
		class_type_player = "Player",
		class_type_team = "Team",
		class_type_weapon = "Weapon",
		class_type_vehicle = "Vehicle",
		class_type_damage = "Damage Type",
		class_type_usergroup = "Usergroup",
		class_type_prop = "Prop",
		class_type_ragdoll = "Ragdoll",
		class_type_country = "Country",
		class_type_ammo = "Ammo",
		class_type_role = "Role",
		class_type_entity = "Entity",
		class_selector = "Class Selector",
		custom_class = "Custom Class",
		class_type = "Class Type",
		value = "Value",
		search = "Search",
		check_all = "Check All",
		uncheck_all = "Uncheck All",
		general = "General",
		class_search_title = "Class Search",
		class_search_text = "Enter the name or part of a name of the class that you're looking for (case insensitive)",
		view_logs = "View Logs",
		open_menu = "Open Menu",
		licensed_to = "Licensed to %s",

		pvp_event_report = "PvP Event Report",
		victim = "Victim",
		instigator = "Instigator",
		victim_tag_tip = "This is the person who the instigator started the combat against",
		instigator_tag_tip = "This is the person who started the combat",
		victim_abbr = "V",
		instigator_abbr = "I",
		time = "Time",
		linked_events = "Linked Events",

		deleted_team = "(DELETED TEAM)",

		unknown = "Unknown",
		cancel = "Cancel",

		deep_storage_advanced_search_warning = "WARNING: Advanced Search actually searches Deep Storage internally for performance reasons, which means recently created logs will not be found by Advanced Search for a short period of time.",

		--####################### SETTINGS #######################--

		Player_RecordTeam = "Show player team in logs",
		Player_RecordUsergroup = "Show player usergroup in logs",
		Player_RecordHealth = "Show player health in logs",
		Player_RecordArmor = "Show player armor in logs",
		Player_RecordWeapon = "Show player weapon in logs",
		Player_RecordWeapon_DoNotRecord = "Player weapon filter",
		Player_RecordWeapon_DoNotRecord_help = "If you want to show player weapons in the logs, use this option to filter weapons you don't want to see (such as physgun, toolgun, etc.)",

		OverrideMoneyFormat = "Override default money formatting",
		OverrideMoneyFormat_help = "When this is off, the gamemode's money formatting will be used.\nWhen this is on, you can use the option below to make your own money format.",
		MoneyFormat = "Money Format",
		MoneyFormat_help = "Enter how you want money to appear, and insert \"%s\" (without quotes) where you want the number of money to appear.",

		DeepStorageEnabled = "Deep Storage enabled",
		DeepStorageEnabled_help = "Disabling Deep Storage can significantly improve performance on servers that are not using MySQL.",

		DeepStorageCommitOnShutdown = "Commit Deep Storage on server shutdown",
		DeepStorageCommitOnShutdown_help = "If enabled, any deep storage logs that haven't been committed to the database will be committed on server shutdown/map change, but this can cause that operation to hang",

		DeepStorageCommitPeriod = "Deep storage commit period",
		DeepStorageCommitPeriod_help = "How often (in seconds) should deep storage logs be committed to the database? This setting does nothing without MySQL.",

		DeepStorageTooOld = "Max age of deep storage logs",
		DeepStorageTooOld_help = "How many days old can a log in deep storage be before it is deleted? (saves disk space)\nSet to 0 to never delete logs in deep storage.",

		LiveLogsEnabled = "Live Logs Enabled",
		LiveLogsEnabled_help = "Live logs can be a performance hit for large servers; you can disable the feature completely here.",
		LiveLogsIn10Seconds = "Max live logs in 10 seconds",
		LiveLogsIn10Seconds_help = "How many live logs can be sent before additional logs are blocked for antispam?",
		NotifyLiveLogsAntispam = "Notify antispam",
		NotifyLiveLogsAntispam_help = "Should users be notified that a live log has been discarded for antispam?",

		TimeBetweenPvPEvents = "Time between PvP events",
		TimeBetweenPvPEvents_help = "When players start combat, it creates a \"PvP event\", when no further combat has occured in a certain amount of seconds, the PvP event is treated as finished and committed to the logs. How many seconds should bLogs wait before doing this?",
		NonPvPWeapons = "PvP weapons filter",
		NonPvPWeapons_help = "What weapons shouldn't be treated as PvP weapons?",

		server_restart_required = "NOTE: Changes to these settings will apply after a server restart.",

		gamemode_modules_tip = [[bLogs supports a plethora of gamemodes.
		However, sometimes bLogs may have trouble detecting whether you are running a certain gamemode.
		In this screen, you can force bLogs to think that you are running a certain gamemode.

		Unchecked = Default behaviour
		Checked = Forced on
		Crossed = Forced off

		Please note that some gamemodes DERIVE from Sandbox, this means they use Sandbox's spawn menu, toolgun, etc.
		For gamemodes like DarkRP which derive from Sandbox, it is recommended that you leave Sandbox to its default detection.]],

		third_party_addons_tip = [[bLogs supports a plethora of third party addons.
		However, sometimes bLogs may have trouble detecting whether you have a certain third party addon installed.
		In this screen, you can force bLogs to think that you have certain third party addons installed.

		Unchecked = Default behaviour
		Checked = Forced on
		Crossed = Forced off]],

		edit_discord_webhooks = "Edit Discord Webhooks",
		webhook_name = "Webhook Name",
		webhook_name_tip = "Enter the name of your webhook.\nThis is just an identifier for the webhook, you'll enter the URL in the next screen.",
		webhook = "Webhook",
		webhook_url = "Webhook URL",
		webhook_url_tip = "Copy the URL of your Discord webhook and paste it here.",
		copy_webhook = "Copy Webhook",

		can_access_module = "Can Access Module",
		can_access_all_modules = "Can Access ALL Modules",
		all_usergroups = "All usergroups",
		all_jobs_in_category = "All jobs in category",
		all_teams_in_category = "All teams in category",
		teams = "Teams",
		permissions_tip = "Unchecked = Inherits from \"%s\"\nChecked = Allowed to use module\nCrossed = Forbidden to use module",
		all_modules_tip = "Permissions are inherited from this section unless overrided.",

		wipes_and_resets = "Wipes & Resets", -- wipes as in data wipes
		disable_buttons = "Disable Buttons",
		enable_buttons = "Enable Buttons",
		wipe_deepstorage = "Wipe Deep Storage",
		wipe_session = "Wipe Session Logs",
		wipe_all_logs = "Wipe All Logs",
		reset_config = "Reset config",

		vehicle_driver = "Driver:",
		data = "Data",
		weapons = "Weapons",
		props = "Props",
		ragdolls = "Ragdolls",
		money = "Money",
		countries = "Countries",
		ammo = "Ammo",
		roles = "Roles",
		vehicles = "Vehicles",

		flag_ongoing = "Ongoing Event",
		flag_finished = "Event Finished",
		flag_superadmin = "Involves Superadmin",
		flag_admin = "Involves Admin",
		flag_friendly_fire = "Friendly Fire",
		flag_law_enforcement = "Involves Law Enforcement",
		flag_instigator_death = "Instigator Died",
		flag_victim_death = "Victim Died",
		flag_vehicle = "Involves Vehicle(s)",
		flag_world = "Involves the Map",
		flag_props = "Involves Props",
		flag_team_switched = "Team Switch Occured",
		flag_disconnect = "Player Disconnected During Combat",
		flag_linked = "Linked to Other PvP Events",

		event_start = "Event Start",
		event_end = "Event End",

		dead_tag = "[DEAD]",

		DmgTooltip_Victim = "% of total PvP event damage VICTIM was responsible for",
		DmgTooltip_Instigator = "% of total PvP event damage INSTIGATOR was responsible for",
		DmgTooltip_Other = "% of total PvP event damage which is miscellaneous",

		--####################### LOG PHRASES #######################--
		Logs = {
			round_start     = "ROUND START",
			round_preparing = "PREPARING ROUND",
			round_end       = "ROUND ENDED",

			connected                                      = "{1} connected",
			connected_from_country                         = "{1} connected from {2}",
			finished_connecting                            = "{1} finished connecting",
			respawned                                      = "{1} respawned",
			disconnected                                   = "{1} disconnected ({2})",
			picked_up_weapon                               = "{1} picked up weapon {2}",
			picked_up_item                                 = "{1} picked up item {2}",
			prop_killed_self                               = "{1} killed themselves with their prop {2}",
			prop_killed_other                              = "{1} was killed by prop created by {2} ({3})",
			prop_killed_world                              = "{1} was killed by world prop {2}",
			prop_damaged_self                              = "{1} damaged themselves for {2} damage with their prop {3}",
			prop_damaged_other                             = "{1} was damaged by prop created by {2} for {3} damage ({4})",
			prop_damaged_world                             = "{1} was damaged by world prop {2} for {3} damage",
			toolgun_used_their_ent                         = "{1} used tool {2} on their {3}",
			toolgun_used_other_ent                         = "{1} used tool {2} on {3} created by {4}",
			toolgun_used_world_ent                         = "{1} used tool {2} on {3}",
			spawned_effect                                 = "{1} spawned effect {2}",
			spawned_npc                                    = "{1} spawned NPC {2}",
			spawned_prop                                   = "{1} spawned prop {2}",
			spawned_ragdoll                                = "{1} spawned ragdoll {2}",
			spawned_sent                                   = "{1} spawned SENT {2}",
			spawned_swep                                   = "{1} spawned SWEP {2}",
			spawned_vehicle                                = "{1} spawned vehicle {2}",
			steam_name_changed                             = "{1} changed their Steam name from {2} to {3}",
			weapon_switched                                = "{1} switched weapons from {2} to {3}",
 
			murder_loot                                    = "{1} picked up loot",
 
			cinema_video_queued                            = "[{1}] {2} queued [{3}] \"{4}\" {5}",
 
			ttt_win_traitor                                = "Traitors win!",
			ttt_win_innocent                               = "Innocent win!",
			ttt_win_timelimit                              = "Innocent win - time limit reached!",
			ttt_bought                                     = "{1} bought {2}",
			ttt_karma                                      = "{1} was KICKED for low karma",
			ttt_foundbody                                  = "{1} found the body of {2}",
			ttt_founddna                                   = "{1} found the DNA of {2} on their {3}",
			ttt_founddna_corpse                            = "{1} found the DNA of {2} on their corpse",
 
			darkrp_agenda_updated                          = "{1} updated the {2} agenda to: {3}",
			darkrp_agenda_removed                          = "{1} removed the {2}",
			darkrp_arrest                                  = "{1} arrested {2}",
			darkrp_unarrest                                = "{1} released {2}",
			darkrp_batteringram_owned_success              = "{1} battering rammed the {2} of {3}",
			darkrp_batteringram_owned_door_success         = "{1} battering rammed the door of {2}",
			darkrp_batteringram_success                    = "{1} battering rammed an unowned {2}",
			darkrp_batteringram_door_success               = "{1} battering rammed an unowned door",
			darkrp_batteringram_owned_failed               = "{1} failed to battering ram the {2} of {3}",
			darkrp_batteringram_owned_door_failed          = "{1} failed to battering ram the door of {2}",
			darkrp_batteringram_failed                     = "{1} failed to battering ram an unowned {2}",
			darkrp_batteringram_door_failed                = "{1} failed to battering ram an unowned door",
			darkrp_cheque_dropped                          = "{1} dropped a cheque of {2} for {3}",
			darkrp_cheque_picked_up                        = "{1} cashed a cheque of {2} from {3}",
			darkrp_cheque_tore_up                          = "{1} tore up a cheque of {2} meant for {3}",
			darkrp_demoted                                 = "{1} demoted {2} for {3}",
			darkrp_demoted_afk                             = "{1} was demoted for being AFK",
			darkrp_door_sold                               = "{1} sold a door",
			darkrp_door_bought                             = "{1} bought a door",
			darkrp_money_dropped                           = "{1} dropped {2}",
			darkrp_money_picked_up                         = "{1} picked up {2}",
			darkrp_money_picked_up_owned                   = "{1} picked up {2} dropped by {3}",
			darkrp_hit_accepted                            = "{1} accepted a hit on {2} requested by {3}",
			darkrp_hit_completed                           = "{1} completed a hit on {2} which was requested by {3}",
			darkrp_hit_failed                              = "{1} failed a hit on {2} because {3}",
			darkrp_hit_requested                           = "{1} requested a hit on {2} through {3} for {4}",
			darkrp_job_changed                             = "{1} changed from {2} to {3}",
			darkrp_law_added                               = "{1} added law: {2}",
			darkrp_law_removed                             = "{1} removed law: {2}",
			darkrp_purchase                                = "{1} purchased {2} for {3}",
			darkrp_purchase_ammo                           = "{1} purchased {2} ammo for {3}",
			darkrp_purchase_shipment                       = "{1} purchased a shipment of x{2} {3} for {4}",
			darkrp_purchase_food                           = "{1} purchased food {2} for {3}",
			darkrp_weapons_checked                         = "{1} checked the weapons of {2}",
			darkrp_weapons_confiscated                     = "{1} confiscated the weapons of {2}",
			darkrp_weapons_returned                        = "{1} returned the confiscated weapons of {2}",
			darkrp_filed_warant                            = "{1} filed a warrant on {2} for: {3}",
			darkrp_warrant_cancelled                       = "{1} cancelled a warrant on {2}",
			darkrp_set_wanted                              = "{1} set {2} as wanted for {3}",
			darkrp_cancelled_wanted                        = "{1} cancelled the wanted status of {2}",
			darkrp_auto_cancelled_wanted                   = "{1} lost their wanted status",
			darkrp_starved                                 = "{1} starved",
			darkrp_pocket_added                            = "{1} put {2} in their pocket",
			darkrp_pocket_dropped                          = "{1} dropped {2} from their pocket",
			darkrp_rpname_change                           = "{1} changed their RP name from {2} to {3}",
			darkrp_started_lockpick_owned_entity           = "{1} started lockpicking {2} owned by {3}",
			darkrp_started_lockpick_unowned_entity         = "{1} started lockpicking unowned {2}",
			darkrp_started_lockpick_owned_door             = "{1} started lockpicking a door owned by {2}",
			darkrp_started_lockpick_unowned_door           = "{1} started lockpicking an unowned door",
			darkrp_started_lockpick_own_entity             = "{1} started lockpicking their {2}",
			darkrp_started_lockpick_own_door               = "{1} started lockpicking one of their doors",
			darkrp_successfully_lockpicked_owned_entity    = "{1} successfully lockpicked {2} owned by {3}",
			darkrp_successfully_lockpicked_unowned_entity  = "{1} successfully lockpicked unowned {2}",
			darkrp_successfully_lockpicked_owned_door      = "{1} successfully lockpicked a door owned by {2}",
			darkrp_successfully_lockpicked_unowned_door    = "{1} successfully lockpicked an unowned door",
			darkrp_successfully_lockpicked_own_entity      = "{1} successfully lockpicked their {2}",
			darkrp_successfully_lockpicked_own_door        = "{1} successfully lockpicked one of their doors",
			darkrp_failed_lockpick_owned_entity            = "{1} failed to lockpick {2} owned by {3}",
			darkrp_failed_lockpick_unowned_entity          = "{1} failed to lockpick unowned {2}",
			darkrp_failed_lockpick_owned_door              = "{1} failed to lockpick a door owned by {2}",
			darkrp_failed_lockpick_unowned_door            = "{1} failed to lockpick an unowned door",
			darkrp_failed_lockpick_own_entity              = "{1} failed to lockpick their {2}",
			darkrp_failed_lockpick_own_door                = "{1} failed to lockpick one of their doors",
			darkrp_changed_job                             = "{1} changed job from {2} to {3}",
			darkrp_added_law                               = "{1} added law: {2}",
			darkrp_removed_law                             = "{1} removed law: {2}",
			darkrp_sold_door                               = "{1} sold a door",
			darkrp_bought_door                             = "{1} bought a door",
			darkrp_dropped_money                           = "{1} dropped {2}",
			darkrp_picked_up_money                         = "{1} picked up {2}",
			darkrp_picked_up_money_dropped_by              = "{1} picked up {2} which was dropped by {3}",
			darkrp_gave_money                              = "{1} gave {2} to {3}",
			darkrp_afk_demoted                             = "{1} was demoted for being AFK",
			darkrp_lottery_started                         = "{1} started a lottery with an entry price of {2}",
			darkrp_lottery_ended                           = "{1} won {2} from the lottery!",
			darkrp_lottery_fail                            = "The lottery failed to find a winner",
 
			pvp_instigator_killed_noweapon                 = "{1} {2} finished combat and KILLED {3} {4} after {5}", -- after X seconds/minutes/hours
			pvp_instigator_killed_weapon                   = "{1} {2} finished combat using {3} and KILLED {4} {5} after {6}",
			pvp_instigator_killed_weapons                  = "{1} {2} finished combat using multiple weapons and KILLED {3} {4} after {5}",
			pvp_victim_killed_noweapon                     = "{1} {2} finished combat and GOT KILLED BY {3} {4} after {5}",
			pvp_victim_killed_weapon                       = "{1} {2} finished combat using {3} and GOT KILLED BY {4} {5} after {6}",
			pvp_victim_killed_weapons                      = "{1} {2} finished combat using multiple weapons and GOT KILLED BY {3} {4} after {5}",
			pvp_combat_noweapon                            = "{1} {2} finished combat with {3} {4} after {5}",
			pvp_combat_weapon                              = "{1} {2} finished combat using {3} with {4} {5} after {6}",
			pvp_combat_weapons                             = "{1} {2} finished combat using multiple weapons with {3} {4} after {5}",
			pvp_log_noweapon                               = "{1} hit {2} for {3} damage",
			pvp_log_weapon                                 = "{1} hit {2} for {3} damage using a {4}",
			pvp_killed                                     = "{1} killed {2}",
			pvp_vehicle_owned_killed                       = "{1} was hit & killed by {2} with no driver but owned by {3}",
			pvp_vehicle_owned_damaged                      = "{1} was hit for {2} damage by {3} with no driver but owned by {4}",
			pvp_vehicle_killed                             = "{1} was hit & killed by {2} with no driver and owned by nobody",
			pvp_vehicle_damaged                            = "{1} was hit for {2} damage by {3} with no driver and owned by nobody",
			pvp_killed_self                                = "{1} killed themselves",
			pvp_damaged_self                               = "{1} damaged themselves for {2} damage",
 
			changed_team                                   = "{1} changed team from {2} to {3}",
			command_used                                   = "{1}: {2}",
			warned_reason                                  = "{1} was warned by {2} for {3}",
			warned_noreason                                = "{1} was warned by {2}",
			warned_kicked                                  = "{1} was KICKED for breaching the active warning threshold",
			warned_banned                                  = "{1} was BANNED for breaching the active warning threshold",
			handcuffed                                     = "{1} handcuffed {2}",
			handcuffs_broken_by                            = "{1} broke {2} out of handcuffs",
			handcuffs_broken                               = "{1} broke out of their handcuffs",
			npc_health_bought                              = "{1} bought health from an NPC for {2}",
			npc_armor_bought                               = "{1} bought armor from an NPC for {2}",
			pac_outfit                                     = "{1} switched to PAC outfit {2}",
			party_chat                                     = "{1} ({2}): {3}",
			party_created                                  = "{1} created party {2}",
			party_join                                     = "{1} joined party {2}",
			party_join_request                             = "{1} requested to join party {2}",
			party_invite                                   = "{1} invited {2} to party {3}",
			party_leave                                    = "{1} left party {2}",
			party_kick                                     = "{1} kicked {2} from party {3}",
			party_disbanded                                = "{1} disbanded party {2}",
			party_abandoned                                = "{1} left the server and abandoned their party {2}",
			spraymesh                                      = "{1} used their spray {2}",
			starwarsvehicle_damage_owned_weapon            = "{1} damaged Star Wars vehicle {2} owned by {3} for {4} damage with {5}",
			starwarsvehicle_damage_owned                   = "{1} damaged Star Wars vehicle {2} owned by {3} for {4} damage",
			starwarsvehicle_damage_weapon                  = "{1} damaged Star Wars vehicle {2} for {3} damage with {4}",
			starwarsvehicle_damage                         = "{1} damaged Star Wars vehicle {2} for {3} damage",
			wac_damage_owned_weapon                        = "{1} damaged WAC aircraft {2} owned by {3} for {4} damage with {5}",
			wac_damage_owned                               = "{1} damaged WAC aircraft {2} owned by {3} for {4} damage",
			wac_damage_weapon                              = "{1} damaged WAC aircraft {2} for {3} damage with {4}",
			wac_damage                                     = "{1} damaged WAC aircraft {2} for {3} damage",
			wyozi_cinema_queued                            = "{1} requested video {2} ➞ {3} at cinema {4}",
			wyozi_dj_queued                                = "{1} queued {2} ➞ {3} on channel {4}",
			wyozi_dj_channel_rename                        = "{1} renamed a channel to {2}",
 
			bwhitelist_whitelist_enabled_by                = "{1} enabled the whitelist for {2}",
			bwhitelist_whitelist_enabled                   = "The whitelist for {1} was enabled",
			bwhitelist_whitelist_disabled_by               = "{1} disabled the whitelist for {2}",
			bwhitelist_whitelist_disabled                  = "The whitelist for {1} was disabled",
 
			bwhitelist_blacklist_enabled_by                = "{1} enabled the blacklist for {2}",
			bwhitelist_blacklist_enabled                   = "The blacklist for {1} was enabled",
			bwhitelist_blacklist_disabled_by               = "{1} disabled the blacklist for {2}",
			bwhitelist_blacklist_disabled                  = "The blacklist for {1} was disabled",
 
			bwhitelist_added_to_whitelist_by               = "{1} was added to the whitelist for {2} by {3}",
			bwhitelist_added_to_whitelist                  = "{1} was added to the whitelist for {2}",
			bwhitelist_removed_from_whitelist_by           = "{1} was removed from the whitelist for {2} by {3}",
			bwhitelist_removed_from_whitelist              = "{1} was removed from the whitelist for {2}",
			bwhitelist_added_to_blacklist_by               = "{1} was added to the blacklist for {2} by {3}",
			bwhitelist_added_to_blacklist                  = "{1} was added to the blacklist for {2}",
			bwhitelist_removed_from_blacklist_by           = "{1} was removed from the blacklist for {2} by {3}",
			bwhitelist_removed_from_blacklist              = "{1} was removed from the blacklist for {2}",
 
			bwhitelist_added_to_whitelist_by_usergroup     = "Usergroup {1} was added to the whitelist for {2} by {3}",
			bwhitelist_added_to_whitelist_usergroup        = "Usergroup {1} was added to the whitelist for {2}",
			bwhitelist_removed_from_whitelist_by_usergroup = "Usergroup {1} was removed from the whitelist for {2} by {3}",
			bwhitelist_removed_from_whitelist_usergroup    = "Usergroup {1} was removed from the whitelist for {2}",
			bwhitelist_added_to_blacklist_by_usergroup     = "Usergroup {1} was added to the blacklist for {2} by {3}",
			bwhitelist_added_to_blacklist_usergroup        = "Usergroup {1} was added to the blacklist for {2}",
			bwhitelist_removed_from_blacklist_by_usergroup = "Usergroup {1} was removed from the blacklist for {2} by {3}",
			bwhitelist_removed_from_blacklist_usergroup    = "Usergroup {1} was removed from the blacklist for {2}",
 
			bwhitelist_added_to_whitelist_by_luafunc       = "Lua function {1} was added to the whitelist for {2} by {3}",
			bwhitelist_added_to_whitelist_luafunc          = "Lua function {1} was added to the whitelist for {2}",
			bwhitelist_removed_from_whitelist_by_luafunc   = "Lua function {1} was removed from the whitelist for {2} by {3}",
			bwhitelist_removed_from_whitelist_luafunc      = "Lua function {1} was removed from the whitelist for {2}",
			bwhitelist_added_to_blacklist_by_luafunc       = "Lua function {1} was added to the blacklist for {2} by {3}",
			bwhitelist_added_to_blacklist_luafunc          = "Lua function {1} was added to the blacklist for {2}",
			bwhitelist_removed_from_blacklist_by_luafunc   = "Lua function {1} was removed from the blacklist for {2} by {3}",
			bwhitelist_removed_from_blacklist_luafunc      = "Lua function {1} was removed from the blacklist for {2}",

			pvp_combat_begin = "{1} instigated combat against {2}",
			pvp_combat_end   = "The combat instigated by {1} against {2} has ended",

			pvp_player_damage_weapon = "{1} damaged {2} with a {3}",
			pvp_player_damage = "{1} damaged {2}",
			pvp_misc_dmg = "{1} was damaged by {2}",
			pvp_fall_damage = "{1} took fall damage",
			pvp_world_crush_damage = "{1} was crushed against the world",
			pvp_world_damage = "{1} was damaged by the world",
			pvp_prop_self_damage = "{1} damaged themself with prop {2}",
			pvp_prop_damage = "{1} was damaged by prop {2} created by {3}",
			pvp_world_prop_damage = "{1} was damaged by world prop {2}",
			pvp_dmg_self = "{1} damaged themself",
			pvp_vehicle_damage = "{1} was damaged by vehicle {2} driven by {3}",
			pvp_driverless_vehicle_damage = "{1} was damaged by vehicle {2} driven by no one",
			pvp_vehicle_damage_self = "{1} was damaged by crashing their vehicle {2}",

			pvp_player_silent_death = "{1} was silently killed",
			pvp_death_propkill_self = "{1} propkilled themself with {2}",
			pvp_death_propkill_world = "{1} was propkilled by world prop {2}",
			pvp_death_propkill = "{1} was propkilled by {2} using prop {3}",
			pvp_death_player = "{1} was killed by {2}",
			pvp_death_player_weapon = "{1} was killed by {2} with a {3}",
			pvp_death_world = "{1} was killed by the world",
			pvp_death = "{1} was killed",
			
			pvp_misc_dmg_prop = "{1} took {2} from world prop {3}",
			pvp_misc_dmg_attacker = "{1} took {2} from {3}",
			pvp_misc_dmg_other = "{1} took {2}",

			steamfam = "{1} is Steam Family sharing with {2}",
		},

		pvp_dmgtype_generic = "%u damage",
		pvp_dmgtype_burn = "%u burn damage",
		pvp_dmgtype_crush = "%u crush damage",
		pvp_dmgtype_fall = "%u fall damage",
		pvp_dmgtype_bullet = "%u bullet damage",
		pvp_dmgtype_slash = "%u slash damage",
		pvp_dmgtype_vehicle = "%u vehicle damage",
		pvp_dmgtype_blast = "%u explosion damage",
		pvp_dmgtype_club = "%u club damage",
		pvp_dmgtype_shock = "%u electric shock damage",
		pvp_dmgtype_sonic = "%u sonic damage",
		pvp_dmgtype_energybeam = "%u laser damage",
		pvp_dmgtype_drown = "%u drowning damage",
		pvp_dmgtype_nervegas = "%u neurotoxin damage",
		pvp_dmgtype_poison = "%u poison damage",
		pvp_dmgtype_radiation = "%u radiation damage",
		pvp_dmgtype_acid = "%u chemical damage",
		pvp_dmgtype_gravgun = "%u gravity gun damage",
		pvp_dmgtype_plasma = "%u plasma damage",
		pvp_dmgtype_airboat = "%u airboat gun damage",
		pvp_dmgtype_buckshot = "%u buckshot bullet damage",
		pvp_dmgtype_sniper = "%u sniper bullet damage",

} end }
--lua/gmodadminsuite/modules/playerdatabase/lang/chinese.lua:
return {
    Name = "Chinese",
    Flag = "flags16/cn.png",
    Phrases = function()
        return {
            module_name = "玩家数据库",

            right_click_to_focus = "右键点击聚焦",
            steamid = "SteamID",
            name = "名称",
            usergroup = "用户组",
            ip_address = "IP地址",
            last_seen = "最后出现",
            copy_steamid = "复制SteamID",
            copy_steamid64 = "复制SteamID64",
            copy_usergroup = "复制用户组",
            copy_ip_address = "复制IP地址",
            copy_name = "复制名称",
            copy_steam_profile_link = "复制Steam个人资料链接",
            search = "搜索",
            country = "国家",
            copy_country = "复制国家",
            search_usergroup = "搜索用户组",
            search_ip_address = "搜索IP地址",
            search_country = "搜索国家",
            search_name = "搜索名称",
            none = "< 无 >",
            cancel = "取消",
        }
    end
}

--lua/gmodadminsuite/modules/playerdatabase/lang/english.lua:
return {
	Name = "English",
	Flag = "flags16/gb.png",
	Phrases = function() return {

		module_name = "Player Database",

		right_click_to_focus    = "Right click to focus",
		steamid                 = "SteamID",
		name                    = "Name",
		usergroup               = "Usergroup",
		ip_address              = "IP Address",
		last_seen               = "Last Seen",
		copy_steamid            = "Copy SteamID",
		copy_steamid64          = "Copy SteamID64",
		copy_usergroup          = "Copy Usergroup",
		copy_ip_address         = "Copy IP Address",
		copy_name               = "Copy Name",
		copy_steam_profile_link = "Copy Steam Profile Link",
		search                  = "Search",
		country                 = "Country",
		copy_country            = "Copy Country",
		search_usergroup        = "Search Usergroup",
		search_ip_address       = "Search IP Address",
		search_country          = "Search Country",
		search_name             = "Search Name",
		none                    = "< none >",
		cancel                  = "Cancel",
		steamid                 = "SteamID",

} end }
--lua/gmodadminsuite/modules/playerdatabase/lang/french.lua:
return gluapack()()
--lua/gmodadminsuite/sh_offline_player_data.lua:
AddCSLuaFile()

GAS.OfflinePlayerData = {callbacks = {}, data = {}}

if (CLIENT) then
	local function L(phrase, ...)
		if (#({...}) == 0) then
			return GAS:Phrase(phrase)
		else
			return GAS:PhraseFormat(phrase, ...)
		end
	end

	GAS:netReceive("offline_player_data", function()
		local account_id = net.ReadUInt(31)
		local nick = net.ReadString()
		local usergroup = net.ReadString()
		GAS.OfflinePlayerData.data[account_id] = {nick = nick, usergroup = usergroup}
		
		if (GAS.OfflinePlayerData.callbacks[account_id]) then
			for i,v in ipairs(GAS.OfflinePlayerData.callbacks[account_id]) do
				table.remove(GAS.OfflinePlayerData.callbacks[account_id], i)
				v(true, GAS.OfflinePlayerData.data[account_id])
			end
		end
	end)

	GAS:netReceive("offline_player_data_failed", function()
		local account_id = net.ReadUInt(31)
		GAS.OfflinePlayerData.data[account_id] = false

		if (GAS.OfflinePlayerData.callbacks[account_id]) then
			for i,v in ipairs(GAS.OfflinePlayerData.callbacks[account_id]) do
				table.remove(GAS.OfflinePlayerData.callbacks[account_id], i)
				v(false)
			end
		end
	end)

	GAS:InitPostEntity(function()
		if (system.GetCountry() and #system.GetCountry() > 0) then
			GAS:netStart("offline_player_data_country_code")
				net.WriteString(system.GetCountry())
			net.SendToServer()
		end
	end)
else
	GAS:untimer("offline_player_data_update")

	local cached_offline_data = {}

	GAS_OfflinePlayerData_CountryCodes = GAS_OfflinePlayerData_CountryCodes or {}
	function GAS.OfflinePlayerData:Update(ply)
		GAS.Database:Prepare("REPLACE INTO gas_offline_player_data (`server_id`, `account_id`, `nick`, `usergroup`, `ip_address`, `country_code`, `last_seen`) VALUES(?,?,?,?,?,?,CURRENT_TIMESTAMP())", {GAS.ServerID, ply:AccountID(), utf8.force(ply:Nick()), ply:GetUserGroup(), (ply:IPAddress():gsub(":%d+$","")), GAS_OfflinePlayerData_CountryCodes[ply] or NULL})
	end

	local function sql_init()
		GAS.Database:ServerID(function()
			local function update_data()
				GAS.Database:BeginTransaction()
				for _,ply in ipairs(player.GetHumans()) do
					local data_hash = util.CRC(ply:Nick() .. ply:GetUserGroup() .. ply:IPAddress() .. (GAS_OfflinePlayerData_CountryCodes[ply] or ""))
					if (data_hash ~= cached_offline_data[ply]) then
						cached_offline_data[ply] = data_hash
						GAS.OfflinePlayerData:Update(ply)
					end
				end
				GAS.Database:CommitTransaction()
			end
			update_data()
			GAS:timer("offline_player_data_update", 60, 0, update_data)
		end)
	end
	if (GAS.Database.MySQLDatabase) then
		GAS.Database:Query([[

			CREATE TABLE IF NOT EXISTS `gas_offline_player_data` (
				`server_id` int(11) NOT NULL,
				`account_id` int(11) UNSIGNED NOT NULL,
				`nick` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
				`usergroup` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
				`ip_address` varchar(15) CHARACTER SET ascii NOT NULL,
				`country_code` char(3) CHARACTER SET ascii COLLATE ascii_general_ci DEFAULT NULL,
				`last_seen` timestamp NOT NULL,
				PRIMARY KEY (`server_id`, `account_id`)
			);

		]], function()

			GAS.Database:Query("SHOW COLUMNS FROM `gas_offline_player_data` WHERE `Field`='country_code'", function(rows)
				if (not rows or #rows == 0) then
					GAS.Database:Query("ALTER TABLE `gas_offline_player_data` ADD `country_code` CHAR(3) CHARACTER SET ascii COLLATE ascii_general_ci DEFAULT NULL AFTER `ip_address`, ADD INDEX (`country_code`), ADD INDEX (`usergroup`), ADD INDEX (`ip_address`)", sql_init)
				else
					sql_init()
				end
			end)

		end)
	else
		GAS.Database:Query([[

			CREATE TABLE IF NOT EXISTS "gas_offline_player_data" (
				"server_id" INTEGER NOT NULL,
				"account_id" INTEGER NOT NULL,
				"nick" TEXT NOT NULL,
				"usergroup" TEXT NOT NULL,
				"ip_address" TEXT NOT NULL,
				"country_code" TEXT DEFAULT NULL,
				"last_seen" INTEGER NOT NULL,
				PRIMARY KEY ("server_id", "account_id")
			);

			CREATE INDEX IF NOT EXISTS gas_opd_usergroup_index ON gas_offline_player_data ("usergroup");
			CREATE INDEX IF NOT EXISTS gas_opd_country_code_index ON gas_offline_player_data ("country_code");
			CREATE INDEX IF NOT EXISTS gas_opd_ip_address_index ON gas_offline_player_data ("ip_address");

		]], function()

			GAS.Database:Query("PRAGMA table_info(`gas_offline_player_data`)", function(rows)
				local found = false
				for _,row in ipairs(rows) do
					if (row.name == "country_code") then
						found = true
						break
					end
				end
				if (not found) then
					GAS.Database:Query("ALTER TABLE `gas_offline_player_data` ADD COLUMN `country_code` TEXT DEFAULT NULL", sql_init)
				else
					sql_init()
				end
			end)

		end)
	end

	GAS:netInit("offline_player_data")
	GAS:netInit("offline_player_data_failed")

	GAS:netReceive("offline_player_data", function(ply)
		local account_id = net.ReadUInt(31)
		local target_ply = player.GetByAccountID(account_id)
		if (IsValid(target_ply)) then
			GAS:netStart("offline_player_data")
				net.WriteUInt(account_id, 31)
				net.WriteString(target_ply:Nick())
				net.WriteString(target_ply:GetUserGroup())
			net.Send(ply)
		else
			GAS.Database:Prepare("SELECT `nick`, `usergroup` FROM gas_offline_player_data WHERE `server_id`=? AND `account_id`=?", {GAS.ServerID, account_id}, function(rows)
				if (not rows or #rows == 0) then
					GAS:netStart("offline_player_data_failed")
						net.WriteUInt(account_id, 31)
					net.Send(ply)
				else
					GAS:netStart("offline_player_data")
						net.WriteUInt(account_id, 31)
						net.WriteString(rows[1].nick)
						net.WriteString(rows[1].usergroup)
					net.Send(ply)
				end
			end)
		end
	end)

	GAS:netInit("offline_player_data_country_code")
	GAS:netReceive("offline_player_data_country_code", function(ply)
		local country_code = net.ReadString()
		if (GAS_OfflinePlayerData_CountryCodes[ply]) then return end
		if (#country_code > 0 and #country_code <= 3) then
			GAS_OfflinePlayerData_CountryCodes[ply] = country_code
			GAS.Database:Prepare("UPDATE gas_offline_player_data SET `country_code`=? WHERE `account_id`=?", {country_code:upper(), ply:AccountID()})
		end
	end)

	GAS:hook("onPlayerChangedName", "offline_player_data:ChangeName", function(ply, _, name)
		GAS.Database:Prepare("UPDATE gas_offline_player_data SET `nick`=? WHERE `account_id`=?", {name, ply:AccountID()})
	end)
end

function GAS.OfflinePlayerData:SteamID64(steamid64, callback)
	print("deprecated", steamid64)
	debug.Trace()
	return GAS.OfflinePlayerData:AccountID(GAS:SteamID64ToAccountID(steamid64), callback)
end

function GAS.OfflinePlayerData:AccountID(account_id, callback)
	local ply = player.GetByAccountID(account_id)
	if (IsValid(ply)) then
		GAS.OfflinePlayerData.data[account_id] = {nick = ply:Nick(), usergroup = ply:GetUserGroup()}
		callback(true, GAS.OfflinePlayerData.data[account_id])
	else
		if (CLIENT) then
			if (GAS.OfflinePlayerData.data[account_id] ~= nil) then
				if (GAS.OfflinePlayerData.data[account_id] == false) then
					callback(false)
				else
					callback(true, GAS.OfflinePlayerData.data[account_id])
				end
			else
				GAS.OfflinePlayerData.callbacks[account_id] = GAS.OfflinePlayerData.callbacks[account_id] or {}
				table.insert(GAS.OfflinePlayerData.callbacks[account_id], callback)
				GAS:netStart("offline_player_data")
					net.WriteUInt(account_id, 31)
				net.SendToServer()
			end
		else
			GAS.Database:Prepare("SELECT `nick`, `usergroup` FROM gas_offline_player_data WHERE `server_id`=? AND `account_id`=?", {GAS.ServerID, account_id}, function(rows)
				if (#rows == 0) then
					callback(false)
				else
					callback(true, {nick = rows[1].nick, usergroup = rows[1].usergroup})
				end
			end)
		end
	end
end
--lua/gmodadminsuite/sh_teams.lua:
GAS.Teams = {}
GAS.Teams.Identifiers = {}
GAS.Teams.IdentifiersIndexed = {}

local ReadyCallbacks = {}
function GAS.Teams:Ready(callback)
	if (GAS.Teams.CachedIdentifiers) then
		callback()
	else
		table.insert(ReadyCallbacks, callback)
	end
end

if (SERVER) then

	local function utf8_cmp(str1, str2)
		return
			str1 == str2 or
			utf8.force(str1) == utf8.force(str2)
	end

	GAS:netInit("teams:GetIdentifiers")
	local function NetworkIdentifiers(ply)
		GAS:netStart("teams:GetIdentifiers")
			net.WriteUInt(table.Count(GAS.Teams.Identifiers), 16)
			for team_index, identifier in pairs(GAS.Teams.Identifiers) do
				net.WriteUInt(team_index, 16)
				net.WriteUInt(identifier, 16)
			end
		net.Send(ply)
	end

	local GetIdentifiersQueue = {}
	GAS:netReceive("teams:GetIdentifiers", function(ply)
		if (GAS.Teams.CachedIdentifiers) then
			NetworkIdentifiers(ply)
		else
			table.insert(GetIdentifiersQueue, ply)
		end
	end)

	GAS.Teams:Ready(function()
		for _,ply in ipairs(GetIdentifiersQueue) do
			NetworkIdentifiers(ply)
		end
		GetIdentifiersQueue = {}
	end)

	local function teams_init()
		GAS.Teams.Identifiers = {}
		GAS.Teams.IdentifiersIndexed = {}
		
		GAS:print("Populating team identification...", GAS_PRINT_TYPE_INFO)

		GAS.Database:Query("SELECT `id`, `name`, `command`, `OPENPERMISSIONS_IDENTIFIER` FROM `gas_teams` WHERE `server_id`=" .. GAS.ServerID, function(rows)
			GAS.Database:BeginTransaction()

			if (DarkRP and RPExtraTeams) then
				for _,job in ipairs(RPExtraTeams) do
					local OPENPERMISSIONS_IDENTIFIER = NULL
					if (job.OPENPERMISSIONS_IDENTIFIER ~= nil) then
						OPENPERMISSIONS_IDENTIFIER = utf8.force(job.OPENPERMISSIONS_IDENTIFIER)
					end
					local found = false
					for _,row in ipairs(rows) do
						if (
							(row.OPENPERMISSIONS_IDENTIFIER ~= nil and job.OPENPERMISSIONS_IDENTIFIER ~= nil and utf8_cmp(job.OPENPERMISSIONS_IDENTIFIER, row.OPENPERMISSIONS_IDENTIFIER)) or
							(row.command ~= nil and utf8_cmp(job.command, row.command))
						) then
							found = true
							GAS.Database:Prepare("UPDATE `gas_teams` SET `name`=?, `command`=?, `OPENPERMISSIONS_IDENTIFIER`=? WHERE `server_id`=? AND `id`=?", {utf8.force(job.name), utf8.force(job.command), OPENPERMISSIONS_IDENTIFIER, GAS.ServerID, tonumber(row.id)})
							break
						end
					end
					if (not found) then
						GAS.Database:Prepare("INSERT INTO `gas_teams` (`server_id`, `name`, `command`, `OPENPERMISSIONS_IDENTIFIER`) VALUES(?,?,?,?)", {GAS.ServerID, utf8.force(job.name), utf8.force(job.command), OPENPERMISSIONS_IDENTIFIER})
					end
				end
			else
				for i,t in ipairs(team.GetAllTeams()) do
					local found = false
					for _,row in ipairs(rows) do
						if (row.name ~= nil and utf8_cmp(t.Name, row.name)) then
							found = true
							GAS.Database:Prepare("UPDATE `gas_teams` SET `name`=?, `command`=?, `OPENPERMISSIONS_IDENTIFIER`=? WHERE `server_id`=? AND `id`=?", {utf8.force(t.Name), NULL, NULL, GAS.ServerID, tonumber(row.id)})
							break
						end
					end
					if (not found) then
						GAS.Database:Prepare("INSERT INTO `gas_teams` (`server_id`, `name`, `command`, `OPENPERMISSIONS_IDENTIFIER`) VALUES(?,?,?,?)", {GAS.ServerID, utf8.force(t.Name), NULL, NULL})
					end
				end
			end

			GAS.Database:CommitTransaction(function()

				GAS.Database:Query("SELECT `id`, `name`, `command`, `OPENPERMISSIONS_IDENTIFIER` FROM `gas_teams` WHERE `server_id`=" .. GAS.ServerID, function(rows)
					for _,row in ipairs(rows) do
						if (DarkRP and RPExtraTeams) then
							for _,job in ipairs(RPExtraTeams) do
								if (GAS.Teams.Identifiers[job.team] ~= nil) then continue end
								if (
									(row.OPENPERMISSIONS_IDENTIFIER ~= nil and job.OPENPERMISSIONS_IDENTIFIER == row.OPENPERMISSIONS_IDENTIFIER) or
									(row.command ~= nil and job.command == row.command) or
									(row.name ~= nil and job.name == row.name)
								) then
									GAS.Teams.Identifiers[job.team] = tonumber(row.id)
									GAS.Teams.IdentifiersIndexed[tonumber(row.id)] = job.team
									break
								end
							end
						else
							for i,t in ipairs(team.GetAllTeams()) do
								if (GAS.Teams.Identifiers[i] ~= nil) then continue end
								if (row.name ~= nil and t.Name == row.name) then
									GAS.Teams.Identifiers[i] = tonumber(row.id)
									GAS.Teams.IdentifiersIndexed[tonumber(row.id)] = i
									break
								end
							end
						end
					end

					GAS.Teams.CachedIdentifiers = true

					for _,callback in ipairs(ReadyCallbacks) do
						callback()
					end
					ReadyCallbacks = {}

					hook.Run("GAS:TeamIdentifiersReady")

					GAS:print("Initialized team identification", GAS_PRINT_COLOR_GOOD, GAS_PRINT_TYPE_INFO)
				end)

			end)
		end)
	end

	local function sql_init()
		GAS:GMInitialize(function()
			GAS:InitPostEntity(function()
				GAS.Database:ServerID(teams_init)
			end)
		end)
		hook.Add("DConfigOnUpdateJob", "DConfig:UpdateJobCache", teams_init)
	end

	if (GAS.Database.MySQLDatabase) then
		GAS.Database:Query([[

			CREATE TABLE IF NOT EXISTS `gas_teams` (
				`id` smallint(5) unsigned NOT NULL AUTO_INCREMENT,
				`server_id` smallint(5) unsigned NOT NULL,
				`OPENPERMISSIONS_IDENTIFIER` varchar(189) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
				`command` varchar(189) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
				`name` varchar(189) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
				PRIMARY KEY (`id`),
				UNIQUE KEY `command` (`server_id`,`command`),
				UNIQUE KEY `OPENPERMISSIONS_IDENTIFIER` (`server_id`,`OPENPERMISSIONS_IDENTIFIER`)
			)

		]], function()
			GAS.Database:Query("SHOW INDEX FROM gas_teams WHERE KEY_NAME='name'", function(rows)
				if (rows and #rows > 0) then
					GAS.Database:Query("DROP INDEX name ON gas_teams", sql_init)
				else
					sql_init()
				end
			end)
		end)
	else
		GAS.Database:Query([[

			CREATE TABLE IF NOT EXISTS "gas_teams" (
				"id" INTEGER PRIMARY KEY,
				"server_id" INTEGER NOT NULL,
				"OPENPERMISSIONS_IDENTIFIER" TEXT DEFAULT NULL,
				"command" TEXT DEFAULT NULL,
				"name" TEXT NOT NULL,
				UNIQUE ("server_id","command"),
				UNIQUE ("server_id","OPENPERMISSIONS_IDENTIFIER")
			)

		]], sql_init)
	end

else

	GAS:netReceive("teams:GetIdentifiers", function(len)
		for i=1,net.ReadUInt(16) do
			local team_index, identifier = net.ReadUInt(16), net.ReadUInt(16)
			GAS.Teams.Identifiers[team_index] = identifier
			GAS.Teams.IdentifiersIndexed[identifier] = team_index
		end

		GAS.Teams.CachedIdentifiers = true

		for _,callback in ipairs(ReadyCallbacks) do
			callback()
		end
		ReadyCallbacks = {}

		hook.Run("GAS:TeamIdentifiersReady")
	end)

	GAS:InitPostEntity(function()
		GAS:netStart("teams:GetIdentifiers")
		net.SendToServer()
	end)

end

function GAS.Teams:GetIdentifier(team_index)
	return GAS.Teams.Identifiers[team_index]
end
function GAS.Teams:GetFromIdentifier(identifier)
	return GAS.Teams.IdentifiersIndexed[tonumber(identifier)]
end

GAS:hook("OpenPermissions:GetTeamIdentifier", "teams:OpenPermissions:GetTeamIdentifier", function(team_index)
	return GAS.Teams:GetIdentifier(team_index)
end)
GAS:hook("OpenPermissions:GetTeamFromIdentifier", "teams:OpenPermissions:GetTeamFromIdentifier", function(team_identifier)
	return GAS.Teams:GetFromIdentifier(team_identifier)
end)
--lua/gmodadminsuite/sh_afk.lua:
GAS.AFK = {}
GAS.AFK.AFKTime = GAS.Config.AFKTime

if (SERVER) then

	GAS_AFK_PlayerPositions = GAS_AFK_PlayerPositions or {}
	GAS_AFK_PlayerLastMoved = GAS_AFK_PlayerLastMoved or {}

	function GAS.AFK:SetAFK(ply, is_afk, pos_signature)
		if (is_afk) then
			if (not ply.GAS_PlayerAFK) then
				ply.GAS_PlayerAFK = true
				ply:SetNWBool("GAS_PlayerAFK", true)
				hook.Run("GAS:AFK", ply)
			end
		else
			GAS_AFK_PlayerLastMoved[ply] = os.time()
			GAS_AFK_PlayerPositions[ply] = pos_signature
			if (ply.GAS_PlayerAFK) then
				ply.GAS_PlayerAFK = false
				ply:SetNWBool("GAS_PlayerAFK", false)
				hook.Run("GAS:UnAFK", ply)
			end
		end
	end

	GAS:timer("afk:update_player_positions", 5, 0, function()
		for _,ply in ipairs(player.GetHumans()) do
			local pos = ply:GetPos()
			local pos_signature = math.Round(pos.x) + math.Round(pos.y) + math.Round(pos.z)
			if (GAS_AFK_PlayerLastMoved[ply]) then
				if (pos_signature ~= GAS_AFK_PlayerPositions[ply]) then
					GAS.AFK:SetAFK(ply, false, pos_signature)
				elseif (os.time() - GAS_AFK_PlayerLastMoved[ply] >= GAS.AFK.AFKTime) then
					GAS.AFK:SetAFK(ply, true)
				end
			end
		end
	end)

	GAS:hook("PlayerInitialSpawn", "afk:PlayerInitialSpawn", function(ply)
		if (ply:IsBot()) then return end
		ply.GAS_PlayerAFK = true

		ply:SetNWBool("GAS_PlayerAFK", true)
	end)

	GAS:hook("PlayerDisconnected", "afk:GC", function(ply)
		GAS_AFK_PlayerLastMoved[ply] = nil
		GAS_AFK_PlayerPositions[ply] = nil
	end)

	GAS:netInit("afk:InitPostEntity")
	GAS:netReceive("afk:InitPostEntity", function(ply)
		local pos = ply:GetPos()
		local pos_signature = math.Round(pos.x) + math.Round(pos.y) + math.Round(pos.z)
		GAS_AFK_PlayerLastMoved[ply] = os.time()
		GAS_AFK_PlayerPositions[ply] = pos_signature
	end)

else

	GAS:InitPostEntity(function()
		GAS:netStart("afk:InitPostEntity")
		net.SendToServer()
	end)

end

function GAS.AFK:IsAFK(ply)
	return ply.GAS_PlayerAFK or ply:GetNWBool("GAS_PlayerAFK", true)
end
--lua/gmodadminsuite/cl_country_codes.lua:
--Source: https://datahub.io/core/country-list

GAS.CountryCodes = GAS.CountryCodes or GAS.spon.decode([[[S02DMS08DominicaS02IOS1EBritish Indian Ocean TerritoryS02FMS1FMicronesia, Federated States ofS02AMS07ArmeniaS02JOS06JordanS02CMS08CameroonS02BMS07BermudaS02FOS0DFaroe IslandsS02AOS06AngolaS02DOS12Dominican RepublicS02BOS1FBolivia, Plurinational State ofS02TKS07TokelauS02ZMS06ZambiaS02COS08ColombiaS02TMS0CTurkmenistanS02RSS06SerbiaS02MSS0AMontserratS02PSS13Palestine, State ofS02PMS19Saint Pierre and MiquelonS02SMS0ASan MarinoS02MMS07MyanmarS02WSS05SamoaS02USS0DUnited StatesS02BQS20Bonaire, Sint Eustatius and SabaS02ROS07RomaniaS02MOS05MacaoS02GQS11Equatorial GuineaS02SOS07SomaliaS02AQS0AAntarcticaS02BSS07BahamasS02TWS19Taiwan, Province of ChinaS02ASS0EAmerican SamoaS02MWS06MalawiS02IQS04IraqS02CRS0ACosta RicaS02ESS05SpainS02GUS04GuamS02ZWS08ZimbabweS02AUS09AustraliaS02UYS07UruguayS02LSS07LesothoS02KMS07ComorosS02PYS08ParaguayS02LUS0ALuxembourgS02AWS05ArubaS02NUS04NiueS02GWS0DGuinea-BissauS02BWS08BotswanaS02IMS0BIsle of ManS02VIS14Virgin Islands, U.S.S02CWS08CuraçaoS02SKS08SlovakiaS02GTS09GuatemalaS02KYS0ECayman IslandsS02ECS07EcuadorS02GSS2CSouth Georgia and the South Sandwich IslandsS02LYS05LibyaS02FIS07FinlandS02KWS06KuwaitS02GIS09GibraltarS02IDS09IndonesiaS02CYS06CyprusS02BYS07BelarusS02ETS08EthiopiaS02HKS09Hong KongS02GYS06GuyanaS02CIS0ECôte d'IvoireS02BBS08BarbadosS02EGS05EgyptS02VUS07VanuatuS02KGS0AKyrgyzstanS02YES05YemenS02GBS0EUnited KingdomS02LIS0DLiechtensteinS02GDS07GrenadaS02LKS09Sri LankaS02ADS07AndorraS02CUS04CubaS02CDS25Congo, the Democratic Republic of theS02KIS08KiribatiS02GMS06GambiaS02LBS07LebanonS02UMS24United States Minor Outlying IslandsS02AFS0BAfghanistanS02SBS0FSolomon IslandsS02GFS0DFrench GuianaS02CGS05CongoS02MFS1ASaint Martin (French part)S02BFS0CBurkina FasoS02CFS18Central African RepublicS02KES05KenyaS02KHS08CambodiaS02NFS0ENorfolk IslandS02EHS0EWestern SaharaS02SDS05SudanS02CNS05ChinaS02MDS14Moldova, Republic ofS02IES07IrelandS02NES05NigerS02CHS0BSwitzerlandS02AGS13Antigua and BarbudaS02WFS11Wallis and FutunaS02TFS1BFrench Southern TerritoriesS02GHS05GhanaS02KNS15Saint Kitts and NevisS02BTS06BhutanS02PFS10French PolynesiaS02BES07BelgiumS02VAS1DHoly See (Vatican City State)S02BJS05BeninS02ILS06IsraelS02NLS0BNetherlandsS02RUS12Russian FederationS02FJS04FijiS02NCS0DNew CaledoniaS02DJS08DjiboutiS02GLS09GreenlandS02INS05IndiaS02ALS07AlbaniaS02THS08ThailandS02CLS05ChileS02SLS0CSierra LeoneS02DES07GermanyS02BLS11Saint BarthélemyS02HNS08HondurasS02PTS08PortugalS02SJS16Svalbard and Jan MayenS02GNS06GuineaS02MYS08MalaysiaS02SSS0BSouth SudanS02BNS11Brunei DarussalamS02TJS0ATajikistanS02MHS10Marshall IslandsS02TLS0BTimor-LesteS02MRS0AMauritaniaS02ARS09ArgentinaS02SRS08SurinameS02PRS0BPuerto RicoS02MLS04MaliS02PWS05PalauS02MQS0AMartiniqueS02TRS06TurkeyS02VNS08Viet NamS02TTS13Trinidad and TobagoS02TNS07TunisiaS02GPS0AGuadeloupeS02STS15Sao Tome and PrincipeS02SNS07SenegalS02PNS08PitcairnS02KPS26Korea, Democratic People's Republic ofS02HUS07HungaryS02BRS06BrazilS02JPS05JapanS02MUS09MauritiusS02TVS06TuvaluS02FRS06FranceS02GRS06GreeceS02SVS0BEl SalvadorS02ERS07EritreaS02YTS07MayotteS02KRS12Korea, Republic ofS02HRS07CroatiaS02IRS19Iran, Islamic Republic ofS02NRS05NauruS02NOS06NorwayS02LRS07LiberiaS02MPS18Northern Mariana IslandsS02SXS19Sint Maarten (Dutch part)S02UZS0AUzbekistanS02MXS06MexicoS02BDS0ABangladeshS02HTS05HaitiS02BVS0DBouvet IslandS02CVS0ACape VerdeS02TDS04ChadS02LVS06LatviaS02MZS0AMozambiqueS02SYS14Syrian Arab RepublicS02SZS09SwazilandS02FKS1BFalkland Islands (Malvinas)S02AXS0EÅland IslandsS02MNS08MongoliaS02MES0AMontenegroS02TZS1CTanzania, United Republic ofS02MVS08MaldivesS02MKS2AMacedonia, the Former Yugoslav Republic ofS02KZS0AKazakhstanS02CXS10Christmas IslandS02NPS05NepalS02NZS0BNew ZealandS02ATS07AustriaS02CAS06CanadaS02BAS16Bosnia and HerzegovinaS02BZS06BelizeS02CZS0ECzech RepublicS02GAS05GabonS02AZS0AAzerbaijanS02ITS05ItalyS02LTS09LithuaniaS02DZS07AlgeriaS02PKS08PakistanS02CCS17Cocos (Keeling) IslandsS02LAS20Lao People's Democratic RepublicS02GGS08GuernseyS02NAS07NamibiaS02MTS05MaltaS02PAS06PanamaS02SAS0CSaudi ArabiaS02GES07GeorgiaS02MAS07MoroccoS02AES14United Arab EmiratesS02PLS06PolandS02LCS0BSaint LuciaS02QAS05QatarS02RWS06RwandaS02MCS06MonacoS02ZAS0CSouth AfricaS02SCS0ASeychellesS02VCS20Saint Vincent and the GrenadinesS02BGS08BulgariaS02TCS18Turks and Caicos IslandsS02JES06JerseyS02EES07EstoniaS02NGS07NigeriaS02PHS0BPhilippinesS02VES21Venezuela, Bolivarian Republic ofS02SHS2CSaint Helena, Ascension and Tristan da CunhaS02PES04PeruS02SES06SwedenS02RES08RéunionS02NIS09NicaraguaS02VGS17Virgin Islands, BritishS02BHS07BahrainS02TGS04TogoS02BIS07BurundiS02UAS07UkraineS02MGS0AMadagascarS02PGS10Papua New GuineaS02SGS09SingaporeS02AIS08AnguillaS02TOS05TongaS02SIS08SloveniaS02OMS04OmanS02CKS0CCook IslandsS02UGS06UgandaS02HMS21Heard Island and McDonald IslandsS02DKS07DenmarkS02JMS07JamaicaS02ISS07Iceland)]])
GAS.CountryCodesReverse = GAS.CountryCodesReverse or GAS:table_Flip(GAS.CountryCodes)
--lua/gmodadminsuite/modules/playerdatabase/sh_init.lua:
return gluapack()()
--lua/gmodadminsuite/modules/secondaryusergroups/sh_init.lua:
return gluapack()()
--addons/gprofiler/lua/gprofiler/profilers/net/cl_net.lua:
return gluapack()()
--addons/gprofiler/lua/gprofiler/profilers/timers/cl_timers.lua:
GProfiler.Timers = GProfiler.Timers or {}
GProfiler.Timers.Realm = GProfiler.Timers.Realm or "Client"
GProfiler.Timers.ProfileActive = GProfiler.Timers.ProfileActive or false
GProfiler.Timers.StartTime = GProfiler.Timers.StartTime or 0
GProfiler.Timers.EndTime = GProfiler.Timers.EndTime or 0

local TabPadding = 10
local MenuColors = GProfiler.MenuColors

function GProfiler.Timers.DoTab(Content)
	local Header = vgui.Create("DPanel", Content)
	Header:SetSize(Content:GetWide(), 40)
	Header:SetPos(0, 10)
	Header.Paint = nil

	local RealmSelector = GProfiler.Menu.CreateRealmSelector(Header, "Timers", Header:GetWide() - TabPadding - 110, Header:GetTall() / 2 - 30 / 2, function(s, _, value)
		GProfiler.Timers.Realm = value
		GProfiler.Menu.OpenTab("Timers", GProfiler.Timers.DoTab)
	end)
	RealmSelector:SetPos(Header:GetWide() - RealmSelector:GetWide() - TabPadding, Header:GetTall() / 2 - RealmSelector:GetTall() / 2)

	local StartButton = vgui.Create("DButton", Header)
	StartButton:SetText(GProfiler.Timers.ProfileActive and GProfiler.Language.GetPhrase("profiler_stop") or GProfiler.Language.GetPhrase("profiler_start"))
	StartButton:SetTextColor(MenuColors.White)
	StartButton:SetFont("GProfiler.Menu.StartButton")
	StartButton:SizeToContents()
	StartButton:SetTall(RealmSelector:GetTall())
	StartButton:SetPos(Header:GetWide() - StartButton:GetWide() - RealmSelector:GetWide() - TabPadding * 2, Header:GetTall() / 2 - StartButton:GetTall() / 2)
	StartButton.Paint = function(s, w, h)
		draw.RoundedBox(4, 0, 0, w, h, MenuColors.ButtonOutline)
		draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonBackground)

		if s:IsHovered() then
			draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonHover)
		end
	end

	local TimersTimeRunning = vgui.Create("DLabel", Header)
	TimersTimeRunning:SetFont("GProfiler.Menu.SectionHeader")
	TimersTimeRunning:SetText(GProfiler.TimeRunning(GProfiler.Timers.StartTime, GProfiler.Timers.EndTime, GProfiler.Timers.ProfileActive) .. "s")
	TimersTimeRunning:SizeToContents()
	TimersTimeRunning:SetPos(Header:GetWide() - TimersTimeRunning:GetWide() - RealmSelector:GetWide() - StartButton:GetWide() - TabPadding * 3, Header:GetTall() / 2 - TimersTimeRunning:GetTall() / 2)
	TimersTimeRunning:SetTextColor(MenuColors.White)
	function TimersTimeRunning:Think()
		if GProfiler.Timers.ProfileActive then
			self:SetText(GProfiler.TimeRunning(GProfiler.Timers.StartTime, 0, GProfiler.Timers.ProfileActive) .. "s")
			self:SizeToContents()
			self:SetPos(Header:GetWide() - self:GetWide() - RealmSelector:GetWide() - StartButton:GetWide() - TabPadding * 3, Header:GetTall() / 2 - self:GetTall() / 2)
		end
	end

	StartButton.DoClick = function()
		if GProfiler.Timers.ProfileActive then
			GProfiler.Timers.EndTime = SysTime()
			if GProfiler.Timers.Realm == "Server" then
				net.Start("GProfiler_Timers_ToggleServerProfile")
				net.WriteBool(false)
				net.SendToServer()
			else
				GProfiler.Timers:Stop()
				GProfiler.Timers.ProfileActive = false
				GProfiler.Menu.OpenTab("Timers", GProfiler.Timers.DoTab)
			end

			if timer.Exists("GProfiler.Timers.Time") then
				timer.Remove("GProfiler.Timers.Time")
			end
		else
			GProfiler.Timers.StartTime = SysTime()
			GProfiler.Timers.EndTime = 0
			if GProfiler.Timers.Realm == "Server" then
				net.Start("GProfiler_Timers_ToggleServerProfile")
				net.WriteBool(true)
				net.SendToServer()
			else
				GProfiler.Timers:StartProfiler()
				GProfiler.Timers.ProfileActive = true
				StartButton:SetText(GProfiler.Language.GetPhrase("profiler_stop"))
			end
		end
	end

	local SectionHeader = vgui.Create("DPanel", Content)
	SectionHeader:SetSize(Content:GetWide(), 40)
	SectionHeader:SetPos(0, Header:GetTall())
	SectionHeader.Paint = nil

	local leftFraction = .7
	local rightFraction = .3

	local LeftHeader, LeftHeaderText = GProfiler.Menu.CreateHeader(SectionHeader, GProfiler.Language.GetPhrase("profiler_results"), 0, 0, SectionHeader:GetWide() * leftFraction - 5, SectionHeader:GetTall())
	local RightHeader, RightHeaderText = GProfiler.Menu.CreateHeader(SectionHeader, GProfiler.Language.GetPhrase("timer_function"), LeftHeader:GetWide() + 10, 0, SectionHeader:GetWide() * rightFraction - 5, LeftHeader:GetTall())

	local LeftContent = vgui.Create("DPanel", Content)
	LeftContent:SetSize(LeftHeader:GetWide(), Content:GetTall() - SectionHeader:GetTall() - Header:GetTall())
	LeftContent:SetPos(0, SectionHeader:GetTall() + Header:GetTall())
	LeftContent.Paint = nil

	local RightContent = vgui.Create("DPanel", Content)
	RightContent:SetSize(RightHeader:GetWide(), Content:GetTall() - SectionHeader:GetTall() - Header:GetTall())
	RightContent:SetPos(LeftContent:GetWide() + 10, SectionHeader:GetTall() + Header:GetTall())
	RightContent.Paint = nil

	local FunctionDetailsBackground = vgui.Create("DPanel", RightContent)
	FunctionDetailsBackground:SetSize(RightContent:GetWide() - TabPadding * 2, RightContent:GetTall() - TabPadding * 2)
	FunctionDetailsBackground:SetPos(TabPadding, TabPadding)
	FunctionDetailsBackground.Paint = function(s, w, h) draw.RoundedBox(4, 0, 0, w, h, MenuColors.CodeBackground) end

	local FunctionDetails = vgui.Create("DTextEntry", FunctionDetailsBackground)
	FunctionDetails:Dock(FILL)
	FunctionDetails:SetMultiline(true)
	FunctionDetails:SetKeyboardInputEnabled(false)
	FunctionDetails:SetVerticalScrollbarEnabled(true)
	FunctionDetails:SetDrawBackground(false)
	FunctionDetails:SetTextColor(MenuColors.White)
	FunctionDetails:SetFont("GProfiler.Menu.FunctionDetails")
	FunctionDetails:SetText(GProfiler.Language.GetPhrase("timer_select"))

	local ProfilerResults = vgui.Create("DListView", LeftContent)
	ProfilerResults:SetSize(LeftContent:GetWide() - TabPadding * 2, LeftContent:GetTall() - TabPadding * 2)
	ProfilerResults:SetPos(TabPadding, TabPadding)
	ProfilerResults:SetMultiSelect(false)
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("timer"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("file"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("delay"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("times_run"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("total_time"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("longest_time"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("average_time"))

	local ProfileData = table.Merge(GProfiler.Timers.Simple, GProfiler.Timers.Create)
	for k, v in pairs(ProfileData or {}) do
		local line = ProfilerResults:AddLine(v.Type == "Simple" and "Simple Timer" or tostring(k), v.Source or "Unknown", math.Round(v.Delay, 4), v.Count, v.TotalTime, v.LongestTime, v.AverageTime)
		line.OnMousePressed = function(s, l)
			if l == 108 then
				local menu = DermaMenu()
				menu:AddOption(GProfiler.CopyLang("receiver"), function() SetClipboardText(k) end):SetIcon("icon16/page_copy.png")
				menu:AddOption(GProfiler.CopyLang("times_received"), function() SetClipboardText(v.Count) end):SetIcon("icon16/page_copy.png")
				menu:AddOption(GProfiler.CopyLang("largest_size"), function() SetClipboardText(v.LongestTime) end):SetIcon("icon16/page_copy.png")
				menu:AddOption(GProfiler.CopyLang("total_size"), function() SetClipboardText(v.TotalTime) end):SetIcon("icon16/page_copy.png")
				menu:Open()
			end

			for k, v in pairs(ProfilerResults.Lines) do
				v:SetSelected(false)
			end
			line:SetSelected(true)

			GProfiler.RequestFunctionSource(v.Source, v.Lines[1], v.Lines[2], function(source)
				if not IsValid(FunctionDetails) then return end
				FunctionDetails:SetText(table.concat(source, "\n"))
			end)
		end
	end

	local Wide = ProfilerResults:GetWide()
	ProfilerResults.Columns[1]:SetWide(Wide * 0.2)
	ProfilerResults.Columns[2]:SetWide(Wide * 0.2)
	ProfilerResults.Columns[3]:SetWide(Wide * 0.075)
	ProfilerResults.Columns[4]:SetWide(Wide * 0.075)
	ProfilerResults.Columns[5]:SetWide(Wide * 0.17)
	ProfilerResults.Columns[6]:SetWide(Wide * 0.17)
	ProfilerResults.Columns[7]:SetWide(Wide * 0.17)
	ProfilerResults:SortByColumn(5, true)

	local function UpdateLists()
		GProfiler.StyleDListView(ProfilerResults)
	end
	UpdateLists()
end
GProfiler.Menu.RegisterTab("Timers", "icon16/time.png", 5, GProfiler.Timers.DoTab, function()
	if GProfiler.Timers.ProfileActive then
		return "", MenuColors.ActiveProfile
	end
	return nil
end)

net.Receive("GProfiler_Timers_ServerProfileStatus", function()
	local status = net.ReadBool()
	local ply = net.ReadEntity()
	GProfiler.Timers.ProfileActive = status

	if ply == LocalPlayer() and not GProfiler.Timers.ProfileActive then
		GProfiler.Menu.OpenTab("Timers", GProfiler.Timers.DoTab)
	end
end)

net.Receive("GProfiler_Timers_SendData", function(len)
	local firstChunk = net.ReadBool()
	if firstChunk then
		GProfiler.Timers.Simple = {}
		GProfiler.Timers.Create = {}
	end
	local lastChunk = net.ReadBool()
	for i = 1, net.ReadUInt(32) do
		local type = net.ReadString()
		local name = net.ReadString()
		GProfiler.Timers[type][name] = {
			Count = net.ReadUInt(15),
			Delay = net.ReadFloat(),
			TotalTime = net.ReadFloat(),
			LongestTime = net.ReadFloat(),
			AverageTime = net.ReadFloat(),
			Source = net.ReadString(),
			Lines = {net.ReadUInt(14), net.ReadUInt(14)},
			Type = type
		}
	end
	if lastChunk then
		GProfiler.Menu.OpenTab("Timers", GProfiler.Timers.DoTab)
	end
end)
--lua/autorun/hdtommy_player.lua:
return gluapack()()
--lua/vgui/stackerdnumslider.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/autorun/load_minigames_tool.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/languages/__language.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/cl_init.lua:

Minigames.GameData = Minigames.GameData or {}
Minigames.BackgroundMusic = Minigames.BackgroundMusic or nil

CreateClientConVar("minigames_game", "none", true, true, "What game do you want to spawn?")
CreateClientConVar("minigames_prerender", 0, true, true, "(DEV) Pre-render the game")

local CYAN = Color(74, 158, 197)
local mat_BlurScreen = Material( "pp/blurscreen" )


local FontTable = {
    font = "Tahoma",
    antialias = true,
    size = 24,
}
surface.CreateFont("Minigames.Title", FontTable)

FontTable.size = 20
surface.CreateFont("Minigames.Title2", FontTable)

FontTable.size = 18
surface.CreateFont("Minigames.SubTitle", FontTable)

FontTable.size = 16
FontTable.font = "Arial"
surface.CreateFont("Minigames.Text", FontTable)

FontTable.size = 16
FontTable.font = "Courier New"
FontTable.antialias = true
surface.CreateFont("Minigames.Text.Mono", FontTable)


local ScreenSizeW, ScreenSizeH = ScrW(), ScrH()
function Minigames.BlurMenu( panel )
    local x, y = panel:LocalToScreen( 0, 0 )

    surface.SetDrawColor( color_white )
    surface.SetMaterial( mat_BlurScreen )

    for i = 2, 4 do
        mat_BlurScreen:SetFloat( "$blur", i )
        mat_BlurScreen:Recompute()

        render.UpdateScreenEffectTexture()
        surface.DrawTexturedRect( -x, -y, ScreenSizeW, ScreenSizeH )
    end
end

local DarkBlack = Color(0, 0, 0, 200)
local DarkestBlack = Color(0, 0, 0, 230)
function Minigames.Paint(self, w, h)
    RememberCursorPosition()

    if Minigames.Config["BlurVGUI"] then
        Minigames.BlurMenu(self)
    end

    -- surface.SetDrawColor( DarkestBlack )
    draw.RoundedBox( 4, 0, 0, w, h, DarkestBlack )
    draw.RoundedBoxEx( 4, 0, 0, w, 24, DarkBlack, true, true, h < 30 , h < 30  )

    if h < 30 then return end

    surface.SetDrawColor( color_white )
    draw.NoTexture()
    surface.DrawPoly({
        { x = w - 5, y = h },
        { x = w, y = h - 5 },
        { x = w, y = h }
    })

    surface.DrawPoly({
        { x = w - 9, y = h },
        { x = w - 12, y = h },
        { x = w, y = h - 12 },
        { x = w, y = h - 9 }
    })
end



function Minigames.ReceiveMessage()
    local msg = net.ReadString()
    local prefix = net.ReadString()

    chat.AddText(color_white, "[", CYAN, prefix, color_white, "] ", msg)
end

function Minigames.ReceiveToolTip()
    local GameID = net.ReadString()

    notification.AddLegacy( Minigames.GetPhrase(GameID .. ".tip"), NOTIFY_HINT, 6 )
    surface.PlaySound( "buttons/lightswitch2.wav" )
end

net.Receive("Minigames.Message", Minigames.ReceiveMessage)
net.Receive("Minigames.ToolTip", Minigames.ReceiveToolTip)
--addons/minigame-tool-assistant/lua/minigames/vgui/playerlist.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/vgui/togglegame.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/network.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/games/boxgame.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/games/deathmatch.lua:
--[[--------------------------------------------
                   Deathmatch
--------------------------------------------]]--


local SpawnPointBounds = Vector(6, 6, 6)
local ItemBounds = Vector(16, 16, 16)

local FrontLineColor = Color(70, 255, 70)

local LeaderboardBounds = 1

local ENTITY_TYPE = {
    "minigame_spawnpoint",
    "minigame_ammo",
    "minigame_weapon",
    "minigame_health",
    "minigame_armor",
}

local ENTITY_COLOR = {
    color_white,
    Color(255, 255, 0),
    Color(255, 150, 0),
    Color(0, 255, 0),
    Color(0, 255, 255),
}

local WEAPONS_KIT = {}

for _, NameKit in ipairs( table.GetKeys(Minigames.Config["WeaponsKit"]) ) do
    table.insert(WEAPONS_KIT, NameKit)
end

--[[----------------------------
       Initial Game Config
----------------------------]]--

local GameScript = Minigames.CreateNewGame()

GameScript:SetGameName("Deathmatch")

GameScript:AddHeader("deathmatch.weaponskit")

GameScript:AddConfig("WeaponsKit", {
    def = WEAPONS_KIT
})

GameScript:AddHeader("deathmatch.entitysettings")

GameScript:AddConfig("SpawnEntityType", {
    def = ENTITY_TYPE
})

GameScript:AddConfig("SpawnEntityTypeOffset", {
    min = 1,
    max = 64,
    def = 16
})

GameScript:AddConfig("SpawnPointRotation", {
    min = 0,
    max = 360,
    def = 0
})

GameScript:AddHeader("deathmatch.health")

GameScript:AddConfig("Health", {
    min = 10,
    max = 100,
    def = 100
})

GameScript:AddConfig("HealthRespawn", {
    min = 1,
    max = 20,
    dec = 1,
    def = 5
})

GameScript:AddHeader("deathmatch.armor")

GameScript:AddConfig("Armor", {
    min = 10,
    max = 100,
    def = 0
})

GameScript:AddConfig("ArmorRespawn", {
    min = 1,
    max = 20,
    dec = 1,
    def = 5
})

GameScript:AddHeader("deathmatch.ammo")

--[[
GameScript:AddConfig("Ammo", {
    min = 1,
    max = 100,
    def = 100
})
--]]

GameScript:AddConfig("AmmoRespawn", {
    min = 1,
    max = 20,
    dec = 1,
    def = 5
})

GameScript:AddHeader("!gameconfig")

GameScript:AddConfig("WinByTime", {
    def = false
})

GameScript:AddConfig("Time", {
    min = 30,
    max = 600,
    def = 120
})

GameScript:AddConfig("KillsToWin", {
    min = 1,
    max = 100,
    def = 10
})

GameScript:AddConfig("FallDamage", {
    def = false
})

--[[
GameScript:AddConfig("RespawnTime", {
    min = 1,
    max = 20,
    def = 2,
    dec = 1
})

GameScript:AddConfig("RespawnProtection", {
    min = 0,
    max = 10,
    def = 2,
    dec = 1
})
--]]

GameScript:AddHeader("deathmatch.leaderboard")

GameScript:AddConfig("Tall", {
    min = 150,
    max = 450,
    def = 150
})

GameScript:AddConfig("Wide", {
    min = 200,
    max = 450,
    def = 200
})

GameScript:AddConfig("HeightOffset", {
    min = 10,
    max = 2048,
    def = 150
})

GameScript:AddConfig("AngleOffset", {
    min = 0,
    max = 360,
    def = 0
})

GameScript:ListenToConfig("WinByTime", function(self, NewVal)
    self.Leaderboard:SetTimeEnabled(NewVal)
end)

GameScript:ListenToConfig("FallDamage", function(self, NewVal)
    self.FallDamageEnabled = NewVal
end)


--[[----------------------------
         Trigger Events
----------------------------]]--

GameScript:AddHook("DEATHMATCH PlayerDeath")
GameScript:AddHook("DEATHMATCH PlayerSelectSpawn")
GameScript:AddHook("DEATHMATCH PlayerSpawn")
GameScript:AddHook("DEATHMATCH GetFallDamage")

GameScript.PlayerMaxHealth = {}

function GameScript:OnPlayerChanged(ply, Joined)
    if self:IsActive() then return end

    if Joined then
        self.Leaderboard:AddPlayer(ply)

        self.PlayerMaxHealth[ply] = ply:GetMaxHealth()
        ply:SetMaxHealth(100)
    else
        self.Leaderboard:RemovePlayer(ply)

        ply:SetMaxHealth(self.PlayerMaxHealth[ply])
        self.PlayerMaxHealth[ply] = nil
    end
end

--[[----------------------------
         Score Functions
----------------------------]]--

GameScript.PlayerScore = {}
GameScript.WinByTime = false
GameScript.KillsToWin = 0

function GameScript:AddPoint(ply)
    self.PlayerScore[ply] = self.PlayerScore[ply] + 1

    self.Leaderboard:AddPlayerPoint(ply, 1)

    if self.WinByTime then return end
    if self.PlayerScore[ply] >= self.KillsToWin then
        self:SetPlayerWinner(ply)
        self:StopGame()
    end
end


--[[----------------------------
        Player Functions
----------------------------]]--

function GameScript:Spectate(ply)
    ply:StripWeapons()
    ply:StripAmmo()
    ply:Spectate(OBS_MODE_CHASE)
end

function GameScript:UnSpecate(ply)
    ply:UnSpectate()
    ply:Spawn()
end


--[[----------------------------
         Items Functions
----------------------------]]--

GameScript.Spawns = {}
GameScript.WeaponItem = {}
GameScript.HealthItem = {}
GameScript.ArmorItem = {}
GameScript.WeaponDefault = "weapon_crowbar"

function GameScript:SpawnItems()
    -- Items
    local HealthAmount, HealthRespawn = self:GetOwnerConfig("Health"), self:GetOwnerConfig("HealthRespawn")
    local ArmorAmount, ArmorRespawn = self:GetOwnerConfig("Armor"), self:GetOwnerConfig("ArmorRespawn")

    for _, item in ipairs(self.HealthItem) do
        item:SetActive(true)
        item:SetItemAmount(HealthAmount)
        item:SetItemRespawnTime(HealthRespawn)
    end

    for _, item in ipairs(self.ArmorItem) do
        item:SetActive(true)
        item:SetItemAmount(ArmorAmount)
        item:SetItemRespawnTime(ArmorRespawn)
    end

    -- Weapons
    local WeaponKit, WeaponRespawn = self:GetOwnerConfig("WeaponsKit"), self:GetOwnerConfig("AmmoRespawn")
    for _, item in ipairs(self.WeaponItem) do
        item:SetActive(true)
        item:SetItemWeaponKit( WEAPONS_KIT[WeaponKit] )
        item:SetItemRespawnTime(WeaponRespawn)
    end
end


function GameScript:CreateSpawn(trace)
    local SpawnPoint, Index = self:CreateEntity("minigame_item", "Spawns")
    local pos = trace.HitPos + trace.HitNormal * self:GetOwnerConfig("SpawnEntityTypeOffset")
    local ang = Angle(0, self:GetOwnerConfig("SpawnPointRotation"), 0)

    SpawnPoint:SetPos(pos)
    SpawnPoint:SetAngles(ang)
    SpawnPoint:Spawn()
    SpawnPoint:SetSpawnEntityType(1)

    table.insert(self.Spawns, SpawnPoint)
    table.insert(self.DefaultTeleportEntities, SpawnPoint)

    undo.Create("deathmatch." .. self:GetOwnerID() .. ".spawnpoint")
        undo.AddEntity(SpawnPoint)
        undo.SetPlayer(self:GetOwner())

        -- Remove entity on undo
        undo.AddFunction(function(_, CurrentOwner)
            if not IsValid(CurrentOwner) then return end
            if not Minigames.GetOwnerGame(CurrentOwner) then return end

            self:RemoveEntityByIndex(Index, "Spawns", false)
            table.RemoveByValue(self.DefaultTeleportEntities, SpawnPoint)
        end, self:GetOwner())
    undo.Finish("Minigame Deathmatch - Spawn Point")

    return true
end

function GameScript:CreateSpawnItem( trace )
    local SpawnItemEntity = self:GetOwnerConfig("SpawnEntityType")
    if SpawnItemEntity == 1 then
        return self:CreateSpawn(trace)
    end

    local pos = trace.HitPos + trace.HitNormal * self:GetOwnerConfig("SpawnEntityTypeOffset")
    local EntityPoint, Index = self:CreateEntity("minigame_item", "Items")

    EntityPoint:SetPos(pos)
    EntityPoint:SetAngles(angle_zero)
    EntityPoint:Spawn()
    EntityPoint:SetSpawnEntityType(SpawnItemEntity)

    undo.Create("deathmatch." .. self:GetOwnerID() .. ".spawnitem")
        undo.AddEntity(EntityPoint)
        undo.SetPlayer(self:GetOwner())

        -- Remove entity on undo
        undo.AddFunction(function(_, CurrentOwner, SubIndex)
            if not IsValid(CurrentOwner) then return end
            if not Minigames.GetOwnerGame(CurrentOwner) then return end

            self:RemoveEntityByIndex(SubIndex, "Items", false)
        end, self:GetOwner(), Index)

        if SpawnItemEntity == 3 then
            table.insert(self.WeaponItem, EntityPoint)
            undo.AddFunction(function(_, CurrentOwner)
                if not IsValid(CurrentOwner) then return end
                if not Minigames.GetOwnerGame(CurrentOwner) then return end

                table.RemoveByValue(self.WeaponItem, EntityPoint)
            end, self:GetOwner())

        elseif SpawnItemEntity == 4 then
            table.insert(self.HealthItem, EntityPoint)
            undo.AddFunction(function(_, CurrentOwner)
                if not IsValid(CurrentOwner) then return end
                if not Minigames.GetOwnerGame(CurrentOwner) then return end

                table.RemoveByValue(self.HealthItem, EntityPoint)
            end, self:GetOwner())

        elseif SpawnItemEntity == 5 then
            table.insert(self.ArmorItem, EntityPoint)
            undo.AddFunction(function(_, CurrentOwner)
                if not IsValid(CurrentOwner) then return end
                if not Minigames.GetOwnerGame(CurrentOwner) then return end

                table.RemoveByValue(self.ArmorItem, EntityPoint)
            end, self:GetOwner())
        end

    undo.Finish("Minigame Deathmatch - Spawn Item")

    return true
end


--[[----------------------------
         Main Functions
----------------------------]]--

function GameScript:SelectSpawnPoint(ply)
    local Spawns = self:GetAllEntities("Spawns")
    return Spawns[math.random(1, #Spawns)]
end

function GameScript:StartGame()
    local Players = self:GetPlayers(true)
    local Spawns = self:GetAllEntities("Spawns")

    if #Spawns < math.max(2, #Players) then
        self:SendToolTip({"deathmatch.insufficientspawns", math.max(2, #Players)}, 1)
        return false
    end

    if #self.Leaderboard.PlayerList >= 1 then
        self.Leaderboard:ResetPlayerList()

        for k, ply in ipairs(Players) do
            self.Leaderboard:AddPlayer(ply)
        end
    end
    -- self.Leaderboard:ResetPlayerList()

    self.WeaponDefault = Minigames.Config["WeaponsKit"][ WEAPONS_KIT[self:GetOwnerConfig("WeaponsKit")] ][1]

    for k, ply in ipairs(Players) do
        self.PlayerScore[ply] = 0
        local wpn = ply:Give(self.WeaponDefault)
        ply:SetActiveWeapon(wpn)
    end

    self:TeleportPlayers(Spawns)

    local Items = self:GetAllEntities("Items")
    for _, item in ipairs(Items) do
        item:SetActive(true)
    end

    self:SpawnItems()
    self:PlayGameStartSound()

    local WinByTime = self:GetOwnerConfig("WinByTime")

    if WinByTime then
        self.WinByTime = true
        self.KillsToWin = 0

        self.MainTimer = self:CreateChronometer("Game")
        self.MainTimer:SetLoop(true)
        self.MainTimer:SetVariable({Time = self:GetOwnerConfig("Time")})

        self.MainTimer:AddAction(function(Var)
            -- if not self:IsActive() then return true end

            self.Leaderboard:SetTime(Var.Time)

            Var.Time = Var.Time - 1

            if Var.Time < 0 then
                -- obtener los jugadores con el puntaje mas alto, si ambos jugadores tienen el mismo puntaje, darle el premio a ambos
                local CurrentPlayers = self:GetPlayers(true)
                local MaxScore = 0
                local Winners = {}

                for k, ply in ipairs(CurrentPlayers) do
                    if self.PlayerScore[ply] > MaxScore then
                        MaxScore = self.PlayerScore[ply]
                    end
                end

                for k, ply in ipairs(CurrentPlayers) do
                    if self.PlayerScore[ply] == MaxScore then
                        table.insert(Winners, ply)
                    end
                end

                self:SetPlayersWinner(Winners)

                self:StopGame()
                self:PlayGameEndSound()

                return true
            end
        end)

        self.MainTimer:Wait(1)

        self.MainTimer:Start()

    else
        self.WinByTime = false
        self.KillsToWin = self:GetOwnerConfig("KillsToWin")
    end

    self.FullyStarted = true

    return Minigames.GameStart( self )
end

function GameScript:StopGame()
    self:RemoveChronometer("Game")

    self.PlayerScore = {}

    local Items = self:GetAllEntities("Items")
    for _, item in ipairs(Items) do
        item:SetActive(false)
        item:SetIsCooldown(false)
    end

    self.FullyStarted = false

    return Minigames.GameStop( self )
end

function GameScript:ToggleGame()
    local Result = false

    if self:IsActive() then
        Result = self:StopGame()
    else
        Result = self:StartGame()
        if not Result then return false end
    end

    return Result
end

function GameScript:SpawnGame( trace, owner )

    self.Leaderboard = self:CreateEntity("minigame_leaderboard")
    self.Leaderboard:SetPos(trace.HitPos + trace.HitNormal * self:GetOwnerConfig("HeightOffset"))
    self.Leaderboard:SetAngles(Angle(0, self:GetOwnerConfig("AngleOffset"), 90))
    self.Leaderboard:SetWide( self:GetOwnerConfig("Wide") )
    self.Leaderboard:SetTall( self:GetOwnerConfig("Tall") )
    self.Leaderboard:Spawn()

    self.Leaderboard:SetTimeEnabled( self:GetOwnerConfig("WinByTime") )
    self.FallDamageEnabled = self:GetOwnerConfig("FallDamage")

    self:SpawnPlayZone()

    return true
end


--[[----------------------------
           Pre-Render
----------------------------]]--

function GameScript:PreviewLeaderboard( trace, owner )
    hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawSpawnPoints")

    local Offset = self:GetOwnerConfig("HeightOffset")
    local HitPos = trace.HitPos + trace.HitNormal * Offset

    local Tall = self:GetOwnerConfig("Tall")
    local Wide = self:GetOwnerConfig("Wide")
    local ang = self:GetOwnerConfig("AngleOffset")

    local FrontLine = Vector(math.cos(math.rad(ang - 90)), math.sin(math.rad(ang - 90)), 0) * 70
    local FrontLineRight = Vector(math.cos(math.rad(ang)), math.sin(math.rad(ang)), 0) * 10
    local FrontLineLeft = Vector(math.cos(math.rad(ang + 180)), math.sin(math.rad(ang + 180)), 0) * 10

    local Bounds = Vector(Wide, LeaderboardBounds, Tall)

    hook.Add("PostDrawTranslucentRenderables", "Minigames.DrawLeaderboard", function()
        render.DrawWireframeBox(HitPos, Angle(0, ang, 0), -Bounds, Bounds, color_white, true)
        -- Arrow
        render.DrawLine(HitPos, HitPos + FrontLine * 1.15, FrontLineColor, true)
        render.DrawLine(HitPos + FrontLine * 1.15, HitPos + FrontLine + FrontLineRight, FrontLineColor, true)
        render.DrawLine(HitPos + FrontLine * 1.15, HitPos + FrontLine + FrontLineLeft, FrontLineColor, true)
    end)
end

function GameScript:PreviewSpawnPoints( trace, owner )
    hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawLeaderboard")

    if Minigames.GetOwnerGame( LocalPlayer() ):IsActive() then
        hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawSpawnPoints")
        return
    end

    hook.Add("PostDrawTranslucentRenderables", "Minigames.DrawSpawnPoints", function()
        local Offset = self:GetOwnerConfig("SpawnEntityTypeOffset")
        local StartPos = trace.HitNormal * Offset + trace.HitPos

        local SpawnEntityType = self:GetOwnerConfig("SpawnEntityType")
        local ColorBox = ENTITY_COLOR[SpawnEntityType]

        if SpawnEntityType == 1 then
            local ang = self:GetOwnerConfig("SpawnPointRotation")
            local BoxAngle = Angle(0, ang, 0)
            render.DrawWireframeBox(StartPos, BoxAngle, -SpawnPointBounds, SpawnPointBounds, ColorBox, true)

            local FrontLine = Vector(math.cos(math.rad(ang)), math.sin(math.rad(ang)), 0) * 16
            local FrontLineRight = Vector(math.cos(math.rad(ang + 90)), math.sin(math.rad(ang + 90)), 0) * 4
            local FrontLineLeft = Vector(math.cos(math.rad(ang - 90)), math.sin(math.rad(ang - 90)), 0) * 4

            render.DrawLine(StartPos, StartPos + FrontLine * 1.2, color_white, true)
            render.DrawLine(StartPos + FrontLine * 1.2, StartPos + FrontLine + FrontLineRight, color_white, true)
            render.DrawLine(StartPos + FrontLine * 1.2, StartPos + FrontLine + FrontLineLeft, color_white, true)
        else
            render.DrawWireframeBox(StartPos, angle_zero, -ItemBounds, ItemBounds, ColorBox, true)
        end
    end)

end


--[[----------------------------
        Action Functions
----------------------------]]--

function GameScript:LeftClick( trace, owner, FirstTime )
    local Result = true

    if FirstTime then
        Result = self:SpawnGame( trace, owner )
    else
        if IsValid(trace.Entity) and trace.Entity:IsPlayer() then
            if SERVER and #self.Leaderboard.PlayerList >= 1 then
                self.Leaderboard:ResetPlayerList()
            end

            Result = self:TogglePlayer( trace.Entity )
        else
            Result = self:CreateSpawnItem( trace )
        end
    end

    return Result
end

function GameScript:RightClick( trace, owner )
    return self:ToggleGame()
end

local ReloadDelay = 0
function GameScript:Reload( trace, owner )
    if CLIENT then
        if self:IsActive() then return end
        if ReloadDelay > CurTime() then return end

        local spawnentity = self:GetConfigCvar("SpawnEntityType")
        local spawnentitytype = spawnentity:GetInt() + 1

        if spawnentitytype > #ENTITY_TYPE then
            spawnentitytype = 1
        end

        spawnentity:SetInt(spawnentitytype)
        ReloadDelay = CurTime() + 0.2
    end
end

function GameScript:Think( trace, owner )
    if CLIENT then
        if Minigames.GetOwnerGame( LocalPlayer() ) then
            self:PreviewSpawnPoints( trace, owner )
        else
            self:PreviewLeaderboard( trace, owner )
        end
    end
end

function GameScript:RollUp( trace, owner )
    if CLIENT then
        hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawLeaderboard")
        hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawSpawnPoints")
    end
end

-- Client-side
local BoxSizeWidth = 380
local BoxSizeHeight = 100
local BoxHeightOffset = 24
local BoxColor = Color(0, 0, 0, 230)
local EntityConvar = nil

function GameScript:DrawHUD()
    if not Minigames.ActiveGames[ LocalPlayer() ] then return end
    if Minigames.ActiveGames[ LocalPlayer() ]:IsActive() then return end
    if not EntityConvar then EntityConvar = self:GetConfigCvar("SpawnEntityType") end

    -- Draw a small box of the current spawn entity type
    local ScreenW, ScreenH = ScrW(), ScrH()

    draw.RoundedBox(8, ( ScreenW * 0.5 ) - ( BoxSizeWidth / 2 ), ScreenH - BoxSizeHeight - BoxHeightOffset, BoxSizeWidth, BoxSizeHeight, BoxColor)
    draw.SimpleText( Minigames.GetPhrase("deathmatch.spawnentitytype"), "Trebuchet24", ScreenW * 0.5, ScreenH - BoxSizeHeight * 0.75 - BoxHeightOffset, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

    local Phrase = Minigames.GetPhrase(ENTITY_TYPE[EntityConvar:GetInt()])

    draw.SimpleText( Phrase, "Trebuchet24", ScreenW * 0.5, ScreenH - BoxSizeHeight * 0.55 + 24 - BoxHeightOffset, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
end

Minigames.RegisterNewGame(GameScript)


--[[----------------------------
               Hooks
----------------------------]]--

hook.Add("CanUndo", "Minigames.CanUndo.Deathmatch", function(owner, tbl)
    if table.IsEmpty(tbl) then return end
    if tbl.Name == nil then return end

    local UndoInfo = string.Split( tbl.Name, "." )
    if ( #UndoInfo == 3 ) and ( UndoInfo[1] == "deathmatch" ) then
        local TargetGame = Minigames.GetOwnerGame( owner )

        if TargetGame and TargetGame:IsActive() then
            Minigames.BroadcastMessage( Minigames.GetPhrase("minigames.error.gameisactive"), owner )
            return false
        else
            return true
        end
    end
end)

-- Remove all deathmatch undos
hook.Add("Minigames.PreRemoveGame", "Minigames.RemoveDeathmatchUndos", function( owner, CurrentGame )
    if CurrentGame:GetGameID() ~= "deathmatch" then return end

    local OwnerUndos = undo.GetTable()[owner:UniqueID()]
    if not OwnerUndos then return end

    for k, UndoTbl in ipairs(OwnerUndos) do
        if not UndoTbl.Name then continue end

        local UndoInfo = string.Split( UndoTbl.Name, "." )
        if not ( table.IsEmpty(UndoInfo) ) and ( UndoInfo[1] == "deathmatch" ) then
            undo.Do_Undo( UndoTbl )
        end
    end
end)

if SERVER then
    hook.Add("Minigames.GameStart", "Minigames.Deathmatch.GiveOwnerWeapon", function(Owner, CurrentGame)
        if CurrentGame:GetGameID() ~= "deathmatch" then return end
        if not CurrentGame:HasPlayer(Owner) then return end

        timer.Simple(0.1, function()
            if not IsValid(Owner) then return end
            if not CurrentGame:IsActive() then return end

            local wpn = Owner:Give(CurrentGame.WeaponDefault)
            Owner:SetActiveWeapon(wpn)
        end)
    end)
end
--addons/minigame-tool-assistant/lua/minigames/rewards/hwprewrite.lua:
local Reward = Minigames.CreateNewReward()

Reward:SetName("Magic Wand Rewrite")
Reward:SetNameAmount(function(item)
    return "The spell \"" .. item .. "\""
end)
Reward:SetIcon("minigames/icons/hwprewrite_icon.png")

Reward:SetFunctionReward(function(owner, ply, spell)
    if HpwRewrite then
        HpwRewrite:SaveAndGiveSpell(ply, spell)
    end
end)

Reward:AddArgument({ --> spell
    ["Name"] = "Spell",
    ["Type"] = "Text",
    ["Default"] = "hpw_reducto",
    ["Placeholder"] = "Spell name"
})

--[[
local Spells = {}
for spell, value in pairs( HpwRewrite:GetSpells() ) do
    Spells[spell] = string.Replace(spell, " ", "_")
end

Reward:AddArgument({
    Options = Spells,
    Convert = function(v) return v end
})
--]]

Minigames.RegisterReward(Reward)
--addons/minigame-tool-assistant/lua/minigames/rewards/mtokens.lua:
local Reward = Minigames.CreateNewReward()

Reward:SetName("mTokens")
Reward:SetNameAmount(function(tokens)
    return tokens .. " mTokens"
end)
Reward:SetIcon("minigames/icons/mtokens_icon.png")

Reward:SetFunctionReward(function(owner, ply, tokens)
    RunConsoleCommand("mtokens_givetokens", ply:SteamID64(), tokens)
end)

Reward:AddArgument({ --> Amount
    ["Name"] = "Tokens",
    ["Type"] = "Slider",
    ["Min"] = 1,
    ["Max"] = 300,
    ["Default"] = 50,
})

Minigames.RegisterReward(Reward)
--addons/minigame-tool-assistant/lua/minigames/rewards/vpet.lua:
local Reward = Minigames.CreateNewReward()

Reward:SetName("VPet")
Reward:SetNameAmount(function(petname)
    return petname
end)

Reward:SetIcon("minigames/icons/vpet.png")

Reward:SetFunctionReward(function(owner, ply, petname)
    RunConsoleCommand("add_pet", ply:SteamID64(), petname)
end)

Reward:AddArgument({
    ["Name"] = "Pet",
    ["Type"] = "Text",
    ["Default"] = "Dog",
    ["Placeholder"] = "The pet's name"
})

Minigames.RegisterReward(Reward)
--addons/mayor_voting/lua/panels/cl_playericon.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/autorun/includes/modules/browserpool.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/cl_init.lua:
if MediaPlayer then
	-- TODO: compare versions?
	if MediaPlayer.__refresh then
		MediaPlayer.__refresh = nil
	else
		return -- MediaPlayer has already been registered
	end
end

include "controls/dmediaplayerhtml.lua"
include "controls/dhtmlcontrols.lua"
include "controls/dmediaplayerrequest.lua"
include "shared.lua"
include "cl_requests.lua"
include "cl_idlescreen.lua"
include "cl_screen.lua"

function MediaPlayer.Volume( volume )

	local cur = MediaPlayer.Cvars.Volume:GetFloat()

	if volume then

		-- Normalize volume
		volume = volume > 1 and volume / 100 or volume

		-- Set volume convar
		RunConsoleCommand( "mediaplayer_volume", volume )

		-- Apply volume to all media players
		for _, mp in pairs( MediaPlayer.List ) do
			if mp:IsPlaying() then
				local media = mp:CurrentMedia()
				if media then
					media:Volume( volume )
				end
			end
		end

		hook.Run( MP.EVENTS.VOLUME_CHANGED, volume, cur )

		cur = volume

	end

	return cur

end

local muted = false
local previousVolume
function MediaPlayer.ToggleMute()
	if not muted then
		previousVolume = MediaPlayer.Volume()
	end

	local vol = muted and previousVolume or 0
	MediaPlayer.Volume( vol )
	muted = not muted
end

function MediaPlayer.Resolution( resolution )

	if resolution then
		resolution = math.Clamp( resolution, 16, 4096 )
		RunConsoleCommand( "mediaplayer_resolution", resolution )
	end

	return MediaPlayer.Cvars.Resolution:GetFloat()

end


--[[---------------------------------------------------------
	Utility functions
-----------------------------------------------------------]]

local FullscreenCvar = MediaPlayer.Cvars.Fullscreen

function MediaPlayer.SetBrowserSize( browser, w, h )

	local fullscreen = FullscreenCvar:GetBool()

	if fullscreen then
		w, h = ScrW(), ScrH()
	end

	browser:SetSize( w, h, fullscreen )

end

function MediaPlayer.OpenRequestMenu( mp )

	if IsValid(MediaPlayer._RequestMenu) then
		return
	end

	mp = MediaPlayer.GetByObject( mp )

	if not mp then
		Error( "MediaPlayer.OpenRequestMenu: Invalid media player.\n" )
		return
	end

	local req = vgui.Create( "MPRequestFrame" )
	req:SetMediaPlayer( mp )
	req:MakePopup()
	req:Center()

	req.OnClose = function()
		MediaPlayer._RequestMenu = nil
	end

	MediaPlayer._RequestMenu = req

end

function MediaPlayer.MenuRequest( url )

	local menu = MediaPlayer._RequestMenu

	if not IsValid(menu) then
		return
	end

	local mp = menu:GetMediaPlayer()

	menu:Close()

	MediaPlayer.Request( mp, url )

end


--[[---------------------------------------------------------
	Fonts
-----------------------------------------------------------]]

local common = {
	-- font		= "Open Sans Condensed",
	-- font		= "Oswald",
	font		= "Comfortaa",
	antialias	= true,
	extended 	= true,
	weight		= 400
}

surface.CreateFont( "MediaTitle", table.Merge(common, { size = 72 }) )
surface.CreateFont( "MediaRequestButton", table.Merge(common, { size = 26 }) )

--addons/media_player_fixed_edition/lua/mediaplayer/config/client.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/sh_mediaplayer.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/players/base/net.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/services/dailymotion/shared.lua:
DEFINE_BASECLASS( "mp_service_base" )

SERVICE.Name 	= "Dailymotion"
SERVICE.Id 		= "dm"
SERVICE.Base 	= "browser"

function SERVICE:New( url )
	local obj = BaseClass.New(self, url)
	obj._data = obj:GetDailymotionVideoId()
	return obj
end

function SERVICE:Match( url )
	return string.find( url, "dailymotion.com/video/([%a%d-_]+)")
end

function SERVICE:GetDailymotionVideoId()

	local videoId

	if self.videoId then

		videoId = self.videoId

	elseif self.urlinfo then

		local url = self.urlinfo

		-- https://www.dailymotion.com/(videoId)
		videoId = string.match(url.path, "^/video/([%a%d-_]+)")

		self.videoId = videoId

	end

	return videoId

end

--addons/media_player_fixed_edition/lua/mediaplayer/services/archive/cl_init.lua:
include "shared.lua"

DEFINE_BASECLASS( "mp_service_browser" )

function SERVICE:GetURL()
	local Data = string.Explode(",", self:GetArchiveVideoId())
	local identifier, file = Data[1], ( Data[2] and Data[2] or nil )

	return ("https://cors.archive.org/download/%s/%s"):format( identifier, self:Title() )
end

do -- Media Hook
	local JS_Interface = [[
		var checkerInterval = setInterval(function() {
			var player = document.getElementsByTagName('video')[0];
			if (!!player && player.paused == false && player.readyState == 4) {
				clearInterval(checkerInterval);

				window.MediaPlayer = player;

				player.style = "width:100%; height: 100%;";
				document.body.style.backgroundColor = "black";
			}
		}, 50)
	]]

	function SERVICE:OnBrowserReady( browser )

		BaseClass.OnBrowserReady( self, browser )

		browser:OpenURL( self:GetURL() )
		browser.OnDocumentReady = function(pnl)
			browser:RunJavascript( JS_Interface )
		end

	end
end

do	-- Media Controls
	local JS_Pause = "if(window.MediaPlayer) MediaPlayer.pause();"
	local JS_Volume = "if(window.MediaPlayer) MediaPlayer.volume = %s;"
	local JS_Seek = [[
		if (window.MediaPlayer) {
			var seekTime = %s;
			var curTime = window.MediaPlayer.currentTime;

			var diffTime = Math.abs(curTime - seekTime);
			if (diffTime > 5) {
				window.MediaPlayer.currentTime = seekTime
			}
		}
	]]

	function SERVICE:Pause()
		BaseClass.Pause( self )

		if IsValid(self.Browser) then
			self.Browser:RunJavascript(JS_Pause)
			self._YTPaused = true
		end

	end

	function SERVICE:SetVolume( volume )
		local js = JS_Volume:format( MediaPlayer.Volume() )
		self.Browser:RunJavascript(js)
	end

	function SERVICE:Sync()

		local seekTime = self:CurrentTime()
		if self:IsTimed() and seekTime > 0 then
			self.Browser:RunJavascript(JS_Seek:format(seekTime))
		end
	end
end
--addons/media_player_fixed_edition/lua/mediaplayer/services/resource/cl_init.lua:
include "shared.lua"

DEFINE_BASECLASS( "mp_service_browser" )

function SERVICE:OnBrowserReady( browser )
	BaseClass.OnBrowserReady( self, browser )

	local html = self:GetHTML()
	html = self.WrapHTML( html )

	self.Browser:SetHTML( html )
end

function SERVICE:GetHTML()
	return "<h1>SERVICE.GetHTML not yet implemented</h1>"
end

--addons/media_player_fixed_edition/lua/mediaplayer/services/webpage.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/services/audiofile/shared.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/cl_idlescreen.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mp_menu/common.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mp_menu/volume_control.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mp_menu/horizontal_list.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/autorun/mediaplayer_spawnables.lua:
local MediaPlayerClass = "mediaplayer_tv"

local function AddMediaPlayerModel( spawnName, name, model, playerConfig )
	list.Set( "SpawnableEntities", spawnName, {
		PrintName = name,
		ClassName = MediaPlayerClass,
		Category = "Media Player",
		DropToFloor = true,
		KeyValues = {
			model = model
		}
	} )

	list.Set( "MediaPlayerModelConfigs", model, playerConfig )
end

AddMediaPlayerModel(
	"../spawnicons/models/hunter/plates/plate5x8",
	"Huge Billboard",
	"models/hunter/plates/plate5x8.mdl",
	{
		angle = Angle(0, 90, 0),
		offset = Vector(-118.8, 189.8, 2.5),
		width = 380,
		height = 238
	}
)

AddMediaPlayerModel(
	"../spawnicons/models/props_phx/rt_screen",
	"Small TV",
	"models/props_phx/rt_screen.mdl",
	{
		angle = Angle(-90, 90, 0),
		offset = Vector(6.5, 27.9, 35.3),
		width = 56,
		height = 33
	}
)

if SERVER then

	-- fix for media player owner not getting set on alternate model spawn
	hook.Add( "PlayerSpawnedSENT", "MediaPlayer.SetOwner", function(ply, ent)
		if not ent.IsMediaPlayerEntity then return end
		ent:SetCreator(ply)
		local mp = ent:GetMediaPlayer()
		mp:SetOwner(ply)
	end )

end

--addons/onyx_framework_2/lua/onyx/framework/libs/thirdparty/data/utf8_chunk_2.lua:
return {[940] = 902,[941] = 904,[942] = 905,[943] = 906,[945] = 913,[946] = 914,[947] = 915,[948] = 916,[949] = 917,[950] = 918,[951] = 919,[952] = 920,[953] = 921,[954] = 922,[955] = 923,[956] = 924,[957] = 925,[958] = 926,[959] = 927,[960] = 928,[961] = 929,[962] = 931,[963] = 931,[964] = 932,[965] = 933,[966] = 934,[967] = 935,[968] = 936,[969] = 937,[970] = 938,[971] = 939,[972] = 908,[973] = 910,[974] = 911,[976] = 914,[977] = 920,[981] = 934,[982] = 928,[985] = 984,[987] = 986,[989] = 988,[991] = 990,[993] = 992,[995] = 994,[997] = 996,[999] = 998,[1001] = 1000,[1003] = 1002,[1005] = 1004,[1007] = 1006,[1008] = 922,[1009] = 929,[1010] = 1017,[1013] = 917,[1016] = 1015,[1019] = 1018,[1072] = 1040,[1073] = 1041,[1074] = 1042,[1075] = 1043,[1076] = 1044,[1077] = 1045,[1078] = 1046,[1079] = 1047,[1080] = 1048,[1081] = 1049,[1082] = 1050,[1083] = 1051,[1084] = 1052,[1085] = 1053,[1086] = 1054,[1087] = 1055,[1088] = 1056,[1089] = 1057,[1090] = 1058,[1091] = 1059,[1092] = 1060,[1093] = 1061,[1094] = 1062,[1095] = 1063,[1096] = 1064,[1097] = 1065,[1098] = 1066,[1099] = 1067,[1100] = 1068,[1101] = 1069,[1102] = 1070,[1103] = 1071,[1104] = 1024,[1105] = 1025,[1106] = 1026,[1107] = 1027,[1108] = 1028,[1109] = 1029,[1110] = 1030,[1111] = 1031,[1112] = 1032,[1113] = 1033,[1114] = 1034,[1115] = 1035,[1116] = 1036,[1117] = 1037,[1118] = 1038,[1119] = 1039,[1121] = 1120,[1123] = 1122,[1125] = 1124,[1127] = 1126,[1129] = 1128,[1131] = 1130,[1133] = 1132,[1135] = 1134,[1137] = 1136,[1139] = 1138,[1141] = 1140,[1143] = 1142,[1145] = 1144,[1147] = 1146,[1149] = 1148,[1151] = 1150,[1153] = 1152,[1163] = 1162,[1165] = 1164,[1167] = 1166,[1169] = 1168,[1171] = 1170,[1173] = 1172,[1175] = 1174,[1177] = 1176,[1179] = 1178,[1181] = 1180,[1183] = 1182,[1185] = 1184,[1187] = 1186,[1189] = 1188,[1191] = 1190,[1193] = 1192,[1195] = 1194,[1197] = 1196,[1199] = 1198,[1201] = 1200,[1203] = 1202,[1205] = 1204,[1207] = 1206,[1209] = 1208,[1211] = 1210,[1213] = 1212,[1215] = 1214,[1218] = 1217,[1220] = 1219,[1222] = 1221,[1224] = 1223,[1226] = 1225,[1228] = 1227,[1230] = 1229,[1231] = 1216,[1233] = 1232,[1235] = 1234,[1237] = 1236,[1239] = 1238,[1241] = 1240,[1243] = 1242,[1245] = 1244,[1247] = 1246,[1249] = 1248,[1251] = 1250,[1253] = 1252,[1255] = 1254,[1257] = 1256,[1259] = 1258,[1261] = 1260,[1263] = 1262,[1265] = 1264,[1267] = 1266,[1269] = 1268,[1271] = 1270,[1273] = 1272,[1275] = 1274,[1277] = 1276,[1279] = 1278,[1281] = 1280,[1283] = 1282,[1285] = 1284,[1287] = 1286,[1289] = 1288,[1291] = 1290,[1293] = 1292,[1295] = 1294,[1297] = 1296,[1299] = 1298,[1377] = 1329,[1378] = 1330,[1379] = 1331,[1380] = 1332,[1381] = 1333,[1382] = 1334,[1383] = 1335,[1384] = 1336,[1385] = 1337,[1386] = 1338,[1387] = 1339,[1388] = 1340,[1389] = 1341,[1390] = 1342,[1391] = 1343,[1392] = 1344,[1393] = 1345,[1394] = 1346,[1395] = 1347,[1396] = 1348,[1397] = 1349,[1398] = 1350,[1399] = 1351,[1400] = 1352,[1401] = 1353,[1402] = 1354,[1403] = 1355,[1404] = 1356,[1405] = 1357,[1406] = 1358,[1407] = 1359,[1408] = 1360,[1409] = 1361,[1410] = 1362,[1411] = 1363,[1412] = 1364,[1413] = 1365,[1414] = 1366,[7549] = 11363,[7681] = 7680,[7683] = 7682,[7685] = 7684,[7687] = 7686,[7689] = 7688,}
--addons/onyx_framework_2/lua/onyx/framework/libs/thirdparty/data/utf8_chunk_3.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/thirdparty/data/utf8_chunk_3.lua:
return {[7689] = 7688,[7691] = 7690,[7693] = 7692,[7695] = 7694,[7697] = 7696,[7699] = 7698,[7701] = 7700,[7703] = 7702,[7705] = 7704,[7707] = 7706,[7709] = 7708,[7711] = 7710,[7713] = 7712,[7715] = 7714,[7717] = 7716,[7719] = 7718,[7721] = 7720,[7723] = 7722,[7725] = 7724,[7727] = 7726,[7729] = 7728,[7731] = 7730,[7733] = 7732,[7735] = 7734,[7737] = 7736,[7739] = 7738,[7741] = 7740,[7743] = 7742,[7745] = 7744,[7747] = 7746,[7749] = 7748,[7751] = 7750,[7753] = 7752,[7755] = 7754,[7757] = 7756,[7759] = 7758,[7761] = 7760,[7763] = 7762,[7765] = 7764,[7767] = 7766,[7769] = 7768,[7771] = 7770,[7773] = 7772,[7775] = 7774,[7777] = 7776,[7779] = 7778,[7781] = 7780,[7783] = 7782,[7785] = 7784,[7787] = 7786,[7789] = 7788,[7791] = 7790,[7793] = 7792,[7795] = 7794,[7797] = 7796,[7799] = 7798,[7801] = 7800,[7803] = 7802,[7805] = 7804,[7807] = 7806,[7809] = 7808,[7811] = 7810,[7813] = 7812,[7815] = 7814,[7817] = 7816,[7819] = 7818,[7821] = 7820,[7823] = 7822,[7825] = 7824,[7827] = 7826,[7829] = 7828,[7835] = 7776,[7841] = 7840,[7843] = 7842,[7845] = 7844,[7847] = 7846,[7849] = 7848,[7851] = 7850,[7853] = 7852,[7855] = 7854,[7857] = 7856,[7859] = 7858,[7861] = 7860,[7863] = 7862,[7865] = 7864,[7867] = 7866,[7869] = 7868,[7871] = 7870,[7873] = 7872,[7875] = 7874,[7877] = 7876,[7879] = 7878,[7881] = 7880,[7883] = 7882,[7885] = 7884,[7887] = 7886,[7889] = 7888,[7891] = 7890,[7893] = 7892,[7895] = 7894,[7897] = 7896,[7899] = 7898,[7901] = 7900,[7903] = 7902,[7905] = 7904,[7907] = 7906,[7909] = 7908,[7911] = 7910,[7913] = 7912,[7915] = 7914,[7917] = 7916,[7919] = 7918,[7921] = 7920,[7923] = 7922,[7925] = 7924,[7927] = 7926,[7929] = 7928,[7936] = 7944,[7937] = 7945,[7938] = 7946,[7939] = 7947,[7940] = 7948,[7941] = 7949,[7942] = 7950,[7943] = 7951,[7952] = 7960,[7953] = 7961,[7954] = 7962,[7955] = 7963,[7956] = 7964,[7957] = 7965,[7968] = 7976,[7969] = 7977,[7970] = 7978,[7971] = 7979,[7972] = 7980,[7973] = 7981,[7974] = 7982,[7975] = 7983,[7984] = 7992,[7985] = 7993,[7986] = 7994,[7987] = 7995,[7988] = 7996,[7989] = 7997,[7990] = 7998,[7991] = 7999,[8000] = 8008,[8001] = 8009,[8002] = 8010,[8003] = 8011,[8004] = 8012,[8005] = 8013,[8017] = 8025,[8019] = 8027,[8021] = 8029,[8023] = 8031,[8032] = 8040,[8033] = 8041,[8034] = 8042,[8035] = 8043,[8036] = 8044,[8037] = 8045,[8038] = 8046,[8039] = 8047,[8048] = 8122,[8049] = 8123,[8050] = 8136,[8051] = 8137,[8052] = 8138,[8053] = 8139,[8054] = 8154,[8055] = 8155,[8056] = 8184,[8057] = 8185,[8058] = 8170,[8059] = 8171,[8060] = 8186,[8061] = 8187,[8064] = 8072,[8065] = 8073,[8066] = 8074,[8067] = 8075,[8068] = 8076,[8069] = 8077,[8070] = 8078,[8071] = 8079,[8080] = 8088,[8081] = 8089,[8082] = 8090,[8083] = 8091,[8084] = 8092,[8085] = 8093,[8086] = 8094,[8087] = 8095,[8096] = 8104,[8097] = 8105,[8098] = 8106,[8099] = 8107,[8100] = 8108,[8101] = 8109,[8102] = 8110,[8103] = 8111,[8112] = 8120,[8113] = 8121,[8115] = 8124,[8126] = 921,[8131] = 8140,[8144] = 8152,[8145] = 8153,[8160] = 8168,[8161] = 8169,[8165] = 8172,[8179] = 8188,[8526] = 8498,[8560] = 8544,[8561] = 8545,[8562] = 8546,[8563] = 8547,[8564] = 8548,[8565] = 8549,[8566] = 8550,[8567] = 8551,[8568] = 8552,[8569] = 8553,[8570] = 8554,[8571] = 8555,[8572] = 8556,[8573] = 8557,[8574] = 8558,[8575] = 8559,[8580] = 8579,[9424] = 9398,[9425] = 9399,}
--addons/onyx_framework_2/lua/onyx/framework/libs/cl_lang.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/sh_netchunk.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/sh_net_extension.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/sh_netvar.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/libs/cl_util.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

05/06/2022

--]]

do
    local Lerp = Lerp
    local Color = Color
    local Clamp = math.Clamp
    function onyx.LerpColor(speed, from, to)
        local r = Lerp(speed, from.r, to.r)
        local g = Lerp(speed, from.g, to.g)
        local b = Lerp(speed, from.b, to.b)
        local a = Lerp(speed, from.a, to.a)

        return Color(r, g, b, a)
    end

    function onyx.CopyColor(color)
        assert(color, 'missing color')
        return Color(color.r, color.g, color.b, color.a)
    end

    function onyx.ColorBetween(clr1, clr2, fraction)
        fraction = fraction or .5
        local r = Lerp(fraction, clr1.r, clr2.r)
        local g = Lerp(fraction, clr1.g, clr2.g)
        local b = Lerp(fraction, clr1.b, clr2.b)
        return Color(r, g, b)
    end

    function onyx.OffsetColor(color, offset)
        assert(color, 'missing color')

        offset = offset or 0

        local r = Clamp(color.r + offset, 0, 255)
        local g = Clamp(color.g + offset, 0, 255)
        local b = Clamp(color.b + offset, 0, 255)

        return Color(r, g, b)
    end

    function onyx.ColorEditHSV(color, hue, saturation, value)
        local h, s, v = ColorToHSV(color)
        return HSVToColor(hue or h, math.Clamp(saturation or s, 0, 1), math.Clamp(value or v, 0, 1))
    end

    function onyx.GetOppositeAccentColor()
        local color = onyx:Config('colors.accent')
        local h, s, v = ColorToHSV(color)
        return onyx.ColorEditHSV(color, (h + 180) % 360)
    end
end

do
    local matBlur = Material('pp/blurscreen')

    local UpdateScreenEffectTexture = render.UpdateScreenEffectTexture
    local DrawTexturedRect = surface.DrawTexturedRect
    local SetMaterial = surface.SetMaterial
    local SetDrawColor = surface.SetDrawColor

    function onyx.DrawBlurExpensive(panel, amount)
        local x, y = panel:LocalToScreen(0, 0)
        local scrW, scrH = ScrW(), ScrH()

        SetDrawColor(255, 255, 255)
        SetMaterial(matBlur)

        for i = 1, 3 do
            matBlur:SetFloat('$blur', (i / 3) * (amount or 6))
            matBlur:Recompute()
            UpdateScreenEffectTexture()
            DrawTexturedRect(x * -1, y * -1, scrW, scrH)
        end
    end
end

do
    local DrawTexturedRectRotated = surface.DrawTexturedRectRotated
    local DrawTexturedRect = surface.DrawTexturedRect
    local SetDrawColor = surface.SetDrawColor
    local SetMaterial = surface.SetMaterial

    function onyx.DrawMaterial(mat, x, y, w, h, color)
        color = color or color_white

        SetMaterial(mat)
        SetDrawColor(color)
        DrawTexturedRect(x, y, w, h)
    end

    function onyx.DrawMaterialRotated(mat, x, y, w, h, angle, color)
        color = color or color_white
        angle = angle or 0

        SetMaterial(mat)
        SetDrawColor(color)
        DrawTexturedRectRotated(x + w * .5, y + h * .5, w, h, angle)
    end
end

function onyx.DrawTextInBox(text, font, x, y, roundness, paddingX, paddingY, textColor, boxColor, alignmentX, alignmentY)
    alignmentX = alignmentX or 1
    alignmentY = alignmentY or 1

    surface.SetFont(font)
    local textW, textH = surface.GetTextSize(text)

    textW = textW + paddingX * 2
    textH = textH + paddingY * 2

    draw.RoundedBox(roundness, x - textW * .5, y - textH * .5, textW, textH, boxColor)
    draw.SimpleText(text, font, x, y, textColor, alignmentX, alignmentY)
end

do
    local matGradientToBottom = Material('vgui/gradient-u')
    local matGradientToTop = Material('vgui/gradient-d')
    local matGradientToLeft = Material('vgui/gradient-l')
    local matGradientToRight = Material('vgui/gradient-r')

    local SetMaterial = surface.SetMaterial
    local SetDrawColor = surface.SetDrawColor
    local DrawTexturedRect = surface.DrawTexturedRect

    function onyx.DrawMatGradient(x, y, w, h, dir, color)
        if dir == BOTTOM then
            SetMaterial(matGradientToBottom)
        elseif (dir == LEFT) then
            SetMaterial(matGradientToLeft)
        elseif (dir == RIGHT) then
            SetMaterial(matGradientToRight)
        else
            SetMaterial(matGradientToTop)
        end
        SetDrawColor(color)
        DrawTexturedRect(x, y, w, h)
    end
end

function onyx.GetTextSize(text, font)
    surface.SetFont(font)
    return surface.GetTextSize(text)
end

do
    local ScrW = ScrW
    local ScrH = ScrH
    local Round = math.Round

    function onyx.ScaleWide(w, ref)
        ref = ref or 1600
        return Round(w / ref * ScrW())
    end

    function onyx.ScaleTall(h, ref)
        ref = ref or 900
        return Round(h / ref * ScrH())
    end
end

--[[------------------------------
SHAPES
--------------------------------]]
do
    local rad = math.rad
    local sin = math.sin
    local cos = math.cos
    local Round = math.Round

    function onyx.CalculateCircle(x0, y0, radius, vertices)
        local tbl, count = {}, 0
        local step = Round(360 / vertices)

        for ang = 0, 360, step do
            local rad = rad(ang)
            local cos = cos(rad)
            local sin = sin(rad)

            local x = x0 + radius * cos
            local y = y0 + radius * sin

            count = count + 1
            tbl[count] = {x = x, y = y}
        end

        return tbl
    end
end

do
    local rad = math.rad
    local sin = math.sin
    local cos = math.cos
    local Round = math.Round

    local insert = table.insert
    local table_Add = table.Add

    local function calculateCircle(x0, y0, startAngle, angleLength, radius, vertices, addCenter)
        local startAngle = startAngle - 90
        local vertices = vertices or 32
        local step = angleLength / vertices
        local tbl, count = {}, 0

        if (addCenter) then
            tbl[1] = {x = x0, y = y0}
            count = 1
        end

        for i = 0, vertices do
            local ang = startAngle + i * step
            local rad = rad(ang)
            local sin = sin(rad)
            local cos = cos(rad)

            local x = x0 + radius * cos
            local y = y0 + radius * sin

            count = count + 1
            tbl[count] = {x = x, y = y}
        end

        return tbl
    end
    onyx.CalculateArc = calculateCircle

    -- Custom
    function onyx.CalculateRoundedBoxEx(r, x, y, w, h, ruCorner, rbCorner, ldCorner, lbCorner)
        r = math.ceil(math.min(r, h / 2))

        if (r == 0) then
            ruCorner = false
            rbCorner = false
            ldCorner = false
            lbCorner = false
        end

        local vertices = {}

        insert(vertices, {x = x + r, y = y})

        -- Right Upper Corner
        if (ruCorner) then
            insert(vertices, {x = x + w - r, y = y})
            table_Add(vertices, calculateCircle(x + w - r, y + r, 0, 90, r, r))
            insert(vertices, {x = x + w, y = y + r})
        else
            insert(vertices, {x = x + w, y = y})
        end

        -- Right Bottom Corner
        if (rbCorner) then
            insert(vertices, {x = x + w, y = y + h - r})
            table_Add(vertices, calculateCircle(x + w - r, y + h - r, 90, 90, r, r))
            insert(vertices, {x = x + w - r, y = y + h})
        else
            insert(vertices, {x = x + w, y = y + h})
        end

        -- Left Bottom Corner
        if (ldCorner) then
            insert(vertices, {x = x + r, y = y + h})
            table_Add(vertices, calculateCircle(x + r, y + h - r, 180, 90, r, r))
            insert(vertices, {x = x, y = y + h - r})
        else
            insert(vertices, {x = x, y = y + h})
        end

        -- Left Upper Corner
        if (lbCorner) then
            insert(vertices, {x = x, y = y + r})
            table_Add(vertices, calculateCircle(x + r, y + r, 270, 90, r, r))
            insert(vertices, {x = x + r, y = y})
        else
            insert(vertices, {x = x, y = y})
        end

        return vertices
    end

    function onyx.CalculateRoundedBox(r, x, y, w, h)
        return onyx.CalculateRoundedBoxEx(r, x, y, w, h, true, true, true, true)
    end
end

function onyx.DrawPoly(poly, color, material)
    if (not poly or #poly < 1) then
        return
    end

    if (material) then
        surface.SetMaterial(material)
    else
        draw.NoTexture()
    end

    surface.SetDrawColor(color or color_white)
    surface.DrawPoly(poly)
end

--[[------------------------------
MASKING
--------------------------------]]
function onyx.MaskFn(funcMask, funcDraw)
    render.SetStencilWriteMask(255)
    render.SetStencilTestMask(255)
    render.SetStencilReferenceValue(0)
    render.SetStencilPassOperation(STENCIL_KEEP)
    render.SetStencilZFailOperation(STENCIL_KEEP)
    render.ClearStencil()

    render.SetStencilEnable(true)
    render.SetStencilReferenceValue(1)
    render.SetStencilCompareFunction(STENCIL_NEVER)
    render.SetStencilFailOperation(STENCIL_REPLACE)

    funcMask()

    render.SetStencilCompareFunction(STENCIL_EQUAL)
    render.SetStencilFailOperation(STENCIL_KEEP)

    funcDraw()

    render.SetStencilEnable(false)
end

function onyx.InverseMaskFn(funcMask, funcDraw)
    render.SetStencilWriteMask(255)
    render.SetStencilTestMask(255)
    render.SetStencilReferenceValue(0)
    render.SetStencilPassOperation(STENCIL_KEEP)
    render.SetStencilZFailOperation(STENCIL_KEEP)
    render.ClearStencil()

    render.SetStencilEnable(true)
    render.SetStencilReferenceValue(1)
    render.SetStencilCompareFunction(STENCIL_NEVER)
    render.SetStencilFailOperation(STENCIL_REPLACE)

    funcMask()

    render.SetStencilCompareFunction(STENCIL_GREATER)
    render.SetStencilFailOperation(STENCIL_KEEP)
    render.SetStencilZFailOperation(STENCIL_KEEP)

    funcDraw()

    render.SetStencilEnable(false)
end

function onyx.DrawWithPolyMask(poly, funcDraw)
    if (not istable(poly)) then return end

    onyx.MaskFn(function()
        draw.NoTexture()
        surface.SetDrawColor(color_white)
        surface.DrawPoly(poly)
    end, funcDraw)
end
--addons/onyx_framework_2/lua/onyx/ui/cfg/cl_config.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

05/06/2022

--]]

onyx.cfg.fontFamily = 'Comfortaa' -- probably does nothing, but I keep it just in case I missed something

local function hexcolor(hex)
	local r, g, b = string.match(hex, '#(..)(..)(..)')
	local a = string.len(hex) > 7 and string.Right(hex, 2) or "FF"

	return Color(tonumber(r, 16), tonumber(g, 16), tonumber(b, 16), tonumber(a, 16))
end

onyx.cfg.colors = {}
onyx.cfg.colors.primary = hexcolor('#26272E')
onyx.cfg.colors.secondary = hexcolor('#2A2C33')
onyx.cfg.colors.tertiary = hexcolor('#30323B')
onyx.cfg.colors.quaternary = hexcolor('#26272E')
onyx.cfg.colors.accent = Color(74, 172, 252)
onyx.cfg.colors.lightgray = Color(235, 235, 235)
onyx.cfg.colors.gray = Color(144, 144, 144)
onyx.cfg.colors.positive = Color(39, 174, 96)
onyx.cfg.colors.negative = Color(235, 77, 75)

onyx.wimg.Register('user', 'https://i.imgur.com/J1fNKdK.png')
onyx.wimg.Register('dashboard', 'https://i.imgur.com/9jAEe6f.png')
onyx.wimg.Register('home', 'https://i.imgur.com/Tv1U4pn.png')
onyx.wimg.Register('close', 'https://i.imgur.com/0jZwhKu.png')
onyx.wimg.Register('close-circle', 'https://i.imgur.com/Ee3TAhI.png')
onyx.wimg.Register('gear', 'https://i.imgur.com/njRQmA5.png')

hook.Call('onyx.ui.LoadedConfig')
--addons/onyx_framework_2/lua/onyx/ui/core/cl_query.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/core/cl_query.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

04/01/2024

--]]

function onyx.SimpleQuery(title, desc, showTextEntry, acceptCallback, acceptText, cancelCallback, cancelText)
    local margin = onyx.ScaleTall(25)
    local space = onyx.ScaleTall(10)

    local frame = vgui.Create('onyx.Frame')
    frame:SetTitle(title)
    frame:SetSize(ScrW() * .33, ScrH() * (showTextEntry and .225 or .175))
    frame:Center()
    frame:MakePopup()
    frame:ShowCloseButton(false)
    frame:Focus(true)

    local content = frame:Add('Panel')
    content:Dock(FILL)
    content:DockMargin(margin, margin, margin, margin)

    local lblDesc = content:Add('onyx.Label')
    lblDesc:SetContentAlignment(5)
    lblDesc:Dock(TOP)
    lblDesc:Font('Comfortaa@20')
    lblDesc:SetText(desc)
    lblDesc:SetAutoStretchVertical(true)
    lblDesc:DockMargin(0, 0, 0, space)
    frame.lblDesc = lblDesc

    local textEntry = content:Add('onyx.TextEntry')
    textEntry:Dock(TOP)
    textEntry:SetPlaceholderText('')
    textEntry:SetTall(onyx.ScaleTall(30))
    textEntry:DockMargin(0, 0, 0, space)
    textEntry:SetVisible(showTextEntry)
    frame.textEntry = textEntry

    local btnConfirm, btnDeny

    local footer = content:Add('Panel')
    footer:Dock(BOTTOM)
    footer:SetTall(onyx.ScaleTall(30))
    footer.PerformLayout = function(panel, w, h)
        btnConfirm:SetWide(w * .5)
        btnConfirm:Dock(LEFT)
        btnConfirm:DockMargin(0, 0, onyx.ScaleTall(5), 0)

        btnDeny:Dock(FILL)
        btnDeny:DockMargin(onyx.ScaleTall(5), 0, 0, 0)
    end

    -- localized above
    btnConfirm = footer:Add('onyx.Button')
    btnConfirm:SetText(acceptText or 'CONFIRM')
    btnConfirm:SetMasking(true)
    btnConfirm:SetGradientColor(Color(131, 255, 133))
    btnConfirm:SetColorIdle(Color(59, 161, 61))
    btnConfirm:Font('Comfortaa Bold@16')
    btnConfirm.DoClick = function(panel)
        if (acceptCallback(textEntry:GetValue()) ~= false) then
            frame:Remove()
        end
    end

    btnDeny = footer:Add('onyx.Button')
    btnDeny:SetText(cancelText or 'CANCEL')
    btnDeny:SetMasking(true)
    btnDeny:SetGradientColor(Color(255, 131, 131))
    btnDeny:SetColorIdle(Color(161, 59, 59))
    btnDeny:Font('Comfortaa Bold@16')
    btnDeny.DoClick = function(panel)
        frame:Remove()
        if (cancelCallback) then
            cancelCallback()
        end
    end

    return frame
end

function onyx.ChoosePlayer(title, desc, func, bIncludeClient, filter)
    local margin = onyx.ScaleTall(25)
    local space = onyx.ScaleTall(10)
    local client = LocalPlayer()
    local players = {}

    local colorTertiary = onyx:Config('colors.tertiary')

    local padding = onyx.ScaleTall(5)

    for _, ply in ipairs(player.GetAll()) do
        if (not bIncludeClient and ply == client) then continue end
        if (filter and not filter(ply)) then continue end

        table.insert(players, ply)
    end

    local frame = vgui.Create('onyx.Frame')
    frame:SetTitle(title)
    frame:SetSize(ScrW() * .25, ScrH() * .5)
    frame:Center()
    frame:MakePopup()
    frame:Focus(true)
    frame.buttons = {}

    local content = frame:Add('onyx.ScrollPanel')
    content:Dock(FILL)
    content:DockMargin(margin, margin, margin, margin)

    local lblDesc = content:Add('onyx.Label')
    lblDesc:SetContentAlignment(5)
    lblDesc:Dock(TOP)
    lblDesc:Font('Comfortaa@20')
    lblDesc:SetText(desc)
    lblDesc:SetAutoStretchVertical(true)
    lblDesc:DockMargin(0, 0, 0, space)
    frame.lblDesc = lblDesc

    for _, ply in ipairs(players) do
        local panel = content:Add('onyx.Button')
        panel:SetText('')
        panel:SetTall(onyx.ScaleTall(40))
        panel:SetColorIdle(onyx:Config('colors.primary'))
        panel:SetColorHover(onyx:Config('colors.secondary'))
        panel:DockPadding(padding, padding, padding, padding)
        panel.colorTertiary = colorTertiary
        panel.Paint = function(panel, w, h)
            draw.RoundedBox(8, 0, 0, w, h, panel.colorTertiary)
            draw.RoundedBox(8, 1, 1, w - 2, h - 2, panel.backgroundColor)
        end
        panel.DoClick = function()
            frame:Remove()
            if (func and IsValid(ply)) then
                func(ply)
            end
        end

        table.insert(frame.buttons, panel)

        local avatar = panel:Add('onyx.RoundedAvatar')
        avatar:Dock(LEFT)
        avatar:SetWide(panel:GetTall() - padding * 2)
        avatar:SetPlayer(ply, 64)
        avatar:DockMargin(0, 0, onyx.ScaleTall(7.5), 0)

        local lblTitle = panel:Add('onyx.Label')
        lblTitle:SetText(ply:Name())
        lblTitle:Font('Comfortaa Bold@16')
        lblTitle:Dock(TOP)
        lblTitle:SetTall(avatar:GetWide() / 2)
        panel.lblTitle = lblTitle

        local plyTeam = ply:Team()
        local lblSubTitle = panel:Add('onyx.Label')
        lblSubTitle:SetText(team.GetName(plyTeam))
        lblSubTitle:SetTextColor(team.GetColor(plyTeam))
        lblSubTitle:Font('Comfortaa@16')
        lblSubTitle:Dock(TOP)
        panel.lblSubTitle = lblSubTitle
    end

    return frame
end
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_scrollpanel_canvas.lua:
--[[

Author: tochonement
Email: tochonement@gmail.com

22.08.2021

--]]

local PANEL = {}

AccessorFunc(PANEL, 'm_iSpace', 'Space')

function PANEL:Init()
    self.container = self:Add('Panel')

    self:SetSpace(ScreenScale(2))
end

function PANEL:PerformLayout(w, h)
    self:UpdateSize()
end

function PANEL:GetPanels()
    return self.container:GetChildren()
end

function PANEL:CalculateTall()
    local panels = self:GetPanels()
    local count = #panels
    local size = 0

    for index, child in ipairs(panels) do
        if child:IsVisible() then
            local _, top, _, bottom = child:GetDockMargin()

            size = size + child:GetTall()
            size = size + top
            size = size + (index ~= count and bottom or 0)
        end
    end

    return size
end

function PANEL:UpdateSize()
    local w, h = self:GetWide(), self:CalculateTall()

    self.container:SetSize(w, h)

    self:Call('OnContainerTallUpdated', nil, self:GetTall(), h)
end

function PANEL:AddPanel(panel)
    panel:SetParent(self.container)
    panel:Dock(TOP)
    panel:DockMargin(0, 0, 0, self:GetSpace())

    local class = panel.ClassName or 'Panel'
    if (not class:find('onyx')) then
        onyx.gui.Extend(panel)
    end

    panel:InjectEventHandler('PerformLayout')
    panel:On('PerformLayout', function()
        self:UpdateSize()
    end)

    panel:Call('OnPanelAdded', nil, panel)
end

function PANEL:OnPanelAdded()
end

onyx.gui.Register('onyx.ScrollPanel.Canvas', PANEL)

-- ANCHOR Test

-- onyx.gui.Test('onyx.Frame', .66, .66, function(self)
--     self:MakePopup()

--     local list = self:Add('onyx.ScrollPanel')
--     list:Dock(FILL)

--     for i = 1, 1024 do
--         local button = list:Add('onyx.Button')
--         button:SetText('Button #' .. i)
--         button:SetTall(32)
--     end
-- end)
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_settings.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_sidebar.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_text_entry.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

02/03/2023

--]]

local PANEL = {}

local colorPrimary = onyx:Config('colors.primary')
local colorSecondary = onyx:Config('colors.secondary')
local colorAccent = onyx:Config('colors.accent')
local colorBG = colorPrimary

AccessorFunc(PANEL, 'm_PlaceholderText', 'PlaceholderText')
AccessorFunc(PANEL, 'm_colPlaceholderColor', 'PlaceholderColor')
AccessorFunc(PANEL, 'm_PlaceholderFont', 'PlaceholderFont')
AccessorFunc(PANEL, 'm_iTextSpace', 'TextSpace')

local MUTATORS = {
    'Font',
    'HistoryEnabled',
    'Multiline',
    'Numeric',
    -- 'PlaceholderColor',
    -- 'PlaceholderText',
    'TabbingDisabled',
    'TextColor',
    'UpdateOnType',
    'Value'
}

local DISPATCH = {
    'OnLoseFocus',
    'OnGetFocus',
    'AllowInput',
    'OnChange',
    'OnEnter',
    'OnKeyCode',
    'OnValueChange',
    'OnCursorEntered',
    'OnCursorExited',
}

function PANEL:Init()
    self:SetTextSpace(onyx.ScaleWide(10))
    self:SetTall(onyx.ScaleTall(30))
    self.colors = {
        outline = colorSecondary,
        accent = colorAccent
    }

    self.textEntry = self:Add('DTextEntry')
    self.textEntry:Dock(FILL)
    self.textEntry:DockPadding(0, 0, 0, 0)
    self.textEntry:DockMargin(0, 0, 0, 0)
    self.textEntry.Paint = function(panel, w, h)
        panel:DrawTextEntryText(panel:GetTextColor(), colorAccent, panel:GetTextColor())
    end

    for _, name in ipairs(MUTATORS) do
        self:CombineMutator(self.textEntry, name)
    end

    for _, name in ipairs(DISPATCH) do
        self:MakeDispatchFn(self.textEntry, name)
    end

    self:SetFont(onyx.Font('Comfortaa@16'))
    self:SetTextColor(color_white)
    self:SetPlaceholderFont(self:GetFont())
    self:SetPlaceholderColor(Color(125, 125, 125))

    self:Import('hovercolor')
    self:SetColorKey('colorBackground')
    self:SetColorIdle(colorBG)
    self:SetColorHover(onyx.OffsetColor(colorBG, -5))

    self.focusAnimFraction = 0
    self.currentOutlineColor = onyx.CopyColor( self.colors.outline )
end

function PANEL:SetDisabled(bool)
    self.textEntry:SetDisabled(bool)
    self.textEntry:SetCursor(bool and 'no' or 'beam')
    self.m_bDisabled = bool

    if (bool) then
        self:Call('OnDisabled')
    else
        self:Call('OnEnabled')
    end
end

function PANEL:GetDisabled()
    return self.m_bDisabled
end

function PANEL:OnDisabled()
    local offset = -5
    self.onyxAnims = {}
    self:SetColorIdle(onyx.OffsetColor(colorBG, offset))
    self:SetColorHover(onyx.OffsetColor(self:GetColorIdle(), -5 + offset))
end

function PANEL:OnEnabled()
    local offset = 0
    self.onyxAnims = {}
    self:SetColorIdle(onyx.OffsetColor(colorBG, offset))
    self:SetColorHover(onyx.OffsetColor(self:GetColorIdle(), -5 + offset))
end

function PANEL:PerformLayout(w, h)
    local gmodOffset = 2 -- lol, there's is slight text offset in dtextentryy (for 1920x1080)

    self:DockPadding(self.m_iTextSpace - gmodOffset, 0, self.m_iTextSpace - gmodOffset, 0)
    self:DockMargin(0, 0, 0, 0)
end

function PANEL:SetPlaceholderIcon(icon, params)
    self.placeholderWebImage = onyx.wimg.Simple(icon, params)
end

function PANEL:OnGetFocus()
    self:SetHoverBlocked(true)
    self:ResetHighlight()

    onyx.anim.Simple(self, .25, {
        focusAnimFraction = 1,
        currentOutlineColor = self.colors.accent
    }, 1, nil, nil, 'inQuad')
end

function PANEL:OnLoseFocus()
    self:SetHoverBlocked(false)
    self:OnCursorExited()

    onyx.anim.Simple(self, .25, {
        focusAnimFraction = 0,
        currentOutlineColor = self.colors.outline
    }, 1, nil, nil, 'outQuad')
end

function PANEL:Paint(w, h)
    local text = self:GetPlaceholderText()
    local color = self:GetPlaceholderColor()
    local thickness = 1
    local currentOutlineColor = self.currentOutlineColor

    if (self.highlight) then
        currentOutlineColor = ColorAlpha(self.highlightColor, math.abs(math.sin(CurTime() * 6)) * 200 + 55)
        if (self.highlightEndTime and self.highlightEndTime <= CurTime()) then
            self:ResetHighlight()
        end
    end

    draw.RoundedBox(8, 0, 0, w, h, currentOutlineColor)
    draw.RoundedBox(8, thickness, thickness, w - thickness * 2, h - thickness * 2, self.colorBackground)

    if (self:GetValue() == '' and text and text ~= '') then
        local placeholderWebImage = self.placeholderWebImage
        local x = self.m_iTextSpace

        if (placeholderWebImage) then
            local size = onyx.ScaleTall(12)

            placeholderWebImage:Draw(x, h * .5 - size * .5, size, size, colorAccent)

            x = x + size + onyx.ScaleWide(5)
        end

        draw.SimpleText(text, self:GetPlaceholderFont(), x, h * .5, color, 0, 1)
    end
end

function PANEL:Highlight(color, time)
    self.highlightColor = color
    self.highlightStartTime = CurTime()
    if (time) then
        self.highlightEndTime = CurTime() + time
    end
    self.highlight = true
end

function PANEL:ResetHighlight()
    self.highlightColor = nil
    self.highlightStartTime = nil
    self.highlightEndTime = nil
    self.highlight = nil
end

onyx.gui.Register('onyx.TextEntry', PANEL)

-- ANCHOR Test

-- onyx.gui.Test('onyx.Frame', .4, .65, function(self)
--     self:MakePopup()

--     local content = self:Add('Panel')
--     content:Dock(FILL)
--     content:DockMargin(5, 5, 5, 5)

--         local btn = content:Add('onyx.ComboBox')
--         btn:Dock(TOP)
--         btn:DockMargin(0, 0 ,0 ,5)
--     btn:Highlight(Color(212, 72, 72))

--         local btn = content:Add('onyx.TextEntry')
--         btn:Dock(TOP)
--         btn:DockMargin(0, 0 ,0 ,5)
--         btn:SetPlaceholderText('Tset')
--     btn:Highlight(Color(212, 72, 72))

-- end)
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_toggler.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

20/01/2024

--]]

local colorPrimary = onyx:Config('colors.primary')
local colorSecondary = onyx:Config('colors.secondary')
local colorTertiary = onyx:Config('colors.tertiary')
local colorAccent = onyx:Config('colors.accent')

do
    local PANEL = {}

    AccessorFunc(PANEL, 'm_bChecked', 'Checked', FORCE_BOOL)

    function PANEL:Init()
        local size = onyx.ScaleTall(18)

        self.m_bChecked = false

        self:Import('click')
        self:SetSize(size * 2, size)

        self.perfectWidth = size * 2
        self.perfectHeight = size

        self.stateFraction = 0

        self:SetBackgroundColor(colorSecondary)
    end

    function PANEL:Paint(w, h)
        local radius = h * .5
        local height = h * .66
        local circleX = radius + (w - radius * 2) * self.stateFraction
        local realX, realY = self:LocalToScreen(0, 0)

        draw.RoundedBox(16, 0, h * .5 - height * .5, w, height, self.backgroundColorCurrent)

        render.SetScissorRect(realX, realY, realX + circleX, realY + h, true)
            surface.SetAlphaMultiplier(self.stateFraction)
                draw.RoundedBox(16, 0, h * .5 - height * .5, w, height, self.backgroundColorActive)
            surface.SetAlphaMultiplier(1)
        render.SetScissorRect(0, 0, 0, 0, false)

        onyx.DrawCircle(circleX, h * .5, radius, self.gripColorCurrent)
    end

    function PANEL:DoClick()
        self:SetValue(not self.m_bChecked)
    end

    function PANEL:AnimState(bBool, ignoreAnimation)
        local time = .15
        if (bBool) then
            onyx.anim.Create(self, time, {
                index = 40,
                skipAnimation = ignoreAnimation,
                target = {
                    stateFraction = 1,
                    gripColorCurrent = self.gripColorActive
                }
            })
        else
            onyx.anim.Create(self, time, {
                index = 40,
                skipAnimation = ignoreAnimation,
                target = {
                    stateFraction = 0,
                    gripColorCurrent = self.gripColorIdle
                }
            })
        end
    end

    function PANEL:SetChecked(bBool, ignoreAnimation)
        assert(isbool(bBool), string.format('bad argument #1 to `SetChecked` (expected bool, got %s)', type(bBool)))
        self.m_bChecked = bBool
        self:AnimState(bBool, ignoreAnimation)
    end

    function PANEL:SetValue(bBool)
        self:SetChecked(bBool)
        self:Call('OnChange', nil, bBool)
    end

    function PANEL:GetValue()
        return self.m_bChecked
    end

    function PANEL:SetBackgroundColor(color)
        self.backgroundColorCurrent = color
        self.backgroundColorActive = onyx.LerpColor(.66, colorAccent, self.backgroundColorCurrent)

        self.gripColorIdle = onyx.OffsetColor(self.backgroundColorCurrent, 10)
        self.gripColorActive = colorAccent
        self.gripColorCurrent = onyx.CopyColor(self.gripColorIdle)
    end

    onyx.gui.Register('onyx.Toggler', PANEL)
end

do
    local PANEL = {}

    AccessorFunc(PANEL, 'm_iCheckContainerWidth', 'CheckContainerWidth')
    AccessorFunc(PANEL, 'm_bUnlockedTogglerSize', 'UnlockedTogglerSize')
    AccessorFunc(PANEL, 'm_iTextMargin', 'TextMargin')

    function PANEL:Init()
        self.lblText = self:Add('onyx.Label')
        self.lblText:SetText('Example Label')

        self.togglerContainer = self:Add('Panel')

        self.toggler = self.togglerContainer:Add('onyx.Toggler')

        self:SetTextMargin(onyx.ScaleTall(5))
        self:CombineMutator(self.toggler, 'Checked')
        self:CombineMutator(self.toggler, 'Value')
        self:CombineMutator(self.lblText, 'Text')
        self:CombineMutator(self.lblText, 'Font')
        self:Combine(self.lblText, 'Font')
        self:Combine(self.toggler, 'SetBackgroundColor')
        self:MakeDispatchFn(self.toggler, 'OnChange')
    end

    function PANEL:PerformLayout(w, h)
        local togglerContainerWidth = self.m_iCheckContainerWidth or h
        local margin = self.m_iTextMargin

        self.togglerContainer:SetWide(togglerContainerWidth)
        self.togglerContainer:Dock(LEFT)
        self.togglerContainer:DockMargin(0, 0, margin, 0)

        self.lblText:Dock(FILL)

        if (self.UnlockedTogglerSize) then
            self.toggler:SetWide(togglerContainerWidth)
        else
            self.toggler:SetWide(math.min(self.toggler:GetWide(), togglerContainerWidth))
        end

        self.toggler:SetTall(self.toggler:GetWide() * .5)
        self.toggler:Center()
    end

    function PANEL:GetContentWide()
        local togglerContainerWidth = self.m_iCheckContainerWidth or self:GetTall()
        local lblText = self.lblText
        local margin = self.m_iTextMargin
        local wide = togglerContainerWidth + lblText:GetContentWidth() + margin
        return wide
    end
    PANEL.GetContentWidth = PANEL.GetContentWide

    onyx.gui.Register('onyx.TogglerLabel', PANEL)
end

-- ANCHOR Test

-- onyx.gui.Test('onyx.Frame', .4, .65, function(self)
--     self:MakePopup()

--     local iconlayout = self:Add('DIconLayout')
--     iconlayout:Dock(FILL)

--     for i = 1, 10 do
--         local panel = iconlayout:Add('onyx.TogglerLabel')
--         -- panel:Dock(TOP)
--         panel:SetChecked(true, true)
--         panel:SetText('Hello there')
--         panel:Font('Comfortaa@16')
--         panel:SetTall(ScreenScale(14))
--         panel:SetWide(panel:GetContentWide())
--     end
-- end)
--addons/onyx_f4/lua/onyx/modules/f4/languages/cl_english.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

30/12/2023

--]]

local LANG = {}

-- TABS
LANG.f4_jobs_u = 'JOBS'
LANG.f4_jobs_desc = 'Choose your path'

LANG.f4_dashboard_u = 'DASHBOARD'
LANG.f4_dashboard_desc = 'General information'

LANG.f4_shop_u = 'SHOP'
LANG.f4_shop_desc = 'Purchase any goods'

LANG.f4_admin_u = 'ADMIN'
LANG.f4_admin_desc = 'Configure the addon'

LANG.f4_donate_u = 'DONATE'
LANG.f4_donate_desc = 'Support the server'

LANG.addon_settings_u = 'SETTINGS'
LANG.addon_settings_desc = 'Configure the addon'

LANG.addon_stats_u = 'STATS'
LANG.addon_stats_desc = 'Check the addon stats'

LANG.addon_return_u = 'RETURN'
LANG.addon_return_desc = 'Return to the frame'

-- Other
LANG.f4_salary = 'Salary'
LANG.f4_price = 'Price'
LANG.f4_loading = 'Loading'
LANG.f4_purchases = 'Purchases'
LANG.f4_switches = 'Switches'
LANG.f4_unavailable = 'Unavailable'
LANG.f4_description_u = 'DESCRIPTION'
LANG.f4_weapons_u = 'WEAPONS'
LANG.f4_entities_u = 'ENTITIES'
LANG.f4_ammo_u = 'AMMO'
LANG.f4_food_u = 'FOOD'
LANG.f4_shipments_u = 'SHIPMENTS'
LANG.f4_become_u = 'BECOME'
LANG.f4_create_vote_u = 'CREATE VOTE'
LANG.f4_general_u = 'GENERAL'
LANG.f4_police_u = 'POLICE'
LANG.f4_mayor_u = 'MAYOR'
LANG.f4_confirm_u = 'CONFIRM'
LANG.f4_cancel_u = 'CANCEL'
LANG.f4_mostpopular_u = 'MOST POPULAR'
LANG.f4_chart_u = 'CHART'
LANG.f4_loading_u = 'LOADING'
LANG.f4_empty_u = 'EMPTY'
LANG.f4_favorite_u = 'FAVORITE'

LANG.f4_playersonline_u = 'PLAYERS ONLINE'
LANG.f4_totalmoney_u = 'TOTAL MONEY'
LANG.f4_staffonline_u = 'STAFF ONLINE'
LANG.f4_actions_u = 'ACTIONS'

LANG.f4_show_favorite = 'Show Favorites'

-- Actions
LANG['f4_action_input_amount'] = 'Input the amount'
LANG['f4_action_input_text'] = 'Input the text'
LANG['f4_action_input_reason'] = 'Input the reason'
LANG['f4_action_choose_player'] = 'Choose a player'

LANG['f4_action_confirm_action'] = 'Confirm the action'
LANG['f4_action_drop_money'] = 'Drop Money'
LANG['f4_action_give_money'] = 'Give Money'
LANG['f4_action_change_name'] = 'Change Name'
LANG['f4_action_drop_weapon'] = 'Drop Weapon'
LANG['f4_action_sell_doors'] = 'Sell All Doors'

LANG['f4_action_warrant'] = 'Make Warrant'
LANG['f4_action_wanted'] = 'Make Wanted'

LANG['f4_toggle_lockdown'] = 'Toggle Lockdown'
LANG['f4_give_license'] = 'Give License'

-- Phrases
LANG['f4_search_text'] = 'Search by name...'

-- Settings
LANG['f4.option_url_desc'] = 'Input the URL (leave empty to disable)'

LANG['f4.discord_url.name'] = 'Discord'
LANG['f4.discord_url.desc'] = 'Join our Discord server'

LANG['f4.forum_url.name'] = 'Forum'
LANG['f4.forum_url.desc'] = 'Meet the community'

LANG['f4.steam_url.name'] = 'Steam'
LANG['f4.steam_url.desc'] = 'Join our Steam group'

LANG['f4.rules_url.name'] = 'Rules'
LANG['f4.rules_url.desc'] = 'Know the rules'

LANG['f4.donate_url.name'] = 'Donate'

LANG['f4.website_ingame.name'] = 'Browser'
LANG['f4.website_ingame.desc'] = 'Use in-game browser to open website URL'

LANG['f4.title.name'] = 'Title'
LANG['f4.title.desc'] = 'The title for the frame'

LANG['f4.hide_donate_tab.name'] = 'Hide Donate Tab'
LANG['f4.hide_donate_tab.desc'] = 'Hide the creditstore integration tab'

LANG['f4.edit_job_colors.name'] = 'Modify Job Colors'
LANG['f4.edit_job_colors.desc'] = 'Should job colors be displayed lighter'

LANG['f4.hide_admins.name'] = 'Hide Admins Section'
LANG['f4.hide_admins.desc'] = 'Hide the dashboard admin list section'

LANG['f4.admin_on_duty.name'] = 'Admin Job Enabled'
LANG['f4.admin_on_duty.desc'] = 'Display as an admin only a person with a certain job'

LANG['f4.admin_on_duty_job.name'] = 'Admin Job Name'
LANG['f4.admin_on_duty_job.desc'] = 'The admin\'s job name*'

LANG['f4.colored_items.name'] = 'Colorized Gradient'
LANG['f4.colored_items.desc'] = 'Enable slight gradient on items/jobs'

LANG['f4.item_columns.name'] = 'Columns'
LANG['f4.item_columns.desc'] = 'The amount of columns for Items'

LANG['f4.job_columns.name'] = 'Columns'
LANG['f4.job_columns.desc'] = 'The amount of columns for Jobs'

LANG['f4.model_3d.name'] = '3D Models'
LANG['f4.model_3d.desc'] = 'Enable realtime rendering for Item/Job icons'

LANG['f4.item_show_unavailable.name'] = 'Unavailable Items'
LANG['f4.item_show_unavailable.desc'] = 'Show items that failed customCheck'

LANG['f4.job_show_unavailable.name'] = 'Unavailable Jobs'
LANG['f4.job_show_unavailable.desc'] = 'Show jobs that failed customCheck'

LANG['f4.job_show_requirejob.name'] = 'Dependent Jobs'
LANG['f4.job_show_requirejob.desc'] = 'Show jobs that cannot be chosen due player\'s wrong job'

onyx.lang:AddPhrases('english', LANG)
--addons/onyx_f4/lua/onyx/modules/f4/languages/cl_french.lua:
local LANG = {}

-- TABS
LANG.f4_jobs_u = 'MÉTIERS'
LANG.f4_jobs_desc = 'Choisissez votre métier'

LANG.f4_dashboard_u = 'ACCUEIL'
LANG.f4_dashboard_desc = 'Information général'

LANG.f4_shop_u = 'BOUTIQUE'
LANG.f4_shop_desc = 'Achetez des choses'

LANG.f4_admin_u = 'ADMIN'
LANG.f4_admin_desc = 'Configurer le menu'

LANG.f4_donate_u = 'DONATION'
LANG.f4_donate_desc = 'Supporter le serveur'

LANG.addon_settings_u = 'PARAMÈTRE'
LANG.addon_settings_desc = 'Configurer votre menu'

LANG.addon_stats_u = 'STATISTIQUE'
LANG.addon_stats_desc = 'Regarder les statistique du serveur'

LANG.addon_return_u = 'RETOUR'
LANG.addon_return_desc = 'Retour au menu'

-- Other
LANG.f4_salary = 'Salaire'
LANG.f4_price = 'Prix'
LANG.f4_loading = 'Chargement'
LANG.f4_purchases = 'Acheter'
LANG.f4_switches = 'Switches'
LANG.f4_unavailable = 'Indisponible'
LANG.f4_description_u = 'DESCRIPTION'
LANG.f4_weapons_u = 'ARMES'
LANG.f4_entities_u = 'ENTITÉS'
LANG.f4_ammo_u = 'MUNITION'
LANG.f4_food_u = 'NOURRITURE'
LANG.f4_shipments_u = 'CAISSES'
LANG.f4_become_u = 'DEVENIR'
LANG.f4_create_vote_u = 'CRÉER UN VOTE'
LANG.f4_general_u = 'GÉNÉRAL'
LANG.f4_police_u = 'POLICE'
LANG.f4_mayor_u = 'MAIRE'
LANG.f4_confirm_u = 'CONFIRMER'
LANG.f4_cancel_u = 'ANNULER'
LANG.f4_mostpopular_u = 'PLUS POPULAIRE'
LANG.f4_chart_u = 'GRAPHIQUE'
LANG.f4_loading_u = 'CHARGEMENT'
LANG.f4_empty_u = 'RIEN'
LANG.f4_favorite_u = 'FAVORIS'

LANG.f4_playersonline_u = 'Joueur(s) en ligne'
LANG.f4_totalmoney_u = 'ARGENT TOTAL'
LANG.f4_staffonline_u = 'STAFF EN LIGNE'
LANG.f4_actions_u = 'ACTIONS'

LANG.f4_show_favorite = 'Afficher les favoris'

-- Actions
LANG['f4_action_input_amount'] = 'Introduire le montant'
LANG['f4_action_input_text'] = 'Introduire le texte'
LANG['f4_action_input_reason'] = 'Introduire la raison'
LANG['f4_action_choose_player'] = 'Choisir un joueur'

LANG['f4_action_confirm_action'] = "Confirmer l'action"
LANG['f4_action_drop_money'] = "Jeter de l'argent"
LANG['f4_action_give_money'] = "Donner de l'argent"
LANG['f4_action_change_name'] = 'Changer de nom'
LANG['f4_action_drop_weapon'] = 'Jeter son arme'
LANG['f4_action_sell_doors'] = 'Vendre toutes les portes'

LANG['f4_action_warrant'] = 'Faire un mandat'
LANG['f4_action_wanted'] = 'Faire un avis de recherche'

LANG['f4_toggle_lockdown'] = 'Instaurer un couvre-feu'
LANG['f4_give_license'] = 'Accorder une licence'

-- Phrases
LANG['f4_search_text'] = 'Recherche par le nom...'

-- Settings
LANG['f4.option_url_desc'] = 'Saisir l\'URL (laisser vide pour désactiver)'

LANG['f4.discord_url.name'] = 'Discord'
LANG['f4.discord_url.desc'] = 'Rejoignez notre serveur Discord'

LANG['f4.forum_url.name'] = 'Forum'
LANG['f4.forum_url.desc'] = 'Rencontrer la communauté'

LANG['f4.steam_url.name'] = 'Steam'
LANG['f4.steam_url.desc'] = 'Rejoignez notre groupe Steam'

LANG['f4.rules_url.name'] = 'Règles'
LANG['f4.rules_url.desc'] = 'Connaître les règles'

LANG['f4.donate_url.name'] = 'Faire un don'

LANG['f4.website_ingame.name'] = 'Navigateur'
LANG['f4.website_ingame.desc'] = 'Utiliser le navigateur du jeu pour ouvrir l\'URL du site web'

LANG['f4.title.name'] = 'Titre'
LANG['f4.title.desc'] = 'Le titre du menu'

LANG['f4.hide_donate_tab.name'] = 'Masquer l\'onglet Don'
LANG['f4.hide_donate_tab.desc'] = 'Masquer l\'onglet d\'intégration de la boutique'

LANG['f4.edit_job_colors.name'] = 'Modifier les couleurs des métiers'
LANG['f4.edit_job_colors.desc'] = 'Les couleurs de l\'emploi doivent-elles être affichées plus claires ?'

LANG['f4.hide_admins.name'] = 'Cacher la section Admins'
LANG['f4.hide_admins.desc'] = 'Cacher la section de la liste des administrateurs du tableau de bord'

LANG['f4.admin_on_duty.name'] = 'Métier staff activé'
LANG['f4.admin_on_duty.desc'] = 'N\'afficher en tant qu\'administrateur que les personnes ayant un certain métier'

LANG['f4.admin_on_duty_job.name'] = 'Nom du métier administrateur'
LANG['f4.admin_on_duty_job.desc'] = 'Nom du métier de l\'administrateur'

LANG['f4.colored_items.name'] = 'Dégradé'
LANG['f4.colored_items.desc'] = 'Activer un léger dégradé sur les Objets/Métiers'

LANG['f4.item_columns.name'] = 'Colonnes'
LANG['f4.item_columns.desc'] = 'Le nombre de colonnes pour les objets'

LANG['f4.job_columns.name'] = 'Colonnes'
LANG['f4.job_columns.desc'] = 'Le nombre de colonnes pour les métiers'

LANG['f4.model_3d.name'] = 'Modèles 3D'
LANG['f4.model_3d.desc'] = 'Activer le rendu en temps réel pour les icônes des objets/métiers'

LANG['f4.item_show_unavailable.name'] = 'Objet(s) indisponible'
LANG['f4.item_show_unavailable.desc'] = 'Afficher les objets qui ont échoué au contrôle personnalisé'

LANG['f4.job_show_unavailable.name'] = 'Métier(s) indisponible'
LANG['f4.job_show_unavailable.desc'] = 'Afficher les métiers qui ont échoué au contrôle personnalisé'

LANG['f4.job_show_requirejob.name'] = 'Métiers dépendants'
LANG['f4.job_show_requirejob.desc'] = 'Afficher les métiers qui ne peuvent pas être choisis parce que le joueur s\'est trompé de métier'

onyx.lang:AddPhrases('french', LANG)
--addons/onyx_f4/lua/onyx/modules/f4/languages/cl_russian.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

01/01/2024

--]]

local LANG = {}

-- TABS
LANG.f4_jobs_u = 'ПРОФЕССИИ'
LANG.f4_jobs_desc = 'Выберите свой путь'

LANG.f4_dashboard_u = 'ГЛАВНАЯ'
LANG.f4_dashboard_desc = 'Основная информация'

LANG.f4_shop_u = 'МАГАЗИН'
LANG.f4_shop_desc = 'Купите что-то'

LANG.f4_admin_u = 'АДМИН'
LANG.f4_admin_desc = 'Настройте аддон'

LANG.f4_donate_u = 'ДОНАТ'
LANG.f4_donate_desc = 'Поддержите сервер'

LANG.addon_settings_u = 'НАСТРОЙКИ'

LANG.addon_stats_u = 'СТАТИСТИКА'

LANG.addon_return_u = 'НАЗАД'

-- Other
LANG.f4_salary = 'Зарплата'
LANG.f4_price = 'Цена'
LANG.f4_loading = 'Загрузка'
LANG.f4_purchases = 'Покупки'
LANG.f4_switches = 'Смены'
LANG.f4_unavailable = 'Недоступно'
LANG.f4_description_u = 'ОПИСАНИЕ'
LANG.f4_weapons_u = 'ОРУЖИЕ'
LANG.f4_entities_u = 'ПРЕДМЕТЫ'
LANG.f4_ammo_u = 'ПАТРОНЫ'
LANG.f4_food_u = 'ЕДА'
LANG.f4_shipments_u = 'КОРОБКИ'
LANG.f4_become_u = 'СТАТЬ'
LANG.f4_create_vote_u = 'ГОЛОСОВАНИЕ'
LANG.f4_general_u = 'ОБЩЕЕ'
LANG.f4_police_u = 'ПОЛИЦИЯ'
LANG.f4_mayor_u = 'ГЛАВА ГОРОДА'
LANG.f4_confirm_u = 'ПОДТВЕРДИТЬ'
LANG.f4_cancel_u = 'ОТМЕНА'
LANG.f4_mostpopular_u = 'САМОЕ ПОПУЛЯРНОЕ'
LANG.f4_chart_u = 'ГРАФИК'
LANG.f4_loading_u = 'ЗАГРУЗКА'
LANG.f4_empty_u = 'ПУСТО'

LANG.f4_playersonline_u = 'ИГРОКИ ОНЛАЙН'
LANG.f4_totalmoney_u = 'ОБЩИЕ ДЕНЬГИ'
LANG.f4_staffonline_u = 'АДМИНЫ ОНЛАЙН'
LANG.f4_actions_u = 'ДЕЙСТВИЯ'

-- Actions
LANG['f4_action_input_amount'] = 'Введите число'
LANG['f4_action_input_text'] = 'Введите текст'
LANG['f4_action_input_reason'] = 'Введите причину'
LANG['f4_action_choose_player'] = 'Выберите игрока'

LANG['f4_action_confirm_action'] = 'Подтвердите действие'
LANG['f4_action_drop_money'] = 'Выбросить деньги'
LANG['f4_action_give_money'] = 'Передать деньги'
LANG['f4_action_change_name'] = 'Изменить имя'
LANG['f4_action_drop_weapon'] = 'Выбросить оружие'
LANG['f4_action_sell_doors'] = 'Продать все двери'

LANG['f4_action_warrant'] = 'Выдать ордер'
LANG['f4_action_wanted'] = 'Подать в розыск'

LANG['f4_toggle_lockdown'] = 'Включить/выключить ком. час'
LANG['f4_give_license'] = 'Выдать лицензию'

-- Phrases
LANG['f4_search_text'] = 'Поиск по названию...'

-- Settings
LANG['f4.option_url_desc'] = 'Введите URL (пусто для отключения)'

LANG['f4.discord_url.name'] = 'Discord'
LANG['f4.discord_url.desc'] = 'Зайдите на Discord сервер'

LANG['f4.forum_url.name'] = 'Forum'
LANG['f4.forum_url.desc'] = 'Встретьте сообщество'

LANG['f4.steam_url.name'] = 'Steam'
LANG['f4.steam_url.desc'] = 'Вступите в группу'

LANG['f4.rules_url.name'] = 'Правила'
LANG['f4.rules_url.desc'] = 'Ознакомтесь с правилами'

LANG['f4.donate_url.name'] = 'Донат'

LANG['f4.website_ingame.name'] = 'Браузер'
LANG['f4.website_ingame.desc'] = 'Использовать браузер внутри игры'

LANG['f4.title.name'] = 'Заголовок'
LANG['f4.title.desc'] = 'Заголовок для F4'

LANG['f4.hide_donate_tab.name'] = 'Скрыть вкладку Донат'
LANG['f4.hide_donate_tab.desc'] = 'Отключить интеграцию с Onyx Store'

LANG['f4.edit_job_colors.name'] = 'Цвета профессии'
LANG['f4.edit_job_colors.desc'] = 'Изменять ли цвета профессии'

LANG['f4.hide_admins.name'] = 'Скрыть персонал'
LANG['f4.hide_admins.desc'] = 'Скрыть список персонала на главной'

LANG['f4.admin_on_duty.name'] = 'Админ-профессия'
LANG['f4.admin_on_duty.desc'] = 'Отображать в списке персонала только при определенной профессии'

LANG['f4.admin_on_duty_job.name'] = 'Название админ-профессии'
LANG['f4.admin_on_duty_job.desc'] = 'Введите название админ профессии'

LANG['f4.colored_items.name'] = 'Цветной градиент'
LANG['f4.colored_items.desc'] = 'Включить легкий градиент для предметов'

LANG['f4.item_columns.name'] = 'Колонки'
LANG['f4.item_columns.desc'] = 'Количество колонок для предметов'

LANG['f4.job_columns.name'] = 'Колонки'
LANG['f4.job_columns.desc'] = 'Количество колонок для профессий'

LANG['f4.model_3d.name'] = '3D модели'
LANG['f4.model_3d.desc'] = 'Отображение 3D для моделей профессий и предметов'

LANG['f4.item_show_unavailable.name'] = 'Недоступные предметы'
LANG['f4.item_show_unavailable.desc'] = 'Показать предметы провалившие customCheck'

LANG['f4.job_show_unavailable.name'] = 'Недоступные профессии'
LANG['f4.job_show_unavailable.desc'] = 'Показать профессии провалившие customCheck'

LANG['f4.job_show_requirejob.name'] = 'Зависимые профессии'
LANG['f4.job_show_requirejob.desc'] = 'Показывать профессии при неверной профессии'

onyx.lang:AddPhrases('russian', LANG)
--addons/onyx_f4/lua/onyx/modules/f4/languages/cl_spanish.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/core/stats/sh_stats.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/cfg/cl_actions.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/ui/cl_item.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/languages/cl_russian.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/languages/cl_russian.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

14/08/2024

--]]

local LANG = {}

--[[
    .............
    General Words
]]--

LANG[ 'hud_status_wanted' ] = 'В розыске'
LANG[ 'hud_status_speaking' ] = 'Говорит'
LANG[ 'hud_status_typing' ] = 'Печатает'
LANG[ 'props' ] = 'Пропы'
LANG[ 'close' ] = 'Закрыть'
LANG[ 'alert' ] = 'Оповещение'
LANG[ 'message' ] = 'Сообщение'
LANG[ 'unknown' ] = 'Неизвестно'
LANG[ 'accept' ] = 'Принять'
LANG[ 'deny' ] = 'Отклонить'
LANG[ 'none' ] = 'Нет'
LANG[ 'add' ] = 'Добавить'
LANG[ 'remove' ] = 'Удалить'
LANG[ 'jobs' ] = 'Работы'
LANG[ 'door' ] = 'Дверь'
LANG[ 'vehicle' ] = 'Транспорт'
LANG[ 'door_groups' ] = 'Группы дверей'
LANG[ 'display' ] = 'Отображение'
LANG[ 'general' ] = 'Общие'
LANG[ 'speedometer' ] = 'Спидометр'
LANG[ 'fuel' ] = 'Топливо'

--[[
    .......
    Timeout
]]--

LANG[ 'timeout_title' ] = 'СОЕДИНЕНИЕ ПОТЕРЯНО'
LANG[ 'timeout_info' ] = 'Сервер сейчас недоступен, приносим извинения'
LANG[ 'timeout_status' ] = 'Переподключение через %d секунд'

--[[
    ......
    Themes
]]--

LANG[ 'hud.theme.default.name' ] = 'По умолчанию'
LANG[ 'hud.theme.forest.name' ] = 'Лес'
LANG[ 'hud.theme.violet_night.name' ] = 'Фиолетовая ночь'
LANG[ 'hud.theme.rustic_ember.name' ] = 'Тлеющие угли'
LANG[ 'hud.theme.green_apple.name' ] = 'Зеленое яблоко'
LANG[ 'hud.theme.lavender.name' ] = 'Лаванда'
LANG[ 'hud.theme.elegance.name' ] = 'Элегантность'
LANG[ 'hud.theme.mint_light.name' ] = 'Мята'
LANG[ 'hud.theme.gray.name' ] = 'Серый'
LANG[ 'hud.theme.rose_garden.name' ] = 'Розовый сад'
LANG[ 'hud.theme.ocean_wave.name' ] = 'Океанская волна'
LANG[ 'hud.theme.sky_blue.name' ] = 'Небесно-голубой'
LANG[ 'hud.theme.golden_dawn.name' ] = 'Золотой рассвет'

--[[
    ....
    Help
    - Полная фраза: "Введите <command> для открытия настроек"
]]

LANG[ 'hud_help_type' ] = 'Введите'
LANG[ 'hud_help_to' ] = 'для открытия настроек'

--[[
    .............
    3D2D Doors
]]--

LANG[ 'door_purchase' ] = 'Купить {object}'
LANG[ 'door_sell' ] = 'Продать {object}'
LANG[ 'door_addowner' ] = 'Добавить владельца'
LANG[ 'door_rmowner' ] = 'Удалить владельца'
LANG[ 'door_rmowner_help' ] = 'Выберите игрока для удаления'
LANG[ 'door_addowner_help' ] = 'Выберите игрока для добавления'
LANG[ 'door_title' ] = 'Установить название'
LANG[ 'door_title_help' ] = 'Какое название вы хотите установить?'
LANG[ 'door_admin_disallow' ] = 'Запретить владение'
LANG[ 'door_admin_allow' ] = 'Разрешить владение'
LANG[ 'door_admin_edit' ] = 'Редактировать доступ'
LANG[ 'door_owned' ] = 'Частная собственность'
LANG[ 'door_unowned' ] = 'Продается'

LANG[ 'hud_door_help' ] = 'Нажмите {bind}, чтобы купить за {price}'
LANG[ 'hud_door_owner' ] = 'Владелец: {name}'
LANG[ 'hud_door_allowed' ] = 'Допущены к владению'
LANG[ 'hud_door_coowners' ] = 'Совладельцы'
LANG[ 'hud_and_more' ] = 'и другие...'

--[[
    .........
    Верхний регистр
]]--

LANG[ 'reconnect_u' ] = 'ПЕРЕПОДКЛЮЧИТЬСЯ'
LANG[ 'disconnect_u' ] = 'ПОКИНУТЬ СЕРВЕР'
LANG[ 'settings_u' ] = 'НАСТРОЙКИ'
LANG[ 'configuration_u' ] = 'КОНФИГУРАЦИЯ'
LANG[ 'introduction_u' ] = 'ВВЕДЕНИЕ'

--[[
    .........
    Нижний регистр
]]--

LANG[ 'seconds_l' ] = 'секунды'
LANG[ 'minutes_l' ] = 'минуты'

--[[
    .............
    Конфигурация
]]--

LANG[ 'hud.timeout.name' ] = 'Продолжительность таймаута'
LANG[ 'hud.timeout.desc' ] = 'Сколько секунд до автом. переподключения'

LANG[ 'hud.alert_queue.name' ] = 'Очередь оповещений'
LANG[ 'hud.alert_queue.desc' ] = 'Следует ли размещать оповещения в очередь'

LANG[ 'hud.props_counter.name' ] = 'Счетчик пропов'
LANG[ 'hud.props_counter.desc' ] = 'Отображать счетчик пропов'

LANG[ 'hud.main_avatar_mode.name' ] = 'Тип главного аватара'
LANG[ 'hud.main_avatar_mode.desc' ] = 'Выберите тип'

LANG[ 'hud.voice_avatar_mode.name' ] = 'Тип голосового аватара'
LANG[ 'hud.voice_avatar_mode.desc' ] = 'Выберите тип'

LANG[ 'hud.restrict_themes.name' ] = 'Ограничение тем'
LANG[ 'hud.restrict_themes.desc' ] = 'Запретить игрокам выбирать темы'

LANG[ 'hud.speedometer_mph.name' ] = 'Использовать мили'
LANG[ 'hud.speedometer_mph.desc' ] = 'Переключить единицы на мили в час'

LANG[ 'hud.speedometer_max_speed.name' ] = 'Максимальная скорость'
LANG[ 'hud.speedometer_max_speed.desc' ] = 'Максимальная скорость для спидометра'

LANG[ 'hud_should_draw' ] = 'Отображать элемент'
LANG[ 'hud.main.name' ] = 'Основной HUD'
LANG[ 'hud.ammo.name' ] = 'Боеприпасы'
LANG[ 'hud.agenda.name' ] = 'Повестка дня'
LANG[ 'hud.alerts.name' ] = 'Оповещения'
LANG[ 'hud.pickup_history.name' ] = 'История подбора'
LANG[ 'hud.voice.name' ] = 'Голосовые панели'
LANG[ 'hud.overhead_health.name' ] = '3D2D Здоровье над головой'
LANG[ 'hud.overhead_armor.name' ] = '3D2D Броня над головой'
LANG[ 'hud.vehicle.name' ] = 'HUD Транспорта'

--[[
    ........
    Настройки
]]--

LANG[ 'hud.theme.name' ] = 'Тема'
LANG[ 'hud.theme.desc' ] = 'Выберите тему HUD'

LANG[ 'hud.scale.name' ] = 'Масштаб'
LANG[ 'hud.scale.desc' ] = 'Отрегулируйте масштаб HUD'

LANG[ 'hud.roundness.name' ] = 'Скругление'
LANG[ 'hud.roundness.desc' ] = 'Настройка скругления HUD'

LANG[ 'hud.margin.name' ] = 'Отступ'
LANG[ 'hud.margin.desc' ] = 'Расстояние между HUD и краями экрана'

LANG[ 'hud.icons_3d.name' ] = '3D модели'
LANG[ 'hud.icons_3d.desc' ] = 'Отображать иконки моделей в 3D'

LANG[ 'hud.compact.name' ] = 'Компактный режим'
LANG[ 'hud.compact.desc' ] = 'Включить компактный режим'

LANG[ 'hud.speedometer_blur.name' ] = 'Размытие спидометра'
LANG[ 'hud.speedometer_blur.desc' ] = 'Включить размытие для спидометра'

LANG[ 'hud.3d2d_max_details.name' ] = 'Макс. детали 3D2D'
LANG[ 'hud.3d2d_max_details.desc' ] = 'Макс. количество отображаемых деталей'

--[[
    ......
    Status
]]--

LANG[ 'hud_lockdown' ] = 'КОМ. ЧАС'
LANG[ 'hud_lockdown_help' ] = 'Вернитесь домой!'

LANG[ 'hud_wanted' ] = 'В РОЗЫСКЕ'
LANG[ 'hud_wanted_help' ] = 'Причина: {reason}'

LANG[ 'hud_arrested' ] = 'АРЕСТОВАН'
LANG[ 'hud_arrested_help' ] = 'Освобождение через {time}'

onyx.lang:AddPhrases( 'russian', LANG )
--addons/bb_onyx_hud/lua/onyx/modules/hud/languages/cl_spanish.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/cfg/cl_themes.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

21/08/2024

--]]

--[[
    ***************
      WARNING
      This configuration is intended for advanced users familiar with Lua scripting. 
      Modifying this file without proper knowledge may result in unintended behavior or instability.
    ***************
]]

onyx.hud:CreateTheme( 'default', {
    colors = {
        primary = onyx:Config( 'colors.primary' ),
        secondary = onyx:Config( 'colors.secondary' ),
        tertiary = onyx:Config( 'colors.tertiary' ),
        accent = onyx:Config( 'colors.accent' ),
    }
} )

onyx.hud:CreateTheme( 'gray', {
    colors = {
        primary = Color( 172, 172, 172),
        secondary = Color( 197, 197, 197),
        tertiary = Color( 225, 225, 225),
        accent = Color( 101, 40, 206),
    }
} )

onyx.hud:CreateTheme( 'golden_dawn', {
    colors = {
        primary = Color( 195, 189, 154),
        secondary = Color( 224, 207, 143),
        tertiary = Color( 230, 205, 129),
        accent = Color( 44, 44, 255),
        textPrimary = Color( 40, 35, 19),
        textSecondary = Color( 59, 50, 14),
        textTertiary = Color( 90, 83, 53),
    }
} )

onyx.hud:CreateTheme( 'sky_blue', {
    colors = {
        primary = Color(186, 227, 252),
        secondary = Color(210, 235, 255),
        tertiary = Color(232, 243, 255),
        accent = Color(0, 89, 255),
        textPrimary = Color(25, 45, 60),
        textSecondary = Color(50, 75, 100),
        textTertiary = Color(80, 110, 140),
    }
} )

onyx.hud:CreateTheme( 'mint_light', {
    colors = {
        primary = Color(202, 230, 217),
        secondary = Color(223, 241, 232),
        tertiary = Color(240, 250, 244),
        accent = Color(0, 162, 78),
        textPrimary = Color(34, 52, 42),
        textSecondary = Color(57, 82, 69),
        textTertiary = Color(92, 118, 104),
    }
} )

onyx.hud:CreateTheme( 'lavender', {
    colors = {
        primary = Color(230, 230, 250),
        secondary = Color(245, 245, 255),
        tertiary = Color(255, 250, 255),
        accent = Color(138, 43, 226),
        textPrimary = Color(50, 50, 80),
        textSecondary = Color(70, 70, 100),
        textTertiary = Color(100, 100, 130),
    }
} )

onyx.hud:CreateTheme( 'green_apple', {
    colors = {
        primary = Color(144, 238, 144),
        secondary = Color(168, 255, 168),
        tertiary = Color(192, 255, 192),
        accent = Color(218, 24, 24),  -- Насыщенный зеленый
        textPrimary = Color(40, 70, 40),
        textSecondary = Color(60, 90, 60),
        textTertiary = Color(90, 120, 90),
    }
} )

onyx.hud:CreateTheme( 'elegance', {
    colors = {
        primary = Color(34, 40, 48),
        secondary = Color(32, 36, 42),
        tertiary = Color(40, 45, 53),
        accent = Color(60, 179, 113),
    }
} )

onyx.hud:CreateTheme( 'ocean_wave', {
    colors = {
        primary = Color(24, 32, 44),
        secondary = Color(30, 40, 52),
        tertiary = Color(37, 50, 61),
        quaternary = Color(24, 32, 44),
        accent = Color(70, 130, 180),
    }
} )

onyx.hud:CreateTheme( 'violet_night', {
    colors = {
        primary = Color(48, 25, 52),
        secondary = Color(58, 31, 63),
        tertiary = Color(72, 40, 78),
        quaternary = Color(48, 25, 52),
        accent = Color(186, 85, 211),
    }
} )

onyx.hud:CreateTheme( 'forest', {
    colors = {
        primary = Color(34, 44, 34),
        secondary = Color(42, 54, 42),
        tertiary = Color(50, 64, 50),
        quaternary = Color(34, 44, 34),
        accent = Color(152, 251, 152),
    }
} )

onyx.hud:CreateTheme( 'rose_garden', {
    colors = {
        primary = Color(44, 24, 34),
        secondary = Color(52, 28, 42),
        tertiary = Color(61, 33, 50),
        quaternary = Color(44, 24, 34),
        accent = Color(255, 105, 180),
    }
} )

onyx.hud:CreateTheme( 'rustic_ember', {
    colors = {
        primary = Color(44, 29, 24),
        secondary = Color(52, 34, 29),
        tertiary = Color(61, 40, 34),
        quaternary = Color(44, 29, 24),
        accent = Color(255, 99, 71),
    }
} )
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_alerts.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/sh_init.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/languages/cl_spanish.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/core/integrations/cl_brick_gangs.lua:
return gluapack()()
--addons/pcasino/lua/autorun/pcasino_init.lua:
PerfectCasino = {}
PerfectCasino.Config = {}
PerfectCasino.Log = {}
PerfectCasino.Translation = {}
PerfectCasino.Core = {}
PerfectCasino.Sound = {}
PerfectCasino.UI = {}
PerfectCasino.Database = {}
PerfectCasino.Cooldown = {}
PerfectCasino.Chips = {}
PerfectCasino.Cards = {}
PerfectCasino.MachineLimits = {}
if CLIENT then
	PerfectCasino.Spins = 0
else
	PerfectCasino.Spins = {}
end

print("Loading PerfectCasino")

local path = "PerfectCasino/"
if SERVER then
	resource.AddWorkshop("2228228831")
	local files, folders = file.Find(path .. "*", "LUA")
	
	for _, folder in SortedPairs(folders, true) do
		print("Loading folder:", folder)
	    for b, File in SortedPairs(file.Find(path .. folder .. "/sh_*.lua", "LUA"), true) do
	    	print("	Loading file:", File)
	        AddCSLuaFile(path .. folder .. "/" .. File)
	        include(path .. folder .. "/" .. File)
	    end
	
	    for b, File in SortedPairs(file.Find(path .. folder .. "/sv_*.lua", "LUA"), true) do
	    	print("	Loading file:", File)
	        include(path .. folder .. "/" .. File)
	    end
	
	    for b, File in SortedPairs(file.Find(path .. folder .. "/cl_*.lua", "LUA"), true) do
	    	print("	Loading file:", File)
	        AddCSLuaFile(path .. folder .. "/" .. File)
	    end
	end
end

if CLIENT then
	local files, folders = file.Find(path .. "*", "LUA")
	
	for _, folder in SortedPairs(folders, true) do
		print("Loading folder:", folder)
	    for b, File in SortedPairs(file.Find(path .. folder .. "/sh_*.lua", "LUA"), true) do
	    	print("	Loading file:", File)
	        include(path .. folder .. "/" .. File)
	    end

	    for b, File in SortedPairs(file.Find(path .. folder .. "/cl_*.lua", "LUA"), true) do
	    	print("	Loading file:", File)
	        include(path .. folder .. "/" .. File)
	    end
	end

	-- Font was loading funny and this seems to fix it
	hook.Add("PostDrawHUD", "_pcasino_fixfonts", function()
		include(path.."derma/cl_fonts.lua") 
		hook.Remove("PostDrawHUD", "_pcasino_fixfonts")
	end)
end
print("Loaded PerfectCasino")
--addons/pcasino/lua/perfectcasino/core/sh_chip.lua:
-- All the types of chips
PerfectCasino.Chips.Types = {1, 5, 10, 25, 50, 100, 250, 500, 1000, 2000, 5000, 25000, 50000, 100000, 250000, 500000, 1000000, 10000000, 100000000, 1000000000, 10000000000}
-- Builds a stack of chips to equal the number given
function PerfectCasino.Chips:GetFromNumber(num)
	local total = num
	local chips = {}

	-- Loop the chip set and break it into chips
	for i = #PerfectCasino.Chips.Types, 1, -1 do
		local chip = PerfectCasino.Chips.Types[i]
		-- We offset by 1 to account for skins starting at 0
		chips[i-1] = math.floor(total/chip)
		total = total - (chips[i-1]*chip)

		-- Don't include it if it's empty
		if chips[i-1] == 0 then
			chips[i-1] = nil
		end
	end

	return chips
end

--lua/autorun/phil_coulson.lua:
player_manager.AddValidModel( "[K] Phil Coulson", "models/kryptonite/phil_coulson/phil_coulson.mdl" ) 
list.Set( "PlayerOptionsModel",  "[K] Phil Coulson", "models/kryptonite/phil_coulson/phil_coulson.mdl" ) 
--lua/autorun/polis_kalkan.lua:
return gluapack()()
--addons/undertale/lua/psa_undertale/resources_02.lua:
return gluapack()()
--addons/undertale/lua/psa_undertale/resources_02.lua:
-- This script is copyright of !cake, STEAM_0:1:19269760, http://steamcommunity.com/profiles/76561197998805249
-- Undertale is copyright of Toby Fox
-- Undertale audio samples are copyright of Toby Fox

PSA.Undertale.Resources.audio_000029f1_int16_44100hz_mono = "]\x00\x00\x01\x00\xc4\x1e\x00\x00\x00\x00\x00\x00\x00\x7f\xe0\x04\x00\xf5\x1b_\xac\x1co\xf5\xde\x12\xadp\xc6s\x08\xf2?\x00z\xb5\x9a\xbe\xc2\xeb+\x0a\xd9\x81\x19\x1b\xff\x9b\xbeu\xcb\x13\x0f\xd5\xf2\x85\x81\xa6#O\xb7\xd9O\x87;\xcc\xf0\xbe\x99j\xa0_M\xe4\x8d\x16\xdd`\xd9\xdf@\xfe L`7\xdeA\x09\x8e\xa0]:t\xb5\x0a\x9a\xd3\xc6/\xecz\xf6\xe3S\xa8\x15\xc0q\x16\xc2\xe7\x85b\xf9\xe4\x1a\x1c\xb3\x08\xb0]\x84\x80\xef6X\xff\xde\xb4-h\x96\xaa\xbf\xb0/\x13dp\x8dd\xf6 p\xf9\xef\x0f\x1d\xa77`\x13\x9cGf\xdf\xa0Y\x05%\xf6\xdc\x09\xe0\xb1\x1a\xf1\xa8\xaf\x92]\x0cA\xa4\x0f\x16\x88\xd2\xfd\xf1,\xdd$\x1a\xfb\x97wy\xa6H\xb3\xd8\xdce\x1f\xf7\x8f,\x04\x00$a\\\x03\xa3\xe5\xdc\xa6\xce`\x86\x97\x13`v\xa5\x7f\x0a\xb8\xa4\xd2\xab\xe7,\x1b\xdfP\xab\xfe\xfc\x8e\xed1\x15 WK\xba\xebc\xbe\x0d\xdfJ\xb1\x03\x8a\xe6/m\x13o\xd40\x1aH\x12\x11\x82\x9b\x90\xeb\xba<\x13\xcb\xdc\xd4\xd4-\x15\xefJ:\x90\x82\x0d\xa9\x90\xe713'A\xd1\x90\xedn\xf5\xc15\x0a7\x8c5H\x9d3-\xdd\x07X+\xa9\xe3\xa0\"\x906\x1b\x15\x14\x04$3B\xd8\xc7~l\x08\xa7:\xd0\xd3\x0f\x00\xb3\x07c*\x1d%\xa1\xaa\x89\xfcdK_s\x0b\xc0\xe9\xd9\x1bS\xdeTS\xcaK\x11\xfcE\x1e\xda\x1b\xe9\xd0\xc2+_\xe6\xcc\xbf.\x1d_\x84|>H\x15>s_\x10pA\xa3/\xb6H\xe8\x0a?\xf1#\xe7S\x92\xec\xa8[d\xa0\xff^\xc92\xb5v\x0dQ\xaa6sE\xf7\"\xc0n\xc7\xd3\xc2\xc5\x8d)7\xc0J_\x08\x19\xc2b\x9a\xe6/=2\x0d\xcbUz%\xb8!\xc9\xb9\xb5c\xbc\xf6x\x9c<G\x12\xbb\xcd\x1c[\xf5\x92\x8b\x10+K\xf8\xe4\x95G\xd3R\xdeC\xf2g\xf4\xd8I\x0a\xacV\"O\x0eF\xb8\x17\x9b\xe6\xd5YK\xcc\x0d\xaa7 M+P8]\xe5\xc2\xc8\xc2\x8c\x0f \x1d\xb5\xfa\xf9\x96o\xba%\xcb\x84CM\x17d:\xaakT\xeerQT\x1f\xfbbW\xe1\xb1\xa0\x85\xd6\xddJ6UW\xba)T<\xe1\x99S\xf5\xacm\x8b\xf0K\x9c\x0c\xb0\xb0\xc8\x0fs\xb8Q\xfd\xd9t\xba\xc8\x0c\xeax\x19r\x0b\x95\xffs\xd6\x1d\xba:*\"\x95\x8f\xe7\xc7\x95\xfcUZ4\xde\xf5\xbfH\xcd\xaa\x09\x13\xceA\xf7\xcfJ\x95\x08\x04A\x9f\xb1\xfc\xa5S\x8c\xbbial\xb0\x03\xa2\xc7\xe8\xbb\x1c\xdeT9\xbb%d\xfe>_9U}w\x06\xc5\xff\xb8\xb7\xe9\xc8\xec\x8f\"\xf6\x81\x93\xb9(.p\xd4\\\x01\xe1\xa0\x04?o\xed&\xfa\x87k\xbc\xce\xa0k5\xfadL(Q\x87\x1cu[o\x04\x94C\xb7\x82y\xe2\xbfd\x8b\xf29\x1c\xf9\xe0a\x04\xc9\xbf\xa5\x90\x1a3\x95\x95fX\xdd\x01\xc8\xcc\xe1*$w\x7fH\x93\xc7\xef\xdc\xa6\xee\xfb\xfe\xeb6\xcb\x89\x0fQG\x0ePe\xb5l\xcb\xc8\x9d\x13Rv\xac\xe2bfl\xb1\xcf\x02\xf6\x94\xd2\x06\xd5\xb4\xf4\x99<:ts\xbcc\xbb\xce\x14k\xe5\xddkn9:\x16\x0es\xb33\x11\xb2\xd5\xfa2\xbew\xddD\xe1;g\xe2\x8a1\xff\x8eT\xcb`\x10\x02]1\x90\x0f\xa49lF\xa7gG\x1eLuh|T\xd3\xaeM\x9e\xefa\xfe\x13#\xbb\x16\xc8\x95 \xf9t\x81\xf1\xd4\x19\xb5\x01\xb6r\xef\xb4\xfcli;Sh/\x82\x98\xf7\xd6\xc5kftY\xe9I\xc1\xec\xdf=o\xb6\x03W\xae\x10\xa9\xea7\xbb\xe1pm\xcd3\xabi\xab\xfe\x17\xe4\xa1\x15\xfd\xef0(H\x03\xa2\x7f\x89t\xfb\xed]\xfa\xa5\x0d\x16\xcd\xcf\xa0\xc7\xbf\x15D\xa0U\x99\x1f\x1cS=I\x85\xa1\xb7\xae\xbd\xe6\xc7:\x1d\xe3\x8fd\x1e$\xe5\x996\xb64\xdc4!\xe3\x9f\x89\xa1=\xd7w0z\xe0\x03@V\x86\x19o\xf5cXZq-\x11\xbb\x96\xfd\xed\xcc\x9b6\xbf\xc0A\xf7\xf6\x07\x0bx\xe1j\xbd>\x98g\x05\xa6$z\x09G6e\xe0\xe6C)\x00\x17D\xf3^\xcc1\x87\xf3N\x0d\xc1l:a\xdeM\xc4\x05YB\x18\xb8\x81\xb4.-\x82I\xd0J?\xed\xb7:l\x17u*`\x84\xcaq\x83Y\x96\xd8\xd1\xdf^\xcc\xb8\x85]\x123\xcb8v\xde\x908\xb3\x06\xc5\xac\x92\xa8\xe2zA\x17\xd38\xbc\x0f\x00HM0.\xddXA\xca\x8f(\x9c1:j\x0aj\xa8\xc8\xb3;0\xa7N\x11\x85>\x88\xc9'\xb0nV\xec\xed#zl\xf5\xda\x99\x07\xf6\xe4+3\xae\x19Z^I\x84\x8b\xbc\xc6\xc6Y\x88D\xd4\xd8\xf1\xbc\x8d\x8a\x8f\x1d\xf76\xa9\xe8\x88\x16\xb0\x85\x81\x98\x863\xb7\xfd\xe7@\xab\x9b\x8c\x82\x160\x86\xf4R\xa9\x81>\x8e\x83XL\x83\xbf\x8d\xb6[\x8b\xe04\x1e\xba\xa5\xa27\xdc\xd7\x04\xff\xddH\x82\xed|\xea\xae\xa0b\xc2ew\x0dv~E\x0b\xda7\xefy\xe5\x88<\xc2\x0e\x9a\x86\x1d\x88\xba01T\x02\xa2\xa0E\x9as\x8d@\xd3\xb8T9\xb4|\x80\xc9H!\x16?\xda\x0d\x06\xfc\x8e\x86\x8d*\xa4Jhb\x06\xe2d\xffG\xb3\xde\xd9\xf7;r\xd0\xfb\x91\x05\xf0\x894\x88\xdb\xbcrTequA\x0cY\x0ca\xbc\xb5\xce\xa8z\xae\x95\xe3X\x05\x9d\x01\x9d\xc1Lc\xa4\xddGB\xb2\x04\xf6\x96\xa8\x96\xfb\x05,\x9e\x93B\x98\xc7$ \x1f\xde\xc8\xf1\xf9\xe7\xc9\x8c\xd7\x02\xe6\x92M\xc9\xc2!8\xd4K\x9b\xd1\"\x9c\xb02\x7f\xe2\xf6a\x9f\xf0\x82\x8c/=\x8a\\!FN\xbf\x10\xad\xd0H\x99\xc7\xf9\x84#\x83\xa33\xb9\xdd.>b\xf5\xc4\xeeh\xa1\xbcem\xe6\xa5\xf3\xdb.\x18I\xa4\x98Ov\xefMYQ\x00\x1d\x00\xc4V\x01B\x8dx\xc8\xfb=\xae\xd1\x099\x8d\xc7\xf2\xee/\x920\xf5\x90\x13\xc9\x95(GN-\xfc\xf5\x9e\x0f\x905B\xd86:A6\x864\xdeT\x92p\x94\xea\xfb\xd1cR\xb4L+R\x8aIL]\x1b\xdf\x1bH\x90!_x\x1a\x0c\xde\xec;\xf6}\xde\xde\x8a\x82\x90d\xae\xba\xf4\x9f\x93k\xf8\xbf\x1eGh\xcb=%\"\x84\x05?\x0aU\xb1lT\xab\x19#\xde\x9c\xf0\xdb\xc1\x92\x89&<\x8e\xf2\xfc\x8f\x08\xa8|o\x84\x1bl\"\xd8-B\x16uO\x95\x89\x9f&W)\x87\xd5\xab\x80\x9a@D\x9a\x18@\x94\xf6;\x07\xea`\xf3O\x02\xe1k\xc7\xce\"\x9a\x120\x02\xb2\xcf\xf0\x9a\xdai\xe1\x09\x95\xd2\xe5\xd7B\xe6\x0a\xdf\x92I\xe7\x12(\x1c\x80d#\x90\xea\xe3\x8a\x96(U8\x1b\xe5\x06\xf1\xc5$ 8L\xcc\xaaO\xd7\x19\xe0\xdc\xc6~h\xa3r:\x7f\xcd\x18\xfd\x0d=\xfb\xb8\xb7R([[x\x8d\x90N\x85\xa4\xc1M\xa8f\xc9x\x87[]\xf5\xd4\xb3V\x16\x18\xc3\x04\x94\x9d-\x16\x85\x8e\xce\x12|%\x81>\x8b\xd4\x1c\xdb\xf0\x85M\xb3l\x15l\x8c!\xb1v\xf9IS\xfb\xf1{\x99\x9bu\xbbk[\x9c\xb0\x93 T\x02W\x0e\xbf\x83\xd2\xdc\x9eu\xe96_\x08ij.\xca\xfd\xb9\x8a\xe8\x8d\xd2\x0a[\xb7\xb2E-i\xbb2\xf2\x8c\xc6b\x01,\xa8/\xe6i\xae\xfd\xcc33\x8d6\x0d \x1c\xd1\xf6\xbb\x81\xedI.\xd7\x1a\xe2\x85R\xb0\x12\xafO\x8e&<F/L\xe8U ~\xd2\xc1!R\xe0\x00=\x14\x12H\x9e \x11G\x15\x08J|\xe2\xa10\xb2\xe1}1[\xdd\xa7)\x0b~\xb9\xb2\xcd\"\xb4\x01\x9bY-\x8c\xcd\xcb]\xc4\xa2\xd7\x0ci\xda\x0e\xef\xef\x07\x97\xc1g\xdb\xa2}\xec\x04\xc7\x94!\xdd\xe91A\xd8\"\xbf\xac?\xfd<)6K\x89\xc6]\x16f\xea\xd9\x9be\xc0_|\xc5\x16\xb8FI\x8a\x16\xa1\xb0\x99~V\xd5\x0a\x00x\xe7\x81n\xf0yfeNB\xa6y\x1d\xba\xe3\x1f6\x08|\xafji\xaaQ\x0b/NO\x105AiR\xcb\xd3\xccf\x9f3\xb0a\xbb)\x1a\x08\xc4M2Mwfwh\xb2\xaa\x04\xe2W}=f\xac\xef\x8b\xc0\xdf\x92K\x8a\xbeS\xfb\xda\x83\x12Q\xd9\xd1\x0b\x9f/\xd1\xa1&\x94\x94\xa4]<\xc5\xc9\xa2(\xec_s\x8d{\xed\xeb\x97\x0c|r}\xcc{s$\xa1\xe5\xf3\xc3\x0c\xd5h\x0e\x99\xb4@\xeb\xd5\xef\x11L\xb9\x11B[\xac\xe2\xdb\x94\xd8g<@W\x04\xdeD\xd1M\xb1F\x9b\x0d\xe6\x9d/\xa1\xedb\xd5\xd1\xa65\x1e\xa8\xc9#d\xaafD\x0d\xfa\xae\x07\x96\xde\xcf:\xdeL\xd42\x19\xc0.\xaa>\xfc\xe2\xae>P!\xe1\xc6I\x9c\x8f\x9d9:\xe3\xcc0\x02\xcc9P\x7f\xa2\x82w\xe5>)\xfc\xf7\x12\xed\xe3\xb7\xdeg\xe0_-c\xe9\xf6\x9fod\xde\xb7\xb6\xaf\xcc\xd0\\\xff'\x9a\xd6\xc0`H$\x04X\x95\xb3S\xab\xc1z\xb7k\xd8\xadA\xb6\xd2\xf3\xc1 \xa3\xb2DQ\xc5\x93\x93,Ty\xbeI \x02@\xb6`\xb3\xb5\xc2\x9cn\xeb\xe0\xf6?\x13\xfd\xaft}C@\xf0oW\xc3\x1ac\x06\xa2\xfe\xa7\xb8\xf90\x15|o\xd1\x94\xe1R\xec\x11\xd6\xaf\xa1\xc5\"\x81\x8e\xbf+\xe8OW\x8cm\x1d\xca\x8d\x80\xddF\xa7>\x072\xa4\x9a\xebg\xfa\xdfPi\x073\x02\x08\x8b\xacv\xc1\xb6\x16\xa4Y.l\xa8\x04\xa2C\x9d\xd0:\x82t\x86\xbe\xb5{u\x8d\x14\xc9\xa3\x96\x9c\xafb\xe8\xc7}\xc0~j\xf0\xbb%\xec\xbe)#\x17\x8d{\xff\xa1\xc5>[\xd2\x94~d\xd8\x90\x9a\x8629\xf3\x8e\xa06\xf9\xfbN\xe9\xa1\x90@r|\x04H~\x13\xf4l6\x87\xbb\x1aP\xc5XaD?\xc13\x9206\xf3\xceX\xbaV\\Q@\xcb\x89EP\xee\xe1\xb7\x89U\x82\"z\x05\xb3\x85\x84nx\xbd\x9dW\xfd(\x07\x94:{iC\x06.B\x92\"\x85\xcf|\xdc\xd1\x9ba\x98x\xfb\x8c\x84\xc4\x99\xcb\x7f\xb9\xb2R\xa6b\xc6\xd4\xae\x8c\x82\xc3\x0d\x8f\xa4dF\x0bc\xff\xf2\xaa\xc6\xe0Q\x19\xdbs\xb5\xcf,HF\x7f\xa60\x0d\x19\xc9\xba\xb2zju#\xfaY\xdb\x99\x84o\xc6<fB\xda\x88CJ\x81\xa0|\x1f\xb4\xedU\xf1\xb13\xf0\x84\xf2\xd4\xca\x82\x8dG\x16\"\xd3\xe3VD\x04\x81\xa6q\xa3\x94\x86\x1eJu\xbd\x8a\x18\xe4X\xd8/u\xf9\xb3\xe0\xaa\xb1\\}\x87)\x193\xd9(\xe1[\xee\x90\xa5\xb0\xcfx\x18\xea\xb7\xd7\xaa\xd7k\xfbG\x98\xcc\xf0\xb2\xb4\xf5\x126}\xbe\xd7|6\xd7\xfd\xc2z\xe9\xe5\xa7\xb1'\x16\x88\xd3\x81\x06oU\x13u\x98oXf\x85\x19$\x99\x8e[$\x0e\xa6\x16\xfb\xbe\xadm\x1fjh\x0b\x85\xf0/$-\x06\x1e\xb1\x0f\xadx:Z\xf5;*\x14\x13\xfd\x12=94*\xafn\x11FZ\xec'v}\xb2@\xe2M\xa6\xe8\x0f\x03\xde\x9d:\xa3\x1aK\xc7\x9a\x0d\xec{4\x05\xc4w\xbe\xa7\xfbW\x9btKb\xd7k\xc2E\xc5`]\x06\x84J5:\xea\xc5\xfb\xab\xe8\x8a\xfc\xd8\xfeJ~,8\xd74\x0e~\x0f8\x10\xb3\x85\xce%\x18a\xc5\xaa\xc3G\x8d\xf8\x97\\v8l\xd6@\x13xLn\x9d\xfaF\xd5\xb7\x13\x0eph\xc2\x8c\xd1\xda/\xa4t\x98x\xee\x84\x16\xa4\xb1cw_\xbb`\xacE\x0e\xdd\xab0|\x82\x0a]\xe9\xa6y\xd0\x1a\xd4\xe3\x09\xed\xd4\x00\x18\xfcq\xfa\x82_\x11\x82o\xbc\x00F\xac\x0f\xf1\x83\x01\xf1\x80I\xde\xb6\xea\xfc9\x07\xdb\xc8\x14\xbb\xee\xe7\x8a\x9e\x0d\xec\x1b\xf4\x0ae\xca\x1cJ)\xa2\x11!\xbd'\x9cN\xae\xbc\xe6\x81\xd3\x004\xa9\xd6\xcf\x0b\xb7\xa3\xfd:\xed\x89\xb5J1$\xd8T,{[=\xdd\x09}T)G\x9b\x94\x03R\x9e\xad\xad\x9f\xf2\x0bVp\xb9\xa1\x03Xz\x10\xcd\xb5E\xc5.\x80\xb2\x1c\x0e*Tu\xa5\x92L\xb9{\xf8I\x12\xbf7\x80\xf5j\xbe\x8d\x17\xc0\x91\xb2\xc7\xe1\xbc\xe5\xd5\\\x9f\xbd\\PT\x18\xf0\xf6\x89A38\xa9A\xac\x92Y'.]\xd4\xc2j\xa6\x0e\x94\x14yz\xe5P\x86\xc3qF\xb9\xac\xc1CB\xee\xb3\xaeK\xd40\x95\x80-~\xc8\xe8\xa4\xa9\x9fj\xa4}\xc5\xad\x16\x14\xf0\xa9x\xe1\xdc\x022\xdb\x0e\xf9\x9bW8H;\x08ix\xb3=hP\xe9\xc3\x18>\x065\xb0r\x01\x94\xc3\xa1\xb7\xfbR\xda\xe5\x0c\xf7jI\x88(\x0a\xde\xa8\xb8;z2V\x87\x12:\x90q\xf7\xacY\xb0\xb9\xd6\x8a\x9al\xea^8U\x0akX[1\x00$4\x11{\x16\xb9\xb5\x93\x84\xc4\x1b\xb9\x1d\x0c\xb0\x84\xb4\xf6\xc8\x1d6@\xd8\xef\x92\x7f\x10\xbbm\x1dF\x8e\x19ba\x8e\xe6\x88\x1cG\xaa-\xef\xb4\xb1\x88A\x02[\xdd\x8c\x83R\xdb\x92x\xca\x8cg\xe7\x87P\xdf\x7f\x1dCb\x9c\x8d\"y\xb0\xd2\xd9\xa3\xfe\xadJQ\xdc\xa9BSx\x15\xa6\x1a\"\x08\xc4\x84\x86 g\x10\x89\xdcUV.\xc4T\xee~f*\xb5\xda\xa6\x9a\xddZ\xb7\xfc\xf8J\xb6\x90s\x80B\xd5\x17\xfbw\x05\x8e.\x9em\xe52@\xb7C\xc8\x9c\x12\xb5\xdeX\x95\x13\x8c\x84\xea0o~;\xc7Q\xe1\xb4\x10-1C\x80\xe0H!\xac\xfbz\xc0\x0c\x9b4\x13\xf1\x9fcM\xac\x90iP5\xf3&;\xbc\xf6\xb4q\xf19\xc5\xb3o\x8eI\x14\xeb\xe4\xb43N\x81\xd0yv\x8d\xd9\xb9l\xbc\xde\x7f\x1f\x12M%\xf7\x8c\x95/\xf1\xce\x8cX\x14\x82\x0f\x03\x9c\xe4Q\xbd|\xce\xbd~\x83\x0d\x10S\xb6N}v7v\xb2<\xa8\xaa*\xb2\x9d\x9d\xe8\x0bo\xfe\xb7G\x01\x9dDtB\xec/\xa8\x82\xa2\x87\xff,\x04.\xd5K\x14L\"8\xbf'\x0e\xae\x7fzA\xe5#z\xf0BG?`\x90K\xf5O\xab\xf3\xcf\xe4\x17\xc1_\xb0\xf9\x89\x90\x9d\xaf\xc5XV\x00q\xb8Y\xb5\x94)\xac\xc2b\xee\xd4\xd6!\xcc \x14\x10j\x9b\x86\x92\xc0\xa37\x05cJG\x1a\xb5u\x12\x12\xf0m\xcb\xe4\xd6\x84\x1aR\x04\xc1R\x87\xdb\xe1\xf7\x82{y\x03\xdc\xd2\x07yS`\x12\x80\xf9@\xc4\xecG\xd1T\xcb\xef.TV\x06\x08\xd1\x98+\x1f_\xd5\xf0\x12\xc5^\xb7\x85t\x95\xb8\x84\x1a\xe1\x84\x1ba-\x16\xce\xdf\xe3\x86kC\xfd\xad\x8e\x9dSk\x84\x11\x9e\xed]\xfdH\xdf\x05\x91\xcd\xf5\xea\x17\xeb\xeez\x0adX\x95\\`\xe9r\xed\x9eg\x1f\x13\xf2i\x9e#xsw\x069\xb0\x8eA(\x1a\xb6SP\x11\xb4\xdb\xfb\x8f\xbc\x1ca0\xd6\x19\\kFi\xb3s\xca\xb5\x9b\xf9\xca\x09ZQ\xa1\xb2;\x1f\xdf\x01\x84\xec]\xb5\xa4\xad\xa2\x90Q\xa8:F\xd7t\xdd\xf2O]\xc0\x09\xa5\xb9\x8bvQ\xaa\x8d(\x9b\x95\xc5\xdf\xc5Y\x9fT;y\xa9-\xbdO\x94\x09j(\xdc\x95\xdd\xea\xcd6k\xf2\xa7\x9a{\xbc/\xe8\xdc\xe9\xfe\xbd\xf2`\x7f\xea\"\x84\x8f\xcfG\x14\\X\xef\xb8=\x0f\x94\xcb\xbc\xb6\xfb\xc4x\xa4\xf5[\x1c\xec\xb0S\xda\x012\x81\x060\x8f-\xf21\xc87\x92\xc4]\x1b/\xb0s\xa6\x80\xe0\xcd\xc5\x1f+J\x19\xb7Qf\x01\xc2\x95&e\xc7\x90\xa7\x1f\xfa\x82h\x94(\x9dg\xf2\x1e\xfd\xd5\xd9\x19\x1e\xb3\x08\x05S\xd7P\xf4{\xb1)\x88\xed\x1a\xc4\xac\xe3\xdb3\xe3\x1a\xa6b=g\xe9\xe9\x99\x97&H\xd97\xaeX`;\x0d\x96\xadl\x88\xde\x1a\xc6\xdc\x10\x9d\xad\x19\xa8G\xf0\xf9U\x87\xbb\x8d\\A3\xf0<1k~\xe2~\xa9\xed\x07\x13\xf8\x80\xef\x9b\x1cE\x14\xb2\xc7\xaf\x0b&\xd3\xde<\x90\xb0>/\x91\x90\xff+D\xea\xd55_\x11\x9f\x98\x8c\xcdd/\xc8\xbc\xc4:R\x998\xb0D\xc79\x02\xf3\x80\xad\xcf\xd1\xb1\xf1\xc4;8\xe4\xa5\xb2(B\x04\x12\xd5~\xe3\xb9i\xb4,J;&\x9bm \x02\xac\xe0n\x18\xd4\xc1e2\x8e\x13|\x16P(S\x09\x9c\x06\x80S\x08\xa0[|dgM${\xb3\xe5\x8e\x1f$\xe4\x91\xea\x0b\x98\x08\xc3\x08\xbdN\xda\xc5\x9f\x0f|C\xcb\xd7\xf9\x93a\xc8r\x14\xce\xa0\xb2rq&\xf8u@02{\xa3\xca\x19\xe2=xW\xe7\xb4\x14\x12\xebY\xdd\x98Y\xf8\xe9e*R\x96\x07s\x90Gz$g\x11\\\x8d%\xc9-S\xdd\xbbW\x7f\x9c+w\"J\x9a\xc6:\x7f\xe7\xd3\"\x8a\xa6\xfc\xbd\x88qy\x9d\x9a\\f\x14\x80\xe9x\xd0e\xf5\xd9\x18\x8aW\xe9\x9e\xbf\xfd\x00\xd4\x1d\x7f\x0d\x8c!\xa0\xb1\xfc\x08\xab\xdc\xf6\xab:\xb60\xe7cM\xdbMO\xba\x187\xccq\x93\x07\x19}\xf5|\x18\xd9t\x92o\xc2\xab\xf0\x9c\xcf)?{\xcb\x8c\xd9\x1bf\x88\x80\xa6\xfd\x90\xc0a\xc3Ow\xdf \xe6\x04\x93\x10|u\xe5&\xca\x94er\x12\x06\xa1 \xbf\x7f3W\xa7\xb8\xec\xe3\x102y\xedO\xb3\x1c\x9e\xadc\xb1B7Gv\xc8\xba4AGe\xf7\xe6_\xba\x818$dMJ]\xbd\xaf\xd55u\xf4\xe0\xcd\xca\xf7w\xfat\xed\x80I\xf3R4\x01\xec\xad\x15bb\x0f\xb2\xb4rf\xb3\x06M\xeb\x84\xab\xc8\x10\x0c\x9b\xf8[A\x10\xc1\x80\x9dAL\xde\x82\x14X\x86\xfe\x1d\x10E\x01\x13)\xb9!\x91o\x19\x08\xb2\xb5/\xde\xd6!@\xfe\xa7lI\xd7\xf4\x93'\xc4\xfe2\xd8\xd5\xe3I\x9f\xe9S\xa9Pw\x98w\xeb\x1b\xb1\x9b~\xfa\xef`R\xd4uC\xeaX\xb1s+@!\x8a.\x10\x9a\x92\xc6\xb1\xca\x81><\xb5\xf5\xf1>%\xd7\xe0\x02\x96eA\x8fE\x8dJ6`\xee\xa2\xb2\x00/q\"\x15\x88G\xd6\xb7U\x0e!\xa8T\x96\xb2\x83\xaf&]w\xd4Zi\x98;\x1a\xfet%\xd3\xbe]M\xffL\xa6^\xe79\xd93\x87\x7f\xa9\xfb2D&_u\xba\x89\xa7\x81m\xd5\x14\x18\xcf\xdd\xbd\x87f\x9d\xa4\x8b=\xad\xd3\x81l\x10\xed\xbaC`\xba\x1f\xcf\xa3cR\xe7\xe0\xa4\xba\xf3\xe3Iub\xcc\x0e\x82\x09\xae\xb3=h\xaa\xc6\x03i\x00O\xcf\x94p\xd5\xa3\x07\x1c\x14Cl.\xe8\xfc\xc93\xfe\x12\xcad\x88\xd3\xb1_\xa5\x13Q\xa1\x17\x7f#:\x8b4\xea\x17\x85\xafX?'4r\xf5\xf0\x9eb\x08\x91\xadS\xcf\x06\xd7\xd1\x1c>\x89\x9e\xc3\xe8\xc0\xa4\x03\xc6l8\xbel\xe6\x17\x9e\xe1baQ\x0c8\x8a{\x0a\xcd\xa7\x93>\xf0\xeb\xbb;\x8e\x9f0\xdb\x07,\xe2\x04\x7f\xb1\xce\xe0\xaf|#+U\xc0\xcd\x8ejT\xec\xd9\x12\xbe\xbc\x94\x18wj\x84'\x92\xa3.%\x8b\x84\xed\xdc\xfc\x16\x9e\x8e\xde\xc2\x85\x15\x04Gp\x8a\xb4\xef\x8c\xe8\x0a\xe8\xcc\xc8\xfd)\xd83\xc7\xc0n\xb6\xc0\x107\xd1s\x0b-\x0c[\x9a\xaeh4 \x82V\xc6\xf4\xe0\xd3\x9f\xc3\xf2\xac\x8d\xea2\xa9X1v}\xcd\x88\x83-A\xbf\x802#B\x82\xb8oM\xfcTm=B\xd2\x947\xbe\xe0S\x8a\xe8\x8dY\\\x98<\xfd\x15G=\x98\xde<\xe8\xa6\xf3\x84kgcgk\xb2z\xde\x03M\xe2\"\x18\xce\xea\xdb\xd2ePwh\x95\xdc\x1b\x95|X)\x89\xbe\x99\xaa\xfc\xdc\xb7\xe0\x16+\xfb^\x08\xbb\xd9\xac=\x9c\x8a-K2c#n\x92,\xd4\xe5\xf8\x89\x12\xc7\xb9\xa4]\xab\xaf6\xee7\x04\x01U\xb8\x06X\xef\xf2K;\x05\xa0\x16i\x87\x1a\xc9\x00<\x99\xfaf\xd0\xcd\xeb\xd1>PXKB- \xcf;\xc9p*\xb05\xc5C\xe9\xbcMxx\xce\x1a,\xf0\xa6U\x9d\x04h=\x82\xffk\x85\xb97uf\x0a\xb6 3bB\x04\x82\xfdJamK1\xd7\x15\xcfv<\x1e\x9e\xb5x\x9d\xa0\xf8\xeb?\xccJ\x8bl\xf1\xb2k\x01\xd3\x82\xe81W\xf5L5g\x05\x05\x8f\xebb1\xb2\xf1\x9e\x9a\x02\xc9\x95\xde\xbf\x944\x87\xa9c!\x182\"0\x9e[\x8b#\x84\x0d\xc1\x10\xee\x97p\x9a9v\x99\xaa{v@\xfb\xa8\x0d\xaf/8?\xc3\x89@=\xca\xe0+-\xd4\xf9\x1d\xc03\xd0\x8c\xd5\x13W*\x0ak\x83\xa10L\xdf*8's\x9e\xbf2\xf5\x1c\xb2$?\xd2\xf5\xf2\xd1<\x05\x0b\x16BU\xa6\x09\x80\xdb\xea\x8d<\xe9T\xbeI6\xc1}\xe4\xcb\xa1\x1a\xaf\xa7\xd8\xa5\xd4R\xbc*\xa8A\xa8\xef\x0dy\\<\x09\xf6\xcf\xc9\xe0=\xd4\x96h@3\xaf\x80\x15\xf6e\x956Gz\x1b\x1a\xa9\xb8\xee8+\x91)\x18\xe4%Nq\x15Q\xd8\xd1\xbdMF\xad\x85\xfb\xcb\xd6\xadx\x81\xc2c\xbd\x82\x07(8\x96\xf1\"~s\x09G6\xd4M\xa9\x97]mp(\xff\x12K\xe2l\xa6,W\xb0\xa5\xd4K\xb0H9<u\x8cb\xef\x92\x9dr\xbd\xffc\xbbD\x8a\xdf\"\xba\x81\x80H\x84\xd2-\xa7\x97Uh\xae\xe0-\xeeL7F.\xbd\xa2\xee\xe3\xd9\xdf0\xb5}\x8eJ\xcb\xa5\x8bKJ\x91+\xa0\x9bLz\xba\xb6\xc4\x9c\x12\x8d\x1b\x84\x16\x82j\xaa\xa0\xf0L+\x16\xf7\x96bR\x89\xb1\xacq\xe5wx\xbb\xb2\xde\xd0\x03$\xc6:\xc7\xcb\x7f\xacC\xf7\xbb\xb8\x00\x00\xfc/\xd4?\xf1\xa1\x9e\x1b\xfb\x83\xe1\x0c\xd7\xe5\xca\x9e9a%kB\xdfF\x9a\xfe\xdd\x8f\xde\xaa\xb2\xae\x99\xac@}\xce\x0e\xf2<\xec5Q\xb5\xb5\x0aS\x81z`\x03\xe9\x00\x1bA4y\xd2m\x04{\xa3\xe0L\xea\xfd\x01.\x03\xc1\xa8\xe1\x09\xfa\xf0\x1d\xde\xab\xee\x8e\xa6\x0d\xc2\xdc\x84\xb0\x8a\xad\x8e|9\x8b\xed\x9d\xf9!\xbc\xe0/\xfeb\xe4\xfen\xb9?\x0cPH[@,\xdb\xefL\xc8\xec\xb5Q\x91\x9b\xe7\x1e\xe8C\xbaq\x06\x13\xedd&y.\xdfc\xe2s\xe9\xf9c\x80n\x94_\xc1\x90 \xfeBEf\x1f4m\xbam\x08S\xdd\xa6]8\x1b\xfd\xb0\xff\xdd\xd7\xb7\x14\xda9\xaa\x91\x1az\x1e{3Kz\xea\xb6\xb4\xb3\x09E\xe4\xcc\xa1MX\x81@\xdf\x85\xf9.\xd6rm\xb4,^\xca\x84\xf6\x08\xdb\x1b;\x19\x06q\x80\xa8\xfc_@\xc6\xf0\x0e\xbc4I\xaf\xe4\x1aBH\xf0J\xb4\x82\x81\xb6\x13\xba\xe7\xe6\x7f\xf0\x9e\xe4\x0en\xc1\x09E\x88\xb4\x19\x17\x83\xea\xeb\xd9-\x096\xa9to+y^\xc4\xd2|LO\x93\xe5\xb3\xcc\xe2t\x95\xdeQ\x1f\x90\xc5'\xbdc\xe4_\xf9\xc3\x8f~\xa5H\xee\xd0QF(\xc8\xa3\x14O\xdb\x0d\xf9\xbc\xc1\xbc\x9d\x11\x91\xcfqN=V_g&oi\xae\xa3\xe6\xef\x04+\x9a\xd1\x9aZb\xb1 (\x90\xebG\xe0\xd8L\xa5\xd5\x15%\xd3\xca\xd3\xaa\x9c\x17\x8e\xde\x9e\x83F\xd7M<y\xb3\xa9\xd8U\x8a\xaaS\x89(\xd6\x99l\xc5\xe6)u\x9e\xb4\xec~\xd9\x0e\x01hkf \xe0\xb7.\xae\xc0\xb1N\x8eL~:<h7\xaf\x03\x1d\xde\xf6\x87\xd4\xdb\xe4n\xed\x06[RdF\xde\xaa\x0e\x05\x85\xfe\x9b\xdd\x83\xaf\xfbB=@p\x0fh}\xc8\x93\xea\xe7\xca8t\x0eO\x96\xfb\xd6\xc0X\xb74\xb9E|A\xc4\xab\x9aD\xb6Bs7\xfa\x03uW\xabI\xc8~\xe2'\xed\xa3\xbd\xef\x7f\xbeR\xff\x11T\xa9E\x14\xc7&\xb5\xc7+\x06p\xa0\xf9f7\xa9\x10\xa96\xfc\xcd\xb5\x1e\x19Z\x15*\xc7#s\xd2s\xa9v\x89\xfeN\xa6\xa3b\xc0wU\x9e%\x80\x0a\xa3\x97\x8d\xb9\xb5X&\xf9A@\xa55\x1fp!o\xe7\x18E\\J\x13\x0aj\xdc\xb4-y\x98/>\xfe\x949\xe4\x1dz\xee\x0d\x8a\x07O\x81\xefK\xa5G\x97\x10NX\xab\xe3\xc2\x85\x86@\x06\x9f+2\x9f\xff\xf3\xbe\x87>\xb8F\x8e\x1f\xd1a\xa4(\xec\xb2\"\xf2\xb5\xf3D\x9a\xcc\x09\xfbO\x8f\xa8V'\x09i\xced\x0e\x0du\x1e\xf21\x84f\xda\x03p\x9aD\x00Y\xc8\xa0\x15\xb2N\xaa/\x9e\x079\xa8=\x9a\xdc\xfd?\x11&F\xde,!Q,M\xc4\"\x8eJ\x0d\xf7\x98>c\xfd\xa6\x1a\xe2T~b\xcb\xe4\xfb\x08\xf3!\xee0#|&\xae\xf9\x13\xcf\xd3P\x13\xff&I\xf6\xe3\x80\xf5\x16\xc7\x8ae\xcf\x853\x13L\x1c\xf4\x7f G\xec\xc7\xe3\xaf\x06\xad\xdf\xe6$\xad\x85\x98\xa52\xee@\xfe\xe4\xfc\xb9\xe5\xc4P\xa0\"\x02\xc7\"\xb0\xeco5\xddu*z;\xb3\xa9\xf3\x1dr\x1e\x14\x0b\xda\x8a\x12\x92\x9f\xaaF\"\x8f\xb4\xccEL\x91\x1bR\xae\x91fq\xc6K7\xebl\xf3\xf2d\xc61\xe6g\x17\xb2\x8b\x8c.\xb7\xe8\xc2\x17\xf6;\x0c\xe1S\x16\xf50GT=TX\xee\xbb\xa3\xbfJ\xd15%\xc0J\x8a\x91Q\x86\xb3\xe4Y\xea'\x97\xb3)\x8f?\xc0\x87\\\xb2m\xb0\x03\x855B\xd0@\x11\xc7\x0b;\xfd\x14Mo+\x13U)\xca\x81ve\xc5\xd0\xf5\x88\x18\x85\x01~E\xcc\x1c\xa5\xbcx\xef\xf0\x13p\x1d\x19p\x7f\xfe\xcfAQX\xc0V=\xb7\x1c\xc8\x15\x07\x15V\xedE)l\x80\xbbe\x8d\xb9h?\x01\xd0\x9f\x8f\xab\xd9\x87\xc0\xack\xa0\xf7y\x8c~!>\xaf\x81\x83_\x06y\xf4\xde\x0f\xa0/\x02\x9dW\xf4Lv(\xba/\xa1B\xc9p\xd3w\xe4\x8c\x0d\xd5B\x7f\xa2\x88\x0d\xc1G4Pv\xda\xa9\x85\xea}1AAg\xe6\xcb\xd5\xdc\xf0\x8fr\xa9\xdd\x06j\xd4cN;\xa1H\xb7\xeb\xb4\xdf\xb3\xf2\x9fb\x9d\x043\xb3\xc4Q0\xd2\xdf\xd1\xe0iP\xaf\x0d\x06\xd8==\x19\x18\xd2^\x10'[c\x97\xc9]\"7{q\x89\xe0\x84IP6`\x93|\xe6\xe4\xa4\xef\xd3\x94q\xd7\xa7\xf0\x88(n\xb2_\x05\x13\xe7\xf7dL\x1cSR\x9fN\x15\x84J\xa3\x0aN\xf9\xad\xbe\xd4]9F\xfa\x82v\x07L\x9d\x8d\x9f\x9e\xc6\xfe\xeb\x97`\x0d\x9dq!w\x0f\xb6\xa2\xc4\xb5\xf1l=\xcb\x85\x89P\xb0P\xf4\xf6\xdf\xa4NKi6r5R\xc3\xc0y\xa0tW\xdb\xa9\x81k\x8a\x82a\xae\xd1\xbdF\xf0\x87J\xb6\xa7!\xc2,\x15\xc6%\xdfF!\x80F\xa3\xc8\xf6\xff\x095(N\xe4\x83b!\xb2\x84\x0by\xe8z\xa4\xfd \xbaE\x0fp\xc2R\xe5\x89U1\x0f\xe5\xcb\x1f\x19\xd9d\xb6\x07\xd7\x96\x95\xa9mh\xacIs\xbc\xd8\xdc\xdfX\xef\x8cT\x01i\xeeMb\xb3\x95Z=\x18\xf1\xdd\xf94\xabo\x09\xe6\x91\x95\xe5\xe3\xee\x19Z\x165\xb2N\xd3\xde(aP\xa8C\xa5\xadH\xb0(\x85!\xa1z\xbe;*,\x0b\xfe\x08\x89\xa6\xd9\xd59\x9eQ\xb1S\xdf\xe9\xf2\x11\x7f{\x1e\xe0~\x03F@h\x97\x82<i\xe4\xf3\xe0\xbb,\x89\x81\xe85\xceh\xce\xe7\xa9\xa2\x0e\x04\x17\x86s\xb7\x09\xd6\x15P\x84\xb6n\xde\xfe\xc1\xa5xgo\x94MDA\xce\x1b\x96\xb807c \x0f\x13r\xea\xfd\x8c\xb5V4\xc8\x8b\xe9\xb2\xe1\xa5\x99f\xb84_\xc7%K:k\xf1\xef\x13\x85\xb4\x9f\x95!\x89\xad\xbeA6\xaf\x80\xfa\xdb\x17\x86t\xef"
PSA.Undertale.Resources.audio_000029f2_int16_44100hz_mono = "]\x00\x00\x01\x00\xd6!\x00\x00\x00\x00\x00\x00\x00\x00\x80$<6\x86{\xf1\xaa[o\xbe\xf0)\xcc\xbc\x1fC^\x02[EQ\xb0\xe8\xc5\x05\x8a\x82\xd3s\x08\xb0\xb3J=n\xa5TCr\x93R\xea  \xe8\xe3\x87C\x04\xd7\xcb\xbf9\xefR\xf6\xe2\xf92\x93\x14U\xe5\xb1\xb1g8R\xee\x1c\x82\x11\xf7\xc3H\x89\x01\xf53i\xbc#\x11\x85\x99\xfd\xfb+\xfe\xb4\x16Sw\x18\xf7\xf8\xcc\xb94\xa6t\x124\x96\xb5\xee\x9e\xa5\xd5\x98x\x1f\xc1\x12\xd1\xa9\xf8\xa8\x03\xa1\xa6\xbbQ\xd1\xb4r\xe4'T%\x81\xab\x1eZf:k\xc1\x952WS\x90\x92\xee\xce\xa2\x9e\xe8k\x12x\xc8r\xdf\xb2&\xf8\xdc\x9f\xf4\xa7\xc4\xfbtD%\xf6tL]\xee\x19\x87\xb6Ylu\xa0{GQb\xb7(\x82\x96\x14\x01R\x83C\x19\xd2\xc65\xf0V\xd1\x1d(\xd0\x1e\x09/z\x82\x9c!\xe0\xf9^\xf0\x01\xae\x9d\x8d\x11P\x97sZ!\xbd\xce\x08\xc3\x11\xfcK\xdc\xd7\x14:\x0f\xbf(y\xb9g.\":\xf51\xff%Y8m\xf4\xe0\xdc\x94\x17E\xb1\x9b\xa4\xdd\xb6\x09%\x1a\xd1\x90]Ad\xdb\x8d\xfb\xe5\x1f\x82\xf9<I\x81\xb2v\x09\xbd\x1d\xbe\xed\xef]\xae\x80\x80\xcad\xcb8\xb1Gg\x17\xdbma\xaeI\x0f\x04\xaaa\x06H\xd4\x0ahRA\x11Se\xad\x94\x8f\xe1c_\x85\xe8\xc4\xf5EH&\xfe\x01\xe8\xa6\xc3#\xd2mC\xc6!\xd7o\x18Jp\x06\xf6\x8d\xb6\xc9[6\xb9\x83\x14\xce\xb5PE\x01\x18\xafJ\x05\xdb\xf6*\xe0\xa1\x96[b\x8ftDc\x1c>F4\x11\xfbh_\x98\xcc\\\xea\xeapJ \x93\xed%M\xb7\xac\xa06\xa5\xc4\xa3\xe5M\xf7\xda$vg\x0f\x1a\x80\xe5\x01\x0d%e\xa7*J1\xbaxd\x19\xff\xb5\xc9\x8a\x17\x93B$L\x00\xa7\xff&x\x1c\xd2\xae\x0b\xf8,2\xdd\xa6?\x1d\xdd\xe4 \xad\xd4\x13L8\x18\xc45U&'\xcfCbNE\xcd\x05\x7f\xae\xb8\x1b\xc8y\x0d\x9c\x14%\x1a/\x99[\xb9}\xac\xe9\xc5\x97y\x9a\x95\x046\x87`\xb9\x01w\xa8\xdb\xf9\xf0\xbf\x13?1|\xb6\x1c\xc1\xd9\xa9=\x89$/\xf31\xf4%\x15.\x89Vo\xa4Ti\x9b\x84\xf9$H\xba\xffUE\xc6\xbaw\x0e\x97\x0c3\xe2\x86\x0d\x8b2\xfe\xe6\xba\xc1\xe5m\xacP\x91\xf4\xa3+\xe4\xad\x9f\x1a\xe0\xaf\xd5q\xf3\xc5'\xc4\xf0\x91\"8\xb6\xc2\xc3%F\x05\xf8\xfb\xec\"3j\x89\x8a\x92wdJ\xd3\xff\\\xc5\xd2\xe6\xd5}E\xd8\x96Qys\x9c\xbee@l\x060\xe7A\xad|0\xb4ij\xf8(\xa3\xbaU\x18\x05p\xe4H%-/<\xce\xcf\x9d\x1d\xaa\x01mdz\xfb\xe5\xb46\xd4<\xe4\xa7\xd4l\x82\xa9\xcb\x05\xa4\xb4UUVS\x08\xc1 \xc9%\xa0\x8c\xffGIZ\x88$\xa18w\xcd\x8b\xd5\xd6\xd4\xe6P\x05\x81\xcd\xa2\xfa\xa3\xfe\xe3\xa3\x9c\xdb-\xcbj\xb9yv\x1c\xe6\xdc\x03\x9c\x0b\xb2\xdc/\x0b/\xbe)\x15\xae\x9f\x1b\xcd\x88y\x95%\xae\x1c\xaa\xf2\xd2\x88/\xd2\x0c\xe9_#[]\xa8\xdc5\xaa5\x02\x0dX\x1c\xa3A8\x80\x92+\x97+@\x85\"\xb0\x92\xd1?\x8b\xb1i\xf6$_c\x895u\xe8\xc1xD\xcb\x88\x11\x97\xf2\xfa\x89\x9a\xceN\x83\xfaQ\x88\xdbqb?\x80U\xcf\xc5\xa5\xdb\xe9\xd9\x8e\xf8'\x138\xb8\xca\xdb\xa4\xb1\xfa$Y\xb3I\xc9\x1d\x15\xb64\x8b\x8cg \xb0\x07Rg\x8c\x14\xb0X\x1a&\x89\xe1\x86Z\xdbh\x8c\xf7\x83\x9eC8K\xe1\xa3\xa4'\xd2,@\xf7\xb1\x07\x0e/m&\x16\xc3\xb8lvVFo5\xd2\xfa\xaa\x03F\x0b6\xd1\xd6\xe4FD\xee\x08\xc1\xb5+\xca\x19\x08\xf3\x91\xbe\xe3\xbf^\x9ey\x18\xcd\xf3\x1f\xbb\xfc\x9f\xf1e\xad8\x98\x8f\x10\xad\xe2z\xfb7]\xaft\xb5!\x9a\xf4\"\xcf\xf1\xd0\xfe\xa1>\x1c1\xc0A\x18\xd3aZ\\{OO,5V\xf1\x7f$,\x09+\xf4`\xd6>\x9bU\xe8\xc9GA5X\x13k\xee\xb7\x13\x1c\":\xf0\x95\x13\xd7\xfa\xac\x01\xa0d\xde\x95\xd3\x00\x90\xf5\x83^ )'\xaa#6\x89\x12\xcb\xcb\x1dM!0Z\xe9RL\x1a\xd6t\x82\xa7=\xb1\x05\xb3\x8e\x0b\xc4Hx\x91\xb1\xd3\x84\xabf\x0eb\xc7\x9e\xf1\x99\xe3c\x9bq\x8e\xc6M\x9f\xa0\xbe\xf97\xd6\x1e\xc5\x97c\x0cP`zw7\xbc\x18\x88\xb0\xb92\xe7D\x12\x0dM7V;\x96\xe7\xc7\x9e/\xc6\x13\x9eZ\xcb89zXg\xcd\x95{`\xe8a\x1d\x1a\xbb\xe8b(V\xdav/ \xe3\x03\x81\x8a\xa1\xaf\"\xe5%\xc1\x16\x1d\xb0\x1b-\xb5\xf3\xa4\xec\x1b2\xab*N\xbc\xc0\x0f\xc9\x14\xc7\x1f\x8a\xd91\xb6;&)\x1d7\xd3\xf6\x9d\x97=x\x88\xb0\xe3\x07eL@\x9d\xf4iB\xbf\x1e4\xf0J\xa3*.\x18r\x92\x93\x87\xe5P}\xec\xe2\xd53E\xae\\`7\xf6\xe3Z\xb3\xc4\x0d\x8a\xec\xff\x96\x8a\x03p\"I\xf0\xef\x0c\x1byk\xc0\xd2\x81.\xdf\x04n\xaa\xf9\xebd\xa1\xef\xcc6td\xc5\xa6\xd7\x90\x1c\x95\xf8\x90\xbcDsP<\xa9S\xbe\xa4\x90\xe3\xa4\x0b\xe2\xec\xfc>\x19\xf9K{\x1a\xf9\x08\x84\xfa\x1e\xcf\x99m\xddD\x16A\x84+H\xdc\xa0\xe2W\xc3\xe52\xc1\xd1\xab\xba&B\x1d\x98\x82@Y\"\x0a=\x98\xa5\x0d\xd2\x9c\xb5\x9d\x9a\xabJ\xf4l\xdf\xaf\xb5M\x14\x99i\xf4\x98g\x17(o\x96\x14\xb7\xb3\x1f\xc6\x9b\xb5\xa5{\xa6A\xca\x99\x10\x03u$\xa5\x07[\x0c\xab\xf5\x84we\xf0\x9a\xb8O\xf4@\x18b\xcaNz\x0c\x96\x81u\xa2\xa3o\xe7$\xdcqn\xd4\xf1b\xd8\xe8K\xddA\xab\x86\x08q#:\xca\x90\x99`\x09U\xdaVP\xbfou\xa7\xb3S\x8d\x99%r\xcd\x8f&\xb0\xd5\xba\xe6R}\xebc\x8c*\x07\xc8\x82\xb8S\x09\xf1i!\xa5\x1d]\xdbl\xf4T7c\x15A\x7fp)NBo\x9bP\x1eC\x9aCC\x01\x06\x12\xc1\xc8\xbcX\x12\xb9\x81\x07\xaa\xd6\xa0\xd9\x00,\x17J\xcdbFI\xd4\xd0Q\x9aW\x11\xa2\xa4A/\xbb\xcf\x80C\xe5<d\xb5\x02\xbc%\xb5\x80\x17}\x0br\xe2p\x9d\xfe.\xcf\x17\x9bt\x02\x0fuGQ+\x19CM\xb3\xb2\x1c\xf70\xc9\x93\xea0\x12\xa3\x04\x17r\xd1$\x15\xce\xf7\x8cu\xc2F\xfdx/\xd5\x82\xd30\xd5\x15 \xa9=S\x1e\xc1\xcc\xd6m.\x0b\xeex\xf7\xb0\xdc\xc2:\xdc=\x12\xb9\xd7F\x89\xaam\xda\xa5\x00\xa5\xe2Y\x9a\xf6\xa5\x08\xde\xb3\xc9>\x89\xf1\xda[q\x11\x88\x8b5\xf0:}\x94b\xe3\xb7!\xd5i\xe05F\x11t\xcf\xb14h\xf0\x88\xf2\x1e'h\xa2`3\x15\x1b\xbd\x84+k\xe6\x11\xe8\x96\x0d\xf1\xa7\x9e\x94Z\xd8|\xc1\xfe\x1a\x9f\xea\xb1p*\xf6\xd3iX!\xd8\x93N\xcb\xa3\x04\x9b\xad\xc2\x86\x11or\xbf\x86\xa7\x00\x0c\xa0\xa2:\xe5\xc2\x90\x15'\xb7\x17\x1d\x95\x86\xf9\xb9*\x80\x06\x0dq\xe6\xe8\xbdoR\xf5<\x8f\xef\\\xcd\xe0\xdci\xa3\xcedG\xb6{\xa1-r\x15\x93\x04\xaa\xf1\x15\x85\xd3z\xd7t\x15\xd8\xa6\x1aWY\xd3\xfe\xfa\xc0\xd4.\xe2\x1f\xd3\xfe\x9fs\xd8U\xc1,rd\xd1\x0d\x00\x86\xfa\xe1T\x07x\x19I\xc3\x7f\xf9x\xc2B\x93\xb7P\xd6\x93`h\x00\x16\x1b^\x14\xa2hV/\xd9\xd0\x94\x12\x13\xc2\x06\x81QF\xa69\x02\xb6\x0a\xb4\xb3\xb3= \xd2\x86C\xd6\x1b\x00\xc1\x9f\xdaq!\x9aM\xd3\xaf0=\x93\xb2\x10\xca\xba\x03x\x14\xafjk\xb0\xb0\x94\x81\x9dk\x08;;N$p\xe1\x18\xc81\x12\xef\xa6\x88\xbfp\xf7\x92\x08\x86\x81\x83\x94\x83G\xe2\x1f\xa9<\xae\xcb`j\xf8\xe4W\x92\x1c\xec\x8b\xab&\xf4\xcd\x8d\x13\x91\x19T\x11\x0e\xd2\xd3R09\x90\xb9\xa00\xdeNL\x98\xd60+\x03\xf7\xfb\xcb\xb3\xad\xc8\xace\xca\xe0V\x15\x89\x0a\xbf\x18tbR<F-\xf2\xfdM\xab\xf0:j\x02s\xfa\xc5:\xb1\xf8\x99\x05@\x0b\xcb\x7f\x99~\xa8\x08Xfx\xe75%\x8e\xb3\xba\xc8\x0f\xf1\xd3\xea3\xd2\xc9\x8d+\x0eM\xedf\xc2e\x15\x01W\x9f\x05\x80D_\xba\x90mXtA>X,\xe7\xb1\x01\xbe8\x07\xca?\xad\x1a\xdf\xd9R\x8abH\xc0D\xeaaQ\x85\xca\xee\xf8\x04\x12\xecg\xdd![\x05\xc9\xd2\xc7\x10\x1e\xbc\xdb\x8d\xfeX\x89\xd9\xcb\xeb\x8c\xe8\xc3Ey\xd6+j\xe6\xa9-LWt\xdb\xc5VC'\xb6,g\xab\xfc<\xd3\x0a\xfb8\x95\xdf\xedw\x0dq\x12\x1e\xb1\x82\xf5\xf3dq\x95\x9e\x0f\x9a\xd2\x0a\xfca\x07\x89@\xcfw\xcc\xb5\xe4\x92c\xa6\x13\x03A\xfc&\x82w\xdf\x02C7L1\xfc@\xaa\xf3l\x98\xb6\x13b\xed\xee\x8a\x97x\xd6\xff\x18&\x86@\xcd-\xfa\x9e\xf2\xf0\\\xaeB:v\xda\xa8\xf3\x06\xc8\x0c\xbf\x1c\x92\xeb[\x0e\xb2\xae\x1bi\x11\x13}\xd7!\xf5\x9c\xa0A\xd0\xf25E\x82\x12\xd2?\xc9V\x03\x8cV\xe7\x94p\xe0\xea\xefx\xe6\x0d\xc8|;\xa4.m\xdc\xf4\x85\xd5\xbd\x07\xd6l\x9d\xdf\xda\x90\x8a\x05,\xdf\xc3;\xc6\xb2NV\xcf,\x07\x1a:0_\"\xc6\xd5\xb7\xf5M\x91#\xbb\xaa\xc1Z\xb0\xa6@\xc6\xe2\xa0\x09\xe2Y\xf0i^\xe0\xd6-\xcdb\xa1\x89\x96\xdc\x9b\x08c#\x09k\xe3A\x88\x7f\x08O\x10\xca\x81\xb2\x05ls?Jr\xa9L6\xed\x1f\x8a\xf6P\\\xb66u\x92^\xa6/\xa2h\xd4\x18\xcfP\xf0\xa1\xea\x1b\xcd\x0cSS\xd2\xe4\xfdb\xc1\x1ab\xaa\xaa\x1b\xc4ze\x87\xadlW\x10=^\"\x02\x0d\x05\xe4\xe1\x04\xc8\x8d\xaf\xbesP\xdf\xe6\xbaU\xd9@\xc5\xaf\x97W\x9fwR\x80\xc3\x16.\xb6@\x8b\x9c\x0d\x9e5\xf4\xb5\xb4x\x94`\xf7N\xc3w\x81&HLc\xfaeQ\x91\x11#\xca\x0e\x1f\xe3\xc1=c\xce\xb7|\xece\xa8\xbc!@yi\xb9_\xa7\xa7l?\xc2\xee;\xb6\xc0\x02\xb8\xe7Bt\xfbLZ\xd9\xbc+\\\x87\xce\xde\xb6N\xbfj(\xe3C\x88\xb4\xe1F\xb7\x04D\x0c\x15\xa8\xa8\xe4I\xfe5\x1bg\xdeY\xee\xa2\"\x92T=\x0f\xefp?\x0d\x92\xa9\xbd\xba\x8c\xded\xa8Dedr\xfb\xa1x\xa2\x9a\x84g\xcb\x9bxA\xe9:{\xd4\xb7\xb3x2\xc0G\x94Q\xfa\xa2|\xa9\x9d\xdfQ/8\xed\x18\x7f\x88\x99.\xe1K\xda\x05e\xca\xdcFv\x1aA\x934\xcb\xe1\x8f\xcc{5_@\xf4\xdb#\x11C\xc8\xb0\xb4\x9d\x18\x0c\xb2\xcf\x81\x145\x07\xf5\x7fxl\x9a\x8ey\x7f\xb1\xe4\xb0\xb4\x1b\"\x1f\xc3\xd7N\x0c}-8\x0b\xddZ\xa0\x1d\xd6\xd8\xf8\xeef\x7fa\xad\xdd\xc9\xd0idgPg\x88\xe4\x9c\xef\x9b$\x0d\xd2\x01\xaaI|\x06\x8e\xfeF\x86\xff\xd1\xf1\xa9R'\xcf%\xa9~\xcc\x9b\x98\x81\x88\xee>\xb7\x88\xfb\xe8\xdf\xf8\x82\xb4\x86\xc5\x83\x9c9\xbbE\xc2DI<\xe8ikC\xd8_\xe6#\xce\xe3\x83\x18\xaf\xc4\xfa\xbeRp\xe8SlH\xe5\xf0\xe5f'5\xc1\xa1\xf7\xf5\x98\x1a\xe1\x1b\xd72o\x91I\x9f\xa6\xc1\xe2\xb1\x92\x0a\x0d4\x04\xcb\xad\xe7\xa8\xd1\xce\x89\x8e0\xcd\xf0\xfd\xbd[\x832\x97\xa4?<(fr\xb1\xb0\xc1:\xc3\x84\xb4m\xc3\x94\xc1\xb1\x15j\xe7\x02C!_]\xccr\x93\x13A!\x7f\x9e\xbeY\xe8\xce\xe4\xc8H\x02(\xcd\xa0\x919\xbe\xc2A\xa6D\xa9\x7fI\xe8\x99 \xaa',\xc4e}J\x15c\x0d\xf1\xe2>\x9d\x8a\xc1\x91m\x15\x0c:K[\x8a\xb8\xcb\xc9\x01\x1b0\xefE\xd6\xa3\xb9\xdf\xf1\xd3\x87\xe47<\x82\x01\xb0\x0d\xd1{\x1d\xdc\x9f\xc2uhu1\x1e\xc6/\x1f#\x89\xef\xebne\xb7/\xf6\x92\x11\xf2PP\x9e\xe8\xd3{\x15\x82=\xda\xf3L!Z\x9b\xcf\x86\xf4A k\x8f\xac\xca=4\x93\xc49\x1ao\xc4l\xa3\xd4\x0e\xc9W\xaf\xa5K\xa2\xc7 \x95\xa8M\x9b``\x9c\xc8\xcf\xaaq\x9ee\x9d\x08skG\xfaAg\xbf\xe2N\xf0a\xdc\x7f\x90\x94(\x82V\x98\xf6\xfc\xc9\x15l\xc4\xc7@\x18NJ\x99\xd4I\xcd\xfbEQ\x9bc\xd7\x85\x8f%\x160\xeb\x08\xb1\x94$3\x00/8\xae\x88\xba\xe3\xf6\xed\xbbc\xfe6\xb3\xafSD8v\xe8\xee\x9e\x9dF\xff\xd5\x86w \x92\x14\xcb\xff\x81F\x83\xcd1\x08X8hHL\xc2v\xbc \x90m\x11\x83i\x1d\x91\xf0\x01\xc2\xc2p|hK\xed\x19N\x04\x99\xc8h\xd1}1#*\x015\xe9\xbd\xbb@\x0b)\xc4\xe3l^ \xb8P\xe4\xe9U\xd7i]\xd7\xa7\xbe\xbb\xc8\x81\xab\xc5\xe3*\x9c\x7f|l\xe5\xbd\xaa|q\xe1\x05\xc8JQ\xb8\x8aQ\xea\xbd_\x0ap\xe8\xa6N*\x93iO\xee\xf0\x1b\xd7/\xebI\x87$\xd5r\xa5\xa0\xa2\x0dW *\x0e\x9e\x93{=G\xe6B>\xc8%\xa6\xc2\xc4\xcdR\x9a\xa7Q\x1e\x9b\x00h\xc9\x0e\xea\xe5>\xf2;\x1d\xd1`\x1a@T|\xc2\xfe\xd7\xd54\xc6\xaeK\xde=\xadL1\x9d/9[\x97\xe5!\xa6V\xb0\x1fC\xbc\xdfEd:\x94G\xe4\xd0s\x82\x0d\xe5\x91N\xa1M\xeb:?\x7f\x06\xe0<\x94*\x9e<\x94UW\xcc\x08\xfb\xc35\x0f\xb8\\\x02\x1fH\x17\xa4w\xd8\x98u\x89\x16\xf0\x8f\xbf\x886\xa8<pm\x80\x8c%o\x9a\x1e\xe0$<b\xaaGo\xa5\xffvJ\xd2\xca'\xd8\xd4&\xed\x80`H\xb18\x0a\xcfR\x1d\x02\xf0z\xa4\xa9@\xba\x0f\x07M\"\x84\x04\x1bjH\x94\xbe\x9e\x16\xab\x12F\xd6J\x06\x19\xf5[\xb2-\x0e\x9a\xbb\xc4\x15\x99\xcc&\xe6Q\xf2\xc9*Wm5V'\x97#\x0c\x17\xd3\x15\xa3\xc4yN~\x0d\x1ff.{\xda\xd9\x86\x95\xa01\x92\x7f\xb1\xb1\x91\xf8[\xc6\x06=\x17@\xaf\xb7\x19N\x9f\x94\x83W\x92{p\xf8{\x12p\xbc\x86|\xc1\xcf\xbb\xabc\x07\x01%\x14\x19O\xa5 \xd3\x0bA{\x0a\xefb\xdf\x87[-Ynn\xd8\xdb\xaact\x94\xb8\x99\xee\xbf<\xf4F\xbd\xfc\x84\xa4O+\x9e\xac\x05\x08\xee,\xf7\xab\x07\xeasp\xefZ\xaa\x04\xc4@8\xc2y\xbb\xf0\x06l\xc2\x8a|\xf6\x0a\xc0\x0a@\x89\xd5\xf6\xe8\xe9\xf03@\x11k\x8e\x98%\xb5\xe75r}\xaf\x95\xc9\x02\xf7\x0e\xe4M6zK\x94\xcf\xfdR\xc8\xd3\xd1\\\xc67\xe7\xdc?\xb4\xfd#\x02\xa9\xd4\xde\xf4\xdb\x1c\x9d\x13\x0a\xed\x1c\xc9\xa4\xe8\x9eK\xe1r\xa4E\xa6\xe4\xb5\xa2\x84\xdf\x8em\xd3f \xb8\xb3\xd6\xf5\x98JA\xe7\xcbM6\xc4\xfd\xd0\xfc\xe9\xdf\xb5\x84S\x0b\x9cv\xc1\x0c\xdaO\x88\x93r\xb5,\x92\x130\xdbu-1\xedHFf4\xbd2\xb0\x02\xfcD\xbd\x1a\x90\xd9(\x03\xdb\x0aF\xc5\xf9\x0d\xa4\xdd\xae^P8\xca\xfe(\x05\x8fa\x9aYj\xb6*\xb9+l\xd4\x87\x02\x7fq\"\xc2X\xfc\x1ba\x87XX\x13\x0a\xbd\xaas:\x07\xe4\xc8\xc2\xe19\xe7\x0e\x82O\xdc5\xb3\xf5\xec\x99\xf9\xaf\x90\x86\xe1\xe4\xb5\x09{\x8d\x99\xe8\x02RW6\x0b\xe3>\x7f\xce\xb4\xf00y\xef\xc1\xd7\xa5\"7\xf9\x92\xc3\x1b\xac\x87\xd1\xa8Lg\xe0iW\xf4\x98\xab\x9b\x00\x9c\x93\x95\xba\xd9\xe3\x0dX\xbb\xbc\xacE\x9a\xa1\xc8\xe9\xcf?&t\\\xc7\xa7\xb4z\xc9\xbc\xeb\x8d\x1b\x19d\xce\x90\xc5\x0f\x0b\xfb\xf0\x96\xe6\x1f$\x97\xc1\x05\xe8\xff\\F4\xf5U\xb4\xe0\xfd\xb7K\xa9O\xb4\x0a\x19\x87)\x9d\x07/\xa4Y\xa5\x88\xbc\xabV\x80kOW\xd8\x06\xe9`\xe0\x1a6Z\x85\xa5:\xf7\x17B/\xccii\xbe\x82\x8f\x15P\xdd\x9en\xf9\xcb#G\x0a\x96\x0f\x82dg!\xaf\xf7\xf6\xa4\x16[\xabM\x9f\x09\xa9\x85^\xba\xf8\xf8\xf2\x09f\x1b\"a\xfd\xa9\x9b\xc2\x19\x18\xfcH\xe2\xbb~\x14\x9b\xcd\x968\x155\xc81A\xe6x\xb6\xb8\x04\x13\xc6B!\xa7~\x9f\xd0@\xb3\xc1B\x17|oc\xad\xd9\xc2\x1e\x07\x81]x`Y\x11\xf0\x16\x8a\x18\x94_\xcf\xad\xe2\xebXd\xa9\xc0\x11\x0a]\xb8q\xd0s\x8b\xaa\x0af\xf0\x13\xfe\x1e*\x0e\xf2\x0d!f\xa23\x06\xb2\x86\x11\x80\x96\xecv\xbe\x08o/\x91#d\xa9\xd6Q\xf0\xcc{\xbe\x0a!\x1a_\x1d\x9aB~\xd7E\xaf-x\xd9\x0czj\xaf\x05|>Z\xaaP\xc1\x95\x0f\xb2\xa4\xa9\x99\x98\xf5K\xfa1!\x0d\xdd[\xe3C\x08>\x08I0@\xf8\x00\xe0_\xba\xe68\xe3\xf3\x19c\xec\x0bl\xfa\x0a\xaakS\xc1P\xc6a\x0f\x9c8Y\x0b\xe0s\xc7k\xffA3\xa4bQ/\x19\x96\x01\x05\xd1\xc4$)^\x90\xff.2y\xdf7q=U\xf2\xf1P\xab\xa9\xfcK\xd6\x1cq<A\x80\xd5\xd3\x86\"\xd5p\x85&BY\xc7\xfa\xad0\xc7]\xac)\x7f%G:\xb7-\x1b`\xb0\xd0\x8b\x8a\x10\x90:\x09\x82\x80\xb4\x89(\xc3\xf0r&\xfa\xb0\xf5\xadvP\xfb\x89\xa2'U\xe7\x8b\x9e\x0e\"\xecr\x9e#\x0fA\xe0\xf5\xe1A\x9a\xafg\xcf\xd4\xb4\xd3\x9bi~S\xba\xd1k\xddx\x8c\xbeuX\xa243\x0dp\x87\x13\x1b\x19k\xce\x88\x85a\xf5\xfe\x1c~idp ?i\x9b\xc1\xc0\x81\xcbl\x04\xd6\x0a0X\xe8\x09Y\x9b<\xd2#\x19\xdc\x7f\xc9\xac\x10\x89\x02\xfeqwYJ\xdd\x0c\x81!8\x0c\x9fotR+@\x90\x01\xdb\x9b~\xe8\xb5\xa1\xa3\xa6\x15A\x05A\xcb`?\xf5\x12\x1d\xb4\x82k$\x8a\xd2\xea\x8dEV\xe2p\xa5<o\x0f\xa3\xec\xc0$\x8ea\xb6\xb1y\xfe\xbdv\xfa;\xac\xfb\xa1\xda\xa1\x83\xc4\x85K\x920\x1fnV)OY\xf2\xe4\xc6\x15b\xfa\xa4 \xe3E\xfb\xb7\xe5u6\x9e\xd48X|~\x84k\xda\x0c\xff\x1c\xbe\x9d\xc4\x85g\xd0\xeds\xb2\x18\x86?\xa2\x8fj\xbf<r\xa4\x08\xac\xd2ZF\xe3\x08\xc6\xffg\xc3\xe3\xd1Q\xe3\xd4\xc5Iv[eV\xfb\x0cSl%O\xc9\x01\xe3s\xad\xceQy;4.\x88\xe6\xc5\xd5\x08f\x1a{\xb1Q\x9a\xa9\xe9EL~\xa3\xe5\xeb\xfd\x90\xd4\xef\xc4\xbe':^;O\xd3\xbd~\xbe~\xb1\xd3\x05L\xf9qE\x04\x89G\xf3\x7f\x0es\xa8\xdb\x95\x9e\xc2\xa2\x14du\xab\"\xb5\x13\x18\xdc\xacd\xf3\x92>:q\xadJ\xb5W\xb0\xbf>V\x900\xbd\xc0o\xf98\xb7J\x85\xa5\x97s\xb8\xb6\x02\x18\xdcI\xb4\xa1#i.j\x09\x950;\xa9\x85r,\x16!\xc9\xdf\xdf\xef7\x83\xa9\x1f5W\xb4\xac\xd8\x01\xbb\xc2'\x90f\x9f\x9du\xf3\xcb\xaa\x9dcG\x04\x9f\xbb\xc3E\x82u\x85\x96\x8e\xd0L\xd3\xb6\x98\xbf\xd2c\x89(0\xaa}R\xe9\x1b\xa5\x81+\x82\xa4\x99\xdc\x04\x97h\x99d\xf0\xe6\x82\xb9{\xde\x01!\xbaI\xbd\x8a\xb3\xd1\x8e\x82z\xbe\x17*1sn \x1drh\x1ck\x12\x98'\xa9\x01\xed\x7f\xcf\xd0;\xc5\x10\x04|\xd5\x88cp\x89\xbb\xde}fT?]O\xb4\xe0\xda\x8cMp4|b\xe3\x12\xfbxW\xbd\x8a\xa3S\xf1u'\xe1?+Dc\xa5\xd1{oN\x03\x0ee5\xda8XI\x8a\xeb8\\\xd6\x00%\xd3\x1f\xed\xc9\x0a(=\x0d\x0a\x832\x197\x86\xa5x\xdao.k\x8c\x11\xeb;\xde\xba\xae(HW\x89\xeb\x0e\xb0\x02\xe3\xd9\xd4c\xaa\xe7\xe4\x0e\xca\xd9\xeaYpY\xf9\x81=\xad<\xae\"\x14\xad\x95\x17\xd7\x9a\xcaQ\x98BX\x06r\x84\xa5)_\xc6\x8a)oR\x0d\xe6\x80\xdb\xd5|\xf6fR\x86#\xf4\xdd!n\x1c}\xa6\x18-\xdb\xf7\xbb\xc8^\xf0\xaf\xdbe\xb3F\xd7\xde*F\x89F\x06\x1d\x140\xaax^\xb2\xd6\xcaJH\x13\x94X\x86C\xe7\xa9\xc9\xda\xe8\xc2\xb0\xeep\x03=\xed\x0c:#\x07xt\xf3\x93\xddR\x97\x11\xb0\xd1\x99[<\xa5\x04\x01\xc7\x8a\xcb\xa5\xed\xcaT\xf0)U\xff\xbf~,\x0a&\xb2\x8d\x8a\xdfy\xba\xf1v\xba\x0aI<\xb1N~9\xa9\xaf\xcf\x7f\xa3\xfcHX}B\x97\x8c\x02\xb6\x8b\x00n\x02o\x1fL\xfd\xfc\xff\xab~{?.9N\xf61\xfcT\xa2\x9a/\x15\x8d\xde\xa1\x11\xb2\xce\x9e\x85\xcd\xf1\xc6\xff\xf4\x1b\x0d\x8c\x0a\x97\x9f6\xc5w\x1d\x02\x8a\xcc\x8a\x10\xfd6J6\x0bI\x92\xc3\xd9\x82U\xc8\xaa\xd1\xc77X\x86V/M\x10\xc6\xbav\xa1\xbb\xa0\x1e\x07\x98\x9f\xd4?\xb56U\xaa\xa47\xe7\xcf\x1aUd\x103\x87\xdca\x0d\xa0\xab\xdd\x0e\xb9V]\xd5\x18\xc3QG\x1dH=\xfc\xb2y\xe89\xd9_\x91\xd4Mk\xab\xe6du\xae!py?\\U`\x95{,\xd1V\x88Je\xce\x89\x00\x09\xb2=\x8d\xf3/,\x1f\xb3BQ\xa9\xda\x11\xdc\xe7\xc6D[\x1e:\x09\x93\xe6\xe7\xf4\xbe\xe9\xf5\xb3\x0dF\xb9\xa3\x973\xc13\x16\xd6\xd9\x11\x8d\xe3\xac>\x14\x81\xe1\xf7@\x00\x04I\xfa=LC\x1b@lVs6TE\x18\x9d\x96\\\x8c&\xcc7\x93\xff\xf9\xd9\xd1\x17\x01\xd2\xd8\x06\xff\x97\xf3\x91f\xf4/\x9b\xdb\x07ogB0\x18\xf6Z\xbf:\x97\x1fBao\xf5a\x8bI\xf8\xae\x05\x87\x871\xf1\xd9<K\xa0\xa5s\x9d\xbd\xe6\xecs++!\xe5\x16\xaeQ\x0d\x09\xd6*\xea)\x05j\x96j\xba#\xb5\xa3d\xfa\xf5\xe0W\xd4\xb7\x89\xa8\xe6F\xc8\x83\xaa\xfa\xd3\xfa\x12\x885\xa8\xa1\xcd\x9f\x19\x9cQ\xe4\xabQ\x80\x96\xec\x98\xae\xa3\xa0#h\xaf\xdb\xd4\x98d\xcb!\xc2\xea\xea\x94\xb5\xb0\xe2\x11f\xd6\x19\xddN\xb3F\xf4`r\xa0\xef\"\xbd\x0d\xa3\x14\xfd\xf2\xdc1\x1a9\x0d\xe6a\x817\xba3\xa3e\x00L=Q\xe1\xa7J\xaf\x91\xae\x01\x11T\xaa\xa1\xfeW\xce\xe4\xe1MX\xa7\xb3-\x9d\x0d\x03t\x1e\x96P\x93\x0c\xaf\xa4J\x88\x91p\xfdgD<BU\x95P\xceda\xdbN\x85?T\xa2\x0e\x96\xd40\xee\x9cz22\xb4>%\x11,k\xab\x7f\xd2i\xa3+6\x0eh\x94\x1d\x89>e7&\xa5i\xa3\xb4\x9a}\x8e\xccL\xe3\x8a\xd6\x88W)\x05k]\xe8x\x0b\xbdf]\xfd\x9e\x92P\xc6\xcb\xe0\\\xdc\xda6)\xd6\xaaQ\xdf\x1e\x1d)\xa9\xea\x06\xd3\xd0\xd1\xe34&\x9eB\xa2\xf0\xd7\x05\xfa\xea\x0d6\x88\x1aLMw\x8e\x83\x01\xec^&\xe0\x9b\xdd\xe3Z\xfc$\xb4\x91\xa8\xf6*\x9b;\xf6'>:\xed|\xb3\xe6X\xeb\xfaTE\xd2\x94\xe5\xd3I\xc7\x02\xaf\x1c\xf3\xfb\xfe:\xa3M\xe8\xb7\xc6\x0a\xb2\x8a\xe18C{vG\xeb\xa2\xbd\x8d\xc8\x00\xe3\xe6\x9c\xae\xd0\x88\xef\xf5\xef\x87\xd3H\xdf\xa5\xe1;[\x0e\x9bRS\xf9K8\xc9B\x13\x03\xdb\xeb=7\xac\x12Bd\xf9\x9a\xfe\xc9\xd5t\xe4\xfd`[\x10\xc6\xfd\xc6\xef\x0aF\x0c\xf1q\xb6\xcc\xc1\xe7i\xe9\x0dR\x93\x1e\xfaA\x18\xed\xad\xea%N\xdd\x05v\xdd*\xdd\xe6\x90W\x0b\xe7W\xda\xb1\xfb&0/wo\xb2\xc8\xe8\x83YAV\xd8j9v=\xff\x03\xeb$\xf2\x8d\x8aaBy\xa9%[\xb1{4f\xc7\xe6\x8c\xbb\xbal\xa5m\xd9\x93+\xbbR\xdf&C\x02w\xccq\x8b\x94\x8b@\xc8\xe7.y\xabF:`t\x96.\xcf\xadt\xba\xf6\x85-}\xa5C\x85W&fW\xccj\xc4?\x9d\xc1n\xadX\xce\x98\xf5K\xa5\xc0q \xca\x87\xf5\xaft\x00\xf5a\x00\x9f\x18\xfd\xab\xe4\x89\x0d\xe7\x99\x8f\x84\xd2\xe6@\x15\x18\x8d\xdav\xbbHj\xc4e\x13\x90\x1e,\xe5\xae\xc6\xf0\x857\xfd\x0b\x92\xe8\xc3\x0e\xf1a\xa9\x11\xa7K(R/it\xc7s\xf5H\x1b\x9c\xa2\xdf\x11)a\x82\x8ac\xefa\xe3\x10#\xdbi\xf7\x10iB\x19\xb4\x84\xf3\x8eT\xab1\xa0Ju\xa7}\xb7\xf7\x18\xf4u\xd0\xeb~\x1d\x86\xe7!8C\xe9\xca\xcb\xcf=\xc3\x02*\xff\xfd\xf7d\x96\x1a\xdaO\xcd\xe20YD\xaf9l\xf6\xeba\x03\xe2H\xa3\xaf\\\x96x@R\xb9\xfb,\x97\xd9r4\x8f\x06\xf3\x9dw\x14\xd9\xcd\xf1'\x87\x02\x10r\x0f\x06\xa3\x9d:L\xf8\xbfn\xca6\xdch\x83\x86Vf\xfcK\xdeW\x025\xe2\xfdx\xf4\xd4i\xcd\xd1\xd5\xa8\xf3\xcf\x0e\xdd\x81\x7f\x85\x89\xa7\xdb/\xec\xb3\x8au\x02\x14\x1eM\x86C\x1f\xfb\xc8\xd9\x8d\x0b\x18\x19q\x14W\x94\xf2\x10\x7f\xbcr\x05\xbc\x93^\xa7\x8b\xae\x1a\xc9\x05\xf0o\xfb\xaco\x00\xe0]\xd6s\xdc\x08\xd3\x96\xbdB\xd2\xe3\xbb\x93\xaf\xeeU\xf5\x90\xde5L\xec<\xf0\x09\xe6\xa4\x1eD\xdd\x8c(\xe6\xe2%\xbbCy\x8c\xec)\x8f\xf2\xe1w\xc5\xbb\xe3\xedE\x93O\x12vm\x0b\x84iF3?\xc0\xad\xee\xb0\xd4\xc3F\x1a3\xfa;\x05\xa5\x120\x9f\xbb\x9ck\x0e\xc4\x0fh\x93N\xa7\xb3\x8ex\xcf\x84\xf8k\xa1\xab\xd7\xd3*\xf7\x1c\x17b\x01\x9c8\xb0F\xd9j\x96\xa7[\x1d\xbaMF)\xe3\xfe5\xac\xcb\xca-B\xb4\x97\xfd~%\x07c\x98\xe5\xeb!<\x87\xce \x14\xcdZ\xcd\xe6\x9a\x89\x05\xe0\x91L-\x02q2\xd2Qs6\x90\xf5\xec\xe7i\xb1&\x0dL\xab\xab\xcfxP\xa4\x8d\xaf\xdc\x05\xf6\xe8d\xbc\xa0\xb1\x9cJi2\x9c\xf2\x0e\xdd\xc7\xa8\x05@n-=~r\xdaX\xe1\x17\x14\xed\xa1\xc8\xea\xfd\xef\xee(\xff\xc0\x0c\xf7\x14\xf3\xb5\x97\x88\xa6,23\x0bZ\x97\x0b\xd1\x0e\xb3w1\x1e\xa6%O\xd4}\xccP\x14\x17\x9f\xdd\xbc\xc4\xb4\x86\xb1Gi\xdad\x01t\xa1\x02\xed\x0e\\\xf6\xce\x81\xa3W\x152\xf9\xa7\xeb\xb0\xed&\xceW\xbb\xd6!\"9\x9c\xb7h\xbb!\xdbg\x9d\x0c\xdc$cc\xec\x8f\x03\xe6\xc4\x10Y[\xe9l&Q\x8dd\x1cQ\x8f\xb0=\x88\xda\x7f\x0b\xec\xcd\x1e\xb0\xb6\xbf\xdd7\xc2\x1b\xe9_\xceR\x83I\x1c\xe3V\xee\xf5\xb1#\x07\x13\xf90;j\xaeD\xc4\xc2%}\xde\xf1\xd7A(\xbbfG\xc9\x93\xc1\xa9\xe2\xe7\xc8U\x94f_9n\xe6\xc5F\xcd\xb8\xc35{\xb5\xb7\xe5\xc1t\x98\x82,\\\xc7^\xf6\xc4\xa0\x98!hE'\xbap'9\xd0Y3f\xd7\xb8\xffW\x14\x0fUl\x96?\x0a\x9a/;\x94B\x88\xb5\x0c\xd7 m\x88\xdfU\x8f\xa5\xcc\xcc\xc1\x0e\xba\xce\xe6\xc9\x0f\x9d\x94\xc4d\xd5\\\xe9Fg\x9f\xa2\x12(\xd9\x9c\xdbQM\xce\xb5\x11N\x09\xad\xb7PL\xfa<\x14\x95Dc\xfa?\x05\xbdM\xf1\xc93<H}\x12\x000r\x0c\x1e\xb4I\x86L?\x84\xe3\xc9`[O\x0b\xa9\xbd\xe8\x11<W_\xb6\x89O\xc3b\xfeZ\xfbX\xd5M\xa4\x00\xd5Ea\x18\x00T@\x14\"\xc4\xed\xfew\x91i\xc3\xf5(2\x0a\x90\xac7x\xab\xc0\x7f\xb3\xae\xf1h\xfd@\xfb\xe7\xc1o\x02\x068\xa6p\x95\xdb\x8ei`\x8a\xcd\xc4\xe4S@\x0f\x0a\x99j>1~\xb7\x95h\x80\xed4D|\xa0\xb6\xb6\xb6>d\x96\xebr\x03\xaam<\xac\xcc\x96k\xbfI>^f+\x92A?\x18\xcd\x14\xde\x11\xf9\xb3\x0d!\xfa5\x935\x8b\xe6i\xb2\x88\x8c\xa9us\x1bh\xccb\xbfZ#\x02\x02ae\xe0\xf6/\xe8\xb1\xf5\x9e\xa3\xee\xfc\xc5\x8a\xb6\xa7\xe7\x95\xabi\xa1\xafL\x16\x8f\xcfn\xf96\x9a\xc9\x95&\x12yI\x18\x81\xe5\x9e$\xb1D&\xf1u\x9c\xf2\xa6\x96\x1d\xf1b\x97\xce\xa7\"'\xa0\xe1\x8d\x9d\xbc\xd3\xe4uG\xf7\xc9\xa1J\xbc\x89\x8c4\xa1\xa9\x95\x984?\x9a\xcf\xaerc\xf6Unp\xc0u\xaa\xed\xe5\xa1\x1d\xf90\x98\xd4\xf5\x19\xde\x92W\xfd]\xb2\xfe\xfe\xc0\xdf\xc0\x1b\xd4k\xe5\xa7\xb1\x11\xe4\xd4\xb0;\xfe\x85g\xbb2\x0b\x92\x04\xb0\"\x82\xd7\x00\x1ec\x0bn9\x8f\xef-'\x8aoX,\x91.4E\xd3\x88\xf1\x06#\xee\x11\xf5R.\x9b\x98+\x8d\x83\xef\xf9\xa6\xf3\xe4\xae\xe0C\x02\x162N?\x92\x8e=:\xc3*@\xb3!\xe6\xcbF\x0e\xc0\xf6\\\xd7\xf8\xef\xbe\x8d1\xa6\x0b\x95\xaf(|d\x19\xa1\xbc\x15.]dZ\x91\xea]\x8b\\\x93B\xee\xe5\x9e\xe0\\\xa9\xa1K\xf7\x9a\x1e;\xb3\x8d%\xb8\x15\xbc\xbd}n5\xe9\x12v\x91\x95-8\x9a{v\x19=\xce*>\x81\x00\xb8\x8a\x19\xa5i\x0e\x83f\xc2J\xd3\xe7\xfe\xc8\xb3x\xcc\xfc0`\xed\xb4\xc0c\x8b\xbb\x0b\x11\xdd\xc0!\x88:\x07\xa7\xfc\x12\xc1\x9d\"\xc7\x8a\xa8\xa6\xd1\xc1\xb8wP\xcfY\xf2\xaf&9\x1b\x07\x1d\x01\x18\xaf6@\x84\xe6\xb6\xad\xa3\x8b~J0\x7f\xafU\x01\x15\xf3;2W]\x18\xdce\x8c\x9e\x18\x142\xdb\xb8\x8a\xba\xcd\x88\xaf;\xf3\xb3\x88\xea\x8a\x04\xd9\xa7Z\xbb\xba\xd9\xfc\x86\x94\xd7U\xdb\xf9\x81C:\x1a\xe1\xd9\xc5\xc6\x92C"
PSA.Undertale.Resources.audio_000029f3_int16_44100hz_mono = "]\x00\x00\x01\x00\xb0\x1b\x00\x00\x00\x00\x00\x00\x00\x00h\xbd\xfc\xf040:\xe9\xa0?\xbdg\x84\x99\xd3\xc9\xcd\xa4\x83\x0b\x17\xa8\xa7\x87lmm\xf2>+\xd3Y\x09\x94e\x1d\xa4\x0aFX>mtP\xf6\xd5\x81\x87\xca\xd5n\xc5\xa4\xa9\x8a\xdfN5\xef)^\x9e\xe0W]\x80\xfd\xe0a\xed\xf4\xe7\xc2\xf1\x86\xdd\x16\x92q\xd4\xfcz\x80\xe0w\x87\x91\xde`\x16\x91\xde\xcc\xc8\x11$\xdc\x91\x14\xb43\x80\xda\x1b?\xaeQ\x1fY\xb6\xc1[{\x8b\xd0\x14\xd0C\xb2\x14\x19\x08\xe2\xe9i\x01\x10\x04\xb1\xb36\"\x92J\xce\x10\xee\xe5\xa6\x13\x00\xf7:d\x02\xf4\xdaW\x8c\x11=RO\x0dh\xb6\xae \x8c\x91\xee\xd1\xd5\x98\xb0\x87\x16\x93\x9d%L\x04\x91\x0ff\xdd\x18t\xbda\xa9\xfe\x8c\x92\xfeu^\xc8#\x1aA\x11\x81W\x07\x1f\xfa\xcb\xd0\xd1\xc7\x08\xa8\xbc\xc2\x82\x02\x0a\xd4\x0f\xb7zp\x0f\x1cs\x1b]\x1f4@\\\x04\x15\x99 :Gni\xc4\xe3H\xac\x7f\xf5\x12\x1b[s\xbfI\xd1\xa7S%\xe9\xe5\x0a\x8b\x88\xb8 \x13\xb5'^\xd6\x92F\xc1\x00F\xa4\x0d\xa3\xf7\xc4\x9c5\xbf\xf8\x07\x9c\x04(h\xe7k\x10<\x95\xc4\xcb\x18\x0b\xff\x8c\x0d@\x92\xbf\x96([\x15\xb7\xfa\xd0f-$yb\xee\xc5\xd2\x96\xaa\x92\xa6\xd1\xc7q\x7fM\xa0s\x96t$\x0d-a\x05m\xec\x9a\x17\xaalu\xc0\xce\xf0\xb0\xe1;\x8f\xa3\xaf\xedN\x8cV1\x90\xe4\xee\x1c\xea\x8f\xf3\xbf\xe2W-\xe5\xae)\x8f\xd5D\x9e{\xbf^3\xbc\x1c/)e\xd7:\xcf\xc7\xd5\x0b\x11\xd4\x9c\xa6\xcf\xbf@\xeb\xfdJ\xcb\xf6,\xb0\x02\x85*)K\x9b\xccef\xde\x8c\xdf]\xd4\x9d8\xc0\x18\xe7\x0f\xfb\xb1\xcd\x8c\x80\x07\xc8\xe97\x0b)\xd9\xe9<\xa3&\xc2\x91\xe4F0\xbe\xe1\x07\xc9\x90C\xa37\xf7\x88,\xe0\xa7\xce\x12\xf8\xc2\xb1\xa2\xbf\xe5\xbb\x85^\xc2\x0c\xa3\x96\xb2C\x90\xa2\xdc\xa1\xce\xcd\xf8\x8a\xc9\xa0\xc3_\xaf\xb8\x99\xc7\xfa}\xa4Z\xe2\xb0\x10-\x86\x18\x0a\xba\xc2:C%\xbd7\x01\x03\x0cvn\x9c\xb7`\x13ghrF\x1fT\x7f\xdbq\xa2\x14\xb5\xcc\xb1\xfa\xd5E\xb5\xa1\x98\xe2\xa7\x10$\xc7\x8be\xef\xd8HB\xf4\x97W\x83\xb4B\x00\xbb3\x10\xc3\x90\"\x9f\xf0u\xd0\x9der\xcf\xba0\xf1S^~&\xb4\x9fv\x06|\xc6\x95\xfe\x11N\xca\xc5\x18unp\xaf\x1b\x93J\x1e\xa0\xb5\x97\x81w\x9a\xc4=\xce!P\xf2\x98\xf0f\x95\x9a\x88\x84#\x19\xa1\xf9\\\x15\xcf\xc7\x8e\xf7\xdc\x02\xe5\xef\x95\xda.\xd0T\x9f}\xf8\xa9`!\xc7\xb3\x05l\x0d\xfbN\xfa\xac\xb1_\xc6\xbf\x01\xaeK\x1fP\xbf\xb7#0\x87\xf9\x01\x1e\xfe\xed\xbb\xd4\x1e\xc5\xb1\xf7\x11\xf2\x03\x81fc\x0a\xd5<\xb8?\x80\xe2\xa0\x18$\xae8\x82}\x03\x97\xbc\x0b3\xae\xffi\xf3p\xa3\x1e\x88\xc6\x1d;6,\xfb\xb0\xb3\xae)`\xcc\xdf\x7f\x9d\x89\xd7\xf6\xa5;\xa9\xd7\x82\xe1T\xa4]N\xc0\xab\xfbaqE\xca^\xaf4P\xde\xff\xa2\x81\xb0\x17\xe0\x14\x1a\xf0\x93GdI\xf6\xc7\xa8\x93\x8dI\x86\xa9\x88\xc1\x96\xed\xf3\x9a\xbb\xe5\xb4n\x99\xe7m\\\xe72\x9a`@\x8b\xfav\x9e\xf1y%\x94\xe6\x81K\xc6+9\xd3*q\xc6\xb0\xea\x8cG\xc8\xc2\xe1h\x08\x00\xce\x13\xe8h\xdcK\x0a\xd6\x18B+\xe1\x85}\xe8\x96=\x9d<\xadv=b\xe6$\xed\x95\xbaX\x1cD\x94X\x0c\xc5a.\xf8\xe8\xcbB\x10\xec\xb0U\xa9K\xd9\xe4\x8e\x06y1,\x1a\xb1\x0d\xc2\xe3\xa4\xc4\x1d\x80\xd4\xbf\x1d\x90G\xb0\xcd\x8f\xef\x8d\xf6\x9d\x19\x02\xef\x186\xe6\xe2i\xa4Y\xfdP\xd7\xa1\xe4\xa5\xb5\x88 a\x17f>?L\x13\xf9\x96\\\x1bX\xd8]\xea\x85\xfb\x0f\x1e\xe8\x1df\xa2w\xba\xc7M\x05y\x9b\xe7b\xf61\xbb\xa0f\xd25c~\xad\x04\x81/\xae\x09\x8aM\xd1\xb5\xa2\xc0o\xa2b\x18\xec\x92|\xf8\x9f8t\xcdu\xf8\xc7\x0eX\x9a\x12\x14\xb0\x13\x1c\x1d{\x8a=nB\xe7\x81\x80\xf5\xd1\x89\xa9\xbb\x9b\x10@\xc1\x92{\x9eb\xf4\xb3\xf9\xc8<\x18\x0b\x95\x14\xc7\xcd\xb0\x04v{\x93_O\xd7~\x88\xa4\x95x\x82\xa2|\x81|\x11c;|Y\xe2\xc0\xc0t\x10\xe1Z\xdf\xec:\xc9\xbc\x1c7%\xefl\x1e/\\gOt\xd5\xfd\xcd\x86\xb6U\x1011\xf3V\xbf\xa4\xbfc'\xd1\xd1\xcd\x9f\x09\x01+\x15^\xf2FR\x89\xa1|\xd6\xbe\xd9?\x08;\xe8\xb81\xfb\xcdO\xc0\xf6\xc3\xd1\x83}WL%,\xfd\x11\x9c\xd5\xda\xf3\x15L\x05\x03r\x07`\xfa\xd4\xca\xe1!\xa3\xbc\xd1cg\xb0\xce\xedS\x8d\xe6\x7fM\xb3\\\xbbAW\xb0|\xf0\x82\xfb\xf4\x1el\xe4X\xc9e\xedU\xb4\x087/\xa4\x06\xceZ\xc4\xfal\x05\x06\xa4\xd2\xc2b\xfb\xcb\xe6\x1a\xe4j\x14=\x88\x8c\xf2\xd8|\xc0\xf9\x946\x01\xc0\xa2\xa5K\x9d\xe6\x08\xd2S\xe7\x95\xbd\x98^\xf7\xb7*\xf0r\xf1\x94\x9a\"KU\xd7A\x93\x91\xcc\x83\xec\x0e\xe0SkbX(\x13B\x13i^\xb7\xeeST\xa9\x8f\xf2:[\x98\xcey(\x12\x1e\xddm\xfb\xa6xx\xa9$Q\xb2V\x86\x89Y\xbd\x85}\x80\xb7\xe1\xe6U\x0d\xeb\x02|5\xb1\x9a\xe0\x07/\x04\xeec5\x06T\xc8\xb7+\xab9\xf3\xd4\x82\xd5\xc5\xd1'P\xc2\xeew\xcf\xcf\xd63\x13\xf2\x00\x97\xed\xb53\x87\xc4\x15?\xa3\xbc\x956\xc4\xe6\xc1\xc9\xa2\xa5\x9f\x0b\xbaz4\xbdd\xd9\x8f\x91\xfe}1\xa2\xda]Q\x1c_\xa8Q\xe6\x80\x82^\xfb\x11k\x9bd\xeba\xf4`\x18\xc8kb~\xe9\x12\xb6rz\xfc2\x95\xd1\xaf}sw\xca\x99Y\xf9\x06|\x98r\xe1\xffFW\xb2\xe9\xfc\x086\x94\xc1p|`\x8a0*4\xa8\xb3\xe4RoS\x82\xea\xae\xf7\x15\xa0\xc5\x1e\xed\xa7\x9e\xa0\\W$\x9d\x1b\x93^K\xa2\x9f\x1f)*.\xf7\xea\x91K;F\xb0\xf7~\xb4v\x8f\xdf\x886_\xa8\xe6y{\\,\xfe=\x82\x18o\x1c\x9f\x99*\x92&\xb7\xd9'\xa0\xc9\xddt\xb85\xfe\xbb\x15\x87\x00c5\xfb\xf7c\xd2>\xe52\xa8hQ\x05\x88\xd1\xd9.]\x87\xa0<z\x07\xd6\xa7\x05\xf9=~\xa8\xf4\x98[S\xcfK\x9dw&\xcb\x9f\xf7\xd7\x1bG\xb5\xc6mX+\x80[\xfe\x9d\xee\xe0\xff.\x93\x0f,\xb6 \xcd\xab\xe0k\xa3\\\x04\xec\"\xef\xe2\xf8\xe8\xb3\x0e|}\xf84\xe2i]\xb1\xe1\xae\x9a\xc4\x98m\x93\xef\xdd\xf8\xe4\x9ao\xec\x07\x94pYE+O\xd7o\x88\xa1\xfa7j;F\xa2\x14S#\xd2\x05\x80$\xcdh\x14*\xeaNY3\xa8\x96\\\xc4f!\x12\xb6g7\x15\x9b\xf02\x9a\xde\xbb\xec\x12\x15\x03\xe3\x99\xad^D\x8e3\xeedj\xbf\xc9\x1c\x96&[\xffV\xc4\xa4\xb5i\x1c\xa1\x88\xaeY\x87Xmq\x80\xd3In\xc8\x02\xe2\xc8~{Go\x93 \xfc\x09d[\xc3\xb5\xe7\xfd\xbbYp_\x11\x7f\xf3\xd9\x08\x02\xdf\xce@i\xfa\xf7\xc7,\x02\xcd\x0f\xa0\xc75'\xd0\xb3\x04m\xb8\xd0\xb7\x99\xb9/\x00\x04\xd9\x16T-\xd6\xcf\xb2*\xbf\xc8-\xed\x13\xa3sJ\x0dT\x87\x89\xfb{\xf3J)\x09\x9fbB\xc1M\x9c~\xc4\x14\x0a\x16PP{\x14T\xe5\xe0\xa9\x01~\x8cu\x18\x93UI\xfdD|\x05\xe3X\xa7b\x09\x81z\x0dw\x0e\x9fs\xa7c\xbe\xa7\x85\x1c\xd5\xbc\xdfNF\x0f\"%\xd8\xf0\x8f\xdcs\xa2\x93>\xd7k\xdf\xf9/^z\\\xd7\xbd\xae\x0c<\xbb\x94\xbdKQ?F\x03\x13\xff\x84\xce\xa1<JW|\x07\xe7\x9f\x01\xea\x99n\x07\xc1S-\x9b\x97NI.{\xb6\x97\x0a`Y x\x89\xb3\x9c\xe6\xe0<\xbd\x97\xe7)!\x93x4\xf7\xc8\xe3\xb2J_^f\xfe\x8c\xcb8\xf0A\xabI\"p\x15\xed\xd4\x9e\x11\xfd\x83\xb3\xc3\xbb\x12Up9\xc4p\xbbE\xf9<\x8d\xca=E\xf1\xd0!]\xf3\x8c\xf4\x98s\xaf\xb9\x09\x1a\x1d\xb5\xfe\x8d\xf3\xde-Ep\xaa@\x1d\xe7<\xeau\xeft\xfd+\x8a\xb3i.X\xc1\xb3\xea+\xde\x88~\xbc\x1d\xf7\xa0\xd8\xb4\xb4\xca\xf4_\xd1\xd1z\x18\xc5*\xf6\x83\x96W\x1cu\xbc\xb6\xfc:Z\x03\xbe\xcc\xb7\xf6\xb2hr\xf9U\xcfG\xc7\x89\x1a\xe93\xcc\"n\xac\x9a\xb7:\x98)\xd3\xc0#!\x10\x0fw\xcd\xcc\x1a\xb9\xee\xa6O\x15\xbd\x0c\x05\xf6\xf4+\x9b\x8b\x17\xd3I\x97\xc0\x08\x18m\x836\x80\x1f\x9e\x86a\xec\x9fC\xad\x8c4\x87*\xf1\x05\xc7\xa3^\x0c7\x14\x1d\x15\xb5\xe2,\xaf\xcbkU5\x01+\xa6\xb2(\xb7\xeeq@R\x05\xe7n\xd5\xa7\xf8\xb0\x14\xbeE\xf8\x96\xfb+\xfa\xf4\xe7\x0eBY\xf8\x18\xaf\x04FL}P\xcb\x95\x8a\x0du\xc8\xf5\x03jM\x97Ni\xcdK\x98\x9a\xab{634?\xcbA\x13\x9e\x8e?:\x12\xecn\xc0\xf2\x95\x06{\xf4K\x19\x0e\xe2\x15\xd9\xd2P\xdeg\x11,<\xf0\xea\xa0\xccBxC\xc6kM\x06\xefa\xaa#\x1e\x0a1\xbbL\xd5\xf7\x8bs\xeeH\x95\xdf\x97j\xe3J?\x98\x93\xde\xf6\x81\x0cR\xc8@,i\xd5_\xb9hX\xf7/\xf273y\xb88U\"e\xae\xb4\xdeh(\x043\xa3vuX\x0f\xec\x9e\x0c\x0d\xa4\x0d\x8a\x8c\x03y\xf5\xe93CW~\xa3\xaa\xd0KV\x18\xfa\x94\x09\x0fyo\xeb*,?C\x08I)\xad$\xc7g\xd4\x15\x90H;\xa7\xc2\xdc\x9e\xf6\x06\xebM\x84\x8fs\xcd\xeb\x0dC\xcd\x15]\xcb\xacv\x1f\x97j\x9eK)\xa7n\x06\xd7S\xc9\x97\x13\x95\xed}\xec\xb7\x0ac\x9dqd\x9e\xd2\xc0\xec\x04\x8a##8#\x94\x9e\xfc\xc2\xe6\x11\x17\x07\xd3\xc2|k\x07.\xec\x18R\x1d\xe4\xba\xd6\xf5\x86\x8d_\xae\xc9`z~\xa8\xaas\x08\xd0\x17T\x0b\x0f%\x1bg\xc6o\x9c\xb9\xa0\xa68&\xc8\xbb\x00\xd2\xd1\xde\xf98\xa9\xd6\x0f\xc3`\xfa\x85\xfetW^\xe5\xc2\x1cRcbc\xb8h\x0e\xcenn6T_\xb2Q\xe7\xd5\xff\xacz\x0e?+\x0eJ1\xb1\x9f(\xd8\xd1zo@\xc6'\x934R\xac\x9f#\x95\xce\xe9Z\\\xdck\x92i%\xd0=-\xff] i\x0cu-\xb1\x81\xc6@E3J\x9c\xbd_qn&\xac\xe8\x89\xc3\xce\xdd\xee\xf1\x7fuX\xbd\xd8\x87\\\xb5\x82\xfc\x1f\x02\xc8\x95\x0aJ\x02\x06f\x8c\xaa\xbbJ\xb7\xfeHk\xeeIQ\x8e\xef_\x0f\xa0\xbbm!\xbb\xbc$\xf1=\xcc\x98\xa4M^z-\xf8h\xe5\\\xaa\xc8m\xa1\x89Z\xec\x01\xaa#)\xfd\xc4\x09\xeb\xd9(\xa2y|\x9a\x02\xebL0\x04]%Y\xceB\x9fU\x8d\x09\xbcp$\xdb\xac\x8f\xad\x85\xdb\xf2\xf4\xbf\x0e\xff\xe1\xb2x=\xcf\x0d\xaa\xa9\x19\xb0f\x1d\xa3\x14\xbf\xcc\xcb\xf4~\xc4s&~\x8e\xa7\x1e\xfc\xf7\x9d\xee\xe8\xa6\x14$\xf6wm-\x1f\xb4Z\x19k\x1b\x81l\x80\x85\x8f\xdaV\xcc=\xa6\xf4\xe7\xb4>_\\\xf3\x81\xcd]e\xc09\x8aC\x81\x111g\x0d\x0a\x0e\xfaR\xd9\xde3eQ\xc5\xbe\xb8\xd6y\x95\xfaTl\xde\x18C\xb2\xa3.;\x91\xbf\xa2!\xdc\xc4\x02\x8fU\x8b\xd6x.F5g\xf0\xe5\x0a&\xda-5\x1e\xbb\xdb\"\xff64\x91\x19\xb0g\xe3\x92\"\x00;r*\xaaJ\xf6\x0b6\x15=\xbf-\x00k\x9c\xdd\x8c}\x16\xc7\xe7\xa5\xe1\x0e\x85\x1ad\xd9\xd6\xf5D\xb5 `\xcd\xa1S\xf2wU2K\"\x11S\x15\xee\xc7\xaa \xda\x08\xd3\x853\xd9Q\xbd\x08\x9e\xdd(i\xe1]\xf4\x15T\x8e\x14\x0aE_\xbe\xe40>\xb1\xd0\x81\x1a\xebz\xea`\x943Z~\x0a\xb5h\xf9R\xb0\xa2Rd\xdf&\xcc\x1a\x99~K\x12\x9d}\xb7\xfcYO8K\xa7R\xe2\xeb\xa7\x9aD9\x1cGp\xab;\x7f1\x8b\xd1\xcd6$;\xf6S\xe0I\xc8\xe3\xeb\x039d\x1d?\x97\x8b\xf3\x06\x93c\xd0\xb1d\xd93\x82\xcc\xb7b\x03k\x8eE\xe3\xde\x17\xdb\x8e\xa8 \x1d\x8e}\xf8\xb5\xda|\xb9\xfa\xc9\xdd\xfd\xc3\xbd\x0b\xd1{B\xb9\xc6#\xfc\x9e\xa0\xa11\xd6\xeds\xcc>\xd3\xe83\x0b\xed\xb1\x1a\"\x8an\x92\x16y\xf3c\x9fs\x02\x92\xa1\xf7\xb4\xf5\xf6\x8a;\x1a\x1cT\x9e\x8d7\xd2\xe4\x1a\xe4+\x1f\x9b\xe9Hk\"pW\xe9\xa3O\x916e\xedR\x0d\xec\xfe\x05Qp\x89\xc3fF\xff\x90\xbfn\x8c\xfa\x9c\xf0\x7f\xf1e\xf2\xcd\x98\xdfi\xf4\xaeJ\x8f\xef\xd0\xc00L~U\xb6\xcd\xdc\x0d!\xc9K\x02\x7f\xab\xb50\xd4\x92!Y\xabj+\x8e!C\x07\xcf\x08d(\xb4w\x8cyP\x80\xa0\x06\xaa\x81\x86\xa7\x1f\x1ai,n\xb5\xbd\xcc\xd7{E\x85\xb4F\xd00\xbb2\xaa /0\xc3\x95\x94\xb3\x0e\xe0\x16\xbc\x05\x84\xcemO\x0a\xbd\x96.\xc1\x80\xc3\xfc\xa0\x98\xb2\xb1\xd4\xc7\x91\xfd\x82\x8aUK\xff\xb8n4\xf7\x10j}=~5\xd0\xe5\xcf\x11\x09\xa5\xf9\x02\xa5)\xb6H\xa1?\xd3p\xf0\x1d~\xe0\x11w\x0c\x168\x08\xcf:\xbfA\xa2\xd0r0\xf6\xbd\x1c+@\x94Y\xcb\x13\xca\x90Y\x9c\xfc\xcb\xd6\x17\xde\xf2qN\x18\xb2\x0b_\xb1\xd9b\x1e\xddwfR\x0c\xdarX\x0e\x9b\x83D\x9f\xe9k\xb3\x97$\x0f,\xf12\xf3x\xc4\xd9\x0d\xbf\x97Y\x19\x85\x95\xd3\x0aTzL_\xaa\xd7\xd0^\xb8\xcfn\x1f\xb0\x99\xdd\xfd\xe7\xf4+<\xc3%H\xbdxk`/L\xe0\x17\x1d\x12\xbbP\xb1\xe3\xf7\x17\xdc\x0e\x0c\xdc\xba\xc9\xf1\xf8\x97t\xb2\xb6\xa8\xfbX\xf5xY\x89\xa3\xc6\xba\xd7\xef\xee\xad\x92\xb0\xa4]3\xbabc\xdb\xb2\xea\x1b\xe6\xd0\xaf\xbf\xd9q&)\x02*.n\x86\\0V\x1d\xba\xcf\x102\x87\xe3\xa9\x0a\x07\xd3\xc2\x13\xdd\xc5\xc6\x16\x1d\xd43\xe1\x97\xcaFZ\xe8\x1b\x82\xb8\xef\x05\xc8&wQ\x0f\x88[<\xb2K|\xa3\x0a\xe3@\xd9_6&V\x12E\xb8W\x0cv\x9a4oT\xde\x90\xceW\x02\xa2\xffU\x13\xfc\x84\xa0iD?\xdb^\x198C\xffU\x08E\xd1\x1c\x11\x9b\xdb\xf5&\xaa\x07\x0c\xc2@\xec\x94\xd1\xedz\xb6\xc8\x84KM\x97tL\xc9\x8a\xaa\xcd.\x8c\xc2\xef*h]\x97r\x9e\x053uj|\xc3\xfd$C\x1cz\x04\xd2\xd9$\xd6\xc7i\xe6\xc2k\xf7\x81\xa8E\xce\xc5\x1a.%\xca\xc4UXYJ\xd2\x02\xfa\x0a\xb6\x1e\x0a\x91\x1c\xf9K\x19Q)Y6C\x98\x8a\xb5\xf6\x86\x04k\xb9\x01\xc5\xe3\x04\xfd\x92\x1d\xf8e\xe3\xeeWH\x07\xecX1u\x8d\xcb\xa3\x0a\xc4I\xa4\xbe\xca\xc4\xe7\xc4\x08\xf9`Q\x9e<\xd8]\xbd\xf33\xddK\x1c\xaa\\4}\xbe\x8a\xd6a\x8f<\xa8\xc4\xd1\x8f\xb4L\xe7\xf4X\xdd\x02\xbbiT\x13T\xba\xb9\xf3Etc!5\xc5\x7f\xcf\xbb\"q\xffD\xcfB\x07\xd4\"\xa7\xae\xb8\xaf\x1c\x0e\x09U6\x0b\xe1x\xb5\x8c\x96\x85\x043M\x86\x13\x9a\x1eJ\xecG\xcei\xeb\x80\x9e\x9e\xe5\xa8\xa1?\x85\xae\xda\xc7H\xa9\xbb\x9f\x08\x07\xde\xf52\x19\xd6\xafR/\xde\xa8\xa4\x93\xdf\x9e\x1d\xd5\x9c\xbd\xe7g\x00@~\xf4\xec}\xb8O\x18\xcb\xed\x19d\xb7\xe4\xa2\x96\xe1y\xf7\xcb@\x00D\xee\x86\xcb\xdb\xf1\xf0\xaa\xa6.\x16\x14}\x935\xb8\x8f\xb0\x18$N\xab\xe6/8\xd5\x96\x8es\xe9\x0f\xd2\x01\xe1\x14\x85\x13\xcd\xfd\x08\x10\xf9\x15\x84O\xc8\x04\xcd7\x81\xa7\xb3\xdb-\x87{\xe8\xe8\xa0L9\xebH\xd3(l\x14<\xc1\xbb\xf7\x17\xb3\x84\x9c\xd8r\xbb\x07)\xe4\x0a\"N!\xf1\xcb\x8dWn\x0e\xa4\x04\xef~\xedk{>\xd8\xf1\xe3\x89\xea\xae\x9c c\xd9\x18c\xf6\xd2\x00X\xac\x97\xd3\xda\xeb\xe9\xa2%\x9b\xa7\x88\xad\xa6\xaa\xe1\x95\xb9;7\xbc[)\x05\xd0\x81\x93\xa1\xae\xa6\xf9\"\x1b\"\xbe\xe3\x1b\xe1\xe2\xcf1\xf3\xb0X\xab?Q\xfft\xab\xa9@)\x8c\xaag\x1d\x11\x10\xbbiN\x88\x9f\x08\x0an\xdb\x1d\x82\x1f2\xc7\x1b\xd2Ra\x85\xf7K\xd4\xe0\xc5\x1cwn\xfc<+<\x11\xd7\xbf\x8d\xda\xc1W\x00|\xa5\x99\x0f \x862Dn6\xc4\x17\x9dI!N\x06s\x1aJ\x14\xe5$Q\xd7\xb9h\x9c\x00\x91n\x0av\xbe\x8dl\xda{o\xaa\xd0\xac\x04\xed%\x9a\xf9\xae\xf1X\xedl\xbd\xbaDR\x86\x01R\xac\xec\xce;\xab8 \x86\x9ag\x0f\xecr\x95\xe2\x92w\x14\xdc5\xc4LV\xb9\xa2\x1e\xf56\x8e\x06\xf3z\xbb+Y\x1e>~.>\xa45\xa0q\xfe6\xe1\xc1\xd6\x8b\x98\xc4\xa6\xbe\xea\xb1\xd8L#\xb6\x10\x11\x1c<\x87K\xfb\x00\x15\xfc\xde\x07\x95\x96l\xcb\x86-\x95(\x14\x1ad\xd6\xa2\xbd&eF\x142gfSq\x19\xde\xf1\x8b\xd1\x8ez\xd1 :\x89d\x1e\x0b\"\x98\x9f\x0aA\x03'H0\x14\xd2\xa5~\x98;\xea\xf3e\xd5\xaf\x1eJ\x96~\xa79I\x99\x0c\x05\xed\xcb\xf5\xd4\x8b\x96k\xfee\x815\xb4\xf3\xfdS\x0ag\xebX\xde\xad\xa7+\x18+\x9ce\xda\xf3\xbff\xa1\x02\xdd\xace\x16?\xb7\xd1\xd9\xd0+\xe8XD\xe1\xe7\x96\x8f@\xf9\x10\xd2\x05]\xcc\x90T\xf1\xa5\x90\x9e\xd7\x91\xd4*B5JB\x89-8aw\xe7\xc7\x8e\xe39\xfast\xeaD5\xa8u\x80%R=\x847\xd8b\xd2|Z\x9f\xd9\xba?B\xb0\x97\xc7\x84\xbe\x84\x09Z\x92\xaeWH.\x03\x02/\x0f\x15\xc6g\x0b\x00\xd4\xea\x11\xfb\"_\x1d7\xe2\xf6\x11j\x8d\xe0\xb1\x80Mn\x16\x91\x82\xf9\x05e\xa7\x9d\xda\x98=\x10\x11\xf6\x0c\xcd\x0dG |O\x13\x97\xe5\xc6\xb8\x86\x13\\e\xc0.\x90\xe1\xd29\xf3>p\xc5\x892\x0a^\xdb\xb2\xc5^\xdf21\xd1M@Ca\x07/\xbar8\xdbw\x8a\xae\xaf\x17*\xe1;3\x0fB]k0J\x9b\x8c\xf7\x8f\xd1\x06\xcc\x91\xaac}\xe9\xc3>F\x83l\xa7\x1bl6x\x89\xcc\xbe\xca\xf6xq\x01\x83\xea\x04\x14CF\xd3\x13\x94([\x0d\xe5\x8d\x98\xa8\xfbp\x8e\xcb\xb4\x838L\x17\xf8\x987f\xc1\xfe}\x11\xc6cu\xa4o\xe2\xcf\xa9\x07\x84:\x8e\xdc\x88\xc2\x01\xfb@Wq`^e\xaf\xf3\x8f\x89@\xd2\x92\x96\xc1\xe4\x1c\xe7\x80\xfc\x19\xef@\x11\x9d\x9e\x0d>,\x17\xc7\xfa\xb6\xf6\xb5W\xf1q9y\xaf<\xdf\x11\x18\x8b\xc9X\xdc\\\x02s\xaa\xdd\xa3\x89\x07N0\x01\xd9\xc8\x0e+\xe4a\xcf\x8a\xcd\xb6\x88\x0e\x9f\xfa\xed\xa7s3\x19\xb7I\xe7\x0d`TWqAc^\x1b\xe4hO\xd5:ph\xb0M\x89\x8cV\x0d\x7f\xbe0\xf4c\x15Ra \x85{\x19\xb0'\xbf'\x9e\x9ezl8\x91\xa9\xd2s4X\x9e\x03I\xbd\xed<D9\x01\xec\x81\xb0\xb0VJ\x0f#\xca\xcdX\"\x1a\x0c|$\xc4Vem\xe3\xe07;N\xdd#\xa6e jt\xf5&V/\x1f\x89\x01\xf8$\xa2M\xd7\x15/\x85\xf9\xad\x8dct~:[G\xf35\xa9\x0ac\xb2\xd4\x9a\xc0&\x08\xd4\xaf\xaa&\xef\x95\xd9,\xdbn\x03\xa6\xc2\x90)U\xd9\x12\x86\x9a\x0c\xd6\xbd\xedI\x89+\xb4\xd9\x90M\x16v\x80\x97{\xe4\xfb\x1ex\x9db8-cJv\x01\xd7\xfcL=\x04a\xfa\x8d\xffu\xcb\xd6\xf6k\xf0\xe2\xa2kF\x86]\xabg\x1a\xa3\xe5\xb7N\x00\xec\xe5N\x99R\x0d'B\xfa*\x99\x91\xa6\x11\xf9\xbb{\x8f\x91VN`ufW\x08\xa4\xb5\xde\xace\xc5D\xfaqS{\x92\xb8\xc1Y\x7f\xab\xe8\xc9\xca.A\x05}\xed\xa2$G\x80@\x16\xb9\xac\xd0\\Y9\xeb7\xde\xc9H\x0d\x88\xde\x15{+\xf5/\x83\x96|Y\xd5W~=\x15I\x07,\x99W\x18K\xfd5S\x8c\x1f\xa7]h\xc78\x8f\x9c\x99\x15E\"U{\xe0\xeb\x86\xda\xd1*-\xa8\x89\x94W4\x18n\xac\xb7\x16:\xf5\xaf\xa8\x85y\xde%1=c\xc5\xc4\x86\x15\xe8\xdc\x10P\xac\xed\xfe\xd3(\x8c2\x09\x13ZXg\x87\x8b\\\x99\xbae\xa5\x1egw\xb8\xca>\x88\xc8xc\xb1+>~\x02*\xaf\xa2\xfd4\xae\xd6F\xc7\xe53\x05\x7f\xc7\xa3\x1d\x836,m\x1d\xc2^\x8e\xa3G\x03\"%>n<hw\x8d+\xee\xc4\xa0!\"\xf2,*C\xed\xf8\xaf\xfe&\xd9\xd7\xebQJ\xe1\x8b\x1bp\x86b\xa5{t\xfdG52~T\xb3U\x91\x18\xe6a\x03_\xd4o5\x00Q\x9c\x80\x0a\xc7\x0aE+\x7f\xd6\x91\xfc$\xaer\xdd\xe4\xce]\xf9\x18\xd2R!m\x81L\"\xf6E\x1e\xbdP\xe0=\xaef\x7f\xf2\xb9\x14\xa0\x16\x98\xfc<h_7\x00\x82\x92a\x7f\x9c\x1f\x06\x9e\x1b\xa5~\xc8\x8d\x1e\xab\xa2\\\xd0\xe1TQS\xc3[W\x853\xb4O\x9f\xd6\xa6\x1c\x86\x8d\x99G<`\xc4\xcfSe\xa5%\xdf\xdc'\x914\xfe\xf0[\xad\xed\x9e6+\xd4.&\x96\x0dx\xcd\xdbWN\xd9~\xd0\x98>G#\xd4\xf9u\x098\xfdZ\xdc\x12)\xf3\x88GH\x96\x1c\x8bT\xd7\x9c\xb2\x95\xae8~\xa7UW\xf7\xf0\x07?S\x89\x84p?P\x94\x7f\xe5\xfa[\xb1\xa0\xc0J\x85%\x99\x08\xe8!\xff\xcc\x8b\xd8\x17xE\x94\xfe%z\xae\xfd\xfd*4\x87\xcas!\x1d\x7f\xe3\x0c\xaf\xf5\xc1`\x9b\x86\xd9\xa9@g\xce\xe8\xe9TV\x11\x87\x84\xa13o]\x87t\x13j\xb8\xd2\xcbx\x0d1j`\xe7\x8a.9\x89\x8d (\xado\xa0\xcc\xfe\xf7A\xa0\x1de\xc5\xc1r\x87Q5\xf7\xc9T\xc7\x11k\x9f\x8ao>|\x8f\xd1n9z\xd8\xabpV\x0a>\x02\x80\xbbH\xcbH\xc3b\xef\x0a\x15\xc2\xbd\x17\\\x8c\x04\xa1\x1b\xd7\xa2\x14\x99\xf0/\xb1\x86s\x18r\x0c~\x8c\xa3i\xd7,MeB\xbb#\x97\xb6\xcdm]\xcd(e\x1f\xeaQ\xff\x07\xd0\x1eK\xe2\x88\x1a\xf8\xf2\xff\x92\"ggA\xb3\xd0Oo\"\x99\xe3vM~}`\xc51\x0b\xd1C\xe7\xc5\xa3\x9b\x8f\xf8\xaa^1\xe2\x81\xae;\x8eo\xac.'1\x94\xb8M\xb7\x06\x033X\xe2\xa1\xf9\\\xbeW\xc7\xf6\xca\x85\xe0g\"\xba\xcc8\xde3\xab\xdb\x16\xcd\x92\x0d*;^\x81\xce>\xef\x85.\xd7\x1dl\xad-\xe6N\xe2b\xa0\x1c?6\x1bCRt^v\x8c\xbf;\xe6\x82\xf9\xc4\xa6\x92%r*\xf9{i`\x0b\xfa,\x092\x9920\xf0\xf5e\xbf\xe6\xe0\x81K\xc4ZL`j\x91\x00\x9f\xe4_\"\xe7\x88\xc0\x0e\xa3}B\x80'4\xac\xf2\xeb\xb2\xfbS9\xdb\xce\xf8\x96\xd8\x93r\xb3\x0c\xec~\x9c\x92cE~f~\x14\xff\xde\xe32*k\xf3UBqt\xe8}\xc0\xfc|\xc0\xdc\xc7\xf6\xa7o\x8b\xb3`\xabuH\xf7|\x12C\x08X\xc8\x00\x9b\xf1\xe9\xfa-c\xb5\xb9\xe5\xbb\xc0\x1c\x15]_\xec\xd9&\xeb3\xd9\xf0a*\x1aT\xbc\x12\x91\x17\xc8!*PI\x13\xbc&\xb0U\xc1${d\x92\xa4)b\x88\x17}\x01.59lB\xb7)\xc4iX\x9f\x84\x95>\xa8\xa1\xa1\x0d\xb0}8\xeb\x8e\xd6\x90*[l\x05\xe6\x9bp<k\xf6\xee\x8be\xe0t\\\xa3\x92\x97q\x0d\xbc\xfd\xfc\x9d\x83\x94\x06\xe0*m8?O:iP%\x0dL^[\xd04GC\xea%\xe7\xfd~Q\xb6\x90\x08\x8fk\xd9\xf7\x0c69\x06\xaf\xfez\xd1R\xce\x05\x8f\xbc\xd2\x88Y\xbe\xfa\x97\xac\x04\x9aN\xdc\xf0,\x1e\xdb\x0a\x84\xae5Qq<\xcer\x0e\x14\xdd\x11\xa9\xd8+^s\xf8\xd3`\xaaY\x9e8\xe5\x87\x8b.\x08\xe3\xa2Z\x8a\xc8\xa8L1\x8c[\x19\x8e\x07\xae\xd4\x0e\xf5\xe1\x7f\xb0O\x8c\xe2Y\x9f)I\xbdR\xe3\xccj\xf3\xe6\x13\x7f!\xdfu\xbb\x9f\xa3\xe9\xe3\xe95\xb5\xdf_\xc2\xe3^\xe3\x1e\xc7\x1c\xb7\x97\xc8\x82\xbf\x07\xf5\xcf\x07\xd7px\x12\x06A\xee\xff\x15Q\x96N\x91\x81\xc9\xb0W\xb9\x98\x98c\xd5Z\xa4\xfb\x82i\xf6\xef2\xfb\xff\xd3\x85\x80\xe8\x08@/&AG\xe4\xf2\xd9~<\x0f\xa7\x07\x97O30\x08q\xa9\xc8\xdd\xdd\xcb\x16\x99[\xdb\xf7Mwp\x94\x8b\xd5\x17\x0c\x09\x01\x10\xa7\x89]\xc2/Q\xf2b\x1e\x0b\xe9\x96\x95\xae\xbd\x11\x9a\x9b\xb9\xba3\xf3\x92\x1b"

--addons/realisticcardealer/lua/realistic_cardealer/languages/sh_language_es.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/languages/sh_language_pl.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/languages/sh_language_ru.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/sh_config.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/sh_advanced_config.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/client/cl_fonts.lua:
RCD.ScrW, RCD.ScrH = ScrW(), ScrH()

function RCD.LoadFonts()
	surface.CreateFont("RCD:Font:01", {
		font = "Georama Black",
		extended = false,
		size = RCD.ScrH*0.07,
		weight = 1000, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:02", {
		font = "Georama Light",
		extended = false,
		size = RCD.ScrH*0.07,
		weight = 1000, 
		blursize = 0,
		scanlines = 0,
 		/* 76561198447872548 */
		italic = true,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:03", {
		font = "Georama Light",
		extended = false,
		size = RCD.ScrH*0.035,
		weight = 1000, 
		blursize = 0,
		scanlines = 0,
		italic = true,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:04", {
		font = "Georama Black",
		extended = false,
		size = RCD.ScrH*0.022,
		weight = 1000, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:05", {
		font = "Georama",
		extended = false,
		size = RCD.ScrH*0.049,
		weight = 1000, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:06", {
		font = "Georama Medium",
		extended = false,
		size = RCD.ScrH*0.02,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:07", {
		font = "Georama Medium",
		extended = false,
		size = RCD.ScrH*0.018,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:08", {
		font = "Georama Medium",
		extended = false,
		size = RCD.ScrH*0.015,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:09", {
		font = "Georama",
		extended = false,
		size = RCD.ScrH*0.025,
		weight = 1000, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
		italic = false
	})

	surface.CreateFont("RCD:Font:10", {
		font = "Georama Black",
		extended = false,
		size = RCD.ScrH*0.04,
		weight = 1000, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:11", {
		font = "Georama Light",
		extended = false,
		size = RCD.ScrH*0.025,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		italic = true,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:12", {
		font = "Georama",
		extended = false,
		size = RCD.ScrH*0.026,
		italic = false,
		weight = 1000, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:13", {
		font = "Georama Light",
		extended = false,
		size = RCD.ScrH*0.026,
		italic = false,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:17", {
		font = "Georama Light",
		extended = false,
		size = RCD.ScrH*0.02,
		italic = false,
		weight = 1000, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:18", {
		font = "Georama Medium",
		extended = false,
		size = RCD.ScrH*0.026,
		italic = false,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:19", {
		font = "Georama Medium",
		extended = false,
		size = 165,
		italic = false,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:21", {
		font = "Georama Bold",
		extended = false,
		size = RCD.ScrH*0.018,
		italic = false,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:22", {
		font = "Georama Bold",
		extended = false,
		size = RCD.ScrH*0.12,
		italic = false,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:23", {
		font = "Georama Light",
		extended = false,
		size = RCD.ScrH*0.03,
		italic = true,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:24", {
		font = "Georama Bold",
		extended = false,
		size = RCD.ScrH*0.025,
		italic = false,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:25", {
		font = "Georama Bold",
		extended = false,
		size = RCD.ScrH*0.049,
		italic = false,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:26", {
		font = "Georama Bold",
		extended = false,
		size = RCD.ScrH*0.028,
		italic = false,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:27", {
		font = "Scriptina",
		extended = false,
		size = RCD.ScrH*0.08,
		italic = false,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:28", {
		font = "Georama Bold",
		extended = false,
		size = RCD.ScrH*0.02,
		italic = false,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD:Font:29", {
		font = "Georama Light",
		extended = false,
		size = RCD.ScrH*0.028,
		italic = false,
		weight = 0, 
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})

	surface.CreateFont("RCD3D:Font:01", {
		font = "Georama Black",
		extended = false,
		size = 200,
		weight = 1000,
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})
	
	surface.CreateFont("RCD3D:Font:02", {
		font = "Georama Light",
		extended = false,
		size = 200,
		weight = 1000,
		blursize = 0,
		scanlines = 0,
		italic = true,
		antialias = true,
	})	

	surface.CreateFont("RCD3D:Font:03", {
		font = "Georama Medium",
		extended = false,
		size = 100,
		weight = 0,
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})
	
	surface.CreateFont("RCD3D:Font:04", {
		font = "Georama Medium",
		extended = false,
		size = 100,
		italic = false,
		weight = 500,
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})
	
	surface.CreateFont("RCD3D:Font:05", {
		font = "Georama Light",
		extended = false,
		size = 70,
		italic = false,
		weight = 1000,
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})
	
	surface.CreateFont("RCD3D:Font:06", {
		font = "Georama Light",
		extended = false,
		size = 50,
		italic = false,
		weight = 1000,
		blursize = 0,
		scanlines = 0,
		antialias = true,
	})
end
RCD.LoadFonts()
--addons/realisticcardealer/lua/realistic_cardealer/vgui/cl_checkbox.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/vgui/cl_dscroll.lua:
local PANEL = {}

function PANEL:Init()
    local sbar = self:GetVBar()
    sbar:SetWide(RCD.ScrW*0.003) -- 76561198447872548

    function sbar:Paint(w, h)
        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["grey30"])
    end
    function sbar.btnUp:Paint(w, h)
        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["grey30"])
    end
    function sbar.btnDown:Paint(w, h)
        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["grey30"])
    end
    function sbar.btnGrip:Paint(w, h)
        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["grey30"])
    end
end

derma.DefineControl("RCD:DScroll", "RCD DScroll", PANEL, "DScrollPanel")
--lua/autorun/ricoplayer.lua:
player_manager.AddValidModel( "Rico", "models/cktheamazingfrog/player/rico/rico.mdl" )
player_manager.AddValidHands( "Rico", "models/cktheamazingfrog/player/rico/ricoarms.mdl", 0, "00000000" )
list.Set( "PlayerOptionsModel", "Rico", "cktheamazingfrog/player/rico/rico.mdl" )

local Category = "The Penguins"

local NPC = {   
        Name = "Rico Hostile", 
        Class = "npc_combine_s", 
        Model = "models/cktheamazingfrog/player/rico/rico.mdl",              
        Health = "100",                 
        KeyValues = { citizentype = 4 },                 
        Category = Category,
        Squadname = "Bad Penguin Demo"
}

list.Set( "NPC", "npc_ricoenemy", NPC ) 

local NPC = {   
        Name = "Rico Friendly", 
        Class = "npc_citizen", 
        Model = "models/cktheamazingfrog/player/rico/rico.mdl",                
        Health = "100",                 
        KeyValues = { citizentype = 4 },                 
        Category = Category,
        Squadname = "Good Penguin Demo"
}

list.Set( "NPC", "npc_ricofriend", NPC )
--addons/rsc/lua/autorun/rsc.lua:
return gluapack()()
--addons/rsc/lua/rsc/init.lua:
return gluapack()()
--addons/rsc/lua/rsc/shared/sh_net.lua:
-- Operations
RSC.NET_OP_REQUEST_CAPTURE = 0
RSC.NET_OP_MESSAGE = 1
RSC.NET_OP_CAPTURE_RESULT = 2
RSC.NET_OP_REQUEST_REGISTERED = 3 -- Client only
RSC.NET_OP_CANCEL_REQUEST = 4 -- Server only
RSC.NET_OP_CHECK_ACCESS = 5
RSC.NET_OP_UPDATE_CONFIG = 6
RSC.NET_OP_REQUEST_TRANSLATION = 7

-- Message types
RSC.MESSAGE_TYPE_INFO = 0
RSC.MESSAGE_TYPE_ERROR = 1
RSC.MESSAGE_TYPE_SUCCESS = 2

-- Message source
RSC.MESSAGE_SOURCE_VICTIM = 0
RSC.MESSAGE_SOURCE_SERVER = 1

function RSC.SendMessage(type, message, ply, source, victim)
    net.Start("RSC.NetworkV2")
        net.WriteUInt(RSC.NET_OP_MESSAGE, 4)
        net.WriteUInt(type, 4)
        net.WriteString(message)
        if SERVER then
            net.WriteUInt(source, 4)
            net.WriteEntity(victim)
        end
    if SERVER then net.Send(ply) else net.SendToServer() end
end

function RSC.SendError(message, ply, source, victim)
    RSC.SendMessage(RSC.MESSAGE_TYPE_ERROR, message, ply, source, victim)
end

function RSC.ReadMessage()
    local type, message, source, victim = net.ReadUInt(4), net.ReadString(), CLIENT and net.ReadUInt(4), CLIENT and net.ReadEntity()
    return type, message, source, victim
end

--addons/rsc/lua/rsc/shared/sh_metadata.lua:
return gluapack()()
--addons/rsc/lua/rsc/classes/service.lua:
return gluapack()()
--addons/rsc/lua/rsc/services/tempx.lua:
return gluapack()()
--addons/sam-159/lua/sam/libs/sh_async_netstream.lua:
return gluapack()()
--addons/sam-159/lua/sam_languages/english.lua:
return {
	You = "You",
	Yourself = "Yourself",
	Themself = "Themself",
	Everyone = "Everyone",

	cant_use_as_console = "You need to be a player to use {S Red} command!",
	no_permission = "You don't have permission to use '{S Red}'!",

	cant_target_multi_players = "You can't target multiple players using this command!",
	invalid_id = "Invalid id ({S Red})!",
	cant_target_player = "You can't target {S Red}!",
	cant_target_self = "You can't target your self using {S Red} command!",
	player_id_not_found = "Player with id {S Red} is not found!",
	found_multi_players = "Found multiple players: {T}!",
	cant_find_target = "Can't find a player to target ({S Red})!",

	invalid = "Invalid {S} ({S_2 Red})",
	default_reason = "none",

	menu_help = "Open admin mod menu.",

	-- Chat Commands
	pm_to = "PM to {T}: {V}",
	pm_from = "PM from {A}: {V}",
	pm_help = "Send a personal message (PM) to a player.",

	to_admins = "{A} to admins: {V}",
	asay_help = "Send a message to admins.",

	mute = "{A} muted {T} for {V}. ({V_2})",
	mute_help = "Stop player(s) from sending messages in chat.",

	unmute = "{A} unmuted {T}.",
	unmute_help = "Unmute player(s).",

	you_muted = "You are muted.",

	gag = "{A} gagged {T} for {V}. ({V_2})",
	gag_help = "Stop player(s) from speaking.",

	ungag = "{A} ungagged {T}.",
	ungag_help = "Ungag player(s).",

	-- Fun Commands
	slap = "{A} slapped {T}.",
	slap_damage = "{A} slapped {T} with {V} damage.",
	slap_help = "Slap asses.",

	slay = "{A} slayed {T}.",
	slay_help = "Slay player(s).",

	set_hp = "{A} set the hp for {T} to {V}.",
	hp_help = "Set health for player(s).",

	set_armor = "{A} set the armor for {T} to {V}.",
	armor_help = "Set armor for player(s).",

	ignite = "{A} ignited {T} for {V}.",
	ignite_help = "Ignite player(s).",

	unignite = "{A} extinguished {T}.",
	unignite_help = "Extinguish player(s).",

	god = "{A} enabled god mode for {T}.",
	god_help = "Enable god mode for player(s).",

	ungod = "{A} disabled god mode for {T}.",
	ungod_help = "Disable god mode for player(s).",

	freeze = "{A} froze {T}.",
	freeze_help = "Freeze player(s).",

	unfreeze = "{A} unfroze {T}.",
	unfreeze_help = "Unfreeze player(s).",

	cloak = "{A} cloaked {T}.",
	cloak_help = "Cloak player(s).",

	uncloak = "{A} uncloaked {T}.",
	uncloak_help = "Uncloak player(s).",

	jail = "{A} jailed {T} for {V}. ({V_2})",
	jail_help = "Jail player(s).",

	unjail = "{A} unjailed {T}.",
	unjail_help = "Unjail player(s).",

	strip = "{A} stripped weapons from {T}.",
	strip_help = "Strip weapons from player(s).",

	respawn = "{A} respawned {T}.",
	respawn_help = "Respawn player(s).",

	setmodel = "{A} set the model for {T} to {V}.",
	setmodel_help = "Change player(s)'s model.",

	giveammo = "{A} gave {T} {V} ammo.",
	giveammo_help = "Give player(s) ammo.",

	scale = "{A} set model scale for {T} to {V}.",
	scale_help = "Scale player(s).",

	freezeprops = "{A} froze all props.",
	freezeprops_help = "Freezes all props on the map.",

	-- Teleport Commands
	dead = "You are dead!",
	leave_car = "Leave the vehicle first!",

	bring = "{A} teleported {T}.",
	bring_help = "Bring a player.",

	goto = "{A} teleported to {T}.",
	goto_help = "Goto a player.",

	no_location = "No previous location to return {T} to.",
	returned = "{A} returned {T}.",
	return_help = "Return a player to where he was.",

	-- User Management Commands
	setrank = "{A} set the rank for {T} to {V} for {V_2}.",
	setrank_help = "Set a player's rank.",
	setrankid_help = "Set a player's rank by his steamid/steamid64.",

	addrank = "{A} created a new rank {V}.",
	addrank_help = "Create a new rank.",

	removerank = "{A} removed rank {V}.",
	removerank_help = "Remove a rank.",

	super_admin_access = "superadmin has access to everything!",

	giveaccess = "{A} granted access {V} to {T}.",
	givepermission_help = "Give permission to rank.",

	takeaccess = "{A} taken access {V} from {T}.",
	takepermission_help = "Take permission from rank.",

	renamerank = "{A} renamed rank {T} to {V}.",
	renamerank_help = "Rename rank.",

	changeinherit = "{A} changed the rank to inherit from for {T} to {V}.",
	changeinherit_help = "Change the rank to inherit from.",

	rank_immunity = "{A} changed rank {T}'s immunity to {V}.",
	changerankimmunity_help = "Change rank immunity.",

	rank_ban_limit = "{A} changed rank {T}'s ban limit to {V}.",
	changerankbanlimit_help = "Change rank ban limit.",

	changeranklimit = "{A} changed {V} limit for {T} to {V_2}.",
	changeranklimit_help = "Change rank limits.",

	-- Utility Commands
	map_change = "{A} changing the map to {V} in 10 seconds.",
	map_change2 = "{A} changing the map to {V} with gamemode {V_2} in 10 seconds.",
	map_help = "Change current map and gamemode.",

	map_restart = "{A} restarting the map in 10 seconds.",
	map_restart_help = "Restart current map.",

	mapreset = "{A} reset the map.",
	mapreset_help = "Reset the map.",

	kick = "{A} kicked {T} Reason: {V}.",
	kick_help = "Kick a player.",

	ban = "{A} banned {T} for {V} ({V_2}).",
	ban_help = "Ban a player.",

	banid = "{A} banned ${T} for {V} ({V_2}).",
	banid_help = "Ban a player using his steamid.",

	-- ban message when admin name doesn't exists
	ban_message = [[

	-------------- [ UZAKLAŞTIRILDIN ] -------------
Venom Roleplay sunucusundan yasaklandın, eğer bu cezanın hatalı olduğunu düşünüyorsan.
discord.gg/eniyisi

---------- [SEBEP] --------
{S_2}


-------[KALAN SÜRE]-------
{S_3}

-------[BANLAYAN]---------
{S}
]],

	-- ban message when admin name exists
	ban_message_2 = [[
	-------------- [ UZAKLAŞTIRILDIN ] -------------
Venom Roleplay sunucusundan yasaklandın, eğer bu cezanın hatalı olduğunu düşünüyorsan.
discord.gg/eniyisi

---------- [SEBEP] --------
{S_3}


-------[KALAN SÜRE]-------
{S_4}

-------[BANLAYAN]---------
{S} ({S_2})
]],

	unban = "{A} unbanned {T}.",
	unban_help = "Unban a player using his steamid.",

	noclip = "{A} has toggled noclip for {T}.",
	noclip_help = "Toggle noclip on player(s).",

	cleardecals = "{A} cleared ragdolls and decals for all players.",
	cleardecals_help = "Clear ragdolls and decals for all players.",

	stopsound = "{A} stopped all sounds.",
	stopsound_help = "Stop all sounds for all players.",

	not_in_vehicle = "You are not in a vehicle!",
	not_in_vehicle2 = "{S Blue} is not in a vehicle!",
	exit_vehicle = "{A} forced {T} to get out from a vehicle.",
	exit_vehicle_help = "Force a player out of a vehicle.",

	time_your = "Your total time is {V}.",
	time_player = "{T} total time is {V}.",
	time_help = "Check a player's time.",

	admin_help = "Activate admin mode.",
	unadmin_help = "Deactivate admin mode.",

	buddha = "{A} enabled buddha mode for {T}.",
	buddha_help = "Make player(s) godmoded when their health is 1.",

	unbuddha = "{A} disabled buddha mode for {T}.",
	unbuddha_help = "Disable buddha mode for player(s).",

	give = "{A} gave {T} {V}.",
	give_help = "Give player(s) weapon/entity",

	-- DarkRP Commands
	arrest = "{A} arrested {T} forever.",
	arrest2 = "{A} arrested {T} for {V} seconds.",
	arrest_help = "Arrest player(s).",

	unarrest = "{A} unarrested {T}.",
	unarrest_help = "Unarrest player(s).",

	setmoney = "{A} set money for {T} to {V}.",
	setmoney_help = "Set money for a player.",

	addmoney = "{A} added {V} for {T}.",
	addmoney_help = "Add money for a player.",

	door_invalid = "invalid door to sell.",
	door_no_owner = "no one owns this door.",

	selldoor = "{A} sold a door/vehicle for {T}.",
	selldoor_help = "Unown the door/vehicle you are looking at.",

	sellall = "{A} sold every door/vehicle for {T}.",
	sellall_help = "Sell every door/vehicle owned for a player.",

	s_jail_pos = "{A} set a new jail position.",
	setjailpos_help = "Resets all jail positions and sets a new one at your location.",

	a_jail_pos = "{A} added a new jail position.",
	addjailpos_help = "Adds a jail position at your current location.",

	setjob = "{A} set {T}'s job to {V}.",
	setjob_help = "Change a player's job.",

	shipment = "{A} spawned {V} shipment.",
	shipment_help = "Spawn a shipment.",

	forcename = "{A} set the name for {T} to {V}.",
	forcename_taken = "Name already taken. ({V})",
	forcename_help = "Force name for a player.",

	report_claimed = "{A} claimed a report submitted by {T}.",
	report_closed = "{A} closed a report submitted by {T}.",
	report_aclosed = "Your report is closed. (Time expired)",

	rank_expired = "{V} rank for {T} expired.",

	-- TTT Commands
	setslays = "{A} set amount of auto-slays for {T} to {V}.",
	setslays_help = "Set amount of rounds to auto-slay a player for.",

	setslays_slayed = "{T} got auto-slayed, slays left: {V}.",

	removeslays = "{A} removed auto-slays for {T}.",
	removeslays_help = "Remove auto-slays for a player."
}
--addons/sui/lua/sui/libs/types.lua:
-- https://gist.github.com/CapsAdmin/0d9c1e77d0fc22d910e182bfeb9812e5
local getmetatable = getmetatable

do
	local types = {
		["string"] = "",
		["boolean"] = true,
		["number"] = 0,
		["function"] = function() end,
		["thread"] = coroutine.create(getmetatable),
		["Color"] = Color(0, 0, 0),
	}

	for k, v in pairs(types) do
		if not getmetatable(v) then
			debug.setmetatable(v, {MetaName = k})
		else
			getmetatable(v).MetaName = k
		end
	end
end

function sui.type(value)
	if value == nil then
		return "nil"
	end
	local meta = getmetatable(value)
	if meta then
		meta = meta.MetaName
		if meta then
			return meta
		end
	end
	return "table"
end

do
	local function add(name)
		local new_name = name
		if name == "bool" then
			new_name = "boolean"
		end
		sui["is" .. name:lower()] = function(value)
			local meta = getmetatable(value)
			if meta and meta.MetaName == new_name then
				return true
			else
				return false
			end
		end
	end

	add("string")
	add("number")
	add("bool")
	add("function")

	add("Angle")
	add("Vector")
	add("Panel")
	add("Matrix")
end

function sui.isentity(value)
	local meta = getmetatable(value)
	if meta then
		if meta.MetaName == "Entity" then
			return true
		end
		meta = meta.MetaBaseClass
		if meta then
			return meta.MetaName == "Entity"
		end
	end
	return false
end
sui.IsEntity = sui.isentity

local type = sui.type
function sui.istable(value)
	return type(value) == "table"
end
--addons/sam-159/lua/sam/menu/cl_init.lua:
if SAM_LOADED then return end

local vgui = vgui
local draw = draw

local sam = sam
local sui = sui
local TDLib = sui.TDLib

local config = sam.config

do
	local funcs = {
		["SAM.ComboBox"] = {
			event = "OnSelect",
			function(s, _, value)
				config.set(s.config_key, value)
			end
		},
		["SAM.TextEntry"] = {
			event = "OnEnter",
			function(s)
				local v = s:GetText()
				if s:GetNumeric() then
					v = tonumber(v)
				end
				config.set(s.config_key, v)
			end
		},
		["SAM.ToggleButton"] = {
			event = "OnChange",
			function(s, v)
				config.set(s.config_key, v)
			end
		}
	}

	sam.SUI = sam.SUI or sui.new("SAM", true, {
		SetConfig = function(s, key, default)
			s.config_key = key

			local i = config.hook({key}, function(value, old)
				local v = config.get(key, default)
				s:SetValue(v)
			end)

			local t = funcs[s:GetName()]
			s[t.event] = t[1]

			s:On("OnRemove", function()
				config.remove_hook(i)
			end)
		end
	})
end

local SUI = sam.SUI
local GetColor = SUI.GetColor

sam.menu = {}

local tabs = {}
function sam.menu.add_tab(icon, func, check, pos)
	local tab = {
		icon = icon,
		func = func,
		check = check,
		pos = pos
	}
	for k, v in ipairs(tabs) do
		if v.icon == icon then
			tabs[k] = tab
			return
		end
	end
	table.insert(tabs, tab)
end

function sam.menu.remove_tab(name)
	for k, v in ipairs(tabs) do
		if v.name == name then
			table.remove(tabs, k)
			break
		end
	end
end

SAM_TAB_TITLE_FONT = SUI.CreateFont("TabTitle", "Roboto Bold", 22)
SAM_TAB_DESC_FONT = SUI.CreateFont("TabDesc", "Roboto Medium", 15)

local MENU_LOADING = SUI.CreateFont("MenuLoading", "Roboto", 30)

SUI.AddToTheme("Dark", {
	frame = "#181818",

	scroll_panel = "#181818",

	menu_tabs_title = "#ffffff",

	--=--
	player_list_titles = "#f2f1ef",

	player_list_names = "#eeeeee",
	player_list_names_2 = "#ff6347",
	player_list_data = "#e8e8e8",

	player_list_rank = "#41b9ff",
	player_list_console = "#00c853",
	player_list_rank_text = "#2c3e50",

	player_list_steamid = "#a4a4a4",
	--=--

	--=--
	actions_button = Color(0, 0, 0, 0),
	actions_button_hover = Color(200, 200, 200, 60),

	actions_button_icon = "#aaaaaa",
	actions_button_icon_hover = "#ffffff",
	--=--

	--=--
	page_switch_bg = "#222222",
	--=--
})

SUI.SetTheme("Dark")

function SUI.panels.Frame:Paint(w, h)
	if GetColor("frame_blur") then
		TDLib.BlurPanel(self)
	end

	draw.RoundedBox(8, 0, 0, w, h, GetColor("frame"))
end

function SUI.panels.Frame:HeaderPaint(w, h)
	draw.RoundedBoxEx(8, 0, 0, w, h, GetColor("header"), true, true, false, false)
	draw.RoundedBox(0, 0, h - 1, w, 1, GetColor("line"))
end

do
	function sam.menu.add_loading_panel(parent)
		local is_loading = false

		local loading_panel = parent:Add("Panel")
		loading_panel:SetVisible(false)
		loading_panel:SetZPos(999999)
		loading_panel:SetMouseInputEnabled(false)

		function loading_panel:Paint(w, h)
			draw.RoundedBox(3, 0, 0, w, h, Color(50, 50, 50, 200))
			draw.SimpleText(string.rep(".", (CurTime() * 3) % 3), MENU_LOADING, w/2, h/2, Color(200, 200, 200, 200), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end

		parent:SUI_TDLib()
		parent:On("PerformLayout", function(s, w, h)
			loading_panel:SetSize(w, h)
		end)

		local first = true
		local toggle_loading = function(bool)
			if not IsValid(loading_panel) then return end

			is_loading = bool or not is_loading
			if is_loading and not first then
				loading_panel:SetVisible(is_loading and true or false)
				loading_panel:SetMouseInputEnabled(is_loading)
			else
				timer.Simple(0.2, function()
					if not IsValid(loading_panel) then return end
					loading_panel:SetVisible(is_loading and true or false)
					loading_panel:SetMouseInputEnabled(is_loading)
				end)
			end

			first = false
		end

		return toggle_loading, function()
			return is_loading
		end
	end
end

local sam_menu
function sam.menu.open_menu()
	if IsValid(sam_menu) then
		return sam_menu:IsVisible() and sam_menu:Hide() or sam_menu:Show()
		-- sam_menu:Remove()
	end

	sam_menu = vgui.Create("SAM.Frame")
	sam_menu:Center()
	sam_menu:MakePopup()
	sam_menu:SetTitle("SAM")

	sam_menu:AddAnimations(800, 600)

	sam_menu.close.DoClick = function()
		sam_menu:Hide()
	end

	local sheet = sam_menu:Add("SAM.ColumnSheet")
	sheet:Dock(FILL)
	sheet:InvalidateParent(true)
	sheet:InvalidateLayout(true)
	sheet.Paint = nil

	local tab_scroller = sheet.tab_scroller
	tab_scroller:DockMargin(0, 1, 0, 1)

	function tab_scroller:Paint(w, h)
		draw.RoundedBoxEx(8, 0, 0, w, h, GetColor("column_sheet_bar"), false, false, true, false)
	end

	local sheets = {}
	for _, v in SortedPairsByMemberValue(tabs, "pos") do
		sheets[v.icon] = sheet:AddSheet(v.icon, v.func)
	end

	tab_scroller = tab_scroller:GetCanvas()
	sam_menu:On("Think", function()
		for _, v in ipairs(tabs) do
			local tab = sheets[v.icon]
			if v.check and not v.check() then
				if tab:IsVisible() then
					tab:SetVisible(false)
					if sheet:GetActiveTab() == tab then
						sheet:SetActiveTab(sheet.tabs[1])
					end
					tab_scroller:InvalidateLayout()
				end
			elseif not tab:IsVisible() then
				tab:SetVisible(true)
				tab_scroller:InvalidateLayout()
			end
		end
	end)
end

function sam.menu.get()
	return sam_menu
end

hook.Add("GUIMouseReleased", "SAM.CloseMenu", function(mouse_code)
	local panel = vgui.GetHoveredPanel()
	if mouse_code == MOUSE_LEFT and panel == vgui.GetWorldPanel() and IsValid(sam_menu) and sam_menu:HasHierarchicalFocus() then
		sam_menu:Hide()
	end
end)

for _, f in ipairs(file.Find("sam/menu/tabs/*.lua", "LUA")) do
	sam.load_file("sam/menu/tabs/" .. f, "sh")
end
--addons/sui/lua/sui/vgui/sui_image.lua:
local table = table
local file = file
local coroutine = coroutine
local surface = surface

local UnPredictedCurTime = UnPredictedCurTime
local pairs = pairs

local color_white = color_white

local sui = sui
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name

local read_gif = include("sui/libs/gif_loader.lua")
local generate_png = include("sui/libs/png_encoder.lua")

local images_path = (NAME .. "/images/"):lower()
file.CreateDir(images_path)

local get_image_path = function(url)
	return images_path .. (url:gsub("%W", "_") .. ".png")
end

local Write = file.Write
local gif_to_png; do
	local internal_gif_to_png = function(file_path, chunk)
		local gif = read_gif(chunk)
		local frames = gif:get_frames()
		local w, h = gif.width, gif.height

		local path = file_path .. "/"
		file.CreateDir(path)

		for frame_id = 1, #frames do
			local frame = frames[frame_id]
			local data = frame.data
			local png = generate_png(w, h, data)
			Write(("%s%d_%d.png"):format(path, frame_id, frame.delay), png)
			coroutine.yield()
		end
	end

	local delay = 0.01
	local next_run = 0

	local coroutines = {}
	local callbacks = {}
	gif_to_png = function(file_path, data, callback)
		local co = coroutine.create(internal_gif_to_png)
		local i = table.insert(coroutines, co)
		callbacks[i] = callback
		coroutine.resume(co, file_path, data)
		next_run = UnPredictedCurTime()
	end

	hook.Add("Think", NAME .. "ProcessGIFs", function()
		local co = coroutines[1]
		if not co then return end
		if UnPredictedCurTime() < next_run then return end

		if coroutine.status(co) == "suspended" then
			coroutine.resume(co)
		else
			callbacks[1]()
			table.remove(coroutines, 1)
			table.remove(callbacks, 1)
		end

		next_run = UnPredictedCurTime() + delay
	end)

	hook.Add(NAME .. "ImagesCleared", "ClearCoroutines", function()
		table.Empty(coroutines)
		table.Empty(callbacks)
	end)
end

local download_image, is_downloading_image; do
	-- https://stackoverflow.com/questions/25959386/how-to-check-if-a-file-is-a-valid-image
	local valid_images = {
		["\xff\xd8\xff"] = "jpeg",
		["\x89PNG\r\n\x1a\n"] = "png",
		["GIF87a"] = "gif",
		["GIF89a"] = "gif",
	}

	local get_image_type = function(data)
		for k, v in pairs(valid_images) do
			if data:StartWith(k) then
				return v
			end
		end
		return false
	end

	local downloading_images = {}

	local process_callbacks = function(url)
		local callbacks = downloading_images[url] or {}
		downloading_images[url] = nil

		for _, func in ipairs(callbacks) do
			func()
		end
	end

	download_image = function(url, callback)
		if downloading_images[url] then
			table.insert(downloading_images[url], callback)
			return
		end

		downloading_images[url] = {callback}

		http.Fetch(url, function(data)
			local image_type = get_image_type(data)
			if not image_type then
				downloading_images[url] = nil
				return
			end

			local image_path = get_image_path(url)

			if image_type == "gif" then
				gif_to_png(image_path, data, function()
					process_callbacks(url)
				end)
			else
				file.Write(image_path, data)
				process_callbacks(url)
			end
		end, function(err)
			print("(SUI) Failed to download an image, error: " .. err)
			downloading_images[url] = nil
		end)
	end

	is_downloading_image = function(url)
		return downloading_images[url] ~= nil
	end

	hook.Add(NAME .. "ImagesCleared", "ClearDownloadingImages", function()
		table.Empty(downloading_images)
	end)
end

local images_panels = {}

local PANEL = {}

local err_mat = SUI.Material("error")

function PANEL:Init()
	self:SetMouseInputEnabled(false)

	self.minus = 0
	self.rotation = 0
	self.image = err_mat
	self.image_col = color_white

	table.insert(images_panels, self)
end

function PANEL:OnRemove()
	for k, v in ipairs(images_panels) do
		if v == self then
			table.remove(images_panels, k)
			return
		end
	end
end

function PANEL:SetMinus(minus)
	self.minus = minus
end

function PANEL:SetRotation(rotation)
	self.rotation = rotation
end

function PANEL:SetImageColor(col)
	self.image_col = col
end

local cached_files = {}
local get_files = function(image_path)
	local f = cached_files[image_path]
	if f then return f end

	cached_files[image_path] = file.Find(image_path .. "/*", "DATA")

	return cached_files[image_path]
end

function PANEL:SetImage(url)
	self.image = err_mat

	self.pos = nil
	self.delay = nil

	self.images = nil
	self.delays = nil
	self.url = url

	if url:sub(1, 4) ~= "http" then
		self.image = SUI.Material(url)
		return
	end

	local image_path = get_image_path(url)
	if not file.Exists(image_path, "DATA") or is_downloading_image(url) then
		download_image(url, function()
			if self:IsValid() then
				self:SetImage(url)
			end
		end)
		return
	end

	local is_gif = file.IsDir(image_path, "DATA")
	if is_gif then
		local images = {}
		local delays = {}

		local files = get_files(image_path)
		for i = 1, #files do
			local v = files[i]
			local id, delay = v:match("(.*)_(.*)%.png")
			id = tonumber(id)
			local img_path = "../data/" .. image_path .. "/" .. v
			images[id] = img_path
			delays[id] = delay
		end

		self.frame = 1
		self.delay = (UnPredictedCurTime() * 100) + delays[1]

		self.images = images
		self.delays = delays

		self.max_images = #files
	else
		self.image = SUI.Material("../data/" .. image_path)
	end
end

local SetMaterial = surface.SetMaterial
function PANEL:PaintGIF(w, h, images)
	local frame = self.frame

	-- SUI.Material() caches materials by default
	local mat = SUI.Material(images[frame], true)
	if not mat then
		if frame > 1 then
			mat = SUI.Material(images[frame - 1])
		else
			mat = err_mat
		end

		SetMaterial(mat)

		return
	end

	SetMaterial(mat)

	local curtime = UnPredictedCurTime() * 100
	if curtime < self.delay then return end
	frame = frame + 1
	if frame > self.max_images then
		frame = 1
	end

	self.frame = frame
	self.delay = curtime + self.delays[frame]
end

local PaintGIF = PANEL.PaintGIF
local SetDrawColor = surface.SetDrawColor
local DrawTexturedRectRotated = surface.DrawTexturedRectRotated
function PANEL:Paint(w, h)
	SetDrawColor(self.image_col)

	local images = self.images
	if images then
		PaintGIF(self, w, h, images)
	else
		SetMaterial(self.image)
	end

	if self.Draw then
		self:Draw(w, h, true)
	else
		local minus = self.minus
		DrawTexturedRectRotated(w * 0.5, h * 0.5, w - minus, h - minus, self.rotation)
	end
end

sui.register("Image", PANEL, "PANEL")

function SUI.ClearImages()
	local files, dirs = file.Find(images_path .. "/*", "DATA")
	for _, f in ipairs(files) do
		file.Delete(images_path .. f)
	end

	for _, d in ipairs(dirs) do
		for _, f in ipairs(file.Find(images_path .. d .. "/*", "DATA")) do
			file.Delete(images_path .. (d .. "/" .. f))
		end
		file.Delete(images_path .. d)
	end

	table.Empty(SUI.materials)
	table.Empty(cached_files)

	hook.Call(NAME .. "ImagesCleared")

	for k, v in ipairs(images_panels) do
		if v.url then
			v:SetImage(v.url)
		end
	end
end
--addons/sui/lua/sui/vgui/sui_query_box.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_scroll_panel.lua:
return gluapack()()
--addons/sam-159/lua/sam/menu/tabs/bans.lua:
return gluapack()()
--addons/sam-159/lua/sam/modules/support_cami.lua:
if SAM_LOADED then return end

local ranks_loaded
if SERVER then
	ranks_loaded = sam.ranks.ranks_loaded()
else
	ranks_loaded = sam.get_global("Ranks") ~= nil
end

do
	local load_ranks = function()
		for name, rank in pairs(sam.ranks.get_ranks()) do
			if not sam.ranks.is_default_rank(name) then
				CAMI.RegisterUsergroup({Name = name, Inherits = rank.inherit}, "SAM")
			end
		end
	end

	if ranks_loaded then
		load_ranks()
	else
		hook.Add("SAM.LoadedRanks", "SAM.CAMI.LoadRanksToCAMI", load_ranks)
	end
end

hook.Add("SAM.AddedRank", "SAM.CAMI.AddedRank", function(name, rank)
	if not sam.ranks.is_default_rank(name) then
		CAMI.RegisterUsergroup({Name = name, Inherits = rank.inherit}, "SAM")
	end
end)

hook.Add("SAM.RemovedRank", "SAM.CAMI.RemovedRank", function(name)
	CAMI.UnregisterUsergroup(name, "SAM")
end)

hook.Add("SAM.RankNameChanged", "SAM.CAMI.RankNameChanged", function(old, new)
	CAMI.UnregisterUsergroup(old, "SAM")
	CAMI.RegisterUsergroup({Name = new, Inherits = sam.ranks.get_rank(new).inherit}, "SAM")
end)

hook.Add("SAM.ChangedPlayerRank", "SAM.CAMI.ChangedPlayerRank", function(ply, new_rank, old_rank)
	CAMI.SignalUserGroupChanged(ply, old_rank, new_rank, "SAM")
end)

hook.Add("SAM.ChangedSteamIDRank", "SAM.CAMI.ChangedSteamIDRank", function(steamid, new_rank, old_rank)
	CAMI.SignalSteamIDUserGroupChanged(steamid, old_rank, new_rank, "SAM")
end)

----------------------------------------------------------------------------------------------------------------------------------------------------------

if SERVER then
	do
		local on_user_group_registered = function(rank, source)
			if source ~= "SAM" then
				sam.ranks.add_rank(rank.Name, sam.ranks.is_rank(rank.Inherits) and rank.Inherits or "user")
			end
		end

		local load_ranks = function()
			for _, rank in pairs(CAMI.GetUsergroups()) do
				on_user_group_registered(rank, "CAMI")
			end
			hook.Add("CAMI.OnUsergroupRegistered", "SAM.CAMI.OnUsergroupRegistered", on_user_group_registered)
		end

		if ranks_loaded then
			load_ranks()
		else
			hook.Add("SAM.LoadedRanks", "SAM.CAMI.LoadRanksFromCAMI", load_ranks)
		end
	end

	hook.Add("CAMI.OnUsergroupUnregistered", "SAM.CAMI.OnUsergroupUnregistered", function(rank, source)
		if source ~= "SAM" then
			sam.ranks.remove_rank(rank.Name)
		end
	end)

	hook.Add("CAMI.PlayerUsergroupChanged", "SAM.CAMI.PlayerUsergroupChanged", function(ply, _, new_rank, source)
		if ply and IsValid(ply) and source ~= "SAM" then
			sam.player.set_rank(ply, new_rank)
		end
	end)

	hook.Add("CAMI.SteamIDUsergroupChanged", "SAM.CAMI.SteamIDUsergroupChanged", function(steamid, _, new_rank, source)
		if sam.is_steamid(steamid) and source ~= "SAM" then
			sam.player.set_rank_id(steamid, new_rank)
		end
	end)
end

do
	local on_privilege_registered = function(privilege)
		sam.permissions.add(privilege.Name, "CAMI", privilege.MinAccess)
	end

	local load_privileges = function()
		for _, privilege in pairs(CAMI.GetPrivileges()) do
			on_privilege_registered(privilege)
		end
		hook.Add("CAMI.OnPrivilegeRegistered", "SAM.CAMI.OnPrivilegeRegistered", on_privilege_registered)
	end

	if ranks_loaded then
		load_privileges()
	else
		hook.Add("SAM.LoadedRanks", "SAM.CAMI.LoadPrivileges", load_privileges)
	end
end

hook.Add("CAMI.OnPrivilegeUnregistered", "SAM.CAMI.OnPrivilegeUnregistered", function(privilege)
	sam.permissions.remove(privilege.Name)
end)

hook.Add("CAMI.PlayerHasAccess", "SAM.CAMI.PlayerHasAccess", function(ply, privilege, callback, target)
	if sam.type(ply) ~= "Player" then return end

	local has_permission = ply:HasPermission(privilege)
	if sam.type(target) == "Player" then
		callback(has_permission and ply:CanTarget(target))
	else
		callback(has_permission)
	end

	return true
end)

--addons/sui/lua/sui/vgui/sui_combobox.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_image.lua:
local table = table
local file = file
local coroutine = coroutine
local surface = surface

local UnPredictedCurTime = UnPredictedCurTime
local pairs = pairs

local color_white = color_white

local sui = sui
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name

local read_gif = include("sui/libs/gif_loader.lua")
local generate_png = include("sui/libs/png_encoder.lua")

local images_path = (NAME .. "/images/"):lower()
file.CreateDir(images_path)

local get_image_path = function(url)
	return images_path .. (url:gsub("%W", "_") .. ".png")
end

local Write = file.Write
local gif_to_png; do
	local internal_gif_to_png = function(file_path, chunk)
		local gif = read_gif(chunk)
		local frames = gif:get_frames()
		local w, h = gif.width, gif.height

		local path = file_path .. "/"
		file.CreateDir(path)

		for frame_id = 1, #frames do
			local frame = frames[frame_id]
			local data = frame.data
			local png = generate_png(w, h, data)
			Write(("%s%d_%d.png"):format(path, frame_id, frame.delay), png)
			coroutine.yield()
		end
	end

	local delay = 0.01
	local next_run = 0

	local coroutines = {}
	local callbacks = {}
	gif_to_png = function(file_path, data, callback)
		local co = coroutine.create(internal_gif_to_png)
		local i = table.insert(coroutines, co)
		callbacks[i] = callback
		coroutine.resume(co, file_path, data)
		next_run = UnPredictedCurTime()
	end

	hook.Add("Think", NAME .. "ProcessGIFs", function()
		local co = coroutines[1]
		if not co then return end
		if UnPredictedCurTime() < next_run then return end

		if coroutine.status(co) == "suspended" then
			coroutine.resume(co)
		else
			callbacks[1]()
			table.remove(coroutines, 1)
			table.remove(callbacks, 1)
		end

		next_run = UnPredictedCurTime() + delay
	end)

	hook.Add(NAME .. "ImagesCleared", "ClearCoroutines", function()
		table.Empty(coroutines)
		table.Empty(callbacks)
	end)
end

local download_image, is_downloading_image; do
	-- https://stackoverflow.com/questions/25959386/how-to-check-if-a-file-is-a-valid-image
	local valid_images = {
		["\xff\xd8\xff"] = "jpeg",
		["\x89PNG\r\n\x1a\n"] = "png",
		["GIF87a"] = "gif",
		["GIF89a"] = "gif",
	}

	local get_image_type = function(data)
		for k, v in pairs(valid_images) do
			if data:StartWith(k) then
				return v
			end
		end
		return false
	end

	local downloading_images = {}

	local process_callbacks = function(url)
		local callbacks = downloading_images[url] or {}
		downloading_images[url] = nil

		for _, func in ipairs(callbacks) do
			func()
		end
	end

	download_image = function(url, callback)
		if downloading_images[url] then
			table.insert(downloading_images[url], callback)
			return
		end

		downloading_images[url] = {callback}

		http.Fetch(url, function(data)
			local image_type = get_image_type(data)
			if not image_type then
				downloading_images[url] = nil
				return
			end

			local image_path = get_image_path(url)

			if image_type == "gif" then
				gif_to_png(image_path, data, function()
					process_callbacks(url)
				end)
			else
				file.Write(image_path, data)
				process_callbacks(url)
			end
		end, function(err)
			print("(SUI) Failed to download an image, error: " .. err)
			downloading_images[url] = nil
		end)
	end

	is_downloading_image = function(url)
		return downloading_images[url] ~= nil
	end

	hook.Add(NAME .. "ImagesCleared", "ClearDownloadingImages", function()
		table.Empty(downloading_images)
	end)
end

local images_panels = {}

local PANEL = {}

local err_mat = SUI.Material("error")

function PANEL:Init()
	self:SetMouseInputEnabled(false)

	self.minus = 0
	self.rotation = 0
	self.image = err_mat
	self.image_col = color_white

	table.insert(images_panels, self)
end

function PANEL:OnRemove()
	for k, v in ipairs(images_panels) do
		if v == self then
			table.remove(images_panels, k)
			return
		end
	end
end

function PANEL:SetMinus(minus)
	self.minus = minus
end

function PANEL:SetRotation(rotation)
	self.rotation = rotation
end

function PANEL:SetImageColor(col)
	self.image_col = col
end

local cached_files = {}
local get_files = function(image_path)
	local f = cached_files[image_path]
	if f then return f end

	cached_files[image_path] = file.Find(image_path .. "/*", "DATA")

	return cached_files[image_path]
end

function PANEL:SetImage(url)
	self.image = err_mat

	self.pos = nil
	self.delay = nil

	self.images = nil
	self.delays = nil
	self.url = url

	if url:sub(1, 4) ~= "http" then
		self.image = SUI.Material(url)
		return
	end

	local image_path = get_image_path(url)
	if not file.Exists(image_path, "DATA") or is_downloading_image(url) then
		download_image(url, function()
			if self:IsValid() then
				self:SetImage(url)
			end
		end)
		return
	end

	local is_gif = file.IsDir(image_path, "DATA")
	if is_gif then
		local images = {}
		local delays = {}

		local files = get_files(image_path)
		for i = 1, #files do
			local v = files[i]
			local id, delay = v:match("(.*)_(.*)%.png")
			id = tonumber(id)
			local img_path = "../data/" .. image_path .. "/" .. v
			images[id] = img_path
			delays[id] = delay
		end

		self.frame = 1
		self.delay = (UnPredictedCurTime() * 100) + delays[1]

		self.images = images
		self.delays = delays

		self.max_images = #files
	else
		self.image = SUI.Material("../data/" .. image_path)
	end
end

local SetMaterial = surface.SetMaterial
function PANEL:PaintGIF(w, h, images)
	local frame = self.frame

	-- SUI.Material() caches materials by default
	local mat = SUI.Material(images[frame], true)
	if not mat then
		if frame > 1 then
			mat = SUI.Material(images[frame - 1])
		else
			mat = err_mat
		end

		SetMaterial(mat)

		return
	end

	SetMaterial(mat)

	local curtime = UnPredictedCurTime() * 100
	if curtime < self.delay then return end
	frame = frame + 1
	if frame > self.max_images then
		frame = 1
	end

	self.frame = frame
	self.delay = curtime + self.delays[frame]
end

local PaintGIF = PANEL.PaintGIF
local SetDrawColor = surface.SetDrawColor
local DrawTexturedRectRotated = surface.DrawTexturedRectRotated
function PANEL:Paint(w, h)
	SetDrawColor(self.image_col)

	local images = self.images
	if images then
		PaintGIF(self, w, h, images)
	else
		SetMaterial(self.image)
	end

	if self.Draw then
		self:Draw(w, h, true)
	else
		local minus = self.minus
		DrawTexturedRectRotated(w * 0.5, h * 0.5, w - minus, h - minus, self.rotation)
	end
end

sui.register("Image", PANEL, "PANEL")

function SUI.ClearImages()
	local files, dirs = file.Find(images_path .. "/*", "DATA")
	for _, f in ipairs(files) do
		file.Delete(images_path .. f)
	end

	for _, d in ipairs(dirs) do
		for _, f in ipairs(file.Find(images_path .. d .. "/*", "DATA")) do
			file.Delete(images_path .. (d .. "/" .. f))
		end
		file.Delete(images_path .. d)
	end

	table.Empty(SUI.materials)
	table.Empty(cached_files)

	hook.Call(NAME .. "ImagesCleared")

	for k, v in ipairs(images_panels) do
		if v.url then
			v:SetImage(v.url)
		end
	end
end
--addons/sui/lua/sui/vgui/sui_label.lua:
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name
local MOUSE_LEFT = MOUSE_LEFT

local SysTime = SysTime

local PANEL = {}

AccessorFunc(PANEL, "m_colText", "TextColor")
AccessorFunc(PANEL, "m_colTextStyle", "TextStyleColor")
AccessorFunc(PANEL, "m_FontName", "Font")

AccessorFunc(PANEL, "m_bDoubleClicking", "DoubleClickingEnabled", FORCE_BOOL)
AccessorFunc(PANEL, "m_bAutoStretchVertical", "AutoStretchVertical", FORCE_BOOL)
AccessorFunc(PANEL, "m_bIsMenuComponent", "IsMenu", FORCE_BOOL)

AccessorFunc(PANEL, "m_bBackground", "PaintBackground",	FORCE_BOOL)
AccessorFunc(PANEL, "m_bBackground", "DrawBackground",	FORCE_BOOL)
AccessorFunc(PANEL, "m_bDisabled", "Disabled", FORCE_BOOL)

AccessorFunc(PANEL, "m_bIsToggle", "IsToggle", FORCE_BOOL)
AccessorFunc(PANEL, "m_bToggle", "Toggle", FORCE_BOOL)

AccessorFunc(PANEL, "m_bBright", "Bright", FORCE_BOOL)
AccessorFunc(PANEL, "m_bDark", "Dark", FORCE_BOOL)
AccessorFunc(PANEL, "m_bHighlight",	"Highlight", FORCE_BOOL)

PANEL:SetIsToggle(false)
PANEL:SetToggle(false)
PANEL:SetDisabled(false)
PANEL:SetDoubleClickingEnabled(true)

local Panel = FindMetaTable("Panel")
local SetMouseInputEnabled = Panel.SetMouseInputEnabled
local SetPaintBackgroundEnabled = Panel.SetPaintBackgroundEnabled
local SetPaintBorderEnabled = Panel.SetPaintBorderEnabled
local InvalidateLayout = Panel.InvalidateLayout
local SetFGColor = Panel.SetFGColor
function PANEL:Init()
	SetMouseInputEnabled(self, false)
	SetPaintBackgroundEnabled(self, false)
	SetPaintBorderEnabled(self, false)
end

function PANEL:AllowScale()
	SUI.OnScaleChanged(self, self.ScaleChanged)
end

function PANEL:ScaleChanged()
	self:SizeToContents()
end

function PANEL:SetFont(font)
	if self.m_FontName == font then return end

	self.m_FontName = font
	self:SetFontInternal(self.m_FontName)
end

function PANEL:SetTextColor(col)
	if self.m_colText == col then return end

	self.m_colText = col
	SetFGColor(self, col.r, col.g, col.b, col.a)
end
PANEL.SetColor = PANEL.SetTextColor

function PANEL:GetColor()
	return self.m_colText or self.m_colTextStyle
end

function PANEL:Toggle()
	if not self:GetIsToggle() then return end

	self:SetToggle(not self:GetToggle())
	self:OnToggled(self:GetToggle())
end

function PANEL:SetDisabled(bDisabled)
	self.m_bDisabled = bDisabled
	InvalidateLayout(self)
end

function PANEL:SetEnabled(bEnabled)
	self:SetDisabled(not bEnabled)
end

function PANEL:IsEnabled()
	return not self:GetDisabled()
end

function PANEL:ApplySchemeSettings()
	local col = self:GetColor()
	if not col then return end

	self:SetFGColor(col.r, col.g, col.b, col.a)
end

function PANEL:AutoStretchVerticalThink()
	self:SizeToContentsY()
end

function PANEL:SetAutoStretchVertical(enable)
	self.m_bAutoStretchVertical = enable
	self.Think = enable and self.AutoStretchVerticalThink or nil
end

function PANEL:OnCursorEntered()
	InvalidateLayout(self, true)
end

function PANEL:OnCursorExited()
	InvalidateLayout(self, true)
end

function PANEL:OnMousePressed(mousecode)
	if self:GetDisabled() then return end

	if mousecode == MOUSE_LEFT and not dragndrop.IsDragging() and self.m_bDoubleClicking then
		if self.LastClickTime and SysTime() - self.LastClickTime < 0.2 then

			self:DoDoubleClickInternal()
			self:DoDoubleClick()
			return
		end

		self.LastClickTime = SysTime()
	end

	if self:IsSelectable() and mousecode == MOUSE_LEFT and input.IsShiftDown() then
		return self:StartBoxSelection()
	end

	self:MouseCapture(true)
	self.Depressed = true
	self:OnDepressed()
	InvalidateLayout(self, true)

	self:DragMousePress(mousecode)
end

function PANEL:OnMouseReleased(mousecode)
	self:MouseCapture(false)

	if self:GetDisabled() then return end
	if not self.Depressed and dragndrop.m_DraggingMain ~= self then return end

	if self.Depressed then
		self.Depressed = nil
		self:OnReleased()
		InvalidateLayout(self, true)
	end

	if self:DragMouseRelease(mousecode) then return end

	if self:IsSelectable() and mousecode == MOUSE_LEFT then
		local canvas = self:GetSelectionCanvas()
		if canvas then
			canvas:UnselectAll()
		end
	end

	if not self.Hovered then return end

	self.Depressed = true

	if mousecode == MOUSE_RIGHT then
		self:DoRightClick()
	end

	if mousecode == MOUSE_LEFT then
		self:DoClickInternal()
		self:DoClick()
	end

	if mousecode == MOUSE_MIDDLE then
		self:DoMiddleClick()
	end

	self.Depressed = nil
end

function PANEL:OnReleased()
end

function PANEL:OnDepressed()
end

function PANEL:OnToggled(bool)
end

function PANEL:DoClick()
	self:Toggle()
end

function PANEL:DoRightClick()
end

function PANEL:DoMiddleClick()
end

function PANEL:DoClickInternal()
end

function PANEL:DoDoubleClick()
end

function PANEL:DoDoubleClickInternal()
end

sui.register("Label", PANEL, "Label")
--addons/scb-29/lua/sh_scb_config.lua:
if SCB_LOADED then return end

local config = scb.config

--
-- Chatbox title!@!
-- SERVER_NAME will be replaced with your server name
-- PLAYER_COUNT will be replaced with your online player count
-- EG.
-- config.chatbox_title = "SERVER_NAME (PLAYER_COUNT)" -- > Srlion Gaming (1)
--
config.chatbox_title = "Venom Roleplay - discord.gg/eniyisi | (PLAYER_COUNT)"

--
-- By default it uses 12h format, for 24h use "%H:%M:%S"
--
config.timestamps_format = "%I:%M:%S %p"

--
-- Allow parsing in chat print functions? (chat.AddText/Player:ChatPrint/Player:PrintMessage)
-- If it causes problems then disable it.
--
config.parse_in_chat = true

--
-- Hide language sign that appears behing emojis if you are typing in a non-English language
--
config.hide_language_sign = true

--
-- Enable the custom join messages
--
config.enable_custom_join_messages = true

--
-- Enable the custom leave messages
--
config.enable_custom_leave_messages = true

--
-- Enable avatars
--
config.enable_avatars = true

--
-- You can use SteamID/SteamID64/Ranks
-- If the first value is 'true' then anyone can use it
--
config.permissions = {
	--
	-- Who can add/remove/edit emojis & tags?
	--
	menu = {
		"superadmin",
		"76561198261855442",
		"STEAM_0:0:150794857",
	},

	--
	-- Who can use rainbow texts?
	-- Eg.
	-- hi there {* everyone}!
	--
	rainbow = {
	true,
	},

	--
	-- Who can use flashing texts?
	-- Eg.
	-- hi there {! everyone}!
	--
	flashing = {
		true, -- anyone can use this!!!
	},

	--
	-- Who can use colored texts?
	-- Eg.
	-- hi there {red Srlion}!
	-- hi there {#ff0000 Srlion}!
	--
	colored_texts = {
		true, -- anyone can use this!!!
	},

	--
	-- Who can use custom emojis?
	--
	custom_emojis = {
		true, -- anyone can use this because true is the first value!!!
		"superadmin",
	}
}

--
-- You can add colors that can be used in chatbox, eg. {my_new_color hi there!}
-- Use something like https://www.hexcolortool.com to get hex codes!
--
config.colors = {
	red = "f44336",
	pink = "E91E63",
	purple = "9C27B0",
	blue = "1773c4",
	cyan = "00BCD4",
	green = "4CAF50",
	yellow = "FFEB3B",
	orange = "FF9800",
	brown = "7b5804",
	grey = "9E9E9E",
	white = "E0E0E0",
	black = "080808"
}

scb.language = {
	save = "KAYDET",
	cancel = "İPTAL",
	edit = "Düzenle",
	search = "Ara...",
	team = "TAKIM",
	dead = "*ÖLÜ* ",
	console = "Konsol",
	remove = "Kaldır",
	
	type_something = "bir şey yaz...",
	
	settings_title = "Ayarlar",
	
	client_title = "Kullanıcı",
	tags_title = "Etiketler",
	emojis_title = "Emojiler",
	
	show_avatars = "Avatarları göster",
	show_time = "Zaman damgasını göster",
	disable_rainbow = "Gökkuşağı renklerini devre dışı bırak",
	disable_flashing = "Yanıp sönen metinleri devre dışı bırak",
	blur_theme = "Bulanıklık teması",
	join_messages = "Katılma/Çıkma mesajları",
	scale = "Ölçek",
	messages_fade = "Mesajların kaybolma süresi",
	max_messages = "Maksimum mesaj",
	reset_size = "Sohbet kutusu boyutunu sıfırla",
	reset_position = "Sohbet kutusu konumunu sıfırla",
	clear_reload = "Görselleri Temizle ve Yeniden Yükle (eğer bazı görseller güncel değilse ya da yüklenmiyorsa sorunları çözebilir)",
	
	add_tag = "Etiket Ekle",
	tag_owner = "SteamID/SteamID64/Rütbe",
	tag = "Etiket",
	
	add_emoji = "Emoji Ekle",
	emoji_name = "Ad",
	emoji_url = "URL",
	
	copy_text = "Metni Kopyala",
	copy_message = "Mesajı Kopyala",
	copy_steamid = "SteamID Kopyala",
	copy_steamid64 = "SteamID64 Kopyala",
	show_profile = "Oyuncu Profilini Göster",
	copy_time = "Mesaj Zamanını Kopyala",
	copy_url = "URL'yi Kopyala",
	
	bot_joined = "{#1773c4 NAME} oyuna katıldı",
	bot_left = "{#f44336 NAME} oyundan ayrıldı",
	
	-- STEAMID oyuncunun SteamID'si ile değiştirilecek
	player_connecting = "{#1773c4 NAME} bağlanıyor",
	player_left = "{#f44336 NAME} oyundan ayrıldı: REASON",
	
}
--addons/scb-29/lua/scb/cl_util.lua:
if SCB_LOADED then return end

local tonumber = tonumber
local Color = Color
local bit = bit
local file = file
local SortedPairs = SortedPairs
local table = table
local util = util
local math = math

local scb = scb

function scb.hex_rgb(hex)
	hex = tonumber(hex:gsub("^([%w])([%w])([%w])$", "%1%1%2%2%3%3", 1), 16)

	return Color(
		bit.band(bit.rshift(hex, 16), 0xFF),
		bit.band(bit.rshift(hex, 8), 0xFF),
		bit.band(hex, 0xFF)
	)
end

function scb.rgb_hex(color)
	return ("%x%x%x"):format(color.r, color.g, color.b)
end

function scb.get_extension(path)
	return path:GetExtensionFromFilename():match("(%w+)")
end

function scb.to_new_range(x, old_min, old_max, new_min, new_max)
	return (x - old_min) * (new_max - new_min) / (old_max - old_min) + new_min
end

function scb.is_letter_digit(c)
	return
		(c >= "a" and c <= "z") or
		(c >= "A" and c <= "Z") or
		(c >= "0" and c <= "9")
end

function scb.is_custom_emoji(info)
	return info:sub(1, 4) == "http"
end

do
	local escape_replacements = {
		["\\"] = "\\\\",
		["{"] = "\\{" ,
		["}"] = "\\}"
	}

	function scb.escape(text)
		text = text:gsub(".", escape_replacements)

		local pos = 0
		while true do
			local start, url, _end = scb.find_url(text, pos + 1)
			if not start then break end
			pos = _end + 1
			text = text:sub(1, start - 1) .. "\\" .. url .. text:sub(_end + 1)
		end

		return text
	end
end

do
	-- i feel disgusted
	local insert = table.insert
	local SortByMember = table.SortByMember
	if not file.Exists("scb/emojis_used.txt", "DATA") then
		file.Write("scb/emojis_used.txt", "{}")
	end
	local emojis_times_used = util.JSONToTable(file.Read("scb/emojis_used.txt", "DATA"))

	function scb.search_emojis(text)
		local emojis = {}
		for name in SortedPairs(scb.emojis) do
			name = name:lower()
			local start = name:find(text, 1, true)
			if start then
				if name:sub(start - 1, start - 1) == "_" then
					start = 1
				elseif name == text then
					start = math.huge
				end
				local used_times = emojis_times_used[name]
				if start == 1 then
					if used_times then
						used_times = used_times + (9999999999 + (start ^ 4))
					else
						used_times = 9999999999
					end
				elseif used_times then
					used_times = used_times + (999999999 + (start ^ 4))
				else
					used_times = start
				end
				insert(emojis, {name = name, pos = -used_times})
			end
		end
		SortByMember(emojis, "pos", true)

		return emojis
	end

	function scb.emoji_set_used(emoji)
		emojis_times_used[emoji] = (emojis_times_used[emoji] or 0) + 1
		file.Write("scb/emojis_used.txt", util.TableToJSON(emojis_times_used))
	end
end

do
	-- https://stackoverflow.com/questions/23590304/finding-a-url-in-a-string-lua-pattern?rq=1

	-- https://raw.githubusercontent.com/incognico/list-of-top-level-domains/master/formats/json/tld-list.json
	local domains = [==[["aaa","aarp","abarth","abb","abbott","abbvie","abc","able","abogado","abudhabi","ac","academy","accenture","accountant","accountants","aco","active","actor","ad","adac","ads","adult","ae","aeg","aero","aetna","af","afamilycompany","afl","africa","ag","agakhan","agency","ai","aig","aigo","airbus","airforce","airtel","akdn","al","alfaromeo","alibaba","alipay","allfinanz","allstate","ally","alsace","alstom","am","americanexpress","americanfamily","amex","amfam","amica","amsterdam","an","analytics","android","anquan","anz","ao","aol","apartments","app","apple","aq","aquarelle","ar","arab","aramco","archi","army","arpa","art","arte","as","asda","asia","associates","at","athleta","attorney","au","auction","audi","audible","audio","auspost","author","auto","autos","avianca","aw","aws","ax","axa","az","azure","ba","baby","baidu","banamex","bananarepublic","band","bank","bar","barcelona","barclaycard","barclays","barefoot","bargains","baseball","basketball","bauhaus","bayern","bb","bbc","bbt","bbva","bcg","bcn","bd","be","beats","beauty","beer","bentley","berlin","best","bestbuy","bet","bf","bg","bh","bharti","bi","bible","bid","bike","bing","bingo","bio","biz","bj","bl","black","blackfriday","blanco","blockbuster","blog","bloomberg","blue","bm","bms","bmw","bn","bnl","bnpparibas","bo","boats","boehringer","bofa","bom","bond","boo","book","booking","boots","bosch","bostik","boston","bot","boutique","box","bq","br","bradesco","bridgestone","broadway","broker","brother","brussels","bs","bt","budapest","bugatti","build","builders","business","buy","buzz","bv","bw","by","bz","bzh","ca","cab","cafe","cal","call","calvinklein","cam","camera","camp","cancerresearch","canon","capetown","capital","capitalone","car","caravan","cards","care","career","careers","cars","cartier","casa","case","caseih","cash","casino","cat","catering","catholic","cba","cbn","cbre","cbs","cc","cd","ceb","center","ceo","cern","cf","cfa","cfd","cg","ch","chanel","channel","charity","chase","chat","cheap","chintai","chloe","christmas","chrome","chrysler","church","ci","cipriani","circle","cisco","citadel","citi","citic","city","cityeats","ck","cl","claims","cleaning","click","clinic","clinique","clothing","cloud","club","clubmed","cm","cn","co","coach","codes","coffee","college","cologne","com","comcast","commbank","community","company","compare","computer","comsec","condos","construction","consulting","contact","contractors","cooking","cookingchannel","cool","coop","corsica","country","coupon","coupons","courses","cr","credit","creditcard","creditunion","cricket","crown","crs","cruise","cruises","csc","cu","cuisinella","cv","cw","cx","cy","cymru","cyou","cz","dabur","dad","dance","data","date","dating","datsun","day","dclk","dds","de","deal","dealer","deals","degree","delivery","dell","deloitte","delta","democrat","dental","dentist","desi","design","dev","dhl","diamonds","diet","digital","direct","directory","discount","discover","dish","diy","dj","dk","dm","dnp","do","docs","doctor","dodge","dog","doha","domains","doosan","dot","download","drive","dtv","dubai","duck","dunlop","duns","dupont","durban","dvag","dvr","dz","earth","eat","ec","eco","edeka","edu","education","ee","eg","eh","email","emerck","energy","engineer","engineering","enterprises","epost","epson","equipment","er","ericsson","erni","es","esq","estate","esurance","et","etisalat","eu","eurovision","eus","events","everbank","exchange","expert","exposed","express","extraspace","fage","fail","fairwinds","faith","family","fan","fans","farm","farmers","fashion","fast","fedex","feedback","ferrari","ferrero","fi","fiat","fidelity","fido","film","final","finance","financial","fire","firestone","firmdale","fish","fishing","fit","fitness","fj","fk","flickr","flights","flir","florist","flowers","flsmidth","fly","fm","fo","foo","food","foodnetwork","football","ford","forex","forsale","forum","foundation","fox","fr","free","fresenius","frl","frogans","frontdoor","frontier","ftr","fujitsu","fujixerox","fun","fund","furniture","futbol","fyi","ga","gal","gallery","gallo","gallup","game","games","gap","garden","gb","gbiz","gd","gdn","ge","gea","gent","genting","george","gf","gg","ggee","gh","gi","gift","gifts","gives","giving","gl","glade","glass","gle","global","globo","gm","gmail","gmbh","gmo","gmx","gn","godaddy","gold","goldpoint","golf","goo","goodhands","goodyear","goog","google","gop","got","gov","gp","gq","gr","grainger","graphics","gratis","green","gripe","grocery","group","gs","gt","gu","guardian","gucci","guge","guide","guitars","guru","gw","gy","hair","hamburg","hangout","haus","hbo","hdfc","hdfcbank","health","healthcare","help","helsinki","here","hermes","hgtv","hiphop","hisamitsu","hitachi","hiv","hk","hkt","hm","hn","hockey","holdings","holiday","homedepot","homegoods","homes","homesense","honda","honeywell","horse","hospital","host","hosting","hot","hoteles","hotels","hotmail","house","how","hr","hsbc","ht","htc","hu","hughes","hyatt","hyundai","ibm","icbc","ice","icu","id","ie","ieee","ifm","iinet","ikano","il","im","imamat","imdb","immo","immobilien","in","industries","infiniti","info","ing","ink","institute","insurance","insure","int","intel","international","intuit","investments","io","ipiranga","iq","ir","irish","is","iselect","ismaili","ist","istanbul","it","itau","itv","iveco","iwc","jaguar","java","jcb","jcp","je","jeep","jetzt","jewelry","jio","jlc","jll","jm","jmp","jnj","jo","jobs","joburg","jot","joy","jp","jpmorgan","jprs","juegos","juniper","kaufen","kddi","ke","kerryhotels","kerrylogistics","kerryproperties","kfh","kg","kh","ki","kia","kim","kinder","kindle","kitchen","kiwi","km","kn","koeln","komatsu","kosher","kp","kpmg","kpn","kr","krd","kred","kuokgroup","kw","ky","kyoto","kz","la","lacaixa","ladbrokes","lamborghini","lamer","lancaster","lancia","lancome","land","landrover","lanxess","lasalle","lat","latino","latrobe","law","lawyer","lb","lc","lds","lease","leclerc","lefrak","legal","lego","lexus","lgbt","li","liaison","lidl","life","lifeinsurance","lifestyle","lighting","like","lilly","limited","limo","lincoln","linde","link","lipsy","live","living","lixil","lk","llc","loan","loans","locker","locus","loft","lol","london","lotte","lotto","love","lpl","lplfinancial","lr","ls","lt","ltd","ltda","lu","lundbeck","lupin","luxe","luxury","lv","ly","ma","macys","madrid","maif","maison","makeup","man","management","mango","map","market","marketing","markets","marriott","marshalls","maserati","mattel","mba","mc","mcd","mcdonalds","mckinsey","md","me","med","media","meet","melbourne","meme","memorial","men","menu","meo","merckmsd","metlife","mf","mg","mh","miami","microsoft","mil","mini","mint","mit","mitsubishi","mk","ml","mlb","mls","mm","mma","mn","mo","mobi","mobile","mobily","moda","moe","moi","mom","monash","money","monster","montblanc","mopar","mormon","mortgage","moscow","moto","motorcycles","mov","movie","movistar","mp","mq","mr","ms","msd","mt","mtn","mtpc","mtr","mu","museum","mutual","mutuelle","mv","mw","mx","my","mz","na","nab","nadex","nagoya","name","nationwide","natura","navy","nba","nc","ne","nec","net","netbank","netflix","network","neustar","new","newholland","news","next","nextdirect","nexus","nf","nfl","ng","ngo","nhk","ni","nico","nike","nikon","ninja","nissan","nissay","nl","no","nokia","northwesternmutual","norton","now","nowruz","nowtv","np","nr","nra","nrw","ntt","nu","nyc","nz","obi","observer","off","office","okinawa","olayan","olayangroup","oldnavy","ollo","om","omega","one","ong","onl","online","onyourside","ooo","open","oracle","orange","org","organic","orientexpress","origins","osaka","otsuka","ott","ovh","pa","page","pamperedchef","panasonic","panerai","paris","pars","partners","parts","party","passagens","pay","pccw","pe","pet","pf","pfizer","pg","ph","pharmacy","phd","philips","phone","photo","photography","photos","physio","piaget","pics","pictet","pictures","pid","pin","ping","pink","pioneer","pizza","pk","pl","place","play","playstation","plumbing","plus","pm","pn","pnc","pohl","poker","politie","porn","post","pr","pramerica","praxi","press","prime","pro","prod","productions","prof","progressive","promo","properties","property","protection","pru","prudential","ps","pt","pub","pw","pwc","py","qa","qpon","quebec","quest","qvc","racing","radio","raid","re","read","realestate","realtor","realty","recipes","red","redstone","redumbrella","rehab","reise","reisen","reit","reliance","ren","rent","rentals","repair","report","republican","rest","restaurant","review","reviews","rexroth","rich","richardli","ricoh","rightathome","ril","rio","rip","rmit","ro","rocher","rocks","rodeo","rogers","room","rs","rsvp","ru","rugby","ruhr","run","rw","rwe","ryukyu","sa","saarland","safe","safety","sakura","sale","salon","samsclub","samsung","sandvik","sandvikcoromant","sanofi","sap","sapo","sarl","sas","save","saxo","sb","sbi","sbs","sc","sca","scb","schaeffler","schmidt","scholarships","school","schule","schwarz","science","scjohnson","scor","scot","sd","se","search","seat","secure","security","seek","select","sener","services","ses","seven","sew","sex","sexy","sfr","sg","sh","shangrila","sharp","shaw","shell","shia","shiksha","shoes","shop","shopping","shouji","show","showtime","shriram","si","silk","sina","singles","site","sj","sk","ski","skin","sky","skype","sl","sling","sm","smart","smile","sn","sncf","so","soccer","social","softbank","software","sohu","solar","solutions","song","sony","soy","space","spiegel","sport","spot","spreadbetting","sr","srl","srt","ss","st","stada","staples","star","starhub","statebank","statefarm","statoil","stc","stcgroup","stockholm","storage","store","stream","studio","study","style","su","sucks","supplies","supply","support","surf","surgery","suzuki","sv","swatch","swiftcover","swiss","sx","sy","sydney","symantec","systems","sz","tab","taipei","talk","taobao","target","tatamotors","tatar","tattoo","tax","taxi","tc","tci","td","tdk","team","tech","technology","tel","telecity","telefonica","temasek","tennis","teva","tf","tg","th","thd","theater","theatre","tiaa","tickets","tienda","tiffany","tips","tires","tirol","tj","tjmaxx","tjx","tk","tkmaxx","tl","tm","tmall","tn","to","today","tokyo","tools","top","toray","toshiba","total","tours","town","toyota","toys","tp","tr","trade","trading","training","travel","travelchannel","travelers","travelersinsurance","trust","trv","tt","tube","tui","tunes","tushu","tv","tvs","tw","tz","ua","ubank","ubs","uconnect","ug","uk","um","unicom","university","uno","uol","ups","us","uy","uz","va","vacations","vana","vanguard","vc","ve","vegas","ventures","verisign","versicherung","vet","vg","vi","viajes","video","vig","viking","villas","vin","vip","virgin","visa","vision","vista","vistaprint","viva","vivo","vlaanderen","vn","vodka","volkswagen","volvo","vote","voting","voto","voyage","vu","vuelos","wales","walmart","walter","wang","wanggou","warman","watch","watches","weather","weatherchannel","webcam","weber","website","wed","wedding","weibo","weir","wf","whoswho","wien","wiki","williamhill","win","windows","wine","winners","wme","wolterskluwer","woodside","work","works","world","wow","ws","wtc","wtf","xbox","xerox","xfinity","xihuan","xin","测试","कॉम","परीक्षा","セール","佛山","ಭಾರತ","慈善","集团","在线","한국","ଭାରତ","大众汽车","点看","คอม","ভাৰত","ভারত","八卦","‏موقع‎","বাংলা","公益","公司","香格里拉","网站","移动","我爱你","москва","испытание","қаз","католик","онлайн","сайт","联通","срб","бг","бел","‏קום‎","时尚","微博","테스트","淡马锡","ファッション","орг","नेट","ストア","삼성","சிங்கப்பூர்","商标","商店","商城","дети","мкд","‏טעסט‎","ею","ポイント","新闻","工行","家電","‏كوم‎","中文网","中信","中国","中國","娱乐","谷歌","భారత్","ලංකා","電訊盈科","购物","測試","クラウド","ભારત","通販","भारतम्","भारत","भारोत","‏آزمایشی‎","பரிட்சை","网店","संगठन","餐厅","网络","ком","укр","香港","诺基亚","食品","δοκιμή","飞利浦","‏إختبار‎","台湾","台灣","手表","手机","мон","‏الجزائر‎","‏عمان‎","‏ارامكو‎","‏ایران‎","‏العليان‎","‏اتصالات‎","‏امارات‎","‏بازار‎","‏موريتانيا‎","‏پاکستان‎","‏الاردن‎","‏موبايلي‎","‏بارت‎","‏بھارت‎","‏المغرب‎","‏ابوظبي‎","‏السعودية‎","‏ڀارت‎","‏كاثوليك‎","‏سودان‎","‏همراه‎","‏عراق‎","‏مليسيا‎","澳門","닷컴","政府","‏شبكة‎","‏بيتك‎","‏عرب‎","გე","机构","组织机构","健康","ไทย","‏سورية‎","招聘","рус","рф","珠宝","‏تونس‎","大拿","みんな","グーグル","ελ","世界","書籍","ഭാരതം","ਭਾਰਤ","网址","닷넷","コム","天主教","游戏","vermögensberater","vermögensberatung","企业","信息","嘉里大酒店","嘉里","‏مصر‎","‏قطر‎","广东","இலங்கை","இந்தியா","հայ","新加坡","‏فلسطين‎","テスト","政务","xperia","xxx","xyz","yachts","yahoo","yamaxun","yandex","ye","yodobashi","yoga","yokohama","you","youtube","yt","yun","za","zappos","zara","zero","zip","zippo","zm","zone","zuerich","zw"]]==]
	domains = util.JSONToTable(domains)

	local tlds = {}
	for i = 1, #domains do
		tlds[domains[i]], domains[i] = true, nil
	end

	local protocols = {["http://"] = 0, ["https://"] = 0}
	local pattern = "(([%w_.~!*:@&+$/?%%#-]-)(%w[-.%w]*%.)(%w+)(:?)(%d*)(/?)([%w_.~!*:@&+$/?%%#=-]*))"

	function scb.find_url(text, start)
		local pos = start
		while true do
			local pos_start, pos_end, url, prot, subd, tld, colon, port, slash, path = text:find(pattern, pos)
			if not pos_start then break end

			if protocols[prot:lower()] == (1 - #slash) * #path and not subd:find("%W%W")
				and (colon == "" or port ~= "" and port + 0 < 65536)
				and (tlds[tld:lower()] or tld:find("^%d+$") and subd:find("^%d+%.%d+%.%d+%.$")
				and math.max(tld, subd:match("^(%d+)%.(%d+)%.(%d+)%.$")) < 256)
			then
				return pos_start, url, pos_end
			end

			pos = pos_end + 1
		end
	end
end

--addons/glorifiedhandcuffs/lua/autorun/sh_glorifiedhandcuffs_autoincluder.lua:

GlorifiedHandcuffs = GlorifiedHandcuffs or {
    Config = {},
    Version = "1.4.3"
}

print( "[GlorifiedHandcuffs] This server is running version " .. GlorifiedHandcuffs.Version .. "." )

--[[
    GlorifiedInclude - A library for including files & folders with ease.
    © 2020 GlorifiedInclude Developers

    Please read usage guide @ https://github.com/GlorifiedPig/glorifiedinclude/blob/master/README.md

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]--

local giVersion = 1.4

if not GlorifiedInclude or GlorifiedInclude.Version < giVersion then
    GlorifiedInclude = {
        Version = giVersion,
        Realm = {
            Server = 0,
            Client = 1,
            Shared = 2
        }
    }

    local isAddon = debug.getinfo( 1, "S" ).short_src[1] == "a"
    local include = include
    local AddCSLuaFile = AddCSLuaFile
    local SERVER = SERVER

    local GlorifiedInclude_Realm = GlorifiedInclude.Realm

    local includedFiles = {}

    function GlorifiedInclude.IncludeFile( fileName, realm, forceInclude, calledFromFolder, printName )
        if isAddon == false and not calledFromFolder then fileName = GM.FolderName .. "/gamemode/" .. fileName end
        if not forceInclude and includedFiles[fileName] then return end
        includedFiles[fileName] = true

        if realm == GlorifiedInclude_Realm.Shared or fileName:find( "sh_" ) then
            if printName then
                print( printName .. " > Including SH file '" .. fileName .. "'" )
            end
            if SERVER then AddCSLuaFile( fileName ) end
            include( fileName )
        elseif realm == GlorifiedInclude_Realm.Server or ( SERVER and fileName:find( "sv_" ) ) then
            if printName then
                print( printName .. " > Including SV file '" .. fileName .. "'" )
            end
            include( fileName )
        elseif realm == GlorifiedInclude_Realm.Client or fileName:find( "cl_" ) then
            if printName then
                print( printName .. " > Including CL file '" .. fileName .. "'" )
            end
            if SERVER then AddCSLuaFile( fileName )
            else include( fileName ) end
        end
    end

    function GlorifiedInclude.IncludeFolder( folderName, ignoreFiles, ignoreFolders, forceInclude, printName )
        if not isAddon then folderName = GM.FolderName .. "/gamemode/" .. folderName end

        if string.Right( folderName, 1 ) ~= "/" then folderName = folderName .. "/" end

        local filesInFolder, foldersInFolder = file.Find( folderName .. "*", "LUA" )

        if ignoreFiles ~= true then
            for _, v in ipairs( filesInFolder ) do
                GlorifiedInclude.IncludeFile( folderName .. v, nil, forceInclude, true, printName )
            end
        end

        if ignoreFolders ~= true then
            for _, v in ipairs( foldersInFolder ) do
                GlorifiedInclude.IncludeFolder( folderName .. v .. "/", ignoreFiles, ignoreFolders, forceInclude, printName )
            end
        end
    end
end

--[[
    -- Common practice would be to put all your includes here, for example:
        GlorifiedInclude.IncludeFolder( "modules/" )
        GlorifiedInclude.IncludeFile( "sh_config.lua" )
    -- Remember that files load in the order you include them in.
]]--

local function ghIncludeFile( fileName ) GlorifiedInclude.IncludeFile( fileName, nil, nil, nil, "GlorifiedHandcuffs" ) end
local function ghIncludeFolder( folderName ) GlorifiedInclude.IncludeFolder( folderName, nil, nil, nil, "GlorifiedHandcuffs" ) end
ghIncludeFile( "glorifiedhandcuffs/sh_glorifiedhandcuffs_compatibility.lua" )
local function IncludeGHFiles()
    ghIncludeFile( "glorifiedhandcuffs/sv_glorifiedhandcuffs_config.lua" )
    ghIncludeFile( "glorifiedhandcuffs/sh_glorifiedhandcuffs_config.lua" )
    ghIncludeFolder( "glorifiedhandcuffs/libraries/" )
    ghIncludeFolder( "glorifiedhandcuffs/localization/" )
    ghIncludeFile( "glorifiedhandcuffs/themes/cl_glorifiedhandcuffs_theme_default.lua" )
    ghIncludeFolder( "glorifiedhandcuffs/themes/" )
    ghIncludeFolder( "glorifiedhandcuffs/modules/ui/libraries/" )
    ghIncludeFolder( "glorifiedhandcuffs/modules/" )
    hook.Run( "GlorifiedHandcuffs.FinishedLoading" )
end

hook.Add( GlorifiedHandcuffs.HookRunName, "GlorifiedHandcuffs.AutoIncluder.IncludeGHFiles", IncludeGHFiles )
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/sh_glorifiedhandcuffs_compatibility.lua:

GlorifiedHandcuffs.HookRunName = "loadCustomDarkRPItems" -- Which hook should we start loading GlorifiedHandcuffs files in?
GlorifiedHandcuffs.ClearHandcuffVarsHooks = {
    "PlayerSpawn",
    "PlayerDeath",
    "playerArrested",
    "playerUnArrested"
}
GlorifiedHandcuffs.PlayerArrestedHook = "playerArrested"
GlorifiedHandcuffs.PlayerUnArrestedHook = "playerUnArrested"

function GlorifiedHandcuffs.IsPlayerPolice( ply )
    if not ply or isnumber( ply ) or not ply:IsValid() or not ply:IsPlayer() then return false end
    return ply:isCP()
end

function GlorifiedHandcuffs.FormatMoney( money )
    return DarkRP.formatMoney( money )
end

function GlorifiedHandcuffs.GetMoney( ply )
    if not ply or not ply:IsValid() or not ply:IsPlayer() then return false end
    return ply:getDarkRPVar( "money" )
end

function GlorifiedHandcuffs.CanPlayerAfford( ply, money )
    if not ply or not ply:IsValid() or not ply:IsPlayer() then return false end
    return ply:canAfford( money )
end

function GlorifiedHandcuffs.AddPlayerMoney( ply, money )
    if not ply or not ply:IsValid() or not ply:IsPlayer() then return false end
    return ply:addMoney( money )
end

function GlorifiedHandcuffs.IsPlayerArrested( ply )
    if not ply or not ply:IsValid() or not ply:IsPlayer() then return false end
    return ply:isArrested()
end

function GlorifiedHandcuffs.HasGunLicense( ply )
    if not ply or not ply:IsValid() or not ply:IsPlayer() then return false end
    return ply:getDarkRPVar( "HasGunlicense" )
end

function GlorifiedHandcuffs.IsPlayerWanted( ply )
    if not ply or not ply:IsValid() or not ply:IsPlayer() then return false end
    return ply:isWanted()
end

if SERVER then
    function GlorifiedHandcuffs.ArrestPlayer( ply, time, arrester )
        GlorifiedHandcuffs.ResetAllHandcuffVars( ply )
        ply:arrest( time, arrester )
    end

    function GlorifiedHandcuffs.UnArrestPlayer( ply )
        if not ply or not ply:IsValid() or not ply:IsPlayer() then return false end
        GlorifiedHandcuffs.ResetAllHandcuffVars( ply )
        ply:unArrest()
    end

    function GlorifiedHandcuffs.Notify( ply, msgType, time, message )
        DarkRP.notify( ply, msgType, time, message )
    end

    function GlorifiedHandcuffs.SetPlayerTeam( ply, team )
        ply:changeTeam( team, true, true, true )
    end
else
    function GlorifiedHandcuffs.Notify( msgType, time, message )
        notification.AddLegacy( message, msgType, time )
    end
end
--addons/thirdperson/lua/autorun/sh_thirdperson_init.lua:
return gluapack()()
--addons/thirdperson/lua/thirdperson/sh_thirdperson_config.lua:
return gluapack()()
--addons/thirdperson/lua/thirdperson/client/ferma/cl_ferma_fcolormixer.lua:
FERMA = FERMA or {}
FColorMixer = {}

function FColorMixer:Style( style )
    
    /* Defaults */
    self.FT = FERMA.CORE.Fermafy( style, self:GetParent() )
    FERMA.CORE.FermaDefaults( self )
    /* */

    /* Panel Specific Styling */
    self.FT.FAlphaBar = style["alphabar"] or false
    self.FT.FPalette = style["palette"] or false
    self.FT.FWangs = style["wangs"] or false
    self.FT.FColor = style["color"] or Color( 0, 0, 255 )

    if( self.FT.FAlphaBar ~= nil ) then
        self:SetAlphaBar( self.FT.FAlphaBar )
    end

    if( self.FT.FPalette ~= nil ) then
        self:SetPalette( self.FT.FPalette )
    end

    if( self.FT.FWangs ~= nil ) then
        self:SetWangs( self.FT.FWangs )
    end

    self:SetColor( self.FT.FColor )
    /* */
    
end

derma.DefineControl( "FColorMixer", "Better DColorMixer", FColorMixer, "DColorMixer" )
--addons/vape_swep/lua/autorun/sh_vapeswep.lua:
CreateConVar("vape_block_sounds", "0", FCVAR_REPLICATED, "Set to 1 to disable Vape SWEP speech sounds")
meta = FindMetaTable("Entity")
if meta.VapeOrigSetMaterial == nil then
	meta.VapeOrigSetMaterial = meta.SetMaterial
	meta.SetMaterial = function(self, materialName, forceMaterial)
		if self:GetClass():sub(1,11)=="weapon_vape" and materialName=="Models/effects/vol_light001" then return end
		self:VapeOrigSetMaterial(materialName, forceMaterial)
	end
end
--addons/bb_simpsit/lua/autorun/simp_sit_init.lua:
return gluapack()()
--lua/slib/vgui/cl_scollapsiblepanel.lua:
return gluapack()()
--lua/slib/vgui/cl_sdropdown.lua:
local PANEL = {}

local font = slib.createFont("Roboto", 13)
local textcolor = slib.getTheme("textcolor")
local hovercolor, margin, maincolor_5, maincolor_10 = slib.getTheme("hovercolor"), slib.getTheme("margin"), slib.getTheme("maincolor", 5), slib.getTheme("maincolor", 10)
local icon = Material("slib/down-arrow.png", "smooth")

function PANEL:Init()
    self:SetTall(slib.getScaledSize(25, "y"))
    self:setTitle("Select Option", TEXT_ALIGN_LEFT)
    self.iteration = 0
    self.options = {}
    self.maxHeightChilds = 0

    self.close = vgui.Create("DButton")
    self.close:Dock(FILL)
    self.close:SetText("")
    self.close:SetVisible(false)

    self.close.Paint = function() end

    self.close.DoClick = function()
        self.close:SetVisible(false)
        if IsValid(self.droppedMenu) then
            self.droppedMenu:SetVisible(false)
        end

        if isfunction(self.onClose) then self.onClose(self) end
    end

    self.droppedMenu = vgui.Create("SScrollPanel")
    self.droppedMenu:SetWide(self:GetWide())
    self.droppedMenu:SetVisible(false)
    self.droppedMenu.scrollbg = Color(42, 42, 42)
end

function PANEL:SetPlaceholder(str)
    self:setTitle(str, TEXT_ALIGN_LEFT)
end

function PANEL:OnRemove()
    if IsValid(self.droppedMenu) then self.droppedMenu:Remove() end
end

function PANEL:popupAlone()
    self:DoClick()

    local x, y = input.GetCursorPos()
    if !IsValid(self.droppedMenu) then return end
    self.droppedMenu:SetWide(self:GetWide())
    self.droppedMenu:SetPos(x, y)
    self.droppedMenu:MakePopup()
    self:SetVisible(false)
    self.poppedOut = true

    self.onClose = function() self:Remove() end

    return self
end

function PANEL:SizeToChilds()
    local canvas = self.droppedMenu:GetCanvas()
    local childsHeight = 0

    for k,v in ipairs(canvas:GetChildren()) do
        if self.maxHeightChilds > 0 and k > self.maxHeightChilds then
            break
        end
        
        childsHeight = childsHeight + v:GetTall()
    end

    canvas:InvalidateLayout(true)
    canvas:SetTall(childsHeight)

    self.droppedMenu:SetHeight(canvas:GetTall())
end

function PANEL:addOption(val)
    local iteration = self.iteration
    self.options[iteration] = vgui.Create("SButton", self.droppedMenu)
    :Dock(TOP)
    :SetLinePos(0)
    :SetTall(slib.getScaledSize(25, "y"))

    if self.buttonfont then
        self.options[iteration].font = self.buttonfont
    end

    local is_func = isfunction(val)

    self.options[iteration]:setTitle(is_func and val() or val, TEXT_ALIGN_LEFT)

    local wide = self.options[iteration]:GetWide()

    self.options[iteration].accentheight = 1

    self:SizeToChilds()

    self.options[iteration].DoClick = function(called)
        self.close.DoClick()
        self:setTitle(is_func and val() or val, TEXT_ALIGN_LEFT, true)
        self.sel_int = iteration + 1
        
        if isfunction(self.onValueChange) then
            self.onValueChange(is_func and val() or val)
        end
    end
    local isFirst = !self.firstchild
    self.options[iteration].Paint = function(s,w,h)
        if is_func then self.options[iteration]:setTitle(val(), TEXT_ALIGN_LEFT) end

        surface.SetDrawColor(s:IsHovered() and maincolor_5 or maincolor_10)
        surface.DrawRect(0, 0, w, h)

        draw.SimpleText(is_func and val() or val, self.buttonfont or self.options[iteration].font, margin, h * .5, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end
    
    if iteration == 0 then
        self.options[iteration].DoClick()
    end
    
    if wide > self:GetWide() then
        self:SetWide(wide)
    end
    
    self.iteration = self.iteration + 1

    self.firstchild = self.firstchild or self.options[iteration]
    self.lastchild = self.options[iteration]

    return self
end

function PANEL:SelectOption(int)
    self.options[int].DoClick(true)

    return self
end

function PANEL:Reposition()
    local x, y = self:LocalToScreen(0,self:GetTall())
    if !IsValid(self.droppedMenu) then return end
    self.droppedMenu:SetWide(self:GetWide())
    self.droppedMenu:SetPos(x, y)
    self.droppedMenu:MakePopup()
end

function PANEL:DoClick()
    self.close:SetVisible(!self.droppedMenu:IsVisible())
    self.close:MakePopup()

    self.droppedMenu:SetVisible(!self.droppedMenu:IsVisible())

    self:Reposition()
end

function PANEL:OnSizeChanged()
    self:Reposition()
end

function PANEL:PaintOver(w,h)
    local size = math.min(h * .7, slib.getScaledSize(12, "y"))
    local thickness = slib.getScaledSize(2, "x")

    draw.NoTexture()

    local wantedCol = self:IsHovered() and color_white or hovercolor

    surface.SetDrawColor(wantedCol)
    surface.SetMaterial(icon)
    surface.DrawTexturedRect(w - size - margin * 2, h * .5 - size * .5, size, size)
end

vgui.Register("SDropDown", PANEL, "SButton")
--lua/slib/vgui/cl_spopupbox.lua:
return gluapack()()
--addons/eprotect_1.5.24/lua/e_protect/languages/sh_german.lua:
return gluapack()()
--addons/eprotect_1.5.24/lua/e_protect/languages/sh_russian.lua:
if CLIENT then
    slib.setLang("eprotect", "ru", "sc-preview", "Предпросмотр снимка экрана - ")
    slib.setLang("eprotect", "ru", "net-info", "Net Информация - ")
    slib.setLang("eprotect", "ru", "ip-info", "IP Информация - ")
    slib.setLang("eprotect", "ru", "id-info", "ID Информация - ")
    slib.setLang("eprotect", "ru", "ip-correlation", "IP Совпадение - ")
    slib.setLang("eprotect", "ru", "table-viewer", "Просмотр таблиц")

    slib.setLang("eprotect", "ru", "tab-general", "Главная")
    slib.setLang("eprotect", "ru", "tab-identifier", "Идентификатор")
    slib.setLang("eprotect", "ru", "tab-netlimiter", "Net Лимит")
    slib.setLang("eprotect", "ru", "tab-netlogger", "Net Регистратор")
    slib.setLang("eprotect", "ru", "tab-exploitpatcher", "Патчер эксплойтов")
    slib.setLang("eprotect", "ru", "tab-exploitfinder", "Поиск эксплойтов")
    slib.setLang("eprotect", "ru", "tab-fakeexploits", "Поддельные эксплойты")
    slib.setLang("eprotect", "ru", "tab-datasnooper", "Просмотр Data'ы игрока")

    slib.setLang("eprotect", "ru", "player-list", "Список игроков")

    slib.setLang("eprotect", "ru", "ratelimit", "Ограничение скорости оборотов")
    slib.setLang("eprotect", "ru", "ratelimit-tooltip", "Это общий предел скорости оборотов, который будет отменен конкретными установленными пределами. (Xs / Y)")

    slib.setLang("eprotect", "ru", "timeout", "Тайм-аут")
    slib.setLang("eprotect", "ru", "timeout-tooltip", "Это тайм-аут, который сбросит счетчик предельного числа оборотов..")
    
    slib.setLang("eprotect", "ru", "overflowpunishment", "Наказание за переполнение")
    slib.setLang("eprotect", "ru", "overflowpunishment-tooltip", "Если включено, то люди получат наказание за слишком большое количество трафика сети. (1 = Кик, 2 = Бан)")

    slib.setLang("eprotect", "ru", "enable-networking", "Включить сеть")
    slib.setLang("eprotect", "ru", "disable-networking", "Отключить сеть")

    slib.setLang("eprotect", "ru", "disable-all-networking", "Отключить все сети")
    slib.setLang("eprotect", "ru", "disable-all-networking-tooltip", "Если этот параметр включен, никто не сможет подключиться к серверу по сети!")

    slib.setLang("eprotect", "ru", "player", "Игрок")
    slib.setLang("eprotect", "ru", "net-string", "Net строка")
    slib.setLang("eprotect", "ru", "called", "Называется")
    slib.setLang("eprotect", "ru", "len", "Длина")
    slib.setLang("eprotect", "ru", "type", "Тип")
    slib.setLang("eprotect", "ru", "activated", "Активирована")
    slib.setLang("eprotect", "ru", "secure", "Защищена")
    slib.setLang("eprotect", "ru", "ip", "IP Адрес")
    slib.setLang("eprotect", "ru", "date", "Дата")
    slib.setLang("eprotect", "ru", "country-code", "Код страны")
    slib.setLang("eprotect", "ru", "status", "Статус")

    slib.setLang("eprotect", "ru", "unknown", "Неизвестно")
    slib.setLang("eprotect", "ru", "secured", "Защищена")

    slib.setLang("eprotect", "ru", "check-ids", "Проверить ID")
    slib.setLang("eprotect", "ru", "correlate-ip", "Соотнести IP")
    slib.setLang("eprotect", "ru", "family-share-check", "Проверить Семейный доступ")

    slib.setLang("eprotect", "ru", "ply-sent-invalid-data", "Этот игрок отправил неверные данные!")
    slib.setLang("eprotect", "ru", "ply-failed-retrieving-data", "%s не удалось получить данные!")

    slib.setLang("eprotect", "ru", "net-limit-desc", "Число здесь - это максимальное количество раз, которое люди могут отправить на сервер в секунду, прежде чем будут ограничены по частоте.")

    slib.setLang("eprotect", "ru", "capture", "Скриншот")
    slib.setLang("eprotect", "ru", "check-ips", "Проверить IP")
    slib.setLang("eprotect", "ru", "fetch-data", "Получить Data'у ")
elseif SERVER then
    slib.setLang("eprotect", "ru", "invalid-player", "Этот игрок недействителен!")
    slib.setLang("eprotect", "ru", "kick-net-overflow", "Вас выгнали за переполнение сети!")
    slib.setLang("eprotect", "ru", "banned-net-overflow", "Вас забанили за переполнение сети!")
    slib.setLang("eprotect", "ru", "banned-net-exploitation", "Вас забанили за эксплуатацию в сети!")
    slib.setLang("eprotect", "ru", "kick-malicious-intent", "Вас выгнали за злой умысел!")
    slib.setLang("eprotect", "ru", "banned-malicious-intent", "Вас забанили за злой умысел!")

    slib.setLang("eprotect", "ru", "banned-exploit-attempt", "Вас забанили за попытку использовать эксплоит!")

    slib.setLang("eprotect", "ru", "sc-timeout", "Вам нужно подождать %s секунд, пока вы снова не сможете сделать снимок экрана %s!")
    slib.setLang("eprotect", "ru", "sc-failed", "Не удалось получить снимок экрана %s, это подозрительно!")

    slib.setLang("eprotect", "ru", "has-family-share", "%s играет в игру через семейный ресурс, SteamID64 владельца %s!")
    slib.setLang("eprotect", "ru", "no-family-share", "%s не играет в игру через семейный просмотр.")
    slib.setLang("eprotect", "ru", "no-correlation", "Нам не удалось сопоставить IP-адреса для %s")
end
--addons/gprotect_1.13.99/lua/g_protect/sh_gprotect_config.lua:
return gluapack()()
--addons/gprotect_1.13.99/lua/g_protect/sh_util.lua:
gProtect.returnStatements = function(fallback, bad, ...)
    local args = {...}

    for k, v in pairs(args) do
        if isfunction(v) then v = v() end
        if v == bad then return bad end
    end

    return fallback
end

--addons/gprotect_1.13.99/lua/g_protect/sh_gprotect.lua:
return gluapack()()
--addons/skeypad_1.2.36/lua/s_keypad/languages/sh_italian.lua:
slib.setLang("skeypad", "it", "title", "sKeypad - Impostazioni")
slib.setLang("skeypad", "it", "granted", "Autorizzato")
slib.setLang("skeypad", "it", "denied", "Negato")
slib.setLang("skeypad", "it", "awaiting", "In attesa")
slib.setLang("skeypad", "it", "undone_keypad", "Keypad Eliminato")
slib.setLang("skeypad", "it", "tool_name", "sKeypad")
slib.setLang("skeypad", "it", "tool_usage", [[Questo tool crea le fading door e le collega ai keypad.
1. Seleziona il prop desiderato per creare una porta.
2. Seleziona da un'altra parte per creare il keypad.
3. Premi F2 su un keypad per modificare le seguenti impostazioni.]])

slib.setLang("skeypad", "it", "tool_desc", "Posiziona una fading door e un keypad in un solo tool!")
slib.setLang("skeypad", "it", "hold_length", "Tenere per")
slib.setLang("skeypad", "it", "start_faded", "Inizia aperta")
slib.setLang("skeypad", "it", "start_faded_help", "Se selezionato, la porta partirà con lo stato aperto.")
slib.setLang("skeypad", "it", "auth_cansettings", "Gestione autorizzazioni")
slib.setLang("skeypad", "it", "auth_cansettings_help", "Se selezionato, le persone autorizzate potranno cambiare le impostazioni.")
slib.setLang("skeypad", "it", "tooltip", "Assicurati di cambiare le password di default!")
slib.setLang("skeypad", "it", "hide_passcode", "Nascondi password")
slib.setLang("skeypad", "it", "hide_passcode_help", "Abilita la seguente per nascondere la password.")
slib.setLang("skeypad", "it", "access_code", "Codice di accesso")
slib.setLang("skeypad", "it", "4digit_passcode", "Lunghezza massima: 4")
slib.setLang("skeypad", "it", "max_4digit", "La password può avere un massimo di 4 numeri.")
slib.setLang("skeypad", "it", "triggered_alarm", "Qualcuno ha fatto scattare l'allarme su i tuoi Keypad!")
slib.setLang("skeypad", "it", "cannot_afford", "Non puoi permetterti questo miglioramento!")
slib.setLang("skeypad", "it", "purchased_upgrade", "Hai migliorato il tuo Keypad con successo per $%s")
slib.setLang("skeypad", "it", "auth_list", "Lista autorizzati")
slib.setLang("skeypad", "it", "no_entries", "Nessuna voce.")
slib.setLang("skeypad", "it", "auth_party", "Membri party autorizzati")
slib.setLang("skeypad", "it", "auth_gang", "Membri gang autorizzati")
slib.setLang("skeypad", "it", "auth_fpp_buddy", "Autorizza amici in FPP")
slib.setLang("skeypad", "it", "upgrades", "Miglioramenti")
slib.setLang("skeypad", "it", "modes", "Modalità")
slib.setLang("skeypad", "it", "exploit_attempt", "Tentato uso di exploit")
slib.setLang("skeypad", "it", "insufficient_rank", "Non hai un rank sufficente per fare questo!")
slib.setLang("skeypad", "it", "access_granted", "Accesso Consentito")
slib.setLang("skeypad", "it", "access_denied", "Accesso Negato")
slib.setLang("skeypad", "it", "log_granted", "{1} ha aperto {2} con successo.")
slib.setLang("skeypad", "it", "log_denied", "{1} ha fallito nel tentativo di aprire {2}.")
slib.setLang("skeypad", "it", "select_option", "Seleziona l'opzione")
slib.setLang("skeypad", "it", "players", "Giocatori")
slib.setLang("skeypad", "it", "darkrp_jobs", "Lavori DarkRP")
slib.setLang("skeypad", "it", "cracking", "Sabotando")
--addons/skeypad_1.2.36/lua/s_keypad/languages/sh_russian.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/autorun/sreward_loader.lua:
if slib then slib.loadFolder("s_reward/", true, {{"s_reward/", "sh_sreward_config.lua"}, {"s_reward/", "sv_sreward_config.lua"}, {"s_reward/core/", "sv_storage.lua"}}) end
hook.Add("slib:loadedUtils", "sR:Init_SReward", function() slib.loadFolder("s_reward/", true, {{"s_reward/", "sh_sreward_config.lua"}, {"s_reward/", "sv_sreward_config.lua"}, {"s_reward/core/", "sv_storage.lua"}}) end)
--addons/sreward_1.5.30/lua/s_reward/core/cl_admin_menu.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/core/cl_sreward.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/core/cl_sreward.lua:
sReward = sReward or {}
sReward.data = sReward.data or {}
sReward.data["referrals"] = sReward.data["referrals"] or {}
sReward.data["coupons"] = sReward.data["coupons"] or {}
sReward.data["rewards"] = sReward.data["rewards"] or {}
sReward.data["shop"] = sReward.data["shop"] or {}

local receivedNet

sReward.couponNameToKey = sReward.couponNameToKey or {}

local sreward_menu

local white, textcolor, sidebarbttncolor, textcolor_min10, textcolor_min50, accentcolor, maincolor, maincolor_5, maincolor_7, maincolor_10, maincolor_12, maincolor_15, maincolor_90, successcolor, margin = Color(255,255,255), slib.getTheme("textcolor"), slib.getTheme("sidebarbttncolor"), slib.getTheme("textcolor", -10), slib.getTheme("textcolor", -50), slib.getTheme("accentcolor"), slib.getTheme("maincolor"), slib.getTheme("maincolor", 5), slib.getTheme("maincolor", 7), slib.getTheme("maincolor", 10), slib.getTheme("maincolor", 12), slib.getTheme("maincolor", 15), slib.getTheme("maincolor", 90), slib.getTheme("successcolor"), slib.getTheme("margin")
local failcolor = slib.getTheme("failcolor")

local maincolor_a100 = table.Copy(maincolor)
maincolor_a100.a = 100

local outline = Color(255,255,255,3)

local overlineFont = slib.createFont("Roboto", 13)

local hovercolor = slib.getTheme("hovercolor")
local reward_ico, task_ico, tokens_ico, referral_ico, copy_ico, coupon_ico, smiley_ico, buy_ico, admin_ico, return_ico = Material("sreward/giftbox.png", "smooth"), Material("sreward/checklist.png", "smooth"), Material("sreward/tokens.png", "smooth"), Material("sreward/referring.png", "smooth"), Material("sreward/copy.png", "smooth"), Material("sreward/coupon.png", "smooth"), Material("sreward/smiley.png", "smooth"), Material("sreward/buy.png", "smooth"), Material("sreward/admin.png", "smooth"), Material("sreward/back.png", "smooth")
local settings_ico, delete_ico = Material("sreward/gear.png", "smooth"), Material("sreward/delete.png", "smooth")
local accept_ico = Material("sreward/accept.png", "smooth")
local shadow_col = Color(0,0,0,100)

local friend_ico, foryou_ico = Material("sreward/friend.png", "smooth"), Material("sreward/for-you.png", "smooth")

sReward.GetTokens = function(ply)
    local sid = ply:SteamID()
    return sReward.data[sid] and sReward.data[sid].tokens or 0
end

local function addIconButton(selcol, icon, func, parent)
    local bttn = vgui.Create("SButton", parent)
    bttn:SetWide(bttn:GetTall())
    bttn.DoClick = function()
        func()
    end

    local hovcol = table.Copy(selcol or white)

    bttn.Paint = function(s,w,h)
        hovcol.a = bttn.hovopacity or hovercolor.a
        
        local icosize = h * .7
        local shadowsize = h * .71

        local wantedCol = s:IsHovered() and (selcol or white) or hovcol

        surface.SetDrawColor(slib.lerpColor(s, wantedCol))
        surface.SetMaterial(icon)
        surface.DrawTexturedRect(w * .5 - icosize * .5, h * .5 - icosize * .5, icosize, icosize)

        if s.shadow then
            surface.SetDrawColor(shadow_col)
            surface.SetMaterial(icon)
            surface.DrawTexturedRect(w * .5 - shadowsize * .5, h * .5 - shadowsize * .5, shadowsize, shadowsize)
        end
    end

    return bttn
end

local function checkRewards(data)
    if !data or table.IsEmpty(data.reward) then slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "no_rewards")) return end
    
    local close = vgui.Create("SButton")
    close:SetSize(ScrW(), ScrH())
    close:MakePopup()
    close.Paint = function(s,w,h) end

    close.DoClick = function()
        close:Remove()
    end

    local rewards = vgui.Create("SFrame", close)
    :SetSize(slib.getScaledSize(300, "x"),slib.getScaledSize(200, "y"))
    :setTitle(slib.getLang("sreward", sReward.config["language"], "rewards_title", data.name))
    :Center()
    :addCloseButton()
    :MakePopup()
    :setBlur(true)

    rewards.OnRemove = function()
        close:Remove()
    end

    local canvas = vgui.Create("SScrollPanel", rewards.frame)
    canvas:Dock(FILL)
    canvas:GetCanvas():DockPadding(margin,0,margin,margin)

    for k,v in pairs(data.reward) do
        local reward = vgui.Create("EditablePanel", canvas)
        reward:Dock(TOP)
        reward:DockMargin(0,margin,0,0)
        reward:SetTall(slib.getScaledSize(25, "y"))

        local icon = sReward.Rewards[k]
        local hasIcon = icon and type(icon) == "IMaterial"

        reward.Paint = function(s,w,h)
            surface.SetDrawColor(maincolor_7)
            surface.DrawRect(0,0,w,h)

            local icosize, gap = h * .7, h * .15

            if hasIcon then
                surface.SetDrawColor(white)
                surface.SetMaterial(icon)
                surface.DrawTexturedRect(gap, gap, icosize, icosize)
            end

            draw.SimpleText(slib.getLang("sreward", sReward.config["language"], k), slib.createFont("Roboto", 16), hasIcon and (gap + gap + icosize + margin) or margin, h * .5, textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
            draw.SimpleText(isnumber(v) and ("x"..string.Comma(v)) or v, slib.createFont("Roboto", 16), w - margin, h * .5, textcolor_min50, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER)
        end
    end
end

sReward.addStoreItem = function(canvas, data, row, column)
    local item = vgui.Create("EditablePanel", canvas)
    item.name = data.name
    item.data = data

    local showcase_size = 0

    item.InvalidateLayout = function()
        local addgap = math.floor(margin * 4 / 3)
        local shopitem_wide = math.ceil(((canvas:GetWide() - margin) / 3)) - addgap
        local shopitem_tall = shopitem_wide + slib.getScaledSize(31, "y")
        local fullwidth = shopitem_wide + margin
        showcase_size = shopitem_wide * .9

        item:SetSize(shopitem_wide, shopitem_tall)
        item:SetPos(margin + column * (shopitem_wide + addgap), margin + row * (shopitem_tall + margin))

        for k,v in ipairs(item:GetChildren()) do
            local showcase_size = item:GetWide()
            local gap = showcase_size * .05
            v:SetPos(v.right and (showcase_size - v:GetWide() - gap) or gap,gap)

            v.shadow = true
            v.hovopacity = 120
        end
    end

    item.InvalidateLayout()

    item.Paint = function(s,w,h)
        local gap = showcase_size * .05
        surface.SetDrawColor(maincolor_7)
        surface.DrawRect(0,0,w,h)

        surface.SetDrawColor(maincolor)
        surface.DrawRect(gap, h * .9, showcase_size, 1)
        
        local ico, loading = slib.ImgurGetMaterial(data.imgurid)
        
        if !loading then
            surface.SetDrawColor(white)
            surface.SetMaterial(ico)
            surface.DrawTexturedRect(gap, gap, showcase_size, showcase_size)
        else
            s.rotation = s.rotation or 0
            s.rotation = s.rotation + 1

            local icosize = showcase_size * .5

            surface.SetDrawColor(white)
            surface.SetMaterial(ico)
            surface.DrawTexturedRectRotated(w * .5, gap + showcase_size * .5, icosize, icosize, -s.rotation)
        end

        draw.SimpleText(data.name, slib.createFont("Roboto", 14), w * .5, gap + showcase_size + margin, textcolor_min10, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
        draw.SimpleText(data.price.." TKN", slib.createFont("Roboto", 13), w * .5, h - margin, successcolor, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
    end

    local bttnsize = slib.getScaledSize(20, "y")
    item.addButton = function(selcol, icon, func, right)
        local showcase_size = item:GetWide()
        local gap = showcase_size * .05
        local bttn = addIconButton(selcol, icon, func, item)
        bttn:SetPos(right and (showcase_size - bttnsize - gap) or gap,gap)
        bttn:SetSize(bttnsize, bttnsize)
        bttn.right = right
    end

    return item
end

local topcolors = {
    [1] = Color(212, 175, 55),
    [2] = Color(211, 211, 211),
    [3] = Color(205, 127, 50)
}

sReward.addMultibox = function(parent, data)
    local panel = vgui.Create("EditablePanel", parent)
    panel:DockMargin(0,margin,0,0)
    panel:SetTall(slib.getScaledSize(35, "y"))
    panel:Dock(TOP)
    panel.name = data[1].val
    
    panel.Paint = function(s,w,h)
        local icosize = h * .6
        surface.SetDrawColor(maincolor_7)
        surface.DrawRect(0,0,w,h)

        local xoffset = s.avatar and h - 2 + margin or margin

        for k,v in ipairs(data) do
            panel.name = isfunction(v.val) and v.val() or v.val
            draw.SimpleText(v.title, overlineFont, xoffset + (w * v.offset), h * .5 - margin * .5, textcolor_min50, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM)
            draw.SimpleText(panel.name, slib.createFont("Roboto", 15), xoffset + (w * v.offset), h * .5 - margin * .5, isFriend and successcolor or textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
        end
    end

    panel.addAvatar = function(ply)
        panel.avatar = vgui.Create( "AvatarImage", panel )
        panel.avatar:SetSize( panel:GetTall() - 4, panel:GetTall() - 4 )
        panel.avatar:SetPos( 2, 2 )
        panel.avatar:SetPlayer( ply, 64 )
    end

    panel.addButton = function(title, func)
        local bttn = vgui.Create("SButton", panel)
        bttn:Dock(RIGHT)
        bttn:DockMargin(0,margin + margin,margin,margin + margin)
        bttn:setTitle(title)
        bttn.DoClick = function()
            func(ply)
        end

        return bttn
    end

    return panel
end

local function createCouponBox(parent, title, code)
    local couponbox = vgui.Create("EditablePanel", parent)
    couponbox:Dock(TOP)
    couponbox:SetTall(slib.getScaledSize(50, "y"))
    couponbox.Paint = function(s,w,h)
        surface.SetDrawColor(maincolor_10)
        surface.DrawRect(0,0,w,h)

        draw.SimpleText(title, slib.createFont("Roboto", 16), margin, h * .25, topcolors[index] or textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end

    local codebox = vgui.Create("STextEntry", couponbox)
    codebox:AccentLineTop(true)
    codebox:SetValue(code)
    codebox:Dock(BOTTOM)
    codebox:SetDisabled(true)
    codebox.bg = maincolor_5

    local bttnsize = slib.getScaledSize(20, "y")
    local gap = slib.getScaledSize(2.5, "y")

    local copy = addIconButton(nil, copy_ico, function() SetClipboardText(code) end, couponbox)
    copy:Dock(RIGHT)
    copy:DockMargin(0, gap, gap, gap)
    copy:SetSize(bttnsize, bttnsize)

    local delete = addIconButton(failcolor, delete_ico, function()
        local popup = vgui.Create("SPopupBox")
        :setTitle(slib.getLang("sreward", sReward.config["language"], "are_you_sure"))
        :setBlur(true)
        :addChoise(slib.getLang("sreward", sReward.config["language"], "no"))
        :addChoise(slib.getLang("sreward", sReward.config["language"], "yes"), function()
            local data = file.Read("sreward/data/coupons.json", "DATA")
            if data then data = util.JSONToTable(data) else data = {} end
        
            data[code] = nil
        
            file.Write("sreward/data/coupons.json", util.TableToJSON(data))
    
            couponbox:Remove()
        end)
        :setText(slib.getLang("sreward", sReward.config["language"], "this_delete", title))
    end, couponbox)
    delete:Dock(RIGHT)
    delete:DockMargin(gap, gap, -gap, gap)
    delete:SetSize(bttnsize, bttnsize)

    return couponbox
end

local function receiveCoupon(title, code)
    local close = vgui.Create("SButton")
    close:SetSize(ScrW(), ScrH())
    close:MakePopup()
    close.Paint = function(s,w,h) end

    close.DoClick = function()
        close:Remove()
    end

    local coupon = vgui.Create("SFrame", close)
    :SetSize(slib.getScaledSize(260, "x"),slib.getScaledSize(150, "y"))
    :setTitle(slib.getLang("sreward", sReward.config["language"], "coupon_receive_title"))
    :Center()
    :addCloseButton()
    :MakePopup()
    :setBlur(true)

    local icosize = coupon.frame:GetTall() * .4
    local parse = markup.Parse("<colour="..textcolor_min10.r..","..textcolor_min10.g..","..textcolor_min10.b..","..textcolor_min10.a.."><font="..slib.createFont("Roboto", 16)..">"..slib.getLang("sreward", sReward.config["language"], "coupon_receive").."</font></colour>", coupon.frame:GetWide())
    coupon.frame.PaintOver = function(s,w,h)
        local x, y = w * .5 - icosize * .5, h * .3 - icosize * .5
        surface.SetDrawColor(successcolor)
        surface.SetMaterial(smiley_ico)
        surface.DrawTexturedRect(x, y, icosize, icosize)

        parse:Draw(w * .5, h * .75, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end

    coupon.OnRemove = function()
        close:Remove()
    end

    file.CreateDir("sreward/data")
    local data = file.Read("sreward/data/coupons.json", "DATA")
    if data then data = util.JSONToTable(data) else data = {} end

    data[code] = {title = title, index = table.Count(data)}

    file.Write("sreward/data/coupons.json", util.TableToJSON(data))

end

local function openCoupons()
    local data = file.Read("sreward/data/coupons.json", "DATA")
    if data then data = util.JSONToTable(data) else data = {} end

    if table.IsEmpty(data) then
        slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "no_coupons"))
    return end

    local close = vgui.Create("SButton")
    close:SetSize(ScrW(), ScrH())
    close:MakePopup()
    close.Paint = function(s,w,h) end

    close.DoClick = function()
        close:Remove()
    end

    local couponframe = vgui.Create("SFrame", close)
    :SetSize(slib.getScaledSize(300, "x"),slib.getScaledSize(285, "y"))
    :setTitle(slib.getLang("sreward", sReward.config["language"], "coupon_title"))
    :Center()
    :addCloseButton()
    :MakePopup()
    :setBlur(true)

    local scroller = vgui.Create("SScrollPanel", couponframe.frame)
    scroller:Dock(FILL)
    scroller:GetCanvas():DockPadding(margin,0,margin,margin)

    for code, v in pairs(data) do
        local couponbox = createCouponBox(scroller, v.title, code)
        couponbox:DockMargin(0,margin,0,0)
        couponbox:SetZPos(v.index)
    end

    couponframe.OnRemove = function()
        close:Remove()
    end
end

sReward.openRewards = function(x, y)
    net.Start("sR:NetworkingHandeler")
    net.WriteUInt(0,3)
    net.WriteBool(true)
    net.SendToServer()

    sreward_menu = vgui.Create("SFrame")
    :SetSize(slib.getScaledSize(sReward.config["size"].w, "x"),slib.getScaledSize(sReward.config["size"].h, "y"))
    :setTitle(slib.getLang("sreward", sReward.config["language"], "main_title"))
    :Center()
    :addCloseButton()
    :MakePopup()

    sreward_menu.PaintOver = function(s,w,h)
        if s.nextThink and s.nextThink > CurTime() then return end

        s.nextThink = CurTime() + .5

        s.admin:SetVisible(sReward.HasPermission(LocalPlayer(), "sReward_AdminMenu"))
        if IsValid(s.topbar) then s.topbar:InvalidateLayout() end
    end

    if sReward.config["enabled_tabs"]["tasks"] then
        sreward_menu:addTab(slib.getLang("sreward", sReward.config["language"], "tasks"), "sreward/tabs/tasks.png")
    end

    if sReward.config["enabled_tabs"]["referral"] then
        sreward_menu:addTab(slib.getLang("sreward", sReward.config["language"], "referral"), "sreward/tabs/referral.png")
    end

    if sReward.config["enabled_tabs"]["shop"] then
        sreward_menu:addTab(slib.getLang("sreward", sReward.config["language"], "shop"), "sreward/tabs/shop.png")
    end

    if sReward.config["enabled_tabs"]["leaderboard"] then
        sreward_menu:addTab(slib.getLang("sreward", sReward.config["language"], "leaderboard"), "sreward/tabs/leaderboard.png")
    end

    sreward_menu:setActiveTab()
    
    if isnumber(x) and isnumber(y) then
        sreward_menu:SetPos(x,y)
    end

    sreward_menu.OnRemove = function()
        if sreward_menu.changing then return end
        net.Start("sR:NetworkingHandeler")
        net.WriteUInt(0,3)
        net.WriteBool(false)
        net.SendToServer()
    end

    local topbttnsize = sreward_menu.close:GetTall()
    local bttngap = sreward_menu.topbar:GetTall() - topbttnsize

    sreward_menu.topbar:DockPadding(0,0,topbttnsize * .85,0)

    local admin = vgui.Create("SButton", sreward_menu.topbar)
    admin:Dock(RIGHT)
    admin:DockMargin(-3, bttngap / 2, margin / 2, bttngap / 2)
    admin:SetWide(topbttnsize)
    admin:SetVisible(sReward.HasPermission(LocalPlayer(), "sReward_AdminMenu"))
    
    admin.DoClick = function()
        sreward_menu.changing = true
        sReward.openAdminmenu(sreward_menu)
    end

    admin.Paint = function(s,w,h)
        local icosize = h * .6
        local wantedCol = s:IsHovered() and white or hovercolor

        surface.SetDrawColor(slib.lerpColor(s, wantedCol))
        surface.SetMaterial(admin_ico)
        surface.DrawTexturedRect(w * .5 - icosize * .5, h * .5 - icosize * .5, icosize, icosize)
    end

    sreward_menu.admin = admin

    local coupons = vgui.Create("SButton", sreward_menu.topbar)
    coupons:Dock(RIGHT)
    coupons:DockMargin(0, bttngap / 2, margin / 2, bttngap / 2)
    coupons:SetWide(topbttnsize)
    
    coupons.DoClick = function()
        openCoupons()
    end

    coupons.Paint = function(s,w,h)
        local icosize = h * .7
        local wantedCol = s:IsHovered() and white or hovercolor

        surface.SetDrawColor(slib.lerpColor(s, wantedCol))
        surface.SetMaterial(coupon_ico)
        surface.DrawTexturedRect(w * .5 - icosize * .5, h * .5 - icosize * .5, icosize, icosize)
    end

    -- Referral tab
    if IsValid(sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "referral")]) then
        local gradient_d = surface.GetTextureID("vgui/gradient_down")
        local podium = vgui.Create("EditablePanel", sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "referral")])
        podium:Dock(FILL)
        podium:DockMargin(margin, margin, margin, margin)
        podium:SetTall(sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "referral")]:GetTall() * .69)
        podium.Paint = function(s,w,h)
            local data = sReward.data["referral_top3"]

            local first, second, third = data and data[1] and data[1].amount or 0, data and data[2] and data[2].amount or 0, data and data[3] and data[3].amount or 0

            surface.SetDrawColor(maincolor_7)
            surface.DrawRect(0,0,w,h)

            draw.SimpleText(slib.getLang("sreward", sReward.config["language"], "top_3"), slib.createFont("Roboto", 24), w * .5, margin, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
            
            if first <= 0 then
                draw.SimpleText(slib.getLang("sreward", sReward.config["language"], "no_data"), slib.createFont("Roboto", 18), w * .5, h * .5, textcolor_min50, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
            return end

            local wide = w * .2
            local medal_size = wide * .3
            local max_h = h * .8
            local gap = w * .1
            local second_p, third_p = second / first, third / first

            surface.SetDrawColor(topcolors[2])
            surface.SetTexture(gradient_d)
            surface.DrawTexturedRect(w * .5 - wide * 1.5 - gap,h - max_h * second_p - 4,wide,max_h * second_p)
            surface.DrawOutlinedRect(w * .5 - wide * 1.5 - gap,h - max_h * second_p - 4,wide,max_h * second_p)

            surface.SetDrawColor(topcolors[1])
            surface.SetTexture(gradient_d)
            surface.DrawTexturedRect(w * .5 - wide * .5,h - max_h - 4,wide,max_h)
            surface.DrawOutlinedRect(w * .5 - wide * .5,h - max_h - 4,wide,max_h)

            surface.SetDrawColor(topcolors[3])
            surface.SetTexture(gradient_d)
            surface.DrawTexturedRect(w * .5 + wide * .5 + gap,h - max_h * third_p - 4,wide,max_h * third_p)
            surface.DrawOutlinedRect(w * .5 + wide * .5 + gap,h - max_h * third_p - 4,wide,max_h * third_p)

            local score_h = slib.getScaledSize(18, "y")

            draw.SimpleText(first, slib.createFont("Roboto", 19), w * .5, h - max_h - margin * 2, topcolors[1], TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
            draw.SimpleText(second, slib.createFont("Roboto", 19), w * .5 - wide - gap, h - max_h * second_p - margin * 2, topcolors[2], TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
            draw.SimpleText(third, slib.createFont("Roboto", 19), w * .5 + wide + gap, h - max_h * third_p - margin * 2, topcolors[3], TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)

            
            draw.SimpleText(slib.findName(data[1].sid64), slib.createFont("Roboto", 19), w * .5, h - max_h - margin * 2 - score_h, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
            draw.SimpleText(data[2] and slib.findName(data[2].sid64) or "N/A", slib.createFont("Roboto", 19), w * .5 - wide - gap, h - max_h * second_p - margin * 2 - score_h, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
            draw.SimpleText(data[3] and slib.findName(data[3].sid64) or "N/A", slib.createFont("Roboto", 19), w * .5 + wide + gap, h - max_h * third_p - margin * 2 - score_h, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
        end

        local referral_info = vgui.Create("EditablePanel", sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "referral")])
        referral_info:SetTall(slib.getScaledSize(92, "y"))
        referral_info:Dock(BOTTOM)

        local rewardbttn_h = referral_info:GetTall() * .6

        local box_w = (sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "referral")]:GetWide() - margin * 2) * .5

        local referral_rewards = vgui.Create("EditablePanel", referral_info)
        referral_rewards:Dock(LEFT)
        referral_rewards:DockMargin(margin,0,margin * .5,margin)
        referral_rewards:DockPadding(0,slib.getScaledSize(10, "y"), 0,0)
        referral_rewards:SetWide(box_w)
        referral_rewards.Paint = function(s,w,h)
            surface.SetDrawColor(maincolor_7)
            surface.DrawRect(0,0,w,h)

            draw.SimpleText(slib.getLang("sreward", sReward.config["language"], "rewards"), slib.createFont("Roboto", 19), w * .5, margin, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
        end

        local rewardBtn_size = box_w * .3
        local width_left = box_w - (rewardBtn_size * 2)

        local referrer_reward = vgui.Create("SButton", referral_rewards)
        referrer_reward:Dock(LEFT)
        referrer_reward:DockMargin(width_left * .33, 0, width_left * .33,0)
        referrer_reward:SetWide(rewardBtn_size)
        referrer_reward.col = table.Copy(color_white)
        referrer_reward.Paint = function(s,w,h)
            local ico_size = h * .45
            s.col.a = slib.lerpNum(s, s:IsHovered() and 30 or 255)
            surface.SetDrawColor(s.col)
            surface.SetMaterial(foryou_ico)
            surface.DrawTexturedRect(w * .5 - ico_size * .5,h * .5 - ico_size * .5,ico_size,ico_size)

            draw.SimpleText(slib.getLang("sreward", sReward.config["language"], "you"), slib.createFont("Roboto", 16), w * .5, h - margin, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
        end

        referrer_reward.DoClick = function()
            checkRewards({name = slib.getLang("sreward", sReward.config["language"], "referral"),reward = sReward.config["give_referral_reward"]})
        end

        local referred_reward = vgui.Create("SButton", referral_rewards)
        referred_reward:Dock(LEFT)
        referred_reward:SetWide(rewardBtn_size)
        referred_reward.col = table.Copy(color_white)
        referred_reward.Paint = function(s,w,h)
            local ico_size = h * .45
            s.col.a = slib.lerpNum(s, s:IsHovered() and 30 or 255)
            surface.SetDrawColor(s.col)
            surface.SetMaterial(friend_ico)
            surface.DrawTexturedRect(w * .5 - ico_size * .5,h * .5 - ico_size * .5,ico_size,ico_size)

            draw.SimpleText(slib.getLang("sreward", sReward.config["language"], "friend"), slib.createFont("Roboto", 16), w * .5, h - margin, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
        end

        referred_reward.DoClick = function()
            checkRewards({name = slib.getLang("sreward", sReward.config["language"], "referral"),reward = sReward.config["receive_referral_reward"]})
        end

        local box_size = referral_info:GetTall() * .28

        local referral_font = slib.createFont("Roboto", 17)

        local referral_setting = vgui.Create("EditablePanel", referral_info)
        referral_setting:Dock(LEFT)
        referral_setting:DockMargin(margin * .5,0,0,margin)
        referral_setting:SetWide(box_w)

        local sid = LocalPlayer():SteamID()

        referral_setting.Paint = function(s,w,h)
            local icosize, gap = h * .28

            surface.SetDrawColor(maincolor_7)
            surface.DrawRect(0,0,w,h)

            local txt = (sReward.data[sid] and sReward.data[sid]["total_referrals"] or 0).." "..slib.getLang("sreward", sReward.config["language"], "referrals")

            surface.SetFont(referral_font)
            local txt_w = surface.GetTextSize(txt)

            surface.SetDrawColor(white)
            surface.SetMaterial(referral_ico)
            surface.DrawTexturedRect(w * .5 - icosize * .5 - txt_w * .5 - (margin * .5), margin, icosize, icosize)
        
            draw.SimpleText(txt, referral_font, w * .5 + icosize * .5 + (margin * .5), icosize * .5 + margin, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
        
            draw.SimpleText(slib.getLang("sreward", sReward.config["language"], "referr_with_code"), referral_font, w * .5, h - margin - box_size - margin, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
        end

        local referral_id = vgui.Create("STextEntry", referral_setting)
        referral_id:Dock(BOTTOM)
        referral_id:DockMargin(margin,0, margin, margin)
        referral_id:SetTall(box_size)
        referral_id:SetPlaceholder("SteamID64")
        referral_id.bg = maincolor_15

        local referr_id = vgui.Create("SButton", referral_id)
        referr_id:Dock(RIGHT)
        referr_id:SetWide(box_size)
        referr_id.col = table.Copy(color_white)
        referr_id.Paint = function(s,w,h)
            local ico_size = h * .5
            s.col.a = slib.lerpNum(s, s:IsHovered() and 255 or 30)

            surface.SetDrawColor(s.col)
            surface.SetMaterial(accept_ico)
            surface.DrawTexturedRect(w * .5 - ico_size * .5,h * .5 - ico_size * .5,ico_size,ico_size)
        end

        referr_id.DoClick = function()
            local sid64 = referral_id:GetText()
            if !sid64 or #sid64 ~= 17 or !isnumber(tonumber(sid64)) then slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "invalid_sid64")) return end
            if sid64 == LocalPlayer():SteamID64() then slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "cannot_referr_yourself")) return end

            net.Start("sR:NetworkingHandeler")
            net.WriteUInt(2,3)
            net.WriteString(sid64)
            net.SendToServer()
        end
    end

    if IsValid(sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "shop")]) then
        local shop_stats = vgui.Create("EditablePanel", sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "shop")])
        shop_stats:Dock(TOP)
        shop_stats:SetTall(slib.getScaledSize(25, "y"))
        shop_stats:SetWide(sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "shop")]:GetWide())
        shop_stats.Paint = function(s,w,h)
            local icosize, gap = h * .7, h * .15

            surface.SetDrawColor(maincolor_10)
            surface.DrawRect(0,0,w,h)

            surface.SetDrawColor(white)
            surface.SetMaterial(tokens_ico)
            surface.DrawTexturedRect(gap, gap, icosize, icosize)

            draw.SimpleText(string.Comma(sReward.GetTokens(LocalPlayer())).." "..slib.getLang("sreward", sReward.config["language"], "tokens"), slib.createFont("Roboto", 16), gap + icosize + margin, h * .5, white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
        end

        local shopcanvas = vgui.Create("SScrollPanel", sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "shop")])
        shopcanvas:Dock(FILL)
        local innercanvasshop = shopcanvas:GetCanvas()
        innercanvasshop:DockPadding(margin,0,margin,margin)

        local shop_search = vgui.Create("SSearchBar", shop_stats)
        shop_search:Dock(RIGHT)
        shop_search:SetWide(shop_stats:GetWide() * .5)
        shop_search:DockMargin(0,0,0,0)
        shop_search.bg = maincolor_15
        shop_search:addIcon()

        local store_canvas

        sreward_menu.rebuildStore = function(str)
            local addgap = margin * 1.33333333333
            local shopitem_wide = math.ceil((innercanvasshop:GetWide() / 3)) - addgap
            local shopitem_tall = shopitem_wide + slib.getScaledSize(31, "y")
            local fullwidth = shopitem_wide + margin

            store_canvas = innercanvasshop

            local iteration = 0
            local yiteration = 0
            for k,v in pairs(innercanvasshop:GetChildren()) do
                v:Remove()
            end

            local fulltbl = table.Copy(sReward.config["shop"])
            for k,v in SortedPairs(fulltbl) do fulltbl[k].id = k end
            for k,v in SortedPairs(sReward.data["shop"]) do if !istable(v) then continue end table.insert(fulltbl, v) end
            
            table.sort(fulltbl, function(a, b) return tonumber(a.price) > tonumber(b.price) end)

            for k,v in SortedPairs(fulltbl) do
                if str and !string.find(string.lower(v.name), string.lower(str)) or !v.enabled then continue end
                yiteration = iteration > 2 and yiteration + 1 or yiteration
                iteration = iteration > 2 and 0 or iteration

                local item = sReward.addStoreItem(innercanvasshop, v, yiteration, iteration)
                item.addButton(nil, reward_ico, function() checkRewards(item.data) end)
                item.addButton(nil, buy_ico, function()
                    local popup = vgui.Create("SPopupBox")
                    :setTitle(slib.getLang("sreward", sReward.config["language"], "are_you_sure"))
                    :setBlur(true)
                    :addChoise(slib.getLang("sreward", sReward.config["language"], "no"))
                    :addChoise(slib.getLang("sreward", sReward.config["language"], "yes"), function()
                        net.Start("sR:NetworkingHandeler")
                        net.WriteUInt(3,3)
                        net.WriteUInt(v.svid or v.id, 6)
                        net.WriteBool(tobool(v.svid))
                        net.SendToServer()
                    end)
                    :setText(slib.getLang("sreward", sReward.config["language"], "this_will_cost", item.data.name, item.data.price))
                end, true)

                item.InvalidateLayout()

                iteration = iteration + 1
            end
        end

        innercanvasshop.OnSizeChanged = function()
            local width = innercanvasshop:GetWide()
            if innercanvasshop.oldWide == width then return end
            innercanvasshop.oldWide = width

            if !IsValid(store_canvas) then return end
            for k,v in ipairs(store_canvas:GetChildren()) do
                v.InvalidateLayout()
            end  
        end

        sreward_menu.rebuildStore()

        shop_search.entry.onValueChange = function(newval)
            sreward_menu.rebuildStore(newval)
        end
    end

    if IsValid(sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "tasks")]) then
        local taskscanvas = vgui.Create("SScrollPanel", sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "tasks")])
        taskscanvas:Dock(FILL)
        taskscanvas:GetCanvas():DockPadding(margin,0,margin,margin)

        for k,v in ipairs(sReward.config["rewards"]) do
            if !v.enabled then continue end
            
            local data = sReward.config["rewards"][k]
            
            local task = sReward.addMultibox(taskscanvas, {
                [1] = {
                    title = slib.getLang("sreward", sReward.config["language"], "name"),
                    val = data.name,
                    offset = 0
                },
                [2] = {
                    title = slib.getLang("sreward", sReward.config["language"], "uses"),
                    val = function() return (!data.maxuse or data.maxuse <= 0 and "∞") or (sReward.data["rewards"][k] and sReward.data["rewards"][k].used or 0).."/"..data.maxuse end,
                    offset = 0.3
                },
                [3] = {
                    title = slib.getLang("sreward", sReward.config["language"], "task"),
                    val = "",
                    offset = 0.6
                }
            })

            local verify = task.addButton(slib.getLang("sreward", sReward.config["language"], "verify"), function()
                if data.maxuse and data.maxuse > 0 and (sReward.data["rewards"][k] and sReward.data["rewards"][k].used or 0) >= data.maxuse then
                    slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "max_use_reached"))
                return end 
                
                if data.cooldown and data.cooldown > 0 and os.time() < ((sReward.data["rewards"][k] and sReward.data["rewards"][k].cd or -data.cooldown) + data.cooldown) then
                    slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "on_cooldown", math.Round((sReward.data["rewards"][k].cd + data.cooldown) - os.time(), 1)))
                return end 
        
                net.Start("sR:NetworkingHandeler")
                net.WriteUInt(1,3)
                net.WriteUInt(k, 4)
                net.SendToServer()
            end)

            local nextThink
            verify.Think = function()
                if nextThink and nextThink > CurTime() then return end
        
                local title
        
                if data.cooldown and data.cooldown > 0 and os.time() < ((sReward.data["rewards"][k] and sReward.data["rewards"][k].cd or -data.cooldown) + data.cooldown) then
                    local timeleft = math.Round((sReward.data["rewards"][k].cd + data.cooldown) - os.time(), 1)
                    local hours = math.floor( timeleft / 3600 )
                    local minutes = math.floor( ( timeleft / 60 ) % 60 )
                    local seconds = math.floor( timeleft % 60 )
        
                    title = string.format("%2i:%02i:%02i", hours, minutes, seconds)
                end
        
                if data.maxuse and data.maxuse > 0 and (sReward.data["rewards"][k] and sReward.data["rewards"][k].used or 0) >= data.maxuse then
                    title = slib.getLang("sreward", sReward.config["language"], "used")
                end
                
                if title then
                    verify:SetMouseInputEnabled(!title)
                    verify:setTitle(title)
                end
        
                nextThink = CurTime() + 1
            end

            local gap = margin * 2.3

            local rewards = addIconButton(nil, reward_ico, function() checkRewards(data) end, task)
            rewards:Dock(RIGHT)
            rewards:DockMargin(gap, gap, margin, gap)

            local tasks = addIconButton(nil, task_ico, function()
                if !data.instructionFunc then return end
                data.instructionFunc()
            end, task)
            tasks:Dock(LEFT)
            tasks:DockMargin(task:GetWide() * .6 + margin, gap * 2, margin, 0)
            
            tasks.PaintOver = function(s,w,h)    
                if s:IsHovered() and !IsValid(s.tooltip) then
                    s.tooltip = slib.drawTooltip(data.instruction, s, 1)
                end
            end

            task.OnSizeChanged = function()
                tasks:DockMargin(task:GetWide() * .6 + margin, gap * 2, margin, 0)
            end
        end
    end

    if IsValid(sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "leaderboard")]) then
        local leaderboardcanvas = vgui.Create("SScrollPanel", sreward_menu.tab[slib.getLang("sreward", sReward.config["language"], "leaderboard")])
        leaderboardcanvas:Dock(FILL)
        leaderboardcanvas:GetCanvas():DockPadding(margin,0,margin,margin)

        sreward_menu.RebuildLeaderboard = function()
            for k,v in pairs(leaderboardcanvas:GetCanvas():GetChildren()) do
                v:Remove()
            end

            if sReward.data["leaderboard"] then
                for k,v in ipairs(sReward.data["leaderboard"]) do
                    local ply = sReward.addMultibox(leaderboardcanvas, {
                        [1] = {
                            title = slib.getLang("sreward", sReward.config["language"], "name"),
                            val = function() return slib.findName(v.sid64) end,
                            offset = 0
                        },
                        [2] = {
                            title = slib.getLang("sreward", sReward.config["language"], "total_tokens"),
                            val = v.tokens,
                            offset = 0.4
                        }
                    })

                    ply.PaintOver = function(s,w,h)
                        draw.SimpleText("#"..k, slib.createFont("Roboto", 18), w - margin, h * .5, topcolors[k] or textcolor_min50, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER)
                    end
                end
            end
        end

        sreward_menu.RebuildLeaderboard()
    end
end

concommand.Add("sreward_menu", sReward.openRewards)

local intToString = {
    [1] = {id = "rewards", instructions = {["jsontable"] = true}},
    [2] = {id = "total_referrals", instructions = {["player"] = true, ["int"] = true, ["plydata"] = true}},
    [3] = {id = "leaderboard", instructions = {["jsontable"] = true}, func = function()
        if IsValid(sreward_menu) and sreward_menu.RebuildLeaderboard then
            sreward_menu.RebuildLeaderboard()
        end
    end},
    [4] = {id = "tokens", instructions = {["player"] = true, ["int"] = true, ["plydata"] = true}},
    [5] = {id = "coupons", instructions = {["jsontable"] = true}, func = function(data)
        for k,v in pairs(sReward.data["coupons"]) do
            if !istable(v) then continue end
            sReward.couponNameToKey[v.name] = k
        end

        if IsValid(sreward_admin) and sreward_admin.RebuildCoupons then
            sreward_admin.RebuildCoupons()
        end
    end},
    [6] = {id = "shop", instructions = {["jsontable"] = true}, func = function()
        if IsValid(sreward_admin) and sreward_admin.rebuildStore then
            sreward_admin.rebuildStore()
        end

        if IsValid(sreward_menu) and sreward_menu.rebuildStore then
            sreward_menu.rebuildStore()
        end
    end},
    [7] = {id = "referral_top3", instructions = {["jsontable"] = true}}
}

timer.Create("sR:AutoClaimReward", 3, 0, function()
    if !receivedNet then return end

    for k,v in ipairs(sReward.config["rewards"]) do
        local lply = LocalPlayer()

        if !v.enabled or !v.auto_claim or !IsValid(lply) then continue end

        local plyData = sReward.data["rewards"][k]

        if v.customCheck and !v.customCheck(lply) then continue end
        if v.maxuse and v.maxuse > 0 and (plyData and plyData.used or 0) >= v.maxuse then continue end
        if v.cooldown and v.cooldown > 0 and os.time() < ((plyData and plyData.cd or -data.cooldown) + data.cooldown) then continue end

        net.Start("sR:NetworkingHandeler")
        net.WriteUInt(1,3)
        net.WriteUInt(k, 4)
        net.SendToServer()
    end
end)

net.Receive("sR:NetworkingHandeler", function()
    local action = net.ReadUInt(2)

    if action == 1 then
        local type = net.ReadUInt(4)
        local str = intToString[type]
        if !str or !str.id then return end

        local val
        local structure = {str.id}

        if str.instructions then
            if str.instructions["key"] then
                structure[2] = net.ReadUInt(4)
            end
    
            if str.instructions["player"] then
                local ply = net.ReadUInt(16)
                if !ply then return end
                ply = Entity(ply)
    
                local sid = IsValid(ply) and ply:SteamID()
    
                if !sid then return end

                if str.instructions["plydata"] then
                    structure[1] = sid
                    structure[2] = str.id
                end
            end
    
            if str.instructions["jsontable"] then
                val = util.JSONToTable(net.ReadString())
            end
    
            if str.instructions["int"] then
                val = net.ReadUInt(32)
            end
        end

        local lastStep = sReward.data
        
        local tblCount = #structure
        for i=1, tblCount do
            local key = structure[i]
            local isEnd = i >= tblCount
            lastStep[key] = isEnd and val or lastStep[key] or {}

            lastStep = !isEnd and lastStep[key]
        end
    
        if isfunction(str.func) then
            str.func(val)
        end

        receivedNet = true
    elseif action == 2 then
        local data = net.ReadString()
        data = util.JSONToTable(data)

        receiveCoupon(data.title, data.code)
    end
end)
--addons/sreward_1.5.30/lua/s_reward/languages/sh_german.lua:
if CLIENT then
    slib.setLang("sreward", "de", "general", "Allgemein")
    slib.setLang("sreward", "de", "tasks", "Aufgaben")
    slib.setLang("sreward", "de", "referral", "Empfehlungen")
    slib.setLang("sreward", "de", "shop", "Shop")
    slib.setLang("sreward", "de", "leaderboard", "Bestenliste")
    slib.setLang("sreward", "de", "coupons", "Gutscheine")

    slib.setLang("sreward", "de", "main_title", "Server-Name - Belohnungs-System")
    slib.setLang("sreward", "de", "title_admin", "Server-Name - Admin")

    slib.setLang("sreward", "de", "rewards_title", "%s - Belohnungen")
    slib.setLang("sreward", "de", "coupon_title", "Gutscheine")

    slib.setLang("sreward", "de", "coupon_receive_title", "Neuer Gutschein!")
    slib.setLang("sreward", "de", "coupon_receive", "Sie haben einen neuen Gutschein erhalten, \n    Überprüfen Sie Ihren Coupon-Bestand!") --- Had to fine tune like that :(

    slib.setLang("sreward", "de", "copied_clipboard", "In die Zwischenablage kopiert!")
    slib.setLang("sreward", "de", "no_coupons", "Sie haben keine Gutscheine!")
    slib.setLang("sreward", "de", "no_rewards", "Es gibt keine Belohnungen!")

    slib.setLang("sreward", "de", "delete", "Löschen")
    slib.setLang("sreward", "de", "yes", "Ja")
    slib.setLang("sreward", "de", "no", "Nein")

    slib.setLang("sreward", "de", "top_3", "Top 3")

    slib.setLang("sreward", "de", "you", "Du")
    slib.setLang("sreward", "de", "friend", "Freund")

    slib.setLang("sreward", "de", "referr_with_code", "Mit Code empfehlen")

    slib.setLang("sreward", "de", "are_you_sure", "Bist du dir sicher?")
    slib.setLang("sreward", "de", "manage", "Verwalten")

    slib.setLang("sreward", "de", "tokens", "Tokens")
    slib.setLang("sreward", "de", "select_reward", "Wählen Sie Belohnung aus")
    slib.setLang("sreward", "de", "number", "Nummer")

    slib.setLang("sreward", "de", "submit", "Einreichen")
    slib.setLang("sreward", "de", "name", "Name")
    slib.setLang("sreward", "de", "uses", "Verwendungen")
    slib.setLang("sreward", "de", "used", "Eingelöst")
    slib.setLang("sreward", "de", "task", "Aufgabe")
    slib.setLang("sreward", "de", "verify", "Verifizieren")
    slib.setLang("sreward", "de", "total_tokens", "Token insgesamt")
    slib.setLang("sreward", "de", "referrals", "Empfehlungen")

    slib.setLang("sreward", "de", "rewards", "Belohnung")
    slib.setLang("sreward", "de", "price", "Preis")
    slib.setLang("sreward", "de", "imgur_id", "Imgur ID")

    slib.setLang("sreward", "de", "edit_rewards", "Belohnungen bearbeiten")
    slib.setLang("sreward", "de", "save", "Speichern")

    slib.setLang("sreward", "de", "insert_imgur_id", "Imgur ID Einfügen")
    slib.setLang("sreward", "de", "insert_name", "Namen eingeben")
    slib.setLang("sreward", "de", "insert_price", "Preis einfügen")

    slib.setLang("sreward", "de", "create_coupon", "Gutschein erstellen")
    slib.setLang("sreward", "de", "coupon_name", "Gutscheinname")

    slib.setLang("sreward", "de", "create_shopitem", "Shop-Artikel erstellen")
    slib.setLang("sreward", "de", "item_name", "Artikelname")

    slib.setLang("sreward", "de", "this_will_cost", "'%s' wird dich: %s tokens kosten!")
    slib.setLang("sreward", "de", "coupon_delete_confirm", "Dadurch wird der Gutschein gelöscht: '%s'?")
    slib.setLang("sreward", "de", "this_delete", "Dies wird gelöscht: '%s'")
    slib.setLang("sreward", "de", "no_data", "Keine Daten")

    slib.setLang("sreward", "de", "manage_item", "Artikel verwalten")

    slib.setLang("sreward", "de", "discord_failed_application_com", "Die Kommunikation mit Ihrer Discord-Anwendung ist fehlgeschlagen. Stellen Sie sicher, dass sie ausgeführt wird!")
    slib.setLang("sreward", "de", "discord_error_retrieving_data", "Beim Abrufen von Daten aus Discord ist ein Problem aufgetreten. Bitte informieren Sie die Teammitglieder darüber!")
else
    slib.setLang("sreward", "de", "cooldown", "Sie befinden sich in einer Verifizierungsabklingzeit, bitte warten Sie: %s Sekunden!")

    slib.setLang("sreward", "de", "added_queue", "Sie wurden zur Warteschlange hinzugefügt für: '%s' du erhälst eine Antwort in: %s Sekunden!")

    slib.setLang("sreward", "de", "added_steamgroup_queue", "Sie wurden der Warteschlange für die Überprüfung der Steamgruppe hinzugefügt. Sie erhalten innerhalb dieser Frist eine Antwort: %s Sekunden!")
    slib.setLang("sreward", "de", "didnt_find_steamgroup", "Wir konnten Sie in der Steamgruppe nicht finden, bitte versuchen Sie es erneut!")
    slib.setLang("sreward", "de", "failed_verification", "Anscheinend konnten wir die Prämie nicht verifizieren: '%s', Stellen Sie sicher, dass Sie die Aufgabe ordnungsgemäß ausführen.")
    
    slib.setLang("sreward", "de", "discord_error_retrieving_data", "Wir konnten Discord nicht kontaktieren, bitte versuchen Sie es später erneut!")
    slib.setLang("sreward", "de", "checking_wait", "Bitte warten Sie, während wir die Prämie überprüfen: '%s' für dich!")

    slib.setLang("sreward", "de", "steam_unsuccessfull", "Wir konnten Steam nicht kontaktieren, bitte versuchen Sie es später erneut!")
    slib.setLang("sreward", "de", "steam_private", "Die Überprüfung Ihrer Steam-Gruppen ist fehlgeschlagen. Stellen Sie sicher, dass Ihr Profil öffentlich ist, damit wir dies überprüfen können!")
    slib.setLang("sreward", "de", "success_reward", "Sie haben die: '%s' Belohnung erhalten!")

    slib.setLang("sreward", "de", "already_referred", "Sie haben diese Person bereits geworben!")
    slib.setLang("sreward", "de", "referral_limit", "Sie haben das maximale Empfehlungslimit erreicht!")
    slib.setLang("sreward", "de", "referred_person", "Sie haben eine Belohnung für das anwerben erhalten: %s")
    slib.setLang("sreward", "de", "referred_by", "Sie haben eine Belohnung für die Empfehlung erhalten %s!")
    slib.setLang("sreward", "de", "referring_person", "Sie haben eine Belohnung für die Empfehlung einer Person erhalten!")
    slib.setLang("sreward", "de", "cannot_referr_again", "Sie können diese Person nicht erneut empfehlen!")
    slib.setLang("sreward", "de", "raferring_ratelimit", "Ihre Rate wurde begrenzt, warten Sie, bis Ihre erste Empfehlungsanfrage abgeschlossen ist!")

    slib.setLang("sreward", "de", "mysql_successfull", "Wir haben uns erfolgreich mit der Datenbank verbunden!")
    slib.setLang("sreward", "de", "mysql_failed", "Die Verbindung zur Datenbank ist fehlgeschlagen!")
    slib.setLang("sreward", "de", "cannot_afford", "Du kannst dir das nicht leisten!")
    slib.setLang("sreward", "de", "successfull_purchase", "Sie haben erfolgreich: '%s' gekauft!")

    slib.setLang("sreward", "de", "taken_tokens", "jemand hat: %s tokens von dir genommen, dein guthaben ist: %s!")
    slib.setLang("sreward", "de", "given_tokens", "Jemand hat dir: %s tokens gegeben, dein guthaben ist: %s!")
    slib.setLang("sreward", "de", "given_reward", "Jemand hat dir die Belohnung gegeben: '%s'!")
    slib.setLang("sreward", "de", "you_got_tokens", "Du hast %s Tokens erhalten, dein neues Guthaben beträgt: %s!")

    slib.setLang("sreward", "de", "performed_admin_action", "Sie haben eine Administratoraktion ausgeführt für: '%s' mit dem Wert von '%s'")
    slib.setLang("sreward", "de", "coupon_out_of_stock", "Wir sind derzeit nicht vorrätig für '%s' Coupons, wenden Sie sich bitte an die Teammitglieder, damit wir diese auffüllen können!")
end

slib.setLang("sreward", "de", "on_cooldown", "Sie befinden sich in einer Abklingzeit: %s Sekunden, um diese Belohnung erneut zu verwenden!")

slib.setLang("sreward", "de", "max_use_reached", "Sie haben das maximale Verwendungslimit dieser Belohnung erreicht!")

slib.setLang("sreward", "de", "sr_tokens", "sR Tokens")

slib.setLang("sreward", "de", "darkrp_money", "DarkRP Geld")

slib.setLang("sreward", "de", "reward_rank", "Rang")

slib.setLang("sreward", "de", "coupon", "Gutschein")

slib.setLang("sreward", "de", "give_weapon", "Waffe geben")

slib.setLang("sreward", "de", "basewars_money", "Basewars Geld")
slib.setLang("sreward", "de", "basewars_level", "Basewars Level")

slib.setLang("sreward", "de", "vrondakis_level", "Level")
slib.setLang("sreward", "de", "vrondakis_xp", "XP")

slib.setLang("sreward", "de", "glorified_level", "Level")
slib.setLang("sreward", "de", "glorified_xp", "XP")

slib.setLang("sreward", "de", "essentials_level", "Level")
slib.setLang("sreward", "de", "essentials_xp", "XP")

slib.setLang("sreward", "de", "elite_xp", "XP")
slib.setLang("sreward", "de", "elevel_xp", "XP")

slib.setLang("sreward", "de", "elevel_xp", "XP")

slib.setLang("sreward", "de", "wos_level", "wOS Level")
slib.setLang("sreward", "de", "wos_xp", "wOS XP")
slib.setLang("sreward", "de", "wos_points", "wOS Punkte")
slib.setLang("sreward", "de", "wos_giveitem", "wOS item geben")

slib.setLang("sreward", "de", "ps1_points", "PS1 Punkte")

slib.setLang("sreward", "de", "ps2_standard_points", "PS2 Standard Punkte")
slib.setLang("sreward", "de", "ps2_premium_points", "PS2 Premium Punkte")

slib.setLang("sreward", "de", "sh_ps_standard_points", "SH PS Standard Punkte")
slib.setLang("sreward", "de", "sh_ps_premium_points", "SH PS Premium Punkte")

slib.setLang("sreward", "de", "give_tokens", "Gebe Tokens")
slib.setLang("sreward", "de", "give_reward", "Gebe Belohnung")
slib.setLang("sreward", "de", "take_tokens", "Nehme Tokens")

slib.setLang("sreward", "de", "invalid_sid64", "Ungültige SteamID64")
slib.setLang("sreward", "de", "cannot_referr_yourself", "Du kannst dich nicht selbst Empfehlen!!")
--addons/sreward_1.5.30/lua/s_reward/modules/sh_discord.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_coupon.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_customcommand.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_glorifiedleveling.lua:
sReward.RegisterReward("glorified_level", function(ply, levels)
    if !isfunction(GlorifiedLeveling.AddPlayerLevels) then return end
    GlorifiedLeveling.AddPlayerLevels(ply, levels)
end, Material("sreward/level-up.png", "smooth"))

sReward.RegisterReward("glorified_xp", function(ply, xp)
    if !isfunction(GlorifiedLeveling.AddPlayerXP) then return end
    GlorifiedLeveling.AddPlayerXP(ply, xp)
end)
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_perp.lua:
sReward.RegisterReward("perp_cash", function(ply, amount)
    if !isfunction(ply.AddCash) then return end
    ply:AddCash(amount)
end, Material("sreward/money.png", "smooth"))
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_pointshop.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_wos.lua:
sReward.RegisterReward("wos_level", function(ply, level)
    if !isfunction(ply.SetSkillLevel) then return end
    local oldLevel = ply:GetSkillLevel()
    ply:SetSkillLevel(oldLevel + level)
end, Material("sreward/level-up.png", "smooth"))

sReward.RegisterReward("wos_xp", function(ply, xp)
    if !isfunction(ply.SetSkillXP) then return end
    local oldXP = ply:GetSkillXP()
    ply:SetSkillXP(oldXP + xp)
end)

sReward.RegisterReward("wos_points", function(ply, points)
    if !isfunction(ply.SetSkillPoints) then return end
    local oldPoints = ply:GetSkillPoints()
    ply:SetSkillPoints(oldPoints + points)
end, Material("sreward/points.png", "smooth"))

sReward.RegisterReward("wos_giveitem", function(ply, item_name)
    if !isfunction(wOS.HandleItemPickup) then return end

    wOS:HandleItemPickup(ply, item_name)
end)
--lua/streamradio_core/util.lua:
return gluapack()()
--lua/streamradio_core/models/hl2_radio.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- HL2 Citizen Radio
RADIOMDL.model = "models/props_lab/citizenradio.mdl"

RADIOMDL.SpawnAng = Angle(0, 0, 0)
RADIOMDL.SpawnFlatOnWall = true
RADIOMDL.SoundPosOffset = Vector(8.6, 0, 7.4)
RADIOMDL.SoundAngOffset = Angle(0, 0, 0)

RADIOMDL.DisplayAngles = Angle(0, 90, 90)

                               --     F,     R,     U
RADIOMDL.DisplayOffset    = Vector(8.60, -5.65, 15.25) -- Top Left
RADIOMDL.DisplayOffsetEnd = Vector(8.60, 11.15, 11.82) -- Bottom Right

RADIOMDL.DisplayWidth = 1337
RADIOMDL.DisplayHeight, RADIOMDL.DisplayScale = RADIOMDL:GetDisplayHeight(
	RADIOMDL.DisplayOffset,
	RADIOMDL.DisplayOffsetEnd,
	RADIOMDL.DisplayWidth,
	RADIOMDL.DISPLAY_POS_FRONT
)


RADIOMDL.FontSizes = {
--  Name 	= Size,	Weight, Parentname
	Header	= {23,	1000},
	Error	= {17,	700},
	Default	= {22,	700},
	Tooltip	= {22,	1000},
	Big		= {23,	700},
}

function RADIOMDL:SetupGUI(ent, gui_controller, mainpanel)
	gui_controller:SetPos(0, 0)
	gui_controller:SetSize(self.DisplayWidth, self.DisplayHeight)

	mainpanel:SetSize(gui_controller:GetClientSize())

	local modelsetup = {}
	if CLIENT then
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/text", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/pretext", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/controls/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/volume/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox", "font", self.Fonts.Error)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "font", self.Fonts.Error)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox", "font", self.Fonts.Error)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "font", self.Fonts.Error)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "tooltip", "font", self.Fonts.Tooltip)
	end

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header", "sizeh", 35)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "sizeh", 35)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists", "gridsize", {x = 3, y = 4})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview", "gridsize", {x = 2, y = 4})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/scrollbar", "sizew", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/scrollbar", "sizew", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/sidebutton", "sizew", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox/scrollbar", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "sizeh", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "cornersize", 0)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "borderwidth", 16)

	local shadow = 3
	local padding = 5
	local margin = 5

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "shadowwidth", shadow)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "shadowwidth", shadow)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "padding", padding)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "padding", padding)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "margin", margin)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "margin", margin)

	gui_controller:SetModelSetup(modelsetup)

	mainpanel:ForEachChildRecursive(function(panel, child)
		if child.SetShadowWidth and child:GetShadowWidth() == 5 then
			child:SetShadowWidth(shadow)
		end

		if child.SetPadding and child:GetPadding() == 5 then
			child:SetPadding(padding)
		end

		if child.SetMargin and child:GetMargin() == 5 then
			child:SetMargin(margin)
		end
	end)
end

return true


--lua/streamradio_core/models/portal_radio.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Portal Radio
RADIOMDL.model = "models/props/radio_reference.mdl"

RADIOMDL.SpawnAng = Angle(0, 0, 0)
RADIOMDL.SpawnFlatOnWall = true
RADIOMDL.SoundPosOffset = Vector(3.6, 0, 3.1)
RADIOMDL.SoundAngOffset = Angle(0, 0, 0)

RADIOMDL.DisplayAngles = Angle(0, 90, 90)

                              --      F,     R,    U
RADIOMDL.DisplayOffset    = Vector(3.60, -4.70, 4.80) -- Top Left
RADIOMDL.DisplayOffsetEnd = Vector(0.00,  4.70, 1.00) -- Bottom Right

RADIOMDL.DisplayWidth = 768
RADIOMDL.DisplayHeight, RADIOMDL.DisplayScale = RADIOMDL:GetDisplayHeight(RADIOMDL.DisplayOffset, RADIOMDL.DisplayOffsetEnd, RADIOMDL.DisplayWidth)

RADIOMDL.FontSizes = {
--  Name 	= Size,	Weight, Parentname
	Header	= {21,	1000},
	Default	= {20,	700},
	Tooltip	= {18,	800},
	Big		= {22,	700},
}

function RADIOMDL:SetupGUI(ent, gui_controller, mainpanel)
	gui_controller:SetPos(0, 0)
	gui_controller:SetSize(self.DisplayWidth, self.DisplayHeight)

	mainpanel:SetSize(gui_controller:GetClientSize())

	local modelsetup = {}
	if CLIENT then
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/text", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/pretext", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/controls/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/volume/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "tooltip", "font", self.Fonts.Tooltip)
	end

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header", "sizeh", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "sizeh", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists", "gridsize", {x = 2, y = 5})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview", "gridsize", {x = 2, y = 5})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/sidebutton", "sizew", 50)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox/scrollbar", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "sizeh", 45)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "sizew", 35)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "sizew", 35)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "cornersize", 16)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "borderwidth", 16)

	local shadow = 5
	local padding = 5
	local margin = 5

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "shadowwidth", shadow)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "shadowwidth", shadow)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "padding", padding)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "padding", padding)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "margin", margin)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "margin", margin)

	gui_controller:SetModelSetup(modelsetup)

	mainpanel:ForEachChildRecursive(function(panel, child)
		if child.SetShadowWidth and child:GetShadowWidth() == 5 then
			child:SetShadowWidth(shadow)
		end

		if child.SetPadding and child:GetPadding() == 5 then
			child:SetPadding(padding)
		end

		if child.SetMargin and child:GetMargin() == 5 then
			child:SetMargin(margin)
		end
	end)
end

return true


--lua/streamradio_core/models/wire_subwoofer_small.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Wire Subwoofer, Small
-- Addon: https://steamcommunity.com/sharedfiles/filedetails/?id=160250458
RADIOMDL.model = "models/bull/various/subwoofer.mdl"

RADIOMDL.NoDisplay = true
RADIOMDL.SpawnAng = Angle( 0, 0, 0 )
RADIOMDL.SpawnFlatOnWall = true

return true


--lua/streamradio_core/classes/gui_controller.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/image.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/image.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local BASE = CLASS:GetBaseClass()
local changehooks = {
	Material = "OnMaterialChange",
	AlignX = "OnAlignChange",
	AlignY = "OnAlignChange",
}

function CLASS:Create()
	BASE.Create(self)

	self.Clickable = false

	if not SERVER then
		self.ImageData = self:CreateListener({
			Material = nil,
			AlignX = TEXT_ALIGN_CENTER,
			AlignY = TEXT_ALIGN_CENTER,
			SizeW = 16,
			SizeH = 16,
		}, function(this, k)
			self:InvalidateLayout()

			local hookname = changehooks[k]
			if not hookname then return end

			self:CallHook(hookname)
		end)

		self.Colors.Main = Color(255,255,255)
	end

	self:SetSkinAble(false)
end

function CLASS:Render()
	local mat = self.ImageData.Material
	if not mat then return end

	local x, y = self:GetRenderPos()
	local w, h = self:GetSize()

	local tx, ty = x, y
	local tsw, tsh = self:GetTextureSize()
	local xalign, yalign = self.ImageData.AlignX, self.ImageData.AlignY
	local colMain = self.Colors.Main or color_white

	if ( xalign == TEXT_ALIGN_CENTER ) then
		tx = x + w / 2 - tsw / 2
	elseif ( xalign == TEXT_ALIGN_RIGHT ) then
		tx = x + w - tsw
	end

	if ( yalign == TEXT_ALIGN_CENTER ) then
		ty = y + h / 2 - tsh / 2
	elseif ( yalign == TEXT_ALIGN_BOTTOM ) then
		ty = y + h - tsh
	end

	surface.SetDrawColor( colMain:Unpack() )
	surface.SetMaterial( mat )
	surface.DrawTexturedRectUV( tx, ty, tsw, tsh, 0, 0, 1, 1 )
end

function CLASS:GetMaterial()
	if SERVER then return end
	return self.ImageData.Material
end

function CLASS:SetMaterial(mat)
	if SERVER then return end
	self.ImageData.Material = mat
end

function CLASS:GetMaterialName()
	if SERVER then return end
	local mat = self.ImageData.Material
	if not mat then
		return nil
	end

	return self.ImageData.Material:GetName()
end

function CLASS:SetTexture(mat, ...)
	if SERVER then return end
	if not mat then
		return self:SetMaterial(nil)
	end

	self:SetMaterial(Material(mat, ...))
end

function CLASS:GetTextureSize()
	if SERVER then return end
	return self.ImageData.SizeW or 0, self.ImageData.SizeH or 0
end

function CLASS:SetTextureSize(w, h)
	if SERVER then return end
	w = w or 0
	h = h or 0

	if w < 0 then
		w = 0
	end

	if h < 0 then
		h = 0
	end

	self.ImageData.SizeW = w
	self.ImageData.SizeH = h
end

function CLASS:TextureSizeToPanel()
	if SERVER then return end
	self:SetTextureSize(self:GetSize())
	self:InvalidateLayout()
end

function CLASS:TextureFitToPanel()
	if SERVER then return end
	local mat = self.ImageData.Material

	if not mat then
		return
	end

	local dw, dh = self:GetSize()

	if dw > dh then
		dw = dh
	end

	if dh > dw then
		dh = dw
	end

	local w = mat:Width()
	local h = mat:Height()
	local diff = 0

	if ( w > dw and h > dh ) then
		if ( w > dw ) then
			diff = dw / w
			w = w * diff
			h = h * diff
		end

		if ( h > dh ) then
			diff = dh / h
			w = w * diff
			h = h * diff
		end
	end

	if ( w < dw ) then
		diff = dw / w
		w = w * diff
		h = h * diff
	end

	if ( h < dh ) then
		diff = dh / h
		w = w * diff
		h = h * diff
	end

	self:SetTextureSize(w, h)
	self:InvalidateLayout()
end

function CLASS:TextureSizeToTexture()
	if SERVER then return end

	local mat = self.ImageData.Material

	if not mat then
		return
	end

	local tw, th = mat:Width(), mat:Height()
	self:SetTextureSize(tw, th)
	self:InvalidateLayout()
end

function CLASS:SetAlign(alignX, alignY)
	if SERVER then return end
	self.ImageData.AlignX = alignX or self.ImageData.AlignX or TEXT_ALIGN_CENTER
	self.ImageData.AlignY = alignY or self.ImageData.AlignY or TEXT_ALIGN_CENTER
end

function CLASS:GetAlign()
	if SERVER then return end
	return self.ImageData.AlignX or TEXT_ALIGN_CENTER, self.ImageData.AlignY or TEXT_ALIGN_CENTER
end

function CLASS:IsVisibleSimple()
	if CLIENT and not self.ImageData.Material then
		return false
	end

	return BASE.IsVisibleSimple(self)
end

function CLASS:IsVisible()
	if CLIENT and not self.ImageData.Material then
		return false
	end

	return BASE.IsVisible(self)
end

return true


--lua/streamradio_core/classes/ui/progressbar.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/radio/gui_player_spectrum.lua:
return gluapack()()
--lua/streamradio_core/cfchttp.lua:
return gluapack()()
--lua/streamradio_core/client/cl_skin.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Skin = StreamRadioLib.Skin or {}

local LIB = StreamRadioLib.Skin

local LIBUtil = StreamRadioLib.Util

local g_mainPath = LIBUtil.GetMainDirectory("skin")

local function IsValidFile(filename)
	return not file.IsDir(filename, "DATA") and file.Exists(filename, "DATA")
end

function LIB.SanitizeName(name)
	name = tostring(name or "")
	name = string.lower(name or "")
	name = string.Trim(name)

	name = string.gsub(name, "[%.%\"%'%:%?%/%\\%*%<%>%|]", "_" )
	name = string.gsub(name, "[%s]", "_" )

	name = string.Trim(name)
	return name
end

function LIB.GetPath(name)
	name = tostring(name or "")

	if name == "" then
		return g_mainPath .. "/"
	end

	local filepath = g_mainPath .. "/" .. name .. ".txt"
	return filepath
end

function LIB.IsValidSkinFile(name)
	local filepath = LIB.GetPath(name)

	if name == "default" then
		return true
	end

	return IsValidFile(filepath)
end

function LIB.Open(name)
	name = LIB.SanitizeName(name)
	if name == "" then
		name = "default"
	end

	if name == "default" then
		local skindata = LIB.GetDefaultSkin()
		if not skindata then return end

		skindata.name = name
		return skindata
	end

	local filepath = LIB.GetPath(name)
	if not IsValidFile(filepath) then
		return nil
	end

	local skinjson = file.Read(filepath, "DATA") or ""
	if skinjson == "" then return end

	local skindata = StreamRadioLib.JSON.Decode(skinjson)
	if not skindata then return end

	skindata.name = name
	return skindata
end

function LIB.Save(name, skindata)
	name = LIB.SanitizeName(name)
	if name == "" then
		name = "default"
	end

	if name == "default" then
		return false
	end

	skindata = skindata or {}
	skindata.name = nil

	local skinjson = StreamRadioLib.JSON.Encode(skindata, true) or ""
	local filepath = LIB.GetPath(name)

	if not LIBUtil.CreateDirectoryForFile(filepath) then return false end
	file.Write(filepath, skinjson)

	return IsValidFile(filepath)
end

function LIB.Delete(name)
	name = LIB.SanitizeName(name)
	if name == "" then
		name = "default"
	end

	if name == "default" then
		return false
	end

	local filepath = LIB.GetPath(name)

	file.Delete(filepath)
	return not IsValidFile(filepath)
end

function LIB.GetList()
	local files = file.Find(g_mainPath .. "/*.txt", "DATA", "nameasc")

	table.insert(files, 1, "default.txt")

	local found = {}
	local nodouble = {}

	for i, v in ipairs(files or {}) do
		local name = string.StripExtension(v)
		name = LIB.SanitizeName(name)

		if not LIB.IsValidSkinFile(name) then
			continue
		end

		if nodouble[name] then
			continue
		end

		nodouble[name] = true
		table.insert(found, name)
	end

	return found
end

return true


--lua/streamradio_core/interfaces/cache.lua:
local RADIOIFACE = RADIOIFACE
if not istable( RADIOIFACE ) then
	StreamRadioLib.Interface.Load()
	return
end

RADIOIFACE.name = "Cache"
RADIOIFACE.priority = 99000
RADIOIFACE.online = false
RADIOIFACE.cache = true

RADIOIFACE.downloadTimeout = 0
RADIOIFACE.downloadFirst = false
RADIOIFACE.allowCaching = false

local LIBUrl = StreamRadioLib.Url
local LIBString = StreamRadioLib.String
local LIBCache = StreamRadioLib.Cache

function RADIOIFACE:CheckURL(url)
	if LIBUrl.IsOfflineURL(url) then
		return false
	end

	if not LIBCache.GetFile(url) then
		return false
	end

	return true
end

function RADIOIFACE:ParseURL(url)
	local cachefile = LIBCache.GetFile(url)

	if not cachefile then
		return nil
	end

	local urlResult = "data/" .. cachefile
	urlResult = LIBString.NormalizeSlashes(urlResult)

	return urlResult
end

function RADIOIFACE:Convert(url, callback)
	local path = self:ParseURL(url)

	if not path then
		callback(self, false)
		return
	end

	callback(self, true, path)
end

return true


--lua/streamradio_core/interfaces/shoutcast.lua:
local RADIOIFACE = RADIOIFACE
if not istable( RADIOIFACE ) then
	StreamRadioLib.Interface.Load()
	return
end

RADIOIFACE.name = "SHOUTcast"
RADIOIFACE.priority = 100
RADIOIFACE.online = true
RADIOIFACE.cache = false

RADIOIFACE.downloadTimeout = 0
RADIOIFACE.downloadFirst = false
RADIOIFACE.allowCaching = false

local ERROR_NO_ID = 120000

StreamRadioLib.Error.AddStreamErrorCode({
	id = ERROR_NO_ID,
	name = "STREAM_ERROR_SHOUTCAST_NO_ID",
	description = "[SHOUTcast] Invalid stream ID",
	helptext = [[
An invalid stream ID was given.

Notes:
	- Make sure you enter a URL of an existing SHOUTcast stream.
	- The URL should look like this shoutcast://123456
	- Only numbers are supported.
]],
})

local ShoutcastPatterns = {
	"shoutcast%://([%d]+)",
}

local ShoutcastURLs = {
	"shoutcast://",
}

function RADIOIFACE:CheckURL(url)
	for i, v in ipairs(ShoutcastURLs) do
		local result = string.find(string.lower(url), v, 1, true)

		if not result then
			continue
		end

		return true
	end

	return false
end

function RADIOIFACE:ParseURL(url)
	for i, v in ipairs(ShoutcastPatterns) do
		local result = string.Trim(string.match(url, v) or "")

		if result == "" then
			continue
		end

		return result
	end

	return nil
end

function RADIOIFACE:Convert(url, callback)
	local id = self:ParseURL(url)

	if not id then
		callback(self, false, nil, ERROR_NO_ID)
		return
	end

	local streamUrl = StreamRadioLib.Shoutcast.GetStreamUrlById(id)
	callback(self, true, streamUrl)

	return
end

return true


--lua/streamradio_core/filesystem/files-sound-folder.lua:
local RADIOFS = RADIOFS
if not istable( RADIOFS ) then
	StreamRadioLib.Filesystem.Load()
	return
end

RADIOFS.name = "Sound File"
RADIOFS.type = "soundfile"
RADIOFS.icon = StreamRadioLib.GetPNGIcon("sound")

RADIOFS.rootfolder = "sound"

RADIOFS.priority = 99999
RADIOFS.nocreate = true
RADIOFS.loadToWhitelist = false

RADIOFS._validsoundtypes = {
	-- natively supported by GMod Source Engine
	["mp3"] = true,
	["wav"] = true,
	["ogg"] = true,

	-- supported by BASS
	["aac"] = true,
	["aifc"] = true,
	["aiff"] = true,
	["flac"] = true,
	["it"] = true,
	["m4a"] = true,
	["mod"] = true,
	["webm"] = true,
	["wma"] = true,
	["xm"] = true,
}

function RADIOFS:GetSoundPath(vpath)
	if not self:IsInFolder(vpath) then
		return nil
	end

	local levels = self:GetPathLevels(vpath)
	local path = table.concat(levels, "/", 2)

	return path
end

function RADIOFS:IsInFolder(vpath)
	local levels = self:GetPathLevels(vpath)
	local firstlevel = levels[1] or ""

	if firstlevel ~= ":gamesounds" then
		return false
	end

	return true
end

function RADIOFS:IsType(globalpath, vpath)
	return self:IsInFolder(vpath)
end

function RADIOFS:GetFiles(findpath)
	local validfiles = {}

	local files = file.Find(findpath .. "/*", "GAME", "nameasc") or {}

	for i, v in ipairs(files) do
		local ext = string.GetExtensionFromFilename(v) or ""
		if not self._validsoundtypes[ext] then
			continue
		end

		table.insert(validfiles, v)
	end

	return validfiles
end

function RADIOFS:Find(globalpath, vfolder, callback)
	if vfolder == "" then
		callback(true, nil, {":gamesounds"})
		return true
	end

	if not self:IsInFolder(vfolder) then
		callback(false, nil, nil)
		return false
	end

	globalpath = self:GetSoundPath(vfolder)

	if not globalpath then
		callback(false, nil, nil)
		return false
	end

	local findpath = self.rootfolder .. "/" .. globalpath
	local _, folders = file.Find(findpath .. "/*", "GAME", "nameasc")

	local files = self:GetFiles(findpath)

	if #files > 0 then
		table.insert(files, ":allfiles")
	end

	callback(true, files, folders)
	return true
end

function RADIOFS:Exists(globalpath, vpath)
	globalpath = self:GetSoundPath(vpath)

	if not globalpath then
		return false
	end

	local findpath = self.rootfolder .. "/" .. globalpath
	local name = string.GetFileFromFilename(vpath)

	if name == ":allfiles" then
		return true
	end

	if file.Exists(findpath, "GAME") then
		return true
	end

	if file.IsDir(findpath, "GAME") then
		return true
	end

	return false
end

RADIOFS.Delete = nil

function RADIOFS:Read(globalpath, vpath, callback)
	globalpath = self:GetSoundPath(vpath)

	if not globalpath then
		callback(false, nil)
		return false
	end

	local findpath = self.rootfolder .. "/" .. globalpath
	local name = string.GetFileFromFilename(vpath)

	if name == "" then
		callback(false, nil)
		return false
	end

	if name == ":allfiles" then
		local playlist = {}

		local path = string.GetPathFromFilename(findpath)
		local urlpath = string.GetPathFromFilename(globalpath)

		local files = self:GetFiles(path)

		for i, v in ipairs(files) do
			playlist[#playlist + 1] = {
				name = v,
				url = urlpath .. v,
			}
		end

		callback(true, playlist)
		return true
	end

	local playlist = {
		{
			name = name,
			url = globalpath,
		},
	}

	callback(true, playlist)
	return true
end

return true


--lua/streamradio_core/filesystem/vdf.lua:
local RADIOFS = RADIOFS
if not istable( RADIOFS ) then
	StreamRadioLib.Filesystem.Load()
	return
end

RADIOFS.name = "VDF"
RADIOFS.type = "vdf"
RADIOFS.extension = "vdf"
RADIOFS.icon = StreamRadioLib.GetPNGIcon("table_sound", true)

RADIOFS.priority = 1000
RADIOFS.loadToWhitelist = true

function RADIOFS:Read(globalpath, vpath, callback)
	file.AsyncRead(globalpath, "DATA", function(fileName, gamePath, status, data)
		if status ~= FSASYNC_OK then
			callback(false, nil)
			return
		end

		local RawPlaylist = string.Trim(data or "")
		if RawPlaylist == "" then
			callback(true, {})
			return
		end

		local Playlist = util.KeyValuesToTable(RawPlaylist, false, true) or {}

		callback(true, Playlist)
	end)

	return true
end

function RADIOFS:Write(globalpath, vpath, data, callback)
	if not self:CreateDirectoryForFile(globalpath) then
		callback(false)
		return false
	end

	local f = file.Open(globalpath, "w", "DATA")
	if not f then
		callback(false)
		return false
	end

	local DataString = util.TableToKeyValues(data)
	DataString = string.Trim(DataString)
	DataString = DataString .. "\n\n"

	f:Write(DataString)
	f:Close()

	callback(true)
	return true
end

return true


--lua/autorun/suitnrobbersinit.lua:
return gluapack()()
--lua/svmod/sh_main.lua:
-- @class SV_Vehicle
-- @shared

hook.Add("SV_Enabled", "SV_PrintConsole", function()
	if SERVER then
		SVMOD:PrintConsole(SVMOD.LOG.Info, "Addon enabled server-side.")
	else -- CLIENT
		SVMOD:PrintConsole(SVMOD.LOG.Info, "Addon enabled client-side.")
	end
end)

hook.Add("SV_Disabled", "SV_PrintConsole", function()
	if SERVER then
		SVMOD:PrintConsole(SVMOD.LOG.Info, "Addon disabled server-side.")
	else -- CLIENT
		SVMOD:PrintConsole(SVMOD.LOG.Info, "Addon disabled client-side.")
	end
end)

-- Gets the state of the SVMod.
--
-- Can return nil if the addon does not yet know its
-- status.
-- @treturn boolean True if enabled, false if disabled, nil if unknown.
-- @internal
function SVMOD:GetAddonState()
	if SERVER then
		-- From the configuration file
		return self.CFG.IsEnabled
	else -- CLIENT
		-- Given by the server, can be nil
		return self.IsEnabled
	end
end
--lua/svmod/compatibility/cl_compatibility.lua:
return gluapack()()
--lua/svmod/gui/settings/cl_home.lua:
function SVMOD:GUI_Home(panel, data)
	panel:Clear()

	local function createStatus(status, text)
		if not status then
			status = false
		end

		local statusPanel = vgui.Create("DPanel", panel)
		statusPanel:Dock(TOP)
		statusPanel:DockMargin(0, 2, 0, 0)
		statusPanel:SetSize(0, 30)
		statusPanel:SetPaintBackground(false)

		local checkedPanel = vgui.Create("DImage", statusPanel)
		checkedPanel:SetPos(0, 0)
		checkedPanel:SetSize(24, 24)
		if status then
			checkedPanel:SetImageColor(Color(112, 255, 117))
			checkedPanel:SetImage("vgui/svmod/checked.png")
		else
			checkedPanel:SetImageColor(Color(255, 112, 112))
			checkedPanel:SetImage("vgui/svmod/invalid.png")
		end

		local statusLabel = vgui.Create("DLabel", statusPanel)
		statusLabel:SetPos(35, 2)
		statusLabel:SetFont("SV_Calibri18")
		if status then
			statusLabel:SetColor(Color(112, 255, 117))
		else
			statusLabel:SetColor(Color(255, 112, 112))
		end
		statusLabel:SetText(text)
		statusLabel:SizeToContents()
	end

	local headerPanel = vgui.Create("DPanel", panel)
	headerPanel:Dock(TOP)
	headerPanel:SetSize(0, 20)
	headerPanel:SetPaintBackground(false)

	local titleLabel = vgui.Create("DLabel", headerPanel)
	titleLabel:SetPos(0, 0)
	titleLabel:SetFont("SV_CalibriLight22")
	titleLabel:SetColor(Color(178, 95, 245))
	titleLabel:SetText(language.GetPhrase("svmod.home.home"))
	titleLabel:SizeToContents()

	SVMOD:CreateHorizontalLine(panel)

	if data.Status then
		createStatus(true, language.GetPhrase("svmod.enabled"))
	else
		createStatus(false, language.GetPhrase("svmod.disabled"))
	end

	if SVMOD.FCFG.Version == SVMOD.FCFG.LastVersion then
		createStatus(true, language.GetPhrase("svmod.home.addon_up_to_date"))
	else
		createStatus(false, language.GetPhrase("svmod.home.addon_not_up_to_date") .. " (" .. SVMOD.FCFG.Version .. " - " .. SVMOD.FCFG.LastVersion .. ")")
	end

	if SVMOD.Data and #data.LastVehicleUpdate > 0 then
		createStatus(true, language.GetPhrase("svmod.home.vehicle_up_to_date"))
	else
		createStatus(false, language.GetPhrase("svmod.home.vehicle_not_up_to_date"))
	end

	if #data.ConflictList == 0 then
		createStatus(true, language.GetPhrase("svmod.home.no_conflict"))
	else
		createStatus(false, language.GetPhrase("svmod.home.conflict_detected") .. " : " .. data.ConflictList)
	end

	local vehicleLoadedCount = 0
	if SVMOD.Data then
		vehicleLoadedCount = table.Count(SVMOD.Data)
	end
	local vehicleIncompatibleCount = table.Count(SVMOD:GetVehicleList()) - vehicleLoadedCount

	local loadedText
	if vehicleLoadedCount > 1 then
		loadedText = string.format(language.GetPhrase("svmod.home.vehicle_plurial_loaded"), vehicleLoadedCount)
	else
		loadedText = string.format(language.GetPhrase("svmod.home.vehicle_loaded"), vehicleLoadedCount)
	end

	local incompatibleText
	if vehicleIncompatibleCount > 1 then
		incompatibleText = string.format(language.GetPhrase("svmod.home.vehicle_plurial_incompatible"), vehicleIncompatibleCount)
	else
		incompatibleText = string.format(language.GetPhrase("svmod.home.vehicle_incompatible"), vehicleIncompatibleCount)
	end

	if vehicleIncompatibleCount == 0 then
		createStatus(true, loadedText .. ", " .. incompatibleText)
	else
		createStatus(false, loadedText .. ", " .. incompatibleText)
	end

	SVMOD:CreateHorizontalLine(panel)

	SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.home.enable_svmod"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (data.Status == true),
			DoClick = function()
				SVMOD:SetAddonState(true)
				panel:GetParent():Remove()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (data.Status == false),
			DoClick = function()
				SVMOD:SetAddonState(false)
				panel:GetParent():Remove()
			end
		}
	})

	local perfMode = 0
	if SVMOD.CFG.Lights.DrawProjectedLights then
		if not SVMOD.CFG.Lights.DrawShadows then
			perfMode = 1
		else
			perfMode = 2
		end
	end

	SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.home.performance"), {
		{
			Name = language.GetPhrase("svmod.home.high"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (perfMode == 2),
			DoClick = function()
				SVMOD.CFG.Lights.DrawProjectedLights = true
				SVMOD.CFG.Lights.DrawShadows = true
				SVMOD.CFG.Damage.DrawSmoke = true

				SVMOD:Save()
			end
		},
		{
			Name = language.GetPhrase("svmod.home.normal"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (perfMode == 1),
			DoClick = function()
				SVMOD.CFG.Lights.DrawProjectedLights = true
				SVMOD.CFG.Lights.DrawShadows = false
				SVMOD.CFG.Damage.DrawSmoke = true

				SVMOD:Save()
			end
		},
		{
			Name = language.GetPhrase("svmod.home.low"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (perfMode == 0),
			DoClick = function()
				SVMOD.CFG.Lights.DrawProjectedLights = false
				SVMOD.CFG.Lights.DrawShadows = false
				SVMOD.CFG.Damage.DrawSmoke = false

				SVMOD:Save()
			end
		}
	})

	SVMOD:CreateHorizontalLine(panel)

	local bottomPanel = vgui.Create("DPanel", panel)
	bottomPanel:Dock(TOP)
	bottomPanel:DockMargin(0, 4, 0, 4)
	bottomPanel:SetSize(0, 30)
	bottomPanel:SetPaintBackground(false)

	SVMOD:CreateButton(bottomPanel, language.GetPhrase("svmod.home.support"), function()
		gui.OpenURL("https://discord.svmod.com")
	end)

	local resetButton = SVMOD:CreateButton(bottomPanel, language.GetPhrase("svmod.reset"), function(self)
		if self:GetText() == language.GetPhrase("svmod.home.confirm") then
			net.Start("SV_Settings_HardReset")
			net.WriteBool(true) -- anti netscan
			net.SendToServer()

			panel:GetParent():Remove()
		else
			self:SetText(language.GetPhrase("svmod.home.confirm"))
		end
	end)
	resetButton:DockMargin(6, 0, 0, 0)

	surface.SetFont("SV_Calibri18")
	local firstWidth = surface.GetTextSize(language.GetPhrase("svmod.home.developped_with"))
	local secondWidth = surface.GetTextSize(language.GetPhrase("svmod.home.by"))

	local firstLabel = vgui.Create("DLabel", bottomPanel)
	firstLabel:SetFont("SV_Calibri18")
	firstLabel:SetText(language.GetPhrase("svmod.home.developped_with"))
	firstLabel:SizeToContents()

	local secondLabel = vgui.Create("DLabel", bottomPanel)
	secondLabel:SetFont("SV_Calibri18")
	secondLabel:SetColor(Color(173, 48, 43))
	secondLabel:SetText("♥")
	secondLabel:SizeToContents()

	local thirdLabel = vgui.Create("DLabel", bottomPanel)
	thirdLabel:SetFont("SV_Calibri18")
	thirdLabel:SetText(language.GetPhrase("svmod.home.by"))
	thirdLabel:SizeToContents()

	timer.Simple(FrameTime(), function()
		if IsValid(firstLabel) and IsValid(secondLabel) and IsValid(thirdLabel) and IsValid(bottomPanel) then
			firstLabel:SetPos(bottomPanel:GetSize() - firstWidth - 20 - secondWidth - 5, 4)
			secondLabel:SetPos(bottomPanel:GetSize() - 14 - secondWidth - 5, 4)
			thirdLabel:SetPos(bottomPanel:GetSize() - secondWidth - 5, 4)
		end
	end)
end
--lua/svmod/health/sh_health.lua:
-- @class SV_Vehicle
-- @shared

-- Gets the vehicle health.
-- @treturn number Vehicle health
function SVMOD.Metatable:SV_GetHealth()
	return self:GetNW2Int("SV_Health", 0)
end

-- Gets the vehicle max health.
-- @treturn number Vehicle max health
function SVMOD.Metatable:SV_GetMaxHealth()
	return self:GetNW2Int("SV_MaxHealth", 0)
end

-- Gets the vehicle health as a percentage.
-- @treturn number Vehicle health percentage
function SVMOD.Metatable:SV_GetPercentHealth()
	return self:SV_GetHealth() / self:SV_GetMaxHealth() * 100
end
--lua/svmod/vehicles/sh_vehicles.lua:
return gluapack()()
--lua/autorun/tdmcars_cadillac.lua:
return gluapack()()
--lua/autorun/tdmcars_maserati.lua:
return gluapack()()
--lua/autorun/tdmcars_porcarreragt.lua:
return gluapack()()
--lua/autorun/tdmcars_porcarreragt.lua:
local V = {
			Name = "Porsche Carrera GT", 
			Class = "prop_vehicle_jeep",
			Category = "TDM Cars",
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Porsche Carrera GT by TheDanishMaster",
			Model = "models/tdmcars/por_carreragt.mdl",					
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/carreragt.txt"
							}
			}
list.Set("Vehicles", "carreragttdm", V)

--lua/autorun/tdmcars_porcycle.lua:
return gluapack()()
--lua/autorun/toju_pms_doctors.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/cl_3d2dvgui.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/cl_anims.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/cl_gradients.lua:
-- Gradient helper functions
-- By Bo Anderson
-- Licensed under Mozilla Public License v2.0

--[[
Test scripts:
	lua_run_cl hook.Add("HUDPaint", "test", function() draw.SimpleLinearGradient(100, 200, 100, 100, Color(255, 0, 0), Color(255, 255, 0), false) draw.SimpleLinearGradient(250, 200, 100, 100, Color(0, 255, 0), Color(0, 0, 255), true) end)
	lua_run_cl hook.Add("HUDPaint", "test2", function() draw.SimpleLinearGradient(100, 350, 100, 100, Color(255, 255, 255), Color(0, 0, 0), true) draw.SimpleLinearGradient(250, 350, 100, 100, Color(0, 0, 0, 255), Color(0, 0, 0, 0), false) end)
	lua_run_cl hook.Add("HUDPaint", "test3", function() draw.LinearGradient(100, 500, 100, 100, { {offset = 0, color = Color(255, 0, 0)}, {offset = 0.5, color = Color(255, 255, 255)}, {offset = 1, color = Color(0, 255, 0)} }, false) end)
	lua_run_cl hook.Add("HUDPaint", "test4", function() draw.LinearGradient(250, 500, 100, 100, { {offset = 0, color = Color(0, 0, 255)}, {offset = 0.5, color = Color(255, 255, 0)}, {offset = 1, color = Color(255, 0, 0)} }, true) end)
]]

local mat_white = Material("vgui/white")

function VoidUI.SimpleLinearGradient(x, y, w, h, startColor, endColor, horizontal)
	VoidUI.LinearGradient(x, y, w, h, { {offset = 0, color = startColor}, {offset = 1, color = endColor} }, horizontal)
end

--[[
The stops argument is a table of GradientStop structures.
Example:
	draw.LinearGradient(0, 0, 100, 100, {
		{offset = 0, color = Color(255, 0, 0)},
		{offset = 0.5, color = Color(255, 255, 0)},
		{offset = 1, color = Color(255, 0, 0)}
	}, false)
== GradientStop structure ==
Field  |  Type  | Description
------ | ------ | ---------------------------------------------------------------------------------------
offset | number | Where along the gradient should this stop occur, scaling from 0 (beginning) to 1 (end).
color  | table  | Color structure of what color this stop should be.
]]
function VoidUI.LinearGradient(x, y, w, h, stops, horizontal)
	if #stops == 0 then
		return
	elseif #stops == 1 then
		surface.SetDrawColor(stops[1].color)
		surface.DrawRect(x, y, w, h)
		return
	end

	table.SortByMember(stops, "offset", true)

	render.SetMaterial(mat_white)
	mesh.Begin(MATERIAL_QUADS, #stops - 1)
	for i = 1, #stops - 1 do
		local offset1 = math.Clamp(stops[i].offset, 0, 1)
		local offset2 = math.Clamp(stops[i + 1].offset, 0, 1)
		if offset1 == offset2 then continue end

		local deltaX1, deltaY1, deltaX2, deltaY2

		local color1 = stops[i].color
		local color2 = stops[i + 1].color

		local r1, g1, b1, a1 = color1.r, color1.g, color1.b, color1.a
		local r2, g2, b2, a2
		local r3, g3, b3, a3 = color2.r, color2.g, color2.b, color2.a
		local r4, g4, b4, a4

		if horizontal then
			r2, g2, b2, a2 = r3, g3, b3, a3
			r4, g4, b4, a4 = r1, g1, b1, a1
			deltaX1 = offset1 * w
			deltaY1 = 0
			deltaX2 = offset2 * w
			deltaY2 = h
		else
			r2, g2, b2, a2 = r1, g1, b1, a1
			r4, g4, b4, a4 = r3, g3, b3, a3
			deltaX1 = 0
			deltaY1 = offset1 * h
			deltaX2 = w
			deltaY2 = offset2 * h
		end

		mesh.Color(r1, g1, b1, a1)
		mesh.Position(Vector(x + deltaX1, y + deltaY1))
		mesh.AdvanceVertex()

		mesh.Color(r2, g2, b2, a2)
		mesh.Position(Vector(x + deltaX2, y + deltaY1))
		mesh.AdvanceVertex()

		mesh.Color(r3, g3, b3, a3)
		mesh.Position(Vector(x + deltaX2, y + deltaY2))
		mesh.AdvanceVertex()

		mesh.Color(r4, g4, b4, a4)
		mesh.Position(Vector(x + deltaX1, y + deltaY2))
		mesh.AdvanceVertex()
	end
	mesh.End()
end
--addons/voidlib/lua/voidlib/cl_tracker.lua:

VoidLib.Tracker = VoidLib.Tracker or {}
VoidLib.Tracker.Watermark = false

VoidLib.Tracker.BlacklistedAddons = VoidLib.Tracker.BlacklistedAddons or {}

VoidLib.Tracker.Alert = nil

VoidLib.Tracker.Addons = VoidLib.Tracker.Addons or {}

net.Receive("VoidLib.Tracker.SyncAddon", function ()
    local addonName = net.ReadString()
    local onlyLocal = net.ReadBool()
    
    VoidLib.Lang:Init(addonName, onlyLocal) -- clientside init
end)

function VoidLib.Tracker:ShowLeakAlert(license, licenseNick, msg)
    if (IsValid(VoidLib.Tracker.Alert)) then return end

    local affectedAddons = table.GetKeys(VoidLib.Tracker.BlacklistedAddons)

    local alert = vgui.Create("VoidUI.LeakAlert")
    alert:Center()
    alert:MakePopup()
    alert:InitInfo(affectedAddons, license, licenseNick, msg)

    VoidLib.Tracker.Alert = alert
end


function VoidLib.Tracker:DrawWatermark(addonName)
    hook.Add("HUDPaint", "VoidLib.Tracker.Watermark", function ()

        local msg = string.format("You are playing on a server with an illegal copy of %s!", addonName)
        local msg2 = "Your personal data is at risk!"

        local col = table.Copy(VoidUI.Colors.Red)

        col.r = TimedSin(0.7, 185, 255, 2)

        draw.SimpleText("WARNING", "VoidUI.B48", 20, 20, col, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
        draw.SimpleText(msg, "VoidUI.B26", 20, 58, col, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
        draw.SimpleText(msg2, "VoidUI.B26", 20, 78, col, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
    end)
end

net.Receive("VoidLib.Tracker.Notify", function ()
    local msg = net.ReadString()
    local addonName = net.ReadString()

    local license = net.ReadString()
    local licenseNick = net.ReadString()

    local globalTable = _G[addonName]
    globalTable.PrintError(msg)

    chat.AddText(VoidUI.Colors.Blue, "[", addonName, "] ", VoidUI.Colors.Red, "[WARNING!] ", msg)

    if (!VoidLib.Tracker.Watermark and !string.find(msg, "license")) then
        VoidLib.Tracker:DrawWatermark(addonName)
    end

    VoidLib.Tracker.Watermark = true

    VoidLib.Tracker.BlacklistedAddons[addonName] = true

    timer.Simple(3, function ()
        VoidLib.Tracker:ShowLeakAlert(license, licenseNick, msg)
    end)
    
end)
--addons/voidlib/lua/voidlib/cl_utils.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/bshadows.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/circleavatar.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/paginationpanel.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/popup.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/popup.lua:
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
    self.startTime = SysTime() - 0.5

    self:SetSize(sc(420), sc(170))

    self:Center()

    self:MakePopup()
    self:DoModal()

    self.titleColor = VoidUI.Colors.Blue
    self.title = "INFO"

    self.text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam congue purus...."
    self:WrapText()

    self.continueFunc = nil
    self.cancelFunc = nil

    local buttonContainer = self:Add("Panel")
    buttonContainer:Dock(BOTTOM)
    buttonContainer:SSetTall(30)
    buttonContainer:MarginBottom(15)
    buttonContainer:MarginSides(50)

    local continueButton = buttonContainer:Add("VoidUI.Button")
    continueButton:Dock(LEFT)
    continueButton:SSetWide(sc(140))
    continueButton:SetColor(VoidUI.Colors.Green, VoidUI.Colors.Background)
    continueButton.rounding = 14
    continueButton.thickness = 2
    continueButton.font = "VoidUI.R24"

    continueButton.DoClick = function ()
        if (self.continueFunc) then
            self.continueFunc()
        end
        self:Remove()
    end
    
    local cancelButton = buttonContainer:Add("VoidUI.Button")
    cancelButton:Dock(RIGHT)
    cancelButton:SSetWide(sc(140))
    cancelButton:SetColor(VoidUI.Colors.Red, VoidUI.Colors.Background)
    cancelButton.rounding = 14
    cancelButton.thickness = 2
    cancelButton.font = "VoidUI.R24"

    cancelButton.DoClick = function ()
        if (self.cancelFunc) then
            self.cancelFunc()
        end
        self:Remove()
    end

    self.continueButton = continueButton
    self.cancelButton = cancelButton
end

function PANEL:WrapText()
    self.wrappedText = VoidUI.TextWrap(self.text, "VoidUI.R24", self:GetWide() * 0.9)
end

function PANEL:SetText(title, text, titleColor)
    self.title = string.upper(title)
    self.text = text

    if (titleColor) then
        self.titleColor = titleColor
    end

    self:WrapText()
end

-- Info (blue)
function PANEL:SetInfo()
    self.titleColor = VoidUI.Colors.Blue
    self.continueButton:SetColor(VoidUI.Colors.Green)
    self.cancelButton:SetColor(VoidUI.Colors.Red)
end

-- Danger (red)
function PANEL:SetDanger()
    self.titleColor = VoidUI.Colors.Red
    self.continueButton:SetColor(VoidUI.Colors.Red)
    self.cancelButton:SetColor(VoidUI.Colors.Green)
end

function PANEL:Continue(text, func)
    self.continueButton:SetText(text)
    self.continueFunc = func
end

function PANEL:Cancel(text, func)
    self.cancelButton:SetText(text)
    self.cancelFunc = func
end

function PANEL:SetTitleColor(color)
    self.titleColor = color
end

function PANEL:Paint(w, h)
    Derma_DrawBackgroundBlur(self, self.startTime)

    draw.RoundedBox(16, 0, 0, w, h, VoidUI.Colors.Background)

    draw.SimpleText(self.title, "VoidUI.B30", w/2, sc(10), self.titleColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
    draw.DrawText(self.wrappedText, "VoidUI.R24", w/2, sc(45), VoidUI.Colors.White, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
end

vgui.Register("VoidUI.Popup", PANEL, "EditablePanel")
--addons/voidlib/lua/voidlib/vgui/tabs.lua:
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
	self:Dock(FILL)
	self:DockMargin(0, 0, 0, 0)
	
	self.nav = self:Add("Panel")
	self.nav:Dock(TOP)
	self.nav:SSetTall(44)

	self.nav.Paint = function (self, w, h)
		VoidUI.DrawBox(0, 0, w, h, VoidUI.Colors.Primary)
	end
	
	self.selectedBtn = nil
	self.selectedPanel = nil
	self.selectedIndex = 1

	self.prevPanel = nil

	self.tabCount = 0

	self.tabs = {}
	self.tabButtons = {}

	self.animSpeed = 0.4

	self.accentColor = VoidUI.Colors.Blue
end

function PANEL:SetAccentColor(color)
	self.accentColor = color
end

function PANEL:SetMoveSpeed(speed)
	self.animSpeed = speed
end

function PANEL:PerformLayout(w, h)
	for k, v in pairs(self.tabs) do
		if (!IsValid(v)) then continue end
		v:SetSize(w, h - self.nav:GetTall())

		local x, y = v:GetPos()
		v:SetPos((k - self.selectedIndex) * w + (self:GetPos()), y)
	end
end

function PANEL:AddTab(text, panel, wide)

	surface.SetFont("VoidUI.S30")
	local textSize = surface.GetTextSize(text)

	if (textSize > sc(150)) then
		wide = textSize + 25
	end

	local tab = self.nav:Add("DButton")
	tab:Dock(LEFT)
	tab:SSetWide(wide or 160)
	tab:SetText("")


	panel:Dock(NODOCK) -- disable docking to have that nice animation
	panel:SetVisible(true)

	local x, y = panel:GetPos()
	panel:SetPos(x, self.nav:GetTall())
	

	panel:InvalidateParent(true)
	panel:InvalidateLayout(true)

	tab.text = text

	if (self.tabCount == 0) then
		self.selectedPanel = panel
		self.selectedBtn = tab
	end

	local this = self

	tab.Paint = function (self, w, h)
		local col = (self:IsHovered() and VoidUI.Colors.Hover) or VoidUI.Colors.Primary
		local textCol = VoidUI.Colors.GrayDarker
		local iconCol = VoidUI.Colors.GrayDarker
		if (self:GetParent():GetParent().selectedBtn == tab) then
			col = this.accentColor
			textCol = VoidUI.Colors.White
			iconCol = VoidUI.Colors.White
		end

		VoidUI.DrawRect(0, 0, w, h, col)

		draw.SimpleText(text, "VoidUI.S30", w/2, self:GetParent():GetParent().nav:GetTall() / 2, textCol, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end

	local tabIndex = self.tabCount + 1

	tab.DoClick = function ()
		self:SelectTab(tabIndex)
	end

	self.tabCount = tabIndex

	self.tabs[#self.tabs + 1] = panel
	self.tabButtons[#self.tabButtons + 1] = tab

	return tab
end


function PANEL:SelectTab(tabIndex)

	self.selectedIndex = tabIndex

	local panel = self.tabs[tabIndex]
	local tab = self.tabButtons[tabIndex]

	if (self.selectedPanel == panel) then return end

	for k, _panel in pairs(self.tabs) do
		local x, y = _panel:GetPos()

		-- _panel:Stop()
		_panel:MoveTo( (k - tabIndex) * _panel:GetWide() + self:GetPos(), y, self.animSpeed, 0, -1, function ()
			self:InvalidateLayout(true)
			_panel:InvalidateChildren(true)
		end)
	end


	self.selectedPanel = panel
	self.selectedBtn = tab
end


vgui.Register("VoidUI.Tabs", PANEL, "Panel")

--addons/voidfactions-1.10.6/lua/voidfactions/features/capturepoints/cl_capturepoints.lua:
VoidFactions.PointsTable = VoidFactions.PointsTable or {}
VoidFactions.CapturePoints = VoidFactions.CapturePoints or {}
VoidFactions.CapturePoints.ActivePoint = VoidFactions.CapturePoints.ActivePoint or nil

local L = VoidFactions.Lang.GetPhrase
local sc = VoidUI.Scale

local localPlayer = localPlayer or nil
local localPlayerValid = localPlayerValid or false

local cachedDistances = cachedDistances or {}


-- Functions

function VoidFactions.CapturePoints:DrawLogo(capLogo, capColor, rectX, rectY, rectSize, iconX, iconY, iconSize, captureInProgress, capturingFaction, arcAngle)
    VoidLib.FetchImage(capLogo or "", function (mat)
        draw.RoundedBox(8, rectX, rectY, rectSize, rectSize, capColor)

        if (mat) then
            surface.SetDrawColor(color_white)
            surface.SetMaterial(mat)
            surface.DrawTexturedRect(iconX, iconY, iconSize, iconSize)
        end

        if (captureInProgress) then
            VoidLib.FetchImage(capturingFaction.logo or "", function (mat2)
                if (!mat2) then return end

                VoidUI.StencilMaskStart()
                    draw.NoTexture()
                    VoidUI.DrawArc(rectX+rectSize/2, rectY+rectSize/2, 50, 0, math.Clamp(arcAngle, 0, 360), 1)
                VoidUI.StencilMaskApply()
                    draw.RoundedBox(8, rectX, rectY, rectSize, rectSize, capturingFaction.color or VoidUI.Colors.Black)

                    surface.SetDrawColor(VoidUI.Colors.White)
                    surface.SetMaterial(mat2)
                    surface.DrawTexturedRect(iconX, iconY, iconSize, iconSize)
                VoidUI.StencilMaskEnd()
                
            end, true)
        end
    end, true)
end

hook.Add("InitPostEntity", "VoidFactions.CapturePoints.LocalPlayerInit", function ()
    localPlayerValid = true
end)

-- Timers

timer.Create("VoidFactions.CapturePoints.PrecacheDistances", 2, 0, function ()
    if (!VoidFactions.Config.ShowPointDistances) then return end
    if (!localPlayerValid) then return end

    if (!localPlayer) then
        localPlayer = LocalPlayer()
    end

    for id, point in pairs(VoidFactions.PointsTable) do
        local sqrDist = VoidFactions.Config.CapturePointRenderDistance * VoidFactions.Config.CapturePointRenderDistance
        if (localPlayer:GetPos():DistToSqr(point.pos) > sqrDist) then continue end

        local dist = localPlayer:GetPos():Distance(point.pos)
        cachedDistances[point.id] = math.Round(dist)
    end
end)

timer.Create("VoidFactions.CapturePoints.UIActivator", 1, 0, function ()
    if (!localPlayerValid) then return end
    if (!localPlayer) then
        localPlayer = LocalPlayer()
    end

    local activePoint = nil
    for id, point in pairs(VoidFactions.PointsTable) do
        local sqrDist = point.radius * point.radius
        if (localPlayer:GetPos():DistToSqr(point.pos) > sqrDist) then continue end

        activePoint = point
    end

    VoidFactions.CapturePoints.ActivePoint = activePoint
end)

-- Hooks

hook.Add("HUDPaint", "VoidFactions.CapturePoints.HUDOverlay", function ()
    if (!localPlayerValid) then return end

    local point = VoidFactions.CapturePoints.ActivePoint
    if (!point) then return end

    local isCaptured = point.captureFaction and true or false
    local captureInProgress = point.captureInProgress

    local capturingFaction = point.capturingBy

    local capName = isCaptured and point.captureFaction.name or L"notClaimed"
    local capLogo = isCaptured and point.captureFaction.logo or "MIZ89WN"
    local capColor = isCaptured and point.captureFaction.color or VoidUI.Colors.White

    local captureStart = point.captureStart or 0
    local captureEnd = point.captureEnd or 0

    local iconSize = sc(60)
    local iconPadding = 4

    local center = ScrW() / 2

    local iconX = center + -iconSize/2
    local iconY = sc(30)

    local rectX = iconX - iconPadding
    local rectY = iconY - iconPadding

    local rectSize = iconSize + iconPadding*2

    local isContested = point.isContested

    local curTime = ((isPaused or isContested) and point.pauseTime) or CurTime()

    local capturePercentage = math.min(captureInProgress and (curTime - captureStart) / (captureEnd - captureStart) or 0, 1)
    local arcAngle = capturePercentage * 360

    local totalTime = captureEnd - captureStart
    local elapsedTime = capturePercentage * totalTime
    local timeLeft = math.floor(totalTime - elapsedTime)
    timeLeft = math.max(timeLeft, 0)

    VoidFactions.CapturePoints:DrawLogo(capLogo, capColor, rectX, rectY, rectSize, iconX, iconY, iconSize, captureInProgress, capturingFaction, arcAngle)

    surface.SetFont("VoidUI.R26")

    local capY = sc(100)
    local boxWidth, boxHeight = surface.GetTextSize(capName)
    boxWidth = boxWidth * 1.2
    boxHeight = boxHeight * 1.2

    local padding = 2

    if (captureInProgress) then
        draw.RoundedBox(6, center - boxWidth / 2, capY, boxWidth, boxHeight, VoidUI.Colors.Primary)
        draw.RoundedBox(6, center - boxWidth / 2, capY, boxWidth * capturePercentage, boxHeight, VoidUI.Colors.Red)

        draw.SimpleText(L"capturing", "VoidUI.R26", center, capY + boxHeight/2-1, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    else
        draw.RoundedBox(6, center - boxWidth / 2, capY, boxWidth, boxHeight, capColor)
        draw.RoundedBox(6, center - boxWidth / 2 + padding, capY + padding, boxWidth - padding*2, boxHeight - padding*2, VoidUI.Colors.Primary)
        
        draw.SimpleText(capName, "VoidUI.R26", center, capY + boxHeight/2-1, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end
end)

hook.Add("PostDrawTranslucentRenderables", "VoidFactions.Territories.Draw", function ()
    
    if (!localPlayerValid) then return end
    if (!localPlayer) then
        localPlayer = LocalPlayer()
    end

    local member = VoidFactions.PlayerMember
    if (!member) then return end

    local plyFaction = member.faction
    local rootFaction = plyFaction and plyFaction:GetRootFaction()

    -- Draw it seperately because we need different colors
    for id, point in pairs(VoidFactions.PointsTable) do
        local opponentCapturing = point.captureFaction == rootFaction and point.captureInProgress
        cam.IgnoreZ(opponentCapturing)

        local sqrDist = VoidFactions.Config.CapturePointRenderDistance * VoidFactions.Config.CapturePointRenderDistance
        if (!opponentCapturing and localPlayer:GetPos():DistToSqr(point.pos) > sqrDist) then continue end

        local textPos = Vector(point.pos.x, point.pos.y, point.pos.z + 250)

        local angle = Angle(0, EyeAngles().y, 0)
        angle:RotateAroundAxis(angle:Up(), -90)
        angle:RotateAroundAxis(angle:Forward(), 90)

        local isCaptured = point.captureFaction and true or false
        local captureInProgress = point.captureInProgress

        local capturingFaction = point.capturingBy

        local isContested = point.isContested

        local capName = isCaptured and point.captureFaction.name or L"notClaimed"
        local capLogo = isCaptured and point.captureFaction.logo or "MIZ89WN"
        local capColor = isCaptured and point.captureFaction.color or VoidUI.Colors.White

        local isPaused = point.isPaused

        local iconSize = 60
        local iconPadding = 2

        local iconX = -iconSize/2
        local iconY = 40

        
        local captureStart = point.captureStart or 0
        local captureEnd = point.captureEnd or 0

        local curTime = ( (isPaused or isContested) and point.pauseTime) or CurTime()

        local capturePercentage = math.min(captureInProgress and (curTime - captureStart) / (captureEnd - captureStart) or 0, 1)
        local arcAngle = capturePercentage * 360

        local unitsDist = nil
        local metersDist = nil

        if (VoidFactions.Config.ShowPointDistances) then
            unitsDist = cachedDistances[point.id] or localPlayer:GetPos():Distance(point.pos)
            metersDist = unitsDist * 1.905 / 100
            metersDist = math.floor(metersDist)
        end

        cam.Start3D2D(textPos, angle, 0.4)
            surface.SetFont("VoidUI.R38")

        
            if (VoidFactions.Config.ShowPointDistances) then
                capName = capName .. " (" .. metersDist .. "m)"
            end

            local rectX = iconX - iconPadding
            local rectY = iconY - iconPadding

            local rectSize = iconSize + iconPadding*2

            VoidFactions.CapturePoints:DrawLogo(capLogo, capColor, rectX, rectY, rectSize, iconX, iconY, iconSize, captureInProgress, capturingFaction, arcAngle)
            
            local capY = iconSize + 50
            local boxWidth, boxHeight = surface.GetTextSize(capName)
            boxWidth = boxWidth * 1.2
            boxHeight = boxHeight * 1.2

            local padding = 2

            draw.RoundedBox(6, -(boxWidth / 2), capY, boxWidth, boxHeight, capColor)
            draw.RoundedBox(6, -(boxWidth / 2) + padding, capY + padding, boxWidth - padding*2, boxHeight - padding*2, VoidUI.Colors.Primary)
                
            draw.SimpleText(capName, "VoidUI.R38", center, capY + boxHeight/2-1, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

            capY = capY + 50

            if (captureInProgress) then

                local captureColor = (isPaused or isContested) and VoidUI.Colors.Orange or VoidUI.Colors.Red

                draw.RoundedBox(6, -(boxWidth / 2), capY, boxWidth, boxHeight, VoidUI.Colors.Primary)
                draw.RoundedBox(6, -(boxWidth / 2), capY, boxWidth * capturePercentage, boxHeight, captureColor)

                local text = isPaused and L"paused" or L"capturing"
                if (isContested) then
                    text = L"capturePointContested"
                end
                draw.SimpleText(text, "VoidUI.R38", center, capY + boxHeight/2-1, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
            end

        cam.End3D2D()

        local color = point.isSelected and VoidUI.Colors.Blue or VoidUI.Colors.Red

        if (plyFaction and rootFaction) then
            if (point.captureFaction and point.captureFaction.id == rootFaction.id) then
                color = VoidUI.Colors.Green
            end 
        end

        if (plyFaction and captureInProgress and point.captureFaction and point.captureFaction.id == rootFaction.id) then
            color = VoidUI.Colors.Orange
        end

        VoidLib.StartWorldRings()
            VoidLib.AddWorldRing(point.pos, point.radius, 6, 40)
        VoidLib.FinishWorldRings(color)

        

    end
end)

--addons/voidfactions-1.10.6/lua/voidfactions/features/currencies/sh_currencies.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/features/deposit/sh_deposit.lua:
VoidFactions.Deposit = VoidFactions.Deposit or {}
--addons/voidfactions-1.10.6/lua/voidfactions/classes/sh_faction.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/currencies/mtokens.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/currencies/upgradepoints.lua:
local CURRENCY = VoidFactions.Currencies:NewCurrency() -- Create a new currency object
CURRENCY:Name("Upgrade Points") -- Set the currency name
CURRENCY:SetInternal(true)

-- The functions that checks if the dependent addon/gamemode is installed
-- This is not required. The currency will not be selectable if this function returns false or nil
CURRENCY:IsInstalledFunc(function ()
    return VoidFactions.Settings:IsDynamicFactions()
end)

-- The function that will return the amount of player's money
CURRENCY:GetMoneyFunc(function (ply)
    local member = ply:GetVFMember()
    local faction = member.faction

    return faction and faction:GetUpgradePoints() or 0
end)

-- The function that will give money to the player
CURRENCY:GiveMoneyFunc(function (ply, money)
    -- Do nothing - it's only an internal currency
end)

-- The function that will format the money
-- If not supplied, then a $ will be prepended
CURRENCY:FormatMoneyFunc(function (money)
    return money .. "x Points"
end)

-- Register the currency (this is required!)
VoidFactions.Currencies:AddCurrency(CURRENCY)
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/lockpickspeed.lua:
local UPGRADE = VoidFactions.Upgrades:NewUpgrade()

UPGRADE:Name("upgr_lockpickspeed")
UPGRADE:Icon("uHv8dsv")

UPGRADE:OneInstance()

UPGRADE:Description("upgr_desc_lockpickspeed")
UPGRADE:ValueDescription("upgr_descval_lockpickspeed")

UPGRADE:IsInstalledFunc(function ()
    return DarkRP and true or false
end)

UPGRADE:FormatValue(function (val)
    return val .. "%"
end)

UPGRADE:OnReset(function (ply)
    if (!SERVER) then return end
end)

UPGRADE:OnLoad(function (val, id)
    hook.Add("lockpickTime", "VoidFactions.LockpickSpeed.Hook" .. id , function (ply, ent)
        local wep = ply:GetActiveWeapon()
        local curTime = CurTime()
        timer.Simple(0, function ()
            local lockpickTime = wep:GetLockpickEndTime() - curTime
            
            local member = ply:GetVFMember()
            if (!member) then return end
            local faction = member.faction
            if (!faction) then return end

            if (faction:HasUpgrade("upgr_lockpickspeed")) then
                val = faction:GetUpgradeValue(id)
                if (!val) then return end

                wep:SetLockpickEndTime(curTime + (lockpickTime * (val / 100)))
            end
        end)
    end)
end)


VoidFactions.Upgrades:AddUpgrade(UPGRADE)
--addons/voidfactions-1.10.6/lua/voidfactions/modules/inventories/fsystem_inventory.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/net/rank/cl_rank.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/net/rank/cl_rank.lua:
local L = VoidFactions.Lang.GetPhrase

VoidFactions.Rank = VoidFactions.Rank or {}
VoidFactions.RankTemplates = VoidFactions.RankTemplates or nil


function VoidFactions.Rank:CreateRank(faction, name, weight, tag, maxMembers, canInvite, canPromote, canDemote, canPurchasePerks, kickMembers, manageFaction, minLevel, jobs, canWithdrawMoney, canDepositMoney, canWithdrawItems, canDepositItems, autoPromoteLevel, promoteDefault)
    local validation, msg = VoidFactions.Rank:ValidateRank(name, maxMembers, jobs)
    if (!validation) then
        VoidLib.Notify(L"error", L(msg), VoidUI.Colors.Red, 5)
        return false
    end
    
    net.Start("VoidFactions.Rank.CreateRank")
        net.WriteUInt(istable(faction) and faction.id or faction, 20)
        net.WriteString(name)
        net.WriteString(tag or "")
        net.WriteUInt(maxMembers or 0, 16)

        net.WriteBool(canInvite)
        net.WriteUInt(canPromote, 2)
        net.WriteUInt(canDemote, 2)
        net.WriteBool(canPurchasePerks)
        net.WriteUInt(kickMembers, 2)
        net.WriteBool(manageFaction)
        net.WriteUInt(minLevel or 0, 12)
        net.WriteTable(jobs or {})
        
        if (VoidFactions.Settings:IsStaticFactions()) then
            net.WriteUInt(autoPromoteLevel, 12)
            net.WriteTable(promoteDefault or {})
        end

        if (VoidFactions.Settings:IsDynamicFactions()) then
            net.WriteBool(canWithdrawMoney)
            net.WriteBool(canDepositMoney)
            net.WriteBool(canWithdrawItems)
            net.WriteBool(canDepositItems)
        end
    net.SendToServer()

    return true
end

function VoidFactions.Rank:DeleteRank(rank)
    net.Start("VoidFactions.Rank.DeleteRank")
        net.WriteUInt(istable(rank.faction) and rank.faction.id or 0, 20)
        net.WriteUInt(rank.id, 20)
    net.SendToServer()
end

function VoidFactions.Rank:UpdateRankWeight(rank, weight)
    net.Start("VoidFactions.Rank.UpdateRankWeight")
        net.WriteUInt(istable(rank.faction) and rank.faction.id or 0, 20)
        net.WriteUInt(rank.id, 20)
        net.WriteUInt(weight, 16)
    net.SendToServer()
end

function VoidFactions.Rank:UpdateRank(rank, name, weight, tag, maxMembers, canInvite, canPromote, canDemote, canPurchasePerks, kickMembers, manageFaction, minLevel, jobs, canWithdrawMoney, canDepositMoney, canWithdrawItems, canDepositItems, autoPromoteLevel, promoteDefault)
    local validation, msg = VoidFactions.Rank:ValidateRank(name, maxMembers, jobs)
    if (!validation) then
        VoidLib.Notify(L"error", L(msg), VoidUI.Colors.Red, 5)
        return false
    end

    local faction = rank.faction or 0

    net.Start("VoidFactions.Rank.UpdateRank")
        net.WriteUInt(rank.id, 20)
        net.WriteUInt(istable(faction) and faction.id or faction, 20)
        net.WriteString(name)
        net.WriteString(tag or "")
        net.WriteUInt(maxMembers or 0, 16)


        net.WriteBool(canInvite)
        net.WriteUInt(canPromote, 2)
        net.WriteUInt(canDemote or 1, 2)
        net.WriteBool(canPurchasePerks or false)
        net.WriteUInt(kickMembers, 2)
        net.WriteBool(manageFaction)
        net.WriteUInt(minLevel or 0, 12)
        net.WriteTable(jobs)

        if (VoidFactions.Settings:IsStaticFactions()) then
            net.WriteUInt(autoPromoteLevel, 12)
            net.WriteTable(promoteDefault or {})
        end

        if (VoidFactions.Settings:IsDynamicFactions() or VoidFactions.Config.DepositEnabled) then
            net.WriteBool(canWithdrawMoney)
            net.WriteBool(canDepositMoney)
            net.WriteBool(canWithdrawItems)
            net.WriteBool(canDepositItems)
        end

    net.SendToServer()

    return true
end

-- Net handlers

net.Receive("VoidFactions.Rank.SendRankTemplates", function (len, ply)
    local length = net.ReadUInt(7)
    local ranks = {}
    for i = 1, length do
        local rank = VoidFactions.Rank:ReadRank(nil, true)
        ranks[rank.id] = rank
    end

    VoidFactions.PrintDebug("Received " .. length .. " rank templates")
    VoidFactions.RankTemplates = ranks

    hook.Run("VoidFactions.Rank.RankTemplatesReceived", ranks)
end)
--addons/voidfactions-1.10.6/lua/voidfactions/net/rewards/cl_rewards.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/invite_popup.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/rank_create.lua:
local sc = VoidUI.Scale
local L = VoidFactions.Lang.GetPhrase

local PANEL = {}

local nickSteamids = {}

function PANEL:Init()

	self:SetTitle(L"newRank")

	self:SSetSize(670, 520)
	self:Center()
	
	self.tabs = self:Add("VoidUI.Tabs")

	if (VoidFactions.Settings:IsDynamicFactions()) then
		self.tabs:SetAccentColor(VoidUI.Colors.Green)
	end

	local generalPanel = self:CreateGeneral()
	local permissionPanel = self:CreatePermissions()
	
	if (VoidFactions.Settings:IsDynamicFactions() or CAMI.PlayerHasAccess(LocalPlayer(), "VoidFactions_EditFactions")) then
		self.tabs:AddTab(string.upper(L"general"), generalPanel)
		self.assets = self.tabs:AddTab(string.upper(VoidFactions.Settings:IsStaticFactions() and L"permissions" or L"assets"), permissionPanel)
	end
	
	local buttonContainer = self:Add("Panel")
	buttonContainer:Dock(BOTTOM)
	buttonContainer:SSetTall(100)
	buttonContainer:SDockPadding(80,30,80,30)

	local saveButton = buttonContainer:Add("VoidUI.Button")
	saveButton:Dock(LEFT)
	saveButton:SSetWide(230)
	saveButton:SetText(L"save")
	saveButton:SetColor(VoidUI.Colors.Green, VoidUI.Colors.Background)

	saveButton.DoClick = function ()

		local name, tag, maxMembers, canInvite, canKick, canPromote, canDemote, manageFaction, canPurchasePerks, minLevel, jobs, canWithdrawMoney, canDepositMoney, canWithdrawItems, canDepositItems, autoPromoteLevel, promoteDefault = self:GetValues()
		local b = VoidFactions.Rank:CreateRank(self.faction, name, nil, tag, maxMembers, canInvite, canPromote, canDemote, canPurchasePerks, canKick, manageFaction, minLevel, jobs, canWithdrawMoney, canDepositMoney, canWithdrawItems, canDepositItems, autoPromoteLevel, promoteDefault)
		if (b) then
			self:Remove()
		end
	end

	self.buttonContainer = buttonContainer

	self.generalPanel = generalPanel
	self.permissionPanel = permissionPanel
	self.saveButton = saveButton

end

function PANEL:GetValues()

	local generalPanel = self.generalPanel
	local permissionPanel = self.permissionPanel

	local name = generalPanel.name.entry:GetValue()
	local tag = generalPanel.tag and generalPanel.tag.entry:GetValue()

	local minLevel = nil 
	local maxMembers = nil
	if (VoidFactions.Settings:IsStaticFactions()) then
		maxMembers = generalPanel.maxMembers.entry:GetValue() != "" and generalPanel.maxMembers.entry:GetInt() or 0
		minLevel = generalPanel.minLevel.entry:GetValue() != "" and generalPanel.minLevel.entry:GetInt() or 0
	end

	permissionPanel = VoidFactions.Settings:IsStaticFactions() and permissionPanel or generalPanel

	local canInvite = permissionPanel.canInvite.value
	local canKick = permissionPanel.canKick:GetSelectedID()
	local canPromote = permissionPanel.canPromote:GetSelectedID()
	local canDemote = permissionPanel.canDemote and permissionPanel.canDemote:GetSelectedID() or 1
	local manageFaction = permissionPanel.manageFaction.value

	permissionPanel = self.permissionPanel

	local canPurchasePerks = permissionPanel.canPurchasePerks and permissionPanel.canPurchasePerks.value or false

	local canWithdrawMoney = permissionPanel.canWithdrawMoney and permissionPanel.canWithdrawMoney.value or false
	local canDepositMoney = permissionPanel.canDepositMoney and permissionPanel.canDepositMoney.value or false

	local canWithdrawItems = permissionPanel.canWithdrawItems and permissionPanel.canWithdrawItems.value or false
	local canDepositItems = permissionPanel.canDepositItems and permissionPanel.canDepositItems.value or false

	local jobs = generalPanel.jobs and generalPanel.jobs.value or {}

	local autoPromoteLevel = generalPanel.autoPromoteLevel and (generalPanel.autoPromoteLevel.entry:GetValue() != "" and generalPanel.autoPromoteLevel.entry:GetInt()) or 0
	local promoteDefault = permissionPanel.promoteDefaultRanks and permissionPanel.promoteDefaultRanks.value or {}

	return name, tag, maxMembers, canInvite, canKick, canPromote, canDemote, manageFaction, canPurchasePerks, minLevel, jobs, canWithdrawMoney, canDepositMoney, canWithdrawItems, canDepositItems, autoPromoteLevel, promoteDefault
end


function PANEL:SetFaction(faction)
	self.faction = faction
end


function PANEL:CreateGeneral()
	local panel = self.tabs:Add("VoidUI.PanelContent")
	panel:Dock(FILL)

	local container = panel:Add("Panel")
	container:Dock(FILL)
	container:SDockMargin(30, 20, 30, 20)

	local grid = container:Add("VoidUI.ElementGrid")
	grid:Dock(FILL)

	panel.name = grid:AddElement(L"name", "VoidUI.TextInput")
	

	if (VoidFactions.Settings:IsStaticFactions()) then

		panel.tag = grid:AddElement(L"rankTag", "VoidUI.TextInput")
		panel.maxMembers = grid:AddElement(L"maxMembers", "VoidUI.TextInput")
		panel.maxMembers:SetNumeric(true)

		panel.minLevel = grid:AddElement(L"minimumLevel", "VoidUI.TextInput")
		panel.minLevel:SetNumeric(true)

		panel.jobs = grid:AddElement(L"jobs", "VoidUI.SelectorButton")
		
		panel.jobs.text = L"clickToAdd"
		panel.jobs.DoClick = function ()
			local selector = vgui.Create("VoidUI.ItemSelect")
			selector:SetParent(self)
			selector:SetMultipleChoice(true)

			if (panel.jobs.multiSelection) then
				selector.choices = panel.jobs.multiSelection
			end

			local jobTbl = {}

			for id, job in pairs(RPExtraTeams or {}) do
				jobTbl[job.team] = job.name
			end

			selector:InitItems(jobTbl, function (tbl, selTbl)
				panel.jobs:Select(tbl, selTbl)
			end)
		end

		panel.autoPromoteLevel = grid:AddElement(L"autoPromote" .. " " .. L"level", "VoidUI.TextInput")
		panel.autoPromoteLevel:SetNumeric(true)
	else

		grid:Skip()

		-- Some permissions go here
		panel.canInvite = grid:AddElement(L"inviteMembers", "VoidUI.Dropdown")
		panel.canInvite:SetupChoice(L"yes", L"no")

		panel.canKick = grid:AddElement(L"kickMembers", "VoidUI.Dropdown")
		panel.canKick:AddChoice(L"no")
		panel.canKick:AddChoice(L"yes")
		panel.canKick:ChooseOptionID(1)

		panel.canPromote = grid:AddElement(L"setRanks", "VoidUI.Dropdown")
		panel.canPromote:AddChoice(L"no")
		panel.canPromote:AddChoice(L"yes")
		panel.canPromote:ChooseOptionID(1)

		panel.manageFaction = grid:AddElement(L"manageFaction", "VoidUI.Dropdown")
		panel.manageFaction:SetupChoice(L"yes", L"no")
	end

	return panel
end

function PANEL:CreatePermissions()
	local panel = self.tabs:Add("VoidUI.PanelContent")
	panel:Dock(FILL)

	local container = panel:Add("Panel")
	container:Dock(FILL)
	container:SDockMargin(30, 20, 30, 20)

	local grid = container:Add("VoidUI.ElementGrid")
	grid:Dock(FILL)

	if (VoidFactions.Settings:IsStaticFactions()) then
		panel.canInvite = grid:AddElement(L"inviteMembers", "VoidUI.Dropdown")
		panel.canInvite:SetupChoice(L"yes", L"no")

		panel.canKick = grid:AddElement(L"kickMembers", "VoidUI.Dropdown")
		panel.canKick:AddChoice(L"no")
		panel.canKick:AddChoice(L"onlyFactionMembers")
		panel.canKick:AddChoice(L"factionAndSubfactions")
		panel.canKick:ChooseOptionID(1)
		
		panel.canPromote = grid:AddElement(L"promoteMembers", "VoidUI.Dropdown")
		panel.canPromote:AddChoice(L"no")
		panel.canPromote:AddChoice(L"onlyFactionMembers")
		panel.canPromote:AddChoice(L"factionAndSubfactions")
		panel.canPromote:ChooseOptionID(1)

		panel.canDemote = grid:AddElement(L"demoteMembers", "VoidUI.Dropdown")
		panel.canDemote:AddChoice(L"no")
		panel.canDemote:AddChoice(L"onlyFactionMembers")
		panel.canDemote:AddChoice(L"factionAndSubfactions")
		panel.canDemote:ChooseOptionID(1)

		panel.manageFaction = grid:AddElement(L"manageFaction", "VoidUI.Dropdown")
		panel.manageFaction:SetupChoice(L"yes", L"no")
		panel.manageFaction:GetParent():SetVisible(false)
		
		if (VoidFactions.Config.UpgradesEnabled) then
			panel.canPurchasePerks = grid:AddElement(L"purchaseUpgrades", "VoidUI.Dropdown")
			panel.canPurchasePerks:SetupChoice(L"yes", L"no")
		end

		if (VoidFactions.Config.DepositEnabled) then
			panel.canWithdrawMoney = grid:AddElement(L"canWithdrawMoney", "VoidUI.Dropdown")
			panel.canWithdrawMoney:SetupChoice(L"yes", L"no")

			panel.canDepositMoney = grid:AddElement(L"canDepositMoney", "VoidUI.Dropdown")
			panel.canDepositMoney:SetupChoice(L"yes", L"no")

			panel.canWithdrawItems = grid:AddElement(L"canWithdrawItems", "VoidUI.Dropdown")
			panel.canWithdrawItems:SetupChoice(L"yes", L"no")

			panel.canDepositItems = grid:AddElement(L"canDepositItems", "VoidUI.Dropdown")
			panel.canDepositItems:SetupChoice(L"yes", L"no")
		end

		panel.promoteDefaultRanks = grid:AddElement(L"promoteDefaultRanks", "VoidUI.SelectorButton")

		panel.promoteDefaultRanks.text = L"clickToAdd"
		panel.promoteDefaultRanks.DoClick = function ()
			local selector = vgui.Create("VoidUI.ItemSelect")
			selector:SetParent(self)
			selector:SetMultipleChoice(true)

			if (panel.promoteDefaultRanks.multiSelection) then
				selector.choices = panel.promoteDefaultRanks.multiSelection
			end

			local factionsTbl = {}
			for id, faction in pairs(VoidFactions.LoadedFactions) do
				local defaultRank = faction:GetLowestRank()
				if (!defaultRank) then continue end
				if (self.editedRank and self.editedRank.id == defaultRank.id) then continue end

				local rankTag = defaultRank.tag != "" and defaultRank.tag or defaultRank.name

				factionsTbl[faction.id] = faction.name .. " - " .. rankTag
			end

			selector:InitItems(factionsTbl, function (tbl, selTbl)
				panel.promoteDefaultRanks:Select(tbl, selTbl)
			end)
		end

		
	else
		panel.canPurchasePerks = grid:AddElement(L"purchaseUpgrades", "VoidUI.Dropdown")
		panel.canPurchasePerks:SetupChoice(L"yes", L"no")

		grid:Skip()

		panel.canWithdrawMoney = grid:AddElement(L"canWithdrawMoney", "VoidUI.Dropdown")
		panel.canWithdrawMoney:SetupChoice(L"yes", L"no")

		panel.canDepositMoney = grid:AddElement(L"canDepositMoney", "VoidUI.Dropdown")
		panel.canDepositMoney:SetupChoice(L"yes", L"no")

		panel.canWithdrawItems = grid:AddElement(L"canWithdrawItems", "VoidUI.Dropdown")
		panel.canWithdrawItems:SetupChoice(L"yes", L"no")

		panel.canDepositItems = grid:AddElement(L"canDepositItems", "VoidUI.Dropdown")
		panel.canDepositItems:SetupChoice(L"yes", L"no")
	end

	return panel
end

function PANEL:CreateMembers(rank)

	local this = self

	local panel = self.tabs:Add("VoidUI.PanelContent")
	panel:Dock(FILL)

	local container = panel:Add("Panel")
	container:Dock(FILL)
	container:MarginSides(45)
	container:MarginTop(20)
	container:SDockPadding(24, 5, 24, 0)
	container.Paint = function (self, w, h)
		draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)
	end

	local header = container:Add("Panel")
	header:Dock(TOP)
	header:SSetTall(40)
	header.Paint = function (self, w, h)
		draw.SimpleText(string.upper(L"name"), "VoidUI.B24", 0, h/2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
	end

	local searchInput = header:Add("VoidUI.TextInput")
	searchInput:Dock(RIGHT)
	searchInput:SSetWide(170)
	searchInput:MarginTops(5)
	searchInput.entry:SetPlaceholderText(L"searchByName")
	searchInput.entry:SetFont("VoidUI.R20")

	function searchInput.entry:OnValueChange(val)
		this.performSearch(val)
	end

	self.searchInput = searchInput

	local memberPanel = container:Add("VoidUI.RowPanel")
	memberPanel:Dock(FILL)

	local addMember = container:Add("VoidUI.Button")
	addMember:Dock(BOTTOM)
	addMember:MarginSides(190)
	addMember:MarginTops(12)
	addMember:SSetTall(32)
	addMember.rounding = 16
	addMember.thickness = 1
	addMember:SetColor(VoidUI.Colors.Blue)
	addMember:SetText(L"addMember")
	addMember:SetFont("VoidUI.R20")

	local canInvite = true
	if (rank.faction:GetMaxMembers() != 0 and #rank.faction.members + 1 > rank.faction:GetMaxMembers()) then canInvite = false end
	if (VoidFactions.Settings:IsStaticFactions()) then
		if (rank.maxMembers != 0 and #rank:GetMembers() + 1 > rank.maxMembers) then canInvite = false end
	end

	addMember:SetEnabled(canInvite)

	addMember.DoClick = function ()
		local selector = vgui.Create("VoidUI.ItemSelect")
		selector:SetParent(self)

		local rankMembers = rank:GetMembers()
		local membersTbl = {}
		for k, v in ipairs(rankMembers) do
			if (IsValid(v.ply)) then
				membersTbl[v.sid] = v
			end
		end

		local plyTbl = {}
		for _, ply in ipairs(player.GetHumans()) do
			if (!IsValid(ply)) then continue end

			local sid = ply:SteamID64()
			if (VoidChar) then
				sid = sid .. "-" .. ply:GetNWInt("VoidFactions.CharID")
			end
			if (membersTbl[sid]) then continue end
			
			plyTbl[sid] = ply:Nick()
		end

		selector:InitItems(plyTbl, function (id, v)
			local sid = VoidChar and string.Split(id, "-")[1] or id
			local ply = player.GetBySteamID64(sid)
			if (IsValid(ply)) then
				VoidFactions.Member:SetFaction(rank.faction, rank, ply)
			end
		end)
	end


	self.performSearch = function (str)

		memberPanel:Clear()

		if (self.editedRank) then
			rank = self.editedRank
		end

		local members = rank:GetMembers()
		for _, member in ipairs(members) do

			local rankPanel = nil

			local memberName = nickSteamids[member.sid] or member.name
			if (!memberName) then
				steamworks.RequestPlayerInfo(member.sid, function (name)
				    nickSteamids[member.sid] = name
				    memberName = name

					if (!string.find(memberName, str)) then
						timer.Simple(0, function ()
							rankPanel:Remove()
						end)
					end

				end)
			else
				if (!string.find(memberName, str)) then continue end
			end

			rankPanel = memberPanel:Add("Panel")
			rankPanel:SetText("")
			rankPanel.Paint = function (self, w, h)
				draw.SimpleText(memberName or L"loading", "VoidUI.R24", 5, h/2-sc(10), VoidUI.Colors.Gray)

				surface.SetDrawColor(VoidUI.Colors.Background)
				surface.DrawLine(0, h-1, w, h-1)
			end
			rankPanel:SDockPadding(9,9,9,9)


			local kickButton = rankPanel:Add("VoidUI.Button")
			kickButton:Dock(RIGHT)
			kickButton:SetCompact(true)
			kickButton:SetText(L"kick")
			kickButton:SSetWide(70)
			kickButton:SetColor(VoidUI.Colors.Red)

			kickButton:SetEnabled(!rank.faction.isDefaultFaction)

			kickButton.DoClick = function ()
				local popup = vgui.Create("VoidUI.Popup")
				popup:SetText(L"kickMember", L("kickMemberPrompt", {["name"] = memberName, ["faction"] = member.faction.name}))
				popup:SetDanger()
				popup:Continue(L"kick", function ()
					-- Kick the member
					VoidFactions.Member:KickMember(member, memberName)
					self:Remove()
				end)
				popup:Cancel(L"cancel")
			end



			memberPanel:AddRow(rankPanel, 40)
		end

		if (#members == 0) then
			memberPanel.Paint = function (self, w, h)
				draw.SimpleText(L"thereAreNoMembers", "VoidUI.R36", w/2, h/2-5, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
			end
		else
			memberPanel.Paint = nil
		end
	end
	

	self.performSearch("")
	

	return panel
end

function PANEL:EditMode(rank)

	self.editedRank = rank

	self:SetTitle(L("editRank", rank.name))


	if (VoidFactions.Settings:IsDynamicFactions() and rank:IsTopRank()) then
		self.assets:SetVisible(false)

		local panel = self.generalPanel

		panel.canInvite:GetParent():SetVisible(false)
		panel.canKick:GetParent():SetVisible(false)
		panel.canPromote:GetParent():SetVisible(false)
		panel.manageFaction:GetParent():SetVisible(false)
	end

	local deleteButton = self.buttonContainer:Add("VoidUI.Button")
	deleteButton:Dock(RIGHT)
	deleteButton:SSetWide(230)
	deleteButton:SetText(L"delete")
	deleteButton:SetColor(VoidUI.Colors.Red, VoidUI.Colors.Background)

	if (rank.faction and rank:IsTopRank() and VoidFactions.Settings:IsDynamicFactions()) then
		deleteButton:SetEnabled(false)
	end

	deleteButton.DoClick = function ()
		-- Open a popup
		local popup = vgui.Create("VoidUI.Popup")
		popup:SetText(L"deleteRank", L("deleteRankPrompt", rank.name))
		popup:SetDanger()
		popup:Continue(L"delete", function ()
			-- Delete the faction
			VoidFactions.Rank:DeleteRank(rank)
			self:Remove()
		end)
		popup:Cancel(L"cancel")
	end

	local panel = self.generalPanel

	if (panel.jobs and #rank.jobs > 0) then
		local tbl = {}
		local tbl1 = {}
		for k, v in pairs(rank.jobs or {}) do
			local job = RPExtraTeams[v]
			tbl[job.team] = job.name
			tbl1[#tbl1 + 1] = job.name
		end
		
		panel.jobs.multiSelection = tbl
		panel.jobs:Select(table.GetKeys(tbl), tbl1)
	end

	panel.name.entry:SetValue(rank.name)
	if (VoidFactions.Settings:IsStaticFactions()) then
		panel.tag.entry:SetValue(rank.tag or "")
		panel.maxMembers.entry:SetValue(rank.maxMembers)
		panel.minLevel.entry:SetValue(rank.minLevel)
		panel.autoPromoteLevel.entry:SetValue(rank.autoPromoteLevel)
	end

	panel = VoidFactions.Settings:IsStaticFactions() and self.permissionPanel or self.generalPanel

	panel.canInvite:ChooseOptionID(rank.canInvite and 1 or 2)
	panel.canKick:ChooseOptionID(rank.kickMembers)

	panel.canPromote:ChooseOptionID(rank.canPromote)
	if (VoidFactions.Settings:IsStaticFactions()) then
		panel.canDemote:ChooseOptionID(rank.canDemote)
	end

	panel.manageFaction:ChooseOptionID(rank.manageFaction and 1 or 2)

	panel = self.permissionPanel

	if (VoidFactions.Settings:IsDynamicFactions()) then
		panel.canPurchasePerks:ChooseOptionID(rank.canPurchasePerks and 1 or 2)

		panel.canWithdrawMoney:ChooseOptionID(rank.canWithdrawMoney and 1 or 2)
		panel.canDepositMoney:ChooseOptionID(rank.canDepositMoney and 1 or 2)

		panel.canWithdrawItems:ChooseOptionID(rank.canWithdrawItems and 1 or 2)
		panel.canDepositItems:ChooseOptionID(rank.canDepositItems and 1 or 2)
	end

	if (VoidFactions.Settings:IsStaticFactions() and VoidFactions.Config.UpgradesEnabled) then
		panel.canPurchasePerks:ChooseOptionID(rank.canPurchasePerks and 1 or 2)
	end

	if (VoidFactions.Settings:IsStaticFactions() and VoidFactions.Config.DepositEnabled) then
		panel.canWithdrawMoney:ChooseOptionID(rank.canWithdrawMoney and 1 or 2)
		panel.canDepositMoney:ChooseOptionID(rank.canDepositMoney and 1 or 2)

		panel.canWithdrawItems:ChooseOptionID(rank.canWithdrawItems and 1 or 2)
		panel.canDepositItems:ChooseOptionID(rank.canDepositItems and 1 or 2)
	end

	local membersPanel = nil
	if (VoidFactions.Settings.IsStaticFactions() and rank.faction) then
		panel.promoteDefaultRanks.editFaction = rank.faction

		if (rank.promoteDefault and table.Count(rank.promoteDefault) > 0) then
			local tbl = {}
			local tbl1 = {}
			for k, v in pairs(rank.promoteDefault or {}) do
				local defaultRank = v:GetLowestRank()
				if (!defaultRank) then continue end

				local rankTag = defaultRank.tag != "" and defaultRank.tag or defaultRank.name
				tbl[v.id] = v.name .. " - " .. rankTag
				tbl1[#tbl1 + 1] = v.name .. " - " .. rankTag
			end
			
			panel.promoteDefaultRanks.multiSelection = tbl
			panel.promoteDefaultRanks:Select(table.GetKeys(tbl), tbl1)
		end

		membersPanel = self:CreateMembers(rank)
		self.tabs:AddTab(string.upper(L"members"), membersPanel)
	end


	self.saveButton.DoClick = function ()
		local name, tag, maxMembers, canInvite, canKick, canPromote, canDemote, manageFaction, canPurchasePerks, minLevel, jobs, canWithdrawMoney, canDepositMoney, canWithdrawItems, canDepositItems, autoPromoteLevel, promoteDefault = self:GetValues()

		local b = VoidFactions.Rank:UpdateRank(rank, name, nil, tag, maxMembers, canInvite, canPromote, canDemote, canPurchasePerks, canKick, manageFaction, minLevel, jobs, canWithdrawMoney, canDepositMoney, canWithdrawItems, canDepositItems, autoPromoteLevel, promoteDefault)
		if (b) then
			self:Remove()
		end
	end


end

vgui.Register("VoidFactions.UI.RankCreate", PANEL, "VoidUI.ModalFrame")

--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/upgrade_create.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/dynamic/rewards_panel.lua:
local sc = VoidUI.Scale
local L = VoidFactions.Lang.GetPhrase

local PANEL = {}

function PANEL:Init()
    self:SetOrigSize(1000, 600)

    self:SetTitle(string.upper(L"rewards"))

    local root = self
    self.selectedCategory = nil

    local container = self:Add("Panel")
    container:Dock(FILL)

    local selectionPanel = container:Add("Panel")
    selectionPanel:Dock(LEFT)
    selectionPanel.Paint = function (self, w, h)
        draw.RoundedBox(12, 0, 0, w, h, VoidUI.Colors.Primary)
    end
    selectionPanel:SDockPadding(8,8,8,8)

    local rowPanel = selectionPanel:Add("VoidUI.RowPanel")
    rowPanel:Dock(FILL)
    rowPanel:SDockMargin(0, 0, 0, 10)
    rowPanel:SetSpacing(5)

    function selectionPanel:AddCategory(category)

        local panel = rowPanel:Add("DButton")
        panel:SetText("")
        panel.Paint = function (self, w, h)
            if (self:IsHovered() or root.selectedCategory == category) then
                if (root.selectedCategory == category) then
                    draw.RoundedBox(8, 0, 0, w, h, VoidFactions.UI.Accent)
                else
                    draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.TextGray)
                end
            end

            draw.SimpleText(L(category), "VoidUI.R26", sc(10), h/2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
        end
        panel.DoClick = function ()
            root:SelectCategory(category)
        end

        rowPanel:AddRow(panel)
    end

    local rewardContainer = container:Add("Panel")
    rewardContainer:Dock(FILL)
    rewardContainer.Paint = function (self, w, h)
        draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.Primary)
    end

    local contentRow = rewardContainer:Add("VoidUI.RowPanel")
    contentRow:Dock(FILL)
    contentRow:SetSpacing(20)

    self.selectionPanel = selectionPanel
    self.container = container

    self.rewardContainer = rewardContainer
    self.rowPanel = rowPanel

    self.contentRow = contentRow

    self:UpdateHook()
    self:LoadRewards()
end

function PANEL:UpdateHook()
    hook.Add("VoidFactions.Rewards.RewardsReceived", "VoidFactions.UI.Rewards.RewardsReceived", function ()
        self:LoadRewards()
    end)
end

function PANEL:OnRemove(w, h)
    hook.Remove("VoidFactions.Rewards.RewardsReceived", "VoidFactions.UI.Rewards.RewardsReceived")
end

function PANEL:LoadRewards()
    if (!VoidFactions.Rewards.List) then
        VoidFactions.Rewards:RequestRewards()
    else
        self:CreateRewards()
    end
end

function PANEL:CreateRewards()
    self.rowPanel:Clear()

    local rewards = VoidFactions.Rewards.List
    local modules = {}
    for k, v in pairs(rewards) do
        if (!modules[v.module]) then
            modules[v.module] = {}
            self:SelectCategory(v.module:PrintName())
        end

        modules[v.module][#modules[v.module] + 1] = v
    end

    -- Sort by modules
    for module, rewards in pairs(modules) do
        self.selectionPanel:AddCategory(module:PrintName())
    end
end

function PANEL:SelectCategory(category)
    self.contentRow:Clear()

    local member = VoidFactions.PlayerMember
    local faction = member.faction

    local currency = VoidFactions.Currencies.List[VoidFactions.Config.DepositCurrency]

    self.selectedCategory = category

    local rewards = VoidFactions.Rewards.List
    local selectedRewards = {}
    for k, v in pairs(rewards) do
        if (v.module:PrintName() == category) then
            selectedRewards[v.id] = v
        end
    end

    for id, reward in SortedPairs(selectedRewards) do

        local rewardValue = faction.rewardValues[reward.module.name]
        local progress = math.Clamp(rewardValue.value / reward.requiredValue, 0, 1)

        local panel = self.contentRow:Add("Panel")
        panel.Paint = function (self, w, h)

            rewardValue = faction.rewardValues[reward.module.name]
            progress = math.Clamp(rewardValue.value / reward.requiredValue, 0, 1)

            draw.RoundedBox(8, 0, 0, w, h, VoidUI.Colors.InputLight)

            local iconSize = 50

            VoidLib.FetchImage(reward.icon, function (mat)
                if (!mat) then return end

                surface.SetMaterial(mat)
                surface.SetDrawColor(VoidUI.Colors.White)
                surface.DrawTexturedRect(sc(20), h/2 - iconSize/2, iconSize, iconSize) 
            end)

            local progressColor = progress >= 1 and VoidUI.Colors.Green or VoidUI.Colors.Orange
            local barWidth, barHeight = sc(200), sc(15)
            
            draw.SimpleText(string.upper(reward.name), "VoidUI.B26", sc(20) + iconSize + sc(20), h/2, VoidUI.Colors.Gray, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM)

            local barX, barY = sc(20) + iconSize + sc(20), h/2+sc(5)

            draw.RoundedBox(6, barX, barY, barWidth, barHeight, VoidUI.Colors.BackgroundTransparent)
            draw.RoundedBox(6, barX, barY, barWidth * progress, barHeight, progressColor)

            local progressStr = progress >= 1 and L"claimed" or rewardValue.value .. "/" .. reward.requiredValue
            draw.SimpleText(progressStr, "VoidUI.R14", barX+barWidth/2, barY+barHeight/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

            local rewardX = w - sc(150)
            draw.SimpleText(string.upper(L"reward"), "VoidUI.B26", rewardX, h/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)

            local rewardXP = reward.xp > 0 and reward.xp .. " XP"
            local rewardMoney = reward.money > 0 and currency:FormatMoney(reward.money)
            local rewardStr = (rewardMoney and rewardXP) and rewardMoney .. " & " .. rewardXP or (rewardMoney or rewardXP)

            draw.SimpleText(rewardStr, "VoidUI.R22", rewardX, h/2, VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
        end

        self.contentRow:AddRow(panel, 85)
    end
end

function PANEL:PerformLayout(w, h)
    self:SDockPadding(0, 0, 0, 30, self)

    self.container:MarginSides(45, self)
    self.container:MarginTop(10, self)

    self.contentRow:SDockMargin(20, 20, 20, 20, self)

    self.rewardContainer:MarginLeft(12, self)
    
    self.selectionPanel:SSetWide(240, self)
    -- self.settingsContainer:MarginLeft(12, self)
    -- self.settingTitle:SSetTall(45, self)
    -- self.settingsContent:MarginTop(10, self)
end

vgui.Register("VoidFactions.UI.RewardsPanel", PANEL, "VoidUI.PanelContent")

--addons/voidfactions-1.10.6/lua/voidfactions/vgui/static/board_members.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/static/job_selection.lua:
return gluapack()()
--lua/wos/anim_extension/extensions/wos_l4d.lua:
return gluapack()()
--lua/wos/anim_extension/vgui/wiltos_anim_viewer.lua:
--[[-------------------------------------------------------------------
	wiltOS Animation Viewer:
		A Supplement to the animation base, it allows you to view more than	
					2000 animations/sequences with it's model viewer
			Powered by
						  _ _ _    ___  ____  
				__      _(_) | |_ / _ \/ ___| 
				\ \ /\ / / | | __| | | \___ \ 
				 \ V  V /| | | |_| |_| |___) |
				  \_/\_/ |_|_|\__|\___/|____/ 
											  
 _____         _                 _             _           
|_   _|__  ___| |__  _ __   ___ | | ___   __ _(_) ___  ___ 
  | |/ _ \/ __| '_ \| '_ \ / _ \| |/ _ \ / _` | |/ _ \/ __|
  | |  __/ (__| | | | | | | (_) | | (_) | (_| | |  __/\__ \
  |_|\___|\___|_| |_|_| |_|\___/|_|\___/ \__, |_|\___||___/
                                         |___/             
-------------------------------------------------------------------]]--[[
							  
	Lua Developer: King David
	Contact: http://steamcommunity.com/groups/wiltostech
		
----------------------------------------]]--
wOS = wOS or {}

local w, h = ScrW(), ScrH()

surface.CreateFont( "wOS.Anim.TitleFont", {
	font = "Roboto Cn", -- Use the font-name which is shown to you by your operating system Font Viewer, not the file name
	extended = false,
	size = 24*(h/1200),
	weight = 1000,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false,
} )

surface.CreateFont( "wOS.Anim.DescFont",{
	font = "Roboto Cn", -- Use the font-name which is shown to you by your operating system Font Viewer, not the file name
	extended = false,
	size = 18*(h/1200),
	weight = 500,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false,
} )

list.Add( "DesktopWindows", {
	icon = "wos/anim_extension/emblem.png",
	title = "wiltOS Viewer",
	init = function() wOS:OpenAnimationMenu() end,
})

function wOS:OpenAnimationMenu()

	if self.OverFrame then 
		self.OverFrame:Remove()
		self.OverFrame = nil
		gui.EnableScreenClicker( false )
		return 
	end

	self.OverFrame = vgui.Create( "DFrame" )
	self.OverFrame:SetSize( w, h )
	self.OverFrame:Center()
	self.OverFrame.Paint = function() end
	self.OverFrame:SetTitle( "" )
	self.OverFrame:ShowCloseButton( false )
	self.OverFrame:SetDraggable( false )
	
	gui.EnableScreenClicker( true )
	self.AnimMenu = vgui.Create( "DFrame", self.OverFrame )
	self.AnimMenu:SetSize( w*0.5, h*0.5 )
	self.AnimMenu:Center()
	self.AnimMenu.Display = LocalPlayer():GetModel()
	self.AnimMenu:MakePopup()
	self.AnimMenu:SetTitle( "" )
	self.AnimMenu:ShowCloseButton( false )
	self.AnimMenu:SetDraggable( false )
	
	local fw, fh = self.AnimMenu:GetSize()
	local padx = fh*0.025
	local pady = padx
	
	local modelmenu = vgui.Create( "DAdjustableModelPanel", self.AnimMenu )
	modelmenu:SetPos( padx, pady )
	modelmenu:SetSize( fw/2 - padx - padx/2, fh - 2*pady )
	modelmenu.LayoutEntity = function() local ent = modelmenu:GetEntity() ent:SetEyeTarget( modelmenu:GetCamPos() ) ent:FrameAdvance( FrameTime() ) end
	
	self.AnimMenu.Paint = function( pan, ww, hh )
		if not vgui.CursorVisible() then gui.EnableScreenClicker( true ) end
		draw.RoundedBox( 3, 0, 0, ww, hh, Color( 25, 25, 25, 245 ) )
		--draw.SimpleText( "Animation Viewer", "wOS.Anim.TitleFont", ww/2, hh*0.05, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )	
		surface.SetDrawColor( Color( 0, 155, 155, 255 ) )
		surface.DrawOutlinedRect( padx, pady, modelmenu:GetWide(), modelmenu:GetTall() )
	end 
		
	local lister = vgui.Create( "DListView", self.AnimMenu )
	lister:SetPos( fw/2 + padx/2, pady )
	lister:SetSize( fw/2 - padx - padx/2, fh*0.77 - pady)	
	lister:AddColumn( "Name" )
	lister:SetMultiSelect( false )
	lister:SetHideHeaders( true )
	lister.Pages = {}
	lister.CurrentPage = 1
	
	function lister:Think()
		if wOS.AnimMenu.Display != modelmenu:GetModel() then
			modelmenu:RebuildModel()
		end	
	end
	
	function lister:RebuildCache( ent )
		lister:Clear()
		lister.BasePages = {} // SUPERIOR JACOBS EDIT // https://steamcommunity.com/id/AwesomeJacob/
		lister.Pages = {}
		lister.CurrentPage = 1
		local max = 500
		local count = 0
		local curpage = 1
		for k, v in SortedPairsByValue( ent:GetSequenceList() ) do
			if not lister.BasePages[ curpage ] then lister.BasePages[ curpage ] = {} end
			if count < max then
				table.insert( lister.BasePages[ curpage ], string.lower( v ) )
				if curpage == 1 then
					local line = lister:AddLine( string.lower( v ) )
					line.OnSelect = function()
						ent:ResetSequence( v )
						ent:SetCycle( 0 )
					end
				end
				count = count + 1
			else
				curpage = curpage + 1
				count = 0
			end
		end

		lister.Pages = lister.BasePages
	end

	// SUPERIOR JACOBS EDIT
	// https://steamcommunity.com/id/AwesomeJacob/
	function lister:RebuildToLines( ent, lines )
		lister:Clear()
		lister.Pages = {}
		lister.CurrentPage = 1
		local max = 500
		local count = 0
		local curpage = 1
		for k, v in SortedPairsByValue( lines ) do
			if not lister.Pages[ curpage ] then lister.Pages[ curpage ] = {} end
			if count < max then
				table.insert( lister.Pages[ curpage ], string.lower( v ) )
				if curpage == 1 then
					local line = lister:AddLine( string.lower( v ) )
					line.OnSelect = function()
						ent:ResetSequence( v )
						ent:SetCycle( 0 )
					end
				end
				count = count + 1
			else
				curpage = curpage + 1
				count = 0
			end
		end
	end
	//

	function lister:ChangePage( page )
		lister:Clear()
		if not page then return end	
		if not lister.Pages[ page ] then return end
		local ent = modelmenu:GetEntity()
		for k, v in pairs( lister.Pages[ page ] ) do
			local line = lister:AddLine( string.lower( v ) )
			line.OnSelect = function()
				ent:ResetSequence( v )
				ent:SetCycle( 0 )
			end
		end

		lister:SelectFirstItem()
	end

	function modelmenu:RebuildModel()
		modelmenu:SetModel( wOS.AnimMenu.Display )
		local ent = modelmenu:GetEntity()
		local pos = ent:GetPos()
		local campos = pos + Vector( -150, 0, 0 )
		modelmenu:SetCamPos( campos )
		modelmenu:SetFOV( 45 )
		modelmenu:SetLookAng( ( campos * -1 ):Angle() )
		lister:RebuildCache( modelmenu:GetEntity() )
	end

	local nextbutt = vgui.Create( "DButton", self.AnimMenu )
	nextbutt:SetSize( fw*0.15, fh*0.05 )
	nextbutt:SetPos( fw*0.85 - padx, fh*0.95 - pady*1.5 - nextbutt:GetTall() )
	nextbutt:SetText( "" )
	nextbutt.Paint = function( pan, ww, hh )
		draw.RoundedBox( 5, 0, 0, ww, hh, ( pan:IsDown() and Color( 0, 55, 155, 155 ) ) or Color( 155, 155, 155, 155 ) )
		draw.SimpleText( "NEXT PAGE", "wOS.Anim.DescFont", ww/2, hh/2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	nextbutt.DoClick = function( pan )
		lister.CurrentPage = math.Clamp( lister.CurrentPage + 1, 1, #lister.Pages )
		lister:ChangePage( lister.CurrentPage )
	end
	
	// SUPERIOR JACOBS EDIT
	// https://steamcommunity.com/id/AwesomeJacob/
	local pagedisplay = vgui.Create( "DLabel", self.AnimMenu )
	pagedisplay:SetSize( fw*0.15, fh*0.05 )
	pagedisplay:SetPos( fw/2 + padx/2, fh*0.95 - pady*2 - nextbutt:GetTall() - pagedisplay:GetTall() )
	pagedisplay:SetText( "" )
	pagedisplay.Paint = function( pan, ww, hh )
		draw.RoundedBox( 5, 0, 0, ww, hh, Color( 155, 155, 155, 155 ) )
		draw.SimpleText( "PAGE: "..lister.CurrentPage.."/"..#lister.Pages, "wOS.Anim.DescFont", ww/2, hh/2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end

	local searchbar = vgui.Create( "DTextEntry", self.AnimMenu )
	searchbar:SetSize( fw*0.15 * 1.5, fh*0.05 * 0.8 )
	searchbar:SetPos( fw*0.85 - padx + fw*0.15 - searchbar:GetWide(), fh*0.95 - pady*2 - nextbutt:GetTall() - fh*0.05/2 - searchbar:GetTall()/2 )
	searchbar:SetFont("wOS.Anim.DescFont")
	searchbar:SetText( "" )

	local searchtext = vgui.Create( "DButton", self.AnimMenu )
	searchtext:SetSize( fw*0.15 * 0.5, fh*0.05 )
	searchtext:SetPos( fw/2 + padx/2 + fw*0.15 + padx, fh*0.95 - pady*2 - nextbutt:GetTall() - searchtext:GetTall() )
	searchtext:SetText( "" )
	searchtext.Paint = function( pan, ww, hh )
		draw.RoundedBox( 5, 0, 0, ww, hh, ( pan:IsDown() and Color( 0, 55, 155, 155 ) ) or Color( 155, 155, 155, 155 ) )
		draw.SimpleText( "SEARCH", "wOS.Anim.DescFont", ww/2, hh/2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	searchtext.DoClick = function( pan )
		local var = string.lower(searchbar:GetValue())
		local page = 1
		local line = 0

		if (var == "") then
			lister.Pages = lister.BasePages
			lister:ChangePage( page )
		else
			local found = {}
									
			for i = 1, #lister.BasePages do
				for _, v in ipairs( lister.BasePages[i] ) do
					if (string.find(v, var)) then
						table.insert(found, v)
					end
				end
			end

			lister:RebuildToLines( modelmenu:GetEntity(), found )
		end
	end
	//

	local prevbutt = vgui.Create( "DButton", self.AnimMenu )
	prevbutt:SetSize( fw*0.15, fh*0.05 )
	prevbutt:SetPos( fw/2 + padx/2, fh*0.95 - pady*1.5 - prevbutt:GetTall() )
	prevbutt:SetText( "" )
	prevbutt.Paint = function( pan, ww, hh )
		draw.RoundedBox( 5, 0, 0, ww, hh, ( pan:IsDown() and Color( 0, 55, 155, 155 ) ) or Color( 155, 155, 155, 155 ) )
		draw.SimpleText( "PREVIOUS PAGE", "wOS.Anim.DescFont", ww/2, hh/2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	prevbutt.DoClick = function( pan )
		lister.CurrentPage = math.Clamp( lister.CurrentPage - 1, 1, #lister.Pages )
		lister:ChangePage( lister.CurrentPage )
	end
	
	local replaybutt = vgui.Create( "DButton", self.AnimMenu )
	replaybutt:SetSize( fw*0.15, fh*0.05 )
	replaybutt:SetPos( fw/2 + padx/2 + replaybutt:GetWide() + padx, fh*0.95 - pady*1.5 - replaybutt:GetTall() )
	replaybutt:SetText( "" )
	replaybutt.Paint = function( pan, ww, hh )
		draw.RoundedBox( 5, 0, 0, ww, hh, ( pan:IsDown() and Color( 0, 55, 155, 155 ) ) or Color( 155, 155, 155, 155 ) )
		draw.SimpleText( "REPLAY SELECTION", "wOS.Anim.DescFont", ww/2, hh/2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	replaybutt.DoClick = function( pan )
		local selected = lister:GetSelectedLine()
		if not selected then return end
		local ent = modelmenu:GetEntity()
		ent:ResetSequence( lister:GetLines()[ selected ]:GetValue( 1 ) )
		ent:SetCycle( 0 )		
	end
	
	local closebutt = vgui.Create( "DButton", self.AnimMenu )
	closebutt:SetSize( fw*0.3, fh*0.05 )
	closebutt:SetPos( fw/2 + fw*0.1, fh*0.95 - pady )
	closebutt:SetText( "" )
	closebutt.Paint = function( pan, ww, hh )
		draw.RoundedBox( 5, 0, 0, ww, hh, ( pan:IsDown() and Color( 0, 55, 155, 155 ) ) or Color( 155, 155, 155, 155 ) )
		draw.SimpleText( "CLOSE MENU", "wOS.Anim.DescFont", ww/2, hh/2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	closebutt.DoClick = function( pan )
		wOS:OpenAnimationMenu()	
	end
	
	local mw, mh = modelmenu:GetSize()
	
	local infoframe = vgui.Create( "DPanel", modelmenu )
	infoframe:SetSize( mw, mh*0.2 )
	infoframe:SetPos( 0, mh*0.8 )
	infoframe.Paint = function( pan, ww, hh )
		if not lister:GetLines()[ lister:GetSelectedLine() ] then return end
		local title = lister:GetLines()[ lister:GetSelectedLine() ]:GetValue( 1 )
		local ent = modelmenu:GetEntity()
		local act = ent:LookupSequence( title )
		draw.SimpleText( "SEQUENCE: " .. title, "wOS.Anim.DescFont", ww/2, hh*0.25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		if act then
			local actn = ent:GetSequenceActivityName( act )
			act = ent:GetSequenceActivity( act )
			if not act then 
				draw.SimpleText( "ACT ID: NONE", "wOS.Anim.DescFont", ww/2, hh*0.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( "ACT ID: " .. act, "wOS.Anim.DescFont", ww/2, hh*0.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			if not actn then 
				draw.SimpleText( "ACT NAME: N/A", "wOS.Anim.DescFont", ww/2, hh*0.75, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( "ACT NAME: " .. actn, "wOS.Anim.DescFont", ww/2, hh*0.75, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
		end	
	end
	
	local holdframe = vgui.Create( "DFrame", self.OverFrame )
	holdframe:SetSize( fw*0.3, fh*0.1 )
	holdframe:SetPos( fw*1.5 + fw*0.01, fh - fh/2 )
	holdframe:SetText( "" )
	holdframe:SetTitle( "" )
	holdframe:ShowCloseButton( false )
	holdframe:SetDraggable( false )
	holdframe.Paint = function( pan, ww, hh )
		draw.RoundedBox( 3, 0, 0, ww, hh, Color( 25, 25, 25, 245 ) )
	end
	holdframe.Think = function( pan )
		local endy = fh*0.1
		if pan.Expand then
			endy = fh
		end
		pan:SetTall( math.Approach( pan:GetTall(), endy, 15 ) )
	end
	holdframe.Expand = false
	holdframe:MakePopup()
	
	local iw, ih = holdframe:GetSize()
	
	local togglebutt = vgui.Create( "DButton", holdframe )
	togglebutt:SetSize( iw*0.9, fh*0.05 )
	togglebutt:SetPos( iw*0.05, ih - fh*0.075 )
	togglebutt:SetText( "" )
	togglebutt.Paint = function( pan, ww, hh )
		draw.RoundedBox( 5, 0, 0, ww, hh, ( pan:IsDown() and Color( 0, 55, 155, 155 ) ) or Color( 155, 155, 155, 155 ) )
		draw.SimpleText( ( holdframe.Expand and "Close Holdtype Creator" ) or "Open Holdtype Creator", "wOS.Anim.DescFont", ww/2, hh/2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	
	local ACTS = { 
		[ "Idle Standing" ] = "ACT_MP_STAND_IDLE", 
		[ "Slow Walk" ] = "ACT_MP_WALK", 
		[ "Running" ] = "ACT_MP_RUN", 
		[ "Sprinting" ] = "ACT_MP_SPRINT",
		[ "Idle Crouching" ] = "ACT_MP_CROUCH_IDLE", 
		[ "Walk Crouching" ] = "ACT_MP_CROUCHWALK", 
		[ "Attack Standing" ] = "ACT_MP_ATTACK_STAND_PRIMARYFIRE",
		[ "Attack Crouching" ] = "ACT_MP_ATTACK_CROUCH_PRIMARYFIRE",
		[ "Reload Standing" ] = "ACT_MP_RELOAD_STAND",
		[ "Reload Crouching" ] = "ACT_MP_RELOAD_CROUCH",
		[ "Swimming" ] = "ACT_MP_SWIM",
		[ "Jumping" ] = "ACT_MP_JUMP",
		[ "Landing" ] = "ACT_LAND",
	}
	
	local title = vgui.Create( "DLabel", holdframe )
	title:SetSize( iw*0.8, fh*0.05 )
	title:SetPos( iw*0.05, ih )
	title:SetText( "Base Holdtype:" )
	title:SetFont( "wOS.Anim.TitleFont" )
	
	local basetype = vgui.Create( "DTextEntry", holdframe )
	basetype:SetSize( iw*0.8, fh*0.03 )
	basetype:SetPos( iw*0.05, ih + fh*0.05 )
	
	local baselist = vgui.Create( "DImageButton", holdframe )
	baselist:SetSize( fh*0.03, fh*0.03 )
	baselist:SetPos( iw*0.86, ih + fh*0.05 )
	baselist:SetImage( "icon16/application_view_list.png" )	
	baselist.DoClick = function( pan )
		if pan.ItemIconOptions then pan.ItemIconOptions:Remove() pan.ItemIconOptions = nil end
		pan.ItemIconOptions = DermaMenu( baselist )
		pan.ItemIconOptions:MakePopup()
		pan.ItemIconOptions:SetPos( gui.MouseX(), gui.MouseY() )
		pan.ItemIconOptions.Think = function( self )
			if not pan then self:Remove() end
		end
		local holdlist = { "pistol", "smg", "grenade", "ar2", "shotgun", "rpg", "physgun", "crossbow", "melee", "slam", "normal", "fist", "melee2", "passive", "knife", "duel", "camera", "magic", "revolver" }
		for name, _ in pairs( wOS.AnimExtension.TranslateHoldType ) do
			table.insert( holdlist, name )
		end
		for _, typ in ipairs( holdlist ) do
			pan.ItemIconOptions:AddOption( typ, function( self ) 
				basetype:SetText( typ )
				self:Remove()
			end )
		end			
	end
	
	local title = vgui.Create( "DLabel", holdframe )
	title:SetSize( iw*0.9, fh*0.05 )
	title:SetPos( iw*0.05, ih + fh*0.09 )
	title:SetText( "Holdtype Name:" )
	title:SetFont( "wOS.Anim.TitleFont" )
	
	local nametext = vgui.Create( "DTextEntry", holdframe )
	nametext:SetSize( iw*0.9, fh*0.03 )
	nametext:SetPos( iw*0.05, ih + fh*0.15 )
	
	local title = vgui.Create( "DLabel", holdframe )
	title:SetSize( iw*0.9, fh*0.05 )
	title:SetPos( iw*0.05, ih + fh*0.19 )
	title:SetText( "Holdtype Code:" )
	title:SetFont( "wOS.Anim.TitleFont" )
	
	local prefix = vgui.Create( "DTextEntry", holdframe )
	prefix:SetSize( iw*0.9, fh*0.03 )
	prefix:SetPos( iw*0.05, ih + fh*0.25 )
	prefix:SetText( "wos-custom-xxx" )
	
	local title2 = vgui.Create( "DLabel", holdframe )
	title2:SetSize( iw*0.9, fh*0.05 )
	title2:SetPos( iw*0.05, ih + fh*0.29 )
	title2:SetText( "Current Action:" )
	title2:SetFont( "wOS.Anim.TitleFont" )
	
	local DComboBox = vgui.Create( "DComboBox", holdframe )
	DComboBox:SetSize( iw*0.9, fh*0.03 )
	DComboBox:SetPos( iw*0.05, ih + fh*0.35 )
	DComboBox:SetValue( "Idle Standing" )
	for act, _ in pairs( ACTS ) do
		DComboBox:AddChoice( act )
	end
	
	local AddSeq = vgui.Create( "DButton", holdframe )
	AddSeq:SetSize( iw*0.9, fh*0.05 )
	AddSeq:SetPos( iw*0.05, fh*0.515 )
	AddSeq:SetText( "" )
	AddSeq.Paint = function( pan, ww, hh )
		draw.RoundedBox( 5, 0, 0, ww, hh, ( pan:IsDown() and Color( 0, 55, 155, 155 ) ) or Color( 155, 155, 155, 155 ) )
		draw.SimpleText( "Add Selected Sequence", "wOS.Anim.DescFont", ww/2, hh/2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	
	local AppList = vgui.Create( "DListView", holdframe )
	AppList:SetSize( iw*0.9, fh*0.3 )
	AppList:SetPos( iw*0.05, fh*0.6 )
	AppList:SetMultiSelect( false )
	AppList:AddColumn( "Animation" )
	AppList:AddColumn( "Weight" )
	AppList.OnRowRightClick = function( pan, id, line )
		if pan.ItemIconOptions then pan.ItemIconOptions:Remove() pan.ItemIconOptions = nil end
		pan.ItemIconOptions = DermaMenu( AppList )
		pan.ItemIconOptions:MakePopup()
		pan.ItemIconOptions:SetPos( gui.MouseX(), gui.MouseY() )
		pan.ItemIconOptions.Think = function( self )
			if not pan then self:Remove() end
		end
		pan.ItemIconOptions:AddOption( "Change Weight", function( self ) 

			local Scratch = vgui.Create( "DNumberScratch", holdframe:GetParent() )
			Scratch:SetSize( 1, 1 )
			Scratch:Center()
			Scratch:MakePopup()
			Scratch:SetValue( pan.Selections[ pan.ActSelect ][ line:GetValue( 1 ) ]*100 or 100 )
			Scratch:SetMin( 0 )
			Scratch:SetMax( 100 )
			Scratch.OnMousePressed = function() end
			Scratch.OnMouseReleased = function() end
			Scratch.OnValueChanged = function( panz )
				pan.Selections[ pan.ActSelect ][ line:GetValue( 1 ) ] = math.Round( panz:GetFloatValue() )/100
			end
			Scratch.Think = function( panz )
				if input.IsMouseDown( MOUSE_LEFT ) or input.IsMouseDown( MOUSE_RIGHT ) then
					panz:Remove()
					AppList:ReloadAll()
					return
				end
				panz:SetActive( true )
				panz:MouseCapture( true )
				panz:LockCursor()
				if ( !system.IsLinux() ) then
					panz:SetCursor( "none" )
				end
				panz:SetShouldDrawScreen( true )
			end
			hook.Add( "DrawOverlay", "wOS.AnimExtension.ReallyFuckedUpWorkAround", function()
				if ( !IsValid( Scratch ) ) then hook.Remove( "DrawOverlay", "wOS.AnimExtension.ReallyFuckedUpWorkAround" ) return end
				Scratch:PaintScratchWindow()
			end )
			self:Remove()
		end )	
		pan.ItemIconOptions:AddOption( "Remove", function( self ) 
			pan.Selections[ pan.ActSelect ][ line:GetValue( 1 ) ] = nil
			pan:RemoveLine( id )
			self:Remove()
		end )	
	end
	AppList.Selections = {}
	AppList.ActSelect = DComboBox:GetValue()
	AppList.ReloadAll = function( pan ) 
		pan:Clear()
		if pan.Selections[ pan.ActSelect ] then
			for sequence, weight in pairs( pan.Selections[ pan.ActSelect ] ) do
				pan:AddLine( sequence, weight * 100 .. "%" )
			end
		end
	end
	AppList:ReloadAll()
	
	AddSeq.DoClick = function( pan )
		local l = lister:GetSelected()[1]
		if l then
			AppList:AddLine( l:GetValue(1), "100%" )
			if not AppList.Selections[ AppList.ActSelect ] then
				AppList.Selections[ AppList.ActSelect ] = {}
			end
			AppList.Selections[ AppList.ActSelect ][ l:GetValue(1) ] = 1
		end
	end
	
	DComboBox.OnSelect = function( panel, index, value )
		AppList.ActSelect = value
		AppList:ReloadAll()
	end
	
	togglebutt.DoClick = function( pan )
		holdframe.Expand = !holdframe.Expand
		if !holdframe.Expand then
			basetype:SetText( "" )
			nametext:SetText( "" )
			prefix:SetText( "wos-custom-xxx" )
			DComboBox:SetValue( "Idle Standing" )
			AppList.ActSelect = "Idle Standing"
			AppList.Selections = {}
			AppList:ReloadAll()
		end
	end
	
	local CreateHoldType = vgui.Create( "DButton", holdframe )
	CreateHoldType:SetSize( iw*0.9, fh*0.05 )
	CreateHoldType:SetPos( iw*0.05, fh*0.925 )
	CreateHoldType:SetText( "" )
	CreateHoldType.Paint = function( pan, ww, hh )
		draw.RoundedBox( 5, 0, 0, ww, hh, ( pan:IsDown() and Color( 0, 55, 155, 155 ) ) or Color( 155, 155, 155, 155 ) )
		draw.SimpleText( "Print Holdtype ( Console )", "wOS.Anim.DescFont", ww/2, hh/2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	CreateHoldType.DoClick = function( pan )
		chat.AddText( color_white, "[", Color( 0, 175, 255 ), "wOS", color_white, "] The Holdtype code has been printed into console!" )
		local name = ( nametext:GetText():len() > 0 and nametext:GetText() ) or "Rename Me" 
		local pref = ( prefix:GetText():len() > 0 and prefix:GetText() ) or "wos-custom-xxx" 
		local base = ( basetype:GetText():len() > 0 and basetype:GetText() ) or "normal"
		print( [[--=====================================================================]] )
		print( [[/*		My Custom Holdtype
			Created by ]] .. LocalPlayer():Nick() .. [[( ]] .. LocalPlayer():SteamID() .. [[ )*/]])
		print( [[
local DATA = {}
DATA.Name = "]] .. name .. [["
DATA.HoldType = "]] .. pref .. [["
DATA.BaseHoldType = "]] .. base .. [["
DATA.Translations = {} 
]])
		for slot, data in pairs( AppList.Selections ) do
			if table.Count( data ) > 0 then
				print( [[DATA.Translations[ ]] .. ACTS[slot] .. [[ ] = {]] )
				for seq, weight in pairs( data ) do
					print( [[	{ Sequence = "]] .. seq .. [[", Weight = ]] .. weight .. [[ },]])
				end
				print( [[}]] )
				print( "" )
			end
		end
		print( [[wOS.AnimExtension:RegisterHoldtype( DATA )]] )
		print( [[--=====================================================================]] )
	end
	
end
--lua/autorun/wiltos_dynabase_loader.lua:

--[[-------------------------------------------------------------------
	Dynamic Base:
		Bringing the power everyone. Developer, server owner, and player.
			Powered by
						  _ _ _    ___  ____  
				__      _(_) | |_ / _ \/ ___| 
				\ \ /\ / / | | __| | | \___ \ 
				 \ V  V /| | | |_| |_| |___) |
				  \_/\_/ |_|_|\__|\___/|____/ 
											  
 _____         _                 _             _           
|_   _|__  ___| |__  _ __   ___ | | ___   __ _(_) ___  ___ 
  | |/ _ \/ __| '_ \| '_ \ / _ \| |/ _ \ / _` | |/ _ \/ __|
  | |  __/ (__| | | | | | | (_) | | (_) | (_| | |  __/\__ \
  |_|\___|\___|_| |_|_| |_|\___/|_|\___/ \__, |_|\___||___/
                                         |___/             
-------------------------------------------------------------------]]--[[
							  
	Lua Developer: King David
	Contact: http://steamcommunity.com/groups/wiltostech
		
----------------------------------------]]--

if SERVER then
	AddCSLuaFile( "wos/dynabase/loader/loader.lua" )
end

include( "wos/dynabase/loader/loader.lua" )
--lua/wos/dynabase/core/sh_core.lua:
return gluapack()()
--lua/wos/dynabase/core/cl_core.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/icon_dl.lua:
XeninUI.CachedIcons = XeninUI.CachedIcons or {}

if (!file.IsDir("xenin/icons", "DATA")) then
	file.CreateDir("xenin/icons")
end
if (!file.IsDir("xenin/icons/imgur", "DATA")) then
	file.CreateDir("xenin/icons/imgur")
end



local function DownloadImage(tbl)
	local p = XeninUI.Promises.new()

	if (!isstring(tbl.id)) then
		return p:reject("ID invalid")
	end

	local id = tbl.id
	local idLower = id:lower()
	local url = tbl.url or "https://i.imgur.com"
	local type = tbl.type or "png"

	if (XeninUI.CachedIcons[id] and XeninUI.CachedIcons[id] != "Loading") then
		return p:resolve(XeninUI.CachedIcons[id])
	end

	local read = file.Read("xenin/icons/imgur/" .. idLower .. "." .. type)
	if read then
		XeninUI.CachedIcons[id] = Material("../data/xenin/icons/imgur/" .. idLower .. "." .. type, "smooth")

		return p:resolve(XeninUI.CachedIcons[id])
	end

	local fullURL = tbl.fullURL or url .. "/" .. id .. "." .. type
	http.Fetch(fullURL, function(body, size, headers, code)
		if (code != 200) then
			return p:reject("Unable to download image due to code not being 200. Code: " .. code .. " ID:  " .. id .. " URL: " .. url .. "/" .. id .. "." .. type)
		end

		local str = "xenin/icons/imgur/" .. idLower .. "." .. type
		file.Write(str, body)

		XeninUI.CachedIcons[id] = Material("../data/" .. str, "smooth")

		p:resolve(XeninUI.CachedIcons[id])
	end, function(err)
		p:reject("Unable to download image. ID: " .. id .. " URL: " .. url .. "/" .. id .. "." .. type)
	end)

	return p
end

function XeninUI:DownloadIcon(pnl, tbl, pnlVar)
	if (!tbl) then return end

	local p = XeninUI.Promises.new()

	if isstring(tbl) then
		tbl = {
		{
		id = tbl } }
	end

	local i = 1
	local function AsyncDownload()
		if (!tbl[i]) then p:reject()end

		pnl[pnlVar or "Icon"] = "Loading"
		DownloadImage(tbl[i]):next(function(result)
			p:resolve(result):next(function()
				pnl[pnlVar or "Icon"] = result
			end, function(err)
				print(err)
			end)
		end, function(err)
			print(err)

			i = i + 1

			AsyncDownload()
		end)
	end

	AsyncDownload()

	return p
end

function XeninUI:DrawIcon(x, y, w, h, pnl, col, loadCol, var)
	col = col or color_white
	loadCol = loadCol or XeninUI.Theme.Accent
	var = var or "Icon"

	if (pnl[var] and type(pnl[var]) == "IMaterial") then
		surface.SetMaterial(pnl[var])
		surface.SetDrawColor(col)
		surface.DrawTexturedRect(x, y, w, h)
	elseif (pnl[var] != nil) then
		XeninUI:DrawLoadingCircle(h, h, h, loadCol)
	end
end



function XeninUI:GetIcon(id)
	local _type = type(id)
	if (_type == "IMaterial") then
		return id
	end

	if self.CachedIcons[id] then
		return self.CachedIcons[id]
	end

	local read = file.Read("xenin/icons/" .. id:lower() .. ".png")
	if read then
		self.CachedIcons[id] = Material("../data/xenin/icons/" .. id:lower() .. ".png", "smooth")
	else
		self.CachedIcons[id] = "Loading"
	end

	http.Fetch("https://i.imgur.com/" .. id .. ".png", function(body, len)
		local str = "xenin/icons/" .. id:lower() .. ".png"
		file.Write(str, body)

		self.CachedIcons[id] = Material("../data/" .. str, "smooth")
	end)
end

--addons/xenin_framework/lua/xeninui/libs/v0n_sh.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/main.lua:
XeninUI.Configurator = XeninUI.Configurator || {}

function XeninUI.Configurator:PrintMessage(msg)
  MsgC(XeninUI.Theme.Yellow, "[Xenin Configurator] ", color_white, msg .. "\n")
end

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/search_bar.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/entities/entity_list.lua:
local PANEL = {}

local matArrow = Material("xenin/next.png", "smooth")

XeninUI:CreateFont("Xenin.Configurator.Row.Title", 20)
XeninUI:CreateFont("Xenin.Configurator.Row.Subtitle", 14)

function PANEL:Init()
  self.Scroll = self:Add("XeninUI.Scrollpanel.Wyvern")
  self.Scroll:Dock(FILL)

  self.Body = self.Scroll:Add("Panel")

  self.Save.DoClick = function(pnl)
    for _, row in pairs(self.Rows) do
      row.Entity:save(true)
    end
  end
end

function PANEL:SetData(tbl)
  assert(tbl ~= nil, "cannot destructure nil value")
  local __entity, name, script = tbl.__entity, tbl.name, tbl.script

  self:SetScript(script)
  self.Entity = __entity
  self:SetTitle(name)

  self.Navbar:SetVisible(false)
  self.Template = XeninUI.Configurator.Entities:get(self.Entity)
  self.BaseEnt = XeninUI.Configurator.Entities:create(self.Entity)

  if (!self.Template.getListView) then
    error("To use a list you need to implement a static getListView function for your model")
  end

  self.New = self.Body:Add("DButton")
  self.New:Dock(TOP)
  self.New:DockMargin(0, 0, 0, 12)
  self.New:SetText("")
  self.New:SetTall(48)
  self.New.Color = XeninUI.Theme.Background
  self.New.OutlineColor = XeninUI.Theme.Primary
  self.New.TextColor = Color(174, 174, 174)
  self.New.Paint = function(pnl, w, h)
    XeninUI:DrawRoundedBox(6, 0, 0, w, h, pnl.Color)

    XeninUI:MaskInverse(function()
      XeninUI:DrawRoundedBox(6, 1, 1, w - 2, h - 2, pnl.OutlineColor)
    end, function()
      XeninUI:DrawRoundedBox(6, 0, 0, w, h, pnl.OutlineColor)
    end)

    draw.SimpleText("Create New", "Xenin.Configurator.Row.Title", w / 2, h / 2, pnl.TextColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
  end
  self.New.OnCursorEntered = function(pnl)
    pnl:LerpColor("OutlineColor", XeninUI.Theme.Green)
    pnl:LerpColor("TextColor", color_white)
  end
  self.New.OnCursorExited = function(pnl)
    pnl:LerpColor("OutlineColor", XeninUI.Theme.Primary)
    pnl:LerpColor("TextColor", Color(174, 174, 174))
  end
  self.New.DoClick = function(pnl)
    self.Body.Alpha = self.Body.Alpha || 255
    self.Body:LerpAlpha(0, 0.15, function()
      self.Body:SetAlpha(0)
      self:CreateNew(self.Template)
    end)
  end

  self.ToDelete = {}

  local rows = self.Template.getAllEntities()
  self.Rows = {}
  self.RowsIds = {}
  for i, v in pairs(rows) do
    self:CreateRow(v, i)
  end
end

function PANEL:CreateNew()
  local entity = XeninUI.Configurator.Entities:create(self.Entity)

  for i, v in pairs(self.Rows) do
    if (!IsValid(v)) then continue end

    v:SetVisible(false)
  end
  self.New:SetVisible(false)

  if IsValid(self.ListBody) then self.ListBody:Remove()end

  self.Body:LerpAlpha(255, 0.15, function()
    self.Body:SetAlpha(255)
  end)

  self.ListBody = self.Body:Add("Panel")
  self.ListBody.Alpha = 0
  self.ListBody:LerpAlpha(255, nil, function()
    self.ListBody:SetAlpha(255)
  end)
  self.ListBody:Dock(TOP)
  self.ListBody.Rows = {}

  self.ListBody.Header = self.ListBody:Add("Panel")
  self.ListBody.Header:Dock(TOP)
  self.ListBody.Header:DockMargin(0, 0, 0, 8)
  self.ListBody.Header:SetTall(32)
  self.ListBody.Header.Paint = function(pnl, w, h)
    draw.SimpleText(self.Template.selectRowString or "Select a row", "Xenin.Configurator.Row.Title", 8, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
  end

  self.ListBody.Header.Back = self.ListBody.Header:Add("XeninUI.ButtonV2")
  self.ListBody.Header.Back:Dock(RIGHT)
  self.ListBody.Header.Back:DockMargin(0, 6, 6, 0)
  self.ListBody.Header.Back:SetText("")
  self.ListBody.Header.Back:SetSolidColor(XeninUI.Theme.Primary)
  self.ListBody.Header.Back:SetRoundness(6)
  self.ListBody.Header.Back.Text = "Go Back"
  self.ListBody.Header.Back.PaintOver = function(pnl, w, h)
    surface.SetMaterial(matArrow)
    surface.SetDrawColor(color_white)
    local size = h - 14
    surface.DrawTexturedRectRotated(size, h / 2, size, size, 180)

    draw.SimpleText(pnl.Text, "Xenin.Configurator.Row.Subtitle", size * 1.75, h / 2, Color(174, 174, 174), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
  end
  surface.SetFont("Xenin.Configurator.Row.Subtitle")
  local tw = surface.GetTextSize(self.ListBody.Header.Back.Text)
  self.ListBody.Header.Back:SetWide((14 * 1.75) + tw + 8)
  self.ListBody.Header.Back.HasClicked = false
  self.ListBody.Header.Back.DoClick = function(pnl)
    if (pnl.HasClicked) then return end
    pnl.HasClicked = true

    self.ListBody:LerpAlpha(0, 0.15, function()
      self.ListBody:Remove()
      self.Body.Alpha = 0
      self.Body:LerpAlpha(255, 0.15)

      for i, v in pairs(self.Rows) do
        if (!IsValid(v)) then continue end

        v:SetVisible(true)
      end
      self.New:SetVisible(true)
      self:InvalidateLayout(true)
    end)
  end

  for i, v in ipairs(self.Template.getGridContent()) do
    local data = self.Template.getGridData(v)
    if (!data) then continue end
    local ent = XeninUI.Configurator.Entities:create(self.Entity)
    self.Template.gridSetDefaultData(ent, data, i)
    if (self.RowsIds[ent:getId()]) then continue end
    local search = self.Template.getListView(ent).search

    local row = self.ListBody:Add("Xenin.Configurator.Admin.EntityList.Row")
    row:Dock(TOP)
    row:DockMargin(0, 0, 0, 4)
    row:SetTall(56)
    row.DeleteDisabled = true
    row:SetEntity(ent, self.Template, true)
    row.Search = search or function(pnl, text)
      return pnl.Entity:getId():lower():find(text)
    end

    row.Edit:SetText("Select")
    row.Edit:SetSolidColor(XeninUI.Theme.OrangeRed)
    row.Edit.DoClick = function(pnl)
      self.ListBody:LerpAlpha(0, 0.15, function()
        self.ListBody:Remove()
        local newId = #self.Rows + 1
        self:CreateRow(row.Entity, newId)
        self:SwitchToEdit(row.Entity, self.Rows[newId], true)
        self:InvalidateLayout(true)
      end)
    end

    table.insert(self.ListBody.Rows, row)
  end

  self.ListBody.PerformLayout = function(pnl, w, h)
    pnl:SizeToChildren(false, true)
  end

  self:InvalidateLayout(true)
end

function PANEL:SwitchToEdit(entity, parent, isNew)
  local copy = table.Copy(entity)

  for i, v in pairs(self.Rows) do
    if (!IsValid(v)) then continue end

    v:SetVisible(false)
  end
  self.New:SetVisible(false)

  if IsValid(self.SettingsPanel) then self.SettingsPanel:Remove()end

  self.Body:LerpAlpha(255, 0.15, function()
    self.Body:SetAlpha(255)
  end)

  self.SettingsPanel = self.Body:Add("Xenin.Configurator.Admin.Entity.Row.Settings")
  self.SettingsPanel:DockMargin(0, 0, 0, 0)
  self.SettingsPanel.FadeOut = function(pnl)
    self.Body:LerpAlpha(0, 0.15, function()
      self.Body:SetAlpha(0)
      self.SettingsPanel:Remove()

      self.Body:LerpAlpha(255, 0.15, function()
        self.Body:SetAlpha(255)
      end)
      for i, v in pairs(self.Rows) do
        if (!IsValid(v)) then continue end

        v:SetVisible(true)
      end
      self.New:SetVisible(true)
      self:InvalidateLayout(true)
    end)
  end

  self.SettingsPanel.Header = self.SettingsPanel:Add("Panel")
  self.SettingsPanel.Header:Dock(TOP)
  self.SettingsPanel.Header:DockMargin(0, 0, 0, 8)
  self.SettingsPanel.Header:SetTall(32)
  self.SettingsPanel.Header.Text = isNew and "Creating New Object" or "Editing Object"
  self.SettingsPanel.Header.Paint = function(pnl, w, h)
    draw.SimpleText(pnl.Text, "Xenin.Configurator.Row.Title", 8, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
  end

  self.SettingsPanel.Header.Back = self.SettingsPanel.Header:Add("XeninUI.ButtonV2")
  self.SettingsPanel.Header.Back:Dock(RIGHT)
  self.SettingsPanel.Header.Back:DockMargin(0, 6, 6, 0)
  self.SettingsPanel.Header.Back:SetText("")
  self.SettingsPanel.Header.Back:SetSolidColor(XeninUI.Theme.Primary)
  self.SettingsPanel.Header.Back:SetRoundness(6)
  self.SettingsPanel.Header.Back.Text = isNew and "Cancel" or "Go Back"
  self.SettingsPanel.Header.Back.PaintOver = function(pnl, w, h)
    surface.SetMaterial(matArrow)
    surface.SetDrawColor(color_white)
    local size = h - 14
    surface.DrawTexturedRectRotated(size, h / 2, size, size, 180)

    draw.SimpleText(pnl.Text, "Xenin.Configurator.Row.Subtitle", size * 1.75, h / 2, Color(174, 174, 174), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
  end
  surface.SetFont("Xenin.Configurator.Row.Subtitle")
  local tw = surface.GetTextSize(self.SettingsPanel.Header.Back.Text)
  self.SettingsPanel.Header.Back:SetWide((14 * 1.75) + tw + 8)
  self.SettingsPanel.Header.Back.DoClick = function(pnl)
    if isNew then
      local foundAt
      for i, v in ipairs(self.Rows) do
        if (v.Id != parent.Id) then continue end

        v:Remove()

        foundAt = i
      end
      if foundAt then
        table.remove(self.Rows, foundAt)

        parent:Remove()
      end

      self.SettingsPanel:LerpAlpha(0, 0.15, function()
        self.SettingsPanel:Remove()
        self:CreateNew()
        self:InvalidateLayout(true)
      end)
    else
      self.SettingsPanel:FadeOut()
    end
  end

  self.SettingsPanel.Top = self.SettingsPanel:Add("Xenin.Configurator.Admin.EntityList.Row")
  self.SettingsPanel.Top:Dock(TOP)
  self.SettingsPanel.Top:DockMargin(0, 0, 0, 4)
  self.SettingsPanel.Top:SetTall(56)
  self.SettingsPanel.Top.DeleteDisabled = true
  self.SettingsPanel.Top:SetEntity(entity, self.Template)

  self.SettingsPanel.Top.Edit:SetText(isNew and "Create" or "Save")
  self.SettingsPanel.Top.Edit.DoClick = function(pnl, w, h)
    parent:SetEntity(copy, self.Template)


    self.SettingsPanel:FadeOut()
  end

  self.SettingsPanel:AddSettings(entity)
  self.SettingsPanel.OnValueChanged = function(pnl)
    local settings = pnl:GetSettings()
    for i, v in pairs(settings) do
      copy["set" .. tostring(i)](copy, v)
    end

    pnl.Top:SetEntity(copy, self.Template)
    pnl.Top:InvalidateLayout(true)

  end

  self.SettingsPanel:Dock(TOP)
  self.SettingsPanel.GetChildSize = function(pnl)
    local height = 0
    local size = 0
    for i, v in ipairs(pnl.Settings) do
      if (!v:IsVisible()) then continue end

      size = size + 1
      height = height + v:GetTall()
    end
    height = height - (size * 3)

    return height + 8 + pnl.Top:GetTall() + 8 + 40
  end

  self:InvalidateLayout(true)
end

function PANEL:CreateRow(entity, index)
  local listView = self.Template.getListView(entity)
  if (!listView) then return end
  assert(listView ~= nil, "cannot destructure nil value")
  local height, search = listView.height, listView.search

  self.RowsIds[entity:getId()] = true

  local row = self.Body:Add("Xenin.Configurator.Admin.EntityList.Row")
  row:Dock(TOP)
  row:DockMargin(0, 0, 0, 4)
  row:SetTall(height or 56)
  row.Id = index
  row:SetEntity(entity, self.Template)
  row.DoClick = function(pnl)
    self.Body.Alpha = 255
    self.Body:LerpAlpha(0, 0.15, function()
      self.Body:SetAlpha(0)
      self:SwitchToEdit(pnl.Entity, pnl)
    end)
  end
  row.OnRemove = function(pnl)
    self.RowsIds[pnl.Entity:getId()] = nil end
  row.OnDelete = function(pnl)
    XeninUI:SimpleQuery("Delete", "Are you sure you want to delete this?", "Yes", function()
      local foundAt
      for i, v in ipairs(self.Rows) do
        if (v.Id != pnl.Id) then continue end

        v:Remove()

        foundAt = i
      end
      if (!foundAt) then return end

      table.remove(self.Rows, foundAt)

      self.RowsIds[pnl.Entity:getId()] = nil
      pnl.Entity:delete(true)

      pnl:Remove()
    end, "No", function() end)
  end
  row.Search = search or function(pnl, text)
    return pnl.Entity:getId():lower():find(text)
  end

  table.insert(self.Rows, row)
end

function PANEL:OnSearch(text)
  text = text:lower()

  local panels = self.Rows
  if IsValid(self.ListBody) then
    panels = self.ListBody.Rows
  end
  if (IsValid(self.SettingsPanel)) then return end

  for i, v in pairs(panels) do
    local result = v:Search(text)
    v:SetVisible(result)
  end

  self:InvalidateLayout(true)

  if IsValid(self.ListBody) then
    self.ListBody:InvalidateLayout(true)
    self.ListBody:SizeToChildren(false, true)
  end
end

function PANEL:PerformLayout(w, h)
  self.BaseClass.PerformLayout(self, w, h)

  self.Body:SetWide(math.min(600, w))
  self.Body:CenterHorizontal()
  self.Body:SizeToChildren(false, true)

  if (!IsValid(self.SettingsPanel)) then return end

  self.SettingsPanel:SetTall(self.SettingsPanel:GetChildSize())
end

vgui.Register("Xenin.Configurator.Admin.EntityList", PANEL, "Xenin.Configurator.Admin.Panel")

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/entities/settings_base.lua:
local PANEL = {}

XeninUI:CreateFont("Xenin.Configurator.Admin.Panel.Setting", 18)
XeninUI:CreateFont("Xenin.Configurator.Admin.Panel.Setting.Italic", 18, nil, {
italic = true
})

function PANEL:Init()
  self:Dock(TOP)
  self:DockMargin(0, 48, 0, 0)
  self:DockPadding(0, 0, 0, 0)

  self.Settings = {}
end

function PANEL:AddSettings() end

function PANEL:AddSetting(id, name, type, tbl)
  if tbl == nil then tbl = {}
  end
  tbl.data = tbl.data or {}

  local panel = self:Add("DPanel")
  panel.Id = id
  panel:Dock(TOP)
  panel:SetTall(48)
  panel:DockMargin(0, 0, 0, -4)
  panel.Paint = function(pnl, w, h)
    draw.SimpleText(name, "Xenin.Configurator.Admin.Panel.Setting", 8, 48 / 2, Color(145, 145, 145), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
  end
  panel.PerformLayout = function(pnl, w, h)
    if IsValid(panel.Overlay) then
      panel.Overlay:SetSize(w, h)
    end
  end

  if tbl.readOnly then
    panel.Overlay = panel:Add("DPanel")
    panel.Overlay:SetZPos(2)
    panel.Overlay.Color = ColorAlpha(XeninUI.Theme.Navbar, 150)
    panel.Overlay.Paint = function(pnl, w, h)
      XeninUI:DrawRoundedBox(6, 0, 8, w, h - 16, pnl.Color)

      if (!pnl:IsHovered()) then return end

      draw.SimpleText("Read only", "Xenin.Configurator.Admin.Panel.Setting", w / 2, h / 2, XeninUI.Theme.Red, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end
  end
  if tbl.hide then
    panel:SetVisible(false)
  end

  local input = XeninUI.Configurator:CreateInputPanel(type, self, tbl, {
    id = id,
    name = name,
    type = type,
    parent = panel
  })
  input:Dock(RIGHT)
  input:SetParent(panel)
  if (input.SetData and tbl.data) then
    input:SetData(tbl.data)
  end
  if (input.SetInput and tbl.value) then
    input:SetInput(tbl.value)
  end
  if tbl.func then
    tbl.func(input)
  end
  if tbl.fetch then
    tbl.fetch(input)
  end
  input.onChange = function(pnl, ...)
    if (!isfunction(tbl.onChange)) then return end

    tbl.onChange(pnl, ...)
  end
  panel.Input = input

  table.insert(self.Settings, panel)
end

function PANEL:GetSettings()
  local tbl = {}
  for i, v in ipairs(self.Settings) do
    tbl[v.Id] = v.Input:GetSettingValue()
  end

  return tbl
end

function PANEL:Paint(w, h)
  surface.SetDrawColor(100, 100, 100)
  surface.DrawLine(1, h - 1, w - 1, h - 1)
end

vgui.Register("Xenin.Configurator.Admin.SettingsBase", PANEL, "DPanel")

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/popup.lua:
local x

--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/sliderpad.lua:
local x

--addons/xenin_framework/lua/xeninui/libs/config/class.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/config/network/client.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/players/ui/notifications/row.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/navbar.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/popup.lua:
local PANEL = {}

AccessorFunc(PANEL, "m_bgWidth", "BackgroundWidth")
AccessorFunc(PANEL, "m_bgHeight", "BackgroundHeight")

function PANEL:Init()
  self.background = vgui.Create("XeninUI.Frame", self)
  self.background.Paint = function(pnl, w, h)
    local x, y = pnl:LocalToScreen(0, 0)

    BSHADOWS.BeginShadow()
    draw.RoundedBox(6, x, y, w, h, XeninUI.Theme.Background)
    BSHADOWS.EndShadow(1, 2, 2, 150, 0, 0)
  end
  self.background.closeBtn.DoClick = function(pnl)
    self:Remove()
  end
end

function PANEL:Paint(w, h)
  surface.SetDrawColor(20, 20, 20, 160)
  surface.DrawRect(0, 0, w, h)
end

function PANEL:PerformLayout(w, h)
  self.background:SetSize(self:GetBackgroundWidth(), self:GetBackgroundHeight())
  self.background:Center()
end

function PANEL:SetTitle(str)
  self.background:SetTitle(str)
end

vgui.Register("XeninUI.Popup", PANEL, "EditablePanel")

--addons/xenin_framework/lua/xeninui/libs/units/classes/spec.lua:
do
  local _class_0
  local _base_0 = {
    __name = "XeninUI.Units.Spec",
    getName = function(self)
      return self.name end,
    getFunc = function(self)
      return self.func end,
    __type = function(self)
      return self.__name
    end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self, name, func)
      self.name = name
      self.func = func
    end,
    __base = _base_0
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  XeninUI.Units.Spec = _class_0
end

--addons/xenin_framework/lua/xeninui/libs/units/classes/test.lua:
do
  local _class_0
  local _base_0 = {
    __name = "XeninUI.Units.Test",
    addSpec = function(self, name, func, args)
      table.insert(self.specs, XeninUI.Units.Spec(name, func))

      return self
    end,
    runSpecFunc = function(self, spec)
      local p = XeninUI.Promises.new()

      local success, returnVal = xpcall(spec:getFunc(), debug.traceback, self)
      local result = XeninUI.Units.Result(spec:getName(), success, returnVal)

      if result:isSuccess() then
        if istable(result:getReturn()) then
          result:getReturn():next(function()
            p:resolve(result:getMessagePrint())
          end, function(err)
            result:setSuccess(false)
            result:setError(err or "Promise failedd")
            p:reject(result:getMessagePrint())
          end)
        else
          p:resolve(result:getMessagePrint())
        end
      else
        p:reject(result:getMessagePrint())
      end

      return p
    end,
    setBeforeAll = function(self, func)
      self.beforeAll = func return self end,
    setBeforeEach = function(self, func)
      self.beforeEach = func return self end,
    setAfterEach = function(self, func)
      self.afterEach = func return self end,
    setAfterAll = function(self, func)
      self.afterAll = func return self end,
    finishedTests = function(self, dontPrint)
      if (!dontPrint) then
        for i, v in ipairs(self.msgs) do
          table.insert(v, "\n")
          MsgC(unpack(v))
        end
      end
    end,
    run = function(self, dontPrint)
      self.msgs = {
      {
        Color(255, 255, 255),
        tostring(self.name) .. " should:"
      }
      }

      local p = XeninUI.Promises.new()

      local start = SysTime()
      local errors = 0
      local successes = 0
      local size = #self.specs
      local i = 1
      local function nextFunc()
        self:afterEach()
        i = i + 1
      end
      local function runTest()
        if (i > size) then
          self:afterAll()
          self:finishedTests()

          local ms = math.Round((SysTime() - start) * 1000, 2)
          p:resolve({
            msgs = self.msgs,
            executionTime = ms,
            size = size,
            errors = errors,
            successes = successes
          })
        end

        local tbl = self.specs[i]
        self:beforeEach()
        self:runSpecFunc(tbl):next(function(result)
          successes = successes + 1

          table.insert(self.msgs, result)

          nextFunc()
          runTest()
        end, function(err)
          errors = errors + 1

          table.insert(self.msgs, err)

          nextFunc()
          runTest()
        end)
      end

      local err = self:beforeAll()
      if istable(err) then

        err:next(function()
          runTest()
        end, function(err)
          p:reject(err)
        end)
      else
        if err then
          return p:reject(err)
        end
        runTest()
      end

      return p
    end,
    __type = function(self)
      return self.__name
    end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self, name)
      self.specs = {}
      self.name = name
      self.beforeAll = function() end
      self.beforeEach = function() end
      self.afterEach = function() end
      self.afterAll = function() end
    end,
    __base = _base_0
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  XeninUI.Units.Test = _class_0
end

function XeninUI:Test(script, printOut, delay)
  if printOut == nil then printOut = true
  end
  local p = XeninUI.Promises.new()
  local tbl = XeninUI.Scripts:get(script)
  if (!tbl) then
    if printOut then MsgC(XeninUI.Theme.Red, "That script doesn't exist\n")end

    return p:reject("That script doesn't exist")
  end
  local tests = tbl.tests
  if (!istable(tests) or (istable(tests) and #tests == 0)) then
    if print then MsgC(XeninUI.Theme.Red, "There are no tests for this script\n")end

    return p:reject("There are no tests for this script")
  end

  XeninUI.IsTesting = script
  local i = 0
  local time = 0
  local passes = 0
  local fails = 0
  local size = 0
  local msgs = {}
  local function nextTest()
    i = i + 1

    local promise = tests[i]
    if (!promise) then
      local successRate = math.Round((passes / size) * 100, 2)
      if printOut then
        MsgC(XeninUI.Theme.Yellow, "Took " .. tostring(time) .. "ms to run " .. tostring(size) .. " specs with " .. tostring(passes) .. " passes, " .. tostring(fails) .. " fails, and a pass rate of " .. tostring(successRate) .. "%\n")
      end

      p:resolve({
        time = time,
        passes = passes,
        fails = fails,
        size = size,
        msgs = msgs
      })

      XeninUI.IsTesting = nil
    else
      promise:run():next(function(result)
        time = time + result.executionTime
        passes = passes + result.successes
        fails = fails + result.errors
        size = size + result.size

        table.insert(msgs, result.msgs)

        if delay then
          timer.Simple(delay, function()
            nextTest()end)
        else
          nextTest()
        end
      end, function(err)
        print("test error", err)
        p:reject(err)
      end)
    end
  end

  nextTest()

  return p
end

concommand.Add("xenin_test", function(ply, cmd, args)
  if (IsValid(ply) and !XeninUI.Permissions:canAccessFramework(ply)) then return end

  XeninUI:Test(args[1], !tobool(args[2]), tonumber(args[3])):next(function(result) end, function(err)
    ErrorNoHalt(err .. "\n")end)
end)

--addons/xenin-inventory/lua/inventory/essentials/sync.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/essentials/sync.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

function XeninInventory:RequestSync()
  net.Start("XeninInventory.RequestSync")
  net.SendToServer()
end

timer.Create("XeninInventory.RequestSync", 121, 0, function()
  if IsValid(XeninInventory.Frame) then
    if XeninInventory.Frame:IsVisible() then
      return
    end
  end

  XeninInventory:RequestSync()
end)

--addons/xenin-inventory/lua/inventory/configuration/items/base_entity.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local ITEM = XeninInventory:CreateItem()
ITEM.Hover = "XeninInventory.Weapon.Hover"
ITEM.NWData = {}

ITEM:AddAction("Drop", 2, function(self, ply, ent, tbl)
  local trace = {}
  trace.start = ply:EyePos()
  trace.endpos = trace.start + ply:GetAimVector() * 85
  trace.filter = ply

  local tr = util.TraceLine(trace)
  local weapon = ents.Create(ent)
  local model = self:GetModel(ent)
  weapon:SetModel(model)
  weapon:SetPos(tr.HitPos)
  weapon:Spawn()

  for i, v in pairs(tbl.data or {}) do
    if (i == "dt") then
      for k, dt in pairs(v) do
        weapon.dt[k] = v
      end
    elseif (i == "nw") then
      for k, nw in pairs(v) do
        if weapon["Set" .. k] then

          weapon["Set" .. k](weapon, nw)
        end
      end
    end
  end
end)

function ITEM:GetData(ent)
  local dt = {}
  for i, v in pairs(ent.dt or {}) do
    dt[i] = v
  end

  local tbl = {}
  if ent.GetNetworkedVars then
    for i, v in pairs(ent:GetNetworkVars()) do
      tbl[i] = v
    end
  end

  return {
    model = ent:GetModel(),
    dt = dt,
    nw = tbl
  }
end

ITEM:Register("base_entity")

--addons/xenin-inventory/lua/inventory/configuration/items/spawned_food.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/configuration/items/spawned_food.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local ITEM = XeninInventory:CreateItem()
ITEM.Hover = "XeninInventory.Weapon.Hover"

ITEM:AddAction("Use", 1, function(self, ply, ent, tbl)
  if CLIENT then return true end

  local energy = ply:getDarkRPVar("Energy") + tbl.data.energy
  ply:setDarkRPVar("Energy", math.Clamp(energy, 0, 100))

  umsg.Start("AteFoodIcon", ply)
  umsg.End()
end, function()
  return true end)

ITEM:AddAction("Drop", 2, function(self, ply, ent, tbl)
  local trace = {}
  trace.start = ply:EyePos()
  trace.endpos = trace.start + ply:GetAimVector() * 85
  trace.filter = ply

  local tr = util.TraceLine(trace)
  local weapon = ents.Create("spawned_food")
  local model = self:GetModel(tbl)
  weapon:SetModel(tbl.data.model)
  weapon:SetPos(tr.HitPos)
  weapon:Setowning_ent(ply)
  weapon.FoodEnergy = tbl.data.energy
  weapon.FoodName = tbl.data.name
  weapon.foodItem = tbl.data.foodItem

  weapon:Spawn()
end)

function ITEM:GetDisplayName(ent)
  if (!IsValid(ent)) then return ""end

  return self:GetName(ent)
end

function ITEM:GetData(ent)
  return {
    energy = ent.FoodEnergy,
    name = ent.FoodName,
    foodItem = ent.foodItem,
    model = ent:GetModel()
  }
end

function ITEM:GetName(ent)
  if isentity(ent) then
    local tbl = FoodItems
    local mdl = ent:GetModel()

    for i, v in pairs(tbl) do
      if (v.model != mdl) then continue end

      return v.name
    end

    return "Unknown food name"
  end

  return ent.data.name or "Unknown food name"
end

function ITEM:GetModel(ent)
  return ent.data.model or "xd.mdl"
end

function ITEM:OnPickup(ply, ent)
  if (!IsValid(ent)) then return end

  local info = {
    ent = ent:GetClass(),
    dropEnt = ent:GetClass(),
    amount = 1,
    data = self:GetData(ent)
  }
  self:Pickup(ply, ent, info)

  return true
end

ITEM:Register("spawned_food")

--addons/xenin-inventory/lua/inventory/configuration/items/spawned_shipment.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local ITEM = XeninInventory:CreateItem()
ITEM.Hover = "XeninInventory.Shipment.Hover"
ITEM.MaxStack = 1
ITEM.UseDataAmount = true

ITEM:AddAction("Equip", 1, function(self, ply, ent, tbl)
  if CLIENT then return end
  tbl.data = tbl.data or {}

  local ship = CustomShipments[tbl.data.Contents or tbl.data.contents]
  ply:Give(ship.entity)
  ply:SelectWeapon(ship.entity)
end, function(self, ply, tbl)
  tbl.data = tbl.data or {}
  local ship = CustomShipments[tbl.data.Contents or tbl.data.contents]
  if (!ship) then return false, "The shipment seems to have been removed?"end

  return !ply:HasWeapon(ship.entity), "You already have that weapon equipped"
end)

ITEM:AddAction("Drop Amount", 2, function(self, ply, ent, tbl, amt)
  local trace = {}
  trace.start = ply:EyePos()
  trace.endpos = trace.start + ply:GetAimVector() * 85
  trace.filter = ply

  local tr = util.TraceLine(trace)
  local weapon = ents.Create("spawned_shipment")
  local model = self:GetModel(tbl.ent)
  weapon:Setcontents(tbl.data.Contents or tbl.data.contents)
  weapon:Setcount(amt or 1)
  weapon:SetPos(tr.HitPos)
  weapon.ammoadd = weapons.Get(ent) and weapons.Get(ent).Primary.DefaultClip

  weapon:Spawn()
end)

ITEM:AddAction("Drop All", 3, function(self, ply, ent, tbl)
  local trace = {}
  trace.start = ply:EyePos()
  trace.endpos = trace.start + ply:GetAimVector() * 85
  trace.filter = ply

  tbl.data = tbl.data or {}
  local tr = util.TraceLine(trace)
  local weapon = ents.Create("spawned_shipment")
  local model = self:GetModel(tbl.ent)
  weapon:Setcontents(tbl.data.Contents or tbl.data.contents)
  weapon:Setcount(tbl.data.Amount or tbl.data.amount or 1)
  weapon:SetPos(tr.HitPos)
  weapon.ammoadd = weapons.Get(ent) and weapons.Get(ent).Primary.DefaultClip

  weapon:Spawn()
end)

function ITEM:GetName(ent)
  if istable(ent) then ent = ent.ent end

  local tbl = {}
  if isentity(ent) then
    local shipment = CustomShipments[ent:Getcontents()]
    if shipment then
      local name = shipment.name or shipment.Name or shipment.Display or shipment.DisplayName or shipment.nick or shipment.Nick

      if name then
        return name .. " shipment"
      end

      return "Unknown shipment name"
    end

    return "Unknown shipment name"
  else
    tbl = weapons.Get(ent)
    if (!tbl) then return ent end
  end

  return (tbl.PrintName or ent) .. " shipment"
end

function ITEM:GetItem(ent)
  return ent
end

function ITEM:GetVisualAmount(tbl)
  if (!tbl) then return end

  return tbl.data and (tbl.data.amount or tbl.data.Amount or 0) or 0
end

function ITEM:GetData(ent)
  return {
    amount = ent:Getcount(),
    contents = ent:Getcontents()
  }
end

function ITEM:OnPickup(ply, ent)
  if (!IsValid(ent)) then return end

  local tbl = CustomShipments[ent:Getcontents()]

  local info = {
    ent = tbl.entity,
    dropEnt = ent:GetClass(),
    amount = 1,
    data = self:GetData(ent)
  }
  self:Pickup(ply, ent, info)

  return true
end

ITEM:Register("spawned_shipment")

if CLIENT then
  local PANEL = {}

  function PANEL:SetInfo(tbl)
    self.Alpha = 0
    self:LerpAlpha(255, 0.15)

    local item = XeninInventory:GetItem(tbl.dropEnt)
    local name = item and item:GetName(tbl)
    local data = tbl.data
    local rarity = XeninInventory:GetRarity(tbl)

    self.wepTbl = weapons.Get(tbl.ent)
    self.title = name
    self.rarity = rarity
    self.data = data
    local tbl = XeninInventory.Config.Categories[rarity]
    if tbl then

      self.tbl = tbl
    end
  end

  function PANEL:Paint(w, h)
    local aX, aY = self:LocalToScreen()
    BSHADOWS.BeginShadow()
    draw.RoundedBox(6, aX, aY, w, h, XeninUI.Theme.Primary)
    BSHADOWS.EndShadow(1, 2, 2)

    local y = 8
    draw.SimpleText(self.title, "XeninInventory.Hover.Title", 9, 9, Color(0, 0, 0, 100), TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
    draw.SimpleText(self.title, "XeninInventory.Hover.Title", 8, 8, self.tbl and self.tbl.color or color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)

    draw.SimpleText(XeninInventory:GetPhrase("XeninInventory.Shipment.Desc", {
    amount = self.data.amount }), "XeninInventory.Hover.Subtitle", 8, 8 + draw.GetFontHeight("XeninInventory.Hover.Title"), Color(202, 202, 202), TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
  end

  function PANEL:PerformLayout(w, h)
    surface.SetFont("XeninInventory.Hover.Title")
    local tw, th = surface.GetTextSize(self.title or "")
    local width = tw + 16
    local height = 16 + th + draw.GetFontHeight("XeninInventory.Hover.Title") - 2

    self:SetSize(width, height)
  end

  vgui.Register("XeninInventory.Shipment.Hover", PANEL)
end

--addons/zeros_growop2_v1.6.1/lua/inventory/configuration/items/zgo2_weedblock.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(100)
ITEM:SetModel("models/zerochain/props_growop2/zgo2_weedblock.mdl")

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data

	if not zgo2.Plant.IsValid(data.WeedID) then
		zclib.Notify(ply, zgo2.language["InvalidPlantData"], 1)
		SafeRemoveEntity(ent)
		return
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

	if zgo2.Weedblock.ReachedSpawnLimit(ply) then
		zclib.Notify(ply, zgo2.language["Spawnlimit"], 1)
		//SafeRemoveEntity(ent)
		zclib.Inventory.Pickup(ply,ent,ent:GetClass())
		return
	end

	ent:SetWeedID(zgo2.Plant.GetListID(data.WeedID))
	zclib.Player.SetOwner(ent, ply)
end)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

function ITEM:GetData(ent)
	return {
		WeedID = zgo2.Plant.GetID(ent:GetWeedID()),
	}
end

function ITEM:CanStack(newItem, invItem)
	return newItem.data.WeedID == invItem.data.WeedID
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ITEM:GetName(item)
	local ent = isentity(item)
	local WeedID = ent and item:GetWeedID() or item.data.WeedID
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

	return zgo2.Plant.GetName(WeedID)
end

function ITEM:GetDisplayName(item)
	return self:GetName(item)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

local ang = Angle(0, 45, 0)
function ITEM:GetCameraModifiers(tbl)
	return {
		FOV = 30,
		X = 0,
		Y = 0,
		Z = 50,
		Angles = ang,
		Pos = vector_origin
	}
end

function ITEM:GetClientsideModel(tbl, mdlPanel)
	local WeedData = zgo2.Plant.GetData(tbl.data.WeedID)
	zgo2.Plant.UpdateMaterial(mdlPanel.Entity, WeedData)
end

ITEM:Register("zgo2_weedblock")

--addons/xenin-inventory/lua/inventory/configuration/items/zwf_jar.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/configuration/items/zwf_joint_ent.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(1)
ITEM:SetModel("models/zerochain/props_weedfarm/zwf_joint.mdl")
ITEM:SetDescription("A joint")

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
  local data = tbl.data

  ent:SetWeedID(data.WeedID)
  ent:SetWeed_Name(data.WeedName)
  ent:SetWeed_Amount(data.WeedAmount)
  ent:SetWeed_THC(data.THC)
end)

function ITEM:GetData(ent)
  return {
    WeedID = ent:GetWeedID(),
    WeedName = ent:GetWeed_Name(),
    WeedAmount = ent:GetWeed_Amount(),
    THC = ent:GetWeed_THC()
  }
end

function ITEM:GetVisualAmount(item)
  return item.data.WeedAmount
end

function ITEM:GetName(item)
  local ent = isentity(item)
  local weedName = ent and item:GetWeed_Name() or item.data.WeedName
  local plant = ent and item:GetWeedID() or item.data.WeedID
  plant = zwf.config.Plants[plant]

  local str = weedName
  if (plant and plant.name) then
    str = str .. " [" .. plant.name .. "]"
  end

  return str
end

ITEM:Register("zwf_joint_ent")

--addons/zeros_yeastbeast_1.1.7/lua/inventory/configuration/items/zyb_jar.lua:
local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(10)
ITEM:SetModel("models/zerochain/props_yeastbeast/yb_jar.mdl")
ITEM:SetDescription("A Jar of Moonshine.")

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data
	ent:SetMoonShine(data.Moonshine)
	ent:UpdateVisuals()
	zyb.f.SetOwner(ent, ply)
end)

function ITEM:OnPickup(ply, ent)
	if (not IsValid(ent)) then return end
	if ent:GetMoonShine() <= 0 then
		return
	end

	local info = {
		ent = self:GetEntityClass(ent),
		dropEnt = self:GetDropEntityClass(ent),
		amount = self:GetEntityAmount(ent),
		data = self:GetData(ent)
	}

	self:Pickup(ply, ent, info)

	return true
end


function ITEM:CanStack(newItem, invItem)
	return newItem.data.Moonshine == invItem.data.Moonshine
end


function ITEM:GetData(ent)
	return {
		Moonshine = ent:GetMoonShine(),
	}
end

function ITEM:GetDisplayName(item)
	return self:GetName(item)
end

function ITEM:GetName(item)
	return "Moonshine Jar"
end

function ITEM:GetCameraModifiers(tbl)
	return {
		FOV = 40,
		X = 0,
		Y = -22,
		Z = 25,
		Angles = Angle(0, -15, 0),
		Pos = Vector(0, 0, -1)
	}
end

function ITEM:GetClientsideModel(tbl, mdlPanel)

	local jarMoonshine = tbl.data.Moonshine
	local jarMax = zyb.config.Jar.MoonshineAmount

	if jarMoonshine >= jarMax then
		mdlPanel.Entity:SetBodygroup(2, 5)
	elseif jarMoonshine >= jarMax * 0.75 then
		mdlPanel.Entity:SetBodygroup(2, 4)
	elseif jarMoonshine >= jarMax * 0.5 then
		mdlPanel.Entity:SetBodygroup(2, 3)
	elseif jarMoonshine >= jarMax * 0.25 then
		mdlPanel.Entity:SetBodygroup(2, 2)
	elseif jarMoonshine >= jarMax * 0.1 then
		mdlPanel.Entity:SetBodygroup(2, 1)
	else
		mdlPanel.Entity:SetBodygroup(2, 0)
	end

	mdlPanel.Entity:SetBodygroup(1, 1)
end

ITEM:Register("zyb_jar")

--addons/xenin-inventory/lua/inventory/importer/setting.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

do
    local _class_0
    local _base_0 = {
        __name = "XeninInventory.ImporterSetting",
        setValue = function(self, value)
            self.value = value
            return self
        end,
        setOptions = function(self, options)
            self.options = options
            return self
        end,
        getId = function(self)
            return self.id
        end,
        getName = function(self)
            return self.name
        end,
        getValue = function(self)
            return self.value
        end,
        getUiType = function(self)
            return self.uiType
        end,
        getOptions = function(self)
            return self.options
        end,
        __type = function(self)
            return self.__name
        end
    }
    _base_0.__index = _base_0
    _class_0 = setmetatable({
        __init = function(self, id, name, value, uiType, options)
            if options == nil then options = {}
            end
            local __laux_type = (istable(id) and id.__type and id:__type()) or type(id)
            assert(__laux_type == "string", "Expected parameter `id` to be type `string` instead of `" .. __laux_type .. "`")
            local __laux_type = (istable(name) and name.__type and name:__type()) or type(name)
            assert(__laux_type == "string", "Expected parameter `name` to be type `string` instead of `" .. __laux_type .. "`")
            local __laux_type = (istable(uiType) and uiType.__type and uiType:__type()) or type(uiType)
            assert(__laux_type == "string", "Expected parameter `uiType` to be type `string` instead of `" .. __laux_type .. "`")
            local __laux_type = (istable(options) and options.__type and options:__type()) or type(options)
            assert(__laux_type == "table", "Expected parameter `options` to be type `table` instead of `" .. __laux_type .. "`")
            self.id = id
            self.name = name
            self.value = value
            self.uiType = uiType
            self.options = options
        end,
        __base = _base_0
    }, {
        __index = _base_0,
        __call = function(cls, ...)
            local _self_0 = setmetatable({}, _base_0)
            cls.__init(_self_0, ...)
            return _self_0
        end
    })
    XeninInventory.ImporterSetting = _class_0
end

--addons/yet_another_warn_system/lua/yaws/core/sh_core.lua:
-- helper shit
YAWS.Core.StorableToLuaConverters = {}
YAWS.Core.StorableToLuaConverters["string"] = function(val) return tostring(val) end 
YAWS.Core.StorableToLuaConverters["boolean"] = function(val) return tobool(val) end 
YAWS.Core.StorableToLuaConverters["table"] = function(val) 
    local tbl = util.JSONToTable(val)
    return tbl
end 
YAWS.Core.StorableToLuaConverters["color"] = function(val) 
    local tbl = util.JSONToTable(val)
    return Color(tbl.r, tbl.g, tbl.b, tbl.a)
end 
YAWS.Core.StorableToLuaConverters["number"] = function(val) return tonumber(val) end 

YAWS.Core.LuaToStorableConverters = {}
YAWS.Core.LuaToStorableConverters["string"] = function(val) return val end 
YAWS.Core.LuaToStorableConverters["boolean"] = function(val) return tostring(val) end 
YAWS.Core.LuaToStorableConverters["table"] = function(val) return util.TableToJSON(val) end 
YAWS.Core.LuaToStorableConverters["color"] = function(val) return util.TableToJSON(val) end 
YAWS.Core.LuaToStorableConverters["number"] = function(val) return tostring(val) end 
-- 0 - String  1 - Bool  2 - Table  3 - Int
function YAWS.Core.StorableToLua(val, type)
    return YAWS.Core.StorableToLuaConverters[type](val)
end
function YAWS.Core.LuaToStorable(val)
    return YAWS.Core.LuaToStorableConverters[type(val)](val)
end


function YAWS.Core.HasFullPerms(ply)
    return YAWS.ManualConfig.FullPerms[ply:GetUserGroup()] != nil || YAWS.ManualConfig.FullPerms[ply:SteamID()] != nil || YAWS.ManualConfig.FullPerms[ply:SteamID64()] != nil
end 
function YAWS.Core.HasFullPermsMisc(val)
    return YAWS.ManualConfig.FullPerms[val] != nil
end 

function YAWS.Core.GetAllUserGroups()
    -- if(CAMI) then return CAMI.GetUsergroups() end 

    -- -- aw shit - you HAD to use a shitty admin mod didn't ya?
    -- local groups = {}
    -- for k,v in ipairs(player.GetAll()) do
    --     groups[v:GetUserGroup()] = v:GetUserGroup()
    -- end 

    -- return groups

    return CAMI.GetUsergroups()
end 

function YAWS.Core.PayloadDebug(message, len)
    if(SERVER && !YAWS.ManualConfig.ServerNetDebug) then return end 
    if(CLIENT && !YAWS.ManualConfig.ClientNetDebug) then return end 

    YAWS.Core.LogDebug("(", message, ") Payload Size: ", YAWS.Core.LogColors.TextHighlightColor, string.NiceSize(len / 8), color_white, " / ", YAWS.Core.LogColors.TextHighlightColor, (len / 8), " bytes")

    if(len >= 32000) then
        for i=0,50 do -- someone should notice this... right..?
            YAWS.Core.LogWarning(YAWS.Core.LogColors.ErrorColor, "GETTING CLOSE TO THE NET LIMIT - THIS COULD BE A FATAL ISSUE")
            YAWS.Core.LogWarning(YAWS.Core.LogColors.ErrorColor, "Payload Size: " .. string.NiceSize(5454) .. " / " .. 2353 .. " bytes")
        end 
    end 
end

function YAWS.Core.Trace(action, err, ply)
    if(YAWS.ManualConfig.SupressAsyncTraces) then
        if(ply) then 
            YAWS.Core.Message(ply, "error")
        end 

        return
    end 

    YAWS.Core.LogError("Error in handling action ", YAWS.Core.LogColors.TextHighlightColor, action, color_white, ": ", err)

    if(ply) then 
        YAWS.Core.Message(ply, "error")
        YAWS.Core.LogError("Action triggered by ", YAWS.Core.LogColors.TextHighlightColor, ply:Name(), " (", ply:SteamID(), " / ", ply:SteamID64(), ")")
    end

    for k,v in ipairs(string.Explode("\n", debug.traceback())) do
        YAWS.Core.LogError(v)
    end
end
--addons/yet_another_warn_system/lua/yaws/core/cl_ui_colors.lua:
-- Color Cache stuff
-- If you wanna edit the colors here ya go.
YAWS.UI.ColorCache = {}

-- Light Theme
YAWS.UI.ColorCache.Light = {
    theme = Color(134, 168, 148),
    
    bar_background = Color(255, 255, 255),
    frame_background = Color(235, 235, 235),
    panel_background = Color(255, 255, 255),

    text_header = Color(50, 50, 50),
    text_main = Color(75, 75, 75),
    text_placeholder = Color(146, 146, 146),

    sidebutton_dull = Color(125, 125, 125),
    sidebutton_highlight = Color(75, 131, 100),
    sidebutton_highlightbg = Color(84, 185, 126, 65),
    sidebutton_highlightbg2 = Color(122, 138, 112, 0),

    divider = Color(78, 78, 78, 90),
    divider_faded = Color(50, 50, 50, 35),

    scroll_bg = Color(200, 200, 200, 0),
    scroll_grip = Color(100, 100, 100),

    switch_bg = Color(120, 120, 120),

    input_bg = Color(255, 255, 255),
    input_bg_dim = Color(225, 225, 225),
    
    text_entry_border_inactive = Color(175, 175, 175),
    text_entry_border_active = Color(134, 168, 148),

    player_card_border = Color(175, 175, 175),
    player_card_bg = Color(255, 255, 255),

    button_base = Color(101, 138, 116),
    button_hover = Color(121, 158, 136),
    button_text = Color(255, 255, 255),
    button_faded = Color(0, 0, 0, 100),

    icon_button_base = Color(7, 7, 7),
    icon_button_hover = Color(108, 196, 144),

    button_warn_base = Color(151, 67, 67),
    button_warn_hover = Color(206, 85, 85),

    active_warning = Color(255, 50, 50),
    expired_warning = Color(97, 78, 78),

    yaws = Color(101, 138, 116),
}

-- Dark Theme
YAWS.UI.ColorCache.Dark = {
    theme = Color(134, 168, 148),
   
    bar_background = Color(35, 35, 35),
    frame_background = Color(25, 25, 25),
    panel_background = Color(35, 35, 35),
    
    text_header = Color(255, 255, 255),
    text_main = Color(220, 220, 220),
    text_placeholder = Color(160, 160, 160),

    sidebutton_dull = Color(200, 200, 200),
    sidebutton_highlight = Color(255, 255, 255),
    sidebutton_highlightbg = Color(111, 150, 127, 45),
    sidebutton_highlightbg2 = Color(44, 66, 61, 0),
    
    divider = Color(59, 59, 59),
    divider_faded = Color(59, 59, 59, 60),

    scroll_bg = Color(200, 200, 200, 0),
    scroll_grip = Color(100, 100, 100),

    switch_bg = Color(120, 120, 120),
    
    input_bg = Color(39, 39, 39),
    input_bg_dim = Color(28, 28, 28),

    text_entry_border_inactive = Color(56, 56, 56),
    text_entry_border_active = Color(134, 168, 148),
    
    player_card_border = Color(68, 68, 68),
    player_card_bg = Color(35, 35, 35),

    button_base = Color(68, 95, 80),
    button_hover = Color(95, 119, 105),
    button_text = Color(255, 255, 255),
    button_faded = Color(0, 0, 0, 100),
    
    icon_button_base = Color(220, 220, 220),
    icon_button_hover = Color(127, 192, 154),

    button_warn_base = Color(148, 63, 63),
    button_warn_hover = Color(206, 85, 85),

    active_warning = Color(255, 50, 50),
    expired_warning = Color(235, 215, 215),

    yaws = Color(130, 185, 152),
}



-- don't touch down here tho
function YAWS.UI.UseDarkTheme() 
    return YAWS.UserSettings.GetValue("dark_mode")
end 
function YAWS.UI.ColorScheme() 
    return YAWS.UserSettings.GetValue("dark_mode") && YAWS.UI.ColorCache.Dark || YAWS.UI.ColorCache.Light
end 
--addons/yet_another_warn_system/lua/yaws/punishments/sh_ban.lua:
local PUNISHMENT = YAWS.Punishments.CreatePunishment()
PUNISHMENT:SetID("yaws.ban")
PUNISHMENT:SetName("Ban")
PUNISHMENT:SetDescription("Bans the player from the server")

PUNISHMENT:AddParameter("duration", "Duration", "The duration of the ban in days. 0 is permanent.", "number", 1)
PUNISHMENT:AddParameter("reason", "Reason", "The reason for the ban.", "string", "You reached the warning limit.")

PUNISHMENT:ShouldEnable(function()
    return (ulx || sam || xAdmin) and true or false
end)
PUNISHMENT:SetAction(function(admin, targetSteamID, params)
    if(ulx) then 
        RunConsoleCommand("ulx", "banid", util.SteamIDFrom64(targetSteamID), (params.duration * 24) * 60, params.reason)
        return true
    end 
    if(sam) then 
        RunConsoleCommand("sam", "banid", targetSteamID, (params.duration * 24) * 60, params.reason)
        return true
    end 
    if(xAdmin) then -- https://github.com/TheXYZNetwork/xAdmin not the bad one >:)
        RunConsoleCommand("xadmin", "ban", targetSteamID, (params.duration * 24) * 60, params.reason)
        return true
    end 
    
    return false, "Could not find a supported admin system to ban with."
end)
--addons/yet_another_warn_system/lua/yaws/ui/elements/cards/cl_preset_entry.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/inputs/cl_combo.lua:
local PANEL = {}

function PANEL:Init()
    local colors = YAWS.UI.ColorScheme()
    
    self:SetTextColor(colors['text_main'])
    self:SetFont("yaws.6")

    self.disableTint = Color(0, 0, 0, 50)
    self.DropButton.ChevPreviousState = nil
    self.DropButton.Paint = function(s, w, h)
        -- local triangle = {
        -- 	{x = 0, y = (h * 0.3)},
        --     {x = w * 0.8, y = (h * 0.3)},
        -- 	{x = (w * 0.8) / 2, y = (h * 0.7)},
        -- }

        -- YAWS.UI.SetSurfaceDrawColor(colors['text_main'])
    	-- draw.NoTexture()
    	-- surface.DrawPoly(triangle)

        self.DropButton.ChevPreviousState = YAWS.UI.DrawAnimatedChevron(0, 0, w, h, self.DropButton.ChevPreviousState, self:IsMenuOpen())
    end
    
    self.frameTime = 0
    self.borderColor = YAWS.UI.ColorScheme()['text_entry_border_inactive']

    self.sideShadow = vgui.Create("yaws.shadow", self:GetParent())
    self.bottomShadow = vgui.Create("yaws.shadow", self:GetParent())
    self.bottomShadow:Down()
end

function PANEL:Paint(w, h)
    local colors = YAWS.UI.ColorScheme()
    
    -- don't question this
    if(self:IsMenuOpen()) then 
        self.borderColor = YAWS.UI.LerpColor(self.frameTime * 5, self.borderColor, colors['text_entry_border_active'])
    else
        self.borderColor = YAWS.UI.LerpColor(self.frameTime * 5, self.borderColor, colors['text_entry_border_inactive'])
    end 
    
    draw.RoundedBox(0, 0, 0, w, h, self.borderColor)
    draw.RoundedBox(0, 1, 1, w - 2, h - 2, colors['input_bg'])
    
    -- self:DrawTextEntryText(colors["text_main"], colors["theme"], colors["theme"])

    if(!self:IsEnabled()) then 
        draw.RoundedBox(0, 0, 0, w, h, self.disableTint)
        self:DrawTextEntryText(colors["text_placeholder"], colors["theme"], colors["theme"])
    else 
        self:DrawTextEntryText(colors["text_main"], colors["theme"], colors["theme"])
    end 
end

function PANEL:LayoutShadows(w, h)
    local x,y = self:GetPos()
    if(IsValid(self.sideShadow)) then 
        self.sideShadow:SetPos(x + w, y)
        self.sideShadow:SetSize(3, h)
    end 

    if(IsValid(self.bottomShadow)) then 
        self.bottomShadow:SetPos(x, y + h)
        self.bottomShadow:SetSize(w + 1, 3)
    end
end 

function PANEL:PerformLayout(w, h)
    self.DropButton:Dock(RIGHT)
    self.DropButton:DockMargin(0, h * 0.35, h * 0.35, h * 0.35)
    self.DropButton:SetSize(h * 0.55, h * 0.1)

    -- https://github.com/Facepunch/garrysmod/blob/master/garrysmod/lua/vgui/dcombobox.lua#L81
	-- Make sure the text color is updated
	DButton.PerformLayout( self, w, h )

    self:LayoutShadows(w, h)
end 

function PANEL:RemoveShadows() 
    self.bottomShadow:Remove()
    self.sideShadow:Remove()
end 
function PANEL:OnRemove()
    self:RemoveShadows()
end 

vgui.Register("yaws.combo", PANEL, "DComboBox")
--addons/yet_another_warn_system/lua/yaws/ui/elements/misc/cl_divider.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/misc/cl_round_avatar.lua:
-- stolen from betterbanking which stole this from devlogs lol
local PANEL = {}

function PANEL:Init()
	self.avatar = vgui.Create("AvatarImage", self)
	self.avatar:SetPaintedManually(true)
end

function PANEL:PerformLayout()
	self.avatar:SetSize(self:GetWide(), self:GetTall())
end

function PANEL:SetPlayer(ply, size)
	self.avatar:SetPlayer(ply, size)
end
function PANEL:SetSteamID(sid, size)
	self.avatar:SetSteamID(sid, size)
end

function PANEL:Paint(w, h)
	render.ClearStencil()
	render.SetStencilEnable(true)

	render.SetStencilWriteMask(1)
	render.SetStencilTestMask(1)

	render.SetStencilFailOperation(STENCILOPERATION_REPLACE)
	render.SetStencilPassOperation(STENCILOPERATION_ZERO)
	render.SetStencilZFailOperation(STENCILOPERATION_ZERO)
	render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_NEVER)
	render.SetStencilReferenceValue(1)

	draw.NoTexture()
	surface.SetDrawColor(color_black)
	YAWS.UI.DrawCircle(w / 2, h / 2, h / 2, math.max(w, h) / 2)

	render.SetStencilFailOperation(STENCILOPERATION_ZERO)
	render.SetStencilPassOperation(STENCILOPERATION_REPLACE)
	render.SetStencilZFailOperation(STENCILOPERATION_ZERO)
	render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_EQUAL)
	render.SetStencilReferenceValue(1)

	self.avatar:PaintManual()

	render.SetStencilEnable(false)
	render.ClearStencil()
end

vgui.Register("yaws.round_avatar", PANEL)
--addons/yet_another_warn_system/lua/yaws/ui/layouts/popups/cl_view_warn.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/layouts/popups/cl_warn_player.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/layouts/tabs/cl_settings.lua:
function YAWS.UI.Tabs.Settings(master)
    master:Clear()

    -- Settings Panel
    local scrollContainer = vgui.Create("DPanel", master)
    scrollContainer.Paint = function() end 
    local settingsPanel = vgui.Create("yaws.scroll", scrollContainer)
    
    local panels = {}
    local i = 0
    local max = table.Count(YAWS.UserSettings.Settings) -- Not numerically indexed ;-;
    
    for category,settings in ipairs(YAWS.UserSettings.SettingOrder) do
        local panel = vgui.Create("yaws.collapsable", settingsPanel)
        panel:SetLabel(YAWS.Language.GetTranslation("user_settings_category_" .. YAWS.UserSettings.Settings[settings[1]].category))
        panels[#panels + 1] = {
            panel = panel,
            shit = true
        }
    
        local settingEntrys = vgui.Create("yaws.panel", panel)
        settingEntrys:RemoveShadows()
        -- settingEntrys.Paint = function(self, w, h) end 
    
        panel:SetContents(settingEntrys)
    
        -- for k,v in pairs(YAWS.UserSettings.Settings) do
        for k,v in ipairs(settings) do 
            i = i + 1
            local k,v = v, YAWS.UserSettings.Settings[v] -- ah the glory of laziness of changing around variable names (and comments apparently)

            local panel = vgui.Create("yaws.settings_entry", settingEntrys)
            panel:SetName(YAWS.Language.GetTranslation(v.name))
            panel:SetDesc(YAWS.Language.GetTranslation(v.desc))
            panel:SetType(v.type)
            panel:Construct()
            if(v.value != nil) then
                panel:SetValue(v.value)
            else 
                panel:SetValue(v.default)
            end

            -- Switch
            if(v.type == "boolean") then
                panel.OnChange = function(val)
                    YAWS.UserSettings.SetValue(k, val)
                end
            end

            -- Combo Box
            if(v.type == "combo") then
                panel:SetOptions(v.options, v.icons or nil)
                panel.OnChange = function(index, value, data)
                    YAWS.UserSettings.SetValue(k, value)
                end
            end

            panels[#panels + 1] = {
                ['panel'] = panel
            }
        end
    end
    
    settingsPanel.PerformLayout = function(s, w, h)
        for x,y in ipairs(panels) do
            y.panel:Dock(TOP)
            y.panel:DockMargin(0, 0, 0, 10)

            if(!y.shit) then 
                y.panel:UseReccomendedHeight()
            else 
                y.panel.Header:SetTall(h * 0.075)
            end 
        end
    end

    master.Paint = function(self, w, h) end
    master.PerformLayout = function(self, w, h)
        scrollContainer:Dock(FILL)
        scrollContainer:DockMargin(10, 10, 10, 10)

        settingsPanel:Dock(FILL)
        settingsPanel:DockMargin(0, 0, 0, 0)
    end
    
    master:InvalidateLayout()
end
--addons/advancedkillfeed/lua/autorun/z_advancedkillfeed_setup.lua:
local function addPath(path,tbl)
	for k,v in pairs(tbl) do
		tbl[k] = path..v
	end
end

local basePath = "z_advancedkillfeed/" 
local clPath = basePath.."client/"
local shPath = basePath
local svPath = basePath.."server/"
local clFiles = file.Find( clPath.."*", "LUA" )
local shFiles = file.Find( basePath.."*", "LUA" )
local svFiles = file.Find( svPath.."*", "LUA" )

addPath( shPath,shFiles )
addPath( clPath,clFiles ) 
addPath( svPath,svFiles ) 

shFiles = table.Reverse( shFiles )
   
table.Add( clFiles,shFiles )
table.Add( svFiles,shFiles )

clFiles = table.Reverse( clFiles )
svFiles = table.Reverse( svFiles )
 
if CLIENT then
	
	for _,clFile in pairs(clFiles,true) do   
		include( clFile )
	end
	
end
  
if SERVER then 

	// add the required content to the fast dl
	--resource.AddWorkshop( "1624924994" )
	
	for _,clFile in pairs(clFiles) do 
		AddCSLuaFile( clFile )
	end
	
	for _,svFile in pairs(svFiles) do 
		include( svFile )
	end
	
end
--addons/zerosfruitslicer/lua/autorun/zfs_load.lua:
local DebugPrint = false

local function NicePrint(txt)
	if DebugPrint == false then return end

	if SERVER then
		MsgC(Color(84, 150, 197), txt .. "\n")
	else
		MsgC(Color(193, 193, 98), txt .. "\n")
	end
end

local function PreLoadFile(path)
	if CLIENT then
		include(path)
	else
		AddCSLuaFile(path)
		include(path)
	end
end

local function LoadFiles(path)
	local files, _ = file.Find(path .. "/*", "LUA")

	for _, v in ipairs(files) do
		if string.sub(v, 1, 3) == "sh_" then
			if CLIENT then
				include(path .. "/" .. v)
			else
				AddCSLuaFile(path .. "/" .. v)
				include(path .. "/" .. v)
			end

			NicePrint("// Loaded " .. string.sub(v, 1, 38) .. string.rep(" ", 38 - v:len()) .. " //")
		end
	end

	for _, v in ipairs(files) do
		if string.sub(v, 1, 3) == "cl_" then
			if CLIENT then
				include(path .. "/" .. v)
				NicePrint("// Loaded " .. string.sub(v, 1, 38) .. string.rep(" ", 38 - v:len()) .. " //")
			else
				AddCSLuaFile(path .. "/" .. v)
			end
		elseif string.sub(v, 1, 3) == "sv_" then
			include(path .. "/" .. v)
			NicePrint("// Loaded " .. string.sub(v, 1, 38) .. string.rep(" ", 38 - v:len()) .. " //")
		end
	end
end

local function Initialize()
	NicePrint(" ")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("///////////// Zeros Fruitslicer ///////////////////")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("//                                               //")

	PreLoadFile("sh_zfs_config_fruits.lua")
	PreLoadFile("sh_zfs_config_main.lua")
	PreLoadFile("sh_zfs_config_smoothies.lua")
	PreLoadFile("sh_zfs_config_toppings.lua")
	--PreLoadFile("sv_zfs_hooks.lua")

	PreLoadFile("zfruitslicer/util/sh_sounds.lua")
	LoadFiles("zfs_languages")

	LoadFiles("zfruitslicer/util")
	LoadFiles("zfruitslicer/util/player")

	LoadFiles("zfruitslicer/benefit")
	LoadFiles("zfruitslicer/shop")
	LoadFiles("zfruitslicer/fruitbox")
	LoadFiles("zfruitslicer/smoothie")
	LoadFiles("zfruitslicer/topping")
	LoadFiles("zfruitslicer/fruit")

	NicePrint("//                                               //")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("///////////////////////////////////////////////////")

	if DebugPrint == false then
		if SERVER then
			MsgC(Color(84, 150, 197), "Zeros Fruitslicer - Loaded\n")
		else
			MsgC(Color(193, 193, 98), "Zeros Fruitslicer - Loaded\n")
		end
	end
end
PreLoadFile("zfruitslicer/util/cl_settings.lua")

timer.Simple(0, function()
	-- If zeros libary is not installed on the server then lets tell them
	if zclib == nil then
		local function Warning(ply, msg)
			if DarkRP and DarkRP.notify then
				DarkRP.notify(ply, 1, 8, msg)
			else
				ply:ChatPrint(msg)
			end
		end

		return
	end

	Initialize()
end)

--addons/zerosfruitslicer/lua/zfruitslicer/util/cl_settings.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/zmlab2/util/cl_settings.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/zmlab2/util/cl_settings.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

if not CLIENT then return end


local function Methlab2_settings(CPanel)
	CPanel:AddControl("Header", {
		Text = "Client Settings",
	})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

	zclib.Settings.OptionPanel("VFX","",Color(50, 113, 207, 255),zclib.colors["ui02"],CPanel,{
		[1] = {name = "Dynamiclight",class = "DCheckBoxLabel", cmd = "zmlab2_cl_vfx_dynamiclight"},
		[2] = {name = "Effects",class = "DCheckBoxLabel", cmd = "zmlab2_cl_particleeffects"},
	})
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

local function Methlab2_admin_settings(CPanel)

	CPanel:AddControl("Header", {
		Text = "Admin Commands",
	})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

	zclib.Settings.OptionPanel("Meth Buyer","This includes the Meth Buyer NPC and the\nDropOff Points.",Color(50, 113, 207, 255),zclib.colors["ui02"],CPanel,{
		[1] = {name = "Save",class = "DButton", cmd = "zmlab2_sellsetup_save"},
		[2] = {name = "Delete",class = "DButton", cmd = "zmlab2_sellsetup_remove"},
	})

	zclib.Settings.OptionPanel("Public Setup","If the config is setup correctly such that owner\nchecks are disabled then you can build a\nwhole methlab as a public utility.",Color(50, 113, 207, 255),zclib.colors["ui02"],CPanel,{
		[1] = {name = "Save",class = "DButton", cmd = "zmlab2_publicsetup_save"},
		[2] = {name = "Delete",class = "DButton", cmd = "zmlab2_publicsetup_remove"},
	})

	zclib.Settings.OptionPanel("Commands","Some usefull debug commands.",Color(50, 113, 207, 255),zclib.colors["ui02"],CPanel,{
		[1] = {name = "Spawn Methbag",class = "DButton", cmd = "zmlab2_debug_Meth_Test"},
		[2] = {name = "Spawn Methcrate",class = "DButton", cmd = "zmlab2_debug_Crate_Test"},
		[3] = {name = "Add Pollution",class = "DButton", cmd = "zmlab2_debug_PollutionSystem_AddPollution"},
		[4] = {name = "Clear Pollution",class = "DButton", cmd = "zmlab2_debug_PollutionSystem_ClearPollution"},
	})
end

hook.Add("AddToolMenuCategories", "zmlab2_CreateCategories", function()
	spawnmenu.AddToolCategory("Options", "zmlab2_options", "Methlab 2")
end)

hook.Add("PopulateToolMenu", "zmlab2_PopulateMenus", function()
	spawnmenu.AddToolMenuOption("Options", "zmlab2_options", "zmlab2_Settings", "Client Settings", "", "", Methlab2_settings)
	spawnmenu.AddToolMenuOption("Options", "zmlab2_options", "zmlab2_Admin_Settings", "Admin Settings", "", "", Methlab2_admin_settings)
end)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

--addons/zeros_trashman_v1.6.3/lua/autorun/ztm_load.lua:
local DebugPrint = false
local function NicePrint(txt)
    if DebugPrint == false then return end

    if SERVER then
        MsgC(Color(84, 150, 197), txt .. "\n")
    else
        MsgC(Color(193, 193, 98), txt .. "\n")
    end
end

local function PreLoadFile(path)
	if CLIENT then
		include(path)
	else
		AddCSLuaFile(path)
		include(path)
	end
end
local function LoadFiles(path)
	local files, _ = file.Find(path .. "/*", "LUA")

	for _, v in ipairs(files) do
		if string.sub(v, 1, 3) == "sh_" then
			if CLIENT then
				include(path .. "/" .. v)
			else
				AddCSLuaFile(path .. "/" .. v)
				include(path .. "/" .. v)
			end
			NicePrint("// Loaded " .. v .. string.rep(" ", 38 - v:len()) .. " //")
		end
	end

	for _, v in ipairs(files) do
		if string.sub(v, 1, 3) == "cl_" then
			if CLIENT then
				include(path .. "/" .. v)
				NicePrint("// Loaded " .. v .. string.rep(" ", 38 - v:len()) .. " //")
			else
				AddCSLuaFile(path .. "/" .. v)
			end
		elseif string.sub(v, 1, 3) == "sv_" then
			include(path .. "/" .. v)
			NicePrint("// Loaded " .. v .. string.rep(" ", 38 - v:len()) .. " //")
		end
	end
end



local function Initialize()
	NicePrint(" ")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("//////////////// Zero´s Trashman //////////////////")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("//                                               //")
	PreLoadFile("sh_ztm_config.lua")
	LoadFiles("ztm_languages")

	LoadFiles("ztrashman/util")
	LoadFiles("ztrashman/util/player")
	LoadFiles("ztrashman/generic")
	LoadFiles("ztrashman/buyermachine")
	LoadFiles("ztrashman/leafpile")
	LoadFiles("ztrashman/manhole")
	LoadFiles("ztrashman/recycler")
	LoadFiles("ztrashman/swep")
	LoadFiles("ztrashman/trash")
	LoadFiles("ztrashman/trashbag")
	LoadFiles("ztrashman/trashburner")
	LoadFiles("ztrashman/trashcan")
	NicePrint("//                                               //")
	NicePrint("///////////////////////////////////////////////////")
	NicePrint("///////////////////////////////////////////////////")

	if DebugPrint == false then
		if SERVER then
			MsgC(Color(84, 150, 197), "Zeros Trashman - Loaded\n")
		else
			MsgC(Color(193, 193, 98), "Zeros Trashman - Loaded\n")
		end
	end
end
PreLoadFile("ztrashman/util/cl_settings.lua")


timer.Simple(0,function()
	Initialize()
end)

--addons/zeros_yeastbeast_1.1.7/lua/zerosyeastbeast/sh/zyb_materials.lua:
AddCSLuaFile()
zyb = zyb or {}
zyb.default_materials = zyb.default_materials or {}

zyb.default_materials["circle"] = Material("materials/zerochain/zyb/ui/zyb_circle.png", "smooth")
zyb.default_materials["glamcircle"] = Material("materials/zerochain/zyb/ui/zyb_glam_circle.png", "smooth")
zyb.default_materials["shadowcircle"] = Material("materials/zerochain/zyb/ui/zyb_shadow_circle.png", "smooth")
zyb.default_materials["square"] = Material("materials/zerochain/zyb/ui/zyb_square.png", "smooth")
zyb.default_materials["heaterzone"] = Material("materials/zerochain/zyb/ui/zyb_heater_zones.png", "smooth")

zyb.default_materials["speedboost"] = Material("materials/zerochain/zyb/ui/zyb_upgrade_speedboost.png", "smooth")
zyb.default_materials["productionboost"] = Material("materials/zerochain/zyb/ui/zyb_upgrade_productionboost.png", "smooth")

zyb.default_materials["barfront01"] = Material("materials/zerochain/zyb/ui/zyb_barfront01.png", "smooth")
zyb.default_materials["barfront01fg"] = Material("materials/zerochain/zyb/ui/zyb_barfront01_fg.png", "smooth")
zyb.default_materials["barfront01bg"] = Material("materials/zerochain/zyb/ui/zyb_barfront01_bg.png", "smooth")

zyb.default_materials["barfront02"] = Material("materials/zerochain/zyb/ui/zyb_barfront02.png", "smooth")
zyb.default_materials["barfront02fg"] = Material("materials/zerochain/zyb/ui/zyb_barfront02_fg.png", "smooth")
zyb.default_materials["barfront02bg"] = Material("materials/zerochain/zyb/ui/zyb_barfront02_bg.png", "smooth")

zyb.default_materials["build"] = Material("materials/zerochain/zyb/ui/zyb_build.png", "smooth")
zyb.default_materials["cancel"] = Material("materials/zerochain/zyb/ui/zyb_cancel.png", "smooth")

zyb.default_materials["yeast"] = Material("materials/zerochain/zyb/ui/zyb_ingredient_yeast.png", "smooth")
zyb.default_materials["water"] = Material("materials/zerochain/zyb/ui/zyb_ingredient_water.png", "smooth")
zyb.default_materials["sugar"] = Material("materials/zerochain/zyb/ui/zyb_ingredient_sugar.png", "smooth")





zyb.default_colors = zyb.default_colors or {}

zyb.default_colors["grey_light"] = Color(55, 55, 55, 255)
zyb.default_colors["grey_lighter"] = Color(65, 65, 65, 255)

zyb.default_colors["black01"] = Color(0, 0, 0, 200)
zyb.default_colors["black02"] = Color(0, 0, 0, 25)
zyb.default_colors["black03"] = Color(0, 0, 0, 125)
zyb.default_colors["black04"] = Color(0, 0, 0, 255)
zyb.default_colors["black05"] = Color(0, 0, 0, 75)

zyb.default_colors["grey01"] = Color(55,55,55,255)
zyb.default_colors["grey02"] = Color(59,59,59,255)
zyb.default_colors["grey03"] = Color(25,25,25,255)
zyb.default_colors["grey04"] = Color(100,100,100,255)
zyb.default_colors["grey05"] = Color(200,200,200,255)
zyb.default_colors["grey06"] = Color(55,55,55,0)

zyb.default_colors["orange01"] = Color(213,116,73,255)
zyb.default_colors["orange02"] = Color(189, 72, 44,255)
zyb.default_colors["orange03"] = Color(255,126,88,255)
zyb.default_colors["orange04"] = Color(255, 189, 145)
zyb.default_colors["orange05"] = Color(213, 111, 80,255)

zyb.default_colors["brown01"] = Color(133, 93, 24, 255)
zyb.default_colors["brown02"] = Color(136, 87, 58, 255)
zyb.default_colors["brown03"] = Color(106, 66, 41, 255)
zyb.default_colors["brown04"] = Color(81, 46, 25, 255)
zyb.default_colors["brown05"] = Color(58, 31, 15, 255)
zyb.default_colors["brown06"] = Color(50, 27, 13, 255)
zyb.default_colors["brown07"] = Color(133,93,24,255)
zyb.default_colors["brown08"] = Color(199, 171, 122, 255)

zyb.default_colors["white01"] = Color(255, 255, 255, 255)
zyb.default_colors["white02"] = Color(255, 255, 255, 15)
zyb.default_colors["white03"] = Color(255,255,255,120)
zyb.default_colors["white04"] = Color(225, 225, 225, 255)
zyb.default_colors["white05"] = Color(255,255,255,5)

zyb.default_colors["red01"] = Color(255, 25, 25, 255)
zyb.default_colors["red02"] = Color(189, 44, 44, 255)
zyb.default_colors["red03"] = Color(209, 56, 56, 255)
zyb.default_colors["red04"] = Color(218, 59, 59, 255)
zyb.default_colors["red05"] = Color(255, 45, 45, 150)
zyb.default_colors["red06"] = Color(178, 65, 65,255)
zyb.default_colors["red07"] = Color(255, 0, 0, 230)

zyb.default_colors["pink01"] = Color(153, 130, 136, 125)
zyb.default_colors["pink02"] = Color(213, 181, 189, 255)

zyb.default_colors["blue01"] = Color(70, 111, 197, 255)
zyb.default_colors["blue02"] = Color(44, 116, 189, 255)
zyb.default_colors["blue03"] = Color(84, 100, 153, 125)
zyb.default_colors["blue04"] = Color(117, 140, 213, 255)
zyb.default_colors["blue05"] = Color(0,0,255,255)
zyb.default_colors["blue06"] = Color(70,90,142,255)

zyb.default_colors["green01"] = Color(79, 197, 70, 255)
zyb.default_colors["green02"] = Color(129, 205, 68, 255)
zyb.default_colors["green03"] = Color(131, 178, 65, 255)
zyb.default_colors["green04"] = Color(0, 255, 0, 230)

zyb.default_colors["yellow01"] = Color(233, 157, 58, 255)
zyb.default_colors["yellow02"] = Color(155, 138, 85, 125)
zyb.default_colors["yellow03"] = Color(213, 189, 117, 255)

zyb.default_colors["CloseButton_normal"] = Color(197, 40, 40,255)
zyb.default_colors["CloseButton_hover"] = Color(255, 102, 102,255)

zyb.default_colors["BuyButton_normal"] = Color(97, 222, 88,255)
zyb.default_colors["BuyButton_hover"] = Color(40, 197, 40,255)

zyb.default_colors["SellButton_normal"] = Color(197, 40, 40,255)
zyb.default_colors["SellButton_hover"] = Color(255, 102, 102,255)


zyb.default_colors["yeast"] = Color(249, 240, 128, 255)
zyb.default_colors["sugar"] = Color(255, 255, 255, 255)
zyb.default_colors["water"] = Color(57, 149, 214, 255)

--addons/zeros_yeastbeast_1.1.7/lua/zerosyeastbeast/cl/zyb_settings_cl.lua:
return gluapack()()
--lua/advdupe2/sh_codec.lua:
return gluapack()()
--addons/dwep/lua/autorun/sh_dwep_config.lua:

DWEP = DWEP or {}
DWEP.Config = {} 
DWEP.Config.Colors ={  
["background"]= Color(38, 38, 44, 255),  
["foreground"]= Color(28, 28, 34, 255), 		
["inactiveClr"] = Color(68, 68, 68, 255), 
["theme"] = Color(200,103,235),
}  

DWEP.Config.AccessGroups = {
	"superadmin",
}

  local SERVER = SERVER
        local CLIENT = CLIENT

--No configuration below this line: DO NOT TOUCH
 
DWEP.Sweps = DWEP.Sweps or {}
DWEP.DefaultSweps = DWEP.DefaultSweps or {}

function DWEP.CanDWEP(ply)

	return table.HasValue(DWEP.Config.AccessGroups, ply:GetUserGroup()) 

end 
function DWEP.AdjustValue(weapon, key, value)
	local parents = string.Explode(" | ", key)
	local curTable
	local weapon = weapons.GetStored(weapon)
	if #parents > 1 then 
		for i = 1, #parents  do
			if i != 1 and i < #parents then 
				curTable[parents[i]] = curTable[parents[i]] or {}
				curTable = curTable[parents[i]] 
			elseif i == 1 then
				weapon[parents[1]] = weapon[parents[1]] or {}
				curTable = weapon[parents[1]]
			elseif i == #parents then 
				curTable[parents[i]] = value 
			end  
		end  
	else
		weapon[parents[1]] = value 
	end 
end 

function DWEP.CopyTable(obj, seen)
  -- Handle non-tables and previously-seen tables.
  if type(obj) ~= 'table' then return obj end
  if seen and seen[obj] then return seen[obj] end

  -- New table; mark it as seen an copy recursively.
  local s = seen or {}
  local res = setmetatable({}, getmetatable(obj))
  s[obj] = res
  for k, v in pairs(obj) do res[DWEP.CopyTable(k, s)] = DWEP.CopyTable(v, s) end
  return res
end


hook.Add("InitPostEntity", "InitializeDWEP", function()
	
	if #DWEP.Sweps <= 0 then 
		for k,v in pairs(weapons.GetList()) do
			if v.ClassName then 
				DWEP.Sweps[#DWEP.Sweps + 1 or 1] = v.ClassName 
				DWEP.DefaultSweps[v.ClassName] = DWEP.CopyTable(v) 
			end 
		end 
	end 
	
	if SERVER then
		for k,v in pairs(weapons.GetList()) do
			DWEP.LoadData(v.ClassName)
		end 
	end 
	
end)

--PrintTable(DWEP.DefaultSweps["tfa_cso_ozwpnset2"])
--addons/partysystem/lua/autorun/client/partylistview_line.lua:
--GUI base created by billy
--https://scriptfodder.com/users/view/76561198040894045/scripts

local PANEL = {}

function PANEL:Init()
	for _,v in pairs(self.Columns) do
		v:SetTextColor(Color(0,0,0))
		v:SetFont("roboto16")

		v.PaintOver = function(self)
			surface.SetDrawColor(Color(219,219,219))
			surface.DrawRect(0,0,1,self:GetTall())
		end
	end
	if (self.ColorMode == false) then
		self.Paint = function(self)
			if (self:IsLineSelected()) then
				surface.SetDrawColor(Color(26,26,26))
				surface.DrawRect(0,0,self:GetWide(),self:GetTall())
				return
			end

			local bg = Color(255,255,255)

			if (self:IsHovered()) then
				bg = Color(245,245,245)
			end

			surface.SetDrawColor(bg)
			surface.DrawRect(0,0,self:GetWide(),self:GetTall())

			surface.SetDrawColor(Color(219,219,219))
			surface.DrawRect(1,self:GetTall() - 1,self:GetWide() - 2,1)
		end
	else
		self.Paint = function(self)
			if (self:IsLineSelected()) then
				surface.SetDrawColor(Color(26,26,26))
				surface.DrawRect(0,0,self:GetWide(),self:GetTall())
				return
			end

			local bg = Color(245,245,245)

			if (self:IsHovered()) then
				bg = Color(235,235,235)
			end

			surface.SetDrawColor(bg)
			surface.DrawRect(0,0,self:GetWide(),self:GetTall())

			surface.SetDrawColor(Color(219,219,219))
			surface.DrawRect(1,self:GetTall() - 1,self:GetWide() - 2,1)
		end
	end
	self.ColorMode = not self.ColorMode
end
function PANEL:OnMousePressed(mcode)
	if (mcode == MOUSE_RIGHT) then
		self:GetListView():OnRowRightClick(self:GetID(),self)
		self:OnRightClick()
		return
	end
	self:GetListView():OnClickLine(self,true)
	self:OnSelect()
end

derma.DefineControl("PartyListView_Line",nil,PANEL,"DListView_Line")
--addons/partysystem/lua/autorun/client/partytextbox.lua:
--GUI base created by billy
--https://scriptfodder.com/users/view/76561198040894045/scripts

local PANEL = {}

surface.CreateFont("bgui_placeholdered",{
	size = 16,
	font = "Roboto",
	italic = true,
})
surface.CreateFont("bgui_textnormal",{
	size = 16,
	font = "Roboto",
})

function PANEL:GetValue()
	if (self.PlaceHoldered == true) then
		return ""
	else
		return self:GetText()
	end
end

function PANEL:SetPlaceHolder(text)
	self.PlaceHoldered = true
	self.PlaceHolder = text
	self:SetText(text)
	self:SetFont("bgui_placeholdered")
	self:ApplySchemeSettings()
	self:SetTextColor(Color(64,64,64))
end

function PANEL:Init()
	self:SetFont("bgui_textnormal")
	self:ApplySchemeSettings()
	self:SetTextColor(Color(0,0,0))

	self.OnGetFocus = function()
		if (self.PlaceHoldered == true) then
			self.PlaceHoldered = false
			self:SetFont("bgui_textnormal")
			self:ApplySchemeSettings()
			self:SetTextColor(Color(0,0,0))
			self:SetText("")
		end
	end

	self.OnLoseFocus = function()
		if (self:GetValue() == "" and self.PlaceHolder) then
			self.PlaceHoldered = true
			self:SetText(self.PlaceHolder)
			self:SetFont("bgui_placeholdered")
			self:ApplySchemeSettings()
			self:SetTextColor(Color(64,64,64))
		end
	end
end

function PANEL:OnValueChange(v)
	if (v == "" and self.PlaceHolder) then
		self.PlaceHoldered = true
		self:SetText(self.PlaceHolder)
		self:SetFont("bgui_placeholdered")
		self:ApplySchemeSettings()
		self:SetTextColor(Color(64,64,64))
	end
end

function PANEL:OnKeyCodeTyped(kc)
	if (self.PlaceHoldered == true and kc ~= 66) then
		self.PlaceHoldered = false
		self:SetFont("bgui_textnormal")
		self:ApplySchemeSettings()
		self:SetTextColor(Color(0,0,0))
		self:SetText("")
	end
end

function PANEL:GetUpdateOnType()
	return true
end

function PANEL:Clear()
	self:SetText("")
	if (self.PlaceHolder) then
		self.PlaceHoldered = true
		self:SetText(self.PlaceHolder)
		self:SetFont("bgui_placeholdered")
		self:ApplySchemeSettings()
		self:SetTextColor(Color(64,64,64))
	end
end

derma.DefineControl("PartyTextBox",nil,PANEL,"DTextEntry")
--lua/vgui/bvgui/checkbox.lua:
local PANEL = {}

local checked_mat = Material("vgui/bvgui/checked.png", "smooth")

function PANEL:Init()
	self:SetMouseInputEnabled(true)
	self:SetCursor("hand")
	self:SetSize(18,18)

	self.Checked = false
end

local checkbox_bg = Color(47,53,66)
local check_size = 12
function PANEL:Paint(w,h)
	draw.RoundedBox(4, 0, 0, w, h, checkbox_bg)

	if (self.CheckedIconOpacity) then
		self.CheckedIconOpacity:DoLerp()
		surface.SetMaterial(checked_mat)
		surface.SetDrawColor(255,255,255,self.CheckedIconOpacity:GetValue())
		surface.DrawTexturedRect(w / 2 - check_size / 2, h / 2 - check_size / 2, check_size, check_size)
	end
end

function PANEL:OnMouseReleased()
	if (not self.CheckedIconOpacity) then
		self.CheckedIconOpacity = bVGUI.Lerp(0,255,.5)
	end
	self:SetChecked(not self:GetChecked())
	if (self:GetChecked()) then
		GAS:PlaySound("btn_on")
		self.CheckedIconOpacity:SetTo(255)
	else
		GAS:PlaySound("btn_off")
		self.CheckedIconOpacity:SetTo(0)
	end
	if (self.OnChange) then
		self:OnChange()
	end
end

function PANEL:SetChecked(checked)
	if (not self.CheckedIconOpacity) then
		if (checked) then
			self.CheckedIconOpacity = bVGUI.Lerp(255,255,.5)
		else
			self.CheckedIconOpacity = bVGUI.Lerp(0,0,.5)
		end
	else
		if (checked) then
			self.CheckedIconOpacity:SetTo(255)
		else
			self.CheckedIconOpacity:SetTo(0)
		end
	end
	self.Checked = checked
end
function PANEL:GetChecked()
	return self.Checked
end

function PANEL:SetTooltip(text)
	self.Tooltip = text
end
function PANEL:OnCursorEntered()
	if (self.Tooltip) then
		bVGUI.CreateTooltip({
			VGUI_Element = self,
			Text = self.Tooltip
		})
	end
end
function PANEL:OnCursorExited()
	if (self.Tooltip) then
		bVGUI.DestroyTooltip()
	end
end

derma.DefineControl("bVGUI.Checkbox", nil, PANEL, "DPanel")
--lua/vgui/bvgui/combobox.lua:
local PANEL = {}

function PANEL:Init()
	self.ChoiceIcons = {}
	self.Spacers = {}
end

function PANEL:Clear()
	
	self:SetText( "" )
	self.Choices = {}
	self.Data = {}
	self.ChoiceIcons = {}
	self.Spacers = {}
	self.selected = nil

	if ( self.Menu ) then
		self.Menu:Remove()
		self.Menu = nil
	end

end

function PANEL:AddChoice( value, data, select, icon )

	local i = table.insert( self.Choices, value )

	if ( data ) then
		self.Data[ i ] = data
	end

	if (icon) then
		self.ChoiceIcons[ i ] = icon
	end

	if ( select ) then

		self:ChooseOption( value, i )

	end

	return i

end

function PANEL:AddSpacer()

	self.Spacers[ #self.Choices ] = true

end

function PANEL:OpenMenu( pControlOpener )

	if ( pControlOpener && pControlOpener == self.TextEntry ) then
		return
	end

	-- Don't do anything if there aren't any options..
	if ( #self.Choices == 0 ) then return end

	-- If the menu still exists and hasn't been deleted
	-- then just close it and don't open a new one.
	if ( IsValid( self.Menu ) ) then
		self.Menu:Remove()
		self.Menu = nil
	end

	self.Menu = DermaMenu( false, self )

	if ( self:GetSortItems() ) then
		local sorted = {}
		for k, v in pairs( self.Choices ) do
			local val = tostring( v ) --tonumber( v ) || v -- This would make nicer number sorting, but SortedPairsByMemberValue doesn't seem to like number-string mixing
			if ( string.len( val ) > 1 && !tonumber( val ) && val:StartWith( "#" ) ) then val = language.GetPhrase( val:sub( 2 ) ) end
			table.insert( sorted, { id = k, data = v, label = val } )
		end
		for k, v in SortedPairsByMemberValue( sorted, "label" ) do
			local option = self.Menu:AddOption( v.data, function() self:ChooseOption( v.data, v.id ) end )
			if ( self.ChoiceIcons[ v.id ] ) then
				option:SetIcon( self.ChoiceIcons[ v.id ] )
			end
			if ( self.Spacers[ v.id ] ) then
				self.Menu:AddSpacer()
			end
		end
	else
		for k, v in pairs( self.Choices ) do
			local option = self.Menu:AddOption( v, function() self:ChooseOption( v, k ) end )
			if ( self.ChoiceIcons[ k ] ) then
				option:SetIcon( self.ChoiceIcons[ k ] )
			end
			if ( self.Spacers[ k ] ) then
				self.Menu:AddSpacer()
			end
		end
	end

	local x, y = self:LocalToScreen( 0, self:GetTall() )

	self.Menu:SetMinimumWidth( self:GetWide() )
	self.Menu:Open( x, y, false, self )

end

derma.DefineControl("bVGUI.ComboBox", nil, PANEL, "DComboBox")
--lua/vgui/bvgui/infobar.lua:
bVGUI.INFOBAR_COLOR_GREY = Color(62, 62, 62)
bVGUI.INFOBAR_COLOR_PURPLE = Color(104, 0, 160)

local PANEL = {}

function PANEL:Init()
	self:SetTall(30)
	self:SetMouseInputEnabled(true)
	self:DockPadding(5,0,5,4)

	self.OriginalBarColor = bVGUI.INFOBAR_COLOR_GREY
	self.TargetBarColor = self.OriginalBarColor
	self.BorderColor = bVGUI.DarkenColor(self.OriginalBarColor, 0.2)

	self.Label = vgui.Create("DLabel", self)
	self.Label:Dock(FILL)
	self.Label:SetContentAlignment(5)
	self.Label:SetTextColor(bVGUI.COLOR_WHITE)
	self.Label:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "REGULAR", 14))
end

function PANEL:SetText(text)
	self.Text = text
	self.Label:SetText(text)
end
function PANEL:GetText()
	return self.Text
end

function PANEL:SetColor(col_enum)
	self.OriginalBarColor = col_enum
	self.TargetBarColor = self.OriginalBarColor
	self.BorderColor = bVGUI.DarkenColor(self.OriginalBarColor, 0.2)
	self.Label:SetTextColor(bVGUI.TextColorContrast(col_enum))
end

function PANEL:OnCursorEntered()
	if (self.AllowCopy) then
		self.TargetBarColor = bVGUI.LightenColor(self.OriginalBarColor, 0.2)
		self.ColorInterpolation = bVGUI.LerpColor(self.OriginalBarColor, self.TargetBarColor, 0.5)
	end
end
function PANEL:OnCursorExited()
	if (self.AllowCopy) then
		self.ColorInterpolation = bVGUI.LerpColor(self.TargetBarColor, self.OriginalBarColor, 0.5)
		self.TargetBarColor = self.OriginalBarColor
	end
end
function PANEL:OnMousePressed()
	if (self.AllowCopy) then
		self.ColorInterpolation = nil
		self.TargetBarColor = self.BorderColor
		self:DockPadding(5,0,5,0)
		self:InvalidateLayout(true)
	end
end
function PANEL:OnMouseReleased()
	if (self.AllowCopy) then
		if (GAS) then
			GAS:SetClipboardText(self:GetText())
		else
			SetClipboardText(self:GetText())
			bVGUI.MouseInfoTooltip.Create(bVGUI.L("copied"))
		end

		if (self:IsHovered()) then
			self.TargetBarColor = bVGUI.LightenColor(self.OriginalBarColor, 0.2)
		else
			self.TargetBarColor = self.OriginalBarColor
		end
		self:DockPadding(5,0,5,4)
		self:InvalidateLayout(true)
	end
end

function PANEL:Paint(w,h)
	if (self.ColorInterpolation) then
		self.ColorInterpolation:DoLerp()
		surface.SetDrawColor(self.ColorInterpolation:GetColor())
	else
		surface.SetDrawColor(self.TargetBarColor)
	end
	if (self.DrawBorder ~= false) then
		local col
		if (self.ColorInterpolation) then
			col = self.ColorInterpolation:GetColor()
		else
			col = self.TargetBarColor
		end
		draw.RoundedBox(4, 0, 0, w, h, self.BorderColor)
		draw.RoundedBoxEx(4, 0, 0, w, h - 4, col, true, true)
	else
		surface.DrawRect(0,0,w,h)
	end
end

function PANEL:SetDrawBorder(draw_border)
	self.DrawBorder = draw_border
	if (draw_border == false) then
		self:DockPadding(0,0,0,0)
	else
		self:DockPadding(0,0,0,4)
	end
end
function PANEL:GetDrawBorder()
	return self.DrawBorder
end

function PANEL:AllowCopy()
	self.AllowCopy = true
	self:SetCursor("hand")
end

derma.DefineControl("bVGUI.InfoBar", nil, PANEL, "DPanel")
--lua/vgui/bvgui/mouseinfo_tooltip.lua:
if (IsValid(bVGUI.MouseInfoTooltip)) then
	if (IsValid(bVGUI.MouseInfoTooltip.Label)) then
		bVGUI.PlayerTooltip.Label:Remove()
	end
end

bVGUI.MouseInfoTooltip = {}
bVGUI.MouseInfoTooltip.Create = function(text)
	if (IsValid(bVGUI.MouseInfoTooltip.Label)) then
		bVGUI.MouseInfoTooltip.Label:Remove()
	end
	bVGUI.MouseInfoTooltip.Label = vgui.Create("DLabel")
	bVGUI.MouseInfoTooltip.Label:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "BOLD", 12))
	bVGUI.MouseInfoTooltip.Label:SetText(text)
	bVGUI.MouseInfoTooltip.Label:SizeToContents()
	bVGUI.MouseInfoTooltip.Label:SetContentAlignment(5)

	bVGUI.MouseInfoTooltip.Label.CurrentTextColor = Color(255, 255, 255, 255)
	bVGUI.MouseInfoTooltip.Label.CurrentY = 15

	bVGUI.MouseInfoTooltip.Label:SetTextColor(bVGUI.MouseInfoTooltip.Label.CurrentTextColor)
	bVGUI.MouseInfoTooltip.Label:SetPos(gui.MouseX(), bVGUI.MouseInfoTooltip.Label.CurrentY)

	bVGUI.MouseInfoTooltip.Label:SetZPos(32767)
	bVGUI.MouseInfoTooltip.Label:MakePopup()
	bVGUI.MouseInfoTooltip.Label:MoveToFront()
	bVGUI.MouseInfoTooltip.Label:SetMouseInputEnabled(false)
	bVGUI.MouseInfoTooltip.Label:SetKeyBoardInputEnabled(false)

	bVGUI.MouseInfoTooltip.Label.SysTime = SysTime()
	bVGUI.MouseInfoTooltip.Label.SysTimeEnd = SysTime() + 5
	function bVGUI.MouseInfoTooltip.Label:Think()
		self.CurrentTextColor.a = Lerp(FrameTime() * 10, self.CurrentTextColor.a, 0)
		self.CurrentY = Lerp(FrameTime() * 10, self.CurrentY, 20)

		self:SetTextColor(self.CurrentTextColor)
		self:SetPos(gui.MouseX() - (self:GetWide() / 2) + 5, gui.MouseY() + self:GetTall() + self.CurrentY)

		if (self.CurrentTextColor.a <= 1) then
			self:Remove()
		end
	end
end
--lua/vgui/bvgui/tooltip.lua:
local bg_color = Color(43,48,58,255)

local PANEL = {}

function PANEL:Init()
	self:SetDrawOnTop(true)

	self.Label = vgui.Create("DLabel", self)
	self.Label:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self.Label:SetText("Tooltip")
	self.Label:SetTextColor(bVGUI.COLOR_WHITE)
	self.Label:SetContentAlignment(5)
	self.Label:SetWrap(true)

	self.Arrow = {
		{x = 0, y = 0},
		{x = 0, y = 0},
		{x = 0, y = 0}
	}
end

function PANEL:Paint(w,h)
	draw.RoundedBox(4, 0, 0, w, h, self.BackgroundColor or bg_color)
	surface.DisableClipping(true)

	surface.SetDrawColor(self.BackgroundColor or bg_color)
	draw.NoTexture()

	self.Arrow[1].x = w / 2 - 7
	self.Arrow[1].y = h

	self.Arrow[2].x = w / 2 + 7
	self.Arrow[2].y = h

	self.Arrow[3].x = w / 2
	self.Arrow[3].y = h + 7

	surface.DrawPoly(self.Arrow)

	surface.DisableClipping(false)
end

function PANEL:Think()
	local x,y = self.Label:GetSize()
	self:SetSize(x + 15, y + 7)
	self.Label:Center()

	local x,y = gui.MousePos()
	self.XPos = Lerp(FrameTime() * 15, self.XPos or x, x)
	self.YPos = Lerp(FrameTime() * 15, self.YPos or y, y)
	
	self:SetPos(self.XPos - self:GetWide() / 2, self.YPos - self:GetTall() - 14 - 5)

	if (not system.HasFocus()) then
		self:Remove()
	elseif (self.VGUI_Element) then
		if (not IsValid(self.VGUI_Element)) then
			self:Remove()
		elseif (vgui.GetHoveredPanel() ~= self.VGUI_Element) then
			if (self.HoverFrameNumber) then
				if (FrameNumber() > self.HoverFrameNumber) then
					self:Remove()
				end
			else
				self.HoverFrameNumber = FrameNumber() + 1
			end
		end
	end
end

function PANEL:SetText(text)
	self.Label:SetText(text)
	self.Label:SetWrap(false)
	self.Label:SizeToContentsX()
	if (self.Label:GetWide() >= 200) then
		self.Label:SetWide(200)
		self.Label:SetWrap(true)
		self.Label:SetAutoStretchVertical(true)
	end
end
function PANEL:GetText()
	return self.Label:GetText()
end

function PANEL:SetTextColor(col)
	self.Label:SetTextColor(col)
end
function PANEL:GetTextColor()
	return self.Label:GetTextColor()
end

function PANEL:SetBackgroundColor(col)
	self.BackgroundColor = col
end
function PANEL:GetBackgroundColor()
	return self.BackgroundColor
end

function PANEL:SetVGUIElement(elem)
	self.VGUI_Element = elem
end
function PANEL:GetVGUIElement()
	return self.VGUI_Element
end

derma.DefineControl("bVGUI.Tooltip", nil, PANEL, "DPanel")

bVGUI.CreateTooltip = function(options)
	bVGUI.DestroyTooltip()

	bVGUI.Tooltip = vgui.Create("bVGUI.Tooltip")
	bVGUI.Tooltip:SetVGUIElement(options.VGUI_Element)
	bVGUI.Tooltip:SetText(options.Text)
	bVGUI.Tooltip:SetTextColor(options.TextColor or bVGUI.COLOR_WHITE)
	bVGUI.Tooltip:SetBackgroundColor(options.BackgroundColor or bg_color)
end
bVGUI.DestroyTooltip = function()
	if (IsValid(bVGUI.Tooltip)) then
		if (bVGUI.Tooltip.Closing ~= true) then
			bVGUI.Tooltip:Remove()
		end
	end
end

bVGUI.AttachTooltip = function(pnl, options)
	pnl:SetMouseInputEnabled(true)
	options.VGUI_Element = pnl
	if (pnl.bVGUI_TooltipOptions) then
		pnl.bVGUI_TooltipOptions = options
		return
	else
		pnl.bVGUI_TooltipOptions = options
	end

	pnl.bVGUI_TOOLTIP_OLD_CURSOR_ENTER = pnl.bVGUI_TOOLTIP_OLD_CURSOR_ENTER or pnl.OnCursorEntered
	pnl.bVGUI_TOOLTIP_OLD_CURSOR_EXIT = pnl.bVGUI_TOOLTIP_OLD_CURSOR_EXIT or pnl.OnCursorExited
	function pnl:OnCursorEntered(...)
		bVGUI.CreateTooltip(self.bVGUI_TooltipOptions)
		if (self.bVGUI_TOOLTIP_OLD_CURSOR_ENTER) then self.bVGUI_TOOLTIP_OLD_CURSOR_ENTER(self, ...) end
	end
	function pnl:OnCursorExited(...)
		bVGUI.DestroyTooltip()
		if (self.bVGUI_TOOLTIP_OLD_CURSOR_EXIT) then self.bVGUI_TOOLTIP_OLD_CURSOR_EXIT(self, ...) end
	end
end

bVGUI.UnattachTooltip = function(pnl)
	pnl.bVGUI_TooltipOptions = nil
	pnl.OnCursorEntered = pnl.bVGUI_TOOLTIP_OLD_CURSOR_ENTER
	pnl.OnCursorExited = pnl.bVGUI_TOOLTIP_OLD_CURSOR_EXIT
end
--gamemodes/darkrp/gamemode/libraries/sh_cami.lua:
--[[
CAMI - Common Admin Mod Interface.
Copyright 2020 CAMI Contributors

Makes admin mods intercompatible and provides an abstract privilege interface
for third party addons.

Follows the specification on this page:
https://github.com/glua/CAMI/blob/master/README.md

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]

-- Version number in YearMonthDay format.
local version = 20211019

if CAMI and CAMI.Version >= version then return end

CAMI = CAMI or {}
CAMI.Version = version


--- @class CAMI_USERGROUP
--- defines the charactaristics of a usergroup
--- @field Name string @The name of the usergroup
--- @field Inherits string @The name of the usergroup this usergroup inherits from
--- @field CAMI_Source string @The source specified by the admin mod which registered this usergroup (if any, converted to a string)

--- @class CAMI_PRIVILEGE
--- defines the charactaristics of a privilege
--- @field Name string @The name of the privilege
--- @field MinAccess "'user'" | "'admin'" | "'superadmin'" @Default group that should have this privilege
--- @field Description string | nil @Optional text describing the purpose of the privilege
local CAMI_PRIVILEGE = {}
--- Optional function to check if a player has access to this privilege
--- (and optionally execute it on another player)
---
--- ⚠ **Warning**: This function may not be called by all admin mods
--- @param actor GPlayer @The player
--- @param target GPlayer | nil @Optional - the target
--- @return boolean @If they can or not
--- @return string | nil @Optional reason
function CAMI_PRIVILEGE:HasAccess(actor, target)
end

--- Contains the registered CAMI_USERGROUP usergroup structures.
--- Indexed by usergroup name.
--- @type CAMI_USERGROUP[]
local usergroups = CAMI.GetUsergroups and CAMI.GetUsergroups() or {
    user = {
        Name = "user",
        Inherits = "user",
        CAMI_Source = "Garry's Mod",
    },
    admin = {
        Name = "admin",
        Inherits = "user",
        CAMI_Source = "Garry's Mod",
    },
    superadmin = {
        Name = "superadmin",
        Inherits = "admin",
        CAMI_Source = "Garry's Mod",
    }
}

--- Contains the registered CAMI_PRIVILEGE privilege structures.
--- Indexed by privilege name.
--- @type CAMI_PRIVILEGE[]
local privileges = CAMI.GetPrivileges and CAMI.GetPrivileges() or {}

--- Registers a usergroup with CAMI.
---
--- Use the source parameter to make sure CAMI.RegisterUsergroup function and
--- the CAMI.OnUsergroupRegistered hook don't cause an infinite loop
--- @param usergroup CAMI_USERGROUP @The structure for the usergroup you want to register
--- @param source any @Identifier for your own admin mod. Can be anything.
--- @return CAMI_USERGROUP @The usergroup given as an argument
function CAMI.RegisterUsergroup(usergroup, source)
    if source then
        usergroup.CAMI_Source = tostring(source)
    end
    usergroups[usergroup.Name] = usergroup

    hook.Call("CAMI.OnUsergroupRegistered", nil, usergroup, source)
    return usergroup
end

--- Unregisters a usergroup from CAMI. This will call a hook that will notify
--- all other admin mods of the removal.
---
--- ⚠ **Warning**: Call only when the usergroup is to be permanently removed.
---
--- Use the source parameter to make sure CAMI.UnregisterUsergroup function and
--- the CAMI.OnUsergroupUnregistered hook don't cause an infinite loop
--- @param usergroupName string @The name of the usergroup.
--- @param source any @Identifier for your own admin mod. Can be anything.
--- @return boolean @Whether the unregistering succeeded.
function CAMI.UnregisterUsergroup(usergroupName, source)
    if not usergroups[usergroupName] then return false end

    local usergroup = usergroups[usergroupName]
    usergroups[usergroupName] = nil

    hook.Call("CAMI.OnUsergroupUnregistered", nil, usergroup, source)

    return true
end

--- Retrieves all registered usergroups.
--- @return CAMI_USERGROUP[] @Usergroups indexed by their names.
function CAMI.GetUsergroups()
    return usergroups
end

--- Receives information about a usergroup.
--- @param usergroupName string
--- @return CAMI_USERGROUP | nil @Returns nil when the usergroup does not exist.
function CAMI.GetUsergroup(usergroupName)
    return usergroups[usergroupName]
end

--- Checks to see if potentialAncestor is an ancestor of usergroupName.
--- All usergroups are ancestors of themselves.
---
--- Examples:
--- * `user` is an ancestor of `admin` and also `superadmin`
--- * `admin` is an ancestor of `superadmin`, but not `user`
--- @param usergroupName string @The usergroup to query
--- @param potentialAncestor string @The ancestor to query
--- @return boolean @Whether usergroupName inherits potentialAncestor.
function CAMI.UsergroupInherits(usergroupName, potentialAncestor)
    repeat
        if usergroupName == potentialAncestor then return true end

        usergroupName = usergroups[usergroupName] and
                         usergroups[usergroupName].Inherits or
                         usergroupName
    until not usergroups[usergroupName] or
          usergroups[usergroupName].Inherits == usergroupName

    -- One can only be sure the usergroup inherits from user if the
    -- usergroup isn't registered.
    return usergroupName == potentialAncestor or potentialAncestor == "user"
end

--- Find the base group a usergroup inherits from.
---
--- This function traverses down the inheritence chain, so for example if you have
--- `user` -> `group1` -> `group2`
--- this function will return `user` if you pass it `group2`.
---
--- ℹ **NOTE**: All usergroups must eventually inherit either user, admin or superadmin.
--- @param usergroupName string @The name of the usergroup
--- @return "'user'" | "'admin'" | "'superadmin'" @The name of the root usergroup
function CAMI.InheritanceRoot(usergroupName)
    if not usergroups[usergroupName] then return end

    local inherits = usergroups[usergroupName].Inherits
    while inherits ~= usergroups[usergroupName].Inherits do
        usergroupName = usergroups[usergroupName].Inherits
    end

    return usergroupName
end

--- Registers an addon privilege with CAMI.
---
--- ⚠ **Warning**: This should only be used by addons. Admin mods must *NOT*
---  register their privileges using this function.
--- @param privilege CAMI_PRIVILEGE
--- @return CAMI_PRIVILEGE @The privilege given as argument.
function CAMI.RegisterPrivilege(privilege)
    privileges[privilege.Name] = privilege

    hook.Call("CAMI.OnPrivilegeRegistered", nil, privilege)

    return privilege
end

--- Unregisters a privilege from CAMI.
--- This will call a hook that will notify any admin mods of the removal.
---
--- ⚠ **Warning**: Call only when the privilege is to be permanently removed.
--- @param privilegeName string @The name of the privilege.
--- @return boolean @Whether the unregistering succeeded.
function CAMI.UnregisterPrivilege(privilegeName)
    if not privileges[privilegeName] then return false end

    local privilege = privileges[privilegeName]
    privileges[privilegeName] = nil

    hook.Call("CAMI.OnPrivilegeUnregistered", nil, privilege)

    return true
end

--- Retrieves all registered privileges.
--- @return CAMI_PRIVILEGE[] @All privileges indexed by their names.
function CAMI.GetPrivileges()
    return privileges
end

--- Receives information about a privilege.
--- @param privilegeName string
--- @return CAMI_PRIVILEGE | nil
function CAMI.GetPrivilege(privilegeName)
    return privileges[privilegeName]
end

-- Default access handler
local defaultAccessHandler = {["CAMI.PlayerHasAccess"] =
    function(_, actorPly, privilegeName, callback, targetPly, extraInfoTbl)
        -- The server always has access in the fallback
        if not IsValid(actorPly) then return callback(true, "Fallback.") end

        local priv = privileges[privilegeName]

        local fallback = extraInfoTbl and (
            not extraInfoTbl.Fallback and actorPly:IsAdmin() or
            extraInfoTbl.Fallback == "user" and true or
            extraInfoTbl.Fallback == "admin" and actorPly:IsAdmin() or
            extraInfoTbl.Fallback == "superadmin" and actorPly:IsSuperAdmin())


        if not priv then return callback(fallback, "Fallback.") end

        local hasAccess =
            priv.MinAccess == "user" or
            priv.MinAccess == "admin" and actorPly:IsAdmin() or
            priv.MinAccess == "superadmin" and actorPly:IsSuperAdmin()

        if hasAccess and priv.HasAccess then
            hasAccess = priv:HasAccess(actorPly, targetPly)
        end

        callback(hasAccess, "Fallback.")
    end,
    ["CAMI.SteamIDHasAccess"] =
    function(_, _, _, callback)
        callback(false, "No information available.")
    end
}

--- @class CAMI_ACCESS_EXTRA_INFO
--- @field Fallback "'user'" | "'admin'" | "'superadmin'" @Fallback status for if the privilege doesn't exist. Defaults to `admin`.
--- @field IgnoreImmunity boolean @Ignore any immunity mechanisms an admin mod might have.
--- @field CommandArguments table @Extra arguments that were given to the privilege command.

--- Checks if a player has access to a privilege
--- (and optionally can execute it on targetPly)
---
--- This function is designed to be asynchronous but will be invoked
---  synchronously if no callback is passed.
---
--- ⚠ **Warning**: If the currently installed admin mod does not support
---                 synchronous queries, this function will throw an error!
--- @param actorPly GPlayer @The player to query
--- @param privilegeName string @The privilege to query
--- @param callback fun(hasAccess: boolean, reason: string|nil) @Callback to receive the answer, or nil for synchronous
--- @param targetPly GPlayer | nil @Optional - target for if the privilege effects another player (eg kick/ban)
--- @param extraInfoTbl CAMI_ACCESS_EXTRA_INFO | nil @Table of extra information for the admin mod
--- @return boolean | nil @Synchronous only - if the player has the privilege
--- @return string | nil @Synchronous only - optional reason from admin mod
function CAMI.PlayerHasAccess(actorPly, privilegeName, callback, targetPly,
extraInfoTbl)
    local hasAccess, reason = nil, nil
    local callback_ = callback or function(hA, r) hasAccess, reason = hA, r end

    hook.Call("CAMI.PlayerHasAccess", defaultAccessHandler, actorPly,
        privilegeName, callback_, targetPly, extraInfoTbl)

    if callback ~= nil then return end

    if hasAccess == nil then
        local err = [[The function CAMI.PlayerHasAccess was used to find out
        whether Player %s has privilege "%s", but an admin mod did not give an
        immediate answer!]]
        error(string.format(err,
            actorPly:IsPlayer() and actorPly:Nick() or tostring(actorPly),
            privilegeName))
    end

    return hasAccess, reason
end

--- Get all the players on the server with a certain privilege
--- (and optionally who can execute it on targetPly)
---
--- ℹ **NOTE**: This is an asynchronous function!
--- @param privilegeName string @The privilege to query
--- @param callback fun(players: GPlayer[]) @Callback to receive the answer
--- @param targetPly GPlayer | nil @Optional - target for if the privilege effects another player (eg kick/ban)
--- @param extraInfoTbl CAMI_ACCESS_EXTRA_INFO | nil @Table of extra information for the admin mod
function CAMI.GetPlayersWithAccess(privilegeName, callback, targetPly,
extraInfoTbl)
    local allowedPlys = {}
    local allPlys = player.GetAll()
    local countdown = #allPlys

    local function onResult(ply, hasAccess, _)
        countdown = countdown - 1

        if hasAccess then table.insert(allowedPlys, ply) end
        if countdown == 0 then callback(allowedPlys) end
    end

    for _, ply in ipairs(allPlys) do
        CAMI.PlayerHasAccess(ply, privilegeName,
            function(...) onResult(ply, ...) end,
            targetPly, extraInfoTbl)
    end
end

--- @class CAMI_STEAM_ACCESS_EXTRA_INFO
--- @field IgnoreImmunity boolean @Ignore any immunity mechanisms an admin mod might have.
--- @field CommandArguments table @Extra arguments that were given to the privilege command.

--- Checks if a (potentially offline) SteamID has access to a privilege
--- (and optionally if they can execute it on a target SteamID)
---
--- ℹ **NOTE**: This is an asynchronous function!
--- @param actorSteam string | nil @The SteamID to query
--- @param privilegeName string @The privilege to query
--- @param callback fun(hasAccess: boolean, reason: string|nil) @Callback to receive  the answer
--- @param targetSteam string | nil @Optional - target SteamID for if the privilege effects another player (eg kick/ban)
--- @param extraInfoTbl CAMI_STEAM_ACCESS_EXTRA_INFO | nil @Table of extra information for the admin mod
function CAMI.SteamIDHasAccess(actorSteam, privilegeName, callback,
targetSteam, extraInfoTbl)
    hook.Call("CAMI.SteamIDHasAccess", defaultAccessHandler, actorSteam,
        privilegeName, callback, targetSteam, extraInfoTbl)
end

--- Signify that your admin mod has changed the usergroup of a player. This
--- function communicates to other admin mods what it thinks the usergroup
--- of a player should be.
---
--- Listen to the hook to receive the usergroup changes of other admin mods.
--- @param ply GPlayer @The player for which the usergroup is changed
--- @param old string @The previous usergroup of the player.
--- @param new string @The new usergroup of the player.
--- @param source any @Identifier for your own admin mod. Can be anything.
function CAMI.SignalUserGroupChanged(ply, old, new, source)
    hook.Call("CAMI.PlayerUsergroupChanged", nil, ply, old, new, source)
end

--- Signify that your admin mod has changed the usergroup of a disconnected
--- player. This communicates to other admin mods what it thinks the usergroup
--- of a player should be.
---
--- Listen to the hook to receive the usergroup changes of other admin mods.
--- @param steamId string @The steam ID of the player for which the usergroup is changed
--- @param old string @The previous usergroup of the player.
--- @param new string @The new usergroup of the player.
--- @param source any @Identifier for your own admin mod. Can be anything.
function CAMI.SignalSteamIDUserGroupChanged(steamId, old, new, source)
    hook.Call("CAMI.SteamIDUsergroupChanged", nil, steamId, old, new, source)
end

--gamemodes/darkrp/gamemode/libraries/interfaceloader.lua:
module("DarkRP", package.seeall)

MetaName = "DarkRP"

-- Variables that maintain the existing stubs and hooks
local stubs = {}
local hookStubs = {}

-- Contains the functions that the hooks call by default
hooks = {}

-- Delay the calling of methods until the functions are implemented
local delayedCalls = {}

local returnsLayout, isreturns
local parameterLayout, isparameters
local isdeprecated
local checkStub

local hookLayout

local realm -- State variable to manage the realm of the stubs

--[[---------------------------------------------------------------------------
Methods that check whether certain fields are valid
---------------------------------------------------------------------------]]
isreturns = function(tbl)
    if not istable(tbl) then return false end
    for _, v in pairs(tbl) do
        if not checkStub(v, returnsLayout) then return false end
    end
    return true
end

isparameters = function(tbl)
    if not istable(tbl) then return false end
    for _, v in pairs(tbl) do
        if not checkStub(v, parameterLayout) then return false end
    end
    return true
end

isdeprecated = function(val)
    return val == nil or isstring(val)
end

--[[---------------------------------------------------------------------------
The layouts of stubs
---------------------------------------------------------------------------]]
local stubLayout = {
    name = isstring,
    description = isstring,
    deprecated = isdeprecated,
    parameters = isparameters, -- the parameters of a method
    returns = isreturns, -- the return values of a method
    metatable = istable -- DarkRP, Player, Entity, Vector, ...
}

hookLayout = {
    name = isstring,
    description = isstring,
    deprecated = isdeprecated,
    parameters = isreturns, -- doesn't have the 'optional' field
    returns = isreturns,
}

returnsLayout = {
    name = isstring,
    description = isstring,
    type = isstring
}

parameterLayout = {
    name = isstring,
    description = isstring,
    type = isstring,
    optional = isbool
}

--[[---------------------------------------------------------------------------
Check the validity of a stub
---------------------------------------------------------------------------]]
checkStub = function(tbl, stub)
    if not istable(tbl) then return false, "table" end

    for name, check in pairs(stub) do
        if not check(tbl[name]) then
            return false, name
        end
    end

    return true
end

--[[---------------------------------------------------------------------------
When a stub is called, the calling of the method is delayed
---------------------------------------------------------------------------]]
local function notImplemented(name, args, thisFunc)
    if stubs[name] and stubs[name].metatable[name] ~= thisFunc then -- when calling the not implemented function after the function was implemented
        return stubs[name].metatable[name](unpack(args))
    end
    table.insert(delayedCalls, {name = name, args = args})

    return nil -- no return value because the method is not implemented
end

--[[---------------------------------------------------------------------------
Generate a stub
---------------------------------------------------------------------------]]
function stub(tbl)
    local isStub, field = checkStub(tbl, stubLayout)
    if not isStub then
        error("Invalid DarkRP method stub! Field \"" .. field .. "\" is invalid!", 2)
    end

    tbl.realm = tbl.realm or realm
    stubs[tbl.name] = tbl

    local function retNotImpl(...)
        return notImplemented(tbl.name, {...}, retNotImpl)
    end

    return retNotImpl
end

--[[---------------------------------------------------------------------------
Generate a hook stub
---------------------------------------------------------------------------]]
function hookStub(tbl)
    local isStub, field = checkStub(tbl, hookLayout)
    if not isStub then
        error("Invalid DarkRP hook! Field \"" .. field .. "\" is invalid!", 2)
    end

    tbl.realm = tbl.realm or realm
    hookStubs[tbl.name] = tbl
end

--[[---------------------------------------------------------------------------
Retrieve the stubs
---------------------------------------------------------------------------]]
function getStubs()
    return table.Copy(stubs)
end

--[[---------------------------------------------------------------------------
Retrieve the hooks
---------------------------------------------------------------------------]]
function getHooks()
    return table.Copy(hookStubs)
end

--[[---------------------------------------------------------------------------
Call the cached methods
---------------------------------------------------------------------------]]
function finish()
    local calls = table.Copy(delayedCalls) -- Loop through a copy, so the notImplemented function doesn't get called again
    for _, tbl in ipairs(calls) do
        local name = tbl.name

        if not stubs[name] then ErrorNoHalt("Calling non-existing stub \"" .. name .. "\"") continue end

        stubs[name].metatable[name](unpack(tbl.args))
    end

    delayedCalls = {}
end

--[[---------------------------------------------------------------------------
Load the interface files
---------------------------------------------------------------------------]]
local function loadInterfaces()
    local root = GM.FolderName .. "/gamemode/modules"

    local _, folders = file.Find(root .. "/*", "LUA")

    ENTITY = FindMetaTable("Entity")
    PLAYER = FindMetaTable("Player")
    VECTOR = FindMetaTable("Vector")

    for _, folder in SortedPairs(folders, true) do
        local interfacefile = string.format("%s/%s/%s_interface.lua", root, folder, "%s")
        local client = string.format(interfacefile, "cl")
        local shared = string.format(interfacefile, "sh")
        local server = string.format(interfacefile, "sv")

        if file.Exists(shared, "LUA") then
            if SERVER then AddCSLuaFile(shared) end
            realm = "Shared"
            include(shared)
        end

        if SERVER and file.Exists(client, "LUA") then
            AddCSLuaFile(client)
        end

        if SERVER and file.Exists(server, "LUA") then
            realm = "Server"
            include(server)
        end

        if CLIENT and file.Exists(client, "LUA") then
            realm = "Client"
            include(client)
        end
    end

    ENTITY, PLAYER, VECTOR = nil, nil, nil
end
loadInterfaces()

--gamemodes/darkrp/gamemode/modules/language/sh_interface.lua:
DarkRP.addLanguage = DarkRP.stub{
    name = "addLanguage",
    description = "Create a language/translation.",
    parameters = {
        {
            name = "Language name",
            description = "The short name of the language (\"en\" is English). Make sure the language name fits a possible value for gmod_language!",
            type = "string",
            optional = false
        },
        {
            name = "Language contents",
            description = "A table that contains the translation sentences. Look at sh_english.lua for an example.",
            type = "table",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.addPhrase = DarkRP.stub{
    name = "addPhrase",
    description = "Add a phrase to the existing translation.",
    parameters = {
        {
            name = "Language name",
            description = "The short name of the language (\"en\" is English). Make sure the language name fits a possible value for gmod_language!",
            type = "string",
            optional = false
        },
        {
            name = "key",
            description = "The name of the translated phrase.",
            type = "string",
            optional = false
        },
        {
            name = "translation",
            description = "The translation of the phrase.",
            type = "string",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.getPhrase = DarkRP.stub{
    name = "getPhrase",
    description = "Get a phrase from the selected language.",
    parameters = {
        {
            name = "key",
            description = "The name of the translated phrase.",
            type = "string",
            optional = false
        },
        {
            name = "Phrase parameters",
            description = "Some phrases need extra information, like in \"PLAYERNAME just won the lottery!\". Not filling in the phrase parameters will cause errors.",
            type = "vararg",
            optional = false
        }
    },
    returns = {
        {
            name = "phrase",
            description = "The formatted phrase.",
            type = "string"
        }
    },
    metatable = DarkRP
}

DarkRP.getPhraseLocalized = DarkRP.stub{
    name = "getPhraseLocalized",
    description = "Translate a phrase using the language setting of a specific player.",
    parameters = {
        {
            name = "ply",
            description = "The player to use the language setting of.",
            type = "Player",
            optional = false
        },
        {
            name = "phraseName",
            description = "The name of the phrase.",
            type = "string",
            optional = false
        },
        {
            name = "Phrase parameters",
            description = "Some phrases need extra information, like in \"PLAYERNAME just won the lottery!\". Not filling in the phrase parameters will cause errors.",
            type = "vararg",
            optional = false
        }
    },
    returns = {
        {
            name = "phrase",
            description = "The formatted phrase.",
            type = "string"
        }
    },
    metatable = DarkRP
}

DarkRP.getMissingPhrases = DarkRP.stub{
    name = "getMissingPhrases",
    description = "Get all the phrases a language is missing.",
    parameters = {
        {
            name = "languageCode",
            description = "The language code of the language. For English this is \"en\".",
            type = "string",
            optional = true
        }
    },
    returns = {
        {
            name = "missingPhrases",
            description = "All the missing phrases formatted in such way that you can copy and paste it in your language file.",
            type = "string"
        }
    },
    metatable = DarkRP
}

DarkRP.addChatCommandsLanguage = DarkRP.stub{
    name = "addChatCommandsLanguage",
    description = "Add a translation table for chat command descriptions. See darkrpmod/lua/darkrp_language/chatcommands.lua for an example.",
    parameters = {
        {
            name = "languageCode",
            description = "The language code of the language. For English this is \"en\".",
            type = "string",
            optional = false
        },
        {
            name = "translations",
            description = "Key-value table with chat command strings as keys and their translation as value.",
            type = "table",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.getChatCommandDescription = DarkRP.stub{
    name = "getChatCommandDescription",
    description = "Get the translated description of a chat command.",
    parameters = {
        {
            name = "command",
            description = "The chat command string.",
            type = "string",
            optional = false
        }
    },
    returns = {
        {
            name = "description",
            description = "The translated chat command description.",
            type = "string"
        }
    },
    metatable = DarkRP
}

--addons/darkrpmodification/lua/darkrp_config/settings.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/workarounds/sh_workarounds.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/voting/sh_chatcommands.lua:
DarkRP.declareChatCommand{
    command = "forcecancelvote",
    description = "Forcefully cancel a vote.",
    delay = 0.5
}

--gamemodes/darkrp/gamemode/modules/police/sh_init.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/language/sh_english.lua:
local my_language = {
    -- Admin things
    need_admin = "You need admin privileges in order to be able to %s",
    need_sadmin = "You need super admin privileges in order to be able to %s",
    no_privilege = "You don't have the right privileges to perform this action",
    no_jail_pos = "No jail position",
    invalid_x = "Invalid %s! %s",

    -- F1 menu
    f1ChatCommandTitle = "Chat commands",
    f1Search = "Search...",

    -- Money things:
    price = "Price: %s%d",
    priceTag = "Price: %s",
    reset_money = "%s has reset all players' money!",
    has_given = "%s has given you %s",
    you_gave = "You gave %s %s",
    npc_killpay = "%s for killing an NPC!",
    profit = "profit",
    loss = "loss",
    Donate = "Donate",
    you_donated = "You have donated %s to %s!",
    has_donated = "%s has donated %s!",

    -- backwards compatibility
    deducted_x = "Deducted %s%d",
    need_x = "Need %s%d",

    deducted_money = "Deducted %s",
    need_money = "Need %s",

    payday_message = "Payday! You received %s!",
    payday_unemployed = "You received no salary because you are unemployed!",
    payday_missed = "Pay day missed! (You're Arrested)",

    property_tax = "Property tax! %s",
    property_tax_cant_afford = "You couldn't pay the taxes! Your property has been taken away from you!",
    taxday = "Tax Day! %s%% of your income was taken!",

    found_cheque = "You have found %s%s in a cheque made out to you from %s.",
    cheque_details = "This cheque is made out to %s.",
    cheque_torn = "You have torn up the cheque.",
    cheque_pay = "Pay: %s",
    signed = "Signed: %s",

    found_cash = "You have picked up %s%d!", -- backwards compatibility
    found_money = "You have picked up %s!",

    owner_poor = "The %s owner is too poor to subsidize this sale!",

    -- Police
    Wanted_text = "Wanted!",
    wanted = "Wanted by Police!\nReason: %s",
    youre_arrested = "You have been arrested. Time left: %d seconds!",
    youre_arrested_by = "You have been arrested by %s.",
    youre_unarrested_by = "You were unarrested by %s.",
    hes_arrested = "%s has been arrested for %d seconds!",
    hes_unarrested = "%s has been released from jail!",
    warrant_ordered = "%s ordered a search warrant for %s. Reason: %s",
    warrant_request = "%s requests a search warrant for %s\nReason: %s",
    warrant_request2 = "Search warrant request sent to Mayor %s!",
    warrant_approved = "Search warrant approved for %s!\nReason: %s\nOrdered by: %s",
    warrant_approved2 = "You are now able to search his house.",
    warrant_denied = "Mayor %s has denied your search warrant request.",
    warrant_expired = "The search warrant for %s has expired!",
    warrant_required = "You need a warrant in order to be able to open this door.",
    warrant_required_unfreeze = "You need a warrant in order to be able to unfreeze this prop.",
    warrant_required_unweld = "You need a warrant in order to be able to unweld this prop.",
    wanted_by_police = "%s is wanted by the police!\nReason: %s\nOrdered by: %s",
    wanted_by_police_print = "%s has made %s wanted, reason: %s",
    wanted_expired = "%s is no longer wanted by the Police.",
    wanted_revoked = "%s is no longer wanted by the Police.\nRevoked by: %s",
    cant_arrest_other_cp = "You cannot arrest other CPs!",
    must_be_wanted_for_arrest = "The player must be wanted in order to be able to arrest them.",
    cant_arrest_fadmin_jailed = "You cannot arrest a player who has been jailed by an admin.",
    cant_arrest_no_jail_pos = "You cannot arrest people since there are no jail positions set!",
    cant_arrest_spawning_players = "You cannot arrest players who are spawning.",

    suspect_doesnt_exist = "Suspect does not exist.",
    actor_doesnt_exist = "Actor does not exist.",
    get_a_warrant = "get a warrant",
    remove_a_warrant = "remove a warrant",
    make_someone_wanted = "make someone wanted",
    remove_wanted_status = "remove wanted status",
    already_a_warrant = "There already is a search warrant for this suspect.",
    not_warranted = "There is no search warrant for this person.",
    already_wanted = "The suspect is already wanted.",
    not_wanted = "The suspect is not wanted.",
    need_to_be_cp = "You have to be a member of the police force.",
    suspect_must_be_alive_to_do_x = "The suspect must be alive in order to %s.",
    suspect_already_arrested = "The suspect is already in jail.",

    -- Players
    health = "Health: %s",
    job = "Job: %s",
    salary = "Salary: %s%s",
    wallet = "Wallet: %s%s",
    weapon = "Weapon: %s",
    kills = "Kills: %s",
    deaths = "Deaths: %s",
    rpname_changed = "%s changed their RPName to: %s",
    disconnected_player = "Disconnected player",
    player = "player",

    -- Teams
    need_to_be_before = "You need to be %s first in order to be able to become %s",
    need_to_make_vote = "You need to make a vote to become a %s!",
    team_limit_reached = "Can not become %s as the limit is reached",
    wants_to_be = "%s\nwants to be\n%s",
    has_not_been_made_team = "%s has not been made %s!",
    job_has_become = "%s has been made a %s!",

    -- Disasters
    meteor_approaching = "WARNING: Meteor storm approaching!",
    meteor_passing = "Meteor storm passing.",
    meteor_enabled = "Meteor Storms are now enabled.",
    meteor_disabled = "Meteor Storms are now disabled.",
    earthquake_report = "Earthquake reported of magnitude %sMw",
    earthtremor_report = "Earth tremor reported of magnitude %sMw",

    -- Keys, vehicles and doors
    keys_allowed_to_coown = "You are allowed to co-own this\n(Press Reload with keys or press F2 to co-own)\n",
    keys_other_allowed = "Allowed to co-own:",
    keys_allow_ownership = "(Press Reload with keys or press F2 to allow ownership)",
    keys_disallow_ownership = "(Press Reload with keys or press F2 to disallow ownership)",
    keys_owned_by = "Owned by:",
    keys_unowned = "Unowned\n(Press Reload with keys or press F2 to own)",
    keys_everyone = "(Press Reload with keys or press F2 to enable for everyone)",
    door_unown_arrested = "You can not own or unown things while arrested!",
    door_unownable = "This door cannot be owned or unowned!",
    door_sold = "You have sold this for %s",
    door_already_owned = "This door is already owned by someone!",
    door_cannot_afford = "You can not afford this door!",
    door_hobo_unable = "You can not buy a door if you are a hobo!",
    vehicle_cannot_afford = "You can not afford this vehicle!",
    door_bought = "You've bought this door for %s%s",
    vehicle_bought = "You've bought this vehicle for %s%s",
    door_need_to_own = "You need to own this door in order to be able to %s",
    door_rem_owners_unownable = "You can not remove owners if a door is non-ownable!",
    door_add_owners_unownable = "You can not add owners if a door is non-ownable!",
    rp_addowner_already_owns_door = "%s already owns (or is already allowed to own) this door!",
    add_owner = "Add owner",
    remove_owner = "Remove owner",
    coown_x = "Co-own %s",
    allow_ownership = "Allow ownership",
    disallow_ownership = "Disallow ownership",
    edit_door_group = "Edit door group",
    door_groups = "Door groups",
    door_group_doesnt_exist = "Door group does not exist!",
    door_group_set = "Door group set successfully.",
    sold_x_doors_for_y = "You have sold %d doors for %s%d!", -- backwards compatibility
    sold_x_doors = "You have sold %d doors for %s!",
    no_doors_owned = "You don't own any doors!",

    -- Entities
    drugs = "drugs",
    Drugs = "Drugs",
    drug_lab = "Drug Lab",
    gun_lab = "Gun Lab",
    any_lab = "any lab",
    gun = "gun",
    microwave = "Microwave",
    food = "food",
    Food = "Food",
    money_printer = "Money Printer",
    tip_jar = "Tip Jar",

    sign_this_letter = "Sign this letter",
    signed_yours = "Yours,",

    money_printer_exploded = "Your money printer has exploded!",
    money_printer_overheating = "Your money printer is overheating!",

    contents = "Contents: ",
    amount = "Amount: ",

    picking_lock = "Picking lock",

    cannot_pocket_x = "You cannot put this in your pocket!",
    cannot_pocket_gravgunned = "You cannot put this in your pocket: it is being held by a gravgun.",
    object_too_heavy = "This object is too heavy.",
    pocket_full = "Your pocket is full!",
    pocket_no_items = "Your pocket contains no items.",
    drop_item = "Drop item",

    bonus_destroying_entity = "destroying this illegal entity.",

    switched_burst = "Switched to burst-fire mode.",
    switched_fully_auto = "Switched to fully automatic fire mode.",
    switched_semi_auto = "Switched to semi-automatic fire mode.",

    keypad_checker_shoot_keypad = "Shoot a keypad to see what it controls.",
    keypad_checker_shoot_entity = "Shoot an entity to see which keypads are connected to it",
    keypad_checker_click_to_clear = "Right click to clear.",
    keypad_checker_entering_right_pass = "Entering the right password",
    keypad_checker_entering_wrong_pass = "Entering the wrong password",
    keypad_checker_after_right_pass = "after having entered the right password",
    keypad_checker_after_wrong_pass = "after having entered the wrong password",
    keypad_checker_right_pass_entered = "Right password entered",
    keypad_checker_wrong_pass_entered = "Wrong password entered",
    keypad_checker_controls_x_entities = "This keypad controls %d entities",
    keypad_checker_controlled_by_x_keypads = "This entity is controlled by %d keypads",
    keypad_on = "ON",
    keypad_off = "OFF",
    seconds = "seconds",

    persons_weapons = "%s's weapons:",
    returned_persons_weapons = "Returned %s's confiscated weapons.",
    no_weapons_confiscated = "%s had no weapons confiscated!",
    no_illegal_weapons = "%s had no weapons.",
    confiscated_these_weapons = "Confiscated these weapons:",
    checking_weapons = "Confiscating weapons",

    shipment_antispam_wait = "Please wait before spawning another shipment.",
    createshipment = "Create a shipment",
    splitshipment = "Split this shipment",
    shipment_cannot_split = "Cannot split this shipment.",

    -- Talking
    hear_noone = "No-one can hear you %s!",
    hear_everyone = "Everyone can hear you!",
    hear_certain_persons = "Players who can hear you %s: ",

    whisper = "whisper",
    yell = "yell",
    broadcast = "[Broadcast!]",
    radio = "radio",
    request = "(REQUEST!)",
    group = "(group)",
    demote = "(DEMOTE)",
    ooc = "OOC",
    radio_x = "Radio %d",

    talk = "talk",
    speak = "speak",

    speak_in_ooc = "speak in OOC",
    perform_your_action = "perform your action",
    talk_to_your_group = "talk to your group",

    channel_set_to_x = "Channel set to %s!",
    channel = "channel",

    -- Notifies
    disabled = "%s has been disabled! %s",
    gm_spawnvehicle = "spawn vehicles",
    gm_spawnsent = "spawn scripted entities (SENTs)",
    gm_spawnnpc = "spawn Non-Player Characters (NPCs)",
    see_settings = "Please see the DarkRP settings.",
    limit = "You have reached the %s limit!",
    have_to_wait = "You need to wait another %d seconds before using %s!",
    must_be_looking_at = "You need to be looking at a %s!",
    incorrect_job = "You do not have the right job to %s",
    unavailable = "This %s is unavailable",
    unable = "You are unable to %s. %s",
    cant_afford = "You cannot afford this %s",
    created_x = "%s created a %s",
    cleaned_up = "Your %s were cleaned up.",
    you_bought_x = "You have bought %s for %s%d.", -- backwards compatibility
    you_bought = "You have bought %s for %s.",
    you_got_yourself = "You got yourself a %s.",
    you_received_x = "You have received %s for %s.",

    created_first_jailpos = "You have created the first jail position!",
    added_jailpos = "You have added one extra jail position!",
    reset_add_jailpos = "You have removed all jail positions and you have added a new one here.",
    created_spawnpos = "You have added a spawn position for %s.",
    updated_spawnpos = "You have removed all spawn positions for %s and added a new one here.",
    remove_spawnpos = "You have removed all spawn positions for %s.",
    do_not_own_ent = "You do not own this entity!",
    cannot_drop_weapon = "Can't drop this weapon!",
    job_switch = "Jobs switched successfully!",
    job_switch_question = "Switch jobs with %s?",
    job_switch_requested = "Job switch requested.",
    switch_jobs = "switch jobs",

    cooks_only = "Cooks only.",

    -- Misc
    unknown = "Unknown",
    arguments = "arguments",
    no_one = "no one",
    door = "door",
    vehicle = "vehicle",
    door_or_vehicle = "door/vehicle",
    driver = "Driver: %s",
    name = "Name: %s",
    locked = "Locked.",
    unlocked = "Unlocked.",
    player_doesnt_exist = "Player does not exist.",
    job_doesnt_exist = "Job does not exist!",
    must_be_alive_to_do_x = "You must be alive in order to %s.",
    banned_or_demoted = "Banned/demoted",
    wait_with_that = "Wait with that.",
    could_not_find = "Could not find %s",
    f3tovote = "Hit F3 to vote",
    listen_up = "Listen up:", -- In rp_tell or rp_tellall
    nlr = "New Life Rule: Do Not Revenge Arrest/Kill.",
    reset_settings = "You have reset all settings!",
    must_be_x = "You must be a %s in order to be able to %s.",
    agenda = "agenda",
    agenda_updated = "The agenda has been updated",
    job_set = "%s has set their job to '%s'",
    demote_vote = "demote",
    demoted = "%s has been demoted",
    demoted_not = "%s has not been demoted",
    demote_vote_started = "%s has started a vote for the demotion of %s",
    demote_vote_text = "Demotion nominee:\n%s", -- '%s' is the reason here
    cant_demote_self = "You cannot demote yourself.",
    i_want_to_demote_you = "I want to demote you. Reason: %s",
    tried_to_avoid_demotion = "You tried to escape demotion. You failed and have been demoted.", -- naughty boy!
    lockdown_started = "The mayor has initiated a Lockdown, please return to your homes!",
    lockdown_ended = "The lockdown has ended",
    gunlicense_requested = "%s has requested %s a gun license",
    gunlicense_granted = "%s has granted %s a gun license",
    gunlicense_denied = "%s has denied %s a gun license",
    gunlicense_question_text = "Grant %s a gun license?",
    gunlicense_remove_vote_text = "%s has started a vote for the gun license removal of %s",
    gunlicense_remove_vote_text2 = "Revoke gunlicense:\n%s", -- Where %s is the reason
    gunlicense_removed = "%s's license has been removed!",
    gunlicense_not_removed = "%s's license has not been removed!",
    vote_specify_reason = "You need to specify a reason!",
    vote_started = "The vote has been created",
    vote_alone = "You have won the vote since you are alone in the server.",
    you_cannot_vote = "You cannot vote!",
    x_cancelled_vote = "%s cancelled the last vote.",
    cant_cancel_vote = "Could not cancel the last vote as there was no last vote to cancel!",
    jail_punishment = "Punishment for disconnecting! Jailed for: %d seconds.",
    admin_only = "Admin only!", -- When doing /addjailpos
    chief_or = "Chief or ",-- When doing /addjailpos
    frozen = "Frozen.",
    recipient = "recipient",
    forbidden_name = "Forbidden name.",
    illegal_characters = "Illegal characters.",
    too_long = "Too long.",
    too_short = "Too short.",

    dead_in_jail = "You now are dead until your jail time is up!",
    died_in_jail = "%s has died in jail!",

    credits_for = "CREDITS FOR %s\n",
    credits_see_console = "DarkRP credits printed to console.",

    rp_getvehicles = "Available vehicles for custom vehicles:",

    data_not_loaded_one = "Your data has not been loaded yet. Please wait.",
    data_not_loaded_two = "If this persists, try rejoining or contacting an admin.",

    cant_spawn_weapons = "You cannot spawn weapons.",
    drive_disabled = "Drive disabled for now.",
    property_disabled = "Property disabled for now.",

    not_allowed_to_purchase = "You are not allowed to purchase this item.",

    rp_teamban_hint = "rp_teamban [player name/ID] [team name/id]. Use this to ban a player from a certain team.",
    rp_teamunban_hint = "rp_teamunban [player name/ID] [team name/id]. Use this to unban a player from a certain team.",
    x_teambanned_y_for_z = "%s has banned %s from being a %s for %s minutes.",
    x_teamunbanned_y = "%s has unbanned %s from being a %s.",

    -- Backwards compatibility:
    you_set_x_salary_to_y = "You set %s's salary to %s%d.",
    x_set_your_salary_to_y = "%s set your salary to %s%d.",
    you_set_x_money_to_y = "You set %s's money to %s%d.",
    x_set_your_money_to_y = "%s set your money to %s%d.",

    you_set_x_salary = "You set %s's salary to %s.",
    x_set_your_salary = "%s set your salary to %s.",
    you_set_x_money = "You set %s's money to %s.",
    x_set_your_money = "%s set your money to %s.",
    you_set_x_name = "You set %s's name to %s",
    x_set_your_name = "%s set your name to %s",

    someone_stole_steam_name = "Someone is already using your Steam name as their RP name so we gave you a '1' after your name.", -- Uh oh
    already_taken = "Already taken.",

    job_doesnt_require_vote_currently = "This job does not require a vote at the moment!",

    x_made_you_a_y = "%s has made you a %s!",

    cmd_cant_be_run_server_console = "This command cannot be run from the server console.",

    -- The lottery
    lottery_started = "There is a lottery! Participate for %s%d?", -- backwards compatibility
    lottery_has_started = "There is a lottery! Participate for %s?",
    lottery_entered = "You entered the lottery for %s",
    lottery_not_entered = "%s did not enter the lottery",
    lottery_noone_entered = "No-one has entered the lottery",
    lottery_won = "%s has won the lottery! They have won %s",
    lottery = "lottery",
    lottery_please_specify_an_entry_cost = "Please specify an entry cost (%s-%s)",
    too_few_players_for_lottery = "There are too few players to start a lottery. There need to be at least %d players",
    lottery_ongoing = "Cannot start a lottery, there is already a lottery ongoing",

    -- Animations
    custom_animation = "Custom animation!",
    bow = "Bow",
    sexy_dance = "Sexy dance",
    follow_me = "Follow me!",
    laugh = "Laugh",
    lion_pose = "Lion pose",
    nonverbal_no = "Non-verbal no",
    thumbs_up = "Thumbs up",
    wave = "Wave",
    dance = "Dance",

    -- Hungermod
    starving = "Starving!",

    -- AFK
    afk_mode = "AFK Mode",
    unable_afk_spam_prevention = "Please wait before going AFK again.",
    salary_frozen = "Your salary has been frozen.",
    salary_restored = "Welcome back, your salary has now been restored.",
    no_auto_demote = "You will not be auto-demoted.",
    youre_afk_demoted = "You were demoted for being AFK for too long. Next time use /afk.",
    hes_afk_demoted = "%s has been demoted for being AFK for too long.",
    afk_cmd_to_exit = "Type /afk to exit AFK mode.",
    player_now_afk = "%s is now AFK.",
    player_no_longer_afk = "%s is no longer AFK.",

    -- Hitmenu
    hit = "hit",
    hitman = "Hitman",
    current_hit = "Hit: %s",
    cannot_request_hit = "Cannot request hit! %s",
    hitmenu_request = "Request",
    player_not_hitman = "This player is not a hitman!",
    distance_too_big = "Distance too big.",
    hitman_no_suicide = "The hitman won't kill themself.",
    hitman_no_self_order = "A hitman cannot order a hit for themself.",
    hitman_already_has_hit = "The hitman already has a hit ongoing.",
    price_too_low = "Price too low!",
    hit_target_recently_killed_by_hit = "The target was recently killed by a hit,",
    customer_recently_bought_hit = "The customer has recently requested a hit.",
    accept_hit_question = "Accept hit from %s\nregarding %s for %s%d?", -- backwards compatibility
    accept_hit_request = "Accept hit from %s\nregarding %s for %s?",
    hit_requested = "Hit requested!",
    hit_aborted = "Hit aborted! %s",
    hit_accepted = "Hit accepted!",
    hit_declined = "The hitman declined the hit!",
    hitman_left_server = "The hitman has left the server!",
    customer_left_server = "The customer has left the server!",
    target_left_server = "The target has left the server!",
    hit_price_set_to_x = "Hit price set to %s%d.", -- backwards compatibility
    hit_price_set = "Hit price set to %s.",
    hit_complete = "Hit by %s complete!",
    hitman_died = "The hitman died!",
    target_died = "The target has died!",
    hitman_arrested = "The hitman was arrested!",
    hitman_changed_team = "The hitman changed team!",
    x_had_hit_ordered_by_y = "%s had an active hit ordered by %s",
    place_a_hit = "place a hit!",
    hit_cancel = "hit cancellation!",
    hit_cancelled = "The hit was cancelled!",
    no_active_hit = "You have no active hit!",

    -- Vote Restrictions
    hobos_no_rights = "Hobos have no voting rights!",
    gangsters_cant_vote_for_government = "Gangsters cannot vote for government things!",
    government_cant_vote_for_gangsters = "Government officials cannot vote for gangster things!",

    -- VGUI and some more doors/vehicles
    vote = "Vote",
    time = "Time: %d",
    yes = "Yes",
    no = "No",
    ok = "Okay",
    cancel = "Cancel",
    add = "Add",
    remove = "Remove",
    none = "None",

    x_options = "%s options",
    sell_x = "Sell %s",
    set_x_title = "Set %s title",
    set_x_title_long = "Set the title of the %s you are looking at.",
    jobs = "Jobs",
    buy_x = "Buy %s",

    -- F4menu
    ammo = "ammo",
    weapon_ = "weapon",
    no_extra_weapons = "This job has no extra weapons.",
    become_job = "Become job",
    create_vote_for_job = "Create vote",
    shipment = "shipment",
    Shipments = "Shipments",
    shipments = "shipments",
    F4guns = "Weapons",
    F4entities = "Miscellaneous",
    F4ammo = "Ammo",
    F4vehicles = "Vehicles",

    -- Tab 1
    give_money = "Give money to the player you're looking at",
    drop_money = "Drop money",
    change_name = "Change your DarkRP name",
    go_to_sleep = "Go to sleep/wake up",
    drop_weapon = "Drop current weapon",
    buy_health = "Buy health(%s)",
    request_gunlicense = "Request gunlicense",
    demote_player_menu = "Demote a player",

    searchwarrantbutton = "Make a player wanted",
    unwarrantbutton = "Remove the wanted status from a player",
    noone_available = "No one available",
    request_warrant = "Request a search warrant for a player",
    make_wanted = "Make someone wanted",
    make_unwanted = "Make someone unwanted",
    set_jailpos = "Set the jail position",
    add_jailpos = "Add a jail position",

    set_custom_job = "Set a custom job (press enter to activate)",

    set_agenda = "Set the agenda (press enter to activate)",

    initiate_lockdown = "Initiate a lockdown",
    stop_lockdown = "Stop the lockdown",
    start_lottery = "Start a lottery",
    give_license_lookingat = "Give <lookingat> a gun license",

    laws_of_the_land = "LAWS OF THE LAND",
    law_added = "Law added.",
    law_removed = "Law removed.",
    law_reset = "Laws reset.",
    law_too_short = "Law too short.",
    laws_full = "The laws are full.",
    default_law_change_denied = "You are not allowed to change the default laws.",

    -- Second tab
    job_name = "Name: ",
    job_description = "Description: ",
    job_weapons = "Weapons: ",

    -- Entities tab
    buy_a = "Buy %s: %s",

    -- Licenseweaponstab
    license_tab = [[License weapons

    Tick the weapons people should be able to get WITHOUT a license!
    ]],
    license_tab_other_weapons = "Other weapons:",
}

DarkRP.addLanguage("en", my_language)

--gamemodes/darkrp/gamemode/modules/hitmenu/sh_init.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/hitmenu/cl_menu.lua:
local PANEL
local minHitDistanceSqr = GM.Config.minHitDistance * GM.Config.minHitDistance

--[[---------------------------------------------------------------------------
Hitman menu
---------------------------------------------------------------------------]]
PANEL = {}

AccessorFunc(PANEL, "hitman", "Hitman")
AccessorFunc(PANEL, "target", "Target")
AccessorFunc(PANEL, "selected", "Selected")

function PANEL:Init()
    self.BaseClass.Init(self)

    self.btnClose = vgui.Create("DButton", self)
    self.btnClose:SetText("")
    self.btnClose.DoClick = function() self:Remove() end
    self.btnClose.Paint = function(panel, w, h) derma.SkinHook("Paint", "WindowCloseButton", panel, w, h) end

    self.icon = vgui.Create("SpawnIcon", self)
    self.icon:SetDisabled(true)
    self.icon.PaintOver = function(icon) icon:SetTooltip() end
    self.icon:SetTooltip()

    self.title = vgui.Create("DLabel", self)
    self.title:SetText(DarkRP.getPhrase("hitman"))

    self.name = vgui.Create("DLabel", self)
    self.price = vgui.Create("DLabel", self)

    self.playerList = vgui.Create("DScrollPanel", self)

    self.btnRequest = vgui.Create("HitmanMenuButton", self)
    self.btnRequest:SetText(DarkRP.getPhrase("hitmenu_request"))
    self.btnRequest.DoClick = function()
        if IsValid(self:GetTarget()) then
            RunConsoleCommand("darkrp", "requesthit", self:GetTarget():SteamID(), self:GetHitman():UserID())
            self:Remove()
        end
    end

    self.btnCancel = vgui.Create("HitmanMenuButton", self)
    self.btnCancel:SetText(DarkRP.getPhrase("cancel"))
    self.btnCancel.DoClick = function() self:Remove() end

    self:SetSkin(GAMEMODE.Config.DarkRPSkin)

    self:InvalidateLayout()
end

function PANEL:Think()
    if not IsValid(self:GetHitman()) or self:GetHitman():GetPos():DistToSqr(LocalPlayer():GetPos()) > minHitDistanceSqr then
        self:Remove()
        return
    end

    -- update the price (so the hitman can't scam)
    self.price:SetText(DarkRP.getPhrase("priceTag", DarkRP.formatMoney(self:GetHitman():getHitPrice()), ""))
    self.price:SizeToContents()
end

function PANEL:PerformLayout()
    local w, h = self:GetSize()

    self:SetSize(500, 700)
    self:Center()

    self.btnClose:SetSize(24, 24)
    self.btnClose:SetPos(w - 24 - 5, 5)

    self.icon:SetSize(128, 128)
    self.icon:SetModel(self:GetHitman():GetModel())
    self.icon:SetPos(20, 20)

    self.title:SetFont("ScoreboardHeader")
    self.title:SetPos(20 + 128 + 20, 20)
    self.title:SizeToContents(true)

    self.name:SizeToContents(true)
    self.name:SetText(DarkRP.getPhrase("name", self:GetHitman():Nick()))
    self.name:SetPos(20 + 128 + 20, 20 + self.title:GetTall())

    self.price:SetFont("HUDNumber5")
    self.price:SetColor(Color(255, 0, 0, 255))
    self.price:SetText(DarkRP.getPhrase("priceTag", DarkRP.formatMoney(self:GetHitman():getHitPrice()), ""))
    self.price:SetPos(20 + 128 + 20, 20 + self.title:GetTall() + 20)
    self.price:SizeToContents(true)

    self.playerList:SetPos(20, 20 + self.icon:GetTall() + 20)
    self.playerList:SetWide(self:GetWide() - 40)

    self.btnRequest:SetPos(20, h - self.btnRequest:GetTall() - 20)
    self.btnRequest:SetButtonColor(Color(0, 120, 30, 255))

    self.btnCancel:SetPos(w - self.btnCancel:GetWide() - 20, h - self.btnCancel:GetTall() - 20)
    self.btnCancel:SetButtonColor(Color(140, 0, 0, 255))

    self.playerList:StretchBottomTo(self.btnRequest, 20)

    self.BaseClass.PerformLayout(self)
end

function PANEL:Paint()
    local w, h = self:GetSize()

    surface.SetDrawColor(Color(0, 0, 0, 200))
    surface.DrawRect(0, 0, w, h)
end

function PANEL:AddPlayerRows()
    local players = table.Copy(player.GetAll())

    table.sort(players, function(a, b)
        local aTeam, bTeam, aNick, bNick = team.GetName(a:Team()), team.GetName(b:Team()), string.lower(a:Nick()), string.lower(b:Nick())
        return aTeam == bTeam and aNick < bNick or aTeam < bTeam
    end)

    for _, v in ipairs(players) do
        local canRequest = hook.Call("canRequestHit", DarkRP.hooks, self:GetHitman(), LocalPlayer(), v, self:GetHitman():getHitPrice())
        if not canRequest then continue end

        local line = vgui.Create("HitmanMenuPlayerRow")
        line:SetPlayer(v)
        self.playerList:AddItem(line)
        line:SetWide(self.playerList:GetWide() - 100)
        line:Dock(TOP)

        line.DoClick = function()
            self:SetTarget(line:GetPlayer())

            if IsValid(self:GetSelected()) then
                self:GetSelected():SetSelected(false)
            end

            line:SetSelected(true)
            self:SetSelected(line)
        end
    end
end

vgui.Register("HitmanMenu", PANEL, "DPanel")

--[[---------------------------------------------------------------------------
Hitmenu button
---------------------------------------------------------------------------]]
PANEL = {}

AccessorFunc(PANEL, "btnColor", "ButtonColor")

function PANEL:PerformLayout()
    self:SetSize(self:GetParent():GetWide() / 2 - 30, 100)
    self:SetFont("HUDNumber5")
    self:SetTextColor(color_white)

    self.BaseClass.PerformLayout(self)
end

function PANEL:Paint()
    local w, h = self:GetSize()
    local col = self:GetButtonColor() or Color(0, 120, 30, 255)
    surface.SetDrawColor(col.r, col.g, col.b, col.a)
    surface.DrawRect(0, 0, w, h)
end

vgui.Register("HitmanMenuButton", PANEL, "DButton")

--[[---------------------------------------------------------------------------
Player row
---------------------------------------------------------------------------]]
PANEL = {}

AccessorFunc(PANEL, "player", "Player")
AccessorFunc(PANEL, "selected", "Selected", FORCE_BOOL)

function PANEL:Init()
    self.lblName = vgui.Create("DLabel", self)
    self.lblName:SetMouseInputEnabled(false)
    self.lblName:SetColor(Color(255,255,255,200))

    self.lblTeam = vgui.Create("DLabel", self)
    self.lblTeam:SetMouseInputEnabled(false)
    self.lblTeam:SetColor(Color(255,255,255,200))

    self:SetText("")

    self:SetCursor("hand")
end

function PANEL:PerformLayout()
    local ply = self:GetPlayer()
    if not IsValid(ply) then self:Remove() return end

    self.lblName:SetFont("UiBold")
    self.lblName:SetText(DarkRP.deLocalise(ply:Nick()))
    self.lblName:SizeToContents()
    self.lblName:SetPos(10, 1)

    self.lblTeam:SetFont("UiBold")
    self.lblTeam:SetText((ply.DarkRPVars and DarkRP.deLocalise(ply:getDarkRPVar("job") or "")) or team.GetName(ply:Team()))
    self.lblTeam:SizeToContents()
    self.lblTeam:SetPos(self:GetWide() / 2, 1)
end

function PANEL:Paint()
    if not IsValid(self:GetPlayer()) then self:Remove() return end

    local color = team.GetColor(self:GetPlayer():Team())
    color.a = self:GetSelected() and 70 or 255

    surface.SetDrawColor(color)
    surface.DrawRect(0, 0, self:GetWide(), 20)
end

vgui.Register("HitmanMenuPlayerRow", PANEL, "Button")

--[[---------------------------------------------------------------------------
Open the hit menu
---------------------------------------------------------------------------]]
function DarkRP.openHitMenu(hitman)
    local frame = vgui.Create("HitmanMenu")
    frame:SetHitman(hitman)
    frame:AddPlayerRows()
    frame:SetVisible(true)
    frame:MakePopup()
    frame:ParentToHUD()
end

--gamemodes/darkrp/gamemode/modules/fspectate/cl_init.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/doorsystem/sh_doors.lua:
local meta = FindMetaTable("Entity")
local plyMeta = FindMetaTable("Player")

local ownableDoors = {
    ["func_door"] = true,
    ["func_door_rotating"] = true,
    ["prop_door_rotating"] = true
}
local unOwnableDoors = {
    ["func_door"] = true,
    ["func_door_rotating"] = true,
    ["prop_door_rotating"] = true,
    ["func_movelinear"] = true,
    ["prop_dynamic"] = true
}
function meta:isKeysOwnable()
    if not IsValid(self) then return false end

    local class = self:GetClass()

    if (ownableDoors[class] or
            (GAMEMODE.Config.allowvehicleowning and self:IsVehicle() and (not IsValid(self:GetParent()) or not self:GetParent():IsVehicle()))) then
        return true
    end

    return false
end

function meta:isDoor()
    local class = self:GetClass()

    if unOwnableDoors[class] then
        return true
    end

    return false
end

function meta:isKeysOwned()
    if IsValid(self:getDoorOwner()) then return true end

    return false
end

function meta:getDoorOwner()
    local doorData = self:getDoorData()
    if not doorData then return nil end

    return doorData.owner and Player(doorData.owner) or nil
end

function meta:isMasterOwner(ply)
    return ply == self:getDoorOwner()
end

function meta:isKeysOwnedBy(ply)
    if self:isMasterOwner(ply) then return true end

    local coOwners = self:getKeysCoOwners()
    return coOwners and coOwners[ply:UserID()] or false
end

function meta:isKeysAllowedToOwn(ply)
    local doorData = self:getDoorData()
    if not doorData then return false end

    return doorData.allowedToOwn and doorData.allowedToOwn[ply:UserID()] or false
end

function meta:getKeysNonOwnable()
    local doorData = self:getDoorData()
    if not doorData then return nil end

    return doorData.nonOwnable
end

function meta:getKeysTitle()
    local doorData = self:getDoorData()
    if not doorData then return nil end

    return doorData.title
end

function meta:getKeysDoorGroup()
    local doorData = self:getDoorData()
    if not doorData then return nil end

    return doorData.groupOwn
end

function meta:getKeysDoorTeams()
    local doorData = self:getDoorData()
    if not doorData or table.IsEmpty(doorData.teamOwn or {}) then return nil end

    return doorData.teamOwn
end

function meta:getKeysAllowedToOwn()
    local doorData = self:getDoorData()
    if not doorData then return nil end

    return doorData.allowedToOwn
end

function meta:getKeysCoOwners()
    local doorData = self:getDoorData()
    if not doorData then return nil end

    return doorData.extraOwners
end

local function canLockUnlock(ply, ent)
    local Team = ply:Team()
    local group = ent:getKeysDoorGroup()
    local teamOwn = ent:getKeysDoorTeams()

    return ent:isKeysOwnedBy(ply)                                         or
        (group   and table.HasValue(RPExtraTeamDoors[group] or {}, Team)) or
        (teamOwn and teamOwn[Team])
end

function plyMeta:canKeysLock(ent)
    local canLock = hook.Run("canKeysLock", self, ent)

    if canLock ~= nil then return canLock end
    return canLockUnlock(self, ent)
end

function plyMeta:canKeysUnlock(ent)
    local canUnlock = hook.Run("canKeysUnlock", self, ent)

    if canUnlock ~= nil then return canUnlock end
    return canLockUnlock(self, ent)
end

local netDoorVars = {}
local netDoorVarsByName = {}

DarkRP.getDoorVars = fp{fn.Id, netDoorVars}
DarkRP.getDoorVarsByName = fp{fn.Id, netDoorVarsByName}

function DarkRP.registerDoorVar(name, writeFn, readFn)
    netDoorVarsByName[name] = {name = name, write = writeFn, read = readFn}

    netDoorVarsByName[name].id = table.insert(netDoorVars, netDoorVarsByName[name])
end

if SERVER then
    function DarkRP.writeNetDoorVar(name, value)
        local var = netDoorVarsByName[name]

        -- Not registered, send inefficiently
        if not var then
            net.WriteUInt(0, 8) -- indicate unregistered
            net.WriteString(name)
            net.WriteType(value)

            return
        end

        net.WriteUInt(var.id, 8)
        var.write(value)
    end
end

if CLIENT then
    function DarkRP.readNetDoorVar()
        local id = net.ReadUInt(8)

        -- unregistered var
        if id == 0 then
            return net.ReadString(), net.ReadType(net.ReadUInt(8))
        end

        if not netDoorVars[id] then
            DarkRP.error("Unregistered DarkRP Doorvar clientside: " .. id, 2, {"Some addon is registering some DoorVar serverside, but not clientside."})
        end

        return netDoorVars[id].name, netDoorVars[id].read()
    end
end

DarkRP.registerDoorVar("groupOwn",
    function(val)
        net.WriteUInt(RPExtraTeamDoorIDs[val], 16)
    end,
    function()
        local id = net.ReadUInt(16)
        for name, id2 in pairs(RPExtraTeamDoorIDs) do
            if id == id2 then return name end
        end
    end
)

-- Net helper function for writing tables with numbers as keys and bools as values
local function writeNumBoolTbl(tbl)
    net.WriteUInt(table.Count(tbl), 10)

    for num, _ in pairs(tbl) do
        net.WriteUInt(num, 16)
    end
end

-- Net helper function for reading tables with numbers as keys and bools as values
local function readNumBoolTbl(tbl)
    local res = {}
    local count = net.ReadUInt(10)

    for i = 1, count do
        res[net.ReadUInt(16)] = true
    end

    return res
end

DarkRP.registerDoorVar("owner", fp{fn.Flip(net.WriteInt), 16}, fp{net.ReadUInt, 16})
DarkRP.registerDoorVar("nonOwnable", net.WriteBool, net.ReadBool)
DarkRP.registerDoorVar("teamOwn", writeNumBoolTbl, readNumBoolTbl)
DarkRP.registerDoorVar("allowedToOwn", writeNumBoolTbl, readNumBoolTbl)
DarkRP.registerDoorVar("extraOwners", writeNumBoolTbl, readNumBoolTbl)
DarkRP.registerDoorVar("title", net.WriteString, net.ReadString)

--[[---------------------------------------------------------------------------
Commands
---------------------------------------------------------------------------]]
DarkRP.declareChatCommand{
    command = "toggleownable",
    description = "Toggle ownability status on this door.",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "togglegroupownable",
    description = "Set this door group ownable.",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "toggleteamownable",
    description = "Toggle this door ownable by a given team.",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "toggleown",
    description = "Own or unown the door you're looking at.",
    delay = 0.5
}

DarkRP.declareChatCommand{
    command = "unownalldoors",
    description = "Sell all of your doors.",
    delay = 1.5
}

DarkRP.chatCommandAlias("unownalldoors", "sellalldoors")

DarkRP.declareChatCommand{
    command = "title",
    description = "Set the title of the door you're looking at.",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "removeowner",
    description = "Remove an owner from the door you're looking at.",
    delay = 0.5
}

DarkRP.declareChatCommand{
    command = "ro",
    description = "Remove an owner from the door you're looking at.",
    delay = 0.5
}

DarkRP.declareChatCommand{
    command = "addowner",
    description = "Invite someone to co-own the door you're looking at.",
    delay = 0.5
}

DarkRP.declareChatCommand{
    command = "ao",
    description = "Invite someone to co-own the door you're looking at.",
    delay = 0.5
}

DarkRP.declareChatCommand{
    command = "forceunlock",
    description = "Force the door you're looking at to be unlocked. This is saved.",
    delay = 0.5
}

DarkRP.declareChatCommand{
    command = "forceremoveowner",
    description = "Forcefully remove an owner from the door you're looking at.",
    delay = 0.5
}

DarkRP.declareChatCommand{
    command = "forceunownall",
    description = "Force a player to unown all the doors and vehicles they have.",
    delay = 0.5,
    tableArgs = true
}

DarkRP.declareChatCommand{
    command = "forcelock",
    description = "Force the door you're looking at to be locked. This is saved.",
    delay = 0.5
}

DarkRP.declareChatCommand{
    command = "forceunown",
    description = "Forcefully remove any owners from the door you're looking at.",
    delay = 0.5
}

DarkRP.declareChatCommand{
    command = "forceown",
    description = "Forcefully make someone own the door you're looking at.",
    delay = 0.5
}

--gamemodes/darkrp/gamemode/modules/dermaskin/cl_dermaskin.lua:
-- Skin for DarkRP gui's
SKIN = {}

SKIN.PrintName          = "DarkRP"
SKIN.Author             = "FPtje Falco"
SKIN.DermaVersion       = 1
SKIN.GwenTexture        = Material("darkrp/darkrpderma.png")


SKIN.colTextEntryText               = color_white
SKIN.colTextEntryTextCursor         = color_white

SKIN.colTextEntryTextPlaceholder    = Color(200, 200, 200, 200) -- Unofficial but will probably be named this

SKIN.tex = {}

SKIN.tex.Selection                  = GWEN.CreateTextureBorder(384, 32, 31, 31, 4, 4, 4, 4)

SKIN.tex.Panels = {}
SKIN.tex.Panels.Normal              = GWEN.CreateTextureBorder(256, 0, 63, 63, 16, 16, 16, 16)
SKIN.tex.Panels.Bright              = GWEN.CreateTextureBorder(256 + 64, 0, 63, 63, 16, 16, 16, 16)
SKIN.tex.Panels.Dark                = GWEN.CreateTextureBorder(256, 64, 63, 63, 16, 16, 16, 16)
SKIN.tex.Panels.Highlight           = GWEN.CreateTextureBorder(256 + 64, 64, 63, 63, 16, 16, 16, 16)

SKIN.tex.Button                     = GWEN.CreateTextureBorder(480, 0, 31, 31, 8, 8, 8, 8)
SKIN.tex.Button_Hovered             = GWEN.CreateTextureBorder(480, 32, 31, 31, 8, 8, 8, 8)
SKIN.tex.Button_Dead                = GWEN.CreateTextureBorder(480, 64, 31, 31, 8, 8, 8, 8)
SKIN.tex.Button_Down                = GWEN.CreateTextureBorder(480, 96, 31, 31, 8, 8, 8, 8)
SKIN.tex.Shadow                     = GWEN.CreateTextureBorder(448, 0, 31, 31, 8, 8, 8, 8)

SKIN.tex.Tree                       = GWEN.CreateTextureBorder(256, 128, 127, 127, 16, 16, 16, 16)
SKIN.tex.Checkbox_Checked           = GWEN.CreateTextureNormal(448, 32, 15, 15)
SKIN.tex.Checkbox                   = GWEN.CreateTextureNormal(464, 32, 15, 15)
SKIN.tex.CheckboxD_Checked          = GWEN.CreateTextureNormal(448, 48, 15, 15)
SKIN.tex.CheckboxD                  = GWEN.CreateTextureNormal(464, 48, 15, 15)
--SKIN.tex.RadioButton_Checked      = GWEN.CreateTextureNormal(448, 64, 15, 15)
--SKIN.tex.RadioButton              = GWEN.CreateTextureNormal(464, 64, 15, 15)
--SKIN.tex.RadioButtonD_Checked     = GWEN.CreateTextureNormal(448, 80, 15, 15)
--SKIN.tex.RadioButtonD             = GWEN.CreateTextureNormal(464, 80, 15, 15)
SKIN.tex.TreePlus                   = GWEN.CreateTextureNormal(448, 96, 15, 15)
SKIN.tex.TreeMinus                  = GWEN.CreateTextureNormal(464, 96, 15, 15)
--SKIN.tex.Menu_Strip               = GWEN.CreateTextureBorder(0, 128, 127, 21, 1, 1, 1, 1)
SKIN.tex.TextBox                    = GWEN.CreateTextureBorder(0, 150, 127, 21, 4, 4, 4, 4)
SKIN.tex.TextBox_Focus              = GWEN.CreateTextureBorder(0, 172, 127, 21, 4, 4, 4, 4)
SKIN.tex.TextBox_Disabled           = GWEN.CreateTextureBorder(0, 193, 127, 21, 4, 4, 4, 4)
SKIN.tex.MenuBG_Margin              = GWEN.CreateTextureBorder(128, 128, 127, 63, 24, 8, 8, 8)
SKIN.tex.MenuBG                     = GWEN.CreateTextureBorder(128, 192, 127, 63, 8, 8, 8, 8)
SKIN.tex.MenuBG_Hover               = GWEN.CreateTextureBorder(128, 256, 127, 31, 8, 8, 8, 8)
SKIN.tex.MenuBG_Spacer              = GWEN.CreateTextureNormal(128, 288, 127, 3)
SKIN.tex.Tab_Control                = GWEN.CreateTextureBorder(0, 256, 127, 127, 8, 8, 8, 8)
SKIN.tex.TabB_Active                = GWEN.CreateTextureBorder(0, 416, 63, 31, 8, 8, 8, 8)
SKIN.tex.TabB_Inactive              = GWEN.CreateTextureBorder(0 + 128, 416, 63, 31, 8, 8, 8, 8)
SKIN.tex.TabT_Active                = GWEN.CreateTextureBorder(0, 384, 63, 31, 8, 8, 8, 8)
SKIN.tex.TabT_Inactive              = GWEN.CreateTextureBorder(0 + 128, 384, 63, 31, 8, 8, 8, 8)
SKIN.tex.TabL_Active                = GWEN.CreateTextureBorder(64, 384, 31, 63, 8, 8, 8, 8)
SKIN.tex.TabL_Inactive              = GWEN.CreateTextureBorder(64 + 128, 384, 31, 63, 8, 8, 8, 8)
SKIN.tex.TabR_Active                = GWEN.CreateTextureBorder(96, 384, 31, 63, 8, 8, 8, 8)
SKIN.tex.TabR_Inactive              = GWEN.CreateTextureBorder(96 + 128, 384, 31, 63, 8, 8, 8, 8)
SKIN.tex.Tab_Bar                    = GWEN.CreateTextureBorder(128, 352, 127, 31, 4, 4, 4, 4)

SKIN.tex.Window = {}

SKIN.tex.Window.Normal              = GWEN.CreateTextureBorder(0, 0, 127, 127, 8, 32, 8, 8)
SKIN.tex.Window.Inactive            = GWEN.CreateTextureBorder(128, 0, 127, 127, 8, 32, 8, 8)
SKIN.tex.Window.Close               = GWEN.CreateTextureNormal(0, 224, 24, 24)
SKIN.tex.Window.Close_Hover         = GWEN.CreateTextureNormal(32, 224, 24, 24)
SKIN.tex.Window.Close_Down          = GWEN.CreateTextureNormal(64, 224, 24, 24)
SKIN.tex.Window.Close_Disabled      = GWEN.CreateTextureNormal(96, 224, 24, 24)

SKIN.tex.Window.Maxi                = GWEN.CreateTextureNormal(32 + 96 * 2, 448, 31, 31)
SKIN.tex.Window.Maxi_Hover          = GWEN.CreateTextureNormal(64 + 96 * 2, 448, 31, 31)
SKIN.tex.Window.Maxi_Down           = GWEN.CreateTextureNormal(96 + 96 * 2, 448, 31, 31)

SKIN.tex.Window.Restore             = GWEN.CreateTextureNormal(32 + 96 * 2, 448 + 32, 31, 31)
SKIN.tex.Window.Restore_Hover       = GWEN.CreateTextureNormal(64 + 96 * 2, 448 + 32, 31, 31)
SKIN.tex.Window.Restore_Down        = GWEN.CreateTextureNormal(96 + 96 * 2, 448 + 32, 31, 31)

SKIN.tex.Window.Mini                = GWEN.CreateTextureNormal(32 + 96, 448, 31, 31)
SKIN.tex.Window.Mini_Hover          = GWEN.CreateTextureNormal(64 + 96, 448, 31, 31)
SKIN.tex.Window.Mini_Down           = GWEN.CreateTextureNormal(96 + 96, 448, 31, 31)

SKIN.tex.Scroller = {}
SKIN.tex.Scroller.TrackV                = GWEN.CreateTextureBorder(384, 208, 15, 127, 4, 4, 4, 4)
SKIN.tex.Scroller.ButtonV_Normal        = GWEN.CreateTextureBorder(384 + 16, 208, 15, 127, 4, 4, 4, 4)
SKIN.tex.Scroller.ButtonV_Hover         = GWEN.CreateTextureBorder(384 + 32, 208, 15, 127, 4, 4, 4, 4)
SKIN.tex.Scroller.ButtonV_Down          = GWEN.CreateTextureBorder(384 + 48, 208, 15, 127, 4, 4, 4, 4)
SKIN.tex.Scroller.ButtonV_Disabled      = GWEN.CreateTextureBorder(384 + 64, 208, 15, 127, 4, 4, 4, 4)

SKIN.tex.Scroller.TrackH                = GWEN.CreateTextureBorder(384, 128, 127, 15, 4, 4, 4, 4)
SKIN.tex.Scroller.ButtonH_Normal        = GWEN.CreateTextureBorder(384, 128 + 16, 127, 15, 4, 4, 4, 4)
SKIN.tex.Scroller.ButtonH_Hover         = GWEN.CreateTextureBorder(384, 128 + 32, 127, 15, 4, 4, 4, 4)
SKIN.tex.Scroller.ButtonH_Down          = GWEN.CreateTextureBorder(384, 128 + 48, 127, 15, 4, 4, 4, 4)
SKIN.tex.Scroller.ButtonH_Disabled      = GWEN.CreateTextureBorder(384, 128 + 64, 127, 15, 4, 4, 4, 4)

SKIN.tex.Scroller.LeftButton_Normal     = GWEN.CreateTextureBorder(464, 208, 15, 15, 2, 2, 2, 2)
SKIN.tex.Scroller.LeftButton_Hover      = GWEN.CreateTextureBorder(480, 208, 15, 15, 2, 2, 2, 2)
SKIN.tex.Scroller.LeftButton_Down       = GWEN.CreateTextureBorder(464, 272, 15, 15, 2, 2, 2, 2)
SKIN.tex.Scroller.LeftButton_Disabled   = GWEN.CreateTextureBorder(480 + 48, 272, 15, 15, 2, 2, 2, 2)

SKIN.tex.Scroller.UpButton_Normal       = GWEN.CreateTextureBorder(464, 208 + 16, 15, 15, 2, 2, 2, 2)
SKIN.tex.Scroller.UpButton_Hover        = GWEN.CreateTextureBorder(480, 208 + 16, 15, 15, 2, 2, 2, 2)
SKIN.tex.Scroller.UpButton_Down         = GWEN.CreateTextureBorder(464, 272 + 16, 15, 15, 2, 2, 2, 2)
SKIN.tex.Scroller.UpButton_Disabled     = GWEN.CreateTextureBorder(480 + 48, 272 + 16, 15, 15, 2, 2, 2, 2)

SKIN.tex.Scroller.RightButton_Normal    = GWEN.CreateTextureBorder(464, 208 + 32, 15, 15, 2, 2, 2, 2)
SKIN.tex.Scroller.RightButton_Hover     = GWEN.CreateTextureBorder(480, 208 + 32, 15, 15, 2, 2, 2, 2)
SKIN.tex.Scroller.RightButton_Down      = GWEN.CreateTextureBorder(464, 272 + 32, 15, 15, 2, 2, 2, 2)
SKIN.tex.Scroller.RightButton_Disabled  = GWEN.CreateTextureBorder(480 + 48, 272 + 32, 15, 15, 2, 2, 2, 2)

SKIN.tex.Scroller.DownButton_Normal     = GWEN.CreateTextureBorder(464, 208 + 48, 15, 15, 2, 2, 2, 2)
SKIN.tex.Scroller.DownButton_Hover      = GWEN.CreateTextureBorder(480, 208 + 48, 15, 15, 2, 2, 2, 2)
SKIN.tex.Scroller.DownButton_Down       = GWEN.CreateTextureBorder(464, 272 + 48, 15, 15, 2, 2, 2, 2)
SKIN.tex.Scroller.DownButton_Disabled   = GWEN.CreateTextureBorder(480 + 48, 272 + 48, 15, 15, 2, 2, 2, 2)

SKIN.tex.Menu = {}
SKIN.tex.Menu.RightArrow                = GWEN.CreateTextureNormal(464, 112, 15, 15)

SKIN.tex.Input = {}
SKIN.tex.Input.ListBox                  = GWEN.CreateTextureBorder(256, 256, 63, 127, 8, 8, 8, 8)

SKIN.tex.Input.ComboBox = {}
SKIN.tex.Input.ComboBox.Normal          = GWEN.CreateTextureBorder(384, 336, 127, 31, 8, 8, 32, 8)
SKIN.tex.Input.ComboBox.Hover           = GWEN.CreateTextureBorder(384, 336 + 32, 127, 31, 8, 8, 32, 8)
SKIN.tex.Input.ComboBox.Down            = GWEN.CreateTextureBorder(384, 336 + 64, 127, 31, 8, 8, 32, 8)
SKIN.tex.Input.ComboBox.Disabled        = GWEN.CreateTextureBorder(384, 336 + 96, 127, 31, 8, 8, 32, 8)

SKIN.tex.Input.ComboBox.Button = {}
SKIN.tex.Input.ComboBox.Button.Normal        = GWEN.CreateTextureNormal(496, 272, 15, 15)
SKIN.tex.Input.ComboBox.Button.Hover         = GWEN.CreateTextureNormal(496, 272 + 16, 15, 15)
SKIN.tex.Input.ComboBox.Button.Down          = GWEN.CreateTextureNormal(496, 272 + 32, 15, 15)
SKIN.tex.Input.ComboBox.Button.Disabled      = GWEN.CreateTextureNormal(496, 272 + 48, 15, 15)

SKIN.tex.Input.UpDown = {}
SKIN.tex.Input.UpDown.Up = {}
SKIN.tex.Input.UpDown.Up.Normal             = GWEN.CreateTextureCentered(384, 112, 7, 7)
SKIN.tex.Input.UpDown.Up.Hover              = GWEN.CreateTextureCentered(384 + 8, 112, 7, 7)
SKIN.tex.Input.UpDown.Up.Down               = GWEN.CreateTextureCentered(384 + 16, 112, 7, 7)
SKIN.tex.Input.UpDown.Up.Disabled           = GWEN.CreateTextureCentered(384 + 24, 112, 7, 7)

SKIN.tex.Input.UpDown.Down = {}
SKIN.tex.Input.UpDown.Down.Normal           = GWEN.CreateTextureCentered(384, 120, 7, 7)
SKIN.tex.Input.UpDown.Down.Hover            = GWEN.CreateTextureCentered(384 + 8, 120, 7, 7)
SKIN.tex.Input.UpDown.Down.Down             = GWEN.CreateTextureCentered(384 + 16, 120, 7, 7)
SKIN.tex.Input.UpDown.Down.Disabled         = GWEN.CreateTextureCentered(384 + 24, 120, 7, 7)

SKIN.tex.Input.Slider = {}
SKIN.tex.Input.Slider.H = {}
SKIN.tex.Input.Slider.H.Normal          = GWEN.CreateTextureNormal(416, 32, 15, 15)
SKIN.tex.Input.Slider.H.Hover           = GWEN.CreateTextureNormal(416, 32 + 16, 15, 15)
SKIN.tex.Input.Slider.H.Down            = GWEN.CreateTextureNormal(416, 32 + 32, 15, 15)
SKIN.tex.Input.Slider.H.Disabled        = GWEN.CreateTextureNormal(416, 32 + 48, 15, 15)

SKIN.tex.Input.Slider.V = {}
SKIN.tex.Input.Slider.V.Normal          = GWEN.CreateTextureNormal(416 + 16, 32, 15, 15)
SKIN.tex.Input.Slider.V.Hover           = GWEN.CreateTextureNormal(416 + 16, 32 + 16, 15, 15)
SKIN.tex.Input.Slider.V.Down            = GWEN.CreateTextureNormal(416 + 16, 32 + 32, 15, 15)
SKIN.tex.Input.Slider.V.Disabled        = GWEN.CreateTextureNormal(416 + 16, 32 + 48, 15, 15)

SKIN.tex.Input.ListBox = {}
SKIN.tex.Input.ListBox.Background           = GWEN.CreateTextureBorder(256, 256, 63, 127, 8, 8, 8, 8)
SKIN.tex.Input.ListBox.Hovered          = GWEN.CreateTextureBorder(320, 320, 31, 31, 8, 8, 8, 8)
SKIN.tex.Input.ListBox.EvenLine         = GWEN.CreateTextureBorder(352, 256, 31, 31, 8, 8, 8, 8)
SKIN.tex.Input.ListBox.OddLine          = GWEN.CreateTextureBorder(352, 288, 31, 31, 8, 8, 8, 8)
SKIN.tex.Input.ListBox.EvenLineSelected         = GWEN.CreateTextureBorder(320, 270, 31, 31, 8, 8, 8, 8)
SKIN.tex.Input.ListBox.OddLineSelected          = GWEN.CreateTextureBorder(320, 288, 31, 31, 8, 8, 8, 8)

SKIN.tex.ProgressBar = {}
SKIN.tex.ProgressBar.Back       = GWEN.CreateTextureBorder(384, 0, 31, 31, 8, 8, 8, 8)
SKIN.tex.ProgressBar.Front      = GWEN.CreateTextureBorder(384 + 32, 0, 31, 31, 8, 8, 8, 8)


SKIN.tex.CategoryList = {}
SKIN.tex.CategoryList.Outer     = GWEN.CreateTextureBorder(256, 384, 63, 63, 8, 8, 8, 8)
SKIN.tex.CategoryList.Inner     = GWEN.CreateTextureBorder(256 + 64, 384, 63, 63, 8, 21, 8, 8)
SKIN.tex.CategoryList.Header    = GWEN.CreateTextureBorder(320, 352, 63, 31, 8, 8, 8, 8)

SKIN.tex.Tooltip                = GWEN.CreateTextureBorder(384, 64, 31, 31, 8, 8, 8, 8)

SKIN.Colours = {}

SKIN.Colours.Window = {}
SKIN.Colours.Window.TitleActive         = GWEN.TextureColor(4 + 8 * 0, 508)
SKIN.Colours.Window.TitleInactive       = GWEN.TextureColor(4 + 8 * 1, 508)

SKIN.Colours.Button = {}
SKIN.Colours.Button.Normal              = GWEN.TextureColor(4 + 8 * 2, 508)
SKIN.Colours.Button.Hover               = GWEN.TextureColor(4 + 8 * 3, 508)
SKIN.Colours.Button.Down                = GWEN.TextureColor(4 + 8 * 2, 500)
SKIN.Colours.Button.Disabled            = GWEN.TextureColor(4 + 8 * 3, 500)

SKIN.Colours.Tab = {}
SKIN.Colours.Tab.Active = {}
SKIN.Colours.Tab.Active.Normal          = GWEN.TextureColor(4 + 8 * 4, 508)
SKIN.Colours.Tab.Active.Hover           = GWEN.TextureColor(4 + 8 * 5, 508)
SKIN.Colours.Tab.Active.Down            = GWEN.TextureColor(4 + 8 * 4, 500)
SKIN.Colours.Tab.Active.Disabled        = GWEN.TextureColor(4 + 8 * 5, 500)

SKIN.Colours.Tab.Inactive = {}
SKIN.Colours.Tab.Inactive.Normal        = GWEN.TextureColor(4 + 8 * 6, 508)
SKIN.Colours.Tab.Inactive.Hover         = GWEN.TextureColor(4 + 8 * 7, 508)
SKIN.Colours.Tab.Inactive.Down          = GWEN.TextureColor(4 + 8 * 6, 500)
SKIN.Colours.Tab.Inactive.Disabled      = GWEN.TextureColor(4 + 8 * 7, 500)

SKIN.Colours.Label = {}
SKIN.Colours.Label.Default              = GWEN.TextureColor(4 + 8 * 8, 508)
SKIN.Colours.Label.Bright               = GWEN.TextureColor(4 + 8 * 9, 508)
SKIN.Colours.Label.Dark                 = GWEN.TextureColor(4 + 8 * 8, 500)
SKIN.Colours.Label.Highlight            = GWEN.TextureColor(4 + 8 * 9, 500)

SKIN.Colours.Tree = {}
SKIN.Colours.Tree.Lines                 = GWEN.TextureColor(4 + 8 * 10, 508)
---- !!!
SKIN.Colours.Tree.Normal                = GWEN.TextureColor(4 + 8 * 11, 508)
SKIN.Colours.Tree.Hover                 = GWEN.TextureColor(4 + 8 * 10, 500)
SKIN.Colours.Tree.Selected              = GWEN.TextureColor(4 + 8 * 11, 500)

SKIN.Colours.Properties = {}
SKIN.Colours.Properties.Line_Normal         = GWEN.TextureColor(4 + 8 * 12, 508)
SKIN.Colours.Properties.Line_Selected       = GWEN.TextureColor(4 + 8 * 13, 508)
SKIN.Colours.Properties.Line_Hover          = GWEN.TextureColor(4 + 8 * 12, 500)
SKIN.Colours.Properties.Title               = GWEN.TextureColor(4 + 8 * 13, 500)
SKIN.Colours.Properties.Column_Normal       = GWEN.TextureColor(4 + 8 * 14, 508)
SKIN.Colours.Properties.Column_Selected     = GWEN.TextureColor(4 + 8 * 15, 508)
SKIN.Colours.Properties.Column_Hover        = GWEN.TextureColor(4 + 8 * 14, 500)
SKIN.Colours.Properties.Border              = GWEN.TextureColor(4 + 8 * 15, 500)
SKIN.Colours.Properties.Label_Normal        = GWEN.TextureColor(4 + 8 * 16, 508)
SKIN.Colours.Properties.Label_Selected      = GWEN.TextureColor(4 + 8 * 17, 508)
SKIN.Colours.Properties.Label_Hover         = GWEN.TextureColor(4 + 8 * 16, 500)

SKIN.Colours.Category = {}
SKIN.Colours.Category.Header                = GWEN.TextureColor(4 + 8 * 18, 500)
SKIN.Colours.Category.Header_Closed         = GWEN.TextureColor(4 + 8 * 19, 500)
SKIN.Colours.Category.Line = {}
SKIN.Colours.Category.Line.Text             = GWEN.TextureColor(4 + 8 * 20, 508)
SKIN.Colours.Category.Line.Text_Hover       = GWEN.TextureColor(4 + 8 * 21, 508)
SKIN.Colours.Category.Line.Text_Selected    = GWEN.TextureColor(4 + 8 * 20, 500)
SKIN.Colours.Category.Line.Button           = GWEN.TextureColor(4 + 8 * 21, 500)
SKIN.Colours.Category.Line.Button_Hover     = GWEN.TextureColor(4 + 8 * 22, 508)
SKIN.Colours.Category.Line.Button_Selected  = GWEN.TextureColor(4 + 8 * 23, 508)
SKIN.Colours.Category.LineAlt = {}
SKIN.Colours.Category.LineAlt.Text              = GWEN.TextureColor(4 + 8 * 22, 500)
SKIN.Colours.Category.LineAlt.Text_Hover        = GWEN.TextureColor(4 + 8 * 23, 500)
SKIN.Colours.Category.LineAlt.Text_Selected     = GWEN.TextureColor(4 + 8 * 24, 508)
SKIN.Colours.Category.LineAlt.Button            = GWEN.TextureColor(4 + 8 * 25, 508)
SKIN.Colours.Category.LineAlt.Button_Hover      = GWEN.TextureColor(4 + 8 * 24, 500)
SKIN.Colours.Category.LineAlt.Button_Selected   = GWEN.TextureColor(4 + 8 * 25, 500)

derma.DefineSkin("DarkRP", "The official SKIN for DarkRP", SKIN)

--gamemodes/darkrp/gamemode/modules/base/sh_util.lua:
--[[---------------------------------------------------------------------------
Utility functions
---------------------------------------------------------------------------]]

local vector = FindMetaTable("Vector")
local meta = FindMetaTable("Player")

--[[---------------------------------------------------------------------------
Decides whether the vector could be seen by the player if they were to look at it
---------------------------------------------------------------------------]]
function vector:isInSight(filter, ply)
    ply = ply or LocalPlayer()
    local trace = {}
    trace.start = ply:EyePos()
    trace.endpos = self
    trace.filter = filter
    trace.mask = -1
    local TheTrace = util.TraceLine(trace)

    return not TheTrace.Hit, TheTrace.HitPos
end

--[[---------------------------------------------------------------------------
Turn a money amount into a pretty string
---------------------------------------------------------------------------]]
local function attachCurrency(str)
    local config = GAMEMODE.Config
    return config.currencyLeft and config.currency .. str or str .. config.currency
end

function DarkRP.formatMoney(n)
    if not n then return attachCurrency("0") end

    if n >= 1e14 then return attachCurrency(tostring(n)) end
    if n <= -1e14 then return "-" .. attachCurrency(tostring(math.abs(n))) end

    local config = GAMEMODE.Config

    local negative = n < 0

    n = tostring(math.abs(n))

    local dp = string.find(n, ".", 1, true) or #n + 1

    for i = dp - 4, 1, -3 do
        n = n:sub(1, i) .. config.currencyThousandSeparator .. n:sub(i + 1)
    end

    -- Make sure the amount is padded with zeroes
    if n[#n - 1] == "." then
        n = n .. "0"
    end

    return (negative and "-" or "") .. attachCurrency(n)
end

--[[---------------------------------------------------------------------------
Find a player based on given information

Note that there is a searching priority:
  * UserID
  * SteamID64
  * SteamID
  * Nick
  * SteamName

Note also that there are _separate_ loops. This is to make sure the function
gives the same result, regardless of the order in which players are iterated
over.
---------------------------------------------------------------------------]]
function DarkRP.findPlayer(info)
    if not info or info == "" then return nil end
    local pls = player.GetAll()

    local count = #pls
    local numberInfo = tonumber(info)

    -- First check if the input matches a player by UserID or SteamID64. This is
    -- only necessary if the input can be parsed as a number.
    if numberInfo then
        for k = 1, count do
            local v = pls[k]

            if numberInfo == v:UserID() then
                return v
            end
        end

        for k = 1, count do
            local v = pls[k]

            if info == v:SteamID64() then
                return v
            end
        end
    end

    local lowerInfo = string.lower(tostring(info))
    if string.StartsWith(lowerInfo, "steam_") then
        for k = 1, count do
            local v = pls[k]

            if info == v:SteamID() then
                return v
            end
        end
    end

    for k = 1, count do
        local v = pls[k]

        if string.find(string.lower(v:Nick()), lowerInfo, 1, true) ~= nil then
            return v
        end
    end

    for k = 1, count do
        local v = pls[k]

        if string.find(string.lower(v:SteamName()), lowerInfo, 1, true) ~= nil then
            return v
        end
    end

    return nil
end

--[[---------------------------------------------------------------------------
Find multiple players based on a string criterium
Taken from FAdmin]]
---------------------------------------------------------------------------*/
function DarkRP.findPlayers(info)
    if not info then return nil end
    local pls = player.GetAll()
    local found = {}
    local players

    if string.lower(info) == "*" or string.lower(info) == "<all>" then return pls end

    local InfoPlayers = {}
    for A in string.gmatch(info .. ";", "([a-zA-Z0-9:_.]*)[;(,%s)%c]") do
        if A ~= "" then
            table.insert(InfoPlayers, A)
        end
    end

    for _, PlayerInfo in ipairs(InfoPlayers) do
        -- Playerinfo is always to be treated as UserID when it's a number
        -- otherwise people with numbers in their names could get confused with UserID's of other players
        if tonumber(PlayerInfo) then
            local foundPlayer = Player(PlayerInfo)
            if IsValid(foundPlayer) and not found[foundPlayer] then
                found[foundPlayer] = true
                players = players or {}
                table.insert(players, foundPlayer)
            end
            continue
        end

        local stringPlayerInfo = string.lower(PlayerInfo)
        for _, v in ipairs(pls) do
            -- Prevent duplicates
            if found[v] then continue end
            local steamId = v:SteamID()

            -- Find by Steam ID
            if (PlayerInfo == steamId or steamId == "UNKNOWN") or
            -- Find by Partial Nick
            string.find(string.lower(v:Nick()), stringPlayerInfo, 1, true) ~= nil or
            -- Find by steam name
            (v.SteamName and string.find(string.lower(v:SteamName()), stringPlayerInfo, 1, true) ~= nil) then
                found[v] = true
                players = players or {}
                table.insert(players, v)
            end
        end
    end

    return players
end

function meta:getEyeSightHitEntity(searchDistance, hitDistance, filter)
    searchDistance = searchDistance or 100
    hitDistance = (hitDistance or 15) * (hitDistance or 15)

    filter = filter or function(p) return p:IsPlayer() and p ~= self end

    self:LagCompensation(true)

    local shootPos = self:GetShootPos()
    local entities = ents.FindInSphere(shootPos, searchDistance)
    local aimvec = self:GetAimVector()

    local smallestDistance = math.huge
    local foundEnt

    for _, ent in pairs(entities) do
        if not IsValid(ent) or filter(ent) == false then continue end

        local center = ent:GetPos()

        -- project the center vector on the aim vector
        local projected = shootPos + (center - shootPos):Dot(aimvec) * aimvec

        if aimvec:Dot((projected - shootPos):GetNormalized()) < 0 then continue end

        -- the point on the model that has the smallest distance to your line of sight
        local nearestPoint = ent:NearestPoint(projected)
        local distance = nearestPoint:DistToSqr(projected)

        if distance < smallestDistance then
            local trace = {
                start = self:GetShootPos(),
                endpos = nearestPoint,
                filter = {self, ent}
            }
            local traceLine = util.TraceLine(trace)
            if traceLine.Hit then continue end

            smallestDistance = distance
            foundEnt = ent
        end
    end

    self:LagCompensation(false)

    if smallestDistance < hitDistance then
        return foundEnt, math.sqrt(smallestDistance)
    end

    return nil
end

--[[---------------------------------------------------------------------------
Print the currently available vehicles
---------------------------------------------------------------------------]]
local function GetAvailableVehicles(ply)
    if SERVER and IsValid(ply) and not ply:IsAdmin() then return end
    local print = SERVER and ServerLog or Msg

    print(DarkRP.getPhrase("rp_getvehicles") .. "\n")
    for k in pairs(DarkRP.getAvailableVehicles()) do
        print("\"" .. k .. "\"" .. "\n")
    end
end
if SERVER then
    concommand.Add("rp_getvehicles_sv", GetAvailableVehicles)
else
    concommand.Add("rp_getvehicles", GetAvailableVehicles)
end

--[[---------------------------------------------------------------------------
Whether a player has a DarkRP privilege
---------------------------------------------------------------------------]]
function meta:hasDarkRPPrivilege(priv)
    if FAdmin then
        return FAdmin.Access.PlayerHasPrivilege(self, priv)
    end
    return self:IsAdmin()
end

--[[---------------------------------------------------------------------------
Convenience function to return the players sorted by name
---------------------------------------------------------------------------]]
function DarkRP.nickSortedPlayers()
    local plys = player.GetAll()
    table.sort(plys, function(a,b) return a:Nick() < b:Nick() end)
    return plys
end

--[[---------------------------------------------------------------------------
Convert a string to a table of arguments
---------------------------------------------------------------------------]]
local bitlshift, stringgmatch, stringsub, tableinsert = bit.lshift, string.gmatch, string.sub, table.insert
function DarkRP.explodeArg(arg)
    local args = {}

    local from, to, diff = 1, 0, 0
    local inQuotes, wasQuotes = false, false

    for c in stringgmatch(arg, '.') do
        to = to + 1

        if c == '"' then
            inQuotes = not inQuotes
            wasQuotes = true

            continue
        end

        if c == ' ' and not inQuotes then
            diff = wasQuotes and 1 or 0
            wasQuotes = false
            tableinsert(args, stringsub(arg, from + diff, to - 1 - diff))
            from = to + 1
        end
    end
    diff = wasQuotes and 1 or 0

    if from ~= to + 1 then tableinsert(args, stringsub(arg, from + diff, to + 1 - bitlshift(diff, 1))) end

    return args
end

--[[---------------------------------------------------------------------------
Initialize Physics, throw an error on failure
---------------------------------------------------------------------------]]
function DarkRP.ValidatedPhysicsInit(ent, solidType, hint)
    solidType = solidType or SOLID_VPHYSICS

    if ent:PhysicsInit(solidType) then return true end

    local class = ent:GetClass()

    if solidType == SOLID_BSP then
        DarkRP.errorNoHalt(string.format("%s has no physics and will be motionless", class), 2, {
            "Is this a brush model? SOLID_BSP physics cannot initialize on entities that don't have brush models",
            "The physics limit may have been hit",
            hint
        })

        return false
    end

    if solidType == SOLID_VPHYSICS then
        local mdl = ent:GetModel()

        if not mdl or mdl == "" then
            DarkRP.errorNoHalt(string.format("Cannot init physics on entity \"%s\" because it has no model", class), 2, {hint})
            return false
        end

        mdl = string.lower(mdl)

        if util.IsValidProp(mdl) then
            -- Has physics, we must have hit the limit
            DarkRP.errorNoHalt(string.format("physics limit hit - %s will be motionless", class), 2, {hint})

            return false
        end

        if not file.Exists(mdl, "GAME") then
            DarkRP.errorNoHalt(string.format("%s has missing model \"%s\" and will be invisible and motionless", class, mdl), 2, {
                "Is the model path correct?",
                "Is the model from an addon that is not installed?",
                "Is the model from a game that isn't (properly) mounted? E.g. Counter Strike: Source",
                hint
            })

            return false
        end

        DarkRP.errorNoHalt(string.format("%s has model \"%s\" with no physics and will be motionless", class, mdl), 2, {
            "Does this model have an associated physics model (modelname.phy)?",
            "Is this model supposed to have physics? Many models, like effects and view models aren't made to have physics",
            hint
        })

        return false
    end

    DarkRP.errorNoHalt(string.format("Unable to initilize physics on entity \"%s\"", class, {hint}), 2)

    return false
end

--[[---------------------------------------------------------------------------
Like tonumber, but makes sure it's an integer
---------------------------------------------------------------------------]]
function DarkRP.toInt(value)
    value = tonumber(value)
    return value and math.floor(value)
end

--[[-------------------------------------------------------------------------
Check the database for integrity errors. Use in cases when stuff doesn't load
on restart, or you get corruption errors.
---------------------------------------------------------------------------]]
if SERVER then util.AddNetworkString("DarkRP_databaseCheckMessage") end
if CLIENT then net.Receive("DarkRP_databaseCheckMessage", fc{print, net.ReadString}) end

local function checkDatabase(ply)
    local dbFile = SERVER and "sv.db" or "cl.db"
    local display = (CLIENT or ply == game.GetWorld()) and print or function(msg)
            net.Start("DarkRP_databaseCheckMessage")
            net.WriteString(msg)
            net.Send(ply)
        end



    if MySQLite and MySQLite.isMySQL() then
        display(string.format([[WARNING: DarkRP is using MySQL. This only
    checks the local SQLite database stored in the %s file in the
    garrysmod/ folder. The check will continue.]], dbFile))
    end

    local check = sql.QueryValue("PRAGMA INTEGRITY_CHECK")
    if check == false then
        display([[The query to check the database failed. Shit's surely
    fucked, but the cause is unknown.]])
        return
    end

    if check == "ok" then
        display(string.format("Your %s database file is good.", dbFile))
        return
    end

    display(string.format([[There are errors in your %s database file. It's corrupt!

    This can cause the following problems:
    - Data not loading, think of blocked models, doors, players' money and RP names
    - Settings resetting to their default values
    - Lua errors on startup

    The cause of the problem is that the %s file in your garrysmod/ folder on
    %s is corrupt. How this came to be is unknown, but here's what you can do to solve it:

    - Delete %s, and run a file integrity check. Warning: You will lose ALL data stored in it!
    - Take the file and try to repair it. This is sadly something that requires some technical knowledge,
      and may not always succeed.

    The specific error, by the way, is as follows:
    %s
    ]], dbFile, dbFile, SERVER and "the server" or "your own computer", dbFile, check))

end
concommand.Add("darkrp_check_db_" .. (SERVER and "sv" or "cl"), checkDatabase)

--gamemodes/darkrp/gamemode/modules/base/cl_drawfunctions.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/localization/sh_glorifiedleveling_french.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/adminpanel/cl_glorifiedleveling_adminnavbar.lua:

local PANEL = {}

function PANEL:Init()
    self.Theme = self:GetParent().Theme

    self.Buttons = {}
    self.SelectedTab = 0
end

function PANEL:PerformLayout(w, h)
    surface.SetFont( "GlorifiedLeveling.AdminMenu.NavbarItem" )

    for k,v in ipairs(self.Buttons) do
        v:SetSize( ( v.Text == "X" and w * 0.055 ) or ( v.Text == "LOCK" and surface.GetTextSize( GlorifiedLeveling.i18n.GetPhrase("glAdminMenuLockdown" ) ) + w * 0.06 ) or surface.GetTextSize( v.Text ) + w * 0.06, h )
        v:Dock( v.DockType )
    end
end

local lerp = Lerp

function PANEL:AddItem( name, dockType, onClick )
    local button = vgui.Create( "DButton", self )
    button.Text = name
    button.DockType = dockType

    local btnID = #self.Buttons + 1
    button.DoClick = function(s  )
        if self:SelectTab( btnID ) then return end
        onClick(s)
    end

    button:SetText( "" )
    button.Color = self.Theme.Data.Colors.adminMenuNavbarItemCol

    if name == "X" then
        button.Paint = function( s, w, h )
            local iconSize = h * .4

            s.Color = GlorifiedLeveling.UI.LerpColor( FrameTime() * 5, s.Color, s:IsHovered() and self.Theme.Data.Colors.adminMenuCloseButtonHoverCol or self.Theme.Data.Colors.adminMenuCloseButtonCol )

            surface.SetDrawColor( s.Color )
            surface.SetMaterial( self.Theme.Data.Materials.close )
            surface.DrawTexturedRect( w / 2 - iconSize / 2, h / 2 - iconSize / 2, iconSize, iconSize )
         end
    elseif name == "LOCK" then
        button.Paint = function( s, w, h )
            local lockdown = self:GetParent().LockdownMode
            s.Color = GlorifiedLeveling.UI.LerpColor( FrameTime() * 5, s.Color, lockdown and self.Theme.Data.Colors.adminMenuNavbarLockdownCol or self.Theme.Data.Colors.adminMenuNavbarItemCol )

            draw.SimpleText( GlorifiedLeveling.i18n.GetPhrase( "glAdminMenuLockdown" ), "GlorifiedLeveling.AdminMenu.NavbarItem", w / 2, h / 2, lockdown and ColorAlpha( s.Color, math.abs( math.sin( CurTime() ) ) * 255 ) or s.Color, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        end
    else
        button.UnderlineY = 0

        button.Paint = function( s, w, h )
            local underlineh = math.Round(h * .06)

            s.UnderlineY = lerp( FrameTime() * 13, s.UnderlineY, ( button.Selected or s:IsHovered() ) and 0 or underlineh )
            s.Color = GlorifiedLeveling.UI.LerpColor( FrameTime() * 5, s.Color, button.Selected and self.Theme.Data.Colors.adminMenuNavbarSelectedItemCol or self.Theme.Data.Colors.adminMenuNavbarItemCol )

            local underliney = math.Round( h - underlineh + s.UnderlineY )

            surface.SetDrawColor( s.Color )
            surface.DrawRect( 0, underliney, w, underlineh )

            draw.SimpleText( s.Text, "GlorifiedLeveling.AdminMenu.NavbarItem", w / 2, underliney / 2, s.Color, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        end
    end

    self.Buttons[btnID] = button
end

function PANEL:SelectTab( id )
    if self.SelectedTab == id then return true end
    if not self.Buttons[id] then return true end
    if self.Buttons[id].Text == "LOCK" then return false end

    for k,v in ipairs(self.Buttons) do
        v.Selected = k == id
    end

    self.SelectedTab = id
end

function PANEL:Paint(w, h)
    draw.RoundedBoxEx( 6, 0, 0, w, h, self.Theme.Data.Colors.adminMenuNavbarBackgroundCol, true, true, false, false )
end

vgui.Register( "GlorifiedLeveling.AdminNavbar", PANEL, "Panel" )
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/perkmenu/cl_glorifiedleveling_perkmenu_titlebar.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/perkmenu/cl_glorifiedleveling_perkmenu_titlebar.lua:

local PANEL = {}

function PANEL:Init()
    local parent = self:GetParent()
    self.Theme = parent.Theme
    local theme = self.Theme

    self.TitleLabel = vgui.Create( "DLabel", self )
    self.TitleLabel:SetFont( "GlorifiedLeveling.PerkMenu.TitleBar" )
    self.TitleLabel:SetText( GlorifiedLeveling.i18n.GetPhrase( "glSkills" ) .. " » " )
    self.TitleLabel:SizeToContents()
    self.TitleLabel:Dock( LEFT )
    self.TitleLabel:DockMargin( self:GetTall() / 1.3, 0, 0, 0 )

    self.FreePointsLabel = vgui.Create( "DLabel", self )
    self.FreePointsLabel:SetFont( "GlorifiedLeveling.PerkMenu.TitleBar" )
    self.FreePointsLabel.FreePointsChanged = function()
        self.FreePointsLabel:SetText( GlorifiedLeveling.i18n.GetPhrase( "glPoints", parent.CachedFreePoints ) )
        self.FreePointsLabel:SetTextColor( parent.CachedFreePoints > 0 and theme.Data.Colors.perkMenuFreePointsColor or theme.Data.Colors.perkMenuNoFreePointsColor )
        self.FreePointsLabel:SizeToContents()
    end
    self.FreePointsLabel:Dock( LEFT )
    self.FreePointsLabel.FreePointsChanged()

    self.CloseButton = vgui.Create( "DButton", self )
    self.CloseButton:SetText( "" )
    self.CloseButton:Dock( RIGHT )
    self.CloseButton.DoClick = GlorifiedLeveling.UI.ClosePerkMenu
end

function PANEL:PerformLayout( w, h )
    self.CloseButton:SetSize( w * 0.085, h )
    self.CloseButton.Paint = function( closeButton, closeButtonW, closeButtonH )
        local iconSize = closeButtonH * 0.4
        if not closeButton.Color then closeButton.Color = self.Theme.Data.Colors.perkMenuCloseButtonBackgroundColor end
        closeButton.Color = GlorifiedLeveling.UI.LerpColor( FrameTime() * 5, closeButton.Color, closeButton:IsHovered() and self.Theme.Data.Colors.perkMenuCloseButtonHoverColor or self.Theme.Data.Colors.perkMenuCloseButtonBackgroundColor )
        surface.SetDrawColor( closeButton.Color )
        surface.SetMaterial( self.Theme.Data.Materials.close )
        surface.DrawTexturedRect( closeButtonW / 2 - iconSize / 2, closeButtonH / 2 - iconSize / 2, iconSize, iconSize )
    end
end

function PANEL:Paint( w, h )
    draw.RoundedBoxEx( 6, 0, 0, w, h, self.Theme.Data.Colors.perkMenuTitleBarBackgroundColor, true, true, false, false )
end

vgui.Register( "GlorifiedLeveling.PerkMenu.TitleBar", PANEL, "Panel" )
--addons/zeros_methlab_1.6.4/lua/darkrp_modules/zmlab/sh_zmlab_darkrp.lua:
TEAM_ZMLAB_COOK = DarkRP.createJob("Meth Üreticisi", {
	color = Color(255, 0, 0),
	model = {"models/player/group03/male_04.mdl"},
	description = [[Kimya senin işin ve tehlikeli maddelerle uğraşmaktan çekinmiyorsun.
     Laboratuvarını kur, malzemeleri topla ve yüksek saflıkta meth üret. 
     Ancak dikkatli ol! Polisler, rakip çeteler ve hata yaparsan patlayabilecek tehlikeli kimyasallar seni bekliyor!.
     
    -İllegal Aktivitelerde Bulunabilir
    -Raid Atamaz 
	-Mug Atamaz
	-Banka Soyamaz
     ]],
	weapons = {"zmlab_extractor"},
	command = "zmlab_MethCook",
	max = 6,
	salary = 0,
	admin = 0,
	vote = false,
	category = "İllegal",
	hasLicense = false
})

DarkRP.createCategory{
    name = "Meth Üreticisi", -- Kategori adı
    categorises = "entities", -- Kategorilendirilen tür (varlıklar)
    startExpanded = true, -- Varsayılan olarak açık mı?
    color = Color(0, 107, 0, 255), -- Kategorinin rengi (yeşil)
    canSee = function(ply) return true end, -- Kategoriyi kimler görebilir (herkes)
    sortOrder = 103 -- Sıralama önceliği
}

DarkRP.createEntity("Karıştırıcı", { -- Varlık adı
    ent = "zmlab_combiner", -- Varlık sınıfı
    model = "models/zerochain/zmlab/zmlab_combiner.mdl", -- Model yolu
    price = 60000, -- Fiyatı
    max = 1, -- Maksimum satın alma sınırı
    cmd = "buycombiner_zmlab", -- Konsol komutu
    allowed = TEAM_ZMLAB_COOK, -- İzin verilen meslek (zmlab üreticisi)
    category = "Meth Üreticisi" -- Bulunduğu kategori
})

DarkRP.createEntity("Gaz Filtresi", {
    ent = "zmlab_filter",
    model = "models/zerochain/zmlab/zmlab_filter.mdl",
    price = 10000,
    max = 2,
    cmd = "buyfilter_zmlab",
    allowed = TEAM_ZMLAB_COOK,
    category = "Meth Üreticisi"
})

DarkRP.createEntity("Dondurucu", {
    ent = "zmlab_frezzer",
    model = "models/zerochain/zmlab/zmlab_frezzer.mdl",
    price = 5000,
    max = 2,
    cmd = "buyfrezzer_zmlab",
    allowed = TEAM_ZMLAB_COOK,
    category = "Meth Üreticisi"
})

DarkRP.createEntity("Taşıma Sandığı", {
    ent = "zmlab_collectcrate",
    model = "models/zerochain/zmlab/zmlab_transportcrate.mdl",
    price = 550,
    max = 5,
    cmd = "buycollectcrate_zmlab",
    allowed = TEAM_ZMLAB_COOK,
    category = "Meth Üreticisi"
})

DarkRP.createEntity("Metilamin", {
    ent = "zmlab_methylamin",
    model = "models/zerochain/zmlab/zmlab_methylamin.mdl",
    price = 1500,
    max = 6,
    cmd = "buymethylamin_zmlab",
    allowed = TEAM_ZMLAB_COOK,
    category = "Meth Üreticisi"
})

DarkRP.createEntity("Alüminyum", {
    ent = "zmlab_aluminium",
    model = "models/zerochain/zmlab/zmlab_aluminiumbox.mdl",
    price = 500,
    max = 6,
    cmd = "buyaluminium_zmlab",
    allowed = TEAM_ZMLAB_COOK,
    category = "Meth Üreticisi"
})



--addons/zeros_growop2_v1.6.1/lua/darkrp_modules/zgo2/sh_zgo2_darkrp.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/


/*

	Here we setup all the DarkRP Jobs

*/
TEAM_ZGO2_AMATEUR = DarkRP.createJob("Amatör Ot Üreticisi", {
	color = Color(255, 0, 0, 255),
	model = {"models/player/group03/male_06.mdl"},
	description = [[Bu işe yeni başlamış, küçük çaplı üretim yapan bir ot yetiştiricisisin. 
	Şehirde pek tanınmıyorsun, ama para kazanmak için elinden geleni yapıyorsun. Dikkatli ol, polisler her yerde!
	
	-İllegal Aktivitelerde Bulunabilir
	-Raid Atamaz 
	-Mug Atamaz
	-Banka Soyamaz
	]],
	weapons = {"zgo2_multitool","zgo2_backpack"},
	command = "zgo2_amateur",
	max = 4,
	salary = 0,
	admin = 0,
	vote = false,
	category = "İllegal",
	hasLicense = false
})

TEAM_ZGO2_BASIC = DarkRP.createJob("Basit Ot Üreticisi", {
	color = Color(255, 0, 0, 255),
	model = {"models/player/group03/male_03.mdl"},
	description = [[Bu işte biraz tecrübe kazandın ve daha iyi üretim yapabiliyorsun. 
	Küçük çaplı satışlar yaparak kendini geliştiriyorsun. Ancak, polislerin ve rakiplerin dikkatini çekmemeye çalışmalısın!
	
	-İllegal Aktivitelerde Bulunabilir
	-Raid Atamaz 
	-Mug Atamaz
	-Banka Soyamaz
	]],
	weapons = {"zgo2_multitool","zgo2_backpack"},
	command = "zgo2_basic",
	max = 4,
	salary = 0,
	admin = 0,
	vote = false,
	category = "İllegal",
	hasLicense = false
})

TEAM_ZGO2_PRO = DarkRP.createJob("Profesyonel Ot Üreticisi", {
	color = Color(255, 247, 0),
	model = {"models/player/group03/male_02.mdl"},
	description = [[Artık bu işin ustası olmuşsun! Kaliteli ot üretiyor ve büyük satışlar yapıyorsun.
	 Müşteri kitlen genişledi, ancak büyük para büyük risk demek! Dikkatli ol, yoksa hedef olabilirsin.
	 
	-İllegal Aktivitelerde Bulunabilir
	-Raid Atamaz 
	-Mug Atamaz
	-Banka Soyamaz
	 ]],
	weapons = {"zgo2_multitool","zgo2_backpack"},
	command = "zgo2_pro",
	max = 4,
	salary = 0,
	admin = 0,
	vote = false,
	category = "Donator",
	hasLicense = false
})


/*

	Bellow are all the grow entities if you wanna spawn them with the f4 menu instead

*/
local function SetupDarkRPEntities()

	// If the shop config has not yet been loaded then wait 1 second
	if not zgo2.Shop or not zgo2.Shop.List then
		timer.Simple(1,SetupDarkRPEntities)
		return
	end

	DarkRP.createCategory{
		name = "Grow Equipment",
		categorises = "entities",
		startExpanded = true,
		color = Color(111, 150, 97, 255),
		canSee = function(ply) return true end,
		sortOrder = 100
	}

	DarkRP.createCategory{
		name = "Plant Seeds",
		categorises = "entities",
		startExpanded = false,
		color = Color(111, 150, 97, 255),
		canSee = function(ply) return true end,
		sortOrder = 99
	}

	DarkRP.createCategory{
		name = "Production",
		categorises = "entities",
		startExpanded = true,
		color = Color(111, 150, 97, 255),
		canSee = function(ply) return true end,
		sortOrder = 100
	}
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

	DarkRP.createEntity("Soil", {
		ent = "zgo2_soil",
		model = "models/zerochain/props_growop2/zgo2_soil.mdl",
		price = 100,
		max = 4,
		cmd = "buy_zgo2_soil",
		allowed = {
			TEAM_ZGO2_AMATEUR,
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Grow Equipment",
	})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

	DarkRP.createEntity("Splicer", {
		ent = "zgo2_splicer",
		model = "models/zerochain/props_growop2/zgo2_lab.mdl",
		price = 1000,
		max = 1,
		cmd = "buy_zgo2_splicer",
		allowed = {
			TEAM_ZGO2_PRO,
			TEAM_LILLITH
		},
		category = "Grow Equipment",
	})

	DarkRP.createEntity("Drying Line", {
		ent = "zgo2_dryline",
		model = "models/zerochain/props_growop2/zgo2_dryline.mdl",
		price = 1000,
		max = 1,
		cmd = "buy_zgo2_dryline",
		allowed = {
			TEAM_ZGO2_AMATEUR,
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Grow Equipment",
	})

	DarkRP.createEntity("Weed Clipper", {
		ent = "zgo2_clipper",
		model = "models/zerochain/props_growop2/zgo2_weedcruncher.mdl",
		price = 5000,
		max = 2,
		cmd = "buy_zgo2_clipper",
		allowed = {
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Grow Equipment",
	})

	DarkRP.createEntity("Weed Packer", {
		ent = "zgo2_packer",
		model = "models/zerochain/props_growop2/zgo2_weedpacker.mdl",
		price = 5000,
		max = 2,
		cmd = "buy_zgo2_packer",
		allowed = {
			TEAM_ZGO2_PRO,
			TEAM_LILLITH
		},
		category = "Grow Equipment",
	})

/*	DarkRP.createEntity("Palette", {
		ent = "zgo2_palette",
		model = "models/zerochain/props_growop2/zgo2_palette.mdl",
		price = 100,
		max = 6,
		cmd = "buy_zgo2_palette",
		allowed = {
			TEAM_ZGO2_PRO
		},
		category = "Grow Equipment",
	}) */

	DarkRP.createEntity("Weed Clipper - Motor", {
		ent = "zgo2_motor",
		model = "models/zerochain/props_growop2/zgo2_motor.mdl",
		price = 1000,
		max = 2,
		cmd = "buy_zgo2_motor",
		allowed = {
			TEAM_ZGO2_PRO,
			TEAM_LILLITH
		},
		category = "Grow Equipment",
	})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

	DarkRP.createEntity("Jar", {
		ent = "zgo2_jar",
		model = "models/zerochain/props_growop2/zgo2_jar.mdl",
		price = 500,
		max = 12,
		cmd = "buy_zgo2_jar",
		allowed = {
			TEAM_ZGO2_PRO,
			TEAM_LILLITH,
			TEAM_ZGO2_BASIC
		},
		category = "Grow Equipment",
	})

	DarkRP.createEntity("Transport Crate", {
		ent = "zgo2_crate",
		model = "models/zerochain/props_growop2/zgo2_crate.mdl",
		price = 1000,
		max = 6,
		cmd = "buy_zgo2_crate",
		allowed = {
			TEAM_ZGO2_AMATEUR,
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Grow Equipment",
	})

	DarkRP.createEntity("Jar Crate", {
		ent = "zgo2_jarcrate",
		model = "models/zerochain/props_growop2/zgo2_jarcrate.mdl",
		price = 1000,
		max = 6,
		cmd = "buy_zgo2_jarcrate",
		allowed = {
			TEAM_ZGO2_AMATEUR,
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Grow Equipment",
	})


	DarkRP.createEntity("Log Book", {
		ent = "zgo2_logbook",
		model = "models/props_lab/binderblue.mdl",
		price = 1000,
		max = 1,
		cmd = "buy_zgo2_logbook",
		allowed = {
			TEAM_ZGO2_AMATEUR,
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Grow Equipment",
	})

	DarkRP.createEntity("Water Pump", {
		ent = "zgo2_pump",
		model = "models/zerochain/props_growop2/zgo2_pump.mdl",
		price = 3000,
		max = 2,
		cmd = "buy_zgo2_pump",
		allowed = {
			TEAM_ZGO2_PRO,
			TEAM_LILLITH,
			TEAM_ZGO2_BASIC
		},
		category = "Grow Equipment",
	})

	DarkRP.createEntity("Battery", {
		ent = "zgo2_battery",
		model = "models/zerochain/props_growop2/zgo2_battery.mdl",
		price = 500,
		max = 3,
		cmd = "buy_zgo2_battery",
		allowed = {
			TEAM_ZGO2_AMATEUR,
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Grow Equipment",
	})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

	DarkRP.createEntity("Fuel", {
		ent = "zgo2_fuel",
		model = "models/zerochain/props_growop2/zgo2_fuel.mdl",
		price = 500,
		max = 3,
		cmd = "buy_zgo2_fuel",
		allowed = {
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Grow Equipment",
	})

	DarkRP.createEntity("Bulb", {
		ent = "zgo2_bulb",
		model = "models/zerochain/props_growop2/zgo2_bulb.mdl",
		price = 500,
		max = 3,
		cmd = "buy_zgo2_bulb",
		allowed = {
			TEAM_ZGO2_AMATEUR,
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Grow Equipment",
	})

	DarkRP.createEntity("Seed Libary", {
		ent = "zgo2_seedlibary",
		model = "models/zerochain/props_growop2/zgo2_seedlibary.mdl",
		price = 1000,
		max = 1,
		cmd = "buy_zgo2_seedlibary",
		allowed = {
			TEAM_ZGO2_AMATEUR,
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Plant Seeds",
	})
	for k, v in pairs(zgo2.config.Plants) do

		if zgo2.Plant.IsSplice(k) then continue end

		DarkRP.createEntity(v.name .. " [Seeds]", {
			ent = "zgo2_seed",
			model = "models/zerochain/props_growop2/zgo2_weedseeds.mdl",
			price = zgo2.Plant.GetTotalMoney(k) * ((1 / 100) * zgo2.config.Seedbox.Cost),
			max = 5,
			cmd = "buy_zgo2_seed" .. v.uniqueid,
			allowed = { TEAM_ZGO2_AMATEUR, TEAM_ZGO2_PRO, TEAM_LILLITH, TEAM_ZGO2_BASIC },
			customCheck = function(ply) return zgo2.Player.CanUse(ply,v) end,
			CustomCheckFailMsg = function(ply, entTable) return "" end,
			category = "Plant Seeds",
			spawn = function(ply, tr, tblEnt)
				local ent = ents.Create("zgo2_seed")
				ent:SetPlantID(k)
				ent:Spawn()
				ent:SetPos(tr.HitPos)

				return ent
			end
		})
	end

	for k, v in pairs(zgo2.config.Pots) do
		DarkRP.createEntity(v.name, {
			ent = "zgo2_pot",
			model = zgo2.Pot.GetModel(k),
			price = v.price,
			max = 6,
			cmd = "buy_zgo2_pot" .. v.uniqueid,
			allowed = { TEAM_ZGO2_AMATEUR, TEAM_ZGO2_PRO, TEAM_LILLITH, TEAM_ZGO2_BASIC },
			customCheck = function(ply) return zgo2.Player.CanUse(ply,v) end,
			CustomCheckFailMsg = function(ply, entTable) return "" end,
			category = "Grow Equipment",
			spawn = function(ply, tr, tblEnt)
				local ent = ents.Create("zgo2_pot")
				ent:SetPotID(k)
				ent:Spawn()
				ent:SetPos(tr.HitPos)

				return ent
			end
		})
	end

	for k,v in pairs(zgo2.config.Racks) do
		DarkRP.createEntity(v.name .. "0" .. k, {
			ent = "zgo2_rack",
			model = v.mdl,
			price = v.price,
			max = 6,
			cmd = "buy_zgo2_rack" .. v.uniqueid,
			allowed = { TEAM_ZGO2_AMATEUR, TEAM_ZGO2_PRO, TEAM_LILLITH, TEAM_ZGO2_BASIC },
			customCheck = function(ply) return zgo2.Player.CanUse(ply,v) end,
			CustomCheckFailMsg = function(ply, entTable) return "" end,
			category = "Grow Equipment",
			spawn = function(ply, tr, tblEnt)
				local ent = ents.Create("zgo2_rack")
				ent:SetRackID(k)
				ent:Spawn()
				ent:SetPos(tr.HitPos)

				return ent
			end
		})
	end

	for k, v in pairs(zgo2.config.Watertanks) do
		DarkRP.createEntity(v.name, {
			ent = "zgo2_watertank",
			model = v.mdl,
			price = v.price,
			max = 6,
			cmd = "buy_zgo2_watertank" .. v.uniqueid,
			allowed = { TEAM_ZGO2_AMATEUR, TEAM_ZGO2_PRO, TEAM_LILLITH, TEAM_ZGO2_BASIC },
			customCheck = function(ply) return zgo2.Player.CanUse(ply,v) end,
			CustomCheckFailMsg = function(ply, entTable) return "" end,
			category = "Grow Equipment",
			spawn = function(ply, tr, tblEnt)
				local ent = ents.Create("zgo2_watertank")
				ent:SetWatertankID(k)
				ent:Spawn()
				ent:SetPos(tr.HitPos)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

				return ent
			end
		})
	end

	for k, v in pairs(zgo2.config.Lamps) do

		if v.tent then
			DarkRP.createEntity(v.name, {
				ent = "zgo2_lamp",
				model = v.mdl,
				price = v.price,
				max = 8,
				cmd = "buy_zgo2_lamp" .. v.uniqueid,
				allowed = { TEAM_ZGO2_AMATEUR, TEAM_ZGO2_PRO, TEAM_LILLITH, TEAM_ZGO2_BASIC },
				customCheck = function(ply) return zgo2.Player.CanUse(ply,v) end,
				CustomCheckFailMsg = function(ply, entTable) return "" end,
				category = "Grow Equipment",
				spawn = function(ply, tr, tblEnt)
					local ent = ents.Create("zgo2_lamp")
					ent:SetLampID(k)
					ent:Spawn()
					ent:SetPos(tr.HitPos)

					return ent
				end
			})
		else
			DarkRP.createEntity(v.name, {
				ent = "zgo2_lamp",
				model = v.mdl,
				price = v.price,
				max = 6,
				cmd = "buy_zgo2_lamp" .. v.uniqueid,
				allowed = { TEAM_ZGO2_AMATEUR, TEAM_ZGO2_PRO, TEAM_LILLITH, TEAM_ZGO2_BASIC },
				customCheck = function(ply) return zgo2.Player.CanUse(ply,v) end,
				CustomCheckFailMsg = function(ply, entTable) return "" end,
				category = "Grow Equipment",
				spawn = function(ply, tr, tblEnt)
					local ent = ents.Create("zgo2_lamp")
					ent:SetLampID(k)
					ent:Spawn()
					ent:SetPos(tr.HitPos)

					return ent
				end
			})
		end
	end

	for k, v in pairs(zgo2.config.Tents) do
		DarkRP.createEntity(v.name, {
			ent = "zgo2_tent",
			model = v.mdl,
			price = v.price,
			max = 4,
			cmd = "buy_zgo2_tent" .. v.uniqueid,
			allowed = { TEAM_ZGO2_AMATEUR, TEAM_ZGO2_PRO, TEAM_LILLITH, TEAM_ZGO2_BASIC },
			customCheck = function(ply) return zgo2.Player.CanUse(ply,v) end,
			CustomCheckFailMsg = function(ply, entTable) return "" end,
			category = "Grow Equipment",
			spawn = function(ply, tr, tblEnt)
				local ent = ents.Create("zgo2_tent")
				ent:SetTentID(k)
				ent:Spawn()
				ent:SetPos(tr.HitPos)

				return ent
			end
		})
	end

	for k, v in pairs(zgo2.config.Generators) do
		DarkRP.createEntity(v.name, {
			ent = "zgo2_generator",
			model = v.mdl,
			price = v.price,
			max = 1,
			cmd = "buy_zgo2_generator" .. v.uniqueid,
			allowed = { TEAM_ZGO2_AMATEUR, TEAM_ZGO2_PRO, TEAM_LILLITH, TEAM_ZGO2_BASIC },
			customCheck = function(ply) return zgo2.Player.CanUse(ply,v) end,
			CustomCheckFailMsg = function(ply, entTable) return "" end,
			category = "Grow Equipment",
			spawn = function(ply, tr, tblEnt)
				local ent = ents.Create("zgo2_generator")
				ent:SetGeneratorID(k)
				ent:Spawn()
				ent:SetPos(tr.HitPos)

				return ent
			end
		})
	end

	DarkRP.createEntity("DoobyTable", {
		ent = "zgo2_doobytable",
		model = "models/zerochain/props_growop2/zgo2_doobytable.mdl",
		price = 1000,
		max = 1,
		cmd = "buy_zgo2_doobytable",
		allowed = {
			TEAM_ZGO2_AMATEUR,
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Production",
	})

	DarkRP.createEntity("Mixer", {
		ent = "zgo2_mixer",
		model = "models/zerochain/props_growop2/zgo2_mixer.mdl",
		price = 1000,
		max = 5,
		cmd = "buy_zgo2_mixer",
		allowed = {
			TEAM_ZGO2_AMATEUR,
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Production",
	})

	DarkRP.createEntity("Oven", {
		ent = "zgo2_oven",
		model = "models/zerochain/props_growop2/zgo2_oven.mdl",
		price = 1000,
		max = 5,
		cmd = "buy_zgo2_oven",
		allowed = {
			TEAM_ZGO2_AMATEUR,
			TEAM_ZGO2_BASIC,
			TEAM_LILLITH,
			TEAM_ZGO2_PRO
		},
		category = "Production",
	})

	for k, v in pairs(zgo2.config.Edibles) do
		DarkRP.createEntity(v.name, {
			ent = "zgo2_backmix",
			model = v.backmix_model,
			price = 1000,
			max = 5,
			cmd = "buy_zgo2_backmix" .. k,
			allowed = { TEAM_ZGO2_AMATEUR, TEAM_ZGO2_BASIC, TEAM_LILLITH, TEAM_ZGO2_PRO },
			category = "Production",
			spawn = function(ply, tr, tblEnt)
				local ent = ents.Create("zgo2_backmix")
				ent.EdibleID = k
				ent:Spawn()
				ent:SetPos(tr.HitPos)

				return ent
			end
		})
	end
end

// Delayed by 5 second to make sure all the custom config files have been loaded
// NOTE If you change any of the configs Pot / Plant then you need to restart in order for them to appear in F4 Menu

// NOTE Remove // bellow to add all the weed entities to the f4 menu
// timer.Simple(5,SetupDarkRPEntities)

--addons/cityworker/lua/darkrp_modules/cityworker/sh_cityworker.lua:
return gluapack()()
--addons/ch_mining/lua/darkrp_modules/ch_mining/sh_ch_mining_darkrp.lua:
--[[
	Add jobs, ents and categories here.
	Create a timer delay to make sure all the configs have loaded first
--]]
TEAM_MINEWORKER = DarkRP.createJob( "Madenci", {
	color = Color(20, 150, 20, 255),
	model = "models/player/Eli.mdl",
	description = [[Gelişmiş madencisin, ana odağın silah üretmek.]],
	weapons = { "ch_mining_pickaxe" },
	command = "mineworker",
	max = 5,
	salary = 75,
	admin = 0,
	vote = false,
	hasLicense = false,
	category = "Sivil",
} )



--addons/darkrpmodification/lua/darkrp_customthings/entities.lua:
return gluapack()()
--addons/darkrpmodification/lua/darkrp_customthings/groupchats.lua:
--[[---------------------------------------------------------------------------
Group chats
---------------------------------------------------------------------------
Team chat for when you have a certain job.
e.g. with the default police group chat, police officers, chiefs and mayors can
talk to one another through /g or team chat.

HOW TO MAKE A GROUP CHAT:
Simple method:
GAMEMODE:AddGroupChat(List of team variables separated by comma)

Advanced method:
GAMEMODE:AddGroupChat(a function with ply as argument that returns whether a random player is in one chat group)
This is for people who know how to script Lua.

---------------------------------------------------------------------------]]
-- Example: GAMEMODE:AddGroupChat(TEAM_MOB, TEAM_GANG)
-- Example: GAMEMODE:AddGroupChat(function(ply) return ply:isCP() end)

--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/localization/sh_glorifiedhandcuffs_turkish.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/themes/cl_glorifiedhandcuffs_theme_default.lua:

GlorifiedHandcuffs.Themes.Register( "Default", "Default", {
    Colors = {
        scrollBarCol = Color( 105, 105, 105 ),
        scrollBarHoverCol = Color( 85, 85, 85 ),


        bailMenuBackgroundColor = Color( 51, 51, 51 ),
        bailMenuTitleBarBackgroundColor = Color( 34, 34, 34 ),
        bailMenuCloseButtonBackgroundColor = Color( 201, 60, 63 ),
        bailMenuCloseButtonHoverColor = Color( 134, 35, 37 ),
        bailMenuPlayerBackgroundColor = Color( 73, 73, 73 ),
        bailMenuPlayerNameTextColor = Color( 255, 255, 255 ),
        bailMenuPlayerSteamIDCol = Color( 160, 160, 160 ),
        bailMenuBailButtonTextColor = Color( 255, 255, 255 ),
        bailMenuBailButtonColorCanAfford = Color( 89, 175, 63 ),
        bailMenuBailButtonColorCanAffordHover = Color( 69, 155, 45 ),
        bailMenuBailButtonColorCantAfford = Color( 201, 60, 63 ),
        bailMenuBailButtonColorCantAffordHover = Color( 156, 40, 42 ),


        interactionMenuBackgroundColor = Color( 51, 51, 51 ),
        interactionMenuTitleBarBackgroundColor = Color( 34, 34, 34 ),
        interactionMenuCloseButtonBackgroundColor = Color( 201, 60, 63 ),
        interactionMenuCloseButtonHoverColor = Color( 134, 35, 37 ),

        interactionMenuInfoBoxBackgroundColor = Color( 85, 85, 85 ),
        interactionMenuInfoBoxTextColor = Color( 255, 255, 255 ),
        interactionMenuInfoBoxNameColor = Color( 45, 45, 45 ),
        interactionMenuInfoBoxNameTextColor = Color( 255, 255, 255 ),
        interactionMenuInfoBoxJobTextColor = Color( 255, 255, 255 ),
        interactionMenuInfoBoxWalletColor = Color( 0, 185, 0 ),
        interactionMenuInfoBoxWalletTextColor = Color( 255, 255, 255 ),

        interactionMenuTopRowButtonsTextColor = Color( 255, 255, 255 ),
        interactionMenuTopRowButtonsButton = Color( 230, 56, 56 ),
        interactionMenuTopRowButtonsButtonHover = Color( 185, 48, 48 ),
        interactionMenuBottomRowButtonsTextColor = Color( 255, 255, 255 ),
        interactionMenuBottomRowButtonsButton = Color( 126, 126, 126 ),
        interactionMenuBottomRowButtonsButtonHover = Color( 100, 100, 100 ),

        interactionMenuWeaponBackgroundColor = Color( 125, 125, 125 ),
        interactionMenuConfiscateWeaponTextColor = Color( 255, 255, 255 ),
        interactionMenuConfiscateWeaponColor = Color( 200, 60, 60 ),
        interactionMenuConfiscateWeaponColorHover = Color( 185, 25, 25 ),
        interactionMenuConfiscateWeaponColorLegal = Color( 0, 185, 0 ),
        interactionMenuConfiscateWeaponColorLegalHover = Color( 0, 185, 0 ),


        hudCuffedBackgroundColor = Color( 210, 80, 80 ),
        hudCuffedBackgroundTextColor = Color( 255, 255, 255 ),
        hudBreakFreeBackgroundColor = Color( 31, 31, 31, 230 ),
        hudBreakFreeBackgroundTextColor = Color( 255, 255, 255 ),
        hudBreakFreeKeypressBackgroundColor = Color( 102, 176, 64 ),
        hudBreakFreeKeypressTextColor = Color( 255, 255, 255 ),

        hudSurrenderingBackgroundColor = Color( 210, 80, 80 ),
        hudSurrenderingBackgroundTextColor = Color( 255, 255, 255 ),
        hudStopSurrenderingBackgroundColor = Color( 31, 31, 31, 230 ),
        hudStopSurrenderingBackgroundTextColor = Color( 255, 255, 255 ),
        hudStopSurrenderingKeypressBackgroundColor = Color( 102, 176, 64 ),
        hudStopSurrenderingKeypressTextColor = Color( 255, 255, 255 ),


        bailNPC3D2DBackground = Color( 55, 55, 55, 155 ),
        bailNPC3D2DText = Color( 255, 255, 255 ),

        jailerNPC3D2DBackground = Color( 55, 55, 55, 155 ),
        jailerNPC3D2DText = Color( 255, 255, 255 ),
    },
    Fonts = {
        ["HUD.Handcuffed"] = {
            font = "Roboto",
            size = 21,
            weight = 1000,
            antialias = true
        },
        ["HUD.BreakFree"] = {
            font = "Roboto",
            size = 22,
            weight = 1000,
            antialias = true
        },
        ["HUD.Surrendering"] = {
            font = "Roboto",
            size = 20,
            weight = 1000,
            antialias = true
        },
        ["HUD.StopSurrendering"] = {
            font = "Roboto",
            size = 22,
            weight = 1000,
            antialias = true
        },
        ["BailMenu.TitleBar"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.015 end,
            weight = 500,
            antialias = true
        },
        ["BailMenu.PlayerInfo"] = {
            font = "Roboto",
            size = function() return ScrH() * 0.02 end,
            weight = 1000,
            antialias = true
        },
        ["BailMenu.BailPlayer"] = {
            font = "Roboto",
            size = function() return ScrH() * 0.02 end,
            weight = 500,
            antialias = true
        },
        ["BailNPC.WordBox"] = {
            font = "Roboto",
            size = 50,
            weight = 1000,
            antialias = true
        },
        ["JailerNPC.WordBox"] = {
            font = "Roboto",
            size = 50,
            weight = 1000,
            antialias = true
        },
        ["InteractionMenu.TitleBar"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.015 end,
            weight = 500,
            antialias = true
        },
        ["InteractionMenu.InfoBox"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.013 end,
            weight = 500,
            antialias = true
        },
        ["InteractionMenu.InfoBoxInfo"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.012 end,
            weight = 500,
            antialias = true
        },
        ["InteractionMenu.WeaponBoxInfo"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.01 end,
            weight = 500,
            antialias = true
        },
        ["InteractionMenu.BottomButtons"] = {
            font = "Roboto",
            size = function() return ScrW() * 0.012 end,
            weight = 500,
            antialias = true
        },
    },
    Materials = {
        cuffs = Material( "glorifiedhandcuffs/cuffs.png", "noclamp smooth" ),
        cuffs_blindfolded = Material( "glorifiedhandcuffs/cuffs_blindfolded.png", "noclamp smooth" ),
        surrender = Material( "glorifiedhandcuffs/surrender.png", "noclamp smooth" ),
        close = Material( "glorifiedhandcuffs/close.png", "noclamp smooth" ),
        name = Material( "glorifiedhandcuffs/name.png", "noclamp smooth" ),
        money = Material( "glorifiedhandcuffs/money.png", "noclamp smooth" ),
        briefcase = Material( "glorifiedhandcuffs/briefcase.png", "noclamp smooth" ),
    }
} )
GlorifiedHandcuffs.Themes.GenerateFonts()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/libraries/cl_glorifiedhandcuffs_uilib.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_scope.lua:
function SWEP:AdjustMouseSensitivity()
    if self:GetState() != ArcCW.STATE_SIGHTS then return end

    local threshold = ArcCW.ConVars["adjustsensthreshold"]:GetFloat()

    local irons = self:GetActiveSights() or {}

    local tmag = ((irons.Magnification or 1) + (irons.ScopeMagnification or 0))

    if tmag < threshold then return end

    return 1 / tmag
end

function SWEP:Scroll(var)
    local irons = self:GetActiveSights()

    if irons.ScrollFunc == ArcCW.SCROLL_ZOOM then
        if !irons.ScopeMagnificationMin then return end
        if !irons.ScopeMagnificationMax then return end

        local old = irons.ScopeMagnification

        local minus = var < 0

        var = math.abs(irons.ScopeMagnificationMax - irons.ScopeMagnificationMin)

        var = var / (irons.ZoomLevels or 5)

        if minus then
            var = var * -1
        end

        irons.ScopeMagnification = irons.ScopeMagnification - var

        irons.ScopeMagnification = math.Clamp(irons.ScopeMagnification, irons.ScopeMagnificationMin, irons.ScopeMagnificationMax)

        self.SightMagnifications[irons.Slot or 0] = irons.ScopeMagnification

        if old != irons.ScopeMagnification then
            self:MyEmitSound(irons.ZoomSound or "", 75, math.Rand(95, 105), 1, CHAN_ITEM)
        end

        -- if !irons.MinZoom then return end
        -- if !irons.MaxZoom then return end

        -- local old = irons.Magnification

        -- irons.Magnification = irons.Magnification - var

        -- irons.Magnification = math.Clamp(irons.Magnification, irons.MinZoom, irons.MaxZoom)

        -- if old != irons.Magnification then
        --     self:MyEmitSound(irons.ZoomSound or "", 75, 100, 1, CHAN_ITEM)
        -- end
    end

end

local ang0 = Angle(0, 0, 0)

SWEP.ViewPunchAngle = Angle(ang0)
SWEP.ViewPunchVelocity = Angle(ang0)

function SWEP:OurViewPunch(angle)
    self.ViewPunchVelocity:Add(angle)
    for i = 1, 3 do self.ViewPunchVelocity[i] = math.Clamp(self.ViewPunchVelocity[i], -180, 180) end
end

function SWEP:GetOurViewPunchAngles()
    local a = self:GetOwner():GetViewPunchAngles()
    for i = 1, 3 do a[i] = a[i] + self.ViewPunchAngle[i] * 10 end
    return a
end

local function lensqr(ang)
    return (ang[1] ^ 2) + (ang[2] ^ 2) + (ang[3] ^ 2)
end

-- scraped from source SDK 2013, just like this viewpunch damping code
local PUNCH_DAMPING = 9
local PUNCH_SPRING_CONSTANT = 120

function SWEP:DoOurViewPunch()
    -- if ( player->m_Local.m_vecPunchAngle->LengthSqr() > 0.001 || player->m_Local.m_vecPunchAngleVel->LengthSqr() > 0.001 )

    local vpa = self.ViewPunchAngle
    local vpv = self.ViewPunchVelocity

    if lensqr(vpa) + lensqr(vpv) > 0.000001 then
        -- {
        --     player->m_Local.m_vecPunchAngle += player->m_Local.m_vecPunchAngleVel * gpGlobals->frametime;
        --     float damping = 1 - (PUNCH_DAMPING * gpGlobals->frametime);

        local ft = FrameTime()

        vpa = vpa + (vpv * ft)
        local damping = 1 - (PUNCH_DAMPING * ft)

        --     if ( damping < 0 )
        --     {
        --         damping = 0;
        --     }

        if damping < 0 then damping = 0 end

        --     player->m_Local.m_vecPunchAngleVel *= damping;

        vpv = vpv * damping

        --     // torsional spring
        --     // UNDONE: Per-axis spring constant?
        --     float springForceMagnitude = PUNCH_SPRING_CONSTANT * gpGlobals->frametime;
        local springforcemagnitude = PUNCH_SPRING_CONSTANT * ft
        --     springForceMagnitude = clamp(springForceMagnitude, 0.f, 2.f );
        springforcemagnitude = math.Clamp(springforcemagnitude, 0, 2)
        --     player->m_Local.m_vecPunchAngleVel -= player->m_Local.m_vecPunchAngle * springForceMagnitude;
        vpv = vpv - (vpa * springforcemagnitude)

        --     // don't wrap around
        --     player->m_Local.m_vecPunchAngle.Init(
        --         clamp(player->m_Local.m_vecPunchAngle->x, -89.f, 89.f ),
        --         clamp(player->m_Local.m_vecPunchAngle->y, -179.f, 179.f ),
        --         clamp(player->m_Local.m_vecPunchAngle->z, -89.f, 89.f ) );
        -- }

        vpa[1] = math.Clamp(vpa[1], -89.9, 89.9)
        vpa[2] = math.Clamp(vpa[2], -179.9, 179.9)
        vpa[3] = math.Clamp(vpa[3], -89.9, 89.9)

        self.ViewPunchAngle = vpa
        self.ViewPunchVelocity = vpv
    else
        self.ViewPunchAngle = Angle(ang0)
        self.ViewPunchVelocity = Angle(ang0)
    end
end

-- viewbob during reload and firing shake
SWEP.ProceduralViewOffset = Angle(ang0)
local procedural_spdlimit = 5
local oldangtmp
local mzang_fixed,mzang_fixed_last
local mzang_velocity = Angle(ang0)
local progress = 0
local targint,targbool

function SWEP:CoolView(ply, pos, ang, fov)
    if !ang then return end
    if ply != LocalPlayer() then return end
    if ply:ShouldDrawLocalPlayer() then return end
    local vm = ply:GetViewModel()
    if !IsValid(vm) then return end
    local ftv = FrameTime()

    local gunbone, gbslot = self:GetBuff_Override("LHIK_CamDriver")
    local lhik_anim_model = gbslot and self.Attachments[gbslot].GodDriver and self.Attachments[gbslot].GodDriver.Model
    if IsValid(lhik_anim_model) and lhik_anim_model:GetAttachment(gunbone) then
        local catang = lhik_anim_model:GetAttachment(gunbone).Ang

        catang:Sub( Angle( 0, 90, 90 ) )
        catang.y = -catang.y
        local r = catang.r
        catang.r = -catang.p
        catang.p = -r

        ang:RotateAroundAxis( ang:Right(),		catang.x )
        ang:RotateAroundAxis( ang:Up(),			catang.y )
        ang:RotateAroundAxis( ang:Forward(),	catang.z )

    end

    -- Cam_Offset_Ang might not always be assigned properly. Try not to use it if it's nil, or it'll tilt the player's view.
    local att = self:GetBuff_Override("Override_CamAttachment", self.CamAttachment) or -1
    if vm:GetAttachment(att) and self.Cam_Offset_Ang then
        local attang = vm:WorldToLocalAngles(vm:GetAttachment(att).Ang)
        attang:Sub(self.Cam_Offset_Ang)
        ang:Add(attang)
        return
    end

    local viewbobintensity = self.ProceduralViewBobIntensity or 0.3

    if viewbobintensity == 0 then return end

    oldpostmp = pos * 1
    oldangtmp = ang * 1

    targbool = self:GetNextPrimaryFire() - .1 > CurTime()
    targint = targbool and 1 or 0
    targint = math.min(targint, 1-math.pow( vm:GetCycle(), 2 ) )
    progress = Lerp(ftv * 15, progress, targint)

    local angpos = vm:GetAttachment(self.ProceduralViewBobAttachment or self.MuzzleEffectAttachment or 1)

    if angpos and self:GetReloading() then
        mzang_fixed = vm:WorldToLocalAngles(angpos.Ang)
        mzang_fixed:Normalize()
    else return
    end

    self.ProceduralViewOffset:Normalize()

    if mzang_fixed_last then
        local delta = mzang_fixed - mzang_fixed_last
        delta:Normalize()
        mzang_velocity = mzang_velocity + delta * 2
        mzang_velocity.p = math.Approach(mzang_velocity.p, -self.ProceduralViewOffset.p * 2, ftv * 20)
        mzang_velocity.p = math.Clamp(mzang_velocity.p, -procedural_spdlimit, procedural_spdlimit)
        self.ProceduralViewOffset.p = self.ProceduralViewOffset.p + mzang_velocity.p * ftv
        self.ProceduralViewOffset.p = math.Clamp(self.ProceduralViewOffset.p, -90, 90)
        mzang_velocity.y = math.Approach(mzang_velocity.y, -self.ProceduralViewOffset.y * 2, ftv * 20)
        mzang_velocity.y = math.Clamp(mzang_velocity.y, -procedural_spdlimit, procedural_spdlimit)
        self.ProceduralViewOffset.y = self.ProceduralViewOffset.y + mzang_velocity.y * ftv
        self.ProceduralViewOffset.y = math.Clamp(self.ProceduralViewOffset.y, -90, 90)
        mzang_velocity.r = math.Approach(mzang_velocity.r, -self.ProceduralViewOffset.r * 2, ftv * 20)
        mzang_velocity.r = math.Clamp(mzang_velocity.r, -procedural_spdlimit, procedural_spdlimit)
        self.ProceduralViewOffset.r = self.ProceduralViewOffset.r + mzang_velocity.r * ftv
        self.ProceduralViewOffset.r = math.Clamp(self.ProceduralViewOffset.r, -90, 90)
    end

    self.ProceduralViewOffset.p = math.Approach(self.ProceduralViewOffset.p, 0, (1 - progress) * ftv * -self.ProceduralViewOffset.p)
    self.ProceduralViewOffset.y = math.Approach(self.ProceduralViewOffset.y, 0, (1 - progress) * ftv * -self.ProceduralViewOffset.y)
    self.ProceduralViewOffset.r = math.Approach(self.ProceduralViewOffset.r, 0, (1 - progress) * ftv * -self.ProceduralViewOffset.r)
    mzang_fixed_last = mzang_fixed
    local ints = 3 * ArcCW.ConVars["vm_coolview_mult"]:GetFloat() * -viewbobintensity
    ang:RotateAroundAxis(ang:Right(), Lerp(progress, 0, -self.ProceduralViewOffset.p) * ints)
    ang:RotateAroundAxis(ang:Up(), Lerp(progress, 0, self.ProceduralViewOffset.y / 2) * ints)
    ang:RotateAroundAxis(ang:Forward(), Lerp(progress, 0, self.ProceduralViewOffset.r / 3) * ints)

    ang = LerpAngle(0, ang, oldangtmp)
end

function SWEP:CalcView(ply, pos, ang, fov)
    if !CLIENT then return end

    if ArcCW.ConVars["vm_coolview"]:GetBool() then
        self:CoolView(ply, pos, ang, fov)
    end

    if ArcCW.ConVars["shake"]:GetBool() and !engine.IsRecordingDemo() then
        local de = (0.2 + (self:GetSightDelta()*0.8))
        ang = ang + (AngleRand() * self.RecoilAmount * 0.006 * de)
    end

    ang = ang + (self.ViewPunchAngle * 10)

    return pos, ang, fov
end

function SWEP:ShouldGlint()
    return self:GetBuff_Override("ScopeGlint") and self:GetState() == ArcCW.STATE_SIGHTS
end

function SWEP:DoScopeGlint()
end
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_timers.lua:
local tbl     = table
local tbl_ins = tbl.insert

local tick = 0

function SWEP:InitTimers()
    self.ActiveTimers = {} -- { { time, id, func } }
end

function SWEP:SetTimer(time, callback, id)
    if !IsFirstTimePredicted() then return end

    tbl_ins(self.ActiveTimers, { time + CurTime(), id or "", callback })
end

function SWEP:TimerExists(id)
    for _, v in pairs(self.ActiveTimers) do
        if v[2] == id then return true end
    end

    return false
end

function SWEP:KillTimer(id)
    local keeptimers = {}

    for _, v in pairs(self.ActiveTimers) do
        if v[2] != id then tbl_ins(keeptimers, v) end
    end

    self.ActiveTimers = keeptimers
end

function SWEP:KillTimers()
    self.ActiveTimers = {}
end

function SWEP:ProcessTimers()
    local keeptimers, UCT = {}, CurTime()

    if CLIENT and UCT == tick then return end

    if !self.ActiveTimers then self:InitTimers() end

    for _, v in pairs(self.ActiveTimers) do
        if v[1] <= UCT then v[3]() end
    end

    for _, v in pairs(self.ActiveTimers) do
        if v[1] > UCT then tbl_ins(keeptimers, v) end
    end

    self.ActiveTimers = keeptimers
end

local function DoShell(wep, data)
    if !(IsValid(wep) and IsValid(wep:GetOwner())) then return end

    local att = data.att or wep:GetBuff_Override("Override_CaseEffectAttachment") or wep.CaseEffectAttachment or 2

    if !att then return end

    local getatt = wep:GetAttachment(att)

    if !getatt then return end

    local pos, ang = getatt.Pos, getatt.Ang

    local ed = EffectData()
    ed:SetOrigin(pos)
    ed:SetAngles(ang)
    ed:SetAttachment(att)
    ed:SetScale(1)
    ed:SetEntity(wep)
    ed:SetNormal(ang:Forward())
    ed:SetMagnitude(data.mag or 100)

    util.Effect(data.e, ed)
end

function SWEP:PlaySoundTable(soundtable, mult, start, key)
    --if CLIENT and game.SinglePlayer() then return end

    local owner = self:GetOwner()

    start = start or 0
    mult  = 1 / (mult or 1)

    for _, v in pairs(soundtable) do
        if table.IsEmpty(v) then continue end

        local ttime
        if v.t then
            ttime = (v.t * mult) - start
        else
            continue
        end
        if ttime < 0 then continue end
        if !(IsValid(self) and IsValid(owner)) then continue end

        local jhon = CurTime() + ttime

        --[[if game.SinglePlayer() then
            if SERVER then
                net.Start("arccw_networksound")
                v.ntttime = ttime
                net.WriteTable(v)
                net.WriteEntity(self)
                net.Send(owner)
            end
        end]]

        -- i may go fucking insane
        if !self.EventTable[1] then self.EventTable[1] = {} end

        for i, de in ipairs(self.EventTable) do
            if de[jhon] then
                if !self.EventTable[i + 1] then
                    --[[print(CurTime(), "Occupier at " .. i .. ", creating " .. i+1)]]
                    self.EventTable[i + 1] = {}
                    continue
                end
            else
                self.EventTable[i][jhon] = table.Copy(v)
                self.EventTable[i][jhon].StartTime = CurTime()
                self.EventTable[i][jhon].AnimKey = key
                -- print(CurTime(), "Clean at " .. i)
            end
        end
    end
end

function SWEP:PlayEvent(v)
    if !v or !istable(v) then error("no event to play") end
    v = self:GetBuff_Hook("Hook_PrePlayEvent", v) or v
    if v.e and IsFirstTimePredicted() then
        DoShell(self, v)
    end

    if v.s then
        if v.s_km then
            self:StopSound(v.s)
        end
        self:MyEmitSound(v.s, v.l, v.p, v.v, v.c or CHAN_AUTO)
    end

    if v.bg then
        self:SetBodygroupTr(v.ind or 0, v.bg)
    end

    if v.pp then
        local vm = self:GetOwner():GetViewModel()

        vm:SetPoseParameter(pp, ppv)
    end

    v = self:GetBuff_Hook("Hook_PostPlayEvent", v) or v
end


if CLIENT then
    net.Receive("arccw_networksound", function(len)
        local v = net.ReadTable()
        local wep = net.ReadEntity()

        wep.EventTable[CurTime() + v.ntttime] = v
    end)
end
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_util.lua:
return gluapack()()
--lua/weapons/arccw_fml_eft_mdr.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Firearms" -- edit this if you like
SWEP.AdminOnly = false

SWEP.PrintName = "CR 762"
SWEP.TrueName = "MDR 7.62"
SWEP.Trivia_Class = "Battle Rifle"
SWEP.Trivia_Desc = "Modern bullpup gun with extra long bullet"
SWEP.Trivia_Manufacturer = "Desert Tech"
SWEP.Trivia_Calibre = "7.62×51mm NATO"
SWEP.Trivia_Mechanism = "Gas-Operated"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 2017

SWEP.Slot = 2

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.CrouchPos = Vector(-4.5, 3, 0)
SWEP.CrouchAng = Angle(0, 0, -30)

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fml/c_tarkov_mdr.mdl"
SWEP.WorldModel = "models/weapons/arccw/fml/w_tarkov_mdr.mdl"
SWEP.ViewModelFOV = 70

SWEP.Damage = 43
SWEP.DamageMin = 29 -- damage done at maximum range
SWEP.Range = 80 -- in METRES
SWEP.Penetration = 12
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any
SWEP.MuzzleVelocity = 1100 -- projectile or phys bullet muzzle velocity
-- IN M/S

SWEP.TracerNum = 1 -- tracer every X
SWEP.TracerCol = Color(255, 25, 25)
SWEP.TracerWidth = 3

SWEP.ChamberSize = 1 -- how many rounds can be chambered.
SWEP.Primary.ClipSize = 25 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 15

SWEP.Recoil = 0.625
SWEP.RecoilSide = 0.4
SWEP.RecoilRise = 0.35
SWEP.VisualRecoilMult = 0.5

SWEP.Delay = 60 / 750 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 200

SWEP.AccuracyMOA = 7 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 600 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 300

SWEP.Primary.Ammo = "ar2" -- what ammo type the gun uses
SWEP.MagID = "type2" -- the magazine pool this gun draws from

SWEP.ShootVol = 115 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound = "weapons/fml_eft_mdr/mk18_fp.wav"
SWEP.ShootSoundSilenced = "weapons/fml_eft_mdr/mk18_suppressed_fp.wav"
SWEP.DistantShootSound = "weapons/arccw/ak47/ak47-1-distant.wav"

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellModel = "models/shells/shell_762nato.mdl"
SWEP.ShellScale = 1.5
SWEP.ShellMaterial = "models/weapons/arcticcw/shell_556_steel"

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.875
SWEP.SightedSpeedMult = 0.68
SWEP.SightTime = 0.275

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.CaseBones = {}

SWEP.IronSightStruct = {
    Pos = Vector(-2.495, -0.5, 0.178),
    Ang = Angle(0.136, 0.004, 5),
    Magnification = 1.1,
    SwitchToSound = "", -- sound that plays when switching to this sight
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 2, 0)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.HolsterPos = Vector(0.49, -0.355, -3.28)
SWEP.HolsterAng = Angle(31.714, -4.239, 2)

SWEP.BarrelLength = 18

SWEP.AttachmentElements = {
    ["iron"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {{ind = 1, bg = 1}},
    },
    ["grip"] = {
		Override_ActivePos = Vector(0, 2, 0),
		Override_ActiveAng = Angle(0, 0, 5),		
        VMBodygroups = {{ind = 2, bg = 1}},
        WMBodygroups = {{ind = 2, bg = 1}},
    },	
    ["bkrail"] = {
     VMElements = {
        {
            Model = "models/weapons/arccw/atts/backup_rail.mdl",
              Bone = "Weapon_Main",
             Offset = {
                 pos = Vector(0, -4.2, 8),
                ang = Angle(180, 90, 180),
           },
		 },
      }
    },			
}

SWEP.CustomizePos = Vector(9.824, 5, -4.897)
SWEP.CustomizeAng = Angle(12.149, 30.547, 0)

SWEP.ExtraSightDist = 3

SWEP.Attachments = {
    {
        PrintName = "Optic", -- print name
        DefaultAttName = "Iron Sights",
        Slot = {"optic", "optic_lp"}, -- what kind of attachments can fit here, can be string or table
        Bone = "Weapon_Main", -- relevant bone any attachments will be mostly referring to
        Offset = {
            vpos = Vector(0, -4.1, 2), -- offset that the attachment will be relative to the bone
            vang = Angle(90, 0, -90),
            wpos = Vector(2, 0.699, -5),
            wang = Angle(170, 180-1.17, 0),
        },
        InstalledEles = {"iron"},
    },
    {
        PrintName = "Backup Optic", -- print name
        Slot = {"optic_lp"}, -- what kind of attachments can fit here, can be string or table
        Bone = "Weapon_Main", -- relevant bone any attachments will be mostly referring to
        Offset = {
            vpos = Vector(-0.5, -4.5, 8), -- offset that the attachment will be relative to the bone
            vang = Angle(90, 0, -45),
            wpos = Vector(10, -0.2, -5),
            wang = Angle(-10.393, 0, -135)
        },	
        InstalledEles = {"bkrail"},		
        KeepBaseIrons = true,
		ExtraSightDist = 8	
    },		
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "Weapon_Main",
        Offset = {
            vpos = Vector(0, -2.55, 12),
            vang = Angle(90, 0, -90),
            wpos = Vector(14, 0.689, -5.2),
            wang = Angle(-9, 0, 180)
        },
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "ubgl", "bipod"},
        Bone = "Weapon_Main",
        Offset = {
            vpos = Vector(0, -3.549, -13.561),
            vang = Angle(90, 0, -90),
            wpos = Vector(17, 0.6, -4.676),
            wang = Angle(-10, 0, 180)
        },
        SlideAmount = {
            vmin = Vector(0, -1.5, 6.8),
            vmax = Vector(0, -2, 10),
            wmin = Vector(8, 0.832, -4.2),
            wmax = Vector(8, 0.832, -4.2),
        },
        InstalledEles = {"grip"},		
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "Weapon_Main",
        Offset = {
            vpos = Vector(-1, -2.8, 7), -- offset that the attachment will be relative to the bone
            vang = Angle(90, 0, 180),
            wpos = Vector(8, -0.1, -4),
            wang = Angle(-8.829, -0.556, 90)
        },
    },
    {
        PrintName = "Grip",
        Slot = "grip",
        DefaultAttName = "Standard Grip"
    },
    {
        PrintName = "Stock",
        Slot = "stock",
        DefaultAttName = "Standard Stock"
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "Weapon_Main", -- relevant bone any attachments will be mostly referring to
        Offset = {
            vpos = Vector(0.6, -2, 4), -- offset that the attachment will be relative to the bone
            vang = Angle(90, 0, -90),
            wpos = Vector(6.099, 1.1, -3.301),
            wang = Angle(171.817, 180-1.17, 0),
        },
    },
}

SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep:GetState() == ArcCW.STATE_SIGHTS then
        if anim == "reload" then
            return "reload_ads"
        elseif anim == "reload_empty" then
            return "reload_empty_ads"
        end
    end
end


SWEP.ReloadInSights = true
SWEP.LockSightsInReload = true

SWEP.Animations = {
    ["idle"] = false,
    ["draw"] = {
        Source = "draw",
        SoundTable = {{s = "weapons/arccw/ak47/ak47_draw.wav", t = 0}},
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["ready"] = {
        Source = "deploy",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["fire"] = {
        Source = {"fire"},
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "iron",
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "wet",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.35,
        LHIKOut = 0.35,
    },
    ["reload_empty"] = {
        Source = "dry",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.35,
        LHIKOut = 0.35,
    },
    ["reload_ads"] = {
        Source = "ads_wet",
		Time = (105/45)*1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.35,
        LHIKOut = 0.35,
    },
    ["reload_empty_ads"] = {
        Source = "ads_dry",
		Time = (130/45)*1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.35,
        LHIKOut = 0.35,
    },	
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 0.2,	
        LHIK = true,
        LHIKIn = 0.35,
        LHIKOut = 0,		
    },
    ["idle_sprint"] = false,
    ["exit_sprint"] = {
        Source = "sprint_out",
		Time = 0.2,	
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,		
    },		
}
--lua/weapons/arccw_fml_karma9.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Firearms" -- edit this if you like
SWEP.AdminOnly = false

SWEP.PrintName = "KF 92"
SWEP.TrueName = "Karma 9"
SWEP.Trivia_Class = "Energy Submachine Gun"
SWEP.Trivia_Desc = "Ultra fast-firing SMG that depletes magazine in seconds. Damage increases over long distance. Has 4-Round Burst mode. Poor penetration."
SWEP.Trivia_Manufacturer = "Kendall Ballistics"
SWEP.Trivia_Calibre = "Shocked .45 ACP"
SWEP.Trivia_Mechanism = "Magic"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 2077

SWEP.Slot = 2

SWEP.CrouchPos = Vector(-6.2, 1, -0.5)
SWEP.CrouchAng = Angle(0, 0, -45)

if GetConVar("arccw_truenames"):GetBool() then SWEP.PrintName = SWEP.TrueName end

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fml/c_karma9.mdl"
SWEP.WorldModel = "models/weapons/arccw/fml/w_karma9.mdl"
SWEP.ViewModelFOV = 70

SWEP.NPCWeaponType = "weapon_smg1"
SWEP.NPCWeight = 195

SWEP.Damage = 15
SWEP.DamageMin = 60 -- damage done at maximum range
SWEP.Range = 200 -- in METRES
SWEP.Penetration = 2
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any
SWEP.MuzzleVelocity = 1070 -- projectile or phys bullet muzzle velocity
-- IN M/S

SWEP.TracerNum = 1 -- tracer every X
SWEP.TracerCol = Color(255, 25, 25)
SWEP.TracerWidth = 3

SWEP.ChamberSize = 1 -- how many rounds can be chambered.
SWEP.Primary.ClipSize = 25 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 15

SWEP.Recoil = 0.3
SWEP.RecoilSide = 0.35
SWEP.RecoilRise = 0.5
SWEP.VisualRecoilMult = 0.9

SWEP.Delay = 60 / 1300 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2
    },
    {
        Mode = -4,
        RunawayBurst = true,
        Mult_RecoilRise = 1.2,		
        Mult_RecoilSide = 0.8,
        Mult_AccuracyMOA = 0.7,
        PostBurstDelay = 0.08,
        Mult_RPM = 1.5,		
    },
    {
        Mode = 1
    },
    {
        Mode = 0
    }
}

SWEP.AccuracyMOA = 8 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 300 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 200

SWEP.Primary.Ammo = "pistol" -- what ammo type the gun uses
SWEP.MagID = "g18" -- the magazine pool this gun draws from

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 200 -- pitch of shoot sound

SWEP.ShootSound = "weapons/arccw_fml_karma9/ump45_fp.wav"
SWEP.ShootSoundSilenced = "weapons/arccw_fml_karma9/mp5k_suppressed_fp.wav"
SWEP.DistantShootSound = "weapons/arccw_fml_karma9/mp5k_dist.wav"

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellModel = "models/shells/shell_9mm.mdl"
SWEP.ShellScale = 1.5

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.205

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.CaseBones = {}

SWEP.IronSightStruct = {
    Pos = Vector(-3.185, -5, 0.298),
    Ang = Angle(0.259, 0, 0),
    Magnification = 1.1,
    SwitchToSound = "" -- sound that plays when switching to this sight
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 3, 0)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.HolsterPos = Vector(0.86, 2.065, -1.841)
SWEP.HolsterAng = Angle(-5.802, 33.817, -30.932)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.CustomizePos = Vector(4, -2, -1.5)

SWEP.BarrelLength = 15

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["bkrail"] = {
     VMElements = {
        {
            Model = "models/weapons/arccw/atts/backup_rail.mdl",
              Bone = "Weapon_Main",
             Offset = {
                 pos = Vector(0, -3, 10),
                ang = Angle(180, 90, 180),
           },
		 },
      }
    },		
}

SWEP.ExtraSightDist = 5

SWEP.Attachments = {
    {
        PrintName = "Optic", -- print name
        DefaultAttName = "Iron Sights",
        Slot = {"optic", "optic_lp"}, -- what kind of attachments can fit here, can be string or table
        Bone = "Weapon_Main", -- relevant bone any attachments will be mostly referring to
        Offset = {
            vpos = Vector(0, -3, 5), -- offset that the attachment will be relative to the bone
            vang = Angle(90, 0, -90),
            wpos = Vector(10, 0.739, -4.9),
            wang = Angle(-10, 0, 180)
        },
        InstalledEles = {"nors"},			
    },
    {
        PrintName = "Backup Optic", -- print name
        Slot = {"optic_lp"}, -- what kind of attachments can fit here, can be string or table
        Bone = "Weapon_Main", -- relevant bone any attachments will be mostly referring to
        Offset = {
            vpos = Vector(-0.55, -3.2, 10), -- offset that the attachment will be relative to the bone
            vang = Angle(90, 0, -45),
            wpos = Vector(15, 0.832, -5),
            wang = Angle(-10.393, 0, -135)
        },	
        InstalledEles = {"bkrail"},		
        KeepBaseIrons = true,
		ExtraSightDist = 5	
    },		
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "Weapon_Main",
        Offset = {
            vpos = Vector(-0, -2.125, 12),
            vang = Angle(90, 0, -90),
            wpos = Vector(16, 0.782, -5.3),
            wang = Angle(-9.79, 0, 180)
        }
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "style_pistol"},
        Bone = "Weapon_Main",
        Offset = {
            vang = Angle(90,0, -90),
            vpos = Vector(0, -0.7, 10),		
            wpos = Vector(14, 0.602, -3.2),
            wang = Angle(-10.216, 0, 180)
        },		
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "Weapon_Main",
        Offset = {
            vpos = Vector(-0.8, -1.5, 11), -- offset that the attachment will be relative to the bone
            vang = Angle(90, 0, 180),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
    },
    {
        PrintName = "Grip",
        Slot = "grip",
        DefaultAttName = "Standard Grip"
    },
    {
        PrintName = "Stock",
        Slot = "stock",
        DefaultAttName = "Standard Stock"
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },	
    {
        PrintName = "Perk",
        Slot = "perk"
    },	
    {
        PrintName = "Charm",
        DefaultAttName = "None",
        Slot = {"charm", "fml_charm"},
        Bone = "Weapon_Main",
        Offset = {
            vpos = Vector(0.4, -2, 4),
            vang = Angle(90, 0, -90),
            wpos = Vector(8, 1, -3),
            wang = Angle(-9, 0, 180)
        },
		FreeSlot = true,
    },			
}


SWEP.Animations = {
    ["draw"] = {
        Source = "draw",
        Time = 35/60,
        SoundTable = {{s = "weapons/arccw/ak47/ak47_draw.wav", t = 0}},
        LHIK = true,
        LHIKIn = 1,
        LHIKOut = 1,
    },
    ["ready"] = {
        Source = "deploy",
        Time = 70/60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire"] = {
        Source = {"fire"},
        Time = 30/50,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "iron",
        Time = 30/60,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "wet",
        Time = 2.6,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Checkpoints = {20, 39},
        FrameRate = 60,
        LHIK = true,
        LHIKIn = 0.35,
        LHIKOut = 0.35,
    },
    ["reload_empty"] = {
        Source = "dry",
        Time = 3.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Checkpoints = {37, 58, 75, 92, 119, 124},
        FrameRate = 60,
        LHIK = true,
        LHIKIn = 0.35,
        LHIKOut = 0.35,
    },	
}
--lua/weapons/arccw_mw2_m1887.lua:
return gluapack()()
--lua/weapons/arccw_mw2_m240.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.CamAttachment = 3

SWEP.PrintName = "M240"
SWEP.Trivia_Class = "Light Machine Gun"
SWEP.Trivia_Desc = "Fully automatic, large magazines."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2_2/c_m240_1.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-6, 3, -6),
    ang = Angle(-10, 0, 180),
    scale = 1.125
}
SWEP.WorldModel = "models/weapons/w_mach_m249para.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 30
SWEP.DamageMin = 30
SWEP.RangeMin = 1500 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Range = 2000 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 7
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 100 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 200
SWEP.ReducedClipSize = 50

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.5
SWEP.RecoilSide = 0.5
SWEP.RecoilRise = 0

SWEP.Delay = 0.064 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_ar2", "weapon_smg1"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 10 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 600 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "smg1" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 70 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/m240.wav"
SWEP.ShootMechSound =       ArcCW_MW2_Mech
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/m240.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/m240_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellModel = "models/shells/shell_762nato.mdl"
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.875
SWEP.SightedSpeedMult = 0.35
SWEP.SightTime = 0.25

SWEP.IronSightStruct = {
    Pos = Vector(-3.426, -2.9, 0.579),
    Ang = Angle(-0.1, 0, 0),
    ViewModelFOV = 65 / 1.3,
    Magnification = 1.3,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(9.76, 0, -1.88)
SWEP.CustomizeAng = Angle(7.8, 27.7, 11.699)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 32

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["grip"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        WMBodygroups = {},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
}

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    [14] = "j_ammo_014",
    [13] = "j_ammo_013",
    [12] = "j_ammo_012",
    [11] = "j_ammo_011",
    [10] = "j_ammo_010",
    [9] = "j_ammo_09",
    [8] = "j_ammo_08",
    [7] = "j_ammo_07",
    [6] = "j_ammo_06",
    [5] = "j_ammo_05",
    [4] = "j_ammo_04",
    [3] = "j_ammo_03",
    [2] = "j_ammo_02",
    [1] = "j_ammo_01",
}

SWEP.ExtraSightDist = 5
SWEP.Bipod_Integral = true

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "j_ammo_cover",
        Offset = {
            vpos = Vector(-8.5, 0, 0.8),
            vang = Angle(0, 0, 0),
        },
        SlideAmount = {
            vmin = Vector(-8.5, 0, 0.8),
            vmax = Vector(-5, 0, 0.8),
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(30, 0, 2.0),
            vang = Angle(0, 0, 0),
        },
		VMScale = Vector(2, 1.5, 1.5),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "ubgl", "bipod", "foregrip_mw2exclusive"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(18.427, 0, -1.04),
            vang = Angle(0, 0, 0),
        },
        SlideAmount = {
            vmin = Vector(14, 0, -0.5),
            vmax = Vector(18, 0, -0.5),
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(20, -1.4, 1.4),
            vang = Angle(0, 0, 90),
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(4, -0.75, 1.5),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[3].Installed then
        return anim .. "_grip"
    end
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 200/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 41/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 18/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["fire"] = {
        Source = "fire",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 291/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 5,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_lift_v1.wav", 			t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_chamber_v1.wav", 		t = 16/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_open_v1.wav", 			t = 79/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_clipout_v1.wav", 		t = 104/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_clipin_v1.wav", 		t = 148/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_close_v1.wav", 			t = 209/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_hit_v1.wav", 			t = 225/30},
					},
        LastClip1OutTime = 2.5,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 1,
    },
------------------
    ["idle_grip"] = {
        Source = "idle_grip",
        Time = 200/30
    },
    ["enter_sprint_grip"] = {
        Source = "sprint_in_grip",
        Time = 10/30
    },
    ["idle_sprint_grip"] = {
        Source = "sprint_loop_grip",
        Time = 30/40
    },
    ["exit_sprint_grip"] = {
        Source = "sprint_out_grip",
        Time = 10/30
    },
    ["draw_grip"] = {
        Source = "pullout_grip",
        Time = 41/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["holster_grip"] = {
        Source = "putaway_grip",
        Time = 18/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["fire_grip"] = {
        Source = "fire_grip",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_grip"] = {
        Source = "fire_ads_grip",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["reload_grip"] = {
        Source = "reload_grip",
        Time = 291/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 5,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_lift_v1.wav", 			t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_chamber_v1.wav", 		t = 16/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_open_v1.wav", 			t = 79/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_clipout_v1.wav", 		t = 104/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_clipin_v1.wav", 		t = 148/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_close_v1.wav", 			t = 209/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_hit_v1.wav", 			t = 225/30},
					},
        LastClip1OutTime = 2.5,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 1,
    },
}
--lua/weapons/arccw_mw2_mp5k.lua:
return gluapack()()
--lua/weapons/arccw_mw2_rpd.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.CamAttachment = 3

SWEP.PrintName = "RPD"
SWEP.Trivia_Class = "Light Machine Gun"
SWEP.Trivia_Desc = "Fully automatic, large magazines."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2_2/c_rpd_1.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-4, 3, -4),
    ang = Angle(-10, 0, 180),
    scale = 1.33
}
SWEP.WorldModel = "models/weapons/w_mach_m249para.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 40
SWEP.DamageMin = 40
SWEP.RangeMin = 1500 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Range = 2000 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 7
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 100 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 200
SWEP.ReducedClipSize = 50

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.45
SWEP.RecoilSide = 0.45
SWEP.RecoilRise = 0

SWEP.Delay = 0.085 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_ar2", "weapon_smg1"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 10 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 600 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "smg1" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/rpd.wav"
SWEP.ShootMechSound =       ArcCW_MW2_Mech
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/mg4.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/m240_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellModel = "models/shells/shell_762nato.mdl"
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.875
SWEP.SightedSpeedMult = 0.35
SWEP.SightTime = 0.25

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-3.01, -2.6, 0.3),
    Ang = Angle(0.8, 0, 0),
    ViewModelFOV = 65 / 1.3,
    Magnification = 1.3,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(9.76, 0, -1.88)
SWEP.CustomizeAng = Angle(7.8, 27.7, 11.699)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 32

SWEP.AttachmentElements = {
    ["grip"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
}

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    [16] = "j_bullet16",
    [15] = "j_bullet15",
    [14] = "j_bullet14",
    [13] = "j_bullet13",
    [12] = "j_bullet12",
    [11] = "j_bullet11",
    [10] = "j_bullet10",
    [9] = "j_bullet9",
    [8] = "j_bullet8",
    [7] = "j_bullet7",
    [6] = "j_bullet6",
    [5] = "j_bullet5",
    [4] = "j_bullet4",
    [3] = "j_bullet3",
    [2] = "j_bullet2",
}

SWEP.ExtraSightDist = 5
SWEP.Bipod_Integral = true

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "j_main_cover",
        Offset = {
            vpos = Vector(-5.2, 0, 0.45),
            vang = Angle(0, 0, 0),
        },
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(26, 0, 1.15),
            vang = Angle(0, 0, 0),
        },
		VMScale = Vector(2, 1.5, 1.5),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "ubgl", "bipod", "foregrip_mw2exclusive"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(10, 0, -0.4),
            vang = Angle(0, 0, 0),
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(16, -0.5, 0.8),
            vang = Angle(0, 0, 90),
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.5, -0.6, 2.75),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[3].Installed then
        return anim .. "_grip"
    end
end



SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 200/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 41/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["holster"] = {
        Source = "putaway",
        Time = 18/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["fire"] = {
        Source = "fire",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 13/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 291/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 7.13,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_lift_v1.wav", 			t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_chamber_v1.wav", 		t = 16/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_open_v1.wav", 			t = 79/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_clipout_v1.wav", 		t = 104/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_clipin_v1.wav", 		t = 148/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_close_v1.wav", 			t = 209/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_hit_v1.wav", 			t = 225/30},
					},
        LastClip1OutTime = 2.5,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 1,
    },
------------------
    ["idle_grip"] = {
        Source = "idle_grip",
        Time = 200/30
    },
    ["enter_sprint_grip"] = {
        Source = "sprint_in_grip",
        Time = 10/30
    },
    ["idle_sprint_grip"] = {
        Source = "sprint_loop_grip",
        Time = 30/40
    },
    ["exit_sprint_grip"] = {
        Source = "sprint_out_grip",
        Time = 10/30
    },
    ["draw_grip"] = {
        Source = "pullout_grip",
        Time = 41/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["holster_grip"] = {
        Source = "putaway_grip",
        Time = 18/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["fire_grip"] = {
        Source = "fire_grip",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_grip"] = {
        Source = "fire_ads_grip",
        Time = 13/30,
        ShellEjectAt = 0,
    },
    ["reload_grip"] = {
        Source = "reload_grip",
        Time = 291/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 7.13,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_lift_v1.wav", 			t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_chamber_v1.wav", 		t = 16/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_open_v1.wav", 			t = 79/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_clipout_v1.wav", 		t = 104/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_clipin_v1.wav", 		t = 148/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_close_v1.wav", 			t = 209/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_rpd_reload_hit_v1.wav", 			t = 225/30},
					},
        LastClip1OutTime = 2.5,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 1,
    },
}
--lua/weapons/arccw_mw2_w1200.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.WeaponCamBone = tag_camera

SWEP.PrintName = "W1200"
SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = "Pump action."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2/c_winchester.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-6, 3, -5),
    ang = Angle(-10, 0, 180),
    scale = 1.125
}
SWEP.WorldModel = "models/weapons/w_shot_m3super90.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 40
SWEP.DamageMin = 10
SWEP.Range = 800 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 1
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 7 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 9
SWEP.ReducedClipSize = 4

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 2
SWEP.RecoilSide = 2

SWEP.ShotgunReload = true
SWEP.ManualAction = true

SWEP.Delay = 10/30 -- 60 / RPM.
SWEP.Num = 8 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 80 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 350 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 100 -- inaccuracy added by moving. Applies in sights as well! Walking speed is considered as "maximum".
SWEP.SightsDispersion = 0 -- dispersion that remains even in sights

SWEP.Primary.Ammo = "buckshot" -- what ammo type the gun uses

SWEP.ShootVol = 120 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/shot_w1200.wav"
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/shot_w1200.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/shot_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_m3"
SWEP.ShellModel = "models/shells/shell_12gauge.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.8
SWEP.SightTime = 0.3

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.82, -4.163, 1.1),
    Ang = Angle(0.626, 0, 0),
    ViewModelFOV = 65 / 1.18,
    Magnification = 1.18,
}


SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "shotgun"
SWEP.HoldtypeSights = "ar2"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN

SWEP.ActivePos = Vector(-0.5, -3.75, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(5.479, -5, -1.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 14.8)

SWEP.HolsterPos = Vector(3, 0, 0) + Vector(-0.5, -3.75, 1)
SWEP.HolsterAng = Angle(-10, 25, 0)

SWEP.SprintPos = Vector(-0.5, -3.75, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.ExtraSightDist = 5

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
}

SWEP.Attachments = {
	{
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(1, 0, 1.8),
            vang = Angle(0, 0, 0),
            wang = Angle(-9.738, 0, 180)
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle_shotgun",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(20, 0, 0.8950),
            vang = Angle(0, 0, 0),
            wpos = Vector(26.648, 0.782, -8.042),
            wang = Angle(-9.79, 0, 180)
        },
		VMScale = Vector(1.25, 1.25, 1.25),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "j_pump",
        Offset = {
            vpos = Vector(0, 0, -0.7),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-10.216, 0, 180)
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(20, 0, -1),
            vang = Angle(0, 0, 0),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
		VMScale = Vector(1.25, 1.25, 1.25),
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_shotgun"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(1.5, -0.65, 0.1),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 2/30,
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 19/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 14/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["fire"] = {
        Source = "fire",
        Time = 10/30,
		MinProgress = 10/30,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 11/30,
		MinProgress = 11/30,
    },
    ["cycle"] = {
        Source = "rechamber",
        Time = 15/30,
        SoundTable = {{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 2/30}},
        ShellEjectAt = 2/30,
		MinProgress = 0.333, -- how much time in seconds must pass before the animation can be cancelled
    },
    ["cycle_iron"] = {
        Source = "rechamber_ads",
        Time = 15/30,
        SoundTable = {{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 2/30}},
        ShellEjectAt = 2/30,
		MinProgress = 0.333, -- how much time in seconds must pass before the animation can be cancelled
    },
    ["sgreload_start"] = {
        Source = "reload_start",
        Time = 31/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
		RestoreAmmo = 1, -- only used by shotgun empty insert reload
		-- it's modified, i'm sorry
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_lift_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_loop_v1.wav", 	t = 14/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0,
    },
    ["sgreload_insert"] = {
        Source = "reload_loop",
        Time = 18/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_loop_v1.wav", 		t = 3/30}},
        TPAnimStartTime = 0.3,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["sgreload_finish"] = {
        Source = "reload_finish",
        Time = 22/30,
        SoundTable = {{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 8/30}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.8,
    },
}

 -- Super fucky temp!
 -- S H U T  U P    A N D   K E E P  T H E M   P I N N E D  D O W N  

-- notverycreativenowarewe
local nvcnaw = 7

 -- hipfire
 -- maximum accuracy
    SWEP.Inaccuracy_Hip_Max_Stand	= nvcnaw
    SWEP.Inaccuracy_Hip_Max_Duck	= nvcnaw
    SWEP.Inaccuracy_Hip_Max_Prone	= nvcnaw
 -- minimum accuracy
    SWEP.Inaccuracy_Hip_Min_Stand   = nvcnaw
    SWEP.Inaccuracy_Hip_Min_Duck    = nvcnaw
    SWEP.Inaccuracy_Hip_Min_Prone   = nvcnaw

 -- sighted fire
 -- yeah
    SWEP.Inaccuracy_ADS = 5.5

 -- inaccuracy when you're... i don't remember
SWEP.Inaccuracy_Add_ADS			= 0
SWEP.Inaccuracy_Add_Hip			= 0
SWEP.Inaccuracy_Add_Move		= 0.1
--lua/weapons/arccw_uc_galil762.lua:
if !file.Exists("weapons/arccw_uc_galil.lua","LUA") then return end

include("weapons/arccw_uc_galil.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "IDF Defender 7.62"
SWEP.TrueName = "Galil AR 7.62"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "uc_galil_barrel_long"
SWEP.Attachments[7].Installed = "uc_galil_stock_fixed"
SWEP.Attachments[8].Installed = "uc_galil_mag_762"

SWEP.Hook_NameChange = function(wep)
    if wep.Attachments[2].Installed ~= "uc_galil_barrel_short" then
        return GetConVar("arccw_truenames"):GetBool() and "Galil AR" or "IDF Defender"
    end
end
--lua/weapons/arccw_uc_galilsar.lua:
return gluapack()()
--lua/weapons/arccw_ud_m16.lua:
return gluapack()()
--lua/weapons/arccw_ud_g26.lua:
return gluapack()()
--lua/weapons/arccw_ud_m79.lua:
return gluapack()()
--lua/weapons/arccw_ud_mini14.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellScale = 0.666
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_556"
SWEP.ShellPitch = 100

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "Patriot 809"

-- True name --

SWEP.TrueName = "Mini-14"

-- Trivia --

SWEP.Trivia_Class = "Semi-Automatic Rifle"
SWEP.Trivia_Desc = [[Autoloading rifle designed for better accuracy than competing models. Due to its appearance, it is sometimes exempted from gun control laws targeting "Assault Weapons" despite its identical ability to kill. This has helped it find success despite its higher cost and non-standard magazine well.

While it can perform well in close-quarters combat, its high accuracy excels in mid-range engagements.]]
SWEP.Trivia_Manufacturer = "Rifles International"
SWEP.Trivia_Calibre = "5.56x45mm NATO"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1973

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Sturm, Ruger & Company"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_mini14.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_mini14.mdl"
SWEP.ViewModelFOV = 70
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2
SWEP.DefaultSkin = 0
SWEP.DefaultPoseParams = {["grip"] = 0}

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["556"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["556"].min
SWEP.RangeMin = 50
SWEP.Range = 400 -- 4 shot until ~275m

SWEP.Penetration = ArcCW.UC.StdDmg["556"].pen
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 990
SWEP.PhysBulletMuzzleVelocity = 960

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 20
SWEP.ExtendedClipSize = 30
SWEP.ReducedClipSize = 10

-- Recoil --

SWEP.Recoil = 0.45
SWEP.RecoilSide = 0.2

SWEP.RecoilRise = 0.1
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 1

SWEP.Sway = 0.25

-- Firerate / Firemodes --

SWEP.Delay = 60 / 540
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 2
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 150
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "smg1"
SWEP.MagID = "mini14"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 5
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 100

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.9

-- Length --

SWEP.BarrelLength = 36
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(2, 0, -2)
SWEP.HolsterAng = Angle(-5.5, 20, -20)

SWEP.SprintPos = Vector(-0.5, -4, -2)
SWEP.SprintAng = Angle(3.5, 7, -20)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
    Pos = Vector(-4.305, -7, 2.55),
    Ang = Angle(0, 0, 0),
    Magnification = 1,
    SwitchToSound = "",
    CrosshairInSights = false,
}

SWEP.ActivePos = Vector(-1, -1, 1)
SWEP.ActiveAng = Angle(0, 0, -3)

SWEP.CustomizePos = Vector(5, -2, -2)
SWEP.CustomizeAng = Angle(15, 25, 0)

SWEP.CrouchPos = Vector(-5, -4, 0)
SWEP.CrouchAng = Angle(0, 0, -30)

SWEP.BarrelOffsetHip = Vector(3, 0, -3)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-10, 6.5, -6),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1 - ( 0.35 * 0.75 )
}

-- Firing sounds --

local path = ")weapons/arccw_ud/mini14/"
local common = ")/arccw_uc/common/"
SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = path .. "fire_supp.ogg"
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/556x45/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-556x45-rif-ext-01.ogg",
    tail .. "fire-dist-556x45-rif-ext-02.ogg",
    tail .. "fire-dist-556x45-rif-ext-03.ogg",
    tail .. "fire-dist-556x45-rif-ext-04.ogg",
    tail .. "fire-dist-556x45-rif-ext-05.ogg",
    tail .. "fire-dist-556x45-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [2] = "mini14_bullet1", [3] = "mini14_bullet2"
}

SWEP.AttachmentElements = {
    ["ud_mini14_mag_10"] = {
        VMBodygroups = {{ind = 4, bg = 2}},
    },
    ["ud_mini14_mag_30"] = {
        VMBodygroups = {{ind = 4, bg = 1}},
    },
    ["ud_mini14_mag_42"] = {
        VMBodygroups = {{ind = 4, bg = 4}},
    },
    ["ud_mini14_mag_60"] = {
        VMBodygroups = {{ind = 4, bg = 5}},
    },
    ["ud_mini14_mag_15_22lr"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
    },
    ["ud_mini14_mag_30_762"] = {
        VMBodygroups = {{ind = 4, bg = 6}},
    },
    ["ud_mini14_rail_optic"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },

    ["ud_mini14_rail_fg"] = {
        VMBodygroups = {{ind = 5, bg = 1}},
    },

    ["ud_mini14_barrel_long"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -2.15, 34.5),
            },
        },
    },
    ["ud_mini14_barrel_short"] = {
        VMBodygroups = {{ind = 3, bg = 2}},
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -2.15, 27.5),
            },
        },
    },
    ["ud_mini14_barrel_stub"] = {
        VMBodygroups = {{ind = 3, bg = 3}},
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -2.1, 25),
            },
        },
    },

    ["ud_mini14_receiver_762"] = {
        TrueNameChange = "Mini-30",
        NameChange = "Patriot 816"
    },
    ["ud_mini14_receiver_auto"] = {
        TrueNameChange = "AC-556",
        NameChange = "Patriot ACC"
    },
    ["ud_mini14_receiver_22lr"] = {
        TrueNameChange = "Mini-14 .22 LR",
        NameChange = "Patriot 822"
    },

    ["ud_mini14_stock_polymer"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        VMPoseParams = {["grip"] = 0}
    },
    ["ud_mini14_stock_sawnoff"] = {
        VMBodygroups = {{ind = 1, bg = 2}},
        VMPoseParams = {["grip"] = 0}
    },
    ["ud_mini14_stock_tactical"] = {
        VMBodygroups = {{ind = 1, bg = 4}},
        VMPoseParams = {["grip"] = 1}
    },
    ["ud_mini14_stock_tactical_polymer"] = {
        VMBodygroups = {{ind = 1, bg = 3}},
        VMSkin = 1,
        VMPoseParams = {["grip"] = 1}
    },

    ["ud_mini14_clamp"] = {
        VMBodygroups = {{ind = 6, bg = 1}},
    },
}

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

SWEP.Animations = {
    ["ready"] = {
        Source = "unjam",
        Time = 40 / 30,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = path .. "chback.ogg",  t = 0.25},
            {s = path .. "chamber.ogg", t = 0.35},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.8},
            {s = common .. "shoulder.ogg",  t = 1},
        },
        LHIK = true,
        LHIKIn = 0.5,
        LHIKEaseIn = 0.5,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.5,
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 12 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster"] = {
        Source = "holster",
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0,
        LHIKOut = 0,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 12 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0,
        LHIKOut = 0,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire"] = {
        Source = "fire",
        Time = 20 / 30,
        ShellEjectAt = 0.01,
        LastClip1OutTime = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 20 / 30,
        ShellEjectAt = 0.01,
        LastClip1OutTime = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 20 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 20 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },
    ["unjam"] = {
        Source = "unjam",
        Time = 40 / 30,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "chback.ogg",  t = 0.25},
            {s = path .. "chamber.ogg", t = 0.35},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.8},
            {s = common .. "shoulder.ogg",  t = 1},
        },
        LHIK = true,
        LHIKIn = 0.5,
        LHIKEaseIn = 0.5,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.5,
        ShellEjectAt = .35,
    },
    -- 20 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 66 / 30,
        MinProgress = 1.4,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.25},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.4},
            {s = common .. "magpouch.ogg", t = 0.6},
            {s = path .. "magin.ogg",   t = 1.05},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.3},
            {s = common .. "shoulder.ogg",  t = 1.75},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.1,
        LastClip1OutTime = 1,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.15},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.4},
            {s = common .. "magpouch.ogg", t = 0.6},
            {s = common .. "rifle_magdrop.ogg",  t = 0.9},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = path .. "chback.ogg",  t = 1.85},
            {s = path .. "chamber.ogg", t = 1.95},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.2},
            {s = common .. "shoulder.ogg",  t = 2.4},
        },
    },

    -- 10 Round Reloads --

    ["reload_10"] = {
        Source = "reload_10",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 67 / 30,
        MinProgress = 1.6,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.15},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.6, c = ci},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.5},
        },
    },
    ["reload_empty_10"] = {
        Source = "reload_empty_10",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.1,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.15},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.4},
            {s = common .. "magpouch.ogg", t = 0.6, c = ci},
            {s = common .. "rifle_magdrop.ogg",  t = 0.9},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = path .. "chback.ogg",  t = 1.90},
            {s = path .. "chamber.ogg", t = 2.00},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.5},
        },
    },

    -- 30 Round Reloads --

    ["reload_30"] = {
        Source = "reload_30",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 67 / 30,
        MinProgress = 1.4,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.3},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.7, c = ci},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.4},
            {s = common .. "shoulder.ogg",  t = 1.85},
        },
    },
    ["reload_empty_30"] = {
        Source = "reload_empty_30",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.3,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.65, c = ci},
            {s = common .. "rifle_magdrop.ogg",  t = 0.9},
            {s = path .. "magin.ogg",   t = 1.20},
            {s = path .. "chback.ogg",  t = 2},
            {s = path .. "chamber.ogg", t = 2.1},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.3},
            {s = common .. "shoulder.ogg",  t = 2.65},
        },
    },

    -- 30 polymer Reloads --

    ["reload_30_tac"] = {
        Source = "reload_30_tac",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 67 / 30,
        MinProgress = 1.4,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.3},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.7, c = ci},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.4},
            {s = common .. "shoulder.ogg",  t = 1.85},
        },
    },
    ["reload_empty_30_tac"] = {
        Source = "reload_empty_30_tac",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.3,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.65, c = ci},
            {s = common .. "rifle_magdrop.ogg",  t = 0.9},
            {s = path .. "magin.ogg",   t = 1.20},
            {s = path .. "chback.ogg",  t = 2},
            {s = path .. "chamber.ogg", t = 2.1},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.3},
            {s = common .. "shoulder.ogg",  t = 2.65},
        },
    },

    -- 7.62 reloads --

    ["reload_762"] = {
        Source = "reload_762",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 67 / 30,
        MinProgress = 1.4,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.3},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.7, c = ci},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.4},
            {s = common .. "shoulder.ogg",  t = 1.85},
        },
    },
    ["reload_empty_762"] = {
        Source = "reload_empty_762",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.3,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.65, c = ci},
            {s = common .. "rifle_magdrop.ogg",  t = 0.9},
            {s = path .. "magin.ogg",   t = 1.20},
            {s = path .. "chback.ogg",  t = 2},
            {s = path .. "chamber.ogg", t = 2.1},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.3},
            {s = common .. "shoulder.ogg",  t = 2.65},
        },
    },

    -- 60 round reloads (?) --

    ["reload_60"] = {
        Source = "reload_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 67 / 30,
        MinProgress = 1.4,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.35},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.7, c = ci},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.4},
            {s = common .. "shoulder.ogg",  t = 1.85},
        },
    },
    ["reload_empty_60"] = {
        Source = "reload_empty_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.3,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.35},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.7, c = ci},
            {s = common .. "rifle_magdrop.ogg",  t = 0.9},
            {s = path .. "magin.ogg",   t = 1.20},
            {s = path .. "chback.ogg",  t = 1.9},
            {s = path .. "chamber.ogg", t = 2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.3},
            {s = common .. "shoulder.ogg",  t = 2.65},
        },
    },

    -- 15 22lr Round Reloads --

    ["reload_15_22lr"] = {
        Source = "reload_15_22lr",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 67 / 30,
        MinProgress = 1.6,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.45,
        LHIKOut = 0.7,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.15},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.3},
            {s = common .. "magpouch.ogg", t = 0.65, c = ci},
            {s = path .. "magin.ogg",   t = .9},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.4},
        },
    },
    ["reload_empty_15_22lr"] = {
        Source = "reload_empty_15_22lr",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.45,
        LHIKOut = 0.6,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.0},
            {s = path .. "magout.ogg", 	t = 0.15},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.5},
            {s = common .. "pistol_magdrop.ogg",  t = 0.9},
            {s = common .. "magpouch.ogg", t = 0.7, c = ci},
            {s = path .. "magin.ogg",   t = 1.10},
            {s = path .. "chback.ogg",  t = 1.9},
            {s = path .. "chamber.ogg", t = 2.0},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 2.3},
        },
    },
}

SWEP.Hook_ModifyBodygroups = function(wep,data)
    local vm = data.vm
    if !IsValid(vm) then return end

    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default","ud_mini14_barrel_","")
    local muzz = atts[3].Installed
    local tac = atts[6].Installed

    if muzz or barr == "stub" or barr == "default" then
        vm:SetBodygroup(7,2)
    elseif barr == "short" then
        vm:SetBodygroup(7,1)
    elseif barr == "long" then
        vm:SetBodygroup(7,0)
    end

    if !tac then
       vm:SetBodygroup(6,0)
    end
end

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp","optic","optic_sniper"},
        Bone = "mini14_parent",
        Offset = {
            vpos = Vector(0, -3.6, 6),
            vang = Angle(90, 2, -90),
        },
        VMScale = Vector(1.2,1.2,1.2),
        WMScale = VMScale,
        InstalledEles = {"ud_mini14_rail_optic"},
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "20\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_mini14_barrel.png", "smooth mips"),
        Slot = "ud_mini14_barrel",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "mini14_parent",
        Offset = {
            vpos = Vector(0, -2.15, 30),
            vang = Angle(90, 0, -90),
            wpos = vpos,
        },
        VMScale = Vector(1.5,1.5,1.5),
        WMScale = VMScale,
        ExcludeFlags = {"nomuzzle"},
    },
    {
        PrintName = "Receiver",
        DefaultAttName = "Mini-14 Receiver",
        DefaultAttIcon = Material("entities/att/acwatt_ud_mini14_receiver.png", "smooth mips"),
        Slot = "ud_mini14_receiver",
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "mini14_parent",
        Offset = {
            vpos = Vector(0, 0, 14),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_mini14_rail_fg"},
        MergeSlots = {14}
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "mini14_parent",
        Offset = {
            vpos = Vector(0, -1.5, 22.3),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_mini14_clamp"},
    },
    {
        PrintName = "Magazine",
        Slot = {"ud_mini14_mag"},
        DefaultAttName = "20-Round Mag",
        DefaultAttIcon = Material("entities/att/acwatt_ud_mini14_mag_20.png", "smooth mips"),
    },
    {
        PrintName = "Stock",
        Slot = {"ud_mini14_stock"},
        DefaultAttName = "Wooden Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_mini14_stock.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "mini14_parent",
        Offset = {
            vpos = Vector(1.1, -0.5, 6),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "mini14_parent",
        Offset = {
            vpos = Vector(0, -1.2, 10),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_mini14_rail_fg"},
        ExcludeFlags = {"ak_noubs","barrel_rpk"},
        Hidden = true,
    }
}
--lua/weapons/arccw_ud_870.lua:
return gluapack()()
--lua/weapons/arccw_ud_870.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_shotgun"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/12g.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.UC_ShellColor = Color(0.7*255, 0.2*255, 0.2*255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3

-- Fake name --

SWEP.PrintName = "Express-12"

-- True name --

SWEP.TrueName = "Remington 870"

-- Trivia --

SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = "Classic pump-action shotgun, renowned for its high quality parts and assembly. A simple firearm with a simple purpose. Marketed primarily to civilians for use in hunting game and self-defense, but it has found popularity among police departments for a relatively innocuous appearance and ability to accept custom loaded less-lethal shells."
SWEP.Trivia_Manufacturer = "Mauer Armaments"
SWEP.Trivia_Calibre = "12 Gauge"
SWEP.Trivia_Mechanism = "Pump Action"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1950

-- Weapon slot --

SWEP.Slot = 3

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Remington Arms"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_870.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_870.mdl"
SWEP.ViewModelFOV = 60
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN
SWEP.DefaultBodygroups = "000000000"

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-5.5, 5, -5.5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1 - ( 0.35 * 0.5 )
}

-- Damage parameters --

SWEP.Damage = ArcCW.UC.StdDmg["12g_p"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["12g_p"].min
SWEP.Penetration = ArcCW.UC.StdDmg["12g_p"].pen
SWEP.Num = ArcCW.UC.StdDmg["12g_p"].num

SWEP.Range = 50
SWEP.RangeMin = 5
SWEP.DamageType = DMG_BUCKSHOT
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 200

SWEP.HullSize = 0.5

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults_Shotgun

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 6
SWEP.ExtendedClipSize = 8
SWEP.ReducedClipSize = 6

-- Recoil --

SWEP.Recoil = 3.1
SWEP.RecoilSide = 1

SWEP.RecoilRise = 0.24
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 60
SWEP.Firemodes = {
    {
        PrintName = "fcg.pump",
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NoLastCycle = true
SWEP.ManualAction = true
SWEP.ShotgunReload = true

SWEP.ShootVol = 160
SWEP.ShootPitch = 100

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 210

-- Accuracy --

SWEP.AccuracyMOA = 30
SWEP.HipDispersion = 400
SWEP.MoveDispersion = 100
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "buckshot"

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.4
SWEP.ShootSpeedMult = 0.75

-- Length --

SWEP.BarrelLength = 32
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-3.66, -3, 2.2),
     Ang = Angle(-0.75, 0, 2.8),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.HolsterPos = Vector(2, 0, -2)
SWEP.HolsterAng = Angle(-5.5, 20, -20)

SWEP.SprintPos = Vector(-0.5, -4, -2)
SWEP.SprintAng = Angle(3.5, 7, -20)

SWEP.ActivePos = Vector(-0.75, -2, 1)
SWEP.ActiveAng = Angle(0, 0, -3)

SWEP.CrouchPos = Vector(-3.8, -2, 0)
SWEP.CrouchAng = Angle(0, 0, -30)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(3, 0, -4)



SWEP.Malfunction = true
SWEP.MalfunctionTakeRound = true
SWEP.MalfunctionMean = 500
SWEP.MalfunctionVariance = 0.99
-- Firing sounds --

local path = ")weapons/arccw_ud/870/"
local common = ")/arccw_uc/common/"
SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
--[[SWEP.DistantShootSound = path .. "fire_dist.ogg"
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"]]
SWEP.ShootDrySound = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}

local tail = ")/arccw_uc/common/12ga/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-12ga-pasg-ext-01.ogg",
    tail .. "fire-dist-12ga-pasg-ext-02.ogg",
    tail .. "fire-dist-12ga-pasg-ext-03.ogg",
    tail .. "fire-dist-12ga-pasg-ext-04.ogg",
    tail .. "fire-dist-12ga-pasg-ext-05.ogg",
    tail .. "fire-dist-12ga-pasg-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-shotgun-01.ogg",
    common .. "fire-dist-int-shotgun-02.ogg",
    common .. "fire-dist-int-shotgun-03.ogg",
    common .. "fire-dist-int-shotgun-04.ogg",
    common .. "fire-dist-int-shotgun-05.ogg",
    common .. "fire-dist-int-shotgun-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.Hook_Think = ArcCW.UC.ADSReload

local shellin = {path .. "shell-insert-01.ogg", path .. "shell-insert-02.ogg", path .. "shell-insert-03.ogg"}

SWEP.Animations = {
    ["ready"] = {
        Source = "sgreload_finish_empty",
        Time = 37 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 1.2,
        LHIKOut = 1.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0.2},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.5},
            {s = path .. "rack_1.ogg",  t = 0.4},
            {s = path .. "rack_2.ogg",  t = 0.6},
            {s = common .. "shoulder.ogg",  t = 0.9},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle",
    },
    ["draw"] = {
        Source = "draw",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster"] = {
        Source = "holster",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire"] = {
        Source = "fire",
        --Time = 23 / 30,
        MinProgress = 8 / 30,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        --Time = 23 / 30,
        MinProgress = 8 / 30,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["cycle"] = {
        Source = "cycle",
        --Time = 20 / 30,
        ShellEjectAt = 0.1,
        MinProgress = 0.26,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "rack_1.ogg",  t = 0},
            {s = path .. "eject.ogg",  t = 0.1},
            {s = path .. "rack_2.ogg",  t = 0.11},
        },
    },

    ["cycle_jammed"] = {
        Source = "jamcycle",
        --Time = 20 / 30,
        ShellEjectAt = 0.1,
        MinProgress = 0.26,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = path .. "rack_1.ogg",  t = 0},
            {s = path .. "eject.ogg",  t = 0.1},
            {s = path .. "rack_2.ogg",  t = 0.11},
        },
    },

    ["fix"] = {
        Source = "fix",
        Time = 50 / 30,
        ShellEjectAt = 0.7, -- should make the shell eject offscreen cuz the anim already has it
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.5},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1},
            {s = path .. "rack_1.ogg",  t = 0.6},
            {s = path .. "eject.ogg",  t = 0.7},
            {s = path .. "rack_2.ogg",  t = 0.9},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 1.7},
        }
    },
    ["sgreload_start"] = {
        Source = "sgreload_start",
        Time = 16 / 30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = common .. "shoulder.ogg",  t = 0.1},
        },
    },
    ["sgreload_insert"] = {
        Source = "sgreload_insert",
        Time = 18 / 30,
        MinProgress = 0.24,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.3,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
        SoundTable = {
            {s = shellin, t = 0},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
        },
    },
    ["sgreload_finish"] = {
        Source = "sgreload_finish",
        Time = 20 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.4,
        TPAnimStartTime = 0.8,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0},
            {s = common .. "shoulder.ogg",  t = 0.27},
        },
    },
    ["sgreload_finish_empty"] = {
        Source = "sgreload_finish_empty",
        Time = 37 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.6,
        LHIKOut = 0.8,
        TPAnimStartTime = 0.5,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        ShellEjectAt = 0.5,
        SoundTable = {
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.5},
            {s = path .. "rack_1.ogg",  t = 0.4},
            {s = path .. "eject.ogg",  t = 0.5},
            {s = path .. "rack_2.ogg",  t = 0.525},
            {s = common .. "shoulder.ogg",  t = 0.9},
        },
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    if !IsValid(vm) then return end
    -- if wep.Attachments[1].Installed then
    --     vm:SetBodygroup(8, 2)
    -- elseif wep.Attachments[2].Installed == "ud_870_barrel_long" then
    --     vm:SetBodygroup(8, 1)
    -- else
    --     vm:SetBodygroup(8, 0)
    -- end

    -- 8rnd tube and either barrel should remove the clamp
    if vm:GetBodygroup(7) == 1 and vm:GetBodygroup(1) != 0 then
        vm:SetBodygroup(7, 2)
    end
end


SWEP.BulletBones = {
    [0] = "870_shell1",
}

SWEP.DefaultSkin = 1

-- Bodygroups --

SWEP.AttachmentElements = {
    ["ud_870_optic_ringsight"] = {
        VMBodygroups = {
            {ind = 8, bg = 1},
        },
        Override_IronSightStruct = {
            Pos = Vector(-3.665, -2.75, 2.1),
            Ang = Angle(-0.6, 0, 1),
            Magnification = 1.1,
            SwitchToSound = "",
        },
    },
    ["optic_rail"] = {
        VMBodygroups = {
            {ind = 8, bg = 2},
        }
    },
    ["ud_shotgun_rail_fg"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
    },
    ["ud_870_slide_moe"] = {
        VMBodygroups = {{ind = 6, bg = 1}},
    },
    ["ud_870_slide_long"] = {
        VMBodygroups = {{ind = 6, bg = 2}},
    },
    ["ud_870_slide_poly"] = {
        VMBodygroups = {{ind = 6, bg = 3}},
    },
    ["ud_shotgun_rail_fg"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
    },
    ["ud_870_barrel_long"] = {
        AttPosMods = {
            [3] = {
                vpos = Vector(-0.03, -0.65, 39.5),
            }
        },
        VMBodygroups = {
            {ind = 1, bg = 1},
        },
    },
    ["ud_870_barrel_sawnoff"] = {
        VMBodygroups = {
        {ind = 1, bg = 2},
        {ind = 7, bg = 2}
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(-0.03, -0.9, 19),
            }
        },
    },
    ["ud_870_tube_reduced"] = {
        VMBodygroups = {
            {ind = 2, bg = 2},
            {ind = 7, bg = 2}
        },
    },
    ["ud_870_tube_ext"] = {
        VMBodygroups = {
            {ind = 2, bg = 1},
            {ind = 7, bg = 1}
        },
    },
    ["ud_870_stock_poly"] = {
        VMBodygroups = {{ind = 4, bg = 1}},
    },
    ["ud_870_stock_sawnoff"] = {
        VMBodygroups = {{ind = 4, bg = 2}},
    },
    ["ud_870_stock_raptor"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
    },

    ["ud_870_skin_dirty"] = {
        VMSkin = 0
    },
    ["ud_870_skin_custom"] = {
        VMSkin = 3
    },
}

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp","optic","optic_sniper","ud_870_optic"},
        Bone = "870_parent",
        Offset = {
            vpos = Vector(0, -1.75, -2),
            vang = Angle(90, 0, -90),
        },
        VMScale = Vector(1, 1, 1),
        CorrectiveAng = Angle(1.8, 0.1, 0),
        InstalledEles = {"optic_rail"}
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "16\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_870_barrel.png", "smooth mips"),
        Slot = "ud_870_barrel",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"choke", "muzzle_shotgun"},
        Bone = "870_parent",
        Offset = {
            vpos = Vector(-0.03, -0.75, 26.3),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Forend",
        DefaultAttName = "Factory Forend",
        DefaultAttIcon = Material("entities/att/acwatt_ud_870_slide.png", "smooth mips"),
        Slot = {"ud_870_slide"},
        Bone = "870_slide",
        Offset = {
            vpos = Vector(3, -4.4, -29),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "870_slide",
        Offset = {
            vpos = Vector(0, 1.1, 0),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"ud_shotgun_rail_fg"}
    },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "870_slide",
        Offset = {
            vpos = Vector(0, 1, 4.25),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Stock",
        DefaultAttName = "Wooden Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_870_stock.png", "smooth mips"),
        Slot = {"ud_870_stock"},
    },
    {
        PrintName = "Tube Type",
        Slot = {"ud_870_tube"},
        DefaultAttName = "6 Shell Tube",
        DefaultAttIcon = Material("entities/att/acwatt_ud_870_tube.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"BUCK\" #00 Buckshot",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_shotgun_generic.png", "mips smooth"),
        Slot = "ud_ammo_shotgun",
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "870_parent",
        Offset = {
            vpos = Vector(0.7, 0, 5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Skin",
        Slot = "ud_870_skin",
        DefaultAttName = "Polished Steel",
        FreeSlot = true
    }
}

local lookup_barrel = {
    default = 1,
    ud_870_barrel_long = 2,
    ud_870_barrel_sawnoff = 0,
}

local lookup_tube = {
    default = 1,
    ud_870_tube_ext = 2,
    ud_870_tube_reduced = 0,
}

SWEP.Hook_ExtraFlags = function(wep, data)

    local barrel = wep.Attachments[2].Installed and lookup_barrel[wep.Attachments[2].Installed] or lookup_barrel["default"]
    local tube = wep.Attachments[8].Installed and lookup_tube[wep.Attachments[8].Installed] or lookup_tube["default"]

    if barrel < tube then
        table.insert(data, "nomuzzleblocking")
    end
end
--lua/weapons/arccw_ur_329.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_pistol_deagle"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/50ae.mdl"
SWEP.ShellScale = 1
SWEP.UC_ShellColor = Color(0.7*255, 0.2*255, 0.2*255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.TracerNum = 1
SWEP.TracerWidth = 1
SWEP.ShootPitch = 100

-- Fake name --

SWEP.PrintName = "Enforcement .44"

-- True name --

SWEP.TrueName = "Model 329PD"

-- Trivia --

SWEP.Trivia_Class = "Revolver"
SWEP.Trivia_Desc = [[Though commonly viewed as archaic, revolvers maintain a large following today for their reliability, accuracy, and evocative sentiment. This model was famously "the most powerful handgun in the world" at its time, though its usurpers have not changed the fact that it packs a mean punch.

Has a heavy trigger pull. Single-action mode removes trigger delay and increases accuracy, but requires manual cocking of the hammer.]]
SWEP.Trivia_Manufacturer = "Sneed & Walwakashi"
SWEP.Trivia_Calibre = ".44 Magnum"
SWEP.Trivia_Mechanism = "Double-Action"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1955

-- Weapon slot --

SWEP.Slot = 1

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Smith & Wesson"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ur_329pd.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_329pd.mdl"
SWEP.ViewModelFOV = 70
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER

-- Damage parameters --

SWEP.Damage = 75 -- 2 shot close range kill
SWEP.DamageMin = 16 -- 7 shot long range kill
SWEP.RangeMin = 10
SWEP.Range = 160
SWEP.Penetration = 10
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 470
SWEP.PhysBulletMuzzleVelocity = 470

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Jamming --

SWEP.MalfunctionTakeRound = false
SWEP.MalfunctionMean = math.huge -- Theoretically it will never malfunction

-- Mag size --

SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 6
SWEP.RejectMagSizeChange = true -- Signals to attachments that mag size shouldn't be changeable; needs to be implemented attachment-side with att.Compatible
SWEP.UC_CanManualAction = true -- In case this ever applies to anything other than shotguns

-- Recoil --

SWEP.Recoil = 3
SWEP.RecoilSide = 1

SWEP.RecoilRise = 0.5
SWEP.VisualRecoilMult = 1.5
SWEP.MaxRecoilBlowback = 2
SWEP.MaxRecoilPunch = 6

SWEP.Sway = 1.1

-- Firerate / Firemodes --

SWEP.TriggerDelay = true

SWEP.Delay = 0.25
SWEP.Num = 1
SWEP.FiremodeSound = false
SWEP.Firemodes = {
    {
        Mode = 1,
        PrintName = "ur.329.dact",
    },
   {
       Mode = 1,
       PrintName = "ur.329.sact",
       Override_ManualAction = true,
       Mult_AccuracyMOA = 0.5,
       Mult_HipDispersion = (1/3),
       Mult_MoveDispersion = (1/3),
       Mult_ShootSpeedMult = 3,
       Override_TriggerDelay = false,
   },
    {
        Mode = 0,
        PrintName = "fcg.safe2",
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = false -- can't in mw and can't here

-- NPC --

SWEP.NPCWeaponType = "weapon_357"
SWEP.NPCWeight = 70

-- Accuracy --

SWEP.AccuracyMOA = 2
SWEP.HipDispersion = 500
SWEP.MoveDispersion = 250
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "357"
SWEP.MagID = "deagle"

-- Speed multipliers --

SWEP.SpeedMult = 0.95
SWEP.SightedSpeedMult = 0.9
SWEP.SightTime = 0.25
SWEP.ShootSpeedMult = 0.8

-- Length --

SWEP.BarrelLength = 12
SWEP.ExtraSightDist = 10

-- Ironsights / Customization / Poses --

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "revolver"
SWEP.HoldtypeSights = "revolver"

SWEP.IronSightStruct = {
     Pos = Vector(-2.7, 2, 0.733),
     Ang = Angle(0, 0, 0),
     Magnification = 1,
     SwitchToSound = "",
     ViewModelFOV = 55,
}

SWEP.ActivePos = Vector(0, 2, 0.9)
SWEP.ActiveAng = Angle(0, 0, -1)

SWEP.CustomizePos = Vector(2, 0, -1.5)
SWEP.CustomizeAng = Angle(15, 15, 05)

SWEP.CrouchPos = Vector(-2.2, 1, 0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.HolsterPos = Vector(-1, 2, 1)
SWEP.HolsterAng = Angle(-15.5, 2, -4)

SWEP.SprintPos = Vector(0.3, 1, 0)
SWEP.SprintAng = Angle(-3, 9, -12)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-7.5, 4, -4.5),
    ang        =    Angle(-6, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
}

-- Weapon sounds --

local path = ")weapons/arccw_ur/sw329/"
local path1 = ")weapons/arccw_ur/sw586/"
local path2 = ")weapons/arccw_ur/1911/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}

SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = {common .. "revolver_hammer-01.ogg", common .. "revolver_hammer-02.ogg", common .. "revolver_hammer-03.ogg"}

local tail = ")/arccw_uc/common/44mag/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-44mag-pistol-ext-01.ogg",
    tail .. "fire-dist-44mag-pistol-ext-02.ogg",
    tail .. "fire-dist-44mag-pistol-ext-03.ogg",
    tail .. "fire-dist-44mag-pistol-ext-04.ogg",
    tail .. "fire-dist-44mag-pistol-ext-05.ogg",
    tail .. "fire-dist-44mag-pistol-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-shotgun-01.ogg",
    common .. "fire-dist-int-shotgun-02.ogg",
    common .. "fire-dist-int-shotgun-03.ogg",
    common .. "fire-dist-int-shotgun-04.ogg",
    common .. "fire-dist-int-shotgun-05.ogg",
    common .. "fire-dist-int-shotgun-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    path .. "fire-dist-01.ogg",
    path .. "fire-dist-02.ogg",
    path .. "fire-dist-03.ogg",
    path .. "fire-dist-04.ogg",
    path .. "fire-dist-05.ogg",
    path .. "fire-dist-06.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-shotgun-01.ogg",
    common .. "fire-dist-int-shotgun-02.ogg",
    common .. "fire-dist-int-shotgun-03.ogg",
    common .. "fire-dist-int-shotgun-04.ogg",
    common .. "fire-dist-int-shotgun-05.ogg",
    common .. "fire-dist-int-shotgun-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 0.75
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [1] = "Bullet1",    [2] = "Bullet2",    [3] = "Bullet3", [4] = "Bullet4",    [5] = "Bullet5",    [6] = "Bullet6"
}

SWEP.DefaultBodygroups = "000000000"

SWEP.AttachmentElements = {
    ["ur_329_barrel_m29"] = {
        VMBodygroups = { { ind = 1, bg = 1 } },
        NameChange = "Thunderbolt .44",
        TrueNameChange = "Model 29"
    },
    ["ur_329_barrel_master"] = {
        VMBodygroups = { { ind = 1, bg = 2 } },
        NameChange = "Thunderbolt .44 Master",
        TrueNameChange = "Model 29"
    },
    ["ur_329_barrel_pocket"] = {
        VMBodygroups = { { ind = 1, bg = 3 } },
        NameChange = "Companion .44",
        TrueNameChange = "Model 629"
    }
}

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload
SWEP.RevolverReload = true

SWEP.Hook_TranslateAnimation = function(wep,anim)
    if wep:GetCurrentFiremode().Override_ManualAction and anim == "fire_dry" then
        return "fire_dry_sact"
    end
    if wep:GetCurrentFiremode().Override_ManualAction and anim ~= "fire" and (anim ~= "reload" or !wep:GetNeedCycle()) then
        return anim .. "_cocked"
    end
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 3,
    },
    ["idle_cocked"] = {
        Source = "idle_cocked",
        Time = 3,
    },
    ["ready"] = {
        Source = "ready",
        Time = 86 / 60,
        SoundTable = {
            {s = path2 .. "draw.ogg", t = 0},
            { s = path1 .. "cylinder_in.ogg", t = 0.2 },
            {s = common .. "raise.ogg", t = 0.55},
        },
    },
    ["draw"] = {
        Source = "draw",
        Time = 0.7,
        MinProgress = .4,
        SoundTable = {
            {s = path2 .. "draw.ogg", t = 0}, -- Not Temporary
            {s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["draw_cocked"] = {
        Source = "draw_cocked",
        Time = 0.7,
        MinProgress = .4,
        SoundTable = {
            {s = path2 .. "draw.ogg", t = 0}, -- Not Temporary
            {s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["holster"] = {
        Source = "holster",
        Time = 0.5,
        SoundTable = {
            {s = common .. "cloth_2.ogg", t = 0},
            {s = path2 .. "holster.ogg", t = 0.12}, -- Not Temporary
        },
    },
    ["holster_cocked"] = {
        Source = "holster_cocked",
        Time = 0.5,
        SoundTable = {
            {s = common .. "cloth_2.ogg", t = 0},
            {s = path2 .. "holster.ogg", t = 0.12}, -- Not Temporary
        },
    },

    ["fire"] = {
        Source = "fire",
        SoundTable = {
            { s = {common .. "revolver_hammer-01.ogg", common .. "revolver_hammer-02.ogg", common .. "revolver_hammer-03.ogg"}, t = 0 }
        },
        MinProgress = .2,
    },
    ["fire_dry"] = {
        Source = "dryfire",
        SoundTable = {
            { s = {common .. "revolver_hammer-01.ogg", common .. "revolver_hammer-02.ogg", common .. "revolver_hammer-03.ogg"}, t = 0 }
        },
    },
    ["fire_dry_sact"] = {
        Source = "dryfire_sact",
        SoundTable = {
            { s = {common .. "revolver_hammer-01.ogg", common .. "revolver_hammer-02.ogg", common .. "revolver_hammer-03.ogg"}, t = 0 },
            { s = { common .. "revolver_trigger-01.ogg", common .. "revolver_trigger-03.ogg" }, t = 0.25 + 0.2 },
        },
    },

    ["trigger"] = {
        Source = "trigger",
        Time = 0.1,
        SoundTable = {
            { s = { common .. "revolver_trigger-01.ogg", common .. "revolver_trigger-02.ogg", common .. "revolver_trigger-03.ogg" }, t = 0 }
        },
    },

    ["cycle"] = {
        Source = "cocking",
        MinProgress = 0.5,
        SoundTable = {
            { s = { common .. "revolver_trigger-01.ogg", common .. "revolver_trigger-03.ogg" }, t = 0.2 }
        }
    },

    ["fix"] = {
        Source = "cocking",
        MinProgress = 0.5,
        SoundTable = {
            { s = { common .. "revolver_trigger-01.ogg", common .. "revolver_trigger-03.ogg" }, t = 0.2 }
        }
    },

    ["1_to_2"] = {
        Source = "cocking",
        Time = 0.8,
        SoundTable = {
            { s = { common .. "revolver_trigger-01.ogg", common .. "revolver_trigger-03.ogg" }, t = 0.1 }
        }
    },
    ["2_to_1"] = {
        Source = "decocking",
        Time = 0.8,
        SoundTable = {
            { s = common .. "revolver_trigger-02.ogg", t = 0.1 }
        }
    },
    ["2_to_3"] = {
        Source = "decocking",
        Time = 0.8,
        SoundTable = {
            { s = common .. "revolver_trigger-02.ogg", t = 0.1 }
        }
    },

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_REVOLVER,
        Time = 3.0,
        MinProgress = 1.8,
        ShellEjectAt = 1,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.6,
        LHIKOut = 0.62,
        SoundTable = {
            { s = rottle, t = 0 },
            { s = path .. "cyl_latch.ogg", t = 0.1 },
            { s = path1 .. "cylinder_out.ogg", t = 0.2 },
            { s = path1 .. "extractor1.ogg", t = 0.65 },
            { s = path1 .. "extract1.ogg", t = 0.65, p = 110, v = 0.25 },
            { s = path1 .. "extractor2.ogg", t = 0.75, p = 110 },
            { s = path1 .. "cylinder_extract.ogg", t = 0.75 },
            { s = path1 .. "extractor2.ogg", t = 0.825 },
            { s = common .. "magpouch_pull_small.ogg", t = 1.2, v = 0.2 },
            { s = path1 .. "speedloader.ogg", t = 1.65 },
            { s = path1 .. "cylinder_in.ogg", t = 2.15 },
            { s = rottle, t = 2.4 },
        },
    },
    ["reload_cocked"] = {
        Source = "reload_cocked",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_REVOLVER,
        Time = 3.0,
        MinProgress = 1.8,
        ShellEjectAt = 1,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.6,
        LHIKOut = 0.62,
        SoundTable = {
            { s = rottle, t = 0 },
            { s = path .. "cyl_latch.ogg", t = 0.1 },
            { s = path1 .. "cylinder_out.ogg", t = 0.2 },
            { s = path1 .. "extractor1.ogg", t = 0.65 },
            { s = path1 .. "extract1.ogg", t = 0.65, p = 110, v = 0.25 },
            { s = path1 .. "extractor2.ogg", t = 0.75, p = 110 },
            { s = path1 .. "cylinder_extract.ogg", t = 0.75 },
            { s = path1 .. "extractor2.ogg", t = 0.825 },
            { s = common .. "magpouch_pull_small.ogg", t = 1.2, v = 0.2 },
            { s = path1 .. "speedloader.ogg", t = 1.65 },
            { s = path1 .. "cylinder_in.ogg", t = 2.15 },
            { s = rottle, t = 2.4 },
        },
    },
}

-- Attachments --

SWEP.CamAttachment = 3

SWEP.Attachments = {
    {
        PrintName = "Optic",
        Slot = {"optic_lp"},
        DefaultAttName = "Iron Sights",
        Bone = "Body",
        Offset = {
            vpos = Vector(3, -3.6, 0),
            vang = Angle(0, 0, -90),
        },
    },
    {
        PrintName = "Barrel",
        Slot = {"ur_329_barrel"},
        DefaultAttIcon = Material("entities/att/acwatt_ur_329_barrel.png","mips smooth"),
        DefaultAttName = "4\" Snubnose Barrel",
        Bone = "Body",
        Offset = {
            vpos = Vector(3.07, -3.8, -27),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Caliber",
        Slot = {"ur_329_caliber"},
        DefaultAttIcon = Material("entities/att/uc_bullets/44magnum.png","mips smooth"),
        DefaultAttName = ".44 Magnum",
        Bone = "Body",
        Offset = {
            vpos = Vector(3.07, -3.8, -27),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Tactical",
        InstalledEles = {"tac_rail"},
        Slot = {"tac_pistol"},
        Bone = "Body",
        Offset = {
            vpos = Vector(6.75, -2.5, 0),
            vang = Angle(0, 0, -90),
        },
    },
    {
        PrintName = "Grip",
        Slot = {"ur_329_grip", "uc_stock", "go_stock_pistol_bt"},
        Bone = "Body",
        Offset = {
            vpos = Vector(-2, 2, 0),
            vang = Angle(0, 0, -90),
        },
    },
    --[[]
    {
        PrintName = "Grip",
        DefaultAttName = "Factory Grip",
        DefaultAttIcon = Material("entities/att/acwatt_ur_329_grip.png","mips smooth"),
        Slot = "ur_329_grip"
    },
    ]]
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
        ExcludeFlags = {"329_ss"}
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals",
    },
    {
        PrintName = "Charm",
        Slot = {"charm","fml_charm"},
        FreeSlot = true,
        Bone = "Body",
        Offset = {
            vpos = Vector(7.1, -2.4, -0.1),
            vang = Angle(0, 0, -90),
        },
        VMScale = Vector(.75,.75,.75),
    },
}
--lua/weapons/arccw_ur_ak.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Urban Coalition" -- edit this if you like
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false

SWEP.PrintName = "KF-67"
SWEP.TrueName = "AKM"

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

local descStart = "One of the first assault rifles, wielded around the world to this day for its cheap price, quick production, ease of maintenance, and infallible reliability. Consequently, it has become the most popular rifle ever; a constant of freedom fighters and third-world dictators virtually everywhere. One fifth of all small arms in existence can be traced to this design.\n\n"
local desc_762 = "The default pattern is well-rounded and hard-hitting, but kicks harder than other weapons of its class."
local desc_545 = "With a heavier frame than other service rifles, the AK-74 platform is accurate and easy to control."
local desc_74u = "This PDW variant sacrifices range and control to fit the power of a rifle into a very compact form."
local desc_9mm = "Well-rounded submachine gun that shares common parts with AK rifles. For its widespread use by a variety of security divisions, it can be described as a Russian counterpart to the MP5.\n\nThe moniker \"Vityaz\" translates to \"knight.\""
local desc_12g = "Magazine-fed semi automatic shotgun based on the Kalashnikov pattern. It is a popular civilian weapon due to the comparative simplicity of Russia's smoothbore gun licenses, but it has also been used by security firms around the world.\n\nIts low accuracy is compensated for by a much faster reload time than tube-fed designs."
local desc_556 = "This international variant has a lower damage output than the Russian cartridges, but boasts substantially lower recoil."
local desc_366 = "AK-pattern shotgun chambered in .366 TKM, a sporting cartridge that uses reshaped M43 casings. It is considered a shotgun because of its smoothbore barrel, a change made to circumvent Russian rifle laws. Despite the lack of rifling, it achieves similar ballistics to a proper AK-47."

SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = descStart .. desc_762
SWEP.Trivia_Manufacturer = "Izhmash"
SWEP.Trivia_Calibre = "7.62x39mm Soviet"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "Soviet Union"
SWEP.Trivia_Year = 1959

SWEP.Slot = 2
SWEP.CamAttachment = 3

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.ViewModelFOV = 70

SWEP.DefaultBodygroups = "010000800120"

-- Damage --

SWEP.Damage = 50 -- 2 shot close range kill
SWEP.DamageMin = 25 -- 4 shot long range kill
SWEP.RangeMin = 30
SWEP.Range = 300 -- 3 shot until ~170m
SWEP.Penetration = 16
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 715
SWEP.PhysBulletMuzzleVelocity = 715

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 15

-- Recoil --

SWEP.Recoil = 0.75
SWEP.RecoilSide = 0.3

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 2

SWEP.Sway = 0.6

-- Firerate / Firemodes --

SWEP.Delay = 60 / 600
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 5
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 250
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "ar2"
SWEP.MagID = "ak"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

-- SWEP.Malfunction = true
SWEP.MalfunctionMean = 200
--SWEP.MeleeTime = 1.5

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.75

local path = ")weapons/arccw_ur/ak/"
local path1 = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rutle = {common .. "movement-rifle-01.ogg",common .. "movement-rifle-02.ogg",common .. "movement-rifle-03.ogg",common .. "movement-rifle-04.ogg"}
--SWEP.FirstShootSound = path .. "fire_first.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/762x39/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-762x39-rif-ext-01.ogg",
    tail .. "fire-dist-762x39-rif-ext-02.ogg",
    tail .. "fire-dist-762x39-rif-ext-03.ogg",
    tail .. "fire-dist-762x39-rif-ext-04.ogg",
    tail .. "fire-dist-762x39-rif-ext-05.ogg",
    tail .. "fire-dist-762x39-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.MuzzleEffect = "muzzleflash_6"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/762x39.mdl"
SWEP.ShellPitch = 90
SWEP.ShellScale = .666
SWEP.ShellRotateAngle = Angle(0, 0, 0)
SWEP.UC_ShellColor = Color(0.7 * 255, 0.2 * 255, 0.2 * 255)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.BulletBones = {
    [1] = "tag_mag2",
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.61, -2, 0.45),
    Ang = Angle(0.60, 0.274, 5.53),
    Magnification = 1.1,
    SwitchToSound = "", -- sound that plays when switching to this sight
    CrosshairInSights = false
}
SWEP.LaserOffsetAngle = Angle(0, 0, 0)
SWEP.LaserIronsAngle = Angle(0, 0, 0)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0.5, 0, 0)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.SprintPos = Vector(0, 0, 0)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.HolsterPos = Vector(-1, -1, 1.2)
SWEP.HolsterAng = Angle(-15, 8, -10)

SWEP.BarrelOffsetSighted = Vector(0, 0, 0)
SWEP.BarrelOffsetHip = Vector(0, 0, 0)

-- SWEP.CustomizePos = Vector(6.5, 0.8, -0.2)
-- SWEP.CustomizeAng = Angle(8, 22, 15)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.BarrelLength = 24

SWEP.AttachmentElements = {
    ["barrel_74m"] = {
        VMBodygroups = {{ind = 1, bg = 3}}
    },
    ["barrel_74m_red"] = {
        VMBodygroups = {{ind = 1, bg = 10}}
    },
    ["barrel_74m_green"] = {
        VMBodygroups = {{ind = 1, bg = 11}}
    },
    ["barrel_akm"] = {
        VMBodygroups = {{ind = 1, bg = 0}}
    },
    ["barrel_alpha"] = {
        VMBodygroups = {
            {ind = 1, bg = 7},
            -- {ind = 7, bg = 6},
            -- {ind = 8, bg = 2},
        },
    },
    ["barrel_rpk"] = {
        VMBodygroups = {
            {ind = 7, bg = 1},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 32.2, 2.6),
            vang = Angle(0, 270, 0),
        }},
    Override_IronSightStruct = {
            Pos = Vector(-2.625, -2, 0.68),
            Ang = Angle(-0.1, 0.274, 5.53),
            Magnification = 1,
    }
    },
    ["barrel_rpk74m"] = {
        VMBodygroups = {
            {ind = 1, bg = 5},
            -- {ind = 7, bg = 1},
            -- {ind = 8, bg = 2}
        },
        -- AttPosMods = {[4] = {
        --     vpos = Vector(0, 32.2, 2.6),
        --     vang = Angle(0, 270, 0),
        -- }},
        -- Override_IronSightStruct = {
        -- 	Pos = Vector(-2.625, -2, 0.68),
        -- 	Ang = Angle(-0.1, 0.274, 5.53),
        -- 	Magnification = 1,
        -- }
    },
    ["barrel_krinkov"] = {
        VMBodygroups = {
            {ind = 1, bg = 6},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 4, bg = 1},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 15, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,10,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,10,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.638, -2, 0.9),
            Ang = Angle(-1, 0.12, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_vityaz"] = {
        VMBodygroups = {
            {ind = 1, bg = 8},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 16.5, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,11,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,11,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.62, -2, 0.75),
            Ang = Angle(-0.42, 0.2, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_t56"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 2},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_t56_ext"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 3},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_vepr"] = {
        VMBodygroups = {
            --{ind = 1, bg = 9},
            {ind = 7, bg = 4},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 28.5, 2.7),
            vang = Angle(0, 270, -0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, -2, 0.76),
            Ang = Angle(-0.3, 0.18, 5.53),
            Magnification = 1,
        }
    },

    ["ur_ak_hg_vepr"] = {
        VMBodygroups = {
            {ind = 1, bg = 9},
        },
    },

    ["barrel_105"] = {
        VMBodygroups = {
            --{ind = 1, bg = 3},
            {ind = 7, bg = 2},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 19.9, 2.7),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.6, -2, 0.48),
            Ang = Angle(0.6, 0.265, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_dong"] = {
        VMBodygroups = {{ind = 1, bg = 2}}, -- This will show up regardless of barrel selection because underbarrel atts are always processed after barrel atts
        AttPosMods = {[6] = {
            SlideAmount = {
                vmin = Vector(0,12,1.9),
                vmax = Vector(0,12,1.9)
            },
        }}
    },

    ["muzzle_akm"] = {
        VMBodygroups = {{ind = 8, bg = 1}}
    },
    ["muzzle_ak74"] = {
        VMBodygroups = {{ind = 8, bg = 3}}
    },
    ["muzzle_aku"] = {
        VMBodygroups = {{ind = 8, bg = 6}}
    },
    ["muzzle_bayonet"] = {
        VMBodygroups = {{ind = 11, bg = 1}}
    },

    ["stock_alpha"] = {
        VMBodygroups = {
            {ind = 6, bg = 4},
            {ind = 3, bg = 1},
        }

    },
    ["stock_aks"] = {
        VMBodygroups = {
            {ind = 6, bg = 3},
            {ind = 3, bg = 1},
    }
    },
    ["stock_aks_folded"] = {
        VMBodygroups = {
            {ind = 6, bg = 10},
            {ind = 3, bg = 1},
        }

    },
    ["stock_underfolder"] = {
        VMBodygroups = {{ind = 6, bg = 2}}
    },
    ["stock_underfolder_folded"] = {
        VMBodygroups = {{ind = 6, bg = 1}}
    },
    ["stock_ak74m"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 12}
        }
    },
    ["stock_ak74m_folded"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 13}
        }
    },
    ["stock_rpk"] = {
        VMBodygroups = {{ind = 6, bg = 5}}
    },
    ["stock_akn"] = {
        VMBodygroups = {{ind = 6, bg = 0}}
    },
    ["stock_skeletal"] = {
        VMBodygroups = {
            {ind = 6, bg = 6},
            {ind = 3, bg = 1},
        }
    },
    ["stock_vepr"] = {
        VMBodygroups = {
            {ind = 6, bg = 7},
            {ind = 9, bg = 4}
        }
    },
    ["stock_none"] = {
        VMBodygroups = {
            {ind = 6, bg = 9},
            {ind = 3, bg = 1},
        }
    },

    ["mag_762_75"] = {
        VMBodygroups = {{ind = 2, bg = 1}}
    },
    ["mag_762_bakelite"] = {
        VMBodygroups = {{ind = 2, bg = 11}}
    },
    ["mag_762_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 12}}
    },
    ["mag_545_30"] = {
        VMBodygroups = {{ind = 2, bg = 2}}
    },
    ["mag_556_30"] = {
        VMBodygroups = {{ind = 2, bg = 10}}
    },
    ["mag_545_45"] = {
        VMBodygroups = {{ind = 2, bg = 3}}
    },
    ["mag_9mm"] = {
        VMBodygroups = {{ind = 2, bg = 4}}
    },
    ["mag_12g"] = {
        VMBodygroups = {{ind = 2, bg = 5}}
    },
    ["mag_366"] = {
        VMBodygroups = {{ind = 2, bg = 6}}
    },

    ["grip_akm"] = {
        VMBodygroups = {{ind = 9, bg = 0}}
    },
    ["grip_alpha"] = {
        VMBodygroups = {{ind = 9, bg = 2}}
    },
    ["grip_saiga"] = {
        VMBodygroups = {{ind = 9, bg = 3}}
    },

    ["cover_ribbed"] = {
        VMBodygroups = {{ind = 10, bg = 0}}
    },
    ["cover_alpha"] = {
        VMBodygroups = {{ind = 10, bg = 1}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.68),
            vang = Angle(0, -90, 0),
        }}
    },
    ["optic_raillaser"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.95, 2.5, 4.05),
                vang = Angle(0, -90, 125),
            },
        },
    },
    ["cover_ak12"] = {
        VMBodygroups = {{ind = 10, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.67),
            vang = Angle(0, -90, 0),
        }}
    },

    ["grip_ak12"] = {
        VMBodygroups = {{ind = 9, bg = 5}}
    },
    ["stock_ak12"] = {
        VMBodygroups = {{ind = 6, bg = 11}},
    },
    ["handguard_ak12"] = {
        VMBodygroups = {{ind = 1, bg = 12}},
        --[[AttPosMods = {[6] = {
            vpos = Vector(0, 11.75, 2.2),
            vang = Angle(90, -90, -90),
        }}]]
        AttPosMods = {
            [8] = {
                vpos = Vector(-0.7, 13.5, 3.8),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            },
            [7] = {
                vpos = Vector(0, 11.75, 2.2),
                vang = Angle(90, -90, -90),
            }
        },
    },
    ["barrel_ak12"] = {
        VMBodygroups = {
            {ind = 7, bg = 6},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 23.5, 2.8),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.68, 0, 1.3),
            Ang = Angle(-2.02, 0.028, 5.53),
            Magnification = 1,
        }
        --RequireFlags = {"cover_rail"},
    },
    ["muzzle_ak12"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["reciever_ak12"] = {
        VMBodygroups = {{ind = 0, bg = 1}}
    },
    ["sight_ak12"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
        RequireFlags = {"cover_rail", "ak_railedguard"},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, 0, 0.79),
            Ang = Angle(-1.12, 0.116, 5.53),
            Magnification = 1,
        },
        Override_IronSightStruct_Priority = 2,
    },
    ["mag_545_ak12"] = {
        VMBodygroups = {{ind = 2, bg = 7}}
    },
    ["mag_545_black"] = {
        VMBodygroups = {{ind = 2, bg = 9}}
    },
    ["mag_308"] = {
        VMBodygroups = {{ind = 2, bg = 8}}
    },

    ["cover_trail"] = {
        VMBodygroups = {{ind = 4, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 8.2, 5.20),
            vang = Angle(0, -90, 0),
        }}
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local akOptics = {["uc_optic_pso1"] = true, ["uc_optic_kobra"] = true} -- Will need to update this list if more AK optics get added
    local railHgs = {["default"] = true, ["type3"] = true}
    local bipodBarrs = {["rpk"] = true}
    local shortBarrs = {["krinkov"] = true, ["vityaz"] = true}
    local intCals = {["545"] = true, ["556"] = true, ["545_ak12"] = true}

    local optic = wep.Attachments[1].Installed
    local barr = string.Replace(wep.Attachments[2].Installed or "default","ur_ak_barrel_","")
    local hg = string.Replace(wep.Attachments[3].Installed or "default","ur_ak_hg_","")
    local muzz = wep.Attachments[4].Installed
    local cal = string.Replace(wep.Attachments[5].Installed or "default","ur_ak_cal_","")
    local ub = wep.Attachments[7].Installed-- or wep.Attachments[17].Installed
    local upper = wep.Attachments[15].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    local taclaser = (wep.Attachments[16].Installed == "ur_ak_charm_tl")

    local vm = data.vm
    if !IsValid(vm) then return end

    -- Default muzzle devices
    if !muzz or muzz == "ur_ak_muzzle_bayonet" then
        if barr == "ak12" and (cal == "default" or intCals[cal]) then
            vm:SetBodygroup(8,3)
        elseif barr == "krinkov" then
            vm:SetBodygroup(8,4)
        elseif barr == "default" or barr == "t56" then
            if cal == "default" then
                vm:SetBodygroup(8,1)
            elseif intCals[cal] then
                vm:SetBodygroup(8,3)
            else
                vm:SetBodygroup(8,0)
            end
        end
    elseif barr == "default" then
        vm:SetBodygroup(8,0)
    else
        vm:SetBodygroup(8,2)
    end

    --
    if taclaser and !akOptics[optic] then
        vm:SetBodygroup(12,2)
    else
        if optic and !alpha and !akOptics[optic] then
            vm:SetBodygroup(12,1)
        else
            vm:SetBodygroup(12,0)
        end
    end

    -- Railed underbarrel
    if ub and hg != "ur_ak_hg_dong" and barr != "vityaz" then
        if barr == "krinkov" then
            vm:SetBodygroup(13,2)
        elseif railHgs[hg] then
            vm:SetBodygroup(1,13)
        else
            vm:SetBodygroup(13,1)
        end
    else
        vm:SetBodygroup(13,0)
    end

    -- RPK bipod
    if bipodBarrs[barr] then
        vm:SetBodygroup(7, (wep:GetInBipod() and (wep.LastAnimKey ~= "enter_bipod" or wep.LastAnimFinishTime < CurTime())) and 7 or 1)
    end
end

SWEP.ExtraSightDist = 2
SWEP.GuaranteeLaser = false

SWEP.WorldModelOffset = {
    pos = Vector(-7, 4, -4),
    ang = Angle(-12, 0, 180)
}

SWEP.MirrorVMWM = true

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic","optic_sniper","ur_ak_optic"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 2, 4.92),
            vang = Angle(0, -90, 0),
        },
        CorrectivePos = Vector(0, 0, -0.0),
        CorrectiveAng = Angle(-1.9, 180.15, 0),
        VMScale = Vector(1, 1, 1),
        -- SlideAmount = {
        --     vmin = Vector(0, 2-1, 4.55),
        --     vmax = Vector(0, 2+0.5, 4.55),
        -- },
--        RequireFlags = {"cover_rail"},
--        HideIfBlocked = true,
        -- InstalledEles = {"optic_rail"},
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "16\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/ur_ak/barrel/std.png", "mips smooth"),
        Slot = "ur_ak_barrel",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Factory Handguard",
        DefaultAttIcon = Material("entities/att/ur_ak/handguards/std.png", "mips smooth"),
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        Slot = "ur_ak_hg",
        ExcludeFlags = {"barrel_carbine"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle","ur_ak_muzzle"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 24.1, 2.7),
            vang = Angle(0, 270, 0),
        },
        ExcludeFlags = {"ur_ak_nomuzzle"},
        --Installed = "ur_ak_muzzle_akm"
    },
    {
        PrintName = "Receiver",
        DefaultAttName = "7.62x39mm Reciever",
        DefaultAttIcon = Material("entities/att/uc_bullets/762x39.png", "mips smooth"),
        Slot = {"ur_ak_cal"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        DefaultFlags = {"cal_default"}
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_ak_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_ak/magazines/762_30.png", "mips smooth"),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip","ur_ak_ub"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        VMScale = Vector(1, 1, 1),
        SlideAmount = {
            vmin = Vector(0,10.5,1.9),
            vmax = Vector(0,13.5,1.9)
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs"},
        MergeSlots = {17},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 19.6, 2.1),
            vang = Angle(0, 270, 0),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ur_ak_grip"},
        DefaultAttName = "Factory Grip",
        DefaultAttIcon = Material("entities/att/ur_ak/grip_modern.png", "mips smooth"),
        ExcludeFlags = {"stock_vepr"},
    },
    {
        PrintName = "Stock",
        Slot = {"ur_ak_stock"},
        DefaultAttName = "Factory Stock",
        DefaultAttIcon = Material("entities/att/ur_ak/stock/n.png", "mips smooth"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Dust Cover",
        DefaultAttName = "Ribbed Dust Cover",
        DefaultAttIcon = Material("entities/att/ur_ak/dustcover_stock.png", "mips smooth"),
        Slot = {"ur_ak_cover"},
        FreeSlot = true,
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "ur_ak_charm"},
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0.6, 6.7, 2.2),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 9.9, 2.9),
            vang = Angle(90, -90, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs","barrel_rpk"},
        Hidden = true,
    }
}

function SWEP:Hook_TranslateAnimation(anim)
    if anim == "fire_iron" then
        if self:GetBuff_Override("NoStock") then return "fire" end
    elseif anim == "fire_iron_empty" then
        if self:GetBuff_Override("NoStock") then return "fire_empty" end
    end
end

SWEP.Hook_NameChange = function(wep,name)
    local foldStocks = {["underfolder"] = true,["aks"] = true}
    local akCals = {["762"] = true,["545"] = true}
    local shortBarrs = {["krinkov"] = true,["vityaz"] = true}
    local fakeNames = !GetConVar("arccw_truenames"):GetBool()

    local start = "AK"
    local mid = ""
    local post = "M"
    local noN = false

    if fakeNames then
        start = "KF"
        post = "-67"
    end

    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_ak_barrel_", "")
    local hg = string.Replace(atts[3].Installed or "default", "ur_ak_hg_", "")
    local cal = string.Replace(atts[5].Installed or "762", "ur_ak_cal_", "")
    local stock = string.Replace(atts[10].Installed or "default", "ur_ak_stock_", "")
    local upper = atts[11].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    -- local ak12 = alpha and barr == "ak12"

    wep.Trivia_Desc = descStart .. desc_762
    wep.Trivia_Mechanism = "Gas-Operated Rotating Bolt"

    if alpha then noN = true end

    if atts[14].Installed == "uc_fg_civvy" then
        start = (fakeNames and "Amur") or "Vepr"
        if cal == "12g" then
            post = "-12"
            wep.Trivia_Desc = desc_12g
        elseif cal == "545_ak12" or cal == "545" then
            post = " 5.45"
            wep.Trivia_Desc = descStart .. desc_545
        elseif cal == "762" then
            post = " 7.62"
        elseif cal == "9mm" then
            start = "Saiga"
            post = "-9"
            wep.Trivia_Desc = desc_9mm
            wep.Trivia_Mechanism = "Blowback"
        else
            post = " ." .. cal
        end
        return start .. post
    end

    if cal == "9mm" then
        if fakeNames then
            start = "Bogatyr"
            post = " SMG"
        else
            start = "PP"
            post = "-19 Vityaz"
        end
        wep.Trivia_Desc = desc_9mm
        wep.Trivia_Mechanism = "Blowback"
    -- elseif cal == "12g" then
    --     start = "Saiga"
    --     if shortBarrs[barr] then
    --         post = "-12K"
    --     else
    --         post = "-12"
    --     end
    --     wep.Trivia_Desc = desc_12g -- Obsolete
    elseif cal == "366" then
        if barr == "vepr" or string.find(atts[14].Installed or "","rifling") then
            start = (fakeNames and "Amur") or "Vepr"
            post = " .366"
        else
            start = (fakeNames and "KFN") or "VPO"
            post = "-209"
            wep.Trivia_Desc = desc_366
        end
    elseif cal == "308" then
        post = "-308"
    -- elseif cal == "545_ak12" or ak12 then
    --     noN = true
    --     if string.StartWith(cal,"545") then
    --         post = "-12"
    --         wep.Trivia_Desc = descStart .. desc_545
    --     elseif cal == "762" then
    --         post = "-15"
    --     elseif cal == "556" then
    --         post = "-18"
    --     end
    --     if string.EndsWith(barr,"105") or shortBarrs[barr] then
    --         post = post .. "K"
    --     end -- Obsolete
    elseif barr == "rpk" or barr == "rpk74m" then
        start = (fakeNames and "PKF") or "RPK"
        if !fakeNames and barr == "rpk" and cal == "762" then
            post = ""
        end
    elseif cal == "762" then
        if barr == "t56" then
            noN = true
            if fakeNames then
                start = "Yucha"
                post = " 7"
            else
                start = "Type "
                post = "56"
            end
        elseif (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = "-103"
        end
    elseif cal == "556" then
        if fakeNames then
            post = "-45"
        elseif string.EndsWith(barr,"105") then
            post = "-102"
        else
            post = "-101"
        end
        wep.Trivia_Desc = descStart .. desc_556
    end

    if foldStocks[stock] and akCals[cal] and !string.StartWith(barr,"105") then
        if cal == "762" then
            if barr == "t56" then
                post = post .. "-1"
            elseif !fakeNames then
                post = "MS"
            else
                mid = "S"
            end
        else
            mid = "S"
        end
    end

    if cal == "545" then
        wep.Trivia_Desc = descStart .. desc_545
        if (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = (fakeNames and "-76M") or "-74M"
        elseif shortBarrs[barr] then
            if fakeNames then
                post = "-76"
                mid = mid .. "U"
            else
                post = "-74U"
            end
            wep.Trivia_Desc = descStart .. desc_74u
        else
            post = (fakeNames and "-76") or "-74"
        end
    end

    if akCals[cal] then
        if string.EndsWith(barr,"105") then
            noN = true
            if cal == "545" then
                post = "-105"
            elseif cal == "762" then
                post = "-104"
            elseif cal == "556" then
                post = "-102"
            end
        else
            -- if shortBarrs[barr] then
            --     post = post .. "U" -- I know I said the AK-47U doesn't exist, but we have fucking Glock 44 Autos so I warmed up to it
            --     wep.Trivia_Desc = descStart .. desc_74u
            -- end
            if !noN and atts[1].Installed then
                post = post .. "N"
            end
        end

    end

    return start .. mid .. post
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle"
    },
    ["draw"] = {
        Source = "draw",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "raise.ogg", t = 0.2},
            {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
           -- {s = common .. "raise.ogg", t = 0.2},
            -- {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["ready"] = {
        Source = "ready",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.6,
        LHIKEaseOut = 0.25,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "chback.ogg",    t = 0.2},
            {s = path .. "chamber.ogg",    t = 0.3},
            {s = common .. "shoulder.ogg",    t = .6},
        },
    },
    ["fire"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = common .. "magpouch.ogg", t = 0.0, v = 0.45},
            {s = path .. "reload_start.ogg", 	 t = 0.025},
            {s = rottle,  t = 0.05},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.38},
            {s = path .. "grab.ogg", t = 1.9, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.0},
            {s = path .. "shoulder.ogg", t = 2.15},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15, v = 0.5},
            {s = rottle,  t = 1.16},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = path .. "grab.ogg", t = 2.3, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.4},
            {s = path .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_75"] = {
        Source = "reload_drum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.6,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = rottle,  t = 1.75},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.1},
            {s = path .. "shoulder.ogg", t = 2.25},
        },
    },
    ["reload_empty_75"] = {
        Source = "reload_drum_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.6,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = rottle,  t = 1.9},
            {s = path .. "chback.ogg",    t = 2.37},
            {s = path .. "chamber.ogg",    t = 2.48},
            {s = common .. "shoulder.ogg", t = 2.78},
            {s = path .. "shoulder.ogg", t = 2.93},
        },
    },
    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.73},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.4},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_9mm_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.85},
            {s = ratel, t = 1.1},
            {s = common .. "pistol_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_9.ogg",    t = 1.8},
            {s = path .. "chamber_9.ogg",    t = 2.05},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_10rnd"] = {
        Source = "reload_10rnd",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_10rnd"] = {
        Source = "reload_10rnd_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_308"] = {
        Source = "reload_308",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_308"] = {
        Source = "reload_308_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 1.0},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_308.ogg",    t = 1.85},
            {s = path .. "chamber_308.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_12g"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_12g"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5, v = 0.25},
            {s = ratel, t = 0.55},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.75},
            {s = path .. "12ga/chback.ogg",    t = 1.85},
            {s = path .. "12ga/chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_sprint"] = {
        Source = "sprint_start",
        Time = 0.9,
    },
    ["idle_sprint"] = {
        Source = "sprint_idle",
    },
    ["exit_sprint"] = {
        Source = "sprint_end",
        Time = 1.25,
    },
    ["unjam"] = {
        Source = "jamfix",
        -- Time = 45 / 30,
        ShellEjectAt = 0.65,
        -- LHIK = true,
        -- LHIKIn = 0.3,
        -- LHIKEaseIn = 0.4,
        -- LHIKEaseOut = 0.15,
        -- LHIKOut = 0.4,
        -- SoundTable = {                                             zenith do noises here
        --     {s = path .. "chback.ogg",   t = 0.15},
        --     {s = common .. "cloth_4.ogg",  t = 0.5},
        --     {s = path .. "chamber.ogg",  t = 0.5},
        -- },
        SoundTable = {
            {s = common .. "cloth_4.ogg",  t = 0.1},
            {s = path .. "presscheck_1.ogg",    t = 0.2},
            {s = path .. "chback.ogg",    t = 0.6},
            {s = path .. "chamber.ogg",    t = 0.7},
            {s = common .. "grab.ogg", t = 1.1},
            {s = common .. "shoulder.ogg", t = 1.15},
        }
    },
    ["bash_bayonet"] = {
        Source = "bayonet",
        --Time = 1.2,
        --MinProgress = .7,
        SoundTable = {
            {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },

    ["exit_bipod"] = {
        Source = "bipod_undeploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },
    ["enter_bipod"] = {
        Source = "bipod_deploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}                   -- yeah here too
        }
    },
}

SWEP.Hook_Think = ArcCW.UC.ADSReload
--lua/weapons/arccw_ur_deagle.lua:
return gluapack()()
--lua/weapons/arccw_ur_aw.lua:
return gluapack()()
--lua/weapons/arccw_ur_db.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_shotgun"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/12g.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.UC_ShellColor = Color(0.7*255, 0.2*255, 0.2*255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 6
SWEP.CamAttachment = 7

-- Fake name --

SWEP.PrintName = "Volga Super" -- it's marketed to Americans

-- True name --

SWEP.TrueName = "IZh-58"

-- Trivia --

SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = [[The design of the double-barrel shotgun is so ubiquitous that it is usually referred to by weapon class instead of model name. These traditional shotguns are very popular in both rural and urban communities around the world for their simplicity and reliability.

Both barrels can be fired back-to-back in quick, deadly succession, but they must be reloaded frequently. Switch to burst firemode to pull both triggers at once.]]
SWEP.Trivia_Manufacturer = "Sikov Machining Plant"
SWEP.Trivia_Calibre = "12 Gauge"
SWEP.Trivia_Mechanism = "Break Action"
SWEP.Trivia_Country = "Soviet Union"
SWEP.Trivia_Year = 1958

-- Weapon slot --

SWEP.Slot = 3

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Izhevsk Mechanical Plant"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ur_dbs.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_dbs.mdl"
SWEP.ViewModelFOV = 60
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-3, 3, -5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1
}

-- Damage parameters --

SWEP.Damage = 18 -- 6 pellets to kill
SWEP.DamageMin = 10 -- 10 pellets to kill
SWEP.Range = 40
SWEP.RangeMin = 6
SWEP.Num = 8
SWEP.Penetration = 2
SWEP.DamageType = DMG_BUCKSHOT
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 365
SWEP.PhysBulletMuzzleVelocity = 365

SWEP.HullSize = 0.25

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults_Shotgun

-- Mag size --

SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 2
SWEP.RejectMagSizeChange = true -- Signals to attachments that mag size shouldn't be changeable; needs to be implemented attachment-side with att.Compatible

-- Recoil --

SWEP.Recoil = 2.8
SWEP.RecoilSide = 2

SWEP.RecoilRise = 0.24
SWEP.VisualRecoilMult = 0
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 350
SWEP.Firemodes = {
    {
        Mode = 1,
        PrintName = "fcg.break",
    },
    {
        Mode = 1,
        PrintName = "ur.spas12.dbl",
        Mult_AccuracyMOA = 1.15,
        Mult_HipDispersion = 0.8,
        Mult_Num = 2,
        Override_AmmoPerShot = 2,
        Mult_Damage = 2,
        Mult_DamageMin = 2,
        Mult_VisualRecoilMult = 2,

        CustomBars = "--___",
    },
    {
        PrintName = "fcg.safe2",
        Mode = 0,
    }
}

SWEP.UC_CanManualAction = true

SWEP.MalfunctionTakeRound = false
SWEP.MalfunctionMean = math.huge -- Theoretically it will never malfunction

SWEP.ShootVol = 160
SWEP.ShootPitch = 100

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = false
SWEP.RevolverReload = true

-- NPC --

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 210

-- Accuracy --

SWEP.AccuracyMOA = 25
SWEP.HipDispersion = 400
SWEP.MoveDispersion = 125
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "buckshot"

-- Speed multipliers --

SWEP.SpeedMult = 0.91
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.25
SWEP.ShootSpeedMult = 0.75

-- Length --

SWEP.BarrelLength = 49
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-1.5, 0, 2.5),
     Ang = Angle(0, 0, 3),
     Magnification = 1.05,
     SwitchToSound = "",
}

SWEP.SprintPos = Vector(7, 0, 0)
SWEP.SprintAng = Angle(-10, 40, -10)

SWEP.HolsterPos = Vector(7, 0, 0)
SWEP.HolsterAng = Angle(-10, 40, -10)

SWEP.ActivePos = Vector(1, 1.5, 1.5)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-1, 2, 1)
SWEP.CrouchAng = Angle(0, 0, -20)

SWEP.CustomizePos = Vector(10, 1, 2)
SWEP.CustomizeAng = Angle(10, 40, 20)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(3, 0, -4.5)

-- Firing sounds --

local path = ")weapons/arccw_ur/dbs/"
local common = ")/arccw_uc/common/"
SWEP.ShootSoundSilenced = path .. "fire_supp.ogg"
--[[SWEP.DistantShootSound = {path .. "fire-dist-01.ogg", path .. "fire-dist-02.ogg", path .. "fire-dist-03.ogg", path .. "fire-dist-04.ogg", path .. "fire-dist-05.ogg"}
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"]]
SWEP.ShootDrySound = common .. "manual_trigger.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}

local tail = ")/arccw_uc/common/12ga/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-12ga-pasg-ext-01.ogg",
    tail .. "fire-dist-12ga-pasg-ext-02.ogg",
    tail .. "fire-dist-12ga-pasg-ext-03.ogg",
    tail .. "fire-dist-12ga-pasg-ext-04.ogg",
    tail .. "fire-dist-12ga-pasg-ext-05.ogg",
    tail .. "fire-dist-12ga-pasg-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-shotgun-01.ogg",
    common .. "fire-dist-int-shotgun-02.ogg",
    common .. "fire-dist-int-shotgun-03.ogg",
    common .. "fire-dist-int-shotgun-04.ogg",
    common .. "fire-dist-int-shotgun-05.ogg",
    common .. "fire-dist-int-shotgun-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = function(wep,data)
    ArcCW.UC.InnyOuty(wep)

    if wep:GetCurrentFiremode().Override_AmmoPerShot == 2 then
        timer.Simple(0.05, function()
            if IsValid(wep) then
                wep:EmitSound(wep.ShootSound[math.random(1,#wep.ShootSound)], data.volume * .4, data.pitch, 1, CHAN_WEAPON - 1)
            end
        end)
    end
end

-- Animations --

local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local shellin = {common .. "dbs-shell-insert-01.ogg", common .. "dbs-shell-insert-02.ogg", common .. "dbs-shell-insert-03.ogg", common .. "dbs-shell-insert-04.ogg", common .. "dbs-shell-insert-05.ogg", common .. "dbs-shell-insert-06.ogg", common .. "dbs-shell-insert-07.ogg", common .. "dbs-shell-insert-08.ogg", common .. "dbs-shell-insert-09.ogg", common .. "dbs-shell-insert-10.ogg", common .. "dbs-shell-insert-11.ogg", common .. "dbs-shell-insert-12.ogg"}
local shellfall = {path .. "shell-fall-01.ogg", path .. "shell-fall-02.ogg", path .. "shell-fall-03.ogg", path .. "shell-fall-04.ogg"}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
    },
    ["draw"] = {
        Source = "draw",
        --Time = 20 / 30,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "grab.ogg", t = 0.2},
            {s = path .. "shoulder.ogg", t = 0.5},
        },
    },
    ["ready"] = {
        Source = "deploy",
        Time = 26 / 30,
        SoundTable = {
            {s = path .. "close.ogg", t = 0.1},
            {s = common .. "shoulder.ogg", t = 0.2},
            {s = path .. "shoulder.ogg", t = 0.455},
        },
    },
    ["holster"] = {
        Source = "holster",
        Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },

    ["fire"] = { -- first barrel
        Source = "fire",
        -- Time = 23 / 25,--30,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        -- Time = 23 / 25,--30,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },

    ["fire_empty"] = { -- second barrel
        Source = "fire_empty", -- fire_empty
        -- Time = 23 / 25,--30,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty", -- fire_empty
        -- Time = 23 / 25,--30,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0}},
    },

    ["fire_2bst"] = { -- both
        Source = "fireboth",
        -- Time = 35 / 25,--30,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
        MinProgress = 0.3
    },

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        ShellEjectAt = 0.91,
        SoundTable = {
            {s = common .. "cloth_4.ogg", t = 0},
            {s = path .. "open.ogg", t = 0.2},
            {s = path .. "eject.ogg", t = 0.8},
            {s = common .. "magpouch_pull_small.ogg", t = 1.0},
            {s = shellfall, t = 1.0},
            {s = common .. "cloth_2.ogg", t = 1.1},
            {s = path .. "struggle.ogg", t = 1.5, v = 0.5},
            {s = shellin, t = 1.8},
            {s = path .. "grab.ogg", t = 2.15, v = 0.5},
            {s = path .. "close.ogg", t = 2.3},
            {s = common .. "shoulder.ogg", t = 2.4},
            {s = path .. "shoulder.ogg", t = 2.675},
        },
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
        MinProgress = 2.05,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        ShellEjectAt = 1.0,
        SoundTable = {
            {s = common .. "cloth_4.ogg", t = 0},
            {s = path .. "open.ogg", t = 0.3},
            {s = path .. "eject.ogg", t = 0.8},
            {s = shellfall, t = 0.9},
            {s = shellfall, t = 0.95},
            {s = common .. "cloth_2.ogg", t = 1.1},
            {s = common .. "magpouch_pull_small.ogg", t = 1.2},
            {s = path .. "struggle.ogg", t = 1.7, v = 0.5},
            {s = shellin, t = 1.85},
            {s = shellin, t = 1.9},
            {s = path .. "grab.ogg", t = 2.17, v = 0.5},
            {s = path .. "close.ogg", t = 2.3},
            {s = common .. "shoulder.ogg", t = 2.44},
            {s = path .. "shoulder.ogg", t = 2.6},
        },
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
        MinProgress = 2.05,
    },

    ["reload_extractor"] = {
        Source = "reload2",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        ShellEjectAt = 0.4,
        SoundTable = {
            {s = common .. "cloth_4.ogg", t = 0},
            {s = path .. "open.ogg", t = 0.2},
            {s = common .. "magpouch_pull_small.ogg", t = 0.5},
            {s = shellfall, t = 0.4},
            {s = common .. "cloth_2.ogg", t = 0.6},
            {s = path .. "struggle.ogg", t = 1.0, v = 0.5},
            {s = shellin, t = 1.2},
            {s = path .. "grab.ogg", t = 1.5, v = 0.5},
            {s = path .. "close.ogg", t = 1.7},
            {s = common .. "shoulder.ogg", t = 1.8},
            {s = path .. "shoulder.ogg", t = 2.2},
        },
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
        MinProgress = 1.3,
    },
    ["reload_empty_extractor"] = {
        Source = "reload2_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        ShellEjectAt = 0.4,
        SoundTable = {
            {s = common .. "cloth_4.ogg", t = 0},
            {s = path .. "open.ogg", t = 0.2},
            {s = common .. "magpouch_pull_small.ogg", t = 0.5},
            {s = shellfall, t = 0.4},
            {s = shellfall, t = 0.45},
            {s = common .. "cloth_2.ogg", t = 0.6},
            {s = path .. "struggle.ogg", t = 1.0, v = 0.5},
            {s = shellin, t = 1.2},
            {s = shellin, t = 1.25},
            {s = path .. "grab.ogg", t = 1.5, v = 0.5},
            {s = path .. "close.ogg", t = 1.7},
            {s = common .. "shoulder.ogg", t = 1.8},
            {s = path .. "shoulder.ogg", t = 2.2},
        },
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
        MinProgress = 1.3,
    },
}

SWEP.BulletBones = {
    --[1] = "1014_shell1",
}

-- Bodygroups --

SWEP.AttachmentElements = {
    ["barrel_mid"] = { VMBodygroups = { {ind = 1, bg = 1} } },
    ["barrel_compact"] = { VMBodygroups = { {ind = 1, bg = 4} } },
    ["barrel_sw"] = { VMBodygroups = { {ind = 1, bg = 2} } },
    ["barrel_swplus"] = { VMBodygroups = { {ind = 1, bg = 3}, {ind = 3, bg = 1} } },

    ["stock_sw"] = { VMBodygroups = { {ind = 2, bg = 1} } },
}

SWEP.DefaultBodygroups = "00000000"

SWEP.Attachments = {
    -- {
    --     PrintName = "Optic",
    --     DefaultAttName = "Iron Sights",
    --     Slot = {"optic_lp","optic"},
    --     Bone = "barrels",
    --     Offset = {
    --         vpos = Vector(0.5, -1.75, 1.5),
    --         vang = Angle(0, 90, 0),
    --     },
    --     VMScale = Vector(1,1,1),
    --     CorrectivePos = Vector(0, 0, -0.0),
    --     CorrectiveAng = Angle(0, 180, 0),
    -- },
    {
        PrintName = "Barrel",
        DefaultAttName = "26\" Factory Barrel",
        DefaultAttIcon = Material("entities/att/ur_dbs/blong.png", "smooth mips"),
        Slot = "ur_db_barrel",
        Bone = "body",
        Offset = {
            vpos = Vector(-0.4, -5, -6),
            vang = Angle(0, 90, 0),
        },
    },
    {
        PrintName = "Muzzle",
        Slot = "choke",
    },
    {
        PrintName = "Stock",
        Slot = {"ur_db_stock"},
        DefaultAttName = "Wooden Stock",
        DefaultAttIcon = Material("entities/att/ur_dbs/s.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"BUCK\" #00 Buckshot",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_shotgun_generic.png", "mips smooth"),
        Slot = {"ud_ammo_shotgun"},
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = {"uc_fg_singleshot", "uc_db_fg"}, -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "uc_db_tp"},
        FreeSlot = true,
        Bone = "body",
        Offset = {
            vpos = Vector(-0.55, 1, -0.5),
            vang = Angle(0, 90, 0),
        },
    },
}
--lua/weapons/arccw_ur_deagle.lua:
return gluapack()()
--lua/weapons/arccw_ur_hk94a3.lua:
return gluapack()()
--lua/weapons/arccw_ur_mp5.lua:
return gluapack()()
--lua/weapons/arccw_ur_mp5swordfish.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_mp5.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets SMGs"
end

SWEP.PrintName = "PK5 Swordfish" -- make this something russian and cool
SWEP.TrueName = "MP5 Swordfish"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

--SWEP.Attachments[1].Installed = "uc_optic_holosun1"
SWEP.Attachments[2].Installed = "ur_mp5_barrel_sword"
SWEP.Attachments[5].Installed = "ur_mp5_ub_surefire_mlok"
SWEP.Attachments[8].Installed = "ur_mp5_stock_future"
SWEP.Attachments[9].Installed = "ur_mp5_mag_50"

SWEP.NPCWeaponType = nil
SWEP.Attachments[8].ToggleLock = true
--lua/weapons/arccw_ur_spas12hl.lua:
return gluapack()()
--addons/ch_bitminers_dlc/lua/weapons/ch_bitminers_repair_wrench/shared.lua:
--[[ INFO
models/craphead_scripts/the_cocaine_factory/wrench/c_wrench.mdl
models/craphead_scripts/the_cocaine_factory/wrench/w_wrench.mdl
FOV: 65
Hold type: melee
Sequences:
(sequence_name       activity)
idle 		ACT_VM_IDLE
attack 		ACT_VM_PRIMARYATTACK
draw 		ACT_VM_DRAW
--]]

if SERVER then
	AddCSLuaFile( "shared.lua" )
end

if CLIENT then
	SWEP.PrintName			= CH_Bitminers.LangString( "Repair Wrench (Bitminers)" )
	SWEP.Slot = 2
	SWEP.SlotPos = 1
	SWEP.DrawAmmo			= false
	SWEP.DrawCrosshair		= true
end

SWEP.Author 				= "Crap-Head"
SWEP.Instructions 			= CH_Bitminers.LangString( "Left Click: Use repair wrench while aiming at a bitminer related entity." )

SWEP.ViewModelFOV			= 75
SWEP.ViewModel				= "models/craphead_scripts/the_cocaine_factory/wrench/c_wrench.mdl"
SWEP.WorldModel				= "models/craphead_scripts/the_cocaine_factory/wrench/w_wrench.mdl" 

SWEP.Spawnable 				= true
SWEP.AdminOnly 				= true
SWEP.Category 				= "Bitminers by Crap-Head"

SWEP.UseHands 				= true
SWEP.ViewModelFlip      	= false
SWEP.AnimPrefix  			= "stunstick"

SWEP.Primary.Range			= 90
SWEP.Primary.Recoil			= 4.6
SWEP.Primary.Damage			= 2
SWEP.Primary.Cone			= 0.02
SWEP.Primary.NumShots		= 1

SWEP.Primary.ClipSize		= -1
SWEP.Primary.DefaultClip	= -1
SWEP.Primary.Automatic		= false	
SWEP.Primary.Ammo			= "none"

SWEP.Secondary.ClipSize		= -1
SWEP.Secondary.DefaultClip	= -1
SWEP.Secondary.Automatic	= false
SWEP.Secondary.Ammo			= "none"

function SWEP:SetupDataTables()
	self:NetworkVar( "Float" , 0 , "NextIdle" )
end

function SWEP:Initialize()
	self:SetWeaponHoldType( "melee" )
	
	self:SetNextIdle( 0 )
	
	return true
end 

function SWEP:Deploy()
	local ply = self:GetOwner()
	local cur_time = CurTime()
	
	self:SendWeaponAnim( ACT_VM_DRAW )
	self:SetNextIdle( cur_time + self:SequenceDuration() )
	
	-- Do delay
	self:SetNextPrimaryFire( cur_time + self:SequenceDuration() )
	self:SetNextSecondaryFire( cur_time + self:SequenceDuration() )
	
	return true
end

function SWEP:PrimaryAttack()
	local ply = self:GetOwner()
	local cur_time = CurTime()
	
	self:SendWeaponAnim( ACT_VM_PRIMARYATTACK )
	self:SetNextIdle( cur_time + self:SequenceDuration() )
	
	-- Do delay
	self:SetNextPrimaryFire( cur_time + self:SequenceDuration() )
	self:SetNextSecondaryFire( cur_time + self:SequenceDuration() )
	
	-- vars
 	local trace = util.GetPlayerTrace( ply )
 	local tr = util.TraceLine( trace )
	local ent = tr.Entity
	
	-- sounds and hit
	self:EmitSound( "weapons/stunstick/stunstick_swing1.wav", 100, math.random( 90, 120 ) )
	ply:SetAnimation( PLAYER_ATTACK1 )
	
	-- 76561198347218024
	
	if ( ply:GetPos() - tr.HitPos ):Length() < self.Primary.Range then
		ply:ViewPunch( Angle( math.random( -1, 1 ) * self.Primary.Recoil, math.random( -1, 1 ) * self.Primary.Recoil, 0 ) )
		
		if tr.HitNonWorld then
			if SERVER then
				if CH_Bitminers.ListOfEntities[ ent:GetClass() ] then
					local health_add = math.random( CH_Bitminers_DLC.Config.RepairMinHealth, CH_Bitminers_DLC.Config.RepairMaxHealth )
					
					if ent:Health() < ent:GetMaxHealth() then
						ent:SetHealth( math.Clamp( ent:Health() + health_add, 0, ent:GetMaxHealth() )  )
					else
						CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "This bitminer entity has reached it's maximum health!" ) )
						return
					end
					
					CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "Bitminer entity has been healed." ) )
				elseif ent:IsPlayer() then
					ent:TakeDamage( math.random( 12, 16 ), ply ) 
					ent:SetVelocity( ply:GetAngles():Forward() * 50 + ply:GetAngles():Up() * 10 )
				end
			end

			if CH_Bitminers.ListOfEntities[ ent:GetClass() ] then
				self:EmitSound( "physics/metal/metal_canister_impact_hard".. math.random( 1, 3 ) ..".wav", 100, math.random( 95, 110 ) )
			elseif tr.Entity:IsPlayer() then
				self:EmitSound( "physics/body/body_medium_impact_hard1.wav", 100, math.random( 95, 110 ) )
			end
		else
			self:EmitSound( "physics/body/body_medium_impact_hard1.wav", 100, math.random(95,110) )
		end
	end
end

function SWEP:SecondaryAttack()
	self:PrimaryAttack()
end

function SWEP:Think()
	-- Used to reset idle animation for deployment and primaryattack
	if self:GetNextIdle() ~= 0 and self:GetNextIdle() < CurTime() then
		self:SendWeaponAnim( ACT_VM_IDLE )
		self:SetNextIdle( 0 )
	end
end

local col_green = Color( 0, 150, 0, 255 )
local prim_col

local entity_height_table = {
	["ch_bitminer_power_cable"] = 2,
	["ch_bitminer_power_cable_end"] = 2,
	["ch_bitminer_power_combiner"] = 10,
	["ch_bitminer_power_generator"] = 25,
	["ch_bitminer_power_generator_fuel"] = 20,
	["ch_bitminer_power_rtg"] = 35,
	["ch_bitminer_power_solar"] = 25,
	--["ch_bitminer_shelf"] = 70, -- it already says on the shelf screen how much health it has
	["ch_bitminer_upgrade_cooling1"] = 3,
	["ch_bitminer_upgrade_cooling2"] = 3,
	["ch_bitminer_upgrade_cooling3"] = 12,
	["ch_bitminer_upgrade_miner"] = 3,
	["ch_bitminer_upgrade_rgb"] = 7,
	["ch_bitminer_upgrade_ups"] = 3
}

function SWEP:DrawHUD()
	local ply = LocalPlayer()
	
	for k, ent in ipairs( ents.FindInSphere( ply:GetPos(), CH_Bitminers_DLC.Config.ShowHealthDistance ) ) do
		local height = entity_height_table[ ent:GetClass() ]
	
		if not height then
			continue
		end

		local VPos = ent:GetPos() + Vector( 0, 0, height )
		local ScrPos = ( VPos + Vector( 0, 0, 10 )):ToScreen()

		local thetrace = {}
		thetrace.start = ply:GetPos() + Vector( 0, 0, height )
		thetrace.endpos = VPos
		thetrace.filter = {ply, ent}
	
		local Trace = util.TraceLine( thetrace )
		
		if not Trace.Hit then
			local cur_time = CurTime()
			
			if ent:Health() >= 75 then -- green
				prim_col = col_green
			elseif ent:Health() >= 50 then -- flash orange
				prim_col = Color( 240 * math.abs( math.sin( cur_time * 1 ) ), 137 * math.abs( math.sin( cur_time * 1 ) ), 19 * math.abs( math.sin( cur_time * 1 ) ), 255 )
			else
				prim_col = Color( 190 * math.abs( math.sin( cur_time * 1 ) ), 0, 0, 255 )
			end
		
			local outline_col = Color( 0, 0, 0, 255 )
		
			if ent:Health() > 0 then
				draw.SimpleTextOutlined( CH_Bitminers.LangString( "Health:" ) .." ".. ent:Health(), "BITMINER_DLC_TabletSmaller", ScrPos.x, ScrPos.y - 65, prim_col, 1, 1, 1, outline_col )
			end	
		end
	end
end

local mat_crosshair = Material( "craphead_scripts/bitminers/dlc/crosshair.png" )

function SWEP:DoDrawCrosshair( x, y )
	local size = 16

	surface.SetDrawColor( color_white )
	surface.SetMaterial( mat_crosshair )
	surface.DrawTexturedRect( x - 8, y - 8, size, size )
	return true
end
--addons/ch_mining/lua/weapons/ch_mining_pickaxe_afk/shared.lua:
--[[ INFO
models/craphead_scripts/mining/craphead_c_miningpickaxe.mdl
models/craphead_scripts/mining/craphead_w_miningpickaxe.mdl
FOV: 85
Hold type: pistol
idle 		ACT_VM_FIDGET
dig 		ACT_VM_PRIMARYATTACK
hit 	 	ACT_VM_PRIMARYATTACK_1
swing 		ACT_VM_SECONDARYATTACK
inspect		ACT_VM_RELEASE
draw 		ACT_VM_DRAW
not sure 	ACT_VM_FIDGET
76561198314224586
--]]

if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= true
	SWEP.AutoSwitchFrom		= true
	AddCSLuaFile( "shared.lua" )
end

if CLIENT then
	SWEP.PrintName			= "AFK Pickaxe"
	SWEP.Author				= "Crap-Head"
	SWEP.Slot				= 2
	SWEP.SlotPos			= 1
	SWEP.DrawAmmo			= false
	SWEP.DrawWeaponInfoBox	= false
	SWEP.BounceWeaponIcon   = false
	SWEP.SwayScale			= 1.0
	SWEP.BobScale			= 1.0
end

SWEP.Author					= "Crap-Head"
SWEP.Instructions 			= "Left Click: Start auto-mining rocks, Rick Click: Stop auto-mining"
SWEP.Category 				= "Mining by Crap-Head"

SWEP.UseHands				= true
SWEP.ViewModelFOV			= 85

SWEP.ViewModel 				= "models/craphead_scripts/mining/craphead_c_miningpickaxe.mdl"
SWEP.WorldModel				= "models/craphead_scripts/mining/craphead_w_miningpickaxe.mdl"

SWEP.Spawnable				= true
SWEP.AdminSpawnable			= true

SWEP.Primary.Range			= 120
SWEP.Primary.Recoil			= 4.6
SWEP.Primary.Damage			= 100
SWEP.Primary.Cone			= 0.005
SWEP.Primary.NumShots		= 1

SWEP.Primary.ClipSize		= -1
SWEP.Primary.DefaultClip	= -1
SWEP.Primary.Automatic		= false	
SWEP.Primary.Ammo			= "none"

SWEP.Secondary.ClipSize		= -1
SWEP.Secondary.DefaultClip	= -1
SWEP.Secondary.Automatic	= false
SWEP.Secondary.Ammo			= "none"

function SWEP:SetupDataTables()
	self:NetworkVar( "Float" , 0 , "NextIdle" )
end

function SWEP:Initialize()
	self:SetWeaponHoldType( "pistol" )
	
	self:SetNextIdle( 0 )
	
	self.SwingSound = CreateSound( self, "weapons/iceaxe/iceaxe_swing1.wav" )
	self.SwingSound:SetSoundLevel( CH_Mining.Config.WeaponSoundLevel )
	
	self.HitSound = CreateSound( self, "physics/metal/metal_computer_impact_bullet2.wav" )
	self.HitSound:SetSoundLevel( CH_Mining.Config.WeaponSoundLevel )
	
    return true
end

function SWEP:Deploy()
	local ply = self:GetOwner()
	local cur_time = CurTime()
	
	self:SendWeaponAnim( ACT_VM_DRAW )
	self:SetNextIdle( cur_time + self:SequenceDuration() )
	
	self:ToggleAutoMine( ply, false )
	
	-- Do delay
	self:SetNextPrimaryFire( cur_time + self:SequenceDuration() )

	local vm = ply:GetViewModel()
	vm:SetSkin( 0 )
	self:SetSkin( 0 )
	
	return true
end

function SWEP:Holster( wep )
	if not IsFirstTimePredicted() then return end
	
	local ply = self:GetOwner()
	
	if self.SwingSound then 
		self.SwingSound:Stop() 
	end
	if self.HitSound then 
		self.HitSound:Stop() 
	end
	
	self:ToggleAutoMine( ply, false )
	
	return true
end

function SWEP:PrimaryAttack()
	local ply = self:GetOwner()
	local trace = ply:GetEyeTrace()
	local target = trace.Entity
	local cur_time = CurTime()
	
    if CLIENT then return end
	
	-- Do delay
	local speed_level = ply:CH_Mining_GetSkillPoints( "Speed" )
	local speed_mine = CH_Mining.Skills["Speed"].Levels[ speed_level ]
	
	if CH_BoostUpgrades and CH_BoostUpgrades.MiningSpeedActivated then
		speed_mine = speed_mine / 2
	end
	
	self:SetNextPrimaryFire( cur_time + speed_mine )
	
	-- Send anim
	self:SendWeaponAnim( ACT_VM_PRIMARYATTACK_1 )
	self:SetNextIdle( cur_time + speed_mine )
	self.SwingSound:Play()
	
	-- Auto mine features
	self:ToggleAutoMine( ply, true )
	
	-- Timer in order to wait for anim to look realistic
	timer.Simple( 0.5, function()
		if not IsValid( self ) or not IsValid( target ) or ply:GetActiveWeapon():GetClass() != "ch_mining_pickaxe_afk" then
			return
		end

		-- Check distance to target
		if ply:GetPos():DistToSqr( target:GetPos() ) > CH_Mining.Config.DistanceToRockMining then
			return
		end
		
		self.HitSound:Play()
		
		if target:GetClass() == "ch_mining_rock" then
			-- Stop everything if rock is dead
			if target:GetIsDead() then
				return
			end
		
			CH_Mining.HitRock( ply, target, CH_Mining.Config.TakeDurabilityPerHitPickaxe )
		end
	end )
end 

function SWEP:SecondaryAttack()
	local ply = self:GetOwner()

	-- Stop auto mining
	self:ToggleAutoMine( ply, false )
end

function SWEP:Think()
	local ply = self:GetOwner()
	
	-- Check if not looking at a rock to stop auto mining
	local trace = ply:GetEyeTrace()
	local target = trace.Entity
	
	if not IsValid( self ) or not IsValid( target ) or ply:GetActiveWeapon():GetClass() != "ch_mining_pickaxe_afk" then
		self:ToggleAutoMine( ply, false )
	end
	if IsValid( target ) and ply:GetPos():DistToSqr( target:GetPos() ) > CH_Mining.Config.DistanceToRockMining then
		self:ToggleAutoMine( ply, false )
	end
	if IsValid( target ) and target:GetClass() != "ch_mining_rock" then
		self:ToggleAutoMine( ply, false )
	end
	
	-- Used to reset idle animation for deployment and primaryattack
	if self:GetNextIdle() ~= 0 and self:GetNextIdle() < CurTime() then
		self:SendWeaponAnim( ACT_VM_FIDGET )
		self:SetNextIdle( 0 )
		
		if self.SwingSound then 
			self.SwingSound:Stop() 
		end
		if self.HitSound then 
			self.HitSound:Stop() 
		end
		
		if ply.CH_Mining_IsAFKMining then
			self:PrimaryAttack()
		end
	end
end

function SWEP:ToggleAutoMine( ply, toggle )
	if CLIENT then return end
	
	if toggle then
		-- Auto mine features
		ply.CH_Mining_IsAFKMining = true
		
		if CH_Mining.Config.GodModeAFKMiners then
			ply:GodEnable()
		end
	else
		-- Stop auto mining
		self:SetNextIdle( 0 )
		ply.CH_Mining_IsAFKMining = false
		
		if CH_Mining.Config.GodModeAFKMiners then
			ply:GodDisable()
		end
	end
end

function SWEP:DoDrawCrosshair( x, y )
	local size = 16

	surface.SetDrawColor( color_white )
	surface.SetMaterial( CH_Mining.Materials.CrosshairIcon )
	surface.DrawTexturedRect( x - 8, y - 8, size, size )
	return true
end
--addons/[binbon]misc/lua/weapons/ershield_swat/shared.lua:
if SERVER then
  AddCSLuaFile( "shared.lua" )
	
	resource.AddFile("models/ershield/ershield.mdl")
	resource.AddFile("models/ershield/ershield.dx80.vtx")
	resource.AddFile("models/ershield/ershield.dx90.vtx")
	resource.AddFile("models/ershield/ershield.phy")
	resource.AddFile("models/ershield/ershield.sw.vtx")
	resource.AddFile("models/ershield/ershield.vvd")
	resource.AddFile("materials/models/ershield/ershield.vmt")
	resource.AddFile("materials/models/ershield/ershield.vtf")
	resource.AddFile("materials/models/ershield/handle.vmt")
	resource.AddFile("materials/models/ershield/handle.vtf")
	resource.AddFile("materials/models/ershield/attach.vmt")
	resource.AddFile("materials/models/ershield/attach.vtf")
	resource.AddFile("materials/models/ershield/screw.vtf")
	resource.AddFile("materials/models/ershield/screw.vmt")
end



if (CLIENT) then
SWEP.PrintName = "Riot Shield"
SWEP.Category = "SWAT"
SWEP.Slot = 3
SWEP.SlotPos = 1
SWEP.DrawAmmo = false
SWEP.DrawCrosshair = false
SWEP.Author = "<color=190,0,0>ErrO</color>"
SWEP.Contact = "Via Steam"
end

SWEP.HoldType			= "knife"
SWEP.Spawnable = true
SWEP.AdminSpawnable = true

SWEP.ViewModelFOV = 62
SWEP.ViewModelFlip = false
SWEP.AnimPrefix	 = "rpg"

SWEP.Primary.Damage         = 0
SWEP.Primary.ClipSize       = -1
SWEP.Primary.DefaultClip    = -1
SWEP.Primary.Automatic      = true
SWEP.Primary.Delay = 1.1
SWEP.Primary.Ammo       = "none"

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = 1
SWEP.Secondary.Automatic = true
SWEP.Secondary.Ammo = "none"

-- Kalkan can değişkenleri
SWEP.ShieldHealth = 550 -- Kalkanın maksimum canı
SWEP.CurrentShieldHealth = 550 -- Mevcut kalkan canı

SWEP.WorldModel = ""
SWEP.ViewModel = "models/ershield/ershield.mdl"

function SWEP:Deploy()
	if SERVER then
		if IsValid(self.ent) then return end
			self:SetNoDraw(true)
			self.ent = ents.Create("prop_physics")
			self.ent:SetModel("models/ershield/ershield.mdl")
			self.ent:SetPos(self.Owner:GetPos() + Vector(-5,0,45) + (self.Owner:GetForward()*32))
			self.ent:SetAngles(Angle(0,self.Owner:EyeAngles().y,self.Owner:EyeAngles().r))
			self.ent:SetParent(self.Owner)
			self.ent:Fire("SetParentAttachmentMaintainOffset", "eyes", 0.01)
			self.ent:SetCollisionGroup( COLLISION_GROUP_WORLD )
			self.ent:Spawn()
			self.ent:Activate()
			-- Kalkan canını sıfırla
			self.CurrentShieldHealth = self.ShieldHealth
	end
	return true
end

function SWEP:PrimaryAttack()

end

function SWEP:Holster()
	if SERVER then
		if not IsValid(self.ent) then return end
		self.ent:Remove()
	end
	return true
end

function SWEP:OnDrop()
	if SERVER then
		self:SetColor(Color(255,255,255,255))
		if not IsValid(self.ent) then return end
		self.ent:Remove()
	end
end

function SWEP:OnRemove()
	if SERVER then
		self:SetColor(Color(255,255,255,255))
		if not IsValid(self.ent) then return end
		self.ent:Remove()
	end
end

-- Kalkan hasar alma fonksiyonu
function SWEP:TakeShieldDamage(damage)
	if SERVER then
		self.CurrentShieldHealth = self.CurrentShieldHealth - damage
		
		if self.CurrentShieldHealth <= 0 then
			-- Kalkanı kaldır
			if IsValid(self.ent) then
				self.ent:Remove()
			end
			-- Silahı kaldır
			if IsValid(self.Owner) then
				self.Owner:StripWeapon(self:GetClass())
			end
		end
	end
end

-- Kalkan hasar alma olayını dinle
hook.Add("EntityTakeDamage", "ShieldDamageHandler", function(target, dmginfo)
	if IsValid(target) and target:IsPlayer() then
		local activeWeapon = target:GetActiveWeapon()
		if IsValid(activeWeapon) and activeWeapon:GetClass() == "ershield_swat" then
			activeWeapon:TakeShieldDamage(dmginfo:GetDamage())
		end
	end
end)




--addons/zeros_retrominer_v2.3.6/lua/zrmine_config.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

zrmine = zrmine || {}
zrmine.config = zrmine.config || {}

/////////////////////////// Zeros RetroMiner /////////////////////////////

// Developed by ZeroChain:
// http://steamcommunity.com/id/zerochain/
// https://www.gmodstore.com/users/view/76561198013322242
// https://www.artstation.com/zerochain

/////////////////////////////////////////////////////////////////////////////


// Misc
///////////////////////
// This enables fast download
zrmine.config.EnableResourceAddfile = false

// These Ranks are allowed do use the Chat and Console Commands
zrmine.config.AdminRanks = {
	["superadmin"] = true,
	["owner"] = true,
}

// This tells the script who can mine ore / sell bars (Leave empty to allow everyone)
zrmine.config.Jobs = {
	[TEAM_ZRMINE_MINER] = true
}


// This disables a net message being send to client for the ore insert effect
zrmine.config.DisableVFX = true


// Level System IngGame Config ConsoleCommand: zrms_levelsystem_open

// Chat Commands
//  !zrms_lvlsys_reset SteamID
//  !zrms_lvlsys_xp SteamID Amount
//  !zrms_lvlsys_lvl SteamID Amount

// Console Commands
//  zrms_lvlsys_reset SteamID
//  zrms_lvlsys_xp SteamID Amount
//  zrms_lvlsys_lvl SteamID Amount

// What language do we want? en,de,fr,pl,it,ru,pt,es,cn,dk
zrmine.config.selectedLanguage = "en"

// Currency Display
zrmine.config.Currency = "₺"

// Mass Display
zrmine.config.BuyerNPC_Mass = "kg"

// Disables the Owner Checks so everyone can use everyones mining entities
// Note* This should be on true if you want to use the Entities as a Public utility
zrmine.config.SharedOwnership = false

// The Damage the entitys have do take before they get destroyed.
// Setting it to -1 disables it
zrmine.config.Damageable = {}
zrmine.config.Damageable["MineEntrance"] = {EntityHealth = 1000}
zrmine.config.Damageable["Melter"] = {EntityHealth = 500}
zrmine.config.Damageable["Crusher"] = {EntityHealth = 300}
zrmine.config.Damageable["Refinery"] = {EntityHealth = 300}
zrmine.config.Damageable["Conveyorbelt"] = {EntityHealth = 200}
zrmine.config.Damageable["Splitter"] = {EntityHealth = 200}
zrmine.config.Damageable["Sorter"] = {EntityHealth = 200}

// Some debug information
zrmine.config.debug = false
///////////////////////


// The Builder SWEP
///////////////////////
zrmine.config.BuilderSWEP = {

	keys = {
		switch_left = KEY_E,
		switch_right = KEY_R
	},

	// The money the player receives if he deconstructs a entity
	refund_val = 0.5, // 1 = Full , 0.5 = half, 0 = no money back

	// The entity price
	entity_price = {
		["zrms_conveyorbelt_n"] = 150,
		["zrms_conveyorbelt_s"] = 100,
		["zrms_conveyorbelt_c_left"] = 250,
		["zrms_conveyorbelt_c_right"] = 250,

		["zrms_crusher"] = 1000,
		["zrms_splitter"] = 1500,
		["zrms_inserter"] = 1500,

		["zrms_refiner_coal"] = 1500,
		["zrms_refiner_iron"] = 2000,
		["zrms_refiner_bronze"] = 3000,
		["zrms_refiner_silver"] = 4000,
		["zrms_refiner_gold"] = 5000,

		["zrms_sorter_coal"] = 1500,
		["zrms_sorter_iron"] = 2000,
		["zrms_sorter_bronze"] = 3000,
		["zrms_sorter_silver"] = 4000,
		["zrms_sorter_gold"] = 5000
	},

	// How many entites is the player allowed to spawn/buy
	entity_limit = {
		["zrms_conveyorbelt_n"] = 10,
		["zrms_conveyorbelt_s"] = 6,
		["zrms_conveyorbelt_c_left"] = 6,
		["zrms_conveyorbelt_c_right"] = 6,

		["zrms_crusher"] = 2,
		["zrms_splitter"] = 4,
		["zrms_inserter"] = 4,

		["zrms_refiner_coal"] = 2,
		["zrms_refiner_iron"] = 2,
		["zrms_refiner_bronze"] = 2,
		["zrms_refiner_silver"] = 2,
		["zrms_refiner_gold"] = 2,

		["zrms_sorter_coal"] = 2,
		["zrms_sorter_iron"] = 2,
		["zrms_sorter_bronze"] = 2,
		["zrms_sorter_silver"] = 2,
		["zrms_sorter_gold"] = 2
	},
}
///////////////////////




// The Pickaxe
///////////////////////

// The Level System
// If set to true then the data gets writen into sv.db
// If set to false then we write the player data as file at garrysmod\data\zrms\playerdata
zrmine.config.Pickaxe_UseDB = false

// This command migrates data from sv.db to file (It only migrates the data from online players and only if it doesent allready exist as file)
// Console Command: zrms_levelsystem_migrate_data_to_file

// This is the Time in seconds that the Level system gets saved each player it changed
zrmine.config.Pickaxe_LvlSys_SaveTime = 500

// How long after the player has spawned should we wait till we load his Pickaxe Level Data
zrmine.config.Pickaxe_LvlSys_Init_LoadTime = 5

/*
Examble: zrmine.config.Pickaxe_Lvl[Level] =
    {
    NextXP = Amount of XP Needed for the next Level up,
    HarvestAmount = Amount of Resource Harvested per Hit in Kg,
    HarvestInterval = Hit interval ,
    OreInv = Your Pickaxe Ore Inventory Capacity,
    FillCap = The Amount of or you can fill in a Crusher or crate per Right Click
    }
*/
zrmine.config.Pickaxe_Lvl = {}
zrmine.config.Pickaxe_Lvl[0] = {NextXP = 100, HarvestAmount = 0.1, HarvestInterval = 1.3 , OreInv = 10, FillCap = 3}
zrmine.config.Pickaxe_Lvl[1] = {NextXP = 200, HarvestAmount = 0.5, HarvestInterval = 1 , OreInv = 15, FillCap = 5}
zrmine.config.Pickaxe_Lvl[2] = {NextXP = 400, HarvestAmount = 1, HarvestInterval = 0.9 , OreInv = 20, FillCap = 10}
zrmine.config.Pickaxe_Lvl[3] = {NextXP = 500, HarvestAmount = 2, HarvestInterval = 0.75 , OreInv = 25, FillCap = 15}
zrmine.config.Pickaxe_Lvl[4] = {NextXP = 1000, HarvestAmount = 4, HarvestInterval = 0.6 , OreInv = 35, FillCap = 20}
zrmine.config.Pickaxe_Lvl[5] = {NextXP = 1500, HarvestAmount = 5, HarvestInterval = 0.5 , OreInv = 50, FillCap = 25}

// Here you can set what Ore Ressource requires what Pickaxe Level
zrmine.config.Pickaxe_OreRestriction = {
	["Coal"] = 0,
	["Iron"] = 0,
	["Bronze"] = 0,
	["Silver"] = 0,
	["Gold"] = 0,
	["Random"] = 0,
}


// How many pickaxe hits before we get another XP
zrmine.config.Pickaxe_MaxNextXP = 10
zrmine.config.Pickaxe_MinNextXP = 5

// What Color Theme should the Pickaxe UI have
zrmine.config.PickaxeThemeLight = false

// This Defines a offset for the main UI of the Pickaxe
zrmine.config.PickaxeUI_Offset = Vector(0,0,0)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

// Defines the harvest chance in % per Hit
zrmine.config.Pickaxe_HarvestChance = 75 //1-100% 75% means we have a 25% chance of getting no resource

// This Values are % Multiplicators for the diffrend resource types
// *Note* Examble : Amount: 0.5% = -50% You get only half the amount per hit   Speed: 1.3% = +30% more time needed do harvest
zrmine.config.Pickaxe_HarvestMul = {}
zrmine.config.Pickaxe_HarvestMul["Random"] = {Amount = 0.5, Speed = 1.3,XP = 2}
zrmine.config.Pickaxe_HarvestMul["Coal"] =  {Amount = 1.3, Speed = 0.5,XP = 1}
zrmine.config.Pickaxe_HarvestMul["Iron"] = {Amount = 1.2, Speed = 0.7,XP = 1}
zrmine.config.Pickaxe_HarvestMul["Bronze"] = {Amount = 0.6, Speed = 1,XP = 1}
zrmine.config.Pickaxe_HarvestMul["Silver"] = {Amount = 0.5, Speed = 1.1,XP = 2}
zrmine.config.Pickaxe_HarvestMul["Gold"] = {Amount = 0.25, Speed = 1.5,XP = 3}
///////////////////////



// The Bar
///////////////////////

/*
// Real Metal Price (This is for Reference only and does not change anything inGame)
local Gold_1kg = 48000  //$
local Silver_1kg = 630  //$
local Bronze_1kg = 18   //$
local Iron_1kg = 0.80   //$
*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

local Gold_1kg = 160    //$
local Silver_1kg = 85   //$
local Bronze_1kg = 35   //$
local Iron_1kg = 20 //$

local Mass_per_Bar = 15

// The Cash Value of 1 bar
zrmine.config.BarValue = {}
zrmine.config.BarValue["Iron"] = Iron_1kg * Mass_per_Bar
zrmine.config.BarValue["Bronze"] = Bronze_1kg * Mass_per_Bar
zrmine.config.BarValue["Silver"] = Silver_1kg * Mass_per_Bar
zrmine.config.BarValue["Gold"] = Gold_1kg * Mass_per_Bar

// Does the storage crate need do be full before it can be collected
zrmine.config.StorageCrateFull = false

zrmine.config.MetalBar_Stealing = {

	// Can other Players steal the Bars or the storagecrate?
	Enabled = false,

	// These Jobs can steal metalbars and storagecrates. (Leave empty to allow everyone to steal)
	// You probably also want to add the job names to zrmine.config.Jobs so these Jobs can also sell the metal bars
	Jobs = {
		//[TEAM_GANG] = true,
	}
}

// Do we want the metal bars from the players inventory to drop on death?
zrmine.config.MetalBar_DropOnDeath = false
///////////////////////



// The Buyer NPC
///////////////////////
zrmine.config.MetalBuyer = {

	// Model of the NPC
	model = "models/Humans/Group03/male_07.mdl",
	// Note* You need do make sure the Model got compiled with the animations you want to use
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	// The Idle Animations of the Buyer NPC
	anim_idle = {"idle_angry","idle_subtle"},

	// The Sell Animations of the Buyer NPC
	anim_sell = {"takepackage","cheer1","cheer2"},

	// This is the time in seconds the buyer npcs refresh their buy rate
	RefreshRate = 600, //seconds

	// This defines the range at which some Buyers gonna buy your metals
	MaxRate = 150, //%
	MinRate = 75, //%
}
///////////////////////



// The Resource Junk
///////////////////////
// This Values Defines the Despawn Time in seconds, set to -1 do Disable it
zrmine.config.Resource_DespawnTime = 200
///////////////////////

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 


// The Ore Spawns
///////////////////////

// Do we want the Ore Spawns do refresh?
zrmine.config.Ore_Refresh = true

// How often do we want do refresh the ore spawns?
zrmine.config.Ore_Refreshrate = 15

// How much gets refreshed?
zrmine.config.Ore_RefreshAmount = 200 //kg
///////////////////////



// The Mine
///////////////////////

// If you want do set the name of the Mine Entrance yourself rather then using the player name
// This can be usefull if the MineEntrace is public
// Set this to nil if you dont want to use Public Mining Entities
zrmine.config.Mine_CustomName = nil

// Defines the chance in % what the MineEntrance Enity gives you
zrmine.config.Mine_ResourceChance = {}
zrmine.config.Mine_ResourceChance["Coal"] = 35
zrmine.config.Mine_ResourceChance["Iron"] = 30
zrmine.config.Mine_ResourceChance["Bronze"] = 15
zrmine.config.Mine_ResourceChance["Silver"] = 10
zrmine.config.Mine_ResourceChance["Gold"] = 5

// This Value Defines the Mining Time in seconds for the MineEntrace Entity
zrmine.config.MiningTime = {}
zrmine.config.MiningTime["Random"] = 30
zrmine.config.MiningTime["Coal"] = 15
zrmine.config.MiningTime["Iron"] = 30

zrmine.config.MiningTime["Bronze"] = 40
zrmine.config.MiningTime["Silver"] = 50
zrmine.config.MiningTime["Gold"] = 60

// The Ore Search distance of the Mine
zrmine.config.Mine_SearchDistance = 400

// This Value Defines the Amount one Minning Load gives the player in kg
zrmine.config.Max_MiningAmount = 45
zrmine.config.Min_MiningAmount = 15

// This defines how many ore entites 1 mine is allowed to spawn until it tells the user to refine some of the allready spawned ore
zrmine.config.Mine_MaxEntCount = 6
///////////////////////



// The Conveyorbelt
///////////////////////
zrmine.config.Belt_Capacity = 15
zrmine.config.SplitterBelt_Capacity = 25
///////////////////////


                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

// The Inserter
///////////////////////
// Should Resources be deleted when no module is connected
zrmine.config.Inserter_DeleteOnEndPoint = true
//*Note* When a ressource reeaches the end of a inserter belt then it either gets Deleted or outputed as gravel entity
// By putting a GravelCrate near the inserter end point you can collect the moved ressource rather then it getting destroyed.

// This defines the loss rate of the ore when transported via inserter.
// 0 = No loss at all.  0.5 = Half of the Ore gets lost.
zrmine.config.Inserter_LossRate = 0.25  // 0 - 0.9
///////////////////////



// The Crusher
///////////////////////

// Whats the crush process duration
zrmine.config.Crusher_Time = 4

// Whats the work amount
zrmine.config.Crusher_WorkAmount = 2

// Whats the crusher inventory capacity?
zrmine.config.Crusher_Capacity = 100
///////////////////////



// The Gravel Crate
///////////////////////

// The Capacity of the Crates
zrmine.config.GravelCrates_Capacity = 100

// Do we want do reuse the gravel crates or should they get deleted when emtpy
zrmine.config.GravelCrates_ReUse = true
///////////////////////



// The Refiner Crate
///////////////////////
// Do we want that everyone can attach or detach the refiner basket
zrmine.config.ResourceCrates_Sharing = true
// The Capacity of the Crates
zrmine.config.ResourceCrates_Capacity = 50
// Do we want do reuse the crate or destroy it when emtpy
zrmine.config.ResourceCrates_ReUse = true
///////////////////////



// The Refiner
///////////////////////
// This Values Defines the Refining Time in seconds
zrmine.config.Gold_RefiningTime = 30
zrmine.config.Silver_RefiningTime = 15
zrmine.config.Bronze_RefiningTime = 10
zrmine.config.Iron_RefiningTime = 5
zrmine.config.Coal_RefiningTime = 5

// How much of the Refined ore is metal
zrmine.config.RefiningAmount = 0.75 // 75%

// The Ore Capacity of the Refiner
zrmine.config.Refiner_Capacity = 25

// Do we want to that a Refiner Crate spawns with the Refiner?
// Note* This only applys to Refiners used in a Public Pipeline!
zrmine.config.Refiner_AutoSpawnCrate = true
///////////////////////



// The Melter
///////////////////////
// The Coal Capacity of the Melter
zrmine.config.Melter_Coal_Capacity = 100

// The Unload Time
zrmine.config.Melter_UnloadTime = 10

zrmine.config.Melter_Vars = {}
zrmine.config.Melter_Vars["Iron"] = {OreAmount = 25, MeltDuration = 5,CoalAmount = 10,CoolingTime = 3}
zrmine.config.Melter_Vars["Bronze"] = {OreAmount = 15, MeltDuration = 10,CoalAmount = 15,CoolingTime = 5}
zrmine.config.Melter_Vars["Silver"] = {OreAmount = 10, MeltDuration = 15,CoalAmount = 20,CoolingTime = 7}
zrmine.config.Melter_Vars["Gold"] = {OreAmount = 1, MeltDuration = 20,CoalAmount = 25,CoolingTime = 10}
///////////////////////



// Vrondakis Leveling System
///////////////////////

// How much XP do we get for completing these Tasks
// *Note01 Only works if Vrondakis Leveling System is installed
// *Note02 Also needs Faclos or NaMad PropProtection script installed do determine the owner
zrmine.config.Vrondakis = {}
zrmine.config.Vrondakis["Mining_mine"] = {XP = 5} // Per Mine Load
zrmine.config.Vrondakis["Mining_pickaxe"] = {XP = 1} // Per Hit
zrmine.config.Vrondakis["Crushing"] = {XP = 1} // Per WorkLoad
zrmine.config.Vrondakis["Refining"] = {XP = 2} // Per WorkLoad
zrmine.config.Vrondakis["Melting"] = {XP = 10} // Per WorkLoad
zrmine.config.Vrondakis["Selling"] = {XP = 5} // Per Sell
///////////////////////

--lua/weapons/guitar/shared.lua:
return gluapack()()
--addons/hackable_server/lua/languages/hacktool/lang_en.lua:
return "english",{
	["Wanted"] = "Wanted",
	["Unwanted"] = "Unwanted",
	["Unarrest"] = "Unarrest",
	["Warrant"] = "Warrant",
	["Remove warrant"] = "Remove warrant",
	["Add a law"] = "Add a law",
	["Remove the law"] = "Remove the law",
	["Initiate a lockdown"] = "Initiate a lockdown",
	["Cancel the lockdown"] = "Cancel the lockdown",
	["Steal money"] = "Steal money",
	["Reason"] = "Reason",
	["Error"] = "Error",
	["Time"] = "Time",
	["Nobody is wanted"] = "Nobody is wanted",
	["Nobody is arrested"] = "Nobody is arrested",
	["There is no mayor"] = "There is no mayor",
	["Law"] = "Law",
	["Law added"] = "Law added",
	["Success"] = "Success",
	["There is no laws"] = "There is no laws",
	["Success! You got $"] = "Success! You got $",
	["Success chance"] = "Success chance",
    ["Not enough police"] = "Not enough police",
	["LOADING..."] = "LOADING...",
	["RELOADING..."] = "RELOADING...",
	["CPU OVERHEAT!"] = "CPU OVERHEAT!",
	["SYSTEM ERROR!"] = "SYSTEM ERROR!",
	["READY"] = "READY"
}
--addons/hackable_server/lua/languages/hacktool/lang_fr.lua:
return gluapack()()
--addons/hackable_server/lua/weapons/hacktool/cl_hackanim1.lua:
return gluapack()()
--addons/hackable_server/lua/weapons/hacktool/cl_hackanim2.lua:
return gluapack()()
--addons/hackable_server/lua/weapons/hacktool/cl_hackmenuoptions.lua:
local function sendCmd(cmd, args)
	net.Start("hacktool_server_cmd")
		net.WriteString(cmd)
		net.WriteTable(args)
	net.SendToServer()
end

local getMayor = function ()
	for k,v in ipairs(player.GetAll()) do 
		if v:isMayor() then
			return v
		end
	end
	return nil
end

local function doBeep(n,vol)
	vol = vol or 1
	if n == "beep" then
		LocalPlayer():EmitSound("buttons/button17.wav", 75, 200, vol, CHAN_AUTO)
	elseif n == "tick" then
		LocalPlayer():EmitSound("buttons/button14.wav", 75, 200, vol, CHAN_AUTO)
	elseif n == "bebeep" then
		LocalPlayer():EmitSound("buttons/button24.wav", 75, 50, vol, CHAN_AUTO)
	elseif n == "deny" then
		LocalPlayer():EmitSound("buttons/button10.wav", 75, 100, vol, CHAN_AUTO)
	elseif n == "bzz" then
		LocalPlayer():EmitSound("buttons/button10.wav", 75, 200, vol, CHAN_AUTO)
	end
end

local function getPoliceUnits()
	local cops = {}
	for k,v in ipairs(player.GetAll()) do
		if v.isCP and v:isCP() and v.isMayor and not v:isMayor() then
			cops[#cops + 1] = v
		end
	end
	return cops
end

local tr = hacktoolTranslate and hacktoolTranslate.Translate

local options = {
	{
		text = "Wanted",
		id = "wanted",
		onclick = function(ply)
			local ret = {}
			for k,v in ipairs(player.GetAll()) do
				ret[#ret + 1] = {
					text = v:GetName(),
					onclick = function()
						return {
							type = "input",
							text = "Reason",
							value = "no reason",
							onclick = function(reason)
								return {
									type = "input",
									numberOnly = true,
									text = "Time",
									value = "60",
									onclick = function(time)
										sendCmd("wanted", {
											p = v,
											r = reason,
											t = tonumber(time)
										})
									end
								}
							end
						}
					end
				}
			end
			table.sort(ret,function(a,b) return a.text > b.text end)
			ret.type="list"
			return ret
		end
	},
	{
		text = "Unwanted",
		id = "unwanted",
		onclick = function(ply)
			local ret = {}
			for k,v in ipairs(player.GetAll()) do
				if v:isWanted() then
					ret[#ret+1] = {
						text = v:GetName(),
						onclick = function()
							sendCmd("unwanted", {
								p = v
							})
						end
					}
				end
			end
			ret.type = "list"
			if #ret == 0 then
				doBeep('bzz',1)
				ret = {
					type = "note",
					text = "Nobody is wanted",
					color = Color(100,0,0)
				}
			end
			return ret	
		end
	},
	{
		text = "Unarrest",
		id = "unarrest",
		onclick = function(ply)
			local ret = {}
			for k,v in ipairs(player.GetAll()) do
				if v:isArrested() then
					ret[#ret+1] = {
						text = v:GetName(),
						onclick = function()
							sendCmd("unarrest", {
								p = v
							})
						end
					}
				end
			end
			ret.type = "list"
			if #ret == 0 then
				doBeep('bzz',1)
				ret = {
					type = "note",
					text = "Nobody is arrested",
					color = Color(100,0,0)
				}
			end
			return ret					
		end
	},
	{
		text = "Warrant",
		id = "warrant",
		onclick = function(ply)
			local ret = {}
			for k,v in ipairs(player.GetAll()) do
				ret[#ret + 1] = {
					text = v:GetName(),
					onclick = function()
						return {
							type = "input",
							text = "Reason",
							value = "no reason",
							onclick = function(reason)
								sendCmd("warrant", {
									p = v,
									r = reason
								})
							end
						}
					end
				}
			end
			table.sort(ret,function(a,b) return a.text > b.text end)
			ret.type="list"
			return ret
		end
	},
	{
		text = "Remove warrant",
		id = "unwarrant",
		onclick = function(ply)
			local ret = {}
			for k,v in ipairs(player.GetAll()) do
				ret[#ret+1] = {
					text = v:GetName(),
					onclick = function()
						sendCmd("unwarrant", {
							p = v
						})
					end
				}
			end
			ret.type = "list"
			return ret
		end
	},
	{
		text = "Initiate a lockdown",
		id = "lockdown",
		onclick = function (ply)
			sendCmd("lockdown", {})
			return {
				type = "note",
				text = "Success",
				color = Color(0,100,0)
			}
		end
	},
	{
		text = "Cancel the lockdown",
		id = "unlockdown",
		onclick = function (ply)
			sendCmd("unlockdown", {})
			return {
				type = "note",
				text = "Success",
				color = Color(0,100,0)
			}
		end
	},
	{
		text = "Steal money",
		id = "stealmoney",
		onclick = function(ply)
			local cv = GetConVar("hacktool_minpolice")
			if #getPoliceUnits() < (cv and cv:GetInt() or 0) then
				return {
					type = "note",
					text = "Not enough police",
					color = Color(100,0,0)
				}
			end
			sendCmd("stealmoney", {})
			return {
				type = "note",
				text = tr("Success! You got $")..GetConVar("hacktool_hackmoney"):GetInt(),
				color = Color(0,100,0)
			}
		end
	}	
}

local custom = include("sh_customoptions.lua")

if custom then
	for k,v in ipairs(custom) do
		v.serverfunc = nil
		v.isCustom = true
		options[#options + 1] = v
	end
end

options.text = "Main menu"
options.type = "list"

return options

--gamemodes/darkrp/entities/weapons/keys/cl_menu.lua:
return gluapack()()
--gamemodes/darkrp/entities/weapons/pocket/cl_menu.lua:
local meta = FindMetaTable("Player")
local pocket = {}
local frame
local reload

--[[---------------------------------------------------------------------------
Stubs
---------------------------------------------------------------------------]]
DarkRP.stub{
    name = "openPocketMenu",
    description = "Open the DarkRP pocket menu.",
    realm = "Client",
    parameters = {
    },
    returns = {
    },
    metatable = DarkRP
}

--[[---------------------------------------------------------------------------
Interface functions
---------------------------------------------------------------------------]]
function meta:getPocketItems()
    if self ~= LocalPlayer() then return nil end

    return pocket
end

function DarkRP.openPocketMenu()
    if IsValid(frame) and frame:IsVisible() then return end
    local wep = LocalPlayer():GetActiveWeapon()
    if not wep:IsValid() or wep:GetClass() ~= "pocket" then return end

    if not pocket then
        pocket = {}

        return
    end

    if table.IsEmpty(pocket) then return end
    frame = vgui.Create("DFrame")

    local count = GAMEMODE.Config.pocketitems or GM.Config.pocketitems
    frame:SetSize(345, 32 + 64 * math.ceil(count / 5) + 3 * math.ceil(count / 5))
    frame:SetTitle(DarkRP.getPhrase("drop_item"))
    frame.btnMaxim:SetVisible(false)
    frame.btnMinim:SetVisible(false)
    frame:SetDraggable(false)
    frame:MakePopup()
    frame:Center()

    local Scroll = vgui.Create("DScrollPanel", frame)
    Scroll:Dock(FILL)

    local sbar = Scroll:GetVBar()
    sbar:SetWide(3)
    frame.List = vgui.Create("DIconLayout", Scroll)
    frame.List:Dock(FILL)
    frame.List:SetSpaceY(3)
    frame.List:SetSpaceX(3)
    reload()
    frame:SetSkin(GAMEMODE.Config.DarkRPSkin)
end
net.Receive("DarkRP_PocketMenu", DarkRP.openPocketMenu)

--[[---------------------------------------------------------------------------
UI
---------------------------------------------------------------------------]]
function reload()
    if not IsValid(frame) or not frame:IsVisible() then return end
    if not pocket or next(pocket) == nil then frame:Close() return end

    local itemCount = table.Count(pocket)

    frame.List:Clear()
    local items = {}

    for k, v in pairs(pocket) do
        local ListItem = frame.List:Add("DPanel")
        ListItem:SetSize(64, 64)

        local icon = vgui.Create("SpawnIcon", ListItem)
        icon:SetModel(v.model)
        icon:SetSize(64, 64)
        icon:SetTooltip()
        icon.DoClick = function(self)
            icon:SetTooltip()

            net.Start("DarkRP_spawnPocket")
                net.WriteFloat(k)
            net.SendToServer()
            pocket[k] = nil

            itemCount = itemCount - 1

            if itemCount == 0 then
                frame:Close()
                return
            end

            fn.Map(self.Remove, items)
            items = {}

            local wep = LocalPlayer():GetActiveWeapon()

            wep:SetHoldType("pistol")
            timer.Simple(0.2, function()
                if wep:IsValid() then
                    wep:SetHoldType("normal")
                end
            end)
        end

        table.insert(items, icon)
    end
    if itemCount < GAMEMODE.Config.pocketitems then
        for _ = 1, GAMEMODE.Config.pocketitems - itemCount do
            local ListItem = frame.List:Add("DPanel")
            ListItem:SetSize(64, 64)
        end
    end
end

local function retrievePocket()
    pocket = net.ReadTable()
    reload()
end
net.Receive("DarkRP_Pocket", retrievePocket)

--addons/darkrpadvancedkeys/lua/weapons/weapon_adv_keys/cl_menu.lua:
-- CUSTOM DISPLAY ON DOORS/VEHICLES
local ADVKEYS_UnlockedMat = Material("craphead_scripts/adv_keys/door_unlocked.png")
local ADVKEYS_LockedMat = Material("craphead_scripts/adv_keys/door_locked.png")

function SWEP:DrawHUD()
	local x = ScrW() / 2.0 
	local y = ScrH() / 2.0 
		
	local pos = self.Owner:EyePos()
	local posang = self.Owner:GetAimVector()
	
	local tracedata = {}
	tracedata.start = pos
	tracedata.endpos = pos + ( posang * 180 )
	tracedata.filter = self.Owner
	local trace = util.TraceLine( tracedata )
	
	local tracedatafar = {}
	tracedatafar.start = pos
	tracedatafar.endpos = pos + ( posang * 400 )
	tracedatafar.filter = self.Owner
	local tracefar = util.TraceLine( tracedatafar )
	
	if self.Owner:InVehicle() then return end
	if tracefar.HitWorld then return end
	
	if tracefar.HitNonWorld then
		if tracefar.Entity:IsVehicle() or ( IsValid( trace.Entity ) and trace.Entity:isDoor() ) then
			if LocalPlayer():canKeysLock( tracefar.Entity ) or LocalPlayer():canKeysLock( trace.Entity ) then	
				if tracefar.Entity:GetNWBool( "ADVKEYS_IsLocked" ) then
					surface.SetDrawColor( 255, 255, 255, 255 )
					surface.SetMaterial( ADVKEYS_LockedMat )
					surface.DrawTexturedRect( x - 25, y - 50, 50, 50 )
				else
					surface.SetDrawColor( 255, 255, 255, 255 )
					surface.SetMaterial( ADVKEYS_UnlockedMat )
					surface.DrawTexturedRect( x - 25, y - 50, 50, 50 )
				end
			end
		end
	end
end


-- DEFAULT DARKRP CODE
local function AddButtonToFrame(Frame)
    Frame:SetTall(Frame:GetTall() + 110)

    local button = vgui.Create("DButton", Frame)
    button:SetPos(10, Frame:GetTall() - 110)
    button:SetSize(180, 100)

    Frame.buttonCount = (Frame.buttonCount or 0) + 1
    Frame.lastButton = button
    return button
end

DarkRP.stub{
    name = "openKeysMenu",
    description = "Open the keys/F2 menu.",
    parameters = {},
    realm = "Client",
    returns = {},
    metatable = DarkRP
}

DarkRP.hookStub{
    name = "onKeysMenuOpened",
    description = "Called when the keys menu is opened.",
    parameters = {
        {
            name = "ent",
            description = "The door entity.",
            type = "Entity"
        },
        {
            name = "Frame",
            description = "The keys menu frame.",
            type = "Panel"
        }
    },
    returns = {
    },
    realm = "Client"
}

local KeyFrameVisible = false

local function openMenu(setDoorOwnerAccess, doorSettingsAccess)
    if KeyFrameVisible then return end

    local trace = LocalPlayer():GetEyeTrace()
	local ent = trace.Entity
    -- Don't open the menu if the entity is not ownable, the entity is too far away or the door settings are not loaded yet
    if not IsValid(ent) or not ent:isKeysOwnable() or trace.HitPos:DistToSqr(LocalPlayer():EyePos()) > 40000 then return end

    KeyFrameVisible = true
    local Frame = vgui.Create("DFrame")
    Frame:SetSize(200, 30) -- Base size
    Frame.btnMaxim:SetVisible(false)
    Frame.btnMinim:SetVisible(false)
    Frame:SetVisible(true)
    Frame:MakePopup()

    function Frame:Think()
        local trace = LocalPlayer():GetEyeTrace()
        local LAEnt = trace.Entity
        if not IsValid(LAEnt) or not LAEnt:isKeysOwnable() or trace.HitPos:DistToSqr(LocalPlayer():EyePos()) > 40000 then
            self:Close()
        end
        if not self.Dragging then return end
        local x = gui.MouseX() - self.Dragging[1]
        local y = gui.MouseY() - self.Dragging[2]
        x = math.Clamp(x, 0, ScrW() - self:GetWide())
        y = math.Clamp(y, 0, ScrH() - self:GetTall())
        self:SetPos(x, y)
    end

    local entType = DarkRP.getPhrase(ent:IsVehicle() and "vehicle" or "door")
    Frame:SetTitle(DarkRP.getPhrase("x_options", entType:gsub("^%a", string.upper)))

    function Frame:Close()
        KeyFrameVisible = false
        self:SetVisible(false)
        self:Remove()
    end

    -- All the buttons

    if ent:isKeysOwnedBy(LocalPlayer()) then
        local Owndoor = AddButtonToFrame(Frame)
        Owndoor:SetText(DarkRP.getPhrase("sell_x", entType))
        Owndoor.DoClick = function() RunConsoleCommand("darkrp", "toggleown") Frame:Close() end

        local AddOwner = AddButtonToFrame(Frame)
        AddOwner:SetText(DarkRP.getPhrase("add_owner"))
        AddOwner.DoClick = function()
            local menu = DermaMenu()
            menu.found = false
            for k,v in pairs(DarkRP.nickSortedPlayers()) do
                if not ent:isKeysOwnedBy(v) and not ent:isKeysAllowedToOwn(v) then
                    local steamID = v:SteamID()
                    menu.found = true
                    menu:AddOption(v:Nick(), function() RunConsoleCommand("darkrp", "ao", steamID) end)
                end
            end
            if not menu.found then
                menu:AddOption(DarkRP.getPhrase("noone_available"), function() end)
            end
            menu:Open()
        end

        local RemoveOwner = AddButtonToFrame(Frame)
        RemoveOwner:SetText(DarkRP.getPhrase("remove_owner"))
        RemoveOwner.DoClick = function()
            local menu = DermaMenu()
            for k,v in pairs(DarkRP.nickSortedPlayers()) do
                if (ent:isKeysOwnedBy(v) and not ent:isMasterOwner(v)) or ent:isKeysAllowedToOwn(v) then
                    local steamID = v:SteamID()
                    menu.found = true
                    menu:AddOption(v:Nick(), function() RunConsoleCommand("darkrp", "ro", steamID) end)
                end
            end
            if not menu.found then
                menu:AddOption(DarkRP.getPhrase("noone_available"), function() end)
            end
            menu:Open()
        end
        if not ent:isMasterOwner(LocalPlayer()) then
            RemoveOwner:SetDisabled(true)
        end
    end

    if doorSettingsAccess then
        local DisableOwnage = AddButtonToFrame(Frame)
        DisableOwnage:SetText(DarkRP.getPhrase(ent:getKeysNonOwnable() and "allow_ownership" or "disallow_ownership"))
        DisableOwnage.DoClick = function() Frame:Close() RunConsoleCommand("darkrp", "toggleownable") end
    end

    if doorSettingsAccess and (ent:isKeysOwned() or ent:getKeysNonOwnable() or ent:getKeysDoorGroup() or hasTeams) or ent:isKeysOwnedBy(LocalPlayer()) then
        local DoorTitle = AddButtonToFrame(Frame)
        DoorTitle:SetText(DarkRP.getPhrase("set_x_title", entType))
        DoorTitle.DoClick = function()
            Derma_StringRequest(DarkRP.getPhrase("set_x_title", entType), DarkRP.getPhrase("set_x_title_long", entType), "", function(text)
                RunConsoleCommand("darkrp", "title", text)
                if IsValid(Frame) then
                    Frame:Close()
                end
            end,
            function() end, DarkRP.getPhrase("ok"), DarkRP.getPhrase("cancel"))
        end
    end

    if not ent:isKeysOwned() and not ent:getKeysNonOwnable() and not ent:getKeysDoorGroup() and not ent:getKeysDoorTeams() or not ent:isKeysOwnedBy(LocalPlayer()) and ent:isKeysAllowedToOwn(LocalPlayer()) then
        local Owndoor = AddButtonToFrame(Frame)
        Owndoor:SetText(DarkRP.getPhrase("buy_x", entType))
        Owndoor.DoClick = function() RunConsoleCommand("darkrp", "toggleown") Frame:Close() end
    end

    if doorSettingsAccess then
        local EditDoorGroups = AddButtonToFrame(Frame)
        EditDoorGroups:SetText(DarkRP.getPhrase("edit_door_group"))
        EditDoorGroups.DoClick = function()
            local menu = DermaMenu()
            local groups = menu:AddSubMenu(DarkRP.getPhrase("door_groups"))
            local teams = menu:AddSubMenu(DarkRP.getPhrase("jobs"))
            local add = teams:AddSubMenu(DarkRP.getPhrase("add"))
            local remove = teams:AddSubMenu(DarkRP.getPhrase("remove"))

            menu:AddOption(DarkRP.getPhrase("none"), function()
                RunConsoleCommand("darkrp", "togglegroupownable")
                if IsValid(Frame) then Frame:Close() end
            end)

            for k,v in pairs(RPExtraTeamDoors) do
                groups:AddOption(k, function()
                    RunConsoleCommand("darkrp", "togglegroupownable", k)
                    if IsValid(Frame) then Frame:Close() end
                end)
            end

            local doorTeams = ent:getKeysDoorTeams()
            for k,v in pairs(RPExtraTeams) do
                local which = (not doorTeams or not doorTeams[k]) and add or remove
                which:AddOption(v.name, function()
                    RunConsoleCommand("darkrp", "toggleteamownable", k)
                    if IsValid(Frame) then Frame:Close() end
                end)
            end

            menu:Open()
        end
    end

    if Frame.buttonCount == 1 then
        Frame.lastButton:DoClick()
    elseif Frame.buttonCount == 0 or not Frame.buttonCount then
        Frame:Close()
        KeyFrameVisible = true
        timer.Simple(0.3, function() KeyFrameVisible = false end)
    end


    hook.Call("onKeysMenuOpened", nil, ent, Frame)

    Frame:Center()
    Frame:SetSkin(GAMEMODE.Config.DarkRPSkin)
end

function DarkRP.openKeysMenu(um)
    CAMI.PlayerHasAccess(LocalPlayer(), "DarkRP_SetDoorOwner", function(setDoorOwnerAccess)
        CAMI.PlayerHasAccess(LocalPlayer(), "DarkRP_ChangeDoorSettings", fp{openMenu, setDoorOwnerAccess})
    end)
end
usermessage.Hook("KeysMenu", DarkRP.openKeysMenu)

--addons/[binbon]misc/lua/weapons/weapon_ciga_paket_muratti_rosso.lua:
-- MODEL WITH UNKNOWN AUTHOR! PM ME!!! QUICK :D -- 
-- Backdoors removed by Seefox (https://steamcommunity.com/id/seef0x/)

SWEP.PrintName = "Muratti Rosso"
SWEP.Author = "RebS"
SWEP.Purpose = "Pick one out."

SWEP.Category = "Turkish Haram Mod Sigara"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.ClipSize		= -1
SWEP.Primary.DefaultClip	= -1
SWEP.Primary.Automatic		= true
SWEP.Primary.Ammo		= "none"

SWEP.Secondary.ClipSize		= -1
SWEP.Secondary.DefaultClip	= -1
SWEP.Secondary.Automatic	= false
SWEP.Secondary.Ammo		= "none"

SWEP.HoldType = "slam"
SWEP.ViewModelFOV = 49.849246231156
SWEP.ViewModelFlip = false
SWEP.ViewModel = "models/weapons/c_grenade.mdl"
SWEP.WorldModel = "models/rebs/icikiler_sigaralar/sigara_paket_beyaz_dal.mdl"
SWEP.UseHands = true
SWEP.ShowViewModel = true
SWEP.ShowWorldModel = false
SWEP.AutoSwitchTo = false
SWEP.AutoSwitchFrom = false

SWEP.ViewModelBoneMods = {
	["ValveBiped.Grenade_body"] = {
		scale = Vector(0.009, 0.009, 0.009),
		pos = Vector(0, 0, 0),
		angle = Angle(0, 0, 0)
	}
}

SWEP.VElements = {
	["element_name"] = {
		type = "Model",
		model = "models/rebs/icikiler_sigaralar/sigara_paket_beyaz_dal.mdl",
		bone = "ValveBiped.Grenade_body",
		rel = "",
		pos = Vector(-0.5, 0, -2.1),
		angle = Angle(-15.195, 180, 180),
		size = Vector(0.85, 0.85, 0.85),
		color = Color(255, 255, 255, 255),
		surpresslightning = false,
		material = "",
		skin = 3,
		bodygroup = {}
	}
}

SWEP.WElements = {
	["element_name"] = {
		type = "Model",
		model = "models/rebs/icikiler_sigaralar/sigara_paket_beyaz_dal.mdl",
		bone = "ValveBiped.Bip01_R_Hand",
		rel = "",
		pos = Vector(3.6, 2.6, -1.3),
		angle = Angle(-26.883, 178.83, 180),
		size = Vector(1.1, 1.1, 1.1),
		color = Color(255, 255, 255, 255),
		surpresslightning = false,
		material = "",
		skin = 3,
		bodygroup = {}
	}
}

SWEP.IronSightsPos = Vector(0, 0, 0)
SWEP.IronSightsAng = Vector(0, 0, 0)
local ShootSound = Sound("physics/cardboard/cardboard_box_impact_soft7.wav")

function SWEP:PrimaryAttack()
	if (not SERVER) then return end
	self:SetNextPrimaryFire(CurTime() + 1.50)
	self:EmitSound(ShootSound)

	timer.Simple(0.3, function()
		self:EmitSound("weapons/smg1/switch_single.wav")
	end)

	local type = "_dal_beyaz"
	local class = "weapon_ciga" .. type

	local owner = self:GetOwner()
	owner:Give(class)

	owner:SelectWeapon(class)

	timer.Simple(0.4, function()
		owner:StripWeapon("weapon_ciga_paket_winston_slender")
	end)
end

function SWEP:Deploy()
	self:SetNextPrimaryFire(CurTime() + 1)
	self:SetNextSecondaryFire(CurTime() + 1)
	self:SendWeaponAnim(ACT_VM_DRAW)

	return true
end

-- 
function SWEP:SecondaryAttack()
	return false
end

function SWEP:Reload()
	return false
end

--[[*******************************************************
	SWEP Construction Kit base code
		Created by Clavus
	Available for public use, thread at:
	   facepunch.com/threads/1032378

	DESCRIPTION:
		This script is meant for experienced scripters 
		that KNOW WHAT THEY ARE DOING. Don't come to me 
		with basic Lua questions.

		Just copy into your SWEP or SWEP base of choice
		and merge with your own code.

		The SWEP.VElements, SWEP.WElements and
		SWEP.ViewModelBoneMods tables are all optional
		and only have to be visible to the client.
*******************************************************]]
function SWEP:Initialize()
	-- other initialize code goes here
	self:SetHoldType(self.HoldType)
	if CLIENT then
		-- Create a new table for every weapon instance
		self.VElements = table.FullCopy(self.VElements)
		self.WElements = table.FullCopy(self.WElements)
		self.ViewModelBoneMods = table.FullCopy(self.ViewModelBoneMods)
		self:CreateModels(self.VElements) -- create viewmodels
		self:CreateModels(self.WElements) -- create worldmodels

		-- init view model bone build function
		local owner = self:GetOwner()

		if IsValid(owner) then
			local vm = owner:GetViewModel()

			if IsValid(vm) then
				self:ResetBonePositions(vm)

				-- Init viewmodel visibility
				if (self.ShowViewModel == nil or self.ShowViewModel) then
					vm:SetColor(Color(255, 255, 255, 255))
				else
					-- we set the alpha to 1 instead of 0 because else ViewModelDrawn stops being called
					vm:SetColor(Color(255, 255, 255, 1))
					-- ^ stopped working in GMod 13 because you have to do Entity:SetRenderMode(1) for translucency to kick in
					-- however for some reason the view model resets to render mode 0 every frame so we just apply a debug material to prevent it from drawing
					vm:SetMaterial("Debug/hsv")
				end
			end
		end
	end
end

function SWEP:Holster()
	local owner = self:GetOwner()

	if CLIENT and IsValid(owner) then
		local vm = owner:GetViewModel()

		if IsValid(vm) then
			self:ResetBonePositions(vm)
		end
	end

	return true
end

function SWEP:OnRemove()
	self:Holster()
end

if CLIENT then
	SWEP.vRenderOrder = nil

	function SWEP:ViewModelDrawn()
		local vm = self:GetOwner():GetViewModel()
		if not IsValid(vm) then return end
		if (not self.VElements) then return end
		self:UpdateBonePositions(vm)

		if (not self.vRenderOrder) then
			-- we build a render order because sprites need to be drawn after models
			self.vRenderOrder = {}

			for k, v in pairs(self.VElements) do
				if (v.type == "Model") then
					table.insert(self.vRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.vRenderOrder, k)
				end
			end
		end

		for k, name in ipairs(self.vRenderOrder) do
			local v = self.VElements[name]

			if (not v) then
				self.vRenderOrder = nil
				break
			end

			if (v.hide) then continue end
			local model = v.modelEnt
			local sprite = v.spriteMaterial
			if (not v.bone) then continue end
			local pos, ang = self:GetBoneOrientation(self.VElements, v, vm)
			if (not pos) then continue end

			if (v.type == "Model" and IsValid(model)) then
				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z)
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				model:SetAngles(ang)
				--model:SetModelScale(v.size)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix("RenderMultiply", matrix)

				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() ~= v.material) then
					model:SetMaterial(v.material)
				end

				if (v.skin and v.skin ~= model:GetSkin()) then
					model:SetSkin(v.skin)
				end

				if (v.bodygroup) then
					for kk, vv in pairs(v.bodygroup) do
						if (model:GetBodygroup(k) ~= v) then
							model:SetBodygroup(k, v)
						end
					end
				end

				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end

				render.SetColorModulation(v.color.r / 255, v.color.g / 255, v.color.b / 255)
				render.SetBlend(v.color.a / 255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)

				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
			elseif (v.type == "Sprite" and sprite) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
			elseif (v.type == "Quad" and v.draw_func) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				cam.Start3D2D(drawpos, ang, v.size)
				v.draw_func(self)
				cam.End3D2D()
			end
		end
	end

	SWEP.wRenderOrder = nil

	function SWEP:DrawWorldModel()
		if (self.ShowWorldModel == nil or self.ShowWorldModel) then
			self:DrawModel()
		end

		if (not self.WElements) then return end

		if (not self.wRenderOrder) then
			self.wRenderOrder = {}

			for k, v in pairs(self.WElements) do
				if (v.type == "Model") then
					table.insert(self.wRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.wRenderOrder, k)
				end
			end
		end

		local owner = self:GetOwner()

		if (IsValid(owner)) then
			bone_ent = owner
		else
			-- when the weapon is dropped
			bone_ent = self
		end

		for k, name in pairs(self.wRenderOrder) do
			local v = self.WElements[name]

			if (not v) then
				self.wRenderOrder = nil
				break
			end

			if (v.hide) then continue end
			local pos, ang

			if (v.bone) then
				pos, ang = self:GetBoneOrientation(self.WElements, v, bone_ent)
			else
				pos, ang = self:GetBoneOrientation(self.WElements, v, bone_ent, "ValveBiped.Bip01_R_Hand")
			end

			if (not pos) then continue end
			local model = v.modelEnt
			local sprite = v.spriteMaterial

			if (v.type == "Model" and IsValid(model)) then
				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z)
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				model:SetAngles(ang)
				--model:SetModelScale(v.size)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix("RenderMultiply", matrix)

				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() ~= v.material) then
					model:SetMaterial(v.material)
				end

				if (v.skin and v.skin ~= model:GetSkin()) then
					model:SetSkin(v.skin)
				end

				if (v.bodygroup) then
					for kk, vv in pairs(v.bodygroup) do
						if (model:GetBodygroup(k) ~= v) then
							model:SetBodygroup(k, v)
						end
					end
				end

				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end

				render.SetColorModulation(v.color.r / 255, v.color.g / 255, v.color.b / 255)
				render.SetBlend(v.color.a / 255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)

				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
			elseif (v.type == "Sprite" and sprite) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
			elseif (v.type == "Quad" and v.draw_func) then
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				cam.Start3D2D(drawpos, ang, v.size)
				v.draw_func(self)
				cam.End3D2D()
			end
		end
	end

	function SWEP:GetBoneOrientation(basetab, tab, ent, bone_override)
		local bone, pos, ang

		if (tab.rel and tab.rel ~= "") then
			local v = basetab[tab.rel]
			if (not v) then return end
			-- Technically, if there exists an element with the same name as a bone
			-- you can get in an infinite loop. Let's just hope nobody's that stupid.
			pos, ang = self:GetBoneOrientation(basetab, v, ent)
			if (not pos) then return end
			pos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
			ang:RotateAroundAxis(ang:Up(), v.angle.y)
			ang:RotateAroundAxis(ang:Right(), v.angle.p)
			ang:RotateAroundAxis(ang:Forward(), v.angle.r)
		else
			bone = ent:LookupBone(bone_override or tab.bone)
			if (not bone) then return end
			pos, ang = Vector(0, 0, 0), Angle(0, 0, 0)
			local m = ent:GetBoneMatrix(bone)

			if (m) then
				pos, ang = m:GetTranslation(), m:GetAngles()
			end

			local owner = self:GetOwner()

			if (IsValid(owner) and owner:IsPlayer() and ent == owner:GetViewModel() and self.ViewModelFlip) then
				ang.r = -ang.r -- Fixes mirrored models
			end
		end

		return pos, ang
	end

	function SWEP:CreateModels(tab)
		if (not tab) then return end

		-- Create the clientside models here because Garry says we can't do it in the render hook
		for k, v in pairs(tab) do
			if (v.type == "Model" and v.model and v.model ~= "" and (not IsValid(v.modelEnt) or v.createdModel ~= v.model) and string.find(v.model, ".mdl") and file.Exists(v.model, "GAME")) then
				v.modelEnt = ClientsideModel(v.model, RENDER_GROUP_VIEW_MODEL_OPAQUE)

				if (IsValid(v.modelEnt)) then
					v.modelEnt:SetPos(self:GetPos())
					v.modelEnt:SetAngles(self:GetAngles())
					v.modelEnt:SetParent(self)
					v.modelEnt:SetNoDraw(true)
					v.createdModel = v.model
				else
					v.modelEnt = nil
				end
			elseif (v.type == "Sprite" and v.sprite and v.sprite ~= "" and (not v.spriteMaterial or v.createdSprite ~= v.sprite) and file.Exists("materials/" .. v.sprite .. ".vmt", "GAME")) then
				local name = v.sprite .. "-"

				local params = {
					["$basetexture"] = v.sprite
				}

				-- make sure we create a unique name based on the selected options
				local tocheck = {"nocull", "additive", "vertexalpha", "vertexcolor", "ignorez"}

				for i, j in pairs(tocheck) do
					if (v[j]) then
						params["$" .. j] = 1
						name = name .. "1"
					else
						name = name .. "0"
					end
				end

				v.createdSprite = v.sprite
				v.spriteMaterial = CreateMaterial(name, "UnlitGeneric", params)
			end
		end
	end

	local allbones
	local hasGarryFixedBoneScalingYet = false

	function SWEP:UpdateBonePositions(vm)
		if self.ViewModelBoneMods then
			if (not vm:GetBoneCount()) then return end
			-- !! WORKAROUND !! //
			-- We need to check all model names :/
			local loopthrough = self.ViewModelBoneMods

			if (not hasGarryFixedBoneScalingYet) then
				allbones = {}

				for i = 0, vm:GetBoneCount() do
					local bonename = vm:GetBoneName(i)

					if (self.ViewModelBoneMods[bonename]) then
						allbones[bonename] = self.ViewModelBoneMods[bonename]
					else
						allbones[bonename] = {
							scale = Vector(1, 1, 1),
							pos = Vector(0, 0, 0),
							angle = Angle(0, 0, 0)
						}
					end
				end

				loopthrough = allbones
			end

			-- !! ----------- !! //
			for k, v in pairs(loopthrough) do
				local bone = vm:LookupBone(k)
				if (not bone) then continue end
				-- !! WORKAROUND !! //
				local s = Vector(v.scale.x, v.scale.y, v.scale.z)
				local p = Vector(v.pos.x, v.pos.y, v.pos.z)
				local ms = Vector(1, 1, 1)

				if (not hasGarryFixedBoneScalingYet) then
					local cur = vm:GetBoneParent(bone)

					while (cur >= 0) do
						local pscale = loopthrough[vm:GetBoneName(cur)].scale
						ms = ms * pscale
						cur = vm:GetBoneParent(cur)
					end
				end

				s = s * ms

				-- !! ----------- !! //
				if vm:GetManipulateBoneScale(bone) ~= s then
					vm:ManipulateBoneScale(bone, s)
				end

				if vm:GetManipulateBoneAngles(bone) ~= v.angle then
					vm:ManipulateBoneAngles(bone, v.angle)
				end

				if vm:GetManipulateBonePosition(bone) ~= p then
					vm:ManipulateBonePosition(bone, p)
				end
			end
		else
			self:ResetBonePositions(vm)
		end
	end

	function SWEP:ResetBonePositions(vm)
		if (not vm:GetBoneCount()) then return end

		for i = 0, vm:GetBoneCount() do
			vm:ManipulateBoneScale(i, Vector(1, 1, 1))
			vm:ManipulateBoneAngles(i, Angle(0, 0, 0))
			vm:ManipulateBonePosition(i, Vector(0, 0, 0))
		end
	end

	--[[*************************
		Global utility code
	*************************]]
	-- Fully copies the table, meaning all tables inside this table are copied too and so on (normal table.Copy copies only their reference).
	-- Does not copy entities of course, only copies their reference.
	-- WARNING: do not use on tables that contain themselves somewhere down the line or you'll get an infinite loop
	function table.FullCopy(tab)
		if (not tab) then return nil end
		local res = {}

		for k, v in pairs(tab) do
			if (type(v) == "table") then
				res[k] = table.FullCopy(v) -- recursion ho!
			elseif (type(v) == "Vector") then
				res[k] = Vector(v.x, v.y, v.z)
			elseif (type(v) == "Angle") then
				res[k] = Angle(v.p, v.y, v.r)
			else
				res[k] = v
			end
		end

		return res
	end
end

--gamemodes/darkrp/entities/weapons/weapon_cs_base2/shared.lua:
AddCSLuaFile()

if SERVER then
    include("sv_commands.lua")
    include("sh_commands.lua")
    SWEP.Weight = 5
    SWEP.AutoSwitchTo = false
    SWEP.AutoSwitchFrom = false
end

if CLIENT then
    SWEP.DrawAmmo           = true
    SWEP.DrawCrosshair      = false
    SWEP.ViewModelFOV       = 82
    SWEP.ViewModelFlip      = false
    SWEP.CSMuzzleFlashes    = true

    -- This is the font that's used to draw the death icons
    surface.CreateFont("CSKillIcons", {
        size = ScreenScale(30),
        weight = 500,
        antialias = true,
        shadow = true,
        font = "csd"
    })
    surface.CreateFont("CSSelectIcons", {
        size = ScreenScale(60),
        weight = 500,
        antialias = true,
        shadow = true,
        font = "csd"
    })
end

SWEP.Base = "weapon_base"

SWEP.Author = "DarkRP Developers"
SWEP.Contact = ""
SWEP.Purpose = ""
SWEP.Instructions = ""

SWEP.Spawnable = false
SWEP.AdminOnly = false
SWEP.UseHands = true

SWEP.HoldType = "normal"
SWEP.LoweredHoldType = "normal"

SWEP.Primary.Sound = Sound("Weapon_AK47.Single")
SWEP.Primary.Recoil = 1.5
SWEP.Primary.Damage = 40
SWEP.Primary.NumShots = 1
SWEP.Primary.Cone = 0.02
SWEP.Primary.Delay = 0.15

SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = "none"

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"

SWEP.MultiMode = false

SWEP.DarkRPBased = true

function SWEP:SetIronsights(b)
    if (b ~= self:GetIronsights()) then
        self:SetIronsightsPredicted(b)
        self:SetIronsightsTime(CurTime())
        if GAMEMODE.Config.ironshoot then
            self:SetHoldType(b and self.HoldType or self.LoweredHoldType)
        end
        if CLIENT then
            self:CalcViewModel()
        end
    end
end

function SWEP:GetIronsights()
    return self:GetIronsightsPredicted()
end

--- Dummy functions that will be replaced when SetupDataTables runs. These are
--- here for when that does not happen (due to e.g. stacking base classes)
function SWEP:GetIronsightsTime() return -1 end
function SWEP:SetIronsightsTime() end
function SWEP:GetIronsightsPredicted() return false end
function SWEP:SetIronsightsPredicted() end

function SWEP:SetupDataTables()
    self:NetworkVar("Bool", 0, "IronsightsPredicted")
    self:NetworkVar("Float", 0, "IronsightsTime")
    self:NetworkVar("Bool", 1, "Reloading")
    self:NetworkVar("Float", 1, "LastPrimaryAttack")
    self:NetworkVar("Float", 2, "ReloadEndTime")
    self:NetworkVar("Float", 3, "BurstTime")
    self:NetworkVar("Int", 0, "BurstBulletNum")
    self:NetworkVar("Int", 1, "TotalUsedMagCount")
    self:NetworkVar("String", 0, "FireMode")
    self:NetworkVar("Entity", 0, "LastOwner")
end

function SWEP:Initialize()
    if CLIENT and IsValid(self:GetOwner()) then
        local vm = self:GetOwner():GetViewModel()
        self:ResetDarkRPBones(vm)
    end

    self:SetHoldType(GAMEMODE.Config.ironshoot and self.LoweredHoldType or self.HoldType)
    if SERVER then
        self:SetNPCMinBurst(30)
        self:SetNPCMaxBurst(30)
        self:SetNPCFireRate(0.01)
    end

    self:SetFireMode(self.Primary.Automatic and "auto" or "semi")
end

function SWEP:Deploy()
    self:SetHoldType(GAMEMODE.Config.ironshoot and self.LoweredHoldType or self.HoldType)
    self:SetIronsights(false)
    self:SetReloading(false)
    self:SetReloadEndTime(0)
    self:SetBurstTime(0)
    self:SetBurstBulletNum(0)

    return true
end

function SWEP:Holster()
    self:SetIronsights(false)
    self:SetReloading(false)
    self:SetReloadEndTime(0)
    self:SetBurstTime(0)
    self:SetBurstBulletNum(0)

    if CLIENT then self.hasShot = false end

    if not IsValid(self:GetOwner()) then return true end
    if CLIENT then
        local vm = self:GetOwner():GetViewModel()
        self:ResetDarkRPBones(vm)
    end

    return true
end

function SWEP:OnRemove()
    if CLIENT and IsValid(self:GetOwner()) then
        local vm = self:GetOwner():GetViewModel()
        self:ResetDarkRPBones(vm)
    end
end

function SWEP:OwnerChanged()
    if IsValid(self:GetOwner()) then self:SetLastOwner(self:GetOwner()) end
end

function SWEP:PrimaryAttack()
    self.Primary.Automatic = self:GetFireMode() == "auto"

    if self:GetBurstBulletNum() > 0 and CurTime() < self:GetBurstTime() then return end

    local Owner = self:GetOwner()

    if not IsValid(Owner) then return end

    if self.MultiMode and Owner:KeyDown(IN_USE) then
        if self:GetFireMode() == "semi" then
            self:SetFireMode("burst")
            self.Primary.Automatic = false
            Owner:PrintMessage(HUD_PRINTCENTER, DarkRP.getPhrase("switched_burst"))
        elseif self:GetFireMode() == "burst" then
            self:SetFireMode("auto")
            self.Primary.Automatic = true
            Owner:PrintMessage(HUD_PRINTCENTER, DarkRP.getPhrase("switched_fully_auto"))
        elseif self:GetFireMode() == "auto" then
            self:SetFireMode("semi")
            self.Primary.Automatic = false
            Owner:PrintMessage(HUD_PRINTCENTER, DarkRP.getPhrase("switched_semi_auto"))
        end
        self:SetNextPrimaryFire(CurTime() + 0.5)
        self:SetNextSecondaryFire(CurTime() + 0.5)
        return
    end

    if self:GetFireMode() ~= "burst" then
        self:SetNextPrimaryFire(CurTime() + self.Primary.Delay)
    end

    self:SetNextSecondaryFire(CurTime() + self.Primary.Delay)

    if self:Clip1() <= 0 then
        self:EmitSound("weapons/clipempty_rifle.wav")
        self:SetNextPrimaryFire(CurTime() + 2)
        return
    end

    if not self:CanPrimaryAttack() then self:SetIronsights(false) return end
    if not self:GetIronsights() and GAMEMODE.Config.ironshoot then return end
    -- Play shoot sound
    self:EmitSound(self.Primary.Sound)

    -- Shoot the bullet
    self:CSShootBullet(self.Primary.Damage, self.Primary.Recoil + 3, self.Primary.NumShots, self.Primary.Cone + .05)

    if self:GetFireMode() == "burst" then
        self:SetBurstBulletNum(self:GetBurstBulletNum() + 1)
        if self:GetBurstBulletNum() == 3 then
            self:SetBurstTime(0)
            self:SetBurstBulletNum(0)
        else
            self:SetBurstTime(CurTime() + 0.1)
        end
    end

    -- Remove 1 bullet from our clip
    self:TakePrimaryAmmo(1)

    self:SetLastPrimaryAttack(CurTime())

    if Owner:IsNPC() then return end

    -- Punch the player's view
    Owner:ViewPunch(Angle(util.SharedRandom("DarkRP_CSBase" .. self:EntIndex() .. "Mag" .. self:GetTotalUsedMagCount() .. "p" .. self:Clip1(), -1.2, -1.1) * self.Primary.Recoil, util.SharedRandom("DarkRP_CSBase" .. self:EntIndex() .. "Mag" .. self:GetTotalUsedMagCount() .. "y" .. self:Clip1(), -1.1, 1.1) * self.Primary.Recoil, 0))
end

function SWEP:CSShootBullet(dmg, recoil, numbul, cone)
     local Owner = self:GetOwner()

    if not IsValid(Owner) then return end

    numbul = numbul or 1
    cone = cone or 0.01

    local bullet = {}
    bullet.Num = numbul or 1
    bullet.Src = Owner:GetShootPos()   -- Source
    bullet.Dir = (Owner:GetAimVector():Angle() + Owner:GetViewPunchAngles()):Forward() -- Dir of bullet
    bullet.Spread = Vector(cone, cone, 0)        -- Aim Cone
    bullet.Tracer = 4                            -- Show a tracer on every x bullets
    bullet.Force = 5                             -- Amount of force to give to phys objects
    bullet.Damage = dmg

    Owner:FireBullets(bullet)
    self:SendWeaponAnim(ACT_VM_PRIMARYATTACK)    -- View model animation
    Owner:MuzzleFlash()                -- Crappy muzzle light
    Owner:SetAnimation(PLAYER_ATTACK1) -- 3rd Person Animation

    if Owner:IsNPC() then return end

    -- Part of workaround, different viewmodel position if shots have been fired
    if CLIENT then self.hasShot = true end
end

local host_timescale = GetConVar("host_timescale")
local IRONSIGHT_TIME = 0.25
function SWEP:GetViewModelPosition(pos, ang)
    if (not self.IronSightsPos) then return pos, ang end

    pos = pos + ang:Forward() * -5

    if (self.bIron == nil) then return pos, ang end

    local bIron = self.bIron
    local time = self.fCurrentTime + (SysTime() - self.fCurrentSysTime) * game.GetTimeScale() * host_timescale:GetFloat()

    if bIron then
        self.SwayScale = 0.3
        self.BobScale = 0.1
    else
        self.SwayScale = 1.0
        self.BobScale = 1.0
    end

    if GAMEMODE.Config.ironshoot then
        ang:RotateAroundAxis(ang:Right(), -15)
    end

    local fIronTime = self.fIronTime
    if (not bIron) and fIronTime < time - IRONSIGHT_TIME then
        return pos, ang
    end

    local mul = 1.0

    if fIronTime > time - IRONSIGHT_TIME then
        mul = math.Clamp((time - fIronTime) / IRONSIGHT_TIME, 0, 1)

        if not bIron then mul = 1 - mul end
    end

    local offset = self.IronSightsPos

    if self.IronSightsAng then
        ang = ang * 1
        ang:RotateAroundAxis(ang:Right(), self.IronSightsAng.x * mul)
        ang:RotateAroundAxis(ang:Up(), self.IronSightsAng.y * mul)
        ang:RotateAroundAxis(ang:Forward(), self.IronSightsAng.z * mul)
    end

    if GAMEMODE.Config.ironshoot then
        ang:RotateAroundAxis(ang:Right(), mul * 15)
    else
        ang:RotateAroundAxis(ang:Right(), mul)
    end

    pos = pos + offset.x * ang:Right() * mul
    pos = pos + offset.y * ang:Forward() * mul
    pos = pos + offset.z * ang:Up() * mul

    if not self.hasShot then
        if self.IronSightsAngAfterShootingAdjustment then
            ang:RotateAroundAxis(ang:Right(), self.IronSightsAngAfterShootingAdjustment.x * mul)
            ang:RotateAroundAxis(ang:Up(), self.IronSightsAngAfterShootingAdjustment.y * mul)
            ang:RotateAroundAxis(ang:Forward(), self.IronSightsAngAfterShootingAdjustment.z * mul)
        end

        if self.IronSightsPosAfterShootingAdjustment then
            offset = self.IronSightsPosAfterShootingAdjustment
            local right = ang:Right()
            local up = ang:Up()
            local forward = ang:Forward()

            pos = pos + offset.x * right * mul
            pos = pos + offset.y * forward * mul
            pos = pos + offset.z * up * mul
        end
    end

    return pos, ang
end

function SWEP:SecondaryAttack()
    if not self.IronSightsPos then return end

    if self:GetReloading() then return end

    self:SetIronsights(not self:GetIronsights())

    self:SetNextSecondaryFire(CurTime() + 0.3)
end

--[[---------------------------------------------------------
Reload does nothing
---------------------------------------------------------]]
function SWEP:Reload()
    if not self:DefaultReload(ACT_VM_RELOAD) then return end
    self:SetReloading(true)
    self:SetIronsights(false)
    self:SetBurstTime(0)
    self:SetBurstBulletNum(0)
    self:GetOwner():SetAnimation(PLAYER_RELOAD)
    self:SetReloadEndTime(CurTime() + 2)
    self:SetTotalUsedMagCount(self:GetTotalUsedMagCount() + 1)
end

function SWEP:OnRestore()
    self:SetNextSecondaryFire(0)
    self:SetIronsights(false)
end

function SWEP:Equip(NewOwner)
    if self.PrimaryClipLeft and self.SecondaryClipLeft and self.PrimaryAmmoLeft and self.SecondaryAmmoLeft then
        NewOwner:SetAmmo(self.PrimaryAmmoLeft, self:GetPrimaryAmmoType())
        NewOwner:SetAmmo(self.SecondaryAmmoLeft, self:GetSecondaryAmmoType())

        self:SetClip1(self.PrimaryClipLeft)
        self:SetClip2(self.SecondaryClipLeft)
    end
end

function SWEP:OnDrop()
    self.PrimaryClipLeft = self:Clip1()
    self.SecondaryClipLeft = self:Clip2()

    if not IsValid(self:GetLastOwner()) then return end
    self.PrimaryAmmoLeft = self:GetLastOwner():GetAmmoCount(self:GetPrimaryAmmoType())
    self.SecondaryAmmoLeft = self:GetLastOwner():GetAmmoCount(self:GetSecondaryAmmoType())
    self:SetCollisionGroup(COLLISION_GROUP_INTERACTIVE_DEBRIS)
end

function SWEP:CalcViewModel()
    if (not CLIENT) or (not IsFirstTimePredicted()) then return end
    self.bIron = self:GetIronsights()
    self.fIronTime = self:GetIronsightsTime()
    self.fCurrentTime = CurTime()
    self.fCurrentSysTime = SysTime()
end

-- Note that if you override Think in your SWEP, you should call
-- BaseClass.Think(self) so as not to break ironsights
function SWEP:Think()
    self:CalcViewModel()
    if self.Primary.ClipSize ~= -1 and not self:GetReloading() and not self:GetIronsights() and self:GetLastPrimaryAttack() + 1 < CurTime() and self:GetHoldType() == self.HoldType and GAMEMODE.Config.ironshoot then
        self:SetHoldType(self.LoweredHoldType)
    end
    if self:GetReloadEndTime() ~= 0 and CurTime() >= self:GetReloadEndTime() then
        self:SetReloadEndTime(0)
        self:SetReloading(false)
        if GAMEMODE.Config.ironshoot then
            self:SetHoldType(self.LoweredHoldType)
        end
        if CLIENT then self.hasShot = false end
    end
    if self:GetBurstTime() ~= 0 and CurTime() >= self:GetBurstTime() then
        self:PrimaryAttack()
    end
end

function SWEP:DrawWeaponSelection(x, y, wide, tall, alpha)
    if self.IconLetter and string.find(self.IconLetter, "^[0-9a-wA-Z]$") then
        draw.DrawNonParsedSimpleText(self.IconLetter, "CSSelectIcons", x + wide / 2, y + tall * 0.2, Color(255, 210, 0, 255), TEXT_ALIGN_CENTER)

        -- try to fool them into thinking they're playing a Tony Hawks game
        draw.DrawNonParsedSimpleText(self.IconLetter, "CSSelectIcons", x + wide / 2 + math.Rand(-4, 4), y + tall * 0.2 + math.Rand(-14, 14), Color(255, 210, 0, math.Rand(10, 120)), TEXT_ALIGN_CENTER)
        draw.DrawNonParsedSimpleText(self.IconLetter, "CSSelectIcons", x + wide / 2 + math.Rand(-4, 4), y + tall * 0.2 + math.Rand(-9, 9), Color(255, 210, 0, math.Rand(10, 120)), TEXT_ALIGN_CENTER)
    else
        -- Set us up the texture
        surface.SetDrawColor(255, 255, 255, alpha)
        surface.SetTexture(self.WepSelectIcon)

        -- Lets get a sin wave to make it bounce
        local fsin = 0

        if self.BounceWeaponIcon then
            fsin = math.sin(CurTime() * 10) * 5
        end

        -- Borders
        y = y + 10
        x = x + 10
        wide = wide - 20

        -- Draw that motherfucker
        surface.DrawTexturedRect(x + fsin, y - fsin, wide - fsin * 2, (wide / 2) + fsin)

        -- Draw weapon info box
        self:PrintWeaponInfo(x + wide + 20, y + tall * 0.95, alpha)
    end
end

if CLIENT then
    function SWEP:ViewModelDrawn(vm)
        if self.DarkRPViewModelBoneManipulations and not self:GetReloading() then
            self:UpdateDarkRPBones(vm, self.DarkRPViewModelBoneManipulations)
        else
            self:ResetDarkRPBones(vm)
        end
    end

    function SWEP:UpdateDarkRPBones(vm, manipulations)
        if not IsValid(vm) or not vm:GetBoneCount() then return end

        -- Fill in missing bone names. Things fuck up when we workaround the scale bug and bones are missing.
        local bones = {}
        for i = 0, vm:GetBoneCount() - 1 do
            local bonename = vm:GetBoneName(i)
            if manipulations[bonename] then
                bones[bonename] = manipulations[bonename]
            else
                bones[bonename] = {
                    scale = Vector(1,1,1),
                    pos = Vector(0,0,0),
                    angle = Angle(0,0,0)
                }
            end
        end

        for k, v in pairs(bones) do
            local bone = vm:LookupBone(k)
            if not bone then continue end

            -- Bone scaling seems to be buggy. Workaround.
            local scale = Vector(v.scale.x, v.scale.y, v.scale.z)
            local ms = Vector(1,1,1)
            local cur = vm:GetBoneParent(bone)
            while cur >= 0 do
                local pscale = bones[vm:GetBoneName(cur)].scale
                ms = ms * pscale
                cur = vm:GetBoneParent(cur)
            end
            scale = scale * ms

            if vm:GetManipulateBoneScale(bone) ~= scale then
                vm:ManipulateBoneScale(bone, scale)
            end
            if vm:GetManipulateBonePosition(bone) ~= v.pos then
                vm:ManipulateBonePosition(bone, v.pos)
            end
            if vm:GetManipulateBoneAngles(bone) ~= v.angle then
                vm:ManipulateBoneAngles(bone, v.angle)
            end
        end
    end

    function SWEP:ResetDarkRPBones(vm)
        if not IsValid(vm) or not vm:GetBoneCount() then return end
        for i = 0, vm:GetBoneCount() - 1 do
            vm:ManipulateBoneScale(i, Vector(1, 1, 1))
            vm:ManipulateBoneAngles(i, Angle(0, 0, 0))
            vm:ManipulateBonePosition(i, Vector(0, 0, 0))
        end
    end
end

--lua/weapons/weapon_csgo_knife_ghost.lua:
if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Spectral Shiv"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_flip/v_ghost.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_flip/w_ghost.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_csgo_knife_gold_t.lua:
if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Gold T Knife"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_default_t/v_gold_t.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_default_t/w_gold_t.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_csgo_knife_navaja.lua:
return gluapack()()
--lua/weapons/weapon_gasolinepistol/cl_init.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
-- weapon_vape/shared.lua
-- Defines common shared code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

SWEP.Author = "Swamp Onions"

SWEP.Instructions = "LMB: Rip Fat Clouds\n (Hold and release)\nRMB & Reload: Play Sounds\n\nVape Nation!"

SWEP.PrintName = "Vape"

SWEP.IconLetter	= "V"
SWEP.Category = "Vapes"
SWEP.Slot = 1
SWEP.SlotPos = 0

SWEP.ViewModelFOV = 62 --default

SWEP.WepSelectIcon = surface and surface.GetTextureID("vape_icon")
SWEP.BounceWeaponIcon = false

SWEP.ViewModel = "models/swamponions/vape.mdl"
SWEP.WorldModel = "models/swamponions/vape.mdl"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.Clipsize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"

SWEP.Secondary.Clipsize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"

SWEP.DrawAmmo = false
SWEP.HoldType = "slam"

SWEP.VapeID = 1

function SWEP:Deploy()
	self:SetHoldType("slam")
end

function SWEP:PrimaryAttack()
	if SERVER then
		VapeUpdate(self.Owner, self.VapeID)
	end
	self.Weapon:SetNextPrimaryFire(CurTime() + 0.1)
end

function SWEP:SecondaryAttack()
	if GetConVar("vape_block_sounds"):GetBool() then return end

	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapegogreen.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (0.6*100/pitch))
		net.Broadcast()
	end
	self:SetNextSecondaryFire(CurTime() + 4)
end

function SWEP:Reload()
	if GetConVar("vape_block_sounds"):GetBool() then return end
	if self.beklemesuresi then 
		if self.beklemesuresi > CurTime() then 
			return 
		end 
	end 
	if self.reloading then return end
	self.reloading=true
	self.beklemesuresi = CurTime() + 5
	timer.Simple(0.5, function() self.reloading=false end)
	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapenaysh.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (2.2*100/pitch))
		net.Broadcast()
	end
end

function SWEP:Holster()
	if SERVER and IsValid(self.Owner) then
		ReleaseVape(self.Owner)
	end
	return true
end

SWEP.OnDrop = SWEP.Holster
SWEP.OnRemove = SWEP.Holster
--addons/vape_swep/lua/weapons/weapon_vape_custom.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape_custom.lua:
-- weapon_vape_custom.lua
-- Defines a vape with changeable accent color

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

if CLIENT then
	include('weapon_vape/cl_init.lua')
else
	include('weapon_vape/shared.lua')
end

SWEP.PrintName = "Custom Vape"

SWEP.Instructions = "LMB: Rip Fat Clouds\n (Hold and release)\nRMB: Customize\nReload: Play Sound\n\nBuild the perfect vape for the perfect rip."

SWEP.VapeAccentColor = Vector(-1,-1,-1)

function SWEP:SecondaryAttack()
	if SERVER then
		self.Owner:SendLua("CustomVapeOpenPanel()")
	end
end

if CLIENT then

	CreateConVar( "cl_vapecolor", "0.35 0 1.0", FCVAR_ARCHIVE, "The value is a Vector - so between 0-1 - not between 0-255" )

	function SWEP:OwnerChanged()
		if self.Owner == LocalPlayer() then
			self.Owner.CustomVapeColor = Vector(GetConVar("cl_vapecolor"):GetString())
			net.Start("VapeUpdateCustomColor")
			net.WriteVector(self.Owner.CustomVapeColor)
			net.SendToServer()
		end
	end

	CustomVapeFrame = nil

	function CustomVapeOpenPanel()
		if IsValid(CustomVapeFrame) then return end

		local Frame = vgui.Create( "DFrame" )
		Frame:SetSize( 320, 240 ) --good size for example
		Frame:SetTitle( "Building the perfect vape for the perfect rip" )
		Frame:Center()
		Frame:MakePopup()

		local Mixer = vgui.Create( "DColorMixer", Frame )
		Mixer:Dock( FILL )
		Mixer:SetPalette( true )
		Mixer:SetAlphaBar(false) 
		Mixer:SetWangs( true )
		Mixer:SetVector(Vector(GetConVarString("cl_vapecolor")))
		Mixer:DockPadding(0,0,0,40)

		local DButton = vgui.Create( "DButton", Frame )
		DButton:SetPos( 128, 200 )
		DButton:SetText( "Build!" )
		DButton:SetSize( 64, 32 )
		DButton.DoClick = function()
			surface.PlaySound("weapons/smg1/switch_single.wav")
			local cvec = Mixer:GetVector()
			RunConsoleCommand('cl_vapecolor',tostring(cvec))
			Frame:Remove()
			timer.Simple(0.1, function()
				net.Start("VapeUpdateCustomColor")
				net.WriteVector(cvec)
				net.SendToServer()
			end)
		end

		CustomVapeFrame = Frame

	end

	net.Receive("VapeUpdateCustomColor", function(len)
		local ply = net.ReadEntity()
		local vec = net.ReadVector()
		if IsValid(ply) then ply.CustomVapeColor = vec end
	end)

else
	util.AddNetworkString("VapeUpdateCustomColor")
	net.Receive("VapeUpdateCustomColor", function(len, ply)
		if !ply:HasWeapon("weapon_vape_custom") then return end
		if ((ply.LastCustomVapeColorChange or 0) + 1) > CurTime() then return end
		ply.LastCustomVapeColorChange = CurTime()
		local vec = net.ReadVector()
		net.Start("VapeUpdateCustomColor")
		net.WriteEntity(ply)
		net.WriteVector(vec)
		net.Broadcast()
	end)
end
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
-- weapon_vape/shared.lua
-- Defines common shared code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

SWEP.Author = "Swamp Onions"

SWEP.Instructions = "LMB: Rip Fat Clouds\n (Hold and release)\nRMB & Reload: Play Sounds\n\nVape Nation!"

SWEP.PrintName = "Vape"

SWEP.IconLetter	= "V"
SWEP.Category = "Vapes"
SWEP.Slot = 1
SWEP.SlotPos = 0

SWEP.ViewModelFOV = 62 --default

SWEP.WepSelectIcon = surface and surface.GetTextureID("vape_icon")
SWEP.BounceWeaponIcon = false

SWEP.ViewModel = "models/swamponions/vape.mdl"
SWEP.WorldModel = "models/swamponions/vape.mdl"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.Clipsize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"

SWEP.Secondary.Clipsize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"

SWEP.DrawAmmo = false
SWEP.HoldType = "slam"

SWEP.VapeID = 1

function SWEP:Deploy()
	self:SetHoldType("slam")
end

function SWEP:PrimaryAttack()
	if SERVER then
		VapeUpdate(self.Owner, self.VapeID)
	end
	self.Weapon:SetNextPrimaryFire(CurTime() + 0.1)
end

function SWEP:SecondaryAttack()
	if GetConVar("vape_block_sounds"):GetBool() then return end

	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapegogreen.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (0.6*100/pitch))
		net.Broadcast()
	end
	self:SetNextSecondaryFire(CurTime() + 4)
end

function SWEP:Reload()
	if GetConVar("vape_block_sounds"):GetBool() then return end
	if self.beklemesuresi then 
		if self.beklemesuresi > CurTime() then 
			return 
		end 
	end 
	if self.reloading then return end
	self.reloading=true
	self.beklemesuresi = CurTime() + 5
	timer.Simple(0.5, function() self.reloading=false end)
	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapenaysh.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (2.2*100/pitch))
		net.Broadcast()
	end
end

function SWEP:Holster()
	if SERVER and IsValid(self.Owner) then
		ReleaseVape(self.Owner)
	end
	return true
end

SWEP.OnDrop = SWEP.Holster
SWEP.OnRemove = SWEP.Holster
--addons/vape_swep/lua/weapons/weapon_vape_dragon.lua:
-- weapon_vape_dragon.lua
-- Defines a vape which emits fire

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

if CLIENT then
	include('weapon_vape/cl_init.lua')
else
	include('weapon_vape/shared.lua')
end

SWEP.PrintName = "Dragon's Breath Vape"

SWEP.Instructions = "LMB: Rip Flaming Clouds\n (Hold and release)\nRMB & Reload: Play Sounds\n\nThis juice is highly flammable! But don't worry, it's totally healthy."

SWEP.AdminOnly = true

SWEP.VapeScale = 1.7

SWEP.VapeVMPos1 = Vector(17,-3.2,-2.2)

SWEP.VapeVMPos2 = Vector(21,-7,-10)

SWEP.VapeID = 6

SWEP.SoundPitchMod = -40

SWEP.VapeAccentColor = Vector(1,0.3,0.1)
SWEP.VapeTankColor = Vector(1,0.6,0)
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
-- weapon_vape/shared.lua
-- Defines common shared code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

SWEP.Author = "Swamp Onions"

SWEP.Instructions = "LMB: Rip Fat Clouds\n (Hold and release)\nRMB & Reload: Play Sounds\n\nVape Nation!"

SWEP.PrintName = "Vape"

SWEP.IconLetter	= "V"
SWEP.Category = "Vapes"
SWEP.Slot = 1
SWEP.SlotPos = 0

SWEP.ViewModelFOV = 62 --default

SWEP.WepSelectIcon = surface and surface.GetTextureID("vape_icon")
SWEP.BounceWeaponIcon = false

SWEP.ViewModel = "models/swamponions/vape.mdl"
SWEP.WorldModel = "models/swamponions/vape.mdl"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Primary.Clipsize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"

SWEP.Secondary.Clipsize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"

SWEP.DrawAmmo = false
SWEP.HoldType = "slam"

SWEP.VapeID = 1

function SWEP:Deploy()
	self:SetHoldType("slam")
end

function SWEP:PrimaryAttack()
	if SERVER then
		VapeUpdate(self.Owner, self.VapeID)
	end
	self.Weapon:SetNextPrimaryFire(CurTime() + 0.1)
end

function SWEP:SecondaryAttack()
	if GetConVar("vape_block_sounds"):GetBool() then return end

	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapegogreen.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (0.6*100/pitch))
		net.Broadcast()
	end
	self:SetNextSecondaryFire(CurTime() + 4)
end

function SWEP:Reload()
	if GetConVar("vape_block_sounds"):GetBool() then return end
	if self.beklemesuresi then 
		if self.beklemesuresi > CurTime() then 
			return 
		end 
	end 
	if self.reloading then return end
	self.reloading=true
	self.beklemesuresi = CurTime() + 5
	timer.Simple(0.5, function() self.reloading=false end)
	local pitch = 100 + (self.SoundPitchMod or 0) + (self.Owner:Crouching() and 40 or 0)
	self:EmitSound("vapenaysh.wav", 35, pitch + math.Rand(-5,5))
	if SERVER then
		net.Start("VapeTalking")
		net.WriteEntity(self.Owner)
		net.WriteFloat(CurTime() + (2.2*100/pitch))
		net.Broadcast()
	end
end

function SWEP:Holster()
	if SERVER and IsValid(self.Owner) then
		ReleaseVape(self.Owner)
	end
	return true
end

SWEP.OnDrop = SWEP.Holster
SWEP.OnRemove = SWEP.Holster
--addons/zeros_golddiggger/lua/weapons/zgw_sieve/cl_init.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/zrmine_config.lua:
return gluapack()()
--addons/darkrpadvancedkeys/lua/entities/adv_veh_alarm/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Araba Alarmi"
ENT.Author = "Crap-Head"
ENT.Spawnable = false
ENT.AdminSpawnable = true

function ENT:SetupDataTables()
	self:NetworkVar( "Entity", 1, "owning_ent" )
end
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_pistol.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"

ENT.PrintName                 = "Pistol Ammo"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/items/arccw/pistol_ammo.mdl"

ENT.AmmoType = "pistol"
ENT.AmmoCount = 40

ENT.DetonationDamage = 10
ENT.DetonationRadius = 256
ENT.DetonationSound = "weapons/pistol/pistol_fire3.wav"
--lua/entities/arccw_ammo_plinking_large.lua:
return gluapack()()
--lua/entities/arccw_ammo_plinking_large.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"
ENT.RenderGroup               = RENDERGROUP_TRANSLUCENT

ENT.PrintName                 = "Plinking Ammo (Large)"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/items/arccw/plinking_ammo.mdl"
ENT.Scale = 1.5

ENT.AmmoType = "plinking"
ENT.AmmoCount = 500

ENT.DetonationDamage = 10
ENT.DetonationRadius = 128
ENT.DetonationSound = nil

DEFINE_BASECLASS(ENT.Base)
function ENT:DetonateRound()
    BaseClass.DetonateRound(self)
    self:EmitSound("weapons/pistol/pistol_fire2.wav", 70, 175, 0.8)
end
--addons/[binbon]arccw_modify/lua/entities/arccw_att_base/shared.lua:
ENT.Type                  = "anim"
ENT.Base                  = "base_entity"
ENT.PrintName             = "Base Dropped Attachment"
ENT.Author                = ""
ENT.Information           = ""

ENT.Spawnable             = false

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT

ENT.Category              = "ArcCW - Attachments"

AddCSLuaFile()

ENT.GiveAttachments = nil -- table of all the attachments to give, and in what quantity. {{["id"] = int quantity}}

ENT.SoundImpact = "weapon.ImpactSoft"
ENT.Model = ""

if SERVER then

function ENT:Initialize()
    if !self.Model then
        self:Remove()
        return
    end

    self:SetModel(self.Model)
    self:PhysicsInit(SOLID_VPHYSICS)
    self:SetMoveType(MOVETYPE_VPHYSICS)
    self:SetSolid(SOLID_VPHYSICS)
    self:SetCollisionGroup(COLLISION_GROUP_WEAPON)
    self:SetTrigger( true )
    self:SetPos(self:GetPos() + Vector(0, 0, 4))
    local phys = self:GetPhysicsObject()
    if phys:IsValid() then
        phys:Wake()
        phys:SetBuoyancyRatio(0)
    end
end

function ENT:PhysicsCollide(colData, collider)
    if colData.DeltaTime < 0.25 then return end

    self:EmitSound(self.SoundImpact)
end

function ENT:Use(activator, caller)
    if !caller:IsPlayer() then return end

    if ArcCW.ConVars["attinv_free"]:GetBool() then return end

    local take = false

    for i, k in pairs(self.GiveAttachments) do
        if i == "BaseClass" then continue end

        if ArcCW.ConVars["attinv_lockmode"]:GetBool() then
            if ArcCW:PlayerGetAtts(caller, i) > 0 then
                continue
            end
        end

        if hook.Run("ArcCW_PickupAttEnt", caller, i, k) then continue end

        ArcCW:PlayerGiveAtt(caller, i, k)

        take = true
    end

    if take then
        ArcCW:PlayerSendAttInv(caller)

        self:EmitSound("weapons/arccw/useatt.wav")
        self:Remove()
    end
end

else

local defaulticon = Material("arccw/hud/atts/default.png")
local iw = 64

function ENT:DrawTranslucent()
    self:Draw()
end

function ENT:Draw()
    self:DrawModel()

    local cvar2d3d = ArcCW.ConVars["2d3d"]:GetInt()
    if cvar2d3d == 0 or (cvar2d3d == 1 and LocalPlayer():GetEyeTrace().Entity != self) then return end

    if self.PrintName == "Base Dropped Attachment" and self:GetNWInt("attid", -1) != -1 then
        local att = ArcCW.AttachmentIDTable[self:GetNWInt("attid", -1)]

        if !att then return end

        local atttbl = ArcCW.AttachmentTable[att]

        if !atttbl then return end

        self.PrintName = atttbl.PrintName or att
        self.Icon = atttbl.Icon or defaulticon
    end

    if (EyePos() - self:WorldSpaceCenter()):LengthSqr() <= 262144 then -- 512^2
        local ang = LocalPlayer():EyeAngles()

        ang:RotateAroundAxis(ang:Forward(), 180)
        ang:RotateAroundAxis(ang:Right(), 90)
        ang:RotateAroundAxis(ang:Up(), 90)

        cam.Start3D2D(self:WorldSpaceCenter() + Vector(0, 0, 16), ang, 0.1)
            surface.SetFont("ArcCW_32_Unscaled")

            local w = surface.GetTextSize(self.PrintName)
            surface.SetTextPos(-w / 2 + 2, 2)
            surface.SetTextColor(0, 0, 0, 150)
            surface.DrawText(self.PrintName)
            surface.SetTextPos(-w / 2, 0)
            surface.SetTextColor(255, 255, 255, 255)
            surface.DrawText(self.PrintName)

            surface.SetDrawColor(255, 255, 255)
            surface.SetMaterial(self.Icon or defaulticon)
            surface.DrawTexturedRect(-iw / 2, iw / 2, iw, iw)
        cam.End3D2D()
    end
end

end
--addons/[binbon]arccw_modify/lua/entities/arccw_gl_ammodet.lua:
return gluapack()()
--lua/entities/arccw_uc_40mm_flash.lua:
return gluapack()()
--lua/entities/arccw_uc_40mm_napalm.lua:
return gluapack()()
--lua/entities/arccw_uc_fire.lua:
return gluapack()()
--lua/entities/arccw_uc_riflegrenade.lua:
AddCSLuaFile()
ENT.Type = "anim"
ENT.Base = "base_entity"
ENT.PrintName = "Base Rifle Grenade"
ENT.Author = ""
ENT.Information = ""
ENT.Spawnable = false

ENT.Ticks = 0
ENT.CollisionGroup = COLLISION_GROUP_PROJECTILE


-- Intentionally not ENT.Damage since ArcCW base overwrites it with weapon damage (for some reason)
ENT.GrenadeDamage = false
ENT.GrenadeRadius = 0
ENT.FuseTime = 10
ENT.DragCoefficient = 1
ENT.DetonateOnImpact = true

ENT.Model = "models/items/ar2_grenade.mdl"
ENT.ExplosionEffect = true
ENT.Scorch = "Scorch"
ENT.SmokeTrail = true

local path = "arccw_uc/common/"
local path1 = "arccw_uc/common/"
ENT.ExplosionSounds = {path .. "explosion-close-01.ogg", path .. "explosion-close-02.ogg"}
ENT.DebrisSounds = {path1 .. "debris-01.ogg", path1 .. "debris-02.ogg", path1 .. "debris-03.ogg", path1 .. "debris-04.ogg", path1 .. "debris-05.ogg"}


if SERVER then
    function ENT:Initialize()
        local pb_vert = 1
        local pb_hor = 1
        self:SetModel(self.Model)
        self:PhysicsInitBox(Vector(-pb_vert, -pb_hor, -pb_hor), Vector(pb_vert, pb_hor, pb_hor))
        local phys = self:GetPhysicsObject()

        if phys:IsValid() then
            phys:Wake()
            phys:SetDragCoefficient(self.DragCoefficient)
            phys:SetBuoyancyRatio(0.1)
        end

        self.SpawnTime = CurTime()
    end

    function ENT:Think()
        if SERVER and CurTime() - self.SpawnTime >= self.FuseTime then
            self:Detonate()
        end
    end
else
    function ENT:Think()
        if self.SmokeTrail then
            if self.Ticks % 5 == 0 then
                local emitter = ParticleEmitter(self:GetPos())
                if not self:IsValid() or self:WaterLevel() > 2 then return end
                if not IsValid(emitter) then return end
                local smoke = emitter:Add("particle/particle_smokegrenade", self:GetPos())
                smoke:SetVelocity(VectorRand() * 25)
                smoke:SetGravity(Vector(math.Rand(-5, 5), math.Rand(-5, 5), math.Rand(-20, -25)))
                smoke:SetDieTime(math.Rand(1.5, 2.0))
                smoke:SetStartAlpha(255)
                smoke:SetEndAlpha(0)
                smoke:SetStartSize(0)
                smoke:SetEndSize(100)
                smoke:SetRoll(math.Rand(-180, 180))
                smoke:SetRollDelta(math.Rand(-0.2, 0.2))
                smoke:SetColor(20, 20, 20)
                smoke:SetAirResistance(5)
                smoke:SetPos(self:GetPos())
                smoke:SetLighting(false)
                emitter:Finish()
            end
            self.Ticks = self.Ticks + 1
        end
    end
end

-- overwrite to do special explosion things
function ENT:DoDetonation()
    local attacker = IsValid(self:GetOwner()) and self:GetOwner() or self
    util.BlastDamage(self, attacker, self:GetPos(), self.GrenadeRadius, self.GrenadeDamage or self.Damage or 0)
end

function ENT:DoImpact(ent)
    local attacker = IsValid(self:GetOwner()) and self:GetOwner() or self
    local dmg = DamageInfo()
    dmg:SetAttacker(attacker)
    dmg:SetInflictor(self)
    dmg:SetDamage(100)
    dmg:SetDamageType(DMG_CRUSH)
    dmg:SetDamageForce(self.GrenadeDir * 5000)
    dmg:SetDamagePosition(self:GetPos())
    ent:TakeDamageInfo(dmg)
end

function ENT:Detonate()
    if not self:IsValid() or self.BOOM then return end
    self.BOOM = true

    if self.ExplosionEffect then
        local effectdata = EffectData()
        effectdata:SetOrigin(self:GetPos())

        if self:WaterLevel() >= 1 then
            util.Effect("WaterSurfaceExplosion", effectdata)
            self:EmitSound("weapons/underwater_explode3.wav", 125, 100, 1, CHAN_AUTO)
        else
            -- util.Effect("Explosion", effectdata)

            -- explosion_HE_m79_fas2
            -- explosion_he_grenade_fas2
            -- explosion_HE_claymore_fas2
            -- explosion_grenade_fas2

            self:EmitSound(self.ExplosionSounds[math.random(1,#self.ExplosionSounds)], 125, 100, 1, CHAN_AUTO)
            ParticleEffect("explosion_HE_m79_fas2", self:GetPos(), Angle(-90, 0, 0))

            --self:EmitSound("phx/kaboom.wav", 125, 100, 1, CHAN_AUTO)

            -- Where is the sound zenith ? ???
        end

        util.ScreenShake(self:GetPos(), 25, 4, 0.75, self.GrenadeRadius * 4)

        if self.GrenadePos == nil then
            self.GrenadePos = self:GetPos()
        end
        if self.GrenadeDir == nil then
            self.GrenadeDir = self:GetVelocity():GetNormalized()
        end

        local trace = util.TraceLine({
            start = self.GrenadePos,
            endpos = self.GrenadePos + self.GrenadeDir * 4,
            mask = MASK_SOLID_BRUSHONLY
        })
        if trace.Hit then
            self:EmitSound(self.DebrisSounds[math.random(1,#self.DebrisSounds)], 85, 100, 1, CHAN_AUTO)
        end
    end

    self:DoDetonation()

    if self.Scorch then
        util.Decal(self.Scorch, self.GrenadePos, self.GrenadePos + self.GrenadeDir * 4, self)
    end

    self:Remove()
end

function ENT:PhysicsCollide(colData, collider)
    self.GrenadeDir = colData.OurOldVelocity:GetNormalized()
    self.GrenadePos = colData.HitPos

    self:DoImpact(colData.HitEntity)

    if self.DetonateOnImpact then
        self:Detonate()
    else
        local effectdata = EffectData()
        effectdata:SetOrigin(self:GetPos())
        effectdata:SetMagnitude(2)
        effectdata:SetScale(1)
        effectdata:SetRadius(2)
        effectdata:SetNormal(self.GrenadeDir)
        util.Effect("Sparks", effectdata)
        self:EmitSound("weapons/rpg/shotdown.wav", 100, 150)
        self:Remove()
    end
end


function ENT:Draw()
    self:DrawModel()
end
--addons/bodygroupr/lua/entities/bodyman_closet/shared.lua:
return gluapack()()
--addons/ch_atm/lua/entities/ch_atm/shared.lua:
return gluapack()()
--addons/ch_atm/lua/entities/ch_atm_leaderboard/shared.lua:
return gluapack()()
--addons/ch_bitminers_dlc/lua/entities/ch_bitminer_antivirus_usb/cl_init.lua:
include( "shared.lua" )

function ENT:Draw()
	self:DrawModel()
end
--addons/ch_bitminers_dlc/lua/entities/ch_bitminer_antivirus_usb/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"

ENT.PrintName = "Antivirus USB"
ENT.Author = "Crap-Head"
ENT.Category = "Bitminers by Crap-Head"

ENT.Spawnable = true
ENT.AdminSpawnable = true

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()	
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end
--addons/ch_bitminers_dlc/lua/entities/ch_bitminer_hacking_usb/shared.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_cable_end/cl_init.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_combiner/shared.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator_fuel_large/cl_init.lua:
include( "shared.lua" )

function ENT:Draw()
	self:DrawModel()	
end		
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator_fuel_large/shared.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator_fuel_medium/shared.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator_fuel_small/cl_init.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator_fuel_small/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"

ENT.PrintName = "Generator Fuel - Small"
ENT.Author = "Crap-Head"
ENT.Category = "Bitminers by Crap-Head"

ENT.Spawnable = true
ENT.AdminSpawnable = true

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()	
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end
--addons/cityworker/lua/entities/cityworker_electric/cl_init.lua:
return gluapack()()
--addons/cityworker/lua/entities/cityworker_hydrant/shared.lua:
ENT.Type            = "anim"
ENT.Base            = "base_gmodentity"

ENT.PrintName       = "Fire Hydrant"
ENT.Category        = "City Worker"
ENT.Author          = "Silhouhat"
ENT.Contact 	    = "contact@silhouhat.com"

ENT.Spawnable   	= false

function ENT:SetupDataTables()
    self:NetworkVar( "Bool", 0, "Leaking" )
end
--addons/cityworker/lua/entities/cityworker_leak/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/corba/cl_init.lua:
include("shared.lua")
function ENT:Initialize() end
function ENT:Draw() self:DrawModel() end

--addons/turkish_food_mod-main/lua/entities/gazoz/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Gazoz"
ENT.Category = "Turkish Food Mod"
ENT.Spawnable = true
--addons/ledscreen/lua/entities/gb_rp_sign_wire/cl_init.lua:
include("shared.lua")

surface.CreateFont( "InfoRUS2", { font = "Enhanced Dot Digital-7", extended = true, size = 90, weight = 800, antialias = true })
surface.CreateFont( "InfoRUS3", { font = "Enhanced Dot Digital-7", extended = true, size = 50, weight = 800, antialias = true })

local font = "InfoRUS2"

local sizetable = {
	[3] = {350, 0.5},
	[4] = {470, -11.5},
	[5] = {590, -11.5},
	[6] = {710, 0.5},
	[7] = {830, 0.5},
	[8] = {950, 0.5},
}

function ENT:Initialize()
	
	self.OldWide = self:GetWide()

	self.frame = vgui.Create( "DPanel" )
	self.frame:SetSize( sizetable[self:GetWide()][1], 120 )
	self.frame.Text = self:GetText()
	self.frame.Type = self:GetType()
	self.frame.col = self:GetTColor()
	self.frame.damage = 0
	self.frame.appr = nil
	self.frame.FX = self:GetFX()
	self.frame.On = self:GetOn()
	self.frame.alfa = 0
	self.frame.speed = self:GetSpeed()
	self.frame:SetPaintedManually( true )
	self.frame.Paint = function(self,w,h)
		
		if self.On <= 0 then 
			if self.alfa < 1 then return end
			self.alfa = Lerp(FrameTime() * 5,self.alfa,0)
		else
			if self.FX > 0 then
				self.alfa = math.random(100,220)
			else
				self.alfa = 255
			end
		end
		
		surface.DisableClipping( false )
		surface.SetFont(font)
		local ww,hh = surface.GetTextSize(self.Text)
		local multiplier = self.speed * 100
		
		self.static = false
		
		if self.damage < CurTime() and self.On then
			if self.Type == 1 then
				
				local xs = (math.fmod(SysTime() * multiplier,w+ww)) - ww
				
				draw.DrawText(self.Text,font,xs,10,Color(self.col.x * 100, self.col.y * 100, self.col.z * 100, self.alfa),0)
			elseif self.Type == 2 then
				
				if !self.appr or self.appr > ww  then
					self.appr = -w
				else
					self.appr = math.Approach(self.appr, ww+w, FrameTime() * multiplier) 
				end
				
			draw.DrawText(self.Text,font,self.appr * -1,10,Color(self.col.x * 100, self.col.y * 100, self.col.z * 100, self.alfa),0)
			else
				if !self.appr then
					self.appr = 0
				end
				
				if w > ww then
					if self.Type == 3 then
						if self.appr < w-ww and !self.refl then
							self.appr = math.Approach(self.appr, ww+w, FrameTime() * multiplier) 
						else
							if self.appr <= 0 then
								self.refl = nil
							else
								self.refl = true
								self.appr = math.Approach(self.appr, 0, FrameTime() * multiplier) 
							end
						end
					else
						self.static = true
					end
				else
					if self.appr > w-ww-50 and !self.refl then
						self.appr = math.Approach(self.appr, w-ww-50, FrameTime() * multiplier) 
					else
						if self.appr >= 50 then
							self.refl = nil
						else
							self.refl = true
							self.appr = math.Approach(self.appr, 50, FrameTime() * multiplier) 
						end
					end
				end
				
				if self.static then
					draw.DrawText(self.Text,font,w/2,10,Color(self.col.x * 100, self.col.y * 100, self.col.z * 100, self.alfa),1)
				else
					draw.DrawText(self.Text,font,self.appr,10,Color(self.col.x * 100, self.col.y * 100, self.col.z * 100, self.alfa),0)
				end
			end
		else	
			draw.DrawText(self.Text,font,math.random(0,w-ww),10,Color(self.col.x * 100, self.col.y * 100, self.col.z * 100, math.random(0,255)),0)
		end
		surface.DisableClipping( true )
	end
end

function ENT:Draw()
	
	self:DrawModel()
	
	if self.frame then
		self.frame.Text = self:GetText()
		self.frame.Type = self:GetType()
		self.frame.col = self:GetTColor()
		self.frame.FX = self:GetFX()
		self.frame.On = self:GetOn()
		self.frame.damage = self:GetNWInt("LastDamaged")
		self.frame.speed = self:GetSpeed()
	end
	
	local Pos = self:GetPos()
	local Ang = self:GetAngles()
	local hight = 12
	
	if self.OldWide != self:GetWide() then
		self.frame:SetSize( sizetable[self:GetWide()][1], 120 )
		self.OldWide = self:GetWide()
	end
	
	if self:GetWide() == 3 then
		hight = 6
	end
	
	cam.Start3D2D(Pos + Ang:Up() * 1.1 - Ang:Right() * hight + Ang:Forward() * sizetable[self:GetWide()][2], Ang, 0.1)
		self.frame:PaintManual()
	cam.End3D2D()

end
--lua/entities/gmod_contr_spawner/shared.lua:
ENT.Type 			= "anim"
ENT.Base			= WireLib and "base_wire_entity" or "base_gmodentity"
ENT.PrintName		= "Contraption Spawner"
ENT.Author			= "TB"
ENT.Contact			= ""
ENT.Purpose			= ""
ENT.Instructions	= ""

ENT.Spawnable			= false
ENT.AdminSpawnable		= false

--addons/playablepiano/lua/entities/gmt_instrument_base/shared.lua:
ENT.Base		= "base_anim"
ENT.Type		= "anim"
ENT.PrintName	= "Instrument Base"

ENT.Model		= Model( "models/fishy/furniture/piano.mdl" )
ENT.ChairModel	= Model( "models/fishy/furniture/piano_seat.mdl" )
ENT.MaxKeys		= 4 // how many keys can be played at once

ENT.SoundDir	= "GModTower/lobby/piano/note_"
ENT.SoundExt 	= ".wav"

INSTNET_USE		= 1
INSTNET_HEAR	= 2
INSTNET_PLAY	= 3

function ENT:SetupDataTables() 
	self:NetworkVar("Entity", 0, "owning_ent")
end

//ENT.Keys = {}
ENT.ControlKeys = { 
	[KEY_TAB] =	function( inst, bPressed )
		if ( !bPressed ) then return end
		RunConsoleCommand( "instrument_leave", inst:EntIndex() )
	end,
				
	[KEY_SPACE] = function( inst, bPressed ) 
		if ( !bPressed ) then return end
		inst:ToggleSheetMusic()
	end,
	
	[KEY_LEFT] = function( inst, bPressed )
		if ( !bPressed ) then return end
		inst:SheetMusicBack()
	end,
	[KEY_RIGHT] = function( inst, bPressed )
		if ( !bPressed ) then return end
		inst:SheetMusicForward()
	end,
	
	[KEY_LCONTROL] = function( inst, bPressed )
		if ( !bPressed ) then return end
		inst:CtrlMod() 
	end,
	[KEY_RCONTROL] = function( inst, bPressed )
		if ( !bPressed ) then return end
		inst:CtrlMod() 
	end,
	
	[KEY_LSHIFT] = function( inst, bPressed )
		inst:ShiftMod()
	end,
}

function ENT:GetSound( snd )

	if ( snd == nil || snd == "" ) then
		return nil
	end
	
	return self.SoundDir .. snd .. self.SoundExt
end

if SERVER then
	function ENT:Intiailize()
		self:PrecacheSounds()
	end

	function ENT:PrecacheSounds()

		if !self.Keys then return end

		for _, keyData in pairs( self.Keys ) do
			util.PrecacheSound( self:GetSound( keyData.Sound ) )
		end

	end
end

hook.Add( "PhysgunPickup", "NoPickupInsturmentChair", function( ply, ent )

	local inst = ent:GetOwner()

	if IsValid( inst ) && inst.Base == "gmt_instrument_base" then
		return false
	end

end )


--addons/playablepiano/lua/entities/gmt_instrument_piano/shared.lua:
return gluapack()()
--addons/hackable_server/lua/entities/hacktool_server/sh_init.lua:
DEFINE_BASECLASS( "base_anim" )

ENT.PrintName = "Hackable server cabinet"
ENT.Spawnable = true
ENT.AdminOnly = true

function ENT:SetupDataTables()
	self:NetworkVar( "Entity", 0, "ReferenceEntity")
	self:NetworkVar( "Bool", 0, "IsOpen")
	self:NetworkVar( "Bool", 1, "Alert")
	self:NetworkVar( "Float", 0, "HackChance")

	if SERVER then
		self:NetworkVarNotify("IsOpen", self.OnOpenStateChanged)
		self:NetworkVarNotify("Alert", self.OnAlertChange)
	end
end
--addons/turkish_food_mod-main/lua/entities/ice-stand/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Dondurma Tezgahı"
ENT.Category = "Turkish Food Mod Tezgahlar"
ENT.Spawnable = true
ENT.MaxHealth = 150

function ENT:SetupDataTables()
    self:NetworkVar("Entity", 0, "owning_ent")
end

--gamemodes/darkrp/entities/entities/lab_base/cl_init.lua:
include("shared.lua")

function ENT:Initialize()
    self:initVars()
end

local color_red = Color(140, 0, 0, 100)
local color_white = color_white

function ENT:DrawTranslucent()
    self:DrawModel()

    local Pos = self:GetPos()
    local Ang = self:GetAngles()

    local owner = self:Getowning_ent()
    owner = (IsValid(owner) and owner:Nick()) or DarkRP.getPhrase("unknown")

    surface.SetFont("HUDNumber5")
    local text = self.labPhrase
    local text2 = DarkRP.getPhrase("priceTag", DarkRP.formatMoney(self:Getprice()), "")
    local TextWidth = surface.GetTextSize(text)
    local TextWidth2 = surface.GetTextSize(text2)

    Ang:RotateAroundAxis(Ang:Forward(), 90)
    local TextAng = Ang

    TextAng:RotateAroundAxis(TextAng:Right(), CurTime() * -180)

    cam.Start3D2D(Pos + Ang:Right() * self.camMul, TextAng, 0.2)
        draw.WordBox(2, -TextWidth * 0.5 + 5, -30, text, "HUDNumber5", color_red, color_white)
        draw.WordBox(2, -TextWidth2 * 0.5 + 5, 18, text2, "HUDNumber5", color_red, color_white)
    cam.End3D2D()
end

--addons/media_player_fixed_edition/lua/entities/mediaplayer_base/cl_init.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/entities/minigame_leaderboard.lua:
--[[------------------------------------------------
                Minigame Leaderboard
------------------------------------------------]]--

AddCSLuaFile()

ENT.PrintName = "Minigame Leaderboard"
ENT.Category = "Minigame Tool Assistant"

ENT.Spawnable = false
ENT.AdminOnly = true
ENT.Type = "anim"
ENT.Base = "base_anim"

ENT.PlayerList = {}


-- START OF CONFIGURATION

local NetworkingScoreSize = 11 -- https://wiki.facepunch.com/gmod/net.WriteInt

local ColorBackground = Color(0, 0, 0, 250)
local ColorHeader = Color(133, 2, 2, 250)
local TextPlayer, TextKill

if ( CLIENT ) then
    TextPlayer = string.upper( language.GetPhrase("player"):sub(1, 1) ) .. language.GetPhrase("player"):sub(2)
    TextKill = string.upper( language.GetPhrase("playerlist_score"):sub(1, 1) ) .. language.GetPhrase("playerlist_score"):sub(2)
end

-- END OF CONFIGURATION

if ( SERVER ) then
    util.AddNetworkString("Minigames.Leaderboard.Player")
    util.AddNetworkString("Minigames.Leaderboard.PlayerList")
    util.AddNetworkString("Minigames.Leaderboard.Score")
end


--[[------------------------------------------------
                    Functions
------------------------------------------------]]--

local MinBounds = Vector(-512, -512, -512)
local MaxBounds = -MinBounds

function ENT:SetupDataTables()
    self:NetworkVar("Entity", 0, "owning_ent")
    self:NetworkVar("Int", 0, "Wide")
    self:NetworkVar("Int", 1, "Tall")

    self:NetworkVar("Bool", 0, "TimeEnabled")
    self:NetworkVar("Int", 2, "Time")
end

function ENT:Initialize()
    self:SetModel("models/hunter/blocks/cube025x025x025.mdl")

    if ( CLIENT ) then
        self:SetRenderBounds(MinBounds, MaxBounds)
    end
end

function ENT:AddPlayer(ply)
    if not IsValid(ply) then return end

    if self.PlayerList[ply] then return end
    table.insert(self.PlayerList, {ply, 0})

    if ( CLIENT ) then return end

    net.Start("Minigames.Leaderboard.Player")
        net.WriteEntity(self)
        net.WritePlayer(ply)
        net.WriteBool(true)
    net.Broadcast()
end

function ENT:RemovePlayer(ply)
    if not IsValid(ply) then return end

    for i, v in ipairs(self.PlayerList) do
        if v[1] == ply then
            table.remove(self.PlayerList, i)
            break
        end
    end

    if ( CLIENT ) then return end

    net.Start("Minigames.Leaderboard.Player")
        net.WriteEntity(self)
        net.WritePlayer(ply)
        net.WriteBool(false)
    net.Broadcast()
end

function ENT:ResetPlayerList()
    self.PlayerList = {}

    if ( CLIENT ) then return end

    net.Start("Minigames.Leaderboard.PlayerList")
        net.WriteEntity(self)
    net.Broadcast()
end




--[[------------------------------------------------
                        Score
------------------------------------------------]]--

function ENT:SortPlayerList()
    table.sort(self.PlayerList, function(a, b)
        return a[2] > b[2]
    end)
end

function ENT:AddPlayerPoint(ply, amount)
    amount = amount or 1

    for i, v in ipairs(self.PlayerList) do
        if v[1] == ply then
            self.PlayerList[i][2] = self.PlayerList[i][2] + amount
            break
        end
    end
    self:SortPlayerList()

    if ( CLIENT ) then return end

    net.Start("Minigames.Leaderboard.Score")
        net.WriteEntity(self)
        net.WritePlayer(ply)
        net.WriteInt(amount, NetworkingScoreSize)
    net.Broadcast()
end

function ENT:RemovePlayerPoint(ply, amount)
    amount = math.abs(amount or 1)

    for i, v in ipairs(self.PlayerList) do
        if v[1] == ply then
            self.PlayerList[i][2] = self.PlayerList[i][2] - amount
            break
        end
    end

    self:SortPlayerList()

    if ( CLIENT ) then return end

    net.Start("Minigames.Leaderboard.Score")
        net.WriteEntity(self)
        net.WritePlayer(ply)
        net.WriteInt(-amount, NetworkingScoreSize)
    net.Broadcast()
end

function ENT:SetPlayerPoint(ply, amount)
    amount = amount or 0

    for i, v in ipairs(self.PlayerList) do -- im not sorry for this
        if v[1] == ply then
            self.PlayerList[i][2] = amount
            break
        end
    end

    self:SortPlayerList()

    if ( CLIENT ) then return end

    net.Start("Minigames.Leaderboard.Score")
        net.WriteEntity(self)
        net.WritePlayer(ply)
        net.WriteInt(amount, 32)
    net.Broadcast()
end

function ENT:ResetPlayerPoint(ply)
    self:SetPlayerPoint(ply, 0)
end




--[[------------------------------------------------
                     Networking
------------------------------------------------]]--

if ( CLIENT ) then
    net.Receive("Minigames.Leaderboard.Player", function()
        local Leaderboard = net.ReadEntity()
        local ply = net.ReadPlayer()
        local IsJoining = net.ReadBool()

        if not IsValid(Leaderboard) then return end

        if IsJoining then
            Leaderboard:AddPlayer(ply)
        else
            Leaderboard:RemovePlayer(ply)
        end
    end)

    net.Receive("Minigames.Leaderboard.PlayerList", function()
        local Leaderboard = net.ReadEntity()

        if not IsValid(Leaderboard) then return end

        Leaderboard:ResetPlayerList()
    end)

    net.Receive("Minigames.Leaderboard.Score", function()
        local Leaderboard = net.ReadEntity()
        local ply = net.ReadPlayer()
        local amount = net.ReadInt(NetworkingScoreSize)

        if not IsValid(Leaderboard) then return end

        Leaderboard:AddPlayerPoint(ply, amount)
    end)
end




--[[------------------------------------------------
                       Drawing
------------------------------------------------]]--

if ( CLIENT ) then
    function ENT:GetTimeFormat()
        local Time = self:GetTime()
        local Minutes = math.floor(Time / 60)
        local Seconds = Time % 60

        return string.format("%01d:%02d", Minutes, Seconds)
    end

    function ENT:Draw()
        -- self:DrawModel()

        local Pos = self:GetPos()
        local Ang = self:GetAngles()

        -- Pos.z = Pos.z + self:GetTall()
        -- Pos.x = Pos.x - self:GetWide()
        Pos = Pos - self:GetRight() * self:GetTall()
        Pos = Pos - self:GetForward() * self:GetWide()

        local TimeEnabled = self:GetTimeEnabled()
        local TotalTall = self:GetTall() * 2 - (TimeEnabled and 72 or 64)
        local DoubleWide = self:GetWide() * 2

        local PosY = 64 + (TimeEnabled and 32 or 0)

        -- Front
        cam.Start3D2D(Pos, Ang, 1)
            draw.RoundedBox(16, 0, 0, DoubleWide, self:GetTall() * 2, ColorBackground)

            -- Header
            draw.RoundedBox(16, 8, 8, DoubleWide - 16, 50, ColorHeader)
            draw.SimpleText(Minigames.GetPhrase("deathmatch.leaderboard"), "DermaLarge", self:GetWide(), 16, color_white, TEXT_ALIGN_CENTER)

            if TimeEnabled then
                draw.SimpleText(self:GetTimeFormat(), "DermaLarge", self:GetWide(), 60, color_white, TEXT_ALIGN_CENTER)
            end

            -- Sub header
            draw.RoundedBox(0, 8, PosY, DoubleWide - 16, 2, color_white)
            draw.SimpleText(TextPlayer, "DermaLarge", 16, PosY, color_white, TEXT_ALIGN_LEFT)
            draw.SimpleText(TextKill, "DermaLarge", DoubleWide - 16, PosY, color_white, TEXT_ALIGN_RIGHT)
            draw.RoundedBox(0, 8, PosY + 32, DoubleWide - 16, 2, color_white)

            for i, tbl in ipairs(self.PlayerList) do
                local TargetPosY = 32 * i + (TimeEnabled and 100 or 72)

                -- Overflow
                if (TargetPosY > TotalTall) then
                    draw.SimpleText(Minigames.StringFormat(Minigames.GetPhrase("deathmatch.leaderboard.andmore"), #self.PlayerList - i + 1), "DermaLarge", self:GetWide(), TargetPosY, color_white, TEXT_ALIGN_CENTER)
                    break
                end

                draw.SimpleText(tbl[1]:Nick(), "DermaLarge", 16, TargetPosY, color_white, TEXT_ALIGN_LEFT)
                draw.SimpleText(tbl[2], "DermaLarge", DoubleWide - 16, TargetPosY, color_white, TEXT_ALIGN_RIGHT)
            end
        cam.End3D2D()
    end
end
--addons/minigame-tool-assistant/lua/entities/minigame_npc/shared.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/entities/minigame_trigger.lua:
return gluapack()()
--gamemodes/darkrp/entities/entities/money_printer/shared.lua:
--Static Vars
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Money Printer"
ENT.Author = "DarkRP Developers"
ENT.Spawnable = false
ENT.sparking = false
ENT.IsMoneyPrinter = true

function ENT:initVars()
    self.MoneyCount = GAMEMODE.Config.mprintamount
    self.OverheatChance = GAMEMODE.Config.printeroverheatchance
    self.model = "models/props_c17/consolebox01a.mdl"
    self.damage = 100
    self.DisplayName = "Money Printer"
    self.MinTimer = 100
    self.MaxTimer = 350
    self.SeizeReward = GAMEMODE.Config.printerreward
end

function ENT:SetupDataTables()
    self:NetworkVar("Int", 0, "price")
    self:NetworkVar("Entity", 0, "owning_ent")
end

DarkRP.hookStub{
    name = "moneyPrinterCatchFire",
    description = "Called when a money printer is about to catch fire.",
    parameters = {
        {
            name = "moneyprinter",
            description = "The money printer that is about to catch fire",
            type = "Entity"
        }
    },
    returns = {
        {
            name = "prevent",
            description = "Set to true to prevent the money printer from catching fire",
            type = "boolean"
        }
    },
    realm = "Server"
}

DarkRP.hookStub{
    name = "moneyPrinterPrintMoney",
    description = "Called when a money printer is about to print money.",
    parameters = {
        {
            name = "moneyprinter",
            description = "The money printer that is about to print money",
            type = "Entity"
        },
        {
            name = "amount",
            description = "The amount to be printed",
            type = "number"
        }
    },
    returns = {
        {
            name = "prevent",
            description = "Set to true to prevent the money printer from printing the money.",
            type = "boolean"
        },
        {
            name = "amount",
            description = "Optionally override the amount of money that will be printed.",
            type = "number"
        }
    },
    realm = "Server"
}

DarkRP.hookStub{
    name = "moneyPrinterPrinted",
    description = "Called after a money printer is has printed money.",
    parameters = {
        {
            name = "moneyprinter",
            description = "The money printer",
            type = "Entity"
        },
        {
            name = "moneybag",
            description = "The moneybag produced by the printer.",
            type = "Entity"
        }
    },
    returns = {
    },
    realm = "Server"
}

--addons/oneprint/lua/entities/oneprint/cl_init.lua:
include( "shared.lua" )

ENT.PrintName = "Money printer"
ENT.Category = "OnePrint"
ENT.Author = "Timmy & OGL"
ENT.Contact	= "http://steamcommunity.com/id/alshulgin"
ENT.Instructions = ""

--[[

    ENT:Draw

]]--

function ENT:DrawTranslucent()
	self:DrawModel()

    self.iLastCheck = ( self.iLastCheck or 0 )
	self.iDist = ( self.iDist or 10001 )

    if ( CurTime() > ( self.iLastCheck + 1 ) ) then
		self.iDist = LocalPlayer():GetPos():DistToSqr( self:GetPos() )
		self.iLastCheck = CurTime()
    end

	if ( self.iDist > 10000 ) then
		if IsValid( self.dPrinter ) then
			self.dPrinter:Remove()
			self.dPrinter = nil
		end

		return
	end

	if not IsValid( self.dPrinter ) then
		self.dPrinter = OnePrint:Create3DUI( self )
		return
	end

	local tPos = self:GetPos()
	tPos = tPos + ( self:GetUp() * 61.9 ) + ( self:GetForward() * 21.9 ) + ( self:GetRight() * 11.25 )

	local tAng = self:GetAngles()
	tAng:RotateAroundAxis( tAng:Forward(), 90 )
	tAng:RotateAroundAxis( tAng:Right(), -90 )
	tAng:RotateAroundAxis( tAng:Forward(), -15 )

	vgui.Start3D2D( tPos, tAng, .0384 )
		self.dPrinter:Paint3D2D()
	vgui.End3D2D()
end

--[[

	ENT:OnVarChanged

]]--

function ENT:OnVarChanged( sVar, xOld, xNew )
	if ( sVar == "CurrentTab" ) then
		self:SetTab( xNew )
	end
end

--[[

	ENT:SetTab

]]--

function ENT:SetTab( iTab )
	if IsValid( self.dPrinter ) then
		OnePrint:SetTab( self.dPrinter, iTab )
	end
end

--[[

	ENT:OnRemove

]]--

function ENT:OnRemove()
	if IsValid( self.dPrinter ) then
		self.dPrinter:Remove()
		self.dPrinter = nil
	end
end
--addons/pcasino/lua/entities/pcasino_sign_stand/cl_init.lua:
include("shared.lua")

function ENT:Initialize()
	self.letters = {}
end

function ENT:PostData()
	if not self.hasInitialized then
		self:Initialize()
	end
	
	self.data.general.text = string.sub(self.data.general.text, 1, 7)
	local letterMap = PerfectCasino.Core.Letter

	-- Right side
		-- Letter calculations
		local startPoint = (self:GetRight() * 25) + (self:GetForward() * 13.5) + (self:GetUp() * 9)
		local curLength = vector_origin
		local right = self:GetRight()
	
		for k, v in ipairs(string.Split(string.lower(self.data.general.text), "")) do
			if not letterMap[v] then -- It's either a space or a character we don't support
				curLength = curLength + (self:GetRight() * 5)
				continue
			end
	
			-- Create the letter
			local letter = ClientsideModel("models/freeman/owain_casino_alphabet.mdl")
			table.insert(self.letters, letter)
			letter:SetParent(self)
			curLength = curLength + ((self:GetRight()) * (letterMap[v].w*2))
			letter:SetPos(self:GetPos() + startPoint - curLength + ((self:GetRight()) * (letterMap[v].w)))
			letter:SetAngles(self:GetAngles())
			letter:SetBodygroup(1, letterMap[v].b)
		end
	-- Left side
		-- Letter calculations
		local startPoint = (self:GetRight() * 25) + (self:GetForward() * -13.5) + (self:GetUp() * 9)
		local curLength = vector_origin
		local right = self:GetRight()
	
		for k, v in ipairs(table.Reverse(string.Split(string.lower(self.data.general.text), ""))) do
			if not letterMap[v] then -- It's either a space or a character we don't support
				curLength = curLength + (self:GetRight() * 5)
				continue
			end
	
			-- Create the letter
			local letter = ClientsideModel("models/freeman/owain_casino_alphabet.mdl")
			table.insert(self.letters, letter)
			letter:SetParent(self)
			curLength = curLength + ((self:GetRight()) * (letterMap[v].w*2))
			letter:SetPos(self:GetPos() + startPoint - curLength + ((self:GetRight()) * (letterMap[v].w)))
			local ang = self:GetAngles()
			ang:RotateAroundAxis(ang:Up(), 180)
			letter:SetAngles(ang)
			letter:SetBodygroup(1, letterMap[v].b)
		end
end

function ENT:OnRemove()
	-- Clear the board of last rounds best
	for k, v in pairs(self.letters) do
		if not IsValid(v) then continue end

		v:Remove()
	end
end

function ENT:Draw()
	self:DrawModel()
	if self:GetPos():DistToSqr(LocalPlayer():GetPos()) > 1000000 then return end

	-- We can piggyback off the distance check to only request the entities data when it's needed :D
	if (not self.data) and (not PerfectCasino.Cooldown.Check(self:EntIndex(), 5)) then
		PerfectCasino.Core.RequestConfigData(self)
		return
	end
end
--addons/pcasino/lua/entities/pcasino_sign_stand/shared.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_sign_wall_logo/cl_init.lua:
include("shared.lua")

function ENT:PostData()
end
--lua/entities/pet_base/shared.lua:
return gluapack()()
--addons/executioner/lua/entities/phone_box/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/pilav_stand/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Pilavcı Tezgahı"
ENT.Category = "Turkish Food Mod Tezgahlar"
ENT.Spawnable = true
ENT.MaxHealth = 150

function ENT:SetupDataTables()
    self:NetworkVar("Entity", 0, "owning_ent")
end

--addons/turkish_food_mod-main/lua/tfm_config.lua:
TFM = TFM or {}

--THIS CONFIG FOR EDITING MOD NOT COMPLEX! YOU CAN EDIT WITHOUT BREAKING TABLE STRUCTURE
--BU CONFIG MOD DÜZENLEMESİ İÇİN EKLENMİŞTİR FAZLA DETAYLI DEĞİLDİR! TABLE YAPISINI BOZMADAN DÜZENLEYEBİLİRSİNİZ

TFM.Foods = {
    ["adana"] = {
        model = "models/foods/adanakebap/adanakebap.mdl",
        health = 25,
        eat_sound = "eating.wav"
    },
    ["ayran"] = {
        model = "models/drinks/ayran/ayran.mdl",
        health = 5,
        eat_sound = "slurp.wav"
    },
    ["ayran"] = {
        model = "models/drinks/ayran/ayran.mdl",
        health = 5,
        eat_sound = "slurp.wav"
    },
    ["corba"] = {
        model = "models/foods/corba/corba.mdl",
        health = 15,
        eat_sound = "slurp.wav"
    },
    ["ekmek"] = {
        model = "models/foods/ekmek/ekmek.mdl",
        health = 10,
        eat_sound = "eating.wav"
    },
    ["gazoz"] = {
        model = "models/drinks/gazoz/gazoz.mdl",
        health = 5,
        eat_sound = "slurp.wav"
    },
    ["gofret"] = {
        model = "models/foods/gofret/gofret.mdl",
        health = 8,
        eat_sound = "eating.wav"
    },
    ["hosbes"] = {
        model = "models/foods/hosbes/hosbes.mdl",
        health = 10,
        eat_sound = "eating.wav"
    },
    ["kofte_durum"] = {
        model = "models/foods/cigkofte_durum/cigkofte_durum.mdl",
        health = 10,
        eat_sound = "eating.wav"
    },
    ["kofte_durum_hot"] = {
        model = "models/foods/cigkofte_durum/cigkofte_durum.mdl",
        eat_sound = "eating.wav"
    },
    ["lahmacun"] = {
        model = "models/foods/lahmacun/lahmacun.mdl",
        health = 15,
        eat_sound = "eating.wav"
    },
    ["metro"] = {
        model = "models/foods/metro/metro.mdl",
        health = 7,
        eat_sound = "eating.wav"
    },
    ["nohutlu_pilav"] = {
        model = "models/foods/pilavs/nohutlu.mdl",
        health = 25,
        eat_sound = "eating.wav"
    },
    ["patkof"] = {
        model = "models/foods/patkof/patkof.mdl",
        health = 23,
        eat_sound = "eating.wav"
    },
    ["sade_pilav"] = {
        model = "models/foods/pilavs/sade.mdl",
        health = 22,
        eat_sound = "eating.wav"
    },
    ["salgam"] = {
        model = "models/drinks/salgam/salgam.mdl",
        health = 11,
        eat_sound = "slurp.wav"
    },
    ["sckegg"] = {
        model = "models/foods/sckegg/sckegg.mdl",
        health = 14,
        eat_sound = "eating.wav"
    },
    ["tavuklu_pilav"] = {
        model = "models/foods/pilavs/tavuklu.mdl",
        health = 28,
        eat_sound = "eating.wav"
    },
    ["tea"] = {
        model = "models/drinks/tea/tea.mdl",
        health = 15,
        eat_sound = "slurp.wav"
    },
    ["pide"] = {
        model = "models/foods/pide/pide.mdl",
        health = 23,
        eat_sound = "eating.wav"
    },
    ["dondurma"] = {
        health = 10,
        eat_sound = "lick.mp3"
    }
}

TFM.Stands = {
    ["bufe"] = {
        model = "models/stands/bakkal_stand/bakkal.mdl"
    },
    ["kofte_stand"] = {
        model = "models/stands/cigkofte_stand/cigkofte_stand.mdl",
        price_normal = 1500,
        price_hot = 1500
    },
    ["ice_stand"] = {
        model = "models/stands/ice_stand/ice_stand.mdl",
        time_of_icecreems = 15,
        price_of_icecreems = 2000,
        icecreem_colors = {
            [1] = {clr = Color(104, 48, 27, 255),name = "Kakao"},
            [2] = {clr = Color(255, 255, 255, 255),name = "Sade"},
            [3] = {clr = Color(154, 249, 152, 255),name = "Antep Fıstığı"},
            [4] = {clr = Color(252, 90, 141, 255),name = "Çilek"},
            [5] = {clr = Color(235, 66, 66, 255),name = "Anjelika Eriği"},
            [6] = {clr = Color(242, 242, 69, 255),name = "Muz"},
            [7] = {clr = Color(0, 243, 255, 255),name = "Orman Meyvesi"},
            [8] = {clr = Color(54, 147, 51, 255),name = "Kivi"}
        }
    },
    ["pilav_stand"] = {
        model = "models/stands/pilav_stand/pilav_stand.mdl",
        time_of_pilavs = 15,
        info_of_pilavs = {
            [1] = {name = "Sade",price = 1500},
            [2] = {name = "Nohutlu",price = 2000},
            [3] = {name = "Tavuklu",price = 3000}
        },
    },
    ["stone_oven"] = {
        time_of_foods = 15,
        info_of_foods = {
            [1] = {name = "Ekmek",price = 500},
            [2] = {name = "Pide",price = 600},
            [3] = {name = "Lahmacun",price = 700}
        }
    }
}
--addons/permaprops/lua/entities/pp_prop_effect.lua:
AddCSLuaFile()

ENT.Type = "anim"

ENT.PrintName		= ""
ENT.Author			= ""
ENT.Contact			= ""
ENT.Purpose			= ""
ENT.Instructions	= ""
ENT.Spawnable		= false
ENT.AdminOnly		= false


function ENT:Initialize()

	local Radius = 6
	local min = Vector( 1, 1, 1 ) * Radius * -0.5
	local max = Vector( 1, 1, 1 ) * Radius * 0.5

	if ( SERVER ) then

		self.AttachedEntity = ents.Create( "prop_dynamic" )
		self.AttachedEntity:SetModel( self:GetModel() )
		self.AttachedEntity:SetAngles( self:GetAngles() )
		self.AttachedEntity:SetPos( self:GetPos() )
		self.AttachedEntity:SetSkin( self:GetSkin() )
		self.AttachedEntity:Spawn()
		self.AttachedEntity:SetParent( self.Entity )
		self.AttachedEntity:DrawShadow( false )

		self:SetModel( "models/props_junk/watermelon01.mdl" )

		self:DeleteOnRemove( self.AttachedEntity )

		self:PhysicsInitBox( min, max )

		-- Set up our physics object here
		local phys = self:GetPhysicsObject()
		if ( IsValid( phys ) ) then
			phys:Wake()
			phys:EnableGravity( false )
			phys:EnableDrag( false )
		end

		self:DrawShadow( false )
		self:SetCollisionGroup( COLLISION_GROUP_WEAPON )

	else

		self.GripMaterial = Material( "sprites/grip" )

		local tab = ents.FindByClassAndParent( "prop_dynamic", self )
		if ( tab && IsValid( tab[ 1 ] ) ) then self.AttachedEntity = tab[ 1 ] end

	end

	-- Set collision bounds exactly
	self:SetCollisionBounds( min, max )

end

function ENT:Draw()

	render.SetMaterial( self.GripMaterial )

end

function ENT:PhysicsUpdate( physobj )

	if ( CLIENT ) then return end

	if ( !self:IsPlayerHolding() && !self:IsConstrained() ) then

		physobj:SetVelocity( Vector( 0, 0, 0 ) )
		physobj:Sleep()

	end

end

function ENT:OnEntityCopyTableFinish( tab )
	tab.Model = self.AttachedEntity:GetModel()
	tab.AttachedEntityInfo = table.Copy( duplicator.CopyEntTable( self.AttachedEntity ) )
	tab.AttachedEntityInfo.Pos = nil 
	tab.AttachedEntityInfo.Angle = nil
	tab.AttachedEntity = nil

end

function ENT:PostEntityPaste( ply )

	-- Restore the attached entity using the information we've saved
	if ( IsValid( self.AttachedEntity ) ) and ( self.AttachedEntityInfo ) then

		-- Apply skin, bodygroups, bone manipulator, etc.
		duplicator.DoGeneric( self.AttachedEntity, self.AttachedEntityInfo )

		if ( self.AttachedEntityInfo.EntityMods ) then
			self.AttachedEntity.EntityMods = table.Copy( self.AttachedEntityInfo.EntityMods )
			duplicator.ApplyEntityModifiers( ply, self.AttachedEntity )
		end

		if ( self.AttachedEntityInfo.BoneMods ) then
			self.AttachedEntity.BoneMods = table.Copy( self.AttachedEntityInfo.BoneMods )
			duplicator.ApplyBoneModifiers( ply, self.AttachedEntity )
		end

		self.AttachedEntityInfo = nil

	end

end

--addons/realisticcardealer/lua/entities/rcd_cardealer/cl_init.lua:
return gluapack()()
--addons/realisticcardealer/lua/entities/rcd_cardealer/shared.lua:
return gluapack()()
--addons/realisticcardealer/lua/entities/rcd_printer/shared.lua:
return gluapack()()
--addons/tablo_ent/lua/entities/score_base/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Scoresheet Base"
ENT.Author = "RayChamp"
ENT.Spawnable = false
--lua/entities/sent_soccerball.lua:
AddCSLuaFile()

if SERVER then
	resource.AddFile( "materials/entities/sent_soccerball.png" )
end

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.PrintName = "Soccer Ball"
ENT.Category = "Fun + Games"
ENT.Author = "Jvs"
ENT.Spawnable = true
ENT.AdminOnly = false

if CLIENT then
	ENT.HitMaterial = Material( util.DecalMaterial( "impact.concrete" ) )
	ENT.RenderGroup = RENDERGROUP_BOTH
else
	ENT.CanPickupSoccerball = CreateConVar( 
		"sv_pickupsoccerball" , 
		"1", 
		{ 
			FCVAR_SERVER_CAN_EXECUTE, 
			FCVAR_ARCHIVE 
		}, 
		"When true, it allows anyone to pickup the soccerball" 
	)
end

function ENT:SpawnFunction( ply , tr , classname )
	if not tr.Hit then
		return
	end

	local spawnpos = tr.HitPos + tr.HitNormal * 25

	local ent = ents.Create( classname )
	ent:SetPos( spawnpos )
	ent:Spawn()
	return ent
end

function ENT:SetupDataTables()
	self:NetworkVar( "Float" , 0 , "LastImpact" )	--I made this into a dtvar because at some point I'll add some clientside animations for when the ball bounces
	self:NetworkVar( "Float" , 1 , "PressureExpireStart" )
	self:NetworkVar( "Float" , 2 , "PressureExpireEnd" )
end



function ENT:Initialize()
	if SERVER then
		self:SetMaxHealth( 50 )
		self:SetHealth( 50 )
		self:SetLagCompensated( true )	--players can shoot at us even with their shitty ping!
		self:SetUseType( SIMPLE_USE )	--don't let players spam +use on us, that's rude
		self:SetModel( "models/props_phx/misc/soccerball.mdl" )
		self:PhysicsInit( SOLID_VPHYSICS )
		self:SetMoveType( MOVETYPE_VPHYSICS )
		self:SetSolid( SOLID_VPHYSICS )

		self:ResetPressure()
		self:SetTrigger( true )	--allow us to use touch,starttouch and whatever even if we can't collide with the player

		local physobj =  self:GetPhysicsObject()

		if IsValid( physobj ) then
			physobj:AddGameFlag( FVPHYSICS_NO_IMPACT_DMG )
			physobj:AddGameFlag( FVPHYSICS_NO_NPC_IMPACT_DMG )
			physobj:SetBuoyancyRatio( 0.5 )
			physobj:SetDamping( 0.25 , 1 )
			physobj:Wake( )
		end

		self:StartMotionController()
	end

	self:SetCollisionGroup( COLLISION_GROUP_WEAPON )
end

--[[
	I wanted to have this complicated system where the soccerball would lose pressure every frame but first off,
	that's annoying to code for little to no benefit, and second, I can fake it off by just using a timed variable
	that gets decreased everytime
]]

function ENT:GetPressure()
	local pressure = math.Clamp( math.TimeFraction( self:GetPressureExpireEnd() , self:GetPressureExpireStart() , CurTime() ) , 0 , 1 )

	return pressure
end

function ENT:ResetPressure()
	self:SetPressureExpireStart( 0 )
	self:SetPressureExpireEnd( 0 )
end

function ENT:IsLosingPressure()
	return self:GetPressureExpireStart() ~= 0 and self:GetPressureExpireEnd() ~= 0
end

function ENT:OnRemove()
	if CLIENT then
		if self.PressureLeakSound then
			self.PressureLeakSound:Stop()
			self.PressureLeakSound = nil
		end
	else

	end
end

if SERVER then
	function ENT:PhysicsSimulate( physobj , delta )
		return SIM_NOTHING
	end

	function ENT:OnTakeDamage( dmginfo )
		if self:IsEFlagSet( EFL_KILLME ) then
			return
		end

		self:TakePhysicsDamage( dmginfo )

		local dmg = dmginfo:GetDamage()

		local healthtoset = math.Clamp( self:Health() - dmg , 0 , self:GetMaxHealth() )

		self:SetHealth( healthtoset )

		local isoverkill = ( dmg >= ( self:GetMaxHealth() / 2 ) ) or ( healthtoset <= 0 )


		--either overkill
		if ( isoverkill and not dmginfo:IsDamageType( DMG_BULLET ) ) or isoverkill then

			local effectdata = EffectData()
			effectdata:SetOrigin( self:GetPos() )
			effectdata:SetScale( self:GetPressure() )
			util.Effect( "soccerball_explode", effectdata )

			self:Remove()
		end

		--we haven't been killed yet, start to lose pressure if the damage was coming from a bullet
		if not self:IsEFlagSet( EFL_KILLME ) and dmginfo:IsDamageType( DMG_BULLET ) then
			if not self:IsLosingPressure() then
				self:SetPressureExpireStart( CurTime() )
				self:SetPressureExpireEnd( CurTime() + 5 )
			else
				--decrease it a bit for every shot
				self:SetPressureExpireEnd( self:GetPressureExpireEnd() - 0.5 )
			end
		end
	end

	function ENT:Use( activator )
		if self:IsPlayerHolding() then
			return
		end

		if IsValid( activator ) and activator:IsPlayer() then
			local canpickup = self.CanPickupSoccerball:GetBool()
			
			local hookval = hook.Run( "AllowPlayerPickup" , activator , self )
			
			if hookval ~= nil then
				canpickup = hookval
			end

			if hookval ~= false then
				activator:PickupObject( self )
			end
		end

	end


	function ENT:PhysicsCollide( data, physobj )


		if self:IsPlayerHolding() then
			return
		end

		if self:GetLastImpact() < CurTime() and data.DeltaTime > 0.2 and data.OurOldVelocity:Length() > 100 then
			self:EmitSound( "Rubber.ImpactHard" )
			self:SetLastImpact( CurTime() + 0.1 )
		end

	end

	function ENT:PhysicsUpdate( physobj )
		if self:IsPlayerHolding() then
			return
		end

		--the gravity gun, + use and the physgun all fuck up these settings, set them back

		physobj:SetMass( 10 )
		physobj:SetBuoyancyRatio( 0.5 * self:GetPressure() )
		physobj:SetDamping( 0.25 , 1 )

	end

	--touch is not called when the physics object hits an entity, but rather when the collision bounds do, which
	--is done with traces on the game side
	function ENT:StartTouch( ent )

		if not SERVER or not IsValid( ent ) or self:IsPlayerHolding() then
			return
		end

		--ignore players that might be noclipping or in a vehicle
		if ent:IsPlayer() and ent:GetMoveType() ~= MOVETYPE_WALK then
			return
		end

		local tr = self:GetTouchTrace()
		local kickmultiplier = 1.5 + 1 * self:GetPressure()
		local massmultiplier = 15
		local direction = tr.Normal

		local normal = (ent:WorldSpaceCenter() - self:GetPos() ):GetNormal() * -1
		local physobj = self:GetPhysicsObject()
		local ourvel = self:GetVelocity()
		local theirvel = ent:GetVelocity()


		if IsValid( physobj ) and ( ent:IsPlayer() or ent:IsNPC() ) then

			local aimvec = ent:EyeAngles()
			aimvec.p = 0
			aimvec = aimvec:Forward()
			aimvec.z = 0

			if aimvec:Dot( theirvel:GetNormal() ) < 0 then
				theirvel = vector_origin
				theirvel = normal * physobj:GetMass() * massmultiplier
			end
			--kick the ball!
			if theirvel ~= vector_origin then
				self:EmitSound( "Rubber.BulletImpact" )
				physobj:SetVelocityInstantaneous( theirvel * kickmultiplier + Vector( 0, 0 , physobj:GetMass() * massmultiplier )  )
				self:SetLastImpact( CurTime() + 0.1 )
			else --bounce the ball back
				self:EmitSound( "Rubber.ImpactHard" )
				physobj:SetVelocityInstantaneous( -1 * normal * ourvel:Dot( normal ) )
			end
			self:SetLastImpact( CurTime() + 0.1 ) --we just kicked the ball, suppress the bounce sound for a little while
		end
	end

else

	function ENT:Think()
		self:HandleSound()
	end

	function ENT:HandleSound()
		if not self.PressureLeakSound then
			self.PressureLeakSound = CreateSound( self , "PhysicsCannister.ThrusterLoop" )
		end

		if self:IsLosingPressure() and self:GetPressure() ~= 0 then
			self.PressureLeakSound:Play()
			self.PressureLeakSound:ChangeVolume( self:GetPressure() )
		else
			self.PressureLeakSound:Stop()
		end
	end

	function ENT:ImpactTrace( tr , dmgbits , customImpactName )
		if bit.bor( dmgbits , DMG_BULLET ) ~= 0 then
			util.DecalEx( self.HitMaterial, self, tr.HitPos , tr.Normal , color_white, 1 ,  1 )
		end
		return true
	end

	function ENT:Draw( flags )
		self:DrawModel()
	end

	function ENT:DrawTranslucent()
	end


end
--gamemodes/darkrp/entities/entities/spawned_ammo/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Spawned Ammo"
ENT.Author = "FPtje"
ENT.Spawnable = false
ENT.IsSpawnedAmmo = true

--lua/entities/sv_gasolinepistol/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end
--lua/entities/sv_gasolinepistol/shared.lua:
ENT.Base = "base_entity"
ENT.Type = "anim"

ENT.PrintName = "Fuel Pump"
ENT.Category = "SVMod"
ENT.Author = "TomLaVachette"
ENT.Contact = "From workshop page only!"
ENT.Instructions = ""

ENT.Spawnable = false
ENT.AdminOnly = false
--lua/entities/sv_gaspump/shared.lua:
ENT.Base = "base_entity"
ENT.Type = "anim"

ENT.PrintName = "Fuel Pump"
ENT.Category = "SVMod"
ENT.Author = "TomLaVachette"
ENT.Contact = "From workshop page only!"
ENT.Instructions = ""

ENT.Spawnable = false
ENT.AdminOnly = false
--lua/entities/sv_spikestrip/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end

--addons/zerosfruitslicer/lua/entities/zfs_fruitbox/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Spawnable = false
ENT.RenderGroup = RENDERGROUP_OPAQUE
ENT.Model = "models/zerochain/fruitslicerjob/fs_cardboardbox.mdl"

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end

function ENT:CanDrive(ply)
    return false
end

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "FruitID")

	if SERVER then
		self:SetFruitID(0)
	end
end

--addons/zerosfruitslicer/lua/entities/zfs_fruitcup.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_baggy.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zgo2_item_base")
ENT.Type                    = "anim"
ENT.Base                    = "zgo2_item_base"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Baggy"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = false
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_baggy.mdl"
ENT.RenderGroup             = RENDERGROUP_BOTH

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end

function ENT:CanDrive(ply)
    return false
end

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "WeedID")
	self:NetworkVar("Int", 1, "WeedAmount")
	self:NetworkVar("Int", 2, "WeedTHC")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

	if SERVER then
		self:SetWeedID(0)
		self:SetWeedAmount(0)
		self:SetWeedTHC(0)
	end
end

if SERVER then
	function ENT:PostInitialize()
		zgo2.Baggy.Initialize(self)
	end
end

if CLIENT then
	function ENT:Initialize()
		self:DestroyShadow()

		timer.Simple(0.5, function()
			if IsValid(self) then
				self.m_Initialized = true
			end
		end)
	end

	function ENT:Think()
		zgo2.Baggy.Think(self)
	end

	function ENT:Draw()
		self:DrawModel()
		zgo2.Baggy.Draw(self)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_clipper/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_generator/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_lamp/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

ENT.Type                    = "anim"
ENT.Base                    = "base_anim"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Lamp"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_sodium_lamp01.mdl"
ENT.RenderGroup             = RENDERGROUP_BOTH

function ENT:OnLightSwitch(ply)
    local trace = ply:GetEyeTrace()

	local switch_vec , switch_ang = zgo2.Lamp.GetUI_Switch(self)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

    if zclib.util.InDistance(self:LocalToWorld(switch_vec), trace.HitPos, 4) then
        return true
    else
        return false
    end
end

function ENT:OnColorChange(ply)
    local trace = ply:GetEyeTrace()

	local color_vec , color_ang = zgo2.Lamp.GetUI_Color(self)

    if zclib.util.InDistance(self:LocalToWorld(color_vec), trace.HitPos, 4) then
        return true
    else
        return false
    end
end

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "Power")
	self:NetworkVar("Bool", 0, "LightSwitch")

	self:NetworkVar("Int", 1, "LampID")
	self:NetworkVar("Vector", 0, "LampColor")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

	self:NetworkVarNotify("LampColor", self.UpdateLightColorVar)

	if SERVER then
		self:SetPower(0)
		self:SetLightSwitch(false)
		self:SetLampID(1)
		local col = Color(255,220,150)
		self:SetLampColor(Vector(col.r, col.g, col.b))
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ENT:UpdateLightColorVar( name, old, new )
	if name == "LampColor" then
		zgo2.Lamp.UpdateLightColorVar(self,new)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end

function ENT:CanDrive(ply)
    return false
end

/*
	How much power does this machine need
*/
function ENT:GetPowerNeed()
	return zgo2.Lamp.GetPowerUsage(self)
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_packer/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

ENT.Type                    = "anim"
ENT.Base                    = "base_anim"
ENT.AutomaticFrameAdvance   = true
ENT.PrintName               = "Weed Packer"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_weedpacker.mdl"
ENT.RenderGroup             = RENDERGROUP_OPAQUE

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "WeedID")
	self:NetworkVar("Int", 1, "Progress")
	self:NetworkVar("Int", 2, "WeedAmount")

	if SERVER then
		self:SetWeedID(0)
		self:SetProgress(0)
		self:SetWeedAmount(0)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end

function ENT:CanDrive(ply)
    return false
end

function ENT:GravGunPickupAllowed( ply )
	return false
end

function ENT:GravGunPunt( ply )
	return false
end

local lsw_vec01 = Vector(16, 0, 21)
function ENT:OnDrop(ply)
    local trace = ply:GetEyeTrace()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

	//debugoverlay.Sphere(self:LocalToWorld(lsw_vec01),1,0.1,Color( 0, 255, 0 ),true)

    if zclib.util.InDistance(self:LocalToWorld(lsw_vec01), trace.HitPos, 15) then
        return true
    else
        return false
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_pot/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

function ENT:Initialize()
    zgo2.Pot.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

function ENT:Draw()
	zgo2.Pot.OnDraw(self)
end

function ENT:Think()
    zgo2.Pot.Think(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_pump/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

ENT.Type                    = "anim"
ENT.Base                    = "base_anim"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Pump"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_pump.mdl"
ENT.RenderGroup             = RENDERGROUP_BOTH

function ENT:SetupDataTables()
	self:NetworkVar("Bool", 1, "TurnedOn")
	self:NetworkVar("Int", 1, "Power")
	self:NetworkVar("Int", 2, "WaterTransferRate")
	if SERVER then
		self:SetTurnedOn(false)
		self:SetPower(0)
		self:SetWaterTransferRate(0)
	end
end

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end

function ENT:CanDrive(ply)
    return false
end

ENT.SwitchPos = Vector(15.8, 5.3, 8.8)
function ENT:OnSwitch(ply)
    local trace = ply:GetEyeTrace()
	//debugoverlay.Sphere(self:LocalToWorld(lsw_vec),1,0.1,Color( 0, 255, 0 ),true)
    if zclib.util.InDistance(self:LocalToWorld(self.SwitchPos), trace.HitPos, 6) then
        return true
    else
        return false
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a

ENT.InputPos = Vector(7.6, -16, 5)
function ENT:OnConnect_Input(ply)
    local trace = ply:GetEyeTrace()
	//debugoverlay.Sphere(self:LocalToWorld(lsw_vec01),1,0.1,Color( 0, 255, 0 ),true)
    if zclib.util.InDistance(self:LocalToWorld(self.InputPos), trace.HitPos, 6) then
        return true
    else
        return false
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

ENT.OutputPos = Vector(-9, 13.8, 20.3)
function ENT:OnConnect_Output(ply)
    local trace = ply:GetEyeTrace()
	//debugoverlay.Sphere(self:LocalToWorld(lsw_vec01),1,0.1,Color( 0, 255, 0 ),true)
    if zclib.util.InDistance(self:LocalToWorld(self.OutputPos), trace.HitPos, 6) then
        return true
    else
        return false
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

/*
	How much power does this machine need
*/
function ENT:GetPowerNeed()
	return zgo2.config.Pump.PowerUsage
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_splicer/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:Initialize()
	zgo2.Splicer.Initialize(self)
end

function ENT:Draw()
	self:DrawModel()
	zgo2.Splicer.OnDraw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:Think()
	zgo2.Splicer.OnThink(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a

function ENT:OnRemove()
	zgo2.Splicer.OnRemove(self)
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_splicer/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_watertank/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

ENT.Type                    = "anim"
ENT.Base                    = "base_anim"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Watertank"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_watertank.mdl"
ENT.RenderGroup             = RENDERGROUP_BOTH

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "Water")
	self:NetworkVar("Int", 1, "WatertankID")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

	if SERVER then
		self:SetWater(0)
		self:SetWatertankID(1)
	end
end

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end

function ENT:CanDrive(ply)
    return false
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

--addons/zeros_golddiggger/lua/entities/zgw_bucket/cl_init.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/entities/zgw_bucket_follow/shared.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/entities/zgw_jar/cl_init.lua:

include("shared.lua")


function ENT:Initialize()
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:Draw()
	self:DrawModel()

	if zclib.Convar.Get("zclib_cl_drawui") == 1 and zclib.util.InDistance(LocalPlayer():GetPos(), self:GetPos(), 300) then
		self:DrawInfo()
	end
end

function ENT:DrawInfo()
	cam.Start3D2D(self:GetPos() + Vector(0, 0, 25), Angle(0, LocalPlayer():EyeAngles().y - 90, 90), 0.1)
		draw.SimpleText(self:GetGold() .. zgw.config.UoM, zclib.GetFont("zgw_font01"), 0, 0, zgw.default_colors["gold"], TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	cam.End3D2D()
end

function ENT:OnRemove()
end

--addons/zeros_golddiggger/lua/entities/zgw_pumphead/shared.lua:


ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_goldwash/zgw_pumphead.mdl"
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Pumphead"
ENT.Category = "Zeros GoldWasher"
ENT.RenderGroup = RENDERGROUP_OPAQUE

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_acid/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_acid.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Acid"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_OPAQUE

function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_frezzertray/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:Initialize()
	zmlab2.FrezzerTray.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:Draw()
	self:DrawModel()
	zmlab2.FrezzerTray.Draw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_methylamine/shared.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_filter/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_tent/shared.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_combiner/cl_init.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_filter/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Filter"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros Meth Lab"

function ENT:SetupDataTables()
	self:NetworkVar("Entity", 0, "CombinerEnt")
	self:NetworkVar("Float", 0, "FilterHealth")

	if SERVER then
		self:SetCombinerEnt(NULL)
		self:SetFilterHealth(0)
	end
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_meth/cl_init.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_meth/shared.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_meth_baggy/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_entity"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Meth Baggy"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros Meth Lab"

function ENT:SetupDataTables()
	self:NetworkVar("Float", 0, "MethAmount")

	if (SERVER) then
		self:SetMethAmount(10)
	end
end

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_conveyorbelt_s.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_conveyorbelt")
ENT.Type = "anim"
ENT.Base = "zrms_conveyorbelt"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Conveyorbelt - Small"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.Model = "models/zerochain/props_mining/zrms_conveyorbelt_small.mdl"
ENT.GravelModel = "models/zerochain/props_mining/zrms_conveyorbelt_s_gravel.mdl"
ENT.GravelAnimTime = 4
ENT.TransportSpeed = 2
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_crusher/cl_init.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_resource/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_sorter/shared.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.RenderGroup = RENDERGROUP_OPAQUE
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Conveyorbelt - Filter"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"

ENT.Model = "models/zerochain/props_mining/zrms_conveyorbelt_sorter.mdl"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false

ENT.SorterSpeed = 3
ENT.WorkAmount = 6
ENT.HoldAmount = 25
ENT.FilterType = "Coal" // What type of resource are we sorting out
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "CurrentState")
	self:NetworkVar("Entity", 0, "ModuleChild01")
	self:NetworkVar("Entity", 1, "ModuleChild02")
	self:NetworkVar("Entity", 2, "ModuleParent")
	self:NetworkVar("Int", 2, "ConnectionPos")

	if (SERVER) then
		self:SetModuleChild01(NULL)
		self:SetModuleChild02(NULL)
		self:SetModuleParent(NULL)
		self:SetConnectionPos(-1)
		self:SetCurrentState(0)
	end

	self:NetworkVar("Float", 4, "Coal")
	self:NetworkVar("Float", 0, "Iron")
	self:NetworkVar("Float", 1, "Bronze")
	self:NetworkVar("Float", 2, "Silver")
	self:NetworkVar("Float", 3, "Gold")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if SERVER then
		self:SetCoal(0)
		self:SetIron(0)
		self:SetBronze(0)
		self:SetSilver(0)
		self:SetGold(0)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_storagecrate/shared.lua:
return gluapack()()
--addons/zeros_trashman_v1.6.3/lua/entities/ztm_buyermachine/cl_init.lua:
include("shared.lua")

function ENT:Initialize()
	if ztm.Buyermachine then
		ztm.Buyermachine.Initialize(self)
	end
end
function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:Draw()
	self:DrawModel()
	if ztm.Buyermachine then
		ztm.Buyermachine.Draw(self)
	end
end

function ENT:Think()
	if ztm.Buyermachine then
		ztm.Buyermachine.Think(self)
	end
	self:SetNextClientThink(CurTime())

	return true
end
function ENT:OnRemove()
	if ztm.Buyermachine then
		ztm.Buyermachine.OnRemove(self)
	end
end

--addons/zeros_trashman_v1.6.3/lua/entities/ztm_buyermachine/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_trashman/ztm_buyermachine.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Buyermachine"
ENT.Category = "Zeros Trashman"
ENT.RenderGroup = RENDERGROUP_BOTH
function ENT:SetupDataTables()
    self:NetworkVar("Bool", 0, "IsInserting")
    self:NetworkVar("Float", 0, "Money")
    self:NetworkVar("Int", 0, "BlockType")
    self:NetworkVar("Entity", 0, "MoneyEnt")
    self:NetworkVar("Int", 1, "PriceModify")
    if (SERVER) then
        self:SetIsInserting(false)
        self:SetMoney(0)
        self:SetBlockType(1)
        self:SetPriceModify(100)
    end
end


function ENT:OnPayoutButton(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)
    if lp.x > -13 and lp.x < 13 and lp.y < 10 and lp.y > 9 and lp.z > 79 and lp.z < 85.3 then
        return true
    else
        return false
    end
end

--addons/zeros_trashman_v1.6.3/lua/entities/ztm_recycler/cl_init.lua:
return gluapack()()
--addons/zeros_trashman_v1.6.3/lua/entities/ztm_trash/shared.lua:
/*
    Addon id: 
    Version: v1.6.3 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/props_junk/garbage128_composite001a.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Trash"
ENT.Category = "Zeros Trashman"
ENT.RenderGroup = RENDERGROUP_BOTH

function ENT:SetupDataTables()
    self:NetworkVar("Int", 0, "Trash")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

    if (SERVER) then
        self:SetTrash(5)
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_trashman_v1.6.3/lua/entities/ztm_trashbag/cl_init.lua:
return gluapack()()
--addons/zeros_trashman_v1.6.3/lua/entities/ztm_trashbag/shared.lua:
/*
    Addon id: 
    Version: v1.6.3 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_trashman/ztm_trashbag.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Trashbag"
ENT.Category = "Zeros Trashman"
ENT.RenderGroup = RENDERGROUP_BOTH
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
    self:NetworkVar("Int", 0, "Trash")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

    if (SERVER) then
        self:SetTrash(100)
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_distillery_condenser/cl_init.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_distillery_condenser/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_distillery_constructionkit/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_yeastbeast/yb_crate.mdl"
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "ConstructionKit - Condenser"
ENT.Category = "Zeros YeastBeast"
ENT.RenderGroup = RENDERGROUP_OPAQUE

ENT.ConstructionID = 1

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_jarcrate/cl_init.lua:
include("shared.lua")


function ENT:DrawButtons()
	cam.Start3D2D(self:LocalToWorld(Vector(0, 11, 5.4)), self:LocalToWorldAngles(Angle(0,180,90)), 0.05)

		if zyb.config.NPC.SellMode == 2 then
			local atext = zyb.language.General["Collect"]
			local aSize = zyb.f.GetTextSize(atext,"zyb_jarcrate_font01")

			if self:OnCollectButton(LocalPlayer()) then
				draw.RoundedBox(20, -aSize / 2 , -120, aSize, 100,  zyb.default_colors["orange01"])
			else
				draw.RoundedBox(20, -aSize / 2 , -120, aSize, 100, zyb.default_colors["grey02"])
			end

			draw.SimpleText(atext, "zyb_jarcrate_font01", 0, -105, zyb.default_colors["white01"], TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
		end

		local btext = zyb.language.General["Extract"]
		local bSize = zyb.f.GetTextSize(btext,"zyb_jarcrate_font01")

		if self:OnExtractButton(LocalPlayer()) then
			draw.RoundedBox(20, -bSize / 2, -5, bSize, 100,  zyb.default_colors["orange01"])
		else
			draw.RoundedBox(20, -bSize / 2 , -5, bSize, 100, zyb.default_colors["grey02"])
		end

		draw.SimpleText(btext, "zyb_jarcrate_font01", 0, 10, zyb.default_colors["white01"], TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)

	cam.End3D2D()
end

function ENT:Draw()
	self:DrawModel()

	if self.JarCount > 0 and zyb.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 300) then
		self:DrawButtons()
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end



function ENT:Initialize()
	self.JarCount = 0
end

function ENT:Think()
	if zyb.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 800) then
		if self.ClientProps then
			if self.JarCount ~= self:GetJarCount() then
				self:RemoveClientModels()
				self.JarCount = self:GetJarCount()

				for i = 1, math.Clamp(self.JarCount,0,6) do
					self:SpawnClientModel_Jar(i)
				end
			end
		else
			self.ClientProps = {}
		end
	else
		self:RemoveClientModels()
	end

	self:SetNextClientThink(CurTime())

	return true
end

function ENT:SpawnClientModel_Jar(pos)
	local ent = ents.CreateClientProp()
	ent:SetPos(self:LocalToWorld(Vector(0, 0, 0)))
	ent:SetModel("models/zerochain/props_yeastbeast/yb_jar.mdl")
	ent:SetAngles(self:LocalToWorldAngles(Angle(0, 0, 0)))
	ent:Spawn()
	ent:Activate()
	ent:SetRenderMode(RENDERMODE_TRANSALPHA)
	ent:SetParent(self)
	ent:SetBodygroup(1, 1)
	ent:SetBodygroup(2, 5)

	if pos == 1 then
		ent:SetPos(self:LocalToWorld(Vector(10, 5, 1)))
	elseif pos == 2 then
		ent:SetPos(self:LocalToWorld(Vector(0, 5, 1)))
	elseif pos == 3 then
		ent:SetPos(self:LocalToWorld(Vector(-10, 5, 1)))
	elseif pos == 4 then
		ent:SetPos(self:LocalToWorld(Vector(10, -5, 1)))
	elseif pos == 5 then
		ent:SetPos(self:LocalToWorld(Vector(0, -5, 1)))
	elseif pos == 6 then
		ent:SetPos(self:LocalToWorld(Vector(-10, -5, 1)))
	end

	self.ClientProps[pos] = ent
end

function ENT:RemoveClientModels()
	if (self.ClientProps and table.Count(self.ClientProps) > 0) then
		for k, v in pairs(self.ClientProps) do
			if IsValid(v) then
				v:Remove()
			end
		end
	end

	self.ClientProps = {}
	self.JarCount = 0
end

function ENT:OnRemove()
	self:RemoveClientModels()
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_paperbag/cl_init.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_sugar/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_yeast/cl_init.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/effects/arccw_muzzleeffect.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/effects/arccw_ricochet.lua:
EFFECT.StartPos = Vector(0, 0, 0)
EFFECT.EndPos = Vector(0, 0, 0)
EFFECT.StartTime = 0
EFFECT.LifeTime = 0.2
EFFECT.DieTime = 0
EFFECT.Color = Color(255, 255, 255)
-- EFFECT.Speed = 500

local head = Material("effects/whiteflare")
local tracer = Material("trails/smoke")

function EFFECT:Init(data)

    local start = data:GetStart()
    local hit = data:GetOrigin()

    -- self.LifeTime = (hit - start):Length() / self.Speed

    self.LifeTime = 0.25

    self.StartTime = UnPredictedCurTime()
    self.DieTime = UnPredictedCurTime() + self.LifeTime

    self.StartPos = start
    self.EndPos = hit
end

function EFFECT:Think()
    return self.DieTime > UnPredictedCurTime()
end

local function LerpColor(d, col1, col2)
    local r = Lerp(d, col1.r, col2.r)
    local g = Lerp(d, col1.g, col2.g)
    local b = Lerp(d, col1.b, col2.b)
    local a = Lerp(d, col1.a, col2.a)
    return Color(r, g, b, a)
end

function EFFECT:Render()
    local d = (UnPredictedCurTime() - self.StartTime) / self.LifeTime
    -- local endpos = self.StartPos + (d * (self.EndPos - self.StartPos))
    local endpos = self.EndPos
    local size = 1

    local col = LerpColor(d, self.Color, Color(0, 0, 0, 0))

    render.SetMaterial(head)
    render.DrawSprite(endpos, size, size, col)

    render.SetMaterial(tracer)
    render.DrawBeam(endpos, self.StartPos, size * 0.75, 0, 1, col)
end
--addons/[binbon]arccw_modify/lua/effects/arccw_tracer.lua:
EFFECT.StartPos = Vector(0, 0, 0)
EFFECT.EndPos = Vector(0, 0, 0)
EFFECT.StartTime = 0
EFFECT.LifeTime = 0.2
EFFECT.LifeTime2 = 0.2
EFFECT.DieTime = 0
EFFECT.Color = Color(255, 255, 255)
EFFECT.Speed = 15000

local head = Material("effects/whiteflare")
local tracer = Material("arccw/tracer")
local smoke = Material("trails/smoke")

function EFFECT:Init(data)

    local hit = data:GetOrigin()
    local wep = data:GetEntity()

    if !IsValid(wep) then return end

    local speed = data:GetScale()
    local start = (wep.GetTracerOrigin and wep:GetTracerOrigin()) or data:GetStart()

    if ArcCW.ConVars["fasttracers"]:GetBool() then
            local fx = EffectData()
            fx:SetOrigin(hit)
            fx:SetEntity(wep)
            fx:SetStart(start)
            fx:SetScale(4000)
            util.Effect("tracer", fx)
            self:Remove()
        return -- was it ever really necessary? yes, to not use the dog-shit tracers that used to ship with this
    end

    local diff = hit - start

    if speed > 0 then
        self.Speed = speed
    end

    local profile = 0
    if wep.GetBuff_Override then
        profile = wep:GetBuff_Override("Override_PhysTracerProfile", wep.PhysTracerProfile) or 0
        if isnumber(profile) then profile = ArcCW.BulletProfileDict[ArcCW.BulletProfiles[profile]] end
    end

    self.LifeTime = (hit - start):Length() / self.Speed

    self.StartTime = UnPredictedCurTime()
    self.DieTime = UnPredictedCurTime() + math.max(self.LifeTime, self.LifeTime2)
    self.Dir = diff:GetNormalized()

    self.StartPos = start
    self.EndPos = hit
    self.Color = (ArcCW.BulletProfileDict[profile] or ArcCW.BulletProfileDict["default0"]).color
end

function EFFECT:Think()
    return self.DieTime > UnPredictedCurTime()
end

local function LerpColor(d, col1, col2)
    local r = Lerp(d, col1.r, col2.r)
    local g = Lerp(d, col1.g, col2.g)
    local b = Lerp(d, col1.b, col2.b)
    local a = Lerp(d, col1.a, col2.a)
    return Color(r, g, b, a)
end

function EFFECT:Render()
    local d = (UnPredictedCurTime() - self.StartTime) / self.LifeTime
    local d2 = (UnPredictedCurTime() - self.StartTime) / self.LifeTime2
    local startpos = self.StartPos + (d * 0.1 * (self.EndPos - self.StartPos))
    local endpos = self.StartPos + (d * (self.EndPos - self.StartPos))
    local size = math.Clamp(math.log(EyePos():DistToSqr(endpos) - math.pow(256, 2)), 0, math.huge)

    local col = self.Color --LerpColor(d, self.Color, Color(0, 0, 0, 0))
    local col2 = LerpColor(d2, Color(155, 155, 155, 155), Color(0, 0, 0, 0))

    local vel = self.Dir * self.Speed - LocalPlayer():GetVelocity()
    local dot = math.abs(EyeAngles():Forward():Dot(vel:GetNormalized()))
    --dot = math.Clamp(((dot * dot) - 0.25) * 5, 0, 1)
    local headsize = size * dot * 2
    render.SetMaterial(head)
    render.DrawSprite(endpos, headsize, headsize, col)

    local tail = (self.Dir * math.min(self.Speed / 25, 512, (endpos - startpos):Length() - 64))
    render.SetMaterial(tracer)
    render.DrawBeam(endpos, endpos - tail, size * 0.75, 0, 1, col)

    render.SetMaterial(smoke)
    render.DrawBeam( endpos - tail, startpos, size * d2, 0, 1, col2)
end

--lua/effects/arccw_uc_confetti.lua:
return gluapack()()
--addons/ch_mining/lua/effects/rock_spark/init.lua:
-- CREDITS Garry & Rubat https://github.com/Facepunch/garrysmod/blob/master/garrysmod/gamemodes/sandbox/entities/effects/balloon_pop.lua

function EFFECT:Init( data )
	local vOffset = data:GetOrigin()
	local Color = data:GetStart()
	
	local Low = vOffset - Vector( 32, 32, 32 )
	local High = vOffset + Vector( 32, 32, 32 )
	
	local NumParticles = 5
	local emitter = ParticleEmitter( vOffset, true )
	
	for i=0, NumParticles do
		local Pos = Vector( math.Rand( -0.5, 0.5 ), math.Rand( -0.5, 0.5 ), math.Rand( -0.5, 0.5 ) )
		
		local particle = emitter:Add( "particles/balloon_bit", vOffset + Pos * 8 )
		if ( particle ) then
			particle:SetVelocity( Pos * 40 )
		
			particle:SetLifeTime( 0 )
			particle:SetDieTime( 1 )
		
			particle:SetStartAlpha( 255 )
			particle:SetEndAlpha( 255 )
		
			local Size = math.Rand( 1, 2 )
			particle:SetStartSize( Size )
			particle:SetEndSize( 0 )
		
			particle:SetRoll( math.Rand( 0, 360 ) )
			particle:SetRollDelta( math.Rand( -2, 2 ) )
		
			particle:SetAirResistance( 400 )
			particle:SetGravity( Vector(0,0,-100) )
		
			local RandDarkness = math.Rand( 0.8, 1.0 )
			particle:SetColor( Color.r*RandDarkness, Color.g*RandDarkness, Color.b*RandDarkness )
		
			particle:SetCollide( true )
		
			particle:SetAngleVelocity( Angle( math.Rand( -160, 160 ), math.Rand( -160, 160 ), math.Rand( -160, 160 ) ) ) 
		
			particle:SetBounce( 1 )
			particle:SetLighting( true )
		end
	end
	
	emitter:Finish()
end

function EFFECT:Think()
	return false
end

function EFFECT:Render()
end
--addons/oneprint/lua/oneprint/config.lua:
return gluapack()()
--addons/oneprint/lua/oneprint/client/init.lua:
OnePrint.Tabs = OnePrint.Tabs or {}
OnePrint.b3DWaiting = true

OnePrint.UIW = 600
OnePrint.UIH = 600
OnePrint.iMargin = 12
OnePrint.iRoundness = 6

surface.CreateFont( "OnePrint.1", { font = "Rajdhani Bold", size = ( OnePrint.UIH * .1 ), weight = 600, antialias = true } )
surface.CreateFont( "OnePrint.2", { font = "Rajdhani Bold", size = ( OnePrint.UIH * .07 ), weight = 600, antialias = true } )
surface.CreateFont( "OnePrint.3", { font = "Rajdhani Bold", size = ( OnePrint.UIH * .06 ), weight = 600, antialias = true } )
surface.CreateFont( "OnePrint.4", { font = "Rajdhani Bold", size = ( OnePrint.UIH * .05 ), weight = 600, antialias = true } )
surface.CreateFont( "OnePrint.5", { font = "Rajdhani Bold", size = ( OnePrint.UIH * .038 ), weight = 600, antialias = true } )
surface.CreateFont( "OnePrint.6", { font = "Rajdhani Regular", size = ( OnePrint.UIH * .035 ), weight = 550, antialias = true } )

--[[

    OnePrint:RegisterTab

]]--

function OnePrint:RegisterTab( tTab )
    if not tTab or not tTab.ID or not isnumber( tTab.ID ) then
        return
    end

    OnePrint.Tabs[ tTab.ID ] = tTab
end

--[[

    OnePrint:TabExists

]]--

function OnePrint:IsValidTab( sTabID )
    if not sTabID or not OnePrint.Tabs[ sTabID ] then
        return false
    end

    return true
end

--[[

    OnePrint:DrawPrinterScreen

]]--

function OnePrint:Create3DUI( eEntity )
    if not eEntity or not IsValid( eEntity ) or ( eEntity:GetClass() ~= "oneprint" ) then
        return
    end

    if OnePrint.b3DWaiting then
        include( "oneprint/client/vgui/3d2dvgui.lua" )        
        OnePrint.b3DWaiting = nil
    end

    local dBase = vgui.Create( "DPanel" )
    dBase:SetSize( OnePrint.UIW, OnePrint.UIH )
    dBase:ParentToHUD()
    dBase.bIsOnePrint = true
    dBase.eEntity = eEntity

    
    function dBase:Think()
        if not IsValid( self.eEntity ) then
            return
        end

        if not OnePrint.Cfg.CanUsePrinter["*"] then
            if not OnePrint.Cfg.CanUsePrinter[team.GetName(LocalPlayer():Team())] && OnePrint.TabSelected != 0 then 
                OnePrint:SetTab( dBase, 0 )

                OnePrint.TabSelected = 0
            end
        end
    end

    function dBase:Paint( iW, iH )
        surface.SetDrawColor( OnePrint:C( 0 ) )
        surface.DrawRect( 0, 0, iW, iH )
    end

    OnePrint:SetTab( dBase, ( eEntity:GetCurrentTab() or 1 ) )

    return dBase
end

--[[

    OnePrint:SetTab

]]--

local matCursor = Material( "materials/oneprint/wb_cursor.png", "smooth" )

function OnePrint:SetTab( dBase, iTab, bSync )
    if not dBase or not IsValid( dBase ) or not dBase.bIsOnePrint then
        return
    end

    if not OnePrint:IsValidTab( iTab ) then
        return
    end

    if dBase.ActiveTab and IsValid( dBase.ActiveTab ) then
        dBase.ActiveTab:Remove()
        dBase.ActiveTab = nil
    end

    if not bSync then
        OnePrint.Tabs[ iTab ].Run( dBase )
    end

    OnePrint.TabSelected = iTab

    local fLerpX, fLerpY = false, false

    if dBase.ActiveTab and IsValid( dBase.ActiveTab ) then
        function dBase.ActiveTab:PaintOver( iW, iH )
            local iX, iY = OnePrint:GetCursorPos()
            if not fLerpX then
                fLerpX, fLerpY = iX, iY
            end

            fLerpX = Lerp( RealFrameTime() * 10, fLerpX, iX )
            fLerpY = Lerp( RealFrameTime() * 10, fLerpY, iY )

            if ( fLerpX < -32 ) or ( fLerpX > ( iW + 16 ) ) then
                return
            end

            if ( fLerpY < -32 ) or ( fLerpY > ( iH + 16 ) ) then
                return
            end

            surface.SetDrawColor( color_white )
            surface.SetMaterial( matCursor )
            surface.DrawTexturedRect( fLerpX, fLerpY, ( iH * .03 ), ( iH * .03 ) )
        end
    end

    if bSync then
        self:SyncTab( dBase.eEntity, iTab )
    end
end

--[[

    OnePrint:SyncTab

]]--

function OnePrint:SyncTab( ePrinter, iTab )
    if not ePrinter or not IsValid( ePrinter ) or ( ePrinter:GetClass() ~= "oneprint" ) then
        return false
    end

    if ( ePrinter:GetCurrentTab() == iTab ) then
        return false
    end

    net.Start( "OnePrintNW" )
        net.WriteUInt( 0, 4 )
        net.WriteUInt( iTab, 3 )
        net.WriteEntity( ePrinter )
    net.SendToServer()
end

--[[

    OnePrint:Play2DSound

]]--

local CSoundSource = false

function OnePrint:Play2DSound( sFileName )
    if CSoundSource then
        CSoundSource:Stop()
        CSoundSource = false
    end

    CSoundSource = CreateSound( LocalPlayer(), sFileName )
    CSoundSource:PlayEx( 50, 100 )
end

--[[

    Packet reception

]]--

local tPacket = {
    -- GSmartWatch : Data update
    [ 0 ] = function()
        if not GSmartWatch then
            return
        end

        OnePrint.GSmartWatch = {}

        local iOwnedPrinters = net.ReadUInt( 8 )
		if ( iOwnedPrinters > 0 ) then
			for i = 1, iOwnedPrinters do
				local iMoney = net.ReadUInt( 24 )
				local iHealth = net.ReadUInt( 16 )
				local iTemperature = net.ReadUInt( 9 )

                OnePrint.GSmartWatch[ i ] = { money = iMoney, health = iHealth, temperature = iTemperature }
			end
		end
    end
}

net.Receive( "OnePrintNW", function()
    local i = net.ReadUInt( 4 )
    if i and tPacket[ i ] then
        tPacket[ i ]()
    end
end )
--addons/oneprint/lua/oneprint/client/vgui/derma.lua:
--[[

    OnePrint:DrawContainer

]]--

function OnePrint:DrawContainer( dPanel, iRoundness, sTitle )
    dPanel.fLerpDarken = ( dPanel.fLerpDarken or 100 )
    if dPanel.Depressed then
        dPanel.fLerpDarken = Lerp( RealFrameTime() * 10, dPanel.fLerpDarken, 140 )
    elseif dPanel.Hovered then
        dPanel.fLerpDarken = Lerp( RealFrameTime() * 10, dPanel.fLerpDarken, 120 )
    else
        dPanel.fLerpDarken = Lerp( RealFrameTime() * 10, dPanel.fLerpDarken, 100 )
    end

    local tCol = OnePrint:DarkenColor( OnePrint:C( 1 ), dPanel.fLerpDarken )

    draw.RoundedBox( OnePrint.iRoundness, 0, 0, dPanel:GetWide(), dPanel:GetTall(), tCol )

    if sTitle then
        draw.SimpleText( sTitle, "OnePrint.5", ( OnePrint.iMargin * .5 ), 5, OnePrint:C( 2 ), 0, 3 )
    end
end

--[[

    TODO : OnePrint:Notify

]]--

local tNotifTypes = {
    [ 0 ] = {
        color = OnePrint:C( 6 ),
        mat = Material( "materials/oneprint/lamp.png", "smooth" ),
    },
    [ 1 ] = {
        color = OnePrint:C( 4 ),
        mat = Material( "materials/oneprint/cancel.png", "smooth" ),
    },
}

function OnePrint:Notify( ePrinter, sText, iType, iTime )
    if not ePrinter or not IsValid( ePrinter ) or not ePrinter.dPrinter or not IsValid( ePrinter.dPrinter ) then
        return
    end

    local iType = ( iType or 0 )
    if not tNotifTypes[ iType ] then
        iType = 0
    end

    timer.Destroy( "OnePrint_NotifTimer" )

    if ePrinter.dNotif and IsValid( ePrinter.dNotif ) then
        ePrinter.dNotif:Update( sText, iType )
    else
        local iImgH = ( ePrinter.dPrinter:GetTall() * .032 )

        local dNotif = vgui.Create( "DLabel", ePrinter.dPrinter )
        dNotif:SetFont( "OnePrint.5" )
	    dNotif:SetContentAlignment( 4 )
	    dNotif:SetTextInset( iImgH + ( OnePrint.iMargin * 1.75 ), 2 )
        dNotif:SetTextColor( OnePrint:C( 5 ) )
	    dNotif:SetSize( 0, iImgH + ( OnePrint.iMargin ) )
        dNotif:SetZPos( 100 )
        dNotif:SetPos( ( ePrinter.dPrinter:GetWide() * .5 ) - ( dNotif:GetWide() * .5 ), -dNotif:GetTall() )

        dNotif.bBlank = true
        dNotif.mat = tNotifTypes[ iType ].mat
        dNotif.color = tNotifTypes[ iType ].color

        ePrinter.dNotif = dNotif

        function dNotif:Paint( iW, iH )
            surface.SetDrawColor( OnePrint:C( 0 ) )
            surface.DrawRect( 0, 0, iW, iH )

            surface.SetDrawColor( self.color )
            surface.DrawRect( 0, 0, iH, iH )
            surface.DrawRect( 0, ( iH - 2 ), iW, 2 )
            
            surface.SetMaterial( self.mat )
            surface.SetDrawColor( ColorAlpha( color_black, 150 ) )
            surface.DrawTexturedRectRotated( ( OnePrint.iMargin * .5 ) + ( iImgH * .5 ) + 2, ( iH * .5 ) + 2, iImgH, iImgH, 0 )

            surface.SetDrawColor( color_white )
            surface.DrawTexturedRectRotated( ( OnePrint.iMargin * .5 ) + ( iImgH * .5 ), ( iH * .5 ), iImgH, iImgH, 0 )
        end

        function dNotif:Update( sText, iType )
            if sText then
                surface.SetFont( self:GetFont() )
                local iTextW, iTextH = surface.GetTextSize( sText )

                self:SetText( sText )
                self:SetWide( iTextW + ( OnePrint.iMargin * 3 ) + 16 )

                if self.bBlank then
                    self:SetPos( ( self:GetParent():GetWide() * .5 ) - ( self:GetWide() * .5 ), 0 )
                    self.bBlank = nil
                end

                self:MoveTo( ( self:GetParent():GetWide() * .5 ) - ( self:GetWide() * .5 ), ( OnePrint.iMargin * 2 ), .2, 0, .5 )

                self.mat = tNotifTypes[ iType ].mat
                self.color = tNotifTypes[ iType ].color
            end
        end

        dNotif:Update( sText, iType )
    end

    timer.Create( "OnePrint_NotifTimer", ( iTime or 3 ), 1, function()
        if not ePrinter or not IsValid( ePrinter ) then
            return
        end

        if ePrinter.dNotif and IsValid( ePrinter.dNotif ) then
            ePrinter.dNotif:AlphaTo( 0, .2, 0, function()
                if ePrinter.dNotif and IsValid( ePrinter.dNotif ) then
                    ePrinter.dNotif:Remove()
                end
            end )
        end
    end )
end

--[[

    OnePrint:CreatePopup

]]--

local matAlert = Material( "materials/oneprint/alert.png", "smooth" )

function OnePrint:CreatePopup( dParent, sTitle, sDescription, tChoices, tBgColor )
    if not dParent or not IsValid( dParent ) then
        return
    end

    if dParent.dPopup and IsValid( dParent.dPopup ) then
        dParent.dPopup:Remove()
    end

    dParent.dPopup = vgui.Create( "DPanel", dParent )
    dParent.dPopup:SetAlpha( 0 )
    dParent.dPopup:AlphaTo( 255, 1, 0 )
    dParent.dPopup:SetSize( ( dParent:GetWide() * .6 ), ( dParent:GetTall() * .3 ) )
    dParent.dPopup:Center()

    dParent.dPopup.fLerpIcon = 0
    dParent.dPopup.iHeaderH = ( dParent.dPopup:GetTall() * .7 )
    dParent.dPopup.fLerpPoly = dParent.dPopup.iHeaderH
    dParent.dPopup.tCol = ( tBgColor or OnePrint:C( 6 ) )
    dParent.dPopup.tPolyCol = OnePrint:DarkenColor( dParent.dPopup.tCol, 80 )

    local tPoly = {
        { x = 0, y = dParent.dPopup.iHeaderH },
        { x = dParent.dPopup:GetWide(), y = dParent.dPopup.iHeaderH },
        { x = dParent.dPopup:GetWide(), y = dParent.dPopup.iHeaderH },
    }

    function dParent.dPopup:Paint( iW, iH )
        self.fLerpIcon = Lerp( RealFrameTime() * 4, self.fLerpIcon, ( self.iHeaderH * .4 ) )

        self.fLerpPoly = Lerp( RealFrameTime() * 2, self.fLerpPoly, OnePrint.iRoundness )
        tPoly[ 2 ].y = self.fLerpPoly

        -- Shadow
        DisableClipping( true )
            draw.RoundedBox( OnePrint.iRoundness, 8, 8, iW, iH, ColorAlpha( color_black, 70 ) )
        DisableClipping( false )

        -- Header
        draw.RoundedBoxEx( OnePrint.iRoundness, 0, 0, iW, self.iHeaderH, self.tCol, true, true, false, false )

    	surface.SetDrawColor( self.tPolyCol )
	    draw.NoTexture()
    	surface.DrawPoly( tPoly )

        -- Content
        if sTitle then
            draw.SimpleText( sTitle, "OnePrint.3", ( iW * .5 ), ( self.iHeaderH * .65 ), OnePrint:C( 5 ), 1, 1 )
        end

        surface.SetDrawColor( color_white )
        surface.SetMaterial( matAlert )
        surface.DrawTexturedRectRotated( ( iW * .5 ), ( self.iHeaderH * .25 ), self.fLerpIcon, self.fLerpIcon, 0 )

        -- Footer
        draw.RoundedBoxEx( OnePrint.iRoundness, 0, self.iHeaderH, iW, ( iH - self.iHeaderH ), OnePrint:C( 5 ), false, false, true, true )
    end

    local dClose = vgui.Create( "DButton", dParent.dPopup )
    dClose:SetSize( 48, 48 )
    dClose:AlignTop( ( dParent.dPopup:GetTall() * .01 ) )
    dClose:AlignRight( ( dParent.dPopup:GetTall() * .01 ) )
    dClose:SetFont( "OnePrint.6" )
    dClose:SetTextColor( OnePrint:C( 5 ) )
    dClose:SetText( "✖" )
    dClose.Paint = nil

    function dClose:OnCursorEntered()
        self:SetFont( "OnePrint.4" )
    end

    function dClose:OnCursorExited()
        self:SetFont( "OnePrint.6" )
    end

    function dClose:DoClick()
        if dParent and dParent.dPopup and IsValid( dParent.dPopup ) then
            dParent.dPopup:Remove()
        end
    end

    if sDescription then
        local dDescription = vgui.Create( "DLabel", dParent.dPopup )
        dDescription:SetText( sDescription )
        dDescription:SetFont( "OnePrint.6" )
        dDescription:SetTextColor( OnePrint:C( 5 ) )
        dDescription:SetContentAlignment( 5 )
        dDescription:SetSize( dParent.dPopup:GetWide() - 10, dParent.dPopup:GetTall() * .2 )
        dDescription:SetPos( 5, dParent.dPopup.iHeaderH - dDescription:GetTall() )
    end

    local dChoices = vgui.Create( "DIconLayout", dParent.dPopup )
    dChoices:SetSize( ( dParent.dPopup:GetWide() * .93 ), ( ( dParent.dPopup:GetTall() - dParent.dPopup.iHeaderH ) * .6 ) )
    dChoices:AlignLeft( ( dParent.dPopup:GetWide() * .5 ) - ( dChoices:GetWide() * .5 ) )
    dChoices:AlignBottom( ( dChoices:GetTall() * .3 ) )
    dChoices:SetSpaceX( dChoices:GetTall() * .1 )

    for _, v in ipairs( tChoices ) do
        local dBtn = dChoices:Add( "DButton" ) 
        dBtn:SetSize( dChoices:GetWide() / #tChoices - dChoices:GetSpaceX(), dChoices:GetTall() )
        dBtn:SetText( v.name )
        dBtn:SetFont( "OnePrint.5" )
        dBtn:SetTextColor( OnePrint:C( 5 ) )
        dBtn:SetTextInset( 0, 2 )
        dBtn.tColor = ( v.color or color_black )
        dBtn.tDarkColor = OnePrint:DarkenColor( dBtn.tColor, 60 )
        dBtn.fLerpH = 0

        function dBtn:DoClick()
            if v.func and isfunction( v.func ) then
                v.func( dParent.dPopup )
            end
        end

        function dBtn:Paint( iW, iH )
            surface.SetDrawColor( self.Hovered and self.tDarkColor or self.tColor )
            surface.DrawRect( 0, 0, iW, iH )
        end
    end

    return dParent.dPopup
end

--[[

    OnePrint:DarkenColor

]]--

function OnePrint:DarkenColor( tC, i )
    return Color( tC.r * ( i * .01 ), tC.g * ( i * .01 ), tC.b * ( i * .01 ), ( tC.a or 255 ) )
end

--[[

    OnePrintTitle

]]--

local OPTitle = {}

function OPTitle:Paint( iW, iH )
end

function OPTitle:SetHeader( sHeaderText, matShop )
    self.dHome = vgui.Create( "DButton", self )
    self.dHome:SetSize( ( self:GetWide() * .3 ), self:GetTall() )
    self.dHome:AlignRight( 0 )
    self.dHome:SetText( string.upper( OnePrint.Lang[ "Home" ] ) )
    self.dHome:SetTextColor( OnePrint:C( 5 ) )
    self.dHome:SetContentAlignment( 4 )
    self.dHome:SetTextInset( ( OnePrint.iMargin * .5 ), ( OnePrint.iMargin * .7 ) )
    self.dHome:SetFont( "OnePrint.3" )
    self.dHome.sTitle = string.upper( OnePrint.Lang[ "Return" ] .. " " .. OnePrint.Lang[ "Home" ] )

    function self.dHome:Paint( iW, iH )
        OnePrint:DrawContainer( self, OnePrint.iRoundness, self.sTitle )
        draw.RoundedBox( OnePrint.iRoundness, 0, iH - OnePrint.iRoundness, iW, OnePrint.iRoundness, OnePrint:C( 6 ) )
    end

    function self.dHome:DoClick()
        OnePrint:SetTab( self:GetParent():GetParent():GetParent(), 1, true )
        OnePrint:Play2DSound( "oneprint/keypress_standard.mp3" )
    end

    self.dTitle = vgui.Create( "DLabel", self )
    self.dTitle:SetSize( self:GetWide() - self.dHome:GetWide() - OnePrint.iMargin, self.dHome:GetTall() )
    self.dTitle:SetText( sHeaderText )
    self.dTitle:SetTextColor( OnePrint:C( 2 ) )
    self.dTitle:SetContentAlignment( 4 )
    self.dTitle:SetTextInset( ( self.dHome:GetTall() * .5 ) + ( OnePrint.iMargin * .5 ), ( OnePrint.iMargin * .2 ) )
    self.dTitle:SetFont( "OnePrint.3" )

    function self.dTitle:Paint( iW, iH )
        surface.SetDrawColor( OnePrint:C( 2 ) )
        surface.DrawRect( 0, ( iH - ( iH * .1 ) ), iW, ( iH * .1 ) )
        surface.SetMaterial( matShop )
        surface.DrawTexturedRectRotated( ( iH * .25 ), ( iH * .5 ), ( iH * .4 ), ( iH * .4 ), 0 )
    end
end

vgui.Register( "OnePrintTitle", OPTitle, "DPanel" )                                                                                                                                                                                                                                                                                                                                                                                                                                                 -- 76561198187122039
--addons/oneprint/lua/oneprint/client/vgui/tabs/shop.lua:
return gluapack()()