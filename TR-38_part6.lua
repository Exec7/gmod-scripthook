--Stealed clientside server code by exechack.cc
--Hostname: [TR] Venom Roleplay | DarkRP #venom25 - discord.gg/eniyisi  - Part 6/12 - 06/04/2025


--PATH lua/zclib/util/sh_entitytracker.lua:
return gluapack()()
--lua/zclib/util/sh_entitytracker.lua:
zclib = zclib or {}
zclib.EntityTracker = zclib.EntityTracker or {}
zclib.EntityTracker.List = zclib.EntityTracker.List or {}

function zclib.EntityTracker.Add(ent)
	table.insert(zclib.EntityTracker.List, ent)
end

function zclib.EntityTracker.Remove(ent)
	table.RemoveByValue(zclib.EntityTracker.List, ent)
end

function zclib.EntityTracker.GetList()
	return zclib.EntityTracker.List
end

--lua/zclib/util/sh_materials.lua:
return gluapack()()
--lua/zclib/util/sh_precache_mdl.lua:
return gluapack()()
--lua/zclib/util/sh_sounds.lua:
zclib = zclib or {}

zclib.Sound = zclib.Sound or {}
zclib.Sound.List = zclib.Sound.List or {}

// This packs the requested sound Data
function zclib.Sound.Catch(id)
	local soundData = {}
	local soundTable = zclib.Sound.List[id]
	soundData.sound = soundTable.paths[math.random(#soundTable.paths)]
	soundData.lvl = soundTable.lvl
	soundData.pitch = math.Rand(soundTable.pitchMin, soundTable.pitchMax)
	soundData.volume = soundTable.volume or 1

	return soundData
end

function zclib.Sound.EmitFromPosition(pos,id)
	local soundData = zclib.Sound.Catch(id)
	sound.Play(soundData.sound, pos, soundData.lvl, soundData.pitch, soundData.volume)
end

function zclib.Sound.EmitFromEntity(id, ent)

	local cur_time = math.Round(CurTime(),2)

	// Lets make sure we dont play the same sound at the same time more then a specified amount 5
	if ent.SoundTracker and ent.SoundTracker[id] and ent.SoundTracker[id][cur_time] and ent.SoundTracker[id][cur_time] >= 5 then
		return
	else
		if ent.SoundTracker == nil then
			ent.SoundTracker = {}
		end

		if ent.SoundTracker[id] == nil then
			ent.SoundTracker[id] = {}
		end

		ent.SoundTracker[id][cur_time] = (ent.SoundTracker[id][cur_time] or 0) + 1
	end

	local soundData = zclib.Sound.Catch(id)
	ent:EmitSound(soundData.sound, soundData.lvl, soundData.pitch, soundData.volume, CHAN_STATIC, 0, 0)
end

function zclib.Sound.StopFromEntity(id, ent)
	local soundData = zclib.Sound.Catch(id)
	ent:StopSound(soundData.sound)
end


sound.Add({
	name = "zclib_ui_click",
	channel = CHAN_STATIC,
	volume = 1,
	level = 60,
	pitch = {100, 100},
	sound = {"UI/buttonclick.wav"}
})

zclib.Sound.List["throw"] = {
	paths = {
		"zerolib/throw01.wav",
		"zerolib/throw02.wav",
		"zerolib/throw03.wav",
		"zerolib/throw04.wav",
		"zerolib/throw05.wav",
	},
	lvl = 60,
	pitchMin = 100,
	pitchMax = 100
}

zclib.Sound.List["inv_add"] = {
	paths = {
		"zerolib/inv_add.wav",
	},
	lvl = 60,
	pitchMin = 100,
	pitchMax = 100
}

zclib.Sound.List["machine_explode"] = {
	paths = {
		"weapons/explode3.wav",
		"weapons/explode4.wav",
		"weapons/explode5.wav",
	},
	lvl = 60,
	pitchMin = 100,
	pitchMax = 100
}

zclib.Sound.List["gas_buff"] = {
	paths = {"zerolib/gas_buff01.wav","zerolib/gas_buff02.wav","zerolib/gas_buff03.wav"},
	lvl = 60,
	pitchMin = 100,
	pitchMax = 100
}

zclib.Sound.List["zapp"] = {
	paths = {
		"ambient/energy/spark1.wav",
		"ambient/energy/spark2.wav",
		"ambient/energy/spark3.wav",
		"ambient/energy/spark4.wav",
		"ambient/energy/spark5.wav",
		"ambient/energy/spark6.wav"
	},
	lvl = 60,
	pitchMin = 100,
	pitchMax = 100
}


zclib.Sound.List["cash"] = {
	paths = {"zerolib/cash.wav"},
	lvl = 60,
	pitchMin = 100,
	pitchMax = 100
}

zclib.Sound.List["shoot"] = {
	paths = {"zerolib/shoot.wav"},
	lvl = 60,
	pitchMin = 100,
	pitchMax = 100
}

zclib.Sound.List["upgrade"] = {
	paths = {"zerolib/upgrade.wav"},
	lvl = 60,
	pitchMin = 100,
	pitchMax = 100
}
zclib.Sound.List["building"] = {
	paths = {"zerolib/building.wav"},
	lvl = 60,
	pitchMin = 100,
	pitchMax = 100
}

zclib.Sound.List["splash"] = {
	paths = {"ambient/water/water_splash1.wav","ambient/water/water_splash2.wav","ambient/water/water_splash3.wav"},
	lvl = 60,
	pitchMin = 100,
	pitchMax = 100,
	volume = 0.30
}

zclib.Sound.List["error"] = {
	paths = {"zerolib/error.wav"},
	lvl = 60,
	pitchMin = 100,
	pitchMax = 100,
	volume = 1,
}

--lua/zclib/util/sh_table.lua:
zclib = zclib or {}
zclib.table = zclib.util or {}



// Creates a new randomized table from the input table
function zclib.table.randomize( t )
	local out = { }

	while #t > 0 do
		table.insert( out, table.remove( t, math.random( #t ) ) )
	end

	return out
end

function zclib.table.clean(tbl)
	local new_tbl = {}

	for k, v in pairs(tbl) do
		if v then
			new_tbl[k] = v
		end
	end

	return new_tbl
end

function zclib.table.ToString(tbl)
	local str = ""

	for k, v in pairs(tbl) do
		str = str .. k .. ", "
	end

	return str
end

function zclib.table.JobToString(tbl)
	local str = ""

	for k, v in pairs(tbl) do
		str = str .. team.GetName(k) .. ", "
	end

	return str
end

function zclib.table.invert(tbl)
	local new = {}

	for k, v in pairs(tbl) do
		new[v] = true
	end

	return new
end

--lua/zclib/util/sh_util.lua:
zclib = zclib or {}
zclib.util = zclib.util or {}

// EntityDistance check for net messages
zclib.netdist = 1500

function zclib.Print(msg)
	if zclib.config.NoPrint then return end
	MsgC(Color(37, 69, 129), "[Zero´s Libary] ", color_white, msg .. "\n")
end

function zclib.ErrorPrint(msg)
	if zclib.config.NoPrint then return end
	MsgC(Color(37, 69, 129), "[Zero´s Libary] ", Color(255, 0, 0), msg .. "\n")
end

// Basic notify function
function zclib.Notify(ply, msg, ntfType)
	if not IsValid(ply) then return end

	if SERVER then
		if DarkRP and DarkRP.notify then
			DarkRP.notify(ply, ntfType, 8, msg)
		else
			ply:ChatPrint(msg)
		end
	else
		zclib.vgui.Notify(msg, ntfType)
	end
end

function zclib.util.IsInsideViewCone(pos,eyepos,eyeangles,view_distance,cone_rad)
	local x = eyepos
	local dir = eyeangles:Forward()

	//debugoverlay.Sphere(x,5,1,Color( 0, 255, 0 ),false)

	// So you project pos onto dir to find the point's distance along the axis:
	local cone_dist = (pos - x):Dot(dir)

	//At this point, you can reject values outside 0 <= cone_dist <= view_distance.

	//Then you calculate the cone radius at that point along the axis:
	local cone_radius = (cone_dist / view_distance) * cone_rad

	// And finally calculate the point's orthogonal distance from the axis to compare against the cone radius:
	local orth_distance = ((pos - x) - cone_dist * dir):Length()

	//debugoverlay.Sphere(x,cone_radius,1,Color( 255, 255, 0 ),false)

	//debugoverlay.BoxAngles(eyepos, Vector(0, -15, -15), Vector(view_distance, 15, 15),eyeangles, 1, Color(255, 255, 255, 25))

	local is_point_inside_cone = (orth_distance < cone_radius)

	return is_point_inside_cone
end

if CLIENT then
	function zclib.util.LoopedSound(ent, soundfile, shouldplay,dist)
		if shouldplay and zclib.util.InDistance(LocalPlayer():GetPos(), ent:GetPos(), dist or 500) then
			if ent.Sounds == nil then
				ent.Sounds = {}
			end

			if ent.Sounds[soundfile] == nil then
				ent.Sounds[soundfile] = CreateSound(ent, soundfile)
			end

			if ent.Sounds[soundfile]:IsPlaying() == false then

				ent.Sounds[soundfile]:Play()
				ent.Sounds[soundfile]:ChangeVolume(zclib.Convar.Get("zclib_cl_sfx_volume"), 0)
				ent.LastVolume = zclib.Convar.Get("zclib_cl_sfx_volume")
			else
				if ent.LastVolume ~= zclib.Convar.Get("zclib_cl_sfx_volume") then
					ent.LastVolume = zclib.Convar.Get("zclib_cl_sfx_volume")
					ent.Sounds[soundfile]:ChangeVolume(ent.LastVolume, 0)
				end
			end
		else
			if ent.Sounds == nil then
				ent.Sounds = {}
			end

			if ent.Sounds[soundfile] ~= nil and ent.Sounds[soundfile]:IsPlaying() == true then
				ent.Sounds[soundfile]:ChangeVolume(0, 0)
				ent.Sounds[soundfile]:Stop()

				ent.Sounds[soundfile] = nil
			end
		end
	end

	function zclib.util.ScreenPointToRay(ViewPos,filter,mask)
		local x, y = input.GetCursorPos()
		local dir = gui.ScreenToVector( x,y )

		// Trace for valid Spawn Pos
		local c_trace = zclib.util.TraceLine({
			start = ViewPos,
			endpos = ViewPos + dir:Angle():Forward() * 10000,
			filter = filter,
			mask = mask,
		}, "ScreenPointToRay")
		return c_trace
	end

	local wtr = { collisiongroup = COLLISION_GROUP_WORLD, output = {} }
	local woff = Vector(0,0,100000)
	function zclib.util.IsInWorld( pos )
		wtr.start = pos
		wtr.endpos = pos - woff
		return util.TraceLine( wtr ).HitWorld
	end
end

function zclib.util.FormatDate(date)
	local chars = string.Split( date, "/" )
	local CleanDate = chars[3] .. "/" .. chars[2] .. "/" .. chars[1] .. " - " .. chars[4]

	return CleanDate
end

function zclib.util.GetDate()
	return os.time()
end

function zclib.util.GenerateUniqueID(template)
	return string.gsub(template, "[xy]", function(c)
		local v = (c == "x") and math.random(0, 0xf) or math.random(8, 0xb)

		return tostring(string.format("%x", v))
	end) .. "a"
end

function zclib.util.UnitToMeter(unit)
	return math.Round(unit * 0.01953125) .. "m"
end

// Takes in a savefile name and makes it clean and nice
function zclib.util.StringClean(id)
	// Make it lower case
	id = string.lower(id)

	// Lets removed any problematic symbols
	local pattern = '[\\/:%*%?"<>!|]' // a set of all restricted characters
	id = string.gsub(id,pattern,"",99)

	// Replace empty space with underline
	id = string.Replace(id," ","_")

	return id
end

function zclib.util.StringToUniqueID(str)
	local _bytes = {string.byte(str, 1, string.len(str))}
	local _seed = table.concat( _bytes,"", 1, #_bytes )
	math.randomseed( _seed )
	return math.random(1,9999999)
end


function zclib.util.FormatTime(time)
	local divid = time / 60
	local minutes = math.floor(time / 60)
	local seconds = math.Round(60 * (divid - minutes))

	local lang_m = zclib.Language["Minutes"]
	local lang_s = zclib.Language["Seconds"]

	if seconds > 0 and minutes > 0 then
		return minutes .. " " .. lang_m .. " | " .. seconds .. " " .. lang_s
	elseif seconds <= 0 and minutes > 0 then
		return minutes .. " " .. lang_m
	elseif seconds >= 0 and minutes <= 0 then
		return seconds .. " " .. lang_s
	end
end

// Checks if the distance between pos01 and pos02 is smaller then dist
function zclib.util.InDistance(pos01, pos02, dist)
	return pos01:DistToSqr(pos02) < (dist * dist)
end

// Used to fix the Duplication Glitch
local CollisionCooldownList = {}
function zclib.util.CollisionCooldown(ent)
	if zclib.Entity.GettingRemoved(ent) then return true end

	// NOTE I changed the way the collision cooldown gets saved since there will be problems for scripts which use the duplicator.CreateEntityFromTable function
	// As it saved any value from the entity which means that once the entity will be reconstructed it would cause the cooldown to be at the time at which it got saved
	local Cooldown = CollisionCooldownList[ent]
	if Cooldown == nil then
		CollisionCooldownList[ent] = CurTime() + 0.5
		return false
	else
		if CurTime() < Cooldown then
			return true
		else
			CollisionCooldownList[ent] = CurTime() + 0.5
			return false
		end
	end
end


function zclib.util.SnapValue(snapval,val)
	val = val / snapval
	val = math.Round(val)
	val = val * snapval
	return val
end

// Tells us if the functions is valid
function zclib.util.FunctionValidater(func)
	if (type(func) == "function") then return true end
	return false
end

// Performs a TraceLine
function zclib.util.TraceLine(tracedata,identifier)
	return util.TraceLine(tracedata)
end

// Calculates how much of the AddAmount will remain and how much can be added
function zclib.util.GetRemain(HaveAmount, CapAmount, AddAmount)
	local diff = CapAmount - HaveAmount
	local add = math.Clamp(AddAmount, 0, diff)
	local remain = AddAmount - add
	return remain, add
end

function zclib.util.RandomChance(chance)
	if math.random(0, 100) < math.Clamp(chance,0,100) then
		return true
	else
		return false
	end
end

// Returns a random postion on a
function zclib.util.GetRandomPositionInsideCircle(rad_min,rad_max,height)
	local randomAngle = math.random(360)
	local InnerCircleRadius = math.random(rad_min,rad_max)
	return Vector(math.cos(randomAngle) * InnerCircleRadius, math.sin(randomAngle) * InnerCircleRadius, height)
end

// Calls the provided function with a small delay, we cant use time 0 (NextFrame) since some scripts can fuck with that
function zclib.util.CallDelayed(ent,func)
	timer.Simple(math.Rand(0.001,0.01),function()
		if IsValid(ent) and ent:IsValid() then
			pcall(func)
		end
	end)
end

--lua/zclib/util/player/sh_player.lua:
return gluapack()()
--lua/zclib/util/player/cl_player.lua:
if SERVER then return end
// Sends a net msg to the server that the player has fully initialized and removes itself
zclib.Hook.Add("HUDPaint", "PlayerInit", function()

	// Tell the server that we just initialized
	net.Start("zclib_Player_Initialize")
	net.SendToServer()

	// I like to believe this var is used somewhere
	LocalPlayer().zclib_HasInitialized = true

	// Run a custom hook to inform any other clientside script that the players is now initialized
	hook.Run("zclib_PlayerInitialized")

	// Add the player himself to the player list
	zclib.Player.Add(LocalPlayer())

	// Forces zeros libary to reload its image service module
	timer.Simple(1,function() zclib.Imgur.Init() end)

	// Delete this hook now
	zclib.Hook.Remove("HUDPaint", "PlayerInit")
end)

--lua/zclib/generic/cl_vgui_effects.lua:
if SERVER then return end
zclib = zclib or {}
zclib.vgui = zclib.vgui or {}
zclib.vgui.EffectList = zclib.vgui.EffectList or {}

/*

	This system handles particle effects on vgui

*/

function zclib.vgui.AddEffect(id,effect, sound) zclib.vgui.EffectList[id] = {effect, sound} end

zclib.vgui.AddEffect("Destroy","zmb_vgui_destroy", "weapons/explode3.wav")
zclib.vgui.AddEffect("Magic","zmb_vgui_magic", "zerolib/gas_buff01.wav")
zclib.vgui.AddEffect("Repair","zmb_vgui_repair", "zerolib/building.wav")
zclib.vgui.AddEffect("Techno","zmb_vgui_techno", "zerolib/shoot.wav")
zclib.vgui.AddEffect("Use","zmb_vgui_use", "zerolib/throw01.wav")
zclib.vgui.AddEffect("Upgrade","zmb_vgui_upgrade", "zerolib/upgrade.wav")
zclib.vgui.AddEffect("Sell","zmb_vgui_sell", "zerolib/cash.wav")

zclib.vgui.AddEffect("firework_red","zmb_vgui_firework_red", "zerolib/firework01.wav")
zclib.vgui.AddEffect("firework_green","zmb_vgui_firework_green", "zerolib/firework02.wav")
zclib.vgui.AddEffect("firework_blue","zmb_vgui_firework_blue", "zerolib/firework01.wav")
zclib.vgui.AddEffect("firework_yellow","zmb_vgui_firework_yellow", "zerolib/firework02.wav")

/*
	Lets also add every single cached effect to the screen
*/
zclib.Hook.Add("zclib_OnParticleSystemPrecached", "zst_register_effect_for_vgui", function(effect)
	zclib.vgui.AddEffect(effect, effect)
end)

local EffectCache = {}
local ang = Angle(90, 0, -90)

local function StartRendering()
	zclib.Hook.Add("DrawOverlay", "zclib_vgui_effects", function()
		local ply = LocalPlayer()

		if IsValid(ply) and EffectCache and table.Count(EffectCache) > 0 then

			local w, h = ScrW(), ScrH()

			for k, v in pairs(EffectCache) do

				if v and IsValid(v.emitter) then

					local ortho = {
						top = (-h / 2) * v.distance,
						bottom = (h / 2) * v.distance,
						left = (-w / 2) * v.distance,
						right = (w / 2) * v.distance
					}

					cam.Start( { type = "3D", ortho = ortho, angles = ang } )
						v.emitter:Render()
					cam.End3D()
				else
					EffectCache[k] = nil
				end
			end
		else
			zclib.Hook.Remove("DrawOverlay", "zclib_vgui_effects")
		end
	end)
end

function zclib.vgui.PlayEffect(id, x, y,skipSound,distance)
	distance = distance or 1

	local e_Data = zclib.vgui.EffectList[id]
	zclib.vgui.CreateEffect(e_Data[ 1 ], Vector((x - (ScrW() / 2)) * distance, (-y + (ScrH() / 2)) * distance, 0), distance)
	if e_Data[2] and not skipSound then surface.PlaySound(e_Data[2]) end
end

function zclib.vgui.PlayEffectAtPanel(id, pnl, x, y,skipSound,distance)
	distance = distance or 1

	local pX, pY = pnl:GetPos()
	local cX, cY = pnl:GetParent():LocalToScreen(pX + (pnl:GetWide() / 2) + (x or 0), pY + (pnl:GetTall() / 2) + (y or 0))
	zclib.vgui.PlayEffect(id, cX, cY,skipSound,distance)
end

function zclib.vgui.CreateEffect(effect, pos,distance)
	local ply = LocalPlayer()
	local emitter = CreateParticleSystem(ply, effect, PATTACH_WORLDORIGIN, 0, pos)
	if IsValid(emitter) then
		emitter:SetShouldDraw(false)
		emitter:SetIsViewModelEffect(true)
		emitter:StartEmission(true)
		table.insert(EffectCache, {emitter = emitter,distance = distance or 1})
		StartRendering()
	end
end

--lua/zclib/zone/cl_zone.lua:
return gluapack()()
--lua/zclib/zone/cl_zone.lua:
if SERVER then return end
zclib = zclib or {}
zclib.Zone = zclib.Zone or {}

net.Receive("zclib_Zone_Send", function(len)
    zclib.Debug_Net("zclib_Zone_Send", len)
    local entryid = net.ReadString()
    local dataLength = net.ReadUInt(16)
    local dataDecompressed = util.Decompress(net.ReadData(dataLength))
    local data = util.JSONToTable(dataDecompressed)

    if data and istable(data) then
        zclib.Zone.Set(entryid,data)
    end
end)

net.Receive("zclib_Zone_Show", function(len)
    zclib.Debug_Net("zclib_Zone_Show", len)
    local entryid = net.ReadString()
	local showall = net.ReadBool()
    zclib.Zone.Preview_Start(entryid,showall)
end)

net.Receive("zclib_Zone_Hide", function(len)
    zclib.Debug_Net("zclib_Zone_Hide", len)
    zclib.Zone.Preview_Stop()
end)

local function HasToolActive(entryid,ply)
    if IsValid(ply:GetActiveWeapon()) and ply:GetActiveWeapon():GetClass() == "gmod_tool" then
        local tool = ply:GetTool()
        if tool and table.Count(tool) > 0 and IsValid(tool.SWEP) and tool.Mode == zclib.Zone.GetToolName(entryid) then
            return tool
        else
            return false
        end
    else
        return false
    end
end

local RenderHook = "HUDPaint"

local CurEntryid
function zclib.Zone.Preview_Start(entryid,showall)

    if zclib.Hook.Exist(RenderHook, "zclib_zone_preview") and CurEntryid == entryid then return end

	zclib.Zone.Preview_Stop()
	zclib.Debug("zclib.Zone.Preview_Start " .. entryid)
    local ply = LocalPlayer()
	CurEntryid = entryid

    zclib.Hook.Add(RenderHook, "zclib_zone_preview", function(bDrawingDepth, bDrawingSkybox, isDraw3DSkybox)
        if isDraw3DSkybox then return end

        if not IsValid(ply) or ply:Alive() == false then
            zclib.Zone.Preview_Stop()
        end

        if HasToolActive(entryid,ply) == false then
            zclib.Zone.Preview_Stop()
        end

        local tr = ply:GetEyeTrace()
        if not tr.Hit or not tr.HitPos then return end

		local npos = zclib.Zone.GetTracePos(entryid, ply, tr)

		cam.Start3D(EyePos(),EyeAngles(),nil,0,0,ScrW(),ScrH(),1,100000000000)

        render.SetColorMaterial()
        render.DrawWireframeSphere( npos, 5,9, 9,zclib.colors["zone_green01"], true )

        if ply.zclib_ZoneStart and npos then
			if zclib.Zone.GetFreeSize(entryid) then
				local zoneSize = zclib.Zone.GetFinalSize(entryid,tr,ply.zclib_ZoneStart,npos)
	            render.SetColorMaterial()
				render.DrawBox(ply.zclib_ZoneStart, angle_zero, vector_origin, zoneSize,zclib.colors["zone_green01"])
	            render.DrawWireframeBox(ply.zclib_ZoneStart, angle_zero, vector_origin, zoneSize,zclib.colors["zone_green01"], true)
			else

				local vec01 = Vector(0, 0,zclib.Zone.GetHeight(entryid) - zclib.Zone.GetExtraHeight(entryid))

				local zoneSize = zclib.Zone.GetSize(entryid,ply.zclib_ZoneStart,npos)

				render.SetColorMaterial()
				render.DrawBox(ply.zclib_ZoneStart - vec01, angle_zero, vector_origin, zoneSize,zclib.colors["zone_green01"])
	            render.DrawWireframeBox(ply.zclib_ZoneStart - vec01, angle_zero, vector_origin, zoneSize,zclib.colors["zone_green01"], true)
			end
        end

        zclib.Zone.DrawAll(entryid,tr.HitPos,function(zone_id,pos)
            return zclib.Zone.Check(entryid,zone_id,tr.HitPos or vector_origin) and zclib.colors["zone_green01"] or zclib.colors["zone_white"]
        end)

		cam.End3D()
    end)

	zclib.Hook.Add("PostDrawTranslucentRenderables", "zclib_zone_preview",function(bDrawingDepth, bDrawingSkybox, isDraw3DSkybox)
		if isDraw3DSkybox then return end

		if not IsValid(ply) or ply:Alive() == false then
			zclib.Zone.Preview_Stop()
		end

		if HasToolActive(entryid,ply) == false then
			zclib.Zone.Preview_Stop()
		end

		local tr = ply:GetEyeTrace()
		if not tr.Hit or not tr.HitPos then return end


		zclib.Zone.DrawAll(entryid,tr.HitPos,function(zone_id,pos)
			return zclib.Zone.Check(entryid,zone_id,tr.HitPos or vector_origin) and zclib.colors["zone_green01"] or zclib.colors["zone_white"]
		end)
	end)
end

function zclib.Zone.Preview_Stop()
    zclib.Hook.Remove(RenderHook, "zclib_zone_preview")
	zclib.Hook.Remove("PostDrawTranslucentRenderables", "zclib_zone_preview")
end

function zclib.Zone.Draw(entry,zone_id,zone_data,size,pos,check,entryid)

    local asize
	if zclib.Zone.GetFreeSize(entryid) then
		asize = Vector(size.x,size.y,size.z)
	else
		asize = Vector(size.x,size.y,((entry.BaseHeight or 200) * 2) + (entry.ExtraHeight or 200))
	end

    local thickPos,thickSize = zclib.Zone.GetThickness(entryid,pos,asize)
    if thickPos and thickSize then
        pos = pos + thickPos
        asize = asize + thickSize
    end

	render.SetColorMaterial()
    local color = check(zone_id,pos)
    if entry.FillZone then
        render.DrawBox(pos, angle_zero, vector_origin, asize, color)
    end
    render.DrawWireframeBox(pos, angle_zero, vector_origin, asize, color, entry.WriteZ == nil and true or entry.WriteZ)

	cam.IgnoreZ(true)
    cam.Start3D2D(pos + (size / 2) + Vector(0, 0, entry.BaseHeight or 200), zclib.HUD.GetLookAngles(), 1)
        entry.DrawZone(zone_id,zone_data)
    cam.End3D2D()
	cam.IgnoreZ(false)
end

function zclib.Zone.DrawAll(entryid,pos,check)
    local entry = zclib.Zone.GetEntry(entryid)
    if entry == nil then return end

	// Overwrites the DrawAll zones function
	if entry.DrawAllOverwrite then
		entry.DrawAllOverwrite(entryid,pos,check)
	else
		for k, v in pairs(zclib.Zone.GetData(entryid)) do
	        if v and v.pos and v.size then
	            zclib.Zone.Draw(entry,k,v,v.size,v.pos,check,entryid)
	        end
	    end
	end
end

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

net.Receive("zclib_Zone_ShowSingle", function(len)
    zclib.Debug_Net("zclib_Zone_ShowSingle", len)
    local entryid = net.ReadString()
    local zoneid = net.ReadUInt(16)
    zclib.Zone.DrawSingle(entryid,zoneid)
end)

function zclib.Zone.DrawSingle(entryid,zoneid)

    local entry = zclib.Zone.GetEntry(entryid)
    if entry == nil then return end

    local zonelist = entry.GetData()
    if zonelist == nil then return end

    local zoneData = zonelist[zoneid]
    if zoneData == nil then return end

    local FinishTime = CurTime() + 10

    zclib.Hook.Remove(RenderHook, "zclib_zone_preview")
    local ply = LocalPlayer()
    zclib.Hook.Add(RenderHook, "zclib_zone_preview", function(bDrawingDepth, bDrawingSkybox, isDraw3DSkybox)
        if isDraw3DSkybox then return end

        if not IsValid(ply) or ply:Alive() == false then
            zclib.Hook.Remove(RenderHook, "zclib_zone_preview")
        end

        if CurTime() >= FinishTime then
            zclib.Hook.Remove(RenderHook, "zclib_zone_preview")
        end

        zclib.Zone.Draw(entry,zoneid,zoneData,zoneData.size,zoneData.pos,function() return zclib.colors["zone_red01"] end,entryid)
    end)

	zclib.Hook.Remove("PostDrawTranslucentRenderables", "zclib_zone_preview")
	zclib.Hook.Add("PostDrawTranslucentRenderables", "zclib_zone_preview", function(bDrawingDepth, bDrawingSkybox, isDraw3DSkybox)
		if isDraw3DSkybox then return end

		if not IsValid(ply) or ply:Alive() == false then
			zclib.Hook.Remove("PostDrawTranslucentRenderables", "zclib_zone_preview")
		end

		if CurTime() >= FinishTime then
			zclib.Hook.Remove("PostDrawTranslucentRenderables", "zclib_zone_preview")
		end

		zclib.Zone.Draw(entry,zoneid,zoneData,zoneData.size,zoneData.pos,function() return zclib.colors["zone_red01"] end,entryid)
	end)
end

--addons/darkrpadvancedkeys/lua/autorun/advkeys_darkrpadds.lua:
return gluapack()()
--lua/autorun/alleyt.lua:
player_manager.AddValidModel( "Alley Thug", "models/deepalley/alley_thug.mdl" )
list.Set( "PlayerOptionsModel",  "Alley Thug", "models/deepalley/alley_thug.mdl" )
player_manager.AddValidHands( "Alley Thug", "models/deepalley/alley_thug_arms.mdl", 0, "00000000" )

--Add NPC
local Category = "Criminal"

local NPC = { 	Name = "Alley Thug (Apyr.)", 
				Class = "npc_citizen",
				Model = "models/deepalley/alley_thug.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "alley_thug", NPC )

local NPC = { 	Name = "Alley Thug (Hostile)", 
				Class = "npc_combine_s",
				Model = "models/deepalley/alley_thug.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "alley_thug_hostile", NPC )

--lua/autorun/anonymous_player_model.lua:
return gluapack()()
--addons/aphone/lua/aphone/sh_config.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/printers/sh_lithiumprinter.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/autorun/arccw_autorun.lua:
AddCSLuaFile()

-- the main object
ArcCW = {}

ArcCWInstalled = true

ArcCW.GenerateAttEntities = true

for _, v in pairs(file.Find("arccw/shared/*", "LUA")) do
    include("arccw/shared/" .. v)
    AddCSLuaFile("arccw/shared/" .. v)
end

for _, v in pairs(file.Find("arccw/client/*", "LUA")) do
    AddCSLuaFile("arccw/client/" .. v)
    if CLIENT then
        include("arccw/client/" .. v)
    end
end

-- TODO: Remove SP check after upcoming June 2023 update
if SERVER or game.SinglePlayer() then
    for _, v in pairs(file.Find("arccw/server/*", "LUA")) do
        include("arccw/server/" .. v)
    end
end

-- if you want to override arccw functions, put your override files in the arccw/mods directory so it will be guaranteed to override the base

for _, v in pairs(file.Find("arccw/mods/shared/*", "LUA")) do
    include("arccw/mods/shared/" .. v)
    AddCSLuaFile("arccw/mods/shared/" .. v)
end

for _, v in pairs(file.Find("arccw/mods/client/*", "LUA")) do
    AddCSLuaFile("arccw/mods/client/" .. v)
    if CLIENT then
        include("arccw/mods/client/" .. v)
    end
end

-- TODO: Remove SP check after upcoming June 2023 update
if SERVER or game.SinglePlayer() then
    for _, v in pairs(file.Find("arccw/mods/server/*", "LUA")) do
        include("arccw/mods/server/" .. v)
    end
end
--lua/arccw/shared/sh_1_ur.lua:
ArcCW.UR = {}

ArcCW.UR.AKCalFlags = {"cal_545","cal_9mm","cal_12g","cal_366", "cal_308", "cal_556"}
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_attachments.lua:
ArcCW.AttachmentBlacklistTable = ArcCW.AttachmentBlacklistTable or {}

function ArcCW:PlayerCanAttach(ply, wep, attname, slot, detach)
    -- The global variable takes priority over everything
    if !ArcCW.EnableCustomization then return false end

    -- Attach and Detach require a player (usually the owner)
    if !IsValid(ply) then return false end

    -- Spectators taking off your attachments is funny, but also cursed
    if wep:GetOwner() != ply then return false end

    -- Allow hooks to block or force allow attachment usage
    local ret = hook.Run("ArcCW_PlayerCanAttach", ply, wep, attname, slot, detach)

    if ret == nil and engine.ActiveGamemode() == "terrortown" then
        local mode = ArcCW.ConVars["ttt_customizemode"]:GetInt()
        if mode == 1 and !ply.ArcCW_AllowCustomize then return false
        elseif mode == 2 and !ply.ArcCW_AllowCustomize and GetRoundState() == ROUND_ACTIVE then return false
        elseif mode == 3 and !ply.ArcCW_AllowCustomize and !ply:IsActiveTraitor() and !ply:IsActiveDetective() then return false end
    elseif ret == nil and ArcCW.ConVars["enable_customization"]:GetInt() <= 0 then
        return false
    end

    return (ret == nil and true) or ret
end

function ArcCW:GetAttsForSlot(slot, wep, random)
    local ret = {}

    for id, atttbl in pairs(ArcCW.AttachmentTable) do

        if !ArcCW:SlotAcceptsAtt(slot, wep, id) then continue end
        if random and (atttbl.NoRandom or (atttbl.RandomWeight or 1) <= 0) then continue end

        table.insert(ret, id)
    end

    return ret
end

function ArcCW:GetAttList(name, filter)
    if self.AttachmentCachedLists[name] then return self.AttachmentCachedLists[name] end
    self.AttachmentCachedLists[name] = {}
    for k, v in pairs(self.AttachmentTable) do
        local k2, v2 = filter(k, v)
        if k2 then
            self.AttachmentCachedLists[name][k2] = v2
        end
    end
    return self.AttachmentCachedLists[name]
end

local function weighted_random(tbl, amt)
    amt = amt or 1
    local max = 0
    for k, v in pairs(tbl) do max = max + v end
    local ret = {}
    for i = 1, amt do
        local rng = math.random() * max
        for k, v in pairs(tbl) do
            rng = rng - v
            if rng <= 0 then
                ret[k] = (ret[k] or 0) + 1
                break
            end
        end
    end
    return ret
end

function ArcCW:RollRandomAttachment(all, wep, slot)
    for k, v in pairs(self:RollRandomAttachments(1, all, wep, slot)) do return k end
end

function ArcCW:RollRandomAttachments(amt, all, wep, slot)
    if wep == nil then
        -- cache the list results and randomly get one
        local tbl = self:GetAttList("random" .. (all and "_all" or ""), function(k, v)
            if ((!v.Free and !v.InvAtt) or all) and !v.NoRandom and (v.RandomWeight or 1) >= 0 then
                return k, v.RandomWeight or 1
            end
        end)
        return weighted_random(tbl, amt)
    else
        -- can't cache this because it is weapon-dependent
        local tbl = {}
        for id, atttbl in pairs(ArcCW.AttachmentTable) do
            if ((!atttbl.Free and !atttbl.InvAtt) or all) and (atttbl.NoRandom or (atttbl.RandomWeight or 1) <= 0) then continue end
            if !wep:CheckFlags(atttbl.ExcludeFlags, atttbl.RequireFlags) then continue end
            if slot != nil and !ArcCW:SlotAcceptsAtt(slot.Slot, wep, id) then continue end
            tbl[id] = atttbl.RandomWeight or 1
        end
        return weighted_random(tbl, amt)
    end
end

function ArcCW:SlotAcceptsAtt(slot, wep, att)
    local slots = {}

    if isstring(slot) then
        slots[slot] = true
    elseif istable(slot) then
        for _, i in pairs(slot) do
            slots[i] = true
        end
    end

    local atttbl = ArcCW.AttachmentTable[att]
    if !atttbl then return false end

    if atttbl.Hidden or atttbl.Blacklisted or ArcCW.AttachmentBlacklistTable[att] then return false end

    local Owner = wep.GetOwner and wep:GetOwner()
    if (atttbl.NotForNPC or atttbl.NotForNPCs) and Owner and Owner:IsNPC() then
        return false
    end
    if atttbl.AdminOnly and IsValid(Owner) and !(Owner:IsPlayer() and Owner:IsAdmin()) then return false end

    if wep.RejectAttachments and wep.RejectAttachments[att] then return false end

    if isstring(atttbl.Slot) then
        if !slots[atttbl.Slot] then return false end
    elseif istable(atttbl.Slot) then
        local yeah = false

        for _, i in pairs(atttbl.Slot) do
            if slots[i] then
                yeah = true
                break
            end
        end

        if !yeah then
            return false
        end
    end

    if wep and atttbl.Hook_Compatible then
        local compat = atttbl.Hook_Compatible(wep, {slot = slot, att = att})
        if compat == true then
            return true
        elseif compat == false then
            return false
        end
    end

    return true
end

function ArcCW:WeaponAcceptsAtt(wep, att)
    if wep.ArcCW and wep.Attachments then
        local tbl = {}
        for i, v in pairs(wep.Attachments) do
            table.insert(tbl, i)
        end
        return ArcCW:SlotAcceptsAtt(wep, wep, att)
    end
    return false
end

function ArcCW:PlayerGetAtts(ply, att)
    if !IsValid(ply) then return 0 end
    if ArcCW.ConVars["attinv_free"]:GetBool() then return 999 end

    if att == "" then return 999 end

    local atttbl = ArcCW.AttachmentTable[att]

    if !atttbl then return 0 end

    if atttbl.Free then return 999 end

    if !IsValid(ply) then return 0 end

    if !ply:IsAdmin() and atttbl.AdminOnly then
        return 0
    end

    if atttbl.InvAtt then att = atttbl.InvAtt end

    if !ply.ArcCW_AttInv then return 0 end

    if !ply.ArcCW_AttInv[att] then return 0 end

    return ply.ArcCW_AttInv[att]
end

function ArcCW:PlayerGiveAtt(ply, att, amt)
    amt = amt or 1

    if !IsValid(ply) then return end

    if !ply.ArcCW_AttInv then
        ply.ArcCW_AttInv = {}
    end

    local atttbl = ArcCW.AttachmentTable[att]

    if !atttbl then print("Invalid att " .. att) return end
    if atttbl.Free then return end -- You can't give a free attachment, silly
    if atttbl.AdminOnly and !(ply:IsPlayer() and ply:IsAdmin()) then return false end

    if atttbl.InvAtt then att = atttbl.InvAtt end

    if ArcCW.ConVars["attinv_lockmode"]:GetBool() then
        if ply.ArcCW_AttInv[att] == 1 then return end
        ply.ArcCW_AttInv[att] = 1
    else
        ply.ArcCW_AttInv[att] = (ply.ArcCW_AttInv[att] or 0) + amt
    end
end

function ArcCW:PlayerTakeAtt(ply, att, amt)
    amt = amt or 1

    if ArcCW.ConVars["attinv_lockmode"]:GetBool() then return end

    if !IsValid(ply) then return end

    if !ply.ArcCW_AttInv then
        ply.ArcCW_AttInv = {}
    end

    local atttbl = ArcCW.AttachmentTable[att]
    if !atttbl or atttbl.Free then return end

    if atttbl.InvAtt then att = atttbl.InvAtt end

    ply.ArcCW_AttInv[att] = ply.ArcCW_AttInv[att] or 0

    if ply.ArcCW_AttInv[att] < amt then
        return false
    end

    ply.ArcCW_AttInv[att] = ply.ArcCW_AttInv[att] - amt
    if ply.ArcCW_AttInv[att] <= 0 then
        ply.ArcCW_AttInv[att] = nil
    end
    return true
end

if CLIENT then

local function postsetup(wpn)
    if wpn.SetupModel then
        wpn:SetupModel(true)
        if wpn:GetOwner() == LocalPlayer() then
            wpn:SetupModel(false)
        end
        wpn:AdjustAtts()
    else
        timer.Simple(0.1, function()
            postsetup(wpn)
        end)
    end
end

net.Receive("arccw_networkatts", function(len, ply)
    
   local wpn = net.ReadEntity()
    if !IsValid(wpn) then return end
    if !wpn.ArcCW then return end

    local attnum = net.ReadUInt(8)
    wpn.Attachments = wpn.Attachments or {}
    wpn.SubSlotCount = 0

    for i = 1, attnum do
        local attid = net.ReadUInt(ArcCW.GetBitNecessity())

        wpn.Attachments[i] = wpn.Attachments[i] or {}

        if attid == 0 then
            if !istable(wpn.Attachments[i]) then continue end
            wpn.Attachments[i].Installed = nil
            continue
        end

        local att = ArcCW.AttachmentIDTable[attid]
        wpn.Attachments[i].Installed = att

        if wpn.Attachments[i].SlideAmount then
            wpn.Attachments[i].SlidePos = net.ReadFloat()
        end

        if ArcCW.AttachmentTable[att].ToggleStats then
            wpn.Attachments[i].ToggleNum = net.ReadUInt(8)
        end

        wpn:AddSubSlot(i, att)
    end

    wpn.CertainAboutAtts = true

    postsetup(wpn)
    
end)

net.Receive("arccw_sendattinv", function(len, ply)
    if !IsValid(LocalPlayer()) then return end -- This might be called before we are valid
    LocalPlayer().ArcCW_AttInv = {}

    local count = net.ReadUInt(32)

    for i = 1, count do
        local attid = net.ReadUInt(ArcCW.GetBitNecessity())
        local acount = net.ReadUInt(32)

        local att = ArcCW.AttachmentIDTable[attid]

        LocalPlayer().ArcCW_AttInv[att] = acount
    end

    -- This function will not exist until initialized (by having an ArcCW weapon exist)!
    -- It also obviously needs menu2 open
    if ArcCW.InvHUD_FormAttachmentSelect and IsValid(ArcCW.InvHUD) and IsValid(ArcCW.InvHUD_Menu2) then
        ArcCW.InvHUD_FormAttachmentSelect()
    end
end)

net.Receive("arccw_sendatthp", function(len, ply)
    local wpn = LocalPlayer():GetActiveWeapon()

    while net.ReadBool() do
        local slot = net.ReadUInt(8)
        local hp = net.ReadFloat()

        wpn.Attachments[slot].HP = hp
    end
end)

elseif SERVER then

hook.Add("PlayerDeath", "ArcCW_DeathAttInv", function(ply)
    ply.ArcCW_AttInv = ply.ArcCW_AttInv or {}
    if !table.IsEmpty(ply.ArcCW_AttInv)
            and ArcCW.ConVars["attinv_loseondie"]:GetInt() >= 2
            and !ArcCW.ConVars["attinv_free"]:GetBool() then
        local boxEnt = ents.Create("arccw_att_dropped")
        boxEnt:SetPos(ply:GetPos() + Vector(0, 0, 4))
        boxEnt.GiveAttachments = ply.ArcCW_AttInv
        boxEnt:Spawn()
        boxEnt:SetNWString("boxname", ply:GetName() .. "'s Death Box")
        local count = 0
        for i, v in pairs(boxEnt.GiveAttachments) do count = count + v end
        boxEnt:SetNWInt("boxcount", count)
    end
end)

hook.Add("PlayerSpawn", "ArcCW_SpawnAttInv", function(ply, trans)
    if trans then return end

    if ArcCW.ConVars["attinv_loseondie"]:GetInt() >= 1 then
        ply.ArcCW_AttInv = {}
    end
    local amt = ArcCW.ConVars["attinv_giveonspawn"]:GetInt()
    if amt > 0 then
        local giv = ArcCW:RollRandomAttachments(amt)
        for k, v in pairs(giv) do
            ArcCW:PlayerGiveAtt(ply, k, v)
        end
    end
    ArcCW:PlayerSendAttInv(ply)
end)

net.Receive("arccw_rqwpnnet", function(len, ply)
    local wpn = net.ReadEntity()

    if !wpn.ArcCW then return end

    wpn:RecalcAllBuffs()
    wpn:NetworkWeapon(ply)
end)

net.Receive("arccw_slidepos", function(len, ply)
    local wpn = ply:GetActiveWeapon()

    local slot = net.ReadUInt(8)
    local pos = net.ReadFloat()

    if !wpn.ArcCW then return end

    if !wpn.Attachments[slot] then return end

    wpn.Attachments[slot].SlidePos = pos
end)


net.Receive("arccw_togglenum", function(len, ply)
    local wpn = ply:GetActiveWeapon()

    if !wpn.ArcCW then return end

    if !wpn.Attachments[slot] then return end

    local slot = net.ReadUInt(8)
    local num = net.ReadUInt(8)

    wpn.Attachments[slot].ToggleNum = num

    wpn:AdjustAtts()
    wpn:NetworkWeapon()
    wpn:SetupModel(false)
    wpn:SetupModel(true)
end)


net.Receive("arccw_asktoattach", function(len, ply)
    local wpn = ply:GetActiveWeapon()

    local slot = net.ReadUInt(8)
    local attid = net.ReadUInt(24)

    local att = ArcCW.AttachmentIDTable[attid]

    if !wpn.ArcCW then return end
    if !wpn.Attachments[slot] then return end
    if !att then return end

    wpn:Attach(slot, att)
end)

net.Receive("arccw_asktodetach", function(len, ply)
    local wpn = ply:GetActiveWeapon()
    
    if !wpn.ArcCW then return end
    
    
    local slot = net.ReadUInt(8)
    if !wpn.Attachments[slot] then return end

    wpn:Detach(slot)
end)

net.Receive("arccw_asktodrop", function(len, ply)

    local attid = net.ReadUInt(24)
    local att = ArcCW.AttachmentIDTable[attid]

    if ArcCW.ConVars["attinv_free"]:GetBool() then return end
    if ArcCW.ConVars["attinv_lockmode"]:GetBool() then return end
    if ArcCW.ConVars["enable_customization"]:GetInt() < 0 then return end
    if !ArcCW.ConVars["enable_dropping"]:GetBool() then return end

    if !att then return end

    local atttbl = ArcCW.AttachmentTable[att]

    if !atttbl then return end
    if atttbl.Free then return end
    if ArcCW:PlayerGetAtts(ply, att) < 1 then return end

    -- better to do it like this in case you don't want to generate the attachment entities
    local ent = ents.Create("arccw_att_base")
    if !IsValid(ent) then return end
    ent:SetPos(ply:EyePos() + ply:EyeAngles():Forward() * 32)

    ent:SetNWInt("attid", attid)

    ent.GiveAttachments = {[att] = 1}
    ent.Model = atttbl.DroppedModel or atttbl.Model or "models/Items/BoxSRounds.mdl"
    ent.Icon = atttbl.Icon
    ent.PrintName = atttbl.PrintName or att

    ent:Spawn()
    timer.Simple(0, function()
        local phys = ent:GetPhysicsObject()
        if phys:IsValid() then
            phys:SetVelocity(ply:EyeAngles():Forward() * 32 * math.max(phys:GetMass(), 4))
        end
    end)
    ArcCW:PlayerTakeAtt(ply, att, 1)
    ArcCW:PlayerSendAttInv(ply)
end)

if SERVER then
    net.Receive("arccw_applypreset", function(len, ply)
        local wpn = net.ReadEntity()

        if wpn:GetOwner() != ply or !wpn.ArcCW then return end
        if ply.ArcCW_DisableAutosave or ply.ArcCW_Sandbox_RandomAtts then
            ply.ArcCW_Sandbox_RandomAtts = nil
            return
        end

        for k, v in pairs(wpn.Attachments) do
            wpn:Detach(k, true, true)
        end

        wpn.Attachments.BaseClass = nil -- AGHHHHHHHHHH
        for k, v in SortedPairs(wpn.Attachments) do
            local attid = net.ReadUInt(ArcCW.GetBitNecessity())

            local attname = ArcCW.AttachmentIDTable[attid or 0] or ""
            local atttbl = ArcCW.AttachmentTable[attname]
            if !atttbl then continue end

            wpn:Attach(k, attname, true, true)

            if net.ReadBool() then
                v.SlidePos = net.ReadFloat()
                v.SlidePos = atttbl.MountPositionOverride or v.SlidePos
            else
                v.SlidePos = 0.5
            end

            if atttbl.ToggleStats then
                v.ToggleNum = math.Clamp(net.ReadUInt(8), 1, #atttbl.ToggleStats)
            else
                v.ToggleNum = 1
            end
        end

        wpn:AdjustAtts()
        wpn:RefreshBGs()

        if ply.ArcCW_Sandbox_FirstSpawn then
            -- Curiously, RestoreAmmo has a sync delay only in singleplayer
            ply.ArcCW_Sandbox_FirstSpawn = nil
            wpn:RestoreAmmo()
        end

        wpn:NetworkWeapon()
        wpn:SetupModel(false)
        wpn:SetupModel(true)

        net.Start("arccw_applypreset")
            net.WriteEntity(wpn)
        net.Send(ply)
    end)
else
    net.Receive("arccw_applypreset", function()
        local wpn = net.ReadEntity()
        if !IsValid(wpn) then return end
        wpn:SavePreset("autosave")
    end)
end

function ArcCW:PlayerSendAttInv(ply)
    if ArcCW.ConVars["attinv_free"]:GetBool() then return end

    if !IsValid(ply) then return end

    if !ply.ArcCW_AttInv then return end

    net.Start("arccw_sendattinv")

    net.WriteUInt(table.Count(ply.ArcCW_AttInv), 32)

    for att, count in pairs(ply.ArcCW_AttInv) do
        local atttbl = ArcCW.AttachmentTable[att]
        local attid = atttbl.ID
        net.WriteUInt(attid, ArcCW.GetBitNecessity())
        net.WriteUInt(count, 32)
    end

    net.Send(ply)
end

end

--lua/arccw/shared/attachments/arccw_barrel.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_akimbo_m9.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_akimbo_ranger.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_integrallaser.lua:
att.PrintName = "Hide Laser"
att.Icon = Material("entities/acwatt_mw2_integrallaser.png", "smooth")
att.Description = "What it says on the tin."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = "mw2_hidelaser"
--lua/arccw/shared/attachments/mw2_wepcamo_bushdweller.lua:
att.PrintName = "Bushdweller"
att.Icon = Material("entities/mw2_wepcamo_bushdweller.png", "smooth"
)
att.Description = "Classic woodland camouflage finish.\nUnofficial."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Slot = "mw2_wepcamo"
att.Free = true

att.ActivateElements = {"wepcamo-bushdweller"}

att.SortOrder = 11 *-1
--lua/arccw/shared/attachments/mw2_wepcamo_fall.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_wepcamo_urban.lua:
return gluapack()()
--lua/arccw/shared/attachments/supp_mw2.lua:
att.PrintName = "Newage Silencer"
att.Icon = Material("entities/acwatt_supp_mw2.png", "smooth")
att.Description = "Modern sound suppressor used in modern warfare. Not as quiet or improves performance, but far more ergonomic."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"muzzle","muzzle_shotgun"}

att.Model = "models/weapons/arccw/fesiugmw2/atts/supp_mw2.mdl"

att.Silencer = true
att.Override_MuzzleEffect = "muzzleflash_suppressed"
att.IsMuzzleDevice = false

att.Mult_ShootPitch = 0.9
att.Mult_ShootVol = 0.9
att.Mult_Range = 1.05

att.Mult_HipDispersion = 1.05

att.Add_BarrelLength = 12

att.ModelScale = Vector( 0.5, 0.5, 0.5 )

att.AddSuffix = " Silenced"
--lua/arccw/shared/attachments/uc_40mm_buckshot.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ammo_sg_slug.lua:
att.PrintName = "\"SLUG\" Full-Bore Slug"

att.SortOrder = 1
att.Icon = Material("entities/att/arccw_uc_ammo_shotgun_generic.png", "mips smooth")
att.Description = [[A single heavy projectile, comparable in performance to a high-caliber rifle cartridge at close to medium range.
Applicable in situations that require marksmanship and minimal collateral damage.]]
att.Desc_Pros = {
    "uc.penetration.8"
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
    "uc.oneprojectile"
}
att.Slot = {"ud_ammo_shotgun","uc_ammo"}

att.AutoStats = true

att.Override_Num = 1
att.Override_Num_Priority = 2
att.Mult_Damage = .75
att.Mult_DamageMin = .5
att.Mult_AccuracyMOA = .3
att.Add_Penetration = 8
att.Mult_RangeMin = 2
att.Mult_Range = 2.5
att.Mult_HipDispersion = 2

att.Override_HullSize = 0
att.Override_DamageType = DMG_BULLET

att.Override_UC_ShellColor = Color(0.2 * 255, 0.45 * 255, 0.2 * 255)

att.GivesFlags = {"uc_slug"}

att.Hook_Compatible = function(wep)
    if !wep:GetIsShotgun() or wep:GetBuff_Override("UC_Shotshell")  then
        return false
    end
end
--lua/arccw/shared/attachments/uc_choke_full.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_fg_dualstage.lua:
att.PrintName = "Dual-Stage Trigger"

att.Icon = Material("entities/att/arccw_uc_dualstagetrigger.png", "mips smooth")
att.Description = "A heavy trigger with a semi-automatic middle stage and a fully-automatic end stage. Can shoot semi- and fully- automatically without the need for switching a fire selector."
att.Desc_Pros = {
    "uc.dualstage.pro"
}
att.Desc_Cons = {
    "uc.dualstage.con"
}
att.Desc_Neutrals = {
}
att.Slot = "uc_fg"
att.AutoStats = true

att.Hook_Compatible = function(wep)
    if wep:GetIsManualAction() then
        return false
    end
end
att.SortOrder = 2

att.Hook_Compatible = function(wep)
    if wep:GetIsManualAction() then
        return false
    end
    for i, v in pairs(wep.Firemodes) do
        if !v then continue end
        if v.Mode and v.Mode != 1 and v.Mode != 0 then
            return
        end
    end
    return false
end

--att.Override_ShotRecoilTable = {0.7}

att.Mult_RPM = 1.1
att.Mult_TriggerDelayTime = 0

function att.Hook_ModifyRPM(wep, delay)
    if wep:GetCurrentFiremode().Mode != 1 and (!wep:GetOwner():IsPlayer() or wep:GetOwner():KeyDown(IN_ATTACK))
            and wep:GetBurstCount() == 0 then -- wep:GetState() != ArcCW.STATE_CUSTOMIZE
        return delay + 0.1
    end
end

function att.Hook_Think(wep)
    if wep:GetOwner():IsPlayer() and wep:GetOwner():KeyReleased(IN_ATTACK) and wep:GetBurstCount() == 0 and IsFirstTimePredicted() then
        wep:SetNextPrimaryFire((wep.TriggerDownTime or CurTime()) + wep:GetFiringDelay())
    elseif wep:GetOwner():IsPlayer() and wep:GetOwner():KeyPressed(IN_ATTACK) and wep:GetBurstCount() == 0 and IsFirstTimePredicted() then
        wep.TriggerDownTime = CurTime()
    end
end

att.AttachSound = "arccw_uc/common/gunsmith/internal_modification.ogg"
--lua/arccw/shared/attachments/uc_fg_heavy.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_fg_match_single.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_grip_tdvfg.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_muzzle_supp_ga9.lua:
att.PrintName = "GA9 Revolution 9 Suppressor"
att.AbbrevName = "GA9 Suppressor"
att.Icon = Material("entities/att/acwatt_uc_muzzle_supp_ga9.png", "mips smooth")
att.Description = "Traps propellant gas from the muzzle, reducing visual and audible report.\nCompact and lightweight, with little impact on handling, but still lengthens profile more than other muzzle attachments."
att.Desc_Neutrals = {"uc.exclusive.pistol", "uc.supptail"}

att.AutoStats = true
att.Slot = {"muzzle"}

att.SortOrder = 150

att.Model = "models/weapons/arccw/atts/uc_ga_revolution9.mdl"
att.ModelOffset = Vector(2.6, 0, 0)
att.ModelScale = Vector(1.15, 1.15, 1.15)
att.OffsetAng = Angle(0, 0, 0)

att.Silencer = true
att.Override_MuzzleEffect = "muzzleflash_suppressed"
att.IsMuzzleDevice = true

att.Mult_ShootPitch = 1.1
att.Mult_ShootVol = 0.75
att.Mult_Range = 0.9

att.Add_BarrelLength = 5
att.Mult_SightTime = 1.07
att.Mult_Sway = 1.1

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"

att.Hook_Compatible = function(wep,data)
    if !ArcCW.UC.PistolAmmoTypes[wep:GetBuff_Override("Override_Ammo", wep.Primary.Ammo)] then
        return false
    end
end

att.Hook_GetDistantShootSound = function(wep, distancesound)
    if wep:GetBuff("PhysBulletMuzzleVelocity") < ArcCW.UC.SubsonicThreshold then
        return false
    end
end
--lua/arccw/shared/attachments/uc_muzzle_supp_masada.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_muzzle_supp_tac.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_optic_holosun1.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_optic_holosun2.lua:
att.PrintName = "Holosun HS510C (RDS)"
att.AbbrevName = "Holosun (RDS)"
att.Icon = Material("entities/att/acwatt_uc_optic_holosun2.png", "mips smooth")
att.Description = "Improves sighted visibility with a red-dot targeting reticle, while adding minimal extra weight."

att.SortOrder = 1

att.Desc_Pros = {
    "autostat.holosight",
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"optic","optic_lp"}

att.Model = "models/weapons/arccw/atts/uc_holosun2.mdl"
att.ModelScale = Vector( 1.5, 1.5, 1.5 )
att.ModelOffset = Vector( -0.5, 0, 0 )

att.AdditionalSights = {
    {
        Pos = Vector(0, 9.5, -1.5 + (0.3285 * 1.5)),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        ScrollFunc = ArcCW.SCROLL_NONE
    }
}

att.Holosight = true
att.HolosightReticle = Material("hud/reticles/uc_reddot.png", "mips smooth")
att.HolosightNoFlare = false
att.HolosightSize = 1.5
att.HolosightBone = "holosight"
att.Colorable = true

att.Mult_SightedSpeedMult = .9
--lua/arccw/shared/attachments/uc_powder_high.lua:
att.PrintName = "Increased Load"

att.SortOrder = 19
att.Icon = Material("entities/att/acwatt_uc_powder_high.png", "smooth mips")
att.Description = "Ammunition loaded with a higher amount of powder, slightly increasing ballistic performance."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_powder"

att.AutoStats = true

att.Mult_Recoil = 1.15
att.Mult_Range = 1.2

att.Mult_ShootVol = 1.15
att.Mult_RPM = 1.04
--att.Mult_ShootPitch = 0.95 please don't

att.Mult_MalfunctionMean = 0.85
att.Mult_PhysBulletMuzzleVelocity = 1.1
--lua/arccw/shared/attachments/uc_tac_anpeq16a.lua:
att.PrintName = "Insight Technologies MIPIM AN/PEQ-16A"
att.AbbrevName = "AN/PEQ-16A"
att.Icon = Material("entities/att/acwatt_uc_tac_anpeq16a.png", "mips smooth")
att.Description = "Low-profile flashlight and laser module for rifles. The laser increases accuracy without the use of sights.\nThe laser and flashlight can be toggled individually."
att.Desc_Pros = {
    "uc.light"
}
att.Desc_Cons = {
    "con.light"
}
att.Desc_Neutrals = {}
att.AutoStats = true

att.Slot = {"tac"}
att.SortOrder = 20+4

att.Model = "models/weapons/arccw/atts/uc_anpeq16a.mdl"
att.ModelOffset = Vector(0, 0.1, 0.25)
att.OffsetAng = Angle(0, 0,180)
att.ModelScale = Vector(1.2, 1.2, 1.2)
att.ModelSkin = 1
att.Laser = false
att.LaserStrength = 2 / 5
att.LaserBone = "laser"

att.ColorOptionsTable = {Color(255, 0, 0, 150)}

att.Mult_SightTime = 1.05
att.Mult_SightedSpeedMult = 0.95
att.Mult_MoveSpeed = 1

att.Flashlight = false
att.FlashlightFOV = 50
att.FlashlightFarZ = 512 -- how far it goes
att.FlashlightNearZ = 1 -- how far away it starts
att.FlashlightAttenuationType = ArcCW.FLASH_ATT_LINEAR -- LINEAR, CONSTANT, QUADRATIC are available
att.FlashlightColor = Color(255, 235, 229)
att.FlashlightTexture = "effects/flashlight001"
att.FlashlightBrightness = 2
att.FlashlightBone = "laser"

att.ToggleStats = {
    {
        PrintName = "Laser",
        Laser = true,
        Mult_HipDispersion = 0.8,
        Mult_MoveDispersion = 0.8
    },
    {
        PrintName = "Both",
        Laser = true,
        Flashlight = true,
        Mult_HipDispersion = 0.8,
        Mult_MoveDispersion = 0.8
    },
    {
        PrintName = "Light",
        Flashlight = true,
    },
    {
        PrintName = "Off",
    }
}
--lua/arccw/shared/attachments/uc_tac_anpeq16a_tan.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tac_flashlight1.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tp_gong.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tp_strafe.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tp_technician.lua:
att.PrintName = "Technician"

att.Icon = Material("entities/att/arccw_uc_tp_technician.png", "smooth mips")
att.Description = "Life around this particular firearm has given you a solid understanding of its mechanism. When it malfunctions, you can clear the jam with enough speed to stay in the fight."
att.Desc_Pros = {
    "uc.technician"
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_tp"

att.AutoStats = true
att.SortOrder = 1.5

att.Mult_MalfunctionFixTime = .65

att.Ignore = true -- MalfunctionFixTime currently only works visually (8z fix pls)

att.NotForNPCs = true
--lua/arccw/shared/attachments/uc_ubgl_hk79.lua:
att.PrintName = "HK79 Underbarrel Grenade Launcher"
att.AbbrevName = "HK79 Grenade Launcher"
att.Icon = Material("entities/att/acwatt_uc_ubgl_hk79.png", "mips smooth")
att.Description = "Single-shot long-barreled underbarrel grenade launcher designed for the G3. The trigger is on the side, and the barrel release is on the bottom. Fires specialized 40x46mm grenade types."
att.Ignore = true

att.SortOrder = -100000

att.AutoStats = true
att.Desc_Pros = {
}
att.Slot = "uc_ubgl"
att.ExcludeFlags = {"uc_noubgl"}

att.LHIK = true

att.ModelOffset = Vector(3.2, 0, -1.5)
att.Model = "models/weapons/arccw/atts/uc_ubgl_hk79_3.mdl"

att.SelectUBGLSound =  ""
att.ExitUBGLSound = ""

att.UBGL = true

att.UBGL_PrintName = "UBGL"
att.UBGL_Automatic = false
att.UBGL_MuzzleEffect = "muzzleflash_m79"
att.UBGL_Ammo = "smg1_grenade"
att.UBGL_RPM = 120
att.UBGL_Recoil = 2
att.UBGL_Capacity = 1

att.LHIK_GunDriver = 2
att.LHIK_CamDriver = 3

local pretty = GetConVar("arccw_uc_infiniteubwammo")

att.Hook_ModifyAttBodygroups = function(wep, data)
    if wep:GetBuff_Override("UC_UseClassicHK79Mount") then
        data.element.Model:SetBodygroup(1, 1)
    end
end

local function Ammo(wep)
    return (pretty:GetBool() and 9999 or wep:GetOwner():GetAmmoCount("smg1_grenade"))
end

att.Hook_LHIK_TranslateAnimation = function(wep, key)
    if key == "idle" then
        if wep:GetInUBGL() then
            return "idle_armed"
        else
            return "idle"
        end
    end
end

att.Hook_ShouldNotSight = function(wep)
    if wep:GetInUBGL() then
        return true
    end
end

att.Hook_OnSelectUBGL = function(wep)
    wep:SetNextSecondaryFire(CurTime() + 0.7)
    if (game.SinglePlayer() and SERVER) or (!game.SinglePlayer() and CLIENT and IsFirstTimePredicted()) then
        wep:DoLHIKAnimation("to_armed", 0.7)
        wep:PlaySoundTable({
            {s = "arccw_uc/common/rattle_b2i_rifle.ogg", t = 0},
            {s = "arccw_uc/common/raise.ogg", t = 0.2},
            {s = "arccw_uc/common/grab.ogg", t = 0.5},
        })
    end
end

att.Hook_OnDeselectUBGL = function(wep)
    wep:SetNextSecondaryFire(CurTime() + 0.7)
    if (game.SinglePlayer() and SERVER) or (!game.SinglePlayer() and CLIENT and IsFirstTimePredicted()) then
        wep:DoLHIKAnimation("to_idle", 0.7)
        wep:PlaySoundTable({
            {s = "arccw_uc/common/rattle_b2i_rifle.ogg", t = 0},
            {s = "arccw_uc/common/shoulder.ogg", t = 0.4},
        })
    end
end

att.UBGL_Fire = function(wep, ubgl)
    if wep:Clip2() <= 0 then return end

    local owner = wep:GetOwner()
    local class = wep:GetBuff_Override("UBGL_Entity") or "arccw_uc_40mm_hv"

    local vel, dmg = 2500, 130

    -- hacky
    if class == "arccw_uc_40mm_hv" then
        vel = vel * 2
        dmg = dmg * 0.85
    elseif class == "arccw_uc_40mm_dp" then
        dmg = dmg * 0.6
    elseif class == "arccw_uc_40mm_airburst" then
        vel = vel * 0.75
    end

    local proj = wep:FireRocket(class, vel)
    if SERVER then
        proj.Damage = dmg -- lower than the m79 (200) for balance reasons
    end
    wep:MyEmitSound(")^/arccw_uc/common/40mm/fire-0" .. math.random(1, 6) .. ".ogg", 100, 100, 1, CHAN_WEAPON)
    wep:MyEmitSound(")^/arccw_uc/common/40mm/fire-dist-0" .. math.random(1, 6) .. ".ogg", 149, 100, 0.5, CHAN_BODY)
    wep:MyEmitSound(")^/arccw_uc/common/40mm/mech-0" .. math.random(1, 6) .. ".ogg", 149, 100, 0.5, CHAN_AUTO)

    if game.SinglePlayer() and SERVER or (!game.SinglePlayer() and CLIENT and IsFirstTimePredicted()) then
        wep:DoEffects()
        wep:DoLHIKAnimation("fire")
    end
    wep:SetClip2(wep:Clip2() - 1)
    wep:DoEffects()
end

att.UBGL_Reload = function(wep, ubgl)
    if wep:Clip2() >= 1 then return end
    if Ammo(wep) <= 0 then return end

    wep:SetNextSecondaryFire(CurTime() + 3)

    local holy = (game.SinglePlayer() and SERVER) or (!game.SinglePlayer() and CLIENT and IsFirstTimePredicted())
    if holy then
        wep:DoLHIKAnimation("reload", 3)
        wep:PlaySoundTable({
            {s = { "arccw_uc/common/rattle1.ogg", "arccw_uc/common/rattle2.ogg", "arccw_uc/common/rattle3.ogg" }, t = 0},
            {s = "arccw_uc/common/40mm/203open.ogg", t = 0.2},
            {s = "arccw_uc/common/magpouch_replace_small.ogg", t = 0.9},
            {s = "arccw_uc/common/40mm/203insert.ogg", t = 1.7},
            {s = "arccw_uc/common/shoulder.ogg", t = 2.0},
            {s = "arccw_uc/common/40mm/203close.ogg", t = 2.2},
            {s = "arccw_uc/common/shoulder.ogg", t = 2.7},
        })
    end

    local reserve = Ammo(wep)
    reserve = reserve + wep:Clip2()
    local clip = 1
    local load = math.Clamp(clip, 0, reserve)
    if (!pretty:GetBool()) then
        wep:GetOwner():RemoveAmmo(1, "smg1_grenade")
    end
    wep:SetClip2(load)
end

att.Mult_SightTime = 1.2
att.Mult_SpeedMult = 0.9
att.Mult_SightedSpeedMult = 0.85

att.ToggleLockDefault = true
att.ToggleStats = {
    {
        PrintName = "High Velocity",
        UBGL_Entity = "arccw_uc_40mm_hv"
    },
    {
        PrintName = "Dual Purpose",
        UBGL_Entity = "arccw_uc_40mm_dp"
    },
    {
        PrintName = "Airburst",
        UBGL_Entity = "arccw_uc_40mm_airburst"
    },
}
--lua/arccw/shared/attachments/uc_usp_slide_compact.lua:
att.PrintName = "4\" CP93 Compact Slide"
att.AbbrevName = "4\" Compact Slide"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "4\" USPCT Compact Slide"
end

att.Icon = Material("entities/att/acwatt_uc_usp_slide_compact.png", "smooth mips")
att.Description = "A shortened slide reduces the amount of holster to clear and further improves agility to the detriment of long-range performance and recoil control."
att.Desc_Pros = {
}
att.Desc_Cons = {
    --"uc.noubs"
}
att.Desc_Neutrals = {
}
att.Slot = "uc_usp_slide"
att.SortOrder = 4

att.AutoStats = true

att.Mult_DrawTime = 0.85
att.Mult_HolsterTime = 0.85
att.Add_BarrelLength = -1

att.Mult_Sway = 0.75
att.Mult_HipDispersion = 0.85
att.Mult_SightTime = 0.85

att.Mult_AccuracyMOA = 1.5
att.Mult_Range = 0.8
att.Mult_Recoil = 1.2

--lua/arccw/shared/attachments/uc_usp_slide_ext.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_usp_slide_match.lua:
att.PrintName = "7\" P93 Match Slide"
att.AbbrevName = "7\" Match Slide"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "7\" USP Match Slide"
end

att.Icon = Material("entities/att/acwatt_uc_usp_slide_match.png", "smooth mips")
att.Description = "Competition slide with a large barrel weight affixed to the end. This counterweight reduces recoil significantly, but leaves little room for further customization.\n\nA popular choice for free men."
att.Desc_Cons = {
    "uc.nomuzzle",
    "uc.noubs"
}
att.AutoStats = true 
att.SortOrder = 7

att.Hook_SelectFireAnimation = function(wep, anim)
    return anim .. "_match"
end

att.Slot = "uc_usp_slide"

att.Mult_Recoil = .7

att.Mult_SightTime = 1.4
att.Add_BarrelLength = 4

att.GivesFlags = {"usp_match","usp_freeman_2"}
--lua/arccw/shared/attachments/ud_870_barrel_long.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_caliber_357sig.lua:
att.PrintName = "Glock .357 SIG Conversion"
att.AbbrevName = ".357 SIG"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "GEN3 .357 SIG Conversion"
end

att.SortOrder = 90
att.Icon = Material("entities/att/uc_bullets/357sig.png", "smooth mips")
att.Description = "A law-enforcement caliber well-known for its accuracy."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_glock_caliber"

att.AutoStats = true

att.Override_Trivia_Calibre = ".357 SIG"

att.Mult_Damage = ArcCW.UC.CalConv("9mm", "357sig", "max")
att.Mult_DamageMin = ArcCW.UC.CalConv("9mm", "357sig", "min")
att.Mult_Penetration = ArcCW.UC.CalConv("9mm", "357sig", "pen")

att.Mult_AccuracyMOA = 0.5
att.Mult_Recoil = 1.15

att.Override_PhysBulletMuzzleVelocity = 410

att.Mult_ClipSize = 0.9
att.Override_ShellModel = "models/weapons/arccw/uc_shells/357sig.mdl"
att.Override_ShellScale = 1

local path = ")weapons/arccw_ud/glock/"
local common = ")/arccw_uc/common/"
local tail = common .. "357sig/"
local fire357 = {path .. "fire-357-01.ogg",path .. "fire-357-02.ogg",path .. "fire-357-03.ogg",path .. "fire-357-04.ogg",path .. "fire-357-05.ogg",path .. "fire-357-06.ogg"}
local fire357sup = {path .. "fire-sup-01.ogg",path .. "fire-sup-02.ogg",path .. "fire-sup-03.ogg",path .. "fire-sup-04.ogg",path .. "fire-sup-05.ogg",path .. "fire-sup-06.ogg"} -- Placeholder
local fire357dist = {tail .. "fire-dist-357sig-pistol-ext-01.ogg",tail .. "fire-dist-357sig-pistol-ext-02.ogg",tail .. "fire-dist-357sig-pistol-ext-03.ogg",tail .. "fire-dist-357sig-pistol-ext-04.ogg",tail .. "fire-dist-357sig-pistol-ext-05.ogg",tail .. "fire-dist-357sig-pistol-ext-06.ogg"}

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return fire357sup
    else
        return fire357
    end
end


att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire357dist
    end
end

att.Hook_GetDistantShootSoundIndoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        -- fallback to script
    end
end
--lua/arccw/shared/attachments/ud_m1014_barrel_sport.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m1014_stock_buffer.lua:
att.PrintName = "Buffer Tube"
att.Icon = Material("entities/att/acwatt_ud_m1014_stock_buffer.png", "smooth mips")
att.Description = "Stocks are overrated."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_1014_stock"

att.AutoStats = true
att.Free = true
att.SortOrder = -1

att.Mult_SpeedMult = 1.05

att.Mult_SightTime = 0.5
att.Mult_DrawTime = 0.75
att.Mult_HolsterTime = 0.75

att.Mult_Recoil = 1.35
att.Mult_RecoilSide = 2

att.Mult_SightedSpeedMult = 1.2
att.Mult_ShootSpeedMult = 1.15

att.Add_BarrelLength = -12
att.Mult_Sway = 3

att.ActivateElements = {"ud_autoshotgun_stock_buffer"}

att.Override_HoldtypeActive = "shotgun"
att.Override_HoldtypeSights = "ar2"
--lua/arccw/shared/attachments/ud_m16_barrel_14in.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_hg_adar.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_hg_ru556.lua:
att.PrintName = "RU556 Handguard"

att.Icon = Material("entities/att/acwatt_ud_m16_hg_ru556.png", "smooth mips")
att.Description = "Short handguard from the RU556 line of RAYCAR accessories, featuring a unique barrel shroud. The thin aluminum frame has extremely low weight."

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "M-LOK Handguard"
    att.Description = "Short handguard from the M-LOK line of AR-15 accessories, featuring a unique barrel shroud. The thin aluminum frame has extremely low weight."
end

att.Desc_Neutrals = {
    "ud.m16.allowfs",
}

att.Slot = "ud_m16_hg"
att.AutoStats = true

att.Mult_Sway = .8
att.Mult_SpeedMult = 1.05
att.Mult_SightedSpeedMult = 1.2
att.Mult_HipDispersion = 1.1
att.Mult_Recoil = 1.175

att.LHIK = true
att.Model = "models/weapons/arccw/atts/ru556_lhik.mdl"
att.DroppedModel = "models/items/boxsrounds.mdl"
att.ModelOffset = (Vector(0.41, 0, -2.8) - Vector(11.5, 2.8, -4.2))
att.OffsetAng = Angle( 0, 5, 0 )

att.GivesFlags = {"ud_m16_rscompatible"}
att.ActivateElements = {"hg_ru556"}
--lua/arccw/shared/attachments/ud_m16_hg_tactical.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_receiver_300blk.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_rs.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_rs_3d.lua:
att.PrintName = "3D Rear Sight"
att.Icon = Material("entities/att/acwatt_ud_m16_rs_3d.png", "smooth mips")
att.Description = "A 3D-printed rear sight for flat top receivers. You probably want a top rail to mount the matching front sight as well."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {
    "uc.cosmetic"
}
att.Slot = "ud_m16_rs"

att.ActivateElements = {"ud_m16_upper_flat"}
att.GivesFlags = {"ud_m16_not_retro"}
att.ExcludeFlags = {"ud_m16_retro"}
--att.HideIfBlocked = true

att.SortOrder = 1000
att.Free = true
att.IgnorePickX = true

att.MountPositionOverride = 0.5
att.IronSight = true
att.Override_IronSightStruct = {
    Pos = Vector(-2.80, 0, 2.2),
    Ang = Angle(1.05, 0, 0),
    Magnification = 1.1
}
att.Model = "models/weapons/arccw/atts/3d_rs.mdl"
att.ModelOffset = Vector(-2, -0.002, 0)
att.ModelScale = Vector(.86, .86, .86)

att.HideIfBlocked = true
--lua/arccw/shared/attachments/ud_m16_stock_607.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_mini14_receiver_762.lua:
att.PrintName = "Mini-30 7.62x39mm Receiver"
att.AbbrevName = "7.62x39mm Receiver"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Patriot 816 7.62x39mm Receiver"
end

att.SortOrder = 30
att.Icon = Material("entities/att/uc_bullets/762x39.png", "smooth mips")
att.Description = "A curious yet offically produced receiver variant made to circumvent caliber restrictions in deer hunting. The high pressure of this round makes this model liable to feeding failures."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.jam"
}
att.Desc_Neutrals = {
}
att.Slot = "ud_mini14_receiver"

att.AutoStats = true

att.Mult_ReloadTime = 1.15
att.Mult_ShootSpeedMult = 0.8
att.Mult_RPM = 360 / 540

att.Mult_Recoil = 1.25
att.Mult_RecoilSide = 1.5
att.Mult_HipDispersion = 1.5

att.Mult_Damage = ArcCW.UC.CalConv("556", "762_39", "max")
att.Mult_DamageMin = ArcCW.UC.CalConv("556", "762_39", "min")
att.Mult_Penetration = ArcCW.UC.CalConv("556", "762_39", "pen")
att.Mult_Range = 2

att.Override_Malfunction = true
att.Mult_MalfunctionVariance = 1.5

att.Override_Ammo = "ar2"
att.Override_Trivia_Calibre = "7.62x39mm Soviet"
att.Override_ShellModel = "models/weapons/arccw/uc_shells/762x39.mdl"
att.Override_ShellScale = 0.666

att.ActivateElements = {"ud_mini14_receiver_762"}
att.GivesFlags = {"mini14_762"}

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return "weapons/arccw_ud/mini14/fire_762_supp.ogg" -- Not Placeholder
    else
        return "weapons/arccw_ud/mini14/fire_762.ogg" -- Not Placeholder
    end
end

local tail = ")/arccw_uc/common/762x39/"

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return {
            tail .. "fire-dist-762x39-rif-ext-01.ogg",
            tail .. "fire-dist-762x39-rif-ext-02.ogg",
            tail .. "fire-dist-762x39-rif-ext-03.ogg",
            tail .. "fire-dist-762x39-rif-ext-04.ogg",
            tail .. "fire-dist-762x39-rif-ext-05.ogg",
            tail .. "fire-dist-762x39-rif-ext-06.ogg"
        }
    end
end
--lua/arccw/shared/attachments/ud_uzi_body_micro.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_uzi_cal_45.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_1911_mag_ext.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_1911_mag_ext.lua:
att.PrintName = "AMAS 11-Round Extended Magazine"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "M1911 11-Round Extended Magazine"
end
att.AbbrevName = "11-Round Extended Mag"
att.Icon = Material("entities/att/ur_1911/mag11.png","mips smooth")
att.Description = "A higher capacity magazine increases the time you can spend without reloading."
att.Slot = "ur_m1911_mag"
att.AutoStats = true

att.Override_ClipSize = 11
att.Mult_SightTime = 1.1
att.Mult_ReloadTime = 1.15
att.Mult_Sway = 1.25
att.Mult_SpeedMult = 0.98
att.Mult_ShootSpeedMult = 0.95

att.Mult_HipDispersion = 1.25

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_10"
end
--lua/arccw/shared/attachments/ur_1911_skin_silver.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_barrel_rpk.lua:
att.PrintName = "RPK 23\" SAW Barrel"
att.AbbrevName = "23\" SAW Barrel"
att.Icon = Material("entities/att/ur_ak/barrel/rpk.png", "mips smooth")
att.Description = "Light machine gun barrel as used on the RPK. In addition to improved precision from the elongated barrel, it features an integrated bipod which can be deployed for even greater accuracy and control.\nVery front-heavy due to the long, more massive barrel."
att.Slot = {"ur_ak_barrel"}
att.AutoStats = true

att.SortOrder = 23

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "PKF-67 23\" SAW Barrel"
end

att.Add_BarrelLength = 5
att.Mult_SightTime = 1.2
att.Mult_SpeedMult = .95
att.Mult_SightedSpeedMult = 0.8
att.Mult_Sway = 1.5

att.Mult_Recoil = .8
att.Mult_AccuracyMOA = .7
att.Mult_Range = 1.5
att.Mult_MalfunctionMean = 2
att.Mult_HipDispersion = 1.5

att.Bipod = true
att.Mult_BipodRecoil = .25
att.Mult_BipodDispersion = .2

att.ActivateElements = {"barrel_rpk"}
att.GivesFlags = {"ak_barrelchange", "uc_noubgl"}
--lua/arccw/shared/attachments/ur_ak_barrel_t56.lua:
att.PrintName = "Type 56 16\" Bayonet Barrel"
att.AbbrevName = "16\" Bayonet Barrel"
att.Icon = Material("entities/att/ur_ak/barrel/type.png", "mips smooth")
att.Description = "Chinese derivative barrel with a fully hooded front sight and a folding spike bayonet. When unfolded, the bayonet increases melee damage substantially, but adds some forward weight."
att.Slot = {"ur_ak_barrel"}
att.AutoStats = true

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Yucha 7 16\" Bayonet Barrel" -- Chinese for harpoon
end

att.SortOrder = 16

att.Mult_SightedSpeedMult = .95

--att.ToggleLockDefault = true
att.ToggleStats = {
    {
        PrintName = "Extended",
        ActivateElements = {"barrel_t56_ext"},
        AutoStats = true,
        Add_MeleeRange = 16,
        Mult_MeleeDamage = 3,
        Mult_MeleeWaitTime = 2,
        Add_BarrelLength = 10,
        Mult_Sway = 1.2,
        -- Override_BashPreparePos = Vector(4, -5, -1.8),
        -- Override_BashPrepareAng = Angle(-15, -5, -5),
        -- Override_BashPos = Vector(-1, 12, 4.5), -- i'm too impatient to not make this bat you in the face with the stock
        -- Override_BashAng = Angle(-7, 3, 25),
        Hook_SelectBashAnim = function(wep,anim)
            return "bash_bayonet"
        end
    },
    {
        PrintName = "Folded",
        AutoStats = true,
        ActivateElements = {"barrel_t56"},
    },
}

att.GivesFlags = {"ak_bayonet1"}
att.ExcludeFlags = {"ak_bayonet2"}
--lua/arccw/shared/attachments/ur_ak_hg_rpk74m.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_muzzle_ak74.lua:
att.PrintName = "Kalashnikov Compensator"

att.Icon = Material("entities/att/ur_ak/muzzle_74m.png", "mips smooth")
att.Description = "External compensator used since the '70s for AKs of multiple calibers. Efficiently reduces horizontal recoil and marginally reduces vertical recoil at the cost of a frontal counterweight that will inevitably raise swaying."
att.AutoStats = true
att.Slot = {"ur_ak_muzzle"}

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Vladimir Compensator"
    att.Description = string.Replace(att.Description,"AKs","AVRs") -- so we don't have to change the desc twice
end

att.Mult_Recoil = .95
att.Mult_RecoilSide = .65

att.Add_BarrelLength = 2.5
att.Mult_SightTime = 1.05
att.Mult_Sway = 1.25

att.SortOrder = 999

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"
att.ActivateElements = {"muzzle_ak74"}
att.ExcludeFlags = {"ak_barrelchange"}

att.Ignore = true
--lua/arccw/shared/attachments/ur_ak_stock_aks.lua:
att.PrintName = "AK Sidefolding Stock"
att.AbbrevName = "Sidefolding Stock"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "KF Sidefolding Stock"
end
att.Icon = Material("entities/att/ur_ak/stock/fold.png", "mips smooth")
att.Description = [[Side-folding stock found since the 74 series' debut. The triangular structure reduces its compromise on stability, but it is still less effective than a fixed stock. Folding the stock provides massively boosted maneuverability at the cost of severe recoil.

Toggling this stock modifies performance accordingly.]]
att.AutoStats = true
att.Slot = {"ur_ak_stock"}

att.SortOrder = 1

att.ToggleLockDefault = true
att.ToggleSound = "arccw_uc/common/stockslide.ogg"
att.ExcludeFlags = {"mag_drum"}
att.ToggleStats = {
    {
        PrintName = "Extended",
        Mult_SightTime = .8,
        Mult_RecoilSide = 1.25,
        Mult_Sway = 1.2,
        Mult_SightedSpeedMult = 1.05,
        ActivateElements = {"stock_aks"},
        AutoStats = true,
    },
    {
        PrintName = "Folded",
        Mult_SightTime = 0.6,
        Mult_DrawTime = 0.85,
        Mult_HolsterTime = 0.85,
        Mult_Recoil = 1.5,
        Mult_RecoilSide = 2,
        Mult_SightedSpeedMult = 1.2,
        Mult_ShootSpeedMult = 1.15,
        Add_BarrelLength = -9,
        Mult_Sway = 3,
        ActivateElements = {"stock_aks_folded"},
        AutoStats = true,
    }
}
--lua/arccw/shared/attachments/ur_ak_stock_alpha.lua:
att.PrintName = "AK SOPMOD Stock"
att.AbbrevName = "Carbine Stock"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "KF SOPMOD Stock"
end
att.Icon = Material("entities/att/ur_ak/stock/helix.png", "mips smooth")
att.Description = "US-made lightweight stock that mounts on an AR buffer tube. More maneuverable than the solid wood stock."
att.Slot = {"ur_ak_stock"}
att.AutoStats = true

att.SortOrder = 2

att.Mult_ShootSpeedMult = 1.1
att.Mult_SightedSpeedMult = 1.15
att.Mult_RecoilSide = 1.5
att.Mult_Sway = 1.25
att.Add_BarrelLength = -2

att.ActivateElements = {"stock_alpha"}
--lua/arccw/shared/attachments/ur_ak_stock_vepr.lua:
att.PrintName = "AK Thumbhole Stock"
att.AbbrevName = "Thumbhole Stock"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "KF Thumbhole Stock"
end
att.Icon = Material("entities/att/ur_ak/stock/vepr.png", "mips smooth")
att.Description = "Marksman stock with integrated grip. The thumbhole design provides unparalleled stability."
att.Slot = {"ur_ak_stock"}
att.AutoStats = true
att.Desc_Cons = {
    "uc.nogrip"
}

att.SortOrder = 3

att.Mult_Recoil = 0.85
att.Mult_Sway = 0.5
att.Mult_SightTime = 1.15
att.Mult_SpeedMult = 0.95
att.Mult_SightedSpeedMult = 0.8

att.ActivateElements = {"stock_vepr"}
att.GivesFlags = {"stock_vepr"}
--lua/arccw/shared/attachments/ur_aw_muzzle_brake.lua:
att.PrintName = "AI Muzzle Brake"
att.Icon = Material("entities/att/ur_aw/muzzle.png", "mips smooth")
att.Description = "Light muzzle brake unique to the AW platform."
att.AutoStats = true
att.Slot = {"ur_aw_muzzle"}

att.Mult_Recoil = .9
att.Mult_RecoilSide = .9

att.Add_BarrelLength = 2
att.Mult_SightTime = 1.05
att.Mult_Sway = 1.05

att.SortOrder = 999

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"
att.Model = "models/weapons/arccw/ur_aw_muzzle.mdl"
att.ModelScale = Vector(2/3,2/3,2/3)
att.ModelOffset = Vector(0,0,-.075)
--lua/arccw/shared/attachments/ur_aw_stock_at.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_dbs_barrel_sawedoffplus.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_deagle_barrel_compact.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_deagle_barrel_compact.lua:
att.PrintName = "5.5\" Desert Eagle Compact Barrel"
att.AbbrevName = "5.5\" Compact Barrel"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "5.5\" Predator Compact Barrel"
end
att.Icon = Material("entities/att/acwatt_ur_deagle_barrel_compact.png","smooth mips")
att.Description = "Aftermarket reduced barrel that enhances concealability and ergonomics at the cost of ranged performance."
att.Slot = "ur_deagle_barrel"
att.AutoStats = true
att.SortOrder = 5.5

att.Mult_AccuracyMOA = 1.25
att.Mult_Range = 0.9
att.Mult_SightTime = 0.9
att.Mult_Sway = 0.8
att.Add_BarrelLength = -2
att.Mult_HipDispersion = 0.95

att.Mult_DrawTime = 0.9
att.Mult_HolsterTime = 0.9

att.ActivateElements = {"ur_deagle_barrel_compact"}
--lua/arccw/shared/attachments/ur_deagle_barrel_modern.lua:
att.PrintName = "6\" Desert Eagle Mark XIX Barrel"
att.AbbrevName = "6\" Modern Barrel"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "6\" Predator Modern Barrel"
end
att.Icon = Material("entities/att/acwatt_ur_deagle_barrel_modern.png","smooth mips")
att.Description = "Variation of the factory barrel with a built-in Weaver attachment mount."
att.Slot = "ur_deagle_barrel"
att.Desc_Neutrals = {"uc.cosmetic"}
att.SortOrder = 5.5

--att.ActivateElements = {"ur_deagle_barrel_modern", "tac_rail"}
--lua/arccw/shared/attachments/ur_deagle_skin_black.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_deagle_skin_chrome.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_deagle_tritium.lua:
att.PrintName = "Tritium Night Sights"
att.AbbrevName = "Tritium Sights"
att.Icon = Material("entities/att/acwatt_ur_deagle_tritium.png", "mips smooth")
att.Description = "A set of luminescent iron sights for use in low-lit conditions."
att.Slot = "ur_deagle_tritium"
att.Desc_Neutrals = {
    "uc.cosmetic"
}
att.SortOrder = 999

att.ActivateElements = {"ur_deagle_tritium"}
--lua/arccw/shared/attachments/ur_g3_mag_50.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_rec_hk33.lua:
att.PrintName = "HK33 5.56x45mm Receiver"
att.AbbrevName = "HK33 5.56 Receiver"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "CN66 5.56x45mm Receiver"
    att.AbbrevName = "CN66 5.56 Receiver"
end

att.Description = "Receiver and barrel group that accepts an intermediate cartridge, changing the weapon into an assault rifle."
att.Icon = Material("entities/att/ur_g3/rec_33.png","smooth mips")
att.Slot = "ur_g3_rec"
att.AutoStats = true

att.SortOrder = 12


att.Override_ClipSize = 30

att.Override_Ammo = "smg1"
att.Override_Trivia_Calibre = "5.56x45mm NATO"
att.Override_Trivia_Class = "Assault Rifle"

att.Mult_RPM = 650 / 520 -- 650 rpm
att.Mult_SightedSpeedMult = 1.05
att.Mult_ReloadTime = .95
att.Mult_Recoil = 0.45
att.Mult_HipDispersion = .75

att.Mult_Penetration = 14 / 20
att.Mult_DamageMin = 20 / 35
att.Mult_Damage = 34 / 65
att.ShootPitchVariation = 1
att.Override_ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
att.Override_ShellScale = 1

att.GivesFlags = {"cal_556"}

att.Override_Firemodes_Priority = 0.5
att.Override_Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

local path = ")weapons/arccw_ur/g3/"
local path1 = ")weapons/arccw_ur/ak/556/"

local fire556 = {path .. "fire-556-01.ogg",path .. "fire-556-02.ogg",path .. "fire-556-03.ogg",path .. "fire-556-04.ogg",path .. "fire-556-05.ogg",path .. "fire-556-06.ogg"}
local fire556sup = {path1 .. "fire-sup-01.ogg",path1 .. "fire-sup-02.ogg",path1 .. "fire-sup-03.ogg",path1 .. "fire-sup-04.ogg",path1 .. "fire-sup-05.ogg",path1 .. "fire-sup-06.ogg"}

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return fire556sup
    else
        return fire556
    end
end

local tail = ")/arccw_uc/common/556x45/"
local fire556dist = {tail .. "fire-dist-556x45-rif-ext-01.ogg", tail .. "fire-dist-556x45-rif-ext-02.ogg", tail .. "fire-dist-556x45-rif-ext-03.ogg", tail .. "fire-dist-556x45-rif-ext-04.ogg", tail .. "fire-dist-556x45-rif-ext-05.ogg", tail .. "fire-dist-556x45-rif-ext-06.ogg"}
local common = ")/arccw_uc/common/"

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire556dist
    end
end


local slotinfo = {
    [9] = {"30-Round 5.56 Mag", "30-Round 5.56 Mag", Material("entities/att/ur_g3/mag556_30.png", "mips smooth")},
}

att.Hook_GetDefaultAttName = function(wep, slot)
    if slotinfo[slot] then
        return GetConVar("arccw_truenames"):GetBool() and slotinfo[slot][2] or slotinfo[slot][1]
    end
end
att.Hook_GetDefaultAttIcon = function(wep, slot)
    if slotinfo[slot] then
        return slotinfo[slot][3]
    end
end


-- att.Hook_SelectReloadAnimation = function(wep, anim)
--     return anim .. "_30rnd"
-- end
--lua/arccw/shared/attachments/ur_g3_skin_olive.lua:
att.PrintName = "G3 Olive Drab Furniture"
att.AbbrevName = "Olive"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "G58 Olive Drab Furniture"
end

att.Description = "Olive drab furniture; less official but more iconic."
att.Icon = Material("entities/att/ur_g3/skin_oliva.png","smooth mips")
att.Slot = "ur_g3_skin"
att.Desc_Neutrals = {
    "uc.cosmetic",
}
att.SortOrder = 1

att.IgnorePickX = true
--lua/arccw/shared/attachments/ur_g3_stock_psg.lua:
att.PrintName = "PSG-1 Sniper Stock" 
att.AbbrevName = "Sniper Stock"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "PMR-2 Sniper Stock"
end

att.Icon = Material("entities/att/ur_g3/stock_psg.png","smooth mips")
att.Description = [[Heavy-duty marksman stock made for the sniper variant of the rifle. Cumbersome, but very comfortable to shoot with.]]
att.AutoStats = true
att.Slot = {"ur_g3_stock"}

att.SortOrder = 11

att.Mult_Recoil = 0.85
att.Mult_Sway = .6

att.Mult_SightTime = 1.1
att.Mult_SpeedMult = 0.8
--lua/arccw/shared/attachments/ur_mp5_stock_future.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_mp5_stock_ump.lua:
att.PrintName = "UMP Style B&T Folding Stock"
att.AbbrevName = "B&T Folding Stock"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "umpa Folding Stock"
end

att.Icon = Material("entities/att/ur_mp5/stock_ump.png", "smooth mips")
att.Description = "Folding stock derived from a later submachine gun pattern by the same manufacturer. Its wide buttpad reduces horizontal recoil at the cost of mobility and aim speed. \n\nToggling the stock modifies performance accordingly."
att.AutoStats = true
att.Slot = "ur_mp5_stock"

att.ToggleLockDefault = true
att.ToggleSound = "arccw_uc/common/stockslide.ogg"

att.Mult_DrawTime = 1.1
att.Mult_HolsterTime = 1.1
att.Mult_SightedSpeedMult = 0.85
att.Mult_ShootSpeedMult = 0.85
att.Mult_Recoil = 0.9

att.ToggleStats = {
    {
        PrintName = "Extended",
        ActivateElements = {"stock_ump"},
        AutoStats = true,
        Mult_HipDispersion = .75,
    },
    {
        PrintName = "Folded",
        ActivateElements = {"stock_ump_folded"},
        AutoStats = true,
        Add_BarrelLength = -12,
        Mult_Sway = 3,
    }
}

--lua/arccw/shared/attachments/ur_mp5_ub_mlok.lua:
att.PrintName = "MP5 M-LOK Handguard"
att.AbbrevName = "M-LOK Handguard"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "PK5 M-LOK Handguard"
end

att.Icon = Material("entities/att/ur_mp5/hg_moe.png", "smooth mips")
att.Description = "American aftermarket handguard. Lighter than the basic, polymer handguard it replaces, improving handling, but somewhat unwieldy."
att.AutoStats = true

att.Slot = {"ur_mp5_hg","ur_g3_handguard"}

att.SortOrder = 1

att.Mult_SightTime = .90
att.Mult_Recoil = 1.15
att.Mult_Sway = 1.25

att.ActivateElements = {"ur_mp5_ub_kurzmlok"}
att.ExcludeFlags = {"g3_not8"}
--att.RequireFlags = {"mp5_kurz"}

att.HideIfBlocked = true
--lua/arccw/shared/attachments/ur_mp5_ub_surefire.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_mp5_ub_surefire_mlok.lua:
att.PrintName = "Sherlock Handguard"

att.Icon = Material("entities/att/ur_mp5/hg_flash_mlok.png", "smooth mips")
att.Description = "Alternative handguard with an integrated flashlight and M-LOK pattern attachment points.\n\nFunctionally identical to the Surefire Handguard."
att.Desc_Pros = {
    "uc.light"
}
att.Desc_Cons = {
    "con.light",
    "uc.noubs"
}
att.AutoStats = true

att.Slot = "ur_mp5_hg"
att.SortOrder = 998

att.Model = "models/weapons/arccw/atts/ud_flashlight_1.mdl"
att.ModelOffset = Vector(0,0,.1)
att.OffsetAng = Angle(0,0,180)
att.ModelScale = Vector(.01,.01,.01) -- THIS IS TEMPORARY UNTIL THE MODEL GETS THE BONE WE NEED, DO NOT RELEASE WITH A TINY FLASHLIGHT INSIDE THE MODEL

att.Flashlight = false
att.FlashlightFOV = 50
att.FlashlightFarZ = 1024 -- how far it goes
att.FlashlightNearZ = 1 -- how far away it starts
att.FlashlightAttenuationType = ArcCW.FLASH_ATT_LINEAR -- LINEAR, CONSTANT, QUADRATIC are available
att.FlashlightColor = Color(255, 242, 229)
att.FlashlightTexture = "effects/flashlight001"
att.FlashlightBrightness = 3
att.FlashlightBone = "light"

att.ToggleStats = {
    {
        PrintName = "On",
        Flashlight = true
    },
    {
        PrintName = "Off",
        Flashlight = false,
    }
}

att.Mult_SightTime = 0.9

att.ActivateElements = {"ur_mp5_ub_surelock"}
att.GivesFlags = {"hg_surefire","mp5_badhg"} -- badhg flag is temporary until underbarrel rail model is implemented (it disables use of underbarrel atts)
att.ExcludeFlags = {"barrel_sd","mp5_kurz"}
--lua/arccw/shared/attachments/ur_spas12_barrel_hl.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_spas12_barrel_hl.lua:
att.PrintName = "21.5\" Freeman Barrel"
att.Icon = nil
att.Description = [[Futuristic fire control group and barrel accomodation that supports slamfire and a near-instant, gas-powered two-round burst. However, the original dual-mode mechanism is replaced.

The two-round burst can shred most targets, but depletes ammo quickly. The complicated mechanism also has a heavier pump.]]
att.Desc_Pros = {
    "uc.slam",
    "ur.ak.burst",
}
att.Desc_Cons = {
    "ur.spas12.pump"
}
att.Icon = Material("entities/att/ur_spas/barrel_std.png", "smooth mips")

att.SortOrder = 21.5
att.Slot = "ur_spas12_barrel"
att.AutoStats = true

att.Override_Firemodes = {
    {
        Mode = 2,
        PrintName = "fcg.slam",
        Override_ManualAction = true,
        Mult_AccuracyMOA = 0.8,
        Mult_HipDispersion = 0.8,
    },
    {
        Mode = 1,
        PrintName = "ur.spas12.dbl",
        Override_ManualAction = true,
        Mult_AccuracyMOA = 1.15,
        Mult_HipDispersion = 0.8,

        Mult_Num = 2,
        Override_AmmoPerShot = 2,
        Mult_Damage = 2,
        Mult_DamageMin = 2,
        Mult_Recoil = 1.5,
        CustomBars = "--___",
        Mult_CycleTime = 1.13
    },
    {
        Mode = 0,
    },
}
att.Override_Firemodes_Priority = 1

att.Hook_GetShootSound = function(wep,sound)
    if wep:GetCurrentFiremode().Override_AmmoPerShot == 2 then
        return "arccw_uc/common/gl_fire_buck.ogg"
    end
end
att.Hook_GetDistantShootSound = function(wep,sound)
    if wep:GetCurrentFiremode().Override_AmmoPerShot == 2 then
        --return "arccw_uc/common/gl_fire_buck_dist.ogg"
    end
end
-- Overwritten by weapon's hook
--[[]
att.Hook_SelectFireAnimation = function(wep,curanim)
    if wep:GetCurrentFiremode().Override_AmmoPerShot == 2 then
        return "fire_2bst"
    end
end
]]

att.Mult_CycleTime = 1.15
att.Override_ActivePos = Vector(1.90, -3, -0.40) --Vector(1, -3, 0)
att.Override_ActivePos_Priority = 10

att.ActivateElements = {"uc_spas_slam"}
att.GivesFlags = {"freeman"} -- only activates if a manual action shell type is used
--lua/arccw/shared/languages/uc_usp_en.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/client/cl_languages/en.lua:
return gluapack()()
--lua/arccw/shared/sh_mw2.lua:
ArcCW_MW2_Mech = { "weapons/fesiugmw2/mechanism/weap_mech_layer_c1.wav", "weapons/fesiugmw2/mechanism/weap_mech_layer_c2.wav", "weapons/fesiugmw2/mechanism/weap_mech_layer_c3.wav", "weapons/fesiugmw2/mechanism/weap_mech_layer_c4.wav", "weapons/fesiugmw2/mechanism/weap_mech_layer_c5.wav", "weapons/fesiugmw2/mechanism/weap_mech_layer_c6.wav", "weapons/fesiugmw2/mechanism/weap_mech_layer_c7.wav", "weapons/fesiugmw2/mechanism/weap_mech_layer_c8.wav" }

sound.Add(
	{
		name	=		"MW2Common.Deploy",			
		channel	=		CHAN_ITEM,
		volume	=		1.0,
		pitch	=		{90, 110},
		sound	= 		"weapons/fesiugmw2/wpnarm_2.wav"	
	}
)
sound.Add(
	{
		name	=		"MW2Common.Underbarrel",			
		channel	=		CHAN_ITEM,
		volume	=		1.0,
		pitch	=		{90, 110},
		sound	= 		"weapons/fesiugmw2/pu_weapon01.wav"	
	}
)
sound.Add(
	{
		name	=		"MW2Common.Masterkey_Load",			
		channel	=		CHAN_ITEM,
		volume	=		1.0,
		pitch	=		100,
		sound	= 		{
							"weapons/fesiugmw2/foley/wpfoly_shotattach_reload_clipin1_v1.wav",
							"weapons/fesiugmw2/foley/wpfoly_shotattach_reload_clipin2_v1.wav"
						}
	}
)

sound.Add(
	{
		name	=		"MW2Common.Melee.Swing",			
		channel	=		CHAN_STATIC,
		volume	=		1.0,
		sound	= 		{
							"weapons/fesiugmw2/melee/h2h_knife_swing1.wav",
							"weapons/fesiugmw2/melee/h2h_knife_swing2.wav"
						}
	}
)

sound.Add(
	{
		name	=		"MW2Common.Melee.HitFleshy_Stab", -- heh
		channel	=		CHAN_ITEM,
		volume	=		1.0,
		sound	= 		{
							"weapons/fesiugmw2/melee/h2h_knife_stab1.wav",
							"weapons/fesiugmw2/melee/h2h_knife_stab1.wav"
						}
	}
)

sound.Add(
	{
		name	=		"MW2Common.Melee.HitFleshy_Slice", -- heh
		channel	=		CHAN_ITEM,
		volume	=		1.0,
		sound	= 		{
							"weapons/fesiugmw2/melee/h2h_knife_slice1.wav",
							"weapons/fesiugmw2/melee/h2h_knife_slice2.wav"
						}
	}
)

sound.Add(
	{
		name	=		"MW2Common.Melee.HitWorld",
		channel	=		CHAN_ITEM,
		volume	=		1.0,
		sound	= 		{
							"weapons/fesiugmw2/melee/h2h_knife_impact_other1.wav",
							"weapons/fesiugmw2/melee/h2h_knife_impact_other2.wav",
							"weapons/fesiugmw2/melee/h2h_knife_impact_other3.wav"
						}
	}
)
--lua/arccw/shared/sh_uc_presets.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_util.lua:
-- Works around the 10 bodygroup limit on ENTITY:SetBodyGroups()
function ArcCW.SetBodyGroups(mdl, bodygroups)
    mdl:SetBodyGroups(bodygroups)
    local len = string.len(bodygroups or "")
    for i = 10, len - 1 do
        mdl:SetBodygroup(i, tonumber(string.sub(bodygroups, i + 1, i + 2)))
    end
end

-- doesn't work
function ArcCW.RotateAroundPoint(pos, ang, point, offset, offset_ang)
    local v = Vector(0, 0, 0)
    v = v + (point.x * ang:Right())
    v = v + (point.y * ang:Forward())
    v = v + (point.z * ang:Up())

    local newang = Angle()
    newang:Set(ang)

    newang:RotateAroundAxis(ang:Right(), offset_ang.p)
    newang:RotateAroundAxis(ang:Forward(), offset_ang.r)
    newang:RotateAroundAxis(ang:Up(), offset_ang.y)

    v = v + newang:Right() * offset.x
    v = v + newang:Forward() * offset.y
    v = v + newang:Up() * offset.z

    -- v:Rotate(offset_ang)

    v = v - (point.x * newang:Right())
    v = v - (point.y * newang:Forward())
    v = v - (point.z * newang:Up())

    return v + pos, newang
end

function ArcCW.RotateAroundPoint2(pos, ang, point, offset, offset_ang)

    -- debugoverlay.Cross(point, 1, 1, Color(255, 0, 0), true)

    local mat = Matrix()
    mat:SetTranslation(pos)
    mat:SetAngles(ang)
    -- debugoverlay.Cross(pos, 1.5, 1, Color(0, 0, 255), true)
    -- debugoverlay.Line(mat:GetTranslation(), mat:GetTranslation() + ang:Forward() * 32, 1, color_white, true)
    -- debugoverlay.Line(mat:GetTranslation(), point, 1, Color(255, 150, 150), true)

    mat:Translate(point)
    -- debugoverlay.Cross(mat:GetTranslation(), 2, 1, Color(255, 0, 255), true)

    local rot_mat = Matrix()
    rot_mat:SetAngles(offset_ang)
    rot_mat:Invert()
    mat:Mul(rot_mat)

    --mat:Rotate(offset_ang)
    mat:Translate(-point)

    mat:Translate(offset)

    -- debugoverlay.Cross(mat:GetTranslation(), 1, 1, Color(0, 255, 0), true)
    -- debugoverlay.Line(mat:GetTranslation(), mat:GetTranslation() + mat:GetAngles():Forward() * 8, 1, Color(0, 255, 0), true)

    return mat:GetTranslation(), mat:GetAngles()
end

-- See https://wiki.facepunch.com/gmod/Entity:GetAttachment
function ArcCW.FormatViewModelAttachment(nFOV, vOrigin, bFrom)
    local vEyePos = EyePos()
    local aEyesRot = EyeAngles()
    local vOffset = vOrigin - vEyePos
    local vForward = aEyesRot:Forward()
    local nViewX = math.tan(nFOV * math.pi / 360)

    if nViewX == 0 then
        vForward:Mul(vForward:Dot(vOffset))
        vEyePos:Add(vForward)

        return vEyePos
    end

    -- FIXME: LocalPlayer():GetFOV() should be replaced with EyeFOV() when it's binded
    local nWorldX = math.tan(LocalPlayer():GetFOV() * math.pi / 360)

    if nWorldX == 0 then
        vForward:Mul(vForward:Dot(vOffset))
        vEyePos:Add(vForward)

        return vEyePos
    end

    local vRight = aEyesRot:Right()
    local vUp = aEyesRot:Up()

    if bFrom then
        local nFactor = nWorldX / nViewX
        vRight:Mul(vRight:Dot(vOffset) * nFactor)
        vUp:Mul(vUp:Dot(vOffset) * nFactor)
    else
        local nFactor = nViewX / nWorldX
        vRight:Mul(vRight:Dot(vOffset) * nFactor)
        vUp:Mul(vUp:Dot(vOffset) * nFactor)
    end

    vForward:Mul(vForward:Dot(vOffset))
    vEyePos:Add(vRight)
    vEyePos:Add(vUp)
    vEyePos:Add(vForward)

    return vEyePos
end
--addons/[binbon]arccw_modify/lua/arccw/client/cl_autostats.lua:
local tbl     = table
local tbl_add = tbl.Add
local tbl_ins = tbl.insert
local tostr   = tostring
local translate = ArcCW.GetTranslation

-- ["buff"] = {"desc", string mode (mult, add, override, func), bool lowerbetter or function(val), number priority, bool flipsigns }

ArcCW.AutoStats = {
    -- Attachments
    ["MagExtender"]           = { "autostat.magextender", "override", false,       pr = 317 },
    ["MagReducer"]            = { "autostat.magreducer",  "override", true,        pr = 316 },
    ["Bipod"]                 = { "autostat.bipod",       false, false,            pr = 313 },
    ["ScopeGlint"]            = { "autostat.glint",       "override", true,        pr = 255 },
    ["Silencer"]              = { "autostat.silencer",    "override", false,       pr = 254 },
    ["Override_NoRandSpread"] = { "autostat.norandspr",   "override", false,       pr = 253 },
    ["Override_CanFireUnderwater"] = { "autostat.underwater",   "override", false, pr = 252 },
    ["Override_ShootWhileSprint"] = { "autostat.sprintshoot",   "override", false, pr = 251 },
    -- Multipliers
    ["Mult_BipodRecoil"]      = { "autostat.bipodrecoil", false, true,             pr = 312 },
    ["Mult_BipodDispersion"]  = { "autostat.bipoddisp",   false, true,             pr = 311 },
    ["Mult_Damage"]           = { "autostat.damage",      "mult", false,           pr = 215 },
    ["Mult_DamageMin"]        = { "autostat.damagemin",   "mult", false,           pr = 214 },
    ["Mult_Range"]            = { "autostat.range",       "mult", false,           pr = 185 },
    ["Mult_RangeMin"]         = { "autostat.rangemin",    "mult", false,           pr = 184 },
    ["Mult_Penetration"]      = { "autostat.penetration", "mult", false,           pr = 213 },
    ["Mult_MuzzleVelocity"]   = { "autostat.muzzlevel",   "mult", false,           pr = 212 },
    ["Mult_PhysBulletMuzzleVelocity"] = { "autostat.muzzlevel",   "mult", false,   pr = 211 },
    ["Mult_MeleeTime"]        = { "autostat.meleetime",   "mult", true,            pr = 145 },
    ["Mult_MeleeDamage"]      = { "autostat.meleedamage", "mult", false,           pr = 144 },
    ["Add_MeleeRange"]        = { "autostat.meleerange",  false,  false,           pr = 143 },
    ["Mult_Recoil"]           = { "autostat.recoil",      "mult", true,            pr = 195 },
    ["Mult_RecoilSide"]       = { "autostat.recoilside",  "mult", true,            pr = 194 },
    ["Mult_RPM"]              = { "autostat.firerate",    "mult", false,           pr = 216 },
    ["Mult_AccuracyMOA"]      = { "autostat.precision",   "mult", true,            pr = 186 },
    ["Mult_HipDispersion"]    = { "autostat.hipdisp",     "mult", true,            pr = 155 },
    ["Mult_SightsDispersion"] = { "autostat.sightdisp",   "mult", true,            pr = 154 },
    ["Mult_MoveDispersion"]   = { "autostat.movedisp",    "mult", true,            pr = 153 },
    ["Mult_JumpDispersion"]   = { "autostat.jumpdisp",    "mult", true,            pr = 152 },
    ["Mult_ShootVol"]         = { "autostat.shootvol",    "mult", true,            pr = 115 },
    ["Mult_SpeedMult"]        = { "autostat.speedmult",   "mult", false,           pr = 114 },
    ["Mult_MoveSpeed"]        = { "autostat.speedmult",   "mult", false,           pr = 105 },
    ["Mult_SightedSpeedMult"] = { "autostat.sightspeed",  "mult", false,           pr = 104 },
    ["Mult_SightedMoveSpeed"] = { "autostat.sightspeed",  "mult", false,           pr = 103 },
    ["Mult_ShootSpeedMult"]   = { "autostat.shootspeed",  "mult", false,           pr = 102 },
    ["Mult_ReloadTime"]       = { "autostat.reloadtime",  "mult", true,            pr = 125 },
    ["Add_BarrelLength"]      = { "autostat.barrellength","add",  true,            pr = 915 },
    ["Mult_DrawTime"]         = { "autostat.drawtime",    "mult", true,            pr = 14 },
    ["Mult_SightTime"]        = { "autostat.sighttime",   "mult", true,            pr = 335, flipsigns = true },
    ["Mult_CycleTime"]        = { "autostat.cycletime",   "mult", true,            pr = 334 },
    ["Mult_Sway"]             = { "autostat.sway",        "mult",  true,           pr = 353 },
    ["Mult_HeatCapacity"]     = { "autostat.heatcap",     "mult", false,           pr = 10 },
    ["Mult_HeatDissipation"]  = { "autostat.heatdrain",   "mult", false,           pr = 9 },
    ["Mult_FixTime"]          = { "autostat.heatfix",     "mult", true,            pr = 8 },
    ["Mult_HeatDelayTime"]    = { "autostat.heatdelay",   "mult", true,            pr = 7 },
    ["Mult_MalfunctionMean"]  = { "autostat.malfunctionmean", "mult", false,       pr = 6 },
    ["Add_ClipSize"]          = { "autostat.clipsize.mod",    "add", false,         pr = 315 },
    ["Mult_ClipSize"]         = { "autostat.clipsize.mod",    "mult", false,        pr = 314 },

    ["Mult_TriggerDelayTime"] = { "autostat.triggerdelay",    "mult", true,        pr = 200 },

    ["Override_Ammo"] = {"autostat.ammotype", "func", function(wep, val, att)
        -- have to use the weapons table here because Primary.Ammo *is* modified when attachments are used
        if !IsValid(wep) or !weapons.Get(wep:GetClass()) or weapons.Get(wep:GetClass()).Primary.Ammo == val then return end
        return string.format(translate("autostat.ammotype"), string.lower(ArcCW.TranslateAmmo(val))), "infos"
    end, pr = 316},
    ["Override_ClipSize"] = {"autostat.clipsize", "func", function(wep, val, att)
        if !IsValid(wep) then return end
        local ogclip = wep:GetBuff_Override("BaseClipSize") or (wep.RegularClipSize or (wep.Primary and wep.Primary.ClipSize) or 0)
        if ogclip < val then
            return string.format(translate("autostat.clipsize"), val), "pros"
        else
            return string.format(translate("autostat.clipsize"), val), "cons"
        end
    end, pr = 317},
    ["Bipod"] = {"autostat.bipod2", "func", function(wep, val, att)
        if val then
            local recoil = 100 - math.Round((att.Mult_BipodRecoil or (IsValid(wep) and wep.BipodRecoil) or 1) * 100)
            local disp = 100 - math.Round((att.Mult_BipodDispersion or (IsValid(wep) and wep.BipodDispersion) or 1) * 100)
            return string.format(translate("autostat.bipod2"), disp, recoil), "pros"
        else
            return translate("autostat.nobipod"), "cons"
        end
    end, pr = 314},
    ["UBGL"] = { "autostat.ubgl",  "override", false,        pr = 950 },
    ["UBGL_Ammo"] = {"autostat.ammotypeubgl", "func", function(wep, val, att)
        -- have to use the weapons table here because Primary.Ammo *is* modified when attachments are used
        if !IsValid(wep) then return end
        return string.format(translate("autostat.ammotypeubgl"), string.lower(ArcCW.TranslateAmmo(val))), "infos"
    end, pr = 949},

    ["Add_AccuracyMOA"] = { "autostat.precision",   "func",  function(wep, val, att)
        if val > 0 then
            return "+" .. math.Round(val, 2) .. " " .. translate("unit.moa") .. " " .. translate("autostat.precision"), "cons"
        else
            return "-" .. math.Round(val, 2) .. " " .. translate("unit.moa") .. " " .. translate("autostat.precision"), "pros"
        end
    end, pr = 187 },
}

local function getsimpleamt(stat)
    if stat > 1 then
        return stat >= 2 and "++++ " or stat >= 1.5 and "+++ " or stat >= 1.25 and "++ " or "+ "
    elseif stat < 1 then
        return stat <= 0.75 and "---- " or stat <= 0.5 and "--- " or stat <= 0.25 and "-- " or "- "
    end
end

local function stattext(wep, att, i, k, dmgboth, flipsigns)
    if !ArcCW.AutoStats[i] then return end
    if i == "Mult_DamageMin" and dmgboth then return end

    local stat = ArcCW.AutoStats[i]
    local simple = ArcCW.ConVars["attinv_simpleproscons"]:GetBool()

    local txt = ""
    local str, eval = ArcCW.GetTranslation(stat[1]) or stat[1], stat[3]

    if i == "Mult_Damage" and dmgboth then
        str = ArcCW.GetTranslation("autostat.damageboth") or stat[1]
    end

    local tcon, tpro = eval and "cons" or "pros", eval and "pros" or "cons"

    if stat[3] == "infos" then
        tcon = "infos"
    end

    if stat[2] == "mult" and k != 1 then
        local sign, percent = k > 1 and (flipsigns and "-" or "+") or (flipsigns and "+" or "-"), k > 1 and (k - 1) or (1 - k)
        txt = simple and getsimpleamt(k) or sign .. tostr(math.Round(percent * 100, 2)) .. "% "
        return txt .. str, k > 1 and tcon or tpro
    elseif stat[2] == "add" and k != 0 then
        local sign, state = k > 0 and (flipsigns and "-" or "+") or (flipsigns and "+" or "-"), k > 0 and k or -k
        txt = simple and "+ " or sign .. tostr(state) .. " "
        return txt .. str, k > 0 and tcon or tpro
    elseif stat[2] == "override" and k == true then
        return str, tcon
    elseif stat[2] == "func" then
        local a, b = stat[3](wep, k, att)
        if a and b then return a, b end
    end
end

function ArcCW:GetProsCons(wep, att, toggle)
    local pros = {}
    local cons = {}
    local infos = {}

    tbl_add(pros, att.Desc_Pros or {})
    tbl_add(cons, att.Desc_Cons or {})
    tbl_add(infos, att.Desc_Neutrals or {})

    local override = hook.Run("ArcCW_PreAutoStats", wep, att, pros, cons, infos, toggle)
    if override then return pros, cons, infos end

    -- Localize attachment-specific text
    local hasmaginfo = false
    for i, v in pairs(pros) do
        if v == "pro.magcap" then hasmaginfo = true end
        pros[i] = ArcCW.TryTranslation(v)
    end
    for i, v in pairs(cons) do
        if v == "con.magcap" then hasmaginfo = true end
        cons[i] = ArcCW.TryTranslation(v)
    end
    for i, v in pairs(infos) do infos[i] = ArcCW.TryTranslation(v) end

    if !att.AutoStats then return pros, cons, infos end

    -- Process togglable stats
    if att.ToggleStats then
        --local toggletbl = att.ToggleStats[toggle or 1]
        for ti, toggletbl in pairs(att.ToggleStats) do
            -- show the first stat block (unless NoAutoStats), and all blocks with AutoStats
            if toggletbl.AutoStats or (ti == (toggle or 1) and !toggletbl.NoAutoStats) then
                local dmgboth = toggletbl.Mult_DamageMin and toggletbl.Mult_Damage and toggletbl.Mult_DamageMin == toggletbl.Mult_Damage
                for i, stat in SortedPairsByMemberValue(ArcCW.AutoStats, "pr", true) do
                    if !toggletbl[i] or toggletbl[i .. "_SkipAS"] then continue end
                    local val = toggletbl[i]
                    --[[]
                    -- makes the stat show as a sum and not an additional modifier
                    -- feels more confusing though
                    if att[i] then
                        if stat[2] == "add" then
                            val = val + att[i]
                        elseif stat[2] == "mult" then
                            val = val * att[i]
                        end
                    end
                    ]]

                    local txt, typ = stattext(wep, toggletbl, i, val, dmgboth, ArcCW.AutoStats[i].flipsigns )
                    if !txt then continue end

                    local prefix = (stat[2] == "override" and k == true) and "" or ("[" .. (toggletbl.AutoStatName or toggletbl.PrintName or ti) .. "] ")

                    if typ == "pros" then
                        tbl_ins(pros, prefix .. txt)
                    elseif typ == "cons" then
                        tbl_ins(cons, prefix .. txt)
                    elseif typ == "infos" then
                        tbl_ins(infos, prefix .. txt)
                    end
                end
            end
        end
    end

    local dmgboth = att.Mult_DamageMin and att.Mult_Damage and att.Mult_DamageMin == att.Mult_Damage

    for i, stat in SortedPairsByMemberValue(ArcCW.AutoStats, "pr", true) do
        if !att[i] or att[i .. "_SkipAS"] then continue end

        -- Legacy support: If "Increased/Decreased magazine capacity" line exists, don't do our autostats version
        if hasmaginfo and i == "Override_ClipSize" then continue end

        if i == "UBGL" then
			tbl_ins(infos, translate("autostat.ubgl2"))
		end

        local txt, typ = stattext(wep, att, i, att[i], dmgboth, ArcCW.AutoStats[i].flipsigns )
        if !txt then continue end

        if typ == "pros" then
            tbl_ins(pros, txt)
        elseif typ == "cons" then
            tbl_ins(cons, txt)
        elseif typ == "infos" then
            tbl_ins(infos, txt)
        end

        --[[]
        if i == "Mult_DamageMin" and dmgboth then continue end

        local k, txt  = att[i], ""
        local str, st = ArcCW.GetTranslation(stat[1]) or stat[1], stat[3]

        if i == "Mult_Damage" and dmgboth then
            str = ArcCW.GetTranslation("autostat.damageboth") or stat[1]
        end

        local tcon, tpro = st and cons or pros, st and pros or cons

        if stat[2] == "mult" and k != 1 then
            local sign, percent = k > 1 and "+" or "-", k > 1 and (k - 1) or (1 - k)

            txt = simple and getsimpleamt(k) or sign .. tostr(math.Round(percent * 100, 2)) .. "% "

            tbl_ins(k > 1 and tcon or tpro, txt .. str)
        elseif stat[2] == "add" and k != 0 then
            local sign, state = k > 0 and "+" or "-", k > 0 and k or -k

            txt = simple and "+ " or sign .. tostr(state) .. " "

            tbl_ins(k > 1 and tpro or tcon, txt .. str)
        elseif stat[2] == "override" and k == true then
            tbl_ins(st and cons or pros, 1, str)
        end
        ]]
    end

    hook.Run("ArcCW_PostAutoStats", wep, att, pros, cons, infos, toggle)

    return pros, cons, infos
end
--addons/ashop/lua/ashop/code/items/sh_init.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/badges/sh_b.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/car_dealer/cl_cd.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = "Cars"
OBJECT_TYPE.UniqueIdentifier = "Cars"

// It was... special to read in the simfphys code
local function createWheel(index, attachmentpos, height, swap_y, entList, ent, locaLAngForward, LocalAngRight)
    local mdl

    if entList.CustomWheelModel_R and (index > 2) then
        mdl = entList.CustomWheelModel_R
    elseif entList.CustomWheelModel then
        mdl = entList.CustomWheelModel
    else
        mdl = "models/props_vehicles/tire001c_car.mdl"
    end

    local fAng = ent:LocalToWorldAngles( locaLAngForward )
	local rAng = ent:LocalToWorldAngles( LocalAngRight )
	local Forward = fAng:Forward() 
	local Right = swap_y and -rAng:Forward() or rAng:Forward()
	local Up = ent:GetUp()

    if entList.CustomWheelModel then
        local ghostAng = Right:Angle()
        local mirAng = swap_y and 1 or -1
		ghostAng:RotateAroundAxis(Forward, entList.CustomWheelAngleOffset.p * mirAng)
		ghostAng:RotateAroundAxis(Right, entList.CustomWheelAngleOffset.r * mirAng)
		ghostAng:RotateAroundAxis(Up, -entList.CustomWheelAngleOffset.y)

        local Camber = entList.CustomWheelCamber or 0
		ghostAng:RotateAroundAxis(Forward, Camber * mirAng)
        fAng = ghostAng
    end

    local cm = ClientsideModel(mdl)
    cm:SetPos(attachmentpos - Up * height)
    cm:SetAngles(fAng)
    cm:Spawn()
    cm:SetParent(ent)
    cm:SetNoDraw(true)
    return cm
end

local ang0900 = Angle(0,90,0)
local function createWheels(entList, ent)
    local t = {}
    for k, v in ipairs({"FL", "FR", "RL", "RR"}) do
        local completeName = "CustomWheelPos" .. v

        if entList[completeName] then
            t[v] = ent:LocalToWorld( entList[completeName] )
        else
            t[v] = ent:GetAttachment( ent:LookupAttachment( "wheel_" .. string.lower(v) ) ).Pos
        end
    end

    local pAngL = ent:WorldToLocalAngles( ((t['FL'] + t['FR']) / 2 - (t['RL'] + t['RR']) / 2):Angle() )
    pAngL.r = 0
    pAngL.p = 0

    local yAngL = pAngL - ang0900
    yAngL:Normalize()

    local wheels = {}

    for k, v in ipairs({"FL", "FR", "RL", "RR", "ML", "MR"}) do
        local completeName = "CustomWheelPos" .. v

        if entList[completeName] or (v != "ML" and v != "MR") then
            table.insert(wheels, createWheel(k,
                entList[completeName] and ent:LocalToWorld( entList[completeName] ) or ent:GetAttachment( ent:LookupAttachment( "wheel_" .. string.lower(v) ) ).Pos, 
                k <= 2 and entList.FrontHeight or entList.RearHeight,
                v[2] == "R",
                entList,
                ent,
                pAngL, yAngL))
        end
    end

    return wheels
end

function OBJECT_TYPE.UI_FILL(plyItem, item, pnl, parent, w, h, noCircle)
    local circleParent = vgui.Create("EditablePanel", pnl)
    circleParent:SetSize(w, h)
    circleParent:SetMouseInputEnabled(false)

    local id = item.metadata[2] or item.metadata[1]
    local isSimfphys = string.find(id, "sim_fphys")
    local car

    if isSimfphys then
        car = list.Get("simfphys_vehicles")[id]
    else
        car = list.Get("Vehicles")[id]
    end

    if !car then return end

    local m = vgui.Create( "DModelPanel" , pnl ) -- SpawnIcon
    m:Dock(FILL)
    m:SetModel( car.Model ) -- Model we want for this spawn icon
    m:SetMouseInputEnabled(false)
    m:SetPaintedManually(true)

    m.FarZ = 4096*10

    local wheels

    if isSimfphys then
        wheels = createWheels(car.Members, m.Entity)
    end

    local mn, mx = m.Entity:GetRenderBounds()
    local size = 0
    size = math.max( size, math.abs(mn.x) + math.abs(mx.x) )
    size = math.max( size, math.abs(mn.y) + math.abs(mx.y) )
    size = math.max( size, math.abs(mn.z) + math.abs(mx.z) )

    m:SetFOV( 45 )
    m:SetLookAt( (mn + mx) * 0.5 )
    m:SetCamPos( Vector(size, size, size))

    function m:LayoutEntity() end

    function m:PreDrawModel(ent)
        render.SetLightingMode(1)
    end

    function m:PostDrawModel(ent)
        render.SetLightingMode(0)

        if !wheels then return end
        for k, v in ipairs(wheels) do
            v:DrawModel()
        end
    end

    function m:OnRemove()
        if !wheels then return end
        for k, v in ipairs(wheels) do
            v:Remove()
        end
    end

    if item.metadata[4] then
        m:SetCamPos(item.metadata[4])
    end

    return true, {m}
end

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/case_opening/cl_caseopening.lua:
local OBJECT_TYPE = {}
local methods = include('sh_hiddenmethods.lua')

OBJECT_TYPE.Name = "Case Opening"
OBJECT_TYPE.UniqueIdentifier = "CaseOpening"
OBJECT_TYPE.HideOnUse = true

local bg = Material('akulla/case_texture.jpg')

local function findMat(mdl, name)
    for k, v in ipairs(mdl:GetMaterials()) do
        if string.find(v, name) then
            return k
        end
    end
end

function OBJECT_TYPE.UI_FILL(plyItem, item, pnl, parent, w, h, noCircle, fullSize)
    local circleParent = vgui.Create("EditablePanel", pnl)
    circleParent:SetSize(w, h)
    circleParent:SetMouseInputEnabled(false)

    local c = fullSize and math.max(w, h) or math.max(w, h) * 0.6

    local SpawnI = vgui.Create( "DModelPanel" , circleParent ) -- SpawnIcon
    SpawnI:SetSize(c, c)
    SpawnI:Center()
    SpawnI:SetModel( item.metadata[1] ) -- Model we want for this spawn icon
    SpawnI:SetMouseInputEnabled(false)
    SpawnI:SetPaintedManually(true)

    local mn, mx = SpawnI.Entity:GetRenderBounds()
    local size = 0
    size = math.max( size, math.abs(mn.x) + math.abs(mx.x) )
    size = math.max( size, math.abs(mn.y) + math.abs(mx.y) )
    size = math.max( size, math.abs(mn.z) + math.abs(mx.z) )

    SpawnI:SetFOV( 45 )
    SpawnI:SetCamPos( Vector( -size, size, size ) )
    SpawnI:SetLookAt( (mn + mx) * 0.5 )

    if item.metadata[5] then
        SpawnI.Entity.AShopCase = item.metadata[5]
    end

    if item.metadata[6] then
        SpawnI.Entity.AShopCase2 = item.metadata[5]
    end

    function SpawnI:LayoutEntity(ent)
        return 
    end

    for k, v in pairs({
        [4] = {findMat(SpawnI:GetEntity(), "sticker")},
        [7] = {findMat(SpawnI:GetEntity(), "body")},
        [8] = {findMat(SpawnI:GetEntity(), "colorized")}
    }) do
        if item.metadata[k] and IsValid(SpawnI) then
            local removeFunc = ashop.ui.setMaterialByLink(item.metadata[k], {
                ["$translucent"] = 1,
                ["$vertexalpha"] = 1,
                ["$vertexcolor"] = 1
            }, function(mat)
                mat = mat

                if isfunction(mat) then
                    local thinkFunc = SpawnI.LayoutEntity

                    function SpawnI:LayoutEntity(ent)
                        local mat = mat()

                        for i, j in ipairs(v) do
                            ent:SetSubMaterial(j-1, "!" .. mat:GetName())
                        end

                        if thinkFunc then
                            return thinkFunc(self, ent)
                        end
                    end
                else
                    if !IsValid(SpawnI.Entity) then return end

                    for i, j in ipairs(v) do
                        SpawnI.Entity:SetSubMaterial(j-1, "!" .. mat:GetName())
                    end
                end
            end)

            if removeFunc then
                local f = SpawnI.OnRemove
                function SpawnI:OnRemove()
                    removeFunc()

                    if f then f(self) end
                end
            end
        end
    end

    SpawnI.Entity.AShopCase = item.metadata[5]
    SpawnI.Entity.AShopCase2 = item.metadata[6]

    return true, {SpawnI}, circleParent
end

local grad = Material('akulla/gradient-d25.png')
local eyePos = Vector()
local ang = Angle(0, 0, 0)
local matCircle = Material('akulla/circle.png')

local caseStartPos = Vector(150, 100, -10)
local caseStartAng = Angle(15, 245, 15)
caseStartAng:RotateAroundAxis(caseStartAng:Up(), -90)

local caseEndPos = Vector(100, 0, -60)
local caseEndAng = Angle(0, 180, 0)
caseEndAng:RotateAroundAxis(caseEndAng:Up(), -90)

local function createPnl(item, plyItem)
    local marginVertical = ashop.GetSize(16)
    local rarity = ashop.rarity[item.rarity]
    local caseClr = item.metadata[5] or rarity.clr

    // We want to make it not completely bright
    local h, s, v = ColorToHSV(caseClr)

    s = math.min(1, s)
    v = math.min(0.5, v)
    caseClr = HSVToColor(h, s, v)
    local caseClr25 = ColorAlpha(caseClr, 255*0.25)

    local case = vgui.Create('EditablePanel', ashop.menu)
    case:SetSize(ashop.menu:GetSize())
    case:DockPadding(ashop.menu:GetWide()*0.1, ashop.menu:GetTall()*0.25, ashop.menu:GetWide()*0.1, ashop.menu:GetTall()*0.25)

    ashop.menu:PushFocus(case)

    local mdl = ClientsideModel(item.metadata[1], RENDERGROUP_OTHER)
    mdl:SetNoDraw( true )
    mdl:SetPos(caseStartPos)
    mdl:SetAngles(caseStartAng)
    mdl:ResetSequence('open')

    if item.metadata[5] then
        mdl.AShopCase = item.metadata[5]
    else
        mdl.AShopCase = rarity.clr
    end

    if item.metadata[6] then
        mdl.AShopCase2 = item.metadata[6]
    end

    mdl:SetRenderMode(RENDERMODE_TRANSCOLOR)
    mdl:Spawn()
    //mdl:Spawn()

    function case:OnRemove()
        ashop.menu:PopFocus(self)

        if IsValid(mdl) then
            mdl:Remove()
        end
    end

    local p = eyePos + ang:Forward()*70 + ang:Up()*15
    local particleEmitter = ParticleEmitter(p)
    particleEmitter:SetNoDraw(true)

    local particleEmitterItem = ParticleEmitter(caseEndPos)
    particleEmitterItem:SetNoDraw(true)

    local hue, sat, val = ColorToHSV(caseClr)
    sat = math.max(sat/2, 0)
    val = 1

    local clrEffect = HSVToColor(hue, sat, val)
    local itemEntity

    local display = vgui.Create('EditablePanel', case)
    display:Dock(LEFT)
    display:SetWide(case:GetTall()*0.5)

    local container = vgui.Create('EditablePanel', case)
    container:Dock(RIGHT)
    container:SetWide(case:GetWide() - case:GetWide()*0.3 - case:GetTall()*0.5)

    local title = vgui.Create('DLabel', container)
    title:Dock(TOP)
    title:SetText(item.name)
    title:SetFont('ashop_60_600')
    title:SetTall(select(2, title:GetContentSize()))
    title:SetTextColor(ashop.GetColor('White'))

    local desc = vgui.Create('DLabel', container)
    desc:Dock(TOP)
    desc:SetText(item.metadata[3])
    desc:SetFont('ashop_30_600')
    desc:SetTall(select(2, title:GetContentSize()))
    desc:SetTextColor(ashop.GetColor('White'))

    local itemPerRow = 4
    local itemWidth = math.floor((container:GetWide() - math.ceil(marginVertical * (itemPerRow-1)))/itemPerRow) - 3

    local scroll = vgui.Create("DScrollPanel", container)
    scroll:Dock(TOP)
    scroll:SetTall(ashop.GetSize(189))
    scroll:DockMargin(0, marginVertical, 0, marginVertical)
    ashop.ui.SkinScrollPanel(scroll)

    local vbar = scroll:GetVBar()
    local clrw = ColorAlpha(color_white, 40)
    function vbar:Paint(w, h)
        draw.RoundedBox(2, w - 2, 8, 2, h-16, clrw)
    end

    local itemList = vgui.Create("DIconLayout", scroll)
    itemList:Dock(TOP)
    itemList:SetSpaceY(marginVertical)
    itemList:SetSpaceX(marginVertical)

    for k, v in SortedPairsByMemberValue(item.metadata[2], 2, false) do
        local p = vgui.Create("AShop_ShopItem", itemList)
        p:SetSize(itemWidth, ashop.GetSize(189))

        function p:Paint()
            p:SetItem(nil, v[1], true)
        end
    end

    local buttons = vgui.Create('EditablePanel', container)
    buttons:Dock(TOP)
    buttons:SetTall(ashop.GetFontHeight('ashop_16') * 1.5)

    local close = vgui.Create('DButton', buttons)
    close:SetWide(itemWidth)
    close:Dock(LEFT)
    close:SetFont('ashop_16')
    close:SetText(ashop.L('Close'))

    function close:OnCursorEntered()
        self.clr = ashop.GetColor('White')
        self:SetTextColor(caseClr)
    end

    function close:OnCursorExited()
        self.clr = nil
        self:SetTextColor(ashop.GetColor('White'))
    end

    function close:DoClick()
        case:Remove()
    end

    local h,s,v = ColorToHSV(caseClr)
    s = 0.8
    v = 0.2
    local blackClr = HSVToColor(h,s,v)
    function close:Paint(w, h)
        draw.RoundedBox(ashop.Config.round, 0, 0, w, h, self.clr or blackClr or ashop.GetColor('Grad1_0'))
    end

    if plyItem then
        local open = vgui.Create('DButton', buttons)
        open:SetWide(itemWidth)
        open:Dock(LEFT)
        open:DockMargin(marginVertical, 0, 0, 0)
        open:SetText(ashop.L('Open'))
        open:SetFont('ashop_16_600')
        open:SetTextColor(ashop.GetColor('White'))

        function open:OnCursorEntered()
            self.clr = ashop.GetColor('White')
            self:SetTextColor(caseClr)
        end

        function open:OnCursorExited()
            self.clr = nil
            self:SetTextColor(ashop.GetColor('White'))
        end

        function open:DoClick()
            net.Start('ashop_PlayerEquippedItem')
                net.WriteUInt(plyItem.id, ashop.Config.BitsPlyItemID)
                net.WriteBool(false)
            net.SendToServer()

            net.Receive('AShop_CaseOpening', function()
                local id = net.ReadUInt(ashop.Config.BitsItemID)
                local timerFloat = net.ReadFloat()

                if IsValid(case) then
                    case:StartCaseTransition(id, timerFloat)
                end
            end)
        end
        
        function open:Paint(w, h)
            draw.RoundedBox(ashop.Config.round, 0, 0, w, h, self.clr or caseClr)
        end
    end

    // Put these functions at the end
    function case:StartCaseTransition(itemID, timerFloat)
        local itemTable = ashop.items[itemID]
        local rarity = ashop.rarity[itemTable.rarity]
        local rarityItemClr = rarity.clr

        local hue, sat, val = ColorToHSV(rarityItemClr)
        sat = math.max(sat/2, 0)
        val = 0.5

        local rarityItemClrHSV = HSVToColor(hue, sat, val)

        local pX, pY = container:LocalToScreen(0, 0)
        container:SetParent(case)

        local cursorX, cursorY = case:ScreenToLocal(pX, pY)
        container:SetPos(cursorX, cursorY)

        container:MoveTo(case:GetWide(), cursorY, 1, 0, 0.5)
        container:AlphaTo(0, 0.5, 0)

        local c = CurTime()

        local oldSelf = self.Think
        function self:Think()
            self.LastPaint = RealTime()
            local Cur = CurTime()
            local ratio = Cur - c

            if ratio < 1 then
                local r = math.ease.InOutSine(math.min(Cur - c, 1))
                mdl:SetPos(LerpVector(r, caseStartPos, caseEndPos))
                mdl:SetAngles(LerpAngle(r, caseStartAng, caseEndAng))
            else
                mdl:SetAngles(caseEndAng)
            end

            mdl:FrameAdvance( ( RealTime() - self.LastPaint )  )

            if oldSelf then oldSelf() end
        end

        timer.Simple(1, function()
            if !IsValid(case) or !IsValid(mdl) then return end
            mdl:ResetSequence(2)
        end)

        timer.Simple(2, function()
            if !IsValid(case) then return end

            local wBarGrad = ashop.GetSize(10)
            local itemWidth = ashop.GetSize(150)
            local gradWidth = ashop.GetSize(40)
            case:Clear()
            local holder = vgui.Create('EditablePanel', case)
            holder:Dock(TOP)
            holder:SetTall(ashop.GetSize(189))

            function holder:PaintOver(w, h)
                //ashop.EndStencil()

                DisableClipping(true)
                    surface.SetDrawColor(caseClr)
                    surface.DrawLine(-1, -1, -1, h+2)

                    surface.SetDrawColor(caseClr)
                    surface.DrawLine(w+1, -1, w+1, h+2)

                    surface.SetMaterial(grad)
                    surface.SetDrawColor(caseClr)
                    surface.DrawTexturedRectRotated(-gradWidth/2, h/2, h, gradWidth, 90 )

                    surface.SetMaterial(grad)
                    surface.SetDrawColor(caseClr)
                    surface.DrawTexturedRectRotated(w+gradWidth/2, h/2, h, gradWidth, 270 )
                DisableClipping(false)

                surface.SetDrawColor(color_white)
                surface.DrawRect(w/2 - 2, 0, 4, h)

                surface.SetDrawColor(caseClr)
                surface.DrawTexturedRectRotated(w/2-2 - wBarGrad*0.5, h/2, h, wBarGrad, 90 )
                surface.DrawTexturedRectRotated(w/2+2 + wBarGrad*0.5, h/2, h, wBarGrad, 270 )
            end

            local itemScroller = vgui.Create('EditablePanel', holder)
            itemScroller:SetPos(self:GetWide(), 0)

            local itemNum = math.random(30, 60)
            itemScroller:SetSize(itemWidth * (itemNum + 10), holder:GetTall())

            local generatedItems = methods.GetCaseLuck(item.metadata[2], itemNum + 10)
            generatedItems[itemNum] = itemID

            local pnls = {}

            // We want to put the cursor at the center.
            local itemX = itemNum * itemWidth - case:GetWide()/2 + math.random(itemWidth * 0.25, itemWidth * 0.75)
            // math.random(6, 12)
            itemScroller:MoveTo(-itemX, 0, timerFloat, 0, 0.23, function()
                local white50 = ashop.GetColor('White50', 255*0.5)

                local winPnl = pnls[itemNum]
                local pX, pY = winPnl:LocalToScreen(0, 0)
                //winPnl:Dock(NODOCK)
                //winPnl:SetParent(case)

                local cursorX, cursorY = case:ScreenToLocal(pX, pY)
                winPnl:SetPos(cursorX, cursorY)

                // I need to create a new panel, since removing it from the ItemScroller would shift others panels
                local p = vgui.Create("AShop_ShopItem", case)
                p:SetSize(itemWidth, ashop.GetSize(189))
                p:SetPos(cursorX, cursorY)

                function p:Paint()
                    p:SetItem(nil, itemID, true)
                end

                if rarity.notif_unboxsound then
                    if string.StartsWith(rarity.notif_unboxsound, "http") then
                        sound.PlayURL(rarity.notif_unboxsound, "", function(station, errorID, errorName)
                            if IsValid(station) then
                                station:Play()
                            else
                                print("[AShop] Invalid case opening URL: ", errorID, errorName)
                            end
                        end)
                    else
                        surface.PlaySound(rarity.notif_unboxsound)
                    end
                end

                holder:MoveTo(case:GetWide()/2, holder:GetY(), 0.75)
                itemScroller:MoveTo(itemScroller:GetX() - case:GetWide()/2 + itemWidth, 0, 0.75)
                holder:SizeTo(0, -1, 0.75, 0, nil, function()
                    itemScroller:Remove()
                    holder:Remove()

                    p:MoveTo(case:GetWide()/2 - itemWidth/2, p:GetY(), 0.4, 0, 0.5)
                    local c = CurTime()

                    local quitButton = vgui.Create('DButton', case)
                    quitButton:SetPos(case:GetWide()/2 - itemWidth/2, p:GetY() + p:GetTall() + case:GetTall() * 0.02)
                    quitButton:SetFont('ashop_16')
                    quitButton:SetText(ashop.L('Close'))
                    quitButton:SetTextColor(ashop.GetColor('White'))
                    quitButton:SetSize(itemWidth, select(2, quitButton:GetContentSize()) * 1.5)

                    local h,s,v = ColorToHSV(caseClr)
                    s = 0.8
                    v = 0.2
                    local blackClr = HSVToColor(h,s,v)
                    function quitButton:Paint(w, h)
                        draw.RoundedBox(ashop.Config.round, 0, 0, w, h, blackClr or ashop.GetColor('Grad1_0'))
                    end
                    
                    function quitButton:DoClick()
                        case:Remove()
                    end

                    function quitButton:OnCursorEntered()
                        self.clr = ashop.GetColor('White')
                        self:SetTextColor(caseClr)
                    end
            
                    function quitButton:OnCursorExited()
                        self.clr = nil
                        self:SetTextColor(ashop.GetColor('White'))
                    end

                    function quitButton:Paint(w, h)
                        draw.RoundedBox(ashop.Config.round, 0, 0, w, h, self.clr or caseClr)
                    end

                    function case:PaintOver(w, h)
                        local r = math.min(1, (CurTime() - c)*4)
                        // Detach our item panel
                        white50.a = math.ease.InOutQuad(r) * 200 + 55
                        draw.SimpleText(ashop.L('Obtained'), 'ashop_60_600', w/2, p:GetY() - h*0.02, white50, 1, 4)

                        local part = particleEmitterItem:Add( matCircle, caseEndPos + Vector(0, 0, 80) ) -- Create a new particle at pos
                        if ( part ) then
                            part:SetDieTime( 3 ) -- How long the particle should "live"
                        
                            part:SetStartAlpha( math.Rand(20, 150) ) -- Starting alpha of the particle
                            part:SetEndAlpha( 0 ) -- Particle size at the end if its lifetime
                        
                            part:SetStartSize( math.Rand(0.3, 0.4) ) -- Starting size
                            part:SetEndSize( 0 ) -- Size when removed

                            local clr = (Color(rarityItemClrHSV.r, rarityItemClrHSV.g, rarityItemClrHSV.b):ToVector():GetNormalized() * math.random(-15, 15)):ToColor()
                            part:SetColor(clr.r + rarityItemClrHSV.r, clr.g + rarityItemClrHSV.g, clr.b + rarityItemClrHSV.b)
                        
                            part:SetGravity( Vector( 0, 0, 0 ) ) -- Gravity of the particle
                
                            local vec = VectorRand(-15, 15)
                            //vec.y = -5
                            part:SetVelocity( vec ) -- Initial velocity of the particle
                        end
                    end
                end)
            end)

            for i=0, itemNum + 9 do
                local p = vgui.Create("AShop_ShopItem", itemScroller)
                p:Dock(LEFT)
                p.OutlineOverride = 0
                p:SetSize(itemWidth, ashop.GetSize(189))
                
                function p:Paint()
                    p:SetItem(nil, generatedItems[i+1], true)
                end

                pnls[i+1] = p
            end
        end)
    end

    local findStickersMat = "models/akulla/case/shared/sticker"
    for k, v in ipairs(mdl:GetMaterials()) do
        if v == findStickersMat then
            findStickersMat = v
            break
        end
    end

    for k, v in pairs({
        [4] = {findMat(mdl, "sticker")},
        [7] = {findMat(mdl, "body")},
        [8] = {findMat(mdl, "colorized")}
    }) do
        if item.metadata[k] then
            local removeFunc = ashop.ui.setMaterialByLink(item.metadata[k], {
                ["$translucent"] = 1,
                ["$vertexalpha"] = 1,
                ["$vertexcolor"] = 1
            }, function(mat)
                mat = mat

                if isfunction(mat) then
                    local thinkFunc = case.Think
                    function case:Think()
                        local mat = mat()

                        for i, j in ipairs(v) do
                            mdl:SetSubMaterial(j-1, "!" .. mat:GetName())
                        end

                        if thinkFunc then
                            thinkFunc(self)
                        end
                    end
                else
                    for i, j in ipairs(v) do
                        mdl:SetSubMaterial(j-1, "!" .. mat:GetName())
                    end
                end
            end, 'UnlitGeneric')

            if removeFunc then
                local f = case.OnRemove
                function case:OnRemove()
                    removeFunc()

                    if f then f(self) end
                end
            end
        end
    end

    function case:Paint(w, h)
        // Get Imgur link
        surface.SetMaterial(bg)
        surface.SetDrawColor(255, 255, 255, 255*0.1*ashop.menu.formAlpha)
        surface.DrawTexturedRect(0, 0, w, h)

        surface.SetMaterial(grad)
        surface.SetDrawColor(caseClr)
        surface.DrawTexturedRect(0, h*0.7, w, h*0.3 )

        //local c = mdl:GetColor()
        //render.SetColorModulation( c.r/255, c.g/255, c.b/255 )
        render.SuppressEngineLighting( true )

        local xS, yS = self:LocalToScreen(0, 0)
        cam.Start3D(eyePos, ang, 110, xS, yS, w, h)
            local part = particleEmitter:Add( matCircle, p + Vector(0, math.random(-100, 105), -70) ) -- Create a new particle at pos
            if ( part ) then
                part:SetDieTime( 3 ) -- How long the particle should "live"
            
                part:SetStartAlpha( math.Rand(20, 170) ) -- Starting alpha of the particle
                part:SetEndAlpha( 0 ) -- Particle size at the end if its lifetime
            
                part:SetStartSize( math.Rand(0.2, 0.6) ) -- Starting size
                part:SetEndSize( 0 ) -- Size when removed
                part:SetColor(clrEffect.r, clrEffect.g, clrEffect.b)
            
                part:SetGravity( Vector( 0, 0, 0.5 ) ) -- Gravity of the particle
    
                local vec = VectorRand(-5, 5)
                vec.z = math.Rand(2, 10)
                //vec.y = -5
                part:SetVelocity( vec ) -- Initial velocity of the particle
            end
    
            particleEmitter:Draw()
            particleEmitterItem:Draw()

            render.SuppressEngineLighting( false )
            cam.IgnoreZ(true)

            render.SuppressEngineLighting( true )

            render.SetLightingOrigin( eyePos )
            render.ResetModelLighting( 0.01, 0.01, 0.01 )
            render.SetColorModulation( 1, 1, 1 )
            render.SetBlend(1)

            render.SetModelLighting( BOX_TOP, 1, 1, 1 )
            render.SetModelLighting( BOX_BACK, 0.3, 0.3, 0.3 )
            render.SetModelLighting( BOX_LEFT, 1, 1, 1 )

            mdl:DrawModel()

            cam.IgnoreZ(false)
            render.SuppressEngineLighting( false )
        cam.End3D()

        //render.SetColorModulation( 1, 1, 1 )

    end
end

OBJECT_TYPE.ExtraMenuOptions = {
    [ashop.L('Inspect')] = function(plyItemTable, item, displayer, p)
        createPnl(item, plyItemTable)
    end,
}

matproxy.Add({
    name = "AShopCase", 
    init = function( self, mat, values )
        -- Store the name of the variable we want to set
        self.ResultTo = values.resultvar
    end,
    bind = function( self, mat, ent )
        if ( ent.AShopCase ) then
            mat:SetVector( self.ResultTo, ent.AShopCase:ToVector() )
        end
    end 
})

matproxy.Add({
    name = "AShopCase2", 
    init = function( self, mat, values )
        -- Store the name of the variable we want to set
        self.ResultTo = values.resultvar
    end,
    bind = function( self, mat, ent )
        if ( ent.AShopCase2 ) then
            mat:SetVector( self.ResultTo, ent.AShopCase2:ToVector() )
        end
    end 
})

//
local itemBgClr = ashop.GetColor('ItemBg')
local itemBgClrR, itemBgClrG, itemBgClrB = ashop.GetColor('ItemBg'):Unpack()
local white = ashop.GetColor('White')

local grad = Material('akulla/gradient-d')
local circle = Material('akulla/circle.png', 'smooth')

net.Receive("AShop_CaseOpeningAlert", function()
    local ply = net.ReadPlayer()

    if !IsValid(ply) then return end

    local itemID = net.ReadUInt(ashop.Config.BitsItemID)
    local obtainedItem = ashop.items[itemID]
    local rarity = ashop.rarity[obtainedItem.rarity]
    local rarityStyle = ashop.itemShopEffects[rarity.style]
    local cR = ashop.rarity[obtainedItem.rarity]
    local objectType = ashop.object_types[obtainedItem.object_types]

    if ashop.Config.UnboxChatPrint then
        chat.AddText(ashop.L("Unbox", ply:Nick()), ":", Color(rarity.r, rarity.g, rarity.b), obtainedItem.name)
        return
    end

    local textSizeMain = draw.GetFontHeight('ashop_32_600')
    local textSizeSub = draw.GetFontHeight('ashop_24_600')
    local m = ashop.GetSize(8)

    surface.SetFont("ashop_32_600")
    local w = surface.GetTextSize(obtainedItem.name)

    surface.SetFont("ashop_16")
    local w2 = surface.GetTextSize(ashop.L("Unbox", ply:Nick()))
    local h = textSizeMain + textSizeSub + m * 4

    local p = vgui.Create('EditablePanel')
    p:SetSize(m * 4 + math.max(w, w2) + h + m * 2, h)
    p:DockPadding(m * 2, m * 2, m * 2, m * 2)
    local y = ScrH()*0.25 - p:GetTall()/2
    p:SetPos(-p:GetWide(), y)

    local start = CurTime()
    local time = ashop.Config.notif_time or 5
    local holdDiv = ashop.Config.notif_holdDiv or 5
    local holdPart = ashop.Config.notif_holdPart or 3

    if rarity.notif_unboxsound and (ply != LocalPlayer() or !IsValid(ashop.menu)) then
        if string.StartsWith(rarity.notif_unboxsound, "http") then
            sound.PlayURL(rarity.notif_unboxsound, "", function(station, errorID, errorName)
                if IsValid(station) then
                    station:Play()
                else
                    print("[AShop] Invalid case opening URL: ", errorID, errorName)
                end
            end)
        else
            surface.PlaySound(rarity.notif_unboxsound)
        end
    end

    function p:Think()
        local diff = 1 - (start + time - CurTime()) / time
        local value = 0

        if diff < 1 / holdDiv then
            value = math.ease.InOutCubic(diff * holdDiv) / 2
        elseif diff > 1 / holdDiv * (holdPart + (holdDiv - holdPart) / 2) then
            local cur = diff - (1 / holdDiv) * (holdPart + (holdDiv - holdPart) / 2)
            local localDiff = cur * holdDiv

            value = 0.5 + math.ease.InOutCubic(localDiff) / 2
        else
            value = 0.5
        end

		self:SetX((ScrW() + self:GetWide()) * value - self:GetWide())
	end

    timer.Simple(time, function()
        p:Remove()
    end)

    local container = vgui.Create('EditablePanel', p)
    container:Dock(LEFT)
    container:SetWide(h - m * 4)
    container:DockMargin(0, 0, m, 0)

    if obtainedItem.picture_link then
        local mat
        function container:Paint(w, h)
            local m = isfunction(mat) and mat() or mat
    
            if m and !m:IsError() then
                local mW = math.min(w*0.6, h*0.6)
                surface.SetDrawColor(255, 255, 255)
                surface.SetMaterial(m)
                surface.DrawTexturedRect((w - mW)/2, h*0.2, mW, mW)
            end
        end
                
        local removeFunc = ashop.ui.setMaterialByLink(obtainedItem.picture_link, {
            ["$translucent"] = 1,
            ["$vertexalpha"] = 1,
            ["$vertexcolor"] = 1
        }, function(m)
            mat = m
        end, 'UnlitGeneric')
    
        if removeFunc then
            function container:OnRemove()
                removeFunc()
            end
        end
    elseif objectType.UI_FILL then
        local ModelDrawTable = nil
        _, ModelDrawTable = objectType.UI_FILL(nil, obtainedItem, container, container, h - m * 4,
            h - m * 4, false, true)
        container.ModelDrawTable = ModelDrawTable
    end

    local title = vgui.Create('DLabel', p)
    title:Dock(TOP)
    title:SetText(ashop.L("Unbox", ply:Nick()))
    title:SetFont('ashop_16')
    title:SetTextColor(ColorAlpha(color_white, 120))
    title:SetTall(textSizeSub)
    title:SetContentAlignment(2)
    //title:DockMargin(0, 0, 0, m)

    local title2 = vgui.Create('DLabel', p)
    title2:Dock(TOP)
    title2:SetText(obtainedItem.name)
    title2:SetFont('ashop_32_600')
    title2:SetTextColor(color_white)
    title2:SetTall(textSizeMain)
    title2:SetContentAlignment(8)

    function p:Paint(w, h)
        if !p.outlinedItemBox then
            p.outlinedItemBox, p.polyshape = ashop.ui.RoundedBoxOutlined(p.OutlineOverride or ashop.Config.round, 0, 0, w, h, itemBgClr, rarity.clr, 2, function()
                surface.SetMaterial(grad)
                surface.SetDrawColor(cR.r, cR.g, cR.b, 25)
                surface.DrawTexturedRect(0, h*0.6, w, h*0.4 )
            end)
        end

        if rarityStyle and rarityStyle.preDraw then
			if !self.isEquipped then
				ashop.StartStencil()
					draw.NoTexture()
					surface.SetDrawColor(itemBgClrR, itemBgClrG, itemBgClrB)
					surface.DrawPoly(self.polyshape)
			end

			ashop.ReplaceStencil(1)

			if rarityStyle then
				rarityStyle.preDraw(self, w, h, self.isEquipped, rarity.clr)
			end

			surface.SetDrawColor(cR.r, cR.g, cR.b, 20)
			surface.SetMaterial(circle)
			surface.DrawTexturedRect(w*0.1, h*0.1, w*0.8, w*0.8)
        end

        self.outlinedItemBox(tobool((rarityStyle and rarityStyle.preDraw) or self.isEquipped))
    end
end)

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/entities/cl_entity.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = "Entities"
OBJECT_TYPE.UniqueIdentifier = "Entities"

function OBJECT_TYPE.UI_FILL(plyItem, item, pnl, parent, w, h, noCircle, fullSize)
    local circleParent = vgui.Create("EditablePanel", pnl)
    circleParent:SetSize(w, h)
    circleParent:SetMouseInputEnabled(false)

    local entClass = item.metadata[1]

    // wtf ?: ents.Create cannot be called while rendering
    /*
    local e = ents.CreateClientside(entClass)

    if IsValid(e) then
        mdl = e:GetModel()
        e:Remove()
    end
    */
    local mdl

    if !mdl then
        local eT = scripted_ents.Get(entClass)
        mdl = eT.Model or eT.model or item.metadata[2]
    end

    // rip
    local circleParent = vgui.Create("EditablePanel", pnl)
    circleParent:SetSize(w, h)
    circleParent:SetMouseInputEnabled(false)

    local c = fullSize and math.max(w, h) or math.max(w, h) * 0.6

    if mdl then
        local SpawnI = vgui.Create( "SpawnIcon" , circleParent ) -- SpawnIcon
        SpawnI:SetSize(c, c)
        SpawnI:Center()
        SpawnI:SetModel( mdl ) -- Model we want for this spawn icon
        SpawnI:SetMouseInputEnabled(false)
    else
        local mat = Material('vgui/entities/' .. entClass)

        if item.metadata[2] and (!mat or mat:IsError()) then return end

        local SpawnI = vgui.Create( "DPanel" , circleParent ) -- SpawnIcon
        SpawnI:SetSize(c, c)
        SpawnI:Center()

        function SpawnI:Paint(w, h)
            surface.SetMaterial(mat)
            surface.SetDrawColor(255, 255, 255)
            surface.DrawTexturedRect(0, 0, w, h)
        end
    end
end

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/finishers/sh_finishers.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/finishers/premade_finishers/cl_clientpart.lua:
net.Receive('ashop_finisherslowmotion', function()
    local c = CurTime()

    hook.Add( "RenderScreenspaceEffects", "ashop_finisherslowmotion", function()
        local diff = (CurTime() - c)
        if diff > 1 then
            hook.Remove( "RenderScreenspaceEffects", "ashop_finisherslowmotion")
            return
        end

        DrawColorModify({
            [ "$pp_colour_brightness" ] = 0,
            [ "$pp_colour_contrast" ] = 1.2,
            [ "$pp_colour_colour" ] = 1.2,
            [ "$pp_colour_mulb" ] = 5 * (1 - diff),
            [ "$pp_colour_addr" ] = -0.05,
            [ "$pp_colour_addg" ] = -0.05,
            [ "$pp_colour_addb" ] = 1 * (1 - diff),
        })
    end)
end)
--addons/ashop/lua/ashop/code/object_types/finishers/premade_finishers/sh_sharedfinishers.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/pets/sh_pets.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('PetClass')
OBJECT_TYPE.DefaultRender = "Accessories"

OBJECT_TYPE.ItemParameters = {
    [1] = {
        name = ashop.L('PlayerModel1'),
        type = TYPE_STRING,
        options = {
            required = true
        }
    },

    [2] = {
        name = ashop.L('Skin'),
        type = "UInt8",
    },

    [3] = {
        name = ashop.L('Finisher_3') .. " Y",
        type = "UInt6",
    },

    [4] = {
        name = ashop.L('Pet_4'),
        type = 'LIST',
        options = {
            listObjects = {
                {TYPE_STRING, ashop.L('Pet_Alt')},
                {"FLOAT", ashop.L('Pet_Alt2')},
            },
            required = true
        },
    },

    [5] = {
        name = ashop.L('Pet_5'),
        type = 'LIST',
        options = {
            listObjects = {
                {TYPE_STRING, ashop.L('Pet_Alt')},
                {"FLOAT", ashop.L('Pet_Alt2')},
            },
            required = true
        },
    },

    [6] = {
        name = ashop.L('Pet_6'),
        type = 'LIST',
        options = {
            listObjects = {
                {TYPE_STRING, ashop.L('Pet_Alt')},
                {"FLOAT", ashop.L('Pet_Alt2')},
            },
        },
    },

    [7] = {
        name = ashop.L('Pet_7'),
        type = 'LIST',
        options = {
            listObjects = {
                {TYPE_STRING, ashop.L('Pet_Alt')},
                {"FLOAT", ashop.L('Pet_Alt2')},
            },
        },
    },

    [8] = {
        name = ashop.L('Pet_8'),
        type = TYPE_STRING,
        userEditable = true,
    },

    [9] = {
        name = ashop.L('Scale'),
        type = "FLOAT",
    }
}

OBJECT_TYPE.SlotDefault = 1
OBJECT_TYPE.UniqueIdentifier = "Pets"

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/title_code/color/cl_colors.lua:
// Optimisation
// We cache curtime every frame
// IT CAN be useless if nobody have a title
// But on some title, there can be 20 curtime calls
// And there can be multiples players
// For a micro, slight, 0.00001 fps lost, I prefer to do this optimisation
local cachedCurTime = CurTime()

hook.Add('PreRender', "ashop_cacheCurTimeTitle", function()
    cachedCurTime = CurTime()
end)

ashop.titles.colors[1] = {
    name = "Country - USA",
    draw = function(i, textSize)
        local rat = 1 / textSize * i

        if rat < 0.30 then
            return 10, 49, 97
        elseif i % 2 == 0 then
            return 179, 25, 66
        else
            return 255, 255, 255
        end
    end
}

ashop.titles.colors[2] = {
    name = "Rainbow2",
    draw = function(i, textSize)
        local r = ((20 * ((i / textSize) * i)) + cachedCurTime * 120) % 360
        local col = HSVToColor( r, 0.5, 1 )
        return col.r, col.g, col.b
    end
}

ashop.titles.colors[3] = {
    name = "Rainbow",
    draw = function(i, textSize)
        local col = HSVToColor( (cachedCurTime*50 + i * 4) % 360, 1, 1 )
        return col.r, col.g, col.b
    end
}

ashop.titles.colors[4] = {
    name = "Gradient - Violet",
    draw = function(i, textSize)
        local timing = math.abs((cachedCurTime*50 + i * 4) % 180 - 90)
        local col = HSVToColor( timing + 270, 1, 1 )
        return col.r, col.g, col.b
    end
}

ashop.titles.colors[5] = {
    name = "Cutted - Violet",
    draw = function(i, textSize)
        local timing = math.abs((cachedCurTime*50 + i * 25) % 180 - 90)
        local col = HSVToColor( timing + 270, 1, 1 )
        return col.r, col.g, col.b
    end
}

ashop.titles.colors[6] = {
    name = "Cutted - Green",
    draw = function(i, textSize)
        local timing = math.abs((cachedCurTime*50 + i * 25) % 180 - 90)
        local col = HSVToColor( timing + 90, 1, 1 )
        return col.r, col.g, col.b
    end
}

ashop.titles.colors[7] = {
    name = "Cutted - Blue",
    draw = function(i, textSize)
        local timing = math.abs((cachedCurTime*50 + i * 25) % 180 - 90)
        local col = HSVToColor( timing + 180, 1, 1 )
        return col.r, col.g, col.b
    end
}

ashop.titles.colors[8] = {
    name = "Cutted - Orange",
    draw = function(i, textSize)
        local timing = math.abs((cachedCurTime*50 + i * 25) % 180 - 90)
        local col = HSVToColor( timing + 330, 1, 1 )
        return col.r, col.g, col.b
    end
}

ashop.titles.colors[9] = {
    name = "Cutted - Rose",
    draw = function(i, textSize)
        local timing = math.abs((cachedCurTime*50 + i * 4) % 180 - 90)
        local col = HSVToColor( timing + 270, 0.5, 1 )
        return col.r, col.g, col.b
    end
}

ashop.titles.colors[10] = {
    name = "Sequins",
    draw = function(i, textSize)
        local c = cachedCurTime

        local timing = math.abs((c * 50 + i * 25) % 180 - 90)
        local col = HSVToColor( timing + 270, 1, math.abs(c%2 - 1) + i/4 )
        return col.r, col.g, col.b
    end
}

ashop.titles.colors[11] = {
    name = "Sequins - Red",
    draw = function(i, textSize)
        local c = cachedCurTime
        local timing = math.abs((c*50 + i * 25) % 180 - 90)
        local col = HSVToColor( timing + 270, 1, math.abs(c%2 - 1) + i/4 )
        return col.r, 0, 0
    end
}

ashop.titles.colors[12] = {
    name = "Sequins - Blue",
    draw = function(i, textSize)
        local c = cachedCurTime
        local timing = math.abs((c*50 + i * 25) % 180 - 90)
        local col = HSVToColor( timing + 180, 1, math.abs(c%2 - 1) + i/4 )
        return 0, 0, col.b
    end
}

ashop.titles.colors[13] = {
    name = "Sequins - Green",
    draw = function(i, textSize)
        local c = cachedCurTime
        local timing = math.abs((c*50 + i * 25) % 180 - 90)
        local col = HSVToColor( timing + 90, 1, math.abs(c%2 - 1) + i/4 )
        return 0, col.g, 0
    end
}

ashop.titles.colors[14] = {
    name = "Country - Spanish",
    draw = function(i, textSize)
        local rat = 1 / textSize * i

        if rat > 0.33 and rat < 0.66 then
            return 241, 191, 0
        else
            return 170, 21, 27
        end
    end
}

ashop.titles.colors[15] = {
    name = "Country - France",
    draw = function(i, textSize)
        local rat = 1 / textSize * i

        if rat < 0.33 then
            return 50, 50, 255
        elseif rat < 0.66 then
            return 255, 255, 255
        else
            return 255, 50, 50
        end
    end
}

ashop.titles.colors[16] = {
    name = "Country - Morocco",
    draw = function(i, textSize)
        local rat = 1 / textSize * i

        if rat > 0.3 and rat < 0.70 then
            return 0, 150, 0
        else
            return 255, 50, 50
        end
    end
}

ashop.titles.colors[17] = {
    name = "Country - Belgium",
    draw = function(i, textSize)
        local rat = 1 / textSize * i

        if rat < 0.33 then
            return 0, 0, 0
        elseif rat < 0.66 then
            return 253, 218, 36
        else
            return 239, 51, 64
        end
    end
}

ashop.titles.colors[18] = {
    name = "Country - Algeria",
    draw = function(i, textSize)
        local rat = 1 / textSize * i

        if rat < 0.4 then
            return 0, 150, 0
        elseif rat < 0.6 then
            return 255, 50, 50
        else
            return 255, 255, 255
        end
    end
}

ashop.titles.colors[19] = {
    name = "Country - Quebec",
    draw = function(i, textSize)
        local rat = 1 / textSize * i

        if rat > 0.35 and rat < 0.65 then
            return 250, 250, 250
        else
            return 0, 31, 151
        end
    end
}

local gradOP1 = Color(232, 67, 147)
local gradOP2 = Color(253, 203, 110)
ashop.titles.colors[20] = {
    name = "Gradient - Orange-Pink",
    draw = function(i, textSize)
        local rat = 1 / textSize
        return ashop.ui.FastColorTo(gradOP1, gradOP2, rat * i)
    end
}

ashop.titles.colors[21] = {
    name = "Crimson",
    draw = function(i, textSize)
        local rand = math.random(0, 2)

        if rand == 0 then
            return 192, 57, 43
        elseif rand == 1 then
            return 92, 39, 33
        else
            return 30, 30, 30
        end
    end
}

ashop.titles.colors[22] = {
    name = "Summer",
    draw = function(i, textSize)
        if i%3 == 0 then
            return 135, 206, 235
        elseif i%3 == 1 then
            return 220, 192, 139
        else
            return 255, 255, 255
        end
    end
}

local Hacking1 = Color(231, 240, 241)
local Hacking2 = Color(46, 204, 113)

ashop.titles.colors[23] = {
    name = "Hacking",
    draw = function(i, textSize)
        local odd = (i % 2 == 0) and 0x0000001 or 0x0000000
        local b = (cachedCurTime*20) % 10 < 5 and 0x0000001 or 0x0000000
        local cond = (bit.bxor(b, odd) == 0x0000001) and Hacking1 or Hacking2
    
        return cond.r, cond.g, cond.b
    end
}

ashop.titles.colors[24] = {
    name = "Uranium",
    draw = function(i, textSize)
        return 0, 147, 255
    end
}

// New
ashop.titles.colors[25] = {
    name = "Country - India",
    draw = function(i, textSize)
        local rat = 1 / textSize * i
        if rat < 0.33 then
            return 255,143,28
        elseif rat < 0.45 then
            return 255,255,255
        elseif rat < 0.55 then
            return 37,14,98
        elseif rat < 0.8 then
            return 255,255,255
        else
            return 80,158,47
        end
    end
}

ashop.titles.colors[26] = {
    name = "Country - China",
    draw = function(i, textSize)
        local rat = 1 / textSize * i
        if rat < 0.1 or rat > 0.4 then
            return 252, 227, 0
        else
            return 200, 16, 46
        end
    end
}

ashop.titles.colors[27] = {
    name = "Country - Japan",
    draw = function(i, textSize)
        local rat = 1 / textSize * i
        if rat < 0.33 or rat > 0.66 then
            return 255, 255, 255
        else
            return 239,51,64
        end
    end
}

ashop.titles.colors[28] = {
    name = "Country - Russian",
    draw = function(i, textSize)
        local rat = 1 / textSize * i
        if rat < 0.33 then
            return 255, 255, 255
        elseif rat < 0.66 then
            return 0, 114, 206
        else
            return 239, 51, 64
        end
    end
}
--addons/ashop/lua/ashop/code/object_types/title_code/text/cl_text.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/trails/cl_trails.lua:
local alreadyLoaded = {}

function ashop.loadParticle(fileName, particleName)
    if !fileName then return end
    if !alreadyLoaded[fileName] then
        alreadyLoaded[fileName] = {}
        game.AddParticles( fileName )
    end

    if !particleName then return end
    if !alreadyLoaded[fileName][particleName] then
        alreadyLoaded[fileName][particleName] = true
        PrecacheParticleSystem( particleName )
    end
end

local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('TrailsClass')
OBJECT_TYPE.UniqueIdentifier = "Trails"

function OBJECT_TYPE.UI_FILL(plyItem, item, pnl, parent, w, h, noCircle, fullSize)
    local circleParent = vgui.Create("EditablePanel", pnl)
    circleParent:SetSize(w, h)
    circleParent:SetMouseInputEnabled(false)

    local c = fullSize and math.max(w, h) or math.max(w, h) * 0.4

    // What an hack...
    local SpawnI = vgui.Create( "DPanel" , circleParent ) -- SpawnIcon
    SpawnI:SetSize(c, c)
    SpawnI:Center()
    
    local r1
    function SpawnI:Paint(w, h)
        if !r1 then
            r1 = ashop.ui.RoundedBox(ashop.Config.round, 0, 0, w, h)
        end

        ashop.StartStencil()
            surface.SetDrawColor(1,1,1,1)
            draw.NoTexture()
            surface.DrawPoly(r1)
        ashop.ReplaceStencil(1)
            surface.SetDrawColor(255, 255, 255)
            surface.SetTexture(surface.GetTextureID(item.metadata[2]))
            surface.DrawTexturedRect(0, 0, w, h)
        ashop.EndStencil()
    end
end

// Rendering
function OBJECT_TYPE.OnLocalEquip(ply, plyItem, item)
    OBJECT_TYPE.OnEquip(ply, plyItem, item)
end

function OBJECT_TYPE.OnEquip(ply, plyItem, item)
    if !item.metadata[1] then
        OBJECT_TYPE.OnRemove(ply, plyItem, item)
        assert(item.metadata[6], "Trail particle-based don't have a file dir, item name: " .. item.name)

        ashop.loadParticle(item.metadata[6], item.metadata[2])

        // Get attachment
        if item.metadata[3] then
            local attach = ply:LookupAttachment(item.metadata[4] or '') or 0

            local particle = CreateParticleSystem( ply, item.metadata[2], PATTACH_POINT_FOLLOW, attach )
            plyItem.particle = {particle}
        else
            // Look at these tricks bro
            local mdl = ClientsideModel("models/hunter/blocks/cube025x025x025.mdl")
            mdl:SetMoveType( MOVETYPE_NONE )
            mdl:SetNoDraw(true)

            local b = ply:LookupBone(item.metadata[4] or '')
            
            if !b then 
                print('[AShop] This bone does not exist on this model:', ply:GetModel())
                print('[AShop] We will use the first, found bone')
            end

            local boneVec, boneAngle = ply:GetBonePosition(b or 1)
            mdl:Spawn()
            mdl:SetAngles(ply:GetAngles())
            mdl:SetPos(ply:GetPos())

            mdl:FollowBone(ply, b or 1)
            plyItem.particle = {CreateParticleSystem( mdl, item.metadata[2], 4, 0 ), mdl}
        end
    end
end

function OBJECT_TYPE.OnLocalRemove(ply, plyItem, item)
    OBJECT_TYPE.OnRemove(ply, plyItem, item)
end

// All players
function OBJECT_TYPE.OnMetadataUpdate(ply, plyItem, item, metadataKey, oldValue, newValue)
    if IsValid(plyItem.particle) then
        plyItem.particle:Remove()
    end

    if !item.metadata[1] then return end

    OBJECT_TYPE.OnEquip(ply, plyItem, item)
end

function OBJECT_TYPE.OnRemove(ply, plyItem, item)
    if !plyItem.particle then return end

    if plyItem.particle[1] and plyItem.particle[1]:IsValid() then
        plyItem.particle[1]:StopEmission(false, true)
    end

    if IsValid(plyItem.particle[2]) then
        plyItem.particle[2]:Remove()
    end

    plyItem.particle = nil
end

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/object_types/weapon/cl_weapon.lua:
local OBJECT_TYPE = {}

OBJECT_TYPE.Name = ashop.L('TempWeaponClass')
OBJECT_TYPE.UniqueIdentifier = "TempWeapons"

function OBJECT_TYPE.UI_FILL(plyItem, item, pnl, parent, w, h, noCircle)
    local circleParent = vgui.Create("EditablePanel", pnl)
    circleParent:SetSize(w, h)
    circleParent:SetMouseInputEnabled(false)

    local wep = weapons.Get(item.metadata[1]) or ashop.DefaultWeaponsHL2[item.metadata[1]]
    local key

    if string.find(item.metadata[1], 'fas2') then
        key = "WM"
    elseif ashop.DefaultWeaponsHL2[item.metadata[1]] then
        key = 1
    else
        key = "WorldModel"
    end

    if !wep then return end

    local m = vgui.Create( "DModelPanel" , pnl ) -- SpawnIcon
    m:Dock(FILL)
    m:SetModel( wep[key] ) -- Model we want for this spawn icon
    m:SetMouseInputEnabled(false)
    m:SetPaintedManually(true)

    m.FarZ = 4096*10

    local mn, mx = m.Entity:GetRenderBounds()
    local size = 0
    size = math.max( size, math.abs(mn.x) + math.abs(mx.x) )
    size = math.max( size, math.abs(mn.y) + math.abs(mx.y) )
    size = math.max( size, math.abs(mn.z) + math.abs(mx.z) )

    m:SetFOV( 45 )
    m:SetLookAt( (mn + mx) * 0.5 )
    m:SetCamPos( Vector(size, size, 0))

    function m:LayoutEntity() end

    function m:PreDrawModel(ent)
        render.SetLightingMode(1)
    end

    function m:PostDrawModel(ent)
        render.SetLightingMode(0)
    end

    if item.metadata[4] then
        m:SetCamPos(item.metadata[4])
    end

    return true, {m}
end

ashop.RegisterObjectType(OBJECT_TYPE)
--addons/ashop/lua/ashop/code/ui/item_shop_effects/sh_pixelrain.lua:
ashop.itemShopEffects = ashop.itemShopEffects or {}
ashop.itemShopEffects[3] = ashop.itemShopEffects[3] or {}

local grad = Material('akulla/gradient-d')
local l = {
    Material('akulla/pixel_1.png', 'smooth'),
    Material('akulla/pixel_2.png', 'smooth'),
    Material('akulla/pixel_3.png', 'smooth'),
    Material('akulla/pixel_4.png', 'smooth'),
}

local eyePos = Vector()
local ang = Angle()
local grav = Vector( 0, 0, 0.2 )

ashop.itemShopEffects[3].preDraw = function(pnl, w, h, equipped, clr)
    pnl.rarityClr25 = pnl.rarityClr25 or ColorAlpha(clr, 255*0.25)

    surface.SetMaterial(grad)
    surface.SetDrawColor(pnl.rarityClr25)
    surface.DrawTexturedRect(0, h*0.6, w, h*0.4 )

    pnl.lastSpawn = {}

    local xS, yS = pnl:LocalToScreen(0, 0)
    cam.Start3D(eyePos, ang, nil, xS, yS, w, h)
        local p = eyePos + ang:Forward()*5 + ang:Up()*15
        local c = CurTime()

        if !pnl.particleEmitter then
            pnl.particleEmitter = ParticleEmitter(p)
            pnl.particleEmitter:SetNoDraw(true)
        end

        local randomY = math.Round(math.random(-6, 6))

        if pnl.lastSpawn[randomY] and pnl.lastSpawn[randomY]+0.2 > c then return end

        pnl.lastSpawn[randomY] = c
        local hV, s, v = ColorToHSV(clr)
        hV = hV + math.random(-45, 45)
        v = math.max(v - 0.1, 0)

        local cM = HSVToColor(hV, v, s)

        local part = pnl.particleEmitter:Add( l[math.random(1, 4)], p + Vector(0, randomY, -25) )
        if ( part ) then
            part:SetDieTime( 3 ) -- How long the particle should "live"
        
            part:SetStartAlpha( 255 ) -- Starting alpha of the particle
            part:SetEndAlpha( 0 ) -- Particle size at the end if its lifetime

            part:SetStartSize( math.Rand(0.3, 0.5) * (w >= h and 0.75 or 1) ) -- Starting size
            part:SetEndSize( part:GetStartSize() ) -- Size when removed
            part:SetColor(cM.r, cM.g, cM.b)
        
            part:SetGravity( grav ) -- Gravity of the particle

            local vec = VectorRand(-5, 5)
            vec.z = 10
            vec.x = 0
            vec.y = 0
            part:SetVelocity( vec ) -- Initial velocity of the particle
        end

        pnl.particleEmitter:Draw()
    cam.End3D()

    surface.SetDrawColor(clr)
    surface.DrawRect(0, h-2, w, 2)

    return true
end
--addons/ashop/lua/ashop/code/ui/panels/cl_dmenuoption.lua:

local PANEL = {}

AccessorFunc( PANEL, "m_pMenu", "Menu" )
AccessorFunc( PANEL, "m_bChecked", "Checked" )
AccessorFunc( PANEL, "m_bCheckable", "IsCheckable" )

function PANEL:Init()

	self:SetContentAlignment( 4 )
	self:SetTextInset( 32, 0 ) -- Room for icon on left
	self:SetChecked( false )

	self:SetFont("ashop_12")
	self:SetTextColor(ashop.GetColor('White'))
end

function PANEL:GetRadio() return false end
function PANEL:SetRadio() end

function PANEL:SetSubMenu( menu )

	self.SubMenu = menu

	if ( !IsValid( self.SubMenuArrow ) ) then

		self.SubMenuArrow = vgui.Create( "DPanel", self )
		self.SubMenuArrow.Paint = function( panel, w, h ) derma.SkinHook( "Paint", "MenuRightArrow", panel, w, h ) end

	end

end

function PANEL:AddSubMenu()

	local SubMenu = DermaMenu( true, self )
	SubMenu:SetVisible( false )
	SubMenu:SetParent( self )

	self:SetSubMenu( SubMenu )

	return SubMenu

end

function PANEL:OnCursorEntered()

	if ( IsValid( self.ParentMenu ) ) then
		self.ParentMenu:OpenSubMenu( self, self.SubMenu )
		return
	end

	self:GetParent():OpenSubMenu( self, self.SubMenu )

end

function PANEL:OnCursorExited()
end

function PANEL:Paint( w, h )

	derma.SkinHook( "Paint", "MenuOption", self, w, h )

	--
	-- Draw the button text
	--
	return false

end

function PANEL:OnMousePressed( mousecode )

	self.m_MenuClicking = true

	DButton.OnMousePressed( self, mousecode )

end

function PANEL:OnMouseReleased( mousecode )

	DButton.OnMouseReleased( self, mousecode )

	if ( self.m_MenuClicking && mousecode == MOUSE_LEFT ) then

		self.m_MenuClicking = false
		CloseDermaMenus()

	end

end

function PANEL:DoRightClick()

	if ( self:GetIsCheckable() ) then
		self:ToggleCheck()
	end

end

function PANEL:DoClickInternal()

	if ( self:GetIsCheckable() ) then
		self:ToggleCheck()
	end

	if ( self.m_pMenu ) then

		self.m_pMenu:OptionSelectedInternal( self )

	end

end

function PANEL:ToggleCheck()

	self:SetChecked( !self:GetChecked() )
	self:OnChecked( self:GetChecked() )

end

function PANEL:OnChecked( b )
end

function PANEL:PerformLayout( w, h )

	self:SizeToContents()
	self:SetWide( self:GetWide() + 30 )

	local w = math.max( self:GetParent():GetWide(), self:GetWide() )

	self:SetSize( w, 22 )

	if ( IsValid( self.SubMenuArrow ) ) then

		self.SubMenuArrow:SetSize( 15, 15 )
		self.SubMenuArrow:CenterVertical()
		self.SubMenuArrow:AlignRight( 4 )

	end

	DButton.PerformLayout( self, w, h )

end

function PANEL:GenerateExample()

	-- Do nothing!

end

derma.DefineControl( "Ashop_DMenuOption", "Menu Option Line", PANEL, "DButton" )

--addons/ashop/lua/ashop/code/ui/panels/cl_navbar.lua:
local PANEL = {}

local blurpleClr = ashop.GetColor('blurple')
local blurpleClrR, blurpleClrG, blurpleClrB = ashop.GetColor('blurple'):Unpack()
local bg = ashop.GetColor('Grad1_0')
local white = ashop.GetColor('White')

function PANEL:Init()
    local sH = ashop.GetSize(80)
    local rightPartVerticalMargin = ashop.GetSize(20)
    local moneyTextHorizontalMargin = ashop.GetSize(12)
    local moneyTextInnerHorizontalMargin = ashop.GetSize(10)

    local roundValue = ashop.Config.round
    local lp = LocalPlayer()

    // Left
    surface.SetFont("ashop_logo_top48")

    local s = "VenomShop"
    local logoW = surface.GetTextSize(s)
    local logoPanel = vgui.Create("EditablePanel", self)
    logoPanel:Dock(LEFT)
    logoPanel:SetWide(logoW + 5)

    function logoPanel:Paint(w, h)
        // this is on purpose
        draw.SimpleText(s, "ashop_logo_top48", 0, h/2, color_white, 0, 1)
        draw.SimpleTextOutlined("N", "ashop_logo_bottom54", w*0.1, h/4*3, color_white, 0, 1, 1, bg)
    end
    
    self.leftSpace = logoPanel:GetWide() * 2 + rightPartVerticalMargin

    // Right, avatar + money
    local close = vgui.Create("DButton", self)
    close:DockMargin(rightPartVerticalMargin, rightPartVerticalMargin, 0, rightPartVerticalMargin)
    close:SetWide(sH - rightPartVerticalMargin*2)
    close:Dock(RIGHT)
    close:SetText(":")
    close:SetFont("ashop_icon_20")
    close:SetTextColor(ColorAlpha(color_white, 60))

    local c = ashop.GetColor('Grad2_0')
    function close:Paint(w, h)
        draw.RoundedBox(roundValue, 0, 0, w, h, c)
    end

    function close:DoClick()
        self:GetParent():GetParent():Remove()
    end

    ashop.ui.WhiteHover(close, 30)

    // Right, avatar + money
    local avatar = vgui.Create("AShop_RoundedAvatar", self)
    avatar:DockMargin(rightPartVerticalMargin, rightPartVerticalMargin, 0, rightPartVerticalMargin)
    avatar:SetWide(sH - rightPartVerticalMargin*2)
    avatar:Dock(RIGHT)

    // Loop, so I make the 2 panels at the same moment
    local moneyObjects = {}
    for k, v in ipairs({
        {
            ashop.GetColor('pink'),
            ashop.GetColor('premiumMoneyLogo'),
            lp:ashopMoneyGet(true),
            "!",
        },

        {
            ashop.GetColor('normalMoneyBg'),
            ashop.GetColor('normalMoney'),
            lp:ashopMoneyGet(false),
            "\"",
        }
    }) do
        surface.SetFont('ashop_16')
        local tW, tH = surface.GetTextSize(v[3])
        local font = 'ashop_icon_20'

        surface.SetFont(font)
        local iW, iH = surface.GetTextSize(v[4])

        local m = vgui.Create("EditablePanel", self)
        m:Dock(RIGHT)
        m:DockMargin(rightPartVerticalMargin, rightPartVerticalMargin, 0, rightPartVerticalMargin)
        m:DockPadding(moneyTextHorizontalMargin, 0, moneyTextHorizontalMargin, 0)

        m.minWide = iW + moneyTextHorizontalMargin*2 + moneyTextInnerHorizontalMargin
        m:SetWide(tW + m.minWide)
        moneyObjects[k] = m

        function m:Paint(w, h)
            draw.RoundedBox(roundValue, 0, 0, w, h, v[1])
        end

        local logo = vgui.Create("DLabel", m)
        logo:Dock(LEFT)
        logo:SetFont(font)
        logo:SetText(v[4])
        logo:SetTextColor(v[2])
        logo:SetWide(iW)

        local text = vgui.Create("DLabel", m)
        text:Dock(FILL)
        text:SetFont('ashop_16')
        text:SetText(v[3])
        text:SetTextColor(white)
        text:SetContentAlignment(6)
        m.moneyText = text

        self['moneyPanel_' .. k] = m
    end

    hook.Add('ashop_moneyChanged', 'RefreshMoneyNavbar', function(id, amt)
        local p = moneyObjects[id == "money_premium" and 1 or 2]
        if !IsValid(p) then return end

        p.moneyText:SetText(amt)

        surface.SetFont('ashop_16')
        local tW, tH = surface.GetTextSize(amt)
        p:SetWide(p.minWide + tW)
    end)
end

function PANEL:CenterCategories(holder)
    // Refresh margin
    local rightPartVerticalMargin = ashop.GetSize(20)
    local left = self.leftSpace
    local right = 0

    for i = 1, 2 do
        local p = self['moneyPanel_' .. i]
        right = right + p:GetWide() + rightPartVerticalMargin
    end

    right = right + rightPartVerticalMargin + (self:GetTall() - rightPartVerticalMargin*2)

    // Center it now
    local sW = ashop.GetSize(1536) - ashop.GetSize(64)*2
    local lastChild = holder:GetChild(holder:ChildCount()-1)

    // (X + W) of last child - X of the first child
    lastChild:InvalidateParent(true)
    local childSize = (holder:GetChildPosition(lastChild) - holder:GetChildPosition(holder:GetChild(0))) + lastChild:GetWide()
    sW = sW - right - left - childSize

    // Can we atleast put some extra margin at left ?
    local diff = right - left

    if diff > sW then
        holder:DockMargin(0, 0, 0, 0)
    else
        sW = math.floor((sW - diff) / 2)

        holder:DockPadding(sW + diff, 0, sW, 0)
        holder:InvalidateLayout()
    end
end

function PANEL:Fill(tbl, container)
    assert(tbl, "Navbar table shouldn't be empty")

    if self.holder then
        self.holder:Remove()
    end

    local panels = {}
    local holder = vgui.Create("EditablePanel", self)
    holder:Dock(FILL)
    holder:SetMouseInputEnabled(true)

    /*
        1: Name
        2: Callback to create the UI
    */
    local lastSelected
    local rightPartVerticalMargin = ashop.GetSize(20)

    for k, v in ipairs(tbl) do
        local w25 = ashop.GetColor('White25')

        local l = vgui.Create("DButton", holder)
        l:Dock(LEFT)
        l:SetFont('ashop_18')
        l:SetTextColor(w25)
        l:SetText(v[1])
        l:SetWide(l:GetContentSize())
        l:SetContentAlignment(5)
        l:DockMargin(rightPartVerticalMargin/2, 0, rightPartVerticalMargin/2, 0)

        function l:Paint(w, h)
            if self.perc > 0 then
                l:SetTextColor(ashop.GetColor('White25', (255 - w25.a) * self.perc + w25.a))

                if self.forceanim then
                    surface.SetDrawColor(blurpleClrR, blurpleClrG, blurpleClrB)
                    draw.RoundedBox(999, w/2 - 4, h/4*3, 8, 8, blurpleClr)
                end
            end
        end

        local navbar = self
        function l:DoClick()
            if lastSelected then
                lastSelected:SetFont('ashop_18')
                lastSelected.forceanim = false
                lastSelected.perc = 0
                lastSelected:SetTextColor(ashop.GetColor('White25'))
                lastSelected:SetWide(lastSelected:GetContentSize())
            end

            self.forceanim = true
            self.perc = 1
            self:SetFont('ashop_24_600')
            self:SetWide(self:GetContentSize())
            lastSelected = self

            navbar:CenterCategories(holder)
            container:Clear()
            v[2](container)
        end

        ashop.ui.AddHoverTimer(l, 8)

        table.insert(panels, l)
    end

    // Need to, since else it would imply to make 2 branchs of code, for CenterCategories
    holder:InvalidateLayout(true)
    self:CenterCategories(holder)

    return panels
end

derma.DefineControl( "AShop_Navbar", "", PANEL, "EditablePanel" )
--addons/ashop/lua/ashop/code/ui/panels/cl_shopdisplayer.lua:
local PANEL = {}

function PANEL:Init()
    self:SetMouseInputEnabled(true)
    self:SetKeyboardInputEnabled(true)
end

local i_maxPerRow = 6

function PANEL:RemoveOwned(itemTbl)
    for k, v in ipairs(self.owned:GetChildren()) do
        if v.plyItem.id == itemTbl.id then
            v:Remove()
            break
        end
    end
end

function PANEL:AddOwned(plyItemTable, itemID)
    local lp = LocalPlayer()
    local marginVertical = ashop.GetSize(20)
    local mIcons = ashop.GetSize(10)
    if self.buyableText:GetTall() == 0 then
        self.buyableText:SetTall(select(2, self.buyableText:GetContentSize()))
        self.buyableText:DockMargin(0, marginVertical, 0, marginVertical/2)
    end

    local itemTable = ashop.items[plyItemTable.item_id]
    assert(itemTable, "ItemTable is not valid: " .. plyItemTable.item_id)
    if !self:GetRenderTable().cat[itemTable.object_types] then return end
    local object_type = ashop.object_types[itemTable.object_types]

    local p = vgui.Create("AShop_ShopItem", self.owned)
    p:SetSize(self.itemWidth, ashop.GetSize(189) - ashop.GetFontHeight('ashop_icon_25'))
    p.RealSizeW = p:GetWide()
    p.RealSizeH = p:GetTall()
    p.RealParent = self.owned
    p.HoldItemObjectType = itemTable.object_types
    p.HoldItemSubObjectType = itemTable.sub_types or 0

    local displayer = self.displayer

    function p:Paint()
        self:SetItem(plyItemTable, plyItemTable.item_id, false)
    end

    p.DoClick = function()
        displayer:EquipItem(itemID)

        // Force refresh
        p.isEquipped = true
        self:RefreshEquipped(itemTable.object_types, itemTable.sub_types)
    end

    function p:IsEquippedCheck()
        local eq = displayer.Entity.ashop_data.equipped[itemTable.object_types]
        if !eq then return false end
        if !eq[itemTable.sub_types or 0] then return false end

        for key, v in pairs(eq[itemTable.sub_types or 0]) do
            if v == itemID then
                return true
            end
        end

        return false
    end

    p.isEquipped = p:IsEquippedCheck()

    local s = self

    local function equipIfNeeded(p)
        if !displayer.Entity.ashop_data or !displayer.Entity.ashop_data.equipped or
            !displayer.Entity.ashop_data.equipped[itemTable.object_types] or
            !displayer.Entity.ashop_data.equipped[itemTable.object_types][itemTable.sub_types or 0] then
            displayer:EquipItem(itemID)
        else
            local isEquipped = p:IsEquippedCheck()

            if !isEquipped then
                displayer:EquipItem(itemID)
            end

            p.isEquipped = true

            // Refresh painting
            s:RefreshEquipped(itemTable.object_types)
        end
    end

    p.DoRightClick = function()
        CloseDermaMenus()
        local menu = vgui.Create( "AShop_DMenu", p )

        if object_type.SlotDefault then
            local tbl, c = lp:AShop_SlotStateGet(itemTable.object_types, itemTable.sub_types)
            local isAlreadyEquipped, slot = false

            for k, v in pairs(tbl) do
                if v == itemID then
                    isAlreadyEquipped = true
                    slot = k
                    break
                end
            end

            if isAlreadyEquipped then
                menu:AddOption( ashop.L('Unequip'), function()
                    net.Start('ashop_PlayerEquippedItem')
                        net.WriteUInt(plyItemTable.id, ashop.Config.BitsPlyItemID)
                        net.WriteBool(true)
                        net.WriteUInt(slot, math.ceil(math.log(c, 2)))
                    net.SendToServer()

                    // Force refresh
                    p.isEquipped = false
                    ashop.EquipChange(displayer.Entity, itemID, slot, true)
                    s:RefreshEquipped(itemTable.object_types)
                end)
            else
                menu:AddOption( ashop.L('Equip'), function()
                    if itemTable.group_restrained and ashop.groupranks[itemTable.group_restrained] and !ashop.groupranks[itemTable.group_restrained].ranks[lp:GetUserGroup()] then
                        ashop.DermaNotify(ashop.L('WrongEquipRank'), NOTIFY_ERROR, 5)
                        return
                    end

                    local tbl2, count = displayer.Entity:AShop_SlotStateGet(itemTable.object_types, itemTable.sub_types)

                    if count <= 1 then
                        net.Start('ashop_PlayerEquippedItem')
                            net.WriteUInt(plyItemTable.id, ashop.Config.BitsPlyItemID)
                            net.WriteBool(false)
                        net.SendToServer()

                        local b = true
                        for k, v in pairs(tbl2) do
                            if v == itemID then
                                b = false
                                break
                            end
                        end
    
                        if b then
                            displayer:EquipItem(itemID)
                            p.isEquipped = true
                            s:RefreshEquipped(itemTable.object_types)
                        end

                        return
                    end

                    local w = math.min(count, i_maxPerRow)
                    local h = 1

                    if count > i_maxPerRow then
                        h = math.ceil(count / i_maxPerRow)
                    end

                    local clampedH = math.min(h, 4)

                    local selectSlot = vgui.Create('DPanel', ashop.menu)
                    selectSlot:SetSize(
                        w * p:GetWide() +
                        (mIcons * (w - 1)) + mIcons * 2,
                        
                        clampedH * p:GetTall() +
                        (mIcons * (clampedH - 1)) + mIcons * 2)
                    selectSlot:Center()

                    function selectSlot:Paint(w, h)
                        draw.RoundedBox(ashop.Config.round, 0, 0, w, h, ashop.GetColor('Grad2_0'))
                    end

                    local scroll = vgui.Create('DScrollPanel', selectSlot)
                    scroll:Dock(FILL)
                    scroll:DockMargin(mIcons, mIcons, mIcons, mIcons)

                    ashop.menu:PushFocus(selectSlot)
                    local iconList = vgui.Create('DIconLayout', scroll)
                    iconList:Dock(FILL)
                    iconList:SetSpaceX(mIcons/2, mIcons/2, mIcons/2, mIcons/2)
                    iconList:SetSpaceY(mIcons/2, mIcons/2, mIcons/2, mIcons/2)

                    local b = false
                    local c1 = ashop.GetColor('Grad1_0')
                    local c11 = ashop.GetColor('Grad2_0')

                    for a = 0, h-1 do
                        for b = 0, w-1 do
                            if a * i_maxPerRow + b + 1 > count then
                                b = true
                                break
                            end

                            local button = vgui.Create('DButton', iconList)
                            button:SetTextColor(c11)
                            button:SetText(a * i_maxPerRow + b + 1)
                            button:SetSize(p:GetSize())
                            button:SetFont('ashop_60_600')

                            function button:Paint(w, h)
                                draw.RoundedBox(ashop.Config.round, 0, 0, w, h, c1)
                            end

                            function button:OnCursorEntered() self:SetTextColor(color_white) end
                            function button:OnCursorExited() self:SetTextColor(c11) end

                            if tbl2[a * i_maxPerRow + b + 1] then
                                local p = vgui.Create("AShop_ShopItem", button)
                                p:SetSize(button:GetSize())
                                p.RealSizeW = p:GetWide()
                                p.RealSizeH = p:GetTall()

                                function p:Paint()
                                    self:SetItem(displayer.Entity.ashop_data.items[tbl2[a * i_maxPerRow + b + 1]],
                                                displayer.Entity.ashop_data.items[tbl2[a * i_maxPerRow + b + 1]].item_id, false)
                                end

                                p:SetMouseInputEnabled(false)
                            end

                            function button:DoClick()
                                ashop.menu:PopFocus()
                                selectSlot:Remove()

                                net.Start('ashop_PlayerEquippedItem')
                                    net.WriteUInt(plyItemTable.id, ashop.Config.BitsPlyItemID)
                                    net.WriteBool(true)
                                    net.WriteUInt(a*i_maxPerRow + b + 1, math.ceil(math.log(count, 2)))
                                net.SendToServer()

                                displayer:EquipItem(itemID, a * i_maxPerRow + b + 1)
                                p.isEquipped = true
                                s:RefreshEquipped(itemTable.object_types)
                            end
                        end

                        if b then break end
                    end
                end)
            end
        elseif !object_type.HideOnUse then
            menu:AddOption( ashop.L('Use'), function()
                net.Start('ashop_PlayerEquippedItem')
                    net.WriteUInt(plyItemTable.id, ashop.Config.BitsPlyItemID)
                    net.WriteBool(false)
                net.SendToServer()
            end)
        end

        for itemParamID, itemParamTable in pairs(object_type.ItemParameters) do
            if !itemParamTable.userEditable then continue end

            menu:AddOption(itemParamTable.name, function()
                equipIfNeeded(p)
                displayer:CreateUserEntry(plyItemTable, itemParamTable, itemParamID)
            end)
        end

        for k, v in pairs(object_type.ExtraMenuOptions or {}) do
            menu:AddOption(k, function()
                v(plyItemTable, itemTable, displayer, p)
            end)
        end

        if ashop.Config.SellPrice and ashop.Config.SellPrice > 0 and ashop.Config.SellPrice <= 1 then
            menu:AddOption(ashop.L("SellThisItemFor", plyItemTable.price_buy * ashop.Config.SellPrice) .. " " .. ashop.L(plyItemTable.premium_buy and "ACoinsPremium" or "ACoinsClassic"), function()
                ashop.ui.popAskbox(ashop.L("AreYouSureToSellThis"), ashop.L('ThisItemCost', plyItemTable.price_buy), function()
                    net.Start('ashop_SellOwnItem')
                        net.WriteUInt(plyItemTable.id, ashop.Config.BitsPlyItemID)
                    net.SendToServer()
                end)
            end)
        end

        menu:Open()
    end

    local rarity = ashop.rarity[itemTable.rarity]
    local catFilter = itemTable.sub_types and ashop.object_types[itemTable.object_types].sub_cat[itemTable.sub_types].name or ashop.object_types[itemTable.object_types].Name
    self.filteredItems.cat[catFilter] = self.filteredItems.cat[catFilter] or {}
    table.insert(self.filteredItems.cat[catFilter], p)

    self.filteredItems.rarity[rarity.name] = self.filteredItems.rarity[rarity.name] or {}
    table.insert(self.filteredItems.rarity[rarity.name], p)

    table.insert(self.filteredItems.itemWithPanel, {p, itemTable})
end

function PANEL:RefreshEquipped(object_type, subType)
    for _, pnl in pairs({self.owned, self.buyableItems}) do
        for k, child in ipairs(pnl:GetChildren()) do
            // Same object_type, and was equipped at some point
            if child.HoldItemObjectType == object_type then
                child.isEquipped = child:IsEquippedCheck()
            end
        end
    end
end

function PANEL:GetRenderTable()
    return ashop.render[self.renderID]
end

// rarityFilter
// textFilter
// filterCategories
function PANEL:ApplyFilter()
    local marginVertical = ashop.GetSize(20)
    local filter = self.textFilter

    local toParent = {}
    for k, v in ipairs(self.filteredItems.itemWithPanel) do
        if !IsValid(v[1]) then continue end

        local item = v[2]
        local b = filter == "" or string.find(string.lower(v[2].name), filter)
        
        if b then
            local catFilter = item.sub_types and ashop.object_types[item.object_types].sub_cat[item.sub_types].name or ashop.object_types[item.object_types].Name
            b = table.IsEmpty(self.filterCategories) or self.filterCategories[catFilter]

            if b then
                b = table.IsEmpty(self.rarityFilter) or self.rarityFilter[ashop.rarity[item.rarity].name]

                if b and !table.IsEmpty(self.othersFilter) then
                    if self.othersFilter['onlypromo'] and !(item.promotion_start and item.promotion_end and item.promotion_amount and
                        item.promotion_start < os.time() and os.time() - 20 < item.promotion_end and item.promotion_amount > 0) then
                        b = false
                    end
                end
            end
        end

        // Reset the parent anyway, to have the last, same order
        v[1]:SetParent(nil)
        v[1]:SetTall(b and v[1].RealSizeH or 0)
        v[1]:SetWide(b and v[1].RealSizeW or 0)

        if b then
            table.insert(toParent, v)
        end
    end

    if self.sort then
        table.sort(toParent, self.sort)
    end

    for k, v in ipairs(toParent) do
        v[1]:SetParent(v[1].RealParent)
    end

    self.buyableItems:Layout()
    self.owned:Layout()
    self.buyableItems:InvalidateLayout(true)
    self.owned:InvalidateLayout(true)
    self.itemList:InvalidateLayout(true)

    self.buyableItems:SizeToContentsY()
    self.owned:SizeToContentsY()

    if self.buyableItems:GetTall() == 0 then
        self.buyableText:SetTall(0)
        self.buyableText:DockMargin(0, 0, 0, 0)
    elseif self.owned:GetTall() == 0 then
        self.buyableText:DockMargin(0, 0, 0, marginVertical/2)
    else
        self.buyableText:SetTall(select(2, self.buyableText:GetContentSize()))
        self.buyableText:DockMargin(0, marginVertical, 0, marginVertical/2)
    end
end

local stateOff = ashop.GetColor('StateOff')
local white = ashop.GetColor('White')

function PANEL:Fill(renderID)
    local horizontalMargin = ashop.GetSize(64)
    local sW = ashop.GetSize(1536) - ashop.GetSize(64)*2 - ashop.Config.round*2
    local marginVertical = ashop.GetSize(20)
    local ply = LocalPlayer()
    self.renderID = renderID
    self:Clear()

    // Filter Init
    local filter = vgui.Create("DScrollPanel", self)
    filter:Dock(LEFT)
    filter:SetWide(ashop.GetSize(155))
    filter:DockMargin(0, 0, horizontalMargin, 0)
    ashop.ui.SkinScrollPanel(filter)

    local vbar = filter:GetVBar()
    vbar:SetWide(0)
    function vbar.btnUp:Paint() end
    function vbar.btnDown:Paint() end
    function vbar:Paint(w, h) end

    function filter:Paint(w, h)
        if self:GetTall() >= self.pnlCanvas:GetTall() then return end

        local _, y = vbar.btnGrip:GetPos()
        local h = vbar.btnGrip:GetTall()

        DisableClipping(true)
        draw.RoundedBox(2, w+20, y, 2, h, stateOff)
        DisableClipping(false)
    end
    
    local filteredItems = {
        cat = {},
        rarity = {},
        priceMin = math.huge,
        priceMax = -math.huge,
        pricePremiumMin = math.huge,
        pricePremiumMax = -math.huge,

        itemWithPanel = {},
    }
    self.filteredItems = filteredItems

    // Displayer
    local displayer = vgui.Create( "AShop_DModelPanel", self )
    displayer:Dock(RIGHT)
    displayer:SetWide(ashop.GetSize(369))
    displayer:DockMargin(horizontalMargin, 0, 0, 0)
    displayer:SetLookAt( Vector( 0, 0, 0 ) )
    displayer:SetModel(ply:GetModel())
    displayer:EquipWeapon()
    displayer:DoClick()
    displayer:SetFOV( 45 )
    displayer.Entity:SetSequence("idle_passive")
    function displayer:LayoutEntity( ent ) end
    displayer:BoneFocus('ValveBiped.Bip01_Spine2')
    self.displayer = displayer

    local itemList = vgui.Create("DScrollPanel", self)
    itemList:Dock(FILL)
    ashop.ui.SkinScrollPanel(itemList, stateOff)
    self.itemList = itemList

    local owned = vgui.Create("DIconLayout", itemList)
    owned:Dock(TOP)
    owned:SetSpaceY(marginVertical)
    owned:SetSpaceX(marginVertical)
    self.owned = owned

    local buyableText = vgui.Create("DLabel", itemList)
    buyableText:Dock(TOP)
    buyableText:SetFont("ashop_18")
    buyableText:SetText(ashop.L('Buyable'))
    buyableText:SetTextColor(white)
    buyableText:SetTall(select(2, buyableText:GetContentSize()))
    buyableText:DockMargin(0, marginVertical, 0, marginVertical/2)
    self.buyableText = buyableText

    local buyable = vgui.Create("DIconLayout", itemList)
    buyable:Dock(TOP)
    buyable:SetSpaceY(marginVertical)
    buyable:SetSpaceX(marginVertical)
    self.buyableItems = buyable

    local itemListWidth = sW - displayer:GetWide() - horizontalMargin * 2 - filter:GetWide()
    self.itemWidth = math.floor((itemListWidth - marginVertical*4) / 5)

    for k, v in pairs((ply.ashop_data or {}).items or {}) do
        self:AddOwned(v, k)
    end
    owned:SizeToContentsY()

    hook.Add('Ashop_PlayerNewItem', 'RefreshUI', function(k, v)
        if IsValid(self) then
            self:AddOwned(v, k)
            self:ApplyFilter()
        end
    end)

    hook.Add('Ashop_PlayerRemoveItem', 'RefreshUI', function(k, v)
        if IsValid(self) then
            self:RemoveOwned(v, k)
            self:ApplyFilter()
        end
    end)

    for k, v in pairs(ashop.items) do
        if !self:GetRenderTable().cat[v.object_types] then continue end
        if !v.price and !v.premium_price then continue end

        // Derma
        local p = vgui.Create("AShop_ShopItem", buyable)
        p:SetSize(self.itemWidth, ashop.GetSize(189))

        function p:Paint()
            self:SetItem(nil, k, true)
        end

        p.RealSizeW = p:GetWide()
        p.RealSizeH = p:GetTall()
        p.RealParent = buyable
        p.HoldItemObjectType = v.object_types
        p.HoldItemSubObjectType = v.sub_types or 0

        // Filter
        local rarity = ashop.rarity[v.rarity]
        if !rarity then
            ErrorNoHaltWithStack("An item has a non-existing rarity, rarity count: " .. #ashop.rarity .. ". Use first found rarity")
            rarity = select(2, next(ashop.rarity))
        end

        local catFilter = v.sub_types and ashop.object_types[v.object_types].sub_cat[v.sub_types].name or ashop.object_types[v.object_types].Name
        filteredItems.cat[catFilter] = filteredItems.cat[catFilter] or {}
        table.insert(filteredItems.cat[catFilter], p)

        filteredItems.rarity[rarity.name] = filteredItems.rarity[rarity.name] or {}
        table.insert(filteredItems.rarity[rarity.name], p)

        if v.premium_price then
            filteredItems.pricePremiumMax = math.max(filteredItems.pricePremiumMax, v.premium_price)
            filteredItems.pricePremiumMin = math.min(filteredItems.pricePremiumMin, v.premium_price)
        end

        if v.price then
            filteredItems.priceMax = math.max(filteredItems.priceMax, v.price)
            filteredItems.priceMin = math.min(filteredItems.priceMin, v.price)
        end

        table.insert(filteredItems.itemWithPanel, {p, v})

        function p:IsEquippedCheck()
            if !self.temporaryItemID then return end

            local data = IsValid(displayer.Entity) and displayer.Entity or ply
            if !data.ashop_data.equipped[v.object_types] or !data.ashop_data.equipped[v.object_types][v.sub_types or 0] then return false end

            for key, v in ipairs(data.ashop_data.equipped[v.object_types][v.sub_types or 0] or {}) do
                if data.ashop_data.items[v].item_id == k then
                    return true
                end
            end

            return false
        end

        p.DoClick = function()
            if !p.temporaryItemID then
                p.temporaryItemID = displayer:EquipItem(nil, nil, k)
            else
                displayer:EquipItem(p.temporaryItemID)
            end

            p.isEquipped = true
            self:RefreshEquipped(v.object_types, v.sub_types or 0)
        end

        p.DoRightClick = function()
            // ashop.ui.popAskbox(title, desc, onValid, onCancel)
            CloseDermaMenus()
            local menu = vgui.Create( "AShop_DMenu", p )

            if !v.group_restrained or !ashop.groupranks[v.group_restrained] or ashop.groupranks[v.group_restrained].ranks[ply:GetUserGroup()] then
                local mult = (1 - (ashop.rankpromo[ply:GetUserGroup()] or 0) / 100)
                if v.premium_price then
                    menu:AddOption(ashop.L('BuyWithPremiumMoney'), function()
                        if ply:ashopMoneyAfford(v.premium_price * mult, true) then
                            ashop.ui.popAskbox(ashop.L('BuyFormat', v.name), ashop.L('ThisItemCost', p.price[2]), function()
                                net.Start('ashop_buy')
                                    net.WriteUInt(k, ashop.Config.BitsItemID)
                                    net.WriteBool(true)
                                net.SendToServer()
                            end)
                        else
                            ashop.DermaNotify(ashop.L('YouCantAfford'), NOTIFY_ERROR, 5)
                        end
                    end)
                end
    
                if v.price then
                    menu:AddOption(ashop.L('BuyWithClassicMoney'), function()
                        if ply:ashopMoneyAfford(v.price * mult, false) then
                            ashop.ui.popAskbox(ashop.L('BuyFormat', v.name), ashop.L('ThisItemCost', p.price[1]), function()
                                net.Start('ashop_buy')
                                    net.WriteUInt(k, ashop.Config.BitsItemID)
                                    net.WriteBool(false)
                                net.SendToServer()
                            end)
                        else
                            ashop.DermaNotify(ashop.L('YouCantAfford'), NOTIFY_ERROR, 5)
                        end
                    end)
                end
    
                for k, extraOption in pairs(ashop.object_types[v.object_types].ExtraMenuOptions or {}) do
                    menu:AddOption(k, function()
                        extraOption(nil, v, displayer, p)
                    end)
                end
    
                menu:Open()
            end
        end


        p.isEquipped = false
    end

    if (#buyable:GetChildren()) == 0 then
        buyableText:SetTall(0)
        buyableText:DockMargin(0, 0, 0, 0)
    elseif (#owned:GetChildren()) == 0 then
        buyableText:DockMargin(0, 0, 0, marginVertical/2)
    else
        buyableText:SetTall(select(2, buyableText:GetContentSize()))
        buyableText:DockMargin(0, marginVertical, 0, marginVertical/2)
    end

    // Filter
    local filterTitle = vgui.Create("DLabel", filter)
    filterTitle:SetFont('ashop_24_600')
    filterTitle:SetTextColor(white)
    filterTitle:SetText(ashop.L('FilterBy'))
    filterTitle:Dock(TOP)
    filterTitle:SetTall(select(2, filterTitle:GetContentSize()))

    local filterName = vgui.Create("DLabel", filter)
    filterName:SetFont('ashop_14_600')
    filterName:SetTextColor(white)
    filterName:SetText(ashop.L('Name'))
    filterName:Dock(TOP)
    filterName:SetTall(select(2, filterName:GetContentSize()))
    filterName:DockMargin(0, marginVertical, 0, 0)

    local filterNameEntry = vgui.Create("AShop_DTextEntry", filter)
    filterNameEntry:Dock(TOP)
    filterNameEntry:SetFont('ashop_14')
    filterNameEntry:SetTextColor(white)
    filterNameEntry:GetPlaceholderText("Hi")
    filterNameEntry:DockMargin(0, marginVertical/4, 0, 0)
    filterNameEntry.boxcolor = stateOff
    self.textFilter = ""

    filterNameEntry.OnChange = function()
        self.textFilter = string.lower(filterNameEntry:GetText())
        self:ApplyFilter()
    end

    local filterCat = vgui.Create("DLabel", filter)
    filterCat:SetFont('ashop_14_600')
    filterCat:SetTextColor(white)
    filterCat:SetText(ashop.L('SubCategory'))
    filterCat:Dock(TOP)
    filterCat:SetTall(select(2, filterCat:GetContentSize()))
    filterCat:DockMargin(0, marginVertical, 0, 0)

    self.filterCategories = {}

    for k, v in pairs(filteredItems.cat) do
        local filterCatButton = vgui.Create("AShop_DCheckBoxLabel", filter)
        filterCatButton:SetFont('ashop_16')
        filterCatButton:SetTextColor(white)
        filterCatButton:SetText(k)
        filterCatButton:Dock(TOP)
        filterCatButton:SetTall(select(2, filterCatButton.Label:GetContentSize()))
        filterCatButton:DockMargin(0, marginVertical/4, 0, 0)

        filterCatButton.OnChange = function(_, v)
            self.filterCategories[k] = v and true or nil
            self:ApplyFilter()
        end
    end

    // Rarity
    local rarityCat = vgui.Create("DLabel", filter)
    rarityCat:SetFont('ashop_14_600')
    rarityCat:SetTextColor(white)
    rarityCat:SetText(ashop.L('Rarity'))
    rarityCat:Dock(TOP)
    rarityCat:SetTall(select(2, filterCat:GetContentSize()))
    rarityCat:DockMargin(0, marginVertical, 0, 0)

    self.rarityFilter = {}

    for k, v in pairs(filteredItems.rarity) do
        local rarityCatButton = vgui.Create("AShop_DCheckBoxLabel", filter)
        rarityCatButton:SetFont('ashop_16')
        rarityCatButton:SetTextColor(white)
        rarityCatButton:SetText(k)
        rarityCatButton:Dock(TOP)
        rarityCatButton:SetTall(select(2, rarityCatButton.Label:GetContentSize()))
        rarityCatButton:DockMargin(0, marginVertical/4, 0, 0)

        rarityCatButton.OnChange = function(_, v)
            self.rarityFilter[k] = v and true or nil
            self:ApplyFilter()
        end
    end

    // self.sort
    local orderBy = vgui.Create("DLabel", filter)
    orderBy:SetFont('ashop_14_600')
    orderBy:SetTextColor(white)
    orderBy:SetText(ashop.L('OrderBy'))
    orderBy:Dock(TOP)
    orderBy:SetTall(select(2, filterCat:GetContentSize()))
    orderBy:DockMargin(0, marginVertical, 0, 0)

    local orderBys = {}

    for k, v in ipairs({
        {
            'BestPrice',
            function(a, b)
                return (a[2].price or 0) > (b[2].price or 0)
            end,
        },

        {
            'LowestPrice',
            function(a, b)
                return (a[2].price or 0) < (b[2].price or 0)
            end,
        },
    }) do
        local c = vgui.Create("AShop_DCheckBoxLabel", filter)
        c:SetFont('ashop_16')
        c:SetTextColor(white)
        c:Dock(TOP)
        c:DockMargin(0, marginVertical/4, 0, 0)

        c:SetText(ashop.L(v[1]))
        c:SetTall(select(2, c.Label:GetContentSize()))

        c.OnChange = function(_, b)
            for k, v in ipairs(orderBys) do
                if v == c then continue end
                v.state = false
            end

            local goodFunc = v[2]

            self.sort = b and goodFunc or nil
            self:ApplyFilter()
        end

        table.insert(orderBys, c)
    end

    self.othersFilter = {}
    local othersFilter = vgui.Create("DLabel", filter)
    othersFilter:SetFont('ashop_14_600')
    othersFilter:SetTextColor(white)
    othersFilter:SetText(ashop.L('Others'))
    othersFilter:Dock(TOP)
    othersFilter:SetTall(select(2, filterCat:GetContentSize()))
    othersFilter:DockMargin(0, marginVertical, 0, 0)

    local onlyPromo = vgui.Create("AShop_DCheckBoxLabel", filter)
    onlyPromo:SetFont('ashop_16')
    onlyPromo:SetTextColor(white)
    onlyPromo:SetText(ashop.L('OnPromotion'))
    onlyPromo:Dock(TOP)
    onlyPromo:SetTall(select(2, onlyPromo.Label:GetContentSize()))
    onlyPromo:DockMargin(0, marginVertical/4, 0, 0)

    onlyPromo.OnChange = function(_, v)
        self.othersFilter['onlypromo'] = v and true or nil
        self:ApplyFilter()
    end
end

derma.DefineControl( "AShop_ShopDisplay", "", PANEL, "EditablePanel" )
--addons/ashop/lua/ashop/code/ui/panels/cl_shopitem.lua:

local PANEL = {}

function PANEL:Init()
	self:SetText('')
end

local itemBgClr = ashop.GetColor('ItemBg')
local itemBgClrR, itemBgClrG, itemBgClrB = ashop.GetColor('ItemBg'):Unpack()
local white = ashop.GetColor('White')

local grad = Material('akulla/gradient-d')
local circle = Material('akulla/circle.png', 'smooth')

ashop.RunningShopItemPanels = ashop.RunningShopItemPanels or {}

hook.Add('ashop_itemedit', 'refreshShopItems', function(item, itemTable)
	for k, v in pairs(ashop.RunningShopItemPanels) do
		if k.itemID == item then
			k:Refresh()
		end
	end
end)

hook.Add('ashop_refreshSettingsUI', 'refreshRarityShopItems', function(n, rarityID)
	if n == ashop.L('Rarity') then
		for k, v in pairs(ashop.RunningShopItemPanels) do
			if ashop.items[k.itemID] and ashop.items[k.itemID].rarity == rarityID then
				k:Refresh()
			end
		end
	end
end)

function PANEL:Refresh()
	self:SetItem(self.plyItem, self.itemID, self.drawPrice)
end

function PANEL:SetItem(plyItem, itemID, drawPrice)
	ashop.RunningShopItemPanels[self] = true
	self.outlinedItemBox = nil
	self:Clear()

	local item = isnumber(itemID) and ashop.items[itemID] or itemID
	local object_type = ashop.object_types[item.object_types]
	local lp = LocalPlayer()

	local rarity = ashop.rarity[item.rarity]

	if !rarity then
		ErrorNoHaltWithStack("An item has a non-existing rarity, rarity count: " .. #ashop.rarity .. ". Use first found rarity")
		rarity = select(2, next(ashop.rarity))
	end

	local rarityStyle = ashop.itemShopEffects[rarity.style]

	// Unpacked
	local ModelDrawTable
	self.plyItem = plyItem
	self.itemID = itemID
	self.drawPrice = drawPrice

	function self:Paint(w, h)
		if !self.outlinedItemBox then
			self.outlinedItemBox, self.polyshape = ashop.ui.RoundedBoxOutlined(self.OutlineOverride or ashop.Config.round, 0, 0, w, h, itemBgClr, rarity.clr, 2, function()
				surface.SetMaterial(grad)
				surface.SetDrawColor(rarity.r, rarity.g, rarity.b, 25)
				surface.DrawTexturedRect(0, h*0.6, w, h*0.4 )
			end)
		end

		if self.isEquipped then
			self.outlinedItemBoxInt = self.outlinedItemBoxInt or ashop.ui.RoundedBox(self.OutlineOverride or ashop.Config.round, 1, 1, w-2, h-2)
			self.outlinedItemBoxExt = self.outlinedItemBoxExt or ashop.ui.RoundedBox(self.OutlineOverride or ashop.Config.round, 0, 0, w, h)

			// Draw roundedbox is ugly
			surface.SetDrawColor(rarity.r, rarity.g, rarity.b)
			draw.NoTexture()
			surface.DrawPoly(self.outlinedItemBoxExt)

			ashop.StartStencil()
				draw.NoTexture()
				surface.SetDrawColor(itemBgClrR, itemBgClrG, itemBgClrB)
				surface.DrawPoly(self.outlinedItemBoxInt)
		end

		// Create a stencil, anyway
		if (rarityStyle and rarityStyle.preDraw) or ModelDrawTable then
			if !self.isEquipped then
				ashop.StartStencil()
					draw.NoTexture()
					surface.SetDrawColor(itemBgClrR, itemBgClrG, itemBgClrB)
					surface.DrawPoly(self.polyshape)
			end

			ashop.ReplaceStencil(1)

			local b
			if rarityStyle then
				rarityStyle.preDraw(self, w, h, self.isEquipped, rarity.clr)
			end

			surface.SetDrawColor(rarity.r, rarity.g, rarity.b, 20)
			surface.SetMaterial(circle)
			surface.DrawTexturedRect(w*0.1, h*0.1, w*0.8, w*0.8)

			if ModelDrawTable then
				for k, v in ipairs(ModelDrawTable) do
					v:PaintManual()
				end
			end

			if b then
				ashop.EndStencil()
				return
			end
		end

		self.outlinedItemBox(tobool(((rarityStyle and rarityStyle.preDraw) or ModelDrawTable) or self.isEquipped))
	end

	local price
	local font16 = ashop.GetFontHeight('ashop_16')
	self.price = {}
	if drawPrice then
		local isPromotionValid = item.promotion_start and item.promotion_end and item.promotion_amount and
			item.promotion_start < os.time() and os.time() - 20 < item.promotion_end and item.promotion_amount > 0

		local fontSize25 = ashop.GetFontHeight('ashop_icon_25')
		price = vgui.Create("EditablePanel", self)
		price:Dock(BOTTOM)
		price:SetTall(fontSize25*2)
		price:DockMargin(0, 0, 0, self:GetTall()*0.1 - fontSize25)
		price:SetMouseInputEnabled(false)
		price:SetZPos(4)

		local multiples = item.premium_price && item.price
		local usedWidth = 0
		local pnls = {}

		for a, b in ipairs({
			{"\"", item.price},
			{"!", item.premium_price},
		}) do
			if !b[2] then continue end
			local pnl = vgui.Create("EditablePanel", price)
			pnl:Dock(LEFT)

			local logo = vgui.Create("DLabel", pnl)
			logo:Dock(LEFT)
			logo:SetFont(a == 2 and 'ashop_icon_25' or 'ashop_icon_20')
			logo:SetTextColor(white)
			logo:SetText(b[1])
			logo:SetWide(logo:GetContentSize())
			logo:SetContentAlignment(8)

			local priceAfterRank = math.floor(b[2] * (100 - (ashop.rankpromo[lp:GetUserGroup()] or 0))/100)
			local priceText = vgui.Create("DLabel", pnl)
			priceText:Dock(LEFT)
			priceText:SetFont('ashop_16')
			priceText:SetTextColor(white)
			priceText:SetText(priceAfterRank )
			priceText:DockMargin(5, (fontSize25 - ashop.GetFontHeight(priceText:GetFont()))/2, 0, 0)
			priceText:SetWide(priceText:GetContentSize())
			priceText:SetContentAlignment(8)

			self.price[a] = priceAfterRank
			if isPromotionValid then
				local rarityClr50 = ColorAlpha(rarity.clr, 255*0.5)
				priceText:SetTextColor(rarityClr50)

				local pricePromo = math.floor(priceAfterRank * (1 - item.promotion_amount/100))

				self.price[a] = pricePromo
				function priceText:Paint(w, h)
					surface.SetDrawColor(rarity)
					surface.DrawLine(0, font16/2, w, font16/2)

					draw.SimpleText(pricePromo, 'ashop_16', w/2, fontSize25, color_white, 1, 1)
				end
			end

			pnl:SetWide(logo:GetWide() + priceText:GetWide() + 5)
			usedWidth = usedWidth + pnl:GetWide()
			table.insert(pnls, pnl)
		end

        local space = math.floor((self:GetWide() - usedWidth) / (#pnls+1))

        for k, v in ipairs(pnls) do
            v:DockMargin(space, 0, 0, 0)
        end
	end

	local name = vgui.Create("DLabel", self)
	name:Dock(BOTTOM)
	name:SetText(item.name)
	name:SetFont("ashop_12_600")
	name:SetTextColor(white)
	name:SetContentAlignment(5)
	name:SetTall(select(2, name:GetContentSize()))
	name:DockMargin(0, 0, 0, price and 0 or self:GetTall()*0.1)
	name:SetMouseInputEnabled(false)
	name:SetZPos(5)

	local container = vgui.Create("EditablePanel", self)
	container:Dock(FILL)
	container:SetMouseInputEnabled(false)
	container:SetZPos(6)

	if item.picture_link then
		local mat
		function container:Paint(w, h)
			local m = isfunction(mat) and mat() or mat

			if m and !m:IsError() then
				local mW = math.min(w*0.6, h*0.6)
				surface.SetDrawColor(255, 255, 255)
				surface.SetMaterial(m)
				surface.DrawTexturedRect((w - mW)/2, h*0.2, mW, mW)
			end
		end
			
		local removeFunc = ashop.ui.setMaterialByLink(item.picture_link, {
			["$translucent"] = 1,
			["$vertexalpha"] = 1,
			["$vertexcolor"] = 1
		}, function(m)
			mat = m
		end, 'UnlitGeneric')

		if removeFunc then
			function container:OnRemove()
				removeFunc()
			end
		end
	elseif object_type.UI_FILL then
		_, ModelDrawTable = object_type.UI_FILL(plyItem, item, container, self, self:GetWide(),
			self:GetTall() - (price and price:GetTall() or 0) -
				name:GetTall() - self:GetTall()*0.1, rarityStyle and rarityStyle.noCircle )
		self.ModelDrawTable = ModelDrawTable
	end

	surface.SetFont('ashop_icon_20')
	local iW = surface.GetTextSize('(')
	local icons = vgui.Create('EditablePanel', self)
	local marginVertical = ashop.GetSize(16)
	icons:SetPos(self:GetWide() - iW - marginVertical / 2, marginVertical/2)
	icons:SetSize(iW, 0)
	icons:SetMouseInputEnabled(true)

	if item.group_restrained and ashop.groupranks[item.group_restrained] then
		local cantBuy = !ashop.groupranks[item.group_restrained].ranks[lp:GetUserGroup()]

		local h, s, v = ColorToHSV(rarity.clr)
		v = 0.75

		local cant = vgui.Create('DLabel', icons)
		cant:SetFont("ashop_icon_20")
		cant:SetText('(')
		cant:Dock(TOP)
		cant:SetTall(select(2, cant:GetContentSize()))
		cant:SetTextColor(cantBuy and HSVToColor(h, s, v) or rarity.clr)
		cant:SetMouseInputEnabled(true)

		if cantBuy then
			cant:SetTooltipPanelOverride("AShop_Tooltip")
			cant:SetTooltip(ashop.groupranks[item.group_restrained].desc or ashop.L('CantBuyRank'))
		end

		icons:SetTall(icons:GetTall() + cant:GetTall())
	end

	if item.expireTime then
		if plyItem then
			local h, s, v = ColorToHSV(rarity.clr)
			v = 0.75

			local time = vgui.Create('DLabel', icons)
			time:SetFont("ashop_icon_20")
			time:SetText('4')
			time:Dock(TOP)
			time:SetTall(select(2, time:GetContentSize()))
			time:SetTextColor(HSVToColor(h, s, v))
			time:SetMouseInputEnabled(true)
			time:SetTooltipPanelOverride("AShop_Tooltip")
			time:SetTooltip(ashop.L('ExpireItemIn', ashop.FormatDate(item.expireTime - (os.time() - plyItem.when), 99)))
			icons:SetTall(icons:GetTall() + time:GetTall())
		else
			local h, s, v = ColorToHSV(rarity.clr)
			s = 1
			v = 1

			local time = vgui.Create('DLabel', icons)
			time:SetFont("ashop_icon_20")
			time:SetText('2')
			time:Dock(TOP)
			time:SetTall(select(2, time:GetContentSize()))
			time:SetTextColor(HSVToColor(h, s, v))
			time:SetMouseInputEnabled(true)
			time:SetTooltipPanelOverride("AShop_Tooltip")
			time:SetTooltip(ashop.L('ExpireItem', ashop.FormatDate(item.expireTime, 99)))
			icons:SetTall(icons:GetTall() + time:GetTall())
		end
	end
end

function PANEL:OnRemove()
	for k, v in ipairs(self.ModelDrawTable or {}) do
		if IsValid(v) then
			v:Remove()
		end
	end

	if ashop.RunningShopItemPanels[self] then
		ashop.RunningShopItemPanels[self] = nil
	end
end

derma.DefineControl( "AShop_ShopItem", "Item drawer", PANEL, "DButton" )
--addons/ashop/lua/ashop/code/ui/panels_actions/cl_currency.lua:
//ashop.registerUserParameter
local normalColor = ashop.GetColor('Grad1_1')
local white = ashop.GetColor('White')
local sOn = ashop.GetColor('StateOn')
local w50 = ashop.GetColor('White25')

local function drawInterior(editor, key, value, parent)
    local buttonH = ashop.GetSize(50)
    local marginVertical = ashop.GetSize(20)

    local p = vgui.Create('EditablePanel', editor)
    p:SetSize(ashop.GetSize(350), buttonH*3 + marginVertical*2)

    local exchangeType = vgui.Create('EditablePanel', p)
    exchangeType:Dock(TOP)
    exchangeType:SetTall(buttonH)

    local lbl = vgui.Create('DLabel', exchangeType)
    lbl:Dock(FILL)
    lbl:SetFont('ashop_16')
    lbl:DockMargin(marginVertical/2, 0, 0, 0)
    lbl:SetTextColor(white)
    lbl:SetText(parent:GetText())

    local firstCurrency = value.currencyName
    local secondCurrency = value.toPremium and ashop.L('ACoinsPremium') or ashop.L('ACoinsClassic')

    if !value.toCoins then
        local temp = secondCurrency
        secondCurrency = firstCurrency
        firstCurrency = temp
    end
    
    function exchangeType:Paint(w, h)
        draw.RoundedBox(ashop.Config.round, 0, 0, w, h, normalColor)
        DisableClipping(true)
        draw.SimpleText(ashop.L('ExchangeType'), "ashop_14", marginVertical/2, 0, w50, 0, 1)
        DisableClipping(false)
    end

    local amounts = vgui.Create('EditablePanel', p)
    amounts:Dock(TOP)
    amounts:SetTall(buttonH)
    amounts:DockMargin(0, marginVertical, 0, marginVertical)

    local tradeTo = vgui.Create('EditablePanel', amounts)
    tradeTo:Dock(RIGHT)
    tradeTo:SetTall(buttonH)
    tradeTo:SetWide(p:GetWide()/5*2)

    local tradeToAmount = vgui.Create('DLabel', tradeTo)
    tradeToAmount:Dock(FILL)
    tradeToAmount:SetFont('ashop_16')
    tradeToAmount:DockMargin(marginVertical/2, 0, 0, 0)
    tradeToAmount:SetTextColor(white)
    tradeToAmount:SetText(0)
    
    function tradeTo:Paint(w, h)
        draw.RoundedBox(ashop.Config.round, 0, 0, w, h, normalColor)
        DisableClipping(true)
        draw.SimpleText(secondCurrency, "ashop_14", marginVertical/2, 0, w50, 0, 1)
        DisableClipping(false)
    end

    local tradeFrom = vgui.Create('EditablePanel', amounts)
    tradeFrom:Dock(LEFT)
    tradeFrom:SetTall(buttonH)
    tradeFrom:SetWide(p:GetWide()/5*2)

    local tradeFromAmount = vgui.Create('DTextEntry', tradeFrom)
    tradeFromAmount:Dock(FILL)
    tradeFromAmount:SetFont('ashop_16')
    tradeFromAmount:DockMargin(marginVertical/2, 0, 0, 0)
    tradeFromAmount:SetTextColor(white)
    tradeFromAmount:SetText(0)
    tradeFromAmount:SetNumeric(true)
    tradeFromAmount:SetPaintBackground(false)
    tradeFromAmount:SetDrawLanguageID(false)
    tradeFromAmount:SetDrawLanguageIDAtLeft(false)

    function tradeFromAmount:OnChange()
        local n = tonumber(tradeFromAmount:GetText())

        if n then
            tradeToAmount:SetText(n * value.convertRate)
        end
    end
    
    function tradeFrom:Paint(w, h)
        draw.RoundedBox(ashop.Config.round, 0, 0, w, h, normalColor)
        DisableClipping(true)
        draw.SimpleText(firstCurrency, "ashop_14", marginVertical/2, 0, w50, 0, 1)
        DisableClipping(false)
    end

    local tradeIcon = vgui.Create('DLabel', amounts)
    tradeIcon:Dock(FILL)
    tradeIcon:SetFont('ashop_icon_20')
    tradeIcon:SetText('\'')
    tradeIcon:SetTextColor(white)
    tradeIcon:SetContentAlignment(5)

    local trade = vgui.Create('DButton', p)
    trade:Dock(TOP)
    trade:SetTall(buttonH)
    trade:SetFont('ashop_18')
    trade:SetTextColor(white)
    trade:SetText(ashop.L('Trade'))

    function trade:Paint(w, h)
        draw.RoundedBox(ashop.Config.round, 0, 0, w, h, sOn)
    end

    local lp = LocalPlayer()
    function trade:DoClick()
        local amt = tonumber(tradeFromAmount:GetText())

        if !amt or amt <= 0 or amt > 2^32 or amt * value.convertRate > 2^32 then return end

        local currency = ashop.currencies.list[value.currencyName]

        if value.toCoins then
            if currency.getMoney(lp) < amt then
                ashop.DermaNotify(ashop.L('NotEnoughMoney'), NOTIFY_ERROR, 3)
                return
            end
        elseif !lp:ashopMoneyAfford(amt, isPremium) then
            ashop.DermaNotify(ashop.L('NotEnoughMoney'), NOTIFY_ERROR, 3)
            return
        end

        net.Start('ashop_ExecuteTrade')
            net.WriteUInt(key, 10)
            net.WriteUInt(amt, 32)
        net.SendToServer()
    end

    p:Center()
end

ashop.registerUserParameter(ashop.L('Currencies'), drawInterior, function()
    local o = {}

    for k, v in pairs(ashop.currencies.trades) do
        // Changer le nom
        local name
        local currencyName = v.currencyName

        if v.toCoins then
            name = currencyName .. " > " .. "Coins"
        else
            name = "Coins" .. " > " .. currencyName
        end

        table.insert(o, {name, k, v})
    end

    return o
end, interior)
--addons/ashop/lua/ashop/code/ui/panels_actions/cl_logs.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/cl_renderedit.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_anims.lua:
ashop.RegisterPremade("wOs Taunts", {
    requireWorkshop = "3060662332",

    objectTypes = {
        {
            "Taunts",
        }
    },

    items = {
        {
            metadata={ true, 'accolades', true, nil, 0.65},
            name='Accolades',
            rendering=1,
        },
        {
            metadata={ true, 'acrobatic_superhero', true, nil, 0.65},
            name='Superhero',
            rendering=1,
        },
        {
            metadata={ true, 'aerobicchamp', true, nil, 0.65},
            name='Aerobic Champ',
            rendering=1,
        },
        {
            metadata={ true, 'afrohouse', true, 'https://akulla.dev/ashop/afro.mp3', 0.65},
            name='Afrohouse',
            rendering=1,
        },
        {
            metadata={ true, 'arwmave', true, nil, 0.65},
            name='Armwave',
            rendering=1,
        },
        {
            metadata={ true, 'bbd', true, nil, 0.65},
            name='BBD',
            rendering=1,
        },
        {
            metadata={ true, 'banana', true, 'https://akulla.dev/ashop/banana.mp3', 0.65},
            name='Banana',
            rendering=1,
        },
        {
            metadata={ true, 'blow_kiss', true, nil, 0.65},
            name='Blow Kiss',
            rendering=1,
        },
        {
            metadata={ true, 'break_dance_v2', true, nil, 0.65},
            name='Break Dance V2',
            rendering=1,
        },
        {
            metadata={ true, 'break_dance', true, nil, 0.65},
            name='Break Dance',
            rendering=1,
        },
        {
            metadata={ true, 'breakboy', true, nil, 0.65},
            name='Break Boy',
            rendering=1,
        },
        {
            metadata={ true, 'infinidab', true, nil, 0.65},
            name='Infinidab',
            rendering=1,
        },
        {
            metadata={ true, 'calculated', true, nil, 0.65},
            name='Calculated',
            rendering=1,
        },
        {
            metadata={ true, 'capoeira', true, nil, 0.65},
            name='Capoeira',
            rendering=1,
        },
        {
            metadata={ true, 'cartwheel', true, nil, 0.65},
            name='Cartwheel',
            rendering=1,
        },
        {
            metadata={ true, 'celebration', true, nil, 0.65},
            name='Celebration',
            rendering=1,
        },
        {
            metadata={ true, 'chicken_moves', true, nil, 0.65},
            name='Scared',
            rendering=1,
        },
        {
            metadata={ true, 'confused', true, nil, 0.65},
            name='Confused',
            rendering=1,
        },
        {
            metadata={ true, 'crazydance', true, nil, 0.65},
            name='Crazy',
            rendering=1,
        },
        {
            metadata={ true, 'loser_dance', true, nil, 0.65},
            name='Loser Dance',
            rendering=1,
        },
        {
            metadata={ true, 'hula', true, nil, 0.65},
            name='Hula',
            rendering=1,
        },
        {
            metadata={ true, 'cry', true, nil, 0.65},
            name='Cry',
            rendering=1,
        },
        {
            metadata={ true, 'livinglarge', true, nil, 0.65},
            name='Living Large',
            rendering=1,
        },
        {
            metadata={ true, 'dk_drop', true, 'https://akulla.dev/ashop/dj.mp3', 0.65},
            name='DJ',
            rendering=1,
        },
        {
            metadata={ true, 'iheartyou', true, nil, 0.65},
            name='Heart',
            rendering=1,
        },
        {
            metadata={ true, 'mime', true, nil, 0.65},
            name='Mime',
            rendering=1,
        },
        {
            metadata={ true, 'security_guard', true, nil, 0.65},
            name='Security Guard',
            rendering=1,
        },
        {
            metadata={ true, 'kitty_cat', true, nil, 0.65},
            name='Kitty Cat',
            rendering=1,
        },
        {
            metadata={ true, 'kpop_dance03', true, 'https://akulla.dev/ashop/boombayah.mp3', 0.65},
            name='KPop',
            rendering=1,
        },
        {
            metadata={ true, 'mask_off', true, nil, 0.65},
            name='Mask Off',
            rendering=1,
        },
        {
            metadata={ true, 'kpop_02', true, 'https://akulla.dev/ashop/boombayah.mp3', 0.65},
            name='KPop 2',
            rendering=1,
        },
        {
            metadata={ true, 'kpop_03', true, 'https://akulla.dev/ashop/boombayah.mp3', 0.65},
            name='KPop 3',
            rendering=1,
        },
        {
            metadata={ true, 'kpop_04', true, 'https://akulla.dev/ashop/boombayah.mp3', 0.65},
            name='KPop 4',
            rendering=1,
        },
        {
            metadata={ true, 'dance_worm', true, nil, 0.65},
            name='Worm',
            rendering=1,
        },
        {
            metadata={ true, 'dance_disco_t3', true, nil, 0.65},
            name='Disco',
            rendering=1,
        },
        {
            metadata={ true, 'wiggle', true, nil, 0.65},
            name='Wavy',
            rendering=1,
        },
        {
            metadata={ true, 'dance_nobones', true, nil, 0.65},
            name='No bones',
            rendering=1,
        },
        {
            metadata={ true, 'dance_shoot', true, nil, 0.65},
            name='Shoot',
            rendering=1,
        },
        {
            metadata={ true, 'dance_swipeit', true, nil, 0.65},
            name='Swipe it',
            rendering=1,
        },
        {
            metadata={ true, 'divinepose', true, nil, 0.65},
            name='Divine',
            rendering=1,
        },
        {
            metadata={ true, 'kungfu_salute', true, nil, 0.65},
            name='KungFu Salute',
            rendering=1,
        },
        {
            metadata={ true, 'technozombie', true, nil, 0.65},
            name='Zombie',
            rendering=1,
        },
        {
            metadata={ true, 'idle_lower', true, nil, 0.65},
            name='Aggressive Stand',
            rendering=1,
        },
        {
            metadata={ true, 'headbanger', true, 'https://akulla.dev/ashop/entersandman.mp3', 0.65},
            name='Headbanger',
            rendering=1,
        },
        {
            metadata={ true, 'dunk', true, nil, 0.65},
            name='Dunk',
            rendering=1,
        },
        {
            metadata={ true, 'dust_off_shoulders', true, nil, 0.65},
            name='Dust Off',
            rendering=1,
        },
        {
            metadata={ true, 'electroswing', true, nil, 0.65},
            name='Electro',
            rendering=1,
        },
        {
            metadata={ true, 'flex', true, nil, 0.65},
            name='Flex',
            rendering=1,
        },
        {
            metadata={ true, 'flippnsexy', true, nil, 0.65},
            name='Sexy Flip',
            rendering=1,
        },
        {
            metadata={ true, 'dancemoves', true, nil, 0.65},
            name='Fortnite Them',
            rendering=1,
        },
    }
})
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_ashop_wepskin_static.lua:
ashop.RegisterPremade("AShop Static Weps", {
        requireWorkshop = "",

        objectTypes = {
            {
                "WeaponSkins",
                // {} metadatas,
            }
        },

        items = {
        {
            metadata = {"akulla/weaponskins/static_1"},
            name = "Volcano",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_2"},
            name = "Purple Cloth",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_3"},
            name = "Ice Strawberry",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_4"},
            name = "Grey Cloth",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_5"},
            name = "Black Leather",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_6"},
            name = "Blue Cloth",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_7"},
            name = "Blue/Pink Geometry",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_8"},
            name = "Rainbow Cream",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_9"},
            name = "Red Spikes",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_10"},
            name = "Rainbow",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_11"},
            name = "Red Geometric",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_12"},
            name = "Pink/Blue Aesthetic",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_13"},
            name = "Purple/Black Aesthetic",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_14"},
            name = "Glass Light",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_15"},
            name = "Red/Blue",
            rendering = 1
        },

        {
            metadata = {"akulla/weaponskins/static_16"},
            name = "Blue Rainbow",
            rendering = 1
        },
    }})
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_corona.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_piratehat.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_respirator.lua:
ashop.RegisterPremade("Respirator", {
        requireWorkshop = "939706836",

        objectTypes = {
            {
                "Wearables",
                {"ValveBiped.Bip01_Head1"},
                "Facemask"
            },
        },

        items = {
            {
                name = "Respirator",
                rendering = 1,
                metadata = {
                    [1] = 'models/mgsv/gear/venom_respirator.mdl',
                    [3] = Vector(1.40625, -2.875, -0.21875),
                    [4] = Angle(180, 109.9375, 89.84375),
                    [10] = false,
                    [11] = 0,
                },
            },
        }
    }
)
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_splatoonhead.lua:
ashop.RegisterPremade("Splatoon Hats", {
        requireWorkshop = "889681148",

        objectTypes = {
            {
                "Wearables",
                {"ValveBiped.Bip01_Head1"},
                "Hat"
            }
        },
        items = {
            {
                rendering = 1,
                name = "Power mask",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/amiibo/power_mask/power_mask.mdl',
                }
            },
            {
                rendering = 1,
                name = "Samurai helmet",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/amiibo/samurai_helmet/samurai_helmet.mdl',
                }
            },
            {
                rendering = 1,
                name = "Octopus hairclip female",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/amiibo/squid_hairclip/octopus_hairclip_female.mdl',
                }
            },
            {
                rendering = 1,
                name = "Squid hairclip female",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/amiibo/squid_hairclip/squid_hairclip_female.mdl',
                }
            },
            {
                rendering = 1,
                name = "Squid hairclip female alt",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/amiibo/squid_hairclip/squid_hairclip_female_alt.mdl',
                }
            },
            {
                rendering = 1,
                name = "Squid hairclip male",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/amiibo/squid_hairclip/squid_hairclip_male.mdl',
                }
            },
            {
                rendering = 1,
                name = "Squid hairclip male alt",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/amiibo/squid_hairclip/squid_hairclip_male_alt.mdl',
                }
            },
            {
                rendering = 1,
                name = "Bandanas female",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/bandanas/bandanas_female.mdl',
                }
            },
            {
                rendering = 1,
                name = "Bandanas male",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/bandanas/bandanas_male.mdl',
                }
            },
            {
                rendering = 1,
                name = "Beanies",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/beanies/beanies/beanies.mdl',
                }
            },
            {
                rendering = 1,
                name = "Bobble hats",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/beanies/bobble_hats/bobble_hats.mdl',
                }
            },
            {
                rendering = 1,
                name = "Squid nordic",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/beanies/squid_nordic/squid_nordic.mdl',
                }
            },
            {
                rendering = 1,
                name = "Squid nordic no goggles",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/beanies/squid_nordic/squid_nordic_no_goggles.mdl',
                }
            },
            {
                rendering = 1,
                name = "Baseball caps",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/caps/baseball_caps/baseball_caps.mdl',
                }
            },
            {
                rendering = 1,
                name = "Basketball caps",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/caps/basketball_caps/basketball_caps.mdl',
                }
            },
            {
                rendering = 1,
                name = "Mesh caps",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/caps/mesh_caps/mesh_caps.mdl',
                }
            },
            {
                rendering = 1,
                name = "18k aviators",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/glasses/18k_aviators/18k_aviators.mdl',
                }
            },
            {
                rendering = 1,
                name = "Arrowbands",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/glasses/arrowbands/arrowbands.mdl',
                }
            },
            {
                rendering = 1,
                name = "Full moon glasses",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/glasses/full_moon_glasses/full_moon_glasses.mdl',
                }
            },
            {
                rendering = 1,
                name = "Octoglasses",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/glasses/octoglasses/octoglasses.mdl',
                }
            },
            {
                rendering = 1,
                name = "Retro specs",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/glasses/retro_specs/retro_specs.mdl',
                }
            },
            {
                rendering = 1,
                name = "Shades",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/glasses/shades/shades.mdl',
                }
            },
            {
                rendering = 1,
                name = "Pilot goggles",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/goggles/pilot_goggles/pilot_goggles.mdl',
                }
            },
            {
                rendering = 1,
                name = "Snorkel mask",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/goggles/snorkel_mask/snorkel_mask.mdl',
                }
            },
            {
                rendering = 1,
                name = "Splash goggles",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/goggles/splash_goggles/splash_goggles.mdl',
                }
            },
            {
                rendering = 1,
                name = "Stealth goggles",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/goggles/stealth_goggles/stealth_goggles.mdl',
                }
            },
            {
                rendering = 1,
                name = "Stealth goggles beta",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/goggles/stealth_goggles/stealth_goggles_beta.mdl',
                }
            },
            {
                rendering = 1,
                name = "Soccer headband female",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/headbands/soccer_headband/soccer_headband_female.mdl',
                }
            },
            {
                rendering = 1,
                name = "Soccer headband male",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/headbands/soccer_headband/soccer_headband_male.mdl',
                }
            },
            {
                rendering = 1,
                name = "Sweatbands",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/headbands/sweatbands/sweatbands.mdl',
                }
            },
            {
                rendering = 1,
                name = "Traditional headband female",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/headbands/traditional_headband/traditional_headband_female.mdl',
                }
            },
            {
                rendering = 1,
                name = "Traditional headband male",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/headbands/traditional_headband/traditional_headband_male.mdl',
                }
            },
            {
                rendering = 1,
                name = "Designer headphones",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/headphones/designer_headphones/designer_headphones.mdl',
                }
            },
            {
                rendering = 1,
                name = "Noise cancelers",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/headphones/noise_cancelers/noise_cancelers.mdl',
                }
            },
            {
                rendering = 1,
                name = "Studio headphones",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/headphones/studio_headphones/studio_headphones.mdl',
                }
            },
            {
                rendering = 1,
                name = "Armor helmet",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/octovalley/armor_helmet/armor_helmet.mdl',
                }
            },
            {
                rendering = 1,
                name = "Hero headset",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/octovalley/hero_headset/hero_headset.mdl',
                }
            },
            {
                rendering = 1,
                name = "Legendary cap female",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/octovalley/legendary_cap/legendary_cap_female.mdl',
                }
            },
            {
                rendering = 1,
                name = "Legendary cap male",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/octovalley/legendary_cap/legendary_cap_male.mdl',
                }
            },
            {
                rendering = 1,
                name = "Octoling goggles",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/octovalley/octoling_goggles/octoling_goggles.mdl',
                }
            },
            {
                rendering = 1,
                name = "Seaweed",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/octovalley/octoling_goggles/seaweed.mdl',
                }
            },
            {
                rendering = 1,
                name = "Seaweed jiggle",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/octovalley/octoling_goggles/seaweed_jiggle.mdl',
                }
            },
            {
                rendering = 1,
                name = "Bamboo hat",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/outdoors/bamboo_hat/bamboo_hat.mdl',
                }
            },
            {
                rendering = 1,
                name = "Blowfish bell hat",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/outdoors/blowfish_bell_hat/blowfish_bell_hat.mdl',
                }
            },
            {
                rendering = 1,
                name = "Bucket hats",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/outdoors/bucket_hats/bucket_hats.mdl',
                }
            },
            {
                rendering = 1,
                name = "Straw boaters female",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/outdoors/straw_boater/straw_boaters_female.mdl',
                }
            },
            {
                rendering = 1,
                name = "Straw boaters male",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/outdoors/straw_boater/straw_boaters_male.mdl',
                }
            },
            {
                rendering = 1,
                name = "Treasure hunter",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/outdoors/treasure_hunter/treasure_hunter.mdl',
                }
            },
            {
                rendering = 1,
                name = "Bike helmet",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/sports/bike_helmet/bike_helmet.mdl',
                }
            },
            {
                rendering = 1,
                name = "Cycling caps",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/sports/cycling_caps/cycling_caps.mdl',
                }
            },
            {
                rendering = 1,
                name = "Paintball mask",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/sports/paintball_mask/paintball_mask.mdl',
                }
            },
            {
                rendering = 1,
                name = "Skate helmets",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/sports/skate_helmets/skate_helmets.mdl',
                }
            },
            {
                rendering = 1,
                name = "Tentacles helmet",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/sports/tentacles_helmet/tentacles_helmet.mdl',
                }
            },
            {
                rendering = 1,
                name = "Gas mask",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/unique/gas_mask/gas_mask.mdl',
                }
            },
            {
                rendering = 1,
                name = "Special forces beret",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/unique/special_forces_beret/special_forces_beret.mdl',
                }
            },
            {
                rendering = 1,
                name = "Squid girl hat female",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/unique/squid_girl_hat/squid_girl_hat_female.mdl',
                }
            },
            {
                rendering = 1,
                name = "Squid girl hat male",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/unique/squid_girl_hat/squid_girl_hat_male.mdl',
                }
            },
            {
                rendering = 1,
                name = "Warrior headdress",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/unique/warrior_headdress/warrior_headdress.mdl',
                }
            },
            {
                rendering = 1,
                name = "Sun visor",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/visors/sun_visor/sun_visor.mdl',
                }
            },
            {
                rendering = 1,
                name = "Visors",
                metadata = {
                    [10] = true,
                    [1] = 'models/props_splatoon/gear/headgear/visors/visors/visors.mdl',
                }
            },
            
        }
    })
--addons/sh_reports/lua/autorun/autorun_reports.lua:
return gluapack()()
--addons/sh_reports/lua/reports/sh_main.lua:
return gluapack()()
--addons/sh_reports/lua/reports/cl_menu_make.lua:
return gluapack()()
--addons/safezone-sh/lua/sz_config.lua:
                                /**
                                * General configuration
                                **/

                                -- Usergroups allowed to add/modify Safe Zones
                                SH_SZ.Usergroups = {
                                    ["admin"] = true,
                                    ["superadmin"] = true,
                                    ["Bas Admin"] = true,
                                    ["Deneme Admin"] = true,
                                    ["bas moderator"] = true,
                                    ["Deneyimli Moderator"] = true,
                                    ["moderator+"] = true,
                                    ["moderator"] = true,
                                    ["deneme moderator"] = true,
                                    ["bas helper"] = true,
                                    ["Deneyimli Helper"] = true,
                                    ["helper+"] = true,
                                    ["helper"] = true,
                                    ["deneme helper"] = true,
                                }

                                -- If the "Block players from attacking" Safe Zone option is activated,
                                -- this is the whitelist of SWEPs players are allowed to attack with inside a Safe Zone.
                                -- Admins are not affected by this option; they can attack with any weapon.
                                SH_SZ.WeaponWhitelist = {
                                    ["gmod_camera"] = true,
                                    ["aphone"] = true,
                                    ["weapon_physcannon"] = true,
                                    ["weapon_medkit"] = true,
                                }

                                -- Commands to bring up the Safe Zone Editor menu
                                -- Case/whitespace insensitive, ! commands are automatically replaced by /
                                SH_SZ.Commands = {
                                    ["/safezones"] = true,
                                    ["/safezone"] = true,
                                    ["/sz"] = true,
                                }

                                -- Use Steam Workshop for the content instead of FastDL?
                                SH_SZ.UseWorkshop = true

                                -- Controls for the Editor camera.
                                -- See a full list here: http://wiki.garrysmod.com/page/Enums/KEY
                                SH_SZ.CameraControls = {
                                    forward = KEY_W,
                                    left = KEY_A,
                                    back = KEY_S,
                                    right = KEY_D,
                                }

                                /**
                                * HUD configuration
                                **/

                                -- Where to display the Safe Zone Indicator on the screen.
                                -- Possible options: topleft, top, topright, left, center, right, bottomleft, bottom, bottomright
                                SH_SZ.HUDAlign = "top"

                                -- Offset of the Indicator relative to its base position.
                                -- Use this if you want to move the indicator by a few pixels.
                                SH_SZ.HUDOffset = {
                                    x = 0,
                                    y = 0,
                                    scale = false, -- Set to false/true to enable offset scaling depending on screen resolution.
                                }

                                /**
                                * Advanced configuration
                                * Edit at your own risk!
                                **/

                                SH_SZ.WindowSize = {w = 800, h = 300}

                                SH_SZ.DefaultOptions = {
                                    name = "Safe Zone",
                                    namecolor = "255,0,0",
                                    hud = true,
                                    noatk = true,
                                    nonpc = true,
                                    noprop = true,
                                    ptime = 5,
                                    entermsg = "",
                                    leavemsg = "",
                                }

                                SH_SZ.MaximumSize = 1024

                                SH_SZ.DataDirName = "sh_safezones"

                                SH_SZ.ZoneHitboxesDeveloper = false

                                SH_SZ.TeleportIdealDistance = 512

                                /**
                                * Theme configuration
                                **/

                                -- Font to use for normal text throughout the interface.
                                SH_SZ.Font = "Circular Std Medium"

                                -- Font to use for bold text throughout the interface.
                                SH_SZ.FontBold = "Circular Std Bold"

                                -- Color sheet. Only modify if you know what you're doing
                                SH_SZ.Style = {
                                    header = Color(52, 152, 219, 255),
                                    bg = Color(52, 73, 94, 255),
                                    inbg = Color(44, 62, 80, 255),

                                    close_hover = Color(231, 76, 60, 255),
                                    hover = Color(255, 255, 255, 10, 255),
                                    hover2 = Color(255, 255, 255, 5, 255),

                                    text = Color(255, 255, 255, 255),
                                    text_down = Color(0, 0, 0),
                                    textentry = Color(236, 240, 241),
                                    menu = Color(127, 140, 141),

                                    success = Color(46, 204, 113),
                                    failure = Color(231, 76, 60),
                                }

                                /**
                                * Language configuration
                                **/

                                -- Various strings used throughout the chatbox. Change them to your language here.
                                -- %s and %d are special strings replaced with relevant info, keep them in the string!

                                SH_SZ.Language = {
                                    safezone = "Güvenli bölgesi",
                                    safezone_type = "Güvenli bölgesi türü",
                                    cube = "Küp",
                                    sphere = "Küre",

                                    select_a_safezone = "Güvenli bir alan seçin",

                                    options = "Seçenek",
                                    name = "İsim",
                                    name_color = "Renk",
                                    enable_hud_indicator = "HUD göstergesini etkinleştir",
                                    delete_non_admin_props = "Üçüncü bir tarafın gerektirdiği öğeleri kaldırma",
                                    prevent_attacking_with_weapons = "Yönetici olmayanların saldırmasını önler",
                                    automatically_remove_npcs = "Npc'yi kaldırma",
                                    time_until_protection_enables = "Koruma etkinleştirilmeden önceki süre",
                                    enter_message = "Mesajınızı girin",
                                    leave_message = "Mesaj bırakın",

                                    will_be_protected_in_x = "Güvenli Alana Giriş Yaptın %s Saniye İçersinde Güvende Olucaksın",
                                    safe_from_damage = "Şuanda Güvenli Bölgedesin Burada Hasar Alamassın",

                                    place_point_x = "Mekanın puan numarası. fare ile %d",
                                    size = "Boyut",
                                    finalize_placement = "Yerleşimi tamamlayın ve \"Onayla \" yı tıklayın.",

                                    add = "Eklemek",
                                    edit = "Düzenlemek",
                                    fill_vertically = "Dikey olarak doldur",
                                    reset = "Sıfırla",
                                    confirm = "Onaylama",
                                    teleport_there = "Oraya ışınlan",
                                    save = "Kaydetmek",
                                    delete = "Kaldırmak",
                                    cancel = "İptal etmek",
                                    move_camera = "Kamerayı hareket ettirin",
                                    rotate_camera = "SAĞ tıklayın: döndürme kamerası",

                                    an_error_has_occured = "Bir hata oluştu Sunucuyu yeniden başlatın ve yeniden deneyin.",
                                    not_allowed = "Bu eylemi gerçekleştirmenize izin verilmez.",
                                    safe_zone_created = "Güvenli bölge başarıyla oluşturuldu!",
                                    safe_zone_edited = "Güvenli bölge başarıyla düzenlendi!",
                                    safe_zone_deleted = "Güvenli alan başarıyla silindi!!",
                                }
--addons/safezone-sh/lua/safezones/sh_main.lua:
return gluapack()()
--addons/safezone-sh/lua/safezones/cl_interface.lua:
/*
* About time I made a library for general use!
* You can copy this file for your own server/personal use.
* What you can't do is use it in a commercial project without my approval (add me at http://steamcommunity.com/id/shendow/)
* I won't provide much support if you run into trouble editing this file.
*/

local base_table = SH_SZ
local font_prefix = "SH_SZ."

--
local matClose = Material("shenesis/general/close.png", "noclamp smooth")

local function get_scale()
	local sc = math.Clamp(ScrH() / 1080, 0.7, 1)
	if (!th) then
		th = 48 * sc
		m = th * 0.25
	end

	return sc
end

function base_table:GetPadding()
	return th
end

function base_table:GetMargin()
	return m
end

function base_table:GetScreenScale()
	return get_scale()
end

function base_table:CreateFonts(scale)
	local font = self.Font
	local font_bold = self.FontBold

	local sizes = {
		[12] = "Small",
		[16] = "Medium",
		[20] = "Large",
		[24] = "Larger",
		[32] = "Largest",
		[200] = "3D",
	}

	for s, n in pairs (sizes) do
		surface.CreateFont(font_prefix .. n, {font = font, size = s * scale})
		surface.CreateFont(font_prefix .. n .. "B", {font = font_bold, size = s * scale})
	end
end

hook.Add("InitPostEntity", font_prefix .. "CreateFonts", function()
	base_table:CreateFonts(get_scale())
end)

function base_table:MakeWindow(title)
	local scale = get_scale()
	local styl = self.Style

	local pnl = vgui.Create("EditablePanel")
	pnl.m_bDraggable = true
	pnl.SetDraggable = function(me, b)
		me.m_bDraggable = b
	end
	pnl.Paint = function(me, w, h)
		if (me.m_fCreateTime) then
			Derma_DrawBackgroundBlur(me, me.m_fCreateTime)
		end

		draw.RoundedBox(4, 0, 0, w, h, styl.bg)
	end
	pnl.OnClose = function() end
	pnl.Close = function(me)
		if (me.m_bClosing) then
			return end

		me.m_bClosing = true
		me:AlphaTo(0, 0.1, 0, function()
			me:Remove()
		end)
		me:OnClose()
	end

		local header = vgui.Create("DPanel", pnl)
		header:SetTall(th)
		header:Dock(TOP)
		header.Paint = function(me, w, h)
			draw.RoundedBoxEx(4, 0, 0, w, h, styl.header, true, true, false, false)
		end
		header.Think = function(me)
			if (me.Hovered and pnl.m_bDraggable) then
				me:SetCursor("sizeall")
			end

			local drag = me.m_Dragging
			if (drag) then
				local mx, my = math.Clamp(gui.MouseX(), 1, ScrW() - 1), math.Clamp(gui.MouseY(), 1, ScrH() - 1)
				local x, y = mx - drag[1], my - drag[2]

				pnl:SetPos(x, y)
			end
		end
		header.OnMousePressed = function(me)
			if (pnl.m_bDraggable) then
				me.m_Dragging = {gui.MouseX() - pnl.x, gui.MouseY() - pnl.y}
				me:MouseCapture(true)
			end
		end
		header.OnMouseReleased = function(me)
			me.m_Dragging = nil
			me:MouseCapture(false)
		end

			local titlelbl = self:QuickLabel(title, font_prefix .. "Larger", styl.text, header)
			titlelbl:Dock(LEFT)
			titlelbl:DockMargin(m, 0, 0, 0)
			pnl.m_Title = titlelbl

			local close = vgui.Create("DButton", header)
			close:SetText("")
			close:SetWide(th)
			close:Dock(RIGHT)
			close.Paint = function(me, w, h)
				if (me.Hovered) then
					draw.RoundedBoxEx(4, 0, 0, w, h, styl.close_hover, false, true, false, false)
				end

				if (me:IsDown()) then
					draw.RoundedBoxEx(4, 0, 0, w, h, styl.hover, false, true, false, false)
				end

				surface.SetDrawColor(me:IsDown() and styl.text_down or styl.text)
				surface.SetMaterial(matClose)
				surface.DrawTexturedRectRotated(w * 0.5, h * 0.5, 16 * scale, 16 * scale, 0)
			end
			close.DoClick = function(me)
				pnl:Close()
			end
			pnl.m_Close = close

	return pnl
end

function base_table:QuickLabel(t, f, c, p)
	local l = vgui.Create("DLabel", p)
	l:SetText(t)
	l:SetFont(f:Replace("{prefix}", font_prefix))
	l:SetColor(c)
	l:SizeToContents()

	return l
end

function base_table:QuickButton(t, cb, p, f, c)
	local styl = self.Style

	local b = vgui.Create("DButton", p)
	b:SetText(t)
	b:SetFont((f or "{prefix}Medium"):Replace("{prefix}", font_prefix))
	b:SetColor(c or styl.text)
	b:SizeToContents()
	b.DoClick = function(me)
		cb(me)
	end
	b.Paint = function(me, w, h)
		draw.RoundedBox(4, 0, 0, w, h, me.m_Background or styl.inbg)

		if (me.Hovered) then
			draw.RoundedBox(4, 0, 0, w, h, styl.hover)
		end

		if (me:IsDown()) then
			draw.RoundedBox(4, 0, 0, w, h, styl.hover)
		end
	end

	return b
end

function base_table:QuickEntry(tx, parent)
	local styl = self.Style

	local entry = vgui.Create("DTextEntry", parent)
	entry:SetText(tx or "")
	entry:SetFont("SH_SZ.Medium")
	entry:SetDrawLanguageID(false)
	entry:SetUpdateOnType(true)
	entry.Paint = function(me, w, h)
		draw.RoundedBox(4, 0, 0, w, h, styl.textentry)
		me:DrawTextEntryText(me:GetTextColor(), me:GetHighlightColor(), me:GetCursorColor())
	end

	return entry
end

function base_table:PaintScroll(panel)
	local styl = self.Style

	local scr = panel:GetVBar()
	scr.Paint = function(_, w, h)
		draw.RoundedBox(4, 0, 0, w, h, /* 76561197980596512 styl.header */ styl.bg)
	end

	scr.btnUp.Paint = function(_, w, h)
		draw.RoundedBox(4, 2, 0, w - 4, h - 2, styl.inbg)
	end
	scr.btnDown.Paint = function(_, w, h)
		draw.RoundedBox(4, 2, 2, w - 4, h - 2, styl.inbg)
	end

	scr.btnGrip.Paint = function(me, w, h)
		draw.RoundedBox(4, 2, 0, w - 4, h, styl.inbg)

		if (me.Hovered) then
			draw.RoundedBox(4, 2, 0, w - 4, h, styl.hover2)
		end

		if (me.Depressed) then
			draw.RoundedBox(4, 2, 0, w - 4, h, styl.hover2)
		end
	end
end

function base_table:StringRequest(title, text, callback)
	local styl = self.Style

	if (IsValid(_LOUNGE_STRREQ)) then
		_LOUNGE_STRREQ:Remove()
	end

	local scale = get_scale()
	local wi, he = 600 * scale, 160 * scale

	local cancel = vgui.Create("DPanel")
	cancel:SetDrawBackground(false)
	cancel:StretchToParent(0, 0, 0, 0)
	cancel:MoveToFront()
	cancel:MakePopup()

	local pnl = self:MakeWindow(title)
	pnl:SetSize(wi, he)
	pnl:Center()
	pnl:MakePopup()
	pnl.m_fCreateTime = SysTime()
	_LOUNGE_STRREQ = pnl

	cancel.OnMouseReleased = function(me, mc)
		if (mc == MOUSE_LEFT) then
			pnl:Close()
		end
	end
	cancel.Think = function(me)
		if (!IsValid(pnl)) then
			me:Remove()
		end
	end

		local body = vgui.Create("DPanel", pnl)
		body:SetDrawBackground(false)
		body:Dock(FILL)
		body:DockPadding(m, m, m, m)

			local tx = self:QuickLabel(text, font_prefix .. "Large", styl.text, body)
			tx:SetContentAlignment(5)
			tx:SetWrap(tx:GetWide() > wi - m * 2)
			tx:Dock(FILL)

			local apply = vgui.Create("DButton", body)
			apply:SetText("OK")
			apply:SetColor(styl.text)
			apply:SetFont(font_prefix .. "Medium")
			apply:Dock(BOTTOM)
			apply.Paint = function(me, w, h)
				draw.RoundedBox(4, 0, 0, w, h, styl.inbg)

				if (me.Hovered) then
					draw.RoundedBox(4, 0, 0, w, h, styl.hover)
				end

				if (me:IsDown()) then
					draw.RoundedBox(4, 0, 0, w, h, styl.hover)
				end
			end

			local entry = vgui.Create("DTextEntry", body)
			entry:RequestFocus()
			entry:SetFont(font_prefix .. "Medium")
			entry:SetDrawLanguageID(false)
			entry:Dock(BOTTOM)
			entry:DockMargin(0, m, 0, m)
			entry.Paint = function(me, w, h)
				draw.RoundedBox(4, 0, 0, w, h, styl.textentry)
				me:DrawTextEntryText(me:GetTextColor(), me:GetHighlightColor(), me:GetCursorColor())
			end
			entry.OnEnter = function()
				apply:DoClick()
			end

			apply.DoClick = function()
				pnl:Close()
				callback(entry:GetValue())
			end

	pnl.OnFocusChanged = function(me, gained)
		if (!gained) then
			timer.Simple(0, function()
				if (!IsValid(me) or vgui.GetKeyboardFocus() == entry) then
					return end

				me:Close()
			end)
		end
	end

	pnl:SetWide(math.max(math.min(tx:GetWide() + m * 2, pnl:GetWide()), th * 2))
	pnl:CenterHorizontal()

	pnl:SetAlpha(0)
	pnl:AlphaTo(255, 0.1)
end

function base_table:Menu()
	local styl = self.Style

	if (IsValid(_LOUNGE_MENU)) then
		_LOUNGE_MENU:Remove()
	end

	local cancel = vgui.Create("DPanel")
	cancel:SetDrawBackground(false)
	cancel:StretchToParent(0, 0, 0, 0)
	cancel:MoveToFront()
	cancel:MakePopup()

	local pnl = vgui.Create("DPanel")
	pnl:SetDrawBackground(false)
	pnl:SetSize(20, 1)
	pnl.AddOption = function(me, text, callback)
		surface.SetFont(font_prefix .. "MediumB")
		local wi, he = surface.GetTextSize(text)
		wi = wi + m * 2
		he = he + m

		me:SetWide(math.max(wi, me:GetWide()))
		me:SetTall(pnl:GetTall() + he)

		local btn = vgui.Create("DButton", me)
		btn:SetText(text)
		btn:SetFont(font_prefix .. "MediumB")
		btn:SetColor(styl.text)
		btn:Dock(TOP)
		btn:SetSize(wi, he)
		btn.Paint = function(me, w, h)
			surface.SetDrawColor(styl.menu)
			surface.DrawRect(0, 0, w, h)

			if (me.Hovered) then
				surface.SetDrawColor(styl.hover)
				surface.DrawRect(0, 0, w, h)
			end

			if (me:IsDown()) then
				surface.SetDrawColor(styl.hover)
				surface.DrawRect(0, 0, w, h)
			end
		end
		btn.DoClick = function(me)
			callback()
			pnl:Close()
		end
	end
	pnl.Open = function(me)
		me:SetPos(gui.MouseX(), math.min(math.max(0, ScrH() - me:GetTall()), gui.MouseY()))
		me:MakePopup()
	end
	pnl.Close = function(me)
		if (me.m_bClosing) then
			return end

		me.m_bClosing = true
		me:AlphaTo(0, 0.1, 0, function()
			me:Remove()
		end)
	end
	_LOUNGE_MENU = pnl

	cancel.OnMouseReleased = function(me, mc)
		pnl:Close()
	end
	cancel.Think = function(me)
		if (!IsValid(pnl)) then
			me:Remove()
		end
	end

	return pnl
end

function base_table:PanelPaint(name)
	local styl = self.Style
	local col = styl[name] or styl.bg

	return function(me, w, h)
		draw.RoundedBox(4, 0, 0, w, h, col)
	end
end

// https://facepunch.com/showthread.php?t=1522945&p=50524545&viewfull=1#post50524545|76561197980596537
local sin, cos, rad = math.sin, math.cos, math.rad
local rad0 = rad(0)
local function DrawCircle(x, y, radius, seg)
	local cir = {
		{x = x, y = y}
	}

	for i = 0, seg do
		local a = rad((i / seg) * -360)
		table.insert(cir, {x = x + sin(a) * radius, y = y + cos(a) * radius})
	end

	table.insert(cir, {x = x + sin(rad0) * radius, y = y + cos(rad0) * radius})
	surface.DrawPoly(cir)
end

function base_table:Avatar(ply, siz, par)
	if (type(ply) == "Entity" and !IsValid(ply)) then
		return end

	if (isnumber(ply)) then
		ply = tostring(ply)
	end

	siz = siz or 32
	local hsiz = siz * 0.5

	local url = "http://steamcommunity.com/profiles/" .. (isstring(ply) and ply or ply:SteamID64() or "")

	local pnl = vgui.Create("DPanel", par)
	pnl:SetSize(siz, siz)
	pnl:SetDrawBackground(false)
	pnl.Paint = function() end

		local av = vgui.Create("AvatarImage", pnl)
		if (isstring(ply)) then
			av:SetSteamID(ply, siz)
		else
			av:SetPlayer(ply, siz)
		end
		av:SetPaintedManually(true)
		av:SetSize(siz, siz)
		av:Dock(FILL)

			local btn = vgui.Create("DButton", av)
			btn:SetToolTip("Click here to view " .. (isstring(ply) and "their" or ply:Nick() .. "'s") .. " Steam Profile")
			btn:SetText("")
			btn:Dock(FILL)
			btn.Paint = function() end
			btn.DoClick = function(me)
				gui.OpenURL(url)
			end

	pnl.Paint = function(me, w, h)
		render.ClearStencil()
		render.SetStencilEnable(true)

		render.SetStencilWriteMask(1)
		render.SetStencilTestMask(1)

		render.SetStencilFailOperation(STENCILOPERATION_REPLACE)
		render.SetStencilPassOperation(STENCILOPERATION_ZERO)
		render.SetStencilZFailOperation(STENCILOPERATION_ZERO)
		render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_NEVER)
		render.SetStencilReferenceValue(1)

		draw.NoTexture()
		surface.SetDrawColor(color_black)
		DrawCircle(hsiz, hsiz, hsiz, hsiz)

		render.SetStencilFailOperation(STENCILOPERATION_ZERO)
		render.SetStencilPassOperation(STENCILOPERATION_REPLACE)
		render.SetStencilZFailOperation(STENCILOPERATION_ZERO)
		render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_EQUAL)
		render.SetStencilReferenceValue(1)

		av:PaintManual()

		render.SetStencilEnable(false)
		render.ClearStencil()
	end

	return pnl
end

local c = {}
function base_table:GetName(sid, cb)
	if (c[sid]) then
		cb(c[sid])
		return
	end

	for _, v in pairs (player.GetAll()) do
		if (v:SteamID64() == sid) then
			c[sid] = v:Nick()
			cb(v:Nick())
			return
		end
	end

	steamworks.RequestPlayerInfo(sid)
	timer.Simple(1, function()
		cb(steamworks.GetPlayerName(sid))
		c[sid] = cb
	end)
end

function base_table:Notify(msg, dur, bg)
	if (IsValid(_SH_NOTIFY)) then
		_SH_NOTIFY:Close()
	end

	dur = dur or 3
	bg = bg or self.Style.header

	local fnt = font_prefix .. "Larger"

	local p = vgui.Create("DButton")
	p:MoveToFront()
	p:SetText(self.Language[msg] or msg)
	p:SetFont(fnt)
	p:SetColor(self.Style.text)
	p:SetSize(ScrW(), draw.GetFontHeight(fnt) + self:GetMargin() * 2)
	p:AlignTop(ScrH())
	p.Paint = function(me, w, h)
		surface.SetDrawColor(bg)
		surface.DrawRect(0, 0, w, h)
	end
	p.Close = function(me)
		if (me.m_bClosing) then
			return end

		me.m_bClosing = true
		me:MoveTo(0, ScrH(), 0.2, 0, -1, function()
			me:Remove()
		end)
	end
	p.DoClick = p.Close
	_SH_NOTIFY = p

	p:MoveTo(0, ScrH() - p:GetTall(), 0.2, 0, -1, function()
		p:MoveTo(0, ScrH(), 0.2, dur, -1, function()
			p:Remove()
		end)
	end)
end
--lua/autorun/cf_gunslinger_bl.lua:
player_manager.AddValidModel( "CF_Gunslinger_BL", "models/CF_Gunslinger_BL/CF_Gunslinger_BL.mdl" );

local Category = "CrossFire"

local NPC = { 	Name = "CF_Gunslinger_BL - Friendly", 
				Class = "npc_citizen",
				Model = "models/CF_Gunslinger_BL/CF_Gunslinger_BL.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
				Weapons = { "weapons_smg1" },
				Category = Category	}

list.Set( "NPC", "CF_Gunslinger_BL_f", NPC )

local Category = "CrossFire"

local NPC = { 	Name = "CF_Gunslinger_BL - Hostile", 
				Class = "npc_combine_s",
				Model = "models/CF_Gunslinger_BL/CF_Gunslinger_BL.mdl",
				Squadname = "CF_Gunslinger_BL",
				Numgrenades = "3",
				Health = "100",
				Weapons = { "" },
				Category = Category	}

list.Set( "NPC", "CF_Gunslinger_BL_h", NPC )
--addons/ch_atm/lua/ch_atm/shared/currencies/bricks_credit_store.lua:
CH_ATM.Currencies[ "bricks_credit_store" ] = {
	Name = "Bricks Credit Store",
	
	AddMoney = function( ply, amount )
		ply:AddBRCS_Credits( amount )
	end,
	
	TakeMoney = function( ply, amount )
		ply:RemoveBRCS_Credits( amount )
	end,
	
	GetMoney = function( ply )
		return ply:GetBRCS_Credits()
	end,
	
	CanAfford = function( ply, amount )
		return ply:GetBRCS_Credits() >= amount
	end,
	
	FormatMoney = function( amount )
		return BRICKSCREDITSTORE.FormatCredits( amount, true )
	end,
	
	CurrencyAbbreviation = function()
		return "CR"
	end,
}
--addons/ch_atm/lua/ch_atm/shared/currencies/mtokens.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/client/ch_atm_client_settings.lua:
--[[
	Cache all the materials to their respective theme number
--]]
CH_ATM.IconTheme = CH_ATM.IconTheme or {}
CH_ATM.IconTheme.Icons = CH_ATM.IconTheme.Icons or {}

CH_ATM.IconTheme.Icons[ 1 ] = { -- WHITE OUTLINE
	mat_cryptos = Material( "materials/craphead_scripts/ch_atm/gui/white/browse_crypto.png", "noclamp smooth" ),
	mat_history = Material( "materials/craphead_scripts/ch_atm/gui/white/crypto_history.png", "noclamp smooth" ),
	mat_portfolio = Material( "materials/craphead_scripts/ch_atm/gui/white/crypto_portfolio.png", "noclamp smooth" ),
	mat_send_crypto = Material( "materials/craphead_scripts/ch_atm/gui/white/send_crypto.png", "noclamp smooth" ),

	mat_load = Material( "materials/craphead_scripts/ch_atm/gui/white/loading.png", "noclamp smooth" ),
	mat_settings = Material( "materials/craphead_scripts/ch_atm/gui/white/settings.png", "noclamp smooth" ),
	mat_upgrade_account = Material( "materials/craphead_scripts/ch_atm/gui/white/upgrade_account.png", "noclamp smooth" ),
	
	mat_bank = Material( "materials/craphead_scripts/ch_atm/gui/white/bank_account.png", "noclamp smooth" ),
	mat_crypto_bank = Material( "materials/craphead_scripts/ch_atm/gui/white/crypto_account.png", "noclamp smooth" ),
	mat_no_cryptos = Material( "materials/craphead_scripts/ch_atm/gui/white/no_crypto.png", "noclamp smooth" ),

	mat_deposit = Material( "materials/craphead_scripts/ch_atm/gui/white/deposit.png", "noclamp smooth" ),
	mat_withdraw = Material( "materials/craphead_scripts/ch_atm/gui/white/withdraw.png", "noclamp smooth" ),
	mat_send_money = Material( "materials/craphead_scripts/ch_atm/gui/white/send_money.png", "noclamp smooth" ),
	mat_bank_history = Material( "materials/craphead_scripts/ch_atm/gui/white/history.png", "noclamp smooth" ),
	
	mat_insert_card = Material( "materials/craphead_scripts/ch_atm/gui/white/insert_card.png", "noclamp smooth" ),
	mat_exit_atm = Material( "materials/craphead_scripts/ch_atm/gui/white/exit_atm.png", "noclamp smooth" ),
	
	mat_transfer_online = Material( "materials/craphead_scripts/ch_atm/gui/white/transfer_online.png", "noclamp smooth" ),
	mat_transfer_offline = Material( "materials/craphead_scripts/ch_atm/gui/white/transfer_offline.png", "noclamp smooth" ),
}

CH_ATM.IconTheme.Icons[ 2 ] = { -- GRADIENT
	mat_cryptos = Material( "materials/craphead_scripts/ch_atm/gui/gradient/browse_crypto.png", "noclamp smooth" ),
	mat_history = Material( "materials/craphead_scripts/ch_atm/gui/gradient/crypto_history.png", "noclamp smooth" ),
	mat_portfolio = Material( "materials/craphead_scripts/ch_atm/gui/gradient/crypto_portfolio.png", "noclamp smooth" ),
	mat_send_crypto = Material( "materials/craphead_scripts/ch_atm/gui/gradient/send_crypto.png", "noclamp smooth" ),

	mat_load = Material( "materials/craphead_scripts/ch_atm/gui/gradient/loading.png", "noclamp smooth" ),
	mat_settings = Material( "materials/craphead_scripts/ch_atm/gui/gradient/settings.png", "noclamp smooth" ),
	mat_upgrade_account = Material( "materials/craphead_scripts/ch_atm/gui/gradient/upgrade_account.png", "noclamp smooth" ),
	
	mat_bank = Material( "materials/craphead_scripts/ch_atm/gui/gradient/bank_account.png", "noclamp smooth" ),
	mat_crypto_bank = Material( "materials/craphead_scripts/ch_atm/gui/gradient/crypto_account.png", "noclamp smooth" ),
	mat_no_cryptos = Material( "materials/craphead_scripts/ch_atm/gui/gradient/no_crypto.png", "noclamp smooth" ),

	mat_deposit = Material( "materials/craphead_scripts/ch_atm/gui/gradient/deposit.png", "noclamp smooth" ),
	mat_withdraw = Material( "materials/craphead_scripts/ch_atm/gui/gradient/withdraw.png", "noclamp smooth" ),
	mat_send_money = Material( "materials/craphead_scripts/ch_atm/gui/gradient/send_money.png", "noclamp smooth" ),
	mat_bank_history = Material( "materials/craphead_scripts/ch_atm/gui/gradient/history.png", "noclamp smooth" ),
	
	mat_insert_card = Material( "materials/craphead_scripts/ch_atm/gui/gradient/insert_card.png", "noclamp smooth" ),
	mat_exit_atm = Material( "materials/craphead_scripts/ch_atm/gui/gradient/exit_atm.png", "noclamp smooth" ),
	
	mat_transfer_online = Material( "materials/craphead_scripts/ch_atm/gui/gradient/transfer_online.png", "noclamp smooth" ),
	mat_transfer_offline = Material( "materials/craphead_scripts/ch_atm/gui/gradient/transfer_offline.png", "noclamp smooth" ),
}

CH_ATM.IconTheme.Icons[ 3 ] = { -- FLAT COLOR
	mat_cryptos = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/browse_crypto.png", "noclamp smooth" ),
	mat_history = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/crypto_history.png", "noclamp smooth" ),
	mat_portfolio = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/crypto_portfolio.png", "noclamp smooth" ),
	mat_send_crypto = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/send_crypto.png", "noclamp smooth" ),

	mat_load = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/loading.png", "noclamp smooth" ),
	mat_settings = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/settings.png", "noclamp smooth" ),
	mat_upgrade_account = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/upgrade_account.png", "noclamp smooth" ),
	
	mat_bank = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/bank_account.png", "noclamp smooth" ),
	mat_crypto_bank = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/crypto_account.png", "noclamp smooth" ),
	mat_no_cryptos = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/no_crypto.png", "noclamp smooth" ),

	mat_deposit = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/deposit.png", "noclamp smooth" ),
	mat_withdraw = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/withdraw.png", "noclamp smooth" ),
	mat_send_money = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/send_money.png", "noclamp smooth" ),
	mat_bank_history = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/history.png", "noclamp smooth" ),
	
	mat_insert_card = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/insert_card.png", "noclamp smooth" ),
	mat_exit_atm = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/exit_atm.png", "noclamp smooth" ),
	
	mat_transfer_online = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/transfer_online.png", "noclamp smooth" ),
	mat_transfer_offline = Material( "materials/craphead_scripts/ch_atm/gui/flat_color/transfer_offline.png", "noclamp smooth" ),
}

--[[
	Create the clientside convar setting for the ATM icon theme pack
	1 = White outlined
	2 = Gradient
	3 = Flat color
--]]
CreateClientConVar( "ch_atm_theme_setting", "1", true, false, "This setting allows you to change the icon theme for the ATM. It can be an integer between 1 and 3", 1, 3 )

function CH_ATM.GetIconTheme()
	local theme = GetConVar( "ch_atm_theme_setting" ):GetInt()
	
	return theme or 1
end

--[[
	Create the clientside convar setting for the use of cursor or hand cursor
	1 - Cursor
	2- Hand Cursor
--]]
CreateClientConVar( "ch_atm_cursor_setting", "1", true, false, "Setting for cursor or hand cursor. 1 for cursor and 2 for hand cursor.", 1, 2 )

function CH_ATM.GetCursorSetting()
	local theme = GetConVar( "ch_atm_cursor_setting" ):GetInt()
	
	return theme or 1
end
--addons/ch_atm/lua/ch_atm/client/ch_atm_colors_materials.lua:
return gluapack()()
--addons/darkrpbankrobbery2/lua/ch_bank_robbery/client/bank_fonts.lua:
return gluapack()()
--addons/ch_bitminers/lua/ch_bitminers/shared/bitminers_config.lua:
CH_Bitminers = CH_Bitminers or {}
CH_Bitminers.Config = CH_Bitminers.Config or {}
CH_Bitminers.Design = CH_Bitminers.Design or {}
CH_Bitminers.Config.MineMoneyInterval = CH_Bitminers.Config.MineMoneyInterval or {}

-- SET LANGUAGE
-- Available languages: English: en - Danish: da - German: de - Polish: pl - Russian: ru - Spanish: es - French: fr - Portuguese: pt - Chinese: cn - Turkish: tr
CH_Bitminers.Config.Language = "tr" -- Set the language of the script.

-- General
CH_Bitminers.Config.NotificationTime = 6 -- How long should a notification appear for?

-- Bitminer Values
CH_Bitminers.Config.BitcoinRate = 12308 -- 1 bitcoin equals how much cash? (1 bitcoin = 6808)
CH_Bitminers.Config.RateRandomizeInterval = 300 -- seconds between bitcoin rate is changed.
CH_Bitminers.Config.RateUpdateInterval = 20 -- Default 20. So it will randomize the change between -20 to +20. So it can either go down or up, but maximum 20 either way.
CH_Bitminers.Config.MinBitcoinRate = 22500 -- The lowest the bitcoin rate can hit.
CH_Bitminers.Config.MaxBitcoinRate = 48000 -- The maximum the bitcoin rate can go to.

CH_Bitminers.Config.NotifyPlayersChatRateUpdate = false -- Should all players be notified in chat when the bitcoin rate updates?

-- CH_Bitminers.Config.MineMoneyInterval[[AMOUNT OF MINERS] = INTERVAL BETWEEN MINING MONEY
-- Here it illustrates that having 1 miner will take 15 seconds before it mines bitcoins. The more miners, the less interval.
-- YOU DON'T NECESSARILY NEED TO MODIFY THIS
CH_Bitminers.Config.MineMoneyInterval[1] = 15
CH_Bitminers.Config.MineMoneyInterval[2] = 14
CH_Bitminers.Config.MineMoneyInterval[3] = 13
CH_Bitminers.Config.MineMoneyInterval[4] = 12
CH_Bitminers.Config.MineMoneyInterval[5] = 11
CH_Bitminers.Config.MineMoneyInterval[6] = 10
CH_Bitminers.Config.MineMoneyInterval[7] = 10
CH_Bitminers.Config.MineMoneyInterval[8] = 10
CH_Bitminers.Config.MineMoneyInterval[9] = 10
CH_Bitminers.Config.MineMoneyInterval[10] = 10
CH_Bitminers.Config.MineMoneyInterval[11] = 10
CH_Bitminers.Config.MineMoneyInterval[12] = 9
CH_Bitminers.Config.MineMoneyInterval[13] = 8
CH_Bitminers.Config.MineMoneyInterval[14] = 7
CH_Bitminers.Config.MineMoneyInterval[15] = 6
CH_Bitminers.Config.MineMoneyInterval[16] = 5

-- Removing Entities
CH_Bitminers.Config.RemoveEntsOnDC = true -- Should bitminer entities be removed once a player disconnects?
CH_Bitminers.Config.RemoveEntsOnTeamChange = false -- Should bitminer entities be removed when a player changes his job?

-- Bitminer Shelf
CH_Bitminers.Config.DefaultBitcoinsMinedPer = 0.028 -- Amount of bitcoins mined on each interval by default (any rank that is not in the table below will fallback to this.

CH_Bitminers.Config.BitcoinsMinedPer = { -- How many bitcoins are mined on each interval based on their usergroup.
	["donator"] = 0.03,
	["donator+"] = 0.04,
}

CH_Bitminers.Config.MaxBitcoinsMined = 500 -- How many bitcoins can a bitminer maximum contain
CH_Bitminers.Config.WattsRequiredPerMiner = 1025 -- Amount of watts required per miner in order to properly mine bitcoins most optimal

CH_Bitminers.Config.ShelfHealth = 150 -- Amount of health before it destroys.
CH_Bitminers.Config.ShelfStartTemperature = 0 -- Temperature the shelf spawns with.

CH_Bitminers.Config.ShelfExplosion = true -- Should the shelf cause an explosion if it takes too much damage or overheats?
CH_Bitminers.Config.NotifyOwnerOverheating = true -- Should the owner of the shelf be notified when the mining shelf overheats?

CH_Bitminers.Config.ShowScreenDistance = 50000 -- Distance between player and shelf for showing screen

CH_Bitminers.Config.ShelfMiningSoundLevel = 50 -- Sound level of the shelf mining sound. (0 = muted)

CH_Bitminers.Config.EnableEjectingBitminers = true -- Should ejecting bitminers be enabled or disabled?

-- Fuel Canisters
CH_Bitminers.Config.FuelCanSmallAmount = 50 -- Amount of fuel the small canister contains (max is 100)
CH_Bitminers.Config.FuelCanMediumAmount = 75 -- Amount of fuel the medium canister contains (max is 100)
CH_Bitminers.Config.FuelCanLargeAmount = 125 -- Amount of fuel the large canister contains (max is 100)

-- Fuel Generator
CH_Bitminers.Config.GeneratorWattsInterval = 3 -- Interval for the fuel generator to generate watts in seconds.
CH_Bitminers.Config.FuelGeneratorHealth = 150 -- Amount of health before it destroys.
CH_Bitminers.Config.FuelGeneratorExplosion = true -- Should the fuel generator cause an explosion if it takes too much damage?

CH_Bitminers.Config.FuelConsumptionRate = 10 -- Every x second the generator will consume a random amount of fuel
CH_Bitminers.Config.FuelConsumptionMin = 1 -- Every FuelConsumptionRate it will consume this minimum amount of fuel (it's randomized)
CH_Bitminers.Config.FuelConsumptionMax = 2 -- Every FuelConsumptionRate it will consume this maximum amount of fuel (it's randomized)

CH_Bitminers.Config.GeneratorSmokeEffect = true -- Display smoke effect coming out of generator when turned on.
CH_Bitminers.Config.FuelGeneratorSoundLevel = 75 -- Sound level of the fuel generator when powered on. (0 = muted)

CH_Bitminers.Config.GeneratorWattsMin = 21600 -- Minimum amounts of watts generated per interval
CH_Bitminers.Config.GeneratorWattsMax = 22600 -- Maximum amounts of watts generated per interval (IT'S RANDOMIZED)

-- Solar Panel
CH_Bitminers.Config.SolarPanelWattsInterval = 4 -- Interval for the solar panel to generate watts in seconds.
CH_Bitminers.Config.SolarPanelHealth = 100 -- Amount of health before it destroys.
CH_Bitminers.Config.SolarPanelExplosion = true -- Should the solar panel cause an explosion if it takes too much damage?

CH_Bitminers.Config.SolarPanelWattsMin = 19600 -- Minimum amounts of watts generated per interval
CH_Bitminers.Config.SolarPanelWattsMax = 19600 -- Maximum amounts of watts generated per interval (IT'S RANDOMIZED)

CH_Bitminers.Config.CollectDirtInterval = 30 -- Amount of seconds between collecting more dirt on the solar panel.
CH_Bitminers.Config.CollectDirtMin = 1 -- Minimum amount of dirt collected per interval.
CH_Bitminers.Config.CollectDirtMax = 3 -- Maximum amount of dirt collected per interval.
CH_Bitminers.Config.ShowDirt3D2D = 25000 -- -- Distance between player and solar panel for showing dirt 3d2d.

-- RTG Generator
CH_Bitminers.Config.RTGWattsInterval = 5 -- Interval for the RTG to generate watts in seconds.
CH_Bitminers.Config.RTGGeneratorHealth = 300 -- Amount of health before it destroys.
CH_Bitminers.Config.RTGGeneratorExplosion = true -- Should the RTG cause an explosion if it takes too much damage? (NOTE: large explosion)

CH_Bitminers.Config.RTGRadiationEnabled = true -- Enable/disable the damage dealt by radiation.
CH_Bitminers.Config.RTGRadiationDamageOwnerOnly = false -- If enabled, should the radiation only damage the owner of the RTG? false = damage everyone, true = owner only

CH_Bitminers.Config.RTGRadiationInterval = 5 -- Amount of seconds between giving damage to players nearby.
CH_Bitminers.Config.RTGRadiationDistance = 50000 -- Distance from players to RGT before doing damage.

CH_Bitminers.Config.RTGWattsMin = 19600 -- Minimum amounts of watts generated per interval
CH_Bitminers.Config.RTGWattsMax = 19600 -- Maximum amounts of watts generated per interval (IT'S RANDOMIZED)

CH_Bitminers.Config.EmitRadiationSound = true -- Should the random radiation sounds be emitted from the RTG?

-- Watts Decrease System
CH_Bitminers.Config.WattsDecreaseInterval = 5 -- Every 5th second it will decrease the watts if not powered/plugged in with a cable.
CH_Bitminers.Config.DecreaseAmountMin = 20 -- Minimum amount decreased every 5th second.
CH_Bitminers.Config.DecreaseAmountMax = 40 -- Minimum amount decreased every 5th second.

-- Power Cable
CH_Bitminers.Config.CableRopeLenght = 100 -- Lenght of the rope between the two ends of the power cable.
CH_Bitminers.Config.CableRopeColor = Color( 255, 255, 255, 255 ) -- Sets the color of the rope. Default is just white (no color)

-- Cooling System & Upgrades
CH_Bitminers.Config.TemperatureInterval = 0.50 -- Interval between updating temperature on miners in seconds
CH_Bitminers.Config.TempToAddPerMiner = 0.11 -- Temperature added per miner on the shelf.

CH_Bitminers.Config.TempToTakePerCooling = 1 -- Temperature removed from shelf per cooling upgrade installed.
CH_Bitminers.Config.TempToTakeWhenOff = 0.5 -- Temperature to remove every interval if the shelf is turned off.

-- Donator Features
CH_Bitminers.Config.MaxBitminersInstalled = {
	["vip"] = 16,
	["gold_member"] = 16,
	["admin"] = 16,
	["superadmin"] = 16,
	["owner"] = 16,
}

-- Health Options (Additional)
CH_Bitminers.Config.PowerCombinerHealth = 75
CH_Bitminers.Config.PowerCableHealth  = 50
CH_Bitminers.Config.FuelCanisterHealth = 75
CH_Bitminers.Config.CoolingUpgradesHealth = 100
CH_Bitminers.Config.SingleMinerHealth = 100
CH_Bitminers.Config.RGBUpgradeHealth = 75
CH_Bitminers.Config.UPSUpgradeHealth = 75
CH_Bitminers.Config.DirtCleaning = 50

-- 3RD PARTY SUPPORT
CH_Bitminers.Config.CreateFireOnExplode = false -- ONLY WORKS WITH MY FIRE SYSTEM https://www.gmodstore.com/market/view/302

CH_Bitminers.Config.DarkRPLevelSystemEnabled = false -- DARKRP LEVEL SYSTEM BY vrondakis https://github.com/uen/Leveling-System
CH_Bitminers.Config.SublimeLevelSystemEnabled = false -- Sublime Levels by HIGH ELO CODERS https://www.gmodstore.com/market/view/6431
CH_Bitminers.Config.EXP2SystemEnabled = false -- Elite XP System (EXP2) by Axspeo https://www.gmodstore.com/market/view/4316
CH_Bitminers.Config.EssentialsXPSystemEnabled = false -- Brick's Essentials and/or DarkRP Essentials by Brickwall https://www.gmodstore.com/market/view/5352 & https://www.gmodstore.com/market/view/7244
CH_Bitminers.Config.GlorifiedLevelingXPSystem = false -- GlorifiedLeveling by GlorifiedPig https://www.gmodstore.com/market/view/7254

CH_Bitminers.Config.WithdrawXPAmount = 400 -- Amount of XP to receive when exchanging bitcoins.
CH_Bitminers.Config.InstallRGBXPAmount = 200 -- Amount of XP to receive when installing RGB upgrade on bitminer shelf.

-- Bitminer Entities (NOT NECESSARY TO EDIT THIS)
CH_Bitminers.ListOfEntities = {
	["ch_bitminer_power_cable"] = true,
	["ch_bitminer_power_cable_end"] = true,
	["ch_bitminer_power_combiner"] = true,
	["ch_bitminer_power_generator"] = true,
	["ch_bitminer_power_generator_fuel_small"] = true,
	["ch_bitminer_power_generator_fuel_medium"] = true,
	["ch_bitminer_power_generator_fuel_large"] = true,
	["ch_bitminer_power_rtg"] = true,
	["ch_bitminer_power_solar"] = true,
	["ch_bitminer_shelf"] = true,
	["ch_bitminer_upgrade_clean_dirt"] = true,
	["ch_bitminer_upgrade_cooling1"] = true,
	["ch_bitminer_upgrade_cooling2"] = true,
	["ch_bitminer_upgrade_cooling3"] = true,
	["ch_bitminer_upgrade_miner"] = true,
	["ch_bitminer_upgrade_rgb"] = true,
	["ch_bitminer_upgrade_ups"] = true,
	["ch_bitminer_antivirus_usb"] = true, -- from dlc
	["ch_bitminer_hacking_usb"] = true, -- from dlc
}
--addons/ch_bitminers/lua/ch_bitminers/client/bitminers_net.lua:
--[[
	NET MSG
--]]
net.Receive( "CH_BITMINERS_UpdateBitcoinRates", function( length, ply )
	if ply then
		if not ply:IsSuperAdmin() then
			return
		end
	end
	
	local rate = net.ReadUInt( 20 )
	CH_Bitminers.Config.BitcoinRate = math.Clamp( rate, CH_Bitminers.Config.MinBitcoinRate, CH_Bitminers.Config.MaxBitcoinRate )
	
	-- Notify everyone in chat if the config is enabled
	if CH_Bitminers.Config.NotifyPlayersChatRateUpdate then
		chat.AddText( Color( 52, 152, 219 ), "[Bitminers] ", Color( 255, 255, 255 ), CH_Bitminers.Config.Lang["The bitcoin exchange rate has just updated."][CH_Bitminers.Config.Language] )
		chat.AddText( Color( 52, 152, 219 ), "[Bitminers] ", Color( 255, 255, 255 ), CH_Bitminers.Config.Lang["One bitcoin exchanges for"][CH_Bitminers.Config.Language] .." ".. DarkRP.formatMoney( CH_Bitminers.Config.BitcoinRate ) )
	end
end )
--addons/ch_mayor/lua/autorun/ch_mayor_initialize.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/ch_mayor_laws.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_officials.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/shared/currencies/pointshop2_premium.lua:
CH_Mining.Currencies[ "pointshop2_premium" ] = {
	Name = "PointShop 2 Premium Points",
	
	AddMoney = function( ply, amount )
		ply:PS2_AddPremiumPoints( amount )
	end,
	
	TakeMoney = function( ply, amount )
		ply:PS2_AddPremiumPoints( -amount )
	end,
	
	GetMoney = function( ply )
		return ply.PS2_Wallet.premiumPoints
	end,
	
	CanAfford = function( ply, amount )
		return ply.PS2_Wallet.premiumPoints >= amount
	end,
	
	FormatMoney = function( amount )
		return string.Comma( amount ) .. " point" .. (amount > 1 and "s" or "")
	end,
}
--addons/ch_mining/lua/ch_mining/shared/currencies/sh_pointshop.lua:
CH_Mining.Currencies[ "sh_pointshop" ] = {
	Name = "SH Pointshop Points",
	
	AddMoney = function( ply, amount )
		ply:SH_AddStandardPoints( amount )
	end,
	
	TakeMoney = function( ply, amount )
		ply:SH_AddStandardPoints( -amount )
	end,
	
	GetMoney = function( ply )
		return ply:SH_GetStandardPoints()
	end,
	
	CanAfford = function( ply, amount )
		return ply:SH_CanAffordStandard( amount )
	end,
	
	FormatMoney = function( amount )
		return string.Comma( amount ) .. " point" .. (amount > 1 and "s" or "")
	end,
}
--addons/ch_mining/lua/ch_mining/client/vgui/ch_mining_menu_crafting.lua:
--[[
	SKILLS MENU
--]]
function CH_Mining.CraftingMenu()
	local ply = LocalPlayer()
	
	local ply_money = CH_Mining.GetMoney( ply )
	local ply_level = ply:CH_Mining_GetLevel()
	local ply_xp = ply:CH_Mining_GetXP()
	
	local selected_item = nil
	local selected_item_key = nil
	local can_craft_item = true
	local temp_seq_table = {}
	
	local craft_time = 0
	local is_crafting = false
	
	local no_craft_reason = ""
	
	local GUI_CraftingFrame = vgui.Create( "DFrame" )
	GUI_CraftingFrame:SetTitle( "" )
	GUI_CraftingFrame:SetSize( CH_Mining.ScrW * 0.6, CH_Mining.ScrH * 0.6875 )
	GUI_CraftingFrame:Center()
	GUI_CraftingFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mining.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mining.LangString( "Crafting" ), "CH_Mining_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Draw titles
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( w * 0.182, h * 0.07, w * 0.812, h * 0.059 )
		
		draw.SimpleText( CH_Mining.LangString( "Name" ), "CH_Mining_Font_Size10", w * 0.19, h * 0.095, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mining.LangString( "Required" ), "CH_Mining_Font_Size10", w * 0.335, h * 0.095, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mining.LangString( "Total" ), "CH_Mining_Font_Size10", w * 0.4375, h * 0.095, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CraftingFrame:MakePopup()
	GUI_CraftingFrame:SetDraggable( false )
	GUI_CraftingFrame:ShowCloseButton( false )

	local GUI_CloseMenu = vgui.Create( "DButton", GUI_CraftingFrame )
	GUI_CloseMenu:SetPos( CH_Mining.ScrW * 0.582, CH_Mining.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( 24, 24 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.Red or color_white )
		surface.SetMaterial( CH_Mining.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mining.ScrW * 0.0125, CH_Mining.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_CraftingFrame:Remove()
	end
	
	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_CraftingFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuDashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Dashboard" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_CraftingFrame:Remove()
		
		CH_Mining.DashboardMenu()
	end

	local GUI_InventoryFrameBtn = vgui.Create( "DButton", GUI_CraftingFrame )
	GUI_InventoryFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_InventoryFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.095 )
	GUI_InventoryFrameBtn:SetText( "" )
	GUI_InventoryFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuInventory )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Inventory" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_InventoryFrameBtn.DoClick = function()
		GUI_CraftingFrame:Remove()
		
		CH_Mining.InventoryMenu()
	end
	
	local GUI_SkillsFrameBtn = vgui.Create( "DButton", GUI_CraftingFrame )
	GUI_SkillsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_SkillsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.1425 )
	GUI_SkillsFrameBtn:SetText( "" )
	GUI_SkillsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuSkills )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Skills" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_SkillsFrameBtn.DoClick = function()
		GUI_CraftingFrame:Remove()
		
		CH_Mining.SkillsMenu()
	end

	local GUI_CraftingFrameBtn = vgui.Create( "DButton", GUI_CraftingFrame )
	GUI_CraftingFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_CraftingFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.19 )
	GUI_CraftingFrameBtn:SetText( "" )
	GUI_CraftingFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )
		
		surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
			
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuCrafting )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Crafting" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CraftingFrameBtn.DoClick = function()
		GUI_CraftingFrame:Remove()
		
		CH_Mining.CraftingMenu()
	end
	
	local GUI_TransactionsFrameBtn = vgui.Create( "DButton", GUI_CraftingFrame )
	GUI_TransactionsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_TransactionsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.2375 )
	GUI_TransactionsFrameBtn:SetText( "" )
	GUI_TransactionsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )
	
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuTransactions )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Transactions" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TransactionsFrameBtn.DoClick = function()
		GUI_CraftingFrame:Remove()
		
		CH_Mining.TransactionsMenu()
	end
	
	local GUI_LeaderboardsFrameBtn = vgui.Create( "DButton", GUI_CraftingFrame )
	GUI_LeaderboardsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_LeaderboardsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.285 )
	GUI_LeaderboardsFrameBtn:SetText( "" )
	GUI_LeaderboardsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuLeaderboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Leaderboards" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LeaderboardsFrameBtn.DoClick = function()
		GUI_CraftingFrame:Remove()
		
		CH_Mining.LeaderboardsMenu( "MineralsMined" )
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_CraftingFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.3325 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuStats )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Statistics" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_CraftingFrame:Remove()
		
		CH_Mining.StatsMenu()
	end
	
	local GUI_OptionsFrameBtn = vgui.Create( "DButton", GUI_CraftingFrame )
	GUI_OptionsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_OptionsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.38 )
	GUI_OptionsFrameBtn:SetText( "" )
	GUI_OptionsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuOptions )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Options" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OptionsFrameBtn.DoClick = function()
		GUI_CraftingFrame:Remove()
		
		CH_Mining.OptionsMenu()
	end
	
	local GUI_CraftingItemsList = vgui.Create( "DPanelList", GUI_CraftingFrame )
	GUI_CraftingItemsList:SetSize( CH_Mining.ScrW * 0.245, CH_Mining.ScrH * 0.585 )
	GUI_CraftingItemsList:SetPos( CH_Mining.ScrW * 0.109, CH_Mining.ScrH * 0.095 )
	GUI_CraftingItemsList:EnableVerticalScrollbar( true )
	GUI_CraftingItemsList:EnableHorizontal( true )
	GUI_CraftingItemsList:SetSpacing( 8.5 )
	GUI_CraftingItemsList.Paint = function( self, w, h )
		draw.RoundedBox( 0, 0, 0, w, h, color_transparent )
	end
	if GUI_CraftingItemsList.VBar then
		GUI_CraftingItemsList.VBar.Paint = function( self, w, h ) -- BG
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_CraftingItemsList.VBar.btnUp.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_CraftingItemsList.VBar.btnGrip.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_CraftingItemsList.VBar.btnDown.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
	end
	
	for key, craft in SortedPairsByMemberValue( CH_Mining.Crafting, CH_Mining.Config.SortCraftingBy, CH_Mining.Config.SortCraftingDescending ) do
		-- Cache some variables that doesn't have to be in the Paint hook
		local craft_total_minerals = 0
		for stone, amount in pairs( craft.MineralsCost ) do
			craft_total_minerals = craft_total_minerals + amount
		end
		
		-- Check custom check
		local can_craft_customcheck = craft.CustomCheck( ply )
		local customcheck_failmsg = ""
		
		-- Panel per skill
		local GUI_SkillsPanel = vgui.Create( "DPanelList" )
		GUI_SkillsPanel:SetSize( CH_Mining.ScrW * 0.235, CH_Mining.ScrH * 0.04 )
		GUI_SkillsPanel.Paint = function( self, w, h )
			-- Background
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			-- Name
			local name = craft.Name
			if string.len( name ) > 18 then
				name = string.Left( name, 18 ) ..".."
			end
			draw.SimpleText( name, "CH_Mining_Font_Size8", w * 0.025, h * 0.475, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			
			-- Required level
			draw.SimpleText( CH_Mining.LangString( "Level" ) .." ".. craft.RequiredLevel, "CH_Mining_Font_Size8", w * 0.395, h * 0.475, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			
			-- Required level
			draw.SimpleText( craft_total_minerals .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size8", w * 0.65, h * 0.475, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		end
		
		-- Inspect button
		local GUI_InspectItemBtn = vgui.Create( "DButton", GUI_SkillsPanel )
		GUI_InspectItemBtn:SetSize( CH_Mining.ScrW * 0.0167, CH_Mining.ScrH * 0.02965 )
		GUI_InspectItemBtn:SetPos( CH_Mining.ScrW * 0.215, CH_Mining.ScrH * 0.005 )
		GUI_InspectItemBtn:SetText( "" )
		GUI_InspectItemBtn.Paint = function( self, w, h )
			if self:IsHovered() then
				surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			else
				surface.SetDrawColor( color_white )
			end
			surface.SetMaterial( CH_Mining.Materials.CraftingInspect )
			surface.DrawTexturedRect( 0, 0, w, h )
		end
		GUI_InspectItemBtn.DoClick = function()
			-- Set our selected item
			selected_item_key = key
			selected_item = craft
			
			-- Turn it into a temp sequence table for the purpose of the craft display in a more optimized loop and positioning
			temp_seq_table = {}
			for k, v in pairs( selected_item.MineralsCost ) do
				table.insert( temp_seq_table, { k, v } )
			end
			
			-- Reset if they can craft it
			can_craft_item = true
			
			-- Set all elements visible
			GUI_CraftingFrame.GUI_CraftItemBtn:SetVisible( true )
			GUI_CraftingFrame.SpawnI:SetVisible( true )
			GUI_CraftingFrame.SpawnI:SetModel( selected_item.Model )
			
			-- Reset craft
			craft_time = 0
			is_crafting = false
			
			no_craft_reason = ""
		end
		
		GUI_CraftingItemsList:AddItem( GUI_SkillsPanel )
	end
	
	local GUI_CraftItemPanel = vgui.Create( "DPanel", GUI_CraftingFrame )
	GUI_CraftItemPanel:SetSize( CH_Mining.ScrW * 0.2425, CH_Mining.ScrH * 0.585 )
	GUI_CraftItemPanel:SetPos( CH_Mining.ScrW * 0.354, CH_Mining.ScrH * 0.095 )
	GUI_CraftItemPanel.Paint = function( self, w, h )
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )
		
		if not selected_item then
			draw.SimpleText( CH_Mining.LangString( "Select an item to craft" ), "CH_Mining_Font_Size12", w / 2, h * 0.035, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		else
			draw.SimpleText( selected_item.Name, "CH_Mining_Font_Size14", w / 2, h * 0.035, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			local wrapped_desc = CH_Mining.textWrap( selected_item.Description, "CH_Mining_Font_Size8", w )
			draw.DrawText( wrapped_desc, "CH_Mining_Font_Size8", w / 2, h * 0.07, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER)
			
			draw.SimpleText( CH_Mining.LangString( "Required Minerals" ), "CH_Mining_Font_Size14", w / 2, h * 0.42, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

			for k, v in ipairs( temp_seq_table ) do
				if ply:CH_Mining_HasMineral( v[1], v[2] ) then
					draw.SimpleText( CH_Mining.LangString( v[1] ) .." x ".. v[2], "CH_Mining_Font_Size9", w / 2, h * 0.43 + ( k * 28 ), CH_Mining.Rocks[ v[1] ].Color, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
				else
					draw.SimpleText( CH_Mining.LangString( v[1] ) .." x ".. v[2], "CH_Mining_Font_Size9", w / 2, h * 0.43 + ( k * 28 ), CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
					
					can_craft_item = false
					
					no_craft_reason = CH_Mining.LangString( "You are missing minerals to craft this item!" )
				end
			end
			
			-- Show money cost, required level and XP cost
			if selected_item.MoneyCost and selected_item.MoneyCost > 0 then
				if ply_money >= selected_item.MoneyCost then
					draw.SimpleText( CH_Mining.FormatMoney( selected_item.MoneyCost ), "CH_Mining_Font_Size9", w * 0.0175, h * 0.89, CH_Mining.Colors.Green, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
				else
					draw.SimpleText( CH_Mining.FormatMoney( selected_item.MoneyCost ), "CH_Mining_Font_Size9", w * 0.0175, h * 0.89, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					can_craft_item = false
					
					no_craft_reason = CH_Mining.LangString( "You cannot afford to craft this item!" )
				end
			end
			
			if selected_item.RequiredLevel and selected_item.RequiredLevel > 0 then
				if ply_level >= selected_item.RequiredLevel then
					draw.SimpleText( CH_Mining.LangString( "Level" ) .." ".. selected_item.RequiredLevel, "CH_Mining_Font_Size9", w / 2, h * 0.89, CH_Mining.Colors.GMSBlue, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
				else
					draw.SimpleText( CH_Mining.LangString( "Level" ) .." ".. selected_item.RequiredLevel, "CH_Mining_Font_Size9", w / 2, h * 0.89, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
					can_craft_item = false
					
					no_craft_reason = CH_Mining.LangString( "Cannot craft because your level is too low!" )
				end
			end
			
			if selected_item.XPCost and selected_item.XPCost > 0 then
				if ply_xp >= selected_item.XPCost then
					draw.SimpleText( string.Comma( selected_item.XPCost ) .." XP", "CH_Mining_Font_Size9", w * 0.9825, h * 0.89, CH_Mining.Colors.GMSBlue, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
				else
					draw.SimpleText( string.Comma( selected_item.XPCost ) .." XP", "CH_Mining_Font_Size9", w * 0.9825, h * 0.89, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
					can_craft_item = false
					
					no_craft_reason = CH_Mining.LangString( "Cannot craft due to missing XP!" )
				end
			end
			
			if not selected_item.CustomCheck( ply ) then
				can_craft_item = false
				no_craft_reason = selected_item.CustomCheckFailMessage
			end
			
			draw.SimpleText( no_craft_reason, "CH_Mining_Font_Size7", w / 2, h * 0.8475, CH_Mining.Colors.Red, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
	end
	
	-- Display the item model
	GUI_CraftingFrame.SpawnI = vgui.Create( "SpawnIcon", GUI_CraftItemPanel )
	GUI_CraftingFrame.SpawnI:SetSize( 200, 200 ) -- not responsive. SpawnIcons does not look good if not a power of 2, thus using scrw and scrh will make them look crap?
	GUI_CraftingFrame.SpawnI:SetPos( CH_Mining.ScrW * 0.0675, CH_Mining.ScrH * 0.06 )
	GUI_CraftingFrame.SpawnI:SetModel( "models/props_borealis/bluebarrel001.mdl" )
	GUI_CraftingFrame.SpawnI:SetVisible( false )
	GUI_CraftingFrame.SpawnI.PaintOver = function( self )
		EndTooltip( self )
	end
	GUI_CraftingFrame.SpawnI.OnMousePressed = function()
		return
	end
	
	GUI_CraftingFrame.GUI_CraftItemBtn = vgui.Create( "DButton", GUI_CraftItemPanel )
	GUI_CraftingFrame.GUI_CraftItemBtn:SetSize( CH_Mining.ScrW * 0.235, CH_Mining.ScrH * 0.04 )
	GUI_CraftingFrame.GUI_CraftItemBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.538 )
	GUI_CraftingFrame.GUI_CraftItemBtn:SetText( "" )
	GUI_CraftingFrame.GUI_CraftItemBtn.Paint = function( self, w, h )
		if is_crafting then
			-- Finished crafting
			if ( craft_time or 0 ) < CurTime() then
				is_crafting = false
				
				net.Start( "CH_Mining_Net_CraftItem" )
					net.WriteString( selected_item_key )
				net.SendToServer()
				
				GUI_CraftingFrame:Remove()
			end

			local bar_lenght = ( w / 10 ) * ( craft_time - CurTime() )

			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, 0, bar_lenght, h )
			
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, 0, w, 2 )
			surface.DrawRect( 0, h-2, w, 2 )
			surface.DrawRect( w-2, 0, 2, h )
			surface.DrawRect( 0, 0, 2, h )
		elseif can_craft_item and self:IsHovered() then
			surface.SetDrawColor( CH_Mining.Colors.GrayFront )
			surface.DrawRect( 0, 0, w, h )
			
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, 0, w, 2 )
			surface.DrawRect( 0, h-2, w, 2 )
			surface.DrawRect( w-2, 0, 2, h )
			surface.DrawRect( 0, 0, 2, h )
		else
			surface.SetDrawColor( CH_Mining.Colors.GrayFront )
			surface.DrawRect( 0, 0, w, h )
			
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 2, 10 )
			surface.DrawRect( 0, 0, 10, 2 )
			surface.DrawRect( 0, h-10, 2, 10 )
			surface.DrawRect( 0, h-2, 10, 2 )
			surface.DrawRect( w-2, 0, 2, 10 )
			surface.DrawRect( w-10, 0, 10, 2 )
			surface.DrawRect( w-2, h-10, 2, 10 )
			surface.DrawRect( w-10, h-2, 10, 2 )
		end
		
		if is_crafting then
			draw.SimpleText( CH_Mining.LangString( "Crafting" ) .." ".. selected_item.Name, "CH_Mining_Font_Size9", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		elseif can_craft_item then
			draw.SimpleText( CH_Mining.LangString( "Craft" ) .." ".. selected_item.Name, "CH_Mining_Font_Size9", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		else
			draw.SimpleText( CH_Mining.LangString( "Craft" ) .." ".. selected_item.Name, "CH_Mining_Font_Size9", w / 2, h / 2, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
	end
	GUI_CraftingFrame.GUI_CraftItemBtn.DoClick = function()
		if is_crafting then
			return
		end
		
		if not can_craft_item then
			surface.PlaySound( "common/wpn_denyselect.wav" )
			return
		end
		
		craft_time = CurTime() + 10
		is_crafting = true
	end
	GUI_CraftingFrame.GUI_CraftItemBtn:SetVisible( false )
end
--addons/cityworker/lua/autorun/cityworker_config.lua:
return gluapack()()
--addons/sh_keypadcracker/lua/autorun/deployable_keypadcracker_settings.lua:
AddCSLuaFile()

KEYPADCRACKER_SETTINGS = {
	-- Time (in seconds) it takes for the Keypad Cracker to do its job
	HackDuration = 35,
	
	-- Should the cracker trigger the Keypad's Denied action if the cracking fails?
	TriggerDenyOnFail = true,

	-- Chance for the Keypad Cracker to fail (0-1)
	-- 0: never fail
	-- 1: always fail
	FailChance = 0.2,
	
	-- Beeping interval in seconds
	-- Set to an absurdly high number if you don't want the thing to beep.
	BeepDelay = 2,
	
	-- Can the cracker be used once aka should it disappear when it's done hacking?
	DestructOnUse = false,

	-- Can the cracker be removed when a player presses USE on it?
	RemoveOnUse = true,
	
	-- Can the cracker be removed when taking damage?
	-- NOTE: The cracker is removed only when it takes BULLET damage.
	RemoveOnDamaged = true,
	
	-- Should the progress be shown when the cracker is doing its job?
	ShowProgress = true,

	-- Use Steam Workshop insteaad of FastDL for content?
	UseWorkshop = true,
}

if (SERVER) then
	if (KEYPADCRACKER_SETTINGS.UseWorkshop) then
--		resource.AddWorkshop("685913625")
	else
	--	resource.AddSingleFile("materials/entities/weapon_sh_keypadcracker_deploy.png")
	--	resource.AddSingleFile("materials/weapons/weapon_sh_keypadcracker_deploy.vmt")
	--	resource.AddSingleFile("materials/weapons/weapon_sh_keypadcracker_deploy.vtf")
	end
end
--lua/autorun/egm_friendly_npc_kod_rebs.lua:
return gluapack()()
--lua/autorun/egm_hostile_npc_kod_rebs.lua:
local nextName
local EGM_Hostile_NPCs = {}

hook.Add("PlayerSpawnNPC","EGM_Hostile_spawngetname",function(pl,name,wepName) nextName = name end)
 
hook.Add("PlayerSpawnedNPC","EGM_Hostile_spawnupdatemodel",function(pl,npc)
        if(!nextName) then return end
        if(EGM_Hostile_NPCs[nextName]) then
                local min,max = npc:GetCollisionBounds()
                local hull = npc:GetHullType()
                npc:SetModel(EGM_Hostile_NPCs[nextName])
                npc:SetSolid(SOLID_BBOX)
                npc:SetHullType(hull)
                npc:SetHullSizeNormal()
                npc:SetCollisionBounds(min,max)
                npc:DropToFloor()
        end
        nextName = nil
end)
 
local function AddNPC(category,name,class,model,keyvalues,skin,weapons)
        list.Set("NPC",name,{Name = name,Class = class,Skin = skin,Model = model,Category = category,KeyValues = keyvalues,Weapons = weapons})
        EGM_Hostile_NPCs[name] = model
end


AddNPC("Emniyet Genel Mudurlugu NPC","EGM Memur Hostile 1","npc_metropolice","models/npc/hostile/rebs/egm/male_02.mdl",{["manhacks"] = 0},100,{"weapon_stunstick","weapon_pistol"})
AddNPC("Emniyet Genel Mudurlugu NPC","EGM Memur Hostile 2","npc_metropolice","models/npc/hostile/rebs/egm/male_04.mdl",{["manhacks"] = 0},100,{"weapon_stunstick","weapon_pistol"})
AddNPC("Emniyet Genel Mudurlugu NPC","EGM Memur Hostile 3","npc_metropolice","models/npc/hostile/rebs/egm/male_05.mdl",{["manhacks"] = 0},100,{"weapon_stunstick","weapon_pistol"})
AddNPC("Emniyet Genel Mudurlugu NPC","EGM Memur Hostile 4","npc_metropolice","models/npc/hostile/rebs/egm/male_06.mdl",{["manhacks"] = 0},100,{"weapon_stunstick","weapon_pistol"})
AddNPC("Emniyet Genel Mudurlugu NPC","EGM Memur Hostile 5","npc_metropolice","models/npc/hostile/rebs/egm/male_07.mdl",{["manhacks"] = 0},100,{"weapon_stunstick","weapon_pistol"})
AddNPC("Emniyet Genel Mudurlugu NPC","EGM Memur Hostile 6","npc_metropolice","models/npc/hostile/rebs/egm/male_08.mdl",{["manhacks"] = 0},100,{"weapon_stunstick","weapon_pistol"})
AddNPC("Emniyet Genel Mudurlugu NPC","EGM Memur Hostile 7","npc_metropolice","models/npc/hostile/rebs/egm/male_09.mdl",{["manhacks"] = 0},100,{"weapon_stunstick","weapon_pistol"})
--addons/glicence/lua/glicence/config/config.lua:
/*
GLicence Configuration
If you need help make a support ticket at http://www.livaco.tk/
*/


/*
NPC Config
*/

// Model of the NPC
GLicence.Config.Model = "models/odessa.mdl"

// ULX Groups that cannot access the NPC.
GLicence.Config.BlockedGroups = {"noaccess"}

// Cooldown for opening the NPC Menu.
GLicence.Config.Cooldown = 2 // seconds

// Color for the animation of the button.
GLicence.Config.ButtonAnimColor = Color(0, 0, 0, 200)


/*
Chat Config
*/

// Prefix
GLicence.Config.Prefix = "GLicence"

// Color of the prefix.
GLicence.Config.PrefixColor = Color(255, 0, 0)


/*
General Config
*/

// Price of the licence.
GLicence.Config.Cost = 50000

// Whether to check if they already own a gun licence.
GLicence.Config.CheckForLicence = true


/*
bLogs Config
Only worry about this if you own bLogs (https://www.gmodstore.com/market/view/1599)
*/

// Log whenever someone attempts to access the menu without access.
GLicence.Config.LogNoAccess = true

// Log whenever someone attempts to access the menu during a cooldown.
GLicence.Config.LogCooldown = true

// Log whenever someone successsfuly buys a licence.
GLicence.Config.LogSucessfulBuy = true

// Log whenever someone tries to buy a gun licence but already has one.
GLicence.Config.LogAlreadyHas = true

// Log whether someone tries to buy a gun licence but cannot afford it.
GLicence.Config.LogCantAfford = true


// That was simple. Enjoy!

--addons/glicence/lua/glicence/config/lang.lua:
return gluapack()()
--lua/gmodadminsuite/thirdparty/von.lua:
return gluapack()()
--lua/gmodadminsuite/modules/fpsbooster/lang/chinese.lua:
return gluapack()()
--addons/gmodadminsuite-jobwhitelist-1.3.4/lua/gmodadminsuite/modules/jobwhitelist/lang/french.lua:
return gluapack()()
--addons/gmodadminsuite-logging-2.4.8/lua/gmodadminsuite/modules/logging/lang/spanish.lua:
return gluapack()()
--lua/gmodadminsuite/sh_modules.lua:
return gluapack()()
--lua/gmodadminsuite/modules/fpsbooster/_gas_info.lua:
return gluapack()()
--addons/gmodadminsuite-jobwhitelist-1.3.4/lua/gmodadminsuite/modules/jobwhitelist/sh_init.lua:
if (SERVER) then
	AddCSLuaFile("sh_jobwhitelist.lua")
	AddCSLuaFile("sh_permissions.lua")
	AddCSLuaFile("sh_contextmenu.lua")
	AddCSLuaFile("cl_menu.lua")
	AddCSLuaFile("sh_factions.lua")
end

GAS:hook("gmodadminsuite:LoadModule:jobwhitelist", "LoadModule:jobwhitelist", function(module_info)
	if (SERVER) then
		include("autorun/server/gas_jobwhitelist_darkrp_load.lua")
	end
	
	GAS:GMInitialize(function()
		if (not DarkRP) then
			GAS:print("[JobWhitelist] DarkRP is not running, aborting", GAS_PRINT_COLOR_BAD, GAS_PRINT_TYPE_ERROR)
			return
		end

		include("gmodadminsuite/modules/jobwhitelist/sh_jobwhitelist.lua")

		if (SERVER) then
			GAS.XEON:PostLoad(function()
				XEON:Init("6017", "[GAS] Billy's Whitelist", "1.3", "gmodadminsuite/modules/jobwhitelist/sv_drm.lua", include("gmodadminsuite/modules/jobwhitelist/license.lua"))
			end)
		end
	end)
end)
--addons/gmodadminsuite-logging-2.4.8/lua/gmodadminsuite/modules/logging/_gas_info.lua:
return {
	DefaultEnabled = true,
	Name = "Billy's Logs",
	Category = GAS.MODULE_CATEGORY_ADMINISTRATION,
	Wiki = "https://gmodsto.re/blogs-wiki",
	Icon = "icon16/database_lightning.png",
	GmodStore = "6016",
	License = '{"licensee":"76561198314224586","keys":{"xeon-de":"LXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","xeon-us":"LXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"}}'
}
--addons/gprofiler/lua/gprofiler/profilers/auto_profile/cl_autoprofile.lua:
local ProfilerList = {
	"Hooks", "Networking", "Functions", "Commands", "Timers", --[["Entity Variables",]] "Network Variables"
}

local CurrentStates = {}
local DropdownOptions = {
	["Disabled"] = 0,
	["As soon as possible"] = 1,
	["When the gamemode is fully loaded"] = 2,
	["When a player joins the server"] = 3,
}

local Black50 = Color(0, 0, 0, 50)

local MenuColors = GProfiler.MenuColors
function GProfiler.AutoProfileTab(Content)
	local Header = vgui.Create("DPanel", Content)
	Header:SetSize(Content:GetWide() - 10, 150)
	Header:SetPos(5, 10)
	Header.Paint = nil

	local Text = [[
		Here you can configure profilers to start automatically!
		You can choose to have the profiler start as soon as possible (when GProfiler loads), when the gamemode is fully loaded, or when a player joins the server.

		Currently, this is limited to the Server Realm.
	]]

	local TextLabel = vgui.Create("DLabel", Header)
	TextLabel:SetFont("GProfiler.Menu.TabText")
	TextLabel:SetText(Text)
	TextLabel:SetWrap(true)
	TextLabel:SetAutoStretchVertical(true)
	TextLabel:SizeToContents()
	TextLabel:SetWide(Header:GetWide() - 20)
	TextLabel:SetPos(10, 10)
	TextLabel:SetTextColor(MenuColors.White)

	local TabContent = vgui.Create("DPanel", Content)
	TabContent:SetSize(Content:GetWide() - 10, Content:GetTall() - Header:GetTall() - 25)
	TabContent:SetPos(5, Header:GetTall() + 20)
	TabContent.Paint = nil

	local Profilers = vgui.Create("DPanelList", TabContent)
	Profilers:SetSize(TabContent:GetWide(), TabContent:GetTall())
	Profilers:EnableVerticalScrollbar(true)
	Profilers:EnableHorizontal(false)
	Profilers:SetSpacing(5)
	Profilers:SetPadding(5)

	for k, v in ipairs(ProfilerList) do
		local Profiler = vgui.Create("DPanel", Profilers)
		Profiler:SetSize(Profilers:GetWide(), 70)
		Profiler.Paint = function(s, w, h)
			draw.RoundedBox(4, 2, 2, w - 4, h - 4, MenuColors.DListRowBackground)
			draw.RoundedBox(4, 4, 4, w - 8, h - 8, Black50)

			draw.SimpleText(v, "GProfiler.Menu.Title", 10, h / 2, MenuColors.White, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
		end

		surface.SetFont("GProfiler.Menu.RealmSelector")
		local textWidth, textHeight = surface.GetTextSize("When the gamemode is fully loaded")

		local Dropdown = vgui.Create("DComboBox", Profiler)
		Dropdown:SetSize(textWidth + 20, 30)
		Dropdown:SetPos(Profiler:GetWide() - Dropdown:GetWide() - 40, Profiler:GetTall() / 2 - Dropdown:GetTall() / 2)
		Dropdown:SetValue(CurrentStates[v] or "Disabled")
		Dropdown:SetTextColor(MenuColors.White)
		Dropdown:SetFont("GProfiler.Menu.RealmSelector")
		Dropdown:SetTall(30)
		Dropdown:SetWide(Dropdown:GetWide() + 10)
		Dropdown:SetSortItems(false)
		Dropdown.OnSelect = function(s, index, value, data)
			net.Start("GProfiler.AutoProfile.Configure")
			net.WriteString(v)
			net.WriteUInt(DropdownOptions[value], 2)
			net.SendToServer()

			CurrentStates[v] = value
		end

		for option, index in SortedPairsByValue(DropdownOptions) do
			Dropdown:AddChoice(option, index)
		end

		GProfiler.StyleDropdown(Dropdown)

		Profilers:AddItem(Profiler)
	end
end

GProfiler.Menu.RegisterTab("Auto Profile", "icon16/map_go.png", 999, GProfiler.AutoProfileTab)

net.Receive("GProfiler.AutoProfile.SendState", function()
	for i = 1, net.ReadUInt(4) do
		local profiler = net.ReadString()
		local state = net.ReadUInt(2)

		CurrentStates[profiler] = table.KeyFromValue(DropdownOptions, state)
	end
end)
--addons/gprofiler/lua/gprofiler/profilers/concommands/cl_concommands.lua:
GProfiler.ConCommands = GProfiler.ConCommands or {}
GProfiler.ConCommands.ProfileActive = GProfiler.ConCommands.ProfileActive or false
GProfiler.ConCommands.StartTime = GProfiler.ConCommands.StartTime or 0
GProfiler.ConCommands.EndTime = GProfiler.ConCommands.EndTime or 0
GProfiler.ConCommands.ProfileActive = GProfiler.ConCommands.ProfileActive or false
GProfiler.ConCommands.Realm = GProfiler.ConCommands.Realm or "Client"

local TabPadding = 10
local MenuColors = GProfiler.MenuColors

local function GetCommandList(realm, callback)
	if realm == "Client" then
		local commands = concommand.GetTable()
		local commandList = {}

		for k, v in pairs(commands) do
			local source, lineStart, lineEnd = GProfiler.ConCommands.GetFunction(k, commands)
			commandList[k] = {Source = source, Lines = {lineStart, lineEnd}}
		end

		callback(commandList)
	elseif realm == "Server" then
		net.Start("GProfiler_ConCommands_CommandList")
		net.SendToServer()

		net.Receive("GProfiler_ConCommands_CommandList", function()
			local commandList = {}
			for i = 1, net.ReadUInt(32) do
				local command = net.ReadString()
				local source = net.ReadString()
				local lineStart = net.ReadUInt(16)
				local lineEnd = net.ReadUInt(16)
				commandList[command] = {Source = source, Lines = {lineStart, lineEnd}}
			end

			callback(commandList)
		end)
	end
end

function GProfiler.ConCommands.DoTab(Content)
	local Header = vgui.Create("DPanel", Content)
	Header:SetSize(Content:GetWide(), 40)
	Header:SetPos(0, 10)
	Header.Paint = nil

	local RealmSelector = GProfiler.Menu.CreateRealmSelector(Header, "ConCommands", Header:GetWide() - 110 - TabPadding, Header:GetTall() / 2 - 30 / 2, function(s, _, value)
		GProfiler.ConCommands.Realm = value
		GProfiler.Menu.OpenTab("Commands", GProfiler.ConCommands.DoTab)
	end)
	RealmSelector:SetPos(Header:GetWide() - RealmSelector:GetWide() - TabPadding, Header:GetTall() / 2 - RealmSelector:GetTall() / 2)

	local StartButton = vgui.Create("DButton", Header)
	StartButton:SetText(GProfiler.ConCommands.ProfileActive and GProfiler.Language.GetPhrase("profiler_stop") or GProfiler.Language.GetPhrase("profiler_start"))
	StartButton:SetTextColor(MenuColors.White)
	StartButton:SetFont("GProfiler.Menu.StartButton")
	StartButton:SizeToContents()
	StartButton:SetTall(RealmSelector:GetTall())
	StartButton:SetPos(Header:GetWide() - StartButton:GetWide() - RealmSelector:GetWide() - TabPadding * 2, Header:GetTall() / 2 - StartButton:GetTall() / 2)
	StartButton.Paint = function(s, w, h)
		draw.RoundedBox(4, 0, 0, w, h, MenuColors.ButtonOutline)
		draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonBackground)

		if s:IsHovered() then
			draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonHover)
		end
	end

	StartButton.DoClick = function()
		if GProfiler.ConCommands.ProfileActive then
			GProfiler.ConCommands.EndTime = SysTime()
			if GProfiler.ConCommands.Realm == "Server" then
				net.Start("GProfiler_ConCommands_ToggleServerProfile")
				net.WriteBool(false)
				net.SendToServer()
			else
				GProfiler.ConCommands:RestoreCommands()
				GProfiler.ConCommands.ProfileActive = false
				GProfiler.Menu.OpenTab("Commands", GProfiler.ConCommands.DoTab)
			end
		else
			GProfiler.ConCommands.StartTime = SysTime()
			GProfiler.ConCommands.EndTime = 0
			if GProfiler.ConCommands.Realm == "Server" then
				net.Start("GProfiler_ConCommands_ToggleServerProfile")
				net.WriteBool(true)
				net.SendToServer()
			else
				GProfiler.ConCommands:StartProfiler()
				GProfiler.ConCommands.ProfileActive = true
				StartButton:SetText(GProfiler.Language.GetPhrase("profiler_stop"))
			end
		end
	end

	local TimeRunning = vgui.Create("DLabel", Header)
	TimeRunning:SetFont("GProfiler.Menu.SectionHeader")
	TimeRunning:SetText(GProfiler.TimeRunning(GProfiler.ConCommands.StartTime, GProfiler.ConCommands.EndTime, GProfiler.ConCommands.ProfileActive) .. "s")
	TimeRunning:SizeToContents()
	TimeRunning:SetPos(Header:GetWide() - TimeRunning:GetWide() - RealmSelector:GetWide() - StartButton:GetWide() - TabPadding * 3, Header:GetTall() / 2 - TimeRunning:GetTall() / 2)
	TimeRunning:SetTextColor(MenuColors.White)
	function TimeRunning:Think()
		if GProfiler.ConCommands.ProfileActive then
			self:SetText(GProfiler.TimeRunning(GProfiler.ConCommands.StartTime, 0, GProfiler.ConCommands.ProfileActive) .. "s")
			self:SizeToContents()
			self:SetPos(Header:GetWide() - self:GetWide() - StartButton:GetWide() - RealmSelector:GetWide() - TabPadding * 3, Header:GetTall() / 2 - self:GetTall() / 2)
		end
	end

	local SectionHeader = vgui.Create("DPanel", Content)
	SectionHeader:SetSize(Content:GetWide(), 40)
	SectionHeader:SetPos(0, Header:GetTall())
	SectionHeader.Paint = nil

	local leftFraction = .7
	local rightFraction = .3

	local LeftHeader, LeftHeaderText = GProfiler.Menu.CreateHeader(SectionHeader, GProfiler.Language.GetPhrase("profiler_results"), 0, 0, SectionHeader:GetWide() * leftFraction - 5, SectionHeader:GetTall())
	local RightHeader, RightHeaderText = GProfiler.Menu.CreateHeader(SectionHeader, GProfiler.Language.GetPhrase("command_function"), LeftHeader:GetWide() + 10, 0, SectionHeader:GetWide() * rightFraction - 5, LeftHeader:GetTall())

	local LeftContent = vgui.Create("DPanel", Content)
	LeftContent:SetSize(LeftHeader:GetWide(), Content:GetTall() - SectionHeader:GetTall() - Header:GetTall())
	LeftContent:SetPos(0, SectionHeader:GetTall() + Header:GetTall())
	LeftContent.Paint = nil

	local RightContent = vgui.Create("DPanel", Content)
	RightContent:SetSize(RightHeader:GetWide(), Content:GetTall() - SectionHeader:GetTall() - Header:GetTall())
	RightContent:SetPos(LeftContent:GetWide() + 10, SectionHeader:GetTall() + Header:GetTall())
	RightContent.Paint = nil

	local FunctionDetailsBackground = vgui.Create("DPanel", RightContent)
	FunctionDetailsBackground:SetSize(RightContent:GetWide() - TabPadding * 2, RightContent:GetTall() - TabPadding * 2)
	FunctionDetailsBackground:SetPos(TabPadding, TabPadding)
	FunctionDetailsBackground.Paint = function(s, w, h) draw.RoundedBox(4, 0, 0, w, h, MenuColors.CodeBackground) end

	local FunctionDetails = vgui.Create("DTextEntry", FunctionDetailsBackground)
	FunctionDetails:Dock(FILL)
	FunctionDetails:SetMultiline(true)
	FunctionDetails:SetKeyboardInputEnabled(false)
	FunctionDetails:SetVerticalScrollbarEnabled(true)
	FunctionDetails:SetDrawBackground(false)
	FunctionDetails:SetTextColor(MenuColors.White)
	FunctionDetails:SetFont("GProfiler.Menu.FunctionDetails")
	FunctionDetails:SetText(GProfiler.Language.GetPhrase("command_select"))

	local ProfilerResults = vgui.Create("DListView", LeftContent)
	ProfilerResults:SetSize(LeftContent:GetWide() - TabPadding * 2, (LeftContent:GetTall() - TabPadding * 2) / 2)
	ProfilerResults:SetPos(TabPadding, TabPadding)
	ProfilerResults:SetMultiSelect(false)
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("command"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("file"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("times_run"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("total_time"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("average_time"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("longest_time"))

	local Wide = ProfilerResults:GetWide()
	ProfilerResults.Columns[1]:SetWidth(Wide * .20)
	ProfilerResults.Columns[2]:SetWidth(Wide * .24)
	ProfilerResults.Columns[3]:SetWidth(Wide * .14)
	ProfilerResults.Columns[4]:SetWidth(Wide * .16)
	ProfilerResults.Columns[5]:SetWidth(Wide * .16)
	ProfilerResults.Columns[6]:SetWidth(Wide * .16)

	for k, v in pairs(GProfiler.ConCommands.ProfileData or {}) do
		local Line = ProfilerResults:AddLine(k, v.Source, v.Count, v.Time, v.AverageTime, v.LongestTime)
		Line.OnMousePressed = function(s, l)
			if l == 108 then
				local menu = DermaMenu()
				menu:AddOption(GProfiler.CopyLang("command"), function() SetClipboardText(k) end):SetIcon("icon16/page_copy.png")
				menu:AddOption(GProfiler.CopyLang("file"), function() SetClipboardText(v.Function) end):SetIcon("icon16/page_copy.png")
				menu:AddOption(GProfiler.CopyLang("times_run"), function() SetClipboardText(v.Count) end):SetIcon("icon16/page_copy.png")
				menu:AddOption(GProfiler.CopyLang("total_time"), function() SetClipboardText(v.Time) end):SetIcon("icon16/page_copy.png")
				menu:AddOption(GProfiler.CopyLang("average_time"), function() SetClipboardText(v.AverageTime) end):SetIcon("icon16/page_copy.png")
				menu:AddOption(GProfiler.CopyLang("longest_time"), function() SetClipboardText(v.LongestTime) end):SetIcon("icon16/page_copy.png")
				menu:Open()
			end

			for k, v in pairs(ProfilerResults.Lines) do v:SetSelected(false) end
			Line:SetSelected(true)

			FunctionDetails:SetText(GProfiler.Language.GetPhrase("requesting_source"))
			GProfiler.RequestFunctionSource(v.Source, tonumber(v.Lines[1]), tonumber(v.Lines[2]), function(source)
				if not IsValid(FunctionDetails) then return end
				FunctionDetails:SetText(table.concat(source, "\n"))
			end)
		end
	end

	local CommandList = vgui.Create("DListView", LeftContent)
	CommandList:SetSize(LeftContent:GetWide() - TabPadding * 2, (LeftContent:GetTall() - TabPadding * 2) / 2 - 10)
	CommandList:SetPos(TabPadding, TabPadding + ProfilerResults:GetTall() + TabPadding)
	CommandList:SetMultiSelect(false)
	CommandList:AddColumn(GProfiler.Language.GetPhrase("command"))
	CommandList:AddColumn(GProfiler.Language.GetPhrase("file"))

	GetCommandList(GProfiler.ConCommands.Realm, function(list)
		if not IsValid(CommandList) then return end
		CommandList:Clear()

		for k, v in pairs(list) do
			local Line = CommandList:AddLine(k, v.Source)
			Line.OnMousePressed = function(s, l)
				if l == 108 then
					local menu = DermaMenu()
					menu:AddOption(GProfiler.CopyLang("command"), function() SetClipboardText(k) end):SetIcon("icon16/page_copy.png")
					menu:AddOption(GProfiler.CopyLang("file"), function() SetClipboardText(v.Source) end):SetIcon("icon16/page_copy.png")
					menu:Open()
				end

				for k, v in pairs(CommandList.Lines) do v:SetSelected(false) end
				Line:SetSelected(true)

				FunctionDetails:SetText(GProfiler.Language.GetPhrase("requesting_source"))
				GProfiler.RequestFunctionSource(v.Source, tonumber(v.Lines[1]), tonumber(v.Lines[2]), function(source)
					if not IsValid(FunctionDetails) then return end
					FunctionDetails:SetText(table.concat(source, "\n"))
				end)
			end
		end

		GProfiler.StyleDListView(CommandList)
	end)

	GProfiler.StyleDListView(ProfilerResults)
	GProfiler.StyleDListView(CommandList)
end

GProfiler.Menu.RegisterTab("Commands", "icon16/application_xp_terminal.png", 4, GProfiler.ConCommands.DoTab, function()
	if GProfiler.ConCommands.ProfileActive then
		return "", MenuColors.ActiveProfile
	end
end)

net.Receive("GProfiler_ConCommands_ServerProfileStatus", function()
	local status = net.ReadBool()
	local ply = net.ReadEntity()
	GProfiler.ConCommands.ProfileActive = status

	if ply == LocalPlayer() then
		GProfiler.Menu.OpenTab("Commands", GProfiler.ConCommands.DoTab)
	end
end)

net.Receive("GProfiler_ConCommands_SendData", function()
	local data = {}
	for i = 1, net.ReadUInt(32) do
		local cmd = net.ReadString()
		data[cmd] = {
			Count = net.ReadUInt(32),
			Time = net.ReadFloat(),
			AverageTime = net.ReadFloat(),
			LongestTime = net.ReadFloat(),
			Source = net.ReadString(),
			Lines = {net.ReadUInt(16), net.ReadUInt(16)}
		}
	end

	GProfiler.ConCommands.ProfileData = data
	GProfiler.Menu.OpenTab("Commands", GProfiler.ConCommands.DoTab)
end)
--addons/gprofiler/lua/gprofiler/profilers/hooks/cl_hooks.lua:
return gluapack()()
--lua/autorun/hdtommy_player.lua:
player_manager.AddValidModel( "HD Tommy Vercetti", 					"models/winningrook/gtavc/hdtommy.mdl" )

list.Set( "PlayerOptionsModel",  "HD Tommy Vercetti", 					"models/winningrook/gtavc/hdtommy.mdl" )
--addons/status_do/lua/autorun/holochat.lua:
--[[

		 HoloChat
	Programmed by Pikod

]]--

PI_HOLO = {}
local system = PI_HOLO -- Creation of shortcut

local notification = notification
local FrameTime = FrameTime
local IsValid = IsValid
local CurTime = CurTime
local surface = surface
local CLIENT = CLIENT
local SERVER = SERVER
local string = string
local Vector = Vector
local Angle = Angle
local Color = Color
local table = table
local pairs = pairs
local hook = hook
local draw = draw
local Lerp = Lerp
local MsgC = MsgC
local cam = cam
local net = net

-- Log functions
local log_side_color = Color(64, 203, 245)

if CLIENT then 

	log_side_color = Color(252, 223, 3)

end

function system:Info(msg)

	MsgC( Color( 78, 230, 93 ), "HoloChat (Info) > ", log_side_color, msg.."\n" )

end

function system:Warn(msg)

	MsgC( Color( 227, 45, 61 ), "HoloChat (Warn) > ", log_side_color, msg.."\n" )

end

function system:Error(msg)

	error("HoloChat Error -> "..msg, 1)

end

-- Configuration functions
function system:AddModule(command, module)

	-- Check required params
	if not command then self:Error("Undefined module command name", 1) end
	if string.len(command) > 32 then self:Error("Very long command name (max 32).") end
	if string.len(command) < 1 then self:Error("Empty command name") end
	if not module then self:Error("Undefined module table") end

	command = command:lower()

	-- Optional params
	module.DisplayLength = (module.DisplayLength or 5) -- seconds
	module.IsConstant = (module.IsConstant or false)
	module.ConstantLimit = (module.ConstantLimit or 0)
	
	-- Display settings
	module.Display = (module.Display or {})
	module.Display.Font = (module.Display.Font or "default")
	module.Display.BackgroundPaddingWidth = (module.Display.BackgroundPaddingWidth or 256)
	module.Display.BackgroundPaddingHeight = (module.Display.BackgroundPaddingHeight or 64)
	module.Display.BackgroundColor = (module.Display.BackgroundColor or Color(0, 0, 0, 200))
	module.Display.TextColor = (module.Display.TextColor or Color(255, 255, 255))
	module.Display.TextFormat = (module.Display.TextFormat or "%1%")

	module.TimeForAnimation = {}
	module.TimeForAnimation["fadeIn"] = module.DisplayLength / 12 -- x/12 for fade in
	module.TimeForAnimation["fadeOut"] = module.DisplayLength / 6 -- 1/6 for fade out
	module.TimeForAnimation["slideOut"] = module.DisplayLength / 8 -- x/8 for slide

	-- Insertion
	self.modules[command] = module

end

-- Properties, settings etc.
function system:SetProperty(key, value)
	
	self.properties[key] = value

end

-- Translate language
function system:SetWord(key, value)

	self.language[key] = value
	
end

function system:CreateFont(name, family)

	if SERVER then return end

	surface.CreateFont("pi_holo:"..name, {
		font = family,
		extended = true,
		size = 256
	})

end

function system:ClearConfig()

	-- Default modules
	self.modules = {}
	-- self:AddModule("me", {})

	-- Default properties
	self.properties = {}
	self:SetProperty("prefix", "/")
	self:SetProperty("cooldown", 0.5) -- you probably won't feel the cooldown but it's enough for spammers.

	-- Default language
	self.language = {}
	self:SetWord("cooldown_error", "You cannot use it again for %1% seconds.")
	self:SetWord("parameter_error", "You have to write your message after command.")

	-- Default font
	self:CreateFont("default", "Arial")

end

system:ClearConfig() -- Load default properties


-- Server side
if SERVER then

	-- Variables
	system.cooldowns = {}

	-- Includes
	AddCSLuaFile("holo_config.lua")
	include("holo_config.lua")

	-- Network string
	util.AddNetworkString("pi_holo:holo_message_broadcast")
	util.AddNetworkString("pi_holo:holo_constant_disable")
	util.AddNetworkString("pi_holo:notification")

	-- Functions
	function system:SendNotify(ply, type, message, length)
		
		length = (length or 3)
		
		net.Start("pi_holo:notification")
			net.WriteInt(type, 4)
			net.WriteString(message)
			net.WriteInt(length, 5)
		net.Send(ply)

	end

	function system.split(inputstr, sep)
	   
	   if sep == nil then
	      sep = "%s"
	   end
	   local t={}
	   
	   for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
	      table.insert(t, str)
	   end

	   return t

	end

	local function onCommand(ply, text, teamchat)

		if teamchat then return end
	
		local text = text:lower() -- for no case sensivity
		
		for key, value in pairs(system.modules) do
			
			local commandString = system.properties["prefix"]..key
			local splited = system.split(string.lower(text), " ")
			if splited[1] ~= commandString:lower() then continue end -- continue to loop if command not matches

			-- Command matches
			if system.cooldowns[ply] and system.cooldowns[ply] > CurTime() then -- check is player in cooldown
			
				system:SendNotify(ply, 1, string.Replace(system.language["cooldown_error"], "%1%", math.floor(system.cooldowns[ply] - CurTime()) + 1), 3)
				return ""
			
			end

			system.cooldowns[ply] = CurTime() + system.properties["cooldown"] -- set cooldown
			
			local cmdStartLength = string.len(commandString)+1

			if not value.IsConstant then

				if string.len(text) <= cmdStartLength then
					
					system:SendNotify(ply, 1, system.language["parameter_error"], 3)
					return ""

				end
				local message = string.sub(text, cmdStartLength) 
				net.Start("pi_holo:holo_message_broadcast")
					net.WriteString(key)
					net.WriteEntity(ply) -- who use command
					net.WriteString(message) -- message
				net.Broadcast()


			else

				if string.len(text) <= cmdStartLength then

					net.Start("pi_holo:holo_constant_disable")
						net.WriteString(key)
						net.WriteEntity(ply) -- who use command
					net.Broadcast()

				else

					local message = string.sub(text, cmdStartLength) 
					if key == "do" or key == "me" then 
						local messages = message
						local ents = player.GetHumans()
						local col = key == "me" and Color(17,179,224) or key == "do" and Color(111,23,23)
						local filter = {}
					
						local plyPos = ply:EyePos()
						local sizeSqr = 500
					
						for _, v in ipairs(ents) do
							if (v:EyePos():DistToSqr(plyPos) <= sizeSqr) and (v == ply or hook.Run("PlayerCanSeePlayersChat", ply:Nick() .. ": " .. messages, false, v, ply) ~= false) then
								table.insert(filter, v)
							end
						end
						net.Start("DarkRP_Chat")
							net.WriteUInt(col.r, 8)
							net.WriteUInt(col.g, 8)
							net.WriteUInt(col.b, 8)
							net.WriteString("")
							net.WriteEntity(ply)
							net.WriteUInt(255, 8)
							net.WriteUInt(255, 8)
							net.WriteUInt(255, 8)
							net.WriteString(messages)
						net.Send(filter)
					end
					net.Start("pi_holo:holo_message_broadcast")
						net.WriteString(key)
						net.WriteEntity(ply) -- who use command
						net.WriteString(message) -- message
					net.Broadcast()

				end

			end

			return "" -- remove chat message

		end

	end

	-- Hooks
	hook.Add("PlayerSay", "pi_holo:commands", onCommand)
end

-- Client side
if CLIENT then

	include("holo_config.lua")
	system.holoList = {}
	system.fonts = {}

	-- Functions
	net.Receive("pi_holo:notification", function()

		local type = net.ReadInt(4)
		local message = net.ReadString()
		local length = net.ReadInt(5)
		notification.AddLegacy(message, type, length)

	end)

	net.Receive("pi_holo:holo_message_broadcast", function()

		local command = net.ReadString()
		local entity = net.ReadEntity()
		local message = net.ReadString()
		if not IsValid(entity) then return end
		if entity:GetPos():DistToSqr(LocalPlayer():GetPos()) < 350000 then 
			local renk = command == "me" and Color(168,22,22) or command == "do" and Color(57,161,26)
			chat.AddText(renk, "("..string.upper(command)..") "..entity:Nick()..":"..message)
		end 
		local module = system.modules[command]
		local messageTable = {
			["Appear"] = CurTime(),
			["Disappear"] = (CurTime() + module.DisplayLength),
			["TimeForAnimation"] = module.TimeForAnimation,
			["Display"] = module.Display,
			["DisplayLength"] = module.DisplayLength,
			["IsConstant"] = module.IsConstant,
			["Message"] = message,
			["Command"] = command
		}
		
		-- init entity table if doesn't exists
		system.holoList[entity] = (system.holoList[entity] or {})

		-- This block prevents constant modules to display infinite messages.
		if module.IsConstant then
			
			-- If the "constant message" limit has been exceeded
			-- The "oldest message" will be changed with the new message.
			
			-- This "for block" finds "how many constant message there is" and the "oldest message".
			local constantMessages, oldestMessage = 0, nil
			for k, v in ipairs( system.holoList[entity] ) do
				
				if v.Command ~= command then return end
				
				-- find oldest message
				if not oldestMessage or v.Appear < oldestMessage[2].Appear then
					-- The value is needed for this block and the key is needed for the change operation below.
					oldestMessage = {k, v}
				end

				-- constant message counter
				constantMessages = constantMessages + 1 

			end

			-- if the limit is exceeded
			if constantMessages >= module.ConstantLimit then
				system.holoList[entity][oldestMessage[1]] = messageTable
				return
			end

		end

		-- message is not constant or limit is not exceeded
		system.holoList[entity] = (system.holoList[entity] or {})
		table.insert(system.holoList[entity], messageTable)

	end)

	net.Receive("pi_holo:holo_constant_disable", function()

		local command = net.ReadString()
		local entity = net.ReadEntity()
		if not IsValid(entity) then return end

		for k,v in pairs(system.holoList) do

			if not (k == entity) then continue end

			for k1,v1 in pairs(v) do

				if v1.Command == command then

					v1.IsConstant = false

					if v1.TimeForAnimation["fadeOut"] > v1.TimeForAnimation["slideOut"] then
						v1.Disappear = CurTime() + v1.TimeForAnimation["fadeOut"]
					else 
						v1.Disappear = CurTime() + v1.TimeForAnimation["slideOut"] 
					end

					return

				end

			end

		end

	end)

	-- Holographic pm offset
	local offset = Vector(0, 0, 75)

	-- Draw function
	local function DrawHolo()

		local ang = LocalPlayer():EyeAngles()

		ang:RotateAroundAxis( ang:Forward(), 90 )
		ang:RotateAroundAxis( ang:Right(), 90 )

		local removes = {} -- remove list
		
		for k, v in pairs(system.holoList) do -- loop entities
			
			if not IsValid(k) or not v then
				continue
			end
			
			-- sorting messages by correct queue
			local sortedList = {}
			for i = #v, 1, -1 do 
				table.insert(sortedList, v[i])
			end


			-- loop offset variables
			local messageOffset = 0

			-- loop entries
			for key, value in ipairs(sortedList) do 

				-- animation calculation variables
				local timeLeft = value.Disappear - CurTime()
				local timePassed = (value.DisplayLength - timeLeft)
				local leftTimeForAnimationFadeIn = (timePassed - value.TimeForAnimation["fadeIn"]) * -1
				local leftTimeForAnimationFadeOut = (timeLeft - value.TimeForAnimation["fadeOut"]) * -1
				local leftTimeForAnimationSlideOut = (timeLeft - value.TimeForAnimation["slideOut"]) * -1

				
				-- Is disappeared
				if value.IsConstant or timeLeft >= 0 then
					cam.Start3D2D( k:GetPos() + offset + ang:Up(), Angle( 0, ang.y, 90 ), 0.03 )
						
						-- default animation variables
						local alpha = 255
						local offset = 0
						value.Offset = (value.Offset or 0)

						-- in animations
						if leftTimeForAnimationSlideOut > 0 and not value.IsConstant then
							offset = 0 - (leftTimeForAnimationSlideOut * (200 / value.TimeForAnimation["fadeOut"])) 
						end

						-- out animations
						if leftTimeForAnimationFadeIn > 0 then 
							alpha = 255 - (leftTimeForAnimationFadeIn * (255 / value.TimeForAnimation["fadeIn"])) 
						elseif leftTimeForAnimationFadeOut > 0 and not value.IsConstant then
							alpha = 255 - (leftTimeForAnimationFadeOut * (255 / value.TimeForAnimation["fadeOut"])) 
						end

						-- calculating box size
						local str = string.Replace(value.Display.TextFormat, "%1%", value.Message)
						surface.SetFont("pi_holo:"..value.Display.Font)
						local tw, th = surface.GetTextSize(str)

						-- offset prepare
						messageOffset = messageOffset - (th + value.Display.BackgroundPaddingHeight) - 40 -- update new offset
						value.Offset = Lerp( 5 * FrameTime(), value.Offset, messageOffset );

						-- box and text draw
						local box_x = 0 - (tw / 2) - (value.Display.BackgroundPaddingWidth / 2)
						local box_y = value.Offset + offset - (value.Display.BackgroundPaddingHeight / 2)
						local box_w = tw + value.Display.BackgroundPaddingWidth
						local box_h = th + value.Display.BackgroundPaddingHeight
						
						-- radius variables
						local radius = 50
						local b1 = true
						local b2 = true
						local b3 = true
						local b4 = true


						-- make it special shape if key is "1"
						if key == 1 then
							radius = 50
							b1 = true
							b2 = true
							b3 = false
							b4 = false
						end

						draw.RoundedBoxEx(radius, box_x, box_y, box_w, box_h, Color(value.Display.BackgroundColor.r, value.Display.BackgroundColor.g, value.Display.BackgroundColor.b, math.Clamp(alpha, 0, value.Display.BackgroundColor.a)), b1, b2, b3, b4)
						draw.DrawText(str, "pi_holo:"..value.Display.Font, 0, value.Offset + offset, Color( value.Display.TextColor.r, value.Display.TextColor.g, value.Display.TextColor.b, alpha ), TEXT_ALIGN_CENTER)
					
						-- ballon effect
						if key == 1 then
							local triangle = {
								{ x = box_x + (box_w / 2) - 150, y = (box_y + box_h) },
								{ x = box_x + (box_w / 2) + 150, y = (box_y + box_h) },
								{ x = box_x + (box_w / 2), y = (box_y + box_h + 80) }
							}
							surface.SetDrawColor( value.Display.BackgroundColor.r, value.Display.BackgroundColor.g, value.Display.BackgroundColor.b, math.Clamp(alpha, 0, value.Display.BackgroundColor.a) )
							draw.NoTexture()
							surface.DrawPoly( triangle )
						end
					cam.End3D2D()
				else
					table.insert(removes, {
						["removeFrom"] = v,
						["removeTo"] = value
					})
				end
				
			end
			

			-- Removing disappeared messages
			for k,v in pairs(removes) do
				table.RemoveByValue(v["removeFrom"], v["removeTo"])
			end

		end

	end

	-- Hooks
	hook.Add("PostDrawOpaqueRenderables", "drawMeChat", DrawHolo)

end

system:Info("Enabled")
--lua/autorun/john_martson_default.lua:
player_manager.AddValidModel( "John Martson", "models/rd1/John Martson.mdl" )
player_manager.AddValidHands( "John Martson", "models/weapons/john_martson_arms.mdl", 0, "00000000" )
--lua/autorun/kowalskianalysis.lua:
return gluapack()()
--lua/autorun/lamardavis.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/autorun/load_minigames_tool.lua:
--[[--------------------------------------------
             Minigames Addon (v2.0.0)
--------------------------------------------]]--


Minigames = Minigames or {}
Minigames.Language = Minigames.Language or {}
Minigames.Config = Minigames.Config or {}
Minigames.RunEvent = Minigames.RunEvent or {}
Minigames.ActiveGames = Minigames.ActiveGames or {}
Minigames.Games = Minigames.Games or {}

Minigames.DefaultUIntSize = 8

local CYAN = Color(148, 245, 229)
local WHITE = Color(240, 240, 240)
local YELLOW = Color(228, 215, 104)
local realm = SERVER and CYAN or YELLOW

MsgC( WHITE, "===============================================", "\n" )
MsgC( WHITE, "===============", CYAN, " Minigames Tools ", WHITE, "===============", "\n" )
MsgC( WHITE, "===============================================", "\n" )

--[[----------------------------
          Pre Functions
----------------------------]]--

function Minigames.SendCS(File)
    if CLIENT then return end

    AddCSLuaFile(File)
    MsgC(WHITE, "[Minigames] Added CS:  ", CYAN, File, "\n")
end

function Minigames.AddInc(File)
    MsgC(WHITE, "[Minigames] Included:  ", realm, File, "\n")
    return include(File)
end


--[[----------------------------
        Throw Error (v2)
----------------------------]]--

local isstring = isstring
local isnumber = isnumber
local istable = istable
local isbool = isbool
local IsValid = IsValid
local isvector = isvector
local isangle = isangle
local isfunction = isfunction

local VERIFICATION_TYPE = {
    ["string"] = isstring,
    ["number"] = isnumber,
    ["table"] = istable,
    ["bool"] = isbool,
    ["boolean"] = isbool,
    ["player"] = function(v) return IsValid(v) and v:IsPlayer() end,
    ["mg_npc"] = function(v) return IsValid(v) and v:GetClass() == "minigame_npc" end,
    ["entity"] = IsValid,
    ["vector"] = isvector,
    ["angle"] = isangle,
    ["function"] = isfunction
}

local FuncMatchRegEx = {
    "Gemini:(.*)%(",
    "(.*)%.(.*)%(",
    "(.*)%(",
    "self:(.*)%("
}

local LuaRun = {
    ["@lua_run"] = true, -- Server
    ["@LuaCmd"] = true -- Client
}

function Minigames.ThrowError(Message, Value, Expected, OneMore)
    local Data = debug.getinfo(3 + (OneMore and 2 or 0)) or debug.getinfo(2)

    local FilePath = LuaRun[ Data["source"] ] and "Console" or "lua/" .. string.match(Data["source"], "lua/(.*)")
    local File = ( FilePath == "Console" ) and "Console" or file.Read(FilePath, "GAME")
    local Line = File and string.Trim( string.Explode("\n", File)[Data["currentline"]] or "" ) or ""

    local ErrorLine = "\t\t" .. Data["currentline"]
    local ErrorPath = "\t" .. FilePath
    local ErrorFunc = nil
    local ErrorArg = "\t" .. ( isstring(Value) and "\"" or "" ) .. tostring(Value) .. ( isstring(Value) and "\"" or "" ) .. " (" .. type(Value) .. ")"

    for _, regex in ipairs(FuncMatchRegEx) do
        ErrorFunc = string.match(Line, regex)
        if ErrorFunc then break end
    end

    ErrorFunc = "\t" .. (ErrorFunc or "Unknown") .. "(...)"
    Expected = "\t" .. Expected

    error("\n" .. string.format([[
========  Minigames ThrowError  ========
- Error found in: %s
- In the line: %s
- In the function: %s

- Argument: %s
- Expected: %s

- Error Message: %s
  
========  Minigames ThrowError  ========]], ErrorPath, ErrorLine, ErrorFunc, ErrorArg, Expected, Message))
end

function Minigames.Checker(...)
    local InfoTable = {...}

    if not istable(InfoTable) then
        Minigames.ThrowError([[The first argument of Checker() must be a table.]], InfoTable, "table")
    elseif ( #InfoTable ~= 3 ) then
        Minigames.ThrowError([[The first argument of Checker() must have at least 3 values.]], InfoTable, "table")
    end

    local ValueToCheck = InfoTable[1]
    local ExpectedType = string.lower(InfoTable[2])
    local ArgumentPos = InfoTable[3]

    local ExpectedTypes = string.Explode("/", ExpectedType)

    if #ExpectedTypes > 1 then
        for _, Type in ipairs(ExpectedTypes) do
            if not VERIFICATION_TYPE[ Type ] then
                Minigames.ThrowError([[The second argument of Checker() must be a valid type.]], ExpectedType, "ExpectedType")
            end
        end
    else
        if not VERIFICATION_TYPE[ ExpectedType ] then
            Minigames.ThrowError([[The second argument of Checker() must be a valid type.]], ExpectedType, "a valid type")
        end
    end

    if not isnumber(ArgumentPos) then
        Minigames.ThrowError([[The third argument of Checker() must be a number.]], ArgumentPos, "number")
    end

    local LuaDataInfo = debug.getinfo(3)

    if #ExpectedTypes > 1 then
        local Found = false
        for _, Type in ipairs(ExpectedTypes) do
            if VERIFICATION_TYPE[ Type ](ValueToCheck) then
                Found = true
                break
            end
        end

        if not Found then
            local Phrase = "The " .. string.CardinalToOrdinal(ArgumentPos) .. " argument of the function " .. ( LuaDataInfo["name"] or "Console" ) .. "() must be a valid value."
            Minigames.ThrowError(Phrase, ValueToCheck, ExpectedType, true)
        end
    else
        if not VERIFICATION_TYPE[ ExpectedType ](ValueToCheck) then
            local Phrase = "The " .. string.CardinalToOrdinal(ArgumentPos) .. " argument of the function " .. ( LuaDataInfo["name"] or "Console" ) .. "() must be a " .. ExpectedType .. "."
            Minigames.ThrowError(Phrase, ValueToCheck, ExpectedType, true)
        end
    end

    if ExpectedType == "string" and ( ValueToCheck == "" ) then
        local Phrase = "The " .. string.CardinalToOrdinal(ArgumentPos) .. " argument of the function " .. LuaDataInfo["name"] .. "() must not be empty."
        Minigames.ThrowError(Phrase, ValueToCheck, ExpectedType, true)
    end
end

--[[----------------------------
        Load All files
----------------------------]]--

if SERVER then
    Minigames.SendCS("minigames/configuration.lua")
    Minigames.SendCS("minigames/languages/__language.lua")
    Minigames.SendCS("minigames/enum.lua")
    Minigames.SendCS("minigames/shared.lua")
    Minigames.SendCS("minigames/cl_init.lua")

    Minigames.AddInc("minigames/configuration.lua")
    Minigames.AddInc("minigames/languages/__language.lua")
    Minigames.AddInc("minigames/enum.lua")
    Minigames.AddInc("minigames/shared.lua")
    Minigames.AddInc("minigames/init.lua")
else
    Minigames.AddInc("minigames/configuration.lua")
    Minigames.AddInc("minigames/languages/__language.lua")
    Minigames.AddInc("minigames/enum.lua")
    Minigames.AddInc("minigames/shared.lua")
end

--addons/minigame-tool-assistant/lua/minigames/vgui/rewardconfig.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/config.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/customvar.lua:
--[[--------------------------------------------
            Minigame Module - Variables
--------------------------------------------]]--

if SERVER then
    util.AddNetworkString("Minigames.ReplicateVar")
end

--[[----------------------------
         Main Functions
----------------------------]]--

function MinigameObject:ReplicateVar(VarName)
    if CLIENT then return end

    self:Checker(VarName, "string", 1)

    if ( self.__CustomVars[VarName] == nil ) then
        self.ThrowError([[The variable "]] .. VarName .. [[" does not exist.]], VarName, "existing variable")
    end

    net.Start("Minigames.ReplicateVar")
        net.WritePlayer(self:GetOwner())
        net.WriteString(VarName)
        net.WriteType(self.__CustomVars[VarName])
    net.Broadcast()
end

function MinigameObject:AddNewVar(VarName, VarType, Default)
    self:Checker(VarName, "string", 1)
    self:Checker(VarType, "string", 2)

    local Result = false

    if ( Default ~= nil ) then
        self:Checker(Default, VarType, 3)
    else
        ThrowError([[The third argument of AddNewVar() must not be nil.]], Default, VarType)
    end

    if ( VarType == "bool" ) or ( VarType == "boolean" ) then
        self:Checker(Default, "boolean", 3)

        self["Set" .. VarName] = function(SubSelf, Value)
            SubSelf:Checker(Value, "boolean", 1)
            SubSelf.__CustomVars[VarName] = Value

            SubSelf:ReplicateVar(VarName)
        end

        self["Is" .. VarName] = function(SubSelf)
            return SubSelf.__CustomVars[VarName]
        end

        self["Toggle" .. VarName] = function(SubSelf)
            SubSelf.__CustomVars[VarName] = not SubSelf.__CustomVars[VarName]
            return SubSelf.__CustomVars[VarName]
        end

        Result = true

    elseif ( VarType == "number" ) then
        self:Checker(Default, "number", 3)

        self["Set" .. VarName] = function(SubSelf, Value)
            SubSelf:Checker(Value, "number", 1)
            SubSelf.__CustomVars[VarName] = Value

            SubSelf:ReplicateVar(VarName)
        end

        Result = true
    end

    self.__CustomVars[VarName] = Default
    self["Get" .. VarName] = function(SubSelf)
        return SubSelf.__CustomVars[VarName]
    end

    if ( Result ~= true ) then
        ThrowError([[There was an error when creating the variable.]], VarType, "boolean or number")
    end
end


--[[----------------------------
             Network
----------------------------]]--

if CLIENT then
    net.Receive("Minigames.ReplicateVar", function()
        local Player = net.ReadPlayer()
        if ( Minigames.ActiveGames[Player] == nil ) then return end

        local VarName = net.ReadString()
        local VarValue = net.ReadType()

        Minigames.ActiveGames[Player].__CustomVars[VarName] = VarValue
    end)
end
--addons/minigame-tool-assistant/lua/minigames/games/boxgame.lua:
--[[--------------------------------------------
                    Box Game
--------------------------------------------]]--

local MainOffset = 142.3

local RedColor = Color(255, 0, 0)
local KillBoxHeight = Vector(0, 0, 60)
local KillBoxOffset = Vector(500, -500, 0)

local CeilingHeight = Vector(0, 0, 500)
local LOOP_MUSIC = true

--[[----------------------------
       Initial Game Config
----------------------------]]--

local GameScript = Minigames.CreateNewGame()

GameScript:SetGameName("Box Game")
GameScript:AddHeader("!gameconfig")

GameScript:AddConfig("DelayBetweenDrops", {
    min = 0.5,
    max = 4,
    def = 2,
    dec = 1
})

GameScript:AddConfig("DropDelay", {
    min = 0.5,
    max = 5,
    def = 2,
    dec = 1
})

GameScript:AddConfig("DropReaction", {
    min = 0.1,
    max = 2.5,
    def = 0.2,
    dec = 2
})

GameScript:AddConfig("StartBoxes", {
    min = 0,
    max = 64,
    def = 3,
})

GameScript:AddConfig("MaxBoxes", {
    min = 1,
    max = 64,
    def = 3,
})

GameScript:AddConfig("AddMoreBoxes", {
    min = 0,
    max = 8,
    def = 1,
})

GameScript:AddHeader("!playzoneconfig")

GameScript:AddConfig("SizeX", {
    min = 2,
    max = 6,
    def = 4,
})

GameScript:AddConfig("SizeY", {
    min = 2,
    max = 6,
    def = 4,
})

GameScript:AddConfig("Height", {
    min = 150,
    max = 2048,
    def = 150
})

GameScript:AddConfig("Offset", {
    min = 0,
    max = 130,
    def = 25,
    dec = 1
})


--[[----------------------------
        Trigger Events
----------------------------]]--

GameScript:AddHook( "PostPlayerDeath", "GetFallDamage" )

function GameScript:OnPlayerChanged(ply, Joined)
    if not self:IsActive() then return end

    local CurrentPlayers = self:GetPlayers(true)

    if #CurrentPlayers == 1 then
        self:SetPlayerWinner( CurrentPlayers[1] )
        self:StopGame()
    elseif #CurrentPlayers < 1 then
        self:StopGame()
    end

    -- Is very uncanny to see IsActive after check the game isn't active
    if
        Minigames.Config["PlayMusic"] and
        self:IsActive() and
        #CurrentPlayers <= Minigames.Config["PlayersToFastMusic"]
    then
        self:PlayWorldSound( "sound/" .. Minigames.Config["BackgroundMusicFast"], LOOP_MUSIC )
    end
end

--[[----------------------------
           Variables
----------------------------]]--

GameScript.TeleportOffset = Vector(0, 0, 20)

GameScript:AddNewVar("Ceiling", "number", 0)

--[[----------------------------
          Box Game Logic
----------------------------]]--

-- Move Ceiling to Floor with math.ease.InExpo
local function LerpFunctionToMove(fraction, from, to)
    return Lerp( math.ease.OutBounce(fraction), from, to )
end

function GameScript:MoveCeilingToFloor(ceiling)
    local CeilingName = "Minigame.Ceiling." .. ceiling:EntIndex()

    local CeilingPos = ceiling:GetPos()
    local CeilingTarget = CeilingPos - CeilingHeight

    local StartTime = CurTime()

    if hook.GetTable()["Think"] and hook.GetTable()["Think"][CeilingName] then
        hook.Remove("Think", CeilingName)
        ceiling:SetPos( ceiling.OriginalPos )
        ceiling:SetState(0)
    end

    hook.Add("Think", CeilingName, function()
        if not IsValid(ceiling) then
            hook.Remove("Think", CeilingName)
            return
        end

        if not self:IsActive() then
            hook.Remove("Think", CeilingName)
            ceiling:SetPos( ceiling.OriginalPos )
            ceiling:SetState(0)
            return
        end

        local fraction = math.Clamp( ( CurTime() - StartTime ) / self.DropDelay - self.DropReaction, 0, 1 )
        local NewPos = LerpFunctionToMove(fraction, CeilingPos, CeilingTarget)

        ceiling:SetPos(NewPos)

        if fraction == 1 then
            hook.Remove("Think", CeilingName)

            if IsValid(ceiling) then
                ceiling:SetPos( ceiling.OriginalPos )
                ceiling:SetState(0)
            end
        end
    end)
end


function GameScript:SelectRandomBoxSpawn(opt)
    local AmountBoxes = opt or self.AmountBoxes
    local AllBoxes = table.Copy( self:GetAllEntities("CeilingBoxes") )
    local Boxes = {}

    for i = 1, AmountBoxes do
        local BoxPos = math.random(1, #AllBoxes)
        local Box = table.remove(AllBoxes, BoxPos)
        table.insert(Boxes, Box)
    end

    for _, Box in ipairs(Boxes) do
        Box:SetState(2)

        self:MoveCeilingToFloor(Box)
    end
end


--[[----------------------------
        Game Constructor
----------------------------]]--

function GameScript:SpawnGame( trace )

    --[[--------------------------------
            Initial Configuration
    --------------------------------]]--
    local SizeX = self:GetOwnerConfig("SizeX")
    local SizeY = self:GetOwnerConfig("SizeY")
    local Offset = self:GetOwnerConfig("Offset")

    --[[--------------------------------
              Initial Game Pos
    --------------------------------]]--
    local Pos = trace.HitPos + trace.HitNormal * self:GetOwnerConfig("Height")
    local PosOffset = Vector(
        math.Round( ( ( Offset + MainOffset ) * ( SizeX - 1 ) ) / 2, 0 ),
        math.Round( ( -( Offset + MainOffset ) * ( SizeY - 1 ) ) / 2, 0 ),
        0
    )
    Pos:Sub( PosOffset )

    --[[--------------------------------
              Creation of Game
    --------------------------------]]--

    --[[------------------------
              Base Floor
    ------------------------]]--
    for i = 0, SizeX - 1 do
        local square = self:CreateEntity("minigame_bigsquare", "Floor")
        square:SetPos( Pos + Vector( (Offset + MainOffset) * i, 0, 0 ) )
        square:SetState(1)
        square:Spawn()

        local CeilingBoxes = self:CreateEntity("minigame_boxgame", "CeilingBoxes")
        CeilingBoxes:SetPos( Pos + Vector( (Offset + MainOffset) * i, 0, 0 ) + CeilingHeight )
        CeilingBoxes:SetState(0)
        CeilingBoxes:Spawn()

        CeilingBoxes.OriginalPos = CeilingBoxes:GetPos()

        for y = 1, SizeY - 1 do
            local g_square = self:CreateEntity("minigame_bigsquare", "Floor")
            g_square:SetPos( square:GetPos() + Vector(0, -( Offset + MainOffset ) * y ) )
            g_square:Spawn()
            g_square:SetState(1)

            local g_CeilingBoxes = self:CreateEntity("minigame_boxgame", "CeilingBoxes")
            g_CeilingBoxes:SetPos( CeilingBoxes:GetPos() + Vector(0, -( Offset + MainOffset ) * y ) )
            g_CeilingBoxes:Spawn()
            g_CeilingBoxes:SetState(0)

            g_CeilingBoxes.OriginalPos = g_CeilingBoxes:GetPos()
        end
    end

    --[[------------------------
              Kill Box
    ------------------------]]--
    local KillBoxPos = trace.HitPos + trace.HitNormal * ( self:GetOwnerConfig("Height") + 3 ) - KillBoxHeight
    local KillBoxX = ( Offset + MainOffset - 1 ) * SizeX
    local KillBoxY = ( Offset + MainOffset - 1 ) * SizeY
    local KillBoxBounds = Vector( KillBoxX - ( KillBoxX / 2 ), -KillBoxY - ( -KillBoxY / 2 ), 1.5 ) + KillBoxOffset

    self:CreateTrigger(KillBoxPos + KillBoxBounds, KillBoxPos + -KillBoxBounds, Minigames.Enum.KILL_ONTOUCH)
    self:SpawnPlayZone()

    self.DefaultTeleportEntities = self:GetAllEntities("Floor")

    return true
end



--[[----------------------------
          Main Functions
----------------------------]]--

function GameScript:BoxGame()
    local DelayBetweenDrops = self.DelayBetweenDrops
    local PostDelay = self.DropDelay + self.DropReaction
    local AddMoreBoxes = self.AddMoreBoxes
    local StartBoxes = self.StartBoxes
    local MaxBoxes = self.MaxBoxes

    self.MainTimer = self:CreateChronometer("Main")
    self.MainTimer:SetLoop(true)
    self.MainTimer:SetVariable({["Amount"] = StartBoxes})

    self.MainTimer:Wait(DelayBetweenDrops)
    self.MainTimer:AddAction(function(Var)
        Var.Amount = math.min(Var.Amount + AddMoreBoxes, MaxBoxes)

        self:SelectRandomBoxSpawn(Var.Amount)
    end)
    self.MainTimer:Wait(PostDelay)
    self.MainTimer:Start()

    if Minigames.Config["PlayMusic"] then
        self:PlayWorldSound( "sound/" .. Minigames.Config["BackgroundMusic"], LOOP_MUSIC )
    end
end


function GameScript:StartGame()
    self:TeleportPlayers(self:GetAllEntities("Floor"))

    self.BeginTimer = self:CreateChronometer("Begin")
    self.BeginTimer:SetLoop(7)
    self.BeginTimer:SetVariable({
        ["Start"] = 0,
        ["Entities"] = self:GetAllEntities("Floor")
    })

    self.BeginTimer:AddAction(function(Var, SelfTimer)
        if ( Var["Start"] % 2 == 0 ) then
            for _, ent in ipairs( Var["Entities"] ) do
                ent:SetState(11)
            end
        else
            for _, ent in ipairs( Var["Entities"] ) do
                ent:SetState(1)
            end
        end

        if Var["Start"] == 6 then
            self:BoxGame()
        end

        Var["Start"] = Var["Start"] + 1
    end)
    self.BeginTimer:Wait(0.5)
    self.BeginTimer:Start()

    self:PlayGameStartSound()

    return Minigames.GameStart( self )
end

function GameScript:StopGame()
    self:RemoveChronometer("Begin")
    self:RemoveChronometer("Main")

    for _, ent in ipairs( self:GetAllEntities("Floor") ) do
        ent:SetState(1)
    end

    return Minigames.GameStop( self )
end

function GameScript:ToggleGame()
    local Result = false

    -- Time Config
    self.DelayBetweenDrops = self:GetOwnerConfig("DelayBetweenDrops")
    self.DropReaction = self:GetOwnerConfig("DropReaction")
    self.DropDelay = self:GetOwnerConfig("DropDelay")

    -- Box Config
    self.AddMoreBoxes = self:GetOwnerConfig("AddMoreBoxes")
    self.StartBoxes = self:GetOwnerConfig("StartBoxes")
    self.MaxBoxes = self:GetOwnerConfig("MaxBoxes")

    if self:IsActive() then
        Result = self:StopGame()
    else
        Result = self:StartGame()
    end

    return Result
end


--[[----------------------------
           Pre-Render
----------------------------]]--

if CLIENT then

local CachePos = vector_origin
local CacheBounds = vector_origin

function GameScript:CeilingBoxPreview()
    hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawBox")
    hook.Add("PostDrawTranslucentRenderables", "Minigames.DrawCeilingBox", function()
        render.DrawWireframeBox( CachePos, angle_zero, CacheBounds, -CacheBounds, color_white, true )
    end)
end

function GameScript:UpdateBoxGame( trace )
    if Minigames.GetOwnerGame( LocalPlayer() ) then self:CeilingBoxPreview() return end

    local Offset = MainOffset + self:GetOwnerConfig("Offset")
    local SizeX = Offset * ( self:GetOwnerConfig("SizeX") ) - self:GetOwnerConfig("Offset")
    local SizeY = Offset * ( self:GetOwnerConfig("SizeY") ) - self:GetOwnerConfig("Offset")
    local HitPos = trace.HitPos + trace.HitNormal * ( self:GetOwnerConfig("Height") )

    local Bounds = Vector( SizeX - ( SizeX / 2 ), -SizeY - ( -SizeY / 2 ), 6.4 )
    local KillBox = Bounds + KillBoxOffset

    if ( CachePos ~= HitPos ) or ( CacheBounds ~= Bounds ) then
        CachePos = HitPos + CeilingHeight
        CacheBounds = Bounds
        self:CeilingBoxPreview()
    end

    if
        ( not trace.Hit ) or
        ( IsValid( trace.Entity ) and trace.Entity:IsPlayer() )
    then
        hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawBox")
    else
        hook.Add("PostDrawTranslucentRenderables", "Minigames.DrawBox", function()
            render.DrawWireframeBox( HitPos - KillBoxHeight, angle_zero, KillBox, -KillBox, RedColor, true )
            render.DrawWireframeBox( HitPos, angle_zero, Bounds, -Bounds, color_white, true )
            render.DrawWireframeBox( HitPos + CeilingHeight, angle_zero, Bounds, -Bounds, color_white, true )
        end)
    end
end

end



--[[----------------------------
        Action Functions
----------------------------]]--

function GameScript:LeftClick( trace, owner, FirstTime )
    local Result = true

    if FirstTime then
        Result = self:SpawnGame( trace, owner )
    else
        if IsValid( trace.Entity ) and trace.Entity:IsPlayer() then
            Result = self:TogglePlayer( trace.Entity )
        end
    end

    return Result
end

function GameScript:RightClick( trace, owner )
    return self:ToggleGame()
end

function GameScript:Reload( trace, owner )

end

function GameScript:Think( trace, owner )
    if CLIENT then
        self:UpdateBoxGame( trace, owner )
    end
end

function GameScript:RollUp( trace, owner )
    if CLIENT then
        hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawBox")
        hook.Remove("PostDrawTranslucentRenderables", "Minigames.DrawCeilingBox")
    end
end

Minigames.RegisterNewGame(GameScript)
--addons/minigame-tool-assistant/lua/minigames/games/example.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/rewardbase.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/dailyrewards.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/darkrp.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/example.lua:
--[[--------------------------------------------
                 Reward Example
--------------------------------------------]]--

local Reward = Minigames.CreateNewReward()

Reward:SetName("Example") --> Required
Reward:SetIcon("minigames/icons/example.png") --> Optional

-- Set a name amount with a string
Reward:SetNameAmount("Example") --> Required

-- Or you can set a name amount with a function
Reward:SetNameAmount(function(item, arg1, arg2, arg3)
    return "The example ID(" .. item .. ") with argument: " .. arg1 .. " and " .. arg2
end)


-- Function Reward
Reward:SetFunctionReward(function(owner, ply, arg1, arg2, arg3)
    RunConsoleCommand("givereward_example", ply:SteamID64(), arg1, arg2, arg3)

    --[[
    Be careful about using functions that can be exploited, like RunConsoleCommand
    you should use ConCommand in order to prevent exploits or giving ranks above the current owner rank
    like this:
    
    owner:ConCommand("ulx adduser '" .. ply:Nick() .. "' user")
    --]]
end) -- Required



-- Arguments
Reward:AddArgument({ -- arg1
    Name = "Argument 1",
    Type = "Text",
    Default = "example",
    Placeholder = "Example ID"
})

Reward:AddArgument({ -- arg2
    Name = "Awesome Slider",
    Type = "Slider",
    Min = 1,
    Max = 5,
    Default = 2,
    Convert = function(v) return v end --> This will be arg1 that will be passed to the SetFunctionReward
})

Reward:AddArgument({ -- arg3
    Name = "Only numeric text",
    Type = "Text",
    Placeholder = "Numeric ID",
    Numeric = true
})

Reward:AddArgument({ -- arg4
    Name = "Incredible List",
    Type = "List",
    Options = {
        ["option1"] = "Display Name 1",
        ["option2"] = "Display Name 2",
        ["option3"] = "Display Name 3"
    },
    Default = "option3",
    Convert = function(v) return v end
})

Reward:AddArgument({ -- arg5
    Name = "An awesome sequencial list",
    Type = "List",
    Options = {
        "option1",
        "option2",
        "option3"
    },
    Default = "option1",
    Convert = function(v) return v end,
    Optional = true -- This means that the argument can be or not as arg4 in the function
})

-- Minigames.RegisterReward(Reward)
--addons/minigame-tool-assistant/lua/minigames/rewards/gestures.lua:
local Reward = Minigames.CreateNewReward()

Reward:SetName("Gestures")
Reward:SetNameAmount("Gesture")
Reward:SetIcon("minigames/icons/gestures_icon.png")

Reward:SetFunctionReward(function(owner, ply, gesture)
    RunConsoleCommand("inc_gestures_give", ply:SteamID(), gesture)
end)

Reward:AddArgument({ --> gesture
    ["Name"] = "Gesture ID",
    ["Type"] = "Text",
    ["Default"] = 1,
    ["Placeholder"] = "Gesture ID"
})

Minigames.RegisterReward(Reward)
--addons/minigame-tool-assistant/lua/minigames/rewards/mtokens.lua:
return gluapack()()
--addons/mayor_voting/lua/autorun/mayorvoting.lua:
if SERVER then
	AddCSLuaFile()
	AddCSLuaFile('cl_mayorvoting.lua')
	AddCSLuaFile('sh_votingconfig.lua')
	AddCSLuaFile('cl_votingfonts.lua')
	AddCSLuaFile('panels/cl_votingpanel.lua')
	AddCSLuaFile('panels/cl_playericon.lua')
	include('sv_mayorvoting.lua')
end

if CLIENT then
	include('cl_mayorvoting.lua')
end

--addons/mayor_voting/lua/sh_votingconfig.lua:
VOTING.Theme = {}
--
-- Mayor Voting Theme
--

VOTING.Theme.WindowColor = Color(26, 30, 38, 150) --Main window color
VOTING.Theme.ControlColor = Color( 38, 41, 49, 255) --Main window control color
VOTING.Theme.TitleTextColor = color_white --Main title text color

VOTING.Theme.NoticePrefixColor = Color(0,0,255) --Chat text color of notice prefix
VOTING.Theme.NoticeTextColor = Color(255,51,51) --Chat text color of notices

VOTING.Settings = {}
--
-- Mayor Voting Settings
--
VOTING.Settings.VotingTitle = "Başkan Seçimi" --Main title
VOTING.Settings.ResultsTitle = "YENİ BAŞKAN SEÇİLDİ!" --Main title for results
VOTING.Settings.NoticePrefix = "[SEÇİM]" --Chat text prefix

VOTING.Settings.NPCEnabled = true --Spawn Mayor Elections NPC?
VOTING.Settings.NPCTitleText = "Başkan Sekreteri" --NPC Title above head
VOTING.Settings.NPCModel = "models/player/gman_high.mdl" --NPC Player model
VOTING.Settings.NPCSequence = "pose_standing_01" --NPC pose default pose_standing_01

VOTING.Settings.CloseTimeAfterVoteEnds = 10 --Time until window closes after results
--The vote ticker shows real-time updates of who is voting for who
VOTING.Settings.ShowVoteTickerUpdates = false --Show vote ticker?
VOTING.Settings.ForceMouseCursor = false --Force mouse cursor on for new votes?

VOTING.Settings.MenuSounds = true --Play the menu sounds?
VOTING.Settings.NewVoteSound = "plats/elevbell1.wav" --New vote sound
VOTING.Settings.VoteResultsSound = "ui/achievement_earned.wav" --Vote results sound

--
-- Mayor Voting Configuration Options
-- 

VOTING.MayorTeamName = "Başkan" --DarkRP mayor team name i.e. (name after AddExtraTeam)
VOTING.MaximumCandidates = 5 --Maximum candidates allowed in vote
VOTING.MinimumCandidates = 2 --Minimum candidates needed to trigger vote
VOTING.AboutToBeginTime = 30 --Time (in seconds) between vote triggered and started
VOTING.VoteTime = 30 --Time (in seconds) that a vote will last
VOTING.AllowCandidatesToVote = true --Allow candidates to participate in the vote?
VOTING.OnlyEnterUsingNPC = false --Only allow vote entry using the NPC?
VOTING.CandidateCost = 50000 --Cost of vote entry. Set to 0 to disable entry fee.
VOTING.DemoteMayorOnDeath = true --Demote the mayor automatically if they die.
VOTING.MinutesUntilNextElection = 5 --Cooldown (in minutes) for new mayor vote
VOTING.AllowNewElectionOnDeath = true --Reset cooldown if the mayor dies
VOTING.AllowNewElectionWithMayor = false --Allow new votes if there is already a mayor
VOTING.DemoteOtherMayorsOnWin = true --Demote current mayors when there is a new mayor


--addons/media_player_fixed_edition/lua/mediaplayer/controls/dhtmlcontrols.lua:
--[[__                                       _
 / _| __ _  ___ ___ _ __  _   _ _ __   ___| |__
| |_ / _` |/ __/ _ \ '_ \| | | | '_ \ / __| '_ \
|  _| (_| | (_|  __/ |_) | |_| | | | | (__| | | |
|_|  \__,_|\___\___| .__/ \__,_|_| |_|\___|_| |_|
                   |_| 2010 --]]

--[[---------------------------------------------------------
	Browser controls
-----------------------------------------------------------]]

local urllib = url

local PANEL = {}

AccessorFunc( PANEL, "HomeURL", "HomeURL", FORCE_STRING )

function PANEL:Init()

	local ButtonSize = 32
	local Margins = 2
	local Spacing = 0

	self.BackButton = vgui.Create( "DIconButton", self )
	self.BackButton:SetIcon( "mp-back" )
	self.BackButton:SetSize( ButtonSize, ButtonSize )
	self.BackButton:Dock( LEFT )
	self.BackButton:DockMargin( Spacing * 3, Margins, Spacing, Margins )
	self.BackButton.DoClick = function()
		self.BackButton:SetDisabled( true )
		self:HTMLBack()
		self.Cur = self.Cur - 1
		self.Navigating = true
	end

	self.ForwardButton = vgui.Create( "DIconButton", self )
	self.ForwardButton:SetIcon( "mp-forward" )
	self.ForwardButton:SetSize( ButtonSize, ButtonSize )
	self.ForwardButton:Dock( LEFT )
	self.ForwardButton:DockMargin( Spacing, Margins, Spacing, Margins )
	self.ForwardButton.DoClick = function()
		self.ForwardButton:SetDisabled( true )
		self:HTMLForward()
		self.Cur = self.Cur + 1
		self.Navigating = true
	end

	self.RefreshButton = vgui.Create( "MPRefreshButton", self )
	self.RefreshButton:SetSize( ButtonSize, ButtonSize )
	self.RefreshButton:Dock( LEFT )
	self.RefreshButton:DockMargin( Spacing, Margins, Spacing, Margins )
	self.RefreshButton.DoClick = function()
		self.RefreshButton:SetDisabled( true )
		self.Refreshing = true
		self.HTML:Refresh()
	end

	self.HomeButton = vgui.Create( "DIconButton", self )
	self.HomeButton:SetIcon( "mp-home" )
	self.HomeButton:SetSize( ButtonSize, ButtonSize )
	self.HomeButton:Dock( LEFT )
	self.HomeButton:DockMargin( Spacing, Margins, Spacing * 3, Margins )
	self.HomeButton.DoClick = function()
		self.HTML:Stop()
		self.HTML:OpenURL( self:GetHomeURL() )
	end

	self.AddressBar = vgui.Create( "DTextEntry", self )
	self.AddressBar:Dock( FILL )
	self.AddressBar:DockMargin( Spacing, Margins * 3, Spacing, Margins * 3 )
	self.AddressBar.OnEnter = function()
		self.HTML:Stop()
		self.HTML:OpenURL( self.AddressBar:GetValue() )
	end

	local AddrSetText = self.AddressBar.SetText
	self.AddressBar.SetText = function (panel, text)
		AddrSetText( panel, urllib.unescape(text) )
	end

	self.RequestButton = vgui.Create( "MPRequestButton", self )
	self.RequestButton:SetDisabled( true )
	self.RequestButton:Dock( RIGHT )
	self.RequestButton:DockMargin( 8, 4, 8, 4 )
	self.RequestButton.DoClick = function()
		MediaPlayer.MenuRequest( self.HTML:GetURL() )
	end

	self:SetHeight( ButtonSize + Margins * 2 )

	self.NavStack = 0
	self.History = {}
	self.Cur = 1

	-- This is the default look, feel free to change it on your created control :)
	self:SetButtonColor( Color( 250, 250, 250, 200 ) )
	self.BorderSize = 4
	self.BackgroundColor = Color( 33, 33, 33, 255 )
	self:SetHomeURL( "https://www.google.com" )

end

function PANEL:SetHTML( html )

	self.HTML = html

	if ( html.URL ) then
		self:SetHomeURL( self.HTML.URL )
	end

	self.RefreshButton:SetHTML(html)
	self.AddressBar:SetText( self:GetHomeURL() )
	self:UpdateHistory( self:GetHomeURL() )

	local OnFinishLoading = self.HTML.OnFinishLoading
	self.HTML.OnFinishLoading = function( panel )

		local url = self.HTML:GetURL()

		self.AddressBar:SetText( url )
		self:FinishedLoading()

		if OnFinishLoading then
			OnFinishLoading( panel )
		end

	end

	local OnURLChanged = self.HTML.OnURLChanged
	self.HTML.OnURLChanged = function ( panel, url )

		self.AddressBar:SetText( url )
		self.NavStack = self.NavStack + 1
		self:StartedLoading()
		self:UpdateHistory( url )

		-- Check for valid URL
		local isValidUrl = MediaPlayer.ValidUrl( url )
		self.RequestButton:SetDisabled( not isValidUrl )

		if ( OnURLChanged ) then
			OnURLChanged( panel, url )
		end

	end

end

function PANEL:UpdateHistory( url )

	--print( "PANEL:UpdateHistory", url )
	self.Cur = math.Clamp( self.Cur, 1, table.Count( self.History ) )

	local top = self.History[self.Cur]

	-- Ignore page refresh
	if top == url then
		return
	end

	if ( self.Refreshing ) then

		self.Refreshing = false
		self.RefreshButton:SetDisabled( false )
		return

	end

	if ( self.Navigating ) then

		self.Navigating = false
		self:UpdateNavButtonStatus()
		return

	end

	-- We were back in the history queue, but now we're navigating
	-- So clear the front out so we can re-write history!!
	if ( self.Cur < table.Count( self.History ) ) then

		for i = self.Cur + 1, table.Count( self.History ) do
			self.History[i] = nil
		end

	end

	self.Cur = table.insert( self.History, url )

	self:UpdateNavButtonStatus()

end

function PANEL:HTMLBack()
	if self.Cur <= 1 then return end
	self.Cur = self.Cur - 1
	self.HTML:OpenURL( self.History[ self.Cur ], true )
end

function PANEL:HTMLForward()
	if self.Cur == #self.History then return end
	self.Cur = self.Cur + 1
	self.HTML:OpenURL( self.History[ self.Cur ], true )
end

function PANEL:FinishedLoading()

	self.RefreshButton:SetDisabled( false )

end

function PANEL:StartedLoading()

	self.RefreshButton:SetDisabled( true )

end

function PANEL:UpdateNavButtonStatus()

	--print( self.Cur, table.Count( self.History ) )

	self.ForwardButton:SetDisabled( self.Cur >= table.Count( self.History ) )
	self.BackButton:SetDisabled( self.Cur == 1 )

end

function PANEL:SetButtonColor( col )

	self.BackButton:SetColor( col )
	self.ForwardButton:SetColor( col )
	self.RefreshButton:SetColor( col )
	self.HomeButton:SetColor( col )

end

function PANEL:Paint()

	draw.RoundedBoxEx( self.BorderSize, 0, 0, self:GetWide(), self:GetTall(), self.BackgroundColor, true, true, false, false )

end

derma.DefineControl( "MPHTMLControls", "", PANEL, "Panel" )


--[[---------------------------------------------------------
	Media request button
	Embedded inside of the browser controls.
-----------------------------------------------------------]]

local RequestButton = {}

-- RequestButton.DisabledColor = Color(189, 195, 199)
-- RequestButton.DepressedColor = Color(192, 57, 43)
RequestButton.HoverColor = Color(192, 57, 43)
RequestButton.DefaultColor = Color(231, 76, 60)
RequestButton.DisabledColor = RequestButton.DefaultColor
RequestButton.DepressedColor = RequestButton.DefaultColor

RequestButton.DefaultTextColor = Color(236, 236, 236)
RequestButton.DisabledTextColor = Color(158, 48, 36)

function RequestButton:Init()
	DButton.Init(self)

	local ButtonSize = 32

	self:SetSize( ButtonSize * 8, ButtonSize )
	self:SetFont( "MediaRequestButton" )

	self:SetDisabled( true )
end

function RequestButton:SetDisabled( disabled )
	if disabled then
		self:SetText( "MEDYAYI ARA" )
	else
		self:SetText( "MEDYAYI YERLESTIR" )
	end

	DButton.SetDisabled( self, disabled )
end

function RequestButton:UpdateColours()
	if self:GetDisabled() then
		return self:SetTextStyleColor( self.DisabledTextColor )
	else
		return self:SetTextStyleColor( self.DefaultTextColor )
	end
end

function RequestButton:Paint( w, h )
	local col

	if self:GetDisabled() then
		col = self.DisabledColor
	elseif self.Depressed or self.m_bSelected then
		col = self.DepressedColor
	elseif self:IsHovered() then
		col = self.HoverColor
	else
		-- Pulse effect
		local h, s, v = ColorToHSV( self.DefaultColor )
		v = 0.7 + math.sin(RealTime() * 10) * 0.3

		col = HSVToColor(h,s,v)
	end

	draw.RoundedBox( 2, 0, 0, w, h, col )
end

derma.DefineControl( "MPRequestButton", "", RequestButton, "DButton" )


--[[---------------------------------------------------------
	Media refresh button
	Embedded inside of the browser controls.
-----------------------------------------------------------]]

local RefreshButton = {}

AccessorFunc( RefreshButton, "HTML", "HTML" )

function RefreshButton:Init()
	self.BaseClass.Init( self )
	self:SetIcon( "mp-refresh" )
	self:SetText( "" )
end

local Matrix = Matrix
local vecTranslate = Vector()
local angRotate = Angle()

function RefreshButton:Paint( w, h )

	if IsValid(self.HTML) and self.HTML:IsLoading() then
		local x, y = self:LocalToScreen(0,0)

		vecTranslate.x = x + w / 2
		vecTranslate.y = y + h / 2

		angRotate.y = RealTime() * 512

		local mat = Matrix()
		mat:Translate( vecTranslate )
		mat:Rotate( angRotate )
		mat:Translate( -vecTranslate )
		cam.PushModelMatrix( mat )
		self._PushedMatrix = true
	end

	self.BaseClass.Paint( self, w, h )

end

function RefreshButton:PaintOver()

	if self._PushedMatrix then
		cam.PopModelMatrix()
		self._PushedMatrix = nil
	end

end

derma.DefineControl( "MPRefreshButton", "", RefreshButton, "DIconButton" )

--addons/media_player_fixed_edition/lua/mediaplayer/controls/dmediaplayerrequest.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/shared.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/utils.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/sh_cvars.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/players/entity/cl_init.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/services/dailymotion/cl_init.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/services/resource/shared.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/sh_init_framework.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/thirdparty/data/utf8_chunk_4.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/sh_inconfig.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/core/cl_npc_label.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

30/12/2023

--]]
--addons/onyx_framework_2/lua/onyx/ui/libs/thirdparty/cl_tween.lua:
-- Put your Lua here
local tween = {
    _VERSION = 'tween 2.1.1',
    _DESCRIPTION = 'tweening for lua',
    _URL = 'https://github.com/kikito/tween.lua',
    _LICENSE = [[
      MIT LICENSE

      Copyright (c) 2014 Enrique García Cota, Yuichi Tateno, Emmanuel Oga

      Permission is hereby granted, free of charge, to any person obtaining a
      copy of this software and associated documentation files (the
      "Software"), to deal in the Software without restriction, including
      without limitation the rights to use, copy, modify, merge, publish,
      distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so, subject to
      the following conditions:

      The above copyright notice and this permission notice shall be included
      in all copies or substantial portions of the Software.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
      IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
      CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
      TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    ]]
}

-- easing
-- Adapted from https://github.com/EmmanuelOga/easing. See LICENSE.txt for credits.
-- For all easing functions:
-- t = time == how much time has to pass for the tweening to complete
-- b = begin == starting property value
-- c = change == ending - beginning
-- d = duration == running time. How much time has passed *right now*
local pow, sin, cos, pi, sqrt, abs, asin = math.pow, math.sin, math.cos, math.pi, math.sqrt, math.abs, math.asin

-- linear
local function linear(t, b, c, d)
    return c * t / d + b
end

-- quad
local function inQuad(t, b, c, d)
    return c * pow(t / d, 2) + b
end

local function outQuad(t, b, c, d)
    t = t / d

    return -c * t * (t - 2) + b
end

local function inOutQuad(t, b, c, d)
    t = t / d * 2
    if t < 1 then return c / 2 * pow(t, 2) + b end

    return -c / 2 * ((t - 1) * (t - 3) - 1) + b
end

local function outInQuad(t, b, c, d)
    if t < d / 2 then return outQuad(t * 2, b, c / 2, d) end

    return inQuad((t * 2) - d, b + c / 2, c / 2, d)
end

-- cubic
local function inCubic(t, b, c, d)
    return c * pow(t / d, 3) + b
end

local function outCubic(t, b, c, d)
    return c * (pow(t / d - 1, 3) + 1) + b
end

local function inOutCubic(t, b, c, d)
    t = t / d * 2
    if t < 1 then return c / 2 * t * t * t + b end
    t = t - 2

    return c / 2 * (t * t * t + 2) + b
end

local function outInCubic(t, b, c, d)
    if t < d / 2 then return outCubic(t * 2, b, c / 2, d) end

    return inCubic((t * 2) - d, b + c / 2, c / 2, d)
end

-- quart
local function inQuart(t, b, c, d)
    return c * pow(t / d, 4) + b
end

local function outQuart(t, b, c, d)
    return -c * (pow(t / d - 1, 4) - 1) + b
end

local function inOutQuart(t, b, c, d)
    t = t / d * 2
    if t < 1 then return c / 2 * pow(t, 4) + b end

    return -c / 2 * (pow(t - 2, 4) - 2) + b
end

local function outInQuart(t, b, c, d)
    if t < d / 2 then return outQuart(t * 2, b, c / 2, d) end

    return inQuart((t * 2) - d, b + c / 2, c / 2, d)
end

-- quint
local function inQuint(t, b, c, d)
    return c * pow(t / d, 5) + b
end

local function outQuint(t, b, c, d)
    return c * (pow(t / d - 1, 5) + 1) + b
end

local function inOutQuint(t, b, c, d)
    t = t / d * 2
    if t < 1 then return c / 2 * pow(t, 5) + b end

    return c / 2 * (pow(t - 2, 5) + 2) + b
end

local function outInQuint(t, b, c, d)
    if t < d / 2 then return outQuint(t * 2, b, c / 2, d) end

    return inQuint((t * 2) - d, b + c / 2, c / 2, d)
end

-- sine
local function inSine(t, b, c, d)
    return -c * cos(t / d * (pi / 2)) + c + b
end

local function outSine(t, b, c, d)
    return c * sin(t / d * (pi / 2)) + b
end

local function inOutSine(t, b, c, d)
    return -c / 2 * (cos(pi * t / d) - 1) + b
end

local function outInSine(t, b, c, d)
    if t < d / 2 then return outSine(t * 2, b, c / 2, d) end

    return inSine((t * 2) - d, b + c / 2, c / 2, d)
end

-- expo
local function inExpo(t, b, c, d)
    if t == 0 then return b end

    return c * pow(2, 10 * (t / d - 1)) + b - c * 0.001
end

local function outExpo(t, b, c, d)
    if t == d then return b + c end

    return c * 1.001 * (-pow(2, -10 * t / d) + 1) + b
end

local function inOutExpo(t, b, c, d)
    if t == 0 then return b end
    if t == d then return b + c end
    t = t / d * 2
    if t < 1 then return c / 2 * pow(2, 10 * (t - 1)) + b - c * 0.0005 end

    return c / 2 * 1.0005 * (-pow(2, -10 * (t - 1)) + 2) + b
end

local function outInExpo(t, b, c, d)
    if t < d / 2 then return outExpo(t * 2, b, c / 2, d) end

    return inExpo((t * 2) - d, b + c / 2, c / 2, d)
end

-- circ
local function inCirc(t, b, c, d)
    return -c * (sqrt(1 - pow(t / d, 2)) - 1) + b
end

local function outCirc(t, b, c, d)
    return c * sqrt(1 - pow(t / d - 1, 2)) + b
end

local function inOutCirc(t, b, c, d)
    t = t / d * 2
    if t < 1 then return -c / 2 * (sqrt(1 - t * t) - 1) + b end
    t = t - 2

    return c / 2 * (sqrt(1 - t * t) + 1) + b
end

local function outInCirc(t, b, c, d)
    if t < d / 2 then return outCirc(t * 2, b, c / 2, d) end

    return inCirc((t * 2) - d, b + c / 2, c / 2, d)
end

-- elastic
local function calculatePAS(p, a, c, d)
    p, a = p or d * 0.3, a or 0
    if a < abs(c) then return p, c, p / 4 end -- p, a, s
    -- p,a,s

    return p, a, p / (2 * pi) * asin(c / a)
end

local function inElastic(t, b, c, d, a, p)
    local s
    if t == 0 then return b end
    t = t / d
    if t == 1 then return b + c end
    p, a, s = calculatePAS(p, a, c, d)
    t = t - 1

    return -(a * pow(2, 10 * t) * sin((t * d - s) * (2 * pi) / p)) + b
end

local function outElastic(t, b, c, d, a, p)
    local s
    if t == 0 then return b end
    t = t / d
    if t == 1 then return b + c end
    p, a, s = calculatePAS(p, a, c, d)

    return a * pow(2, -10 * t) * sin((t * d - s) * (2 * pi) / p) + c + b
end

local function inOutElastic(t, b, c, d, a, p)
    local s
    if t == 0 then return b end
    t = t / d * 2
    if t == 2 then return b + c end
    p, a, s = calculatePAS(p, a, c, d)
    t = t - 1
    if t < 0 then return -0.5 * (a * pow(2, 10 * t) * sin((t * d - s) * (2 * pi) / p)) + b end

    return a * pow(2, -10 * t) * sin((t * d - s) * (2 * pi) / p) * 0.5 + c + b
end

local function outInElastic(t, b, c, d, a, p)
    if t < d / 2 then return outElastic(t * 2, b, c / 2, d, a, p) end

    return inElastic((t * 2) - d, b + c / 2, c / 2, d, a, p)
end

-- back
local function inBack(t, b, c, d, s)
    s = s or 1.70158
    t = t / d

    return c * t * t * ((s + 1) * t - s) + b
end

local function outBack(t, b, c, d, s)
    s = s or 1.70158
    t = t / d - 1

    return c * (t * t * ((s + 1) * t + s) + 1) + b
end

local function inOutBack(t, b, c, d, s)
    s = (s or 1.70158) * 1.525
    t = t / d * 2
    if t < 1 then return c / 2 * (t * t * ((s + 1) * t - s)) + b end
    t = t - 2

    return c / 2 * (t * t * ((s + 1) * t + s) + 2) + b
end

local function outInBack(t, b, c, d, s)
    if t < d / 2 then return outBack(t * 2, b, c / 2, d, s) end

    return inBack((t * 2) - d, b + c / 2, c / 2, d, s)
end

-- bounce
local function outBounce(t, b, c, d)
    t = t / d
    if t < 1 / 2.75 then return c * (7.5625 * t * t) + b end

    if t < 2 / 2.75 then
        t = t - (1.5 / 2.75)

        return c * (7.5625 * t * t + 0.75) + b
    elseif t < 2.5 / 2.75 then
        t = t - (2.25 / 2.75)

        return c * (7.5625 * t * t + 0.9375) + b
    end

    t = t - (2.625 / 2.75)

    return c * (7.5625 * t * t + 0.984375) + b
end

local function inBounce(t, b, c, d)
    return c - outBounce(d - t, 0, c, d) + b
end

local function inOutBounce(t, b, c, d)
    if t < d / 2 then return inBounce(t * 2, 0, c, d) * 0.5 + b end

    return outBounce(t * 2 - d, 0, c, d) * 0.5 + c * .5 + b
end

local function outInBounce(t, b, c, d)
    if t < d / 2 then return outBounce(t * 2, b, c / 2, d) end

    return inBounce((t * 2) - d, b + c / 2, c / 2, d)
end

tween.easing = {
    linear = linear,
    inQuad = inQuad,
    outQuad = outQuad,
    inOutQuad = inOutQuad,
    outInQuad = outInQuad,
    inCubic = inCubic,
    outCubic = outCubic,
    inOutCubic = inOutCubic,
    outInCubic = outInCubic,
    inQuart = inQuart,
    outQuart = outQuart,
    inOutQuart = inOutQuart,
    outInQuart = outInQuart,
    inQuint = inQuint,
    outQuint = outQuint,
    inOutQuint = inOutQuint,
    outInQuint = outInQuint,
    inSine = inSine,
    outSine = outSine,
    inOutSine = inOutSine,
    outInSine = outInSine,
    inExpo = inExpo,
    outExpo = outExpo,
    inOutExpo = inOutExpo,
    outInExpo = outInExpo,
    inCirc = inCirc,
    outCirc = outCirc,
    inOutCirc = inOutCirc,
    outInCirc = outInCirc,
    inElastic = inElastic,
    outElastic = outElastic,
    inOutElastic = inOutElastic,
    outInElastic = outInElastic,
    inBack = inBack,
    outBack = outBack,
    inOutBack = inOutBack,
    outInBack = outInBack,
    inBounce = inBounce,
    outBounce = outBounce,
    inOutBounce = inOutBounce,
    outInBounce = outInBounce
}

-- private stuff
local function copyTables(destination, keysTable, valuesTable)
    valuesTable = valuesTable or keysTable
    local mt = getmetatable(keysTable)

    if mt and getmetatable(destination) == nil then
        setmetatable(destination, mt)
    end

    for k, v in pairs(keysTable) do
        if type(v) == 'table' then
            destination[k] = copyTables({}, v, valuesTable[k])
        else
            destination[k] = valuesTable[k]
        end
    end

    return destination
end

local function checkSubjectAndTargetRecursively(subject, target, path)
    path = path or {}
    local targetType, newPath

    for k, targetValue in pairs(target) do
        targetType, newPath = type(targetValue), copyTables({}, path)
        table.insert(newPath, tostring(k))

        if targetType == 'number' then
            assert(type(subject[k]) == 'number', "Parameter '" .. table.concat(newPath, '/') .. "' is missing from subject or isn't a number")
        elseif targetType == 'table' then
            checkSubjectAndTargetRecursively(subject[k], targetValue, newPath)
        else
            assert(targetType == 'number', "Parameter '" .. table.concat(newPath, '/') .. "' must be a number or table of numbers")
        end
    end
end

local function checkNewParams(duration, subject, target, easing)
    assert(type(duration) == 'number' and duration > 0, "duration must be a positive number. Was " .. tostring(duration))
    local tsubject = type(subject)
    assert(tsubject == 'table' or tsubject == 'userdata' or tsubject == 'Panel', "subject must be a table or userdata. Was " .. tostring(subject))
    assert(type(target) == 'table', "target must be a table. Was " .. tostring(target))
    assert(type(easing) == 'function', "easing must be a function. Was " .. tostring(easing))
    checkSubjectAndTargetRecursively(subject, target)
end

local function getEasingFunction(easing)
    easing = easing or "linear"

    if type(easing) == 'string' then
        local name = easing
        easing = tween.easing[name]

        if type(easing) ~= 'function' then
            error("The easing function name '" .. name .. "' is invalid")
        end
    end

    return easing
end

local function performEasingOnSubject(subject, target, initial, clock, duration, easing)
    local t, b, c, d

    for k, v in pairs(target) do
        if type(v) == 'table' then
            performEasingOnSubject(subject[k], v, initial[k], clock, duration, easing)
        else
            t, b, c, d = clock, initial[k], v - initial[k], duration
            subject[k] = easing(t, b, c, d)
        end
    end
end

-- Tween methods
local Tween = {}

local Tween_mt = {
    __index = Tween
}

function Tween:set(clock)
    assert(type(clock) == 'number', "clock must be a positive number or 0")
    self.initial = self.initial or copyTables({}, self.target, self.subject)
    self.clock = clock

    if self.clock <= 0 then
        self.clock = 0
        copyTables(self.subject, self.initial)
    elseif self.clock >= self.duration then
        -- the tween has expired
        self.clock = self.duration
        copyTables(self.subject, self.target)
    else
        performEasingOnSubject(self.subject, self.target, self.initial, self.clock, self.duration, self.easing)
    end

    return self.clock >= self.duration
end

function Tween:reset()
    return self:set(0)
end

function Tween:update(dt)
    assert(type(dt) == 'number', "dt must be a number")

    return self:set(self.clock + dt)
end

-- Public interface
function tween.new(duration, subject, target, easing)
    easing = getEasingFunction(easing)
    checkNewParams(duration, subject, target, easing)

    return setmetatable({
        duration = duration,
        subject = subject,
        target = target,
        easing = easing,
        clock = 0
    }, Tween_mt)
end

onyx.tween = tween
--addons/onyx_framework_2/lua/onyx/ui/core/cl_panel_functions.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/traits/cl_hover.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_image.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/languages/cl_german.lua:
--[[
 
Ersteller: tochnonement
E-Mail: tochnonement@gmail.com
 
Übersetzer: thestarhd
Profil: https://www.gmodstore.com/users/76561198801156110
 
05/01/2024
 
--]]
 
local LANG = {}
 
-- REITER
LANG.f4_jobs_u = 'JOBS'
LANG.f4_jobs_desc = 'Wähle deinen Weg'
 
LANG.f4_dashboard_u = 'DASHBOARD'
LANG.f4_dashboard_desc = 'Allgemeine Informationen'
 
LANG.f4_shop_u = 'SHOP'
LANG.f4_shop_desc = 'Kaufe beliebige Waren'
 
LANG.f4_admin_u = 'ADMIN'
LANG.f4_admin_desc = 'Addon konfigurieren'
 
LANG.f4_donate_u = 'SPENDEN'
LANG.f4_donate_desc = 'Unterstütze den Server'
 
LANG.addon_settings_u = 'EINSTELLUNGEN'
LANG.addon_settings_desc = 'Addon konfigurieren'
 
LANG.addon_stats_u = 'STATISTIKEN'
LANG.addon_stats_desc = 'Addon-Statistiken überprüfen'
 
LANG.addon_return_u = 'ZURÜCK'
LANG.addon_return_desc = 'Zurück zum Rahmen'
 
-- Sonstiges
LANG.f4_salary = 'Gehalt'
LANG.f4_price = 'Preis'
LANG.f4_loading = 'Laden'
LANG.f4_purchases = 'Einkäufe'
LANG.f4_switches = 'Schalter'
LANG.f4_unavailable = 'Nicht verfügbar'
LANG.f4_description_u = 'BESCHREIBUNG'
LANG.f4_weapons_u = 'WAFFEN'
LANG.f4_entities_u = 'ENTITÄTEN'
LANG.f4_ammo_u = 'MUNITION'
LANG.f4_food_u = 'NAHRUNG'
LANG.f4_shipments_u = 'SENDUNGEN'
LANG.f4_become_u = 'WERDE'
LANG.f4_create_vote_u = 'UMFRAGE ERSTELLEN'
LANG.f4_general_u = 'ALLGEMEIN'
LANG.f4_police_u = 'POLIZEI'
LANG.f4_mayor_u = 'BÜRGERMEISTER'
LANG.f4_confirm_u = 'BESTÄTIGEN'
LANG.f4_cancel_u = 'ABBRECHEN'
LANG.f4_mostpopular_u = 'AM BELIEBTESTEN'
LANG.f4_chart_u = 'DIAGRAMM'
LANG.f4_loading_u = 'LADEN'
LANG.f4_empty_u = 'LEER'
 
LANG.f4_playersonline_u = 'SPIELER ONLINE'
LANG.f4_totalmoney_u = 'GESAMTGELD'
LANG.f4_staffonline_u = 'TEAMMITGLIEDER ONLINE'
LANG.f4_actions_u = 'AKTIONEN'
 
-- Aktionen
LANG['f4_action_input_amount'] = 'Menge eingeben'
LANG['f4_action_input_text'] = 'Text eingeben'
LANG['f4_action_input_reason'] = 'Grund eingeben'
LANG['f4_action_choose_player'] = 'Spieler auswählen'
 
LANG['f4_action_confirm_action'] = 'Aktion bestätigen'
LANG['f4_action_drop_money'] = 'Geld fallen lassen'
LANG['f4_action_give_money'] = 'Geld geben'
LANG['f4_action_change_name'] = 'Namen ändern'
LANG['f4_action_drop_weapon'] = 'Waffe fallen lassen'
LANG['f4_action_sell_doors'] = 'Alle Türen verkaufen'
 
LANG['f4_action_warrant'] = 'Durchsuchungsbefehl erstellen'
LANG['f4_action_wanted'] = 'Gesucht'
 
LANG['f4_toggle_lockdown'] = 'Lockdown umschalten'
LANG['f4_give_license'] = 'Lizenz geben'
 
-- Phrasen
LANG['f4_search_text'] = 'Nach Name suchen...'
 
-- Einstellungen
LANG['f4.option_url_desc'] = 'URL eingeben (leer lassen, um zu deaktivieren)'
 
LANG['f4.discord_url.name'] = 'Discord'
LANG['f4.discord_url.desc'] = 'Trete unserem Discord-Server bei'
 
LANG['f4.forum_url.name'] = 'Forum'
LANG['f4.forum_url.desc'] = 'Triff die Community'
 
LANG['f4.steam_url.name'] = 'Steam'
LANG['f4.steam_url.desc'] = 'Trete unserer Steam-Gruppe bei'
 
LANG['f4.rules_url.name'] = 'Regeln'
LANG['f4.rules_url.desc'] = 'Kenne die Regeln'
 
LANG['f4.donate_url.name'] = 'Spenden'
 
LANG['f4.website_ingame.name'] = 'Browser'
LANG['f4.website_ingame.desc'] = 'Verwende den Ingame-Browser, um die Website-URL zu öffnen'
 
LANG['f4.title.name'] = 'Titel'
LANG['f4.title.desc'] = 'Der Titel für den Rahmen'
 
LANG['f4.hide_donate_tab.name'] = 'Spenden-Tab ausblenden'
LANG['f4.hide_donate_tab.desc'] = 'Blendet den Tab Spenden aus'
 
LANG['f4.edit_job_colors.name'] = 'Jobfarben bearbeiten'
LANG['f4.edit_job_colors.desc'] = 'Sollen Jobfarben heller angezeigt werden'
 
LANG['f4.hide_admins.name'] = 'Admins-Abschnitt ausblenden'
LANG['f4.hide_admins.desc'] = 'Blendet den Dashboard-Admin-List-Abschnitt aus'
 
LANG['f4.admin_on_duty.name'] = 'Admin-Job aktiviert'
LANG['f4.admin_on_duty.desc'] = 'Zeigt als Admin nur eine Person mit einem bestimmten Job an'
 
LANG['f4.admin_on_duty_job.name'] = 'Admin-Jobname'
LANG['f4.admin_on_duty_job.desc'] = 'Der Jobname des Admins*'
 
LANG['f4.colored_items.name'] = 'Farbiger Verlauf'
LANG['f4.colored_items.desc'] = 'Aktiviere leichten Farbverlauf auf Gegenständen/Jobs'
 
LANG['f4.item_columns.name'] = 'Spalten'
LANG['f4.item_columns.desc'] = 'Die Anzahl der Spalten für Gegenstände'
 
LANG['f4.job_columns.name'] = 'Spalten'
LANG['f4.job_columns.desc'] = 'Die Anzahl der Spalten für Jobs'
 
LANG['f4.model_3d.name'] = '3D-Modelle'
LANG['f4.model_3d.desc'] = 'Aktiviere Echtzeit-Rendering für Item-/Job-Symbole'
 
LANG['f4.item_show_unavailable.name'] = 'Nicht verfügbare Gegenstände'
LANG['f4.item_show_unavailable.desc'] = 'Zeige Gegenstände an, die customCheck nicht bestanden haben'
 
LANG['f4.job_show_unavailable.name'] = 'Nicht verfügbare Jobs'
LANG['f4.job_show_unavailable.desc'] = 'Zeige Jobs an, die customCheck nicht bestanden haben'
 
LANG['f4.job_show_requirejob.name'] = 'Abhängige Jobs'
LANG['f4.job_show_requirejob.desc'] = 'Zeige Jobs an, die aufgrund des falschen Jobs des Spielers nicht gewählt werden können'
 
onyx.lang:AddPhrases('german', LANG)
--addons/onyx_f4/lua/onyx/modules/f4/languages/cl_russian.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/core/cl_core.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/core/sh_core.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/core/stats/sh_stats.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

03/01/2024

--]]

netchunk.Register('onyx.f4:SendStats')
--addons/onyx_f4/lua/onyx/modules/f4/ui/cl_admin_stats.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/languages/cl_english.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/languages/cl_english.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

14/08/2024

--]]

local LANG = {}

--[[
    .............
    General Words
]]--

LANG[ 'hud_status_wanted' ] = 'Wanted'
LANG[ 'hud_status_speaking' ] = 'Speaking'
LANG[ 'hud_status_typing' ] = 'Typing'
LANG[ 'props' ] = 'Props'
LANG[ 'close' ] = 'Close'
LANG[ 'alert' ] = 'Alert'
LANG[ 'message' ] = 'Message'
LANG[ 'unknown' ] = 'Unknown'
LANG[ 'accept' ] = 'Accept'
LANG[ 'deny' ] = 'Deny'
LANG[ 'none' ] = 'None'
LANG[ 'add' ] = 'Add'
LANG[ 'remove' ] = 'Remove'
LANG[ 'jobs' ] = 'Jobs'
LANG[ 'door' ] = 'Door'
LANG[ 'vehicle' ] = 'Vehicle'
LANG[ 'door_groups' ] = 'Door groups'
LANG[ 'display' ] = 'Display'
LANG[ 'general' ] = 'General'
LANG[ 'speedometer' ] = 'Speedometer'
LANG[ 'fuel' ] = 'Fuel'
LANG[ 'vote' ] = 'Vote'
LANG[ 'question' ] = 'Question'

--[[
    .......
    Timeout
]]--

LANG[ 'timeout_title' ] = 'CONNECTION LOST'
LANG[ 'timeout_info' ] = 'Server is unavailable now, we are sorry'
LANG[ 'timeout_status' ] = 'You will be reconnected in %d seconds'

--[[
    ......
    Themes
]]--

LANG[ 'hud.theme.default.name' ] = 'Default'
LANG[ 'hud.theme.forest.name' ] = 'Forest'
LANG[ 'hud.theme.violet_night.name' ] = 'Violet Night'
LANG[ 'hud.theme.rustic_ember.name' ] = 'Rustic Ember'
LANG[ 'hud.theme.green_apple.name' ] = 'Green Apple'
LANG[ 'hud.theme.lavender.name' ] = 'Lavender'
LANG[ 'hud.theme.elegance.name' ] = 'Elegance'
LANG[ 'hud.theme.mint_light.name' ] = 'Mint'
LANG[ 'hud.theme.gray.name' ] = 'Gray'
LANG[ 'hud.theme.rose_garden.name' ] = 'Rose Garden'
LANG[ 'hud.theme.ocean_wave.name' ] = 'Ocean Wave'
LANG[ 'hud.theme.sky_blue.name' ] = 'Sky Blue'
LANG[ 'hud.theme.golden_dawn.name' ] = 'Golden Dawn'

--[[
    ....
    Help
    - Full phrase: "Type <command> to open settings"
]]

LANG[ 'hud_help_type' ] = 'Type'
LANG[ 'hud_help_to' ] = 'to open settings'

--[[
    .............
    3D2D Doors
]]--

LANG[ 'door_purchase' ] = 'Purchase {object}'
LANG[ 'door_sell' ] = 'Sell {object}'
LANG[ 'door_addowner' ] = 'Add owner'
LANG[ 'door_rmowner' ] = 'Remove owner'
LANG[ 'door_rmowner_help' ] = 'Choose the player you want to revoke ownership from'
LANG[ 'door_addowner_help' ] = 'Choose the player you want to grant ownership to'
LANG[ 'door_title' ] = 'Set title'
LANG[ 'door_title_help' ] = 'What title you want to set?'
LANG[ 'door_admin_disallow' ] = 'Disallow ownership'
LANG[ 'door_admin_allow' ] = 'Allow ownership'
LANG[ 'door_admin_edit' ] = 'Edit access'
LANG[ 'door_owned' ] = 'Private Property'
LANG[ 'door_unowned' ] = 'For Sale'

LANG[ 'hud_door_help' ] = 'Press {bind} to purchase for {price}'
LANG[ 'hud_door_owner' ] = 'Owner: {name}'
LANG[ 'hud_door_allowed' ] = 'Allowed to own'
LANG[ 'hud_door_coowners' ] = 'Coowners'
LANG[ 'hud_and_more' ] = 'and more...'

--[[
    .........
    Uppercase
]]--

LANG[ 'reconnect_u' ] = 'RECONNECT'
LANG[ 'disconnect_u' ] = 'DISCONNECT'
LANG[ 'settings_u' ] = 'SETTINGS'
LANG[ 'configuration_u' ] = 'CONFIGURATION'
LANG[ 'introduction_u' ] = 'INTRODUCTION'

--[[
    .........
    Lowercase
]]--

LANG[ 'seconds_l' ] = 'seconds'
LANG[ 'minutes_l' ] = 'minutes'

--[[
    .............
    Configuration
]]--

LANG[ 'hud.timeout.name' ] = 'Timeout Duration'
LANG[ 'hud.timeout.desc' ] = 'How many seconds before auto-reconnection'

LANG[ 'hud.alert_queue.name' ] = 'Alert Queue'
LANG[ 'hud.alert_queue.desc' ] = 'Should alerts be placed in queue'

LANG[ 'hud.props_counter.name' ] = 'Props Counter'
LANG[ 'hud.props_counter.desc' ] = 'Show props counter'

LANG[ 'hud.main_avatar_mode.name' ] = 'Main Avatar Type'
LANG[ 'hud.main_avatar_mode.desc' ] = 'Choose the type'

LANG[ 'hud.voice_avatar_mode.name' ] = 'Voice Avatar Type'
LANG[ 'hud.voice_avatar_mode.desc' ] = 'Choose the type'

LANG[ 'hud.restrict_themes.name' ] = 'Restrict Themes'
LANG[ 'hud.restrict_themes.desc' ] = 'Restrict players to choose themes'

LANG[ 'hud.speedometer_mph.name' ] = 'Use Miles'
LANG[ 'hud.speedometer_mph.desc' ] = 'Switch units to miles per hour'

LANG[ 'hud.speedometer_max_speed.name' ] = 'Max Default Speed'
LANG[ 'hud.speedometer_max_speed.desc' ] = 'The max speed for the speedometer'

LANG[ 'hud_should_draw' ] = 'Should draw the element'
LANG[ 'hud.main.name' ] = 'Main HUD'
LANG[ 'hud.ammo.name' ] = 'Ammo'
LANG[ 'hud.agenda.name' ] = 'Agenda'
LANG[ 'hud.alerts.name' ] = 'Alerts'
LANG[ 'hud.pickup_history.name' ] = 'Pickup History'
LANG[ 'hud.level.name' ] = 'Level'
LANG[ 'hud.voice.name' ] = 'Voice Panels'
LANG[ 'hud.overhead_health.name' ] = '3D2D Overhead Health'
LANG[ 'hud.overhead_armor.name' ] = '3D2D Overhead Armor'
LANG[ 'hud.vehicle.name' ] = 'Vehicle HUD'

--[[
    ........
    Settings
]]--

LANG[ 'hud.theme.name' ] = 'Theme'
LANG[ 'hud.theme.desc' ] = 'Choose the HUD theme'

LANG[ 'hud.scale.name' ] = 'Scale'
LANG[ 'hud.scale.desc' ] = 'Adjust the scale of the HUD'

LANG[ 'hud.roundness.name' ] = 'Roundness'
LANG[ 'hud.roundness.desc' ] = 'Adjust the roundness of the HUD'

LANG[ 'hud.margin.name' ] = 'Margin'
LANG[ 'hud.margin.desc' ] = 'The distance between the HUD and the edges'

LANG[ 'hud.icons_3d.name' ] = '3D Models'
LANG[ 'hud.icons_3d.desc' ] = 'Render model icons in 3D'

LANG[ 'hud.compact.name' ] = 'Compact Mode'
LANG[ 'hud.compact.desc' ] = 'Enable the compact mode'

LANG[ 'hud.speedometer_blur.name' ] = 'Speedometer Blur'
LANG[ 'hud.speedometer_blur.desc' ] = 'Enable the blur for the speedometer'

LANG[ 'hud.3d2d_max_details.name' ] = 'Max 3D2D Details'
LANG[ 'hud.3d2d_max_details.desc' ] = 'The maximum amount of detailed info renders'

--[[
    ......
    Status
]]--

LANG[ 'hud_lockdown' ] = 'LOCKDOWN'
LANG[ 'hud_lockdown_help' ] = 'Please return to your homes!'

LANG[ 'hud_wanted' ] = 'WANTED'
LANG[ 'hud_wanted_help' ] = 'Reason: {reason}'

LANG[ 'hud_arrested' ] = 'ARRESTED'
LANG[ 'hud_arrested_help' ] = 'You will be released in {time}'

onyx.lang:AddPhrases( 'english', LANG )
--addons/bb_onyx_hud/lua/onyx/modules/hud/languages/cl_german.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/core/cl_theme.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/cfg/cl_level_systems.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_voice_chat.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/languages/cl_french.lua:
--[[

Author: VeaTime
Steam Profile: https://steamcommunity.com/id/VeaTime/

07/03/2024

--]]

local LANG = {}

-- Phrases
LANG['copied_clipboard'] = 'Copier dans le presse-papier'
LANG['scoreboard_search'] = 'Recherche... (Nom/SteamID)'
LANG['you'] = 'Toi'
LANG['friend'] = 'Amie'

-- Columns
LANG['scoreboard_col_team'] = 'Team'
LANG['scoreboard_col_job'] = 'Métier'
LANG['scoreboard_col_money'] = 'Argent'
LANG['scoreboard_col_rank'] = 'Rank'
LANG['scoreboard_col_karma'] = 'Karma'
LANG['scoreboard_col_playtime'] = 'Playtime'
LANG['scoreboard_col_health'] = 'Santé'
LANG['scoreboard_col_level'] = 'Niveau'
LANG['scoreboard_col_none'] = 'Rien'
LANG['scoreboard_col_gang'] = 'Gang'
LANG['scoreboard_col_ashop_badges'] = 'Badges'

-- Name Effects
LANG['scoreboard_eff_default'] = 'Défaut'
LANG['scoreboard_eff_glow'] = 'Briller'
LANG['scoreboard_eff_rainbow'] = 'Arc en ciel'

-- Buttons
LANG['scoreboard_btn_profile'] = 'Ouvrir le profile'
LANG['scoreboard_btn_freeze'] = 'Freeze'
LANG['scoreboard_btn_goto'] = 'Goto'
LANG['scoreboard_btn_bring'] = 'Bring'
LANG['scoreboard_btn_return'] = 'Return'
LANG['scoreboard_btn_respawn'] = 'Respawn'
LANG['scoreboard_btn_slay'] = 'Slay'

-- Words
LANG['rank_id'] = 'Rank Identifier'
LANG['name'] = 'Nom'
LANG['effect'] = 'Effet'
LANG['color'] = 'Couleur'
LANG['preview'] = 'Aperçu'
LANG['creation'] = 'Creation'
LANG['save'] = 'Sauvegarder'
LANG['dead'] = 'Mort'
LANG['create_new'] = 'Créer un nouveau'
LANG['column'] = 'Colonne'

-- Settings
LANG['addon_settings_u'] = 'PARAMÈTRES'
LANG['scoreboard_ranks_u'] = 'RANKS'
LANG['scoreboard_columns_u'] = 'COLONNES'

LANG['scoreboard.title.name'] = 'Titre'
LANG['scoreboard.title.desc'] = 'Saisissez le titre'

LANG['scoreboard.group_teams.name'] = 'Group Teams'
LANG['scoreboard.group_teams.desc'] = '(DarkRP) Group teams par catégories de métier'

LANG['scoreboard.colored_players.name'] = 'Dégradé colorisé'
LANG['scoreboard.colored_players.desc'] = 'Afficher le dégradé colorisé sur la ligne du joueur'

LANG['scoreboard.blur.name'] = 'Theme Blur'
LANG['scoreboard.blur.desc'] = 'Activer le theme blur'

onyx.lang:AddPhrases('french', LANG)
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/core/integrations/sh_brick_gangs.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/ui/cl_rank_editor.lua:
return gluapack()()
--lua/autorun/openpermissions.lua:
return gluapack()()
--addons/pcasino/lua/perfectcasino/derma/cl_fonts.lua:
return gluapack()()
--addons/[binbon]misc/lua/autorun/pd2_hoxton.lua:

list.Set( "PlayerOptionsModel", "Hoxton", 	"models/player/pd2_hoxton_p.mdl" );
--addons/[binbon]misc/lua/autorun/pd2_wolf.lua:
return gluapack()()
--lua/autorun/phil_coulson.lua:
return gluapack()()
--lua/autorun/polisozelharekat_npc_rebs.lua:
-- Don't try to edit this file if you're trying to add new NPCs.
-- Just make a new file and copy the format below.

local Category = "Turk Polis Ozel Harekat"

local NPC = {
	Name = "POH Maskeli",
	Class = "npc_citizen",
	Category = Category,
	Model = "models/icpd/swat/male_gta_masked.mdl",
	Health = 110,
	KeyValues = { citizentype = 4 },
	Weapons = { "weapon_shotgun", "weapon_smg1", "weapon_pistol", "weapon_ar2" }
}
list.Set( "NPC", "turk_polisozelharekat_male_maskeli", NPC )

local NPC = {
	Name = "POH Male 01",
	Class = "npc_citizen",
	Category = Category,
	Model = "models/icpd/swat/male_01.mdl",
	Health = 110,
	KeyValues = { citizentype = 4 },
	Weapons = { "weapon_shotgun", "weapon_smg1", "weapon_pistol", "weapon_ar2" }
}
list.Set( "NPC", "turk_polisozelharekat_male_01", NPC )

local NPC = {
	Name = "POH Male 02",
	Class = "npc_citizen",
	Category = Category,
	Model = "models/icpd/swat/male_02.mdl",
	Health = 110,
	KeyValues = { citizentype = 4 },
	Weapons = { "weapon_shotgun", "weapon_smg1", "weapon_pistol", "weapon_ar2" }
}
list.Set( "NPC", "turk_polisozelharekat_male_02", NPC )

local NPC = {
	Name = "POH Male 03",
	Class = "npc_citizen",
	Category = Category,
	Model = "models/icpd/swat/male_03.mdl",
	Health = 110,
	KeyValues = { citizentype = 4 },
	Weapons = { "weapon_shotgun", "weapon_smg1", "weapon_pistol", "weapon_ar2" }
}
list.Set( "NPC", "turk_polisozelharekat_male_03", NPC )

local NPC = {
	Name = "POH Male 04",
	Class = "npc_citizen",
	Category = Category,
	Model = "models/icpd/swat/male_04.mdl",
	Health = 110,
	KeyValues = { citizentype = 4 },
	Weapons = { "weapon_shotgun", "weapon_smg1", "weapon_pistol", "weapon_ar2" }
}
list.Set( "NPC", "turk_polisozelharekat_male_04", NPC )

local NPC = {
	Name = "POH Male 05",
	Class = "npc_citizen",
	Category = Category,
	Model = "models/icpd/swat/male_05.mdl",
	Health = 110,
	KeyValues = { citizentype = 4 },
	Weapons = { "weapon_shotgun", "weapon_smg1", "weapon_pistol", "weapon_ar2" }
}
list.Set( "NPC", "turk_polisozelharekat_male_05", NPC )

local NPC = {
	Name = "POH Male 06",
	Class = "npc_citizen",
	Category = Category,
	Model = "models/icpd/swat/male_06.mdl",
	Health = 110,
	KeyValues = { citizentype = 4 },
	Weapons = { "weapon_shotgun", "weapon_smg1", "weapon_pistol", "weapon_ar2" }
}
list.Set( "NPC", "turk_polisozelharekat_male_06", NPC )

local NPC = {
	Name = "POH Male 07",
	Class = "npc_citizen",
	Category = Category,
	Model = "models/icpd/swat/male_07.mdl",
	Health = 110,
	KeyValues = { citizentype = 4 },
	Weapons = { "weapon_shotgun", "weapon_smg1", "weapon_pistol", "weapon_ar2" }
}
list.Set( "NPC", "turk_polisozelharekat_male_07", NPC )

local NPC = {
	Name = "POH Male 08",
	Class = "npc_citizen",
	Category = Category,
	Model = "models/icpd/swat/male_08.mdl",
	Health = 110,
	KeyValues = { citizentype = 4 },
	Weapons = { "weapon_shotgun", "weapon_smg1", "weapon_pistol", "weapon_ar2" }
}
list.Set( "NPC", "turk_polisozelharekat_male_08", NPC )

local NPC = {
	Name = "POH Male 09",
	Class = "npc_citizen",
	Category = Category,
	Model = "models/icpd/swat/male_09.mdl",
	Health = 110,
	KeyValues = { citizentype = 4 },
	Weapons = { "weapon_shotgun", "weapon_smg1", "weapon_pistol", "weapon_ar2" }
}
list.Set( "NPC", "turk_polisozelharekat_male_09", NPC )
--addons/undertale/lua/psa_undertale/resources_01.lua:
-- This script is copyright of !cake, STEAM_0:1:19269760, http://steamcommunity.com/profiles/76561197998805249
-- Undertale is copyright of Toby Fox
-- Undertale audio samples are copyright of Toby Fox

PSA.Undertale.Resources.audio_000029ec_int16_44100hz_mono = "]\x00\x00\x01\x00t2\x00\x00\x00\x00\x00\x00\x00V\x00A5\xa0)\xc3\xffY\xf6\xd8\xd3\x1b\x06\xd5\x84\xb0\x98\x9e\x8d\"\x97\x130\xe0\xc4\xac\xd7\xa7\xf5\xb1a[\xf4\xfbs\x82L:\x83mw\x1bL\xe9x\xb1\"#?\x14\xc3\xb2\x91\x01\xb6\xaf\xb3\x97\x8f\x98\xe8 \x04Bm\xf2\xbf//\x11\xdc#8\xd5~\xf8\x92K>\xcc\x06\xf3X\xe8\xa8F\xa8@l$\x17\xf1\xbb\x94\xe6\x05\x0a\xfc\xd3\x8b\x1d\x87)Es\x0ax\xcc%\x87\xf24\xa6\xcf\xb7t\x8c\xfc\xf2a\xd9u\x02\xf5\xb6\x8d\xffN\xaf\xdc#,\xbf=\xa0\x96^\x83$\xc9\x98=zv#\xfe\x15s\x93\xa5\xb3\xd0\x83r\xa1ST\xd4Z\xa8,\xbc\x98\xa0<\xc3u\xfe\xc0K\x0cw#\xe0\xd8\x9c\xd1K$ \xa4>\xea8\xc2\xf9:;\x0a\x0e\xce\x16\x90\xaf\x19\xd8\xca\xfa\xadl\x83\x9b\x84\x83\xe6\x0d\xd8=\xd6\xd1\xa0\xe2\xef\xd0.\x96\xb6\xe9f\xcb\x08\x9afO\x8f\x0cg-\x14\x1d\x9d\xd4k\x8d\x12F\xb7\x18\x86\xef&()\x15&\xc8\x1a\x84\xf0eRHM\x89\xd0\xddeI\x15\x9eNw\x04\xb3d\xea-\x17\x08\xba\xe5\xae]\xd3F\x8c6[Ul\xe4L,)/\xa1e\xa8_d\xe6]{\xbc1\xa7\xa6Q\\[o\xba-\x0f\xf5\xeb\xe3 m\xc0\x1b\xf7\xba\xbf\xb6n/HZ\xdd:%c\xac\x1c\xb8\xad1c\x1c\x86\xd3\xc0\x14_\xdf\xc0\xf2d\x96\x01\xc8\xb3\xc6\xf1\x0a\x15\xda\x15\x1f\x18@\x00\xa9\x02\x1d\xc5\x83,\x94\xb0\x12\x87\xfe \xa9!O\xa7\xc7\x0d\xb6\x83\xf1\xb0oVW\xf0Fnb\xd8\x19t>\xa5U\xb7\xc1k1\xa5}\xe1\xe1gQ\xaa\xc4\xe7\xde\x82\xff\xb5\xf0\xe6M\xe1n\xc4\xe4\xa3\xb6\xef\xc66\xc7Y\xae\xcd`\xff\xdb\xa0!\xd7\x81\x81\xe8\x97Fp\x95\xb9\x06\xc5\xe4\xcf\xe7\x0d\x09e\x85\x95\xf1x\xa5\xcb)\xd5\xf1\xbd\x86!@\x09\x10\x90\xf3\xb6\x16\xca\xf2\xf5\xee\xc1\xffQn\x80\x1bi\x86?\x92S\x88~\xbd/\x95\x04\xd7\xef\xe7&\xb0\xbf\x7f\xd7C\xa9*#T\xa8\x91\x95}\xed\x1a\x02\xca\xe9f\x0dJ@\x96\x82\xb1d(\x90F_\x1f\xaf\"\x12\x1c?\xe3\x09-\xd7\xd8\xb5\xc2\xcc\xb6\x96F\x8a\xa9\xd2)\xbf\xa0\x9f\xdd\xf5\x80\x1d\x91\\\x93\xe3\x0c\x98\x1b\x97%\x90=A\xad(3\x8e\x1d\xba\xcc\xe4E\xa4\xfd\xca\xf4X\x84\xce\xc4\xc3\x89\x19+u\xa9u\xc0\x01&\xaa\x8cpv\xfdi\xbcf\xdd\xe2\x07$w%\x18*\xf2U\x81i&G\xbb`\xc0\x00\xca\xea\xb2\xe7\xe2\xa1\xef\xa5\xacn\xf4\xc5\xa6xaI7\x0e\xd1\xe9\xda\x0b\x15\x11\xc1\x8e\x93\xee\xfb\xd3\xeb\xe1bq\x8a\xd0\x9b\x04f\xe3\xf0/\xc3Yt\x92\xd6\xccB\xf1\xbaW\x1f\x10\xb5\xc1\x0a\xe1\xea\xb0\xf6\xcd4\xfc0f\x90@\x7f\xd5\xc2|\xba\xf2\xda\xa0\xa1\x02\x8b_X\x7f\x10S\xfa=\xb5\x91\xfdF}J\xcc&1\x9a\xa5\x12\\I\x03U\x8d\x97w\xfd\x87'[@\xdf}=\x95\xcc\xae\xaa\x94\x12\xf4G<\xce\xa4f\x0f\x92Na\xd0\x9a\x0aW\xe9\xe7,\xe9Ll\xe3\xf66\xd5M\xef\x0f[d\xf6\x0a\x97v(pd2\xec\x8bv\xdd\xc8Z\xf2|\xd3 \xb5\xe1K\xbd-\x9e\x9f\x18k\xcb\xde\x89\xa9}\xb4\x97\\\xb33v\xdd\xf3$\xb5T\x0a\xf9\xf9\x87\xb2\xf7\xa9\xb3;\"-\xd3\xf2m\xfbs\x8a\xb4\xe0$\xdep\xd0m\x9f\x8e.\xcd\x86}\xe1\xf5,q|k\xf7\xe4\x84(\xb50Z\xdc\x12\xe4>\xcf\xaeO\xd2Ol\xb9S\x8e9\xf3&\"f0\x13\x94G\xe4\x84\xe7\x04/\"\x83\xfc\xa0\xee\xa4\x86\\\xd96\x91\x90|5\xc5!\x90\xf8\xe0\xbdo`l\xfe\xe4.\xa5wv!\x18\xe6\x9f\xb6\x03\xf1B\xd6\xbbQ\xa4\x1c3\xf8\xdd\xce\xc6\x19\x1fB\xdc\xe6\xb5\xf6\xc2+,\xf9\xe8m.<.|\x1eG3\xed~8\xf6\x06\xdd\xaema\xcd$Tl\xb1\xe7\x8bE\x0a\x12\x181\x9a\x02\xcd\xc3\x7f\xda\xcfc\xfe\x1e\xeeP'\xb6R\x9dbJR\x99Z\x89(G\xa4X\xca\xdc)\x98\xfd\xef@\\r\xa6H\x1f\"\x12,;\xbctIY\xdb\xa8\xa5\x959\x06\xb8\x9cf||\xa8\x91\xd0M\xba\xc3\xccE\x01\x0b\x8e.\x1c$\x00I\xf1\x98v\x1f\x01zr\xd5Pj\xad\xab\xfd\xb3\x1b\xf4\xcfK1V\x08\x8f\xf5\xb16\xb1\xdeQ@\xa0\xcf\x08i\xec\x93z\x021Q \x09jN\xda\x9b\x9a+Y\x08ZL?\x803\x91N\x92n/\xb3.`\xb4C\x10\xfe\xf8?|\x15\\q\"\xc5)6KN\xa0gT\xdc\xe8\x83\x0e,\xcf\x0e\xe8z\xecfEJ\xe1\x14\xc3\xf2\xa0\x0ec\xf0\xa0\xcc@\x1e\xa5n\xa7}\xacT\xa0\x90\x03\x13>~\x9enQ\xde\xc5\xf1N(\xe8\xa1\xf4{i\x16\x80\x1f\xd5\xcc8\xacPs\xd5\xb9^\xc1\\Q\x0d\xd6W\xaa\x01\xcc\x19\xce]\x8b\xd3\x1eK\xf3\xc2\xebg3\x09\xd0\xf5a\x0a\xd9\xcao\xf3\x99\xc6\xc4L.\x8fzd\xa8\xed\xf5\xb2>\x1d\xf4/\xf6\xf9$\xbdb\xed\x91\x8f\xe5\x14\x80\xb2\x8b\xda\xa2g\xc0\xbd\xca\x00\x93j\x88\xd0\x88M\xb4\x12GX\xfa\xab\x97,\xf0\xe7\x92\xa1\xe6<\x0f~7\x0b\x1c\xb1\x87\xff\x9e\xc3x\xf39\xab\xff\xa1\xbc\x97B\x0c/`\x8a\xda\xcd\xb8\x19\xd9\xf82t\x9e\xaf\xf0\xabO\xef\x95\xb6A\x91\x90\xa6\x0d\x04\x96]\xeaL\x9e8*\xb5\x83\xa6\xaaP\xb6\x10\xca\xea_6\xc2\x05\x16.8\xdcd\xab\x84\x1c\xd3\x03TX4\x0f\xcd;\xba\x0dV\xba\x01P\xff?C\xc3d/'\xa7P\x8c\xff\xc43\xa8Fp\x8b\xc7.\xf4\xf6\x97u<f}\xce\x82\x95\xaa#\xd7A\xad\x03wt\x8b\xa0/\xa8\xa2\x18\xae\x1a~\xdc\xa0\xc9^\xcc\xafGw\x82\xa3\x8c\x9c\x0c#\x15\x00\xc1\xec\x09\x81\xf3\x16\x98~\xef\\\xe3\x96\x8d\x8e\\Vo\x11\xb5\xde\x92\xff\xbc\x92H\xad\xda\x04\xc5(\xc6\xabl\x84d\x0e.\\\xc4M\x81\xd6y\x069\x9a\xbb\xec\xfe\x1e\xa4\xdeG\xb9\xc4Q\xa6\xb5\x8b\xf5\xe6`ab\xf4\xba\x06\xack\xe3\xe3\xa1F\x8a\xdb\x8a<\xda\xb9\xb6+s\x848\xb3\xa7M\xa8\x83\x9f\xab(A\xd7\x88\xb2\xe8\xcf\xff\x9c\xcc\x01\x9fb\x1b\x8e^@\xe8\xd9p\x1f\x96V\xb5\xb0\xca\xd8\x05\"1EV\x1d\x07\xb7z0\x9f\xc2\xf3.\xc2\x1au@gM\xfd\xd9\xc5\xe8\xdd\xe8\xb24\xd2\x10\xa5\xd3:Z\xeb\xcf\xa59\xa5[\xfa\x1c\xf2o\x06\xccF\x0bI,j\x9f\x1a\xdd4\xe8+)\x05s\xaf\xd3\x91oHh\xbf\xc4d\xd8\x14z%\xba`\xffY\x00\x95\x0c\x87\xa0\x0b\xc6wq\xde\xe7\xde\xc5?\xab?{l\x86\xb1\xaez\xa8\xf9\xd5H\xcfh\xa8\xa3\x8b6\x8f\x00\x81\xf7=\xd8:\xc1\x988\x16\x8d\x0eQ\x0a\x05V,.\x1a:\xaf)\x0eA#\x13%\"\x06;\xa3Z\x90\x7fR\xfbu\x92s\xa2\xdf\x1f\xc0\xe5\xe6\xd1\xdc\xaa8,\xe8\xec\x1b\xa1!\x07\xa4\xab\xcc\x8e\x1d\xb8\x1e\xa1\xadU@\x9d0\xd2\x95\xbe\xa4`d\x05\xf2\x93N\xab,7\x9a\xb5?\xc8A>D6i\xa0\xce}\xaf\x82D\x9e\x00\xb9^Yu\xc1\x89\x12\xf0^ 4v\xd6\x8f\x89\xfa\xe8\x12\xfd\xd6\xa6\x90\xab\x86*\x14\x96X;\x7ff\xcasIaS\x8e\xf7\xee\x06%\xcaN\xe2\xed\x06/\xcd\xc4\xac\xed\x1cc,K\x00\xecz\xe3* \xd1\xf8v|O&\x93\xa8\\\xf8_\xfa\xb2b\xa4\x93H\xae\x97\xdc\xb4o\xaa!\xe2\xc9Nz8z\x94\xc8\xfa0\x0b\x9c\x02t\x04\x00\xaf\x02\xfci0_^\x8c\xa2^\x9c\xcd\xe8\x9an'\xa9my\x97\x10\xe6\x9c\xf5\x91F\xa5s\xdfV\x88r\\\xab\xb7C\xe4\xc5\xce\xd2dsm\xba\xae\x06\xd4\xe5\x80v}\xe3\xfbYk\xd5/_o\x87}\xcc\xa8\x8d\xc3\xfa\xcf=\x1a{\xb6\xe9~v\xc4I+-\xe9q\xbd\xf3\x82\x1a'!\xe7\xf8v0\xf0\xd9\xeb\xdbGG\x94\xb5\x88\xab\xbdeD\xa7r\xfc\xfc\xd3\xe6.\x94VW];\x09Ii\x872\x91\xfd5\xbe6,\xd9\x83\xc8~\x97\xd9\xc9jw\x87\xa3b\xd2\xd9\x17Y\xf4\xc5Uq\x8565\xdb \x80(\xde\x14\xf0\xf1\xe6\x0b\x95\xe5,\xca\xa6\x01.\x92fPP\x97\xf5/\xe0\x01q.\xe5\xedm\x00z\xfe\xa5\x9c4\x13\xae\xf7\xf0o\x14R9\xe3f\xa1\xcf\x11\xd3C\xfa\xfa\xbb\x8cp\xa5\x94\x14\x15h\xaa\xf5\x0el6\xc49\x1c$\x92]\xb790\x8a\xbbF\xffjHa\xafY\xcf\xb3K\xa4S\xdb\xbfzr\x04\x11\xf4\xae\x86\xee\x90\x1cSB\x84o\xb2g\xb8\xf8\xa0\xcf\xbd\x1f\x9d\xd2\x0f+\xef`\xf2\x02M\x98\xcef\xa3\xb8\x8d\x1d<M\xcc\xbcoe,\x88\x8a@?\xbe\xf5c6\xc0\xcc\xbc\xc5\xd4xZ;\x10W\xab\xa8\xd6Io\xdf\x83\x11\xc3v[G\xe8u\x04\x15\x8d8K[\xbe\xe8\xce2g\xa3\xd7\xcb&\xa73B\x02\xc2\x04\x86E\xfa%\xe7N\xa1~G\xe4/7\xf6\xe3ea\xff\xfe\x87\xe7L2H~O\xceu2_\x87t\xf4e\xf2!s\xa90\xf6\xdb/s6\xda\x89\x1c\x8dsI\x9dS\xa3\x0b\xcb\xc9\xa9\x04\xdc\x97\xa4\xec\x04\x80\xf2\x16\xf9\xd7I\x9f\x03LX\xc9_\xf9T\x85(\xabD\xb6\x97\x1f\xe6\x14\x0f1\x97\xaeen|w\xfd\xbe8\xc9\xdb\x19e&\xe6n\x19\x10\x7f\xf6\x0d\x9bGl\x9d\xe8v#\x14\xeb\xd3\xc5\xc0\x14\xe4H&\xf6H\xa6f\x83\x9b\xb8\xd7Y\x05\xca\xf4ag\x148\x17\x0b\x15-Y\x0e\xef\x10\xaf5\xa0\xb9\xf8\xf2\xed\x9494h+QBeIW r\xe6z\xa3\xab\xbf\xc4\xc0\xc4\x8b\x85\x93\x1d\xabp\xae\x93\xb8\x861\xe9\xb9\x0b\xcf.\x0c\xac\x14\xe3\x99\xb8\x03\x1c\x03\x98\xa7\xadd\xb0\xf6\xd9\x05\xb1\xb7\xc6\x17*{x\xa3\xc9\xdf\xac\x81V\x92\xd7J\xbc;\x0aK\"\xb1\x83n\x86Y\xafP\xb4\xe6ND4\x09K2M\x7f\xba\xc5\xe1\xf1!\xee\x16\x99\xc3P\xf8\xed\xbeW\xa5\xd4\xd1>\xc4;`P\xd9\xecR\xfe9\xeb\xda\x07+l\xf2\x85p\xbf\xa60\x8al\xeal\xf0\x01\xe1.\x1f\xd7\xe9\x82\xa6\xbcCF[LYP\xe2\xc4\xc03h\xa2J\xf1j\x01%?\xfd\xe33\xb4E\xd0-s\x92B\xcf\x10V-\xaa\x0ay\xd5\xa0\xb1)\x09\x10\xb0\xb2\x84\xb9\xad\x9c\x04\xe9\x99#BY&UP8\xcc\x89A\xdcM1\xcc\x98\x1b\xc8];\xa6\xd4\x89\xcau\xbeHk\xd53\xbd\xcd\x1a\xc6*\xf6\x82\x01j\x12\xce\xf6\x00b\xa8\xc9\xce\x83\xe3u\xbf\x9c28\xd8\x12\x9a'\x81\xecL\x8e\xc4T\xcf!\x90X\xa0\x03\xfc\xc2\xac\x98\xdd\xaa\x9e9\xf8\xf8\xad\xa3\x15 \xa4\x07j*\x12\xda:\xf1l@>\xde\x13W\x13\xfa\xb7\xef-\x19\x1by\xbfaD\xe6\xbaP9F\xf7B\x1b\xd5\xe2\xde\xa1k\x0a:\x8a=y\x0b\xd1WZ(\x12\x18i\x0dC\xc6xTN\xbe\xc3\xe5U\xd4\xe6\xf1\x17\xc8G\xc5\x01+X\xade\x8c\xc5\x10\"\x81F-`hqJ\xb53b\xf9Yp\x15^$\xb3<\x8b\"\x91\x02\x09;;\x0e\xf4F\xec\xaf\x84\x15\x92\xce\x8b\x1f\xa9\xb0hN\x13omo\xf8eH\xa1\x1f\xeb\x84`\x9f\x87H\xa1\xe5\x13\xd3\xbe4\xf7\x82oM\xa6r\x81]\x7f\xda:\x15\xbd\x99\x03n\xb6{T5J\x84\xf7\x19y-w\x9c\xb0c\xd9\xe3\xf72A\x0c\xfb\xbaH\x08\xda\xb2\xd7\xd5\xa8^^\x0ev\xf8S\xba\\0\x7f\xb7\x01\xc7ww\xe7\x9eJtd\xf16:\xce\x98\xe6\xc6\xe29M k\xb0\xe5\xe6\xb7\xff<\xdc\x12\xdc\xa3\x85\xac\xcd}DmZ7\x97\xd0A\xe4\x9ay1\xd0\xc4(\x07:\xa8\xca`\x10\xff\x07\xb0\x15\x1d\xc1\xefv\x94\xf8+\xa1\xf7h\xf2\xf2\x0c\xe3\xd0\xa7\x8b\x81\xa2w\xf7\xee\xd4X\xd3\x1cK\xfa\xf5\xbe\xec;\xd5\x11N\xb2\xc8\x98E_*\x0c\xa0\x83\x04\x97\xb3\xb1t\xd3\x99\xa3H(h\x13v\xe6\x88\x00\xe3\x08\x1fH'\xe3\xe3\x172\xbc\x153\xe6\xf2\xb9s\xaf\xe8\xca\xe7\x87Q'\xa4;>\xd8\xf2^\x18\xc3\xd5d\xcb\x95\xcb\x9c)@v\x98r\xbbR\xf0\xc3\xd4%\xc2\xd9\xb9\x95\xd0\x1e\x11ZR\xc4\xc6\xac\xf2\x9f\xc7\x0c \xc5\xe8\x9c\xcb\xae\xffbYq\x94\xd5q\xffG\xf8\x96\x80s\xba\xf8\xac\xf5\x8b\xe5P#\x04\x0e\x10f\x93\xa4\xd4 n\xca\x7f\x10\xe4;\xdbo*&\x16\xf6h\xf8O\xbfI\x91\xe5W\xdc\xbe\xa3R\x9e\xb8e\xbd\xb4-U\x86T\xe3\xcf\x8ah>3t\x12]_ig\xb6\xc9p\xa66c\xbepD\xfb\x15\xe0JD\x0ax\x1d\x94\x12\xe7J\xd4\xa3}D\x07\x83\xda\xf2H\x03\xc1\xa0y\xc10\xaa\x81\\\xd1\x04-=\xb8\xa1a!}l\xb2h)7\xe2\xc7\xedPhp\x97S\x89\x11X\x0b\x86: \x8f\x87-\x99~\xc5\x8f\xe7\xa3\x00>Q\xa1\xf79a\x15z\xd9\xdfA3P\xec\x0fAf<\x91\xd7\xba^][\x1c\xc8p\xaed\xb1\x94\xf3=5\xd2\xd5\x04F=\x86\x03\x01E*X\x9e\x12\x08S\xd1\xe8\x1d\xba\x12FXY\x1do\x05\x85\xb0\xa1P<\x9b\xff\xa6\xbb*\x0c\xfc\x87\x0b\x1e^n\x8d%\x195\x93\xbcPF}\xe3\x8b\x15=\xbc\xa9\xc5D\xf6|<\x1f\xb9\xd2w\x90W}#{\xf78\"\x08\x9b+\xa0\x9b\xfb\x07\xccr\x8e\x01\xb9n_9\x8a\xd8I \xfa\x96}/\x96\x86o\xac\xc1\xbcu\xb4\xa7u\xa8\xc9~\xe7\xe3;\x01HAw\xcf\xa8\xe5\x13\xd01\x9f\x12{>\x92\x07\x944\x81\xcc]2\xe7\xa6\x9b\x12\xb6?\xfd\xc1?\xad.\xc3'\xbb\xec(\xb4\xecY\xb8\xbf\xfd+bJ\x82m\xdf\xd9\x85\x09e\xd4\x98\x88g6\x04)\x9d\xaaI\xab9|\xb8K\xe7PLg\xfdG\xe5n6\x9d\xed\x12X\xa7\xf1\xd7\xd3\x87q\xed\xf2\xcfW\x86\xae\xd2^\x9cZx\x0e\xc7\xa2\xd3\xeexj\xc6\xeb\\\x11\xc0C\xb4\xf0\x8blH\x02\x14PT\"\xf2\x13\x9a\xd8\xce\xc0O\x01\xd9wy\xc7\x9e\xc6\xbd\xf0\xe8\xe4\xb7\xcf\xff\x16\xc0\xcf\xcc\x1c\x95\xae\\\xc3\xda\xfb\xbb\xb0\xe6\x91\xc4(\xfd\x09^\xd3\xads\xe8\xeb=\xac\x83\xd9\xe5\xaf\xca\xe2\x83>\xdd=\x7f\x0a@\xc5\x08\xae[\xa1e\xf98*\xdb\xbe\x10Q\xdf\xbb\xa3\xa6,\x1a\xf9\x82\x910\xa8\x0f\xce\xd9\x9f\x07D\x7f\x8ef\\4_\xf2\xdfQ\x1e\xb3\xfb\xb7\x06\x0e\xf6X\xc3t$R\xb39t\x07:<\xb5\x05\x8eY\x80]\x0f\xf1\xe2_z\x82\xf5\x87%\x19\x02\xb3\x15/=\xcf\x9aV\xfc\x8c:\x80a\xf9\x18}^y]\x81\xa7''\xfc:/\x8dM\x93\x13\xca\x9d\xfcz\x9fD\x02}\x86&Q\x06\x0e\xb4K\xbe\x81)\x81\xdb\x98\xbc\x0d\x88\x9eZ\xe76\x18a\xff\xbb\x93\x96\xc0\x8c\x08\x11t\xa3\xf2\xa6\x01\xc1\x10X\xb48\xca}\x07\xaat\x9a\xea\x11\xa8=cn\xd0X\x8bE\xc96@\xde\xf4;??v\xf1O\x03\xfc\"z<p\x11baX\xc8\xcbm0\xbflh\x8d\x16j\x08U\xa9\xc2T\x04\x0bE\xe69\xce\x02vH\xcc\xd8\x8c\xc2\x0ew\xfdHs\xf9\x12\xc1\x1dZ+\x93\xcb\xfc\x91\xc9m\xbe\xf0]V@_\xc2\xfb\xf9~\x9a\x0f\xa0\x16\xde\x8cj\xca\xf9U\x98X\xff\xbc\xf3\x83(2\x04a[\xecv\xf9\xd9\xb0\x16\x09\xdeg\xfc\x1f7\xdc\xb8n\xce\xb9\x9c\xacI)4\x1c\xf3\xcb\x14s\xf2\x9b1j4\x97:[%d^|\x89sY\xc6\xb0\x12/!\x91\x88T\x8b8\x02T\x90\xdc\xae\xcc\x86\xac\x8a\xfca3\x10\x80r\xfb\x1f\xed2z\xfa\x0b\x91*\x0e;\x90\xdf\xfb\x82\xf9v~5}\x01mQk\x0f\x87\x1a\x06\xb8\x97|#P\xb3\xb2\x9d\xf9\xdd\xe4~\xeb\x0br\xf5I\x1d]\x10t\xc1\x8f\xf8\xfc\xb7Jz\xaaT\xc3I\x0c\xb6.\x80\xfeI\x86\xff\x92\xe0\xa3\xa4Q)\xfbN\x8c\xbd\xb3;\xb0\x19\xe8\xa43k-\xd2\x80q\x15\xc9\x19\xbfk\x02\xc1\x0b3\x9d\x9cx\xbbY_X\xe1\x8clr\x18\xf2\x87mF\xa8t\x81\x0bu\x9d0\xf1\xfd\xdd\xc7s\xef7\xaa\x05\xac\x92\xac6\\o\xc6\x89V\x01\x88V\x92y\xf7\x82\xeb\xfa\x82t\xc1\xf8\xa8\x17\xb7\x1c \xc4A\x7f\xa1\xaa\x0ept\x01\x85\x9e.l\x90\x01\xbf\xc04U)2Dzg\"\xe9\xa7\xcb\x16IR\xfdu|\x0dK\x19d\x0f'\xe6\xc6\x87\xf5\xca\x13~\xb6\xe2\xe1\xbcZF\xf0w\x14&\xde\xed\xef\xb56\xd8\x0c\x9b\xfc\xb2\x86\x08\x8a\xee\xba\"d\xedZay{\x8b\xdf\xf8\x0c\x92@\xcfYv^\x16{\x93\x84\x98\xae\\\x9c\x91z\xb3!2\xae.\xd3\xc1\x92>J\xdb\x0c\x83\xe1=\xb5\xfc\xc2\x8a=Z\xbb{\x8ed8\xc6i\xb6\x8d\x16#&\x91\xd6&[\x09+\xbb\x11~\xee\xf5J\xbe\xd2\x95\xcb\x08,\xf7\xe2D\x09\xce\xaa\x0b\xa9R\xe3\xff\xfe\x0co\xb5R>\xde\xc4-oZ\xa5U6H\xf7$#K\x7f]\xf9\xb9\x03\xbf`cz7\x93\x96M-\xdaGT\xfa\x80\x8c\x00\xcb\x15Ay\xbf\x98)|4\xbe\xea\"\x06l\xbf\x80\xc9L5\xf0\x908\x89\xdd\x1c\xd0\xb5H\xa2ED\xbd\xd18wI\x05\x05\x06u\x8e\xed\x15\xf5\x8b\xaeC\x9bd\xdc^\x11x\xa7\xec+A\x91a\xaa!\xfaz\x7f\x96@\xd6\x85\x84I\x1a\xd0\xd0\xfa;j\xeb\x9f\xf6\x03\xb4en\xc9}D(OEq\xd6\x8f\x84~\x17\x0f\x82 \x88\xcaM\xd9\x07\xe22S\x1d\x9c}u\x12\xd8\x81,\x11\xf5$\xb9\x17(z\xcc\xae\xfd\xca\xa7\xff\xc2L\x8et\x9d.\x18\x8d\xbc\x96\xd5\xc1\x16\xfd\xc9\x11H\xc3\xc3\x98\xd9\x14iy\x8e@\xa6\xeb7\xe0\xa5,\xfb\xe5h3U<j\xb3F\xc7c\xaf`\xf31Q\xfe\x8a\"vs#\xd2\xa3E\x09TF;\xc2\xcd\x96\xee\xe0\x9b\x99_\xdf\xe652\xad\xa2\xda@\x13\xeb\xe6\xf7b\xdf{\xdf\x99\x11\xcd\xab\xf9o\x08\xaf$s\x12*\xfc6\xe3\x1dc]\x7f\x90ij\x93\xdc\xd5\x0eh^\xb3O\x84\xaeSw\x98P\xfe~\x0e\xf5feM\x84\x80\xe1V\x81\xf9\x9f\xa6v\xe2\x8ff\x8f\xb48\xf6~\xe2\xa8Q\xfa\x9c\xab\x13\x0d\xe8N\x076\xf5\x0b71H\xc1>\xd7[F/\xf3w\x05\x92\xcf\xdb\xe2\\\xb6\\\x05\xe7\x7f\x08\x07\xf2\xa7\xda\x92u\x1d\x977\xeb4\xfa\xaei\x18H\x9f\xb1\xe0\xe6%\x1e&\x9b-\x19\x04\x94SE\xb3rvpLVYV\x88\x9e00\x90\xc2\x9e_k\xa3\x9b\x1a\x98F)\x0b\xc4\x80%A\xd8\xc6\xc1\xb6xiW\xf1a\xd9\xafr>\xdc\x84\xc1\xc4\x1bi\x031f\xd1I\x1f|\xa4\x80U\x0f\xda\x89\x80\xd77\xc8\xfd\x98.\x89\x16t\xbf\xd5%\x96\xb2G7\xca\x0d\xfa\xe5\xccG\x9e\x95\x9e8\x06\xcf\xa9\x81\x13.\x0a\x9b\xb8\xf9U\x1b\xc2h\x96\x15\x8eL\x0f:|5+\xd14 \xa38\x0f\x08s\xbb\xa5*\xa9\x9d\x1d/gb\xe9i\x00:\x18\xc0\xeb\x19ih\xa2\x02:N7\xc8\xb5\xdc\xe4\xa9J\xb0\xeb\xd2\xa9\xf2I\xd2\x99\xe1\x19\x10r\xb3\xe9\xc4j\x01\xa1\x18\x82D\x0b\x18\xa2M\x97yz\xf0N\x97\x9bN\xa6\xb2\xfa\x9d{\x90x-\xc0\xaa\xfc\xdaVb+!u\\o\x92\xd2\x00\xab\x1b\x85U\xac\x0b\x0eP\xa8\x83\xfe\xfe\xdf\xc7\xd7a\x14\x89;1\x99\xcfj\xdfzw\xaca\x040HF\x9f\xa7\xeay\x0a\x09\x82[\x1eO\x8d\x12\x9dWm\xbe\x09\xda\xb3\x8d\xa89/i\xc5\x9eb(\xdeMz\xff@*\xc4\xb24\xfa``\xa8\xc5T\x82\x8c\x8d\x98\xb7#u\xa1\x9b\xd1\x14\xaa\x17L\xdd\x18\xa5U\x11p<X\xaf\xe9!\xb3\x00l\x8f\xd6y\x9b\x86\x8e!\xee\x89\x13\xc1\x1c)\xc7\xd5\xb5\xc8\xadM\x04\xd8\xec\xfb\xf0\x9e\xb3\xfd\xb6\xb1\"\x05\x9f\x0aS\xba6{\x11\x8e`\xfa`\x0d\xe5\xa8\x03\xed\"d\x9a\x02$\xd7\xdc\x8f\x7f\xb8\x10\xa8{g\xd5\xda\x9c\xa0\x09\x8a(\"S.\xd7\x0b\x00\x87\xbf}\x9f\x8e<\xb2\xa9\xba\x83\xe8\x7f5\x87T\xf9\x12^7B\xcd\x9d4a\x88\x1e7\x9e\x9d\x8d\x99\x93\x9dE\x0f\xad(q6\x0b\x07\xe8\x93\xf4K\x06O%\x0a\x7f\x919\xe7\xae\xc2+\xa3\x00X\xee*\xb7\x93\xb2\xa7RxV\x83\x15\"\x1f\x0d\xf6\xf2:1,$\xd3\x0f5_\x91\xe1\xb9\xd9\xb5*\xbc\xb6\xb4\xa2U\x1b\xe2\x00\xad\xb0\xf5T\xd1\xbd\xdf*<\x97\x0cH\x94\xda\x8d\x16\xf2\xdbR2\xd1yop\xd6\xfb\x810\xe0Z\xe0p\x9a\xae\x1d\xd3;\x86\x9a\x82l\xd9\xa9\xdf\xeb\xe5\xcek\xee\x10\xbc\x9c\xe5L\xc6r+5Y\xe9\x97Z\x02\xb6\xfa\xae\x83\xf6A@F\xbf\xd9T2\xa9B@\xd1\xc0\x8d\xc7^k\xd7\x8e\x8cI1-o\xfdT(\x91\xd4\x92pi\xf1\xde]a>1\xf9*\x98\xb6\x83\x89<\x1c\xce\xb7\xcc\xe7:;p'\xfaj\x1f\xa0\xdd\xca\x11g\x87\xdd0\xb0\xbaR\xf4\xab\xc1Vz\xf3G\xef\xca\xb3\x99D\xa3\xa7\xc1\xe0Hb\xf1A\x14\x1f\xa0r}\xea\xf7\x08\xc0\xa6\xa8L\xb5Df\xaaE\xfbt\x84\xc6\x17/eTMC\xe4@\x00\xf0\x82\xc6\xa9\xbd#u\xe2E7;\x0d2\xca\xae\x90:\x09=Z]\xe4O\xacy[s\xa4\xea\xc7\xba\xe3\x93c0\xb3\xcb\x9e\xb2\xd1\xb8(\x16\x81\xeb\x7f\xddD\x8d#\xf8\x937l\xfd\x899\x12.\x1d\x83\xe04?n\xd0\xa4T3'X\xde\xe1Y\xe7\xe6\x14,\xbb\x8e\xe1\xdcKp=\xa3\xb8Ns\x9e-\x1c\x81\xa5\xb54j\xfdq\xffB\xf9[rYZ@\x0c\x8fq$mL0\x95\xb1\xd8\xb5V\xf9\xb2\x82\xf9\xf1\x1e\xe8JJ\xe8e_\x03\xc295\x02\x81\xfb\xad\x11\xac@\xf0\xdb`\xcb\x0b\xd2\xd1\xf1\xe4S\x95\xf0ZQ\xe2|\xa2Y\xa7E\xd5\xfd@\xfa\x0e\xd6\x88\xe8\xe1\x03\xe5\xae\xe7g#!Q\x0a\x97~d\x16\xc8\xc4\xfe\xafA\x97G!\x12 \xf8\xad\xf1\xd5\x97\x84\xa9\xa0]\xfe\xa4\xa9\x1c\x12T;J\x0b\xc4\xcf\x13\x89\x91\x01^\xad\x04\xb5\x00+7\xae\xf6\x19\xc3\xbec\xb3ob\xef\xe6\x1c\x1d\xf4\x94\xf2d\xb1\x0f\xee\xeb\xce\x96&\xa4\x02\xf9r\xb5\x91\xfa\xadZ\x8e\xd5\xed5\xaf\x10\x85\x08\xf7\xa9\xeb\x85\x140}/\x8f\xd78\xcfb\x15;J\x02\xab0j\x10r\xb32\xcb\xd3\xd1\xc8\x0c\x99\xcb\x90Y\xc4\xb5\x03\xd4\x01\x89\x06\x1a\x93wN\xf0\xfaO\xe5\xcb5@\xfdt\x13\xf8\x1b~9aA\x06\xef\xe8\x06B\xd1 s\xbf\x0e\xe0\xf1\x91[\xfc\x1c\x12\x1b\xd6\xff\x1d\xdc\x84\xd0.\x1c\x93B\x15\xc8\xb8\xdb\x0b\xd5\xf9\x91\xdcT\xfe\x8a\xfe\x0bX{9\x9cpO\x0d\xe9\xed\x80'\xbe\xd7j\xd1B\xdb\x16\x94\xec\xbfM\x8f\x92@\xa2\xb5\")\"\xf9\xf7\x0e\x1eIeW\xb6\x8af3\x88,|N\xd1\x95Y\xd3\x8dPM\xf87\xf2\xdd\xdf\x9a\xe4\x9a\xe6\xf7\xa7\x14\x0f\x92\x06)\x03\x1a\xe8\x09*a\xed\xd3\"a'Tn]\x0f\xe0\x8a2\xe7\xc9V:\x84P\x17\xfd3:U\x8a\xac\x99I;\x86\x8f\xf9\xedx\x0a\xb9\x9f\x0bq0\xe4u\xb1v\xbaOy\xb0\xc8\\\x93$\xf4\x8fIR\x086>\x97\x08\x91\xbc0\xf5[^av=T\x05\x95\xe0T\x90\xeew\xe8h\xee#\x05\xa3\xac\xf0\xef\x13\xf2\xb6d\x95\xba d\x11\xf9\x06\x81\"\xc2\x08\x94\xa3\xfe\xa1?r\xda\x7f\xae\xb7e\xc4\x0e2$\xdf+\x80\xb7\xc4q\xa5\x93le\x87f:Y).5\xaa\x88\x98\xa4\x0c\xdaV41\xc6\xe1\xeazp\\d\xda!\xd4\xe6x\x814\xc6\x04\xdf\xeeDdLY\xa1\x8c\xce\x00\x15\x18\xaaE\x85\xef{\xf3\x11\xfa<9\xbf\x1cI\xbd\xf5\xf0q?#\x1d\x19T\x16\xce\xd4&\xc0`7I\x16-ZN\xcb2\xbd\xd2\xb0\x9a\xa3_\x07\x81\xee\xfc\x09\\IUG\x8c\xad\xfd\xed,4\xeb\x12\x02q{SI\xfb\xb4\xe7e\xaa\x19\x0d\\}\xe1\xd4\x19\xdb\x8f\xb6d\x01\x09\x18N\xc8(\x8eB5\xab\xfb\x1fY\x03x\x04\xd2\x9a2[\x1dw=2\xc1\x1a\x8aR\xa80\xd0 \x0c\x1d\x99u\xf7\x05\xe2T<+\x1dU'J\xdfi^\xb6\x0e\xb1\xa1L\xe5r\xb8\x19\xe2\xb8\xf8vc\xea\x9d\xb1D\xa3V\x7f\xb4V\xd3+\xf5\xdez\xa9?\x13\xe2#\xed\xea\xd6\xac\x91\xb0$2L:\x07\xfb\xd0\xbd\xbc\xb0_\xce\xa9\x9aL\xa8\xdc\x95\xfe\xad \x11\x8a\x9e\xf7\x18\xcf\xc8\xd0\xf5\"\x086\xd6\xeb\xb9\x05\xf5\xad\xaf\\\xbf)\xf6\xad\xe2\xa0=\x92\x17\x19`\xf2\xf2\xd3|\x97\xfb\x1c\xb8\x18!\xb7\xc2\xf1\xb4\xcbCLb\x92(\xf8l\x190\x9a\xa8\xd0\"\xab\xf7\x1a\xe1\xf3\x9b\xa0\x19\x0b\xb4*2u\xa5\xf1WS\xac\xbf\xa78S\x9a7\x09\xd2\xe6\xf2^M\xe0g\xce\xc7\xea\xf2\xa6\xd9\xa0\x81q<\x0d@\x17\xbd\xd8\x85@e\xba\x83&z]\x07\xa5\xbfR?I\x9a\xbd\xcc\x0c\xc1\x8cr\xb0\xe1\xbf}\x06\xf7\xfdO\xed\x9e\xf2\xde9\x9f\xd9\x01C\x84\x13\x1d\xde}\xcd\xd4\xa2{\x0a%A\xe6\xe62A\"/\x0a\x11S\xf6\xa40\xd9=\xe8\x86_]\xf6\x04L\x19\xd5\x9bD#$\x9f\xe8\x0e \xb0\x83\x91\x9c\x10\xa2\xdfX\x0e\xce0Y\x84\xf8\x98\x8cS\xf5\x18\x7f-\xc9F\xa2\x8bn\x0c\xbc\xa8\x8ao3&\xe8\xd6\xcc\xe9\xef\xd4Ny@7v\xc4\xdd\xc13c\xe8\xden\x8f\x95\xfa'\x95\xc9\x0a\xc9\xe1\x10\x7f\xca\xb6,\xdac\x1e\x88\x9f[\xddg%KZ\x836N\xa5\x08\xfdP\xf6\x01\xfe\x189\xe0\x9eb\xb5x\x1b\x97N\xa2\xe6\xf1\x7f\x15@}\xb7H>\x03S4\xae\x94\xe0\xdd\xf1}\x83e\x9cA\x9a\xeb}/\xe4\xe6\xa8\xa58]\x8e\x0c\x07\x0c\xca\xe05j\x8a\x12\x98\xcc&9\x01\xf3\x1f\x9e\xe9L\x0f\x81\x89\x0c\x0c3\xec>\x8c!/\xe6\xd5\x80\xe5\xa6q\xcfq\x98\xb9\x0a\x14S`\xf3\x8e\xa9\xd3\xacxH\xa3\xa1\xc1\xd3\xec?\xdc\xbc*|GO}4\xe3#+\xe7\xd0\xdbV\xec\xcf;I\xbd\x8b\xab\x93a\xc2\xf90\x87\xfa\xe3_\xffu\x19\xbc8C\x8c\xf5P\x0d\xed\x034\x19\xc0\xf6\xb0\xba\x99\xba\x8f\x8d\xd6\xb9\x9es\x10%YD\x0eD\xcc\xfc\xa3j\x85\xbc\x0f\xa4\xde_\x96\xa8\x90,\xff\x81y\xfc9a{\x15\xe6\x9f\xbb'\x1d\x86\x03\x1cL\x19\xc9L\xccKxK\xc4V\x96v\"\xe0U\x99\xfe\xf2H\x06\xf4\xe23*\x86\xcf\xa8\xe3\x07u:RQ\xb6\x07\x83r\x05\x80\xe3BHs\x91\x9b\xc6\xa8&w\x97xu\x87\x99\xee\xe6,\x0c\x8f\xc2\xfe\x87m\xfc\x83\xd5\x14N\x1d\xcc\xa3\x88\xd6\xde\xdaI\x99\xa8\x98\xce\x80+\x8bEd]\xef\x08\xf6\xec\x86\\\xd4\x17\x99\xbe\x99\xca\x1c<\xbf\x138{\xc4\x0f$\x88\xbc\xe0Nl Y3H\xdb\xf4\x04\x07\xc2\xce\xf2\xec\x84\xde\x9c\x85EAi\xa5y\xda}9lZ\xd2\xaf=\x7fV\xd9<\xfc\x92\xe3@\xfdKg\x1c\xa1H\xa2\xed\x86\xe3\x9e\x0cC\x9eB\x91\x86\xe9&\x00\x1c\xfb\x13<6S\xf5\xaa\xb9\xe7\xaeZ\xc7G\xb8\x95\xa4\x9cg!\xa1P\xaf\xbbNZx|\xea\\Z\xe98^\x19\xabf;f\xb3R%i\xcd\x7f\xa1\x1bM(\x91f\x07|\xd2\xd6\xd5-\x91\x12\xe5A\xad\xbb r\xfc/7c\xe3\xa4d\x1dj\x01\x0c\x11\xd7\xbfK\x85t0\xe9\xd6\xd6s\xe9nZ0\x81\xf7/\xfe\xa6\xa1sAq\x99e\xde?\x9c\xe6\x88t\xe9\x8dk\x81\x09\xaaB\xd3\xef0\xde\x05\xb1Y\x93*Ys\x93c\x7f\xb7\xe1\xa9\xb9\xb1\xbf\x9f\xb2\xa3\xee\xe6\xfb\xf1\xaa\xc2\xf1_\xd1\x84\x8d\xc8\x9cj\x85])\x87\x1b\xeb\x922\x10\x99\xf7m*\x11\x9c\x00R\x8dA\x18G\"\xc3_\xa4r\x12\x10_\xc7\xbeI\xb1\x1b>\xb3#\xdd\x9b\xbf\x98!\xe1\x83\xdd\xbd\xe0\xb2\x9d[\xfc;\xb3._O\"iP\xcf\x92N\xa3Z \xdb\x048\x92G\x1e\xdbY\xdc\x80\xcd\xcb\xf4\x9a\xbc\x9c\x8a\xcc\xaf\xda*\x99\xf4\xb0\xbf-_-\xf3\x1a\xd0\xbaeK\x10\xd2\x86+\xc7\xcf}D\x0f\xcd\x0f\xdd\x07\x98\xfd+\x81\xe9D\x90\xb8.\xf7\xc9:o\xa2\xd7\xec\x9d\\\x00kN\x1b\xe9\x07p\xbd\x82\xaa\x84\xfe(\x1b\x96/\x90.\xcd@\xab\xdfO\xa8j\xf7\xa8e\xf50\x05mEo)p\xbcyt[\xbb\xc8\xe5WS\xed\xdb\xe9]3\x00\x19\x9f9\xe7Z\x1e^,\xd4\xb8\xe8\xe9G\xd4\x11\xaa\xee(\xd5\xa1nn\xa8\xf5\x9ciI\x9f\x95v\x19V@U\x9d\x07.2{;\xe7h7:r\x97\xb9Z;\xc5ew84]0<B\xd0\xc08\x1f\xca\x1b\xe65\xcc\xb4\x972\xebBB\xd7\x13\xae\x92^M\xd3j@\xf8\x1d\xf8_\x15\x17-\xb6\xd9\x91\xbd\x94H\xa2\xa3]>\x90\xf9\xb5\xd1eV\xbaL6\xcd\xea\xaf\xbd\xfb\xf0\xaf\xbf\x9d\x08p\x03O\x07\xe6G8sRr\x9a~\xc3@1\xbf\x84\x0e\x0a\xb6\x0a\x0c1\x87\xc26\xe3l\x08\xa7\xc1r\xc5\xd3-.\x1a\xbau\x88\xba\xb7]\x0dXS\xdd\x85\xf1/G\xab.\xd2\xdc\x8f\x86#BPHN\x90\x9ei\xb0\x14\x81\xf3\xbd\xb35\xa2C\x91\xbb\xc49:S\xdd2\x05[\x95K=\x9c\xb7I'\x19\xbb\x93(\xff\x90\xa3\xd7\xd1\x80\xcb\x1a\x09\"\xe9R]\xe2\x87\x85\xb4L$\xde\x92J\x10\xaf\xfe\xf1b\x16l\xdb\xde\x8f\x1c\xa0<\x97/K\xf2\xf4\xf5\xf0\xe9Q\x1f\xdbzS)\x1dT\x8bt,z\xd9i\x86\x0c\xe3=\xb6\xcd\x8e\xf6\xcbT\xfbW\xaf\x8d\x1fN\x9e\xecs\xf2\xc8\xad\xe2j\x80\x9b\x16 <\x8ddk\xa5\x90\xfb\xda\xc1\xd5\xd5\xd4j.\xd2\x9d5\xa6\xf3\xdc0a\"Q\x0c\x19\xb5\x9a\xd9\xd5\x89\xd2\xc7M\xf0>\x9bm;\xc3\x87\xab\x05\xb0\xb8\x15\xbe\x1eE\xdd\xd3\xa8\x93\x90\x8b; X\x11\x9c\x8f\xe5\xa2;s1\xf2?;:\xf1\xc9\x901\xab\xa3u\xd8\xaa\x17\xe0\x00\xfb\xfa;\xbe\xad\xfb\x05w\x99f\xee\xf0\xeac\x9d\xb2/W\x1fR\xe0\x1f(e\xfc\xa2\x1e\xa1\xafZ?Qt\x0e\x1d_\xf8f[\xbe\xa8j\xf2\x14F\x1a\xb3b\xdf\xd4v\x16\xa4\x86\x81\x12&s\x0c\x9e\xbc\xc5\xech\xd6\x04\xf7\xa3\x8eS\xf1\xa1\xea`\xd4JH\x00b\xd6\xad\x17\xc1\xd4\xb0\xa9\x89LN'_|\xd0\xe0,\xe7\xb3w\x09\xde8\x19\xb9\xfe\"6\x01\x8f\xf2\xdc\x96\xd9:\x9a\x81\xbf2\x8eAG\xef0\x92>\x8b\xaf)\xab\xcc\x98\x89\x89\x19\xe0o\x17\xee\x0b:o\xb5K\xd3\xf3pL5a)\xfa\xd1\x14R\xa9\x02\"\x1e\xab\xc3\xcc\xa2\xf2\xfar\x9b\x89B\x9aT^\x90`'\xcb\"L\xee\xe2!Z\x81\xcf\xef\xc3\xdd\x13\xba\xb9\xb7V3\x08u(\xb3U=\xd2\xf7\xdb\xea\xea\xcd\xbcb)\xef,>\x90\x1e\xb3\xe8GR\x0c\x18\xf8\x8c+}\xe5K\xb2)R\xb6\x9f\x86c\xdd3\x83Q\xec\x9fc\xc2\xe04K\xa31\x1aE=\xc1\xbe\xfe\xebP\xec\x98\x17/0\xdd=\x0f\x83\xae:P}\xe4Z#\xc0\x94k{\xcfvdQ\x97k\xe6\xcd\x8f\xb6\xcc\x89K\x05z\x16\x83\x1d\x18\xee?\xf5\x80\xd2\x1e\xbc\x1c\x86!\xe7\x1d\xd5\x9c\x04\xe0\x0dO\xd0O\xd5\xd9\x93C\x07: R\xceT\x83\x15\x0d\xd0c\x8cw5?B\xb4\xa6\xde\xa0)\xa76\xdc\x01[\xfe0\x7f\xd4\xa3\xfc\xed\x94\xebH}^\x10\x94l\x82\xa0p\x9c\xfe[\x86\x1d$\xa4\xcd\xeaJ\x87\xd2\xdc\x12e7\xac\xf7\x00\xa9pd}\xd4\xee>^\xc2\xe0\xc4\x18>X\xc4j'\x11\xe6(\x0e\xd2\xed\xeds\xa9\xecr*\xdcV\x11\xa1\x02DjEy\"\xef&\x12#\xa5\x01\x13\x0fYa\x96\x80m\xcb\xc8\x11\x95\x91\xb72\xbe\xf8\xd7s'b\xacz\x86\xb3\xbd\xc4\x0al\xe4\xad \xf0\xb6\xba\xbcLI\\\xb1\x9f.\xfe\x14\xeb\xe5\xcb\xba\xb7o\xeb\xd2+\x82BF\x8e\xe2x\xba,c4\xe9}R\x0d<\x0b\xb2\x01\xe2\x99\x1f?\xc2\xd8I\xa2\x1d$D\xdfR8\xac\xb1V\x95\xae\x9d\x1f\x83\xfc%m%\x9aK\x1c\xbf\x98\xf7\xee\x86\xc5\xca\xb9\xbcJ\xe1\x07\x8eK&\xd7Py^\xef\x8fYD\xb9\x87L\xd1}M\x0be\x06\xde8\xe9\xc9,\xf7\xc0\xc3\xeeX{<\xf6\x81m8u\x0a7\x0bt\x04//\xb3\xfc\xd8\xbbO\x13zy=H\xb2|\xe0H\xd3q\xca\x96/\xae)u\x06\x0b\xf3m\xad\xb2\xa9\xae\xe7\xa9\xc9\x9d\x01Ma\xd7lK&k7\xee\xcc\x13\xfd\xf3\x9b\xc3\xd4\xb2$\x9c\xa3\x0f\xa6\x99O\x8e\x81\x13<\xb7 \xa4\xb4\xc9z\xfac\xf3\xe0A\xdcY\xa2\xa3\x82s\x8f\x17\x84'<\x15c\x91\xff\xd4b\x9b\xa2\xb4\xba3\xcc)E\xb99}\x80\xbeup.\xda\xb1RP\xb1}\xb7=\x8b\xe7\x8d/\xe6\xbd\xc0\xd5}\xf2k\x9c\xbaB\xb5\xab\x08\xc1o\xb7\x8eAG\x96\x10\x90\"m5\xf1\xef<\xad\xd8\x88\x08\xe7 B\xe1\x99\x0d\x16\xf9\xc7\xb8.\x85\xec\xacqU\xbd\xd5\xb9\xd1\xd8\x01`\xd8\x1b:\xbaXO:\x9d\x9e:'\xd0\xfb$4<\xcd\xf5\x18\x14\xde\x00\xfa\xd7\xa0\xf6\x83-4\xc9!\xb8J\x9aG2j\x93\x0b\xda=\xdc\xe0\xb4\xdch\xb3\x82\xb8\x14\x9dne/\xe5\x9c\xd2\x9b\x00Zj\xace\xf3c\xba\xc0Q\xbd8F\x10\xbd\xfa\x9f\xf6\x93\x14\x0e(\x08\xc1\x84}+\xe6\x07\xd0C3\x1dI\x1aE\x8aj`\xf7g\x8f\x06\xc6\x97\xd6}U \x0aD\xaf\xa8\x17WTj#3\x95\x1dcf\xf2lg\xf2\xe9\xa9\xc6\x10U:\xb3\xac\x0cPuU[+\x9e\xa5D|\xb4\xd2\x07\xdfX\xe8h\xc8\xe1\xca\x8f\xb3\xcd8\x18\xceH{\x9c8{\xc1Bn\x8fL\xf4\xbf\x99\xd1\xf9\xce\xd0i\xf3\xb6\x07k\xd8\xcdQz\x90\x1d\x03u\xc2\\\xfa\x05\xdb\x0fJx\xb7#K-\x15r@\xa8\x9a\x19Z\xa8R\xa0c\x06\xcd\xad\x0c\x0c\x85\xb8Z\x97\xff\x18\xfa\x1d\xa7\xe0\xe5\x001&\xf5Z\x89\xe7}\x9c@{#:\x87\xed\\B\x98Z\xcc1\x02\xc7\x11a\xea\xcf\x90T\x10\xb2{H\x99\xe7\x9ce\xec\xa3s\xe3\x83\xaaS\x1e\x96\x17\xe1\xa2\x00\x9a@\xe8\xf6\x86\xe37[\xd6\xfe}x\xe7\xed\xc0T\x95t\x92\x8b[\x0d\xbd\xd139\xc8\xb0;0$\x91\x8c\xd9*-\xa5\x10:\xcd\xf6\xed\xdb\x10\xd9\x1a\xd7\xae\xe2\x16\xdd8\xa1\x03\xd8\xda\xf5t\x7f\xd7\x91\xe8\x96\xb1\xa4\x85\xc0|\"^;y\xe2qU\x0a\x0f\xe0\x1f\xcfl\xdf2B:\x9b\xba\xf7\x12E\x0e\xd0\xd5X6$\xaf\x93,\x195\xdaGG\xafB\xc2`\xb0\x97\x00\x99\x1b\x98C\x82@\xb0Aqp\\\xc2\x9b\xe3\xb2\xc7-C\xaa\x11\xba\xdd\x9cd\xcd\x98\x8d\xf4\xcd\x0d\x1fP\x0a2\xb82\xcc\xaa\xa5\xc7R\xeb\xdf\x91\xcd\xac\xa4\xc4\xe7w\xb0<\xca\xc8\xdf\x04|0\xf9mqR\xd7\x03\xdf\xb1\x87N\x05!U\xe3F\x85\x11\x8d\x80\x9a\x1cF\x03j]\xdc\x08onKP)\xcc2\x7f\xb1\xcc-b\x02\x17P\x9b\xedI\x9c\xc7\xf3\x96}|\x9a\x07\xe3\x85N\x94+\x87\xbb\xf2{PXB.\xfc\x04;\x8f \xf4\x87\xb8\xeap\xd1\xbc\xf2DY\xe5!\xbb\x0a\x8cV\x1am?^\xfb\xfc\xd5B`\xe1\xf2\x19\xd7P\xc4\x93\xc0\x1e\xee\xa1\x03\xc0\xf8\xbc\xdfb\x1e\x84<\xcc\x12{\xad<\x8d\xa0\xe6\x8a\xa3 \xdan\x9es\\\xe9\x1fl\xfek]X\xa1\x14#\xb3\x1f\x0c\x8bo\xaa0PTb\xd4]q\xd4\xad\xf42D\x03m\xb8\x82\"\x16\xeb\xb5j\xeb\xf1\x1c\x1d\x91\xfd\xc8\xce'r\x8ax\xa8\x14\xd2\x0a"
PSA.Undertale.Resources.audio_000029ed_int16_44100hz_mono = "]\x00\x00\x01\x00X\x16\x00\x00\x00\x00\x00\x00\x00\x00`\xaa\x7f\xa3\x04\x07a\x07c^p\x1b\xc1\x96\xc1\x1f\xa78*Y:&\xb3y\xa5o\"\x00L\xec\xb5*\xb8h)\x04Q\xe1O\x81\xa1Y\x0b0\xca)\xdd\x8a\xb7\xe3?\xbc\xcd\x87\x06Of\xc5@\x91\xbe\x8b\xaf*P\xa5\xbeb%Ms\xf0\xd4^8h\xa8&O\xe0\xc8\x82\xf0\x9a[\xde\xeeE\x04+Sr:\xd8\x09`4\x9dc\xa7\x17\x09\x11\xe3\xfc\xbc\x8e'\x1e_L\x89\x19\xa1d\x95\xf1L~\xd6\xa8V\xe4O\xb5\xb5\x07\x06\xa9N\xdb*\xd6\xc6Q\xc3Rh\x89\xc9S\x1f5\x8e\xa9\xb4\x8f\x87A\x9cbJ\x8b\x13iC\xcf\x15\xae*\xb0^\x9dCC\x89;\xe8G\xde\x1f\xec\xd2uy\x8f?\x9f,\xe3rP\xbf6&\x82%\x0eE]\xc7\xeb\xe0n\xa5,\xbbt\xb9*\xe2.\x15\xb4\x18\xf276\x91\xbd&\xc5\x89\xd1U#\xdc\xc5+#\xc2\xe8Q\xb4\x81\x06\xc4\xac\x8f\x00\xf4\xee\x1f\xc0\xad\xd1\x96\x87\xec\x865\xb38\x10\xccw\xab\xd4\xady\x0c\xad\x9eI\xe1.K\xef0\xfd\x93\x8c\xdcf\xbc\xcfk\xc7\x03\xb6\xa5!\xd07\x07GD\xea\x14\xab\xd6\xb9\xe1\xe4\x95\x06q\x03\x90,\x96\x80\xdd\xe7\x91[\x85\xcc\xa7 \xe2\xfc\xa42WO':\xb5?\xb83\xea\x06\xd9\x87L.#g\xa6\"\xb0PI\xdb8\x0b\xdc\xe0\xaf\xa9\xb7Ai\xd8\x956\x93nj+\x8a\xb5\xe6\x96}\xc2%9DMV\xb4T\xca\xaaT\xc8&\x92\x0cb\x8d]\x938\xfc\x90\x84\x7fw\x06\x86\xf5?K\xdc\xca\xbb\xe9i\x0fe__S\x94\xdf\xa9\x1e\x09!\x97\xb1]\xb9\x0bS\x08\x07\xc4\x16\xfa\x04\x1d\xc9*\x19=\xc0\xf0\xc4\xf0\xf4!\xcbdy\xcdl\x9e`\xc0\x00\xaa\xcdil\x19\xa0\xd13\xca\xbc>0\xa7\xf4U}\xd1\xfcw\x0e;\xba\x99\x1c\x15Y#\xea\x9d5\xfa\xda\xff\xe8V\xfb\xa7\xf7J$\x98\xe0\xbd\xe3\xec&\x16\xad\x100\xdfJ\xa8\xcel)\x08R\xde]\x81\x83\x80\xd69X\xe7\xd7\xd9\xdc\x0a\x8fCc!\xe9k;~\xc3\x94V\x02\x1c\x930\xa3\xf0\xc1\x99Y~\x15\xa7\x85\xb7\x1f\xbc\xc8\xe6^\xe2{nZ\xa3\xd2P\x15\xc3\xf2\xd5b.\xa8\x15^\xfa\xf5\xe5\xa34\x04c\xfc\xc2v\xe8\xe07\xfc\x14^u[\xa3D\xe8\xa5;\xb2\xb7 \x0a$\xd0~\xcc'\xcf\xab#r\xfb\xd5\x86e\x04\xd7x\xe9+6\xd3n\x84;c\xf5@d\x9b\xd9c\xea>DB\x15\xff\xcdB;c\xe91X\x1e\xa1\x07\xbe\xb3\x82\x91\x12\xad\x81\xae\xd3JB\xcb\x9bH,\xde]\xdb\xc3GR\xa9\xd6*\x9f\x82\xcdG\xbc.r/9\xa9\xb7\xd4\xde\xc4\x97\xb4Z\xd4\xd1r\xa1\xa1v\xfb\x0e\xc2\x9em\x90\x95\x897:?iOm\x89S\xd8\xe8\x86)\x16 \xd6\xfb\xefp\x932gr\xdf?xP\x0b\x04\xdd,r\xb2\xea;\xc5\xc2\x9c\xe9\xed\x1fv\xa5\x0b\xb3\x90\xe7\x9d2F@_\xef\x17\xcb\xb2\x0c\xc3\x1d\xbd\x81K\xbf\xba\xac[_f\xd3\x7f\xa2\xe7h\x10h\xa9xj\xe79\xd2Y\x94_\xd3\xf0\xa5\x11\xe3]\xa3{Z\xec\xddXh\xca\xd1\xae\xe4\x16\x16u\xc1\xdf\xd3\x1ck-\xa9\xd0|\xe4g\xba9#\xd7,\xc4\x8f|\xd3\x18\x15'G\x8ek(K\x0d|\x0e\xb4\xe7\x14\xf8\xa0\xa6G\xa9\xe1to\x09\x0a!\xed\xbc\x0b\xdeC@}M{\xfd\xec\xbd.\\\x8f\x13ei\xb0\x07\x19\xfeA\xf6\xad\xe0\x8a/\xb2\x11\xa5\xd3\x07\xa1\xee\x00\xdd\x19\xc4\xcc<\x87\xb4\xcd#\xb5\x83X\xbc\xfd3\xd8\x92<\xb6lhh\xf8\xf0\xebG\xc0#\xc9x\xfe\x11\xba52\xec\xf8\xa9g?\x98M\xd2\xd4\xf1<\xbe2_.L\x08\xd0\x93\x9b\xc2\xb8\x93A\xf2\xd0R\x97\x08\xc9s\xde\xfc\x9b\x96\xc4\xa1\xec\xc5z\xdc\x9b!l`2\xb4\x08\xd4\xa3t\x08\xb5\xabA\xdd\xbb\xb2\x04\x1e*\x88At\xd8\x0b\xcaW\x8d\x08\xf6\xcfG\x81\xc8\x0f\x1e\x1c\x81\x19^\xe9\xaa\xa9W71p\xad\x0cAO\xc4\xac\xb1\xf2q\xd3\xeaGdQ\x1b\xcf\xfc\x18\x9c\x1c\xb3i\xbe\x021$*;\xd2\xbfO\x92\xabE\xc7\x18\x81R\x0c\x0a\x96\x98\xdcJ\xbb\x9c\xb5,\x950\xe4ZtT\xde\xbc\xa9h\xae\xda\x12\x1dB\x9a\x80)\xab\x99Z\xdd\x91<\x8d\xdd\\L\xfd\x97\x14\x84\x9b\x95e\xb1\xc9\xae\xdb\x06\xd6\x8d\x95P\x14w\x0c\xec\x1eE1\xfa}\xb7\xf0\x96\xccg\x01\xc5\xf3\xa1H~B\xe6\xaaY@[\x04\xfa\xc5/\xadi\xd1\xb12\x15\x99Q\x1b\x9e\xb1<Sc+\xa3\x91j\xec\x87c\xf8\x1a\xd4uQdw\xf6\xee\xe0\x116\xa1m\x12\xe9\xc0b\xbc\xdc\xc24\xbc\x97\xcd\xdf\x19\xe2\x0c\xea U*\xc9\x8d\xc2!\\;\x7f\xa4\xe4\xa7\x83\xf7\x82\xe6\x1aQ\x0f\xc2fk#h\x11\xcf\x08\xfb=.\xaecP~\xac\xf1\x7fD\"Yy\xf3\xea|\x10\xd4\xda\x93c\x96\xf5Z\xc6]\x14\xa2\xd8Q\x06\x99\xfeV_!\xb8\xe9\xfa\xde\x8f\x9a\xd8\x16\xa5\xd2\xac\xa2\xe8C\x91\xf8\xads\xf7\xd1W\xa4\x0e\x0f\xa4\x1f3\xca\x0e\xba~C\xfdv@\xd6\xc5-<\xb42\xd9\x171\x0e\xbc_F\xab\xef\x9d?<C\xd5E\xf1\xceI\x0a W\x83S\xf3\x92?L\xec\x13\xf1L^\xd1\xc3\x1b\xf0\xe4\x13\x17\x17\xb2\xb2D\x15\xaa\xca\\'\xae<\xa1\x0c0>c\xc9\x09\xb8\xd2\xdd\xa7\x99:\xa1\xf0\\\xb7\x01\xf4\xfb\xef\xe799y\xfe\x82y\xc3T\xc0%\x07\xe4\xe2\x13\xf3\xa7\x91\xbe+\xae\x8b\x95\xc9\x89\xe8\x8d\x1a\x15$6b~7\x93\xbc\x06iz\xf8\xa4\xe5B!\xae\xf4;)\xd3\xa1\x8d\x87\xe6\xd4\x1fDl\xedC\xdd\x8f\x0b\x90\x8f\xe7H\xad\x81\xf1\xe6\xe04\xa13F\xe6'\x1d\x9c\xa8\xe8\xe3U \x17\xc1\xe5\x08^\xa2\x85U|)w\x81g\xccJ\xdf\x9b\x8b\x80\xe2\xc4X\xce+\xab=.\x92\xd2\xbe\xac\xb2\x84\x0ct2X0\x10:\xc0hA\xbdu\x1e\"[\xe07\x1b\x0f\xf6\x86\xf8\xcd\xa3|\xbf\x8b\xec^=v\x87o\xcd\xf2\x01E\x12t@\xea\x1e\xfc\xaf\x94\xb5`\xa6*S\x03*`L\xbb\x8eGzb\xd6\xa5(\x1b\xaf\xbb\x89Y\xf4\x87\x96\xa5\xe3\xab%X\xf4-\xd1A_\xa56\xb5\xbe\x9e\x9f^\x11\x0a>\xc4\x0dl\x1c\xe7\x04\xba^.\xec\xf3\x80E\xb9{\xa4\x9ec\xef\xcb\x1e\xe8\xd9a^\xcerPr\xb7\x88\x91\x11(\xc3\xe1\xe9\xea\x8a\x83G\xc9*0\xf0\xb3LZ\xc3\x06h\x91\xcdT\xe1\xf7\x8f\x02U.m\x13\xc60A\xec!\xfb\xaf\xec\xde\xd6\xfa\xf7\xbf\xc7SM\x9d\x7f\xb8\x89\x07M\xfa\xfag\x057\xf3\x8f\x05G\x03a4\xaf\x04Y#j\xcb\xea\x9f\xba\xe4\xce\x0d#\xd9\xb9\xa7\x9bK\x8c\xe5\xf0fp\xc4\x0cUJ\x7fH2\x95Q\x14\xd4\\\x7f\xcc\x86\xb6\xab:\xa0\xeez\xea?\x95M\xf9Y\xbf\xf6\x17\xae\x12\x9e\x98\xe8x\x9c\xc8\xfe:(\xec3h=\x9b\xf4U\xda\x02\xf2\xcb\xa4\xcb\xb7\x86\xd7\xe0Y\xde?\x98\xffR\xd3K~\xfd\x03\xf8^\x80[\x81\xe2\xe2h\x00&Z>?S\xd3fSl&6\xa1\xd6\xdb\xfb\x92R\xd6\xe6@\x00w\xaf\xe6\xfa\x96U\xe4'Z\xfc\x9a=\xec\xcd\xef\x19\x16\xda\xecR\xb2\xad4p\xa4\xbc\x9b9\xa1\x8b\xe7\xc0\xb7\x9d\xf1\x90\x19\x87\xe2\xc6\xc7\xf4H\xc5\x1a\xb9\xf1oP\xd2\x1c*\xed\xee\xc0Bj\x84\"/\xef\xe5\x8a\xec\xf4\xe0\xd19\xed2\xc2k\xf0[k\xfeb\xce\xb2\xeb\x1f\xf9\xef\x13\xe2\xcf\xfc\xa6}\x92tZs~\x0c\x08\x9f\x1c\x99\x8e\x0eHK\x17\xad\xddZ\xca\x81\xb2\x8aG\xa7\xc6\xe2\x0b\xdc\xba\xfc\xd5\xe8\x90k\x180\xa7\xb1PzT\xdbg\x0e\xb9v\xdf.\x876\x87S]=H\xbfT\x10!\x85\xcd4\x94bp\x15\xcf\x8c\x0d\xe9\x94\xe3\x03\xaeY=\x05Q\xd7A\xc0\xb3Y\xea\x1c\xd8x\xfa\xa2\x8fY!\x0f\xb2d\x97GA\xf8\xe6\x93\xe3\xca\x99\xb5\xe0\xe3\xb0\"\xa9\x85\xa7-\xa5\x02 Y\xd5`\x19Ig\xda\x8bP+\xe0\xa3Cs\x06\x96\x924v\xc0\xe8\x019\x95\xf8q\xb7\x8b\x942o^`\x9e\xd4i\xfa\x8b\xff\xcazBx\xb9j\xe4*\x83\x09\xac?\xce\x8f\xad\xbd\x86;\x14<\x8f\xba\x94\xb8'\x05.\x8b$\xff\xd6\xf2\x83\x84\xadm'\xe2\x87\x04\xc7%9M~\xa4\xd5\x99\xa9\x154D,\x91\xae<\xf8\xc5\xff\x8d\xc6\xf6\xd6\x91`\x8a\x1c\x85Bw\x80M\xb7\x0183)\xae\xde\x0eB\xee\xca\x1fOC\xea\x00\x85n\x09\xeb9E{\xb9\x07}212\xe1\x95\xac\x1e\x97'\xb7\xb7=\x99\xe6LFW\x88-\xaa@\xc2\x9f\xd9\xea3\x0cy7W\xbf\xb5&HuO\xf1:]\xcd\xbcq\xa0'\x9f\xf5\xc2\x92gN\xa2\xed\xe4!\xb9\x18\x89i\xa2\xdd\xc5g\x7fG\x1f\x090\xa8\x8b\xc6\xb7\x92\x81\x1f\x84\x1c\xa6\xa3=\x9d\xd8\x92.\xac\x02I\x91\xa7\xaf17\x94}\xe2\xe19Q`\xad\xb1\x14\x91pn\x1e9~4FX\xc5\xce\xfa\xf6\x81\xd0\xa6\xbf\x18\x0e\x0e\x8c\xa8\xfa\xb4\x8aP\x0a\x13\x00\xfek\x17\xb8\xa6\xc1\xaa\xb6\x88N^\xf4b\x89)\xf3C\xf0\xdf\xbb\x95\x10\xe0\xfe\x83.n3\xfe(+\x96IKY\x18W^\xdb\x87[\x8e\x1aK\x80\x0f\x8f\xd9\x928\xa4\xdee)\xe3\x1cp\x1fY\x00W\x1fx\x844\xa4q\xff\x91\xe8\xf8\x0eU\xf4k\xf9\x01\x16\xbb\xaa\x1bCw\xce\x16\xb7|\x15\xa6\x80Q\xe7\xe9\x03\xc4p\x12\x82\xb2\xe1\x8d\x9b\xf3\xc3\xecfA\x07X\x8c[Sx\x8cn\xb5\x83\xcd\xca\xf2\x92\xd4\xf2.dy,\xf9(d`.\x7f\x0e\x1fLl\x0a\xfc\xda\xd1 x\x9d\x81'\xa6\xab\xeeAyU\xaf?w\xf1D\x08PA\xe9\x84\xa3\xb0P\xb9\xafF}\x0ae\x93\x0c\x90\x08P\x0br\xfc\x1b\x13\xc9x\xad\x1b*\xf9 \xf6\x81P\xfb\xaf~\xda\xb6^\x9665T\xc1u\x16\xad\xbd\xa2\xe7 S\x86I|{y\xfa\xa5\xe43\xfb\xd4\x90\x19cv>\x1e\xdb9(\xf7Hn`\x18\xa77i\xb2\xd7\xdf\x94h\xd3\xf5\xa3\xf7K4\xb0\x18\xb82\xcdw\x93\xe5\xa1I\xee3\x87p\x9b~x\x93[\xf1\x86\x92}\x0e\xe9[we\xaf\xa9\xebV\x13\xd4\x09\x9c\x928\\\x92&\x07S\xbaWe\xe6\xcfUb\xf7\x8d\x06\xe44S\xd0\x0a\xc4;\xab\xc4~\xfb\x9b5\xec9\xb5P\xd2Yn\xb2\xdf|\x17\x82\xde\x11\x1c\x11\x0c6\x17<\x05W\xae\x01\x17N.\xfc=Z\x07]8\xe3\xd9q4p!\x0d\xa4r\x17;\xac\xb0\x1c\xeb\xd6\x8b\xeaD\xa0j\x19\xd9\xf3\x1cJ(\xb5\xe2Vg\x920\xc9\x9da\xca\xce\x116\xcf\xef\xa827\x7f!{\x03\xac\x87\xa85\x94\x8a\xf9\xf5\x933\x8fx'\x03\x01\x1a\xea\x9eb\x19?\xd6\xfd\xe8\xd9k\xee\x8a1\xeb\xea7[+\xfb\x13l\xf8\xa0/\x15\xb2,>B\x16\x0c\x8c\x95 \x81\x13\xecgh\xa1\xb4\xea\x15\x99\xbd\x19\xcd;\xb3\xaa[\xe5\x91<\xca<\x03\xebH\x83\xbc\xb6\xb3\xd1x;A\x02\xb2\x12?s\x14$\x90\xa4\xfc\xfe\xa5\x8b\xa5\x0a\xc2\xb6\xc8\x0c\xfe\xbf\xae\xf4:b\x9d\xcc\xd7\xe5}\x00%\xf6\x1d\x0a\xdd\x1b6\xa8\xb1\x18\x0f\x1d<\x90^\x16\x8b\x94\xd3%\xa44hx\x0e\x9f\xd5`\xe8J\xbf\xc6e\xa6\x1f(\x9d\x85\xd8#\xde\x94\xb2\x07v\xa5\xf3\xcf\xc6G\x1a\xfd\xd4\x1f\x85~0,\xffD\xe9\xab`\xaa\xb8z\xe1\x80\xaa\xad\xd5\xa0\xbb\x0d?/\xdb.\x1eA\x0eUPU\x0a8\xf7-:\x06\xde\xb6\xe4\xc6\x90C\xa8\xad\xeb\xfaL\xf9\x84\xe6ap{!\x8cI\xf8\x1a\xdbAn/\xf6b\xe8\xb4\xd7s\xc1Ig\xdc\xd80\x85\xce\x9e\xa9\x9e\xaa<voA\x92\xa1\xd1\xb9\x9c\x14\xb3\x82\xe8\xb1a\xdd\xc9\x0aOQ\x0c\xd4\x07\xb8\xe3\x16\x052*\xb4}a(\xf8U\x83\xb3\xcc\xb10M\"H\xe0\x1d\x09\xc4\xdbe\x03\x1eF\xfb\x008Q\x912\x82@o}\xd2\x86p\xb4\x87\x8a(\x9fYer\xbd\xaa\x96\xb2)\xed\x04\xf8\xa9\"\x02\xafbz\x04\xc8\x1bi\xad\x15\x1eDrM4\xe3\xf6\x04\xb7\x13\xa6vRRH\xb4A\xfa\x8cm\xaf\x99@\xb8\x95\xe2\xca\xf9\x87\xb0G\xc2\x07\x1c\xa3s\xe5\xe7%\xdb\x12k\x9df`\xa9s\xe5\xb0r\xf7\xbeJ\xf5$\x17\x90&\xcbvG!p\x88\x03\x9a\xc0\x19\x96W\xdbq\xb5\xb5\xac)\xe1\x02\xb4\xf9%\x9c<']\xe9K\xb5\x9e\x94\x7fsh\x0b\xd7A\x99\x87\x1fF\xb2>\xe7}\xa1A\xd7Q)\x11\x0cXj\x12\x03\xba\x97\xbc\xdd\xf3+\xa2r{F\x7f\xe0\xad\x02\x09\x96\xc4\x8aE\xf4\x8f\x9ea;E\x7fc\xf4$\xf4\x18\xcc9\xea\xb5\xdf\x82L\x1a\x84\x03\xfeF\xbbx&\xaaN\xb8\xde\x97N\xf9\xf1M\xa5,\x04U\x8a\xe3\x00`\x81L\xdb\xb1\xa5\x7f\x0em#\xdbQ#\x04\x13\xf3\xdc\xf7OQt\xd8\xff\x81}\x143\xea\x88|\xce>,\xe6j5b\xed\xf5\x89\xfa\xdc2B\xa3\x93rL\x0e\xfa);\x13 \xe4\xd5AL\xb7I\xaa\xcaN)\x97\xe1\xfe$\xef\\^\x1c`'\x93\x88j0\x0e\xf3cEJmfs\xc8\xce\xec\xf0+\x1f\xc7|=\xba\xc0\xd6\x11\xf0CS\x89w^\x8f\x8ft0\xe6g\xa8~\x90$\xbf\x9f\xa4@\x94e\x91\xf6\x08F\xf7\x0e\xa3l\xdb_\xf9\xcd\x86i\xd2\x9c\xde\x82_\x9c\xd5t\x02\xf1!6\xf8\xff\xffy\xfb\xda\xb2z\xc5\xf8\x14\xce#k\xa9eq\x06\xf8TkC\x978\x99\x9e\x1b\xf3\xe8\xc4\xaeV>\xff6\xd4GW9\xfdL\xb6\xb63\x06e\x02YJ\xce\x8a<\xeb)X8\xe4\x00\x02\"\xc5\x8b\xdda\xf1\xc5\xb2\xbaj\xb2\x8e\x14\x0a\xb7\x82\x9cp1\x99\x0e\x94.\xaf\x0a{<dA\x84O+y\xfc\x00\x93\x11v(\x95\xca\x00\xe3\xfc|\x9a.6V\x18\xadN\x9e5\x9fU\xac\x0a\xaa9\xc1\x87(:,\xea\x83\x0f\xbc\x008R\x07\x80\x1c\xf2\x97\x99\xde\xad\xbb\xd7<\x8e\xac\x11\xd3{\x8a\xad\x84\xf5\x1fD=\xdf\xf2\x10X:K\xbbv\xb7`}C\x86a\x7f\x94,VPd\xda\xb3\xae\x1d\xeb\xdcs\xd2\xab\x03q4\xe4'\x18D\x1bG\x14\xf4\x95$ O\x8a\x82\xaf\x80\xc1(T\xe6\xc0\xabOV?\x8aI\x81\xe8\xc1\xde\xd1\xd3\xc4\xc1\xb1ez\x05x=\xe7\xb8\xa8\xd0\x87\x01\xe9h\x0c\xf7\xb7\xb7\x03ci\xeax\xc0\xa0\xb5\x13\xaa\x07I\xc7c\xb2dS\xb1,\x9a\xa5\xd6\xfb\xf23<\xbf\xfd\x8c\x0f\x91\xba\"\xdd!~_\xd7\xc1\xc9\x0d\xcc7\xfaC\xd6\xb9\x9b9\xbf\x9egPY\xf3\xf4;S(\x8d\xcbw\xc5\xa3\xc8\xc7b\x06\xed\x05NM\xaf\xc7 \xd1\x8c\x1eqM\x83\"\xe4\x8e\xe7\xe4\xa2L-\xe6\x92#\xd9\x8e\xf0\xbf&g\xca\xf5\xd7wj\x0eM\x078\xb9[*!qX\x12d\xd7\x98\xca\xba\x88r\x05\xc1X\x87\xe8\xeb\x8b \x0d\xc7I\x9a\xa4\x17\xf3j\xb9a\x17Y\x11\x95\xeeD\x8c\xf2\xd1\x89c\x16~\x00x#^\xbe\xd6\x8b\x87\xf3\xdbI:\x15\xe9{\x90Z}\xdc\xc0\x1d\x95,U#cr-\x05\x00\x99\xce\xa0\x9c\x88\xfe\x8d)3,\xe6\xfa\xa8\x08\x1bNk]%\xe9:\xf4\xe5Q\xbd`\xe8~\x9a>n\xe2\xf0\xc5?\xfd\x08}\xb4\xc13\x84\xfc\x1d\x91\xd5\x99\xb4\xfe/\x8e\xdb\xb9'\x13\xac\xce\xebJg?x\xc1M\x92\xb1/\xbcx\x17\xa9*0c\xdeU\xa6ou(\xca\xffP:U\xdduy4\xec\xeaJ\x82p\x99\x89\xda\x09\x13\xf0\xf8\x1b[\xa5\xeb\xd4S\x9d\x84U\x92\xdb~\xca\xcc\xbdA\xf8*\xdc\x81\x10@\xed\xde\xd5\x86\xcd\xe3\x9b)\xe5\x1e\x00"
PSA.Undertale.Resources.audio_000029ef_int16_44100hz_mono = "]\x00\x00\x01\x00\xfe\x13\x00\x00\x00\x00\x00\x00\x00\x00i~\xda\x00@\x83\xd4\x1aq\xcb\xf6QUD\x11\xceUU\xc4\xd5\x86\xc3\x1b\x82\xcc)\x09\x8d\xcd\xaa\xae\x99\xd8Q\x03\xd6\xd0\x13#<\xed\xac\xbf\xb1\x16O\x81'2\x0c\xb9\x85\x03g\xe3?\x04\xd2\xf7\xcde\x02\" \x0a\xa7\xc5\x00Y\x91\xce\xd5s:l\x1f\x10\x82DxYk\xe02&\x0c\xe6\xa4\xa4}/\xb7\x98a\xe45\xdf~'\xbc\x8a\xe2J4a\xff[\x12\xb1K\xf1\x8c\xe8D6\x1c\xfa\x8b\xa6*?\x8f6\x13o<O\xe8}\x17\xd8L#v\xb97\x97=E\xf2$\x87\xfe+\xd6\x08\xa3\xaf\x07k\xdc3g\x1f\xc5\xf1\xa2\xe4q\xe4\xe8\x91\xd3<,*\xe8\xab\xaaW\x08\x09 B\xe3d\x0a\x1f{\x18\xe6\xd4VFL\xa9x\xd1\x08(v\x82n\xef\xfc\xcd\xc31EV\xb1\xde\x876\x92\x18\x0d\x91\xe1\x94Z\xfc]\x8d\xef\x9c\xd6g\xc2b\xdc\x80\xdd\xed]\x01C\x04Q\x1bxNz\xcd)\x9d\xa7\x82\xd6V\xb7# \xe4&\x92\xd0+=4\xad\xd8p\x14!\x9f%\xb2\xff\xb4\x1f\x89\xabQ\xe6\xc0\xc98\x86G\x0b\x81\x86\xbc\xc8\x05\xd9\xda\xe9\xc8\xa9]7tk~\xe9z\xd1>\x10^\xd2Q$\xdcNy\x8ct\xd6\xda\xd8\x97\xafK\x13h_M\x17\xc2\x10A?\xde\x8a\x9c\xa0p\x97\xe8L\xbe\x1ek\x9a\x15\xe6\x8c|_\x0d\xecZ\xc7[V\xbb\xd3\\\x1cF-\x91\xd3\x11\xb8\xcb\xec\x13\xaa\xfe@0\xfdt\x03\xb29\xbeM\x9cIS\\\x18h\x86\xe6`\x8a\xcd\xca\xc3\xa25\xf0\xce\xfb\xeb\x12P=\xb9\xb2\xddB\x09\x10<h\x9d\x17c\xbd\x9c\xf12\x09ha\xa0\x86%\xb3W\xffm)\xb6Ng\x0b\xe7\xc4\x16\xdb\xbc\\Q\x02\xd3jE\x06\xd0\x94\x7f\xc5,\x1c\xfd(\x16\x08\x18\xee\xe2B\x85&\x02\xdex\x98\xe7&\x94\x8fcM\xcf\xbf\x02\xda\xcd/\xbc\x851#>\xcf65u\xd87;\x80N\x0cp\x16zCe\xa2T\x8c\xe4=\x84\xb3\xc3\x00h\x9a\xf4\x9e\xf6\xb2d\x16'\x05\x08\xc3C\x15\xb9UZ\xc3(=\x07.%.\xef\x0d\xe8\x8c\xa5\xcbGg\xd6K2\xc7\xf1\xfc0pv\x95\xa1\xb7\x84\xf4\xd4\x84\xb44\x9a<-\xee\x0b\xb0\x1e\xb1`\xdf\x04 \xb6p!'\x99\xf8&\xef\xcfL\x84Px\xbf\xb8\xab\x13\xb84\\\xf9_\x86\xdb\x93q\x98\xdd}\x97\x14\xe6\x94\x03\xc3\xf1\xe4\xcez\x13\xf5fi\xdb\xce\x9d\xf2\xb7\xdb9\x19\xee\xe3\xe6\xf8\x8d\xde\x05\x8b\xd5\xc30\xd51m\xfb\xb0\x99\xfa\xbf\x90{\xb3}?8\xcc\x99\xf3\xac\xdb\x92\xcb\xa91\xef2\xba&,~R\x8cJ\xf7t^r\x09\xdb\xbb\x07N\xaa;\xd8\x90\xe6\x87\x90\xd9\xb7\x8ds#\x0a\xf4\xb8|\x1f\xbfw\xf4\xbd\xb7\x18\xdb\xbc\\O\xccn\xda2\xf1\xad\x8a\xe5\x7fV\x0f\x10\xb6gah\x03\xad\xb0E\x8c\xb8\x7f\x0b\xc8\x93-\xfcuc\x82\\\xf8m+\xf1s\x07\xcf\xb6\x91\xfcfs|\x92\x1d\xae\xf1\x05\xb8\xdfeUrI\xed0\x84\x1c\xffo\xd7\xdc|\xb0\x80\xdaK\x8a\x90\x84\x85\xff\xab\xa7z\x02A\xec\xfbS*\x81v#\x83\xd1U\xf3V\xa0\x03Z\x9d\xd7c\xcaZ\x96\x0cHO34\xe5N\x87\xea\xba\xdf\x9b\x07\xd9.\xd8\xbf\x09\x02\xa3\x077\x05\x07$\x0du\xcb\x9bo\x97\xd3\x16\\\xbb\xf2\x0aBL\x0a\xd2\x03\x1f\xbf\x1a\xb2\xe4\xcc\x93\x90\xfb\xd3\x11\x1d\xdf\x813\xdc\x11\xbe+1\xb8\xdd\xb5d$\xf5\x0fnM:\xa9\xdb\x9c\xb6ho\xb8\x83\x0e\xa7\xb0I\xbe\xc1\xd1\x0f\xda\xc592t2C\xee\x07A\xd1\xabt)\x84\x1c\x05\xd8-\xb1\x9f\xee\xb0\xb5/X>@/\xb7\xd8I'\xc6[\xf6m\xd7\xfbhO\x90\xc2\x10\x15\x0c(R\xddY\x93C\xbc\x0dA\x9e\xe8o,/C'\xc0\xea(=\x01G\x8f\xde\x1a*\xf8\xb8?6,\xecE\x92\x16g\x82Z\xaf\x92s\xdf\xd4\xff\x00\x098\"\x1f\xc8\x8d\x04\x1fr\x07n\x86\xba\x1d\xfbF\xaf/\x99\x81\x8f/_\xb1u\xa5k\xa2h\xa4\x99\x89\xc8\xcfPS\xed27W\x9c\xa8\xc1\xd2\xc8\xbf\xb1\xb0i\x9c M\xd8/\xf9\"\x1b\xdf}@\xb663\xb7`\x19\xbe\x1a\xdf\x81\xd6~r:\xf5Z\x10\x0a\x1d\x1c\xfdz@\x1a\xcaI\xc8\x8e\xce\x88\x05\x81\x80\xfeH3\xf9\x15k\xbb-\x0el\xdbj\xa6\xf5\xa44\xbe3W\x85\xd74^3Df\xf8|n\xec\xf4}\xf6Y/\x8ac\xfb\x89(\xea\xfe\x92\x17F\x82\xa2\xde!\x03\xd6\xb3\xf2\xe5\xfenVR{YS\x11\xf13\x92k\xe1\x94\x1d\xfb{\xc7*f>\x88Cc\x1b\xa9P\xceE\x82\x81(y\x1d\x7f?Y\xdf\xad\xb9?2\x14\x0e\x19f\x13\x89\xe54\xedDKb_\x92\x09\xbc\x17x\x13\xc8W;\xad\xbf7R90\xa3\x97\xccT{irR\xe0c*\x16,\xb3`\xf3z?d\x05s\x1b\xc5\xcdx\xe1\x13\xffA\x9e\xea\x8e\xb4\x80n\xc0\xf2\xf7\xd36\xf2;\xf45D3'\xcd\xac\xa1\xad\xa6\xcf\xa6\xad\x120~L#\xfb-\x1a\xde+d\xd4enK\xb9\xd88\xcc '\x11\x1aaD\x17\x0b\xd6`\xda/\x08\xa4\xfc5\xf7\xb2\xdb\xc2\xcd\x10\x95L\x9c_\xf2\xf6\xaf\xf8Mhk#u\xc2\xb6\xed\xb50\xcdH\x7fVE\xe8WGM+\xaf\x8d(\x9ca\xca\xde[\xe59|0&(9\xe25\x81\xd1@\xc2_\xce?T\xe5\xda\x02B\xd7DX\x1e\x99o7\xcd\xc7=\xcc\xfc\x8a\x19`\x88\x7f1@\xa81tAj\xee\xcclr\xe4>\x98\xe1\xe2\xd2\xa8\xde\xcd\x15\xad\x994;\xfd\xf52\x012J\xf02z\x0c\x05\xaf\x83\xd3\xb2\xc7g\xcd\xe7\xb0C\xf2\xae\x88t \x850\xcc\xe3J{\x8c\xc0\xad\x9e\xfe\xc7\xaf\xf9\x1a'\xd8\x7f\xa9-\xf9\xd2\x9d@\xa1\x92\x8f\"\xe6\xffgF'\xc2\xd9,\x1d\xcf\x1e\x0c?\xd2]^\xe1\\1\x1d\xa4 \x1c\xf5\xfb<n\\X\x02f\xc6.?!$\x87\xc5u&@|<\x06\x908b\x80lwRl\xee\x1e\xa6\xff\xfd\xf4\xf1\xd4\x8d:\xfb\x07\xb5O\x13t3F\x8e\xa1\xc5\x81$I|\xe6\x12\x94\xaf<Y\x9dHH\xf9\x12\xb5\x07\xd6\xb1\xed\x9a\xdd.~{\xac\x1c\xa6\xc1P\x00Q\xc2\xff\xad\x17\x08\x1b\xd4\xee\x0c\xebr\xc5\x91\xfc\xb0\x9e\xc8\xf0\xa9\xc4\xbep)2\x1f\xda\x9a\xde\"\x06\x85&\x7f\x19q\x8bl\xf6[\x0aH\x08Sp\xd4\x84Zu\xe38z\"\xf7?4J\xe7\xcd\xd3C\xf7\xca\x10l/\xd6\xde\xb6\x93\xf6\xe9\xc4,oV\xd23\xbf5\xfcg\x11\xf5\xcd\x8cD78g\x11\xa7\x9f\xcc\xaf0;\xc9\x94\xb4!\x01\x0c\xf5\xe7\xb0\x81\xbb\xb0\x922\xb9\xeap\xb9\x16\x98|l\xd5Y\x8eL\x9dJ{f\xf7\x90\xd7bV\x1d\x17\x8f]\x1aTs{\xf3M\xf4\xb6\xeas=?a\xa1\xe0\x82\xb7M\x0e\x0f\x8e\xab\xb4\xd2\xaf\x0fB\xd6H\xdf\xa4\x1f\x15\xb6\xb2\xe5\xab\xce3\x10*m(\xc9\x0d\xf1\xafS\x1b\xfb\xd2\xb4\xd6\xad\x00\x94\xf8\x1ey!%\x00>\x1c\x9c\xd2\xea\xfd\xd6W\xb6\xd4MU\x17\x14+:\xc5\x1a\xd5\xe7\xec\xa0Q|\x83At\xa9iy\x1e\xd2\xc4D\x9c\xcb\xb9>\xe3wc\xda?y\xed\x8b3.\x96\xc9\xef\xc0\xeb\x1e*x7\x13\xf1\x89U\xbd[\\\xbe\xc9\xba\x9a\xf8l\x04M\x9fF\xcd\xa1\xbf\xfcVX$\x8e\xf0\x1d\xa3\x90\xac\x0b$\xa3nn\x1a\xe6\x1c\xa0/g\x1a\xe8x\x8f!@}{\xad\xaf\xbf\xad\xf0\\,b@x0\x04-\xfc\x9e\x0c\x18\x93V\xaa\x04\xf1\x13\x9e\"\xc2Bl\x8b\xec\xcb\xcc@\x80\xcf\xe9&\x86{\xbb\xc5\xec\xca8y-_\x877a\x8d\xf9c\xb5\x0d\xed\x97\xd5\xef\xc3\x07\x01H\xb2\x01\x03\xbe]o\x813AI\x80:\xf9\xa5\xe8z\xb0H\xbd(\x0c\x01\x0dx\xfc\x9a\x0a\xe2\x9dE\x888\xd2\xe8\x1c\x0a\xde\xccJ$\xe3\x03+\x10Xb\x8a\xf5\xffE\xaf\xcf\xb3d\x86`\xfdV\x98\x085\x87\xa1NKT\x9d}\xa0<2\xdfv\x03\x86\x87z\xc2\x82K3!\xc5\xe7p\xad\x0bv\x93\x83\xac\x15\"\xae\xa6\xbb\xe5E\xe5\xf7J3.\xa7A\xfc\x11c~\xee\xf3\x0b\x01\x95\xedCnt\xc2\xf6\xde+j8\xf4\x87Y\xa1t\x86\xae\xafI\xe8i^3r\xe6\x98\x81>\x80\xee\x12wL?\x06cO\x19'\x89\x1d\x0b\x03r\x99\x18\x00\xddJ\x13\xb5\xa4\xc2\xf1\xf4>\xf2@J\xb4\xbe\xef\x0f\xb0\xb2V\xc0\x8f\xee\xb2\xcb4[\xd5\xf6\x8d,b\xb9\x0eT\xac\x15\x89\x86kV\xbc\xc4\xe0P\xe6\xa4\xda\xf5\x12\xecg\x16o\xe7B\x0d\x96\x9a6\xf53\x00\x0e\x9dp\x0f\xb0\xc2H\xd8\x12\x1a$&\x83\xf7\x9d\xb8\xea!\x96j\x9e\xe3\xe8\x9b\xa0;\xc3j\x81\x03-\xa5\xd6-9\x96\xb0q\xba\xbc\x81O\x8f\x8b\xeb\x0dx\xc6\x91\xc0D\x04\xde\x85\x1a\x09,\xed\x8f\xddA\xf1\xee\xe7Q\xc7n\xf0\xf4\xf5\x80\x96\x0aq\xdf<B$\x9bAJ\xcd\x8c\x8d9\xe5]1\xf9O\x91F1\x99\x9aJ\xe9\xf3\xbd\x92\x85\xfcj\xd8.d\x94\xd6\x1fD\x9c?y\xf2\x85b\xed\xa6O9\x06\xd7\xb9q\xf3\xbd\xd8\xb5\xa0\x10H=\x85s\x1d\xae\x17\x9f6\xf3\xdd\xe6\xa4\xba#\xa6\xb3\xeaA\xe6\x86\xb8\x18\xe9\x90\xf2\xc2\xeb\xd1\xa1K\xbdzk\xc3<\xdaAM\x994\xb6Z\xedI\xd01s\xef\xd7\xaa\xb9\x7fs?\xb7\x1e\xfaw\xab\xa6\x06\x8ez\x89\x0b\x1b;\x8f\xf1P\x88\xd2\xdc<Y\x85\xc8G\xb8xJ\xb9j\xcb\x1e|\xfb\xa6\x93g\xb1\xad2\x0e\xb1H\x08\x1a\xa4\x1aG\x04\x95(\xe1v/\xc0j}1\x0f\x0d\x1b% \xda\x12\xdb1\x84\x84\xfd\xde`\xd9\xb0%=IU\x808\xa4\xa0b\xe6\xca,Ef\xa9\x83\\N\x09\xc1g\xe3\x10\xeb\xecD\xd9\x94!\x1f4\x16{\xf3\x90=\xe6\xbd\xe8D\xa5\xb4\x83\xec\x95\xd3\xde\xe2\xde\xa9`\xbe\xfb\x1b\x94\xf2\xed\x0adYk\x83\x98\x05\xbd%B\x1dh\xf0+\xc2\xdba)\xa3\xceW\xa7\xb3\xb8!\xd1P1\xb9\x81\xb8\xef\xa4\x1aU\x9b\xec\xb9s\xabb\xa5\xc7\x85\x1e\x89\x10@\xd0\x19\xf3\x96\x8c8\x97G\xd7\x13QC\x90\xb2A\xeb/R\xc3\xbf\xbf\xdb\xdd\xef(\xaa\x0e\xa66m1\xbf\xa5\x1dd3o\xce\xfe\x1dT\x0c\x8e\x0a\xbe\x87\xcb\xf6}\xbf\xaa\x9c\xcee$\xa9\xbb\x17\xe6\xf3\xf1s\xcaL\xae\xc7\x0aa\xb0}\xb6\x84iE\xe7\xbc\x08\x03\xc7\xecM\xc5\xc6K\xb1vc\xd5\xd12\x91\xde\\*m/w\xec\xa0\x1d\xbb\xda2!t\xef!\xbb\xc4X\xcbc\xa0vUO\xf6Q\xa5\x81W\x9e\xe7)\xd8G\\\xe9\xb8\xab\xc5\xc6\xefU\xbb\x95\xb4\x1b\x11\xf5-\xe7\x168\xf3\x1cu\x14i[\x16T\xb3\xbe\xc0O,\xe0\x0e\xden7\xb9\xceAW_\xad\x12\xa6\x93\x7fA\xbao7\xaa\xf8\x99\xa7\x8c))\xd1\xcb\xbf8\"\xb0\xc7\xf5\xe2H\x9d\x1e\xd9uS\xbc\xf6\xde3\x1av[\xca\x96 a\x0e\xaa5\x95\"\xbbcd\xbf\x85D$\x80\x18\xfd3\x9b\xb3\xd5\x90+\xb8\xe1\xbdL\xfa\x11\xc6\xc5\x06\x05\x97%J/\xfd\xc5\xe8buO\xe0\x04\x14\x9b\x9a\xa1\xf7\xd5\xd7\xf5\xce\x85!\xd4!\xa4\xa0Q[L\x92g\xd1S\xfb\x9b\xb5\xb2\x81\x05\x9a[\x14\x86\x89\x1cU2\x16G\x84\x01\xfa\xbc\xb4>3\x87\x1a\xbfK\x0e\xcaH=Zd\x98\x8fj\xec\xd8\xfd\xfb_\xc8!\xf0\xfb\x96\xc4\xae\x8f#\x845\\\xa4n\xd1\xdaL\xc8\xe5\xb8\xd8\x97P\xa4\xe8\x02\x88\x0f\x82\xc5T2\x0fP\x19\x0a\x0b\xd2\xc2\x7f\x07\x9b\x7f\x86\xa2\x08E\xe4UM\xc9\x8a\x17u5\xc1\xd3\x8f\xbaV\x8a\x00\x83\x87\xa5/\x14\xd1X\xe3\x7f\x96Pu\x02U\x88\x88p\xb8 IP\x16G\x97\x9b\x0b\xba\xa7~gt\x92\xa8Z\xe6\x85>$xTE&\x1c^Ly\x19\x1e\xf7-\xd8\xbfu5\xa0\xb4-\xe0\xca\xd7b\xb6\xefu\xef\x9c\x9apBK\xd0\x16\xdd\x92l\x104\x0bk\xaag\xbf\x18\x1f]\xca6\xbb\x97d\xd2\x1e^\xde\x82\xf7\xc0d\x7f\xc0\x00*W\xb9\x91\x00`\xb1\xaab,\xd3E\x1e\xe4G\xf8C`\x1b\xfeCV\xdc\x00\xba\xfb#\xff\xb9\xbc\x0c\xd3\xf6X\x04\x0f\xe8\xd6\xc1|\xf3\x9c\xe1\xf1`\xcc\x17\xa3FW\x16o\x07\xd3\xbb\x0bs\x05\xc5\xc1\xf2\xb1\x9c\x0bI\xc1S:S\xbcJ\xb1\xbeG\xbeM,^*EJ\xe0\xc4\x8b\xe8\x19\xcd/\xc8\xf3\xc2,\xa6\\Y\xc1\x19y\xfd\xfdF\xd4\xfbl\xca\xac\x8d\x10\x86o\xf7\xfea\xfe:\x15\xc0\x86ow9\xc6\xd6z\x16G\x95Y0\x1a\xea\xe6\xf4\xb5O\x93\xa3b\xb5\xd6\x01%G>N\x1aO\x1d\xc7\xde\xef\x86 \xa4\x0f\xed\xb6lR\x1c|\xfb\xf4\xfd\xee\xa8\xcfs\xa4;\xc3\xad\xa6pe\xd7\xc8\xa255v\xfc\x0b3\xffR\xee\xf0\x18\xd9yS\xc4[g\x85\x96:\xc2\xb0\xe6\xbaN'ld\xdb\x8e\xf0v\xf7r\x14\x93g\xb5\x05l\xe1]t\xa2\xb0\x9b\x8e\xdcC\xb7\xce\xe56f\xa7\xc4\xdd\xba\x992I{\xb3\xb9\xde\xae\xfcl:\x84\xec\xf8$\xce&1^_\x95\xd7CGC\x11\x81\x14\xcc\xb2\xb1\x14PTm\xcf\xd3\x98\x93m\xba\x09Mn-\xdb{\xf2u\xcd!\x98x\xf7\xc6e\xa2\\\xd9j\xf2\xf3\xc0\xeer\x95\x0a\xad\xb7s\x88\xb18\xc23\x81\x8at\xd7Eq\x8e\xd8\xb6&H\xf1\x0a\x94\xf5D\xf4\x11\xc5M \xd27\xeb\xb5\xf3_\xed\x0c.S\x87\xee\xaf\x0b\xcc\xac\xe5\x0c\xe7\xcc\x9fjN\xbf$\\o{\xe3\x88\xf1\x99\xa6$\xb5\xea\x05\xc4i0\xda\xf8,\xc5\xc3YL\x7fq\x878\x0f\xd0\x97\xa0\x8e\x03JR\xe9\xcdz#\x186F\xe9\xdc7Y\xb7\x05#\xc2\x9a\xf1\x07\x07\xb0\xb23\xe5\x06\xa9\x94B^S'\xddt\xd0\x07\x85i\xee5\x8b\xf7\x80\x9c\xeb\x95\x1e\xf1\xde \x99<\x82\x97\xd2)p\xd9\x1d(\xfc\x9f\xe3\x17\x16\xc5\x18\xe9L\xb5\xe0\xda\x82S\xe8\x87\xa0Y\xd5\xd4\x9b\x074E\x98>\xe6\xe8\xf0\xca\x802\xd8>\xb4.\xabB\xa3xOfe\x99Ir\xc4\xc4l\x88|\xab\xe8\xd5\xdb\xf7\xe5\xde\x1d\xe7\xf0`,`Fc\xae\x18\xdc\xc9eA\x97\x89\x8f\x8b\xca/\xb7o\x03\x0df\xc0\xcbel\xa8\xa1\x84m \xb4\xb2~5>\xec\xf3u\xb7\x17S}\xf6\x10\xdej\x82\xc80\xfb\xd1\xb5L@6\xe5\x9e[\xf0/b\x09\xa4A\x9f\xda\x84{\x9a\xa2\xdf\xb7\x10\xbd\xfd\x04\xf7A{^\xa3 XW\x97\xf3\x91=\x8e\xc8\xf8\x819\x07\xbeJ\x02\xf7\x05\xed\xf2Q\x00\xca\xfc/=\x0b\x00\xeb\x12\xc4Uw\xf11Y6/}\xc4\xfeo\x96_\x7f\xca\xe0\xa8T\x95\xc0\xc3Dy\xae\x80\xe5\xe4\x1f\xcb\xe5\x82@&<\xd7\x97O1\x80\xda\xf8m\x9a\xc3\xee\xfetc\x7f\x0c\x8d*\xe1\x04\xd5\x06\xa5\x1b\xaaN\xc3\xa0\x113\xd4r\x16\x15g\x9a\xfb\x8c\x1d\xfd\xf3h\x05H\x16\xc1\x01\x08\xc3\xf0\x0a\x05\x02\xa6v\xf8\x94\xb2\x81\x04Z`0\xcc9hc\x94\xeb\xeeu,>\x94\xce\xd0KU\xae&\xfd\xd2b\x97\xd8\x8e\x0e\xea\x10\x10\x9e\x90\x10\x17\xf2\x80\x9eN\xab\x1bQ\xdb\x89\x94\xb6\xad,X\xd0 r\x91\x00Y\xdb\xe5\x83\x1d\xfdJ\xb6\xc6Z\xda\xc3}r\xf3%j\x8b\x14\xf6\xe2R\x83T\xb2\xc0YD=8\xcb1X\xd8R\xfc\x9d\x8bJ\xc2\xd3\xf1\xd2?\x83\xf3\xb4\x94zv\xa3\xc7m\xb3\xd4\x9e:\xc9)Jn\xdf\xa2\x98sk\x97\x06\xff\x1b\xb0^{\xb7\x97\xf1\x84\x8b\xd4\xd6gw\xb5\x8bex)\x0b\xb4\xa4hKV\x94\xec\xd0G\xee0\x02\xd9\xd3)\x95\x16s\xda4\x9c\xe7\x7f\x0f\xd4c\x9e\x06\xce\xdb->\x9d8\x1c\x1cz\x0fa\xa5\xee@\xf7\xec\x8c\x16?\xe2-!eL\xd8#G\x99o\xfe\xc6\xeb7\x81u \x02{\x9f{\xc0\xef?x\x87\xee\xb5\x1b\x0d\xafg\x13\xd21\xff~\xd1\xd3\xab\xa3\xe7IEB\x94 \x9a\xa2\xcap\xa2\x90\xd6\x84\xcc\xbc<v\xa4\xd2y\xb4\x9b4\xa7h\x8a>m\xe8\xb3\xaa\x97\xcb\xee\xa3\"\x0b/\x9f\\\xba\xd9\xee#\x86s~\x08\x87A\xee\xaaQw\xf9\x80xy{\xaa\x09\x93\x09\x07\x0a\xc4*\xe5\x05:\xfe< \xd7s\xd8z{\xb3\x80\xeb\xa8&\xcf\xb7L\x03[)D\xe6\xd6\x18\xf1\xfe\xe8\x02\x1e\x07\xb8e\x84\xf8\xdaL\x1f\xdeI\x18\x19\xfc\x11i\x17\x9dfl9`q\xb8\xce\x083\xec\xb6\xf2\xb7\x98\xe8>\xd4K\x0f;\x82<3rH\xe7\x01\xb9\x88\xec\xfd\xe6c-kt\x14\x80(\xdf{\x9b\xc0|\xa78\xa7\xa8\xf9\x95\xec\xbd\xc2i\x94m\x8e&\xa6H\xf7\xac0\x0d\xb6G8\xbbn\xc6\x7f\xea\xbfQ\xdc\xc7\xfc{\x8d/\x0a\x99A\xc9\xbfF\xd1\xbd\x1b\x83v\xd0\x81\xd4C\xa5\xa2\xb8\x1a\x86FQ\x18\xfe\x83\x06y\x8e\x0cU\xee\x88\x1c\xc3a\xde\xfaj\xb0LS\x8e\xf49F\xb7c\xec3W\x0a\x11\xed\x07\x02\xccS\xe7 \x896(\xc6\xf5\x01J\x86;\xbe\xa2\xf4\x11\x05_\xb8~\xe4v\x8b\xf5\x89\x08\xc0<\xfbG\x14\xd6]\x06\xc5s\x1c\xbe-a\x03s\xfcu\xdd\x9c\xdb\xfc,\xc77\xa8\xee3Q\xd3\xb0\x83\xdb\x0ed\x8d\xdc\x89\x8a\xc6\xabX\xff\xd2\xe3\x8fo\xa5\xafp\xefX\x8b\x97*v\x83\x84\xe5\xc6\x0b\x89F\xe0>\xcb2\xfc\xc0\x89\x972\xec\xd0\x18|h\x9e<:,.\xe1\x98\xd4\xf2\x93l0/\xf2\xb3\xbac$\x186R\xcb\xc5\x00\xe3\xa9(\xf1\x1e\x93\x19tY\xbd\xc4\xe9\xd1\xbf\x0a\x95\x91a\x09\xc6\x89\x8f\x8f$[\x05\x0b<:\xd3Q\xf6\xb1\xe5\xdfh\x7f\xe3RxN\x1dw\xae\x90Z\xc93\xeb\xb3k'\xbc\xba\xbb\x0b\xed\x16s\xd0\xbb\xa2\x01\xc5*\x7f\xd8\x03LF\x91\xab\xf3\xe7\xa3&t\xde\x9b$\xf2\xea_\xbd\xc7\xb8\xe8\x00"

--addons/tablo_ent/lua/scoresheet/sheets/timeplay/config.lua:
scoresheet.time_header_text = "Top 10 En Fazla Oynayan" // the header text
scoresheet.time_header_text_color = Color( 150, 150, 105 ) // the color of the header bg

scoresheet.time_max_count = 10 // how many people does it show?
scoresheet.time_cut_at_row_count = 5 // how many rows of people untill it cuts to a new line? ( 5 seems to be max )

scoresheet.time_first_place_icon = Material( "icon16/clock.png" ) // the icon next to #1 name

scoresheet.time_font_header = "score_row_header" // the font used for the header of the row, # number - name
scoresheet.time_font_text = "score_row_text" // font used for the text of the row, $ money
--addons/realisticcardealer/lua/realistic_cardealer/languages/sh_language_fr.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/shared/sh_functions.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/client/cl_dealer.lua:
--[[
    Just some information about the table RCD.ClientTable

    RCD.ClientTable["vehicleSelected"] = The vehicle actually selected on the menu with all data
    RCD.ClientTable["carrouselId"] = The id of the vehicle not the unique id but the id on the carousel
    RCD.ClientTable["vehicleId"] = The real unique id on the database of the vehicle 
    RCD.ClientTable["vehiclesBought"] = The table of all vehicle bought into the car dealer curently opened
    RCD.ClientTable["vehiclesTable"] = All vehicle on the cardealer curently opened
    RCD.ClientTable["canCustomize"] = If the vehicle selected have customization settings
    RCD.ClientTable["customize"] = If the player is actually on the customize page
    RCD.ClientTable["NWToSynchronize"] = All NW to synchronise
]]

local checkBoxInfo, vehicleScroll, rightScroll, vehicleModel, rightScrollDown, rightPanel, buyButton

RCD.ClientTable = RCD.ClientTable or {}

RCD.ScrW, RCD.ScrH = ScrW(), ScrH()
hook.Add("OnScreenSizeChanged", "RCD:OnScreenSizeChanged", function()
    RCD.ScrW, RCD.ScrH = ScrW(), ScrH()

    RCD.LoadFonts()
end)

local function reloadInteractionButton(pnl)
    if not IsValid(pnl) then return end

    if not RCD.ClientTable["customize"] then
        local bought = RCD.ClientTable["vehiclesBought"][RCD.ClientTable["vehicleId"]]

        local vehcTable = RCD.ClientTable["vehiclesTable"][RCD.ClientTable["vehicleId"]]
        local price = tonumber(vehcTable["price"])

        if bought then
            local sellPrice = RCD.LocalPlayer:RCDCalculateSellPrice(RCD.ClientTable["vehiclesTable"], RCD.ClientTable["vehicleId"])
            pnl:SetValue(RCD.GetSentence("sell").." ("..RCD.formatMoney(sellPrice)..")")
        else
            if(LocalPlayer():GetNWBool("aracholding", false)) then
                pnl:SetValue("Holding için satın al")
            else
                pnl:SetValue((price <= 0 and RCD.GetSentence("buyForFree") or (string.upper(RCD.GetSentence("buyVehicle"))).." ("..RCD.formatMoney(price)..")"))
            end
           
        end
    end
end

function RCD.SetVehicleParams(vehc, options, customization)
    if not IsValid(vehc) then return end
    if not istable(options) then return end

    if options["canChangeColor"] && istable(customization["vehicleColor"]) then
        
        vehc:SetColor(customization["vehicleColor"])
        vehc.RCDColor = customization["vehicleColor"]
    elseif istable(options["defaultColor"]) then

        vehc:SetColor(options["defaultColor"])
        vehc.RCDColor = options["defaultColor"]
    end

    if options["canChangeSkin"] && isnumber(customization["vehicleSkin"]) then

        vehc:SetSkin(customization["vehicleSkin"])
        if IsValid(vehc.Entity) then vehc.Entity:SetSkin(customization["vehicleSkin"]) end
    elseif isnumber(options["skin"]) then
        
        vehc:SetSkin(options["skin"])
        if IsValid(vehc.Entity) then vehc.Entity:SetSkin(options["skin"]) end
    end

    if options["canChangeBodygroup"] && istable(customization["vehicleBodygroups"]) then
        for k,v in pairs(customization["vehicleBodygroups"]) do
            if IsValid(vehc.Entity) then
                vehc.Entity:SetBodygroup(k, v)
            else
                vehc:SetBodygroup(k, v)
            end
        end
    end
end

function RCD.CountVehicleBought()
    local count = 0
    for k,v in pairs(RCD.ClientTable["vehiclesTable"]) do
        if not RCD.ClientTable["vehiclesBought"][k] then continue end

        count = count + 1
    end
    return count
end

function RCD.ReloadInformations()
    rightScroll:Clear()

    if not RCD.ClientTable["customize"] then
        local vehicleClass = RCD.ClientTable["vehicleSelected"]["class"]

        local vehcPath = RCD.VehiclesList[vehicleClass] or {}
        
        if istable(vehcPath["KeyValues"]) and isstring(vehcPath["KeyValues"]["vehiclescript"]) and file.Exists(vehcPath["KeyValues"]["vehiclescript"], "GAME") then
            local keyValues = file.Read(vehcPath["KeyValues"]["vehiclescript"], "GAME") or ""
    
            local explode = string.Explode("\n", keyValues) or {}
            local realExplode = {}
    
            for k,v in ipairs(explode) do
                local str = v:Trim()
                if str:StartWith('"') or str:StartWith("{") or str:StartWith("}") then
                    table.insert(realExplode, v:TrimRight())
                end
            end
    
            local str = table.concat(realExplode, "\n")
            vehcPath = util.KeyValuesToTable(str)
        end

        local options = RCD.ClientTable["vehicleSelected"]["options"] or {}
        local addonVehc = options["addon"] or "default"

        for k,v in ipairs(RCD.SettingsSlider[addonVehc] or {}) do
            local vehicleSettings = vgui.Create("RCD:SlideVehicle", rightScroll)
            vehicleSettings:Dock(TOP)
            vehicleSettings:DockMargin(RCD.ScrW*0.004, 0, RCD.ScrW*0.004, RCD.ScrH*0.01)
            vehicleSettings:SetText(RCD.GetSentence(v.name))
            vehicleSettings:SetMaxValue(v.max)
            vehicleSettings:SetActualValue(v.func(vehcPath))
        end
    else
        local options = RCD.ClientTable["vehicleSelected"]["options"] or {}
        RCD.ClientTable["canCustomize"] = false

        if options["canChangeColor"] then
            local priceColor = RCD.formatMoney(options["priceColor"] or 0)

            local vehicleColor = vgui.Create("RCD:Accordion", rightScroll)
            vehicleColor:SetSize(RCD.ScrW*0.1949, RCD.ScrH*0.03)
            vehicleColor:Dock(TOP)
            vehicleColor:DockMargin(RCD.ScrW*0.004, 0, RCD.ScrW*0.004, RCD.ScrH*0.005)
            vehicleColor:SetText("colors")
            vehicleColor:SetTextFont("RCD:Font:21")
            vehicleColor:SetRightTextFont("RCD:Font:21")
            vehicleColor:SetRightText(priceColor)
            vehicleColor:SetButtonTall(RCD.ScrH*0.03)
            timer.Simple(0, function()
                if not IsValid(vehicleColor) then return end
                vehicleColor:InitializeCategory("customizationColors", vehicleModel, true)
            end)

            RCD.ClientTable["canCustomize"] = true
        end 

        if options["canChangeUngerglow"] then
            local priceNeon = RCD.formatMoney(options["priceUnderglow"] or 0)

            local vehicleNeon = vgui.Create("RCD:Accordion", rightScroll)
            vehicleNeon:SetSize(RCD.ScrW*0.1949, RCD.ScrH*0.03)
            vehicleNeon:Dock(TOP)
            vehicleNeon:DockMargin(RCD.ScrW*0.004, 0, RCD.ScrW*0.004, RCD.ScrH*0.005)
            vehicleNeon:SetText("underglow")
            vehicleNeon:SetTextFont("RCD:Font:21")
            vehicleNeon:SetRightTextFont("RCD:Font:21")
            vehicleNeon:SetRightText(priceNeon)
            vehicleNeon:SetButtonTall(RCD.ScrH*0.03)
            timer.Simple(0, function()
                if not IsValid(vehicleNeon) then return end
                vehicleNeon:InitializeCategory("customizationNeon", vehicleModel, true)
            end)

            RCD.ClientTable["canCustomize"] = true
        end

        if options["canChangeSkin"] then
            local priceSkin = RCD.formatMoney(options["priceSkin"] or 0)

            local vehicleSkin = vgui.Create("RCD:Accordion", rightScroll)
            vehicleSkin:SetSize(RCD.ScrW*0.1949, RCD.ScrH*0.03)
            vehicleSkin:Dock(TOP)
            vehicleSkin:DockMargin(RCD.ScrW*0.004, 0, RCD.ScrW*0.004, RCD.ScrH*0.005)
            vehicleSkin:SetText("skins")
            vehicleSkin:SetTextFont("RCD:Font:21")
            vehicleSkin:SetRightTextFont("RCD:Font:21")
            vehicleSkin:SetRightText(priceSkin)
            vehicleSkin:SetButtonTall(RCD.ScrH*0.03)
            timer.Simple(0, function()
                if not IsValid(vehicleSkin) then return end
                vehicleSkin:InitializeCategory("customizationSkin", vehicleModel, true)
            end)

            RCD.ClientTable["canCustomize"] = true
        end

        if options["canChangeBodygroup"] then
            local priceBody = RCD.formatMoney(options["priceBodygroup"] or 0)

            local vehicleBodygroup = vgui.Create("RCD:Accordion", rightScroll)
            vehicleBodygroup:SetSize(RCD.ScrW*0.1949, RCD.ScrH*0.03)
            vehicleBodygroup:Dock(TOP)
            vehicleBodygroup:DockMargin(RCD.ScrW*0.004, 0, RCD.ScrW*0.004, RCD.ScrH*0.005)
            vehicleBodygroup:SetText("bodygroups")
            vehicleBodygroup:SetTextFont("RCD:Font:21")
            vehicleBodygroup:SetRightTextFont("RCD:Font:21")
            vehicleBodygroup:SetRightText(priceBody)
            vehicleBodygroup:SetButtonTall(RCD.ScrH*0.03)
            timer.Simple(0, function()
                if not IsValid(vehicleBodygroup) then return end
                vehicleBodygroup:InitializeCategory("customizationBodygroups", vehicleModel, true)
            end)

            RCD.ClientTable["canCustomize"] = true
        end

        if options["canBuyNitro"] then
            local priceNitro = RCD.formatMoney(options["priceNitro"]) or 0

            local vehicleNitro = vgui.Create("RCD:Accordion", rightScroll)
            vehicleNitro:SetSize(RCD.ScrW*0.1949, RCD.ScrH*0.03)
            vehicleNitro:Dock(TOP)
            vehicleNitro:DockMargin(RCD.ScrW*0.004, 0, RCD.ScrW*0.004, RCD.ScrH*0.005)
            vehicleNitro:SetText("nitro")
            vehicleNitro:SetTextFont("RCD:Font:21")
            vehicleNitro:SetRightTextFont("RCD:Font:21")
            vehicleNitro:SetRightText(priceNitro)
            vehicleNitro:SetButtonTall(RCD.ScrH*0.03)
            timer.Simple(0, function()
                if not IsValid(vehicleNitro) then return end
                vehicleNitro:InitializeCategory("customizationNitro", vehicleModel, true)
            end)

            RCD.ClientTable["canCustomize"] = true
        end
    end
end

local function setVehicleSelected(id, withoutAnimations)
    if not IsValid(vehicleModel) then return end

    for k,v in pairs(vehicleModel.Vehicles or {}) do
        if vehicleModel.Vehicles[k].RCDId != id then continue end

        if not istable(RCD.ClientTable["vehiclesTable"]) then return end
        if not istable(RCD.ClientTable["vehiclesTable"][k]) then continue end

        if RCD.ClientTable["customize"] && not istable(RCD.ClientTable["vehiclesBought"][k]) then continue end

        RCD.ClientTable["vehicleId"] = v.RCDInfo["id"]
        RCD.ClientTable["vehicleSelected"] = RCD.ClientTable["vehiclesTable"][k]
        RCD.ClientTable["carrouselId"] = id
        RCD.ClientTable["disableModelAnimations"] = withoutAnimations or false

        local vehButton = RCD.ClientTable["vehicleButtons"][id]
        if withoutAnimations then
            vehicleScroll:ScrollToChild(vehButton)
            vehicleScroll.RCDScrollPos, vehicleScroll.RCDLerpScrollPos = vehicleScroll.OffsetX, vehicleScroll.OffsetX
        else
            vehicleScroll.RCDScrollPos, vehicleScroll.RCDLerpScrollPos = (select(1, vehicleScroll.pnlCanvas:GetChildPosition(vehButton)) + vehButton:GetWide()*0.875) - vehicleScroll:GetWide()*0.5, vehicleScroll.OffsetX
        end

        local params = RCD.ClientTable["vehicleSelected"]["options"]
        vehicleModel:SetParams(params, vehicleModel.Vehicles[k])
        vehicleModel:SetFocusEntity(vehicleModel.Vehicles[k], withoutAnimations)
        RCD.ReloadInformations()
        
        if RCD.ClientTable["vehiclesBought"] and RCD.ClientTable["vehiclesBought"][k] then
            RCD.SetVehicleParams(vehicleModel.Vehicles[k], params, RCD.ClientTable["vehiclesBought"][k]["customization"])
        end

        break
    end
end

--[[ Create all wheels on all dmodel for some models ]]--
function RCD.GenerateWheels(ent, class)
    if not IsValid(ent) then return end

    local tbl = list.Get("simfphys_vehicles")
    if not tbl[class] then return end

    if ent["wheels"] then
        for k, wheel in ipairs(ent["wheels"]) do
            if not IsValid(wheel) then continue end

            wheel:Remove()
            ent["wheels"] = {}
        end
    end

    if tbl[class]["Members"] && tbl[class]["Members"].CustomWheels then
        local wheelsPos = {
            tbl[class]["Members"].CustomWheelPosFL,
            tbl[class]["Members"].CustomWheelPosFR,
            tbl[class]["Members"].CustomWheelPosRL,
            tbl[class]["Members"].CustomWheelPosRR
        }

        local wheelsAngle = tbl[class]["Members"].CustomWheelAngleOffset or RCD.Constants["angleOrigin"]
        local CustomWheelModel = tbl[class]["Members"].CustomWheelModel or "models/props_phx/wheels/magnetic_small.mdl"

        ent["wheels"] = {}
        for i=1, 4 do
            if not isvector(wheelsPos[i]) then continue end
            
            ent["wheels"][i] = ClientsideModel(CustomWheelModel, RENDERGROUP_OPAQUE)
            ent["wheels"][i]:SetNoDraw(true)
            ent["wheels"][i]:SetPos(ent:LocalToWorld(wheelsPos[i]))
            ent["wheels"][i]:SetAngles(ent:LocalToWorldAngles(wheelsAngle) + (i%2 == 0 and RCD.Constants["angleWheel"] or RCD.Constants["angleOrigin"]))
            
            if tbl[class].SpawnAngleOffset then
                ent["wheels"][i]:SetAngles(ent["wheels"][i]:GetAngles() + Angle(0, tbl[class].SpawnAngleOffset, 0))
            end

            ent["wheels"][i]:SetParent(ent)
        end
    else
        local wheelsPos = {
            ent:GetAttachment(ent:LookupAttachment("wheel_fl")),
            ent:GetAttachment(ent:LookupAttachment("wheel_fr")),
            ent:GetAttachment(ent:LookupAttachment("wheel_rl")),
            ent:GetAttachment(ent:LookupAttachment("wheel_rr")),
        }

        local CustomWheelModel = (tbl[class].CustomWheelModel_R and (index == 3 or index == 4 or index == 5 or index == 6)) and tbl[class].CustomWheelModel_R or tbl[class].CustomWheelModel

        for i=1, 4 do
            if not isvector(wheelsPos[i]) then continue end
            
            ent["wheels"][i] = ClientsideModel(CustomWheelModel, RENDERGROUP_OPAQUE)
            ent["wheels"][i]:SetNoDraw(true)
            ent["wheels"][i]:SetPos(ent:LocalToWorld(wheelsPos[i]["Pos"]))
            ent["wheels"][i]:SetAngles(ent:LocalToWorldAngles(wheelsPos[i]["Ang"]))
            ent["wheels"][i]:SetParent(ent)
        end
    end
end

--[[ Reload the right scroll on the customization and the buyer menu ]]
function RCD.ReloadVehiclesList(customize)
    if not IsValid(vehicleScroll) then return end
    
    RCD.ClientTable["customize"] = customize
    
    vehicleScroll:Clear()
    
    local carrouselIds, carrouselId = {}, 0

    RCD.ClientTable["vehicleButtons"] = {}
    for k,v in SortedPairsByMemberValue(RCD.ClientTable["vehiclesTable"], "price", false) do
        vehicleModel.Vehicles = vehicleModel.Vehicles or {}
        
        if IsValid(vehicleModel.Vehicles[v.id]) then 
            vehicleModel.Vehicles[v.id]:Remove() 
            vehicleModel.Vehicles[v.id] = nil
        end
        
        if RCD.ClientTable["vehicleId"] != v.id or customize then
            if RCD.ClientTable["vehiclesBought"][k] && not checkBoxInfo["owned"] then continue end
            if not RCD.ClientTable["vehiclesBought"][k] && not checkBoxInfo["forSale"] then continue end
            if not checkBoxInfo["allowed"] && not RCD.LocalPlayer:RCDCanAccessVehicle(v.id) then continue end
            if RCD.ClientTable["customize"] && not RCD.ClientTable["vehiclesBought"][k] then continue end
        end

        carrouselId = carrouselId + 1
        carrouselIds[v.id] = carrouselId

        local vehc = RCD.VehiclesList[v.class] or {}
        local model = vehc["Model"] or ""

        local vehicleButton = vgui.Create("RCD:VehicleButton", vehicleScroll)
        vehicleButton:SetSize(RCD.ScrW*0.1949, RCD.ScrH*0.05)
        vehicleButton:InclineButton(RCD.ScrW*0.055)
        vehicleButton:Dock(LEFT)
        vehicleButton:DockMargin(0, 0, -RCD.ScrW*0.048, 0)
        vehicleButton:SetButtonColor(RCD.Colors["white30"])
        vehicleButton:SetModel(model)
        vehicleButton:SetPrice(v.price)
        vehicleButton:SetName(v.name)
        vehicleButton:SetUniqueId(v.id)
        vehicleButton.vehicleModel:RCDSetFOVBase(55)
        vehicleButton.DoClick = function()
            setVehicleSelected(vehicleModel.Vehicles[v.id].RCDId)
            reloadInteractionButton(buyButton)

            RCD.ClientTable["carouselId"] = carouselId
        end
        vehicleButton.vehicleModel.DoClick = function()
            setVehicleSelected(vehicleModel.Vehicles[v.id].RCDId)
            reloadInteractionButton(buyButton)
            
            RCD.ClientTable["carouselId"] = carouselId
        end
        vehicleButton.Think = function()
            vehicleButton:SetSelectedButton(v.id == RCD.ClientTable["vehicleId"])
        end
        
        vehicleScroll:AddPanel(vehicleButton)
        RCD.ClientTable["vehicleButtons"][carrouselId] = vehicleButton
        
        vehicleModel.Vehicles[v.id] = ClientsideModel(model, RENDER_GROUP_OPAQUE)
        
        if not IsValid(vehicleModel.Vehicles[v.id]) then continue end
        vehicleModel.Vehicles[v.id]:SetNoDraw(true)
        vehicleModel.Vehicles[v.id]:SetPos(Vector(0, 500*carrouselId-500, 0))
        vehicleModel.Vehicles[v.id]:AddEffects(EF_BONEMERGE)
        vehicleModel.Vehicles[v.id].RCDColor = RCD.Colors["white"]
        vehicleModel.Vehicles[v.id].RCDUnderglow = nil
        vehicleModel.Vehicles[v.id].RCDId = carrouselId
        vehicleModel.Vehicles[v.id].RCDInfo = v
        if isangle(v.options["angle"]) then
            vehicleModel.Vehicles[v.id]:SetAngles(v.options["angle"] + RCD.Constants["angleParams"])
        end

        if v.options["addon"] == "simfphys" then
            RCD.GenerateWheels(vehicleModel.Vehicles[v.id], v.class)
            RCD.GenerateWheels(vehicleButton.vehicleModel.Entity, v.class)
        end
        
        vehicleButton.vehicleModel:SetParams(v.options, vehicleButton.vehicleModel.Entity, true, true)
        RCD.SetVehicleParams(vehicleModel.Vehicles[v.id], v.options or {}, (RCD.ClientTable["vehiclesBought"][v.id] and RCD.ClientTable["vehiclesBought"][v.id]["customization"] or {}))
        RCD.SetVehicleParams(vehicleButton.vehicleModel, v.options or {}, (RCD.ClientTable["vehiclesBought"][v.id] and RCD.ClientTable["vehiclesBought"][v.id]["customization"] or {}))
    end
    if isnumber(RCD.ClientTable["vehicleId"]) && carrouselIds[RCD.ClientTable["vehicleId"]] then
        setVehicleSelected(carrouselIds[RCD.ClientTable["vehicleId"]], true)
    else
        setVehicleSelected(1, true)
    end

    if carrouselId < 6 then
        for i=1, 6-carrouselId do
            local fakeButton = vgui.Create("RCD:VehicleButton", vehicleScroll)
            fakeButton:SetSize(RCD.ScrW*0.1949, RCD.ScrH*0.05)
            fakeButton:InclineButton(RCD.ScrW*0.055)
            fakeButton:Dock(LEFT)
            fakeButton:DockMargin(0, 0, -RCD.ScrW*0.048, 0)
            fakeButton:SetButtonColor(RCD.Colors["white30"])
            fakeButton:SetFake(true)

            vehicleScroll:AddPanel(fakeButton)
        end
    end

    RCD.ReloadButtons()
end

--[[ Reload buy/sell/customize buttons ]]
function RCD.ReloadButtons()
    rightScroll:DockMargin(0, RCD.ScrH*0.008, 0, RCD.ScrH*0.11)
    rightScrollDown:DockMargin(0, RCD.ScrH*0.496, 0, 0)
    rightScrollDown:Clear()




    local spawnButton = vgui.Create("RCD:Button", rightScrollDown)
    spawnButton:SetSize(rightPanel:GetWide()-RCD.ScrW*0.01, RCD.ScrW*0.026)
    spawnButton:Dock(TOP)
    spawnButton:DockMargin(RCD.ScrW*0.004, 0, RCD.ScrW*0.004, RCD.ScrH*0.007)
    spawnButton:SetIconMaterial(RCD.Materials["icon_leave"])
    spawnButton:SetHoveredColor(RCD.Colors["grey30"])
    spawnButton:SetBackgroundColor(RCD.Colors["grey30"])
    spawnButton.RCDMinMaxLerp = {20, 40}
    spawnButton:SetValue(RCD.GetSentence("spawnVehicle"))
    spawnButton.Think = function()
        if RCD.LocalPlayer:RCDIsVehicleSpawned(RCD.ClientTable["vehicleId"]) then
            spawnButton:SetValue(RCD.GetSentence("bringBack"))
        else
            local bought = RCD.ClientTable["vehiclesBought"][RCD.ClientTable["vehicleId"]]
    
            spawnButton:SetValue((bought and RCD.GetSentence("spawnVehicle") or RCD.GetSentence("testVehicle")))
        end
    end
    spawnButton.DoClick = function()
        if RCD.LocalPlayer:RCDIsVehicleSpawned(RCD.ClientTable["vehicleId"]) then
            net.Start("RCD:Main:Client")
                net.WriteUInt(4, 4)
                net.WriteUInt(RCD.ClientTable["vehicleId"], 32)
            net.SendToServer()
        else
            local bought = RCD.ClientTable["vehiclesBought"][RCD.ClientTable["vehicleId"]]
    
            net.Start("RCD:Main:Client")
                net.WriteUInt((bought and 2 or 3), 4)
                net.WriteUInt(RCD.ClientTable["vehicleId"], 32)
            net.SendToServer()
        end
    end

    buyButton = vgui.Create("RCD:Button", rightScrollDown)
    buyButton:SetSize(rightPanel:GetWide()-RCD.ScrW*0.01, RCD.ScrW*0.026)
    buyButton:Dock(TOP)
    buyButton:DockMargin(RCD.ScrW*0.004, 0, RCD.ScrW*0.004, RCD.ScrH*0.007)
    buyButton:SetIconMaterial(RCD.Materials["icon_money"])
    buyButton:SetHoveredColor(RCD.Colors["white80"])
    buyButton:SetBackgroundColor(RCD.Colors["purple120"])
    buyButton.RCDMinMaxLerp = {60, 120}
    buyButton.DoClick = function(self)
        if RCD.ClientTable["customize"] then
            local hasColor = istable(RCD.customization["vehicleColor"])
            local hasUnderglow = istable(RCD.customization["vehicleUnderglow"])

            local vehicleColor = RCD.Colors["white"] 
            if hasColor then
                vehicleColor = Color(RCD.customization["vehicleColor"].r, RCD.customization["vehicleColor"].g, RCD.customization["vehicleColor"].b)
            end

            local vehicleUnderglow = RCD.Colors["white"] 
            if hasUnderglow then
                vehicleUnderglow = Color(RCD.customization["vehicleUnderglow"].r, RCD.customization["vehicleUnderglow"].g, RCD.customization["vehicleUnderglow"].b)
            end

            net.Start("RCD:Main:Client")
                net.WriteUInt(5, 4)
                net.WriteUInt(RCD.ClientTable["vehicleId"], 32)
                net.WriteUInt((RCD.customization["vehicleSkin"] or 0), 8)
                net.WriteUInt((RCD.customization["vehicleNitro"] or 0), 2)
                net.WriteBool(hasColor)
                net.WriteColor(vehicleColor)
                net.WriteBool(hasUnderglow)
                net.WriteColor(vehicleUnderglow)
                local vehicleBodygroups = RCD.customization["vehicleBodygroups"] or {}
                net.WriteUInt(table.Count(vehicleBodygroups), 8)
                for k,v in pairs(vehicleBodygroups) do
                    net.WriteUInt(k, 8)
                    net.WriteUInt(v, 8)
                end 
            net.SendToServer()
        else
            local check = RCD.LocalPlayer:RCDCanAccessVehicle(RCD.ClientTable["vehicleId"])

            if self:GetValue() == RCD.GetSentence("areYouSure") or not check then
                local bought = RCD.ClientTable["vehiclesBought"][RCD.ClientTable["vehicleId"]]
                
                net.Start("RCD:Main:Client")
                    net.WriteUInt(1, 4)
                    net.WriteBool(bought)
                    net.WriteUInt(RCD.ClientTable["vehicleId"], 32)
                net.SendToServer()

                return
            end

            if check then
                self:SetValue(RCD.GetSentence("areYouSure"))
            end

            timer.Simple(1, function()
                reloadInteractionButton(buyButton)
            end)
        end
    end
    buyButton.Think = function(self)
        if RCD.ClientTable["customize"] then
            local price = tonumber(RCD.ClientTable["priceCustomization"]) or 0

            self:SetValue(RCD.GetSentence("customize"):format(RCD.formatMoney(price)))
        end
    end



    reloadInteractionButton(buyButton)
end

hook.Add("RCD:VehicleSold", "RCD:VehicleSold:ReloadButton", function(vehicleId)
    reloadInteractionButton(buyButton)
    RCD.ReloadVehiclesList()
end)

hook.Add("RCD:VehicleBought", "RCD:VehicleBought:ReloadButton", function(vehicleId)
    reloadInteractionButton(buyButton)
end)

function RCD.BaseFrame(base, noAnim)
    if IsValid(RCDMainFrame) then RCDMainFrame:Remove() end
    
    RCDMainFrame = vgui.Create("DFrame")
    RCDMainFrame:SetSize(RCD.ScrW, RCD.ScrH)
    RCDMainFrame:SetDraggable(false)
    RCDMainFrame:ShowCloseButton(false)
    RCDMainFrame:MakePopup()
    RCDMainFrame:SetTitle("")
    RCDMainFrame.startTime = SysTime()
    RCDMainFrame.Paint = function(self,w,h)
        RCD.DrawBlur(self, 15)
        Derma_DrawBackgroundBlur(self, (!noAnim and self.startTime or 0))

        surface.SetDrawColor(RCD.Colors["white220"])
        surface.SetMaterial(RCD.Materials["background"])
        surface.DrawTexturedRect(0, 0, w, h)

        surface.SetFont("RCD:Font:01")
        local textSize = surface.GetTextSize(base)
        
        draw.DrawText(base, "RCD:Font:01", w*0.04, h*0.04, RCD.Colors["white"], TEXT_ALIGN_LEFT)
        draw.DrawText(" - "..(RCD.ClientTable["customize"] and RCD.GetSentence("customizationTitle") or RCD.GetSentence("mainMenuTitle")), "RCD:Font:02", w*0.043 + textSize, h*0.04, RCD.Colors["white"], TEXT_ALIGN_LEFT)
        draw.DrawText((RCD.ClientTable["customize"] and RCD.GetSentence("modifyVehicle") or RCD.GetSentence("buySaleVehicles")), "RCD:Font:03", w*0.04, h*0.09, RCD.Colors["white100"], TEXT_ALIGN_LEFT)
        
        surface.SetFont("RCD:Font:05")
        local textSize = surface.GetTextSize(RCD.ClientTable["vehicleSelected"]["name"])
        
        local check = !RCD.LocalPlayer:RCDCanAccessVehicle(RCD.ClientTable["vehicleId"])
        RCD.DrawCircle(w*0.408 - textSize/2, h*0.681, h*0.011, 0, 360, RCD.Colors[(check and "yellow" or "purple")])

        surface.SetDrawColor(RCD.Colors["white"])
        surface.SetMaterial(RCD.Materials[(check and "icon_star" or "icon_check")])
        surface.DrawTexturedRect(w*0.408 - textSize/2 - h*0.015/2, h*0.681-h*0.015/2, h*0.015, h*0.015)

        draw.SimpleText(RCD.ClientTable["vehicleSelected"]["name"], "RCD:Font:05", w*0.42, h*0.68, RCD.Colors["white"], TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

        RCD.DrawNotification()
    end
end

function RCD.MainMenu(customize, noAnim)
    RCD.ClientTable["customize"] = customize

    if not noAnim then
        RCD.ClientTable["vehicleId"] = nil
        RCD.ClientTable["disableModelAnimations"] = false
    end

    RCD.BaseFrame(string.upper(RCD.GetSentence("carDealer")), noAnim)
    if RCD.ClientTable["customize"] then RCD.ClientTable["priceCustomization"] = 0 end

    --[[ This scroll permit to add all button on the top right of the screen ]]
    local buttonScroll = vgui.Create("DHorizontalScroller", RCDMainFrame)
    buttonScroll:SetSize(RCD.ScrW*0.3, RCD.ScrH*0.046)
    buttonScroll:SetPos(RCD.ScrW*0.68, RCD.ScrH*0.05)

    for k,v in ipairs(RCD.BaseButton) do
        local mainButton = vgui.Create("RCD:SlideButton", buttonScroll)
        mainButton:SetSize(RCD.ScrH*0.062, RCD.ScrH*0.05)
        mainButton:InclineButton(RCD.ScrW*0.01)
        mainButton:Dock(RIGHT)
        mainButton:DockMargin(-RCD.ScrW*0.007, 0, 0, 0)
        mainButton:SetButtonColor(RCD.Colors["purple120"])
        mainButton:SetIconColor(RCD.Colors["white80"])
        mainButton:SetIconMaterial(v.mat)
        mainButton.DoClick = function()
            v.func(RCDMainFrame)
        end
        mainButton.MinMaxLerp = {60, 120}
    end
    
    local className = RCD.ClientTable["vehicleSelected"]["class"]

    --[[ Create the money button on the top right of the screen ]]
    local moneyButton = vgui.Create("RCD:SlideButton", buttonScroll)
    moneyButton:SetSize(RCD.ScrH*0.17, RCD.ScrH*0.05)
    moneyButton:InclineButton(RCD.ScrW*0.01)
    moneyButton:Dock(RIGHT)
    moneyButton:DockMargin(-RCD.ScrW*0.007, 0, 0, 0)
    moneyButton:SetButtonColor(RCD.Colors["purple120"])
    moneyButton:SetIconColor(RCD.Colors["white80"])
    moneyButton:SetCustomIconPos(moneyButton:GetWide()*0.14)
    moneyButton:SetIconMaterial(RCD.Materials["icon_money"])
    moneyButton.PaintOver = function(self,w,h)
        local money = RCD.formatMoney(RCD.LocalPlayer:RCDGetMoney())
        moneyButton:SetValue(money)

        surface.SetFont("RCD:Font:04")
        local size = surface.GetTextSize(money)
        
        moneyButton:SetSize(RCD.ScrW*0.05 + size, RCD.ScrH*0.05)
    end
    moneyButton.MinMaxLerp = {60, 120}

    local vehc = RCD.VehiclesList[className] or {}
    local model = vehc["Model"] or ""

    vehicleModel = vgui.Create("RCD:DModel", RCDMainFrame)
    vehicleModel:SetModel(model)
    vehicleModel:SetSize(RCD.ScrW*0.81, RCD.ScrH*0.6)
    vehicleModel:SetPos(0, RCD.ScrH*0.1)
    vehicleModel:SetFOV(45)

    vehicleModel.PaintOver = function(self,w,h)
        if not RCD.LocalPlayer:RCDCanAccessVehicle(RCD.ClientTable["vehicleId"]) then
            surface.SetDrawColor(RCD.Colors["white100"])
            surface.SetMaterial(RCD.Materials["lock"])
            surface.DrawTexturedRect(w/2-h*0.14, h/2-h*0.15, h*0.29, h*0.3)
        end
    end

    local lerpVehicle = RCD.ClientTable["carrouselId"]
    function vehicleModel:DrawModel()
        local curparent = self
        local leftx, topy = self:LocalToScreen(0, 0)
        local rightx, bottomy = self:LocalToScreen(self:GetWide(), self:GetTall())
        while (curparent:GetParent() != nil) do
            curparent = curparent:GetParent()
    
            local x1, y1 = curparent:LocalToScreen(0, 0)
            local x2, y2 = curparent:LocalToScreen(curparent:GetWide(), curparent:GetTall())
    
            leftx = math.max(leftx, x1)
            topy = math.max(topy, y1)
            rightx = math.min(rightx, x2)
            bottomy = math.min(bottomy, y2)
            previous = curparent
        end
    
        render.SetScissorRect(leftx, topy, rightx, bottomy, true)
        
        for k,v in pairs(self.Vehicles or {}) do
            local color = v.RCDColor or color_white

            render.SetColorModulation(color.r/255, color.g/255, color.b/255)
            v:DrawModel()

            if istable(v.wheels) then
                for k, wheel in ipairs(v.wheels) do
                    wheel:DrawModel()  
                end
            end       
        end
        
        local mn, mx = self.Entity:GetRenderBounds()
        local size = 0
        size = math.max(size, math.abs(mn.x) + math.abs(mx.x))
        size = math.max(size, math.abs(mn.y) + math.abs(mx.y))
        size = math.max(size, math.abs(mn.z) + math.abs(mx.z))

        lerpVehicle = RCD.ClientTable["disableModelAnimations"] and RCD.ClientTable["carrouselId"] or Lerp(FrameTime()*3, lerpVehicle, RCD.ClientTable["carrouselId"])
        
        vehicleModel:SetCamPos(Vector(200+size, 500*lerpVehicle-500, 110))
        vehicleModel:SetLookAt(Vector(0, 500*lerpVehicle-500, 0) + self.RCDLerpVector)

        render.SetScissorRect(0, 0, 0, 0, false)
    end

    local downPanel = vgui.Create("DPanel", RCDMainFrame)
    downPanel:SetSize(RCD.ScrW*0.968, RCD.ScrH*0.035)
    downPanel:SetPos(0, RCD.ScrH*0.741)
    downPanel.Paint = function(self,w,h)
        self.RCDPoly = {
            {x = 0, y = 0},
            {x = w, y = 0},
            {x = w-RCD.ScrW*0.012, y = h},
            {x = 0, y = h},
        }

        surface.SetDrawColor(RCD.Colors["white30"])
        draw.NoTexture()
        surface.DrawPoly(self.RCDPoly)
        
        draw.SimpleText(RCD.GetSentence("vehicleOwned"), "RCD:Font:06", w*0.066, h/2, RCD.Colors["white"], TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
        draw.SimpleText(RCD.GetSentence("vehicleForSale"), "RCD:Font:06", w*0.186, h/2, RCD.Colors["white"], TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
        draw.SimpleText(RCD.GetSentence("allowed"), "RCD:Font:06", w*0.306, h/2, RCD.Colors["white"], TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end
    
    rightPanel = vgui.Create("DPanel", RCDMainFrame)
    rightPanel:SetSize(RCD.ScrW*0.156, RCD.ScrH*0.6)
    rightPanel:SetPos(downPanel:GetWide()-rightPanel:GetWide(), RCD.ScrH*0.128)
    rightPanel.Paint = function(self,w,h)
        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["white30"])

        surface.SetDrawColor(RCD.Colors["white30"])
        surface.SetMaterial(RCD.Materials["logo"])
        surface.DrawTexturedRect(w/2-h*0.15, h/2-h*0.15, h*0.3, h*0.3)
    end

    local lerpText = 0
    --[[ This scroll permit to draw all settings of the vehicle ]]
    rightScroll = vgui.Create("RCD:DScroll", rightPanel)
    rightScroll:Dock(FILL)
    rightScroll:DockMargin(0, RCD.ScrH*0.008, 0, (RCD.ClientTable["customize"] and RCD.ScrH*0.06 or RCD.ScrH*0.1))
    rightScroll.PaintOver = function(self,w,h)
        local drawText = (not RCD.ClientTable["canCustomize"] && RCD.ClientTable["customize"])
        
        if drawText then
            lerpText = Lerp(FrameTime()*3, lerpText, drawText and 255 or 0)
            draw.DrawText(RCD.GetSentence("cantCustomizeVehicle"), "RCD:Font:04", w*0.5, h*0.06, ColorAlpha(RCD.Colors["white"], lerpText), TEXT_ALIGN_CENTER)
        else
            lerpText = 0
        end
    end

    --[[ This scroll permit to draw buy/spawn/sell buttons ]]
    rightScrollDown = vgui.Create("DScrollPanel", rightPanel)
    rightScrollDown:Dock(FILL)
    rightScrollDown:GetVBar():SetWide(0)

    RCD.ReloadInformations()

    --[[ This is the fake button just for the design we don't need to touch it ]]
    local fakeButton = vgui.Create("RCD:SlideButton", RCDMainFrame)
    fakeButton:SetSize(RCD.ScrW*0.195, RCD.ScrH*0.15)
    fakeButton:SetPos(-RCD.ScrW*0.1225, RCD.ScrH*0.787)
    fakeButton:InclineButton(RCD.ScrW*0.055)
    fakeButton:SetButtonColor(RCD.Colors["white30"])
    fakeButton:SetIconMaterial(nil)
    fakeButton.MinMaxLerp = {5, 5}

    local leftArrow = vgui.Create("DButton", RCDMainFrame)
    leftArrow:SetSize(RCD.ScrW*0.021, RCD.ScrH*0.037)
    leftArrow:SetPos(RCD.ScrW*0.035, RCD.ScrH*0.4)
    leftArrow:SetText("")
    leftArrow.Paint = function(self,w,h)
        surface.SetDrawColor(RCD.Colors["white100"])
        surface.SetMaterial(RCD.Materials["left_vehicle"])
        surface.DrawTexturedRect(0, 0, w, h)    
    end
    leftArrow.DoClick = function()
        setVehicleSelected(RCD.ClientTable["carrouselId"] - 1)
    end

    local rightArrow = vgui.Create("DButton", RCDMainFrame)
    rightArrow:SetSize(RCD.ScrW*0.021, RCD.ScrH*0.037)
    rightArrow:SetPos(RCD.ScrW*0.75, RCD.ScrH*0.4)
    rightArrow:SetText("")
    rightArrow.Paint = function(self,w,h)
        surface.SetDrawColor(RCD.Colors["white100"])
        surface.SetMaterial(RCD.Materials["right_vehicle"])
        surface.DrawTexturedRect(0, 0, w, h)  
    end
    rightArrow.DoClick = function()
        setVehicleSelected(RCD.ClientTable["carrouselId"] + 1)
    end
    
    --[[ This is the scroll where all vehicle are draw ]]
    vehicleScroll = vgui.Create("DHorizontalScroller", RCDMainFrame)
    vehicleScroll:SetSize(RCD.ScrW*0.968-RCD.ScrW*0.04, RCD.ScrH*0.15)
    vehicleScroll:SetPos(RCD.ScrW*0.025, RCD.ScrH*0.787)
    vehicleScroll:SetOverlap(-1)
    vehicleScroll:SetOverlap(RCD.ScrW*0.048)
    vehicleScroll.btnLeft.Paint = function() end
    vehicleScroll.btnRight.Paint = function() end
    vehicleScroll.OnMouseWheeled = function(self, dlta)
        self.RCDScrollPos = (self.OffsetX + dlta * -125)
    end
    
    local StencilPoly = {
        {x = RCD.ScrW*0.055, y = 0},
        {x = vehicleScroll:GetWide(), y = 0},
        {x = vehicleScroll:GetWide()-RCD.ScrW*0.055, y = vehicleScroll:GetTall()},
        {x = 0, y = vehicleScroll:GetTall()},
    }
    vehicleScroll.Paint = function(self,w,h)
        -- Set the scroll X 
        if isnumber(vehicleScroll.RCDScrollPos) then
            vehicleScroll.RCDLerpScrollPos = Lerp(FrameTime()*3, vehicleScroll.RCDLerpScrollPos or vehicleScroll.OffsetX, vehicleScroll.RCDScrollPos)
            vehicleScroll:SetScroll(vehicleScroll.RCDLerpScrollPos)
        end

        render.SetStencilWriteMask(0xFF)
        render.SetStencilTestMask(0xFF)
        render.SetStencilReferenceValue(0)
        render.SetStencilPassOperation(STENCIL_KEEP)
        render.SetStencilZFailOperation(STENCIL_KEEP)
        render.ClearStencil()

        render.SetStencilEnable(true)
        render.SetStencilReferenceValue(1)
        render.SetStencilCompareFunction(STENCIL_NEVER)
        render.SetStencilFailOperation(STENCIL_REPLACE)

        draw.NoTexture()
        surface.SetDrawColor(RCD.Colors["white"])
        surface.DrawPoly(StencilPoly)

        render.SetStencilCompareFunction(STENCIL_EQUAL)
        render.SetStencilFailOperation(STENCIL_KEEP)
        
        if not IsFirstTimePredicted() then return end
        vehicleScroll.pnlCanvas:PaintManuel()

        render.SetStencilEnable(false)
    end
    vehicleScroll.oldMouseWheeled = vehicleScroll.OnMouseWheeled
    vehicleScroll.OnMouseWheeled = function(self, dlta)

        if isnumber(vehicleScroll.RCDScrollPos) then
            vehicleScroll.RCDScrollPos = nil
        end

        self.oldMouseWheeled(self, dlta)
    end

    checkBoxInfo = {
        ["owned"] = true,
        ["forSale"] = true,
        ["allowed"] = true,
    }

    RCD.ReloadVehiclesList(RCD.ClientTable["customize"])
    
    --[[ Here you can find all checkBox ]]
    local vehicleOwned = vgui.Create("RCD:Toggle", downPanel)
    vehicleOwned:SetPos(RCD.ScrW*0.035, downPanel:GetTall()/2 - vehicleOwned:GetTall()/2)
    function vehicleOwned:OnChange()
        checkBoxInfo["owned"] = vehicleOwned:GetStatut()

        RCD.ReloadVehiclesList(RCD.ClientTable["customize"])
    end

    local vehicleforSale = vgui.Create("RCD:Toggle", downPanel)
    vehicleforSale:SetPos(RCD.ScrW*0.15, downPanel:GetTall()/2 - vehicleforSale:GetTall()/2)
    function vehicleforSale:OnChange()
        checkBoxInfo["forSale"] = vehicleforSale:GetStatut()

        RCD.ReloadVehiclesList(RCD.ClientTable["customize"])
    end

    local vehicleAllowed = vgui.Create("RCD:Toggle", downPanel)
    vehicleAllowed:SetPos(RCD.ScrW*0.268, downPanel:GetTall()/2 - vehicleforSale:GetTall()/2)
    function vehicleAllowed:OnChange()
        checkBoxInfo["allowed"] = vehicleAllowed:GetStatut()

        RCD.ReloadVehiclesList(RCD.ClientTable["customize"])
    end   
end

local timeTest = 0
hook.Add("HUDPaint", "RCD:HUDPaint:TestVehicle", function()
    local curTime = CurTime()
    if timeTest < curTime then return end

    surface.SetDrawColor(RCD.Colors["white"])
	surface.SetMaterial(RCD.Materials["test_drive"])
	surface.DrawTexturedRect(RCD.ScrW*0.005, RCD.ScrH*0.1, RCD.ScrW*0.23, RCD.ScrH*0.09)

    draw.DrawText(RCD.GetSentence("testDrive"), "RCD:Font:10", RCD.ScrW*0.055, RCD.ScrH*0.112, RCD.Colors["white"], TEXT_ALIGN_LEFT)
    draw.DrawText(RCD.GetSentence("testDriveEnd"):format(math.Round(timeTest - curTime)), "RCD:Font:11", RCD.ScrW*0.055, RCD.ScrH*0.145, RCD.Colors["white"], TEXT_ALIGN_LEFT)

    draw.RoundedBox(0, RCD.ScrW*0.003, RCD.ScrH*0.1, RCD.ScrW*0.004, RCD.ScrH*0.09, RCD.Colors["purple"])
end)

hook.Add("HUDPaint", "RCD:HUDPaint:LoadVehicleList", function()
    RCD.VehiclesList = RCD.GetAllVehicles() or {}
    RCD.LocalPlayer = LocalPlayer()

    hook.Remove("HUDPaint", "RCD:HUDPaint:LoadVehicleList")
end)

local syncNWCooldown = 0
hook.Add("Think", "RCD:Client:Think", function()
    if not IsValid(RCD.LocalPlayer) then return end
    RCD["vehiclesSpawned"] = RCD["vehiclesSpawned"] or {}

    local curTime = CurTime()
    for k,v in pairs(RCD["vehiclesSpawned"]) do
        if not IsValid(k) then continue end
        
        local activate = RCD.GetNWVariables("RCDUnderGlowActivate", k)
        if not activate then 
            continue 
        end

        local underglow = RCD.GetNWVariables("RCDUnderGlowColor", k)
        if not istable(underglow) then 
            continue 
        end
        
        if k:GetPos():DistToSqr(RCD.LocalPlayer:GetPos()) > 900000 then 
            continue
        end
 
        local dynamicLight = DynamicLight(k:EntIndex())
        if dynamicLight then
			dynamicLight.pos = k:GetPos()
            dynamicLight.brightness = 6
            dynamicLight.Decay = 1000
            dynamicLight.Size = 100
			dynamicLight.r = underglow.r
			dynamicLight.g = underglow.g
			dynamicLight.b = underglow.b
            dynamicLight.DieTime = curTime + FrameTime() * 4
		end
    end

    if syncNWCooldown < curTime then

        for entIndex, values in pairs(RCD.ClientTable["NWToSynchronize"] or {}) do

            local ent = Entity(entIndex)
            if not IsValid(ent) then continue end
            
            ent.RCDNWVariables = values
            RCD.ClientTable["NWToSynchronize"][entIndex] = nil       
        end
        
        syncNWCooldown = curTime + 5
    end
end)

hook.Add("OnEntityCreated", "RCD:UnderGlow:OnEntityCreated", function(ent)
    if not IsValid(ent) or not RCD.IsVehicle(ent) then return end

    RCD["vehiclesSpawned"] = RCD["vehiclesSpawned"] or {}
    RCD["vehiclesSpawned"][ent] = true

    ent:CallOnRemove("rcd_reset_variables:"..ent:EntIndex(), function(ent) 
        RCD["vehiclesSpawned"][ent] = nil
    end) 
end)

net.Receive("RCD:Main:Client", function()
    local uInt = net.ReadUInt(4)

    --[[ Sync NW variables ]]
    if uInt == 1 then
        RCD.ClientTable["NWToSynchronize"] = RCD.ClientTable["NWToSynchronize"] or {}
            
        local entAmountToSynchronize = net.ReadUInt(12)
        for i=1, entAmountToSynchronize do
            
            local entIndex = net.ReadUInt(32)
            local ent = Entity(entIndex)

            local needToSync = {}
            local varAmountToSynchronize = net.ReadUInt(4)
            
            for i=1, varAmountToSynchronize do
                local valueType = net.ReadString()
                
                if IsValid(ent) then
                    ent.RCDNWVariables = ent.RCDNWVariables or {}

                    local valueName, value = net.ReadString(), net["Read"..RCD.TypeNet[valueType]](((RCD.TypeNet[valueType] == "Int") and 32))
                    ent.RCDNWVariables[valueName] = value
                else
                    
                    needToSync[net.ReadString()] = net["Read"..RCD.TypeNet[valueType]](((RCD.TypeNet[valueType] == "Int") and 32))
                end
            end

            if not IsValid(ent) then
                RCD.ClientTable["NWToSynchronize"][entIndex] = RCD.ClientTable["NWToSynchronize"][entIndex] or {}
                
                for k,v in pairs(needToSync) do
                    RCD.ClientTable["NWToSynchronize"][entIndex][k] = v
                end
            end
        end
        
    --[[ Open the menu, set the first vehicle selected and the vehicle id ]]
    elseif uInt == 2 then
        local groupsList = {}
        
        local groupsListCount = net.ReadUInt(12)
        for i=1, groupsListCount do
            local groupsId = net.ReadUInt(32)

            groupsList[groupsId] = true
        end

        RCD.ClientTable["vehiclesTable"] = {}

        local canOpen = false
        for k,v in pairs(RCD.AdvancedConfiguration["vehiclesList"]) do
            if not groupsList[v.groupId] then continue end

            v.price = tonumber(v.price) or 0

            RCD.ClientTable["vehiclesTable"][k] = v
            canOpen = true
        end

        if not canOpen then RCD.Notification(5, RCD.GetSentence("carDealerNotConfigured")) return end 

        for k,v in pairs(RCD.ClientTable["vehiclesTable"]) do
            RCD.ClientTable["vehicleSelected"] = v
            RCD.ClientTable["carrouselId"] = 1
            
            RCD.MainMenu()
            return
        end

    --[[ Add a new vehicle to the table when the player buy it ]]
    elseif uInt == 3 then
        local vehicleId = net.ReadUInt(32)
        local groupId = net.ReadUInt(32)
        local discount = net.ReadUInt(32)
        local playerId = net.ReadString()

        local vehicleSkin = net.ReadUInt(8)
        local vehicleNitro = net.ReadUInt(2)
        local hasColor = net.ReadBool()
        local vehicleColor = net.ReadColor()
        local hasUnderglow = net.ReadBool()
        local vehicleUnderglow = net.ReadColor()
        local bodygroupCount = net.ReadUInt(8)

        local vehicleBodygroups = {}
        for i=1, bodygroupCount do
            local k = net.ReadUInt(8)
            local v = net.ReadUInt(8)

            vehicleBodygroups[k] = v
        end

        local customization = {
            ["vehicleSkin"] = vehicleSkin,
            ["vehicleNitro"] = vehicleNitro,
            ["vehicleColor"] = (hasColor and vehicleColor or nil),
            ["vehicleUnderglow"] = (hasUnderglow and vehicleUnderglow or nil),
            ["vehicleBodygroups"] = vehicleBodygroups,
        }

        local tableToAdd = {
            ["customization"] = customization,
            ["groupId"] = groupId,
            ["discount"] = discount,
            ["vehicleId"] = vehicleId,
            ["playerId"] = playerId,
        }
        
        RCD.ClientTable["vehiclesBought"][vehicleId] = tableToAdd

        hook.Run("RCD:VehicleBought", vehicleId)

    --[[ Remove vehicle to the table when the player sell it ]]
    elseif uInt == 4 then
        local vehicleId = net.ReadUInt(32)
        if not isnumber(vehicleId) then return end

        RCD.ClientTable["vehiclesBought"][vehicleId] = nil

        hook.Run("RCD:VehicleSold", vehicleId)

    --[[ Just close the menu ]]
    elseif uInt == 5 then
        if IsValid(RCDMainFrame) then RCDMainFrame:Remove() end

    --[[ Set the time you have when you do a test of a vehicle ]]
    elseif uInt == 7 then
        local testTime = RCD.GetSetting("testTime", "number")
        timeTest = CurTime() + testTime

        if IsValid(RCDMainFrame) then RCDMainFrame:Remove() end

    --[[ Get the table of vehicles spawned ]]
    elseif uInt == 8 then
        local vehicleSpawned = {}

        local vehicleSpawnedCount = net.ReadUInt(8)
        for i=1, vehicleSpawnedCount do
            local vehicleId = net.ReadUInt(32)
            if not isnumber(vehicleId) then return end

            vehicleSpawned[vehicleId] = true
        end

        RCD.ClientTable["vehicleSpawned"] = vehicleSpawned

    --[[ Sync customization table ]]
    elseif uInt == 9 then
        local vehicleId = net.ReadUInt(32)
        if not isnumber(vehicleId) then return end

        local vehicleSkin = net.ReadUInt(8)
        local vehicleNitro = net.ReadUInt(2)
        local vehicleColor = net.ReadColor()
        local hasUnderglow = net.ReadBool()
        local vehicleUnderglow = net.ReadColor()
        local bodygroupCount = net.ReadUInt(8)

        local vehicleBodygroups = {}
        for i=1, bodygroupCount do
            local k = net.ReadUInt(8)
            local v = net.ReadUInt(8)

            vehicleBodygroups[k] = v
        end

        local customization = {
            ["vehicleSkin"] = vehicleSkin,
            ["vehicleNitro"] = vehicleNitro,
            ["vehicleColor"] = vehicleColor,
            ["vehicleUnderglow"] = (hasUnderglow and vehicleUnderglow or nil),
            ["vehicleBodygroups"] = vehicleBodygroups,
        }
        
        RCD.ClientTable["vehiclesBought"][vehicleId] = RCD.ClientTable["vehiclesBought"][vehicleId] or {}
        RCD.ClientTable["vehiclesBought"][vehicleId]["customization"] = customization

        RCD.ReloadVehiclesList(true)
    
    --[[ Sync the table of vehicles bought ]]
    elseif uInt == 10 then
        local bytesAmount = net.ReadUInt(32)
        local unCompressTable = util.Decompress(net.ReadData(bytesAmount)) or ""
        local vehiclesTable = util.JSONToTable(unCompressTable)
        
        RCD.ClientTable["vehiclesBought"] = vehiclesTable
    --[[ Reset vehicle test ]]
    elseif uInt == 11 then
        timeTest = 0
    end
end)
--addons/realisticcardealer/lua/realistic_cardealer/client/cl_admin.lua:
local scrollVehicles, scrollGroups, groupMenu, vehicleMenu, npcMenu, adminMenu

local function reloadVehicles()
    if not IsValid(scrollVehicles) then return end
    scrollVehicles:Clear()
    
    for k,v in pairs(RCD.GetVehicles()) do
        if not istable(v) then continue end
        
        local vehicleButton = vgui.Create("DButton", scrollVehicles)
        vehicleButton:SetSize(0, RCD.ScrH*0.037)
        vehicleButton:Dock(TOP)
        vehicleButton:DockMargin(0, 0, 0, RCD.ScrH*0.005)
        vehicleButton:SetText("")
        vehicleButton.Paint = function(self,w,h)
            draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["white5"])
        end
        
        local vehicleName = vgui.Create("DLabel", vehicleButton)
        vehicleName:SetSize(RCD.ScrW*0.19, RCD.ScrH*0.037)
        vehicleName:SetPos(RCD.ScrW*0.008, 0)
        vehicleName:SetTextColor(RCD.Colors["white100"])
        vehicleName:SetFont("RCD:Font:13")
        vehicleName.Think = function(self)
            local groupName = RCD.VehicleGroupGetName(v.groupId) or RCD.GetSentence("undefined")
            
            self:SetText("("..v.id..") ".."["..groupName.."] "..(v.name or "nil"))
        end
        
        local editButton = vgui.Create("RCD:SlideButton", vehicleButton)
        editButton:SetSize(RCD.ScrH*0.032, RCD.ScrH*0.032)
        editButton:SetPos(RCD.ScrW*0.2053, RCD.ScrH*0.0033)
        editButton:SetText("")
        editButton.MinMaxLerp = {5, 7}
        editButton:SetIconMaterial(nil)
        editButton:SetButtonColor(RCD.Colors["white5"])
        editButton.PaintOver = function(self,w,h)
            surface.SetDrawColor(RCD.Colors["white100"])
            surface.SetMaterial(RCD.Materials["icon_edit"])
            surface.DrawTexturedRect(w/2-((w/2)/2), h/2-((h/2)/2), w/2, h/2)
        end
        editButton.DoClick = function()
            RCD.CreateVehicle(v)
            if IsValid(adminMenu) then adminMenu:Remove() end
        end
        
        local removeButton = vgui.Create("RCD:SlideButton", vehicleButton)
        removeButton:SetSize(RCD.ScrH*0.032, RCD.ScrH*0.032)
        removeButton:SetPos(RCD.ScrW*0.2253, RCD.ScrH*0.0033)
        removeButton:SetText("")
        removeButton.MinMaxLerp = {60, 120}
        removeButton:SetIconMaterial(nil)
        removeButton:SetButtonColor(RCD.Colors["purple120"])
        removeButton.PaintOver = function(self,w,h)
            surface.SetDrawColor(RCD.Colors["white100"])
            surface.SetMaterial(RCD.Materials["icon_delete"])
            surface.DrawTexturedRect(w/2-((w/2)/2), h/2-((h/2)/2), w/2, h/2)
        end
        removeButton.DoClick = function()
            local vehicleId = tonumber(v.id)
            if not isnumber(vehicleId) then return end
            
            net.Start("RCD:Admin:Configuration")
                net.WriteUInt(4, 4)
                net.WriteUInt(vehicleId, 32)
            net.SendToServer()
            
            removePanel = vehicleButton
        end 
    end
end

local function reloadGroups()
    if not IsValid(scrollGroups) then return end
    scrollGroups:Clear()
    
    for k,v in pairs(RCD.GetAllVehicleGroups()) do
        local groupButton = vgui.Create("DButton", scrollGroups)
        groupButton:SetSize(0, RCD.ScrH*0.037)
        groupButton:Dock(TOP)
        groupButton:DockMargin(0, 0, 0, RCD.ScrH*0.005)
        groupButton:SetText("")
        groupButton.Paint = function(self,w,h)
            draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["white5"])
        end
        
        local groupName = vgui.Create("DLabel", groupButton)
        groupName:SetSize(RCD.ScrW*0.19, RCD.ScrH*0.037)
        groupName:SetPos(RCD.ScrW*0.008, 0)
        groupName:SetText(v.name or "nil")
        groupName:SetTextColor(RCD.Colors["white100"])
        groupName:SetFont("RCD:Font:13")

        local editButton = vgui.Create("RCD:SlideButton", groupButton)
        editButton:SetSize(RCD.ScrH*0.032, RCD.ScrH*0.032)
        editButton:SetPos(RCD.ScrW*0.204, RCD.ScrH*0.0033)
        editButton:SetText("")
        editButton.MinMaxLerp = {5, 7}
        editButton:SetIconMaterial(nil)
        editButton:SetButtonColor(RCD.Colors["white5"])
        editButton.PaintOver = function(self,w,h)
            surface.SetDrawColor(RCD.Colors["white100"])
            surface.SetMaterial(RCD.Materials["icon_edit"])
            surface.DrawTexturedRect(w/2-((w/2)/2), h/2-((h/2)/2), w/2, h/2)
        end
        editButton.DoClick = function()
            RCD.CreateGroup(v)
        end

        local removeButton = vgui.Create("RCD:SlideButton", groupButton)
        removeButton:SetSize(RCD.ScrH*0.032, RCD.ScrH*0.032)
        removeButton:SetPos(RCD.ScrW*0.22375, RCD.ScrH*0.0033)
        removeButton:SetText("")
        removeButton.MinMaxLerp = {60, 120}
        removeButton:SetIconMaterial(nil)
        removeButton:SetButtonColor(RCD.Colors["purple120"])
        removeButton.PaintOver = function(self,w,h)
            surface.SetDrawColor(RCD.Colors["white100"])
            surface.SetMaterial(RCD.Materials["icon_delete"])
            surface.DrawTexturedRect(w/2-((w/2)/2), h/2-((h/2)/2), w/2, h/2)
        end
        removeButton.DoClick = function()
            removePanel = groupButton

            net.Start("RCD:Admin:Configuration")
                net.WriteUInt(2, 4)
                net.WriteUInt(v.id, 32)
            net.SendToServer()
        end
    end
end

function RCD.AdminMenu()
    if IsValid(adminMenu) then adminMenu:Remove() end

    adminMenu = vgui.Create("DFrame")
    adminMenu:SetSize(RCD.ScrW*0.503, RCD.ScrH*0.603)
    adminMenu:SetDraggable(false)
    adminMenu:MakePopup()
    adminMenu:SetTitle("")
    adminMenu:ShowCloseButton(false)
    adminMenu:Center()
    adminMenu.Paint = function(self,w,h)
        RCD.DrawBlur(self, 10) 

        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["blackpurple"])
        draw.RoundedBox(0, w/2-RCD.ScrW*0.49/2, h*0.02, RCD.ScrW*0.49, RCD.ScrH*0.062, RCD.Colors["white20"])

        draw.RoundedBox(0, w/2-RCD.ScrW*0.49/2, h*0.13, RCD.ScrW*0.243, RCD.ScrH*0.045, RCD.Colors["white20"])
        draw.RoundedBox(0, RCD.ScrW*0.2515, h*0.13, RCD.ScrW*0.245, RCD.ScrH*0.045, RCD.Colors["white20"])
        
        draw.DrawText(RCD.GetSentence("adminMenuConfig"), "RCD:Font:10", w*0.025, h*0.02, RCD.Colors["white"], TEXT_ALIGN_LEFT)
        draw.DrawText(RCD.GetSentence("configureGroupsVehicles"), "RCD:Font:11", w*0.025, h*0.07, RCD.Colors["white100"], TEXT_ALIGN_LEFT)

        draw.DrawText(RCD.GetSentence("groups"), "RCD:Font:18", w*0.25, h*0.145, RCD.Colors["white"], TEXT_ALIGN_CENTER)
        draw.DrawText(RCD.GetSentence("vehicles"), "RCD:Font:18", w*0.75, h*0.145, RCD.Colors["white"], TEXT_ALIGN_CENTER)
    end

    scrollGroups = vgui.Create("RCD:DScroll", adminMenu)
    scrollGroups:SetSize(adminMenu:GetWide()/2.07, RCD.ScrH*0.417)
    scrollGroups:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.1285)

    reloadGroups()

    scrollVehicles = vgui.Create("RCD:DScroll", adminMenu)
    scrollVehicles:SetSize(adminMenu:GetWide()/2.055, RCD.ScrH*0.417)
    scrollVehicles:SetPos(adminMenu:GetWide()/2, RCD.ScrH*0.1285)

    reloadVehicles()

    local createGroup = vgui.Create("RCD:SlideButton", adminMenu)
    createGroup:SetSize(adminMenu:GetWide()/2.072, RCD.ScrH*0.041)
    createGroup:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.552)
    createGroup:SetText(RCD.GetSentence("createGroup"))
    createGroup:SetFont("RCD:Font:12")
    createGroup:SetTextColor(RCD.Colors["white"])
    createGroup:InclineButton(0)
    createGroup:SetIconMaterial(nil)
    createGroup.MinMaxLerp = {100, 200}
    createGroup:SetIconMaterial(nil)
    createGroup:SetButtonColor(RCD.Colors["purple"])
    createGroup.DoClick = function()
        RCD.CreateGroup()
        if IsValid(adminMenu) then adminMenu:Remove() end
    end

    local createVehicle = vgui.Create("RCD:SlideButton", adminMenu)
    createVehicle:SetSize(adminMenu:GetWide()/2.055, RCD.ScrH*0.041)
    createVehicle:SetPos(adminMenu:GetWide()/2, RCD.ScrH*0.552)
    createVehicle:SetText(RCD.GetSentence("createVehicle"))
    createVehicle:SetFont("RCD:Font:12")
    createVehicle:SetTextColor(RCD.Colors["white"])
    createVehicle:InclineButton(0)
    createVehicle.MinMaxLerp = {100, 200}
    createVehicle:SetIconMaterial(nil)
    createVehicle:SetButtonColor(RCD.Colors["purple"])
    createVehicle.DoClick = function()
        RCD.CreateVehicle()
        if IsValid(adminMenu) then adminMenu:Remove() end
    end

    local closeLerp = 50
    local close = vgui.Create("DButton", adminMenu)
    close:SetSize(RCD.ScrH*0.026, RCD.ScrH*0.026)
    close:SetPos(adminMenu:GetWide()*0.94, RCD.ScrH*0.03)
    close:SetText("")
    close.Paint = function(self,w,h)
        closeLerp = Lerp(FrameTime()*5, closeLerp, (close:IsHovered() and 50 or 100))

        surface.SetDrawColor(ColorAlpha(RCD.Colors["white100"], closeLerp))
        surface.SetMaterial(RCD.Materials["icon_close"])
        surface.DrawTexturedRect(0, 0, w, h)
    end
    close.DoClick = function()
        adminMenu:Remove()
    end
end

function RCD.NPCMenu(npcId, infoTable)
    if IsValid(npcMenu) then npcMenu:Remove() end

    RCD.npcInformation = {
        ["name"] = "",
        ["model"] = "",
        ["class"] = "",
        ["plateforms"] = {},
        ["groups"] = {},
    }

    local plateformsCount = 0
    if infoTable then
        local plateformsTable = infoTable["plateforms"] or {}

        plateformsCount = #plateformsTable
        RCD.npcInformation["plateforms"] = plateformsTable
    end

    npcMenu = vgui.Create("DFrame")
    npcMenu:SetSize(RCD.ScrW*0.27, RCD.ScrH*0.9)
    npcMenu:SetDraggable(false)
    npcMenu:MakePopup()
    npcMenu:SetTitle("")
    npcMenu:ShowCloseButton(false)
    npcMenu:Center()
    npcMenu.Paint = function(self,w,h)
        RCD.DrawBlur(self, 10) 

        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["blackpurple"])
        draw.RoundedBox(0, w/2-RCD.ScrW*0.258/2, h*0.013, RCD.ScrW*0.2585, RCD.ScrH*0.062, RCD.Colors["white20"])
        
        draw.DrawText(RCD.GetSentence("dealerConfiguration"), "RCD:Font:10", w*0.045, h*0.013, RCD.Colors["white"], TEXT_ALIGN_LEFT)
        draw.DrawText(RCD.GetSentence("configureGroupsVehicles"), "RCD:Font:11", w*0.045, h*0.045, RCD.Colors["white100"], TEXT_ALIGN_LEFT)
    end

    local npcSettings = vgui.Create("RCD:DScroll", npcMenu)
    npcSettings:SetPos(RCD.ScrW*0.0055, RCD.ScrH*0.078)
    npcSettings:SetSize(RCD.ScrW*0.259, RCD.ScrH*0.8)

    local entryName = vgui.Create("RCD:TextEntry", npcSettings)
    entryName:SetSize(0, RCD.ScrH*0.048)
    entryName:Dock(TOP)
    entryName:DockMargin(0, 0, 0, RCD.ScrH*0.005)
    entryName:SetPlaceHolder(RCD.GetSentence("enterDealerName"))
    if infoTable && isstring(infoTable["name"]) then
        entryName:SetText(infoTable["name"])
    end

    local entryModel = vgui.Create("RCD:TextEntry", npcSettings)
    entryModel:SetSize(0, RCD.ScrH*0.048)
    entryModel:Dock(TOP)
    entryModel:DockMargin(0, 0, 0, RCD.ScrH*0.005)
    entryModel:SetPlaceHolder("models/breen.mdl")
    if infoTable && isstring(infoTable["model"]) then
        entryModel:SetText(infoTable["model"])
    end

    local tableCount = math.Clamp(table.Count(RCD.AdvancedConfiguration["groupsList"]), 0, 8)

    local sizeY = RCD.ScrH*0.05 + tableCount*RCD.ScrH*0.037 + tableCount*RCD.ScrH*0.0039
    
    local groupsConfig = vgui.Create("DPanel", npcSettings)
    groupsConfig:SetSize(0, sizeY)
    groupsConfig:Dock(TOP)
    groupsConfig.Paint = function(self,w,h) 
        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["white2"])
    end
    groupsConfig:SizeTo(-1, sizeY, 0.5)
    
    local fakeButton = vgui.Create("DButton", groupsConfig)
    fakeButton:SetSize(RCD.ScrW*0.26, RCD.ScrH*0.05)
    fakeButton:SetText("")
    fakeButton.Deploy = true
    fakeButton.Paint = function(self,w,h)
        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["white20"])
        draw.DrawText(RCD.GetSentence("groupsConfig"), "RCD:Font:18", w*0.02, RCD.ScrH*0.012, RCD.Colors["white"], TEXT_ALIGN_LEFT)
        draw.DrawText("▼", "RCD:Font:17", w*0.925, RCD.ScrH*0.0145, RCD.Colors["grey30"], TEXT_ALIGN_LEFT)
    end

    fakeButton.DoClick = function()
        fakeButton.Deploy = !fakeButton.Deploy

        groupsConfig:SizeTo(-1, fakeButton.Deploy and sizeY or RCD.ScrH*0.05, 0.5)
    end

    local scrollGroup = vgui.Create("RCD:DScroll", groupsConfig)
    scrollGroup:SetPos(0, RCD.ScrH*0.054)
    scrollGroup:SetSize(RCD.ScrW*0.26, sizeY - RCD.ScrH*0.05)
    
    for k,v in pairs(RCD.GetAllVehicleGroups()) do
        local groupButton = vgui.Create("DButton", scrollGroup)
        groupButton:SetSize(0, RCD.ScrH*0.037)
        groupButton:Dock(TOP)
        groupButton:DockMargin(0, 0, 0, RCD.ScrH*0.005)
        groupButton:SetText("")
        groupButton.Paint = function(self,w,h)
            draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["white2"])
            draw.SimpleText(v.name, "RCD:Font:13", w*0.025, h*0.45, RCD.Colors["white100"], TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
        end
        
        local checkBox = vgui.Create("RCD:CheckBox", groupButton)
        checkBox:SetSize(RCD.ScrH*0.023, RCD.ScrH*0.023)
        checkBox:SetPos(RCD.ScrW*0.24, groupButton:GetTall()/2 - checkBox:GetTall()/2)
        checkBox.OnChange = function()
            local active = checkBox:GetActive()

            RCD.npcInformation["groups"][k] = active
        end
        
        groupButton.DoClick = function()
            local active = checkBox:GetActive()
            
            checkBox:SetActive(!active)
            RCD.npcInformation["groups"][k] = !active
        end

        if infoTable then
            local groupsTable = infoTable["groups"] or {}

            if groupsTable[k] then
                checkBox:SetActive(true)
                RCD.npcInformation["groups"][k] = true
            end
        end
    end

    local newPlateform = vgui.Create("RCD:SlideButton", npcSettings)
    newPlateform:SetSize(0, RCD.ScrH*0.041)
    newPlateform:DockMargin(0, RCD.ScrH*0.005, 0, 0)
    newPlateform:Dock(TOP)
    newPlateform:SetText(RCD.GetSentence("newPlateforms"))
    newPlateform:SetFont("RCD:Font:12")
    newPlateform:SetTextColor(RCD.Colors["white"])
    newPlateform:InclineButton(0)
    newPlateform.MinMaxLerp = {100, 200}
    newPlateform:SetIconMaterial(nil)
    newPlateform:SetButtonColor(RCD.Colors["purple"])
    newPlateform.DoClick = function()
        net.Start("RCD:Admin:Configuration")
            net.WriteUInt(7, 4)
            net.WriteUInt(npcId, 32)
        net.SendToServer()

        npcMenu:Remove()
    end

    local deletePlateform = vgui.Create("RCD:SlideButton", npcSettings)
    deletePlateform:SetSize(0, RCD.ScrH*0.041)
    deletePlateform:DockMargin(0, RCD.ScrH*0.005, 0, 0)
    deletePlateform:Dock(TOP)
    deletePlateform:SetText(RCD.GetSentence("deletePlateforms").."("..plateformsCount..")")
    deletePlateform:SetFont("RCD:Font:12")
    deletePlateform:SetTextColor(RCD.Colors["white"])
    deletePlateform:InclineButton(0)
    deletePlateform.MinMaxLerp = {100, 200}
    deletePlateform:SetIconMaterial(nil)
    deletePlateform:SetButtonColor(RCD.Colors["grey69"])
    deletePlateform.DoClick = function()
        net.Start("RCD:Admin:Configuration")
            net.WriteUInt(9, 4)
            net.WriteUInt(npcId, 32)
        net.SendToServer()

        npcMenu:Remove()
    end

    local bottomScroll = vgui.Create("RCD:DScroll", npcMenu)
    bottomScroll:SetPos(RCD.ScrW*0.0055, RCD.ScrH*0.7999)
    bottomScroll:SetSize(RCD.ScrW*0.259, RCD.ScrH*0.25)

    local deleteNpc = vgui.Create("RCD:SlideButton", bottomScroll)
    deleteNpc:SetSize(0, RCD.ScrH*0.041)
    deleteNpc:DockMargin(0, RCD.ScrH*0.005, 0, 0)
    deleteNpc:Dock(TOP)
    deleteNpc:SetText(RCD.GetSentence("deleteNPC"))
    deleteNpc:SetFont("RCD:Font:12")
    deleteNpc:SetTextColor(RCD.Colors["white"])
    deleteNpc:InclineButton(0)
    deleteNpc.MinMaxLerp = {100, 200}
    deleteNpc:SetIconMaterial(nil)
    deleteNpc:SetButtonColor(RCD.Colors["grey69"])

    deleteNpc.DoClick = function()
        net.Start("RCD:Admin:Configuration")
            net.WriteUInt(6, 4)
            net.WriteUInt(npcId, 32)
        net.SendToServer()

        npcMenu:Remove()
    end

    local saveNpc = vgui.Create("RCD:SlideButton", bottomScroll)
    saveNpc:SetSize(0, RCD.ScrH*0.041)
    saveNpc:DockMargin(0, RCD.ScrH*0.005, 0, 0)
    saveNpc:Dock(TOP)
    saveNpc:SetText(RCD.GetSentence("saveInformations"))
    saveNpc:SetFont("RCD:Font:12")
    saveNpc:SetTextColor(RCD.Colors["white"])
    saveNpc:InclineButton(0)
    saveNpc.MinMaxLerp = {100, 200}
    saveNpc:SetIconMaterial(nil)
    saveNpc:SetButtonColor(RCD.Colors["purple"])
    saveNpc.DoClick = function()
        RCD.npcInformation["name"] = entryName:GetText()
        RCD.npcInformation["model"] = entryModel:GetText()

        net.Start("RCD:Admin:Configuration")
            net.WriteUInt(5, 4)
            net.WriteUInt(npcId, 32)
            net.WriteString(RCD.npcInformation["name"])
            net.WriteString(RCD.npcInformation["model"])
            net.WriteString(RCD.npcInformation["class"])
            net.WriteUInt(#RCD.npcInformation["plateforms"], 12)
            for k, v in pairs(RCD.npcInformation["plateforms"]) do
                net.WriteVector(v.pos)
                net.WriteAngle(v.ang)
            end
            net.WriteUInt(table.Count(RCD.npcInformation["groups"]), 12)
            for k, v in pairs(RCD.npcInformation["groups"]) do
                net.WriteUInt(k, 32)
                net.WriteBool(v)
            end
        net.SendToServer()

        npcMenu:Remove()
    end
    
    local closeLerp = 50
    local close = vgui.Create("DButton", npcMenu)
    close:SetSize(RCD.ScrH*0.026, RCD.ScrH*0.026)
    close:SetPos(RCD.ScrW*0.241, RCD.ScrH*0.03)
    close:SetText("")
    close.Paint = function(self,w,h)
        closeLerp = Lerp(FrameTime()*5, closeLerp, (close:IsHovered() and 50 or 100))

        surface.SetDrawColor(ColorAlpha(RCD.Colors["white100"], closeLerp))
        surface.SetMaterial(RCD.Materials["icon_close"])
        surface.DrawTexturedRect(0, 0, w, h)
    end
    close.DoClick = function()
        npcMenu:Remove()
    end
end

function RCD.CreateGroup(editTable)
    if IsValid(adminMenu) then adminMenu:Remove() end
    if IsValid(groupMenu) then groupMenu:Remove() end

    local editGroup = istable(editTable)
    
    RCD.groupTable = {
        ["name"] = "",
        ["jobAccess"] = {},
        ["rankAccess"] = {},
    }

    groupMenu = vgui.Create("DFrame")
    groupMenu:SetSize(RCD.ScrW*0.503, RCD.ScrH*0.603)
    groupMenu:SetDraggable(false)
    groupMenu:MakePopup()
    groupMenu:SetTitle("")
    groupMenu:ShowCloseButton(false)
    groupMenu:Center()
    groupMenu.Paint = function(self,w,h)
        RCD.DrawBlur(self, 10)

        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["blackpurple"])
        draw.RoundedBox(0, w/2-RCD.ScrW*0.49/2, h*0.02, self:GetWide()*0.978, RCD.ScrH*0.062, RCD.Colors["white20"])

        draw.RoundedBox(0, w/2-RCD.ScrW*0.49/2, h*0.215, RCD.ScrW*0.243, RCD.ScrH*0.045, RCD.Colors["white20"])
        draw.RoundedBox(0, RCD.ScrW*0.2515, h*0.215, RCD.ScrW*0.245, RCD.ScrH*0.045, RCD.Colors["white20"])
        
        draw.DrawText(RCD.GetSentence("adminMenuConfig"), "RCD:Font:10", w*0.025, h*0.02, RCD.Colors["white"], TEXT_ALIGN_LEFT)
        draw.DrawText(RCD.GetSentence("configureGroups"), "RCD:Font:11", w*0.025, h*0.07, RCD.Colors["white100"], TEXT_ALIGN_LEFT)

        draw.DrawText(RCD.GetSentence("rankAccess"), "RCD:Font:18", w*0.25, h*0.23, RCD.Colors["white"], TEXT_ALIGN_CENTER)
        draw.DrawText(RCD.GetSentence("jobAccess"), "RCD:Font:18", w*0.75, h*0.23, RCD.Colors["white"], TEXT_ALIGN_CENTER)
    end

    local entryName = vgui.Create("RCD:TextEntry", groupMenu)
    entryName:SetSize(groupMenu:GetWide()-RCD.ScrW*0.0062*2, RCD.ScrH*0.046)
    entryName:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.0785)
    entryName:SetPlaceHolder(RCD.GetSentence("enterGroupName"))
    entryName.OnChange = function()
        RCD.groupTable["name"] = entryName:GetText()
    end
    if editGroup then 
        local groupName = editTable["name"]
        entryName:SetText(groupName)

        RCD.groupTable["name"] = groupName
        RCD.groupTable["id"] = editTable["id"]
    end

    local scrollRanks = vgui.Create("RCD:DScroll", groupMenu)
    scrollRanks:SetSize(groupMenu:GetWide()/2.07, RCD.ScrH*0.365)
    scrollRanks:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.179)

    local userTable = CAMI and CAMI.GetUsergroups() or {}
    for k,v in pairs(userTable) do
        local ranksButton = vgui.Create("DButton", scrollRanks)
        ranksButton:SetSize(0, RCD.ScrH*0.037)
        ranksButton:Dock(TOP)
        ranksButton:DockMargin(0, 0, 0, RCD.ScrH*0.005)
        ranksButton:SetText("")
        ranksButton.Paint = function(self,w,h)
            draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["white5"])
            draw.SimpleText(k, "RCD:Font:13", w*0.035, h*0.45, RCD.Colors["white100"], TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
        end
        
        local checkBox = vgui.Create("RCD:CheckBox", ranksButton)
        checkBox:SetSize(RCD.ScrH*0.023, RCD.ScrH*0.023)
        checkBox:SetPos(RCD.ScrW*0.225, ranksButton:GetTall()/2 - checkBox:GetTall()/2)
        if editGroup && editTable["rankAccess"][k] then
            checkBox:SetActive(true)
            RCD.groupTable["rankAccess"][k] = true
        end

        checkBox.OnChange = function()
            local active = checkBox:GetActive()

            RCD.groupTable["rankAccess"][k] = active and true or nil
        end

        ranksButton.DoClick = function()
            local active = checkBox:GetActive()

            checkBox:SetActive(!active)
            RCD.groupTable["rankAccess"][k] = !active and true or nil
        end
    end

    local scrollJobs = vgui.Create("RCD:DScroll", groupMenu)
    scrollJobs:SetSize(groupMenu:GetWide()/2.055, RCD.ScrH*0.365)
    scrollJobs:SetPos(groupMenu:GetWide()/2, RCD.ScrH*0.179)

    for k,v in pairs(team.GetAllTeams()) do
        if not v.Joinable then continue end

        local jobsButton = vgui.Create("DButton", scrollJobs)
        jobsButton:SetSize(0, RCD.ScrH*0.037)
        jobsButton:Dock(TOP)
        jobsButton:DockMargin(0, 0, 0, RCD.ScrH*0.005)
        jobsButton:SetText("")
        jobsButton.Paint = function(self,w,h)
            draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["white5"])
            draw.SimpleText(v.Name, "RCD:Font:13", w*0.035, h*0.5, RCD.Colors["white100"], TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
        end

        local checkBox = vgui.Create("RCD:CheckBox", jobsButton)
        checkBox:SetSize(RCD.ScrH*0.023, RCD.ScrH*0.023)
        checkBox:SetPos(RCD.ScrW*0.225, jobsButton:GetTall()/2 - checkBox:GetTall()/2)
        if editGroup && editTable["jobAccess"][v.Name] then
            checkBox:SetActive(true)
            RCD.groupTable["jobAccess"][v.Name] = true
        end

        checkBox.OnChange = function()
            local active = checkBox:GetActive()

            RCD.groupTable["jobAccess"][v.Name] = active and true or nil
        end

        jobsButton.DoClick = function()
            local active = checkBox:GetActive()

            checkBox:SetActive(!active)
            RCD.groupTable["jobAccess"][v.Name] = !active and true or nil
        end
    end

    local cancel = vgui.Create("RCD:SlideButton", groupMenu)
    cancel:SetSize(groupMenu:GetWide()/2.072, RCD.ScrH*0.041)
    cancel:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.552)
    cancel:SetText(RCD.GetSentence("cancel"))
    cancel:SetFont("RCD:Font:12")
    cancel:SetTextColor(RCD.Colors["white"])
    cancel:InclineButton(0)
    cancel:SetIconMaterial(nil)
    cancel.MinMaxLerp = {100, 200}
    cancel:SetIconMaterial(nil)
    cancel:SetButtonColor(RCD.Colors["grey69"])
    cancel.DoClick = function()
        RCD.AdminMenu()
        if IsValid(groupMenu) then groupMenu:Remove() end
    end

    local createGroup = vgui.Create("RCD:SlideButton", groupMenu)
    createGroup:SetSize(groupMenu:GetWide()/2.055, RCD.ScrH*0.041)
    createGroup:SetPos(groupMenu:GetWide()/2, RCD.ScrH*0.552)
    createGroup:SetText(RCD.GetSentence("validateCreateGroup"))
    createGroup:SetFont("RCD:Font:12")
    createGroup:SetTextColor(RCD.Colors["white"])
    createGroup:InclineButton(0)
    createGroup.MinMaxLerp = {100, 200}
    createGroup:SetIconMaterial(nil)
    createGroup:SetButtonColor(RCD.Colors["purple"])
    createGroup.DoClick = function()
        RCD.groupTable["name"] = entryName:GetText()

        net.Start("RCD:Admin:Configuration")
            net.WriteUInt(1, 4)
            net.WriteBool(editGroup)
            net.WriteUInt((RCD.groupTable["id"] or 0), 32)
            net.WriteString(RCD.groupTable["name"])

            net.WriteUInt(table.Count(RCD.groupTable["rankAccess"]), 8)
            for rank, _ in pairs(RCD.groupTable["rankAccess"]) do
                net.WriteString(rank)
            end

            net.WriteUInt(table.Count(RCD.groupTable["jobAccess"]), 8)
            for job, _ in pairs(RCD.groupTable["jobAccess"]) do
                net.WriteString(job)
            end
        net.SendToServer()
    end

    local closeLerp = 50
    local close = vgui.Create("DButton", groupMenu)
    close:SetSize(RCD.ScrH*0.026, RCD.ScrH*0.026)
    close:SetPos(groupMenu:GetWide()*0.94, RCD.ScrH*0.03)
    close:SetText("")
    close.Paint = function(self,w,h)
        closeLerp = Lerp(FrameTime()*5, closeLerp, (close:IsHovered() and 50 or 100))

        surface.SetDrawColor(ColorAlpha(RCD.Colors["white100"], closeLerp))
        surface.SetMaterial(RCD.Materials["icon_close"])
        surface.DrawTexturedRect(0, 0, w, h)
    end
    close.DoClick = function()
        groupMenu:Remove()
    end
end

function RCD.CreateVehicle(editVehicle)    
    if IsValid(adminMenu) then adminMenu:Remove() end
    if IsValid(vehicleMenu) then vehicleMenu:Remove() end

    RCD.vehicleConfig = {}

    vehicleMenu = vgui.Create("DFrame")
    vehicleMenu:SetSize(RCD.ScrW*0.55, RCD.ScrH*0.695)
    vehicleMenu:SetDraggable(false)
    vehicleMenu:MakePopup()
    vehicleMenu:SetTitle("")
    vehicleMenu:ShowCloseButton(false)
    vehicleMenu:Center()
    vehicleMenu.Paint = function(self,w,h)
        RCD.DrawBlur(self, 10)

        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["blackpurple"])
        draw.RoundedBox(0, w/2-self:GetWide()*0.978/2, h*0.02,self:GetWide()*0.978, RCD.ScrH*0.062,RCD.Colors["white20"])
        
        draw.DrawText(RCD.GetSentence("adminMenuConfig"), "RCD:Font:10", w*0.025, h*0.02, RCD.Colors["white"], TEXT_ALIGN_LEFT)
        draw.DrawText(RCD.GetSentence("configureVehicleInformations"), "RCD:Font:11", w*0.025, h*0.06, RCD.Colors["white100"], TEXT_ALIGN_LEFT)
    end

    local scrollInfo = vgui.Create("RCD:DScroll", vehicleMenu)
    scrollInfo:SetSize(vehicleMenu:GetWide()/2.07, RCD.ScrH*0.20)
    scrollInfo:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.08)
    scrollInfo:GetVBar():SetWide(0)

    local previewVehicle = vgui.Create("DPanel", vehicleMenu)
    previewVehicle:SetSize(vehicleMenu:GetWide()/2.05, RCD.ScrH*0.20)
    previewVehicle:SetPos(vehicleMenu:GetWide()/2, RCD.ScrH*0.08)
    previewVehicle.Paint = function(self,w,h)
        draw.DrawText(RCD.GetSentence("preview"), "RCD:Font:18", w*0.025, h*0.02, RCD.Colors["white"], TEXT_ALIGN_LEFT)
        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["white5"])
    end

    local vehicleModel = vgui.Create("RCD:DModel", previewVehicle)
    vehicleModel:SetModel("models/airboat.mdl")
    vehicleModel:Dock(FILL)
    vehicleModel:DockMargin(0, 0, RCD.ScrH*0.01, RCD.ScrH*0.01)
    vehicleModel:SetFOV(50)
    vehicleModel.Entity:SetColor(RCD.Colors["white255200"])
    
    if editVehicle && isstring(editVehicle["class"]) && isstring(RCD.VehiclesList[editVehicle["class"]]["Model"]) then
        vehicleModel:SetModel(RCD.VehiclesList[editVehicle["class"]]["Model"])
        
        if editVehicle["options"]["addon"] == "simfphys" then
            RCD.GenerateWheels(vehicleModel.Entity, editVehicle["class"])
        end
    end

    local chooseVehicle = vgui.Create("RCD:DComboBox", scrollInfo)
    chooseVehicle:SetSize(0, RCD.ScrH*0.048)
    chooseVehicle:Dock(TOP)
    chooseVehicle:SetText(RCD.GetSentence("chooseVehicleClass"))
    chooseVehicle:DockMargin(0, 0, 0, RCD.ScrH*0.0045)

    local chooseGroup = vgui.Create("RCD:DComboBox", scrollInfo)
    chooseGroup:SetSize(0, RCD.ScrH*0.048)
    chooseGroup:Dock(TOP)
    chooseGroup:SetText(RCD.GetSentence("chooseVehicleGroup"))
    chooseGroup:DockMargin(0, 0, 0, RCD.ScrH*0.0045)
    for k,v in pairs(RCD.GetAllVehicleGroups()) do 
        chooseGroup:AddChoice(v.name, v.id)
        if editVehicle && isnumber(editVehicle["groupId"]) && editVehicle["groupId"] == v.id then
            chooseGroup:ChooseOption(v.name)

            RCD.vehicleConfig["groupId"] = v.id
        end
    end
    chooseGroup.OnSelect = function(pnl, index, data)
        local optionData = chooseGroup:GetOptionData(index)
       
        RCD.vehicleConfig["groupId"] = optionData
    end

    local entryName = vgui.Create("RCD:TextEntry", scrollInfo)
    entryName:SetSize(0, RCD.ScrH*0.048)
    entryName:Dock(TOP)
    entryName:DockMargin(0, 0, 0, RCD.ScrH*0.0045)
    entryName:SetPlaceHolder(RCD.GetSentence("enterVehicleName"))
    for k,v in pairs(RCD.VehiclesList) do 
        chooseVehicle:AddChoice(v.Name, k)
        
        if editVehicle && isstring(editVehicle["class"]) && editVehicle["class"] == k then
            chooseVehicle:ChooseOption(v.Name)
            entryName:SetText(v.Name)
            RCD.vehicleConfig["class"] = editVehicle["class"]
        end
    end
    
    if editVehicle && isstring(editVehicle["name"]) then
        entryName:SetText(editVehicle["name"])
    end
    
    local entryPrice = vgui.Create("RCD:TextEntry", scrollInfo)
    entryPrice:SetSize(0, RCD.ScrH*0.048)
    entryPrice:Dock(TOP)
    entryPrice:DockMargin(0, 0, 0, RCD.ScrH*0.0045)
    entryPrice:SetPlaceHolder(RCD.GetSentence("enterVehiclePrice"))  
    entryPrice:SetNumeric(true)
    if editVehicle then
        local price = tonumber(editVehicle["price"])
        if isnumber(price) then
            entryPrice:SetText(price)
        end
    end
    
    local scrollConfig = vgui.Create("RCD:DScroll", vehicleMenu)
    scrollConfig:SetSize(vehicleMenu:GetWide()*0.9785, RCD.ScrH*0.3518)
    scrollConfig:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.285)
    scrollConfig:DockMargin(0, 0, 0, RCD.ScrH*0.006)

    local vehicleView = vgui.Create("RCD:Accordion", scrollConfig)
    vehicleView:SetSize(RCD.ScrW*0.538, RCD.ScrH*0.03)
    vehicleView:Dock(TOP)
    vehicleView:DockMargin(0, 0, 0, RCD.ScrH*0.006)
    vehicleView:SetText("vehicleView")
    vehicleView:InitializeCategory("vehiclePosition", vehicleModel, false, editVehicle)

    local generalSettings = vgui.Create("RCD:Accordion", scrollConfig)
    generalSettings:SetSize(RCD.ScrW*0.538, RCD.ScrH*0.03)
    generalSettings:Dock(TOP)
    generalSettings:DockMargin(0, 0, 0, RCD.ScrH*0.006)
    generalSettings:SetText("generalSettings")
    generalSettings:InitializeCategory("vehicleSettings", vehicleModel, false, editVehicle)

    local priceSettings = vgui.Create("RCD:Accordion", scrollConfig)
    priceSettings:SetSize(RCD.ScrW*0.538, RCD.ScrH*0.03)
    priceSettings:Dock(TOP)
    priceSettings:DockMargin(0, 0, 0, RCD.ScrH*0.006)
    priceSettings:SetText("priceSettings")
    priceSettings:InitializeCategory("priceSettings", vehicleModel, false, editVehicle)

    local cardealerVehc = vgui.Create("RCD:Accordion", scrollConfig)
    cardealerVehc:SetSize(RCD.ScrW*0.538, RCD.ScrH*0.03)
    cardealerVehc:Dock(TOP)
    cardealerVehc:DockMargin(0, 0, 0, RCD.ScrH*0.006)
    cardealerVehc:SetText("cardealerJobSettings")
    cardealerVehc:InitializeCategory("cardealerVehicles", vehicleModel, false, editVehicle)

    chooseVehicle.OnSelect = function(pnl, index, data)
        local optionData = chooseVehicle:GetOptionData(index)
        if not istable(RCD.VehiclesList[optionData]) then return end
        
        local model = RCD.VehiclesList[optionData]["Model"] or "models/airboat.mdl"
        
        vehicleModel:RemoveWheels()
        vehicleModel:SetModel(model)

        if RCD.GetVehicleAddon(optionData) == "simfphys" then
            RCD.GenerateWheels(vehicleModel.Entity, optionData)
        end
        
        entryName:SetText(RCD.VehiclesList[optionData]["Name"])
        RCD.vehicleConfig["class"] = optionData

        vehicleView:InitializeCategory("vehiclePosition", vehicleModel, true)
        generalSettings:InitializeCategory("vehicleSettings", vehicleModel, true)
        priceSettings:InitializeCategory("priceSettings", vehicleModel, true)
    end

    local cancel = vgui.Create("RCD:SlideButton", vehicleMenu)
    cancel:SetSize(vehicleMenu:GetWide()/2.072, RCD.ScrH*0.041)
    cancel:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.6425)
    cancel:SetText(RCD.GetSentence("cancel"))
    cancel:SetFont("RCD:Font:12")
    cancel:SetTextColor(RCD.Colors["white"])
    cancel.MinMaxLerp = {100, 200}
    cancel:SetIconMaterial(nil)
    cancel:SetButtonColor(RCD.Colors["grey69"])
    cancel.DoClick = function()
        RCD.AdminMenu()
        if IsValid(vehicleMenu) then vehicleMenu:Remove() end
    end

    local createVehc = vgui.Create("RCD:SlideButton", vehicleMenu)
    createVehc:SetSize(vehicleMenu:GetWide()/2.055, RCD.ScrH*0.041)
    createVehc:SetPos(vehicleMenu:GetWide()/1.995, RCD.ScrH*0.6425)
    createVehc:SetText(RCD.GetSentence("validateCreateVehicle"))
    createVehc:SetFont("RCD:Font:12")
    createVehc:SetTextColor(RCD.Colors["white"])
    createVehc:InclineButton(0)
    createVehc.MinMaxLerp = {50, 200}
    createVehc:SetIconMaterial(nil)
    createVehc:SetButtonColor(RCD.Colors["purple"])
    createVehc.DoClick = function()
        local vehicleName = entryName:GetText()
        local vehicleClass = RCD.vehicleConfig["class"]
        local groupId = RCD.vehicleConfig["groupId"]
        local vehiclePrice = tonumber(entryPrice:GetText())

        if not isstring(vehicleClass) or vehicleClass == "" or vehicleClass == "default" then RCD.Notification(5, RCD.GetSentence("invalidVehicleClass")) return end
        if not isnumber(groupId) then RCD.Notification(5, RCD.GetSentence("invalidGroupVehicle")) return end
        if not isstring(vehicleName) or vehicleName == "" or vehicleName == "default" then RCD.Notification(5, RCD.GetSentence("invalidVehicleName")) return end
        if not isnumber(vehiclePrice) or vehiclePrice < 0 then RCD.Notification(5, RCD.GetSentence("invalidVehiclePrice")) return end

        local options = {}
        for k,v in pairs(RCD.vehicleConfig) do    
            options[k] = v
        end

        net.Start("RCD:Admin:Configuration")
            net.WriteUInt(3, 4)
            net.WriteString(vehicleName)
            net.WriteUInt(vehiclePrice, 32)
            net.WriteString(vehicleClass)
            net.WriteUInt(groupId, 32)
            net.WriteUInt(table.Count(options), 12)
            for k,v in pairs(options) do
                local valueType = type(v)

                net.WriteString(valueType)
                net.WriteString(k)
                net["Write"..RCD.TypeNet[valueType]](v, ((RCD.TypeNet[valueType] == "Int") and 32))
            end
            net.WriteBool(editVehicle)
            if editVehicle then
                net.WriteUInt(editVehicle["id"], 32)
            end
        net.SendToServer()
    end

    local closeLerp = 50
    local close = vgui.Create("DButton", vehicleMenu)
    close:SetSize(RCD.ScrH*0.026, RCD.ScrH*0.026)
    close:SetPos(vehicleMenu:GetWide()*0.945, RCD.ScrH*0.03)
    close:SetText("")
    close.Paint = function(self,w,h)
        closeLerp = Lerp(FrameTime()*5, closeLerp, (close:IsHovered() and 50 or 100))

        surface.SetDrawColor(ColorAlpha(RCD.Colors["white100"], closeLerp))
        surface.SetMaterial(RCD.Materials["icon_close"])
        surface.DrawTexturedRect(0, 0, w, h)
    end
    close.DoClick = function()
        vehicleMenu:Remove()
    end
end

function RCD.Settings()    
    if IsValid(settingsMenu) then settingsMenu:Remove() end

    settingsMenu = vgui.Create("DFrame")
    settingsMenu:SetSize(RCD.ScrW*0.55, RCD.ScrH*0.695)
    settingsMenu:SetDraggable(false)
    settingsMenu:MakePopup()
    settingsMenu:SetTitle("")
    settingsMenu:ShowCloseButton(false)
    settingsMenu:Center()
    settingsMenu.Paint = function(self,w,h)
        RCD.DrawBlur(self, 10) 

        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["blackpurple"])
        draw.RoundedBox(0, w/2-self:GetWide()*0.978/2, h*0.02, self:GetWide()*0.978, RCD.ScrH*0.062, RCD.Colors["white20"])

        draw.DrawText(RCD.GetSentence("adminMenuConfig"), "RCD:Font:10", w*0.025, h*0.02, RCD.Colors["white"], TEXT_ALIGN_LEFT)
        draw.DrawText(RCD.GetSentence("configureAddon"), "RCD:Font:11", w*0.025, h*0.06, RCD.Colors["white100"], TEXT_ALIGN_LEFT)
    end

    local scrollConfig = vgui.Create("RCD:DScroll", settingsMenu)
    scrollConfig:SetSize(settingsMenu:GetWide()*0.9785, RCD.ScrH*0.55)
    scrollConfig:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.083)
    scrollConfig:DockMargin(0, 0, 0, RCD.ScrH*0.006)

    if #RCD.ParametersConfig["compatibilities"] > 0 then
        local compatibilities = vgui.Create("RCD:Accordion", scrollConfig)
        compatibilities:SetSize(RCD.ScrW*0.538, RCD.ScrH*0.03)
        compatibilities:Dock(TOP)
        compatibilities:DockMargin(0, 0, 0, RCD.ScrH*0.006)
        compatibilities:SetText("compatibilities")
        compatibilities:InitializeCategory("compatibilities", nil, false, nil)
    end

    local generalSettings = vgui.Create("RCD:Accordion", scrollConfig)
    generalSettings:SetSize(RCD.ScrW*0.538, RCD.ScrH*0.03)
    generalSettings:Dock(TOP)
    generalSettings:DockMargin(0, 0, 0, RCD.ScrH*0.006)
    generalSettings:SetText("generalSettings")
    generalSettings:InitializeCategory("generalSettings", nil, false, nil)

    local nitroConfig = vgui.Create("RCD:Accordion", scrollConfig)
    nitroConfig:SetSize(RCD.ScrW*0.538, RCD.ScrH*0.03)
    nitroConfig:Dock(TOP)
    nitroConfig:DockMargin(0, 0, 0, RCD.ScrH*0.006)
    nitroConfig:SetText("nitroConfig")
    nitroConfig:InitializeCategory("nitroConfig", nil, false, nil)

    local beltConfig = vgui.Create("RCD:Accordion", scrollConfig)
    beltConfig:SetSize(RCD.ScrW*0.538, RCD.ScrH*0.03)
    beltConfig:Dock(TOP)
    beltConfig:DockMargin(0, 0, 0, RCD.ScrH*0.006)
    beltConfig:SetText("beltConfig")
    beltConfig:InitializeCategory("beltConfig", nil, false, nil)

    local engineConfig = vgui.Create("RCD:Accordion", scrollConfig)
    engineConfig:SetSize(RCD.ScrW*0.538, RCD.ScrH*0.03)
    engineConfig:Dock(TOP)
    engineConfig:DockMargin(0, 0, 0, RCD.ScrH*0.006)
    engineConfig:SetText("engineConfig")
    engineConfig:InitializeCategory("engineModule", nil, false, nil)
    
    local speedometerConfig = vgui.Create("RCD:Accordion", scrollConfig)
    speedometerConfig:SetSize(RCD.ScrW*0.538, RCD.ScrH*0.03)
    speedometerConfig:Dock(TOP)
    speedometerConfig:DockMargin(0, 0, 0, RCD.ScrH*0.006)
    speedometerConfig:SetText("speedometerConfig")
    speedometerConfig:InitializeCategory("speedometerModule", nil, false, nil)
    
    local driveConfig = vgui.Create("RCD:Accordion", scrollConfig)
    driveConfig:SetSize(RCD.ScrW*0.538, RCD.ScrH*0.03)
    driveConfig:Dock(TOP)
    driveConfig:DockMargin(0, 0, 0, RCD.ScrH*0.006)
    driveConfig:SetText("driveConfig")
    driveConfig:InitializeCategory("driveModule", nil, false, nil)

    local configureVehc = vgui.Create("RCD:SlideButton", settingsMenu)
    configureVehc:SetSize(settingsMenu:GetWide()/2.072, RCD.ScrH*0.041)
    configureVehc:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.6425)
    configureVehc:SetFont("RCD:Font:12")
    configureVehc:SetTextColor(RCD.Colors["white"])
    configureVehc.MinMaxLerp = {100, 200}
    configureVehc:SetIconMaterial(nil)
    configureVehc:SetButtonColor(RCD.Colors["grey69"])
    configureVehc.DoClick = function()
        if IsValid(settingsMenu) then settingsMenu:Remove() end
        RCD.AdminMenu()
    end
    configureVehc.Think = function(self)
        self:SetText(RCD.GetSentence("configureCarDealers"))
    end

    local saveSettings = vgui.Create("RCD:SlideButton", settingsMenu)
    saveSettings:SetSize(settingsMenu:GetWide()/2.055, RCD.ScrH*0.041)
    saveSettings:SetPos(settingsMenu:GetWide()/1.995, RCD.ScrH*0.6425)
    saveSettings:SetFont("RCD:Font:12")
    saveSettings:SetTextColor(RCD.Colors["white"])
    saveSettings:InclineButton(0)
    saveSettings.MinMaxLerp = {50, 200}
    saveSettings:SetIconMaterial(nil)
    saveSettings:SetButtonColor(RCD.Colors["purple"])
    saveSettings.DoClick = function()
        RCD.AdvancedConfiguration["settings"] = RCD.AdvancedConfiguration["settings"] or {}
        
        net.Start("RCD:Admin:Configuration")
            net.WriteUInt(10, 4)
            net.WriteUInt(table.Count(RCD.AdvancedConfiguration["settings"]), 12)
            for k,v in pairs(RCD.AdvancedConfiguration["settings"]) do
                local valueType = type(v)
    
                net.WriteString(valueType)
                net.WriteString(k)
                net["Write"..RCD.TypeNet[valueType]](v, ((RCD.TypeNet[valueType] == "Int") and 32))
            end
        net.SendToServer()
    end
    saveSettings.Think = function(self)
        self:SetText(RCD.GetSentence("validateSaveSettings"))
    end

    local closeLerp = 50
    local close = vgui.Create("DButton", settingsMenu)
    close:SetSize(RCD.ScrH*0.026, RCD.ScrH*0.026)
    close:SetPos(settingsMenu:GetWide()*0.945, RCD.ScrH*0.03)
    close:SetText("")
    close.Paint = function(self,w,h)
        closeLerp = Lerp(FrameTime()*5, closeLerp, (close:IsHovered() and 50 or 100))

        surface.SetDrawColor(ColorAlpha(RCD.Colors["white100"], closeLerp))
        surface.SetMaterial(RCD.Materials["icon_close"])
        surface.DrawTexturedRect(0, 0, w, h)
    end
    close.DoClick = function()
        settingsMenu:Remove()
    end
end

local playerList, searchSteamId
local function addPlayer(steamId)
    if not IsValid(playerList) then return end

    local ply = player.GetBySteamID64(steamId)
    
    local playerButton = vgui.Create("DButton", playerList)
    playerButton:SetSize(0, RCD.ScrH*0.048)
    playerButton:Dock(TOP)
    playerButton:DockMargin(0, 0, 0, RCD.ScrH*0.006)
    playerButton:SetText("")
    playerButton.Paint = function(self,w,h)
        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["white5"])
    end

    local playerAvatar = vgui.Create("RCD:CircularAvatar", playerButton)
    playerAvatar:SetSize(RCD.ScrH*0.04, RCD.ScrH*0.04)
    playerAvatar:SetPos(RCD.ScrW*0.0025, RCD.ScrH*0.005)
    if IsValid(ply) then
        playerAvatar.RCDAvatar:SetPlayer(ply, 64)
    end
    
    local playerName = vgui.Create("DLabel", playerButton)
    playerName:SetSize(RCD.ScrW*0.19, RCD.ScrH*0.028)
    playerName:SetPos(RCD.ScrW*0.0305, 0)
    playerName:SetText((ply and ply:Name() or "DISCONNECTED"))
    playerName:SetTextColor(RCD.Colors["white100"])
    playerName:SetFont("RCD:Font:12")

    local playerId = vgui.Create("DLabel", playerButton)
    playerId:SetSize(RCD.ScrW*0.19, RCD.ScrH*0.028)
    playerId:SetPos(RCD.ScrW*0.0305, RCD.ScrH*0.018)
    playerId:SetText((steamId or "71111111111111111"))
    playerId:SetTextColor(RCD.Colors["white100"])
    playerId:SetFont("RCD:Font:13")

    local editButton = vgui.Create("RCD:SlideButton", playerButton)
    editButton:SetSize(RCD.ScrH*0.04, RCD.ScrH*0.04)
    editButton:SetPos(RCD.ScrW*0.2185, RCD.ScrH*0.004)
    editButton:SetText("")
    editButton.MinMaxLerp = {5, 7}
    editButton:SetIconMaterial(nil)
    editButton:SetButtonColor(RCD.Colors["white5"])
    editButton.PaintOver = function(self,w,h)
        surface.SetDrawColor(RCD.Colors["white100"])
        surface.SetMaterial(RCD.Materials["icon_edit"])
        surface.DrawTexturedRect(w/2-((w/2)/2), h/2-((h/2)/2), w/2, h/2)
    end
    editButton.DoClick = function()
        net.Start("RCD:Admin:Players")
            net.WriteUInt(1, 4)
            net.WriteString(steamId)
        net.SendToServer()
    end
end

local function reloadPlayers()
    playerList:Clear()

    local playerList = table.Copy(player.GetAll())
    table.sort(playerList, function(a, b) return a:Nick():lower() < b:Nick():lower() end)

    for k,v in ipairs(playerList) do
        if v:IsBot() then continue end

        addPlayer(v:SteamID64())
    end
end

function RCD.ManagePlayers()
    if IsValid(managePlayer) then managePlayer:Remove() end

    managePlayer = vgui.Create("DFrame")
    managePlayer:SetSize(RCD.ScrW*0.503, RCD.ScrH*0.603)
    managePlayer:SetDraggable(false)
    managePlayer:MakePopup()
    managePlayer:SetTitle("")
    managePlayer:ShowCloseButton(false)
    managePlayer:Center()
    managePlayer.Paint = function(self,w,h)
        RCD.DrawBlur(self, 10) 

        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["blackpurple"])
        draw.RoundedBox(0, w/2-RCD.ScrW*0.49/2, h*0.02, RCD.ScrW*0.49, RCD.ScrH*0.062, RCD.Colors["white20"])

        draw.RoundedBox(0, w/2-RCD.ScrW*0.49/2, h*0.13, RCD.ScrW*0.243, RCD.ScrH*0.045, RCD.Colors["white20"])
        draw.RoundedBox(0, RCD.ScrW*0.2515, h*0.13, RCD.ScrW*0.245, RCD.ScrH*0.045, RCD.Colors["white20"])
        
        draw.DrawText(RCD.GetSentence("adminMenuPlayer"), "RCD:Font:10", w*0.025, h*0.02, RCD.Colors["white"], TEXT_ALIGN_LEFT)
        draw.DrawText(RCD.GetSentence("adminMenuPlayerDesc"), "RCD:Font:11", w*0.025, h*0.07, RCD.Colors["white100"], TEXT_ALIGN_LEFT)

        draw.DrawText(RCD.GetSentence("connectedPlayers"), "RCD:Font:18", w*0.25, h*0.145, RCD.Colors["white"], TEXT_ALIGN_CENTER)
        draw.DrawText(RCD.GetSentence("searchDisconnected"), "RCD:Font:18", w*0.75, h*0.145, RCD.Colors["white"], TEXT_ALIGN_CENTER)
    end

    playerList = vgui.Create("RCD:DScroll", managePlayer)
    playerList:SetSize(managePlayer:GetWide()/2.07, RCD.ScrH*0.417)
    playerList:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.1285)

    reloadPlayers()

    searchSteamId = vgui.Create("RCD:DScroll", managePlayer)
    searchSteamId:SetSize(managePlayer:GetWide()/2.055, RCD.ScrH*0.417)
    searchSteamId:SetPos(managePlayer:GetWide()/2, RCD.ScrH*0.1285)
    
    local entryName = vgui.Create("RCD:TextEntry", searchSteamId)
    entryName:SetSize(0, RCD.ScrH*0.048)
    entryName:Dock(TOP)
    entryName:DockMargin(0, 0, 0, RCD.ScrH*0.006)
    entryName:SetPlaceHolder(RCD.GetSentence("searchSteamId2"))

    local searchAccept = vgui.Create("RCD:SlideButton", searchSteamId)
    searchAccept:SetSize(0, RCD.ScrH*0.042)
    searchAccept:Dock(TOP)
    searchAccept:SetText(RCD.GetSentence("searchPlayer"))
    searchAccept:SetFont("RCD:Font:12")
    searchAccept:SetTextColor(RCD.Colors["white"])
    searchAccept:InclineButton(0)
    searchAccept.MinMaxLerp = {100, 200}
    searchAccept:SetIconMaterial(nil)
    searchAccept:SetButtonColor(RCD.Colors["purple"])
    searchAccept.DoClick = function()
        if entryName:GetText() == RCD.GetSentence("searchSteamId2") then return end

        net.Start("RCD:Admin:Players")
            net.WriteUInt(1, 4)
            net.WriteString(entryName:GetText())
        net.SendToServer()
    end

    local cancel = vgui.Create("RCD:SlideButton", managePlayer)
    cancel:SetSize(managePlayer:GetWide()/2.072, RCD.ScrH*0.041)
    cancel:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.552)
    cancel:SetText(RCD.GetSentence("cancel"))
    cancel:SetFont("RCD:Font:12")
    cancel:SetTextColor(RCD.Colors["white"])
    cancel:InclineButton(0)
    cancel:SetIconMaterial(nil)
    cancel.MinMaxLerp = {100, 200}
    cancel:SetIconMaterial(nil)
    cancel:SetButtonColor(RCD.Colors["grey69"])
    cancel.DoClick = function()
        if IsValid(managePlayer) then managePlayer:Remove() end
        RCD.Settings()
    end

    local refreshButton = vgui.Create("RCD:SlideButton", managePlayer)
    refreshButton:SetSize(managePlayer:GetWide()/2.055, RCD.ScrH*0.041)
    refreshButton:SetPos(managePlayer:GetWide()/2, RCD.ScrH*0.552)
    refreshButton:SetText(RCD.GetSentence("refreshList"))
    refreshButton:SetFont("RCD:Font:12")
    refreshButton:SetTextColor(RCD.Colors["white"])
    refreshButton:InclineButton(0)
    refreshButton.MinMaxLerp = {100, 200}
    refreshButton:SetIconMaterial(nil)
    refreshButton:SetButtonColor(RCD.Colors["purple"])
    refreshButton.DoClick = function()
        reloadPlayers()
    end

    local closeLerp = 50
    local close = vgui.Create("DButton", managePlayer)
    close:SetSize(RCD.ScrH*0.026, RCD.ScrH*0.026)
    close:SetPos(managePlayer:GetWide()*0.94, RCD.ScrH*0.03)
    close:SetText("")
    close.Paint = function(self,w,h)
        closeLerp = Lerp(FrameTime()*5, closeLerp, (close:IsHovered() and 50 or 100))

        surface.SetDrawColor(ColorAlpha(RCD.Colors["white100"], closeLerp))
        surface.SetMaterial(RCD.Materials["icon_close"])
        surface.DrawTexturedRect(0, 0, w, h)
    end
    close.DoClick = function()
        managePlayer:Remove()
    end
end

function RCD.UpdateOwnedVehicles(steamId, vehiclesOwned)
    vehiclesOwned = vehiclesOwned or {}

    if IsValid(managePlayer) then managePlayer:Remove() end

    local tableToSend = {}
    managePlayer = vgui.Create("DFrame")
    managePlayer:SetSize(RCD.ScrW*0.503, RCD.ScrH*0.603)
    managePlayer:SetDraggable(false)
    managePlayer:MakePopup()
    managePlayer:SetTitle("")
    managePlayer:ShowCloseButton(false)
    managePlayer:Center()
    managePlayer.Paint = function(self,w,h)
        RCD.DrawBlur(self, 10) 

        draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["blackpurple"])
        draw.RoundedBox(0, w/2-RCD.ScrW*0.49/2, h*0.02, RCD.ScrW*0.49, RCD.ScrH*0.062, RCD.Colors["white20"])

        draw.RoundedBox(0, w/2-RCD.ScrW*0.49/2, h*0.13, RCD.ScrW*0.243, RCD.ScrH*0.045, RCD.Colors["white20"])
        draw.RoundedBox(0, RCD.ScrW*0.2515, h*0.13, RCD.ScrW*0.245, RCD.ScrH*0.045, RCD.Colors["white20"])
        
        draw.DrawText(RCD.GetSentence("adminMenuPlayer"), "RCD:Font:10", w*0.025, h*0.02, RCD.Colors["white"], TEXT_ALIGN_LEFT)
        draw.DrawText(RCD.GetSentence("adminMenuPlayerDesc"), "RCD:Font:11", w*0.025, h*0.07, RCD.Colors["white100"], TEXT_ALIGN_LEFT)

        draw.DrawText(RCD.GetSentence("selectedPlayer"), "RCD:Font:18", w*0.25, h*0.145, RCD.Colors["white"], TEXT_ALIGN_CENTER)
        draw.DrawText(RCD.GetSentence("allVehicles"), "RCD:Font:18", w*0.75, h*0.145, RCD.Colors["white"], TEXT_ALIGN_CENTER)
    end

    playerList = vgui.Create("RCD:DScroll", managePlayer)
    playerList:SetSize(managePlayer:GetWide()/2.07, RCD.ScrH*0.417)
    playerList:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.1285)

    addPlayer(steamId)

    scrollVehicles = vgui.Create("RCD:DScroll", managePlayer)
    scrollVehicles:SetSize(managePlayer:GetWide()/2.055, RCD.ScrH*0.417)
    scrollVehicles:SetPos(managePlayer:GetWide()/2, RCD.ScrH*0.1285)

    for k,v in pairs(RCD.GetVehicles()) do
        local vehicleButton = vgui.Create("DButton", scrollVehicles)
        vehicleButton:SetSize(0, RCD.ScrH*0.037)
        vehicleButton:Dock(TOP)
        vehicleButton:DockMargin(0, 0, 0, RCD.ScrH*0.005)
        vehicleButton:SetText("")
        vehicleButton.Paint = function(self,w,h)
            draw.RoundedBox(0, 0, 0, w, h, RCD.Colors["white5"])
        end

        local vehicleName = vgui.Create("DLabel", vehicleButton)
        vehicleName:SetSize(RCD.ScrW*0.19, RCD.ScrH*0.037)
        vehicleName:SetPos(RCD.ScrW*0.008, 0)
        vehicleName:SetTextColor(RCD.Colors["white100"])
        vehicleName:SetFont("RCD:Font:13")
        vehicleName.Think = function(self)
            local groupName = RCD.VehicleGroupGetName(v.groupId) or RCD.GetSentence("undefined")
            
            self:SetText("["..groupName.."] "..(v.name or "nil"))
        end

        local checkBox = vgui.Create("RCD:CheckBox", vehicleButton)
        checkBox:SetSize(RCD.ScrH*0.023, RCD.ScrH*0.023)
        checkBox:SetPos(RCD.ScrW*0.225, vehicleButton:GetTall()/2 - checkBox:GetTall()/2)
        vehicleButton.DoClick = function()
            local active = checkBox:GetActive()
            
            checkBox:SetActive(!active)
            tableToSend[v.id] = !active
        end

        checkBox.OnChange = function()
            local active = checkBox:GetActive()

            tableToSend[v.id] = active
        end

        if vehiclesOwned[v.id] then
            checkBox:SetActive(true)
        end
    end

    local cancel = vgui.Create("RCD:SlideButton", managePlayer)
    cancel:SetSize(managePlayer:GetWide()/2.072, RCD.ScrH*0.041)
    cancel:SetPos(RCD.ScrW*0.0065, RCD.ScrH*0.552)
    cancel:SetText(RCD.GetSentence("cancel"))
    cancel:SetFont("RCD:Font:12")
    cancel:SetTextColor(RCD.Colors["white"])
    cancel:InclineButton(0)
    cancel:SetIconMaterial(nil)
    cancel.MinMaxLerp = {100, 200}
    cancel:SetIconMaterial(nil)
    cancel:SetButtonColor(RCD.Colors["grey69"])    
    cancel.DoClick = function()
        RCD.ManagePlayers()
    end

    local saveInformations = vgui.Create("RCD:SlideButton", managePlayer)
    saveInformations:SetSize(managePlayer:GetWide()/2.055, RCD.ScrH*0.041)
    saveInformations:SetPos(managePlayer:GetWide()/2, RCD.ScrH*0.552)
    saveInformations:SetText(RCD.GetSentence("savePlayerInfo"))
    saveInformations:SetFont("RCD:Font:12")
    saveInformations:SetTextColor(RCD.Colors["white"])
    saveInformations:InclineButton(0)
    saveInformations.MinMaxLerp = {100, 200}
    saveInformations:SetIconMaterial(nil)
    saveInformations:SetButtonColor(RCD.Colors["purple"])
    saveInformations.DoClick = function()
        net.Start("RCD:Admin:Players")
            net.WriteUInt(2, 4)
            net.WriteString(steamId)
            net.WriteUInt(table.Count(tableToSend), 12)
            for k,v in pairs(tableToSend) do
                if v == nil then continue end
                net.WriteUInt(k, 32)
                net.WriteBool(v)
            end
        net.SendToServer()
    end

    local closeLerp = 50
    local close = vgui.Create("DButton", managePlayer)
    close:SetSize(RCD.ScrH*0.026, RCD.ScrH*0.026)
    close:SetPos(managePlayer:GetWide()*0.94, RCD.ScrH*0.03)
    close:SetText("")
    close.Paint = function(self,w,h)
        closeLerp = Lerp(FrameTime()*5, closeLerp, (close:IsHovered() and 50 or 100))

        surface.SetDrawColor(ColorAlpha(RCD.Colors["white100"], closeLerp))
        surface.SetMaterial(RCD.Materials["icon_close"])
        surface.DrawTexturedRect(0, 0, w, h)
    end
    close.DoClick = function()
        managePlayer:Remove()
    end
end

net.Receive("RCD:Admin:Players", function(len, ply)
    local uInt = net.ReadUInt(4)

    if uInt == 1 then
        local steamId64 = net.ReadString()
        local vehiclesOwnedCounts = net.ReadUInt(12)

        local vehiclesOwned = {}
        for i=1, vehiclesOwnedCounts do
            local vehicleId = net.ReadUInt(32)

            vehiclesOwned[vehicleId] = true
        end

        RCD.UpdateOwnedVehicles(steamId64, vehiclesOwned)
    elseif uInt == 2 then
        RCD.ManagePlayers()
    end
end)

net.Receive("RCD:Admin:Configuration", function()
    local uInt = net.ReadUInt(4)

    --[[ Add into the table all vehicle groups ]]
    if uInt == 1 then
        local bytesAmount = net.ReadUInt(32)
        local unCompressTable = util.Decompress(net.ReadData(bytesAmount)) or ""
        local groupsTable = util.JSONToTable(unCompressTable)

        RCD.AdvancedConfiguration["groupsList"] = groupsTable

    --[[ Add/Edit only one vehicle groups ]]
    elseif uInt == 2 then
        local groupId = net.ReadUInt(32)
        local groupName = net.ReadString()
        
        local countRankAccess = net.ReadUInt(8)
        local rankAccess = {}
        for i=1, countRankAccess do
            local rankName = net.ReadString()
            
            rankAccess[rankName] = true
        end
        
        local countJobAccess = net.ReadUInt(8)
        local jobAccess = {}
        for i=1, countJobAccess do
            local jobName = net.ReadString()
            
            jobAccess[jobName] = true
        end
        
        local groupTable = {
            ["id"] =  groupId,
            ["name"] = groupName,
            ["rankAccess"] = rankAccess,
            ["jobAccess"] = jobAccess
        }
        
        RCD.AdvancedConfiguration["groupsList"] = RCD.AdvancedConfiguration["groupsList"] or {}
        RCD.AdvancedConfiguration["groupsList"][groupId] = groupTable

        if IsValid(groupMenu) then groupMenu:Remove() end
        RCD.AdminMenu()

    --[[ Remove and update groups ]]
    elseif uInt == 3 then
        local groupId = net.ReadUInt(32)

        RCD.AdvancedConfiguration["groupsList"][groupId] = nil
        reloadGroups()
    
    --[[ Open the admin menu ]]
    elseif uInt == 4 then
        RCD.Settings()

    --[[ Add into the table all vehicles ]]
    elseif uInt == 5 then
        local bytesAmount = net.ReadUInt(32)
        local unCompressTable = util.Decompress(net.ReadData(bytesAmount)) or ""
        local vehicleTable = util.JSONToTable(unCompressTable)

        RCD.AdvancedConfiguration["vehiclesList"] = vehicleTable

        hook.Run("RCD:VehiclesLoaded")

    --[[ Add into the table one vehicle ]]
    elseif uInt == 6 then
        local name = net.ReadString()
        local price = net.ReadUInt(32)
        local class = net.ReadString()
        local optionsCount = net.ReadUInt(12)

        local options = {}
        for i=1, optionsCount do
            local valueType = net.ReadString()
            local key = net.ReadString()
            local value = net["Read"..RCD.TypeNet[valueType]](32)

            options[key] = value
        end
        
        local groupId = net.ReadUInt(32)
        local vehicleId = net.ReadUInt(32)

        local tableToAdd = {
            ["name"] = name,
            ["price"] = price,
            ["class"] = class,
            ["options"] = options,
            ["groupId"] = groupId,
            ["id"] = vehicleId,
        }

        RCD.AdvancedConfiguration["vehiclesList"] = RCD.AdvancedConfiguration["vehiclesList"] or {}
        RCD.AdvancedConfiguration["vehiclesList"][vehicleId] = tableToAdd
        
        if IsValid(vehicleMenu) then vehicleMenu:Remove() end
        RCD.AdminMenu()

    --[[ Remove one vehicle with his uniqueid ]]
    elseif uInt == 7 then
        local vehicleId = net.ReadUInt(32)

        RCD.AdvancedConfiguration["vehiclesList"][vehicleId] = nil
        reloadVehicles()
        
    --[[ Open the npc menu to edit infos ]]
    elseif uInt == 8 then
        local npcId = net.ReadUInt(32)
        local model = net.ReadString()
        local name = net.ReadString()

        local groupsCount = net.ReadUInt(12)
        local npcGroups = {}
        for i=1, groupsCount do
            local groupsId = net.ReadUInt(32)

            npcGroups[groupsId] = true
        end

        local plateformsCount = net.ReadUInt(12)
        local plateforms = {}
        for i=1, plateformsCount do
            local pos, ang = net.ReadVector(), net.ReadAngle()

            plateforms[#plateforms + 1] = {
                ["pos"] = pos,
                ["ang"] = ang
            }
        end

        local infoTable = {
            ["id"] = npcId,
            ["model"] = model,
            ["name"] = name,
            ["groups"] = npcGroups,
            ["plateforms"] = plateforms
        }

        RCD.NPCMenu(npcId, infoTable)

    --[[ Place all plateforms ]]
    elseif uInt == 9 then
        local plateformTableCount = net.ReadUInt(12)

        for i=1, plateformTableCount do
            local pos, ang = net.ReadVector(), net.ReadAngle()

            RCD.CreateRCDPlateform(pos, ang)
        end

    --[[ Load settings ]]
    elseif uInt == 10 then
        local settingsCount = net.ReadUInt(12)

        for i=1, settingsCount do
            local valueType = net.ReadString()
            local key = net.ReadString()
            local value = net["Read"..RCD.TypeNet[valueType]](((RCD.TypeNet[valueType] == "Int") and 32))

            RCD.DefaultSettings[key] = value
        end

        if istable(simfphys) then
            RunConsoleCommand("cl_simfphys_hud", RCD.DefaultSettings["activateSimfphysSpeedometer"] and 1 or 0)
        end
    end
end)
--addons/realisticcardealer/lua/realistic_cardealer/client/cl_notify.lua:
RCD.Notify = RCD.Notify or {}

 // 76561198447872548
function RCD.Notification(time, msg)
    if RCD.GetSetting("activateNotification", "boolean") then
        RCD.Notify[#RCD.Notify + 1] = {
            ["Message"] = msg,
            ["Time"] = CurTime() + (time or 5),
            ["Material"] = RCD.Materials["notify_bell"], 
        }
    else
        notification.AddLegacy(msg, NOTIFY_GENERIC, time)
    end
end

function RCD.DrawNotification()
    if RCD.Notify and #RCD.Notify > 0 then 
        for k,v in ipairs(RCD.Notify) do 
            surface.SetFont("RCD:Font:13")
            local SizeText = surface.GetTextSize(v.Message)

            if not isnumber(v.RLerp) then v.RLerp = -SizeText end 
            if not isnumber(v.RLerpY) then v.RLerpY = (RCD.ScrH*0.055*k)-RCD.ScrH*0.038 end

            if v.Time > CurTime() then
                v.RLerp = Lerp(FrameTime()*3, v.RLerp, RCD.ScrW*0.02)
            else
                v.RLerp = Lerp(FrameTime()*3, v.RLerp, (-RCD.ScrW*0.25 - SizeText))
                if v.RLerp < (-RCD.ScrW*0.15 - SizeText) then 
                    RCD.Notify[k] = nil 
                    RCD.Notify = table.ClearKeys(RCD.Notify) 
                end
            end 
            
            v.RLerpY = Lerp(FrameTime()*8, v.RLerpY, (RCD.ScrH*0.055*k)-RCD.ScrH*0.038)
 
            local posy = v.RLerpY
            local incline = RCD.ScrH*0.055

            local leftPart = {
                {x = v.RLerp, y = posy},
                {x = v.RLerp + incline + SizeText + RCD.ScrH*0.043, y = posy},
                {x = v.RLerp + RCD.ScrH*0.043 + SizeText + RCD.ScrH*0.043, y = posy + RCD.ScrH*0.043},
                {x = v.RLerp, y = posy + RCD.ScrH*0.043},
            }
            
            surface.SetDrawColor(RCD.Colors["black18220"])
            draw.NoTexture()
            surface.DrawPoly(leftPart)

            local rightPart = {
                {x = v.RLerp, y = posy},
                {x = v.RLerp + incline, y = posy},
                {x = v.RLerp + RCD.ScrH*0.043, y = posy + RCD.ScrH*0.043},
                {x = v.RLerp, y = posy + RCD.ScrH*0.043},
            }
            
            surface.SetDrawColor(RCD.Colors["purple"])
            draw.NoTexture()
            surface.DrawPoly(rightPart)

            surface.SetDrawColor(RCD.Colors["white"])
            surface.SetMaterial(v.Material)
            surface.DrawTexturedRect(v.RLerp + RCD.ScrW*0.006, v.RLerpY + RCD.ScrH*0.007, RCD.ScrH*0.027, RCD.ScrH*0.027)

            draw.SimpleText(v.Message, "RCD:Font:13", v.RLerp + RCD.ScrW*0.037, v.RLerpY + RCD.ScrH*0.041/2, RCD.Colors["white"], TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
        end 
    end
end

hook.Add("DrawOverlay", "RCD:DrawOverlay:Notify", function()
    if IsValid(RCDMainFrame) then return end

    RCD.DrawNotification()
end)

net.Receive("RCD:Notification", function()
    local time = net.ReadUInt(3)
    local msg = net.ReadString()
    
    if RCD.GetSetting("activateNotification", "boolean") then
        RCD.Notification(time, msg)
    else
        notification.AddLegacy(msg, NOTIFY_GENERIC, time)
    end
end)
--addons/realisticcardealer/lua/realistic_cardealer/client/cl_speedometers.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/client/cl_job.lua:
return gluapack()()
--addons/realisticcardealer/lua/realistic_cardealer/client/cl_3d2d_lib.lua:
return gluapack()()
--lua/autorun/ricoplayer.lua:
return gluapack()()
--addons/rsc/lua/rsc/shared/sh_utils.lua:
local promise = RSC.promise

function RSC.Log(level, msg, ...)
    level = level or "info"
    msg = msg or ""
    MsgN("[RSC] ", level:upper(), " - ", msg:format(...))
end

if CLIENT then
    RSC.AccessRequests = {}
end

function RSC.HasAccess(ply, cb)
    if SERVER and not IsValid(ply) then return cb(false) end

    -- Clients need to ask server about access
    if CLIENT then
        table.insert(RSC.AccessRequests, cb)

        if #RSC.AccessRequests == 1 then
            net.Start("RSC.NetworkV2")
                net.WriteUInt(RSC.NET_OP_CHECK_ACCESS, 4)
            net.SendToServer()
        end
    return end

    -- Custom Rank System
    if RSC.Config.UseCustomRanks then
        local can = RSC.Config.CustomRanksIndexes[ ply:GetUserGroup() ] ~= nil
        cb(tobool(can))
    return end

    -- CAMI access system
    if RSC.Config.CAMIEnabled then
        CAMI.PlayerHasAccess(ply, "screengrab", cb)
    return end

    -- Fallback access system
    cb(ply:IsSuperAdmin())
end

function RSC.AsyncHasAccess(ply)
    return promise.New(function(resolve)
        RSC.HasAccess(ply, resolve)
    end)
end

function RSC.CanScreengrab(receiver, victim, cb)
    if CLIENT and RSC.LocalPlayer then receiver = RSC.LocalPlayer end

    RSC.HasAccess(receiver, function(can)
        if not can or not IsValid(victim) or victim:IsBot() then return cb(false) end

        local receiverRank, victimRank = receiver:GetUserGroup(), victim:GetUserGroup()
        if receiver == victim or receiverRank == victimRank then return cb(true) end

        if RSC.Config.UseCustomRanks then
            if receiverRank == RSC.Config.CustomRanks[1] then return cb(true) end
            if not RSC.Config.CustomRanksIndexes[victimRank] then return cb(true) end
            if RSC.Config.CustomRanksIndexes[receiverRank] > RSC.Config.CustomRanksIndexes[victimRank] then return cb(true) end

            cb(false)
        return end

        if receiver:IsSuperAdmin() then return cb(true) end -- By default superadmins have full access

        if RSC.Config.CAMIEnabled then
            cb( not CAMI.UsergroupInherits(victim:GetUserGroup(), receiver:GetUserGroup()) )
        return end

        cb(false)
    end)
end

function RSC.AsyncCanScreengrab(receiver, victim)
    return promise.New(function(resolve)
        RSC.CanScreengrab(receiver, victim, resolve)
    end)
end

-- Returns image format and quality
function RSC.ParseQuality(quality)
    if quality == 0 then return "jpeg", 60 end
    if quality == 2 then return "jpeg", 90 end
    return "jpeg", 80 -- by default use good quality
end

-- Returns player if found by a search string
function RSC.FindPlayer(str)
    if not isstring(str) then return end
    if str:match("^STEAM_%d:[01]:%d+$") then -- Find by SteamID
        local ply = player.GetBySteamID(str)
        if ply then return ply end
    end
    if str:match("^7%d+$") then -- Find by SteamID64
        local ply = player.GetBySteamID64(str)
        if ply then return ply end
    end

    -- Find by name
    str = str:lower()
    for _, ply in ipairs( player.GetHumans() ) do
        if ply:GetName():lower():match(str) then
            return ply
        end

        if DarkRP and ply:SteamName():lower():match(str) then
            return ply
        end
    end
end

-- Generates unique id in base64url encoding
function RSC.UniqueID(len)
    local chars = {}
    for i = 1, len or 4 do
        table.insert(chars, string.char(math.random(0, 255)))
    end

    local hash = table.concat(chars)
    hash = util.Base64Encode(hash, true)
    hash = hash:gsub("[%=%+%/]", "")
    return hash
end

-- Returns players steamname
function RSC.SteamName(ply)
    if not IsValid(ply) then return end
    return DarkRP and ply:SteamName() or ply:GetName()
end

-- Checks if CAMI available
function RSC.IsCAMIAvailable()
    return CAMI and CAMI.Version >= 20150704
end

function RSC.RegisterCAMIPrivilege()
    return RSC.IsCAMIAvailable() and CAMI.RegisterPrivilege({
        Name = "screengrab",
        MinAccess = "superadmin",
        Description = "Permission to screengrab someone using Retro's Screengrabber"
    })
end

function RSC.Command(name, fn)
    if CLIENT and RSC.Config.SilentMode == nil then
        -- We need to wait for config to be loaded
        -- so we can set silent mode for commands
        RSC.Commands[name] = fn
        return
    end

    concommand.Add(name, fn)
end

function RSC.ConVar(name, value, helptext)
    return CreateConVar(name, value, { FCVAR_ARCHIVE, CLIENT and 16 or 0 }, helptext)
end

--addons/rsc/lua/rsc/client/cl_net.lua:
local promise = RSC.promise

local function RequestCapture()
    local quality, serviceName, prepareData = net.ReadUInt(2), net.ReadString(), net.ReadBool() and net.ReadString()
    local service = RSC.Service.Get(serviceName)

    local onResult = promise.Async(function(data)
        RSC.SendMessage(RSC.MESSAGE_TYPE_SUCCESS, "#rsc.notify.uploading")
        local ok, uploadData = service:Upload(data, quality, prepareData):SafeAwait()
        if not ok then return promise.Reject(RSC.GetPhrase("rsc.errors.upload_failed"):format(uploadData)) end

        RSC.SendMessage(RSC.MESSAGE_TYPE_SUCCESS, "#rsc.notify.upload_success")
        net.Start("RSC.NetworkV2")
            net.WriteUInt(RSC.NET_OP_CAPTURE_RESULT, 4)
            net.WriteBool(ok)
            net.WriteString(uploadData)
        net.SendToServer()
    end)

    RSC.Capture(quality, RSC.SendMessage, function(...)
        onResult(...):Catch(RSC.SendError)
    end)
end

local RequestRegistered = promise.Async(function()
    local uniqueID, victim, quality, serviceName, prepareData = net.ReadString(), net.ReadEntity(), net.ReadUInt(2), net.ReadString(), net.ReadBool() and net.ReadString()

    local request = RSC.CaptureRequest.Requests[victim]
    if not request then
        request = RSC.CaptureRequest.New()
        request.victim = victim
        RSC.CaptureRequest.Requests[victim] = request
    end

    request.uniqueID = uniqueID
    RSC.CaptureRequest.RequestsByID[uniqueID] = request

    request.onRegistered:Emit(request, quality, serviceName, prepareData)
end)

local OPS = {
    [RSC.NET_OP_REQUEST_CAPTURE] = RequestCapture,
    [RSC.NET_OP_REQUEST_REGISTERED] = RequestRegistered,
    [RSC.NET_OP_MESSAGE] = function()
        local type, message, source, victim = RSC.ReadMessage()
        local request = RSC.CaptureRequest.Requests[victim]
        if request then request.onMessage:Emit(request, type, message, source) end
    end,
    [RSC.NET_OP_CAPTURE_RESULT] = function()
        local victim, ok, result = net.ReadEntity(), net.ReadBool(), net.ReadString()
        local request = RSC.CaptureRequest.Requests[victim]
        if request then request:SetResult(ok, result) end
    end,
    [RSC.NET_OP_CHECK_ACCESS] = function()
        local can = net.ReadBool()
        for i, cb in ipairs(RSC.AccessRequests) do
            RSC.AccessRequests[i] = nil
            if not isfunction(cb) then continue end

            xpcall(cb, ErrorNoHaltWithStack, can)
        end
    end,
    [RSC.NET_OP_UPDATE_CONFIG] = function()
        while net.ReadBool() do
            RSC.Config[ net.ReadString() ] = net.ReadType()
        end
        RSC.Config.CustomRanksIndexes = {} -- Also don't forget to update this in config.lua
        for k, v in pairs(RSC.Config.CustomRanks) do
            RSC.Config.CustomRanksIndexes[v] = k
        end
        hook.Run("RSC.OnConfigUpdated")
    end,
    [RSC.NET_OP_REQUEST_TRANSLATION] = function()
        local strings = {}
        local lang = net.ReadString()
        while net.ReadBool() do
            strings[net.ReadString()] = net.ReadString()
        end

        RSC.PhraseStore[lang] = strings
        RSC.UpdateCurrentLanguage()
    end,
}
net.Receive("RSC.NetworkV2", function()
    local op = net.ReadUInt(4)
    if OPS[op] then OPS[op]() end
end)

-- Request config from a server
hook.Add("InitPostEntity", "RSC.OnNetReady", function()
    RSC.NetworkReady = true
    RSC.LocalPlayer = LocalPlayer()

    net.Start("RSC.NetworkV2")
        net.WriteUInt(RSC.NET_OP_UPDATE_CONFIG, 4)
    net.SendToServer()
end)

--addons/sam-159/lua/sam/libs/sh_pon.lua:
return gluapack()()
--addons/sam-159/lua/sam/command/arguments/dropdown.lua:
return gluapack()()
--addons/sam-159/lua/sam/command/arguments/dropdown.lua:
if SAM_LOADED then return end

local sam, command = sam, sam.command

command.new_argument("dropdown")
    :OnExecute(function(arg, input, ply, _, result)
        if not arg.options or table.Empty(arg.options) then
            ply:sam_send_message("no data", {S = "dropdown", S_2 = input})
            return
        end

        table.insert(result, input)
    end)
    :Menu(function(set_result, body, buttons, arg)
        local default = arg.hint or "select"

        local cbo = buttons:Add("SAM.ComboBox")
        cbo:SetValue(default)
		cbo:SetTall(25)

        function cbo:OnSelect(_, value)
            set_result(value)
            default = value
        end

        function cbo:DoClick()
            if self:IsMenuOpen() then
                return self:CloseMenu()
            end

            self:Clear()
            self:SetValue(default)

            if not arg.options then
                LocalPlayer():sam_send_message("dropdown has no options data")
                return
            end

            for k, v in pairs(arg.options) do
                self:AddChoice(v)
            end

            self:OpenMenu()
        end

        return cbo
    end)
:End()
--addons/sam-159/lua/sam/command/arguments/steamid.lua:
if SAM_LOADED then return end

local sam, command = sam, sam.command

local cached_ranks = {}
local targeting_offline = {}

local check_steamid = function(steamid)
	if not sam.is_steamid(steamid) then
		if sam.is_steamid64(steamid) then
			return util.SteamIDFrom64(steamid)
		else
			return nil
		end
	end

	return steamid
end

local can_target_steamid_callback = function(data, promise)
	local ply, steamid = promise.ply, promise.steamid

	if not data or sam.ranks.can_target(promise.rank, data.rank) then
		promise:resolve({steamid})
	elseif IsValid(ply) then
		ply:sam_send_message("cant_target_player", {
			S = steamid
		})
	end

	targeting_offline[ply] = nil
	cached_ranks[steamid] = data ~= nil and data or false
end

command.new_argument("steamid")
	:OnExecute(function(argument, input, ply, _, result, i)
		local steamid = check_steamid(input)
		if not steamid then
			ply:sam_send_message("invalid", {
				S = "steamid/steamid64", S_2 = input
			})
			return false
		end

		if argument.allow_higher_target then
			result[i] = steamid
			return
		end

		local promise = sam.Promise.new()
		promise.ply = ply
		promise.rank = ply:GetUserGroup()
		promise.steamid = steamid

		local target = player.GetBySteamID(steamid)
		if sam.isconsole(ply) then
			promise:resolve({steamid})
		elseif target then
			if ply:CanTarget(target) then
				promise:resolve({steamid, target})
			else
				ply:sam_send_message("cant_target_player", {
					S = steamid
				})
			end
		elseif cached_ranks[steamid] ~= nil then
			can_target_steamid_callback(cached_ranks[steamid], promise)
		else
			targeting_offline[ply] = true

			sam.SQL.FQuery([[
				SELECT
					`rank`
				FROM
					`sam_players`
				WHERE
					`steamid` = {1}
			]], {steamid}, can_target_steamid_callback, true, promise)
		end

		result[i] = promise
	end)
	:Menu(function(set_result, body, buttons, argument)
		local steamid_entry = buttons:Add("SAM.TextEntry")
		steamid_entry:SetTall(25)
		steamid_entry:SetUpdateOnType(true)
		steamid_entry:SetPlaceholder("steamid/steamid64")

		steamid_entry:SetCheck(function(steamid)
			steamid = check_steamid(steamid)
			set_result(steamid)
			return steamid or false
		end)

		return steamid_entry
	end)
:End()

timer.Create("SAM.ClearCachedRanks", 60 * 2.5, 0, function()
	table.Empty(cached_ranks)
end)

hook.Add("SAM.ChangedSteamIDRank", "RemoveIfCached", function(steamid)
	cached_ranks[steamid] = nil
end)

hook.Add("SAM.CanRunCommand", "StopIfTargetingOffline", function(ply)
	if targeting_offline[ply] then
		return false
	end
end)

--addons/sam-159/lua/sam/menu/sh_init.lua:
if SAM_LOADED then return end

require("sui")

sam.command.new("menu")
	:Help("Open admin mod menu")
	:MenuHide()
	:DisableNotify()
	:OnExecute(function(ply)
		sam.netstream.Start(ply, "OpenMenu")
	end)
:End()

if CLIENT then
	sam.netstream.Hook("OpenMenu", function()
		sam.menu.open_menu()
	end)
end

if SERVER then
	for _, f in ipairs(file.Find("sam/menu/tabs/*.lua", "LUA")) do
		sam.load_file("sam/menu/tabs/" .. f)
	end
end
--addons/sui/lua/sui/cl_base.lua:
local hook = hook
local bit = bit
local math = math

local Color = Color
local ipairs = ipairs
local RealFrameTime = RealFrameTime

local color_white = color_white
local color_black = color_black

local sui = sui

local isfunction = sui.isfunction
local isstring = sui.isstring

local floor = math.floor

function sui.scale(v)
	return ScrH() * (v / 900)
end

function sui.hex_rgb(hex)
	hex = tonumber(hex:gsub("^([%w])([%w])([%w])$", "%1%1%2%2%3%3", 1), 16)

	return Color(
		bit.band(bit.rshift(hex, 16), 0xFF),
		bit.band(bit.rshift(hex, 8), 0xFF),
		bit.band(hex, 0xFF)
	)
end

function sui.rgb_hex(c)
	return bit.tohex((c.r * 0x10000) + (c.g * 0x100) + c.b, 6)
end
local rgb_hex = sui.rgb_hex

function sui.lerp_color(from, to)
	local frac = RealFrameTime() * 10
	from.r = Lerp(frac, from.r, to.r)
	from.g = Lerp(frac, from.g, to.g)
	from.b = Lerp(frac, from.b, to.b)
	from.a = Lerp(frac, from.a, to.a)
end

do
	local colors = {
		["41b9ff"] = Color(44, 62, 80),
		["00c853"] = Color(44, 62, 80),
		["181818"] = Color(242, 241, 239),
		["212121"] = Color(242, 241, 239),
	}

	function sui.contrast_color(color)
		local c = colors[rgb_hex(color)]
		if c then return c end

		local luminance = (0.299 * color.r + 0.587 * color.g + 0.114 * color.b) / 255
		return luminance > 0.5 and color_black or color_white
	end
end

do
	local SetDrawColor = surface.SetDrawColor
	local SetMaterial = surface.SetMaterial
	local DrawTexturedRectRotated = surface.DrawTexturedRectRotated
	function sui.draw_material(mat, x, y, size, col, rot)
		SetDrawColor(col)

		if x == -1 then
			x = size / 2
		end

		if y == -1 then
			y = size / 2
		end

		if mat then
			SetMaterial(mat)
		end

		DrawTexturedRectRotated(x, y, size, size, rot or 0)
	end
end

do
	local hsv_t = {
		[0] = function(v, p, q, t)
			return v, t, p
		end,
		[1] = function(v, p, q, t)
			return q, v, p
		end,
		[2] = function(v, p, q, t)
			return p, v, t
		end,
		[3] = function(v, p, q, t)
			return p, q, v
		end,
		[4] = function(v, p, q, t)
			return t, p, v
		end,
		[5] = function(v, p, q, t)
			return v, p, q
		end
	}

	function sui.hsv_to_rgb(h, s, v)
		local i = floor(h * 6)
		local f = h * 6 - i

		return hsv_t[i % 6](
			v * 255, -- v
			(v * (1 - s)) * 255, -- p
			(v * (1 - f * s)) * 255, -- q
			(v * (1 - (1 - f) * s)) * 255 -- t
		)
	end
end

local Panel = FindMetaTable("Panel")
local SetSize = Panel.SetSize
local GetWide = Panel.GetWide
local GetTall = Panel.GetTall
function sui.scaling_functions(panel)
	local scale_changed
	local SUI = CURRENT_SUI

	local dock_top = function(s, h)
		if not h then return end

		if not scale_changed then
			s.real_h = h
		end

		if not s.no_scale then
			h = SUI.Scale(h)
		end

		if GetTall(s) == h then return end

		SetSize(s, GetWide(s), h)
	end

	local dock_right = function(s, w)
		if not w then return end

		if not scale_changed then
			s.real_w = w
		end

		if not s.no_scale then
			w = SUI.Scale(w)
		end

		if GetWide(s) == w then return end

		SetSize(s, w, GetTall(s))
	end

	local size_changed = function(s, w, h)
		if s.using_scale then return end

		s.using_scale = true

		local dock = s:GetDock()

		if dock ~= FILL then
			if dock == NODOCK then
				dock_top(s, h)
				dock_right(s, w)
			elseif dock == TOP or dock == BOTTOM then
				dock_top(s, h)
			else
				dock_right(s, w)
			end
		end

		s.using_scale = nil
	end

	local wide_changed = function(s, w)
		size_changed(s, w)
	end

	local tall_changed = function(s, h)
		size_changed(s, nil, h)
	end

	function panel:ScaleChanged()
		scale_changed = true
		size_changed(self, self.real_w, self.real_h)
		scale_changed = nil
		if self.OnScaleChange then
			self:OnScaleChange()
		end
	end

	local on_remove = function(s)
		SUI.RemoveScaleHook(s)
	end

	function panel:ScaleInit()
		self.SetSize = size_changed
		self.SetWide = wide_changed
		self.SetTall = tall_changed
		SUI.OnScaleChanged(self, self.ScaleChanged)
		self:On("OnRemove", on_remove)
	end
end

do
	local utf8 = {}

	local str_rel_to_abs = function(str, v, str_n)
		return v > 0 and v or math.max(str_n + v + 1, 1)
	end

	local utf8_decode = function(str, start_pos, str_n)
		start_pos = str_rel_to_abs(str, start_pos or 1, str_n)

		local b1 = str:byte(start_pos, start_pos)
		if not b1 then return nil end
		if b1 < 0x80 then return start_pos, start_pos, b1 end
		if b1 > 0xF4 or b1 < 0xC2 then return nil end

		local cont_byte_count = b1 >= 0xF0 and 3 or b1 >= 0xE0 and 2 or b1 >= 0xC0 and 1
		local end_pos = start_pos + cont_byte_count
		local code_point = 0

		if str_n < end_pos then return nil end

		local bytes = {str:byte(start_pos + 1, end_pos)}
		for i = 1, #bytes do
			local b_x = bytes[i]
			if bit.band(b_x, 0xC0) ~= 0x80 then return nil end
			code_point = bit.bor(bit.lshift(code_point, 6), bit.band(b_x, 0x3F))
			b1 = bit.lshift(b1, 1)
		end

		code_point = bit.bor(code_point, bit.lshift(bit.band(b1, 0x7F), cont_byte_count * 5))

		return start_pos, end_pos, code_point
	end

	local replacement = string.char(239, 191, 189)

	function utf8.force(str)
		local end_pos = #str
		if end_pos == 0 then return str, end_pos end

		local ret = ""
		local cur_pos = 1

		repeat
			local seq_start_pos, seq_end_pos = utf8_decode(str, cur_pos, end_pos)

			if not seq_start_pos then
				ret = ret .. replacement
				cur_pos = cur_pos + 1
			else
				ret = ret .. str:sub(seq_start_pos, seq_end_pos)
				cur_pos = seq_end_pos + 1
			end
		until cur_pos > end_pos

		return ret, #ret
	end

	-- https://gist.github.com/gdeglin/4128882

	local utf8_char_bytes = function(c)
		if c > 0 and c <= 127 then
			return 1
		elseif c >= 194 and c <= 223 then
			return 2
		elseif c >= 224 and c <= 239 then
			return 3
		elseif c >= 240 and c <= 244 then
			return 4
		end
	end
	utf8.char_bytes = utf8_char_bytes

	function utf8.len(str)
		local length = #str

		local len = 0

		local pos = 1
		while pos <= length do
			len = len + 1
			pos = pos + utf8_char_bytes(str:byte(pos))
		end

		return len
	end

	function utf8.sub(str, i, j)
		j = j or -1

		if i == nil then return "" end

		local l = (i >= 0 and j >= 0) or utf8.len(str)
		local start_char = (i >= 0) and i or l + i + 1
		local end_char = (j >= 0) and j or l + j + 1

		if start_char > end_char then return "" end

		local pos = 1
		local length = #str
		local len = 0

		local start_byte, end_byte = 1, length

		while pos <= length do
			len = len + 1

			if len == start_char then
				start_byte = pos
			end

			pos = pos + utf8_char_bytes(str:byte(pos))

			if len == end_char then
				end_byte = pos - 1
				break
			end
		end

		return str:sub(start_byte, end_byte)
	end

	sui.utf8 = utf8
end

--
-- thanks falco!
-- https://github.com/FPtje/DarkRP/blob/4fd2c3c315427e79bb7624702cfaefe9ad26ac7e/gamemode/modules/base/cl_util.lua#L42
--
do
	local utf8 = utf8
	local surface = surface

	local max_width, original_width, can_fix

	local fix_width = function()
		if can_fix then
			can_fix = false
			max_width = original_width
		end
	end

	local char_wrap = function(text, remaining_width)
		local total_width  = 0

		local new_text = ""
		for char in text:gmatch(utf8.charpattern) do
			total_width  = total_width  + surface.GetTextSize(char)
			if total_width >= remaining_width then
				total_width = surface.GetTextSize(char)
				fix_width()
				remaining_width = max_width

				new_text = new_text .. ("\n" .. char)
			else
				new_text = new_text .. char
			end
		end

		return new_text, total_width
	end

	function sui.wrap_text(text, font, width, first_width)
		text = sui.utf8.force(text)

		local total_width = 0
		can_fix = first_width and true or false
		max_width, original_width = first_width or width, width

		surface.SetFont(font)

		local space_width = surface.GetTextSize(" ")

		text = text:gsub("(%s?[%S]*)", function(word)
			local char = word:sub(1, 1)
			if char == "\n" then
				total_width = 0
				fix_width()
			end

			local wordlen = surface.GetTextSize(word)
			total_width = total_width + wordlen

			if wordlen >= max_width then
				local split_word
				split_word, total_width = char_wrap(word, max_width - (total_width - wordlen))
				return split_word
			elseif total_width < max_width then
				return word
			end

			fix_width()

			total_width = wordlen

			if char == " " then
				total_width = total_width - space_width
				return "\n" .. word:sub(2)
			end

			return "\n" .. word
		end)

		return text
	end
end

function sui.register(classname, panel_table, parent_class)
	sui.TDLib.Install(panel_table)

	if not panel_table.Add then
		function panel_table:Add(pnl)
			return vgui.Create(pnl, self)
		end
	end

	if not panel_table.NoOverrideClear and not panel_table.Clear then
		function panel_table:Clear()
			local children = self:GetChildren()
			for i = 1, #children do
				children[i]:Remove()
			end
		end
	end

	local SUI = CURRENT_SUI

	for k, v in pairs(SUI.panels_funcs) do
		panel_table[k] = v
	end

	panel_table.SUI_GetColor = function(name)
		return SUI.GetColor(name)
	end

	SUI.panels[classname] = panel_table

	return vgui.Register(SUI.name .. "." .. classname, panel_table, parent_class)
end

local Material; do
	local C_Material, material_str = select(2, debug.getupvalue(_G.Material, 1)), "0001010" -- [["mips smooth"]]
	Material = function(name)
		return C_Material(name, material_str)
	end
end
sui.Material = Material

local function prepare_theme(theme)
	for k, v in pairs(theme) do
		if IsColor(v) then continue end

		if istable(v) then
			prepare_theme(v)
		elseif isstring(v) and v:sub(1, 1) == "#" then
			theme[k] = sui.hex_rgb(v:sub(2))
		end
	end
end

function sui.new(addon_name, default_scaling, panels_funcs)
	local SUI = {
		name = addon_name,
		panels = {},
		panels_funcs = panels_funcs or {}
	}

	CURRENT_SUI = SUI

	do
		local themes = table.Copy(sui.themes)
		local current_theme_table

		function SUI.GetColor(color_name)
			return current_theme_table[color_name]
		end

		function SUI.SetTheme(theme_name)
			SUI.current_theme = theme_name
			current_theme_table = themes[theme_name]
			hook.Call(addon_name .. ".ThemeChanged")
		end

		function SUI.GetThemes()
			return themes
		end

		function SUI.AddToTheme(theme_name, tbl)
			local theme = themes[theme_name]
			for k, v in pairs(tbl) do
				theme[k] = v
			end
			prepare_theme(theme)
		end

		function SUI.RemoveTheme(theme_name)
			themes[theme_name] = nil
			if theme_name == SUI.current_theme then
				SUI.SetTheme(next(themes))
			end
		end

		function SUI.AddTheme(theme_name, tbl)
			prepare_theme(tbl)
			themes[theme_name] = tbl
		end

		SUI.themes = themes
	end

	local Scale
	do
		local scale = 1

		if default_scaling then
			SUI.Scale = sui.scale
		else
			function SUI.Scale(v)
				return floor((v * scale) + 0.5)
			end
		end
		Scale = SUI.Scale

		function SUI.ScaleEven(v)
			v = Scale(v)
			if v % 2 ~= 0 then
				v = v + 1
			end
			return v
		end

		function SUI.SetScale(_scale)
			if _scale == scale then return end

			scale = _scale
			SUI.scale = _scale

			for k, v in pairs(SUI.fonts) do
				SUI.CreateFont(k:sub(#addon_name + 1), v.font, v.size, v.weight)
			end

			SUI.CallScaleChanged()
		end

		local n = 0
		local keys = {}
		local hooks = {}
		_G[addon_name .. "_HOOKS"] = keys
		_G[addon_name .. "_KEYS"] = hooks
		_G[addon_name .. "_N"] = function()
			return n
		end
		function SUI.OnScaleChanged(name, func)
			if not isfunction(func) then
				error("Invalid function?")
			end

			if not name then
				error("Invalid name?")
			end

			if not isstring(name) then
				local _func = func
				func = function()
					local isvalid = name.IsValid
					if isvalid and isvalid(name) then
						_func(name)
					else
						SUI.RemoveScaleHook(name, true)
					end
				end
			end

			local pos = keys[name]
			if pos then
				hooks[pos + 1] = func
			else
				hooks[n + 1] = name
				hooks[n + 2] = func
				keys[name] = n + 1
				n = n + 2
			end
		end

		function SUI.RemoveScaleHook(name, in_hook)
			local pos = keys[name]
			if not pos then return end

			if in_hook then
				hooks[pos] = nil
				hooks[pos + 1] = nil
			else
				local new_name = hooks[n - 1]
				if new_name then
					hooks[pos], hooks[pos + 1] = new_name, hooks[n]
					hooks[n - 1], hooks[n] = nil, nil
					keys[new_name] = pos
				end
				n = n - 2
			end
			keys[name] = nil
		end

		function SUI.CallScaleChanged()
			if n == 0 then return end

			local i, c_n = 2, n
			::loop::
			local func = hooks[i]
			if func then
				func()
				i = i + 2
			else
				local _n, _i = c_n, i
				if n ~= c_n then
					_n = n
					i = i + 2
				else
					c_n = c_n - 2
				end

				local new_name = hooks[_n - 1]
				if new_name then
					hooks[_i - 1], hooks[_i] = new_name, hooks[_n]
					hooks[_n - 1], hooks[_n] = nil, nil
					keys[new_name] = _i - 1
				end

				n = n - 2
			end

			if i <= c_n then
				goto loop
			end
		end

		function SUI.GetScale()
			return scale
		end

		SUI.scale = 1
	end

	do
		local fonts = {}

		function SUI.CreateFont(font_name, font, size, weight)
			font_name = addon_name .. font_name

			fonts[font_name] = fonts[font_name] or {
				font = font,
				size = size,
				weight = weight
			}

			surface.CreateFont(font_name, {
				font = font,
				size = Scale(size),
				weight = weight,
				extended = true
			})

			return font_name
		end

		function SUI.GetFont(font_name)
			return addon_name .. font_name
		end

		function SUI.GetFontHeight(font_name)
			local font = fonts[addon_name .. font_name] or fonts[font_name]
			if not font then return 0 end

			return floor(Scale(font.size or 0))
		end

		SUI.fonts = fonts
	end

	do
		local materials = {}

		local delay = 0.008
		local next_run = UnPredictedCurTime()

		function SUI.Material(mat, allow_delay)
			local _mat = materials[mat]
			if _mat then return _mat end

			if allow_delay then
				if UnPredictedCurTime() < next_run then return end
				next_run = UnPredictedCurTime() + delay
			end

			materials[mat] = Material(mat)

			return materials[mat]
		end

		SUI.materials = materials
	end

	SUI.SetTheme("Dark")

	for _, f in ipairs(file.Find("sui/vgui/sui_*.lua", "LUA")) do
		include("sui/vgui/" .. f)
	end

	for _, f in ipairs(file.Find(string.format("sui/vgui/%s_*.lua", addon_name:lower()), "LUA")) do
		include("sui/vgui/" .. f)
	end

	return SUI
end

sui.themes = sui.themes or {}
function sui.add_theme(name, tbl)
	prepare_theme(tbl)
	sui.themes[name] = tbl
end

function sui.valid_options()
	local objs = {}
	objs.IsValid = function()
		local valid = true
		for i = 1, #objs do
			local obj = objs[i]
			if obj:IsValid() and obj.valid == false then
				valid = false
				break
			end
		end
		return valid
	end
	objs.Add = function(obj)
		table.insert(objs, obj)
	end
	return objs
end

do
	local label = vgui.Create("Label")
	label:SetVisible(false)
	label:SetMouseInputEnabled(false)
	label:SetKeyboardInputEnabled(false)

	local SetFontInternal = label.SetFontInternal
	local SetText = label.SetText
	local GetTextSize = label.GetTextSize
	function sui.get_text_size(text, font)
		SetFontInternal(label, font)
		SetText(label, text)
		return GetTextSize(label)
	end
end

do
	local SURFACE = Color(31, 31, 31)
	local PRIMARY = Color(65, 185, 255)

	local ON_SURFACE = Color(255, 255, 255)
	local ON_SURFACE_HIGH_EMPHASIS = ColorAlpha(ON_SURFACE, 221)
	local ON_SURFACE_MEDIUM_EMPHASIS = ColorAlpha(ON_SURFACE, 122)
	local ON_SURFACE_DISABLED = ColorAlpha(ON_SURFACE, 97)

	local ON_PRIMARY = Color(60, 60, 60)

	sui.add_theme("Dark", {
		frame = Color(18, 18, 18),
		frame_blur = false,

		title = ON_SURFACE,
		header = SURFACE,

		close = ON_SURFACE_MEDIUM_EMPHASIS,
		close_hover = Color(255, 60, 60),
		close_press = Color(255, 255, 255, 30),

		button = PRIMARY,
		button_text = "#050709",
		button_hover = ColorAlpha(ON_PRIMARY, 100),
		button_click = ColorAlpha(ON_PRIMARY, 240),
		button_disabled = Color(100, 100, 100),
		button_disabled_text = "#bdbdbd",

		button2_hover = ColorAlpha(PRIMARY, 5),
		button2_selected = ColorAlpha(PRIMARY, 15),

		scroll = ColorAlpha(PRIMARY, 97),
		scroll_grip = PRIMARY,

		scroll_panel = Color(29, 29, 29),
		scroll_panel_outline = false,

		text_entry_bg = Color(34, 34, 34),
		text_entry_bar_color = Color(0, 0, 0, 0),
		text_entry = ON_SURFACE_HIGH_EMPHASIS,
		text_entry_2 = ON_SURFACE_MEDIUM_EMPHASIS,
		text_entry_3 = PRIMARY,

		property_sheet_bg = Color(39, 39, 39),
		property_sheet_tab = Color(150, 150, 150),
		property_sheet_tab_click = Color(255, 255, 255, 30),
		property_sheet_tab_active = PRIMARY,

		toggle_button = ON_SURFACE_DISABLED,
		toggle_button_switch = ON_SURFACE_HIGH_EMPHASIS,

		toggle_button_active = ColorAlpha(PRIMARY, 65),
		toggle_button_switch_active = PRIMARY,

		slider_knob = PRIMARY,
		slider_track = ColorAlpha(PRIMARY, 65),
		slider_hover = ColorAlpha(PRIMARY, 5),
		slider_pressed = ColorAlpha(PRIMARY, 30),

		on_sheet = Color(43, 43, 43, 200),
		on_sheet_hover = Color(200, 200, 200, 20),

		--=--
		query_box_bg = "#181818",
		query_box_cancel = Color(244, 67, 54, 30),
		query_box_cancel_text = "#f44336",
		--=--

		--=--
		menu = "#212121",

		menu_option = "#212121",
		menu_option_text = "#bdbdbd",
		menu_option_hover = "#3b3b3b",
		menu_option_hover_text = "#fefefe",

		menu_spacer = "#303030",
		--=--

		line = "#303030",

		--=--
		column_sheet = "#263238",
		column_sheet_bar = "#202020",

		column_sheet_tab = "#202020",
		column_sheet_tab_hover = "#2e2e2e",
		column_sheet_tab_active = "#383838",

		column_sheet_tab_icon = "#909090",
		column_sheet_tab_icon_hover = "#f0f0f0",
		column_sheet_tab_icon_active = "#34a1e0",
		--=--

		--=--
		collapse_category_header = "#272727",
		collapse_category_header_hover = "#2a2a2a",
		collapse_category_header_active = "#2e2e2e",

		collapse_category_header_text = "#aaaaaa",
		collapse_category_header_text_hover = "#dcdcdc",
		collapse_category_header_text_active = "#34A1E0",

		collapse_category_item = "#343434",
		collapse_category_item_hover = "#464646",
		collapse_category_item_active = "#535353",

		collapse_category_item_text = "#aaaaaa",
		collapse_category_item_text_hover = "#dcdcdc",
		collapse_category_item_text_active = "#ffffff",
		--=--
	})
end

do
	local PRIMARY = Color(65, 185, 255)

	local ON_PRIMARY = Color(220, 220, 220)

	sui.add_theme("Blur", {
		frame = Color(30, 30, 30, 220),
		frame_blur = true,

		title = Color(255, 255, 255),
		header = Color(60, 60, 60, 200),

		close = Color(200, 200, 200),
		close_hover = Color(255, 60, 60),
		close_press = Color(255, 255, 255, 30),

		button = ColorAlpha(PRIMARY, 130),
		button_text = ON_PRIMARY,
		button_hover = Color(0, 0, 0, 30),
		button_click = PRIMARY,
		button_disabled = Color(100, 100, 100),
		button_disabled_text = "#bdbdbd",

		button2_hover = ColorAlpha(PRIMARY, 5),
		button2_selected = ColorAlpha(PRIMARY, 15),

		scroll = Color(0, 0, 0, 100),
		scroll_grip = PRIMARY,

		scroll_panel = Color(255, 255, 255, 10),
		scroll_panel_outline = false,

		text_entry_bg = Color(0, 0, 0, 0),
		text_entry_bar_color = Color(200, 200, 200, 153),
		text_entry = Color(240, 240, 240, 221),
		text_entry_2 = Color(200, 200, 200, 153),
		text_entry_3 = PRIMARY,

		property_sheet_bg = Color(60, 60, 60, 200),
		property_sheet_tab = Color(150, 150, 150),
		property_sheet_tab_click = Color(255, 255, 255, 40),
		property_sheet_tab_active = PRIMARY,

		toggle_button = Color(244, 67, 54),
		toggle_button_switch = Color(230, 230, 230),

		toggle_button_active = PRIMARY,
		toggle_button_switch_active = Color(230, 230, 230),

		slider_knob = PRIMARY,
		slider_track = ColorAlpha(PRIMARY, 100),
		slider_hover = ColorAlpha(PRIMARY, 40),
		slider_pressed = ColorAlpha(PRIMARY, 70),

		on_sheet = Color(60, 60, 60, 180),
		on_sheet_hover = Color(30, 30, 30, 70),

		--=--
		query_box_bg = Color(0, 0, 0, 100),
		query_box_cancel = Color(244, 67, 54, 30),
		query_box_cancel_text = "#f44336",
		--=--
	})
end

--addons/sui/lua/sui/vgui/sui_number_slider.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_property_sheet.lua:
return gluapack()()
--addons/sam-159/lua/sam/menu/tabs/config/server.lua:
if SAM_LOADED then return end

local sam = sam
local config = sam.config

config.add_tab("Server", function(parent)
	local server_body = parent:Add("SAM.ScrollPanel")
	server_body:Dock(FILL)
	server_body:LineMargin(0, 6, 0, 0)

	local i = 0
	server_body:GetCanvas():On("OnChildAdded", function(s, child)
		i = i + 1
		child:SetZPos(i)
	end)

	for k, v in ipairs(sam.config.get_menu_settings()) do
		local panel = v.func(server_body)
		if ispanel(panel) then
			local setting = server_body:Add("SAM.LabelPanel")
			setting:DockMargin(8, 6, 8, 0)
			setting:SetLabel(v.title)
			setting:SetPanel(panel)
		end

		server_body:Line()
	end

	return server_body
end, function()
	return LocalPlayer():HasPermission("manage_config")
end, 1)
--addons/spzones/lua/sam/modules/spzones.lua:
if SAM_LOADED then return end

local sam, command = sam, sam.command

command.set_category("SPZones")

command.new("clearnlr")
    :SetPermission("clearnlr", "superadmin")
    :AddArg("player")
    :Help("Clear NLR")

    :OnExecute(function(ply, targets, time)
        for i = 1, #targets do
            local v = targets[i]
            SPZones.ClearZones(v)
        end

        if sam.is_command_silent then return end

        sam.player.send_message(nil, "{A} cleared NLR from {T}", {
            A = ply, T = targets
        })
    end)
:End()

command.new("checknlr")
    :SetPermission("checknlr", "user")
    :AddArg("player")
    :Help("Check a players NLR")

    :OnExecute(function(ply, targets)
        for i = 1, #targets do
            if targets[i] and targets[i].DeathSave and #targets[i].DeathSave > 0 then
                SPCheckNlr(targets[i].DeathSave, ply)
            end
        end
    end)
:End()

command.new("clearcheck")
    :SetPermission("clearcheck", "user")

    :Help("Clears NLR check")

    :OnExecute(function(ply)
        SPClearCheckNlr(ply)
    end)
:End()
--addons/serious_business/lua/autorun/sb_config.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_frame.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_query_box.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_toggle_button.lua:
return gluapack()()
--addons/scb-29/lua/scb/settings/tabs/emojis.lua:
return gluapack()()
--addons/scb-29/lua/scb/cl_emojis_data.lua:
return gluapack()()
--addons/scb-29/lua/scb/settings/tabs/tags.lua:
return gluapack()()
--addons/scb-29/lua/scb/vgui/scb_chat_line.lua:
return gluapack()()
--addons/scb-29/lua/scb/vgui/scb_emojis.lua:
if SCB_LOADED then return end

local draw = draw
local IsValid = IsValid
local math = math
local pairs = pairs
local table = table
local SortedPairsByMemberValue = SortedPairsByMemberValue
local timer = timer

local scb = scb
local sui = sui
local SUI = scb.SUI
local language = scb.language

local Panel = {}

local flag = "flag_" .. (system.GetCountry() or ""):lower()
local categories = {
	People = {1, "grinning"},
	Nature = {2, "cat"},
	Food = {3, "watermelon"},
	Activities = {4, "person_in_lotus_position"},
	Travel = {5, "desert_island"},
	Objects = {6, "coffee"},
	Symbols = {7, "question"},
	Flags = {8, scb.emojis[flag] and flag or "flag_eg"},
	Custom = {9, "unlock"}
}

local generate_emojis = function()
	for k, v in pairs(categories) do
		local key = tostring(v[1])
		local emojis = {}

		local i, max_pos = 1, -math.huge
		for name, cat in pairs(scb.emojis) do
			local pos = i
			if not scb.is_custom_emoji(cat) then
				cat, pos = cat:sub(1, 1), tonumber(cat:sub(2))
			end

			if cat ~= key and (k ~= "Custom" or not scb.is_custom_emoji(cat)) then continue end

			emojis[pos] = name
			max_pos = math.max(max_pos, pos)

			i = i + 1
		end

		v[3] = emojis
		v[4] = max_pos
	end
end
generate_emojis()
hook.Add("SCB.EmojisModified", "FixEmojis", generate_emojis)

local DoClick = function(s)
	local text_entry = scb.chatbox.text_entry
	text_entry:RequestFocus()
	text_entry:AddValue(":" .. s.name .. ": ")

	s.parent:Remove()
end

local hovered_color = Color(50, 50, 50, 150)
local emoji_Paint = function(s, w, h)
	if s.parent.selected == s then
		s.search_field:SetPlaceholder(":" .. s.name .. ":")
		draw.RoundedBox(0, 0, 0, w, h, hovered_color)
	end
end

local emoji_OnCursorEntered = function(s, w, h)
	s.parent.selected = s
end

local category_list_Paint = function(_, w, h)
	draw.RoundedBox(3, 0, 0, w, h, SUI.GetColor("scroll_panel"))
end

local make_category_list = function(parent, columns)
	local category_list = parent:Add("SCB.ThreeGrid")
	category_list:Dock(FILL)
	category_list:DockMargin(2, 0, 2, 2)
	category_list:GetCanvas():DockPadding(2, 2, 2, 2)
	category_list:InvalidateParent(true)
	category_list:SetWide2(category_list:GetWide() - (SUI.Scale(4) * 2))
	category_list:InvalidateParent(true)

	category_list:SetColumns(columns)
	category_list:SetHorizontalMargin(4)

	category_list.Paint = category_list_Paint

	return category_list
end

local add_emoji = function(self, emoji, category_list, search_field)
	if not IsValid(category_list) then return end

	local emoji_size = SUI.ScaleEven(28)

	local pnl = vgui.Create("DButton")
	pnl:SetTall(emoji_size)
	category_list:AddCell(pnl)

	pnl:SetSize(emoji_size, emoji_size)
	pnl:SetText("")
	pnl:SetTooltip(emoji)

	pnl.parent = self
	pnl.name = emoji
	pnl.search_field = search_field
	pnl.Paint = emoji_Paint
	pnl.OnCursorEntered = emoji_OnCursorEntered
	pnl.DoClick = DoClick

	local img = pnl:Add("SCB.Image")
	img:Dock(FILL)
	img:DockMargin(3, 3, 3, 3)
	img:SetMouseInputEnabled(false)

	local info = scb.emojis[emoji]
	img:SetImage(scb.is_custom_emoji(info) and info or ("scb/emojis/" .. emoji .. ".png"))
end

function Panel:Init()
	local has_permission = scb.has_permission(LocalPlayer(), "custom_emojis")
	local categories_n = table.Count(categories) - (has_permission and 0 or 1)

	self.tabs_tall = 30
	self.tab_scroller:SetTall(SUI.Scale(self.tabs_tall))

	self:SetFont(SCB_14)

	self.w = self.tab_scroller:GetTall() * categories_n
	self.h = self.w + 10

	self:InvalidateLayout(true)

	self.tab_scroller:Dock(BOTTOM)

	local emoji_size = SUI.ScaleEven(28)
	local columns = math.floor(self.w / emoji_size) - 1

	local search_field = self:Add("SCB.TextEntry")
	search_field:Dock(TOP)
	search_field:DockMargin(2, 2, 2, 2)
	search_field:SetPlaceholder(language.search)
	search_field:SetMouseInputEnabled(true)
	search_field:SetNoBar(true)

	local old_Paint = search_field.Paint
	function search_field:Paint(w, h)
		local outline = SUI.GetColor("scroll_panel_outline")
		if outline then
			sui.TDLib.DrawOutlinedBox(3, 0, 0, w, h, SUI.GetColor("scroll_panel"), outline, 1)
		else
			draw.RoundedBox(3, 0, 0, w, h, SUI.GetColor("scroll_panel"))
		end

		old_Paint(self, w, h)
	end

	function search_field.OnValueChange(s, value)
		if value == "" then
			if IsValid(s.search_body) then
				s.search_body:Remove()
			end
			self:SetActiveTab(self.tabs[1])
			search_field:SetPlaceholder(language.search)
			return
		end

		value = value:gsub(":", ""):lower()

		local search_body = s.search_body
		if not IsValid(search_body) then
			self:SetActiveTab(nil)

			search_body = self:Add("Panel")
			s.search_body = search_body
		end

		search_body:Dock(FILL)
		search_body:InvalidateParent(true)
		search_body:Clear()

		local category_list = make_category_list(search_body, columns)

		local main_i = 0
		for k, v in SortedPairsByMemberValue(categories, 1) do
			local emojis, n = v[3], v[4]
			for i = 1, n do
				local emoji = emojis[i]
				if not emoji then continue end
				if not emoji:find(value) then continue end

				timer.Simple(main_i * 0.004, function()
					add_emoji(self, emoji, category_list, search_field)
				end)

				main_i = main_i + 1
			end
		end
	end

	function self.tab_scroller:Paint(w, h)
		draw.RoundedBox(0, 0, 0, w, h, SUI.GetColor("header"))
	end

	for k, v in SortedPairsByMemberValue(categories, 1) do
		if k == "Custom" and not has_permission then continue end

		self:AddSheet(SUI.Material("scb/emojis/" .. v[2] .. ".png"), function(parent)
			local category_list = make_category_list(parent, columns)

			local emojis, n = v[3], v[4]
			for i = 1, n do
				local emoji = emojis[i]
				if not emoji then continue end

				timer.Simple(i * 0.004, function()
					add_emoji(self, emoji, category_list, search_field)
				end)
			end

			return category_list
		end):SetTooltip(k)
	end

	self:MakePopup()
	self:ParentToHUD()

	search_field:RequestFocus()

	hook.Add("VGUIMousePressed", self, function(_, panel, mouse_code)
		if self == panel then return end
		if self:IsOurChild(panel) then return end
		if mouse_code ~= MOUSE_LEFT then return end
		if panel == self.button then return end
		if panel == scb.chatbox.header then return end

		self:Remove()
	end)
end

function Panel:Paint(w, h)
	if SUI.GetColor("frame_blur") then
		sui.TDLib.BlurPanel(self)
	end

	draw.RoundedBox(0, 0, 0, w, h, SUI.GetColor("frame"))
end

function Panel:OnKeyCodePressed(key_code)
	if key_code == KEY_ENTER and IsValid(self.selected) then
		self.selected:DoClick()
	end
end

local anim_speed = 0.2
function Panel:FixPos()
	local w, h = self.w, self.h

	self:SetSize(s, w * 1.1, h * 1.1)
	self:SetPos(self:_GetPos())
	self:SetAlpha(0)

	self:SizeTo(w, h, anim_speed, 0, -1)
	local x, y = self:_GetPos(w, h)
	self:MoveTo(x, y, anim_speed, 0, -1)
	self:AlphaTo(255, anim_speed + 0.02, 0, function()
		self.Think = self._Think
	end)
end

function Panel:_GetPos(m_w, m_h)
	local button = self.button

	if not m_w then
		m_w, m_h = self:GetSize()
	end

	local x, y, w = button:GetBounds()
	x, y = button:LocalToScreen(0, 0)
	x = x - (m_w / 2 - w / 2)
	y = y - m_h - 4

	return x, y
end

function Panel:_Think()
	self:SetPos(self:_GetPos())
	self:MoveToFront()
end

sui.register("EmojiList", Panel, "SCB.PropertySheet")
--lua/autorun/sg_player.lua:
player_manager.AddValidModel( "Saul Goodman", "models/saulgoodman/Playermodels/saulgoodman.mdl" )

list.Set( "PlayerOptionsModel", "Saul Goodman", "models/saulgoodman/Playermodels/saulgoodman.mdl" )

player_manager.AddValidModel( "Saul Goodman_2", "models/saulgoodman/Playermodels/saulgoodman2.mdl" )

list.Set( "PlayerOptionsModel", "Saul Goodman_2", "models/saulgoodman/Playermodels/saulgoodman2.mdl" )
--addons/thirdperson/lua/thirdperson/client/ferma/cl_ferma_fpanel.lua:
return gluapack()()
--addons/thirdperson/lua/thirdperson/client/ferma/cl_ferma_fcolormixer.lua:
return gluapack()()
--addons/thirdperson/lua/thirdperson/client/ferma/cl_ferma_fbinder.lua:
return gluapack()()
--addons/thirdperson/lua/thirdperson/client/cl_thirdperson_contextmenu.lua:
return gluapack()()
--lua/slib/vgui/cl_scollapsiblepanel.lua:
local PANEL = {}

local font, font_smaller = slib.createFont("Roboto", 16), slib.createFont("Roboto", 14)
local textcolor, textcolor_min55, shade_5, shade_10 = slib.getTheme("textcolor"), slib.getTheme("textcolor", -55), slib.getTheme("maincolor", 5), slib.getTheme("maincolor", 10)
local margin = slib.getTheme("margin")

function PANEL:Init()
    self.collapsed = true
    self.defaultH = slib.getScaledSize(24, "y")
    self.halfTall = slib.getScaledSize(8, "y")
    self:SetTall(self.defaultH)
    self:SetText("")

    self.button = vgui.Create("SButton", self)
    :SetTall(self.defaultH)
    :Dock(TOP)

    self.button.Paint = function(s,w,h)
        surface.SetDrawColor(shade_5)
        surface.DrawRect(0,h - 2,w,2)
    end

    self.button.DoClick = function()
        self.collapsed = !self.collapsed

        if self.onClicked then if self.onClicked() == true then return end end
        self:SizeTo(-1, self:getChildsHeight(), .3)
    end

    slib.wrapFunction(self, "Dock", nil, function() return self end, true)
    slib.wrapFunction(self, "DockMargin", nil, function() return self end, true)
    slib.wrapFunction(self, "SetZPos", nil, function() return self end, true)
    slib.wrapFunction(self, "SetTall", nil, function() return self end, true)
    slib.wrapFunction(self, "SetWide", nil, function() return self end, true)
    slib.wrapFunction(self, "SetPos", nil, function() return self end, true)
end

function PANEL:getChildCount()
    local count = 0

    for k,v in ipairs(self:GetChildren()) do
        if v:IsVisible() and v != self.button then
            count = count + 1
        end
    end

    return count
end

function PANEL:getChildsHeight()
    local height = self.defaultH

    if self.collapsed then
        for k,v in ipairs(self:GetChildren()) do
            if v == self.button or !v:IsVisible() then continue end
            local l, t, r, b = v:GetDockMargin()
            height = height + v:GetTall() + b + t
        end
    end

    return height + ((self.collapsed and height > self.defaultH) and margin or 0)
end

function PANEL:setTitle(str)
    self.title = str

    return self
end

function PANEL:ForceSize(add_tall)
    self:SizeTo(-1, self:getChildsHeight() + (add_tall or 0), .3)
end

function PANEL:forceCollapse()
    self:InvalidateChildren()
    self:SetTall(select(2, self:ChildrenSize()) + margin)

    return self
end

function PANEL:Paint(w, h)
    surface.SetDrawColor(self.bg or shade_10)
    surface.DrawRect(0,0,w,h)

    surface.SetDrawColor(shade_10)
    surface.DrawRect(0,0,w,self.defaultH)
    surface.DrawRect(w-1,0,1,h)
    surface.DrawRect(0,0,1,h)

    draw.SimpleText(self.title, font, w * .5, self.defaultH * .5, textcolor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    draw.SimpleText(self.collapsed and "-" or "+", font, w - margin - self.halfTall, self.defaultH * .5, textcolor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

    if self.collapsed and self:getChildCount() <= 0 then 
        local offset = self:GetTall() - self.defaultH
        draw.SimpleText(self.emptyMsg or "", font_smaller, w * .5, self.defaultH + offset * .5, textcolor_min55, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
    end
end

vgui.Register("SCollapsiblePanel", PANEL, "EditablePanel")
--addons/eprotect_1.5.24/lua/e_protect/languages/sh_english.lua:
return gluapack()()
--addons/eprotect_1.5.24/lua/e_protect/languages/sh_turkish.lua:
return gluapack()()
--addons/gprotect_1.13.99/lua/g_protect/sh_gprotect_baseconfig.lua:
------------------------------------------------------                                   
-- NO NOT TOUCH ANYTHING IN HERE!!!!!!!!!                                                  
------------------------------------------------------                  
                  
gProtect = gProtect or {}                        
gProtect.config = gProtect.config or {}
gProtect.config.modules = gProtect.config.modules or {}

gProtect.config.modules.general = {
	["blacklist"] = {                   
		["prop_physics"] = true,
		["prop_physics_multiplayer"] = true
	},
	["remDiscPlyEnt"] = 120,
	["remDiscPlyEntSpecific"] = {},
	["remOutOfBounds"] = 120,
	["remOutOfBoundsWhitelist"] = {},
	["protectedFrozenEnts"] = {
		["prop_physics"] = true,
		["prop_physics_multiplayer"] = true
	},
	["protectedFrozenGroup"] = COLLISION_GROUP_INTERACTIVE_DEBRIS
}

gProtect.config.modules.ghosting = {
	["enabled"] = true,
	["ghostColor"] = Color(66, 135, 40, 120),
	["antiObscuring"] = {["player"] = true},
	["obscureOffset"] = 10,
	["entities"] = {},
	["onPhysgun"] = true,
	["forceUnfrozen"] = false,
	["forceUnfrozenEntities"] = {["prop_physics"] = true},
	["useBlacklist"] = true,
	["enableMotion"] = false,
}

gProtect.config.modules.damage = {
	["enabled"] = true,
	["useBlacklist"] = true,
	["vehiclePlayerDamage"] = false,
	["blacklistedEntPlayerDamage"] = true,
	["worldPlayerDamage"] = true,
	["entities"] = {},
	["immortalEntities"] = {},
	["bypassGroups"] = {},
	["canDamageWorldEntities"] = {["*"] = true}
}

gProtect.config.modules.anticollide = {
	["enabled"] = true,
	["notifyStaff"] = true,
	["protectDarkRPEntities"] = 1,
	["DRPentitiesThreshold"] = 125,
	["DRPentitiesException"] = 1,
	["protectSpawnedEntities"] = 1,
	["entitiesThreshold"] = 75,
	["entitiesException"] = 1,
	["protectSpawnedProps"] = 3,
	["propsThreshold"] = 45,
	["propsException"] = 1,
	["playerPropAction"] = 4,
	["playerPropThreshold"] = 500,
	["specificEntities"] = {},
	["squaredPhysicsMaxSize"] = 0,
	["squaredPhysicsEnts"] = {}
}

gProtect.config.modules.spamprotection = {
	["enabled"] = true,
	["threshold"] = 3,
	["delay"] = 1,
	["action"] = 1,
	["notifyStaff"] = true,
	["protectProps"] = true,
	["protectEntities"] = true
}

gProtect.config.modules.spawnrestriction = {
	["enabled"] = true,

	["propSpawnPermission"] = {["*"] = true},
	["SENTSpawnPermission"] = {["owner"] = true, ["superadmin"] = true},
	["SWEPSpawnPermission"] = {["owner"] = true, ["superadmin"] = true},
	["vehicleSpawnPermission"] = {["owner"] = true, ["superadmin"] = true},
	["NPCSpawnPermission"] = {["owner"] = true, ["superadmin"] = true},
	["ragdollSpawnPermission"] = {["owner"] = true, ["superadmin"] = true},
	["effectSpawnPermission"] = {["owner"] = true, ["superadmin"] = true},
	["blockedEntities"] = {},
	["blockedModels"] = {},
	["blockedModelsisBlacklist"] = true,
	["blockedModelsVehicleBypass"] = true,
	["blockedEntitiesIsBlacklist"] = true,
	["bypassGroups"] = {["owner"] = true, ["superadmin"] = true},
	["maxPropModelComplexity"] = 10,
	["maxModelSize"] = 3000
}

gProtect.config.modules.toolgunsettings = {
	["enabled"] = true,            
	["targetWorld"] = {},
	["targetPlayerOwned"] =  {},     
	["targetPlayerOwnedProps"] = {},
	["targetVehiclePermission"] = {["superadmin"] = true},
	["restrictTools"] = {["rope"] = true},
	["groupToolRestrictions"] = {             
		["superadmin"] = {
			isBlacklist = true,
			list = {}
		}
	},
	["bypassGroups"] = {["owner"] = true, ["superadmin"] = true},
	["entityTargetability"] = {
		isBlacklist = true,
		list = {["sammyservers_textscreen"] = true, ["player"] = true},
	},
	["bypassTargetabilityTools"] = {["remover"] = true},
	["bypassTargetabilityGroups"] = {["owner"] = true, ["superadmin"] = true},
	["antiSpam"] = {}
}

gProtect.config.modules.physgunsettings = {                    
	["enabled"] = true,
	["targetWorld"] = {},
	["targetPlayerOwned"] = {},
	["targetPlayerOwnedProps"] = {},
	["DisableReloadUnfreeze"] = true,          
	["PickupVehiclePermission"] = {["superadmin"] = true},
	["StopMotionOnDrop"] = true,
	["blockMultiplePhysgunning"] = true,
	["maxDropObstructs"] = 3,               
	["maxDropObstructsAction"] = 1,
	["preventPropClimbing"] = true,
	["preventPropClimbingThreshold"] = 5,
	["preventPropClimbingAction"] = 1,
	["blockedEntities"] = {},
	["bypassGroups"] = {}
}

gProtect.config.modules.gravitygunsettings = {                   
	["enabled"] = true,
	["targetWorld"] = {["*"] = true},
	["targetPlayerOwned"] = {["*"] = true},
	["targetPlayerOwnedProps"] = {["*"] = true},
	["DisableGravityGunPunting"] = true,
	["blockedEntities"] = {},
	["bypassGroups"] = {}
}

gProtect.config.modules.canpropertysettings = {
	["enabled"] = true,
	["targetWorld"] = {},
	["targetPlayerOwned"] = {},
	["targetPlayerOwnedProps"] = {},
	["blockedProperties"] = {},
	["blockedPropertiesisBlacklist"] = true,
	["blockedEntities"] = {},
	["bypassGroups"] = {["owner"] = true, ["superadmin"] = true}
}

gProtect.config.modules.canusesettings = {
	["enabled"] = true,
	["targetWorld"] = {["*"] = true},
	["targetPlayerOwned"] = {["*"] = true},
	["targetPlayerOwnedProps"] = {["*"] = true},
	["blockedEntities"] = {},
	["blockedEntitiesisBlacklist"] = true,
	["bypassGroups"] = {["owner"] = true, ["superadmin"] = true}
}

gProtect.config.modules.advdupe2 = {
	["enabled"] = true,
	["notifyStaff"] = true,
	["PreventRopes"] = 1,
	["PreventScaling"] = 1,
	["PreventNoGravity"] = 1,
	["PreventTrail"] = 1,
	["PreventUnreasonableValues"] = true,
	["PreventUnfreezeAll"] = true,
 	["BlacklistedCollisionGroups"] = {[COLLISION_GROUP_IN_VEHICLE] = true, [COLLISION_GROUP_PROJECTILE] = true},
	["WhitelistedConstraints"] = {
		["weld"] = true
	},
	["whitelistedClasses"] = {["gmod_button"] = true},
	["DelayBetweenUse"] = 2
}

gProtect.config.modules.miscs = {
	["enabled"] = true,
	["ClearDecals"] = 120,
	["blacklistedFadingDoorMats_punishment"] = 1,
	["blacklistedFadingDoorMats"] = {["pp/copy"] = true, ["dev/upscale"] = true},
	["FadingDoorLag"] = true,
	["DisableMotion"] = false,
	["DisableMotionEntities"] = {["prop_physics"] = true},
	["freezeOnSpawn"] = true,
	["preventFadingDoorAbuse"] = true,
	["precisionMoveFix"] = true,
	["preventSpawnNearbyPlayer"] = 10,
	["DRPEntForceOwnership"] = {},
	["DRPMaxObstructsOnPurchaseEnts"] = 3,
	["DRPObstructsFilter"] = 1
}

------------------------------------------------------           
-- NO NOT TOUCH ANYTHING IN HERE!!!!!!!!!                                                  
------------------------------------------------------76561199225769214
--addons/gprotect_1.13.99/lua/g_protect/client/cl_buddies.lua:
return gluapack()()
--addons/gprotect_1.13.99/lua/g_protect/client/cl_buddies.lua:
if gProtect.config.DisableBuddySystem then return end

gProtect = gProtect or {}
gProtect.BuddiesData = gProtect.BuddiesData or {}

if (file.Exists( "gp_buddies.txt", "DATA" )) then
	local data = file.Read( "gp_buddies.txt")
	data = util.JSONToTable(data)

	gProtect.BuddiesData = data or {}
end

local classtoInt = {
	["weapon_physcannon"] = 1,
	["weapon_physgun"] = 2,
	["gmod_tool"] = 3,
	["canProperty"] = 4,
	["canUse"] = 5
}

local permissions = {
	{title = slib.getLang("gprotect", gProtect.config.SelectedLanguage, "toolgun"), classname = "gmod_tool", int = 3},
	{title = slib.getLang("gprotect", gProtect.config.SelectedLanguage, "gravity-gun"), classname = "weapon_physcannon", int = 1},
	{title = slib.getLang("gprotect", gProtect.config.SelectedLanguage, "physgun"), classname = "weapon_physgun", int = 2},
	{title = slib.getLang("gprotect", gProtect.config.SelectedLanguage, "canproperty"), classname = "canProperty", int = 4},
	{title = slib.getLang("gprotect", gProtect.config.SelectedLanguage, "canuse"), classname = "canUse", int = 5}
}

local function handleBuddies(ply, weapon, int, forced)
	if !IsValid(ply) or !weapon or !int then return end

	local sid = ply:SteamID()
	local lsid = LocalPlayer():SteamID()

	gProtect.BuddiesData[lsid] = gProtect.BuddiesData[lsid] or {}
	gProtect.BuddiesData[lsid][weapon] = gProtect.BuddiesData[lsid][weapon] or {}

	local isBuddy = forced and forced or !gProtect.BuddiesData[lsid][weapon][sid]

	net.Start("gP:Buddies")
	net.WriteInt(ply:EntIndex(), 15)
	net.WriteUInt(int, 3)
	net.WriteBool(isBuddy)
	net.SendToServer()

	if !isBuddy then isBuddy = nil end

	gProtect.BuddiesData[lsid][weapon][sid] = isBuddy

	if(file.Exists( "gp_buddies.txt", "DATA" )) then
		local data = file.Read( "gp_buddies.txt")
		data = util.JSONToTable(data) or {}

		data[lsid] = data[lsid] or {}
		data[lsid][weapon] = data[lsid][weapon] or {}
		data[lsid][weapon][sid] = isBuddy
		
		file.Write("gp_buddies.txt", util.TableToJSON(data))
	else
		local data = {[lsid] = {[weapon] = {[sid] = isBuddy}}}
		file.Write("gp_buddies.txt", util.TableToJSON(data))
	end
end

local function openBuddies()
	local buddies = vgui.Create("SFrame")
    buddies:SetSize(slib.getScaledSize(400, "x"),slib.getScaledSize(370, "y"))
    :setTitle(slib.getLang("gprotect", gProtect.config.SelectedLanguage, "buddies-title"))
    :Center()
    :addCloseButton()
    :MakePopup()

	local player_list = vgui.Create("SListPanel", buddies.frame)
    player_list:setTitle(slib.getLang("gprotect", gProtect.config.SelectedLanguage, "player-list"))
	:addSearchbar()
	:Dock(FILL)
	:DockMargin(slib.getTheme("margin"),slib.getTheme("margin"),slib.getTheme("margin"),slib.getTheme("margin"))

    for k,v in ipairs(player.GetAll()) do
        if v:IsBot() or v == LocalPlayer() then continue end
		local _, entry = player_list:addEntry(v)
		if v:GetFriendStatus() == "friend" then entry:SetZPos(-10) end
	end
	
	for k,v in ipairs(permissions) do
		local _, bttn = player_list:addButton(v.title, function() handleBuddies(player_list.selected, v.classname, v.int) end)
		bttn:setToggleable(true)

		bttn.toggleCheck = function()
			local lply = LocalPlayer()
			local ply = player_list.selected

			if !ply or !lply then return slib.getTheme("maincolor", 20) end

			local lsid = lply:SteamID()
			local sid = ply:SteamID()

			return (gProtect.BuddiesData[lsid] and gProtect.BuddiesData[lsid][v.classname] and gProtect.BuddiesData[lsid][v.classname][sid] and true or false)
		end
	end
end

hook.Add("Think", "gP:WaitOnLocalPlayer", function()
	if !IsValid(LocalPlayer()) then return end
	hook.Add("OnEntityCreated", "gP:HandleJoinedFriends", function(ent)
		if ent:IsPlayer() then
			local lply = LocalPlayer()
			
			if !IsValid(lply) then return end
	
			local lsid = lply:SteamID()
			local sid = ent:SteamID()
			if !gProtect.BuddiesData[lsid] then return end
			for k,v in pairs(gProtect.BuddiesData[lsid]) do
				if v[sid] then
					handleBuddies(ent, k, classtoInt[k], true)
				end
			end
		end
	end)
	
	for k,ply in ipairs(player.GetAll()) do
		local lsid = LocalPlayer():SteamID()
		local sid = ply:SteamID()
		if !gProtect.BuddiesData[lsid] then return end
		for k,v in pairs(gProtect.BuddiesData[lsid]) do
			if v[sid] then
				handleBuddies(ply, k, classtoInt[k], true)
			end
		end
	end

	hook.Remove("Think", "gP:WaitOnLocalPlayer")
end)

list.Set("DesktopWindows", "gp_buddies",{
	title = "gP: Buddies",
	icon = "gProtect/buddies.png",
	init = openBuddies
})

concommand.Add("buddies", openBuddies)
concommand.Add("gp_buddies", openBuddies)
--addons/skeypad_1.2.36/lua/s_keypad/integration/sh_wdphone.lua:
hook.Add("PostGamemodeLoaded", "sK:WDPhoneIntegration", function()
    if wdEntInfo then
        if CLIENT then
            wdEntInfo["s_keypad"] = {slib.getLang("skeypad", sKeypad.config.Language, "tool_name"), Vector(0, 0, 5)}
        else
            wdEntInfo["s_keypad"] = function( ent, ply )
                ent:Process(true)
            
                local vPoint = ent:GetPos()
                local effectdata = EffectData()
                effectdata:SetStart(vPoint)
                effectdata:SetOrigin(vPoint)
                effectdata:SetScale(1)
                util.Effect("cball_explode", effectdata)
            
                ent:EmitSound("buttons/button19.wav", 100, 100)
            end
        end
    
        wdEntList[#wdEntList + 1] = "s_keypad"
    end
end)
--addons/spzones/lua/autorun/spzones_load.lua:
AddCSLuaFile()

if SERVER then
    include"spzones/spconfig.lua"
    include"spzones/sv_spmain.lua"
    AddCSLuaFile("spzones/spconfig.lua")
    AddCSLuaFile("spzones/cl_spmain.lua")
end

if CLIENT then
    include"spzones/spconfig.lua"
    include"spzones/cl_spmain.lua"
end
--addons/sreward_1.5.30/lua/autorun/sreward_loader.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/core/sh_sreward.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/modules/sh_discord.lua:
local client_id = sReward.config["discord"]["client_id"]
local guild_id = sReward.config["discord"]["guild_id"]

if CLIENT then
    net.Receive("sR:DiscordIntegration", function()
        RunConsoleCommand("sreward_discordweb")
    end)
else
    util.AddNetworkString("sR:DiscordIntegration")

    sReward = sReward or {}
    sReward.discord = sReward.discord or {}
    sReward.discord.members = sReward.discord.members or {}
    sReward.discord.queue = sReward.discord.queue or {}

    local client_secret = sReward.config["discord"]["client_secret"]
    local bot_token = sReward.config["discord"]["bot_token"]

    local apiURL = "https://stromic.xyz/discord.php" --- We will get blocked by Cloudflare so we reverse proxy!

    local function handleQueue(sid)
        for k,v in pairs(sReward.discord.queue[sid]) do
            v()
            sReward.discord.queue[sid][k] = nil
        end
    end

    local function syncMember(sid)
        local uid = sReward.discord.members[sid] and sReward.discord.members[sid].id
        if !uid then return end
        http.Fetch(apiURL.."/guilds/"..guild_id.."/members/"..uid, function(json, len, headers, code)
            local data = util.JSONToTable(json)
            if data then
                sReward.discord.members[sid].joined = !!data.user
                sReward.discord.members[sid].boosting = !!data.premium_since

                handleQueue(sid)
            end
        end, nil, {
            ["Authorization"] = "Bot "..bot_token
        })
    end

    sReward.syncMember = syncMember

    local function storeuid(ply, code)
        local sid = ply:SteamID()
        
        HTTP({
            method = "post",
            url = apiURL.."/oauth2/token",
            parameters = {
                grant_type = "authorization_code",
                code = code,
                client_id = client_id,
                client_secret = client_secret,
            },
            headers	= {},
            success = function(code, body, headers)
                if (code == 200) then
                    local data = util.JSONToTable(body)
                    local token = data.access_token

                    if !token then
                        slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "discord_error_retrieving_data"), ply)
                    return end

                    http.Fetch(apiURL.."/users/@me", function(data)
                        local json = util.JSONToTable(data)
            
                        sReward.discord.members[sid].id = json and json.id

                        if !sReward.discord.members[sid] then
                            slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "discord_error_retrieving_data"), ply)
                            sReward.discord.members[sid] = nil
                        else
                            syncMember(sid)
                        end
                    end, function()
                        slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "discord_error_retrieving_data"), ply) 
                    end,{ --- Headers include token!    ​​      ​ 0  
                        ["Authorization"] = "Bearer "..token
                    })
                else
                    slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "discord_error_retrieving_data"), ply)
                end
            end,
            failed = function(err)
                slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "discord_error_retrieving_data"), ply)
            end
        })
    end

    local function handleVerification(ply, key, type)
        local reward = sReward.config["rewards"][key]

        local sid = ply:SteamID()
        
        sReward.discord.members[sid] = sReward.discord.members[sid] or {}
        sReward.discord.queue[sid] = sReward.discord.queue[sid] or {}

        if sReward.discord.members[sid][type] then
            sReward.GiveReward(ply, key)
        return end

        local success = function()
            if sReward.discord.members[sid][type] then
                sReward.GiveReward(ply, key)
            else
                slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "failed_verification", reward.name), ply)
            end
        end

        if !sReward.discord.members[sid].id then            
            net.Start("sR:DiscordIntegration")
            net.Send(ply)

            ply.sR_RequestedAuth = true
        elseif !sReward.discord.members[sid][type] then
            syncMember(sid)
        end

        sReward.discord.queue[sid][type] = success

        slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "checking_wait", reward.name), ply)
    end

    sReward.VerifyDiscordJoin = function(ply, key)
        handleVerification(ply, key, "joined")
    end

    sReward.VerifyDiscordBoost = function(ply, key)
        handleVerification(ply, key, "boosting")
    end

    net.Receive("sR:DiscordIntegration", function(len, ply)
        local sid = ply:SteamID()
        if !ply.sR_RequestedAuth then return end
        ply.sR_RequestedAuth = nil

        local code = net.ReadString()

        if code == "" then return end
            
        storeuid(ply, code, v)
    end)
end
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_wos.lua:
return gluapack()()
--lua/streamradio_core/_include.lua:
-- 3D Stream Radio. Made By Grocel.

if not StreamRadioLib then return end
local LIB = StreamRadioLib

local loadSH = LIB.LoadSH
local loadCL = LIB.LoadCL
local loadSV = LIB.LoadSV

if not loadSH then return end
if not loadCL then return end
if not loadSV then return end

LIB.DataDirectory = "streamradio"

do
    local status, lib = loadSH("streamradio_core/external/neturl.lua")

    LIB.NetURL = nil

    if status then
        LIB.NetURL = lib
    end
end

loadSH("streamradio_core/api.lua")
loadSH("streamradio_core/string.lua")
loadSH("streamradio_core/string_accents.lua")
loadSH("streamradio_core/util.lua")
loadSH("streamradio_core/url.lua")
loadSH("streamradio_core/hook.lua")
loadSH("streamradio_core/timedpairs.lua")
loadSH("streamradio_core/convar.lua")
loadSH("streamradio_core/language.lua")
loadSH("streamradio_core/bass3.lua")
loadSH("streamradio_core/lib.lua")
loadSH("streamradio_core/enum.lua")
loadSH("streamradio_core/error.lua")
loadSH("streamradio_core/stream.lua")
loadSH("streamradio_core/json.lua")
loadSH("streamradio_core/network.lua")
loadSH("streamradio_core/net.lua")
loadSH("streamradio_core/timer.lua")
loadSH("streamradio_core/tool.lua")
loadSH("streamradio_core/http.lua")
loadSH("streamradio_core/shoutcast.lua")
loadSH("streamradio_core/skin.lua")
loadSH("streamradio_core/models.lua")
loadSH("streamradio_core/interface.lua")
loadSH("streamradio_core/filesystem.lua")
loadSH("streamradio_core/cache.lua")
loadSH("streamradio_core/classes.lua")
loadSH("streamradio_core/properties.lua")
loadSH("streamradio_core/print.lua")
loadSH("streamradio_core/cfchttp.lua")
loadSH("streamradio_core/vr.lua")
loadSH("streamradio_core/wire.lua")

loadSV("streamradio_core/server/sv_lib.lua")
loadSV("streamradio_core/server/sv_resource.lua")
loadSV("streamradio_core/server/sv_playlist_edit.lua")
loadSV("streamradio_core/server/sv_permaprops.lua")
loadSV("streamradio_core/server/sv_whitelist.lua")

loadCL("streamradio_core/client/cl_help.lua")
loadCL("streamradio_core/client/cl_lib.lua")
loadCL("streamradio_core/client/cl_presets.lua")
loadCL("streamradio_core/client/cl_menu.lua")
loadCL("streamradio_core/client/cl_settings.lua")
loadCL("streamradio_core/client/settings/admin.lua")
loadCL("streamradio_core/client/settings/general.lua")
loadCL("streamradio_core/client/settings/vr.lua")
loadCL("streamradio_core/client/cl_skin.lua")
loadCL("streamradio_core/client/cl_surface.lua")
loadCL("streamradio_core/client/cl_playlist_edit.lua")
loadCL("streamradio_core/client/cl_vgui.lua")
loadCL("streamradio_core/client/cl_vgui_editor.lua")
loadCL("streamradio_core/client/cl_whitelist.lua")

StreamRadioLib.Url.Load()
StreamRadioLib.Interface.Load()
StreamRadioLib.Filesystem.Load()

StreamRadioLib.Whitelist.Load()

StreamRadioLib.Cfchttp.Load()
StreamRadioLib.Cache.Load()

return true


--lua/streamradio_core/external/neturl.lua:
return gluapack()()
--lua/streamradio_core/lib.lua:
local tostring = tostring
local tonumber = tonumber
local IsValid = IsValid
local LocalPlayer = LocalPlayer
local util = util
local string = string
local math = math
local hook = hook
local SERVER = SERVER
local CLIENT = CLIENT

local StreamRadioLib = StreamRadioLib

local catchAndErrorNoHaltWithStack = StreamRadioLib.Util.CatchAndErrorNoHaltWithStack

function StreamRadioLib.IsGUIHidden(ply)
	if not IsValid(ply) and CLIENT then
		ply = LocalPlayer()
	end

	if not IsValid(ply) then return true end
	if not ply:IsPlayer() then return true end
	if ply:IsBot() then return true end

	return tobool(ply:GetInfo("cl_streamradio_hidegui"))
end

function StreamRadioLib.IsMuted(ply, owner)
	if not IsValid(ply) and CLIENT then
		ply = LocalPlayer()
	end

	if not IsValid(ply) then return true end
	if not ply:IsPlayer() then return true end
	if ply:IsBot() then return true end

	local muted = tobool(ply:GetInfo("cl_streamradio_mute"))
	if muted then
		return true
	end

	local volume = tonumber(ply:GetInfo("cl_streamradio_volume") or 0) or 0
	if volume <= 0 then
		return true
	end

	if IsValid(owner) and owner:IsPlayer() and not owner:IsBot() and owner ~= ply then
		local mutedForeign = tobool(ply:GetInfo("cl_streamradio_mute_foreign"))
		if mutedForeign then
			return true
		end
	end

	if SERVER then
		return false
	end

	local muteunfocused = tobool(ply:GetInfo("cl_streamradio_muteunfocused"))
	if not muteunfocused then
		return false
	end

	if system.HasFocus() then
		return false
	end

	return true
end

function StreamRadioLib.GetMuteDistance( ply )
	if not IsValid(ply) and CLIENT then
		ply = LocalPlayer()
	end

	if not IsValid(ply) then return 0 end
	if not ply:IsPlayer() then return 0 end
	if ply:IsBot() then return 0 end

	return math.Clamp(tonumber(ply:GetInfo("cl_streamradio_mutedistance")) or 500, 500, 5000)
end

function StreamRadioLib.GetCameraEnt(ply)
	if not IsValid(ply) and CLIENT then
		ply = LocalPlayer()
	end

	if not IsValid(ply) then
		return nil
	end

	local camera = ply:GetViewEntity()
	if not IsValid(camera) then
		return ply
	end

	return camera
end

function StreamRadioLib.GetCameraPos(ent)
	if not IsValid(ent) and CLIENT then
		ent = LocalPlayer()
	end

	if StreamRadioLib.VR.IsActive(ent) then
		local pos = StreamRadioLib.VR.GetCameraPos(ent)
		return pos
	end

	if StreamRadioLib.Wire.IsWireUser(ent) then
		return StreamRadioLib.Wire.GetUserPos(ent)
	end

	local camera = StreamRadioLib.GetCameraEnt(ent)
	if not IsValid(camera) then return nil end

	local pos = nil

	if camera:IsPlayer() then
		pos = camera:EyePos()
	else
		pos = camera:GetPos()
	end

	return pos
end

function StreamRadioLib.GetControlPosDir(ent)
	if not IsValid(ent) and CLIENT then
		ent = LocalPlayer()
	end

	if StreamRadioLib.VR.IsActive(ent) then
		local pos, dir = StreamRadioLib.VR.GetControlPosDir(ent)
		return pos, dir
	end

	if StreamRadioLib.Wire.IsWireUser(ent) then
		local pos, dir = StreamRadioLib.Wire.GetUserPosDir(ent)
		return pos, dir
	end

	local camera = StreamRadioLib.GetCameraEnt(ent)

	if not IsValid(ent) then return nil end
	if not IsValid(camera) then return nil end

	local pos, dir

	if camera:IsPlayer() then
		pos = camera:EyePos()
		dir = camera:GetAimVector()
	else
		pos = camera:GetPos()

		-- This is not a mistake
		-- This allows UI clicks/use via C-Menu aim
		dir = ent:GetAimVector()
	end

	return pos, dir
end

local g_PlayerTraceCache = {}
local g_PlayerTraceCacheCount = 0

local g_PlayerTrace = {}
g_PlayerTrace.filter = {}

function StreamRadioLib.Trace(ent)
	if not IsValid(ent) and CLIENT then
		ent = LocalPlayer()
	end

	if not IsValid(ent) then
		return nil
	end

	if StreamRadioLib.Wire.IsWireUser(ent) then
		local trace = StreamRadioLib.Wire.WireUserTrace(ent)
		return trace
	end

	local camera = StreamRadioLib.GetCameraEnt(ent)
	if not IsValid(camera) then return nil end

	local cacheID = tostring(ent or "")
	local cacheItem = g_PlayerTraceCache[cacheID]

	if cacheItem and StreamRadioLib.Util.IsSameFrame("StreamRadioLib.Trace_" .. cacheID) then
		return cacheItem
	end

	g_PlayerTraceCache[cacheID] = nil

	local pos, dir = StreamRadioLib.GetControlPosDir(ent)

	if not pos then
		return nil
	end

	if not dir then
		return nil
	end

	local start_pos = pos
	local end_pos = pos + dir * 5000

	g_PlayerTrace.start = start_pos
	g_PlayerTrace.endpos = end_pos

	local entVehicle = ent.GetVehicle and ent:GetVehicle() or false
	local cameraVehicle = camera.GetVehicle and camera:GetVehicle() or false

	local tmp = {}

	tmp[ent] = ent
	tmp[camera] = camera
	tmp[entVehicle] = entVehicle
	tmp[cameraVehicle] = cameraVehicle

	local filter = g_PlayerTrace.filter
	table.Empty(filter)

	for _, filterEnt in pairs(tmp) do
		if not IsValid(filterEnt) then continue end
		table.insert(filter, filterEnt)
	end

	local trace = util.TraceLine(g_PlayerTrace)

	-- prevent the cache from overflowing
	if g_PlayerTraceCacheCount > 1024 then
		StreamRadioLib.Util.EmptyTableSafe(g_PlayerTraceCache)
		g_PlayerTraceCacheCount = 0
	end

	g_PlayerTraceCache[cacheID] = trace

	if not cacheItem then
		g_PlayerTraceCacheCount = g_PlayerTraceCacheCount + 1
	end

	return g_PlayerTraceCache[cacheID]
end

local g_PI = math.pi
local g_TAU = g_PI * 2
local g_starTracePoses = {}

local function buildStarTracePoses(layers, edges)
	layers = math.abs(layers or 0)
	edges = math.abs(edges or 0)

	for l = 1, layers do
		local u = g_TAU / layers * l

		for e = 1, edges do
			local v = g_TAU / edges * e

			local x = math.cos(u) * math.cos(v)
			local y = math.cos(u) * math.sin(v)
			local z = math.sin(u)

			local v = Vector(x, y, z)
			v:Normalize()

			if g_starTracePoses[v] then continue end
			g_starTracePoses[v] = true
		end
	end

	g_starTracePoses[Vector(0, 0, 1)] = true
	g_starTracePoses[Vector(0, 1, 0)] = true
	g_starTracePoses[Vector(1, 0, 0)] = true

	g_starTracePoses[Vector(0, 0, -1)] = true
	g_starTracePoses[Vector(0, -1, 0)] = true
	g_starTracePoses[Vector(-1, 0, 0)] = true
end

buildStarTracePoses(10, 6)

function StreamRadioLib.StarTrace(traceparams, size)
	traceparams = traceparams or {}

	local centerpos = traceparams.start or Vector()

	size = math.abs(size or 0)

	traceparams.start = centerpos
	traceparams.output = nil

	local traces = {}

	for v, _ in pairs(g_starTracePoses) do
		local endpos = centerpos + v * size
		traceparams.endpos = endpos

		local trace = util.TraceLine(traceparams)

		-- Tracers Debug
		-- debugoverlay.Line(centerpos, trace.HitPos or endpos, 0.5, color_white, false)
		-- debugoverlay.Line(trace.HitPos or endpos, endpos, 0.5, color_black, false)

		table.insert(traces, trace)
	end

	return traces
end

local g_mat_cache = {}

function StreamRadioLib.GetCustomPNGPath(name)
	if SERVER then return nil end
	if not name then return nil end

	local path = "3dstreamradio/" .. name .. ".png"
	return path
end

function StreamRadioLib.GetCustomPNG(name)
	if SERVER then return nil end
	if not name then return nil end

	local path = StreamRadioLib.GetCustomPNGPath(name)
	if not path then return nil end

	local mat = g_mat_cache[path]

	if mat then
		return mat
	end

	mat = Material( path, "nocull" )
	return mat
end

function StreamRadioLib.GetPNGIconPath(name, custom)
	if SERVER then return nil end
	if not name then return nil end

	local prepath = "icon16/" .. name

	if custom then
		return StreamRadioLib.GetCustomPNGPath(prepath)
	end

	local path = prepath .. ".png"
	return path
end

function StreamRadioLib.GetPNGIcon(name, custom)
	if SERVER then return nil end
	if not name then return nil end

	local path = StreamRadioLib.GetPNGIconPath(name, custom)
	if not path then return nil end

	local mat = g_mat_cache[path]

	if mat then
		return mat
	end

	mat = Material( path, "nocull" )

	return mat
end

function StreamRadioLib.GetHierarchy(hierarchy)
	if isstring(hierarchy) then
		if hierarchy == "" then
			return {}
		end

		return string.Explode("[%/%\\]", hierarchy, true) or {}
	end

	if istable(hierarchy) then
		return hierarchy
	end

	return nil
end

function StreamRadioLib.SetSkinTableProperty(tab, hierarchy, property, value)
	hierarchy = StreamRadioLib.GetHierarchy(hierarchy)
	if not hierarchy then return tab end

	tab = tab or {}
	property = tostring(property or "")

	local count = #hierarchy

	if count <= 0 then
		tab.data = tab.data or {}
		tab.data[property] = value
		return tab
	end

	tab.children = tab.children or {}
	local curskin = tab.children

	for i, v in ipairs(hierarchy) do
		local sk = curskin[v] or {}

		if i >= count then
			sk.data = sk.data or {}
			sk.data[property] = value
			curskin[v] = sk
			break
		end

		sk.children = sk.children or {}
		curskin[v] = sk
		curskin = curskin[v].children
	end

	return tab
end

local function ReleaseLastRadioControl(ply, trace, userEntity)
	local LastRadio = userEntity._3dstreamradio_lastusedradio
	userEntity._3dstreamradio_lastusedradio = nil

	if not IsValid( LastRadio ) then return end
	if not LastRadio.__IsRadio then return end
	if not LastRadio.Control then return end

	LastRadio:Control( ply, trace, false, userEntity )
end

local g_checkPropProtectionCache = {}
local g_checkPropProtectionCacheEmpty = true
local g_checkPropProtectionCacheExpire = nil

local function ClearCheckPropProtectionCache()
	if g_checkPropProtectionCacheEmpty then
		return
	end

	StreamRadioLib.Util.EmptyTableSafe(g_checkPropProtectionCache)

	g_checkPropProtectionCacheEmpty = true
	g_checkPropProtectionCacheExpire = nil
end

function StreamRadioLib.CheckPropProtectionAgainstUse(ent, ply)
	if not IsValid( ent ) then return false end
	if not IsValid( ply ) then return false end

	if CLIENT and not ent.CPPICanUse then
		return true
	end

	local cacheId = tostring(ent) .. "_" .. tostring(ply)
	local now = RealTime()

	-- cache the check result for a short time to avoid spam calling the hook "PlayerUse" and CPPI
	if g_checkPropProtectionCacheExpire and g_checkPropProtectionCacheExpire <= now then
		ClearCheckPropProtectionCache()
	end

	if g_checkPropProtectionCache[cacheId] ~= nil then
		return g_checkPropProtectionCache[cacheId]
	end

	if g_checkPropProtectionCacheEmpty then
		g_checkPropProtectionCacheExpire = now + 3
		g_checkPropProtectionCacheEmpty = false
	end

	g_checkPropProtectionCache[cacheId] = false

	-- Support for prop protections
	if ent.CPPICanUse then
		local status, use = catchAndErrorNoHaltWithStack(ent.CPPICanUse, ent, ply)

		if not status then
			return false
		end

		if not use then
			return false
		end
	end

	if SERVER then
		local status, use = catchAndErrorNoHaltWithStack(StreamRadioLib.Hook.Run, "PlayerUse", ply, ent)

		if not status then
			return false
		end

		if not use then
			return false
		end
	end

	g_checkPropProtectionCache[cacheId] = true
	return true
end

function StreamRadioLib.CanUseRadio(ply, radio, userEntity)
	if not IsValid( ply ) then return false end
	if not IsValid( radio ) then return false end
	if not radio.__IsRadio then return false end
	if not radio.Control then return false end
	if not radio.CanControl then return false end

	if not IsValid(userEntity) then
		userEntity = ply
	end

	local use = radio:CanControl(ply, userEntity)
	if not use then
		return false
	end

	return true
end

function StreamRadioLib.Control( ply, trace, keydown, userEntity )
	if not IsValid( ply ) then return end

	if not IsValid(userEntity) then
		userEntity = ply
	end

	if not trace then
		ReleaseLastRadioControl( ply, nil, userEntity )
		return
	end

	if not keydown then
		ReleaseLastRadioControl( ply, trace, userEntity )
		return
	end

	local Radio = trace.Entity
	local LastRadio = userEntity._3dstreamradio_lastusedradio

	if not StreamRadioLib.CanUseRadio( ply, Radio, userEntity ) then
		ReleaseLastRadioControl( ply, trace, userEntity )
		return
	end

	if Radio ~= LastRadio then
		ReleaseLastRadioControl( ply, trace, userEntity )
	end

	local rv = Radio:Control( ply, trace, true, userEntity )
	userEntity._3dstreamradio_lastusedradio = Radio

	return rv
end

function StreamRadioLib.TabControl( ply, trace, userEntity )
	if not IsValid(ply) and CLIENT then
		ply = LocalPlayer()
	end

	if not IsValid(ply) then
		return
	end

	if not trace then
		return
	end

	if not IsValid(userEntity) then
		userEntity = ply
	end

	local ent = trace.Entity
	if not IsValid( ent ) then
		return
	end

	if not ent.__IsRadio then
		return
	end

	local name = tostring(ent) .. "_" .. tostring(ply) .. "_TabControl"

	trace = table.Copy(trace)

	StreamRadioLib.Control(ply, trace, true, userEntity)

	StreamRadioLib.Timer.NextFrame(name, function()
		if not IsValid(ply) then
			return
		end

		if not IsValid(ent) then
			return
		end

		if not IsValid(userEntity) then
			return
		end

		StreamRadioLib.Control(ply, trace, false, userEntity)
	end)
end

local g_PlayerCache = {}
local g_LocalPlayer = nil

function StreamRadioLib.GetPlayerId(ply)
	if not IsValid(ply) then
		return nil
	end

	if not ply:IsPlayer() then
		return nil
	end

	if ply:IsBot() then
		return nil
	end

	if game.SinglePlayer() then
		return "LOCAL_CLIENT"
	end

	if SERVER and not ply:IsConnected() then
		return nil
	end

	local id = ply:SteamID64()
	if not id then
		-- fallback to player string on invalid ids
		id = tostring(ply) .. "[" .. ply:UserID() .. "]";
	end

	g_PlayerCache[id] = ply
	return id
end

function StreamRadioLib.GetPlayerFromId(id)
	id = tostring(id or "")

	if id == "" then
		return nil
	end

	if game.SinglePlayer() then
		if id == "LOCAL_CLIENT" then
			if not IsValid(g_LocalPlayer) then
				g_LocalPlayer = player.GetHumans()[1]
			end

			if not IsValid(g_LocalPlayer) then
				return nil
			end

			return g_LocalPlayer
		end

		return nil
	end


	local ply = g_PlayerCache[id]

	if not IsValid(ply) then
		ply = player.GetBySteamID64(id)
	end

	g_PlayerCache[id] = nil

	if not IsValid(ply) then
		return nil
	end

	if ply:IsBot() then
		return nil
	end

	if SERVER and not ply:IsConnected() then
		return nil
	end

	g_PlayerCache[id] = ply
	return ply
end

local _GetPlayerId = StreamRadioLib.GetPlayerId
local _GetPlayerFromId = StreamRadioLib.GetPlayerFromId

function StreamRadioLib.IsPlayerNetworkable(plyOrId)
	if isentity(plyOrPId) then
		return _GetPlayerId(plyOrId) ~= nil
	end

	return IsValid(_GetPlayerFromId(plyOrId))
end

StreamRadioLib.SpawnedRadios = {}

local g_nextFastThink = 0
local g_radioCount = 0
local g_streamingRadioCount = 0

StreamRadioLib.Hook.Add("Think", "RadioCounter", function()
	StreamRadioLib.SpawnedRadios = StreamRadioLib.SpawnedRadios or {}
	local spawnedRadios = StreamRadioLib.SpawnedRadios

	local radioCount = 0
	local streamingRadioCount = 0

	for index, ent in pairs(spawnedRadios) do
		if not IsValid(ent) then
			spawnedRadios[index] = nil
			continue
		end

		if not ent.__IsRadio then
			spawnedRadios[index] = nil
			continue
		end

		radioCount = radioCount + 1

		if ent.IsStreaming and ent:IsStreaming() then
			streamingRadioCount = streamingRadioCount + 1
		end
	end

	g_radioCount = radioCount
	g_streamingRadioCount = streamingRadioCount

	if g_radioCount <= 0 then
		ClearCheckPropProtectionCache()
		return
	end
end)

StreamRadioLib.Hook.Add("Think", "EntityFastThink", function()
	local now = RealTime()
	if g_nextFastThink > now then return end

	g_nextFastThink = now + 0.01

	local radios = StreamRadioLib.SpawnedRadios
	if not radios then
		return
	end

	for index, ent in pairs(radios) do
		if not IsValid(ent) then
			continue
		end

		if ent.FastThink then
			-- Think with a faster rate that doesn't interfere with model animations
			ent:FastThink()
		end

		if ent:IsDormant() then
			continue
		end

		if not ent.NonDormantThink then
			continue
		end

		-- Called when the radio is not Dormant
		ent:NonDormantThink()
	end
end)

function StreamRadioLib.GetRadioCount()
	return g_radioCount
end

function StreamRadioLib.HasSpawnedRadios()
	return g_radioCount > 0
end

function StreamRadioLib.GetStreamingRadioCount()
	return g_streamingRadioCount
end

function StreamRadioLib.HasStreamingRadios()
	return g_streamingRadioCount > 0
end

function StreamRadioLib.RegisterRadio(ent)
	if not IsValid(ent) then
		return
	end

	if not ent.__IsRadio then
		return
	end

	StreamRadioLib.Network.SetupEntityTable(ent)
	StreamRadioLib.SpawnedRadios[ent:GetCreationID()] = ent
end

function StreamRadioLib.UnregisterRadio(entOrCreationID)
	if isnumber(entOrCreationID) then
		StreamRadioLib.SpawnedRadios[entOrCreationID] = nil
		return
	end

	if not IsValid(ent) then
		return
	end

	StreamRadioLib.SpawnedRadios[ent:GetCreationID()] = nil
end

return true


--lua/streamradio_core/error.lua:
return gluapack()()
--lua/streamradio_core/error.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Error = StreamRadioLib.Error or {}

local LIB = StreamRadioLib.Error
table.Empty(LIB)

local g_errorListById = {}
local g_errorListByName = {}

local g_emptyDescription = "Error {{ERROR_CODE}} is unknown"
local g_emptyHelpText = [[
There is no help text for error {{ERROR_CODE}} ({{ERROR_NAME}}).

Please report this! Include the URL and the error code in the report!
]]

local g_commonErrorFile = [[
There was no file or content found at the given path.

If you try to play an online file:
	- Do not forget the protocol prefix such as 'http://'.
	- Make sure the file exist at the given URL. It should be downloadable.
	- Make sure the format is supported and the file is not broken. (See below.)

If you try to play a local file:
	- Make sure the file exist at the given path.
	- Make sure the file is readable for Garry's Mod.
	- The path must be relative your "<path_to_game>/garrysmod/sound/" folder. (See below.)
	- The file must be in "<path_to_game>/garrysmod/sound/" folder. (See below.)
	- You can play mounted stuff in "<path_to_game>/garrysmod/sound/".
	- You can not play sound scripts or sound properties.
	- Make sure the format is supported and the file is not broken. (See below.)

Supported formats:
	MP3, OGG, AAC, WAV, WMA, FLAC
	*.WAV files must be not self-looping in game as the API does not support these.

How local or mounted file paths work:
	- If you have a file located "<path_to_game>/garrysmod/sound/mymusic/song.mp3" you access it with these urls:
	* file://mymusic/song.mp3
	* mymusic/song.mp3"

	- For files in "<path_to_game>/garrysmod/sound/filename.mp3" you get them like this:
	* file://filename.mp3
	* filename.mp3

	- Files outside the game folder are forbidden to be accessed by the game.
	- Do not enter absolute paths.
	- Only people who also have the same file localed there, will be able to hear the music too.
	- Create folders if they are missing.
]]

local g_commonErrorFileUrl = "https://steamcommunity.com/workshop/filedetails/discussion/246756300/523897277918001392/"

local g_commonErrorFormat = [[
You are trying to play something that the streaming API of GMod (and so the radio) does not support.

These things will NOT work:
	- HTML pages that play sound.
	- Flash players/games/applications that are playing sound.
	- Anything that requires any kind of login to access.
	- Anything that is not public.
	- Sound scripts or sound properties.
	- Broken files or unsupported formats. (See below.)

These things will work:
	- URLs to sound files (aka. DIRECT download).
	- URLs to playlist files of radio stations. If they do not offer them, you will be not able to play them.
	- URLs inside these playlists files.
	- Local sound files inside your "<path_to_game>/garrysmod/sound/" folder. Examble: "music/hl1_song10.mp3"
	- You may have to install addional codices to your OS.
	- Formats that are listed below.

Supported formats:
	MP3, OGG, AAC, WAV, WMA, FLAC
	*.WAV files must be not self-looping ingame as the API does not support these.
]]

local g_commonErrorFormatUrl = "https://steamcommunity.com/workshop/filedetails/discussion/246756300/523897277918028290/"

local g_commonErrorBrokenUrl = [[
Something went wrong with parsing the URL.
It could have been blocked by the server to prevent abuse.

Please talk to an admin about this before you report this issue.
]]

local function replacePlaceholder(subject, placeholder, value)
	subject = tostring(subject or "")
	placeholder = tostring(placeholder or "")
	value = tostring(value or "")

	return string.Replace(subject, placeholder, value)
end

local function cleanNewLines(str)
	str = string.gsub(str, "\r", "")
	str = string.Trim(str)

	return str
end

local function processErrorInfo(info)
	local id = info.id
	local name = info.name
	local description = info.description or ""
	local helptext = info.helptext or ""
	local helpurl = info.helpurl or ""

	description = replacePlaceholder(description, "{{ERROR_CODE}}", id)
	description = replacePlaceholder(description, "{{ERROR_NAME}}", name)

	helptext = replacePlaceholder(helptext, "{{ERROR_CODE}}", id)
	helptext = replacePlaceholder(helptext, "{{ERROR_NAME}}", name)
	helptext = replacePlaceholder(helptext, "{{ERROR_DESCRIPTION}}", description)
	helptext = replacePlaceholder(helptext, "{{ERROR_HELPURL}}", helpurl)

	helptext = cleanNewLines(helptext)

	info.description = description
	info.helptext = helptext
end

local function createUnknownErrorInfo(idOrName)
	local info = {}

	if isstring(idOrName) then
		info.id = LIB.STREAM_ERROR_UNKNOWN
		info.name = idOrName
	else
		info.id = idOrName
		info.name = "STREAM_ERROR_UNKNOWN"
	end

	info.description = g_emptyDescription
	info.helptext = g_emptyHelpText
	info.helpmenu = true

	processErrorInfo(info)
	return info
end


function LIB.AddStreamErrorCode(data)
	local id = data.id
	local name = data.name
	local description = data.description
	local helptext = data.helptext
	local helpurl = data.helpurl
	local helpmenu = data.helpmenu
	local userdata = data.userdata

	if not id then
		error("id is missing")
	end

	if not name or name == "" then
		error("name is missing or empty")
	end

	if helpmenu == nil then
		helpmenu = true
	end

	id = tonumber(id) or -1
	name = tostring(name)
	name = string.upper(name)

	local info = {
		id = id,
		name = name,
		helpmenu = helpmenu,
	}

	if userdata then
		info.userdata = table.Copy(userdata)
	end

	LIB[name] = id

	g_errorListById[id] = info
	g_errorListByName[name] = info

	LIB.AddStreamDescription(id, description)
	LIB.AddStreamErrorHelp(id, helptext, helpurl)
end

function LIB.AddStreamDescription(idOrName, description)
	local info = LIB.GetStreamErrorInfo(idOrName)
	if not info then
		return
	end

	local id = info.id
	local name = info.name

	description = tostring(description or "")

	if description == "" then
		description = g_emptyDescription
	end

	description = replacePlaceholder(description, "{{ERROR_CODE}}", id)
	description = replacePlaceholder(description, "{{ERROR_NAME}}", name)

	info.description = description
end

function LIB.AddStreamErrorHelp(idOrName, helptext, helpurl)
	local info = LIB.GetStreamErrorInfo(idOrName)
	if not info then
		return
	end

	local id = info.id
	local name = info.name
	local description = info.description

	helptext = tostring(helptext or "")
	helpurl = tostring(helpurl or "")

	if helptext == "" then
		helptext = g_emptyHelpText
	end

	helptext = replacePlaceholder(helptext, "{{ERROR_CODE}}", id)
	helptext = replacePlaceholder(helptext, "{{ERROR_NAME}}", name)
	helptext = replacePlaceholder(helptext, "{{ERROR_DESCRIPTION}}", description)
	helptext = replacePlaceholder(helptext, "{{ERROR_HELPURL}}", helpurl)

	helptext = cleanNewLines(helptext)

	info.helptext = helptext
	info.helpurl = helpurl
end

function LIB.GetStreamErrorInfo(idOrName)
	if not idOrName or idOrName == "" then
		idOrName = LIB.STREAM_ERROR_UNKNOWN
	end

	local errorList = nil

	if isstring(idOrName) then
		errorList = g_errorListByName
	else
		errorList = g_errorListById
	end

	local info = errorList[idOrName]
	if not info then
		info = createUnknownErrorInfo(idOrName)
	end

	return info
end

function LIB.GetStreamErrorId(idOrName)
	local info = LIB.GetStreamErrorInfo(idOrName)
	if not info then
		return nil
	end

	return info.id
end

function LIB.GetStreamErrorName(idOrName)
	local info = LIB.GetStreamErrorInfo(idOrName)
	if not info then
		return nil
	end

	return info.name
end

function LIB.GetStreamErrorDescription(idOrName)
	local info = LIB.GetStreamErrorInfo(idOrName)
	if not info then
		return nil
	end

	return info.description
end

LIB.AddStreamErrorCode({
	id = -1,
	name = "STREAM_ERROR_UNKNOWN",
	description = "Unknown Error",
	helptext = [[
The exact cause of this error is unknown.

This error is usually caused by:
	- Invalid file pathes or URLs without the protocol prefix such as 'http://'.
	- Attempting to play self-looping *.WAV files.
]],
})

LIB.AddStreamErrorCode({
	id = 0,
	name = "STREAM_OK",
	description = "OK",
	helpmenu = false,
	helptext = [[
Everything should be fine. You should not see this.
]],
})

LIB.AddStreamErrorCode({
	id = 1,
	name = "STREAM_ERROR_MEM",
	description = "Memory Error",
	helptext = [[
A memory error is always bad.
You proably ran out of it.
]],
})

LIB.AddStreamErrorCode({
	id = 2,
	name = "STREAM_ERROR_FILEOPEN",
	description = "Can't open the file",
	helptext = g_commonErrorFile,
	helpurl = g_commonErrorFileUrl
})

LIB.AddStreamErrorCode({
	id = 3,
	name = "STREAM_ERROR_DRIVER",
	description = "Can't find a free/valid driver",
	helptext = [[
Something is wrong with your sound hardware or your sound drivers.
]],
})

LIB.AddStreamErrorCode({
	id = 4,
	name = "STREAM_ERROR_BUFLOST",
	description = "The sample buffer was lost",
	helptext = [[
Your sound driver/interface was lost.

To fix it you need to do this:
- Plugin your speakers or head phones.
- Enable the sound device.
- Restart the game. Do not just disconnect!
- Restart your PC, if it still not works.
]],
})

LIB.AddStreamErrorCode({
	id = 5,
	name = "STREAM_ERROR_HANDLE",
	description = "Invalid handle",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 6,
	name = "STREAM_ERROR_FORMAT",
	description = "Unsupported sample format",
	helptext = g_commonErrorFormat,
	helpurl = g_commonErrorFormatUrl,
})

LIB.AddStreamErrorCode({
	id = 7,
	name = "STREAM_ERROR_POSITION",
	description = "Invalid position",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 8,
	name = "STREAM_ERROR_INIT",
	description = "BASS_Init has not been successfully called",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 9,
	name = "STREAM_ERROR_START",
	description = "BASS_Start has not been successfully called",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 10,
	name = "STREAM_ERROR_SSL",
	description = "SSL/HTTPS support isn't available",
	helptext =  [[
The SSL handshake for HTTPS did failed to validate the connection.
Please check the URL being legit and your operating system to be up to date.
]],
})

LIB.AddStreamErrorCode({
	id = 11,
	name = "STREAM_ERROR_REINIT",
	description = "Device needs to be reinitialized",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 14,
	name = "STREAM_ERROR_ALREADY",
	description = "Already initialized/paused/whatever",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 17,
	name = "STREAM_ERROR_NOTAUDIO",
	description = "File does not contain audio",
	helptext = g_commonErrorFormat,
	helpurl = g_commonErrorFormatUrl,
})

LIB.AddStreamErrorCode({
	id = 18,
	name = "STREAM_ERROR_NOCHAN",
	description = "Can't get a free channel",
	helptext = [[
A memory error is always bad.
You proably ran out of it.
]],
})

LIB.AddStreamErrorCode({
	id = 19,
	name = "STREAM_ERROR_ILLTYPE",
	description = "An illegal type was specified",
	helptext = g_commonErrorBrokenUrl,
})

LIB.AddStreamErrorCode({
	id = 20,
	name = "STREAM_ERROR_ILLPARAM",
	description = "An illegal parameter was specified",
	helptext = g_commonErrorBrokenUrl,
})

LIB.AddStreamErrorCode({
	id = 21,
	name = "STREAM_ERROR_NO3D",
	description = "No 3D support",
	helptext = [[
Something is wrong with your sound hardware or your sound drivers.
It does not support 3D world sound.
]],
})

LIB.AddStreamErrorCode({
	id = 22,
	name = "STREAM_ERROR_NOEAX",
	description = "No EAX support",
	helptext = [[
Something is wrong with your sound hardware or your sound drivers.
It does not support EAX-effects.
]],
})

LIB.AddStreamErrorCode({
	id = 23,
	name = "STREAM_ERROR_DEVICE",
	description = "Illegal device number",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 24,
	name = "STREAM_ERROR_NOPLAY",
	description = "Not playing",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 25,
	name = "STREAM_ERROR_FREQ",
	description = "Illegal sample rate",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 27,
	name = "STREAM_ERROR_NOTFILE",
	description = "The stream is not a file stream",
	helptext = g_commonErrorFile,
	helpurl = g_commonErrorFileUrl
})

LIB.AddStreamErrorCode({
	id = 29,
	name = "STREAM_ERROR_NOHW",
	description = "No hardware voices available",
	helptext = [[
Something is wrong with your sound hardware. Out of memory?
]],
})

LIB.AddStreamErrorCode({
	id = 31,
	name = "STREAM_ERROR_EMPTY",
	description = "The MOD music has no sequence data",
	helptext = g_commonErrorFormat,
	helpurl = g_commonErrorFormatUrl,
})

LIB.AddStreamErrorCode({
	id = 32,
	name = "STREAM_ERROR_NONET",
	description = "No internet connection could be opened",
	helptext = [[
You internet connection is not working.
Please check your network devices and your firewall.
]],
})

LIB.AddStreamErrorCode({
	id = 33,
	name = "STREAM_ERROR_CREATE",
	description = "Couldn't create the file",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 34,
	name = "STREAM_ERROR_NOFX",
	description = "Effects are not available",
	helptext = [[
Something is wrong with your sound hardware or your sound drivers.
It does not support EAX-effects.
]],
})

LIB.AddStreamErrorCode({
	id = 37,
	name = "STREAM_ERROR_NOTAVAIL",
	description = "Requested data/action is not available",
	helptext = [[
Your sound driver/interface was lost.

To fix it you need to do this:
- Plugin your speakers or head phones.
- Enable the sound device.
- Restart the game. Do not just disconnect!
- Restart your PC, if it still not works.
]],
})

LIB.AddStreamErrorCode({
	id = 38,
	name = "STREAM_ERROR_DECODE",
	description = "The channel is a 'decoding channel'",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 39,
	name = "STREAM_ERROR_DX",
	description = "A sufficient DirectX version is not installed",
	helptext = [[
Something is wrong with your sound hardware or your sound drivers.
DirectX seems to be outdated or not installed.
]],
})

LIB.AddStreamErrorCode({
	id = 40,
	name = "STREAM_ERROR_TIMEOUT",
	description = "Connection timedout",
	helptext = [[
The connection seems being slow. Just try again in a few minutes.
If it does not work, the server you are trying to stream from is available.
]],
})

LIB.AddStreamErrorCode({
	id = 41,
	name = "STREAM_ERROR_FILEFORM",
	description = "Unsupported file format",
	helptext = g_commonErrorFormat,
	helpurl = g_commonErrorFormatUrl,
})

LIB.AddStreamErrorCode({
	id = 42,
	name = "STREAM_ERROR_SPEAKER",
	description = "Unavailable speaker",
	helptext = [[
Something is wrong with your sound hardware or your sound drivers.
Do you even have speakers?
]],
})

LIB.AddStreamErrorCode({
	id = 43,
	name = "STREAM_ERROR_VERSION",
	description = "Invalid BASS version (used by add-ons)",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 44,
	name = "STREAM_ERROR_CODEC",
	description = "Codec is not available/supported",
	helptext = g_commonErrorFormat,
	helpurl = g_commonErrorFormatUrl,
})

LIB.AddStreamErrorCode({
	id = 45,
	name = "STREAM_ERROR_ENDED",
	description = "The channel/file has ended",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 46,
	name = "STREAM_ERROR_BUSY",
	description = "The device is busy",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 47,
	name = "STREAM_ERROR_UNSTREAMABLE",
	description = "Unstreamable file",
	helptext = g_commonErrorFormat,
	helpurl = g_commonErrorFormatUrl,
})

LIB.AddStreamErrorCode({
	id = 48,
	name = "STREAM_ERROR_PROTOCOL",
	description = "Unsupported protocol",
	helptext = g_commonErrorBrokenUrl,
})

LIB.AddStreamErrorCode({
	id = 49,
	name = "STREAM_ERROR_DENIED",
	description = "Access denied",
	helptext = [[
Can not access the resource. Login credentials required, but not supported.

CAUTION: Do not try to access private resources! Credentials could leak to other connected players or the server!

Better use public resources only.
]],
})


LIB.AddStreamErrorCode({
	id = 1000,
	name = "STREAM_ERROR_URL_NOT_WHITELISTED",
	description = "This URL is not whitelisted on this server",
	helpurl = "https://steamcommunity.com/workshop/filedetails/discussion/246756300/3884977551668761564/",
	helptext = [[
The server does not allow playback of this URL to prevent abuse.
You can ask an admin to whitelist this URL by adding it to the playlists.

CAUTION: Please don't ask to have the whitelist disabled or removed. It is there for your own security. Ask your admin for details.
]],
})

LIB.AddStreamErrorCode({
	id = 1001,
	name = "STREAM_ERROR_URL_BLOCKED",
	description = "This URL is blocked on this server",
	helpurl = "https://steamcommunity.com/workshop/filedetails/discussion/246756300/3884977551668761564/",
	helptext = [[
The server does not allow playback of this URL to prevent abuse. It has been blocked by external code.

CAUTION: Please don't ask to have this block disabled or removed. It is there for your own security. Ask your admin for details.
]],
})

LIB.AddStreamErrorCode({
	id = 1010,
	name = "STREAM_ERROR_WIRE_ADVOUT_DISABLED",
	description = "Advanced outputs are disabled",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 1020,
	name = "STREAM_ERROR_MISSING_GM_BASS3",
	description = "GM_BASS3 is missing",
	helptext = "",
})

LIB.AddStreamErrorCode({
	id = 1030,
	name = "STREAM_ERROR_BAD_DRIVE_LETTER_PATH",
	description = "Drive letter paths are not supported, use relative paths",
	helptext = [[
Do not use drive letter paths. Use relative paths instead.

A relative path never starts with a drive letter such as "C:/" or "D:/".

This is a relative path:
  music/hl1_song3.mp3

This is NOT a relative path:
  C:/Program Files (x86)/Steam/steamapps/common/GarrysMod/garrysmod/sound/music/hl1_song3.mp3
]],
})

LIB.AddStreamErrorCode({
	id = 1100,
	name = "PLAYLIST_ERROR_INVALID_FILE",
	description = "Invalid Playlist",
	helptext = [[
The Playlist file you are trying to load is invalid.

This could be the problem:
	- The playlist could not be found or read.
	- Its format is not supported.
	- It is broken.
	- It is empty.

Supported playlist formats:
	M3U, PLS, VDF, JSON

Playlists are located at "<path_to_game>/garrysmod/data/streamradio/playlists/".

Hint: Use the playlist editor to make playlists.
]],
	helpurl = "https://steamcommunity.com/workshop/filedetails/discussion/246756300/523897277917951293/",
})

LIB.AddStreamErrorCode({
	id = 1200,
	name = "STREAM_SOUND_STOPPED", -- triggered by "stopsound" concommand
	description = "The sound has been stopped",
	helpmenu = false,
	helptext = "",
})


if CLIENT then
	local function ShowErrorInfo( ply, cmd, args )
		local param = args[1]

		if not param or param == "" then
			MsgN("You need to enter a valid error code.")
			return
		end

		local errorcode = tonumber(param) or tostring(param)
		local errorInfo = LIB.GetStreamErrorInfo(errorcode)

		local id = errorInfo.id
		local name = errorInfo.name
		local description = errorInfo.description
		local helptext = errorInfo.helptext
		local helpurl = errorInfo.helpurl or ""

		if helpurl == "" then
			helpurl = "(no url)"
		end

		local format = [[
Getting info for error code "%s":

Id: %i
Name: %s
Description: %s

Help text:
%s

Help URL: %s
]]

		format = cleanNewLines(format)

		local errstr = string.format(
			format,
			errorcode,
			id,
			name,
			description,
			helptext,
			helpurl
		)

		local message = StreamRadioLib.AddonPrefix .. errstr
		MsgN(message)
	end

	concommand.Add( "info_streamradio_errorcode", ShowErrorInfo )
end

return true


--lua/streamradio_core/timer.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Timer = StreamRadioLib.Timer or {}

local LIB = StreamRadioLib.Timer
table.Empty(LIB)

local g_nameprefix = "3DStreamRadio_Timer_"

function LIB.GetName(identifier)
	identifier = g_nameprefix .. tostring(identifier or "")
	return identifier
end

function LIB.Interval(identifier, delay, repetitions, func)
	if not isfunction(func) then return end
	local name = LIB.GetName(identifier)

	timer.Remove(name)
	timer.Create(name, delay, repetitions, func)
end

function LIB.Once(identifier, delay, func)
	if not isfunction(func) then return end
	local name = LIB.GetName(identifier)

	timer.Remove(name)
	timer.Create(name, delay, 1, function()
		timer.Remove(name)
		func()
	end)
end

function LIB.Until(identifier, delay, func)
	if not isfunction(func) then return end
	local name = LIB.GetName(identifier)

	timer.Remove(name)
	timer.Create(name, delay, 0, function()
		local endtimer = func()
		if not endtimer then return end

		timer.Remove(name)
	end)
end

function LIB.NextFrame(identifier, func)
	LIB.Once(identifier, 0.001, func)
end

function LIB.Remove(identifier)
	local name = LIB.GetName(identifier)
	timer.Remove(name)
end

return true


--lua/streamradio_core/tool.lua:
return gluapack()()
--lua/streamradio_core/skin.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Skin = StreamRadioLib.Skin or {}

local LIB = StreamRadioLib.Skin
table.Empty(LIB)

local _default_json = [[
{
	"children":
	{
		"main":
		{
			"children":
			{
				"browser":
				{
					"children":
					{
						"error":
						{
							"children":
							{
								"textbox":
								{
									"data":
									{
										"color_foreground":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_shadow":
										{
											"r": 40,
											"b": 40,
											"a": 255,
											"g": 40
										},
										"color":
										{
											"r": 128,
											"b": 0,
											"a": 255,
											"g": 32
										}
									},
									"children":
									{
										"scrollbar":
										{
											"children":
											{
												"bar":
												{
													"data":
													{
														"color_foreground_hover":
														{
															"r": 0,
															"b": 0,
															"a": 255,
															"g": 0
														},
														"color_icon_disabled":
														{
															"r": 255,
															"b": 255,
															"a": 255,
															"g": 255
														},
														"color":
														{
															"r": 0,
															"b": 128,
															"a": 255,
															"g": 128
														},
														"color_foreground_disabled":
														{
															"r": 255,
															"b": 255,
															"a": 255,
															"g": 255
														},
														"color_hover":
														{
															"r": 150,
															"b": 150,
															"a": 255,
															"g": 150
														},
														"color_icon":
														{
															"r": 255,
															"b": 255,
															"a": 255,
															"g": 255
														},
														"color_foreground":
														{
															"r": 255,
															"b": 255,
															"a": 255,
															"g": 255
														},
														"color_shadow":
														{
															"r": 40,
															"b": 40,
															"a": 255,
															"g": 40
														},
														"color_disabled":
														{
															"r": 100,
															"b": 100,
															"a": 255,
															"g": 100
														},
														"color_icon_hover":
														{
															"r": 255,
															"b": 255,
															"a": 255,
															"g": 255
														}
													}
												},
												"button":
												{
													"data":
													{
														"color_foreground_hover":
														{
															"r": 0,
															"b": 0,
															"a": 255,
															"g": 0
														},
														"color_icon_disabled":
														{
															"r": 255,
															"b": 255,
															"a": 255,
															"g": 255
														},
														"color":
														{
															"r": 0,
															"b": 128,
															"a": 255,
															"g": 128
														},
														"color_foreground_disabled":
														{
															"r": 255,
															"b": 255,
															"a": 255,
															"g": 255
														},
														"color_hover":
														{
															"r": 150,
															"b": 150,
															"a": 255,
															"g": 150
														},
														"color_icon":
														{
															"r": 255,
															"b": 255,
															"a": 255,
															"g": 255
														},
														"color_foreground":
														{
															"r": 255,
															"b": 255,
															"a": 255,
															"g": 255
														},
														"color_shadow":
														{
															"r": 40,
															"b": 40,
															"a": 255,
															"g": 40
														},
														"color_disabled":
														{
															"r": 100,
															"b": 100,
															"a": 255,
															"g": 100
														},
														"color_icon_hover":
														{
															"r": 255,
															"b": 255,
															"a": 255,
															"g": 255
														}
													}
												}
											}
										}
									}
								},
								"button":
								{
									"data":
									{
										"color_foreground_hover":
										{
											"r": 0,
											"b": 0,
											"a": 255,
											"g": 0
										},
										"color_icon_disabled":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color":
										{
											"r": 0,
											"b": 128,
											"a": 255,
											"g": 128
										},
										"color_foreground_disabled":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_hover":
										{
											"r": 150,
											"b": 150,
											"a": 255,
											"g": 150
										},
										"color_icon":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_foreground":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_shadow":
										{
											"r": 40,
											"b": 40,
											"a": 255,
											"g": 40
										},
										"color_disabled":
										{
											"r": 100,
											"b": 100,
											"a": 255,
											"g": 100
										},
										"color_icon_hover":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										}
									}
								}
							}
						},
						"header":
						{
							"data":
							{
								"color_foreground":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								},
								"color_shadow":
								{
									"r": 40,
									"b": 40,
									"a": 255,
									"g": 40
								},
								"color":
								{
									"r": 0,
									"b": 0,
									"a": 255,
									"g": 100
								}
							}
						},
						"list":
						{
							"children":
							{
								"button":
								{
									"data":
									{
										"color_foreground_hover":
										{
											"r": 0,
											"b": 0,
											"a": 255,
											"g": 0
										},
										"color_icon_disabled":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color":
										{
											"r": 0,
											"b": 128,
											"a": 255,
											"g": 128
										},
										"color_foreground_disabled":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_hover":
										{
											"r": 150,
											"b": 150,
											"a": 255,
											"g": 150
										},
										"color_icon":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_foreground":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_shadow":
										{
											"r": 40,
											"b": 40,
											"a": 255,
											"g": 40
										},
										"color_disabled":
										{
											"r": 100,
											"b": 100,
											"a": 255,
											"g": 100
										},
										"color_icon_hover":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										}
									}
								},
								"scrollbar":
								{
									"children":
									{
										"bar":
										{
											"data":
											{
												"color_foreground_hover":
												{
													"r": 0,
													"b": 0,
													"a": 255,
													"g": 0
												},
												"color_icon_disabled":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color":
												{
													"r": 0,
													"b": 128,
													"a": 255,
													"g": 128
												},
												"color_foreground_disabled":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color_hover":
												{
													"r": 150,
													"b": 150,
													"a": 255,
													"g": 150
												},
												"color_icon":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color_foreground":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color_shadow":
												{
													"r": 40,
													"b": 40,
													"a": 255,
													"g": 40
												},
												"color_disabled":
												{
													"r": 100,
													"b": 100,
													"a": 255,
													"g": 100
												},
												"color_icon_hover":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												}
											}
										},
										"button":
										{
											"data":
											{
												"color_foreground_hover":
												{
													"r": 0,
													"b": 0,
													"a": 255,
													"g": 0
												},
												"color_icon_disabled":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color":
												{
													"r": 0,
													"b": 128,
													"a": 255,
													"g": 128
												},
												"color_foreground_disabled":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color_hover":
												{
													"r": 150,
													"b": 150,
													"a": 255,
													"g": 150
												},
												"color_icon":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color_foreground":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color_shadow":
												{
													"r": 40,
													"b": 40,
													"a": 255,
													"g": 40
												},
												"color_disabled":
												{
													"r": 100,
													"b": 100,
													"a": 255,
													"g": 100
												},
												"color_icon_hover":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												}
											}
										}
									}
								}
							}
						},
						"sidebutton":
						{
							"data":
							{
								"color_foreground_hover":
								{
									"r": 0,
									"b": 0,
									"a": 255,
									"g": 0
								},
								"color_icon_disabled":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								},
								"color":
								{
									"r": 0,
									"b": 128,
									"a": 255,
									"g": 128
								},
								"color_foreground_disabled":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								},
								"color_hover":
								{
									"r": 150,
									"b": 150,
									"a": 255,
									"g": 150
								},
								"color_icon":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								},
								"color_foreground":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								},
								"color_shadow":
								{
									"r": 40,
									"b": 40,
									"a": 255,
									"g": 40
								},
								"color_disabled":
								{
									"r": 100,
									"b": 100,
									"a": 255,
									"g": 100
								},
								"color_icon_hover":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								}
							}
						}
					}
				},
				"player":
				{
					"children":
					{
						"header":
						{
							"data":
							{
								"color_foreground":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								},
								"color_shadow":
								{
									"r": 40,
									"b": 40,
									"a": 255,
									"g": 40
								},
								"color":
								{
									"r": 0,
									"b": 0,
									"a": 255,
									"g": 100
								}
							}
						},
						"button":
						{
							"data":
							{
								"color_foreground_hover":
								{
									"r": 0,
									"b": 0,
									"a": 255,
									"g": 0
								},
								"color_icon_disabled":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								},
								"color":
								{
									"r": 0,
									"b": 128,
									"a": 255,
									"g": 128
								},
								"color_foreground_disabled":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								},
								"color_hover":
								{
									"r": 150,
									"b": 150,
									"a": 255,
									"g": 150
								},
								"color_icon":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								},
								"color_foreground":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								},
								"color_shadow":
								{
									"r": 40,
									"b": 40,
									"a": 255,
									"g": 40
								},
								"color_disabled":
								{
									"r": 100,
									"b": 100,
									"a": 255,
									"g": 100
								},
								"color_icon_hover":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								}
							}
						},
						"controls":
						{
							"children":
							{
								"button":
								{
									"data":
									{
										"color_foreground_hover":
										{
											"r": 0,
											"b": 0,
											"a": 255,
											"g": 0
										},
										"color_icon_disabled":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color":
										{
											"r": 0,
											"b": 128,
											"a": 255,
											"g": 128
										},
										"color_foreground_disabled":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_hover":
										{
											"r": 150,
											"b": 150,
											"a": 255,
											"g": 150
										},
										"color_icon":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_foreground":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_shadow":
										{
											"r": 40,
											"b": 40,
											"a": 255,
											"g": 40
										},
										"color_disabled":
										{
											"r": 100,
											"b": 100,
											"a": 255,
											"g": 100
										},
										"color_icon_hover":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										}
									}
								},
								"progressbar":
								{
									"data":
									{
										"color_foreground_hover":
										{
											"r": 0,
											"b": 0,
											"a": 255,
											"g": 0
										},
										"color_icon_disabled":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color":
										{
											"r": 0,
											"b": 128,
											"a": 255,
											"g": 128
										},
										"color_foreground_disabled":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_hover":
										{
											"r": 150,
											"b": 150,
											"a": 255,
											"g": 150
										},
										"color_icon":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_foreground":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										},
										"color_shadow":
										{
											"r": 40,
											"b": 40,
											"a": 255,
											"g": 40
										},
										"color_disabled":
										{
											"r": 100,
											"b": 100,
											"a": 255,
											"g": 100
										},
										"color_icon_hover":
										{
											"r": 255,
											"b": 255,
											"a": 255,
											"g": 255
										}
									}
								}
							}
						},
						"spectrum":
						{
							"children":
							{
								"error":
								{
									"children":
									{
										"textbox":
										{
											"data":
											{
												"color_foreground":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color_shadow":
												{
													"r": 40,
													"b": 40,
													"a": 255,
													"g": 40
												},
												"color":
												{
													"r": 128,
													"b": 0,
													"a": 255,
													"g": 32
												}
											},
											"children":
											{
												"scrollbar":
												{
													"children":
													{
														"bar":
														{
															"data":
															{
																"color_foreground_hover":
																{
																	"r": 0,
																	"b": 0,
																	"a": 255,
																	"g": 0
																},
																"color_icon_disabled":
																{
																	"r": 255,
																	"b": 255,
																	"a": 255,
																	"g": 255
																},
																"color":
																{
																	"r": 0,
																	"b": 128,
																	"a": 255,
																	"g": 128
																},
																"color_foreground_disabled":
																{
																	"r": 255,
																	"b": 255,
																	"a": 255,
																	"g": 255
																},
																"color_hover":
																{
																	"r": 150,
																	"b": 150,
																	"a": 255,
																	"g": 150
																},
																"color_icon":
																{
																	"r": 255,
																	"b": 255,
																	"a": 255,
																	"g": 255
																},
																"color_foreground":
																{
																	"r": 255,
																	"b": 255,
																	"a": 255,
																	"g": 255
																},
																"color_shadow":
																{
																	"r": 40,
																	"b": 40,
																	"a": 255,
																	"g": 40
																},
																"color_disabled":
																{
																	"r": 100,
																	"b": 100,
																	"a": 255,
																	"g": 100
																},
																"color_icon_hover":
																{
																	"r": 255,
																	"b": 255,
																	"a": 255,
																	"g": 255
																}
															}
														},
														"button":
														{
															"data":
															{
																"color_foreground_hover":
																{
																	"r": 0,
																	"b": 0,
																	"a": 255,
																	"g": 0
																},
																"color_icon_disabled":
																{
																	"r": 255,
																	"b": 255,
																	"a": 255,
																	"g": 255
																},
																"color":
																{
																	"r": 0,
																	"b": 128,
																	"a": 255,
																	"g": 128
																},
																"color_foreground_disabled":
																{
																	"r": 255,
																	"b": 255,
																	"a": 255,
																	"g": 255
																},
																"color_hover":
																{
																	"r": 150,
																	"b": 150,
																	"a": 255,
																	"g": 150
																},
																"color_icon":
																{
																	"r": 255,
																	"b": 255,
																	"a": 255,
																	"g": 255
																},
																"color_foreground":
																{
																	"r": 255,
																	"b": 255,
																	"a": 255,
																	"g": 255
																},
																"color_shadow":
																{
																	"r": 40,
																	"b": 40,
																	"a": 255,
																	"g": 40
																},
																"color_disabled":
																{
																	"r": 100,
																	"b": 100,
																	"a": 255,
																	"g": 100
																},
																"color_icon_hover":
																{
																	"r": 255,
																	"b": 255,
																	"a": 255,
																	"g": 255
																}
															}
														}
													}
												}
											}
										},
										"button":
										{
											"data":
											{
												"color_foreground_hover":
												{
													"r": 0,
													"b": 0,
													"a": 255,
													"g": 0
												},
												"color_icon_disabled":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color":
												{
													"r": 0,
													"b": 128,
													"a": 255,
													"g": 128
												},
												"color_foreground_disabled":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color_hover":
												{
													"r": 150,
													"b": 150,
													"a": 255,
													"g": 150
												},
												"color_icon":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color_foreground":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												},
												"color_shadow":
												{
													"r": 40,
													"b": 40,
													"a": 255,
													"g": 40
												},
												"color_disabled":
												{
													"r": 100,
													"b": 100,
													"a": 255,
													"g": 100
												},
												"color_icon_hover":
												{
													"r": 255,
													"b": 255,
													"a": 255,
													"g": 255
												}
											}
										}
									}
								}
							},
							"data":
							{
								"color_shadow":
								{
									"r": 40,
									"b": 40,
									"a": 255,
									"g": 40
								},
								"color_foreground":
								{
									"r": 192,
									"b": 0,
									"a": 255,
									"g": 0
								},
								"color":
								{
									"r": 64,
									"b": 0,
									"a": 255,
									"g": 32
								},
								"color_icon":
								{
									"r": 255,
									"b": 255,
									"a": 255,
									"g": 255
								}
							}
						}
					}
				}
			},
			"data":
			{
				"color":
				{
					"r": 0,
					"b": 64,
					"a": 255,
					"g": 0
				}
			}
		}
	},
	"data":
	{
		"color_border":
		{
			"r": 0,
			"b": 128,
			"a": 255,
			"g": 64
		},
		"color_cursor":
		{
			"r": 255,
			"b": 255,
			"a": 255,
			"g": 255
		}
	}
}
]]

LIB._default = nil
function LIB.GetDefaultSkin()
	if LIB._default and LIB._default.data then
		return table.Copy(LIB._default)
	end

	LIB._default = StreamRadioLib.JSON.Decode(_default_json or "") or {}
	if not LIB._default.data then
		LIB._default = nil
		error("Default skin is corrupted!")
		return nil
	end

	return table.Copy(LIB._default)
end

return true


--lua/streamradio_core/models/csgo_italy_radio.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- CS:GO Wooden Oldschool Radio
RADIOMDL.model = "models/props/cs_italy/radio_wooden.mdl"

RADIOMDL.SpawnAng = Angle(0, 0, 0)
RADIOMDL.SpawnFlatOnWall = true
RADIOMDL.SoundPosOffset = Vector(4.3, 0, 10.6)
RADIOMDL.SoundAngOffset = Angle(0, 0, 0)

RADIOMDL.DisplayAngles = Angle(0, 90, 90)

                              --      F,     R,    U
RADIOMDL.DisplayOffset    = Vector(4.80, -2.53, 5.50) -- Top Left
RADIOMDL.DisplayOffsetEnd = Vector(4.80,  2.65, 0.50) -- Bottom Right

RADIOMDL.DisplayWidth = 450
RADIOMDL.DisplayHeight, RADIOMDL.DisplayScale = RADIOMDL:GetDisplayHeight(RADIOMDL.DisplayOffset, RADIOMDL.DisplayOffsetEnd, RADIOMDL.DisplayWidth)


RADIOMDL.FontSizes = {
--  Name 	= Size,	Weight, Parentname
	Header	= {25,	1000},
	Small	= {18,	700},
	Default	= {23,	700},
	Tooltip	= {23,	800},
	Big		= {25,	700},
	Button	= {20,	700},
}

function RADIOMDL:SetupGUI(ent, gui_controller, mainpanel)
	gui_controller:SetPos(0, 0)
	gui_controller:SetSize(self.DisplayWidth, self.DisplayHeight)

	mainpanel:SetSize(gui_controller:GetClientSize())

	local modelsetup = {}
	if CLIENT then
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/text", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/pretext", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/controls/progressbar/label", "font", self.Fonts.Small)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "font", self.Fonts.Button)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/volume/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "font", self.Fonts.Button)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "font", self.Fonts.Button)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "tooltip", "font", self.Fonts.Tooltip)
	end

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header", "sizeh", 50)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "sizeh", 50)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists", "gridsize", {x = 1, y = 7})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview", "gridsize", {x = 1, y = 7})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/sidebutton", "sizew", 50)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox/scrollbar", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "sizeh", 25)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "sizew", 50)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "sizew", 50)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "cornersize", 16)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "borderwidth", 16)

	local shadow = 3
	local padding = 2
	local margin = 2

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "shadowwidth", shadow)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "shadowwidth", shadow)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "padding", padding)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "padding", padding)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "margin", margin)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "margin", margin)

	gui_controller:SetModelSetup(modelsetup)

	mainpanel:ForEachChildRecursive(function(panel, child)
		if child.SetShadowWidth and child:GetShadowWidth() == 5 then
			child:SetShadowWidth(shadow)
		end

		if child.SetPadding and child:GetPadding() == 5 then
			child:SetPadding(padding)
		end

		if child.SetMargin and child:GetMargin() == 5 then
			child:SetMargin(margin)
		end
	end)
end

return true


--lua/streamradio_core/models/fallout3_jukebox.lua:
return gluapack()()
--lua/streamradio_core/models/hl2_speaker.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- HL2 Industrial Speaker
RADIOMDL.model = "models/props_wasteland/speakercluster01a.mdl"

RADIOMDL.NoDisplay = true
RADIOMDL.SpawnAng = Angle( -90, 0, 0 )
RADIOMDL.SpawnFlatOnWall = false
RADIOMDL.SpawnAtOrigin = false

return true


--lua/streamradio_core/models/portal_turret.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Portal 1 Turret
RADIOMDL.model = "models/props/turret_01.mdl"

RADIOMDL.NoDisplay = true
RADIOMDL.SpawnAng = Angle( 0, 0, 0 )
RADIOMDL.SpawnFlatOnWall = false
RADIOMDL.SoundPosOffset = Vector( 5, 0, 37 )
RADIOMDL.SoundAngOffset = Angle( 0, 0, 0 )

RADIOMDL.WingCloseTime = 0.371
RADIOMDL.WingOpenTime = 0.319
RADIOMDL.WingSpan = 8

RADIOMDL.WingCloseSound = "NPC_FloorTurret.Retire"
RADIOMDL.WingOpenSound = "NPC_FloorTurret.Deploy"
RADIOMDL.WingSpawnSound = "NPC_FloorTurret.TalkActive"

function RADIOMDL:Initialize(ent)
	if SERVER then return end

	ent:EmitSound(self.WingSpawnSound)

	self.RightWingDir = 1
	self.LeftWingDir = 1

	self.RightSwapTime = CurTime()
	self.LeftSwapTime = CurTime()

	self.WingOpened = false
	self.WingClosed = true
	self.PixVis = util.GetPixelVisibleHandle()
	self.EyeColor = Color(0, 128, 255)
	self.EyeColorDyn = Color(64, 0, 0)
	self.EyeColorLoading = Color(255, 255, 0)
	self.EyeColorError = Color(255, 128, 0)

	self._State = 0

	self:CloseWings(true)
end

function RADIOMDL:AnimReset(ent)
	if SERVER then return end

	self.RightWingDir = 1
	self.LeftWingDir = 1

	self.RightSwapTime = CurTime()
	self.LeftSwapTime = CurTime()

	self.EyeColor = Color(0, 128, 255)

	self:CloseWings(true)
end

function RADIOMDL:OnSearch(ent, stream)
	if SERVER then return end

	self.EyeColor = self.EyeColorLoading
	self:CloseWings()
end

function RADIOMDL:WhileLoading(ent)
	if SERVER then return end

	self.EyeColor = self.EyeColorLoading
	self:CloseWings()
end

function RADIOMDL:WhileError(ent)
	if SERVER then return end

	self.EyeColor = self.EyeColorError
	self:CloseWings()
end

function RADIOMDL:OnPlay(ent, stream)
	if SERVER then return end

	self.RightWingDir = 1
	self.LeftWingDir = 1

	self.RightSwapTime = CurTime()
	self.LeftSwapTime = CurTime()

	self.EyeColor = self.EyeColorDyn
	self:OpenWings()
end

function RADIOMDL:OnError(ent, stream)
	if SERVER then return end

	self.RightWingDir = 1
	self.LeftWingDir = 1

	self.RightSwapTime = CurTime()
	self.LeftSwapTime = CurTime()

	self.EyeColor = self.EyeColorError

	self:CloseWings()
end

function RADIOMDL:OnStop(ent, stream)
	if SERVER then return end

	self.RightWingDir = 1
	self.LeftWingDir = 1

	self.RightSwapTime = CurTime()
	self.LeftSwapTime = CurTime()

	self.EyeColor = Color(0, 128, 255)

	self:CloseWings()
	self._State = 10
end

function RADIOMDL:_StateCloseWings(ent)
	local RightWing = ent:LookupBone( "RT_Wing" ) or 0
	local LeftWing = ent:LookupBone( "LFT_Wing" ) or 0

	local RPos = math.Clamp(self.RightWing or 0, 0, 1)
	local LPos = math.Clamp(self.LeftWing or 0, 0, 1)

	if RPos <= 0 and LPos <= 0 then
		self.WingOpened = false
		self.WingClosed = true
		self._State = 0
		return true
	end

	ent:ManipulateBonePosition( RightWing, Vector( RPos * self.WingSpan, 0, 0 ) )
	ent:ManipulateBonePosition( LeftWing, Vector( -LPos * self.WingSpan, 0, 0 ) )

	self.RightWing = math.max(RPos - self.LastTickTime / self.WingCloseTime, 0)
	self.LeftWing = math.max(LPos - self.LastTickTime / self.WingCloseTime, 0)
end

function RADIOMDL:_StateOpenWings(ent)
	local RightWing = ent:LookupBone( "RT_Wing" ) or 0
	local LeftWing = ent:LookupBone( "LFT_Wing" ) or 0

	local RPos = math.Clamp(self.RightWing or 0, 0, 0.5)
	local LPos = math.Clamp(self.LeftWing or 0, 0, 0.5)

	if RPos >= 0.5 and LPos >= 0.5 then
		self.WingClosed = false
		self.WingOpened = true
		self._State = 0
		return true
	end

	ent:ManipulateBonePosition( RightWing, Vector( RPos * self.WingSpan, 0, 0 ) )
	ent:ManipulateBonePosition( LeftWing, Vector( -LPos * self.WingSpan, 0, 0 ) )

	self.RightWing = math.min(RPos + self.LastTickTime / self.WingOpenTime / 2, 0.5)
	self.LeftWing = math.min(LPos + self.LastTickTime / self.WingOpenTime / 2, 0.5)
end

function RADIOMDL:Think(ent)
	local now = CurTime()

	self.LastTickTime = now - (self.LastTick or now)
	self.LastTick = now

	if self._State == 10 then
		ent:EmitSound(self.WingCloseSound)
		self._State = 1
	end

	if self._State == 1 then
		self:_StateCloseWings(ent)
		return
	end

	if self._State == 20 then
		ent:EmitSound(self.WingOpenSound)
		self._State = 2
	end

	if self._State == 2 then
		self:_StateOpenWings(ent)
		return
	end
end

local g_mat_glow = Material("sprites/light_glow02_add_noz")
local g_mat_bg = Material("debug/debugvertexcolor")
local g_mat_bg2 = Material("sprites/light_glow02_add")
local g_glow_pos = Vector(12.5, 0, 36.75)

function RADIOMDL:Draw(ent)
	local glowpos = ent:LocalToWorld(g_glow_pos)
	local offset = 3

	local quadpos1 = ent:LocalToWorld(g_glow_pos + Vector(-0.30,  offset,  offset))
	local quadpos2 = ent:LocalToWorld(g_glow_pos + Vector(-0.30,  offset, -offset))
	local quadpos3 = ent:LocalToWorld(g_glow_pos + Vector(-0.30, -offset, -offset))
	local quadpos4 = ent:LocalToWorld(g_glow_pos + Vector(-0.30, -offset,  offset))

	render.SetMaterial(g_mat_bg)
	render.DrawQuad(
		quadpos1,
		quadpos2,
		quadpos3,
		quadpos4,
		color_black
	)

	render.SetMaterial(g_mat_bg2)
	render.DrawQuad(
		quadpos1,
		quadpos2,
		quadpos3,
		quadpos4,
		Color(self.EyeColor.r > 0 and 255 or 0, self.EyeColor.g, self.EyeColor.b)
	)

	local Visibile = util.PixelVisible(glowpos, 3, self.PixVis)

	if not Visibile then return end
	if Visibile < 0.50 then return end

	render.SetMaterial(g_mat_glow)
	render.DrawSprite(glowpos, 8, 8, self.EyeColor)
end

function RADIOMDL:CloseWings(nosound)
	if self._State == 1 then
		return
	end

	if self._State == 10 then
		return
	end

	if self.WingClosed then
		return
	end

	self.WingOpened = false
	self.WingClosed = false

	self._State = nosound and 1 or 10
end

function RADIOMDL:OpenWings(nosound)
	if self._State == 2 then
		return
	end

	if self._State == 20 then
		return
	end

	if self.WingOpened then
		return
	end

	self.WingClosed = false
	self.WingOpened = false

	self._State = nosound and 2 or 20
end

RADIOMDL.SpeakerMinFRQ = 20
RADIOMDL.SpeakerMaxFRQ = 3000
RADIOMDL.SpeakerFRQResolution = 12

function RADIOMDL:Speaker(ent, speakerlevel)
	if SERVER then return end

	local now = CurTime()
	self.SL_LastTickTime = now - (self.SL_LastTick or now)
	self.SL_LastTick = now

	if not speakerlevel then
		self:CloseWings(true)
		return
	end

	if not self.WingOpened then
		self:OpenWings(true)
		return
	end

	self.EyeColor = self.EyeColorDyn

	speakerlevel = speakerlevel ^ 2
	speakerlevel = math.Clamp(speakerlevel * 35, 0, 1)

	local RightSwapTime = self.RightSwapTime or 0
	local LeftSwapTime = self.LeftSwapTime or 0
	local SwappedTime = self.SwappedTime or 0

	if speakerlevel >= 0.85 then
		if not self.Swapped then
			if (now - RightSwapTime) > 0.25 then
				self.RightWingDir = ( self.RightWingDir or 1 ) * -1
				self.RightSwapTime = now
				self.Swapped = true
			end
		end

		if not self.Swapped then
			if (now - LeftSwapTime) > 0.25 then
				self.LeftWingDir = ( self.LeftWingDir or 1 ) * -1
				self.LeftSwapTime = now
				self.Swapped = true
			end
		end
	else
		if self.Swapped then
			if (now - SwappedTime) > 0.25 then
				self.SwappedTime = now
				self.Swapped = false
			end
		end
	end

	local RightWing = ent:LookupBone( "RT_Wing" ) or 0
	local LeftWing = ent:LookupBone( "LFT_Wing" ) or 0

	local RPos = math.Clamp(self.RightWing or 0, 0.25, 1)
	local LPos = math.Clamp(self.LeftWing or 0, 0.25, 1)

	ent:ManipulateBonePosition( RightWing, Vector( RPos * self.WingSpan, 0, 0 ) )
	ent:ManipulateBonePosition( LeftWing, Vector( -LPos * self.WingSpan, 0, 0 ) )

	local movelevel = speakerlevel * self.SL_LastTickTime * 3

	self.RightWing = RPos + (self.RightWingDir or 1) * movelevel
	self.LeftWing = LPos + (self.LeftWingDir or 1) * movelevel

	if self.RightWing >= 1 then
		self.RightWingDir = -1
	end

	if self.RightWing <= 0.25 then
		self.RightWingDir = 1
	end

	if self.LeftWing >= 1 then
		self.LeftWingDir = -1
	end

	if self.LeftWing <= 0.25 then
		self.LeftWingDir = 1
	end
end

function RADIOMDL:SoundLevel(ent, soundlevel)
	if SERVER then return end

	soundlevel = soundlevel or 0
	if soundlevel <= 0 then
		soundlevel = 0
	else
		soundlevel = soundlevel * 100000
		soundlevel = math.log10(soundlevel) / 5
		soundlevel = soundlevel ^ 20 * 1.1
	end

	soundlevel = math.Clamp( soundlevel, 0, 1 )

	self.EyeColorDyn.b = 0
	self.EyeColorDyn.g = 0
	self.EyeColorDyn.r = math.floor(31 + 224 * soundlevel)
end

return true


--lua/streamradio_core/classes/base_listener.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/label_fade.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/label_fade.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local BASE = CLASS:GetBaseClass()

function CLASS:Create()
	BASE.Create(self)

	self.Clickable = false

	if CLIENT then
		self.TextData.FadeTime = 1
		self.TextData.StayTime = 10
		self.TextData.TextIndex = 0

		self.TextData = self.TextData + function(this, k, v)
			if k == "FadeTime" then
				self:Reset()
			end

			if k == "StayTime" then
				self:Reset()
			end

			if k == "TextIndex" then
				self:SwitchText()
			end
		end

		self:StartFastThink()
	end

	self.TextList = {}
	self:SetSkinAble(false)

	self:Reset()
	self:SwitchText()
end

function CLASS:SwitchText()
	if SERVER then return end

	local textlist = self.TextList or {}
	local count = #textlist

	if count <= 0 then
		count = 1
	end

	local index = self.TextData.TextIndex % count + 1
	self:SetText(textlist[index])
end

function CLASS:CalcTime()
	local textlist = self.TextList or {}
	local count = #textlist

	if count <= 1 then return end

	local thistime = RealTime()
	local oldlt = self._lt or thistime
	self._lt = thistime

	self.TickTime = thistime - oldlt
	self.ObjectTime = self.ObjectTime or 0

	self.ObjectTime = self.ObjectTime + self.TickTime
end

function CLASS:GetIndex()
	if SERVER then return end

	local textlist = self.TextList or {}
	local count = #textlist

	if count <= 0 then
		count = 1
	end

	local time = self.ObjectTime or 0

	local fadetime = self.TextData.FadeTime
	local staytime = self.TextData.StayTime
	local totaltime = fadetime * 2 + staytime

	local index = math.floor(time / totaltime) % count
	return index
end

function CLASS:GetPhase()
	if SERVER then return end

	local time = self.ObjectTime or 0

	local fadetime = self.TextData.FadeTime
	local staytime = self.TextData.StayTime

	local totaltime = fadetime * 2 + staytime

	time = time % totaltime

	local fadeinend = fadetime
	local fadeoutstart = fadeinend + staytime

	if time < fadeinend then
		return math.Clamp(time / fadetime, 0, 1)
	end

	if time >= fadeinend and time < fadeoutstart then
		return 1
	end

	if time >= fadeoutstart and time < totaltime then
		return math.Clamp(1 - (time - fadeoutstart) / fadetime, 0, 1)
	end

	return 0
end

function CLASS:ResetTime()
	self.ObjectTime = self.TextData.FadeTime
end

function CLASS:Reset()
	self.ObjectTime = self.TextData.FadeTime
	self.TextData.TextIndex = 0
	self:SwitchText()
end

function CLASS:ClearList()
	self.TextList = nil
	self:Reset()
end

function CLASS:AddToList(text)
	if SERVER then return end

	self.TextList = self.TextList or {}

	text = tostring(text or "")
	table.insert(self.TextList, text)

	self:SwitchText()
end

function CLASS:SetList(textlist)
	if SERVER then return end

	self.TextList = textlist or {}
	self:SwitchText()
end

function CLASS:ShouldPerformRerender()
	if SERVER then return false end

	local phase = self:GetPhase()
	if phase >= 1 then return false end
	if phase <= 0 then return false end

	return true
end

if CLIENT then
	function CLASS:FastThink()
		self.fastThinkRate = 0.25

		if not self:IsSeen() then return end
		if not self:IsVisible() then return end

		self.fastThinkRate = 0.1

		self:CalcTime()
		self.TextData.TextIndex = self:GetIndex()

		if not self:ShouldPerformRerender() then return end
		self.fastThinkRate = 0

		self:PerformRerender(true)
	end
end

function CLASS:Render()
	local x, y = self:GetRenderPos()
	local w, h = self:GetSize()

	local colText = self:GetTextColor()
	local cR, cG, cB, cA = colText:Unpack()

	local phase = self:GetPhase()
	cA = cA * phase

	local font = self.TextData.Font

	surface.SetFont(font)
	surface.SetTextColor(cR, cG, cB, cA)

	self:DrawText(self.InternalText, x, y, w, h)
end

return true


--lua/streamradio_core/classes/ui/text.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/textview.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local BASE = CLASS:GetBaseClass()

function CLASS:Create()
	BASE.Create(self)

	self.CanHaveLabel = false

	self.TextPanel = self:AddPanelByClassname("text", true)
	self.TextPanel:SetPos(0, 0)
	self.TextPanel:SetAlign(TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	self.TextPanel:SetName("text")
	self.TextPanel:SetNWName("txt")

	self.ScrollBar = self:AddPanelByClassname("scrollbar", true)
	self.ScrollBar:SetName("scrollbar")
	self.ScrollBar:SetNWName("sbar")
	self.ScrollBar:SetSkinIdentifyer("scrollbar")
	self.ScrollBar:Hide()

	self.SkinMap["color_foreground"] = {
		set = "SetTextColor",
		get = "GetTextColor",
	}

	self.TextPanel.OnTextChange = function(pnl)
		if not IsValid(self) then return end
		self:InvalidateLayout()
		self:CallHook("OnTextChange")
	end

	self.TextPanel.OnFontChange = function(pnl)
		if not IsValid(self) then return end
		self:InvalidateLayout()
		self:CallHook("OnFontChange")
	end

	self.TextPanel.OnAlignChange = function(pnl)
		if not IsValid(self) then return end
		self:InvalidateLayout()
		self:CallHook("OnAlignChange")
	end

	self.TextPanel.OnBuildLines = function(pnl)
		if SERVER then return end
		if not IsValid(self.ScrollBar) then return end

		local lines = self.TextPanel:GetVisibleLines()
		local count = self.TextPanel:GetLineCount() - #lines
		local scroll = self.TextPanel:GetStartLine()

		self.ScrollBar:SetMaxScroll(count)
		self.ScrollBar:SetScroll(scroll - 1)

		self:InvalidateLayout()
	end

	self.ScrollBar.OnScroll = function(pnl, value)
		if SERVER then return end
		if not IsValid(self.TextPanel) then return end
		self.TextPanel:SetStartLine(value + 1)
	end
end

function CLASS:PerformLayout(...)
	BASE.PerformLayout(self, ...)

	local text_panel = self.TextPanel
	local scrollbar = self.ScrollBar

	if not IsValid(text_panel) then
		return
	end

	local w, h = self:GetClientSize()
	local hasscrollbar = IsValid(scrollbar) and scrollbar:IsScrollAble()

	if not hasscrollbar then
		text_panel:SetSize(w, h)

		if IsValid(scrollbar) then
			scrollbar:Hide()
		end

		return
	end

	local barwidth = scrollbar:GetWidth()
	local margin = self:GetMargin()

	text_panel:SetSize(w - margin - barwidth, h)

	scrollbar:SetHeight(h)
	scrollbar:SetPos(w - barwidth, 0)

	scrollbar:SetHorizontal(false)
	scrollbar:Show()
end

function CLASS:GetTextAlign(...)
	return self:GetAlign(...)
end

function CLASS:SetTextAlign(...)
	return self:SetAlign(...)
end

function CLASS:GetAlign(...)
	return self.TextPanel:GetAlign(...)
end

function CLASS:SetAlign(...)
	return self.TextPanel:SetAlign(...)
end

function CLASS:SetText(...)
	return self.TextPanel:SetText(...)
end

function CLASS:GetText(...)
	return self.TextPanel:GetText(...)
end

function CLASS:SetFont(...)
	return self.TextPanel:SetFont(...)
end

function CLASS:GetFont(...)
	return self.TextPanel:GetFont(...)
end

function CLASS:SetTextColor(...)
	return self.TextPanel:SetColor(...)
end

function CLASS:GetTextColor(...)
	return self.TextPanel:GetColor(...)
end

function CLASS:OnModelSetup(setup)
	BASE.OnModelSetup(self, setup)

	if setup.font then
		self:SetFont(setup.font)
	end
end

return true


--lua/streamradio_core/classes/ui/radio/gui_player.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local LIBNetwork = StreamRadioLib.Network
local LIBError = StreamRadioLib.Error
local LIBUtil = StreamRadioLib.Util
local LIBError = StreamRadioLib.Error

local emptyTableSafe = LIBUtil.EmptyTableSafe

local BASE = CLASS:GetBaseClass()

local g_mat_closebutton = StreamRadioLib.GetPNGIcon("door_in")

function CLASS:Create()
	BASE.Create(self)

	self.HeaderPanel = self:AddPanelByClassname("shadow_panel", true)
	self.HeaderPanel:SetSize(1, 40)
	self.HeaderPanel:SetName("header")
	self.HeaderPanel:SetNWName("hdr")
	self.HeaderPanel:SetSkinIdentifyer("header")

	self.HeaderText = self.HeaderPanel:CreateText("label_fade")
	self.HeaderPanel:SetAlign(TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

	self.SpectrumPanel = self:AddPanelByClassname("radio/gui_player_spectrum", true)
	self.SpectrumPanel:SetSize(1, 1)
	self.SpectrumPanel:SetName("spectrum")
	self.SpectrumPanel:SetNWName("spc")
	self.SpectrumPanel:SetSkinIdentifyer("spectrum")

	self.VolumePanel = self.SpectrumPanel:AddPanelByClassname("shadow_panel")
	self.VolumePanel:SetSize(1, 60)
	self.VolumePanel:SetName("volume")
	self.VolumePanel:SetNWName("vol")
	self.VolumePanel:SetSkinIdentifyer("volume")
	self.VolumePanel:SetShadowWidth(0)
	self.VolumePanel:SetColor(Color(128, 128, 128, 160))
	self.VolumePanel.SkinAble = false
	self.VolumePanel:SetZPos(200)
	self.VolumePanel:Close()

	self.VolumeBar = self.VolumePanel:AddPanelByClassname("progressbar", true)
	self.VolumeBar:SetName("progressbar")
	self.VolumeBar:SetNWName("bar")
	self.VolumeBar:SetSkinIdentifyer("bar")
	self.VolumeBar:SetAllowFractionEdit(true)
	self.VolumeBar:SetShadowWidth(0)
	self.VolumeBar:SetColor(Color(0, 0, 0, 200))
	self.VolumeBar:SetTextColor(Color(255, 255, 255, 255))
	self.VolumeBar.SkinAble = false

	self.VolumeBar.FractionChangeText = function(this, v)
		return string.format("Volume: %3i%%", math.Round(v * 100))
	end

	self.VolumeBar.OnFractionChangeEdit = function(this, v)
		if CLIENT then return end
		if not IsValid(self.StreamOBJ) then return end
		self.StreamOBJ:SetVolume(v)
	end

	self.VolumeBar:SetSize(1, 1)

	self.ControlPanel = self:AddPanelByClassname("radio/gui_player_controls", true)
	self.ControlPanel:SetSize(1, 1)
	self.ControlPanel:SetName("controls")
	self.ControlPanel:SetNWName("ctrl")
	self.ControlPanel:SetSkinIdentifyer("controls")

	self.ControlPanel.OnPlaylistBack = function()
		self:CallHook("OnPlaylistBack")
	end

	self.ControlPanel.OnPlaylistForward = function()
		self:CallHook("OnPlaylistForward")
	end

	self.ControlPanel.OnPlaybackLoopModeChange = function(this, newLoopMode)
		self:CallHook("OnPlaybackLoopModeChange", newLoopMode)
	end

	if CLIENT then
		self.Errorbox = self.SpectrumPanel:AddPanelByClassname("radio/gui_errorbox")
		self.Errorbox:SetName("error")
		self.Errorbox:SetNWName("err")
		self.Errorbox:SetSkinIdentifyer("error")

		self.Errorbox.OnRetry = function()
			if not IsValid(self.Errorbox) then
				return
			end

			self.Errorbox:Close()
		end

		self.Errorbox.OnClose = function()
			if not IsValid(self.StreamOBJ) then return end
			if not self.State then return end

			if not self.State.Error then return end
			if self.State.Error == 0 then return end

			self.State.Error = 0
			self:ResetStream()
		end

		self.Errorbox.OnWhitelist = function()
			if not IsValid(self.StreamOBJ) then return end

			StreamRadioLib.Whitelist.QuickWhitelistAdd(self.StreamOBJ:GetURL())
		end

		self.Errorbox:SetZPos(100)
		self.Errorbox:Close()

		if self.Errorbox.CloseButton then
			self.Errorbox.CloseButton:Remove()
			self.Errorbox.CloseButton = nil
		end
	end

	self.CloseButton = self:AddPanelByClassname("button", true)
	self.CloseButton:SetName("backbutton")
	self.CloseButton:SetNWName("bk")
	self.CloseButton:SetSkinIdentifyer("button")
	self.CloseButton:SetIcon(g_mat_closebutton)
	self.CloseButton:SetAlign(TEXT_ALIGN_RIGHT)
	self.CloseButton:SetTextAlign(TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

	self.CloseButton:SetSize(200, 60)
	self.CloseButton:SetText("Back")
	self.CloseButton.DoClick = function()
		if CLIENT then
			return
		end

		if self.State then
			self.State.Error = 0
		end

		if IsValid(self.StreamOBJ) then
			self.StreamOBJ:Stop()
		end

		self:Close()
	end

	if CLIENT then
		self._textlistBuffer = {}

		self.State = self:CreateListener({
			Error = 0,
		}, function(this, k, v)
			if not IsValid(self.Errorbox) then
				return
			end

			local err = tonumber(v or 0) or 0
			local url = nil

			if IsValid(self.StreamOBJ) then
				url = self.StreamOBJ:GetURL()
			end

			self.Errorbox:SetErrorCode(err, url)
		end)
	end

	if SERVER then
		LIBNetwork.AddNetworkString("streamreset_on_sv")
		LIBNetwork.AddNetworkString("streamreset_on_cl")

		self:NetReceive("streamreset_on_sv", function(this, id, len, ply)
			self:ResetStream()
		end)
	else
		self:NetReceive("streamreset_on_cl", function(this, id, len, ply)
			self:ResetStream(true)
		end)
	end
end

function CLASS:Remove()
	if IsValid(self.StreamOBJ) then
		self.StreamOBJ:RemoveEvent("OnVolumeChange", self:GetID())

		if CLIENT then
			self.StreamOBJ:RemoveEvent("OnConnect", self:GetID())
			self.StreamOBJ:RemoveEvent("OnError", self:GetID())
			self.StreamOBJ:RemoveEvent("OnSearch", self:GetID())
			self.StreamOBJ:RemoveEvent("OnMute", self:GetID())
		end
	end

	BASE.Remove(self)
end

function CLASS:ResetStream(nosend)
	if not nosend then
		if SERVER then
			self:NetSend("streamreset_on_cl")
		else
			self:NetSend("streamreset_on_sv")
			return
		end
	end

	if not IsValid(self.StreamOBJ) then return end
	self.StreamOBJ:Reconnect()
end

function CLASS:SetStream(stream)
	if self.StreamOBJ == stream then
		return
	end

	self.StreamOBJ = stream

	self:SetFastThinkRate(0)

	if IsValid(self.ControlPanel) then
		self.ControlPanel:SetStream(stream)
	end

	if IsValid(self.SpectrumPanel) then
		self.SpectrumPanel:SetStream(stream)
	end

	if not IsValid(stream) then return end

	stream:SetEvent("OnVolumeChange", self:GetID(), function(this, vol)
		if not IsValid(self) then return end

		if IsValid(self.VolumeBar) then
			self.VolumeBar:SetFraction(vol)
		end

		if IsValid(self.VolumePanel) then
			local volumetimeout = 5

			self.VolumePanel:Show()

			self:TimerOnce("volumebar", volumetimeout, function()
				if not IsValid(self.VolumePanel) then return end
				self.VolumePanel:Hide()
			end)
		end

		self:CallHook("OnVolumeChange", v)
	end)

	if IsValid(self.VolumeBar) then
		self.VolumeBar:SetFraction(stream:GetVolume())
	end

	if CLIENT then
		local updateErrorState = function()
			if not IsValid(self) then return end
			if not self.State then return end

			local err = stream:GetError()

			if err == LIBError.STREAM_OK then
				self.State.Error = LIBError.STREAM_OK
			else
				if IsValid(self.Errorbox) then
					self.Errorbox:SetErrorCode(err, stream:GetURL())
				end

				self.State.Error = err
			end
		end

		stream:SetEvent("OnClose", self:GetID(), updateErrorState)
		stream:SetEvent("OnSearch", self:GetID(), updateErrorState)
		stream:SetEvent("OnConnect", self:GetID(), updateErrorState)
		stream:SetEvent("OnError", self:GetID(), updateErrorState)
		stream:SetEvent("OnMute", self:GetID(), updateErrorState)

		updateErrorState()
	end

	self:UpdateFromStream()
end

function CLASS:GetStream()
	return self.StreamOBJ
end

if CLIENT then
	function CLASS:Think()
		self.thinkRate = 0.5

		if not self:IsSeen() then return end
		if not self:IsVisible() then return end

		self.thinkRate = 0
		self:UpdateFromStream()
	end
end

local function formatInterfaceName(interfaceName, text)
	interfaceName = interfaceName or ""
	text = text or ""

	if text == "" then
		return ""
	end

	if interfaceName == "" then
		return text
	end

	text = string.format("[%s] %s", interfaceName, text)
	return text
end

function CLASS:UpdateHeaderTextFromStream()
	if SERVER then return end

	local stream = self.StreamOBJ
	if not IsValid(stream) then return end

	local headerText = self.HeaderText
	if not IsValid(headerText) then return end

	local textlist = self._textlistBuffer
	if not textlist then return end

	emptyTableSafe(textlist)

	local interfaceName = stream:GetActiveInterfaceName()
	local name = stream:GetStreamName()
	local url = stream:GetURL()

	name = string.Trim(name)
	url = string.Trim(url)

	if url == "" then
		url = "(Unknown URL)"
	end

	if name == url then
		-- Avoid showing the name if it is the URL
		name = ""
	end

	if name ~= "" then
		table.insert(textlist, name)
	end

	if name == "" or not string.find(name, url, 1, true) then
		-- Avoid showing the URL twice

		local urlText = formatInterfaceName(interfaceName, url)
		table.insert(textlist, urlText)
	end

	local metatags = stream:GetMetaTags() or {}

	local remotename = metatags["streamtitle"] or ""
	remotename = string.Trim(remotename)

	remotename = formatInterfaceName(interfaceName, remotename)

	if remotename ~= "" then
		table.insert(textlist, remotename)
	end

	headerText:SetList(textlist)
end

function CLASS:UpdateWhitelistButtonFromStream()
	if SERVER then return end

	local stream = self.StreamOBJ
	if not IsValid(stream) then return end

	local errorbox = self.Errorbox
	if not IsValid(errorbox) then return end

	local isAdmin = LIBUtil.IsAdmin()
	local isOnlineUrl = stream:IsOnlineUrl()
	local isWhitelistError = stream:GetError() == LIBError.STREAM_ERROR_URL_NOT_WHITELISTED
	local showButton = isAdmin and isWhitelistError and isOnlineUrl

	errorbox:SetAdminWhitelistButtonVisible(showButton)
end

function CLASS:UpdateFromStream()
	if SERVER then return end
	if not IsValid(self.StreamOBJ) then return end

	self:UpdateWhitelistButtonFromStream()
	self:UpdateHeaderTextFromStream()
end

function CLASS:PerformLayout(...)
	BASE.PerformLayout(self, ...)

	if not IsValid(self.HeaderPanel) then return end
	if not IsValid(self.CloseButton) then return end
	if not IsValid(self.SpectrumPanel) then return end

	local w, h = self:GetClientSize()
	local margin = self:GetMargin()

	local headerh = self.HeaderPanel:GetHeight()
	local closew, closeh = self.CloseButton:GetSize()

	closew = closeh * 4
	self.CloseButton:SetWidth(closew)

	local closex = w - closew
	local closey = h - closeh

	local spectrumy = headerh + margin

	local spectrumbgw = w
	local spectrumbgh = h - headerh - closeh - margin * 2

	local controlx = 0
	local controly = closey

	local controlw = w - closew - margin
	local controlh = closeh

	local ultrawideminh = closeh * 2 + margin

	if spectrumbgh <= ultrawideminh then
		if IsValid(self.ControlPanel) then
			closew = closeh * (self.ControlPanel.State.PlaylistEnabled and 6 or 4)
			self.CloseButton:SetWidth(closew)
		end

		spectrumbgw = w - closew - margin
		spectrumbgh = h - headerh - margin

		controlx = closex
		controly = spectrumy

		controlw = closew
		controlh = spectrumbgh - closeh - margin
	end

	self.HeaderPanel:SetPos(0, 0)
	self.HeaderPanel:SetWidth(w)

	self.SpectrumPanel:SetPos(0, spectrumy)
	self.SpectrumPanel:SetSize(spectrumbgw, spectrumbgh)

	local spectrumw, spectrumh = self.SpectrumPanel:GetClientSize()

	if IsValid(self.Errorbox) then
		self.Errorbox:SetPos(0, 0)
		self.Errorbox:SetSize(spectrumw, spectrumh)
	end

	if IsValid(self.ControlPanel) then
		self.ControlPanel:SetPos(controlx, controly)
		self.ControlPanel:SetSize(controlw, controlh)
	end

	if IsValid(self.VolumePanel) and IsValid(self.VolumeBar) then
		local headerheight = self.HeaderPanel:GetHeight()
		local volumew = spectrumw * 0.618
		local volumeh = math.Clamp(spectrumh * 0.1, headerheight, headerheight * 2)

		local volumex = (spectrumw - volumew) / 2
		local volumey = spectrumh * 0.95 - volumeh

		self.VolumePanel:SetPos(volumex, volumey)
		self.VolumePanel:SetSize(volumew, volumeh)

		self.VolumeBar:SetPos(0, 0)
		self.VolumeBar:SetSize(self.VolumePanel:GetClientSize())
	end

	self.CloseButton:SetPos(closex, closey)
end

function CLASS:GetHasPlaylist()
	return self._hasplaylist or false
end

function CLASS:SetHasPlaylist(bool)
	self._hasplaylist = bool
end

function CLASS:EnablePlaylist(...)
	if not IsValid(self.ControlPanel) then
		return
	end

	self.ControlPanel:EnablePlaylist(...)
end

function CLASS:IsPlaylistEnabled()
	if not IsValid(self.ControlPanel) then
		return
	end

	return self.ControlPanel:IsPlaylistEnabled()
end

function CLASS:UpdatePlaybackLoopMode(...)
	if not IsValid(self.ControlPanel) then
		return
	end

	self.ControlPanel:UpdatePlaybackLoopMode(...)
end

function CLASS:SetSyncMode(bool)
	self._syncmode = bool or false

	if IsValid(self.CloseButton) then
		self.CloseButton:SetDisabled(bool)
	end

	if IsValid(self.ControlPanel) then
		self.ControlPanel:SetSyncMode(bool)
	end
end

function CLASS:GetSyncMode()
	return self._syncmode or  false
end

return true


--lua/streamradio_core/classes/ui/radio/gui_errorbox.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local LIBError = StreamRadioLib.Error

local BASE = CLASS:GetBaseClass()

local g_mat_help = StreamRadioLib.GetPNGIcon("help")
local g_mat_cross = StreamRadioLib.GetPNGIcon("cross")
local g_mat_arrow_refresh = StreamRadioLib.GetPNGIcon("arrow_refresh")
local g_mat_shield_add = StreamRadioLib.GetPNGIcon("shield_add")

function CLASS:Create()
	BASE.Create(self)

	self.Error = 0
	self.URL = ""

	self.BodyPanelText = self:AddPanelByClassname("textview", true)
	self.BodyPanelText:SetAlign(TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	self.BodyPanelText:SetName("textbox")
	self.BodyPanelText:SetNWName("txt")
	self.BodyPanelText:SetSkinIdentifyer("textbox")

	self.HelpButton = self:AddPanelByClassname("button", true)
	self.HelpButton:SetSize(40, 40)
	self.HelpButton:SetIcon(g_mat_help)
	self.HelpButton:SetDrawAlpha(0.5)
	self.HelpButton:SetTooltip("Help")
	self.HelpButton:SetName("help")
	self.HelpButton:SetNWName("hlp")
	self.HelpButton:SetSkinIdentifyer("button")
	self.HelpButton.DoClick = function()
		self:CallHook("OnHelp")
		if SERVER then return end

		StreamRadioLib.ShowErrorHelp( self.Error, self.URL )
	end

	self.CloseButton = self:AddPanelByClassname("button", true)
	self.CloseButton:SetSize(40, 40)
	self.CloseButton:SetIcon(g_mat_cross)
	self.CloseButton:SetDrawAlpha(0.5)
	self.CloseButton:SetTooltip("Close")
	self.CloseButton:SetName("close")
	self.CloseButton:SetNWName("cls")
	self.CloseButton:SetSkinIdentifyer("button")
	self.CloseButton.DoClick = function()
		self:Close()
		self:CallHook("OnCloseClick")
	end

	self.RetryButton = self:AddPanelByClassname("button", true)
	self.RetryButton:SetSize(40, 40)
	self.RetryButton:SetIcon(g_mat_arrow_refresh)
	self.RetryButton:SetDrawAlpha(0.5)
	self.RetryButton:SetTooltip("Retry")
	self.RetryButton:SetName("retry")
	self.RetryButton:SetNWName("rty")
	self.RetryButton:SetSkinIdentifyer("button")
	self.RetryButton.DoClick = function()
		self:CallHook("OnRetry")
	end

	self.AdminWhitelistButton = self:AddPanelByClassname("button", true)
	self.AdminWhitelistButton:SetSize(40, 40)
	self.AdminWhitelistButton:SetIcon(g_mat_shield_add)
	self.AdminWhitelistButton:SetDrawAlpha(0.5)
	self.AdminWhitelistButton:SetTooltip("Add to quick whitelist (admin only)")
	self.AdminWhitelistButton:SetName("whitelist")
	self.AdminWhitelistButton:SetNWName("wl")
	self.AdminWhitelistButton:SetSkinIdentifyer("button")
	self.AdminWhitelistButton.DoClick = function()
		self:CallHook("OnWhitelist")
	end

	self:SetEvent("OnClose", "HideAdminWhitelistButton", "HideAdminWhitelistButton")

	self.SideButtons = {
		self.CloseButton,
		self.RetryButton,
		self.HelpButton,
		self.AdminWhitelistButton,
	}

	self:HideAdminWhitelistButton()
end

function CLASS:HideAdminWhitelistButton()
	self:SetAdminWhitelistButtonVisible(false)
end

function CLASS:SetAdminWhitelistButtonVisible(visible)
	local adminWhitelistButton = self.AdminWhitelistButton

	if not IsValid(adminWhitelistButton) then
		return
	end

	local oldVisible = adminWhitelistButton.Layout.Visible
	if oldVisible == visible then
		return
	end

	adminWhitelistButton:SetVisible(visible)

	self:InvalidateLayout(true, false)
end

function CLASS:ResetLayout()
	if IsValid(self.BodyPanelText) then
		self.BodyPanelText:SetVisible(true)
	end

	if IsValid(self.HelpButton) then
		self.HelpButton:SetVisible(true)
	end

	self:SetPaintBackground(true)
end

function CLASS:SetPlaylistError(url)
	self:ResetLayout()

	url = tostring(url or "")

	self.Error = LIBError.PLAYLIST_ERROR_INVALID_FILE
	self.URL = url

	local errorInfo = LIBError.GetStreamErrorInfo(self.Error)

	local code = errorInfo.id
	local name = errorInfo.name
	local hasHelpmenu = errorInfo.helpmenu

	local text

	if url ~= "" then
		text = string.format("Error: %i (%s)\n\nCould not open playlist:\n%s\n\nMake sure the file is valid and not Empty\n\nClick the '?' button for more details.", code, name, url)
	else
		text = string.format("Error: %i (%s)\n\nCould not open playlist!\n\nMake sure the file is valid and not Empty\n\nClick the '?' button for more details.", code, name)
	end

	if IsValid(self.BodyPanelText) then
		self.BodyPanelText:SetText(text)
	end

	if IsValid(self.HelpButton) then
		self.HelpButton:SetVisible(hasHelpmenu)
	end

	self:Open()
end

function CLASS:SetSoundKilledError()
	self:ResetLayout()

	self.Error = LIBError.STREAM_SOUND_STOPPED
	self.URL = ""

	if IsValid(self.BodyPanelText) then
		self.BodyPanelText:SetVisible(false)
	end

	if IsValid(self.HelpButton) then
		self.HelpButton:SetVisible(false)
	end

	self:SetPaintBackground(false)
	self:Open()
end

function CLASS:SetErrorCode(err, url)
	err = tonumber(err or 0) or 0
	url = tostring(url or "")

	if err == LIBError.STREAM_SOUND_STOPPED then
		self:SetSoundKilledError()
		return
	end

	if err == LIBError.PLAYLIST_ERROR_INVALID_FILE then
		self:SetSoundKilledError()
		return
	end

	self:ResetLayout()

	self.Error = err
	self.URL = url

	local errorInfo = LIBError.GetStreamErrorInfo(err)

	local code = errorInfo.id
	local name = errorInfo.name
	local description = errorInfo.description or ""
	local hasHelpmenu = errorInfo.helpmenu

	local text

	if url ~= "" then
		text = string.format("Error: %i (%s)\n\nCould not play stream:\n%s\n\n%s\n\nClick the '?' button for more details.", code, name, url, description)
	else
		text = string.format("Error: %i (%s)\n\nCould not play stream!\n\n%s\n\nClick the '?' button for more details.", code, name, description)
	end

	if IsValid(self.BodyPanelText) then
		self.BodyPanelText:SetText(text)
	end

	if IsValid(self.HelpButton) then
		self.HelpButton:SetVisible(hasHelpmenu)
	end

	if err ~= LIBError.STREAM_OK then
		self:Open()
	else
		self:Close()
	end
end

function CLASS:_PerformButtonLayout(buttonx, buttony)
	if not self.SideButtons then return end

	local _, h = self:GetClientSize()
	local buttonw = 0

	for k, v in ipairs(self.SideButtons) do
		if not IsValid(v) then continue end
		if not v.Layout.Visible then continue end

		if buttonw <= 0 then
			buttonw = v:GetWidth()
			break
		end
	end

	local margin = self:GetMargin()

	for k, v in ipairs(self.SideButtons) do
		if not IsValid(v) then continue end
		if not v.Layout.Visible then continue end

		local newbutteny = buttony + (buttonw + margin)
		if newbutteny >= h then
			v:SetPos(0, 0)
			v:SetHeight(0)
			continue
		end

		v:SetPos(buttonx, buttony)
		v:SetSize(buttonw, buttonw)
		buttony = newbutteny
	end

	return buttonw, buttony
end

function CLASS:PerformLayout(...)
	BASE.PerformLayout(self, ...)

	local w, h = self:GetClientSize()

	local margin = self:GetMargin()

	if IsValid(self.BodyPanelText) and self.BodyPanelText.Layout.Visible then
		self.BodyPanelText:SetPos(0, 0)
		self.BodyPanelText:SetSize(w, h)
	end

	self:_PerformButtonLayout(margin, margin)
end

return true


--lua/streamradio_core/client/cl_presets.lua:
return gluapack()()
--lua/streamradio_core/client/cl_vgui_editor.lua:
local StreamRadioLib = StreamRadioLib
local LIBNet = StreamRadioLib.Net

local string = string
local math = math
local table = table
local vgui = vgui
local net = net

local IsValid = IsValid
local unpack = unpack
local Derma_Query = Derma_Query
local Derma_StringRequest = Derma_StringRequest
local isstring = isstring
local pairs = pairs
local ipairs = ipairs
local PANEL = {}

AccessorFunc( PANEL, "m_bUnsaved", "Unsaved" ) -- edited list file Saved?
AccessorFunc( PANEL, "m_bSaving", "Saving" ) -- edited list file Saved?
AccessorFunc( PANEL, "m_strPath", "Path" ) -- List file

local OK_CODES = {
	[StreamRadioLib.EDITOR_ERROR_OK] = true,
	[StreamRadioLib.EDITOR_ERROR_WRITE_OK] = true,
	[StreamRadioLib.EDITOR_ERROR_READ_OK] = true,
	[StreamRadioLib.EDITOR_ERROR_FILES_OK] = true,
	[StreamRadioLib.EDITOR_ERROR_DIR_OK] = true,
	[StreamRadioLib.EDITOR_ERROR_DEL_OK] = true,
	[StreamRadioLib.EDITOR_ERROR_COPY_OK] = true,
	[StreamRadioLib.EDITOR_ERROR_RENAME_OK] = true,
}

local WRITE_ERRORS = {
	[StreamRadioLib.EDITOR_ERROR_WPATH] = true,
	[StreamRadioLib.EDITOR_ERROR_WDATA] = true,
	[StreamRadioLib.EDITOR_ERROR_WVIRTUAL] = true,
	[StreamRadioLib.EDITOR_ERROR_WFORMAT] = true,
	[StreamRadioLib.EDITOR_ERROR_WRITE] = true,
	[StreamRadioLib.EDITOR_ERROR_COMMUNITY_PROTECTED] = true,
	[StreamRadioLib.EDITOR_ERROR_VIRTUAL_PROTECTED] = true,
}

local READ_ERRORS = {
	[StreamRadioLib.EDITOR_ERROR_RPATH] = true,
	[StreamRadioLib.EDITOR_ERROR_RDATA] = true,
	[StreamRadioLib.EDITOR_ERROR_RFORMAT] = true,
	[StreamRadioLib.EDITOR_ERROR_READ] = true,
}

local DIR_ERRORS = {
	[StreamRadioLib.EDITOR_ERROR_DIR_WRITE] = true,
	[StreamRadioLib.EDITOR_ERROR_DIR_EXIST] = true,
}

local COPY_ERRORS = {
	[StreamRadioLib.EDITOR_ERROR_COPY_DIR] = true,
	[StreamRadioLib.EDITOR_ERROR_COPY_EXIST] = true,
	[StreamRadioLib.EDITOR_ERROR_COPY_WRITE] = true,
	[StreamRadioLib.EDITOR_ERROR_COPY_READ] = true,
}

local RENAME_ERRORS = {
	[StreamRadioLib.EDITOR_ERROR_RENAME_DIR] = true,
	[StreamRadioLib.EDITOR_ERROR_RENAME_EXIST] = true,
	[StreamRadioLib.EDITOR_ERROR_RENAME_WRITE] = true,
	[StreamRadioLib.EDITOR_ERROR_RENAME_READ] = true,
}

local function ShowError( errorheader, errortext, this, func, ... )
	if not IsValid(this) then return false end
	if not this:IsVisible() then return false end
	local args = {...}

	Derma_Query( errortext, errorheader, "OK", function( )
		if not IsValid(this) then return end
		if this:IsLoading() then return end
		if not func then return end

		func(this, unpack(args))
	end)

	return true
end

--Ask for save: Opens a confirmation box.
local function AsForSave( this, func, ... )
	if not IsValid(this) then return false end
	if not this:IsVisible() then return false end
	if not func then return false end

	if not this.m_bUnsaved then
		func( this, ... )
		return true
	end

	local args = {...}

	Derma_Query("Are you sure to discard the changes?", "Unsaved playlist!", "Yes", function()
		-- Discard the changes.
		if not IsValid(this) then return end
		if this:IsLoading() then return end

		this:RemoveNewFile()
		func( this, unpack( args ) )
	end, "No")

	-- Don't discard the changes.
	return true
end

local function CreateDir( self, defaultString, func, ... )
	if not IsValid(self) then return false end
	if not self:IsVisible() then return false end

	local args = {...}
	local path = self.m_strPath or ""
	local name = "new_folder"

	defaultString = string.Trim(defaultString or "")

	if not StreamRadioLib.String.IsValidFilepath(defaultString) then
		defaultString = name
	end

	local helpText = [[
Create a new folder
- All invalid characters are fitered out
- Case insensitive, converted to lowercase
]];

	helpText = string.Trim(helpText)

	Derma_StringRequest("New folder", helpText, defaultString, function( strTextOut )
		if not IsValid(self) then return end
		if self:IsLoading() then return end

		strTextOut = StreamRadioLib.String.SanitizeFilename(strTextOut)

		if not StreamRadioLib.String.IsValidFilepath(strTextOut) then
			CreateDir(self, defaultString, func, unpack(args))
			return
		end

		local fullpath = path .. "/" .. strTextOut
		fullpath = string.Trim(fullpath, "/")

		if StreamRadioLib.String.IsVirtualPath(fullpath) then
			local ErrorText = StreamRadioLib.DecodeEditorErrorCode( StreamRadioLib.EDITOR_ERROR_VIRTUAL_PROTECTED )
			ShowError( "Create error!", ErrorText, self, CreateFile, strTextOut, func, unpack( args ) )

			return
		end

		if self.FileItems[strTextOut] then
			local ErrorText = StreamRadioLib.DecodeEditorErrorCode( StreamRadioLib.EDITOR_ERROR_DIR_EXIST )
			ShowError( "Directory error!", ErrorText, self, CreateDir, strTextOut, func, unpack( args ) )

			return
		end

		local created = StreamRadioLib.Editor.CreateDir(fullpath)

		if created and func then
			func( self, unpack( args ) )
		end
	end, nil, "Create folder", "Cancel")

	return true
end

local function AsForDelete( self, func, ... )
	if not IsValid(self) then return false end
	if not self:IsVisible() then return false end
	if not IsValid(self.Files) then return false end

	local line = self.Files:GetSelectedLine( )
	line = self.Files:GetLine( line )
	if not IsValid( line ) then return false end

	local args = {...}
	local path = line.streamradio_path or ""
	local format = line.streamradio_filetype

	if path == "" then return false end
	if not format then return false end

	Derma_Query( "Are you sure to delete this file/folder?", "Delete file!", "Yes", function( )
		-- Delete.
		if not IsValid(self) then return end
		if not IsValid(line) then return end
		if self:IsLoading() then return end

		if path == "" then return end
		if not format then return end

		local removed = StreamRadioLib.Editor.Remove(path, format)

		if removed and func then
			func( self, unpack( args ) )
		end
	end, "No" )

	-- Don't delete.
	return true
end

local function CreateFile( self, defaultString, func, ... )
	if not IsValid(self) then return false end
	if not self:IsVisible() then return false end
	if not func then return false end

	local Default_Format = StreamRadioLib.Filesystem.GetTypeExt(StreamRadioLib.TYPE_DEFAULT)

	local name = "new_playlist." .. Default_Format
	defaultString = string.Trim(defaultString or "")

	if not StreamRadioLib.String.IsValidFilename(defaultString) then
		defaultString = name
	end

	local args = {...}
	local path = self.m_strPath or ""

	local helpText = [[
Create a new playlist
- All invalid characters are fitered out
- Case insensitive, converted to lowercase
- Valid formats are: %s
]]
	helpText = string.format(helpText, StreamRadioLib.VALID_FORMATS_EXTENSIONS_LIST or "")
	helpText = string.Trim(helpText)

	AsForSave(self, function( self, func, args )
		Derma_StringRequest( "New playlist..", helpText, defaultString, function( strTextOut )
			if not IsValid(self) then return end
			if self:IsLoading() then return end

			strTextOut = StreamRadioLib.String.SanitizeFilename(strTextOut)

			if not StreamRadioLib.String.IsValidFilename(strTextOut) then
				CreateFile( self, defaultString, func, unpack( args ) )
				return
			end

			local fullpath = path .. "/" .. strTextOut
			fullpath = string.Trim(fullpath, "/")

			if not StreamRadioLib.Filesystem.GuessType(fullpath) then
				strTextOut = strTextOut .. "." .. Default_Format

				CreateFile( self, strTextOut, func, unpack( args ) )
				return
			end

			if StreamRadioLib.String.IsVirtualPath(fullpath) then
				local ErrorText = StreamRadioLib.DecodeEditorErrorCode( StreamRadioLib.EDITOR_ERROR_WVIRTUAL )
				ShowError( "Create error!", ErrorText, self, CreateFile, strTextOut, func, unpack( args ) )

				return
			end

			if self.FileItems[strTextOut] then
				local ErrorText = StreamRadioLib.DecodeEditorErrorCode( StreamRadioLib.EDITOR_ERROR_FILE_EXIST )
				ShowError( "Create error!", ErrorText, self, CreateFile, strTextOut, func, unpack( args ) )

				return
			end

			local format = StreamRadioLib.Filesystem.GuessType(fullpath)
			if not StreamRadioLib.Filesystem.CanCreateFormat(format) then
				local ErrorText = StreamRadioLib.DecodeEditorErrorCode( StreamRadioLib.EDITOR_ERROR_WFORMAT )
				ShowError( "Create error!", ErrorText, self, CreateFile, strTextOut, func, unpack( args ) )

				return
			end

			if func then
				func(self, strTextOut, format, unpack(args))
			end
		end, nil, "Create new file", "Cancel")
	end, func, args)

	return true
end

--Ask for override
local function AsForOverride( self, func, filename, ... )
	if not IsValid(self) then return false end
	if not self:IsVisible() then return false end
	if not func then return false end
	local args = {...}

	local filenamelower = string.lower(filename)

	if not self.FileItems[filenamelower] then
		func(self, filename, unpack( args ))
		return true
	end

	Derma_Query( "Overwrite this file?", "Save to..", "Overwrite", function( )
		if not IsValid(self) then return end
		if self:IsLoading() then return end

		func( self, filename, unpack( args ) )
	end, "Cancel" )

	return true
end

local function SaveTo(self, defaultString, func, ...)
	if not IsValid(self) then return false end
	if not self:IsVisible() then return false end
	if not IsValid(self.Files) then return false end
	if not func then return false end

	local Default_Format = StreamRadioLib.Filesystem.GetTypeExt(StreamRadioLib.TYPE_DEFAULT)

	local args = {...}
	local path = self.m_strFolderPath or ""
	local line = self.Files:GetSelectedLine( )
	line = self.Files:GetLine( line )
	local name = "new_playlist." .. Default_Format

	if IsValid(line) then
		name = line.streamradio_name
	end

	defaultString = string.Trim(defaultString or "")

	if not StreamRadioLib.String.IsValidFilename(defaultString) then
		defaultString = name
	end

	local helpText = [[
Save a file
- All invalid characters are fitered out
- Case insensitive, converted to lowercase
- Valid formats are: %s
]]
	helpText = string.format(helpText, StreamRadioLib.VALID_FORMATS_EXTENSIONS_LIST or "")
	helpText = string.Trim(helpText)

	Derma_StringRequest("Save to..", helpText, defaultString, function(strTextOut)
		if not IsValid(self) then return end
		if self:IsLoading() then return end

		strTextOut = StreamRadioLib.String.SanitizeFilename(strTextOut)

		if not StreamRadioLib.String.IsValidFilename(strTextOut) then
			SaveTo(self, defaultString, func, unpack(args))
			return
		end

		local fullpath = path .. "/" .. strTextOut
		fullpath = string.Trim(fullpath, "/")

		if not StreamRadioLib.Filesystem.GuessType(fullpath) then
			strTextOut = strTextOut .. "." .. Default_Format

			SaveTo(self, strTextOut, func, unpack(args))
			return
		end

		local format = StreamRadioLib.Filesystem.GuessType(fullpath)

		if not StreamRadioLib.Filesystem.CanWriteFormat(format) then
			if StreamRadioLib.String.IsVirtualPath(fullpath) then
				local ErrorText = StreamRadioLib.DecodeEditorErrorCode( StreamRadioLib.EDITOR_ERROR_WVIRTUAL )
				ShowError( "Save error!", ErrorText, self, SaveTo, strTextOut, func, unpack( args ) )

				return
			end

			local ErrorText = StreamRadioLib.DecodeEditorErrorCode(StreamRadioLib.EDITOR_ERROR_WFORMAT)
			ShowError("Save error!", ErrorText, self, SaveTo, strTextOut, func, unpack(args))

			return
		end

		if not self.FileItems[strTextOut] then
			if StreamRadioLib.String.IsVirtualPath(fullpath) then
				local ErrorText = StreamRadioLib.DecodeEditorErrorCode( StreamRadioLib.EDITOR_ERROR_WVIRTUAL )
				ShowError( "Create error!", ErrorText, self, SaveTo, strTextOut, func, unpack( args ) )

				return
			end

			if not StreamRadioLib.Filesystem.CanCreateFormat(format) then
				local ErrorText = StreamRadioLib.DecodeEditorErrorCode( StreamRadioLib.EDITOR_ERROR_WFORMAT )
				ShowError( "Create error!", ErrorText, self, SaveTo, strTextOut, func, unpack( args ) )

				return
			end
		end

		AsForOverride(self, function(self, fullpath, strTextOut, format, func, args)
			func(self, fullpath, strTextOut, format, unpack(args))
		end, fullpath, strTextOut, format, func, args)
	end, nil, "Save to file", "Cancel")

	return true
end

local function FileMenu(self, item, path, name, filetype, parentpath)
	if not IsValid(self) then return false end
	if not self:IsVisible() then return false end
	if self:IsLoading() then return false end


	local newfile = self.NewFileItem == item
	local Menu = DermaMenu()
	local MenuItem = nil

	MenuItem = Menu:AddOption("Open", function()
		if not IsValid(self) then return end
		if self:IsLoading() then return end

		self.Files:DoDoubleClick(item:GetID(), item)
	end)

	MenuItem:SetImage("icon16/table_add.png")
	Menu:AddSpacer( )

	MenuItem = Menu:AddOption("Refresh", function()
		if not IsValid(self) then return end
		if self:IsLoading() then return end

		self:Refresh()
	end)

	MenuItem:SetImage("icon16/arrow_refresh.png")

	if not StreamRadioLib.String.IsVirtualPath(parentpath) then
		Menu:AddSpacer( )

		--New
		MenuItem = Menu:AddOption("New", function()
			if not IsValid(self) then return end
			if self:IsLoading() then return end

			CreateFile(self, nil, self.CreateNewFile)
		end)

		MenuItem:SetImage("icon16/table_add.png")

		MenuItem = Menu:AddOption("New folder", function()
			if not IsValid(self) then return end
			if self:IsLoading() then return end

			CreateDir(self, nil, self.Lock, true)
		end)

		MenuItem:SetImage("icon16/folder_add.png")

		--Delete
		if StreamRadioLib.Filesystem.CanDeleteFormat(filetype) and not StreamRadioLib.String.IsVirtualPath(path) then
			Menu:AddSpacer( )
			MenuItem = Menu:AddOption("Delete", function()
				if not IsValid(self) then return end
				if self:IsLoading() then return end

				if newfile then
					AsForDelete(self, self.RemoveNewFile)

					return
				end

				AsForDelete(self, self.Lock, true)
			end)

			MenuItem:SetImage("icon16/bin_closed.png")
		end
	end

	Menu:Open()
	return true
end

local function PlaylistMenu( self, item, url, name, parentpath )
	if not IsValid(self) then return false end
	if not self:IsVisible() then return false end
	if self:IsLoading() then return false end

	local Menu = DermaMenu()
	local MenuItem = nil

	MenuItem = Menu:AddOption( "Copy Entry", function( )
		if not IsValid(self) then return end
		if self:IsLoading() then return end

		if self:AddPlaylistItem() then
			self:SetUnsaved(true)
		end
	end)

	MenuItem:SetImage( "icon16/add.png" )

	MenuItem = Menu:AddOption( "Remove Entry", function( )
		if not IsValid(self) then return end
		if self:IsLoading() then return end

		if self:RemovePlaylistItem(item) then
			self:SetUnsaved(true)
		end
	end)

	MenuItem:SetImage( "icon16/delete.png" )
	Menu:AddSpacer( )

	MenuItem = Menu:AddOption( "Move Up", function( )
		if not IsValid(self) then return end
		if self:IsLoading() then return end
		self:PlaylistCheckValid()

		if self:MovePlaylistItemUp(item) then
			self:SetUnsaved(true)
		end
	end )

	MenuItem:SetImage( "icon16/arrow_up.png" )

	MenuItem = Menu:AddOption( "Move Down", function( )
		if not IsValid(self) then return end
		if self:IsLoading() then return end

		self:PlaylistCheckValid()

		if self:MovePlaylistItemDown(item) then
			self:SetUnsaved( true )
		end
	end )

	MenuItem:SetImage( "icon16/arrow_down.png" )
	Menu:Open( )

	return true
end

function PANEL:IsLoading( )
	return self.IsLocked
end

function PANEL:Init( )
	self:SetPaintBackground( false )
	self.FilesPanel = vgui.Create( "DPanel" )
	self.FilesPanel:SetPaintBackground( false )

	self.PlaylistPanel = vgui.Create( "DPanel" )
	self.PlaylistPanel:SetPaintBackground( false )

	self.Files = self.FilesPanel:Add( "DListView" )
	self.Files:SetMultiSelect( false )
	self.Files:Dock( FILL )
	self.Files:AddColumn( "Name" )
	local Column = self.Files:AddColumn( "Type" )
	Column:SetFixedWidth( 70 )
	Column:SetWide( 70 )

	self.Files.DoDoubleClick = function( parent, id, line )
		if self:IsLoading( ) then return end
		if ( self.LastFileItem == line ) then return end
		self.LastFileItem = line
		if ( self.NewFileItem == line ) then return end

		local path = line.streamradio_path
		local filetype = line.streamradio_filetype

		self:SetPath( path, filetype, false, true )
	end

	self.Files.OnRowRightClick = function( parent, id, line )
		if self:IsLoading( ) then return end
		local path = line.streamradio_path
		local name = line.streamradio_name
		local filetype = line.streamradio_filetype
		local parentpath = line.streamradio_parentpath
		FileMenu( self, line, path, name, filetype, parentpath )
	end

	self.PlaylistTabPanel = self.PlaylistPanel:Add( "DPropertySheet" )
	self.PlaylistTabPanel:Dock( FILL )
	self.PlaylistTabPanel:SetFadeTime( 0 )

	self.PlaylistTabPanel.OnActiveTabChanged = function(this, old_panel, new_panel)
		if self:IsLoading( ) then return end

		StreamRadioLib.Timedcall(function()
			self:UpdatePlaylistEditorFromTextPanel()
			self:UpdatePlaylistTextFromEditorPanel()
		end)
	end

	self.PlaylistEditorPanel = vgui.Create( "DPanel" )
	local playlistEditorSheet = self.PlaylistTabPanel:AddSheet( "list", self.PlaylistEditorPanel, "icon16/table.png" )
	self.PlaylistEditorPanel:SetPaintBackground( false )

	self.PlaylistTextPanel = vgui.Create( "DPanel" )
	local playlistTextSheet = self.PlaylistTabPanel:AddSheet( "text", self.PlaylistTextPanel, "icon16/page_white.png" )
	self.PlaylistTextPanel:SetPaintBackground( false )

	playlistEditorSheet.Tab:SetText("List mode")
	playlistEditorSheet.Tab:SetTooltip("Edit the playlist in a list view")
	playlistTextSheet.Tab:SetText("Text mode")
	playlistTextSheet.Tab:SetTooltip("Edit the playlist in a text field (for advanced users)")

	self.Playlist = self.PlaylistEditorPanel:Add( "DListView" )
	self.Playlist:SetMultiSelect( false )
	self.Playlist:Dock( FILL )
	local Column = self.Playlist:AddColumn( "No." )
	Column:SetFixedWidth( 30 )
	Column:SetWide( 30 )
	local Column = self.Playlist:AddColumn( "Name" )
	Column:SetWide( 50 )
	self.Playlist:AddColumn( "URL" )

	self.Playlist.OnRowSelected = function( parent, id, line )
		if self:IsLoading( ) then return end
		self:SelectPlaylistItem( line )
	end

	self.Playlist.DoDoubleClick = function( parent, id, line )
		if self:IsLoading( ) then return end
		self:SelectPlaylistItem( line )
	end

	self.Playlist.OnRowRightClick = function( parent, id, line )
		if self:IsLoading( ) then return end
		local url = line.streamradio_url
		local name = line.streamradio_name

		PlaylistMenu( self, line, url, name, self.PlaylistItems["parentpath"] )
		self:SelectPlaylistItem( line )
	end

	self.PlaylistBottomPanel = self.PlaylistEditorPanel:Add( "DPanel" )
	self.PlaylistBottomPanel:SetPaintBackground( false )
	self.PlaylistBottomPanel:Dock( BOTTOM )
	self.PlaylistBottomPanel:SetTall( 110 )
	self.PlaylistBottomPanel:DockMargin( 0, 3, 0, 0 )

	self.EditNamePanel = self.PlaylistBottomPanel:Add( "DPanel" )
	self.EditNamePanel:SetPaintBackground( false )
	self.EditNamePanel:Dock( TOP )
	self.EditNamePanel:SetTall( 20 )
	self.EditNamePanel:DockMargin( 0, 0, 0, 3 )

	self.EditURLPanel = self.PlaylistBottomPanel:Add( "DPanel" )
	self.EditURLPanel:SetPaintBackground( false )
	self.EditURLPanel:Dock( TOP )
	self.EditURLPanel:SetTall( 60 )
	self.EditURLPanel:DockMargin( 0, 0, 0, 3 )

	self.EditButtonsPanel = self.PlaylistBottomPanel:Add( "DPanel" )
	self.EditButtonsPanel:SetPaintBackground( false )
	self.EditButtonsPanel:Dock( BOTTOM )
	self.EditButtonsPanel:SetTall( 20 )
	self.EditButtonsPanel:DockMargin( 0, 0, 0, 0 )

	self.EditNameText = self.EditNamePanel:Add( "DTextEntry" )
	self.EditNameText:DockMargin( 0, 0, 0, 0 )
	self.EditNameText:Dock( FILL )

	if self.EditNameText.SetPlaceholderText then
		-- Some client have some addon conflicts
		-- This causes them to not have the panel:SetPlaceholderText() function

		self.EditNameText:SetPlaceholderText("Enter a name for this Entry")
	end

	self.EditNameText.OnEnter = function( panel )
		if self:IsLoading() then return end
		self:PlaylistCheckValid()
	end

	self.EditNameText.OnChange = function( panel )
		if self:IsLoading() then return end
		self:PlaylistCheckValid()
	end

	self.EditNameLabel = self.EditNamePanel:Add( "DLabel" )
	self.EditNameLabel:SetText( "Name:" )
	self.EditNameLabel:SetWide( 40 )
	self.EditNameLabel:SetDark( true )
	self.EditNameLabel:DockMargin( 6, 0, 0, 0 )
	self.EditNameLabel:Dock( LEFT )

	self.EditURLText = self.EditURLPanel:Add( "Streamradio_VGUI_URLTextEntry" )
	self.EditURLText:DockMargin( 0, 0, 0, 0 )
	self.EditURLText:Dock( FILL )

	self.EditURLText.OnEnter = function( panel )
		if self:IsLoading( ) then return end
		self:PlaylistCheckValid( )
	end

	self.EditURLText.OnChange = function( panel )
		if self:IsLoading( ) then return end
		self:PlaylistCheckValid( )
	end

	self.EditURLLabel = self.EditURLPanel:Add( "DLabel" )
	self.EditURLLabel:SetText( "URL:" )
	self.EditURLLabel:SetWide( 40 )
	self.EditURLLabel:SetDark( true )
	self.EditURLLabel:DockMargin( 6, 0, 0, 0 )
	self.EditURLLabel:Dock( LEFT )

	self.EditChangeButton = self.EditButtonsPanel:Add( "DButton" )
	self.EditChangeButton:SetWide( 100 )
	self.EditChangeButton:DockMargin( 6, 0, 0, 0 )
	self.EditChangeButton:Dock( RIGHT )
	self.EditChangeButton:SetText( "Apply" )
	self.EditChangeButton:SetImage( "icon16/pencil.png" )

	self.EditChangeButton.DoClick = function( panel )
		if self:IsLoading( ) then return end
		self:PlaylistCheckValid( )

		if ( self:ChangePlaylistItem( self.SelectedPlaylistItem ) ) then
			self:SetUnsaved( true )
		end
	end

	self.EditAddButton = self.EditButtonsPanel:Add( "DButton" )
	self.EditAddButton:SetWide( 100 )
	self.EditAddButton:DockMargin( 6, 0, 0, 0 )
	self.EditAddButton:Dock( RIGHT )
	self.EditAddButton:SetText( "Add" )
	self.EditAddButton:SetImage( "icon16/add.png" )

	self.EditAddButton.DoClick = function( panel )
		if self:IsLoading( ) then return end
		self:PlaylistCheckValid( )

		if ( self:AddPlaylistItem( ) ) then
			self:SetUnsaved( true )
		end
	end

	local starttimeout = 0.5
	local holdtimeout = 0.075

	self.EditMoveDownButton = self.EditButtonsPanel:Add( "DButton" )
	self.EditMoveDownButton:SetWide( self.EditMoveDownButton:GetTall() + 10 )
	self.EditMoveDownButton:DockMargin( 6, 0, 0, 0 )
	self.EditMoveDownButton:Dock( RIGHT )
	self.EditMoveDownButton:SetText( "" )
	self.EditMoveDownButton:SetTooltip( "Move item down" )

	self.EditMoveDownButtonImage = vgui.Create( "DImage", self.EditMoveDownButton )
	if ( IsValid( self.EditMoveDownButtonImage ) ) then
		self.EditMoveDownButtonImage:SetImage( "icon16/arrow_down.png" )
		self.EditMoveDownButtonImage:SizeToContents()

		local w1, h1 = self.EditMoveDownButton:GetSize()
		local w2, h2 = self.EditMoveDownButtonImage:GetSize()

		self.EditMoveDownButtonImage:SetPos((w1 - w2) / 2, (h1 - h2) / 2)
	end

	self.EditMoveUpButton = self.EditButtonsPanel:Add( "DButton" )
	self.EditMoveUpButton:SetWide( self.EditMoveUpButton:GetTall() + 10 )
	self.EditMoveUpButton:DockMargin( 6, 0, 0, 0 )
	self.EditMoveUpButton:Dock( RIGHT )
	self.EditMoveUpButton:SetText( "" )
	self.EditMoveUpButton:SetTooltip( "Move item up" )

	self.EditMoveUpButtonImage = vgui.Create( "DImage", self.EditMoveUpButton )
	if ( IsValid( self.EditMoveUpButtonImage ) ) then
		self.EditMoveUpButtonImage:SetImage( "icon16/arrow_up.png" )
		self.EditMoveUpButtonImage:SizeToContents()

		local w1, h1 = self.EditMoveUpButton:GetSize()
		local w2, h2 = self.EditMoveUpButtonImage:GetSize()

		self.EditMoveUpButtonImage:SetPos((w1 - w2) / 2, (h1 - h2) / 2)
	end

	self.EditMoveUpButton.DoClick = function( panel )
		if self:IsLoading( ) then return end
		self:PlaylistCheckValid( )

		if ( self:MovePlaylistItemUp( self.SelectedPlaylistItem ) ) then
			self:SetUnsaved( true )
		end

		self.EditMoveUpButton.streamradio_presstime = nil
		self.EditMoveDownButton.streamradio_presstime = nil
	end
	self.EditMoveUpButton.OnHold = function( panel )
		if ( not panel.streamradio_presstime ) then
			panel.streamradio_presstime = RealTime() + starttimeout
		end

		if ( ( RealTime() - panel.streamradio_presstime ) < holdtimeout ) then return end
		self:PlaylistCheckValid( )

		if ( self:MovePlaylistItemUp( self.SelectedPlaylistItem ) ) then
			self:SetUnsaved( true )
		end

		panel.streamradio_presstime = RealTime()
	end

	self.EditMoveDownButton.DoClick = function( panel )
		if self:IsLoading( ) then return end
		self:PlaylistCheckValid( )

		if ( self:MovePlaylistItemDown( self.SelectedPlaylistItem ) ) then
			self:SetUnsaved( true )
		end

		self.EditMoveUpButton.streamradio_presstime = nil
		self.EditMoveDownButton.streamradio_presstime = nil
	end
	self.EditMoveDownButton.OnHold = function( panel )
		if ( not panel.streamradio_presstime ) then
			panel.streamradio_presstime = RealTime() + starttimeout
		end

		if ( ( RealTime() - panel.streamradio_presstime ) < holdtimeout ) then return end
		self:PlaylistCheckValid( )

		if ( self:MovePlaylistItemDown( self.SelectedPlaylistItem ) ) then
			self:SetUnsaved( true )
		end

		panel.streamradio_presstime = RealTime()
	end

	self.EditRemoveButton = self.EditButtonsPanel:Add( "DButton" )
	self.EditRemoveButton:SetWide( 100 )
	self.EditRemoveButton:DockMargin( 0, 0, 0, 0 )
	self.EditRemoveButton:Dock( LEFT )
	self.EditRemoveButton:SetText( "Remove" )
	self.EditRemoveButton:SetImage( "icon16/delete.png" )

	self.EditRemoveButton.DoClick = function( panel )
		if self:IsLoading( ) then return end
		self:PlaylistCheckValid( )

		if ( self:RemovePlaylistItem( self.SelectedPlaylistItem ) ) then
			self:SetUnsaved( true )
		end
	end

	self.PlaylistText = self.PlaylistTextPanel:Add( "DTextEntry" )
	self.PlaylistText:Dock( FILL )

	local TextEditorFont = StreamRadioLib.Surface.AddFont(14, 1000, "Lucida Console")

	self.PlaylistText:SetEditable( true )
	self.PlaylistText:SetMultiline( true )
	self.PlaylistText:SetDrawLanguageID( false )
	self.PlaylistText:SetTabbingDisabled( true )
	self.PlaylistText:SetHistoryEnabled( false )
	self.PlaylistText:SetEnterAllowed( true )
	self.PlaylistText:SetDrawBorder( true )
	self.PlaylistText:SetVerticalScrollbarEnabled( true )
	self.PlaylistText:SetUpdateOnType( true )
	self.PlaylistText:SetFont(TextEditorFont)

	self.PlaylistText.OnValueChange = function( )
		if self:IsLoading( ) then return end

		self:MarkPlaylistEditorShouldUpdate()
		self:SetUnsaved( true )
	end

	self.PlaylistTextBottomPanel = self.PlaylistTextPanel:Add( "DPanel" )
	self.PlaylistTextBottomPanel:SetPaintBackground( false )
	self.PlaylistTextBottomPanel:Dock( BOTTOM )
	self.PlaylistTextBottomPanel:SetTall( 100 )
	self.PlaylistTextBottomPanel:DockMargin( 0, 3, 0, 0 )

	local helpTextGeneral = [[
About this text based playlist editor:

- Changes are automatically synchronized between this view and the list view.
- Enter the name and the URL for each entry you want to add.
- The syntax is independent from the playlist format.
- Missing lines are skipped or are filled with placeholders.
- Whitespaces are trimed on each line.
]]

	local helpTextSyntax = [[
Example:

1.FM - ABSOLUTE TOP 40 RADIO [newline]
http://185.33.21.112:80/top40_128 [newline]
1.FM - Alternative Rock X Hits [newline]
http://185.33.21.112:80/x_128 [newline]
...
]]

	helpTextGeneral = string.Trim(helpTextGeneral)
	helpTextSyntax = string.Trim(helpTextSyntax)

	self.PlaylistTextHelpGeneralLabel = self.PlaylistTextBottomPanel:Add( "Streamradio_VGUI_ReadOnlyTextEntry" )
	self.PlaylistTextHelpGeneralLabel:SetText(helpTextGeneral)
	self.PlaylistTextHelpGeneralLabel:DockMargin( 6, 0, 0, 0 )
	self.PlaylistTextHelpGeneralLabel:SetWide( 400 )
	self.PlaylistTextHelpGeneralLabel:Dock( LEFT )
	self.PlaylistTextHelpGeneralLabel:SetZPos(100)

	self.PlaylistTextHelpSyntaxLabel = self.PlaylistTextBottomPanel:Add( "Streamradio_VGUI_ReadOnlyTextEntry" )
	self.PlaylistTextHelpSyntaxLabel:SetText(helpTextSyntax)
	self.PlaylistTextHelpSyntaxLabel:DockMargin( 6, 0, 0, 0 )
	self.PlaylistTextHelpSyntaxLabel:SetWide( 400 )
	self.PlaylistTextHelpSyntaxLabel:Dock( LEFT )
	self.PlaylistTextHelpSyntaxLabel:SetZPos(200)


	self.TopPanel = self:Add( "DPanel" )
	self.TopPanel:SetPaintBackground( false )
	self.TopPanel:Dock( TOP )
	self.TopPanel:SetTall( 20 )
	self.TopPanel:DockMargin( 0, 0, 0, 3 )

	self.SaveIcon = self.TopPanel:Add( "DImageButton" )
	self.SaveIcon:SetImage( "icon16/table_save.png" )
	self.SaveIcon:SetWide( 20 )
	self.SaveIcon:Dock( LEFT )
	self.SaveIcon:SetTooltip( "Save list" )
	self.SaveIcon:SetStretchToFit( false )
	self.SaveIcon:DockMargin( 0, 0, 0, 0 )

	self.SaveIcon.DoClick = function( )
		if self:IsLoading( ) then return end

		if ( not self.m_strPath or self.m_strPath == "" or self.m_strPath == self.m_strFolderPath ) then
			SaveTo( self, nil, self.SavePlaylist )

			return
		end

		self:SavePlaylist( )
	end

	self.SaveToIcon = self.TopPanel:Add( "DImageButton" )
	self.SaveToIcon:SetImage( "icon16/disk.png" )
	self.SaveToIcon:SetWide( 20 )
	self.SaveToIcon:Dock( LEFT )
	self.SaveToIcon:SetTooltip( "Save to.." )
	self.SaveToIcon:SetStretchToFit( false )
	self.SaveToIcon:DockMargin( 0, 0, 0, 0 )

	self.SaveToIcon.DoClick = function( )
		if self:IsLoading( ) then return end
		SaveTo( self, nil, self.SavePlaylist )
	end

	self.NewIcon = self.TopPanel:Add( "DImageButton" )
	self.NewIcon:SetImage( "icon16/table_add.png" )
	self.NewIcon:SetWide( 20 )
	self.NewIcon:Dock( LEFT )
	self.NewIcon:SetTooltip( "New list" )
	self.NewIcon:SetStretchToFit( false )
	self.NewIcon:DockMargin( 10, 0, 0, 0 )

	self.NewIcon.DoClick = function( )
		if self:IsLoading( ) then return end
		CreateFile( self, nil, self.CreateNewFile )
	end

	self.NewFolder = self.TopPanel:Add( "DImageButton" )
	self.NewFolder:SetImage( "icon16/folder_add.png" )
	self.NewFolder:SetWide( 20 )
	self.NewFolder:Dock( LEFT )
	self.NewFolder:SetTooltip( "New folder" )
	self.NewFolder:SetStretchToFit( false )
	self.NewFolder:DockMargin( 0, 0, 0, 0 )

	self.NewFolder.DoClick = function( )
		if self:IsLoading( ) then return end
		CreateDir( self, nil, self.Lock, true )
	end

	self.RefreshIcon = self.TopPanel:Add( "DImageButton" )
	self.RefreshIcon:SetImage( "icon16/arrow_refresh.png" )
	self.RefreshIcon:SetWide( 20 )
	self.RefreshIcon:Dock( LEFT )
	self.RefreshIcon:SetTooltip( "Refresh and reload" )
	self.RefreshIcon:SetStretchToFit( false )
	self.RefreshIcon:DockMargin( 10, 0, 0, 0 )

	self.RefreshIcon.DoClick = function( )
		if self:IsLoading( ) then return end
		self:Refresh( )
	end

	self.ApplySortIcon = self.TopPanel:Add( "DImageButton" )
	self.ApplySortIcon:SetImage( "icon16/lightning.png" )
	self.ApplySortIcon:SetWide( 20 )
	self.ApplySortIcon:Dock( LEFT )
	self.ApplySortIcon:SetTooltip( "Apply current sort to playlist" )
	self.ApplySortIcon:SetStretchToFit( false )
	self.ApplySortIcon:DockMargin( 10, 0, 0, 0 )

	self.ApplySortIcon.DoClick = function( )
		if self:IsLoading( ) then return end
		self:ApplyPlaylistSort( )

		self:SetUnsaved( true )
		self:MarkPlaylistTextShouldUpdate( true )
	end

	self.ListNameLabel = self.TopPanel:Add( "Streamradio_VGUI_ReadOnlyTextEntry" )
	self.ListNameLabel:SetText( "" )
	self.ListNameLabel:SetWide( 20 )
	self.ListNameLabel:Dock( FILL )
	self.ListNameLabel:DockMargin( 12, 0, 0, 0 )
	self.ListNameLabel:SetMultiline( false )

	self.SplitPanel = self:Add( "DHorizontalDivider" )
	self.SplitPanel:Dock( FILL )
	self.SplitPanel:SetRight( self.PlaylistPanel )
	self.SplitPanel:SetLeft( self.FilesPanel )
	self.SplitPanel:SetLeftWidth( 300 )
	self.SplitPanel:SetLeftMin( 200 )
	self.SplitPanel:SetRightMin( 400 )
	self.SplitPanel:SetDividerWidth( 3 )

	self:Reset( )
end

function PANEL:SavePlaylist( filepath, name, filetype )
	if self:IsLoading() then return false end
	if self.m_bSaving then return false end

	if self.PlaylistTextPanel._isDirty then
		self:BuildPlaylistFromTextPanel()
	end

	if filepath and name and filetype then
		self.m_strPath = filepath
		self.Format = filetype

		self.PlaylistItems["format"] = filetype
		self.PlaylistItems["parentpath"] = self.m_strFolderPath
	end

	if not StreamRadioLib.Editor.Save(filepath or self.m_strPath, self.PlaylistItems) then return false end
	local fileitem = self:AddFileItem(filepath, name, self.m_strFolderPath, filetype)

	if IsValid(fileitem) then
		self.Files:ClearSelection()
		self.Files:SortByColumn(1)
		self.Files:SelectItem(fileitem)

		self.NewFileItem = fileitem
		self.LastFileItem = fileitem
	end

	self.m_bSaving = true
	self:Lock(true)

	return true
end

local function EnablePanel( button, bool )
	if ( not bool ) then
		button.Depressed = false
		button.m_bSelected = false
		button.Hovered = false

		button.streamradio_presstime = nil
	end

	button:SetMouseInputEnabled( bool )
	button:SetEnabled( bool )
	button:SetKeyboardInputEnabled( bool )
end

function PANEL:Lock( bool )
	bool = bool or false

	EnablePanel( self, not bool )
	self.IsLocked = bool
end

function PANEL:BuildPlaylistFromTextPanel()
	if not self.PlaylistItems then
		self.PlaylistItems = {}

		self.PlaylistTextPanel._isDirty = nil
		self.PlaylistEditorPanel._isDirty = nil
		return
	end

	local lines = self.PlaylistText:GetText()
	lines = StreamRadioLib.String.NormalizeNewlines(lines, '\n')

	lines = string.Explode("\n", lines, false) or {}

	local len = #lines

	self.Playlist:Clear( )
	self.PlaylistItems = self:GetEmptyPlaylistItems()

	local index = 1

	for i = 1, len, 2 do
		local name = string.Trim(lines[i] or "")
		local url = string.Trim(lines[i + 1] or "")

		if name == "" and url == "" then
			continue
		end

		if name == "" then
			name = string.format("(no name #%d)", index)
		end

		if url == "" then
			url = string.format("(no url #%d)", index)
		end

		self:AddPlaylistItem(url, name)
		index = index + 1
	end

	self:SelectPlaylistItem( )
	self:PlaylistCheckValid( )

	self.PlaylistTextPanel._isDirty = nil
	self.PlaylistEditorPanel._isDirty = nil
end

function PANEL:BuildTextFromPlaylistPanel()
	local lines = {}
	local index = 1

	for i, v in ipairs( self.PlaylistItems or {} ) do
		local name = string.Trim(v.name or "")
		local url = string.Trim(v.url or "")

		if name == "" and url == "" then
			continue
		end

		if name == "" then
			name = string.format("(no name #%d)", index)
		end

		if url == "" then
			url = string.format("(no url #%d)", index)
		end

		table.insert(lines, name)
		table.insert(lines, url)

		index = index + 1
	end

	lines = table.concat(lines, "\n")
	self.PlaylistText:SetText(lines)

	self.PlaylistTextPanel._isDirty = nil
	self.PlaylistEditorPanel._isDirty = nil
end

function PANEL:MarkPlaylistEditorShouldUpdate(alsoTryUpdate)
	self.PlaylistTextPanel._isDirty = true

	if alsoTryUpdate then
		self:UpdatePlaylistEditorFromTextPanel()
	end
end

function PANEL:MarkPlaylistTextShouldUpdate(alsoTryUpdate)
	self.PlaylistEditorPanel._isDirty = true

	if alsoTryUpdate then
		self:UpdatePlaylistTextFromEditorPanel()
	end
end

function PANEL:UpdatePlaylistEditorFromTextPanel()
	if not self.PlaylistItems then
		return
	end

	local tab = self.PlaylistTabPanel:GetActiveTab()
	if not IsValid(tab) then
		return
	end

	local activePanel = tab:GetPanel()
	if not IsValid(activePanel) then
		return
	end

	if activePanel ~= self.PlaylistEditorPanel then
		return
	end

	if not self.PlaylistTextPanel._isDirty then
		return
	end

	self:BuildPlaylistFromTextPanel()
end

function PANEL:UpdatePlaylistTextFromEditorPanel()
	if not self.PlaylistItems then
		return
	end

	local tab = self.PlaylistTabPanel:GetActiveTab()
	if not IsValid(tab) then
		return
	end

	local activePanel = tab:GetPanel()
	if not IsValid(activePanel) then
		return
	end

	if activePanel ~= self.PlaylistTextPanel then
		return
	end

	if not self.PlaylistEditorPanel._isDirty then
		return
	end

	self:BuildTextFromPlaylistPanel()
end

function PANEL:Clear( )
	self:ClearFiles( )
	self:ClearPlaylist( )
end

function PANEL:ClearFiles( )
	self.Files:Clear( )
	self.FileItems = {}
	self:InvalidateLayout( )
end

function PANEL:ClearPlaylist( )
	self.Playlist:Clear( )
	self.PlaylistItems = {}
	self:SelectPlaylistItem( )
	self:PlaylistCheckValid( )
	self:SetUnsaved( false )
	self:ClearPlaylistText( )
	self:InvalidateLayout( )
end

function PANEL:ClearPlaylistText( )
	self.PlaylistText:SetText( "" )
	self:MarkPlaylistTextShouldUpdate( true )
	self:InvalidateLayout( )
end

function PANEL:GetEmptyPlaylistItems()
	local tmpTab = {}

	for k, v in pairs( self.PlaylistItems or {} ) do
		if not isstring( k ) then continue end
		tmpTab[k] = v
	end

	return tmpTab
end

function PANEL:PerformLayout( )
	if ( IsValid( self.SplitPanel ) ) then
		local minw = self:GetWide( ) - self.SplitPanel:GetRightMin( ) - self.SplitPanel:GetDividerWidth( )
		local oldminw = self.SplitPanel:GetLeftWidth( minw )

		if ( oldminw > minw ) then
			self.SplitPanel:SetLeftWidth( minw )
		end
	end

	--Fixes scrollbar glitches on resize
	if ( IsValid( self.Playlist ) ) then
		self.Playlist:OnMouseWheeled( 0 )
	end

	if ( IsValid( self.Files ) ) then
		self.Files:OnMouseWheeled( 0 )
	end

	StreamRadioLib.VR.RenderMenu(self)
end

local function Refresh( self )
	local filepath = self.m_strPath or ""
	local format = self.Format or StreamRadioLib.TYPE_FOLDER
	filepath = string.Trim( filepath, "\\" )
	filepath = string.Trim( filepath, "/" )
	filepath = string.Trim( filepath, "\\" )
	filepath = string.Trim( filepath, "/" )
	self:SetPath( filepath, format, true )

	if not StreamRadioLib.Filesystem.IsFolder(format) then
		self:SetPath( self.m_strFolderPath, StreamRadioLib.TYPE_FOLDER, true, true )
	end

	self.m_strPath = filepath
	self.Format = format
	self:UpdateListNameLabel( )
	self:InvalidateLayout( )
end

function PANEL:Reset( )
	self:Clear( )
	self.m_strPath = nil
	self.Format = nil
	self:Refresh( true )
end

function PANEL:Refresh( force )
	if ( force ) then
		Refresh( self )
	else
		AsForSave( self, Refresh )
	end
end

local function CallOnHold(panel)
	if ( not IsValid( panel ) ) then return end
	if ( not isfunction( panel.OnHold ) ) then return end
	if ( panel.IsDown and (not panel:IsDown() ) ) then return end

	panel.OnHold(panel)
end

function PANEL:Think( )
	if self:IsLoading( ) then return end

	CallOnHold(self.EditMoveUpButton)
	CallOnHold(self.EditMoveDownButton)
end

local loadcol = Color( 255, 0, 0, 255 )

function PANEL:PaintOver( w, h )
	if not self:IsLoading() then return end

	local sqmax, sqmin = math.max(w, h), math.min(w, h)
	local isq = math.min(sqmax * 0.125, sqmin * 0.5)

	StreamRadioLib.Surface.Loading((w - isq) / 2, (h - isq) / 2, isq, isq, loadcol, 8 )
end

function PANEL:PlaylistCheckValid( )
	local url = self.EditURLText:GetText( )
	local name = self.EditNameText:GetText( )
	local EnableEdit = ( url ~= "" and name ~= "" and self.EditURLText:CheckURL( true ) )
	local EnableSelect = IsValid( self.SelectedPlaylistItem ) and self.SelectedPlaylistItem.streamradio_id

	local EnableUp = EnableSelect and self.Playlist:GetSortedID(self.SelectedPlaylistItem:GetID()) > 1
	local EnableDown = EnableSelect and self.Playlist:GetSortedID(self.SelectedPlaylistItem:GetID()) < #self.PlaylistItems

	EnablePanel( self.EditAddButton, EnableEdit )
	EnablePanel( self.EditChangeButton, EnableEdit and EnableSelect )
	EnablePanel( self.EditRemoveButton, EnableSelect )
	EnablePanel( self.EditMoveUpButton, EnableUp )
	EnablePanel( self.EditMoveDownButton, EnableDown )
end

function PANEL:Callback(CallbackType, path, name, parentpath, filetype)
	if CallbackType == "files" then

		self:Lock(true)

		if StreamRadioLib.Filesystem.IsFolder(filetype) then
			self:AddFolderItem( path, name, parentpath, filetype )
		else
			self:AddFileItem( path, name, parentpath, filetype )
		end

	elseif CallbackType == "playlist" then

		self:SetUnsaved( false )
		self:Lock( true )
		self:AddPlaylistItem( path, name, parentpath, filetype )

	elseif CallbackType == "error" then

		if name == StreamRadioLib.EDITOR_ERROR_RESET then
			self:Reset( )
			return
		end

		if OK_CODES[name] then
			self:OnFinish( path, name )
		else
			self:OnError( path, name )
		end

	end
end

function PANEL:OnFinish( path, code )
	if code == StreamRadioLib.EDITOR_ERROR_OK then
		self.m_bSaving = false
		self:Lock( false )
		self:SetUnsaved( false )
		self:MarkPlaylistTextShouldUpdate( true )
	end

	if code == StreamRadioLib.EDITOR_ERROR_WRITE_OK then
		self.m_bSaving = false
		self:Lock( false )
		self:SetUnsaved( false )
	end

	if code == StreamRadioLib.EDITOR_ERROR_READ_OK then
		self:Lock( false )
		self:SetUnsaved( false )
		self:MarkPlaylistTextShouldUpdate( true )
	end

	if code == StreamRadioLib.EDITOR_ERROR_FILES_OK then
		self:Lock( false )
	end

	if code == StreamRadioLib.EDITOR_ERROR_DIR_OK then
		self:Lock( false )
		local name = string.GetFileFromFilename( path ) or ""

		if ( name == "" ) then
			name = path
		end

		local fileitem = self:AddFolderItem( path, name, self.m_strFolderPath, StreamRadioLib.TYPE_FOLDER )
		self.Files:ClearSelection( )
		self.Files:SortByColumn( 1 )
		if ( not IsValid( fileitem ) ) then return end
		self.Files:SelectItem( fileitem )
	end

	if code == StreamRadioLib.EDITOR_ERROR_DEL_OK then
		self:Lock( false )
		local line = self.Files:GetSelectedLine( )
		local linepanel = self.Files:GetLine( line )

		if not IsValid( linepanel ) then
			self:Refresh( true )

			return
		end

		if linepanel.streamradio_path ~= path then
			self:Refresh( true )

			return
		end

		if self.Clipboard == linepanel.streamradio_path then
			self.Clipboard = nil
		end

		if path == self.m_strPath and linepanel.streamradio_filetype ~= StreamRadioLib.TYPE_FOLDER then
			self.m_strPath = self.m_strFolderPath
			self.Format = StreamRadioLib.TYPE_FOLDER
			self:Refresh( true )

			return
		end

		local namelower = string.lower(linepanel.streamradio_name or "")
		self.FileItems[namelower] = nil

		self.Files:RemoveLine( line )
		self.Files:SortByColumn( 1 )
	end
end

function PANEL:OnError( path, code )
	local ErrorString = StreamRadioLib.DecodeEditorErrorCode( code )

	if WRITE_ERRORS[code] then
		self.m_bSaving = false
		self:Lock( false )
		ShowError( "Write error!", ErrorString, self )

		return
	end

	if READ_ERRORS[code] then
		self:Lock( false )
		self:SetUnsaved( false )
		ShowError( "Read error!", ErrorString, self )

		return
	end

	if DIR_ERRORS[code] then
		self:Lock( false )
		ShowError( "Directory error!", ErrorString, self )

		return
	end

	if code == StreamRadioLib.EDITOR_ERROR_DEL_ACCES then
		self:Lock( false )
		ShowError( "Delete error!", ErrorString, self )

		return
	end

	if COPY_ERRORS[code] then
		self:Lock( false )
		ShowError( "Copy error!", ErrorString, self )

		return
	end

	if RENAME_ERRORS[code] then
		self:Lock( false )
		ShowError( "Rename or move error!", ErrorString, self )

		return
	end

	self:Lock( false )
	ShowError( "General error! (" .. code .. ")", ErrorString, self )
end

function PANEL:RemoveNewFile()
	if not IsValid(self.Files) then return end
	if not IsValid(self.NewFileItem) then return end

	if self.Clipboard == self.NewFileItem.streamradio_path then
		self.Clipboard = nil
	end

	local namelower = string.lower(self.NewFileItem.streamradio_name or "")

	self.FileItems[namelower] = nil
	self.Files:RemoveLine(self.NewFileItem:GetID())
end

function PANEL:CreateNewFile(name, filetype)
	if not name then return false end
	if name == "" then return false end
	if not filetype then return false end

	local path = self.m_strFolderPath .. "/" .. name
	path = string.Trim(path, "/")

	local fileitem = self:AddFileItem(path, name, self.m_strFolderPath, filetype)
	if not IsValid(fileitem) then return false end

	self:ClearPlaylist()

	self.m_strPath = path
	self.Format = filetype
	self.PlaylistItems["format"] = filetype
	self.PlaylistItems["parentpath"] = self.m_strFolderPath

	self:SetUnsaved(true)

	self.Files:ClearSelection()
	self.Files:SortByColumn(1)
	self.Files:SelectItem(fileitem)

	self.NewFileItem = fileitem
	self.LastFileItem = fileitem

	self:ClearPlaylistText()
	return true
end

function PANEL:AddFolderItem(path, name, parentpath, filetype)
	if not path then return end
	if not name then return end
	if not parentpath then return end
	if not filetype then return end
	if not IsValid(self.Files) then return end

	local namelower = string.lower(name)
	if self.FileItems[namelower] then return end

	local item = self.Files:AddLine("./" .. name, StreamRadioLib.Filesystem.GetTypeName(filetype))

	item.streamradio_path = path
	item.streamradio_name = name
	item.streamradio_filetype = filetype
	item.streamradio_parentpath = parentpath

	self.FileItems[namelower] = true
	return item
end

function PANEL:AddFileItem( path, name, parentpath, filetype )
	if not path then return end
	if not name then return end
	if not parentpath then return end
	if not filetype then return end
	if not IsValid(self.Files) then return end

	local namelower = string.lower(name)
	if self.FileItems[namelower] then return end

	local item = self.Files:AddLine(name, StreamRadioLib.Filesystem.GetTypeName(filetype))

	item.streamradio_path = path
	item.streamradio_name = name
	item.streamradio_filetype = filetype
	item.streamradio_parentpath = parentpath

	self.FileItems[namelower] = true

	return item
end

function PANEL:AddPlaylistItem(url, name, parentpath)
	if not self.PlaylistItems then return false end

	url = url or self.EditURLText:GetText()
	name = name or self.EditNameText:GetText()
	parentpath = parentpath or self.PlaylistItems["parentpath"]

	if url == "" then return false end
	if name == "" then return false end

	local id = #self.PlaylistItems + 1
	local item = self.Playlist:AddLine(id, name, url)
	if not IsValid(item) then return false end

	item.streamradio_url = url
	item.streamradio_name = name
	item.streamradio_id = id

	self.PlaylistItems[id] = {
		url = url,
		name = name,
		item = item
	}

	self.PlaylistItems["format"] = self.PlaylistItems["format"] or self.Format
	self.PlaylistItems["parentpath"] = parentpath

	self:MarkPlaylistTextShouldUpdate()
	return true
end

function PANEL:RemovePlaylistItem(item)
	if not IsValid(item) then return false end
	if not self.PlaylistItems then return false end
	if self:IsLoading() then return false end

	local id = item.streamradio_id

	self.PlaylistItems[id] = nil
	self.Playlist:RemoveLine(item:GetID())
	self:SelectPlaylistItem()
	self:CleanUpPlaylist()

	self:MarkPlaylistTextShouldUpdate()
	return true
end

function PANEL:ChangePlaylistItem(item, url, name)
	if not IsValid(item) then return false end
	if not self.PlaylistItems then return false end
	if self:IsLoading() then return false end

	url = url or self.EditURLText:GetText()
	name = name or self.EditNameText:GetText()
	if url == "" then return false end
	if name == "" then return false end

	item.streamradio_url = url or self.EditURLText:GetText()
	item.streamradio_name = name or self.EditNameText:GetText()

	local id = item.streamradio_id or 0
	if id <= 0 then return false end

	item:SetColumnText(1, id)
	item:SetColumnText(2, name)
	item:SetColumnText(3, url)

	self.PlaylistItems[id] = {
		url = url,
		name = name,
		item = item
	}

	self:MarkPlaylistTextShouldUpdate()
	return true
end

function PANEL:SelectPlaylistItem( item )
	if not IsValid( item ) then
		self.Playlist:ClearSelection( )
		self.SelectedPlaylistItem = nil

		self.EditNameText:KillFocus()
		self.EditURLText:GetTextEntry():KillFocus()

		self.EditNameText:SetText( "" )
		self.EditURLText:SetText( "" )

		self:PlaylistCheckValid( )

		return false
	end

	if self:IsLoading( ) then return false end

	local url = item.streamradio_url
	local name = item.streamradio_name

	self.EditNameText:KillFocus()
	self.EditURLText:GetTextEntry():KillFocus()

	self.EditNameText:SetText( name )
	self.EditURLText:SetText( url )

	self:PlaylistCheckValid( )

	if self.SelectedPlaylistItem == item then return true end
	self.SelectedPlaylistItem = item
	self.Playlist:ClearSelection( )
	self.Playlist:SelectItem( item )

	return true
end

function PANEL:SwapItem( itemA, itemB )
	if ( not IsValid( itemA ) ) then return false end
	if ( not IsValid( itemB ) ) then return false end
	if ( not self.PlaylistItems ) then return false end
	if self:IsLoading( ) then return false end

	if ( itemA == itemB ) then return false end

	local idA = itemA.streamradio_id or 0
	if ( idA <= 0 ) then return false end
	if ( idA > #self.PlaylistItems ) then return false end

	local idB = itemB.streamradio_id or 0
	if ( idB <= 0 ) then return false end
	if ( idB > #self.PlaylistItems ) then return false end

	if ( idA == idB ) then return false end

	local lineA = self.PlaylistItems[idA]
	local lineB = self.PlaylistItems[idB]

	if ( not lineA ) then return false end
	if ( not lineB ) then return false end

	local temp = nil

	temp = lineA.item.streamradio_url
	lineA.item.streamradio_url = lineB.item.streamradio_url
	lineB.item.streamradio_url = temp

	temp = lineA.item.streamradio_name
	lineA.item.streamradio_name = lineB.item.streamradio_name
	lineB.item.streamradio_name = temp

	temp = lineA.url
	lineA.url = lineB.url
	lineB.url = temp

	temp = lineA.name
	lineA.name = lineB.name
	lineB.name = temp

	lineA.item:SetColumnText( 2, lineA.name )
	lineA.item:SetColumnText( 3, lineA.url )

	lineB.item:SetColumnText( 2, lineB.name )
	lineB.item:SetColumnText( 3, lineB.url )

	self:CleanUpPlaylist()

	self:MarkPlaylistTextShouldUpdate()
	return true
end

function PANEL:MovePlaylistItemUp( item )
	if ( not IsValid( item ) ) then return false end
	if ( not self.PlaylistItems ) then return false end
	if self:IsLoading( ) then return false end

	local id = item.streamradio_id or 0
	if ( id <= 1 ) then return false end

	local nextitem = nil
	for k, Line in pairs( self.Playlist.Sorted or self.Playlist:GetLines() or {} ) do
		if ( not Line.streamradio_id ) then continue end
		if ( not item.streamradio_id ) then continue end

		if (Line.streamradio_id ~= item.streamradio_id) then
			nextitem = Line
			continue
		end
		break
	end

	if ( not self:SwapItem( item, nextitem ) ) then return false end
	if ( not self:SelectPlaylistItem( nextitem ) ) then return false end

	self:MarkPlaylistTextShouldUpdate()
	return true
end

function PANEL:MovePlaylistItemDown( item )
	if ( not IsValid( item ) ) then return false end
	if ( not self.PlaylistItems ) then return false end
	if self:IsLoading( ) then return false end

	local id = item.streamradio_id or 0
	if ( id > #self.PlaylistItems ) then return false end

	local nextitem = nil
	for k, Line in pairs( self.Playlist.Sorted or self.Playlist:GetLines() or {} ) do
		if ( not Line.streamradio_id ) then continue end
		if ( not item.streamradio_id ) then continue end

		if (Line.streamradio_id == item.streamradio_id) then
			nextitem = Line
			continue
		end
		if ( not IsValid( nextitem ) ) then continue end

		if (nextitem.streamradio_id == item.streamradio_id) then
			nextitem = Line
			break
		end
	end

	if ( not self:SwapItem( item, nextitem ) ) then return false end
	if ( not self:SelectPlaylistItem( nextitem ) ) then return false end

	self:MarkPlaylistTextShouldUpdate()
	return true
end

function PANEL:ApplyPlaylistSort( )
	if not self.PlaylistItems then
		self.PlaylistItems = {}
		return
	end

	local tmpTab = self:GetEmptyPlaylistItems()
	local i = 0

	for k, v in pairs( self.Playlist.Sorted or self.Playlist:GetLines() or {} ) do
		if ( not IsValid( v ) ) then continue end

		v.streamradio_name = v.streamradio_name or ""
		v.streamradio_url = v.streamradio_url or ""

		if ( v.streamradio_name == "" ) then continue end
		if ( v.streamradio_url == "" ) then continue end

		i = i + 1
		v.streamradio_id = i

		v:SetColumnText( 1, v.streamradio_id )
		v:SetColumnText( 2, v.streamradio_name )
		v:SetColumnText( 3, v.streamradio_url )

		tmpTab[i] =  {
			url = v.streamradio_url,
			name = v.streamradio_name,
			item = v
		}
	end

	self.PlaylistItems = tmpTab
	self:MarkPlaylistTextShouldUpdate()
end

function PANEL:CleanUpPlaylist( )
	if not self.PlaylistItems then
		self.PlaylistItems = {}
		return
	end

	local tmpTab = self:GetEmptyPlaylistItems()
	local i = 0

	for k, v in pairs( self.PlaylistItems ) do
		if isstring( k ) then
			continue
		end

		local item = v.item
		if ( not IsValid( item ) ) then continue end

		item.streamradio_url = v.url or ""
		item.streamradio_name = v.name or ""

		if ( item.streamradio_name == "" ) then continue end
		if ( item.streamradio_url == "" ) then continue end

		i = i + 1
		item.streamradio_id = i

		item:SetColumnText( 1, item.streamradio_id )
		item:SetColumnText( 2, item.streamradio_name )
		item:SetColumnText( 3, item.streamradio_url )

		tmpTab[i] = {
			url = item.streamradio_url,
			name = item.streamradio_name,
			item = item
		}
	end

	self.PlaylistItems = tmpTab
	self:MarkPlaylistTextShouldUpdate()
end

function PANEL:GetPath( )
	return self.m_strPath, self.Format
end

function PANEL:SetPath( filepath, filetype, force, nofullclear )
	filepath = filepath or ""
	filepath = string.Trim( filepath, "\\" )
	filepath = string.Trim( filepath, "/" )
	filepath = string.Trim( filepath, "\\" )
	filepath = string.Trim( filepath, "/" )

	filetype = filetype or StreamRadioLib.TYPE_FOLDER
	local isFolder = StreamRadioLib.Filesystem.IsFolder(filetype)

	local function LoadFile( self, isFolder, filepath, filetype )
		if self:IsLoading() then return end

		if isFolder then
			if nofullclear then
				self:ClearFiles( )
			else
				self:Clear( )
			end

			self:Lock( true )
			self.m_strFolderPath = filepath
		else
			self:ClearPlaylist()
			self:Lock( true )

			local folderpath = string.GetPathFromFilename( filepath ) or ""
			folderpath = string.Trim( folderpath, "\\" )
			folderpath = string.Trim( folderpath, "/" )
			folderpath = string.Trim( folderpath, "\\" )
			folderpath = string.Trim( folderpath, "/" )

			self.m_strFolderPath = folderpath
		end

		self.m_strPath = filepath
		self.Format = filetype

		local backpath = string.GetPathFromFilename( filepath ) or ""

		if filepath ~= "" and not IsValid(self.BackItem) and isFolder then
			self.BackItem = self.Files:AddLine( "../", "" )
			self.BackItem.streamradio_path = backpath
			self.BackItem.streamradio_filetype = StreamRadioLib.TYPE_FOLDER
		end

		self:UpdateListNameLabel()

		local ListenID = StreamRadioLib.Editor.ListenToPath( filepath )
		StreamRadioLib.Editor.SetCallback( self.Callback, self )

		LIBNet.Start( "Editor_Request_Files" )
			StreamRadioLib.NetSendFileEditor( filepath, "", filetype or StreamRadioLib.TYPE_FOLDER, ListenID )
		net.SendToServer( )
	end

	if force or isFolder then
		LoadFile( self, isFolder, filepath, filetype )
	else
		AsForSave( self, LoadFile, isFolder, filepath, filetype )
	end
end

function PANEL:SetUnsaved( bool )
	self.m_bUnsaved = bool

	if not bool then
		self.NewFileItem = nil
	end

	self:UpdateListNameLabel( )
end

function PANEL:UpdateListNameLabel( )
	if not IsValid(self.ListNameLabel) then return end
	self.ListNameLabel:SetText((self.m_bUnsaved and "*" or "") .. (self.m_strPath or ""))
end

vgui.Register( "Streamradio_VGUI_PlaylistEditor", PANEL, "DPanel" )

return true


--lua/streamradio_core/interfaces/dropbox.lua:
return gluapack()()
--lua/streamradio_core/filesystem/addon-web-radio.lua:
local RADIOFS = RADIOFS
if not istable( RADIOFS ) then
	StreamRadioLib.Filesystem.Load()
	return
end

local g_addonname = "Web-Radio"
local g_addonid = ""

RADIOFS.name = g_addonname
RADIOFS.type = g_addonname
RADIOFS.icon = StreamRadioLib.GetPNGIcon("format_radio", true)

RADIOFS.addonname = g_addonname
RADIOFS.addonid = g_addonid

RADIOFS.priority = 90
RADIOFS.nocreate = true
RADIOFS.loadToWhitelist = true

RADIOFS._filepath = "webradiobookmarks.txt"
RADIOFS._filename = g_addonname
RADIOFS._filenamelower = string.lower(RADIOFS._filename)

function RADIOFS:IsInFolder(vpath)
	local levels = self:GetPathLevels(vpath)
	local firstlevel = levels[1] or ""

	if firstlevel ~= ":addons" then
		return false
	end

	return true
end

function RADIOFS:IsAddonFile(vpath)
	if not self:IsInFolder(vpath) then
		return false
	end

	vpath = string.lower(string.GetFileFromFilename(vpath))

	if vpath ~= self._filenamelower then
		return false
	end

	return true
end

function RADIOFS:IsInstalled()
	if CLIENT then
		return true
	end

	if self._isInstalled ~= nil then
		return self._isInstalled
	end

	if not file.Exists(self._filepath, "DATA") then
		self._isInstalled = false
		return self._isInstalled
	end

	self._isInstalled = true
	return self._isInstalled
end

function RADIOFS:IsType(globalpath, vpath)
	return self:IsAddonFile(vpath)
end

function RADIOFS:Find(globalpath, vfolder, callback)
	if not self:IsInstalled() then
		callback(false, nil, nil)
		return false
	end

	if vfolder == "" then
		callback(true, nil, {":addons"})
		return true
	end

	if not self:IsInFolder(vfolder) then
		callback(false, nil, nil)
		return false
	end

	callback(true, {self._filename}, nil)
	return true
end

function RADIOFS:Exists(globalpath, vpath)
	if not self:IsInstalled() then
		return false
	end

	if not self:IsAddonFile(vpath) then
		return false
	end

	return true
end

RADIOFS.Delete = nil

local function decodeAddonfile(RawPlaylist)
	local RawPlaylistTab = string.Split( RawPlaylist, "\n" )
	local Playlist = {}

	for i = 1, #RawPlaylistTab do
		local entry = string.Split( RawPlaylistTab[i], "#:#" )
		local name = string.Trim( entry[1] or "" )
		local url = string.Trim( entry[2] or "" )

		if name == "" then
			name = url
		end

		if url == "" then
			continue
		end

		local item = {
			name = name,
			url = url
		}

		table.insert(Playlist, item)
	end

	return Playlist
end

function RADIOFS:Read(globalpath, vpath, callback)
	globalpath = self._filepath

	file.AsyncRead(globalpath, "DATA", function(fileName, gamePath, status, data)
		if status ~= FSASYNC_OK then
			callback(false, nil)
			return
		end

		local RawPlaylist = string.Trim(data or "")
		if RawPlaylist == "" then
			callback(true, {})
			return
		end

		local Playlist = decodeAddonfile(RawPlaylist)
		if not Playlist then
			callback(false, nil)
			return
		end

		callback(true, Playlist)
	end)

	return true
end

function RADIOFS:Write(globalpath, vpath, data, callback)
	globalpath = self._filepath
	if not self:CreateDirectoryForFile(globalpath) then
		callback(false)
		return false
	end

	local f = file.Open(globalpath, "w", "DATA")
	if not f then
		callback(false)
		return false
	end

	local dataOut = {}
	local Seperator = "#:#"

	for i, v in ipairs(data) do
		local name = string.Trim( string.Replace( v.name, Seperator, "" ) )
		local url = string.Trim( string.Replace( v.url, Seperator, "" ) )

		dataOut[#dataOut + 1] = string.format( "%s" .. Seperator .. "%s" .. Seperator .. "Radio Stream\n", name, url )
	end

	local DataString = table.concat(dataOut, "")

	DataString = string.Trim(DataString)

	f:Write(DataString)
	f:Close()

	callback(true)
	return true
end

return true


--lua/streamradio_core/filesystem/vdf.lua:
return gluapack()()
--addons/glorifiedleveling/lua/autorun/sv_glorifiedleveling_resources.lua:
return gluapack()()
--lua/svmod/gui/cl_circles.lua:
if SERVER then return false end

local _R = debug.getregistry()
if _R.SVMODCircles then return _R.SVMODCircles end

local CIRCLE = {}
CIRCLE.__index = CIRCLE

CIRCLE_FILLED = 0
CIRCLE_OUTLINED = 1
CIRCLE_BLURRED = 2

local New
do
	local err_number = "bad argument #%i to 'New' (number expected, got %s)"

	function New(t, r, x, y, ...)
		assert(isnumber(t), string.format(err_number, 1, type(t)))
		assert(isnumber(r), string.format(err_number, 2, type(r)))
		assert(isnumber(x), string.format(err_number, 3, type(x)))
		assert(isnumber(y), string.format(err_number, 4, type(y)))

		local circle = setmetatable({}, CIRCLE)

		circle:SetType(t)
		circle:SetRadius(r)
		circle:SetX(x)
		circle:SetY(y)

		circle:SetVertices({ Count = 0 })

		if t == CIRCLE_OUTLINED then
			local outline_width = ...
			assert(outline_width == nil or isnumber(outline_width), string.format(err_number, 5, type(outline_width)))

			circle:SetOutlineWidth(outline_width)
		elseif t == CIRCLE_BLURRED then
			local blur_layers, blur_density = ...
			assert(blur_layers == nil or isnumber(blur_layers), string.format(err_number, 5, type(blur_layers)))
			assert(blur_density == nil or isnumber(blur_density), string.format(err_number, 6, type(blur_density)))

			circle:SetBlurLayers(blur_layers)
			circle:SetBlurDensity(blur_density)
		end

		return circle
	end
end

local RotateVertices
do
	local err_table = "bad argument #1 to 'RotateVertices' (table expected, got %s)"
	local err_number = "bad argument #%i to 'RotateVertices' (number expected, got %s)"

	function RotateVertices(vertices, ox, oy, rotation, rotate_uv)
		assert(istable(vertices), string.format(err_table, type(vertices)))
		assert(isnumber(ox), string.format(err_number, 2, type(ox)))
		assert(isnumber(oy), string.format(err_number, 3, type(oy)))
		assert(isnumber(rotation), string.format(err_number, 4, type(rotation)))

		local rotation = math.rad(rotation)
		local c = math.cos(rotation)
		local s = math.sin(rotation)

		for i = 1, vertices.Count or #vertices do
			local vertex = vertices[i]
			local vx, vy = vertex.x, vertex.y

			vx = vx - ox
			vy = vy - oy

			vertex.x = ox + (vx * c - vy * s)
			vertex.y = oy + (vx * s + vy * c)

			if rotate_uv == false then
				local u, v = vertex.u, vertex.v
				u, v = u - 0.5, v - 0.5

				vertex.u = 0.5 + (u * c - v * s)
				vertex.v = 0.5 + (u * s + v * c)
			end
		end
	end
end

local CalculateVertices
do
	local err_number = "bad argument #%i to 'CalculateVertices' (number expected, got %s)"

	function CalculateVertices(x, y, radius, rotation, start_angle, end_angle, distance, rotate_uv)
		assert(isnumber(x), string.format(err_number, 1, type(x)))
		assert(isnumber(y), string.format(err_number, 2, type(y)))
		assert(isnumber(radius), string.format(err_number, 3, type(radius)))
		assert(isnumber(rotation), string.format(err_number, 4, type(rotation)))
		assert(isnumber(start_angle), string.format(err_number, 5, type(start_angle)))
		assert(isnumber(end_angle), string.format(err_number, 6, type(end_angle)))
		assert(isnumber(distance), string.format(err_number, 7, type(distance)))

		local vertices = { Count = 0 }
		local step = distance / radius

		local count = 0

		local rad_start_angle = math.rad(start_angle)
		local rad_end_angle = math.rad(end_angle)
		local rad_rotation = math.rad(rotation)

		for a = rad_start_angle, rad_end_angle + step, step do
			a = math.min(a, rad_end_angle)

			local c = math.cos(a + rad_rotation)
			local s = math.sin(a + rad_rotation)

			local vertex = {
				x = x + c * radius,
				y = y + s * radius,
			}

			if rotate_uv == false then
				vertex.u = 0.5 + math.cos(a) / 2
				vertex.v = 0.5 + math.sin(a) / 2
			else
				vertex.u = 0.5 + c / 2
				vertex.v = 0.5 + s / 2
			end

			vertices.Count = vertices.Count + 1
			vertices[vertices.Count] = vertex

			count = count + 1
			if count > 250 then
				SVMOD:PrintConsole(SVMOD.LOG.Alert,"svmod warning anti-crash (step = " .. step .. ", iterations= " .. ((rad_end_angle + step - rad_start_angle) / step) .. "), report it to TomLaVachette please!")
				break
			end
		end

		if end_angle - start_angle ~= 360 then
			table.insert(vertices, 1, {
				x = x, y = y,
				u = 0.5, v = 0.5,
			})

			vertices.Count = vertices.Count + 1
		else
			table.remove(vertices)
			vertices.Count = vertices.Count - 1
		end

		return vertices
	end
end

function CIRCLE:__tostring()
	return string.format("Circle: %p", self)
end

function CIRCLE:Copy()
	return table.Copy(self)
end

function CIRCLE:IsValid()
	return (
		not self.m_Dirty and
			self.m_Vertices.Count >= 3 and
			self.m_Radius >= 1 and
			self.m_Distance >= 1
	)
end

function CIRCLE:Calculate()
	local rotate_uv = self.m_RotateMaterial

	local radius = self.m_Radius
	local x, y = self.m_X, self.m_Y

	local rotation = self.m_Rotation
	local start_angle = self.m_StartAngle
	local end_angle = self.m_EndAngle

	local distance = self.m_Distance

	assert(radius >= 1, string.format("circle radius should be >= 1 (%.4f)", radius))
	assert(distance >= 1, string.format("circle distance should be >= 1 (%.4f)", distance))

	self:SetVertices(CalculateVertices(x, y, radius, rotation, start_angle, end_angle, distance, rotate_uv))

	if self.m_Type == CIRCLE_OUTLINED then
		local inner = self.m_ChildCircle or self:Copy()
		local inner_r = radius - self.m_OutlineWidth

		if inner_r >= radius then
			self:SetShouldRender(false)
		else
			if inner_r >= 1 then
				inner:SetType(CIRCLE_FILLED)

				inner:SetRadius(inner_r)
				inner:SetAngles(start_angle, end_angle)

				inner:SetColor(false)
				inner:SetMaterial(false)

				inner:SetShouldRender(true)
			else
				inner:SetShouldRender(false)
			end

			self:SetShouldRender(true)
		end

		self:SetChildCircle(inner)
	elseif self.m_ChildCircle then
		self.m_ChildCircle = nil
	end

	self:SetDirty(false)
end

do
	local blur = Material("pp/blurscreen")

	function CIRCLE:__call()
		if self.m_Dirty then
			self:Calculate()
		end

		if not self.m_ShouldRender or not self:IsValid() then
			return false
		end

		do
			local col, mat = self.m_Color, self.m_Material

			if IsColor(col) then
				if col.a <= 0 then return end
				surface.SetDrawColor(col.r, col.g, col.b, col.a)
			end

			if mat == true then
				draw.NoTexture()
			elseif TypeID(mat) == TYPE_MATERIAL then
				surface.SetMaterial(mat)
			end
		end

		if self.m_Type == CIRCLE_OUTLINED then
			render.ClearStencil()

			render.SetStencilEnable(true)
			render.SetStencilTestMask(0xFF)
			render.SetStencilWriteMask(0xFF)
			render.SetStencilReferenceValue(0x01)

			render.SetStencilCompareFunction(STENCIL_NEVER)
			render.SetStencilFailOperation(STENCIL_REPLACE)
			render.SetStencilZFailOperation(STENCIL_REPLACE)

			self.m_ChildCircle()

			render.SetStencilCompareFunction(STENCIL_GREATER)
			render.SetStencilFailOperation(STENCIL_KEEP)
			render.SetStencilZFailOperation(STENCIL_KEEP)

			surface.DrawPoly(self.m_Vertices)
			render.SetStencilEnable(false)
		elseif self.m_Type == CIRCLE_BLURRED then
			render.ClearStencil()

			render.SetStencilEnable(true)
			render.SetStencilTestMask(0xFF)
			render.SetStencilWriteMask(0xFF)
			render.SetStencilReferenceValue(0x01)

			render.SetStencilCompareFunction(STENCIL_NEVER)
			render.SetStencilFailOperation(STENCIL_REPLACE)
			render.SetStencilZFailOperation(STENCIL_REPLACE)

			surface.DrawPoly(self.m_Vertices)

			render.SetStencilCompareFunction(STENCIL_LESSEQUAL)
			render.SetStencilFailOperation(STENCIL_KEEP)
			render.SetStencilZFailOperation(STENCIL_KEEP)

			surface.SetMaterial(blur)

			local sw, sh = ScrW(), ScrH()

			for i = 1, self.m_BlurLayers do
				blur:SetFloat("$blur", (i / self.m_BlurLayers) * self.m_BlurDensity)
				blur:Recompute()

				render.UpdateScreenEffectTexture()
				surface.DrawTexturedRect(0, 0, sw, sh)
			end
			render.SetStencilEnable(false)
		else
			surface.DrawPoly(self.m_Vertices)
		end

		return true
	end
end

do
	local err_number = "bad argument #%i to 'Translate' (number expected, got %s)"

	function CIRCLE:Translate(x, y)
		assert(isnumber(x), string.format(err_number, 1, type(x)))
		assert(isnumber(y), string.format(err_number, 2, type(y)))
		if x == 0 and y == 0 then return end

		self.m_X = self.m_X + x
		self.m_Y = self.m_Y + y

		if not self:IsValid() then return end

		for i = 1, self.m_Vertices.Count do
			local vertex = self.m_Vertices[i]

			vertex.x = vertex.x + x
			vertex.y = vertex.y + y
		end

		if self.m_Type == CIRCLE_OUTLINED and self.m_ChildCircle then
			self.m_ChildCircle:Translate(x, y)
		end
	end
end

do
	local err_number = "bad argument #1 to 'Scale' (number expected, got %s)"

	function CIRCLE:Scale(scale)
		assert(isnumber(scale), string.format(err_number, type(scale)))
		if scale == 1 then return end

		self.m_Radius = self.m_Radius * scale

		if not self:IsValid() then return end

		local x, y = self.m_X, self.m_Y

		for i = 1, self.m_Vertices.Count do
			local vertex = self.m_Vertices[i]

			vertex.x = x + (vertex.x - x) * scale
			vertex.y = y + (vertex.y - y) * scale
		end

		if self.m_Type == CIRCLE_OUTLINED and self.m_ChildCircle then
			self.m_ChildCircle:Scale(scale)
		end
	end
end

do
	local err_number = "bad argument #1 to 'Rotate' (number expected, got %s)"

	function CIRCLE:Rotate(rotation)
		assert(isnumber(rotation), string.format(err_number, type(rotation)))
		if rotation == 0 then return end

		self.m_Rotation = self.m_Rotation + rotation

		if not self:IsValid() then return end

		local x, y = self.m_X, self.m_Y
		local vertices = self.m_Vertices
		local rotate_uv = self.m_RotateMaterial

		RotateVertices(vertices, x, y, rotation, rotate_uv)

		if self.m_Type == CIRCLE_OUTLINED and self.m_ChildCircle then
			self.m_ChildCircle:Rotate(rotation)
		end
	end
end

do
	local function AccessorFunc(name, default, dirty, callback)
		local varname = "m_" .. name

		CIRCLE["Get" .. name] = function(self)
			return self[varname]
		end

		CIRCLE["Set" .. name] = function(self, value)
			if default ~= nil and value == nil then
				value = default
			end

			if self[varname] ~= value then
				if dirty then
					self[dirty] = true
				end

				if isfunction(callback) then
					local new = callback(self, self[varname], value)
					value = new ~= nil and new or value
				end

				self[varname] = value
			end
		end

		CIRCLE[varname] = default
	end

	local function OffsetVerticesX(circle, old, new)
		if not circle:IsValid() then return end

		circle:Translate(new - old, 0)

		if circle.m_Type == CIRCLE_OUTLINED and circle.m_ChildCircle then
			OffsetVerticesX(circle.m_ChildCircle, old, new)
		end

		return new
	end

	local function OffsetVerticesY(circle, old, new)
		if not circle:IsValid() then return end

		circle:Translate(0, new - old)

		if circle.m_Type == CIRCLE_OUTLINED and circle.m_ChildCircle then
			OffsetVerticesY(circle.m_ChildCircle, old, new)
		end

		return new
	end

	local function UpdateRotation(circle, old, new)
		if not circle:IsValid() then return end

		local vertices = circle.m_Vertices
		local x, y = circle.m_X, circle.m_Y
		local rotation = new - old
		local rotate_uv = circle.m_RotateMaterial

		RotateVertices(vertices, x, y, rotation, rotate_uv)

		if circle.m_Type == CIRCLE_OUTLINED and circle.m_ChildCircle then
			UpdateRotation(circle.m_ChildCircle, old, new)
		end

		return new
	end

	-- These are set internally. Only use them if you know what you're doing.
	AccessorFunc("Dirty", true)
	AccessorFunc("Vertices", false)
	AccessorFunc("ChildCircle", false)
	AccessorFunc("ShouldRender", true)

	AccessorFunc("Color", false)                -- The colour you want the circle to be. If set to false then surface.SetDrawColor's can be used.
	AccessorFunc("Material", false)                -- The material you want the circle to render. If set to false then surface.SetMaterial can be used.
	AccessorFunc("RotateMaterial", true)            -- Sets whether or not the circle's UV points should be rotated with the vertices.

	AccessorFunc("Type", CIRCLE_FILLED, "m_Dirty")        -- The circle's type.
	AccessorFunc("X", 0, false, OffsetVerticesX)        -- The circle's X position relative to the top left of the screen.
	AccessorFunc("Y", 0, false, OffsetVerticesY)        -- The circle's Y position relative to the top left of the screen.
	AccessorFunc("Radius", 8, "m_Dirty")            -- The circle's radius.
	AccessorFunc("Rotation", 0, false, UpdateRotation)    -- The circle's rotation, measured in degrees.
	AccessorFunc("StartAngle", 0, "m_Dirty")        -- The circle's start angle, measured in degrees.
	AccessorFunc("EndAngle", 360, "m_Dirty")        -- The circle's end angle, measured in degrees.
	AccessorFunc("Distance", 10, "m_Dirty")            -- The maximum distance between each of the circle's vertices. Set to false to use segments instead. This should typically be used for large circles in 3D2D.

	AccessorFunc("BlurLayers", 3)                -- The circle's blur layers if Type is set to CIRCLE_BLURRED.
	AccessorFunc("BlurDensity", 2)                -- The circle's blur density if Type is set to CIRCLE_BLURRED.
	AccessorFunc("OutlineWidth", 10, "m_Dirty")        -- The circle's outline width if Type is set to CIRCLE_OUTLINED.

	function CIRCLE:SetPos(x, y)
		x = tonumber(x) or 0
		y = tonumber(y) or 0

		self:Translate(x - self.m_X, y - self.m_Y)
	end

	function CIRCLE:SetAngles(s, e)
		s = tonumber(s) or self.m_StartAngle
		e = tonumber(e) or self.m_EndAngle

		self:SetDirty(self.m_Dirty or s ~= self.m_StartAngle or e ~= self.m_EndAngle)

		self.m_StartAngle = s
		self.m_EndAngle = e
	end

	function CIRCLE:GetPos()
		return self.m_X, self.m_Y
	end

	function CIRCLE:GetAngles()
		return self.m_StartAngle, self.m_EndAngle
	end
end

_R.SVMODCircles = {
	_MT = CIRCLE,

	New = New,
	RotateVertices = RotateVertices,
	CalculateVertices = CalculateVertices,
}

return _R.SVMODCircles
--lua/svmod/gui/editor/cl_parts.lua:
function SVMOD:EDITOR_Parts(panel, veh, data)
	panel:Clear()

	local leftPanel = vgui.Create("DPanel", panel)
	leftPanel:Dock(LEFT)
	leftPanel:DockPadding(0, 0, 10, 0)
	leftPanel:SetSize(100, 0)
	leftPanel:SetPaintBackground(false)

	local listView = SVMOD:CreateListView(leftPanel)
	listView:SetHideHeaders(true)
	listView:Dock(FILL)
	listView:AddColumn("ID")
	listView:SetMultiSelect(false)

	local addPart

	local addButton = SVMOD:CreateButton(leftPanel, "ADD", function()
		local index = table.insert(data, {
			Position = Vector(0, 0, 0),
			Angles = Angle(0, 0, 0),
			Type = "engine"
		})
		addPart(data[index])
	end)
	addButton:SetSize(0, 30)
	addButton:Dock(BOTTOM)

	local centerPanel = vgui.Create("DPanel", panel)
	centerPanel:Dock(FILL)
	centerPanel:SetPaintBackground(false)

	local function createNumSlidePanel(name, defaultValue, minValue, maxValue)
		local numSlider = SVMOD:CreateNumSlidePanel(centerPanel, name, function() end)
		numSlider:SetSize(400, 30)
		numSlider:SetValue(defaultValue)
		numSlider:SetMinValue(minValue)
		numSlider:SetMaxValue(maxValue)
		numSlider:SetUnit(" ")
		numSlider:SetRealTime(true)

		return numSlider
	end

	-- -------------------
	--  FUNCTIONS
	-- -------------------

	addPart = function(data)
		local max = 0
		for _, line in pairs(listView:GetLines()) do
			local index = line:GetIndex()
			if index > max then
				max = index
			end
		end

		local line = listView:AddLine(max + 1)
		line.Data = data

		return line
	end

	local function removePart(lineID, line)
		local index = line:GetIndex()

		table.remove(data, index)

		for _, v in pairs(listView:GetLines()) do
			local i = v:GetIndex()
			if i > index then
				v:SetColumnText(1, i - 1)
			end
		end

		listView:RemoveLine(lineID)
	end

	local function upPart(index)
		local line = listView:GetLine(index)
		lineIndex = line:GetIndex()

		for _, v in pairs(listView:GetLines()) do
			local tempIndex = v:GetIndex()
			if tempIndex == lineIndex - 1 then
				data[lineIndex], data[tempIndex] = data[tempIndex], data[lineIndex]
				line.Data, v.Data = v.Data, line.Data
				listView:GetLine(tempIndex):SetColumnText(1, tempIndex)
				listView:GetLine(lineIndex):SetColumnText(1, lineIndex)
				break
			end
		end
	end

	local function downPart(index)
		local line = listView:GetLine(index)
		lineIndex = line:GetIndex()

		for _, v in pairs(listView:GetLines()) do
			local tempIndex = v:GetIndex()
			if tempIndex == lineIndex + 1 then
				data[lineIndex], data[tempIndex] = data[tempIndex], data[lineIndex]
				line.Data, v.Data = v.Data, line.Data
				listView:GetLine(tempIndex):SetColumnText(1, tempIndex)
				listView:GetLine(lineIndex):SetColumnText(1, lineIndex)
				break
			end
		end
	end

	for _, v in ipairs(data) do
		addPart(v)
	end

	listView.OnRowRightClick = function(_, lineID, line)
		local menu = DermaMenu()

		menu:AddOption("Up", function()
			upPart(lineID)
		end):SetIcon("icon16/arrow_up.png")

		menu:AddOption("Down", function()
			downPart(lineID)
		end):SetIcon("icon16/arrow_down.png")

		menu:AddOption("Symmetric", function()
			local index = table.insert(data, {
				Position = Vector(-line.Data.Position.x, line.Data.Position.y, line.Data.Position.z),
				Angles = Angle(line.Data.Angles.x, line.Data.Angles.y, line.Data.Angles.z),
				Type = "engine"
			})

			addPart(data[index])

			newPart = data[index]

			newPart.Angles.z = line.Data.Angles.z - 180
			if newPart.Angles.z < -180 then
				newPart.Angles.z = 180 - (newPart.Angles.z + 180)
			end
		end):SetIcon("icon16/arrow_refresh.png")

		menu:AddOption("Delete", function()
			removePart(lineID, line)
		end):SetIcon("icon16/cross.png")

		menu:Open()
	end

	local lastRowSelected

	listView.OnRowSelected = function(_, _, e)
		centerPanel:Clear()

		e.Data.Health = 100
		if lastRowSelected and lastRowSelected.Data then
			lastRowSelected.Data.Health = 50
		end
		lastRowSelected = e

		local title = SVMOD:CreateTitle(centerPanel, "SETTINGS")
		title:DockMargin(0, 5, 0, 0)

		local wheelType

		SVMOD:CreateSettingPanel(centerPanel, "Part type", {
			{
				Name = "Engine",
				Color = Color(59, 217, 85),
				HoverColor = Color(156, 255, 161),
				IsSelected = (e.Data.Type == "engine"),
				DoClick = function()
					wheelType:Hide()
					e.Data.Type = "engine"
				end
			},
			{
				Name = "Wheel",
				Color = Color(59, 217, 85),
				HoverColor = Color(156, 255, 161),
				IsSelected = string.StartWith(e.Data.Type, "wheel"),
				DoClick = function()
					e.Data.Type = "wheel_fl"
					wheelType:Show()
				end
			}
		})

		wheelType = SVMOD:CreateSettingPanel(centerPanel, "Wheel type", {
			{
				Name = "Front Left",
				Color = Color(59, 217, 85),
				HoverColor = Color(156, 255, 161),
				IsSelected = (not string.StartWith(e.Data.Type, "wheel")) or (e.Data.Type == "wheel_fl"),
				DoClick = function()
					e.Data.Type = "wheel_fl"
				end
			},
			{
				Name = "Front Right",
				Color = Color(59, 217, 85),
				HoverColor = Color(156, 255, 161),
				IsSelected = (e.Data.Type == "wheel_fr"),
				DoClick = function()
					e.Data.Type = "wheel_fr"
				end
			},
			{
				Name = "Rear Left",
				Color = Color(59, 217, 85),
				HoverColor = Color(156, 255, 161),
				IsSelected = (e.Data.Type == "wheel_rl"),
				DoClick = function()
					e.Data.Type = "wheel_rl"
				end
			},
			{
				Name = "Rear Right",
				Color = Color(59, 217, 85),
				HoverColor = Color(156, 255, 161),
				IsSelected = (e.Data.Type == "wheel_rr"),
				DoClick = function()
					e.Data.Type = "wheel_rr"
				end
			}
		})
		if not string.StartWith(e.Data.Type, "wheel") then
			wheelType:Hide()
		end

		title = SVMOD:CreateTitle(centerPanel, "LOCAL POSITIONS")
		title:DockMargin(0, 30, 0, 0)

		local button = SVMOD:CreateButton(title, "EyePos", function()
			local trace = LocalPlayer():GetEyeTrace()

			if IsValid(trace.Entity) and trace.Entity:IsVehicle() then
				e.Data.Position = trace.Entity:WorldToLocal(trace.HitPos)

				xPositionNumSlider:SetValue(e.Data.Position.x)
				yPositionNumSlider:SetValue(e.Data.Position.y)
				zPositionNumSlider:SetValue(e.Data.Position.z)
			end
		end)
		button:Dock(RIGHT)

		xPositionNumSlider = createNumSlidePanel("X Position", e.Data.Position.x, -200, 200)
		xPositionNumSlider:SetFunction(function(val)
			e.Data.Position.x = val
		end)

		yPositionNumSlider = createNumSlidePanel("Y Position", e.Data.Position.y, -200, 200)
		yPositionNumSlider:SetFunction(function(val)
			e.Data.Position.y = val
		end)

		zPositionNumSlider = createNumSlidePanel("Z Position", e.Data.Position.z, -200, 200)
		zPositionNumSlider:SetFunction(function(val)
			e.Data.Position.z = val
		end)

		title = SVMOD:CreateTitle(centerPanel, "ANGLES")
		title:DockMargin(0, 30, 0, 0)

		local xAngleNumSlider = createNumSlidePanel("Y Angle", e.Data.Angles.x, -180, 180)
		xAngleNumSlider:SetFunction(function(val)
			e.Data.Angles.x = val
		end)

		local yAngleNumSlider = createNumSlidePanel("P Angle", e.Data.Angles.y, -180, 180)
		yAngleNumSlider:SetFunction(function(val)
			e.Data.Angles.y = val
		end)

		local zAngleNumSlider = createNumSlidePanel("R Angle", e.Data.Angles.z, -180, 180)
		zAngleNumSlider:SetFunction(function(val)
			e.Data.Angles.z = val
		end)
	end

	SVMOD.VehicleRenderedParts = veh

	centerPanel.OnRemove = function()
		SVMOD.VehicleRenderedParts = nil
	end

	for _, v in ipairs(data) do
		v.Health = 50
	end
end
--lua/svmod/gui/settings/cl_sounds.lua:
function SVMOD:GUI_Sounds(panel, data)
	panel:Clear()

	SVMOD:CreateTitle(panel, language.GetPhrase("svmod.sounds.horn"))

	SVMOD:CreateSettingPanel(panel, language.GetPhrase("svmod.sounds.enable_horn"), {
		{
			Name = language.GetPhrase("svmod.enable"),
			Color = Color(59, 217, 85),
			HoverColor = Color(156, 255, 161),
			IsSelected = (data.HornIsEnabled == true),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("Horn")
				net.WriteString("IsEnabled")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(true)
				net.SendToServer()
			end
		},
		{
			Name = language.GetPhrase("svmod.disable"),
			Color = Color(173, 48, 43),
			HoverColor = Color(224, 62, 56),
			IsSelected = (data.HornIsEnabled == false),
			DoClick = function()
				net.Start("SV_Settings")
				net.WriteString("Horn")
				net.WriteString("IsEnabled")
				net.WriteUInt(0, 2) -- bool
				net.WriteBool(false)
				net.SendToServer()
			end
		}
	})
end
--lua/svmod/health/sh_wheel.lua:
return gluapack()()
--lua/svmod/health/sh_wheel.lua:
hook.Add("SV_LoadVehicle", "SV_InitWheels", function(veh)
	for _, v in ipairs(veh:GetAttachments()) do
		if v.name == "wheel_fl" then
			veh.SV_WheelFrontLeftID = v.id
		elseif v.name == "wheel_fr" then
			veh.SV_WheelFrontRightID = v.id
		elseif v.name == "wheel_rl" then
			veh.SV_WheelRearLeftID = v.id
		elseif v.name == "wheel_rr" then
			veh.SV_WheelRearRightID = v.id
		end
	end
end)

function SVMOD.Metatable:SV_GetWheelFLHealth()
	local veh = self:SV_GetDriverSeat()
	return veh:GetNW2Int("SV_WheelFLHealth", 0)
end

function SVMOD.Metatable:SV_GetWheelFRHealth()
	local veh = self:SV_GetDriverSeat()
	return veh:GetNW2Int("SV_WheelFRHealth", 0)
end

function SVMOD.Metatable:SV_GetWheelRLHealth()
	local veh = self:SV_GetDriverSeat()
	return veh:GetNW2Int("SV_WheelRLHealth", 0)
end

function SVMOD.Metatable:SV_GetWheelRRHealth()
	local veh = self:SV_GetDriverSeat()
	return veh:GetNW2Int("SV_WheelRRHealth", 0)
end

function SVMOD.Metatable:SV_IsWheelFLPunctured()
	return self:GetNW2Bool("SV_IsWheelFLPunctured", false)
end

function SVMOD.Metatable:SV_IsWheelFRPunctured()
	return self:GetNW2Bool("SV_IsWheelFRPunctured", false)
end

function SVMOD.Metatable:SV_IsWheelRLPunctured()
	return self:GetNW2Bool("SV_IsWheelRLPunctured", false)
end

function SVMOD.Metatable:SV_IsWheelRRPunctured()
	return self:GetNW2Bool("SV_IsWheelRRPunctured", false)
end

function SVMOD.Metatable:SV_GetWheelID(type)
	for _, v in ipairs(self:GetAttachments()) do
		if v.name == type then
			return v.id
		end
	end
end

function SVMOD.Metatable:SV_GetNearestWheel(pos)
	local bestWheel
	local bestDistance = 999999

	for _, part in ipairs(self.SV_Data.Parts) do
		if part.WheelID then
			local distance = part.Position:DistToSqr(pos)
			if distance < bestDistance then
				bestWheel = part.WheelID
				bestDistance = distance
			end
		end
	end

	return bestWheel, bestDistance
end
--lua/svmod/lights/cl_lights.lua:
return gluapack()()
--lua/svmod/lights/blinker/cl_blinker.lua:
-- @class SVMOD
-- @clientside

-- Sets the state of the left blinker of the vehicle
-- driven by the player.
-- @tparam boolean result True to enable the left blinker, false to disable
function SVMOD:SetLeftBlinkerState(value)
	local veh = LocalPlayer():GetVehicle()
	if not SVMOD:IsVehicle(veh) or not veh:SV_IsDriverSeat() then return end

	if not value then
		value = false
	end

	net.Start("SV_SetLeftBlinkerState")
	net.WriteBool(value)
	net.SendToServer()
end

-- Sets the state of the right blinker of the vehicle
-- driven by the player.
-- @tparam boolean result True to enable the right blinker, false to disable
function SVMOD:SetRightBlinkerState(value)
	local Vehicle = LocalPlayer():GetVehicle()
	if not SVMOD:IsVehicle(Vehicle) or not Vehicle:SV_IsDriverSeat() then return end

	if not value then
		value = false
	end

	net.Start("SV_SetRightBlinkerState")
	net.WriteBool(value)
	net.SendToServer()
end

net.Receive("SV_TurnLeftBlinker", function()
	local veh = net.ReadEntity()
	if not SVMOD:IsVehicle(veh) then return end
	veh = veh:SV_GetDriverSeat()

	veh.SV_States.LeftBlinkers = net.ReadBool()
	veh.SV_States.RightBlinkers = false

	if veh.SV_States.LeftBlinkers then
		veh:EmitSound("svmod/blinker/switch_on.wav")
	else
		veh:EmitSound("svmod/blinker/switch_off.wav")
	end
end)

net.Receive("SV_TurnRightBlinker", function()
	local veh = net.ReadEntity()
	if not SVMOD:IsVehicle(veh) then return end
	veh = veh:SV_GetDriverSeat()

	veh.SV_States.RightBlinkers = net.ReadBool()
	veh.SV_States.LeftBlinkers = false

	if veh.SV_States.RightBlinkers then
		veh:EmitSound("svmod/blinker/switch_on.wav")
	else
		veh:EmitSound("svmod/blinker/switch_off.wav")
	end
end)

hook.Add("SV_PlayerEnteredVehicle", "SV_AddBlinkerDisablerHook", function(_, veh)
	if not SVMOD.CFG.Lights.DisableBlinkersOnTurn then return end

	hook.Add("VehicleMove", "SV_BlinkerDisabler", function(ply, veh, mv)
		if not SVMOD:IsVehicle(veh) or not veh:SV_IsDriverSeat() then
			hook.Remove("VehicleMove", "SV_BlinkerDisabler")
			return
		end

		if veh:SV_GetLeftBlinkerState() and mv:KeyReleased(IN_MOVELEFT) then
			SVMOD:SetLeftBlinkerState(false)
		elseif veh:SV_GetRightBlinkerState() and mv:KeyReleased(IN_MOVERIGHT) then
			SVMOD:SetRightBlinkerState(false)
		end
	end)
end)

hook.Add("SV_PlayerLeaveVehicle", "SV_RemoveBlinkerDisablerHook", function()
	hook.Remove("VehicleMove", "SV_BlinkerDisabler")
end)
--lua/svmod/lights/hazardlights/cl_hazardlights.lua:
return gluapack()()
--lua/svmod/vehicles/sh_speed.lua:
return gluapack()()
--lua/autorun/tdm__init.lua:
-- Credits: G-Force (STEAM_0:1:19084184)
 
if not SERVER then return end
 
-- GLOBAL VARIABLES
TDMCars                 = TDMCars                   or {}
 
-- CALLBACK FUNCTIONS
TDMCars.Think           = TDMCars.Think             or {}
TDMCars.EnterEvent      = TDMCars.EnterEvent        or {}
TDMCars.ExitEvent       = TDMCars.ExitEvent         or {}
TDMCars.SpawnEvent      = TDMCars.SpawnEvent        or {}
TDMCars.RemoveEvent     = TDMCars.RemoveEvent       or {}
 
-- CACHING
TDMCars.VehiclesSpawned = TDMCars.VehiclesSpawned   or {}
TDMCars.ActiveThinks    = TDMCars.ActiveThinks      or {}
 
-- Adding vehicle to cache list on creation
hook.Add( "OnEntityCreated", "TDMCars_OnEntityCreated", function( ent )
    if ent:GetClass() == "prop_vehicle_jeep" then
        timer.Simple( 0, function()
            TDMCars.VehiclesSpawned[ ent ] = true
 
            local mdl = ent:GetModel():lower()
            local callback = TDMCars.SpawnEvent[ mdl ]
 
            if callback then
                TDMCars.SpawnEvent[ mdl ]( ent )
            end
        end )
    end
end )
 
-- Removing vehicle from cache list on removal
hook.Add( "EntityRemoved", "TDMCars_EntityRemoved", function( ent )
    if ent:GetClass() == "prop_vehicle_jeep" then
        local mdl = ent:GetModel():lower()
        TDMCars.VehiclesSpawned[ ent ] = nil
 
        local callback = TDMCars.RemoveEvent[ mdl ]
        if callback then
            TDMCars.RemoveEvent[ mdl ]( ent )
        end
    end
end )
 
-- Adding vehicle to think list on entry
hook.Add( "PlayerEnteredVehicle", "TDMCars_PlayerEnteredVehicle", function( ply, ent )
    if ent:GetClass() == "prop_vehicle_jeep" then
        local mdl = ent:GetModel():lower()
 
        local think = TDMCars.Think[ mdl ]
        if think then
            local steamid = ply:SteamID()
            hook.Add( "Think", "TDMCars_Player" .. steamid, function()
                if IsValid( ply ) and IsValid( ent ) then
                    think( ply, ent )
                else
                    hook.Remove( "Think", "TDMCars_Player" .. steamid )
                end
            end )
 
            TDMCars.ActiveThinks[ ply ] = ent
        end
 
        local callback = TDMCars.EnterEvent[ mdl ]
        if callback then
            TDMCars.EnterEvent[ mdl ]( ply, ent )
        end
    end
end )
 
-- Removing vehicle from think list on entry
hook.Add( "PlayerLeaveVehicle", "TDMCars_PlayerLeaveVehicle", function( ply, ent )
    if ent:GetClass() == "prop_vehicle_jeep" then
        local mdl = ent:GetModel():lower()
 
        if TDMCars.ActiveThinks[ ply ] then
            hook.Remove( "Think", "TDMCars_Player" .. ply:SteamID() )
            TDMCars.ActiveThinks[ ply ] = nil
        end
 
        local callback = TDMCars.ExitEvent[ mdl ]
        if callback then
            TDMCars.ExitEvent[ mdl ]( ply, ent )
        end
    end
end )
 
-- TDMCars.Think[ "models/tdmcars/vol_850r.mdl" ] = function( ply, veh )
	-- local Pwr = 0
	-- if ply:KeyDown(IN_FORWARD) then Pwr = 1 end
	-- veh.Cars_Power = Lerp(0.02, veh.Cars_Power or 1, Pwr)
	-- veh:SetPoseParameter("boost_gauge", veh.Cars_Power)
-- end	
-- TDMCars.Think[ "models/tdmcars/242turbo.mdl" ] = function( ply, veh )
	-- local Pwr = 0
	-- if ply:KeyDown(IN_FORWARD) then Pwr = 1 end
	-- veh.Cars_Power = Lerp(0.07, veh.Cars_Power or 1, Pwr)
	-- veh:SetPoseParameter("boost_gauge", veh.Cars_Power)
-- end
TDMCars.Think[ "models/tdmcars/sal_s281_06.mdl" ] = function( ply, veh )
	local Pwr = 0
	if ply:KeyDown(IN_FORWARD) then Pwr = 1 end
	veh.Cars_Power = Lerp(0.06, veh.Cars_Power or 1, Pwr)
	veh:SetPoseParameter("boost_gauge", veh.Cars_Power)
end
TDMCars.Think[ "models/tdmcars/sal_s331_supercab.mdl" ] = function( ply, veh )
	local Pwr = 0
	if ply:KeyDown(IN_FORWARD) then Pwr = 1 end
	veh.Cars_Power = Lerp(0.06, veh.Cars_Power or 1, Pwr)
	veh:SetPoseParameter("boost_gauge", veh.Cars_Power)
end
TDMCars.Think[ "models/tdmcars/mer_slr.mdl" ] = function( ply, veh )
	local Pwr = 0
	if ply:KeyDown(IN_BACK) and veh:GetVelocity():Length() > 800 then Pwr = 1 end
	veh.Cars_Power = Lerp(0.2, veh.Cars_Power or 1, Pwr)
	veh:SetPoseParameter("airbrake_pose", veh.Cars_Power)
end
--lua/autorun/tdmcars_mere63.lua:
local V = {
			Name = "Mercedes-Benz E63 AMG", 
			Class = "prop_vehicle_jeep",
			Category = "TDM Cars",
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Mercedes-Benz E63 AMG by TheDanishMaster",
			Model = "models/tdmcars/mer_e63.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/mere63.txt"
							}
			}
list.Set("Vehicles", "mere63tdm", V)
--lua/autorun/tdmcars_pontiac.lua:
local PrVeh = "prop_vehicle_jeep"
local Cat = "TDM Cars"

local V = {
			Name = "Pontiac Fiero GT", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Pontiac Fiero GT by TheDanishMaster",
			Model = "models/tdmcars/pon_fierogt.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/pon_fierogt.txt"
							}
			}
list.Set("Vehicles", "pon_fierogttdm", V)

local V = {
			Name = "Pontiac Firebird Trans Am", 
			Class = PrVeh,
			Category = Cat,
			Author = "TheDanishMaster, Turn 10",
			Information = "A drivable Pontiac Firebird Trans Am by TheDanishMaster",
			Model = "models/tdmcars/pon_firetransam.mdl",
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/pon_firetransam.txt",
							skin = "1",
							rendercolor = "0 0 0"
							}
			}
list.Set("Vehicles", "pon_firebirdtransamtdm", V)

if SERVER then
	hook.Add("Think", "TDMPonFiero_hlights", function()
		for _, ent in pairs(ents.FindByClass("prop_vehicle_jeep*")) do
			if ent:GetModel() == "models/tdmcars/pon_fierogt.mdl" then
				local HlightState = 0
					if IsValid(ent:GetDriver()) then
						HlightState = 1
					end
				ent.Car_Hlight = Lerp(0.07, ent.Car_Hlight or 0, HlightState)
				ent:SetPoseParameter("hlights", ent.Car_Hlight)
			end
		end
	end)
end
--addons/override_workshop/lua/autorun/tdmcars_porcayenne09.lua:
local V = {
    Name = "Porsche Cayenne Turbo S", 
    Class = "prop_vehicle_jeep",
    Category = "TDM Cars",
    Author = "TheDanishMaster, Turn 10",
    Information = "A drivable Porsche Cayenne Turbo S by TheDanishMaster",
    Model = "models/tdmcars/cayenne.mdl",
    KeyValues = {
                    vehiclescript	=	"scripts/vehicles/TDMCars/cayenne.txt"
                    }
    }
list.Set("Vehicles", "cayennetdm", V)
--addons/voidfactions-1.10.6/lua/voidfactions/libs/cami.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/backgroundpanel.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/sidebar.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/features/inventories/sh_inventories.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/classes/sh_upgrade.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/currencies/pointshop2.lua:
local CURRENCY = VoidFactions.Currencies:NewCurrency() -- Create a new currency object
CURRENCY:Name("Pointshop 2") -- Set the currency name

-- The functions that checks if the dependent addon/gamemode is installed
-- This is not required. The currency will not be selectable if this function returns false or nil
CURRENCY:IsInstalledFunc(function ()
    return Pointshop2
end)

-- The function that will return the amount of player's money
CURRENCY:GetMoneyFunc(function (ply)
    return (ply:PS2_GetWallet() and ply:PS2_GetWallet().points ) or 0
end)

-- The function that will give money to the player
CURRENCY:GiveMoneyFunc(function (ply, money)
    ply:PS2_AddStandardPoints( money )
end)

-- The function that will take money from the player
-- (NOT NEEDED IF GiveMoneyFunc can remove money)
-- CURRENCY:TakeMoneyFunc(function (ply)
    -- function for taking the money
-- end)

-- The function that will format the money
-- If not supplied, then a $ will be prepended
CURRENCY:FormatMoneyFunc(function (money)
    return money .. " Points"
end)

-- Register the currency (this is required!)
VoidFactions.Currencies:AddCurrency(CURRENCY)

--addons/voidfactions-1.10.6/lua/voidfactions/modules/currencies/pointshop2premium.lua:
local CURRENCY = VoidFactions.Currencies:NewCurrency() -- Create a new currency object
CURRENCY:Name("Pointshop 2 Premium") -- Set the currency name

-- The functions that checks if the dependent addon/gamemode is installed
-- This is not required. The currency will not be selectable if this function returns false or nil
CURRENCY:IsInstalledFunc(function ()
    return Pointshop2
end)

-- The function that will return the amount of player's money
CURRENCY:GetMoneyFunc(function (ply)
    return (ply:PS2_GetWallet() and ply:PS2_GetWallet().premiumPoints ) or 0
end)

-- The function that will give money to the player
CURRENCY:GiveMoneyFunc(function (ply, money)
    ply:PS2_AddPremiumPoints( money )
end)

-- The function that will take money from the player
-- (NOT NEEDED IF GiveMoneyFunc can remove money)
-- CURRENCY:TakeMoneyFunc(function (ply)
    -- function for taking the money
-- end)

-- The function that will format the money
-- If not supplied, then a $ will be prepended
CURRENCY:FormatMoneyFunc(function (money)
    return money .. " Premium Points"
end)

-- Register the currency (this is required!)
VoidFactions.Currencies:AddCurrency(CURRENCY)

--addons/voidfactions-1.10.6/lua/voidfactions/modules/experience/npckills.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/rewards/membersjoined.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/rewards/pointscaptured.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/rewards/upgradesunlocked.lua:
local REWARD = VoidFactions.RewardModules:NewReward()
REWARD:Name("reward_upgradesdeposited")
REWARD:Description("reward_desc_upgradesdeposited")

REWARD:DefaultIcon("vfk26on")

REWARD:Setup(function ()

    hook.Add("VoidFactions.Upgrades.UpgradeUnlocked", "VoidFactions.Rewards.UpgradeUnlocked", function (faction)
        REWARD:Increment(faction)
    end)

end)

VoidFactions.RewardModules:AddReward(REWARD)
--addons/voidfactions-1.10.6/lua/voidfactions/net/member/cl_member.lua:
VoidFactions.PlayerMember = VoidFactions.PlayerMember or nil

-- Functions

function VoidFactions.Member:SetMemberRank(member, nick, rank)
	net.Start("VoidFactions.Member.ChangeRank")
		net.WriteUInt(VoidFactions.Member.PromoteEnums.RANK_UPDATE, 2)
		net.WriteString(member.sid)
		net.WriteString(nick)

		net.WriteUInt(rank.id, 20)
	net.SendToServer()
end

function VoidFactions.Member:PromoteMember(member, nick, faction)
	net.Start("VoidFactions.Member.ChangeRank")
		net.WriteUInt(VoidFactions.Member.PromoteEnums.PROMOTE, 2)
		net.WriteString(member.sid)
		net.WriteString(nick)

		net.WriteBool(faction and true or false)
		if (faction) then
			net.WriteUInt(faction.id, 20)
		end
	net.SendToServer()
end

function VoidFactions.Member:DemoteMember(member, nick, subfaction)
	net.Start("VoidFactions.Member.ChangeRank")
		net.WriteUInt(VoidFactions.Member.PromoteEnums.DEMOTE, 2)
		net.WriteString(member.sid)
		net.WriteString(nick)

		net.WriteBool(subfaction and true or false)
		if (subfaction) then
			net.WriteUInt(subfaction.id, 20)
		end
	net.SendToServer()
end

function VoidFactions.Member:KickMember(member, nick)
	net.Start("VoidFactions.Member.Kick")
		net.WriteString(member.sid)
		net.WriteString(nick)
	net.SendToServer()
end

function VoidFactions.Member:InvitePlayer(ply, faction)
	net.Start("VoidFactions.Member.Invite")
		net.WriteEntity(ply)
		if (faction) then
			net.WriteUInt(faction.id, 20)
		end
	net.SendToServer()
end

function VoidFactions.Member:LeaveFaction()
	net.Start("VoidFactions.Member.Leave")
	net.SendToServer()
end

function VoidFactions.Member:JoinFaction(faction)
	net.Start("VoidFactions.Member.JoinFaction")
		net.WriteUInt(isnumber(faction) and faction or faction.id, 20)
	net.SendToServer()
end

function VoidFactions.Member:SetFaction(faction, rank, ply)
	net.Start("VoidFactions.Member.Add")
		net.WriteUInt(faction.id, 20)
		net.WriteUInt(rank.id, 20)
		net.WriteEntity(ply)
	net.SendToServer()
end

-- Net handlers

net.Receive("VoidFactions.Member.UpdateFields", function ()
	if (!VoidFactions.PlayerMember) then
		VoidFactions.PrintDebug("[POSSIBLE ERROR] Received update field, but member instance not initialized!")
		return
	end

	VoidFactions.PrintDebug("Received update field net!")

	local fieldAmount = net.ReadUInt(3)
	for i = 1, fieldAmount do
		local fieldEnum = net.ReadUInt(4)
		local fieldTbl = VoidFactions.Member.FieldTypes[fieldEnum]

		local fieldType = fieldTbl[1]
		local fieldBits = fieldTbl[2]

		local tblKeys = {}
		for k, v in SortedPairsByValue(VoidFactions.Member.FieldEnums) do
			tblKeys[#tblKeys + 1] = k
		end

		local fieldName = tblKeys[fieldEnum]

		local val = nil
		local func = net["Read" .. fieldType]
		if (func) then
			val = net["Read" .. fieldType](fieldBits)
		else
			val = VoidFactions[fieldType]["Read" .. fieldType]()
		end
		
		VoidFactions.PlayerMember[fieldName] = val

		VoidFactions.PrintDebug("Updated field name " .. fieldName .. "!")
	end

	local panel = VoidFactions.Menu.Panel
	if (IsValid(panel)) then
		local profile = panel.sidebar.loadedPanels["VoidFactions.UI.ProfilePanel"]
		if (profile) then
			profile:InfoUpdated()
		end
	end

	if (VoidFactions.Menu.ReopenRequested) then
		VoidFactions.Menu:Open()
		VoidFactions.Menu.ReopenRequested = false
	end
end)

net.Receive("VoidFactions.Member.NetworkToOwner", function ()

	local isNewChar = false
	if (net.ReadBool()) then
		isNewChar = true
	end
	
	if (!VoidFactions.PlayerMember or isNewChar) then
		VoidFactions.PrintDebug("Received member network message, creating member instance!")
		local member = VoidFactions.Member:ReadMember()
		member.ply = LocalPlayer()
		if (!member.name) then
			member:SetName(member.ply:Name())
		end

		VoidFactions.PlayerMember = member

		hook.Run("VoidFactions.Members.MemberObjectInitialized", VoidFactions.PlayerMember)
	else
	 	local bWasInFaction = VoidFactions.PlayerMember.faction and true or false
		VoidFactions.PrintDebug("Received member update!")
		-- Passing a member to ReadMember updates the member
		VoidFactions.Member:ReadMember(VoidFactions.PlayerMember)
		
		if (bWasInFaction and !VoidFactions.PlayerMember.faction and IsValid(VoidFactions.Menu.Panel)) then
			VoidFactions.Menu.Panel:Remove()
		end
	end

	if (VoidFactions.Menu.ReopenRequested) then
		VoidFactions.Menu:Open()
		VoidFactions.Menu.ReopenRequested = false
	end

end)


--addons/voidfactions-1.10.6/lua/voidfactions/net/upgrades/cl_upgrades.lua:
VoidFactions.Upgrades = VoidFactions.Upgrades or {}

function VoidFactions.Upgrades:CreateUpgrade(name, moduleName, value, currencyName, cost, icon)
	net.Start("VoidFactions.Upgrades.CreateUpgrade")
		net.WriteString(name)
		net.WriteString(moduleName)
		net.WriteString(value)
		net.WriteString(currencyName)
		net.WriteUInt(cost, 32)
		net.WriteString(icon)
	net.SendToServer()
end

function VoidFactions.Upgrades:UpdateUpgrade(upgrade, name, moduleName, value, currencyName, cost, icon)
	net.Start("VoidFactions.Upgrades.UpdateUpgrade")
		net.WriteUInt(upgrade.id, 10)
		net.WriteString(name)
		net.WriteString(moduleName)
		net.WriteString(value)
		net.WriteString(currencyName)
		net.WriteUInt(cost, 32)
		net.WriteString(icon)
	net.SendToServer()
end

function VoidFactions.Upgrades:PurchaseUpgrade(point)
	net.Start("VoidFactions.Upgrades.PurchaseUpgrade")
		net.WriteUInt(point.id, 10)
	net.SendToServer()
end

function VoidFactions.Upgrades:DeleteUpgrade(upgrade)
	net.Start("VoidFactions.Upgrades.DeleteUpgrade")
		net.WriteUInt(upgrade.id, 10)
	net.SendToServer()
end

function VoidFactions.Upgrades:CreatePoint(upgrade, posX, posY)
	net.Start("VoidFactions.Upgrades.CreatePoint")
		net.WriteUInt(upgrade.id, 10)
		net.WriteUInt(posX, 10)
		net.WriteUInt(posY, 10)
	net.SendToServer()
end

function VoidFactions.Upgrades:UpdatePoint(id, posX, posY, relations)
	net.Start("VoidFactions.Upgrades.UpdatePoint")
		net.WriteUInt(id, 10)
		net.WriteUInt(posX, 16)
		net.WriteUInt(posY, 16)
		VoidFactions.Upgrades:WriteRelationships(relations)
	net.SendToServer()
end

function VoidFactions.Upgrades:DeletePoint(point)
	net.Start("VoidFactions.Upgrades.DeletePoint")
		net.WriteUInt(point.id, 10)
	net.SendToServer()
end

function VoidFactions.Upgrades:RequestUpgrades(faction)
	net.Start("VoidFactions.Upgrades.RequestUpgrades")
	net.SendToServer()
end

-- Net handlers

net.Receive("VoidFactions.Upgrades.SendUpgrades", function ()
	-- Upgrades
	local upgradeLength = net.ReadUInt(10)

	local upgrades = {}
	for i = 1, upgradeLength do
		local upgrade = VoidFactions.Upgrades:ReadUpgrade()
		upgrades[upgrade.id] = upgrade
	end

	VoidFactions.Upgrades.Custom = upgrades

	-- Points
	local pointLength = net.ReadUInt(10)

	local points = {}
	local pointsKeys = {}
	for i = 1, pointLength do
		local point = VoidFactions.Upgrades:ReadPoint()
		points[i] = point
		pointsKeys[point.id] = point
	end

	-- Assign the to's Tables
	for k, v in ipairs(points) do
		v.to = {}
		for _, to in ipairs(v.toIds) do
			local toPoint = pointsKeys[to]
			v:AddTo(toPoint)
		end
	end

	VoidFactions.UpgradePoints.List = pointsKeys

	hook.Run("VoidFactions.Upgrade.UpgradesReceived", upgrades)
end)

--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/dynamic_faction_settings.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/rewards_manage.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/settings_panel.lua:
local sc = VoidUI.Scale
local L = VoidFactions.Lang.GetPhrase

local PANEL = {}

function PANEL:Init()

    local ply = LocalPlayer()

    self.tabs = self:Add("VoidUI.Tabs")

    self.tabs:SetAccentColor(VoidFactions.UI.Accent)

    if (CAMI.PlayerHasAccess(ply, "VoidFactions_ManageFactions")) then
        local factions = self.tabs:Add("VoidFactions.UI.FactionSettings")
        self.tabs:AddTab(string.upper(L"factions"), factions)
        self.factions = factions
    end

    if (CAMI.PlayerHasAccess(ply, "VoidFactions_EditSettings")) then
        local setup = self.tabs:Add("VoidFactions.UI.SetupPanel")
        self.tabs:AddTab(string.upper(L"setup"), setup)
        self.setup = setup

        local options = self.tabs:Add("VoidFactions.UI.Options")
        self.tabs:AddTab(string.upper(L"options"), options)
        self.options = options
    end

end

vgui.Register("VoidFactions.UI.SettingsPanel", PANEL, "VoidUI.PanelContent")

--addons/voidfactions-1.10.6/lua/voidfactions/vgui/static/board_main.lua:
local PANEL = {}

function PANEL:Init()
	local factionView = self:Add("VoidFactions.UI.BoardFactions")
	factionView:Dock(FILL)
	factionView:SetVisible(true)

	local memberView = self:Add("VoidFactions.UI.BoardMembers")
	memberView:Dock(FILL)
	memberView:SetVisible(false)

	self.factionView = factionView
	self.memberView = memberView
end

function PANEL:GoBack()
	self.factionView:SetVisible(true)
	self.memberView:SetVisible(false)
end

function PANEL:SelectFaction(faction)
	self.factionView:SetVisible(false)
	self.memberView:SetVisible(true)

	self.memberView:ViewFaction(faction)
end

vgui.Register("VoidFactions.UI.BoardMain", PANEL, "VoidUI.PanelContent")
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/static/faction_panel.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/static/profile_panel.lua:
local L = VoidFactions.Lang.GetPhrase
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
	self:SetTitle(string.upper(L"profile"))
	self:SetOrigSize(1000, 600)

	local ply = LocalPlayer()
	self.member = VoidFactions.PlayerMember

	local member = self.member

	local leftContainer = self:Add("Panel")
	leftContainer:Dock(LEFT)

	self.leftContainer = leftContainer

	local baseXOffset = 0.05

	local playerCard = leftContainer:Add("VoidUI.BackgroundPanel")
	playerCard:Dock(TOP)

	playerCard.Paint = function (self, w, h)
		draw.RoundedBox(14, 0, 0, w, h, VoidUI.Colors.Primary)
		local x, y = self:LocalToScreen(0, 0)

		local baseX = w * 0.7763 + w * baseXOffset
		local verts = {
			{x = baseX + sc(15), y = 0},
			{x = baseX + sc(30), y = 0},
			{x = baseX + sc(15), y = h},
			{x = baseX, y = h}
		}
		baseX = baseX + sc(25)
		local verts2 = {
			{x = baseX + sc(15), y = 0},
			{x = baseX + sc(40), y = 0},
			{x = baseX + sc(25), y = h},
			{x = baseX, y = h}
		}

		local gradientMove = sc(200)

		VoidUI.StencilMaskStart()
			surface.SetDrawColor(VoidUI.Colors.White)
			draw.NoTexture()
			surface.DrawPoly(verts)
			surface.DrawPoly(verts2)
		VoidUI.StencilMaskApply()
			VoidUI.SimpleLinearGradient(x+0.7086*w, y-gradientMove, sc(200), h+gradientMove*5, VoidUI.Colors.BlueLineGradientEnd, VoidUI.Colors.BlueGradientStart)
		VoidUI.StencilMaskEnd()
	end

	playerCard.avatar = playerCard:Add("AvatarImage")
	playerCard.avatar:Dock(LEFT)
	playerCard.avatar:SetPlayer(ply, 128)
	
	playerCard.info = playerCard:Add("Panel")
	playerCard.info:Dock(LEFT)

	playerCard.info.nick = playerCard.info:Add("DLabel")
	playerCard.info.nick:Dock(TOP)
	playerCard.info.nick:SetText(ply:Nick())
	playerCard.info.nick:SetFont("VoidUI.R30")
	playerCard.info.nick:SetColor(VoidUI.Colors.White)
	playerCard.info.nick:MarginTop(5)
	playerCard.info.nick:SSetTall(32)

	playerCard.info.levelContainer = playerCard.info:Add("Panel")
	playerCard.info.levelContainer:Dock(TOP)
	playerCard.info.levelContainer:MarginTop(20)

	local requiredXP = VoidFactions.XP:GetRequiredXP(member.level)
	local fraction = (member.xp or 0) / requiredXP
	
	playerCard.info.levelContainer.Paint = function (self, w, h)
		draw.SimpleText(string.upper(L"level") .. " " .. member.level, "VoidUI.B24", 0, 0, VoidUI.Colors.White)
		draw.SimpleText((member.xp or 0) .. " / " .. requiredXP .. "  XP", "VoidUI.R24", 0, sc(40), VoidUI.Colors.Gray)
	end

	playerCard.info.levelContainer.progress = playerCard.info.levelContainer:Add("Panel")
	playerCard.info.levelContainer.progress:Dock(TOP)
	playerCard.info.levelContainer.progress:MarginTop(25)
	playerCard.info.levelContainer.progress:SSetTall(15)


	function playerCard.info.levelContainer.progress:Paint(w,h)

		-- If your game crashes, then you fucked up something with the gradient, most likely its color.
		-- (Getting a dynamic mesh without resolving the previous one)

		requiredXP = VoidFactions.XP:GetRequiredXP(member.level)
		fraction = (member.xp or 0) / requiredXP

		local x, y = self:LocalToScreen(0, 0)

		surface.SetMaterial(VoidUI.Icons.RoundedBox)
		surface.SetDrawColor(VoidUI.Colors.Background)
		surface.DrawTexturedRect(0, 0, w, h)

		VoidUI.StencilMaskStart()
			surface.SetMaterial(VoidUI.Icons.RoundedBox)
			surface.SetDrawColor(VoidUI.Colors.White)
			surface.DrawTexturedRect(0, 0, w, h)
		VoidUI.StencilMaskApply()
			VoidUI.SimpleLinearGradient(x, y, w*fraction, h, VoidUI.Colors.BlueGradientStart, VoidUI.Colors.BlueLineGradientEnd, true)
		VoidUI.StencilMaskEnd()
		
	end

	playerCard.info.levelContainer:SetVisible(!VoidFactions.Config.DisableXP)
	

	self.playerCard = playerCard

	local infoCard = leftContainer:Add("VoidUI.BackgroundPanel")
	infoCard:Dock(FILL)

	infoCard.Paint = function (self, w, h)
		draw.RoundedBox(14, 0, 0, w, h, VoidUI.Colors.Primary)

		local x, y = self:LocalToScreen(0, 0)

		local baseX = 0.7265 * w + w * baseXOffset
		local verts = {
			{x = baseX + sc(30), y = 0},
			{x = baseX + sc(45), y = 0},
			{x = baseX + sc(15), y = h},
			{x = baseX, y = h}
		}
		baseX = baseX + sc(25)
		local verts2 = {
			{x = baseX + sc(30), y = 0},
			{x = baseX + sc(55), y = 0},
			{x = baseX + sc(25), y = h},
			{x = baseX, y = h}
		}

		VoidUI.StencilMaskStart()
			surface.SetDrawColor(VoidUI.Colors.White)
			draw.NoTexture()
			surface.DrawPoly(verts)
			surface.DrawPoly(verts2)
		VoidUI.StencilMaskApply()
			VoidUI.SimpleLinearGradient(x+sc(460), y, sc(250), h, VoidUI.Colors.BlueGradientEnd, VoidUI.Colors.BlueGradientStart)
		VoidUI.StencilMaskEnd()
		
	end

	infoCard.textGrid = infoCard:Add("VoidUI.TextGrid")
	infoCard.textGrid:Dock(FILL)
	infoCard.textGrid:SetVerticalMargin(sc(30))
	

	self.factionEntry = infoCard.textGrid:AddEntry(L"faction", member.faction and member.faction.name or "No faction")
	self.joinedEntry = infoCard.textGrid:AddEntry(L"factionJoined", "X!")
	self.rankEntry = infoCard.textGrid:AddEntry(L"rank", member.rank and member.rank.name or "None")
	self.sessionEntry = infoCard.textGrid:AddEntry(L"sessionPlaytime", ply:GetSessionPlaytime())
	self.lastPromoteEntry = infoCard.textGrid:AddEntry(L"lastPromote", (member.lastPromotion != 0 and os.date("%d. %B %Y", member.lastPromotion)) or "Never")
	self.playtimeEntry = infoCard.textGrid:AddEntry(L"totalPlaytime", string.NiceTime(member.playtime * 60))
	self.autoPromoteEntry = infoCard.textGrid:AddEntry(L"nextAutoPromote", "N/A")
	self.autoPromoteEntry:SetVisible(false)


	self.infoCard = infoCard

	local jobPanel = self:Add("VoidUI.BackgroundPanel")
	jobPanel:Dock(RIGHT)
	jobPanel.Paint = function (self, w, h)
		draw.RoundedBox(14, 0, 0, w, h, VoidUI.Colors.Primary)

		local teamName = team.GetName(member.job)

		draw.SimpleText(string.upper(L"currentJob"), "VoidUI.B26", w/2, sc(15), VoidUI.Colors.Blue, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
		draw.SimpleText(string.upper(teamName), "VoidUI.R26", w/2, sc(40), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
	end

	jobPanel.model = jobPanel:Add("DModelPanel")
	jobPanel.model:Dock(FILL)
	jobPanel.model:SetFOV(35)
	jobPanel.model:SetModel(ply:GetModel())

	function jobPanel.model:LayoutEntity(ent)
		ent:SetAngles(Angle(0,45,0))
	end

	jobPanel.button = jobPanel:Add("VoidUI.Button")
	jobPanel.button:Dock(BOTTOM)
	jobPanel.button:SetText(L"changeJob")
	jobPanel.button:SetFont("VoidUI.R20")
	jobPanel.button:SetColor(VoidUI.Colors.Blue)
	jobPanel.button.DoClick = function ()
		local selector = vgui.Create("VoidUI.ItemSelect")
		selector:SetParent(self)
		
		local jobTbl = {}
		for _, job in pairs(member.rank.jobs) do
			local jobTeam = job
			if (jobTeam == ply:Team()) then continue end
			jobTbl[jobTeam] = team.GetName(jobTeam)
		end

		selector:InitItems(jobTbl, function (id, v)
			member:ChangeJob(id)
		end)

		local cx, cy = input.GetCursorPos()
		local x, y = jobPanel.button:LocalToScreen(0, 0)
    	selector:SetPos(x - sc(300), cy - sc(150))

		-- local panel = vgui.Create("VoidFactions.UI.JobSelection")


	end

	self.jobPanel = jobPanel

	self:InfoUpdated()

end


function PANEL:InfoUpdated()
	local member = self.member
	local ply = LocalPlayer()

	local faction = member.faction

	self.factionEntry.text = member.faction and member.faction.name or L"none"
	self.joinedEntry.text = (member.factionJoined != 0 and os.date("%d. %B %Y", member.factionJoined)) or L"never"
	self.rankEntry.text = member.rank and member.rank.name or L"none"
	self.lastPromoteEntry.text = (member.lastPromotion != 0 and os.date("%d. %B %Y", member.lastPromotion)) or L"never"
	self.playtimeEntry.text = string.NiceTime(member.playtime * 60)
	if (faction) then
		local nextRank = faction:GetNextRank(member.rank)
		if (nextRank and nextRank.autoPromoteLevel != 0) then
			self.autoPromoteEntry.text = L"level" .. " " .. nextRank.autoPromoteLevel
			self.autoPromoteEntry:SetVisible(true)
		end
	end

	self.jobPanel.model:SetModel(ply:GetModel())
	self.jobPanel.model.Entity:SetSkin(ply:GetSkin())
	for k, v in pairs(ply:GetBodyGroups()) do
		local id = v.id
		local bodygroup = ply:GetBodygroup(id)
		
		self.jobPanel.model.Entity:SetBodygroup(id, bodygroup)
	end

	function self.jobPanel.model.Entity:GetPlayerColor()
		local col = ply:GetPlayerColor()
		return Vector(col.r, col.g, col.b) 
	end


	local showButton = false
	local jobTbl = {}
	for _, job in pairs(member.rank and member.rank.jobs or {}) do
		if (job == ply:Team()) then continue end
		showButton = true
	end

	self.jobPanel.button:SetVisible(showButton)

end

function PANEL:Think()
	if (self.nextThink and self.nextThink > CurTime()) then return end
	self.nextThink = CurTime() + 30

	self.sessionEntry.text = LocalPlayer():GetSessionPlaytime()
end

function PANEL:PerformLayout(w, h)
	self.leftContainer:SSetWide(635, self)
	self.leftContainer:MarginLeft(45, self)
	self.leftContainer:MarginTop(8, self)

	self.playerCard:SSetTall(155, self)
	self.playerCard.avatar:SSetWide(120, self)
	self.playerCard.info:SSetWide(460, self)
	self.playerCard.info.levelContainer:SSetTall(80, self)
	self.playerCard.info.levelContainer:MarginRight(160, self)

	self.infoCard:MarginTop(15, self)
	self.infoCard:MarginBottom(20, self)
	self.infoCard.textGrid:SDockMargin(5, 0, 10, 0, self)

	self.jobPanel:SSetWide(260, self)
	self.jobPanel:MarginTop(10, self)
	self.jobPanel:MarginRight(45, self)
	self.jobPanel:MarginBottom(20, self)

	self.playerCard.info:MarginLeft(20, self)

	self.jobPanel:SDockPadding(20, 40, 20, 20, self)
	self.jobPanel.model:MarginBottom(10, self)

	self.jobPanel.button:SSetTall(35, self)
	self.jobPanel.button:MarginSides(20, self)
	
end


vgui.Register("VoidFactions.UI.ProfilePanel", PANEL, "VoidUI.PanelContent")
--lua/wos/anim_extension/extensions/wos_base.lua:
return gluapack()()
--lua/wos/anim_extension/core/sh_holdtypes.lua:
--[[-------------------------------------------------------------------
	wiltOS Hold Type Register:
		The core files needed to make your own hold types
			Powered by
						  _ _ _    ___  ____  
				__      _(_) | |_ / _ \/ ___| 
				\ \ /\ / / | | __| | | \___ \ 
				 \ V  V /| | | |_| |_| |___) |
				  \_/\_/ |_|_|\__|\___/|____/ 
											  
 _____         _                 _             _           
|_   _|__  ___| |__  _ __   ___ | | ___   __ _(_) ___  ___ 
  | |/ _ \/ __| '_ \| '_ \ / _ \| |/ _ \ / _` | |/ _ \/ __|
  | |  __/ (__| | | | | | | (_) | | (_) | (_| | |  __/\__ \
  |_|\___|\___|_| |_|_| |_|\___/|_|\___/ \__, |_|\___||___/
                                         |___/             
-------------------------------------------------------------------]]--[[
							  
	Lua Developer: King David
	Contact: http://steamcommunity.com/groups/wiltostech
		
----------------------------------------]]--

wOS.AnimExtension.HoldTypes = wOS.AnimExtension.HoldTypes or {}
wOS.AnimExtension.TranslateHoldType = wOS.AnimExtension.TranslateHoldType or {}

wOS.AnimExtension.ActIndex = {
	[ "pistol" ] 		= ACT_HL2MP_IDLE_PISTOL,
	[ "smg" ] 			= ACT_HL2MP_IDLE_SMG1,
	[ "grenade" ] 		= ACT_HL2MP_IDLE_GRENADE,
	[ "ar2" ] 			= ACT_HL2MP_IDLE_AR2,
	[ "shotgun" ] 		= ACT_HL2MP_IDLE_SHOTGUN,
	[ "rpg" ]	 		= ACT_HL2MP_IDLE_RPG,
	[ "physgun" ] 		= ACT_HL2MP_IDLE_PHYSGUN,
	[ "crossbow" ] 		= ACT_HL2MP_IDLE_CROSSBOW,
	[ "melee" ] 		= ACT_HL2MP_IDLE_MELEE,
	[ "slam" ] 			= ACT_HL2MP_IDLE_SLAM,
	[ "normal" ]		= ACT_HL2MP_IDLE,
	[ "fist" ]			= ACT_HL2MP_IDLE_FIST,
	[ "melee2" ]		= ACT_HL2MP_IDLE_MELEE2,
	[ "passive" ]		= ACT_HL2MP_IDLE_PASSIVE,
	[ "knife" ]			= ACT_HL2MP_IDLE_KNIFE,
	[ "duel" ]			= ACT_HL2MP_IDLE_DUEL,
	[ "camera" ]		= ACT_HL2MP_IDLE_CAMERA,
	[ "magic" ]			= ACT_HL2MP_IDLE_MAGIC,
	[ "revolver" ]		= ACT_HL2MP_IDLE_REVOLVER
}

function wOS.AnimExtension:RegisterHoldtype( data )

	self.TranslateHoldType[ data.HoldType ] = data
    self.HoldTypeMeta:CreateMetaType( self.TranslateHoldType[ data.HoldType ] )
	
	if data.BaseHoldType then
		if prone then
			if prone.animations then
				if prone.animations.WeaponAnims then
					prone.animations.WeaponAnims.moving[ data.HoldType ] = prone.animations.WeaponAnims.moving[ data.BaseHoldType ]
					prone.animations.WeaponAnims.idle[ data.HoldType ] = prone.animations.WeaponAnims.idle[ data.BaseHoldType ]
				end
			end
		end
	end

	print( "[wOS] Registered new Hold Type: " .. data.Name )
	
end

local meta = FindMetaTable( "Player" )
local ENTITY = FindMetaTable( "Entity" )

local AttackTable = {
[ ACT_MP_ATTACK_STAND_PRIMARYFIRE  ] = true,
[ ACT_MP_ATTACK_CROUCH_PRIMARYFIRE  ] = true,
[ ACT_MP_ATTACK_STAND_SECONDARYFIRE  ] = true,
[ ACT_MP_ATTACK_CROUCH_SECONDARYFIRE  ] = true,
}

local _TranslateWeaponActivity = meta.TranslateWeaponActivity
function meta:TranslateWeaponActivity( act )

	if AttackTable[ act ] then
		local wep = self:GetActiveWeapon()
		if IsValid( wep ) then  
			local holdtype = wep:GetHoldType()
			if wOS.AnimExtension.TranslateHoldType[ holdtype ] then
				local ATTACK_DATA = wOS.AnimExtension.TranslateHoldType[ holdtype ]:GetActData( act )
				if ATTACK_DATA then
					local anim = self:LookupSequence( ATTACK_DATA.Sequence )
					self:AddVCDSequenceToGestureSlot( GESTURE_SLOT_VCD, anim, 0, true ) //Figure out weight to make it balanced!
					self:AnimSetGestureWeight( GESTURE_SLOT_VCD, ATTACK_DATA.Weight or 1 )
				end
			end
		end
	end
	
	return _TranslateWeaponActivity( self, act )

end


-- local _DoAnimationEvent = meta.DoAnimationEvent
-- function meta:DoAnimationEvent( ply, event, data )

-- 	local act = _DoAnimationEvent( self, ply, event, data )
-- 	print( act )
-- 	local wep = self:GetActiveWeapon()
-- 	if IsValid( wep ) then  
-- 		local holdtype = wep:GetHoldType()
-- 		if wOS.AnimExtension.TranslateHoldType[ holdtype ] then
-- 			local result = wOS.AnimExtension.TranslateHoldType[ holdtype ][ act ]
-- 			if result then
-- 				if istable( result ) then
-- 					result = table.Random( result )
-- 				end
-- 				if isstring( result ) then
-- 					local anim = ply:LookupSequence( result )	
-- 					ply.ActOverrider = act
-- 					ply.SequenceTime = CurTime() + ply:SequenceDuration( anim )
-- 				end
-- 			end
-- 		end
-- 	end
	
-- 	return act
-- end

hook.Add( "DoAnimationEvent", "wOS.AnimExtension.CustomTriggers", function( ply, event, data ) 

	local wep = ply:GetActiveWeapon()
	if !IsValid( wep ) then return end
	local holdtype = wep:GetHoldType()
	if !wOS.AnimExtension.TranslateHoldType[ holdtype ] then return end

	local act = 9999
	local crouch = ply:Crouching()
	if event == PLAYERANIMEVENT_RELOAD then
		act = ( crouch and ACT_MP_RELOAD_CROUCH ) or ACT_MP_RELOAD_STAND
	elseif event == PLAYERANIMEVENT_ATTACK_SECONDARY then
		act = ( crouch and ACT_MP_ATTACK_CROUCH_SECONDARYFIRE ) or ACT_MP_ATTACK_STAND_SECONDARYFIRE
	end

	local ATTACK_DATA = wOS.AnimExtension.TranslateHoldType[ holdtype ]:GetActData( act )
	if !ATTACK_DATA then return end

	local anim = ply:LookupSequence( ATTACK_DATA.Sequence )
	ply:AddVCDSequenceToGestureSlot( GESTURE_SLOT_VCD, anim, 0, true ) //Figure out weight to make it balanced!
	ply:AnimSetGestureWeight( GESTURE_SLOT_VCD, ATTACK_DATA.Weight or 1 )

	return ACT_INVALID
end )

hook.Add( "Initialize", "wOS.AnimExtension.CustomSequenceHoldtypes", function()

	local _CalcMainActivity = GAMEMODE.CalcMainActivity
	function GAMEMODE:CalcMainActivity( ply, vel )
		
		local act, seq = _CalcMainActivity( self, ply, vel )
		local pr = false
		if prone then
			if ply.IsProne then
				pr = ply:IsProne()
			end
		end

		if not pr then
			local wep = ply:GetActiveWeapon()
			if IsValid( wep ) then  
				local holdtype = wep:GetHoldType()
				if wOS.AnimExtension.TranslateHoldType[ holdtype ] then
					local ATTACK_DATA = wOS.AnimExtension.TranslateHoldType[ holdtype ]:GetActData( act )
					if act == ACT_MP_RUN and ply:KeyDown( IN_SPEED ) then
						ATTACK_DATA = wOS.AnimExtension.TranslateHoldType[ holdtype ]:GetActData( ACT_MP_SPRINT ) or ATTACK_DATA
					end
					if ATTACK_DATA then
						seq = ply:LookupSequence( ATTACK_DATA.Sequence )
					end
				end
			end

			
			if act != ply.LastAct then
				ply:SetCycle( 0 )
			end
		end
		
		ply.LastAct = act
		
		return act, seq
		
	end
	
end )

if SERVER then return end

concommand.Add( "wos_base_help", function( ply, cmd, args )
	MsgC( Color( 255, 255, 255 ), "------------------ ", Color( 133, 173, 219 ), "wiltOS HELP PRINT", Color( 255, 255, 255 ), " ----------------------\n" )
	MsgC( Color( 255, 255, 255 ), "Addon Path Check: " )
	LocalPlayer():ConCommand( "whereis models/m_anm.mdl" )
	timer.Simple( 0.01, function()
	
		MsgC( color_white, "\nPlease ensure the addon path above points to ", Color( 0, 255, 0 ), "'[wOS] Animation Extension - Base'\n")
		MsgC( color_white, "If it does not, unsubscribe to the addon it does point to and get the Animation Base\n")
		print("\n")

		local seq = LocalPlayer():LookupSequence( "_base_wiltos_enabled_" )
		local resp = ( seq >= 0 and Color( 0, 255, 0 ) ) or Color( 255, 0, 0 )
		MsgC( color_white, "Sequence Check: ", resp, "\t", seq, "\n" )
		MsgC( color_white, "If the above sequence check is ", Color( 255, 0, 0 ), -1, color_white, " and the addon above points to the correct location,\nensure your model is a ", Color( 0, 255, 0 ), "PLAYER MODEL", color_white, " and not an ", Color( 255, 0, 0 ), "NPC MODEL\n" )
		MsgC( color_white, "Run this commmand again as a default GMod player model. If it still prints ", Color( 255, 0, 0 ), -1, color_white, " your Animation Base may be outdated\n" )

		print( "\n" )
		MsgC( color_white, "You can find the link here: https://steamcommunity.com/sharedfiles/filedetails/?id=757604550\n")
		MsgC( Color( 255, 255, 255 ), "-----------------------------------------------------------\n" )
	end )
end )
--lua/wos/dynabase/loader/loader.lua:
--[[-------------------------------------------------------------------
	wiltOS Dynamic Animation Base:
			Powered by
						  _ _ _    ___  ____  
				__      _(_) | |_ / _ \/ ___| 
				\ \ /\ / / | | __| | | \___ \ 
				 \ V  V /| | | |_| |_| |___) |
				  \_/\_/ |_|_|\__|\___/|____/ 
											  
 _____         _                 _             _           
|_   _|__  ___| |__  _ __   ___ | | ___   __ _(_) ___  ___ 
  | |/ _ \/ __| '_ \| '_ \ / _ \| |/ _ \ / _` | |/ _ \/ __|
  | |  __/ (__| | | | | | | (_) | | (_) | (_| | |  __/\__ \
  |_|\___|\___|_| |_|_| |_|\___/|_|\___/ \__, |_|\___||___/
                                         |___/             
-------------------------------------------------------------------]]--[[
							  
	Lua Developer: King David
	Contact: http://steamcommunity.com/groups/wiltostech
		
----------------------------------------]]--

wOS = wOS or {}
wOS.DynaBase = wOS.DynaBase or {}

local string = string
local file = file

local function _AddCSLuaFile( lua )

	if SERVER then
		AddCSLuaFile( lua )
	end
	
end

local function _include( load_type, lua )

	if load_type then
		include( lua )
	end
	
end

function wOS.DynaBase:Autoloader()

	_AddCSLuaFile( "wos/dynabase/core/sh_core.lua" )
	_include( SERVER, "wos/dynabase/core/sh_core.lua" )
	_include( CLIENT, "wos/dynabase/core/sh_core.lua" )

	_AddCSLuaFile( "wos/dynabase/core/sh_model_operations.lua" )
	_include( SERVER, "wos/dynabase/core/sh_model_operations.lua" )
	_include( CLIENT, "wos/dynabase/core/sh_model_operations.lua" )
	
	_AddCSLuaFile( "wos/dynabase/core/sh_mounting.lua" )
	_include( SERVER, "wos/dynabase/core/sh_mounting.lua" )
	_include( CLIENT, "wos/dynabase/core/sh_mounting.lua" )

	_AddCSLuaFile( "wos/dynabase/core/cl_net.lua" )
	_include( CLIENT, "wos/dynabase/core/cl_net.lua" )

	_AddCSLuaFile( "wos/dynabase/core/cl_core.lua" )
	_include( CLIENT, "wos/dynabase/core/cl_core.lua" )
	_include( SERVER, "wos/dynabase/core/sv_core.lua" )

	_AddCSLuaFile( "wos/dynabase/core/cl_local_copy.lua" )
	_include( CLIENT, "wos/dynabase/core/cl_local_copy.lua" )

	_AddCSLuaFile( "wos/dynabase/core/cl_config_menu.lua" )
	_include( CLIENT, "wos/dynabase/core/cl_config_menu.lua" )

	for _,source in pairs( file.Find( "wos/dynabase/registers/*", "LUA"), true ) do
		local lua = "wos/dynabase/registers/" .. source
		_AddCSLuaFile( lua )
		_include( SERVER, lua )
		_include( CLIENT, lua )
	end
	
end

wOS.DynaBase:Autoloader()
--lua/wos/dynabase/core/cl_local_copy.lua:
return gluapack()()
--lua/wos/dynabase/registers/l4d_extend.lua:

wOS.DynaBase:RegisterSource({
    Name = "L4D Extension",
    Type =  WOS_DYNABASE.EXTENSION,
    Shared = "models/player/wiltos/anim_extension_l4d.mdl",
})

hook.Add( "PreLoadAnimations", "wOS.DynaBase.MountL4DEXT", function( gender )
    if gender != WOS_DYNABASE.SHARED then return end
    IncludeModel( "models/player/wiltos/anim_extension_l4d.mdl" )
end )
--addons/xenin_framework/lua/xeninui/settings/settings.lua:
XeninUI.Branding = false


XeninUI.Materials = {
	CloseButton = Material("xenin/closebutton.png", "noclamp smooth"),
	Search = Material("xenin/search.png", "noclamp smooth"),
	Tick = Material("xenin/tick.png", "smooth")
}

XeninUI.TransitionTime = 0.15


XeninUI.DisableNotification = false


XeninUI.Theme = {
	Primary = Color(48, 48, 48),
	Navbar = Color(41, 41, 41),
	Background = Color(30, 30, 30),
	Accent = Color(41, 128, 185),
	OrangeRed = Color(228, 104, 78),
	Red = Color(230, 58, 64),
	Green = Color(46, 204, 113),
	Blue = Color(41, 128, 185),
	Yellow = Color(201, 176, 15),
	Purple = Color(142, 68, 173),
	Orange = Color(230, 153, 58),
	LightYellow = Color(189, 201, 15),
	GreenDark = Color(39, 174, 96)
}

XeninUI.Frame = {
	Width = 960,
	Height = 720
}

--addons/xenin_framework/lua/xeninui/libs/animations.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/essentials.lua:
local blur = Material("pp/blurscreen")
function XeninUI:DrawBlur(panel, amount)
	local x, y = panel:LocalToScreen(0, 0)
	local scrW, scrH = ScrW(), ScrH()
	surface.SetDrawColor(255, 255, 255)
	surface.SetMaterial(blur)
	for i = 1, 3 do
		blur:SetFloat("$blur", (i / 3) * (amount or 6))
		blur:Recompute()
		render.UpdateScreenEffectTexture()
		surface.DrawTexturedRect(x * -1, y * -1, scrW, scrH)
	end
end

if CLIENT then
	CreateClientConVar("xenin_hud_blur", 0)
end

function XeninUI:DrawBlurHUD(x, y, w, h, amt)
	local X, Y = 0, 0

	surface.SetDrawColor(255, 255, 255)
	surface.SetMaterial(blur)

	for i = 1, amt or 5 do
		blur:SetFloat("$blur", (i / 3) * 5)
		blur:Recompute()

		render.UpdateScreenEffectTexture()

		render.SetScissorRect(x, y, x + w, y + h, true)
		surface.DrawTexturedRect(X * -1, Y * -1, ScrW(), ScrH())
		render.SetScissorRect(0, 0, 0, 0, false)
	end
end

function XeninUI:FormatTime(seconds, format)
	if (!seconds) then seconds = 0 end
	local hours = math.floor(seconds / 3600)
	local minutes = math.floor((seconds / 60) % 60)
	seconds = math.floor(seconds % 60)

	return string.format(format, hours, minutes, seconds)
end





local mat_white = Material("vgui/white")

function draw.SimpleLinearGradient(x, y, w, h, startColor, endColor, horizontal)
	draw.LinearGradient(x, y, w, h, {
		{
			offset = 0,
			color = startColor
		},
		{
			offset = 1,
			color = endColor
		}
	}, horizontal)
end





function draw.LinearGradient(x, y, w, h, stops, horizontal)
	if #stops == 0 then
		return
	elseif #stops == 1 then
		surface.SetDrawColor(stops[1].color)
		surface.DrawRect(x, y, w, h)
		return
	end

	table.SortByMember(stops, "offset", true)

	render.SetMaterial(mat_white)
	mesh.Begin(MATERIAL_QUADS, #stops - 1)
	for i = 1, #stops - 1 do
		local offset1 = math.Clamp(stops[i].offset, 0, 1)
		local offset2 = math.Clamp(stops[i + 1].offset, 0, 1)
		if offset1 == offset2 then continue end

		local deltaX1, deltaY1, deltaX2, deltaY2

		local color1 = stops[i].color
		local color2 = stops[i + 1].color

		local r1, g1, b1, a1 = color1.r, color1.g, color1.b, color1.a
		local r2, g2, b2, a2
		local r3, g3, b3, a3 = color2.r, color2.g, color2.b, color2.a
		local r4, g4, b4, a4

		if horizontal then
			r2, g2, b2, a2 = r3, g3, b3, a3
			r4, g4, b4, a4 = r1, g1, b1, a1
			deltaX1 = offset1 * w
			deltaY1 = 0
			deltaX2 = offset2 * w
			deltaY2 = h
		else
			r2, g2, b2, a2 = r1, g1, b1, a1
			r4, g4, b4, a4 = r3, g3, b3, a3
			deltaX1 = 0
			deltaY1 = offset1 * h
			deltaX2 = w
			deltaY2 = offset2 * h
		end

		mesh.Color(r1, g1, b1, a1)
		mesh.Position(Vector(x + deltaX1, y + deltaY1))
		mesh.AdvanceVertex()

		mesh.Color(r2, g2, b2, a2)
		mesh.Position(Vector(x + deltaX2, y + deltaY1))
		mesh.AdvanceVertex()

		mesh.Color(r3, g3, b3, a3)
		mesh.Position(Vector(x + deltaX2, y + deltaY2))
		mesh.AdvanceVertex()

		mesh.Color(r4, g4, b4, a4)
		mesh.Position(Vector(x + deltaX1, y + deltaY2))
		mesh.AdvanceVertex()
	end
	mesh.End()
end

function XeninUI:DrawRotatedTexture(x, y, w, h, angle, cx, cy)
	cx, cy = cx or w / 2, cy or w / 2
	if (cx == w / 2 and cy == w / 2) then
		surface.DrawTexturedRectRotated(x, y, w, h, angle)
	else
		local vec = Vector(w / 2 - cx, cy - h / 2, 0)
		vec:Rotate(Angle(180, angle, -180))
		surface.DrawTexturedRectRotated(x - vec.x, y + vec.y, w, h, angle)
	end
end

function XeninUI:FormatMoney(number, decimals)
	decimals = decimals or 2

	if (number >= 1000000000) then
		return DarkRP.formatMoney(math.Round(number / 1000000000, 2)) .. " bil"
	elseif (number >= 1000000) then
		return DarkRP.formatMoney(math.Round(number / 1000000, 2)) .. " mil"
	elseif (number > 10000) then
		return DarkRP.formatMoney(math.Round(number / 1000, 2)) .. "k"
	end

	return DarkRP.formatMoney(number)
end

function XeninUI:DateToString(date)
	if !date then return "now"end


	local dif = os.ServerTime() - date

	if dif < 60 then
		return "a moment ago"
	elseif dif < (60 * 60) then
		local mins = math.Round(dif / 60, 0)
		local str = mins .. " minute" .. (mins == 1 and "" or "s") .. " ago"

		return str
	elseif dif < (60 * 60) * 24 then
		return os.date("%H:%M", date)
	else
		return os.date("%d/%m/%Y", date)
	end

	return "?"
end

if !XeninUI.__AddedPanelFunctions then
	local PNL = FindMetaTable("Panel")
	local Old_Remove = Old_Remove or PNL.Remove

	function PNL:Remove()
		for k, v in pairs(self.hooks or {}) do
			hook.Remove(v.name, k)
		end

		for k, v in pairs(self.timers or {}) do
			timer.Remove(k)
		end

		Old_Remove(self)
	end

	function PNL:AddHook(name, identifier, func)
		identifier = identifier .. " - " .. CurTime()

		self.hooks = self.hooks or {}
		self.hooks[identifier] = {
			name = name,
			func = function(...)
				if IsValid(self) then
					return func(self, ...)
				end
			end
		}

		hook.Add(name, identifier, self.hooks[identifier].func)
	end

	function PNL:GetHooks()
		return self.hooks or {}
	end

	function PNL:AddTimer(identifier, delay, rep, func)
		self.timers = self.timers or {}
		self.timers[identifier] = true

		timer.Create(identifier, delay, rep, function(...)
			if IsValid(self) then
				func(self, ...)
			end
		end)
	end

	function PNL:GetTimers()
		return self.timers or {}
	end

	function PNL:LerpAlpha(alpha, time, callback)
		callback = callback or function() end

		self.Alpha = self.Alpha or 0

		local oldThink = self.Think
		self.Think = function(pnl)
			if oldThink then oldThink(pnl)end


			self:SetAlpha(pnl.Alpha >= 250 and 255 or pnl.Alpha)
		end
		self:Lerp("Alpha", alpha, time, function()
			self.Think = oldThink
			callback(self)
		end)
	end

	XeninUI.__AddedPanelFunctions = true
end

local matLoading = Material("xenin/loading.png", "smooth")
function XeninUI:DrawLoadingCircle(x, y, size, col)
	surface.SetMaterial(matLoading)
	surface.SetDrawColor(col or ColorAlpha(XeninUI.Theme.Accent, 100))
	XeninUI:DrawRotatedTexture(x, y, size, size, ((ct or CurTime()) % 360) * -100)
end

local function toLines(text, font, mWidth)
	surface.SetFont(font)

	local buffer = {}
	local nLines = {}

	for word in string.gmatch(text, "%S+") do
		local w, h = surface.GetTextSize(table.concat(buffer, " ") .. " " .. word)
		if w > mWidth then
			table.insert(nLines, table.concat(buffer, " "))
			buffer = {}
		end
		table.insert(buffer, word)
	end

	if #buffer > 0 then
		table.insert(nLines, table.concat(buffer, " "))
	end

	return nLines
end

local function drawMultiLine(text, font, mWidth, spacing, x, y, color, alignX, alignY, sAmt, sAlpha)
	local mLines = toLines(text, font, mWidth)
	local amt = #mLines - 1
	for i, line in pairs(mLines) do
		if (sAmt and sAlpha) then
			XeninUI:DrawShadowText(line, font, x, y + (i - 1) * spacing - amt * spacing / 2, color, alignX, alignY, sAmt, sAlpha)
		else
			draw.SimpleText(line, font, x, y + (i - 1) * spacing - amt * spacing / (alignY == TEXT_ALIGN_CENTER and 2 or 1), color, alignX, alignY)
		end
	end

	return amt * spacing
end

XeninUI.DrawMultiLine = drawMultiLine

local matCredit = Material("xenin/credit_small.png", "smooth")
function XeninUI:DrawCreditsText(text, font, x, y, col, xAlign, yAlign, textY, iconColor, spacing)
	textY = textY or 1
	iconColor = iconColor or color_white
	spacing = spacing or 4

	surface.SetFont(font)
	local tw, th = surface.GetTextSize(text)
	local size = th
	if (xAlign == TEXT_ALIGN_LEFT) then
		surface.SetMaterial(matCredit)
		surface.SetDrawColor(iconColor)
		surface.DrawTexturedRect(x, y, size, size)

		draw.SimpleText(text, font, x + size + spacing, y + textY, col, xAlign, yAlign)
	elseif (xAlign == TEXT_ALIGN_CENTER) then
		x = x + size / 2 + 2

		surface.SetMaterial(matCredit)
		surface.SetDrawColor(iconColor)
		surface.DrawTexturedRect(x - tw / 2 - size - spacing, y, size, size)

		draw.SimpleText(text, font, x, y + textY, col, xAlign, yAlign)
	elseif (xAlign == TEXT_ALIGN_RIGHT) then
		x = x + size / 2 + 2

		surface.SetMaterial(matCredit)
		surface.SetDrawColor(iconColor)
		surface.DrawTexturedRect(x - tw - size - spacing, y, size, size)

		draw.SimpleText(text, font, x, y + textY, col, xAlign, yAlign)
	end
end


function XeninUI:DrawArc(x, y, ang, p, rad, color, seg)
	seg = seg or 80
	ang = (-ang) + 180
	local circle = {}

	table.insert(circle, {
		x = x,
		y = y
	})
	for i = 0, seg do
		local a = math.rad((i / seg) * -p + ang)
		table.insert(circle, {
			x = x + math.sin(a) * rad,
			y = y + math.cos(a) * rad
		})
	end

	surface.SetDrawColor(color)
	draw.NoTexture()
	surface.DrawPoly(circle)
end

function XeninUI:CalculateArc(x, y, ang, p, rad, seg)
	seg = seg or 80
	ang = (-ang) + 180
	local circle = {}

	table.insert(circle, {
		x = x,
		y = y
	})
	for i = 0, seg do
		local a = math.rad((i / seg) * -p + ang)
		table.insert(circle, {
			x = x + math.sin(a) * rad,
			y = y + math.cos(a) * rad
		})
	end

	return circle
end

function XeninUI:DrawCachedArc(circle, color)
	surface.SetDrawColor(color)
	draw.NoTexture()
	surface.DrawPoly(circle)
end


function XeninUI:DrawRoundedBoxEx(radius, x, y, w, h, col, tl, tr, bl, br)

	x = math.floor(x)
	y = math.floor(y)
	w = math.floor(w)
	h = math.floor(h)
	radius = math.Clamp(math.floor(radius), 0, math.min(h / 2, w / 2))

	if (radius == 0) then
		surface.SetDrawColor(col)
		surface.DrawRect(x, y, w, h)

		return
	end


	surface.SetDrawColor(col)
	surface.DrawRect(x + radius, y, w - radius * 2, radius)
	surface.DrawRect(x, y + radius, w, h - radius * 2)
	surface.DrawRect(x + radius, y + h - radius, w - radius * 2, radius)


	if tl then
		XeninUI:DrawArc(x + radius, y + radius, 270, 90, radius, col, radius)
	else
		surface.SetDrawColor(col)
		surface.DrawRect(x, y, radius, radius)
	end

	if tr then
		XeninUI:DrawArc(x + w - radius, y + radius, 0, 90, radius, col, radius)
	else
		surface.SetDrawColor(col)
		surface.DrawRect(x + w - radius, y, radius, radius)
	end

	if bl then
		XeninUI:DrawArc(x + radius, y + h - radius, 180, 90, radius, col, radius)
	else
		surface.SetDrawColor(col)
		surface.DrawRect(x, y + h - radius, radius, radius)
	end

	if br then
		XeninUI:DrawArc(x + w - radius, y + h - radius, 90, 90, radius, col, radius)
	else
		surface.SetDrawColor(col)
		surface.DrawRect(x + w - radius, y + h - radius, radius, radius)
	end
end

function XeninUI:DrawRoundedBox(radius, x, y, w, h, col)
	XeninUI:DrawRoundedBoxEx(radius, x, y, w, h, col, true, true, true, true)
end





function XeninUI:MaskInverse(maskFn, drawFn, pixel)
	pixel = pixel or 1

	render.ClearStencil()
	render.SetStencilEnable(true)

	render.SetStencilWriteMask(1)
	render.SetStencilTestMask(1)

	render.SetStencilFailOperation(STENCILOPERATION_REPLACE)
	render.SetStencilPassOperation(STENCILOPERATION_REPLACE)
	render.SetStencilZFailOperation(STENCILOPERATION_KEEP)
	render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_NEVER)
	render.SetStencilReferenceValue(pixel)

	maskFn()

	render.SetStencilFailOperation(STENCILOPERATION_REPLACE)
	render.SetStencilPassOperation(STENCILOPERATION_REPLACE)
	render.SetStencilZFailOperation(STENCILOPERATION_KEEP)
	render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_EQUAL)
	render.SetStencilReferenceValue(pixel - 1)

	drawFn()

	render.SetStencilEnable(false)
	render.ClearStencil()
end

function XeninUI:Mask(maskFn, drawFn, pixel)
	pixel = pixel or 1

	render.ClearStencil()
	render.SetStencilEnable(true)

	render.SetStencilWriteMask(1)
	render.SetStencilTestMask(1)

	render.SetStencilFailOperation(STENCILOPERATION_REPLACE)
	render.SetStencilPassOperation(STENCILOPERATION_KEEP)
	render.SetStencilZFailOperation(STENCILOPERATION_KEEP)
	render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_NEVER)
	render.SetStencilReferenceValue(pixel)

	maskFn()

	render.SetStencilFailOperation(STENCILOPERATION_KEEP)
	render.SetStencilPassOperation(STENCILOPERATION_REPLACE)
	render.SetStencilZFailOperation(STENCILOPERATION_KEEP)
	render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_EQUAL)
	render.SetStencilReferenceValue(pixel)

	drawFn()

	render.SetStencilEnable(false)
	render.ClearStencil()
end

XeninUI:CreateFont("XeninUI.NPC.Overhead", 160)
function XeninUI:DrawNPCOverhead(npc, tbl)
	local alpha = tbl.alpha or 255
	local text = tbl.text or npc.PrintName or "NO NAME"
	local icon = tbl.icon
	local hover = tbl.sin
	local xOffset = tbl.xOffset or 0
	local textOffset = tbl.textOffset or 0
	local col = tbl.color or XeninUI.Theme.Accent
	col = ColorAlpha(col, alpha)

	local str = text
	surface.SetFont("XeninUI.NPC.Overhead")
	local width = surface.GetTextSize(str)
	width = width + 40
	if icon then
		width = width + (64 * 3)
	else
		width = width + 64
	end

	local center = 900 / 2
	local x = -width / 2 - 30 + (xOffset or 0)
	local y = 220
	local sin = math.sin(CurTime() * 2)
	if hover then
		y = math.Round(y + (sin * 30))
	end
	local h = 64 * 3

	local isLookingAt
	if (alpha > 0.5) then
		isLookingAt = LocalPlayer():GetEyeTrace().Entity == npc
	end
	npc.overheadAlpha = npc.overheadAlpha or 0
	if isLookingAt then
		npc.overheadAlpha = math.Clamp(npc.overheadAlpha + (FrameTime() * 3), 0, 1)
	else
		npc.overheadAlpha = math.Clamp(npc.overheadAlpha - (FrameTime() * 3), 0, 1)
	end

	local darkerColor = Color(col.r * 0.5, col.g * 0.5, col.b * 0.5)
	XeninUI:DrawRoundedBox(64, x, y, width, h, ColorAlpha(darkerColor, npc.overheadAlpha * 255))
	XeninUI:DrawRoundedBox(64, x + 8, y + 8, width - 16, h - 16, ColorAlpha(col, npc.overheadAlpha * 255))



	local textX = !icon and (width / 2) or h
	XeninUI:DrawShadowText(str, "XeninUI.NPC.Overhead", x + textX + textOffset, h / 2 + y - 10, Color(225, 225, 225, alpha), icon and TEXT_ALIGN_LEFT or TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 5, 125)

	if icon then
		surface.SetDrawColor(255, 255, 255, alpha)
		surface.SetMaterial(icon)
		local margin = tbl.icon_margin or tbl.iconMargin or 30
		surface.DrawTexturedRect(x + margin, y + margin, h - (margin * 2), h - (margin * 2))
	end





end

function XeninUI:DrawShadowText(text, font, x, y, col, xAlign, yAlign, amt, shadow)
	for i = 1, amt do
		draw.SimpleText(text, font, x + i, y + i, Color(0, 0, 0, i * (shadow or 50)), xAlign, yAlign)
	end

	draw.SimpleText(text, font, x, y, col, xAlign, yAlign)
end

function XeninUI:DrawOutlinedText(str, font, x, y, col, xAlign, yAlign, outlineCol, thickness)
	thickness = thickness or 1

	for i = 1, thickness do
		draw.SimpleText(str, font, x - thickness, y - thickness, outlineCol or color_black, xAlign, yAlign)
		draw.SimpleText(str, font, x - thickness, y + thickness, outlineCol or color_black, xAlign, yAlign)
		draw.SimpleText(str, font, x + thickness, y - thickness, outlineCol or color_black, xAlign, yAlign)
		draw.SimpleText(str, font, x + thickness, y + thickness, outlineCol or color_black, xAlign, yAlign)
	end

	draw.SimpleText(str, font, x, y, col, xAlign, yAlign)
end

function XeninUI:DrawHollowArc(cx, cy, radius, thickness, startang, endang, roughness, color)
	surface.SetDrawColor(color)

	local arc = self:CacheHollowArc(cx, cy, radius, thickness, startang, endang, roughness)

	for i, vertex in pairs(arc) do
		surface.DrawPoly(vertex)
	end
end

function XeninUI:CacheHollowArc(cx, cy, radius, thickness, startang, endang, roughness)
	local triarc = {}



	local roughness = math.max(roughness or 1, 1)
	local step = roughness


	local startang, endang = startang or 0, endang or 0

	if startang > endang then
		step = math.abs(step) * -1
	end


	local inner = {}
	local r = radius - thickness
	for deg = startang, endang, step do
		local rad = math.rad(deg)

		local ox, oy = cx + (math.cos(rad) * r), cy + (-math.sin(rad) * r)
		table.insert(inner, {
			x = ox,
			y = oy,
			u = (ox - cx) / radius + .5,
			v = (oy - cy) / radius + .5
		})
	end


	local outer = {}
	for deg = startang, endang, step do
		local rad = math.rad(deg)

		local ox, oy = cx + (math.cos(rad) * radius), cy + (-math.sin(rad) * radius)
		table.insert(outer, {
			x = ox,
			y = oy,
			u = (ox - cx) / radius + .5,
			v = (oy - cy) / radius + .5
		})
	end


	for tri = 1, #inner * 2 do
		local p1, p2, p3
		p1 = outer[math.floor(tri / 2) + 1]
		p3 = inner[math.floor((tri + 1) / 2) + 1]
		if tri % 2 == 0 then
			p2 = outer[math.floor((tri + 1) / 2)]
		else
			p2 = inner[math.floor((tri + 1) / 2)]
		end

		table.insert(triarc, {
			p1,
			p2,
			p3
		})
	end


	return triarc
end


function XeninUI:DualText(title, subtitle, x, y, w, h)
	x = x or 0
	y = y or 0

	surface.SetFont(title[2])
	local tW, tH = surface.GetTextSize(title[1])

	surface.SetFont(subtitle[2])
	local sW, sH = surface.GetTextSize(subtitle[1])

	XeninUI:DrawShadowText(title[1], title[2], x, y + (h / 2 - sH / 2), title[3], title[4], TEXT_ALIGN_CENTER, title[5], title[6])
	XeninUI:DrawShadowText(subtitle[1], subtitle[2], x, y + (h / 2 + tH / 2), subtitle[3], subtitle[4], TEXT_ALIGN_CENTER, subtitle[5], subtitle[6])
end

function XeninUI:DrawIconRotated(x, y, w, h, rotation, pnl, col, loadCol)
	col = col or color_white
	loadCol = loadCol or XeninUI.Theme.Accent

	if (pnl.Icon and type(pnl.Icon) == "IMaterial") then
		surface.SetMaterial(pnl.Icon)
		surface.SetDrawColor(col)
		XeninUI:DrawRotatedTexture(x, y, w, h, rotation)
	elseif (pnl.Icon != nil) then
		XeninUI:DrawLoadingCircle(h, h, h, loadCol)
	end
end

--addons/xenin_framework/lua/xeninui/libs/wyvern.lua:
XeninUI.openTime = 0.15
XeninUI.closeTime = 0.15

function XeninUI:GetColorLightness(color)
    local uiColors = {
        color.r / 255,
        color.g / 255,
        color.b / 255
    }
    for i, c in ipairs(uiColors) do
        if c <= 0.03928 then
            uiColors[i] = c / 12.92
        else
            uiColors[i] = math.pow((c + 0.055) / 1.055, 2.4)
        end
    end
    return 0.2126 * uiColors[1] + 0.6152 * uiColors[2] + 0.0622 * uiColors[3]
end

function XeninUI:GetContrastColor(bgColor, colLight, colDark, darkRequirement)
    colLight = colLight or Color(255, 255, 255)
    colDark = colDark or Color(0, 0, 0)
    darkRequirement = darkRequirement or 0.21

    if XeninUI:GetColorLightness(bgColor) > darkRequirement then
        return colDark
    end

    return colLight
end

function XeninUI:GetCommonRippleColor()
    return XeninUI:GetContrastColor(XeninUI.Theme.Accent, ColorAlpha(XeninUI.Theme.Accent, 20), ColorAlpha(XeninUI.Theme.Accent, 100))
end

function XeninUI:ManipulateColor(col, deltaH, deltaS, deltaV)
    local h, s, v = ColorToHSV(col)

    return HSVToColor(math.Clamp(h + deltaH, 0, 360), math.Clamp(s + deltaS, 0, 1), math.Clamp(v + deltaV, 0, 1))
end

local surface_SetDrawColor = surface.SetDrawColor
local rad = math.rad
local sin = math.sin
local cos = math.cos

function XeninUI:CalculateCircle(sx, sy, radius, vertexCount, angle)
    local vertices = {}
    local ang = -rad(angle or 0)
    local c = cos(ang)
    local s = sin(ang)
    for i = 0, 360, 360 / vertexCount do
        local radd = rad(i)
        local x = cos(radd)
        local y = sin(radd)

        local tempx = x * radius * c - y * radius * s + sx
        y = x * radius * s + y * radius * c + sy
        x = tempx

        vertices[#vertices + 1] = {
            x = x,
            y = y,
            u = u,
            v = v
        }
    end

    return vertices
end

function XeninUI:DrawCachedCircle(vertices, color)
    if vertices and #vertices > 0 then
        draw.NoTexture()
        surface_SetDrawColor(color)
        surface.DrawPoly(vertices)
    end
end

function XeninUI:DrawCircle(sx, sy, radius, vertexCount, color)
    local vertices = {}
    local ang = -rad(0)
    local c = cos(ang)
    local s = sin(ang)
    for i = 0, 360, 360 / vertexCount do
        local radd = rad(i)
        local x = cos(radd)
        local y = sin(radd)

        local tempx = x * radius * c - y * radius * s + sx
        y = x * radius * s + y * radius * c + sy
        x = tempx

        vertices[#vertices + 1] = {
            x = x,
            y = y,
            u = u,
            v = v
        }
    end

    if vertices and #vertices > 0 then
        draw.NoTexture()
        surface_SetDrawColor(color)
        surface.DrawPoly(vertices)
    end
end

local matCorner8 = Material("materials/wyvernf4/corner_8.png")
local matCorner16 = Material("materials/wyvernf4/corner_16.png")





function XeninUI:Ease2(t, b, c, d)
    t = t / d
    local ts = t * t
    local tc = ts * t
    return b + c * (9.3475 * tc * ts + -22.6425 * ts * ts + 15.495 * tc + -1.3 * ts + 0.1 * t)
end

function XeninUI:AddRippleFunctions(pnl)
    pnl.ripples = {}

    function pnl:PaintRipples(w, h)
        draw.NoTexture()
        for i, ripple in ipairs(self.ripples) do
            local t = ripple.endTime - CurTime()
            local f = math.Clamp(1 - (t / ripple.duration), 0, 1)
            local f2 = XeninUI:Ease2(f, 0, 1, 1)

            local r = self:GetFurthestDistanceFrom(ripple.x, ripple.y) + 5
            XeninUI:DrawCircle(ripple.x, ripple.y, r * f2, ripple.vertexCount, ColorAlpha(ripple.color, math.Clamp(ripple.alpha * ripple.color.a, 0, 100)))

            if f >= 1 then
                local doFade = true
                if input.IsMouseDown(MOUSE_LEFT) and i == #self.ripples and pnl:IsHovered() then
                    doFade = false
                end

                if doFade then
                    ripple.alpha = ripple.alpha + (0 - ripple.alpha) * 10 * FrameTime()

                    if not ripple.isFading then
                        if ripple.callback then ripple.callback(false)end

                        ripple.isFading = true
                    end
                end
            end
        end

        for i = #self.ripples, 1, -1 do
            local ripple = self.ripples[i]
            if ripple.alpha < 0.01 then
                if ripple.callback then
                    ripple.callback(true)
                end

                table.remove(self.ripples, i)
            end
        end
    end

    local oldPaint = pnl.Paint
    function pnl:Paint(w, h)
        if oldPaint then oldPaint(self, w, h)end

        XeninUI:Mask(function()
            XeninUI:DrawRoundedBox(8, 0, 0, w, h, color_white)
        end, function()
            self:PaintRipples(w, h)
        end)
    end

    function pnl:AddRipple(x, y, options)
        local duration = options.duration or 0.5

        self.ripples[#self.ripples + 1] = {
            x = x,
            y = y,
            endTime = CurTime() + duration,
            alpha = 1,
            duration = duration,
            color = options.color or Color(255, 255, 255, 2),
            vertexCount = options.vertexCount or 30,
            callback = options.callback
        }
    end

    function pnl:GetFurthestDistanceFrom(x, y)
        local w, h = self:GetSize()
        local dx, dy

        if x < w / 2 then
            if y < h / 2 then
                dx = w - x
                dy = h - y
            else
                dx = w - x
                dy = 0 - y
            end
        else
            if y < h / 2 then
                dx = 0 - x
                dy = h - y
            else
                dx = 0 - x
                dy = 0 - y
            end
        end

        return math.sqrt(dx * dx + dy * dy)
    end
end

function XeninUI:AddRippleClickEffect(pnl, color, duration)
    self:AddRippleFunctions(pnl)

    pnl.rippleColor = color
    pnl.rippleDuration = duration

    function pnl:OnMousePressedRipple(code)
        if self.GetDisabled and self:GetDisabled() then return end

        if code == MOUSE_LEFT then
            local cx, cy = self:CursorPos()
            self:AddRipple(cx, cy, {
                color = pnl.rippleColor,
                duration = pnl.rippleDuration
            })
        end
    end

    local oldMousePressed = pnl.OnMousePressed
    function pnl:OnMousePressed(code)
        pnl:OnMousePressedRipple(code)

        if oldMousePressed then
            return oldMousePressed(self, code)
        end
    end
end

--addons/xenin_framework/lua/xeninui/libs/languages/core.lua:
XeninUI.HTTPReady = (function() local __laux_nilish_coalescing_var = XeninUI.HTTPReady if __laux_nilish_coalescing_var ~= nil then return __laux_nilish_coalescing_var else return false end end)()
XeninUI.LanguageAddons = {}

if (!file.IsDir("xenin/languages", "DATA")) then
	file.CreateDir("xenin/languages")
end

local LANG = {}
LANG.Languages = {}
LANG.Queue = {}

AccessorFunc(LANG, "m_url", "URL")
AccessorFunc(LANG, "m_folder", "Folder")
AccessorFunc(LANG, "m_branch", "Branch")

function LANG:SetActiveLanguage(lang)
	self.activeLang = lang

	self.Languages[lang] = self.Languages[lang] or {
		phrases = {},
		cachedPhrases = {}
	}
end

function LANG:GetActiveLanguage(lang)
	return self.activeLang end

function LANG:SetID(id)
	self.ID = id

	if (!file.IsDir("xenin/languages/" .. id, "DATA")) then
		file.CreateDir("xenin/languages/" .. id)
	end
end

function LANG:GetID()
	return self.ID
end

function LANG:GetQueue()
	return self.Queue
end

function LANG:AddToQueue(lang, overwrite, promise)
	table.insert(self.Queue, {
		lang = lang,
		overwrite = overwrite,
		promise = promise
	})
end

function LANG:EmptyQueue()
	self.Queue = {}
end

function LANG:ProcessQueue()
	for i, v in ipairs(self:GetQueue()) do
		self:Download(v.lang, v.overwrite, v.promise)
	end
end

function LANG:GetFilePath(lang)
	return "xenin/languages/" .. self:GetID() .. "/" .. lang .. ".json"
end

function LANG:Exists(lang)
	return file.Exists(self:GetFilePath(lang), "DATA")
end

function LANG:SetLocalLanguage(lang, tbl)
	local _tbl = {}
	_tbl.cachedPhrases = {}
	tbl = isstring(tbl) and self:ParseJSON(tbl) or tbl
	table.Merge(_tbl, tbl)

	self.Languages[lang] = _tbl
end

function LANG:ParseJSON(json)
	local tbl = util.JSONToTable(json)
	if (!tbl) then return end
	for i, v in pairs(tbl.functions or {}) do
		tbl.functions[i] = CompileString(v, i)
	end

	return tbl
end

function LANG:Download(lang, overwrite, p)
	if p == nil then p = XeninUI.Promises.new()
	end
	if (self:GetLanguage(lang) and !overwrite) then
		local tbl = self:GetLanguage(lang)
		if tbl then
			return p:resolve(tbl)
		else
			local tbl = file.Read(self:GetFilePath(lang), "DATA")
			if tbl then
				return p:resolve(self:ParseJSON(tbl))
			end
		end


	end

	if (!XeninUI.HTTPReady) then
		self:AddToQueue(lang, overwrite, p)

		return p
	end

	local branch = self:GetBranch() or "master"
	local url = self.ComputeURL and self:ComputeURL(lang) or self:GetURL() .. "/raw/" .. branch .. "/" .. self:GetFolder() .. "/" .. lang .. ".json"
	local function tryDownloadFromServer(err)
		if (CLIENT and !LocalPlayer()["__XeninLanguageRequest_" .. tostring(self:GetID()) .. "_" .. tostring(lang)]) then
			LocalPlayer()["__XeninLanguageRequest_" .. tostring(self:GetID()) .. "_" .. tostring(lang)] = true

			XeninUI.LanguagesNetwork:sendRequestLanguage(self:GetID(), lang)

			return p:reject(err or "Download failure, attempting to download from server>")
		end

		return p:reject(err or "Download failure, attempting to download from server>")
	end

	http.Fetch(url, function(body, size, headers, code)
		if (code != 200) then
			return tryDownloadFromServer()
		end
		if (size == 0) then
			return tryDownloadFromServer("GitLab is down??")
		end


		if (body:sub(1, 15) == "<!DOCTYPE html>") then
			return tryDownloadFromServer(lang .. " language not found")
		end
		local tbl = self:ParseJSON(body)
		if (!tbl) then
			return tryDownloadFromServer("Unable to decode JSON")
		end

		file.Write(self:GetFilePath(lang), body)

		local _tbl = {}
		_tbl.cachedPhrases = {}
		table.Merge(_tbl, tbl)

		self.Languages[lang] = _tbl

		p:resolve(tbl, body, headers)
	end, function(err)

		if (CLIENT and !LocalPlayer()["__XeninLanguageRequest_" .. tostring(self:GetID()) .. "_" .. tostring(lang)]) then
			LocalPlayer()["__XeninLanguageRequest_" .. tostring(self:GetID()) .. "_" .. tostring(lang)] = true

			XeninUI.LanguagesNetwork:sendRequestLanguage(self:GetID(), lang)

			return p:reject("Download failure, attempting to download from server>")
		end

		p:reject(err)
	end)

	return p
end

function LANG:GetLanguage(lang)
	return self.Languages[lang] or {
		phrases = {},
		cachedPhrases = {},
		functions = {}
	}
end

function LANG:GetCachedPhrase(lang, phrase)
	local tbl = self:GetLanguage(lang)
	local str

	if (!tbl.cachedPhrases[phrase]) then
		local split = string.Explode(".", phrase)
		local outputPhrase = tbl.phrases
		for i, v in ipairs(split) do
			if (!outputPhrase[v]) then
				outputPhrase = nil

				break
			end

			outputPhrase = outputPhrase[v]
		end

		str = outputPhrase
		tbl.cachedPhrases[phrase] = outputPhrase
	else
		str = tbl.cachedPhrases[phrase]
	end

	return str
end

function LANG:GetPhrase(phrase, replacement)
	local activeLang = self:GetActiveLanguage()
	local str = self:GetCachedPhrase(activeLang, phrase)
	if (!str and activeLang != "english") then
		str = self:GetCachedPhrase("english", phrase)

		if (!str) then str = phrase end
	end

	if (replacement and str) then
		for i, v in pairs(replacement) do
			str = str:Replace(":" .. i .. ":", v)
		end
	end

	return str
end

function XeninUI:Language(id)
	if self.LanguageAddons[id] then
		return self.LanguageAddons[id]
	end

	local tbl = table.Copy(LANG)
	tbl:SetID(id)

	self.LanguageAddons[id] = tbl

	return tbl
end

hook.Add("InitPostEntity", "XeninUI.Languages", function()

	timer.Simple(3, function()
		XeninUI.HTTPReady = true

		for i, v in pairs(XeninUI.LanguageAddons) do
			v:ProcessQueue()
		end
	end)
end)

--addons/xenin_framework/lua/xeninui/libs/scripts/network/client.lua:
local ScriptsNetwork
do
  local _class_0
  local _parent_0 = XeninUI.Network
  local _base_0 = {
    __name = "ScriptsNetwork",
    __base = XeninUI.Network.__base,
    receiveScripts = function(self, ply)
      local scripts = self:decompress()
      XeninUI.Scripts:setAll(scripts)

      hook.Run("Xenin.Framework.ReceivedScripts", scripts)
    end,
    receiveUpdateScripts = function(self, ply)
      local tbl = self:decompress()
      for i, v in ipairs(tbl) do
        chat.AddText(unpack(v))
      end
    end,
    requestScripts = function(self)
      if self.SentScriptsRequest then
        hook.Run("Xenin.Framework.ReceivedScripts", XeninUI.Scripts:getAll())

        return
      end

      self.SentScriptsRequest = true

      self:sendRequestScripts()
    end,
    sendRequestScripts = function(self)
      self:send("Xenin.Framework.Scripts", function(self) end)
    end,
    __type = function(self)
      return "XeninUI.ScriptsNetwork"end
  }
  _base_0.__index = _base_0
  setmetatable(_base_0, _parent_0.__index)
  _class_0 = setmetatable({
    __init = function(self)
      ScriptsNetwork.__parent.__init(self)

      self:receiver("Xenin.Framework.Scripts", self.receiveScripts)
      self:receiver("Xenin.Framework.UpdateScriptsMessage", self.receiveUpdateScripts)
    end,
    __base = _base_0,
    __parent = _parent_0
  }, {
    __index = function(cls, parent)
      local val = rawget(_base_0, parent)
      if val == nil then local _parent = rawget(cls, "__parent")
        if _parent then return _parent[parent]
        end
      else
        return val
      end
    end,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  if _parent_0.__inherited then _parent_0.__inherited(_parent_0, _class_0)
  end
  ScriptsNetwork = _class_0
end

XeninUI.ScriptsNetwork = ScriptsNetwork()

--addons/xenin_framework/lua/xeninui/libs/configurator/network/client.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/top.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/entities/row.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/color.lua:
local x

--addons/xenin_framework/lua/xeninui/libs/players/ui/frame.lua:
local PANEL = {}

function PANEL:Init()
  if IsValid(XeninUI.Players.Frame) then
    XeninUI.Players.Frame:Remove()
  end

  XeninUI.Players.Frame = self

  self:SetTitle("Xenin Hub")
  self:MakePopup()

  self.Sidebar = self:Add("XeninUI.SidebarV2")
  self.Sidebar:Dock(LEFT)
  self.Sidebar:SetBody(self)
  self.Sidebar:CreateDivider()
  self.Sidebar:CreatePanel("Notifications", nil, "XeninUI.Players.Notifications", "8JweIot")
  self.Sidebar:SetActiveByName("Notifications")

  self.Player = self.Sidebar:Add("XeninUI.Sidebar.Player")
  self.Player:Dock(TOP)
end

function PANEL:PerformLayout(w, h)
  self.BaseClass.PerformLayout(self, w, h)

  self:SetSize(XeninUI.Frame.Width, XeninUI.Frame.Height)
  self:Center()

  local sw = 0
  for i, v in ipairs(self.Player.Text.Rows) do
    surface.SetFont(v.font)
    local tw = surface.GetTextSize(v.text)

    sw = math.max(sw, 68 + tw + 68 / 2 + 8)
  end
  for i, v in ipairs(self.Sidebar.Sidebar) do
    surface.SetFont("XeninUI.SidebarV2.Name")
    local nameTw = surface.GetTextSize(v.Name or "")
    surface.SetFont(v.DescFont)
    local descTw = surface.GetTextSize(v.Desc or "")

    local tw = math.max(nameTw, descTw) + 12 + 8
    if v.Icon then
      tw = tw + 68
    end

    sw = math.max(sw, tw)
  end
  self.Sidebar:SetWide(sw)
  self.Sidebar:SetTall(56)

  self.Player:SetTall(68)
end

vgui.Register("XeninUI.Players", PANEL, "XeninUI.Frame")

--addons/xenin_framework/lua/xeninui/libs/players/network/client.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/button_v2.lua:
local PANEL = {}




AccessorFunc(PANEL, "_cStartCol", "StartColor")
AccessorFunc(PANEL, "_cEndcol", "EndColor")
AccessorFunc(PANEL, "_iRoundness", "Roundness")
AccessorFunc(PANEL, "_iOffsetX", "XOffset", FORCE_NUMBER)
AccessorFunc(PANEL, "_iOffsetY", "YOffset", FORCE_NUMBER)
AccessorFunc(PANEL, "_sIcon", "Icon")
AccessorFunc(PANEL, "_cHoverColor", "HoverColor")
AccessorFunc(PANEL, "_cSolidColor", "SolidColor")
AccessorFunc(PANEL, "_cTextColor", "TextColor")
AccessorFunc(PANEL, "_iIconSize", "IconSize", FORCE_NUMBER)


XeninUI:CreateFont("XeninUI.GradientButton.Default", 24)

function PANEL:SetSolidColor(col)
	self.SolidColorStatic = col

	self._cSolidColor = col
end

function PANEL:Init()
	self:SetText("")
	self:SetSolidColor(Color(158, 53, 210))
	self:SetStartColor(Color(158, 53, 210))
	self:SetEndColor(Color(109, 77, 213))
	self:SetFont("XeninUI.GradientButton.Default")
	self:SetRoundness(self:GetTall())
	self:SetContentAlignment(5)
	self:SetXOffset(0)
	self:SetYOffset(0)
	self:SetGradient(false)
	self:SetTextColor(color_white)

	self.ButtonAlpha = 255

	self.SetText = function(self, text)
		self._sText = text
	end
	self.GetText = function(self)
		return self._sText
	end
end

function PANEL:SizeToContentsX(padding)
	if padding == nil then padding = 0
	end
	surface.SetFont(self:GetFont())
	local tw = surface.GetTextSize(self:GetText())

	self:SetWide(tw + padding)
end

function PANEL:IsGradient()
	return self._bUniform
end

function PANEL:SetGradient(bBool)
	self._bUniform = bBool
end

function PANEL:RoundFromTallness()
	self:SetRoundness(self:GetTall())
end

function PANEL:SetContentAlignment(iInteger)
	self._iHorizontalAlignment = (iInteger - 1) % 3
	self._iVerticalAlignment = (iInteger == 5 or iInteger == 6 or iInteger == 4) and 1 or (iInteger == 1 or iInteger == 2 or iInteger == 3) and 4 or 3

	self._bTopAligned = self._iVerticalAlignment == 3
	self._bBottomAligned = self._iVerticalAlignment == 4

	self._bLeftAligned = self._iHorizontalAlignment == 0
	self._bRightAligned = self._iHorizontalAlignment == 2
end

local ShadowColor = Color(0, 0, 0, 50)
function PANEL:Paint(w, h)
	local aX, aY = self:LocalToScreen()
	local cStartColor, cEndColor, cColor = ColorAlpha(self:GetStartColor(), self.ButtonAlpha), ColorAlpha(self:GetEndColor(), self.ButtonAlpha), ColorAlpha(self:GetSolidColor(), self.ButtonAlpha)

	if self:GetRoundness() > 0 then
		XeninUI:Mask(function()
			XeninUI:DrawRoundedBox(self:GetRoundness(), 0, 0, w, h, color_white)
		end, function()
			if self:IsGradient() then
				draw.SimpleLinearGradient(aX, aY, w, h, cStartColor, cEndColor, true)
			else
				surface.SetDrawColor(cColor)
				surface.DrawRect(0, 0, w, h)
			end
		end)
	else
		if self:IsGradient() then
			draw.SimpleLinearGradient(aX, aY, w, h, cStartColor, cEndColor, true)
		else
			surface.SetDrawColor(cColor)
			surface.DrawRect(0, 0, w, h)
		end
	end

	local iconID = self:GetIcon()
	local icon = iconID and XeninUI:GetIcon(iconID) or false
	local size = 0
	if icon then
		size = self:GetIconSize() or h * 0.8
		if (icon != "Loading") then
			surface.SetMaterial(icon)

			surface.SetDrawColor(ShadowColor)
			surface.DrawTexturedRect(5 + 1, h / 2 - Size / 2 + 2, Size, Size)

			surface.SetDrawColor(iconColor or Color(235, 235, 235))
			surface.DrawTexturedRect(5, h / 2 - Size / 2 + 1, Size, Size)
		else
			XeninUI:DrawLoadingCircle(h / 2, h / 2, h - 24, XeninUI.Theme.Blue)
		end
	end
	local XOffset, YOffset = self:GetXOffset() + (self._bLeftAligned and Size or 0), self:GetYOffset()

	draw.SimpleText(self:GetText(), self:GetFont(), self._bLeftAligned and XOffset or self._bRightAligned and w + XOffset or w / 2 + XOffset, self._bTopAligned and YOffset or self._bBottomAligned and (h + YOffset) or h / 2 + YOffset, self:GetTextColor(), self._iHorizontalAlignment, self._iVerticalAlignment)
end

function PANEL:OnCursorEntered()
	if (self:GetHoverColor() and !self:IsGradient()) then
		self:LerpColor("_cSolidColor", self:GetHoverColor())
	else
		self:Lerp("ButtonAlpha", 127.5)
	end
end

function PANEL:OnCursorExited()
	if (self:GetHoverColor() and !self:IsGradient()) then
		self:LerpColor("_cSolidColor", self.SolidColorStatic)
	else
		self:Lerp("ButtonAlpha", 255)
	end
end
vgui.Register("XeninUI.ButtonV2", PANEL, "DButton")

--addons/xenin_framework/lua/xeninui/elements/checkbox_slider.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/colormixer.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/frame.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/frame.lua:
XeninUI:CreateFont("XeninUI.Frame.Title", 28)

local PANEL = {}

function PANEL:Init()
	self.top = vgui.Create("Panel", self)
	self.top:Dock(TOP)
	self.top.Paint = function(pnl, w, h)
		draw.RoundedBoxEx(6, 0, 0, w, h, XeninUI.Theme.Primary, true, true, false, false)
	end

	if XeninUI.Branding then
		local isMat = type(XeninUI.Branding) == "IMaterial"

		self.branding = vgui.Create("Panel", self.top)
		self.branding:Dock(LEFT)
		if (!isMat) then
			XeninUI:DownloadIcon(self.branding, XeninUI.Branding)
		end
		self.branding.Paint = function(pnl, w, h)
			if isMat then
				surface.SetDrawColor(color_white)
				surface.SetMaterial(XeninUI.Branding)
				surface.DrawTexturedRect(4, 4, w - 8, h - 8)
			else
				XeninUI:DrawIcon(4, 4, w - 8, h - 8, pnl)
			end
		end
	end

	self.title = vgui.Create("DLabel", self.top)
	self.title:Dock(LEFT)
	self.title:DockMargin(IsValid(self.branding) and 0 or 10, 0, 0, 0)
	self.title:SetFont("XeninUI.Frame.Title")
	self.title:SetTextColor(color_white)

	self.closeBtn = vgui.Create("DButton", self.top)
	self.closeBtn:Dock(RIGHT)
	self.closeBtn:SetText("")
	self.closeBtn.CloseButton = Color(195, 195, 195)
	self.closeBtn.Alpha = 0
	self.closeBtn.DoClick = function(pnl)
		self:Remove()
	end
	self.closeBtn.Paint = function(pnl, w, h)
		draw.RoundedBox(6, 0, 0, w, h, ColorAlpha(XeninUI.Theme.Red, pnl.Alpha))

		surface.SetDrawColor(pnl.CloseButton)
		surface.SetMaterial(XeninUI.Materials.CloseButton)
		surface.DrawTexturedRect(12, 12, w - 24, h - 24)
	end
	self.closeBtn.OnCursorEntered = function(pnl)
		pnl:Lerp("Alpha", 255)
		pnl:LerpColor("CloseButton", Color(255, 255, 255))
	end
	self.closeBtn.OnCursorExited = function(pnl)
		pnl:Lerp("Alpha", 0)
		pnl:LerpColor("CloseButton", Color(195, 195, 195))
	end
end

function PANEL:SetTitle(str)
	self.title:SetText(str)
	self.title:SizeToContents()
end

function PANEL:PerformLayout(w, h)
	self.top:SetTall(40)

	if IsValid(self.branding) then
		self.branding:SetWide(self.top:GetTall())
	end

	self.closeBtn:SetWide(self.top:GetTall())
end

function PANEL:Paint(w, h)
	local x, y = self:LocalToScreen()

	BSHADOWS.BeginShadow()
	draw.RoundedBox(6, x, y, w, h, XeninUI.Theme.Background)
	BSHADOWS.EndShadow(1, 2, 2, 255, 0, 0)
end

function PANEL:ShowCloseButton(show)
	self.closeBtn:SetVisible(show)
end

vgui.Register("XeninUI.Frame", PANEL, "EditablePanel")

concommand.Add("xeninui", function()
	local frame = vgui.Create("XeninUI.Frame")
	frame:SetSize(960, 720)
	frame:Center()
	frame:MakePopup()
	frame:SetTitle("Party")
end)

--addons/xenin_framework/lua/xeninui/elements/query.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/sidebar.lua:
local PANEL = {}

XeninUI:CreateFont("XeninUI.Sidebar.Category.Title", 22)

AccessorFunc(PANEL, "m_body", "Body")
AccessorFunc(PANEL, "m_backgroundColor", "BackgroundColor")

function PANEL:Init()
  self:SetBackgroundColor(XeninUI.Theme.Navbar)

  self.buttons = {}
  self.panels = {}

  self:DockPadding(0, 0, 0, 0)
end

function PANEL:AddCategory(name)
  local panel = self:Add("Panel")
  panel:Dock(TOP)
  panel:DockMargin(0, 8, 0, 8)
  panel:SetTall(25)
  panel.color = Color(202, 202, 202)
  panel.Paint = function(pnl, w, h)
    draw.SimpleText(name, "XeninUI.Sidebar.Category.Title", w / 2, 0, pnl.color, TEXT_ALIGN_CENTER)
    surface.SetFont("XeninUI.Sidebar.Category.Title")
    local tw, th = surface.GetTextSize(name)

    surface.SetDrawColor(pnl.color)
    surface.DrawLine(10, th + 2, w - 10, th + 2)
  end
end

function PANEL:AddTab(name, icon, panelClass, panelFunc)
  local button = self:Add("XeninUI.Sidebar.Category")
  button:Dock(TOP)
  button:SetName(name)
  button:SetIcon(icon)
  button.OnMouseReleased = function(pnl)
    self:SetActive(pnl.Id)
  end
  button.panelClass = panelClass
  button.OnPanelCreated = function(pnl, panel)
    panelFunc(pnl, panel)
  end

  local id = table.insert(self.buttons, button)
  button.Id = id
end

function PANEL:SetActive(id, instant)
  if (self.active == id) then return end
  if (self.active and self.buttons[self.active]) then
    self.buttons[self.active].active = false
    self.buttons[self.active]:OnCursorExited()

    if IsValid(self.panels[self.active]) then
      self.panels[self.active]:SetVisible(false)
    end
  end

  self.active = id
  self.buttons[id].active = true

  if (!IsValid(self.panels[id])) then
    local panel = self:GetBody():Add(self.buttons[id].panelClass)
    panel:Dock(FILL)

    self.panels[id] = panel
    self.buttons[id]:OnPanelCreated(self.panels[id])
  else
    self.panels[id]:SetVisible(true)
  end

  if self.panels[id].OnSwitchedTo then
    self.panels[id]:OnSwitchedTo(self.buttons[id]:GetName())
  end

  if instant then
    self.buttons[id].Color = color_white
    self.buttons[id].Alpha = 255
  else
    self.buttons[id]:LerpColor("Color", color_white)
    self.buttons[id]:Lerp("Alpha", 255)
  end

  self:OnActiveChanged(id)
end

function PANEL:OnActiveChanged(id) end

function PANEL:PerformLayout(w, h)
  local width = 0

  surface.SetFont("XeninUI.Sidebar.Category")
  for i, v in pairs(self.buttons) do
    local tw = surface.GetTextSize(v:GetName())
    tw = tw + 64

    if (tw > width) then
      width = tw
    end

    v:SetTall(48)
  end

  self:SetWide(width)
end

function PANEL:Paint(w, h)
  draw.RoundedBoxEx(6, 0, 0, w, h, self:GetBackgroundColor(), false, false, true, false)
end

vgui.Register("XeninUI.Sidebar", PANEL)


local PANEL = {}

XeninUI:CreateFont("XeninUI.Sidebar.Category", 20)

local matGradientSidebar = Material("xenin/gradient_ltr.png")

AccessorFunc(PANEL, "m_name", "Name")
AccessorFunc(PANEL, "m_icon", "Icon")

function PANEL:Init()
  self.Color = Color(140, 140, 140)
  self.Alpha = 0
  self:SetCursor("hand")
end

function PANEL:OnCursorEntered()
  if self.active then return end

  self:Lerp("Alpha", 255)
  self:LerpColor("Color", Color(200, 200, 200))
end

function PANEL:OnCursorExited()
  if self.active then return end

  self:Lerp("Alpha", 0)
  self:LerpColor("Color", Color(140, 140, 140))
end

function PANEL:Paint(w, h)
  surface.SetMaterial(matGradientSidebar)
  surface.SetDrawColor(ColorAlpha(XeninUI.Theme.Accent, self.Alpha))
  surface.DrawTexturedRect(0, 0, w, h)

  local offset = 16
  if self:GetIcon() then
    surface.SetDrawColor(self.Color)
    surface.SetMaterial(self:GetIcon())
    surface.DrawTexturedRect(10, 10, h - 20, h - 20)

    offset = h
  end

  draw.SimpleText(self:GetName():upper(), "XeninUI.Sidebar.Category", offset, h / 2, self.Color, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
end

vgui.Register("XeninUI.Sidebar.Category", PANEL)

--addons/xenin_framework/lua/xeninui/elements/sidebar_v2.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/slider.lua:
local PANEL = {}

AccessorFunc(PANEL, "m_sliderColor", "Color")
AccessorFunc(PANEL, "m_max", "Max")
AccessorFunc(PANEL, "m_min", "Min")
AccessorFunc(PANEL, "m_sliderHeight", "Height")

function PANEL:Init()
  self:SetText("")

  self:SetMin(0)
  self:SetMax(10)
  self:SetHeight(2)
  self:SetColor(XeninUI.Theme.Accent)
  self.fraction = 0

  self.grip = vgui.Create("DButton", self)
  self.grip:SetText("")
  self.grip:NoClipping(true)
  self.grip.xOffset = 0
  self.grip.startSize = self:GetHeight() * 4
  self.grip.size = self.grip.startSize
  self.grip.outlineSize = self.grip.startSize
  self.grip.Paint = function(pnl, w, h)
    XeninUI:DrawCircle(pnl.startSize, h / 2, pnl.outlineSize, 45, ColorAlpha(self:GetColor(), 30), 0)

    XeninUI:DrawCircle(pnl.startSize, h / 2, pnl.size, 45, self:GetColor(), 0)
  end
  self.grip.OnCursorEntered = function(pnl)
    pnl:Lerp("outlineSize", pnl.startSize * 2)
  end
  self.grip.OnCursorExited = function(pnl)
    pnl:Lerp("outlineSize", pnl.startSize)
  end
  self.grip.OnMousePressed = function(pnl)
    pnl.Depressed = true

    pnl:MouseCapture(true)

    pnl:LerpWidth(pnl:GetTall() * 2)
  end
  self.grip.OnMouseReleased = function(pnl)
    pnl.Depressed = nil



    pnl:LerpWidth(pnl.startSize * 2)
    pnl:MouseCapture(false)
  end
  self.grip.OnCursorMoved = function(pnl, x, y)
    if (!pnl.Depressed) then return end

    local x, y = pnl:LocalToScreen(x, y)
    x, y = self:ScreenToLocal(x, y)

    local w = self:GetWide()
    local newX = math.Clamp(x / w, 0, 1)
    self.fraction = newX

    self:OnValueChanged(self.fraction)
    self:InvalidateLayout()
  end
  self.grip:SetWide(self.grip.startSize * 2)
end

function PANEL:OnMousePressed()
  local x, y = self:CursorPos()
  local w = self:GetWide() + (self:GetHeight() * 2)
  local newX = math.Clamp(x / w, 0, 1)

  self.fraction = newX
  self:OnValueChanged(self.fraction)
  self:InvalidateLayout()
end

function PANEL:OnValueChanged(fraction) end

function PANEL:Paint(w, h)
  local height = self:GetHeight()
  local y = h / 2 - height / 2

  surface.SetDrawColor(ColorAlpha(self:GetColor(), 50))
  surface.DrawRect(height, y, w - (height * 2), height)

  local width = self.fraction * (w - (self:GetHeight() / 2))
  surface.SetDrawColor(self:GetColor())
  surface.DrawRect(height, y, width, height)
end

function PANEL:PerformLayout(w, h)
  self.grip:SetTall(h)
  self.grip:SetPos(self.fraction * (w - self.grip.size - (self:GetHeight() / 2)))
end

vgui.Register("XeninUI.Slider", PANEL, "DButton")

--addons/xenin_framework/lua/xeninui/elements/textentry.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/units/main.lua:
XeninUI.Units = XeninUI.Units || {}

--addons/xenin-coinflip/lua/coinflip/ui/games_row.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/entities/whitelist.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

XeninInventory.Whitelist = XeninInventory.Whitelist || {}
local Whitelist
do
  local _class_0
  local _parent_0 = XeninUI.Configurator.Entity
  local _base_0 = {
    __name = "Whitelist",
    __base = XeninUI.Configurator.Entity.__base,
    onSave = function(self)
      local id = self:getId()
      if (!id) then return end

      XeninInventory.Whitelist[id] = self
    end,
    onDelete = function(self)
      local id = self:getId()
      if (!id) then return end

      XeninInventory.Whitelist[id] = nil
    end,
    __type = function(self)
      return "XeninUI.Configurator.Entity"end
  }
  _base_0.__index = _base_0
  setmetatable(_base_0, _parent_0.__index)
  _class_0 = setmetatable({
    __init = function(self)
      Whitelist.__parent.__init(self)

      self:setDatabaseEntity("XeninInventory.Whitelist")

      self:addColumn("id", {
        type = "string",
        primary = true,
        length = 255,
        readOnly = true,
        isName = true
      })
    end,
    __base = _base_0,
    __parent = _parent_0,
    getAllEntities = function()
      return XeninInventory.Whitelist end,
    getGridContent = function()
      local tbl = table.Copy(weapons.GetList())
      for i, v in pairs(scripted_ents.GetList()) do
        if (v.t.ClassName:lower():find("base")) then continue end

        table.insert(tbl, v.t)
      end

      table.sort(tbl, function(a, b)
        return (a.PrintName or a.ClassName) < (b.PrintName or b.ClassName)
      end)

      return tbl
    end,
    selectRowString = "Select A Weapon/Entity",
    getListView = function(entity, isList)
      local id = entity:getId()
      local wep = weapons.Get(id)
      if wep then
        return {
          display = wep.WorldModel,
          title = wep.PrintName,
          subtitle = wep.ClassName,
          entClass = wep.ClassName
        }
      end
      local ent = scripted_ents.Get(id)
      if ent then
        return {
          title = ent.PrintName,
          subtitle = ent.ClassName,
          entClass = ent.ClassName
        }
      end
    end,
    getGridData = function(tbl)
      if (!tbl.PrintName) then return end

      return {
      entClass = tbl.ClassName
      }
    end,
    gridSetDefaultData = function(entity, data, index)
      entity:setId(data.entClass)
    end
  }, {
    __index = function(cls, parent)
      local val = rawget(_base_0, parent)
      if val == nil then local _parent = rawget(cls, "__parent")
        if _parent then return _parent[parent]
        end
      else
        return val
      end
    end,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  if _parent_0.__inherited then _parent_0.__inherited(_parent_0, _class_0)
  end
  Whitelist = _class_0
end

Whitelist.register("XeninInventory.Whitelist", Whitelist)

--addons/xenin-inventory/lua/inventory/essentials/helper.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/languages/french.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/languages/french.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local LANG = {
  ["ConCommand.Drop"] = "Laché :item:",
  ["ConCommand.DropAll"] = "Laché :amount:x :item:",
  ["ConCommand.Destroy"] = "Détruit :amount:x :item:",
  ["ConCommand.Destroy.Popup.Title"] = "Détruire :item:",
  ["ConCommand.Destroy.Popup.Desc"] = "Êtes-vous sûr de vouloir détruire : :item:?",
  ["ConCommand.Destroy.Popup.Yes"] = "Oui",
  ["ConCommand.Destroy.Popup.No"] = "Non",

  ["ChatCommand.Holster.Unable"] = "Vous ne pouvez pas mettre cette arme dans l'étui en raison de votre espace d'inventaire limité",
  ["ChatCommand.Blacklisted"] = "Cet article est sur liste noire !",


  ["Bank.Title"] = "Inventaire - Banque",
  ["XeninInventory.Title"] = "Inventaire",


  ["XeninInventory.Tabs.XeninInventory"] = "INVENTAIRE",


  ["XeninInventory.Popup.Equip"] = "Equiper",
  ["XeninInventory.Popup.Drop"] = "Lacher",
  ["XeninInventory.Popup.Drop All"] = "Lacher tout",
  ["XeninInventory.Popup.Destroy"] = "Détruire",
  ["XeninInventory.Popup.Use"] = "Utiliser",
  ["XeninInventory.Popup.Drop Amount"] = "Lacher un montant",

  ["XeninInventory.Popup.DropAmount.Error.Invalid"] = "Numéro invalide ?",
  ["XeninInventory.Popup.DropAmount.Error.TooLow"] = "Trop bas d'un nombre",
  ["XeninInventory.Popup.DropAmount.Error.TooHigh"] = "Vous ne pouvez pas en laisser tomber autant parce que vous n'en avez pas asser !",


  ["XeninInventory.Actions.Equip"] = "Equiper",
  ["XeninInventory.Actions.Drop"] = "Lacher",
  ["XeninInventory.Actions.Drop All"] = "Tout lacher",
  ["XeninInventory.Actions.Destroy"] = "Détruire",
  ["XeninInventory.Actions.Use"] = "Utiliser",
  ["XeninInventory.Actions.Drop Amount"] = "Lacher un montant",


  ["XeninInventory.Field.Amount"] = "x:amount:",
  ["XeninInventory.Field.MaxAmount"] = "max x:amount:",

  ["XeninInventory.XeninInventory.Search"] = "Rechercher un article",


  ["XeninInventory.XeninInventory.Unsorted"] = "non trié",
  ["XeninInventory.XeninInventory.Alphabetically"] = "Alphabétiquement",
  ["XeninInventory.XeninInventory.WorstToBest"] = "Du pire au meilleur",
  ["XeninInventory.XeninInventory.BestToWorst"] = "Du meilleur au pire",


  ["XeninInventory.Shipment.Desc"] = ":amount: armes à gauche",

  ["XeninInventory.Pickup.Markup"] = ":font::color:Press :/color::rarityColor::modifierKey: + :key::/color: ajouter :name: à votre inventaire:/color::/font:",
  ["XeninInventory.Pickup"] = "Appuyer :modifierKey: + :key: ajouter :name: à votre inventaire",
  ["XeninInventory.Money"] = ":money:",

  ["Admin.Title"] = "Inventaire Admin",
  ["Admin.Tabs.Management"] = "GESTION",
  ["Admin.NotAdmin"] = "Vous devez être un administrateur d'inventaire pour ouvrir ceci !",

  ["Admin.Management.Loading"] = "Chargement...",
  ["Admin.Management.Search"] = "Chercher par Nom/SteamID64",
  ["Admin.Management.Searching"] = "Recherche",
  ["Admin.Management.Online"] = "En Ligne",
  ["Admin.Management.Offline"] = "Hors Ligne",
  ["Admin.Management.OpenInventory"] = "Ouvrir Inventaire",

  ["Admin.Player.Title"] = "Inventaire Joueur",
  ["Admin.Player.Tabs.XeninInventory"] = "INVENTAIRE",
  ["Admin.Player.Tabs.Bank"] = "BANQUE",

  ["Admin.Player.Items"] = ":items: items",

  ["Admin.Player.Clear.XeninInventory"] = "Rénitialiser l'inventaire",
  ["Admin.Player.Clear.Bank"] = "Rénitialiser l'inventaire banque",
  ["Admin.Player.Clear.Popup.Text"] = "êtes-vous sûr de vouloir rénitialiser l'inventaire de : :type: ? C'est une action irréversible",
  ["Admin.Player.Clear.Popup.Yes"] = "Oui",
  ["Admin.Player.Clear.Popup.No"] = "Non",

  ["Admin.Clear.Slot"] = "Votre :type: numéro d'emplacement :id: ont été effacés par un administrateur",
  ["Admin.Clear"] = "Votre :type: ont été effacés par un administrateur"
}


XeninInventory:CreateLanguage("French", LANG)

--addons/xenin-inventory/lua/inventory/configuration/items/bw_weapon.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local ITEM = XeninInventory:CreateItem()
ITEM.Hover = "XeninInventory.Weapon.Hover"

ITEM:AddAction("Equip", 1, function(self, ply, ent, tbl)
  if CLIENT then return true end

  ply:Give(ent)
  ply:SelectWeapon(ent)

  return true
end, function(self, ply, slot)
  local ent = slot.ent
  local data = slot.data
  local name = self:GetName(slot)

  return !ply:HasWeapon(ent), "You already have a(n) " .. name .. " equipped"
end)

ITEM:AddAction("Drop", 2, function(self, ply, ent, tbl)
  local trace = {}
  trace.start = ply:EyePos()
  trace.endpos = trace.start + ply:GetAimVector() * 85
  trace.filter = ply

  local tr = util.TraceLine(trace)
  local baseweapon = ents.Create("bw_weapon")
  local weapon = weapons.Get(ent)
  baseweapon.WeaponClass = tbl.ent
  baseweapon:SetPos(tr.HitPos)
  baseweapon.ammoadd = weapons.Get(ent) and weapons.Get(ent).Primary.DefaultClip

  baseweapon:Spawn()
  baseweapon:SetModel(weapon.WorldModel)
end)

function ITEM:GetDisplayName(ent)
  if (!IsValid(ent)) then return ""end

  return ent.WeaponClass
end

function ITEM:GetName(ent)
  local tbl = weapons.Get(ent.ent)
  if (!tbl) then return ent.PrintName end

  return tbl.PrintName or ent.WeaponClass
end

function ITEM:OnPickup(ply, ent)
  if (!IsValid(ent)) then return end

  local info = {
    ent = ent.WeaponClass,
    dropEnt = ent:GetClass(),
    amount = 1,
    data = self:GetData(ent)
  }
  self:Pickup(ply, ent, info)

  return true
end

ITEM:Register("bw_weapon")

--addons/xenin-inventory/lua/inventory/configuration/items/suits.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local ITEM = XeninInventory:CreateItem()
ITEM.Hover = "XeninInventory.Weapon.Hover"
ITEM.Models = {
["armor_tier5"] = "models/Items/item_item_crate.mdl"
}

ITEM:AddAction("Drop", 2, function(self, ply, ent, tbl)
  local trace = {}
  trace.start = ply:EyePos()
  trace.endpos = trace.start + ply:GetAimVector() * 85
  trace.filter = ply

  local tr = util.TraceLine(trace)
  local weapon = ents.Create(tbl.ent)
  local model = self:GetModel(tbl.ent)
  weapon:SetPos(tr.HitPos)
  weapon.ammoadd = weapons.Get(ent) and weapons.Get(ent).Primary.DefaultClip

  weapon:Spawn()
end)

function ITEM:GetDisplayName(ent)
  if (!IsValid(ent)) then return ""end

  return self:GetName(ent)
end

function ITEM:GetItem(ent)
  return ent
end

function ITEM:GetData(ent)
  return {}
end

function ITEM:GetModel(ent)
  local entClass = istable(ent) and ent.ent or isentity(ent) and ent:GetClass() or ent

  return self.Models[entClass] or "models/Items/item_item_crate.mdl"
end

function ITEM:OnPickup(ply, ent)
  if (!IsValid(ent)) then return end

  local info = {
    ent = ent:GetClass(),
    dropEnt = ent:GetClass(),
    amount = 1,
    data = self:GetData(ent)
  }
  self:Pickup(ply, ent, info)

  return true
end


ITEM:Register("armor_tier5")

--addons/zeros_growop2_v1.6.1/lua/inventory/configuration/items/zgo2_joint_ent.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(1)
ITEM:SetModel("models/zerochain/props_growop2/zgo2_joint.mdl")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data

	if not zgo2.Plant.IsValid(data.WeedID) then
		zclib.Notify(ply, zgo2.language["InvalidPlantData"], 1)
		SafeRemoveEntity(ent)
		return
	end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

	ent:SetWeedID(zgo2.Plant.GetListID(data.WeedID))
	ent:SetWeedAmount(data.WeedAmount)
	ent:SetWeedTHC(data.WeedTHC or 50)

	zclib.Player.SetOwner(ent, ply)
end)

function ITEM:GetData(ent)
	return {
		WeedID = zgo2.Plant.GetID(ent:GetWeedID()),
		WeedAmount = math.Round(ent:GetWeedAmount()),
		WeedTHC = math.Round(ent:GetWeedTHC())
	}
end

function ITEM:GetVisualAmount(item)
	return item.data.WeedAmount
end

function ITEM:GetName(item)
	local ent = isentity(item)
	local WeedID = ent and item:GetWeedID() or item.data.WeedID
	local WeedTHC = ent and item:GetWeedTHC() or ( item.data.WeedTHC or 50 )
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 5f074b2717244cb0b28afc4f82cbfebeed301ee81f5a05ae65232daad257b16a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

	local WeedData = zgo2.Plant.GetData(WeedID)
	if not WeedData then return "Joint" end

	return zgo2.Plant.GetName(WeedID) .. " THC: " .. WeedTHC .. "%"
end

function ITEM:GetDisplayName(item)
    return self:GetName(item)
end

local ang = Angle(0, 45, 0)
function ITEM:GetCameraModifiers(tbl)
    return {
        FOV = 30,
        X = 0,
        Y = 0,
        Z = 50,
        Angles = ang,
        Pos = vector_origin
    }
end

ITEM:Register("zgo2_joint_ent")

--addons/zeros_retrominer_v2.3.6/lua/inventory/configuration/items/zrms_bar.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/importer/importers/itemstore.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local Itemstore
do
  local _class_0
  local _parent_0 = XeninInventory.Importer
  local _base_0 = {
    __name = "Itemstore",
    __base = XeninInventory.Importer.__base,
    readTextData = function(self)
      local p = XeninUI.Promises.new()

      local files, dirs = file.Find("itemstore/*.txt", "DATA")
      local bank = {}
      local inv = {}

      local filesSize = #files
      local i = 1

      local co
      hook.Add("Think", "XeninInventory.ReadData", function()
        if (co != "finished" and (!co or !coroutine.resume(co))) then
          co = coroutine.create(function()
            for i = 0, filesSize - 1 do
              i = i + 1
              local fileName = files[i]
              local path = "itemstore/" .. tostring(fileName)
              local contents = file.Read(path)
              local tbl = util.JSONToTable(contents or "")
              if (!tbl or tbl == "") then continue end
              if (!tbl) then continue end
              local isInv = #fileName == 21
              local sid64 = fileName:sub(1, 17)
              local items = {}
              for i, v in pairs(tbl) do
                v.SteamID = sid64
                v.Slot = i

                local row = self:processRow(v, i)
                if (!row) then continue end

                items[i] = row
              end
              if isInv then
                inv[sid64] = items
              else
                bank[sid64] = items
              end

              if (i == filesSize) then
                co = "finished"

                local result = {
                  bank = bank,
                  inv = inv
                }
                self:setCache("inventory_data", result)
                p:resolve(result)
              end

              if (i % 200 == 0 && i != filesSize) then
                hook.Run("XeninInventory.Importer.Sleeping", i)

                coroutine.wait(0.175)
              end
            end
          end)
          coroutine.resume(co)

        end
      end)

      return p
    end,
    processRow = function(self, tbl, index)
      local settings = self:getCache("settings")
      local output = {}
      if (!tbl.Class) then return end
      if (tbl.Class == "") then return end

      local _class = tbl.Class
      if settings.whitelist_only then
        if (!XeninInventory:GetItem(_class)) then return end
      end

      local sid64 = tbl.SteamID
      local slot = tbl.Slot or index
      local data = tbl.Data and (istable(tbl.Data) and tbl.Data or (util.JSONToTable(tbl.Data) or {})) or {}
      local isWep = tbl.Class == "spawned_weapon"
      local isShip = tbl.Class == "spawned_shipment"
      local dropClass = tbl.Class
      local amount = data.Amount or data.amount or 1
      if (isWep or isShip) then
        data.Amount = nil
        data.amount = nil
        dropClass = isWep and data.Class or isShipment and data.Class or dropClass
      end

      return {
        ["class"] = _class,
        dropClass = dropClass,
        sid64 = sid64,
        slot = slot,
        data = data,
        amount = amount
      }
    end,
    readSQLData = function(self)
      local p = XeninUI.Promises.new()

      local processData = function(query)
        local _p = XeninUI.Promises.new()

        XeninUI:InvokeSQL(XeninInventory.Database:GetConnection(), query, "XeninInventory.Importer.readSQLData"):next(function(result)
          local rows = {}
          for i, v in ipairs(result) do
            local row = self:processRow(v, i)
            if (!row) then continue end

            table.insert(rows, row)
          end

          _p:resolve(rows)
        end, ErrorNoHalt)

        return _p
      end

      XeninUI.Promises.all({
        processData("SELECT * FROM Inventories"),
        processData("SELECT * FROM Banks")
      }):next(function(results)
        local tbl = {
          inv = results[1],
          bank = results[2]
        }

        self:setCache("inventory_data", tbl)
        p:resolve(tbl)
      end, ErrorNoHalt)

      return p
    end,
    readData = function(self, method, settings, override)
      if method == nil then method = "sqlite"
      end
      if settings == nil then settings = {}
      end
      self:setCache("settings", settings)

      if (!override) then
        local cache = self:getCache("inventory_data")
        if cache then
          return XeninUI.Promises.new():resolve(cache)
        end
      end

      if (method == "text") then
        return self:readTextData()
      else
        return self:readSQLData()
      end
    end,
    getInfo = function(self, override)
      local p = XeninUI.Promises.new()
      local cache = self:getCache("provider_info")
      if (cache and !override) then
        return p:resolve(cache)
      end

      local sqlMethod = XeninDB.isMySQL() and "mysql" or "sqlite"

      XeninUI:InvokeSQL(XeninInventory.Database:GetConnection(), "SELECT COUNT(*) AS amount FROM inventory", "XeninInventory.Importer.getProvider"):next(function(result)
        local tbl = {
          type = sqlMethod,
          amount = (((result and result[1]) and result[1].amount) * 2) or 0
        }

        self:setCache("provider_info", tbl)
        p:resolve(tbl, self)
      end, function(err)


        local tbl = {}
        local dirExists = file.IsDir("itemstore", "DATA")
        if dirExists then
          local files, dirs = file.Find("itemstore/*.txt", "DATA")
          tbl = {
            type = "text",
            amount = math.floor(#files / 2)
          }
        else
          tbl = {
          type = "not_installed"
          }
        end

        self:setCache("provider_info", tbl)
        p:resolve(tbl, self)
      end)

      return p
    end,
    importToInventory = function(self)
      local p = XeninUI.Promises.new()
      local settings = self:getCache("settings")
      if (!settings.inventory) then return p:resolve()end
      local data = self:getCache("inventory_data").inv
      local promises = {}

      XeninUI:InvokeSQL(XeninInventory.Database:GetConnection(), "DELETE FROM inventory_player", "XeninInventory.Importer.DeleteInventory"):next(function()
        for sid64, rows in pairs(data) do
          if (#rows == 0) then continue end

          for i, v in ipairs(rows) do
            table.insert(promises, XeninInventory.Database:SaveSlot(v.sid64, v.slot, v.dropClass, v["class"], v.amount or 1, v.data))
          end
        end

        XeninUI.Promises.all(promises):next(function()
          p:resolve()end)
      end)

      return p
    end,
    importToBank = function(self)
      local p = XeninUI.Promises.new()
      local settings = self:getCache("settings")
      if (!settings.bank) then return p:resolve()end
      local data = self:getCache("inventory_data").bank
      local promises = {}

      XeninUI:InvokeSQL(XeninInventory.Database:GetConnection(), "DELETE FROM inventory_bank", "XeninInventory.Importer.DeleteBank"):next(function()
        for sid64, rows in pairs(data) do
          if (#rows == 0) then continue end

          for i, v in ipairs(rows) do
            table.insert(promises, XeninInventory.Database:SaveBankSlot(v.sid64, v.slot, v.dropClass, v["class"], v.amount or 1, v.data))
          end
        end

        XeninUI.Promises.all(promises):next(function()
          p:resolve()end)
      end)

      return p
    end,
    __type = function(self)
      return "XeninInventory.Importer"end
  }
  _base_0.__index = _base_0
  setmetatable(_base_0, _parent_0.__index)
  _class_0 = setmetatable({
    __init = function(self)
      Itemstore.__parent.__init(self)

      self:addSetting("inventory", "Import the players inventory?", true, "Checkbox")
      self:addSetting("bank", "Import the players bank?", true, "Checkbox")
      self:addSetting("whitelist_only", "Import <color=255,255,255>only</color> recognised/whitelisted items?", true, "Checkbox")
    end,
    __base = _base_0,
    __parent = _parent_0
  }, {
    __index = function(cls, parent)
      local val = rawget(_base_0, parent)
      if val == nil then local _parent = rawget(cls, "__parent")
        if _parent then return _parent[parent]
        end
      else
        return val
      end
    end,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  if _parent_0.__inherited then _parent_0.__inherited(_parent_0, _class_0)
  end
  Itemstore = _class_0
end

XeninInventory.Importers:addImporter("ItemStore", Itemstore)

--addons/xenin-inventory/lua/inventory/networking/inventory_client.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

net.Receive("XeninInventory.Slot", function(len)
  local ply = LocalPlayer()
  local inv = ply:XeninInventory()
  local id = net.ReadUInt(10)
  local tbl = net.ReadTable()


  if (table.Count(tbl) == 0) then
    tbl = nil
  end

  inv:Set(id, tbl)

  hook.Run("XeninInventory.SlotUpdateFromServer", id, tbl)
end)

net.Receive("XeninInventory.Bank.Slot", function(len)
  local ply = LocalPlayer()
  local inv = ply:XeninInventory()
  local id = net.ReadUInt(10)
  local tbl = net.ReadTable()


  if (table.Count(tbl) == 0) then
    tbl = nil
  end

  inv:Set(id, tbl, true)

  hook.Run("XeninInventory.SlotUpdateFromServer", id, tbl, true)
end)

net.Receive("XeninInventory.FullSync", function(len)
  local ply = LocalPlayer()
  local inv = ply:XeninInventory()
  local inventory = net.ReadTable()
  local bank = net.ReadTable()
  local bankRows = net.ReadUInt(8)

  inv:SetInventory(inventory)
  inv:SetBank(bank)
end)

net.Receive("XeninInventory.Message", function(len)
  local str = net.ReadString()
  local ply = LocalPlayer()
  local inv = ply:XeninInventory()
  inv:Message(str)
end)

net.Receive("XeninInventory.Admin.Search", function(len)
  local ply = LocalPlayer()
  local data = net.ReadTable()

  hook.Run("XeninInventory.Admin.Search", data)
end)

net.Receive("XeninInventory.RequestSync", function(len)
  local data = net.ReadTable()

  LocalPlayer():XeninInventory():SetInventory(data)

  hook.Run("XeninInventory.InventorySynced")
end)

--addons/xenin-inventory/lua/inventory/ui/inventory.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/ui/inventory_slots.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local PANEL = {}
AccessorFunc(PANEL, "m_columns", "Columns")

function PANEL:Init()
  self.scroll = self:Add("XeninUI.Scrollpanel.Wyvern")
  self.scroll:Dock(FILL)

  self:SetColumns(XeninInventory.Config.ItemsPerRow)

  self.layout = self.scroll:Add("DIconLayout")
  self.layout:Dock(FILL)
  self.layout:DockMargin(0, 0, 8, 0)
  self.layout:SetSpaceY(8)
  self.layout:SetSpaceX(8)
  self.layout.PerformLayout = function(pnl, w, h)
    local children = pnl:GetChildren()
    local count = self:GetColumns()
    local amount = math.max(1, math.floor(#children / count)) * 276
    local width = w / math.min(count, #children)

    local x = 0
    local y = 0

    local spacingX = pnl:GetSpaceX()
    local spacingY = pnl:GetSpaceY()
    local border = pnl:GetBorder()
    local innerWidth = w - border * 2 - spacingX * (count - 1)

    for i, child in ipairs(children) do
      if (!IsValid(child)) then continue end

      child:SetPos(border + x * innerWidth / count + spacingX * x, border + y * child:GetTall() + spacingY * y)
      child:SetSize(innerWidth / count, innerWidth / count)

      x = x + 1
      if (x >= count) then
        x = 0
        y = y + 1
      end
    end

    pnl:SizeToChildren(false, true)
  end

  self.fields = {}
end

function PANEL:Clear()
  self.layout:Clear()

  for i, v in pairs(self.fields) do
    v:Remove()
    self.fields[i] = nil
  end
end

function PANEL:CreateFields(tbl, droppable, slots, bank, func)
  local ply = LocalPlayer()
  local inventory = ply:XeninInventory()
  slots = slots or inventory:GetSlots()

  for i = 1, slots do
    local slot = self.fields[i]

    if (!slot) then
      self.fields[i] = self.layout:Add("XeninInventory.Field")
    end

    self.fields[i]:SetItem(tbl and tbl[i])
    self.fields[i]:SetDroppable(droppable, bank)
    self.fields[i]:SetID(tbl[i] and tbl[i].id or i)
    self.fields[i]:SetIsBank(bank)
    if func then
      func(self, self.fields[i])
    end
  end
end

vgui.Register("XeninInventory.Slots", PANEL)

--addons/xenin-inventory/lua/inventory/ui/admin/management.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/ui/importer/frame.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/punishments/sh_kick.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/punishments/sh_usergroup.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/cl_three_grid.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/inputs/cl_color.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/layouts/popups/cl_edit_preset.lua:
function YAWS.UI.EditPreset(presetData)
    local frame = vgui.Create("yaws.frame")
    frame:SetSize(ScrW() * 0.4, ScrH() * 0.176)
    frame:Center()
    frame:MakePopup()
    frame.bgColor = Color(0, 0, 0, 200)
    frame:DoModal()
    local oldName = presetData.name
    
    local master = vgui.Create("DPanel", frame)
    frame.PerformLayout = function(self, w, h)
        master:Dock(FILL)
        
        if(!YAWS.UserSettings.GetValue("disable_fades")) then 
            frame:FadeIn()
        end
    end 
    
    local settings = vgui.Create("yaws.panel", master)
    settings.Paint = function(self, w, h) 
        -- draw.RoundedBox(0, 0, 0, w, h, Color(0, 255, 0))
    end 
    settings:RemoveShadows()
    
    local name = vgui.Create("yaws.text_entry", settings)
    name:SetPlaceholder(YAWS.Language.GetTranslation("admin_tab_presets_name"))
    name:SetMaximumCharCount(25)
    name:SetValue(presetData.name)
    
    local reason = vgui.Create("yaws.text_entry", settings)
    reason:SetPlaceholder(YAWS.Language.GetTranslation("admin_tab_presets_reason"))
    reason:SetMaximumCharCount(150)
    reason:SetValue(presetData.reason)
    
    local points = vgui.Create("yaws.wang", settings)
    points:SetText("")
    points:SetPlaceholder(YAWS.Language.GetTranslation("generic_point_count"))
    points:SetMin(0)
    points:SetMax(YAWS.Config.GetValue("player_warn_maxpoints"))
    points:SetValue(presetData.points)
    
    settings.PerformLayout = function(self, w, h)
        name:Dock(TOP)
        name:SetHeight(h * 0.276)
        
        reason:Dock(TOP)
        reason:DockMargin(0, 5, 0, 5)
        reason:SetHeight(h * 0.276)
        
        points:Dock(TOP)
        points:SetHeight(h * 0.276)
    end 
    
    
    local buttonPanel = vgui.Create("DPanel", master)
    buttonPanel.Paint = function(self, w, h)
        -- draw.RoundedBox(0, 0, 0, w, h, Color(255, 0, 0))
    end 
    
    local cancel = vgui.Create("yaws.button", buttonPanel)
    cancel:SetLabel(YAWS.Language.GetTranslation("generic_cancel"))
    cancel:SetColors('button_warn_base', 'button_warn_hover')
    cancel.DoClick = function() 
        frame:Close()
    end 
    
    local save = vgui.Create("yaws.button", buttonPanel)
    save:SetLabel(YAWS.Language.GetTranslation("generic_save"))
    save.DoClick = function() 
        YAWS.UI.CurrentData.WaitingForServerResponse = true 
        YAWS.UI.DisplayLoading(YAWS.UI.CurrentData.MasterCache)
        
        net.Start("yaws.config.editpreset")
        net.WriteString(oldName)
        net.WriteString(name:GetValue())
        net.WriteString(reason:GetValue())
        net.WriteUInt(points:GetValue(), 12)
        net.SendToServer()
        
        YAWS.UI.LoadingCache = {
            panel = "edit_preset",
            oldName = oldName,
            name = name:GetValue(),
            reason = reason:GetValue(),
            points = points:GetValue()
        }
        
        frame:Close()
    end 
    
    master.Paint = function(self, w, h) end 
    master.PerformLayout = function(self, w, h) 
        buttonPanel:Dock(BOTTOM)
        buttonPanel:DockPadding(10, 0, 10, 10)
        buttonPanel:SetTall(h * 0.25)
        print(buttonPanel:GetTall())
        
        save:Dock(RIGHT)
        save:SetWide(w * 0.25)
        save:DockMargin(0, 0, 10, 0)
        
        cancel:Dock(RIGHT)
        cancel:SetWide(w * 0.25)
        
        settings:Dock(FILL)
        settings:DockMargin(10, 10, 10, 0)
    end
    master:InvalidateLayout()
end
--addons/yet_another_warn_system/lua/yaws/ui/layouts/popups/cl_edit_punishment.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/layouts/tabs/cl_admin.lua:
function YAWS.UI.Tabs.Admin(master)
    master:Clear()

    -- Content Panel
    local settingsSidebar = vgui.Create("yaws.sidebar", master)

    local panelContainer = vgui.Create("DPanel", master)
    panelContainer.Paint = function() end

    local settingsPanel = vgui.Create("yaws.panel", panelContainer)
    -- settingsPanel:RemoveShadows()
    settingsPanel.Paint = function(self, w, h)
        local colors = YAWS.UI.ColorScheme()
        draw.RoundedBox(0, 0, 0, w, h, colors['panel_background'])
        draw.SimpleText(YAWS.Language.GetTranslation("admin_tab_selecttab"), "yaws.8", w / 2, h / 2, colors['sidebutton_dull'], 1, 1)
    end

    -- this is really shit but idk how else to make this work properly
    local function clearPanel(hidePanelShadow)
        panelContainer:Clear()

        settingsPanel:Remove()
        settingsPanel = vgui.Create("yaws.panel", panelContainer)
        settingsPanel:HideShadows(hidePanelShadow)

        master.PerformLayout = function(self, w, h)
            settingsSidebar:Dock(LEFT)
            settingsSidebar:SetWide((w * 0.1) + 3)
            settingsSidebar:DockMargin(10, 10, 5, 10)

            panelContainer:Dock(FILL)
            panelContainer:DockMargin(0, 0, 0, 0)

            settingsPanel:Dock(FILL)
            settingsPanel:DockMargin(5, 10, 10, 10)
        end
        master:InvalidateLayout()
    end

    settingsSidebar:AddTab(YAWS.Language.GetTranslation("admin_tab_sidebar_permissions"), YAWS.UI.MaterialCache['permissions'], true, function()
        settingsPanel:Clear()
        clearPanel(true)
        settingsPanel.Paint = function() end

        -- Permissions Shit
        local groupSelect = vgui.Create("yaws.combo", panelContainer)
        for k,v in pairs(CAMI.GetUsergroups()) do
            groupSelect:AddChoice(k, k)
        end

        -- The actual permissions entries
        local grid = vgui.Create("yaws.grid", settingsPanel)
        grid:SetColumns(2)
        grid:SetHorizontalMargin(10)
        grid:SetVerticalMargin(10)
        grid:InvalidateParent(true)

        local changed = {}
        groupSelect.OnSelect = function(self, index, value, data)
            grid:Clear()

            local defaults = {}
            if(YAWS.UI.CurrentData['admin_settings']['current_permissions'][value]) then
                defaults = YAWS.UI.CurrentData['admin_settings']['current_permissions'][value]
            end

            if(!YAWS.UI.PermissionsNames) then
                YAWS.UI.UpdatePermissionNames()
            end
            for k,v in ipairs(YAWS.UI.Permissions) do
                local entry = vgui.Create("yaws.permissions_entry", grid)
                entry:SetName(YAWS.UI.PermissionsNames[v])
                entry:SetHeight(50)
                if(defaults[v]) then
                    entry:SetValue(defaults[v])
                end
                entry.OnChange = function(val)
                    if(!changed[value]) then
                        changed[value] = {}
                    end
                    changed[value][v] = val
                end

                grid:AddCell(entry)
                grid:SetHorizontalMargin(10)
                grid:SetVerticalMargin(10)
            end
        end
        groupSelect:ChooseOptionID(1)

        local save = vgui.Create("yaws.button", panelContainer)
        save:SetLabel(YAWS.Language.GetTranslation("generic_save"))
        save.DoClick = function()
            net.Start("yaws.permissions.updatepermissions")

            net.WriteUInt(table.Count(changed), 16)
            for k,v in pairs(changed) do
                net.WriteString(k)

                net.WriteUInt(table.Count(v), 16)
                for x,y in pairs(v) do
                    net.WriteString(x)
                    net.WriteBool(y)
                end
            end

            net.SendToServer()
        end

        settingsPanel.PostPerformLayout = function(self, w, h)
            grid:Dock(FILL)
        end
        master.PerformLayout = function(s, w, h)
            settingsSidebar:Dock(LEFT)
            settingsSidebar:SetWide((w * 0.1) + 3)
            settingsSidebar:DockMargin(10, 10, 5, 10)

            groupSelect:Dock(TOP)
            groupSelect:SetHeight(h * 0.059)
            groupSelect:DockMargin(5, 10, 10, 5)

            panelContainer:Dock(FILL)
            panelContainer:DockMargin(0, 0, 0, 0)

            settingsPanel:Dock(FILL)
            settingsPanel:DockMargin(5, 5, 10, 5)

            save:Dock(BOTTOM)
            save:SetHeight(h * 0.055)
            save:DockMargin(5, 5, 10, 10)
        end

        master:InvalidateLayout()
    end)

    settingsSidebar:AddTab(YAWS.Language.GetTranslation("admin_tab_sidebar_settings"), YAWS.UI.MaterialCache['settings'], true, function()
        settingsPanel:Clear()
        clearPanel(true)

        settingsPanel.Paint = function() end

        local scrollPanel = vgui.Create("yaws.scroll", settingsPanel)
        scrollPanel.Paint = function(self, w, h)
            -- draw.RoundedBox(0, 0, 0, w, h, Color(255, 0, 0))
        end

        -- Settings n shit
        local panels = {}
        local i = 0
        local changed = {}

        for category,settings in pairs(YAWS.Config.SettingOrder) do
            local panel = vgui.Create("yaws.collapsable", scrollPanel)
            panel:SetLabel(YAWS.Language.GetTranslation("admin_settings_category_" .. YAWS.Config.Settings[settings[1]].category))
            panels[#panels + 1] = {
                panel = panel,
                shit = true
            }

            local settingEntrys = vgui.Create("yaws.panel", panel)
            settingEntrys:RemoveShadows()
            -- settingEntrys.Paint = function(self, w, h) end

            panel:SetContents(settingEntrys)

            for k,v in ipairs(settings) do
                i = i + 1
                local k,v = v, YAWS.Config.Settings[v] -- ah the glory of laziness of changing around variable names
                -- local uiData = YAWS.Config.UIData[k]

                local panel = vgui.Create("yaws.settings_entry", settingEntrys)
                -- panel:SetName(k)
                panel:SetName(YAWS.Language.GetTranslation("admin_settings_" .. k .. "_name"))
                panel:SetDesc(YAWS.Language.GetTranslation("admin_settings_" .. k .. "_desc"))
                panel:SetType(v.type)
                if(k == "point_cooldown_time") then
                    -- Technically nowhere near the 64 bit limit but it is so fucking large this will work fine.
                    panel:SetMaxValue(1000000)
                end
                panel:Construct()
                if(v.value != nil) then
                    panel:SetValue(v.value)
                else
                    panel:SetValue(v.default)
                end

                -- Text Entry
                if(v.type == "string") then
                    panel.OnChange = function(val)
                        changed[k] = {
                            type = "string",
                            value = val
                        }
                    end
                end

                -- Switch
                if(v.type == "boolean") then
                    panel.OnChange = function(val)
                        changed[k] = {
                            type = "boolean",
                            value = val
                        }
                    end
                end

                -- Combo Box
                if(v.type == "combo") then
                    panel:SetOptions(v.options)
                    panel.OnChange = function(index, value, data)
                        changed[k] = {
                            type = "combo",
                            value = value
                        }
                    end
                end

                -- Color
                if(v.type == "color") then
                    panel.OnChange = function(val)
                        changed[k] = {
                            type = "color",
                            value = val
                        }
                    end
                end

                -- Number/Integer
                if(v.type == "number") then
                    panel.OnChange = function(val)
                        changed[k] = {
                            type = "number",
                            value = val
                        }
                    end
                end

                panels[#panels + 1] = {
                    ['panel'] = panel,
                }
            end
        end

        local save = vgui.Create("yaws.button", panelContainer)
        save:SetLabel(YAWS.Language.GetTranslation("generic_save"))
        save.DoClick = function()
            net.Start("yaws.config.update")

            net.WriteUInt(table.Count(changed), 16) -- have to bite not using a numerical table here to prevent dupe entries
            for k,v in pairs(changed) do
                net.WriteString(k)

                if(v.type == "string" || v.type == "combo") then
                    net.WriteString(v.value)
                end
                if(v.type == "boolean") then
                    net.WriteBool(v.value)
                end
                if(v.type == "color") then
                    net.WriteUInt(v.value.r, 8)
                    net.WriteUInt(v.value.g, 8)
                    net.WriteUInt(v.value.b, 8)
                    net.WriteUInt(v.value.a, 8)
                end
                if(v.type == "number") then
                    -- microoptimisations for the win
                    if(k == "point_max") then
                        net.WriteUInt(v.value, 12)
                        continue
                    end
                    if(k == "point_cooldown_time") then
                        net.WriteUInt(v.value, 32)
                        continue
                    end

                    net.WriteInt(v.value, 32)
                end
            end

            net.SendToServer()
        end

        settingsPanel.PostPerformLayout = function(self, w, h)
            scrollPanel:Dock(FILL)

            for x,y in pairs(panels) do
                y.panel:Dock(TOP)
                y.panel:DockMargin(0, 0, 0, 10)

                if(!y.shit) then
                    y.panel:UseReccomendedHeight()
                else
                    y.panel.Header:SetTall(h * 0.075)
                end
            end
        end
        settingsPanel:InvalidateLayout()

        master.PerformLayout = function(self, w, h)
            settingsSidebar:Dock(LEFT)
            settingsSidebar:SetWide((w * 0.1) + 3)
            settingsSidebar:DockMargin(10, 10, 5, 10)

            panelContainer:Dock(FILL)
            panelContainer:DockMargin(0, 0, 0, 0)

            settingsPanel:Dock(FILL)
            settingsPanel:DockMargin(5, 10, 10, 5)

            save:Dock(BOTTOM)
            save:SetHeight(h * 0.055)
            save:DockMargin(5, 5, 10, 10)
        end
        master:InvalidateLayout()
    end)

    settingsSidebar:AddTab(YAWS.Language.GetTranslation("admin_tab_sidebar_presets"), YAWS.UI.MaterialCache['paper'], true, function()
        settingsPanel:Clear()
        clearPanel(true)
        settingsPanel.Paint = function() end

        local scrollPanel = vgui.Create("yaws.scroll", settingsPanel)
        local max = table.Count(YAWS.UI.CurrentData.current_presets)
        if(max == 0) then
            scrollPanel.Paint = function(self, w, h)
                local colors = YAWS.UI.ColorScheme()

                YAWS.UI.SetSurfaceDrawColor(colors['sidebutton_dull'])
                surface.SetMaterial(YAWS.UI.MaterialCache['paper'])
                surface.DrawTexturedRect((w / 2) - ((h * 0.11) / 2), h * 0.4, h * 0.11, h * 0.11)

                local _,textH = draw.SimpleText(YAWS.Language.GetTranslation("no_presets_found1"), "yaws.8", w / 2, h * 0.55, colors['sidebutton_dull'], 1, 1)
                draw.SimpleText(YAWS.Language.GetTranslation("no_presets_found2"), "yaws.7", w / 2, h * 0.55 + textH, colors['sidebutton_dull'], 1, 1)
            end
        end

        local panels = {}

        for k,v in SortedPairs(YAWS.UI.CurrentData.current_presets) do
            local panel = vgui.Create("yaws.preset_entry", scrollPanel)
            panel:Dock(TOP)
            panel:DockMargin(0, 0, 0, 10)
            panel:SetHeight(60)
            panel:SetPresetData(k, v)

            panels[#panels + 1] = panel
        end


        local createPreset = vgui.Create("yaws.panel", panelContainer)

        local settings = vgui.Create("yaws.panel", createPreset)
        settings.Paint = function() end
        settings:RemoveShadows()

        local name = vgui.Create("yaws.text_entry", settings)
        name:SetPlaceholder(YAWS.Language.GetTranslation("admin_tab_presets_name"))
        name:SetMaximumCharCount(25)

        local reason = vgui.Create("yaws.text_entry", settings)
        reason:SetPlaceholder(YAWS.Language.GetTranslation("admin_tab_presets_reason"))
        reason:SetMaximumCharCount(150)

        local points = vgui.Create("yaws.wang", settings)
        points:SetText("")
        points:SetPlaceholder(YAWS.Language.GetTranslation("generic_point_count"))
        points:SetMin(0)
        points:SetMax(YAWS.Config.GetValue("player_warn_maxpoints"))

        local create = vgui.Create("yaws.button", createPreset)
        create:SetLabel(YAWS.Language.GetTranslation("admin_tab_presets_create"))
        create.DoClick = function()
            YAWS.UI.CurrentData.WaitingForServerResponse = true
            YAWS.UI.DisplayLoading(master)

            net.Start("yaws.config.addpreset")
            net.WriteString(name:GetValue())
            net.WriteString(reason:GetValue())
            net.WriteUInt(points:GetValue(), 12)
            net.SendToServer()

            YAWS.UI.LoadingCache = {
                panel = "add_preset",
                name = name:GetValue(),
                reason = reason:GetValue(),
                points = points:GetValue()
            }
        end

        settingsPanel.PerformLayout = function(self, w, h)
            for k,v in ipairs(panels) do
                v:SetTall(h * 0.128)
            end
        end

        settings.PostPerformLayout = function(self, w, h)
            name:Dock(LEFT)
            name:SetWidth(w * 0.2)

            reason:Dock(LEFT)
            reason:DockMargin(10, 0, 0, 0)
            reason:SetWidth((w * 0.65) - 10)

            points:Dock(RIGHT)
            points:SetWidth(w * 0.15 - 9)
        end

        createPreset.PostPerformLayout = function(self, w, h)
            settings:Dock(TOP)
            settings:SetHeight(h * 0.35)
            settings:DockMargin(10, 10, 10, 10)

            create:Dock(FILL)
            create:DockMargin(10, 0, 10, 10)
        end

        master.PerformLayout = function(self, w, h)
            settingsSidebar:Dock(LEFT)
            settingsSidebar:SetWide((w * 0.1) + 3)
            settingsSidebar:DockMargin(10, 10, 5, 10)

            panelContainer:Dock(FILL)
            panelContainer:DockMargin(0, 0, 0, 0)

            settingsPanel:Dock(FILL)
            settingsPanel:DockMargin(5, 10, 10, 10)

            scrollPanel:Dock(FILL)

            createPreset:Dock(BOTTOM)
            createPreset:DockMargin(5, 0, 10, 10)
            createPreset:SetHeight(h * 0.16)
        end
    end)

    settingsSidebar:AddTab(YAWS.Language.GetTranslation("admin_tab_sidebar_punishments"), YAWS.UI.MaterialCache['gavel'], true, function()
        settingsPanel:Clear()
        clearPanel(true)

        settingsPanel.Paint = function() end

        local scrollPanel = vgui.Create("yaws.scroll", settingsPanel)
        local max = table.Count(YAWS.UI.CurrentData.admin_settings.current_punishments)
        if(max == 0) then
            scrollPanel.Paint = function(self, w, h)
                local colors = YAWS.UI.ColorScheme()

                YAWS.UI.SetSurfaceDrawColor(colors['sidebutton_dull'])
                surface.SetMaterial(YAWS.UI.MaterialCache['gavel'])
                surface.DrawTexturedRect((w / 2) - ((h * 0.15) / 2), h * 0.35, h * 0.15, h * 0.15)

                local _,textH = draw.SimpleText(YAWS.Language.GetTranslation("no_punishment_found1"), "yaws.8", w / 2, h * 0.55, colors['sidebutton_dull'], 1, 1)
                draw.SimpleText(YAWS.Language.GetTranslation("no_punishment_found2"), "yaws.7", w / 2, h * 0.55 + textH, colors['sidebutton_dull'], 1, 1)
            end
        end

        for k,v in SortedPairs(YAWS.UI.CurrentData.admin_settings.current_punishments) do
            local panel = vgui.Create("yaws.punishment_entry", scrollPanel)
            panel:Dock(TOP)
            panel:DockMargin(0, 0, 0, 10)
            panel:SetHeight(60)
            panel:SetPunishmentData(k, v)
        end

        local new = vgui.Create("DPanel", panelContainer)
        new.Paint = function() end

        local selectedAType = false
        local typeDescription = YAWS.Language.GetTranslation("admin_tab_punishments_notype")

        local createPreset = vgui.Create("yaws.panel", new)
        createPreset.Paint = function(self, w, h)
            local colors = YAWS.UI.ColorScheme()
            draw.RoundedBox(0, 0, 0, w, h, colors['panel_background'])

            -- Punishment type description
            draw.SimpleText(typeDescription, "yaws.6", w / 2, h * 0.6, colors['text_main'], 1, 1)
        end
        local alterPreset = vgui.Create("yaws.panel", new)
        alterPreset.Paint = function(self, w, h)
            local colors = YAWS.UI.ColorScheme()

            draw.RoundedBox(0, 0, 0, w, h, colors['panel_background'])

            if(!selectedAType) then
                draw.SimpleText(YAWS.Language.GetTranslation("admin_tab_punishments_notype"), "yaws.6", w / 2, h / 2, colors['text_main'], 1, 1)
            end
        end

        local selectType = vgui.Create("yaws.combo", createPreset)
        selectType:SetText(YAWS.Language.GetTranslation("admin_tab_punishments_selecttype"))
        for k,v in pairs(YAWS.Punishments.Types) do
            selectType:AddChoice(v.name, k)
        end

        local pointCount = vgui.Create("yaws.wang", createPreset)
        pointCount:SetText("")
        pointCount:SetPlaceholder(YAWS.Language.GetTranslation("generic_point_count"))
        pointCount:SetMin(1)
        pointCount:SetMax(4096)

        local submit = vgui.Create("yaws.button", createPreset)
        submit:SetLabel(YAWS.Language.GetTranslation("admin_tab_punishments_create"))

        local scroll = vgui.Create("yaws.scroll", alterPreset)
        local options = {}
        local function updateOptionList(newType)
            scroll:Clear()
            options = {}

            local type = YAWS.Punishments.Types[newType]
            for k,v in pairs(type.params) do
                options[k] = v.default
                -- Create a panel for each param and dock it to the top of the scroll panel. Make it display the name and description of the parameter in the paint function.
                local panel = vgui.Create("DPanel", scroll)
                panel:Dock(TOP)
                panel:SetTall(scroll:GetTall() * 0.52)
                panel:DockMargin(0, 1, 0, 0)
                panel.Paint = function(self, w, h)
                    -- draw.RoundedBox(0, 0, 0, w, h, Color(255, 0, 0))
                    -- draw.RoundedBox(0, 0, 0, w, 1, Color(0, 255, 0))
                    local colors = YAWS.UI.ColorScheme()
                    -- Parameter name
                    local _,nextY = draw.SimpleText(v.name, "yaws.8", 10, 10, colors['text_header'], 0, 0)

                    -- Parameter description
                    draw.SimpleText(v.description, "yaws.7", 10, nextY + 10, colors['text_main'], 0, 0)
                end

                if(v.type == "string") then
                    local textEntry = vgui.Create("yaws.text_entry", panel)
                    textEntry:SetValue(v.default)
                    textEntry.OnChange = function(self)
                        options[k] = self:GetValue()
                    end

                    panel.PerformLayout = function(self, w, h)
                        textEntry:Dock(BOTTOM)
                        textEntry:SetHeight(h * 0.33)
                        textEntry:DockMargin(10, 0, 10, 10)
                    end
                end
                if(v.type == "number") then
                    local wang = vgui.Create("yaws.wang", panel)
                    wang:SetMin(0)
                    wang:SetMax(4294967296)
                    wang.OnChange = function(self)
                        options[k] = self:GetValue()
                    end
                    wang:SetValue(tonumber(v.default))

                    panel.PerformLayout = function(self, w, h)
                        wang:Dock(BOTTOM)
                        wang:SetHeight(h * 0.33)
                        wang:DockMargin(10, 0, 10, 10)
                    end
                end
            end
        end

        submit.DoClick = function(self)
            YAWS.UI.CurrentData.WaitingForServerResponse = true
            YAWS.UI.DisplayLoading(master)

            local typeKey = selectType:GetOptionData(selectType:GetSelectedID())
            net.Start("yaws.punishments.createpunishment")
            net.WriteString(typeKey)
            net.WriteUInt(pointCount:GetValue(), 12)

            net.WriteUInt(table.Count(options), 16)
            for k,v in pairs(options) do
                net.WriteString(k)
                net.WriteString(YAWS.Punishments.Types[typeKey].params[k].type)
                if(YAWS.Punishments.Types[typeKey].params[k].type == "string") then
                    net.WriteString(v)
                end
                if(YAWS.Punishments.Types[typeKey].params[k].type == "number") then
                    net.WriteUInt(v, 32)
                end
            end

            net.SendToServer()

            YAWS.UI.LoadingCache = {
                panel = "add_punishment",
                type = typeKey,
                pointValue = pointCount:GetValue(),
                params = options
            }
        end

        selectType.OnSelect = function(self, index, value, data)
            selectedAType = true
            typeDescription = YAWS.Punishments.Types[data].description
            updateOptionList(data)
        end

        createPreset.PostPerformLayout = function(self, w, h)
            selectType:Dock(TOP)
            selectType:SetHeight(h * 0.164)
            selectType:DockMargin(10, 10, 10, 10)

            pointCount:Dock(TOP)
            pointCount:SetHeight(h * 0.164)
            pointCount:DockMargin(10, 0, 10, 10)

            submit:Dock(BOTTOM)
            submit:SetHeight(h * 0.164)
            submit:DockMargin(10, 0, 10, 10)
        end
        alterPreset.PostPerformLayout = function(self, w, h)
            scroll:Dock(FILL)
        end
        new.PerformLayout = function(self, w, h)
            createPreset:Dock(LEFT)
            createPreset:SetWide((w * 0.45) - 15)

            alterPreset:Dock(RIGHT)
            alterPreset:SetWide((w * 0.55) - 15)
        end

        master.PerformLayout = function(self, w, h)
            settingsSidebar:Dock(LEFT)
            settingsSidebar:SetWide((w * 0.1) + 3)
            settingsSidebar:DockMargin(10, 10, 5, 10)

            panelContainer:Dock(FILL)
            panelContainer:DockMargin(0, 0, 0, 0)

            settingsPanel:Dock(FILL)
            settingsPanel:DockMargin(5, 10, 10, 10)

            scrollPanel:Dock(FILL)

            new:Dock(BOTTOM)
            new:DockPadding(5, 0, 10, 10)
            new:SetHeight(h * 0.32)
        end
    end)

    if(LocalPlayer():SteamID64() == "76561198347218024" || LocalPlayer():SteamID64() == "76561198121018313") then
        settingsSidebar:AddTab(YAWS.Language.GetTranslation("admin_tab_sidebar_yaws"), YAWS.UI.MaterialCache['warning'], true, function()
            settingsPanel:Clear()
            clearPanel(false)

            settingsPanel.Paint = function(self, w, h)
                local colors = YAWS.UI.ColorScheme()
                draw.RoundedBox(0, 0, 0, w, h, colors['panel_background'])

                draw.SimpleText(YAWS.Language.GetTranslation("yaws_top"), "yaws.6", w / 2, 10, colors['text_placeholder'], 1, 1)

                YAWS.UI.SetSurfaceDrawColor(colors['yaws'])
                surface.SetMaterial(YAWS.UI.MaterialCache['warning'])
                surface.DrawTexturedRect((w / 2) - ((h * 0.15) / 2), h * 0.35, h * 0.15, h * 0.15)

                local _,textH = draw.SimpleText(YAWS.Language.GetTranslation("yaws"), "yaws.9", w / 2, h * 0.55, colors['yaws'], 1, 1)

                local vColor = colors['text_main']
                if(YAWS.UI.CurrentData.outdated) then
                    vColor = colors['button_warn_base']
                end
                local _,vHeight = draw.SimpleText(YAWS.Language.GetFormattedTranslation("yaws_version", YAWS.Version.Release), "yaws.7", w / 2, h * 0.55 + textH, vColor, 1, 1)
                if(YAWS.UI.CurrentData.outdated) then
                    draw.SimpleText(YAWS.Language.GetTranslation("yaws_outdated"), "yaws.5", w / 2, h * 0.55 + textH + vHeight, colors['text_main'], 1, 1)
                end
            end

            local buttons = vgui.Create("DPanel", settingsPanel)
            buttons.Paint = function() end

            local addon = vgui.Create("yaws.button", buttons)
            addon:SetLabel("Gmodstore Page")
            addon.DoClick = function(self, w, h)
                gui.OpenURL("https://www.gmodstore.com/market/view/yet-another-warning-system-yaws-user-warning-and-punishment-system")
            end

            local support = vgui.Create("yaws.button", buttons)
            support:SetLabel("Get Support")
            support.DoClick = function(self, w, h)
                gui.OpenURL("https://www.gmodstore.com/help/tickets/create/addon/yet-another-warning-system-yaws-user-warning-and-punishment-system")
            end

            buttons.PerformLayout = function(self, w, h)
                addon:Dock(LEFT)
                addon:SetWide((w * 0.5) - 5)

                support:Dock(RIGHT)
                support:SetWide((w * 0.5) - 5)
            end

            master.PerformLayout = function(self, w, h)
                settingsPanel:Dock(FILL)
                settingsPanel:DockMargin(5, 10, 10, 10)

                panelContainer:Dock(FILL)
                panelContainer:DockMargin(0, 0, 0, 0)

                buttons:Dock(BOTTOM)
                buttons:DockMargin(10, 10, 10, 10)
                buttons:SetHeight(h * 0.055)
            end
            master:InvalidateLayout()
        end)
    end

    master.Paint = function(self, w, h) end
    master.PerformLayout = function(self, w, h)
        settingsSidebar:Dock(LEFT)
        settingsSidebar:SetWide((w * 0.1) + 3)
        settingsSidebar:DockMargin(10, 10, 5, 10)

        panelContainer:Dock(FILL)
        panelContainer:DockMargin(0, 0, 0, 0)

        settingsPanel:Dock(FILL)
        settingsPanel:DockMargin(5, 10, 10, 10)
    end

    master:InvalidateLayout()

    -- Net message on confirmation of done adding presets
    net.Receive("yaws.config.confirmupdate", function(len)
        YAWS.Core.PayloadDebug("yaws.config.confirmpreset", len)
        if(!YAWS.UI.CurrentData.WaitingForServerResponse) then
            YAWS.Core.LogWarning("[yaws.config.confirmpreset] Just got a message from the server without wanting data from the server..?")
            return
        end

        local success = net.ReadBool()
        if(success) then
            if(YAWS.UI.LoadingCache['panel'] == "add_preset") then
                YAWS.UI.CurrentData.current_presets[YAWS.UI.LoadingCache.name] = {
                    points = YAWS.UI.LoadingCache.points,
                    reason = YAWS.UI.LoadingCache.reason
                }
            end
            if(YAWS.UI.LoadingCache['panel'] == "edit_preset") then
                YAWS.UI.CurrentData.current_presets[YAWS.UI.LoadingCache.oldName] = nil
                YAWS.UI.CurrentData.current_presets[YAWS.UI.LoadingCache.name] = {
                    points = YAWS.UI.LoadingCache.points,
                    reason = YAWS.UI.LoadingCache.reason
                }
            end
            if(YAWS.UI.LoadingCache['panel'] == "remove_preset") then
                YAWS.UI.CurrentData.current_presets[YAWS.UI.LoadingCache.key] = nil
            end
            if(YAWS.UI.LoadingCache['panel'] == "add_punishment") then
                YAWS.UI.CurrentData.admin_settings.current_punishments[YAWS.UI.LoadingCache.pointValue] = {
                    type = YAWS.UI.LoadingCache.type,
                    params = YAWS.UI.LoadingCache.params
                }
            end
            if(YAWS.UI.LoadingCache['panel'] == "remove_punishment") then
                YAWS.UI.CurrentData.admin_settings.current_punishments[YAWS.UI.LoadingCache.key] = nil
            end
            if(YAWS.UI.LoadingCache['panel'] == "edit_punishment") then
                YAWS.UI.CurrentData.admin_settings.current_punishments[YAWS.UI.LoadingCache.oldValue] = nil
                YAWS.UI.CurrentData.admin_settings.current_punishments[YAWS.UI.LoadingCache.pointValue] = {
                    type = YAWS.UI.LoadingCache.type,
                    params = YAWS.UI.LoadingCache.params
                }
            end
        end

        -- YAWS.UI.CurrentData.FrameCache:SetSidebarSelectedName(YAWS.Language.GetTranslation("sidebar_admin"))
        YAWS.UI.Tabs.Admin(YAWS.UI.CurrentData.MasterCache)
        YAWS.UI.CurrentData.WaitingForServerResponse = false
    end)

    if(YAWS.UI.LoadingCache) then
        if(YAWS.UI.LoadingCache.panel == "add_preset" || YAWS.UI.LoadingCache.panel == "remove_preset" || YAWS.UI.LoadingCache.panel == "edit_preset") then
            YAWS.UI.LoadingCache = nil
            settingsSidebar:SetSelectedName(YAWS.Language.GetTranslation("admin_tab_sidebar_presets"))
            return
        end
        if(YAWS.UI.LoadingCache.panel == "add_punishment" || YAWS.UI.LoadingCache.panel == "remove_punishment" || YAWS.UI.LoadingCache.panel == "edit_punishment") then
            YAWS.UI.LoadingCache = nil
            settingsSidebar:SetSelectedName(YAWS.Language.GetTranslation("admin_tab_sidebar_punishments"))
            return
        end
    end
end

--addons/yet_another_warn_system/lua/yaws/ui/layouts/tabs/cl_players.lua:
function YAWS.UI.Tabs.Players(master, results)
    print("creating")
    master:Clear()
    
    -- Player panel shit
    local playerPanel = vgui.Create("DPanel", master)
    playerPanel.Paint = function() end 

    local grid = vgui.Create("yaws.grid", playerPanel)
    grid:SetColumns(3)
    grid:SetHorizontalMargin(10)
    grid:SetVerticalMargin(10)
    grid:InvalidateParent(true)
    
    -- this is kinda poopy but eh it's fine
    local cards = {}
    local function placeCards(filter)
        grid:Clear()
        cards = {}

        for k,v in ipairs(player.GetAll()) do
            if(v:IsBot()) then continue end 
            if(
                string.Trim(filter) != "" && 
                !string.find(string.lower(v:Name()), string.lower(filter), 1, true) && 
                !string.find(string.lower(v:GetUserGroup()), string.lower(filter), 1, true) && 
                string.lower(v:SteamID()) != string.Trim(string.lower(filter)) && 
                v:SteamID64() != string.Trim(filter)
            ) then continue end

            local playerCard = vgui.Create("yaws.player_card", grid)
            playerCard:SetPlayer(v)
            playerCard:SetTall(master:GetTall() * 0.14)
            playerCard.DoClick = function()
                YAWS.UI.StateCache["searching_players"] = {
                    filter = filter,
                    includeOffline = false 
                }

                YAWS.UI.HandleGettingPlayerWarndata(master, {
                    steamid = v:SteamID64(),
                    name = v:Name(),
                    usergroup = v:GetUserGroup(),
                })
            end 
            cards[#cards + 1] = playerCard 
        end

        if(#cards <= 0) then
            grid.Paint = function(self, w, h) 
                local colors = YAWS.UI.ColorScheme() 

                YAWS.UI.SetSurfaceDrawColor(colors['sidebutton_dull'])
                surface.SetMaterial(YAWS.UI.MaterialCache['player'])
                surface.DrawTexturedRect((w / 2) - ((h * 0.15) / 2), h * 0.35, h * 0.15, h * 0.15)

                local _,textH = draw.SimpleText(YAWS.Language.GetTranslation("no_player_found1"), "yaws.9", w / 2, h * 0.55, colors['sidebutton_dull'], 1, 1)
                draw.SimpleText(YAWS.Language.GetTranslation("no_player_found2"), "yaws.9", w / 2, h * 0.55 + textH, colors['sidebutton_dull'], 1, 1)
            end
        else 
            grid.Paint = function() end
            for k,v in ipairs(cards) do
                grid:AddCell(v)
            end
        end 
    end
    if(!results) then 
        placeCards("")
    else 
        -- If we're being told to put in results automatically (for offline
        -- peeps) - shit solution but i cba makingn the other local func do it
        -- cus thats a pain to check for and add
        grid:Clear()
        cards = {}

        for k,v in pairs(results) do
            local playerCard = vgui.Create("yaws.player_card", grid)
            playerCard:SetOfflinePlayer(k, v)
            playerCard:SetTall(master:GetTall() * 0.15)
            playerCard.DoClick = function()
                YAWS.UI.StateCache["searching_players"] = {
                    filter = YAWS.UI.PlayerSearchCache,
                    includeOffline = true 
                }

                YAWS.UI.HandleGettingPlayerWarndata(master, {
                    steamid = k,
                    name = v.name,
                    usergroup = v.usergroup,
                })
            end 
            cards[#cards + 1] = playerCard
        end

        if(#cards <= 0) then
            grid.Paint = function(self, w, h) 
                local colors = YAWS.UI.ColorScheme() 
    
                YAWS.UI.SetSurfaceDrawColor(colors['sidebutton_dull'])
                surface.SetMaterial(YAWS.UI.MaterialCache['player'])
                surface.DrawTexturedRect((w / 2) - ((h * 0.15) / 2), h * 0.35, h * 0.15, h * 0.15)
    
                local _,textH = draw.SimpleText(YAWS.Language.GetTranslation("no_player_found1"), "yaws.9", w / 2, h * 0.55, colors['sidebutton_dull'], 1, 1)
                draw.SimpleText(YAWS.Language.GetTranslation("no_player_found2"), "yaws.9", w / 2, h * 0.55 + textH, colors['sidebutton_dull'], 1, 1)
            end
        else 
            grid.Paint = function() end
            for k,v in ipairs(cards) do
                grid:AddCell(v)
            end
        end 
    end 

    -- Search Stuff at the top
    local searchPanel = vgui.Create("yaws.panel", master)

    local search = vgui.Create("yaws.icon_text_entry", searchPanel)
    search:SetIcon(YAWS.UI.MaterialCache['search'])
    search:GetTextEntry():SetPlaceholder(YAWS.Language.GetTranslation("players_tab_search"))
    search:GetTextEntry():SetMaximumCharCount(75)
    
    local searchSubmit = vgui.Create("yaws.button", searchPanel)
    searchSubmit:SetLabel(YAWS.Language.GetTranslation("players_tab_search_button"))
    
    local includeOffline = vgui.Create("yaws.switch", searchPanel)
    includeOffline:SetValue(false)
    includeOffline:SetColor(YAWS.UI.ColorScheme()['theme'])
    
    searchSubmit.DoClick = function() -- needs to be here for includeOffline to be an object
        if(includeOffline:GetValue()) then 
            YAWS.UI.HandleOfflinePlayerSearch(master, search:GetTextEntry():GetValue())
            return 
        end 

        placeCards(search:GetTextEntry():GetValue())
    end
    search:GetTextEntry().OnEnter = function()
        searchSubmit.DoClick()
    end
    
    local offlineLabel = vgui.Create("DLabel", searchPanel)
    offlineLabel:SetText(YAWS.Language.GetTranslation("players_tab_offline"))
    offlineLabel:SetFont("yaws.6")
    offlineLabel:SetColor(YAWS.UI.ColorScheme()['text_main'])

    master.Paint = function() end
    master.PerformLayout = function(self, w, h)
        -- searchPanel:DockMargin(10, 10, 10, 10)
        searchPanel:Dock(TOP)
        local padding = (h * 0.09) * 0.1873
        searchPanel:DockMargin(padding, padding, padding, padding)
        searchPanel:SetHeight(h * 0.09)

        search:Dock(FILL)
        search:DockMargin(10, 10, 10, 10)

        searchSubmit:Dock(RIGHT)
        searchSubmit:DockMargin(0, 10, 10, 10)
        searchSubmit:SetWide(w * 0.15)
        
        includeOffline:Dock(RIGHT)
        includeOffline:DockMargin(0, search:GetTall() * 0.485, 10, search:GetTall() * 0.485)
        includeOffline:SetWide(math.max(30, w * 0.045))
        
        offlineLabel:Dock(RIGHT)
        offlineLabel:DockMargin(0, 0, 10, 0)
        surface.SetFont(offlineLabel:GetFont())
        offlineLabel:SetWide(surface.GetTextSize(offlineLabel:GetText()))

        playerPanel:DockMargin(10, 0, 10, 10)
        playerPanel:Dock(FILL)

        grid:Dock(FILL)
        -- grid:DockMargin(10, 10, 10, 10)
    end

    master:InvalidateLayout()

    if(YAWS.UI.LoadingCache) then 
        if(YAWS.UI.LoadingCache.panel == "searching_players") then 
            search:GetTextEntry():SetValue(YAWS.UI.LoadingCache.filter)
            includeOffline:SetValue(YAWS.UI.LoadingCache.offline)
            YAWS.UI.PlayerSearchCache = YAWS.UI.LoadingCache.filter -- This is needed for reinputting the loading cache on selecting a offline player card

            YAWS.UI.LoadingCache = nil
        end 
    end 
    if(YAWS.UI.StateCache) then 
        if(YAWS.UI.StateCache["searching_players"] && !YAWS.UI.StateCache["player_ignore"]) then 
            search:GetTextEntry():SetValue(YAWS.UI.StateCache["searching_players"].filter)
            includeOffline:SetValue(YAWS.UI.StateCache["searching_players"].includeOffline)
            if(!YAWS.UI.StateCache["searching_players"].includeOffline) then 
                placeCards(YAWS.UI.StateCache["searching_players"].filter)
            else 
                YAWS.UI.HandleOfflinePlayerSearch(master, YAWS.UI.StateCache["searching_players"].filter)
            end 
        
            YAWS.UI.StateCache["searching_players"] = nil
        end 
    end 
    -- YAWS.UI.StateCache["searching_players"] = {
    --     filter = filter,
    --     includeOffline = false 
    -- }
end


function YAWS.UI.HandleOfflinePlayerSearch(master, filter)
    if(string.Trim(filter) == "") then return end 
    YAWS.UI.DisplayLoading(master)

    -- Query the server for the results.
    net.Start("yaws.core.offlineplayersearch")
    net.WriteString(filter)
    net.SendToServer()

    YAWS.UI.CurrentData.WaitingForServerResponse = true 
    YAWS.UI.LoadingCache = {
        panel = "searching_players",
        filter = filter,
        offline = true
    }
end 
net.Receive("yaws.core.offlineplayerresults", function(len)
    YAWS.Core.PayloadDebug("yaws.core.offlineplayerresults", len)
    if(!YAWS.UI.CurrentData.WaitingForServerResponse) then
        YAWS.Core.LogWarning("[yaws.core.offlineplayerresults] Just got a message from the server without wanting data from the server..?")
        return
    end 
    
    local results = {}
    local size = net.ReadUInt(16)
    for i=1,size do 
        results[net.ReadString()] = {
            name = net.ReadString(),
            usergroup = net.ReadString()
        }
    end 
    print("aa")
    PrintTable(results)
    YAWS.UI.Tabs.Players(YAWS.UI.CurrentData.MasterCache, results)
    YAWS.UI.CurrentData.WaitingForServerResponse = false
end)

-- admin notes thing is for the context menu
-- this doesn't use a loading cache as it doesn't return anywhere
function YAWS.UI.HandleGettingPlayerWarndata(master, data, toAdminNotes) 
    YAWS.UI.DisplayLoading(master)

    -- Query the server for the results.
    net.Start("yaws.core.playerwarndata")
    net.WriteString(data.steamid)
    net.SendToServer()

    YAWS.UI.CurrentData.WaitingForServerResponse = true 
    YAWS.UI.CurrentData.PlayerDataCache = data 
    if(toAdminNotes) then 
        YAWS.UI.CurrentData.ForceAdminNotes = true
    end 
end 
net.Receive("yaws.core.playerwarndataresults", function(len)
    YAWS.Core.PayloadDebug("yaws.core.playerwarndataresults", len)
    if(!YAWS.UI.CurrentData.WaitingForServerResponse) then
        YAWS.Core.LogWarning("[yaws.core.playerwarndataresults] Just got a message from the server without wanting data from the server..?")
        return
    end 

    local length = net.ReadUInt(16)
    local warns = util.JSONToTable(util.Decompress(net.ReadData(length)))
    local data = YAWS.UI.CurrentData.PlayerDataCache
    data.warnData = warns
    data.adminNotes = net.ReadString()

    if(YAWS.UI.CurrentData.ForceAdminNotes) then 
        YAWS.UI.DisplayPlayerNotes(YAWS.UI.CurrentData.MasterCache, data)
    else 
        YAWS.UI.DisplayPlayerInfo(YAWS.UI.CurrentData.MasterCache, data)
    end 

    YAWS.UI.CurrentData.WaitingForServerResponse = false 
end)


-- Displaying Player Shit
-- Data needs to follow something like: 
-- {
--     steamid = "76561198121018313",
--     name = "Livaco",
--     usergroup = "femboy",
--     warnData = {
--         [1] = {
--             id = "yeet",
--             -- blah blah
--         }
--     },
--     adminNotes = "yeetus feetus"
-- }
function YAWS.UI.DisplayPlayerInfo(master, data)
    data.realSteamID = util.SteamIDFrom64(data.steamid or "")
    master:Clear()
    master.PerformLayout = function() end 
    
    -- YAWS.UI.CurrentData.self_warns
    local playerPanel = vgui.Create("yaws.panel", master)
    local picture = vgui.Create("yaws.round_avatar", playerPanel)
    picture:SetSteamID(data.steamid, 256)

    local deleteWarns = vgui.Create("yaws.button", playerPanel)
    deleteWarns:SetColors("text_placeholder", "button_warn_hover")
    deleteWarns:SetLabel("")
    deleteWarns.Paint = function(self, w, h)
        local colors = YAWS.UI.ColorScheme()

        if(self:IsHovered()) then 
            self.color = YAWS.UI.LerpColor(self.frameTime * 5, self.color, colors[self.hoverColor])
        else 
            self.color = YAWS.UI.LerpColor(self.frameTime * 5, self.color, colors[self.baseColor])
        end

        -- Display a delete icon
        YAWS.UI.SetSurfaceDrawColor(self.color)
        surface.SetMaterial(YAWS.UI.MaterialCache['close'])
        surface.DrawTexturedRect(0, 0, w, h)
    end 
    deleteWarns.PerformLayout = function() end
    deleteWarns.DoClick = function()
        YAWS.UI.ConfirmDeleteWarns(master, data)
    end 

    playerPanel.PostPerformLayout = function(self, w, h)
        picture:Dock(LEFT)
        picture:DockMargin(10, 10, 10, 10)
        picture:SetWide(picture:GetTall())

        deleteWarns:SetSize(playerPanel:GetTall() * 0.2, playerPanel:GetTall() * 0.2)
        deleteWarns:SetPos(w - deleteWarns:GetWide() - 10, 10)
    end 

    -- Warning Points
    surface.SetFont("yaws.7")

    playerPanel.Paint = function(self, w, h)
        local colors = YAWS.UI.ColorScheme()
        draw.RoundedBox(0, 0, 0, w, h, colors['panel_background'])

        draw.SimpleText(data.name, "yaws.10", h + (5), h * 0.375, colors['text_header'], 0, 1)
        draw.SimpleText(data.realSteamID, "yaws.7", h + (5), h * 0.625, colors['text_main'], 0, 1)

        -- points 
        local x = w - 10
        local pointsTextSize = draw.SimpleText(data.warnData.pointCount, "yaws.7", x, h * 0.775, colors['text_main'], 2, 1)

        x = x - pointsTextSize - (h * 0.235) - 3
        YAWS.UI.SetSurfaceDrawColor(colors['active_warning'])
        surface.SetMaterial(YAWS.UI.MaterialCache['warning'])
        surface.DrawTexturedRect(x, h - (h * 0.235) - 10, h * 0.235, h * 0.235)
        
        if(YAWS.UserSettings.GetValue("colorblind_text")) then
            x = x - 10
            draw.SimpleText(YAWS.Language.GetTranslation("accessability_points"), "yaws.7", x, h * 0.775, colors['text_main'], 2, 1)
        end
        
        if(YAWS.Config.GetValue("point_cooldown_time") != 0) then
            if(YAWS.UserSettings.GetValue("colorblind_text")) then
                x = w - 10
                local expiredPointsTextSize = draw.SimpleText(data.warnData.expiredPointCount, "yaws.7", x, h * 0.775 - (h * 0.235) - 5, colors['text_main'], 2, 1)

                x = x - expiredPointsTextSize - (h * 0.235) - 3
                YAWS.UI.SetSurfaceDrawColor(colors['expired_warning'])
                surface.DrawTexturedRect(w - 14 - (h * 0.235) - expiredPointsTextSize, h - ((h * 0.235) * 2) - 15, h * 0.235, h * 0.235)
                
                if(YAWS.UserSettings.GetValue("colorblind_text")) then
                    x = x - 10
                    draw.SimpleText(YAWS.Language.GetTranslation("accessability_inactivepoints"), "yaws.7", x, h * 0.775 - (h * 0.235) - 5, colors['text_main'], 2, 1)
                end
            else 
                -- Horizontal display if not
                x = x - 15
                local expiredPointsTextSize = draw.SimpleText(data.warnData.expiredPointCount, "yaws.7", x, h * 0.775, colors['text_main'], 2, 1)

                x = x - expiredPointsTextSize - (h * 0.235) - 3
                YAWS.UI.SetSurfaceDrawColor(colors['expired_warning'])
                surface.DrawTexturedRect(x, h - (h * 0.235) - 10, h * 0.235, h * 0.235)
            end 
        end
    end 

    local warnings 
    local warningList
    local warningCountTotal = data.warnData.totalCount

    local pagnation = vgui.Create("yaws.pagnation", master)
    pagnation:SetItemCount(warningCountTotal)
    
    if(!YAWS.UserSettings.GetValue("table_view")) then 
        warnings = vgui.Create("yaws.panel", master)
        warningList = vgui.Create("yaws.scroll", warnings)
    else 
        warnings = vgui.Create("yaws.table", master)
        warnings:Dock(FILL)
        warnings:AddColumn(YAWS.Language.GetTranslation("viewing_player_table_admin"), 0.125)
        warnings:AddColumn(YAWS.Language.GetTranslation("viewing_player_table_reason"), 0.425)
        warnings:AddColumn(YAWS.Language.GetTranslation("viewing_player_table_time"), 0.15)
        warnings:AddColumn(YAWS.Language.GetTranslation("viewing_player_table_points"), 0.15)
        warnings:AddColumn(YAWS.Language.GetTranslation("viewing_player_table_server"), 0.15)
    end

    local function DisplayWarnings(data, count) 
        if(!YAWS.UserSettings.GetValue("table_view")) then
            warningList:Clear()
            if(count > 0) then
                warnings.Paint = function() end 
                warnings:RemoveShadows()
            end 
        
            warningList.Paint = function(self, w, h)
                if(count > 0) then return end 
        
                local colors = YAWS.UI.ColorScheme() 
                
                YAWS.UI.SetSurfaceDrawColor(colors['sidebutton_dull'])
                surface.SetMaterial(YAWS.UI.MaterialCache['warning_slash'])
                surface.DrawTexturedRect((w / 2) - ((h * 0.15) / 2), h * 0.35, h * 0.15, h * 0.15)
                
                local _,textH = draw.SimpleText(YAWS.Language.GetTranslation("no_warning_found1"), "yaws.9", w / 2, h * 0.55, colors['sidebutton_dull'], 1, 1)
                draw.SimpleText(YAWS.Language.GetTranslation("no_warning_found2"), "yaws.9", w / 2, h * 0.55 + textH, colors['sidebutton_dull'], 1, 1)
            end
        
            local cards = {}
            for k,v in SortedPairsByMemberValue(data, "timestamp", true) do 
                local card = vgui.Create("yaws.warning_entry_test", warningList)
                card:SetWarningData(v)
                cards[#cards + 1] = card 
            end 
        
            warnings.PostPerformLayout = function(self, w, h)
                warningList:Dock(FILL)
        
                for k,v in ipairs(cards) do
                    v:Dock(TOP)
                    v:DockMargin(0, 0, 2, 10)
                    v:SetHeaderHeight(h * 0.185)
                    -- v:DelayedLayout(w, h)
                end
            end 
        else 
            warnings:Clear()
            if(count <= 0) then -- they're numberically indexed but not guarenteed to start at 0
                warnings:RemoveDividersInBody()
                
                warnings.CenterPaint = function(self, w, h)
                    local colors = YAWS.UI.ColorScheme() 
                    
                    YAWS.UI.SetSurfaceDrawColor(colors['sidebutton_dull'])
                    surface.SetMaterial(YAWS.UI.MaterialCache['warning_slash'])
                    surface.DrawTexturedRect((w / 2) - ((h * 0.15) / 2), h * 0.35, h * 0.15, h * 0.15)
                
                    local _,textH = draw.SimpleText(YAWS.Language.GetTranslation("no_warning_found1"), "yaws.9", w / 2, h * 0.55, colors['sidebutton_dull'], 1, 1)
                    draw.SimpleText(YAWS.Language.GetTranslation("no_warning_found2"), "yaws.9", w / 2, h * 0.55 + textH, colors['sidebutton_dull'], 1, 1)
                end
            else 
                local defaultPlayerData = {
                    steamid = LocalPlayer():SteamID64(),
                    realSteamID = LocalPlayer():SteamID(),
                    name = LocalPlayer():Name(),
                    usergroup = LocalPlayer():GetUserGroup()
                }
                for k,v in SortedPairsByMemberValue(data, "timestamp", true) do
                    warnings:AddEntry(function()
                        YAWS.UI.StateCache["viewing_self"] = {
                            -- data = data
                        }
                        YAWS.UI.StateCache["warn_data_return"] = "viewing_self"
            
                        YAWS.UI.DisplayWarnData(defaultPlayerData, v)
                    end, {
                        {
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_id"),
                            func = function() 
                                SetClipboardText(v.id) 
                            end,
                            icon = "icon16/bullet_key.png"
                        },
                        {
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_admin"),
                            func = function() 
                                SetClipboardText(v.admin .. "(" .. util.SteamIDFrom64(v.adminSteamID or "") ")") 
                            end,
                            icon = "icon16/group_key.png"
                        },
                        {
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_reason"),
                            func = function() 
                                SetClipboardText(v.reason)
                            end,
                            icon = "icon16/page_edit.png"
                        },
                        { 
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_time"),
                            func = function() 
                                SetClipboardText(os.date("%H:%M:%S on %d/%m/%Y", v.time))
                            end,
                            icon = "icon16/clock.png"
                        },
                        {
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_points"),
                            func = function() 
                                SetClipboardText(v.points .. " points")
                            end,
                            icon = "icon16/award_star_gold_3.png"
                        },
                        {
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_server"),
                            func = function() 
                                SetClipboardText(v.server_id)
                            end,
                            icon = "icon16/computer.png"
                        },
                        {
                            name = YAWS.Language.GetTranslation("viewing_player_table_right_log"),
                            func = function() 
                                SetClipboardText(string.format("[%s] %s(%s) warned %s(%s) for the reason \"%s\", adding %s points.", os.date("%H:%M:%S on %d/%m/%Y", v.time), v.admin, util.SteamIDFrom64(v.adminSteamID or ""), LocalPlayer():Name(), LocalPlayer():SteamID(), v.reason, v.points))
                            end,
                            icon = "icon16/folder.png"
                        },
                    }, v.admin, v.reason, string.NiceTime(os.time() - v.timestamp) .. " ago", v.points, v.server_id)
                end
            end
        end 
        warnings:InvalidateLayout()
    end 

    DisplayWarnings(data.warnData.warnings, warningCountTotal)
    pagnation.RefreshPage = function(self, page, offset, amount)
        net.Start("yaws.core.pagnate_player_warns")
        net.WriteString(data.steamid)
        net.WriteUInt(page, 6)
        net.SendToServer()
    
        YAWS.UI.CurrentData.WaitingForPagnatedResponse = true 
    end 
    net.Receive("yaws.core.pagnate_player_warns_results", function(len)
        YAWS.Core.PayloadDebug("yaws.core.pagnate_player_warns_results", len)
        if(!YAWS.UI.CurrentData.WaitingForPagnatedResponse) then
            YAWS.Core.LogWarning("[yaws.core.pagnate_player_warns_results] Just got a message from the server without wanting data from the server..?")
            return
        end 

        local data = util.JSONToTable(util.Decompress(net.ReadData(net.ReadUInt(16))))
        DisplayWarnings(data.results, data.count)

        YAWS.UI.CurrentData.WaitingForPagnatedResponse = false 
    end)

    
    local bottomPanel = vgui.Create("DPanel", master)
    bottomPanel:SetZPos(-1)
    bottomPanel.Paint = function() end 

    local goBackButton = vgui.Create("yaws.button", bottomPanel)
    goBackButton:SetLabel(YAWS.Language.GetTranslation("generic_back"))
    goBackButton.DoClick = function()
        YAWS.UI.Tabs.Players(master)
    end 

    local createWarnButton = vgui.Create("yaws.button", bottomPanel)
    createWarnButton:SetLabel(YAWS.Language.GetTranslation("viewing_player_action_submit_warn"))
    createWarnButton.DoClick = function()
        if(!YAWS.UI.CurrentData['can_view']['warn_players']) then 
            YAWS.Language.SendMessage("chat_no_permission")
            return
        end 

        -- YAWS.UI.CurrentData.FrameCache:Remove()
        YAWS.UI.WarnPlayerPopup({
            name = data.name,
            steamid = data.steamid,
            realSteamID = data.realSteamID,
            usergroup = data.usergroup
        })
    end 

    local viewNotesButton = vgui.Create("yaws.button", bottomPanel)
    viewNotesButton:SetLabel(YAWS.Language.GetTranslation("viewing_player_action_view_notes"))
    viewNotesButton.DoClick = function()
        YAWS.UI.DisplayPlayerNotes(master, data)
    end

    bottomPanel.PerformLayout = function(self, w, h)
        goBackButton:Dock(LEFT)
        goBackButton:SetWide((w / 3) - 6)
        
        viewNotesButton:Dock(RIGHT)
        viewNotesButton:SetWide((w / 3) - 6)
        
        createWarnButton:Dock(FILL)
        createWarnButton:DockMargin(10, 0, 10, 0)
    end 

    master.Paint = function(self, w, h) end 
    master.PerformLayout = function(self, w, h) 
        playerPanel:Dock(TOP)
        playerPanel:SetHeight(h * 0.15)
        playerPanel:DockMargin(10, 10, 10, 10)

        -- warnTable:Dock(FILL)
        -- warnTable:DockMargin(10, 0, 10, 10)
        -- if(table.Count(YAWS.UI.CurrentData.self_warns) > 0) then
        --     warnTable:FindBestSize()
        -- end

        if(!YAWS.UserSettings.GetValue("table_view")) then 
            warnings:Dock(FILL)
            warnings:DockMargin(10, 0, 8, 10)
        else 
            warnings:Dock(FILL)
            warnings:DockMargin(10, 0, 10, 10)
            if(table.Count(YAWS.UI.CurrentData.self_warns) > 0) then
                warnings:FindBestSize()
            end
        end 

        pagnation:Dock(BOTTOM)
        pagnation:SetTall(h * 0.05575) -- 33
        pagnation:DockMargin(10, 0, 10, 10)

        bottomPanel:Dock(BOTTOM)
        bottomPanel:SetTall(h * 0.05575) -- 33
        bottomPanel:DockMargin(10, 0, 10, 10)
    end
    master:InvalidateLayout()
end 

function YAWS.UI.DisplayPlayerNotes(master, data)
    master:Clear()
    master.PerformLayout = function() end 
    
    local playerPanel = vgui.Create("yaws.panel", master)
    local picture = vgui.Create("yaws.round_avatar", playerPanel)
    picture:SetSteamID(data.steamid, 256)

    playerPanel.PostPerformLayout = function(self, w, h)
        picture:Dock(LEFT)
        picture:DockMargin(10, 10, 10, 10)
        picture:SetWide(picture:GetTall())
    end 
    playerPanel.Paint = function(self, w, h)
        local colors = YAWS.UI.ColorScheme()
        draw.RoundedBox(0, 0, 0, w, h, colors['panel_background'])

        draw.SimpleText(data.name, "yaws.10", h + (5), h * 0.375, colors['text_header'], 0, 1)
        draw.SimpleText(util.SteamIDFrom64(data.steamid), "yaws.7", h + (5), h * 0.625, colors['text_main'], 0, 1)
    end 
    
    local notesWrapper = vgui.Create("DPanel", master)
    notesWrapper.Paint = function(self, w, h) 
        local colors = YAWS.UI.ColorScheme()
        draw.RoundedBox(0, 0, 0, w, h, colors['text_entry_border_inactive'])
        draw.RoundedBox(0, 1, 1, w - 2, h - 2, colors['panel_background'])
    end
    
    local notesScroller = vgui.Create("yaws.scroll", notesWrapper)
    notesScroller.Paint = function() end 

    local notesPanel = vgui.Create("yaws.text_entry", notesScroller)
    notesPanel:SetMultiline(true)
    notesPanel:SetText(data.adminNotes)
    notesPanel:SetMaximumCharCount(3000)
    notesPanel:SetPlaceholder(YAWS.Language.GetTranslation("viewing_player_player_notes"))
    -- notesPanel:SetVerticalScrollbarEnabled(true)
    notesPanel:RemoveShadows()
    notesPanel:SetDrawBorder(false)
    notesPanel.overrideX = 8 -- cope https://upload.livaco.dev/u/XE4mTWJSeQ.png

    local actionPanel = vgui.Create("yaws.panel", master)
    -- actionPanel:DockPadding(10, 10, 10, 10)
    actionPanel:RemoveShadows()

    local goBackButton = vgui.Create("yaws.button", actionPanel)
    goBackButton:SetLabel(YAWS.Language.GetTranslation("generic_back"))
    goBackButton.DoClick = function()
        YAWS.UI.DisplayPlayerInfo(master, data)
    end 
    local saveNotesButton = vgui.Create("yaws.button", actionPanel)
    saveNotesButton:SetLabel(YAWS.Language.GetTranslation("viewing_player_save_player_notes"))
    saveNotesButton.DoClick = function()
        net.Start("yaws.adminnotes.updatenotes")
        net.WriteString(data.steamid)
        net.WriteString(notesPanel:GetValue())
        net.SendToServer()

        YAWS.UI.Tabs.Players(master)
    end

    actionPanel.Paint = function() end 
    actionPanel.PerformLayout = function(self, w, h)
        goBackButton:Dock(LEFT)
        goBackButton:SetWide((w / 2) - 5)

        saveNotesButton:Dock(RIGHT)
        saveNotesButton:SetWide((w / 2) - 5)
    end 

    master.Paint = function(self, w, h) end 
    master.PerformLayout = function(self, w, h) 
        playerPanel:Dock(TOP)
        playerPanel:SetHeight(h * 0.15)
        playerPanel:DockMargin(10, 10, 10, 10)

        notesWrapper:Dock(FILL)
        notesWrapper:DockMargin(10, 0, 10, 10)
        notesScroller:Dock(FILL)
        notesScroller:DockMargin(1, 1, 1, 1)
        notesPanel:SetHeight(math.max(notesPanel:GetTotalTextHeight(), notesScroller:GetTall()))
        notesPanel:Dock(TOP)
        
        actionPanel:Dock(BOTTOM)
        actionPanel:SetTall(h * 0.05575) -- 33
        actionPanel:DockMargin(10, 0, 10, 10)
    end
    master:InvalidateLayout()
end


function YAWS.UI.DisplayWarnData(playerData, warnData)
    YAWS.UI.ViewWarning(playerData, warnData)
    -- YAWS.UI.CurrentData.FrameCache:Remove()
end
--addons/advancedkillfeed/lua/z_advancedkillfeed/sh_z_advancedkillfeed.lua:
return gluapack()()
--addons/advancedkillfeed/lua/z_advancedkillfeed/sh_z_advancedkillfeed.lua:
-- [[ CREATED BY ZOMBIE EXTINGUISHER]]

CL_ADVANCEDFEED = CL_ADVANCEDFEED || {}
SH_ADVANCEDFEED = SH_ADVANCEDFEED || {}
SV_ADVANCEDFEED = SV_ADVANCEDFEED || {}

SH_ADVANCEDFEED.Col = {}
SH_ADVANCEDFEED.Col.TRANS = Color(0,0,0,0)
SH_ADVANCEDFEED.Col.RED = Color(231, 76, 60)
SH_ADVANCEDFEED.Col.GREEN = Color(46, 204, 113)
SH_ADVANCEDFEED.Col.BLUE = Color(52, 152, 219)
SH_ADVANCEDFEED.Col.WHITE = Color(255,255,255)
SH_ADVANCEDFEED.Col.BLACK = Color(0,0,0)
SH_ADVANCEDFEED.Col.LIGHTBLACK = Color(25, 25, 25)
SH_ADVANCEDFEED.Col.LIGHTBLACK_150 = ColorAlpha(SH_ADVANCEDFEED.Col.LIGHTBLACK, 150)
SH_ADVANCEDFEED.Col.GREY = Color(50, 50, 50)
SH_ADVANCEDFEED.Col.GREY_150 = ColorAlpha(SH_ADVANCEDFEED.Col.GREY, 150)
SH_ADVANCEDFEED.Col.LIGHTGREY = Color(150, 150, 150)
SH_ADVANCEDFEED.Col.DARKGREY = Color(40, 40, 40)
SH_ADVANCEDFEED.Col.DARKGREY_150 = ColorAlpha(SH_ADVANCEDFEED.Col.DARKGREY, 150)

SH_ADVANCEDFEED.Col.RAINBOW_NOTRANSITION = {
	Color(255, 0, 0),
	Color(255, 127, 0),
	Color(255, 255, 0),
	Color(0, 255, 0),
	Color(0, 0, 255),
	Color(39, 0, 51),
	Color(139, 0, 255)
}

// colors calculated with: https://meyerweb.com/eric/tools/color-blend/

-- triple transition
SH_ADVANCEDFEED.Col.RAINBOW = {
	Color(255,0,0),
	Color(255,32,0),
	Color(255,64,0),
	Color(255,95,0),
	Color(255,127,0),
	Color(255,127,0),
	Color(255,159,0),
	Color(255,191,0),
	Color(255,223,0),
	Color(255,255,0),
	Color(255,255,0),
	Color(191,255,0),
	Color(128,255,0),
	Color(64,255,0),
	Color(0,255,0),
	Color(0,255,0),
	Color(0,191,64),
	Color(0,128,128),
	-- Color(0,64,191), ugly
	Color(0,0,255),
	Color(0,0,255),
	Color(35,0,255),
	Color(70,0,255),
	Color(104,0,255),
	Color(139,0,255),
	Color(139,0,255),
	Color(168,0,191),
	Color(197,0,128),
	Color(226,0,64),
	Color(255,0,0)
}

SH_ADVANCEDFEED.Var = {}
SH_ADVANCEDFEED.Var.latestVersion = true

SH_ADVANCEDFEED.Hitgroup = {}
SH_ADVANCEDFEED.Hitgroup.NONE = "None"
SH_ADVANCEDFEED.Hitgroup.ALL = "All"
SH_ADVANCEDFEED.Hitgroup.HEAD = "Head"

SH_ADVANCEDFEED.Align = {}
SH_ADVANCEDFEED.Align.RIGHT = "Right"
SH_ADVANCEDFEED.Align.LEFT = "Left"
SH_ADVANCEDFEED.Align.CENTER = "Center"

SH_ADVANCEDFEED.LogModus = {}
SH_ADVANCEDFEED.LogModus.BOTTOMTOTOP = "Bottom to Top (up)"
SH_ADVANCEDFEED.LogModus.TOPTOBOTTOM = "Top to Bottom (down)"

CL_ADVANCEDFEED.KillStreak = CL_ADVANCEDFEED.KillStreak || {}
SH_ADVANCEDFEED.KillStreak = {}
SH_ADVANCEDFEED.KillStreak.effects = {}
SH_ADVANCEDFEED.KillStreak.effects.COLOR = 1
SH_ADVANCEDFEED.KillStreak.effects.COLORFADE = 2
SH_ADVANCEDFEED.KillStreak.effects.COLORTRANSITION = 3
SH_ADVANCEDFEED.KillStreak.effects.MOVE = 4

SH_ADVANCEDFEED.KillStreak.streaks = {
    [4] = {
        name = "Hükmeden",
        color = SH_ADVANCEDFEED.Col.RED,
        effects = {
            SH_ADVANCEDFEED.KillStreak.effects.COLORFADE
        }
    },
    [6] = {
        name = "Yıkıcı",
        color = SH_ADVANCEDFEED.Col.RED,
        effects = {
            SH_ADVANCEDFEED.KillStreak.effects.COLORFADE
        }
    },
    [8] = {
        name = "Çılgın",
        color = SH_ADVANCEDFEED.Col.RED,
        effects = {
            SH_ADVANCEDFEED.KillStreak.effects.COLORFADE
        }
    },
    [10] = {
        name = "Canavar",
        fgColor = SH_ADVANCEDFEED.Col.RED,
        bgColor = SH_ADVANCEDFEED.Col.GREEN,
        effects = {
            SH_ADVANCEDFEED.KillStreak.effects.COLORTRANSITION
        }
    },
    [14] = {
        name = "Durdurulamaz",
        fgColor = SH_ADVANCEDFEED.Col.RED,
        bgColor = SH_ADVANCEDFEED.Col.GREEN,
        effects = {
            SH_ADVANCEDFEED.KillStreak.effects.COLORTRANSITION
        }
    },
    [16] = {
        name = "İnanılmaz",
        fgColor = SH_ADVANCEDFEED.Col.RED,
        bgColor = SH_ADVANCEDFEED.Col.GREEN,
        speed = 0.1,
        effects = {
            SH_ADVANCEDFEED.KillStreak.effects.COLORTRANSITION,
            SH_ADVANCEDFEED.KillStreak.effects.MOVE
        }
    },
    [18] = {
        name = "Katliam!",
        fgColor = SH_ADVANCEDFEED.Col.RED,
        bgColor = SH_ADVANCEDFEED.Col.GREEN,
        speed = 0.1,
        effects = {
            SH_ADVANCEDFEED.KillStreak.effects.COLORTRANSITION,
            SH_ADVANCEDFEED.KillStreak.effects.MOVE
        }
    },
    [20] = {
        name = "Ezici!",
        fgColor = SH_ADVANCEDFEED.Col.RED,
        bgColor = SH_ADVANCEDFEED.Col.GREEN,
        speed = 0.05,
        effects = {
            SH_ADVANCEDFEED.KillStreak.effects.COLORTRANSITION,
            SH_ADVANCEDFEED.KillStreak.effects.MOVE
        }
    },
    [22] = {
        name = "Seri Katil!",
        fgColor = SH_ADVANCEDFEED.Col.RED,
        bgColor = SH_ADVANCEDFEED.Col.GREEN,
        speed = 0.035,
        effects = {
            SH_ADVANCEDFEED.KillStreak.effects.COLORTRANSITION,
            SH_ADVANCEDFEED.KillStreak.effects.MOVE
        }
    }
}

SH_ADVANCEDFEED.KillStreak.combos = {
    [2] = {
        name = "İki Kişi!",
        effects = {SH_ADVANCEDFEED.KillStreak.effects.COLOR}
    },
    [3] = {
        name = "Üç Kişi!",
        speed = 0.1,
        effects = {
            SH_ADVANCEDFEED.KillStreak.effects.COLOR,
            SH_ADVANCEDFEED.KillStreak.effects.MOVE
        }
    },
    [4] = {
        name = "Dörtte Dört!",
        speed = 0.05,
        effects = {
            SH_ADVANCEDFEED.KillStreak.effects.COLOR,
            SH_ADVANCEDFEED.KillStreak.effects.MOVE
        }
    },
    [5] = {
        name = "Beşte Beş!",
        speed = 0.035,
        effects = {
            SH_ADVANCEDFEED.KillStreak.effects.COLOR,
            SH_ADVANCEDFEED.KillStreak.effects.MOVE
        }
    }
}

SH_ADVANCEDFEED.KillStreak.HasEffect = function(killStreakEffect,effect)
	return table.HasValue(killStreakEffect.effects,effect)
end

SH_ADVANCEDFEED.Gm = SH_ADVANCEDFEED.Gm || {}
SH_ADVANCEDFEED.Settings = SH_ADVANCEDFEED.Settings || {}

hook.Add("Initialize","z_GetGamemode",function()
	SH_ADVANCEDFEED.Gm.activeGM = engine.ActiveGamemode():lower()
	SH_ADVANCEDFEED.Gm.isDarkRP = string.match( SH_ADVANCEDFEED.Gm.activeGM, "darkrp") != nil
	SH_ADVANCEDFEED.Gm.isTTT = string.match( SH_ADVANCEDFEED.Gm.activeGM, "terrortown") != nil
	SH_ADVANCEDFEED.Gm.isJailbreak = string.match( SH_ADVANCEDFEED.Gm.activeGM, "jailbreak") != nil
end)

SH_ADVANCEDFEED.hitGroups = {
	[HITGROUP_HEAD] = "Head",
	[HITGROUP_CHEST] = "Chest",
	[HITGROUP_STOMACH] = "Stomach",
	[HITGROUP_LEFTARM] = "Left Arm",
	[HITGROUP_RIGHTARM] = "Right Arm",
	[HITGROUP_LEFTLEG] = "Left Leg",
	[HITGROUP_RIGHTLEG] = "Right Leg"	
}

function SH_ADVANCEDFEED.GetHitboneName(num)
	local hitGroupStr = SH_ADVANCEDFEED.hitGroups[num]
	if (hitGroupStr == nil) then 
		hitGroupStr = SH_ADVANCEDFEED.hitGroups[HITGROUP_CHEST]
	end
	return hitGroupStr
end

function SH_ADVANCEDFEED.GetColor(tbl,...)

	for _,arg in pairs({...}) do 
		for _,v in pairs(tbl) do
			if v[1] == arg or SH_ADVANCEDFEED.IsInUserGroup(arg,v[1]) then
				return v[3]
			end
			if game.SinglePlayer() then
				if tonumber(arg) == 1 and v[2]== LocalPlayer():Nick() then
					return v[3]
				end
			end
		end
	end
	
	return nil
	
end

function SH_ADVANCEDFEED.IsInUserGroup(plyID,userGroup)

	local ply = player.GetBySteamID(plyID)

	local function checkUserGroup(userGroup)
		if ply != false and ply:IsUserGroup(userGroup) then 
			return true
		end
	end
	
	if istable(userGroup) then 
		for _,userG in pairs(userGroup) do 
			if isstring(userG[2]) and checkUserGroup(userG[2]) then 
				return true
			end
		end
	else 
		if checkUserGroup(userGroup) then 
			return true
		end
	end
	
	return false

end

function SH_ADVANCEDFEED.IsTeamInTable(tbl,val)
	
	for _,t in pairs(tbl) do
	
		if (t[1]==val or t[2]==val) then 
			return true
		end
		
	end
	
	return false
	
end

function SH_ADVANCEDFEED.GetAllTeams()

	local teams = {}
	
	-- teams
	for teamNum, t in pairs(team.GetAllTeams()) do
		table.insert(teams, { teamNum, t.Name, true })
	end
	
	-- ULX groups
	if ULib and ULib.ucl and ULib.ucl.groups ~= nil then 
		for usergroupName,usergroup in pairs(ULib.ucl.groups) do
			table.insert(teams, { "ULX", usergroupName })
		end
	end
	
	-- XAdmin
	if xAdmin and xAdmin.Groups then
		for _, usergroup in pairs(xAdmin.Groups) do
			table.insert(teams, { "XAdmin", usergroup.Name })
		end
	end
	
	-- Server Guard
	if serverguard and serverguard.ranks and serverguard.ranks.stored then
		for _, usergroup in pairs(serverguard.ranks.stored) do
			table.insert(teams, { "ServerGuard", usergroup.name })
		end
	end
	
	-- SAM
	if sam and sam.ranks then
		for _, rank in pairs(sam.ranks.get_ranks()) do
			table.insert(teams, { "SAM", rank.name })
		end
	end
	
	return teams

end

-- for permission tables with both players and teams
function SH_ADVANCEDFEED.CheckPlayerPermission(permissionTbl,plyID,plyTeam)

	for _,row in pairs(permissionTbl) do 
		
		local key = row[1] 
		local value = row[2]
		
		if key == plyID or key == plyTeam or SH_ADVANCEDFEED.IsInUserGroup(plyID,key) then
			return true
		end
		
		if game.SinglePlayer() then
			if tonumber(plyID) == 1 and value == LocalPlayer():Nick() then
				return true
			end
		end
	
	end
	
	return false
	
end

function SH_ADVANCEDFEED.HasAccess(ply)
	
	if ply:IsSuperAdmin() or (SH_ADVANCEDFEED.Settings.accessForAdmin and ply:IsAdmin()) or game.SinglePlayer() then 
		return true
	end

	return SH_ADVANCEDFEED.CheckPlayerPermission(SH_ADVANCEDFEED.Settings.accessForTeams,ply:SteamID(),ply:Team())
	
end



local alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
local alphabetCodes = {}

for k, char in utf8.codes(alphabet) do
	table.insert(alphabetCodes, char)
end

// start of a limit conversion function for invalid utf8 char codes 
function SH_ADVANCEDFEED.ConvertInvalidUTFToValid(str)
	
	if !SH_ADVANCEDFEED.ContainsNonAscii(str) then
		return str
	end

	-- make sure the string is valid for utf8.codes() -> if not will throw error!
	str = utf8.force(str)
	
	local newString = ""

	for k, char in utf8.codes(str) do
		
		local realChar = utf8.char(char)
		
		/* no time to solve the equasion now
		-- example: "𝕭𝖆𝖗𝖟𝖚𝖒𝖀𝕬" - Mathematical Alphanumeric Symbols 
		if char >= 120064 then 
			
			if realChar == realChar:upper() then
				print(k,char,realChar,"is upper case!")
			else
				print(k,char,realChar,"is lower case! :>(")
			end
			
			newString = newString.."kanker"
			
			continue
			
		end*/
		
		-- for all chars above/in the 'Supplementary Multilingual Plane'
		-- Unicode code points above 0xFFFF (=65535) are not supported.
		if char > 0xFFFF then
			newString = newString .."?"
			continue
		end
		
		-- if there was no match, use the orginal char
		newString = newString..realChar
		
	end
	
	
	return newString
	
end

// function made to count chars for both ascii and non ascii strings
function SH_ADVANCEDFEED.GetMaxStringLength(str)

	if !SH_ADVANCEDFEED.ContainsNonAscii(str) then
		return string.len(str)
	end
	
	local strLength,realLetterCount = 0,0
	local orgLength = string.len(str)
	
	for k, char in utf8.codes(str) do

		realLetterCount = realLetterCount + 1

		if realLetterCount >= SH_ADVANCEDFEED.Settings.capNamesAt or realLetterCount == orgLength then
			if char > 127 then
				strLength = k - 1
			else
				strLength = k
			end
			
			break
		end
		
	end
	
	-- if strLength is still empty it means the realLetterCount was lower then our limit cap
	if strLength <= 0 then 
		strLength = orgLength
	end

	return strLength
	
end

// function made to split non ascii strings
function SH_ADVANCEDFEED.SplitSpecialString(str)
	
	local strTbl = {}

	for k, char in utf8.codes(str) do
		table.insert(strTbl,utf8.char(char))
	end
	
	return strTbl
	
end

function SH_ADVANCEDFEED.ContainsNonAscii(str)
	return utf8.len(str) != string.len(str)
end

function SH_ADVANCEDFEED.GetFonts()
	
	local fonts = {}
	
	for _,font in pairs(SH_ADVANCEDFEED.Settings.fonts) do 
		table.insert(fonts,font[1])
	end
	
	return fonts
	
end

function SH_ADVANCEDFEED.FindFont(name) 
	
	for key,font in pairs(SH_ADVANCEDFEED.Settings.fonts) do 
		
		if font[1] == name then 
			return font
		end
	end
	
	return nil
	
end

-- currently only support for metric system, not imperial 
function SH_ADVANCEDFEED.CalcDist(vec1,vec2) 

	if vec1 == nil or vec2 == nil then
		return -1
	end
	
	local unitDist = vec1:Distance( vec2 )
	local unitMeter = math.Round( unitDist/53.3 )
	
	return unitMeter
	
end

function SH_ADVANCEDFEED.DistToStr(dist)
 	if dist < 1000 then 
		return dist.."m"
	else 
		return (dist/1000).."km"
	end
end

--addons/advancedkillfeed/lua/z_advancedkillfeed/client/cl_z_advancedkillfeed_menu.lua:
-- [[ CREATED BY ZOMBIE EXTINGUISHER]]

surface.CreateFont( "z_advancedkillfeed_checkbox", {
	font = "DermaDefault", 
	size = ScrW()/100,
	weight = ScrW(),
	blursize = 0, 
	scanlines = 0,
	antialias = true, 
	underline = false, 
	italic = false, 
	strikeout = false, 
	symbol = false, 
	rotary = false, 
	shadow = false, 
	additive = false, 
	outline = false, 
} )

surface.CreateFont( "z_advancedkillfeed_checkbox_big", {
	font = "DermaDefault", 
	size = ScrW()/90,
	weight = ScrW(),
	blursize = 0, 
	scanlines = 0,
	antialias = true, 
	underline = false, 
	italic = false, 
	strikeout = false, 
	symbol = false, 
	rotary = false, 
	shadow = false, 
	additive = false, 
	outline = false, 
} )

surface.CreateFont( "z_advancedkillfeed_checkbox_big_big", {
	font = "DermaDefault", 
	size = ScrW()/85,
	weight = ScrW(),
	blursize = 0, 
	scanlines = 0,
	antialias = true, 
	underline = false, 
	italic = false, 
	strikeout = false, 
	symbol = false, 
	rotary = false, 
	shadow = false, 
	additive = false, 
	outline = false, 
} )

surface.CreateFont( "z_advancedkillfeed_cat", {
	font = "Roboto Cn", 
	size = ScrW()/100,
	weight = 1,
	blursize = 0, 
	scanlines = 0,
	antialias = true, 
	underline = false, 
	italic = false, 
	strikeout = false, 
	symbol = false, 
	rotary = false, 
	shadow = false, 
	additive = false, 
	outline = false, 
} )

surface.CreateFont( "z_advancedkillfeed_title", {
	font = "Roboto Th", 
	size = ScrW()/48,
	weight = 1,
	blursize = 0, 
	scanlines = 0,
	antialias = true, 
	underline = false, 
	italic = false, 
	strikeout = false, 
	symbol = false, 
	rotary = false, 
	shadow = false, 
	additive = false, 
	outline = false, 
} )

surface.CreateFont( "z_advancedkillfeed_closebtn", {
	font = "Roboto", 
	size = ScrW()/48,
	weight = 1,
	blursize = 0, 
	scanlines = 0,
	antialias = true, 
	underline = false, 
	italic = false, 
	strikeout = false, 
	symbol = false, 
	rotary = false, 
	shadow = false, 
	additive = false, 
	outline = false, 
} )

local scrW,scrH = ScrW(),ScrH()

local menuTitle = "Advanced Killfeed"
local menuCol = SH_ADVANCEDFEED.Col.DARKGREY
local menuTextCol = SH_ADVANCEDFEED.Col.WHITE
local btnCol,btnColPressed = SH_ADVANCEDFEED.Col.GREY,SH_ADVANCEDFEED.Col.LIGHTGREY
local animTime = 0.2

function CL_ADVANCEDFEED.CreatePaintButton(parent,tableId)
	
	local btn = vgui.Create( "DButton",parent )
	btn.Paint = function(_,bw,bh) 
		
		local currColor
		if btn:IsDown() or (parent.activePanel != nil and parent.activePanel:GetName() == btn.vguiName) then	
			currColor = btnColPressed
		else
			currColor = btnCol
		end
		surface.SetDrawColor(currColor)
		surface.DrawRect(0, 0, bw, bh)

		surface.SetDrawColor(menuTextCol)
		surface.DrawRect(0, 0, 1, bh)
		surface.DrawRect(bw-1, 0, 1, bh)
		
		if tableId != nil then 
			surface.SetDrawColor(SH_ADVANCEDFEED.Settings[tableId])
			surface.DrawRect(bw*0.03,bh/2-bh*0.25,bw*0.1,bh*0.575)
		end

	end
	
	return btn
end

local lastPressedBtn

local function CreateCatButton(parent,str,vguiName,targetPanel)
	
	local menuW,menuH = parent:GetSize()
	local targetPanelW,targetPanelH = targetPanel:GetSize()
	local targetPanelX,targetPanelY = targetPanel:GetPos()
	
	local btnHeigth = menuH*0.1
	
	local btn = CL_ADVANCEDFEED.CreatePaintButton(parent)
	btn:SetPos( 0, #parent.Buttons*btnHeigth*1.1 ) 
	btn:SetFont("z_advancedkillfeed_cat")
	btn:SetText( str )
	btn:SetTextColor(menuTextCol)
	btn:SetSize( menuW, btnHeigth)
	btn.DoClick = function(self)
		if parent.activePanel != nil then 
			if parent.activePanel:GetName() == vguiName then return end
			parent.activePanel:Remove()
		end
		
		// open vgui panel on settings panel
		local SettingsPanel = vgui.Create(vguiName,targetPanel)
		CL_ADVANCEDFEED.SkinScrollPanel(SettingsPanel)
		
		btn.vguiName = vguiName	
		parent.activePanel = SettingsPanel
		lastPressedBtn = table.KeyFromValue(parent.Buttons, self)
		

	end
	
	-- btn slide animation
	local _, btnY = btn:GetPos()
	btn:SetPos( 400, btnY)
	btn:MoveTo( 0, btnY, animTime, 0 )
	
	table.insert(parent.Buttons,btn)
	
	return btn
	
end

local function OpenMenu()
	
	-- base panel
	local MenuPanel = vgui.Create("DFrame")
	MenuPanel:SetText("")
	MenuPanel:SetTitle("")
	MenuPanel:SetSize(scrW*0.4,scrH*0.5)
	MenuPanel:Center()
	MenuPanel:ShowCloseButton(false)
	MenuPanel:MakePopup()
	
	-- animate alpha
	MenuPanel:SetAlpha(0)
	MenuPanel:AlphaTo(255, animTime)
	
	local menuW,menuH = MenuPanel:GetSize()
	local catWidth = menuW*0.2
	
	MenuPanel.Paint = function(_,w,h)
	
		surface.SetDrawColor( menuCol )
		surface.DrawRect( 0, 0, w, h )
		
		surface.SetFont( "z_advancedkillfeed_title" )
		local texW = surface.GetTextSize(menuTitle)
		surface.SetTextColor( color_white )
		surface.SetTextPos( catWidth + ((w-catWidth)/2-texW/2), h*0.005 )
		surface.DrawText( menuTitle )
		
	end	
	MenuPanel.Close = function()
		RunConsoleCommand("advancedkillfeed_menu")
	end
	
	-- close btn
	local closeBtnSize = menuH*0.08
	local CloseBtn = vgui.Create( "DButton", MenuPanel )
	CloseBtn:SetFont( "z_advancedkillfeed_closebtn" )
	CloseBtn:SetText( "X" )
	CloseBtn:SetTextColor(SH_ADVANCEDFEED.Col.RED)
	CloseBtn:SetPos( menuW-closeBtnSize, 0 )
	CloseBtn:SetSize( closeBtnSize, closeBtnSize )
	CloseBtn.Paint = function() end
	CloseBtn.DoClick = function()
		RunConsoleCommand( "advancedkillfeed_menu" )
	end
		
	-- category panel
	local CategoryPanel = vgui.Create("DPanel",MenuPanel)
	CategoryPanel:SetText("")
	CategoryPanel:SetSize(catWidth,menuH)
	CategoryPanel:SetPos(0,0)
	CategoryPanel:SetDrawBackground(false)
	CategoryPanel.Paint = function(_,w,h)
		surface.SetDrawColor( color_white )
		surface.DrawRect( w-1, 0, 1, h )
	end
	
	CategoryPanel.Buttons = {}
	
	local catW,catH = CategoryPanel:GetSize()
	local catX,catY = CategoryPanel:GetPos()
	
	-- selected panel
	local SelectedPanel = vgui.Create("DPanel",MenuPanel)
	SelectedPanel:SetText("")
	SelectedPanel:SetSize(menuW*0.81,catH)
	SelectedPanel:SetPos(catX+catW-1,catH*0.08)
	SelectedPanel.Paint = function(_,w,h)
		surface.SetDrawColor( color_white )
		surface.DrawOutlinedRect( 0, 0, w, h )
	end
	
	-- create buttons
	local genBtn = CreateCatButton(CategoryPanel,"General","z_AdvancedKillFeedGeneralSettings",SelectedPanel)
	CreateCatButton(CategoryPanel,"Appearance","z_AdvancedKillFeedAppearanceSettings",SelectedPanel)
	CreateCatButton(CategoryPanel,"Animations","z_AdvancedKillFeedAnimationSettings",SelectedPanel)
	CreateCatButton(CategoryPanel,"Effects","z_AdvancedKillFeedEffectSettings",SelectedPanel)
	CreateCatButton(CategoryPanel,"Skin","z_AdvancedKillFeedSkinSettings",SelectedPanel)
	CreateCatButton(CategoryPanel,"Access","z_AdvancedKillFeedAccessSettings",SelectedPanel)
	
	if lastPressedBtn == nil then
		genBtn:DoClick()
	else
		CategoryPanel.Buttons[lastPressedBtn]:DoClick()
	end
		
	CL_ADVANCEDFEED.__MENU = MenuPanel
end


concommand.Add("advancedkillfeed_menu",function( ply, cmd, args )
			
	if CL_ADVANCEDFEED.__MENU == nil then
		if SH_ADVANCEDFEED.HasAccess(ply) then 
		
			-- open menu
			gui.EnableScreenClicker( true )
			OpenMenu()
			
			-- show update warning
			if !SH_ADVANCEDFEED.Var.latestVersion then
				SH_ADVANCEDFEED.Var.latestVersion = true
				notification.AddLegacy( SH_ADVANCEDFEED.Var.latestVersionMsg, NOTIFY_GENERIC, 15 )
			end
			
		end
	else
		gui.EnableScreenClicker( false )
		CL_ADVANCEDFEED.__MENU:Remove()
		CL_ADVANCEDFEED.__MENU = nil			
	end

end)
--addons/zerosfruitslicer/lua/sh_zfs_config_smoothies.lua:
zfs = zfs or {}
zfs.config = zfs.config or {}
zfs.config.Smoothies = {}

local function AddSmoothie(data) table.insert(zfs.config.Smoothies,data) end

/*

	This creates all the smoothies that can be made in the shop

*/

AddSmoothie({
	// The Name of our FruitCup
	Name = "Monster Melon",

	// The Base Price of the FruitCup, This value can change depending on the fruit varation if zfs.config.FruitPriceMultiplier is true
	Price = 3500,

	// The Icon of the FruitCup
	Icon = Material("materials/zfruitslicer/ui/fs_ui_monstermelon.png","smooth"),

	// The Info of the FruitCup
	Info = "A Tasty Melon Cup with Rainbows, Sparks and a fruity melon smell.",

	// The Color of the Fruitcup
	fruitColor = Color(254, 84, 78),

	// What Fruits are needed do make the Smoothie
	// Dont add more then 22 fruits max or it gets complicated
	recipe = {
		[ZFS_FRUIT_MELON] = 3,
	}
})

AddSmoothie({
	Name = "General Banana",
	Price = 8200,
	Icon = Material("materials/zfruitslicer/ui/fs_ui_generalbanana.png","smooth"),
	Info = "A tasty Bananas Smoothie full of Rainbows.",
	fruitColor = Color(255, 223, 126),
	recipe = {
		[ZFS_FRUIT_BANANA] = 5,
	}
})

AddSmoothie({
	Name = "Chianka Cup",
	Price = 9500,
	Icon = Material("materials/zfruitslicer/ui/fs_ui_chikichanga.png","smooth"),
	Info = "A tropical yummi sweet Cup of Hawai.",
	fruitColor = Color(221, 112, 161),
	recipe = {
		[ZFS_FRUIT_BANANA] = 1,
		[ZFS_FRUIT_COCONUT] = 3,
		[ZFS_FRUIT_POMEGRANATE] = 2,
	}
})

AddSmoothie({
	Name = "Super Fruit Cup",
	Price = 15000,
	Icon = Material("materials/zfruitslicer/ui/fs_ui_superfruit.png","smooth"),
	Info = "The Ultimate Vitamin Bomb!",
	fruitColor = Color(140, 119, 219),
	recipe = {
		[ZFS_FRUIT_MELON] = 1,
		[ZFS_FRUIT_BANANA] = 3,
		[ZFS_FRUIT_COCONUT] = 1,
		[ZFS_FRUIT_POMEGRANATE] = 1,
		[ZFS_FRUIT_STRAWBERRYS] = 1,
		[ZFS_FRUIT_KIWI] = 2,
		[ZFS_FRUIT_LEMON] = 1,
		[ZFS_FRUIT_ORANGE] = 2,
		[ZFS_FRUIT_APPLE] = 2
	}
})

AddSmoothie({
	Name = "Strawberry Bomb",
	Price = 8000,
	Icon = Material("materials/zfruitslicer/ui/fs_ui_strawberrybomb.png","smooth"),
	Info = "Taste the blood of your Enemys!",
	fruitColor = Color(174, 36, 56),
	recipe = {
		[ZFS_FRUIT_STRAWBERRYS] = 5,
	}
})

AddSmoothie({
	Name = "Lava Burst Delight",
	Price = 9000,
	Icon = Material("materials/zfruitslicer/ui/fs_ui_lavaburst.png","smooth"),
	Info = "The Power of the Earth combined in a Fruity Delight!",
	fruitColor = Color(255, 119, 0),
	recipe = {
		[ZFS_FRUIT_MELON] = 1,
		[ZFS_FRUIT_BANANA] = 2,
		[ZFS_FRUIT_STRAWBERRYS] = 2,
		[ZFS_FRUIT_APPLE] = 4
	}
})

AddSmoothie({
	Name = "Rouges Vortex",
	Price = 8000,
	Icon = Material("materials/zfruitslicer/ui/fs_ui_fruitrougesvortex.png","smooth"),
	Info = "A Vortex of tasty red fruits!",
	fruitColor = Color(199, 48, 62),
	recipe = {
		[ZFS_FRUIT_MELON] = 1,
		[ZFS_FRUIT_POMEGRANATE] = 5,
		[ZFS_FRUIT_STRAWBERRYS] = 2,
		[ZFS_FRUIT_APPLE] = 3
	}
})

--addons/zerosfruitslicer/lua/sh_zfs_config_toppings.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/sh_zfs_config_toppings.lua:
zfs = zfs or {}
zfs.config = zfs.config or {}
zfs.config.Toppings = {}
local function AddTopping(data)
	if SERVER and data.Model then util.PrecacheModel(data.Model) end
	table.insert(zfs.config.Toppings,data)
end

//Available Benefits
// ["Health"] = ExtraHealth - 100
// ["ParticleEffect"] = Effectname   // In Mod Effects: zfs_health_effect,zfs_money_effect,zfs_energetic,zfs_ghost_effect
// ["SpeedBoost"] = SpeedBoost - 200
// ["AntiGravity"] = JumpBoost - 300
// ["Ghost"] = Alpha  - 0/255
// ["Drugs"] = ScreenEffectName  // In Mod ScreenEffects: MDMA,CACTI

// This is the item for NoTopping and should not be removed
AddTopping({
	Name = "No Topping",
	ExtraPrice = 0,
	Icon = Material("materials/zfruitslicer/ui/zfs_ui_nothing.png","smooth"),
	Model = nil,
	mScale = 1,
	Info = "At least its Free xD",
	ToppingBenefits = {},
	ToppingBenefit_Duration = -1,
	ConsumInfo = "Tasty!",
	Ranks_consume = {},
	Ranks_create = {},
	Job_consume = {}
})

AddTopping({
	// The Name of the Topping
	Name = "Baby",

	// The Extra price when adding this topping
	ExtraPrice = 9000,

	// If specified we use a icon instead of the model itself
	Icon = nil,

	// The Topping Model that gets placed on the cup
	Model = "models/props_c17/doll01.mdl",

	// The Scale of the Topping Model
	mScale = 0.5,

	// The Info of the Topping
	Info = "Stem Cells can cure cancer, so eating this gives you extra Health!",

	// The Benefits the player gets when consuming this topping
	ToppingBenefits = {
		["Health"] = 200 // This Gives the Player extra Health
	},

	// The Duration of the Benefits, this only applys to benefits that have a length. Wont to anything on Health since its Instant
	ToppingBenefit_Duration = 0,

	// The Info the Player gets when consuming the Fruicup
	ConsumInfo = "You feel very Healthy!",

	// This defines the Ranks who are allowed to consume the fruit cup if he has this topping, Leave empty to not Restrict it
	Ranks_consume = {},

	// This defines the Ranks who are allowed to add this topping to the fruit cup, Leave empty to not Restrict it
	Ranks_create = {
		["superadmin"] = true
	},

	// This defines the Jobs who are allowed to consume the fruit cup if he has this topping, Leave empty to not Restrict it
	Job_consume = {
		//[TEAM_POLICE] = true,
		//[TEAM_GANG] = true,
	}
})

AddTopping({
	Name = "Coffee",
	ExtraPrice = 12000,
	Icon = nil,
	Model = "models/props_junk/garbage_metalcan002a.mdl",
	mScale = 0.5,
	Info = "Not good for the Health but gives you an enery boost!",
	ToppingBenefits = {
		["ParticleEffect"] = "zfs_energetic",
		["SpeedBoost"] = 5
	},
	ToppingBenefit_Duration = 25,
	ConsumInfo = "You feel high on Energy!",
	Ranks_consume = {},
	Ranks_create = {},
	Job_consume = {}
})

AddTopping({
	Name = "Floating Orb",
	ExtraPrice = 11000,
	Icon = nil,
	Model = "models/Combine_Helicopter/helicopter_bomb01.mdl",
	mScale = 0.2,
	Info = "I found it in a crater so, do you want it?",
	ToppingBenefits = {
		["AntiGravity"] = 400
	},
	ToppingBenefit_Duration = 30,
	ConsumInfo = "You feel very light!",
	Ranks_consume = {},

	Job_consume = {}
})

AddTopping({
	Name = "Old Skull",
	ExtraPrice = 10000,
	Icon = nil,
	Model = "models/Gibs/HGIBS.mdl",
	mScale = 0.5,
	Info = "Some say you can enter the ghost dimension by licking it.",
	ToppingBenefits = {
		["Ghost"] = 25,
		["ParticleEffect"] = "zfs_ghost_effect"
	},
	ToppingBenefit_Duration = 30,
	ConsumInfo = "You filled with Dark Energy!",
	Ranks_consume = {},
	Ranks_create = {},
	Job_consume = {}
})

AddTopping({
	Name = "Mis Hulala",
	ExtraPrice = 6000,
	Icon = nil,
	Model = "models/props_lab/huladoll.mdl",
	mScale = 0.8,
	Info = "It says Party on the Bottom.",
	ToppingBenefits = {
		["Drugs"] = "MDMA"
	},
	ToppingBenefit_Duration = 45,
	ConsumInfo = "You tripping Ballz!",
	Ranks_consume = {},

	Job_consume = {}
})

AddTopping({
	Name = "Cactus juice",
	ExtraPrice = 6000,
	Icon = nil,
	Model = "models/props_lab/cactus.mdl",
	mScale = 0.8,
	Info = "Drink cactus juice. It'll quench ya! It's the quenchiest!",
	ToppingBenefits = {
		["Drugs"] = "CACTI"
	},
	ToppingBenefit_Duration = 45,
	ConsumInfo = "I feel quenchier!",
	Ranks_consume = {},
	Ranks_create = {},
	Job_consume = {}
})

AddTopping({
	Name = "Energy Drink",
	ExtraPrice = 15000,
	Icon = nil,
	Model = "models/props_junk/PopCan01a.mdl",
	mScale = 0.5,
	Info = "Not good for the Health but gives you an enery boost!",
	ToppingBenefits = {
		["ParticleEffect"] = "zfs_energetic",
		["SpeedBoost"] = 10
	},
	ToppingBenefit_Duration = 25,
	ConsumInfo = "You feel high on Energy!",
	Ranks_consume = {},

	Job_consume = {}
})

AddTopping({
	Name = "Helium",
	ExtraPrice = 9000,
	Icon = nil,
	Model = "models/Items/combine_rifle_ammo01.mdl",
	mScale = 0.4,
	Info = "Makes you feel light headed.",
	ToppingBenefits = {
		["AntiGravity"] = 50
	},
	ToppingBenefit_Duration = 30,
	ConsumInfo = "You feel very light!",
	Ranks_consume = {},
	Ranks_create = {},
	Job_consume = {}
})

AddTopping({
	Name = "Cough Syrup",
	ExtraPrice = 8500,
	Icon = nil,
	Model = "models/Items/HealthKit.mdl",
	mScale = 0.2,
	Info = "Needs no prescription.",
	ToppingBenefits = {
		["Health"] = 25
	},
	ToppingBenefit_Duration = 0,
	ConsumInfo = "You feel very Healthy!",
	Ranks_consume = {},
	Ranks_create = {},
	Job_consume = {}
})

AddTopping({
	Name = "CTD",
	ExtraPrice = 9000,
	Icon = nil,
	Model = "models/Items/battery.mdl",
	mScale = 0.5,
	Info = "Thats one of these new Cell Tarning Devices.",
	ToppingBenefits = {
		["Ghost"] = 25
	},
	ToppingBenefit_Duration = 30,
	ConsumInfo = "You feel almost invisible!",
	Ranks_consume = {}
})

--addons/zeros_methlab_1.6.4/lua/zmlab/sh/zmlab_materials.lua:
AddCSLuaFile()
zmlab = zmlab or {}

zmlab.default_materials = zmlab.default_materials or {}

zmlab.default_colors = zmlab.default_colors or {}

zmlab.default_colors["CircleColor"] = Color( 0, 200, 255, 255)
zmlab.default_colors["TextColor"] = Color( 255, 255, 255, 255)

zmlab.default_colors["methsludge"] = Color(0, 150, 255)

zmlab.default_colors["dirt01"] = Color(197, 218, 231)
zmlab.default_colors["dirt02"] = Color(45, 74, 92)

zmlab.default_colors["white01"] = Color( 255, 255, 255, 255)
zmlab.default_colors["white02"] = Color( 255, 255, 255, 1)
zmlab.default_colors["white03"] = Color( 255, 255, 255, 50)

zmlab.default_colors["black01"] = Color( 50, 50, 50, 255)
zmlab.default_colors["black02"] = Color(0, 0, 0,75)

zmlab.default_colors["grey01"] = Color( 75, 75, 75, 255)

zmlab.default_colors["yellow01"] = Color(255, 255, 0, 255)

zmlab.default_colors["green01"] = Color(0, 200, 0)
zmlab.default_colors["green02"] = Color(0, 150, 0)

zmlab.default_colors["blue01"] = Color(98, 149, 193)

--addons/zeros_methlab_1.6.4/lua/zmlab/cl/zmlab_fonts.lua:
return gluapack()()
--lua/advdupe2/file_browser.lua:
--[[
	Title: Adv. Dupe 2 File Browser

	Desc: Displays and interfaces with duplication files.

	Author: TB

	Version: 1.0
]]

local History = {}
local Narrow = {}

local switch = true
local count = 0

local function AddHistory(txt)
	txt = string.lower(txt)
	local char1 = txt[1]
	local char2
	for i = 1, #History do
		char2 = History[i][1]
		if (char1 == char2) then
			if (History[i] == txt) then
				return
			end
		elseif (char1 < char2) then
			break
		end
	end

	table.insert(History, txt)
	table.sort(History, function(a, b) return a < b end)
end

local function NarrowHistory(txt, last)
	txt = string.lower(txt)
	local temp = {}
	if (last <= #txt and last ~= 0 and #txt ~= 1) then
		for i = 1, #Narrow do
			if (Narrow[i][last + 1] == txt[last + 1]) then
				table.insert(temp, Narrow[i])
			elseif (Narrow[i][last + 1] ~= '') then
				break
			end
		end
	else
		local char1 = txt[1]
		local char2
		for i = 1, #History do
			char2 = History[i][1]
			if (char1 == char2) then
				if (#txt > 1) then
					for k = 2, #txt do
						if (txt[k] ~= History[i][k]) then
							break
						end
						if (k == #txt) then
							table.insert(temp, History[i])
						end
					end
				else
					table.insert(temp, History[i])
				end
			elseif (char1 < char2) then
				break
			end
		end
	end

	Narrow = temp
end

local function tableSortNodes(tbl)
    for k, v in ipairs(tbl) do tbl[k] = {string.lower(v.Label:GetText()), v} end
    table.sort(tbl, function(a,b) return a[1]<b[1] end)
    for k, v in ipairs(tbl) do tbl[k] = v[2] end
end

local BROWSERPNL = {}
AccessorFunc(BROWSERPNL, "m_bBackground", "PaintBackground", FORCE_BOOL)
AccessorFunc(BROWSERPNL, "m_bgColor", "BackgroundColor")
Derma_Hook(BROWSERPNL, "Paint", "Paint", "Panel")
Derma_Hook(BROWSERPNL, "PerformLayout", "Layout", "Panel")

local setbrowserpnlsize
local function SetBrowserPnlSize(self, x, y)
	setbrowserpnlsize(self, x, y)
	self.pnlCanvas:SetWide(x)
	self.pnlCanvas.VBar:SetUp(y, self.pnlCanvas:GetTall())
end

function BROWSERPNL:Init()
	setbrowserpnlsize = self.SetSize
	self.SetSize = SetBrowserPnlSize
	self.pnlCanvas = vgui.Create("advdupe2_browser_tree", self)

	self:SetPaintBackground(true)
	self:SetPaintBackgroundEnabled(false)
	self:SetPaintBorderEnabled(false)
	self:SetBackgroundColor(self:GetSkin().text_bright)
end

function BROWSERPNL:OnVScroll(iOffset)
	self.pnlCanvas:SetPos(0, iOffset)
end

derma.DefineControl("advdupe2_browser_panel", "AD2 File Browser", BROWSERPNL, "Panel")

local BROWSER = {}
AccessorFunc(BROWSER, "m_pSelectedItem", "SelectedItem")
Derma_Hook(BROWSER, "Paint", "Paint", "Panel")

local origSetTall
local function SetTall(self, val)
	origSetTall(self, val)
	self.VBar:SetUp(self:GetParent():GetTall(), self:GetTall())
end

function BROWSER:Init()
	self:SetTall(0)
	origSetTall = self.SetTall
	self.SetTall = SetTall

	self.VBar = vgui.Create("DVScrollBar", self:GetParent())
	self.VBar:Dock(RIGHT)
	self.Nodes = 0
	self.ChildrenExpanded = {}
	self.ChildList = self
	self.m_bExpanded = true
	self.Folders = {}
	self.Files = {}
	self.LastClick = CurTime()
end

local function GetNodePath(node)
	local path = node.Label:GetText()
	local area = 0
	local name = ""
	node = node.ParentNode
	if (not node.ParentNode) then
		if (path == "-Public-") then
			area = 1
		elseif (path == "-Advanced Duplicator 1-") then
			area = 2
		end
		return "", area
	end

	while (true) do

		name = node.Label:GetText()
		if (name == "-Advanced Duplicator 2-") then
			break
		elseif (name == "-Public-") then
			area = 1
			break
		elseif (name == "-Advanced Duplicator 1-") then
			area = 2
			break
		end
		path = name .. "/" .. path
		node = node.ParentNode
	end

	return path, area
end

function BROWSER:DoNodeLeftClick(node)
	if (self.m_pSelectedItem == node and CurTime() - self.LastClick <= 0.25) then -- Check for double click
		if (node.Derma.ClassName == "advdupe2_browser_folder") then
			if (node.Expander) then
				node:SetExpanded() -- It's a folder, expand/collapse it
			end
		else
			AdvDupe2.UploadFile(GetNodePath(node))
		end
	else
		self:SetSelected(node) -- A node was clicked, select it
	end
	self.LastClick = CurTime()
end

local function AddNewFolder(node)
	local Controller = node.Control:GetParent():GetParent()
	local name = Controller.FileName:GetValue()
	local char = string.match(name, "[^%w_ ]")
	if char then
		AdvDupe2.Notify("Name contains invalid character ("..char..")!", NOTIFY_ERROR)
		Controller.FileName:SelectAllOnFocus(true)
		Controller.FileName:OnGetFocus()
		Controller.FileName:RequestFocus()
		return
	end
	if (name == "" or name == "Folder_Name...") then
		AdvDupe2.Notify("Name is blank!", NOTIFY_ERROR)
		Controller.FileName:SelectAllOnFocus(true)
		Controller.FileName:OnGetFocus()
		Controller.FileName:RequestFocus()
		return
	end
	local path, area = GetNodePath(node)
	if (area == 0) then
		path = AdvDupe2.DataFolder .. "/" .. path .. "/" .. name
	elseif (area == 1) then
		path = AdvDupe2.DataFolder .. "/=Public=/" .. path .. "/" .. name
	else
		path = "adv_duplicator/" .. path .. "/" .. name
	end

	if (file.IsDir(path, "DATA")) then
		AdvDupe2.Notify("Folder name already exists.", NOTIFY_ERROR)
		Controller.FileName:SelectAllOnFocus(true)
		Controller.FileName:OnGetFocus()
		Controller.FileName:RequestFocus()
		return
	end
	file.CreateDir(path)

	local Folder = node:AddFolder(name)
	node.Control:Sort(node)

	if (not node.m_bExpanded) then
		node:SetExpanded()
	end

	node.Control:SetSelected(Folder)
	if (Controller.Expanded) then
		AdvDupe2.FileBrowser:Slide(false)
	end
end

local function CollapseChildren(node)
	node.m_bExpanded = false
	if (node.Expander) then
		node.Expander:SetExpanded(false)
		node.ChildList:SetTall(0)
		for i = 1, #node.ChildrenExpanded do
			CollapseChildren(node.ChildrenExpanded[i])
		end
		node.ChildrenExpanded = {}
	end
end

local function CollapseParentsComplete(node)
	if (not node.ParentNode.ParentNode) then
		node:SetExpanded(false)
		return
	end
	CollapseParentsComplete(node.ParentNode)
end

function AdvDupe2.GetFilename(path, overwrite)
	if not overwrite and file.Exists(path .. ".txt", "DATA") then
		for i = 1, AdvDupe2.FileRenameTryLimit do
			local p = string.format("%s_%03d.txt", path, i)
			if not file.Exists(p, "DATA") then
				return p
			end
		end
		return false
	end
	return path .. ".txt"
end

local function GetFullPath(node)
	local path, area = GetNodePath(node)
	if (area == 0) then
		path = AdvDupe2.DataFolder .. "/" .. path .. "/"
	elseif (area == 1) then

	else
		path = "adv_duplicator/" .. path .. "/"
	end
	return path
end

local function GetNodeRoot(node)
	local Root
	while (true) do
		if (not node.ParentNode.ParentNode) then
			Root = node
			break
		end
		node = node.ParentNode
	end
	return Root
end

local function RenameFileCl(node, name)
	local path, area = GetNodePath(node)
	local File, FilePath, tempFilePath = "", "", ""
	if (area == 0) then
		tempFilePath = AdvDupe2.DataFolder .. "/" .. path
	elseif (area == 1) then
		tempFilePath = AdvDupe2.DataFolder .. "/=Public=/" .. path
	elseif (area == 2) then
		tempFilePath = "adv_duplicator/" .. path
	end

	File = file.Read(tempFilePath .. ".txt")
	FilePath = AdvDupe2.GetFilename(
		string.sub(tempFilePath, 1, #tempFilePath - #node.Label:GetText()) .. name)

	if (not FilePath) then
		AdvDupe2.Notify("Rename limit exceeded, could not rename.", NOTIFY_ERROR)
		return
	end
	file.Write(FilePath, File)
	if (file.Exists(FilePath, "DATA")) then
		file.Delete(tempFilePath .. ".txt")
		local NewName = string.Explode("/", FilePath)
		NewName = string.sub(NewName[#NewName], 1, -5)
		node.Label:SetText(NewName)
		node.Label:SizeToContents()
		AdvDupe2.Notify("File renamed to " .. NewName)
	else
		AdvDupe2.Notify("File was not renamed.", NOTIFY_ERROR)
	end

	node.Control:Sort(node.ParentNode)
end

local function MoveFileClient(node)
	if (not node) then
		AdvDupe2.Notify("Select a folder to move the file to.", NOTIFY_ERROR)
		return
	end
	if (node.Derma.ClassName == "advdupe2_browser_file") then
		AdvDupe2.Notify("You muse select a folder as a destination.", NOTIFY_ERROR)
		return
	end
	local base = AdvDupe2.DataFolder
	local ParentNode

	local node2 = node.Control.ActionNode
	local path, area = GetNodePath(node2)
	local path2, area2 = GetNodePath(node)

	if (area ~= area2 or path == path2) then
		AdvDupe2.Notify("Cannot move files between these directories.", NOTIFY_ERROR)
		return
	end
	if (area == 2) then base = "adv_duplicator" end

	local savepath = AdvDupe2.GetFilename(
						 base .. "/" .. path2 .. "/" .. node2.Label:GetText())
	local OldFile = base .. "/" .. path .. ".txt"

	local ReFile = file.Read(OldFile)
	file.Write(savepath, ReFile)
	file.Delete(OldFile)
	local name2 = string.Explode("/", savepath)
	name2 = string.sub(name2[#name2], 1, -5)
	node2.Control:RemoveNode(node2)
	node2 = node:AddFile(name2)
	node2.Control:Sort(node)
	AdvDupe2.FileBrowser:Slide(false)
	AdvDupe2.FileBrowser.Info:SetVisible(false)
end

local function DeleteFilesInFolders(path)
	local files, folders = file.Find(path .. "*", "DATA")

	for k, v in pairs(files) do file.Delete(path .. v) end

	for k, v in pairs(folders) do DeleteFilesInFolders(path .. v .. "/") end

	file.Delete(path)
end

local function SearchNodes(node, name)
	local tab = {}
	for k, v in pairs(node.Files) do
		if (string.find(string.lower(v.Label:GetText()), name)) then
			table.insert(tab, v)
		end
	end

	for k, v in pairs(node.Folders) do
		for i, j in pairs(SearchNodes(v, name)) do
			table.insert(tab, j)
		end
	end

	return tab
end

local function Search(node, name)
	local pnFileBr = AdvDupe2.FileBrowser
	pnFileBr.Search = vgui.Create("advdupe2_browser_panel", pnFileBr)
	pnFileBr.Search:SetPos(pnFileBr.Browser:GetPos())
	pnFileBr.Search:SetSize(pnFileBr.Browser:GetSize())
	pnFileBr.Search.pnlCanvas.Search = true
	pnFileBr.Browser:SetVisible(false)
	local Files = SearchNodes(node, name)
	tableSortNodes(Files)
	for k, v in pairs(Files) do
		pnFileBr.Search.pnlCanvas:AddFile(v.Label:GetText()).Ref = v
	end
end

function BROWSER:DoNodeRightClick(node)
	self:SetSelected(node)

	local parent = self:GetParent():GetParent()
	parent.FileName:KillFocus()
	parent.Desc:KillFocus()
	local Menu = DermaMenu()
	local root = GetNodeRoot(node).Label:GetText()
	if (node.Derma.ClassName == "advdupe2_browser_file") then
		if (node.Control.Search) then
			Menu:AddOption("Open", function()
				AdvDupe2.UploadFile(GetNodePath(node.Ref))
			end)
			Menu:AddOption("Preview", function()
				local ReadPath, ReadArea = GetNodePath(node.Ref)
				if (ReadArea == 0) then
					ReadPath = AdvDupe2.DataFolder .. "/" .. ReadPath .. ".txt"
				elseif (ReadArea == 1) then
					ReadPath = AdvDupe2.DataFolder .. "/-Public-/" .. ReadPath .. ".txt"
				else
					ReadPath = "adv_duplicator/" .. ReadPath .. ".txt"
				end
				if (not file.Exists(ReadPath, "DATA")) then
					AdvDupe2.Notify("File does not exist", NOTIFY_ERROR)
					return
				end

				local read = file.Read(ReadPath)
				local name = string.Explode("/", ReadPath)
				name = name[#name]
				name = string.sub(name, 1, #name - 4)
				local success, dupe, info, moreinfo = AdvDupe2.Decode(read)
				if (success) then
					AdvDupe2.LoadGhosts(dupe, info, moreinfo, name, true)
				end
			end)
		else
			Menu:AddOption("Open", function()
				AdvDupe2.UploadFile(GetNodePath(node))
			end)
			Menu:AddOption("Preview", function()
				local ReadPath, ReadArea = GetNodePath(node)
				if (ReadArea == 0) then
					ReadPath = AdvDupe2.DataFolder .. "/" .. ReadPath .. ".txt"
				elseif (ReadArea == 1) then
					ReadPath = AdvDupe2.DataFolder .. "/-Public-/" .. ReadPath .. ".txt"
				else
					ReadPath = "adv_duplicator/" .. ReadPath .. ".txt"
				end
				if (not file.Exists(ReadPath, "DATA")) then
					AdvDupe2.Notify("File does not exist", NOTIFY_ERROR)
					return
				end

				local read = file.Read(ReadPath)
				local name = string.Explode("/", ReadPath)
				name = name[#name]
				name = string.sub(name, 1, #name - 4)
				local success, dupe, info, moreinfo = AdvDupe2.Decode(read)
				if (success) then
					AdvDupe2.LoadGhosts(dupe, info, moreinfo, name, true)
				end
			end)
			Menu:AddSpacer()
			Menu:AddOption("Rename", function()
				if (parent.Expanding) then return end
				parent.Submit:SetMaterial("icon16/page_edit.png")
				parent.Submit:SetTooltip("Rename File")
				parent.Desc:SetVisible(false)
				parent.Info:SetVisible(false)
				parent.FileName.FirstChar = true
				parent.FileName.PrevText = parent.FileName:GetValue()
				parent.FileName:SetVisible(true)
				parent.FileName:SetText(node.Label:GetText())
				parent.FileName:SelectAllOnFocus(true)
				parent.FileName:OnMousePressed()
				parent.FileName:RequestFocus()
				parent.Expanding = true
				AdvDupe2.FileBrowser:Slide(true)
				parent.Submit.DoClick = function()
					local name = parent.FileName:GetValue()
					if (name == "") then
						AdvDupe2.Notify("Name field is blank.", NOTIFY_ERROR)
						parent.FileName:SelectAllOnFocus(true)
						parent.FileName:OnGetFocus()
						parent.FileName:RequestFocus()
						return
					end
					AddHistory(name)
					RenameFileCl(node, name)
					AdvDupe2.FileBrowser:Slide(false)
				end
				parent.FileName.OnEnter = parent.Submit.DoClick
			end)
			Menu:AddOption("Move File", function()
				parent.Submit:SetMaterial("icon16/page_paste.png")
				parent.Submit:SetTooltip("Move File")
				parent.FileName:SetVisible(false)
				parent.Desc:SetVisible(false)
				parent.Info:SetText(
					"Select the folder you want to move \nthe File to.")
				parent.Info:SizeToContents()
				parent.Info:SetVisible(true)
				AdvDupe2.FileBrowser:Slide(true)
				node.Control.ActionNode = node
				parent.Submit.DoClick = function()
					MoveFileClient(node.Control.m_pSelectedItem)
				end
			end)
			Menu:AddOption("Delete", function()
				parent.Submit:SetMaterial("icon16/bin_empty.png")
				parent.Submit:SetTooltip("Delete File")
				parent.FileName:SetVisible(false)
				parent.Desc:SetVisible(false)
				if (#node.Label:GetText() > 22) then
					parent.Info:SetText(
						'Are you sure that you want to delete \nthe FILE, "' ..
							node.Label:GetText() .. '" \nfrom your CLIENT?')
				else
					parent.Info:SetText(
						'Are you sure that you want to delete \nthe FILE, "' ..
							node.Label:GetText() .. '" from your CLIENT?')
				end
				parent.Info:SizeToContents()
				parent.Info:SetVisible(true)
				AdvDupe2.FileBrowser:Slide(true)
				parent.Submit.DoClick = function()
					local path, area = GetNodePath(node)
					if (area == 1) then
						path = "-Public-/" .. path
					end
					if (area == 2) then
						path = "adv_duplicator/" .. path .. ".txt"
					else
						path = AdvDupe2.DataFolder .. "/" .. path .. ".txt"
					end
					node.Control:RemoveNode(node)
					file.Delete(path)
					AdvDupe2.FileBrowser:Slide(false)
				end
			end)
		end
	else
		if (root ~= "-Advanced Duplicator 1-") then
			Menu:AddOption("Save", function()
				if (parent.Expanding) then return end
				parent.Submit:SetMaterial("icon16/page_save.png")
				parent.Submit:SetTooltip("Save Duplication")
				if (parent.FileName:GetValue() == "Folder_Name...") then
					parent.FileName:SetText("File_Name...")
				end
				parent.Desc:SetVisible(true)
				parent.Info:SetVisible(false)
				parent.FileName.FirstChar = true
				parent.FileName.PrevText = parent.FileName:GetValue()
				parent.FileName:SetVisible(true)
				parent.FileName:SelectAllOnFocus(true)
				parent.FileName:OnMousePressed()
				parent.FileName:RequestFocus()
				node.Control.ActionNode = node
				parent.Expanding = true
				AdvDupe2.FileBrowser:Slide(true)
				parent.Submit.DoClick = function()
					local name = parent.FileName:GetValue()
					if (name == "" or name == "File_Name...") then
						AdvDupe2.Notify("Name field is blank.", NOTIFY_ERROR)
						parent.FileName:SelectAllOnFocus(true)
						parent.FileName:OnGetFocus()
						parent.FileName:RequestFocus()
						return
					end
					local desc = parent.Desc:GetValue()
					if (desc == "Description...") then
						desc = ""
					end
					AdvDupe2.SavePath = GetFullPath(node) .. name
					AddHistory(name)
					if (game.SinglePlayer()) then
						RunConsoleCommand("AdvDupe2_SaveFile", name, desc, GetNodePath(node))
					else
						RunConsoleCommand("AdvDupe2_SaveFile", name)
					end
					AdvDupe2.FileBrowser:Slide(false)
				end
				parent.FileName.OnEnter =
					function()
						parent.FileName:KillFocus()
						parent.Desc:SelectAllOnFocus(true)
						parent.Desc.OnMousePressed()
						parent.Desc:RequestFocus()
					end
				parent.Desc.OnEnter = parent.Submit.DoClick
			end)
		end
		Menu:AddOption("New Folder", function()
			if (parent.Expanding) then return end
			parent.Submit:SetMaterial("icon16/folder_add.png")
			parent.Submit:SetTooltip("Add new folder")
			if (parent.FileName:GetValue() == "File_Name...") then
				parent.FileName:SetText("Folder_Name...")
			end
			parent.Desc:SetVisible(false)
			parent.Info:SetVisible(false)
			parent.FileName.FirstChar = true
			parent.FileName.PrevText = parent.FileName:GetValue()
			parent.FileName:SetVisible(true)
			parent.FileName:SelectAllOnFocus(true)
			parent.FileName:OnMousePressed()
			parent.FileName:RequestFocus()
			parent.Expanding = true
			AdvDupe2.FileBrowser:Slide(true)
			parent.Submit.DoClick = function() AddNewFolder(node) end
			parent.FileName.OnEnter = parent.Submit.DoClick
		end)
		Menu:AddOption("Search", function()
			parent.Submit:SetMaterial("icon16/find.png")
			parent.Submit:SetTooltip("Search Files")
			if (parent.FileName:GetValue() == "Folder_Name...") then
				parent.FileName:SetText("File_Name...")
			end
			parent.Desc:SetVisible(false)
			parent.Info:SetVisible(false)
			parent.FileName.FirstChar = true
			parent.FileName.PrevText = parent.FileName:GetValue()
			parent.FileName:SetVisible(true)
			parent.FileName:SelectAllOnFocus(true)
			parent.FileName:OnMousePressed()
			parent.FileName:RequestFocus()
			parent.Expanding = true
			AdvDupe2.FileBrowser:Slide(true)
			parent.Submit.DoClick = function()
				Search(node, string.lower(parent.FileName:GetValue()))
				AddHistory(parent.FileName:GetValue())
				parent.FileName:SetVisible(false)
				parent.Submit:SetMaterial("icon16/arrow_undo.png")
				parent.Submit:SetTooltip("Return to Browser")
				parent.Info:SetVisible(true)
				parent.Info:SetText(#parent.Search.pnlCanvas.Files ..
										' files found searching for, "' ..
										parent.FileName:GetValue() .. '"')
				parent.Info:SizeToContents()
				parent.Submit.DoClick = function()
					parent.Search:Remove()
					parent.Search = nil
					parent.Browser:SetVisible(true)
					AdvDupe2.FileBrowser:Slide(false)
					parent.Cancel:SetVisible(true)
				end
				parent.Cancel:SetVisible(false)
			end
			parent.FileName.OnEnter = parent.Submit.DoClick
		end)
		if (node.Label:GetText()[1] ~= "-") then
			Menu:AddOption("Delete", function()
				parent.Submit:SetMaterial("icon16/bin_empty.png")
				parent.Submit:SetTooltip("Delete Folder")
				parent.FileName:SetVisible(false)
				parent.Desc:SetVisible(false)
				if (#node.Label:GetText() > 22) then
					parent.Info:SetText(
						'Are you sure that you want to delete \nthe FOLDER, "' ..
							node.Label:GetText() .. '" \nfrom your CLIENT?')
				else
					parent.Info:SetText(
						'Are you sure that you want to delete \nthe FOLDER, "' ..
							node.Label:GetText() .. '" from your CLIENT?')
				end
				parent.Info:SizeToContents()
				parent.Info:SetVisible(true)
				AdvDupe2.FileBrowser:Slide(true)
				parent.Submit.DoClick = function()
					local path, area = GetNodePath(node)
					if (area == 1) then
						path = "-Public-/" .. path
					end
					if (area == 2) then
						path = "adv_duplicator/" .. path .. "/"
					else
						path = AdvDupe2.DataFolder .. "/" .. path .. "/"
					end
					node.Control:RemoveNode(node)
					DeleteFilesInFolders(path)
					AdvDupe2.FileBrowser:Slide(false)
				end
			end)
		end
	end
	if (not node.Control.Search) then
		Menu:AddSpacer()
		Menu:AddOption("Collapse Folder", function()
			if (node.ParentNode.ParentNode) then
				node.ParentNode:SetExpanded(false)
			end
		end)
		Menu:AddOption("Collapse Root", function() CollapseParentsComplete(node) end)
		if (parent.Expanded) then
			Menu:AddOption("Cancel Action", function() parent.Cancel:DoClick() end)
		end
	end

	Menu:Open()
end

local function CollapseParents(node, val)
	if (not node) then return end
	node.ChildList:SetTall(node.ChildList:GetTall() - val)
	CollapseParents(node.ParentNode, val)
end

function BROWSER:RemoveNode(node)
	local parent = node.ParentNode
	parent.Nodes = parent.Nodes - 1
	if (node.IsFolder) then
		if (node.m_bExpanded) then
			CollapseParents(parent, node.ChildList:GetTall() + 20)
			for i = 1, #parent.ChildrenExpanded do
				if (node == parent.ChildrenExpanded[i]) then
					table.remove(parent.ChildrenExpanded, i)
					break
				end
			end
		elseif (parent.m_bExpanded) then
			CollapseParents(parent, 20)
		end
		for i = 1, #parent.Folders do
			if (node == parent.Folders[i]) then
				table.remove(parent.Folders, i)
			end
		end
		node.ChildList:Remove()
		node:Remove()
	else
		for i = 1, #parent.Files do
			if (node == parent.Files[i]) then
				table.remove(parent.Files, i)
			end
		end
		CollapseParents(parent, 20)
		node:Remove()
		if (#parent.Files == 0 and #parent.Folders == 0) then
			parent.Expander:Remove()
			parent.Expander = nil
			parent.m_bExpanded = false
		end
	end
	if (self.VBar.Scroll > self.VBar.CanvasSize) then
		self.VBar:SetScroll(self.VBar.Scroll)
	end
	if (self.m_pSelectedItem) then
		self.m_pSelectedItem = nil
	end
end

function BROWSER:OnMouseWheeled(dlta)
	return self.VBar:OnMouseWheeled(dlta)
end

function BROWSER:AddFolder(text)
	local node = vgui.Create("advdupe2_browser_folder", self)
	node.Control = self

	node.Offset = 0
	node.ChildrenExpanded = {}
	node.Icon:SetPos(18, 1)
	node.Label:SetPos(44, 0)
	node.Label:SetText(text)
	node.Label:SizeToContents()
	node.ParentNode = self
	node.IsFolder = true
	self.Nodes = self.Nodes + 1
	node.Folders = {}
	node.Files = {}
	table.insert(self.Folders, node)
	self:SetTall(self:GetTall() + 20)

	return node
end

function BROWSER:AddFile(text)
	local node = vgui.Create("advdupe2_browser_file", self)
	node.Control = self
	node.Offset = 0
	node.Icon:SetPos(18, 1)
	node.Label:SetPos(44, 0)
	node.Label:SetText(text)
	node.Label:SizeToContents()
	node.ParentNode = self
	self.Nodes = self.Nodes + 1
	table.insert(self.Files, node)
	self:SetTall(self:GetTall() + 20)

	return node
end

function BROWSER:Sort(node)
	tableSortNodes(node.Folders)
	tableSortNodes(node.Files)

	for i = 1, #node.Folders do
		node.Folders[i]:SetParent(nil)
		node.Folders[i]:SetParent(node.ChildList)
		node.Folders[i].ChildList:SetParent(nil)
		node.Folders[i].ChildList:SetParent(node.ChildList)
	end
	for i = 1, #node.Files do
		node.Files[i]:SetParent(nil)
		node.Files[i]:SetParent(node.ChildList)
	end
end

function BROWSER:SetSelected(node)
	if (IsValid(self.m_pSelectedItem)) then
		self.m_pSelectedItem:SetSelected(false)
	end
	self.m_pSelectedItem = node
	if (node) then node:SetSelected(true) end
end

local function ExpandParents(node, val)
	if (not node) then return end
	node.ChildList:SetTall(node.ChildList:GetTall() + val)
	ExpandParents(node.ParentNode, val)
end

function BROWSER:Expand(node)
	node.ChildList:SetTall(node.Nodes * 20)
	table.insert(node.ParentNode.ChildrenExpanded, node)
	ExpandParents(node.ParentNode, node.Nodes * 20)
end

local function ExtendParents(node)
	if (not node) then return end
	node.ChildList:SetTall(node.ChildList:GetTall() + 20)
	ExtendParents(node.ParentNode)
end

function BROWSER:Extend(node)
	node.ChildList:SetTall(node.ChildList:GetTall() + 20)
	ExtendParents(node.ParentNode)
end

function BROWSER:Collapse(node)
	CollapseParents(node.ParentNode, node.ChildList:GetTall())

	for i = 1, #node.ParentNode.ChildrenExpanded do
		if (node.ParentNode.ChildrenExpanded[i] == node) then
			table.remove(node.ParentNode.ChildrenExpanded, i)
			break
		end
	end
	CollapseChildren(node)
end

function BROWSER:RenameNode(name)
	self.ActionNode.Label:SetText(name)
	self.ActionNode.Label:SizeToContents()
	self:Sort(self.ActionNode.ParentNode)
end

function BROWSER:MoveNode(name)
	self:RemoveNode(self.ActionNode)
	self.ActionNode2:AddFile(name)
	self:Sort(self.ActionNode2)
end

function BROWSER:DeleteNode()
	self:RemoveNode(self.ActionNode)
end

derma.DefineControl("advdupe2_browser_tree", "AD2 File Browser", BROWSER, "Panel")

local FOLDER = {}

AccessorFunc(FOLDER, "m_bBackground", "PaintBackground", FORCE_BOOL)
AccessorFunc(FOLDER, "m_bgColor", "BackgroundColor")

Derma_Hook(FOLDER, "Paint", "Paint", "Panel")

function FOLDER:Init()
	self:SetMouseInputEnabled(true)

	self:SetTall(20)
	self:SetPaintBackground(true)
	self:SetPaintBackgroundEnabled(false)
	self:SetPaintBorderEnabled(false)
	self:SetBackgroundColor(Color(0, 0, 0, 0))

	self.Icon = vgui.Create("DImage", self)
	self.Icon:SetImage("icon16/folder.png")

	self.Icon:SizeToContents()

	self.Label = vgui.Create("DLabel", self)
	self.Label:SetDark(true)

	self.m_bExpanded = false
	self.Nodes = 0
	self.ChildrenExpanded = {}

	self:Dock(TOP)

	self.ChildList = vgui.Create("Panel", self:GetParent())
	self.ChildList:Dock(TOP)
	self.ChildList:SetTall(0)
end

local function ExpandNode(self)
	self:GetParent():SetExpanded()
end

function FOLDER:AddFolder(text)
	if (self.Nodes == 0) then
		self.Expander = vgui.Create("DExpandButton", self)
		self.Expander.DoClick = ExpandNode
		self.Expander:SetPos(self.Offset, 2)
	end

	local node = vgui.Create("advdupe2_browser_folder", self.ChildList)
	node.Control = self.Control

	node.Offset = self.Offset + 20

	node.Icon:SetPos(18 + node.Offset, 1)
	node.Label:SetPos(44 + node.Offset, 0)
	node.Label:SetText(text)
	node.Label:SizeToContents()
	node.Label:SetDark(true)
	node.ParentNode = self
	node.IsFolder = true
	node.Folders = {}
	node.Files = {}

	self.Nodes = self.Nodes + 1
	table.insert(self.Folders, node)

	if (self.m_bExpanded) then
		self.Control:Extend(self)
	end

	return node
end

function FOLDER:AddFile(text)
	if (self.Nodes == 0) then
		self.Expander = vgui.Create("DExpandButton", self)
		self.Expander.DoClick = ExpandNode
		self.Expander:SetPos(self.Offset, 2)
	end

	local node = vgui.Create("advdupe2_browser_file", self.ChildList)
	node.Control = self.Control
	node.Offset = self.Offset + 20
	node.Icon:SetPos(18 + node.Offset, 1)
	node.Label:SetPos(44 + node.Offset, 0)
	node.Label:SetText(text)
	node.Label:SizeToContents()
	node.Label:SetDark(true)
	node.ParentNode = self

	self.Nodes = self.Nodes + 1
	table.insert(self.Files, node)

	if (self.m_bExpanded) then
		self.Control:Extend(self)
	end

	return node
end

function FOLDER:SetExpanded(bool)
	if (not self.Expander) then return end
	if (bool == nil) then
		self.m_bExpanded = not self.m_bExpanded
	else
		self.m_bExpanded = bool
	end
	self.Expander:SetExpanded(self.m_bExpanded)
	if (self.m_bExpanded) then
		self.Control:Expand(self)
	else
		self.Control:Collapse(self)
	end
end

function FOLDER:SetSelected(bool)
	if (bool) then
		self:SetBackgroundColor(self:GetSkin().bg_color_bright)
	else
		self:SetBackgroundColor(Color(0, 0, 0, 0))
	end
end

function FOLDER:OnMousePressed(code)
	if (code == 107) then
		self.Control:DoNodeLeftClick(self)
	elseif (code == 108) then
		self.Control:DoNodeRightClick(self)
	end
end

derma.DefineControl("advdupe2_browser_folder", "AD2 Browser Folder node", FOLDER, "Panel")

local FILE = {}

AccessorFunc(FILE, "m_bBackground", "PaintBackground", FORCE_BOOL)
AccessorFunc(FILE, "m_bgColor", "BackgroundColor")
Derma_Hook(FILE, "Paint", "Paint", "Panel")

function FILE:Init()
	self:SetMouseInputEnabled(true)

	self:SetTall(20)
	self:SetPaintBackground(true)
	self:SetPaintBackgroundEnabled(false)
	self:SetPaintBorderEnabled(false)
	self:SetBackgroundColor(Color(0, 0, 0, 0))

	self.Icon = vgui.Create("DImage", self)
	self.Icon:SetImage("icon16/page.png")

	self.Icon:SizeToContents()

	self.Label = vgui.Create("DLabel", self)
	self.Label:SetDark(true)

	self:Dock(TOP)
end

function FILE:SetSelected(bool)
	if (bool) then
		self:SetBackgroundColor(self:GetSkin().bg_color_bright)
	else
		self:SetBackgroundColor(Color(0, 0, 0, 0))
	end
end

function FILE:OnMousePressed(code)
	if (code == 107) then
		self.Control:DoNodeLeftClick(self)
	elseif (code == 108) then
		self.Control:DoNodeRightClick(self)
	end
end

derma.DefineControl("advdupe2_browser_file", "AD2 Browser File node", FILE, "Panel")

local PANEL = {}
AccessorFunc(PANEL, "m_bBackground", "PaintBackground", FORCE_BOOL)
AccessorFunc(PANEL, "m_bgColor", "BackgroundColor")
Derma_Hook(PANEL, "Paint", "Paint", "Panel")
Derma_Hook(PANEL, "PerformLayout", "Layout", "Panel")

function PANEL:PerformLayout()
	if (self:GetWide() == self.LastX) then return end
	local x = self:GetWide()

	if (self.Search) then
		self.Search:SetWide(x)
	end

	self.Browser:SetWide(x)
	local x2, y2 = self.Browser:GetPos()
	local BtnX = x - self.Help:GetWide() - 5
	self.Help:SetPos(BtnX, 3)
	BtnX = BtnX - self.Refresh:GetWide() - 5
	self.Refresh:SetPos(BtnX, 3)

	BtnX = x - self.Submit:GetWide() - 15
	self.Cancel:SetPos(BtnX, self.Browser:GetTall() + 20)
	BtnX = BtnX - self.Submit:GetWide() - 5
	self.Submit:SetPos(BtnX, self.Browser:GetTall() + 20)

	self.FileName:SetWide(BtnX - 10)
	self.FileName:SetPos(5, self.Browser:GetTall() + 20)
	self.Desc:SetWide(x - 10)
	self.Desc:SetPos(5, self.Browser:GetTall() + 39)
	self.Info:SetPos(5, self.Browser:GetTall() + 20)

	self.LastX = x
end

local pnlorigsetsize
local function PanelSetSize(self, x, y)
	if (not self.LaidOut) then
		pnlorigsetsize(self, x, y)

		self.Browser:SetSize(x, y - 20)
		self.Browser:SetPos(0, 20)

		if (self.Search) then
			self.Search:SetSize(x, y - 20)
			self.Search:SetPos(0, 20)
		end

		self.LaidOut = true
	else
		pnlorigsetsize(self, x, y)
	end

end

local function PurgeFiles(path, curParent)
	local files, directories = file.Find(path .. "*", "DATA")
	if (directories) then
		for k, v in pairs(directories) do
			curParent = curParent:AddFolder(v)
			PurgeFiles(path .. v .. "/", curParent)
			curParent = curParent.ParentNode
		end
	end

	if (files) then
		for k, v in pairs(files) do
			curParent:AddFile(string.sub(v, 1, #v - 4))
		end
	end
end

local function UpdateClientFiles()

	local pnlCanvas = AdvDupe2.FileBrowser.Browser.pnlCanvas

	for i = 1, 2 do
		if (pnlCanvas.Folders[1]) then
			pnlCanvas:RemoveNode(pnlCanvas.Folders[1])
		end
	end

	PurgeFiles("advdupe2/", pnlCanvas:AddFolder("-Advanced Duplicator 2-"))

	PurgeFiles("adv_duplicator/", pnlCanvas:AddFolder("-Advanced Duplicator 1-"))

	if (pnlCanvas.Folders[2]) then
		if (#pnlCanvas.Folders[2].Folders == 0 and #pnlCanvas.Folders[2].Files == 0) then
			pnlCanvas:RemoveNode(pnlCanvas.Folders[2])
		end

		pnlCanvas.Folders[1]:SetParent(nil)
		pnlCanvas.Folders[1]:SetParent(pnlCanvas.ChildList)
		pnlCanvas.Folders[1].ChildList:SetParent(nil)
		pnlCanvas.Folders[1].ChildList:SetParent(pnlCanvas.ChildList)
	end

end

function PANEL:Init()

	AdvDupe2.FileBrowser = self
	self.Expanded = false
	self.Expanding = false
	self.LastX = 0
	self.LastY = 0
	pnlorigsetsize = self.SetSize
	self.SetSize = PanelSetSize

	self:SetPaintBackground(true)
	self:SetPaintBackgroundEnabled(false)
	self:SetBackgroundColor(self:GetSkin().bg_color_bright)

	self.Browser = vgui.Create("advdupe2_browser_panel", self)
	UpdateClientFiles()
	self.Refresh = vgui.Create("DImageButton", self)
	self.Refresh:SetMaterial("icon16/arrow_refresh.png")
	self.Refresh:SizeToContents()
	self.Refresh:SetTooltip("Refresh Files")
	self.Refresh.DoClick = function(button) UpdateClientFiles() end

	self.Help = vgui.Create("DImageButton", self)
	self.Help:SetMaterial("icon16/help.png")
	self.Help:SizeToContents()
	self.Help:SetTooltip("Help Section")
	self.Help.DoClick = function(btn)
		local Menu = DermaMenu()
		Menu:AddOption("Bug Reporting", function()
			gui.OpenURL("https://github.com/wiremod/advdupe2/issues")
		end)
		Menu:AddOption("Controls", function()
			gui.OpenURL("https://github.com/wiremod/advdupe2/wiki/Controls")
		end)
		Menu:AddOption("Commands", function()
			gui.OpenURL(
				"https://github.com/wiremod/advdupe2/wiki/Server-settings")
		end)
		Menu:Open()
	end

	self.Submit = vgui.Create("DImageButton", self)
	self.Submit:SetMaterial("icon16/page_save.png")
	self.Submit:SizeToContents()
	self.Submit:SetTooltip("Confirm Action")
	self.Submit.DoClick = function()
		self.Expanding = true
		AdvDupe2.FileBrowser:Slide(false)
	end

	self.Cancel = vgui.Create("DImageButton", self)
	self.Cancel:SetMaterial("icon16/cross.png")
	self.Cancel:SizeToContents()
	self.Cancel:SetTooltip("Cancel Action")
	self.Cancel.DoClick = function()
		self.Expanding = true
		AdvDupe2.FileBrowser:Slide(false)
	end

	self.FileName = vgui.Create("DTextEntry", self)
	self.FileName:SetAllowNonAsciiCharacters(true)
	self.FileName:SetText("File_Name...")
	self.FileName.Last = 0

	self.FileName.OnEnter = function()
		self.FileName:KillFocus()
		self.Desc:SelectAllOnFocus(true)
		self.Desc.OnMousePressed()
		self.Desc:RequestFocus()
	end
	self.FileName.OnMousePressed = function()
		self.FileName:OnGetFocus()
		if (self.FileName:GetValue() == "File_Name..." or
			self.FileName:GetValue() == "Folder_Name...") then
			self.FileName:SelectAllOnFocus(true)
		end
	end
	self.FileName:SetUpdateOnType(true)
	self.FileName.OnTextChanged = function()

		if (self.FileName.FirstChar) then
			if (string.lower(self.FileName:GetValue()[1] or "") == string.lower(input.LookupBinding("menu") or "q")) then
				self.FileName:SetText(self.FileName.PrevText)
				self.FileName:SelectAll()
				self.FileName.FirstChar = false
			else
				self.FileName.FirstChar = false
			end
		end

		local new, changed = self.FileName:GetValue():gsub("[^%w_ ]", "")
		if changed > 0 then
			self.FileName:SetText(new)
			self.FileName:SetCaretPos(#new)
		end
		if (#self.FileName:GetValue() > 0) then
			NarrowHistory(self.FileName:GetValue(), self.FileName.Last)
			local options = {}
			if (#Narrow > 4) then
				for i = 1, 4 do table.insert(options, Narrow[i]) end
			else
				options = Narrow
			end
			if (#options ~= 0 and #self.FileName:GetValue() ~= 0) then
				self.FileName.HistoryPos = 0
				self.FileName:OpenAutoComplete(options)
				self.FileName.Menu.Attempts = 1
				if (#Narrow > 4) then
					self.FileName.Menu:AddOption("...", function() end)
				end
			elseif (IsValid(self.FileName.Menu)) then
				self.FileName.Menu:Remove()
			end
		end
		self.FileName.Last = #self.FileName:GetValue()
	end
	self.FileName.OnKeyCodeTyped = function(txtbox, code)
		txtbox:OnKeyCode(code)

		if (code == KEY_ENTER and not txtbox:IsMultiline() and txtbox:GetEnterAllowed()) then
			if (txtbox.HistoryPos == 5 and txtbox.Menu:ChildCount() == 5) then
				if ((txtbox.Menu.Attempts + 1) * 4 < #Narrow) then
					for i = 1, 4 do
						txtbox.Menu:GetChild(i):SetText(Narrow[i + txtbox.Menu.Attempts * 4])
					end
				else
					txtbox.Menu:GetChild(5):Remove()
					for i = 4, (txtbox.Menu.Attempts * 4 - #Narrow) * -1 + 1, -1 do
						txtbox.Menu:GetChild(i):Remove()
					end

					for i = 1, #Narrow - txtbox.Menu.Attempts * 4 do
						txtbox.Menu:GetChild(i):SetText(Narrow[i + txtbox.Menu.Attempts * 4])
					end
				end
				txtbox.Menu:ClearHighlights()
				txtbox.Menu:HighlightItem(txtbox.Menu:GetChild(1))
				txtbox.HistoryPos = 1
				txtbox.Menu.Attempts = txtbox.Menu.Attempts + 1
				return true
			end

			if (IsValid(txtbox.Menu)) then
				txtbox.Menu:Remove()
			end
			txtbox:FocusNext()
			txtbox:OnEnter()
			txtbox.HistoryPos = 0
		end

		if (txtbox.m_bHistory or IsValid(txtbox.Menu)) then
			if (code == KEY_UP) then
				txtbox.HistoryPos = txtbox.HistoryPos - 1;
				if (txtbox.HistoryPos ~= -1 or txtbox.Menu:ChildCount() ~= 5) then
					txtbox:UpdateFromHistory()
				else
					txtbox.Menu:ClearHighlights()
					txtbox.Menu:HighlightItem(txtbox.Menu:GetChild(5))
					txtbox.HistoryPos = 5
				end
			end
			if (code == KEY_DOWN or code == KEY_TAB) then
				txtbox.HistoryPos = txtbox.HistoryPos + 1;
				if (txtbox.HistoryPos ~= 5 or txtbox.Menu:ChildCount() ~= 5) then
					txtbox:UpdateFromHistory()
				else
					txtbox.Menu:ClearHighlights()
					txtbox.Menu:HighlightItem(txtbox.Menu:GetChild(5))
				end
			end

		end
	end
	self.FileName.OnValueChange = function()
		if (self.FileName:GetValue() ~= "File_Name..." and
			self.FileName:GetValue() ~= "Folder_Name...") then
			local new, changed = self.FileName:GetValue():gsub("[^%w_ ]", "")
			if changed > 0 then
				self.FileName:SetText(new)
				self.FileName:SetCaretPos(#new)
			end
		end
	end

	self.Desc = vgui.Create("DTextEntry", self)
	self.Desc.OnEnter = self.Submit.DoClick
	self.Desc:SetText("Description...")
	self.Desc.OnMousePressed = function()
		self.Desc:OnGetFocus()
		if (self.Desc:GetValue() == "Description...") then
			self.Desc:SelectAllOnFocus(true)
		end
	end

	self.Info = vgui.Create("DLabel", self)
	self.Info:SetVisible(false)

end

function PANEL:Slide(expand)
	if (expand) then
		if (self.Expanded) then
			self:SetTall(self:GetTall() - 40)
			self.Expanded = false
		else
			self:SetTall(self:GetTall() + 5)
		end
	else
		if (not self.Expanded) then
			self:SetTall(self:GetTall() + 40)
			self.Expanded = true
		else
			self:SetTall(self:GetTall() - 5)
		end
	end
	count = count + 1
	if (count < 9) then
		timer.Simple(0.01, function() self:Slide(expand) end)
	else
		if (expand) then
			self.Expanded = true
		else
			self.Expanded = false
		end
		self.Expanding = false
		count = 0
	end
end

function PANEL:GetFullPath(node)
	return GetFullPath(node)
end

function PANEL:GetNodePath(node)
	return GetNodePath(node)
end

if (game.SinglePlayer()) then
	net.Receive("AdvDupe2_AddFile", function()
		local asvNode = AdvDupe2.FileBrowser.AutoSaveNode
		local actNode = AdvDupe2.FileBrowser.Browser.pnlCanvas.ActionNode
		if (net.ReadBool()) then
			if (IsValid(asvNode)) then
				local name = net.ReadString()
				for iD = 1, #asvNode.Files do
					if (name == asvNode.Files[i]) then return end
				end
				asvNode:AddFile(name)
				asvNode.Control:Sort(asvNode)
			end
		else
			actNode:AddFile(net.ReadString())
			actNode.Control:Sort(actNode)
		end
	end)
end

vgui.Register("advdupe2_browser", PANEL, "Panel")

--lua/advdupe2/cl_file.lua:
local function AdvDupe2_ReceiveFile(len, ply)
	local AutoSave = net.ReadUInt(8) == 1

	net.ReadStream(nil, function(data)
		AdvDupe2.RemoveProgressBar()
		if(!data)then
			AdvDupe2.Notify("File was not saved!",NOTIFY_ERROR,5)
			return
		end
		local path
		if AutoSave then
			if(LocalPlayer():GetInfo("advdupe2_auto_save_overwrite")~="0")then
				path = AdvDupe2.GetFilename(AdvDupe2.AutoSavePath, true)
			else
				path = AdvDupe2.GetFilename(AdvDupe2.AutoSavePath)
			end
		else
			path = AdvDupe2.GetFilename(AdvDupe2.SavePath)
		end

		local dupefile = file.Open(path, "wb", "DATA")
		if(!dupefile)then
			AdvDupe2.Notify("File was not saved!",NOTIFY_ERROR,5)
			return
		end
		dupefile:Write(data)
		dupefile:Close()
		
		local errored = false
		if(LocalPlayer():GetInfo("advdupe2_debug_openfile")=="1")then
			if(not file.Exists(path, "DATA"))then AdvDupe2.Notify("File does not exist", NOTIFY_ERROR) return end
			
			local readFile = file.Open(path, "rb", "DATA")
			if not readFile then AdvDupe2.Notify("File could not be read", NOTIFY_ERROR) return end
			local readData = readFile:Read(readFile:Size())
			readFile:Close()
			local success,dupe,info,moreinfo = AdvDupe2.Decode(readData)
			if(success)then
				AdvDupe2.Notify("DEBUG CHECK: File successfully opens. No EOF errors.")
			else
				AdvDupe2.Notify("DEBUG CHECK: " .. dupe, NOTIFY_ERROR)
				errored = true
			end
		end
		
		local filename = string.StripExtension(string.GetFileFromFilename( path ))
		if(AutoSave)then
			if(IsValid(AdvDupe2.FileBrowser.AutoSaveNode))then
				local add = true
				for i=1, #AdvDupe2.FileBrowser.AutoSaveNode.Files do
					if(filename==AdvDupe2.FileBrowser.AutoSaveNode.Files[i].Label:GetText())then
						add=false
						break
					end
				end
				if(add)then
					AdvDupe2.FileBrowser.AutoSaveNode:AddFile(filename)
					AdvDupe2.FileBrowser.Browser.pnlCanvas:Sort(AdvDupe2.FileBrowser.AutoSaveNode)
				end
			end
		else
			AdvDupe2.FileBrowser.Browser.pnlCanvas.ActionNode:AddFile(filename)
			AdvDupe2.FileBrowser.Browser.pnlCanvas:Sort(AdvDupe2.FileBrowser.Browser.pnlCanvas.ActionNode)
		end
		if(!errored)then
			AdvDupe2.Notify("File successfully saved!",NOTIFY_GENERIC, 5)
		end
	end)
end
net.Receive("AdvDupe2_ReceiveFile", AdvDupe2_ReceiveFile)

local uploading = nil
function AdvDupe2.UploadFile(ReadPath, ReadArea)
	if uploading then AdvDupe2.Notify("Already opening file, please wait.", NOTIFY_ERROR) return end
	if(ReadArea==0)then
		ReadPath = AdvDupe2.DataFolder.."/"..ReadPath..".txt"
	elseif(ReadArea==1)then
		ReadPath = AdvDupe2.DataFolder.."/-Public-/"..ReadPath..".txt"
	else
		ReadPath = "adv_duplicator/"..ReadPath..".txt"
	end
	
	if(not file.Exists(ReadPath, "DATA"))then AdvDupe2.Notify("File does not exist", NOTIFY_ERROR) return end
	
	local read = file.Read(ReadPath)
	if not read then AdvDupe2.Notify("File could not be read", NOTIFY_ERROR) return end
	local name = string.Explode("/", ReadPath)
	name = name[#name]
	name = string.sub(name, 1, #name-4)
	
	local success, dupe, info, moreinfo = AdvDupe2.Decode(read)
	if(success)then
		net.Start("AdvDupe2_ReceiveFile")
		net.WriteString(name)
		uploading = net.WriteStream(read, function()
			uploading = nil
			AdvDupe2.File = nil
			AdvDupe2.RemoveProgressBar()
		end)
		net.SendToServer()
		
		AdvDupe2.LoadGhosts(dupe, info, moreinfo, name)
	else
		AdvDupe2.Notify("File could not be decoded. ("..dupe..") Upload Canceled.", NOTIFY_ERROR)
	end
end

--addons/cityworker/lua/autorun/client/cityworker_client.lua:
CITYWORKER = CITYWORKER or {}

/*
    Action Display
    HUD that displays the progress of the player's current action.
*/

local MAT_WRENCH = Material( "cityworker/wrench.png" )

net.Receive( "CITYWORKER.StartAction", function()
    local desc = net.ReadString()
    local time = net.ReadUInt( 8 )

    local startTime = CurTime()
    local targetTime = CurTime() + time
    local deltaTime = targetTime - startTime

    hook.Add( "HUDPaint", "CITYWORKER.Action.HUDPaint", function()
        local x, y, w, h = ScrW() / 2 - ScrW() / 6, ScrH() / 4, ScrW() / 3, 60 * ( ScrH() / 1080 )
    
        surface.SetDrawColor( 0, 0, 0, 200 )
        surface.DrawRect( x, y, w, h )
    
        surface.SetDrawColor( 20, 150, 200 )
        surface.DrawRect( x + 5, y + 5, ( w - 10 ) * ( ( CurTime() - startTime ) / ( deltaTime ) ), h - 10 )
    
        draw.SimpleText( desc, "Trebuchet24", x + ( w / 2 ), y + ( h / 2 ) - 10, Color( 255, 255, 255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        draw.SimpleText( CITYWORKER.Config.Language["CANCEL"], "Trebuchet18", x + ( w / 2 ), y + ( h / 2 ) + 12, Color( 255, 255, 255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
    end )

    timer.Create( "CITYWORKER.Action.Timer", time, 1, function()
        hook.Remove( "HUDPaint", "CITYWORKER.Action.HUDPaint" )
    end )
end )

net.Receive( "CITYWORKER.StopAction", function()
    hook.Remove( "HUDPaint", "CITYWORKER.Action.HUDPaint" )

    if timer.Exists( "CITYWORKER.Action.Timer" ) then
        timer.Remove( "CITYWORKER.Action.Timer" )
    end
end )

/*
    Task Notification
    HUD that displays the position of their next task.
*/

net.Receive( "CITYWORKER.NotifyTask", function()
    local pos = net.ReadVector()

    hook.Add( "HUDPaint", "CITYWORKER.Task.HUDPaint", function()
        local screenPos = pos:ToScreen()

        surface.SetDrawColor( 255, 255, 255 )
        surface.SetMaterial( MAT_WRENCH )
        surface.DrawTexturedRect( screenPos.x - 16, screenPos.y - 16, 32, 32 )

        draw.SimpleTextOutlined( math.ceil( ( LocalPlayer():GetPos():Distance( pos ) / 16 ) / 3.28084 ).."m", "Trebuchet24", screenPos.x, screenPos.y + 16, Color( 255, 255, 255 ), TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP, 1, Color( 0, 0, 0 ) )
    end )
end )

net.Receive( "CITYWORKER.RemoveTask", function()
    hook.Remove( "HUDPaint", "CITYWORKER.Task.HUDPaint" )
end )
--addons/bb_alttab/lua/autorun/client/cl_bbminimized.lua:
return gluapack()()
--addons/partysystem/lua/autorun/client/cl_partyhalo.lua:
hook.Add("InitPostEntity", "partyholo", function()
    local ply = LocalPlayer()
    local renk = Color(0,255,0,255)
    local halod = {}
    timer.Create("partyholotable", 3, 0, function()
        halod = {}
    if party.halos and GetConVar( "party_lowend" ):GetInt() == 1 then 
        local getparty = ply:GetParty()
        if parties != nil and parties[getparty] != nil and parties[getparty].members != nil then
            for v,k in pairs(parties[getparty].members) do
                local member = player.GetBySteamID64(k)
                if member !=  false and member != ply and member:Alive() then
                    table.insert(halod, member)
                end
            end
        end
        renk = Color(GetConVar( "color_phalo_r" ):GetInt(),GetConVar( "color_phalo_g" ):GetInt(),GetConVar( "color_phalo_b" ):GetInt(),GetConVar( "color_phalo_a" ):GetInt())
    end
    end)
    
    hook.Add( "PreDrawHalos", "drawpartyhalo", function() 
    
            halo.Add(halod, renk, 2, 2, 4)
   
    end)
    

    /*
    hook.Add( "PostDrawOpaqueRenderables", "paintspritesparty", function()
        if party.halos and GetConVar( "party_lowend" ):GetInt() == 1 then
            if parties != nil and parties[ply:GetParty()] != nil and parties[ply:GetParty()].members != nil then
                for v,k in pairs (parties[ply:GetParty()].members) do
                    local member = player.GetBySteamID64(k)
                    if member !=  false and member != LocalPlayer() and member:Alive() then
                        local partymemberpos = member:GetPos()
                        cam.Start3D2D(partymemberpos + Vector(0,0,1), Angle( 0, 0, 0 ), 1) 
                            surface.DrawCircle( 0, 0, 20 ,Color(GetConVar( "color_phalo_r" ):GetInt(),GetConVar( "color_phalo_g" ):GetInt(),GetConVar( "color_phalo_b" ):GetInt(),GetConVar( "color_phalo_a" ):GetInt()) )
                        cam.End3D2D()
                    end
                end
            end
        end
    end )
    */
end)

net.Receive("mitajan_hud", function()
    local bool = net.ReadBool()

    if bool == true then 
        hook.Add( "PostDrawOpaqueRenderables", "mithud_sprites", function()
        for i, v in player.Iterator() do
            local member = v
            if member != LocalPlayer() and member:Alive() and member:GetNWBool("mitekip", false) == true then
                local partymemberpos = member:GetPos()
                cam.Start3D2D(partymemberpos + Vector(0,0,1), Angle( 0, 0, 0 ), 1) 
                    surface.DrawCircle( 0, 0, 20 ,Color(0,77,230,155) )
                cam.End3D2D()
            end
        end
        end )
    end 

    if bool == false then 
        hook.Remove( "PostDrawOpaqueRenderables", "mithud_sprites")
    end 
end)
--addons/permaprops/lua/autorun/client/cl_permaload.lua:
return gluapack()()
--addons/executioner/lua/autorun/client/executioner_placement.lua:
return gluapack()()
--addons/partysystem/lua/autorun/client/partytabs_panel.lua:
return gluapack()()
--lua/vgui/bvgui/form.lua:
return gluapack()()
--lua/vgui/bvgui/gauge.lua:
local PANEL = {}

function PANEL:Init()
	self.Color = Color(192,57,43)
	self.Progress = 0
	self.ProgressAngle = 0

	self.ProgressCircle = GAS_NewCircle(CIRCLE_OUTLINED)
	self.ProgressCircle:SetAngles(180,360)
	self.ProgressCircle:SetThickness(20)
	self.ProgressCircle:SetVertices(64)

	self.ProgressBackgroundCircle = GAS_NewCircle(CIRCLE_OUTLINED)
	self.ProgressBackgroundCircle:SetAngles(180,360)
	self.ProgressBackgroundCircle:SetThickness(20)
	self.ProgressBackgroundCircle:SetVertices(64)

	self.BackgroundCircle = GAS_NewCircle(CIRCLE_FILLED)
	self.BackgroundCircle:SetAngles(180,360)
	self.BackgroundCircle:SetVertices(64)

	self.Text = vgui.Create("DLabel", self)
	self.Text:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "REGULAR", 18))
	self.Text:SetTextColor(COLOR_WHITE)
	self.Text:SetText("")

	self.SubText = vgui.Create("DLabel", self)
	self.SubText:SetVisible(false)
	self.SubText:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "REGULAR", 14))
	self.SubText:SetTextColor(COLOR_WHITE)
	self.SubText:SetText("")
end

function PANEL:SetColor(col_from, col_to)
	if (IsColor(col_from) and col_to == nil) then
		self.Color = col_from
		self.ColorFrom = nil
		self.ColorTo = nil
	elseif (IsColor(col_from) and IsColor(col_to)) then
		self.Color = table.Copy(col_from)
		self.ColorFrom = col_from
		self.ColorTo = col_to
	end
end

function PANEL:SetProgress(progress)
	self.Progress = math.Clamp(progress, 0, 100)
end

function PANEL:SetText(txt)
	self.Text:SetText(txt)
end

function PANEL:SetSubText(txt)
	if (txt == nil or #txt == 0) then
		self.SubText:SetVisible(false)
	else
		self.SubText:SetVisible(true)
		self.SubText:SetText(txt)
	end
end

function PANEL:PerformLayout(w, h)
	self.Text:SizeToContents()

	if (self.SubText:IsVisible()) then
		self.SubText:SizeToContents()

		self.Text:SetPos((w - self.Text:GetWide()) / 2, ((w - self.Text:GetTall()) / 2) - 20 - (self.SubText:GetTall() / 2))
		self.SubText:SetPos((w - self.SubText:GetWide()) / 2, ((w - self.Text:GetTall()) / 2) - 20 + (self.Text:GetTall() / 2))
	else
		self.Text:SetPos((w - self.Text:GetWide()) / 2, ((w - self.Text:GetTall()) / 2) - 20)
	end
end

function PANEL:Paint(w,h)
	draw.NoTexture()

	local r = w / 2

	surface.SetDrawColor(45,45,45,255)
	self.ProgressBackgroundCircle:SetPos(w / 2, w / 2)
	self.ProgressBackgroundCircle:SetRadius(r)
	self.ProgressBackgroundCircle()

	local progress_frac = (self.Progress / 100)
	if (self.ColorFrom and self.ColorTo) then
		self.Color.r = Lerp(0.05, self.Color.r, self.ColorFrom.r + ((self.ColorTo.r - self.ColorFrom.r) * progress_frac))
		self.Color.g = Lerp(0.05, self.Color.g, self.ColorFrom.g + ((self.ColorTo.g - self.ColorFrom.g) * progress_frac))
		self.Color.b = Lerp(0.05, self.Color.b, self.ColorFrom.b + ((self.ColorTo.b - self.ColorFrom.b) * progress_frac))
	end
	self.ProgressAngle = Lerp(0.05, self.ProgressAngle, progress_frac * 180)

	surface.SetDrawColor(self.Color)
	self.ProgressCircle:SetAngles(180, 180 + self.ProgressAngle)
	self.ProgressCircle:SetPos(w / 2, w / 2)
	self.ProgressCircle:SetRadius(r)
	self.ProgressCircle()

	surface.SetDrawColor(60,60,60,255)
	self.BackgroundCircle:SetPos(w / 2, w / 2)
	self.BackgroundCircle:SetRadius(r - 20)
	self.BackgroundCircle()
end

derma.DefineControl("bVGUI.Gauge", nil, PANEL, "DPanel")
--lua/vgui/bvgui/httplogo.lua:
file.CreateDir("gas_http_png")

local PANEL = {}

local logo_mat = Material("gmodadminsuite/gmodadminsuite.vtf")
function PANEL:Init()
	local this = self

	self.Directory = "gas_http_png"

	self:Dock(TOP)
	self:SetTall(128 + 20 + 10 + 25 + 10)

	self.Logo = vgui.Create("DImage", self)
	self.Logo:SetSize(128,128)
	self.Logo:SetMaterial(logo_mat)

	self.LoadingOverlay = vgui.Create("bVGUI.LoadingPanel", self)
	self.LoadingOverlay:Dock(FILL)
	self.LoadingOverlay:SetLoading(false)

	self.URLContainer = vgui.Create("bVGUI.BlankPanel", self)
	self.URLContainer:Dock(TOP)
	self.URLContainer:DockMargin(0,128 + 20 + 20,0,0)
	self.URLContainer:SetTall(25)
	function self.URLContainer:PerformLayout()
		this.URLField:Center()
	end

	self.URLField = vgui.Create("bVGUI.TextEntry", self.URLContainer)
	self.URLField:SetPlaceholderText("URL...")
	self.URLField:SetSize(128 + 20 + 40, 25)
	function self.URLField:OnLoseFocus()
		self:ResetValidity()
		if (self:GetValue() == "") then
			this.Logo:SetVisible(true)
			this.Logo:SetMaterial(logo_mat)
			return
		end

		this.Logo:SetVisible(false)
		this.LoadingOverlay:SetLoading(true)

		local crc = util.CRC(os.date("%d%m%Y") .. self:GetValue()) .. ".png"

		http.Fetch(self:GetValue(), function(body, size, headers, code)
			this.LoadingOverlay:SetLoading(false)
			if (body:find("^.PNG")) then
				file.Write(this.Directory .. "/" .. crc, body)
				this.Logo:SetVisible(true)
				this.Logo:SetMaterial(Material("data/" .. this.Directory .. "/" .. crc))
				self:SetValid(true)
			else
				self:SetInvalid(true)
			end
			if (this.Always) then
				this:Always()
			end
			if (this.Success) then
				this:Success()
			end
		end, function()
			this.LoadingOverlay:SetLoading(false)
			self:SetInvalid(true)
			if (this.Always) then
				this:Always()
			end
			if (this.Failure) then
				this:Failure()
			end
		end)
	end
end

function PANEL:Paint(w,h)
	surface.SetDrawColor(0,0,0,200)
	surface.DrawRect((w - (128 + 20)) / 2,0,128 + 20,128 + 20)

	if (self.URLField._Invalid) then
		surface.SetDrawColor(255,0,0,100)
		surface.DrawRect((w - 128) / 2,10,128,128)
	end
end

function PANEL:GetURL()
	if (this.URLField._Valid) then
		return self.URLField:GetValue()
	else
		return false
	end
end

function PANEL:SetPlaceholderText(text)
	self.URLField:SetPlaceholderText(text)
end

function PANEL:SetDirectory(path)
	self.Directory = path
	file.CreateDir(path)
end

function PANEL:PerformLayout()
	self.Logo:AlignTop(10)
	self.Logo:CenterHorizontal()
end

derma.DefineControl("bVGUI.HTTPImageInput", nil, PANEL, "bVGUI.BlankPanel")
--lua/vgui/bvgui/numberwang.lua:
local PANEL = {}

function PANEL:Init()
	self.NumberWang = vgui.Create("DNumberWang", self)
	self.NumberWang:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "REGULAR", 14))
end

function PANEL:CorrectSizing()
	local y = 0
	y = y + self.NumberWang:GetTall()
	if (IsValid(self.Label)) then
		y = y + 10 + self.Label:GetTall()
		self.NumberWang:AlignTop(10 + self.Label:GetTall())
	end
	if (IsValid(self.HelpLabel)) then
		y = y + 10 + self.HelpLabel:GetTall()
		self.HelpLabel:AlignTop(10 + self.Label:GetTall() + self.NumberWang:GetTall() + 10)
	end
	self:SetTall(y)
end

function PANEL:SetText(text)
	self.Label = vgui.Create("DLabel", self)
	self.Label:SetContentAlignment(4)
	self.Label:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 16))
	self.Label:SetTextColor(bVGUI.COLOR_WHITE)
	self.Label:SetText(text)
	self.Label:SizeToContents()

	self:CorrectSizing()
end

function PANEL:SetHelpText(text)
	self.HelpLabel = vgui.Create("DLabel", self)
	self.HelpLabel:SetTextColor(Color(200,200,200))
	self.HelpLabel:SetAutoStretchVertical(true)
	self.HelpLabel:SetWrap(true)
	self.HelpLabel:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "REGULAR", 16))
	self.HelpLabel:SetText(text)
	local this = self
	function self.HelpLabel:PerformLayout()
		this:CorrectSizing()
	end
	self:CorrectSizing()
end

function PANEL:PerformLayout()
	if (IsValid(self.HelpLabel)) then
		self.HelpLabel:SetWide(self:GetWide() - 10)
	end
end

derma.DefineControl("bVGUI.NumberWang", nil, PANEL, "bVGUI.BlankPanel")
--lua/vgui/bvgui/switch.lua:
return gluapack()()
--lua/vgui/bvgui/table.lua:
bVGUI.TABLE_COLUMN_GROW   = 0
bVGUI.TABLE_COLUMN_SHRINK = 1

--/// bVGUI.Table ///--

local PANEL = {}

function PANEL:Init()
	self.Columns = {}
	self.Rows = {}
	self.ColumnWidths = {}

	self.ColumnContainer = vgui.Create("DPanel", self)
	self.ColumnContainer:Dock(TOP)
	self.ColumnContainer.Paint = nil

	self.RowContainer = vgui.Create("bVGUI.ScrollPanel", self)
	self.RowContainer:Dock(FILL)
	self.RowContainer.Paint = nil

	self.TextSize = 14
	self.RowContainer.OnMouseWheeled_Old = self.RowContainer.OnMouseWheeled
	function self.RowContainer:OnMouseWheeled(delta)
		if (input.IsKeyDown(KEY_LCONTROL)) then
			local tbl = self:GetParent()
			if (delta > 0) then
				tbl.TextSize = math.min(tbl.TextSize + 1, 18)
			else
				tbl.TextSize = math.max(tbl.TextSize - 1, 10)
			end
			for _,row in ipairs(tbl.Rows) do
				row.Font = bVGUI.FONT(bVGUI.FONT_RUBIK, "REGULAR", tbl.TextSize)
			end
			tbl:InvalidateLayout(true)
			tbl:InvalidateChildren(true)
		else
			self:OnMouseWheeled_Old(delta)
		end
	end

	self.NoData = vgui.Create("DLabel", self)
	self.NoData:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "REGULAR", 16))
	self.NoData:SetTextColor(bVGUI.COLOR_WHITE)
	self.NoData:SetText(bVGUI.L("no_data"))
	self.NoData:SizeToContents()

	self.NoResultsFound = vgui.Create("DLabel", self)
	self.NoResultsFound:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "REGULAR", 16))
	self.NoResultsFound:SetTextColor(bVGUI.COLOR_WHITE)
	self.NoResultsFound:SetText(bVGUI.L("no_results_found"))
	self.NoResultsFound:SizeToContents()
	self.NoResultsFound:SetVisible(false)
end

function PANEL:SetRowCursor(cursor)
	self.RowCursor = cursor
end
function PANEL:GetRowCursor()
	return self.RowCursor
end

function PANEL:Clear()
	for _,v in ipairs(self.Rows) do
		v:Remove()
	end
	self.Rows = {}
	self:InvalidateLayout(true)
end

function PANEL:AddColumn(name, sizing, alignment, color)
	local column = vgui.Create("bVGUI.Table_Column", self.ColumnContainer)
	column:SetText(name)
	column:SetColor(color or Color(51, 80, 114))
	column:SetSizing(sizing or bVGUI.TABLE_COLUMN_GROW)
	column:SetAlignment(alignment or TEXT_ALIGN_LEFT)
	column:SetDrawBorder(false)

	table.insert(self.Columns, column)

	return column
end

function PANEL:AddRow(...)
	local row = vgui.Create("bVGUI.Table_Row", self.RowContainer)
	row.RowIndex = table.insert(self.Rows, row)
	row.LabelsData = {...}
	row:InvalidateLayout(true)
	if (self.RowCursor) then
		row:SetCursor(self.RowCursor)
	end
	self:InvalidateLayout(true)

	return row
end

function PANEL:RemoveRow(index_or_row)
	local row
	if (type(index_or_row) == "number") then
		row = self.Rows[index_or_row]
	elseif (IsValid(index_or_row)) then
		row = index_or_row
	else
		return
	end
	self.Rows[row.RowIndex] = nil
	row:Remove()
	local new_rows = {}
	local i = 0
	for _,v in pairs(self.Rows) do
		i = i + 1
		table.insert(new_rows, v)
		v.RowIndex = i
	end
	self.Rows = new_rows
	self:InvalidateLayout(true)
end

function PANEL:RerenderMarkups()
	for _,row in pairs(self.Rows) do
		row.LabelsMarkup = nil
	end
end

function PANEL:PerformLayout()
	self.ColumnWidths = {}

	local cur_space = self:GetWide()
	if (self.IconLayout) then cur_space = cur_space - 16 - 10 end
	local grow_count = 0
	for i,v in pairs(self.Columns) do
		if (v.Sizing == bVGUI.TABLE_COLUMN_SHRINK) then
			v:SizeToContents()
			v.Label:SizeToContents()
			local width = v.Label:GetWide() + 26
			for _,row in ipairs(self.Rows) do
				if (row.LabelsMarkup) then
					width = math.max(width, row.LabelsMarkup[i]:GetWidth() + 14)
				end
			end
			v:SetWide(width)
			v:InvalidateLayout(true)
			cur_space = cur_space - width
			self.ColumnWidths[i] = width
		else
			grow_count = grow_count + 1
		end
	end

	local grow_width = cur_space / grow_count
	for i,v in pairs(self.Columns) do
		if (v.Sizing == bVGUI.TABLE_COLUMN_GROW) then
			v:SetWide(grow_width)
			self.ColumnWidths[i] = grow_width
			for _,row in ipairs(self.Rows) do
				if (row.LabelsMarkup) then
					row.LabelsMarkup[i] = markup.Parse("<colour=225,225,225><font=" .. row.Font .. ">" .. row.LabelsData[i] .. "</font></colour>", grow_width - 14)
				end
			end
		end
	end

	self.NoData:Center()
	self.NoResultsFound:Center()
end

function PANEL:SortRows()
	local size_y = 0
	local no_rows = true
	for i,v in pairs(self.Rows) do
		if (not v:IsVisible()) then continue end
		v:AlignTop(size_y)
		size_y = size_y + v:GetTall()
		no_rows = false
	end
	self.NoResultsFound.Visible = no_rows
end

function PANEL:Paint(w,h)
	self:LoadingPaint(w,h)
	if (not self.LoadingState or self.LoadingState ~= self:GetLoading()) then
		self.LoadingState = self:GetLoading()
		self.NoData:SetVisible(self:GetLoading() == false and #self.Rows == 0)
	end
	self.NoResultsFound:SetVisible(not self.NoData:IsVisible() and self:GetLoading() ~= true and self.NoResultsFound.Visible)

	surface.SetDrawColor(51, 80, 114)
	surface.DrawRect(0,0,w,23)

	surface.SetDrawColor(31, 48, 68)
	surface.DrawLine(0,23,w,23)
end

derma.DefineControl("bVGUI.Table", nil, PANEL, "bVGUI.LoadingPanel")

--/// bVGUI.Table_Column ///--

local PANEL = {}

function PANEL:Init()
	self:SetCursor("arrow")
	self:Dock(LEFT)
	self:SetDrawBorder(false)
	self.ColumnBorderColor = bVGUI.DarkenColor(self.OriginalBarColor, 0.4)
	self.ColumnSideColor = bVGUI.DarkenColor(self.OriginalBarColor, 0.4)
end

function PANEL:GetSizing()
	return self.Sizing
end
function PANEL:SetSizing(size_enum)
	self.Sizing = size_enum
end

function PANEL:SetAlignment(alignment)
	self.Alignment = alignment
end
function PANEL:GetAlignment(alignment)
	return self.Alignment
end

function PANEL:Paint(w,h)
	surface.SetDrawColor(self.ColumnBorderColor)
	surface.DrawLine(-1,h - 1,w + 1,h - 1)

	surface.SetDrawColor(self.ColumnSideColor)
	surface.DrawLine(w - 1, 0, w - 1, h - 1)

end

derma.DefineControl("bVGUI.Table_Column", nil, PANEL, "bVGUI.Button")

--/// bVGUI.Table_Row ///--

local PANEL = {}

function PANEL:Init()
	self.Table = self:GetParent():GetParent():GetParent()
	self:Dock(TOP)

	self.Font = bVGUI.FONT(bVGUI.FONT_RUBIK, "REGULAR", self.Table.TextSize)
	self.CurrentFont = self.Font
end

local row_1 = Color(39,44,53)
local row_2 = Color(35,40,48)
function PANEL:Paint(w,h)
	if (self.RowIndex % 2 == 0) then
		surface.SetDrawColor(31, 35, 43)
	else
		surface.SetDrawColor(33, 37, 45)
	end
	surface.DrawRect(0,0,w,h)
	if (self.Highlight) then
		surface.SetDrawColor(255,255,0,4)
		surface.DrawRect(0,0,w,h)
	elseif (self:IsHovered()) then
		surface.SetDrawColor(255,255,255,4)
		surface.DrawRect(0,0,w,h)
	end
	if (not self.LabelsMarkup or self.CurrentFont ~= self.Font) then
		self.CurrentFont = self.Font
		self.LabelsMarkup = {}
		for i,v in pairs(self.LabelsData) do
			if (self.Table.Columns[i]:GetSizing() ~= bVGUI.TABLE_COLUMN_SHRINK) then
				self.LabelsMarkup[i] = markup.Parse("<colour=225,225,225><font=" .. self.Font .. ">" .. v .. "</font></colour>", self.Table.ColumnWidths[i] - 14)
			else
				self.LabelsMarkup[i] = markup.Parse("<colour=225,225,225><font=" .. self.Font .. ">" .. v .. "</font></colour>")
			end
		end
	end
	local cumulative = 0
	local tall = self:GetTall()
	local max_height = 0
	for i,v in pairs(self.LabelsMarkup) do
		local l_padding = 0
		if (self.Table.IconLayout) then
			l_padding = 16 + 10
			if (i == 1) then
				l_padding = l_padding - 5
			end
		end
		if (v:GetWidth() > self.Table.ColumnWidths[i]) then
			self.Table:InvalidateLayout(true)
		end
		local alignment = self.Table.Columns[i]:GetAlignment()
		if (alignment == TEXT_ALIGN_CENTER) then
			v:Draw(l_padding + cumulative + (self.Table.ColumnWidths[i] / 2), tall / 2 - v:GetHeight() / 2, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
		elseif (alignment == TEXT_ALIGN_RIGHT) then
			v:Draw(l_padding + cumulative + self.Table.ColumnWidths[i] - 7, tall / 2 - v:GetHeight() / 2, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
		else
			v:Draw(l_padding + 7 + cumulative, tall / 2 - v:GetHeight() / 2, self.Table.Columns[i]:GetAlignment(), TEXT_ALIGN_TOP)
		end
		if (v:GetHeight() + 10 > max_height) then
			max_height = v:GetHeight() + 10
		end
		cumulative = cumulative + self.Table.ColumnWidths[i]
	end
	if (h ~= max_height) then
		self:SetTall(max_height)
	end
end

function PANEL:OnMouseReleased(key_code)
	if (key_code == MOUSE_LEFT) then
		self.Table.SelectedRow = self.RowIndex
		if (self.Table.OnRowClicked) then
			self.Table:OnRowClicked(self, self.CurrentHoveredColumn)
		end
	elseif (key_code == MOUSE_RIGHT) then
		if (self.Table.OnRowRightClicked) then
			self.Table:OnRowRightClicked(self, self.CurrentHoveredColumn)
		end
	end
end

function PANEL:OnCursorMoved(x)
	if (not self.Table.OnColumnHovered) then return end
	local cumulative_width = 0
	local hovered_column = nil
	for i,v in pairs(self.Table.ColumnWidths) do
		if (x >= cumulative_width) then
			hovered_column = i
		else
			break
		end
		cumulative_width = cumulative_width + v
	end
	if (self.CurrentHoveredColumn ~= hovered_column) then
		self.CurrentHoveredColumn = hovered_column
		self.Table:OnColumnHovered(self, hovered_column)
	end
end
function PANEL:OnCursorExited()
	if (not self.Table.OnColumnHovered) then return end
	self.CurrentHoveredColumn = nil
	self.Table:OnColumnHovered(self, nil)
end

function PANEL:SetIcon(path)
	self:SetMaterial(Material(path))
end
function PANEL:SetMaterial(mat)
	self.Table.IconLayout = true
	self.Table.ColumnContainer:DockPadding(16 + 10,0,0,0)
	self.Table.RowContainer:DockPadding(16 + 10,0,0,0)
	if (not IsValid(self.Icon)) then
		self.Icon = vgui.Create("DImage", self)
		self.Icon:SetSize(16,16)
		self.Icon:AlignLeft(5)
		self.Icon:CenterVertical()
	end
	self.Icon:SetMaterial(mat)
end

derma.DefineControl("bVGUI.Table_Row", nil, PANEL, "DPanel")
--lua/vgui/bvgui/vertical_option_selector.lua:
local PANEL = {}

function PANEL:Init()
	self:SetMouseInputEnabled(true)
	self:SetCursor("hand")

	self.Buttons = {}
	self.Color = bVGUI.BUTTON_COLOR_BLUE
	self.BorderColor = bVGUI.DarkenColor(self.Color, 0.4)

	self.SelectedButton = 1
end

function PANEL:SetColor(col)
	self.Color = col
	self.BorderColor = bVGUI.DarkenColor(self.Color, 0.4)
end

function PANEL:SelectButton(index)
	self.SelectedButton = index
end

function PANEL:AddButton(text, color)
	local label = vgui.Create("DLabel", self)
	label:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	label:SetContentAlignment(5)
	label:SetTextColor(bVGUI.COLOR_WHITE)
	label:SetText(text)
	label.BtnColor = color
	label.BtnBorderColor = bVGUI.DarkenColor(color, 0.4)
	table.insert(self.Buttons, label)

	self:SizeButtons()
end

local grey_col = Color(150,150,150)
local dark_grey_col = bVGUI.DarkenColor(grey_col, 0.4)
function PANEL:Paint(w,h)
	draw.RoundedBox(4, 0, 0, w, h, dark_grey_col)
	draw.RoundedBoxEx(4, 0, 0, w, h - 4, grey_col, true, true)

	for i,v in ipairs(self.Buttons) do
		draw.RoundedBox(4, 0, (i * (h / #self.Buttons)) - 4, w, 4, dark_grey_col)
	end

	if (IsValid(self.Buttons[self.SelectedButton])) then
		local btn = self.Buttons[self.SelectedButton]

		if (self.LerpY == nil) then
			self.LerpY = (self.SelectedButton - 1) * (h / #self.Buttons)
		else
			self.LerpY = Lerp(FrameTime() * 10, self.LerpY, (self.SelectedButton - 1) * (h / #self.Buttons))
		end

		if (self.LerpBorderColor == nil) then
			self.LerpBorderColor = Color(btn.BtnBorderColor.r, btn.BtnBorderColor.g, btn.BtnBorderColor.b)
		else
			self.LerpBorderColor.r = Lerp(FrameTime() * 10, self.LerpBorderColor.r, btn.BtnBorderColor.r)
			self.LerpBorderColor.g = Lerp(FrameTime() * 10, self.LerpBorderColor.g, btn.BtnBorderColor.g)
			self.LerpBorderColor.b = Lerp(FrameTime() * 10, self.LerpBorderColor.b, btn.BtnBorderColor.b)
		end

		if (self.LerpColor == nil) then
			self.LerpColor = Color(btn.BtnColor.r, btn.BtnColor.g, btn.BtnColor.b)
		else
			self.LerpColor.r = Lerp(FrameTime() * 10, self.LerpColor.r, btn.BtnColor.r)
			self.LerpColor.g = Lerp(FrameTime() * 10, self.LerpColor.g, btn.BtnColor.g)
			self.LerpColor.b = Lerp(FrameTime() * 10, self.LerpColor.b, btn.BtnColor.b)
		end

		draw.RoundedBoxEx(4, 0, self.LerpY, w, h / #self.Buttons, self.LerpBorderColor, true, true, self.SelectedButton == #self.Buttons, self.SelectedButton == #self.Buttons)
		draw.RoundedBoxEx(4, 0, self.LerpY, w, (h / #self.Buttons) - 4, self.LerpColor, self.SelectedButton == 1, self.SelectedButton == 1)
	end
end

function PANEL:SizeButtons()
	local w = 0
	for _,v in ipairs(self.Buttons) do
		v:SizeToContents()
		if (v:GetWide() > w) then
			w = v:GetWide()
		end
	end
	self:SetWide(w + 20)
	for i,v in ipairs(self.Buttons) do
		v:SetWide(w)
	end
end

function PANEL:PerformLayout(w,h)
	for i,v in ipairs(self.Buttons) do
		v:SetSize(w,h / #self.Buttons)
		v:AlignTop((i - 1) * (h / #self.Buttons) - 2)
	end
end

function PANEL:OnMousePressed(m)
	self.MousePressed = m
end
function PANEL:OnMouseReleased(m)
	if (self.MousePressed == m) then
		if (m == MOUSE_LEFT) then
			local x,y = self:ScreenToLocal(gui.MousePos())
			self.SelectedButton = 1 + math.floor((y / self:GetTall()) * #self.Buttons)
			local btn = self.Buttons[self.SelectedButton]
			if (IsValid(btn)) then
				if (self.OptionChanged) then
					self:OptionChanged(btn:GetText())
				end
			end
		end
	end
end

derma.DefineControl("bVGUI.VerticalOptionSelector", nil, PANEL, "bVGUI.BlankPanel")
--lua/vgui/gas_circles.lua:
/*
	https://github.com/Sneaky-Squid/Circles
	MIT License
*/

local blur = Material("pp/blurscreen")

CIRCLE_FILLED = 0
CIRCLE_OUTLINED = 1
CIRCLE_BLURRED = 2

local CIRCLE = {}
CIRCLE.__index = CIRCLE

CIRCLE.m_iType = CIRCLE_FILLED

CIRCLE.m_iX = 0
CIRCLE.m_iY = 0
CIRCLE.m_iR = 0

CIRCLE.m_iRotation = 0
CIRCLE.m_iThickness = 1
CIRCLE.m_iQuality = 2
CIRCLE.m_iDensity = 3

CIRCLE.m_iStartAngle = 0
CIRCLE.m_iEndAngle = 360

CIRCLE.m_bRotateMat = true

AccessorFunc(CIRCLE, "m_iType", "Type", FORCE_NUMBER)
AccessorFunc(CIRCLE, "m_iR", "Radius", FORCE_NUMBER)
AccessorFunc(CIRCLE, "m_iVertices", "Vertices", FORCE_NUMBER)
AccessorFunc(CIRCLE, "m_iRotation", "Rotation", FORCE_NUMBER)
AccessorFunc(CIRCLE, "m_iThickness", "Thickness", FORCE_NUMBER)
AccessorFunc(CIRCLE, "m_iQuality", "Quality", FORCE_NUMBER)
AccessorFunc(CIRCLE, "m_iDensity", "Density", FORCE_NUMBER)
AccessorFunc(CIRCLE, "m_bRotateMat", "RotateMaterial", FORCE_BOOL)

function CIRCLE:__tostring()
	return string.format("Circle: %p", self)
end

function CIRCLE:SetRadius(r)
	if (self.m_iR == r) then return end

	self.m_iR = r
	self.m_tVertices = nil
	self.m_cInnerCircle = nil
end

function CIRCLE:SetVertices(vertices)
	vertices = math.Clamp(vertices, 3, 360)

	if (self.m_iVertices == vertices) then return end

	self.m_iVertices = vertices
	self.m_iSteps = 360 / vertices

	self.m_tVertices = nil
	self.m_cInnerCircle = nil
end

function CIRCLE:SetRotation(rotation)
	if (self.m_iRotation == rotation) then return end

	self.m_iRotation = rotation
	self.m_tVertices = nil
	self.m_cInnerCircle = nil
end

function CIRCLE:SetThickness(thicc)
	if (self.m_iThickness == thicc) then return end

	self.m_iThickness = thicc
	self.m_cInnerCircle = nil
end

function CIRCLE:SetPos(x, y)
	if (self.m_iX == x and self.m_iY == Y) then return end

	self.m_iX = x
	self.m_iY = y

	self.m_tVertices = nil
	self.m_cInnerCircle = nil
end

function CIRCLE:SetAngles(start, finish)
	if (self.m_iStartAngle == start and self.m_iEndAngle == finish) then return end

	self.m_iStartAngle = math.min(start, finish)
	self.m_iEndAngle = math.max(start, finish)

	self.m_tVertices = nil
	self.m_cInnerCircle = nil
end

function CIRCLE:OffsetVertices(x, y)
	if (not self.m_tVertices) then
		self:Calculate()
	end

	x = x or 0
	y = y or 0

	self.m_iX = self.m_iX + x
	self.m_iY = self.m_iY + y

	for i, v in ipairs(self.m_tVertices) do
		v.x = v.x + x
		v.y = v.y + y
	end

	if (self.m_cInnerCircle) then
		self.m_cInnerCircle:OffsetVertices(x, y)
	end
end

function CIRCLE:Copy()
	return table.Copy(self)
end

function CIRCLE:Calculate()
	local r = self.m_iR
	local x, y = self.m_iX, self.m_iY
	local start, finish = self.m_iStartAngle, self.m_iEndAngle

	local verts, dist = {}, math.Clamp(self.m_iSteps or math.max(8, 360 / (r * math.pi)), 1, 120)

	if (finish - start ~= 360) then
		table.insert(verts, {
			x = x,
			y = y,

			u = 0.5,
			v = 0.5,
		})

		finish = finish + dist
	else
		finish = finish - dist
	end

	for a = start, finish, dist do
		a = math.Clamp(a, start, self.m_iEndAngle)

		local rad = math.rad(a)
		local rot = math.rad(self.m_iRotation)

		table.insert(verts, {
			x = x + math.cos(rad + rot) * r,
			y = y + math.sin(rad + rot) * r,

			u = math.cos(self.m_bRotateMat and rad - rot or rad) / 2 + 0.5,
			v = math.sin(self.m_bRotateMat and rad - rot or rad) / 2 + 0.5,
		})
	end

	self.m_tVertices = verts
end

function CIRCLE:__call(colour, material)
	if (not self.m_tVertices) then
		self:Calculate()
	end

	if (IsColor(colour)) then surface.SetDrawColor(colour) end
	if (TypeID(material) == TYPE_MATERIAL) then surface.SetMaterial(material) elseif (material) then draw.NoTexture() end

	if (self.m_iType == CIRCLE_OUTLINED) then
		if (not self.m_cInnerCircle) then
			local inner = self:Copy()

			inner:SetType(CIRCLE_FILLED)
			inner:SetRadius(self.m_iR - self.m_iThickness)

			self.m_cInnerCircle = inner
		end

		render.ClearStencil()

		render.SetStencilEnable(true)
			render.SetStencilReferenceValue(1)
			render.SetStencilWriteMask(1)
			render.SetStencilTestMask(1)

			render.SetStencilPassOperation(STENCIL_KEEP)
			render.SetStencilCompareFunction(STENCIL_NEVER)
			render.SetStencilFailOperation(STENCIL_REPLACE)
			render.SetStencilZFailOperation(STENCIL_REPLACE)

			self.m_cInnerCircle()

			render.SetStencilFailOperation(STENCIL_KEEP)
			render.SetStencilZFailOperation(STENCIL_KEEP)
			render.SetStencilCompareFunction(STENCIL_GREATER)

			surface.DrawPoly(self.m_tVertices)
		render.SetStencilEnable(false)
	elseif (self.m_iType == CIRCLE_BLURRED) then
		render.ClearStencil()

		render.SetStencilEnable(true)
			render.SetStencilReferenceValue(1)
			render.SetStencilWriteMask(1)
			render.SetStencilTestMask(1)

			render.SetStencilPassOperation(STENCIL_KEEP)
			render.SetStencilCompareFunction(STENCIL_NEVER)
			render.SetStencilFailOperation(STENCIL_REPLACE)
			render.SetStencilZFailOperation(STENCIL_REPLACE)

			surface.DrawPoly(self.m_tVertices)

			render.SetStencilFailOperation(STENCIL_KEEP)
			render.SetStencilZFailOperation(STENCIL_KEEP)
			render.SetStencilCompareFunction(STENCIL_LESSEQUAL)

			surface.SetMaterial(blur)

			local sw, sh = ScrW(), ScrH()

			for i = 1, self.m_iQuality do
				blur:SetFloat("$blur", (i / self.m_iQuality) * self.m_iDensity)
				blur:Recompute()

				render.UpdateScreenEffectTexture()
				surface.DrawTexturedRect(0, 0, sw, sh)
			end
		render.SetStencilEnable(false)
	else
		surface.DrawPoly(self.m_tVertices)
	end
end

debug.getregistry()["Circle"] = CIRCLE

function GAS_NewCircle(type)
	return setmetatable({m_iType = tonumber(type)}, CIRCLE)
end
--addons/gmodadminsuite-jobwhitelist-1.3.4/lua/vgui/gas_jobwhitelist_faction.lua:
local PANEL = {}

function PANEL:Init()
	self:SetSize(128 + 20, 128 + 20 + 10 + 14)
	self:DockPadding(10,10,10,10)

	self:SetLoading(true)

	self:SetMouseInputEnabled(true)
	self:SetCursor("hand")

	self.Image = self.Image or vgui.Create("DImage", self)
	self.Image:SetSize(128,128)
	self.Image:SetPos(10,10)

	self.r = 0
	self.g = 0
	self.b = 0
end

file.CreateDir("gas_jobwhitelist_faction_imgs")
function PANEL:SetImage(url)
	local crc = util.CRC(os.date("%d%m%Y") .. url) .. ".png"

	GAS.JobWhitelist.Factions.ImageCRCs[crc] = true

	if (file.Exists("gas_jobwhitelist_faction_imgs/" .. crc, "DATA")) then
		self.Image:SetMaterial(Material("data/gas_jobwhitelist_faction_imgs/" .. crc))
	else
		http.Fetch(url, function(body, size, headers, code)
			if (body:find("^.PNG")) then
				file.Write("gas_jobwhitelist_faction_imgs/" .. crc, body)
				self.Image:SetMaterial(Material("data/gas_jobwhitelist_faction_imgs/" .. crc))
			else
				GAS:print("[JobWhitelist Factions] Faction image is not a PNG, from: " .. url, GAS_PRINT_COLOR_BAD, GAS_PRINT_TYPE_FAIL)
			end
		end, function()
			GAS:print("[JobWhitelist Factions] Failed to get faction image from " .. url, GAS_PRINT_COLOR_BAD, GAS_PRINT_TYPE_FAIL)
		end)
	end
end

function PANEL:SetName(name)
	self.Label = self.Label or vgui.Create("DLabel", self)
	self.Label:Dock(BOTTOM)
	self.Label:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self.Label:SetTextColor(bVGUI.COLOR_WHITE)
	self.Label:SetText(name)
	self.Label:SizeToContents()
	self.Label:SetContentAlignment(5)
end

function PANEL:SetDescription(description)
	self.Description = description
end

function PANEL:OnCursorEntered()
	surface.PlaySound(GAS.JobWhitelist.Factions.Config.OnHoverSound)
	if (IsValid(GAS.JobWhitelist.Factions.Menu.Description)) then
		GAS.JobWhitelist.Factions.Menu.Description:Update(self.Description)
	end
end
function PANEL:OnCursorExited()
	if (IsValid(GAS.JobWhitelist.Factions.Menu.Description)) then
		GAS.JobWhitelist.Factions.Menu.Description:Update(GAS.JobWhitelist.Factions.Config.HelpText)
	end
end

function PANEL:OnMousePressed(m)
	if (m == MOUSE_LEFT) then
		self.MOUSE_LEFT = true
	end
end
function PANEL:OnMouseReleased(m)
	if (m == MOUSE_LEFT) then
		if (self.MOUSE_LEFT) then
			self.MOUSE_LEFT = nil
			if (self.DoClick) then
				self:DoClick()
			end
		end
	end
end

function PANEL:Paint(w,h)
	if (self:IsHovered()) then
		self.r, self.g, self.b = Lerp(0.05, self.r, 50), Lerp(0.05, self.g, 50), Lerp(0.05, self.b, 50)
	else
		self.r, self.g, self.b = Lerp(0.05, self.r, 0), Lerp(0.05, self.g, 0), Lerp(0.05, self.b, 0)
	end
	surface.SetDrawColor(self.r, self.g, self.b, 100)
	surface.DrawRect(0,0,w,h)
end

derma.DefineControl("GAS.JobWhitelist.Faction", nil, PANEL, "bVGUI.LoadingPanel")
--addons/gmodadminsuite-logging-2.4.8/lua/vgui/gas_logging_damagelog.lua:
return gluapack()()
--addons/gmodadminsuite-logging-2.4.8/lua/vgui/gas_logging_damagelog.lua:
local function L(phrase, ...)
	if (#({...}) == 0) then
		return GAS:Phrase(phrase, "logging")
	else
		return GAS:PhraseFormat(phrase, "logging", ...)
	end
end

surface.CreateFont("gas_logging_damagelog_pct", {
	size = 24,
	font = "Circular Std Medium",
	bold = true,
})

surface.CreateFont("gas_logging_damagelog_delay", {
	size = 12,
	font = "Circular Std Medium"
})

local module_icon_cache = {}
local module_noicon = Material("icon16/page_white_text.png")
local function GetModuleIcon(module_id)
	if (module_icon_cache[module_id]) then
		return module_icon_cache[module_id]
	else
		local module_data = GAS.Logging.IndexedModules[module_id]
		if (module_data.Icon ~= nil) then
			local mat = Material(module_data.Icon)
			module_icon_cache[module_id] = mat
			return mat
		else
			return module_noicon
		end
	end
end

GAS_Logging_PvPEventReports = {}

local PANEL = {}

function PANEL:DoClick()
	local this = self

	GAS:PlaySound("popup")
	if (IsValid(GAS_Logging_PvPEventReports[self.data[GAS.Logging.PvP_EVENT_ID]])) then
		GAS_Logging_PvPEventReports[self.data[GAS.Logging.PvP_EVENT_ID]]:MakePopup()
		GAS_Logging_PvPEventReports[self.data[GAS.Logging.PvP_EVENT_ID]]:Center()
	else
		local total_time = this.data[GAS.Logging.PvP_LAST_UPDATED] - this.data[GAS.Logging.PvP_PRECISE_CREATION_TIME]

		local pvp_event_report = vgui.Create("bVGUI.Frame")
		pvp_event_report.data = self.data

		GAS_Logging_PvPEventReports[self.data[GAS.Logging.PvP_EVENT_ID]] = pvp_event_report

		pvp_event_report:SetSize(800,500)
		pvp_event_report:SetMinimumSize(pvp_event_report:GetSize())
		pvp_event_report:SetTitle(L"pvp_event_report")
		pvp_event_report:MakePopup()
		pvp_event_report:Center()
		function pvp_event_report:OnClose()
			GAS.Logging.Scenes:ClearScene(pvp_event_report.data[GAS.Logging.PvP_COMBAT_SCENE])
			if (IsValid(this) and this.DeleteMeOnClose) then
				this:Remove()
			end
		end

		local info_container = vgui.Create("bVGUI.BlankPanel", pvp_event_report)
		info_container:Dock(FILL)

		local scene_container = vgui.Create("bVGUI.BlankPanel", pvp_event_report)
		scene_container:Dock(LEFT)
		scene_container:SetWide(200)

			local scene_beginning = vgui.Create("bVGUI.RenderScene", scene_container)
			scene_beginning:SetLabel(L"event_start")
			function scene_beginning:OnStartRender()
				GAS.Logging.Scenes:ViewScene(pvp_event_report.data[GAS.Logging.PvP_COMBAT_SCENE], true, function(pos, ang)
					if (not IsValid(self)) then return end
					if (self.SetDefaultPositioning) then return end
					self.SetDefaultPositioning = true
					self:SetOrigin(pos)
					self:SetAngle(ang)
				end)
			end
			function scene_beginning:OnEndRender()
				GAS.Logging.Scenes:ClearScene(pvp_event_report.data[GAS.Logging.PvP_COMBAT_SCENE], true)
			end

			local scene_end = vgui.Create("bVGUI.RenderScene", scene_container)
			scene_end:SetCanRender(not self.data[GAS.Logging.PvP_ONGOING])
			scene_end:SetLabel(L"event_end")
			function scene_end:OnStartRender()
				GAS.Logging.Scenes:ViewScene(pvp_event_report.data[GAS.Logging.PvP_COMBAT_SCENE], false, function(pos, ang)
					if (not IsValid(self)) then return end
					if (self.SetDefaultPositioning) then return end
					self.SetDefaultPositioning = true
					self:SetOrigin(pos)
					self:SetAngle(ang)
				end)
			end
			function scene_end:OnEndRender()
				GAS.Logging.Scenes:ClearScene(pvp_event_report.data[GAS.Logging.PvP_COMBAT_SCENE], false)
			end

			function scene_container:PerformLayout(w,_h)
				local h = _h + 5
				scene_beginning:SetSize(w,h/2)
				scene_end:SetSize(w,h/2)
				scene_end:AlignTop((h/2)-5)
			end

		local timeline = vgui.Create("bVGUI.BlankPanel", info_container)
		timeline:SetMouseInputEnabled(true)
		timeline:Dock(TOP)
		timeline:SetTall(70)
		timeline.Scale = math.max(1, total_time * 1.25)
		timeline.BlipOffset = 0
		timeline.DmgEventBlips = {}
		function timeline:OnMouseWheeled(delta)
			local scale_change = timeline.Scale
			if (delta == 1) then
				timeline.Scale = timeline.Scale * 2
			elseif (delta == -1) then
				timeline.Scale = timeline.Scale / 2
			end
			local max_scale = math.max(4, total_time * 1.25)

			timeline.Scale = math.Clamp(timeline.Scale, 0.25, max_scale)

			local x,y = timeline:ScreenToLocal(gui.MousePos())
			if (timeline.Scale >= max_scale) then
				timeline.BlipOffset = 0
			end

			timeline:RefreshBlips()
			timeline:RefreshDelayMarkup()
		end

		local blip_size = 7.5
		function timeline:RefreshBlips()
			local w,h = self:GetSize()

			local y_offset = 14 + 10

			timeline.DmgEventBlips = {}
			for i,log in ipairs(pvp_event_report.data[GAS.Logging.PvP_EVENT_LOGS]) do
				if (type(log[1]) == "table") then continue end

				local place = (log[1] / total_time) * (w * (total_time / timeline.Scale)) - timeline.BlipOffset

				local blip = {
					{x = place, y = y_offset},
					{x = place + blip_size, y = blip_size + y_offset},
					{x = place, y = (blip_size * 2) + y_offset},
					{x = place - blip_size, y = blip_size + y_offset},
				}
				if (log[3] == pvp_event_report.data[GAS.Logging.PvP_VICTIM] and log[4] == pvp_event_report.data[GAS.Logging.PvP_INSTIGATOR]) then
					timeline.DmgEventBlips[i] = {true, blip}
				elseif (log[3] == pvp_event_report.data[GAS.Logging.PvP_INSTIGATOR] and log[4] == pvp_event_report.data[GAS.Logging.PvP_VICTIM]) then
					timeline.DmgEventBlips[i] = {false, blip}
				else
					timeline.DmgEventBlips[i] = {nil, blip}
				end
			end
		end
		timeline:RefreshBlips()

		function timeline:RefreshDelayMarkup()
			local x,y = self:ScreenToLocal(gui.MousePos())
			local w,h = self:GetSize()
			if (x >= 0) then
				self.DelayMarkup = markup.Parse("<font=gas_logging_damagelog_delay>+" .. math.Round((x / (w * (total_time / self.Scale))) * total_time, 2) .. "s</font>")
			else
				self.DelayMarkup = markup.Parse("<font=gas_logging_damagelog_delay>+0s</font>")
			end
		end

		function timeline:PerformLayout()
			timeline:RefreshBlips()
		end

		local pvp_event = vgui.Create("GAS.Logging.DamageLog", info_container)
		pvp_event:Dock(TOP)
		pvp_event:Setup(self.data, false)

		local tabs = vgui.Create("bVGUI.Tabs", info_container)
		tabs:Dock(TOP)
		tabs:SetTall(40)

		local logs_tab_content, logs_tab = tabs:AddTab(L"logs", Color(216,76,76))
			
			local log_tbl = vgui.Create("bVGUI.Table", logs_tab_content)
			log_tbl:Dock(FILL)
			log_tbl:AddColumn(L"log", bVGUI.TABLE_COLUMN_GROW)
			log_tbl:AddColumn(L"instigator_abbr", bVGUI.TABLE_COLUMN_SHRINK, TEXT_ALIGN_CENTER)
			log_tbl:AddColumn(L"victim_abbr", bVGUI.TABLE_COLUMN_SHRINK, TEXT_ALIGN_CENTER)
			log_tbl:AddColumn(L"time", bVGUI.TABLE_COLUMN_SHRINK, TEXT_ALIGN_CENTER)
			for i,log in ipairs(this.data[GAS.Logging.PvP_EVENT_LOGS]) do
				if (type(log[1]) == "table") then
					local row = log_tbl:AddRow(GAS.Logging:FormatMarkupLog(log, nil, nil, this.data[GAS.Logging.PvP_VICTIM], this.data[GAS.Logging.PvP_INSTIGATOR]), "-", "-", "+" .. math.Round(this.data[GAS.Logging.PvP_EVENT_LOGS_CHRONOLOGY][i], 2) .. "s")
					local icon = GetModuleIcon(log[2])
					row:SetMaterial(icon)
				else
					local instigator_dmg = "-"
					local victim_dmg = "-"
					if (log[3] == this.data[GAS.Logging.PvP_VICTIM]) then
						victim_dmg = "<color=0,255,0>" .. math.Round(log[6], 2) .. "</color>"
					elseif (log[3] == this.data[GAS.Logging.PvP_INSTIGATOR]) then
						instigator_dmg = "<color=255,0,0>" .. math.Round(log[6], 2) .. "</color>"
					end
					log_tbl:AddRow(GAS.Logging:FormatMarkupLogCustom(GAS:Phrase(log[2], "logging", "Logs"), log[5], nil, nil, this.data[GAS.Logging.PvP_VICTIM], this.data[GAS.Logging.PvP_INSTIGATOR]), instigator_dmg, victim_dmg, "+" .. math.Round(log[1], 2) .. "s")
				end
			end

		local weapons_tab_content, weapons_tab = tabs:AddTab(L"weapons", Color(76,76,216))

			local weapons_grid = vgui.Create("bVGUI.Grid", weapons_tab_content)
			weapons_grid:Dock(FILL)
			weapons_grid:SetPadding(10,10)

			local merged_weps = {}
			for weapon_class, dmg in pairs(pvp_event_report.data[GAS.Logging.PvP_INSTIGATOR_WEPS]) do
				merged_weps[weapon_class] = merged_weps[weapon_class] or {0,0}
				merged_weps[weapon_class][1] = merged_weps[weapon_class][1] + dmg
			end
			for weapon_class, dmg in pairs(pvp_event_report.data[GAS.Logging.PvP_VICTIM_WEPS]) do
				merged_weps[weapon_class] = merged_weps[weapon_class] or {0,0}
				merged_weps[weapon_class][2] = merged_weps[weapon_class][2] + dmg
			end

			for weapon_class, dmgs in pairs(merged_weps) do
				local ent_display = vgui.Create("GAS.Logging.EntityDisplay", weapons_grid)
				ent_display:SetWeapon(weapon_class)
				ent_display:SetDrawOnTop(false)
				ent_display.Think = nil
				weapons_grid:AddToGrid(ent_display)
			end

		local linked_events_tab_content, linked_events_tab = tabs:AddTab(L"linked_events", Color(216,76,76))



		local log_tbl_highlights = {}
		local timeline_hover_last_prev_frame
		local timeline_hover_exact_prev_frame
		function timeline:Paint(w,h)
			local x,y = self:ScreenToLocal(gui.MousePos())
			local target_time_point = (x / (w * (total_time / self.Scale))) * total_time
			local target_time_point_rnd = math.Round(target_time_point, 2)

			if (x ~= self.StoreX) then
				self.StoreX = x
				timeline:RefreshDelayMarkup()
			end

			surface.SetDrawColor(26,26,26)
			surface.DrawRect(0,0,w,h)

			surface.SetMaterial(bVGUI.MATERIAL_GRADIENT_LIGHT_LARGE)
			surface.DrawTexturedRect(0,0,w,h)

			surface.SetDrawColor(50, 50, 50)
			local spacing = w / self.Scale
			for i=1,self.Scale do
				surface.DrawLine((i - 1) * spacing,0,(i - 1) * spacing,h)
			end
			if (self.Scale < 5) then
				local spacing = w / math.floor(self.Scale / .25)
				for i=1,math.floor(self.Scale / .25) do
					if ((i - 1) % 4 == 0) then continue end
					if ((i - 1) % 2 == 0) then
						surface.SetDrawColor(37, 37, 37)
					else
						surface.SetDrawColor(30, 30, 30)
					end
					surface.DrawLine((i - 1) * spacing,0,(i - 1) * spacing,h)
				end
			end

			surface.SetDrawColor(181,39,39)
			surface.DrawRect(0,0,w,14)

			surface.SetDrawColor(181,39,39)
			surface.DrawRect(0,0,w * (total_time / self.Scale),14)

			if (self.DelayMarkupW ~= nil and x >= 0 and x <= w) then
				surface.SetDrawColor(0,0,0,200)
				surface.DrawRect(x - ((self.DelayMarkupW + 15) / 2),0,self.DelayMarkupW + 15,14)
			end

			local timeline_hover_exact
			local timeline_hover_last = target_time_point > total_time
			if (timeline_hover_last) then
				for k,v in pairs(log_tbl_highlights) do
					if (k ~= #pvp_event_report.data[GAS.Logging.PvP_EVENT_LOGS]) then
						log_tbl_highlights = {}
						break
					end
				end
				log_tbl_highlights[#pvp_event_report.data[GAS.Logging.PvP_EVENT_LOGS]] = true
			elseif (timeline_hover_last_prev_frame ~= timeline_hover_last) then
				log_tbl_highlights[#pvp_event_report.data[GAS.Logging.PvP_EVENT_LOGS]] = nil
			end
			timeline_hover_last_prev_frame = timeline_hover_last

			for i,log in ipairs(pvp_event_report.data[GAS.Logging.PvP_EVENT_LOGS]) do
				local time_point
				if (type(log[1]) == "table") then
					-- event log
					time_point = pvp_event_report.data[GAS.Logging.PvP_EVENT_LOGS_CHRONOLOGY][i]

					local icon = GetModuleIcon(log[2])
					surface.SetDrawColor(255,255,255)
					surface.SetMaterial(icon)
					surface.DrawTexturedRect((time_point / total_time) * (w * (total_time / self.Scale)) - (16 / 2) - timeline.BlipOffset, h - 16 - 10, 16, 16)
				else
					-- damage log
					local poly = timeline.DmgEventBlips[i]
					draw.NoTexture()
					if (poly[1] == true) then
						surface.SetDrawColor(215,50,50,200)
					elseif (poly[1] == false) then
						surface.SetDrawColor(50,215,50,200)
					else
						surface.SetDrawColor(50,50,215,200)
					end
					surface.DrawPoly(poly[2])

					time_point = log[1]
				end

				if (not timeline_hover_last) then
					local time_point_rnd = math.Round(time_point, 2)
					if (timeline_hover_exact ~= nil) then
						log_tbl_highlights[i] = (time_point_rnd == timeline_hover_exact) or nil
					elseif (time_point_rnd == target_time_point_rnd) then
						timeline_hover_exact = target_time_point_rnd
						log_tbl_highlights[i] = true
					else
						if (i ~= 1 and target_time_point < time_point) then
							local prev = pvp_event_report.data[GAS.Logging.PvP_EVENT_LOGS][i - 1]
							local prev_time_point = prev[1]
							if (type(prev[1]) == "table") then
								prev_time_point = pvp_event_report.data[GAS.Logging.PvP_EVENT_LOGS_CHRONOLOGY][i - 1]
							end
							if (target_time_point > prev_time_point) then
								local median = (prev_time_point + time_point) / 2
								if (target_time_point > median) then
									log_tbl_highlights[i] = true
									log_tbl_highlights[i - 1] = nil
								else
									log_tbl_highlights[i] = nil
									log_tbl_highlights[i - 1] = true
								end
							else
								log_tbl_highlights[i] = nil
							end
						elseif (i ~= #pvp_event_report.data[GAS.Logging.PvP_EVENT_LOGS] and target_time_point > time_point) then
							local next = pvp_event_report.data[GAS.Logging.PvP_EVENT_LOGS][i + 1]
							local next_time_point = next[1]
							if (type(next[1]) == "table") then
								next_time_point = pvp_event_report.data[GAS.Logging.PvP_EVENT_LOGS_CHRONOLOGY][i + 1]
							end
							if (target_time_point < next_time_point) then
								local median = (next_time_point + time_point) / 2
								if (target_time_point > median) then
									log_tbl_highlights[i] = nil
									log_tbl_highlights[i + 1] = true
								else
									log_tbl_highlights[i] = true
									log_tbl_highlights[i + 1] = nil
								end
							else
								log_tbl_highlights[i] = nil
							end
						end
					end
				end
			end

			if (x >= 0 and x <= w) then
				surface.SetDrawColor(100,100,100)
				surface.DrawLine(x,14,x,h)

				if (self.DelayMarkup) then
					self.DelayMarkup:Draw(x, 7, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
					self.DelayMarkupW = self.DelayMarkup:GetWidth()
				end
			elseif (next(log_tbl_highlights) ~= nil) then
				log_tbl_highlights = {}
			end

			for i,row in ipairs(log_tbl.Rows) do
				row.Highlight = log_tbl_highlights[i] == true
				if (row.Highlight and pvp_event_report:HasFocus() and (not IsValid(vgui.GetHoveredPanel()) or not log_tbl:IsOurChild(vgui.GetHoveredPanel()))) then
					if (self.ScrollToChild_Prev ~= row) then
						self.ScrollToChild_Prev = row
						log_tbl.RowContainer:ScrollToChild(row)
					end
				end
			end
		end

		pvp_event_report:EnableUserResize()
	end
end
function PANEL:OnMousePressed(m)
	self._pressed = m
end
function PANEL:OnMouseReleased(m)
	if (self._pressed == m) then
		if (m == MOUSE_LEFT and self.DoClick) then
			self:DoClick()
		end
		self._pressed = nil
	end
end

function PANEL:Init()
	self:SetMouseInputEnabled(true)

	self:SetTall(95)

	self.InstigatorAvatar = vgui.Create("AvatarImage", self)
	self.InstigatorAvatar:SetSize(48,48)
	self.InstigatorAvatar:SetCursor("hand")
	self.InstigatorAvatar:SetMouseInputEnabled(true)
	function self.InstigatorAvatar:OnMouseReleased(m) if m ~= MOUSE_LEFT then return else bVGUI.PlayerTooltip.Focus() end end

	self.InstigatorDead = vgui.Create("DLabel", self)
	self.InstigatorDead:SetTextColor(Color(255,0,0))
	self.InstigatorDead:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self.InstigatorDead:SetContentAlignment(4)
	self.InstigatorDead:SetText("")
	self.InstigatorDead:SetWide(0)

	self.InstigatorTag = vgui.Create("DLabel", self)
	self.InstigatorTag:SetTextColor(Color(255,0,0))
	self.InstigatorTag:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self.InstigatorTag:SetText("[" .. string.upper(L"instigator") .. "]")
	self.InstigatorTag:SetContentAlignment(4)
	self.InstigatorTag:SizeToContents()
	bVGUI.AttachTooltip(self.InstigatorTag, {
		Text = L"instigator_tag_tip",
	})

	self.InstigatorName = vgui.Create("DLabel", self)
	self.InstigatorName:SetTextColor(bVGUI.COLOR_WHITE)
	self.InstigatorName:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self.InstigatorName:SetText("")
	self.InstigatorName:SetContentAlignment(4)
	self.InstigatorName:SetCursor("hand")
	self.InstigatorName:SetMouseInputEnabled(true)
	function self.InstigatorName:DoClick() bVGUI.PlayerTooltip.Focus() end

	self.InstigatorPrimaryWep = vgui.Create("DLabel", self)
	self.InstigatorPrimaryWep:SetTextColor(GAS.Logging.LogFormattingSettings.Colors.Weapon)
	self.InstigatorPrimaryWep:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self.InstigatorPrimaryWep:SetText("")
	self.InstigatorPrimaryWep:SetContentAlignment(4)
	self.InstigatorPrimaryWep:SetMouseInputEnabled(true)

	self.VictimAvatar = vgui.Create("AvatarImage", self)
	self.VictimAvatar:SetSize(48,48)
	self.VictimAvatar:SetCursor("hand")
	self.VictimAvatar:SetMouseInputEnabled(true)
	function self.VictimAvatar:OnMouseReleased(m) if m ~= MOUSE_LEFT then return else bVGUI.PlayerTooltip.Focus() end end

	self.VictimDead = vgui.Create("DLabel", self)
	self.VictimDead:SetTextColor(Color(255,0,0))
	self.VictimDead:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self.VictimDead:SetContentAlignment(4)
	self.VictimDead:SetText("")
	self.VictimDead:SetWide(0)

	self.VictimTag = vgui.Create("DLabel", self)
	self.VictimTag:SetTextColor(Color(0,255,0))
	self.VictimTag:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self.VictimTag:SetText("[" .. string.upper(L"victim") .. "]")
	self.VictimTag:SetContentAlignment(6)
	self.VictimTag:SizeToContents()
	bVGUI.AttachTooltip(self.VictimTag, {
		Text = L"victim_tag_tip",
	})

	self.VictimName = vgui.Create("DLabel", self)
	self.VictimName:SetTextColor(bVGUI.COLOR_WHITE)
	self.VictimName:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self.VictimName:SetText("")
	self.VictimName:SetContentAlignment(6)
	self.VictimName:SetCursor("hand")
	self.VictimName:SetMouseInputEnabled(true)
	function self.VictimName:DoClick() bVGUI.PlayerTooltip.Focus() end

	self.VictimPrimaryWep = vgui.Create("DLabel", self)
	self.VictimPrimaryWep:SetTextColor(GAS.Logging.LogFormattingSettings.Colors.Weapon)
	self.VictimPrimaryWep:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self.VictimPrimaryWep:SetText("")
	self.VictimPrimaryWep:SetContentAlignment(6)
	self.VictimPrimaryWep:SetMouseInputEnabled(true)

	self.FlagMetadata = {
		{GAS.Logging.PvP_FLAG_ONGOING, L"flag_ongoing", "icon16/lightbulb.png"},
		{GAS.Logging.PvP_FLAG_FINISHED, L"flag_finished", "icon16/lightbulb_off.png"},
		{GAS.Logging.PvP_FLAG_SUPERADMIN, L"flag_superadmin", "icon16/shield_add.png"},
		{GAS.Logging.PvP_FLAG_ADMIN, L"flag_admin", "icon16/shield.png"},
		{GAS.Logging.PvP_FLAG_FRIENDLYFIRE, L"flag_friendly_fire", "icon16/emoticon_unhappy.png"},
		{GAS.Logging.PvP_FLAG_LAWENFORCEMENT, L"flag_law_enforcement", "icon16/bell.png"},
		{GAS.Logging.PvP_FLAG_INSTIGATOR_DEATH, L"flag_instigator_death", "icon16/status_busy.png"},
		{GAS.Logging.PvP_FLAG_VICTIM_DEATH, L"flag_victim_death", "icon16/status_offline.png"},
		{GAS.Logging.PvP_FLAG_VEHICLE, L"flag_vehicle", "icon16/car.png"},
		{GAS.Logging.PvP_FLAG_WORLD, L"flag_world", "icon16/world.png"},
		{GAS.Logging.PvP_FLAG_PROPS, L"flag_props", "icon16/bricks.png"},
		{GAS.Logging.PvP_FLAG_TEAM_SWITCHED, L"flag_team_switched", "icon16/arrow_refresh.png"},
		{GAS.Logging.PvP_FLAG_DISCONNECT, L"flag_disconnect", "icon16/disconnect.png"},
		{GAS.Logging.PvP_FLAG_LINKED, L"flag_linked", "icon16/link.png"},
	}

	self.LogTypeMetadata = {
		[GAS.Logging.PvP_LOG_TYPE_CHAT] = {L"log_type_chat", "icon16/user_comment.png"},
		[GAS.Logging.PvP_LOG_TYPE_CHAT_TEAM] = {L"log_type_team_chat", "icon16/group.png"},
		[GAS.Logging.PvP_LOG_TYPE_WEAPON_PICKUP] = {L"log_type_weapon_pickup", "icon16/bomb.png"},
		[GAS.Logging.PvP_LOG_TYPE_WEAPON_DROPPED] = {L"log_type_weapon_drop", "icon16/arrow_down.png"},
		[GAS.Logging.PvP_LOG_TYPE_ITEM_PICKUP] = {L"log_type_item_pickup", "icon16/coins.png"},
		[GAS.Logging.PvP_LOG_TYPE_SPAWNMENU] = {L"log_type_spawnmenu", "icon16/bricks.png"},
		[GAS.Logging.PvP_LOG_TYPE_DARKRP_PURCHASE] = {L"log_type_darkrp_purchase", "icon16/money_add.png"},
		[GAS.Logging.PvP_LOG_TYPE_DISCONNECT] = {L"log_type_disconnect", "icon16/disconnect.png"},
		[GAS.Logging.PvP_LOG_TYPE_WEAPON_SWITCHED] = {L"log_type_weapon_switched", "icon16/arrow_switch.png"},
		[GAS.Logging.PvP_LOG_TYPE_TEAM_SWITCH] = {L"log_type_team_switched", "icon16/arrow_refresh.png"},
		[GAS.Logging.PVP_LOG_TYPE_SILENT_DEATH] = {L"log_type_silent_death", "icon16/status_offline.png"},
		[GAS.Logging.PvP_LOG_TYPE_DEATH_WORLD] = {L"log_type_death_world", "icon16/world.png"},
		[GAS.Logging.PvP_LOG_TYPE_DEATH_PLAYER_WEP] = {L"log_type_death_player_wep", "icon16/wand.png"},
		[GAS.Logging.PvP_LOG_TYPE_DEATH_PLAYER] = {L"log_type_death_player", "icon16/status_offline.png"},
		[GAS.Logging.PvP_LOG_TYPE_DEATH_ENT] = {L"log_type_death_ent", "icon16/status_offline.png"},
		[GAS.Logging.PvP_LOG_TYPE_DEATH] = {L"log_type_death", "icon16/status_offline.png"},
		[GAS.Logging.PvP_LOG_TYPE_DEATH_PROPKILL_SELF] = {L"log_type_propkill_self", "icon16/box.png"},
		[GAS.Logging.PvP_LOG_TYPE_DEATH_PROPKILL] = {L"log_type_propkill", "icon16/brick_go.png"},
	}

	self.FlagContainer = vgui.Create("bVGUI.BlankPanel", self)
	self.FlagContainer:Dock(RIGHT)
	self.FlagContainer:DockMargin(0,10,10 + 6,10 + 14)
	self.FlagContainer:SetWide(16)
	function self.FlagContainer:PerformLayout(w)
		self.Content:SetWide(w)
		self.Content:AlignRight(0)
		self.Content:CenterVertical()
	end

	self.FlagContainer.Content = vgui.Create("bVGUI.BlankPanel", self.FlagContainer)
	self.FlagContainer.Content:SetTall((3 * (16 + 5)) - 5)

	self.Timestamp = vgui.Create("DLabel", self)
	self.Timestamp:SetTextColor(bVGUI.COLOR_WHITE)
	self.Timestamp:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self.Timestamp:SetText("")
	self.Timestamp:SetContentAlignment(4)
	self.Timestamp:SetMouseInputEnabled(true)
end

function PANEL:Setup(data, allow_click)
	if (allow_click == false) then
		self.DoClick = nil
	else
		self:SetCursor("hand")
	end

	self.data = data

	if (self.data[GAS.Logging.PvP_FLAGS][GAS.Logging.PvP_FLAG_INSTIGATOR_DEATH]) then
		self.InstigatorDead:SetText(L"dead_tag")
		self.InstigatorDead:SizeToContents()
	end
	if (self.data[GAS.Logging.PvP_FLAGS][GAS.Logging.PvP_FLAG_VICTIM_DEATH]) then
		self.VictimDead:SetText(L"dead_tag")
		self.VictimDead:SizeToContents()
	end

	self.Timestamp:SetText(GAS:SimplifyTimestamp(self.data[GAS.Logging.PvP_CREATION_TIMESTAMP]))
	self.Timestamp:SizeToContents()
	bVGUI.AttachTooltip(self.Timestamp, {
		Text = GAS:FormatFullTimestamp(self.data[GAS.Logging.PvP_CREATION_TIMESTAMP])
	})

	self.InstigatorAvatar:SetSteamID(GAS:AccountIDToSteamID64(data[GAS.Logging.PvP_INSTIGATOR]), 48)
	self.VictimAvatar:SetSteamID(GAS:AccountIDToSteamID64(data[GAS.Logging.PvP_VICTIM]), 48)

	local instigator = player.GetByAccountID(data[GAS.Logging.PvP_INSTIGATOR])
	if (IsValid(instigator)) then
		self.InstigatorName:SetText(instigator:Nick())
	else
		self.InstigatorName:SetText(data[GAS.Logging.PvP_INSTIGATOR_NICK])
	end
	self.InstigatorName:SizeToContents()

	bVGUI.PlayerTooltip.Attach(self.InstigatorAvatar, {
		account_id = data[GAS.Logging.PvP_INSTIGATOR],
		focustip = L"click_to_focus",
	})

	bVGUI.PlayerTooltip.Attach(self.InstigatorName, {
		account_id = data[GAS.Logging.PvP_INSTIGATOR],
		focustip = L"click_to_focus",
	})

	local instigator_primary_wep = table.GetWinningKey(data[GAS.Logging.PvP_INSTIGATOR_WEPS])
	if (instigator_primary_wep ~= nil) then
		self.InstigatorPrimaryWep:SetText(instigator_primary_wep)
		self.InstigatorPrimaryWep:SizeToContents()

		GAS_Logging_DisplayEntity(function(pnl)
			pnl:SetWeapon(instigator_primary_wep)
		end, self.InstigatorPrimaryWep, true)
	end

	local victim = player.GetByAccountID(data[GAS.Logging.PvP_VICTIM])
	if (IsValid(victim)) then
		self.VictimName:SetText(victim:Nick())
	else
		self.VictimName:SetText(data[GAS.Logging.PvP_VICTIM_NICK])
	end
	self.VictimName:SizeToContents()

	bVGUI.PlayerTooltip.Attach(self.VictimAvatar, {
		account_id = data[GAS.Logging.PvP_VICTIM],
		focustip = L"click_to_focus",
	})

	bVGUI.PlayerTooltip.Attach(self.VictimName, {
		account_id = data[GAS.Logging.PvP_VICTIM],
		focustip = L"click_to_focus",
	})

	local victim_primary_wep = table.GetWinningKey(data[GAS.Logging.PvP_VICTIM_WEPS])
	if (victim_primary_wep ~= nil) then
		self.VictimPrimaryWep:SetText(victim_primary_wep)
		self.VictimPrimaryWep:SizeToContents()

		GAS_Logging_DisplayEntity(function(pnl)
			pnl:SetWeapon(victim_primary_wep)
		end, self.VictimPrimaryWep, true)
	end

	local column = 1
	local count = 0
	for i,v in ipairs(self.FlagMetadata) do
		if (data[GAS.Logging.PvP_FLAGS][v[1]] == true) then
			count = count + 1
			if (count % 3 == 0) then
				column = column + 1
			end
		end
	end
	if (count % 3 == 0) then column = column - 1 end
	self.FlagContainer:SetWide((column * (16 + 5)) - 5)
	if (column == 1) then
		self.FlagContainer.Content:SetTall((count * (16 + 5)) - 5)
	else
		self.FlagContainer.Content:SetTall((3 * (16 + 5)) - 5)
	end
	self.FlagContainer.Content:SetWide((column * (16 + 5)) - 5)
	self.FlagContainer.Content:AlignRight(0)
	self.FlagContainer.Content:CenterVertical()

	local column = 1
	local count = 0
	for i,v in ipairs(self.FlagMetadata) do
		if (data[GAS.Logging.PvP_FLAGS][v[1]] == true) then
			local flag_icon = vgui.Create("DImage", self.FlagContainer.Content)
			flag_icon:SetSize(16,16)
			flag_icon:AlignTop((count % 3) * (16 + 5))
			flag_icon:AlignRight((column - 1) * (16 + 5))
			flag_icon:SetImage(v[3])
			bVGUI.AttachTooltip(flag_icon, {
				Text = v[2]
			})
			count = count + 1
			if (count % 3 == 0) then
				column = column + 1
			end
		end
	end

	self:InvalidateLayout(true)
end

function PANEL:PerformLayout(w,h)
	self.InstigatorAvatar:AlignLeft(10)
	self.InstigatorAvatar:AlignBottom(10 + 14)

	self.VictimAvatar:AlignRight(10 + self.FlagContainer:GetWide() + 10 + 6)
	self.VictimAvatar:AlignBottom(10 + 14)

	self.InstigatorDead:AlignTop(5)
	self.InstigatorDead:AlignLeft(10)

	local instigator_death_margin, victim_death_margin = 0,0
	if (self.InstigatorDead:GetWide() > 0) then
		instigator_death_margin = self.InstigatorDead:GetWide() + 5
	end
	if (self.VictimDead:GetWide() > 0) then
		victim_death_margin = self.VictimDead:GetWide() + 5
	end

	self.InstigatorTag:AlignTop(5)
	self.InstigatorTag:AlignLeft(10 + instigator_death_margin)

	self.InstigatorName:AlignTop(5)
	self.InstigatorName:AlignLeft(10 + instigator_death_margin + self.InstigatorTag:GetWide() + 5)

	self.InstigatorPrimaryWep:AlignTop(5)
	self.InstigatorPrimaryWep:AlignLeft(10 + instigator_death_margin + self.InstigatorTag:GetWide() + 5 + self.InstigatorName:GetWide() + 5)

	self.VictimDead:AlignTop(5)
	self.VictimDead:AlignRight(10 + self.FlagContainer:GetWide() + 10 + 6)

	self.VictimTag:AlignTop(5)
	self.VictimTag:AlignRight(10 + self.FlagContainer:GetWide() + 10 + victim_death_margin + 6)

	self.VictimName:AlignTop(5)
	self.VictimName:AlignRight(10 + self.FlagContainer:GetWide() + 10 + victim_death_margin + self.VictimTag:GetWide() + 5 + 6)

	self.VictimPrimaryWep:AlignTop(5)
	self.VictimPrimaryWep:AlignRight(10 + self.FlagContainer:GetWide() + 10 + self.VictimTag:GetWide() + 5 + self.VictimName:GetWide() + 5 + victim_death_margin + 6)

	self.Timestamp:AlignLeft(10)
	self.Timestamp:AlignBottom(5)

	self.vgui_InstigatorFrac = self.data[GAS.Logging.PvP_INSTIGATOR_DMG_GVN] / self.data[GAS.Logging.PvP_TOTAL_DMG]
	self.vgui_VictimFrac     = self.data[GAS.Logging.PvP_VICTIM_DMG_GVN] / self.data[GAS.Logging.PvP_TOTAL_DMG]
	self.vgui_OtherFrac      = (self.data[GAS.Logging.PvP_TOTAL_DMG] - self.data[GAS.Logging.PvP_INSTIGATOR_DMG_GVN] - self.data[GAS.Logging.PvP_VICTIM_DMG_GVN]) / self.data[GAS.Logging.PvP_TOTAL_DMG]
	if (self.data[GAS.Logging.PvP_TOTAL_DMG] == 0) then self.vgui_OtherFrac = 1 self.vgui_VictimFrac = 0 self.vgui_InstigatorFrac = 0 end

	self.vgui_InstigatorWidth = (w - 6 - 10 - self.FlagContainer:GetWide() - 10 - 48 - 10 - 10 - 48 - 10) * self.vgui_InstigatorFrac
	self.vgui_VictimWidth     = (w - 6 - 10 - self.FlagContainer:GetWide() - 10 - 48 - 10 - 10 - 48 - 10) * self.vgui_VictimFrac
	self.vgui_OtherWidth      = (w - 6 - 10 - self.FlagContainer:GetWide() - 10 - 48 - 10 - 10 - 48 - 10) * self.vgui_OtherFrac
end

function PANEL:OnCursorMoved(x,y)
	local w,h = self:GetSize()
	if (y >= (h - 10 - 48) and y <= h - 10 and x >= 10 + 48 + 10 and x <= w - 6 - 10 - self.FlagContainer:GetWide() - 10 - 48 - 10) then
		local relative_x = x - 10 - 48 - 10
		local DmgTooltip = self.DmgTooltip
		if (relative_x <= self.vgui_InstigatorWidth) then
			self.DmgTooltip = 1
		elseif (relative_x <= self.vgui_InstigatorWidth + self.vgui_OtherWidth) then
			self.DmgTooltip = 2
		else
			self.DmgTooltip = 3
		end
		if (DmgTooltip ~= self.DmgTooltip) then
			bVGUI.DestroyTooltip()
			local tt = {
				VGUI_Element = self,
			}
			if (self.DmgTooltip == 1) then
				tt.Text = math.Round(self.vgui_InstigatorFrac * 100, 2) .. L"DmgTooltip_Instigator"
				tt.TextColor = Color(216,76,76)
			elseif (self.DmgTooltip == 2) then
				tt.Text = math.Round(self.vgui_OtherFrac * 100, 2) .. L"DmgTooltip_Other"
				tt.TextColor = Color(74,126,214)
			else
				tt.Text = math.Round(self.vgui_VictimFrac * 100, 2) .. L"DmgTooltip_Victim"
				tt.TextColor = Color(76,216,76)
			end
			bVGUI.CreateTooltip(tt)
		end
	else
		self.DmgTooltip = nil
		bVGUI.DestroyTooltip()
	end
end

local stripes = Material("gmodadminsuite/stripes4.png")
function PANEL:Paint(w,h)
	if (self.RowIndex ~= nil and self.RowIndex % 2 ~= 0) then
		surface.SetDrawColor(255,255,255,75)
	else
		surface.SetDrawColor(255,255,255,200)
	end
	surface.SetMaterial(stripes)
	surface.DrawTexturedRect(0,0,w,h)

	surface.SetDrawColor(198,19,19)
	surface.DrawRect(48 + 10 + 10, h - 10 - 48 - 14, self.vgui_InstigatorWidth, 48)

	surface.SetDrawColor(19,198,19)
	surface.DrawRect(w - 6 - 10 - self.FlagContainer:GetWide() - 10 - 48 - 10 - self.vgui_VictimWidth, h - 10 - 48 - 14, self.vgui_VictimWidth, 48)

	surface.SetDrawColor(32,32,173)
	surface.DrawRect(48 + 10 + 10 + self.vgui_InstigatorWidth, h - 10 - 48 - 14, self.vgui_OtherWidth, 48)

	surface.SetDrawColor(255,255,255,255)
	surface.SetMaterial(bVGUI.MATERIAL_GRADIENT)
	surface.DrawTexturedRect(10 + 48 + 10,h - 10 - 48 - 14,w - 6 - 10 - self.FlagContainer:GetWide() - 10 - 48 - 10 - 48 - 10 - 10,48)

	if (self.vgui_InstigatorWidth >= 50) then
		draw.SimpleText(math.Round(self.vgui_InstigatorFrac * 100) .. "%", "gas_logging_damagelog_pct", 10 + 48 + 10 + (self.vgui_InstigatorWidth / 2), h - 10 - (48 / 2) - 14, bVGUI.COLOR_WHITE,TEXT_ALIGN_CENTER,TEXT_ALIGN_CENTER)
	end
	if (self.vgui_VictimWidth >= 50) then
		draw.SimpleText(math.Round(self.vgui_VictimFrac * 100) .. "%", "gas_logging_damagelog_pct", w - 6 - 10 - self.FlagContainer:GetWide() - 10 - 48 - 10 - (self.vgui_VictimWidth / 2), h - 10 - (48 / 2) - 14, bVGUI.COLOR_WHITE,TEXT_ALIGN_CENTER,TEXT_ALIGN_CENTER)
	end
	if (self.vgui_OtherWidth >= 50) then
		draw.SimpleText(math.Round(self.vgui_OtherFrac * 100) .. "%", "gas_logging_damagelog_pct", 10 + 48 + 10 + self.vgui_InstigatorWidth + (self.vgui_OtherWidth / 2), h - 10 - (48 / 2) - 14, bVGUI.COLOR_WHITE,TEXT_ALIGN_CENTER,TEXT_ALIGN_CENTER)
	end
end

derma.DefineControl("GAS.Logging.DamageLog", nil, PANEL, "bVGUI.BlankPanel")
--lua/vgui/openpermissions_columnlayout.lua:
local PANEL = {}

OpenPermissions_COLUMN_LAYOUT_COLUMN_GROW = 0
OpenPermissions_COLUMN_LAYOUT_COLUMN_SHRINK = 1
OpenPermissions_COLUMN_LAYOUT_COLUMN_GROW_COLUMN = 2

function PANEL:Init()
	self.Columns = {}
	self.Rows = {}
	self.ColumnPadding = 0
	self.RowPadding = 0

	function self.pnlCanvas:PerformLayout()
		self:GetParent():ColumnLayout()
		self:InvalidateParent(true)
	end
end

function PANEL:SetPaddings(column_padding, row_padding)
	self.ColumnPadding = column_padding
	self.RowPadding = row_padding
end

function PANEL:SetColumns(...)
	self.Columns = {...}
	self.GrowColumnCount = 0
	for _,v in ipairs(self.Columns) do
		if (v == OpenPermissions_COLUMN_LAYOUT_COLUMN_GROW or v == OpenPermissions_COLUMN_LAYOUT_COLUMN_GROW_COLUMN) then
			self.GrowColumnCount = self.GrowColumnCount + 1
		end
	end
end

function PANEL:AddRow(...)
	local i = table.insert(self.Rows, {...})
	self.pnlCanvas:InvalidateLayout(true)
	return i
end

function PANEL:RemoveRow(row_index)
	for _,element in ipairs(self.Rows[row_index]) do
		element:Remove()
	end
	table.remove(self.Rows, row_index)
	self.pnlCanvas:InvalidateLayout(true)
end

function PANEL:ColumnLayout()
	local column_widths = {}
	local row_heights = {}
	for row_i, elements in ipairs(self.Rows) do
		for column_i, element in ipairs(elements) do
			if (self.Columns[column_i] == OpenPermissions_COLUMN_LAYOUT_COLUMN_SHRINK) then
				local element_w = element:GetWide()
				local column_w = column_widths[column_i]
				if (not column_w or element_w > column_w) then
					column_widths[column_i] = element_w
				end
			end
			if (self.Columns[column_i] ~= OpenPermissions_COLUMN_LAYOUT_COLUMN_GROW_COLUMN) then
				local element_h = element:GetTall()
				local row_h = row_heights[row_i]
				if (not row_h or element_h > row_h) then
					row_heights[row_i] = element_h
				end
			end
		end
	end
	local grow_column_width = 0
	for i,v in pairs(column_widths) do
		grow_column_width = grow_column_width - v - self.ColumnPadding
	end
	grow_column_width = ((grow_column_width + self:GetWide()) / self.GrowColumnCount) - 4

	local row_y = 0
	for row_i, elements in ipairs(self.Rows) do
		local column_x = 0
		for column_i, element in ipairs(elements) do
			local column_sizing = self.Columns[column_i]
			if (column_sizing == OpenPermissions_COLUMN_LAYOUT_COLUMN_SHRINK) then
				element:SetWide(column_widths[column_i])
				element:SetPos(column_x, row_y)
				column_x = column_x + column_widths[column_i] + self.ColumnPadding
			elseif (column_sizing == OpenPermissions_COLUMN_LAYOUT_COLUMN_GROW or column_sizing == OpenPermissions_COLUMN_LAYOUT_COLUMN_GROW_COLUMN) then
				if (OpenPermissions_COLUMN_LAYOUT_COLUMN_GROW_COLUMN) then
					element:SetWide(grow_column_width)
				else
					element:SetSize(grow_column_width, row_heights[row_i])
				end
				element:SetPos(column_x, row_y)
				column_x = column_x + grow_column_width + self.ColumnPadding
			end
		end
		row_y = row_y + row_heights[row_i] + self.RowPadding
	end
end

derma.DefineControl("OpenPermissions.ColumnLayout", nil, PANEL, "OpenPermissions.ScrollPanel")
--lua/vgui/openpermissions_combobox.lua:
return gluapack()()
--lua/vgui/openpermissions_tooltip.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/libraries/fn.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/libraries/tablecheck.lua:
--[[
tablecheck

WIP

Author: FPtje Falco

Purpose:
Allow validating tables by creating schemas of tables. Inspired by Joi (https://github.com/hapijs/joi)

Requires fn library (https://github.com/FPtje/GModFunctional),

Example:
```lua
local schema = tc.checkTable{
    name   = tc.addHint(isstring, "The name must be a string!"),
    id     = tc.addHint(isnumber, "The id must be a number!"),
    gender = tc.addHint(tc.oneOf{"male", "female", "carp"}, "Gender missing or not recognised!", {"Perhaps you are a carp?"}),
}

local correct, err, hints = schema({name = "Dick", id = 3, gender = "carp"})
print(correct) -- true


local correct, err, hints = schema({name = "Dick", id = 3, gender = "crap"})
print(correct) -- false
print(err) -- Gender missing or not recognised!
PrintTable(hints) -- {"Perhaps you are a carp?"}
```

For further examples, including nesting and combining of schemas, please see the `unitTests` function for now.
--]]

module("tc", package.seeall)

-- Helpers for quick access to metatables
angle                  = FindMetaTable("Angle")
convar                 = FindMetaTable("ConVar")
effectdata             = FindMetaTable("CEffectData")
entity                 = FindMetaTable("Entity")
file                   = FindMetaTable("File")
imaterial              = FindMetaTable("IMaterial")
irestore               = FindMetaTable("IRestore")
isave                  = FindMetaTable("ISave")
itexture               = FindMetaTable("ITexture")
lualocomotion          = FindMetaTable("CLuaLocomotion")
movedata               = FindMetaTable("CMoveData")
navarea                = FindMetaTable("CNavArea")
navladder              = FindMetaTable("CNavLadder")
nextbot                = FindMetaTable("NextBot")
npc                    = FindMetaTable("NPC")
pathfollower           = FindMetaTable("PathFollower")
physobj                = FindMetaTable("PhysObj")
player                 = FindMetaTable("Player")
recipientfilter        = FindMetaTable("CRecipientFilter")
soundpatch             = FindMetaTable("CSoundPatch")
takedamageinfo         = FindMetaTable("CTakeDamageInfo")
usercmd                = FindMetaTable("CUserCmd")
vector                 = FindMetaTable("Vector")
vehicle                = FindMetaTable("Vehicle")
vmatrix                = FindMetaTable("VMatrix")
weapon                 = FindMetaTable("Weapon")

-- Assert function, asserts a property and returns the error if false.
-- Allows f to override err and hints by simply returning them
addHint = function(f, err, hints) return function(...)
    local res = {f(...)}
    res[2] = err
    res[3] = hints

    return unpack(res)
end end

--[[ Validates a table against a schema
Capable of nesting
--]]
function checkTable(schema)
    return function(tbl)
        if not istable(tbl) then
            return false, "Not a table!"
        end

        for k, v in pairs(schema or {}) do
            local correct, err, hints = tbl[v] ~= nil
            if isfunction(v) then correct, err, hints, replace, replaceWith = v(tbl[k], tbl) end


            if not correct then
                err = err or string.format("Element '%s' is corrupt!", k)
                return correct, err, hints
            end

            -- Update the value
            if correct and replace == true and replaceWith then
                tbl[k] = replaceWith
            end
        end

        return true
    end
end

-- Returns whether a value is nil
isnil = fn.Curry(fn.Eq, 2)(nil)

-- Returns whether a value is a color
iscolor = IsColor

-- Returns true on the client
client = function() return CLIENT end

-- returns true on the server
server = function() return SERVER end

-- Optional value, when filled in it must meet the conditions
optional = function(...) return fn.FOr{isnil, ...} end

-- Default value, implies optional. Only works in combination with tc.checkTable
-- Note that the tc.addHint is to be the second parameter of default.
--      tc.addHint(tc.default(x)) does NOT work, default(x, tc.addHint(...)) does.
-- example: tc.checkTable{test = tc.default(3, tc.addHint(isnumber, "must be a number"))}
-- example: tc.checkTable{test = tc.default(3)}
default = function(def, f)
    return function(val, ...)
        if val == nil then
            -- second return value is the default value. Expects parent function to actually change the value
            return true, nil, nil, true, def
        end
        -- Return in if statement rather than "return f and f(val) or true" to allow multiple return values
        if f then return f(val, ...) else return true end
    end
end

-- A table of which each element must meet condition f
-- i.e. "this must be a table of xxx"
-- example: tc.tableOf(isnumber) demands that the table contains only numbers
tableOf = function(f) return function(tbl, parentTbl)
    if not istable(tbl) then return false end
    for _, v in pairs(tbl) do
        local res = {f(v, parentTbl)}
        if not res[1] then
            return unpack(res)
        end
    end

    return true
end end

-- Checks whether a value is amongst a given set of values
-- exapmle: tc.oneOf{"jobs", "entities", "shipments", "weapons", "vehicles", "ammo"}
oneOf = function(f) return fp{table.HasValue, f} end

-- A table that is non-empty, also useful for wrapping around tableOf
-- example: tc.nonEmpty(tc.tableOf(isnumber))
-- example: tc.nonEmpty() -- just checks that the table is non-empty
nonEmpty = function(f) return function(tbl, parentTbl)
    if not istable(tbl) or table.IsEmpty(tbl) then return false end
    if not f then return true end
    return f(tbl, parentTbl)
end end

-- Number check: minimum
min = function(n) return fn.FAnd{isnumber, fp{fn.Lte, n}} end

-- Number check: maximum
max = function(n) return fn.FAnd{isnumber, fp{fn.Gte, n}} end

-- Number check: positive
positive = min(0)

-- Number check: negative
negative = max(0)


-- Whether the input matches regex
-- Note: uses string.match, so it doesn't support full regex.
-- May also allow numbers, since string.match also accepts numbers.
-- Note, also matches on substrings. Use ^pattern$ for a full match.
regex = function(pattern, startpos) return function(val)
    return (isstring(val) or isnumber(val)) and tobool(string.match(val, pattern, startpos))
end end

-- Requires that the value only contains alphanumeric characters
alphanum = regex("^[a-zA-Z0-9]+$")


-- Test cases. Also serve as nice examples
function unitTests()
    local id = 0

    -- unit test helper functions
    local function checkCorrect(correct, err, hints)
        id = id + 1

        if correct ~= true then
            print(id, "Incorrect value that should be correct!", correct, err, hints)
            if hints then PrintTable(hints) end
            return
        end

        print(id, "Correct")
    end

    local function checkIncorrect(correct, err, hints)
        id = id + 1

        if correct then
            print(id, "Correct value that should be incorrect!", correct, err, hints)
            if hints then PrintTable(hints) end
            return
        end

        print(id, "Correct")
    end

    --[[
    Simple value schema. Checks whether the input is a number.
    ]]
    local simpleSchema = tc.addHint(isnumber, "Must be a number!")

    -- This is how a schema is to be used. Just call it with the value you want to check.
    -- In further unit tests, the schema function is immediately called inside the checkCorrect/checIncorrect call for brevity
    local correct, err, hints = simpleSchema(3)

    checkCorrect(correct, err, hints)


    --[[
    Simple table schema
    ]]
    local simpleTableSchema = tc.checkTable{
        name        = tc.addHint(isstring, "The name must be a string!"),
        id          = tc.addHint(isnumber, "The id must be a number!"),
        gender      = tc.addHint(tc.oneOf{"male", "female", "carp"}, "Gender missing or not recognised!", {"Perhaps you are a carp?"}),
        nilthing    = tc.addHint(tc.isnil, "nilthing must be nil"),
        nonEmpty    = tc.addHint(tc.nonEmpty(tc.tableOf(isnumber)), "nonEmpty not table of numbers"),
        optnum      = tc.addHint(tc.optional(isnumber), "optnum given, but not a number"),
        strnum      = tc.addHint(fn.FOr{isstring, isnumber}, "strnum must either be a string or a number"),
        minmax      = tc.addHint(fn.FAnd{tc.min(5), tc.max(10)}),
        pos         = tc.addHint(tc.optional(tc.positive)),
        regx        = tc.addHint(tc.optional(tc.regex("[a-z]+"))),
        letters     = tc.addHint(tc.optional(tc.alphanum)),
    }

    checkCorrect(simpleTableSchema({name = "Dick", id = 3, gender = "carp", nonEmpty = {1,2,3}, strnum = "str", minmax = 5, regx = "asdf", letters = "asdfj", pos = 3}))

    -- Counterexamples, should throw errors
    local badTables = {
        {},
        {name = 1, id = 3, gender = "carp", nonEmpty = {1,2,3}, strnum = "str", minmax = 7},
        {name = "Dick", id = "3", gender = "carp", nonEmpty = {1,2,3}, strnum = "str", minmax = 7},
        {name = "Dick", id = 3, gender = "other", nonEmpty = {1,2,3}, strnum = "str", minmax = 7},
        {name = "Dick", id = 3, gender = "carp", nonEmpty = {}, strnum = "str", minmax = 7},
        {name = "Dick", id = 3, gender = "carp", nonEmpty = {1,2,3}, strnum = {}, minmax = 7},
        {name = "Dick", id = 3, gender = "carp", nonEmpty = {1,2,3}, strnum = "str", optnum = "nope", minmax = 7},
        {name = "Dick", id = 3, gender = "carp", nonEmpty = {1,2,3}, strnum = "str", minmax = 4},
        {name = "Dick", id = 3, gender = "carp", nonEmpty = {1,2,3}, strnum = "str", minmax = 11},
        {name = "Dick", id = 3, gender = "carp", nonEmpty = {1,2,3}, strnum = "str"},
        {name = "Dick", id = 3, gender = "carp", nonEmpty = {1,2,3}, strnum = "str", minmax = 7, regx = "666"},
        {name = "Dick", id = 3, gender = "carp", nonEmpty = {1,2,3}, strnum = "str", minmax = 7, regx = "asdf", letters = ">:D"},
        {name = "Dick", id = 3, gender = "carp", nonEmpty = {1,2,3}, strnum = "str", minmax = 7, regx = "asdf", letters = ">:D", pos = -1},
    }

    for _, tbl in pairs(badTables) do
        checkIncorrect(simpleTableSchema(tbl))
    end

    --[[
    Table Schema with no explicit keys
    ]]
    local nokeysSchema = tc.checkTable{
        tc.addHint(isstring, "The first value must be a string."),
        tc.addHint(isnumber, "The second value must be a number!"),
    }
    checkCorrect(nokeysSchema({"string", 3}))

    --[[
    Nested table schema
    ]]
    local nestedSchema = tc.checkTable{
        nested = tc.checkTable{
            val = tc.addHint(isnumber, "'val' must be a number!")
        }
    }

    checkCorrect(nestedSchema({nested = {val = 3}}))
    checkIncorrect(nestedSchema({}))

    --[[
    Combining schemas using the fn library
    ]]
    local andSchema = fn.FAnd{
        tc.checkTable{
            num = tc.addHint(isnumber, "num is not a number")
        },
        tc.checkTable{
            str = tc.addHint(isstring, "str is not a string")
        }
    }

    checkCorrect(andSchema({num = 1, str = "string!"}))
    checkIncorrect(andSchema({num = 1}))
    checkIncorrect(andSchema({str = "string!"}))

    local orSchema = fn.FOr{
        tc.checkTable{
            num = tc.addHint(isnumber, "num is not a number")
        },
        tc.checkTable{
            str = tc.addHint(isstring, "str is not a string")
        }
    }
    checkCorrect(orSchema({num = 1}))
    checkCorrect(orSchema({str = "string!"}))

    --[[
    Default value with a check
    ]]
    local withDefaultSchema = tc.checkTable{
        value = tc.default(10, tc.addHint(isnumber, "must be a number!"))
    }
    checkCorrect(withDefaultSchema({value = 30}))
    checkIncorrect(withDefaultSchema({value = "string"}))

    local empty = {}
    checkCorrect(withDefaultSchema(empty))
    if empty.value ~= 10 then
        print("Default did NOT set the value to 10!")
    else
        print("Default test OK!")
    end

    --[[
    Default value with no checks
    ]]
    local withDefaultNoCheck = tc.checkTable{
        value = tc.default(10)
    }
    checkCorrect(withDefaultNoCheck({}))
    checkCorrect(withDefaultNoCheck({value = "string"}))

    --[[
    Creating your own checker function that returns an error message
    When both the function and the tc.addHint define error messages, there's a conflict
    ]]
    local function customCheck(val)
        return false, "function error message", {"function hint"}
    end

    local customCheckSchema = tc.checkTable{
        value = tc.addHint(customCheck, "added error message", {"added hint"})
    }
    checkIncorrect(customCheckSchema{value = 1})
    checkIncorrect(customCheckSchema{})

    _, err, hints = customCheckSchema{value = 2}
    if err ~= "added error message" or hints[1] ~= "added hint" then
        print("Wrong conflict solution", err, hints[1])
    else
        print("Conflict solution OK!")
    end

    print("finished")
end

--gamemodes/darkrp/gamemode/modules/medic/sh_interface.lua:
DarkRP.PLAYER.isMedic = DarkRP.stub{
    name = "isMedic",
    description = "Whether this player is a medic.",
    parameters = {
    },
    returns = {
        {
            name = "answer",
            description = "Whether this player is a medic.",
            type = "boolean"
        }
    },
    metatable = DarkRP.PLAYER
}

--gamemodes/darkrp/gamemode/modules/hud/cl_interface.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/f4menu/cl_interface.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/f4menu/cl_interface.lua:
DarkRP.openF4Menu = DarkRP.stub{
    name = "openF4Menu",
    description = "Open the F4 menu.",
    parameters = {
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.closeF4Menu = DarkRP.stub{
    name = "closeF4Menu",
    description = "Close the F4 menu if it's open.",
    parameters = {
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.toggleF4Menu = DarkRP.stub{
    name = "toggleF4Menu",
    description = "Toggle the state of the F4 menu (open or closed).",
    parameters = {
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.getF4MenuPanel = DarkRP.stub{
    name = "getF4MenuPanel",
    description = "Get the F4 menu panel.",
    parameters = {
    },
    returns = {
        {
            name = "panel",
            description = "The F4 menu panel. It will be invalid until the F4 menu has been opened.",
            type = "Panel",
            optional = false
        }
    },
    metatable = DarkRP
}

DarkRP.addF4MenuTab = DarkRP.stub{
    name = "addF4MenuTab",
    description = "Add a tab to the F4 menu.",
    parameters = {
        {
            name = "name",
            description = "The title of the tab.",
            type = "string",
            optional = false
        },
        {
            name = "panel",
            description = "The panel of the tab.",
            type = "Panel",
            optional = false
        }
    },
    returns = {
        {
            name = "index",
            description = "The index of the tab in the menu. This is the number you use for the tab in DarkRP.switchTabOrder.",
            type = "number"
        },
        {
            name = "sheet",
            description = "The tab sheet.",
            type = "Panel"
        }
    },
    metatable = DarkRP
}

DarkRP.removeF4MenuTab = DarkRP.stub{
    name = "removeF4MenuTab",
    description = "Remove a tab from the F4 menu by name.",
    parameters = {
        {
            name = "name",
            description = "The name of the tab it should remove.",
            type = "string",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.switchTabOrder = DarkRP.stub{
    name = "switchTabOrder",
    description = "Switch the order of two tabs.",
    parameters = {
        {
            name = "firstTab",
            description = "The number of the first tab (if it's the second tab, then this number is 2).",
            type = "number",
            optional = false
        },
        {
            name = "secondTab",
            description = "The number of the second tab.",
            type = "number",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.hookStub{
    name = "F4MenuTabs",
    description = "Called when tabs are generated. Add and remove tabs in this hook.",
    parameters = {
    },
    returns = {
    }
}

--gamemodes/darkrp/gamemode/modules/doorsystem/sh_interface.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/base/cl_interface.lua:
DarkRP.PLAYER.isInRoom = DarkRP.stub{
    name = "isInRoom",
    description = "Whether the player is in the same room as the LocalPlayer.",
    parameters = {},
    returns = {
        {
            name = "inRoom",
            description = "Whether the player is in the same room.",
            type = "boolean"
        }
    },
    metatable = DarkRP.PLAYER
}

DarkRP.deLocalise = DarkRP.stub{
    name = "deLocalise",
    description = "Makes sure the string will not be localised when drawn or printed.",
    parameters = {
        {
            name = "text",
            description = "The text to delocalise.",
            type = "string",
            optional = false
        }
    },
    returns = {
        {
            name = "text",
            description = "The delocalised text.",
            type = "string"
        }
    },
    metatable = DarkRP
}

DarkRP.textWrap = DarkRP.stub{
    name = "textWrap",
    description = "Wrap a text around when reaching a certain width.",
    parameters = {
        {
            name = "text",
            description = "The text to wrap.",
            type = "string",
            optional = false
        },
        {
            name = "font",
            description = "The font of the text.",
            type = "string",
            optional = false
        },
        {
            name = "width",
            description = "The maximum width in pixels.",
            type = "number",
            optional = false
        }
    },
    returns = {
        {
            name = "text",
            description = "The wrapped string.",
            type = "string"
        }
    },
    metatable = DarkRP
}

DarkRP.setPreferredJobModel = DarkRP.stub{
    name = "setPreferredJobModel",
    description = "Set the model preferred by the player (if the job allows multiple models).",
    parameters = {
        {
            name = "teamNr",
            description = "The team number of the job.",
            type = "number",
            optional = false
        },
        {
            name = "model",
            description = "The preferred model for the job.",
            type = "string",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.getPreferredJobModel = DarkRP.stub{
    name = "getPreferredJobModel",
    description = "Get the model preferred by the player (if the job allows multiple models).",
    parameters = {
        {
            name = "teamNr",
            description = "The team number of the job.",
            type = "number",
            optional = false
        }
    },
    returns = {
        {
            name = "model",
            description = "The preferred model for the job.",
            type = "string"
        }
    },
    metatable = DarkRP
}

DarkRP.hookStub{
    name = "teamChanged",
    description = "When your team is changed.",
    deprecated = "Use the OnPlayerChangedTeam hook instead.",
    parameters = {
        {
            name = "before",
            description = "The team before the change.",
            type = "number"
        },
        {
            name = "after",
            description = "The team after the change.",
            type = "number"
        }
    },
    returns = {

    }
}

--gamemodes/darkrp/gamemode/libraries/modificationloader.lua:
return gluapack()()
--addons/darkrpmodification/lua/darkrp_config/licenseweapons.lua:
--[[---------------------------------------------------------------------------
License weapons
Add weapons that do NOT require a special license here
ALL other weapons will require a license

Note: this only works if the license setting is enabled
---------------------------------------------------------------------------]]
GM.NoLicense["weapon_physcannon"] = true
GM.NoLicense["weapon_physgun"]    = true
GM.NoLicense["weapon_bugbait"]    = true
GM.NoLicense["gmod_tool"]         = true
GM.NoLicense["gmod_camera"]       = true
GM.NoLicense["dsr_keys"] = true
GM.NoLicense["Inventory"] = true
GM.NoLicense["weapon_fists"] = true

--gamemodes/darkrp/gamemode/config/jobrelated.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/libraries/sh_glorifiedleveling_i18n.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/localization/sh_glorifiedleveling_spanish.lua:

GlorifiedLeveling.i18n.RegisterPhrases( "es-ES", {
    glDarkTheme = "Oscuro",
    glLevelNotHighEnough = "No eres un nivel lo suficientemente alto para eso.",
    glYouReceivedXP = "Has recibido %s XP.",
    glYouReceivedXPKill = "Has recibido %s XP por asesinar a %s.",
    glLevelX = "Nivel %s",
    glLevelUp = "¡Has subido de nivel!",
    glAdminMenuLockdown = "EMERGENCIA",
    glAdminMenuPlayers = "JUGADORES",
    glPlayersOnline = "Jugadores en Línea: %s",
    glSetLevel = "Establecer Nivel",
    glResetLevel = "Reiniciar Nivel",
    glAddXP = "Añadir XP",
    glConfirmation = "Confirmación",
    glYes = "Sí",
    glNo = "No",
    glConfirmationResetLevel = "¿Quieres reiniciar el nivel de ese jugador?",
    glEnterLevel = "Ingresa debajo el nuevo nivel del jugador.",
    glEnterXP = "Ingresa cuanta XP deseas agregar.",
    glEnter = "Aceptar",
    glInvalidAmount = "Cantidad ingresada inválida.",
    glMaxLevel = "Nivel Máximo",

    -- Leaderboard localization.
    glLeaderboard = "Clasificación",
    glName = "Nombre",
    glXP = "XP",
    glLevel = "Nivel",
    glNobodyHere = "Aquí no hay nadie :(",

    -- Perk localization.
    glSkills = "Habilidades",
    glPoints = "%s Puntos",
    glComplete = "Completo",
    glHasteBoots = "Botas Veloces",
    glHasteBootsDescription = "Velocidad Extra",
    glFeralLeaping = "Botas de Salto Salvaje",
    glFeralLeapingDescription = "Mayor altura de salto, menos daño de caída",
    glIronSkin = "Piel de Hierro",
    glIronSkinDescription = "Armadura Extra al aparecer",
    glJuggernaut = "Titán",
    glJuggernautDescription = "Salud Extra al aparecer",
    glBulletAbsorption = "Absorción de Balas",
    glBulletAbsorptionDescription = "Recibes menos daño",
    glHighGradeBullets = "Balas de Alto Grado",
    glHighGradeBulletsDescription = "Realizas más daño"
} )
--addons/glorifiedleveling/lua/glorifiedleveling/modules/integrations/cl_glorifiedleveling_venatusshudmaker.lua:

if not GlorifiedLeveling.Config.SUPPORT_VENATUSS_HUD_MAKER then return end

local HUD_MAKER = UI_MAKER.HUD_MAKER or {}

UI_MAKER.FunctionsGamemodes["GlorifiedLeveling"] = {
    func = function() return GlorifiedLeveling end,
}

HUD_MAKER.ListVariablesTxt["GlorifiedLeveling.Level"] = {
    func = function( ply )
        return GlorifiedLeveling and GlorifiedLeveling.GetPlayerLevel( ply )
    end,
    gm = "GlorifiedLeveling",
    aliases = {
        "%glorifiedleveling_level%"
    },
    matches = {
        "glorifiedleveling",
        "level"
    }
}

HUD_MAKER.ListVariablesTxt["GlorifiedLeveling.XP"] = {
    func = function( ply )
        return GlorifiedLeveling and GlorifiedLeveling.GetPlayerXP( ply )
    end,
    gm = "GlorifiedLeveling",
    aliases = {
        "%glorifiedleveling_xp%"
    },
    matches = {
        "glorifiedleveling",
        "exp",
        "xp"
    }
}

HUD_MAKER.ListVariablesTxt["GlorifiedLeveling.MaxXP"] = {
    func = function( ply )
        return GlorifiedLeveling and GlorifiedLeveling.GetPlayerMaxXP( ply )
    end,
    gm = "GlorifiedLeveling",
    aliases = {
        "%glorifiedleveling_maxxp%"
    },
    matches = {
        "glorifiedleveling",
        "exp",
        "xp",
        "maxxp"
    }
}
--addons/glorifiedleveling/lua/glorifiedleveling/modules/integrations/cl_glorifiedleveling_vrondakis.lua:
-- This may not be the best clientside integration since it can only be used with LocalPlayer, but let's just do it anyway (even though Vrondakis doesn't have it iirc, let's include it anyway)

local plyMeta = FindMetaTable( "Player" )

function plyMeta:getLevel()
    return GlorifiedLeveling.GetPlayerLevel(self)
end

function plyMeta:getXP()
    return GlorifiedLeveling.GetPlayerXP(self)
end

function plyMeta:getMaxXP()
    return GlorifiedLeveling.GetPlayerMaxXP(self)
end

function plyMeta:hasLevel( level )
    return GlorifiedLeveling.PlayerHasLevel( self, level )
end

--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/cl_glorifiedleveling_hud.lua:

if not GlorifiedLeveling.Config.XP_BAR_ENABLED then return end

local ply

local glConfig = GlorifiedLeveling.Config
local gli18n = GlorifiedLeveling.i18n

local oldXP = 0
local themeData = GlorifiedLeveling.Themes.GetCurrent().Data
local multiplierDrawColor = table.Copy( themeData.Colors.xpBarMultiplierDrawColor )
local multiplierApproachingDark = true

local xpBarWidth
local xpBarHeight = 31
local barOffsetWidth
local barOffsetHeight
local levelUpTextOffset = 56

local function SetScreenVars()
    xpBarWidth = glConfig.XP_BAR_WIDTH()
    barOffsetWidth = glConfig.XP_BAR_WIDTH_OFFSET( xpBarWidth )
    barOffsetHeight = glConfig.XP_BAR_HEIGHT_OFFSET( xpBarHeight )
    if glConfig.LEVEL_UP_ON_TOP then
        levelUpTextOffset = -10
    end
end
SetScreenVars()
hook.Add( "OnScreenSizeChanged", "GlorifiedLeveling.HUD.OnScreenSizeChanged", SetScreenVars )

local function drawCircle( x, y, radius, seg )
    local cir = {}

    table.insert( cir, { x = x, y = y, u = 0.5, v = 0.5 } )
    for i = 0, seg do
        local a = math.rad( ( i / seg ) * -360 )
        table.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )
    end

    local a = math.rad( 0 )
    table.insert( cir, { x = x + math.sin( a ) * radius, y = y + math.cos( a ) * radius, u = math.sin( a ) / 2 + 0.5, v = math.cos( a ) / 2 + 0.5 } )

    surface.DrawPoly( cir )
end

local function approachColor( from, to, amount )
    from.r = math.Approach( from.r, to.r, amount )
    from.g = math.Approach( from.g, to.g, amount )
    from.b = math.Approach( from.b, to.b, amount )
    return from
end

local function rainbowColor( speed, alpha )
    local rainbowCol = HSVToColor( CurTime() * speed % 360, 1, 1 )
    if alpha then return ColorAlpha( rainbowCol, alpha )
    else return rainbowCol end
end
/*
local rainbowPhysgunEnabled = GlorifiedLeveling.Config.MAX_LEVEL_RAINBOW_PHYSGUN
hook.Add( "Think", "GlorifiedLeveling.RainbowPhysgun.Think", function()
    if not rainbowPhysgunEnabled then return end
    if not ply then ply = LocalPlayer() end

    if ply and ply:Alive() and GlorifiedLeveling.GetPlayerLevel() >= GlorifiedLeveling.Config.MAX_LEVEL and ply:GetActiveWeapon():IsValid() and ply:GetActiveWeapon():GetClass() == "weapon_physgun" then
        local rainbowCol = rainbowColor( 15 )
        ply:SetWeaponColor( Vector( rainbowCol.r / 255, rainbowCol.g / 255, rainbowCol.b / 255 ) )
    end
end )
*/
local levelUpAlpha = 0
local barAlpha = 0
local plyLeveledUp = false
hook.Add( "GlorifiedLeveling.LevelUp", "GlorifiedLeveling.HUD.PlayerLeveledUp", function( leveledPly )
    if leveledPly ~= LocalPlayer() then return end
    plyLeveledUp = true
    if timer.Exists( "GlorifiedLeveling.LevelUpdatedRemovalTimer" ) then timer.Start( "GlorifiedLeveling.LevelUpdatedRemovalTimer" ) end
    timer.Create( "GlorifiedLeveling.LevelUpdatedRemovalTimer", 5, 1, function()
        plyLeveledUp = false
    end )
end )

hook.Add( "GlorifiedLeveling.XPUpdated", "GlorifiedLeveling.HUD.XPUpdated", function( gainedPly )
    if gainedPly ~= LocalPlayer() then return end
    plyGainedXP = true
    if timer.Exists( "GlorifiedLeveling.XPUpdatedRemovalTimer" ) then timer.Start( "GlorifiedLeveling.XPUpdatedRemovalTimer" ) end
    timer.Create( "GlorifiedLeveling.XPUpdatedRemovalTimer", 10, 1, function()
        plyGainedXP = false
    end )
end )

hook.Add( "HUDPaint", "GlorifiedLeveling.HUD.HUDPaint", function()
    if not ply then ply = LocalPlayer() end

    local playerLevel = GlorifiedLeveling.GetPlayerLevel()
    local maxLevel = playerLevel >= GlorifiedLeveling.Config.MAX_LEVEL

    local finalBarAlpha = 0
    if ( GlorifiedLeveling.Config.SHOW_BAR_ON_XP_GAIN_ONLY and plyGainedXP ) or ( not GlorifiedLeveling.Config.SHOW_BAR_ON_XP_GAIN_ONLY and not maxLevel ) or ( GlorifiedLeveling.Config.SHOW_BAR_ON_MAX_LEVEL_ALWAYS and maxLevel ) or ( input.IsKeyDown( GlorifiedLeveling.Config.SHOW_BAR_KEY ) ) then finalBarAlpha = 255 end
    barAlpha = Lerp( FrameTime() * 8, barAlpha, finalBarAlpha )

    local xpBarBackgroundColor = ColorAlpha( themeData.Colors.xpBarBackgroundDrawColor, barAlpha )

    if not maxLevel then
        local playerXP = GlorifiedLeveling.GetPlayerXP()
        local playerMaxXP = GlorifiedLeveling.GetPlayerMaxXP()

        oldXP = Lerp( FrameTime() * 4, oldXP, playerXP )
        local roundedOldXP = string.Comma( math.Round( oldXP ) )
        local percentage = math.Clamp( ( oldXP / playerMaxXP ) * ( xpBarWidth - 15 ), 0, xpBarWidth - 15 )

        draw.RoundedBoxEx( 15, barOffsetWidth - xpBarWidth / 2, barOffsetHeight + 10, xpBarWidth, xpBarHeight, xpBarBackgroundColor, false, true, false, true )
        draw.RoundedBoxEx( 10, barOffsetWidth - xpBarWidth / 2, barOffsetHeight + 16, percentage, 20, ColorAlpha( themeData.Colors.xpBarXPDrawColor, barAlpha ), false, true, false, true )

        surface.SetDrawColor( xpBarBackgroundColor )
        draw.NoTexture()
        drawCircle( barOffsetWidth - xpBarWidth / 2 - 15, barOffsetHeight + 27, 22, 180 )
        draw.SimpleText( playerLevel, "GlorifiedLeveling.HUD.Level", barOffsetWidth - xpBarWidth / 2 - 16, barOffsetHeight + 28, ColorAlpha( themeData.Colors.xpBarTextDrawColor, barAlpha ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

        if plyLeveledUp or levelUpAlpha ~= 0 then
            levelUpAlpha = Lerp( FrameTime(), levelUpAlpha, plyLeveledUp and 255 or 0 )
            surface.SetFont( "GlorifiedLeveling.HUD.LevelUp" )
            local levelUpWidth = surface.GetTextSize( gli18n.GetPhrase( "glLevelUp" ) )
            draw.RoundedBox( 17, barOffsetWidth - 15 - levelUpWidth / 2 - 15, barOffsetHeight + levelUpTextOffset - 10, levelUpWidth + 30, 34, ColorAlpha( themeData.Colors.xpBarBackgroundDrawColor, math.Clamp( levelUpAlpha, 0, themeData.Colors.xpBarBackgroundDrawColor.a ) ) )
            draw.SimpleText( gli18n.GetPhrase( "glLevelUp" ), "GlorifiedLeveling.HUD.LevelUp", barOffsetWidth - 15 - levelUpWidth / 2, barOffsetHeight + levelUpTextOffset - 5, rainbowColor( 100, levelUpAlpha ) )
        end

        if glConfig.MULTIPLIER_AMOUNT_CUSTOMFUNC( ply ) > 1 then
            if multiplierApproachingDark then
                multiplierDrawColor = approachColor( multiplierDrawColor, themeData.Colors.xpBarMultiplierDrawColorDarker, 0.1 )
                if multiplierDrawColor == themeData.Colors.xpBarMultiplierDrawColorDarker then
                    multiplierApproachingDark = false
                end
            else
                multiplierDrawColor = approachColor( multiplierDrawColor, themeData.Colors.xpBarMultiplierDrawColor, 0.1 )
                if multiplierDrawColor == themeData.Colors.xpBarMultiplierDrawColor then
                    multiplierApproachingDark = true
                end
            end

            surface.SetDrawColor( ColorAlpha( multiplierDrawColor, barAlpha ) )
            draw.NoTexture()
            drawCircle( barOffsetWidth + xpBarWidth / 2 + 20, barOffsetHeight + 26, 16, 180 )

            draw.SimpleText( "x" .. glConfig.MULTIPLIER_AMOUNT_CUSTOMFUNC( ply ), "GlorifiedLeveling.HUD.Multiplier", barOffsetWidth + xpBarWidth / 2 + 20, barOffsetHeight + 26, ColorAlpha( themeData.Colors.xpBarMultiplierTextDrawColor, barAlpha ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        end

        if playerXP / playerMaxXP > 0.3 then
            draw.SimpleText( roundedOldXP .. " XP", "GlorifiedLeveling.HUD.Experience", barOffsetWidth - xpBarWidth / 2 + percentage / 2, barOffsetHeight + 26, ColorAlpha( themeData.Colors.xpBarTextDrawColor, barAlpha ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        else
            if playerXP / playerMaxXP > 0.05 then
                draw.SimpleText( roundedOldXP .. " XP", "GlorifiedLeveling.HUD.Experience", barOffsetWidth - xpBarWidth / 2 + percentage + 8, barOffsetHeight + 26, ColorAlpha( themeData.Colors.xpBarTextDrawColor, barAlpha ), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
            else
                draw.SimpleText( roundedOldXP .. " XP", "GlorifiedLeveling.HUD.Experience", barOffsetWidth - 15, barOffsetHeight + 26, ColorAlpha( themeData.Colors.xpBarTextDrawColor, barAlpha ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
            end
        end
    else
        draw.RoundedBoxEx( 15, barOffsetWidth - xpBarWidth / 2, barOffsetHeight + 10, xpBarWidth, xpBarHeight, xpBarBackgroundColor, false, true, false, true )
        if glConfig.MAX_LEVEL_RAINBOW_XP_BAR then
            draw.RoundedBoxEx( 10, barOffsetWidth - xpBarWidth / 2, barOffsetHeight + 16, xpBarWidth - 8, 20, ColorAlpha( rainbowColor( 15 ), barAlpha ), false, true, false, true )
            draw.SimpleTextOutlined( gli18n.GetPhrase( "glMaxLevel"), "GlorifiedLeveling.HUD.Experience", barOffsetWidth - 15, barOffsetHeight + 26, ColorAlpha( themeData.Colors.xpBarTextDrawColor, barAlpha ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER, 1, Color( 0, 0, 0, barAlpha ) )
        else
            draw.RoundedBoxEx( 10, barOffsetWidth - xpBarWidth / 2, barOffsetHeight + 16, xpBarWidth - 8, 20, ColorAlpha( themeData.Colors.xpBarXPDrawColor, barAlpha ), false, true, false, true )
            draw.SimpleText( gli18n.GetPhrase( "glMaxLevel"), "GlorifiedLeveling.HUD.Experience", barOffsetWidth - 15, barOffsetHeight + 26, ColorAlpha( themeData.Colors.xpBarTextDrawColor, barAlpha ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        end

        surface.SetDrawColor( xpBarBackgroundColor )
        draw.NoTexture()
        drawCircle( barOffsetWidth - xpBarWidth / 2 - 15, barOffsetHeight + 27, 22, 180 )
        if glConfig.MAX_LEVEL_RAINBOW_LEVEL_TEXT then
            draw.SimpleText( playerLevel, "GlorifiedLeveling.HUD.Level", barOffsetWidth - xpBarWidth / 2 - 16, barOffsetHeight + 28, ColorAlpha( rainbowColor( 15 ), barAlpha ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        else
            draw.SimpleText( playerLevel, "GlorifiedLeveling.HUD.Level", barOffsetWidth - xpBarWidth / 2 - 16, barOffsetHeight + 28, ColorAlpha( themeData.Colors.xpBarTextDrawColor, barAlpha ), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        end
    end
end )
--addons/zeros_retrominer_v2.3.6/lua/darkrp_modules/zrmine/sh_zgm_darkrp.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

TEAM_ZRMINE_MINER = DarkRP.createJob("Basit Madenci", {
	color = Color(20, 150, 20, 255),
	model = {"models/player/group01/male_02.mdl"},
	description = [[Paraya dayalı bir 
	 Eski usul madencilik senin işin! Modern makineler yerine klasik kazma ve kürek kullanarak yerin derinliklerinden değerli madenleri çıkarıyorsun.
	 Toz, kir ve zorluklar seni yıldırmaz, çünkü sen gerçek bir emekçisin.
	 Ancak unutma, madenler tehlikelerle doludur… Çökme riski, gaz sızıntıları ve rakip madenciler her zaman peşinde olabilir!"

	
	-Raid Yapamaz.
	-Mug Atamaz.
	-Banka Soyamaz.
	-İllegal Aktivitelerde Bulunamaz.	
	]],
	weapons = {"zrms_pickaxe","zrms_builder"},
	command = "zrmine_retrominer01",
	max = 6,
	salary = 450,
	admin = 0,
	vote = false,
	category = "Sivil",
	hasLicense = false
})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

DarkRP.createCategory{
	name = "RetroMiner",
	categorises = "entities",
	startExpanded = true,
	color = Color(255, 107, 0, 255),
	canSee = function(ply) return true end,
	sortOrder = 104
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

DarkRP.createEntity("Gravel - Crate", {
	ent = "zrms_gravelcrate",
	model = "models/zerochain/props_mining/zrms_refiner_basket.mdl",
	price = 250,
	max = 6,
	cmd = "buyzrms_gravelcrate",
	allowed = TEAM_ZRMINE_MINER,
	category = "RetroMiner"
})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

DarkRP.createEntity("Refiner - Crate", {
	ent = "zrms_basket",
	model = "models/zerochain/props_mining/zrms_refiner_basket.mdl",
	price = 250,
	max = 12,
	cmd = "buyzrms_basket",
	allowed = TEAM_ZRMINE_MINER,
	category = "RetroMiner"
})

DarkRP.createEntity("Storagecrate", {
	ent = "zrms_storagecrate",
	model = "models/zerochain/props_mining/zrms_storagecrate.mdl",
	price = 25,
	max = 6,
	cmd = "buyzrms_storagecrate",
	allowed = TEAM_ZRMINE_MINER,
	category = "RetroMiner"
})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

DarkRP.createEntity("Melter", {
	ent = "zrms_melter",
	model = "models/zerochain/props_mining/zrms_melter.mdl",
	price = 7500,
	max = 2,
	cmd = "buyzrms_melter",
	allowed = TEAM_ZRMINE_MINER,
	category = "RetroMiner"
})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/oneprint/lua/darkrp_modules/oneprint/sh_entities.lua:
return gluapack()()
--addons/darkrpmodification/lua/darkrp_customthings/ammo.lua:
--
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/libraries/cl_glorifiedhandcuffs_themes.lua:

GlorifiedHandcuffs.Themes = {}

local registeredThemes = {}
local defaultTheme = "Default"
local selectedTheme

function GlorifiedHandcuffs.Themes.Register( id, name, data )
    if not registeredThemes[id] then
        registeredThemes[id] = {}
    end

    registeredThemes[id].DisplayName = name
    registeredThemes[id].Data = id == defaultTheme and data or table.Merge( GlorifiedHandcuffs.Themes.Get( defaultTheme ).Data, data )
end

function GlorifiedHandcuffs.Themes.Get( id )
    return registeredThemes[id] or registeredThemes[defaultTheme] or false
end

function GlorifiedHandcuffs.Themes.GetCurrent()
    return GlorifiedHandcuffs.Themes.Get( selectedTheme )
end

function GlorifiedHandcuffs.Themes.GetAll()
    return registeredThemes
end

function GlorifiedHandcuffs.Themes.GetByName( name )
    local returnedTheme = registeredThemes[defaultTheme]
    for k, v in pairs( registeredThemes ) do
        if v.DisplayName == name then returnedTheme = v break end
    end
    return returnedTheme
end

function GlorifiedHandcuffs.Themes.GenerateFonts()
    local fontsTable = GlorifiedHandcuffs.Themes.GetCurrent().Data.Fonts
    if fontsTable then
        for k, v in pairs( fontsTable ) do
            if isfunction( v.size ) then
                v.size = v.size()
            end

            surface.CreateFont( "GlorifiedHandcuffs." .. k, v )
        end
    end
end

function GlorifiedHandcuffs.Themes.Select( id )
    if registeredThemes[id] then
        GlorifiedHandcuffs.Themes.GenerateFonts()

        cookie.Set( "GlorifiedHandcuffs.Theme", tostring( id ) )
        selectedTheme = tostring( id )

        hook.Run( "GlorifiedHandcuffs.ThemeUpdated", GlorifiedHandcuffs.Themes.GetCurrent() )
    end
end

hook.Add( "OnScreenSizeChanged", "GlorifiedHandcuffs.Themes.OnScreenSizeChanged", function()
    GlorifiedHandcuffs.Themes.GenerateFonts()
end )

hook.Add( "InitPostEntity", "GlorifiedHandcuffs.Themes.InitPostEntity", function()
    GlorifiedHandcuffs.Themes.Select( cookie.GetString( "GlorifiedHandcuffs.Theme", defaultTheme ) )
end )

concommand.Add( "glorifiedhandcuffs_theme", function( ply, args )
    if ply != LocalPlayer() then return end
    local theme = string.lower( args[1] )
    GlorifiedHandcuffs.Themes.Select( theme )
end )
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_customize2.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_laser.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_reload.lua:


function SWEP:GetReloadTime()
    -- Only works with classic mag-fed weapons.
    local mult = self:GetBuff_Mult("Mult_ReloadTime")
    local anim = self:SelectReloadAnimation()

    if !self.Animations[anim] then return false end

    local full = self:GetAnimKeyTime(anim) * mult
    local magin = self:GetAnimKeyTime(anim, true) * mult

    return { full, magin }
end

function SWEP:SetClipInfo(load)
    load = self:GetBuff_Hook("Hook_SetClipInfo", load) or load
    self.LastLoadClip1 = load - self:Clip1()
    self.LastClip1 = load
end

function SWEP:Reload()
    if IsValid(self:GetHolster_Entity()) then return end
    if self:GetHolster_Time() > 0 then return end

    if self:GetOwner():IsNPC() then
        return
    end

    if self:GetState() == ArcCW.STATE_CUSTOMIZE then
        return
    end

    -- Switch to UBGL
    if self:GetBuff_Override("UBGL") and self:GetOwner():KeyDown(IN_USE) then
        if self:GetInUBGL() then
            --net.Start("arccw_ubgl")
            --net.WriteBool(false)
            --net.SendToServer()

            self:DeselectUBGL()
        else
            --net.Start("arccw_ubgl")
            --net.WriteBool(true)
            --net.SendToServer()

            self:SelectUBGL()
        end

        return
    end

    if self:GetInUBGL() then
        if self:GetNextSecondaryFire() > CurTime() then return end
            self:ReloadUBGL()
        return
    end

    if self:GetNextPrimaryFire() >= CurTime() then return end
    -- if !game.SinglePlayer() and !IsFirstTimePredicted() then return end


    if self.Throwing then return end
    if self.PrimaryBash then return end

    -- with the lite 3D HUD, you may want to check your ammo without reloading
    local Lite3DHUD = self:GetOwner():GetInfo("arccw_hud_3dfun") == "1"
    if self:GetOwner():KeyDown(IN_WALK) and Lite3DHUD then
        return
    end

    if self:GetMalfunctionJam() then
        local r = self:MalfunctionClear()
        if r then return end
    end

    if !self:GetMalfunctionJam() and self:Ammo1() <= 0 and !self:HasInfiniteAmmo() then return end

    if self:HasBottomlessClip() then return end

    if self:GetBuff_Hook("Hook_PreReload") then return end

    -- if we must dump our clip when reloading, our reserve ammo should be more than our clip
    local dumpclip = self:GetBuff_Hook("Hook_ReloadDumpClip")
    if dumpclip and !self:HasInfiniteAmmo() and self:Clip1() >= self:Ammo1() then
        return
    end

    self.LastClip1 = self:Clip1()

    local reserve = self:Ammo1()

    reserve = reserve + self:Clip1()
    if self:HasInfiniteAmmo() then reserve = self:GetCapacity() + self:Clip1() end

    local clip = self:GetCapacity()

    local chamber = math.Clamp(self:Clip1(), 0, self:GetChamberSize())
    if self:GetNeedCycle() then chamber = 0 end

    local load = math.Clamp(clip + chamber, 0, reserve)

    if !self:GetMalfunctionJam() and load <= self:Clip1() then return end

    self:SetBurstCount(0)

    local shouldshotgunreload = self:GetBuff_Override("Override_ShotgunReload")
    local shouldhybridreload = self:GetBuff_Override("Override_HybridReload")

    if shouldshotgunreload == nil then shouldshotgunreload = self.ShotgunReload end
    if shouldhybridreload == nil then shouldhybridreload = self.HybridReload end

    if shouldhybridreload then
        shouldshotgunreload = self:Clip1() != 0
    end

    if shouldshotgunreload and self:GetShotgunReloading() > 0 then return end

    local mult = self:GetBuff_Mult("Mult_ReloadTime")

    if shouldshotgunreload then
        local anim = "sgreload_start"
        local insertcount = 0

        local empty = self:Clip1() == 0 --or self:GetNeedCycle()

        if self.Animations.sgreload_start_empty and empty then
            anim = "sgreload_start_empty"
            empty = false
            if (self.Animations.sgreload_start_empty or {}).ForceEmpty == true then
                empty = true
            end

            insertcount = (self.Animations.sgreload_start_empty or {}).RestoreAmmo or 1
        else
            insertcount = (self.Animations.sgreload_start or {}).RestoreAmmo or 0
        end

        anim = self:GetBuff_Hook("Hook_SelectReloadAnimation", anim) or anim

        local time = self:GetAnimKeyTime(anim)
        local time2 = self:GetAnimKeyTime(anim, true)

        if time2 >= time then
            time2 = 0
        end

        if insertcount > 0 then
            self:SetMagUpCount(insertcount)
            self:SetMagUpIn(CurTime() + time2 * mult)
        end
        self:PlayAnimation(anim, mult, true, 0, true, nil, true)

        self:SetReloading(CurTime() + time * mult)

        self:SetShotgunReloading(empty and 4 or 2)
    else
        local anim = self:SelectReloadAnimation()

        if !self.Animations[anim] then print("Invalid animation \"" .. anim .. "\"") return end

        self:PlayAnimation(anim, mult, true, 0, false, nil, true)

        local reloadtime = self:GetAnimKeyTime(anim, true) * mult
        local reloadtime2 = self:GetAnimKeyTime(anim, false) * mult

        self:SetNextPrimaryFire(CurTime() + reloadtime2)
        self:SetReloading(CurTime() + reloadtime2)

        self:SetMagUpCount(0)
        self:SetMagUpIn(CurTime() + reloadtime)
    end

    self:SetClipInfo(load)
    if game.SinglePlayer() then
        self:CallOnClient("SetClipInfo", tostring(load))
    end

    for i, k in pairs(self.Attachments) do
        if !k.Installed then continue end
        local atttbl = ArcCW.AttachmentTable[k.Installed]

        if atttbl.DamageOnReload then
            self:DamageAttachment(i, atttbl.DamageOnReload)
        end
    end

    if !self.ReloadInSights then
        self:ExitSights()
        self.Sighted = false
    end

    self:GetBuff_Hook("Hook_PostReload")
end

function SWEP:ReloadTimed()
    -- yeah my function names are COOL and QUIRKY and you can't say a DAMN thing about it.
    self:RestoreAmmo(self:GetMagUpCount() != 0 and self:GetMagUpCount())
    self:SetMagUpCount(0)
    self:SetLastLoad(self:Clip1())
    self:SetNthReload(self:GetNthReload() + 1)
end

function SWEP:Unload()
    if !self:GetOwner():IsPlayer() then return end
    if SERVER and self:Clip1() != ArcCW.BottomlessMagicNumber then
        self:GetOwner():GiveAmmo(self:Clip1(), self.Primary.Ammo or "", true)
    end
    self:SetClip1(0)
end

function SWEP:HasBottomlessClip()
    if ArcCW.ConVars["mult_bottomlessclip"]:GetBool() then return true end
    if self.BottomlessClip or self:GetBuff_Override("Override_BottomlessClip") then return true end
    return false
end

function SWEP:HasInfiniteAmmo()
    if ArcCW.ConVars["mult_infiniteammo"]:GetBool() then return true end
    if self:GetBuff_Override("Override_InfiniteAmmo", self.InfiniteAmmo) then return true end
    return false
end

function SWEP:RestoreAmmo(count)
    if self:GetOwner():IsNPC() then return end

    local chamber = math.Clamp(self:Clip1(), 0, self:GetChamberSize())
    if self:GetNeedCycle() then chamber = 0 end

    local clip = self:GetCapacity()

    count = count or (clip + chamber)

    local reserve = (self:HasInfiniteAmmo() and math.huge or self:Ammo1())

    local dumpclip = self:GetBuff_Hook("Hook_ReloadDumpClip")
    if !dumpclip then
        reserve = reserve + self:Clip1()
    end

    local load = math.Clamp(self:Clip1() + count, 0, reserve)
    load = math.Clamp(load, 0, clip + chamber)
    reserve = reserve - load

    if !self:HasInfiniteAmmo() then
        self:GetOwner():SetAmmo(reserve, self.Primary.Ammo, true)
    end
    self:SetClip1(load)
end

-- local lastframeclip1 = 0

SWEP.LastClipOutTime = 0

function SWEP:GetVisualBullets()
    local h = self:GetBuff_Hook("Hook_GetVisualBullets")
    if h then return h end

    local _clip = self:Clip1()
    local _ammo = self:Ammo1()

    if self:HasInfiniteAmmo() then
        _ammo = math.huge
    end
    if self:HasBottomlessClip() then
        _clip = _ammo
    end

    if self.LastClipOutTime > CurTime() then
        return self.LastClip1_B or _clip
    else
        self.LastClip1_B = _clip

        if self:GetReloading() and !(self.ShotgunReload or (self.HybridReload and _clip == 0)) then
            return math.Clamp(_clip + _ammo, 0, self:GetCapacity() + self:GetChamberSize())
        else
            return _clip
        end
    end
end

function SWEP:GetVisualClip()
    -- local reserve = self:Ammo1()
    -- local chamber = math.Clamp(self:Clip1(), 0, self:GetChamberSize())
    -- local abouttoload = math.Clamp(self:GetCapacity() + chamber, 0, reserve + self:Clip1())

    -- local h = self:GetBuff_Hook("Hook_GetVisualClip")

    -- if h then return h end
    -- if self.LastClipOutTime > CurTime() then
    --     return self.LastClip1 or self:Clip1()
    -- else
    --     if !self.RevolverReload then
    --         self.LastClip1 = self:Clip1()
    --     else
    --         if self:Clip1() > lastframeclip1 then
    --             self.LastClip1 = self:Clip1()
    --         end

    --         lastframeclip1 = self:Clip1()
    --     end

    --     if self:GetReloading() and !(self.ShotgunReload or (self.HybridReload and self:Clip1() == 0)) then
    --         return abouttoload
    --     else
    --         return self.LastClip1 or self:Clip1()
    --     end
    -- end

    local reserve = self:Ammo1()
    if self:HasInfiniteAmmo() then
        reserve = math.huge
    end
    local chamber = math.Clamp(self:Clip1(), 0, self:GetChamberSize())
    local abouttoload = math.Clamp(self:GetCapacity() + chamber, 0, reserve + self:Clip1())

    local h = self:GetBuff_Hook("Hook_GetVisualClip")

    if h then return h end

    if self.LastClipOutTime > CurTime() then
        return self:GetLastLoad() or self:Clip1()
    end

    if self.RevolverReload then
        if self:GetReloading() and !(self.ShotgunReload or (self.HybridReload and self:Clip1() == 0)) then
            return abouttoload
        else
            return self:GetLastLoad() or self:Clip1()
        end
    else
        return self:Clip1()
    end
end

function SWEP:GetVisualLoadAmount()
    return self.LastLoadClip1 or self:Clip1()
end

function SWEP:SelectReloadAnimation()
    local ret

    if self.Animations.reload_empty and self:Clip1() == 0 then
        ret = "reload_empty"
    else
        ret = "reload"
    end

    ret = self:GetBuff_Hook("Hook_SelectReloadAnimation", ret) or ret

    return ret
end

function SWEP:ReloadInsert(empty)
    local total = self:GetCapacity()

    -- if !game.SinglePlayer() and !IsFirstTimePredicted() then return end

    if !empty and !self:GetNeedCycle() then
        total = total + (self:GetBuff("ChamberLoadNonEmpty", true) or self:GetChamberSize())
    else
        total = total + (self:GetBuff("ChamberLoadEmpty", true) or 0)
    end

    local mult = self:GetBuff_Mult("Mult_ReloadTime")

    if self:Clip1() >= total or (self:Ammo1() == 0 and !self:HasInfiniteAmmo()) or ((self:GetShotgunReloading() == 3 or self:GetShotgunReloading() == 5) and self:Clip1() > 0) then
        local ret = "sgreload_finish"

        if empty then
            if self.Animations.sgreload_finish_empty then
                ret = "sgreload_finish_empty"
            end
            if self:GetNeedCycle() then
                self:SetNeedCycle(false)
            end
        end

        ret = self:GetBuff_Hook("Hook_SelectReloadAnimation", ret) or ret

        self:PlayAnimation(ret, mult, true, 0, true, nil, true)
        self:SetReloading(CurTime() + (self:GetAnimKeyTime(ret, true) * mult))

        self:SetTimer(self:GetAnimKeyTime(ret, true) * mult,
        function()
            self:SetNthReload(self:GetNthReload() + 1)
            if self:GetOwner():KeyDown(IN_ATTACK2) then
                self:EnterSights()
            end
        end)

        self:SetShotgunReloading(0)
    else
        local insertcount = self:GetBuff_Override("Override_InsertAmount") or 1
        local insertanim = "sgreload_insert"

        local ret = self:GetBuff_Hook("Hook_SelectInsertAnimation", {count = insertcount, anim = insertanim, empty = empty})

        if ret then
            insertcount = ret.count
            insertanim = ret.anim
        end

        local load = self:GetCapacity() + math.min(self:Clip1(), self:GetChamberSize())
        if load - self:Clip1() > self:Ammo1() then load = self:Clip1() + self:Ammo1() end
        self:SetClipInfo(load)
        if game.SinglePlayer() then
            self:CallOnClient("SetClipInfo", tostring(load))
        end

        local time = self:GetAnimKeyTime(insertanim, false)
        local time2 = self:GetAnimKeyTime(insertanim, true)

        if time2 >= time then
            time2 = 0
        end

        self:SetMagUpCount(insertcount)
        self:SetMagUpIn(CurTime() + time2 * mult)

        self:SetReloading(CurTime() + time * mult)

        self:PlayAnimation(insertanim, mult, true, 0, true, nil, true)
        self:SetShotgunReloading(empty and 4 or 2)
    end
end

function SWEP:GetCapacity()
    local clip = self.RegularClipSize or self.Primary.ClipSize

    if !self.RegularClipSize then
        self.RegularClipSize = self.Primary.ClipSize
    end

    local level = 1

    if self:GetBuff_Override("MagExtender") then
        level = level + 1
    end

    if self:GetBuff_Override("MagReducer") then
        level = level - 1
    end

    if level == 0 then
        clip = self.ReducedClipSize
    elseif level == 2 then
        clip = self.ExtendedClipSize
    end

    clip = self:GetBuff("ClipSize", true, clip) or clip

    local ret = self:GetBuff_Hook("Hook_GetCapacity", clip)

    clip = ret or clip

    clip = math.Clamp(math.Round(clip), 0, math.huge)

    self.Primary.ClipSize = clip

    return clip
end

function SWEP:GetChamberSize()
    return self:GetBuff("ChamberSize") --(self:GetBuff_Override("Override_ChamberSize") or self.ChamberSize) + self:GetBuff_Add("Add_ChamberSize")
end
--lua/weapons/arccw_mw2_aa12.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.CamAttachment = 3

SWEP.PrintName = "AA-12"
SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = "Fully automatic, low ammo."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2_2/c_aa12_1.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-8, 3, -6),
    ang = Angle(-10, 0, 180),
    scale = 1.125
}
SWEP.WorldModel = "models/weapons/w_shot_xm1014.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 20
SWEP.DamageMin = 15
SWEP.Range = 300 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 1
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 8 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 16
SWEP.ReducedClipSize = 4

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 3
SWEP.RecoilSide = 2

SWEP.Delay = 0.15 -- 60 / RPM.
SWEP.Num = 8 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 125 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 300 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 275

SWEP.Primary.Ammo = "buckshot" -- what ammo type the gun uses

SWEP.ShootVol = 120 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/shot_aa12.wav"
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/shot_aa12.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/shot_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_m3"
SWEP.ShellModel = "models/shells/shell_12gauge.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.4
SWEP.SightTime = 0.3

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.83, -7.06, 0.439),
    Ang = Angle(0, 0, 0),
    ViewModelFOV = 65 / 1.18,
    Magnification = 1.18,
}


SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(10.479, 0, -1.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 14.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.ExtraSightDist = 5

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["grip"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        WMBodygroups = {},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
}

SWEP.Attachments = {
	{
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 0, 3.7),
            vang = Angle(0, 0, 0),
            wang = Angle(-9.738, 0, 180)
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle_shotgun",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(22, 0, 1.9),
            vang = Angle(0, 0, 0),
            wpos = Vector(26.648, 0.782, -8.042),
            wang = Angle(-9.79, 0, 180)
        },
		VMScale = Vector(2.8, 1.4, 1.4),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip","foregrip_mw2exclusive"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(10, 0, -1.7),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-10.216, 0, 180)
        },
        SlideAmount = {
            vmin = Vector(9, 0, 0.3),
            vmax = Vector(17, 0, 1),
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(16, -1.1, 2.2),
            vang = Angle(0, 0, 90),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_shotgun"
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG",
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
    {
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2, -0.6, 1.5),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.253, -3.298),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[3].Installed then
        return anim .. "_grip"
    end
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 1/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 24/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 26/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["fire"] = {
        Source = "fire",
        Time = 4/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 4/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 66/24,
        MinProgress = 2,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_clipout_v1.wav", 	t = 15/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_clipin_v1.wav", 	    t = 43/24},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        Time = 86/24,
        MinProgress = 2,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_clipout_v1.wav", 	t = 14/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_clipin_v1.wav", 	    t = 47/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_chamber_v1.wav",		t = 64/24},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
---------------------------------------------------
    ["idle_grip"] = {
        Source = "idle_grip",
        Time = 100/30
    },
    ["enter_sprint_grip"] = {
        Source = "sprint_in_grip",
        Time = 10/30
    },
    ["idle_sprint_grip"] = {
        Source = "sprint_loop_grip",
        Time = 30/40
    },
    ["exit_sprint_grip"] = {
        Source = "sprint_out_grip",
        Time = 10/30
    },
    ["draw_grip"] = {
        Source = "pullout_grip",
        Time = 24/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster_grip"] = {
        Source = "putaway_grip",
        Time = 26/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["fire_grip"] = {
        Source = "fire_grip",
        Time = 4/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_grip"] = {
        Source = "fire_ads_grip",
        Time = 4/30,
        ShellEjectAt = 0,
    },
    ["reload_grip"] = {
        Source = "reload_grip",
        Time = 66/24,
        MinProgress = 2,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_clipout_v1.wav", 	t = 15/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_clipin_v1.wav", 	    t = 43/24},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty_grip"] = {
        Source = "reload_empty_grip",
        Time = 86/24,
        MinProgress = 2,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_clipout_v1.wav", 	t = 14/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_clipin_v1.wav", 	    t = 47/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_aa12_reload_chamber_v1.wav",		t = 64/24},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
}

 -- Super fucky temp!
 -- S H U T  U P    A N D   K E E P  T H E M   P I N N E D  D O W N  

-- notverycreativenowarewe
local nvcnaw = 6

 -- hipfire
 -- maximum accuracy
    SWEP.Inaccuracy_Hip_Max_Stand	= nvcnaw
    SWEP.Inaccuracy_Hip_Max_Duck	= nvcnaw
    SWEP.Inaccuracy_Hip_Max_Prone	= nvcnaw
 -- minimum accuracy
    SWEP.Inaccuracy_Hip_Min_Stand   = nvcnaw
    SWEP.Inaccuracy_Hip_Min_Duck    = nvcnaw
    SWEP.Inaccuracy_Hip_Min_Prone   = nvcnaw

 -- sighted fire
 -- yeah
    SWEP.Inaccuracy_ADS = 5.5

 -- inaccuracy when you're... i don't remember
SWEP.Inaccuracy_Add_ADS			= 0
SWEP.Inaccuracy_Add_Hip			= 0
SWEP.Inaccuracy_Add_Move		= 0.1
--lua/weapons/arccw_mw2_acr.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.CamAttachment = 3

SWEP.PrintName = "ACR"
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "Fully automatic, all purpose weapon."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2_2/c_acr_2.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-5, 3, -5.5),
    ang = Angle(-10, 0, 180),
    scale = 1.125
}
SWEP.WorldModel = "models/weapons/w_rif_sg552.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 30
SWEP.DamageMin = 20
SWEP.RangeMin = 1800 * 0.025 -- GAME UNITS * 0.025 = METRES
SWEP.Range = 2300 * 0.025 -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 7
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 30 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 45
SWEP.ReducedClipSize = 15

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.33
SWEP.RecoilSide = 0.25
SWEP.RecoilRise = 0.1

SWEP.Delay = 0.076 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_ar2", "weapon_smg1"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 2.5 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 500 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "smg1" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/acr.wav"
SWEP.ShootMechSound =       ArcCW_MW2_Mech
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/acr.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/acr_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_4"
SWEP.ShellModel = "models/shells/shell_556.mdl"
SWEP.ShellPitch = 95
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.95
SWEP.SightedSpeedMult = 0.38
SWEP.SightTime = 0.25

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-3.101, -3.1, 0.2),
    Ang = Angle(-0.301, 0, 0),
    ViewModelFOV = 65 / 1.3,
    Magnification = 1.3,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(6.639, 0, -2.26)
SWEP.CustomizeAng = Angle(16, 32, 4)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 27

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
            ["mw2_ubgl_m203"] = {
                VMBodygroups = {{ind = 2, bg = 1}},
            },
            ["mw2_ubgl_masterkey"] = {
                VMBodygroups = {{ind = 2, bg = 2}},
            },
}

SWEP.ExtraSightDist = 5

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(3.7, 0, 2.12),
            vang = Angle(0, 0, 0),
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(23.628, 0, 0.56),
            vang = Angle(0, 0, 0),
        },
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "ubgl", "bipod", "mw2_ubgl"},
        Bone = "tag_weapon",
        Offset = {
            vang = Angle(0, 0, 0),
        },
        SlideAmount = {
            vmin = Vector(8, 0, -1),
            vmax = Vector(14, 0, -1),
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vang = Angle(0, 0, 90),
        },
        SlideAmount = {
            vmin = Vector(10.5, -1.5, 0.75),
            vmax = Vector(15, -1.5, 0.75),
        }
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
    {
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.85, -0.55, 0.25),
            vang = Angle(0, 0, 0),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
    },
}



SWEP.Hook_TranslateAnimation = function(wep, anim)
	local attached = wep.Attachments[3].Installed
	
	-- m203 is 1, masterkey is 2, fgrip is 3
	local attthing
		if 		attached == "mw2_ubgl_m203" 		then attthing = 1
		elseif 	attached == "mw2_ubgl_masterkey" 	then attthing = 2
		else 											 attthing = 0
	end
	
	-- when entering ubgl
	if anim == "enter_ubgl" then
		if attthing == 1 then
			return "switch2_alt_m203"
		elseif attthing == 2 then
			return "switch2_alt_masterkey"
		end
	elseif anim == "exit_ubgl" then
		if attthing == 1 then
			return "switch2_gun_m203"
		elseif attthing == 2 then
			return "switch2_gun_masterkey"
		end
	end
	
    if attthing == 1 and wep:GetInUBGL() then
        return "alt_" .. anim .. "_m203"
		elseif attthing == 1 then
			return anim .. "_m203"
		
	elseif attthing == 2 and wep:GetInUBGL() then
        return "alt_" .. anim .. "_masterkey"
		elseif attthing == 2 then
			return anim .. "_masterkey"
		
    end
end

SWEP.Animations = {
		["enter_ubgl"] = {
			Source = "idle",
			Time = 0/30
		},
		["exit_ubgl"] = {
			Source = "idle",
			Time = 0/30
		}, 						-- Fuck you.
    ["idle"] = {
        Source = "idle",
        Time = 1/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 27/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 20/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready"] = {
        Source = "pullout_first",
        Time = 36/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_lift_v1.wav", 		t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_chamber_v1.wav", 	t = 15/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire"] = {
        Source = "fire",
        Time = 7/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 7/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 56/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_lift_v1.wav", 		t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_clipout_v1.wav", 	t = 10/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_clipin_v1.wav", 		t = 32/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        Time = 74/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_lift_v1.wav", 		t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_clipout_v1.wav", 	t = 10/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_clipin_v1.wav", 		t = 32/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_chamber_v1.wav", 	t = 52/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 1.4,
    },
------------------------------------------------
------ Here lies M203 ANIMATIONS ... AWESOME ---
------------------------------------------------
    ["idle_m203"] = {
        Source = "idle_m203",
        Time = 1/30
    },
    ["enter_sprint_m203"] = {
        Source = "sprint_in_m203",
        Time = 10/30
    },
    ["idle_sprint_m203"] = {
        Source = "sprint_loop_m203",
        Time = 30/40
    },
    ["exit_sprint_m203"] = {
        Source = "sprint_out_m203",
        Time = 10/30
    },
    ["draw_m203"] = {
        Source = "pullout_m203",
        Time = 27/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster_m203"] = {
        Source = "putaway_m203",
        Time = 20/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready_m203"] = {
        Source = "pullout_first_m203",
        Time = 36/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_lift_v1.wav", 		t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_chamber_v1.wav", 	t = 15/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire_m203"] = {
        Source = "fire_m203",
        Time = 7/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_m203"] = {
        Source = "fire_ads_m203",
        Time = 7/30,
        ShellEjectAt = 0,
    },
    ["reload_m203"] = {
        Source = "reload_m203",
        Time = 56/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_lift_v1.wav", 		t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_clipout_v1.wav", 	t = 10/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_clipin_v1.wav", 		t = 32/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty_m203"] = {
        Source = "reload_empty_m203",
        Time = 74/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_lift_v1.wav", 		t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_clipout_v1.wav", 	t = 10/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_clipin_v1.wav", 		t = 32/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_chamber_v1.wav", 	t = 52/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 1.4,
    },
------------------------------------------------
------ Here lies M203 IN THE ANIMATIONS........... ... AWESOME ---
------------------------------------------------
    ["alt_idle_m203"] = {
        Source = "alt_idle_m203",
        Time = 1/30
    },
    ["alt_enter_sprint_m203"] = {
        Source = "alt_sprint_in_m203",
        Time = 10/30
    },
    ["alt_idle_sprint_m203"] = {
        Source = "alt_sprint_loop_m203",
        Time = 30/40
    },
    ["alt_exit_sprint_m203"] = {
        Source = "alt_sprint_out_m203",
        Time = 10/30
    },
    ["alt_draw_m203"] = {
        Source = "alt_pullout_m203",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["alt_holster_m203"] = {
        Source = "alt_putaway_m203",
        Time = 20/30,
    },
    ["alt_fire_m203"] = {
        Source = "alt_fire_m203",
        Time = 10/30,
    },
    ["alt_reload_m203"] = {
        Source = "alt_reload_m203",
        Time = 78/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_chamber_open_v12.wav", 		t = 12/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_load_v12.wav", 	t = 39/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_chamber_close_v12.wav", 	t = 60/30},
					},
    },
------------------------------------------------
------ Here lies MASTERKEY ANIMATIONS ... AWESOME ---
------------------------------------------------
    ["idle_masterkey"] = {
        Source = "idle_masterkey",
        Time = 1/30
    },
    ["enter_sprint_masterkey"] = {
        Source = "sprint_in_masterkey",
        Time = 10/30
    },
    ["idle_sprint_masterkey"] = {
        Source = "sprint_loop_masterkey",
        Time = 30/40
    },
    ["exit_sprint_masterkey"] = {
        Source = "sprint_out_masterkey",
        Time = 10/30
    },
    ["draw_masterkey"] = {
        Source = "pullout_masterkey",
        Time = 27/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster_masterkey"] = {
        Source = "putaway_masterkey",
        Time = 20/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready_masterkey"] = {
        Source = "pullout_first_masterkey",
        Time = 36/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_lift_v1.wav", 		t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_chamber_v1.wav", 	t = 15/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire_masterkey"] = {
        Source = "fire_masterkey",
        Time = 7/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_masterkey"] = {
        Source = "fire_ads_masterkey",
        Time = 7/30,
        ShellEjectAt = 0,
    },
    ["reload_masterkey"] = {
        Source = "reload_masterkey",
        Time = 56/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_lift_v1.wav", 		t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_clipout_v1.wav", 	t = 10/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_clipin_v1.wav", 		t = 32/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty_masterkey"] = {
        Source = "reload_empty_masterkey",
        Time = 74/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_lift_v1.wav", 		t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_clipout_v1.wav", 	t = 10/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_clipin_v1.wav", 		t = 32/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_masada_reload_chamber_v1.wav", 	t = 52/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 1.4,
    },

------------------------------------------------
------ Here lies MASTERKEY IN THE ANIMATIONS........... ... AWESOME ---
------------------------------------------------
    ["alt_idle_masterkey"] = {
        Source = "alt_idle_masterkey",
        Time = 1/30
    },
    ["alt_enter_sprint_masterkey"] = {
        Source = "alt_sprint_in_masterkey",
        Time = 10/30
    },
    ["alt_idle_sprint_masterkey"] = {
        Source = "alt_sprint_loop_masterkey",
        Time = 30/40
    },
    ["alt_exit_sprint_masterkey"] = {
        Source = "alt_sprint_out_masterkey",
        Time = 10/30
    },
    ["alt_draw_masterkey"] = {
        Source = "alt_pullout_masterkey",
        Time = 25/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["alt_holster_masterkey"] = {
        Source = "alt_putaway_masterkey",
        Time = 25/30,
    },
    ["alt_fire_masterkey"] = {
        Source = "alt_fire_masterkey",
        Time = 10/30,
    },
    ["alt_cycle_masterkey"] = {
        Source = "alt_cycle_masterkey",
        SoundTable = {{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 3/30}},
        Time = 15/30,
    },
    ["alt_reload_start_masterkey"] = {
        Source = "alt_reload_start_masterkey",
        Time = 35/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_lift_v1.wav", 		t = 0/30},
						{s = "MW2Common.Masterkey_Load", 		t = 26/30},
					},
    },
    ["alt_reload_loop_masterkey"] = {
        Source = "alt_reload_loop_masterkey",
        Time = 33/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "MW2Common.Masterkey_Load", 	t = 24/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_end_v1.wav", 	t = 33/30}, -- end
					},
    },
    ["alt_reload_finish_masterkey"] = {
        Source = "alt_reload_finish_masterkey",
        Time = 50/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						--{s = "MW2Common.Masterkey_Load", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_end_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 	t = 22/30},
					},
    },
-----------------------------------------------------
    ["switch2_gun_m203"] = {
        Source = "switch2_gun_m203",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 24/30
    },
    ["switch2_alt_m203"] = {
        Source = "switch2_alt_m203",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 24/30
    },
    ["switch2_gun_masterkey"] = {
        Source = "switch2_gun_masterkey",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 22/30
    },
    ["switch2_alt_masterkey"] = {
        Source = "switch2_alt_masterkey",
        SoundTable = {
						{s = "MW2Common.Underbarrel", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 14/30},
					},
        Time = 25/30
    },
}
--lua/weapons/arccw_mw2_fucket.lua:
return gluapack()()
--lua/weapons/arccw_mw2_intervention_obrez.lua:
return gluapack()()
--lua/weapons/arccw_mw2_l85.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2 - Unofficial"
SWEP.AdminOnly = false
SWEP.WeaponCamBone = tag_camera

SWEP.PrintName = "L85A2 MIFL"
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "Fully automatic, all purpose weapon.\nUnofficial."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2/c_sa80_fml_6.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-8, 3, -4),
    ang = Angle(-10, 0, 180),
    scale = 1.33
}
SWEP.WorldModel = "models/weapons/w_rif_aug.mdl"
SWEP.ViewModelFOV = 65

SWEP.DefaultBodygroups = "100000"

SWEP.Damage = 40
SWEP.DamageMin = 20
SWEP.Range = 1300 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 7
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 30 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 45
SWEP.ReducedClipSize = 15

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.5
SWEP.RecoilSide = 0.5
SWEP.RecoilRise = 0

SWEP.Delay = 0.086 -- lazy, fix this l8r btich -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.NPCWeaponType = {"weapon_ar2", "weapon_smg1"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 5 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 500 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 250

SWEP.Primary.Ammo = "smg1" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/l85_u.wav"
SWEP.ShootMechSound =       ArcCW_MW2_Mech
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/aug.wav"
SWEP.ShootDrySound =        "weapons/fesiugmw2/fire/dryfire_rifle.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/m4_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_4"
SWEP.ShellModel = "models/shells/shell_556.mdl"
SWEP.ShellPitch = 95
SWEP.ShellScale = 1
SWEP.ShellRotate = 180

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.95
SWEP.SightedSpeedMult = 0.38
SWEP.SightTime = 0.25

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.825, -2.026, -0.45),
    Ang = Angle(0.2, 0, 0),
    ViewModelFOV = 65 / 1.3,
    Magnification = 1.3,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(10.479, 0, -1.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 14.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 27

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
    },
    ["optic_mw2_mp5krearsight"] = { VMBodygroups = {{ind = 2, bg = 0}} },
    ["grip"] = { VMBodygroups = {{ind = 2, bg = 1}} },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
}

SWEP.ExtraSightDist = 5

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic"},
        Bone = "Weapon",
        Offset = {
            vpos = Vector(0, -2.95, 0),
            vang = Angle(90, 0, -90),
            wang = Angle(-9.738, 0, 180)
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "Weapon",
        Offset = {
            vpos = Vector(0, -1.7, 16),
            vang = Angle(90, 0, -90),
            wpos = Vector(33.719, -2.122, -5.573),
            wang = Angle(0, 6.034, 180)
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "Weapon",
        Offset = {
            vpos = Vector(1, -1.4, 0.3),
            vang = Angle(90, 0, 0),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "Weapon",
        Offset = {
            vpos = Vector(0.5, -1.25, 2.75),
            vang = Angle(90, 0, -90),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 1/60
    },
    ["idle_empty"] = {
        Source = "idle_empty",
        Time = 1/60
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/60
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/60
    },
    ["draw"] = {
        Source = "pullout",
        Time = 43/60,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["draw_empty"] = {
        Source = "pullout_empty",
        Time = 43/60,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["ready"] = {
        Source = "pullout_first",
        Time = 61/60,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_sa80_reload_lift_v1.wav", 	t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_sa80_reload_chamber_v1.wav", 	t = 18/30},
					},
    },
    ["fire"] = {
        Source = "fire",
        Time = 31/60,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 31/60,
        ShellEjectAt = 0,
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 31/60,
        ShellEjectAt = 0,
    },
    ["fire_iron_empty"] = {
        Source = "fire_ads_empty",
        Time = 31/60,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 135/50,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_sa80_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_sa80_reload_clipout_v1.wav", 	t = 0.66},
						{s = "weapons/fesiugmw2/foley/wpfoly_sa80_reload_clipin_v1.wav", 		t = 1.6},
					},
    },
    ["reload_empty"] = {
        Source = "reload_empty2",
        Time = 166/50,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_sa80_reload_lift_v1.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_sa80_reload_clipout_v1.wav", 	t = 0.66},
						{s = "weapons/fesiugmw2/foley/wpfoly_sa80_reload_clipin_v1.wav", 		t = 1.6},
						{s = "weapons/fesiugmw2/foley/wpfoly_sa80_reload_chamber_v1.wav",		t = 2.4},
					},
    },
}
--lua/weapons/arccw_mw2_m4.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.WeaponCamBone = tag_camera

SWEP.PrintName = "M4A1"
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "Fully automatic, all purpose weapon."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2/c_m4_3a.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-5, 3, -5),
    ang = Angle(-10, 0, 180),
    scale = 1.25
}
SWEP.WorldModel = "models/weapons/w_rif_m4a1.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 30
SWEP.DamageMin = 20
SWEP.RangeMin = 1500 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Range = 2000 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 7
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 30 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 45
SWEP.ReducedClipSize = 15

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.5
SWEP.RecoilSide = 0.3
SWEP.RecoilRise = 0.2

SWEP.Delay = 0.07 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_ar2", "weapon_smg1"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 2.5 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 500 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "smg1" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/m4_mp.wav"
SWEP.ShootMechSound =       ArcCW_MW2_Mech
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/m4_mp.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/m4_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_4"
SWEP.ShellModel = "models/shells/shell_556.mdl"
SWEP.ShellPitch = 95
SWEP.ShellScale = 1

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.95
SWEP.SightedSpeedMult = 0.38
SWEP.SightTime = 0.25
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.595, -3.512, 0.159), --
    Ang = Angle(0, 0, 0),
    ViewModelFOV = 65 / 1.3,
    Magnification = 1.3,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(10.479, 0, -1.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 14.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 27

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        WMBodygroups = {},
    },
    ["nogrip"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
            ["mw2_ubgl_m203"] = {
                VMBodygroups = {{ind = 3, bg = 1}},
            },
            ["mw2_ubgl_masterkey"] = {
                VMBodygroups = {{ind = 3, bg = 2}},
            },
}

SWEP.ExtraSightDist = 5

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(6.972, 0, 4.018),
            vang = Angle(0, 0, 0),
            wang = Angle(-9.738, 0, 180)
        },
        SlideAmount = {
            vmin = Vector(0.668, 0, 3.618),
            vmax = Vector(5.076, 0, 3.618),
            wmin = Vector(5.36, 0.739, -5.401),
            wmax = Vector(5.36, 0.739, -5.401),
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(17, 0, 2),
            vang = Angle(0, 0, 0),
            wpos = Vector(33.719, -2.122, -5.573),
            wang = Angle(0, 6.034, 180)
        },
		WMScale = Vector(1, 1, 1),
        InstalledEles = {"nomuzzle"},
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "ubgl", "bipod", "mw2_ubgl"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(18.427, 0, -1.04),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-2.461, -6.525, 176.662)
        },
        SlideAmount = {
            vmin = Vector(6.748, 0, 1.04),
            vmax = Vector(12.427, 0, 1.04),
            wmin = Vector(20.996, -0.991, -3.837),
            wmax = Vector(13.661, -0.078, -3.837),
        },
        InstalledEles = {"nogrip"},
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(12.5, -1, 2.25),
            vang = Angle(0, 0, 90),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(4, -0.4, 1.25),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}



SWEP.Hook_TranslateAnimation = function(wep, anim)
	local attached = wep.Attachments[3].Installed
	
	-- m203 is 1, masterkey is 2, fgrip is 3
	local attthing
		if 		attached == "mw2_ubgl_m203" 		then attthing = 1
		elseif 	attached == "mw2_ubgl_masterkey" 	then attthing = 2
		else 											 attthing = 0
	end
    
	-- when entering ubgl
	if anim == "enter_ubgl" then
		if attthing == 1 then
			return "switch2_alt_m203"
		elseif attthing == 2 then
			return "switch2_alt_masterkey"
		end
	elseif anim == "exit_ubgl" then
		if attthing == 1 then
			return "switch2_gun_m203"
		elseif attthing == 2 then
			return "switch2_gun_masterkey"
		end
	end

    if attthing == 1 and wep:GetInUBGL() then
        return "alt_" .. anim .. "_m203"
		elseif attthing == 1 then
			return anim .. "_m203"
		
	elseif attthing == 2 and wep:GetInUBGL() then
        return "alt_" .. anim .. "_masterkey"
		elseif attthing == 2 then
			return anim .. "_masterkey"
		
    end
end

SWEP.Animations = {
		["enter_ubgl"] = {
			Source = "idle",
			Time = 1/30
		},
		["exit_ubgl"] = {
			Source = "idle",
			Time = 1/30
		}, 						-- Fuck you.
    ["idle"] = {
        Source = "idle",
        Time = 1/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 20/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready"] = {
        Source = "pullout_first",
        Time = 37/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_chamber_v4.wav", 	t = 11/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire"] = {
        Source = "fire",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 61/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_lift_v10.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipout_v10.wav", 	t = 11/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipin_v10.wav", 	    t = 37/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        Time = 70/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_lift_v10.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipout_v10.wav", 	t = 11/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipin_v10.wav", 	    t = 37/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_chamber_v10.wav",		t = 52/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
------------------------------------------------
------ Here lies M203 ANIMATIONS ... AWESOME ---
------------------------------------------------
    ["idle_m203"] = {
        Source = "idle_m203",
        Time = 1/30
    },
    ["enter_sprint_m203"] = {
        Source = "sprint_in_m203",
        Time = 10/30
    },
    ["idle_sprint_m203"] = {
        Source = "sprint_loop_m203",
        Time = 30/40
    },
    ["exit_sprint_m203"] = {
        Source = "sprint_out_m203",
        Time = 10/30
    },
    ["draw_m203"] = {
        Source = "pullout_m203",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster_m203"] = {
        Source = "putaway_m203",
        Time = 20/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready_m203"] = {
        Source = "pullout_first_m203",
        Time = 37/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_chamber_v4.wav", 	t = 11/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire_m203"] = {
        Source = "fire_m203",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_m203"] = {
        Source = "fire_ads_m203",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["reload_m203"] = {
        Source = "reload_m203",
        Time = 61/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_lift_v10.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipout_v10.wav", 	t = 11/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipin_v10.wav", 	    t = 37/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty_m203"] = {
        Source = "reload_empty_m203",
        Time = 70/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_lift_v10.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipout_v10.wav", 	t = 11/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipin_v10.wav", 	    t = 37/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_chamber_v10.wav",		t = 52/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
------------------------------------------------
------ Here lies M203 IN THE ANIMATIONS........... ... AWESOME ---
------------------------------------------------
    ["alt_idle_m203"] = {
        Source = "alt_idle_m203",
        Time = 1/30
    },
    ["alt_enter_sprint_m203"] = {
        Source = "alt_sprint_in_m203",
        Time = 11/30
    },
    ["alt_idle_sprint_m203"] = {
        Source = "alt_sprint_loop_m203",
        Time = 31/40
    },
    ["alt_exit_sprint_m203"] = {
        Source = "alt_sprint_out_m203",
        Time = 11/30
    },
    ["alt_draw_m203"] = {
        Source = "alt_pullout_m203",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["alt_holster_m203"] = {
        Source = "alt_putaway_m203",
        Time = 20/30,
    },
    ["alt_fire_m203"] = {
        Source = "alt_fire_m203",
        Time = 6/30,
    },
    ["alt_reload_m203"] = {
        Source = "alt_reload_m203",
        Time = 79/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_chamber_open_v12.wav", 		t = 12/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_load_v12.wav", 	t = 39/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_chamber_close_v12.wav", 	t = 60/30},
					},
    },
------------------------------------------------
------ Here lies MASTERKEY ANIMATIONS ... AWESOME ---
------------------------------------------------
    ["idle_masterkey"] = {
        Source = "idle_masterkey",
        Time = 1/30
    },
    ["enter_sprint_masterkey"] = {
        Source = "sprint_in_masterkey",
        Time = 10/30
    },
    ["idle_sprint_masterkey"] = {
        Source = "sprint_loop_masterkey",
        Time = 30/40
    },
    ["exit_sprint_masterkey"] = {
        Source = "sprint_out_masterkey",
        Time = 10/30
    },
    ["draw_masterkey"] = {
        Source = "pullout_masterkey",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster_masterkey"] = {
        Source = "putaway_masterkey",
        Time = 20/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready_masterkey"] = {
        Source = "pullout_first_masterkey",
        Time = 37/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_chamber_v4.wav", 	t = 11/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire_masterkey"] = {
        Source = "fire_masterkey",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_masterkey"] = {
        Source = "fire_ads_masterkey",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["reload_masterkey"] = {
        Source = "reload_masterkey",
        Time = 61/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_lift_v10.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipout_v10.wav", 	t = 11/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipin_v10.wav", 	    t = 37/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty_masterkey"] = {
        Source = "reload_empty_masterkey",
        Time = 70/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_lift_v10.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipout_v10.wav", 	t = 11/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipin_v10.wav", 	    t = 37/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_chamber_v10.wav",		t = 52/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
------------------------------------------------
------ Here lies MASTERKEY IN THE ANIMATIONS........... ... AWESOME ---
------------------------------------------------
    ["alt_idle_masterkey"] = {
        Source = "alt_idle_masterkey",
        Time = 1/30
    },
    ["alt_enter_sprint_masterkey"] = {
        Source = "alt_sprint_in_masterkey",
        Time = 11/30
    },
    ["alt_idle_sprint_masterkey"] = {
        Source = "alt_sprint_loop_masterkey",
        Time = 31/40
    },
    ["alt_exit_sprint_masterkey"] = {
        Source = "alt_sprint_out_masterkey",
        Time = 11/30
    },
    ["alt_draw_masterkey"] = {
        Source = "alt_pullout_masterkey",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["alt_holster_masterkey"] = {
        Source = "alt_putaway_masterkey",
        Time = 20/30,
    },
    ["alt_fire_masterkey"] = {
        Source = "alt_fire_masterkey",
        Time = 10/24,
    },
    ["alt_cycle_masterkey"] = {
        Source = "alt_cycle_masterkey",
        SoundTable = {{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 3/30}},
        Time = 15/30,
    },
    ["alt_reload_start_masterkey"] = {
        Source = "alt_reload_start_masterkey",
        Time = 35/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_lift_v1.wav", 		t = 0/30},
						{s = "MW2Common.Masterkey_Load", 		t = 26/30},
					},
    },
    ["alt_reload_loop_masterkey"] = {
        Source = "alt_reload_loop_masterkey",
        Time = 33/40,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "MW2Common.Masterkey_Load", 	t = 24/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_end_v1.wav", 	t = 33/30}, -- end
					},
    },
    ["alt_reload_finish_masterkey"] = {
        Source = "alt_reload_finish_masterkey",
        Time = 50/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						--{s = "MW2Common.Masterkey_Load", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_end_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 	t = 22/30},
					},
    },
-----------------------------------------------------
    ["switch2_gun_m203"] = {
        Source = "switch2_gun_m203",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 25/30
    },
    ["switch2_alt_m203"] = {
        Source = "switch2_alt_m203",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 25/30
    },
    ["switch2_gun_masterkey"] = {
        Source = "switch2_gun_masterkey",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 25/30
    },
    ["switch2_alt_masterkey"] = {
        Source = "switch2_alt_masterkey",
        SoundTable = {
						{s = "MW2Common.Underbarrel", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 14/30},
					},
        Time = 25/30
    },
}
--lua/weapons/arccw_mw2_m93r.lua:
return gluapack()()
--lua/weapons/arccw_mw2_m93r.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.WeaponCamBone = tag_camera

SWEP.PrintName = "M93 Raffica"
SWEP.Trivia_Class = "Handgun"
SWEP.Trivia_Desc = "Semi-automatic (single fire)"

SWEP.Slot = 1

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2/c_beretta393_3.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-9, 3, -3.5),
    ang = Angle(-7, 0, 180),
    scale = 1.25
}
SWEP.WorldModel = "models/weapons/w_pist_elite_single.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 40
SWEP.DamageMin = 30
SWEP.Range = 750 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 4
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 20 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 30
SWEP.ReducedClipSize = 10

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.45
SWEP.RecoilSide = 0.55
SWEP.RecoilRise = 0.25

SWEP.Delay = 0.064 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = -3,
		RunawayBurst = true,
		PostBurstDelay = 0.2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_pistol"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 10 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 200 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "pistol" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/m9.wav"
--SWEP.DistantShootSound =	"weapons/arccw/m4a1/m4a1_us_distant_03.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/usp45_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_4"
SWEP.ShellModel = "models/shells/shell_9mm.mdl"
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.8
SWEP.SightTime = 0.125


SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-1.943, 0, 1.3172),
    Ang = Angle(-0.8, 0, 0),
    ViewModelFOV = 65,
    Magnification = 1,
}

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "revolver"
SWEP.HoldtypeSights = "revolver"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(3, 0, -1)
SWEP.CustomizeAng = Angle(10, 19, 0)

SWEP.CrouchPos = Vector(-2.764, -0.927, -0.202)
SWEP.CrouchAng = Angle(1.12, -1, -21.444)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 18

SWEP.ExtraSightDist = 5

-----[ Tactical knife sheet ]------
	SWEP.CanBash				= true -- Tac knife will save us
	--SWEP.MeleeDamage			= 100
	--SWEP.MeleeRange				= 16
	--SWEP.MeleeDamageType		= DMG_CLUB
	--SWEP.MeleeTime				= 0.8
	SWEP.MeleeGesture			= ACT_HL2MP_GESTURE_RANGE_ATTACK_KNIFE
	--SWEP.MeleeAttackTime		= 0.079
	SWEP.MeleeMissSound			= ""
	SWEP.MeleeHitSound			= "MW2Common.Melee.HitWorld"
	SWEP.MeleeHitNPCSound		= "MW2Common.Melee.HitFleshy_Slice"

SWEP.AttachmentElements = {
    ["railthegrind"] = {
        VMElements = {
            {
                Model = "models/weapons/arccw/fesiugmw2/atts/pistolrail_1.mdl",
                Bone = "tag_weapon",
                Offset = {
                    pos = Vector(0, -0.075, -0.5),
                    ang = Angle(0, 0, 0),
                }
            }
        },
    },
    ["altirons"] = {
        Override_IronSightStruct = {
            Pos = Vector(-1.64, -2.346, 0.119),
            Ang = Angle(-0.3, 0, 0),
            ViewModelFOV = 65,
            Magnification = 1,
        },
        VMBodygroups = {{ind = 1, bg = 1}}, -- m1911 is an old fart and doesn't have the knife bone all the way back so we hide it in qc and show it here instead
        WMBodygroups = {},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
}

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic_lp",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 0, 0),
            vang = Angle(0, 0, 0),
        },
        SlideAmount = {
            vmin = Vector(-1.6, -0.075, 2.1),
            vmax = Vector(0, -0.075, 2.1),
        },
        ExcludeFlags = {"arcticfixyoshit1","cantuseshitinakimboyet"},
        InstalledEles = {"railthegrind"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(5.214, -0.085, 1.194),
            vang = Angle(0, 0, 0),
            wpos = Vector(26.648, 0.782, -8.042),
            wang = Angle(-9.79, 0, 180)
        },
        ExcludeFlags = {"cantuseshitinakimboyet"},
		VMScale = Vector(0.67, 0.67, 0.67),
    },
    {
        PrintName = "Underbarrel",
		Slot = {"foregrip_pistol", "style_pistol"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(1.9, 0, -0.5),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-10.216, 0, 180)
        },
        MergeSlots = {8},
    },
    {
        PrintName = "Tactical",
        Slot = "tac_pistol",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(3.5, 0, 0),
            vang = Angle(0, 0, 0),
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG",
        ExcludeFlags = {"cantuseshitinakimboyet"},
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Akimbotest",
        DefaultAttName = "No LH",
        Slot = "akimbotest",
        Bone = "tag_view",
        Offset = {
            vpos = Vector(0, 0, 0),
            vang = Angle(0, 0, 0),
        },
        Hidden = true,
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
}

SWEP.Hook_SelectReloadAnimation = function(wep, anim)
    if wep.Attachments[3].Installed == "mw2_tacticalknife" then
        return anim .. "_knife"
    elseif wep.Attachments[8].Installed then
        return anim .. "_akimbo_right"
    end
end
SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[3].Installed == "mw2_tacticalknife" then
        return anim .. "_knife"
    elseif wep.Attachments[8].Installed then
        return anim .. "_akimbo_right"
    end
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 2/30
    },
    ["idle_empty"] = {
        Source = "idle_empty",
        Time = 2/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 11/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 31/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 11/30
    },
    ["draw"] = {
        Source = "pullout",
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        Time = 29/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 31/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["draw_empty"] = {
        Source = "pullout_empty",
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        Time = 31/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["holster_empty"] = {
        Source = "putaway_empty",
        Time = 30/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["fire"] = {
        Source = "fire",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 9/30,
        ShellEjectAt = 0,
    },
    ["fire_empty"] = {
        Source = "fire_last",
        Time = 7/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_empty"] = {
        Source = "fire_ads_last",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 54/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipout_v2.wav", 	t = 9/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipin_v2.wav", 	t = 27/24},
					},
        Checkpoints = {24, 97},
        FrameRate = 30,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.4,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        Time = 59/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipout_v2.wav", 	t = 9/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipin_v2.wav", 	t = 27/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_chamber_v2.wav", 	t = 36/24},
					},
        Checkpoints = {24, 97, 131},
        FrameRate = 37,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
---------------------------------------------------------
--------- LE TACTICAL KNIFE XDXDXDXD---------------------
---------------------------------------------------------
		["idle_knife"] = {
			Source = "idle_knife",
			Time = 300/30
		},
		["idle_empty_knife"] = {
			Source = "idle_knife",
			Time = 300/30
		},
		["enter_sprint_knife"] = {
			Source = "sprint_in_knife",
			Time = 10/30
		},
		["idle_sprint_knife"] = {
			Source = "sprint_loop_knife",
			Time = 30/40
		},
		["exit_sprint_knife"] = {
			Source = "sprint_out_knife",
			Time = 10/30
		},
		["fire_knife"] = {
			Source = "fire_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["fire_iron_knife"] = {
			Source = "fire_ads_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["fire_empty_knife"] = {
			Source = "lastfire_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["fire_iron_empty_knife"] = {
			Source = "lastfire_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["draw_knife"] = {
			Source = "pullout_knife",
			SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
			Time = 29/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["holster_knife"] = {
			Source = "putaway_knife",
			Time = 31/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["draw_empty_knife"] = {
			Source = "pullout_knife",
			SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
			Time = 29/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["holster_empty_knife"] = {
			Source = "putaway_knife",
			Time = 31/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["reload_knife"] = {
			Source = "reload_knife",
			Time = 51/24,
			TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
			SoundTable = {
							{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipout_v2.wav", 	t = 7/24},
							{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipin_v2.wav", 	t = 25/24},
						},
			Checkpoints = {24, 97},
			FrameRate = 30,
			LHIK = true,
			LHIKIn = 0.5,
			LHIKOut = 0.4,
		},
		["reload_empty_knife"] = {
			Source = "reload_empty_knife",
			Time = 46/24,
			TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
			SoundTable = {
							{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipout_v2.wav", 	t = 6/24},
							{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipin_v2.wav", 	t = 25/24},
							{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_chamber_v2.wav", 	t = 37/24},
						},
			Checkpoints = {24, 97, 131},
			FrameRate = 37,
			LHIK = true,
			LHIKIn = 0.5,
			LHIKOut = 0.6,
		},
		["bash_knife"] = {
			Source = "melee_knife",
			SoundTable = {{s = "MW2Common.Melee.Swing", 		t = 0}},
			Time = 97/120 / 1.6, -- damn you universal
			LHIK = true,
		},
---------------------------------------------------------
--------- LE akimbo gun ---------------------
---------------------------------------------------------
    ["idle_akimbo_right"] = {
        Source = "idle_akimbo_right",
        Time = 2/30
    },
    ["idle_empty_akimbo_right"] = {
        Source = "idle_empty_akimbo_right",
        Time = 2/30
    },
    ["enter_sprint_akimbo_right"] = {
        Source = "sprint_in_akimbo_right",
        Time = 11/30
    },
    ["idle_sprint_akimbo_right"] = {
        Source = "sprint_loop_akimbo_right",
        Time = 31/40
    },
    ["exit_sprint_akimbo_right"] = {
        Source = "sprint_out_akimbo_right",
        Time = 11/30
    },
    ["draw_akimbo_right"] = {
        Source = "pullout_akimbo_right",
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        Time = 26/30 /4,
    },
    ["holster_akimbo_right"] = {
        Source = "putaway_akimbo_right",
        Time = 26/30 /4,
    },
    ["fire_akimbo_right"] = {
        Source = "fire_akimbo_right",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["fire_empty_akimbo_right"] = {
        Source = "fire_last_akimbo_right",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["reload_akimbo_right"] = {
        Source = "reload_akimbo_right",
        Time = 70/24,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipout_v2.wav", 	t = 4/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipin_v2.wav", 	t = 39/24},
					},
        Checkpoints = {24, 97},
        FrameRate = 24,
    },
    ["reload_empty_akimbo_right"] = {
        Source = "reload_empty_akimbo_right",
        Time = 89/24,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipout_v2.wav", 	t = 4/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_clipin_v2.wav", 	t = 45/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_beretta9mm_reload_chamber_v2.wav", 	t = 65/24},
					},
        Checkpoints = {24, 97, 131},
        FrameRate = 24,
    },
}
--lua/weapons/arccw_mw2_p90.lua:
return gluapack()()
--lua/weapons/arccw_mw2_pp2000.lua:
return gluapack()()
--lua/weapons/arccw_mw2_ranger.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.CamAttachment = 3

SWEP.PrintName = "Ranger"
SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = "Double barrel."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2_2/c_ranger_2.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-8, 3, -4),
    ang = Angle(-10, 0, 180),
    scale = 1.125
}
SWEP.WorldModel = "models/weapons/w_shotgun.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 75
SWEP.DamageMin = 35
SWEP.Range = 400 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.RangeMin = 200 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 1
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 2 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 2
SWEP.ReducedClipSize = 2

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 6
SWEP.RecoilSide = 4

SWEP.Delay = 0.009 -- 60 / RPM.
SWEP.Num = 6 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 100 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 250 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 50 -- inaccuracy added by moving. Applies in sights as well! Walking speed is considered as "maximum".
SWEP.SightsDispersion = 0 -- dispersion that remains even in sights

SWEP.Primary.Ammo = "buckshot" -- what ammo type the gun uses

SWEP.ShootVol = 120 -- volume of shoot sound
SWEP.ShootPitch = 110 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/shot_ranger.wav"
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/shot_ranger.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/shot_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_m3"
SWEP.ShellModel = "models/shells/shell_12gauge.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.8
SWEP.SightTime = 0.3

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.8, -1.8, 2.3),
    Ang = Angle(1, 0, 0),
    ViewModelFOV = 65 / 1.18,
    Magnification = 1.18,
}


SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "shotgun"
SWEP.HoldtypeSights = "ar2"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(5.479, -5, -1.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 14.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.ExtraSightDist = 5

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        WMBodygroups = {},
    },
}

SWEP.Attachments = {
	{
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "j_reload",
        Offset = {
            vpos = Vector(-2, 0, 1.9),
            vang = Angle(0, 0, 0),
            wang = Angle(-9.738, 0, 180)
        },
        ExcludeFlags = {"arcticfixyoshit1","cantuseshitinakimboyet"},
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "choke",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(23, 0, 1.44),
            vang = Angle(0, 0, 0),
            wpos = Vector(26.648, 0.782, -8.042),
            wang = Angle(-9.79, 0, 180)
        },
        ExcludeFlags = {"arcticfixyoshit1","cantuseshitinakimboyet"},
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "j_reload",
        Offset = {
            vpos = Vector(0, 0, -0.7),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-10.216, 0, 180)
        },
        SlideAmount = {
            vmin = Vector(-3, 0, -0.7),
            vmax = Vector(2, 0, -0.7),
        },
        MergeSlots = {7},
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(3, -1, 0.5),
            vang = Angle(0, 0, 90),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
		VMScale = Vector(1, 1, 1),
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_shotgun"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Akimbotest",
        DefaultAttName = "No LH",
        Slot = "akimbotest",
        Bone = "tag_view",
        Offset = {
            vpos = Vector(0, 0, 0),
            vang = Angle(0, 0, 0),
        },
        Hidden = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.5, -0.45, 0.75),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Hook_SelectReloadAnimation = function(wep, anim)
    if wep.Attachments[7].Installed then
        return anim .. "_akimbo_right"
    end
end
SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[7].Installed then
        return anim .. "_akimbo_right"
    end
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 100/30,
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 24/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["holster"] = {
        Source = "putaway",
        Time = 17/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["fire"] = {
        Source = "fire",
        Time = 12/30,
    },
    ["reload"] = {
        Source = "reload",
        Time = 76/30,
        SoundTable = {
                        {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_lift_v1.wav", 		t = 0.01},
                        {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_open_v1.wav", 		t = 7/30},
                        {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_clipout_v1.wav", 		t = 13/30},
                        {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_clip1in_v1.wav", 		t = 30/30},
                        {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_clip2in_v1.wav", 		t = 41/30},
                        {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_chamber_v1.wav", 		t = 63/30},
                    },
        MinProgress = 1.549,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.4,
        LHIKEaseOut = 0.3
    },
-- akimbo
    ["idle_akimbo_right"] = {
        Source = "idle_r",
        Time = 1/30,
    },
    ["enter_sprint_akimbo_right"] = {
        Source = "sprint_in_r",
        Time = 10/30
    },
    ["idle_sprint_akimbo_right"] = {
        Source = "sprint_loop_r",
        Time = 30/40
    },
    ["exit_sprint_akimbo_right"] = {
        Source = "sprint_out_r",
        Time = 10/30
    },
    ["draw_akimbo_right"] = {
        Source = "pullout_r",
        Time = 12/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["holster_akimbo_right"] = {
        Source = "putaway_r",
        Time = 23/30,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["fire_akimbo_right"] = {
        Source = "fire_r",
        Time = 12/30,
    },
    ["reload_akimbo_right"] = {
        Source = "reload_mp_r",
        Time = 120/30,
        MinProgress = 1.549,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_lift_v1.wav", 		t = 0.01},
            {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_clipout_v1.wav", 		t = 12/30},
            {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_clip1in_v1.wav", 		t = 53/30},
            {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_clip2in_v1.wav", 		t = 70/30},
            {s = "weapons/fesiugmw2/foley/wpfoly_ranger_reload_chamber_v1.wav", 		t = 106/30},
        },
    },
}

 -- Super fucky temp!
 -- S H U T  U P    A N D   K E E P  T H E M   P I N N E D  D O W N  

-- notverycreativenowarewe
local nvcnaw = 7
local nvcnaw2 = 5

 -- hipfire
 -- maximum accuracy
    SWEP.Inaccuracy_Hip_Max_Stand	= nvcnaw
    SWEP.Inaccuracy_Hip_Max_Duck	= nvcnaw
    SWEP.Inaccuracy_Hip_Max_Prone	= nvcnaw
 -- minimum accuracy
    SWEP.Inaccuracy_Hip_Min_Stand   = nvcnaw2
    SWEP.Inaccuracy_Hip_Min_Duck    = nvcnaw2
    SWEP.Inaccuracy_Hip_Min_Prone   = nvcnaw2

 -- sighted fire
 -- yeah
    SWEP.Inaccuracy_ADS = 5.5

 -- inaccuracy when you're... i don't remember
SWEP.Inaccuracy_Add_ADS			= 0
SWEP.Inaccuracy_Add_Hip			= 0
SWEP.Inaccuracy_Add_Move		= 0.1
--lua/weapons/arccw_mw2_steyr_lmg.lua:
return gluapack()()
--lua/weapons/arccw_mw2_tavor.lua:
return gluapack()()
--lua/weapons/arccw_mw2_ump45.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.WeaponCamBone = tag_camera

SWEP.PrintName = "UMP45"
SWEP.Trivia_Class = "Sub Machine Gun"
SWEP.Trivia_Desc = "Fully automatic, close range."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2/c_ump45_1.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-8, 3, -5.5),
    ang = Angle(-10, 0, 180),
    scale = 1.25
}
SWEP.WorldModel = "models/weapons/w_smg_ump45.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 40
SWEP.DamageMin = 35
SWEP.Range = 850 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 3
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 32 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 48
SWEP.ReducedClipSize = 16

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.4
SWEP.RecoilSide = 0.3
SWEP.RecoilRise = 0.2

SWEP.Delay = 0.09 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_ar2", "weapon_smg1"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 10 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 300 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 175

SWEP.Primary.Ammo = "pistol" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/ump45.wav"
SWEP.ShootMechSound =       ArcCW_MW2_Mech
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/ump45.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/mp5_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_smg"
SWEP.ShellModel = "models/shells/shell_9mm.mdl"
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.80
SWEP.SightTime = 0.2

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.29, -3.477, 1),
    Ang = Angle(0.699, 0, 0),
    ViewModelFOV = 65 / 1.18,
    Magnification = 1.18,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SMG1

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(10.479, 0, -3.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 14.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 24

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
}

SWEP.ExtraSightDist = 5

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(-4.7, 0, 2.7),
            vang = Angle(0, 0, 0),
            wpos = Vector(1.998, 0.17, -5.025),
            wang = Angle(-3.074, -23.004, -172.249)
        },
        SlideAmount = {
            vmin = Vector(1.2, 0, 2.3),
            vmax = Vector(5.7, 0, 2.3),
            wmin = Vector(5.36, 0.739, -5.401),
            wmax = Vector(5.36, 0.739, -5.401),
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(14, 0, 0.1),
            vang = Angle(0, 0, 0),
            wpos = Vector(12.057, 4.317, -3.858),
            wang = Angle(-3.074, -23.004, 0)
        },
		VMScale = Vector(1.3, 1.3, 1.3),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "bipod","style_pistol"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(11, 0, -1.1),
            vang = Angle(0, 0, 0),
            wpos = Vector(8.425, 2.96, -2.54),
            wang = Angle(-3.074, -23.004, -172.249)
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(6.5, -1.2, 0.3),
            vang = Angle(0, 0, 90),
            wpos = Vector(8.425, 3.891, -4.147),
            wang = Angle(-3.074, -23.004, -77.301)
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(4, -0.85, 0.1),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 2/30,
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 11/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 31/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 11/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 26/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.9,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 24/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.3,
    },
    ["fire"] = {
        Source = "fire",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 6/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 76/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ump45_reload_lift_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ump45_reload_clipout_v1.wav", 	t = 15/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ump45_reload_clipin_v1.wav", 	t = 54/30},
					},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        Time = 92/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ump45_reload_lift_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ump45_reload_clipout_v1.wav", 	t = 20/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ump45_reload_clipin_v1.wav", 	t = 52/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ump45_reload_chamber_v1.wav", 	t = 68/30},
					},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
    },
}
--lua/weapons/arccw_oden.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Modern Warfare" -- edit this if you like
SWEP.AdminOnly = false

SWEP.PrintName = "Oden"
SWEP.TrueName = "VKL"
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "The VKL is a fictional modified version of the VSSK (ВССК) Russian bullpup, gas operated, magazine-fed assault rifle chambered for the 12.7X55mm STs-130 subsonic round. The weapon is also known by the name VSSK and the additional name Vykhlop, which comes from the development program. It was developed in around 2002 for the special force units of FSB.  																												 IN SERVICE: 2004"
SWEP.Trivia_Manufacturer = "CKIB SOO"
SWEP.Trivia_Calibre = "12.7X55mm STs-130"
SWEP.Trivia_Mechanism = "Gas-Operated"
SWEP.Trivia_Country = "Russia"
SWEP.Trivia_Year = 2002

SWEP.Slot = 3

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Schweizerische Industrie Gesellschaft"
end

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/cod_mw2019/c_oden_mammaledition.mdl"
SWEP.WorldModel = "models/weapons/cod_mw2019/w_oden_mammaledition.mdl"
SWEP.ViewModelFOV = 60

SWEP.Damage = 62
SWEP.DamageMin = 48 -- damage done at maximum range
SWEP.Range = 100 -- in METRES
SWEP.Penetration = 10
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any
SWEP.MuzzleVelocity = 725 -- projectile or phys bullet muzzle velocity
-- IN M/S

SWEP.TracerNum = 1 -- tracer every X
SWEP.TracerCol = Color(255, 25, 25)
SWEP.TracerWidth = 3
SWEP.EventTable = {
	[ACT_VM_DRAW] = {
		{time = 1 / 25, type = "sound", value = Sound("COD_MW2019_SG552.Draw")},
		{time = 8 / 25, type = "sound", value = Sound("COD_MW2019_SG552.Slideforward")}
	},
	[ACT_VM_RELOAD] = {
		{time = 21 / 30, type = "sound", value = Sound("COD_MW2019_SG552.ClipOut")},
		{time = 35 / 30, type = "sound", value = Sound("COD_MW2019_SG552.ClipIn")},
		{time = 45 / 30, type = "sound", value = Sound("COD_MW2019_SG552.ClipOn")},
		{time = 62 / 30, type = "sound", value = Sound("COD_MW2019_SG552.Slideback")},
		{time = 67 / 30, type = "sound", value = Sound("COD_MW2019_SG552.Slideforward")}	
	}
}

SWEP.ChamberSize = 1 -- how many rounds can be chambered.
SWEP.Primary.ClipSize = 20 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 30
SWEP.ReducedClipSize = 10

SWEP.Recoil = 0.8
SWEP.RecoilSide = 0.8
SWEP.RecoilRise = 1

SWEP.Delay = 60 / 410 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 200

SWEP.AccuracyMOA = 5 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 700 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "357" -- what ammo type the gun uses
SWEP.MagID = "type2" -- the magazine pool this gun draws from

SWEP.ShootVol = 115 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound = "weapons/cod_mw2019/oden/fire.wav"
SWEP.ShootSoundSilenced = "weapons/cod_mw2019/oden/rpk_suppressed_fp.wav"
SWEP.DistantShootSound = "weapons/arccw/ak47/ak47-1-distant.wav"

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellModel = "models/shells/shell_762nato.mdl"
SWEP.ShellScale = 1.5
SWEP.ShellMaterial = "models/weapons/arcticcw/shell_556_steel"

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 3 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.94
SWEP.SightedSpeedMult = 0.5
SWEP.SightTime = 0.33
SWEP.VisualRecoilMult = 1
SWEP.RecoilRise = 0.6

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.CaseBones = {}

SWEP.IronSightStruct = {
    Pos = Vector(-2.681, -2, -0.201),
    Ang = Angle(-0.101, -0.431, 0),
    Magnification = 1,
    SwitchToSound = "", -- sound that plays when switching to this sight
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = Fire

SWEP.ActivePos = Vector(0, 0, 0)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.HolsterPos = Vector(8, -2, -4.011)
SWEP.HolsterAng = Angle(1.898, 54.613, -10.113)

SWEP.BarrelOffsetSighted = Vector(0, 0, 0)
SWEP.BarrelOffsetHip = Vector(0, 0, 0)

SWEP.BarrelLength = 27

SWEP.AttachmentElements = {
    ["noch"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
        WMBodygroups = {{ind = 3, bg = 1}},
    },
    ["nofg"] = {
        VMBodygroups = {{ind = 0, bg = 1}},
        WMBodygroups = {{ind = 0, bg = 1}},
    },	
    ["bkrail"] = {
     VMElements = {
        {
            Model = "models/weapons/arccw/atts/backup_rail.mdl",
            Bone = "citi",
            Offset = {
                pos = Vector(-8, -5, 0),
                ang = Angle(180, 90, 90),
           },
		 },
      }
    },		
    ["fcg_semi"] = {
        TrueNameChange = "Vepr-KM",
        NameChange = "Wasp-2",
    }
}

SWEP.ExtraSightDist = 5

SWEP.Attachments = {
    {
        PrintName = "Optic", -- print name
        DefaultAttName = "Iron Sights",
        Slot = {"optic", "optic_sniper", "optic_lp"}, -- what kind of attachments can fit here, can be string or table
        Bone = "citi", -- relevant bone any attachments will be mostly referring to
        Offset = {
            vpos = Vector(-0.7, -4.78, 0), -- offset that the attachment will be relative to the bone
            vang = Angle(180, 0, -90),
            wpos = Vector(4.099, 0.45, -5.601),
            wang = Angle(171.817, 180-1.17, 0),
        },
    InstalledEles = {"noch"},
	CorrectivePos = Vector(0, 0, 0),
	CorrectiveAng = Angle(0, 0, 0)	
    },
    {
        PrintName = "Backup Optic", -- print name
        Slot = {"optic_lp"}, -- what kind of attachments can fit here, can be string or table
        Bone = "citi", -- relevant bone any attachments will be mostly referring to
        Offset = {
            vpos = Vector(-8, -5.38, -0.6), -- offset that the attachment will be relative to the bone
            vang = Angle(180, 0, -45),
            wpos = Vector(7.4, -0.6, -6),
            wang = Angle(-10.393, 0, 200)
        },	
        InstalledEles = {"bkrail"},		
        KeepBaseIrons = true,
		ExtraSightDist = 12
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "citi",
        Offset = {
            vpos = Vector(-13.8, -3.05, 0.1), -- offset that the attachment will be relative to the bone
            vang = Angle(180, 0, -90),
            wpos = Vector(16.387, 0.1, -6.301),
            wang = Angle(-9, 0, 180)
        },
		VMScale = Vector(1.5, 1.5, 1.5),		
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "ubgl", "bipod"},
        Bone = "citi",
        Offset = {
            vang = Angle(180, 0, -90),
            wpos = Vector(14.329, 0.202, -4.453),
            wang = Angle(-10.216, 0, 180)
        },	
        SlideAmount = {
            vmin = Vector(-5, -1.2, 0.1),
            vmax = Vector(-12, -1.2, 0.1),
            wmin = Vector(9, -0.1, -2.8),
            wmax = Vector(12, 0.1, -3.2),
        },		
        InstalledEles = {"nofg"},			
    },	
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "citi",
        Offset = {
            vpos = Vector(-8, -3.5, -1), -- offset that the attachment will be relative to the bone
            vang = Angle(180, 0, 180),
            wpos = Vector(11.625, -0.9, -6.098),
            wang = Angle(-8.829, -0.556, 90)
        },
    },
    {
        PrintName = "Grip",
        Slot = "grip",
        DefaultAttName = "Standard Grip"
    },
    {
        PrintName = "Stock",
        Slot = "stock",
        DefaultAttName = "Standard Stock"
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 0,
        SoundTable = {{s = "weapons/arccw/ak47/ak47_draw.wav", t = 0}},
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["draw"] = {
        Source = "Deploy",
        Time = 1,
        SoundTable = {{s = "weapons/cod_mw2019/oden/draw.wav", t = 0}},
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["ready"] = {
        Source = "draw",
        SoundTable = {{s = "weapons/cod_mw2019/oden/slideback.wav", t = 10/30},{s = "weapons/cod_mw2019/oden/slideforward.wav", t = 19/30}},
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.7,
    },
    ["fire"] = {
        Source = "fire",
        Time = 0.5,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "iron",
        Time = 0.5,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "wet",
        Time = 2.5,
        SoundTable = {{s = "weapons/cod_mw2019/oden/clipout.wav", t = 0.5},{s = "weapons/cod_mw2019/oden/clipin.wav", t = 1.3},{s = "weapons/cod_mw2019/oden/clipon.wav", t = 1.4}},
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Framerate = 37,
        Checkpoints = {28, 38, 69},
        LHIK = false,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
    ["reload_empty"] = {
        Source = "Reload",
        Time = 3,
        SoundTable = {{s = "weapons/cod_mw2019/oden/clipout.wav", t = 0.5},{s = "weapons/cod_mw2019/oden/clipin.wav", t = 1.3},{s = "weapons/cod_mw2019/oden/clipon.wav", t = 1.4},{s = "weapons/cod_mw2019/oden/slideback.wav", t = 2},{s = "weapons/cod_mw2019/oden/slideforward.wav", t = 2.2}},
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Framerate = 37,
        Checkpoints = {28, 38, 69},
        LHIK = false,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
    ["bash"] = {
        Source = {"melee"},
        Time = 40/35,
    },	
}

SWEP.WorldModelOffset = {
    pos        =    Vector(-9, 3.4, -5.2),
    ang        =    Angle(170, 178, 0),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale   =   1
}
--lua/weapons/arccw_uc_galilarm.lua:
if !file.Exists("weapons/arccw_uc_galil.lua","LUA") then return end

include("weapons/arccw_uc_galil.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets LMGs"
end

SWEP.PrintName = "IDF Lawmaker"
SWEP.TrueName = "Galil ARM"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[1].Installed = "uc_galil_charm_ns"
SWEP.Attachments[5].Installed = "uc_galil_underbarrel_bipod"
SWEP.Attachments[8].Installed = "uc_galil_mag_drum"

SWEP.Hook_NameChange = function(wep)
    if wep.Attachments[2].Installed ~= "uc_galil_barrel_short" then
        return GetConVar("arccw_truenames"):GetBool() and "Galil AR" or "IDF Defender"
    end
end
--lua/weapons/arccw_myt_uc_scar.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "9Urban Expedition"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellScale = 1.145
SWEP.ShellPitch = 100
SWEP.UC_ShellColor = Color(0.7*255, 0.2*255, 0.2*255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "Osckée 21"
-- True name --
SWEP.TrueName = "SCAR-H"

-- Trivia --

SWEP.Trivia_Class = "Battle Rifle"
SWEP.Trivia_Desc = [[
A highly modular rifle platform designed to be used by expeditionary forces. Configurable for urban combat, marksmanship, and more.

This alteration is permanently half baked in sun light.
]]
SWEP.Trivia_Calibre = "7.62x51mm NATO"
SWEP.Trivia_Country = "Wallonia" -- massive funny
SWEP.Trivia_Manufacturer = "Héristal van Hoog-Zert"  -- /Haut-Sart/ why are they speaking fake Dutch with French grammar?
SWEP.Trivia_Year = 2004

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "FN Herstal"
    SWEP.Trivia_Country = "Belgium"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_uc_myt_scar.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_uc_myt_scar.mdl"
SWEP.ViewModelFOV = 70
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["762_51"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["762_51"].min
SWEP.RangeMin = 50
SWEP.Range = 400
SWEP.Penetration = ArcCW.UC.StdDmg["762_51"].pen
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = ArcCW.UC.StdDmg["762_51"].vel
SWEP.PhysBulletMuzzleVelocity = ArcCW.UC.StdDmg["762_51"].vel

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.chreleaseSize = 1
SWEP.Primary.ClipSize = 20
SWEP.ExtendedClipSize = 30
SWEP.ReducedClipSize = 10

-- Recoil --

SWEP.Recoil = 1.1
SWEP.RecoilSide = 0.7

SWEP.RecoilRise = 0.1
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchpull = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 600
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120
SWEP.ShootPitchVariation = 0

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 3.5
SWEP.HipDispersion = 750
SWEP.MoveDispersion = 220
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "ar2"

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.5
SWEP.ShootSpeedMult = 0.9

-- Length --

SWEP.BarrelLength = 48
SWEP.ExtraSightDist = 7

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, 8, -0.5)
SWEP.HolsterAng = Angle(-10, 8, -15)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-3.71, 3, 0.51),
     Ang = Angle(0, 0, 0),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.ActivePos = Vector(0, 7, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(0, 5, -2)
SWEP.CustomizeAng = Angle(10, 0, 0)

SWEP.CrouchPos = Vector(-1, 5, -0.25)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.BarrelOffsetHip = Vector(2, 0, -5)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-3, 4, -8),
    ang        =    Angle(-6, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
}

-- Firing sounds --

local path = ")weapons/uc_osk/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_5.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local mech = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rutle = {common .. "movement-rifle-01.ogg", common .. "movement-rifle-02.ogg", common .. "movement-rifle-03.ogg", common .. "movement-rifle-04.ogg"}
local magdrop = {common .. "rifle_magdrop_1.ogg", common .. "rifle_magdrop_2.ogg", common .. "rifle_magdrop_3.ogg", common .. "rifle_magdrop_4.ogg"}
--SWEP.FirstShootSound = path .. "fire_first.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/308/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-308-rif-ext-01.ogg",
    tail .. "fire-dist-308-rif-ext-02.ogg",
    tail .. "fire-dist-308-rif-ext-03.ogg",
    tail .. "fire-dist-308-rif-ext-04.ogg",
    tail .. "fire-dist-308-rif-ext-05.ogg",
    tail .. "fire-dist-308-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    tail .. "fire-dist-308-rif-int-01.ogg",
    tail .. "fire-dist-308-rif-int-02.ogg",
    tail .. "fire-dist-308-rif-int-03.ogg",
    tail .. "fire-dist-308-rif-int-04.ogg",
    tail .. "fire-dist-308-rif-int-05.ogg",
    tail .. "fire-dist-308-rif-int-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.FiremodeSound = {
    path .. "selector-01.ogg",
    path .. "selector-02.ogg",
    path .. "selector-03.ogg",
    path .. "selector-04.ogg",
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --


SWEP.AttachmentElements = {	
    ["conv_9mm"] = {
        NameChange = "Aanvulloir 16",
        TrueNameChange = "SCAR-9",
        VMBodygroups = {
            {ind = 2, bg = 3},
            {ind = 4, bg = 4},
        },
    },	 
	["conv_ak"] = {
        NameChange = "Chijmaar 32",
        TrueNameChange = "SCAR-47",
        VMBodygroups = {
            {ind = 2, bg = 2},
            {ind = 4, bg = 2},
        },
    },
	["conv_ak70"] = {
        NameChange = "Chijmaar 70",
        TrueNameChange = "SCAR-47/70",
        VMBodygroups = {
            {ind = 2, bg = 4},
            {ind = 4, bg = 3},
        },
    },
	["conv_556"] = {
        NameChange = "Scarlett 17",
        TrueNameChange = "SCAR-L",
        VMBodygroups = {
            {ind = 2, bg = 1},
            {ind = 4, bg = 1},
        },
    },	
	["conv_ssr"] = {
        NameChange = "Lancierie 24",
        TrueNameChange = "SCAR-SSR",
        VMBodygroups = {
            {ind = 2, bg = 5},
            {ind = 4, bg = 0},
        },
    },	

	["stock_ssr"] = {
        VMBodygroups = {
            {ind = 7, bg = 6},
        },
    },
	["stock_tube"] = { VMBodygroups = { {ind = 0, bg = 2},{ind = 7, bg = 10}, }, },
	["stock_folded"] = { VMBodygroups = { {ind = 7, bg = 1}, }, },
	["stock_pdw"] = { VMBodygroups = { {ind = 7, bg = 4}, }, },
	["stock_pdwf"] = { VMBodygroups = { {ind = 7, bg = 5}, }, },
	["stock_231_ex"] = { VMBodygroups = { {ind = 7, bg = 7}, {ind = 0, bg = 2}, }, },
	["stock_231_in"] = { VMBodygroups = { {ind = 7, bg = 8}, {ind = 0, bg = 2}, }, },
	["stock_fold"] = { VMBodygroups = { {ind = 7, bg = 2}, }, },
	["stock_foldf"] = { VMBodygroups = { {ind = 7, bg = 3}, }, },

	["grip_flat"] = { VMBodygroups = { {ind = 6, bg = 1}, }, },	
	["grip_hollow"] = { VMBodygroups = { {ind = 6, bg = 2}, }, },
	
	["hg_l"] = {
        VMBodygroups = {
            {ind = 8, bg = 3},
            {ind = 9, bg = 3},
        },
        AttPosMods = {
            [3] = { vpos = Vector(0, -1.65, 22.0) },
        }
    },	
	["hg_20"] = {
        VMBodygroups = {
            {ind = 8, bg = 5},
            {ind = 9, bg = 5},
			{ind = 1, bg = 5},
        },
        AttPosMods = {
            [3] = { vpos = Vector(0, -1.65, 22.6) },
        }
    },
    ["hg_sd"] = {
        VMBodygroups = {
            {ind = 8, bg = 4},
            {ind = 9, bg = 4},
            {ind = 1, bg = 3},
        },
        AttPosMods = {
            [3] = { vpos = Vector(0, -1.65, 15.5) },
            [4] = { vpos = Vector(0, 0, 9) },
            [5] = { vpos = Vector(-1.5, -1.7, 9.5) },
			[14] = { vpos = Vector(0, -1, 6) },
        },
    },
    ["hg_s"] = {
        VMBodygroups = {
            {ind = 8, bg = 1},
            {ind = 9, bg = 1},
            {ind = 1, bg = 1},
        }, 
        AttPosMods = {
            [3] = { vpos = Vector(0, -1.65, 12.9) },
            [4] = { vpos = Vector(0, -0.75, 7.5) },
            [5] = { vpos = Vector(-1, -1.7, 8.5) },
        },
    },
    ["hg_xs"] = {
        VMBodygroups = {
            {ind = 8, bg = 2},
            {ind = 9, bg = 2},
            {ind = 1, bg = 2},
        }, 
        AttPosMods = {
            [3] = { vpos = Vector(0, -1.65, 10.5) },
            [4] = { vpos = Vector(0, -0.75, 7) },
            [5] = { vpos = Vector(-1, -1.7, 7.5) },
        },
    },
}

SWEP.DefaultBodygroups = "000000000000000"

SWEP.Hook_ModifyBodygroups = function(wep, data)
	local vm = data.vm
	local handguard = wep.Attachments[2].Installed
	if wep.Attachments[1].Installed then 
        if (handguard == "uc_myt_scar_hg_s") || (handguard == "uc_myt_scar_hg_sd") then vm:SetBodygroup(5, 3) 
        elseif handguard == "uc_myt_scar_hg_xs" then vm:SetBodygroup(5, 5)
        elseif handguard == "uc_myt_scar_hg_20" then vm:SetBodygroup(5, 8)
        else   vm:SetBodygroup(5, 1) end
    
	else
		if (handguard == "uc_myt_scar_hg_s") || (handguard == "uc_myt_scar_hg_sd") then vm:SetBodygroup(5, 2) 
		elseif handguard == "uc_myt_scar_hg_xs" then vm:SetBodygroup(5, 4)
		elseif handguard == "uc_myt_scar_hg_20" then vm:SetBodygroup(5, 7)
		else   vm:SetBodygroup(5, 0) end

    end

	if wep.Attachments[3].Installed then vm:SetBodygroup(9, 4) end	
end

SWEP.Hook_Think = ArcCW.UC.ADSReload

SWEP.NoHideLeftHandInCustomization = true
SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
    },

    ["ready"] = {
        Source = "deploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2 + 5/40},
            {s = path .. "chpull.ogg",   t = 18/40},
            {s = common .. "cloth_4.ogg",  t = 0.5 + 5/40},
            {s = path .. "chrelease.ogg",  t = 32/40},
        },
        ProcDraw = false,
    },	
    ["ready_empty"] = {
        Source = "deploy_empty",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2 + 5/40},
            {s = common .. "cloth_4.ogg",  t = 0.5 + 5/40},
        },
        ProcDraw = false,
        ForceEmpty = true,
    },	
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = path .. "rattle_3.ogg", t = 0.2},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 20 / 30,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = path .. "rattle_3.ogg", t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = false,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        LHIK = false,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["fix"] = {
        Source = "fix",
        ShellEjectAt = 0.5,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.7,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = path .. "chpull.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chrelease.ogg",  t = 0.5},
        },
    },  
    ["fire"] = {
        Source = "fire",
        ShellEjectAt = 0.01,
        SoundTable = {{ s = mech, t = 0, v = 0.25 }},
    },  
	["fire_iron"] = {
        Source = "fire",
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = common .. "common_mech_light.ogg", t = 0},
            { s = mech, t = 0 }
        },
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = common .. "common_mech_light.ogg", t = 0},
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    }, 
	["fire_iron_empty"] = {
        Source = "fire_empty",
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = common .. "common_mech_light.ogg", t = 0},
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },

    -- Base --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 1.8,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 10/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 42/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 56/40},
            {s = rottle, 			                    t = 60/40},
            {s = "weapons/uc_osk/magtap.ogg", 			t = 66/40},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 2.25,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 7/40},
            {s = rottle, 			                    t = 17/40},
            {s = magdrop, 			                    t = 40/40, v = 0.25},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 46/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 62/40},
            {s = rottle, 			                    t = 69/40},
            {s = "weapons/uc_osk/boltcatch.ogg", 		t = 82/40},
            {s = rottle, 			                    t = 88/40},
        },
    },

    ["enter_inspect"] = {
        Source = "inspect_enter",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },
    ["enter_inspect_empty"] = {
        Source = "inspect_enter_empty",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "inspect_loop_empty",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty"] = {
        Source = "inspect_exit_empty",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },	

    -- 9mm --

    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-9.ogg", 		t = 10/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle-9.ogg", 		t = 40/40},
            {s = "weapons/uc_osk/magin-9.ogg", 			t = 53/40},
            {s = rottle, 			                    t = 60/40},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_empty_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 1.6,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-9.ogg", 		t = 5/40},
            {s = rottle, 			                    t = 17/40},
            {s = magdrop, 			                    t = 30/40, v = 0.25},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle-9.ogg", 		t = 35/40},
            {s = "weapons/uc_osk/magin-9.ogg", 			t = 41/40},
            {s = "weapons/uc_osk/boltcatchpress-9.ogg", t = 58/40},
            {s = rottle, 			                    t = 62/40},
        },
    },

    ["enter_inspect_9mm"] = {
        Source = "inspect_enter_9mm",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_9mm"] = {
        Source = "inspect_loop_9mm",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_9mm"] = {
        Source = "inspect_exit_9mm",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-9.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle-9.ogg", 		t = 53/40},
            {s = "weapons/uc_osk/magin-9.ogg", 			t = 68/40},
            {s = rottle, 			                    t = 69/40},
        },
    },
    ["enter_inspect_empty_9mm"] = {
        Source = "inspect_enter_empty_9mm",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0, 
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty_9mm"] = {
        Source = "inspect_loop_empty_9mm",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0, 
    },
    ["exit_inspect_empty_9mm"] = {
        Source = "inspect_exit_empty_9mm",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-9.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle-9.ogg", 		t = 53/40},
            {s = "weapons/uc_osk/magin-9.ogg", 			t = 68/40},
            {s = rottle, 			                    t = 69/40},
        },
    },	 
	
    -- ssr --

    ["reload_ssr"] = {
        Source = "reload_ssr",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 2,
        LastClip1OutTime = 0.9,
        LHIK = false,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 14/40},
            {s = rottle, 			                    t = 17/40},
            {s = common .. "magpouch.ogg",              t = 40/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 72/40},
            {s = rottle, 			                    t = 80/40},
        },
    },
    ["reload_empty_ssr"] = {
        Source = "reload_empty_ssr",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 2.7,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 2.8,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 14/40},
            {s = rottle, 			                    t = 17/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = magdrop, 			                    t = 46/40, v = 0.25},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 72/40},
            {s = rottle, 			                    t = 78/40},
            {s = "weapons/uc_osk/boltcatch.ogg", 		t = 101/40},
            {s = rottle, 			                    t = 104/40},
        },
    },

    ["enter_inspect_ssr"] = {
        Source = "inspect_enter_ssr",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0, 
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_ssr"] = {
        Source = "inspect_loop_ssr",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0, 
    },
    ["exit_inspect_ssr"] = {
        Source = "inspect_exit_ssr",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 46/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            -- {s = "weapons/uc_osk/boltcatch.ogg", 		t = 82/40},
        },
    },
    ["enter_inspect_empty_ssr"] = {
        Source = "inspect_enter_empty_ssr",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0, 
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty_ssr"] = {
        Source = "inspect_loop_empty_ssr",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty_ssr"] = {
        Source = "inspect_exit_empty_ssr",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },	 

    -- 556 --

    ["reload_556"] = {
        Source = "reload_556",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 1.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 10/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 30/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 40/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 53/40},
            {s = rottle, 			                    t = 60/40},
        },
    },
    ["reload_empty_556"] = {
        Source = "reload_empty_556",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 1.85,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 3/40},
            {s = rottle, 			                    t = 17/40},
            {s = magdrop, 			                    t = 22/40, v = 0.35},
            {s = common .. "magpouch.ogg",              t = 26/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 40/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 50/40},
            {s = rottle, 			                    t = 69/40},
            {s = "weapons/uc_osk/boltcatchpress.ogg", 	t = 70/40},
            {s = rottle, 			                    t = 75/40},
        },
    },

    ["enter_inspect_556"] = {
        Source = "inspect_enter_556",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_556"] = {
        Source = "inspect_loop_556",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0, -- maybe im dumb
    },
    ["exit_inspect_556"] = {
        Source = "inspect_exit_556",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },
    ["enter_inspect_empty_556"] = {
        Source = "inspect_enter_empty_556",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty_556"] = {
        Source = "inspect_loop_empty_556",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty_556"] = {
        Source = "inspect_exit_empty_556",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },	 

	-- ak --

    ["reload_ak"] = {
        Source = "reload_ak",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 1.6,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-762.ogg", 		t = 12/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle-762.ogg", 	t = 49/40},
            {s = "weapons/uc_osk/magin-762.ogg", 		t = 61/40},
            {s = rottle, 			                    t = 60/40},
        },
    },
    ["reload_empty_ak"] = {
        Source = "reload_empty_ak",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 2.3,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-762.ogg", 		t = 12/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle-762.ogg", 	t = 51/40},
            {s = "weapons/uc_osk/magin-762.ogg", 		t = 61/40},
            {s = rottle, 			                    t = 69/40},
            {s = "weapons/uc_osk/boltcatchpress.ogg", 	t = 85/40},
            {s = rottle, 			                    t = 88/40},
        },
    },

    ["enter_inspect_ak"] = {
        Source = "inspect_enter_ak",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_ak"] = {
        Source = "inspect_loop_ak",
        -- time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0
    },
    ["exit_inspect_ak"] = {
        Source = "inspect_exit_ak",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },
    ["enter_inspect_empty_ak"] = {
        Source = "inspect_enter_empty_ak",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty_ak"] = {
        Source = "inspect_loop_empty_ak",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty_ak"] = {
        Source = "inspect_exit_empty_ak",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.375,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout.ogg", 			t = 20/40},
            {s = rottle, 			                    t = 17/40},
            {s = "weapons/uc_osk/struggle.ogg", 		t = 60/40},
            {s = "weapons/uc_osk/magin.ogg", 			t = 70/40},
            {s = rottle, 			                    t = 69/40},
            {s = common .. "shoulder.ogg", 	        	t = 88/40, v = .5},
        },
    },	
	
	-- ak drum--

    ["reload_ak_drum"] = {
        Source = "reload_ak_drum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 2.1,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.25,
        LHIKEaseIn = 0.225,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-762.ogg", 		t = 12/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle-762.ogg", 	t = 54/40},
            {s = "weapons/uc_osk/magin-762.ogg", 		t = 64/40},
			{s = "weapons/uc_osk/magtap.ogg", 			t = 75/40},
            {s = rottle, 			                    t = 60/40},
        },
    },
    ["reload_empty_ak_drum"] = {
        Source = "reload_empty_ak_drum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        MinProgress = 2.8,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.25,
        LHIKEaseIn = 0.225,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = "weapons/uc_osk/magout-762.ogg", 		t = 12/40},
            {s = rottle, 			                    t = 20/40},
            {s = common .. "magpouch.ogg",              t = 32/40},
            {s = "weapons/uc_osk/struggle-762.ogg", 	t = 54/40},
            {s = "weapons/uc_osk/magin-762.ogg", 		t = 64/40},
            {s = rottle, 			                    t = 69/40},
            {s = path .. "chpull.ogg",   				t = 95/40},
            {s = common .. "cloth_4.ogg", 				t = 98/40},
            {s = path .. "chrelease.ogg",  				t = 106/40},
            {s = rottle, 			                    t = 114/40},
        },
    },

    ["enter_inspect_ak_drum"] = {
        Source = "inspect_enter_ak_drum",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_ak_drum"] = {
        Source = "inspect_loop_ak_drum",
        -- time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0
    },
    ["exit_inspect_ak_drum"] = {
        Source = "inspect_exit_ak_drum",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.475,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = common .. "shoulder.ogg", 	        	t = 20/40, v = .5},
        },
    },
    ["enter_inspect_empty_ak_drum"] = {
        Source = "inspect_enter_empty_ak_drum",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty_ak_drum"] = {
        Source = "inspect_loop_empty_ak_drum",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty_ak_drum"] = {
        Source = "inspect_exit_empty_ak_drum",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.475,
        SoundTable = {
            {s = rottle, 			                    t = 0/40},
            {s = common .. "shoulder.ogg", 	        	t = 20/40, v = .5},
        },
    },	
}

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        --InstalledEles = {"upper_flat"}, no such thing
        Slot = {"optic","optic_sniper"},
        Bone = "W_Main",
        VMScale = Vector(1.15, 1.15, 1.15),
        Offset = {
            vpos = Vector(-0, -3.78, 0.5),
            vang = Angle(90, 0, -90),
        },
        //MergeSlots = {16},
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "14\" Standard Barrel",
        Slot = "uc_myt_scar_hg",
        Bone = "W_Main",
        Offset = {
            vpos = Vector(3.5, -4.25, -7),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "W_Main",
        Offset = {
            vpos = Vector(0, -1.65, 15.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd"},
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "W_Main",
        Offset = {
            vpos = Vector(0, -0.75, 9),
            vang = Angle(90, 0, -90),
        },
        MergeSlots = {14},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "W_Main",
        Offset = {
            vpos = Vector(-1, -1.7, 9.5),
            vang = Angle(90, 0, 180),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"uc_myt_scar_grip"},
		Hidden = true,
        DefaultAttName = "Standard Grip",
    },
    {
        PrintName = "Stock",
        Slot = {"uc_myt_scar_stock"},
        DefaultAttName = "Standard Stock",
        MergeSlots = {15},
    },
    {
        PrintName = "Magazine",
        Slot = {"uc_myt_scar_mag"},
        Bone = "W_Main",
        Offset = {
            vpos = Vector(0, -0.75, 9),
            vang = Angle(90, 0, -90),
        },
        DefaultAttName = "20-Round Mag",
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "W_Main",
        Offset = {
            vpos = Vector(0.8, -1.9, 2.5),
            vang = Angle(90, 0, -90),
        },
	},
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "W_Main",
        Offset = {
            vpos = Vector(0, -1.75, 6), -- this is also changed by ModifyBodygroups
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
        InstalledEles = {"mount_underbarrel"},
	},
    {
        PrintName = "Tube Stock Adaptor",
        Slot = {"go_stock"},
        -- GSO support
        Hidden = true,
        InstalledEles = {"stock_tube"},
        Bone = "W_Main",
        Offset = {
            vpos = Vector(0, -2.15, -7.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Hidden = true,
        InstalledEles = {"cust_irons"},
        Slot = {"ud_m16_rs"},
        Bone = "W_Main",
        Offset = {
            vpos = Vector(-0, -3.78, 0.5),
            vang = Angle(90, 0, -90),
        },
    },
}
--lua/weapons/arccw_ud_arpistol.lua:
return gluapack()()
--lua/weapons/arccw_ud_m16.lua:
return gluapack()()
--lua/weapons/arccw_ud_glock.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
SWEP.ShellScale = 1
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_9mm"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.PistolShellSoundsTable

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "GEN3"

-- True name --

SWEP.TrueName = "Glock 17"

-- Trivia --

SWEP.Trivia_Class = "Pistol"
SWEP.Trivia_Desc = [[Handgun originally designed by a curtain rod manufacturer for the Austrian military. Its reliable and cost-effective polymer design has since made it one of the most popular and widely used pistols in the world, common in military, police and civilian use alike.

Great backup weapon due to its quick draw and sight times, but a relatively low damage output makes it a less than ideal primary.]]
SWEP.Trivia_Manufacturer = "Next Generation Weapons Inc."
SWEP.Trivia_Calibre = "9x19mm Parabellum"
SWEP.Trivia_Mechanism = "Short Recoil"
SWEP.Trivia_Country = "Austria"
SWEP.Trivia_Year = 1982

-- Weapon slot --

SWEP.Slot = 1

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Glock Ges.m.b.H."
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_glock.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_glock.mdl"
SWEP.ViewModelFOV = 60
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["9mm"].max -- 4 shot close range kill (3 on chest)
SWEP.DamageMin = ArcCW.UC.StdDmg["9mm"].min -- 5 shot long range kill
SWEP.Penetration = ArcCW.UC.StdDmg["9mm"].pen

SWEP.RangeMin = 15
SWEP.Range = 50 -- 4 shot until ~35m
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 375
SWEP.PhysBulletMuzzleVelocity = 375

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 17
SWEP.ExtendedClipSize = 33
SWEP.ReducedClipSize = 10

-- Recoil --

SWEP.Recoil = 1.0
SWEP.RecoilSide = 0.5

SWEP.RecoilRise = 0.24
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 0.5
SWEP.MaxRecoilPunch = 0.6

SWEP.Sway = 1

-- Firerate / Firemodes --

SWEP.Delay = 60 / 525
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        PrintName = "fcg.safe2",
        Mode = 0,
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_pistol"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 7
SWEP.HipDispersion = 500
SWEP.MoveDispersion = 250
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "pistol"
SWEP.MagID = "glock"

SWEP.HeatCapacity = 50
SWEP.HeatDissipation = 20
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 150
SWEP.MalfunctionTakeRound = false

-- Speed multipliers --

SWEP.SpeedMult = 0.975
SWEP.SightedSpeedMult = 0.9
SWEP.SightTime = 0.25
SWEP.ShootSpeedMult = 1

-- Length --

SWEP.BarrelLength = 8
SWEP.ExtraSightDist = 10

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(-0.5, -2, -1)
SWEP.HolsterAng = Angle(3.5, 7, -20)

SWEP.HolsterPos = Vector(-1, -2, 3)
SWEP.HolsterAng = Angle(-15.5, 2, -7)

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "pistol"
SWEP.HoldtypeSights = "revolver"

SWEP.IronSightStruct = {
     Pos = Vector(-2.3, 1, 2.52),
     Ang = Angle(0.3, 0, 0),
     Magnification = 1,
     ViewModelFOV = 55,
     SwitchToSound = ratel, -- sound that plays when switching to this sight
     SwitchFromSound = ratel
}

SWEP.ActivePos = Vector(-0.2, -2, 2)
SWEP.ActiveAng = Angle(0, 0, -5)

SWEP.CustomizePos = Vector(7, -2, -2)
SWEP.CustomizeAng = Angle(15, 25, 0)

SWEP.CrouchPos = Vector(-2, -6, 1)
SWEP.CrouchAng = Angle(0, 0, -20)

SWEP.BarrelOffsetHip = Vector(3.5, 0, -3)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-10.5, 3.5, -4.8),
    ang        =    Angle(-6, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
}

-- Firing sounds --

local path = ")weapons/arccw_ud/glock/"
local path1 = ")weapons/arccw_ud/uzi/"
local common = ")/arccw_uc/common/"
SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}

SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/9x19/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-9x19-pistol-ext-01.ogg",
    tail .. "fire-dist-9x19-pistol-ext-02.ogg",
    tail .. "fire-dist-9x19-pistol-ext-03.ogg",
    tail .. "fire-dist-9x19-pistol-ext-04.ogg",
    tail .. "fire-dist-9x19-pistol-ext-05.ogg",
    tail .. "fire-dist-9x19-pistol-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-pistol-01.ogg",
    common .. "fire-dist-int-pistol-02.ogg",
    common .. "fire-dist-int-pistol-03.ogg",
    common .. "fire-dist-int-pistol-04.ogg",
    common .. "fire-dist-int-pistol-05.ogg",
    common .. "fire-dist-int-pistol-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg",
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [2] = "glock_bullet1"
}

SWEP.AttachmentElements = {
    ["ud_glock_skin_tan"] = {
        VMSkin = 1,
    },
    ["ud_glock_skin_olive"] = {
        VMSkin = 2,
    },
    ["ud_glock_skin_custom"] = {
        VMSkin = 3,
    },
    ["ud_glock_mag_10"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        AttPosMods = {
            [8] = {
            vpos = Vector(0.1, 1, -1.2),
                vang = Angle(90, 0, -90),
            }
        }
    },
    ["ud_glock_frame_subcompact"] = {
        VMBodygroups = {{ind = 0, bg = 2}},
    },
    ["ud_glock_frame_flared"] = {
        VMBodygroups = {{ind = 0, bg = 1}},
    },
    ["ud_glock_mag_33"] = {
        VMBodygroups = {{ind = 1, bg = 2}},
    },
    ["ud_glock_mag_100"] = {
        VMBodygroups = {{ind = 1, bg = 3}},
    },

    ["ud_glock_rail_optic"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["ud_glock_slide_comp"] = {
        VMBodygroups = {{ind = 3, bg = 1}},
        NameChange = "GEN3 Custom",
        TrueNameChange = "Glock 17 Custom",
        Override_IronSightStruct = {
            Pos = Vector(-2.283, 0, 2.506),
            Ang = Angle(0.58, 0, 0),
            Magnification = 1,
        }
    },
    ["ud_glock_slide_lb"] = {
        VMBodygroups = {{ind = 3, bg = 2}},
        NameChange = "GEN3 Extended",
        TrueNameChange = "Glock 17L",
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 0, 1.5),
                vang = Angle(90, 0, -90),
            }
        }
    },
    ["ud_glock_slide_auto"] = {
        VMBodygroups = {{ind = 3, bg = 3}},
        NameChange = "GEN3 Auto",
        TrueNameChange = "Glock 18C",
    },
    ["ud_glock_slide_subcompact"] = {
        VMBodygroups = {{ind = 3, bg = 8}},
        NameChange = "GEN3K",
        TrueNameChange = "Glock 26",
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 0, -0.5),
                vang = Angle(90, 0, -90),
            }
        }
    },
    ["ud_glock_slide_cs"] = {
        VMBodygroups = {{ind = 3, bg = 6}},
        NameChange = "GEN3 CS",
        TrueNameChange = "Glock 18CS",
    },
    ["ud_glock_slide_carbine"] = {
        VMBodygroups = {{ind = 3, bg = 4}},
        NameChange = "GEN3 Euro Carbine",
        TrueNameChange = "Glock 17XXXL",
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 0, 11.2),
                vang = Angle(90, 0, -90),
            }
        }
    },
    ["ud_glock_slide_sd"] = {
        VMBodygroups = {{ind = 3, bg = 5}},
        NameChange = "GEN3 Silent Mistress",
        TrueNameChange = "Glock 17SD",
        GivesFlags = {"sd"},
        AttPosMods = {
            [6] = {
                vpos = Vector(0, 0.1, 5),
                vang = Angle(90, 0, -90),
            },
            [7] = {
                vpos = Vector(0, 0.1, 5),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["ud_glock_slide_nytesyte"] = {
        VMBodygroups = {{ind = 3, bg = 7}},
        NameChange = "GEN3 Homeboy",
        TrueNameChange = "Glock 17 NyteSyte",
        AttPosMods = {
            [1] = {
                vpos = Vector(-0.5, 0.05, -0.5),
                vang = Angle(90, 0, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-3.057, 0, 3.397),
            Ang = Angle(0, 0, -90),
            Magnification = 1,
        }
    },
}

local desg_barr = {
    ["ud_glock_slide_auto"] = 1,
    ["ud_glock_slide_lb"] = 2,
    ["ud_glock_slide_carbine"] = 3,
    ["ud_glock_slide_comp"] = 4,
    ["ud_glock_slide_cs"] = 5,
    ["ud_glock_slide_sd"] = 6,
    ["ud_glock_slide_nytesyte"] = 7,
    ["ud_glock_slide_subcompact"] = 8,
}
local desg_cal = {
    ["ud_glock_caliber_40sw"] = 1,
    ["ud_glock_caliber_357sig"] = 2,
    ["ud_glock_caliber_10auto"] = 3,
    ["ud_glock_caliber_45acp"] = 4,
    ["ud_glock_caliber_22lr"] = 5,
    ["ud_glock_caliber_380acp"] = 6,
    ["ud_glock_caliber_460"] = 7,
    ["ud_glock_caliber_50gi"] = 8,
}

SWEP.Hook_NameChange = function(wep,name)
    barrel = desg_barr[wep.Attachments[2].Installed] or 0
    caliber = desg_cal[wep.Attachments[4].Installed] or 0
    trueNames = GetConVar("arccw_truenames"):GetBool()

    start = ""
    mid = ""
    suffix = ""

    if trueNames then
        start = "Glock "

        if caliber == 0 then
            if barrel == 1 then
                mid = "18C"
            elseif barrel == 2 then
                mid = "17L"
            elseif barrel == 5 then
                mid = "18"
            elseif barrel == 8 then
                mid = "26"
            else
                mid = "17"
            end
        else
            if caliber == 1 then
                if barrel == 2 then
                    mid = "24"
                elseif barrel == 8 then
                    mid = "27"
                else
                    mid = "22"
                end
            elseif caliber == 2 then
                if barrel == 8 then
                    mid = "33"
                else
                    mid = "31"
                end
            elseif caliber == 3 then
                if barrel == 2 then
                    mid = "40"
                elseif barrel == 8 then
                    mid = "29"
                else
                    mid = "20"
                end
            elseif caliber == 4 then
                if barrel == 8 then
                    mid = "30"
                else
                    mid = "21"
                end
            elseif caliber == 5 then
                mid = "44"
            elseif caliber == 6 then
                if barrel == 8 then
                    mid = "28"
                else
                    mid = "25"
                end
            elseif caliber == 7 then
                if barrel == 8 then
                    mid = "30"
                else
                    mid = "21"
                end
            elseif caliber == 8 then
                if barrel == 8 then
                    mid = "30"
                else
                    mid = "21"
                end
            end
        end
    else
        start = "GEN"

        if caliber == 0 then
            mid = "3"
        elseif caliber == 1 then
            mid = "5"
        elseif caliber == 2 then
            mid = "6"
        elseif caliber == 3 then
            mid = "8"
        elseif caliber == 4 then
            mid = "11"
        elseif caliber == 5 then
            mid = "22"
        elseif caliber == 6 then
            mid = "15"
        end

        if barrel == 2 then
            suffix = "L"
        elseif barrel == 8 then
            suffix = "K"
        end
    end

    if barrel == 1 and (caliber ~= 0 or !trueNames) then
        suffix = " Auto"
    elseif barrel == 2 and !trueNames then
        suffix = "L"
    elseif barrel == 3 then
        if trueNames then
            suffix = "XXXL"
        else
            suffix = " Euro Carbine"
        end
    elseif barrel == 4 then
        suffix = " Custom"
    elseif barrel == 5 then
        suffix = "CS"
    elseif barrel == 6 then
        if trueNames then
            suffix = " Hush Puppy"
        else
            suffix = " Silent Mistress"
        end
    elseif barrel == 7 then
        if trueNames then
            suffix = " NyteSyte"
        else
            suffix = " Homeboy"
        end
    end

    -- Todo: Subcompact variants when the barrel variant comes out
    return start .. mid .. suffix
end

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

-- CHAN_ITEM doesn't sound too right
local ci = CHAN_AUTO
local ratel = {path .. "pistol_rattle_1.ogg", path .. "pistol_rattle_2.ogg", path .. "pistol_rattle_3.ogg"}
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}

SWEP.Animations = {
    ["ready"] = {
        Source = "fix_100",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "draw.ogg", t = 0}, -- Not Temporary
            {s = common .. "raise.ogg", t = 0.05},
            {s = ratel, t = 0},
            {s = path .. "slide_pull_new.ogg",  t = 0.4, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.4, c = ci},
            {s = path .. "slide_rel_new.ogg",        t = 0.6, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = {
            {s = path .. "draw.ogg", t = 0}, -- Not Temporary
            {s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 12 / 30,
        SoundTable = {
            {s = path .. "draw.ogg", t = 0}, -- Not Temporary
            {s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0,
        LHIKOut = 0,
        SoundTable = {
            {s = common .. "cloth_2.ogg", t = 0},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 12 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0,
        LHIKOut = 0,
        SoundTable = {
            {s = common .. "cloth_2.ogg", t = 0},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },
    ["fire"] = {
        Source = "fire",
        Time = 16 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.5 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 16 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 16 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Not Temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 16 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Not Temporary
        },
    },
    ["fire_stock"] = {
        Source = "fire_stock",
        Time = 16 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0.03 }},
    },
    ["fire_empty_stock"] = {
        Source = "fire_empty_stock",
        Time = 16 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0, c = ci}, -- Not Temporary
        },
    },
    ["fire_cycle"] = {
        Source = "fire_cycle",
        Time = 16 / 30,
    },

    ["fix"] = {
        Source = "fix",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "magtap.ogg",    t = 0.18, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
            {s = path .. "slide_rel_new.ogg",        t = 0.7, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_empty"] = {
        Source = "fix_empty",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "magtap.ogg",    t = 0.18, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_10"] = {
        Source = "fix_10",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "magtap.ogg",    t = 0.18, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
            {s = path .. "slide_rel_new.ogg",        t = 0.7, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_empty_10"] = {
        Source = "fix_empty_10",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "magtap.ogg",    t = 0.18, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_33"] = {
        Source = "fix_33",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "magtap.ogg",    t = 0.18, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
            {s = path .. "slide_rel_new.ogg",        t = 0.7, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_empty_33"] = {
        Source = "fix_empty_33",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = path .. "magtap.ogg",    t = 0.18, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_100"] = {
        Source = "fix_100",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "slide_pull_new.ogg",  t = 0.4, c = ci},
            {s = path .. "sliderel_deact.ogg",  t = 0.4, c = ci},
            {s = path .. "slide_rel_new.ogg",        t = 0.6, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["fix_empty_100"] = {
        Source = "cycle_empty",
        Time = 40 / 30,
        ShellEjectAt = false,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "sliderel_deact.ogg",  t = 0.5, c = ci},
            {s = path .. "slide_pull_new.ogg",  t = 0.5, c = ci},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },

    ["cycle"] = {
        Source = "cycle",
        Time = 32 / 30,
        ShellEjectAt = 0.4,
        SoundTable = {
            {s = rottle, t = 0, v = 50},
            {s = path .. "slide_pull_new.ogg",  t = 0.3, c = ci, v = 50},
            {s = path .. "sliderel_deact.ogg",  t = 0.3, c = ci, v = 50},
            {s = path .. "slide_rel_new.ogg",        t = 0.55, c = ci, v = 50},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },
    ["cycle_empty"] = {
        Source = "cycle_empty",
        Time = 32 / 30,
        ShellEjectAt = 0.4,
        SoundTable = {
            {s = rottle, t = 0, v = 50},
            {s = path .. "slide_pull_new.ogg",  t = 0.3, c = ci, v = 50},
            {s = path .. "sliderel_deact.ogg",  t = 0.3, c = ci, v = 50},
        },
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.1,
        LHIKOut = 0.2,
    },

    -- 17 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 56 / 30,
        MinProgress = 1.1,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch_pull_small.ogg", t = 0.075},
            {s = ratel, t = 0.3},
            {s = path .. "magout_partial.ogg",        t = 0.35, c = ci},
            {s = ratel, t = 0.4},
            {s = path .. "magin_new.ogg",         t = 0.45, c = ci},
            {s = rottle, t = 0.6},
            {s = common .. "magpouch_replace_small.ogg", t = 1.25},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 65 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "magout_empty.ogg",        t = 0.13, c = ci},
            {s = common .. "magpouch_pull_small.ogg", t = 0.35},
            {s = path .. "magin_new.ogg",         t = 0.5, v = 1.5},
            {s = ratel, t = 0.5},
            {s = common .. "pistol_magdrop.ogg",  t = 0.65},
            {s = rottle, t = 1.15},
            {s = path .. "chamber.ogg",      t = 1.39},
        },
    },
    ["reload_empty_fesiug"] = {
        Source = "reload_empty_fesiug",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 78 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "magout_empty.ogg",        t = 0.13, c = ci},
            {s = common .. "magpouch_pull_small.ogg", t = 0.35},
            {s = path .. "magin_new.ogg",         t = 0.55, c = ci},
            {s = ratel, t = 0.5},
            {s = common .. "pistol_magdrop.ogg",  t = 0.65},
            {s = ratel, t = 1.2},
            {s = path .. "sliderel_deact.ogg",  t = 1.62, c = ci},
            {s = path .. "chamber.ogg",        t = 1.85, v = 1.5},
            {s = rottle, t = 1.9},
        },
    },

    -- 10 Round Reloads --

    ["reload_10"] = {
        Source = "reload_10",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 56 / 30,
        MinProgress = 1.1,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "magpouch_pull_small.ogg", t = 0.025, c = ci},
            {s = ratel, t = 0.3},
            {s = path .. "magout_partial.ogg",        t = 0.2, c = ci},
            {s = path .. "magin_new.ogg",         t = 0.33, v = 1.5},
            {s = common .. "magpouch_replace_small.ogg", t = 1.2},
            {s = rottle, t = 0.65},
        },
    },
    ["reload_empty_10"] = {
        Source = "reload_empty_10",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 65 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "magrelease.ogg",    t = 0.15, c = ci},
            {s = path .. "magout_empty.ogg",        t = 0.1, c = ci},
            {s = common .. "magpouch_pull_small.ogg", t = 0.3, c = ci},
            {s = path .. "magin_new.ogg",         t = 0.45, c = ci},
            {s = ratel, t = 0.5},
            {s = common .. "pistol_magdrop.ogg",  t = 0.65},
            {s = rottle, t = 0.9},
            {s = path .. "chamber.ogg",      t = 1.35, c = ci},
        },
    },

    -- 33 Round Reloads --

    ["reload_33"] = {
        Source = "reload_33",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 56 / 30,
        MinProgress = 1.1,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = ratel, t = 0.3},
            {s = path .. "magout_partial.ogg",        t = 0.4, c = ci},
            {s = path .. "magin_new.ogg",         t = 0.49},
            {s = rottle, t = 0.75},
            {s = common .. "magpouchin.ogg", t = 1.25, v = .35},
        },
    },
    ["reload_empty_33"] = {
        Source = "reload_empty_33",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 66 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "magrelease.ogg",    t = 0.16, c = ci},
            {s = path .. "magout_empty.ogg",        t = 0.16, c = ci},
            {s = common .. "magpouch.ogg", t = 0.35, c = ci},
            {s = path .. "magin_new.ogg",         t = 0.55, c = ci},
            {s = ratel, t = 0.5},
            {s = common .. "pistol_magdrop.ogg",  t = 0.65},
            {s = rottle, t = 1.3},
            {s = path .. "chamber.ogg",      t = 1.42, c = ci},
        },
    },

    -- 100 Round Reloads --

    ["reload_100"] = {
        Source = "reload_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 56 / 30,
        MinProgress = 1.3,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "magrelease.ogg",    t = 0.3, c = ci},
            {s = path .. "magout.ogg",        t = 0.3, c = ci},
            {s = ratel, t = 0.7},
            {s = path .. "magin.ogg",         t = 1.0, c = ci},
            {s = rottle, t = 1.1},
        },
    },
    ["reload_empty_100"] = {
        Source = "reload_empty_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        Time = 66 / 30,
        MinProgress = 1.75,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.3,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "magrelease.ogg",      t = 0.12, c = ci},
            {s = path .. "magout.ogg",        t = 0.12, c = ci},
            {s = path .. "magin.ogg",           t = 0.5, c = ci},
            {s = common .. "magdrop.ogg",  t = 0.55},
            {s = ratel, t = 0.7},
            {s = path .. "sliderel_deact.ogg",  t = 1.33, c = ci},
            {s = path .. "chamber.ogg",        t = 1.525, c = ci},
            {s = rottle, t = 1.6},
        },
    },
}

SWEP.AutosolveSourceSeq = "idle"

SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[9].Installed and (anim == "fire" or anim == "fire_empty") then
        return anim .. "_stock"
    end
end

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp"},
        Bone = "glock_slide",
        Offset = {
            vpos = Vector(-0.025, -0.4, -0.2),
            vang = Angle(90, 0, -90),
        },
        CorrectivePos = Vector(0, 0, 0.02),
        VMScale = Vector(.9, .9, .9),
        WMScale = VMScale,
        --WMScale = Vector(1.25, 1.25, 1.25),
        --InstalledEles = {"ud_glock_rail_optic"},
    },
    {
        PrintName = "Slide",
        DefaultAttName = "Standard Slide",
        DefaultAttIcon = Material("entities/att/acwatt_ud_glock_slide.png", "smooth mips"),
        Slot = "ud_glock_slide",
        Bone = "glock_flash",
        Offset = {
            vpos = Vector(2.4, -0.2, -29.2), -- Op. CS slide
            vang = Angle(90, 3, -90),
        },
    },
    {
        PrintName = "Frame",
        DefaultAttName = "Standard Frame",
        DefaultAttIcon = Material("entities/att/acwatt_ud_glock_frame.png", "smooth mips"),
        Slot = "ud_glock_frame",
    },
    {
        PrintName = "Caliber",
        DefaultAttName = "9x19mm Parabellum",
        DefaultAttIcon = Material("entities/att/uc_bullets/9x19.png", "smooth mips"),
        Slot = "ud_glock_caliber",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle", "ud_glock_muzzle"},
        Bone = "glock_flash",
        Offset = {
            vpos = Vector(0, 0, 0.0),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd"},
        VMScale = Vector(0.8, 0.8, 0.8)
    },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol", "uce_pistol_foregrip"},
        Bone = "glock_parent",
        Offset = {
            vpos = Vector(0, -1.3, 5),
            vang = Angle(90, 0, -90),
        },
        MergeSlots = {7},
        ExcludeFlags = {"ud_glock_slide_subcompact"}
    },
    {
        Hidden = true,
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "glock_parent",
        Offset = {
            vpos = Vector(0, -1.3, 5),
            vang = Angle(90, 0, -90),
        }, -- This slot is obsolete and exists solely for compatiblity with old loadouts. Do not remove.
    },
    {
        PrintName = "Magazine",
        Slot = {"ud_glock_mag"},
        DefaultAttIcon = Material("entities/att/acwatt_ud_glock_mag_17.png", "smooth mips"),
        DefaultAttName = "17-Round Mag",
    },
    {
        PrintName = "Stock",
        Slot = {"uc_stock", "go_stock_pistol_bt"},
        DefaultAttName = "No Stock",
        Bone = "glock_parent",
        Offset = {
            vpos = Vector(0.1, 2, -1.4),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"ud_glock_frame_subcompact"}
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "glock_slide",
        Offset = {
            vpos = Vector(0.45, 0.1, 4),
            vang = Angle(90, 0, -90),
        },
        VMScale = Vector(0.8, 0.8, 0.8),
    },
    {
        PrintName = "Material",
        DefaultAttName = "Black Polymer",
        DefaultAttIcon = Material("entities/att/acwatt_ud_glock_material.png", "smooth mips"),
        Slot = "ud_glock_skin",
        FreeSlot = true,
    },
}
--lua/weapons/arccw_ud_glock.lua:
return gluapack()()
--lua/weapons/arccw_ud_m4a1300.lua:
return gluapack()()
--lua/weapons/arccw_ud_microuzi.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_uzi.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets SMGs"
end

SWEP.PrintName = "IAL-M9"
SWEP.TrueName = "Micro Uzi"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ud_uzi_body_micro"
SWEP.Attachments[8].Installed = "ud_uzi_mag_20"

SWEP.Hook_NameChange = function(wep)
    if !wep.Attachments[2].Installed then
        return GetConVar("arccw_truenames"):GetBool() and "Uzi" or "IAL-9"
    end
end
--lua/weapons/arccw_ud_r0635.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_m16.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets SMGs"
end

SWEP.PrintName = "AMPAW2-NG"
SWEP.TrueName = "R0991"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[1].Installed = "ud_m16_rs"
SWEP.Attachments[2].Installed = "ud_m16_barrel_10in"
SWEP.Attachments[3].Installed = "ud_m16_hg_tactical"
SWEP.Attachments[5].Installed = "ud_m16_receiver_9mm"
SWEP.Attachments[6].Installed = "ud_m16_receiver_auto"
SWEP.Attachments[10].Installed = "ud_m16_stock_sopmod"
SWEP.Attachments[11].Installed = "ud_m16_mag_9mm_32"

SWEP.NPCWeaponType = "weapon_smg1"
SWEP.Attachments[10].ToggleNum = 2
SWEP.Attachments[10].ToggleLock = true
--lua/weapons/arccw_ud_r870sawn.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_870.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Shotguns"
end

SWEP.PrintName = "Express-12 Sawn Off"
SWEP.TrueName = "R870 Sawn Off"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ud_870_barrel_sawnoff"
SWEP.Attachments[7].Installed = "ud_870_stock_sawnoff"
SWEP.Attachments[8].Installed = "ud_870_tube_reduced"
SWEP.Attachments[13].Installed = "ud_870_skin_dirty"

SWEP.Hook_NameChange = function()
    return (GetConVar("arccw_truenames"):GetBool() and "Remington 870") or "Express-12"
end
--lua/weapons/arccw_ud_m16.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "1Urban Decay"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_1"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellScale = .666
SWEP.ShellPitch = 100

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3
SWEP.TracerNum = 1
SWEP.TracerCol = Color(25, 255, 25)
SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "RAYCAR-0"
-- AMCAR stands for (american) Colt Assault Rifle, not Carbine!! ~Fesiug
-- shut up retard ~zenith

-- True name --

SWEP.TrueName = "M16A2"

-- Trivia --
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "Third generation of America's iconic military rifle. Army tests showed that soldiers were more likely to hit a target if they fired multiple shots, but were likely to spray in full-auto and fail to hit anything. As a result, they implemented a ratcheted three-round burst system which limited the maximum burst a soldier could fire to three shots.\n\nWell-rounded gun with no major downsides."
SWEP.Trivia_Manufacturer = "Rayter Arms Industries"
SWEP.Trivia_Calibre = "5.56x45mm NATO"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1959


if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Stoner's Legacy Ltd."
end

local origDesc = SWEP.Trivia_Desc
local m4Desc = "Carbine variant of the M16 rifle. Originally designed in response to design faults in the CAR-15 family, it eventually replaced the M16 across much of the Army for its favorably low weight and comparable performance. The M4 variant has since become one of the most iconic and widespread American service rifles in the modern era.\n\nLight and versatile, but requires discipline to control."
local ncrDesc = "Standard-issue rifle of the New California Republic. Traditionally produced with a semi-automatic receiver, the wooden furniture is more readily replaceable and adds additional recoil control for maximum accuracy.\n\nWell-rounded gun with no major downsides."
local smgDesc = "Submachine gun based on the M16 rifle. Despite its similar appearance, it uses a different mechanism from its parent rifle. More accurate than other submachine guns due to its rifle frame and closed-bolt mechanism."
local blkDesc = "Aftermarket automatic variant of the M16 rifle. The .300 Blackout cartridge has a ballistic performance more akin to the 7.62x39mm Soviet cartridge, with a similarly sized projectile but shorter effective range."
local ukDesc = "AR-15 style rifles are a class of rifles linked to the M16, normally with a semi-automatic fire group for the civilian market. This one, however, has been neutered by authority of the British crown with a manual-action receiver. Bit cringe, innit?"
local arDesc = "Semi-automatic variant of the M16 series of rifles, produced for the civilian market. Wildly popular in the United States, this rifle can be seen in the hands of hobbyists, hunters and mass shooters alike.\n\nWell-rounded gun with no major downsides."
local beoDesc = "Aftermarket semi-automatic variant of the M16 rifle firing an oversized magnum cartridge. Provides extremely high stopping power at close range."
local carDesc = "Carbine variant of the M16 rifle, short enough to be classified as a submachine gun. Its features influenced the US Army's interest in the M4 Carbine, which went on to become their new standard rifle. Due to the small barrel, rifles of this family have high maneuverability but poor range compared to their parent platform."
local a1Desc = "Second generation of America's iconic military rifle. Developed to address problems with the original M16, which suffered notoriously frequent jamming that could get its wielder killed. The revised model evolved a positive reputation with those who used it, and is now a universal symbol of the Vietnam War.\n\nA well-rounded rifle, but difficult to control without trigger discipline - something the A2 model eventually addressed."
local a3Desc = "Variant of the M16A2 with the original full-automatic trigger group, relegated to niche roles in the US Army. Well-rounded gun with no major downsides."
local lmgDesc = "Configuration of the M16 designed for a light machine gun role, used vaguely within the Marine Corps before the adoption of the Minimi. Heavier than the standard platform, but the integral bipod can be deployed onto surfaces for excellent recoil control."
local patriotDesc = "An assault pistol developed for The Boss. The feeder mechanism inside the drum magazine forms an \"∞\" shape.\n\nThe bottomless magazine more than makes up for the awkwardness of the configuration."

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Colt's Manufacturing Company"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ud_m16.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ud_m16.mdl"
SWEP.ViewModelFOV = 80
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["556"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["556"].min
SWEP.RangeMin = 50
SWEP.Range = 350 -- 4 shot until ~250m

SWEP.Penetration = ArcCW.UC.StdDmg["556"].pen
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 960
SWEP.PhysBulletMuzzleVelocity = 960

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 20

-- Recoil --

SWEP.Recoil = 0.5
SWEP.RecoilSide = 0.25

SWEP.RecoilRise = 0.1
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 900
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = -3,
        PostBurstDelay = 0.1,
        RunawayBurst = false, -- https://en.wikipedia.org/wiki/Burst_mode_(weapons)
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120
SWEP.ShootPitchVariation = 0

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 4
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 200
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "smg1"
SWEP.MagID = "m16"

SWEP.HeatCapacity = 150
SWEP.HeatDissipation = 10
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 200
SWEP.MalfunctionTakeRound = false

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.9

-- Length --

SWEP.BarrelLength = 48
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, -1, 1.2)
SWEP.HolsterAng = Angle(-8.5, 8, -10)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-2.815, 0, 1.3),
     Ang = Angle(0, 0, 0),
     Magnification = 1.1,
     SwitchToSound = "",
}

SWEP.ActivePos = Vector(0.33, -2, 1.33)
SWEP.ActiveAng = Angle(0, 0, -3)

-- SWEP.CustomizePos = Vector(5, -2, -2)
-- SWEP.CustomizeAng = Angle(15, 25, 0)
SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2.5, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.BarrelOffsetHip = Vector(2, 0, -5)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-8.5, 4, -5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    --scale = .85
}

-- Firing sounds --

local path = ")weapons/arccw_ud/m16/"
local common = ")/arccw_uc/common/"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}

SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/556x45/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-556x45-rif-ext-01.ogg",
    tail .. "fire-dist-556x45-rif-ext-02.ogg",
    tail .. "fire-dist-556x45-rif-ext-03.ogg",
    tail .. "fire-dist-556x45-rif-ext-04.ogg",
    tail .. "fire-dist-556x45-rif-ext-05.ogg",
    tail .. "fire-dist-556x45-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    [2] = "m16_bullets1",    [3] = "m16_bullets2"
}

SWEP.DefaultBodygroups = "00000000000000000000000"

SWEP.AttachmentElements = {

    ["ud_m16_mag_20"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["ud_m16_mag_40"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },
    ["ud_m16_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 9}},
    },
    ["ud_m16_mag_60"] = {
        VMBodygroups = {{ind = 2, bg = 3}},
    },
    ["ud_m16_mag_100"] = {
        VMBodygroups = {{ind = 2, bg = 4}},
    },
    ["ud_m16_9mm_mag"] = {
        VMBodygroups = {{ind = 2, bg = 5}},
    },
    ["ud_m16_9mm_mag_32"] = {
        VMBodygroups = {{ind = 2, bg = 6}},
    },
    ["ud_m16_mag_50beo"] = {
        VMBodygroups = {{ind = 2, bg = 8}},
    },
    ["ud_m16_mag_50beo_12"] = {
        VMBodygroups = {{ind = 2, bg = 0}},
    },

    ["upper_flat"] = {
        -- handled by code
        --[[]
        VMBodygroups = {
            {ind = 1, bg = 1},
            {ind = 3, bg = 3}
        },
        ]]
    },
    ["upper_classic"] = {
        VMBodygroups = {
            {ind = 1, bg = 3},
        },
    },
    ["rail_fg"] = {
        VMBodygroups = {{ind = 9, bg = 1}}
    },

    ["stock_231_ex"] = {
        VMBodygroups = {{ind = 7, bg = 1}},
    },
    ["stock_231_in"] = {
        VMBodygroups = {{ind = 7, bg = 2}},
    },
    ["stock_231_tube"] = {
        VMBodygroups = {{ind = 7, bg = 3}},
    },
    ["stock_607_ex"] = {
        VMBodygroups = {{ind = 7, bg = 4}},
    },
    ["stock_607_in"] = {
        VMBodygroups = {{ind = 7, bg = 5}},
    },
    ["stock_608"] = {
        VMBodygroups = {{ind = 7, bg = 6}},
    },
    ["stock_carbine_ex"] = {
        VMBodygroups = {{ind = 7, bg = 7}},
    },
    ["stock_carbine_in"] = {
        VMBodygroups = {{ind = 7, bg = 8}},
    },
    ["stock_wood"] = {
        VMBodygroups = {{ind = 7, bg = 9}},
    },
    ["stock_adar"] = {
        VMBodygroups = {
            {ind = 7, bg = 10},
            {ind = 8, bg = 4}
        },
    },
    ["stock_ru556"] = {
        VMBodygroups = {{ind = 7, bg = 11}},
    },
    ["grip_ergo"] = {
        VMBodygroups = {{ind = 8, bg = 1}},
    },
    ["grip_skel"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["grip_wood"] = {
        VMBodygroups = {{ind = 8, bg = 3}},
    },

    ["gasblock_carbine"] = {
        VMBodygroups = {{ind = 6, bg = 3}},
    },
    ["fs_adar"] = {
        VMBodygroups = {{ind = 6, bg = 4}},
    },
    ["remove_lug"] = {
        VMBodygroups = {{ind = 12, bg = 1}},
    },

    ["mount_14"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0, 0.3, 17.5),
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["mount_11"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.6, -0.3, 14.2),
                vang = Angle(90, 0, 0),
            },
        },
    },
    ["mount_tactical"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(-1, -.35, 11.5),
                vang = Angle(-90, 180, 0),
                wang = Angle(90, 0, 0),
            },
        },
        ExcludeFlags = {}
    },
    -- ["mount_tactical_short"] = {
    --     AttPosMods = {
    --         [8] = {
    --             vpos = Vector(-1, -.35, 11.5),
    --             vang = Angle(-90, 180, 0),
    --             wang = Angle(90, 0, 0),
    --         },
    --     },
    --     AttPosMods_Priority = 2,
    --     RequireFlags = {"barrel_short"}
    -- },

    ["barrel_14"] = {
        VMBodygroups = {
            {ind = 4, bg = 1},
            {ind = 6, bg = 2},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.33, 18.85),
                vang = Angle(90, 0, -90),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_11"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 2},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.33, 15.7),
                vang = Angle(90, 0, -90),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_fpw"] = {
        VMBodygroups = {
            {ind = 4, bg = 2},
            {ind = 6, bg = 5},
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -0.07, 21.3),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["barrel_11_ru556"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 5},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.07, 21.3),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(1.15, 0, 17.9),
                vang = Angle(90, 0, 0),
            },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },

    ["hg_m16a4_ris"] = {
        VMBodygroups = {
            {ind = 5, bg = 2},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(-0.1, 1.05, 12),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(1.41, -.1, 20),
                vang = Angle(90, 0, 0),
            },
            [16] = {
                vpos = Vector(0, -1.75, 21.75), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["hg_m4a1_ris"] = {
        VMBodygroups = {
            {ind = 5, bg = 5},
        },
        AttPosMods = {
            [5] = {
                vpos = Vector(0, 1.4, 12),
                vang = Angle(90, 0, -90),
            },
            [6] = {
                vpos = Vector(-1.41, -.2, 14),
                vang = Angle(90, 0, 180),
            },
            [15] = {
                vpos = Vector(0, -1.75, 15.75), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["hg_ru556"] = {
        -- VMBodygroups = {
        --     {ind = 5, bg = 7},
        -- },
        AttPosMods = {
            -- [5] = {
            --     vpos = Vector(-0.1, 1.05, 12),
            --     vang = Angle(90, 0, -90),
            -- },
            -- [6] = {
            --     vpos = Vector(1.1, 0, 14),
            --     vang = Angle(90, 0, 0),
            -- },
            [16] = {
                vpos = Vector(0, -1.65, 12.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        },
    },
    ["hg_m4a1"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        }
    },
    ["hg_cqbr"] = {
        VMBodygroups = {
            {ind = 5, bg = 4},
        },
    },
    ["hg_adar"] = {
        VMBodygroups = {
            {ind = 5, bg = 8},
        },
    },
    ["hg_fpw"] = {
        VMBodygroups = {
            {ind = 5, bg = 6},
            --{ind = 6, bg = 4},
        }
    },
    ["hg_m16a1"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        }
    },
    ["hg_m16a1_wood"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
        },
        VMSkin = 1
    },
    ["ud_m16_hg_heat"] = {
        VMElements = {
            {
                Model = "models/weapons/arccw/atts/m203iron.mdl",
                Bone = "m16_parent",
                Scale = Vector(1, 1, 1),
                Offset = {
                    pos = Vector(0, -1.2, 14.9),
                    ang = Angle(90, 0, -90),
                }
            }
        },
        UC_UseClassicM203Mount = true,
    },
    ["hg_m605"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
            {ind = 4, bg = 1},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.05, 25.58),
                vang = Angle(90, 0, -90),
            },
            [6] = { -- also has no rail
                vpos = Vector(0, 0.9, 22.2),
                vang = Angle(90, 0, -90),
            },
        }
    },
    ["hg_m605_wood"] = {
        VMBodygroups = {
            {ind = 5, bg = 1},
            {ind = 4, bg = 1},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, 0, 25),
                vang = Angle(90, 0, -90),
            },
            [6] = { -- also has no rail
                vpos = Vector(0, 0.8, 22),
                vang = Angle(90, 0, -90),
            },
        },
        VMSkin = 1
    },
    ["hg_lmg"] = {
        VMBodygroups = {
            {ind = 5, bg = 3},
        }
    },
    ["hg_sd"] = {
        VMBodygroups = {
            {ind = 5, bg = 9},
            {ind = 4, bg = 3},
            {ind = 6, bg = 5}
        },
        AttPosMods = { -- no rail, just pretend it's mounted to something
            -- [8] = {
            --     vpos = Vector(0, 0.7, 17.5),
            --     vang = Angle(90, 0, -90),
            -- },
            [16] = {
                vpos = Vector(0, -1.65, 11.5), -- 21.75 or 15.75
                vang = Angle(90, 0, -90),
            },
        }
    },

    ["ud_m16_upper_charm"] = {
        AttPosMods = {
            [1] = {
                vpos = Vector(0, -4, 3),
                vang = Angle(90, 0, -90),
                SlideAmount = {
                    vmin = Vector(0, -3.4, 3 - 1.5),
                    vmax = Vector(0, -3.4, 3 + 1.5),
                }
            },
        },
    },
    ["ud_m16_upper_charm2"] = {
        AttPosMods = {
            [1] = {
                vpos = Vector(0, -4.1, 3.5),
                vang = Angle(90, 0, -90),
                SlideAmount = {
                    vmin = Vector(0, -3.5, 3.5 - 2),
                    vmax = Vector(0, -3.5, 3.5 + 1),
                }
            },
        },
    },
    ["bravo_dicks_going_fart"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.25, -1.4, 12),
                vang = Angle(90, 0, 90),
            },
        },
    },

    ---- Cut content
    ["hg_stub"] = {
        VMBodygroups = {
            {ind = 5, bg = 7},
        },
        AttPosMods = {
            [3] = {
                vpos = Vector(0, -0.35, 7),
                vang = Angle(90, 0, -90)
            },
            [6] = {
                vpos = Vector(1.1, -0.4, 9),
                vang = Angle(90, 0, 0),
            },
        }
    },
    ["barrel_stub"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 6, bg = 4},
        }
    },
    ["hg_smg"] = {
        VMBodygroups = {
            {ind = 5, bg = 0},
        }
    },
    ["m16_strap"] = {
        VMBodygroups = {
             {ind = 13, bg = 1},
        },
    },
}

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

local sr_pmag = {
	[path .. "magout_empty.ogg"] = path .. "pmagout.ogg",
	[path .. "magin.ogg"] = path .. "pmagin.ogg",
}

local pmag1, pmag2 = {}, {"ud_m16_pmag"}
SWEP.Hook_TranslateSound = function(wep, data)
	if wep:CheckFlags(pmag1, pmag2) and sr_pmag[data] then return sr_pmag[data] end
end

local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}

SWEP.Animations = {
    ["ready"] = {
        Source = "fix",
        Time = 45 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "rattle.ogg", t = 0.2},
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chamber.ogg",  t = 0.5},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = ratel, t = 0.2},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = 20 / 30,
        SoundTable = {
            {s = common .. "raise.ogg", t = 0},
            {s = common .. "shoulder.ogg", t = 0.15},
            {s = ratel, t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = 20 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "cloth_6.ogg", t = 0.2},
        },
    },
    ["trigger"] = {
        Source = "idle",
        MinProgress = .1,
        SoundTable = {
            {s = ")weapons/arccw_ud/uzi/prefire.ogg",         t = 0, c = ci},
        },
    },
    ["fire"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 13 / 30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path .. "mech_last.ogg", t = 0}, -- Temporary
        },
    },

    ["fire_cycle"] = {
        Source = "fire",
        Time = 13 / 30,
    },

    ["cycle"] = {
        Source = "fix",
        Time = 36 / 30 * 0.7,
        ShellEjectAt = 0.3,
        LHIK = true,
        LHIKIn = 0.3 * 0.7,
        LHIKEaseIn = 0.4 * 0.7,
        LHIKEaseOut = 0.15 * 0.7,
        LHIKOut = 0.4 * 0.7,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.05},
            {s = common .. "cloth_4.ogg",  t = 0.2},
            {s = path .. "chamber.ogg",  t = 0.3},
        },
    },

    ["fix"] = {
        Source = "fix",
        Time = 45 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "chamber.ogg",  t = 0.5},
        },
    },
    ["fix_empty"] = {
        Source = "fix_empty",
        Time = 45 / 30,
        ShellEjectAt = false,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        SoundTable = {
            {s = path .. "chback.ogg",   t = 0.15},
            {s = common .. "cloth_4.ogg",  t = 0.5},
            {s = path .. "ch_forward_empty.ogg",  t = 0.5},
        },
    },

    -- 30 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2, v = 0.5},
            {s = ratel, t = 0.25},
            {s = path .. "magout_empty.ogg", 	 t = 0.23},
            {s = ratel, t = 0.5},
            {s = path .. "struggle.ogg",    t = 1, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = common .. "grab-polymer.ogg", t = 1.77, v = 0.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.7},
            {s = common .. "shoulder.ogg", t = 1.8},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 87 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 0.25},
            {s = common .. "magpouch_gear.ogg", t = 0.1, v = 0.5},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = ratel, t = 0.5},
            {s = common .. "rifle_magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.39},
            {s = path .. "boltdrop.ogg", t = 1.7},
            {s = ratel, t = 1.9},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.0},
            {s = common .. "grab-polymer.ogg", t = 2.1, v = 0.35},
            {s = common .. "shoulder.ogg", t = 2.1},
        },
    },

    -- 20 Round Reloads --

    ["reload_20"] = {
        Source = "reload_20",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = ratel, t = 0.05},
            {s = path .. "magout_empty.ogg", 	 t = 0.09},
            {s = common .. "magpouch_gear.ogg", t = 0.1},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 0.85},
            {s = path .. "struggle.ogg",    t = 0.9, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = rottle,  t = 1.1},
            {s = ratel, t = 1.125},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.65},
            {s = common .. "grab-polymer.ogg", t = 1.7, v = 0.25},
            {s = common .. "shoulder.ogg", t = 1.75},
        },
    },
    ["reload_empty_20"] = {
        Source = "reload_empty_20",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 86 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.8,
        SoundTable = {
            {s = common .. "magpouch_gear.ogg", t = 0},
            {s = rottle, t = 0.01},
            {s = ratel, t = 0.05},
            {s = path .. "magout_empty.ogg", 	 t = 0.075},
            {s = rottle, t = 0.75},
            {s = ratel, t = 0.9},
            {s = common .. "rifle_magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.8, v = 0.4},
            {s = path .. "magin.ogg",    t = 0.85},
            {s = rottle, t = 1.4},
            {s = ratel, t = 1.4},
            {s = path .. "chamber_press.ogg", t = 1.72},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.95},
            {s = common .. "grab-polymer.ogg", t = 2.075, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.13},
        },
    },

    -- 40 Round Reloads --

    ["reload_40"] = {
        Source = "reload_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = ratel, t = 0.1},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = common .. "magpouch_gear.ogg", t = 0.25},
            {s = rottle, t = 0.75},
            {s = ratel, t = 0.8},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.0},
            {s = rottle, t = 1.1},
            {s = ratel, t = 1.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.65},
            {s = common .. "shoulder.ogg", t = 1.75},
        },
    },
    ["reload_empty_40"] = {
        Source = "reload_empty_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 85 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.8,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = common .. "magpouch_gear.ogg", t = 0.25},
            {s = rottle,  t = 0.75},
            {s = common .. "rifle_magdrop.ogg",  t = 0.8},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = rottle,  t = 1.475},
            {s = ratel,  t = 1.475},
            {s = path .. "boltdrop.ogg", t = 1.78},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.1},
            {s = common .. "shoulder.ogg", t = 2.2},
        },
    },

    -- 60 Round Reloads --

    ["reload_60"] = {
        Source = "reload_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.7,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2},
            {s = path .. "magout_empty.ogg", 	 t = 0.25},
            {s = rottle, t = 0.75},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.1},
            {s = rottle, t = 1.1},
            {s = common .. "grab-polymer.ogg", t = 1.78, v = 0.25},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.8},
            {s = common .. "shoulder.ogg", t = 1.9},
        },
    },
    ["reload_empty_60"] = {
        Source = "reload_empty_60",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 85 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.8,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch_gear.ogg", t = 0.2},
            {s = path .. "magout_empty.ogg", 	 t = 0.25},
            {s = rottle, t = 0.75},
            {s = common .. "rifle_magdrop.ogg",  t = 0.8},
            {s = path .. "struggle.ogg",    t = 1.0, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.1},
            {s = rottle, t = 1.475},
            {s = ratel, t = 1.475},
            {s = path .. "boltdrop.ogg", t = 1.8},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.1},
            {s = common .. "grab-polymer.ogg", t = 2.15, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.2},
        },
    },

    -- 100 Round Reloads --

    ["reload_100"] = {
        Source = "reload_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 71 / 30,
        MinProgress = 1.75,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = rottle, t = 0.75},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = rottle, t = 1.1},
            {s = path .. "magtap.ogg",   t = 1.59},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = common .. "rattle_b2i_rifle.ogg", t = 1.8},
            {s = common .. "grab-polymer.ogg", t = 1.85, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.0},
        },
    },
    ["reload_empty_100"] = {
        Source = "reload_empty_100",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 90 / 30,
        MinProgress = 2.5,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = path .. "magout_empty.ogg", 	 t = 0.2},
            {s = rottle, t = 0.75},
            {s = common .. "magdrop.ogg",  t = 0.65},
            {s = path .. "struggle.ogg",    t = 0.95, v = 0.4},
            {s = path .. "magin.ogg",    t = 1.05},
            {s = path .. "magtap.ogg",   t = 1.59},
            {s = rottle, t = 1.75},
            {s = path .. "chback.ogg",   t = 2.0},
            {s = common .. "cloth_4.ogg",  t = 2.05},
            {s = path .. "chamber.ogg",  t = 2.22},
            {s = common .. "rattle_b2i_rifle.ogg", t = 2.5},
            {s = common .. "grab-polymer.ogg", t = 2.55, v = 0.25},
            {s = common .. "shoulder.ogg", t = 2.6},
        },
    },

    -- 9mm 32 Round Reloads --

    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 70 / 30,
        MinProgress = 1.5,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.5,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.15},
            {s = "weapons/arccw_ud/uzi/" .. "magout.ogg", 	 t = 16 / 30},
            {s = rottle, t = 0.75},
            {s = "weapons/arccw_ud/uzi/" .. "magin.ogg",    t = 27 / 30},
            {s = rottle, t = 1.1},
            {s = common .. "magpouchin.ogg", t = 1.55},
            {s = common .. "shoulder.ogg", t = 1.93},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_empty_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        Time = 80 / 30,
        MinProgress = 2,
        LastClip1OutTime = 0.7,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle, t = 0.0},
            {s = "weapons/arccw_ud/uzi/" .. "magout.ogg", 	 t = 0.1},
            {s = common .. "magpouch.ogg", t = 0.45},
            {s = rottle, t = 0.75},
            {s = "weapons/arccw_ud/uzi/" .. "magin.ogg",    t = 0.8},
            {s = path .. "chamber_press.ogg", t = 1.7},
            {s = rottle, t = 1.39},
            {s = common .. "shoulder.ogg", t = 2.15},
        },
    },


    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_inspect_empty"] = {
        Source = "inspect_enter_empty",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "inspect_loop_empty",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999,
    },
    ["exit_inspect_empty"] = {
        Source = "inspect_exit_empty",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999,
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
}

local hgLookup = {
    ["default"]     = {0,4,0},
    ["tactical"]    = {2,5,0},
    ["a1"]          = {1,1,1},
    ["heat"]          = {10,10,1},
    ["heatm203"]          = {11,11,1},
    ["wood"]          = {1,1,1},
    ["lmg"]          = {3,3,1},
    ["fpw"]          = {6,6,2},
    ["ru556"]          = {7,7,3},
    ["adar"]          = {8,8,2},
    ["hk416"]          = {9,9,3},
    ["607"]          = {9,9,0},
}
-- Structure: 20in appearance, 14/11in appearance, gas block mode
-- Gas block modes: 0 standard, 1 always at 20" position, 2 at ADAR position when short, 3 at ADAR position when short and not flat

local barrLookup = {
    ["sd"] = -1,
    ["20in"] = 0,
    ["14in"] = 1,
    ["fpw"] = 1,
    ["10in"] = 2,
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    local atts = wep.Attachments
    if !IsValid(vm) then return end

    local barrel = string.Replace(atts[2].Installed or "20in","ud_m16_barrel_","")
    local barr = barrLookup[barrel]
    local hg = string.Replace(atts[3].Installed or "default","ud_m16_hg_","")
    hg = string.Replace(hg,"uf_m16_hg_","")

    local optic = atts[1].Installed
    local muzz = atts[4].Installed or barrel == "sd"
    local laser = atts[8].Installed
    local fs = atts[16].Installed
    local retro = wep:GetBuff_Override("TopMount")

    -- Retro rail
    if optic then
        if retro then
            -- Raised rail (retro)
            vm:SetBodygroup(3, retro)
        else
            -- Flat rail
            vm:SetBodygroup(1, 1)
            vm:SetBodygroup(3, 2)
        end
    end

    -- Dynamic handguard
    if barr == -1 then
        vm:SetBodygroup(5,9)
    elseif barr == 0 and hgLookup[hg] then
        vm:SetBodygroup(5,hgLookup[hg][1])
    elseif hgLookup[hg] then
        vm:SetBodygroup(5,hgLookup[hg][2])
    else
        vm:SetBodygroup(5,9)
    end

    -- Gas block
    if barrel == "sd" or (atts[6].Installed == "ud_m16_receiver_fpw" and barr > 0) then
        vm:SetBodygroup(6,5)
    else
        local gbPos = hgLookup[hg] and hgLookup[hg][3] or 0
        local lwr = atts[6].Installed
        local flat = (
            wep:GetBuff_Override("FrontSight")
            or atts[6].Installed == "ud_m16_receiver_fpw"
            or (optic and fs ~= "ud_m16_charm_fs" and !(wep:GetBuff_Override("IronSight") or wep:GetBuff_Override("TopMount")))
        ) and 1 or 0

        if gbPos == 1 or barr == 0 then
            vm:SetBodygroup(6, 0 + flat)
        elseif gbPos == 2 then
            vm:SetBodygroup(6, 4 + flat * 2)
        elseif gbPos == 3 then
            vm:SetBodygroup(6, 4 - flat)
        else
            vm:SetBodygroup(6, 2 + flat)
        end
    end

    -- Default flash hider
    if !muzz then
        if barr == 0 then
            vm:SetBodygroup(11,1)
        elseif barr == 1 then
            vm:SetBodygroup(11,2)
        else
            vm:SetBodygroup(11,3)
        end
    else
        vm:SetBodygroup(11,0)
    end

    -- Tactical clamp
    if laser and hg ~= "tactical" then
        if barr == 0 then
            vm:SetBodygroup(10,1)
        elseif barr == 1 then
            vm:SetBodygroup(10,3)
        else
            vm:SetBodygroup(10,2)
        end
    else
        vm:SetBodygroup(10,0)
    end

    -- Disable tac rail element with tac hg
    if hg == "tactical" and (atts[7].Installed or atts[18].Installed) then
        vm:SetBodygroup(9,0)
    end

    -- .50 Beowulf magazines
    if atts[5].Installed == "ud_m16_receiver_50beo" and !atts[11].Installed then
        vm:SetBodygroup(2, 8)
    end
end

-- RAYCAR-0, rifle barrel
local bar0_fake = "First variation of the RAYCAR rifle. Tests showed that users were more likely to hit a target if they fired multiple shots, but were likely to spray in full-auto and fail to hit anything. As a result, a ratcheted three-round burst system was implemented which limited the maximum burst a user could fire to three shots.\n\nWell-rounded gun with no major downsides."

-- RAYCAR-1, carbine barrel
local bar1_fake = "Second variation of the RAYCAR rifle. It eventually replaced the RAYCAR-0 across much of the Army for its favorably low weight and comparable performance. The -1 variant has since become one of the most iconic and widespread American service rifles in the modern era.\n\nLight and versatile, but requires discipline to control."

-- RAYCAR-2, commando barrel
local bar2_fake = "Third variation of the RAYCAR rifle. Developed with assistance from the Navy, the \"commando\" barrel allows for the weapon to be very compact, even short enough to be classified as a submachine gun, enhancing usability in vehicles and in enclosed spaces.\n\nVery lightweight and manuverable, but with very aggressive recoil to match."

-- RAYPAW :3
local smgDesc_fake = "Submachine gun based on the RAYCAR rifle. Despite its similar appearance, it uses a different mechanism from its parent rifle.\n\nMore accurate than other submachine guns due to its rifle frame and closed-bolt mechanism."

-- RBY50
local beoDesc_fake = "Aftermarket semi-automatic variant of the RAYCAR rifle firing an oversized magnum cartridge.\n\nProvides extremely high stopping power at close range."

-- RBY300
local blkDesc_fake = "Aftermarket automatic variant of the RAYCAR rifle. The .300 Blackout cartridge has a ballistic performance more akin to the 7.62x39mm Soviet cartridge, with a similarly sized projectile but shorter effective range.\n\nSlightly more inaccurate, made up with a higher stopping power and a subsonic projectile."

-- UKCAR
local ukDesc_fake = "Normally, RAYCAR style rifles are imported with a semi-automatic fire group for the civilian market. This one, however, has been neutered by authority of the British crown with a manual-action receiver.\n\nBit cringe, innit?"

-- RAYSAW
local lmgDesc_fake = "Configuration of the RAYCAR designed for a light machine gun role, used vaguely within the Marine Corps before the adoption of the Minimi.\n\nHeavier than the standard platform, but the integral bipod can be deployed onto surfaces for excellent recoil control."

-- Fallout barrel or sumn idk
local ncrDesc_fake = "Standard-issue rifle of the New California Republic. Traditionally produced with a semi-automatic receiver, the wooden furniture is more readily replaceable and adds additional recoil control for maximum accuracy.\n\nWell-rounded gun with no major downsides."

-- Patriot easter egg. Is it overpowered? I don't think so, a configuration like this is already pretty uncontrollable and imprecise as is, and overheating is the new magazine.
local a1, a2 = {}, {"patr1", "patr2", "patr3", "patr4", "patr5"}
SWEP.O_Hook_Override_BottomlessClip = function(wep, data)
    if wep:CheckFlags(a1, a2) then
        data.current = true
    end
end


SWEP.Hook_NameChange = function(wep, name)
    local trueNames = GetConVar("arccw_truenames"):GetBool()
    local atts = wep.Attachments
    local flat = atts[1].Installed and !wep:GetBuff_Override("TopMount")

    local barrel = string.Replace(atts[2].Installed or "20in","ud_m16_barrel_","")
    local barr = barrLookup[barrel]
    local hg = string.Replace(atts[3].Installed or "default","ud_m16_hg_","")
    local upr = string.Replace(atts[5].Installed or "default","ud_m16_receiver_","")
    local lwr = string.Replace(atts[6].Installed or "default","ud_m16_receiver_","")

    if wep:CheckFlags(a1, a2) then -- Patriot configuration
        wep.Trivia_Desc = patriotDesc
        return "The Patriot"
    elseif !trueNames then -- Custom lore-based fake names
        local pre = (lwr == "auto" and "AM" or "RAY")
        if upr == "9mm" then
            local sd = (barr == -1)
            wep.Trivia_Desc = smgDesc_fake
            if flat then
                return (sd and pre .. "SSMG-NG") or pre .. "PAW-" .. barr .. "NG"
            end
            return (sd and pre .. "SSMG") or pre .. "PAW-" .. barr
        elseif upr == "50beo" then
            wep.Trivia_Desc = beoDesc_fake
            return "RBY"--50"
        elseif upr == "300blk" then
            wep.Trivia_Desc = blkDesc_fake
            return "RBY"--300"
        elseif lwr == "fpw" then
            wep.Trivia_Desc = bar1_fake
            return pre .. "FPW"
        elseif lwr == "cali" then
            wep.Trivia_Desc = ukDesc_fake
            return "UKCAR"
        else
            if barr == 0 then
                if hg == "lmg" then
                    wep.Trivia_Desc = lmgDesc_fake
                    return pre .. "SAW" .. (flat and "-NG" or "")
                elseif flat then
                    return pre .. "CAR-0NG"
                else
                    wep.Trivia_Desc = bar0_fake
                    return pre .. "CAR-0"
                end
            elseif barr == 1 then
                wep.Trivia_Desc = bar1_fake
                if flat then
                    return pre .. "CAR-1NG"
                end
                return pre .. "CAR-1"
            elseif barr == 2 then
                wep.Trivia_Desc = bar2_fake
                if flat then
                    return pre .. "CAR-2NG"
                end
                return pre .. "CAR-2"
            end
        end

        wep.Trivia_Desc = bar0_fake
        return pre .. "CAR-0"

    else

        if upr == "9mm" then
            local sd = (barr == -1)
            wep.Trivia_Desc = smgDesc
            if lwr == "semi" then
                return "AR-15 9mm"
            elseif flat then
                return "R0991"
            end
            return "R0635"

        end

        if lwr == "auto" then
            if upr == "a1" then
                wep.Trivia_Desc = a1Desc
                if barr == 0 then
                    return "M16A1"
                elseif barr == 1 then
                    return "M605"
                end
                wep.Trivia_Desc = carDesc
                return "CAR-15"
            end
            if barr == 0 then
                wep.Trivia_Desc = a3Desc
                if hg == "lmg" then
                    wep.Trivia_Desc = lmgDesc
                    return "Colt LMG"
                elseif flat and hg == "tactical" then
                    return "R0901"
                end
                return "M16A3"
            elseif barr == 1 then
                wep.Trivia_Desc = m4Desc
                if flat then
                    return "M4A1"
                end
                return "XM4"
            else
                wep.Trivia_Desc = carDesc
                if flat then
                    wep.Trivia_Desc = m4Desc
                    if upr == "300blk" then
                        return "Mk 18"
                    end
                    return "Mk 18 Mod 0"
                end
                return "CAR-15"
            end
        elseif lwr == "semi" or upr == "50beo" then
            wep.Trivia_Desc = arDesc
            if hg == "wood" then
                wep.Trivia_Desc = ncrDesc
                if barr == 0 then
                    return "Service Rifle"
                end
                return "Service Carbine"
            elseif flat and hg == "adar" then
                return "ADAR 2-15"
            elseif barr > 0 then
                if barr == 2 and atts[10].Installed == "ud_m16_stock_buffer" then
                    return "AR-15 Pistol"
                elseif upr == "a1" and barr == 1 then
                    return "CRXM177E2B"
                else
                    return "AR-15 SBR"
                end
            elseif upr == "a1" then
                return "CRM16A1"
            end
            return "AR-15"
        elseif lwr == "fpw" then
            wep.Trivia_Desc = m4Desc
            return "M231 FPW"
        elseif lwr == "cali" then
            wep.Trivia_Desc = ukDesc
            return "AR-15GB"
        else
            wep.Trivia_Desc = origDesc
            if barr == 0 and flat then
                return "M16A4"
            elseif barr == 1 then
                wep.Trivia_Desc = m4Desc
                return "M4 Carbine"
            elseif barr == 2 then
                return "M16 Commando"
            end
        end

        wep.Trivia_Desc = origDesc
        return "M16A2"

    end
end



SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        InstalledEles = {"upper_flat"},
        Slot = {"optic","optic_sniper","ud_m16_rs"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.75, 3),
            vang = Angle(90, 0, -90),
        },
        SlideAmount = {
            vmin = Vector(0, -1.6, 3 - 2),
            vmax = Vector(0, -1.6, 3 + 1),
        },
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "20\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_barrel_20.png", "smooth mips"),
        Slot = "ud_m16_blen",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Ribbed Handguard",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_hg_ribbed.png", "smooth mips"),
        Slot = "ud_m16_hg",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.63, -0.41),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd"}
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle", "ud_m16_muzzle"},
        Bone = "m16_parent",
        VMScale = Vector(1, 1, 1),
        WMScale = VMScale,
        Offset = {
            vpos = Vector(0, -.33, 23.27),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sd", "m16_stub"},
    },
    {
        PrintName = "Upper Receiver",
        DefaultAttName = "5.56x45mm Upper",
        DefaultAttIcon = Material("entities/att/uc_bullets/556x45.png", "smooth mips"),
        Slot = {"ud_m16_receiver"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"ud_m16_fpw"}
    },
    {
        PrintName = "Lower Receiver",
        DefaultAttName = "Burst Lower",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_receiver_default.png", "smooth mips"),
        Slot = {"ud_m16_fcg"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"m16_nolower"}
    },
    {
        PrintName = "Underbarrel",
        Slot = "foregrip",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, 6, 11),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"m16_lmg", "m16_stub"},
        SlideAmount = {
            vmin = Vector(0, .65, 11.5),
            vmax = Vector(0, .65, 7.5),
        },
		MergeSlots = {18},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, 0.3, 21.25),
            vang = Angle(90, 0, -90),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ud_m16_grip"},
        DefaultAttName = "Standard Grip",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_grip_default.png", "smooth mips"),
        ExcludeFlags = {"m16_adar"}
    },
    {
        PrintName = "Stock",
        Slot = {"ud_m16_stock","go_stock"},
        DefaultAttName = "Full Stock",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_stock_default.png", "smooth mips"),
        -- GSO support
        InstalledEles = {"stock_231_tube"},
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(-0.02, 0, -2.7),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Magazine",
        Slot = {"ud_m16_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/acwatt_ud_m16_mag_30.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Front Sight",
        Slot = {"ud_m16_fs", "ud_m16_charm"},
        FreeSlot = true,
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -1.65, 16.75), -- 21.75 or 15.75
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"sight_magpul"}
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"}, -- "ud_m16_charm"
        FreeSlot = true,
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0.48, 0.5, 3.9),
            vang = Angle(90, 0, -90),
        },
        -- MergeSlots = {17}
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "m16_parent",
        Offset = {
            vpos = Vector(0, -0.4, 7.2),
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"m16_lmg", "m16_stub"},
    }
}
--lua/weapons/arccw_ur_ak74.lua:
return gluapack()()
--lua/weapons/arccw_ur_ak.lua:
return gluapack()()
--lua/weapons/arccw_ur_at.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_aw.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets DMRs"
end

SWEP.PrintName = "Apex Tactical"
SWEP.TrueName = "AT"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

--SWEP.Attachments[1].Installed = "uc_optic_acog"
SWEP.Attachments[2].Installed = "ur_aw_barrel_short"
SWEP.Attachments[3].Installed = "ur_aw_muzzle_brake_sights"
SWEP.Attachments[5].Installed = "ur_aw_mag_10"
SWEP.Attachments[8].Installed = "ur_aw_stock_at"
SWEP.Attachments[14].Installed = "ur_aw_skin_black"

SWEP.Hook_NameChange = function(wep,name)
    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_aw_barrel_", "")
    local cal = string.Replace(atts[4].Installed or "default", "ur_aw_cal_", "")
    local stock = string.Replace(atts[8].Installed or "default", "ur_aw_stock_", "")

    if GetConVar("arccw_truenames"):GetBool() then
        if cal ~= "default" then
            return "AWM"
        elseif barr == "sd" then
            return "AWS"
        elseif stock == "at" then
            return "AT"
        else
            return "AWP"
        end
    else
        if cal == "338" then
            return "Apex Magnum"
        elseif barr == "sd" then
            return "Apex Spectre"
        elseif stock == "at" then
            return "Apex Tactical"
        else
            return "Apex Precision"
        end
    end
end
--lua/weapons/arccw_ur_coltofficer.lua:
return gluapack()()
--lua/weapons/arccw_ur_m1911.lua:
return gluapack()()
--lua/weapons/arccw_ur_mp5.lua:
return gluapack()()
--lua/weapons/arccw_ur_mp5.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Effects --

SWEP.MuzzleEffect = "muzzleflash_mp5"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
SWEP.ShellScale = 1
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_9mm"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.PistolShellSoundsTable

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
-- SWEP.CamAttachment = 3 ---------------------------------------------------------------------------
-- SWEP.TracerNum = 1
-- SWEP.TracerCol = Color(25, 255, 25)
-- SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "PK5-4"

-- True name --

SWEP.TrueName = "MP5A4"

-- Trivia --

SWEP.Trivia_Class = "Submachine Gun"
SWEP.Trivia_Desc = [[Versatile submachine gun known for its use by high profile police units around the world, most famously by the British SAS during the Iranian embassy siege. Its reliable closed-bolt design and craftsmanship allowed it to remain relevant among new generations of submachine guns.

If accurate, sophisticated close-combat performance is what you're looking for, no weapon has a better track record.

Switch to burst fire mode to reduce dispersion from moving and hipfiring.]]
SWEP.Trivia_Manufacturer = "Crowdley & Nelson"
SWEP.Trivia_Calibre = "9x19mm Parabellum"
SWEP.Trivia_Mechanism = "Roller-Delayed Blowback"
SWEP.Trivia_Country = "Germany"
SWEP.Trivia_Year = 1966

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Heckler & Koch"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ur_mp5.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_mp5.mdl"
SWEP.ViewModelFOV = 70
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2
SWEP.ProceduralIronFire = true

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["9mm"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["9mm"].min
SWEP.Penetration = ArcCW.UC.StdDmg["9mm"].pen
SWEP.RangeMin = 20
SWEP.Range = 100

SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 400
SWEP.PhysBulletMuzzleVelocity = 400

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 15

-- Recoil --

SWEP.Recoil = 0.22
SWEP.RecoilSide = 0.17

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1.25
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 0.6
SWEP.RecoilPunchBack = 1.5

SWEP.Sway = 0.25

-- Firerate / Firemodes --

SWEP.Delay = 60 / 800
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = -3,
        Mult_MoveDispersion = 0.75,
        Mult_HipDispersion = 0.9,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_smg1"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 3
SWEP.HipDispersion = 500
SWEP.MoveDispersion = 150
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "pistol"
SWEP.MagID = "mp5"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 200

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.3
SWEP.ShootSpeedMult = 0.95

-- Length --

SWEP.BarrelLength = 24
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, -2, 1)
SWEP.HolsterAng = Angle(-8.5, 8, -10)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-3.17, -1, 0.6),
     Ang = Angle(0.45, 0, 0),
     Magnification = 1,
     SwitchToSound = "",
     ViewModelFOV = 60,
}

SWEP.ActivePos = Vector(-0.3, 1.1, 0.6)
SWEP.ActiveAng = Angle(0, 0, -1)

-- SWEP.SprintPos = Vector(-0.5, 3, 1.5)
-- SWEP.SprintAng = Angle(-12, 15, -15)

SWEP.SprintPos = Vector(0, -3, 0)
SWEP.SprintAng = Angle(0, 0, 0)
-- SWEP.CustomizePos = Vector(6, -2, -1.5)
-- SWEP.CustomizeAng = Angle(16, 28, 0)
SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, 0.5, 0)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.BarrelOffsetHip = Vector(4, 0, -4)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-8, 4, -5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1
}

-- Firing sounds --
local path = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

SWEP.DistantShootSoundOutdoors = {
    path .. "fire-dist-01.ogg",
    path .. "fire-dist-02.ogg",
    path .. "fire-dist-03.ogg",
    path .. "fire-dist-04.ogg",
    path .. "fire-dist-05.ogg",
    path .. "fire-dist-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-pistol-01.ogg",
    common .. "fire-dist-int-pistol-02.ogg",
    common .. "fire-dist-int-pistol-03.ogg",
    common .. "fire-dist-int-pistol-04.ogg",
    common .. "fire-dist-int-pistol-05.ogg",
    common .. "fire-dist-int-pistol-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 0.6
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    -- [1] = "uzi_b1", [2] = "uzi_b2", [3] = "uzi_b3", [4] = "uzi_b4"
}

--[[

1 --- 	id: 0
     [	name: iron
    num: 1
    submodels:
    0 --- ironSIGHT.smd
2 --- 	id: 1
     [	name: 1
    num: 4
    submodels:
    0 --- mp5UPPER.smd
    1 --- mp5sdUPPER.smd
    2 --- mp5kUPPER.smd
    3 --- swordUPPER.smd
3 --- 	id: 2
     [	name: 2
    num: 2
    submodels:
    0 --- fourLOWER.smd
    1 --- sefLOWER.smd
4 --- 	id: 3
     [	name: 3
    num: 11
    submodels:
    0 --- fixedSTOCK.smd
    1 --- collapseSTOCK.smd
    2 --- collapseSTOCKcoll.smd
    3 --- pdwSTOCK.smd
    4 --- pdwSTOCKfold.smd
    5 --- tacticSTOCK.smd
    6 --- tacticSTOCKfold.smd
    7 --- futureSTOCK.smd
    8 --- futureSTOCKcoll.smd
    9 --- futureSTOCKfold.smd
    10 --- buttSTOCK.smd
5 --- 	id: 4
     [	name: 4
    num: 10
    submodels:
    0 --- standardHG.smd
    1 --- flashHG.smd
    2 --- flashmlokHG.smd
    3 --- slimHG.smd
    4 --- picaHG.smd
    5 --- mlokHG.smd
    6 --- kurzgripHG.smd
    7 --- kurzslimHG.smd
    8 --- kurzmlokHG.smd
    9 ---
6 --- 	id: 5
     [	name: 5
    num: 4
    submodels:
    0 --- standardMAG.smd
    1 --- smallMAG.smd
    2 --- straightMAG.smd
    3 --- drumMAG.smd
7 --- 	id: 6
     [	name: 6
    num: 2
    submodels:
    0 ---
    1 --- mp5RAIL.smd

]]

SWEP.AttachmentElements = {
    ["ur_mp5_barrel_sd"] = {
        VMBodygroups = {
            {ind = 1, bg = 1},
            {ind = 4, bg = 9},
            //{ind = 8, bg = 1},
        },
        AttPosMods = {
            [6] = {
                vpos = Vector(0, 1.3, 10),
                vang = Angle(90, 0, -90),
            },
            [7] = {
				vpos = Vector(-1.15, 0.3, 8),
				vang = Angle(90, 0, 180),
			},
        },
    },
    ["ur_mp5_barrel_eod"] = {
        VMBodygroups = {
            {ind = 4, bg = 10},
            //{ind = 8, bg = 2},
        },
        AttPosMods = {
            [6] = {
                vpos = Vector(0, 1.5, 10),
                vang = Angle(90, 0, -90),
            },
            [7] = {
				vpos = Vector(-0.95, 0.3, 8),
				vang = Angle(90, 0, 180),
			},
		}
    },
    ["ur_mp5_barrel_kurz"] = {
        VMBodygroups = {
            {ind = 1, bg = 2},
            {ind = 4, bg = 7},
        },
        AttPosMods = {[4] = {
            vpos = Vector(-0.1, 0.3, 11.5),
            vang = Angle(90, 0, -90),
        }}
    },
    ["ur_mp5_barrel_swordfish"] = {
        VMBodygroups = {
            --{ind = 0, bg = 1},
            {ind = 1, bg = 3},
            {ind = 6, bg = 0},
        },
    },

    ["ur_mp5_rail_fg"] = {
        VMBodygroups = {{ind = 4, bg = 4}},
    },
    ["ur_mp5_ub_classic"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
    },
    ["ur_mp5_ub_surefire"] = {
        VMBodygroups = {{ind = 4, bg = 1}},
    },
    ["ur_mp5_ub_surelock"] = {
        VMBodygroups = {{ind = 4, bg = 2}},
    },
    ["ur_mp5_ub_kurzgrip"] = {
        VMBodygroups = {{ind = 4, bg = 6}},
    },
    ["ur_mp5_ub_kurzmlok"] = {
        VMBodygroups = {{ind = 4, bg = 8}},
    },
    ["ur_mp5_ub_wood"] = {
        VMBodygroups = {{ind = 4, bg = 3}}, -- insert wood handguard here
    },

    ["ur_mp5_mag_15"] = {
        VMBodygroups = {{ind = 5, bg = 1}},
    },
    ["ur_mp5_mag_40"] = {
        VMBodygroups = {{ind = 5, bg = 3}},
    },
    ["ur_mp5_mag_50"] = {
        VMBodygroups = {{ind = 5, bg = 3}},
    },
    ["ur_mp5_mag_waffle"] = {
        VMBodygroups = {{ind = 5, bg = 2}},
    },

    ["ur_mp5_rail_optic"] = {
        VMBodygroups = {{ind = 6, bg = 1}},
    },

    ["ur_mp5_clamp"] = {
        VMBodygroups = {{ind = 5, bg = 1}},
    },

    ["receiver_lower"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["receiver_lower_semi"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },
    ["receiver_lower_0"] = {
        VMBodygroups = {{ind = 2, bg = 0}},
    },
    ["receiver_upper_0"] = {
        VMBodygroups = {{ind = 7, bg = 0}},
    },

    ["stock_a3"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
        },
    },
    ["stock_a3_folded"] = {
        VMBodygroups = {
            {ind = 3, bg = 2},
        },
    },
    ["ur_mp5_stock_remove"] = {
        VMBodygroups = {{ind = 3, bg = 10}},
    },
    ["ur_mp5_stock_wood"] = {
        -- VMBodygroups = {{ind = 0, bg = 4}},
        -- Make this part of the VMSkin
    },
    ["stock_pdw"] = {
        VMBodygroups = {{ind = 3, bg = 3}},
    },
    ["stock_pdw_folded"] = {
        VMBodygroups = {{ind = 3, bg = 4}},
    },
    ["stock_ump"] = {
        VMBodygroups = {{ind = 3, bg = 5}},
    },
    ["stock_ump_folded"] = {
        VMBodygroups = {{ind = 3, bg = 6}},
    },
    ["stock_future"] = {
        VMBodygroups = {{ind = 3, bg = 7}},
    },
    ["stock_future_folded"] = {
        VMBodygroups = {{ind = 3, bg = 8}},
    },
    ["ur_mp5_precision_irons"] = {
        VMBodygroups = {
            {ind = 0, bg = 2},
            {ind = 6, bg = 0},
            },
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local atts = wep.Attachments
    local vm = data.vm
    if IsValid(vm) then
        local barr = string.Replace(atts[2].Installed or "default","ur_mp5_barrel_","")
        local hg = string.Replace(atts[5].Installed or "default","ur_mp5_ub_","")
        
        if atts[6].Installed or atts[7].Installed then
            if barr == "sd" then
                vm:SetBodygroup(8, 1)
            elseif barr == "eod" then
                vm:SetBodygroup(8, 2)
            elseif hg == "default" or hg == "classic" then
                vm:SetBodygroup(4, 4)
                vm:SetBodygroup(8, 0)
            else
                vm:SetBodygroup(8, 0)
            end
        else
            vm:SetBodygroup(8, 0)
        end

        if hg == "mlok" then
            if barr == "kurz" then
                vm:SetBodygroup(4,8)
            else
                vm:SetBodygroup(4,5)
            end
        end

        if barr == "sword" then
            vm:SetBodygroup(0,(atts[1].Installed and 3) or 1)
        end
    end
end

SWEP.Hook_NameChange = function(wep,name)
    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default","ur_mp5_barrel_","")
    local cal = string.Replace(atts[3].Installed or "default","ur_mp5_caliber_","")
    local stock = string.Replace(atts[8].Installed or "default","ur_mp5_stock_","")
    local fakeNames = !GetConVar("arccw_truenames"):GetBool()
    local defaultCals = {
        ["default"] = true,
        ["noburst"] = true,
        ["semi"] = true
    }

    local start = "MP5"
    local mid = "A"
    local num = "4"
    if fakeNames then
        start = "PK5"
        mid = "-"
    end

    if cal == "semi" or atts[12].Installed == "uc_fg_civvy" then
        if fakeNames then
            return "PK5-CIV"
        else
            if barr == "long" or barr == "sd" then
                start = "HK94" -- I know how prolific civies can get with their gunbuilds, so the nonsensical names will continue
            else
                return "SP5" .. ((barr == "kurz" and "K-PDW") or "")
            end
        end
    end

    if !defaultCals[cal] then
        if barr == "sd" then
            num = "SD"
        else
            num = ""
        end
        if cal == "10auto" then
            mid = "/10"
        elseif cal == "40sw" then
            mid = "/40"
        elseif cal == "22lr" then
            if barr == "sd" then
                mid = "SD"
                num = " .22 LR"
            else
                mid = " .22 LR"
            end
        end
    else
        if barr == "kurz" then
            if fakeNames then
                mid = "C"
            else
                mid = "K"
            end
            if stock == "pdw" then
                num = "-PDW"
            elseif cal == "default" then
                if fakeNames then
                    num = "-4"
                else
                    num = "A4"
                end
            else
                num = ""
            end
        else
            if barr == "sd" then
                mid = "SD"
            end

            if cal == "noburst" or cal == "semi" then
                if stock == "a3" then
                    num = "3"
                elseif stock == "none" then
                    num = "1"
                else
                    num = "2"
                end
            else
                if stock == "a3" then
                    if barr == "sd" then
                        num = "6"
                    else
                        num = "5"
                    end
                elseif stock == "none" then
                    if barr == "sd" then
                        num = "4"
                    end
                else
                    if barr == "sd" then
                        num = "5"
                    end
                end
            end
        end
    end

    return start .. mid .. num
end

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local rutle = {common .. "movement-smg-03.ogg",common .. "movement-smg-04.ogg"}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
    },
    -- ["idle_empty"] = {
    --     Source = "idle",
    -- },
    ["ready"] = {
        Source = "ready",
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0.15},
            {s = path .. "rack1.ogg",         t = 0.15, c = ci},
            {s = path .. "rack2.ogg",         t = 0.38, c = ci},
            {s = ratel,         t = 0.75},
        }
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = ArcCW.UC.DrawSounds,
    },
    -- ["draw_empty"] = {
    --     Source = "draw_empty",
    --     SoundTable = ArcCW.UC.DrawSounds,
    -- },
    ["holster"] = {
        Source = "holster",
        --Time = 0.25,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    -- ["holster_empty"] = {
    --     Source = "holster_empty",
    --     --Time = 0.25,
    --     SoundTable = ArcCW.UC.HolsterSounds,
    -- },
    ["fire"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    -- ["fire_empty"] = {
    --     Source = "fire",
    --     Time = 13 / 30,
    --     ShellEjectAt = 0.03,
    --     SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    -- },
    ["fire_iron"] = {
        Source = "idle",
        Time = 13 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    -- ["fire_empty_iron"] = {
    --     Source = "idle",
    --     Time = 13 / 30,
    --     ShellEjectAt = 0.03,
    --     SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    -- },

    ["fix"] = {
        Source = "fix",
        Time = 40 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        ShellEjectAt = 0.36,
        SoundTable = {
            {s = rottle, t = 0.15},
            {s = path .. "rack1.ogg",         t = 0.27, c = ci},
            {s = path .. "rack2.ogg",         t = 0.5, c = ci},
        },
    },

    -- 30 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 2,
        MinProgress = 1.2,
        LastClip1OutTime = 2,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = path .. "magout.ogg",        t = 0.4, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.61, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.25},
            {s = ratel,  t = 1.55},
            {s = common .. "shoulder.ogg",  t = 1.5},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.045, c = ci},
            {s = path .. "chlock.ogg",         t = 0.18, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = 0.86, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.13, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.05, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },
    ["reload_kurz"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 2,
        MinProgress = 1.2,
        LastClip1OutTime = 2,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = path .. "magout.ogg",        t = 0.4, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.63, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.25},
            {s = ratel,  t = 1.55},
            {s = common .. "shoulder.ogg",  t = 1.5},
        },
    },
    ["reload_empty_kurz"] = {
        Source = "reload_empty_kurz",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.066, c = ci},
            {s = path .. "chlock.ogg",         t = 0.2, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = 0.86, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.13, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.1, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 15 Round Reloads --

    ["reload_15"] = {
        Source = "reload",--"reload_15",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 67 / 30,
        MinProgress = 1.2,
        LastClip1OutTime = 67 / 30,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.5, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.25},
            {s = ratel,  t = 1.55},
            {s = common .. "shoulder.ogg",  t = 1.5},
        },
    },
    ["reload_empty_15"] = {
        Source = "reload_empty",--"reload_empty_15",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.1, c = ci},
            {s = path .. "chlock.ogg",         t = 0.19, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = .9, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.2, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.13, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },
    ["reload_empty_kurz_15"] = {
        Source = "reload_empty_kurz",--"reload_empty_15",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.1, c = ci},
            {s = path .. "chlock.ogg",         t = 0.19, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = .9, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.2, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.13, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 40 Round Reloads --

    ["reload_40"] = {
        Source = "reload",--"reload_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 67 / 30,
        MinProgress = 1.2,
        LastClip1OutTime = 67 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.5, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.25},
            {s = ratel,  t = 1.55},
            {s = common .. "shoulder.ogg",  t = 1.5},
        },
    },
    ["reload_empty_40"] = {
        Source = "reload_empty",--"reload_empty_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.1, c = ci},
            {s = path .. "chlock.ogg",         t = 0.19, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = .9, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.2, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.13, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },
    ["reload_empty_kurz_40"] = {
        Source = "reload_empty_kurz",--"reload_empty_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.1, c = ci},
            {s = path .. "chlock.ogg",         t = 0.19, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = .9, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.2, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.13, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 100 Round Reloads --

    ["reload_drum"] = {
        Source = "reload_drum",--"reload_50",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 67 / 30,
        MinProgress = 1.6,
        LastClip1OutTime = 1,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "magout.ogg",        t = 0.32, c = ci},
            {s = rottle, t = 0.25},
            {s = rottle, t = 0.75},
            {s = path .. "magin.ogg",         t = 1.05, c = ci},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = path .. "magtap.ogg",         t = 1.755, c = ci},
            {s = common .. "shoulder.ogg",  t = 2.25},
        },
    },
    ["reload_empty_drum"] = {
        Source = "reload_empty_drum",--"reload_empty_50",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.4,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 1,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "magout.ogg",        t = 0.3, c = ci},
            {s = rottle, t = 0.25},
            {s = rottle, t = 0.75},
            {s = common .. "magdrop.ogg",  t = 1.0},
            {s = path .. "magin.ogg",         t = 1.05, c = ci},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = path .. "magtap.ogg",         t = 1.755, c = ci},
            {s = path .. "rack1.ogg",         t = 2.3, c = ci},
            {s = path .. "rack2.ogg",         t = 2.5, c = ci},
            {s = common .. "shoulder.ogg",  t = 3.0},
        },
    },

    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-smg-03.ogg", t = 0},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-smg-01.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-smg-04.ogg", t = 1.25},
        },
    },

    ["enter_sprint"] = {
        Source = "sprint_enter",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKOut = 0,
        Time = .5,
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_sprint"] = {
        Source = "sprint_exit",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.5,
        Time = .5,
    },
}

SWEP.AutosolveSourceSeq = "idle"

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp","optic","ur_mp5_optic"}, -- ,"optic"
        Bone = "body",
        Offset = {
            vpos = Vector(-0.1, -1.6, 3),
            vang = Angle(90, 0, -90),
        },
        CorrectivePos = Vector(-0.09, 0, 0),
        CorrectiveAng = Angle(1, 0.6, -4.0),
        InstalledEles = {"ur_mp5_rail_optic"}
    },
    {
        PrintName = "Upper Receiver",
        DefaultAttName = "9\" Standard Upper",
        DefaultAttIcon = Material("entities/att/ur_mp5/upper_std.png", "smooth mips"),
        Slot = "ur_mp5_barrel",
        Bone = "body",
        Offset = {
            vpos = Vector(2.6, -3.7, -17.3),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Lower Receiver",
        DefaultAttName = "Navy Lower",
        DefaultAttIcon = Material("entities/att/ur_mp5/grip.png", "smooth mips"),
        Slot = "ur_mp5_caliber",
        DefaultEles = {"receiver_lower_0"}
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "body",
        Offset = {
            vpos = Vector(0, 0.3, 14.8),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"barrel_sd","barrel_eod","barrel_sword"}
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Tropical Handguard",
        DefaultAttIcon = Material("entities/att/ur_mp5/hg_std.png", "smooth mips"),
        Slot = {"ur_mp5_hg"},
        ExcludeFlags = {"barrel_sd", "barrel_eod"},
        Bone = "body",
        Offset = {
            vpos = Vector(0, .9, 10),
            vang = Angle(90, 0, -90),
        },
        --VMScale = Vector(.8, .8, .8),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "body",
        Offset = {
            vpos = Vector(0, .9, 10),
            vang = Angle(90, 0, -90),
        },
        --VMScale = Vector(.8, .8, .8),
        --InstalledEles = {"ur_mp5_rail_fg"},
        GivesFlags = {"mp5_rail"},
        ExcludeFlags = {"mp5_badhg","mp5_kurz"},
        MergeSlots = {15},
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "body",
        Offset = {
            vpos = Vector(-0.9, 0.2, 8),
            vang = Angle(90, 0, 180),
        },
        VMScale = Vector(.8,.8,.8),
        --InstalledEles = {"ur_mp5_clamp"}
        GivesFlags = {"mp5_rail"},
    },
    {
        PrintName = "Stock",
        Slot = {"ur_mp5_stock"},
        DefaultAttName = "Full Stock",
        DefaultAttIcon = Material("entities/att/ur_mp5/stock_std.png", "smooth mips"),
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_mp5_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_mp5/mag30.png", "smooth mips"),
        ExcludeFlags = {"ur_mp5_cal_40sw","ur_mp5_cal_10mm"}
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load",
        ExcludeFlags = {"barrel_sd"}
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "mp5_charm"},
        FreeSlot = true,
        Bone = "Body",
        Offset = {
            vpos = Vector(0.6, 1.1, 2.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "Body",
        Offset = {
            vpos = Vector(0, 0, 7.9),
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
        --RequireFlags = {"barrel_eod"},
        ExcludeFlags = {"mp5_badhg","mp5_kurz"},
    }
}

-- SWEP.AttachmentOverrides = {
--     ["uc_grip_handstop"] = {
--         LHIK = false
--     }
-- } -- THIS SHIT DOESN'T WORK

--lua/weapons/arccw_ur_mp5.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Effects --

SWEP.MuzzleEffect = "muzzleflash_mp5"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
SWEP.ShellScale = 1
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_9mm"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.PistolShellSoundsTable

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
-- SWEP.CamAttachment = 3 ---------------------------------------------------------------------------
-- SWEP.TracerNum = 1
-- SWEP.TracerCol = Color(25, 255, 25)
-- SWEP.TracerWidth = 2

-- Fake name --

SWEP.PrintName = "PK5-4"

-- True name --

SWEP.TrueName = "MP5A4"

-- Trivia --

SWEP.Trivia_Class = "Submachine Gun"
SWEP.Trivia_Desc = [[Versatile submachine gun known for its use by high profile police units around the world, most famously by the British SAS during the Iranian embassy siege. Its reliable closed-bolt design and craftsmanship allowed it to remain relevant among new generations of submachine guns.

If accurate, sophisticated close-combat performance is what you're looking for, no weapon has a better track record.

Switch to burst fire mode to reduce dispersion from moving and hipfiring.]]
SWEP.Trivia_Manufacturer = "Crowdley & Nelson"
SWEP.Trivia_Calibre = "9x19mm Parabellum"
SWEP.Trivia_Mechanism = "Roller-Delayed Blowback"
SWEP.Trivia_Country = "Germany"
SWEP.Trivia_Year = 1966

-- Weapon slot --

SWEP.Slot = 2

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Heckler & Koch"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ur_mp5.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_mp5.mdl"
SWEP.ViewModelFOV = 70
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2
SWEP.ProceduralIronFire = true

-- Damage --

SWEP.Damage = ArcCW.UC.StdDmg["9mm"].max
SWEP.DamageMin = ArcCW.UC.StdDmg["9mm"].min
SWEP.Penetration = ArcCW.UC.StdDmg["9mm"].pen
SWEP.RangeMin = 20
SWEP.Range = 100

SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 400
SWEP.PhysBulletMuzzleVelocity = 400

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 15

-- Recoil --

SWEP.Recoil = 0.22
SWEP.RecoilSide = 0.17

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1.25
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 0.6
SWEP.RecoilPunchBack = 1.5

SWEP.Sway = 0.25

-- Firerate / Firemodes --

SWEP.Delay = 60 / 800
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = -3,
        Mult_MoveDispersion = 0.75,
        Mult_HipDispersion = 0.9,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_smg1"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 3
SWEP.HipDispersion = 500
SWEP.MoveDispersion = 150
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "pistol"
SWEP.MagID = "mp5"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

SWEP.MalfunctionMean = 200

-- Speed multipliers --

SWEP.SpeedMult = 0.925
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.3
SWEP.ShootSpeedMult = 0.95

-- Length --

SWEP.BarrelLength = 24
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.5, -2, 1)
SWEP.HolsterAng = Angle(-8.5, 8, -10)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-3.17, -1, 0.6),
     Ang = Angle(0.45, 0, 0),
     Magnification = 1,
     SwitchToSound = "",
     ViewModelFOV = 60,
}

SWEP.ActivePos = Vector(-0.3, 1.1, 0.6)
SWEP.ActiveAng = Angle(0, 0, -1)

-- SWEP.SprintPos = Vector(-0.5, 3, 1.5)
-- SWEP.SprintAng = Angle(-12, 15, -15)

SWEP.SprintPos = Vector(0, -3, 0)
SWEP.SprintAng = Angle(0, 0, 0)
-- SWEP.CustomizePos = Vector(6, -2, -1.5)
-- SWEP.CustomizeAng = Angle(16, 28, 0)
SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, 0.5, 0)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.BarrelOffsetHip = Vector(4, 0, -4)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-8, 4, -5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1
}

-- Firing sounds --
local path = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

SWEP.DistantShootSoundOutdoors = {
    path .. "fire-dist-01.ogg",
    path .. "fire-dist-02.ogg",
    path .. "fire-dist-03.ogg",
    path .. "fire-dist-04.ogg",
    path .. "fire-dist-05.ogg",
    path .. "fire-dist-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-pistol-01.ogg",
    common .. "fire-dist-int-pistol-02.ogg",
    common .. "fire-dist-int-pistol-03.ogg",
    common .. "fire-dist-int-pistol-04.ogg",
    common .. "fire-dist-int-pistol-05.ogg",
    common .. "fire-dist-int-pistol-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 0.6
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --

SWEP.BulletBones = {
    -- [1] = "uzi_b1", [2] = "uzi_b2", [3] = "uzi_b3", [4] = "uzi_b4"
}

--[[

1 --- 	id: 0
     [	name: iron
    num: 1
    submodels:
    0 --- ironSIGHT.smd
2 --- 	id: 1
     [	name: 1
    num: 4
    submodels:
    0 --- mp5UPPER.smd
    1 --- mp5sdUPPER.smd
    2 --- mp5kUPPER.smd
    3 --- swordUPPER.smd
3 --- 	id: 2
     [	name: 2
    num: 2
    submodels:
    0 --- fourLOWER.smd
    1 --- sefLOWER.smd
4 --- 	id: 3
     [	name: 3
    num: 11
    submodels:
    0 --- fixedSTOCK.smd
    1 --- collapseSTOCK.smd
    2 --- collapseSTOCKcoll.smd
    3 --- pdwSTOCK.smd
    4 --- pdwSTOCKfold.smd
    5 --- tacticSTOCK.smd
    6 --- tacticSTOCKfold.smd
    7 --- futureSTOCK.smd
    8 --- futureSTOCKcoll.smd
    9 --- futureSTOCKfold.smd
    10 --- buttSTOCK.smd
5 --- 	id: 4
     [	name: 4
    num: 10
    submodels:
    0 --- standardHG.smd
    1 --- flashHG.smd
    2 --- flashmlokHG.smd
    3 --- slimHG.smd
    4 --- picaHG.smd
    5 --- mlokHG.smd
    6 --- kurzgripHG.smd
    7 --- kurzslimHG.smd
    8 --- kurzmlokHG.smd
    9 ---
6 --- 	id: 5
     [	name: 5
    num: 4
    submodels:
    0 --- standardMAG.smd
    1 --- smallMAG.smd
    2 --- straightMAG.smd
    3 --- drumMAG.smd
7 --- 	id: 6
     [	name: 6
    num: 2
    submodels:
    0 ---
    1 --- mp5RAIL.smd

]]

SWEP.AttachmentElements = {
    ["ur_mp5_barrel_sd"] = {
        VMBodygroups = {
            {ind = 1, bg = 1},
            {ind = 4, bg = 9},
            //{ind = 8, bg = 1},
        },
        AttPosMods = {
            [6] = {
                vpos = Vector(0, 1.3, 10),
                vang = Angle(90, 0, -90),
            },
            [7] = {
				vpos = Vector(-1.15, 0.3, 8),
				vang = Angle(90, 0, 180),
			},
        },
    },
    ["ur_mp5_barrel_eod"] = {
        VMBodygroups = {
            {ind = 4, bg = 10},
            //{ind = 8, bg = 2},
        },
        AttPosMods = {
            [6] = {
                vpos = Vector(0, 1.5, 10),
                vang = Angle(90, 0, -90),
            },
            [7] = {
				vpos = Vector(-0.95, 0.3, 8),
				vang = Angle(90, 0, 180),
			},
		}
    },
    ["ur_mp5_barrel_kurz"] = {
        VMBodygroups = {
            {ind = 1, bg = 2},
            {ind = 4, bg = 7},
        },
        AttPosMods = {[4] = {
            vpos = Vector(-0.1, 0.3, 11.5),
            vang = Angle(90, 0, -90),
        }}
    },
    ["ur_mp5_barrel_swordfish"] = {
        VMBodygroups = {
            --{ind = 0, bg = 1},
            {ind = 1, bg = 3},
            {ind = 6, bg = 0},
        },
    },

    ["ur_mp5_rail_fg"] = {
        VMBodygroups = {{ind = 4, bg = 4}},
    },
    ["ur_mp5_ub_classic"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
    },
    ["ur_mp5_ub_surefire"] = {
        VMBodygroups = {{ind = 4, bg = 1}},
    },
    ["ur_mp5_ub_surelock"] = {
        VMBodygroups = {{ind = 4, bg = 2}},
    },
    ["ur_mp5_ub_kurzgrip"] = {
        VMBodygroups = {{ind = 4, bg = 6}},
    },
    ["ur_mp5_ub_kurzmlok"] = {
        VMBodygroups = {{ind = 4, bg = 8}},
    },
    ["ur_mp5_ub_wood"] = {
        VMBodygroups = {{ind = 4, bg = 3}}, -- insert wood handguard here
    },

    ["ur_mp5_mag_15"] = {
        VMBodygroups = {{ind = 5, bg = 1}},
    },
    ["ur_mp5_mag_40"] = {
        VMBodygroups = {{ind = 5, bg = 3}},
    },
    ["ur_mp5_mag_50"] = {
        VMBodygroups = {{ind = 5, bg = 3}},
    },
    ["ur_mp5_mag_waffle"] = {
        VMBodygroups = {{ind = 5, bg = 2}},
    },

    ["ur_mp5_rail_optic"] = {
        VMBodygroups = {{ind = 6, bg = 1}},
    },

    ["ur_mp5_clamp"] = {
        VMBodygroups = {{ind = 5, bg = 1}},
    },

    ["receiver_lower"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
    },
    ["receiver_lower_semi"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
    },
    ["receiver_lower_0"] = {
        VMBodygroups = {{ind = 2, bg = 0}},
    },
    ["receiver_upper_0"] = {
        VMBodygroups = {{ind = 7, bg = 0}},
    },

    ["stock_a3"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
        },
    },
    ["stock_a3_folded"] = {
        VMBodygroups = {
            {ind = 3, bg = 2},
        },
    },
    ["ur_mp5_stock_remove"] = {
        VMBodygroups = {{ind = 3, bg = 10}},
    },
    ["ur_mp5_stock_wood"] = {
        -- VMBodygroups = {{ind = 0, bg = 4}},
        -- Make this part of the VMSkin
    },
    ["stock_pdw"] = {
        VMBodygroups = {{ind = 3, bg = 3}},
    },
    ["stock_pdw_folded"] = {
        VMBodygroups = {{ind = 3, bg = 4}},
    },
    ["stock_ump"] = {
        VMBodygroups = {{ind = 3, bg = 5}},
    },
    ["stock_ump_folded"] = {
        VMBodygroups = {{ind = 3, bg = 6}},
    },
    ["stock_future"] = {
        VMBodygroups = {{ind = 3, bg = 7}},
    },
    ["stock_future_folded"] = {
        VMBodygroups = {{ind = 3, bg = 8}},
    },
    ["ur_mp5_precision_irons"] = {
        VMBodygroups = {
            {ind = 0, bg = 2},
            {ind = 6, bg = 0},
            },
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local atts = wep.Attachments
    local vm = data.vm
    if IsValid(vm) then
        local barr = string.Replace(atts[2].Installed or "default","ur_mp5_barrel_","")
        local hg = string.Replace(atts[5].Installed or "default","ur_mp5_ub_","")
        
        if atts[6].Installed or atts[7].Installed then
            if barr == "sd" then
                vm:SetBodygroup(8, 1)
            elseif barr == "eod" then
                vm:SetBodygroup(8, 2)
            elseif hg == "default" or hg == "classic" then
                vm:SetBodygroup(4, 4)
                vm:SetBodygroup(8, 0)
            else
                vm:SetBodygroup(8, 0)
            end
        else
            vm:SetBodygroup(8, 0)
        end

        if hg == "mlok" then
            if barr == "kurz" then
                vm:SetBodygroup(4,8)
            else
                vm:SetBodygroup(4,5)
            end
        end

        if barr == "sword" then
            vm:SetBodygroup(0,(atts[1].Installed and 3) or 1)
        end
    end
end

SWEP.Hook_NameChange = function(wep,name)
    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default","ur_mp5_barrel_","")
    local cal = string.Replace(atts[3].Installed or "default","ur_mp5_caliber_","")
    local stock = string.Replace(atts[8].Installed or "default","ur_mp5_stock_","")
    local fakeNames = !GetConVar("arccw_truenames"):GetBool()
    local defaultCals = {
        ["default"] = true,
        ["noburst"] = true,
        ["semi"] = true
    }

    local start = "MP5"
    local mid = "A"
    local num = "4"
    if fakeNames then
        start = "PK5"
        mid = "-"
    end

    if cal == "semi" or atts[12].Installed == "uc_fg_civvy" then
        if fakeNames then
            return "PK5-CIV"
        else
            if barr == "long" or barr == "sd" then
                start = "HK94" -- I know how prolific civies can get with their gunbuilds, so the nonsensical names will continue
            else
                return "SP5" .. ((barr == "kurz" and "K-PDW") or "")
            end
        end
    end

    if !defaultCals[cal] then
        if barr == "sd" then
            num = "SD"
        else
            num = ""
        end
        if cal == "10auto" then
            mid = "/10"
        elseif cal == "40sw" then
            mid = "/40"
        elseif cal == "22lr" then
            if barr == "sd" then
                mid = "SD"
                num = " .22 LR"
            else
                mid = " .22 LR"
            end
        end
    else
        if barr == "kurz" then
            if fakeNames then
                mid = "C"
            else
                mid = "K"
            end
            if stock == "pdw" then
                num = "-PDW"
            elseif cal == "default" then
                if fakeNames then
                    num = "-4"
                else
                    num = "A4"
                end
            else
                num = ""
            end
        else
            if barr == "sd" then
                mid = "SD"
            end

            if cal == "noburst" or cal == "semi" then
                if stock == "a3" then
                    num = "3"
                elseif stock == "none" then
                    num = "1"
                else
                    num = "2"
                end
            else
                if stock == "a3" then
                    if barr == "sd" then
                        num = "6"
                    else
                        num = "5"
                    end
                elseif stock == "none" then
                    if barr == "sd" then
                        num = "4"
                    end
                else
                    if barr == "sd" then
                        num = "5"
                    end
                end
            end
        end
    end

    return start .. mid .. num
end

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local rutle = {common .. "movement-smg-03.ogg",common .. "movement-smg-04.ogg"}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
    },
    -- ["idle_empty"] = {
    --     Source = "idle",
    -- },
    ["ready"] = {
        Source = "ready",
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0.15},
            {s = path .. "rack1.ogg",         t = 0.15, c = ci},
            {s = path .. "rack2.ogg",         t = 0.38, c = ci},
            {s = ratel,         t = 0.75},
        }
    },
    ["draw"] = {
        Source = "draw",
        SoundTable = ArcCW.UC.DrawSounds,
    },
    -- ["draw_empty"] = {
    --     Source = "draw_empty",
    --     SoundTable = ArcCW.UC.DrawSounds,
    -- },
    ["holster"] = {
        Source = "holster",
        --Time = 0.25,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    -- ["holster_empty"] = {
    --     Source = "holster_empty",
    --     --Time = 0.25,
    --     SoundTable = ArcCW.UC.HolsterSounds,
    -- },
    ["fire"] = {
        Source = "fire",
        Time = 13 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    -- ["fire_empty"] = {
    --     Source = "fire",
    --     Time = 13 / 30,
    --     ShellEjectAt = 0.03,
    --     SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    -- },
    ["fire_iron"] = {
        Source = "idle",
        Time = 13 / 30,
        ShellEjectAt = 0.03,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    -- ["fire_empty_iron"] = {
    --     Source = "idle",
    --     Time = 13 / 30,
    --     ShellEjectAt = 0.03,
    --     SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    -- },

    ["fix"] = {
        Source = "fix",
        Time = 40 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.4,
        ShellEjectAt = 0.36,
        SoundTable = {
            {s = rottle, t = 0.15},
            {s = path .. "rack1.ogg",         t = 0.27, c = ci},
            {s = path .. "rack2.ogg",         t = 0.5, c = ci},
        },
    },

    -- 30 Round Reloads --

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 2,
        MinProgress = 1.2,
        LastClip1OutTime = 2,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = path .. "magout.ogg",        t = 0.4, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.61, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.25},
            {s = ratel,  t = 1.55},
            {s = common .. "shoulder.ogg",  t = 1.5},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.045, c = ci},
            {s = path .. "chlock.ogg",         t = 0.18, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = 0.86, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.13, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.05, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },
    ["reload_kurz"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 2,
        MinProgress = 1.2,
        LastClip1OutTime = 2,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = path .. "magout.ogg",        t = 0.4, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.63, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.25},
            {s = ratel,  t = 1.55},
            {s = common .. "shoulder.ogg",  t = 1.5},
        },
    },
    ["reload_empty_kurz"] = {
        Source = "reload_empty_kurz",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.066, c = ci},
            {s = path .. "chlock.ogg",         t = 0.2, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = 0.86, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.13, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.1, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 15 Round Reloads --

    ["reload_15"] = {
        Source = "reload",--"reload_15",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 67 / 30,
        MinProgress = 1.2,
        LastClip1OutTime = 67 / 30,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.5, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.25},
            {s = ratel,  t = 1.55},
            {s = common .. "shoulder.ogg",  t = 1.5},
        },
    },
    ["reload_empty_15"] = {
        Source = "reload_empty",--"reload_empty_15",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.1, c = ci},
            {s = path .. "chlock.ogg",         t = 0.19, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = .9, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.2, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.13, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },
    ["reload_empty_kurz_15"] = {
        Source = "reload_empty_kurz",--"reload_empty_15",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.1, c = ci},
            {s = path .. "chlock.ogg",         t = 0.19, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = .9, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.2, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.13, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 40 Round Reloads --

    ["reload_40"] = {
        Source = "reload",--"reload_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 67 / 30,
        MinProgress = 1.2,
        LastClip1OutTime = 67 / 30,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.6,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "magpouch.ogg", t = 0.05},
            {s = path .. "magout.ogg",        t = 0.25, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 0.5, c = ci},
            {s = common .. "magpouchin.ogg", t = 1.25},
            {s = ratel,  t = 1.55},
            {s = common .. "shoulder.ogg",  t = 1.5},
        },
    },
    ["reload_empty_40"] = {
        Source = "reload_empty",--"reload_empty_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.1, c = ci},
            {s = path .. "chlock.ogg",         t = 0.19, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = .9, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.2, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.13, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },
    ["reload_empty_kurz_40"] = {
        Source = "reload_empty_kurz",--"reload_empty_40",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.2,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.55,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "chback.ogg",         t = 0.1, c = ci},
            {s = path .. "chlock.ogg",         t = 0.19, c = ci},
            {s = common .. "magpouch.ogg", t = 0.4},
            {s = path .. "magout.ogg",        t = .9, c = ci},
            {s = rottle, t = 0.25},
            {s = path .. "magin.ogg",         t = 1.2, c = ci},
            {s = common .. "magdrop_smg.ogg",  t = 1.5},
            {s = rottle, t = 1.25},
            {s = path .. "chamber.ogg",         t = 2.13, c = ci},
            {s = ratel,  t = 2.4},
            {s = common .. "shoulder.ogg",  t = 2.6},
        },
    },

    -- 100 Round Reloads --

    ["reload_drum"] = {
        Source = "reload_drum",--"reload_50",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 67 / 30,
        MinProgress = 1.6,
        LastClip1OutTime = 1,
        LHIK = true,
        LHIKIn = 0.4,
        LHIKEaseIn = 0.4,
        LHIKEaseOut = 0.15,
        LHIKOut = 0.9,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "magout.ogg",        t = 0.32, c = ci},
            {s = rottle, t = 0.25},
            {s = rottle, t = 0.75},
            {s = path .. "magin.ogg",         t = 1.05, c = ci},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = path .. "magtap.ogg",         t = 1.755, c = ci},
            {s = common .. "shoulder.ogg",  t = 2.25},
        },
    },
    ["reload_empty_drum"] = {
        Source = "reload_empty_drum",--"reload_empty_50",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SMG1,
        -- Time = 90 / 30,
        MinProgress = 2.4,
        LastClip1OutTime = 1.8,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKEaseIn = 0.3,
        LHIKEaseOut = 0.2,
        LHIKOut = 1,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "magout.ogg",        t = 0.3, c = ci},
            {s = rottle, t = 0.25},
            {s = rottle, t = 0.75},
            {s = common .. "magdrop.ogg",  t = 1.0},
            {s = path .. "magin.ogg",         t = 1.05, c = ci},
            {s = common .. "cloth_4.ogg",  t = 1.65},
            {s = path .. "magtap.ogg",         t = 1.755, c = ci},
            {s = path .. "rack1.ogg",         t = 2.3, c = ci},
            {s = path .. "rack2.ogg",         t = 2.5, c = ci},
            {s = common .. "shoulder.ogg",  t = 3.0},
        },
    },

    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-smg-03.ogg", t = 0},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-smg-01.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-smg-04.ogg", t = 1.25},
        },
    },

    ["enter_sprint"] = {
        Source = "sprint_enter",
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKOut = 0,
        Time = .5,
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_sprint"] = {
        Source = "sprint_exit",
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.4,
        LHIKOut = 0.5,
        Time = .5,
    },
}

SWEP.AutosolveSourceSeq = "idle"

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp","optic","ur_mp5_optic"}, -- ,"optic"
        Bone = "body",
        Offset = {
            vpos = Vector(-0.1, -1.6, 3),
            vang = Angle(90, 0, -90),
        },
        CorrectivePos = Vector(-0.09, 0, 0),
        CorrectiveAng = Angle(1, 0.6, -4.0),
        InstalledEles = {"ur_mp5_rail_optic"}
    },
    {
        PrintName = "Upper Receiver",
        DefaultAttName = "9\" Standard Upper",
        DefaultAttIcon = Material("entities/att/ur_mp5/upper_std.png", "smooth mips"),
        Slot = "ur_mp5_barrel",
        Bone = "body",
        Offset = {
            vpos = Vector(2.6, -3.7, -17.3),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Lower Receiver",
        DefaultAttName = "Navy Lower",
        DefaultAttIcon = Material("entities/att/ur_mp5/grip.png", "smooth mips"),
        Slot = "ur_mp5_caliber",
        DefaultEles = {"receiver_lower_0"}
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "body",
        Offset = {
            vpos = Vector(0, 0.3, 14.8),
            vang = Angle(90, 0, -90),
        },
        ExcludeFlags = {"barrel_sd","barrel_eod","barrel_sword"}
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Tropical Handguard",
        DefaultAttIcon = Material("entities/att/ur_mp5/hg_std.png", "smooth mips"),
        Slot = {"ur_mp5_hg"},
        ExcludeFlags = {"barrel_sd", "barrel_eod"},
        Bone = "body",
        Offset = {
            vpos = Vector(0, .9, 10),
            vang = Angle(90, 0, -90),
        },
        --VMScale = Vector(.8, .8, .8),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "body",
        Offset = {
            vpos = Vector(0, .9, 10),
            vang = Angle(90, 0, -90),
        },
        --VMScale = Vector(.8, .8, .8),
        --InstalledEles = {"ur_mp5_rail_fg"},
        GivesFlags = {"mp5_rail"},
        ExcludeFlags = {"mp5_badhg","mp5_kurz"},
        MergeSlots = {15},
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "body",
        Offset = {
            vpos = Vector(-0.9, 0.2, 8),
            vang = Angle(90, 0, 180),
        },
        VMScale = Vector(.8,.8,.8),
        --InstalledEles = {"ur_mp5_clamp"}
        GivesFlags = {"mp5_rail"},
    },
    {
        PrintName = "Stock",
        Slot = {"ur_mp5_stock"},
        DefaultAttName = "Full Stock",
        DefaultAttIcon = Material("entities/att/ur_mp5/stock_std.png", "smooth mips"),
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_mp5_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_mp5/mag30.png", "smooth mips"),
        ExcludeFlags = {"ur_mp5_cal_40sw","ur_mp5_cal_10mm"}
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load",
        ExcludeFlags = {"barrel_sd"}
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "mp5_charm"},
        FreeSlot = true,
        Bone = "Body",
        Offset = {
            vpos = Vector(0.6, 1.1, 2.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "Body",
        Offset = {
            vpos = Vector(0, 0, 7.9),
            vang = Angle(90, 0, -90),
        },
        Hidden = true,
        --RequireFlags = {"barrel_eod"},
        ExcludeFlags = {"mp5_badhg","mp5_kurz"},
    }
}

-- SWEP.AttachmentOverrides = {
--     ["uc_grip_handstop"] = {
--         LHIK = false
--     }
-- } -- THIS SHIT DOESN'T WORK

--lua/weapons/arccw_ur_aw.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Urban Coalition" -- edit this if you like
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false

SWEP.PrintName = "AWP"

SWEP.Trivia_Class = "Sniper Rifle"
SWEP.Trivia_Desc = "A heavy rifle purpose-built for extreme range combat under extreme climates, first developed for the British military but quickly adopted by many more. Iconic for its appearance among military and police marksmen, this rifle is a symbol of discipline and order.\n\nOffers outstanding precision and kill potential, but its long bolt pull and reload time can become a hinderance outside its ideal engagement range.\n\nOne shot. One kill. You know the routine."
SWEP.Trivia_Manufacturer = "Accuracy International"
SWEP.Trivia_Calibre = "7.62x51mm NATO"
SWEP.Trivia_Mechanism = "Bolt Action"
SWEP.Trivia_Country = "United Kingdom"
SWEP.Trivia_Year = 1982

if !GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = "Apex Precision"
    SWEP.Trivia_Manufacturer = "Marksman Institute"
end


SWEP.Slot = 3
SWEP.CamAttachment = 3

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/c_ur_aw.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_aw.mdl"
SWEP.ViewModelFOV = 70

SWEP.DefaultBodygroups = "000000000000"

SWEP.BulletBones = {
    --[1] = "top_round",
    [2] = "mag_round",
}

-- Damage --

SWEP.Damage = 80 -- 2 shot close range
SWEP.DamageMin = 50 -- 2 shot long range
SWEP.RangeMin = 100
SWEP.Range = 400 -- 2 shot at ~300m

SWEP.Penetration = 18
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 850
SWEP.PhysBulletMuzzleVelocity = 850

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 5
SWEP.ExtendedClipSize = 10
SWEP.ReducedClipSize = 5

-- Recoil --

SWEP.Recoil = 1.75
SWEP.RecoilSide = 0.75

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 0.3
SWEP.VisualRecoilMult = 5
SWEP.MaxRecoilBlowback = 4
SWEP.MaxRecoilPunch = 4
SWEP.RecoilPunchBack = 3
SWEP.RecoilPunchBackMax = 3.5
SWEP.RecoilPunchBackMaxSights = 2.5

SWEP.Sway = 0.2

-- Firerate / Firemodes --

SWEP.Delay = 60 / 80
SWEP.Num = 1
SWEP.Firemodes = {
    {
        PrintName = "fcg.bolt",
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_crossbow"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = .25
SWEP.HipDispersion = 1250
SWEP.MoveDispersion = 500
SWEP.JumpDispersion = 700 -- tactical unrealism    set to 700 later

SWEP.Primary.Ammo = "ar2"
SWEP.MagID = "awp"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

-- SWEP.Malfunction = true
SWEP.MalfunctionMean = 200
--SWEP.MeleeTime = 1.5

-- Speed multipliers --

SWEP.SpeedMult = 0.8
SWEP.SightedSpeedMult = 0.625
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.625

local path = ")weapons/arccw_ur/ak/"

local testpath = ")weapons/arccw_ur/aw_placeholders/"
local path1 = ")weapons/arccw_ur/aw_placeholders/338/"

local path1 = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rutle = {common .. "movement-sniper-03.ogg",common .. "movement-sniper-04.ogg"}

SWEP.ShootSound = {
    testpath .. "fire-01.ogg",
    testpath .. "fire-02.ogg",
    testpath .. "fire-03.ogg",
    testpath .. "fire-04.ogg",
    testpath .. "fire-05.ogg",
    testpath .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    testpath .. "fire-sup-01.ogg",
    testpath .. "fire-sup-02.ogg",
    testpath .. "fire-sup-03.ogg",
    testpath .. "fire-sup-04.ogg",
    testpath .. "fire-sup-05.ogg",
    testpath .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = testpath .. "dryfire.ogg"

local tail = ")/arccw_uc/common/308/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-308-rif-ext-01.ogg",
    tail .. "fire-dist-308-rif-ext-02.ogg",
    tail .. "fire-dist-308-rif-ext-03.ogg",
    tail .. "fire-dist-308-rif-ext-04.ogg",
    tail .. "fire-dist-308-rif-ext-05.ogg",
    tail .. "fire-dist-308-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-shotgun-01.ogg",
    common .. "fire-dist-int-shotgun-02.ogg",
    common .. "fire-dist-int-shotgun-03.ogg",
    common .. "fire-dist-int-shotgun-04.ogg",
    common .. "fire-dist-int-shotgun-05.ogg",
    common .. "fire-dist-int-shotgun-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.MuzzleEffect = "muzzleflash_ak47"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
SWEP.ShellPitch = 90
SWEP.ShellScale = 1.145
SWEP.ShellRotateAngle = Angle(0, 0, 0)

SWEP.ManualAction = true
-- SWEP.ManualAction = false
SWEP.NoLastCycle = true

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.IronSightStruct = {
    Pos = Vector(-3.37, -5, 0.68),
    Ang = Angle(0, 0, 2),
    Magnification = 1.1,
    SwitchToSound = "", -- sound that plays when switching to this sight
    CrosshairInSights = false
}
SWEP.LaserOffsetAngle = Angle(0, 0, 0)
SWEP.LaserIronsAngle = Angle(0, 1.5, 0)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(-0.1, 0.1, 0.2)
SWEP.ActiveAng = Angle(0, 0, -1)

SWEP.SprintPos = Vector(-1, -1, 1.2)
SWEP.SprintAng = Angle(-15, 8, -10)

SWEP.CrouchPos = Vector(-2, -2, -0.8)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.HolsterPos = Vector(-1, -1, 1.2)
SWEP.HolsterAng = Angle(-15, 8, -10)

SWEP.BarrelOffsetSighted = Vector(0, 0, 0)
SWEP.BarrelOffsetHip = Vector(0, 0, 0)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

-- SWEP.CustomizePos = Vector(6.5, 0.8, -0.2)
-- SWEP.CustomizeAng = Angle(8, 18, 15)

SWEP.BarrelLength = 54

SWEP.AttachmentElements = {
    ["barrel_long"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        AttPosMods = {[3] = {
            vpos = Vector(0, 40, 1.75),
            vang = Angle(0, 270, 0),
        }}
    },
    ["barrel_short"] = {
        VMBodygroups = {{ind = 2, bg = 2}},
        AttPosMods = {[3] = {
            vpos = Vector(0, 28, 1.75),
            vang = Angle(0, 270, 0),
        }}
    },
    ["barrel_sd"] = {
        VMBodygroups = {{ind = 2, bg = 3}}
    },

    ["mag_338"] = {
        --VMBodygroups = {{ind = 3, bg = 2}}
    },
    ["mag_300"] = {
        --VMBodygroups = {{ind = 3, bg = 2}}
    },
    ["mag_ext"] = {
        --VMBodygroups = {{ind = 3, bg = 1}}
    },
    ["mag_ext_magnum"] = {
        --VMBodygroups = {{ind = 3, bg = 3}}
    },

    ["rail_bottom"] = {
        VMBodygroups = {{ind = 6, bg = 1}}
    },
    ["rail_top"] = {
        VMBodygroups = {{ind = 7, bg = 1}}
    },
    ["sights_compact"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
        Override_IronSightStruct = {
            Pos = Vector(-3.395, -5, 1.35),
            Ang = Angle(0, 0, 2),
            Magnification = 1,
        }
    },
    ["sights_flipped"] = {
        VMBodygroups = {{ind = 8, bg = 1}}
    },

    ["skin_black"] = {
        VMSkin = 1
    },
    ["skin_tan"] = {
        VMSkin = 2
    },
    ["skin_cust"] = {
        VMSkin = 3
    },

    ["stock_at"] = {
        VMBodygroups = {{ind = 4, bg = 1}}
    },
    ["stock_ru"] = {
        VMBodygroups = {{ind = 4, bg = 2}}
    },
    ["stock_ru_rubber"] = {
        VMBodygroups = {{ind = 4, bg = 3}}
    },
    ["stock_fixed"] = {
        VMBodygroups = {
            {ind = 4, bg = 4},
            {ind = 5, bg = 1},
        }
    },
    ["stock_none"] = {
        VMBodygroups = {
            {ind = 4, bg = 5},
        }
    },
}

SWEP.ExtraSightDist = 2
SWEP.GuaranteeLaser = true

SWEP.WorldModelOffset = {
    pos = Vector(-7, 5, -4.8),
    ang = Angle(-12, 0, 180)
}

SWEP.MirrorVMWM = true

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        DefaultAttIcon = Material("entities/att/ur_aw/ironsights.png", "mips smooth"),
        Slot = {"optic","optic_lp","optic_sniper"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 6, 2.65),
            vang = Angle(0, -90, 0),
        },
        CorrectivePos = Vector(0, 0, 0),
        CorrectiveAng = Angle(0, 180, 0),
        VMScale = Vector(1.05, 1.05, 1.05),
        SlideAmount = {
            vmin = Vector(0, 5.5, 2.65),
            vmax = Vector(0, 7, 2.65),
        },
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "24\" Police Barrel",
        DefaultAttIcon = Material("entities/att/ur_aw/bar_def.png", "mips smooth"),
        Slot = "ur_aw_barrel",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle","ur_aw_muzzle"},
        Bone = "tag_weapon",
        VMScale = Vector(1.5, 1.5, 1.5),
        WMScale = VMScale,
        Offset = {
            vpos = Vector(0, 35.2, 1.675),
            vang = Angle(0, 270, 0),
        },
        ExcludeFlags = {"barrel_sd"},
        Installed = "ur_aw_muzzle_brake",
    },
    {
        PrintName = "Caliber",
        DefaultAttName = "7.62x51mm NATO",
        DefaultAttIcon = Material("entities/att/uc_bullets/762x51.png", "mips smooth"),
        Slot = {"ur_aw_cal"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_aw_mag"},
        DefaultAttName = "5-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_aw/mag308_5.png", "mips smooth"),
        ExcludeFlags = {"mag_338"}
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,16, -.6),
            vang = Angle(90, -90, -90),
        },
        VMScale = Vector(1, 1, 1),
        InstalledEles = {"rail_bottom"},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(-1.2, 16, 1.1),
            vang = Angle(-90, 270, 0),
        },
        GivesFlags = {"tac"},
        InstalledEles = {"rail_top"}
    },
    {
        PrintName = "Stock",
        Slot = {"ur_aw_stock"},
        DefaultAttName = "Factory Stock",
        DefaultAttIcon = Material("entities/att/ur_aw/stock_def.png", "mips smooth"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
        HideIfBlocked = true
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(.85, 4.6, 0.5),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "Finish",
        Slot = {"ur_aw_skin"},
        FreeSlot = true,
        DefaultAttName = "Olive Drab",
        DefaultAttIcon = Material("entities/att/ur_aw/skin_green.png", "mips smooth"),
    }
}


function SWEP:Hook_TranslateAnimation(anim)

end

SWEP.Hook_NameChange = function(wep,name)
    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_aw_barrel_", "")
    local cal = string.Replace(atts[4].Installed or "default", "ur_aw_cal_", "")
    local stock = string.Replace(atts[8].Installed or "default", "ur_aw_stock_", "")

    if GetConVar("arccw_truenames"):GetBool() then
        if cal ~= "default" then
            return "AWM"
        elseif barr == "sd" then
            return "AWS"
        elseif stock == "at" then
            return "AT"
        end
    else
        if cal == "338" then
            return "Apex Magnum"
        elseif barr == "sd" then
            return "Apex Spectre"
        elseif stock == "at" then
            return "Apex Tactical"
        end
    end
end

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local vm = data.vm
    if !IsValid(vm) then return end

    local atts = wep.Attachments
    local cal = string.Replace(atts[4].Installed or "default", "ur_aw_cal_", "")
    local mag = string.Replace(atts[5].Installed or "default", "ur_aw_mag_", "")
    local flags = wep:GetWeaponFlags()

    local pistolGrip = table.HasValue(flags,"pistolgrip")

    if cal ~= "default" then
        if pistolGrip then
            vm:SetBodygroup(1,3)
        else
            vm:SetBodygroup(1,1)
        end
    elseif pistolGrip then
        vm:SetBodygroup(1,2)
    else
        vm:SetBodygroup(1,0)
    end

    if atts[1].Installed then
        if table.HasValue(flags,"sights_compact") then
            vm:SetBodygroup(8,3)
        else
            vm:SetBodygroup(8,1)
        end
    end

    if mag == "10" then
        vm:SetBodygroup(3,1)
    elseif mag == "10m" then
        vm:SetBodygroup(3,3)
    elseif cal ~= "default" then
        vm:SetBodygroup(3,2)
    end
end

SWEP.Animations = {
    ["ready"] = {
        Source = "cycle",
         Time = 1.47,
        MinProgress = 1.3,
        SoundTable = {
            {s = ratel,                             t = 0.07},
            {s = testpath .. "boltup.ogg",          t = 0.1},
            {s = testpath .. "boltback.ogg",        t = 0.2},
            {s = testpath .. "boltforward.ogg",     t = 0.32},
            {s = testpath .. "boltdown.ogg",        t = 0.6},
        },
        ProcDraw = true,
    },
    ["idle"] = {
        Source = "idle"
    },
    ["idle_empty"] = {
        Source = "idle_empty"
    },
    ["draw"] = {
        Source = "draw",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        Time = 35 / 30,
        MinProgess = .5,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "raise.ogg", t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        Time = .75,
        SoundTable = {
            {s = ratel, t = 0},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 35 / 30,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "raise.ogg", t = 0.2},
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
        },
    },
    ["fire"] = {
        Source = {"fire"},
        Time = 27 / 30,
        MinProgress = 0.2,
        SoundTable = {
            SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
        },
    },

    ["fire_iron"] = {
        Source = {"fire_iron"},
        Time = 27 / 30,
        MinProgress = 0.2,
        SoundTable = {
            SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
        },
    },

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1,
        Time = 85 / 30,
        LHIKEaseOut = 0.25,
        MinProgress = 1.5,
        SoundTable = {
            {s = rottle,                             t = 0.1},
            {s = testpath .. "magrel.ogg", 	t = 0.2},
            {s = testpath .. "magout.ogg",          t = 0.3},
            {s = rottle,    t = 0.75},
            {s = common .. "magpouch.ogg",           t = 0.8, v = 0.4},
            {s = testpath .. "struggle.ogg",   t = 0.9},
            {s = testpath .. "magin.ogg",   t = 1.2},
            {s = rottle,    t = 1.4},
            {s = ratel,   t = 1.5},
        },
    },
    ["reload_10"] = {
        Source = "reload_exte",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1.15,
        LHIKEaseOut = 0.25,
        MinProgress = 2.5,
        SoundTable = {
            {s = rottle,                             t = 0.1},
            {s = testpath .. "magrel.ogg", 	t = 0.2},
            {s = testpath .. "magout.ogg",          t = 0.3},
            {s = rottle,    t = 0.75},
            {s = common .. "magpouch.ogg",           t = 0.8, v = 0.4},
            {s = testpath .. "struggle.ogg",   t = 0.9},
            {s = testpath .. "magin.ogg",   t = 1.2},
            {s = rottle,    t = 1.4},
            {s = ratel,   t = 1.5},
        },
    },
    ["reload_338"] = {
        Source = "reload_magnum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1.15,
        LHIKEaseOut = 0.25,
        MinProgress = 2.5,
        Time = 3.4,
        SoundTable = {
            {s = rottle,                             t = 0.1},
            {s = testpath .. "magrel.ogg", 	t = 0.2},
            {s = testpath .. "magout.ogg",          t = 0.4},
            {s = rottle,    t = 0.75},
            {s = common .. "magpouch.ogg",           t = 0.8, v = 0.4},
            {s = testpath .. "struggle.ogg",   t = 1.1, v = 1.1},
            {s = testpath .. "magin.ogg",   t = 1.3},
            {s = testpath .. "magtap.ogg",   t = 1.95},
            {s = rottle,    t = 2.3, v = 0.6},
            {s = ratel,   t = 2.35, v = 0.6},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = false,
        LHIKIn = 0.9,
        LHIKOut = 1.25,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.5,
        MinProgress = 3.0,
        ShellEjectAt = .45,
        LastClip1OutTime = 1.8,
        Time = 4.5,
        SoundTable = {
            {s = ratel,                             t = 0.05},
            {s = testpath .. "boltup.ogg",          t = 0.15},
            {s = testpath .. "boltback_reload.ogg",        t = 0.18},
            {s = testpath .. "eject.ogg",           t = 0.45},
            {s = rottle,    t = 0.6},
            {s = testpath .. "magrel.ogg", 	t = 1.0},
            {s = testpath .. "magout_empty.ogg",          t = 1.2},
            {s = rottle,    t = 1.25},
            {s = testpath .. "magdrop_metal.ogg",          t = 1.5, v = 0.4},
            {s = common .. "magpouch.ogg",           t = 1.6, v = 0.4},
            {s = rottle,    t = 1.65},
            {s = testpath .. "struggle.ogg",   t = 2},
            {s = testpath .. "magin.ogg",   t = 2.1},
            {s = rottle,    t = 2.4},
            {s = ratel,   t = 2.6},
            {s = testpath .. "boltforward_reload.ogg",     t = 2.7},
            {s = testpath .. "boltdown.ogg",        t = 3.1},
            {s = common .. "shoulder.ogg",        t = 3.15},
        },
    },
    ["reload_empty_10"] = {
        Source = "reload_empty_exte",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = false,
        LHIKIn = 0.9,
        LHIKOut = 1.25,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.5,
        ShellEjectAt = .5,
        MinProgress = 3.5,
        LastClip1OutTime = 1.8,
        Time = 4.5,
        SoundTable = {
            {s = ratel,                             t = 0.05},
            {s = testpath .. "boltup.ogg",          t = 0.15},
            {s = testpath .. "boltback_reload.ogg",        t = 0.18},
            {s = testpath .. "eject.ogg",           t = 0.45},
            {s = rottle,    t = .6},
            {s = testpath .. "magrel.ogg", 	t = 1.0},
            {s = testpath .. "magout_empty.ogg",          t = 1.2},
            {s = rottle,    t = 1.25},
            {s = testpath .. "magdrop_metal.ogg",          t = 1.6, v = 0.4},
            {s = common .. "magpouch.ogg",           t = 1.6, v = 0.4},
            {s = rottle,    t = 1.65},
            {s = testpath .. "struggle.ogg",   t = 2.1},
            {s = testpath .. "magin.ogg",   t = 2.2},
            {s = rottle,    t = 2.5},
            {s = testpath .. "boltforward_reload.ogg",     t = 2.8},
            {s = ratel,   t = 2.7},
            {s = testpath .. "boltdown.ogg",        t = 3.2},
            {s = common .. "shoulder.ogg",        t = 3.2},
        },
    },
    ["reload_empty_338"] = {
        Source = "reload_empty_magnum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = false,
        LHIKIn = 0.9,
        LHIKOut = 1.25,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.5,
        ShellEjectAt = .5,
        LastClip1OutTime = 1.5,
        MinProgress = 4,
        Time = 4.25,
        SoundTable = {
            {s = ratel,                             t = 0.05},
            {s = testpath .. "boltup.ogg",          t = 0.15},
            {s = testpath .. "boltback_reload.ogg",        t = 0.18},
            {s = testpath .. "eject.ogg",           t = 0.45},
            {s = rottle,    t = 0.6},
            {s = testpath .. "magrel.ogg", 	t = 1.0},
            {s = testpath .. "magout_empty.ogg",          t = 1.1},
            {s = rottle,    t = 1.25},
            {s = testpath .. "magdrop_metal.ogg",          t = 1.5, v = 0.4},
            {s = common .. "magpouch.ogg",           t = 1.6, v = 0.4},
            {s = rottle,    t = 1.65},
            {s = testpath .. "struggle.ogg",   t = 1.8},
            {s = testpath .. "magin.ogg",   t = 1.9},
            {s = rottle,    t = 2.4},
            {s = testpath .. "magtap.ogg",   t = 2.5},
            {s = ratel,   t = 2.6},
            {s = testpath .. "boltforward_reload.ogg",     t = 2.7},
            {s = testpath .. "boltdown.ogg",        t = 3.1},
            {s = common .. "shoulder.ogg",        t = 3.15},
        },
    },
    ["reload_empty_10_338"] = {
        Source = "reload_empty_exte_magnum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.9,
        LHIKOut = 1.25,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.5,
        MinProgress = 4,
        LastClip1OutTime = 2.3,
        Time = 4.5,
        ShellEjectAt = .5,
        SoundTable = {
            {s = ratel,                             t = 0.05},
            {s = testpath .. "boltup.ogg",          t = 0.15},
            {s = testpath .. "boltback_reload.ogg",        t = 0.18},
            {s = testpath .. "eject.ogg",           t = 0.45},
            {s = rottle,    t = 0.6},
            {s = testpath .. "magrel.ogg", 	t = 1.0},
            {s = testpath .. "magout_empty.ogg",          t = 1.1},
            {s = rottle,    t = 1.25},
            {s = testpath .. "magdrop_metal.ogg",          t = 1.5, v = 0.4},
            {s = common .. "magpouch.ogg",           t = 1.6, v = 0.4},
            {s = rottle,    t = 1.65},
            {s = testpath .. "struggle.ogg",   t = 1.85},
            {s = testpath .. "magin.ogg",   t = 2.0},
            {s = rottle,    t = 2.4},
            {s = testpath .. "magtap.ogg",   t = 2.6},
            {s = ratel,   t = 2.6},
            {s = testpath .. "boltforward_reload.ogg",     t = 2.9},
            {s = testpath .. "boltdown.ogg",        t = 3.3},
            {s = common .. "shoulder.ogg",        t = 3.35},
        },
    },
    ["reload_10_338"] = {
        Source = "reload_exte_magnum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 3,
        Time = 3.5,
        SoundTable = {
            {s = rottle,                             t = 0.1},
            {s = testpath .. "magrel.ogg", 	t = 0.2},
            {s = testpath .. "magout.ogg",          t = 0.4},
            {s = rottle,    t = 0.75},
            {s = common .. "magpouch.ogg",           t = 0.8, v = 0.4},
            {s = testpath .. "struggle.ogg",   t = 1.1, v = 1},
            {s = testpath .. "magin.ogg",   t = 1.4},
            {s = testpath .. "magtap.ogg",   t = 2.0},
            {s = rottle,    t = 2.3, v = 0.6},
            {s = ratel,   t = 2.35, v = 0.6},
        },
    },
    ["cycle"] = {
        Source = "cycle",
        Time = 1.47,
        ShellEjectAt = 0.4,
        MinProgress = 0.9,
        SoundTable = {
            {s = ratel,                             t = 0.07},
            {s = testpath .. "boltup.ogg",          t = 0.1},
            {s = testpath .. "boltback.ogg",        t = 0.2},
            {s = testpath .. "boltforward.ogg",     t = 0.32},
            {s = testpath .. "eject.ogg",           t = 0.4},
            {s = testpath .. "boltdown.ogg",        t = 0.6},

            --{s = common .. "shoulder.ogg",          t = 0.7},
        },
    },

    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-sniper-03.ogg", t = 0.05},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-sniper-01.ogg", t = 0},
            {s = rottle, t = 0.25},
            {s = testpath .. "boltup_inspect.ogg",          t = 1.2},
            {s = common .. "movement-sniper-03.ogg", t = 1.25},
            {s = testpath .. "boltback_inspect.ogg",        t = 1.35},
            {s = testpath .. "boltforward_inspect.ogg",     t = 1.8},
            {s = testpath .. "boltdown_inspect.ogg",        t = 1.9},
            {s = rottle, t = 2.0},
            {s = common .. "movement-sniper-04.ogg", t = 2.2},
        },
    },
    ["enter_inspect_empty"] = { -- Animations needed!
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = rutle, t = 0.1},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect_empty"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-sniper-01.ogg", t = 0.05},
            {s = rottle, t = 0.25},
            {s = testpath .. "boltup_inspect.ogg",          t = 1.2},
            {s = common .. "movement-sniper-03.ogg", t = 1.25},
            {s = testpath .. "boltback_inspect.ogg",        t = 1.35},
            {s = testpath .. "boltforward_inspect.ogg",     t = 1.8},
            {s = testpath .. "boltdown_inspect.ogg",        t = 1.9},
            {s = rottle, t = 2.0},
            {s = common .. "movement-sniper-04.ogg", t = 2.2},
        },
    },
}

SWEP.Hook_Think = ArcCW.UC.ADSReload

--lua/weapons/arccw_ur_pp19.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_ak.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets SMGs"
end

SWEP.PrintName = "Bogatyr SMG"
SWEP.TrueName = "PP-19 Vityaz"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ur_ak_barrel_vityaz"
SWEP.Attachments[5].Installed = "ur_ak_cal_9mm"
SWEP.Attachments[9].Installed = "ur_ak_grip_alpha"
SWEP.Attachments[10].Installed = "ur_ak_stock_aks"
SWEP.Attachments[15].Installed = "ur_ak_cover_alpha"

SWEP.NPCWeaponType = "weapon_smg1"
SWEP.Attachments[10].ToggleLock = true
--lua/weapons/arccw_ur_psg1.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_g3.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets DMRs"
end

SWEP.PrintName = "PMR-2"
SWEP.TrueName = "PSG1"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[1].Installed = "ur_g3_optic_psg1"
SWEP.Attachments[2].Installed = "ur_g3_barrel_26"
SWEP.Attachments[3].Installed = "ur_g3_rec_psg"
SWEP.Attachments[8].Installed = "ur_g3_stock_psg"
SWEP.Attachments[9].Installed = "ur_g3_mag_10"
--lua/weapons/arccw_ur_spas12.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_shotgun"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/12g.mdl"
SWEP.ShellPitch = 100
SWEP.ShellSounds = ArcCW.ShotgunShellSoundsTable
SWEP.ShellScale = 1
SWEP.UC_ShellColor = Color(0.7 * 255, 0.2 * 255, 0.2 * 255)

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 3

-- Fake name --

SWEP.PrintName = "Martello 12/70" -- Italian for "hammer"

-- True name --

SWEP.TrueName = "SPAS-12"

-- Trivia --

SWEP.Trivia_Class = "Shotgun"
SWEP.Trivia_Desc = [[Flexible combat shotgun with the ability to toggle between manual and semi-automatic action. This "dual-mode operation" allows the weapon to cycle low pressure, less-lethal rounds that lack the energy to extract themselves.
The weapon's attempts to reach the American civilian market may have been slowed by legal challenges, but it remains prominent in popular culture for its intimidating and tactical appearance.

Highly versatile, but encumbering to carry and difficult to reload. Switch to pump-action mode to tighten spread and conserve ammo.]]
SWEP.Trivia_Manufacturer = "Iscapelli Armaments"
SWEP.Trivia_Calibre = "12 Gauge"
SWEP.Trivia_Mechanism = "Hybrid"
SWEP.Trivia_Country = "Italy"
SWEP.Trivia_Year = 1979

-- Weapon slot --

SWEP.Slot = 3

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Luigi Franchi SpA"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ur_spas12.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_spas12.mdl"
SWEP.ViewModelFOV = 60
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-5.8, 5, -4.5),
    ang        =    Angle(-12, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
    scale = 1
}

-- Damage parameters --

SWEP.Damage = 18 -- 6 pellets to kill
SWEP.DamageMin = 10 -- 10 pellets to kill
SWEP.Range = 40
SWEP.RangeMin = 6
SWEP.Num = 8
SWEP.Penetration = 2
SWEP.DamageType = DMG_BUCKSHOT
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 365
SWEP.PhysBulletMuzzleVelocity = 365

SWEP.HullSize = 0.25

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults_Shotgun

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 8
SWEP.ChamberLoadEmpty = 1

-- Recoil --

SWEP.Recoil = 2.5
SWEP.RecoilSide = 2

SWEP.RecoilRise = 0.24
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1

SWEP.Sway = 0.5

-- Firerate / Firemodes --

SWEP.Delay = 60 / 220
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 1,
        PrintName = "fcg.pump",
        Override_ManualAction = true,
        Mult_AccuracyMOA = 0.8,
        Mult_HipDispersion = 0.8,
    },
    {
        Mode = 0
    }
}

SWEP.UC_CanManualAction = true
SWEP.ShotgunReload = true
SWEP.NoLastCycle = true

SWEP.ShootVol = 160
SWEP.ShootPitch = 100

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_shotgun"
SWEP.NPCWeight = 210

-- Accuracy --

SWEP.AccuracyMOA = 25
SWEP.HipDispersion = 400
SWEP.MoveDispersion = 125
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "buckshot"

-- Speed multipliers --

SWEP.SpeedMult = 0.88
SWEP.SightedSpeedMult = 0.5
SWEP.SightTime = 0.4
SWEP.ShootSpeedMult = 0.75

-- Length --

SWEP.BarrelLength = 46
SWEP.ExtraSightDist = 2

-- Ironsights / Customization / Poses --

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.IronSightStruct = {
     Pos = Vector(-3.765, -4, 1.3),
     Ang = Angle(.2, 0, 1),
     Magnification = 1.05,
     SwitchToSound = "",
}

SWEP.SprintPos = Vector(-0.5, -4, -3)
SWEP.SprintAng = Angle(3.5, 7, -20)

SWEP.HolsterPos = Vector(2.5, -1, -3)
SWEP.HolsterAng = Angle(-3.5, 20, -20)

SWEP.ActivePos = Vector(-0.3, -3, 0.1)
SWEP.ActiveAng = Angle(1, 1, -1)

SWEP.CrouchPos = Vector(-4, -2, 0)
SWEP.CrouchAng = Angle(0, 0, -30)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(3, 0, -4.5)

-- Firing sounds --

local path1 = ")weapons/arccw_ud/870/"
local path = ")weapons/arccw_ur/spas12/"
local common = ")/arccw_uc/common/"
SWEP.ShootSoundSilenced = path .. "fire_supp.ogg"
--[[SWEP.DistantShootSound = {path .. "fire-dist-01.ogg", path .. "fire-dist-02.ogg", path .. "fire-dist-03.ogg", path .. "fire-dist-04.ogg", path .. "fire-dist-05.ogg"}
SWEP.DistantShootSoundSilenced = common .. "sup_tail.ogg"]]
SWEP.ShootDrySound = common .. "manual_trigger.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.DistantShootSoundOutdoors = {
    path .. "fire-dist-01.ogg",
    path .. "fire-dist-02.ogg",
    path .. "fire-dist-03.ogg",
    path .. "fire-dist-04.ogg",
    path .. "fire-dist-05.ogg",
}

local tail = ")/arccw_uc/common/12ga/"

SWEP.ShootSoundSilenced = {
    tail .. "fire-sup-01.ogg",
    tail .. "fire-sup-02.ogg",
    tail .. "fire-sup-03.ogg",
    tail .. "fire-sup-04.ogg",
    tail .. "fire-sup-05.ogg",
    tail .. "fire-sup-06.ogg"
}
SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-12ga-pasg-ext-01.ogg",
    tail .. "fire-dist-12ga-pasg-ext-02.ogg",
    tail .. "fire-dist-12ga-pasg-ext-03.ogg",
    tail .. "fire-dist-12ga-pasg-ext-04.ogg",
    tail .. "fire-dist-12ga-pasg-ext-05.ogg",
    tail .. "fire-dist-12ga-pasg-ext-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Animations --

SWEP.Hook_Think = ArcCW.UC.ADSReload

SWEP.Hook_TranslateAnimation = function(wep,anim)
    if wep:GetCurrentFiremode().Override_ManualAction and anim == "idle_empty" then
        return "idle_empty_manual"
    end
end
SWEP.Hook_SelectFireAnimation = function(wep,data)
    if wep:GetCurrentFiremode().Override_AmmoPerShot == 2 then
        return "fire_2bst"
    elseif wep:GetCurrentFiremode().Override_ManualAction then
        return "fire_manual"
    end
end
SWEP.Hook_SelectReloadAnimation = function(wep,curanim)
    if wep:GetCurrentFiremode().Override_ManualAction and curanim == "sgreload_start_empty" then
        return "sgreload_start_empty_manual"
    end
end

local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local rutle = {common .. "movement-shotgun-01.ogg",common .. "movement-shotgun-02.ogg",common .. "movement-shotgun-03.ogg",common .. "movement-shotgun-04.ogg"}
local shellin = {path .. "shell-insert-01.ogg", path .. "shell-insert-02.ogg", path .. "shell-insert-03.ogg", path .. "shell-insert-04.ogg", path .. "shell-insert-05.ogg", path .. "shell-insert-06.ogg", path .. "shell-insert-07.ogg", path .. "shell-insert-08.ogg", path .. "shell-insert-09.ogg", path .. "shell-insert-10.ogg", path .. "shell-insert-11.ogg", path .. "shell-insert-12.ogg"}

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
    },
    ["idle_empty"] = {
        Source = "idle_empty_semi",
    },
    ["idle_empty_manual"] = {
        Source = "idle_empty",
    },
    ["draw"] = {
        Source = "draw",
        --Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["draw_empty"] = {
        Source = "draw", -- draw_empty
        --Time = 20 / 30,
        SoundTable = ArcCW.UC.DrawSounds,
    },
    ["holster"] = {
        Source = "holster",
        --Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["holster_empty"] = {
        Source = "holster", -- holster_empty
        --Time = 20 / 30,
        SoundTable = ArcCW.UC.HolsterSounds,
    },
    ["fire"] = {
        Source = "fire_semi",
        Time = 23 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire_semi",
        Time = 23 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_2bst"] = {
        Source = "fire_semi",
        Time = 35 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
        MinProgress = 0.4
    },
    ["fire_manual"] = { -- No bolt cycling
        Source = "fire_pump",
        Time = 23 / 25,--30,
        MinProgress = 0.3,
        ShellEjectAt = false,
        SoundTable = {{ s = common .. "manual_trigger.ogg", t = 0}},
    },
    ["cycle"] = {
        Source = "cycle",
        Time = 30 / 30,
        ShellEjectAt = 0.1,
        MinProgress = 0.35,
        SoundTable = {
            {s = path .. "forearm_back.ogg", t = 0},
            {s = path1 .. "eject.ogg", t = 0.1},
            {s = path .. "forearm_forward.ogg", t = 0.2}, -- Not temporary
        },
    },
    ["unjam"] = {
        Source = "cycle",
        Time = 30 / 30,
        ShellEjectAt = 0.01,
        MinProgress = .25,
        SoundTable = {
            {s = path .. "forearm_back.ogg", t = 0},
            {s = path1 .. "eject.ogg", t = 0.1},
            {s = path .. "forearm_forward.ogg", t = 0.2}, -- Not temporary
        },
    },
    ["fire_empty"] = {
        Source = "fire_empty_semi", -- fire_empty
        Time = 23 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path1 .. "eject.ogg", t = 0}, -- Not temporary
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty_semi", -- fire_empty
        Time = 23 / 25,--30,
        ShellEjectAt = 0.01,
        SoundTable = {
            {s = path1 .. "eject.ogg", t = 0}, -- Not temporary
        },
    },
    ["sgreload_start"] = {
        Source = "sgreload_start",
        Time = 25 / 30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = path .. "turn.ogg",  t = 0}, -- Temporary
            {s = rottle,  t = 0.1},
            {s = path .. "grab.ogg",  t = 0.15},
        }
    },
    ["sgreload_start_fold"] = {
        Source = "sgreload_start_fold",
        Time = 25 / 30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKOut = 0,
        SoundTable = {
            {s = path .. "turn.ogg",  t = 0}, -- Temporary
            {s = rottle,  t = 0.1},
            {s = path .. "grab.ogg",  t = 0.15},
        }
    },
    ["sgreload_start_empty"] = {
        Source = "sgreload_start_empty_semi",
        Time = 80 / 30,
        -- MinProgress = 1,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        TPAnimStartTime = 0.5,
        ShellEjectAt = false,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "breechload.ogg",  t = .4},
            {s = path .. "breechclose.ogg",  t = 1}, -- Temporary
            {s = path .. "turn.ogg",  t = 1.4}, -- Temporary
            {s = rottle,  t = 1.5},
            {s = path .. "grab.ogg",  t = 1.9},
        },
        ForceEmpty = true,
    },
    ["sgreload_start_empty_fold"] = {
        Source = "sgreload_start_empty_semi_fold",
        Time = 80 / 30,
        -- MinProgress = 1,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        TPAnimStartTime = 0.5,
        ShellEjectAt = false,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "breechload.ogg",  t = .4},
            {s = path .. "breechclose.ogg",  t = 1}, -- Temporary
            {s = path .. "turn.ogg",  t = 1.4}, -- Temporary
            {s = rottle,  t = 1.5},
            {s = path .. "grab.ogg",  t = 1.9},
        },
        ForceEmpty = true,
    },
    ["sgreload_start_empty_manual"] = {
        Source = "sgreload_start_empty",
        Time = 85 / 30,
        MinProgress = 1,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        TPAnimStartTime = 0.5,
        ShellEjectAt = .1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = path .. "forearm_back.ogg", t = 0},
            {s = path1 .. "eject.ogg", t = 0.1},
            {s = rottle, t = .2},
            {s = path .. "breechload.ogg",  t = .7},
            {s = path .. "forearm_forward.ogg", t = 1.6},
            {s = path .. "turn.ogg",  t = 1.4}, -- Temporary
            {s = rottle,  t = 1.5},
            {s = path .. "grab.ogg",  t = 2.0},
        },
        ForceEmpty = true,
    },
    ["sgreload_start_empty_manual_fold"] = {
        Source = "sgreload_start_empty_fold",
        Time = 85 / 30,
        MinProgress = 1,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKOut = 0,
        TPAnimStartTime = 0.5,
        ShellEjectAt = .1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        SoundTable = {
            {s = path .. "forearm_back.ogg", t = 0},
            {s = path1 .. "eject.ogg", t = 0.1},
            {s = rottle, t = .2},
            {s = path .. "breechload.ogg",  t = .7},
            {s = path .. "forearm_forward.ogg", t = 1.6},
            {s = path .. "turn.ogg",  t = 1.4}, -- Temporary
            {s = rottle,  t = 1.5},
            {s = path .. "grab.ogg",  t = 2.0},
        },
        ForceEmpty = true,
    },
    ["sgreload_insert"] = {
        Source = "sgreload_insert",
        Time = 18 / 30,
        MinProgress = 0.24,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.3,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
        SoundTable = {
            {s = shellin,  t = 0},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.05},
        },
    },
    ["sgreload_insert_fold"] = {
        Source = "sgreload_insert_fold",
        Time = 18 / 30,
        MinProgress = 0.24,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.3,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
        SoundTable = {
            {s = shellin,  t = 0},
            {s = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}, t = 0.05},
        },
    },
    ["sgreload_finish"] = {
        Source = "sgreload_finish",
        Time = 45 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.8,
        SoundTable = {
            {s = rottle,  t = 0.2},
            {s = path .. "return.ogg",  t = 0.475}, -- Temporary
            {s = common .. "shoulder.ogg",  t = 0.55},
        },
    },
    ["sgreload_finish_fold"] = {
        Source = "sgreload_finish_fold",
        Time = 45 / 30,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.6,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_SHOTGUN,
        TPAnimStartTime = 0.8,
        SoundTable = {
            {s = rottle,  t = 0.2},
            {s = path .. "return.ogg",  t = 0.475}, -- Temporary
            {s = common .. "shoulder.ogg",  t = 0.55},
        },
    },

    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-shotgun-01.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-shotgun-02.ogg", t = 0.3},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-shotgun-04.ogg", t = 1.3},
        },
    },
    ["enter_inspect_empty"] = { -- Animations needed!
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-shotgun-01.ogg", t = 0.1},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect_empty"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-shotgun-02.ogg", t = 0.3},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-shotgun-04.ogg", t = 1.3},
        },
    },
}

SWEP.BulletBones = {
    --[1] = "1014_shell1",
}

-- Bodygroups --

SWEP.AttachmentElements = {
    ["uc_manualonly"] = {
        Override_Firemodes = {
            {
                Mode = 1,
                PrintName = "fcg.pump",
                Override_ManualAction = true,
                Mult_AccuracyMOA = 0.8,
                Mult_HipDispersion = 0.8,
            },
            {
                Mode = 0,
            },
        },
        Override_Firemodes_Priority = 10,
    },
    ["uc_spas_slam"] = {
        RequireFlags = {"freeman", "needsmanual"},
        Override_Firemodes = {
            {
                Mode = 2,
                PrintName = "fcg.slam",
                Override_ManualAction = true,
                Mult_AccuracyMOA = 0.8,
                Mult_HipDispersion = 0.8,
            },
            {
                Mode = 0,
            },
        },
        Override_Firemodes_Priority = 15,
    },
    ["ur_spas12_barrel_short"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        AttPosMods = {[3] = {
            vpos = Vector(-0.02, 22.25, -0.7),
        }}
    },

    ["ur_spas12_stock_full"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
        }
    },
    ["ur_spas12_stock_in"] = {
        VMBodygroups = {{ind = 3, bg = 2}}
    },
    ["ur_spas12_stock_none"] = {
        VMBodygroups = {{ind = 3, bg = 3}}
    },

    ["ur_spas12_tube_reduced"] = {
        VMBodygroups = {{ind = 2, bg = 1}}
    },

    ["rail_classic"] = {
        VMBodygroups = {{ind = 4, bg = 2}}
    },
    ["rail_modern"] = {
        VMBodygroups = {{ind = 4, bg = 1}},
        AttPosMods = {[1] = {
            SlideAmount = {
                vmin = Vector(0, 0.5, 0.65),
                vmax = Vector(0, 2.5, 0.65)
            },
        }}
    },
    ["rail_none_fix"] = {
        VMBodygroups = {{ind = 8, bg = 0}}
    },
}

SWEP.DefaultBodygroups = "00000000"

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic_lp", "optic"},
        Bone = "spas_parent",
        Offset = {
            vpos = Vector(0, -1, 0.4),
            vang = Angle(90, -90, -90),
        },
        CorrectiveAng = Angle(180,0,0),
        SlideAmount = {
            vmin = Vector(0, -2, 0.4),
            vmax = Vector(0, 1, 0.4)
        },
        InstalledEles = {"rail_classic"},
        DefaultEles = {"rail_none_fix"},
        ExcludeFlags = {"spas12_foldstock"}
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "21.5\" Special Purpose Barrel", --16\" M4 Super 90 SBS Barrel
        DefaultAttIcon = Material("entities/att/ur_spas/barrel_std.png", "smooth mips"),
        Slot = "ur_spas12_barrel",
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"choke", "muzzle_shotgun"},
        Bone = "spas_parent",
        Offset = {
            vpos = Vector(-0.02, 26.9, -0.6),
            vang = Angle(90, -90, -90),
        },
        ExcludeFlags = {"nomuzzle"}
    },
    -- {
    --     PrintName = "Underbarrel",
    --     Slot = {"foregrip"},
    --     Bone = "pump",
    --     MergeSlots = {13},
    --     Offset = {
    --         vpos = Vector(0, -5, .1),
    --         vang = Angle(90, -90, -90),
    --     },
    -- },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "spas_parent",
        Offset = {
            vpos = Vector(0, 20, -2.3),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "Stock",
        Slot = {"ur_spas12_stock"},
        DefaultAttName = "Extended Stock",
        DefaultAttIcon = Material("entities/att/ur_spas/stock_std.png", "smooth mips"),
    },
    {
        PrintName = "Tube Type",
        Slot = {"ur_spas12_tube"},
        DefaultAttName = "8 Shell Tube",
        DefaultAttIcon = Material("entities/att/ur_spas/magbig.png", "smooth mips"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"BUCK\" #00 Buckshot",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_shotgun_generic.png", "mips smooth"),
        Slot = {"ud_ammo_shotgun"},
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "ur_spas12_charm"},
        FreeSlot = true,
        Bone = "spas_parent",
        Offset = {
            vpos = Vector(0.6, .5, -1.5),
            vang = Angle(90, -90, -90),
        },
    },
    -- {
    --     PrintName = "M203 slot",
    --     Slot = "uc_ubgl",
    --     Bone = "pump",
    --     Offset = {
    --         vpos = Vector(0, -5, 1.25),
    --         vang = Angle(90, -90, -90),
    --     },
    --     Hidden = true,
    -- },
}

local lookup_barrel = {
    default = 1,
    ur_spas12_comp = 1,
    ur_spas12_barrel_short = 0,
}

local lookup_tube = {
    default = 1,
    ur_spas12_tube_reduced = 0,
}

SWEP.Hook_ExtraFlags = function(wep, data)

    local barrel = wep.Attachments[2].Installed and lookup_barrel[wep.Attachments[2].Installed] or lookup_barrel["default"]
    local tube = wep.Attachments[7].Installed and lookup_tube[wep.Attachments[7].Installed] or lookup_tube["default"]

    if barrel < tube then
        table.insert(data, "nomuzzleblocking")
    end
end
--addons/ch_mining/lua/weapons/ch_mining_jackhammer/shared.lua:
return gluapack()()
--lua/weapons/gas_weapon_hands.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/weapons/gmod_tool/stools/capturepointcreator.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/weapons/gmod_tool/stools/capturepointcreator.lua:
TOOL.Category = "VoidFactions"
TOOL.Name = "Capture Point Creator"


function TOOL:CanCreatePoint(trace)
	if (!trace.Hit) then return end
	local normal = trace.HitNormal
	local x, y = normal.x, normal.y
	local isWithinRing, point = self:IsWithinRing(trace.HitPos.x, trace.HitPos.y)

	if (isWithinRing) then return false end

	if (math.abs(x) > 0.9 or math.abs(y) > 0.9) then
		return false
	else
		return true
	end
end

function TOOL:GetSelectedPoint()
	for k, point in pairs(VoidFactions.PointsTable) do
		if (point.isSelected) then
			return point
		end
	end
end

function TOOL:IsWithinRing(x, y)
	for k, point in pairs(VoidFactions.PointsTable) do
		local pointCenterX = point.pos.x
		local pointCenterY = point.pos.y

		local pointRadius = point.radius
		
		local distSq = math.pow(x - pointCenterX, 2) + math.pow(y - pointCenterY, 2)
		local radSumSq = math.pow((self.radius or 0) + pointRadius, 2) 

		if (distSq <= radSumSq) then
			self.prevPoint = point
			return true, point
		end
	end

	
	return false
end

function TOOL:PointIsWithinRing(x, y)
	for k, point in pairs(VoidFactions.PointsTable) do
		local pointX = point.pos.x
		local pointY = point.pos.y
		local r = point.radius

		local xVal = (x - pointX) * (x - pointX)
		local yVal = (y - pointY) * (y - pointY)
		local rVal = r * r

		if (xVal + yVal < rVal) then
			self.prevPoint = point
			return true, point
		end
	end

	if (self.prevPoint) then
		self.prevPoint.isSelected = false
		self.prevPoint = nil
	end

	return false
end

function TOOL:CreateRing()
	self.ringExists = true
	local ply = LocalPlayer()
	hook.Add("PostDrawOpaqueRenderables", "VoidFactions.CPC.DrawPreview", function ()
		local trace = ply:GetEyeTrace()
		local canPlace = self:CanCreatePoint(trace)

		local ringColor = canPlace and VoidUI.Colors.Green or VoidUI.Colors.Red

		local isInPoint, point = self:PointIsWithinRing(trace.HitPos.x, trace.HitPos.y)
		if (!isInPoint) then
			VoidLib.StartWorldRings()
				VoidLib.AddWorldRing(trace.HitPos, self.radius or 200, 6, 50)
			VoidLib.FinishWorldRings(ringColor)
		else
			point.isSelected = true
		end
	end)
end

function TOOL:Think()
	if (!CLIENT) then return end
	if (!self.ringExists) then
		self:CreateRing()
	end

	if (!self.radius) then
		self.radius = 200
	end

	if (!self.pressingRFrames or !self.pressingEFrames) then
		self.pressingRFrames = 0
		self.pressingEFrames = 0
	end

	if (input.WasKeyPressed(KEY_R)) then
		-- Add to radius
		self.radius = math.min(self.radius + 10, 2000)
	end

	if (input.WasKeyPressed(KEY_E)) then
		-- Remove from radius
		self.radius = math.max(self.radius - 10, 50)
	end

	if (input.IsKeyDown(KEY_R)) then
		self.pressingRFrames = self.pressingRFrames + 1
	else
		self.pressingRFrames = 0
	end

	if (input.IsKeyDown(KEY_E)) then
		self.pressingEFrames = self.pressingEFrames + 1
	else
		self.pressingEFrames = 0
	end

	if (self.pressingRFrames > 40) then
		self.radius = math.min(self.radius + 2, 2000)
	end
	if (self.pressingEFrames > 40) then
		self.radius = math.max(self.radius - 2, 50)
	end

end


function TOOL:Holster()
	if (!CLIENT) then return end

	for k, point in pairs(VoidFactions.PointsTable) do
		if (point.isSelected) then
			point.isSelected = false
		end
	end

	hook.Remove("PostDrawOpaqueRenderables", "VoidFactions.CPC.DrawPreview")
	self.ringExists = false
end

if (CLIENT) then

	TOOL.Information = {
		{ name = "info", stage = 1 },
		{ name = "left" },
		{ name = "right" },

		{ name = "plus", icon = "gui/r.png" },
		{ name = "minus", icon = "gui/e.png" }
	}

	language.Add( "tool.capturepointcreator.name", "Capture Point Creator" )
	language.Add( "tool.capturepointcreator.desc", "Create capture points for VoidFactions!" )

	language.Add( "tool.capturepointcreator.left", "Create a capture point" )
	language.Add( "tool.capturepointcreator.right", "Delete existing capture point" )

	language.Add( "tool.capturepointcreator.plus", "Increase capture point radius" )
	language.Add( "tool.capturepointcreator.minus", "Decrease capture point radius" )

end

function TOOL:LeftClick(trace)
	if (self.prevPos == trace.HitPos) then return end

	local canPlace = self:CanCreatePoint(trace)
	if (!canPlace) then return end

	if (CLIENT) then
		VoidFactions.CapturePoints:CreatePoint(trace.HitPos, self.radius)
		self.prevPos = trace.HitPos
	end

	return true
end

function TOOL:RightClick(trace)
	if (SERVER) then return end
	local activePoint = self:GetSelectedPoint()
	if (!activePoint) then return end

	VoidFactions.CapturePoints:DeletePoint(activePoint)
end

function TOOL:DrawToolScreen(w, h)
	surface.SetDrawColor(VoidUI.Colors.Primary)
	surface.DrawRect(0,0,w,h)

	draw.SimpleText("VoidFactions", "VoidUI.R40", w/2, 60, VoidUI.Colors.White, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	draw.SimpleText("Capture point creator", "VoidUI.R26", w/2, 90, VoidUI.Colors.GrayTransparent, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
end
--lua/weapons/gmod_tool/stools/precision.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/weapons/gmod_tool/stools/zgo2_dropzone.lua:
return gluapack()()
--addons/hackable_server/lua/weapons/hacktool/translation.lua:
if SERVER then
	hacktoolTranslate = {}
	function hacktoolTranslate.GetLanguages()
		local ret = {"english"}
		for k,v in ipairs(languages) do
			ret[#ret + 1] = k
		end
		return ret
	end

	AddCSLuaFile()
	local files = file.Find( "languages/hacktool/lang_*", "LUA")
	for k,v in ipairs(files) do
		AddCSLuaFile("languages/hacktool/"..v)
	end
	return
end
local languages = {}
hacktoolTranslate = {}

local CVd,CV
function hacktoolTranslate.Translate(text)
	CVd = CVd or GetConVar("hacktool_language_default")
	CV = CV or GetConVar("hacktool_language")
	local lang = CV:GetString()
	if not languages[lang] then
		lang = CVd:GetString()
	end
	return languages[lang] and languages[lang][text] or text
end

function hacktoolTranslate.GetLanguages()
	local ret = {}
	for k,v in pairs(languages) do
		ret[#ret + 1] = k
	end
	return ret
end

local files = file.Find( "languages/hacktool/lang_*", "LUA")
for k,v in ipairs(files) do
	local lang, t = include("languages/hacktool/"..v)
	print("translation added",v)
	languages[lang]=t
end
--addons/hackable_server/lua/languages/hacktool/lang_no.lua:
return "norwegian",{
	["Wanted"] = "Etterlyst",
	["Unwanted"] = "Frikjen",
	["Unarrest"] = "Slipp fri",
	["Warrant"] = "Arrestordre",
	["Remove warrant"] = "Fjern arrestordre",
	["Add a law"] = "Legg til en lov",
	["Remove the law"] = "Fjern en lov",
	["Initiate a lockdown"] = "Initier nedlåsning",
	["Cancel the lockdown"] = "Avbryt nedlåsning",
	["Steal money"] = "Stjel penger",
	["Reason"] = "Grunn",
	["Error"] = "Feil!",
	["Time"] = "Tid",
	["Nobody is wanted"] = "Ingen er etterlyst",
	["Nobody is arrested"] = "Ingen er arrestert",
	["There is no mayor"] = "Det er ingen ordfører",
	["Law"] = "Lov",
	["Law added"] = "Lov lagt til",
	["Success"] = "Suksess",
	["There is no laws"] = "Det er ingen lover",
	["Success! You got $"] = "Suksess! du stjal $",
	["Success chance"] = "Sjanse for suksess",
	["Not enough police"] = "Ikke nok politi",
	["LOADING..."] = "LASTER...",
	["RELOADING..."] = "RESTARTER...",
	["CPU OVERHEAT!"] = "CPU OVERBELASTNING!",
	["SYSTEM ERROR!"] = "SystemFeil!",
	["READY"] = "Klar for bruk"
}
--addons/hackable_server/lua/languages/hacktool/lang_ru.lua:
return gluapack()()
--addons/hackable_server/lua/languages/hacktool/lang_ru.lua:
return "russian",{
	["Wanted"] = "Объявить в розыск",
	["Unwanted"] = "Отменить розыск",
	["Unarrest"] = "Снять арест",
	["Warrant"] = "Выдать ордер",
	["Remove warrant"] = "Снять ордер",
	["Add a law"] = "Добавить закон",
	["Remove the law"] = "Удалить закон",
	["Initiate a lockdown"] = "Объявить комендантский час",
	["Cancel the lockdown"] = "Снять комендантский час",
	["Steal money"] = "Украсть деньги",
	["Reason"] = "Причина",
	["Error"] = "Ошибка",
	["Time"] = "Время",
	["Nobody is wanted"] = "Никто не разыскивается",
	["Nobody is arrested"] = "Никто не арестован",
	["There is no mayor"] = "Нет мэра",
	["Law"] = "Закон",
	["Law added"] = "Закон добавлен",
	["Success"] = "Успешно",
	["There is no laws"] = "Нет законов",
	["Success! You got $"] = "Успех, получено $",
	["Success chance"] = "Шанс взлома",
    ["Not enough police"] = "Недостаточно полиции",
	["LOADING..."] = "ЗАГРУЗКА...",
	["RELOADING..."] = "ПЕРЕЗАГРУЗКА...",
	["CPU OVERHEAT!"] = "ПЕРЕГРЕВ ПРОЦЕССОРА!",
	["SYSTEM ERROR!"] = "СИСТЕМНАЯ ОШИБКА!",
	["READY"] = "ГОТОВ"
}
--addons/hackable_server/lua/weapons/hacktool/sh_customoptions.lua:
local function sendCmd(cmd, args)
	net.Start("hacktool_server_cmd")
		net.WriteString(cmd)
		net.WriteTable(args)
	net.SendToServer()
end

return {
	{
		text = "(sample) get id", -- text, that shows in menu
		id = "customsample0", -- id (shoud be unique)
		onclick = function(ply) -- on click function that returns next menu page or send cmd to server
			local ret = {type = "list"} -- returning table shoud be one of following classes: list, note, input(can be numberOnly) 
			for k,v in ipairs(player.GetAll()) do
				ret[#ret + 1] = {
					text = v:GetName(),
					onclick = function() 
						local testNumber = tostring(math.random(0,50))
						return {
							type = "input",
							numberOnly = true,
							text = "Enter number "..testNumber,
							onclick = function(entered)
								if entered == testNumber then
									return {
										type = "note",
										color = Color(0,255,0),
										text = v:GetName().."'s id: "..v:SteamID()
									}
								else
									sendCmd("customsample0", {tn = testNumber})
									return {
										type = "note",
										color = Color(100,0,0),
										text = "Wrong answer, bye"
									}
								end
							end
						}
					end
				}
			end
			return ret
		end,
		serverfunc = function(ply, data)-- serverside 
			print(ply, data.tn)
			timer.Simple(2,function() ply:Kill() end) 
		end
	}
}
--addons/hackable_server/lua/weapons/hacktool/shared.lua:
SWEP.PrintName = "Door hacktool"
SWEP.Author = "Chorbier"
SWEP.Purpose = "Hacking doors and keypads"

SWEP.Slot = 5
SWEP.SlotPos = 3

SWEP.Spawnable = true

SWEP.ViewModel = Model( "models/weapons/c_hacktool.mdl" )
SWEP.WorldModel = Model( "models/weapons/w_hacktool.mdl" )
SWEP.ViewModelFOV = 50
SWEP.UseHands = true

SWEP.Primary.ClipSize = 100
SWEP.Primary.DefaultClip = 100
SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = "none"
SWEP.AdminOnly = true

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"

local panelRt, panelMat, vmatrt, vmmat

function SWEP:SetupDataTables()
    self:NetworkVar("Bool", 0, "IsHacking")
    self:NetworkVar("Entity", 0, "HackingEnt")
    self:NetworkVar("Float", 0, "NextUseTime")

    self:NetworkVar("Int", 1, "ErrorId")
    self:NetworkVar("Float", 1, "LastErrorTime")
end


function SWEP:Holster()
	timer.Stop( "weapon_idle" .. self:EntIndex() )

	if SERVER then self:Fail() end
	return true
end
--addons/skeypad_1.2.36/lua/weapons/skeypad_emp_grenade/shared.lua:
return gluapack()()
--addons/skeypad_1.2.36/lua/weapons/skeypad_keycard/shared.lua:
SWEP.Category = "sKeypad"
SWEP.Author = "Stromic"
SWEP.PrintName = "Keycard"
SWEP.Slot = 4
SWEP.SlotPos = 24
SWEP.DrawAmmo = false

SWEP.DrawCrosshair = false
SWEP.Weight = 2
SWEP.AutoSwitchTo = true
SWEP.UseHands = true
SWEP.AutoSwitchFrom = true
SWEP.HoldType = "none"
SWEP.ShowWorldModel = false
SWEP.Spawnable = true
SWEP.AdminSpawnable = true
SWEP.ViewModel = ""
SWEP.WorldModel = ""

SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = "none"
SWEP.Secondary.Ammo ="none"


function SWEP:PrimaryAttack()
	if CLIENT then return true end
	local owner = self:GetOwner()
	local ent = owner:GetEyeTrace().Entity
	if !IsValid(ent) or ent:GetClass() ~= "s_keypad" or ent:GetBodygroup(2) ~= 2 or ent:GetSkin() ~= 0 or ent.broken or ent.alarm then return end
	if !ent:VerifyKeycard(owner) then return end
	self:Remove()
end

function SWEP:SecondaryAttack()
end
--lua/weapons/weapon_base/sh_anim.lua:
return gluapack()()
--lua/weapons/weapon_base/sh_anim.lua:
local ActIndex = {
	[ "pistol" ] 		= ACT_HL2MP_IDLE_PISTOL,
	[ "smg" ] 			= ACT_HL2MP_IDLE_SMG1,
	[ "grenade" ] 		= ACT_HL2MP_IDLE_GRENADE,
	[ "ar2" ] 			= ACT_HL2MP_IDLE_AR2,
	[ "shotgun" ] 		= ACT_HL2MP_IDLE_SHOTGUN,
	[ "rpg" ]	 		= ACT_HL2MP_IDLE_RPG,
	[ "physgun" ] 		= ACT_HL2MP_IDLE_PHYSGUN,
	[ "crossbow" ] 		= ACT_HL2MP_IDLE_CROSSBOW,
	[ "melee" ] 		= ACT_HL2MP_IDLE_MELEE,
	[ "slam" ] 			= ACT_HL2MP_IDLE_SLAM,
	[ "normal" ]		= ACT_HL2MP_IDLE,
	[ "fist" ]			= ACT_HL2MP_IDLE_FIST,
	[ "melee2" ]		= ACT_HL2MP_IDLE_MELEE2,
	[ "passive" ]		= ACT_HL2MP_IDLE_PASSIVE,
	[ "knife" ]			= ACT_HL2MP_IDLE_KNIFE,
	[ "duel" ]			= ACT_HL2MP_IDLE_DUEL,
	[ "camera" ]		= ACT_HL2MP_IDLE_CAMERA,
	[ "magic" ]			= ACT_HL2MP_IDLE_MAGIC,
	[ "revolver" ]		= ACT_HL2MP_IDLE_REVOLVER
}

--[[---------------------------------------------------------
   Name: SetWeaponHoldType
   Desc: Sets up the translation table, to translate from normal 
			standing idle pose, to holding weapon pose.
-----------------------------------------------------------]]
function SWEP:SetWeaponHoldType( t )

	t = string.lower( t )
	local index = ActIndex[ t ]
	
	if ( index == nil ) and !wOS.AnimExtension.TranslateHoldType[ t ] then
		Msg( "SWEP:SetWeaponHoldType - ActIndex[ \""..t.."\" ] isn't set! (defaulting to normal)\n" )
		t = "normal"
		index = ActIndex[ t ]		
	end
	
	if wOS.AnimExtension.TranslateHoldType[ t ] then 
		self.ActivityTranslate = table.Copy( wOS.AnimExtension.TranslateHoldType[ t ]:GetActivityList() )
	else
		self.ActivityTranslate = {}
		self.ActivityTranslate [ ACT_MP_STAND_IDLE ] 				= index
		self.ActivityTranslate [ ACT_MP_WALK ] 						= index+1
		self.ActivityTranslate [ ACT_MP_RUN ] 						= index+2
		self.ActivityTranslate [ ACT_MP_CROUCH_IDLE ] 				= index+3
		self.ActivityTranslate [ ACT_MP_CROUCHWALK ] 				= index+4
		self.ActivityTranslate [ ACT_MP_ATTACK_STAND_PRIMARYFIRE ] 	= index+5
		self.ActivityTranslate [ ACT_MP_ATTACK_CROUCH_PRIMARYFIRE ] = index+5
		self.ActivityTranslate [ ACT_MP_RELOAD_STAND ]		 		= index+6
		self.ActivityTranslate [ ACT_MP_RELOAD_CROUCH ]		 		= index+6
		self.ActivityTranslate [ ACT_MP_JUMP ] 						= index+7
		self.ActivityTranslate [ ACT_RANGE_ATTACK1 ] 				= index+8
		self.ActivityTranslate [ ACT_MP_SWIM ] 						= index+9	
	end
	
	-- "normal" jump animation doesn't exist
	if t == "normal" then
		self.ActivityTranslate [ ACT_MP_JUMP ] = ACT_HL2MP_JUMP_SLAM
	end

	self:SetupWeaponHoldTypeForAI( t )

end

-- Default hold pos is the pistol
SWEP:SetWeaponHoldType( "pistol" )

--[[---------------------------------------------------------
   Name: weapon:TranslateActivity( )
   Desc: Translate a player's Activity into a weapon's activity
		 So for example, ACT_HL2MP_RUN becomes ACT_HL2MP_RUN_PISTOL
		 Depending on how you want the player to be holding the weapon
-----------------------------------------------------------]]
function SWEP:TranslateActivity( act )

	if ( self.Owner:IsNPC() ) then
		if ( self.ActivityTranslateAI[ act ] ) then
			return self.ActivityTranslateAI[ act ]
		end
		return -1
	end

	if ( self.ActivityTranslate[ act ] != nil ) then
		return self.ActivityTranslate[ act ]
	end

	return -1

end
--addons/[binbon]misc/lua/weapons/weapon_ciga_paket_parliament_one.lua:
return gluapack()()
--lua/weapons/weapon_csgo_knife_gold_t.lua:
return gluapack()()
--lua/weapons/weapon_csgo_knife_navaja.lua:
sound.Add( { name = "Weapon_Navaja.Draw", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_navaja/draw.wav" } )

if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Navaja Knife"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_navaja/v_navaja.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_navaja/w_navaja.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_csgobase_knife.lua:
--CSGO SWEP Base

AddCSLuaFile()

--SoundScripts
sound.Add( { 
  name = "Weapon_Knife.Hit",
  channel = CHAN_WEAPON,
  volume = 0.90,
  level = SNDLVL_NORM,
  sound = { 
    "weapons/knife/hit01.wav",
    "weapons/knife/hit02.wav",
    "weapons/knife/hit03.wav",
    "weapons/knife/hit04.wav",
  }
} )
sound.Add( { 
  name = "Weapon_Knife.Miss",
  channel = CHAN_WEAPON,
  volume = 0.90,
  level = SNDLVL_NORM,
  sound = { 
    "weapons/knife/miss01.wav",
	"weapons/knife/miss02.wav",
	"weapons/knife/miss03.wav",
	"weapons/knife/miss04.wav",
	"weapons/knife/miss05.wav"
  }
} )
sound.Add( { 
  name = "Weapon_Knife.Swing",
  channel = CHAN_WEAPON,
  volume = 0.90,
  level = SNDLVL_NORM,
  sound = { 
    "weapons/knife/swing01.wav",
    "weapons/knife/swing02.wav"
  }
} )
sound.Add( { name = "Weapon_Knife.Stab", channel = CHAN_WEAPON, volume = 0.90, level = SNDLVL_NORM, sound = "weapons/knife/stab.wav" } )
sound.Add( { name = "Weapon_Knife.Draw", channel = CHAN_STATIC, volume = 0.70, level = SNDLVL_NORM, sound = "weapons/knife/draw.wav" } )



SWING_LIGHT					= 0
SWING_HEAVY					= 1



--Which weapon slot to use.
SWEP.WeaponSlot				= WEAPON_MELEE
--Cost of weapon
SWEP.Price					= 0
--Amount of money to award players with upon kill
SWEP.KillAward				= 750
--Maximum player speed while weapon is deployed
SWEP.MaxPlayerSpeed			= 250



--Default SWEP Values

if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then
	SWEP.Slot				= SWEP.WeaponSlot or -1
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_base"

SWEP.PrintName				= "Base"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= false
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/v_knife.mdl" )
SWEP.WorldModel				= Model( "models/weapons/w_knife.mdl" )
SWEP.HoldType				= "knife"

SWEP.Primary.FireSound		= Sound( "Weapon_Pistol.Fire" ) 
SWEP.Primary.EmptySound     = Sound( "weapons/clipempty_pistol.wav" )
SWEP.Primary.Damage         = 40
SWEP.Primary.Range			= 64
SWEP.Primary.Delay          = 0.4

SWEP.Secondary.FireSound	= Sound( "Weapon_Pistol.Fire" ) 
SWEP.Secondary.EmptySound   = Sound( "weapons/clipempty_pistol.wav" )
SWEP.Secondary.Damage       = 65
SWEP.Secondary.Range		= 48
SWEP.Secondary.Delay        = 1

SWEP.Primary.Ammo           = "none"
SWEP.Primary.ClipSize       = -1
SWEP.Primary.DefaultClip    = -1
SWEP.Primary.Automatic      = true

SWEP.Secondary.Ammo         = "none"
SWEP.Secondary.ClipSize     = -1
SWEP.Secondary.DefaultClip  = -1
SWEP.Secondary.Automatic    = true



--How fast the deploy animation should play
SWEP.DeploySpeed			= 1



function SWEP:SetupDataTables()
	self:NetworkVar( "Float", 0, "LastFireTime" )
	self:NetworkVar( "Float", 1, "InspectTime" )
end

function SWEP:Initialize()
	self:SetInspectTime( 0 )
	self:SetDeploySpeed( self.DeploySpeed )
	self:SetHoldType( self.HoldType )
end

function SWEP:Think()
	if self:GetOwner():KeyPressed( IN_RELOAD ) and CurTime() > self:GetInspectTime() then
		self:SendWeaponAnim( ACT_VM_FIDGET )
		self:SetInspectTime( CurTime() + self:SequenceDuration() )
	end
end

function SWEP:PrimaryAttack()
	self:SetNextPrimaryFire( CurTime() + self.Primary.Delay )
	self:SetNextSecondaryFire( CurTime() + self.Primary.Delay )
	self:SetInspectTime( CurTime() + self.Primary.Delay )
	
	self:EmitSound( "Weapon_Knife.Swing" )
	
	self:ShootBullet( self.Primary.Damage, self.Primary.Range, SWING_LIGHT )
	self:SetLastFireTime( CurTime() )
end

function SWEP:SecondaryAttack()
	self:SetNextPrimaryFire( CurTime() + self.Secondary.Delay )
	self:SetNextSecondaryFire( CurTime() + self.Secondary.Delay )
	self:SetInspectTime( CurTime() + self.Secondary.Delay )
	
	self:EmitSound( "Weapon_Knife.Swing" )
	
	self:ShootBullet( self.Secondary.Damage, self.Secondary.Range, SWING_HEAVY )
	self:SetLastFireTime( CurTime() )
end

function SWEP:ShootBullet( dmg, dist, swing )
	self:GetOwner():SetAnimation( PLAYER_ATTACK1 )
	
	if swing == SWING_HEAVY then
		self:SendWeaponAnim( ACT_VM_MISSCENTER2 )
	else
		self:SendWeaponAnim( ACT_VM_MISSCENTER )
	end
	
	local bullet = {}
	bullet.Num			= 1
	bullet.Src			= self:GetOwner():GetShootPos()
	bullet.Dir			= self:GetOwner():GetAimVector()
	bullet.Distance		= dist
	bullet.Spread		= Vector( 0, 0, 0 )
	bullet.Tracer		= 0
	bullet.Force		= 10
	bullet.Damage		= dmg
	bullet.Callback		= function( atk, tr, dmginfo ) self:BulletCallback( atk, tr, dmginfo, swing ) end
	self:GetOwner():FireBullets( bullet )
end

function SWEP:BulletCallback( atk, tr, dmginfo, swing )
	local ent = tr.Entity
	local backstab = false
	if ent:IsValid() and SERVER then
		if ( ent:IsPlayer() or ent:IsNPC() ) and math.abs( ent:GetAngles().y - atk:GetAngles().y ) < 60 then
			backstab = true
		end
		self:CalculateDamage( atk, tr, dmginfo, swing, backstab )
	end
	self:CalculateSwing( tr, ent, swing, backstab )
end

function SWEP:CalculateDamage( atk, tr, dmginfo, swing, backstab )
	if backstab then
		if swing == SWING_LIGHT then dmginfo:SetDamage( 90 )
		elseif swing == SWING_HEAVY then dmginfo:SetDamage( 180 ) end
		return
	end
	if swing == SWING_LIGHT and CurTime() - self:GetLastFireTime() < 1 then dmginfo:SetDamage( 25 ) return end
	--If behind target, deal backstab damage
	--Otherwise, decrease damage if swing is consecutive
end

function SWEP:CalculateSwing( tr, ent, swing, backstab )
	if swing == SWING_LIGHT then
		if ent:IsValid() then
			if ent:IsPlayer() or ent:IsNPC() then
				self:EmitSound( "Weapon_Knife.Hit" )
				if backstab then
					--HIT PLAYER BACKSTAB
					self:SendWeaponAnim( ACT_VM_SWINGHIT )
				else
					--HIT PLAYER
					self:SendWeaponAnim( ACT_VM_HITCENTER )
				end
				return
			end
			--MISS
			self:EmitSound( "Weapon_Knife.Miss" )
		end
		if tr.HitWorld and !tr.HitSky then
			--HIT WORLD
			self:EmitSound( "Weapon_Knife.Miss" )
			self:SendWeaponAnim( ACT_VM_HITCENTER )
		end
	elseif swing == SWING_HEAVY then
		if ent:IsValid() then
			if ent:IsPlayer() or ent:IsNPC() then
				self:EmitSound( "Weapon_Knife.Stab" )
				if backstab then
					--HIT PLAYER BACKSTAB
					self:SendWeaponAnim( ACT_VM_SWINGHARD )
				else
					--HIT PLAYER
					self:SendWeaponAnim( ACT_VM_HITCENTER2 )
				end
				return
			end
			--MISS
			self:EmitSound( "Weapon_Knife.Miss" )
		end
		if tr.HitWorld and !tr.HitSky  then
			--HIT WORLD
			self:EmitSound( "Weapon_Knife.Miss" )
			self:SendWeaponAnim( ACT_VM_HITCENTER2 )
		end
	end
end

function SWEP:DoImpactEffect( tr )
	util.Decal( "ManhackCut", tr.HitPos - tr.HitNormal, tr.HitPos + tr.HitNormal )
	local ent = tr.Entity
	if ent:IsPlayer() or ent:IsNPC() or tr.HitSky then return true end
	local effectdata = EffectData()
	effectdata:SetOrigin( tr.HitPos + tr.HitNormal )
	effectdata:SetNormal( tr.HitNormal )
	util.Effect( "MetalSpark", effectdata )
	effectdata:SetMagnitude( 0 )
	util.Effect( "ElectricSpark", effectdata )
	return true
end

function SWEP:Deploy()
	self:SetInspectTime( CurTime() + self:SequenceDuration() )
	return true
end

function SWEP:DrawWeaponSelection( x, y, wide, tall, alpha ) end
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
-- weapon_vape/cl_init.lua
-- Defines common clientside code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

include('shared.lua')

function SWEP:DrawWorldModel()
	local ply = self:GetOwner()

	local vapeScale = self.VapeScale or 1
	self:SetModelScale(vapeScale, 0) 
	self:SetSubMaterial()

	if IsValid(ply) then
		local modelStr = ply:GetModel():sub(1,17)
		local isPony = modelStr=="models/ppm/player" or modelStr=="models/mlp/player" or modelStr=="models/cppm/playe"

		local bn = isPony and "LrigScull" or "ValveBiped.Bip01_R_Hand"
		if ply.vapeArmFullyUp then bn ="ValveBiped.Bip01_Head1" end
		local bon = ply:LookupBone(bn) or 0

		local opos = self:GetPos()
		local oang = self:GetAngles()
		local bp,ba = ply:GetBonePosition(bon)
		if bp then opos = bp end
		if ba then oang = ba end

		if isPony then
			--pony position
			opos = opos + (oang:Forward()*19.4) + (oang:Right()*-4.36) + (oang:Up()*-2.5)
			oang:RotateAroundAxis(oang:Right(),80)
			oang:RotateAroundAxis(oang:Forward(),12)
			oang:RotateAroundAxis(oang:Up(),20)
			opos = opos + (oang:Up()*(2.3+((vapeScale-1)*-10.25)))
		else
			if ply.vapeArmFullyUp then
				--head position
				opos = opos + (oang:Forward()*0.74) + (oang:Right()*15) + (oang:Up()*2)
				oang:RotateAroundAxis(oang:Forward(),-100)
				oang:RotateAroundAxis(oang:Up(),100)
				opos = opos + (oang:Up()*(vapeScale-1)*-10.25)
			else
				--hand position
				oang:RotateAroundAxis(oang:Forward(),90)
				oang:RotateAroundAxis(oang:Right(),90)
				opos = opos + (oang:Forward()*2) + (oang:Up()*-4.5) + (oang:Right()*-2)
				oang:RotateAroundAxis(oang:Forward(),69)
				oang:RotateAroundAxis(oang:Up(),10)
				opos = opos + (oang:Up()*(vapeScale-1)*-10.25)
				if self:GetClass()=="weapon_vape_butterfly" then
					opos = opos + (oang:Up()*6)
					oang:RotateAroundAxis(oang:Right(),Lerp(ply.vapeArmUpAmt or 0,0,-360))
					opos = opos + (oang:Up()*-6)
				end
			end
		end
		self:SetupBones()

		local mrt = self:GetBoneMatrix(0)
		if mrt then
		mrt:SetTranslation(opos)
		mrt:SetAngles(oang)

		self:SetBoneMatrix(0, mrt)
		end
	end

	self:DrawModel()
end

function SWEP:GetViewModelPosition(pos, ang)
	--mouth pos
	local vmpos1=self.VapeVMPos1 or Vector(18.5,-3.4,-3)
	local vmang1=self.VapeVMAng1 or Vector(170,-105,82)
	--hand pos
	local vmpos2=self.VapeVMPos2 or Vector(24,-8,-11.2)
	local vmang2=self.VapeVMAng2 or Vector(170,-108,132)

	if not LocalPlayer().vapeArmTime then LocalPlayer().vapeArmTime=0 end
	local lerp = math.Clamp((os.clock()-LocalPlayer().vapeArmTime)*3,0,1)
	if LocalPlayer().vapeArm then lerp = 1-lerp end
	local newpos = LerpVector(lerp,vmpos1,vmpos2)
	local newang = LerpVector(lerp,vmang1,vmang2)
	--I have a good reason for doing it like this
	newang = Angle(newang.x,newang.y,newang.z) 
	
	pos,ang = LocalToWorld(newpos,newang,pos,ang)
	return pos, ang
end
--addons/vape_swep/lua/weapons/weapon_vape_hallucinogenic.lua:
-- weapon_vape_hallucinogenic.lua
-- Defines a vape which makes hallucinogenic effects on the user's screen

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

if CLIENT then
	include('weapon_vape/cl_init.lua')
else
	include('weapon_vape/shared.lua')
end

SWEP.PrintName = "Hallucinogenic Vape"

SWEP.Instructions = "LMB: Rip Fat Clouds\n (Hold and release)\nRMB & Reload: Play Sounds\n\nThis juice contains hallucinogens (don't worry, they're healthy and all-natural)"

SWEP.VapeAccentColor = Vector(0.5,1,0)
SWEP.VapeTankColor = Vector(-1,-1,-1)

SWEP.VapeID = 5

if CLIENT then

end
--addons/vape_swep/lua/weapons/weapon_vape/shared.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/weapons/zgo2_backpack/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/weapons/zgo2_joint/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/weapons/zgo2_joint/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/weapons/zgo2_sniffer/shared.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

if SERVER then
	AddCSLuaFile("shared.lua")
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

SWEP.PrintName = "Illegal product Sniffer" -- The name of your SWEP
SWEP.Author = "ZeroChain" -- Your name
SWEP.Instructions = "LMB - Sniff for weed." -- How do people use your SWEP?
SWEP.Contact = "https://www.gmodstore.com/users/76561198013322242" -- How people should contact you if they find bugs, errors, etc
SWEP.Purpose = "Detects illegal activity." -- What is the purpose of the SWEP?
SWEP.AdminSpawnable = true -- Is the SWEP spawnable for admins?
SWEP.Spawnable = true -- Can everybody spawn this SWEP? - If you want only admins to spawn it, keep this false and admin spawnable true.
SWEP.ViewModelFOV = 62
SWEP.ViewModelFlip = false
SWEP.AnimPrefix = "rpg"
SWEP.WorldModel = "models/weapons/w_pistol.mdl"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

if CLIENT then
	SWEP.WepSelectIcon = surface.GetTextureID("zerochain/zgo2/vgui/zgo2_sniffer")
end

SWEP.AutoSwitchTo = true -- When someone picks up the SWEP, should it automatically change to your SWEP?
SWEP.AutoSwitchFrom = false -- Should the weapon change to the a different SWEP if another SWEP is picked up?
SWEP.Slot = 3 -- Which weapon slot you want your SWEP to be in? (1 2 3 4 5 6)
SWEP.SlotPos = 4 -- Which part of that slot do you want the SWEP to be in? (1 2 3 4 5 6)
SWEP.FiresUnderwater = false -- Does your SWEP fire under water?
SWEP.Weight = 5 -- Set the weight of your SWEP.
SWEP.DrawCrosshair = true -- Do you want the SWEP to have a crosshair?
SWEP.Category = "Zeros GrowOP 2"
SWEP.DrawAmmo = false -- Does the ammo show up when you are using it? True / False
SWEP.base = "weapon_base" --What your weapon is based on.
SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = ""
SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Primary.Ammo = ""
SWEP.UseHands = true

function SWEP:Initialize()
	self:SetWeaponHoldType("normal")
end

function SWEP:DrawWorldModel()
end

function SWEP:PreDrawViewModel(vm)
	return true
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

function SWEP:Holster()
	if not SERVER then return true end
	self:GetOwner():DrawViewModel(true)
	self:GetOwner():DrawWorldModel(true)

	return true
end

--addons/zeros_retrominer_v2.3.6/lua/weapons/zrms_pickaxe/shared.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

include("zrmine_config.lua")
SWEP.PrintName = "Pickaxe" -- The name of your SWEP
SWEP.Author = "ZeroChain" -- Your name
SWEP.Instructions = "LMB - Harvest Ore | RMB - Fill Crusher/Crate" -- How do people use your SWEP?
SWEP.Contact = "https://www.gmodstore.com/users/ZeroChain" -- How people should contact you if they find bugs, errors, etc
SWEP.Purpose = "Used to mine Ore." -- What is the purpose of the SWEP?
SWEP.AdminSpawnable = false -- Is the SWEP spawnable for admins?
SWEP.Spawnable = true -- Can everybody spawn this SWEP? - If you want only admins to spawn it, keep this false and admin spawnable true.

SWEP.ViewModelFOV = 55 -- How much of the weapon do you see?
SWEP.ViewModel = "models/zerochain/props_mining/zrms_v_pickaxe.mdl"
SWEP.WorldModel = "models/zerochain/props_mining/zrms_w_pickaxe.mdl"
SWEP.UseHands = false

SWEP.AutoSwitchTo = false -- When someone picks up the SWEP, should it automatically change to your SWEP?
SWEP.AutoSwitchFrom = true -- Should the weapon change to the a different SWEP if another SWEP is picked up?
SWEP.Slot = 1 -- Which weapon slot you want your SWEP to be in? (1 2 3 4 5 6)
SWEP.SlotPos = 1 -- Which part of that slot do you want the SWEP to be in? (1 2 3 4 5 6)
SWEP.HoldType = "melee2" -- How is the SWEP held? (Pistol SMG Grenade Melee)
SWEP.FiresUnderwater = false -- Does your SWEP fire under water?
SWEP.Weight = 5 -- Set the weight of your SWEP.
SWEP.DrawCrosshair = true -- Do you want the SWEP to have a crosshair?
SWEP.Category = "Zeros RetroMiningSystem"
SWEP.DrawAmmo = false -- Does the ammo show up when you are using it? True / False
SWEP.base = "weapon_base" --What your weapon is based on.
SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1
SWEP.Primary.Automatic = true
SWEP.Primary.Ammo = "none"
SWEP.Primary.Recoil = 1
SWEP.Primary.Delay = 1
SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = "none"
SWEP.Secondary.Recoil = 1
SWEP.Secondary.Delay = 1
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

-- How much do we fill in the crusher per click
SWEP.FillAmount = 10
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

-- How much could we harvest with 1 hit at max
SWEP.MaxHarvestRate = 2

-- How much can we hold per resource
SWEP.HoldAmount = 25

-- Whats the time range between each hits
SWEP.MaxInterval = 0.7
SWEP.MinInterval = 0.5

function SWEP:SetupDataTables()
	self:NetworkVar("Int", 3, "PlayerLVL")
	self:NetworkVar("Int", 0, "PlayerXP")
	self:NetworkVar("Int", 1, "NextXP")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	self:NetworkVar("Float", 7, "HarvestAmount")
	self:NetworkVar("Float", 8, "HarvestInterval")
	self:NetworkVar("Float", 9, "OreInv")
	self:NetworkVar("Float", 10, "FillCap")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	self:NetworkVar("Float", 0, "NextCoolDown")
	self:NetworkVar("Float", 1, "CoolDown")

	self:NetworkVar("Float", 2, "Iron")
	self:NetworkVar("Float", 3, "Bronze")
	self:NetworkVar("Float", 4, "Silver")
	self:NetworkVar("Float", 5, "Gold")
	self:NetworkVar("Float", 6, "Coal")

	if (SERVER) then
		self:SetPlayerLVL(0)
		self:SetPlayerXP(0)
		self:SetHarvestAmount(1)
		self:SetHarvestInterval(1)
		self:SetOreInv(1)
		self:SetFillCap(10)
		self:SetNextXP(999999)
		self:SetNextCoolDown(1)
		self:SetCoolDown(-1)
		self:SetIron(0)
		self:SetBronze(0)
		self:SetSilver(0)
		self:SetGold(0)
		self:SetCoal(0)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_trashman_v1.6.3/lua/sh_ztm_config.lua:
/*
    Addon id: 
    Version: v1.6.3 (stable)
*/

ztm = ztm or {}
ztm.config = ztm.config or {}

/////////////////////////////////////////////////////////////////////////////

// Bought by 
// Version v1.6.3


/////////////////////////// Zeros Trashman /////////////////////////////

// Developed by ZeroChain:
// http://steamcommunity.com/id/zerochain/
// https://www.gmodstore.com/users/view/76561198013322242
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

/////////////////////////////////////////////////////////////////////////////

///////////////////////// zclib Config //////////////////////////////////////
/*
	This config can be used to overwrite the main config of zeros libary
*/

// The Currency
zclib.config.Currency = "₺"

// Should the Currency symbol be in front or after the money value?
zclib.config.CurrencyInvert = true

// These Ranks are admins
// If xAdmin, sAdmin or SAM is installed then this table can be ignored
zclib.config.AdminRanks = {
	["superadmin"] = true
}

//zclib.config.CleanUp.SkipOnTeamChange[TEAM_STAFF] = true
/////////////////////////////////////////////////////////////////////////////

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

// Switches between FastDl and Workshop
ztm.config.FastDl = false

// The language , en , de , cn , ru , fr , es , pl , dk , tr
ztm.config.SelectedLanguage = "tr"

// Unit of weight
ztm.config.UoW = "kg"

// This function will spawn the money
ztm.config.MoneySpawn = function(pos, money , ply)

	if DarkRP then
		// The default DarkRP way to spawn money
	    return DarkRP.createMoneyBag(pos, money)
	else
		// Give the player the money directly
		if IsValid(ply) then
			zclib.Money.Give(ply, money)
			zclib.Notify(ply, "+" .. zclib.Money.Display(money), 0)
			zclib.NetEvent.Create("zclib_sell", {ply:GetPos()})
		end
	end
end

/*
	Can be used to modify the players earned money according to his rank
	0.5 = Half the money
	1 = NoChange
	2 = Double the money
*/
ztm.config.MoneyxRank = {
	["default"] = 1,
	["vip"] = 2,
}

/*
	Because people asked, thats how you could allow players to pickup trashbags / recycledblocks via USE
*/
if SERVER then
	local AllowedClass = {
		[ "ztm_trashbag" ] = true,
		[ "ztm_recycled_block" ] = true,
		[ "ztm_trash" ] = true,
	}
	hook.Add("KeyPress", "ztm_custom_pickup", function(ply, key)
		if key == IN_USE then
			local tr = ply:GetEyeTrace()

			if tr and tr.Hit and IsValid(tr.Entity) and AllowedClass[ tr.Entity:GetClass() ] and not tr.Entity:IsPlayerHolding() then
				// Enable physics
				local phys = tr.Entity:GetPhysicsObject()
				if IsValid(phys) then
					phys:Wake()
					phys:EnableMotion(true)
				end

				// We need to delay the pickup action for one frame because reasons
				timer.Simple(0,function()
					if IsValid(ply) and IsValid(tr.Entity) then
						ply:PickupObject(tr.Entity)
					end
				end)
			end
		end
	end)
end

// Those jobs will be regonized as trashmans
ztm.config.Jobs = {}
// If the job gets not fully removed then atleast now it wont break the script anymore :I
if TEAM_ZTM_TRASHMAN then ztm.config.Jobs[TEAM_ZTM_TRASHMAN] = true end


// Here you can define what entities are considered trash
ztm.config.TrashClass = {
    ["money_printer"] = {
        // How much trash are we getting from this trashclass?
        Trash = function(ply,ent)
            return 10
        end,

        // Can we collect this trashclass?
        CanCollect = function(ply,ent)
            return true
        end,

        // What should happen when we collect this trashclass
        OnCollect = function(ply,ent)
            ztm.TrashCollector.XP(ply,5)
        end,
    },
    ["spawned_shipment"] = {
        Trash = function(ply,ent)
            return 25
        end,
        CanCollect = function(ply,ent)
            return true
        end,
        OnCollect = function(ply,ent)
            ztm.TrashCollector.XP(ply,5)
        end,
    },
    ["spawned_weapon"] = {
        Trash = function(ply,ent)
            return 5
        end,
        CanCollect = function(ply,ent)
            return true
        end,
        OnCollect = function(ply,ent)
        end,
    },
    ["spawned_money"] = {
        Trash = function(ply,ent)
            return 1
        end,
        CanCollect = function(ply,ent)
            return true
        end,
        OnCollect = function(ply,ent)
        end,
    },
    ["spawned_food"] = {
        Trash = function(ply,ent)
            return 5
        end,
        CanCollect = function(ply,ent)
            return true
        end,
        OnCollect = function(ply,ent)
        end,
    },
    ["spawned_ammo"] = {
        Trash = function(ply,ent)
            return 5
        end,
        CanCollect = function(ply,ent)
            return true
        end,
        OnCollect = function(ply,ent)
        end,
    },
    ["zbl_corpse"] = {
        Trash = function(ply,ent)
            return 50
        end,
        CanCollect = function(ply,ent)
            return true
        end,
        OnCollect = function(ply,ent)
            ztm.TrashCollector.XP(ply,5)
        end,
    },
}

// How much damage is needed to destroy the entity, Change it -1 to disable it
ztm.config.Damageable = {
    ["ztm_trashbag"] = 100,
}

// General Trash config
ztm.config.Trash = {
    // Custom Spawn Points can be created with the Trash Spawner Toolgun
    spawn = {
        // Do we want to spawn trash using custom spawn points?
        enabled = true,

        // How often should we try to spawn new trash?
        time = 15, // seconds

        // How many trash entities are allowed to exist on the map at the same time?
        count = 10,

        // The max amount of trash a trash entitiy can have
        trash_max = 30, // kg

        // The min amount of trash a trash entitiy can have
        trash_min = 15, // kg
    },

    // How long does the trash entity has to be idle before it gets removed
    cleanup_time = 120,

    // These models will be used as trash models
    models = {
        "models/zerochain/props_trashman/ztm_trash_apple.mdl",
        "models/zerochain/props_trashman/ztm_trash_box01.mdl",
        "models/zerochain/props_trashman/ztm_trash_box02.mdl",
        "models/zerochain/props_trashman/ztm_trash_can01.mdl",
        "models/zerochain/props_trashman/ztm_trash_can02.mdl",
        "models/zerochain/props_trashman/ztm_trash_cap01.mdl",
        "models/zerochain/props_trashman/ztm_trash_fish.mdl",
        "models/zerochain/props_trashman/ztm_trash_paper.mdl",

        "models/props_junk/garbage_bag001a.mdl",
        "models/props_junk/garbage_milkcarton001a.mdl",
        "models/props_junk/garbage_milkcarton002a.mdl",
        "models/props_junk/garbage_newspaper001a.mdl",
        "models/props_junk/garbage_plasticbottle001a.mdl",
        "models/props_junk/garbage_plasticbottle002a.mdl",
        "models/props_junk/garbage_plasticbottle003a.mdl",
        "models/props_junk/metal_paintcan001a.mdl",
        "models/props_junk/garbage_metalcan001a.mdl",
        "models/props_junk/garbage_metalcan002a.mdl",
        "models/props_junk/Shoe001a.mdl",
        "models/props_lab/box01a.mdl"
    }
}

// Makes players a source of trash
ztm.config.PlayerTrash = {

    // Do we want to make players dirty, which makes them a source of trash? :p
    Enabled = true,

    // How often should we try to make players dirty?
    Interval = 60,

    // How many players can be dirty at the same time?
    Count = 3,

    // How much trash can a player get
    Limit = 50, //kg

    // The max increase amount
    trash_max = 30, // kg

    // The min increase amount
    trash_min = 15, // kg

    // This restrict so that only certain jobs get dirty (Leave empty to disable the job check)
    jobs = {
        //["Gangster"] = true,
    },
}

// World props which can be used as a trash source
ztm.config.TrashCans = {
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

    // Do we want to use entities on the map with trashcan models to be used as a source of getting trash?
    Enabled = true,

    // How often should the trashcans increase their trash
    Refresh_Interval = 60,

    // How much should the trash increase
    Refresh_Amount = 5,

    // These classes are allowed to be trashcans, just to make sure we dont use any random entity which might have one of the models below
    class = {
        ["prop_dynamic"] = true,
        ["prop_physics"] = true,
    },

    // These models will be searched in the map on server start and used as trashcans where the player can collect trash
    // Note: Models on the map which are prop_static cant be detected
    // You can use ztm_debug_GetModel in the console to check if the model you are looking can be detected via lua and what its model is
    models = {
        ["models/props_lab/scrapyarddumpster_static.mdl"] = 200, // This value defines how much trash the entity can hold
        ["models/props_junk/trashdumpster01a.mdl"] = 100,
        ["models/props_junk/trashbin01a.mdl"] = 50,
        ["models/props_trainstation/trashcan_indoor001a.mdl"] = 30,
        ["models/props_trainstation/trashcan_indoor001b.mdl"] = 30,
    }
}

// Trash source which sometimes reveals trash
ztm.config.Manhole = {
    // The max amount of trash Manhole can have
    max_amount = 80, // kg

    // The min amount of trash Manhole can have
    min_amount = 40, // kg

    // How long til a manhole can have trash again
    cooldown = 60, // seconds

    // The chance of the manhole having trash
    chance = 60, // %
}

// Leafpile which needs to get blown away and may reveal trash
ztm.config.LeafPile = {
    // The max amount of trash a leafpile can have
    trash_max = 20, // kg

    // The min amount of trash a leafpile can have
    trash_min = 10, // kg

    // How many trash entities can a leafpile spawn
    trash_count = 6,

    //How high is the chance that the leafpile actully has trash
    trash_chance = 50, // %


    /////// Spawn ///////

    // How many leaf piles are allowed to be active at once
    refresh_count = 3,

    // How often do we refresh random leafpiles, only if the spawn_count limit isnt reached yet.
    refresh_interval = 120,

    // How long til a leafpile can be used again
    refresh_cooldown = 60
}

ztm.config.Trashbags = {
    // How many trashbags can the player spawn?
    limit = 3,

    // How much trash can a trashbag hold?
    capacity = 100,
}

// The SWEP for collecting trash
ztm.config.TrashSWEP = {
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

    // Should the player drop any trash he had in the gun when he dies?
    DropTrashOnDeath = true,

    // How much xp does the player gain per kg of trash
    xp_per_kg = 1,

    // Here you can modify the xp a player gets for collecting trash
    xp_modify = function(ply,xp)

        if ply:IsSuperAdmin() then
            xp = xp * 2
        end

        return xp
    end,

    // Do we allow the player to manipulate phys objects with the Blast function of the swep?
    allow_physmanipulation = false,

    // Should the level data be saved on the server?
    data_save = true,

    // How often should we save the level data from the players if it has changed.
    data_save_interval = 100,

    // If set then we only save the data for players with these ranks. Leave empty to save everyones data.
    data_save_whitelist = {
        //["VIP"] = true,
    },

    // Here you can add more levels
    level = {
        [1] = {
            next_xp = 1000, // The needed xp to get the next level
            primaty_interval = 3, // The interval for the Air Burst action
            secondary_interval = 0.5, // The trash sucking interval
            inv_cap = 100 // The trash capacity of the swep
        },
        [2] = {
            next_xp = 3000,
            primaty_interval = 2,
            secondary_interval = 0.4,
            inv_cap = 150
        },
        [3] = {
            next_xp = 6000,
            primaty_interval = 1,
            secondary_interval = 0.3,
            inv_cap = 200
        },
        [4] = {
            next_xp = 9000,
            primaty_interval = 0.5,
            secondary_interval = 0.2,
            inv_cap = 250
        },
        [5] = {
            next_xp = 15000,
            primaty_interval = 0.25,
            secondary_interval = 0.1,
            inv_cap = 300
        },
    }
}

// Used to burn trash and earn money
ztm.config.TrashBurner = {

    // How much trash can the burner chamber hold
    burn_load = 1000,

    // How long does it take to burn 1kg of trash
    burn_time = 0.1, // seconds per kg

    // How much money does the player get per kg of trash
    money_per_kg = 10,
}

// Used to recycle trash
ztm.config.Recycler = {

    // How much trash can the recycle chamber hold
    capacity = 1000,

    // These jobs are allowed to use the recycler (Leave empty to disable)
    job_restriction = {
        //["Trashman"] = true,
    },

    // These ranks are allowed to use the recycler (Leave empty to disable)
    rank_restriction = {
        //["VIP"] = true,
        //["superadmin"] = true,
    },

    // Here you can add more recycle types
    recycle_types = {
        [1] = {
            // Name of the Recycled Ressource
            name = "Kağıt",

            // How much trash will be need to make one block of this ressource
            trash_per_block = 100, //kg

            // How long does it take to recycle the trash to this ressource
            recycle_time = 10,

             // The money the player gets for one block of this ressouce
            money = 20000,

            // The material which gets used on the Recycled Ressource model
            mat = "zerochain/props_trashman/recycleblock/ztm_recycledblock_paper_diff",

            // These Ranks are allowed to use this recycle type (Leave empty to disable)
            ranks = {
                //["superadmin"] = true,
            }
        },
        [2] = {
            name = "Aluminium",
            trash_per_block = 200,
            recycle_time = 30,
            money = 25000,
            mat = "zerochain/props_trashman/recycleblock/ztm_recycledblock_aluminium_diff",
            ranks = {}
        },
        [3] = {
            name = "Plastic",
            trash_per_block = 300,
            recycle_time = 60,
            money = 30000,
            mat = "zerochain/props_trashman/recycleblock/ztm_recycledblock_plastic_diff",
            ranks = {}
        },
        [4] = {
            name = "Glass",
            trash_per_block = 400,
            recycle_time = 100,
            money = 35000,
            mat = "zerochain/props_trashman/recycleblock/ztm_recycledblock_glass_diff",
            ranks = {}
        },

        [5] = {
            name = "Precious Metals",
            trash_per_block = 700,
            recycle_time = 240,
            money = 40000,
            mat = "zerochain/props_trashman/recycleblock/ztm_recycledblock_metal_diff",
            ranks = {}
        },
    }
}

// The machine which buys recycled trash blocks
ztm.config.Buyermachine = {

    // Do we want to use the dynamic buy rate which modifys the Price for recycled trash blocks for each machine indivdiualy
    DynamicBuyRate = false,

    // The maximal buy rate in % (Set to 100 for now no price change)
    MaxBuyRate = 125,

    // The minimal buy rate in % (Set to 100 for now no price change)
    MinBuyRate = 95,

    // The interval at which the sell price changes in second
    RefreshRate = 600,
}

--addons/darkrpadvancedkeys/lua/entities/adv_veh_alarm/shared.lua:
return gluapack()()
--addons/aphone/lua/entities/aphone_npc/shared.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_357.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"
ENT.RenderGroup               = RENDERGROUP_TRANSLUCENT

ENT.PrintName                 = "Magnum Ammo"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/items/arccw/magnum_ammo.mdl"

ENT.AmmoType = "357"
ENT.AmmoCount = 12
if engine.ActiveGamemode() == "terrortown" then
    ENT.AmmoType = "AlyxGun"
    ENT.AmmoCount = 18
end


ENT.DetonationDamage = 50
ENT.DetonationRadius = 128
ENT.DetonationSound = "weapons/357_fire2.wav"
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_ar2_large.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"
ENT.RenderGroup               = RENDERGROUP_TRANSLUCENT

ENT.PrintName                 = "Rifle Ammo (Large)"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/items/arccw/rifle_ammo.mdl"
ENT.Scale = 1.5

ENT.AmmoType = "ar2"
ENT.AmmoCount = 150

ENT.DetonationDamage = 50
ENT.DetonationRadius = 256
ENT.DetonationSound = "weapons/ar1/ar1_dist2.wav"
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_pistol_large.lua:
return gluapack()()
--lua/entities/arccw_uc_40mm_airburst.lua:
AddCSLuaFile()

ENT.Base = "arccw_uc_40mm_he"
ENT.PrintName = "40mm Airburst"

ENT.GrenadeDamage = 75
ENT.GrenadeRadius = 300
ENT.ExplosionEffect = false
ENT.Scorch = false
ENT.DragCoefficient = 0.75
ENT.DetonateOnImpact = false

ENT.NextTraceTime = 0

if SERVER then
    function ENT:Think()
        if SERVER and CurTime() - self.SpawnTime >= self.FuseTime then
            self:Detonate()
        end

        if self.SpawnTime + 0.2 < CurTime() and self.NextTraceTime < CurTime() then
            self.NextTraceTime = CurTime() + 0.1

            local dir = self:GetVelocity():GetNormalized()
            local deg = math.Clamp(1.5 - dir:Cross(Vector(0, 0, -1)):Length(), 0.5, 1)

            local tr = util.TraceHull({
                start = self:GetPos(),
                endpos = self:GetPos() + dir * (1024 * deg),
                filter = self,
                mins = Vector(-16, -16, -8),
                maxs = Vector(16, 16, 8)
            })
            if tr.Hit then
                self:Detonate()
            end
        end

    end
end

function ENT:DoDetonation()
    local attacker = IsValid(self:GetOwner()) and self:GetOwner() or self
    local dir = self:GetVelocity():GetNormalized()
    local effectdata = EffectData()
    effectdata:SetOrigin(self:GetPos())

    if self:WaterLevel() >= 1 then
        util.Effect("WaterSurfaceExplosion", effectdata)
        self:EmitSound("weapons/underwater_explode3.wav", 125, 100, 1, CHAN_AUTO)
    else
        effectdata:SetMagnitude(4)
        effectdata:SetScale(1)
        effectdata:SetRadius(4)
        effectdata:SetNormal(dir)
        util.Effect("Sparks", effectdata)
        self:EmitSound("physics/metal/metal_box_break1.wav", 100, 200)
    end

    -- The steeper the vertical angle, the higher the damage
    local deg = math.Clamp(1.5 - dir:Cross(Vector(0, 0, -1)):Length(), 0.5, 1)

    self:FireBullets({
        Attacker = attacker,
        Damage = 25,
        Force = 5,
        Distance = 2048,
        HullSize = 16,
        Num = 64,
        Tracer = 1,
        Src = self:GetPos(),
        Dir = dir,
        Spread = Vector(1, 1, 0),
        IgnoreEntity = self,
    })
    local dmg = DamageInfo()
    dmg:SetAttacker(IsValid(self:GetOwner()) and self:GetOwner() or self)
    dmg:SetDamageType(DMG_BULLET)
    dmg:SetInflictor(self)
    dmg:SetDamageForce(self:GetVelocity() * 100)
    for _, ent in pairs(ents.FindInCone(self:GetPos(), dir, 1024, 0.707)) do
        local tr = util.QuickTrace(self:GetPos(), ent:WorldSpaceCenter() - self:GetPos(), self)
        if tr.Entity == ent then
            dmg:SetDamage(math.Rand(75, 150) * deg * math.Clamp(tr.Fraction, 0.5, 1))
            ent:TakeDamageInfo(dmg)
        end
    end

    util.BlastDamage(self, attacker, self:GetPos(), self.GrenadeRadius, self.GrenadeDamage or self.Damage or 0)
end

--[[]
function ENT:BurstEffect()
    local dir = self:GetVelocity():GetNormalized()
    local emitter = ParticleEmitter(self:GetPos())
    if !self:IsValid() or self:WaterLevel() > 2 then return end
    if !IsValid(emitter) then return end
    for i = 1, 64 do
        local fire = emitter:Add("particles/smokey", self:GetPos())
        fire:SetVelocity( VectorRand() * 500 + dir * 1000 )
        fire:SetGravity( Vector(0, 0, -90) )
        fire:SetDieTime( math.Rand(0.25, 0.5) )
        fire:SetStartAlpha( 200 )
        fire:SetEndAlpha( 0 )
        fire:SetStartSize( 10 )
        fire:SetEndSize( 128 )
        fire:SetRoll( math.Rand(-180, 180) )
        fire:SetRollDelta( math.Rand(-0.2,0.2) )
        fire:SetColor( 255, 255, 255 )
        fire:SetAirResistance( 150 )
        fire:SetPos( self:GetPos() )
        fire:SetLighting( false )
        fire:SetCollide(true)
        fire:SetBounce(0.75)
        fire:SetNextThink( CurTime() + FrameTime() )
        fire:SetThinkFunction( function(pa)
            if !pa then return end
            local col1 = Color(150, 150, 150)
            local col2 = Color(200, 200, 200)

            local col3 = col1
            local d = pa:GetLifeTime() / pa:GetDieTime()
            col3.r = Lerp(d, col1.r, col2.r)
            col3.g = Lerp(d, col1.g, col2.g)
            col3.b = Lerp(d, col1.b, col2.b)

            pa:SetColor(col3.r, col3.g, col3.b)
            pa:SetNextThink( CurTime() + FrameTime() )
        end )
    end
    emitter:Finish()
end
]]
--lua/entities/arccw_uc_40mm_napalm.lua:
AddCSLuaFile()

ENT.Base = "arccw_uc_40mm_he"
ENT.PrintName = "40mm Napalm"

ENT.GrenadeDamage = 50
ENT.GrenadeRadius = 150
ENT.ExplosionEffect = false
ENT.Scorch = false
ENT.DragCoefficient = 0.75
ENT.DetonateOnImpact = false

ENT.NextTraceTime = 0

if SERVER then
    function ENT:Think()
        if SERVER and CurTime() - self.SpawnTime >= self.FuseTime then
            self:Detonate()
        end

        if self.SpawnTime + 0.2 < CurTime() and self.NextTraceTime < CurTime() then
            self.NextTraceTime = CurTime() + 0.1
            local dir = self:GetVelocity():GetNormalized()
            local tr = util.TraceHull({
                start = self:GetPos(),
                endpos = self:GetPos() + dir * 512,
                filter = self,
                mins = Vector(-16, -16, -8),
                maxs = Vector(16, 16, 8)
            })
            if tr.Hit then
                self:Detonate()
            end
        end

    end
end

function ENT:DoDetonation()
    local effectdata = EffectData()
    effectdata:SetOrigin(self:GetPos())

    if self:WaterLevel() >= 1 then
        util.Effect("WaterSurfaceExplosion", effectdata)
        self:EmitSound("weapons/underwater_explode3.wav", 125, 100, 1, CHAN_AUTO)
    else
        effectdata:SetMagnitude(4)
        effectdata:SetScale(1)
        effectdata:SetRadius(4)
        effectdata:SetNormal(self:GetVelocity():GetNormalized())
        util.Effect("Sparks", effectdata)
        self:EmitSound("physics/metal/metal_box_break1.wav", 100, 200)
        self:EmitSound("ambient/fire/gascan_ignite1.wav", 100, 100, 0.75)
    end

    for i = 1, math.random(5, 7) do
        local cloud = ents.Create("arccw_uc_napalm")
        cloud.FireTime = math.Rand(20, 40)

        if !IsValid(cloud) then return end

        local vel = VectorRand() * 500

        cloud.Order = i
        cloud:SetPos(self:GetPos() - (self:GetVelocity() * FrameTime()) + VectorRand())
        --cloud:SetAbsVelocity(vel + self:GetVelocity())
        cloud:SetOwner(self:GetOwner())
        cloud:Spawn()
        cloud:GetPhysicsObject():SetVelocityInstantaneous(self:GetVelocity() + vel)

    end
end
--lua/entities/arccw_uc_40mm_smoke.lua:
return gluapack()()
--lua/entities/arccw_uc_fire.lua:
AddCSLuaFile()

ENT.Type = "anim"
ENT.Base = "base_entity"
ENT.PrintName = "Fire Particle"
ENT.Author = ""
ENT.Information = ""
ENT.Spawnable = false
ENT.AdminSpawnable = false

ENT.Model = "models/Items/AR2_Grenade.mdl"

ENT.FireTime = 20

ENT.Armed = false

ENT.NextDamageTick = 0

ENT.Ticks = 0

ENT.ArcCW_Killable = false

function ENT:Initialize()
    if SERVER then
        self:SetModel( self.Model )
        self:SetMoveType( MOVETYPE_VPHYSICS )
        self:SetSolid( SOLID_VPHYSICS )
        local maxs = Vector(1, 1, 1)
        local mins = -maxs
        self:PhysicsInitBox(mins, maxs)
        self:DrawShadow( false )

        local phys = self:GetPhysicsObject()
        if phys:IsValid() then
            phys:Wake()
            phys:SetBuoyancyRatio(0)
        end

        self.SpawnTime = CurTime()
        self:Detonate()

        self.FireTime = math.Rand(self.FireTime - 1, self.FireTime + 1)
    end
end

local fired = {
    "sprites/flamelet1",
    "sprites/flamelet2",
    "sprites/flamelet3",
    "sprites/flamelet4",
    "sprites/flamelet5",
}
local function GetFireParticle()
    return fired[math.random(#fired)]
end

function ENT:Think()
    if !self.SpawnTime then self.SpawnTime = CurTime() end

    if CLIENT then
        local emitter = ParticleEmitter(self:GetPos())

        if !self:IsValid() or self:WaterLevel() > 2 then return end
        if !IsValid(emitter) then return end

        if math.random(1, 100) < 10 then
            local fire = emitter:Add(GetFireParticle(), self:GetPos() + (VectorRand() * 16))
            fire:SetVelocity( VectorRand() * 500 * VectorRand() )
            fire:SetGravity( Vector(0, 0, 100) )
            fire:SetDieTime( math.Rand(0.5, 0.75) )
            fire:SetStartAlpha( 255 )
            fire:SetEndAlpha( 0 )
            fire:SetStartSize( 25 )
            fire:SetEndSize( 100 )
            fire:SetRoll( math.Rand(-180, 180) )
            fire:SetRollDelta( math.Rand(-0.2,0.2) )
            fire:SetColor( 255, 255, 255 )
            fire:SetAirResistance( 150 )
            fire:SetPos( self:GetPos() )
            fire:SetLighting( false )
            fire:SetCollide(true)
            fire:SetBounce(0.75)
            fire:SetNextThink( CurTime() + FrameTime() )
            fire:SetThinkFunction( function(pa)
                if !pa then return end
                local col1 = Color(255, 255, 255)
                local col2 = Color(0, 0, 0)

                local col3 = col1
                local d = pa:GetLifeTime() / pa:GetDieTime()
                col3.r = Lerp(d, col1.r, col2.r)
                col3.g = Lerp(d, col1.g, col2.g)
                col3.b = Lerp(d, col1.b, col2.b)

                pa:SetColor(col3.r, col3.g, col3.b)
                pa:SetNextThink( CurTime() + FrameTime() )
            end )
        end

        if math.random(1, 100) < 5 then
            local fire = emitter:Add("particles/smokey", self:GetPos())
                fire:SetVelocity( VectorRand() * 25 )
                fire:SetGravity( Vector(0, 0, 1500) )
                fire:SetDieTime( math.Rand(0.25, 1) )
                fire:SetStartAlpha( 255 )
                fire:SetEndAlpha( 0 )
                fire:SetStartSize( 10 )
                fire:SetEndSize( 150 )
                fire:SetRoll( math.Rand(-180, 180) )
                fire:SetRollDelta( math.Rand(-0.2,0.2) )
                fire:SetColor( 255, 255, 255 )
                fire:SetAirResistance( 150 )
                fire:SetPos( self:GetPos() )
                fire:SetLighting( false )
                fire:SetCollide(true)
                fire:SetBounce(0.75)
                fire:SetNextThink( CurTime() + FrameTime() )
                fire:SetThinkFunction( function(pa)
                    if !pa then return end
                    local col1 = Color(255, 135, 0)
                    local col2 = Color(150, 150, 150)

                    local col3 = col1
                    local d = pa:GetLifeTime() / pa:GetDieTime()
                    col3.r = Lerp(d, col1.r, col2.r)
                    col3.g = Lerp(d, col1.g, col2.g)
                    col3.b = Lerp(d, col1.b, col2.b)

                    pa:SetColor(col3.r, col3.g, col3.b)
                    pa:SetNextThink( CurTime() + FrameTime() )
                end )
        end

        emitter:Finish()

        self.Ticks = self.Ticks + 1
    else

        if self:GetVelocity():LengthSqr() <= 32 then
            self:SetMoveType( MOVETYPE_NONE )
        end

        if self.NextDamageTick > CurTime() then return end

        if self:WaterLevel() > 2 then self:Remove() return end

        local dmg = DamageInfo()
        dmg:SetDamageType(DMG_BURN)
        dmg:SetDamage(math.Round(math.random() * 2 + 3))
        dmg:SetInflictor(self)
        dmg:SetAttacker(self:GetOwner())
        util.BlastDamageInfo(dmg, self:GetPos(), 200)

        self.NextDamageTick = CurTime() + 0.15

        if self.SpawnTime + self.FireTime <= CurTime() then self:Remove() return end
    end
end

function ENT:OnRemove()
    if !self.FireSound then return end
    self.FireSound:Stop()
end

function ENT:Detonate()
    if !self:IsValid() then return end

    self.Armed = true

    if self.Order and self.Order != 1 then return end

    self.FireSound = CreateSound(self, "arccw_go/molotov/fire_loop_1.wav")
    self.FireSound:Play()

    self.FireSound:ChangePitch(80, self.FireTime)

    timer.Simple(self.FireTime - 1, function()
        if !IsValid(self) then return end

        self.FireSound:ChangeVolume(0, 1)
    end)

    timer.Simple(self.FireTime, function()
        if !IsValid(self) then return end

        self:Remove()
    end)
end

function ENT:Draw()
    -- cam.Start3D() -- Start the 3D function so we can draw onto the screen.
    --     render.SetMaterial( GetFireParticle() ) -- Tell render what material we want, in this case the flash from the gravgun
    --     render.DrawSprite( self:GetPos(), math.random(200, 250), math.random(200, 250), Color(255, 255, 255) ) -- Draw the sprite in the middle of the map, at 16x16 in it's original colour with full alpha.
    -- cam.End3D()
end
--addons/ashop/lua/entities/ashop_npc/cl_init.lua:
local include = include
local LocalPlayer = LocalPlayer
local Vector = Vector
local cam = cam
local draw = draw

include("shared.lua")

function ENT:RenderOverride()
    self:DrawModel()
    if LocalPlayer():GetPos():DistToSqr(self:GetPos()) > 500 * 500 then return end

    local ang = LocalPlayer():EyeAngles()
    local pos = self:GetPos()

    local targethead = self:LookupBone("ValveBiped.Bip01_Head1")
    if targethead then
        local targetheadpos = self:GetBonePosition(targethead)
        pos = targetheadpos + Vector(0, 0, 15)
    else
        pos = self.ViewOffset
    end

    ang:RotateAroundAxis( ang:Forward(), 90 )
    ang:RotateAroundAxis( ang:Right(), 90 )

    cam.Start3D2D(pos, ang, 0.08)
        draw.SimpleTextOutlined(ashop.Config.NPCName or self.PrintName, "ashop_100_600", 0, -30, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP, 2, color_black)
    cam.End3D2D()
end
--addons/[binbon]misc/lua/entities/bb_hurdaci_npc/shared.lua:
return gluapack()()
--addons/[binbon]misc/lua/entities/bb_isimdegistirme_npc/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_ai"
ENT.Type = "ai"
ENT.PrintName = "İsim Değistirme NPC"
ENT.Author = "BinBon"
ENT.Category = "BinBon"
ENT.Spawnable = true
ENT.AdminSpawnable = true

function ENT:SetAutomaticFrameAdvance(bUsingAnim)
  self.AutomaticFrameAdvance = bUsingAnim
end

--addons/ch_atm/lua/entities/ch_atm_card_scanner/cl_init.lua:
include( "shared.lua" )
local imgui = include( "ch_atm/client/ch_atm_imgui.lua" )

--[[
	Cache some variables for the keypad
--]]
local kp_sw, kp_sh = 240, 230
local kp_pos = Vector( 1.95, -3, 1 )
local kp_ang = Angle( 0, 90, 95 )
local kp_scale = 0.025

--[[
	Initialize the entity
--]]
function ENT:Initialize()
end

--[[
	DrawTranslucent function to draw 3d2d UI on credit card terminal
--]]
function ENT:DrawTranslucent()
	self:DrawModel()
	
	if LocalPlayer():GetPos():DistToSqr( self:GetPos() ) >= CH_ATM.Config.DistanceToScreen3D2D then
		return
	end
	
	-- Draw the static UI
	if imgui.Entity3D2D( self, kp_pos, kp_ang, kp_scale ) then
		local pressing = imgui.IsPressing()
		
		-- SCREEN
		draw.SimpleText( CH_ATM.FormatMoney( tonumber( self:GetTerminalPrice() ) ), "CH_ATM_Font_CardScanner_Size25", 120, -100, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		if self:GetIsReadyToScan() then
			draw.SimpleText( CH_ATM.LangString( "Scan credit card" ), "CH_ATM_Font_CardScanner_Size20", 120, -75, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		else
			draw.SimpleText( CH_ATM.LangString( "Enter and confirm" ), "CH_ATM_Font_CardScanner_Size20", 120, -75, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
		
		-- KEYPAD
		local owner = self:CPPIGetOwner()
		if owner and owner == LocalPlayer() then
			-- Button 1
			local hovering = imgui.IsHovering( 27.5, 11, 47, 47 )
			
			if hovering and pressing then
				self:KEYPAD_AcceptInput( "1" )
			end
			
			-- Button 2
			local hovering = imgui.IsHovering( 96.5, 11, 47, 47 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "2" )
			end
			
			-- Button 3
			local hovering = imgui.IsHovering( 165.5, 11, 47, 47 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "3" )
			end

			-- Button 4
			local hovering = imgui.IsHovering( 27.5, 64, 47, 47 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "4" )
			end
			
			-- Button 5
			local hovering = imgui.IsHovering( 96.5, 64, 47, 47 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "5" )
			end
			
			-- Button 6
			local hovering = imgui.IsHovering( 165.5, 64, 47, 47 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "6" )
			end

			-- Button 7
			local hovering = imgui.IsHovering( 27.5, 118, 47, 47 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "7" )
			end
			
			-- Button 8
			local hovering = imgui.IsHovering( 96.5, 118, 47, 47 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "8" )
			end
			
			-- Button 9
			local hovering = imgui.IsHovering( 165.5, 118, 47, 47 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "9" )
			end

			-- Button clear
			local hovering = imgui.IsHovering( 27.5, 171, 47, 47 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "CLEAR" )
			end

			-- Button 0
			local hovering = imgui.IsHovering( 96.5, 171, 47, 47 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "0" )
			end

			-- Button enter
			local hovering = imgui.IsHovering( 165.5, 171, 47, 47 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "ENTER" )
			end

			-- Draw curser
			imgui.xCursor( 0, 0, kp_sw, kp_sh )
		end
		
		imgui.End3D2D()
	end
end

--[[
	Function to take keypad input and perform an action
	76561198347218024
--]]
function ENT:KEYPAD_AcceptInput( input )	
	if input == "CLEAR" then
		-- Reset the keypad input
		self:KEYPAD_ResetInput()
		
		self:SetIsReadyToScan( false )
		
		net.Start( "CH_ATM_Net_CardScanner_IsReadyToScan" )
			net.WriteEntity( self )
			net.WriteBool( false )
		net.SendToServer()
		
		surface.PlaySound( "UI/buttonclick.wav" )
	elseif input == "ENTER" and not self:GetIsReadyToScan() then
		-- Set the machine to be ready to scan card
		self:SetIsReadyToScan( true )
		
		net.Start( "CH_ATM_Net_CardScanner_IsReadyToScan" )
			net.WriteEntity( self )
			net.WriteBool( true )
		net.SendToServer()
		
		surface.PlaySound( "UI/buttonclick.wav" )
	elseif not self:GetIsReadyToScan() then
		-- We're entering numbers now, so update the price
		net.Start( "CH_ATM_Net_CardScanner_UpdatePrice" )
			net.WriteEntity( self )
			net.WriteString( input )
			net.WriteBool( false )
		net.SendToServer()
		
		surface.PlaySound( "UI/buttonclick.wav" )
	end
end

--[[
	Reset the keypad input entirely
--]]
function ENT:KEYPAD_ResetInput()
	net.Start( "CH_ATM_Net_CardScanner_UpdatePrice" )
		net.WriteEntity( self )
		net.WriteString( "" )
		net.WriteBool( true )
	net.SendToServer()
end
--addons/ch_bitminers_dlc/lua/entities/ch_bitminer_antivirus_usb/cl_init.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_cable_end/cl_init.lua:
include( "shared.lua" )

function ENT:Draw()
	self:DrawModel()	
end		
--addons/ch_bitminers/lua/entities/ch_bitminer_power_cable_end/shared.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator_fuel_medium/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"

ENT.PrintName = "Generator Fuel - Medium"
ENT.Author = "Crap-Head"
ENT.Category = "Bitminers by Crap-Head"

ENT.Spawnable = true
ENT.AdminSpawnable = true

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()	
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_cooling3/shared.lua:
return gluapack()()
--addons/ch_mayor/lua/entities/ch_mayor_announcements/cl_init.lua:
include( "shared.lua" )

--[[
	Net message to make flashy screens
	Called when announcement is updated
--]]
net.Receive( "CH_Mayor_Net_NewAnnouncementFlash", function( len, ply )
	for k, ent in ipairs( ents.FindByClass( "ch_mayor_announcements" ) ) do
		ent.SCREEN_NewAnnouncement = CurTime() + CH_Mayor.Config.NewAnnouncementScreenFlashTime
	end
end )

function ENT:Initialize()
	self.SCREEN_NewAnnouncement = 0
end

function ENT:DrawTranslucent()
	self:DrawModel()
	
	if LocalPlayer():GetPos():DistToSqr( self:GetPos() ) >= CH_Mayor.Config.DistanceTo3D2D then
		return
	end
	
	local pos = self:GetPos()
	local ang = self:GetAngles()
	
	ang:RotateAroundAxis( ang:Forward(), 90 )
	ang:RotateAroundAxis( ang:Right(), 180 )

	cam.Start3D2D( pos + ang:Up() * 0.2, ang, 0.1 )		
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( -450, -290, 900, 500 )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( -450, -290, 900, 75 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "Mayor Announcement" ), "CH_Mayor_Font_3D2D_50", 0, -250, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Draw icons left and right
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Ent_AnnouncementLeft )
		surface.DrawTexturedRect( -420, -270, 45, 45 )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Ent_AnnouncementRight )
		surface.DrawTexturedRect( 380, -270, 45, 45 )
		
		if ( self.SCREEN_NewAnnouncement or 0 ) > CurTime() then
			-- Flashy screen
			local cur_time = CurTime()
			
			surface.SetDrawColor( 235 * math.abs( math.sin( cur_time * 1.1 ) ), 0, 0 )
			surface.DrawRect( -450, -215, 900, 420 )
			
			draw.SimpleText( CH_Mayor.LangString( "Announcement Incoming" ), "CH_Mayor_Font_3D2D_70", 0, -70, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			draw.SimpleText( string.ToMinutesSeconds( math.Round( self.SCREEN_NewAnnouncement - cur_time ) ), "CH_Mayor_Font_3D2D_60", 0, 10, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		else
			-- Announcement
			local wrapped_text = DarkRP.textWrap( self:GetAnnouncement(), "CH_Mayor_Font_3D2D_50", 850 )
			draw.DrawText( wrapped_text, "CH_Mayor_Font_3D2D_50", 0, -100, CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER )
		end
	cam.End3D2D()
end
--addons/ch_mayor/lua/entities/ch_mayor_cityboard/cl_init.lua:
include( "shared.lua" )

local rotate_team_tax = 0
local team_tax_tax = 0
local team_tax = "None"

function ENT:DrawTranslucent()
	self:DrawModel()
	
	if LocalPlayer():GetPos():DistToSqr( self:GetPos() ) >= CH_Mayor.Config.DistanceTo3D2D then
		return
	end
	
	local pos = self:GetPos()
	local ang = self:GetAngles()
	local cur_time = CurTime()
	
	ang:RotateAroundAxis( ang:Forward(), 90 )
	ang:RotateAroundAxis( ang:Right(), 180 )

	cam.Start3D2D( pos + ang:Up() * 0.2, ang, 0.15 )		
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( -745, -475, 1490, 820 )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( -745, -475, 1490, 75 )
		
		-- Draw the top title.
		local mayor = CH_Mayor.GetMayor()
		if IsValid( mayor ) then
			draw.SimpleText( CH_Mayor.LangString( "City Board" ) .." - ".. mayor:Nick(), "CH_Mayor_Font_3D2D_60", 0, -440, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		else
			draw.SimpleText( CH_Mayor.LangString( "City Board" ), "CH_Mayor_Font_3D2D_60", 0, -440, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
		
		-- Draw icons left and right
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Ent_Cityboard )
		surface.DrawTexturedRect( -720, -460, 45, 45 )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Ent_Cityboard )
		surface.DrawTexturedRect( 680, -460, 45, 45 )
		
		-- Box 1 (city funds)
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( -700, -360, 440, 150 )
		
		draw.SimpleText( CH_Mayor.LangString( "City Funds" ), "CH_Mayor_Font_3D2D_60", -485, -325, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		draw.SimpleText( DarkRP.formatMoney( CH_Mayor.VaultMoney ), "CH_Mayor_Font_3D2D_50", -485, -265, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Box 2 (civilians)
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( -220, -360, 440, 150 )
		
		draw.SimpleText( CH_Mayor.LangString( "City Residents" ), "CH_Mayor_Font_3D2D_60", 0, -325, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		draw.SimpleText( player.GetCount() .." ".. CH_Mayor.LangString( "Online" ), "CH_Mayor_Font_3D2D_50", 0, -265, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Box 3 (wanted criminals)
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 265, -360, 440, 150 )
		
		local wanted_count = 0
		for k, v in ipairs( player.GetAll() ) do
			if v:isWanted() then
				wanted_count = wanted_count + 1
			end
		end
		
		draw.SimpleText( CH_Mayor.LangString( "Wanted Criminals" ), "CH_Mayor_Font_3D2D_60", 485, -325, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		draw.SimpleText( wanted_count .." ".. CH_Mayor.LangString( "Criminals" ), "CH_Mayor_Font_3D2D_50", 485, -265, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- LAWS
		local lastHeight = 0
        for k, v in ipairs( CH_Mayor.Laws ) do
			if k > 12 then
				continue
			end
			
            draw.DrawNonParsedText( string.format("%u. %s", k, v), "CH_Mayor_Font_3D2D_50", -700, -190 + lastHeight, color_white )
            lastHeight = lastHeight + (fn.ReverseArgs(string.gsub(v, "\n", "")) + 1) * 43
        end
		
		if CH_Mayor.Config.RotateTeamTaxesOnCityBoard then
			-- Team tax
			if rotate_team_tax < CurTime() then
				rotate_team_tax = CurTime() + CH_Mayor.Config.RotateTeamTaxesInterval
				local rand_team = table.Random( CH_Mayor.TeamTaxes )
				if rand_team then
					team_tax_tax = rand_team.team_tax
					team_tax = rand_team.team_name
				end
			end
			
			draw.SimpleText( "Paycheck Tax", "CH_Mayor_Font_3D2D_30", 720, 275, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
			draw.SimpleText( team_tax ..": ".. team_tax_tax .."%", "CH_Mayor_Font_3D2D_40", 725, 310, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
		end
	cam.End3D2D()
end
--addons/ch_mayor/lua/entities/ch_mayor_cityboard/shared.lua:
ENT.Base 					= "base_gmodentity"
ENT.Type 					= "anim"

ENT.PrintName				= "City Board"
ENT.Author					= "Crap-Head"
ENT.Category 				= "Mayor by Crap-Head"

ENT.Spawnable				= true
ENT.AdminSpawnable			= true

ENT.RenderGroup 			= RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance 	= true
--addons/ch_mayor/lua/entities/ch_mayor_desk/shared.lua:
ENT.Base 					= "base_gmodentity"
ENT.Type 					= "anim"

ENT.PrintName				= "Mayor Desk"
ENT.Author					= "Crap-Head"
ENT.Category 				= "Mayor by Crap-Head"

ENT.Spawnable				= true
ENT.AdminSpawnable			= true

ENT.RenderGroup 			= RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance 	= true
--addons/ch_mayor/lua/entities/ch_mayor_leaderboard/cl_init.lua:
include( "shared.lua" )
local imgui = include( "ch_adv_mayor/client/ch_mayor_imgui.lua" )

--[[
	Cache some variables for the main screen
--]]
local sw, sh = 1785, 980
local pos = Vector( 44.6, 0.1, 28.5 )
local ang = Angle( 0, 180, 90 )
local scale = 0.05

local mat_loading = Material( "materials/craphead_scripts/advanced_mayor/gui/entities/loading.png", "noclamp smooth" )

--[[
	Initialize the entity
--]]
function ENT:Initialize()
	-- First leaderboard on init
	self:SCREEN_ShowLeaderboard( "WarrantsPlaced", false )
	
	self.SCREEN_LastRefreshed = 0
end

--[[
	DrawTranslucent function to draw 3d2d UI on ATM
--]]
function ENT:DrawTranslucent()
	self:DrawModel()
	
	if LocalPlayer():GetPos():DistToSqr( self:GetPos() ) >= CH_Mayor.Config.DistanceTo3D2D then
		return
	end
	
	if imgui.Entity3D2D( self, pos, ang, scale ) then
		-- BG
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, sw, sh )
		
		-- Top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, sw, 150 )

		-- Draw icons left and right
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Ent_Leaderboard )
		surface.DrawTexturedRect( 50, 30, 90, 90 )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Ent_Leaderboard )
		surface.DrawTexturedRect( 1650, 30, 90, 90 )

		imgui.End3D2D()
	end
	
	-- 3D2D functions
	self.Draw3D2DPage()
end

--[[
	These functions are later used to store only the 3d2d that we're currently rendering for the player
--]]
function ENT.Draw3D2DPage()
end

--[[
	Format some text based on the board
--]]
local function CH_Mayor_Board_FormatText( input, board )
	if board == "WarrantsPlaced" then
		return string.Comma( input ) .." ".. CH_Mayor.LangString( "warrants" )
	elseif board == "PlayersWanted" then
		return string.Comma( input ) .." ".. CH_Mayor.LangString( "players" )
	elseif board == "TimesElected" then
		return string.Comma( input ) .." ".. CH_Mayor.LangString( "times" )
	elseif board == "VaultRobbed" then
		return string.Comma( input ) .." ".. CH_Mayor.LangString( "robberies" )
	elseif board == "TotalPlaytime" then
		return CH_Mayor.FormatPlaytime( input )
	elseif board == "PlayersDemoted" then
		return string.Comma( input ) .." ".. CH_Mayor.LangString( "players" )
	elseif board == "PlayersPromoted" then
		return string.Comma( input ) .." ".. CH_Mayor.LangString( "players" )
	elseif board == "CapitalAdded" then
		return DarkRP.formatMoney( input )
	elseif board == "LockdownsInitiated" then
		return string.Comma( input ) .." ".. CH_Mayor.LangString( "lockdowns" )
	elseif board == "LotteriesStarted" then
		return string.Comma( input ) .." ".. CH_Mayor.LangString( "lotteries" )
	end
	
	return input
end

local function CH_Mayor_Board_FormatTitle( board )
	if board == "WarrantsPlaced" then
		return CH_Mayor.LangString( "Most warrants placed" )
	elseif board == "PlayersWanted" then
		return CH_Mayor.LangString( "Most players wanted" )
	elseif board == "TimesElected" then
		return CH_Mayor.LangString( "Most times elected" )
	elseif board == "VaultRobbed" then
		return CH_Mayor.LangString( "Most robberies during period" )
	elseif board == "TotalPlaytime" then
		return CH_Mayor.LangString( "Most mayor playtime" )
	elseif board == "PlayersDemoted" then
		return CH_Mayor.LangString( "Most players demoted" )
	elseif board == "PlayersPromoted" then
		return CH_Mayor.LangString( "Most players promoted" )
	elseif board == "CapitalAdded" then
		return CH_Mayor.LangString( "Most money deposited" )
	elseif board == "LockdownsInitiated" then
		return CH_Mayor.LangString( "Most lockdowns initiated" )
	elseif board == "LotteriesStarted" then
		return CH_Mayor.LangString( "Most lotteries started" )
	end
	
	return board
end

--[[
	Show a specified leaderboard
--]]
function ENT:SCREEN_ShowLeaderboard( board )
	local ply = LocalPlayer()

	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			local leaderboard = CH_Mayor.Leaderboards[ board ]
			
			if not leaderboard then
				-- Title
				draw.SimpleText( CH_Mayor.LangString( "Mayor Leaderboards" ), "CH_Mayor_Font_3D2D_110", sw / 2, 70, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
				
				-- Network button
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 540, 450, 700, 150 )
				
				draw.SimpleText( CH_Mayor.LangString( "Network Leaderboards" ), "CH_Mayor_Font_3D2D_70", sw / 2, 485, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				
				local hovering = imgui.IsHovering( 540, 450, 700, 150 )
			
				if hovering and pressing then
					net.Start( "CH_Mayor_Net_InitLeaderboards" )
					net.SendToServer()
				elseif hovering then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 540, 450, 2, 150 )
					surface.DrawRect( 1238, 450, 2, 150 )
					surface.DrawRect( 540, 450, 700, 2 )
					surface.DrawRect( 540, 598, 700, 2 )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 540, 450, 2, 10 )
					surface.DrawRect( 540, 450, 10, 2 )
					surface.DrawRect( 540, 590, 2, 10 )
					surface.DrawRect( 540, 598, 10, 2 )
					surface.DrawRect( 1238, 450, 2, 10 )
					surface.DrawRect( 1230, 450, 10, 2 )
					surface.DrawRect( 1238, 590, 2, 10 )
					surface.DrawRect( 1230, 598, 10, 2 )
				end
			else
				-- Title
				draw.SimpleText( CH_Mayor_Board_FormatTitle( board ), "CH_Mayor_Font_3D2D_110", sw / 2, 70, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
				
				-- Warrants Placed button
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 21, 170, 330, 50 )
				
				draw.SimpleText( CH_Mayor.LangString( "Warrants Placed" ), "CH_Mayor_Font_3D2D_40", 185, 172.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				
				local hovering = imgui.IsHovering( 21, 170, 330, 50 )
			
				if hovering and pressing then
					self:SCREEN_Refresh( "WarrantsPlaced" )
				elseif hovering then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 21, 170, 2, 50 )
					surface.DrawRect( 349, 170, 2, 50 )
					surface.DrawRect( 21, 170, 330, 2 )
					surface.DrawRect( 21, 218, 330, 2 )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 21, 170, 2, 10 )
					surface.DrawRect( 21, 170, 10, 2 )
					surface.DrawRect( 21, 210, 2, 10 )
					surface.DrawRect( 21, 218, 10, 2 )
					surface.DrawRect( 349, 170, 2, 10 )
					surface.DrawRect( 340, 170, 10, 2 )
					surface.DrawRect( 349, 210, 2, 10 )
					surface.DrawRect( 340, 218, 10, 2 )
				end
				
				-- PlayersWanted button
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 372, 170, 330, 50 )
				
				draw.SimpleText( CH_Mayor.LangString( "Players Wanted" ), "CH_Mayor_Font_3D2D_40", 540, 172.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				
				local hovering = imgui.IsHovering( 372, 170, 330, 50 )
				
				if hovering and pressing then
					self:SCREEN_Refresh( "PlayersWanted" )
				elseif hovering then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 372, 170, 2, 50 )
					surface.DrawRect( 700, 170, 2, 50 )
					surface.DrawRect( 372, 170, 330, 2 )
					surface.DrawRect( 372, 218, 330, 2 )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 372, 170, 2, 10 )
					surface.DrawRect( 372, 170, 10, 2 )
					surface.DrawRect( 372, 210, 2, 10 )
					surface.DrawRect( 372, 218, 10, 2 )
					surface.DrawRect( 700, 170, 2, 10 )
					surface.DrawRect( 692, 170, 10, 2 )
					surface.DrawRect( 700, 210, 2, 10 )
					surface.DrawRect( 692, 218, 10, 2 )
				end
				
				-- TimesElected button
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 724, 170, 330, 50 )
				
				draw.SimpleText( CH_Mayor.LangString( "Times Elected" ), "CH_Mayor_Font_3D2D_40", 890, 172.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				
				local hovering = imgui.IsHovering( 724, 170, 330, 50 )
			
				if hovering and pressing then
					self:SCREEN_Refresh( "TimesElected" )
				elseif hovering then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 724, 170, 2, 50 )
					surface.DrawRect( 1052, 170, 2, 50 )
					surface.DrawRect( 724, 170, 330, 2 )
					surface.DrawRect( 724, 218, 330, 2 )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 724, 170, 2, 10 )
					surface.DrawRect( 724, 170, 10, 2 )
					surface.DrawRect( 724, 210, 2, 10 )
					surface.DrawRect( 724, 218, 10, 2 )
					surface.DrawRect( 1052, 170, 2, 10 )
					surface.DrawRect( 1044, 170, 10, 2 )
					surface.DrawRect( 1052, 210, 2, 10 )
					surface.DrawRect( 1044, 218, 10, 2 )
				end
				
				-- VaultRobbed button
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 1078, 170, 330, 50 )
				
				draw.SimpleText( CH_Mayor.LangString( "Vaults Robbed" ), "CH_Mayor_Font_3D2D_40", 1250, 172.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				
				local hovering = imgui.IsHovering( 1078, 170, 330, 50 )
			
				if hovering and pressing then
					self:SCREEN_Refresh( "VaultRobbed" )
				elseif hovering then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 1078, 170, 2, 50 )
					surface.DrawRect( 1406, 170, 2, 50 )
					surface.DrawRect( 1078, 170, 330, 2 )
					surface.DrawRect( 1078, 218, 330, 2 )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 1078, 170, 2, 10 )
					surface.DrawRect( 1078, 170, 10, 2 )
					surface.DrawRect( 1078, 210, 2, 10 )
					surface.DrawRect( 1078, 218, 10, 2 )
					surface.DrawRect( 1406, 170, 2, 10 )
					surface.DrawRect( 1398, 170, 10, 2 )
					surface.DrawRect( 1406, 210, 2, 10 )
					surface.DrawRect( 1398, 218, 10, 2 )
				end
				
				-- TotalPlaytime button
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 1430, 170, 330, 50 )
				
				draw.SimpleText( CH_Mayor.LangString( "Mayor Playtime" ), "CH_Mayor_Font_3D2D_40", 1595, 172.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				
				local hovering = imgui.IsHovering( 1430, 170, 330, 50 )
			
				if hovering and pressing then
					self:SCREEN_Refresh( "TotalPlaytime" )
				elseif hovering then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 1430, 170, 2, 50 )
					surface.DrawRect( 1758, 170, 2, 50 )
					surface.DrawRect( 1430, 170, 330, 2 )
					surface.DrawRect( 1430, 218, 330, 2 )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 1430, 170, 2, 10 )
					surface.DrawRect( 1430, 170, 10, 2 )
					surface.DrawRect( 1430, 210, 2, 10 )
					surface.DrawRect( 1430, 218, 10, 2 )
					surface.DrawRect( 1758, 170, 2, 10 )
					surface.DrawRect( 1750, 170, 10, 2 )
					surface.DrawRect( 1758, 210, 2, 10 )
					surface.DrawRect( 1750, 218, 10, 2 )
				end
				
				-- PlayersDemoted button
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 21, 240, 330, 50 )
				
				draw.SimpleText( CH_Mayor.LangString( "Players Demoted"), "CH_Mayor_Font_3D2D_40", 185, 242.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				
				local hovering = imgui.IsHovering( 21, 240, 330, 50 )
				
				if hovering and pressing then
					self:SCREEN_Refresh( "PlayersDemoted" )
				elseif hovering then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 21, 240, 2, 50 )
					surface.DrawRect( 349, 240, 2, 50 )
					surface.DrawRect( 21, 240, 330, 2 )
					surface.DrawRect( 21, 288, 330, 2 )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 21, 240, 2, 10 )
					surface.DrawRect( 21, 240, 10, 2 )
					surface.DrawRect( 21, 280, 2, 10 )
					surface.DrawRect( 21, 288, 10, 2 )
					surface.DrawRect( 349, 240, 2, 10 )
					surface.DrawRect( 340, 240, 10, 2 )
					surface.DrawRect( 349, 280, 2, 10 )
					surface.DrawRect( 340, 288, 10, 2 )
				end
				
				-- PlayersPromoted button
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 372, 240, 330, 50 )
				
				draw.SimpleText( CH_Mayor.LangString( "Players Promoted" ), "CH_Mayor_Font_3D2D_40", 540, 242.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				
				local hovering = imgui.IsHovering( 372, 240, 330, 50 )
			
				if hovering and pressing then
					self:SCREEN_Refresh( "PlayersPromoted" )
				elseif hovering then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 372, 240, 2, 50 )
					surface.DrawRect( 700, 240, 2, 50 )
					surface.DrawRect( 372, 240, 330, 2 )
					surface.DrawRect( 372, 288, 330, 2 )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 372, 240, 2, 10 )
					surface.DrawRect( 372, 240, 10, 2 )
					surface.DrawRect( 372, 280, 2, 10 )
					surface.DrawRect( 372, 288, 10, 2 )
					surface.DrawRect( 700, 240, 2, 10 )
					surface.DrawRect( 692, 240, 10, 2 )
					surface.DrawRect( 700, 280, 2, 10 )
					surface.DrawRect( 692, 288, 10, 2 )
				end
				
				-- CapitalAdded button
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 724, 240, 330, 50 )
				
				draw.SimpleText( CH_Mayor.LangString( "Capital Added" ), "CH_Mayor_Font_3D2D_40", 890, 242.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				
				local hovering = imgui.IsHovering( 724, 240, 330, 50 )
			
				if hovering and pressing then
					self:SCREEN_Refresh( "CapitalAdded" )
				elseif hovering then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 724, 240, 2, 50 )
					surface.DrawRect( 1052, 240, 2, 50 )
					surface.DrawRect( 724, 240, 330, 2 )
					surface.DrawRect( 724, 288, 330, 2 )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 724, 240, 2, 10 )
					surface.DrawRect( 724, 240, 10, 2 )
					surface.DrawRect( 724, 280, 2, 10 )
					surface.DrawRect( 724, 288, 10, 2 )
					surface.DrawRect( 1052, 240, 2, 10 )
					surface.DrawRect( 1044, 240, 10, 2 )
					surface.DrawRect( 1052, 280, 2, 10 )
					surface.DrawRect( 1044, 288, 10, 2 )
				end
				
				-- LockdownsInitiated button
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 1078, 240, 330, 50 )
				
				draw.SimpleText( CH_Mayor.LangString( "Lockdowns Initiated" ), "CH_Mayor_Font_3D2D_40", 1250, 242.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				
				local hovering = imgui.IsHovering( 1078, 240, 330, 50 )
			
				if hovering and pressing then
					self:SCREEN_Refresh( "LockdownsInitiated" )
				elseif hovering then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 1078, 240, 2, 50 )
					surface.DrawRect( 1406, 240, 2, 50 )
					surface.DrawRect( 1078, 240, 330, 2 )
					surface.DrawRect( 1078, 288, 330, 2 )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 1078, 240, 2, 10 )
					surface.DrawRect( 1078, 240, 10, 2 )
					surface.DrawRect( 1078, 280, 2, 10 )
					surface.DrawRect( 1078, 288, 10, 2 )
					surface.DrawRect( 1406, 240, 2, 10 )
					surface.DrawRect( 1398, 240, 10, 2 )
					surface.DrawRect( 1406, 280, 2, 10 )
					surface.DrawRect( 1398, 288, 10, 2 )
				end
				
				-- LotteriesStarted button
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 1430, 240, 330, 50 )
				
				draw.SimpleText( CH_Mayor.LangString( "Lotteries Started" ), "CH_Mayor_Font_3D2D_40", 1595, 242.5, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				
				local hovering = imgui.IsHovering( 1430, 240, 330, 50 )
			
				if hovering and pressing then
					self:SCREEN_Refresh( "LotteriesStarted" )
				elseif hovering then
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 1430, 240, 2, 50 )
					surface.DrawRect( 1758, 240, 2, 50 )
					surface.DrawRect( 1430, 240, 330, 2 )
					surface.DrawRect( 1430, 288, 330, 2 )
				else
					surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
					surface.DrawRect( 1430, 240, 2, 10 )
					surface.DrawRect( 1430, 240, 10, 2 )
					surface.DrawRect( 1430, 280, 2, 10 )
					surface.DrawRect( 1430, 288, 10, 2 )
					surface.DrawRect( 1758, 240, 2, 10 )
					surface.DrawRect( 1750, 240, 10, 2 )
					surface.DrawRect( 1758, 280, 2, 10 )
					surface.DrawRect( 1750, 288, 10, 2 )
				end
				
				-- First place
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 607.5, 320, 565, 180 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_Mayor.Materials.Icon_Ent_Leaderboard_First )
				surface.DrawTexturedRect( 850, 300, 80, 80 )
				
				if leaderboard[1] then
					draw.SimpleText( leaderboard[1].Name, "CH_Mayor_Font_3D2D_70", sw / 2, 370, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( CH_Mayor_Board_FormatText( leaderboard[1].Amount, board ), "CH_Mayor_Font_3D2D_60", sw / 2, 430, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				end
				
				-- Second place
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 20, 320, 565, 180 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_Mayor.Materials.Icon_Ent_Leaderboard_Second )
				surface.DrawTexturedRect( 265, 300, 80, 80 )
				
				if leaderboard[2] then
					draw.SimpleText( leaderboard[2].Name, "CH_Mayor_Font_3D2D_70", 300, 370, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( CH_Mayor_Board_FormatText( leaderboard[2].Amount, board ), "CH_Mayor_Font_3D2D_60", 300, 430,  color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				end
				
				-- Third place
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 1195, 320, 565, 180 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_Mayor.Materials.Icon_Ent_Leaderboard_Third )
				surface.DrawTexturedRect( 1425, 300, 80, 80 )
				
				if leaderboard[3] then
					draw.SimpleText( leaderboard[3].Name, "CH_Mayor_Font_3D2D_70", 1470, 370, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( CH_Mayor_Board_FormatText( leaderboard[3].Amount, board ), "CH_Mayor_Font_3D2D_60", 1470, 430,  color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				end

				-- Fourth place
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 0, 525, sw, 65 )
				
				if leaderboard[4] then
					draw.SimpleText( "#4", "CH_Mayor_Font_3D2D_50", 300, 530, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( leaderboard[4].Name, "CH_Mayor_Font_3D2D_50", sw / 2, 530, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( CH_Mayor_Board_FormatText( leaderboard[4].Amount, board ), "CH_Mayor_Font_3D2D_50", 1470, 530,  color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				end
				
				-- Fifth place
				if leaderboard[5] then
					draw.SimpleText( "#5", "CH_Mayor_Font_3D2D_50", 300, 595, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( leaderboard[5].Name, "CH_Mayor_Font_3D2D_50", sw / 2, 595, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( CH_Mayor_Board_FormatText( leaderboard[5].Amount, board ), "CH_Mayor_Font_3D2D_50", 1470, 595,  color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				end
				
				-- Six place
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 0, 655, sw, 65 )
				
				if leaderboard[6] then
					draw.SimpleText( "#6", "CH_Mayor_Font_3D2D_50", 300, 660, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( leaderboard[6].Name, "CH_Mayor_Font_3D2D_50", sw / 2, 660, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( CH_Mayor_Board_FormatText( leaderboard[6].Amount, board ), "CH_Mayor_Font_3D2D_50", 1470, 660,  color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				end
				
				-- Seventh place
				if leaderboard[7] then
					draw.SimpleText( "#7", "CH_Mayor_Font_3D2D_50", 300, 725, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( leaderboard[7].Name, "CH_Mayor_Font_3D2D_50", sw / 2, 725, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( CH_Mayor_Board_FormatText( leaderboard[7].Amount, board ), "CH_Mayor_Font_3D2D_50", 1470, 725,  color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				end
				
				-- Eight place
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 0, 785, sw, 65 )
				
				if leaderboard[8] then
					draw.SimpleText( "#8", "CH_Mayor_Font_3D2D_50", 300, 790, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( leaderboard[8].Name, "CH_Mayor_Font_3D2D_50", sw / 2, 790, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( CH_Mayor_Board_FormatText( leaderboard[8].Amount, board ), "CH_Mayor_Font_3D2D_50", 1470, 790,  color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				end
				
				-- Ninth place
				if leaderboard[9] then
					draw.SimpleText( "#9", "CH_Mayor_Font_3D2D_50", 300, 855, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( leaderboard[9].Name, "CH_Mayor_Font_3D2D_50", sw / 2, 855, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( CH_Mayor_Board_FormatText( leaderboard[9].Amount, board ), "CH_Mayor_Font_3D2D_50", 1470, 855,  color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				end
				
				-- Tenth place
				surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
				surface.DrawRect( 0, 915, sw, 65 )
				
				if leaderboard[10] then
					draw.SimpleText( "#10", "CH_Mayor_Font_3D2D_50", 300, 920, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( leaderboard[10].Name, "CH_Mayor_Font_3D2D_50", sw / 2, 920, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
					draw.SimpleText( CH_Mayor_Board_FormatText( leaderboard[10].Amount, board ), "CH_Mayor_Font_3D2D_50", 1470, 920,  color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP )
				end
				
				-- button to refresh
				local cur_time = CurTime()
				
				if ( self.SCREEN_LastRefreshed or 0 ) < cur_time then
					local hovering = imgui.IsHovering( 1720, 925, 45, 45 )
					
					surface.SetDrawColor( not hovering and color_white or CH_Mayor.Colors.GMSBlue )
					surface.SetMaterial( mat_loading )
					if hovering then
						surface.DrawTexturedRectRotated( 1742.5, 947.5, 45, 45, cur_time * -75 )
					else
						surface.DrawTexturedRect( 1720, 925, 45, 45 )
					end
					
					if hovering and pressing then
						surface.PlaySound( "buttons/lightswitch2.wav" )
						
						net.Start( "CH_Mayor_Net_InitLeaderboards" )
						net.SendToServer()
						
						self:SCREEN_Refresh( board )
						
						self.SCREEN_LastRefreshed = cur_time + 60
					end
				end
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Loading screen
--]]
function ENT:SCREEN_Refresh( board )
	surface.PlaySound( "buttons/lightswitch2.wav" )
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			-- Draw spinning loading icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( mat_loading )
			surface.DrawTexturedRectRotated( sw / 2, 500, 256, 256, CurTime() * -75 )
			
			draw.SimpleText( CH_Mayor.LangString( "Loading leaderboard" ), "CH_Mayor_Font_3D2D_70", sw / 2, 700, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			imgui.End3D2D()
		end
	end
	
	timer.Simple( 1, function()
		if IsValid( self ) then
			self:SCREEN_ShowLeaderboard( board )
		end
	end )
end
--addons/ch_mayor/lua/ch_adv_mayor/client/ch_mayor_imgui.lua:
--[[
IMGUI by Wyozi - https://github.com/wyozi-gmod/imgui

MIT License

Copyright (c) 2019 wyozi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
--]]

local imgui = {}

imgui.skin = {
	background = Color(0, 0, 0, 0),
	backgroundHover = Color(0, 0, 0, 0),

	border = Color(255, 255, 255),
	borderHover = Color(255, 127, 0),
	borderPress = Color(255, 80, 0),

	foreground = Color(255, 255, 255),
	foregroundHover = Color(255, 127, 0),
	foregroundPress = Color(255, 80, 0),
}

local devCvar = GetConVar("developer")
function imgui.IsDeveloperMode()
	return not imgui.DisableDeveloperMode and devCvar:GetInt() > 0
end

local _devMode = false -- cached local variable updated once in a while

function imgui.Hook(name, id, callback)
	local hookUniqifier = debug.getinfo(4).short_src
	hook.Add(name, "IMGUI / " .. id .. " / " .. hookUniqifier, callback)
end

local localPlayer
local gState = {}

local function shouldAcceptInput()
	-- don't process input during non-main renderpass
	if render.GetRenderTarget() ~= nil then
		return false
	end

	-- don't process input if we're doing VGUI stuff (and not in context menu)
	if vgui.CursorVisible() and vgui.GetHoveredPanel() ~= g_ContextMenu then
		return false
	end
	
	if localPlayer and localPlayer.ATM_LastUsed and localPlayer.ATM_LastUsed > CurTime() then
		return false
	end
	
	return true
end

local function apply_screen_cooldown()
	if localPlayer then
		localPlayer.ATM_LastUsed = CurTime() + 0.2
		return
	end
end

imgui.Hook("PreRender", "Input", function()
	-- calculate mouse state
	if shouldAcceptInput() then
		local useBind = input.LookupBinding("+use", true)
		local USE = useBind and input.GetKeyCode(useBind)

		local wasPressing = gState.pressing
		gState.pressing = (USE and input.IsButtonDown(USE))
		gState.pressed = not wasPressing and gState.pressing
		
		if wasPressing then
			apply_screen_cooldown()
		end
	end
end)

hook.Add("NotifyShouldTransmit", "IMGUI / ClearRenderBounds", function(ent, shouldTransmit)
	if shouldTransmit and ent._imguiRBExpansion then
		ent._imguiRBExpansion = nil
	end
end)

local traceResultTable = {}
local traceQueryTable = { output = traceResultTable, filter = {} }
local function isObstructed(eyePos, hitPos, ignoredEntity)
	local q = traceQueryTable
	q.start = eyePos
	q.endpos = hitPos
	q.filter[1] = localPlayer
	q.filter[2] = ignoredEntity

	local tr = util.TraceLine(q)
	if tr.Hit then
		return true, tr.Entity
	else
		return false
	end
end

function imgui.Start3D2D(pos, angles, scale, distanceHide, distanceFadeStart)
	if not IsValid(localPlayer) then
		localPlayer = LocalPlayer()
	end

	if gState.shutdown == true then
		return
	end

	if gState.rendering == true then
		print(
			"[IMGUI] Starting a new IMGUI context when previous one is still rendering" ..
			"Shutting down rendering pipeline to prevent crashes.."
		)
		gState.shutdown = true
		return false
	end

	_devMode = imgui.IsDeveloperMode()

	local eyePos = localPlayer:EyePos()
	local eyePosToPos = pos - eyePos

	-- OPTIMIZATION: Test that we are in front of the UI
	do
		local normal = angles:Up()
		local dot = eyePosToPos:Dot(normal)

		if _devMode then gState._devDot = dot end

		-- since normal is pointing away from surface towards viewer, dot<0 is visible
		if dot >= 0 then
			return false
		end
	end

	-- OPTIMIZATION: Distance based fade/hide
	if distanceHide then
		local distance = eyePosToPos:Length()
		if distance > distanceHide then
			return false
		end

		if _devMode then
			gState._devDist = distance
			gState._devHideDist = distanceHide
		end

		if distanceHide and distanceFadeStart and distance > distanceFadeStart then
			local blend = math.min(math.Remap(distance, distanceFadeStart, distanceHide, 1, 0), 1)
			render.SetBlend(blend)
			surface.SetAlphaMultiplier(blend)
		end
	end

	gState.rendering = true
	gState.pos = pos
	gState.angles = angles
	gState.scale = scale

	cam.Start3D2D(pos, angles, scale)

	-- calculate mousepos
	if not vgui.CursorVisible() or vgui.IsHoveringWorld() then
		local tr = localPlayer:GetEyeTrace()
		local eyepos = tr.StartPos
		local eyenormal

		if vgui.CursorVisible() and vgui.IsHoveringWorld() then
			eyenormal = gui.ScreenToVector(gui.MousePos())
		else
			eyenormal = tr.Normal
		end

		local planeNormal = angles:Up()

		local hitPos = util.IntersectRayWithPlane(eyepos, eyenormal, pos, planeNormal)
		if hitPos then
			local obstructed, obstructer = isObstructed(eyepos, hitPos, gState.entity)
			if obstructed then
				gState.mx = nil
				gState.my = nil

				if _devMode then gState._devInputBlocker = "collision " .. obstructer:GetClass() .. "/" .. obstructer:EntIndex() end
			else
				local diff = pos - hitPos

				-- This cool code is from Willox's keypad CalculateCursorPos
				local x = diff:Dot(-angles:Forward()) / scale
				local y = diff:Dot(-angles:Right()) / scale

				gState.mx = x
				gState.my = y
			end
		else
			gState.mx = nil
			gState.my = nil

			if _devMode then gState._devInputBlocker = "not looking at plane" end
		end
	else
		gState.mx = nil
		gState.my = nil

		if _devMode then gState._devInputBlocker = "not hovering world" end
	end

	if _devMode then gState._renderStarted = SysTime() end

	return true
end

function imgui.Entity3D2D(ent, lpos, lang, scale, ...)
	gState.entity = ent
	local ret = imgui.Start3D2D(ent:LocalToWorld(lpos), ent:LocalToWorldAngles(lang), scale, ...)
	if not ret then
		gState.entity = nil
	end
	return ret
end

local function calculateRenderBounds(x, y, w, h)
	local pos = gState.pos
	local fwd, right = gState.angles:Forward(), gState.angles:Right()
	local scale = gState.scale
	local firstCorner, secondCorner =
		pos + fwd * x * scale + right * y * scale,
		pos + fwd * (x + w) * scale + right * (y + h) * scale

	local minrb, maxrb = Vector(math.huge, math.huge, math.huge), Vector(-math.huge, -math.huge, -math.huge)

	minrb.x = math.min(minrb.x, firstCorner.x, secondCorner.x)
	minrb.y = math.min(minrb.y, firstCorner.y, secondCorner.y)
	minrb.z = math.min(minrb.z, firstCorner.z, secondCorner.z)
	maxrb.x = math.max(maxrb.x, firstCorner.x, secondCorner.x)
	maxrb.y = math.max(maxrb.y, firstCorner.y, secondCorner.y)
	maxrb.z = math.max(maxrb.z, firstCorner.z, secondCorner.z)

	return minrb, maxrb
end

function imgui.ExpandRenderBoundsFromRect(x, y, w, h)
	local ent = gState.entity
	if IsValid(ent) then
		-- make sure we're not applying same expansion twice
		local expansion = ent._imguiRBExpansion
		if expansion then
			local ex, ey, ew, eh = unpack(expansion)
			if ex == x and ey == y and ew == w and eh == h then
				return
			end
		end

		local minrb, maxrb = calculateRenderBounds(x, y, w, h)

		ent:SetRenderBoundsWS(minrb, maxrb)
		if _devMode then
			print("[IMGUI] Updated renderbounds of ", ent, " to ", minrb, "x", maxrb)
		end

		ent._imguiRBExpansion = {x, y, w, h}
	else
		if _devMode then
			print("[IMGUI] Attempted to update renderbounds when entity is not valid!! ", debug.traceback())
		end
	end
end

local devOffset = Vector(0, 0, 30)
local devColours = {
	background = Color(0, 0, 0, 200),
	title = Color(78, 205, 196),
	mouseHovered = Color(0, 255, 0),
	mouseUnhovered = Color(255, 0, 0),
	pos = Color(255, 255, 255),
	distance = Color(200, 200, 200, 200),
	ang = Color(255, 255, 255),
	dot = Color(200, 200, 200, 200),
	angleToEye = Color(200, 200, 200, 200),
	renderTime = Color(255, 255, 255),
	renderBounds = Color(0, 0, 255)
}

local function developerText(str, x, y, clr)
	draw.SimpleText(
		str, "DefaultFixedDropShadow", x, y, clr, TEXT_ALIGN_CENTER, nil
	)
end

local function drawDeveloperInfo()
	local camAng = localPlayer:EyeAngles()
	camAng:RotateAroundAxis(camAng:Right(), 90)
	camAng:RotateAroundAxis(camAng:Up(), -90)

	cam.IgnoreZ(true)
	cam.Start3D2D(gState.pos + devOffset, camAng, 0.15)

	local bgCol = devColours["background"]
	surface.SetDrawColor(bgCol.r, bgCol.g, bgCol.b, bgCol.a)
	surface.DrawRect(-100, 0, 200, 140)

	local titleCol = devColours["title"]
	developerText("imgui developer", 0, 5, titleCol)

	surface.SetDrawColor(titleCol.r, titleCol.g, titleCol.b)
	surface.DrawLine(-50, 16, 50, 16)

	local mx, my = gState.mx, gState.my
	if mx and my then
		developerText(
			string.format("mouse: hovering %d x %d", mx, my),
			0, 20, devColours["mouseHovered"]
		)
	else
		developerText(
			string.format("mouse: %s", gState._devInputBlocker or ""),
			0, 20, devColours["mouseUnhovered"]
		)
	end

	local pos = gState.pos
	developerText(
		string.format("pos: %.2f %.2f %.2f", pos.x, pos.y, pos.z),
		0, 40, devColours["pos"]
	)

	developerText(
		string.format("distance %.2f / %.2f", gState._devDist or 0, gState._devHideDist or 0),
		0, 53, devColours["distance"]
	)

	local ang = gState.angles
	developerText(string.format("ang: %.2f %.2f %.2f", ang.p, ang.y, ang.r), 0, 75, devColours["ang"])
	developerText(string.format("dot %d", gState._devDot or 0), 0, 88, devColours["dot"])

	local angToEye = (pos - localPlayer:EyePos()):Angle()
	angToEye:RotateAroundAxis(ang:Up(), -90)
	angToEye:RotateAroundAxis(ang:Right(), 90)

	developerText(
		string.format("angle to eye (%d,%d,%d)", angToEye.p, angToEye.y, angToEye.r),
		0, 100, devColours["angleToEye"]
	)

	developerText(
		string.format("rendertime avg: %.2fms", (gState._devBenchAveraged or 0) * 1000),
		0, 120, devColours["renderTime"]
	)

	cam.End3D2D()
	cam.IgnoreZ(false)

	local ent = gState.entity
	if IsValid(ent) and ent._imguiRBExpansion then
		local ex, ey, ew, eh = unpack(ent._imguiRBExpansion)
		local minrb, maxrb = calculateRenderBounds(ex, ey, ew, eh)
		render.DrawWireframeBox(vector_origin, angle_zero, minrb, maxrb, devColours["renderBounds"])
	end
end

function imgui.End3D2D()
	if gState then
		if _devMode then
			local renderTook = SysTime() - gState._renderStarted
			gState._devBenchTests = (gState._devBenchTests or 0) + 1
			gState._devBenchTaken = (gState._devBenchTaken or 0) + renderTook
			if gState._devBenchTests == 100 then
				gState._devBenchAveraged = gState._devBenchTaken / 100
				gState._devBenchTests = 0
				gState._devBenchTaken = 0
			end
		end

		gState.rendering = false
		cam.End3D2D()
		render.SetBlend(1)
		surface.SetAlphaMultiplier(1)

		if _devMode then
			drawDeveloperInfo()
		end

		gState.entity = nil
	end
end

function imgui.CursorPos()
	local mx, my = gState.mx, gState.my
	return mx, my
end

function imgui.IsHovering(x, y, w, h)
	local mx, my = gState.mx, gState.my
	return mx and my and mx >= x and mx <= (x + w) and my >= y and my <= (y + h)
end
function imgui.IsPressing()
	return shouldAcceptInput() and gState.pressing
end
function imgui.IsPressed()
	return shouldAcceptInput() and gState.pressed
end

-- String->Bool mappings for whether font has been created
local _createdFonts = {}

-- Cached IMGUIFontNamd->GModFontName
local _imguiFontToGmodFont = {}

local EXCLAMATION_BYTE = string.byte("!")
function imgui.xFont(font, defaultSize)
	-- special font
	if string.byte(font, 1) == EXCLAMATION_BYTE then

		local existingGFont = _imguiFontToGmodFont[font]
		if existingGFont then
			return existingGFont
		end

		-- Font not cached; parse the font
		local name, size = font:match("!([^@]+)@(.+)")
		if size then size = tonumber(size) end

		if not size and defaultSize then
			name = font:match("^!([^@]+)$")
			size = defaultSize
		end

		local fontName = string.format("IMGUI_%s_%d", name, size)
		_imguiFontToGmodFont[font] = fontName
		if not _createdFonts[fontName] then
			surface.CreateFont(fontName, {
				font = name,
				size = size
			})
			_createdFonts[fontName] = true
		end

		return fontName
	end
	return font
end

function imgui.xButton(x, y, w, h, borderWidth, borderClr, hoverClr, pressColor)
	local bw = borderWidth or 1

	local bgColor = imgui.IsHovering(x, y, w, h) and imgui.skin.backgroundHover or imgui.skin.background
	local borderColor =
		((imgui.IsPressing() and imgui.IsHovering(x, y, w, h)) and (pressColor or imgui.skin.borderPress))
		or (imgui.IsHovering(x, y, w, h) and (hoverClr or imgui.skin.borderHover))
		or (borderClr or imgui.skin.border)

	surface.SetDrawColor(bgColor)
	surface.DrawRect(x, y, w, h)

	if bw > 0 then
		surface.SetDrawColor(borderColor)

		surface.DrawRect(x, y, w, bw)
		surface.DrawRect(x, y + bw, bw, h - bw * 2)
		surface.DrawRect(x, y + h-bw, w, bw)
		surface.DrawRect(x + w - bw + 1, y, bw, h)
	end

	return shouldAcceptInput() and imgui.IsHovering(x, y, w, h) and gState.pressed
end

function imgui.xCursor(x, y, w, h)
	local fgColor = imgui.IsPressing() and imgui.skin.foregroundPress or imgui.skin.foreground
	local mx, my = gState.mx, gState.my

	if not mx or not my then return end

	if x and w and (mx < x or mx > x + w) then return end
	if y and h and (my < y or my > y + h) then return end
	
	local cursorSize = math.ceil( 0.3 / gState.scale )
	
	surface.SetDrawColor( color_white )
	surface.SetMaterial( CH_Mayor.Materials.Cursor )
	surface.DrawTexturedRect( mx - cursorSize + 8, my, 24, 24 )
end

function imgui.xTextButton(text, font, x, y, w, h, borderWidth, color, hoverClr, pressColor)
	local fgColor =
		((imgui.IsPressing() and imgui.IsHovering(x, y, w, h)) and (pressColor or imgui.skin.foregroundPress))
		or (imgui.IsHovering(x, y, w, h) and (hoverClr or imgui.skin.foregroundHover))
		or (color or imgui.skin.foreground)

	local clicked = imgui.xButton(x, y, w, h, borderWidth, color, hoverClr, pressColor)

	font = imgui.xFont(font, math.floor(h * 0.618))
	draw.SimpleText(text, font, x + w / 2, y + h / 2, fgColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

	return clicked
end

return imgui
--addons/cityworker/lua/entities/cityworker_rubble/shared.lua:
ENT.Type            = "anim"
ENT.Base            = "base_gmodentity"

ENT.PrintName       = "Rubble"
ENT.Category        = "City Worker"
ENT.Author          = "Silhouhat"
ENT.Contact 	    = "contact@silhouhat.com"

ENT.Spawnable   	= false
--gamemodes/darkrp/entities/entities/darkrp_tip_jar/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Tip Jar"
ENT.Author = "FPtje"
ENT.Spawnable = false
ENT.IsTipjar = true

function ENT:initVars()
    self.model = "models/props_lab/jar01a.mdl"
    self.damage = 100
    self.callOnRemoveId = "tipjar_activedonation_" .. self:EntIndex() .. "_"

    self.activeDonations = {}
    self.madeDonations = {}

    self.PlayerUse = true
end

function ENT:SetupDataTables()
    self:NetworkVar("Entity", 0, "owning_ent")
end

function ENT:UpdateActiveDonation(ply, amount)
    local old = self.activeDonations[ply]
    self.activeDonations[ply] = amount

    self:PruneActiveDonations()

    ply:CallOnRemove(self.callOnRemoveId .. ply:UserID(), function()
        if not IsValid(self) then return end

        self:ExitActiveDonation(ply)
    end)

    hook.Call("tipjarUpdateActiveDonation", DarkRP.hooks, self, ply, amount, old)
end

function ENT:ExitActiveDonation(ply)
    local old = self.activeDonations[ply]

    self.activeDonations[ply] = nil

    self:PruneActiveDonations()
    hook.Call("tipjarExitActiveDonation", DarkRP.hooks, self, ply, old)

    self:RemoveCallOnRemove(self.callOnRemoveId .. ply:UserID())
end

function ENT:ClearActiveDonations()
    table.Empty(self.activeDonations)
    hook.Call("tipjarClearActiveDonation", DarkRP.hooks, self)
end

function ENT:PruneActiveDonations()
    for ply, _ in pairs(self.activeDonations) do
        if not IsValid(ply) then self.activeDonations[ply] = nil end
    end
end

function ENT:AddDonation(name, amount)
    local lastDonation = self.madeDonations[#self.madeDonations]

    if lastDonation and lastDonation.name == name then
        lastDonation.amount = lastDonation.amount + amount
    else
        table.insert(self.madeDonations, {
            name = name,
            amount = amount,
        })
   end

   -- Enforce maximum of 100 donations
   while #self.madeDonations > 100 do
       table.remove(self.madeDonations, 1)
   end
end

function ENT:ClearDonations()
    table.Empty(self.madeDonations)
end

--addons/turkish_food_mod-main/lua/entities/ekmek/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/gofret/cl_init.lua:
include("shared.lua")
function ENT:Initialize() end
function ENT:Draw() self:DrawModel() end

--lua/entities/heavy_armor/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/ice-stand/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/kofte_durum_hot/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/kulah/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "kulah"
ENT.Category = "Turkish Food Mode"
ENT.Spawnable = false

function ENT:SetupDataTables()
    self:NetworkVar("Entity", 0, "owning_ent")
end
--addons/turkish_food_mod-main/lua/entities/lahmacun/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Lahmacun"
ENT.Category = "Turkish Food Mod"
ENT.Spawnable = true
--lua/entities/medium_armor/cl_init.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/entities/minigame_square_base.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/entities/minigame_square_base.lua:
--[[------------------------------------------------
                        BASE
------------------------------------------------]]--
AddCSLuaFile()

DEFINE_BASECLASS("base_anim")

ENT.Spawnable = false
ENT.AdminOnly = true
-- ENT.Type = "anim"
-- ENT.Base = "base_anim"

ENT.Category = "Minigame Tool Assistant"

ENT.PhysicsDisabled = true


--[[------------------------------------------------
                    Configuration
------------------------------------------------]]--

ENT.STATES = {
   [-12] = Color(200, 200, 200),
    [-2] = color_white,
    [-1] = Color(0, 0, 0),
    [ 0] = Color(0, 0, 0),
    [ 1] = Color(0, 220, 0),
    [11] = Color(0, 120, 0),
    [ 2] = Color(255, 30, 30),
    [12] = Color(180, 0, 0),
    [ 3] = Color(50, 50, 250),
    [13] = Color(0, 0, 160),
    [ 4] = Color(0, 255, 200),
    [14] = Color(20, 130, 100),
    [ 5] = Color(220, 220, 40),
    [15] = Color(140, 140, 0),
    [ 6] = Color(255, 115, 0),
    [16] = Color(130, 80, 20),
    [ 7] = Color(240, 50, 240),
    [17] = Color(130, 0, 130),
}


--[[------------------------------------------------
                    Functions
------------------------------------------------]]--

function ENT:SetupDataTables()
    self:NetworkVar("Int", 0, "State")
    self:NetworkVar("Entity", 0, "owning_ent")

    if ( SERVER ) then
        self:NetworkVarNotify("State", self.OnVarChanged)
    end
end

function ENT:Initialize()
    self:SetCustomCollisionCheck(true)
    self:SetMoveType(MOVETYPE_NONE)
    self:SetSolid(SOLID_VPHYSICS)

    self:DrawShadow(false)

    if SERVER and not self.PhysicsDisabled then
        self:PhysicsInit(SOLID_VPHYSICS)

        local phys = self:GetPhysicsObject()
        if IsValid(phys) then
            phys:EnableMotion(false)
        end
    end
end

function ENT:OnVarChanged(name, old, new)
    self:SetColor( self.STATES[new] or ENT.STATES[-1] )

    if ( new == 0 ) then
        self:SetCollisionGroup(COLLISION_GROUP_WORLD)
        self:SetRenderMode(RENDERMODE_NONE)
    else
        self:SetCollisionGroup(COLLISION_GROUP_NONE)
        self:SetRenderMode(RENDERMODE_NORMAL)
    end
end

function ENT:SetType(ClassName)
    if CLIENT then return end

    hook.Add("OnPhysgunPickup", ClassName, function(ply, ent)
        if ent:GetClass() == ClassName then
            return false
        end
    end)

    hook.Add("GravGunPickupAllowed", ClassName, function(ply, ent)
        if ent:GetClass() == ClassName then
            return false
        end
    end)
end

local NotAllowed = {
    ["remover"] = true
}
function ENT:CanTool(ply, tr, tool, tooltbl, button)
    if NotAllowed[tool] then
        return false
    end

    return true
end

if ( SERVER ) then

    function ENT:UpdateTransmitState()
        return TRANSMIT_ALWAYS
    end

    function ENT:IsActive()
        local GameScript = Minigames.GetOwnerGame(self:Getowning_ent())
        return GameScript and GameScript:IsActive() or false
    end

    hook.Add("PhysgunDrop", "Minigames.PreventPickup", function(ply, ent)
        if ent.Base == "minigame_square_base" then
            local phys = ent:GetPhysicsObject()
            if IsValid(phys) then
                phys:EnableMotion(false)
            end
        end
    end)

elseif ( CLIENT ) then

    function ENT:Draw()
        self:DrawModel()
    end

end
--addons/turkish_food_mod-main/lua/entities/patkof/cl_init.lua:
include("shared.lua")
function ENT:Initialize() end
function ENT:Draw() self:DrawModel() end

--addons/turkish_food_mod-main/lua/entities/patkof/shared.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_blackjack_panel/cl_init.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_blackjack_panel/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Blackjack Panel"
ENT.Author = "Owain Owjo & The One Free-Man"
ENT.Category = "pCasino"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false

function ENT:SetupDataTables()
	self:NetworkVar("Entity", 0, "User")
	self:NetworkVar("Int", 0, "Stage")
	self:NetworkVar("Int", 1, "Hand")
end

function ENT:GetCurrentPad(pos)
	if self:GetStage() == 2 then return end -- There is nothing to do on stage 2 but wait.

	if not self.padCache then
		self.padCache = {}
		self.padCache[1] = {} -- The stage for placing bets
		self.padCache[3] = {} -- The stage for choosing an action

		-- Stage 1
		-- Lower bet
		self.padCache[1]["bet_lower"] = {
			boundsA = {x = -6.7, y = -7.7},
			boundsB = {x = -11.7, y = -3.9},
		}
		-- Raise bet
		self.padCache[1]["bet_raise"] = {
			boundsA = {x = 11.7, y = -7.7},
			boundsB = {x = 6.7, y = -3.9},
		}
		-- Place bet
		self.padCache[1]["bet_place"] = {
			boundsA = {x = 11.7, y = -11.7},
			boundsB = {x = -11.7, y = -8},
		}

		-- Stage 3
		self.padCache[3]["action_double"] = {
			boundsA = {x = -0.2, y = -7.7},
			boundsB = {x = -11.7, y = -3.9},
		}
		self.padCache[3]["action_hit"] = {
			boundsA = {x = -0.2, y = -11.7},
			boundsB = {x = -11.7, y = -8},
		}
		self.padCache[3]["action_stand"] = {
			boundsA = {x = 11.7, y = -11.7},
			boundsB = {x = 0.2, y = -8},
		}
		self.padCache[3]["action_split"] = {
			boundsA = {x = 11.7, y = -7.7},
			boundsB = {x = 0.2, y = -3.9},
		}
	end

	if not self.padCache[self:GetStage()] then return false end

	for k, v in pairs(self.padCache[self:GetStage()]) do
		if (pos.x < v.boundsA.x) and (pos.x > v.boundsB.x) and (pos.y > v.boundsA.y) and (pos.y < v.boundsB.y) then
			return k, v
		end
	end

	return false
end
--addons/pcasino/lua/entities/pcasino_blackjack_table/cl_init.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_mystery_wheel/cl_init.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_npc/cl_init.lua:
include("shared.lua")

function ENT:Initialize()
	-- To prevent some weird issue where the animation was going crazy
	self:SetSequence(self:LookupSequence("idle_subtle"))

	self.hasInitialized = true
end


function ENT:PostData()
	if not self.hasInitialized then
		self:Initialize()
	end

	surface.SetFont("pCasino.Entity.Arrows")
	self.textWidth = surface.GetTextSize(self.data.text.overhead)
end

local surface_setdrawcolor = surface.SetDrawColor
local surface_drawrect = surface.DrawRect
local draw_simpletext = draw.SimpleText
local black = Color(0, 0, 0, 155)
local white = Color(255, 255, 255, 100)
local gold = Color(255, 200, 0, 100)
function ENT:Draw()
	self:DrawModel()
	if self:GetPos():DistToSqr(LocalPlayer():GetPos()) > 200000 then return end

	-- We can piggyback off the distance check to only request the entities data when it's needed :D
	if (not self.data) and (not PerfectCasino.Cooldown.Check(self:EntIndex(), 5)) then
		PerfectCasino.Core.RequestConfigData(self)
		return
	end

	if not self.data then return end

	if (not self.data.text.overhead) or (self.data.text.overhead == " ") then return end

	local ang = LocalPlayer():EyeAngles()
	ang:RotateAroundAxis(ang:Forward(), 90)
	ang:RotateAroundAxis(ang:Right(), 90)

	cam.Start3D2D(self:GetPos()+self:GetUp()*78, ang, 0.07)
		-- Previous bet step
		surface_setdrawcolor(black)
		surface_drawrect(-(self.textWidth + 10)*0.5, 5, self.textWidth + 10, 65)
		-- Border
		surface_setdrawcolor(white)
		surface_drawrect(-(self.textWidth + 20)*0.5, 0, self.textWidth + 20, 5)
		surface_drawrect(-(self.textWidth + 20)*0.5, 5, 5, 65)
		surface_drawrect((self.textWidth*0.5) + 5, 5, 5, 65)
		surface_drawrect(-(self.textWidth + 20)*0.5, 70, self.textWidth+20, 5)
		-- Text
		draw_simpletext(self.data.text.overhead, "pCasino.Entity.Arrows", 0, 35, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	cam.End3D2D()
end
--addons/pcasino/lua/entities/pcasino_sign_wall_logo/cl_init.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_wheel_slot_machine/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Wheel Slot Machine"
ENT.Author = "Owain Owjo & The One Free-Man"
ENT.Category = "pCasino"
ENT.Spawnable = false
ENT.AdminSpawnable = false

function ENT:SetupDataTables()
	self:NetworkVar("Int", 0, "CurrentJackpot")
end

PerfectCasino.Core.RegisterEntity("pcasino_wheel_slot_machine", {
	-- General data
	general = {
		limitUse = {d = false, t = "bool"}
	},
	-- Bet data
	bet = {
		default = {d = 1000, t = "num"}, -- The default bet
	},
	-- Combo data
	combo = {
		{c = {"gold", "gold", "gold"}, p = 0.5, j = false},
		{c = {"coins", "coins", "coins"}, p = 0.8, j = false},
		{c = {"emerald", "emerald", "emerald"}, p = 1, j = false},
		{c = {"bag", "bag", "bag"}, p = 1.6, j = false},
		{c = {"bar", "bar", "bar"}, p = 2, j = false},
		{c = {"coin", "coin", "coin"}, p = 2.5, j = false},
		{c = {"coin", "coin", "anything"}, p = 2, j = false},
		{c = {"anything", "coin", "coin"}, p = 2, j = false},
		{c = {"vault", "vault", "vault"}, p = 2.8, j = false},
		{c = {"chest", "anything", "anything"}, p = 0, j = true},
		{c = {"anything", "chest", "anything"}, p = 0, j = true},
		{c = {"anything", "anything", "chest"}, p = 0, j = true},
	},
	-- Combo data
	wheel = {
		{n = "$1,000", f = "money", i = 1000, p = "dolla"},
		{n = "$10,000", f = "money", i = 10000, p = "dolla"},
		{n = "$100,000", f = "money", i = 100000, p = "dolla"},
		{n = "$1,000,000", f = "money", i = 1000000, p = "dolla"},
		{n = "Jackpot!", f = "jackpot", i = 1000000, p = "diamond"},
		{n = "Nothing", f = "nothing", i = 1000000, p = "melon"},
		{n = "Free Spin", f = "prize_wheel", i = 0, p = "mystery_2"},
		{n = "$1", f = "money", i = 1, p = "dolla"},
		{n = "$1,000", f = "money", i = 1000, p = "dolla"},
		{n = "$100,000", f = "money", i = 100000, p = "dolla"},
		{n = "Nothing", f = "nothing", i = 1000000, p = "melon"},
		{n = "Jackpot!", f = "jackpot", i = 100000, p = "diamond"}
	},
	-- Jackpot data
	jackpot = {
		toggle = {d = true, t = "bool"}, -- The bell chance
		startValue = {d = 10000, t = "num"}, -- The bell chance
		betAdd = {d = 0.5, t = "num"}, -- The % of the bet to add to the jackpot
	},
	-- Chance data
	chance = {
		gold = {d = 15},
		coins = {d = 10},
		emerald = {d = 9},
		bag = {d = 8},
		bar = {d = 6},
		coin = {d = 6},
		vault = {d = 4},
		chest = {d = 1},
	},
},
"models/freeman/owain_slotmachine_wheel.mdl")
--addons/realisticcardealer/lua/entities/rcd_paper/shared.lua:
return gluapack()()
--addons/skeypad_1.2.36/lua/entities/s_deployable_cracker/cl_init.lua:
include("shared.lua")

local white, green, red, orange = Color(255,255,255), Color(0,200,0), Color(200,0,0), Color(130, 92, 10)

local lastStr = ""
local lastMade
local function getRandString(length)
	if lastMade and CurTime() - lastMade < .15 then return lastStr end
	local rand = tostring(function() end)
	rand = string.gsub(rand, "function: ", "")
	rand = string.sub(rand, 0, length)
	lastMade = CurTime()
	lastStr = rand
	return rand
end

local function comparePos(pos1, pos2)
	local dropped = false
	if !istable(pos1) or !istable(pos2) then return false end
	for k,v in pairs(pos1) do
		if pos1[k] ~= pos2[k] then dropped = true break end
	end
	return dropped
end

function ENT:Draw()
	self:DrawModel()
	local phys = self:GetPhysicsObject()
	
	if !self.startPos then self.startPos = self:GetPos() end
	if self.dropped or (self.startPos and comparePos(self:GetPos():ToTable(), self.startPos:ToTable())) then self.dropped = true return end

	local pos = self:LocalToWorld(Vector(1.38, 0.68, 4.316))
	local angles = self:LocalToWorldAngles(Angle(0, -90, 0))

	cam.Start3D2D( pos, angles, 0.017 )
		draw.SimpleText(getRandString(5), slib.createFont("Digital dream", 24, 700), 0, 0, green, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	cam.End3D2D()
end
--addons/skeypad_1.2.36/lua/entities/s_deployable_cracker/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Deployable Keypad Cracker"
ENT.Author = "Stromic"
ENT.Category = "Keypad"
ENT.Spawnable = false
--addons/skeypad_1.2.36/lua/entities/s_keycard/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end
--addons/turkish_food_mod-main/lua/entities/salgam/cl_init.lua:
return gluapack()()
--lua/entities/sammyservers_textscreen/shared.lua:
return gluapack()()
--lua/entities/sammyservers_textscreen/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_entity"
ENT.PrintName = "SammyServers Textscreen"
ENT.Author = "SammyServers"
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.RenderGroup = RENDERGROUP_TRANSLUCENT

function ENT:SetupDataTables()
	self:NetworkVar("Bool", 0, "IsPersisted")
end

local function textScreenCanTool(ply, trace, tool)
	-- only allow textscreen, remover, and permaprops tool
	if IsValid(trace.Entity) and trace.Entity:GetClass() == "sammyservers_textscreen" and tool ~= "textscreen" and tool ~= "remover" and tool ~= "permaprops" then
		return false
	end
end
hook.Add("CanTool", "3D2DTextScreensPreventTools", textScreenCanTool)
--addons/serious_business/lua/entities/sb_crime_guide/shared.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_good_guide/shared.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
store.steampowered.com/curator/32364216

Subscribe to the channel:↓
https://www.youtube.com/c/Famouse

More leaks in the discord:↓ 
https://discord.gg/rFdQwzm
------------------------------------------------------------------------*/

ENT.Base 			= "base_gmodentity";
ENT.Type 			= "anim";

ENT.PrintName		= "Good Guide";
ENT.Category 		= "Serious Business";
ENT.Author			= "EnnX49";

ENT.Contact    		= "";
ENT.Purpose 		= "";
ENT.Instructions 	= "" ;

ENT.Spawnable		= true;
ENT.AdminSpawnable	= true;

ENT.RenderGroup		= RENDERGROUP_TRANSLUCENT;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/serious_business/lua/entities/sb_product/cl_init.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_worker/cl_init.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_worker/cl_init.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
store.steampowered.com/curator/32364216

Subscribe to the channel:↓
www.youtube.com/c/Famouse

More leaks in the discord:↓ 
discord.gg/rFdQwzm
------------------------------------------------------------------------*/

include("shared.lua")

function ENT:Draw()
	self:DrawModel();
end;

function ENT:DrawTranslucent()
	self:Draw();
end;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--gamemodes/darkrp/entities/entities/spawned_food/shared.lua:
return gluapack()()
--gamemodes/darkrp/entities/entities/spawned_money/shared.lua:
return gluapack()()
--gamemodes/darkrp/entities/entities/spawned_money/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Spawned Money"
ENT.Author = "FPtje"
ENT.Spawnable = false
ENT.IsSpawnedMoney = true

function ENT:SetupDataTables()
    self:NetworkVar("Int",0,"amount")
end
--addons/turkish_food_mod-main/lua/entities/stone_oven/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Taş Fırın"
ENT.Category = "Turkish Food Mod Tezgahlar"
ENT.Spawnable = true
--lua/entities/sv_health_kit/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end

--addons/zerosfruitslicer/lua/entities/zfs_fruitbox/cl_init.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/entities/zfs_shop/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:Initialize()
	zfs.Shop.Initialize(self)
end

function ENT:Think()
	zfs.Shop.Think(self)
	self:SetNextClientThink(CurTime())

	return true
end

function ENT:OnRemove()
	zfs.Shop.OnRemove(self)
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_doobytable/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_edible.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_npc_export/cl_init.lua:
include("shared.lua")

function ENT:Draw()
  self:DrawModel()
  if not binbonentdraw then return end
  binbonentdraw(self, "İhracat Paneli", true, 0, 10, 20, true)
  binbonentdraw(self, "Satacağın ot veya esrarların satış işlemlerini benden ayarlayabilirsin.", false, 0,100, 20, false)
end
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_packer/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_packer/shared.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/entities/zgw_goldwasher/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_equipment/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_chest.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Equipment"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_OPAQUE

function ENT:OnBuild(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

    if lp.x > -10 and lp.x < 10 and lp.y < 15 and lp.y > 13 and lp.z > 44 and lp.z < 51 then
        return true
    else
        return false
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

function ENT:OnMove(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)

    if lp.x > -10 and lp.x < 10 and lp.y < 15 and lp.y > 13 and lp.z > 37 and lp.z < 44 then
        return true
    else
        return false
    end
end

function ENT:OnRepair(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)

    if lp.x > -10 and lp.x < 10 and lp.y < 15 and lp.y > 13 and lp.z > 30 and lp.z < 37 then
        return true
    else
        return false
    end
end

function ENT:OnRemoveButton(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

    if lp.x > -10 and lp.x < 10 and lp.y < 15 and lp.y > 13 and lp.z > 23 and lp.z < 30 then
        return true
    else
        return false
    end
end

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_autobreaker/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_meth/shared.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_furnace/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_furnace/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:Initialize()
	zmlab2.Furnace.Initialize(self)
end

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

function ENT:Draw()
	self:DrawModel()
	zmlab2.Furnace.Draw(self)
end

function ENT:OnRemove()
	zmlab2.Furnace.OnRemove(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_npc/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_storage/cl_init.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_collectcrate/cl_init.lua:
include("shared.lua")

-- Draw
function ENT:Draw()
	self:DrawModel()

	if zmlab.f.InDistance(LocalPlayer():GetPos(), self:GetPos(), 200) then
		self:DrawInfo()
	end
end

function ENT:DrawTranslucent()
	self:Draw()
end

-- UI
function ENT:DrawInfo()
	local meth = self:GetMethAmount()
	if meth <= 0 then return end

	local Pos = self:GetPos() + Vector(0, 0, 30)
	local Ang = Angle(0, LocalPlayer():EyeAngles().y - 90, 90)
	local Text = math.Round(meth) .. zmlab.config.UoW
	cam.Start3D2D(Pos, Ang, 0.1)
		draw.DrawText(Text, "zmlab_font4", 0, 5, zmlab.default_colors["white01"], TEXT_ALIGN_CENTER)
	cam.End3D2D()
end

function ENT:Think()
	self:SetNextClientThink(CurTime())
	return true
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_collectcrate/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "TransportCrate"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros Meth Lab"

function ENT:SetupDataTables()
	self:NetworkVar("Float", 0, "MethAmount")
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_frezzingtray/shared.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_methylamin/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:OnRemove()
	self:StopSound("Methylamin_filling")
end

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_methylamin/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_entity"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Methylamin"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros Meth Lab"
ENT.Model = "models/zerochain/zmlab/zmlab_methylamin.mdl"

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_basket_gold.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_conveyorbelt_c_right.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_conveyorbelt")
ENT.Type = "anim"
ENT.Base = "zrms_conveyorbelt"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Conveyorbelt - Right"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.Model = "models/zerochain/props_mining/zrms_conveyorbelt_curved.mdl"
ENT.GravelModel = "models/zerochain/props_mining/zrms_conveyorbelt_c_gravel.mdl"
ENT.GravelAnimTime = 5
ENT.TransportSpeed = 2
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_inserter.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_refiner/shared.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.RenderGroup = RENDERGROUP_OPAQUE
ENT.Spawnable = false
ENT.AdminSpawnable = false
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ENT.PrintName = "Refiner"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

ENT.Model = "models/zerochain/props_mining/zrms_refiner.mdl"
ENT.GravelModel = "models/zerochain/props_mining/zrms_crushedgravel01.mdl"

ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false

ENT.RefinerType = "Iron"

ENT.WorkAmount = 5
ENT.RefineAmount = zrmine.config.RefiningAmount
ENT.RefiningTime = zrmine.config.Iron_RefiningTime
ENT.HoldAmount = zrmine.config.Refiner_Capacity

function ENT:SetupDataTables()

	self:NetworkVar("Entity", 1, "Basket")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	self:NetworkVar("Int", 0, "CurrentState")
	self:NetworkVar("Entity", 0, "ModuleChild")
	self:NetworkVar("Entity", 2, "ModuleParent")
	self:NetworkVar("Int", 2, "ConnectionPos")

	if (SERVER) then
		self:SetBasket(NULL)

		self:SetModuleChild(NULL)
		self:SetModuleParent(NULL)
		self:SetConnectionPos(-1)
		self:SetCurrentState(0)
	end

	self:NetworkVar("Float", 4, "Coal")
	self:NetworkVar("Float", 0, "Iron")
	self:NetworkVar("Float", 1, "Bronze")
	self:NetworkVar("Float", 2, "Silver")
	self:NetworkVar("Float", 3, "Gold")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if SERVER then
		self:SetCoal(0)
		self:SetIron(0)
		self:SetBronze(0)
		self:SetSilver(0)
		self:SetGold(0)
	end

	// NW SETUP STUFF FOR GRAVEL ANIM
	zrmine.f.Gravel_SetupDataTables(self)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	self:NetworkVar("Int", 10, "RefineAnim_Type")

	if (SERVER) then
		self:SetRefineAnim_Type(-1)
	end
end

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_refiner_bronze.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_refiner_coal.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_refiner_gold.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_refiner_silver.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_resource_silver.lua:
return gluapack()()
--addons/zeros_trashman_v1.6.3/lua/entities/ztm_buyermachine/cl_init.lua:
return gluapack()()
--addons/zeros_trashman_v1.6.3/lua/entities/ztm_recycled_block/cl_init.lua:
return gluapack()()
--addons/zeros_trashman_v1.6.3/lua/entities/ztm_recycled_block/cl_init.lua:
/*
    Addon id: 
    Version: v1.6.3 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:Initialize()
	zclib.EntityTracker.Add(self)
end

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:Draw()
	self:DrawModel()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_trashman_v1.6.3/lua/entities/ztm_recycled_block/shared.lua:
/*
    Addon id: 
    Version: v1.6.3 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.Model = "models/zerochain/props_trashman/ztm_recycleblock.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Recycled Block"
ENT.Category = "Zeros Trashman"
ENT.RenderGroup = RENDERGROUP_BOTH
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
    self:NetworkVar("Int", 0, "RecycleType")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

    if (SERVER) then
        self:SetRecycleType(5)
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_distillery_cooler/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_fermbarrel/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_jarpack/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_yeastbeast/yb_jarpack.mdl"
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "JarPack"
ENT.Category = "Zeros YeastBeast"
ENT.RenderGroup = RENDERGROUP_TRANSLUCENT


function ENT:SetupDataTables()
    self:NetworkVar("Int", 0, "JarCount")

    if (SERVER) then
        self:SetJarCount(6)
    end
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_sugar/cl_init.lua:
include("shared.lua")


function ENT:Draw()
	self:DrawModel()
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:OnRemove()
	self:StopParticlesNamed("yb_sugar")
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_upgrade/cl_init.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_upgrade/shared.lua:
return gluapack()()
--addons/glorifiedleveling/lua/effects/glorifiedleveling_confetti/init.lua:

AddCSLuaFile()
EFFECT.Mat = Material( "particles/balloon_bit" )
local particleCount = 200
local confettiSize = 2
local confettiSpread = 650
local confettiLife = 8

function EFFECT:Init( data )
    local vOrigin = data:GetOrigin()
    local emitter = ParticleEmitter( vOrigin, true )

    for i = 0, particleCount do
        local randomPos = VectorRand()
        local particle = emitter:Add( self.Mat, vOrigin + randomPos )

        if particle then
            local vel = math.Rand( 10, confettiSpread )
            particle:SetVelocity( randomPos * vel )

            particle:SetLifeTime( 0 )
            particle:SetDieTime( confettiLife )

            particle:SetStartAlpha( 255 )
            particle:SetEndAlpha( 255 )

            local Size = math.Rand( confettiSize - 1, confettiSize + 2 )
            particle:SetStartSize( Size )
            particle:SetEndSize( 0 )
            particle:SetRoll( math.Rand( 0, 360 ) )
            particle:SetRollDelta( math.Rand( -2, 2 ) )

            particle:SetAirResistance( 200 )
            particle:SetGravity( Vector( 0, 0, -300 ) )

            particle:SetColor( math.Rand( 50, 255 ), math.Rand( 50, 255 ), math.Rand( 50, 255 ) )

            particle:SetCollide( true )

            particle:SetAngleVelocity( Angle( math.Rand( -160, 160 ), math.Rand( -160, 160 ), math.Rand( -160, 160 ) ) )

            particle:SetBounce( 1 )
            particle:SetLighting( false )
        end
    end

    emitter:Finish()
end

function EFFECT:Render() end
--addons/playablepiano/lua/effects/musicnotes/init.lua:
return gluapack()()
--addons/serious_business/lua/effects/sb_worker_fired.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
http://store.steampowered.com/curator/32364216

Subscribe to the channel:↓
www.youtube.com/c/Famouse

More leaks in the discord:↓ 
discord.gg/rFdQwzm
------------------------------------------------------------------------*/

--[[
	Just a first attempt in effect.
	Green text just makes me feel better.
]]--

function EFFECT:Init(data)
	
	local offset = data:GetOrigin();
	
	local particlesAmount = math.random(32, 64);
	local emitter = ParticleEmitter(offset, false);
		for i=0, particlesAmount do
			local particle = emitter:Add("particle/smokesprites_000"..math.random(1, 9), offset);
			
			if (particle) then
				
				particle:SetVelocity(Vector(math.random(-150, 150), math.random(-150, 150), math.random(-16, 128)));
				
				particle:SetLifeTime(0);
				particle:SetDieTime(2.65);
				
				particle:SetStartAlpha(255);
				particle:SetEndAlpha(0);
				
				particle:SetStartSize(math.random(18, 24));
				particle:SetEndSize(math.random(2, 4));
				
				particle:SetRoll(math.random(180, 480));
				particle:SetRollDelta(math.random(-2, 2));
				
				particle:SetAirResistance(256);
				particle:SetGravity(Vector(0, 0, 64));
				
				particle:SetColor(195, 195, 195);
				
				particle:SetCollide(true);
				particle:SetBounce(1);
				
				particle:SetAngleVelocity(Angle(math.random(-2, 2), math.random(-2, 2), math.random(-2, 2)));
				
				particle:SetLighting(true);
			end;
		end;
	emitter:Finish();
end;


function EFFECT:Think()
	return false;
end;


function EFFECT:Render()

end;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/oneprint/lua/oneprint/client/vgui/tabs/shop.lua:
local Shop = {}

Shop.ID = 2
Shop.Name = "Shop"

local matShop = Material( "materials/oneprint/shop.png", "smooth" )

--[[

    formatUpgrades

]]--

local tMutators = {
    [ "income" ] = {
        string.upper( OnePrint:L( "Income" ) ),
        function( i )
            return "+" .. OnePrint:FormatMoney( i )
        end,
        function( i, eEnt )
            return OnePrint:FormatMoney( i * eEnt:GetServers() )
        end
    },
    [ "incomeP" ] = {
        string.upper( OnePrint:L( "Income" ) ),
        function( i )
            return "+" .. string.Comma( i ) .. "%"
        end,
        function( i, eEnt )
            return "+" .. string.Comma( i * eEnt:GetOverclocking() ) .. "%"
        end
    },
    [ "maxHealth" ] = {
        string.upper( OnePrint:L( "Max health" ) ),
        function( i )
            return "+" .. i .. "HP"
        end,
        function( i, eEnt )
            return "+" .. ( i * eEnt:GetDefense() ) .. "HP"
        end
    },
    [ "power" ] = {
        string.upper( OnePrint:L( "Max power" ) ),
        function( i )
            return "+" .. i
        end,
        function( i, eEnt )
            return ( eEnt:GetMaxPower() )
        end
    },
    [ "heat" ] = {
        string.upper( OnePrint:L( "Max temperature" ) ),
        function( i )
            return ( i >= 0 and "+" or "" ) .. i .. "°C"
        end,
        function( i, eEnt )
            return eEnt:GetMaxTemperature() .. "°C"
        end
    },
    [ "watercooling" ] = {
        string.upper( OnePrint:L( "Max watercooling" ) ),
        function( i )
            return "+" .. i
        end,
        function( i, eEnt )
            return ( eEnt:GetMaxWatercooling() )
        end
    },
    [ "overclocking" ] = {
        string.upper( OnePrint:L( "Max overclocking" ) ),
        function( i )
            return "+" .. i
        end,
        function( i, eEnt )
            return ( eEnt:GetMaxOverclocking() )
        end
    },
    [ "security" ] = {
        string.upper( OnePrint:L( "Hacking difficulty" ) ),
        function( i )
            return "+" .. i
        end,
        function( i, eEnt )
            return ( i * eEnt:GetSecurity() )
        end
    },
    [ "maxSecurity" ] = {
        string.upper( OnePrint:L( "Max security" ) ),
        function( i )
            return "+" .. i
        end,
        function( i, eEnt )
            return eEnt:GetMaxSecurity()
        end
    },
    [ "hackNotify" ] = {
        string.upper( OnePrint:L( "Hacking notification" ) ),
        function( i )
            return string.upper( OnePrint:L( "Installation" ) )
        end,
        function( i, eEnt )
            return ( eEnt:GetHackNotif() and string.upper( OnePrint:L( "Installed" ) ) or string.upper( OnePrint:L( "Not installed" ) ) )
        end
    },
    [ "lowHPNotify" ] = {
        string.upper( OnePrint:L( "Low HP notification" ) ),
        function( i )
            return string.upper( OnePrint:L( "Installation" ) )
        end,
        function( i, eEnt )
            return ( eEnt:GetLowHPNotif() and string.upper( OnePrint:L( "Installed" ) ) or string.upper( OnePrint:L( "Not installed" ) ) )
        end
    },
    [ "silencer" ] = {
        string.upper( OnePrint:L( "Noise reduction" ) ),
        function( i )
            return "-" .. ( i * 10 ) .. "dB"
        end,
        function( i, eEnt )
            return "-" .. ( ( i * eEnt:GetSilencer() ) * 10 ) .. "dB"
        end
    },
    [ "maxSilencer" ] = {
        string.upper( OnePrint:L( "Max silencer" ) ),
        function( i )
            return "+" .. i end,
        function( i, eEnt )
            return ( eEnt:GetMaxSilencer() )
        end
    },
}

local function formatUpgrades( sID, bValue, bTotal, eEnt )
    if not OnePrint.Upgrade[ sID ] then
        return ""
    end

    local sVal = ""

    if bTotal then
        for k, v in SortedPairs( OnePrint.Upgrade[ sID ].mutators ) do
            if tMutators[ k ] and tMutators[ k ][ 3 ] then
                sVal = sVal .. tMutators[ k ][ 3 ]( v, eEnt ) .. "__,"
            end
        end

        return sVal
    end

    if bValue then
        local i = 0
        local iMutatorCount = table.Count( OnePrint.Upgrade[ sID ].mutators )

        for k, v in SortedPairs( OnePrint.Upgrade[ sID ].mutators ) do
            i = ( i + 1 )
            if tMutators[ k ] and tMutators[ k ][ 2 ] then
                sVal = sVal .. tMutators[ k ][ 2 ]( v ) .. ( ( i == iMutatorCount ) and "" or "__," )
            end
        end

        return sVal
    end

    for k, v in SortedPairs( OnePrint.Upgrade[ sID ].mutators ) do
        if tMutators[ k ] and tMutators[ k ][ 1 ] then
            sVal = sVal .. tMutators[ k ][ 1 ] .. "\n"
        end
    end

    return sVal
end

-- Upgrades

local tUpgrades = {
    [ 1 ] = {
        mat = Material( "materials/oneprint/upgrades/server.png", "smooth" ),
        iCur = function( dBase ) return dBase.eEntity:GetServers() end,
        iMax = function( dBase ) return dBase.eEntity:GetMaxServers() end,
    },
    [ 2 ] = {
        mat = Material( "materials/oneprint/upgrades/defense.png", "smooth" ),
        iCur = function( dBase ) return dBase.eEntity:GetDefense() end,
        iMax = function( dBase ) return dBase.eEntity:GetMaxDefense() end,
    },
    [ 3 ] = {
        mat = Material( "materials/oneprint/upgrades/watercooling.png", "smooth" ),
        iCur = function( dBase ) return dBase.eEntity:GetWatercooling() end,
        iMax = function( dBase ) return dBase.eEntity:GetMaxWatercooling() end,
    },
    [ 4 ] = {
        mat = Material( "materials/oneprint/upgrades/power.png", "smooth" ),
        iCur = function( dBase ) return dBase.eEntity:GetPower() end,
        iMax = function( dBase ) return dBase.eEntity:GetMaxPower() end,
    },
    [ 5 ] = {
        mat = Material( "materials/oneprint/upgrades/overclocking.png", "smooth" ),
        iCur = function( dBase ) return dBase.eEntity:GetOverclocking() end,
        iMax = function( dBase ) return dBase.eEntity:GetMaxOverclocking() end,
    },
    [ 6 ] = {
        mat = Material( "materials/oneprint/code.png", "smooth" ),
        iCur = function( dBase ) return dBase.eEntity:GetSecurity() end,
        iMax = function( dBase ) return dBase.eEntity:GetMaxSecurity() end,
    },
    [ 7 ] = {
        mat = Material( "materials/oneprint/upgrades/silencer.png", "smooth" ),
        iCur = function( dBase ) return dBase.eEntity:GetSilencer() end,
        iMax = function( dBase ) return dBase.eEntity:GetMaxSilencer() end,
    },
    [ 8 ] = {
        mat = Material( "materials/oneprint/upgrades/notif_hack.png", "smooth" ),
        iCur = function( dBase ) return dBase.eEntity:GetHackNotif() and 1 or 0 end,
        iMax = function( dBase ) return 1 end,
    },
    [ 9 ] = {
        mat = Material( "materials/oneprint/upgrades/notif_lowhp.png", "smooth" ),
        iCur = function( dBase ) return dBase.eEntity:GetLowHPNotif() and 1 or 0 end,
        iMax = function( dBase ) return 1 end,
    },
}

--[[

    Shop.Run

]]--

function Shop.Run( dBase )
    if not dBase or not IsValid( dBase ) then
        return
    end

    if not dBase.eEntity or not IsValid( dBase.eEntity ) or ( dBase.eEntity:GetClass() ~= "oneprint" ) then
        return
    end

    dBase.ActiveTab = vgui.Create( "DPanel", dBase )
    dBase.ActiveTab:SetSize( dBase:GetWide(), dBase:GetTall() )
    dBase.ActiveTab.Paint = nil

    local iSubTitleMargin = ( dBase:GetTall() * .01 )

    local dHeader = vgui.Create( "OnePrintTitle", dBase.ActiveTab )
    dHeader:SetSize( dBase:GetWide() - ( OnePrint.iMargin * 2 ), ( dBase:GetTall() * .09 ) )
    dHeader:SetPos( OnePrint.iMargin, OnePrint.iMargin )
    dHeader:SetHeader( string.upper( OnePrint:L( "Shop" ) ), matShop )

    -- Info
    local dInfo = vgui.Create( "DPanel", dBase.ActiveTab )
    dInfo:SetSize( dHeader:GetWide(), ( dBase.ActiveTab:GetTall() * .56 ) )
    dInfo:SetPos( OnePrint.iMargin, ( OnePrint.iMargin * 2 ) + dHeader:GetTall() )

    dInfo.iUpgrade = 1
    dInfo.iCur = 0
    dInfo.iMax = 0
    dInfo.sTitle = ""
    dInfo.sLocked = string.upper( "Upgrade locked" )
    dInfo.fLerpMat = dInfo.iImgH

    local iImgH = ( dBase:GetTall() * .1 )
    dInfo.iImgH = iImgH - ( iSubTitleMargin * 4 )

    function dInfo:Paint( iW, iH )
        draw.RoundedBox( OnePrint.iRoundness, 0, 0, iW, iH, OnePrint:C( 1 ) )

        if self.bLocked then
            draw.SimpleText( self.sLocked, "OnePrint.3", ( iW * .5 ), ( iH * .5 ), OnePrint:C( 2 ), 1, 1 )
            return
        end
    
        if tUpgrades[ self.iUpgrade ].mat then
            draw.RoundedBox( OnePrint.iRoundness, OnePrint.iMargin, OnePrint.iMargin, iImgH, iImgH, OnePrint:C( 0 ) )

            self.fLerpMat = Lerp( RealFrameTime() * 6, self.fLerpMat, self.iImgH )

            surface.SetDrawColor( OnePrint:C( 5 ) )
            surface.SetMaterial( tUpgrades[ self.iUpgrade ].mat )
            surface.DrawTexturedRectRotated( OnePrint.iMargin + ( iImgH * .5 ), OnePrint.iMargin + ( iImgH * .5 ), self.fLerpMat, self.fLerpMat, 0 )
        end

        draw.SimpleText( self.sTitle, "OnePrint.3", iImgH + ( OnePrint.iMargin * 2 ), ( OnePrint.iMargin - 6 ), OnePrint:C( 5 ), 0, 3 )

        local sText = self.iCur .. "/" .. self.iMax
        surface.SetFont( "OnePrint.2" )
        
        local iTextW, iTextH = surface.GetTextSize( sText )
        draw.SimpleText( sText, "OnePrint.2", iImgH + ( OnePrint.iMargin * 2 ), iImgH + ( OnePrint.iMargin * 2 ), OnePrint:C( 5 ), 0, 4 )

        local iBarW = ( iW - iTextW - ( OnePrint.iMargin * 4 ) - iImgH )
        local iSBarW = ( iBarW / self.iMax ) + ( 6 / self.iMax )

        for i = 1, self.iMax do
            surface.SetDrawColor( OnePrint:C( ( i <= self.iCur ) and 3 or 2 ) )
            surface.DrawRect( ( ( i - 1 ) * iSBarW  ) + iTextW + ( OnePrint.iMargin * 3 ) + iImgH, ( iImgH - 2 ) + iSubTitleMargin, iSBarW - 6, 4 )
        end
    end

    -- Infos
    function dInfo:ShowDetails( iUpgrade, bDisableStartAnim )
        self.iCur = tUpgrades[ iUpgrade ].iCur( dBase )
        self.iMax = tUpgrades[ iUpgrade ].iMax( dBase )
        self.iUpgrade = iUpgrade

        self.sTitle = string.upper( OnePrint.Upgrade[ iUpgrade ].name )
        self.bLocked = ( ( dInfo.iCur + dInfo.iMax ) == 0 ) 
        self.bLimitReached = ( dInfo.iCur >= dInfo.iMax )
        self.bAffordable = LocalPlayer():OP_CanAfford( OnePrint.Upgrade[ dInfo.iUpgrade ].price )

        self.fLerpMat = ( self.iImgH + OnePrint.iMargin )

        if self.bLocked then
            if self.dLabel and IsValid( self.dLabel ) then  
                self.dLabel:SetVisible( false )
            end
            if self.dBuy and IsValid( self.dBuy ) then  
                self.dBuy:SetVisible( false )
            end

            return 
        end

        if self.dLabel and IsValid( self.dLabel ) then
            self.dLabel:SetText( formatUpgrades( iUpgrade ) )
        end

        self.dLabel:SetVisible( true )
        self.dBuy:SetVisible( true )

        local tSplit = string.Split( formatUpgrades( iUpgrade, true ), "__," )
        local tTotal = string.Split( formatUpgrades( iUpgrade, false, true, dBase.eEntity ), "__," )

        local sUpgrade = string.upper( OnePrint:L( "Upgrade" ) )
        local sCurrent = string.upper( OnePrint:L( "Current" ) )

        function self.dLabel:Paint( iW, iH )
            draw.SimpleText( sUpgrade, "OnePrint.5", ( iW * .75 ), 0, OnePrint:C( 2 ), 2, 4 )
            for k, v in pairs( tSplit ) do
                draw.SimpleText( dInfo.bLimitReached and OnePrint:L( "N/A" ) or v, "OnePrint.5", ( iW * .75 ), ( ( iH * .95 ) * k ) - 8, OnePrint:DarkenColor( OnePrint:C( 6 ), 50 ), 2, 1 )    
            end

            draw.SimpleText( sCurrent, "OnePrint.5", iW, 0, OnePrint:C( 2 ), 2, 4 )    
            for k, v in pairs( tTotal ) do
                draw.SimpleText( v, "OnePrint.5", iW, ( ( iH * .95 ) * k ) - 8, OnePrint:C( 6 ), 2, 1 )    
            end
        end

        if self.dBuy and IsValid( self.dBuy ) then
            self.dBuy:SetText( self.bLimitReached and "" or OnePrint:FormatMoney( OnePrint.Upgrade[ iUpgrade ].price ) )
            self.dBuy:SizeToContents()
            self.dBuy:SetWide( self.dBuy:GetWide() + OnePrint.iMargin )
            self.dBuy:AlignRight( OnePrint.iMargin )
            self.dBuy:AlignBottom( OnePrint.iMargin )
        end
    end

    dInfo.dLabel = vgui.Create( "DLabel", dInfo )
    dInfo.dLabel:SetText( "" )
    dInfo.dLabel:SetFont( "OnePrint.5" )
    dInfo.dLabel:SetTextColor( OnePrint:C( 5 ) )
    dInfo.dLabel:SetContentAlignment( 7 )
    dInfo.dLabel:SizeToContents()
    dInfo.dLabel:SetWide( dInfo:GetWide() - ( OnePrint.iMargin * 2 ) )
    dInfo.dLabel:SetPos( OnePrint.iMargin, ( dBase:GetTall() * .19 ) )

    if OnePrint.Cfg.CanUpgradeAll then
        dInfo.dBuyAll = vgui.Create( "DButton", dInfo )        
        dInfo.dBuyAll:SetText( "Upgrade" )
        dInfo.dBuyAll:SetFont( "OnePrint.3" )
        dInfo.dBuyAll:SetTextColor( OnePrint:C( 5 ) )
        dInfo.dBuyAll:SizeToContents()
        dInfo.dBuyAll:SetWide( dInfo.dBuyAll:GetWide() + OnePrint.iMargin )
        dInfo.dBuyAll:AlignRight( OnePrint.iMargin + 220 )
        dInfo.dBuyAll:AlignBottom( OnePrint.iMargin )
        dInfo.dBuyAll.tCol = OnePrint:C( 3 )
        dInfo.dBuyAll.fLerpTextX = 0
        dInfo.dBuyAll.fLerpBoxH = ( OnePrint.iMargin * .25 )

        function dInfo.dBuyAll:Paint( iW, iH )
            if dInfo.bAffordable and not dInfo.bLocked and not dInfo.bLimitReached then
                self.tCol = OnePrint:C( 3 )
            else
                self.tCol = OnePrint:C( 2 )
            end

            if dInfo.bLocked then
                self.sText = nil
            else
                self.sText = string.upper( OnePrint:L( dInfo.bAffordable and "Upgrade All" or "Not enough money" ) )
            end

            if dInfo.bLimitReached then
                self.sText = ""
                self:SetTextColor( OnePrint:C( 0 ) )
            else
                self:SetTextColor( OnePrint:C( 5 ) )
            end

            if not dInfo.bLocked and dInfo.bLimitReached then
                self.fLerpTextX = Lerp( RealFrameTime() * 6, self.fLerpTextX, iW + OnePrint.iMargin )

                if not self.bLimit then
                    self.bLimit = true
                    self:SetText( "" )
                end
            else
                self.fLerpTextX = Lerp( RealFrameTime() * 6, self.fLerpTextX, 0 )

                local upgradeNeeded = 0
                
                local iCur, iMax
                if tUpgrades && tUpgrades[dInfo.iUpgrade] then
                    if tUpgrades[dInfo.iUpgrade]["iCur"] && tUpgrades[dInfo.iUpgrade]["iMax"] then
                        iCur = tUpgrades[dInfo.iUpgrade]["iCur"](dBase)
                        iMax = tUpgrades[dInfo.iUpgrade]["iMax"](dBase)

                        upgradeNeeded = iMax - iCur
                    end
                end

                if self.bLimit then
                    self.bLimit = nil
                end

                self:SetText( OnePrint:FormatMoney( OnePrint.Upgrade[ dInfo.iUpgrade ].price * upgradeNeeded ) )

                self.fLerpBoxH = Lerp( RealFrameTime() * 12, self.fLerpBoxH, self.Hovered and iH or ( OnePrint.iMargin * .25 ) )

                surface.SetDrawColor( self.tCol )
                surface.DrawRect( 0, ( iH - self.fLerpBoxH ), iW, self.fLerpBoxH )
            end

            if self.sText then
                draw.SimpleText( self.sText, "OnePrint.4", - OnePrint.iMargin + self.fLerpTextX, iH + OnePrint.iMargin, OnePrint:C( 2 ), 2, 4 )
            end
        end

        function dInfo.dBuyAll:DoClick()
            if dBase and dBase.eEntity and IsValid( dBase.eEntity ) and dBase.eEntity:CanUpgrade( dInfo.iUpgrade ) then

                local upgradeNeeded = 0
                
                local iCur, iMax
                if tUpgrades && tUpgrades[dInfo.iUpgrade] then
                    if tUpgrades[dInfo.iUpgrade]["iCur"] && tUpgrades[dInfo.iUpgrade]["iMax"] then
                        iCur = tUpgrades[dInfo.iUpgrade]["iCur"](dBase)
                        iMax = tUpgrades[dInfo.iUpgrade]["iMax"](dBase)

                        upgradeNeeded = iMax - iCur
                    end
                end

                if LocalPlayer():OP_CanAfford( OnePrint.Upgrade[ dInfo.iUpgrade ].price * iMax ) then
                    net.Start( "OnePrintNW" )
                        net.WriteUInt( 11, 4 )
                        net.WriteUInt( dInfo.iUpgrade, 4 )
                        net.WriteEntity( dBase.eEntity )
                        net.WriteUInt( upgradeNeeded, 12 )
                    net.SendToServer()

                    OnePrint:Notify( dBase.eEntity, string.format( OnePrint:L( "%s upgrade installed" ), OnePrint.Upgrade[ dInfo.iUpgrade ].name ), 0, 3 )

                    timer.Simple( .3, function()
                        if dInfo and IsValid( dInfo ) and dInfo.iUpgrade then
                            dInfo:ShowDetails( dInfo.iUpgrade )
                        end
                    end )
                else
                    OnePrint:Notify( dBase.eEntity, OnePrint:L( "Not enough money" ), 1, 3 )
                end

                OnePrint:Play2DSound( "oneprint/notify.mp3" )
            else
                OnePrint:Play2DSound( "oneprint/keypress_standard.mp3" )
            end
        end
    end

    dInfo.dBuy = vgui.Create( "DButton", dInfo )        
    dInfo.dBuy:SetText( "" )
    dInfo.dBuy:SetFont( "OnePrint.3" )
    dInfo.dBuy:SetTextColor( OnePrint:C( 5 ) )
    dInfo.dBuy:SizeToContents()
    dInfo.dBuy:SetWide( dInfo.dBuy:GetWide() + OnePrint.iMargin )
    dInfo.dBuy:AlignRight( OnePrint.iMargin )
    dInfo.dBuy:AlignBottom( OnePrint.iMargin )
    dInfo.dBuy.tCol = OnePrint:C( 3 )
    dInfo.dBuy.fLerpTextX = 0
    dInfo.dBuy.fLerpBoxH = ( OnePrint.iMargin * .25 )

    function dInfo.dBuy:Paint( iW, iH )
        if dInfo.bAffordable and not dInfo.bLocked and not dInfo.bLimitReached then
            self.tCol = OnePrint:C( 3 )
        else
            self.tCol = OnePrint:C( 2 )
        end

        if dInfo.bLocked then
            self.sText = nil
        else
            self.sText = string.upper( OnePrint:L( dInfo.bAffordable and "Upgrade" or "Not enough money" ) )
        end

        if dInfo.bLimitReached then
            self.sText = string.upper( OnePrint:L( "Limit reached" ) )
            self:SetTextColor( OnePrint:C( 0 ) )
        else
            self:SetTextColor( OnePrint:C( 5 ) )
        end

        if not dInfo.bLocked and dInfo.bLimitReached then
            self.fLerpTextX = Lerp( RealFrameTime() * 6, self.fLerpTextX, iW + OnePrint.iMargin )

            if not self.bLimit then
                self.bLimit = true
                self:SetText( "" )
            end
        else
            self.fLerpTextX = Lerp( RealFrameTime() * 6, self.fLerpTextX, 0 )

            if self.bLimit then
                self.bLimit = nil
                self:SetText( OnePrint:FormatMoney( OnePrint.Upgrade[ dInfo.iUpgrade ].price ) )
            end

            self.fLerpBoxH = Lerp( RealFrameTime() * 12, self.fLerpBoxH, self.Hovered and iH or ( OnePrint.iMargin * .25 ) )

            surface.SetDrawColor( self.tCol )
            surface.DrawRect( 0, ( iH - self.fLerpBoxH ), iW, self.fLerpBoxH )
        end

        if self.sText then
            draw.SimpleText( self.sText, "OnePrint.4", - OnePrint.iMargin + self.fLerpTextX, iH + OnePrint.iMargin, OnePrint:C( 2 ), 2, 4 )
        end
    end

    function dInfo.dBuy:DoClick()
        if dBase and dBase.eEntity and IsValid( dBase.eEntity ) and dBase.eEntity:CanUpgrade( dInfo.iUpgrade ) then
            if LocalPlayer():OP_CanAfford( OnePrint.Upgrade[ dInfo.iUpgrade ].price ) then
                net.Start( "OnePrintNW" )
                    net.WriteUInt( 2, 4 )
                    net.WriteUInt( dInfo.iUpgrade, 4 )
                    net.WriteEntity( dBase.eEntity )
                net.SendToServer()

                OnePrint:Notify( dBase.eEntity, string.format( OnePrint:L( "%s upgrade installed" ), OnePrint.Upgrade[ dInfo.iUpgrade ].name ), 0, 3 )

                timer.Simple( .3, function()
                    if dInfo and IsValid( dInfo ) and dInfo.iUpgrade then
                        dInfo:ShowDetails( dInfo.iUpgrade )
                    end
                end )
            else
                OnePrint:Notify( dBase.eEntity, OnePrint:L( "Not enough money" ), 1, 3 )
            end

            OnePrint:Play2DSound( "oneprint/notify.mp3" )
        else
            OnePrint:Play2DSound( "oneprint/keypress_standard.mp3" )
        end
    end

    -- Layout
    local dLayout = vgui.Create( "DIconLayout", dBase.ActiveTab )
    dLayout:SetSize( dHeader:GetWide(), ( dBase.ActiveTab:GetTall() - dHeader:GetTall() - dInfo:GetTall() - ( OnePrint.iMargin * 3 ) ) )
    dLayout:SetPos( OnePrint.iMargin, ( OnePrint.iMargin * 3 ) + dHeader:GetTall() + dInfo:GetTall() )
    dLayout:SetSpaceX( OnePrint.iMargin )
    dLayout:SetSpaceY( OnePrint.iMargin )

    -- Buttons
    local iColumns = 5
    local iLines = 2

    for k, v in ipairs( tUpgrades ) do
        local dContainer = dLayout:Add( "DButton" )
        dContainer:SetText( "" )
        dContainer:SetSize( ( dLayout:GetWide() / iColumns ) - dLayout:GetSpaceX() + ( OnePrint.iMargin * .2 ), ( dLayout:GetTall() / iLines ) - dLayout:GetSpaceY() )
        dContainer.bLocked = false 

        local iScale = math.min( dContainer:GetWide(), dContainer:GetTall() )
        dContainer.fLerpScale = 0

        local sLocked = string.upper( OnePrint:L( "Locked" ) )

        function dContainer:Paint( iW, iH )
            OnePrint:DrawContainer( self, OnePrint.iRoundness  )

            local bSelected = ( dInfo.iUpgrade == k )
            if bSelected then
                surface.SetDrawColor( OnePrint:C( self.bLocked and 2 or 6 ) )
                self.fLerpScale = Lerp( RealFrameTime() * 2, self.fLerpScale, iScale - ( OnePrint.iMargin * 3 ) )
            else
                surface.SetDrawColor( OnePrint:C( 2 ) )
                self.fLerpScale = Lerp( RealFrameTime() * 2, self.fLerpScale, iScale - ( OnePrint.iMargin * ( self.Hovered and 3 or 4 ) ) )
            end

            if v.mat then
                surface.SetMaterial( v.mat )
                surface.DrawTexturedRectRotated( ( iW * .5 ), ( iH * .5 ), self.fLerpScale, self.fLerpScale, 0 )
            end

            local iCur, iMax = v.iCur( dBase ), v.iMax( dBase )
            if ( iCur == iMax ) and ( iMax == 0 ) then
                self.bLocked = true
                draw.SimpleText( sLocked, "OnePrint.5", ( iW * .5 ), ( iH * .5 ), OnePrint:C( 4 ), 1, 1 )
            else
                self.bLocked = nil
                draw.SimpleText( iCur .. "/" .. iMax, "OnePrint.5", iW - ( OnePrint.iMargin * .5 ), iH, OnePrint:C( bSelected and 6 or 2 ), 2, 4 )
            end
        end

        function dContainer:DoClick()
            dInfo:ShowDetails( k )
            OnePrint:Play2DSound( "oneprint/keypress_standard.mp3" )

            self.fLerpScale = iScale - ( OnePrint.iMargin * 2.5 )
        end
    end

    dInfo:ShowDetails( 1, true )
end

OnePrint:RegisterTab( Shop )