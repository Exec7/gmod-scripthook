--Stealed clientside server code by exechack.cc
--Hostname: [TR] Venom Roleplay | DarkRP #venom25 - discord.gg/eniyisi  - Part 9/12 - 06/04/2025


--PATH lua/autorun/!!!!!!!!!!!!!!!!!!!!!!!binbon.lua.lua:
if SERVER then 
resource.AddSingleFile("maps/rp_downtown_tits_d3_fixed.bsp")
resource.AddWorkshop("2645523224")
for i,addon in pairs(engine.GetAddons()) do
	if addon.mounted then
		resource.AddWorkshop( addon.wsid )
	end
end

resource.AddFile = function(a)
end 
resource.AddSingleFile = function(a)
end
resource.AddWorkshop = function(a)
end
end
if CLIENT then 
    MsgC("\n", Color(255,0,0), "Venom Roleplay", Color(255,255,255), " - Sunucuya Hosgeldiniz!\n")
    MsgC("\n", Color(255,0,0), "Venom Roleplay", Color(255,255,255), " - Sunucuya Hosgeldiniz!\n")
    MsgC("\n", Color(255,0,0), "Venom Roleplay", Color(255,255,255), " - Sunucuya Hosgeldiniz!\n")
    bb_debug_console = false  
    if bb_debug_console == false then 
    local eskiprint, eskimsg, eskimsgc = print, Msg,  MsgC
    print = function() end
    Msg = function() end
    MsgC = function() end
    hook.Add("InitPostEntity", "bbprint_override", function()
        print = function(a) eskiprint(a) end
        Msg = function(a) eskimsg(a) end
        MsgC = function(a) eskimsgc(a) end
    end)
    end
end


--lua/autorun/!0_zclib_load.lua:
local function NicePrint(txt)
	if SERVER then
		MsgC(Color(84, 150, 197), txt .. "\n")
	else
		MsgC(Color(193, 193, 98), txt .. "\n")
	end
end

local function PreLoadFile(path)
	if CLIENT then
		include(path)
	else
		AddCSLuaFile(path)
		include(path)
	end
end

local function LoadFiles(path)
	local files, _ = file.Find(path .. "/*", "LUA")

	for _, v in pairs(files) do
		if string.sub(v, 1, 3) == "sh_" then
			if CLIENT then
				include(path .. "/" .. v)
			else
				AddCSLuaFile(path .. "/" .. v)
				include(path .. "/" .. v)
			end
		end
	end

	for _, v in pairs(files) do
		if string.sub(v, 1, 3) == "cl_" then
			if CLIENT then
				include(path .. "/" .. v)
			else
				AddCSLuaFile(path .. "/" .. v)
			end
		elseif string.sub(v, 1, 3) == "sv_" then
			include(path .. "/" .. v)
		end
	end
end

local function Initialize()

	PreLoadFile("zclib/sh_main_config.lua")
	PreLoadFile("zclib/util/sh_atracker.lua")
	LoadFiles("zclib/util")
	LoadFiles("zclib/util/player")
	LoadFiles("zclib/generic")
	LoadFiles("zclib/data")
	LoadFiles("zclib/zone")
	LoadFiles("zclib/inventory")
	LoadFiles("zclib/inventory/vgui")

	NicePrint(" ")
	NicePrint("Zeros Libary loaded!")
	NicePrint(" ")
end

Initialize()

--lua/zclib/util/sh_hooks.lua:
zclib = zclib or {}
zclib.Hook = zclib.Hook or {}

////////////////////////////////////////////
///////////////// Hooks ////////////////////
////////////////////////////////////////////
zclib.Hook.List = zclib.Hook.List or {}

function zclib.Hook.PrintAll()
	PrintTable(zclib.Hook.List)
end

function zclib.Hook.GetUniqueIdentifier(eventName, identifier)
	local _identifier = "a.zclib." .. eventName .. "." .. identifier
	if SERVER then
		_identifier = _identifier .. ".sv"
	else
		_identifier = _identifier .. ".cl"
	end
	return _identifier
end

function zclib.Hook.Exist(eventName, identifier)
	local reg_hooks = hook.GetTable()
	local _identifier = zclib.Hook.GetUniqueIdentifier(eventName, identifier)
	local exists = false
	if reg_hooks[eventName] and reg_hooks[eventName][_identifier] then
		exists = true
	end

	//print(eventName.." "..identifier.. "Exists: "..tostring(exists))
	return exists
end

function zclib.Hook.Add(eventName, identifier, func)

	// Lets make sure we remove the hook if its allready exist
	zclib.Hook.Remove(eventName, identifier)

	local _identifier = zclib.Hook.GetUniqueIdentifier(eventName, identifier)


	if zclib.util.FunctionValidater(func) then

		hook.Add(eventName, _identifier, func)

		if zclib.Hook.List[eventName] == nil then
			zclib.Hook.List[eventName] = {}
		end

		table.insert(zclib.Hook.List[eventName], identifier)
	end
end

function zclib.Hook.Remove(eventName, identifier)
	//print("Hook.Remove: [" .. eventName .. "] (" .. identifier .. ")")
	local _identifier = zclib.Hook.GetUniqueIdentifier(eventName, identifier)

	hook.Remove(eventName, _identifier)

	if zclib.Hook.List[eventName] then
		table.RemoveByValue(zclib.Hook.List[eventName], identifier)
	end
end
////////////////////////////////////////////
////////////////////////////////////////////

--lua/zclib/util/sh_money.lua:
zclib = zclib or {}
zclib.Money = zclib.Money or {}
zclib.Money.List = zclib.Money.List or {}

/*

	Adds money support for diffrent gamemodes

*/
function zclib.Money.AddCurrency(id,data) zclib.Money.List[id] = data end

zclib.Money.AddCurrency("darkrp",{
	installed = function(ply) return DarkRP ~= nil end,
	give = function(ply,money) ply:addMoney(money) end,
	take = function(ply,money) ply:addMoney(-money) end,
	get = function(ply) return (tonumber(ply:getDarkRPVar("money")) or 0) end,
	has = function(ply,money) return (tonumber(ply:getDarkRPVar("money")) or 0) >= money end,
})

zclib.Money.AddCurrency("nutscript",{
	installed = function(ply) return nut ~= nil end,
	give = function(ply,money) ply:getChar():giveMoney(money) end,
	take = function(ply,money) ply:getChar():takeMoney(money) end,
	get = function(ply) return ply:getChar():getMoney() or 0 end,
	has = function(ply,money) return ply:getChar():hasMoney(money) end,
})

zclib.Money.AddCurrency("basewars",{
	installed = function(ply) return BaseWars ~= nil end,
	give = function(ply,money) ply:GiveMoney(money) end,
	take = function(ply,money) ply:GiveMoney(-money) end,
	get = function(ply) return ply:GetMoney() or 0 end,
	has = function(ply,money) return (ply:GetMoney() or 0) >= money end,
})

zclib.Money.AddCurrency("underdone",{
	installed = function(ply) return engine.ActiveGamemode() == "underdone" end,
	give = function(ply,money) ply:AddItem("money", money) end,
	take = function(ply,money) ply:RemoveItem("money", money) end,
	get = function(ply)
		// Not supported atm
		return 0
	end,
	has = function(ply,money) return ply:HasItem("money", money) end,
})

zclib.Money.AddCurrency("helix",{
	installed = function(ply) return ix ~= nil end,

	give = function(ply,money)
		local char = ply:GetCharacter()
		if char then
			char:SetMoney((char:GetMoney() or 0) + money)
		end
	end,

	take = function(ply,money)
		local char = ply:GetCharacter()
		if char then
			char:SetMoney((char:GetMoney() or 0) - money)
		end
	end,

	get = function(ply)
		local char = ply:GetCharacter()
		if char then
			return char:GetMoney() or 0
		else
			return 0
		end
	end,

	has = function(ply,money)
		local char = ply:GetCharacter()
		if char then
			return (char:GetMoney() or 0) >= money
		else
			return false
		end
	end,
})

zclib.Money.AddCurrency("sandbox",{
	installed = function(ply) return engine.ActiveGamemode() == "sandbox" and ply.PS2_Wallet == nil end,
	give = function(ply,money) end,
	take = function(ply,money) end,
	get = function(ply) return 0 end,
	has = function(ply,money) return true end,
})

zclib.Money.AddCurrency("sbox_ps2",{
	installed = function(ply) return engine.ActiveGamemode() == "sandbox" and ply.PS2_Wallet end,
	give = function(ply,money) ply:PS2_AddStandardPoints(money) end,
	take = function(ply,money) ply:PS2_AddStandardPoints(-money) end,
	get = function(ply) return ply.PS2_Wallet.points or 0 end,
	has = function(ply,money) return ply.PS2_Wallet.points >= money end,
})


/*
	Lets figure out what currency is used on this server
*/
function zclib.Money.GetCurrency(ply)
	local CurrencyID
	for k,v in pairs(zclib.Money.List) do
		if v.installed(ply) then
			CurrencyID = k
			break
		end
	end
	return CurrencyID
end

if SERVER then
	function zclib.Money.Give(ply, money)
		if money <= 0 then return end
		if not IsValid(ply) then return end

		local CurrencyID = zclib.Money.GetCurrency(ply)
		local CurrencyData = zclib.Money.List[CurrencyID]
		if not CurrencyData or not CurrencyData.give then return end

		CurrencyData.give(ply,money)
	end

	function zclib.Money.Take(ply, money)
		if money <= 0 then return end
		if not IsValid(ply) then return end

		local CurrencyID = zclib.Money.GetCurrency(ply)
		local CurrencyData = zclib.Money.List[CurrencyID]
		if not CurrencyData or not CurrencyData.take then return end

		CurrencyData.take(ply,money)
	end
end

// Return how much money the player has
function zclib.Money.Get(ply)
	if not IsValid(ply) then return end

	local CurrencyID = zclib.Money.GetCurrency(ply)
	local CurrencyData = zclib.Money.List[CurrencyID]
	if not CurrencyData or not CurrencyData.get then return end

	return CurrencyData.get(ply)
end

function zclib.Money.Has(ply, money)
	if money <= 0 then return false end
	if not IsValid(ply) then return end

	local CurrencyID = zclib.Money.GetCurrency(ply)
	local CurrencyData = zclib.Money.List[CurrencyID]
	if not CurrencyData or not CurrencyData.has then return end

	return CurrencyData.has(ply,money)
end

// Returns the formated money as string
function zclib.Money.Format(money,round)
	if not money then return "0" end
	if round then
		money = math.Round(money)
	end
	money = tostring(money)
	local sep = ","
	local dp = string.find(money, "%.") or #money + 1

	for i = dp - 4, 1, -3 do
		money = money:sub(1, i) .. sep .. money:sub(i + 1)
	end

	return money
end

function zclib.Money.Display(money,round)
	if not zclib.config.CurrencyInvert then
		return zclib.config.Currency .. zclib.Money.Format(money,round)
	else
		return zclib.Money.Format(money,round) .. zclib.config.Currency
	end
end

--lua/zclib/util/sh_table.lua:
return gluapack()()
--lua/zclib/util/cl_3d2dvgui.lua:
if SERVER then return end
/*

3D2D VGUI Wrapper
Copyright (c) 2015-2017 Alexander Overvoorde, Matt Stevens

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

zclib = zclib or {}
zclib.vgui3d = zclib.vgui3d or {}

local origin = Vector(0, 0, 0)
local angle = Angle(0, 0, 0)
local normal = Vector(0, 0, 0)
local scale = 0
local maxrange = 0

// static angle
local s_angle = Angle(0,0,0)

// Helper functions

local function getCursorPos()
	local p = util.IntersectRayWithPlane(LocalPlayer():EyePos(), LocalPlayer():GetAimVector(), origin, normal)

	// if there wasn't an intersection, don't calculate anything.
	if not p then return end
	if WorldToLocal(LocalPlayer():GetShootPos(), s_angle, origin, angle).z < 0 then return end

	if maxrange > 0 and p:Distance(LocalPlayer():EyePos()) > maxrange then return end

	local pos = WorldToLocal(p, s_angle, origin, angle)

	return pos.x, -pos.y
end


function zclib.vgui3d.GetCursorPosition(pnl)
	if not IsValid(pnl) then return end
	local cx, cy = getCursorPos()


	local _x = (cx or 0) / (pnl.Scale or 1)
	local _y = (cy or 0) / (pnl.Scale or 1)

	return _x, _y
end

local function getParents(pnl)
	local parents = {}
	local parent = pnl:GetParent()
	while parent do
		table.insert(parents, parent)
		parent = parent:GetParent()
	end
	return parents
end

local function absolutePanelPos(pnl)
	local x, y = pnl:GetPos()
	local parents = getParents(pnl)

	for _, parent in ipairs(parents) do
		local px, py = parent:GetPos()
		x = x + px
		y = y + py
	end

	return x, y
end

local function pointInsidePanel(pnl, x, y)
	local px, py = absolutePanelPos(pnl)
	local sx, sy = pnl:GetSize()

	if not x or not y then return end

	x = x / scale
	y = y / scale

	return pnl:IsVisible() and x >= px and y >= py and x <= px + sx and y <= py + sy
end

// Input

local inputWindows = {}
local usedpanel = {}


local function postPanelEvent(pnl, event, ...)
	if not IsValid(pnl) or not pnl:IsVisible() or not pointInsidePanel(pnl, getCursorPos()) then return false end

	local handled = false

	for i, child in pairs(table.Reverse(pnl:GetChildren())) do
		if postPanelEvent(child, event, ...) then
			handled = true
			break
		end
	end

	if not handled and pnl[event] then
		pnl[event](pnl, ...)
		usedpanel[pnl] = {...}
		return true
	else
		return false
	end
end

// Always have issue, but less
local function checkHover(pnl, x, y, found)
	if not (x and y) then
		x, y = getCursorPos()
	end

	local validchild = false
	for c, child in pairs(table.Reverse(pnl:GetChildren())) do
		if not child:IsMouseInputEnabled() then continue end

		local check = checkHover(child, x, y, found or validchild)

		if check then
			validchild = true
		end
	end

	if found then
		if pnl.Hovered then
			pnl.Hovered = false
			if pnl.OnCursorExited then pnl:OnCursorExited() end
		end
	else
		if not validchild and pointInsidePanel(pnl, x, y) then
			pnl.Hovered = true
			if pnl.OnCursorEntered then pnl:OnCursorEntered() end

			return true
		else
			pnl.Hovered = false
			if pnl.OnCursorExited then pnl:OnCursorExited() end
		end
	end

	return false
end

// Mouse input

hook.Add("KeyPress", "zclib.vgui3d.VGUI3D2DMousePress", function(_, _key)
	if _key == IN_USE then
		for pnl in pairs(inputWindows) do
			if IsValid(pnl) then
				origin = pnl.Origin
				scale = pnl.Scale
				angle = pnl.Angle
				normal = pnl.Normal

				local key = input.IsKeyDown(KEY_LSHIFT) and MOUSE_RIGHT or MOUSE_LEFT

				postPanelEvent(pnl, "OnMousePressed", key)
			end
		end
	end
end)

hook.Add("KeyRelease", "zclib.vgui3d.VGUI3D2DMouseRelease", function(_, _key)
	if _key == IN_USE then
		for pnl, key in pairs(usedpanel) do
			if IsValid(pnl) then
				origin = pnl.Origin
				scale = pnl.Scale
				angle = pnl.Angle
				normal = pnl.Normal

				if pnl["OnMouseReleased"] then
					pnl["OnMouseReleased"](pnl, key[1])
				end

				usedpanel[pnl] = nil
			end
		end
	end
end)

hook.Add("CalcAbsolutePosition", "zclib.vgui3d.VGUI3D2DEntPosChange", function(pos,ang)
	zclib.vgui3d.Start3D2D(pos,ang,origin)
end)


function zclib.vgui3d.Start3D2D(pos, ang, res)
	origin = pos
	scale = res
	angle = ang
	normal = ang:Up()
	maxrange = 0

	cam.Start3D2D(pos, ang, res)
end

function zclib.vgui3d.MaxRange3D2D(range)
	maxrange = isnumber(range) and range or 0
end

function zclib.vgui3d.IsPointingPanel(pnl)
	origin = pnl.Origin
	scale = pnl.Scale
	angle = pnl.Angle
	normal = pnl.Normal

	return pointInsidePanel(pnl, getCursorPos())
end

local meta_Panel = FindMetaTable("Panel")
function meta_Panel:ZCLIBPaint3D2D()
	if not self:IsValid() then return end

	// Add it to the list of windows to receive input
	inputWindows[self] = true

	// Override think of DFrame's to correct the mouse pos by changing the active orientation
	if self.Think and not self.OThink then
		self.OThink = self.Think

		self.Think = function()
			origin = self.Origin
			scale = self.Scale
			angle = self.Angle
			normal = self.Normal
			self:OThink()
		end
	end

	// Update the hover state of controls
	checkHover(self)

	// Store the orientation of the window to calculate the position outside the render loop
	self.Origin = origin
	self.Scale = scale
	self.Angle = angle
	self.Normal = normal

	// Draw it manually
	self:SetPaintedManually(false)
		self:PaintManual()
	self:SetPaintedManually(true)
end

function zclib.vgui3d.End3D2D()
	cam.End3D2D()
end

--lua/zclib/generic/sh_notify.lua:
return gluapack()()
--lua/zclib/generic/cl_itemshooter.lua:
return gluapack()()
--lua/zclib/inventory/sh_inventory.lua:
return gluapack()()
--lua/zclib/inventory/cl_inventory.lua:
if SERVER then return end
zclib = zclib or {}
zclib.Inventory = zclib.Inventory or {}

/*

    This inventory system does not get saved and is only used to temporarly store items

*/

/*
    Opens the players inventory vgui
*/
net.Receive("zclib_player_open", function(len)
    zclib.Debug_Net("zclib_player_open",len)

    local entInv = net.ReadEntity()

    // If we currently removing / placing something then stop
    zclib.PointerSystem.Stop()

    zclib.vgui.Page("Your Inventory",function(main,top)

        main:SetWide(650 * zclib.wM)

        local close_btn = zclib.vgui.ImageButton(940 * zclib.wM,10 * zclib.hM,50 * zclib.wM, 50 * zclib.hM,top,zclib.Materials.Get("close"),function()
            main:Close()
        end,false)
        close_btn:Dock(RIGHT)
        close_btn:DockMargin(10 * zclib.wM,0 * zclib.hM,0 * zclib.wM,0 * zclib.hM)
        close_btn.IconColor = zclib.colors["red01"]

        local seperator = zclib.vgui.AddSeperator(top)
        seperator:SetSize(5 * zclib.wM, 50 * zclib.hM)
        seperator:Dock(RIGHT)
        seperator:DockMargin(10 * zclib.wM,0 * zclib.hM,0 * zclib.wM,0 * zclib.hM)

        // Build Inventory
        local inv = zclib.Inventory.VGUI({
            parent = main,
            inv_ent = entInv,
            ExtraData = {
                SizeW = 80,
                SizeH = 80,
            },

            CanSelect = function(ItemData ,slot_data) return true end,

            OnDragDrop = function(DragPanel,ReceiverPanel) end
        })
        inv:SetSize(650 * zclib.wM, 370 * zclib.hM)

        main.OnInventoryChanged = function()

            // Do we already have the inventory build?
            if not IsValid(main.Inventory) then return end

            // Update the inventory
            main.Inventory:Update(zclib.Inventory.Get(entInv))
        end
    end)
end)



/*
    Gets called from server to send the new inventory data to the client
*/
net.Receive("zclib_Inventory_Sync", function(len)
    zclib.Debug_Net("zclib_Inventory_Sync", len)
    local dataLength = net.ReadUInt(16)
    local dataDecompressed = util.Decompress(net.ReadData(dataLength))
    local inv = util.JSONToTable(dataDecompressed)
    local ent = net.ReadEntity()
    local ent_index = net.ReadUInt(16)

	if not inv then zclib.ErrorPrint("zclib_Inventory_Sync > Inventory Data invalid!") return end

    zclib.InventoryCache[ent_index] = table.Copy(inv)

    if IsValid(ent) then
        ent.zclib_inv = table.Copy(inv)

        hook.Run("zclib_OnInventorySynch",ent)
    end
    ent.InventoryChanged = true

	// Is the interface currently open?
	if not IsValid(zclib_main_panel) then return end

	// Is the entity which inventory got synched the current ActiveVGUIEntity or the LocalPlayer
	if (ent ~= zclib.vgui.ActiveEntity and ent ~= LocalPlayer()) then return end

	// Did the inventory change?
    if not zclib_main_panel.OnInventoryChanged then return end

	zclib_main_panel:OnInventoryChanged()
end)


/*
    Draw the Pickup indicator
*/
local function DrawPickupIndicator()
    local tr = LocalPlayer():GetEyeTrace()
    if tr == nil then return end
    local ent = tr.Entity
    if not IsValid(ent) then return end
    if zclib.Inventory.CanPickup(ent:GetClass()) == false then return end

    local pos = ent:GetPos()
    pos = pos:ToScreen()

    local am = zclib.ItemDefinition.GetAmount(ent:GetClass(),ent)
    if am > 1 then am = "x" .. am else am = nil end

    local he = ent:Health()
    if he and he > 0 then he = (1 / ent:GetMaxHealth()) * ent:Health() else he = nil end
    zclib.util.DrawInfoBox(pos,{
        txt01 = zclib.Inventory.GetEntityName(ent),
        txt02 = "[ALT + E]",
        txt03 = am,
        color = zclib.colors["green01"],
        bar_fract = he,
        bar_col01 = zclib.colors["red01"],
        bar_col02 = zclib.colors["green01"],
    })
end

zclib.Hook.Add("HUDPaint", "zclib_player_inventory", function() if zclib.config.Inventory.ShowItemPickup then DrawPickupIndicator() end end)



// TODO Implement a language system in to zclib and connect it here

function zclib.Inventory.Slot(ItemData,GotSelected,CanSelect,OnSelect,PreDraw,PostDraw)
    local main_pnl = vgui.Create("zclib_inventory_slot")
    main_pnl:SetSize(200 * zclib.wM, 200 * zclib.hM)

    function main_pnl:PreDraw(w, h)
        if PreDraw then pcall(PreDraw,w,h,self,self.ItemData) end
    end

    function main_pnl:PostDraw(w, h)
        if PostDraw then pcall(PostDraw,w,h,self,self.ItemData) end
    end

    function main_pnl:CanSelect()
        local _,canselect = xpcall( CanSelect, function() end, self.ItemData )
        return canselect
    end

    function main_pnl:OnSelect()
        pcall(OnSelect,self.ItemData)
    end

    function main_pnl:GotSelected()
        local _,isselect = xpcall( GotSelected, function() end, self.ItemData )
        return isselect
    end

    return main_pnl
end

/*
zclib.Inventory.VGUI({
    parent = parent,

    // The entity who has the inventory
    inv_ent = entity,

    CanSelect = function(ItemData ,slot_data)
    end,

    OnSelect = function(slot_id)
    end,

    PreDraw = function(w,h,s,ItemData)
    end,

    PostDraw = function(w,h,s,ItemData)
    end,

    // This can be used to modify the inventory item panel
    OnItemUpdate = function(slot_id,slot_data,item_pnl)
    end,

    // Gets called when one item is dragged on another one
    // Return true to prevent one item being switched with the other one
    OnDragDrop = function(DragPanel,ReceiverPanel)

    end
})
*/

// Keeps track on which slot panel is currently selected
zclib.Inventory.SelectedSlot = nil

function zclib.Inventory.VGUI(data)
    zclib.Debug("zclib.Inventory.VGUI")

    if IsValid(data.parent.Inventory) then data.parent.Inventory:Remove() end

    local title = (data.ExtraData and data.ExtraData.title) and data.ExtraData.title //or "Inventory"//zclib.language["Inventory:"]
    local main = zclib.vgui.Panel(data.parent, title)
    main:SetSize(600 * zclib.wM, 300 * zclib.hM)

    // This mainly checks if the player has left / rightclicked on something that isnt a option box and removes the optionbox if its active
    main.Think = function() zclib.Inventory.ClickLogic(vgui.GetHoveredPanel()) end
    data.parent.Inventory = main



    // Keep track on the inventory entity
    main.inv_ent = data.inv_ent

    // Store the SlotOptions in the inventory panel
    main.SlotOptions = data.SlotOptions

    local list,scroll = zclib.vgui.List(main)
    list:DockMargin(0 * zclib.wM,0 * zclib.hM,-15 * zclib.wM,0 * zclib.hM)
    scroll:DockMargin(10 * zclib.wM,10 * zclib.hM,0 * zclib.wM,0 * zclib.hM)
    scroll.Paint = function(s, w, h)
        //draw.RoundedBox(5, 0, 0, w, h, zclib.colors["red01"])
    end

    local itmW,itmH = 100, 100
    local ItemSize
    if data.ExtraData then
        if data.ExtraData.ItemSize then ItemSize = data.ExtraData.ItemSize end
        if data.ExtraData.SizeW then itmW = data.ExtraData.SizeW end
        if data.ExtraData.SizeH then itmH = data.ExtraData.SizeH end
    end

    main.Items = {}
    main.UpdateItem = function(self,slot_id,slot_data)
        if slot_data == nil then return end

        local item_pnl = main.Items[slot_id]

        if not IsValid(item_pnl) then

            local fitmW = (ItemSize or itmW) * zclib.wM
            local fitmH = (ItemSize or itmH) * zclib.hM

            item_pnl = vgui.Create("zclib_inventory_slot")
            item_pnl:SetSize(fitmW, fitmH)
            item_pnl:SetPos( fitmW * slot_id, fitmH )

            function item_pnl:PreDraw(w, h)
                if data.PreDraw then pcall(data.PreDraw,w,h,self,self.ItemData) end
            end

            function item_pnl:PostDraw(w, h)
                if data.PostDraw then pcall(data.PostDraw,w,h,self,self.ItemData) end
            end

            function item_pnl:CanSelect()
                if data.CanSelect == nil then return false end
                if zclib.Inventory.SlotIsEmpty(data.inv_ent,slot_id) == true then
                    return false
                else
                    local _,canselect = xpcall( data.CanSelect, function() end, itmDat ,slot_data)
                    return canselect
                end
            end

            function item_pnl:OnSelect()
                zclib.Inventory.SelectedSlot = self

                zclib.Inventory.RemoveSlotOptions()
                zclib.Inventory.SlotOptions(self,slot_id)

                if data.OnSelect then pcall(data.OnSelect,slot_id,item_pnl) end
            end

            function item_pnl:OnClick()
                if data.OnClick then pcall(data.OnClick,slot_id,item_pnl) end
            end


            function item_pnl:GotSelected()
                return zclib.Inventory.SelectedSlot == self
            end

            list:Add(item_pnl)

            if main.Items == nil then main.Items = {} end
            main.Items[slot_id] = item_pnl
        end

        // Tell the slot which inventory he listens too
        item_pnl.Inventory = main

        // Tell the slot which entity his inventory belongs to
        item_pnl.inv_ent = data.inv_ent

        // If the item has no price value then lets give it one
        // TODO Not sure if this is still needed
        if slot_data and table.Count(slot_data) > 0 and slot_data.Price == nil then slot_data.Price = zclib.ItemDefinition.GetPrice(slot_data.Class,slot_data) end

        // Tell the panel what its id and data is
        item_pnl.slot_id = slot_id
        item_pnl.slot_data = slot_data

        // Send the slot panel its data so it can display / render the image of the item
        item_pnl:Update(slot_data)

        // Call inventory function should we wanna call anything else
        if data.OnItemUpdate then pcall(data.OnItemUpdate,slot_id,slot_data,item_pnl) end


        ///////////////// DRAG LOGIC
        // We make the DragBase id unique to the entity which prevents items being draged from one inventory to another one
        local DragBaseID = "zcLibDragBase_" .. data.inv_ent:EntIndex()

        // If the slot is not empty then it can be drag/dropped
        if item_pnl.slot_data and table.IsEmpty(item_pnl.slot_data) == false then
            item_pnl:Droppable( DragBaseID )
        end

        // Tell the panel it can receiver other panels being dropped on it
        item_pnl:Receiver(DragBaseID, function(s, panels, bDoDrop, Command, x, y)
            if bDoDrop and data.OnDragDrop then
                local rec = s
                for k, v in pairs(panels) do
                    local dra = v
                    if dra == nil then continue end
                    if dra == rec then continue end

                    // Play drop animation and sound
                    dra:OnDrop()

                    // If the Drag/Drop function returns true then stop here and dont perform the item switch
                    if data.OnDragDrop(dra, rec) == true then break end

                    zclib.Inventory.Drag(dra.inv_ent,rec.inv_ent,dra.slot_id,rec.slot_id,dra,rec)
                    break
                end
            end
        end)

        // Checks if the player is currently over the DropToFloor area on the interface
        local function OnDropToFloor()
            if not IsValid(zclib_main_panel) then return false end
            local mX,mY = input.GetCursorPos()

            local pX,pY = zclib_main_panel:GetPos()

            local maxX, maxY = pX - 10 * zclib.wM,pY + zclib_main_panel:GetTall()
            local minX, minY = pX - 110 * zclib.wM,pY

            if mX > minX and mX < maxX and mY > minY and mY < maxY then
                return true
            else
                return false
            end
        end

        item_pnl.OnStartDragging = function()
            zclib.Hook.Add("HUDPaint", "zclib_player_inventory_droptofloor", function()
                if IsValid(item_pnl) and IsValid(zclib_main_panel) then

                    local slotPnl = vgui.GetHoveredPanel()
                    if IsValid(slotPnl) then
                        slotPnl.LastHoveredByDragPanel = CurTime()
                    end

                    local x,y = zclib_main_panel:GetPos()
                    draw.RoundedBox(5, x - 110 * zclib.wM, y, 100 * zclib.hM, zclib_main_panel:GetTall(), zclib.colors["black_a200"])
                    if OnDropToFloor() then
                        zclib.util.DrawOutlinedBox(x - 110 * zclib.wM, y, 100 * zclib.hM, zclib_main_panel:GetTall(), 2, zclib.colors["green01"])
                    end
                    draw.SimpleText("DROP", zclib.GetFont("zclib_font_medium"), x - 60 * zclib.wM, y + (zclib_main_panel:GetTall() / 2), color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
                else
                    zclib.Hook.Remove("HUDPaint", "zclib_player_inventory_droptofloor")
                end
            end)
        end

        item_pnl.OnStopDragging = function()
            zclib.Hook.Remove("HUDPaint", "zclib_player_inventory_droptofloor")

            // If we drag the item on nothing then that means we want to drop the item from the inventory
            local pnl = vgui.GetHoveredPanel()
            if OnDropToFloor() and (pnl == nil or pnl:GetClassName() == "CGModBase") then
                zclib.Inventory.DropToFloor(data.inv_ent,item_pnl.slot_id)
            end
        end
        /////////////////
    end



    main.Update = function(s,inv) for slot_id, slot_data in pairs(inv) do main:UpdateItem(slot_id,slot_data) end end
    main:Update(zclib.Inventory.Get(data.inv_ent))

    scroll:InvalidateLayout(true)
    scroll:SizeToChildren(false, true)

    list:InvalidateLayout(true)
    list:SizeToChildren(false, true)

    main:InvalidateLayout(true)
    main:SizeToChildren(false, true)

    return main
end

// This needs to be called when the player clicks on a inventory slot which has a item
function zclib.Inventory.SlotOptions(pnl,slot)

    if pnl.Inventory.SlotOptions and table.Count(pnl.Inventory.SlotOptions) <= 0 then return end

    local SlotData = zclib.Inventory.GetSlotData(pnl.Inventory.inv_ent,slot)
    if SlotData == nil then return end
    if SlotData.Class == nil then return end

    local ItemDefinition = zclib.ItemDefinition.Get(SlotData.Class)

    local bg_pnl = vgui.Create("DPanel",pnl.Inventory)
    bg_pnl:Dock(FILL)
    bg_pnl.Paint = function(s, w, h)
        if input.IsKeyDown(KEY_ESCAPE) then s:Remove() end
        zclib.util.DrawBlur(s, 1, 5)
        draw.RoundedBox(5, 0, 0, w, h, zclib.colors["black_a100"])
    end
    zclib.vgui.SlotOptionPanel = bg_pnl
    bg_pnl:InvalidateLayout( true )
    bg_pnl:InvalidateParent(true)

    local main_pnl = vgui.Create("DPanel",bg_pnl)
    main_pnl:SetSize(300 * zclib.wM, 500 * zclib.hM)
    main_pnl:Center()
    main_pnl.Paint = function(s, w, h)
        //if input.IsKeyDown(KEY_ESCAPE) then s:Remove() end
        draw.RoundedBox(5, 0,0, w, h , zclib.colors["ui00"])

        draw.SimpleText("Options", zclib.GetFont("zclib_font_medium"), w / 2, 5 * zclib.hM, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
        draw.RoundedBox(0, 5 * zclib.wM,40 * zclib.hM, w - (10 * zclib.wM), 4 * zclib.hM , zclib.colors["ui02"])
    end
    //main_pnl:MoveToFront()

    main_pnl:DockPadding(5 * zclib.wM, 50 * zclib.hM, 5 * zclib.wM, 5 * zclib.hM)

    // Keep refrence of which slot of the inventory got clicked on
    main_pnl.slot = slot

    local function OptionButton(color_overwrite,txt,tooltip,action)
        local bttn_pnl = vgui.Create("DButton", main_pnl)
        bttn_pnl:Dock(TOP)
        bttn_pnl:DockMargin( 0, 0, 0, 5  * zclib.hM )
        bttn_pnl:SetSize(main_pnl:GetWide(), 30 * zclib.hM)
        bttn_pnl:SetAutoDelete(true)
        bttn_pnl:SetText("")
        bttn_pnl.IsOptionBoxButton = true

        local desc = string.Replace(tooltip or txt,"$ItemName",pnl.slot_data.Name)
        if pnl.slot_data.Price then desc = string.Replace(desc,"$ItemPrice",zclib.Money.Display(pnl.slot_data.Price)) end

        bttn_pnl:SetTooltip(desc)
        bttn_pnl.Paint = function(s, w, h)
            draw.RoundedBox(0, 0, 0, w, h, zclib.colors["ui02"])
            draw.SimpleText(txt, zclib.GetFont("zclib_font_small"), w / 2, h / 2, color_overwrite, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
            if s:IsHovered() then
                draw.RoundedBox(0, 0, 0, w, h, zclib.colors["white_a15"])
            end
        end
        bttn_pnl.DoClick = function()
            pcall(action)
        end
    end

    // If we have custom slotOptions then use them instead
    if pnl.Inventory.SlotOptions then
        for k,v in ipairs(pnl.Inventory.SlotOptions) do
            OptionButton(v.color,v.name,v.desc,function()
                v.func(slot,pnl)
                zclib.Inventory.RemoveSlotOptions()
            end)
        end
    else

        // Use option
        if ItemDefinition and ItemDefinition.OnUse then
            OptionButton(zclib.colors["blue01"],"Use","Uses $ItemName.",function()
                zclib.Inventory.UseItem(pnl.Inventory.inv_ent,slot)
            end)
        end

        // Equipt option for weapons
        if zclib.ItemDefinition.IsWeapon(SlotData.Class,SlotData) then
            OptionButton(zclib.colors["blue01"],"Equipt","Equipt $ItemName.",function()
                zclib.Inventory.EquiptItem(pnl.Inventory.inv_ent,slot)
                zclib.vgui.ForceClose()
            end)
        end

        // If the Item has a model or a Drop function then we allow it to be drop
        if (ItemDefinition == nil or ItemDefinition.PreventDrop == nil) and pnl.Inventory.inv_ent ~= LocalPlayer() and ItemDefinition.PreventCollect == nil then
            OptionButton(zclib.colors["text01"],"Collect","Collects $ItemName and places it in your inventory.",function()
                zclib.Inventory.CollectItem(pnl.Inventory.inv_ent,slot)
            end)
        end

        // If the Item has a model or a Drop function then we allow it to be drop
        if ItemDefinition == nil or ItemDefinition.PreventDrop == nil then
            OptionButton(zclib.colors["text01"],"Place","Places $ItemName in the world or send to some inventory.",function()
                zclib.Inventory.ThrowItem(pnl.Inventory.inv_ent,slot)
            end)
        end

		if ItemDefinition.CustomOptions then
			for k, v in pairs(ItemDefinition.CustomOptions(SlotData) or {}) do
				OptionButton(v.color, v.name, v.name .. " $ItemName.", function()

					v.func(LocalPlayer(),pnl.Inventory.inv_ent,slot,pnl)

					zclib.Inventory.CustomOption(pnl.Inventory.inv_ent, slot, k)
				end)
			end
		end

        // Destroy options
        OptionButton(zclib.colors["red01"],"Destroy","Destroy $ItemName.",function()
            zclib.Inventory.DestroyItem(pnl.Inventory.inv_ent,slot)
        end)


    end

    main_pnl:InvalidateLayout( true )
    main_pnl:SizeToChildren( false, true )
    main_pnl:Center()
    return main_pnl
end

// Removes the item options
function zclib.Inventory.RemoveSlotOptions()
    zclib.Inventory.SelectedSlot = nil
    if IsValid(zclib.vgui.SlotOptionPanel) then
        zclib.vgui.SlotOptionPanel:Remove()
    end
end

local RightClickIsDown = false
local LefClickIsDown = false
function zclib.Inventory.ClickLogic(pnl)

    // If the player RightClicks on something thats not a item slot panel then close the Item Option panel if its open
    if (input.IsMouseDown(MOUSE_RIGHT) and not RightClickIsDown) or (input.IsMouseDown(MOUSE_LEFT) and not LefClickIsDown) then
        if not IsValid(pnl) then
            zclib.Inventory.RemoveSlotOptions()
        else
            if pnl.IsOptionBoxButton then return end

            zclib.Inventory.RemoveSlotOptions()
        end
    end

    LefClickIsDown = input.IsMouseDown(MOUSE_LEFT)
    RightClickIsDown = input.IsMouseDown(MOUSE_RIGHT)
end


/*

    Slot Options

*/

// Drops the specified item on the floor
function zclib.Inventory.DropToFloor(ent,SlotID)
    net.Start("zclib_Inventory_DropToFloor")
    net.WriteEntity(ent)
    net.WriteInt(SlotID,16)
    net.SendToServer()
end

// Informs the server that one item got dragged on another one
function zclib.Inventory.Drag(DraggedEnt,ReceiverEnt,DraggedID,ReceiverID,DraggedPnl,ReceiverPnl)

    net.Start("zclib_Inventory_Drag")
    net.WriteEntity(DraggedEnt)
    net.WriteEntity(ReceiverEnt)
    net.WriteInt(DraggedID,10)
    net.WriteInt(ReceiverID,10)
    net.SendToServer()

    local ply = LocalPlayer()
    if not IsValid(DraggedEnt) then return end
    if not IsValid(ReceiverEnt) then return end
    if DraggedID == nil then return end
    if ReceiverID == nil then return end
    if zclib.util.InDistance(DraggedEnt:GetPos(), ply:GetPos(), 500) == false then return end

    local DraggedData = zclib.Inventory.GetSlotData(DraggedEnt,DraggedID)
    local ReceiverData = zclib.Inventory.GetSlotData(ReceiverEnt,ReceiverID)

    // Can be used to perform some other action when one item gets droped on another one
    local result01 = hook.Run("zclib_Inventory_OnDragDrop",ply,DraggedEnt,DraggedData,ReceiverData,DraggedPnl,ReceiverPnl)
    if result01 then return end

    // Can the item be used on the reciever item
    // Examble: A hammer can be used on a egg to crack it
    // The Dragged Item will not be removed or changed
    // The Receiver Item will be changed or removed
    local ModifiedReceiverData = hook.Run("zclib_Inventory_DragDrop_CanUse",ply,DraggedEnt,DraggedData,ReceiverData,DraggedPnl,ReceiverPnl)
    if ModifiedReceiverData then return end

    // Removes both items and creates a new one
    local ResultData = hook.Run("zclib_Inventory_DragDrop_CanCombine",ply,DraggedEnt,DraggedData,ReceiverData,DraggedPnl,ReceiverPnl)
    if ResultData then return end
end

// Moves a Item from one Inventory to another one instantly
function zclib.Inventory.CollectItem(ent,slot)
    net.Start("zclib_Inventory_Collect")
    net.WriteEntity(ent)
    net.WriteUInt(slot,16)
    net.SendToServer()

    zclib.Inventory.RemoveSlotOptions()
end

// Uses the item of the specified slot
function zclib.Inventory.UseItem(ent,slot)

    zclib.Inventory.RemoveSlotOptions()

    // Here we call the use function on client and stop any further call if it returns
    local Result
    local SlotData = zclib.Inventory.GetSlotData(ent,slot)
    if SlotData and SlotData.Class then
        local ItemDefinition = zclib.ItemDefinition.Get(SlotData.Class)
        if ItemDefinition and ItemDefinition.OnUse then
            Result = ItemDefinition.OnUse(LocalPlayer())
        end
    end
    if Result then return end

    net.Start("zclib_Inventory_Use")
    net.WriteEntity(ent)
    net.WriteInt(slot,10)
    net.SendToServer()
end

// Equipts the weapon of the specified slot
function zclib.Inventory.EquiptItem(ent,slot)

    zclib.Inventory.RemoveSlotOptions()

    net.Start("zclib_Inventory_Equipt")
    net.WriteEntity(ent)
    net.WriteInt(slot,10)
    net.SendToServer()
end

// Deletes the content of the specified slot
function zclib.Inventory.DestroyItem(ent,slot)
    net.Start("zclib_Inventory_Destroy")
    net.WriteEntity(ent)
    net.WriteInt(slot,10)
    net.SendToServer()

    zclib.Inventory.RemoveSlotOptions()
end

// Throws the content of the specified slot from one Inventory to another one
function zclib.Inventory.ThrowItem(from, SlotID)

    local SlotData = zclib.Inventory.GetSlotData(from,SlotID)
    if SlotData == nil or table.IsEmpty(SlotData) then
        return
    end

    zclib_main_panel:Close()

    zclib.PointerSystem.Start(from, function()
        // OnInit
        zclib.PointerSystem.Data.MainColor = zclib.colors["green01"]
        zclib.PointerSystem.Data.ActionName = "Throw"//zclib.language["Throw"]
        zclib.PointerSystem.Data.CancelName = "Cancel"//zclib.language["Cancel"]
    end, function()
        // OnLeftClick

        zclib.Inventory.SelectedSlot = nil

        SlotData = zclib.Inventory.GetSlotData(from,SlotID)
        if SlotData == nil or table.IsEmpty(SlotData) then
            zclib.PointerSystem.Stop()
            return
        end

        if SlotData.Model == nil and not IsValid(zclib.PointerSystem.Data.Target) then
            zclib.vgui.Notify("You cant place this on the floor!",NOTIFY_ERROR)
            return
        end


        if zclib.util.InDistance(zclib.PointerSystem.Data.Pos, LocalPlayer():GetPos(), 500) == false then
            zclib.vgui.Notify("Too far away!",NOTIFY_ERROR)
            return
        end

        // Send the target to the SERVER
        net.Start("zclib_Inventory_Throw")
        net.WriteEntity(from)
        net.WriteEntity(zclib.PointerSystem.Data.Target or NULL)
        net.WriteVector(zclib.PointerSystem.Data.Pos)
        net.WriteUInt(SlotID,16)
        net.SendToServer()

        local toPos = zclib.PointerSystem.Data.Pos
        if IsValid(zclib.PointerSystem.Data.Target) then
            toPos = zclib.PointerSystem.Data.Target:GetPos()
        end

        local traveltime = zclib.Inventory.GetThrowTime(from:GetPos(),toPos)
        zclib.ItemShooter.Add(from:GetPos() + Vector(0,0,25),toPos + Vector(0,0,25),traveltime,function(ent)

            zclib.Inventory.ApplyItemVisuals(ent,SlotData)

            // Can be used by other scripts to update the thrown items appearance
            hook.Run("zclib_Inventory_PreItemThrown",SlotID,ent,from,zclib.PointerSystem.Data.Target or toPos)
        end)

        zclib.PointerSystem.Stop()
    end, function()

        // Catch the Target
        if IsValid(zclib.PointerSystem.Data.HitEntity) and zclib.Inventory.IsThrowTarget(zclib.PointerSystem.Data.HitEntity,from,SlotID) then
            zclib.PointerSystem.Data.Target = zclib.PointerSystem.Data.HitEntity
        else
            zclib.PointerSystem.Data.Target = nil
        end

        if zclib.util.InDistance(zclib.PointerSystem.Data.Pos, LocalPlayer():GetPos(), 500) then
            zclib.PointerSystem.Data.MainColor = zclib.colors["green01"]
        else
            zclib.PointerSystem.Data.MainColor = zclib.colors["red01"]
        end

        // Update PreviewModel
        if IsValid(zclib.PointerSystem.Data.PreviewModel) then
            if IsValid(zclib.PointerSystem.Data.Target) then
                zclib.PointerSystem.Data.PreviewModel:SetColor(zclib.PointerSystem.Data.MainColor)
                zclib.PointerSystem.Data.PreviewModel:SetPos(zclib.PointerSystem.Data.Target:GetPos())
                zclib.PointerSystem.Data.PreviewModel:SetAngles(zclib.PointerSystem.Data.Target:GetAngles())
                zclib.PointerSystem.Data.PreviewModel:SetModel(zclib.PointerSystem.Data.Target:GetModel())
                zclib.PointerSystem.Data.PreviewModel:SetModelScale(zclib.PointerSystem.Data.Target:GetModelScale())
                zclib.PointerSystem.Data.PreviewModel:SetNoDraw(false)
            else
                zclib.PointerSystem.Data.PreviewModel:SetNoDraw(true)
            end
        end
    end,nil,function()
    end)
end

// Performs a custom function on the specified slot item
function zclib.Inventory.CustomOption(ent,slot,SlotOption)

    zclib.Inventory.RemoveSlotOptions()

    net.Start("zclib_Inventory_CustomOption")
    net.WriteEntity(ent)
    net.WriteInt(slot,10)
	net.WriteString(SlotOption)
    net.SendToServer()
end

--addons/aphone/lua/aphone/_libs/__header/sh_devconfig.lua:
// You shouldn't be in this file if you are not a developer, you should edit the sh_config in aphone/_libs
// If you got any issues with this config, I won't help you because I consider that you are a developer, therefore able to debug errors
// Default painting
aphone.MaxPainting = 30
aphone.DebugMode = false
--addons/aphone/lua/aphone/_libs/_utilities/cl_pictures.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/_utilities/cl_stencils.lua:
return gluapack()()
--addons/aphone/lua/aphone/_libs/_utilities/cl_tdlib.lua:
/*---------------------------------------------------------------------------
	Three's Derma Lib
	Made by Threebow

	You are free to use this anywhere you like, or sell any addons
	made using this, as long as I am properly accredited.
---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------
	Constants
---------------------------------------------------------------------------*/
local blur = Material("pp/blurscreen")
local gradLeft = Material("vgui/gradient-l")
local gradUp = Material("vgui/gradient-u")
local gradRight = Material("vgui/gradient-r")
local gradDown = Material("vgui/gradient-d")


/*---------------------------------------------------------------------------
	Collection of various utilities
---------------------------------------------------------------------------*/
TDLibUtil = {}

//Beast's circle drawing function v2
TDLibUtil.DrawCircle = function(x, y, r, col)
    local circle = {}

    for i = 1, 360 do
        circle[i] = {}
        circle[i].x = x + math.cos(math.rad(i * 360) / 360) * r
        circle[i].y = y + math.sin(math.rad(i * 360) / 360) * r
    end

    surface.SetDrawColor(col)
    draw.NoTexture()
    surface.DrawPoly(circle)
end

TDLibUtil.DrawArc = function(x, y, ang, p, rad, color, seg)
	seg = seg || 80
    ang = (-ang) + 180
    local circle = {}

    table.insert(circle, {x = x, y = y})
    for i = 0, seg do
        local a = math.rad((i / seg) * -p + ang)
        table.insert(circle, {x = x + math.sin(a) * rad, y = y + math.cos(a) * rad})
    end

    surface.SetDrawColor(color)
    draw.NoTexture()
    surface.DrawPoly(circle)
end

TDLibUtil.LerpColor = function(frac, from, to)
	return Color(
		Lerp(frac, from.r, to.r),
		Lerp(frac, from.g, to.g),
		Lerp(frac, from.b, to.b),
		Lerp(frac, from.a, to.a)
	)
end

//Various handy premade transition functions
TDLibUtil.HoverFunc = function(s) return s:IsHovered() end
TDLibUtil.HoverFuncChild = function(s) return s:IsHovered() || s:IsChildHovered() end


/*---------------------------------------------------------------------------
	Circle function - credit to Beast
---------------------------------------------------------------------------*/
local function drawCircle(x, y, r)
	local circle = {}

	for i = 1, 360 do
		circle[i] = {}
		circle[i].x = x + math.cos(math.rad(i * 360) / 360) * r
		circle[i].y = y + math.sin(math.rad(i * 360) / 360) * r
	end

	surface.DrawPoly(circle)
end


/*---------------------------------------------------------------------------
	Basic helper classes
---------------------------------------------------------------------------*/
local classes = {}

classes.On = function(pnl, name, fn)
	name = pnl.AppendOverwrite || name

	local old = pnl[name]
	
	pnl[name] = function(s, ...)
		if(old) then old(s, ...) end
		fn(s, ...)
	end
end

classes.SetupTransition = function(pnl, name, speed, fn)
	fn = pnl.TransitionFunc || fn

	pnl[name] = 0
	pnl:On("Think", function(s)
		s[name] = Lerp(FrameTime()*speed, s[name], fn(s) && 1 || 0)
	end)
end

// Color caching : Not in default lib
local white_30 = Color(255, 255, 255, 30)
local blue = Color(0, 127, 255, 255)
local white_50 = Color(255, 255, 255, 50)
local green = Color(0, 255, 0, 255)


/*---------------------------------------------------------------------------
	Classes
---------------------------------------------------------------------------*/
classes.FadeHover = function(pnl, col, speed, rad)
	col = col || white_30
	speed = speed || 6

	pnl:SetupTransition("FadeHover", speed, TDLibUtil.HoverFunc)
	pnl:On("Paint", function(s, w, h)
		local col = ColorAlpha(col, col.a*s.FadeHover)

		if(rad && rad > 0) then
			draw.RoundedBox(rad, 0, 0, w, h, col)
		else
			surface.SetDrawColor(col)
			surface.DrawRect(0, 0, w, h)
		end
	end)
end

classes.BarHover = function(pnl, col, height, speed)
	col = col || color_white
	height = height || 2
	speed = speed || 6

	pnl:SetupTransition("BarHover", speed, TDLibUtil.HoverFunc)
	pnl:On("PaintOver", function(s, w, h)
		local bar = math.Round(w*s.BarHover)

		surface.SetDrawColor(col)
		surface.DrawRect(w/2-bar/2, h-height, bar, height)
	end)
end

classes.FillHover = function(pnl, col, dir, speed, mat)
	col = col || white_30
	dir = dir || LEFT
	speed = speed || 8

	pnl:SetupTransition("FillHover", speed, TDLibUtil.HoverFunc)
	pnl:On("PaintOver", function(s, w, h)
		surface.SetDrawColor(col)

		local x, y, fw, fh
		if(dir == LEFT) then
			x, y, fw, fh = 0, 0, math.Round(w*s.FillHover), h
		elseif(dir == TOP) then
			x, y, fw, fh = 0, 0, w, math.Round(h*s.FillHover)
		elseif(dir == RIGHT) then
			local prog = math.Round(w*s.FillHover)
			x, y, fw, fh = w-prog, 0, prog, h
		elseif(dir == BOTTOM) then
			local prog = math.Round(h*s.FillHover)
			x, y, fw, fh = 0, h-prog, w, prog
		end

		if(mat) then
			surface.SetMaterial(mat)
			surface.DrawTexturedRect(x, y, fw, fh)
		else
			surface.DrawRect(x, y, fw, fh)
		end
	end)
end

classes.Background = function(pnl, col, rad, rtl, rtr, rbl, rbr)
	pnl:On("Paint", function(s, w, h)
		if(rad && rad > 0) then
			if(rtl != nil) then
				draw.RoundedBoxEx(rad, 0, 0, w, h, col, rtl, rtr, rbl, rbr)
			else
				draw.RoundedBox(rad, 0, 0, w, h, col)
			end
		else
			surface.SetDrawColor(col)
			surface.DrawRect(0, 0, w, h)
		end
	end)
end

classes.Material = function(pnl, mat, col)
	col = col || color_white

	pnl:On("Paint", function(s, w, h)
		surface.SetDrawColor(col)
		surface.SetMaterial(mat)
		surface.DrawTexturedRect(0, 0, w, h)
	end)
end

classes.TiledMaterial = function(pnl, mat, tw, th, col)
	col = col || color_white

	pnl:On("Paint", function(s, w, h)
		surface.SetMaterial(mat)
		surface.SetDrawColor(col)
		surface.DrawTexturedRectUV(0, 0, w, h, 0, 0, w/tw, h/th)
	end)
end

classes.Outline = function(pnl, col, width)
	col = col || color_white
	width = width || 1

	pnl:On("Paint", function(s, w, h)
		surface.SetDrawColor(col)
		
		for i=0, width-1 do
			surface.DrawOutlinedRect(0+i,0+i,w-i*2,h-i*2)
		end
	end)
end

classes.LinedCorners = function(pnl, col, len)
	col = col || color_white
	len = len || 15

	pnl:On("Paint", function(s, w, h)
		surface.SetDrawColor(col)

		surface.DrawRect(0, 0, len, 1)
		surface.DrawRect(0, 1, 1, len-1)
		surface.DrawRect(w-len, h-1, len, 1)
		surface.DrawRect(w-1, h-len, 1, len-1)
	end)
end

classes.SideBlock = function(pnl, col, size, side)
	col = col || color_white
	size = size || 3
	side = side || LEFT

	pnl:On("Paint", function(s, w, h)
		surface.SetDrawColor(col)
		
		if(side == LEFT) then
			surface.DrawRect(0, 0, size, h)
		elseif(side == TOP) then
			surface.DrawRect(0, 0, w, size)
		elseif(side == RIGHT) then
			surface.DrawRect(w-size, 0, size, h)
		elseif(side == BOTTOM) then
			surface.DrawRect(0, h-size, w, size)
		end
	end)
end

classes.Text = function(pnl, text, font, col, alignment, ox, oy, paint)
	font = font || "Trebuchet24"
	col = col || color_white
	alignment = alignment || TEXT_ALIGN_CENTER
	ox = ox || 0
	oy = oy || 0

	if(!paint && pnl.SetText && pnl.SetFont && pnl.SetTextColor) then
		pnl:SetText(text)
		pnl:SetFont(font)
		pnl:SetTextColor(col)
	else
		pnl:On("Paint", function(s, w, h)
			local x = 0
			if(alignment == TEXT_ALIGN_CENTER) then
				x = w/2
			elseif(alignment == TEXT_ALIGN_RIGHT) then
				x = w
			end

			draw.SimpleText(text,font,x+ox,h/2+oy,col,alignment,TEXT_ALIGN_CENTER)
		end)
	end
end

classes.DualText = function(pnl, toptext, topfont, topcol, bottomtext, bottomfont, bottomcol, alignment, centerSpacing)
	topfont = topfont || "Trebuchet24"
	topcol = topcol || blue
	bottomfont = bottomfont || "Trebuchet18"
	bottomcol = bottomcol || color_white
	alignment = alignment || TEXT_ALIGN_CENTER
	centerSpacing = centerSpacing || 0

	pnl:On("Paint", function(s, w, h)
		surface.SetFont(topfont)
		local tw, th = surface.GetTextSize(toptext)

		surface.SetFont(bottomfont)
		local bw, bh = surface.GetTextSize(bottomtext)

		local y1, y2 = h/2-bh/2, h/2+th/2

		local x
		if(alignment == TEXT_ALIGN_LEFT) then
			x = 0
		elseif(alignment == TEXT_ALIGN_CENTER) then
			x = w/2
		elseif(alignment == TEXT_ALIGN_RIGHT) then
			x = w
		end

		draw.SimpleText(toptext, topfont, x, y1+centerSpacing, topcol, alignment, TEXT_ALIGN_CENTER)
		draw.SimpleText(bottomtext, bottomfont, x, y2-centerSpacing, bottomcol, alignment, TEXT_ALIGN_CENTER)
	end)
end

classes.Blur = function(pnl, amount)
	pnl:On("Paint", function(s, w, h)
		local x, y = s:LocalToScreen(0, 0)
		local scrW, scrH = ScrW(), ScrH()

		surface.SetDrawColor(color_white)
		surface.SetMaterial(blur)

		for i = 1, 3 do
			blur:SetFloat("$blur", (i / 3) * (amount or 8))
			blur:Recompute()

			render.UpdateScreenEffectTexture()
			surface.DrawTexturedRect(x * -1, y * -1, scrW, scrH)
		end
	end)
end

classes.CircleClick = function(pnl, col, speed, trad)
	col = col || white_50
	speed = speed || 5

	pnl.Rad, pnl.Alpha, pnl.ClickX, pnl.ClickY = 0, 0, 0, 0

	pnl:On("Paint", function(s, w, h)
		if(s.Alpha >= 1) then
			surface.SetDrawColor(ColorAlpha(col, s.Alpha))
			draw.NoTexture()
			drawCircle(s.ClickX, s.ClickY, s.Rad)
			s.Rad = Lerp(FrameTime()*speed, s.Rad, trad || w)
			s.Alpha = Lerp(FrameTime()*speed, s.Alpha, 0)
		end
	end)

	pnl:On("DoClick", function(s)
		s.ClickX, s.ClickY = s:CursorPos()
		s.Rad = 0
		s.Alpha = col.a
	end)
end

classes.CircleHover = function(pnl, col, speed, trad)
	col = col || white_30
	speed = speed || 6

	pnl.LastX, pnl.LastY = 0, 0

	pnl:SetupTransition("CircleHover", speed, TDLibUtil.HoverFunc)
	pnl:On("Think", function(s)
		if(s:IsHovered()) then
			s.LastX, s.LastY = s:CursorPos()
		end
	end)

	pnl:On("PaintOver", function(s, w, h)
		draw.NoTexture()
		surface.SetDrawColor(ColorAlpha(col, col.a*s.CircleHover))
		drawCircle(s.LastX, s.LastY, s.CircleHover*(trad || w))
	end)
end

classes.SquareCheckbox = function(pnl, inner, outer, speed)
	inner = inner || green
	outer = outer || color_white
	speed = speed || 14

	pnl:SetupTransition("SquareCheckbox", speed, function(s) return s:GetChecked() end)
	pnl:On("Paint", function(s, w, h)
		surface.SetDrawColor(outer)
		surface.DrawRect(0, 0, w, h)

		surface.SetDrawColor(inner)
		surface.DrawOutlinedRect(0, 0, w, h)

		local bw, bh = (w-4)*s.SquareCheckbox, (h-4)*s.SquareCheckbox
		bw, bh = math.Round(bw), math.Round(bh)

		surface.DrawRect(w/2-bw/2, h/2-bh/2, bw, bh)
	end)
end

classes.CircleCheckbox = function(pnl, inner, outer, speed)
	inner = inner || green
	outer = outer || color_white
	speed = speed || 14

	pnl:SetupTransition("CircleCheckbox", speed, function(s) return s:GetChecked() end)
	pnl:On("Paint", function(s, w, h)
		draw.NoTexture()
		surface.SetDrawColor(outer)
		drawCircle(w/2, h/2, w/2-1)

		surface.SetDrawColor(inner)
		drawCircle(w/2, h/2, w*s.CircleCheckbox/2)
	end)
end

classes.AvatarMask = function(pnl, mask)
	pnl.Avatar = vgui.Create("AvatarImage", pnl)
	pnl.Avatar:SetPaintedManually(true)

	pnl.Paint = function(s, w, h)
		render.ClearStencil()
		render.SetStencilEnable(true)

		render.SetStencilWriteMask(0xFF)
		render.SetStencilTestMask(0xFF)

		render.SetStencilFailOperation(STENCILOPERATION_REPLACE)
		render.SetStencilPassOperation(STENCILOPERATION_ZERO)
		render.SetStencilZFailOperation(STENCILOPERATION_ZERO)
		render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_NEVER)
		render.SetStencilReferenceValue(1)

		draw.NoTexture()
		surface.SetDrawColor(color_white)
		mask(s, w, h)

		render.SetStencilFailOperation(STENCILOPERATION_ZERO)
		render.SetStencilPassOperation(STENCILOPERATION_REPLACE)
		render.SetStencilZFailOperation(STENCILOPERATION_ZERO)
		render.SetStencilCompareFunction(STENCILCOMPARISONFUNCTION_EQUAL)
		render.SetStencilReferenceValue(1)

		s.Avatar:SetPaintedManually(false)
		s.Avatar:PaintManual()
		s.Avatar:SetPaintedManually(true)

		render.SetStencilEnable(false)
		render.ClearStencil()
	end

	pnl.PerformLayout = function(s)
		s.Avatar:SetSize(s:GetWide(), s:GetTall())
	end

	pnl.SetPlayer = function(s, ply, size) s.Avatar:SetPlayer(ply, size) end
	pnl.SetSteamID = function(s, id, size) s.Avatar:SetSteamID(id, size) end
end

classes.CircleAvatar = function(pnl)
	pnl:Class("AvatarMask", function(s, w, h)
		drawCircle(w/2, h/2, w/2)
	end)
end

classes.Circle = function(pnl, col)
	col = col || color_white

	pnl:On("Paint", function(s, w, h)
		draw.NoTexture()
		surface.SetDrawColor(col)
		drawCircle(w/2, h/2, math.min(w, h)/2)
	end)
end

classes.CircleFadeHover = function(pnl, col, speed)
	col = col || white_30
	speed = speed || 6

	pnl:SetupTransition("CircleFadeHover", speed, TDLibUtil.HoverFunc)
	pnl:On("Paint", function(s, w, h)
		draw.NoTexture()
		surface.SetDrawColor(ColorAlpha(col, col.a*s.CircleFadeHover))
		drawCircle(w/2, h/2, math.min(w, h)/2)
	end)
end

classes.CircleExpandHover = function(pnl, col, speed)
	col = col || white_30
	speed = speed || 6

	pnl:SetupTransition("CircleExpandHover", speed, TDLibUtil.HoverFunc)
	pnl:On("Paint", function(s, w, h)
		local rad = math.Round(w/2*s.CircleExpandHover)

		draw.NoTexture()
		surface.SetDrawColor(ColorAlpha(col, col.a*s.CircleExpandHover))
		drawCircle(w/2, h/2, rad)
	end)
end

classes.Gradient = function(pnl, col, dir, frac, op)
	dir = dir || BOTTOM
	frac = frac || 1

	pnl:On("Paint", function(s, w, h)
		surface.SetDrawColor(col)

		local x, y, gw, gh		
		if(dir == LEFT) then
			local prog = math.Round(w*frac)
			x, y, gw, gh = 0, 0, prog, h
			surface.SetMaterial(op && gradRight || gradLeft)
		elseif(dir == TOP) then
			local prog = math.Round(h*frac)
			x, y, gw, gh = 0, 0, w, prog
			surface.SetMaterial(op && gradDown || gradUp)
		elseif(dir == RIGHT) then
			local prog = math.Round(w*frac)
			x, y, gw, gh = w-prog, 0, prog, h
			surface.SetMaterial(op && gradLeft || gradRight)
		elseif(dir == BOTTOM) then
			local prog = math.Round(h*frac)
			x, y, gw, gh = 0, h-prog, w, prog
			surface.SetMaterial(op && gradUp || gradDown)
		end

		surface.DrawTexturedRect(x, y, gw, gh)
	end)
end

classes.SetOpenURL = function(pnl, url)
	pnl:On("DoClick", function()
		gui.OpenURL(url)
	end)
end

classes.NetMessage = function(pnl, name, data)
	data = data || function() end

	pnl:On("DoClick", function()
		net.Start(name)
			data(pnl)
		net.SendToServer()
	end)
end

classes.Stick = function(pnl, dock, margin, dontInvalidate)
	dock = dock || FILL
	margin = margin || 0

	pnl:Dock(dock)
	if(margin > 0) then
		pnl:DockMargin(margin, margin, margin, margin)
	end

	if(!dontInvalidate) then
		pnl:InvalidateParent(true)
	end
end

classes.DivTall = function(pnl, frac, target)
	frac = frac || 2
	target = target || pnl:GetParent()

	pnl:SetTall(target:GetTall()/frac)
end

classes.DivWide = function(pnl, frac, target)
	target = target || pnl:GetParent()
	frac = frac || 2

	pnl:SetWide(target:GetWide()/frac)
end

classes.SquareFromHeight = function(pnl)
	pnl:SetWide(pnl:GetTall())
end

classes.SquareFromWidth = function(pnl)
	pnl:SetTall(pnl:GetWide())
end

classes.SetRemove = function(pnl, target)
	target = target || pnl

	pnl:On("DoClick", function()
		if(IsValid(target)) then target:Remove() end
	end)
end

classes.FadeIn = function(pnl, time, alpha)
	time = time || 0.2
	alpha = alpha || 255

	pnl:SetAlpha(0)
	pnl:AlphaTo(alpha, time)
end

classes.HideVBar = function(pnl)
	local vbar = pnl:GetVBar()
	vbar:SetWide(0)
	vbar:Hide()
end

classes.SetTransitionFunc = function(pnl, fn)
	pnl.TransitionFunc = fn
end

classes.ClearTransitionFunc = function(pnl)
	pnl.TransitionFunc = nil
end

classes.SetAppendOverwrite = function(pnl, fn)
	pnl.AppendOverwrite = fn
end

classes.ClearAppendOverwrite = function(pnl)
	pnl.AppendOverwrite = nil
end

classes.ClearPaint = function(pnl)
	pnl.Paint = nil
end

classes.ReadyTextbox = function(pnl)
	pnl:SetPaintBackground(false)
	pnl:SetAppendOverwrite("PaintOver")
		:SetTransitionFunc(function(s) return s:IsEditing() end)
end


/*---------------------------------------------------------------------------
	TDLib function which adds all the classes to your panel
---------------------------------------------------------------------------*/
local meta = FindMetaTable("Panel")

function meta:TDLib()
	self.Class = function(pnl, name, ...)
		local class = classes[name]
		assert(class, "[TDLib]: Class "..name.." does not exist.")

		class(pnl, ...)

		return pnl
	end

	for k, v in pairs(classes) do
		self[k] = function(s, ...) return s:Class(k, ...) end
	end

	return self
end

function TDLib(c, p, n)
	local pnl = vgui.Create(c, p, n)
	return pnl:TDLib()
end
--addons/aphone/lua/aphone/apps/camera/cl_main.lua:
return gluapack()()
--addons/aphone/lua/aphone/apps/friends/cl_main.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_0_ttt.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_0_ttt.lua:
ArcCW.TTTAmmoToEntity = {
    ["pistol"] = "item_ammo_pistol_ttt",
    ["smg1"] = "item_ammo_smg1_ttt",
    ["AlyxGun"] = "item_ammo_revolver_ttt",
    ["357"] = "item_ammo_357_ttt",
    ["buckshot"] = "item_box_buckshot_ttt"
}
--[[
WEAPON_TYPE_RANDOM = 1
WEAPON_TYPE_MELEE = 2
WEAPON_TYPE_NADE = 3
WEAPON_TYPE_SHOTGUN = 4
WEAPON_TYPE_HEAVY = 5
WEAPON_TYPE_SNIPER = 6
WEAPON_TYPE_PISTOL = 7
WEAPON_TYPE_SPECIAL = 8
]]

ArcCW.AmmoToTTT = {
    ["357"] = "AlyxGun",
    ["SniperPenetratedRound"] = "357",
    ["ar2"] = "smg1",
}
ArcCW.TTTAmmoToClipMax = {
    ["357"] = 20,
    ["smg1"] = 60,
    ["pistol"] = 60,
    ["alyxgun"] = 36,
    ["buckshot"] = 24
}
-- translate TTT weapons to HL2 weapons, in order to recognize NPC weapon replacements.
ArcCW.TTTReplaceTable = {
    ["weapon_ttt_glock"] = "weapon_pistol",
    ["weapon_zm_mac10"] = "weapon_ar2",
    ["weapon_ttt_m16"] = "weapon_smg1",
    ["weapon_zm_pistol"] = "weapon_pistol",
    ["weapon_zm_revolver"] = "weapon_357",
    ["weapon_zm_rifle"] = "weapon_crossbow",
    ["weapon_zm_shotgun"] = "weapon_shotgun",
    ["weapon_zm_sledge"] = "weapon_ar2",
    ["weapon_ttt_smokegrenade"] = "weapon_grenade",
    ["weapon_ttt_confgrenade"] = "weapon_grenade",
    ["weapon_tttbasegrenade"] = "weapon_grenade",
    ["weapon_zm_molotov"] = "weapon_grenade",
}

if engine.ActiveGamemode() != "terrortown" then return end

hook.Add("OnGamemodeLoaded", "ArcCW_TTT", function()
    for i, wep in pairs(weapons.GetList()) do
        local weap = weapons.Get(wep.ClassName)
        if weap then
            if !weap.ArcCW then
                continue
            end
            if weap.ArcCW and !weap.Spawnable then
                continue
            end
        end

        if ArcCW.AmmoToTTT[wep.Primary.Ammo] then
            wep.Primary.Ammo = ArcCW.AmmoToTTT[wep.Primary.Ammo]
        end

        wep.AmmoEnt = ArcCW.TTTAmmoToEntity[wep.Primary.Ammo] or ""
        -- You can tell how desperate I am in blocking the base from spawning
        wep.AutoSpawnable = (wep.AutoSpawnable == nil and true) or wep.AutoSpawnable
        wep.AllowDrop = wep.AllowDrop or true

        -- We have to do this here because TTT2 does a check for .Kind in WeaponEquip,
        -- earlier than Initialize() which assigns .Kind
        if !wep.Kind and !wep.CanBuy then
            if wep.Throwing or weap.Throwing then
                wep.Slot = 3
                wep.Kind = WEAPON_NADE
                wep.spawnType = wep.spawnType or WEAPON_TYPE_NADE
            elseif wep.Slot == 0 then
                -- melee weapons
                wep.Slot = 6
                wep.Kind = WEAPON_MELEE or WEAPON_EQUIP1
                wep.spawnType = wep.spawnType or WEAPON_TYPE_MELEE
            elseif wep.Slot == 1 then
                -- sidearms
                wep.Kind = WEAPON_PISTOL
                wep.spawnType = wep.spawnType or WEAPON_TYPE_PISTOL
            else
                -- other weapons are considered primary
                -- try to determine spawntype if none exists
                if !wep.spawnType then
                    if wep.Primary.Ammo == "357" or (wep.Slot == 3 and (wep.Num or 1) == 1) then
                        wep.spawnType = WEAPON_TYPE_SNIPER
                    elseif wep.Primary.Ammo == "buckshot" or (wep.Num or 1) > 1 then
                        wep.spawnType = WEAPON_TYPE_SHOTGUN
                    else
                        wep.spawnType = WEAPON_TYPE_HEAVY
                    end
                end

                wep.Slot = 2
                wep.Kind = WEAPON_HEAVY
            end
        end

        local class = wep.ClassName
        local path = "arccw/weaponicons/" .. class
        local path2 = "arccw/ttticons/" .. class .. ".png"
        local path3 = "vgui/ttt/" .. class
        local path4 = "entities/" .. class .. ".png"

        if !Material(path2):IsError() then
            -- TTT icon (png)
            wep.Icon = path2
        elseif !Material(path3):IsError() then
            -- TTT icon (vtf)
            wep.Icon = path3
        elseif !Material(path4):IsError() then
            -- Entity spawn icon
            wep.Icon = path4
        elseif !Material(path):IsError() then
            -- Kill icon
            wep.Icon = path
        else
            -- fallback: display _something_
            wep.Icon = "arccw/hud/arccw_bird.png"
        end

    end

    --[[]
    local pistol_ammo = (scripted_ents.GetStored("arccw_ammo_pistol") or {}).t
    if pistol_ammo then
        pistol_ammo.AmmoCount = 30
    end
    ]]

    -- Language string(s)
    if CLIENT then
        local lang = TTT2 and "en" or "english"
        LANG.AddToLanguage(lang, "search_dmg_buckshot", "This person was blasted to pieces by buckshot.")
        LANG.AddToLanguage(lang, "search_dmg_nervegas", "Their face looks pale. It must have been some sort of nerve gas.")
        LANG.AddToLanguage(lang, "ammo_smg1_grenade", "Rifle Grenades")
    end
end)

hook.Add("DoPlayerDeath", "ArcCW_DetectiveSeeAtts", function(ply, attacker, dmginfo)
    local wep = util.WeaponFromDamage(dmginfo)
    timer.Simple(0, function()
        if ArcCW.ConVars["ttt_bodyattinfo"]:GetInt() > 0 and ply.server_ragdoll and IsValid(wep) and wep:IsWeapon() and wep.ArcCW and wep.Attachments then
            net.Start("arccw_ttt_bodyattinfo")
                net.WriteEntity(ply.server_ragdoll)
                net.WriteUInt(table.Count(wep.Attachments), 8)
                for i, info in pairs(wep.Attachments) do
                    if info.Installed then
                        net.WriteUInt(ArcCW.AttachmentTable[info.Installed].ID, ArcCW.GetBitNecessity())
                    else
                        net.WriteUInt(0, ArcCW.GetBitNecessity())
                    end
                end
            net.Broadcast()
        end
    end)
end)

hook.Add("ArcCW_OnAttLoad", "ArcCW_TTT", function(att)
    if att.Override_Ammo and ArcCW.AmmoToTTT[att.Override_Ammo] then
        att.Override_Ammo = ArcCW.AmmoToTTT[att.Override_Ammo]
    end
end)

--addons/[binbon]arccw_modify/lua/arccw/shared/sh_convars.lua:
ArcCW.ConVars = {}

ArcCW.ConVars["enable_penetration"] = CreateConVar("arccw_enable_penetration", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "", 0, 1)
ArcCW.ConVars["enable_ricochet"] = CreateConVar("arccw_enable_ricochet", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "", 0, 1)
ArcCW.ConVars["enable_customization"] = CreateConVar("arccw_enable_customization", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "", -1, 1)
ArcCW.ConVars["enable_dropping"] = CreateConVar("arccw_enable_dropping", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "", 0, 1)
ArcCW.ConVars["enable_sway"] = CreateConVar("arccw_enable_sway", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "", 0, 1)

ArcCW.ConVars["bodydamagemult_cancel"] = CreateConVar("arccw_bodydamagemult_cancel", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "", 0, 1)

ArcCW.ConVars["attinv_lockmode"] = CreateConVar("arccw_attinv_lockmode", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Once owned, players can use attachments as much as they like.")
ArcCW.ConVars["attinv_free"] = CreateConVar("arccw_attinv_free", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "All attachments can always be used.")
ArcCW.ConVars["attinv_loseondie"] = CreateConVar("arccw_attinv_loseondie", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "All attachments reset on death. If set to 2, drops all attachments in a box.", 0, 2)

ArcCW.ConVars["atts_spawnrand"] = CreateConVar("arccw_atts_spawnrand", 0, FCVAR_ARCHIVE, "Randomly give attachments to player spawned SWEPs.", 0, 1)
ArcCW.ConVars["atts_ubglautoload"] = CreateConVar("arccw_atts_ubglautoload", 0, FCVAR_ARCHIVE, "Automatically load underbarrel weapons when attached.", 0, 1)
ArcCW.ConVars["atts_pickx"] = CreateConVar("arccw_atts_pickx", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Limit weapons to this many maximum attachments. 0 = disable system.", 0)

ArcCW.ConVars["npc_replace"] = CreateConVar("arccw_npc_replace", 0, FCVAR_ARCHIVE, "Replace NPC weapons with ArcCW weapons.")
ArcCW.ConVars["npc_atts"] = CreateConVar("arccw_npc_atts", 1, FCVAR_ARCHIVE, "Randomly give NPC weapons attachments.")

ArcCW.ConVars["truenames"] = CreateConVar("arccw_truenames", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Use true names instead of fake names, where applicable. Requires restart.")

ArcCW.ConVars["equipmentammo"] = CreateConVar("arccw_equipmentammo", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Generate unique ammo types for throwables.", 0, 1) -- Automatically assign unique ammo types to each throwable weapon. Prone to running into the ammo type limit.
ArcCW.ConVars["equipmentsingleton"] = CreateConVar("arccw_equipmentsingleton", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Make grenades and equipment not use ammo, and remove themselves on use.", 0, 1)
ArcCW.ConVars["equipmenttime"] = CreateConVar("arccw_equipmenttime", 180, FCVAR_ARCHIVE, "How long equipment such as Claymores will remain on the map before self-destructing.")

ArcCW.ConVars["mult_damage"] = CreateConVar("arccw_mult_damage", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for damage done by all weapons.")
ArcCW.ConVars["mult_npcdamage"] = CreateConVar("arccw_mult_npcdamage", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for damage done by weapons used by NPCs.")
ArcCW.ConVars["mult_hipfire"] = CreateConVar("arccw_mult_hipfire", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for hip fire spread.")
ArcCW.ConVars["mult_reloadtime"] = CreateConVar("arccw_mult_reloadtime", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for how long weapons take to reload.", 0.01)
ArcCW.ConVars["mult_sighttime"] = CreateConVar("arccw_mult_sighttime", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for how long weapons take to enter sights.", 0.1)
ArcCW.ConVars["mult_rpm"] = CreateConVar("arccw_mult_rpm", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for how fast weapons fire. May be disastrous on performance.", 0.01)
ArcCW.ConVars["mult_range"] = CreateConVar("arccw_mult_range", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for range of all weapons.")
ArcCW.ConVars["mult_recoil"] = CreateConVar("arccw_mult_recoil", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for recoil of all weapons.")
ArcCW.ConVars["mult_accuracy"] = CreateConVar("arccw_mult_accuracy", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for mechanical inprecision of weapons.")
ArcCW.ConVars["mult_movedisp"] = CreateConVar("arccw_mult_movedisp", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for moving inaccuracy of weapons.")
ArcCW.ConVars["mult_penetration"] = CreateConVar("arccw_mult_penetration", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for how far weapons should penetrate.")
ArcCW.ConVars["mult_startunloaded"] = CreateConVar("arccw_mult_startunloaded", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "All weapons spawn unloaded.")
ArcCW.ConVars["mult_shootwhilesprinting"] = CreateConVar("arccw_mult_shootwhilesprinting", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Allow any weapon to shoot while sprinting.")
ArcCW.ConVars["mult_defaultammo"] = CreateConVar("arccw_mult_defaultammo", 3, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for default ammo supply.")
ArcCW.ConVars["mult_attchance"] = CreateConVar("arccw_mult_attchance", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for random attachment chance on NPCs and in TTT.")
ArcCW.ConVars["mult_heat"] = CreateConVar("arccw_mult_heat", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for how much heat increases per shot on certain weapons.", 0)
ArcCW.ConVars["mult_sway"] = CreateConVar("arccw_mult_sway", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for how much sway exists when in sights.", 0)
ArcCW.ConVars["mult_malfunction"] = CreateConVar("arccw_mult_malfunction", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for how often malfunctions occur.", 0)
ArcCW.ConVars["mult_meleedamage"] = CreateConVar("arccw_mult_meleedamage", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for melee damage.", 0)
ArcCW.ConVars["mult_meleetime"] = CreateConVar("arccw_mult_meleetime", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for melee speed.", 0)
ArcCW.ConVars["mult_bottomlessclip"] = CreateConVar("arccw_mult_bottomlessclip", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Enable bottomless clip.", 0, 1)
ArcCW.ConVars["mult_infiniteammo"] = CreateConVar("arccw_mult_infiniteammo", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Enable infinite reserve ammo.", 0, 1)
ArcCW.ConVars["mult_crouchdisp"] = CreateConVar("arccw_mult_crouchdisp", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for hip dispersion while crouching.", 0)
ArcCW.ConVars["mult_crouchrecoil"] = CreateConVar("arccw_mult_crouchrecoil", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for recoil while crouching.", 0)
ArcCW.ConVars["mult_movespeed"] = CreateConVar("arccw_mult_movespeed", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for how much weapons should affect your regular movespeed.", 0)
ArcCW.ConVars["mult_movespeedads"] = CreateConVar("arccw_mult_movespeedads", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for how much weapons should affect your movespeed while aiming down sights.", 0)
ArcCW.ConVars["mult_movespeedfire"] = CreateConVar("arccw_mult_movespeedfire", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for how much weapons should affect your movespeed while firing them.", 0)
ArcCW.ConVars["add_sway"] = CreateConVar("arccw_add_sway", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Add this much sway to all weapons.", 0)

ArcCW.ConVars["override_crosshair_off"] = CreateConVar("arccw_override_crosshair_off", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Set to true to force everyone's crosshairs off.", 0, 1)
ArcCW.ConVars["override_hud_off"] = CreateConVar("arccw_override_hud_off", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Set to true to force everyone's HUDs off.", 0, 1)
ArcCW.ConVars["override_nearwall"] = CreateConVar("arccw_override_nearwall", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Disable weapon length and near-walling.", 0, 1)
ArcCW.ConVars["override_lunge_off"] = CreateConVar("arccw_override_lunge_off", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Disable melee lunging.", 0, 1)

ArcCW.ConVars["ammo_detonationmode"] = CreateConVar("arccw_ammo_detonationmode", 2, FCVAR_REPLICATED, "The type of ammo detonation to use. -1 = don't explode, 0 = simple explosion, 1 = fragmentation, 2 = full", -1, 2)
ArcCW.ConVars["ammo_autopickup"] = CreateConVar("arccw_ammo_autopickup", 1, FCVAR_REPLICATED, "Whether to pick up ammo when walking over in addition to pressing Use.", 0, 1)
ArcCW.ConVars["ammo_largetrigger"] = CreateConVar("arccw_ammo_largetrigger", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Whether to use larger trigger boxes for ammo, similar to HL2. Only useful when autopickup is true.", 0, 1)
ArcCW.ConVars["ammo_rareskin"] = CreateConVar("arccw_ammo_rareskin", 0.08, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Chance for a rare skin to appear. Only specific models have these.", 0, 1)
ArcCW.ConVars["ammo_chaindet"] = CreateConVar("arccw_ammo_chaindet", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Whether to allow ammoboxes to detonate each other. If disabled, they will still be destroyed but !explode.", 0, 1)
ArcCW.ConVars["ammo_replace"] = CreateConVar("arccw_ammo_replace", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "If enabled, all vanilla ammo entities will be forcefully replaced with ArcCW equivalents.", 0, 1)

ArcCW.ConVars["mult_ammohealth"] = CreateConVar("arccw_mult_ammohealth", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for how much health ammo boxes have. Set to -1 for indestructible boxes.", -1)
ArcCW.ConVars["mult_ammoamount"] = CreateConVar("arccw_mult_ammoamount", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Multiplier for how much ammo are in ammo boxes.", 0)

ArcCW.ConVars["limityear_enable"] = CreateConVar("arccw_limityear_enable", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Limit the maximum year for weapons.")
ArcCW.ConVars["limityear"] = CreateConVar("arccw_limityear", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Limit the maximum year for weapons.")

ArcCW.ConVars["doorbust"] = CreateConVar("arccw_doorbust", 0, FCVAR_ARCHIVE, "Whether to allow door busting. 1 - break down, 2 - open only", 0, 2)
ArcCW.ConVars["doorbust_threshold"] = CreateConVar("arccw_doorbust_threshold", 80, FCVAR_ARCHIVE, "The amount of damage needed to bust a normal sized door.")
ArcCW.ConVars["doorbust_time"] = CreateConVar("arccw_doorbust_time", 180, FCVAR_ARCHIVE, "The amount of time to keep the door busted by.", 1)

ArcCW.ConVars["driveby"] = CreateConVar("arccw_driveby", 0, FCVAR_ARCHIVE, "Enable special checks that allow you to fire out of vehicles (assuming some vehicle weaponizer addon exists).", 0, 1)

ArcCW.ConVars["clicktocycle"] = CreateConVar("arccw_clicktocycle", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Whether to make it so left clicking after shooting cycles instead of on mouse release.")
ArcCW.ConVars["throwinertia"] = CreateConVar("arccw_throwinertia", 1, FCVAR_ARCHIVE, "Set to make throwable equipment inherit the player's velocity.", 0, 1)

ArcCW.ConVars["bullet_enable"] = CreateConVar("arccw_bullet_enable", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Use physical bullets with drop and travel time.")
ArcCW.ConVars["bullet_velocity"] = CreateConVar("arccw_bullet_velocity", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED)
ArcCW.ConVars["bullet_drag"] = CreateConVar("arccw_bullet_drag", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED)
ArcCW.ConVars["bullet_lifetime"] = CreateConVar("arccw_bullet_lifetime", 10, FCVAR_ARCHIVE + FCVAR_REPLICATED)
ArcCW.ConVars["bullet_gravity"] = CreateConVar("arccw_bullet_gravity", 600, FCVAR_ARCHIVE + FCVAR_REPLICATED)

ArcCW.ConVars["weakensounds"] = CreateConVar("arccw_weakensounds", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Reduce all weapons' firing volume by this much decibels, making it easier to hide shooting sounds. Clamped to 60-150dB.")

ArcCW.ConVars["desync"] = CreateConVar("arccw_desync", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Turning this on prevents cheaters from predicting the bullet direction/spread, making the nospread cheat useless.")

ArcCW.ConVars["aimassist"] = CreateConVar("arccw_aimassist", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Enable A I M B O T", 0, 1)
ArcCW.ConVars["aimassist_head"] = CreateConVar("arccw_aimassist_head", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "My advice for you: aim for the head!", 0, 1)
ArcCW.ConVars["aimassist_cone"] = CreateConVar("arccw_aimassist_cone", 5, FCVAR_ARCHIVE + FCVAR_REPLICATED, "The angle of the cone within which targets can be seeked.", 1, 360)
ArcCW.ConVars["aimassist_distance"] = CreateConVar("arccw_aimassist_distance", 1024, FCVAR_ARCHIVE + FCVAR_REPLICATED, "The distance within which aim assist will trigger.", 128)
ArcCW.ConVars["aimassist_intensity"] = CreateConVar("arccw_aimassist_intensity", 0.5, FCVAR_ARCHIVE + FCVAR_REPLICATED, "How strong the assist is.", 0, 10)

ArcCW.ConVars["malfunction"] = CreateConVar("arccw_malfunction", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "", 0, 2)

ArcCW.ConVars["attinv_giveonspawn"] = CreateConVar("arccw_attinv_giveonspawn", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Give this many random attachments to players on spawn.", 0)

ArcCW.ConVars["reloadincust"] = CreateConVar("arccw_reloadincust", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Allow players to reload when customizing.", 0, 1)
ArcCW.ConVars["freeaim"] = CreateConVar("arccw_freeaim", 0, FCVAR_ARCHIVE + FCVAR_REPLICATED, "", 0, 2)

-- developer stuff
ArcCW.ConVars["reloadatts_mapcleanup"] = CreateConVar("arccw_reloadatts_mapcleanup", 0, 0, "Whether to reload ArcCW attachments on admin clean up.")
ArcCW.ConVars["reloadatts_registerentities"] = CreateConVar("arccw_reloadatts_registerentities", 1, 0, "Register attachment entities. This may increase time to reload attachments.")
ArcCW.ConVars["reloadatts_showignored"] = CreateConVar("arccw_reloadatts_showignored", 0, 0, "Whether to include attachments set to Ignore.")
ArcCW.ConVars["dev_debug"] = CreateConVar("arccw_dev_debug", 0, 0, "Developer debug HUD showing cool time shit.", 0, 1)
ArcCW.ConVars["dev_shootinfo"] = CreateConVar("arccw_dev_shootinfo", 0, 0, "Show debug overlay firing information. Only works when developer is set to 1.", 0, 3)
ArcCW.ConVars["dev_alwaysready"] = CreateConVar("arccw_dev_alwaysready", 0, 0, "Always draw using the ready animation.", 0, 1)
--CreateConVar("arccw_dev_cust2beta", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Use the new beta customize hud.", 0, 1)

if engine.ActiveGamemode() == "terrortown" then
    ArcCW.ConVars["ttt_replace"] = CreateConVar("arccw_ttt_replace", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Use custom code to forcefully replace TTT weapons with ArcCW ones.", 0, 1)
    ArcCW.ConVars["ttt_ammo"] = CreateConVar("arccw_ttt_ammo", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Replace TTT ammo with ArcCW ones, takes precedence over the default convar.", 0, 1)
    ArcCW.ConVars["ttt_atts"] = CreateConVar("arccw_ttt_atts", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Automatically set up ArcCW weapons with an attachment loadout.", 0, 1)
    ArcCW.ConVars["ttt_customizemode"] = CreateConVar("arccw_ttt_customizemode", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "If set to 1, disallow customization on ArcCW weapons. If set to 2, players can customize during setup and postgame. If set to 3, only T and Ds can customize.", 0, 3)
    ArcCW.ConVars["ttt_bodyattinfo"] = CreateConVar("arccw_ttt_bodyattinfo", 1, FCVAR_ARCHIVE + FCVAR_REPLICATED, "Whether a corpse contains info on the attachments of the murder weapon. 1 means detective only and 2 means everyone.", 0, 2)
end
--addons/[binbon]arccw_modify/lua/arccw/shared/attachments/default.lua:

/*

    Take a look at
    https://github.com/HaodongMo/ArcCW/wiki/Attachment-Parameters
    for descriptions on these

*/

att.PrintName = ""
att.AbbrevName = "" -- Shown in lists, cust2 only
att.Icon = nil
att.Description = ""
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = ""

att.SortOrder = 0

att.Spawnable = false -- generate entity
att.AdminOnly = false -- see above
att.Ignore = true
att.InvAtt = nil -- use this other attachment in inventory
att.Free = false -- attachment is always available, and doesn't need to be picked up or unlocked
att.IgnorePickX = false -- will not increment the Pick X counter
att.Hidden = false
att.HideIfBlocked = false -- if the attachment cannot be attached due to flag reasons, do not show up
att.HideIfUnavailable = false -- if the attachment is not owned, do not show up even if "Hide Unowned Attachments" is off
att.NoRandom = false -- will not be randomly rolled
att.RandomWeight = 1 -- random rolling weight, defaults to 1

att.NotForNPCs = false

att.AddPrefix = ""
att.AddSuffix = ""

att.ToggleLockDefault = false -- if true then lock attachment from switching stats through bind (use on stocks/colored stuff) 

att.ToggleStats = {
    -- {
    --     PrintName = "Red",
    --     AutoStatName = "On",
    --     NoAutoStat = false,
    --     Laser = true,
    --     LaserColor = Color(255, 0, 0),
    --     Mult_HipDispersion = 0.75,
    --     AdditionalSights = {
    --         {
    --             Pos = Vector(-2, 10, -4), -- relative to where att.Model is placed
    --             Ang = Angle(0, 0, -45),
    --             GlobalPos = false,
    --             GlobalAng = true,
    --             Magnification = 1
    --         }
    --     },
    -- },
    -- {
    --     PrintName = "Blue",
    --     AutoStats = true,
    --     Laser = true,
    --     LaserColor = Color(0, 0, 255),
    --     Mult_HipDispersion = 0.75,
    --     AdditionalSights = {
    --         {
    --             Pos = Vector(-2, 10, -4), -- relative to where att.Model is placed
    --             Ang = Angle(0, 0, -45),
    --             GlobalPos = false,
    --             GlobalAng = true,
    --             Magnification = 1
    --         }
    --     },
    -- },
    -- {
    --     PrintName = "Off",
    --     Laser = false,
    --     Mult_HipDispersion = 1,
    -- }
}

att.KeepBaseIrons = false
att.BaseIronsFirst = false

att.GivesFlags = {}
att.RequireFlags = {}
att.ExcludeFlags = {}

-- any strings present in data will be added to weapon flags
att.Hook_ExtraFlags = function(wep, data) end

-- Do not use right now.
att.SubSlots = {
    {
        PrintName = "Optic",
        Slot = {"optic", "optic_lp"}, -- OR
        Slot = "optic",
        DefaultAttName = "Iron Sights",
        DefaultAttIcon = Material(""),
        MergeSlots = {}, -- mergeslots are relative to att.SubSlots, so this entry would be [1], then [2], etc
        -- bone/wmbone is inherited
        ExtraSightDist = 0,
        Offset = { -- inherits from base slot
            vpos = Vector(0, 0, 0),
            vang = Angle(0, 0, 0),
            wpos = Vector(0, 0, 0),
            wang = Angle(0, 0, 0)
        },
        SlideAmount = {
            vmin = Vector(0, 0, 0),
            vmax = Vector(0, 0, 0),
            wmin = Vector(0, 0, 0),
            wmax = Vector(0, 0, 0),
        },
    }
    -- CorrectiveAng/Pos is inherited from base slot
    -- everything else is the same as normal slots
}

att.Max = nil -- the maximum number of this attachment that can be attached.

att.Model = ""
att.HideModel = false
att.ModelBodygroups = ""
att.ModelSkin = 0
att.ModelScale = Vector(1, 1, 1)
att.ModelOffset = Vector(0, 0, 0)
att.OffsetAng = Angle(0, 0, 0)
att.ModelIsShield = false
att.ShieldResistance = nil -- amount of penetration to get through one unit of shield
att.ShieldBone = "ValveBiped.Bip01_R_Hand"

att.Charm = false
att.CharmBone = "Charm"
att.CharmModel = ""
att.CharmOffset = Vector(0, 0, 0)
att.CharmScale = Vector(1, 1, 1)
att.CharmSkin = 0
att.CharmBodygroups = ""

att.Health = 0 -- for breakable attachments

att.ShieldCorrectAng = Angle(0, 0, 0)
att.ShieldCorrectPos = Vector(0, 0, 0)

-- amount of damage done to this attachment
-- attachments which are even a bit damaged are not returned
att.DamageOnShoot = 0
att.DamageOnReload = 0
att.DamagePerSecond = 0

-- {slot = int, atthp = float, dmg = DamageInfo}
att.Hook_PlayerTakeDamage = function(wep, data) end

-- {slot = int, oldhp = float, dmg = float}
att.Hook_AttTakeDamage = function(wep, data) end

-- {slot = int, dmg = float}
att.Hook_AttDestroyed = function(wep, data) end

att.VMColor = Color(255, 255, 255)
att.WMColor = Color(255, 255, 255)
att.VMMaterial = ""
att.WMMaterial = ""

att.DroppedModel = nil
att.LHIKHide = false -- use this to just hide the left hand
att.LHIK = false -- use this model for left hand IK
att.LHIK_Animation = false
att.LHIK_GunDriver = ""
att.LHIK_CamDriver = ""

att.Override_NoHideLeftHandInCustomization = nil

att.ActivateElements = {}

att.MountPositionOverride = nil -- set between 0 to 1 to always mount in a certain position

att.AdditionalSights = {
    {
        Pos = Vector(0, 0, 0), -- relative to where att.Model is placed
        Ang = Angle(0, 0, 0),
        GlobalPos = false, -- solver will not correct position relative to att.Model position
        GlobalAng = false, -- solver will not correct angle
        ViewModelFOV = 45,
        ScrollFunc = ArcCW.SCROLL_ZOOM,
        ZoomLevels = 6,
        ZoomSound = "weapons/arccw/fiveseven/fiveseven_slideback.wav",
        NVScope = nil, -- enables night vision effects for scope
        NVScopeColor = Color(0, 255, 100),
        NVFullColor = false, -- night vision scope is true full color
        Thermal = true,
        ThermalScopeColor = Color(255, 255, 255),
        ThermalHighlightColor = Color(255, 255, 255),
        ThermalFullColor = false,
        ThermalScopeSimple = false,
        ThermalNoCC = false,
        ThermalBHOT = false, -- invert bright/dark
        IgnoreExtra = false, -- ignore gun-determined extra sight distance
        Contrast = 1, -- allows you to adjust the values for contrast and brightness when either NVScope or Thermal is enabled.
        Brightness = 0,
        SpecialScopeFunction = function(screen) end -- perform whatever screen space effects you like here, copy SWEP:FormThermalImaging and SWEP:FormNightVision for examples
    }
}

att.UBGL = false -- is underbarrel grenade launcher
att.UBGL_Icon = nil -- set to a IMaterial to replace icon in HUD


att.UBGL_Automatic = false
att.UBGL_ClipSize = 1
att.UBGL_Ammo = "smg1_grenade"
att.UBGL_RPM = 300

-- Use animations on the weapon itself, useful for weapon-specific UBGL
att.UBGL_BaseAnims = false

-- wep: weapon
-- ubgl: UBGL attachment slot.
att.UBGL_Fire = function(wep, ubgl) end
att.UBGL_Reload = function(wep, ubgl) end

att.Silencer = false

att.Bipod = false
att.Bipod_Icon = nil -- set to a IMaterial to replace icon in HUD
att.Mult_BipodRecoil = 0.25
att.Mult_BipodDispersion = 0.1
att.Override_InBipodPos = nil

att.Override_AlwaysPhysBullet = nil
att.Override_NeverPhysBullet = nil

att.Override_AmmoPerShot = 1
att.Override_InfiniteAmmo = nil
att.Override_BottomlessClip = nil

att.MagExtender = false
att.MagReducer = false
att.OverrideClipSize = nil
att.Add_ClipSize = 0
att.BaseClipSize = nil -- currently only used to make autostats treat this as the "base" clip size for pros/cons

att.Override_FuseTime = nil

att.Laser = false
att.LaserStrength = 1
att.LaserBone = "laser"
att.LaserColor = Color(255, 0, 0)

att.Flashlight = false
att.FlashlightFOV = 50
att.FlashlightHFOV = nil -- horizontal FOV
att.FlashlightVFOV = nil -- vertical FOV
-- basically, use HFOV + VFOV if you want it to be non square
att.FlashlightFarZ = 512 -- how far it goes
att.FlashlightNearZ = 4 -- how far away it starts
att.FlashlightAttenuationType = ArcCW.FLASH_ATT_LINEAR -- LINEAR, CONSTANT, QUADRATIC are available
att.FlashlightColor = Color(255, 255, 255)
att.FlashlightTexture = ""
att.FlashlightBrightness = 1
att.FlashlightBone = "laser"

att.Holosight = false
att.HolosightReticle = nil
att.HolosightFlare = nil
att.HolosightSize = nil
att.HolosightBone = "holosight"
att.HolosightPiece = nil -- the lens of the holo sight, if applicable
att.HolosightMagnification = 1 -- magnify the lens by this much
att.HolosightBlackbox = false
att.HolosightNoHSP = false -- for this holosight ignore HSP
att.HolosightConstDist = nil -- constant holosight distance, mainly for scopes with range finder

att.Colorable = false -- automatically use the player's color option
att.HolosightColor = Color(255, 255, 255)

att.Override_Ammo = "ar2" -- overrides the ammo type with this one

att.Override_Firemodes = {}

-- you can use _Priority to determine the priority of overrides.
-- append it to the end of an Override_ stat to set this.
-- for example, att.Override_Firemodes_Priority = 2
-- higher priority = will be chosen over lower priority
-- default priority for all stats is 1.

-- all hooks will work when applied to the SWEP table as well
-- e.g. SWEP.Hook_FireBullets

-- use A_Hook_[Add_Whatever] to hook into additive hooks.
-- {buff = string buff, add = num add}
-- return table

-- use O_Hook_[Override_Whatever] to hook into override hooks.
-- {buff = string buff, current = any override, winningslot = int slot}

-- use M_Hook_[Mult_Whatever] to hook into multiply hooks.
-- {buff = string buff, mult = num mult}

-- all hooks, mults, and adds will work on fire modes

-- called when the active sight is changed
-- return to change activesight
-- {active = int activesight, asight = table}
att.Hook_SwitchActiveSights = function(wep, data) end

-- Allows you to directly edit the burst count
att.Hook_GetBurstCount = function(wep, burstcount) end

-- Allows you to directly edit how long a burst is
att.Hook_GetBurstLength = function(wep, length) end

-- Allows you to directly edit whether the weapon is reloading/inoperable
att.Hook_GetReloading = function(wep, reloading) end

-- Directly modify dispersion
att.Hook_ModDispersion = function(wep, dispersion) end

-- Allows you to change the weapon's name
-- string name
att.Hook_NameChange = function(wep, name) end

-- allows you to do whatever you like to the weapon VMs
-- {vm = vm, eles = ae}
att.Hook_ModifyBodygroups = function(wep, data) end

-- modify the attachment however you like; only called for the particular attachment
-- {vm = vm, element = VElement / WElement, slottbl = slottbl, wm = false/true}
att.Hook_ModifyAttBodygroups = function(wep, data) end

-- allows you to return a shotgun spread offset
-- {n = int number, ang = angle offset}
att.Hook_ShotgunSpreadOffset = function(wep, data) end

-- done before playing an effect
-- return false to prevent playing
-- fx: {eff = effect name, fx = EffectData()}
att.Hook_PreDoEffects = function(wep, fx) end

-- return true = compatible
-- return false = incompatible
-- data = {slot = string or table, att = string}
att.Hook_Compatible = function(wep, data) end

-- called before the bullet is made.
att.Hook_PostFireBullets = function(wep) end

-- hook that lets you change the values of the bullet before it's fired.
att.Hook_FireBullets = function(wep, bullettable) end

-- called after all other primary attack functions. Do stuff here.
att.Hook_PostFireBullets = function(wep) end

-- return true to prevent fire
att.Hook_ShouldNotFire = function(wep) end

-- return true to prevent fire, bashing, anything involving the fire button
att.Hook_ShouldNotFireFirst = function(wep) end

-- return true to prevent ads
att.Hook_ShouldNotSight = function(wep) end

-- return anything to select this reload animation. Bear in mind that not all guns have the same animations, so check first.
att.Hook_SelectReloadAnimation = function(wep, curanim) end

-- return anything to multiply reload time by that much
att.Hook_MultReload = function(wep, mult) end

-- data has entries:
-- number count, how much ammo to add with this insert
-- string anim, which animation to play
-- bool empty, whether we are reloading from empty
att.Hook_SelectInsertAnimation = function(wep, data) end

-- return to override fire animation
att.Hook_SelectFireAnimation = function(wep, curanim) end

-- return string to change played anim
-- string anim, animation we are attempting to play
-- return false to block animation
-- return nil to do nothing
att.Hook_TranslateAnimation = function(wep, anim) end

-- directly changes source sequence to play
-- seq and return can either be string or table
att.Hook_TranslateSequence = function(wep, seq) end

-- called when the vm is about to play an idle animation
-- return a value to override ianim
att.Hook_IdleReset = function(wep, ianim) end

-- allows any sound to be translated to any other
att.Hook_TranslateSound = function(wep, soundname) end

-- directly changes sequence to play
-- return "DoNotPlayIdle" to stop idle animation
att.Hook_LHIK_TranslateAnimation = function(wep, anim) end

-- att.Hook_TranslateAnimation = function(wep, anim)
--     if anim == "reload" then
--         return "reload_soh"
--     elseif anim == "reload_empty" then
--         return "reload_empty_soh"
--     end
-- end

-- anim is string
att.Hook_SelectBashAnim = function(wep, anim) end

att.Hook_SelectFixAnim = function(wep, anim) end

att.Hook_PreBash = function(wep) end

-- data = {tr = tr, dmg = dmg}
att.Hook_PostBash = function(wep, data) end

-- Called just before a physbullet will call FireBullets
-- data.bullet - physbullet info; data.tr - trace info
att.Hook_PhysBulletHit = function(wep, data) end

-- data has entries:
-- number range, the distance the bullet had to travel
-- number damage, the calculated damage the bullet will do
-- number penleft, the amount of penetration the bullet still possesses
-- enum dmgtype, the DMG_ enum of the damagetype
-- table tr, the trace result
-- entity att, the attacker (?)
-- DamageInfo dmg, the damage info

-- changes to dmg may be overwritten later, so set damage and dmgtype instead
att.Hook_BulletHit = function(wep, data) end

-- called right after BulletHit, no further changes can be applied to damage
att.Hook_PostBulletHit = function(wep, data) end

-- return true to prevent reloading
att.Hook_PreReload = function(wep) end

att.Hook_PostReload = function(wep) end

-- return true to prevent firemode change
att.Hook_ChangeFiremode = function(wep) end

-- return true to ignore current bullets in clip when reloading
att.Hook_ReloadDumpClip = function(wep) end

att.Hook_GetVisualBullets = function(wep) end

att.Hook_GetVisualClip = function(wep) end

-- modify what the event system be do
-- the event is a table containing stuff that it does
-- sh_timers last stuff timers are stupid lets not
-- please dont return anything people kinda would wanna run events i'd imagine
att.Hook_PrePlayEvent = function(wep, event) end
att.Hook_PostPlayEvent = function(wep, event) end

-- return to set mag capacity
att.Hook_GetCapacity = function(wep, cap) end

-- return false to suppress shoot sound
-- string sound = default sound
att.Hook_GetShootSound = function(wep, sound) end
att.Hook_GetShootDrySound = function(wep, sound) end
att.Hook_GetDistantShootSound = function(wep, sound) end

-- return a string to change the default attachment name and icon for that slot
-- int slot = slot of attachment to name/set icon
att.Hook_GetDefaultAttName = function(wep, slot) end
att.Hook_GetDefaultAttIcon = function(wep, slot) end

-- or just add more!
-- data has entries:
-- string sound
-- number volume
-- number pitch
att.Hook_AddShootSound = function(wep, data) end
--    att.Hook_AddShootSound = function(wep, data)
--      wep:MyEmitSound("weapons/pistol/pistol_fire2.wav", data.volume, data.pitch, 1, CHAN_WEAPON - 1)
--    end

-- allows you to modify the weapon's rate of fire
att.Hook_ModifyRPM = function(wep, delay) end

-- return a table containing Recoil, RecoilSide, VisualRecoilMult to multiply them
-- Alternatively, edit the values in rec without returning, which supports multiple hooks changing the value
att.Hook_ModifyRecoil = function(wep, rec) end

-- run in Think()
att.Hook_Think = function(wep) end

-- thinking hook for att
att.DrawFunc = function(wep, element, wm) end

-- after ADS starts or ends
att.Hook_SightToggle = function(wep, enter) end

att.Override_Trivia_Class = nil -- "Submachine Gun"
att.Override_Trivia_Desc = nil -- "Ubiquitous 9mm SMG. Created as a response to the need for a faster-firing and more reliable submachine gun than existing options at the time."
att.Override_Trivia_Manufacturer = nil -- "Auschen Waffenfabrik"
att.Override_Trivia_Calibre = nil -- "9x21mm Jager"
att.Override_Trivia_Mechanism = nil -- "Roller-Delayed Blowback"
att.Override_Trivia_Country = nil -- "Austria"
att.Override_Trivia_Year = nil -- 1968

att.Mult_Damage = 1
att.Mult_DamageMin = 1
att.Mult_DamageRand = 1
att.Mult_DamageNPC = 1 -- damage WHEN USED BY NPCS not when used against them
att.Mult_Range = 1
att.Mult_Penetration = 1
att.Override_DamageType = nil
att.Override_DamageTypeHandled = nil
att.Override_ShootEntity = nil
att.Mult_MuzzleVelocity = 1

att.Override_BodyDamageMults = nil

att.Override_ShotgunSpreadPattern = {}
att.Override_ShotgunSpreadPatternOverrun = {}

att.Override_NoRandSpread = false -- disable (random) spread modification after bullet table override

att.Mult_MeleeTime = 1
att.Mult_MeleeDamage = 1
att.Add_MeleeRange = 0
att.Mult_MeleeAttackTime = 1
att.Override_MeleeDamageType = nil

att.Override_Lunge = nil
att.Add_LungeLength = 0
att.Mult_LungeLength = 1

-- jam/heat related buffs
att.Override_Jamming = nil
att.Mult_HeatCapacity = 1
att.Mult_FixTime = 1
att.Mult_HeatDissipation = 1
att.Mult_HeatDelayTime = 1
att.Override_HeatFix = nil
att.Override_HeatLockout = nil
att.Hook_Overheat = function(wep, heat) end
att.Hook_PostOverheat = function(wep) end
-- Return true to not do animation/heat locking
att.Hook_OnOverheat = function(wep) end
att.HeatOverflow = nil

-- malfunction related buffs
att.Override_Malfunction = nil
att.Override_MalfunctionTakeRound = nil
att.Override_MalfunctionJam = nil
att.Mult_MalfunctionMean = 1
att.Mult_MalfunctionVariance = 1
att.Mult_MalfunctionFixTime = 1

-- Called every time malfunction is checked. return true to cause malfunction
att.Hook_Malfunction = function(wep, count) end
-- Called when a malfunction is about to happen. return true to stop malfunction
att.Hook_OnMalfunction = function(wep, count) end
-- Called after a malfunction has occurred.
att.Hook_PostMalfunction = function(wep) end

att.Override_Tracer = nil -- tracer effect name
att.Override_TracerNum = nil
-- att.Override_TracerCol = nil
-- att.Mult_TracerWidth = 1
att.TracerFinalMag = nil

att.Override_PhysTracerProfile = nil -- color for phys tracer.
-- there are 8 options:
-- 0 = normal
-- 1 = red
-- 2 = green
-- 3 = blue
-- 4 = yellow
-- 5 = violet
-- 6 = cyan
-- 7 = black/invisible

att.Override_CanBash = nil

att.Override_ShotgunReload = nil
att.Override_HybridReload = nil

att.Override_AutoReload = nil

att.Override_ManualAction = nil

att.Override_CanFireUnderwater = nil

att.Override_ChamberSize = nil
att.Add_ChamberSize = nil

att.Mult_Recoil = 1
att.Mult_RecoilSide = 1
att.Mult_VisualRecoilMult = 1

att.Mult_Sway = 1

att.Override_ShootWhileSprint = nil

att.Mult_RPM = 1

att.Add_Num = nil
att.Mult_Num = nil
att.Override_Num = nil

att.Mult_AccuracyMOA = 1
att.Mult_HipDispersion = 1
att.Mult_SightsDispersion = 1

att.Mult_ShootVol = 1
att.Mult_ShootPitch = 1

att.Mult_GlintMagnitude = 1

att.Override_MuzzleEffect = nil
att.Override_FastMuzzleEffect = nil
att.Override_GMMuzzleEffect = nil

att.Override_ShellEffect = nil
att.Override_ShellMaterial = nil

att.Override_MuzzleEffectAttachment = nil
att.Override_CaseEffectAttachment = nil

att.Mult_SpeedMult = 1
att.Mult_SightedSpeedMult = 1
att.Mult_ShootSpeedMult = 1

att.Override_HoldtypeHolstered = nil
att.Override_HoldtypeActive = nil
att.Override_HoldtypeSights = nil

att.Override_AnimShoot = nil

att.Override_HolsterPos = nil
att.Override_HolsterAng = nil

att.Add_BarrelLength = 0

att.Override_BarrelOffsetSighted = nil
att.Override_BarrelOffsetHip = nil

att.Mult_ReloadTime = 1
att.Mult_DrawTime = 1
att.Mult_SightTime = 1
att.Mult_CycleTime = 1

att.AttachSound = nil
att.DetachSound = nil
att.ToggleSound = nil

-- free aim related buffs
att.Override_FreeAimAngle = nil
att.Mult_FreeAimAngle = nil
att.Add_FreeAimAngle = nil
att.Override_NeverFreeAim = nil
att.Override_AlwaysFreeAim = nil

att.Hook_OnDeploy = function(wep) end
att.Hook_OnHolster = function(wep) end
att.Hook_OnHolsterEnd = function(wep) end

-- bool dodefault - set false to not do default throwing behavior
-- vector force
-- string shootentity
-- number/nil fusetime
att.Hook_Throw = function(wep, data) end
--lua/arccw/shared/attachments/mw2_ubgl_m203.lua:
att.PrintName = "Grenade Launcher"
att.Icon = Material("entities/acwatt_mw2_ubgl_m203.png", "smooth")
att.Description = "Weapon-exclusive grenade launcher with its own unique animations."
att.Desc_Pros = {
    "pro.ubgl",
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
    "info.toggleubgl"
}
att.AutoStats = true
att.Slot = "mw2_ubgl"

att.SortOrder = 1738

att.MountPositionOverride = 0

att.UBGL = true
att.UBGL_BaseAnims = true

att.UBGL_PrintName = "UB (HE)"
att.UBGL_Automatic = false
att.UBGL_MuzzleEffect = "muzzleflash_m79"
att.UBGL_ClipSize = 1
att.UBGL_Ammo = "smg1_grenade"
att.UBGL_RPM = 1200
att.UBGL_Recoil = 2 -- There's a animation error with your hand, please don't notice it ^-^
att.UBGL_Capacity = 1

att.AddSuffix = " Grenadier"

att.Hook_ShouldNotSight = function(wep)
    return wep:GetInUBGL()
end

local function Ammo(wep)
    return wep.Owner:GetAmmoCount("smg1_grenade")
end

att.UBGL_Fire = function(wep, ubgl)
    if wep:Clip2() <= 0 then return end

    wep:PlayAnimation("alt_fire_m203", 1, true, nil, nil, nil, true)

    wep:FireRocket("arccw_gl_he_mw2", 1000)

    if wep.MW2_M203isGP25 then
        wep:EmitSound("weapons/fesiugmw2/fire/gp25.wav", 100)
    else
        wep:EmitSound("weapons/fesiugmw2/fire/m203.wav", 100)
    end

    wep:SetClip2(wep:Clip2() - 1)

    wep:DoEffects()
end

att.UBGL_Reload = function(wep, ubgl)
    if wep:Clip2() >= 1 then return end

    if Ammo(wep) <= 0 then return end

    wep:PlayAnimation("alt_reload_m203", 1, true, nil, nil, nil, true)
    wep:SetReloading(CurTime() + wep:GetAnimKeyTime("alt_reload_m203"))

    local reserve = Ammo(wep)

    reserve = reserve + wep:Clip2()

    local clip = 1

    local load = math.Clamp(clip, 0, reserve)

    wep.Owner:SetAmmo(reserve - load, "smg1_grenade")

    wep:SetClip2(load)
end

att.Mult_SightTime = 1.25
-- att.Mult_SpeedMult = 0.8
att.Mult_SightedSpeedMult = 0.85
--lua/arccw/shared/attachments/mw2_ubgl_masterkey.lua:
att.PrintName = "Shotgun"
att.Icon = Material("entities/acwatt_mw2_ubgl_masterkey.png", "smooth")
att.Description = "Weapon-exclusive underbarrel shotgun with its own unique animations."
att.Desc_Pros = {
	"pro.ubsg",
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
	"info.toggleubgl"
}
att.AutoStats = true
att.Slot = "mw2_ubgl"

att.SortOrder = 1738 - 0.1

att.MountPositionOverride = 0

att.UBGL = true
att.UBGL_BaseAnims = true

att.UBGL_PrintName = "UB (BUCK)"
att.UBGL_Automatic = false
att.UBGL_MuzzleEffect = "muzzleflash_m3"
att.UBGL_ClipSize = 4
att.UBGL_Ammo = "buckshot"
att.UBGL_RPM = 1200
att.UBGL_Recoil = 0
att.UBGL_Capacity = 4

att.AddSuffix = " w/ Shotgun"

att.Hook_ShouldNotSight = function(wep)
	return wep:GetInUBGL()
end

local function Ammo(wep)
	return wep.Owner:GetAmmoCount("buckshot")
end

att.UBGL_Fire = function(wep, ubgl)
	if wep:GetMW2Masterkey_Reloading() then
		MW2Masterkey_ReloadFinish(wep)
		return
	end
	if wep:GetMW2Masterkey_NeedPump() then return end
	if wep:Clip2() <= 0 then return end

	wep:PlayAnimation("alt_fire_masterkey", 1, true, nil, nil, nil, true)
    wep:SetWeaponOpDelay(CurTime() + 0.43)

	wep.Owner:FireBullets({
		Src = wep.Owner:EyePos(),
		Num = 6,
		Damage = 25,
		Force = 2,
		Attacker = wep.Owner,
		Dir = wep.Owner:EyeAngles():Forward(),
		Spread = Vector(0.1, 0.1, 0),
		Callback = function(_, tr, dmg)
			local dist = (tr.HitPos - tr.StartPos):Length() * ArcCW.HUToM

			local dmgmax = 25
			local dmgmin = 0

			local delta = dist / 1750 * 0.025

			delta = math.Clamp(delta, 0, 1)

			local amt = Lerp(delta, dmgmax, dmgmin)

			dmg:SetDamage(amt)
		end
	})

	wep:EmitSound("weapons/fesiugmw2/fire/shot_attach.wav", 100)

	wep:SetClip2(wep:Clip2() - 1)

	wep:DoEffects()
	wep:SetMW2Masterkey_NeedPump(true)
end

att.UBGL_Reload = function(wep, ubgl)
	if wep:Clip2() >= 4 then return end
	if Ammo(wep) <= 0 then return end
	if wep:GetMW2Masterkey_Reloading() then return end

	MW2Masterkey_ReloadStart(wep)
	wep:SetMW2Masterkey_Reloading(true)
end

att.Hook_Think = function(wep)
	if wep:GetMW2Masterkey_NeedPump() and wep:GetWeaponOpDelay() <= CurTime() and wep:Clip2() > 0 and !wep:GetMW2Masterkey_Reloading() and !wep.Owner:KeyDown(IN_ATTACK) then
		wep:PlayAnimation("alt_cycle_masterkey", 1, true, nil, nil, nil, true)
		wep:SetReloading(CurTime() + 15/30)
		wep:SetMW2Masterkey_NeedPump(false)
	end
	if wep:GetMW2Masterkey_Reloading() and wep:GetMW2Masterkey_ReloadingTimer() < CurTime() and wep:Clip2() >= 4 then
		MW2Masterkey_ReloadFinish(wep)
	elseif wep:GetMW2Masterkey_Reloading() and wep:GetMW2Masterkey_ReloadingTimer() < CurTime() and wep:Clip2() < 4 then
		MW2Masterkey_ReloadLoop(wep)
	end

    if wep:GetMW2Masterkey_ShellInsertTime() < CurTime() and wep:GetMW2Masterkey_ShellInsertTime() != 0 then
	    MW2Masterkey_InsertShell(wep)
        wep:SetMW2Masterkey_ShellInsertTime(0)
    end
end

function MW2Masterkey_ReloadStart(wep)
	wep:PlayAnimation("alt_reload_start_masterkey", 1, true, nil, nil, nil, true)
	wep:SetReloading(CurTime() + 1)
	wep:SetMW2Masterkey_ReloadingTimer(CurTime() + 1)
    wep:SetMW2Masterkey_ShellInsertTime(CurTime() + 0.6)
	wep:SetMW2Masterkey_Reloading(true)
end

function MW2Masterkey_ReloadLoop(wep)
	wep:PlayAnimation("alt_reload_loop_masterkey", 1, true, nil, nil, nil, true)
	wep:SetReloading(CurTime() + 0.75)
	wep:SetMW2Masterkey_ReloadingTimer(CurTime() + 0.75)
    wep:SetMW2Masterkey_ShellInsertTime(CurTime() + 0.55)
end

function MW2Masterkey_ReloadFinish(wep)
	wep:PlayAnimation("alt_reload_finish_masterkey", 1, true, nil, nil, nil, true)
	wep:SetReloading(CurTime() + 1.35)
	wep:SetMW2Masterkey_Reloading(false)
	wep:SetMW2Masterkey_NeedPump(false)
end

function MW2Masterkey_InsertShell(wep)
	wep.Owner:RemoveAmmo(1, "buckshot")
	wep:SetClip2(wep:Clip2() + 1)
end

att.Mult_SightTime = 1.25
-- att.Mult_SpeedMult = 0.8
att.Mult_SightedSpeedMult = 0.85
--lua/arccw/shared/attachments/mw2_wepcamo_thunderstorm.lua:
return gluapack()()
--lua/arccw/shared/attachments/mw2_wepcamo_whiteout.lua:
return gluapack()()
--lua/arccw/shared/attachments/optic_mw2_acog.lua:
att.PrintName = "ACOG (2.1x)"
att.Icon = Material("entities/acwatt_optic_mw2_acog.png", "smooth")
att.Description = "Magnified medium-range optic. ACOG stands for 'Advanced Combat Optical Gunsight'."

att.SortOrder = 2.1

att.Desc_Pros = {
    "autostat.holosight",
    "autostat.zoom",
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
    "info.togglesight"
}
att.AutoStats = true
att.Slot = {"optic"}

att.Model = "models/weapons/arccw/fesiugmw2/atts/scopes/acog_2.mdl"

att.AdditionalSights = {
    {
        Pos = Vector(0, 10, -0.98),
        Ang = Angle(0, 0, 0),
        ViewModelFOV = 65 / 2.1,
        Magnification = 2.1,
        IgnoreExtra = true
    },
    {
        Pos = Vector(0.62, 10, -1.5),
        Ang = Angle(-0.8, 0, 0),
        ViewModelFOV = 65 / 1.3,
        Magnification = 1.3,
        IgnoreExtra = true
    },
}

att.ModelOffset = Vector(-1, 0, -0.1)

att.Holosight = false

att.Mult_SightTime = 1.12
att.Mult_SightedSpeedMult = 0.92

att.Hook_ModifyRecoil = function(wep)
    return {VisualRecoilMult = wep:GetSightDelta()}
end

att.AddSuffix = " ACOG"
--lua/arccw/shared/attachments/optic_mw2_tuna.lua:
att.PrintName = "Tuna (RDS)"
att.Icon = Material("entities/acwatt_optic_tuna.png", "smooth")
att.Description = "Integrated telescopic scope created for the F2000."

att.SortOrder = 0

att.Desc_Pros = {
    "autostat.holosight",
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = "optic"

att.Model 			= "models/weapons/arccw/fesiugmw2/atts/scopes/tuna_2.mdl"
att.ModelOffset = Vector(-1, 0, -0.3)

att.AdditionalSights = {
    {
        Pos = Vector(-0, 3, -1),
        Ang = Angle(0, 0, 0),
        ViewModelFOV = 65 / 1.3,
        Magnification = 1.3,
        ScrollFunc = ArcCW.SCROLL_NONE,
        IgnoreExtra = true,
    }
}

att.ScopeGlint = false

att.Holosight = true
att.HolosightReticle = Material("holosights/mw2_reddot.png", "mips smooth")
att.HolosightSize = 0.3
att.HolosightBone = "holosight"

att.Colorable = true

att.Mult_SightTime = 1.05

att.AddSuffix = " Tuna"
--lua/arccw/shared/attachments/supp_mw2.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_40mm_dp.lua:
att.PrintName = "40mm Dual Purpose Grenades"
att.AbbrevName = "Dual Purpose"
att.Icon = Material("entities/att/arccw_uc_40mm_generic.png", "mips smooth")
att.Description = "Grenades with a shaped charge for armor penetration, allowing it to punch through thin walls or deal massive impact damage to enemies or vehicles."
att.Desc_Pros = {
    "uc.40mm.hedp",
    "uc.40mm.impact"
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_40mm"

att.Override_ShootEntity = "arccw_uc_40mm_dp"

att.AutoStats = true

att.Mult_Damage = 0.6
att.Mult_DamageMin = 0.6

att.ActivateElements = {"40mm_dp"}
--lua/arccw/shared/attachments/uc_ammo_blank.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ammo_sg_bird.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ammo_sg_drgn.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_charm_urbancharm_decay.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_grip_mafg2.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_muzzle_supp_pbs1.lua:
att.PrintName = "PBS-1 Suppressor"

att.Icon = Material("entities/att/acwatt_uc_muzzle_supp_pbs1.png", "mips smooth")
att.Description = "Traps propellant gas from the muzzle, reducing visual and audible report.\nGas redirection causes the side benefit of straightening recoil."
att.Desc_Neutrals = {"uc.exclusive.762", "uc.supptail"}

att.AutoStats = true
att.Slot = {"ur_ak_muzzle"}

att.SortOrder = 149

att.Model = "models/weapons/arccw/atts/uc_pbs1.mdl"
att.ModelOffset = Vector(2.9, 0, 0)
att.ModelScale = Vector(1.3, 1.3, 1.3)
att.OffsetAng = Angle(0, 0, 0)

att.Silencer = true
att.Override_MuzzleEffect = "muzzleflash_suppressed"
att.IsMuzzleDevice = true

att.Mult_ShootPitch = 1.1
att.Mult_ShootVol = 0.75
att.Mult_RecoilSide = 0.75

att.Add_BarrelLength = 5
att.Mult_SightTime = 1.1
att.Mult_Sway = 1.15

att.AttachSound = "arccw_uc/common/gunsmith/suppressor_thread.ogg"

att.Hook_Compatible = function(wep)
    if wep.Primary.Ammo != "ar2" then
        return false
    end
end

att.Hook_GetDistantShootSound = function(wep, distancesound)
    if wep:GetBuff("PhysBulletMuzzleVelocity") < ArcCW.UC.SubsonicThreshold then
        return false
    end
end
--lua/arccw/shared/attachments/uc_muzzle_supp_ssq.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_optic_acog.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_optic_eotech553.lua:
att.PrintName = "EOTech 553 (HOLO)"
att.Icon = Material("entities/att/acwatt_uc_optic_eotech553.png", "mips smooth")
att.Description = "Tried-and-true sighting solution for close to medium ranges. Improves target acquisition with a highly precise circle-dot holographic reticle while adding minimal extra weight."

att.SortOrder = 1

att.Desc_Pros = {
    "autostat.holosight",
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = "optic"

att.Model = "models/weapons/arccw/atts/uc_gso_eotech.mdl"
att.ModelOffset = Vector(-0.5, 0, 0.05)
att.ModelScale = Vector(1.3, 1.3, 1.3)

att.AdditionalSights = {
    {
        Pos = Vector(0, 9, -1.53),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        ScrollFunc = ArcCW.SCROLL_NONE
    }
}

att.Holosight = true
att.HolosightReticle = Material("hud/reticles/ud_holo.png", "smooth")
att.HolosightSize = 1.1
att.HolosightBone = "holosight"
att.HolosightNoFlare = true

att.Colorable = true

att.Mult_SightedSpeedMult = 0.9
--lua/arccw/shared/attachments/uc_optic_holosun1.lua:
att.PrintName = "Holosun HS510C (Riser) (RDS)"
att.AbbrevName = "Holosun (R) (RDS)"
att.Icon = Material("entities/att/acwatt_uc_optic_holosun1.png", "mips smooth")
att.Description = "Improves sighted visibility with a red-dot targeting reticle, while adding minimal extra weight.\nIncludes a riser."

att.SortOrder = 1

att.Desc_Pros = {
    "autostat.holosight",
}
att.Desc_Cons = {
}
att.AutoStats = true
att.Slot = {"optic"}

att.Model = "models/weapons/arccw/atts/uc_holosun1.mdl"
att.ModelScale = Vector( 1.5, 1.5, 1.5 )
att.ModelOffset = Vector( -0.5, 0, 0 )

att.AdditionalSights = {
    {
        Pos = Vector(0, 9.5, -1.5),
        Ang = Angle(0, 0, 0),
        Magnification = 1.1,
        ScrollFunc = ArcCW.SCROLL_NONE
    }
}

att.Holosight = true
att.HolosightReticle = Material("hud/reticles/uc_reddot.png", "mips smooth")
att.HolosightNoFlare = false
att.HolosightSize = 1.5
att.HolosightBone = "holosight"
att.Colorable = true

att.Mult_SightedSpeedMult = .9
--lua/arccw/shared/attachments/uc_powder_subsonic.lua:
att.PrintName = "Subsonic"

att.SortOrder = 17
att.Icon = Material("entities/att/acwatt_uc_powder_subsonic.png", "smooth mips")
att.Description = [[Powder load low enough to make the bullet travel slower than the speed of sound. This reduces range significantly, but makes gunfire very comfortable and quiet (comparatively speaking).
The sonic boom typical of the round is eliminated, rendering it even more silent than usual with a suppressed firearm.]]
att.Desc_Pros = {
    "pro.invistracers",
    -- "uc.subsonic"
}
att.Desc_Cons = {
    "uc.subsonic.vel"
}
att.Desc_Neutrals = {
}
att.Slot = "uc_powder"

att.AutoStats = true

att.Mult_RecoilSide = 0.75
att.Mult_Recoil = 0.8
att.Mult_RangeMin = 0.75
att.Mult_Range = 0.7

att.Mult_RPM = 0.89
att.Mult_ShootVol = 0.8
--att.Mult_ShootPitch = 1.1 please don't

att.Override_PhysTracerProfile = 7
att.Override_TracerNum = 0

att.Mult_MalfunctionMean = 1.3
att.Override_PhysBulletMuzzleVelocity = 339
att.Override_PhysBulletMuzzleVelocity_Priority = 2

-- att.Hook_GetDistantShootSound = function(wep, distancesound)
--     if distancesound == wep.DistantShootSoundSilenced then
--         return false
--     end
-- end

att.GivesFlags = {"powder_subsonic"}
att.ExcludeFlags = {"cal_subsonic"}
--lua/arccw/shared/attachments/uc_tac_anpeq2.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_tp_overload.lua:
att.PrintName = "Overload"

att.Icon = Material("entities/att/arccw_uc_tp_overload.png", "smooth mips")
att.Description = "With a little grease and some physical force, most magazines can be made to accept an extra round."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "uc_tp"

att.AutoStats = true
att.SortOrder = 8

att.Add_ClipSize = 1

att.Hook_Compatible = function(wep)
    if wep.RejectMagSizeChange or wep:GetCapacity() == 1 then return false end
end

att.NotForNPCs = true
--lua/arccw/shared/attachments/uc_tp_pointman.lua:
return gluapack()()
--lua/arccw/shared/attachments/uc_ubgl_m203.lua:
att.PrintName = "M203 Underbarrel Grenade Launcher"
att.AbbrevName = "M203 Grenade Launcher"
att.Icon = Material("entities/att/acwatt_uc_ubgl_m203.png", "mips smooth")
att.Description = "Single-shot underbarrel grenade launcher designed to replace the Colt XM148. Able to fire several basic 40x46mm grenade types."

att.SortOrder = -100000

att.AutoStats = true
att.Desc_Pros = {
}
att.Slot = "uc_ubgl"
att.ExcludeFlags = {"uc_noubgl"}

att.LHIK = true

att.ModelOffset = Vector(0, 0, 0)
att.Model = "models/weapons/arccw/atts/uc_ubgl_m203.mdl"

att.SelectUBGLSound =  ""
att.ExitUBGLSound = ""

att.UBGL = true

att.UBGL_PrintName = "UBGL"
att.UBGL_Automatic = false
att.UBGL_MuzzleEffect = "muzzleflash_m79"
att.UBGL_Ammo = "smg1_grenade"
att.UBGL_RPM = 120
att.UBGL_Recoil = 2

-- ??
att.UBGL_Capacity = 1
att.UBGL_ClipSize = 1

att.LHIK_GunDriver = 2
att.LHIK_CamDriver = 3

local pretty = GetConVar("arccw_uc_infiniteubwammo")

att.Hook_ModifyAttBodygroups = function(wep, data)
    if wep:GetBuff_Override("UC_UseClassicM203Mount") then
        data.element.Model:SetBodygroup(1, 1)
    end
end

local function Ammo(wep)
    return (pretty:GetBool() and 9999 or wep:GetOwner():GetAmmoCount("smg1_grenade"))
end

att.Hook_LHIK_TranslateAnimation = function(wep, key)
    if key == "idle" then
        if wep:GetInUBGL() then
            return "idle_armed"
        else
            return "idle"
        end
    end
end

att.Hook_ShouldNotSight = function(wep)
    if wep:GetInUBGL() then
        return true
    end
end

att.Hook_OnSelectUBGL = function(wep)
    wep:SetNextSecondaryFire(CurTime() + 0.7)
    if (game.SinglePlayer() and SERVER) or (!game.SinglePlayer() and CLIENT and IsFirstTimePredicted()) then
        wep:DoLHIKAnimation("to_armed", 0.7)
        wep:PlaySoundTable({
            {s = "arccw_uc/common/rattle_b2i_rifle.ogg", t = 0},
            {s = "arccw_uc/common/raise.ogg", t = 0.2},
            {s = "arccw_uc/common/grab.ogg", t = 0.5},
        })
    end
end

att.Hook_OnDeselectUBGL = function(wep)
    wep:SetNextSecondaryFire(CurTime() + 0.7)
    if (game.SinglePlayer() and SERVER) or (!game.SinglePlayer() and CLIENT and IsFirstTimePredicted()) then
        wep:DoLHIKAnimation("to_idle", 0.7)
        wep:PlaySoundTable({
            {s = "arccw_uc/common/rattle_b2i_rifle.ogg", t = 0},
            {s = "arccw_uc/common/shoulder.ogg", t = 0.4},
        })
    end
end

att.UBGL_Fire = function(wep, ubgl)
    if wep:Clip2() <= 0 then return end

    local owner = wep:GetOwner()
    local class = wep:GetBuff_Override("UBGL_Entity") or "arccw_uc_40mm_he"

    if class == "BUCKSHOT" then
        local dir = (owner:EyeAngles() + wep:GetFreeAimOffset()):Forward()

        local bullet = {
            DamageMax = 18,
            DamageMin = 6,
            Range = 50,
            RangeMin = 5,
            DamageType = DMG_BUCKSHOT + DMG_BULLET,
            Penleft = 0,
            Penetration = 0,
            Num = 1,
            Damaged = {},
            Weapon = wep,
        }

        local data = {
            Attacker = owner,
            Dir        = dir,
            Src        = wep:GetShootSrc(),
            Spread     = Vector(0, 0, 0),
            Damage     = 0,
            Num        = 1,
            Force      = 5,
            HullSize   = 4,
            Weapon     = wep,
            Callback = function(attacker, tr, dmg)
                -- HACK: Pass a fake bullet table instead of ourselves so we don't use the weapon's attributes unintentionally
                bullet.Travelled = (tr.HitPos - tr.StartPos):Length()
                ArcCW:BulletCallback(att, tr, dmg, bullet)
            end
        }

        if wep:GetOwner():IsPlayer() then
            for n = 1, 20 do
                local dirry = Vector(dir.x, dir.y, dir.z)
                math.randomseed(math.Round(util.SharedRandom(n, -1337, 1337, !game.SinglePlayer() and wep:GetOwner():GetCurrentCommand():CommandNumber() or CurTime()) * (wep:EntIndex() % 30241)))
                wep:ApplyRandomSpread(dirry, ArcCW.MOAToAcc * 50)
                data.Dir = dirry
                if GetConVar("arccw_bullet_enable"):GetBool() then
                    ArcCW:ShootPhysBullet(wep, data.Src, (250 / ArcCW.HUToM) * data.Dir:GetNormalized(), 0, bullet)
                else
                    owner:FireBullets(data, true)
                end
            end
        else
            data.Spread = Vector(ArcCW.MOAToAcc * 50, ArcCW.MOAToAcc * 50, 0)
            data.Num = 20
            owner:FireBullets(data, true)
        end
        wep:MyEmitSound(")^/arccw_uc/common/gl_fire_buck.ogg", 100, 100, 1, CHAN_WEAPON )
        wep:MyEmitSound(")^/arccw_uc/common/gl_fire_buck_dist.ogg", 149, 100, 0.5, CHAN_WEAPON + 1)
    else
        local proj = wep:FireRocket(class, 2500)
        if SERVER then
            proj.Damage = 130 -- lower than the m79 (200) for balance reasons
        end
        wep:MyEmitSound(")^/arccw_uc/common/40mm/fire-0" .. math.random(1, 6) .. ".ogg", 100, 100, 1, CHAN_WEAPON)
        wep:MyEmitSound(")^/arccw_uc/common/40mm/fire-dist-0" .. math.random(1, 6) .. ".ogg", 149, 100, 0.5, CHAN_BODY)
        wep:MyEmitSound(")^/arccw_uc/common/40mm/mech-0" .. math.random(1, 6) .. ".ogg", 149, 100, 0.5, CHAN_AUTO)
    end

    if game.SinglePlayer() and SERVER or (!game.SinglePlayer() and CLIENT and IsFirstTimePredicted()) then
        wep:DoEffects()
        wep:DoLHIKAnimation("fire")
    end
    wep:SetClip2(wep:Clip2() - 1)
    wep:DoEffects()
end

local casing = {"arccw_uc/common/40mm/casing-40mm-01.ogg", "arccw_uc/common/40mm/casing-40mm-02.ogg", "arccw_uc/common/40mm/casing-40mm-03.ogg", "arccw_uc/common/40mm/casing-40mm-04.ogg", "arccw_uc/common/40mm/casing-40mm-05.ogg", "arccw_uc/common/40mm/casing-40mm-06.ogg"}

att.UBGL_Reload = function(wep, ubgl)
    if wep:Clip2() >= 1 then return end
    if Ammo(wep) <= 0 then return end

    wep:SetNextSecondaryFire(CurTime() + 2.75)

    local holy = (game.SinglePlayer() and SERVER) or (!game.SinglePlayer() and CLIENT and IsFirstTimePredicted())
    if holy then
        wep:DoLHIKAnimation("reload", 2.75)
        wep:PlaySoundTable({
            {s = { "arccw_uc/common/rattle1.ogg", "arccw_uc/common/rattle2.ogg", "arccw_uc/common/rattle3.ogg" }, t = 0},
            {s = "arccw_uc/common/40mm/203open.ogg", t = 0.2},
            {s = casing, t = 0.7},
            {s = "arccw_uc/common/magpouch_replace_small.ogg", t = 0.9},
            {s = "arccw_uc/common/40mm/203insert.ogg", t = 1.2},
            {s = "arccw_uc/common/shoulder.ogg", t = 1.5},
            {s = "arccw_uc/common/40mm/203close.ogg", t = 1.7},
            {s = "arccw_uc/common/shoulder.ogg", t = 2.3},
        })
    end

    local reserve = Ammo(wep)
    reserve = reserve + wep:Clip2()
    local clip = 1
    local load = math.Clamp(clip, 0, reserve)
    if (!pretty:GetBool()) then
        wep:GetOwner():RemoveAmmo(1, "smg1_grenade")
    end
    wep:SetClip2(load)
end

att.Mult_SightTime = 1.2
att.Mult_SpeedMult = 0.9
att.Mult_SightedSpeedMult = 0.85

att.ToggleLockDefault = true
att.ToggleStats = {
    {
        PrintName = "High Explosive",
        UBGL_Entity = "arccw_uc_40mm_he"
    },
    {
        PrintName = "Smoke",
        UBGL_Entity = "arccw_uc_40mm_smoke"
    },
    {
        PrintName = "Buckshot",
        UBGL_Entity = "BUCKSHOT"
    }
}
--lua/arccw/shared/attachments/uc_ubgl_masterkey.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_caliber_357sig.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_mag_10.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_mag_10.lua:
att.PrintName = "Glock 10-Round Compact Mag"
att.AbbrevName = "10-Round Compact Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "GEN3 10-Round Compact Mag"
end

att.SortOrder = 10
att.Icon = Material("entities/att/acwatt_ud_glock_mag_10.png", "smooth mips")
att.Description = "Low-capacity magazine for the Glock, mostly used on subcompact variants like the Glock 26. The lighter load makes the weapon even more ergonomic."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "ud_glock_mag"

att.AutoStats = true

att.Mult_SightTime = 0.9
att.Mult_ReloadTime = 0.9
att.Override_ClipSize = 10

att.Mult_SpeedMult = 1.05
att.Mult_Sway = 0.5

att.Mult_HipDispersion = 0.75

att.ActivateElements = {"ud_glock_10_mag"}
att.RequireFlags = {"ud_glock_frame_subcompact"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_10"
end

att.Hook_TranslateAnimation = function(wep, anim)
    if (anim == "fix") then
        return anim .. "_10"
    end
end
--lua/arccw/shared/attachments/ud_glock_mag_altanim.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_skin_olive.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_glock_slide_subcompact.lua:
att.PrintName = "GEN3K Subcompact Slide"
att.AbbrevName = "Subcompact Slide"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Glock 26 Subcompact Slide"
end

att.Icon = Material("entities/att/acwatt_ud_glock_slide_subcompact.png", "smooth mips")
att.Description = "Shortest available slide, popular for concealed carry.\nReduced length means less holster to clear and improved handling, but more muzzle rise and terrible effective range."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.noubs"
}
att.Desc_Neutrals = {
}
att.Slot = "ud_glock_slide"

att.AutoStats = true

att.Mult_DrawTime = 0.85
att.Mult_HolsterTime = 0.85
att.Add_BarrelLength = -4

att.Mult_Sway = 0.75
att.Mult_HipDispersion = 0.85
att.Mult_SightTime = 0.85

att.Mult_PhysBulletMuzzleVelocity = 0.9

att.Mult_AccuracyMOA = 1.5
att.Mult_Range = 0.75
att.Mult_Recoil = 1.25

att.ActivateElements = {"ud_glock_slide_subompact"}
att.GivesFlags = {"ud_glock_slide_subcompact"}
att.RequireFlags = {"ud_glock_frame_subcompact"}
--lua/arccw/shared/attachments/ud_m16_barrel_sd.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_charm_fs.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_fs_3d.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_mag_40.lua:
att.PrintName = "STANAG 40-Round Extended Mag"
att.AbbrevName = "40-Round Extended Mag"
att.SortOrder = 40
att.Icon = Material("entities/att/acwatt_ud_m16_mag_40.png", "smooth mips")
att.Description = "Extended magazine for the M16. Enables slightly longer mag dumps, which may save your life, but the longer mag is more awkward to load."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "ud_m16_mag"

att.AutoStats = true
att.HideIfBlocked = true

att.Override_ClipSize = 40

att.Mult_SightTime = 1.1
att.Mult_ReloadTime = 1.15
att.Mult_Sway = 1.5

att.Mult_SpeedMult = 0.975
att.Mult_ShootSpeedMult = 0.95

att.Mult_HipDispersion = 1.15

att.ActivateElements = {"ud_m16_mag_40"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_40"
end

att.ExcludeFlags = {"m16_usas", "m16_9mm", "m16_50beo"}
--lua/arccw/shared/attachments/ud_m16_mag_50beo_15.lua:
att.PrintName = ".50 Beowulf 15-Round Extended Mag"
att.AbbrevName = "15-Round Extended Mag"

att.Icon = Material("entities/att/acwatt_ud_m16_mag_40.png", "smooth mips")
att.Description = "Extended 5.56mm magazines converted to load .50 Beowulf rounds in a single stack. Really as far as you can go with these thick cartridges."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "ud_m16_mag"

att.AutoStats = true
att.HideIfBlocked = true
att.InvAtt = "ud_m16_mag_40"

att.SortOrder = 1
att.Override_ClipSize = 15

att.Mult_SightTime = 1.2
att.Mult_ReloadTime = 1.3
att.Mult_Sway = 2.25

att.Mult_SpeedMult = 0.95

att.Mult_HipDispersion = 1.25

att.ActivateElements = {"ud_m16_mag_40"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_40"
end

att.RequireFlags = {"m16_50beo"}
--lua/arccw/shared/attachments/ud_m16_rs_kac.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_stock_buffer.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_m16_stock_sopmod.lua:
att.PrintName = "AMCAR SOPMOD Stock"
att.AbbrevName = "SOPMOD Stock"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "M16 SOPMOD Stock"
end

att.Icon = Material("entities/att/acwatt_ud_m16_stock_sopmod.png", "smooth mips")
att.Description = "Military-grade carbine stock with sophisticated ergonomics. Handles faster compared to a standard carbine stock, but is less stable.\n\nToggling this stock modifies performance accordingly."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = {"go_stock", "ud_m16_stock"}

att.Model = "models/weapons/arccw/atts/stock_sopmod.mdl"
att.ModelOffset = Vector(-0.57, 0, 0.40)
att.ModelScale = Vector(0.74, 0.74, 0.74)
att.OffsetAng = Angle(0, 0, 0)

att.AutoStats = true
att.SortOrder = 6

att.Mult_Sway = 1.25
att.Mult_SightedSpeedMult = 1.15

att.ToggleSound = "arccw_uc/common/stockslide.ogg"

att.ActivateElements = {"stock_231_tube"}

att.ToggleStats = {
    {
        PrintName = "Extended",
        AutoStats = true,
        ModelOffset = Vector(-1.5, 0, 0.40),
    },
    {
        PrintName = "Collapsed",
        AutoStats = true,
        ModelOffset = Vector(0, 0, 0.40),
        Mult_RecoilSide = 1.5,
        Add_BarrelLength = -4,
        Mult_ShootSpeedMult = 1.1,
        Mult_SightTime = 0.85,
        Mult_MoveDispersion = 1.15,
    },
}
--lua/arccw/shared/attachments/ud_mini14_mag_10.lua:
att.PrintName = "Mini-14 10-Round Flush Mag"
att.AbbrevName = "10-Round Flush Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Patriot 809 10-Round Flush Mag"
end

att.SortOrder = 10
att.Icon = Material("entities/att/acwatt_ud_mini14_mag_10.png", "smooth mips")
att.Description = "Low-capacity 5.56mm flush magazine. The lighter load makes the weapon even more ergonomic."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_mini14_mag"

att.AutoStats = true

att.Mult_SightTime = 0.85
att.Mult_ReloadTime = 0.9
att.Override_ClipSize = 10
att.Mult_Sway = 0.75

att.Mult_HipDispersion = 0.7

att.ActivateElements = {"ud_mini14_mag_10"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_10"
end

att.ExcludeFlags = {"mini14_762", "mini14_22lr"}
att.HideIfBlocked = true
--lua/arccw/shared/attachments/ud_mini14_stock_sawnoff.lua:
att.PrintName = "Mini-14 Sawn-off Stock"
att.AbbrevName = "Sawn-off Stock"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Patriot 809 Sawn-off Stock"
end

att.Icon = Material("entities/att/acwatt_ud_mini14_stock_sawnoff.png", "smooth mips")
att.Description = "Using your hacksaw on the stock is not gunsmithing either."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_mini14_stock"

att.AutoStats = true

att.Mult_SightTime = 0.75
att.Mult_DrawTime = 0.75
att.Mult_HolsterTime = 0.75

att.Mult_Recoil = 1.25
att.Mult_RecoilSide = 2.25

att.Mult_Sway = 1.85

att.Mult_SightedSpeedMult = 1.33
att.Mult_ShootSpeedMult = 1.2

att.Add_BarrelLength = -4

att.ActivateElements = {"ud_mini14_stock_sawnoff"}

att.Override_ActivePos = Vector(0.5, 2, 1.5)
--lua/arccw/shared/attachments/ud_uzi_cal_45.lua:
att.PrintName = "Uzi .45 ACP Conversion"
att.AbbrevName = ".45 ACP"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "IAL-9 .45 ACP Conversion"
end
att.Slot = "ud_uzi_caliber"

att.Icon = Material("entities/att/uc_bullets/45acp.png", "smooth mips")
att.Description = "A large cartridge that increases close-range stopping power substantially, but greatly reduces magazine capacity."
att.Desc_Pros = {
    "uc.subsonic"
}

att.Override_Trivia_Calibre = ".45 ACP"

att.AutoStats = true

att.Mult_Damage = ArcCW.UC.CalConv("9mm", "45acp", "max")
att.Mult_DamageMin = ArcCW.UC.CalConv("9mm", "45acp", "min")
att.Mult_Penetration = ArcCW.UC.CalConv("9mm", "45acp", "pen")

att.Override_PhysBulletMuzzleVelocity = 320

att.Mult_RangeMin = 0.5
att.Mult_Range = .75
att.Mult_Recoil = 1.5
att.Mult_RecoilSide = 1.5
att.Mult_RPM = 0.83
att.Override_ClipSize = 16

local path = ")^weapons/arccw_ud/uzi/"

att.Hook_GetShootSound = function(wep, sound) -- Temporary
    if wep:GetBuff_Override("Silencer") then
        return "weapons/arccw_ud/glock/fire_supp.ogg"
    else
        return {path .. "fire-45-01.ogg", path .. "fire-45-02.ogg", path .. "fire-45-03.ogg", path .. "fire-45-04.ogg", path .. "fire-45-05.ogg", path .. "fire-45-06.ogg"}
    end
end

att.Override_DistantShootSoundSilenced = nil

local tail = ")^/arccw_uc/common/45acp/"

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return {
            tail .. "fire-dist-45acp-pistol-ext-01.ogg",
            tail .. "fire-dist-45acp-pistol-ext-02.ogg",
            tail .. "fire-dist-45acp-pistol-ext-03.ogg",
            tail .. "fire-dist-45acp-pistol-ext-04.ogg",
            tail .. "fire-dist-45acp-pistol-ext-05.ogg",
            tail .. "fire-dist-45acp-pistol-ext-06.ogg"
        }
    end
end

att.Hook_GetDefaultAttName = function(wep, slot)
    if slot == 8 then
        return "16-Round Mag"
    end
end

att.GivesFlags = {"uzi_45","cal_subsonic"}
--lua/arccw/shared/attachments/ud_uzi_mag_20.lua:
return gluapack()()
--lua/arccw/shared/attachments/ud_uzi_mag_40.lua:
att.PrintName = "Uzi 40-Round Extended Mag"
att.AbbrevName = "40-Round Extended Mag"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "IAL-9 40-Round Extended Mag"
end

att.SortOrder = 40
att.Icon = Material("entities/att/acwatt_ud_uzi_mag_40.png", "smooth mips")
att.Description = "Extended magazine for the Uzi. It is only somewhat longer than the standard magazine, making it not that difficult to handle."
att.Desc_Pros = {
}
att.Desc_Cons = {
}
att.Desc_Neutrals = {
}
att.Slot = "ud_uzi_mag"

att.AutoStats = true

att.Mult_SightTime = 1.08
--att.Mult_Recoil = 0.9
att.Mult_ReloadTime = 1.12
--att.Mult_SpeedMult = 0.9
att.Override_ClipSize = 40
att.Mult_Sway = 1.15

att.Mult_HipDispersion = 1.25

att.ActivateElements = {"ud_uzi_41_mag"}

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_41"
end

att.ExcludeFlags = {"uzi_45","uzi_22"}
att.HideIfBlocked = true

--lua/arccw/shared/attachments/ur_1911_skin_custom.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_1911_slide_m45.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_329_barrel_pocket.lua:
att.PrintName = "3\" Model 629 Pocket Barrel"
att.AbbrevName = "3\" Pocket Barrel"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "3\" Companion .44 Pocket Barrel"
end
att.Icon = Material("entities/att/acwatt_ur_329_barrel_m29.png","smooth mips")
att.Description = "Even shorter barrel, associated with police officers. Being as compact as possible improves draw time, but the barrel cannot handle gas expansion well."
att.Slot = "ur_329_barrel"
att.AutoStats = true
att.SortOrder = 3

att.Mult_AccuracyMOA = 1.3
att.Mult_Range = 0.75
att.Mult_Recoil = 1.3
att.Mult_SightTime = 0.85
att.Mult_Sway = 0.85
att.Mult_HipDispersion = 0.9
att.Mult_PhysBulletMuzzleVelocity = 0.85

att.Add_BarrelLength = -1

att.Mult_DrawTime = 0.75
att.Mult_HolsterTime = 0.75

att.Ignore = true -- Texture is too fucked for this to make it to release
--lua/arccw/shared/attachments/ur_ak_barrel_vityaz.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_ak_cal_556.lua:
att.PrintName = "AK-101 5.56x45mm NATO Receiver"
att.AbbrevName = "5.56x45mm Receiver"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "KF-45 5.56x45mm NATO Receiver"
end

att.Icon = Material("entities/att/uc_bullets/556x45.png", "mips smooth")
att.Description = "Designed for the export market, this receiever uses the NATO standard 5.56x45mm cartridge.\nThe smaller round yields a higher muzzle velocity and accuracy at range with similiar wounding potential to 5.45x39mm, but with a slower cyclic rate."
att.Slot = {"ur_ak_cal"}
att.AutoStats = true

att.SortOrder = 10

att.Override_Ammo = "smg1"
att.Override_Trivia_Calibre = "5.56x45mm NATO"

att.Mult_Range = 1.5
att.Mult_SightedSpeedMult = 1.05
att.Mult_ReloadTime = 0.95
att.Mult_Recoil = 0.65
att.Mult_AccuracyMOA = 0.6
att.Mult_HipDispersion = .75

att.Mult_Penetration = 12 / 16
att.Mult_DamageMin = 20 / 25
att.Mult_Damage = 34 / 50

att.Override_Trivia_Country = "Russia"

att.ShootPitchVariation = 1
att.Override_ShellModel = "models/weapons/arccw/uc_shells/556x45.mdl"
att.Override_ShellScale = .666
att.GivesFlags = {"cal_556"}

att.ActivateElements = {"mag_556_30"}
local path = ")weapons/arccw_ur/ak/556/"
local path1 = ")weapons/arccw_ur/ak/"

att.Hook_GetShootSound = function(wep, fsound)
    --[[if fsound == wep.FirstShootSound or fsound == wep.FirstShootSound then return {
        path .. "stalol/fire_545_1.wav",
     } end]]
    if fsound == wep.ShootSound or fsound == wep.FirstShootSound then return {path .. "fire-01.ogg", path .. "fire-02.ogg", path .. "fire-03.ogg", path .. "fire-04.ogg", path .. "fire-05.ogg", path .. "fire-06.ogg"} end
    if fsound == wep.ShootSoundSilenced then return {path .. "fire-sup-01.ogg", path .. "fire-sup-02.ogg", path .. "fire-sup-03.ogg", path .. "fire-sup-04.ogg", path .. "fire-sup-05.ogg", path .. "fire-sup-06.ogg"} end
end

local tail = ")/arccw_uc/common/556x45/"

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return {
            tail .. "fire-dist-556x45-rif-ext-01.ogg",
            tail .. "fire-dist-556x45-rif-ext-02.ogg",
            tail .. "fire-dist-556x45-rif-ext-03.ogg",
            tail .. "fire-dist-556x45-rif-ext-04.ogg",
            tail .. "fire-dist-556x45-rif-ext-05.ogg",
            tail .. "fire-dist-556x45-rif-ext-06.ogg"
        }
    end
end

local slotinfo = {
    [6] = {"30-Round Mag", "30-Round Mag", Material("entities/att/ur_ak/magazines/556_30.png", "mips smooth")},
}
att.Hook_GetDefaultAttName = function(wep, slot)
    if slotinfo[slot] then
        return GetConVar("arccw_truenames"):GetBool() and slotinfo[slot][2] or slotinfo[slot][1]
    end
end
att.Hook_GetDefaultAttIcon = function(wep, slot)
    if slotinfo[slot] then
        return slotinfo[slot][3]
    end
end

--lua/arccw/shared/attachments/ur_ak_grip_alpha.lua:
att.PrintName = "Helix Polymer Grip"
att.AbbrevName = "Polymer Grip"
att.Icon = Material("entities/att/ur_ak/grip_helix.png", "mips smooth")
att.Description = "Rough US-made polymer grip, prodiving a bit more sighted mobility."
att.AutoStats = true
att.Slot = {"ur_ak_grip"}

att.Mult_Recoil = 1.05
att.Mult_SightedSpeedMult = 1.05

att.ActivateElements = {"grip_alpha"}
--lua/arccw/shared/attachments/ur_ak_mag_545_45.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_aw_cal_338.lua:
att.PrintName = "AWM .338 Lapua Magnum Receiver"
att.AbbrevName = ".338 Lapua Magnum"
att.Icon = Material("entities/att/uc_bullets/338lapua.png", "mips smooth")
att.Description = "Powerful sniper cartridge that exerts substantially more muzzle energy, practically guaranteed to be fatal on a successful hit beyond point blank. The recoil is tremendous, and the lengthened bolt required to accommodate the cartridge is harder to cycle."
att.Slot = "ur_aw_cal"

att.AutoStats = true
att.Desc_Pros = {
    --"ur.aw.velocity"
}
att.Desc_Cons = {
    "Disables Magazine attachments"
}

--att.Mult_Damage = 85 / 80
att.Mult_DamageMin = 160 / 50
--att.Mult_Range = 2
att.Override_Range = 100
att.Override_RangeMin = 20

att.Mult_PhysBulletMuzzleVelocity = 950 / 850

att.Mult_Penetration = 2
att.Mult_Recoil = 2
att.Mult_CycleTime = 1.24
att.Mult_ReloadTime = 5.55 / 5.15

att.Mult_ShootSpeedMult = 0.8

local path = ")weapons/arccw_ur/aw_placeholders/338/"
local path1 = ")weapons/arccw_ur/aw_placeholders/"

local fire338sup = {path1 .. "fire-sup-01.ogg",path1 .. "fire-sup-02.ogg",path1 .. "fire-sup-03.ogg",path1 .. "fire-sup-04.ogg",path1 .. "fire-sup-05.ogg",path1 .. "fire-sup-06.ogg"}

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return fire338sup
    else
    end
end

local tail = ")/arccw_uc/common/338lm/"
local fire338dist = {tail .. "fire-dist-338lm-rif-ext-01.ogg", tail .. "fire-dist-338lm-rif-ext-02.ogg", tail .. "fire-dist-338lm-rif-ext-03.ogg", tail .. "fire-dist-338lm-rif-ext-04.ogg", tail .. "fire-dist-338lm-rif-ext-05.ogg", tail .. "fire-dist-338lm-rif-ext-06.ogg"}

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire338dist
    end
end

att.Hook_SelectReloadAnimation = function(wep, anim)
    return anim .. "_338"
end

local slotinfo = {
    [5] = {"5-Round Mag", "5-Round Mag", Material("entities/att/ur_aw/mag338_5.png", "mips smooth")},
}

att.Hook_GetDefaultAttIcon = function(wep, slot)
    if slotinfo[slot] then
        return slotinfo[slot][3]
    end
end

att.Override_Trivia_Calibre = ".338 Lapua Magnum"
att.Override_ShellModel = "models/weapons/arccw/ud_shells/338.mdl"
att.Override_Ammo = "SniperPenetratedRound"
att.GivesFlags = {"mag_338"}
att.ActivateElements = {"mag_338"}
--lua/arccw/shared/attachments/ur_dbs_barrel_mid.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_dbs_stock_sawedoff.lua:
att.PrintName = "IZh-58 Sawed-off Stock"
att.AbbrevName = "Sawed-off Stock"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Volga SuperShotgun Sawed-off Stock"
end

att.Icon = Material("entities/att/ur_dbs/ssw.png","smooth mips")
att.Description = "You can keep it under your trenchcoat now."
att.Slot = {"ur_db_stock"}
att.AutoStats = true
att.Free = true
att.SortOrder = -1

att.Mult_SpeedMult = 1.05

att.Mult_SightTime = 0.75
att.Mult_DrawTime = 0.75
att.Mult_HolsterTime = 0.75

att.Mult_Recoil = 1.4
att.Mult_RecoilSide = 1.25

att.Mult_SightedSpeedMult = 1.2
att.Mult_ShootSpeedMult = 1.15

att.Add_BarrelLength = -12
att.Mult_Sway = 3

att.ActivateElements = {"stock_sw"}
--lua/arccw/shared/attachments/ur_deagle_grip_rubber.lua:
att.PrintName = "Desert Eagle Rubberized Grip"
att.AbbrevName = "Rubberized Grip"
att.Icon = Material("entities/att/acwatt_ur_deagle_grip_rubber.png","mips smooth")
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Predator Rubberized Grip"
end
att.Description = "Creates higher friction against the shooter's hands, dampening recoil slightly."
att.Slot = "ur_deagle_grip"
att.AutoStats = true

att.Mult_Recoil = 0.95
att.Mult_RecoilSide = 0.9
att.Mult_SightedSpeedMult = 0.95

att.ActivateElements = {"ur_deagle_grip_rubber"}
--lua/arccw/shared/attachments/ur_deagle_skin_gold.lua:
att.PrintName = "Desert Eagle Titanium Gold Finish"
att.AbbrevName = "Titanium Gold"
att.Icon = Material("entities/att/acwatt_ur_deagle_finish_gold.png","mips smooth")
att.Description = "Look, you're already using a Desert Eagle, so we might as well gut whatever sense of modesty you have left."
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Predator Titanium Gold Finish"
    att.Description = "Look, you're already using a Predator, so we might as well gut whatever sense of modesty you have left."
end
att.Description = att.Description .. "\n\n\"The time has come to show our true strength. They underestimate our resolve. Let us show that we do not fear them. As one people, we shall free our brethren from the yoke of foreign oppression!\""
att.Slot = "ur_deagle_skin"
att.Desc_Neutrals = {
    "uc.cosmetic"
}
att.SortOrder = 1

att.IgnorePickX = true
att.ActivateElements = {"ur_deagle_skin_gold"}
--lua/arccw/shared/attachments/ur_deagle_skin_modern.lua:
att.PrintName = "Desert Eagle Two-Tone Finish"
att.AbbrevName = "Two-Tone"
if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "Predator Two-Tone Finish"
end
att.Icon = Material("entities/att/acwatt_ur_deagle_finish_modern.png","mips smooth")
att.Description = "Double trouble. Yin and yang. Call it whatever you like; it will remain an ornate look for an ornate man.\n\n\"You ever hear the old saying, 'the enemy of my enemy is my friend?'\""
att.Slot = "ur_deagle_skin"
att.Desc_Neutrals = {
    "uc.cosmetic"
}
att.SortOrder = 2

att.IgnorePickX = true
att.ActivateElements = {"ur_deagle_skin_modern", "tac_rail"}
--lua/arccw/shared/attachments/ur_g3_bayobipod_bayonet.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_g3_rec_psg.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_mp5_barrel_eod.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_mp5_barrel_long.lua:
att.PrintName = "16\" Carbine Barrel"

att.Icon = Material("entities/att/ur_mp5/upper_fish.png", "smooth mips")
att.Description = "Carbine-length barrel used on some civilian sporting variants of the weapon. Improves long range performance, but adds weight."
att.AutoStats = true

att.Slot = "ur_mp5_barrel"

att.SortOrder = 13

att.Mult_AccuracyMOA = 0.75
att.Mult_Recoil = 0.85
att.Mult_Range = 1.25

att.Mult_SightTime = 1.25
att.Mult_Sway = 1.5
att.Add_BarrelLength = 7

att.Mult_PhysBulletMuzzleVelocity = 1.15

att.Ignore = true
--lua/arccw/shared/attachments/ur_mp5_caliber_10auto.lua:
att.PrintName = "MP5/10 10mm Auto Conversion"
att.AbbrevName = "10mm Auto Receiver"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "PK5/10 10mm Auto Conversion"
end

att.SortOrder = 80
att.Icon = Material("entities/att/uc_bullets/10.png", "smooth mips")
att.Description = "The FBI's preferred caliber of choice.\nSignificantly more powerful, but with reliability issues, and weapon handling suffers."
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.jam"
}
att.Desc_Neutrals = {
}
att.Slot = "ur_mp5_caliber"

att.AutoStats = true

att.Override_Trivia_Calibre = "10mm Auto"

att.Mult_Damage = 1.15
att.Mult_DamageMin = 1.15

att.Mult_Recoil = 1.25
att.Mult_RecoilSide = 1.25
att.Mult_ReloadTime = 1.15

--att.Mult_ClipSize = 0.9
att.Override_ShellScale = 1.1

att.Override_Malfunction = true
att.Mult_MalfunctionMean = 0.4
att.Mult_MalfunctionVariance = 1.5

local path = ")weapons/arccw_ur/1911/"
local path1 = ")weapons/arccw_ur/mp5/"
local fire10 = {path .. "fire-10-01.ogg",path .. "fire-10-02.ogg",path .. "fire-10-03.ogg",path .. "fire-10-04.ogg",path .. "fire-10-05.ogg",path .. "fire-10-06.ogg"}
local fire10sup = {path1 .. "fire-40-sup-01.ogg",path1 .. "fire-40-sup-02.ogg",path1 .. "fire-40-sup-03.ogg",path1 .. "fire-40-sup-04.ogg",path1 .. "fire-40-sup-05.ogg",path1 .. "fire-40-sup-06.ogg"}

att.Hook_GetShootSound = function(wep, sound)
    if wep:GetBuff_Override("Silencer") then
        return fire10sup
    else
        return fire10
    end
end

local tail = ")/arccw_uc/common/10x25/"
local fire10dist = {tail .. "fire-dist-10x25-pistol-ext-01.ogg", tail .. "fire-dist-10x25-pistol-ext-02.ogg", tail .. "fire-dist-10x25-pistol-ext-03.ogg", tail .. "fire-dist-10x25-pistol-ext-04.ogg", tail .. "fire-dist-10x25-pistol-ext-05.ogg", tail .. "fire-dist-10x25-pistol-ext-06.ogg"}
local common = ")/arccw_uc/common/"

att.Hook_GetDistantShootSoundOutdoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire10dist
    end
end


local fire10distint = {common .. "fire-dist-int-pistol-heavy-01.ogg", common .. "fire-dist-int-pistol-heavy-02.ogg", common .. "fire-dist-int-pistol-heavy-03.ogg", common .. "fire-dist-int-pistol-heavy-04.ogg", common .. "fire-dist-int-pistol-heavy-05.ogg", common .. "fire-dist-int-pistol-heavy-06.ogg"}

att.Hook_GetDistantShootSoundIndoors = function(wep, distancesound)
    if wep:GetBuff_Override("Silencer") then
        -- fallback to script
    else
        return fire10distint
    end
end

-- att.Hook_GetDistantShootSound = function(wep, distancesound)
--     if distancesound == wep.DistantShootSound then
--         return "weapons/arccw_ud/glock/fire_dist_10.ogg" end
-- end

att.GivesFlags = {"ur_mp5_cal_10mm"}
--att.ExcludeFlags = {"barrel_sd"}
att.ActivateElements = {"ur_mp5_mag_waffle"}
--lua/arccw/shared/attachments/ur_mp5_caliber_semi.lua:
att.PrintName = "PK5-CIV Sporter Receiver"
att.AbbrevName = "Sporter Receiver"

if GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "SP5 Sporter Receiver"
end

att.Description = "A semi-automatic receiver sold in civilian markets. Designed for sport shooting, this receiver is more accurate and lightweight."

att.Icon = Material("entities/att/ur_mp5/grip.png", "smooth mips")
att.Desc_Pros = {
}
att.Desc_Cons = {
    "uc.semionly"
}
att.Desc_Neutrals = {
}
att.Slot = "ur_mp5_caliber"

att.AutoStats = true
att.SortOrder = -1

att.Mult_RPM = 600 / 900
att.Mult_Recoil = 0.8
att.Mult_AccuracyMOA = 0.75
att.Mult_Range = 1.15
att.Mult_MoveDispersion = 0.5

att.Mult_PhysBulletMuzzleVelocity = 1.15

att.Override_Firemodes_Priority = 0.5
att.Override_Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

att.Override_Trivia_Class = "Pistol"

att.ActivateElements = {"receiver_lower_semi"}
--lua/arccw/shared/attachments/ur_mp5_mag_15.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_mp5_mag_50.lua:
return gluapack()()
--lua/arccw/shared/attachments/ur_mp5_stock_a2.lua:
att.Ignore = true



att.PrintName = "MP5A2 Wooden Stock"
att.AbbrevName = "Wooden Stock"

if !GetConVar("arccw_truenames"):GetBool() then
    att.PrintName = "K7 Wooden Stock"
end

att.Icon = Material("entities/att/acwatt_ur_mp5_stock_solid.png", "smooth mips")
att.Description = "A solid, non-foldable stock made of wood. Its weight improves recoil control but harms handling."
att.Desc_Pros = {}
att.Desc_Cons = {}
att.Desc_Neutrals = {}
att.Slot = "ur_mp5_stock"

att.AutoStats = true
att.SortOrder = 4

att.Mult_Recoil = 0.75
att.Mult_RecoilSide = 0.5
att.Mult_VisualRecoilMult = 0.5
att.Mult_Sway = 0.5

att.Mult_SightTime = 1.25
att.Mult_SightedSpeedMult = 0.9
att.Mult_ShootSpeedMult = 0.9

att.Mult_DrawTime = 1.25
att.Mult_HolsterTime = 1.25

att.ActivateElements = {"ur_mp5_stock_wood"}
--lua/arccw/shared/languages/uc_en.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_move.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/arccw/shared/sh_quicknade.lua:
-- ArcCW.QuickNadeTable = {
--     ["frag"] = {
--         ShortName = "FRAG",
--         ThrowEntity = "arccw_proj_frag",
--         ViewModel = "models/weapons/cstrike/c_eq_fraggrenade.mdl"
--     }
-- }

-- if CLIENT then

-- function ArcCW:QuickNade(index)
--     if !ArcCW.QuickNadeTable[index] then return end

--     local wpn = LocalPlayer():GetActiveWeapon()

--     if !wpn.ArcCW then return end
-- end

-- end
--addons/[binbon]arccw_modify/lua/arccw/client/cl_binds.lua:
ArcCW.KEY_FIREMODE        = "+zoom"
ArcCW.KEY_FIREMODE_ALT    = "arccw_firemode"
ArcCW.KEY_ZOOMIN          = "invnext"
ArcCW.KEY_ZOOMIN_ALT      = "arccw_zoom_in"
ArcCW.KEY_ZOOMOUT         = "invprev"
ArcCW.KEY_ZOOMOUT_ALT     = "arccw_zoom_out"
ArcCW.KEY_TOGGLEINV       = "+menu_context"
ArcCW.KEY_TOGGLEINV_ALT   = "arccw_toggle_inv"
ArcCW.KEY_SWITCHSCOPE     = "+use"
ArcCW.KEY_SWITCHSCOPE_ALT = "arccw_switch_scope"
ArcCW.KEY_TOGGLEUBGL      = "arccw_toggle_ubgl"
ArcCW.KEY_TOGGLEATT       = "arccw_toggle_att"
ArcCW.KEY_MELEE           = "arccw_melee"

ArcCW.BindToEffect = {
    [ArcCW.KEY_FIREMODE]    = "firemode",
    [ArcCW.KEY_ZOOMIN]      = "zoomin",
    [ArcCW.KEY_ZOOMOUT]     = "zoomout",
    [ArcCW.KEY_TOGGLEINV]   = "inv",
    [ArcCW.KEY_SWITCHSCOPE] = "switchscope_dtap",
}

ArcCW.BindToEffect_Unique = {
    [ArcCW.KEY_TOGGLEUBGL]      = "ubgl",
    [ArcCW.KEY_SWITCHSCOPE_ALT] = "switchscope",
    [ArcCW.KEY_FIREMODE_ALT]    = "firemode",
    [ArcCW.KEY_ZOOMIN_ALT]      = "zoomin",
    [ArcCW.KEY_ZOOMOUT_ALT]     = "zoomout",
    [ArcCW.KEY_TOGGLEINV_ALT]   = "inv",
    [ArcCW.KEY_TOGGLEATT]       = "toggleatt",
    [ArcCW.KEY_MELEE]           = "melee",
}

local lastpressZ = 0
local lastpressE = 0

function ArcCW:GetBind(bind)
    local button = input.LookupBinding(bind)

    return button == "no value" and bind .. " unbound" or button
end

local function ArcCW_TranslateBindToEffect(bind)
    local alt = ArcCW.ConVars["altbindsonly"]:GetBool()
    if alt then
        return ArcCW.BindToEffect_Unique[bind], true
    else
        return ArcCW.BindToEffect_Unique[bind] or ArcCW.BindToEffect[bind] or bind, ArcCW.BindToEffect_Unique[bind] != nil
    end
end

local function SendNet(string, bool)
    net.Start(string)
    if bool != nil then net.WriteBool(bool) end
    net.SendToServer()
end

local function DoUbgl(wep)
    if wep:GetInUBGL() then
        SendNet("arccw_ubgl", false)

        wep:DeselectUBGL()
    else
        SendNet("arccw_ubgl", true)

        wep:SelectUBGL()
    end
end

local debounce = 0
local function ToggleAtts(wep)
    if debounce > CurTime() then return end -- ugly hack for double trigger
    debounce = CurTime() + 0.15
    local sounds = {}
    for k, v in pairs(wep.Attachments) do
        local atttbl = v.Installed and ArcCW.AttachmentTable[v.Installed]
        if atttbl and atttbl.ToggleStats and !v.ToggleLock then
            if atttbl.ToggleSound then sounds[atttbl.ToggleSound] = true
            else sounds["weapons/arccw/firemode.wav"] = true end
            wep:ToggleSlot(k, nil, true)
        end
    end
    for snd, _ in pairs(sounds) do
        surface.PlaySound(snd)
    end
end

local function ArcCW_PlayerBindPress(ply, bind, pressed)
    if !(ply:IsValid() and pressed) then return end

    local wep = ply:GetActiveWeapon()

    if !wep.ArcCW then return end

    local block = false

    if GetConVar("arccw_nohl2flash"):GetBool() and bind == "impulse 100" then
        ToggleAtts(wep)

        if ply:FlashlightIsOn() then return false end -- if hl2 flahslight is on we will turn it off as expected

        return true -- we dont want hl2 flashlight
     end

    local alt
    bind, alt = ArcCW_TranslateBindToEffect(bind)

    if bind == "firemode" and (alt or true) and !ply:KeyDown(IN_USE) then
		SendNet("arccw_firemode")
		wep:ChangeFiremode()

        block = true
    elseif bind == "inv" and !ply:KeyDown(IN_USE) and ArcCW.ConVars["enable_customization"]:GetInt() > -1 then

        local state = wep:GetState() != ArcCW.STATE_CUSTOMIZE

        SendNet("arccw_togglecustomize", state)

        wep:ToggleCustomizeHUD(state)

        block = true
    elseif bind == "ubgl" then
        DoUbgl(wep)
    elseif bind == "toggleatt" then
        ToggleAtts(wep)
    end

    if wep:GetState() == ArcCW.STATE_SIGHTS then
        if bind == "zoomin" then
            wep:Scroll(1)
            block = true
        elseif bind == "zoomout" then
            wep:Scroll(-1)
            block = true
        elseif bind == "switchscope_dtap" then
            if lastpressE >= CurTime() - 0.25 then
                wep:SwitchActiveSights()
                lastpressE = 0
            else
                lastpressE = CurTime()
            end
        elseif bind == "switchscope" then
            wep:SwitchActiveSights()
            block = true
        end
    end

    if bind == "melee" and wep:GetState() != ArcCW.STATE_SIGHTS then
        wep:Bash()
    end

    if block then return true end
end

hook.Add("PlayerBindPress", "ArcCW_PlayerBindPress", ArcCW_PlayerBindPress)

-- Actually register the damned things so they can be bound
for k, v in pairs(ArcCW.BindToEffect_Unique) do
    concommand.Add(k, function(ply) ArcCW_PlayerBindPress(ply, k, true) end, nil, v, 0)
end

-- ArcCW.CaptureKeys = {
--     KEY_G
-- }
-- ArcCW.LastInputs = {}
-- ArcCW.Inputs = {}

-- local function ArcCW_CustomInputs()
--     local inputs = {}

--     for _, i in pairs(ArcCW.CaptureKeys) do
--         -- local conv = GetConVar(i)

--         -- if !conv then continue end
--         -- if !IsValid(conv) then continue end

--         local kc = i

--         inputs[kc] = input.IsKeyDown(kc)
--     end

--     ArcCW.LastInputs = ArcCW.Inputs
--     ArcCW.Inputs = inputs

--     if ArcCW:KeyPressed(KEY_G) then
--         ArcCW:QuickNade("frag")
--     end
-- end

-- hook.Add("Think", "ArcCW_CustomInputs", ArcCW_CustomInputs)

-- function ArcCW:KeyPressed(key)
--     if !ArcCW.LastInputs[key] and ArcCW.Inputs[key] then
--         return true
--     end

--     return false
-- end
--addons/policearmorylocker/lua/armory_locker/client/armory_locker_fonts.lua:
return gluapack()()
--addons/policearmorylocker/lua/armory_locker/client/armory_locker_weapons.lua:
local mat_col_spec = 76561198048341306
local mat_col = Color( 255, 255, 255, 255 )
local mat_armory = Material( "craphead_scripts/armory_robbery_ui/police_armory_ui.png" )

local col_white = Color( 255, 255, 255, 255 )
local col_primary = Color( 255, 255, 255, 255 )
local col_invisible = Color( 0, 0, 0, 0 )

local col_dgray = Color( 26, 26, 26, 255 )
local col_lgray = Color( 19, 19, 19, 255 )

local col_green = Color( 0, 75, 0, 255 )
local col_light_green = Color( 0, 125, 0, 255 )

local col_red = Color( 75, 0, 0, 255 )
local col_light_red = Color( 125, 0, 0, 255 )

net.Receive( "ARMORY_Weapon_Menu", function( len, ply )
	local GUI_Armory_Frame = vgui.Create( "DFrame" )
	GUI_Armory_Frame:SetTitle( "" )
	GUI_Armory_Frame:SetSize( ScrW() * 0.5, ScrH() * 0.5 )
	GUI_Armory_Frame:SetPos( ScrW() * 0.5, ScrH() * 0.5 )
	GUI_Armory_Frame:SetMouseInputEnabled( true ) 
	GUI_Armory_Frame:Center()
	GUI_Armory_Frame.Paint = function( self )
		surface.SetDrawColor( mat_col )
		surface.SetMaterial( mat_armory )
		surface.DrawTexturedRect( 0, 0, ScrW() * 0.48, ScrH() * 0.495 )
		
		-- Draw the top title.
		draw.SimpleText("Cephanelik", "ARMORY_UIFontTitle", ScrW() * 0.064, ScrH() * 0.051, col_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end
	GUI_Armory_Frame:MakePopup()
	GUI_Armory_Frame:SetDraggable( false )
	GUI_Armory_Frame:ShowCloseButton( false )
	
	local GUI_Armory_Exit = vgui.Create( "DButton", GUI_Armory_Frame )
	GUI_Armory_Exit:SetSize( ScreenScale( 6.5 ), ScreenScale( 6.5 ) )
	GUI_Armory_Exit:SetPos( ScrW() * 0.465, ScrH() * 0.04 )
	GUI_Armory_Exit:SetText( "" )
	GUI_Armory_Exit.Paint = function()
	end
	GUI_Armory_Exit.DoClick = function()
		GUI_Armory_Frame:Remove()
		
		net.Start("ARM_LOCKER_CloseDoorAnim")
		net.SendToServer()
	end
	
	local GUI_Item_Panel = vgui.Create( "DPanelList", GUI_Armory_Frame )
	GUI_Item_Panel:SetTall( ScreenScale( 147.5 ) )
	GUI_Item_Panel:SetWide( ScrW() * 0.466 )
	GUI_Item_Panel:SetPos( ScrW() * 0.01, ScrH() * 0.073 )
	GUI_Item_Panel:EnableVerticalScrollbar( true )
	GUI_Item_Panel:EnableHorizontal( true )
	GUI_Item_Panel.Paint = function()
		draw.RoundedBox( 2, 0, 2, GUI_Item_Panel:GetWide(), GUI_Item_Panel:GetTall(), col_invisible )
	end
	if ( GUI_Item_Panel.VBar ) then
		GUI_Item_Panel.VBar.Paint = function(self, w, h)
			draw.RoundedBoxEx( 0, 0, 0, w, h, col_invisible ) -- BG
		end
		
		GUI_Item_Panel.VBar.btnUp.Paint = function(self, w, h)
			draw.RoundedBox( 4, 0, 2, w, h, col_invisible )
		end
		
		GUI_Item_Panel.VBar.btnGrip.Paint = function(self, w, h)
			draw.RoundedBoxEx( 16, -5, 3, w, h, col_primary, false, false, false, false )
		end
		
		GUI_Item_Panel.VBar.btnDown.Paint = function(self, w, h)
			draw.RoundedBox( 0, 0, 0, w, h, col_invisible )
		end
	end
	
	for k, v in pairs( CH_Armory_Locker.Weapons ) do
		if v.Name then
			local GUI_ItemPanel = vgui.Create("DPanelList")
			GUI_ItemPanel:SetTall( ScreenScale( 55 ) )
			GUI_ItemPanel:SetWide( ScrW() * 0.455 )
			GUI_ItemPanel:SetPos( ScreenScale( 3.3 ), ScreenScale( 10 ) )
			GUI_ItemPanel:SetSpacing( 10 )
			GUI_ItemPanel.Paint = function()
				-- Outer
				draw.RoundedBox( 2, 15, 15, GUI_ItemPanel:GetWide(),GUI_ItemPanel:GetTall(), col_dgray )
				
				-- Firetruck model frame
				draw.RoundedBox( 2, 20, 20, ScrW() * 0.125, ScrH() * 0.13, col_lgray )
				
				-- Firetruck text frame
				draw.RoundedBox( 2, 265, 20, ScrW() * 0.313, ScrH() * 0.13, col_lgray )
			end
			
			surface.SetFont( "ARMORY_UIFontText" )
			local x, y = surface.GetTextSize( v.Name )
			
			local GUI_Item_Name = vgui.Create( "DLabel", GUI_ItemPanel )
			GUI_Item_Name:SetPos( ( GUI_ItemPanel:GetWide() / 6.25 ) - ( x / 2 ), ScrH() * 0.025 )
			GUI_Item_Name:SetFont( "ARMORY_UIFontText" )
			GUI_Item_Name:SetColor( col_white )
			GUI_Item_Name:SetText( v.Name )
			GUI_Item_Name:SizeToContents()
			
			local GUI_Item_Icon = vgui.Create( "DModelPanel", GUI_ItemPanel )
			GUI_Item_Icon:SetPos( ScrW() * 0.005, ScrH() * 0.055 )
			GUI_Item_Icon:SetSize( ScreenScale( 90 ), ScreenScale( 35 ) )
			if( v.EntType == "weapon") then
				GUI_Item_Icon:SetModel ( weapons.Get(v.Weapon)["WorldModel"]  )
			else
				GUI_Item_Icon:SetModel( v.Model )
			end

			GUI_Item_Icon:GetEntity():SetAngles( Angle( -10, 0, 15 ) )
			local mn, mx = GUI_Item_Icon.Entity:GetRenderBounds()
			local size = 0
			size = math.max( size, math.abs( mn.x ) + math.abs( mx.x ) )
			size = math.max( size, math.abs( mn.y ) + math.abs( mx.y ) )
			size = math.max( size, math.abs( mn.z ) + math.abs( mx.z ) )
			GUI_Item_Icon:SetFOV( 45 )
			GUI_Item_Icon:SetCamPos( Vector( size, size, size ) )
			GUI_Item_Icon:SetLookAt( (mn + mx) * 0.5 )
			function GUI_Item_Icon:LayoutEntity( Entity ) return end
			
			-- Vehicle Description
			local GUI_Item_Desc = vgui.Create( "DLabel", GUI_ItemPanel )
			GUI_Item_Desc:SetPos( ScrW() * 0.145, ScrH() * 0.025 )
			GUI_Item_Desc:SetFont( "ARMORY_UIFontText" )
			GUI_Item_Desc:SetColor( Color( 100, 100, 100, 230 ) )
			if(v.level) then
				GUI_Item_Desc:SetText( "Gereken seviye : "  .. v.level or 0)
			else
				GUI_Item_Desc:SetText( "")
			end
			GUI_Item_Desc:SizeToContents()
			
			local x, y = surface.GetTextSize( v.Desc )

			local GUI_Item_DescText = vgui.Create( "DLabel", GUI_ItemPanel )
			if x <= 500 then
				GUI_Item_DescText:SetPos( ScrW() * 0.145, ScrH() * 0.03 )
			elseif x <= 1000 then
				GUI_Item_DescText:SetPos( ScrW() * 0.145, ScrH() * 0.04 )
			else
				GUI_Item_DescText:SetPos( ScrW() * 0.145, ScrH() * 0.05 )
			end
			
			GUI_Item_DescText:SetSize( ScrW() * 0.27, ScrH() * 0.055 )
			GUI_Item_DescText:SetFont( "ARMORY_UIFontText" )
			GUI_Item_DescText:SetColor( Color( 230, 230, 230, 230 ) )
			GUI_Item_DescText:SetWrap( true )
			GUI_Item_DescText:SetText( v.Desc )
			
			--[[
			-- Display amount
			local GUI_Amount_Title = vgui.Create( "DLabel", GUI_ItemPanel )
			GUI_Amount_Title:SetPos( ScrW() * 0.145, ScrH() * 0.1 )
			GUI_Amount_Title:SetFont( "ARMORY_UIFontText" )
			GUI_Amount_Title:SetColor( Color( 100, 100, 100, 230 ) )
			GUI_Amount_Title:SetText( "Availability" )
			GUI_Amount_Title:SizeToContents()
			
			local GUI_Amount_Text = vgui.Create( "DLabel", GUI_ItemPanel )
			GUI_Amount_Text:SetPos( ScrW() * 0.145, ScrH() * 0.11 )
			GUI_Amount_Text:SetSize( ScrW() * 0.124, ScrH() * 0.04 )
			GUI_Amount_Text:SetFont( "ARMORY_UIFontText" )
			GUI_Amount_Text:SetColor( Color( 230, 230, 230, 230 ) )
			GUI_Amount_Text:SetText( "Amount: fix this" )
			
			-- Display required ranks
			local VehRankTitle = vgui.Create( "DLabel", GUI_ItemPanel )
			VehRankTitle:SetPos( ScrW() * 0.27, ScrH() * 0.1 )
			VehRankTitle:SetFont( "ARMORY_UIFontText" )
			VehRankTitle:SetColor( Color( 100, 100, 100, 230 ) )
			VehRankTitle:SetText( "Allowed Rank" )
			VehRankTitle:SizeToContents()
			
			local VehRankText = vgui.Create( "DLabel", GUI_ItemPanel )
			VehRankText:SetPos( ScrW() * 0.27, ScrH() * 0.11 )
			VehRankText:SetSize( ScrW() * 0.1, ScrH() * 0.04 )
			VehRankText:SetFont( "ARMORY_UIFontText" )
			VehRankText:SetColor( Color( 230, 230, 230, 230 ) )
			if CH_FireSystem.Config.UseRequiredULXRanks then
				VehRankText:SetText( "this was ranks allowed" )
			else
				VehRankText:SetText( "All Ranks" )
			end
			--]]
			
			-- Retrieve/Deposit Button
			local GUI_Retrieve_Item = vgui.Create("DButton", GUI_ItemPanel)
			GUI_Retrieve_Item:SetPos( ScrW() * 0.372, ScrH() * 0.11 )
			GUI_Retrieve_Item:SetSize( ScrW() * 0.075, ScrH() * 0.031 )
			GUI_Retrieve_Item:SetText("")
			GUI_Retrieve_Item.Paint = function()
				if not LocalPlayer():HasWeapon( v.Weapon ) then
					if GUI_Retrieve_Item:IsHovered() then
						draw.RoundedBoxEx( 8, 0, 0, GUI_Retrieve_Item:GetWide(), GUI_Retrieve_Item:GetTall(), col_light_green, false, false, false, false )
					else
						draw.RoundedBoxEx( 8, 0, 0, GUI_Retrieve_Item:GetWide(), GUI_Retrieve_Item:GetTall(), col_green, false, false, false, false )
					end
				else
					if GUI_Retrieve_Item:IsHovered() then
						draw.RoundedBoxEx( 8, 0, 0, GUI_Retrieve_Item:GetWide(), GUI_Retrieve_Item:GetTall(), col_light_red, false, false, false, false )
					else
						draw.RoundedBoxEx( 8, 0, 0, GUI_Retrieve_Item:GetWide(), GUI_Retrieve_Item:GetTall(), col_red, false, false, false, false )
					end
				end
				local struc = {}
				struc.pos = {}
				struc.pos[1] = ScrW() * 0.0375
				struc.pos[2] = ScrH() * 0.0145

				if v.EntType == "weapon" then
					if LocalPlayer():HasWeapon( v.Weapon ) then
						struc.text = "Silahı koy"
						struc.color = col_white
					else
						struc.text = "Silahı al"
						struc.color = col_white
					end
				elseif v.EntType == "ammo" then
					struc.text = "Mermiyi al"
					struc.color = col_white
				elseif v.EntType == "armor" then
					struc.text = "Zırh al"
					struc.color = col_white
				elseif v.EntType == "health" then
					struc.text = "Sağlık doldur"
					struc.color = col_white
				end
						
				struc.font = "ARMORY_UIFontTextButton"
				struc.xalign = TEXT_ALIGN_CENTER
				struc.yalign = TEXT_ALIGN_CENTER
				draw.Text( struc )
			end
			GUI_Retrieve_Item.DoClick = function()
				GUI_Armory_Frame:Remove()
						
				if v.EntType == "weapon" then
					if LocalPlayer():HasWeapon( v.Weapon ) then
						net.Start( "ARMORY_DepositItem" )
							net.WriteDouble( k )
						net.SendToServer()
					else
						net.Start( "ARMORY_RetrieveItem" )
							net.WriteDouble( k )
						net.SendToServer()
					end
				else
					net.Start( "ARMORY_RetrieveItem" )
						net.WriteDouble( k )
					net.SendToServer()
				end
						
				net.Start("ARM_LOCKER_CloseDoorAnim")
				net.SendToServer()
			end
					
			GUI_Item_Panel:AddItem( GUI_ItemPanel )
		end
	end
end )
--lua/autorun/arnold_pm.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/_kernel/sh_object_types.lua:
ashop.object_types = ashop.object_types or {}
local lock = false

local unloaded_types = {}
local nameToIndex = {}

function ashop.RegisterObjectType(t)
    assert(t and t.Name, "Trying to load a object_type without name")
    assert(t and t.UniqueIdentifier, "Trying to load a object_type without UniqueIdentifier: " .. t.Name)

    if lock then
        for k, v in pairs(ashop.object_types) do
            if v.UniqueIdentifier == t.UniqueIdentifier then
                print('[AShop] Merging the object_type ' .. t.UniqueIdentifier .. ' with the existing one.')
                table.Merge(ashop.object_types[k], t)

                if SERVER then
                    print("[AShop] Refresh object_type " .. t.UniqueIdentifier .. ", this only refresh functions.")
                end
                return
            end
        end

        error("Trying to register a object_type after loading")
    end

    t = hook.Run("ashop_preRegisterObjectType", t) or t

    if nameToIndex[t.UniqueIdentifier] then
        table.Merge(unloaded_types[nameToIndex[t.UniqueIdentifier]], t)
    else
        local index = table.insert(unloaded_types, t)
        nameToIndex[t.UniqueIdentifier] = index
    end
end

function ashop.GetUnloadedTypes()
    return unloaded_types
end

local uidToID = {}
function ashop.GetObjectTypeIDByUID(uid, noerror)
    local o = ashop.object_types[uidToID[uid]]

    if !noerror then
        assert(o, "This UID have no matching object_type")
    end
    return uidToID[uid], o
end

function ashop.refreshAShopIDTable()
    for k, v in pairs(ashop.object_types or {}) do
        uidToID[v.UniqueIdentifier] = k
    end
end
ashop.refreshAShopIDTable()

function ashop.VerifyInput(v, type, options)
    local isInt = string.find(type, "UInt")

    if options and options.required then
        if (isInt or type == "FLOAT") and (v == "" or !v) then
            return false, ashop.L('Input_MissingValue')
        end

        if type == TYPE_STRING and (v == "" or !v) then
            return false, ashop.L('Input_MissingValue')
        end

        if type == "ITEMID" and (v == "" or !v or !tonumber(v) or !ashop.items[tonumber(v)]) then
            return false, ashop.L('Input_NotExistingItem')
        end

        if type == "SELECT" and v == nil then
            return false, ashop.L('Input_MissingValue')
        end
    end

    if options and options.maxLength and (v and string.len(v) or 0) > options.maxLength then
        return false, ashop.L('TooLongText', options.maxLength)
    end

    if options and options.minLength and (v and string.len(v) or 0) < options.minLength then
        return false, ashop.L('Input_TooShortText', options.minLength)
    end

    if v and isInt then
        local n = tonumber(string.sub(type, 5))
        local limit = 2^n - 1

        if v < 0 then
            return false, ashop.L('Input_MoreThan0')
        end

        if v > limit then
            return false, ashop.L('Input_LessThanX', limit)
        end
    end

    if options and options.maxNumber and options.maxNumber < tonumber(v) then
        return false, ashop.L('Input_LessThanX', options.maxNumber)
    end

    if options and options.minNumber and options.minNumber < tonumber(v) then
        return false, ashop.L('Input_MoreThanX', options.minNumber)
    end

    if type == "ITEMID" and v != "" and (!tonumber(v) or !ashop.items[tonumber(v)]) then
        return false, ashop.L('Input_NotExistingItem')
    end

    if type == "LIST" and istable(v) then
        for i, j in ipairs(v) do
            // Not ipairs, since some values could be nil
            for kIndex, kValue in pairs(j) do
                local err, res = ashop.VerifyInput(kValue,
                    options.listObjects[kIndex][1], options.listObjects[kIndex][4])

                if err == false then
                    return err, res
                end
            end
        end
    end

    return true
end
--addons/ashop/lua/ashop/code/gamemodes/currencies/integrations/sh_chcrypto.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/gamemodes/currencies/integrations/sh_darkrp.lua:
hook.Add("DarkRPFinishedLoading", "AShop_currencies_darkrp", function()
    ashop.currencies.RegisterCurrency("DarkRP", function(ply, amt)
        ply:addMoney(amt)
    end, function(ply)
        return ply:getDarkRPVar("money")
    end, function(amt)
        return DarkRP.formatMoney(amt)
    end)
end)

--addons/ashop/lua/ashop/code/gamemodes/logs_integration_name/sh_darkrp.lua:
hook.Add("DarkRPFinishedLoading", "AShop_Name_DRP", function()
    hook.Add("onPlayerChangedName", "AShop_Name_DRP", function(ply, oldName, newName)
        ashop.Logs.RefreshName(ply, newName)
    end)

    hook.Remove("DarkRPFinishedLoading", "AShop_Name_DRP")
    hook.Remove("player_changename", "ashop_Name")
end)
--addons/ashop/lua/ashop/code/items/sh_init.lua:
function ashop.GetItemAttribute(plyItem, item, attr)
    if plyItem.metadata and plyItem.metadata[attr] then
        return plyItem.metadata[attr]
    end
    
    if item.metadata and item.metadata[attr] then
        return item.metadata[attr]
    end
end

/*
    if item.sub_types then
        local o = ashop.object_types[item.object_types]

        if o and o.sub_cat[item.sub_types] and o.sub_cat[item.sub_types].metadata then
            
    end
*/
function ashop.GetSubTypeAttributeByRawItem(item, attr)
    return ashop.object_types[item.object_types].sub_cat[item.sub_types].metadata[attr]
end

function ashop.GetSubTypeAttributeByPlayerItem(item, attr)
    return ashop.GetSubTypeAttributeByRawItem(ashop.items[item.item_id], attr)
end

function ashop.FindFirstRarity()
    return next(ashop.rarity)
end
--addons/ashop/lua/ashop/code/object_types/bundles/cl_bundles.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/entities/sh_entity.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/title_code/effect/sh_text.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/trails/cl_trails.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/trails/sh_trails.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/object_types/weapon_skins/cl_weaponskin.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/players/equip/cl_init.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/players/sync_datas/client/cl_openui.lua:
net.Receive('ashop_readMissingItemsUI', function()
    while(net.ReadBool()) do
        local itemData = ashop.Network.R_ItemData()
        ashop.items[itemData.id] = itemData
    end
end)

net.Receive('ashop_openUI', function()
    local plyItems = LocalPlayer().ashop_data.items

    while(net.ReadBool()) do
        local itemData = ashop.Network.R_PlyItem()
        plyItems[itemData.id] = itemData
    end

    ashop.menu = vgui.Create("AShop_Main")
end)

hook.Add( "PlayerButtonUp", "ashop_openMenu", function( ply, button )
    if ashop.Config.OpenTauntMenuKey and button == ashop.Config.OpenTauntMenuKey and IsFirstTimePredicted() then
        RunConsoleCommand('ashop_opentauntmenu')
    end
end)
--addons/ashop/lua/ashop/code/players/sync_datas/client/cl_sync.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/players/sync_datas/client/cl_sync.lua:
local waitingCallbacks = {}
local ranEntityCreate = {}

function ashop.ExecIfValidData(num, callback)
    local ply = Player(num)

    if IsValid(ply) then
        callback(ply)
    else
        waitingCallbacks[num] = waitingCallbacks[num] or {}
        table.insert(waitingCallbacks[num], callback)
    end
end

hook.Add("NetworkEntityCreated", "ashop_ExecCallbacks", function(ent)
    if ent:IsPlayer() and waitingCallbacks[ent:UserID()] then
        print("[AShop] Load callbacks for " .. ent:Nick())
        for k, v in ipairs(waitingCallbacks[ent:UserID()]) do
            v(ent)
        end

        waitingCallbacks[ent:UserID()] = nil
    end
end)

net.Receive('ashop_PrePlayerSyncFull', function()
    ashop.pac3 = ashop.pac3 or {}
    while(net.ReadBool()) do
        local id = net.ReadUInt(16)
        ashop.pac3[id] = ashop.Network.R_Pac3()
    end
end)

net.Receive('ashop_PlayerSyncFull', function()
    ashop.itemCounter = net.ReadUInt(32)
    ashop.BitsItem = math.ceil(math.log(ashop.itemCounter, 2))

    ashop.pac3 = ashop.pac3 or {}
    local lp = LocalPlayer()
    local unloaded = ashop.GetUnloadedTypes()

    local newObjectType = {}

    for i = 1, net.ReadUInt(ashop.Config.BitsObjectType) do
        local loopIndex, renderIDBy, slotSize, sqlIndex = net.ReadUInt(8), net.ReadUInt(ashop.Config.BitsRender), net.ReadUInt(6), net.ReadUInt(ashop.Config.BitsObjectType)
        local ot = unloaded[loopIndex]
        ot.renderIDBy = renderIDBy
        ot.slotSize = slotSize
        ot.id = sqlIndex
        newObjectType[sqlIndex] = ot
    end

    ashop.object_types = newObjectType

    local sub_cats = ashop.Network.R_Bulk(ashop.Network.R_SubCategory, 1, 12, 12)

    for k, v in pairs(sub_cats) do
        ashop.object_types[v.object_typeid].sub_cat = ashop.object_types[v.object_typeid].sub_cat or {}
        ashop.object_types[v.object_typeid].sub_cat[k] = v
    end

    ashop.refreshAShopIDTable()
    hook.Run('ashop_PostLoadObjectTypes')

    local ashop_data = {
        money_normal = net.ReadUInt(32),
        money_premium = net.ReadUInt(32),
        items = {}
        //items = ashop.Network.R_Bulk(ashop.Network.R_PlyItem, 1, 32, 12)
    }

    lp.ashop_data = ashop_data or {}

    ashop.rarity = ashop.Network.R_Bulk(ashop.Network.R_Rarity, 1, 8, 8)

    ashop.render = ashop.Network.R_Bulk(ashop.Network.R_Render, 1, 8, 6)

    ashop.weaponmaterials = ashop.Network.R_Bulk(ashop.Network.R_WeaponMaterials, 2, 10, 10)

    ashop.carmaterials = ashop.Network.R_Bulk(ashop.Network.R_CarMaterials, 2, 10, 10)

    ashop.currencies.trades = ashop.Network.R_Bulk(
        ashop.Network.R_CurrencyTrade,
        1, 10, 10
    )

    ashop.rankpromo = ashop.Network.R_Bulk(
        function() return net.ReadUInt(7) end,
        2, 10, 10
    )

    ashop.groupranks = {}
    for i = 1, net.ReadUInt(ashop.Config.BitsGroupRank) do
        local gp = ashop.Network.R_GroupRank()
        ashop.groupranks[gp.id] = gp
    end

    ashop.items = ashop.Network.R_Bulk(ashop.Network.R_ItemData, 1, 20, 20)

    for i = 1, net.ReadUInt(8) do
        local plyID = net.ReadUInt(13)
        local d = {
            items = {},
            equipped = {}
        }

        while(net.ReadBool()) do
            local slot_id = net.ReadUInt(4)
            local plyItem = ashop.Network.R_PlyItem()

            d.items[plyItem.id] = plyItem

            local item = ashop.items[plyItem.item_id]

            d.equipped[item.object_types] = d.equipped[item.object_types] or {}
            d.equipped[item.object_types][item.sub_types or 0] = d.equipped[item.object_types][item.sub_types or 0] or {}
            d.equipped[item.object_types][item.sub_types or 0][slot_id] = plyItem.id
        end

        ashop.ExecIfValidData(plyID, function(e)
            if e.ashop_data then
                table.Merge(e.ashop_data, d)
            else
                e.ashop_data = d
            end

            for _, objectTypes in pairs(d.equipped) do
                for objectTypesID, subCats in pairs(objectTypes) do
                    for slotID, slotItem in pairs(subCats) do
                        local plyItem = d.items[slotItem]
                        local item = ashop.items[plyItem.item_id]
                        local object_type = ashop.object_types[item.object_types]
    
                        hook.Run('ashop_equip', e, slotID, item, plyItem)
                        if object_type.OnEquip then
                            object_type.OnEquip(e, plyItem, item)
                        end
                    end
                end
            end
        end)
    end

    hook.Run('ashop_playersync')
end)

net.Receive('ashop_PlayerSyncMoney', function()
    local lp = LocalPlayer()
    local is_premium = net.ReadBool()
    local id = is_premium and "money_premium" or "money_normal"
    local amt = net.ReadUInt(32)
    lp.ashop_data[id] = amt

    if ashop.Config.PS2Compatibility then
        lp.PS2_Wallet = lp.PS2_Wallet or {}
        if is_premium then
            lp.PS2_Wallet.premiumPoints = amt
        else
            lp.PS2_Wallet.points = amt
        end
    end

    hook.Run('ashop_moneyChanged', id, amt)
end)

net.Receive('ashop_PlayerReceivedItem', function()
    local lp = LocalPlayer()
    assert(lp.ashop_data, "No player data")
    // He received a item
    local item = ashop.Network.R_PlyItem()
    lp.ashop_data.items[item.id] = item

    hook.Run('Ashop_PlayerNewItem', item.id, item, ashop.items[item.item_id])
end)

net.Receive('ashop_Item_New', function()
    while(net.ReadBool()) do
        local item = ashop.Network.R_ItemData()
        ashop.items[item.id] = item

        hook.Run('ashop_itemnew', item.id, item)
        ashop.NewItemBitsCounter(item.id)
    end
end)

net.Receive('ashop_PlayerEquippedItem', function()
    local e = net.ReadEntity()
    local plyItemID = net.ReadUInt(20)

    local itemTable = ashop.items[e.ashop_data.items[plyItemID].item_id]
    local objectType = ashop.object_types[itemTable.object_types]

    local slotNum = itemTable.sub_types and objectType.sub_cat[itemTable.sub_types].slotSize or objectType.slotSize
    local slot = net.ReadUInt(math.ceil(math.log(slotNum, 2)))

    ashop.EquipChange(e, plyItemID, slot, net.ReadBool())
end)

net.Receive('ashop_PlayerItem_MetaDataUpdate', function()
    local uid = net.ReadUInt(13)
    local id = net.ReadUInt(ashop.Config.BitsPlyItemID)

    for i = 1, net.ReadUInt(6) do
        local metaKey = net.ReadUInt(6)
        local isNotEmpty = net.ReadBool()
        local item_id = net.ReadUInt(ashop.Config.BitsPlyItemID)
        local itemTable = ashop.items[item_id]
        local o = ashop.object_types[itemTable.object_types]
        local new
        
        if isNotEmpty then
            local param = o.ItemParameters[metaKey]
            new = ashop.Network.GetReadFunction(param.type)
        end

        ashop.ExecIfValidData(uid, function(ply)
            local old = ply.ashop_data.items[id].metadata[metaKey]
            ply.ashop_data.items[id].metadata[metaKey] = new

            if o.OnMetadataUpdate then
                o.OnMetadataUpdate(ply, ply.ashop_data.items[id], itemTable, metaKey, old, new)
            end
        end)
    end
end)

net.Receive('ashop_Pac3_New', function()
    local id = net.ReadUInt(ashop.Config.BitsPac3)
    local data = ashop.Network.R_Pac3()
    ashop.pac3[id] = data
    hook.Run('ashop_refreshSettingsUI', 'Pac3')
end)

local luadata
net.Receive('ashop_Pac3_Edit', function()
    // Pac3 Edit
    if !luadata and file.Exists('pac3/libraries/luadata.lua', 'LUA') then
        luadata = include('pac3/libraries/luadata.lua')
    end

    assert(luadata, "There is pac3 data without pac3 installed")
    local entry = net.ReadUInt(2)
    local pac3ID = net.ReadUInt(ashop.Config.BitsPac3)

    if entry == 0 then
        value = ashop.Network.R_Compress()
        entry = "outfit_text"
        ashop.pac3[pac3ID]["outfit_text"] = value
        ashop.pac3[pac3ID]["outfit"] = luadata.Decode(ashop.pac3[pac3ID]["outfit_text"])
    elseif entry == 1 then
        value = net.ReadString()
        entry = "name"
        ashop.pac3[pac3ID]["name"] = value
    elseif entry == 2 then
        value = net.ReadBool()
        entry = "model_attach"
        ashop.pac3[pac3ID]["model_attach"] = value
    end

    hook.Run("ashop_pac3Edit", pac3ID, entry)

    hook.Run('ashop_refreshSettingsUI', 'Pac3')
end)

net.Receive('ashop_Render_Edit', function()
    // Render edit
    local b = net.ReadBool()
    local renderID = net.ReadUInt(ashop.Config.BitsRender)

    if !b then
        local objectTypeID = net.ReadUInt(ashop.Config.BitsObjectType)

        for k, v in pairs(ashop.render) do
            if v.cat[objectTypeID] then
                v.cat[objectTypeID] = nil
                break
            end
        end
        ashop.render[renderID].cat[objectTypeID] = true
        hook.Run("ashop_renderEdit", false, renderID, objectTypeID)
    else
        ashop.render[renderID].name = net.ReadString()
        hook.Run("ashop_renderEdit", true, renderID, ashop.render[renderID].name)
    end

    hook.Run('ashop_refreshSettingsUI', ashop.L('Renders'))
end)

net.Receive('ashop_Render_New', function()
    local id = net.ReadUInt(ashop.Config.BitsRender)

    ashop.render[id] = ashop.Network.R_Render()
    if table.IsEmpty(ashop.render[id].cat or {}) then return end

    for k, v in pairs(ashop.render) do
        if k == id then continue end

        for objectTypeID, _ in pairs(v.cat or {}) do
            if ashop.render[id].cat[objectTypeID] then
                ashop.render[k].cat[objectTypeID] = nil
            end
        end
    end

    hook.Run('ashop_refreshSettingsUI', ashop.L('Renders'))
end)

net.Receive('ashop_SubCat_New', function()
    // Create object_type
    local r = ashop.Network.R_SubCategory()

    ashop.object_types[r.object_typeid].sub_cat = ashop.object_types[r.object_typeid].sub_cat or {}
    ashop.object_types[r.object_typeid].sub_cat[r.id] = r

    hook.Run("ashop_createdobjecttype")
    hook.Run('ashop_refreshSettingsUI', ashop.L('ObjectType'))
end)

net.Receive('ashop_Item_Edit', function()
    // Edit a item
    if !ashop.items then return end

    local inputID = net.ReadUInt(7)
    local item = net.ReadUInt(ashop.Config.BitsItemID)
    local itemTable = ashop.items[item]

    if inputID <= 11 then
        if inputID == 1 then
            itemTable['name'] = net.ReadString()
        elseif inputID == 2 then
            itemTable['rarity'] = net.ReadUInt(ashop.Config.BitsRarity)
        elseif inputID == 3 or inputID == 4 then
            itemTable[inputID == 4 and 'premium_price' or 'price'] = net.ReadBool() and net.ReadUInt(32) or nil
        elseif inputID == 5 then
            itemTable['delete_death'] = net.ReadBool()
        elseif inputID == 6 or inputID == 7 then
            itemTable[inputID == 7 and 'promotion_end' or 'promotion_start'] = (net.ReadBool() and net.ReadUInt(32) or nil)
        elseif inputID == 8 then
            itemTable['promotion_amount'] = (net.ReadBool() and net.ReadUInt(7) or nil)
        elseif inputID == 9 then
            itemTable['picture_link'] = (net.ReadBool() and net.ReadString() or nil)
        elseif inputID == 10 then
            itemTable['group_restrained'] = (net.ReadBool() and net.ReadUInt(10) or nil)
        elseif inputID == 11 then
            itemTable['expireTime'] = (net.ReadBool() and net.ReadUInt(32) or nil)
        else
            error('No valid inputID')
        end
    else
        local realID = inputID - 11
        local param = ashop.object_types[itemTable.object_types].ItemParameters[realID]
        itemTable.metadata[realID] = ashop.Network.GetReadFunction(param.type, param.options)
    end

    hook.Run('ashop_itemedit', item, itemTable)
end)

net.Receive('ashop_PlayerLostItem', function()
    // RemoveOwned
    local itemID = net.ReadUInt(ashop.Config.BitsPlyItemID)
    local item = LocalPlayer().ashop_data.items[itemID]

    hook.Run('Ashop_PlayerRemoveItem', item.id, item, ashop.items[item.item_id])
    LocalPlayer().ashop_data.items[itemID] = nil
end)

net.Receive("ashop_PlayerDeleteItemBulk", function()
    local lply = LocalPlayer()
    
    for i = 1, net.ReadUInt(9) do
        local id = net.ReadUInt(ashop.Config.BitsPlyItemID)
        lply.ashop_data.items[id] = nil
    end
end)

net.Receive('ashop_Item_Delete', function()
    local id = net.ReadUInt(ashop.Config.BitsItemID)
    ashop.items[id] = nil
    hook.Run('ashop_itemdelete', id)
end)

net.Receive('ashop_Rarity_New', function()
    local rarity = ashop.Network.R_Rarity()
    ashop.rarity[rarity.id] = rarity

    hook.Run('ashop_refreshSettingsUI', ashop.L('Rarity'))
end)

net.Receive('ashop_Rarity_Edit', function()
    local uid = net.ReadUInt(3)
    local rarityID = net.ReadUInt(ashop.Config.BitsRarity)

    if uid == 0 then
        ashop.rarity[rarityID]['name'] = net.ReadString()
    elseif uid == 1 then
        local clr = net.ReadColor()
        ashop.rarity[rarityID].clr = clr
        ashop.rarity[rarityID].r = clr.r
        ashop.rarity[rarityID].g = clr.g
        ashop.rarity[rarityID].b = clr.b
    elseif uid == 2 then
        ashop.rarity[rarityID].style = net.ReadUInt(8)
    elseif uid == 3 then
        ashop.rarity[rarityID].notif_unbox = net.ReadBool()
    elseif uid == 4 then
        ashop.rarity[rarityID].notif_unboxsound = nil
        if net.ReadBool() then
            ashop.rarity[rarityID].notif_unboxsound = net.ReadString()
        end
    end

    hook.Run('ashop_refreshSettingsUI', ashop.L('Rarity'), rarityID)
end)

net.Receive('ashop_WeaponMaterial_Edit', function()
    local wep = net.ReadString()
    local b = net.ReadBool()
    local wm = net.ReadBool()
    local id = net.ReadUInt(8)

    local key2 = wm and "wm" or "vm"
    ashop.weaponmaterials[wep] = ashop.weaponmaterials[wep] or {}
    ashop.weaponmaterials[wep][key2] = ashop.weaponmaterials[wep][key2] or {}
    ashop.weaponmaterials[wep][key2][id] = b and true or nil
end)

net.Receive('ashop_WeaponMaterial_EditBulk', function()
    while(net.ReadBool()) do
        local s = net.ReadString()
        local vm, wm = {}, {}

        for i = 1, net.ReadUInt(8) do
            vm[net.ReadUInt(8)] = true
        end

        for i = 1, net.ReadUInt(8) do
            wm[net.ReadUInt(8)] = true
        end

        ashop.weaponmaterials[s] = {
            wm = wm,
            vm = vm
        }
    end

    hook.Run('ashop_refreshSettingsUI', ashop.L('WeaponSkins'))
end)

net.Receive('ashop_WeaponMaterial_Create', function()
    ashop.weaponmaterials[net.ReadString()] = ashop.Network.R_WeaponMaterials()
    hook.Run('ashop_refreshSettingsUI', ashop.L('WeaponSkins'))
end)

net.Receive('ashop_CarMaterial_Create', function()
    ashop.carmaterials[net.ReadString()] = ashop.Network.R_CarMaterials()
    hook.Run('ashop_refreshSettingsUI', ashop.L('CarSkins'))
end)

net.Receive('ashop_CarMaterial_Delete', function()
    ashop.carmaterials[net.ReadString()] = nil
    hook.Run('ashop_refreshSettingsUI', ashop.L('CarSkins'))
end)

net.Receive('ashop_CarMaterial_Edit', function()
    local car = net.ReadString()
    local b = net.ReadBool()
    local id = net.ReadUInt(8)

    ashop.carmaterials[car] = ashop.carmaterials[car] or {}
    ashop.carmaterials[car][id] = b and true or nil
end)

net.Receive('ashop_Rarity_Delete', function()
    ashop.rarity[net.ReadUInt(ashop.Config.BitsRarity)] = nil
    hook.Run('ashop_refreshSettingsUI', ashop.L('Rarity'))
end)

net.Receive('ashop_PlayerEquippedItem_Bulk', function()
    local plyID = net.ReadUInt(13)
    local loopData = {}

    for i = 1, net.ReadUInt(7) do
        local item_id = net.ReadUInt(ashop.Config.BitsPlyItemID)
        local slot_id = net.ReadUInt(6)
        loopData[i] = {item_id, slot_id}
    end

    ashop.ExecIfValidData(plyID, function(e)
        for _, v in ipairs(loopData) do
            local itemID = v[1]
            local slot_id = v[2]

            e.ashop_data = e.ashop_data or {}
            e.ashop_data.equipped = e.ashop_data.equipped or {}
            e.ashop_data.items = e.ashop_data.items or {}

            local plyItem = e.ashop_data.items[itemID]

            if !plyItem then
                print('[AShop] Unknown plyItem, infos you can report: ')
                print('ItemID: ', itemID, ". Is known: ", ashop.items[itemID] != nil)
                print('How much items are known related to this player: ', table.Count(e.ashop_data.items))
                return
            end

            local item = ashop.items[plyItem.item_id]
            local object_type = ashop.object_types[item.object_types]

            e.ashop_data.equipped = e.ashop_data.equipped or {}
    
            e.ashop_data.equipped[item.object_types] = e.ashop_data.equipped[item.object_types] or {}
            e.ashop_data.equipped[item.object_types][item.sub_types or 0] = e.ashop_data.equipped[item.object_types][item.sub_types or 0] or {}
            e.ashop_data.equipped[item.object_types][item.sub_types or 0][slot_id] = itemID
    
            hook.Run('ashop_equip', e, slot_id, item, plyItem)
    
            if object_type.OnEquip then
                object_type.OnEquip(e, plyItem, item)
            end
        end
    end)
end)

net.Receive('ashop_ObjectType_Edit', function()
    local isMain = net.ReadBool()
    local object_typeID = net.ReadUInt(ashop.Config.BitsObjectType)
    local subID = !isMain and net.ReadUInt(ashop.Config.BitsObjectType) or nil

    local b = net.ReadBool()
    local value, sqlColumn

    if !b then
        value = ashop.Network.GetReadFunction(TYPE_STRING)
        sqlColumn = "name"
    else
        value = ashop.Network.GetReadFunction("UInt8")
        sqlColumn = "slotSize"
    end

    if isMain then
        // I should have fixed this right after noticing it
        ashop.object_types[object_typeID][!b and 'Name' or sqlColumn] = value
    else
        assert(ashop.object_types[object_typeID].sub_cat, "No SubCat while editing a sub category")
        ashop.object_types[object_typeID].sub_cat[subID][sqlColumn] = value
    end

    hook.Run('ashop_refreshSettingsUI', ashop.L('ObjectType'))
end)

net.Receive('ashop_SubObjectType_Edit', function()
    local objectTypeID = net.ReadUInt(ashop.Config.BitsObjectType)
    local subID = net.ReadUInt(ashop.Config.BitsObjectType)
    local paramID = net.ReadUInt(7)

    local objectTypeTable = ashop.object_types[objectTypeID]
    local param = objectTypeTable.SubCategoriesParameters[paramID]

    objectTypeTable.sub_cat[subID].metadata[paramID] = ashop.Network.GetReadFunction(param[2], {
        required = true
    })

    hook.Run('ashop_refreshSettingsUI', ashop.L('ObjectType'))
end)

net.Receive('ashop_PlyItem_New', function()
    local ply = net.ReadUInt(13)
    local items = {}

    while(net.ReadBool()) do
        local plyItem = ashop.Network.R_PlyItem()
        items[plyItem.id] = plyItem
    end

    ashop.ExecIfValidData(ply, function(e)
        e.ashop_data = e.ashop_data or {}
        e.ashop_data.items = e.ashop_data.items or {}
        table.Merge(e.ashop_data.items, items)
    end)
end)

net.Receive('ashop_Currency_New', function()
    local trade = ashop.Network.R_CurrencyTrade()
    ashop.currencies.trades[trade.id] = trade

    hook.Run('ashop_refreshSettingsUI', ashop.L('Currencies'))
end)

net.Receive('ashop_Currency_Edit', function()
    local id = net.ReadUInt(10)
    local act = net.ReadUInt(3)
    local trade = ashop.currencies.trades[id]
    
    if act == 1 or act == 3 then
        trade[act == 1 and 'toCoins' or 'toPremium'] = net.ReadBool()
    elseif act == 2 then
        //trade.convertRate = net.ReadFloat()
        trade.convertRate = tonumber(net.ReadString())
    else
        trade.currencyName = net.ReadString()
    end

    hook.Run('ashop_refreshSettingsUI', ashop.L('Currencies'))
end)

net.Receive('ashop_Admin_ReceiveInventory', function()
    local premiumMoney = net.ReadUInt(32)
    local classicMoney = net.ReadUInt(32)
    
    local ply = net.ReadString()
    while(net.ReadBool()) do
        local item = ashop.Network.R_ItemData()
        ashop.items[item.id] = item
    end
    
    local plyItems = ashop.Network.R_Bulk(ashop.Network.R_PlyItemFull, 1, 32, 12)
    
    hook.Run('ashop_receivedPlayerInventory', ply, plyItems, premiumMoney, classicMoney)
end)

net.Receive('ashop_Admin_ReceiveInventoryMoney', function()
    hook.Run('ashop_receivedPlayerInventoryMoney', net.ReadUInt(32), net.ReadBool())
end)

net.Receive('ashop_Admin_ReceiveInventoryItemData', function()
    local itemID = net.ReadUInt(ashop.Config.BitsPlyItemID)
    local id = net.ReadUInt(3)
    hook.Run('ashop_receivedPlayerInventoryItemData', id, itemID, id != 1 and net.ReadUInt(ashop.Config.BitsPlyItemID) or nil)
end)

net.Receive('ashop_PlayerReceivedItemBulk', function()
    local lp = LocalPlayer()
    assert(lp.ashop_data, "No player data")
    
    for j = 1, net.ReadUInt(9) do
        local item = ashop.Network.R_ItemData()
        ashop.items[item.id] = item
    end
    
    for i = 1, net.ReadUInt(9) do
        local item = ashop.Network.R_PlyItem()
        lp.ashop_data.items[item.id] = item
        hook.Run('Ashop_PlayerNewItem', item.id, item, ashop.items[item.item_id])
    end
end)

net.Receive('ashop_GroupRanks_New', function()
    ashop.groupranks = ashop.groupranks or {}
    
    while(net.ReadBool()) do
        local r = ashop.Network.R_GroupRank()
        ashop.groupranks[r.id] = r
    end

    hook.Run('ashop_refreshSettingsUI', ashop.L('RankGroups'))
end)

net.Receive('ashop_GroupRanks_Edit', function()
    local id = net.ReadUInt(ashop.Config.BitsGroupRank)
    if !ashop.groupranks[id] then return end
    local actID = net.ReadUInt(3)

    if actID == 0 then
        ashop.groupranks[id]['name'] = net.ReadString()
    elseif actID == 1 or actID == 2 then
        ashop.groupranks[id][actID == 2 and 'messageOnFail' or 'desc'] = net.ReadBool() and net.ReadString() or nil
    elseif actID == 3 or actID == 4 then
        ashop.groupranks[id][actID == 3 and 'freePerTime' or 'premiumPerTime'] = net.ReadBool() and net.ReadUInt(16) or nil
    else
        local t = {}

        while(net.ReadBool()) do
            t[net.ReadString()] = true
        end
        ashop.groupranks[id]['ranks'] = t
    end

    hook.Run('ashop_refreshSettingsUI', ashop.L('RankGroups'))
end)

net.Receive('ashop_Pac3_Delete', function()
    ashop.pac3[net.ReadUInt(ashop.Config.BitsPac3)] = nil

    hook.Run('ashop_refreshSettingsUI', 'Pac3')
end)

net.Receive('ashop_Currency_Delete', function()
    ashop.pac3[net.ReadUInt(8)] = nil
    hook.Run('ashop_refreshSettingsUI', ashop.L('Currencies'))
end)

net.Receive('ashop_WeaponMaterial_Delete', function()
    ashop.weaponmaterials[net.ReadString()] = nil
    hook.Run('ashop_refreshSettingsUI', ashop.L('WeaponSkins'))
end)

net.Receive('ashop_GroupRanks_Delete', function()
    ashop.groupranks[net.ReadUInt(ashop.Config.BitsGroupRank)] = nil
    hook.Run('ashop_refreshSettingsUI', ashop.L('RankGroups'))
end)

net.Receive('ashop_Render_Delete', function()
    ashop.render[net.ReadUInt(ashop.Config.BitsRender)] = nil
    hook.Run('ashop_refreshSettingsUI', ashop.L('Renders'))
end)

net.Receive('ashop_ObjectType_Delete', function()
    local objType = net.ReadUInt(ashop.Config.BitsObjectType)
    ashop.object_types[objType].sub_cat[net.ReadUInt(ashop.Config.BitsObjectType)] = nil
    hook.Run('ashop_refreshSettingsUI', ashop.L('ObjectType'))
end)

net.Receive('ashop_RankPromotion_Create', function()
    ashop.rankpromo[net.ReadString()] = net.ReadUInt(ashop.Config.BitsRankPromotion)
    hook.Run('ashop_refreshSettingsUI', ashop.L('RankPromo'))
end)

net.Receive('ashop_RankPromotion_Edit', function()
    local old = net.ReadString()
    local new = net.ReadString()

    ashop.rankpromo[new] = ashop.rankpromo[old]
    ashop.rankpromo[old] = nil

    hook.Run('ashop_refreshSettingsUI', ashop.L('RankPromo'))
end)

net.Receive('ashop_RankPromotion_Delete', function()
    ashop.rankpromo[net.ReadString()] = nil

    hook.Run('ashop_refreshSettingsUI', ashop.L('RankPromo'))
end)
--addons/ashop/lua/ashop/code/ui/cl_notification.lua:
local notif_pnl = {}

local clrtbl = {
    [NOTIFY_ERROR] = {Color(146, 48, 76)},
    [NOTIFY_HINT] = {Color(57, 49, 131)},
    [NOTIFY_CLEANUP] = {Color(36, 121, 82)}
}

local logotbl = {
    [NOTIFY_ERROR] = "%",
    [NOTIFY_HINT] = "&",
    [NOTIFY_CLEANUP] = "$"
}

local font, logoFont = "ashop_16", 'ashop_icon_20'

local function getPos(spawn)
    local height = ashop.menu:GetTall()*0.95

    for k,v in pairs(notif_pnl) do
        if !IsValid(v) then
            notif_pnl[k] = nil
            continue
        end

        height = height - v:GetTall()
        v:SetY(height)
        height = height - ashop.GetSize(10)
    end
end

function ashop.DermaNotify(txt, type, length)
    if !IsValid(ashop.menu) then return end

    surface.SetFont(font)
    local size_x, size_y = surface.GetTextSize(txt)
    local logo = ashop.GetFontHeight(logoFont)

    local pnl = vgui.Create("EditablePanel", ashop.menu)
    pnl:AlphaTo(255, 0.25, 0)
    pnl:SetAlpha(0)
    pnl:DockPadding(logo/2, logo/2, logo/2, logo/2)
    pnl:SetSize(size_x + logo*2.5, math.max(size_y, logo) + logo)
    pnl:SetPaintedManually(true)
    pnl:CenterHorizontal()

    ashop.menu.notifications = ashop.menu.notifications or {}
    table.insert(ashop.menu.notifications, pnl)
    table.insert(notif_pnl, pnl)
    getPos()

    local r1

    local clr2R, clr2G, clr2B = clrtbl[type][1]:Unpack()
    function pnl:Paint(w, h)
        if !r1 then
            r1 = ashop.ui.RoundedBox(ashop.Config.round, 0, 0, w, h)
        end

        surface.SetDrawColor(clr2R, clr2G, clr2B)
        draw.NoTexture()
        surface.DrawPoly(r1)
    end

    local pnl_logo = vgui.Create("DLabel", pnl)
    pnl_logo:Dock(LEFT)
    pnl_logo:SetWide(logo)
    pnl_logo:SetText(logotbl[type])
    pnl_logo:SetFont(logoFont)
    pnl_logo:SetTextColor(color_white)
    pnl_logo:DockMargin(0, 0, logo/2, 0)

    local pnl_follower = vgui.Create("DLabel", pnl)
    pnl_follower:SetContentAlignment(4)
    pnl_follower:SetText(txt)
    pnl_follower:SetFont(font)
    pnl_follower:SetWide(pnl_follower:GetContentSize())
    pnl_follower:Dock(LEFT)
    pnl_follower:SetWide(size_x)
    pnl_follower:SetTextColor(color_white)

    function pnl:OnRemove()
        // Can't use ipairs for a simple reason
        // A notif that pop after, can be removed before a older one, making holes in the code
        for k, v in pairs(notif_pnl) do
            if v == self or not IsValid(pnl) then
                notif_pnl[k] = nil
            end
        end

        ashop.menu.notifications = ashop.menu.notifications or {}
        table.RemoveByValue(ashop.menu.notifications, self)
        getPos()
    end

    timer.Simple(length or 5, function()
        if IsValid(pnl) then
            pnl:Remove()
        end
    end)
end

/*

net.Receive("Flux_Notify", function()
    local str
    if net.ReadBool() then
        local uid = net.ReadUInt(12)
        local tbl = {}
        
        for i = 1, net.ReadUInt(3) do
            table.insert(tbl, net.ReadString())
        end
        
        local good, res = pcall(function()
            return Flux.FormatLanguage(uid, unpack(tbl))
        end)

        if !good then
            notification.AddLegacy("Erreur lors de la lecture de : " .. Flux.Lang_IDToStr[uid], 1, 4)
            return
        else
            str = res
        end
    else
        str = net.ReadString()
    end
    
    notification.AddLegacy(str, net.ReadInt(5) or 0, net.ReadInt(5) or 4)
end)
*/
--addons/ashop/lua/ashop/code/ui/panels/cl_askbox.lua:

local IsValid = IsValid
local ScrW = ScrW
local ScrH = ScrH
local vgui = vgui
local select = select
local draw = draw

local PANEL = {}
local oldAskBox
local black

function PANEL:Init()
    black = ashop.GetColor('entryColor')
    if oldAskBox and IsValid(oldAskBox) then
        oldAskBox:Remove()
    end

    local w = ScrW()*0.35

    self:SetSize(w, ScrH()*0.12)
    self:Center()
    self:DockPadding(w * 0.03, w * 0.03, w * 0.03, w * 0.03)

    local title = vgui.Create("DLabel", self)
    title:SetFont("ashop_30_600")
    title:SetText("Sans titre")
    title:Dock(TOP)
    title:SetTall(select(2, title:GetContentSize()))
    title:SetContentAlignment(5)
    title:SetTextColor(color_white)

    self.title = title

    local title2 = vgui.Create("DLabel", self)
    title2:SetFont("ashop_16")
    title2:SetText("")
    title2:SetContentAlignment(5)
    title2:Dock(TOP)
    title2:SetTall(select(2, title:GetContentSize()))
    title2:SetTextColor(color_white)
    self.desc = title2

    local container = vgui.Create("EditablePanel", self)
    container:Dock(BOTTOM)

    container:SetTall(draw.GetFontHeight("ashop_14_600"))

    local buttonValid = vgui.Create("DButton", container)
    buttonValid:Dock(RIGHT)
    buttonValid:SetWide(self:GetWide()/2)
    buttonValid:SetFont("ashop_14_600")
    buttonValid:SetText(ashop.L('Accept'))
    ashop.ui.WhiteHover(buttonValid, 50)

    function buttonValid:Paint() end

    local buttonCancel = vgui.Create("DButton", container)
    buttonCancel:Dock(RIGHT)
    buttonCancel:SetWide(self:GetWide()/2)
    buttonCancel:SetFont("ashop_14_600")
    buttonCancel:SetText(ashop.L('Cancel'))
    ashop.ui.WhiteHover(buttonCancel, 50)

    local oldSelf = self
    function buttonCancel:DoClick()
        local a = oldSelf.OnRefuse
        ashop.menu:PopFocus()
        oldSelf.cleanedFocus = true
        oldSelf:Remove()

        if a then
            a()
        end
    end
    
    function buttonValid:DoClick()
        local a = oldSelf.OnAccept
        ashop.menu:PopFocus()
        oldSelf.cleanedFocus = true
        oldSelf:Remove()

        if a then
            a()
        end
    end
    
    function buttonCancel:Paint() end
    function buttonValid:Paint() end

    oldAskBox = self
    ashop.menu:PushFocus(self)
end

function PANEL:Paint(w, h)
    draw.RoundedBox(ashop.Config.round, 0, 0, w, h, black)
end

function PANEL:OnRemove()
    if !self.cleanedFocus then
        ashop.menu:PopFocus()
    end
end

function PANEL:OnAccept()
end

vgui.Register("ashop_AskBox", PANEL, "EditablePanel")
--addons/ashop/lua/ashop/code/ui/panels/cl_dcheckboxlabel.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels/cl_dcheckboxlabel.lua:
local PANEL = {}

function PANEL:Init()
    self:SetMouseInputEnabled(true)
    self.state = false

    local p = vgui.Create("EditablePanel", self)
    p:Dock(LEFT)
    p:SetWide(16)
    p:SetMouseInputEnabled(false)

    self.Button = p

    local stateOn = ashop.GetColor('StateOn')
    local stateOff = ashop.GetColor('StateOff')

    p.Paint = function(_, w, h)
        draw.RoundedBox(4, 0, 0, w, h, self.state and stateOn or stateOff)
    end

    local l = vgui.Create("DLabel", self)
    l:SetFont('ashop_16')
    l:SetText('Un texte')
    l:DockMargin(ashop.GetFontHeight('ashop_16')/2, 0, 0, 0)
    l:Dock(FILL)
    l:SetMouseInputEnabled(false)
    l:SetTextColor(color_white)

    self.Label = l
end

function PANEL:SetValue( val )
	self.state = val
end

function PANEL:GetChecked()
	return self.state
end

function PANEL:Toggle()
    self:SetValue(!self:GetChecked())
    self:OnChange(self:GetChecked())
end

function PANEL:PerformLayout(w, h)
    self.Label:DockMargin(ashop.GetFontHeight(self.Label:GetFont())/2, 0, 0, 0)
    self.Button:SetWide(h)
end

function PANEL:SetTextColor( color )
	self.Label:SetTextColor( color )
end

function PANEL:SetText( text )
	self.Label:SetText( text )
end

function PANEL:SetFont( font )
	self.Label:SetFont( font )
    self.Label:DockMargin(ashop.GetFontHeight(font)/2, 0, 0, 0)
end

function PANEL:GetText()
	return self.Label:GetText()
end

function PANEL:Paint()
end

function PANEL:OnChange( bVal )
end

function PANEL:OnMousePressed()
    self:DoClick()
end

function PANEL:DoClick()
    self:Toggle()
end

derma.DefineControl( "AShop_DCheckBoxLabel", "", PANEL, "EditablePanel" )
--addons/ashop/lua/ashop/code/ui/panels/cl_radialmenu.lua:
local PANEL = {}

function PANEL:Init()
	self:MakePopup()
    self:SetSize(ScrW()/2, ScrH()/2)
    self:Center()

	self.c2 = CurTime()
end

function PANEL:CallbackItem(data)
end

function PANEL:DrawItem(data)
end

function PANEL:SetContents(count, tbl)
	assert(count > 0, "Count must be greater than 0")
	local diff = 360 / count
	self.CachedCircle = {}
	self.CachedPos = {}

	local acc = -180 + diff
	local w, h = self:GetSize()
	local externRadius = h/3*1.33

	for i = 0, count-1 do
		table.insert(self.CachedCircle, ashop.ui.CachedCircle(w/2, h/2, externRadius, diff/2, acc, acc + diff))

		local rad = math.rad(acc + diff/2)
		local diffRad = (h/3*1.33 - h/4)/2 + h/4

		// 220
		if tbl[i+1] then
			table.insert(self.CachedPos, { x = -math.sin(rad) * diffRad + w/2, y = math.cos(rad) * diffRad + h/2})
		end
		acc = acc + diff
	end

	self.tbl = tbl
	self.diff = diff
end

function PANEL:OnMousePressed(key)
	if key == MOUSE_LEFT and self.lastHover and self.tbl[self.lastHover] then
		self:CallbackItem(self.tbl[self.lastHover].data)
	end
end

function PANEL:Think()
	//if t then
	//	t(self)
	//end

	if input.IsMouseDown(107) and !self.lastHover and CurTime() - self.c2 > 1 then
		self:Remove()
	end
end

local clrHover = ashop.GetColor('StateOn')
local clrBg = ashop.GetColor('Grad1_1', 220)
local clrOutline = ashop.GetColor('StateOff', 100)
local clrCircle = ashop.GetColor('Grad1_12')

function PANEL:Paint(w, h)
	if !self.CachedCircle then return end

	local innerRadius, externRadius = h / 4, h / 3 * 1.33
	local diff = self.diff
	local centerX, centerY = ScrW() / 2, ScrH() / 2
	local mouseX, mouseY = input.GetCursorPos()
	local ang = math.deg(math.atan2(centerY - mouseY, mouseX - centerX))
	local d = math.Distance( mouseX, mouseY, centerX, centerY )
	local inRadius = d > innerRadius && d < externRadius
	local correctedAngle = -ang + 30 + 180
	local boxSize = ashop.GetSize(32)

	if !self.innerCircle then
		self.innerCircle = ashop.ui.CachedCircle(w / 2, h / 2, innerRadius, 30)
		self.innerCircle2 = ashop.ui.CachedCircle(w / 2, h / 2, externRadius - 4, diff)
	end

	draw.NoTexture()
	for k, v in ipairs(self.CachedCircle) do
		local currentCheckedAng = k * -diff
		surface.SetDrawColor(clrOutline)
		surface.DrawLine(w/2, h/2, externRadius * math.sin(math.rad(currentCheckedAng)) + w/2, externRadius * math.cos(math.rad(currentCheckedAng)) + h/2)
	end

	local lastHover

	for k, v in ipairs(self.CachedCircle) do
		local ang = (-ang + 90) % 360
		local currentCheckedAng = (diff * k) % 360
		local maxCurrentCheckedAng = (currentCheckedAng + diff)
		if inRadius and currentCheckedAng < ang and maxCurrentCheckedAng > ang then
			surface.SetDrawColor(clrHover)
			lastHover = k
		else
			surface.SetDrawColor(clrBg)
		end

		surface.DrawPoly(v)

		if self.tbl[k] and self.CachedPos[k] then
			local cachedPos = self.CachedPos[k]
			self:DrawItem(self.tbl[k].data, cachedPos.x - boxSize, cachedPos.y - boxSize, boxSize*2, boxSize*2, k)
		end
	end

	self.lastHover = lastHover

	surface.SetDrawColor(clrCircle)
	surface.DrawPoly(self.innerCircle)

	if lastHover and self.tbl[lastHover] then
		local _, tH = draw.SimpleText(self.tbl[self.lastHover].name, "ashop_24_600", w/2, h/2, color_white, 1, 1)
		draw.SimpleText(self.desc or "", "ashop_16", w/2, h/2 + tH, color_white, 1, 1)
	end

	ashop.StartStencil()
		surface.SetDrawColor(1, 1, 1, 1)
		surface.DrawPoly(self.innerCircle2)
	ashop.ReplaceStencil(0)
		surface.SetDrawColor(255, 255, 255)
		ashop.ui.DrawCircle(w/2, h/2, externRadius, 30, correctedAngle+40, correctedAngle + 80)
	ashop.EndStencil()
end

derma.DefineControl( "AShop_RadialMenu", "", PANEL, "EditablePanel" )
--addons/ashop/lua/ashop/code/ui/panels_settings/cl_carskins.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/cl_giveaway.lua:
ashop.registerParameter(ashop.L('Giveaway'), function()
    local a = vgui.Create('AShop_Form', ashop.menu)
    a:SetTitle(ashop.L('CreateGiveaway'))

    local l = {}

    for k, v in pairs(ashop.items) do
        table.insert(l, {v.name, k})
    end

    local o = {}

    for k, v in pairs(ashop.groupranks) do
        table.insert(o, {v.name, k})
    end

    a:CreateEntry(true, ashop.L('ItemToGive'), "SELECT", {
        required = true,
        selects = l
    })

    a:CreateEntry(false, ashop.L('GroupRestrained'), "SELECT", {
        selects = o,
        required = false
    })

    function a:OnSend(itemToGive, groupRestrained)
        net.Start('ashop_giveaway')
            net.WriteUInt(itemToGive, ashop.Config.BitsItemID)
            net.WriteBool(groupRestrained and groupRestrained != 0)

            if groupRestrained and groupRestrained != 0 then
                net.WriteUInt(groupRestrained, ashop.Config.BitsGroupRank)
            end
        net.SendToServer()
    end
    a:Center()
end)
--addons/ashop/lua/ashop/code/ui/panels_settings/cl_premade.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_anims.lua:
return gluapack()()
--addons/ashop/lua/ashop/code/ui/panels_settings/premades/cl_tera_arcticpets.lua:
// Pleae, don't make errors
DPets = DPets or {}
DPets.List = DPets.List or {}

ashop.RegisterPremade("Tera Arctic Pets", {
    requireWorkshop = "2658304756",

    objectTypes = {
        {
            "Pets",
        }
    },

    items = {
        {
            name = "Arctic Fox",
            rendering = 1,
            metadata = {
                [1] = 'models/defcongaming/pets/arcticfox.mdl',
                [3] = 3,
                [4] = {
                    [1] = {
                        [1] = 'run',
                        [2] = 0.5,
                    },
                    [2] = {
                        [1] = 'roll',
                        [2] = 0.5,
                    },
                },
                [5] = {
                    [1] = {
                        [1] = 'idle',
                        [2] = 0.25,
                    },
                    [2] = {
                        [1] = 'spin',
                        [2] = 0.25,
                    },
                },
                [6] = {
                },
                [7] = {
                    {
                        [1] = 'jump',
                        [2] = 0.20000000298023,
                    }
                },
            },
        },

        {
            name = "Walrus",
            rendering = 1,
            metadata = {
                [1] = 'models/defcongaming/pets/walrus.mdl',
                [3] = 3,
                [4] = {
                    [1] = {
                        [1] = 'run',
                        [2] = 0.5,
                    },
                    [2] = {
                        [1] = 'roll',
                        [2] = 0.5,
                    },
                },
                [5] = {
                    [1] = {
                        [1] = 'idle',
                        [2] = 0.25,
                    },
                    [2] = {
                        [1] = 'spin',
                        [2] = 0.25,
                    },
                },
                [6] = {
                },
                [7] = {
                    {
                        [1] = 'jump',
                        [2] = 0.20000000298023,
                    }
                },
            },
        },

        {
            name = "Lynx",
            rendering = 1,
            metadata = {
                [1] = 'models/defcongaming/pets/lynx.mdl',
                [3] = 3,
                [4] = {
                    [1] = {
                        [1] = 'run',
                        [2] = 0.5,
                    },
                    [2] = {
                        [1] = 'roll',
                        [2] = 0.5,
                    },
                },
                [5] = {
                    [1] = {
                        [1] = 'idle',
                        [2] = 0.25,
                    },
                    [2] = {
                        [1] = 'spin',
                        [2] = 0.25,
                    },
                },
                [6] = {
                },
                [7] = {
                    {
                        [1] = 'jump',
                        [2] = 0.20000000298023,
                    }
                },
            },
        },

        {
            name = "Moose",
            rendering = 1,
            metadata = {
                [1] = 'models/defcongaming/pets/moose.mdl',
                [3] = 3,
                [4] = {
                    [1] = {
                        [1] = 'run',
                        [2] = 0.5,
                    },
                    [2] = {
                        [1] = 'roll',
                        [2] = 0.5,
                    },
                },
                [5] = {
                    [1] = {
                        [1] = 'idle',
                        [2] = 0.25,
                    },
                    [2] = {
                        [1] = 'spin',
                        [2] = 0.25,
                    },
                },
                [6] = {
                },
                [7] = {
                    {
                        [1] = 'jump',
                        [2] = 0.20000000298023,
                    }
                },
            },
        },

        {
            name = "Penguin",
            rendering = 1,
            metadata = {
                [1] = 'models/defcongaming/pets/penguin.mdl',
                [3] = 3,
                [4] = {
                    [1] = {
                        [1] = 'run',
                        [2] = 0.5,
                    },
                    [2] = {
                        [1] = 'roll',
                        [2] = 0.5,
                    },
                },
                [5] = {
                    [1] = {
                        [1] = 'idle',
                        [2] = 0.25,
                    },
                    [2] = {
                        [1] = 'spin',
                        [2] = 0.25,
                    },
                },
                [6] = {
                },
                [7] = {
                    {
                        [1] = 'jump',
                        [2] = 0.20000000298023,
                    }
                },
            },
        },

        
        {
            name = "Polar Bear",
            rendering = 1,
            metadata = {
                [1] = 'models/defcongaming/pets/polarbear.mdl',
                [3] = 3,
                [4] = {
                    [1] = {
                        [1] = 'run',
                        [2] = 0.5,
                    },
                    [2] = {
                        [1] = 'roll',
                        [2] = 0.5,
                    },
                },
                [5] = {
                    [1] = {
                        [1] = 'idle',
                        [2] = 0.25,
                    },
                    [2] = {
                        [1] = 'spin',
                        [2] = 0.25,
                    },
                },
                [6] = {
                },
                [7] = {
                    {
                        [1] = 'jump',
                        [2] = 0.20000000298023,
                    }
                },
            },
        },

        {
            name = "Puffin",
            rendering = 1,
            metadata = {
                [1] = 'models/defcongaming/pets/puffin.mdl',
                [3] = 3,
                [4] = {
                    [1] = {
                        [1] = 'run',
                        [2] = 0.5,
                    },
                    [2] = {
                        [1] = 'roll',
                        [2] = 0.5,
                    },
                },
                [5] = {
                    [1] = {
                        [1] = 'idle',
                        [2] = 0.25,
                    },
                    [2] = {
                        [1] = 'spin',
                        [2] = 0.25,
                    },
                },
                [6] = {
                },
                [7] = {
                    {
                        [1] = 'jump',
                        [2] = 0.20000000298023,
                    }
                },
            },
        },

        {
            name = "Snow Leopard",
            rendering = 1,
            metadata = {
                [1] = 'models/defcongaming/pets/snowleopard.mdl',
                [3] = 3,
                [4] = {
                    [1] = {
                        [1] = 'run',
                        [2] = 0.5,
                    },
                    [2] = {
                        [1] = 'roll',
                        [2] = 0.5,
                    },
                },
                [5] = {
                    [1] = {
                        [1] = 'idle',
                        [2] = 0.25,
                    },
                    [2] = {
                        [1] = 'spin',
                        [2] = 0.25,
                    },
                },
                [6] = {
                },
                [7] = {
                    {
                        [1] = 'jump',
                        [2] = 0.20000000298023,
                    }
                },
            },
        },

        {
            name = "Snow Owl",
            rendering = 1,
            metadata = {
                [1] = 'models/defcongaming/pets/snowowl.mdl',
                [3] = 3,
                [4] = {
                    [1] = {
                        [1] = 'run',
                        [2] = 0.5,
                    },
                    [2] = {
                        [1] = 'roll',
                        [2] = 0.5,
                    },
                },
                [5] = {
                    [1] = {
                        [1] = 'idle',
                        [2] = 0.25,
                    },
                    [2] = {
                        [1] = 'spin',
                        [2] = 0.25,
                    },
                },
                [6] = {
                },
                [7] = {
                    {
                        [1] = 'jump',
                        [2] = 0.20000000298023,
                    }
                },
            },
        },
    }
})
--addons/sh_reports/lua/reports/language/english.lua:
return gluapack()()
--addons/sh_reports/lua/reports/lib_loungeui.lua:
return gluapack()()
--addons/safezone-sh/lua/autorun/autorun_safezones.lua:
SH_SZ = {}

include("sz_config.lua")
include("safezones/sh_shapes.lua")
include("safezones/sh_main.lua")

if (SERVER) then
	AddCSLuaFile("autorun/autorun_safezones.lua")
	AddCSLuaFile("safezones/sh_shapes.lua")
	AddCSLuaFile("safezones/sh_main.lua")
	AddCSLuaFile("safezones/cl_interface.lua")
	AddCSLuaFile("safezones/cl_main.lua")
	AddCSLuaFile("safezones/cl_editor.lua")
	AddCSLuaFile("sz_config.lua")

	include("safezones/sv_main.lua")
else
	include("safezones/cl_interface.lua")
	include("safezones/cl_main.lua")
	include("safezones/cl_editor.lua")
end
--lua/autorun/cf_gunslinger_sp.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/shared/ch_atm_config_lang.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/shared/ch_atm_dev.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/shared/currencies/santosrp.lua:
CH_ATM.Currencies[ "santosrp" ] = {
	Name = "SantosRP Money",
	
	AddMoney = function( ply, amount )
		ply:AddMoney( amount )
	end,
	
	TakeMoney = function( ply, amount )
		ply:AddMoney( -amount )
	end,
	
	GetMoney = function( ply )
		return ply:GetMoney()
	end,
	
	CanAfford = function( ply, amount )
		return ply:CanAfford( amount )
	end,
	
	FormatMoney = function( amount )
		return "$" .. string.Comma( amount )
	end,
	
	CurrencyAbbreviation = function()
		return "USD"
	end,
}
--addons/ch_atm/lua/ch_atm/shared/currencies/sh_pointshop.lua:
return gluapack()()
--addons/ch_atm/lua/ch_atm/client/ch_atm_accounts_network.lua:
return gluapack()()
--addons/darkrpbankrobbery2/lua/ch_bank_robbery/shared/bank_utils.lua:
return gluapack()()
--addons/ch_bitminers_dlc/lua/autorun/ch_bitminers_dlc_initialize.lua:
return gluapack()()
--addons/ch_bitminers_dlc/lua/autorun/ch_bitminers_dlc_initialize.lua:
-- INITIALIZE SCRIPT
if SERVER then
	for k, v in ipairs( file.Find( "ch_bitminers_dlc/shared/*.lua", "LUA" ) ) do
		include( "ch_bitminers_dlc/shared/" .. v )
		AddCSLuaFile( "ch_bitminers_dlc/shared/" .. v )
	end
	
	for k, v in ipairs( file.Find( "ch_bitminers_dlc/server/*.lua", "LUA" ) ) do
		include( "ch_bitminers_dlc/server/" .. v )
	end
	
	for k, v in ipairs( file.Find( "ch_bitminers_dlc/client/*.lua", "LUA" ) ) do
		AddCSLuaFile( "ch_bitminers_dlc/client/" .. v )
	end
end

if CLIENT then
	for k, v in ipairs( file.Find( "ch_bitminers_dlc/shared/*.lua", "LUA" ) ) do
		include( "ch_bitminers_dlc/shared/" .. v )
	end
	
	for k, v in ipairs( file.Find( "ch_bitminers_dlc/client/*.lua", "LUA" ) ) do
		include( "ch_bitminers_dlc/client/" .. v )
	end
end
--addons/ch_bitminers/lua/ch_bitminers/client/bitminers_ui_crypto_integration.lua:
--[[
	CRYPTO MENU
--]]

net.Receive( "CH_BITMINERS_CryptoOptions", function( length, ply )
	if not CH_Bitminers.Config.IntegrateCryptoCurrencies then
		return
	end
	
	local ply = LocalPlayer()
	local bitminer = net.ReadEntity()
	
	local GUI_CryptoOptionFrame = vgui.Create( "DFrame" )
	GUI_CryptoOptionFrame:SetTitle( "" )
	GUI_CryptoOptionFrame:SetSize( ScrW() * 0.3565, ScrH() * 0.488 )
	GUI_CryptoOptionFrame:Center()
	GUI_CryptoOptionFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_CryptoCurrencies.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_CryptoCurrencies.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.085 )
		
		-- Draw the top title.
		draw.SimpleText( CH_CryptoCurrencies.LangString( "Select Crypto" ), "CH_CryptoCurrency_Font_Size10", w / 2, h * 0.045, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_CryptoOptionFrame:MakePopup()
	GUI_CryptoOptionFrame:SetDraggable( false )
	GUI_CryptoOptionFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_CryptoOptionFrame )
	GUI_CloseMenu:SetPos( ScrW() * 0.339, ScrH() * 0.01 )
	GUI_CloseMenu:SetSize( 24, 24 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( color_white )
		if self:IsHovered() then
			surface.SetDrawColor( CH_CryptoCurrencies.Colors.Red )
		else
			surface.SetDrawColor( color_white )
		end
		surface.SetMaterial( CH_CryptoCurrencies.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, 24, 24 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_CryptoOptionFrame:Remove()
	end
	
	local GUI_CryptoList = vgui.Create( "DPanelList", GUI_CryptoOptionFrame )
	GUI_CryptoList:SetSize( ScrW() * 0.35, ScrW() * 0.244 )
	GUI_CryptoList:SetPos( ScrW() * 0.0045, ScrH() * 0.049 )
	GUI_CryptoList:EnableVerticalScrollbar( true )
	GUI_CryptoList:EnableHorizontal( true )
	GUI_CryptoList:SetSpacing( 7 )
	GUI_CryptoList.Paint = function( self, w, h )
		--draw.RoundedBox( 0, 0, 0, w, h, CH_CryptoCurrencies.Colors.Invisible )
	end
	if ( GUI_CryptoList.VBar ) then
		GUI_CryptoList.VBar.Paint = function( self, w, h ) -- BG
			surface.SetDrawColor( CH_CryptoCurrencies.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_CryptoList.VBar.btnUp.Paint = function( self, w, h )
			surface.SetDrawColor( CH_CryptoCurrencies.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_CryptoList.VBar.btnGrip.Paint = function( self, w, h )
			surface.SetDrawColor( CH_CryptoCurrencies.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_CryptoList.VBar.btnDown.Paint = function( self, w, h )
			surface.SetDrawColor( CH_CryptoCurrencies.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
	end
	
	for index, crypto in ipairs( CH_CryptoCurrencies.CryptosCL ) do
		if crypto.Name then
			-- Cache some variables that doesn't have to be in the Paint hook
			local player_owns = math.Round( ply.CH_CryptoCurrencies_Wallet[ crypto.Currency ].Amount, 7 )
			
			local price_change = crypto.Change
			local price_change_color = CH_CryptoCurrencies.Colors.Green
			if price_change < 0 then
				price_change_color = CH_CryptoCurrencies.Colors.Red
			end
			local no_change = false
			
			-- Panel per crypto
			local GUI_CryptoPanel = vgui.Create( "DPanelList" )
			GUI_CryptoPanel:SetSize( ScrW() * 0.065, ScrH() * 0.14 )
			GUI_CryptoPanel.Paint = function( self, w, h )
				-- Draw frame
				surface.SetDrawColor( CH_CryptoCurrencies.Colors.GrayBG )
				surface.DrawRect( 0, 0, w, h )
				
				-- Coin Icon
				surface.SetDrawColor( color_white )
				surface.SetMaterial( crypto.Icon )
				surface.DrawTexturedRect( w * 0.12, h * 0.08, 96, 96 )
				
				-- Coin Name
				draw.SimpleText( crypto.Currency, "CH_CryptoCurrency_Font_Size10", w / 2, h * 0.85, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			
			local GUI_SelectCryptoBtn = vgui.Create( "DButton", GUI_CryptoPanel )
			GUI_SelectCryptoBtn:SetSize( GUI_CryptoPanel:GetWide(), GUI_CryptoPanel:GetTall() )
			GUI_SelectCryptoBtn:SetPos( 0, 0 )
			GUI_SelectCryptoBtn:SetText( "" )
			GUI_SelectCryptoBtn.Paint = function( self, w, h )
				--draw.RoundedBox( 8, 0, 0, w, h, CH_CryptoCurrencies.Colors.DarkGray )
			end
			GUI_SelectCryptoBtn.DoClick = function()
				net.Start( "CH_BITMINERS_CryptoIntegration_SelectCrypto" )
					net.WriteEntity( bitminer )
					net.WriteUInt( index, 6 )
				net.SendToServer()
				
				GUI_CryptoOptionFrame:Remove()
			end
			
			GUI_CryptoList:AddItem( GUI_CryptoPanel )
		end
	end
end )
--addons/ch_mayor/lua/ch_adv_mayor/shared/config/upgrades/upgrade_paycheck.lua:
CH_Mayor.Upgrades_PaycheckBonus = 0

CH_Mayor.Upgrades["upgrade_paycheck"] = {
	Name = "Maaş Bonusu",
	Icon = Material( "materials/craphead_scripts/advanced_mayor/gui/upgrades/paycheck.png", "noclamp smooth" ),
	Description = "Hükümet takımlarının maaşlarını artırır.",
	Levels = {
		[1] = {
			Price = 50000,
			Description = "Maaşlara %10 ekstra para ekler.",
			UpgradeFunction = function( ply )
				CH_Mayor.Upgrades_PaycheckBonus = 10
			end,
		},
		[2] = {
			Price = 60000,
			Description = "Maaşlara %20 ekstra para ekler.",
			UpgradeFunction = function( ply )
				CH_Mayor.Upgrades_PaycheckBonus = 20
			end,
		},
		[3] = {
			Price = 70000,
			Description = "Maaşlara %30 ekstra para ekler.",
			UpgradeFunction = function( ply )
				CH_Mayor.Upgrades_PaycheckBonus = 30
			end,
		},
	},
	RemoveFunction = function( ply )
		CH_Mayor.Upgrades_PaycheckBonus = 0
	end,
}

--addons/ch_mayor/lua/ch_adv_mayor/client/ch_mayor_leaderboards.lua:
CH_Mayor.Leaderboards = CH_Mayor.Leaderboards or {}

--[[
	Receive the leaderboard and update the CL table
--]]
net.Receive( "CH_Mayor_Net_Leaderboards", function( len, ply )
	local ply = LocalPlayer()
	local temp_table = {}
	
	local leaderboard = net.ReadString()
	local amount_of_entries = net.ReadUInt( 4 )
	
	for i = 1, amount_of_entries do
		temp_table[ i ] = {
			Name = net.ReadString(),
			Amount = net.ReadDouble(),
		}
	end
	
	CH_Mayor.Leaderboards[ leaderboard ] = temp_table
end )
--addons/ch_mayor/lua/ch_adv_mayor/client/ch_mayor_load.lua:
return gluapack()()
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_laws.lua:
--[[
	MAYOR LAWS MENU
--]]
function CH_Mayor.LawsMenu()
	local ply = LocalPlayer()

	local GUI_LawsFrame = vgui.Create( "DFrame" )
	GUI_LawsFrame:SetTitle( "" )
	GUI_LawsFrame:SetSize( CH_Mayor.ScrW * 0.6, CH_Mayor.ScrH * 0.665 )
	GUI_LawsFrame:Center()
	GUI_LawsFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "City Management" ), "CH_Mayor_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Draw titles
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( w * 0.182, h * 0.0724, w * 0.812, h * 0.06 )
		
		draw.SimpleText( CH_Mayor.LangString( "Laws" ), "CH_Mayor_Font_Size10", w * 0.195, h * 0.1, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

		draw.SimpleText( CH_Mayor.LangString( "Action" ), "CH_Mayor_Font_Size10", w * 0.9, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_LawsFrame:MakePopup()
	GUI_LawsFrame:SetDraggable( false )
	GUI_LawsFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_CloseMenu:SetPos( CH_Mayor.ScrW * 0.582, CH_Mayor.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.Red or color_white )
		surface.SetMaterial( CH_Mayor.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_LawsFrame:Remove()
	end
	
	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Dashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Dashboard" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.DashboardMenu()
	end

	local GUI_UpgradesFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_UpgradesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_UpgradesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.095 )
	GUI_UpgradesFrameBtn:SetText( "" )
	GUI_UpgradesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Upgrades )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Upgrades" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_UpgradesFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.UpgradesMenu()
	end
	
	local GUI_TaxesFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_TaxesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_TaxesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.1425 )
	GUI_TaxesFrameBtn:SetText( "" )
	GUI_TaxesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Taxes )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Taxes" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TaxesFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.TaxesMenu()
	end

	local GUI_CatalogFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_CatalogFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CatalogFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.19 )
	GUI_CatalogFrameBtn:SetText( "" )
	GUI_CatalogFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Catalog )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Catalog" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CatalogFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.CatalogMenu()
	end
	
	local GUI_LawsFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_LawsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LawsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.2375 )
	GUI_LawsFrameBtn:SetText( "" )
	GUI_LawsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Laws )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Laws" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LawsFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.LawsMenu()
	end
	
	local GUI_CiviliansFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_CiviliansFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.285 )
	GUI_CiviliansFrameBtn:SetText( "" )
	GUI_CiviliansFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Licenses )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Licenses" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.LicensesMenu( )
	end
	
	local GUI_OfficialsManagementFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_OfficialsManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_OfficialsManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.3325 )
	GUI_OfficialsManagementFrameBtn:SetText( "" )
	GUI_OfficialsManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_OfficialsManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Officials" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OfficialsManagementFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.OfficialsMenu()
	end
	
	local GUI_CiviliansManagementFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_CiviliansManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.38 )
	GUI_CiviliansManagementFrameBtn:SetText( "" )
	GUI_CiviliansManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_CivilianManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Civilians" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansManagementFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.CiviliansMenu()
	end
	
	local GUI_WantedFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_WantedFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WantedFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.4275 )
	GUI_WantedFrameBtn:SetText( "" )
	GUI_WantedFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Wanted )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Wanted" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WantedFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.WantedMenu()
	end
	
	local GUI_WarrantFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_WarrantFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WarrantFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.475 )
	GUI_WarrantFrameBtn:SetText( "" )
	GUI_WarrantFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Warrant )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Warrant" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WarrantFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.WarrantMenu()
	end
	
	local GUI_AnnouncementFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_AnnouncementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_AnnouncementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.5225 )
	GUI_AnnouncementFrameBtn:SetText( "" )
	GUI_AnnouncementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Announcement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Announcement" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_AnnouncementFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.AnnouncementMenu()
	end
	
	local GUI_LockdownFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_LockdownFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LockdownFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.57 )
	GUI_LockdownFrameBtn:SetText( "" )
	GUI_LockdownFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Lockdown )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Lockdown" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LockdownFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.LockdownMenu()
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.6175 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Economy )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Statistics" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_LawsFrame:Remove()
		
		CH_Mayor.StatisticsMenu()
	end

	local GUI_LawsList = vgui.Create( "DPanelList", GUI_LawsFrame )
	GUI_LawsList:SetSize( CH_Mayor.ScrW * 0.491, CH_Mayor.ScrH * 0.467 )
	GUI_LawsList:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.095 )
	GUI_LawsList:EnableVerticalScrollbar( true )
	GUI_LawsList:EnableHorizontal( true )
	GUI_LawsList:SetSpacing( 8.4 )
	GUI_LawsList.Paint = function( self, w, h )
		draw.RoundedBox( 0, 0, 0, w, h, color_transparent )
	end
	if ( GUI_LawsList.VBar ) then
		GUI_LawsList.VBar.Paint = function( self, w, h ) -- BG
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_LawsList.VBar.btnUp.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_LawsList.VBar.btnGrip.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_LawsList.VBar.btnDown.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
	end
	
	for k, v in ipairs( CH_Mayor.Laws ) do
		local law = v
		
		local GUI_PlayerPanel = vgui.Create( "DPanelList" )
		GUI_PlayerPanel:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.04 )
		GUI_PlayerPanel.Paint = function( self, w, h )
			-- Background
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			-- Number
			draw.SimpleText( k, "CH_Mayor_Font_Size8", w * 0.0225, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Law
			if string.len( law ) > 75 then
				law = string.Left( law, 75 ) ..".."
			end
			draw.SimpleText( law, "CH_Mayor_Font_Size8", w * 0.0425, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		end

		local GUI_RemoveLawBtn = vgui.Create( "DButton", GUI_PlayerPanel )
		GUI_RemoveLawBtn:SetSize( CH_Mayor.ScrW * 0.05, CH_Mayor.ScrH * 0.03 )
		GUI_RemoveLawBtn:SetPos( CH_Mayor.ScrW * 0.408, CH_Mayor.ScrH * 0.005 )
		GUI_RemoveLawBtn:SetText( "" )
		GUI_RemoveLawBtn.Paint = function( self, w, h )
			if self:IsHovered() then
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( CH_Mayor.Colors.Red )
				surface.DrawRect( 0, 0, w, 1 )
				surface.DrawRect( 0, h-1, w, 1 )
				surface.DrawRect( w-1, 0, 1, h )
				surface.DrawRect( 0, 0, 1, h )
			else
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( CH_Mayor.Colors.Red )
				surface.DrawRect( 0, 0, 1, 10 )
				surface.DrawRect( 0, 0, 10, 1 )
				surface.DrawRect( 0, h-10, 1, 10 )
				surface.DrawRect( 0, h-1, 10, 1 )
				surface.DrawRect( w-1, 0, 1, 10 )
				surface.DrawRect( w-10, 0, 10, 1 )
				surface.DrawRect( w-1, h-10, 1, 10 )
				surface.DrawRect( w-10, h-1, 10, 1 )
			end
			draw.SimpleText( CH_Mayor.LangString( "Remove" ), "CH_Mayor_Font_Size8", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
		GUI_RemoveLawBtn.DoClick = function()
			ply:ConCommand( "say /removelaw ".. k )
			
			GUI_LawsFrame:Remove()
		end
		
		GUI_LawsList:AddItem( GUI_PlayerPanel )
	end
	
	local GUI_AddLawBtn = vgui.Create( "DButton", GUI_LawsFrame )
	GUI_AddLawBtn:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.0875 )
	GUI_AddLawBtn:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.57 )
	GUI_AddLawBtn:SetText( "" )
	GUI_AddLawBtn.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
		
			surface.SetDrawColor( CH_Mayor.Colors.Green )
			surface.DrawRect( 0, 0, w, 1 )
			surface.DrawRect( 0, h-1, w, 1 )
			surface.DrawRect( w-1, 0, 1, h )
			surface.DrawRect( 0, 0, 1, h )
		else
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			surface.SetDrawColor( CH_Mayor.Colors.Green )
			surface.DrawRect( 0, 0, 1, 10 )
			surface.DrawRect( 0, 0, 10, 1 )
			surface.DrawRect( 0, h-10, 1, 10 )
			surface.DrawRect( 0, h-1, 10, 1 )
			surface.DrawRect( w-1, 0, 1, 10 )
			surface.DrawRect( w-10, 0, 10, 1 )
			surface.DrawRect( w-1, h-10, 1, 10 )
			surface.DrawRect( w-10, h-1, 10, 1 )
		end

		draw.SimpleText( CH_Mayor.LangString( "Add Law" ), "CH_Mayor_Font_Size18", w / 2, h * 0.45, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_AddLawBtn.DoClick = function()
		CH_Mayor.AddLawMenu()
		
		GUI_LawsFrame:Remove()
	end
end

--[[
	ADD LAW MENU
--]]
function CH_Mayor.AddLawMenu()
	local ply = LocalPlayer()

	local GUI_AddLawFrame = vgui.Create( "DFrame" )
	GUI_AddLawFrame:SetTitle( "" )
	GUI_AddLawFrame:SetSize( CH_Mayor.ScrW * 0.23, CH_Mayor.ScrH * 0.2 )
	GUI_AddLawFrame:Center()
	GUI_AddLawFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, CH_Mayor.ScrH * 0.032 )

		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "Add Law" ), "CH_Mayor_Font_Size9", w / 2, CH_Mayor.ScrH * 0.015, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Criminal name
		draw.SimpleText( ply:Nick(), "CH_Mayor_Font_Size12", CH_Mayor.ScrW * 0.04, CH_Mayor.ScrH * 0.055, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( team.GetName( ply:Team() ), "CH_Mayor_Font_Size8", CH_Mayor.ScrW * 0.04, CH_Mayor.ScrH * 0.078, team.GetColor( ply:Team() ), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

		-- Warrant reason entry BG
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.1, CH_Mayor.ScrW * 0.221, CH_Mayor.ScrH * 0.04 )
	end
	GUI_AddLawFrame:MakePopup()
	GUI_AddLawFrame:SetDraggable( false )
	GUI_AddLawFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_AddLawFrame )
	GUI_CloseMenu:SetPos( CH_Mayor.ScrW * 0.2175, CH_Mayor.ScrH * 0.0085 )
	GUI_CloseMenu:SetSize( 16, 16 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.Red or color_white )
		surface.SetMaterial( CH_Mayor.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, 16, 16 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_AddLawFrame:Remove()
	end
	
	local GUI_GoBack = vgui.Create( "DButton", GUI_AddLawFrame )
	GUI_GoBack:SetPos( CH_Mayor.ScrW * 0.205, CH_Mayor.ScrH * 0.0085 )
	GUI_GoBack:SetSize( 16, 16 )
	GUI_GoBack:SetText( "" )
	GUI_GoBack.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or color_white )
		surface.SetMaterial( CH_Mayor.Materials.BackIcon )
		surface.DrawTexturedRect( 0, 0, 16, 16 )
	end
	GUI_GoBack.DoClick = function()
		CH_Mayor.LawsMenu()
		
		GUI_AddLawFrame:Remove()
	end

	local GUI_TeamModelSpawnI = vgui.Create( "SpawnIcon", GUI_AddLawFrame )
	GUI_TeamModelSpawnI:SetSize( CH_Mayor.ScrW * 0.03, CH_Mayor.ScrH * 0.051 )
	GUI_TeamModelSpawnI:SetPos( CH_Mayor.ScrW * 0.0055, CH_Mayor.ScrH * 0.04 )
	GUI_TeamModelSpawnI:SetModel( ply:GetModel() )
	GUI_TeamModelSpawnI:SetVisible( true )
	GUI_TeamModelSpawnI.PaintOver = function( self )
		EndTooltip( self )
	end
	GUI_TeamModelSpawnI.OnMousePressed = function()
		return
	end
	
	local GUI_NewLawField = vgui.Create( "DTextEntry", GUI_AddLawFrame )
	GUI_NewLawField:RequestFocus()
	GUI_NewLawField:SetPos( CH_Mayor.ScrW * 0.008, CH_Mayor.ScrH * 0.104 )
	GUI_NewLawField:SetSize( CH_Mayor.ScrW * 0.216, CH_Mayor.ScrH * 0.03 )
	GUI_NewLawField:SetFont( "CH_Mayor_Font_Size9" )
	GUI_NewLawField:SetTextColor( color_white )
	GUI_NewLawField:SetPlaceholderText( CH_Mayor.LangString( "Enter law" ) )
	GUI_NewLawField:SetAllowNonAsciiCharacters( CH_Mayor.Config.UsingSetAllowNonAsciiCharacters ) -- When allowing non-ASCII characters, a small box appears inside the text entry, indicating your keyboard's current language.  That makes the user unable to input some letters from German, French, Swedish, etc. alphabet. 
	GUI_NewLawField:SetMultiline( false )
	GUI_NewLawField:SetNumeric( false )
	GUI_NewLawField:SetDrawBackground( false )
	
	local GUI_AddLawBtn = vgui.Create( "DButton", GUI_AddLawFrame )
	GUI_AddLawBtn:SetSize( CH_Mayor.ScrW * 0.221, CH_Mayor.ScrH * 0.04 )
	GUI_AddLawBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.15 )
	GUI_AddLawBtn:SetText( "" )
	GUI_AddLawBtn.Paint = function( self, w, h )
		if self:IsHovered() then
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
		
			surface.SetDrawColor( CH_Mayor.Colors.Green )
			surface.DrawRect( 0, 0, w, 1 )
			surface.DrawRect( 0, h-1, w, 1 )
			surface.DrawRect( w-1, 0, 1, h )
			surface.DrawRect( 0, 0, 1, h )
		else
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			surface.SetDrawColor( CH_Mayor.Colors.Green )
			surface.DrawRect( 0, 0, 1, 10 )
			surface.DrawRect( 0, 0, 10, 1 )
			surface.DrawRect( 0, h-10, 1, 10 )
			surface.DrawRect( 0, h-1, 10, 1 )
			surface.DrawRect( w-1, 0, 1, 10 )
			surface.DrawRect( w-10, 0, 10, 1 )
			surface.DrawRect( w-1, h-10, 1, 10 )
			surface.DrawRect( w-10, h-1, 10, 1 )
		end
		
		draw.SimpleText( CH_Mayor.LangString( "Add Law" ), "CH_Mayor_Font_Size9", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_AddLawBtn.DoClick = function()
		local law = tostring( GUI_NewLawField:GetValue() )

		if not law or string.len( law ) < 1 then
			ply:ChatPrint( "You must supply a new law" )
			
			surface.PlaySound( "common/wpn_denyselect.wav" )
			return
		end
		
		ply:ConCommand( "say /addlaw ".. law )
		
		GUI_AddLawFrame:Remove()
	end
end
--addons/ch_mayor/lua/ch_adv_mayor/client/vgui/ch_mayor_menu_wanted.lua:
--[[
	MAYOR DASHBOARD MENU
--]]
function CH_Mayor.WantedMenu()
	local ply = LocalPlayer()

	local GUI_WantedFrame = vgui.Create( "DFrame" )
	GUI_WantedFrame:SetTitle( "" )
	GUI_WantedFrame:SetSize( CH_Mayor.ScrW * 0.6, CH_Mayor.ScrH * 0.665 )
	GUI_WantedFrame:Center()
	GUI_WantedFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mayor.LangString( "City Management" ), "CH_Mayor_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Draw titles
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( w * 0.182, h * 0.0724, w * 0.812, h * 0.06 )
		
		draw.SimpleText( "#", "CH_Mayor_Font_Size10", w * 0.2, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Citizen" ), "CH_Mayor_Font_Size10", w * 0.375, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Reason" ), "CH_Mayor_Font_Size10", w * 0.55, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mayor.LangString( "Action" ), "CH_Mayor_Font_Size10", w * 0.9, h * 0.1, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_WantedFrame:MakePopup()
	GUI_WantedFrame:SetDraggable( false )
	GUI_WantedFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_CloseMenu:SetPos( CH_Mayor.ScrW * 0.582, CH_Mayor.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.Red or color_white )
		surface.SetMaterial( CH_Mayor.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mayor.ScrW * 0.0125, CH_Mayor.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_WantedFrame:Remove()
	end
	
	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Dashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Dashboard" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.DashboardMenu()
	end

	local GUI_UpgradesFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_UpgradesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_UpgradesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.095 )
	GUI_UpgradesFrameBtn:SetText( "" )
	GUI_UpgradesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Upgrades )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Upgrades" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_UpgradesFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.UpgradesMenu()
	end
	
	local GUI_TaxesFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_TaxesFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_TaxesFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.1425 )
	GUI_TaxesFrameBtn:SetText( "" )
	GUI_TaxesFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Taxes )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Taxes" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TaxesFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.TaxesMenu()
	end

	local GUI_CatalogFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_CatalogFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CatalogFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.19 )
	GUI_CatalogFrameBtn:SetText( "" )
	GUI_CatalogFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Catalog )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Catalog" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CatalogFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.CatalogMenu()
	end
	
	local GUI_LawsFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_LawsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LawsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.2375 )
	GUI_LawsFrameBtn:SetText( "" )
	GUI_LawsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Laws )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Laws" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LawsFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.LawsMenu()
	end
	
	local GUI_WantedFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_WantedFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WantedFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.285 )
	GUI_WantedFrameBtn:SetText( "" )
	GUI_WantedFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Licenses )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Licenses" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WantedFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.LicensesMenu( )
	end
	
	local GUI_OfficialsManagementFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_OfficialsManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_OfficialsManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.3325 )
	GUI_OfficialsManagementFrameBtn:SetText( "" )
	GUI_OfficialsManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_OfficialsManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Officials" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OfficialsManagementFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.OfficialsMenu()
	end
	
	local GUI_CiviliansManagementFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_CiviliansManagementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_CiviliansManagementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.38 )
	GUI_CiviliansManagementFrameBtn:SetText( "" )
	GUI_CiviliansManagementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_CivilianManagement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Civilians" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CiviliansManagementFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.CiviliansMenu()
	end
	
	local GUI_WantedFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_WantedFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WantedFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.4275 )
	GUI_WantedFrameBtn:SetText( "" )
	GUI_WantedFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Wanted )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Wanted" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WantedFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.WantedMenu()
	end
	
	local GUI_WarrantFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_WarrantFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_WarrantFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.475 )
	GUI_WarrantFrameBtn:SetText( "" )
	GUI_WarrantFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Warrant )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Warrant" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_WarrantFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.WarrantMenu()
	end
	
	local GUI_AnnouncementFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_AnnouncementFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_AnnouncementFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.5225 )
	GUI_AnnouncementFrameBtn:SetText( "" )
	GUI_AnnouncementFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Announcement )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Announcement" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_AnnouncementFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.AnnouncementMenu()
	end
	
	local GUI_LockdownFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_LockdownFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_LockdownFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.57 )
	GUI_LockdownFrameBtn:SetText( "" )
	GUI_LockdownFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Lockdown )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Lockdown" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LockdownFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.LockdownMenu()
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_WantedFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mayor.ScrW * 0.1, CH_Mayor.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mayor.ScrW * 0.005, CH_Mayor.ScrH * 0.6175 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mayor.Colors.GMSBlue or CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Economy )
		surface.DrawTexturedRect( w * 0.065, h * 0.18, CH_Mayor.ScrW * 0.014065, CH_Mayor.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mayor.LangString( "Statistics" ), "CH_Mayor_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_WantedFrame:Remove()
		
		CH_Mayor.StatisticsMenu()
	end
	
	-- The list of players
	local total_players = player.GetCount()
	local wanted_players = {}
	
	for k, v in ipairs( player.GetAll() ) do
		if v:isWanted() then
			table.insert( wanted_players, v )
		end
	end
	
	local GUI_PlayerList = vgui.Create( "DPanelList", GUI_WantedFrame )
	GUI_PlayerList:SetSize( CH_Mayor.ScrW * 0.491, CH_Mayor.ScrH * 0.563 )
	GUI_PlayerList:SetPos( CH_Mayor.ScrW * 0.109, CH_Mayor.ScrH * 0.095 )
	GUI_PlayerList:EnableVerticalScrollbar( true )
	GUI_PlayerList:EnableHorizontal( true )
	GUI_PlayerList:SetSpacing( 8.4 )
	GUI_PlayerList.Paint = function( self, w, h )
		draw.RoundedBox( 0, 0, 0, w, h, color_transparent )
	end
	if ( GUI_PlayerList.VBar ) then
		GUI_PlayerList.VBar.Paint = function( self, w, h ) -- BG
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_PlayerList.VBar.btnUp.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_PlayerList.VBar.btnGrip.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_PlayerList.VBar.btnDown.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
	end
	
	for k, v in ipairs( wanted_players ) do
		local reason = v:getWantedReason()
		
		local GUI_PlayerPanel = vgui.Create( "DPanelList" )
		GUI_PlayerPanel:SetSize( CH_Mayor.ScrW * 0.487, CH_Mayor.ScrH * 0.04 )
		GUI_PlayerPanel.Paint = function( self, w, h )
			-- Background
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			if total_players <= 13 then
				surface.DrawRect( 0, 0, w, h )
			else
				surface.DrawRect( 0, 0, w * 0.986, h )
			end
			
			-- Number
			draw.SimpleText( k, "CH_Mayor_Font_Size8", w * 0.0225, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Name
			draw.SimpleText( v:Nick(), "CH_Mayor_Font_Size8", w * 0.241, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Reason
			if string.len( reason ) > 38 then
				reason = string.Left( reason, 38 ) ..".."
			end
			draw.SimpleText( reason, "CH_Mayor_Font_Size8", w * 0.455, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
			
		local GUI_RemoveWantedBtn = vgui.Create( "DButton", GUI_PlayerPanel )
		GUI_RemoveWantedBtn:SetSize( CH_Mayor.ScrW * 0.05, CH_Mayor.ScrH * 0.03 )
		GUI_RemoveWantedBtn:SetPos( CH_Mayor.ScrW * 0.408, CH_Mayor.ScrH * 0.005 )
		GUI_RemoveWantedBtn:SetText( "" )
		GUI_RemoveWantedBtn.Paint = function( self, w, h )
			if self:IsHovered() then
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( CH_Mayor.Colors.Red )
				surface.DrawRect( 0, 0, w, 1 )
				surface.DrawRect( 0, h-1, w, 1 )
				surface.DrawRect( w-1, 0, 1, h )
				surface.DrawRect( 0, 0, 1, h )
			else
				surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
				surface.DrawRect( 0, 0, w, h )
				
				surface.SetDrawColor( CH_Mayor.Colors.Red )
				surface.DrawRect( 0, 0, 1, 10 )
				surface.DrawRect( 0, 0, 10, 1 )
				surface.DrawRect( 0, h-10, 1, 10 )
				surface.DrawRect( 0, h-1, 10, 1 )
				surface.DrawRect( w-1, 0, 1, 10 )
				surface.DrawRect( w-10, 0, 10, 1 )
				surface.DrawRect( w-1, h-10, 1, 10 )
				surface.DrawRect( w-10, h-1, 10, 1 )
			end
			
			draw.SimpleText( CH_Mayor.LangString( "Cancel" ), "CH_Mayor_Font_Size8", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		end
		GUI_RemoveWantedBtn.DoClick = function()
			net.Start( "CH_Mayor_Net_MakeUnwanted" )
				net.WriteEntity( v )
			net.SendToServer()
			
			GUI_WantedFrame:Remove()
		end
		
		GUI_PlayerList:AddItem( GUI_PlayerPanel )
	end
end
--addons/ch_mining/lua/ch_mining/shared/ch_mining_utils.lua:
--[[
	Language functions
--]]
function CH_Mining.LangString( text )
	local translation = text .." (Translation missing)"
	local lang = CH_Mining.Config.Language or "en"
	
	if CH_Mining.Config.Lang[ text ] then
		translation = CH_Mining.Config.Lang[ text ][ lang ]
	end
	
	return translation
end

--[[
	A range of currency functions
--]]
local function CH_Mining_GetCurrency()
	return CH_Mining.Config.Currency or "darkrp"
end

function CH_Mining.AddMoney( ply, amount )
	CH_Mining.Currencies[ CH_Mining_GetCurrency() ].AddMoney( ply, amount )
end

function CH_Mining.TakeMoney( ply, amount )
	CH_Mining.Currencies[ CH_Mining_GetCurrency() ].TakeMoney( ply, amount )
end

function CH_Mining.GetMoney( ply )
	return CH_Mining.Currencies[ CH_Mining_GetCurrency() ].GetMoney( ply )
end

function CH_Mining.CanAfford( ply, amount )
	return CH_Mining.Currencies[ CH_Mining_GetCurrency() ].CanAfford( ply, amount )
end

function CH_Mining.FormatMoney( amount )
	return CH_Mining.Currencies[ CH_Mining_GetCurrency() ].FormatMoney( amount )
end
--addons/ch_mining/lua/ch_mining/shared/currencies/helix.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/client/ch_mining_prices.lua:
CH_Mining.MineralPrices = CH_Mining.MineralPrices or {}

--[[
	Receive information about mineral prices on client
--]]
net.Receive( "CH_Mining_Net_MineralPrices", function( length, ply )
	local amount_of_entries = net.ReadUInt( 4 )
	
	for i = 1, amount_of_entries do
		local name = net.ReadString()
		local price = net.ReadDouble()
		local change = net.ReadDouble()
		
		CH_Mining.MineralPrices[ name ] = {
			Name = name,
			Price = price,
			Change = change,
		}
	end
end )
--addons/ch_mining/lua/ch_mining/client/ch_mining_skills.lua:
net.Receive( "CH_Mining_Net_PlayerSkills", function( length, ply )
	-- Setup their inventory clientside
	local ply = LocalPlayer()
	
	ply.CH_Mining_Skills = {
		["Points"] = net.ReadUInt( 10 ),
		["Capacity"] = net.ReadUInt( 10 ),
		["Extraction"] = net.ReadUInt( 10 ),
		["Experience"] = net.ReadUInt( 10 ),
		["Speed"] = net.ReadUInt( 10 ),
		["Payout"] = net.ReadUInt( 10 ),
		["Chance"] = net.ReadUInt( 10 ),
	}
end )
--addons/ch_mining/lua/ch_mining/client/vgui/ch_mining_menu_dashboard.lua:
return gluapack()()
--addons/ch_mining/lua/ch_mining/client/vgui/ch_mining_menu_leaderboards.lua:
--[[
	MINING MENU
--]]
function CH_Mining.LeaderboardsMenu( leaderboard )
	local ply = LocalPlayer()

	local GUI_LeaderboardsFrame = vgui.Create( "DFrame" )
	GUI_LeaderboardsFrame:SetTitle( "" )
	GUI_LeaderboardsFrame:SetSize( CH_Mining.ScrW * 0.6, CH_Mining.ScrH * 0.6875 )
	GUI_LeaderboardsFrame:Center()
	GUI_LeaderboardsFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mining.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mining.LangString( "Leaderboards" ), "CH_Mining_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		--[[ Draw title of list
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( w * 0.182, h * 0.07, w * 0.812, h * 0.059 )
		
		draw.SimpleText( CH_Mining.LangString( "Mineral Sold" ), "CH_Mining_Font_Size10", w * 0.245, h * 0.095, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mining.LangString( "Amount" ), "CH_Mining_Font_Size10", w * 0.421, h * 0.095, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mining.LangString( "Earnings" ), "CH_Mining_Font_Size10", w * 0.58, h * 0.095, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		draw.SimpleText( CH_Mining.LangString( "Timestamp" ), "CH_Mining_Font_Size10", w * 0.72, h * 0.095, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		--]]
	end
	GUI_LeaderboardsFrame:MakePopup()
	GUI_LeaderboardsFrame:SetDraggable( false )
	GUI_LeaderboardsFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_CloseMenu:SetPos( CH_Mining.ScrW * 0.582, CH_Mining.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( 24, 24 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.Red or color_white )
		surface.SetMaterial( CH_Mining.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mining.ScrW * 0.0125, CH_Mining.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
	end
	
	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuDashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Dashboard" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.DashboardMenu()
	end

	local GUI_InventoryFrameBtn = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_InventoryFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_InventoryFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.095 )
	GUI_InventoryFrameBtn:SetText( "" )
	GUI_InventoryFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuInventory )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Inventory" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_InventoryFrameBtn.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.InventoryMenu()
	end
	
	local GUI_SkillsFrameBtn = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_SkillsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_SkillsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.1425 )
	GUI_SkillsFrameBtn:SetText( "" )
	GUI_SkillsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuSkills )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Skills" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_SkillsFrameBtn.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.SkillsMenu()
	end

	local GUI_CraftingFrameBtn = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_CraftingFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_CraftingFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.19 )
	GUI_CraftingFrameBtn:SetText( "" )
	GUI_CraftingFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuCrafting )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Crafting" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CraftingFrameBtn.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.CraftingMenu()
	end
	
	local GUI_TransactionsFrameBtn = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_TransactionsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_TransactionsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.2375 )
	GUI_TransactionsFrameBtn:SetText( "" )
	GUI_TransactionsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuTransactions )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Transactions" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TransactionsFrameBtn.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.TransactionsMenu()
	end
	
	local GUI_LeaderboardsFrameBtn = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_LeaderboardsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_LeaderboardsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.285 )
	GUI_LeaderboardsFrameBtn:SetText( "" )
	GUI_LeaderboardsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )
		
		surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuLeaderboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Leaderboards" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LeaderboardsFrameBtn.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.LeaderboardsMenu( "MineralsMined" )
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.3325 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuStats )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Statistics" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.StatsMenu()
	end
	
	local GUI_OptionsFrameBtn = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_OptionsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_OptionsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.38 )
	GUI_OptionsFrameBtn:SetText( "" )
	GUI_OptionsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuOptions )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Options" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OptionsFrameBtn.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.OptionsMenu()
	end
	
	-- Select leaderboard buttons
	local GUI_Board_MineralsMined = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_Board_MineralsMined:SetSize( CH_Mining.ScrW * 0.0775, CH_Mining.ScrH * 0.04 )
	GUI_Board_MineralsMined:SetPos( CH_Mining.ScrW * 0.109, CH_Mining.ScrH * 0.0475 )
	GUI_Board_MineralsMined:SetText( "" )
	GUI_Board_MineralsMined.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )
		
		if leaderboard == "MineralsMined" then
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, h - 2, w, 2 )
		end
		
		draw.SimpleText( CH_Mining.LangString( "Minerals Mined" ), "CH_Mining_Font_Size8", w / 2, h * 0.475, ( leaderboard == "MineralsMined" ) and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_Board_MineralsMined.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.LeaderboardsMenu( "MineralsMined" )
	end
	
	local GUI_Board_MineralsMined = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_Board_MineralsMined:SetSize( CH_Mining.ScrW * 0.0775, CH_Mining.ScrH * 0.04 )
	GUI_Board_MineralsMined:SetPos( CH_Mining.ScrW * 0.191, CH_Mining.ScrH * 0.0475 )
	GUI_Board_MineralsMined:SetText( "" )
	GUI_Board_MineralsMined.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		if leaderboard == "RocksDestroyed" then
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, h - 2, w, 2 )
		end
		
		draw.SimpleText( CH_Mining.LangString( "Rocks Destroyed" ), "CH_Mining_Font_Size8", w / 2, h * 0.475, ( leaderboard == "RocksDestroyed" or self:IsHovered() ) and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_Board_MineralsMined.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.LeaderboardsMenu( "RocksDestroyed" )
	end
	
	local GUI_Board_MineralsMined = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_Board_MineralsMined:SetSize( CH_Mining.ScrW * 0.0775, CH_Mining.ScrH * 0.04 )
	GUI_Board_MineralsMined:SetPos( CH_Mining.ScrW * 0.2725, CH_Mining.ScrH * 0.0475 )
	GUI_Board_MineralsMined:SetText( "" )
	GUI_Board_MineralsMined.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		if leaderboard == "RocksEmptied" then
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, h - 2, w, 2 )
		end
		
		draw.SimpleText( CH_Mining.LangString( "Rocks Emptied" ), "CH_Mining_Font_Size8", w / 2, h * 0.475, ( leaderboard == "RocksEmptied" or self:IsHovered()) and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_Board_MineralsMined.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.LeaderboardsMenu( "RocksEmptied" )
	end
	
	local GUI_Board_MineralsMined = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_Board_MineralsMined:SetSize( CH_Mining.ScrW * 0.0775, CH_Mining.ScrH * 0.04 )
	GUI_Board_MineralsMined:SetPos( CH_Mining.ScrW * 0.3545, CH_Mining.ScrH * 0.0475 )
	GUI_Board_MineralsMined:SetText( "" )
	GUI_Board_MineralsMined.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		if leaderboard == "MineralsSold" then
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, h - 2, w, 2 )
		end
		
		draw.SimpleText( CH_Mining.LangString( "Minerals Sold" ), "CH_Mining_Font_Size8", w / 2, h * 0.475, ( leaderboard == "MineralsSold" or self:IsHovered() ) and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_Board_MineralsMined.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.LeaderboardsMenu( "MineralsSold" )
	end
	
	local GUI_Board_MineralsMined = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_Board_MineralsMined:SetSize( CH_Mining.ScrW * 0.0775, CH_Mining.ScrH * 0.04 )
	GUI_Board_MineralsMined:SetPos( CH_Mining.ScrW * 0.436, CH_Mining.ScrH * 0.0475 )
	GUI_Board_MineralsMined:SetText( "" )
	GUI_Board_MineralsMined.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		if leaderboard == "MoneyEarned" then
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, h - 2, w, 2 )
		end
		
		draw.SimpleText( CH_Mining.LangString( "Money Earned" ), "CH_Mining_Font_Size8", w / 2, h * 0.475, ( leaderboard == "MoneyEarned" or self:IsHovered() ) and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_Board_MineralsMined.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.LeaderboardsMenu( "MoneyEarned" )
	end
	
	local GUI_Board_MineralsMined = vgui.Create( "DButton", GUI_LeaderboardsFrame )
	GUI_Board_MineralsMined:SetSize( CH_Mining.ScrW * 0.0775, CH_Mining.ScrH * 0.04 )
	GUI_Board_MineralsMined:SetPos( CH_Mining.ScrW * 0.518, CH_Mining.ScrH * 0.0475 )
	GUI_Board_MineralsMined:SetText( "" )
	GUI_Board_MineralsMined.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		if leaderboard == "ItemsCrafted" then
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, h - 2, w, 2 )
		end
		
		draw.SimpleText( CH_Mining.LangString( "Items Crafted" ), "CH_Mining_Font_Size8", w / 2, h * 0.475, ( leaderboard == "ItemsCrafted" or self:IsHovered() ) and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_Board_MineralsMined.DoClick = function()
		GUI_LeaderboardsFrame:Remove()
		
		CH_Mining.LeaderboardsMenu( "ItemsCrafted" )
	end
	
	-- The leaderboard
	local GUI_LeaderboardsList = vgui.Create( "DPanelList", GUI_LeaderboardsFrame )
	GUI_LeaderboardsList:SetSize( CH_Mining.ScrW * 0.491, CH_Mining.ScrH * 0.585 )
	GUI_LeaderboardsList:SetPos( CH_Mining.ScrW * 0.109, CH_Mining.ScrH * 0.095 )
	GUI_LeaderboardsList:EnableVerticalScrollbar( true )
	GUI_LeaderboardsList:EnableHorizontal( true )
	GUI_LeaderboardsList:SetSpacing( 8.5 )
	GUI_LeaderboardsList.Paint = function( self, w, h )
		draw.RoundedBox( 0, 0, 0, w, h, color_transparent )
	end
	if ( GUI_LeaderboardsList.VBar ) then
		GUI_LeaderboardsList.VBar.Paint = function( self, w, h ) -- BG
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_LeaderboardsList.VBar.btnUp.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_LeaderboardsList.VBar.btnGrip.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 7, h )
		end
		
		GUI_LeaderboardsList.VBar.btnDown.Paint = function( self, w, h )
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, 7, h )
		end
	end
	
	-- We have no leaderboards to show :(
	if not CH_Mining.Leaderboards[ leaderboard ] then
		return
	end
	
	for number, lead in ipairs( CH_Mining.Leaderboards[ leaderboard ] ) do
		if lead then
			local GUI_TransactionPanel = vgui.Create( "DPanelList" )
			GUI_TransactionPanel:SetSize( CH_Mining.ScrW * 0.48, CH_Mining.ScrH * 0.04 )
			GUI_TransactionPanel.Paint = function( self, w, h )
				-- Background
				surface.SetDrawColor( CH_Mining.Colors.GrayBG )
				surface.DrawRect( 0, 0, w, h )

				-- Place
				if number == 1 then
					surface.SetDrawColor( color_white )
					surface.SetMaterial( CH_Mining.Materials.LeaderboardFirst )
					surface.DrawTexturedRect( w * 0.03, h * 0.14, CH_Mining.ScrW * 0.01667, CH_Mining.ScrH * 0.02963 )
				elseif number == 2 then
					surface.SetDrawColor( color_white )
					surface.SetMaterial( CH_Mining.Materials.LeaderboardSecond )
					surface.DrawTexturedRect( w * 0.03, h * 0.14, CH_Mining.ScrW * 0.01667, CH_Mining.ScrH * 0.02963 )
				elseif number == 3 then
					surface.SetDrawColor( color_white )
					surface.SetMaterial( CH_Mining.Materials.LeaderboardThird )
					surface.DrawTexturedRect( w * 0.03, h * 0.14, CH_Mining.ScrW * 0.01667, CH_Mining.ScrH * 0.02963 )
				else
					draw.SimpleText( "#".. number, "CH_Mining_Font_Size9", w * 0.035, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
				end
				
				-- Name
				draw.SimpleText( lead.Name, "CH_Mining_Font_Size9", w * 0.175, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

				-- Amount
				if leaderboard == "MoneyEarned" then
					draw.SimpleText( CH_Mining.FormatMoney( lead.Amount ), "CH_Mining_Font_Size9", w * 0.52, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
				elseif leaderboard == "RocksDestroyed" or leaderboard == "RocksEmptied" then
					draw.SimpleText( string.Comma( lead.Amount ) .." ".. CH_Mining.LangString( "rocks" ), "CH_Mining_Font_Size9", w * 0.52, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
				elseif leaderboard == "ItemsCrafted" then
					draw.SimpleText( string.Comma( lead.Amount ) .." ".. CH_Mining.LangString( "items" ), "CH_Mining_Font_Size9", w * 0.52, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
				else
					draw.SimpleText( string.Comma( lead.Amount ) .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size9", w * 0.52, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
				end
			end

			GUI_LeaderboardsList:AddItem( GUI_TransactionPanel )
		end
	end
end
--addons/ch_mining/lua/ch_mining/client/vgui/ch_mining_menu_send.lua:
--[[
	SEND MINERALS MENU
--]]
function CH_Mining.SendMineralMenu( mineral_to_send )
	local mineral_info = CH_Mining.Rocks[ mineral_to_send ]
	local mineral_prices = CH_Mining.MineralPrices[ mineral_to_send ]
	
	local ply = LocalPlayer()
	local player_money = CH_Mining.GetMoney( ply )
	local player_owns = ply.CH_Mining_Inventory[ mineral_to_send ]
	
	local mineral_amount_to_send = 0
	local mineral_amount_to_usd = 0
	
	local GUI_SelectedPlayer_Text = CH_Mining.LangString( "Select Player" )
	local SelectedPlayer = nil
	
	local GUI_SendMineralsFrame = vgui.Create( "DFrame" )
	GUI_SendMineralsFrame:SetTitle( "" )
	GUI_SendMineralsFrame:SetSize( CH_Mining.ScrW * 0.23, CH_Mining.ScrH * 0.278 )
	GUI_SendMineralsFrame:Center()
	GUI_SendMineralsFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mining.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.12 )

		-- Draw the top title.
		draw.SimpleText( CH_Mining.LangString( "Send" ) .." ".. CH_Mining.LangString( mineral_info.Name ), "CH_Mining_Font_Size9", w / 2, CH_Mining.ScrH * 0.015, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Icon
		surface.SetDrawColor( mineral_info.Color )
		surface.SetMaterial( CH_Mining.Materials.Diamond )
		surface.DrawTexturedRect( CH_Mining.ScrW * 0.008, h * 0.1725, 50, 50 )
		
		-- Mineral name
		draw.SimpleText( CH_Mining.LangString( mineral_info.Name ), "CH_Mining_Font_Size9", CH_Mining.ScrW * 0.04, CH_Mining.ScrH * 0.06, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		surface.SetFont( "CH_Mining_Font_Size9" )
		local x, y = surface.GetTextSize( CH_Mining.FormatMoney( mineral_prices.Price ) )
		
		draw.SimpleText( CH_Mining.FormatMoney( mineral_prices.Price ), "CH_Mining_Font_Size9", CH_Mining.ScrW * 0.04, CH_Mining.ScrH * 0.08, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		--Left Text Entry BG
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.1325, CH_Mining.ScrW * 0.093, CH_Mining.ScrH * 0.04 )
		
		draw.SimpleText( player_owns .." ".. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size8", CH_Mining.ScrW * 0.0045, CH_Mining.ScrH * 0.12, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

		--Right Text Entry BG
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( w * 0.58, CH_Mining.ScrH * 0.1325, CH_Mining.ScrW * 0.093, CH_Mining.ScrH * 0.04 )
		
		draw.SimpleText( CH_Mining.FormatMoney( player_money ), "CH_Mining_Font_Size8", w * 0.975, CH_Mining.ScrH * 0.12, CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
		draw.SimpleText( CH_Mining.FormatMoney( mineral_amount_to_usd ), "CH_Mining_Font_Size10", w * 0.59, CH_Mining.ScrH * 0.151, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		-- Exchange Icon
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.ArrowExchangeIcon )
		surface.DrawTexturedRect( w / 2 - 16, CH_Mining.ScrH * 0.1375, 32, 32 )
	end
	GUI_SendMineralsFrame:MakePopup()
	GUI_SendMineralsFrame:SetDraggable( false )
	GUI_SendMineralsFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_SendMineralsFrame )
	GUI_CloseMenu:SetPos( CH_Mining.ScrW * 0.2175, CH_Mining.ScrH * 0.0085 )
	GUI_CloseMenu:SetSize( 16, 16 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.Red or color_white )
		surface.SetMaterial( CH_Mining.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, 16, 16 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_SendMineralsFrame:Remove()
	end
	
	local GUI_GoBack = vgui.Create( "DButton", GUI_SendMineralsFrame )
	GUI_GoBack:SetPos( CH_Mining.ScrW * 0.205, CH_Mining.ScrH * 0.0085 )
	GUI_GoBack:SetSize( 16, 16 )
	GUI_GoBack:SetText( "" )
	GUI_GoBack.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or color_white )
		surface.SetMaterial( CH_Mining.Materials.BackIcon )
		surface.DrawTexturedRect( 0, 0, 16, 16 )
	end
	GUI_GoBack.DoClick = function()
		CH_Mining.InventoryMenu()
		
		GUI_SendMineralsFrame:Remove()
	end
	
	local GUI_TextField = vgui.Create( "DTextEntry", GUI_SendMineralsFrame )
	GUI_TextField:RequestFocus()
	GUI_TextField:SetPos( CH_Mining.ScrW * 0.008, CH_Mining.ScrH * 0.137 )
	GUI_TextField:SetSize( CH_Mining.ScrW * 0.08, CH_Mining.ScrH * 0.03 )
	GUI_TextField:SetFont( "CH_Mining_Font_Size10" )
	GUI_TextField:SetTextColor( color_white )
	GUI_TextField:SetPlaceholderText( "0" )
	GUI_TextField:SetAllowNonAsciiCharacters( false ) -- When allowing non-ASCII characters, a small box appears inside the text entry, indicating your keyboard's current language.  That makes the user unable to input some letters from German, French, Swedish, etc. alphabet. 
	GUI_TextField:SetMultiline( false )
	GUI_TextField:SetNumeric( true )
	GUI_TextField:SetDrawBackground( false )
	GUI_TextField.OnChange = function( self )
		if not tonumber( self:GetValue() ) then
			return
		end
		
		if tonumber( self:GetValue() ) > player_owns then
			self:SetText( player_owns )
		end

		mineral_amount_to_send = math.Round( self:GetValue() )
		mineral_amount_to_usd = math.Round( self:GetValue() * mineral_prices.Price )
	end
	
	local GUI_AutoFillButton = vgui.Create( "DButton", GUI_SendMineralsFrame )
	GUI_AutoFillButton:SetPos( CH_Mining.ScrW * 0.0875, CH_Mining.ScrH * 0.1125 )
	GUI_AutoFillButton:SetSize( 20, 20 )
	GUI_AutoFillButton:SetText( "" )
	GUI_AutoFillButton.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.Green or color_white )
		surface.SetMaterial( CH_Mining.Materials.AutoFillIcon )
		surface.DrawTexturedRect( 0, 0, 20, 20 )
	end
	GUI_AutoFillButton.DoClick = function()
		GUI_TextField:SetText( player_owns )
		GUI_TextField.OnChange( GUI_TextField )
	end
	
	local GUI_SelectPlayer = vgui.Create( "DComboBox", GUI_SendMineralsFrame )
	GUI_SelectPlayer:SetSize( CH_Mining.ScrW * 0.221, CH_Mining.ScrH * 0.04 )
	GUI_SelectPlayer:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.1815 )
	GUI_SelectPlayer:SetValue( "" )
	GUI_SelectPlayer.OnSelect = function( index, text, data )
		GUI_SelectedPlayer_Text = data
		GUI_SelectPlayer:SetValue( "" )
	end
	for k, v in ipairs( player.GetAll() ) do
		if ply != v then
			GUI_SelectPlayer:AddChoice( v:Nick() )
		end
	end
	GUI_SelectPlayer.Paint = function( self, w, h )
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		draw.SimpleText( GUI_SelectedPlayer_Text, "CH_Mining_Font_Size8", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	
	local GUI_SendMineralsBtn = vgui.Create( "DButton", GUI_SendMineralsFrame )
	GUI_SendMineralsBtn:SetSize( CH_Mining.ScrW * 0.221, CH_Mining.ScrH * 0.04 )
	GUI_SendMineralsBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.23 )
	GUI_SendMineralsBtn:SetText( "" )
	GUI_SendMineralsBtn.Paint = function( self, w, h )
		if self:IsHovered() and mineral_amount_to_send > 0 then
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
		
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, 0, w, 1 )
			surface.DrawRect( 0, h-1, w, 1 )
			surface.DrawRect( w-1, 0, 1, h )
			surface.DrawRect( 0, 0, 1, h )
		else
			surface.SetDrawColor( CH_Mining.Colors.GrayBG )
			surface.DrawRect( 0, 0, w, h )
			
			surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
			surface.DrawRect( 0, 0, 1, 10 )
			surface.DrawRect( 0, 0, 10, 1 )
			surface.DrawRect( 0, h-10, 1, 10 )
			surface.DrawRect( 0, h-1, 10, 1 )
			surface.DrawRect( w-1, 0, 1, 10 )
			surface.DrawRect( w-10, 0, 10, 1 )
			surface.DrawRect( w-1, h-10, 1, 10 )
			surface.DrawRect( w-10, h-1, 10, 1 )
		end
		
		draw.SimpleText( CH_Mining.LangString( "Send Minerals" ), "CH_Mining_Font_Size8", w / 2, h / 2, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_SendMineralsBtn.DoClick = function()
		-- First we need to find the player by looping through all players.
		for k, v in ipairs( player.GetAll() ) do
			if v:Nick() == GUI_SelectedPlayer_Text then
				SelectedPlayer = v
				break
			end
		end
		
		if not SelectedPlayer then
			return
		end
		if mineral_amount_to_send <= 0 then
			return
		end
		
		net.Start( "CH_Mining_Net_SendMinerals" )
			net.WriteString( mineral_to_send )
			net.WriteDouble( mineral_amount_to_send )
			net.WriteEntity( SelectedPlayer )
		net.SendToServer()
		
		GUI_SendMineralsFrame:Remove()
	end
end
--addons/ch_mining/lua/ch_mining/client/vgui/ch_mining_menu_stats.lua:
--[[
	STATS MENU
--]]
function CH_Mining.StatsMenu()
	local ply = LocalPlayer()

	local GUI_StatisticsFrame = vgui.Create( "DFrame" )
	GUI_StatisticsFrame:SetTitle( "" )
	GUI_StatisticsFrame:SetSize( CH_Mining.ScrW * 0.6, CH_Mining.ScrH * 0.6875 )
	GUI_StatisticsFrame:Center()
	GUI_StatisticsFrame.Paint = function( self, w, h )
		-- Draw frame
		surface.SetDrawColor( CH_Mining.Colors.GrayFront )
		surface.DrawRect( 0, 0, w, h )
		
		-- Draw top
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.059 )
		
		-- Draw the top title.
		draw.SimpleText( CH_Mining.LangString( "Statistics" ), "CH_Mining_Font_Size10", w / 2, h * 0.03, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	end
	GUI_StatisticsFrame:MakePopup()
	GUI_StatisticsFrame:SetDraggable( false )
	GUI_StatisticsFrame:ShowCloseButton( false )
	
	local GUI_CloseMenu = vgui.Create( "DButton", GUI_StatisticsFrame )
	GUI_CloseMenu:SetPos( CH_Mining.ScrW * 0.582, CH_Mining.ScrH * 0.01 )
	GUI_CloseMenu:SetSize( 24, 24 )
	GUI_CloseMenu:SetText( "" )
	GUI_CloseMenu.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.Red or color_white )
		surface.SetMaterial( CH_Mining.Materials.CloseIcon )
		surface.DrawTexturedRect( 0, 0, CH_Mining.ScrW * 0.0125, CH_Mining.ScrH * 0.02223 )
	end
	GUI_CloseMenu.DoClick = function()
		GUI_StatisticsFrame:Remove()
	end
	
	local GUI_DashboardFrameBtn = vgui.Create( "DButton", GUI_StatisticsFrame )
	GUI_DashboardFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_DashboardFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.0475 )
	GUI_DashboardFrameBtn:SetText( "" )
	GUI_DashboardFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuDashboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Dashboard" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_DashboardFrameBtn.DoClick = function()
		GUI_StatisticsFrame:Remove()
		
		CH_Mining.DashboardMenu()
	end

	local GUI_InventoryFrameBtn = vgui.Create( "DButton", GUI_StatisticsFrame )
	GUI_InventoryFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_InventoryFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.095 )
	GUI_InventoryFrameBtn:SetText( "" )
	GUI_InventoryFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuInventory )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Inventory" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_InventoryFrameBtn.DoClick = function()
		GUI_StatisticsFrame:Remove()
		
		CH_Mining.InventoryMenu()
	end
	
	local GUI_SkillsFrameBtn = vgui.Create( "DButton", GUI_StatisticsFrame )
	GUI_SkillsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_SkillsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.1425 )
	GUI_SkillsFrameBtn:SetText( "" )
	GUI_SkillsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuSkills )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Skills" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_SkillsFrameBtn.DoClick = function()
		GUI_StatisticsFrame:Remove()
		
		CH_Mining.SkillsMenu()
	end

	local GUI_CraftingFrameBtn = vgui.Create( "DButton", GUI_StatisticsFrame )
	GUI_CraftingFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_CraftingFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.19 )
	GUI_CraftingFrameBtn:SetText( "" )
	GUI_CraftingFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuCrafting )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Crafting" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_CraftingFrameBtn.DoClick = function()
		GUI_StatisticsFrame:Remove()
		
		CH_Mining.CraftingMenu()
	end
	
	local GUI_TransactionsFrameBtn = vgui.Create( "DButton", GUI_StatisticsFrame )
	GUI_TransactionsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_TransactionsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.2375 )
	GUI_TransactionsFrameBtn:SetText( "" )
	GUI_TransactionsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuTransactions )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Transactions" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_TransactionsFrameBtn.DoClick = function()
		GUI_StatisticsFrame:Remove()
		
		CH_Mining.TransactionsMenu()
	end
	
	local GUI_LeaderboardsFrameBtn = vgui.Create( "DButton", GUI_StatisticsFrame )
	GUI_LeaderboardsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_LeaderboardsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.285 )
	GUI_LeaderboardsFrameBtn:SetText( "" )
	GUI_LeaderboardsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuLeaderboard )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Leaderboards" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_LeaderboardsFrameBtn.DoClick = function()
		GUI_StatisticsFrame:Remove()
		
		CH_Mining.LeaderboardsMenu( "MineralsMined" )
	end
	
	local GUI_StatsFrameBtn = vgui.Create( "DButton", GUI_StatisticsFrame )
	GUI_StatsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_StatsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.3325 )
	GUI_StatsFrameBtn:SetText( "" )
	GUI_StatsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )
		
		surface.SetDrawColor( CH_Mining.Colors.GMSBlue )
		surface.DrawRect( 0, 0, 2, h )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuStats )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Statistics" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_StatsFrameBtn.DoClick = function()
		GUI_StatisticsFrame:Remove()
		
		CH_Mining.StatsMenu()
	end
	
	local GUI_OptionsFrameBtn = vgui.Create( "DButton", GUI_StatisticsFrame )
	GUI_OptionsFrameBtn:SetSize( CH_Mining.ScrW * 0.1, CH_Mining.ScrH * 0.04 )
	GUI_OptionsFrameBtn:SetPos( CH_Mining.ScrW * 0.005, CH_Mining.ScrH * 0.38 )
	GUI_OptionsFrameBtn:SetText( "" )
	GUI_OptionsFrameBtn.Paint = function( self, w, h )
		surface.SetDrawColor( self:IsHovered() and CH_Mining.Colors.GMSBlue or CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.MenuOptions )
		surface.DrawTexturedRect( w * 0.065, h * 0.2, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )
		
		draw.SimpleText( CH_Mining.LangString( "Options" ), "CH_Mining_Font_Size9", w * 0.25, h / 2, self:IsHovered() and color_white or CH_Mining.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
	end
	GUI_OptionsFrameBtn.DoClick = function()
		GUI_StatisticsFrame:Remove()
		
		CH_Mining.OptionsMenu()
	end
	
	-- The statistics panel
	local GUI_OptionsPanel = vgui.Create( "DPanel", GUI_StatisticsFrame )
	GUI_OptionsPanel:SetSize( CH_Mining.ScrW * 0.487, CH_Mining.ScrW * 0.356 )
	GUI_OptionsPanel:SetPos( CH_Mining.ScrW * 0.109, CH_Mining.ScrH * 0.0475 )
	GUI_OptionsPanel.Paint = function( self, w, h )
		-- Background
		surface.SetDrawColor( color_transparent )
		surface.DrawRect( 0, 0, w, h )
		
		-- Top box with info
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, 0, w, h * 0.14 )
		
		surface.SetFont( "CH_Mining_Font_Size14" )
		local welcome_back = CH_Mining.LangString( "Hey" ) ..", ".. ply:Nick()
		local x, y = surface.GetTextSize( welcome_back )

		draw.SimpleText( welcome_back, "CH_Mining_Font_Size14", w * 0.01, h * 0.04, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mining.Materials.WavingHand )
		surface.DrawTexturedRect( w * 0.01 + ( x + CH_Mining.ScrW * 0.005 ), h * 0.0225, CH_Mining.ScrW * 0.014065, CH_Mining.ScrH * 0.025 )

		draw.SimpleText( CH_Mining.LangString( "Here are your overall personal mining statistics." ), "CH_Mining_Font_Size10", w * 0.01, h * 0.1, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		-- Make sure stats are loaded
		if not ply.CH_Mining_Stats then
			return
		end
		
		-- Stat 1
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, CH_Mining.ScrH * 0.095, w, CH_Mining.ScrH * 0.04 )

		draw.SimpleText( CH_Mining.LangString( "Total minerals mined" ), "CH_Mining_Font_Size10", w * 0.01, h * 0.18, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		draw.SimpleText( string.Comma( ply.CH_Mining_Stats[ "MineralsMined" ] ) .. " " .. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size10", w * 0.99, h * 0.18, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
		
		-- Stat 2
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, CH_Mining.ScrH * 0.1425, w, CH_Mining.ScrH * 0.04 )
		
		draw.SimpleText( CH_Mining.LangString( "Total rocks destroyed" ), "CH_Mining_Font_Size10", w * 0.01, h * 0.255, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		draw.SimpleText( string.Comma( ply.CH_Mining_Stats[ "RocksDestroyed" ] ) .. " " .. CH_Mining.LangString( "rocks" ), "CH_Mining_Font_Size10", w * 0.99, h * 0.255, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )

		-- Stat 3
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, CH_Mining.ScrH * 0.19, w, CH_Mining.ScrH * 0.04 )
		
		draw.SimpleText( CH_Mining.LangString( "Total rocks emptied" ), "CH_Mining_Font_Size10", w * 0.01, h * 0.33, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		draw.SimpleText( string.Comma( ply.CH_Mining_Stats[ "RocksEmptied" ] ) .. " " .. CH_Mining.LangString( "rocks" ), "CH_Mining_Font_Size10", w * 0.99, h * 0.33, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
		
		-- Stat 4
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, CH_Mining.ScrH * 0.2375, w, CH_Mining.ScrH * 0.04 )
		
		draw.SimpleText( CH_Mining.LangString( "Total minerals sold" ), "CH_Mining_Font_Size10", w * 0.01, h * 0.405, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		draw.SimpleText( string.Comma( ply.CH_Mining_Stats[ "MineralsSold" ] ) .. " " .. CH_Mining.LangString( "minerals" ), "CH_Mining_Font_Size10", w * 0.99, h * 0.405, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
		
		-- Stat 5
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, CH_Mining.ScrH * 0.285, w, CH_Mining.ScrH * 0.04 )
		
		draw.SimpleText( CH_Mining.LangString( "Total money earned" ), "CH_Mining_Font_Size10", w * 0.01, h * 0.48, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		draw.SimpleText( CH_Mining.FormatMoney( ply.CH_Mining_Stats[ "MoneyEarned" ] ), "CH_Mining_Font_Size10", w * 0.99, h * 0.48, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
		
		-- Stat 6
		surface.SetDrawColor( CH_Mining.Colors.GrayBG )
		surface.DrawRect( 0, CH_Mining.ScrH * 0.3325, w, CH_Mining.ScrH * 0.04 )
		
		draw.SimpleText( CH_Mining.LangString( "Total items crafted" ), "CH_Mining_Font_Size10", w * 0.01, h * 0.555, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		draw.SimpleText( string.Comma( ply.CH_Mining_Stats[ "ItemsCrafted" ] ) .. " " .. CH_Mining.LangString( "items" ), "CH_Mining_Font_Size10", w * 0.99, h * 0.555, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
	end
end
--lua/autorun/chaosmerchant.lua:
return gluapack()()
--lua/autorun/crsk_stuff.lua:
return gluapack()()
--lua/autorun/ct_helga.lua:
return gluapack()()
--lua/autorun/dauge.lua:
player_manager.AddValidModel( "Dauge",                     "models/spike/Dauge.mdl" )
list.Set( "PlayerOptionsModel",  "Dauge",                     "models/spike/Dauge.mdl" ) 

--Add NPC
local Category = "Spike's NPCs"

local NPC = { 	Name = "Dauge", 
				Class = "npc_citizen",
				Model = "models/spike/Dauge.mdl",
				Health = "300",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "Dauge", NPC )
--lua/autorun/divrioters.lua:
player_manager.AddValidModel( "Rioter Thug", "models/bala/rioter_thug_pm.mdl" )
list.Set( "PlayerOptionsModel",  "Rioter Thug", "models/bala/rioter_thug_pm.mdl" )
player_manager.AddValidHands( "Rioter Thug", "models/bala/rioter_arms.mdl", 0, "00000000" )
player_manager.AddValidModel( "Rioter Survivor", "models/bala/rioter_survivor_pm.mdl" )
list.Set( "PlayerOptionsModel",  "Rioter Survivor", "models/bala/rioter_survivor_pm.mdl" )
player_manager.AddValidHands( "Rioter Survivor", "models/bala/rioter_arms.mdl", 0, "00000000" )
player_manager.AddValidModel( "Rioter Scout", "models/bala/rioter_scout_pm.mdl" )
list.Set( "PlayerOptionsModel",  "Rioter Scout", "models/bala/rioter_scout_pm.mdl" )
player_manager.AddValidHands( "Rioter Scout", "models/bala/rioter_arms.mdl", 0, "00000000" )
player_manager.AddValidModel( "Rioter Bomber", "models/bala/rioter_bomber_pm.mdl" )
list.Set( "PlayerOptionsModel",  "Rioter Bomber", "models/bala/rioter_bomber_pm.mdl" )
player_manager.AddValidHands( "Rioter Bomber", "models/bala/rioter_arms.mdl", 0, "00000000" )
player_manager.AddValidModel( "Rioter Dare Devil", "models/bala/rioter_dare_devil_pm.mdl" )
list.Set( "PlayerOptionsModel",  "Rioter Dare Devil", "models/bala/rioter_dare_devil_pm.mdl" )
player_manager.AddValidHands( "Rioter Dare Devil", "models/bala/rioter_arms.mdl", 0, "00000000" )
player_manager.AddValidModel( "Rioter Charger", "models/bala/rioter_charger_pm.mdl" )
list.Set( "PlayerOptionsModel",  "Rioter Charger", "models/bala/rioter_charger_pm.mdl" )
player_manager.AddValidHands( "Rioter Charger", "models/bala/rioter_arms.mdl", 0, "00000000" )
--Add NPC
local Category = "Rioters"

local NPC = { 	Name = "Rioter Thug (Compliant)", 
				Class = "npc_citizen",
				Model = "models/bala/rioter_thug.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "rioter_thug", NPC )

local NPC = { 	Name = "Rioter Thug (Hostile)", 
				Class = "npc_combine_s",
				Model = "models/bala/rioter_thug.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "rioter_thug_hostile", NPC )

local NPC = { 	Name = "Rioter Survivor (Compliant)", 
				Class = "npc_citizen",
				Model = "models/bala/rioter_survivor.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "rioter_survivor", NPC )

local NPC = { 	Name = "Rioter Survivor (Hostile)", 
				Class = "npc_combine_s",
				Model = "models/bala/rioter_survivor.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "rioter_survivor_hostile", NPC )

local NPC = { 	Name = "Rioter Scout (Compliant)", 
				Class = "npc_citizen",
				Model = "models/bala/rioter_scout.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "rioter_scout", NPC )

local NPC = { 	Name = "Rioter Scout (Hostile)", 
				Class = "npc_combine_s",
				Model = "models/bala/rioter_scout.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "rioter_scout_hostile", NPC )

local NPC = { 	Name = "Rioter Bomber (Compliant)", 
				Class = "npc_citizen",
				Model = "models/bala/rioter_bomber.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "rioter_bomber", NPC )

local NPC = { 	Name = "Rioter Bomber (Hostile)", 
				Class = "npc_combine_s",
				Model = "models/bala/rioter_bomber.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "rioter_bomber_hostile", NPC )

local NPC = { 	Name = "Rioter Dare Devil (Compliant)", 
				Class = "npc_citizen",
				Model = "models/bala/rioter_dare_devil.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "rioter_dare_devil", NPC )

local NPC = { 	Name = "Rioter Dare Devil (Hostile)", 
				Class = "npc_combine_s",
				Model = "models/bala/rioter_dare_devil.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "rioter_dare_devil_hostile", NPC )

local NPC = { 	Name = "Rioter Charger (Compliant)", 
				Class = "npc_citizen",
				Model = "models/bala/rioter_charger.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "rioter_charger", NPC )

local NPC = { 	Name = "Rioter Charger (Hostile)", 
				Class = "npc_combine_s",
				Model = "models/bala/rioter_charger.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
                                Category = Category    }

list.Set( "NPC", "rioter_charger_hostile", NPC )

--lua/autorun/egm_friendly_npc_kod_rebs.lua:
 local Category = "Emniyet Genel Mudurlugu NPC"

local NPC = {	Name = "EGM Memur Friendly 1",
				Class = "npc_citizen",
				Model = "models/npc/friendly/rebs/egm/male_02.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_egmmemur_friendly_1", NPC )

local NPC = {	Name = "EGM Memur Friendly 2",
				Class = "npc_citizen",
				Model = "models/npc/friendly/rebs/egm/male_04.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_egmmemur_friendly_2", NPC )

local NPC = {	Name = "EGM Memur Friendly 3",
				Class = "npc_citizen",
				Model = "models/npc/friendly/rebs/egm/male_05.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_egmmemur_friendly_3", NPC )

local NPC = {	Name = "EGM Memur Friendly 4",
				Class = "npc_citizen",
				Model = "models/npc/friendly/rebs/egm/male_06.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_egmmemur_friendly_4", NPC )

local NPC = {	Name = "EGM Memur Friendly 5",
				Class = "npc_citizen",
				Model = "models/npc/friendly/rebs/egm/male_07.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_egmmemur_friendly_5", NPC )

local NPC = {	Name = "EGM Memur Friendly 6",
				Class = "npc_citizen",
				Model = "models/npc/friendly/rebs/egm/male_08.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_egmmemur_friendly_6", NPC )

local NPC = {	Name = "EGM Memur Friendly 7",
				Class = "npc_citizen",
				Model = "models/npc/friendly/rebs/egm/male_09.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
				Category = Category }

list.Set( "NPC", "npc_egmmemur_friendly_7", NPC )
 
--lua/autorun/engie_player.lua:
player_manager.AddValidModel("Engineer", "models/player/engieplayer/engie.mdl")
list.Set("PlayerOptionsModel", "Engineer", "models/player/engieplayer/engie.mdl")
player_manager.AddValidHands("Engineer", "models/player/engieplayer/engineer_hands.mdl", 0, "00000000")
--addons/executioner/lua/autorun/executioner_logging.lua:
return gluapack()()
--addons/glicence/lua/glicence/core/cl_main.lua:
include("glicence/config/config.lua")
include("glicence/config/lang.lua")

function GLicence:Message(message)
  chat.AddText(Color(255, 255, 255, 255), "[", GLicence.Config.PrefixColor, GLicence.Config.Prefix, Color(255, 255, 255, 255), "] ", message)
end

net.Receive("glicence_message", function()
  local msg = net.ReadString()
  GLicence:Message(msg)
end)

net.Receive("glicence_openderma_user", function()
  surface.CreateFont("GLicence_User1", {
    font = "Roboto",
    size = ScrH() * 0.05,
  })
  surface.CreateFont("GLicence_User2", {
    font = "Roboto",
    size = ScrH() * 0.025,
  })

  local frame = vgui.Create("DFrame")
  frame:SetSize(ScrW() * 0.5, ScrH() * 0.5)
  frame:SetTitle("")
  frame:SetDraggable(false)
  frame:ShowCloseButton(false)
  frame:Center()
  frame:MakePopup()
  frame.Paint = function(s, w, h)
    draw.RoundedBox(0, 0, 0, w, h, Color(0, 0, 0, 230))
    draw.RoundedBox(0, 0, 0, w, h * 0.05, Color(0, 0, 0, 255))
    draw.SimpleText(GLicence.Lang.UserMenuTitle, "GLicence_User1", w / 2, h * 0.075, Color(255, 255, 255, 255), 1, 0)

    surface.SetDrawColor(255, 255, 255, 255)
    surface.DrawLine(w * 0.1, h * 0.2, w * 0.9, h * 0.2)
  end

  local CloseButton = vgui.Create("DButton", frame)
  CloseButton:SetPos(frame:GetWide() * 0.95, 0)
  CloseButton:SetSize(frame:GetWide() * 0.05, frame:GetTall() * 0.05)
  CloseButton:SetText("")
  CloseButton.Paint = function(s, w, h)
    draw.RoundedBox(0, 0, 0, w, h, Color(0, 0, 0, 255))
    draw.SimpleText("X", "GLicence_User2", w / 2, h / 2, Color(255, 255, 255, 255), 1, 1)
  end
  CloseButton.DoClick = function()
    frame:Close()
  end

  local TextPanel = vgui.Create("DPanel", frame)
  TextPanel:SetPos(frame:GetWide() * 0.1, frame:GetTall() * 0.3)
  TextPanel:SetSize(frame:GetWide() * 0.8, frame:GetTall() * 0.3)
  TextPanel.Paint = function(s, w, h)
    draw.SimpleText(string.format(GLicence.Lang.NPCMessage, GLicence.Config.Cost), "GLicence_User2", w / 2, h / 2, Color(255, 255, 255, 255), 1, 1)
  end

  local BuyButton = vgui.Create("DButton", frame)
  BuyButton:SetPos(frame:GetWide() * 0.1, frame:GetTall() * 0.8)
  BuyButton:SetSize(frame:GetWide() * 0.8, frame:GetTall() * 0.1)
  BuyButton:SetText("")
  local BuyLerp = 0
  BuyButton.Paint = function(s, w, h)
    if(BuyButton:IsHovered() == true) then
      BuyLerp = Lerp(0.05, BuyLerp, w)
    else
      BuyLerp = Lerp(0.05, BuyLerp, 0)
    end
    draw.RoundedBox(0, 0, 0, w, h, Color(0, 0, 0, 200))
    draw.RoundedBox(0, 0, 0, BuyLerp, h, GLicence.Config.ButtonAnimColor)
    draw.SimpleText(string.format(GLicence.Lang.BuyButton, GLicence.Config.Cost), "GLicence_User2", w / 2, h / 2, Color(255, 255, 255, 255), 1, 1)
  end
  BuyButton.DoClick = function()
    net.Start("glicence_buy")
    net.SendToServer()
    frame:Close()
  end
end)

--addons/glicence/lua/glicence/config/config.lua:
return gluapack()()
--addons/glicence/lua/glicence/config/lang.lua:
/*
Language Configuration
Use this to change any text to your own language, or just generaly change it.
*/

// NPC


// Title of the NPC.
GLicence.Lang.NPCTitle = "Silah Lisansı Satıcısı"

// User menu title.
GLicence.Lang.UserMenuTitle = "Silah Lisansı Satıcısı"

// Message for the NPC.
GLicence.Lang.NPCMessage = "Silah Lisansımı Almak İstiyorsun Fiyatı: ₺%s"

// Buy Button Text.
GLicence.Lang.BuyButton = "₺%s Karşılığnda lisansı almak istiyor musun?"

// Buy successful.
GLicence.Lang.BuySuccessful = "Silah ruhsatı aldınız. Cüzdanınızdan ₺%s alındı."


// Errors


// No access error.
GLicence.Lang.NoAccess = "You do not have access to do this."

// NPC Cooldown error.
GLicence.Lang.NPCCooldown = "Süreyi Beklemen Gerekiyor !"

// Already has a licence error.
GLicence.Lang.AlreadyHasLicence = "Zaten Lisansın Bulunuyor !"

// Can't Afford It
GLicence.Lang.CantAffordLicence = "You cannot afford this."


// GG.

--addons/gmodadminsuite-config/lua/gmodadminsuite_lua_functions.lua:
return gluapack()()
--addons/gmodadminsuite-logging-2.4.8/lua/gmodadminsuite/modules/logging/lang/spanish.lua:
return {
	Name = "Spanish",
	Flag = "flags16/es.png",
	Phrases = function() return {

		module_name = "Billy's Logs",

		--####################### UI PHRASES #######################--

		no_data                     = "Sin registros",
		add_to_evidence_box         = "Agregar a la Caja de Pruebas",
		livelogs_show_logs_for      = "Mostrar Logs Por",
		background_color            = "Color de Fondo",
		health_abbrieviated         = "%d HP",
		livelogs                    = "Logs en Vivo",
		exit_deep_storage           = "Salir del los Registros Profundos",
		log_formatting              = "Formato de log",
		strings                     = "Palabras Clave",
		when                        = "Cuando",
		copy_log                    = "Copiar log",
		evidence_box                = "Caja de Pruebas",
		livelogs_position_x         = "Posición X (pixeles)",
		width                       = "Anchura",
		color                       = "Color",
		help                        = "Ayuda",
		apply_filter                = "Aplicar Filtro",
		live_log_antispam           = "< live log descartado por antispam >",
		settings                    = "Ajustes",
		loading_ellipsis            = "Cargando...",
		livelogs_enabled            = "Habilitar Logs en Vivo",
		armor_abbrieviated          = "%d ARM",
		deep_storage                = "Registros Profundos",
		all_logs                    = "Todos los Logs",
		logs                        = "Logs",
		padding                     = "Relleno (pixeles)",
		livelogs_position_y         = "Posición Y (pixeles)",
		livelogs_rows_help          = "¿Cuál es la cantidad máxima de logs que se deben mostrar?",
		livelogs_rows               = "Filas (Cantidad de log)",
		livelogs_color_help         = "¿Deben mostrarse los registros en color?",
		export_to_clipboard         = "Exportar al portapapeles",
		players                     = "Jugadores",
		script_page                 = "Pagina del Script",
		wiki                        = "Wiki",
		module                      = "Módulo",
		modules                     = "Módulos",
		localization                = "Localización",
		view_deep_storage           = "Ver Registros Profundos",
		copied                      = "Copiado!",
		operator                    = "Operador",
		log                         = "Log",
		reset_to_defaults           = "Restablecer los valores predeterminados",
		livelogs_show_logs_for_help = "¿Por cuántos segundos se deben mostrar los registros?\nEstablecer en 0 para que sea para siempre.",
		advanced_search             = "Búsqueda Avanzada",
		quick_search                = "Búsqueda Rápida",
		quick_search_ellipsis       = "Búsqueda Rápida...",
		entities                    = "Entidades",
		tutorial                    = "Tutorial",
		clear_filters               = "Borrar Filtros",
		clear_filter                = "Borrar Filtro",
		manual_steamid_ellipsis     = "SteamID Manual...",
		no_results_found            = "No se han encontrado resultados",
		add_player                  = "+ Agregar Jugador",
		add_module                  = "+ Agregar Módulo",
		add_entity                  = "+ Agregar Entidad",
		add_string                  = "+ Agregar Palabra Clave",
		modules_search_tooltip      = "¿Qué módulo(s) quieres incluir? (dejar en blanco para cualquier módulo)",
		players_search_tooltip      = "¿Qué jugador(es) estás buscando? (dejar en blanco para cualquier jugador)",
		entities_search_tooltip     = "¿Qué entidad(es) estás buscando? (armas, entidades, vehículos, props, clases, etc...)",
		strings_search_tooltip      = "¿Hay algún texto específico que estás buscando?",
		class_name_ellipsis         = "Nombre de la clase...",
		add_string_popup_title      = "Agregar Palabra Clave",
		add_string_popup_text       = "Ingresa el texto que estás tratando de encontrar.",
		text_ellipsis               = "Texto...",
		click_to_focus              = "Haz click para enfocar",
		right_click_to_focus        = "Haz click derecho para enfocar",
		highlight_color             = "Color de resaltado",
		weapon_color                = "Color de arma",
		money_color                 = "Color de dinero",
		vehicle_color               = "Color vehiculo",
		entity_color                = "Color de entidad",
		health_color                = "Color de HP",
		armor_color                 = "Color de armadura",
		usergroup_color             = "Color de rango",
		unavailable_color           = "No disponible/Color Desconocido",
		learn_more                  = "Aprender más",
		player_combats              = "Combates de Jugadores",
		took_damage                 = "[recibió %d de daño]",
		open_pvp_event_report       = "Reporte de evento de PVP",
		remove                      = "Borrar",
		greedy                      = "Extenso",
		greedy_tip                  = "Si tu búsqueda es extensa, intentará hacer coincidir tantos registros como sea posible. Si no lo es, intentará hacer coincidir la menor cantidad posible de registros.",
		log_colouring               = "Colores de Logs",
		done_exclamation            = "Hecho!",
		module_settings             = "Ajustes de Módulo",
		storage_settings            = "Ajustes de Almacenamiento",
		third_party_addons          = "Addons de terceros",
		pvp_settings                = "Ajustes de registro PvP",
		live_logs_settings          = "Ajustes de Logs en Vivo",
		logging_settings            = "Ajustes de logs",
		settings                    = "Ajustes",
		enabled_modules             = "Habilitar Módulos",
		permissions                 = "Permisos",
		gamemode_modules            = "Módulos de Gamemodes",
		saved_exclamation           = "Guardado!",
		save_settings               = "Guardar Ajustes",
		weapon_class                = "Clase de Arma",
		enter_weapon_class          = "Introduce el nombre de la clase del arma.\nNo lo se? Abre tu menú de spawn, haz clic derecho en un arma y haz click \"Copiar al portapapeles\"",
		save                        = "Guardar",
		add_new                     = "+ Agregar nuevo",
		enabled                     = "Habilitado",
		website                     = "Sitio Web",
		name                        = "Nombre",
		usergroups                  = "Rangos",
		everyone                    = "Todos",
		all_modules                 = "Todos los módulos",
		all_teams                   = "Todos los Jobs",
		add_usergroup               = "Agregar Rango",
		cl_sv_tooltip               = [[cl representa el tiempo necesario para que tu ordenador solicite registros, los reciba, los procese y los muestre
		
		sv representa el tiempo necesario para que el servidor recupere los registros de la memoria/la base de datos, los procese y luego se los envíe.

		Los servidores que usan MySQL verán un valor sv más alto debido a la latencia entre el servidor MySQL y Garr's Mod]],
		deep_storage_help           = [[Registros Profundos es una función de bLogs que mejora el rendimiento al almacenar registros de sesiones anteriores del servidor por separado de las sesiones actuales.

		Después de hacer clic en "Ver Registros Profundos", solo verás los registros de las sesiones anteriores del servidor.
		Puede ver los registros de la sesión actual haciendo click nuevamente en el botón de abajo o volviendo a abrir el menú.

		NOTA:Los registros de daños no se incluyen en el almacenamiento profundo y se eliminan en cada reinicio para ahorrar espacio en el disco]],

		damage = "Daño",

		class_type_other = "Otro",
		class_type_player = "Jugador",
		class_type_team = "Team",
		class_type_weapon = "Arma",
		class_type_vehicle = "Vehiculo",
		class_type_damage = "Tipo de Daño",
		class_type_usergroup = "Rango",
		class_type_prop = "Prop",
		class_type_ragdoll = "Ragdoll",
		class_type_country = "País",
		class_type_ammo = "Munición",
		class_type_role = "Rol",
		class_type_entity = "Entidad",
		class_selector = "Selector de Clase",
		custom_class = "Clase Personalizada",
		class_type = "Tipo de Clase",
		value = "Valor",
		search = "Búscar",
		check_all = "Marcar Todo",
		uncheck_all = "Desmaecae Todo",
		general = "General",
		class_search_title = "Búsqueda de Clase",
		class_search_text = "Ingresa el nombre o parte de un nombre de la clase que estás buscando (no se distinguen mayúsculas y minúsculas)",
		view_logs = "Ver Logs",
		open_menu = "Open Menu",
		licensed_to = "Licenciado para %s",

		pvp_event_report = "Reporte de Evento PvP",
		victim = "Victima",
		instigator = "Instigador",
		victim_tag_tip = "Esta es la persona contra la que el instigador comenzó el combate.",
		instigator_tag_tip = "Esta es la persona que comenzó el combate.",
		victim_abbr = "V",
		instigator_abbr = "I",
		time = "Tiempo",
		linked_events = "Eventos Relacionados",

		deleted_team = "(TEAM BORRADO)",

		unknown = "Desconocido",
		cancel = "Cancelar",

		deep_storage_advanced_search_warning = "ADVERTENCIA: La búsqueda avanzada en realidad busca en el Registros Profundos internamente por razones de rendimiento, lo que significa que la Búsqueda avanzada no encontrará los registros creados recientemente durante un corto período de tiempo.",

		--####################### SETTINGS #######################--

		Player_RecordTeam = "Mostrar team del jugador en los logs",
		Player_RecordUsergroup = "Mostrar el rango del jugador en los logs",
		Player_RecordHealth = "Mostra vida del jugador en los logs",
		Player_RecordArmor = "Mostrar armadura del jugador en los logs",
		Player_RecordWeapon = "Mostrar arma del jugador en los logs",
		Player_RecordWeapon_DoNotRecord = "Filtro de arma del jugador",
		Player_RecordWeapon_DoNotRecord_help = "Si deseas mostrar las armas de los jugadores en los registros, usa esta opción para filtrar las armas que no quieres ver (como la physgun, la toolgun, etc.)",

		OverrideMoneyFormat = "Anular formato de dinero predeterminado",
		OverrideMoneyFormat_help = "Cuando esto está desactivado, se utilizará el formato de dinero del modo de juego.\nCuando esto está activado, puedes usar la opción a continuación para poner tu propio formato de dinero.",
		MoneyFormat = "Formato de Dinero",
		MoneyFormat_help = "Introduce cómo quieres que aparezca el dinero e inserta \"%s\" (sin las comillas)donde quieres que aparezca la cantidad de dinero.",

		DeepStorageEnabled = "Registros Profundos Habilitados",
		DeepStorageEnabled_help = "Deshabilitar el Registros Profundos puede mejorar significativamente el rendimiento en servidores que no usan MySQL.",

		DeepStorageCommitPeriod = "Registros Profundos período de compromiso",
		DeepStorageCommitPeriod_help = "¿Con qué frecuencia (en segundos) se deben confirmar los registros profundos en la base de datos?",

		DeepStorageTooOld = "Edad máxima de los registros profundos",
		DeepStorageTooOld_help = "¿Cuántos días puede estar un registro profundo antes de que se elimine? (ahorra espacio en el disco)\nEstablézcalo en 0 para no eliminar nunca los registros profundos.",

		LiveLogsEnabled = "Logs en Vivo Habilitado",
		LiveLogsEnabled_help = "Los registros en vivo pueden ser un impacto de rendimiento para servidores grandes; Puedes desactivar la función completamente aquí.",
		LiveLogsIn10Seconds = "Max registros en vivo en 10 segundos",
		LiveLogsIn10Seconds_help = "¿Cuántos registros en vivo se pueden enviar antes de que se bloqueen los registros adicionales para el antispam?",
		NotifyLiveLogsAntispam = "Notificar antispam",
		NotifyLiveLogsAntispam_help = "¿Se debe notificar a los usuarios que se ha descartado un registro activo por el antispam?",

		TimeBetweenPvPEvents = "Tiempo entre eventos PvP",
		TimeBetweenPvPEvents_help = "Cuando los jugadores comienzan el combate, se crea un \"Evento PVP\", cuando no se ha producido ningún combate adicional en una cierta cantidad de segundos, el evento PvP se trata como finalizado y comprometido con los registros. ¿Cuántos segundos deben esperar los bLogs antes de hacer esto?",
		NonPvPWeapons = "Filtro de armas PvP",
		NonPvPWeapons_help = "¿Qué armas no deben ser tratadas como armas PvP?",

		server_restart_required = "NOTA: Los cambios en estos ajustes se aplicarán después de reiniciar el servidor.",

		gamemode_modules_tip = [[bLogs soporta una gran cantidad de modos de juego.
        Sin embargo, a veces bLogs puede tener problemas para detectar si está ejecutando un determinado modo de juego.
        En esta pantalla, puedes forzar a bLogs a detectar que estás ejecutando un determinado modo de juego.

		Desmarcado = Comportamiento por defecto
		Marcado = Forzado
		Tachado = No Forzado

		Ten en cuenta que algunos modos de juego RETIVAN del Sandbox, esto significa que usan el menú de spawn del Sandbox, la toolgun, etc.
		Para los modos de juego como DarkRP que se derivan de Sandbox, se recomienda dejar Sandbox en su detección predeterminada.]],

		third_party_addons_tip = [[bLogs admite una gran cantidad de addons de terceros.
		Sin embargo, a veces, los bLogs pueden tener problemas para detectar si tienes un complemento de terceros instalado.
        En esta pantalla, puede forzar a bLogs a pensar que tiene ciertos addons de terceros instalados.

		Desmarcado = Comportamiento por defecto
		Marcado = Forzado
		Tachado = No Forzado]],

		edit_discord_webhooks = "Editar Discord Webhooks",
		webhook_name = "Nombre del webhook",
		webhook_name_tip = "Ingrese el nombre del webhook.\nEsto es solo un identificador para el webhook, ingresará la URL en la siguiente pantalla.",
		webhook = "Webhook",
		webhook_url = "Webhook URL",
		webhook_url_tip = "Copia la URL de tu webhook de Discord y pégala aquí.",
		copy_webhook = "Copiar Webhook",

		can_access_module = "Puede acceder al módulo",
		can_access_all_modules = "Puede acceder a TODOS los módulos",
		all_usergroups = "Todos los rangos",
		all_jobs_in_category = "Todos los jobs en categoría",
		all_teams_in_category = "Todos los teams en categoria",
		teams = "Teams",
		permissions_tip = "Desmarcado = Hereda de \"%s\"\nMarcado = Permitido usar módulo\nTachado = Prohibido usar módulo",
		all_modules_tip = "Los permisos se heredan de esta sección a menos que se invaliden.",

		wipes_and_resets = "Wipes & Reseteos", -- wipes as in data wipes
		disable_buttons = "Deshabilitar botones",
		enable_buttons = "Habilitar botones",
		wipe_deepstorage = "Borrar Registros Profundos",
		wipe_session = "Borrar Logs de la sesión",
		wipe_all_logs = "Borrar todos los Logs",
		reset_config = "Resetear Ajustes.",

		vehicle_driver = "Conductor:",
		data = "Data",
		weapons = "Armas",
		props = "Props",
		ragdolls = "Ragdolls",
		money = "Dinero",
		countries = "Países",
		ammo = "Munición",
		roles = "Roles",
		vehicles = "Vehiculos",

		flag_ongoing = "Evento en curso",
		flag_finished = "Evento Terminado",
		flag_superadmin = "Implica Superadmin",
		flag_admin = "Implica Staff",
		flag_friendly_fire = "Fuego amigo",
		flag_law_enforcement = "Implica cumplimiento de la ley",
		flag_instigator_death = "El instigador murió",
		flag_victim_death = "La víctima murió",
		flag_vehicle = "Implica vehículo(s)",
		flag_world = "Involucra el mapa",
		flag_props = "Involucra props",
		flag_team_switched = "Ocurrió cambio de team",
		flag_disconnect = "Jugador desconectado durante el combate",
		flag_linked = "Vinculado a otros eventos PvP",

		event_start = "Inicio de evento",
		event_end = "Final del evento",

		dead_tag = "[MUERTO]",

		DmgTooltip_Victim = "% del daño total del evento PVP fue la víctima responsable",
		DmgTooltip_Instigator = "% del daño total del evento PVP fue el instigador responsable",
		DmgTooltip_Other = "% del daño total del evento PVP fue por otra causa",

		--####################### LOG PHRASES #######################--
		Logs = {
			round_start     = "INICIO DE RONDA",
			round_preparing = "PREPARANDO RONDA",
			round_end       = "RONDA TERMINADA",

			connected                                      = "{1} conectado",
			connected_from_country                         = "{1} conectado desede {2}",
			finished_connecting                            = "{1} se terminó de conectar",
			respawned                                      = "{1} respawneo",
			disconnected                                   = "{1} desconectado ({2})",
			picked_up_weapon                               = "{1} cogió un arma {2}",
			picked_up_item                                 = "{1} cogió un item {2}",
			prop_killed_self                               = "{1} se suicidó con su prop {2}",
			prop_killed_other                              = "{1} fue asesinado por prop creado por {2} ({3})",
			prop_killed_world                              = "{1} fue asesinado por un prop del mundo {2}",
			prop_damaged_self                              = "{1} recibió un {2} de daño con su prop {3}",
			prop_damaged_other                             = "{1} fue dañado por prop creado por {2} quitandole {3} de daño ({4})",
			prop_damaged_world                             = "{1} fue dañado con un prop del mundo {2} recibió un {3} de daño",
			toolgun_used_their_ent                         = "{1} usó la tool {2} en su {3}",
			toolgun_used_other_ent                         = "{1} usó la tool {2} en {3} creado por {4}",
			toolgun_used_world_ent                         = "{1} usó la tool {2} en {3}",
			spawned_effect                                 = "{1} spawneó un efecto {2}",
			spawned_npc                                    = "{1} spawneó un NPC {2}",
			spawned_prop                                   = "{1} spawneó un prop {2}",
			spawned_ragdoll                                = "{1} spawneó un ragdoll {2}",
			spawned_sent                                   = "{1} spawneó una entidad {2}",
			spawned_swep                                   = "{1} spawneó un arma {2}",
			spawned_vehicle                                = "{1} spawneó vehiculo {2}",
			steam_name_changed                             = "{1} cambió su nombre de Steam de {2} a {3}",
			weapon_switched                                = "{1} cambió del arma {2} a {3}",
 
			murder_loot                                    = "{1} recogió loot",
 
			cinema_video_queued                            = "[{1}] {2} en cola [{3}] \"{4}\" {5}",
 
			ttt_win_traitor                                = "Ganan Traidores!",
			ttt_win_innocent                               = "Ganan Inocentes!",
			ttt_win_timelimit                              = "Ganan Inocentes - límite de tiempo alcanzado!",
			ttt_bought                                     = "{1} compró {2}",
			ttt_karma                                      = "{1} fue KICKEADO por bajo karma",
			ttt_foundbody                                  = "{1} encontró el cuerpo de {2}",
			ttt_founddna                                   = "{1} encontró el ADN de {2} en su {3}",
			ttt_founddna_corpse                            = "{1} encontró el ADN de {2} en su cadáver",
 
			darkrp_agenda_updated                          = "{1} actualizó la agenda de {2} a: {3}",
			darkrp_agenda_removed                          = "{1} borro {2}",
			darkrp_arrest                                  = "{1} arrestó {2}",
			darkrp_unarrest                                = "{1} salió {2}",
			darkrp_batteringram_owned_success              = "{1} abrió con el battering ram el {2} de {3}",
			darkrp_batteringram_owned_door_success         = "{1} abrió con el battering ram la puerta de {2}",
			darkrp_batteringram_success                    = "{1} abrió con el battering ram algo desconocido, {2}",
			darkrp_batteringram_door_success               = "{1} abrió con el battering ram una puerta desconocida",
			darkrp_batteringram_owned_failed               = "{1} falló con el battering ram en {2} de {3}",
			darkrp_batteringram_owned_door_failed          = "{1} falló con el battering ram en la puerta de {2}",
			darkrp_batteringram_failed                     = "{1} falló con el battering ram algo desconocido, {2}",
			darkrp_batteringram_door_failed                = "{1} falló con el battering ram una puerta desconocida",
			darkrp_cheque_dropped                          = "{1} solltó un cheque de {2} para {3}",
			darkrp_cheque_picked_up                        = "{1} cobró un cheque de {2} de {3}",
			darkrp_cheque_tore_up                          = "{1} rompió un cheque de {2} hecho para {3}",
			darkrp_demoted                                 = "{1} demoteado {2} por {3}",
			darkrp_demoted_afk                             = "{1} fue demoteado por estar AFK",
			darkrp_door_sold                               = "{1} vendió una puerta",
			darkrp_door_bought                             = "{1} compró una puerta",
			darkrp_money_dropped                           = "{1} soltó {2}",
			darkrp_money_picked_up                         = "{1} cogió {2}",
			darkrp_money_picked_up_owned                   = "{1} cogió {2} soltado por {3}",
			darkrp_hit_accepted                            = "{1} acepto un hit para {2} requerido por {3}",
			darkrp_hit_completed                           = "{1} completó un hit hacia {2} que fue requerido por {3}",
			darkrp_hit_failed                              = "{1} falló el hit para {2} porque {3}",
			darkrp_hit_requested                           = "{1} requirió un hit para {2} mediante {3} por {4}",
			darkrp_job_changed                             = "{1} se cambió de {2} a {3}",
			darkrp_law_added                               = "{1} ley añadida: {2}",
			darkrp_law_removed                             = "{1} ley borrada: {2}",
			darkrp_purchase                                = "{1} compró {2} por {3}",
			darkrp_purchase_ammo                           = "{1} compró munición de {2} por {3}",
			darkrp_purchase_shipment                       = "{1} compró un cargamento de x{2} {3} por {4}",
			darkrp_purchase_food                           = "{1} compró comida: {2} por {3}",
			darkrp_weapons_checked                         = "{1} chequeó las armas de {2}",
			darkrp_weapons_confiscated                     = "{1} confiscó las armas de {2}",
			darkrp_weapons_returned                        = "{1} devolvió las armas confiscadas de {2}",
			darkrp_filed_warant                            = "{1} presentó un warrant para {2} por: {3}",
			darkrp_warrant_cancelled                       = "{1} canceló el warrant de {2}",
			darkrp_set_wanted                              = "{1} pusó a {2} un wanted por {3}",
			darkrp_cancelled_wanted                        = "{1} canceló el wanted de {2}",
			darkrp_auto_cancelled_wanted                   = "{1} perdió el wanted que tenia",
			darkrp_starved                                 = "{1} murió de hambre",
			darkrp_pocket_added                            = "{1} guardó {2} en su pocket",
			darkrp_pocket_dropped                          = "{1} soltó {2} de su pocket",
			darkrp_rpname_change                           = "{1} se cambió el Nombre de RP de {2} a {3}",
			darkrp_started_lockpick_owned_entity           = "{1} empezó a usar la lockpick en {2} de {3}",
			darkrp_started_lockpick_unowned_entity         = "{1} empezó a usar la lockpick en un {2} desconocido",
			darkrp_started_lockpick_owned_door             = "{1} empezó a usar la lockpick en una puerta de {2}",
			darkrp_started_lockpick_unowned_door           = "{1} empezó a usar la lockpick en una puerta desconocida",
			darkrp_started_lockpick_own_entity             = "{1} empezó a usar la lockpick en su {2}",
			darkrp_started_lockpick_own_door               = "{1} empezó a usar la lockpick en una de sus puertas",
			darkrp_successfully_lockpicked_owned_entity    = "{1} lockpickeo con éxito un {2} de {3}",
			darkrp_successfully_lockpicked_unowned_entity  = "{1} lockpickeo con éxito un {2} desconocido",
			darkrp_successfully_lockpicked_owned_door      = "{1} lockpickeo con éxito una puerta de {2}",
			darkrp_successfully_lockpicked_unowned_door    = "{1} lockpickeo con éxito una puerta desconocida",
			darkrp_successfully_lockpicked_own_entity      = "{1} lockpickeo con éxito su {2}",
			darkrp_successfully_lockpicked_own_door        = "{1} lockpickeo con éxito una de sus puertas",
			darkrp_failed_lockpick_owned_entity            = "{1} no consiguió lockpickear el {2} de {3}",
			darkrp_failed_lockpick_unowned_entity          = "{1} no consiguió lockpickear el {2} desconocido",
			darkrp_failed_lockpick_owned_door              = "{1} no consiguió lockpickear la puerta de {2}",
			darkrp_failed_lockpick_unowned_door            = "{1} no consiguió lockpickear una puerta desconocida",
			darkrp_failed_lockpick_own_entity              = "{1} no consiguió lockpickear su {2}",
			darkrp_failed_lockpick_own_door                = "{1} no consiguió lockpickear una de sus pertas",
			darkrp_changed_job                             = "{1} se cambio de job de {2} a {3}",
			darkrp_added_law                               = "{1} añadió la ley: {2}",
			darkrp_removed_law                             = "{1} borró la ley: {2}",
			darkrp_hit_accepted                            = "{1} aceptó un hit para {2} requerido por {3}",
			darkrp_hit_completed                           = "{1} completoó un hit para {2} requerido por {3}",
			darkrp_hit_failed                              = "{1} falló en un hit para {2} requerido por {3}",
			darkrp_hit_requested                           = "{1} solicitó un hit para {2} mediante {3} por {4}",
			darkrp_sold_door                               = "{1} vendió una puerta",
			darkrp_bought_door                             = "{1} compró una puerta",
			darkrp_dropped_money                           = "{1} soltó {2}",
			darkrp_picked_up_money                         = "{1} cogió {2}",
			darkrp_picked_up_money_dropped_by              = "{1} cogió {2} que soltó {3}",
			darkrp_demoted                                 = "{1} fue demoteado de {2} por {3}",
			darkrp_afk_demoted                             = "{1} fue demoteado por estar AFK",
			darkrp_lottery_started                         = "{1} inició una loteria con el precio de: {2}",
			darkrp_lottery_ended                           = "{1} ganó {2} de la loteria!",
 
			pvp_instigator_killed_noweapon                 = "{1} {2} terminó el combate y ASESINÓ A {3} {4} después de {5}", -- after X seconds/minutes/hours
			pvp_instigator_killed_weapon                   = "{1} {2} terminó el combate usando {3} y ASESINÓ A {4} {5} después de {6}",
			pvp_instigator_killed_weapons                  = "{1} {2} terminó el combate usando multiples armas y ASESINÓ A {3} {4} después de {5}",
			pvp_victim_killed_noweapon                     = "{1} {2} terminó el combate y FUE ASESINADÓ POR {3} {4} después de {5}",
			pvp_victim_killed_weapon                       = "{1} {2} terminó el combate usando {3} y FUE ASESINADO POR {4} {5} después de {6}",
			pvp_victim_killed_weapons                      = "{1} {2} terminó el combate usando multiples armas y FUE ASESINADO POR {3} {4} después de {5}",
			pvp_combat_noweapon                            = "{1} {2} terminó el combate con {3} {4} después de {5}",
			pvp_combat_weapon                              = "{1} {2} terminó el combate usando {3} con {4} {5} después {6}",
			pvp_combat_weapons                             = "{1} {2} terminó el combate usando multiples armas con {3} {4} después {5}",
			pvp_log_noweapon                               = "{1} dañó a {2} quitandole {3} de daño",
			pvp_log_weapon                                 = "{1} dañó a {2} quitandole {3} de daño usando {4}",
			pvp_killed                                     = "{1} mató a {2}",
			pvp_vehicle_owned_killed                       = "{1} fue dañado & y asesinado por {2} sin conductor, propiedad de {3}",
			pvp_vehicle_owned_damaged                      = "{1} fue dañado quitandole {2} de daño por {3} sin conductor, propiedad de {4}",
			pvp_vehicle_killed                             = "{1} fue dañado & y asesinado por {2} sin conductor, propiedad de nadie",
			pvp_vehicle_damaged                            = "{1} fue dañado quitandole {2} de daño por {3} sin conductor, propiedad de nadie",
			pvp_killed_self                                = "{1} se suicidó",
			pvp_damaged_self                               = "{1} se dañó a si mismo quitandose {2} de daño",
 
			changed_team                                   = "{1} se cambió de team de {2} a {3}",
			command_used                                   = "{1}: {2}",
			warned_reason                                  = "{1} fue warneado por {2} por {3}",
			warned_noreason                                = "{1} fue warnedo por {2}",
			warned_kicked                                  = "{1} fue KICKEADO por alcanzar el límite de warns activos",
			warned_banned                                  = "{1} fue BANEADO por alcanzar el límite de warns activos",
			handcuffed                                     = "{1} esposó {2}",
			handcuffs_broken_by                            = "{1} rompió las esposas que le puso {2}",
			handcuffs_broken                               = "{1} rompió sus propias esposas",
			npc_health_bought                              = "{1} compro vida en un NPC por {2}",
			npc_armor_bought                               = "{1} compro armadura en un NPC por {2}",
			pac_outfit                                     = "{1} cambiado su traje de PAC {2}",
			party_chat                                     = "{1} ({2}): {3}",
			party_created                                  = "{1} creó una party {2}",
			party_join                                     = "{1} se unió a la parti {2}",
			party_join_request                             = "{1} requirió unirse a la party {2}",
			party_invite                                   = "{1} invitó a {2} a la party {3}",
			party_leave                                    = "{1} se salió de la party {2}",
			party_kick                                     = "{1} kickeo a {2} de la party {3}",
			party_disbanded                                = "{1} party borrada {2}",
			party_abandoned                                = "{1} se fue del server y se fue de la party {2}",
			spraymesh                                      = "{1} usó su spray {2}",
			starwarsvehicle_damage_owned_weapon            = "{1} dañó un vehiculo de Star Wars {2} de {3} quitandole {4} de daño con {5}",
			starwarsvehicle_damage_owned                   = "{1} dañó un vehiculo de Star Wars {2} de {3} quitandole {4} de daño",
			starwarsvehicle_damage_weapon                  = "{1} dañó un vehiculo de Star Wars {2} quitandole {3} de daño con {4}",
			starwarsvehicle_damage                         = "{1} dañó un vehiculo de Star Wars {2} quitandole {3} de daño",
			wac_damage_owned_weapon                        = "{1} dañó un vehiculo de WAC aircraft {2} de {3} quitandole {4} de daño con {5}",
			wac_damage_owned                               = "{1} dañó un vehiculo de WAC aircraft {2} de {3} quitandole {4} de daño",
			wac_damage_weapon                              = "{1} dañó un vehiculo de WAC aircraft {2} quitandole {3} de daño con {4}",
			wac_damage                                     = "{1} dañó un vehiculo de WAC aircraft {2} quitandole {3} de daño",
			wyozi_cinema_queued                            = "{1} requirió un video {2} ➞ {3} en el cine {4}",
			wyozi_dj_queued                                = "{1} en cola {2} ➞ {3} en el canal {4}",
			wyozi_dj_channel_rename                        = "{1} renombró el canal a {2}",
 
			bwhitelist_whitelist_enabled_by                = "{1} habilitó la whitelist para {2}",
			bwhitelist_whitelist_enabled                   = "La whitelist para {1} fue habilitada",
			bwhitelist_whitelist_disabled_by               = "{1} deshabilitó la whitelist de {2}",
			bwhitelist_whitelist_disabled                  = "La whitelist de {1} fue deshabilitada",
 
			bwhitelist_blacklist_enabled_by                = "{1} habilitó la blacklist para {2}",
			bwhitelist_blacklist_enabled                   = "La bakclist para {1} fue habilitada",
			bwhitelist_blacklist_disabled_by               = "{1} deshabilitó la blacklist para {2}",
			bwhitelist_blacklist_disabled                  = "La blacklist para {1} fue deshabilitada",
 
			bwhitelist_added_to_whitelist_by               = "{1} fue añadido a la whitelist de {2} por {3}",
			bwhitelist_added_to_whitelist                  = "{1} fue añadido a la whitelist de {2}",
			bwhitelist_removed_from_whitelist_by           = "{1} fue borrado de la whitelist de {2} por {3}",
			bwhitelist_removed_from_whitelist              = "{1} fue borrado de la whitelist de {2}",
			bwhitelist_added_to_blacklist_by               = "{1} fue añadido a la blacklist de {2} por {3}",
			bwhitelist_added_to_blacklist                  = "{1} fue añadido a la blacklist de {2}",
			bwhitelist_removed_from_blacklist_by           = "{1} fue borrado de la blacklist de {2} por {3}",
			bwhitelist_removed_from_blacklist              = "{1} fue borrado de la blacklist de {2}",
 
			bwhitelist_added_to_whitelist_by_usergroup     = "El rango {1} fue añadido a la whitelist de {2} por {3}",
			bwhitelist_added_to_whitelist_usergroup        = "El rango {1} fue añadido a la whitelist de {2}",
			bwhitelist_removed_from_whitelist_by_usergroup = "El rango {1} fue borrado a la whitelist de {2} por {3}",
			bwhitelist_removed_from_whitelist_usergroup    = "El rango {1} fue borrado a la whitelist de {2}",
			bwhitelist_added_to_blacklist_by_usergroup     = "El rango {1} fue añadido a la blacklist de {2} por {3}",
			bwhitelist_added_to_blacklist_usergroup        = "El rango {1} fue añadido a la blacklist de {2}",
			bwhitelist_removed_from_blacklist_by_usergroup = "El rango {1} fue borrado a la blacklist de {2} por {3}",
			bwhitelist_removed_from_blacklist_usergroup    = "El rango {1} fue borrado a la blacklist de {2}",
 
			bwhitelist_added_to_whitelist_by_luafunc       = "La función de lua {1} fue añadida a la whitelist de {2} por {3}",
			bwhitelist_added_to_whitelist_luafunc          = "La función de lua {1} fue añadida a la whitelist de {2}",
			bwhitelist_removed_from_whitelist_by_luafunc   = "La función de lua {1} fue borrada a la whitelist de {2} por {3}",
			bwhitelist_removed_from_whitelist_luafunc      = "La función de lua {1} fue borrada a la whitelist de {2}",
			bwhitelist_added_to_blacklist_by_luafunc       = "La función de lua {1} fue añadida a la blacklist de {2} por {3}",
			bwhitelist_added_to_blacklist_luafunc          = "La función de lua {1} fue añadida a la blacklist de {2}",
			bwhitelist_removed_from_blacklist_by_luafunc   = "La función de lua {1} fue borrada a la blacklist de {2} por {3}",
			bwhitelist_removed_from_blacklist_luafunc      = "La función de lua {1} fue borrada a la blacklist de {2}",

			pvp_combat_begin = "{1} combate instigado contra {2}",
			pvp_combat_end   = "El combate instigado por {1} en contra de {2} terminó",

			pvp_player_damage_weapon = "{1} dañó a {2} con {3}",
			pvp_player_damage = "{1} dañó a {2}",
			pvp_misc_dmg = "{1} fue dañado por {2}",
			pvp_fall_damage = "{1} recibió daño por caida",
			pvp_world_crush_damage = "{1} fue aplastado contra el mundo",
			pvp_world_damage = "{1} fue dañado por el mundo",
			pvp_prop_self_damage = "{1} se dañó a si mismo con el prop {2}",
			pvp_prop_damage = "{1} fue dañado con el prop {2} creado por {3}",
			pvp_world_prop_damage = "{1} fue dañado con el un prop del mundo, {2}",
			pvp_dmg_self = "{1} se daño a si mismo",
			pvp_vehicle_damage = "{1} fue dañado por el vehículo {2} conducido por {3}",
			pvp_driverless_vehicle_damage = "{1} fue dañado por el vehículo {2} sin conductor",

			pvp_player_silent_death = "{1} fue asesinado en silencio",
			pvp_death_propkill_self = "{1} se hizo propkill a si mismo con {2}",
			pvp_death_propkill_world = "{1} el mundo le hizo propkill con {2}",
			pvp_death_propkill = "{1} fue asesinado con un prop de {2} usando {3}",
			pvp_death_player = "{1} fue asesinado por {2}",
			pvp_death_player_weapon = "{1} fue asesinado por {2} con {3}",
			pvp_death_world = "{1} fue asesinado por el mundo",
			pvp_death = "{1} fue asesinado",
			
			pvp_misc_dmg_prop = "{1} recibió {2} por el prop de un mundo {3}",
			pvp_misc_dmg_attacker = "{1} recibió {2} de {3}",
			pvp_misc_dmg_other = "{1} recibió {2}",
		},

		pvp_dmgtype_generic = "%u de daño",
		pvp_dmgtype_burn = "%u de daño por fuego",
		pvp_dmgtype_crush = "%u de daño por aplastamiento",
		pvp_dmgtype_fall = "%u de daño por caida",
		pvp_dmgtype_bullet = "%u de daño por bala",
		pvp_dmgtype_slash = "%u de daño por corte",
		pvp_dmgtype_vehicle = "%u de daño por vehiculo",
		pvp_dmgtype_blast = "%u de daño por explosión",
		pvp_dmgtype_club = "%u de daño por club",
		pvp_dmgtype_shock = "%u de daño por electrocutamiento",
		pvp_dmgtype_sonic = "%u de daño por sonic",
		pvp_dmgtype_energybeam = "%u de daño por laser",
		pvp_dmgtype_drown = "%u de daño por ahogamiento",
		pvp_dmgtype_nervegas = "%u de daño por neurotoxina",
		pvp_dmgtype_poison = "%u de daño por  veneno",
		pvp_dmgtype_radiation = "%u de daño por radiación",
		pvp_dmgtype_acid = "%u de daño por químico",
		pvp_dmgtype_gravgun = "%u de daño por gravity gun",
		pvp_dmgtype_plasma = "%u de daño por plasma",
		pvp_dmgtype_airboat = "%u de daño por arma de airboat",
		pvp_dmgtype_buckshot = "%u de daño por bala de escopeta",
		pvp_dmgtype_sniper = "%u de daño por bala de Sniper",

} end }
--lua/gmodadminsuite/modules/secondaryusergroups/lang/chinese.lua:
return gluapack()()
--lua/gmodadminsuite/modules/secondaryusergroups/lang/english.lua:
return gluapack()()
--lua/gmodadminsuite/cl_menu.lua:
return gluapack()()
--addons/gprofiler/lua/gprofiler/profilers/entvars/cl_entvars.lua:
GProfiler.EntVars = GProfiler.EntVars or {}
GProfiler.EntVars.ProfileActive = GProfiler.EntVars.ProfileActive or false
GProfiler.EntVars.StartTime = GProfiler.EntVars.StartTime or 0
GProfiler.EntVars.EndTime = GProfiler.EntVars.EndTime or 0

local TabPadding = 10
local MenuColors = GProfiler.MenuColors

function GProfiler.EntVars.DoTab(Content)
	local Header = vgui.Create("DPanel", Content)
	Header:SetSize(Content:GetWide(), 40)
	Header:SetPos(0, 10)
	Header.Paint = nil

	local StartButton = vgui.Create("DButton", Header)
	StartButton:SetText(GProfiler.EntVars.ProfileActive and GProfiler.Language.GetPhrase("profiler_stop") or GProfiler.Language.GetPhrase("profiler_start"))
	StartButton:SetTextColor(MenuColors.White)
	StartButton:SetFont("GProfiler.Menu.StartButton")
	StartButton:SizeToContents()
	StartButton:SetTall(30)
	StartButton:SetPos(Header:GetWide() - StartButton:GetWide() - TabPadding * 2, Header:GetTall() / 2 - StartButton:GetTall() / 2)
	StartButton.Paint = function(s, w, h)
		draw.RoundedBox(4, 0, 0, w, h, MenuColors.ButtonOutline)
		draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonBackground)

		if s:IsHovered() then
			draw.RoundedBox(4, 1, 1, w - 2, h - 2, MenuColors.ButtonHover)
		end
	end

	function StartButton:DoClick()
		if GProfiler.EntVars.ProfileActive then
			GProfiler.EntVars.ProfileActive = false
			GProfiler.EntVars.EndTime = SysTime()
			GProfiler.Menu.OpenTab("Entity Variables", GProfiler.EntVars.DoTab)
			self:SetText(GProfiler.Language.GetPhrase("profiler_start"))
		else
			GProfiler.EntVars.ProfileData = {}
			GProfiler.EntVars.ProfileActive = true
			GProfiler.EntVars.StartTime = SysTime()
			self:SetText(GProfiler.Language.GetPhrase("profiler_stop"))
		end
	end

	local TimeRunning = vgui.Create("DLabel", Header)
	TimeRunning:SetFont("GProfiler.Menu.SectionHeader")
	TimeRunning:SetText(GProfiler.TimeRunning(GProfiler.EntVars.StartTime, GProfiler.EntVars.EndTime, GProfiler.EntVars.ProfileActive) .. "s")
	TimeRunning:SizeToContents()
	TimeRunning:SetPos(Header:GetWide() - TimeRunning:GetWide() - StartButton:GetWide() - TabPadding * 3, Header:GetTall() / 2 - TimeRunning:GetTall() / 2)
	TimeRunning:SetTextColor(MenuColors.White)
	function TimeRunning:Think()
		if GProfiler.EntVars.ProfileActive then
			self:SetText(GProfiler.TimeRunning(GProfiler.EntVars.StartTime, 0, GProfiler.EntVars.ProfileActive) .. "s")
			self:SizeToContents()
			self:SetPos(Header:GetWide() - self:GetWide() - StartButton:GetWide() - TabPadding * 3, Header:GetTall() / 2 - self:GetTall() / 2)
		end
	end

	local SectionHeader = vgui.Create("DPanel", Content)
	SectionHeader:SetSize(Content:GetWide(), 40)
	SectionHeader:SetPos(0, Header:GetTall())
	SectionHeader.Paint = nil

	local Header, HeaderText = GProfiler.Menu.CreateHeader(SectionHeader, GProfiler.Language.GetPhrase("profiler_results"), 0, 0, SectionHeader:GetWide() - 5, SectionHeader:GetTall())

	local ProfilerContent = vgui.Create("DPanel", Content)
	ProfilerContent:SetSize(Content:GetWide() - 5, Content:GetTall() - SectionHeader:GetTall() - Header:GetTall())
	ProfilerContent:SetPos(0, SectionHeader:GetTall() + Header:GetTall())
	ProfilerContent.Paint = nil

	local ProfilerResults = vgui.Create("DListView", ProfilerContent)
	ProfilerResults:SetSize(ProfilerContent:GetWide() - TabPadding * 2, ProfilerContent:GetTall() - TabPadding * 2)
	ProfilerResults:SetPos(TabPadding, TabPadding)
	ProfilerResults:SetMultiSelect(false)
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("entity"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("variable"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("times_updated"))
	ProfilerResults:AddColumn(GProfiler.Language.GetPhrase("current_value"))

	for k, v in pairs(GProfiler.EntVars.ProfileData or {}) do
		if not v.GProfiler_SavedEnt then continue end
		for var, val in pairs(v) do
			if var == "GProfiler_SavedEnt" or var == "GProfiler_CurrentValues" then continue end
			local Line = ProfilerResults:AddLine(v.GProfiler_SavedEnt, var, val, v.GProfiler_CurrentValues[var] or "Unknown")
			Line.OnRightClick = function()
				local menu = DermaMenu()
				menu:AddOption(GProfiler.CopyLang("entity"), function() SetClipboardText(v.GProfiler_SavedEnt) end):SetIcon("icon16/page_copy.png")
				menu:AddOption(GProfiler.CopyLang("variable"), function() SetClipboardText(var) end):SetIcon("icon16/page_copy.png")
				menu:AddOption(GProfiler.CopyLang("times_updated"), function() SetClipboardText(val) end):SetIcon("icon16/page_copy.png")
				menu:AddOption(GProfiler.CopyLang("current_value"), function() SetClipboardText(v.GProfiler_CurrentValues[var] or "Unknown") end):SetIcon("icon16/page_copy.png")
				menu:Open()
			end
		end
	end

	ProfilerResults:SortByColumn(3, true)

	GProfiler.StyleDListView(ProfilerResults)
end

GProfiler.Menu.RegisterTab("Entity Variables", "icon16/database_edit.png", 6, GProfiler.EntVars.DoTab, function()
	if GProfiler.EntVars.ProfileActive then
		return "", MenuColors.ActiveProfile
	end
	return nil
end)

function GProfiler.EntVars.CollectData(ent, var, _, val)
	if not GProfiler.EntVars.ProfileActive then return end

	if not GProfiler.EntVars.ProfileData[ent] then
		GProfiler.EntVars.ProfileData[ent] = {
			GProfiler_SavedEnt = tostring(ent),
			GProfiler_CurrentValues = {}
		}
	end

	GProfiler.EntVars.ProfileData[ent][var] = (GProfiler.EntVars.ProfileData[ent][var] or 0) + 1

	GProfiler.EntVars.ProfileData[ent].GProfiler_CurrentValues[var] = tostring(val)
end

local function CaptureEnt(ent, attempts)
	if not IsValid(ent) then return end
	if not ent.GetNetworkVars then
		if attempts and attempts > 5 then return end
		timer.Simple(.5, function() CaptureEnt(ent, (attempts or 0) + 1) end)
		return
	end

	for k, v in pairs(ent:GetNetworkVars() or {}) do
		local GProfilerIdent = string.format("GProfiler.%s", k)
		if ent[GProfilerIdent] then continue end
		ent[GProfilerIdent] = true
		ent:NetworkVarNotify(k, GProfiler.EntVars.CollectData)
	end
end

hook.Add("OnEntityCreated", "GProfiler.EntVars.CaptureEnt", function(ent) timer.Simple(0, function() CaptureEnt(ent) end) end)
hook.Add("InitPostEntity", "GProfiler.EntVars.CaptureEnts", function()
	for k, v in ipairs(ents.GetAll()) do CaptureEnt(v) end
end)

--lua/autorun/hitman_absolution_47_classic.lua:
--Add Playermodel
player_manager.AddValidModel( "Hitman Agent 47 Classic Suit", "models/player/hitman_absolution_47_classic.mdl" )
player_manager.AddValidHands( "Hitman Agent 47 Classic Suit", "models/arms/hitman_absolution_47_classic_arms.mdl", 0, "00000000" )

local Category = "Hitman Absolution"

local NPC =
{
	Name = "Agent 47 Classic Suit (Friendly)",
	Class = "npc_citizen",
	KeyValues = { citizentype = 4 },
	Model = "models/npc/hitman_absolution_47_classic_f.mdl",
	Category = Category
}

list.Set( "NPC", "hitman_absolution_47_classic_friendly", NPC )

local NPC =
{
	Name = "Agent 47 Classic Suit (Enemy)",
	Class = "npc_combine_s",
	Numgrenades = "4",
	Model = "models/npc/hitman_absolution_47_classic_e.mdl",
	Category = Category
}

list.Set( "NPC", "hitman_absolution_47_classic_enemy", NPC )

--lua/autorun/hl2beta_childworkers.lua:
-- jankily slapped together by CrazyBubba64 November 6th, 2019.
-- Special thanks to ZeqMacaw for Crowbar, the god-tier model decompiler that makes the world go 'round.

player_manager.AddValidModel( "Male Child Worker", "models/Player/child_worker_m1.mdl" )
player_manager.AddValidModel( "Female Child Worker", "models/Player/child_worker_f1.mdl" )

local Category = "Humans + Resistance"

local NPC1 = {
	Name = "Child Worker (Male)",
	Class = "npc_citizen",
	Category = Category,
	Model = "models/humans/group05/male01.mdl",
	KeyValues = { citizentype = CT_UNIQUE, SquadName = "resistance" },
}

local NPC2 = {
	Name = "Child Worker (Female)",
	Class = "npc_citizen",
	Category = Category,
	Model = "models/humans/group05/female01.mdl",
	KeyValues = { citizentype = CT_UNIQUE, SquadName = "resistance" },
}

list.Set( "NPC", "npc_child_worker_m1", NPC1 )
list.Set( "NPC", "npc_child_worker_f1", NPC2 )
--lua/autorun/iss_delsin_lua.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/base.lua:
--[[--------------------------------------------
              Minigame Games Module
--------------------------------------------]]--

if SERVER then
    util.AddNetworkString("Minigames.NewGame")
end

--[[----------------------------
         Minigame Module
----------------------------]]--

MinigameObject = {}

--[[----------------------------
           Properties
----------------------------]]--

MinigameObject.Name = ""
MinigameObject.GameID = ""

MinigameObject.__CustomVars = {}

MinigameObject.ThrowError = Minigames.ThrowError
function MinigameObject:Checker(...)
    Minigames.Checker(...)
end

if SERVER then
    Minigames.SendCS("minigames/games/gamebase/base_cl.lua")
    Minigames.SendCS("minigames/games/gamebase/config.lua")
else
    Minigames.AddInc("minigames/games/gamebase/base_cl.lua")
end
Minigames.AddInc("minigames/games/gamebase/config.lua")

--[[----------------------------
         Event Functions
----------------------------]]--

function MinigameObject:LeftClick(Trace, Owner, FirstTime)
    self:Checker(Trace, "table", 1)
    self:Checker(Owner, "player", 2)
end

function MinigameObject:RightClick(Trace, Owner)
    self:Checker(Trace, "table", 1)
    self:Checker(Owner, "player", 2)
end

function MinigameObject:Reload(Trace, Owner)
    self:Checker(Trace, "table", 1)
    self:Checker(Owner, "player", 2)
end

function MinigameObject:Think(Trace, Owner)
    -- NO CHECKER, IS TOO EXPENSIVE
end

function MinigameObject:Deploy(Trace, Owner)
    self:Checker(Trace, "table", 1)
    self:Checker(Owner, "player", 2)
end

function MinigameObject:RollUp(Trace, Owner)
    self:Checker(Trace, "table", 1)
    self:Checker(Owner, "player", 2)
end


--[[----------------------------
            Variables
----------------------------]]--

function MinigameObject:SetGameName(Name)
    self:Checker(Name, "string", 1)
    self.Name = Name
end

function MinigameObject:GetGameID()
    if ( self.GameID == "" ) then
        self.ThrowError([[The GameID is empty.]], self.GameID, "string")
    end

    return self.GameID
end


--[[----------------------------
           Game State
----------------------------]]--

if SERVER then
    Minigames.SendCS("minigames/games/gamebase/customvar.lua")
end
Minigames.AddInc("minigames/games/gamebase/customvar.lua")

MinigameObject:AddNewVar("Active", "bool", false)


--[[----------------------------
         Extra Modules
----------------------------]]--

if SERVER then
    Minigames.AddInc("minigames/games/gamebase/owner.lua")
    Minigames.AddInc("minigames/games/gamebase/network.lua")
    Minigames.AddInc("minigames/games/gamebase/player.lua")
    Minigames.AddInc("minigames/games/gamebase/entity.lua")
    Minigames.AddInc("minigames/games/gamebase/trigger.lua")
    Minigames.AddInc("minigames/games/gamebase/timer.lua")
    Minigames.AddInc("minigames/games/gamebase/hook.lua")
    Minigames.AddInc("minigames/games/gamebase/sound.lua")
    Minigames.AddInc("minigames/games/gamebase/voice.lua")
    Minigames.AddInc("minigames/games/gamebase/playerlist.lua")
    Minigames.AddInc("minigames/games/gamebase/bot.lua")
    Minigames.AddInc("minigames/games/gamebase/reward.lua")

    Minigames.SendCS("minigames/games/gamebase/owner.lua")
    Minigames.SendCS("minigames/games/gamebase/network.lua")
    Minigames.SendCS("minigames/games/gamebase/sound.lua")
    Minigames.SendCS("minigames/games/gamebase/reward.lua")
else
    Minigames.AddInc("minigames/games/gamebase/owner.lua")
    Minigames.AddInc("minigames/games/gamebase/network.lua")
    Minigames.AddInc("minigames/games/gamebase/sound.lua")
    Minigames.AddInc("minigames/games/gamebase/reward.lua")
end


--[[----------------------------
       Spawning Functions
----------------------------]]--

function MinigameObject:CreateNewActiveGame(owner)
    hook.Run("Minigames.PreNewGame", owner, self:GetGameID())

    self.CreateNewActiveGame = nil
    self:SetOwner( owner )

    if SERVER then
        net.Start("Minigames.NewGame")
            net.WriteBool( true )
            net.WritePlayer( owner )
            net.WriteString( self:GetGameID() )
        net.Broadcast()
    end

    hook.Run("Minigames.PostNewGame", owner, self)

    return self
end

function MinigameObject:SafeRemoveActiveGame()
    if SERVER and self:IsActive() then return false end

    local CurrentOwner = self:GetOwner()
    CurrentOwner:SetNWBool("Minigames.HasGame", false)

    hook.Run("Minigames.PreRemoveGame", CurrentOwner, self)

    if SERVER then
        self:RemoveHooks()
        self:RemoveAllTimers()
        for Name, Chrono in ipairs( self.__Chronometers ) do
            self:RemoveChronometer( Name )
        end
        self:RemoveAllPlayers()

        hook.Remove("PostPlayerDeath", "Minigames.PostPlayerDeath." .. self:GetGameID() .. "." .. self:GetOwnerID() )
        hook.Remove("Minigames.PostBotDeath", "Minigames.PostBotDeath." .. self:GetGameID() .. "." .. self:GetOwnerID() )

        net.Start("Minigames.NewGame")
            net.WriteBool( false )
            net.WritePlayer( CurrentOwner )
        net.Broadcast()
    end

    Minigames.ActiveGames[ CurrentOwner ] = nil

    hook.Run("Minigames.PostRemoveGame", CurrentOwner)
end

function MinigameObject:SpawnPlayZone()
    undo.Create("minigame." .. self:GetGameID() .. "." .. self:GetOwnerID())
        undo.SetPlayer( self:GetOwner() )

        for _, ent in ipairs( self:GetEntities(true) ) do
            undo.AddEntity( ent )
        end

        for _, AliasTable in pairs( self.__EntitiesAlias ) do
            for _, ent in ipairs( AliasTable ) do
                undo.AddEntity( ent )
            end
        end

        for _, ent in ipairs( self:GetTriggers(true) ) do
            undo.AddEntity( ent )
        end

        local InjectScript = hook.Run("Minigames.SpawnPlayZone", self:GetOwner(), self)
        if isfunction(InjectScript) then
            undo.AddFunction(InjectScript)
        end

        undo.SetPlayer( self:GetOwner() )
    undo.Finish(self.Name .. " - " .. self:GetOwner():Nick())
end

MinigameObject.__index = MinigameObject


--[[----------------------------
           Networking
----------------------------]]--

if CLIENT then
    net.Receive("Minigames.NewGame", function()
        local IsNew = net.ReadBool()
        local Owner = net.ReadPlayer()

        if ( IsNew == false ) and Minigames.ActiveGames[ Owner ] then
            Minigames.ActiveGames[ Owner ]:SafeRemoveActiveGame()
            return
        end

        local GameID = net.ReadString()
        if Minigames.Games[GameID] == nil then return end

        local GameScript = table.Copy( Minigames.Games[GameID] )
        GameScript:CreateNewActiveGame( Owner )

        Minigames.ActiveGames[ Owner ] = GameScript
    end)
end


--[[----------------------------
          Game Register
----------------------------]]--

local LocalizedGameScript = MinigameObject
MinigameObject = nil

function Minigames.CreateNewGame()
    local GameScript = table.Copy( LocalizedGameScript )
    GameScript.GameID = string.StripExtension( string.GetFileFromFilename(debug.getinfo(2, "S").short_src) )

    return GameScript
end

function Minigames.RegisterNewGame(GameScript)
    if GameScript == nil then return end

    if ( hook.Run("Minigames.PreRegisterGame", GameScript:GetGameID(), GameScript) == false ) then
        GameScript = nil
        return
    end

    Minigames.Games[ GameScript:GetGameID() ] = GameScript

    if CLIENT then
        for _, All in ipairs( GameScript:GetAllConfig() ) do
            if ( All["Header"] ) then continue end

            local ConVarName = "minigames_" .. GameScript:GetGameID() .. "_" .. string.lower( All["Name"] )
            local ConVarValue = 0
            local ConVarDesc = All["Config"]["desc"] or Minigames.GetPhrase( GameScript:GetGameID() .. "." .. string.lower( All["Name"] ) .. ".desc" )

            if ( isbool( All["Config"]["def"] ) ) then
                ConVarValue = ( All["Config"]["def"] == true ) and 1 or 0
                All["Config"]["min"] = 0
                All["Config"]["max"] = 1
            elseif istable( All["Config"]["def"] ) then
                ConVarValue = 1
                All["Config"]["min"] = 1
                All["Config"]["max"] = #All["Config"]["def"]
            else
                ConVarValue = All["Config"]["def"] or All["Config"]["min"]
            end

            if (ConVarValue == nil) then
                Minigames.ThrowError("The default value is not valid", ConVarValue, "bool/number")
            end

            CreateClientConVar( ConVarName, ConVarValue, true, true, ConVarDesc, All["Config"]["min"], All["Config"]["max"] )
        end
    end

    hook.Run("Minigames.PostRegisterGame", GameScript:GetGameID(), GameScript)
end
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/owner.lua:
--[[--------------------------------------------
            Minigame Module - Owner
--------------------------------------------]]--

MinigameObject.__Owner = NULL
MinigameObject.__OwnerID = ""

if SERVER then
    util.AddNetworkString("Minigames.OwnerToolTip")
end

--[[----------------------------
        Trigger Functions
----------------------------]]--

function MinigameObject:GetOwner()
    return self.__Owner
end

function MinigameObject:GetOwnerID()
    return self.__OwnerID
end

function MinigameObject:GetOwnerName()
    return self.__Owner:Nick()
end

function MinigameObject:SetOwner(Owner)
    self:Checker(Owner, "player", 1)

    Owner:SetNWBool("Minigames.HasGame", true)

    self.__Owner = Owner
    self.__OwnerID = Owner:SteamID()

    self.SetOwner = nil
end

function MinigameObject:SendToolTip(msg, notify, length)
    if CLIENT then return end

    self:Checker(msg, "string/table", 1)
    local arg = ""

    if istable(msg) then
        arg = msg[2]
        msg = msg[1]
    end

    net.Start("Minigames.OwnerToolTip")
        net.WriteString(msg)
        net.WriteUInt(notify or 0, 3)
        net.WriteFloat(length or 5)
        net.WriteString(arg)
    net.Send(self:GetOwner())
end

if CLIENT then
    net.Receive("Minigames.OwnerToolTip", function()
        local phrase = Minigames.GetPhrase(net.ReadString())
        local notify = net.ReadUInt(3)
        local length = net.ReadFloat()
        local arg = net.ReadString()

        if arg ~= "" then
            phrase = string.format(phrase, arg)
        end

        notification.AddLegacy(phrase, notify, length)
        surface.PlaySound( "buttons/lightswitch2.wav" )
    end)
end
--addons/minigame-tool-assistant/lua/minigames/games/gamebase/reward.lua:
--[[--------------------------------------------
            Minigame Module - Reward
--------------------------------------------]]--

local MAX_ARGUMENTS = 3
local MAX_SIZEUINT = 8

if SERVER then
    util.AddNetworkString("Minigames.AddReward")
    util.AddNetworkString("Minigames.RemoveReward")
    util.AddNetworkString("Minigames.ClearRewards")
end

--[[----------------------------
        Reward Functions
----------------------------]]--

MinigameObject.__Rewards = {}

function MinigameObject:AddReward(Reward)
    self:Checker(Reward, "table", 1)

    local Index = table.insert( self.__Rewards, Reward )

    hook.Run("Minigames.RewardAdded", self:GetOwner(), Reward)

    if ( CLIENT ) then return end

    net.Start("Minigames.AddReward")
        net.WritePlayer( self:GetOwner() )
        net.WriteString( Reward:GetRewardID() )
        net.WriteUInt( Index, MAX_SIZEUINT )
        net.WriteUInt( #Reward.Values, MAX_ARGUMENTS )
        for _, value in ipairs( Reward.Values ) do
            net.WriteType(value)
        end
    net.Broadcast()
end

function MinigameObject:RemoveReward(Index)
    self:Checker(Index, "number", 1)

    table.remove( self.__Rewards, Index )

    hook.Run("Minigames.RewardRemoved", self:GetOwner(), Index)

    if ( CLIENT ) then return end

    net.Start("Minigames.RemoveReward")
        net.WritePlayer(self:GetOwner())
        net.WriteUInt(Index, MAX_SIZEUINT)
    net.Broadcast()
end

function MinigameObject:ClearRewards()
    self.__Rewards = {}

    if ( CLIENT ) then return end

    net.Start("Minigames.ClearRewards")
        net.WritePlayer(self:GetOwner())
    net.Broadcast()
end

function MinigameObject:GetRewards()
    return table.Copy(self.__Rewards)
end

function MinigameObject:GiveReward(TargetPlayers)
    local Owner = self:GetOwner()
    timer.Simple(0, function()
        for _, ply in ipairs(TargetPlayers) do
            if #self.__Rewards == 0 then
                Minigames.BroadcastMessage( Minigames.StringFormat( Minigames.GetPhrase("reward.none"), ply ) )
                continue
            end

            for _, Reward in ipairs(self.__Rewards) do
                Reward:GiveReward(Owner, ply)
                Minigames.BroadcastMessage( Minigames.StringFormat( Minigames.GetPhrase("reward.given"), ply, Reward:GetNameAmount() ) )
            end
        end
    end)
end


--[[----------------------------
           Networking
----------------------------]]--

if ( SERVER ) then

    net.Receive("Minigames.AddReward", function(_, ply)
        if not Minigames.IsAllowed(ply) then return end

        local GameScript = Minigames.GetOwnerGame(ply)
        if not GameScript then return end
        if GameScript:IsActive() then return end

        local Reward = Minigames.GetReward( net.ReadString() )
        local Amount = net.ReadUInt(MAX_ARGUMENTS)
        for i = 1, Amount do
            Reward:AddValue( net.ReadType() )
        end

        GameScript:AddReward(Reward)
    end)

    net.Receive("Minigames.RemoveReward", function(_, ply)
        if not Minigames.IsAllowed(ply) then return end

        local GameScript = Minigames.GetOwnerGame(ply)
        if not GameScript then return end
        if GameScript:IsActive() then return end

        local Index = net.ReadUInt(MAX_SIZEUINT)
        GameScript:RemoveReward(Index)
    end)

elseif ( CLIENT ) then

    net.Receive("Minigames.AddReward", function()
        local Owner = net.ReadPlayer()
        if not Minigames.ActiveGames[Owner] then return end

        local GameScript = Minigames.GetOwnerGame(Owner)
        local Reward = Minigames.GetReward( net.ReadString() )
        Reward.Index = net.ReadUInt(MAX_SIZEUINT)

        local Amount = net.ReadUInt(MAX_ARGUMENTS)
        for i = 1, Amount do
            Reward:AddValue( net.ReadType() )
        end

        GameScript:AddReward(Reward)
    end)

    net.Receive("Minigames.RemoveReward", function()
        local Owner = net.ReadPlayer()
        if not Minigames.ActiveGames[Owner] then return end

        local GameScript = Minigames.GetOwnerGame(Owner)
        local Index = net.ReadUInt(MAX_SIZEUINT)

        GameScript:RemoveReward(Index)
    end)

    net.Receive("Minigames.ClearRewards", function()
        local Owner = net.ReadPlayer()
        if not Minigames.ActiveGames[Owner] then return end

        local GameScript = Minigames.GetOwnerGame(Owner)
        GameScript:ClearRewards()
    end)

end
--addons/minigame-tool-assistant/lua/minigames/games/deathmatch.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/example.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/hwprewrite.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/minigames/rewards/voidcases.lua:
local Reward = Minigames.CreateNewReward()

Reward:SetName("VoidCases")
Reward:SetNameAmount(function(item, amount)
    return amount .. " cases of Case ID(" .. item .. ")"
end)
Reward:SetIcon("minigames/icons/voidcases_icon.png")

Reward:SetFunctionReward(function(owner, ply, item, amount)
    if not isnumber(amount) then amount = 1 end

    RunConsoleCommand("voidcases_giveitem", ply:SteamID64(), item, amount)
end)

Reward:AddArgument({ --> item
    Name = "Item",
    Type = "text",
    Default = "1",
    Placeholder = "Item ID",
    Numeric = true
})

Reward:AddArgument({ --> amount
    Name = "Amount",
    Type = "slider",
    Min = 1,
    Max = 15,
    Default = 1
})

Minigames.RegisterReward(Reward)
--addons/mayor_voting/lua/cl_mayorvoting.lua:
if VOTING then VOTING = VOTING
else VOTING = {} end

VOTING.CurrentHeight = 50
include('cl_votingfonts.lua')
include('sh_votingconfig.lua')
--Include panels
include('panels/cl_votingpanel.lua')
include('panels/cl_playericon.lua')

function VOTING.OpenVoteScreen( settings )
	if not LocalPlayer() then return end
	VOTING.MainWindowOpen = true
	if !VotingMainWindow then
		VotingMainWindow = vgui.Create( "DFrame" )
		VotingMainWindow:SetSize( ScrW(), 300 )
		VotingMainWindow:SetDraggable( false )
		VotingMainWindow:ShowCloseButton( false )
		VotingMainWindow:SetTitle( "" )
		VotingMainWindow:SetBackgroundBlur( true )
		VotingMainWindow.VoteTime = settings.time
		VOTING.CanCloseTime = CurTime() + settings.time
		VotingMainWindow.Paint = VOTING.PaintMainWindow
		VOTING.VoteManager = {}
		
		//Voting panels list
		local VotingPanelsList = vgui.Create( "DPanelList", VotingMainWindow )
		VotingPanelsList:SetPadding( 0 )
		VotingPanelsList:SetSpacing( 5 )
		VotingPanelsList:SetAutoSize( true )
		VotingPanelsList:SetNoSizing( false )
		VotingPanelsList:EnableHorizontal( true )
		VotingPanelsList:EnableVerticalScrollbar( false )
		VotingPanelsList.Paint = function() end
		VotingPanelsList:SetWide(ScrW() - (ScrW() / 10))
		VotingPanelsList:SetPos((ScrW() / 10) / 2, 70)
		
		//Create voting panels
		for k,v in pairs(settings.Candidates) do
			local VotingPanel = vgui.Create( "PlayerVotingPanel" )
			if IsValid(v.player) then
			VotingPanel:SetPlayer(v.player)
			VotingPanel:SetColor(VOTING.NewVotingPanelColor())
			VotingPanel.DoClick = function()
				if LocalPlayer().HasVoted then return end
				local player = VotingPanel:GetPlayer()
				if player then
				LocalPlayer():ConCommand("mayor_vote "..k)
				VotingPanel:ToggleSelect(true)
				LocalPlayer().HasVoted = true
				if (VOTING.Settings.ForceMouseCursor) then gui.EnableScreenClicker(false) end
				end
			end
			else
			VotingPanel:SetColor(VOTING.NewVotingPanelColor())
			VotingPanel:SetNoActionEnbaled(true)
			VotingPanel:SetText("Disconnected")
			end
			table.insert(VOTING.VoteManager, VotingPanel)
			VotingPanelsList:AddItem(VotingPanel)
		end
		
		local maxwidth = VotingPanelsList:GetWide()
		local curwidth  = 0
		local items = 0
		for k,v in pairs(VotingPanelsList:GetItems()) do
			curwidth = curwidth + (v.CurrentWidth) + 5
			if (curwidth > maxwidth) then break
			else items = (items + 1) end
		end
		VotingPanelsList:SetWide(355 * items)
		VotingPanelsList:SetPos((ScrW() - VotingPanelsList:GetWide()) / 2, 70)
		local rows = 0
		local panelheight = 0
		rows = math.ceil(#VOTING.VoteManager / items)
		
		VOTING.MaxHeight = 130 + (70 * rows)
		VotingMainWindow:SetSize( ScrW(), VOTING.MaxHeight )
		if VOTING.Settings.ForceMouseCursor then gui.EnableScreenClicker(true) end
	else
		VOTING.CloseVoteScreen()
	end
end
//concommand.Add("voting", VOTING.OpenVoteScreen)
//usermessage.Hook("VOTING_Open", VOTING.OpenVoteScreen)

local FKeyReleased = false

function VOTING.PaintMainWindow()	
	//Paint window itself
	surface.SetDrawColor(VOTING.Theme.WindowColor)
	
	VOTING.CurrentHeight = math.Approach( VOTING.CurrentHeight, VOTING.MaxHeight, FrameTime() * 400 )
	surface.DrawRect(0, 0, ScrW(), VOTING.CurrentHeight)
	
	//Banner heading
	local time = math.Clamp(VOTING.CanCloseTime - CurTime(), 0, VotingMainWindow.VoteTime)
	local timetext = string.FormattedTime(time, "%02i:%02i")
	local text = VOTING.Settings.VotingTitle .. " (" .. timetext  ..")"
	if VOTING.ResultsScreen then text = VOTING.Settings.ResultsTitle end
	draw.DrawText(text, "Bebas40Font", (ScrW() / 2), 10, VOTING.Theme.TitleTextColor, TEXT_ALIGN_CENTER )
	
	//Vote ticker
	if VOTING.VoteTickerAlpha > -1 then
		VOTING.VoteTickerAlpha = math.Clamp(VOTING.VoteTickerAlpha + FrameTime() * VOTING.NotificationDirFT * 300, 0, 190)
		
		local c = VOTING.VoteTickerColor
		local r,g,b = c.r,c.g,c.b
		local w,h = surface.GetTextSize(VOTING.VoteTickerMessage)

		local ypos = (ScrW() / 2) - (w / 4)
		draw.WordBox(2, ypos, (VOTING.MaxHeight - 30), VOTING.VoteTickerMessage, "OpenSans18Font", Color(r,g,b,VOTING.VoteTickerAlpha), color_white)
	end
	
end

function VOTING.CloseVoteScreen()
	if VotingMainWindow then
		VotingMainWindow:Remove()
		VotingMainWindow = nil
		VOTING.CanCloseTime = nil
		VOTING.LastPanelNumber = nil
		VOTING.VoteTickerAlpha = -1
		VOTING.VoteTickerMessage = "Bir oy kullanıldı."
		VOTING.ResultsScreen = nil
		LocalPlayer().HasVoted = nil
		FKeyReleased = false
	end
	VOTING.MainWindowOpen = false
end

--NewVote Network Message
net.Receive("Voting_NewVote", function(l,c)
	 local votedata = net.ReadTable()
	 local votetime = VOTING.VoteTime
	 local settings = {}
	 settings.Candidates = votedata
	 settings.time = votetime
	 VOTING.OpenVoteScreen( settings )
	 if VOTING.Settings.MenuSounds then surface.PlaySound(VOTING.Settings.NewVoteSound) end
end)

--EndVote Network Message
net.Receive("Voting_EndVote", function(l,c)
	 local winningplayer = net.ReadEntity()

	 if winningplayer and not (winningplayer == NULL) then
			VOTING.ResultsScreen = true
			if not VOTING.VoteManager then return end
			for k,v in pairs(VOTING.VoteManager) do
				if not (v:GetPlayer() == winningplayer) then
					v:SetNoActionEnbaled(true)
				else
					VOTING.VoteTickerAlpha = 0
					VOTING.VoteTickerMessage = string.format("Tebrikler! Yeni başkan %s!", winningplayer:Nick())
					VOTING.VoteTickerColor = v:GetColor()
					
				end 
			end 
	 end
	 if VOTING.Settings.MenuSounds then surface.PlaySound(VOTING.Settings.VoteResultsSound) end
	 timer.Simple(VOTING.Settings.CloseTimeAfterVoteEnds, VOTING.CloseVoteScreen)
end)

--Vote Cast Network Message
net.Receive("Voting_VoteCast", function(l,c)
	 local candidate = net.ReadEntity()
	 local player = net.ReadEntity()

	 if not VOTING.MainWindowOpen then return end
	 for k,v in pairs(VOTING.VoteManager) do
		if (v:GetPlayer() == candidate) then
			v:IncreaseVote(1)
			
			--Show vote ticker update
			if VOTING.Settings.ShowVoteTickerUpdates then
				VOTING.VoteTickerAlpha = 0
				VOTING.VoteTickerMessage = string.format("%s oyuncusu %s oyuncuyu oyladı", player:Nick(), candidate:Nick())
				VOTING.VoteTickerColor = v:GetColor()
			end
		end
	 end
end)

VOTING.VoteTickerAlpha = -1
VOTING.VoteTickerMessage = "Bir oy kullanıldı"
VOTING.VoteTickerColor = Color(26,83,255)
VOTING.NotificationDirFT = 1

VOTING.VotingStaticColors = {Color(26,83,255),Color(255,77,77),Color(230,184,0),Color(0,179,54)}

local ConfirmMenuVisible = false
function VOTING.ConfirmCandidacy()
	if ConfirmMenuVisible then return end
	ConfirmMenuVisible = true
	Derma_Query("Yeni seçimde olmak istiyormusun, " .. LocalPlayer():Nick() .. ", ?", "Başkanın Sekreteri",
			"Evet " .. (CUR or GAMEMODE.Config.currency or "$") .. tostring(VOTING.CandidateCost), function() LocalPlayer():ConCommand("mayor_vote_enter") ConfirmMenuVisible = false end,
			"Hayır", function() ConfirmMenuVisible = false end
			)
end
usermessage.Hook("VOTING_Confirm", VOTING.ConfirmCandidacy)

function VOTING.NewVotingPanelColor()
	if not VOTING.LastPanelNumber then VOTING.LastPanelNumber = 1 
	else VOTING.LastPanelNumber = (VOTING.LastPanelNumber + 1) end
	
	if VOTING.VotingStaticColors[VOTING.LastPanelNumber] then
	return VOTING.VotingStaticColors[VOTING.LastPanelNumber]
	else
		local part = math.random(1,3)
		if part == 1 then return Color(255,math.random(1,255),math.random(1,255) )
		elseif part == 2 then return Color(math.random(1,255),255,math.random(1,255) )
		else return Color(math.random(1,255),math.random(1,255),255 ) end
	end
end

local function MayorVotingChatNotice(msg)
	local text = msg:ReadString() or "No message."
	chat.AddText(VOTING.Theme.NoticePrefixColor, VOTING.Settings.NoticePrefix .. " ", VOTING.Theme.NoticeTextColor, text )
end
usermessage.Hook("Voting_ChatNotice", MayorVotingChatNotice)
--addons/mayor_voting/lua/cl_votingfonts.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/autorun/includes/modules/inputhook.lua:
local IsValid = IsValid
local pairs = pairs
local RealTime = RealTime
local type = type
local IsKeyDown = input.IsKeyDown
local IsMouseDown = input.IsMouseDown
local IsGameUIVisible = gui.IsGameUIVisible
local IsConsoleVisible = gui.IsConsoleVisible

_G.inputhook = {}

local HoldTime = 0.3

local LastPress = nil
local LastKey = nil
local KeyControls = {}

local function getEventArgs( a, b, c )
	if c == nil then
		return a, b
	else
		return b, c
	end
end

local function InputThink()

	if IsGameUIVisible() or IsConsoleVisible() then return end

	local dispatch, down, held, downFunc

	for key, handles in pairs( KeyControls ) do
		for name, tbl in pairs( handles ) do

			dispatch = false
			downFunc = tbl.Mouse and IsMouseDown or IsKeyDown

			if tbl.Enabled then

				-- Key hold (repeat press)
				if tbl.LastPress and tbl.LastPress + HoldTime < RealTime() then
					dispatch = true
					down = true
					held = true

					tbl.LastPress = RealTime()
				end

				-- Key release
				if not downFunc( key ) then
					dispatch = true
					down = false

					tbl.Enabled = false
				end

			else

				-- Key press
				if downFunc( key ) then
					dispatch = true
					down = true

					tbl.Enabled = true
					tbl.LastPress = RealTime()
				end

			end

			if dispatch then
				-- Use same behavior as the hook system
				if istable(name) then
					if IsValid(name) then
						tbl.Toggle( name, down, held, key )
					else
						handles[ name ] = nil
					end
				else
					tbl.Toggle( down, held, key )
				end
			end

		end
	end

end
hook.Add( "Think", "InputManagerThink", InputThink )

---
-- Adds a callback to be dispatched when a key is pressed.
--
-- @param key		`KEY_` enum.
-- @param name		Unique identifier or a valid object.
-- @param onToggle	Callback function.
--
function inputhook.Add( key, name, onToggle, isMouse )

	if not (key and onToggle) then return end

	if not KeyControls[ key ] then
		KeyControls[ key ] = {}
	end

	KeyControls[ key ][ name ] = {
		Enabled = false,
		LastPress = 0,
		Toggle = onToggle,
		Mouse = isMouse
	}

end

function inputhook.AddKeyPress( key, name, onToggle )

	inputhook.Add( key, name, function( a, b, c )
		local down, held = getEventArgs(a, b, c)

		-- ignore if key down, but held OR key is not down
		if down then
			if held then return end
		else
			return
		end

		onToggle( a, b, c )
	end )

end

function inputhook.AddKeyRelease( key, name, onToggle )

	inputhook.Add( key, name, function( a, b, c )
		local down, held = getEventArgs(a, b, c)

		-- ignore if key is down
		if down then return end

		onToggle( a, b, c )
	end )

end

---
-- Removes a registered key callback.
--
-- @param key	`KEY_` enum.
-- @param name	Unique identifier or a valid object.
--
function inputhook.Remove( key, name )

	if not KeyControls[ key ] then return end

	KeyControls[ key ][ name ] = nil

end

--addons/media_player_fixed_edition/lua/autorun/includes/modules/spritesheet.lua:
return gluapack()()
--addons/media_player_fixed_edition/lua/mediaplayer/services/browser.lua:
DEFINE_BASECLASS( "mp_service_base" )

SERVICE.Name 	= "Browser Base"
SERVICE.Id 		= "browser"
SERVICE.Abstract = true

if CLIENT then

	function SERVICE:GetBrowser()
		return self.Browser
	end

	function SERVICE:OnBrowserReady( browser )
		local resolution = MediaPlayer.Resolution()
		local w = resolution * 16 / 9
		local h = resolution

		if IsValid(self.Entity) then
			-- normalize resolution to the entity screen size
			local config = self.Entity:GetMediaPlayerConfig()
			local entwidth = config.width or w
			local entheight = config.height or resolution
			w = resolution * (entwidth / entheight)
		end

		MediaPlayer.SetBrowserSize( browser, w, h )

		-- Implement this in a child service
	end

	function SERVICE:SetVolume( volume )
		-- Implement this in a child service
	end

	function SERVICE:Volume( volume )
		local origVolume = volume

		volume = BaseClass.Volume( self, volume )

		if origVolume and IsValid( self.Browser ) then
			self:SetVolume( volume )
		end

		return volume
	end

	function SERVICE:Play()

		BaseClass.Play( self )

		if self.Browser and IsValid(self.Browser) then
			self:OnBrowserReady( self.Browser )
		else

			self._promise = browserpool.get(function( panel )

				if not panel then
					return
				end

				if self._promise then
					self._promise = nil
				end

				self.Browser = panel
				self:OnBrowserReady( panel )

			end)
		end

	end

	function SERVICE:Stop()
		BaseClass.Stop( self )

		if self._promise then
			self._promise:Cancel("Service has been stopped")
			self._promise = nil
		end

		if self.Browser then
			browserpool.release( self.Browser )
			self.Browser = nil
		end
	end

	local StartHtml = [[
	<!DOCTYPE html>
	<html>
	<head>
		<meta charset="utf-8">
		<title>Media Player</title>
		<style type="text/css">
		html, body {
			margin: 0;
			padding: 0;
			width: 100%;
			height: 100%;
			overflow: hidden;
		}

		* { box-sizing: border-box }

		body {
			background-color: #282828;
			color: #cecece;
		}
		</style>
	</head>
	<body>
	]]

	local EndHtml = [[
	</body>
	</html>
	]]

	function SERVICE.WrapHTML( html )
		return table.concat({ StartHtml, html, EndHtml })
	end

	local JS_InjectScript = [[
(function () {
	var script = document.createElement('script');
	script.type = 'text/javascript';
	script.src = '%s';
	document.getElementsByTagName('head')[0].appendChild(script);
}());]]

	function SERVICE:InjectScript( uri )
		self.Browser:QueueJavascript( JS_InjectScript:format( uri ) )
	end

	function SERVICE:OnMousePressed( x, y )
		self.Browser:InjectMouseClick( x, y )
	end

	local SCROLL_MULTIPLIER = -80
	function SERVICE:OnMouseWheeled( scrollDelta )
		self.Browser:Scroll( scrollDelta * SCROLL_MULTIPLIER )
	end

	--[[---------------------------------------------------------
		Draw 3D2D
	-----------------------------------------------------------]]

	local IsValid = IsValid
	local SetDrawColor = surface.SetDrawColor
	local DrawRect = surface.DrawRect
	local DrawHTMLPanel = MediaPlayerUtils.DrawHTMLPanel

	function SERVICE:Draw( w, h )

		if IsValid(self.Browser) then
			SetDrawColor( 0, 0, 0, 255 )
			DrawRect( 0, 0, w, h )
			DrawHTMLPanel( self.Browser, w, h )
		end

	end

end

--addons/media_player_fixed_edition/lua/mediaplayer/services/youtube/shared.lua:
DEFINE_BASECLASS( "mp_service_base" )

SERVICE.Name 	= "YouTube"
SERVICE.Id 		= "yt"
SERVICE.Base 	= "browser"

SERVICE.PrefetchMetadata = true

local YtVideoIdPattern = "[%a%d-_]+"
local UrlSchemes = {
	"youtube%.com/watch%?v=" .. YtVideoIdPattern,
	"youtube%.com/shorts/" .. YtVideoIdPattern,
	"youtu%.be/watch%?v=" .. YtVideoIdPattern,
}

function SERVICE:New( url )
	local obj = BaseClass.New(self, url)
	obj._data = obj:GetYouTubeVideoId()
	return obj
end

function SERVICE:Match( url )
	for _, pattern in pairs(UrlSchemes) do
		if string.find( url, pattern ) then
			return true
		end
	end

	return false
end

function SERVICE:IsTimed()
	if self._istimed == nil then
		-- YouTube Live resolves to 0 second video duration
		self._istimed = self:Duration() > 0
	end

	return self._istimed
end

function SERVICE:GetYouTubeVideoId()

	local videoId

	if self.videoId then

		videoId = self.videoId

	elseif self.urlinfo then

		local url = self.urlinfo

		-- https://www.youtube.com/watch?v=(videoId)
		if url.query and url.query.v and #url.query.v > 0 then
			videoId = url.query.v

		-- http://www.youtube.com/shorts/(videoId)
		elseif url.path and string.match(url.path, "^/shorts/([%a%d-_]+)") then
			videoId = string.match(url.path, "^/shorts/([%a%d-_]+)")

		-- https://youtu.be/(videoId)
		elseif string.match(url.host, "youtu.be") and
			url.path and string.match(url.path, "^/([%a%d-_]+)$") and
			( (not url.query) or #url.query == 0 ) then -- short url

			videoId = string.match(url.path, "^/([%a%d-_]+)$")
		end

		self.videoId = videoId

	end

	return videoId

end

--addons/media_player_fixed_edition/lua/mediaplayer/sh_metadata.lua:
--[[---------------------------------------------------------
	Media Player Metadata

	All media metadata is cached in an SQLite table for quick
	lookup and to prevent unnecessary network requests.
-----------------------------------------------------------]]

MediaPlayer.Metadata = {}

---
-- Default metadata table name
-- @type String
--
local TableName = "mediaplayer_metadata"

---
-- SQLite table struct
-- @type String
--
local TableStruct = string.format([[
CREATE TABLE %s (
	id				VARCHAR(48) PRIMARY KEY,
	title			VARCHAR(128),
	duration		INTEGER NOT NULL DEFAULT 0,
	thumbnail		VARCHAR(512),
	extra 			VARCHAR(2048),
	request_count	INTEGER NOT NULL DEFAULT 1,
	last_request	INTEGER NOT NULL DEFAULT 0,
	last_updated	INTEGER NOT NULL DEFAULT 0,
	expired			BOOLEAN NOT NULL DEFAULT 0
)]], TableName)

---
-- Maximum cache age before it expires; currently one week in seconds.
-- @type Number
--
local MaxCacheAge = 604800

---
-- Query the metadata table for the given media object's metadata.
-- If the metadata is older than one week, it is ignored and replaced upon
-- saving.
--
-- @param media		Media service object.
-- @return table	Cached metadata results.
--
function MediaPlayer.Metadata:Query( media )
	local id = media:UniqueID()
	if not id then return end

	local query = ("SELECT * FROM `%s` WHERE id='%s'"):format(TableName, id)

	if MediaPlayer.DEBUG then
		print("MediaPlayer.Metadata.Query")
		print(query)
	end

	local results = sql.QueryRow(query)

	if results then
		local expired = ( tonumber(results.expired) == 1 )

		-- Media metadata has been marked as out-of-date
		if expired then
			return nil
		end

		local lastupdated = tonumber( results.last_updated )
		local timediff = os.time() - lastupdated

		if timediff > MaxCacheAge then

			-- Set metadata entry as expired
			query = "UPDATE `%s` SET expired=1 WHERE id='%s'"
			query = query:format( TableName, id )

			if MediaPlayer.DEBUG then
				print("MediaPlayer.Metadata.Query: Setting entry as expired")
				print(query)
			end

			sql.Query( query )

			return nil

		else
			return results
		end
	elseif results == false then
		ErrorNoHalt("MediaPlayer.Metadata.Query: There was an error executing the SQL query\n")
		print(query)
	end

	return nil
end

---
-- Save or update the given media object into the metadata table.
--
-- @param media		Media service object.
-- @return table	SQL query results.
--
function MediaPlayer.Metadata:Save( media )
	local id = media:UniqueID()
	if not id then return end

	local query = ("SELECT expired FROM `%s` WHERE id='%s'"):format(TableName, id)
	local results = sql.Query(query)

	if istable(results) then -- update

		if MediaPlayer.DEBUG then
			print("MediaPlayer.Metadata.Save Results:")
			PrintTable(results)
		end

		results = results[1]

		local expired = ( tonumber(results.expired) == 1 )

		if expired then

			-- Update possible new metadata
			query = "UPDATE `%s` SET request_count=request_count+1, title=%s, duration=%s, thumbnail=%s, extra=%s, last_request=%s, last_updated=%s, expired=0 WHERE id='%s'"
			query = query:format( TableName,
						sql.SQLStr( media:Title() ),
						media:Duration(),
						sql.SQLStr( media:Thumbnail() ),
						sql.SQLStr( util.TableToJSON(media._metadata.extra or {}) ),
						os.time(),
						os.time(),
						id )

		else

			query = "UPDATE `%s` SET request_count=request_count+1, last_request=%s WHERE id='%s'"
			query = query:format( TableName, os.time(), id )

		end

	else -- insert

		query = string.format( "INSERT INTO `%s` ", TableName ) ..
			"(id,title,duration,thumbnail,extra,last_request,last_updated) VALUES (" ..
			string.format( "'%s',", id ) ..
			string.format( "%s,", sql.SQLStr( media:Title() ) ) ..
			string.format( "%s,", media:Duration() ) ..
			string.format( "%s,", sql.SQLStr( media:Thumbnail() ) ) ..
			string.format( "%s,", sql.SQLStr( util.TableToJSON(media._metadata.extra or {}) ) ) ..
			string.format( "%d,", os.time() ) ..
			string.format( "%d)", os.time() )

	end

	if MediaPlayer.DEBUG then
		print("MediaPlayer.Metadata.Save")
		print(query)
	end

	results = sql.Query(query)

	if results == false then
		ErrorNoHalt("MediaPlayer.Metadata.Save: There was an error executing the SQL query\n")
		print(query)
	end

	return results
end

-- Create the SQLite table if it doesn't exist
if not sql.TableExists(TableName) then
	Msg("MediaPlayer.Metadata: Creating `" .. TableName .. "` table...\n")
	sql.Query(TableStruct)
end

--addons/media_player_fixed_edition/lua/mp_menu/sidebar_tabs.lua:
local ceil = math.ceil

local surface = surface
local color_white = color_white

local PANEL = {}

PANEL.TabHeight = 45 -- Biraz daha yüksek sekmeler

function PANEL:Init()

	self:SetShowIcons( false )

	self:SetFadeTime( 0 )
	self:SetPadding( 0 )

	self.animFade = Derma_Anim( "Fade", self, self.CrossFade )

	self.Items = {}

end

function PANEL:Paint( w, h )
    -- Onyx HUD tarzı arka plan
    surface.SetDrawColor( 20, 20, 25, 250 )
    surface.DrawRect( 0, 0, w, h )
    
    -- Üst kenarda ince bir hat
    surface.SetDrawColor( 35, 35, 40, 255 )
    surface.DrawRect( 0, 0, w, 1 )
end

function PANEL:AddSheet( label, panel, material, NoStretchX, NoStretchY, Tooltip )

	if not IsValid( panel ) then return end

	local Sheet = {}

	Sheet.Name = label

	Sheet.Tab = vgui.Create( "MP.SidebarTab", self )
	Sheet.Tab:SetTooltip( Tooltip )
	Sheet.Tab:Setup( label, self, panel, material )

	Sheet.Panel = panel
	Sheet.Panel.NoStretchX = NoStretchX
	Sheet.Panel.NoStretchY = NoStretchY
	Sheet.Panel:SetPos( self:GetPadding(), self.TabHeight + self:GetPadding() )
	Sheet.Panel:SetVisible( false )

	panel:SetParent( self )

	table.insert( self.Items, Sheet )

	if not self:GetActiveTab() then
		self:SetActiveTab( Sheet.Tab )
		Sheet.Panel:SetVisible( true )
	end

	-- self.tabScroller:AddPanel( Sheet.Tab )

	return Sheet

end

function PANEL:PerformLayout()

	local ActiveTab = self:GetActiveTab()
	local Padding = self:GetPadding()

	if not ActiveTab then return end

	-- Update size now, so the height is definitiely right.
	ActiveTab:InvalidateLayout( true )

	local ActivePanel = ActiveTab:GetPanel()

	local numItems = #self.Items
	local tabWidth = ceil(self:GetWide() / numItems)

	local tab

	for k, v in pairs( self.Items ) do

		tab = v.Tab

		tab:SetSize( tabWidth, self.TabHeight )
		tab:SetPos( (k-1) * tabWidth )

		-- Handle tab panel visibility
		if tab:GetPanel() == ActivePanel then
			tab:GetPanel():SetVisible( true )
			tab:SetZPos( 100 )
		else
			tab:GetPanel():SetVisible( false )
			tab:SetZPos( 1 )
		end

		tab:ApplySchemeSettings()

	end

	ActivePanel:SetWide( self:GetWide() - Padding * 2 )
	ActivePanel:SetTall( (self:GetTall() - ActiveTab:GetTall() ) - Padding )

	ActivePanel:InvalidateLayout()

	-- Give the animation a chance
	self.animFade:Run()

end

derma.DefineControl( "MP.SidebarTabs", "", PANEL, "DPropertySheet" )


local SIDEBAR_TAB = {}

-- Onyx tarzı modern font
surface.CreateFont( "MP.TabTitle", {
	font = "Roboto Medium", -- Daha kalın ve modern font
	size = 18, -- Biraz daha büyük
	extended = true,
	weight = 500,
	antialias = true -- Daha pürüzsüz yazı
} )

-- Onyx renk şeması
SIDEBAR_TAB.BgColor = Color( 30, 30, 35, 255 ) -- Koyu gri arka plan
SIDEBAR_TAB.HoverColor = Color( 40, 40, 45, 255 ) -- Hover rengi
SIDEBAR_TAB.SelectedBgColor = Color( 45, 45, 50, 255 ) -- Seçili sekme rengi
SIDEBAR_TAB.TextColor = Color( 200, 200, 200, 255 ) -- Yazı rengi
SIDEBAR_TAB.SelectedTextColor = Color( 255, 255, 255, 255 ) -- Seçili yazı rengi
SIDEBAR_TAB.SelectedBorderColor = Color( 255, 255, 255 ) -- Mavi vurgu rengi (Onyx tarzı)
SIDEBAR_TAB.SelectedBorderHeight = 3 -- Biraz daha kalın vurgu

function SIDEBAR_TAB:Init()

	self.BaseClass.Init( self )

	self:SetFont( "MP.TabTitle" )
	self:SetContentAlignment( 5 )
	self:SetTextInset( 0, 0 )
	
	-- Varsayılan renkleri ayarla
	self:SetTextColor( self.TextColor )
	self:SetCursor( "hand" ) -- Fare işaretçisini el şeklinde göster

end

function SIDEBAR_TAB:Paint( w, h )

	if self:IsActive() then
		surface.SetDrawColor( self.SelectedBgColor )
		surface.DrawRect( 0, 0, w, h )
		
		-- Seçili sekmenin altında renkli çizgi
		surface.SetDrawColor( self.SelectedBorderColor )
		surface.DrawRect( 0, h - self.SelectedBorderHeight, w, self.SelectedBorderHeight )
		
		self:SetTextColor( self.SelectedTextColor )
	else
		if self:IsHovered() then
			surface.SetDrawColor( self.HoverColor )
		else 
			surface.SetDrawColor( self.BgColor )
		end
		surface.DrawRect( 0, 0, w, h )
		self:SetTextColor( self.TextColor )
	end
	
	-- Sekme ayrıcı çizgisi
	surface.SetDrawColor( 45, 45, 50, 150 )
	surface.DrawRect( w-1, 5, 1, h-10 )
end

function SIDEBAR_TAB:ApplySchemeSettings()

	self:SetTextInset( 0, 0 )

	-- TODO: this errors as of version 2015.03.09
	-- DLabel.ApplySchemeSettings( self )

end

derma.DefineControl( "MP.SidebarTab", "", SIDEBAR_TAB, "DTab" )



local CURRENTLY_PLAYING_TAB = {}

AccessorFunc( CURRENTLY_PLAYING_TAB, "MediaPlayerId", "MediaPlayerId" )

-- Onyx tarzı arka plan rengi
CURRENTLY_PLAYING_TAB.BgColor = Color( 25, 25, 30, 255 )

function CURRENTLY_PLAYING_TAB:Init()

	self.QueuePanel = vgui.Create( "MP.Queue", self )
	self.QueuePanel:Dock( FILL )
	self.QueuePanel:DockMargin( 8, 0, 8, 8 ) -- Kenarlardan biraz boşluk bırak

	self.PlaybackPanel = vgui.Create( "MP.Playback", self )
	self.PlaybackPanel:Dock( TOP )
	self.PlaybackPanel:DockMargin( 8, 8, 8, 4 ) -- Kenarlardan daha estetik boşluklar

	hook.Add( MP.EVENTS.UI.MEDIA_PLAYER_CHANGED, self, self.OnMediaPlayerChanged )

end

function CURRENTLY_PLAYING_TAB:OnMediaPlayerChanged( mp )

	self:SetMediaPlayerId( mp:GetId() )

	self.QueuePanel.Header.AddVidBtn:SetLocked( mp:GetQueueLocked() )

	if not self.MediaChangedHandle then
		-- set current media
		self.PlaybackPanel:OnMediaChanged( mp:GetMedia() )

		-- listen for any future media changes
		self.MediaChangedHandle = function(...)
			if IsValid(self.PlaybackPanel) then
				self.PlaybackPanel:OnMediaChanged(...)
			end
		end
		mp:on( MP.EVENTS.MEDIA_CHANGED, self.MediaChangedHandle )
	end

	if not self.QueueChangedHandle then
		-- set current queue
		self.QueuePanel:OnQueueChanged( mp:GetMediaQueue() )

		-- listen for any future media changes
		self.QueueChangedHandle = function(...)
			if IsValid(self.QueuePanel) then
				self.QueuePanel:OnQueueChanged(...)
			end
		end
		mp:on( MP.EVENTS.QUEUE_CHANGED, self.QueueChangedHandle )
	end

	if not self.PlayerStateChangeHandle then
		-- set current player state
		self.PlaybackPanel:OnPlayerStateChanged( mp:GetPlayerState() )

		-- listen for any future player state changes
		self.PlayerStateChangeHandle = function(...)
			if IsValid(self.PlaybackPanel) then
				self.PlaybackPanel:OnPlayerStateChanged(...)
			end
		end
		mp:on( MP.EVENTS.PLAYER_STATE_CHANGED, self.PlayerStateChangeHandle )
	end

end

function CURRENTLY_PLAYING_TAB:OnRemove()

	hook.Remove( MP.EVENTS.UI.MEDIA_PLAYER_CHANGED, self )

	local mpId = self:GetMediaPlayerId()
	local mp = MediaPlayer.GetById( mpId )

	if mp then
		mp:removeListener( MP.EVENTS.MEDIA_CHANGED, self.MediaChangedHandle )
		mp:removeListener( MP.EVENTS.QUEUE_CHANGED, self.QueueChangedHandle )
		mp:removeListener( MP.EVENTS.PLAYER_STATE_CHANGED, self.PlayerStateChangeHandle )
	end

end

function CURRENTLY_PLAYING_TAB:Paint( w, h )
	surface.SetDrawColor( self.BgColor )
	surface.DrawRect( 0, 0, w, h )
end

derma.DefineControl( "MP.CurrentlyPlayingTab", "", CURRENTLY_PLAYING_TAB, "Panel" )

--addons/media_player_fixed_edition/lua/mp_menu/volume_control.lua:
local math = math
local ceil = math.ceil
local clamp = math.Clamp
local Lerp = Lerp

local surface = surface
local draw = draw
local color_white = color_white

local PANEL = {}

PANEL.Margin = 16
PANEL.ButtonWidth = 18
PANEL.ButtonSpacing = 8
PANEL.BackgroundColor = Color(35, 35, 40, 225)
PANEL.AccentColor = Color(65, 105, 225)

function PANEL:Init()

	self.BaseClass.Init( self )

	self.VolumeButton = vgui.Create( "MP.VolumeButton", self )

	self.VolumeSlider = vgui.Create( "MP.VolumeSlider", self )

	self.BtnList = vgui.Create( "DHorizontalList", self )
	self.BtnList:SetSpacing( self.ButtonSpacing )

	if hook.Run( MP.EVENTS.UI.PRIVILEGED_PLAYER ) then
		self.RepeatBtn = vgui.Create( "MP.RepeatButton" )
		self:AddButton( self.RepeatBtn )
		self.ShuffleBtn = vgui.Create( "MP.ShuffleButton" )
		self:AddButton( self.ShuffleBtn )
		self.LockBtn = vgui.Create( "MP.LockButton" )
		self:AddButton( self.LockBtn )
	end

	self:OnVolumeChanged( MediaPlayer.Volume() )

	hook.Add( MP.EVENTS.VOLUME_CHANGED, self, self.OnVolumeChanged )
	hook.Add( MP.EVENTS.UI.MEDIA_PLAYER_CHANGED, self, self.OnMediaPlayerChanged )

end

function PANEL:AddButton( panel )
	self.BtnList:AddItem( panel )
end

function PANEL:OnVolumeChanged( volume )

	self.VolumeSlider:SetSlideX( volume )

	self:InvalidateChildren()

end

function PANEL:OnMediaPlayerChanged( mp )

	if hook.Run( MP.EVENTS.UI.PRIVILEGED_PLAYER ) then
		self.RepeatBtn:SetEnabled( mp:GetQueueRepeat() )
		self.ShuffleBtn:SetEnabled( mp:GetQueueShuffle() )
		self.LockBtn:SetEnabled( mp:GetQueueLocked() )
	end

end

function PANEL:Paint( w, h )

	draw.RoundedBox(6, 0, 0, w, h, self.BackgroundColor)
    
    surface.SetDrawColor(self.AccentColor)
    surface.DrawRect(0, 0, w, 2)

end

function PANEL:PerformLayout( w, h )

	self.BtnList:InvalidateLayout( true )
	self.BtnList:CenterVertical()
	self.BtnList:AlignRight( self.Margin )

	self.VolumeButton:CenterVertical()
	self.VolumeButton:AlignLeft( self.Margin )

	local sliderWidth = ( self.BtnList:GetPos() - 15 ) -
			( self.VolumeButton:GetPos() + self.VolumeButton:GetWide() + 15 )
	self.VolumeSlider:SetWide( sliderWidth )
	self.VolumeSlider:CenterVertical()
	self.VolumeSlider:MoveRightOf( self.VolumeButton, 15 )

end

function PANEL:OnRemove()

	hook.Remove( MP.EVENTS.VOLUME_CHANGED, self )

end

derma.DefineControl( "MP.VolumeControl", "", PANEL, "DPanel" )


local VOLUME_BUTTON = {}

function VOLUME_BUTTON:Init()

	self.BaseClass.Init( self )

	self:SetIcon( "mp-volume" )
	self:SetSize( 18, 17 )

end

function VOLUME_BUTTON:DoClick()

	MediaPlayer.ToggleMute()

end

derma.DefineControl( "MP.VolumeButton", "", VOLUME_BUTTON, "MP.SidebarButton" )


local VOLUME_SLIDER = {}

VOLUME_SLIDER.BarHeight = 4
VOLUME_SLIDER.KnobSize = 14
VOLUME_SLIDER.BarBgColor = Color(50, 50, 55)
VOLUME_SLIDER.BarColor = Color(65, 105, 225)
VOLUME_SLIDER.KnobColor = Color(240, 240, 240)
VOLUME_SLIDER.KnobHoverColor = Color(255, 255, 255)

VOLUME_SLIDER.ScrollIncrement = 0.1 -- out of 1

function VOLUME_SLIDER:Init()

	self.BaseClass.Init( self )

	self.Knob:SetSize( self.KnobSize, self.KnobSize )
	self.Knob.Paint = self.PaintKnob
	self.Knob.Hovered = false
    
    self.Knob.OnCursorEntered = function()
        self.Knob.Hovered = true
    end
    
    self.Knob.OnCursorExited = function()
        self.Knob.Hovered = false
    end

	-- Remove some hidden panel child from the inherited DSlider control; I have
	-- no idea where it's being created...
	for _, child in pairs( self:GetChildren() ) do
		if child ~= self.Knob then
			child:Remove()
		end
	end

end

function VOLUME_SLIDER:Paint( w, h )

	local progress = self.m_fSlideX
	local vmid = ceil((h / 2) - (self.BarHeight / 2))
    
    draw.RoundedBox(self.BarHeight / 2, 0, vmid, w, self.BarHeight, self.BarBgColor)
    
    draw.RoundedBox(self.BarHeight / 2, 0, vmid, ceil(w * progress), self.BarHeight, self.BarColor)

end

function VOLUME_SLIDER:PaintKnob( w, h )

	local color = self.Hovered and self.KnobHoverColor or self.KnobColor or color_white
    
    draw.RoundedBox(h/2, 1, 1, w, h, Color(0, 0, 0, 50))
    
    draw.RoundedBox(h/2, 0, 0, w, h, color)

end

function VOLUME_SLIDER:SetSlideX( value )

	if self._lockVolume then return end

	value = clamp(value, 0, 1)

	self.m_fSlideX = value
	self:InvalidateLayout()

	self._lockVolume = true
	MediaPlayer.Volume( value )
	self._lockVolume = nil

end

function VOLUME_SLIDER:OnMouseWheeled( delta )

	local change = self.ScrollIncrement * delta
	local value = clamp(self.m_fSlideX + change, 0, 1)

	self:SetSlideX( value )

end

derma.DefineControl( "MP.VolumeSlider", "", VOLUME_SLIDER, "DSlider" )


local REPEAT_BTN = {}

function REPEAT_BTN:Init()
	self.BaseClass.Init( self )
	self:SetIcon( "mp-repeat" )
	self:SetTooltip( "Tekrarla" )
end

function REPEAT_BTN:DoClick()
	self.BaseClass.DoClick( self )
	hook.Run( MP.EVENTS.UI.TOGGLE_REPEAT )
end

derma.DefineControl( "MP.RepeatButton", "", REPEAT_BTN, "MP.SidebarToggleButton" )


local SHUFFLE_BTN = {}

function SHUFFLE_BTN:Init()
	self.BaseClass.Init( self )
	self:SetIcon( "mp-shuffle" )
	self:SetTooltip( "Karıştır" )
end

function SHUFFLE_BTN:DoClick()
	self.BaseClass.DoClick( self )
	hook.Run( MP.EVENTS.UI.TOGGLE_SHUFFLE )
end

derma.DefineControl( "MP.ShuffleButton", "", SHUFFLE_BTN, "MP.SidebarToggleButton" )


local LOCK_BTN = {}

function LOCK_BTN:Init()
	self.BaseClass.Init( self )
	self:SetIcon( "mp-lock-open" )
	self:SetTooltip( "Sırayı Kilitle" )
end

function LOCK_BTN:DoClick()
	self.BaseClass.DoClick( self )

	hook.Run( MP.EVENTS.UI.TOGGLE_LOCK )
	self:UpdateIcon()
end

function LOCK_BTN:SetEnabled( bEnabled )
	self.BaseClass.SetEnabled( self, bEnabled )
	self:UpdateIcon()
end

function LOCK_BTN:UpdateIcon()
	local icon = self:GetEnabled() and "mp-lock" or "mp-lock-open"
	self:SetIcon( icon )
end

derma.DefineControl( "MP.LockButton", "", LOCK_BTN, "MP.SidebarToggleButton" )

--addons/media_player_fixed_edition/lua/mp_menu/queue.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/thirdparty/sh_cami.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/thirdparty/sh_pon.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/framework/libs/sh_addon.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

03/05/2023

--]]

local ADDON = {}
ADDON.__index = ADDON

function ADDON:RegisterOption(id, data)
    data.addon = self.id

    if (SERVER) then
        data.onSet = function(value)
            self.db:Queue([[REPLACE INTO `onyx_]] .. self.id .. [[_settings` VALUES(']] .. self.db:Escape(id) .. [[', ']] .. self.db:Escape(onyx.TypeToString(value)) .. [[');]])
        end
    end

    onyx.inconfig:Register(self.id .. '_' .. id, data)
end

function ADDON:GetOptionValue(id)
    return onyx.inconfig:Get(self.id .. '_' .. id)
end

if (SERVER) then
    function ADDON:SetupDatabase(mysqlEnabled, credentials)
        local moduleName = 'sqlite'
        local data = {}

        if (mysqlEnabled) then
            moduleName = 'mysqloo'
            data = {
                hostname = credentials.Hostname,
                username = credentials.Username,
                password = credentials.Password,
                database = credentials.Schema,
                port = credentials.Port,
            }
        end

        if (self.db and self.db:IsConnected()) then
            self.db:Log('Connection recycled.')
        else
            self.db = onyx.sql.Create(moduleName, self.id, data)
        end

        self:CreateSettingsTable()
        self:LoadSettings()

        hook.Run('onyx.' .. self.id .. '.DatabaseInit')
    end

    function ADDON:CreateSettingsTable()
        local id = self.id

        local q = self.db:Create('onyx_' .. id .. '_settings')
            q:Create('id', 'VARCHAR(64) NOT NULL')
            q:Create('value', 'VARCHAR(255) NOT NULL')
            q:PrimaryKey('id')
        q:Execute()
    end

    function ADDON:LoadSettings()
        local addonID = self.id
        onyx.WaitForGamemode('onyx.' .. addonID .. '.LoadSettings', function()
            local q = self.db:Select('onyx_' .. addonID .. '_settings')
                q:Callback(function(result)

                    self:Print('Loaded settings.')
                    if (result and #result > 0) then
                        for _, row in ipairs(result) do
                            local optionID = addonID .. '_' .. row.id
                            local value = onyx.StringToType(row.value)

                            onyx.inconfig.values[optionID] = value
                        end
                    end

                end)
            q:Execute()
        end)
    end
end

do
    local accent = Color(174, 0, 255)
    local accent2 = Color(38, 185, 160)
    local white = color_white
    local red = Color(255, 73, 73)
    local green = Color(121, 255, 68)
    local orange = Color(255, 180, 68)

    local function format(text, ...)
        for _, arg in ipairs({...}) do
            if isentity(arg) and arg:IsPlayer() then
                arg = arg:Name() .. ' (' .. arg:SteamID() .. ')'
            else
                arg = tostring(arg)
            end

            text = string.gsub(text, '#', arg, 1)
        end

        return text
    end

    local function printWPrefix(id, color, prefix, text, ...)
        MsgC(
            white, '(', accent, 'ONYX', white, ') ',
            white, '(', accent2, id, white, ') ',
            white, '(', color, prefix, white, ') ',
            format(text, ...),
            '\n'
        )
    end

    function ADDON:Print(text, ...)
        local id = string.upper(self.id)
        MsgC(
            white, '(', accent, 'ONYX', white, ') ',
            white, '(', accent2, id, white, ') ',
            format(text, ...),
            '\n'
        )
    end

    function ADDON:PrintError(text, ...)
        local id = string.upper(self.id)
        printWPrefix(id, red, 'ERROR', text, ...)
    end

    function ADDON:PrintWarning(text, ...)
        local id = string.upper(self.id)
        printWPrefix(id, orange, 'WARNING', text, ...)
    end

    function ADDON:PrintSuccess(text, ...)
        local id = string.upper(self.id)
        printWPrefix(id, green, 'SUCCESS', text, ...)
    end

    function ADDON:PrintDebug(...)
        onyx:PrintDebug(...)
    end
end

--[[------------------------------
Public function
--------------------------------]]

function onyx:Addon(id, data)
    assert(isstring(id), Format('bad argument #1 (expected string, got %s)', type(id)))
    assert(istable(data), Format('bad argument #2 (expected table, got %s)', type(data)))

    if (self[id] == nil) then
        data.id = id

        self[id] = setmetatable(data, ADDON)
        self[id]:Print('Initialized.')
    else
        self[id]:Print('Refreshing.')
    end

    return self[id]
end
--addons/onyx_framework_2/lua/onyx/framework/core/cl_npc_label.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/libs/cl_wimg.lua:
--[[

Copyright (c) 2022 Aleksandrs Filipovskis

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--]]

onyx.wimg = onyx.wimg or {}
onyx.wimg.cache = onyx.wimg.cache or {}
-- onyx.wimg.proxy = 'https://proxy.duckduckgo.com/iu/?u=' -- it seems imgur has banned duckduckgo's proxy at 29/04/2023, you can try to enable it
onyx.wimg.proxy = ''

local wimg = onyx.wimg

local function printWarning(text)
    MsgC(color_white, '(', Color(153, 0, 255), 'wimg', color_white, ') ', text, '\n')
end

-- ANCHOR Queue

local addInQueue
do
    local http_Fetch = http.Fetch
    local table_remove = table.remove
    local file_Exists = file.Exists
    local file_Write = file.Write
    local insert = table.insert

    local basePath = 'wimg'
    local queue = {}
    local rate = 1 / 5

    if not file_Exists(basePath, 'DATA') then
        file.CreateDir(basePath)
    end

    local function findMaterial(name, format, parameters)
        local path = basePath .. '/' .. name .. format

        if file_Exists(path, 'DATA') then
            return Material('data/' .. path, parameters)
        end
    end

    local function saveMaterial(name, format, body)
        local path = basePath .. '/' .. name .. format

        file_Write(path, body)
    end

    function addInQueue(wimgObject)
        local name = wimgObject:GetName()
        local url = wimgObject:GetURL()
        local format = wimgObject:GetFormat()
        local parameters = wimgObject:GetParameters()
        local mat = findMaterial(name, format, parameters)

        if mat then
            wimgObject:SetMaterial(mat)
        else
            insert(queue, {
                name = name,
                url = url,
                format = format,
                parameters = parameters,
                wimgObject = wimgObject
            })
        end
    end

    timer.Create('onyx.wimg.ProcessQueue', rate, 0, function()
        local data = queue[1]
        if (data) then
            table_remove(queue, 1)

            local name = data.name
            local url = data.url
            local format = data.format
            local parameters = data.parameters
            local wimgObject = data.wimgObject

            local success, errorString = pcall(function()
                local mat = findMaterial(name, format, parameters)
                if mat then
                    wimgObject:SetMaterial(mat)
                else
                    http_Fetch(wimg.proxy .. url, function(body, size, headers, code)
                        if (code > 200) then
                            printWarning('Failed to fetch material (code: ' .. tostring(code) .. '), url: ' .. url)
                            return
                        end

                        saveMaterial(name, format, body)

                        local mat = findMaterial(name, format, parameters)
                        if (mat) then
                            if (wimgObject) then
                                wimgObject:SetMaterial(mat)
                            end
                        else
                            printWarning('Failed to fetch material after download! (url: ' .. url .. ')')
                        end
                    end, function(err)
                        printWarning(Format('Failed to download the image with name: \"%s\", url: %s, error: %s', name, url, err))
                    end)
                end
            end)

            if (not success) then
                printWarning('Error occured during image catchup: ' .. errorString)
            end
        end
    end)
end

-- ANCHOR Class

local WIMAGE = {}
WIMAGE.__index = WIMAGE

function WIMAGE.__eq(a, b)
    return a:GetName() == b:GetName()
end

AccessorFunc(WIMAGE, 'm_Name', 'Name')
AccessorFunc(WIMAGE, 'm_URL', 'URL')
AccessorFunc(WIMAGE, 'm_Format', 'Format')
AccessorFunc(WIMAGE, 'm_Material', 'Material')
AccessorFunc(WIMAGE, 'm_Parameters', 'Parameters')

do
    local SetDrawColor = surface.SetDrawColor
    local DrawTexturedRect = surface.DrawTexturedRect
    local SetMaterial = surface.SetMaterial
    local DrawTexturedRectRotated = surface.DrawTexturedRectRotated

    function WIMAGE:Draw(x, y, w, h, color)
        color = color or color_white

        local mat = self.m_Material

        if mat then
            SetDrawColor(color)
            SetMaterial(mat)
            DrawTexturedRect(x, y, w, h)
        end
    end

    function WIMAGE:DrawRotated(x, y, w, h, r, color)
        color = color or color_white

        local mat = self.m_Material

        if mat then
            SetDrawColor(color)
            SetMaterial(mat)
            DrawTexturedRectRotated(x, y, w, h, r)
        end
    end
end

function WIMAGE:Download()
    addInQueue(self)
end

function WIMAGE:GetWidth()
    return self.m_Material and self.m_Material:Width() or 0
end

function WIMAGE:GetTall()
    return self.m_Material and self.m_Material:Height() or 0
end

WIMAGE.__call = WIMAGE.Draw

-- ANCHOR Library

function wimg.Register(name, url)
    assert(name, 'No name provided')
    assert(url, 'No URL provided')
    wimg.cache[name] = url
end

function wimg.Create(name, parameters)
    assert(name, 'No name provided')

    local url = wimg.cache[name]
    local invalid = false

    if (not url) then
        ErrorNoHalt('There\'s no web image registered with name: ' .. name)
        invalid = true
    end

    local format = invalid and '_INVALID_' or string.match(url, '.%w+$')
    assert(format, 'wrong format for this url: ' .. url .. ' (' .. name ..  ')')

    local obj = setmetatable({
        m_Name = name,
        m_URL = url,
        m_Format = format,
        m_Parameters = parameters
    }, WIMAGE)

    if (not invalid) then
        obj:Download()
    end

    return obj
end

do
    local urlCache = {}

    local function encodeURL(url)
        return util.CRC(url)
    end

    function wimg.Simple(url, parameters)
        assert(url, 'No URL provided')
        assert(isstring(url), 'URL should be string!')

        if not urlCache[url] then
            urlCache[url] = encodeURL(url)
        end

        local uid = urlCache[url]

        wimg.Register(uid, url)

        return wimg.Create(uid, parameters)
    end
end

-- ANCHOR Test Section
--[[
    do
        wimg.Register('user', 'https://i.imgur.com/Q3OHblv.png')

        local userSmooth = wimg.Create('user', 'smooth mips')
        local userSharp = wimg.Create('user')
        local userQuick = wimg.Simple('https://i.imgur.com/Q3OHblv.png')

        print(userSharp == userSmooth)

        hook.Add('HUDPaint', 'wimg.Test', function()
            local size = math.abs(math.sin(CurTime() * .5)) * 256

            userSmooth:Draw(0, 0, size, size)
            userSharp:Draw(size, 0, size, size)
            userQuick:Draw(size * 2, 0, size, size)
            userQuick(size * 3, 0, size, size)
        end)
    end
]]

--addons/onyx_framework_2/lua/onyx/ui/traits/cl_smooth_scroll.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_category.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

02/03/2023

--]]

local wimgArrow = onyx.wimg.Simple('https://i.imgur.com/KGC51Ws.png', 'smooth mips')
local colorPrimary = onyx:Config('colors.primary')
local colorSecondary = onyx:Config('colors.secondary')
local colorAccent = onyx:Config('colors.accent')
local colorTertiary = onyx:Config('colors.tertiary')

local font0 = onyx.Font('Comfortaa Bold@16')

local PANEL = {}

AccessorFunc(PANEL, 'm_Title', 'Title')
AccessorFunc(PANEL, 'm_iCategoryHeight', 'CategoryHeight')
AccessorFunc(PANEL, 'm_iSpace', 'Space')
AccessorFunc(PANEL, 'm_iInset', 'Inset')
AccessorFunc(PANEL, 'm_bExpanded', 'Expanded')
AccessorFunc(PANEL, 'm_iTextMargin', 'TextMargin')
AccessorFunc(PANEL, 'm_bSquareCorners', 'SquareCorners')

function PANEL:Init()
    local padding = onyx.ScaleTall(5)

    self.m_iArrowAngle = 90

    self.button = vgui.Create('Panel', self)
    onyx.gui.Extend(self.button)
    self.button:Import('click')
    self.button:Import('hovercolor')
    self.button:SetColorKey('backgroundColor')
    self.button:SetColorIdle(onyx.ColorBetween(colorSecondary, colorPrimary))
    self.button:SetColorHover(colorTertiary)
    self.button.textColor = color_white
    self.button.Paint = function(p, w, h)
        if (self.m_bSquareCorners and self.canvas:GetTall() > 0) then
            draw.RoundedBoxEx(8, 0, 0, w, h, p.backgroundColor, true, true)
        else
            draw.RoundedBox(8, 0, 0, w, h, p.backgroundColor)
        end

        local x = self.m_iTextMargin or padding
        local sz = math.floor(h * .5)

        if (self.wimage) then
            self.wimage:Draw(h * .5 - sz * .5, h * .5 - sz * .5, sz, sz, colorAccent)

            x = h
        end

        draw.SimpleText(self:GetTitle(), font0, x, h * .5, p.textColor, 0, 1)

        local sz = math.floor(h * .33)
        wimgArrow:DrawRotated(w - h * .5, h * .5, sz, sz, self.m_iArrowAngle, color_white)
    end

    self.button.DoClick = function()
        if self:GetExpanded() then
            self:Close()
        else
            self:Open()
        end
    end

    self.canvas = vgui.Create('Panel', self)

    self:SetTitle('CATEGORY')
    self:SetInset(0)
    self:SetCategoryHeight(onyx.ScaleTall(30))
    self:SetSpace(onyx.ScaleTall(5))
    self:SetTall(self:GetCategoryHeight())
end

function PANEL:GetItems()
    return self.canvas:GetChildren()
end

function PANEL:SetExpanded(bBool)
    if (bBool) then
        self.button:SetColorIdle(colorSecondary)
    else
        self.button:SetColorIdle(onyx.ColorBetween(colorSecondary, colorPrimary))
    end

    self.m_bExpanded = bBool

    self:Call('OnStateChanged', nil, bBool)
end

function PANEL:Animate(height, arrowAngle)
    self.ah = self:GetTall()

    onyx.anim.Create(self, 0.3, {
        index = 1,
        target = {ah = height, m_iArrowAngle = arrowAngle},
        think = function(anim, panel)
            panel:SetTall(panel.ah)
            panel.canvas:SetTall(panel.ah - panel:GetSpace() - panel:GetCategoryHeight())
        end
    })
end

function PANEL:Think()
    self.canvas:SetVisible(self.canvas:GetTall() > 0) -- optimization
end

function PANEL:Open()
    local height = self:GetTotalHeight()

    self:SetExpanded(true)

    self:Animate(height, 0)
end

function PANEL:Close()
    self:SetExpanded(false)

    self:Animate(self:GetCategoryHeight(), 90)
end

function PANEL:Update()
    if (self:GetExpanded()) then
        local categoryHeight = self:GetCategoryHeight()
        local space = self:GetSpace()
        local height = self:GetTotalHeight()

        self.m_iArrowAngle = 0

        self:SetTall(height)
        self.canvas:SetTall(height - space - categoryHeight)
    end
end

function PANEL:UpdateInTick(ticks)
    ticks = ticks or 2
    timer.Simple(engine.TickInterval() * ticks, function()
        if (IsValid(self)) then
            self:Update()
        end
    end)
end

function PANEL:SetIcon(url, params)
    self.wimage = onyx.wimg.Simple(url, params)
end

function PANEL:PerformLayout(w, h)
    self.button:SetSize(w, self:GetCategoryHeight())
    self.canvas:SetWide(w)
    self.canvas:SetPos(0, self.button:GetTall() + self:GetSpace())
end

function PANEL:GetContentHeight()
    local panels = self.canvas:GetChildren()
    local count = #panels
    local size = 0

    for index, child in ipairs(panels) do
        if child:IsVisible() then
            local _, top, _, bottom = child:GetDockMargin()

            size = size + child:GetTall()
            size = size + top
            size = size + (index ~= count and bottom or 0)
        end
    end

    return size
end

function PANEL:GetTotalHeight()
    local h = self:GetCategoryHeight() + self:GetContentHeight() + self:GetSpace()

    h = h + self:GetInset() * 2

    return h
end

function PANEL:SetInset(amt)
    self.m_iInset = amt
    if (IsValid(self.canvas)) then
        self.canvas:DockPadding(amt, amt, amt, 0)
    end
end

function PANEL:Add(class)
    local panel = self.canvas:Add(class)

    -- self:AddPanel(panel)

    return panel
end

function PANEL:AddPanel(panel)
    return self.canvas:Add(panel)
end

function PANEL:GetItems()
    return self.canvas:GetChildren()
end

onyx.gui.Register('onyx.Category', PANEL)
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_checkbox.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

07/05/2023

--]]

local PANEL = {}

local colorPrimary = onyx:Config('colors.primary')
local colorSecondary = onyx:Config('colors.secondary')
local colorAccent = onyx:Config('colors.accent')
local wimgTick = onyx.wimg.Simple('https://i.imgur.com/TZ8Zfax.png', 'smooth mips')

AccessorFunc(PANEL, 'm_bChecked', 'Checked', FORCE_BOOL)

function PANEL:Init()
    local size = onyx.ScaleTall(18)

    self.m_bChecked = false

    self:Import('click')
    self:SetSize(size, size)

    self:Import('hovercolor')
    self:SetColorKey('outlineColor')
    self:SetColorIdle(colorSecondary)
    self:SetColorHover(colorAccent)

    self.backgroundColor = onyx.CopyColor(colorPrimary)
    self.backgroundIdleColor = colorPrimary
    self.backgroundActiveColor = colorAccent
end

function PANEL:Paint(w, h)
    local backgroundColor = self.backgroundColor
    local outlineColor = self.outlineColor
    local size = math.ceil(h * .66)

    draw.RoundedBox(8, 0, 0, w, h, outlineColor)
    draw.RoundedBox(8, 1, 1, w - 2, h - 2, backgroundColor)

    if (self.m_bChecked) then
        wimgTick:Draw(w * .5 - size * .5, h * .5 - size * .5, size, size)
    end
end

function PANEL:DoClick()
    self:SetValue(not self.m_bChecked)
end

function PANEL:SetChecked(bBool)
    assert(isbool(bBool), string.format('bad argument #1 to `SetChecked` (expected bool, got %s)', type(bBool)))
    self.m_bChecked = bBool

    if (bBool) then
        onyx.anim.Create(self, .33, {
            index = 40,
            target = {
                backgroundColor = self.backgroundActiveColor
            }
        })
    else
        onyx.anim.Create(self, .33, {
            index = 40,
            target = {
                backgroundColor = self.backgroundIdleColor
            }
        })
    end
end

function PANEL:SetValue(bBool)
    self:SetChecked(bBool)
    self:Call('OnChange', nil, bBool)
end

function PANEL:GetValue()
    return self.m_bChecked
end

onyx.gui.Register('onyx.CheckBox', PANEL)

-- ANCHOR Test

-- onyx.gui.Test('onyx.Frame', .4, .65, function(self)
--     self:MakePopup()

--     for i = 1, 10 do
--         local panel = self:Add('Panel')
--         panel:Dock(TOP)
--         panel:SetTall(ScreenScale(24))

--         local btn = panel:Add('onyx.CheckBox')
--         -- btn:Dock(LEFT)
--         btn:AlignRight(0)
--         btn:CenterVertical()
--     end
-- end)
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_color_wheel.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_color_wheel.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

13/06/2023

--]]

onyx.wimg.Register('color_wheel', 'https://i.imgur.com/i0asO69.png')

local wimgColorCircle = onyx.wimg.Create('color_wheel', 'mips')

local PANEL = {}

AccessorFunc(PANEL, 'm_Saturation', 'Saturation', FORCE_NUMBER)
AccessorFunc(PANEL, 'm_Hue', 'Hue', FORCE_NUMBER)
AccessorFunc(PANEL, 'm_Value', 'Value', FORCE_NUMBER)

function PANEL:Init()
    self:SetSaturation(0)
    self:SetHue(0)
    self:SetValue(1)
    self.dragging = false
end

function PANEL:SetValue(value)
    self.m_Value = math.Clamp(value, 0, 1)

    local brightness = 255 * self.m_Value
    local crosshairBrightness = 255 - brightness

    self.wheelColor = Color(brightness, brightness, brightness)
    self.crosshairColor = Color(crosshairBrightness, crosshairBrightness, crosshairBrightness)
end

function PANEL:Paint(w, h)
    local saturation = self.m_Saturation
    local hue = self.m_Hue

    -- draw circle with smooth edges
    render.PushFilterMin(TEXFILTER.ANISOTROPIC)
    render.PushFilterMag(TEXFILTER.ANISOTROPIC)
    wimgColorCircle:Draw(0, 0, w, h, self.wheelColor)
    render.PopFilterMin()
    render.PopFilterMag()

    -- draw crosshair
    local x0, y0 = w * .5, h * .5
    local x, y = x0, y0

    local r = h * .5 * saturation
    local rad = math.rad((hue - 90) % 360)
    local sin, cos = math.sin(rad), math.cos(rad)

    x = x0 + r * cos
    y = y0 + r * sin

    surface.SetDrawColor(self.crosshairColor)
    surface.DrawRect(x - 4, y - 1, 8, 2)
    surface.DrawRect(x - 1, y - 4, 2, 8)
end

function PANEL:OnMousePressed()
    self.dragging = true
    self:MouseCapture(true)
end

function PANEL:OnMouseReleased()
    self.dragging = false
    self:MouseCapture(false)
end

function PANEL:Think()
    if (self.dragging) then
        local x, y = self:ScreenToLocal(input.GetCursorPos())
        local w, h = self:GetSize()
        local radius = w * .5

        x = math.Clamp(x, 0, w)
        y = math.Clamp(y, 0, h)

        local xRelative0, yRelative0 = x - radius, y - radius

        local rad = math.atan2(yRelative0, xRelative0)
        local length = math.sqrt( math.pow(xRelative0, 2) + math.pow(yRelative0, 2) )

        self.m_Hue = (math.deg(rad) + 90) % 360
        self.m_Saturation = math.min(1, length / radius)
    end
end

function PANEL:GetColor()
    -- https://github.com/facepunch/garrysmod-issues/issues/2407
    local colorTable = HSVToColor(self.m_Hue, self.m_Saturation, self.m_Value)
    local colorObject = Color(colorTable.r, colorTable.g, colorTable.b)
    return colorObject
end

function PANEL:SetColor(color)
    local h, s, v = ColorToHSV(color)

    self:SetHue(h)
    self:SetSaturation(s)
    self:SetValue(v)
end

onyx.gui.Register('onyx.ColorWheel', PANEL)

-- onyx.gui.Test('DFrame', .5, .5, function(self)
--     self:MakePopup()

--     local mixer = self:Add('onyx.ColorWheel')
--     mixer:SetSize(64, 64)
--     mixer:Center()
--     mixer:SetSaturation(.5)
--     mixer:SetValue(1)
--     mixer:SetColor(Color(255, 53, 53))

--     local panel = self:Add('Panel')
--     panel:SetSize(48, 48)
--     panel.Paint = function(p, w, h)
--         surface.SetDrawColor(mixer:GetColor())
--         surface.DrawRect(0, 0, w, h)
--     end
-- end)
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_navbar.lua:
return gluapack()()
--addons/onyx_framework_2/lua/onyx/ui/elements/cl_text_entry.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/languages/cl_turkish.lua:
return gluapack()()
--addons/onyx_f4/lua/onyx/modules/f4/languages/cl_turkish.lua:
-- Discord: sethlimited

local LANG = {}

-- TABS
LANG.f4_jobs_u = 'MESLEKLER'
LANG.f4_jobs_desc = 'Yolunu seç'

LANG.f4_dashboard_u = 'GÖSTERGE PANELİ'
LANG.f4_dashboard_desc = 'Genel Bilgi'

LANG.f4_shop_u = 'MARKET'
LANG.f4_shop_desc = 'Ürün satın al'

LANG.f4_admin_u = 'YETKİLİ'
LANG.f4_admin_desc = 'Eklentiyi yapılandır'

LANG.f4_donate_u = 'BAĞIŞ'
LANG.f4_donate_desc = 'Sunucuyu destekle'

LANG.addon_settings_u = 'AYARLAR'
LANG.addon_settings_desc = 'Eklentiyi yapılandır'

LANG.addon_stats_u = 'İSTATİSTİKLER'
LANG.addon_stats_desc = 'Eklenti istatistiklerini kontrol et'

LANG.addon_return_u = 'GERİ DÖN'
LANG.addon_return_desc = 'Panele geri dön'

-- Other
LANG.f4_salary = 'Maaş'
LANG.f4_price = 'Ücret'
LANG.f4_loading = 'Yükleniyor'
LANG.f4_purchases = 'Satın alımlar'
LANG.f4_switches = 'Geçişler'
LANG.f4_unavailable = 'Kullanım dışı'
LANG.f4_description_u = 'AÇIKLAMA'
LANG.f4_weapons_u = 'SİLAHLAR'
LANG.f4_entities_u = 'VARLIKLAR'
LANG.f4_ammo_u = 'MERMİ'
LANG.f4_food_u = 'YEMEK'
LANG.f4_shipments_u = 'SEVKİYATLAR'
LANG.f4_become_u = 'MESLEĞE GEÇ'
LANG.f4_create_vote_u = 'OYLAMA BAŞLAT'
LANG.f4_general_u = 'GENEL'
LANG.f4_police_u = 'POLİS'
LANG.f4_mayor_u = 'BAŞKAN'
LANG.f4_confirm_u = 'ONAYLA'
LANG.f4_cancel_u = 'İPTAL ET'
LANG.f4_mostpopular_u = 'EN POPÜLER'
LANG.f4_chart_u = 'GRAFİK'
LANG.f4_loading_u = 'YÜKLENİYOR'
LANG.f4_empty_u = 'BOŞ'

LANG.f4_playersonline_u = 'AKTİF OYUNCULAR'
LANG.f4_totalmoney_u = 'TOPLAM PARA'
LANG.f4_staffonline_u = 'AKTİF YETKİLİLER'
LANG.f4_actions_u = 'EYLEMLER'

-- Actions
LANG['f4_action_input_amount'] = 'Tutar girin'
LANG['f4_action_input_text'] = 'Metin girin'
LANG['f4_action_input_reason'] = 'Sebep girin'
LANG['f4_action_choose_player'] = 'Oyuncu seçin'

LANG['f4_action_confirm_action'] = 'Eylemi onayla'
LANG['f4_action_drop_money'] = 'Para bırak'
LANG['f4_action_give_money'] = 'Para ver'
LANG['f4_action_change_name'] = 'İsim değiştir'
LANG['f4_action_drop_weapon'] = 'Silah bırak'
LANG['f4_action_sell_doors'] = 'Tüm kapıları sat'

LANG['f4_action_warrant'] = 'Baskın emri çıkart'
LANG['f4_action_wanted'] = 'Aranma oluştur'

LANG['f4_toggle_lockdown'] = 'Lockdown oluştur'
LANG['f4_give_license'] = 'Lisans ver'

-- Phrases
LANG['f4_search_text'] = 'İsme göre ara...'

-- Settings
LANG['f4.option_url_desc'] = 'URL girin (iptal için boş bırakın)'

LANG['f4.discord_url.name'] = 'Discord'
LANG['f4.discord_url.desc'] = 'Discord sunucumuza katıl'

LANG['f4.forum_url.name'] = 'Forum'
LANG['f4.forum_url.desc'] = 'Toplulukla tanışın'

LANG['f4.steam_url.name'] = 'Steam'
LANG['f4.steam_url.desc'] = 'Steam grubumuza katıl'

LANG['f4.rules_url.name'] = 'Kurallar'
LANG['f4.rules_url.desc'] = 'Kuralları bil'

LANG['f4.donate_url.name'] = 'Bağış'

LANG['f4.website_ingame.name'] = 'Tarayıcı'
LANG['f4.website_ingame.desc'] = 'URL açmak için oyun içi tarayıcısını kullan'

LANG['f4.title.name'] = 'Başlık'
LANG['f4.title.desc'] = 'Çerçeve için başlık'

LANG['f4.hide_donate_tab.name'] = 'Bağış sekmesini gizle'
LANG['f4.hide_donate_tab.desc'] = 'Kredi market entegrasyon sekmesini gizle'

LANG['f4.edit_job_colors.name'] = 'Meslek renklerini değiştir'
LANG['f4.edit_job_colors.desc'] = 'Meslek renkleri daha açık mı gösterilmeli'

LANG['f4.hide_admins.name'] = 'Yetkili bölümünü gizle'
LANG['f4.hide_admins.desc'] = 'Paneldeki yetkili bölümünü gizle'

LANG['f4.admin_on_duty.name'] = 'Yetkili mesleği etkin'
LANG['f4.admin_on_duty.desc'] = 'Yalnızca belirli meslekteki kişileri yetkili olarak göster'

LANG['f4.admin_on_duty_job.name'] = 'Yetkili meslek ismi'
LANG['f4.admin_on_duty_job.desc'] = 'Yetkilinin meslek ismi*'

LANG['f4.colored_items.name'] = 'Renklendirilmiş Gradyan'
LANG['f4.colored_items.desc'] = 'Mesleklerde/öğelerde hafif gradyanı etkinleştir'

LANG['f4.item_columns.name'] = 'Sütunlar'
LANG['f4.item_columns.desc'] = 'Öğeler için sütun miktarı'

LANG['f4.job_columns.name'] = 'Sütunlar'
LANG['f4.job_columns.desc'] = 'Meslekler için sütun miktarı'

LANG['f4.model_3d.name'] = '3D Modeller'
LANG['f4.model_3d.desc'] = 'Meslek/öğe simgeleri için gerçek zamanlı oluşturmayı etkinleştir'

LANG['f4.item_show_unavailable.name'] = 'Kullanılamayan öğeler'
LANG['f4.item_show_unavailable.desc'] = 'Kontrolde(customCheck) başarısız olan öğeleri göster'

LANG['f4.job_show_unavailable.name'] = 'Kullanılamayan meslekler'
LANG['f4.job_show_unavailable.desc'] = 'Kontrolde(customCheck) başarısız olan meslekleri göster'

LANG['f4.job_show_requirejob.name'] = 'Şartlı meslekler'
LANG['f4.job_show_requirejob.desc'] = 'Oyuncunun yanlış mesleği sebebi ile seçilemeyen meslekleri göster'

onyx.lang:AddPhrases('turkish', LANG)

--addons/onyx_f4/lua/onyx/modules/f4/ui/cl_tab_dashboard.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/cfg/cl_level_systems.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

21/08/2024

--]]

onyx.hud.RegisterLevelSystem( 'vrodankis', {
    getLevel = function( ply )
        return ( ply:getDarkRPVar( 'level' ) or 1 )
    end,
    getXP = function( ply )
        return ( ply:getDarkRPVar( 'xp' ) or 0 )
    end,
    getMaxXP = function( ply )
        -- omg...
        -- this is from Vrondakis, there is no util func
        local level = ( ply:getDarkRPVar( 'level' ) or 1 )
        local maxXP = ( ( ( 10 + ( ( level * ( level + 1 ) * 90 ) ) ) ) * LevelSystemConfiguration.XPMult )
        return maxXP
    end,
    customCheck = function()
        return ( LevelSystemConfiguration ~= nil )
    end,
    onDetected = function()
        hook.Remove( 'HUDPaint', 'manolis:MVLevels:HUDPaintA' )
    end
} )

onyx.hud.RegisterLevelSystem( 'glorified', {
    getLevel = function( ply )
        return GlorifiedLeveling.GetPlayerLevel( ply )
    end,
    getXP = function( ply )
        return GlorifiedLeveling.GetPlayerXP( ply )
    end,
    getMaxXP = function( ply )
        return GlorifiedLeveling.GetPlayerMaxXP( ply )
    end,
    customCheck = function()
        return ( GlorifiedLeveling ~= nil )
    end,
    onDetected = function()
        hook.Remove( 'HUDPaint', 'GlorifiedLeveling.HUD.HUDPaint' )
    end
} )
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_door_info.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_gesture_menu.lua:
return gluapack()()
--addons/bb_onyx_hud/lua/onyx/modules/hud/elements/cl_notifications.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/languages/cl_french.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/languages/cl_german.lua:
--[[

Übersetzer: thestarhd
G-Profile: https://www.gmodstore.com/users/76561198801156110

12.03.2024 - German Translation

--]]

local LANG = {}

-- Phrasen
LANG['copied_clipboard'] = 'In die Zwischenablage kopiert'
LANG['scoreboard_search'] = 'Suchen... (Name/SteamID)'
LANG['you'] = 'Du'
LANG['friend'] = 'Freund'
LANG['addon_return_u'] = 'ZURÜCK'

-- Spalten
LANG['scoreboard_col_team'] = 'Team'
LANG['scoreboard_col_job'] = 'Job'
LANG['scoreboard_col_money'] = 'Geld'
LANG['scoreboard_col_rank'] = 'Rang'
LANG['scoreboard_col_karma'] = 'Karma'
LANG['scoreboard_col_playtime'] = 'Spielzeit'
LANG['scoreboard_col_health'] = 'Gesundheit'
LANG['scoreboard_col_level'] = 'Level'
LANG['scoreboard_col_none'] = 'Keiner'
LANG['scoreboard_col_gang'] = 'Gang'
LANG['scoreboard_col_ashop_badges'] = 'Abzeichen'

-- Namen-Effekte
LANG['scoreboard_eff_default'] = 'Standard'
LANG['scoreboard_eff_glow'] = 'Leuchten'
LANG['scoreboard_eff_rainbow'] = 'Regenbogen'
LANG['scoreboard_eff_scanning_vertical'] = 'Scannen (Vertikal)'
LANG['scoreboard_eff_scanning_horizontal'] = 'Scannen (Horizontal)'
LANG['scoreboard_eff_gradient_invert'] = 'Gradient (Farben umkehren)'
LANG['scoreboard_eff_wavy_dual'] = 'Wellenförmig (Zweifarbig)'

-- Tasten
LANG['scoreboard_btn_profile'] = 'Profil öffnen'
LANG['scoreboard_btn_freeze'] = 'Einfrieren'
LANG['scoreboard_btn_goto'] = 'Gehen zu'
LANG['scoreboard_btn_bring'] = 'Bringen'
LANG['scoreboard_btn_return'] = 'Zurück'
LANG['scoreboard_btn_respawn'] = 'Wiederbeleben'
LANG['scoreboard_btn_slay'] = 'Töten'
LANG['scoreboard_btn_spectate'] = 'Zuschauen'

-- Wörter
LANG['rank_id'] = 'Rang-Identifikator'
LANG['name'] = 'Name'
LANG['effect'] = 'Effekt'
LANG['color'] = 'Farbe'
LANG['preview'] = 'Vorschau'
LANG['creation'] = 'Erstellung'
LANG['save'] = 'Speichern'
LANG['dead'] = 'Tot'
LANG['create_new'] = 'Neu erstellen'
LANG['column'] = 'Spalte'

-- Einstellungen
LANG['addon_settings_u'] = 'EINSTELLUNGEN'
LANG['scoreboard_ranks_u'] = 'RÄNGE'
LANG['scoreboard_columns_u'] = 'SPALTEN'

LANG['scoreboard.title.name'] = 'Titel'
LANG['scoreboard.title.desc'] = 'Gib den Titel für den Rahmen ein'

LANG['scoreboard.group_teams.name'] = 'Teamgruppen'
LANG['scoreboard.group_teams.desc'] = '(DarkRP) Gruppiere Teams nach Jobkategorien'

LANG['scoreboard.colored_players.name'] = 'Farbverlauf'
LANG['scoreboard.colored_players.desc'] = 'Zeige farbigen Verlauf auf Spielerzeile'

LANG['scoreboard.blur.name'] = 'Unschärfe-Design'
LANG['scoreboard.blur.desc'] = 'Aktiviere Unschärfe-Design'

LANG['scoreboard.scale.name'] = 'Rahmengröße skalieren'
LANG['scoreboard.scale.desc'] = 'Skaliere die Rahmengröße des Scoreboards'

onyx.lang:AddPhrases('german', LANG)
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/languages/cl_russian.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/languages/cl_turkish.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/core/integrations/cl_brick_gangs.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

12/03/2024

--]]

local stored = {}

function onyx.scoreboard.GetBricksGangName(gangID)
    return (stored[gangID] or '')
end

net.Receive('onyx.scoreboard(Bricks.Gangs):Replace', function(len)
    local id = net.ReadUInt(16)
    local name = net.ReadString()
    stored[id] = name
end)

net.Receive('onyx.scoreboard(Bricks.Gangs):Remove', function(len)
    stored[net.ReadUInt(16)] = nil
end)

netchunk.Callback('onyx.scoreboard:SyncBrickGangs', function(data, len)
    stored = data
    onyx.scoreboard:Print('Synchronized brick\'s gangs (#)', len)
end)
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/core/ranks/cl_ranks.lua:
return gluapack()()
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/ui/cl_frame.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

28/02/2024

--]]

local COLOR_PRIMARY = onyx:Config('colors.primary')
local COLOR_SECONDARY = onyx:Config('colors.secondary')
local COLOR_TERTIARY = onyx:Config('colors.tertiary')
local COLOR_ACCENT = onyx:Config('colors.accent')
local COLOR_GRAY = Color(149, 149, 149)

--[[------------------------------
// ANCHOR Frame
--------------------------------]]
local PANEL = {}

function PANEL:Init()
    self:SetTitle(onyx.utf8.upper(onyx.scoreboard:GetOptionValue('title')).." "..player.GetCount().."/"..game.MaxPlayers())

    self.blur = onyx.scoreboard.IsBlurActive()

    self.container = self:Add('onyx.Panel')

    self.sidebar = self:Add('onyx.MiniSidebar')
    self.sidebar:SetContainer(self.container)
    self.sidebar:SetWide(onyx.ScaleTall(45)) -- it's important to set width at this point

    self.sidebar:AddTab({
        name = '<PLAYERS>',
        desc = '',
        icon = 'https://i.imgur.com/1dE2q2H.png',
        class = 'onyx.Scoreboard.PlayerList'
    })

    CAMI.PlayerHasAccess(LocalPlayer(), 'onyx_scoreboard_edit', function(bAllowed)
        if (bAllowed) then
            self.sidebar:AddTab({
                name = '<ADMIN>',
                desc = '',
                icon = 'https://i.imgur.com/l4M12dO.png',
                onClick = function()
                    onyx.scoreboard.OpenAdminSettings()
                    self:Remove()
                    return false
                end
            })
        end
    end)

    self.sidebar:ChooseTab(1)
end

function PANEL:PerformLayout(w, h)
    local margin = onyx.ScaleTall(10)

    self.BaseClass.PerformLayout(self, w, h)

    self.container:Dock(FILL)
    self.container:DockMargin(margin, margin, margin, margin)

    self.sidebar:Dock(LEFT)
end

function PANEL:Paint(w, h)
    if (self.blur) then
        onyx.DrawBlurExpensive(self, 9)
        draw.RoundedBox(8, 0, 0, w, h, ColorAlpha(onyx.ColorBetween(COLOR_PRIMARY, color_black), 230))
    else
        self.BaseClass.Paint(self, w, h)
    end
end

function PANEL:Think()
    if (self.closeDisabled) then
        local bindButtonName = input.LookupBinding('+showscores', true)
        local bindButtonInt = bindButtonName and input.GetKeyCode(bindButtonName)
        if (not bindButtonInt) then return end

        local newState = input.IsKeyDown(bindButtonInt)
        if (self.oldState == nil) then
            self.oldState = newState
        elseif (self.oldState ~= newState) then
            if (newState) then
                self:Remove()
            end
            self.oldState = newState
        end
    end
end

onyx.gui.Register('onyx.Scoreboard.Frame', PANEL, 'onyx.Frame')

--[[------------------------------
// ANCHOR Debug
--------------------------------]]
-- onyx.gui.Test('onyx.Scoreboard.Frame', .6, .6, function(self)
--     onyx.scoreboard.Frame = self
--     self:Center()
--     self:MakePopup()
-- end)
--addons/onyx_scoreboard/lua/onyx/modules/scoreboard/ui/cl_rank_editor.lua:
--[[

Author: tochnonement
Email: tochnonement@gmail.com

04/03/2024

--]]

local COLOR_PRIMARY = onyx:Config('colors.primary')
local COLOR_SECONDARY = onyx:Config('colors.secondary')
local COLOR_TERTIARY = onyx:Config('colors.tertiary')
local COLOR_ACCENT = onyx:Config('colors.accent')

local PANEL = {}

function PANEL:Init()
    self.list = self:Add('onyx.ScrollPanel')

    self.grid = self.list:Add('onyx.Grid')
    self.grid:SetColumnCount(2)
    self.grid:SetSpace(onyx.ScaleTall(5))

    self.editor = self:Add('onyx.ScrollPanel')
    self.editor:Hide()

    self:InitEditor(self.editor)
    self:LoadRanks()

    hook.Add('onyx.scoreboard.SyncedRanks', self, function()
        self.grid:Clear()
        self:LoadRanks()
    end)
end

function PANEL:ShowEditor()
    self.editor:Show()
    self.editor:SetAlpha(0)
    self.editor:AlphaTo(255, .1)

    self.list:Hide()
end

function PANEL:HideEditor()
    self.list:Show()
    self.list:SetAlpha(0)
    self.list:AlphaTo(255, .1)

    self.editor:Hide()
end

function PANEL:PerformLayout(w, h)
    self.list:Dock(FILL)
    self.editor:Dock(FILL)
end

function PANEL:LoadRanks()
    local btnCreate = self.grid:Add('onyx.Button')
    btnCreate:SetText(onyx.utf8.upper(onyx.lang:Get('create_new')))
    btnCreate:SetTall(onyx.ScaleTall(40))
    btnCreate:SetColorIdle(COLOR_SECONDARY)
    btnCreate:SetColorHover(COLOR_TERTIARY)
    btnCreate.DoClick = function(panel)
        self:LoadEditorRank()
        self:ShowEditor()
    end

    self.grid:AddItem(btnCreate)

    for uniqueID, data in pairs(onyx.scoreboard.ranks) do
        local name = data.name
        local title = uniqueID .. (name ~= '' and string.format(' (%s)', name) or '')

        local btnRank = self.grid:Add('onyx.Button')
        btnRank:SetText(title)
        btnRank:SetTall(onyx.ScaleTall(40))
        btnRank:SetColorIdle(COLOR_SECONDARY)
        btnRank:SetColorHover(COLOR_TERTIARY)
        btnRank.DoClick = function(panel)
            self:LoadEditorRank(data, uniqueID)
            self:ShowEditor()
        end
        self.grid:AddItem(btnRank)
    end
end

function PANEL:LoadEditorRank(data, uniqueID)
    local fields = self.fields
    if (istable(data)) then
        -- load
        self.editor.header:SetText(data.name)
        self.btnDelete:Show()
        self.btnDelete.DoClick = function(panel)
            net.Start('onyx.scoreboard:DeleteRank')
                net.WriteString(uniqueID)
            net.SendToServer()

            self:HideEditor()
        end

        fields['uniqueID'].input:SetDisabled(true)
        fields['uniqueID'].input:SetValue(uniqueID)
        fields['name'].input:SetValue(data.name)
        fields['color'].input.picker:SetColor(data.color)

        local option, index = fields['effect'].input:FindOptionByData(data.effectID)
        if (option) then
            fields['effect'].input:ChooseOptionID(index)
        end
    else
        -- reset
        self.editor.header:SetText(onyx.utf8.upper(onyx.lang:Get('creation')))
        self.btnDelete:Hide()

        fields['uniqueID'].input:SetDisabled(false)
        fields['uniqueID'].input:SetValue('')
        fields['name'].input:SetValue('')
        fields['color'].input.picker:SetColor(color_white)
        fields['effect'].input:Reset()
    end
end

function PANEL:InitEditor(editor)
    local header = editor:Add('onyx.Label')
    header:SetTall(onyx.ScaleTall(40))
    header:SetText('')
    header:Dock(TOP)
    header:CenterText()
    header.Paint = function(panel, w, h)
        draw.RoundedBox(8, 0, 0, w, h, COLOR_SECONDARY)
    end
    editor.header = header

    local btnBack = header:Add('onyx.ImageButton')
    btnBack:SetWide(header:GetTall())
    btnBack:Dock(LEFT)
    btnBack:SetImageScale(.75)
    btnBack:SetURL('https://i.imgur.com/B9XOMVX.png', 'smooth mips')
    btnBack.DoClick = function()
        self:HideEditor()
    end

    self.btnDelete = header:Add('onyx.ImageButton')
    self.btnDelete:SetWide(header:GetTall())
    self.btnDelete:Dock(RIGHT)
    self.btnDelete:SetImageScale(.75)
    self.btnDelete:SetURL('https://i.imgur.com/nmT20xe.png', 'smooth mips')

    self.fields = {}
    self:CreateField(editor, 'uniqueID', onyx.utf8.upper(onyx.lang:Get('rank_id')), function(container)
        local entry = container:Add('onyx.TextEntry')
            entry:SetPlaceholderText('admin')
            entry.textEntry:SetMaximumCharCount(24)
        return entry
    end)

    self:CreateField(editor, 'name', onyx.utf8.upper(onyx.lang:Get('name')), function(container)
        local entry = container:Add('onyx.TextEntry')
            entry:SetPlaceholderText('Administrator')
            entry.textEntry:SetMaximumCharCount(24)
        return entry
    end)

    self:CreateField(editor, 'effect', onyx.utf8.upper(onyx.lang:Get('effect')), function(container)
        local combo = container:Add('onyx.ComboBox')
            for _, data in ipairs(onyx.scoreboard.nameEffects) do
                combo:AddOption(onyx.lang:Get(data.name), data.id)
            end
        return combo
    end)

    self:CreateField(editor, 'color', onyx.utf8.upper(onyx.lang:Get('color')), function(container)
        local panel = container:Add('Panel')

        local picker = panel:Add('DColorMixer')
        picker:Dock(FILL)
        picker:SetAlphaBar(false)
        picker:SetPalette(false)
        panel.picker = picker

        return panel
    end, 150)

    self:CreateField(editor, 'preview', onyx.utf8.upper(onyx.lang:Get('preview')), function(container)
        local name = LocalPlayer():Name()
        local preview = container:Add('onyx.Panel')
            preview.Paint = function(panel, w, h)
                local effectID = self.fields.effect.input:GetOptionData()
                local effectData = onyx.scoreboard:FindNameEffect(effectID or '')
                local color = self.fields.color.input.picker:GetColor()

                draw.RoundedBox(8, 0, 0, w, h, COLOR_SECONDARY)
                draw.RoundedBox(8, 1, 1, w - 2, h - 2, COLOR_PRIMARY)

                if (effectData) then
                    local realX, realY = panel:LocalToScreen(0, 0)
                    local x, y = onyx.ScaleTall(10), h * .5

                    effectData.func(name, x, y, color, 0, 1, realX + x, realY + y)
                end
            end
        return preview
    end)

    self.btnSave = editor:Add('onyx.Button')
    self.btnSave:SetText(onyx.utf8.upper(onyx.lang:Get('save')))
    self.btnSave:Dock(TOP)
    self.btnSave.DoClick = function(panel)
        local fields = self.fields
        local uniqueID = fields['uniqueID'].input:GetValue():Trim()
        local name = fields['name'].input:GetValue():Trim()
        local effect = fields['effect'].input:GetOptionData()
        local color = fields['color'].input.picker:GetColor()

        if (utf8.len(uniqueID) < 1 or utf8.len(uniqueID) > 24) then
            fields['uniqueID'].input:Highlight(Color(255, 0, 0), 1)
            return
        end

        if (utf8.len(name) > 24) then
            fields['name'].input:Highlight(Color(255, 0, 0), 1)
            return
        end

        net.Start('onyx.scoreboard:ReplaceRank')
            net.WriteString(uniqueID)
            net.WriteString(name)
            net.WriteString(effect)
            net.WriteColor(Color(color.r, color.g, color.b)) -- DColorMixer doesn't return Color object...
        net.SendToServer()

        self:HideEditor()
    end
end

function PANEL:CreateField(editor, key, title, buildFunc, size)
    local font = onyx.Font('Comfortaa SemiBold@14')
    local margin = onyx.ScaleTall(7.5)

    local field = editor:Add('Panel')
    field:Dock(TOP)
    field:SetTall(onyx.ScaleTall(size or 70))
    field.Paint = function(panel, w, h)
        draw.RoundedBox(8, 0, 0, w, h, COLOR_PRIMARY)
    end

    local header = field:Add('Panel')
    header:SetTall(onyx.ScaleTall(25))
    header:Dock(TOP)
    header.Paint = function(panel, w, h)
        draw.RoundedBoxEx(8, 0, 0, w, h, COLOR_SECONDARY, true, true)
        draw.SimpleText(title, font, onyx.ScaleTall(10), h * .5, color_white, 0, 1)
    end

    local container = field:Add('Panel')
    container:DockMargin(margin, margin, margin, margin)
    container:Dock(FILL)

    self.fields[key] = field

    if (isfunction(buildFunc)) then
        local panel = buildFunc(container)
        assert(panel, string.format('Invalid panel created (%s)', tostring(panel)))
        panel:Dock(FILL)

        field.input = panel
    end
end

onyx.gui.Register('onyx.scoreboard.RankEditor', PANEL)

-- if (IsValid(DebugPanel)) then
--     DebugPanel:Remove()
-- end

-- DebugPanel = onyx.scoreboard.OpenAdminSettings(2)
--addons/gmodadminsuite-config/lua/openpermissions_config.lua:
return gluapack()()
--addons/pcasino/lua/perfectcasino/derma/cl_config.lua:
-- This whole file is a little less than ideal. I find it hard to keep derma clean, especially when it can get so big so quickly.
-- I tried my best to keep consistent and to the point, but it gets a mind of its own in some places.
-- On the plus side, this menu will be used like twice, so its not the end of the world. Right?

-- Function cache
local color = Color
local draw_simpletext = draw.SimpleText
local draw_notexture = draw.NoTexture
local draw_roundedboxex = draw.RoundedBoxEx
local draw_roundedbox = draw.RoundedBox
local surface_setdrawcolor = surface.SetDrawColor
local surface_drawrect = surface.DrawRect
local surface_setdrawcolor = surface.SetDrawColor
local surface_setmaterial = surface.SetMaterial
local surface_drawtexturedrect = surface.DrawTexturedRect
-- Color cache
local mainBlack = color(38, 38, 38)
local bodyBlack = color(40, 40, 40)
local textWhite = color(220, 220, 220)
local mainRed = color(155, 50, 50)
local lineBreak = color(255, 255, 255, 10)
local scrollBackground = color(0, 0, 0, 100)

-- Material cache
local gradientDown = Material("gui/gradient_down")
local gradientMain = Material("gui/gradient")

-- Pre config stuff
local comboOptions = {}
comboOptions["pcasino_slot_machine"] = {
	"anything",
	"bell",
	"berry",
	"cherry",
	"clover",
	"diamond",
	"dollar",
	"melon",
	"seven"
}
comboOptions["pcasino_wheel_slot_machine"] = {
	"anything",
	"gold",
	"coins",
	"emerald",
	"bag",
	"bar",
	"coin",
	"vault",
	"chest"
}

PerfectCasino.UI.ConfigMenu = nil
PerfectCasino.UI.CurrentSettings = PerfectCasino.UI.CurrentSettings or {}
function PerfectCasino.UI.Config()
	if IsValid(PerfectCasino.UI.ConfigMenu) then PerfectCasino.UI.ConfigMenu:Show() return end

	local frame = vgui.Create("DFrame")
	PerfectCasino.UI.ConfigMenu = frame
	frame:SetSize(ScrW() * 0.6, ScrH() * 0.6)
	frame:SetTitle("")
	frame:Center()
	frame:MakePopup()
	frame:ShowCloseButton(false)
	frame:SetDraggable(false)
	frame:DockPadding(0, 0, 0, 0)
	frame.Paint = function(self, w, h)
		-- We drop the 40 to allow for rounded edges on the header
		surface_setdrawcolor(bodyBlack)
		surface_drawrect(0, 40, w, h-40)
	end
	frame.fullScreen = false
	frame.centerX, frame.centerY = frame:GetPos()

	local header = vgui.Create("DPanel", frame)
	header:Dock(TOP)
	header:SetTall(40)
	header:DockMargin(0, 0, 0, 0)
	header.Paint = function(self, w, h)
		draw_roundedboxex(frame.fullScreen and 0 or 5, 0, 0, w, 40, mainBlack, true, true)
		draw_simpletext(PerfectCasino.Translation.ConfigMenu.Title, "pCasino.Header.Static", 10, 20, mainRed, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
	end

		-- Header buttons
		local close = vgui.Create("DButton", header)
		close:Dock(RIGHT)
		close:SetSize(header:GetTall(), header:GetTall())
		close:SetText("")
		close.animationLerp = 0
		close.Paint = function(self, w, h)
			if self:IsHovered() then
				self.animationLerp = math.Approach(self.animationLerp or 0, 1, 5*FrameTime())
			else
				self.animationLerp = math.Approach(self.animationLerp or 1, 0, 5*FrameTime())
			end

			draw_notexture()
			surface_setdrawcolor(200 - (self.animationLerp*55), 0, 0, 255)
			PerfectCasino.UI.DrawCircle(w*0.5, h*0.5, w*0.2, 1)
		end
		close.DoClick = function()
			frame:Hide()
		end

		local scale = vgui.Create("DButton", header)
		scale:Dock(RIGHT)
		scale:SetSize(header:GetTall(), header:GetTall())
		scale:SetText("")
		scale.animationLerp = 0
		scale.Paint = function(self, w, h)
			if self:IsHovered() then
				self.animationLerp = math.Approach(self.animationLerp or 0, 1, 5*FrameTime())
			else
				self.animationLerp = math.Approach(self.animationLerp or 1, 0, 5*FrameTime())
			end

			draw_notexture()
			surface_setdrawcolor(255, 165 - (self.animationLerp*25), 0, 255)
			PerfectCasino.UI.DrawCircle(w*0.5, h*0.5, w*0.2, 1)
		end
		scale.DoClick = function()
			if frame.fullScreen then
				frame:SizeTo(ScrW()*0.6, ScrH()*0.6, 0.5)
				frame:MoveTo(frame.centerX, frame.centerY, 0.5)
			else
				frame:SizeTo(ScrW(), ScrH(), 0.5)
				frame:MoveTo(0, 0, 0.5)
			end

			frame.fullScreen = not frame.fullScreen
		end

	-- Used to apply padding as DScrollPanel doesn't allow it
	local shellParent = vgui.Create("DPanel", frame)
	shellParent:Dock(FILL)
	shellParent:DockPadding(5, 5, 5, 5)
	shellParent.Paint = function(self, w, h)
		surface_setdrawcolor(0, 0, 0, 155)
		-- Header shadow
		surface_setmaterial(gradientDown)
		surface_drawtexturedrect(0, 0, w, 10)
		-- Navbar shadow
		surface_setmaterial(gradientMain)
		surface_drawtexturedrect(0, 0, 10, h)
	end
	local shell = vgui.Create("DScrollPanel", shellParent)
	shell:Dock(FILL)
	shell.Paint = function() end
	local sbar = shell:GetVBar()
	sbar:SetWide(sbar:GetWide()*0.5)
	sbar:SetHideButtons(true)
	function sbar:Paint(w, h)
		draw_roundedbox(10, 0, 0, w, h, scrollBackground)
	end
	function sbar.btnGrip:Paint(w, h)
		draw_roundedbox(10, 0, 0, w, h, mainRed)
	end



	local navBar = vgui.Create("DScrollPanel", frame)
	navBar:Dock(LEFT)

	local buttonX, buttonY = 0, 0
	local barPos = 0
	navBar.Paint = function(self, w, h)
		surface_setdrawcolor(mainBlack)
		surface_drawrect(0, 0, w, h)

		surface_setdrawcolor(lineBreak)
		surface_drawrect(0, 0, w, 2)

		if not self.currentFocus then return end

		buttonX, buttonY = self.currentFocus:GetPos()
		barPos = Lerp(0.1, barPos, buttonY)
		barPos = math.Approach(barPos, buttonY, 5*FrameTime())

		surface_setdrawcolor(mainRed)
		surface_drawrect(0, barPos, 4, 40)
	end
	navBar:SetSize(frame:GetWide()*0.2)
	navBar:GetVBar():SetWide(0)
	navBar.open = true

	function navBar:AddTab(name, callback)
		local button = vgui.Create("DButton", self)
		button:Dock(TOP)
		button:SetTall(40)
		button:SetText("")

		button.Paint = function(me, w, h)
			draw_simpletext(name, "pCasino.Nav.Static", 12, h*0.5, textWhite, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
			surface_setdrawcolor(lineBreak)
			surface_drawrect(5, h-2, w-10, 2)
		end

		button.DoClick = function()
			shell:Clear()
			self.currentFocus = button
			callback(shell, button, self)
		end

		if not self.currentFocus then
			timer.Simple(0.1, function()
				if not IsValid(button) then return end
				button.DoClick()
			end)
			self.currentFocus = button
		end

		return button
	end

	local entityToConfig = vgui.Create("DPanel", shell)
	entityToConfig:SetTall(65)
	entityToConfig:Dock(TOP)
	entityToConfig.Paint = function(self, w, h)
		draw_simpletext(PerfectCasino.Translation.ConfigMenu.EntityToConfig, "pCasino.Title.Static", 10, 0, textWhite, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
		surface_setdrawcolor(lineBreak)
		surface_drawrect(5, h-2, w-10, 2)
	end

	local entry = vgui.Create("DComboBox", entityToConfig)
	frame.entitySelectBox = entry
	entry:Dock(BOTTOM)
	entry:DockMargin(10, 0, 10, 5)
	entry:SetValue(PerfectCasino.Translation.ConfigMenu.EntityToConfigComboBox)
	for k, v in pairs(PerfectCasino.Core.Entites) do
		entry:AddChoice(PerfectCasino.Translation.Entities[k] or k, k)
	end
	entry.OnSelect = function(self, index, name, class)
		local configData = PerfectCasino.Core.GetEntityConfigOptions(class)
		local allSettings = (PerfectCasino.UI.CurrentSettings.Entity == class) and PerfectCasino.UI.CurrentSettings.Settings or {}
		for k, v in pairs(configData) do
			allSettings[k] = allSettings[k] or {}
			if k == "combo" then
				navBar:AddTab(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k].Title or k, function(shell)
					local title = vgui.Create("DPanel", shell)
					title:Dock(TOP)
					title:DockMargin(0, 0, 0, 5)
					title:SetTall(57.5)
					title.Paint = function(self, w, h)
						draw_simpletext(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k].Title or k, "pCasino.Title.Static", 10, 0, mainRed, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
						draw_simpletext(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k].Desc or "", "pCasino.SubTitle.Static", 10, h, mainRed, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM)
					end

					local function addComboCard(data, key)
						local base = vgui.Create("DPanel", shell)
						base:SetTall(135)
						base:Dock(TOP)
						base.Paint = function(self, w, h)
							surface_setdrawcolor(lineBreak)
							surface_drawrect(5, h-2, w-10, 2)
						end
						local entryBar = vgui.Create("DPanel", base)
						entryBar:Dock(BOTTOM)
						entryBar:SetTall(20)
						entryBar:DockMargin(5, 0, 5, 5)
						entryBar.Paint = function() end
							local multiplier = vgui.Create("DPanel", entryBar)
							multiplier:Dock(LEFT)
							multiplier:SetWide(275)
							multiplier:DockMargin(0, 0, 0, 0)
							multiplier:SetTall(20)
							multiplier.Paint = function(self, w, h)
								draw_simpletext(PerfectCasino.Translation.ConfigMenu.TakeoutBonusMultiplier, "pCasino.Textbox.Static", 10, h*0.5, textWhite, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
							end
								local entry = vgui.Create("pCasinoEntry", multiplier)
								entry:Dock(RIGHT)
								entry:DockMargin(5, 0, 5, 0)
								entry.OnChange = function()
									allSettings[k][base.key].p = entry:GetValue()
								end
								entry:SetDisplayText("0.5")
								entry:SetNumeric(true)
								entry:SetValue(data and data.p or 0.5)

							local jackpot = vgui.Create("DPanel", entryBar)
							jackpot:Dock(LEFT)
							jackpot:SetWide(140)
							jackpot:DockMargin(0, 0, 0, 0)
							jackpot:SetTall(20)
							jackpot.Paint = function(self, w, h)
								draw_simpletext(PerfectCasino.Translation.ConfigMenu.IsJackpot, "pCasino.Textbox.Static", 10, h*0.5, textWhite, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
							end
								local toggle = vgui.Create("pCasinoSwitch", jackpot)
								toggle:Dock(RIGHT)
								toggle:SetWide(40)
								toggle:SetToggle(data and data.j or false)
								toggle.DoClick = function()
									toggle:Toggle()
									allSettings[k][base.key].j = toggle:GetToggle()
								end

							local delete = vgui.Create("DButton", entryBar)
							delete:Dock(RIGHT)
							delete:SetWide(75)
							delete:SetText("")
							delete:DockMargin(5, 0, 0, 0)
							delete.animationLerp = 0
							delete.Paint = function(self, w, h)
								if self:IsHovered() then
									self.animationLerp = math.Approach(self.animationLerp or 0, 1, 5*FrameTime())
								else
									self.animationLerp = math.Approach(self.animationLerp or 1, 0, 5*FrameTime())
								end
								draw_roundedbox(0+(5*self.animationLerp), 0, 0, w, h, mainRed)
								draw_simpletext(PerfectCasino.Translation.ConfigMenu.Delete, "pCasino.Button.Micro", w*0.5, (h*0.5), textWhite, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
							end
							delete.DoClick = function()
								allSettings[k][base.key] = nil
								base:Remove()
							end

						local btnBar = vgui.Create("DPanel", base)
						btnBar:Dock(BOTTOM)
						btnBar:SetTall(20)
						btnBar:DockMargin(5, 0, 5, 5)
						btnBar.Paint = function() end

						for i=1, 3 do
							local icon = vgui.Create("DImage", base)	-- Add image to Frame
							icon:Dock(LEFT)
							icon:SetWide(75)
							icon:DockMargin(5, 5, 0, 5)
							icon:SetMaterial(PerfectCasino.Icons["anything"].mat)

							local nextIcon = vgui.Create("DButton", btnBar)
							nextIcon:Dock(LEFT)
							nextIcon:SetWide(75)
							nextIcon:SetText("")
							nextIcon:DockMargin(5, 0, 0, 0)
							nextIcon.CurState = 1
							if data then
								for k, v in pairs(comboOptions[class]) do
									if v == data.c[i] then
										nextIcon.CurState = k
										icon:SetMaterial(PerfectCasino.Icons[comboOptions[class][nextIcon.CurState]].mat)
										break
									end
								end
							end
							nextIcon.animationLerp = 0
							nextIcon.Paint = function(self, w, h)
								if self:IsHovered() then
									self.animationLerp = math.Approach(self.animationLerp or 0, 1, 5*FrameTime())
								else
									self.animationLerp = math.Approach(self.animationLerp or 1, 0, 5*FrameTime())
								end
								draw_roundedbox(0+(5*self.animationLerp), 0, 0, w, h, mainRed)
								draw_simpletext(PerfectCasino.Icons[comboOptions[class][self.CurState]].name, "pCasino.Button.Micro", w*0.5, (h*0.5), textWhite, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
							end
							nextIcon.DoClick = function()
								nextIcon.CurState = nextIcon.CurState + 1

								if not comboOptions[class][nextIcon.CurState] then
									nextIcon.CurState = 1
								end

								icon:SetMaterial(PerfectCasino.Icons[comboOptions[class][nextIcon.CurState]].mat)
								
								allSettings[k][base.key].c = allSettings[k][base.key].c or {}
								allSettings[k][base.key].c[i] = comboOptions[class][nextIcon.CurState]
							end
						end

						local icons = {}
						for k, v in pairs(btnBar:GetChildren()) do
							icons[k] = comboOptions[class][v.CurState]
						end
						if key then
							base.key = key
						else
							base.key = table.insert(allSettings[k], {c = {icons[1], icons[2], icons[3]}, p = entry:GetValue(), j = toggle:GetToggle()})
						end
					end

					local newCombo = vgui.Create("DButton", shell)
					newCombo:SetText("")
					newCombo:Dock(TOP)
					newCombo:SetTall(25)
					newCombo:DockMargin(10, 5, 10, 5)
					newCombo.animationLerp = 0
					newCombo.Paint = function(self, w, h)
						if self:IsHovered() then
							self.animationLerp = math.Approach(self.animationLerp or 0, 1, 5*FrameTime())
						else
							self.animationLerp = math.Approach(self.animationLerp or 1, 0, 5*FrameTime())
						end
						draw_roundedbox(0+(5*self.animationLerp), 0, 0, w, h, mainRed)
						draw_simpletext(PerfectCasino.Translation.ConfigMenu.AddComboButton, "pCasino.Main.Static", w*0.5, (h*0.5), textWhite, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
					end
					newCombo.DoClick = function()
						addComboCard(data)
						shell:GetVBar():AnimateTo(150*(#allSettings[k] + 1), 1)
					end

					-- PerfectCasino.Icons

					local tableHeaders = vgui.Create("DPanel", shell)
					tableHeaders:Dock(TOP)
					tableHeaders:SetTall(30)
					tableHeaders.Paint = function(self, w, h)
						draw_simpletext(PerfectCasino.Translation.ConfigMenu.TableHeaderChance, "pCasino.Main.Static", 10, h*0.5, textWhite, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
						surface_setdrawcolor(lineBreak)
						surface_drawrect(10, h-2, w-15, 2)
					end

						local useSettings = false
						if not table.IsEmpty(allSettings[k]) then
							useSettings = true
						end
						for n, m in pairs(useSettings and allSettings[k] or v) do
							addComboCard(m, useSettings and n or nil)
						end
				end)
			elseif k == "wheel" then
				navBar:AddTab(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k].Title or k, function(shell)
					local title = vgui.Create("DPanel", shell)
					title:Dock(TOP)
					title:DockMargin(0, 0, 0, 5)
					title:SetTall(57.5)
					title.Paint = function(self, w, h)
						draw_simpletext(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k].Title or k, "pCasino.Title.Static", 10, 0, mainRed, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
						draw_simpletext(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k].Desc or "", "pCasino.SubTitle.Static", 10, h, mainRed, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM)
					end

					for n, m in pairs(v) do
						allSettings[k][n] = allSettings[k][n] or m
						local setting = vgui.Create("DPanel", shell)
						setting:SetTall(80)
						setting:Dock(TOP)
						setting.Paint = function(self, w, h)
							--draw_simpletext(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k][n] or string.upper(n), "pCasino.SubTitle.Static", 10, 0, k == "chance" and colorCache[n] or textWhite, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
							surface_setdrawcolor(lineBreak)
							surface_drawrect(5, h-2, w-10, 2)
						end
	
						local icon = vgui.Create("DImageButton", setting)	-- Add image to Frame
						icon:Dock(LEFT)
						icon:SetWide(80)
						icon:DockMargin(5, 5, 0, 5)
						icon.CurState = 1
						icon:SetMaterial(PerfectCasino.Icons[PerfectCasino.IconsList[icon.CurState]].mat)
						for z, x in pairs(PerfectCasino.IconsList) do
							if x == allSettings[k][n].p then
								icon.CurState = z
								icon:SetMaterial(PerfectCasino.Icons[PerfectCasino.IconsList[icon.CurState]].mat)
								break
							end
						end
						icon.DoClick = function()
							icon.CurState = icon.CurState + 1

							if not PerfectCasino.IconsList[icon.CurState] then
								icon.CurState = 1
							end

							icon:SetMaterial(PerfectCasino.Icons[PerfectCasino.IconsList[icon.CurState]].mat)
							
							allSettings[k][n].p = PerfectCasino.IconsList[icon.CurState]
						end

						local inputValue = vgui.Create("pCasinoEntry", setting)
						inputValue:Dock(BOTTOM)
						inputValue:DockMargin(5, 0, 10, 5)
						inputValue.OnChange = function()
							allSettings[k][n].i = inputValue:GetValue() == "" and m.i or inputValue:GetValue()
						end
						inputValue:SetDisplayText(m.i)
						inputValue:SetText((not (allSettings[k][n].i == m.i)) and allSettings[k][n].i or m.i)

						local rewardType = vgui.Create("DComboBox", setting)
						rewardType:Dock(BOTTOM)
						rewardType:DockMargin(5, 5, 10, 5)
						rewardType:SetValue(PerfectCasino.Translation.ConfigMenu.RewardComboBox)
						for o, p in pairs(PerfectCasino.Config.RewardsFunctions) do
							local key = rewardType:AddChoice(PerfectCasino.Translation.Rewards[o] or o, o)
							if allSettings[k][n].f == o then
								rewardType:ChooseOptionID(key)
							end
						end
						rewardType.OnSelect = function(self, index, name, class)
							allSettings[k][n].f = class
						end

						local name = vgui.Create("pCasinoEntry", setting)
						name:Dock(BOTTOM)
						name:DockMargin(5, 0, 10, 0)
						name.OnChange = function()
							allSettings[k][n].n = name:GetValue() == "" and m.n or name:GetValue()
						end
						name:SetDisplayText(m.n)
						name:SetText((not (allSettings[k][n].n == m.n)) and allSettings[k][n].n or m.n)

					end
				end)
			elseif k == "chance" then
				navBar:AddTab(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k].Title or k, function(shell)
					local title = vgui.Create("DPanel", shell)
					title:Dock(TOP)
					title:DockMargin(0, 0, 0, 5)
					title:SetTall(57.5)
					title.Paint = function(self, w, h)
						draw_simpletext(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k].Title or k, "pCasino.Title.Static", 10, 0, mainRed, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
						draw_simpletext(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k].Desc or "", "pCasino.SubTitle.Static", 10, h, mainRed, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM)
					end
	
					local colorCache = {}
					local chanceBar = vgui.Create("DPanel", shell)
					chanceBar:Dock(TOP)
					chanceBar:DockMargin(0, 0, 0, 5)
					chanceBar:SetTall(60)
					chanceBar.Paint = function(self, w, h)
						draw_simpletext(PerfectCasino.Translation.Config.chance.Bar, "pCasino.Title.Static", 10, 0, mainRed, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
						surface_setdrawcolor(lineBreak)
						surface_drawrect(10, (h*0.5)+5, w-20, (h*0.5)-10)
	
						-- (hudW-10) * math_clamp(localPly:Health(), 0, 100)/100
						local total = 0
						for n, m in pairs(allSettings[k]) do
							total = total+m
						end
						-- I know, the same loop twice... Ugly :/
						local curPos = 10
						for n, m in pairs(allSettings[k]) do
							if m == 0 then continue end
							if not colorCache[n] then
								colorCache[n] = Color(math.random(100, 255), math.random(100, 255), math.random(100, 255))
							end
	
							local width = (w-20) * (m/total)
							surface_setdrawcolor(colorCache[n])
							surface_drawrect(curPos, (h*0.5)+5, width, (h*0.5)-10)
	
							curPos = curPos + width
						end
					end
	
					for n, m in pairs(v) do
						allSettings[k][n] = allSettings[k][n] or m.d
						local setting = vgui.Create("DPanel", shell)
						setting:SetTall(50)
						setting:Dock(TOP)
						setting.Paint = function(self, w, h)
							draw_simpletext(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k][n] or string.upper(n), "pCasino.SubTitle.Static", 60, 0, k == "chance" and colorCache[n] or textWhite, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
							surface_setdrawcolor(lineBreak)
							surface_drawrect(5, h-2, w-10, 2)
						end

						local icon = vgui.Create("DImageButton", setting)	-- Add image to Frame
						icon:Dock(LEFT)
						icon:SetWide(45)
						icon:DockMargin(5, 5, 0, 5)
						icon.CurState = 1
						icon:SetMaterial(PerfectCasino.Icons[n].mat)

						local entry = vgui.Create("pCasinoEntry", setting)
						entry:Dock(BOTTOM)
						entry:DockMargin(10, 0, 10, 5)
						entry.OnChange = function()
							allSettings[k][n] = entry:GetValue() == "" and m.d or entry:GetValue()
						end
						entry:SetDisplayText(m.d)
						entry:SetText((not (allSettings[k][n] == m.d)) and allSettings[k][n] or "")
						entry:SetNumeric(true)
					end
				end)
			else
				navBar:AddTab(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k].Title or k, function(shell)
					local title = vgui.Create("DPanel", shell)
					title:Dock(TOP)
					title:DockMargin(0, 0, 0, 5)
					title:SetTall(57.5)
					title.Paint = function(self, w, h)
						draw_simpletext(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k].Title or k, "pCasino.Title.Static", 10, 0, mainRed, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
						draw_simpletext(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k].Desc or "", "pCasino.SubTitle.Static", 10, h, mainRed, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM)
					end
	
					for n, m in pairs(v) do
						-- allSettings[k][n] = allSettings[k][n] or m.d
						if allSettings[k][n] == nil then
							allSettings[k][n] = m.d
						end
						local setting = vgui.Create("DPanel", shell)
						setting:SetTall(50)
						setting:Dock(TOP)
						setting.Paint = function(self, w, h)
							draw_simpletext(PerfectCasino.Translation.Config[k] and PerfectCasino.Translation.Config[k][n] or string.upper(n), "pCasino.SubTitle.Static", 10, 0, k == "chance" and colorCache[n] or textWhite, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
							surface_setdrawcolor(lineBreak)
							surface_drawrect(5, h-2, w-10, 2)
						end
	
						if m.t == "bool" then
							local toggle = vgui.Create("pCasinoSwitch", setting)
							toggle:SetPos(10, setting:GetTall()-toggle:GetTall()-5)
							toggle:SetWide(40)
							toggle:SetToggle(allSettings[k][n])
							toggle.DoClick = function()
								toggle:Toggle()
								allSettings[k][n] = toggle:GetToggle()
							end
						else
							local entry = vgui.Create("pCasinoEntry", setting)
							entry:Dock(BOTTOM)
							entry:DockMargin(10, 0, 10, 5)
							entry.OnChange = function()
								allSettings[k][n] = entry:GetValue() == "" and m.d or entry:GetValue()
							end
							entry:SetDisplayText(m.d)
							entry:SetText((not (allSettings[k][n] == m.d)) and allSettings[k][n] or "")
							if m.t == "num" then
								entry:SetNumeric(true)
							end
						end
					end
				end)
			end
		end

		navBar:AddTab(PerfectCasino.Translation.ConfigMenu.SpawnEntity, function(shell)
			local defaults = PerfectCasino.Core.GetEntityConfigOptions(class)
			for k, v in pairs(allSettings) do
				if table.IsEmpty(v) then
					for n, m in pairs(defaults[k]) do
						v[n] = m.d or m
					end
				end
			end

			PerfectCasino.UI.CurrentSettings.Entity = class
			PerfectCasino.UI.CurrentSettings.Settings = allSettings

			PerfectCasino.UI.ConfigMenu:Hide()
		end)

		-- Allow them to reset the options. Essentially hard reloads the menu
		navBar:AddTab(PerfectCasino.Translation.ConfigMenu.ResetButton, function(shell)
			PerfectCasino.UI.ConfigMenu:Close()
			PerfectCasino.UI.ConfigMenu = nil
			PerfectCasino.UI.CurrentSettings = {}
			PerfectCasino.UI.Config()
		end)
	end
end
--addons/pcasino/lua/perfectcasino/core/sh_card.lua:
return gluapack()()
--addons/pcasino/lua/perfectcasino/core/cl_core.lua:
return gluapack()()
--lua/autorun/pd2_bulldozer_zeal_player_npc.lua:
return gluapack()()
--lua/autorun/polis_kalkan.lua:
hook.Add("CW_canPenetrate", "polis_kalkan_canPenetrate", function(ent, traceData, direction)
	if (ent:GetModel() == "models/rebs/polis_kalkan/polis_kalkan.mdl") then
		return false -- Suppress bullet penetration
	end
end)

hook.Add("CW_canRicochet", "polis_kalkan_canRicochet", function(ent, traceData, penetrativeRange)
	if (ent:GetModel() == "models/rebs/polis_kalkan/polis_kalkan.mdl") then
		return false -- Suppress bullet ricochet
	end
end)
--addons/undertale/lua/psa_undertale/resources_00.lua:
-- This script is copyright of !cake, STEAM_0:1:19269760, http://steamcommunity.com/profiles/76561197998805249
-- Undertale is copyright of Toby Fox
-- Undertale audio samples are copyright of Toby Fox

PSA.Undertale.Resources.audio_000029e5_int16_44100hz_mono = "]\x00\x00\x01\x00\xd6!\x00\x00\x00\x00\x00\x00\x00\x7f\xe0\x08\x00\xf4\x03/:z\xe5Z\xfcV\xc6\xf2(\x90\xa6\xf4S\x9f\x14\x1f\x0e\xd53{q\x0eu\xdb\x9a6\xe0\x1fh{\x96\xa0\x8b\x82\x05\xd3\x1e^\x82\x89\xd6\x8d\xb8?\xc8\xf1x\xf4/IA;>\x1a\xe8U\x10#\xbb\x0cG~\x08(\xd3v\"\xfc\xe6\xc3c\xf3\xcd%\xc4\x17Q\x81\x98\xbagf\x8e\xcbw!\xc3\xcdsv\x05\xf5\x9bJ%\x7fi\xca\x17u5x\xe9\xb0\xda\xdb\xc0\xbc\xa8\x0ej(:\x91\x1c?R\xa3\xec?93|\x9c*\x8a\x0a,b\xa5\x1c\xceUT\xa6\xac\xd3L\xfe)\x1c\xcd\xe3lx\x9f\x9eF\xe4'z'\x92vY\x86\x89\xa9\x8f\x80\xb0\xfc\xbc\x95H\xee\xc5\xa3\xf9\xf12\x0b\x13J\x0bE\x9f\xe7'\xd6j\x8e\x95\x18e\x86\x84O\xd9L5\x19@\xfb\xb1{\xe4\xa6W\xb8\x8e_\xba\"\x8f\xdcr#]\x8ef\xd3\x1a\xac\xf6\xc7\x85\xfa\xc2\x7f\xc4\xa1Lr\xd6|)'\x97s\x08\xdd\x0b\x0a\x99\xd30\x85\xb8\xcb;{\x87\xdc\xf5\x0a\xabn:\xabH\x80&E\xf0\x8b!\xba\x9c\x1a\x00<\x05\xbf\xd4\xd0pC\xdf\x1f\xc1(>D\xf6\x1f\x14\xc8m\x9b\xd6\x87\x00am\xf2\x8as\xf0\xadKX=3\x82\x1em\x9c\xc0\x0c\x08lI\xb7V;2\xa0{\x84\xf4\x966\xe9\x1f\xfeTW1\xda\xce\xac\xf0\xab\x88\x09\x03`\xcd\x91\xf5\xe0B\xcc\x8fa{P/u\xdfk\x89M>\x89^\xc3\xe4\xef\xb5\xcd&bF\xaf8y\x838\x05\xb7\x8c\x10 _c\xb9\x0b\x9a \xe9\xfd\x1a\xfeL\xb9bvCi\xbc\xfa~\xc3i\x12\xc2\xaf'\xf8\xec\x89\x98j\x10\x15\x1e\x10\x15I\x0d\xff\xc4\xa8\xb3\xd9f\xa8\xd3o\xee\x1a\xabq\xe9\xc2\xc0\xa9\x18w\xc7\xfc\xc7\x04\xbe6)\xa7\xf3\xd1[\xfaYZ\xe7\xe8\xcad\xd9\xc1`\x9b#\x0fkE!\xaf@P/P\xaa\x03Q\x9c\x02<\xc1;D\xd0\x1b\xa2\xe2\xd4 s[~h\xe1*\xa2T\x14\xaf\xde\x19V\xa4\x99\x9e\x88\xbf\x92\x09Mw\x96\xcc*ts\xa4v\x89\xe0M\x04\xc5\xe9\x16\xbc\x10\xb8E\x82\xc2\xa4\x878\xf7\xcb\x94\xe7\x05\xcc\xf8\xd3\x9b\x81\x91\xb1\x9d\xc0\x7fS\x1f(\xee\x0b\x0a\x05\xc0j\x89=\"L\xc4Gvw\xce4\x81'\xc0\x1b\x91\xf5\xac\x05Uc8sy\xa5\xbd\xfcg\xa7\xea0mY\x06\xe9\xfe\xd4\x9bF\xb1P\x99\xcfz\xc8o\xaaY\x1c\xa9y\xa0\x19(\x0e@\xf4\xf9\xe2\x83g\xa5)K\x80\xc3\xe1=Sb\xbd@\xf2\x12\xd5\x9f\x0e \xd8Ks\xca $n\xd8q\x92\xae\x1f\xb7I\x08I\xa7\xb81\xf3w<\xb6\xba\xf4S\x0b\x0c/\xae?5\x9bx\xfb\xb6\xf0\x1d\xd0\x9a\x8cX\x842\xac\xab\xbc^|)\x15\xbc\xaf\x92\xf3\x80\xc1\x89\xb7\x80\xad\xa1<n\xdc\xac\xee\xc1\xd3\x0b% \xb9\x06\xbf\xb4\xc4+\xa5N\xe6\xac\x19\xc8\xdc`\xa6\x18\x9f\x01\x84\xb1!dw\xdc\xb0\xd1p\xf8\x95\x0d\x0b\xbdZ5`\xd0\xfb\x0f\xb2\x1cF\x18Y\xf5\xc0\xc9\xe7\xa0d\x98\xe4\xb8\x8dW\x8e\x13\xd0\xed\xa6\xb3c\xe8\xc0\x90\xdc3p\x150\xa0\xe7h\xb9\x8a\xcd\xb3-\xb4X\xff\x1c\xbe\xbd-\x94\xf0\x92\xdb\xd4\x84;_{\xabn!\x91\x1f$t.\xefL&%\x14\xec\x94\xb3\x0f\xb2j]pT#{c\xd74\xf2d\x93\xf7\xe5\xfc>\xd4W\xb3\xbe\xc6\xbdq\xad\xdc\xea\xc3\xb9\xb5\xc0\xef\xbc\xa1\xca\x88@\xfb\xf5\xfa\x9a\x8f\xd1`\x0a\x05{\x1aX\xa7\x8bP\xa8\xcdM\xf8\xe5\xe5\x9d\xf7\x185\x89\x1d\"\x07#\xa1\x028\x03\x90i*\xc6\xbbc$2\x02\x08\xd1]\x99=FL\x9bb8<W\xb3<8\xd3px'^{\xaf\x96\x0a\x1d\xeb\x16\xcc\x18\x12\xa1\x05\xba\xf2\x7fH\x1b\x19B\x94\xa1g\x16\xac\xdc\x0bbu\xaf,\xa5\x9f\x95\"\x9f\x93\xa0y\xa1\xef\x8dD\x12o\xda\x9aY\x89\x87\x8dR\x17=j\x1f\x86\x9e\x0b\x89\x07\xf5\xb5\x88d\x94;[\xf7\x08CL\x0e+7\x92D)\xdc\x8e\xb5\xe1@h\xe5\xdc\xb6\xa4]y.\x1a8\x84>\xe0\xb3`pK2\xf6AIe\x13\xda\xb2\xaf]D\"\xab\x97v\xec\xb3\x00\xbc\xc4\x01\xfayb\xa9\xc8\x1a\x1a\xe2\xbb\xf4J\xbc\xbe\x98\xf5lD\xe5j$\x01\x8d\xf9\x83\xf3I2\xb4\x068\xe7a/I\xb2\xf8f\x03r\xc2\xcf$\x9dy\xc0\xb6x\xcc\xe8\x8a\x9f\x05\x0c\xad\xfb\xde\xdes\xc7=q\xde\x05b@y\xcbD1x\xef-\x99Sv\xf6\xaa|c.\x83\xbam5m\x1c\xc6S\xd9w\xe8\xfb\xaf\x07O\xd2k\xec\xf0\xbfe\xef\xbdlG}\x85\x00\xe5RP\x0a\x162\x98\x15/\xbb\xec\x85l\xbf\x94\xc0\xd2\x12\xba\xe2[\x8c\xc4\x9ajm\x1e\x98\xd2\xaa7\xdb\x05,-`\x94\xa2\xd7%\x81\x86\xd8NX\x96!nCF\x85Y\xef\x10\x009\x83\x12\xc8Y\xbdn\xc0\x8d\xbf\xb1bS\xe2\xb8\x03\x86K\xb1\x18\x903\xdb'J\x8b\xca\x0cv3r\xb8\xa3\x90Q\xc1\xedO\xb9\xcc\x97\xcb\x1a\xd8\x1c\x0a\xe3\x9a\x82\xdd\x8c\xa5a\xe2#\x80\xb5\x9bV\xf5\x94\x92C\x13\xfb\xca\xee[;\xfar/\x12X{\xe2\xd8<\xac.\xe2v\x1b\xfa\x9b\x92\x9a\xb2\xe7\x91\xfdmS\xda\x06\x8aB\xca\xda2\xbf\"\xdd\x84\x0b\x18\x01\xc2c\xd1\xabb\x8d\xdcu\xa1\xa8\x0f|J\x92\x96RU\x8aD\xb5Zq\xbf\xe6\xed\xddl\xbf\x98\x9ekm\xf3\x0d\x11l\xf1\xb8)D\xc8t\x9c\xbcw&\xff\x94\x1f\xc6\xb8\x9c\xe1\xc6G*\\]\xa0V\xae\xf9\xa4\x9b9\x8e\xbb48\xd9\xec\x04tvy\xd1Z3<\xe6\xa0O\x97\xb4\xb0V\xb2c\xdc\xb5M\xe4\x1e3\xe0o[to\x03\x01B\xa5fs\xf6_J[\xecj\xcbDha\xb7\x9f\xc2\xbd\"\x8d\xb2\xacwAW\xd0S\xf6\xfc\x8c8Q\x88\x94wz\xd5? \xe3O\xac\xb0\xe5\xba\x0f\xf4\xf8,p\x15\x83Gdd\xc6*\x1bpZ\xdf\xad\xe4\x89m\xcb\x1b\x86\xc6\x14r\xdc@fR\xae\xb2>\xb0\x9e\xd8]2\x06f\xd8]\x0c\xe4t$\x8dm\xfe_\x1c.\xa3u\xc9\x90\"V\x81e\xe6|/\x14\x90n\x06\x8a@Z\x9dR\\\xe1\x9d'\x10\xc0\xb4\xd3\"\xf0\x95\xd7eS\xbd\x83\xfa8\x90\xdd\x91\xe5\x09\x09\xedO\x9b&<\xcc\x03\xa9\xd3\x946\x1a\xb20\xb3\x8d\xa03-\x1e\xbc\x8d\xec\x84\x83\x01\x97k\x83KGo\x0e5\xd5G\xa5)\x95\xda3cl\xa2Zb\xb8+\xce\xd7\x0e\xf8&\x90\x8c\xa6_+\xa0\xa1\xc33\xb4\xa5\x1az<\xda\x85<\xca]\x88X\x1f\x1c\x10\x85\xc3W0\xfbtf\xda\xa1YZmy\xe4!\x15\x00\x9dN\x1a\xf4\x85\xa6\x94@Iy\x97\xa2\xf7\x94\x91\x08\xa3m\xd1\xc0q\x1a\xf6\xf69\xd3\xee\x98\xae\xe1\xb0\xcb\xdcHKw\xdd\xfbv\xcc^\xe4\xcbQ\xbc\xa5K\xc0S\xd0\x19\x02s\x00\x943\xce3\xfd\xd5N\xfc;\xa5&N\xab\xc1\xaa\xc9\xc5x\xb5\xc8\xd7\xb7\xbc\xa5?X\x0b\xc6\x15\x92\x9a=\xe6\xb1\x1c\x99z\xb1\x09\x16\xb36X\x18H,\xa7\xa8\x05\xc9=A\x06\xd7\xc9g\x8f\xca\x09\xee\xf1\x0fo\xe4J\xb4U\xa4\xfc\xd5\xc1A%1\x841\xcay')\x7f:D\x0a\x93\x95\xc9\x9a\x9eG\x1d\x9f\x1d\x11 \x85\x0bq\x07\xd86\xd8\x08\xf1\x96\x07\x1c\"w9\xc6\xa6.^Y>\xc4\x98\xb2\x94\x06\x0e\xd83\xe2\x7f\x9d\xba\xc6T\x1f\xa5\xff\x82\xe1\x99H\x93\xe0\xf8\x0a\x8a\xe7\xe6\x9c\xd1\x85\xf8\xe4\xdb\x17~)\xc7;T\xfcL;\x85\xcd\xc7V\x99\xdd\xb3@/*f\xc95\x9bk\x86\xe9&\xb0{\xd3?\xa2.\xb9\xd4\xc7p\x0a\x9e\xf7p\x91&\x01\xb6\xc5\x19\xdcS\xcf\x03_\xb86G';\x90\xd5\xea\xfa`Pk\x04\xaa\x8e\xe3Do\x00\xa56yC\x01\xa5\xc4\x8fH\xe9!rD\xd6z|\xd2$\x84\xb8\x11Zffpn\xa3\x91+\xc2$\xdf\x7f_#DF\xcb\xf7\x9d\x09F\x09\xbc\xa6`)=\x15\xf4S9\x90\xf1\x0f\xd4\xdb0\xe9\x99\x9b\xde]\x14\xccV\xca\x7f8\xe1\xb7d8\xc8\x0ef\x9ak\x97\x83\x03\x17\xf7i\xf6\xa9\xe3\xae\x9d\xc8\x9c\x80\xbd\xdd\xd3*\xb7\xc2f\xa4\x1a\xe8I\xfa\x19Rv\xa6-{\x10\x0a\xf9o\x99\xb0wse\x873\xf6\xb0;\xb3V5^\xc8\x93\x7f\xf4KI\x01\xba\x15\xe8\x1e\xed\x86S\x175dNL\xda\xe4p\xc4r\xb3\xbfD\x9d\xcc\xe3\x8f<v\xf0\xfb)g\x10\x9fJ\xe8h\xbf\xe9^\xed\xcd\xa8\x99\xc8\xe7\xc1\xe5i+0^\xaa\xd1\xdc\xe7\xb8\x10\xcd\x7f\xb2\x1e\xf1\x0f}\x80\xc4\xa49\xf2#/\x9f|\x97u\x9f\xf7\xd1\xb9\xdc\x9e#\x81#3\xf5D\x1f\x16Fo\xb7\x07\xee4\x03*\x05\xdb\xaf\xf0\xcd\xec\x8d\x95\xa2I3\xa3\xc9\x9f\x953l#,\xe6\x882i\xbdp\x93P<h\xa7\x99\x91\xcf\x9b\xebb6\x0a\x0e\xf9?F\xff\xcb.\x0d~\xaa\x89\xd3\xbd7\"W\xbb\x90\xdb\xd77\x93\xb0\xe2\xa5i\xda\xde\xe5\x85U\xe8\x01\xd0sqq]\x02c{\xa4\xb8\x96\xbb\xf9\x9dr\xf3\xb3\x0b\xab\x02\xb2a\xeb\xdd\xba{\x15\\\xc94\xf0\x02\xa0\xa8Y\x14R!\x1d\xd28$\xcfg\x00g\xc4\xb6\x87\x9c.\x0b\xba\x9d\xdc\x0e\x81P\x10\xf8\xcd\xde_\xef\x96\xce\x18V\xcf\x9cy\xf8\x860K\x9c\xc1\xee\xd6\x98\x16\x12\x03\x1c\xeb\xd5\xf7\x11t\x84\xcc5\xf5\x96\x07\xef\x91\x0b\xbb!\x95G\xddT\xca\xe2K\x03^\xf0\x9b\xa6G\\\x00i\xc0\x18\x95%\x8f\xa2<<\xc0\xa8\xcaR\x9e\x02\x17h\xf18'\xb9i\xfb\xda\x00\xc2\xab*\xc8\x97X\xf3\xbe\x02\x92\xce\x883\x85\xda\x8c\x82\xa8\xc2\xbfk\xb1mJ\xff\xb4\xc6\xa4\x0f\x0enGa\xf2\x12\x87\xab\xf9\x89\x8e&?\x84hg.\xfcA\xf1Ic\xdd\xafl\xdb\xc1*T\xd2\x9f\xb5\xbdO\xed\xf5\xa3\xb0\xf3M\xf2\x93Y\xc1{_{|\x9e\x03\x13\x85\x8c\xba?\xfc\xbb\x8bt\xa1{\x98J\xd1\x0e3\xb7\x8d9\xca\xf4kd:\xef\x00\x0b)\x1d\xd4\x15\x0e\xb5\xf6@\xb72CY\x8d`v7\xc5[Q(\xf1X\xbd\xe8.K\xde\xac\xd4Z'\xee\xcbHg\x81!\xa3\x15\xe8\x94U:*\xce\xcb\xac+V9\xc3\xed\x91\xcc\x06\xef\xd0`\x834\x10Q\xde?;\xc8\xd5\xaf\xb5/\x0be2@<?\x11yW\xec\x1f\xdd\x0c\x1d\xb9\xdf_\x1d\xaf\xd4\x1a\xf3s\xb4\x88\xf8,m\x95\x9f\xd1\xcd'\x00\xcf\x8a3\xc3\xd2\xbf\x82\x0c\xb9\x17\x1a3\x0f\x17u\xb7\xe8lN2lu>\x11\xb5\x8e\xe7\xac\x1d\xa0U\xdc\xda\xc5W\xd7\xf6\xf8sbk/p\xdf'\xc1\xcel?\x9a\xe5S\x0d\x02KE\xab\xe8\x0f\xb5\xae_\xbd\xeb\xfec\xdf\x07\x03\x11\xcdq\x0c\x18\xd3'0\xbe\xae\xcb\xc4\xca\xfa\xa3\x82\x17\xa1N4\xfdO\xd7\xd3\x16\xa4\xe0\x04\x8cU\xa5p9\xcd\xfdO\xcab\x14\xce\x86\x80q\xc8h\xd5\x1b\xd1{\xa9:D'L]\xc3f\xf6L\x10\x13\xdd\xd3\x80Z\x1e\xe0\x18\x9a\x82\xd7\x07\xf1\xfb\xcc\x83\x85\x12\xfa\xb3\x93\xac\xb7*\x0dRz\"_\x9c\x7f\xf7\x93\x844\xec\xfd\xe8&\x80K\xe4yD\x1d#\x83\x9f\xfcdo>\xd7\xa3\xaaf\x0d\x91\xdb`&$\x85\x9c\x1d\xbf\x15\xb9\x04\xc4D\xeb\xf8m\xcc)\xf3\x99\xdf\x0e\x1c@/T\x8f\xa3\x8a\x0d?l\x11\xe5\xf0\x93R\xf2*\x1b\xfb\xf6\xba\x91\xd9\x08\xe0\xd4uz\x8e&aU\xb7\xa7l\x93I4\xf6b\xe1\xd3\xdfl\x8d\xb8\x04\x16\x16i\x829\xa0{1\xdc\x83\x9bl\x85\x82(\xe7\x05\xd9\xb8\xc7\xb9r&\x9f\xec\xfb\x11e\x04r\x94\xcb\xffJ\x08\xe8\xcfh3\xf7\xa6\xec\xd5\xebw\xb9V\x93\x02\xa1\x8e\xdag\xda\x88.\x93\xfa\x0a\x01n\xb3\xe5\x0f\x1d\xef\x0c\x87\x9ebA\x85\x1ej`U\x1alq\x85,\x07OYA\x1e\xe5&\x17\xc2_\xfc\xd1#\x82\xef\xb5\xea\x990\xb3\xe2.\xa4\xa3\xcds\xf5\x0d\x10\x1fOI%\xc4{\xa8mC\x82\\\xd3\xf9$b\xca\x8e\xbb\xc5\xa8\xd2\xfa\x96m\xdd\xb5\xafyd\x93dAjB\xedU\xd6\x15C\x91^\x19\xfc\xe1\x9e\x9e\x0c\xd9[yc+5\xee\xcaU$d\x9eb\xa0\\'\x93\x0e\xf8\x86\xb1+<n \x8d*\x8ab\xaa\x9c\x06\x7f-\xde\xdb\xde?\xed\xf6\xbb\x7f^n\xa2~!\xc4e|\xc9\x0b\xe0\xb4\x19\xea)\x1f[\xcae\xe6G;\xa0\x1b\x90\x0f\x96j\x81\xc8Q\xa1\xf7\xe3\xa8\xe4Z\xe27W\x0bS\x13w\xcbd\xfc\x0aH\xda\xad\xacST\xda\x87\xfb\xa1\x98\x08O\xbf\x02\xfeq\xb5\xaa#\xa5W+\x89#X\x13\xcd\xbf\x05\xd2\x10\xedj\x15]=)\x00\x81\xebf[\x16\xc2\xa3\xe8\x928\xf7:\xa6\xa8\x15KA,\x1b\x07\xd7m\xf2\xee\xc0\xfeko\xde\xae-\xc2\xdaw\xc3y\xf1\x852\xc7J-&\xa4\xf2\x81.\"P\x9b\xef\xd5\xf1\xc7h\xa2a\xc5\x1c\"\x00\x19\x0bM\x06\x1c9II\x9c\xdb\xe4L\xe3\xa41\\\x12B\x8ck\xfa\x8f\x02\xe1_\xc6\xa0)\xeb>Q\xee\xbaA\xf1\x04[H\xb1\xeby\x14\xa9\xa17\xa8M<\xf3\x86\x8bn[\xc3\x92\xc4\x88\xdc/\xe1u$\xcb\xcf\xf9\xb5\xfb$\x9fB\x98\x87`\xd9\x06\xa8\x88\xcd\xc1\xc4?\xf3#\xa8\x8c\x8f\xe7\x07\xd9\x908N\xf4\xdf\x09\x0b\xd1\x12\xee\x88s\x05\xb36\xcfVS%\xfa-\xf7(\xfd\xeb\xff)\xf2\xa2t0\xe8\xf4\xd7\xbf4\xb9%ym\xe8\xbf)\xd4\xd8\xd2\xabW\x9b\xd3\x8f\x8e\x1f\x8a\x81\x03N\x08\xe5>\xff\x8e\"\x06\xb1n\x11\x89\xea\xed\xc2\xe2\x10\xd4\xf2iX\x1d\xd2+\x8a\x15\x7f\xa6.e\x92[\xafd\x95Y>as\x98{\xbb\x89\x01\x0d\x08L\xf2\x1fL\xd4\x9a.\x1b\xd4\xf1?\xd0y\x86\xab\x13\xe8\xd0 \xde\x1e\x038Fm!C\xd3y\xb7\x96&{\xbb\x83\xe0|kl\xca\x8f\xfdJg\xc4`\x03j\x89v\xca\x94\x15\x181\x84\x12\xc1\xb4\xa1\x1d\xcb3\x8b|Pk\xb4\x85\x04\x88OT*@\xfc*i\xa0Qr\xa9\xab/u\x03\xdf6\xab.\xb5D\x97\x04\x8d\xbcas\xa7\x9d\xea\xd0{+\xdf\xac\xe0\xca\xef\x9e\xe7\x7f\x82;\xee\xee\xf5\x117j\x9e\x16\\\xd0\xf8\x82\xcelw\xf1O8\xbc\xb5\x7f \x14.#=\x99o\x1d\x08|\xdcT^fK\x06[\xea\x93t \xad7:\xf7}_\x18\xc7\xf3\xfc\x166H\x07\x925\x93~\x80\x8d\xc2\x80\xbfcy\x18TS\xee\xb9\xb1\x82\x0e\xcd\xb9\xdb\xaf\xfe\x98\xfc/L^\xa3\xa5\xea\xa9\xaf\x8f{k\x94Tk\x069\xd4\x9c\x83\"r\xc1\xcd\x9e\x0c\xb3f{\x9d\x03\x8b\xf4\x12JmF\xea\xa0\xf6\x09\x93? \xa7L\x02\xc5o\xd2-\x83f\xd3\xd7\xd0\xba\x98\x8dL\xea\x9e\xd3\xe3\x05\xa8}m\xd3\xb52\xfe\xbf\xae\x04L^?\xb7\x8eI\x1f\xcc\xb9\xd5-H.\x94\xed\xaa\xeb{\xdfl3\x90\xec\xef\xd8\xfe\x04P\xea!L'\xcd\x1b\x9b\xedW\xe5\xa9\xe2$Y\xe9\xe1$z\x08\xbb\x84f\x1a\xeb\x83J\xba+i\xdc\x0a\x98\x0ct\xe5\xd4B\xf6]\xb8j\xab\xa8\xc0\x97\x0b\x06\xb6[D\xab\xdf\x9e:\xda\xccf\x9c{\x16\xf2\x19\xed\x06\x80\xdb?\x9fB\x12NE2\x8e.\x19\xf6\x86\xa9\xda\x8a\xb68\x9e%\xadR$\x98\xe2A\x99\x86\xfc\x8e\x16\xfe\x98\xa6\xa8*\xca\xf4\xd3\xb3z\x83$\x88\xc1~\x18\xbf\xc4\x8f\xb1\xd7E\x91P\x06T\x04\xd3$\x97:e\xf6s\xf8\x19P\x97Y\xaf\xa4JLbG\xf4\x14\xb9)!\xa0\xc7\xa9\xf1`\xffX\x81M9F9\x0b\xfd6\xa6w\xd7L\x10\xb7\x88\xa5\xb7\xd8h\x05\x11\x0f`S\xe9c\xe6\xea\xa2dPZMA\x8a3\x11Q\x8f\x80E/t\x0e?x\xfe\x01\x8c2\x19s\xcd*\x80uW\xc6OJ\xf0*\x03\xa8R\xa9\xe2;.|\xb3\xd7\xb6\x18\xaf<\x0f>\xed$\x9a\xc4\x0d \xdc\xa8S\xfc\x87\x91+o1\x0c\x7f\x03\xdf\xd8\x09\xae\x99\x8f\xaa\x9b]gl\x13\x81\x8fNM\x14\xb2\x00\xdfK\x17\xf2|~.p\xb9l\xdc{.\xff\xe5\xb9~8c\xfc\xb1\xd7\x80\x01}\xd6\x9b\xf7\xbdte=S]\x0c\xa1\xf9\xe0\xc7\xaf\xfc\xe1z\x03\x9b\x0f(\xea/'\\V\x87J\x8d\xf9\x04#\xda\xd1t\xd878\x07\xd1E\xccs!~\xfa\xab\xcf\xad\x87\xce$\xcd\xc0\xc2\x0d\xcf\x15U\x11\x96\"\xaf\x0f\xfe\x84bZ\xdeqk\xdb\x8f\x9fF^\xe7\xed\xe5\xc5\xdd\xe1\x1c\xfei\xed1c\xafe)\xe1\x0c@\xe0W\xbd\xea\x07&\x12\x81\xd9\x1a\x93\xf2\xf3$b\xe3FO\xf00\xaft\x10\xae\xf8EH\x85\x95]\x1ah1\xc2Y]$o\xa2\xbb}\x16\xef\xc3\x94BR\xab+\xcd8`\x87.\xe5\xe0XG$\xa7\x00\x14'D\xf63\xa9\x17\xa6\x9d\x0a\xce\xea\xeb\xb7:m\x80\x9cU|\x92!?\xa7\x8f \xfd\xc3U\xea&)4\xd5\xa3\xc0d<\x09\x1d`=\xa5\x96\xb5X\xf4\x1e\xa9\xa0C>CH\xd4\xdc\x1d;\xb9\x18k\xcb\xae\xd2\xe8?\xefb*\xb9y\x9f\x10:\x14nPG\x962\xfb\xaa\xd6H\xce\x0c\x85\x8c3\xbax\xcbBX\x1e:\x07F\xec\x96b\xe2\xbd!9f\x0f\xb1\xdf\x0a\xb2i'j#\xc1\x98\xfc\xe8lXw\x03\xf0\x14\xfd\xc8a\\B:\x08|\xa6\xaaY\xf3\x0f0\x99\xe5\x9bi\xfeO\xda\xae\x9b\x82\"J\xc9dy\xf9PZ\"~s\x94[\x8c\"<_\x1e\xa2dV\xcf\xbf\xa7\xb9\xc7\x84\xb8\x81\x8fT\xd1\x13]_\xd8\xfaCu\x9a\xad\xfd\xe6\x92\xe5\x90\x0f\x1b\x8f\x1e\x10\xfan\x0d\x91\x9e\xe3\xaeG\x7f\x0d^\x0f?-8\xca\xa56\xe4\xc8\xd0\xfd\xe1~\xd2\xf4\x13\x95V\xf4]\x9f\xe6R\xb5\x81\x85i\x19\xd6\xbf`\x9b\xab!\x18\xb4\x9a\xd3z\xee\xd4\xa2\xe6\xe4\xf1\xfd\x96\x8cE\xcbC\xed\xcb\xe3L\xad\xbc\xde$\xf5v\x8d\x0e\xc5fW\xed\xcf\xa9\xe4j\xc6\x8a9\xb7\xa3\x0e\xe4p\x00+\x1c\xa1}l\xe4\xd6\x05\xdb*\xd9\xbd\x12\x0c6\xc7\x0eA1`\xbe\xd4l\xee\x12\x0e\xb29$\xc8v\x1c\xee;\xd4\xe0;\xe2\xaa\xce\xf4&$\x91\xb4N\xb4\x02P\xdbG\xd9$\xcf\x84\xbd{\xd6\xbc\xd2\x7f\x0a\xb5\x05\x916\xc6\x16\xf4\x07\x9f6D\x10`:\xec\xf0u@b@\xda\xf3\xe1\xb5\xc9PZ\xf4\xcb v:?l\xb2\xe4\x0d\xf6\xf5FK\xf7\x16\x84\xaa\xaba\xe42\xdc\xdf_\x99\xbe\x1e\x0cO\xcdx|g\x02a\xc8HW\xf2\xa1F\xa2\xec}gW\x1d\xff\xe0|\x99b'}7r4B]2OV\x07\x9a\xa3\x88\x08\xa0\x0c\xd61\"\xe8N+\x80\x1f\xf6 \xe1\xb9=\xa4\"t\xc6Y\xfd\xf1A\x85\xb3\x8a\xd79%\xa9\xc9\x0bs\xee\x1e\xa5\xc5y*RW[%\xda\xa1\xed\xae\xcb[\x1b\xf81U\xef<\x85\x9a\xcbvc]\xe4[nXBXC>\x89\x18X@\xaa\x8c\xc4\xc5>\xd5\x12\x8f)n\xc6\x9e\x98\x0d\x1fTK\xac0y\xf7U\x1c\xf2\x07\x0b\xb4\x97J\x12\xbd\xcb\xb2\x1fx\xb1\x95\xc68\x1e\xe0\x17\xbd\xf4\xdbM\xb4\x80;\x85\xb2\x1d\x14\xa0\x14\xdb4\xa2<R\xf2\xe2\xbb_\"\xdc\x11\xb6\xdf{\x07\xe0\xe3*\x88\xe9k\xae\\\xd0P:g\x92\xe1yo\x0b\x90\xee\x85\xfb\xbe\xc5\x8b0\xdb\x1d\xc3s\xd6\xc2-\xdbH\xfd\xfev\x9f\x97<\xa0\\\x8ae\x97\x8c\xf4\xd7\x8a\xef\xd1\xee7=l\xb8\x09\x94he\x15\xec5\x1c\xcfP\x0fl\x0c4]>\xf0\xbf\x03\x8f\xf3\xb4\x9d;4-\xffa\x16\x80,\xe6\xc2t\x1d:\x00\xacI\x0a\xf7F\x01\xaev\xc7\xb4\xa4\x18<\x98f\xc6\x0c\x1a\xf8fb\x03Z\x8b\xec\xc8`+Q\x1die\xf7\xbf\xc2\xad\xe4\xba\xac\x14\x95U%&\xfdY<\x89\xaf\xe0\x1fI\x8f\xf9;\xbbYi\x9bz\x93\xe8)\xf0\xdf\xb7\x09A9\x19a\xe4\xf3Z\xc0S<\xc7\x16^\xc3t\xfd\xfc\xdatI\x90aj\xa5\x09\xe2/\xd4M\xee\xa9I\xd8xYv\xe19\x0d\x13\xb7Kvq\xe5(L\x1fu\xf2\x0c\xc8\xf6\xc0\xb3\x0ag\x1a\x9a\x16\x1eW]\xfc c\x1c\xeez|l2.\xe0\xd7\x98\xba\x9ef\x01yk\x06-\x7f\xc9\xa1\xe2\x92\xbeK\xc0\x9a\x1b\x14\xe4a\xc6\xdcU.0\x94\xea\xf2\xdd\xa3\x96\x02\xa5\x18\x97\x1d\xd2\xd1\xbb\xff\x12L9\x09\x11\xc9\xfc\x81!\x93\xe2\x94Ed\x1f\xcc\xaf\x0d\\lHt\x9e\xa8\xe7\xbe/\x84l\x82\xab\xd8\xad\xb5\x1e\x9c\x91#@\x8ac\xb7F*w\xff@?\xf9#Znz\xa5\xd5Df\x14@C\x84\xf0K%\xb5{\xd6\xac\xa7\x99\xaeO\x18\xfa\x8f+q\xa9\xd9Px\xc4K\x13\x85.\x02%\xa8\xe2)\x90(\xfd\xe3\x01\x0c\x8bh-QJ+\x05l!Wh%#\xdc`\xa6\xc3#p\x96\x82|L\x8e\x81\x15M*\x88\xc4\xb8\xcc[rw\x8b\xd7\x89\x12\x0e;5x?\xecV\xfe\xcb\x8c\xe9\xd6Wu\xcd\x10\x93\x9a#\xfa\xca\x11i8\xd2\xe4\x90Ie\x89eUc\xdc\x16\x17t\xb9\xc6&v\x01\x82R\xc4\xed\xc9)\xcc\xd618TZ\xa1\xb0\x16N\x0a\x05/\x03\x13D\xbe\xd5\xca\x8a\x85\xae\xdb.u\x9a\xe2Q\xb5\xc5+\xd3\x9b?!\x8a0&\xba[\x07\x88\xfd\xb2N\x1c\x9c\xc0&\xe8\"+\\\xf7\xe7\x95\x19,\xb3\xa6p\x16\x06I>\xbcV\xd8\\\xdd\x9e\xe1Q\xc2\x80\xba4\x1bp \xa1\xec\x00S\xdf\x1c\x8f\x81\xea\x90\xc4\x9a\xe9\x01\xd9\x8fm-\x92\xe7\xae\x0d\xc3B\xfd\x0du\xbb\xddB\x1aPO7$\x91R\xb6\xff\xa3J\x18\xc8F\x97\xfc\xb2\xa3\x06\x93]\x1b\x10\x15\x8a\x82\xcf\xd6\x04\x800m\xb9\xc5\x0c\x18<\xbf\x00\xb3\xb2\xf9\x1cj\xe74\xa1x1\xf6?4\xe2n\x9a\x03\xe8\xb3\xd6\xd9\x125\x19v\xdd\xd5\xfe\xb0Z\x07\xd3\x18[S\xb1\xf6\xe0fL\x8a\xe97b\x9c\xfe$\xb0/P\xb9\xb2\xc9\xe0\x17l\xaa\x8fx\xaf\xd4\xc5\xfaP\x90\x0e\x87\xaa\xc4\x9c\xc0?7l\x8a\x86\xfasy\xa8{\xd3yA\x0bpE\x8c\xc3<\xc1\x82J\xfb\xb0C\xcf\xa3?0\xb1\x82ru\x9e\x02\x8e\xc4\x0f\xac\xde\xf8On\xda\xfd\x8b\x17Y\xeb\x12\x04\x81\x02\xbe\x9f\xd5\xb7\xe7a\x8ek\xaa\xfeO\x8e\xb9)DJ\xf4\x8e\xfb2\xca\x89\xb4\x1d\xecz.\xbb7\x12}\xaf!\xc8\x7f\xbb\xe4'\x88\xb2\x8bjb-\xf0\xf3\x11f\x04\xces\x80\xe5\x03`P\x07!\xf9<\xd9\x0c\x91\x7fy\x91\x91d\xb4\xcfy\x9e\xc8EdW\x9a\xc8\xc8\x93\xadL>\xab\xaf\xe1\x85\xb8\x88\x96\xb7\xfc\x1a\xd5\xa0\xf9\xed\xaf\xac\x1b\xfa2s\xd1/\xf7\xd9\xca\xe5\xfdK\x9e\xa0\xfdi\xa5UUU\xac\xe9\x0d;-A\x89Ej\x16\xd3\xa01\xe8}\xfb\x93)\xed\x90\xc5U\xac\xd7P\xb4V\xbb\xcf\xe3\xd89\xfc8\xf2\x90?\x04cpi\x1e(s\x96T\xdd\xe5#\x8eQ\x04\xdd5\xab\xd0\xd4\xb0\xa5@\x1e\xd2J\xdbQ\xfd\xaeR[t\x89\x8d\x01\xfe\xb1\xdc\xe2\xc2\x9e\xe6\xbb\xf8\xc3\xee`U\x7fr\xd8v0\xac\xda\xf4Ca\xc2O\x99\xe7\x12>6\xb7\x1essz\x09\x92KOp1\xd7I\x82\xd3\x11\xb4\xcf\x81\x84\x91+!\xedI\xb4\x19q\xe4\xd64h;\x05{\x06#\x14\x16\xc3\x0f\xe4Q~\x0b\xf3\xf9\x09S\xa7&\xcf\xdf,\xb2cub\xe6\x1a\xa6L}\xa9\xc2E)\x90h\x90x\xe3\x91 \xae\xc2Z\x17C}\xf5-\xcf\x9f4\xff\xa3\x9c\x13\xa1$CL\x02C\xb0\xb7\x1e\x1bk\xe5\xef~U\xcc\x03\x0e\xbe\x98\xb7\x93s$a&\x03Tyb\xfaL\x9f\x9e_\xea\x84\xf4\xe8$\xb6\x9dDZu\xf1z*\xd5SO\x09\xd7\xbc]u:\xf6\x09l\xeb\x8d\x0e\x98f\x94\x91\xa4\xc1W\xbf\xf4jQ\x9a\xe2\x86\xc2\xdc \xd3\x0bflsP-\x11\xc6\x9c\xbak7\x9d^u\xe0\xad\xe0\xbf\xcc\x88\x1e1\xf3~\xaeyR\xf3\x1f\xa5\xde\xba\xb9\xea\xe9\x8a\xebU\x1a\xa3\xb3\xa5(\xab\xc7\xd8\x98\xa6\xfb\x16\x1fQA\xfa\x85\xe6%\xa3\x1fu\xe2\xad\xae\x1bH\x1fA\xd0\xc5\x08$b\xa4\x9b\x81Q`\xd0\xbd-\xd5\x03\x1f\"\xcb\xe2\xea5\xed\xd3\xd8j04)\x84\xf9\xf1\x0b\xb5\xf5\x16K\x0d\x87k\xcd\x83\xcf:\xf0\xe0D\xd3\x8e\x13\xd2\xb5\xcd\xcc\x98\xeb\x16\x91`\xa7\xa0\xd0H{\xdb(\xb5\xf4$`N\xd1\x19/Ur\xc7\xe0\xc1\xb2ml\xb9=\xe4\x92\x92I\x19B,On\x98&B>\x85\x0d\xbb\x1f\x9b\x94\x16\xd1U\x16\xfc\xd3k\xdbB|\xbe'\x80b\xc2\xd7\x87\xa5>kpV\xa2\xf2%9\xf6\xe4\xf3\x0f\x11\xf8\xe7\x94\xce%\xf0\x8acG\x05\xf7\x81n\xb3=z{\xf7\xb1\xf1\x86\xab\xdb\x0b\xb9\xe5&O\xa4\xcf\x8c\xeb\x922\x14(\xcd\xc3\x8d\xb0\xd1Jb-<\xea\\I\xdd\xc7\xafX\x05\xbe\x13\xad\xcc!\x9d\x82\x11\xc4\xe5\x8f\x8f\x8e#/\xd6By\xa3\xb2\x08\xb3:\xaa\x19}w\xda\xa5\xda\xf0!\xf5\xab\xce\x13\xc3\xd3\x90%1\xd7=bd\xb8E\x99U)\x1b\x19*\x07\x0a\x85\x00I\xd1<XexCQB\xb9\x80^Ph\xa8\x19\xd1\xd7\x95C\xb1\x99\xb3lr\xb3\xab\xa7\x1c\xb55\x03h(\xe2}\xc8\xff\xc3a\xe4{\x01F\xb5\x7f\xce\x95\x94\x82\xdc_$2W\x97F\xcd\x90:\xea\xda\xf6-\xf1\xe1\x9a%}\xab\xf0R?\xe9\xcc\xb5'\xaa\xee\xbb\xd3[{\xc6Me#\xf0\xab28y\xdc\x0b\xd3\xd71\xef\xe3\xa0r7\xb7~g\x07\xbc.\x0d\x06B\xaf\xec\xa8@\xc5?\x19$\xac\x82l\xed\xf0[\xa7\xf0\xa4*1\x9d\x08\x9eO\x81+\xe9\xeb(\x13\xe3!r\x1c\xd9\xd6\x09\xfdF7\xda\x9f>\x8a6\x07k\x08\x1f7\xac\x1a@\xfb+z\xfa\xd9%\x8a`\x9e\xd6y8\x0c\x0d\\\xc5u1\xab\x9aa\x98\x9b\xa3\xa0\x01\xf0\xa7\xfa\xd0e\xd9\x086\x9d=\xf8!\x0f\xc6\x0dj\xbd=\xf9\xed@\x1d\x11\xb5\x13\x81\xc2\xa9\xe5'\xb4N\x1d\x93\x9a\x1dx\x08\x14\xca\xdf\xfa\xed\xa9`\xce\x10\x15\xfb\xf3\x8aZ\x17\xcdM\xc4\xf2\xf58\xb9,1\x84\x03\xb9[a\xa2\x8b\x7fA\xac2\x8bI\x15#\xc6K\xae\xbel\xa0B\xc3\xbd\xcc\xabN\xa0\x01-\x9f\xc1sc\x7f\xd8\xa5\xf8,\x81k\xaa\x89b\xc0}\x1f\xc1\xa7\x05\x9f\x9b\xed\xd3\x9f\x98\xb5h\x16c\xc59\x04\xd5\xb0\xdb\xe9\x1d\xc4\x18\xe3\x85\xe9\x0d\xc8n\x04\xa4xb\xbb\x03\x17\x93'\xd3\xff\xc2\x12\xfe2\xd9\xed6\xaf\xef1\xdabaG\x89a\xf2\xf4Sjfj\xbaX\xb1\xa9\x03\x9a \xf9\xcb\xc5z\xdfhI\xcc\xa2|W\xef\xeew\xaa\xa5 |M\xc9\xe0\xce\x9b\x95d7c\xe2\xe2\xc9\x10\xe4>\xaf\xf2\x08q\xf4m\xda\x08\xb9E \xce\xf5\xe8\xf3\x95\xb8-\x05\x1d\xe0\x81V+\xae\xcd\x12\x92$\x19\x9eh\x10,\xad\x9fp\xeb\xd9\xf4G\xb0Z\x06\xad\x11T\\\xdd\xcf\xc11\x8f~\x03\xa0\xd3Z\x88\xd7gv!.\xef\xa5\xfe\x92`\xc2\x91\xb0\"\x06\x80f\x0c_\x00\xf8\\\x15%\x14&\xbdb$g]\xc9\xf5\x8e\xb7\xee\xb8\x90\xd7\xf0\xde\xe7\x8e5\x7f\x1f\xf8\xb8\xd0\x9d\xf7\xd7#\xab\xf1V\xb7\x80n\x8a\xed\xd2\x0e?}3\xdf\x00\xddH\xc5E\xcc\x11\xd7\xa3\x80\xeb\x0f\xab\xbf\xc1y\x1d\xbb\x07\x95\x84\xed\x1a\"\xe3}\xe4\xe8EK0\x1b\x1e%hY\x82\xd7\xac\xe6k\x1a\xd1J\x8f\xc6\x1e\xf5\x1b\x95\xa6\x09,PU\xa4@\xc5\xdc\xf5\x03\x9fR\x94\xa9\xc1cA\x91\xa6\xe1\xa5+\xcd*K\xec\xa5\xbe\xf1\xfa\\.J\xa4\x97\x9a\xdf\xecuN\xb3\x7f\xe5\xb0\x8b\xab\x084J\xff\x9e\xb8\xfd%\xff\x97\xfa\xa3,\x17\xc1\xa8\xf7#\xc9\xaa\x8d\xe0\xca\x16\xd3\xb2\x140RV\x11\x17s\xea\x90\x06\xe4\xd1\xc8V\xd9/\x13\xab![\x09P\x11\xff\xb3\x9d\xe8K\x11\x0e\x83\x11\xd6\x1b\xedbJ\x8c\xb1\xf2\xf0\xf4\xa27\xbd\x94\x05\xfa`\xaf\x1a\xc7\x04l~\xacs\x01E\xdfq\x8a\xeb\x1c~]W\xd6!\xdd\x8d\x1c\xf3\xe7\xff\xea\x11#\x0d)\x8d\xc3\x9de\xcf\xc6\xdd\xac2$)\x18\xce\xfc\xcd\xfb\xf6\xb9\x18 y\x1d\xc9H\xed\x02\x91\xbd\xfc\x88W\xd8\x9e\xbeb\x99\xbe5\xac5R\xe4\x0e\x1b\xf1\x0ec\xfa\xd9\x88\x0a}\xa6\xccBm\x18\xe6\xf9\xef8\xbci\x05\xaa\x1f\xfe\x00T\xe2\xaa\xac\x1b\x9c<l\xc6\xee0\xf0\xb1\x1f\xde\xccm\xeaa\xcdl\xb5\\&\x09uEe\xc5\xac6\x1aO!e\xb0\xf7s*\x8a\xf2\x1b\xb5\x15\xe2\x05\x86\xf9 \x91\x11\x81\xc5\x8eKI\xd5?\x16\xdb\xe5\x9c\xacD\xa9\xf7\xafE`\"\x9eR[\xaa\x10\xe8\x84\x08\xc5\x1f\xf1\xe4\xf2\x00I\xc4\xa9\xc4\xdfE\xeb\x84j\xbc\xb4q\xd7\x86\x1d\xf9*\xf5&6\xe8\xddI\xf8\x8c\xa7\xc66\xc8\xa9\x8d\xc2\x7f\xa4\xe6P^I\xa5gqB\xa2\x80hu\xa45u\xa1\x03A\xc7\x9f\xca\xdb\xb7\xdd\xa8w)\xa9j{@\xd0\xdey<@}~\xb9\x01\xab\x9bFX\xf8\xb8\x92\xf5\xc6M'\xfabI\xb3\xbb\x0c\x87\xca\xbd\xedMGB\xa3\xde\x14\xc251\xfb9p\x8d\x1b\x1b\x1c\x13\xe0\xd4\x03\xc8j9c\xe2\xa0\xbc\x02\xf2\x877A>\"Itf\xfe\x1a\xd4\xf3\xb4\x9b\xb5\x8d[\x86)`\x8f{\x82^\x9f\xfdi\xa7\x7fy^\xb9\x80\xb5\x0f\xc57\xab\xa2ev\x92\xdc\x0d\xdd\x05\x9d\xaf8\x1dh\xc79&\x03\xbe\xeb[\x07\xdeo\xcf\xfe\xdf.\x06\xa6\x15\x1ba4T\xbf\xb2\xf8\x8c\xa6l\x0aQ\x9fB=\xc8\x15V\xb0X\x14#*H\x19\xf9n\xa3\x15\xb0a\xd3\x97\x95\xc5\xfe\xca\x0czy`D\x8fI\xbe^P\\x\x88\x8e\xa6\xb4\x17`\xb2\xcfS\x9d\xd2\x08\x05\xc6\xea\xba\x1f\xf4\xd4\xb5\x0e\x0b>\x02\x1c*\xb9\x891\xf8u\xa5\x89W\xbe\xc4v\xd5\x14\xdd\x1c\x1bJ;\xcc\x0bo\x95\xafk\x894xLF\xa3\xa4\x91td\x88\xeeS\x0dC\x00"
PSA.Undertale.Resources.audio_000029e6_int16_44100hz_mono = "]\x00\x00\x01\x00\xa40\x00\x00\x00\x00\x00\x00\x00\x00c\xe4oh$\x1f\x7f\xa2C>\x03\x90\xd6\x9a-/2\x05q6\xc4\x8d\xb1\xfea\xe1SU\x1a\x7f\xcb5\x8e]\x84\xdcy\x17\xe8I\xd7h\x92\x7f\x09\xb6\xe4\x80\xb9\x01\x9daoN\x90SGp\xcd(F\x97\xacN\xe6bSQ\xb4(\xcf\x03R\xd7 \x09\xd5\xd6\xbe\xa0\x85\x0b&\xcfN\xef\xf9h^}\xc5%h\xe7\x17\xa6\x7f{\xc8\xe8\xd1\xac\xf5\xc2\xb9\xa5\xcf\xeb\x8dpZ\xe6Jc\xe0*\xe0=\xb8\xb2\x0f\xd8\xa9\xd6\x80S\x04\x11\x92\x06\x99\xf7\x03j\xbd\x87I9iDH\xc9\xce\x1e\xbc=\x0eu\xfd\xf1\xc0\x8a\x9a\xb1\x1a\x99\x1a\x1ci\x95\x07\xf57\xc7\x0a\xc8*\x86\xf9\xdb\x87\xfa\x0b\x18@\x1b0\xedBOJ\xb0\xb9\xec=\x9a\x0f\xc3\xcdA\x19\xc00\xf4\xb3\x1c\xf1\xaf8\xab\xe0\x00_-\xfc\x8c\x90!\xb4\xfc\x9brC\xd5\x8d'- c<T\xf71\x8cx\xc1\xc1\x80\xe1\xb5\xf5H\xd9\x9c\xbe\xd01\xb1\xd4\xa6C\x82M\xc2w\xd7\xb8\x82.\x0a\x1cc\x8b\x0c\x9e\x03\x1fmD\x9f9\x12\"\xeb\xb3\xfc\xb9W\x0fc\x0a\xcf[\x15\xc5Gq\xf4\xab\x7fA\x8b\x87\x0f\"v\xcfaR\x09\x00\x9b\xc9\xb43e!\xb8%\xd7e\xd8\xd1[\x1fF\xda\x86?9\x0bF\x95c\xa0\xbd\xbea\xc3\x98\xef\x06\xa0\xfd.\xfc[\x95\x91Ab\xeao\xdb\x12\xe2\x11\xe3\xedW#\xb3\x9c\x1c3\xff\xfd\xe4\xafU.\x071v\x00w\xee\xb5\x19\xd7\xca\xa3\xcb\x89\x89\xf1\x00\x03\x10\xe1\xbe1>]%\xc2&-\xe4\x8apu\x85 S\x17O ?e!\x12A)\xe2x\xa7\xccS\x8dB\x82p\x8f\xc9\x05=L,\xc1\x1e\x85\xfc\xd5\x81\x0e\x09\xb6\x92 y\xac\x91\xdfE\xd0\xc6\x1b\x13\xcf^\x9f\x9c\x13\x0aN\xda\xc8\xdbE\xb3gZ!\x0c\xe0\xe2\x8aP\xa3K\xf2#Z\xb43j\x9ec\x0a\xe7\x05\x94AD\xc2\xd1=\xe8\x04\xd9R\xb8\xac\xb6i\x97\xb1\xf1#\xb2\xb0\x90\xda\x08\x8el\x9f\xeeZ\xaa\xdb4\xd8\x1aj9iO\xf3\xf4\xddh?\x11K3y\xf7\xfb\x81\xa4^\x9bl/ ]\x8b\x08\xdc\xe1\xcfy\xbf\x95=\xa2=f\xf5\xcd \xc6\xe6\x85\xbd5}?<\x0eb\x92\xde\xa3\xb4d\xd0DE[\x11\x1f\x8c\xb6\x89-\x8aQ\xa2 \xa5S\xb5\x0a\xf2\xb8\x19t\x05\x8d\x89\x9c\xa04\xc3\x86\xda\x07\xf2\xca\x1c\xa4\\\xd0JYWK\xb5!_i\xc9\x02W\xa8\x19\xb5/\x8eMV\x07\x17!]\x93[\x08\x1d.\xde;\xa6mBk\xc6\xfdt\xa5V\x81\x0e\xa1\x99\x0c\x1c\xe7\x81\xae\xde\xb2\xc0K\x03\xb6(E#\x14p\xe8\x80V]\x11\x97E\xf30\xaf\xd40&\x93Hu,\x09|\xaf\xc6\xa0\x0d8\xa1\xcej\x1a\xe7\x13%\xf6eu\xbeW+\x8b\x0eo\x15\x17LoB\xe8>\xeb<_\xf7\xc5 \xa8\xc7\x86\x16\x1a\xec\xfa\xfa\x01\x9c*\xdd+\x07\x17\xafa;yq\x80\x80\x8b\x1b#R-\x15;\xd2YB\x07\xd3\xa8=\x84R\x9a\xd4f)M\x08i\xf7\xd7\xeb#\xb4\xf0\xca\xb1G\x7f,46\xc6\xf8\x01\x81\x01\x81\xa6\xe1\xb1\xae\x03\xdf2\x89\xa8x\xffkd\x06\xe2\xc7\x04\xcc\xb8\x94\x9c\xb1\x0b@P\xbc\x11\x98D&\xb4\x84\xd3\xef\xadC\x84/\xed\x9f\x86E\xe9\xe0\xde\xc7b\xf9\x9f\x8bO/\x02\x06\xc2\xcfCT)H\x0b\xdfR\x00\x95\xa2\xdf\xe2b\xb8\xbcV\x19,\x1a'\x8fv\xe4\xf7\xa6eX\xec\xdc\x82\\G\xb4[\x1e\xeb\x85\x05\xc1V\xdb\x86\x88\xbf<R$\x1f\x9f|Ae\xa5\xdef\xfaO\xd7\x9a\xbd\xddfO\xf0\x96O]\xdb\xc9\xfdd;\x10\x94\xc2k\x96\x99\xcau/\xe3#\xe7\x7fN\xf6\xfa\xf7rhH\xefo\xde\x7f_M\xa1\xaa\x9f\xe2<B\x0f\xd83N\xf5\x04\x9c\x9fkgG\x98\xc3Cx\x0c<\x15\xe25x\xdc^:\xedu\x04\x83C\x96\xaf\xcc\x06\x8c\xe0\xbc\xdc\x8dk\x1a\xcb\xe8\xa4\x8a\\\xa7A>Ohc\xff24bkT\xa5\xa6\xe2\x10\x0f\x17\xc7\x1fX\xe5\xb3/\x9a\xb2H\x0eE\xa1V\x8c\xb3Y\x0dJ\x11%k\x02\\o\x92\x9f\xa8\x855\x8e\xb9}\xc9sc2\xb5\x82o\x89\xe2\xb0h\xbb\xf7:\x1av\xd5DA\x1d\x0a\xe7\xd1\xa1\xee\x05<\xa8%\x1c\xbc\xd5)\xc9\x85\x9b}>\xea\x1b^\xf4\x94\xbe\xe1(\xd75\xe2\xe4\x7fC\xf3\x8d\xce(\xe5\xd8\xe0\x18/<\xb7\xbdgs\x93\xd3qRS\xa8;\xc1\x8dw\xa4M\x8f\xe4\xfb\xf5/$\x8e\xd1\xc9D\xa1\xb4\x07\xf2\xa7~\xc1A\xcbs\xb7u\xd2\xa9\x04g\xa5#\xc8\xdf\x9f\xf9\x08\x80\xf1_HI135\x18\xbe\x91\x94\xfb\x86\x80B\xc9\x18\x12\xf6<\x0f.\xdao\x8a\xb5\xc8Ev;\xfd`[\xe6\xf5B\x8bA\x93\xc9M23\xd9\xf7I\x97\x11\xda\xb3\xac2\xeb\xd0N\x17\x1aQ\x96\xae\xee\xd7\x11\x1b\xcf\xc3\xe9\x1e>\xa6Z\xf5\xf9\xacZ\x8c\x83\xaeN\x9d\xa0\x05&\x81\x82\x95A\xf6\xbb\xe1\xa9l\xfcC\x85\x86r\xa7n\xb9\x86\xda\xe0#\xf7j+\x9f7\"~\x94_\xb1\x15\xc6,\xad\xab\x12f\xcf\x11}\xdf\x89\x8c\x7fE&\xcd2\x188\xab\x7f\x80\xa0\x16R;\x89\xfe\xb6e[\xcbV\xe9Or\x0e7\x06\xec\xcd\x8aU\xff\xfc'\x0f\xef\x07\xb2A\x81\x02\xdb\xea\x91\xce\xba\xb8\xbd\xfb3\xbb\x89\x0b\xae\xca\xbezHVK\x92w\xff\xf6v\x14\xca\xcf\xb4\x1a\x8e\x89\xf8\xb3\x92\xb8F\xe3\x1c\xd8\x12\xf6\xe4W\xac\xa1\x87>r\x0a\xcb\x99T\xf3+Us\xbcY92D\x15Xy\xbd&$_\xc3t\xa3BA>\x92\xf9R.\xb7;\xce\xa4\xfcq{\xc1F\xc8\xe2\xcb\xcc'\xf1\xe0\xf7\x1d\xa1\xa6\xa4\x92\xf6c\xdd\xacF\xd9\x1f\x1cE\xc9\"\xc7-\xf60\xf5\x8f\xe4R\x04\xe9\x08S\x03'Vq\xd9\xb3\x80\x15\x1a\xc3\x8d\x1d\xa7\x06\xdd\\I\x88re\xe5\xf1V{\x0c\xe8^db}\xae\x09\xd7\xac>|8o\xcb'\x14\xb8\xc9(a\xc0\x1fe=\x8e\xc7\x0d\xf2\xa7\xd6\xca\x12qV\xf3\xcb\xfb\x96\x8b\xd4T\xf8\x8f\xab\xee\xd3\xc0\x1d\x9f>@o\x84a\x89\xfd\xfb\xc9\x0a[\x9ck\xea\xdew\xc9\xfb`\xfb.\xb5W\xd0;\x7f\xd9\xcd\x1a\x03\xf6D\xcc\xb9\xa4\xc4q@\x82*\xde\xcf\xce\x96\xa6\xa9\x14\x94\xbb\x1c\x8bv\x1bV\x0e>{\x83H\xd26w\x93e\x8d\x0a\x9e!0\xe9\x9eM\xad\xe9\x9d\x19\xb3X<\x09\x00iu\x9c\xb5\xb5{\xe0\x81U\x8bd\xed\x1cY\x9a\x1fdU.*\xcf\xd6|\xc1\xd9\xfc\xaeZ\x0a\x07`\x13m\xb8/\xf1M\xach\xec\x89\xa4\x1e\xe8\xa4\xe1bj$\xbaz\xf8\xb6i\xa8P]\x17\xfc\xbd0\x00\x07\xb5\xcc\xd46\x19\x8a\x99m]\x15\xb0\xe4YT\xdf\x95\xd7\xcd3\xc67|\xd8jF\xaa\xa9\xc7X\x9e\x18\xfe\xb7D\xb9\x88%\xcd{\x0f\x06;\x86\x9bBR\xc4\xa9\xde\xd6\xff\xd9\xef\xc5_a_\xf0d\xf1CJ\xb3\xb6\xd0\x9b(\xd9.\x97\xfc}\xf4J\x15\xdf\x87g\x1e\xf4\xa0\x14)\xccr\xd8\xdc\xe7\xf2\xf1I\x17\xbfI\x08@\xb2=OR\xcb\x1d\x9f&_H\x92A\xc5\x91\xf2H\xb3kJ\x9b=t\xbe\xed\xcd\xd6\x11\x84\xe5\xcb)\x94\xd9T,\x8e6\xf3Xu\xe1\x98{\xdf6\xe2\x07\xc2\xe5\x7fd\xf7-:\xb6\xd8\xf1\x8c\x8a\xd3\xaevkn\xd7T\x0e\x0b\xb2\x88ok@[;M$\x87\xdf\x05qt\x9a\x9e\x1coL\x97B5\xb0\xd5\xfc-\xbb\x99\xc1`\xe8\xde\x84&\xb7+\xa0\\\xa5T\xd0\xc9L\x99\xb7Wb\\\xde\xb8\xa3W\xc2p\x90 \xa2Ew\x00=\xde\x7f\xe8,\x91I\xad\xe2\x1a\xa0\xce\x0eh=\xf5\x8a\xcb\x0dV\xce8pL\x1e\xf5c\xfb\xbb6n\xd7\x9b\xa7\x12\xf3]6\xa0j\xee`EW\xd5-\x1c\xea\x0e\xfc\x07{F\x19s(\xf2}\xa6\x13\xc2\xb0\xf9\x04\xc3\xa4\xce9o\xe8d\xe0O\x16\xfc\x85h\x80\\(\xf5\x80\xcf\x84L\xb9\xfc{~;\xb1h\xcd\x84\xcdOk\x83\xf1\xf4\xea\xf7\x03=\x1eVk\x8c#\x84\x10\x11\xd5\x84X\xa9\\f\xf5\xa4m\xca\x00\x00!\xbd\x88\xb3\xb7*x\xd4\xc9\x01\x8d\x12\xb2\x0c\xbd\xfd\xb5g\xa3P\x1d`\xb67\x9eR\xc3\x17\x06\x0es\xe1\xbfu\xe4E\xed\xcfBv\xe1\x05<\xdbF\xab\xb3%\xf9\xc6W,\x90Z\xb0\xdd.\xfb\xb9\xf7\x1e\xc9\xca\xebp/&\x88\xbd\xb7!\xc3$\x00\xb5\xb7\x11EU[(\x93 \xbd\x1f#\x98\xa3n\xaem5\x18g\xd2\x18\xa1W\xce=\x17ng{\xe3\xb2\xbc\xd4\x14FM\xf7\xee\xcb\x06\xb8/d!\xefj\xaa3\xbe\x9b\xf2Y\xc8\x98\xddP`I\x1b\xda\x97\xf0j\x8b\xe12!a\xd7\xfb\x91\x83[\xa6\x96B\xde\x88#\xbc\xba\x02=\x09&\x1d\xf4\xdeZd 1\x0a\xe0\xff\x10\xc3\xc6\xfa\x94\x0b\x10UMxE\xfc\xfd;?P\xa3\xf82\x8a+eA\xf7b\xa9\xde\xba\x93)J\xfaG\xc5\xbb@B\xa9o8\x0f\x84\x96\xeb\x08_\xc2~\xb9\xc0@}\x1e%\xca\xd0\xa6ve\x96Y\x0a?\x9f\x15\x09\x01c>\xc3#\xd6\x1dCA\xb9Q\xab\x92\xe3\x86t\x1c\x95\x07\xa5\x91\xd4\xdaz`\xbe\xcf\x1b\x89\x17\x1f\xb3\xa4\xf9d\xbc\xf6\x01\xb8\xd7\xa3\xe3\xdc\xdb#\xbf\x13\xd6e\xba:\x16*cq\xc3P\xfb\xb5\x0a\x18\xb2\xcb\x0f0\xbd\xb4\x0bt\x89\x1e\xf2Gv\xcb\xd4\xd8\xac\x06\x03\x90kK\xf9%\x83(\xe3\xd9\x17\xddwgV\xc1=\xd2H\x95\x00L&\xa8H\x10\x8f\x90Q\xdf\xb85\xe8\xbc\xe5\xe7l\x89\x83+\x0b\xa7+,\xe5\xf8%F\x92\x91\xa6\xa7\xe4\x00\xd8\xe7\x8e\xfa\xc0\x88\xa5\x86\x01\xcftz\xb3\xe5\x8b\x9f\x95\xd7\xf0\xb9\x01Y)\x00A\x04A\xc61\x11\xc0\xe6\xbf\x0b\xd4=C\x9a\xb0&\xf5\xb9(\xfe\xeaG\xb6\xea\x1a(u\x0a\x90&\xad\xb7\xd7\x02\x05\x92T\xe3\xd7i\xd3\x13G\xeb\x15\xe7\x9f?\xbe7\xb8\xbeHu-=\xfd\xef\xb7\x99e,\x16C\xf8\xa77\xdeU\xcb\xcd*/\xbd\xd8\xaf\x83\x89Jt\xc9\xdf0\xa5i;\xf6`\xab\x13\xef:'ee\xe6t\x03R\xe4\xc7\x14\xa0\xc3\xed\x9b\xad\xc82\xf9\x0eCyqv\xaei\xab\x86I\x88\x8aJ\xa4f\xc1\x90\xb3~\xd5\x04\x9f\xb3\xc6S\xb1H\xe7\x8eb\xf6\x89\xf3gdb\xb1Fzn\x96\x941P\x06\xfb)\xc0\x1b\x9c\x0d\xe1\xdb%\xb7\xc0\xad\x15m7ye}\xdc\x83$&\xb3r-^\x9d7\xfaR\x97\xcd\x86Pk%\x88\x15=\xa9\xa2\xad\x81\xc2\x86\xcf\x03\xd5H\xb5\xc8\xc7sa\xe2\\\x1a\x83\x17]\x996\xc6\xcf\x04C\x03v\x97\x03T\x00\x89\xff\xc2\xdf\x0b\xc4C\x8d\xeeG\xf8\x9e\x83f\x16N\xd8\xa3\x1d\x83\xde\x80\xf4\x1f\xb0\x8fx\xffS\xb5\xdc\xe2\xc4\x1e\xef\xa7\x08\xe5\xe8\xe2\xe3$U\xe6z\x7f\xb1\x13\xd6\xccg\x9dy\xff\x05s\x93\x9c\xbd\xb0t\xa7/)\xbbv\x98Z\xaa`\xe42\x07\xff\xb8\xba{\x8e\xd1j\xf5\x96\x85\x91\xfe[\x9e\xd09f:5\xc16\x16'r\xf90\x0eo\x06\xd5z\xd8V\xc1\x19\x94{\x8e\x15\xa2\xee(\xe4\xbf06\xbe*\x90\xdc2]\xe4j\x8f\x81\x0e\x81\x9ev5T\x09L\xc8\x96\xc7C\xde\xec\xaf\xa4\xcb\x9b\x81\x86a\xc2\xc8\xb9E?\xea\xcd\x85R\x92VH\xd2\x9e\xe6\x88Qg\xacZ\xc2\xdd\x1c\x8ak>\xba?\x03\xa3\xd3 \xc2,\xd1\xce\xa1\xb1l\x06I\x92\xea\xb5\xae`\xf6j\xea\xb0\xcf\x00\xa7\xad \x85\x86=\xa9\x1c:S\xb9OMg\xa2/\xcco\x0e\xda'\xd9\x04\xab5\xcd\xeaL\xe5\xba\xf18J\x04\xc3`k\x01L\x9a_\xd7\xfa\xe1\xebM>=^7J\xb8l\x1b\x99\x83Z\x04\x14\xcd\x84\xaf\x0c\x169\xa5\x0b\x88Y\x0dv\xb7\x10\x90\x16\x18qq\x17\xaf\x99~\xc8\xd5)\xb6`\x04U\xca\x8b\x872rE\xab\xb0)\x15,\xae\x08F`p\x16lj\xf4\xec\x9aB*v\xec\x1e\x18\x03\xb0\xf1\xa80\x16?\xfa\x8e_\x02o\xda\x952;\x0d\x04\xa3\xafU\xb4\xc8\x97\xae\x0c\xf1O\xcb\x8dbs@\x81\xb3h\x92c2\xed\xd2\xbd;\x04\xea\xd5#\xc6\x16{\x13d\xe8\xf9Ug\xe5\x10\x16\xd9{\xab\x06\xa6\x86W\xdd\x08\x15\xd5[\xc3G\x0f\xa8\xd7\xd2\xf2R\xe6ku\xa2\x98\xdb\xdd\xd8\x8bb\x01\x92\xb4f\x97\x07+\xbd\x8e8\xa5I\x7f\x84\xcb\x98\\\x96G{\x132\xc2/2\xccv\x07\x16dm\x9e\xa9\xc8Z,fC\xe6\xb0\xdc\x9d\x0a\x09\xc3p\x03Df\x0c\xcb\xec\x9c\xcd\xed \x14i\x9e\xe1\x9e\xeb\xc3\xab\x1a\xb3\x18\x0d*~a\x8b\xe3\x85\xbdq\xd3\x1c\xa3\xfe?\x17@\x9e\x15\xa0\x92\xe4%\x82M\xdf\xb6n\xff\xee\x83\xd7N\xb5x\x8av%e\xcd\x11\x03\xe0\xe8\xd1\xcai\xf5@vg\xfcR\xb6\xfa\xd3\x12n\xba\x82\xa6*\xe8U\xa3\xee\xf7\x87\x080\xf4\x90pQ,\xb3-\xe8^E\xd5\xbc>\x0e\xeej\xf9\x18*+\x8f\xa2\xac\"x\x95e\xbe\"z\xd6\x00\xde\xc5\\=\x18\x87\x9a^\xaa\x96\xd4\xad\xa9\x8c\x93\x0b\x11r\xb8=O>.\xfb\x82\xac\x87}\xcaM2|5\x98\xddr\xb6\xedk\x93\x85\x0e\x92-\x9c\xfey\x1b$\xbe^\xaf\xc5\x83\x95\x03\x13\xb4E\\\x95\x98\x10\xda\xdd\xb7\x17^_\xdb\x1aZh3a\xa4\x7f[gYJ\xf9\xc6\xff\xb4\xa6i\xf3\\ \xb8\x0aH\x81+\xd1\xabT\xe5y~\xd6z\xf0\x0d \xc6\x19,\x9d\xd4\xd0\xcc(\xf7\x8f\xb9\x0c\xace\xf1\xa7\x04d\xea\x8d\xc2\xed!\xdb>M\xcb&%\x13:>&\xcd\x05F\xac\x90\xdf\xfd\x85\xa6\x99\xb4\xdeoq\x1f?[tG\xeeB\x02\x18\xfc\xa13:4U%\xd9\x93{\xde\xc2|<@\xc6j\xb6 \x95\xfcu\x8b\x8a\x1a\xf2^d\x8f\x82?\xcc\x91w\xfcG\x1d,\xdb&S\xb6\xa4\x06\xaa\xb3\xbe\x9d\xfb\xe5o}\xd3{\xa8\xd7\xe1\x95\xac`\xdc\xc1\xde}h\xe6\xcc\x16\x12\xd9\x81!\xb1\x98\xc7~N\xadw\xf0\xe5\xbb\xee\xa33|\x9c\xf0E\x96cGTn\x8c\xca2\xee\xda\x9a\xed\x1e2\xc2\xfbF\xdb\x8de\xdd\xddK\x1d\xc0\x0e\x08\xbc\x93\xa9\x19\xbc*'\x9b\xdbAY\xa6Oy\xe1\xc3\xe6\x89\x03\x0dU\x93\xea\xdf\x90)e\xc5}t\x14\xe3f\xf7\xce\x160P\x99\x17\xbbwU\x18xX\x17\xd0\xfc\x8c\x1c\xdeaS\xfb\xd0\xeb\xa0\x8c\x7fw\xa0\x16@\xb7F\x7f\xbe\x9a\x93\xb1t\x85\xfcC{F\x8e\x90\x95\xb5>\xf8frbq|\x00\x8d\xc5\xc9k\xaa\xbc{?\xd3\xd4\x1b,\xba<\xf9BfI,\x0d\xef\xc6u\xdf\xee\xcd\x00E\xb8\xef\x17\xc8\xfb\xba\xb6\xcf6\xbd\x91\xfdM\x18\xd3}Z\x0b\xaa\x04/T\x9c\x1b\x8cJjd\x8a\xe9\xc1\xa7\xbasxv\x87\x80\xeb\xbcu/\xfdJ\x86@\x8c\x10\xb8\xf7\x06/\x95\xb4\x8cS\xb8\xc8\xc0\xdb\x93\xfeZP\\\x0b\xee\xd5r\xe0\x056G!\xe9}8\xb9\xff\xc3\x93\x951$\xf6\xfd`\x97\x0d\x85\x83\x02\xc7\xe8\xd6\x14\xc7\x13$\xee\x8e1\xe7\xdc\xf9A\xc6{)\x9a\xf5-\xdb\xb8Wo\xc0\x09\xcfxt\xf4\x80\xe7\x13\x8e\xaf\x83\x8f6\xe7 \xffPW[k\xd6\xdfU\x0d\xe7\x82/\xea<\xb5\xaf7\xd8P\x88_\x113\xf9\xc0\xe9\xc6\x95\x9e\x15V* f\x86\xc9L~%+\xcdv^\x0eT\xa7\xc1\x04\x98\x07\\3=\xde\xb7O*,#\x16\x7f1\"\x1e\xee\x96\xa6k\xaaM\x11'\x04#z\x99\x9fZb\x1b\x0b\xcb,\xb4\x90A\xf9\x91\x1a\xc0\xee\xa3\x05\x98\xdfu6 \x08\x9b\xb6\xdc\xec\x09\x95$\x13\xe0\xb4#\x87\x02\xd5\xff\xb4));\x85\x10/\xb4\x96\xffJ\x9a\xd4\x81\x11\"\xb4\x8c\xc0\x16\xd1B\x8a\xfe\xf96\xc3(\xe4\xe4M\x8a\xc1\xad\xdc\xfbP\xf3dkX\x97\xa3\x7fi\xcc\x1f3\x87\xe9?\x13_\xcc\x81\xd6\x96\xd2\x9a\x8aH\xf2C\xca\xc0)\xb2\x0b\xce\xb0g/\xf9\xf3\xd2\xecN\x9cd%\xc2:y\xc0\x9b\x0d\xdcm\xe0\xef\x18T\x91\xfd\xa6\xab\x85\x06\x09\xf4\x7fJP\xfd(t\xe7\xe2\x88\x19\xbc4\xbf8\x04\xd95\xfe^\x10]\x87/\xa2\xe2\x9e\xe6\x0d\xd3\x01\x7f\x9b\x92u\xda\xd1w\xe7\xdb\x0be\xd15\xfak\xd9Lp\xe0\xbb\xf2FB\x9fr9\xc4\xa3\xd81 \xc9\xfa\x05Z\xa9\xfa\xd3g\xf8\xb8\xb6\xe2\x96\xf1\xf4-\x8f\x80\x1b\xed\x19\x15Ef\xd0\x09\x94EP\xa9\xa8\xc5t\x9a\xe3\x81\xe86@\x8d7m\xe1\x18\xc05\x0bC{h\xd8\xbaI\xcf\x98\x09\xfc4\x8b\xb9\xc8\xa9\xfeN\x85\xd46~A\xae\x08\x7f}\x80\xcb\xa9\x15\xf2!C\xf6u\x8a\x92\x01\xfd\xee-Z\xe3\xf3\xe1\xd9\xad\xf3\x01V,\xa2\xde\x18S\xed\x16\x96\x19\x9afa6\xa5\x9c\xcfT*V\xb8\xd8\xab\xc5&\xb4\xf6\xd8\x18\x9epDU\xd8\x1f\xa3m{\x9a\xdav\x1fYm\xf7\x82Ko\xab#\xbb(\x82P\x01{\x00\x9bL3h\xcaW\xc5\xab(]a&\x12\xd3\xa29\xa8\xf1`7`\xfe\xebgA\x15\xaf\x01\x16\x02W\xa6\xe5\xe8\x0b\x02\x97\x89\xe8Z\xc3\x9a[\xc5\x0c\xe4\x0b\xe7\x18\xe6\x0eW\xef\xc3\x14\xceM\xe1\xcfK(\xd5M \x13^\xa9F[\xdb\xdd\xf4Wz\x8e\xaa\xce7\x9d\xf7\x93J\xbf\xd9\x13\xcat\xe0\xcf\x11C\xdb~\xf4\xfe\xd9\xa4\xd7\x00\x1a\xe2\x92S\x12\xb3\x0e\xcd$!x~\x90\xa6\xf4\xe4\x1f\x81\x83\xc8x\xb9\xd0\xafA\xe3\x9b\\\xb0\x90E\xc3\xab\xf0\"a\xc2\x9adN\xea;\xf0\xe0\x0do\xfc\xd6\xa5\x8d\x9eM\xbdf\xae\x87\xdb\xb2\x1b\x96\xc4\x03Oo\x85\x85\"\xb8}\x8f\x9d\xf8\xf4\x07!(x\xb2\xb8\x87\xee'[\xe4a\xaf\xfa\xc5\x1cTw`m\xa5[@\x0e\xeb:#3q\xb0Q\xbd\x9cI3\xe7\xb2M\xa9\xf3\x13\xccb\xe7*\x8c\xaa\xa8ZL$YXAK\xf4\xc6\xc9'\xf11\xde\xa9B\xa0\x08\x17\xc94?8A\xb0.q\xca\xccM\xa8\x083\xb9r\x95u@\x8dc\x0dG\xee\xb4\xa6\xdd\xb1\x93\x1e\xe3\xcf\xc1\xa3\x00\x0d\x18\x91\xc2,\xf2\x07\xf8c\xa4\xd3\xf1\xe8\xaf@$\xf7r\xc0Kv\xb4GF\" \xfb\x9bo\xf1x\xc87\xe1\x1a\xc7\x9b\x1c\xf7\xefJHr\x8f\xf5Jup\xba\x9f\x7f\x85\x06^\xca\x12\x81\x83\x0by\x023\xb6M\x91\x1boa/r\x8f\xfek\x17\x89\xab\x80\x14\x09%\xec\x7f\xe8\x88\xc2Z\xbd\x0a\x17s6\x87$\xe7 \xad\xc4\xd5wG.\xd3\x8e\xd3XgC\x11l+\xef\xe8\xb8\x19`\xecrV\x8d\xd2\x97\x80\x04f\xb3\xd2\xaa\xc5\"\x95\xf5XK+\x06\xbei1T\x02\x1d\xd4vpC\xcfX\xac\xfa,`o(\xe3\xce\xa0)\x81\x85\xee\xfa\xfa~\xd1\x83\xb3\xf9,\x84l{\xa1O\xc1\x17EB\xaf\x96\xbb\x0a.\xedrBv\x9b\xa2\xd5\xbc\xa9\x08\x821\xc5r\xdc\xa7\xdf\xe3\xe9\x03\xbcK|\\Mw\xf0J\xc9\xcd1\xe0n\xe6~\xa3\x0e\xd0\xd8\xbd\x9b\xa7!U\x9bA\x1d\xf8.\xde\x00\xd7-\xa0L\xe4\x1dFk\xf9A\xb8#\x879\x96c\xed\xd0]\x90\xcc\xd4\xdf\xa2\x0d\xfc\x8f+\xc9$\xb2\x0fY\x8cZ%\xf8M\x1a\x07\xb5\x16\xdd:n\xe3\xc7$U\xcaz\xb3\xab\xa8L\x1aXn\x80\xa1y=6\x1c\x0c\xa0u-GE\x03\x0d\x90\x0fk\x92 \x93\xf9\x19\xf3\xc2P\x0d~\xc1\x9f\xd5\x96\x9cJ\xad\xf5\x08Q@\xa44\x1c\xd0\xdb\xff\x94\xa9\x02_\xf9;\x01\x13}\x19\x9a\xae\xfezEs\x9c\x90s\x9cV\x98\xd6\xce@\xc63J\x18\xc0\xfe\x92\x19\xd3\x040\xe2k\xc3\xa5c\xd6,\x92\x98\x9aQy\xc2\xab6R*\xd3`\xed\xb0\x089\xddw\x8c\xf8\xefa?~\xd8\xc8\xc0\x95z\xfa\xecV\xf7\xcb\xe2\x9a*\xb5\xbc\x8a\x1c\x14\xc6\x85\xb8\x85\xb9\xcb\x1d\xb3:\xf0^\xe2O\xd0\x8f\x8d\xaf\xa4\x1e\xd1\xb6\x8c\x03\xf7\xe2Z\xb6\x18\xf7\xb31\x99bL\x97\xb3?\xb1\x09\x7fi\xf2\x0f\x0dA\xb3\x0f}\xd7\xb3\x82\x8f\x8bE\xfc4,z]\x99\x91\xe8\xccv\xa8+p\xf0QJ\xa1\xf1\x88\x9f\x8ck\x88\x09'\xa3u\xe4\x03\xdc%\xe6\xb7\x9c\x96j\x07.\x1d\xe2Dz;\x8c\xac\xb5\x97<\xf6NP\xd7\x81\x14Q\x07\x1a'\x1e;\xb7\x9f\x85Cl\xe3\xfb*\xd7,K\xff\x91\xd0\x19\x96U\xf5^.D\x9c\xce\x13kc\xcc\xc5|\x80\x9e~\xd7Z\x18\xb0\x0e\x1bU\xab\xc1\xd3\xc1\xf4\x8f\xa7\xac\xca\xab;>\x90\xd53\"R\xb7\x16i\x8cj:\xdc\x08E\xcaF\xc3l\xedn\x10\x99\xc5\xc8i\x8f\xfb\xafK\x9eV\x1b\xb6\x93\xef\x1axM\xd8z\xbf\xc7|\x94Kn\xfa\xd5\x1e\x9d\x01\x7f\xde\x02\xa2\xe2\xf5\x89\xa3C\xf0t\xb9\xe0\xe0\xdd\x94\xf36\xd2\xf6\x95\xcfC\xff)\x90~\xe5Rp\x90\xcf\xf7CP\xe0b\xe9\xdb\x0d\x1ej8\xa8\xcd\xbc\xe7\xf6o\xb1\x97\x8a\xc1D\x9da?:\xf8y\x9e\x94`\xa4\xf9>\xc6\xfc\xaaT\xa9\x94\xe3Lk\xab\x9cp\xf5&\x11\xa6\x8b\xaf\x1d\xd1ax\x0f\xb3\xf0\x06]n\x0b\xd9\x0a+Kqu\x10\xe7\xfa6\xa7w\x14s2O&\xd6\xa8\x026\xb5*\x14\x95\xef\x04s\xd1\xc8X\xcc\xd1tX\xd5\xe5n\x119\xdd\xff\x94\x08\x1c\xd9\x8d\x0d\x1c\x90iR\xb0\xd0u\x1e[\x92(\xdcG\xcd\xfe\x86\x80\x09N\xfbli\xa3\x01s\xc4\x8fZ\xd9\xe8s\x0f\xdb\x0d{\xa6\x01\xadG\xc4\xd1|@\xf8\xcd\xb7@\x10\x09[\xa5@!\x7f\xad\x9ee\xb2\x1c\xc7|\x0b#\xea\x9be\xd4^\xf2\x1cO/\xa8\xb3\xabM\xbd\x19H\xb1|\xf6ar \xda\xf0a\x15\x15+\xa5@\xc5\xce\x99\xec\x91\xb8U>\x93\xa8\xb2\xa8\x11%h\xc3\xbf\x05\x8fJFv\x92\x81\x0bl\xc8Z\x80\xb8\xf1\xae)7\xc2\xc3\xf4 r\xa7\x94\xf5\x08=\xf0c\xe8+\xe7MM\xab\xea\xbd\xf5\x8c\xafy\xf1\x9fexi)p\xaa\xc0\x91\x06\xec\x03D/\xc1\x85x\xd2+<E\xba;\xff\x84\xc8g\xe9\xban)\xf6\xf3\xc3\xc8%\xbe\xc5K\xc7k\x82\x12?\xe8F\xba\x1e\xe91j\x17\xe4\xba\xfb\xab\xd8}JV\x09\xf8q\x18V\x0d.\x9b\xa4\xbcC\xc4\x87D0\xdb\x9c|\xb1\x0b\x0b\xad\xdaB\x9f,\xb5\xe5\x17\xde\x85\x9ea5_\xca\x7f\xc0\x7f\xe9\x07C?\xfe\x80\x06\xf2\xf696(b\xca\xdc\x89\x9e\x1f\x0e5\x80\x9f}a\x16\xc5\xd7\xa0\xbc \x00)k\xa5\xd2>!\xe0\x83\xe1\xd8^\xdd\x81\xbe\x1c~\x82\xd1\xa7 \xb0\x0c\x97\xd0\x03c\xe4\x02&\x05\xe3\xca\xac\xa7\x12\x9dc\xe6Zb\xea+\x13\x88\xc9tx\x0b\xd4\x11(\xc5\xc9\xf4\xbe\xfe\xd6\xa8\x0e:\x16\x11h\xdd~\xc4:\xa1`\xadA\xc3\xf76\xf1X\x18o\xeeA\xb5,|#B\xf7\x13\x16\x00\xb7\xcd\xc2nF\xfe\xd7\xfc:\xdc\x983\xc4\x9a\\\x83\xf7\xe8]uxZ#\x91Doh\xfa\xc7\xee\x03O\x1b\xb4\xaa\xd6]^8^3s_\x80\xafRD#\x17.\x92b6pQ\xa5\xbeE\x11\x9f\x7f\x84S\x0e\xdaw\x8e\x0d'\xee\x89\x16\xbb\xa9\xdc\xc0\x82\xf4O\x05\xc1r\xe0\x13^dg6\x16\xbd\xd2\x0b\xe4\x16\xf7\x97\x80A\x91\x0f\x9f\xfd\xfa\x0a\xb9\xb6Y\xad\x8d\x92U\xd8\xc7\x16\x96q7\xaeL\xfe\x12_-\x1cR\x89\xc8\xa29\x17\xb1\xb0\xd3\x80\xe79\x1f\xb1i\xea\x19:H\xb4c\x18\xed^,\x02\xec\xc4\x8c\xb5\x0b}ue\xad\xa8U\x12\x94\x920\x1cviQbm\xf4\x85\xc1\xd0\\\x0e\xd6\x85\x1c\xad\xed\x14\x0c\xb3\x10\xa8\x9f\xfc\xef\xea\xaa\xa7+\xf9\xb5\\4\xd5z\xd0\x9f\x95\xac/:\xab\x07R\xeeK|i\xd6\x04\x0cx'G\xe8\xb8\x9c.\xc7E\xb2D\xae\xb0\xd5\x93\xc1\x97\x0bac\xf2w\xb4\xb8\x9f\x8b\xde;\x83v\x97\xc8xN\x13\xa3\xfd\x8f,\x88\xb3*+\x9e(\xba\xa8)\xc9$\xe5+\x19\x04\x9a=\x97\x98R1\xd0K{\xf5D\x14\xbfLM\xce\x8ao\xe4\xfaA\xec\xfb\xab\xfb\x85\x8a\x84\x1c\xd3\xe67\x08\x0b\xa4\x1f\xf6E\x1f\xc0\xb9_vEFN\x9f.\xd0\xd2\xbc~3\xeb\x83MXA\xd6\xb5\x8d\xe7\x1a^4\x00\xda\xac\xbaH1\xa0\x91U\xfdx\x88\x06\x09sI.\xbe\xd5\x85\x07e \xc8\xf38\xa0\xeb\x9b\x00\xea\xbfm\x9b\xd9\xc4\xe9,\xc8\x9d\xbe\x16\x96\x1b&\x84!\x0aG\xa8\xe8j5\xb2\xc4\x9c\xc8\x80\x7f\xc5\xd9\xe7\xfa\xdd\x964\xac\x13\x09\xa3\xa6\x83\xf6\xe5\xb5\xcd\x9d;\x03\xeeN5\xe2Cj\xfdp,\xfa\xd6\xe6\x81_\x9b\x8d\x83M\x98-\x7f\xb9\x9b\xc2\x18}f\x83\xc3\xc1\x8f\xe33\x15\x91>\xe9CD\xcf\xaa\x0d3\xb3\x91\x84Z\x0c\x94\x1a\x96~\x0cbw(\x94\xc4\x819\x90\xee\xbf\x9fw\xb4\x98\xed\x8b\x0c\x10n\xe1c\x1b3e\xe4}\x978\\\x89!K%\xe30T\xc8\xbf\xa2Pf5\x02\xdc\x19\xe8\xf15\xcb8z\xa0\x8a\x02\x1a\x04\xa3\x0b\x1a`\x90\xf5MCzm\x99\x08}\xc5\x97z\xf3\xaak>\xa8+\x04\xa8Y\x01\x82\xc1\xc2\x99\x97\xcbK\x1es\x82@\xd7\x19\xb3|yG\x15\xbemJh\x91\x84\xef\xb2\x97\x96\xef\xfd\xbb\xd6H\xa7B?\xb3\xd6\",\xdc\xf1x\xd7\xedd\x16G\xd8|\xae\x9c\xc4zt\xc6\x93?\x9f\x973i!\xd6\xc82C`l\xb0\x0b_v\xdb\\%\xb3gu\x00\xe0\x0d\xb0\"\xb1U\xf0\xe2Aw\xf5\x13\xdb\xb8j\x89\x12\xb7\xbf\x91aH\"\xa2\x07]\xc0\xfc\x1c:\xfe\x9d\xafPG\xde\xa58\xb4\x8a\x0d\xed\x07o\xea\xa9-l\xfb\x86\xe8\xe3K\x9d\xadJ\xd6\x13\xc3\xe8\xa0\xc7\xe8\x95{\xe7\xe7\x05\xa0\x15\xa8\xeb\xec\xd5\xd0\x1a\xc0x\xea\x8c\x0f\xaf\xa9\x9f\xd8\x11\xdc}&`\xec\xc2\xba\x17n{%7s\x05\x96\x16\xe9\xa1\x0c\x9d\x87\xd5\xd9\x04:T\x86\xcf\x96\x13\xb6\xfd\x95\"x\x03bN\x90\x16\x06\xfc\x8ee\x89)\xed\xdf\x84\xb1KF\x9e!p\xa3\x8fBq\x91)\x94M\xed\x0a\xaf'p\x0d\x9d\x9a\x9a\x12\x9c\xe2t7V\xf3\\ n)g\x18L\xd7\x0e\x09\x96\x81zw\xc9\xce#\xe6\xdc\xc4\xe4m\xa7\x0a/\xf0Q \xe5f\xed\x8c\xcd\xe8\x92\x11X\xbey\x00\xbcn\xbb\xdd\xa1\xc5L\xce\x13\x0bzd\xad\xd4\x91}\x1e\xa4V\xe5\xacn\xe6\xf8\xd2\xbbNjg$\xf6iD\xa3\xa8\xd0\x97F\\\xf9Sr\xa2\xa2\x09~\x8f\xf1m\xf0\xa4\x12\xdc~\xe3\xba\xf4\xa91e\xe9\x88\xba\xf0\xcd\x8bJ\x84\xdf\xcb\x7f\xeaf\xd8\xbfK\xbfK\x81!-\x06\x97U6\xd1\x8az\x89\x99i\xe1\x18R\x11(\x9b#m0\x95v\x15\xe4\xf5\x08\xed\xec\xea\x9dlH\x0e\x1a\x8a\xf7\xcaRYan\x95[\x9e~\xcf\xd6\x100\x96\x93\xfc\xaa\xb3\xbdi\xef>\x8ff\xe0v\x95\xd13)\xf9\x81Y\xf8\xe5z\xf0Qp\xaf\x16\xcaj\x9bh%\xa9\xa0\xb1\"L\xf5ju\xd3z\xee\xf0\x9d\x834\xe1c\x0cH\xee\xe6\xa1f\x91\x01\xc5A\x86\x8b\xc4\x0bz\xc1\x8e\x83\x1f\xd5\xae\x99L\xe8\x94\x10\xde[t\xbd\x80M\xcc/S_\xef1u{\xb3\xca\xd7D8\xce\xa2\"\x84\x87\xb6\xb2\x03B!\xa7\xc9\x86\xf8X\xb9\xd3\xa0\x01E\xe8`D\xd7\x0a\x8cu\xcb\xd8\xef\\m\xfe\x1fd\xef\x94\xe8\x11G\x1f\x18c\xc2\x14\xa03\xc0]\x9c\x1c\xcf\x1d\xe4fDvy\xf1\x9dO\xe3\x9c\x9a\xe1\x13\x99\xbd\xe1%:\xe5{`5G\xd8l\xd4\x147\x84\x11\xda\x9b\xf9Hs\xd3\xdc\x03(\xd3/\x9b\x0b\xbd1u\xab6\x84x\x03\x82@\x00\xb6^]T\xe3\x15\xd2\xd1%xL\xb8\xedb\x88ox\xc3t\xcaw\xe5\xe1v\x00\xa6\x90N|\x04\xaa\xdf\xb67\xbd5\x9b\xe9Txi\x11j\xe0\x03\x14eE\xe76\xa3]\xdai\x09q\xb5&\x17\xb2'n\xa0\x0bs\x1e\xe1(6(\x02_G\x95wBr3\x8bk\xed\xb7\x85O\x1a\x0d6\xe8\xfa\xc5\xf2\x96\xb1LO\x00\x1cg\x8c\x8b\xbf\xe0\x94\xf7\xf9\x05VB\xb8Z\xc9\xd2\xed\xa2\x1c\x18\xbf\xdf\x87\xdd\xd4\x8fj<\x8ed\x00\xf6C\x1f\xac\x88\xb3l\x04\x0f\x84\xf7\xe4\xaa\x9c\x19\x1f@\\\x08,\xd8\x81\x1fY\x9e\x95\xb2{V\x12\xc9\xbfa\xbe\xfa\xbbC\x15\xd5|\xd3\xbcO\x1f\xe9:\xc9\x07A\x92\xbc\x1c\xb8\x10\xf7\xf4\x05o\xc5\xf9\xa6\xd1\xb7#]\x84\x8b\xde\xdeID:\xcdKg\xa3\xef\xaeF2\x03\xf4F\xec\x97\xd4\xd0\x02t3\x1f\xeb\x84\xa1\xd4\xb7\x94:pAKT)\xba{\x90\xac\x0c\x05\xa1\xd4{\xb5\x14\x89f\x06-z\xc7d\xe7\x9b\xd8`\xb3QE\x81\x94\x8b\x14\xf6d]\x94\xa9\xb9\x09\x81\xdc\xe7\xda\x7fL'7\xa9\xcfY\x13\xae)@\x04t3Fukn\x971M\x06\x90\xd4\xbc|F\xcb\xe1p\xee\xa2k\x956\x01\xdf\x8f@\xc6\xb9\xd6\x1b\xa9o\xc4G\xc6\x91\xa43D\xda\x13\xb9'\x90p9~\xac\x0b\x05\xa7O\xaf\x95X\x01\xda\xb3\xa7'\xe5)\x03;\x9b\x99\xd5G\xfa\xdf\x10\x19\x98\xd9\xeff\xe4\x04\x07\x0aJ~(\xfc\x14\xe9]\xd5\xcc\xa10\xd9\x99\xbdQ\xfe\xfar\x81`u\xe4\x01z\xaf\x02r\xf4FD\x9f;\xf3\x89\x82\x8a\xbb\x81\x8b\xb9Lry\xc5\xf9\x09\x18\xb5PB\xe9\xc1\xdb\xf9\x15\xefS\x9b\xe3\xccDV\xea\x12\x04\xfe\xa0\xc8\xf5\xcb\x1eO\xbdO\xabSl7\x94cg\x91w\xc0\x0a\xe4\xdf\xd3\xe1\x0f\x1bx[X\xf1|\xf0\x9b\x91\xaa\x0a\x0fE\x10\xdd\x96\xee\x98\x8c$\xbdd\xdf\x14\"\xa5\xd2\xd2\xf5\xd5\x10h\x01\x10H\x9d\xa1\x1ex\xaf\xfd\xa85\xd8T\x1e\xf2[wA\x7f\xb2\xdd\xf3T\xcd\x00;\xe0N\xc4\xf28.\xb8\x95e\x0e\xda\xea\xfa\x0b\x92\x07\xc0R\x97O\x8b\xad\x94X\x96: \x88\xb8\xd7q\x1fx\xae\xbe\x05\xd5\x94K\x09 \xf5\xe1\xa86\xc6Jd3%\x8a\x0b\x91\x03N*\x91\xb0\xa3\xb8\xdau9\xa9\x931\xa3\xd7\xc4a\xd4\xac\xea\x1b\x08\xb4\xea\xd7S\xcf\x8c^i\x0a\xa9\x90#\xd2\xca\xb7\xef\x16\xe5\xe1\xee627\xadRB-\xda\x9e\x09\xd9\xec\x8c@\x88G\xcc=)9\x7f[\xdb\xf4\x82\x96\x7f\x9a {\x0dm9!\xe0\xf3oE\xe4\xe38y\xe7\x9d\x09\xa9\x0eH\xca\x8a\x9d\xee\x8b>\xb5a\xd8K\x92\x932\x04\xc6t\xd5\xf9\xee\xae\xb2\x86N\xc0\xfa\xf7\xb3dJR\x7f\\\xce\xafZ\xe8\x1d\x0c\xc2)\x98\xca\xcf\xb9[\xbb\xa1\x93\x943\xac)i\x0c\xe3\xe1.\x80\xad \x9c\x1d\x86\x12C\xd2C\xbb\x92\xed\x0e\x0c\xee\xd1\x9c\xad\xa1\x02\xb7\x11\xda\xed7\xa3\xb1\xe8\x97\xfe\x1f\xd3\x05\x98\x80\x1f\xb1uA\xe9\x09\xdc\xbfeK:WE\x92j\xc7\xdbZ\xfeX\xea\x99\x89\x8b\x00\xc1\x97\"\xd8\x16M\xac\x1e\xd3\xec\x95E\xc8\x08 \xc1\xdf\x17\xd3\x8a\x0a\x8eT\x08\xac\xd4\xcf\x05\xdc\x7f[\x898\xf8#\x14p\xa8>7\xb2\xad\x17\xf0@\x03\xe2\xa3\x06\xa6\x09\xbd~\x93\xab\xa1\xe7*\x7f\xa2-\xddHkw$\xc4\xe6\x85S\x1fA\xa3U\x19IF\x0d>h\x1fi\x7f\xf8t\xd6\x82s'\xb8fm\xb1\xc2\x9a\x04;\xccR\xe9\xcf\xca.\x88\xc2\xf5\x1a\xa7\x13\xb5c\xf2E\xfd\xad\xc2\xcd\x93\xfc\xd0\xcc\x02\xe1$<J?\x0b\x81\xdd\x89\xe7\xd3=\xec\xa7\xf8\xa5Z\x93\x1f3/8\x8c\x16En\xcf\xff\x9d\x00\xf6R~\xd6&/\x17\xeeV\x05\x10\x09\xbc?\x88\x93\xdbL\xbe\xd7\xcd\xcf\x16\xb6\xcf\x1bS\xbegv(Xz\x9c\xd9E\xc0\x8frA&\x0d\x14\xd2\x93\x8ev\x1d:\x04E\x99-\xb2@c\x82\xcd\xc6\xaf>\xf7~\x1dx\xebf\xbe\x01t\x10,#W%q\xe1\x83\"\x90\xe66j\x18J\x8f\"\xbc\xdc\xf1F\x1a\xe4\xf1\xf4\xa9i\xce\x064\x8ek\x97\xeb\x07;D_BC\x80\xed.\xf5\xc5\x13\xf4\x17\x12\xbf\x9f\xa0hF6\x16Z\xdf\xda\xa6\x85\x19\xd4\xed\x9c\x88d\x9cs\x05\x08\x0f\x02#\x16\xc7\xfa\xe4\x8c\x03\x1f\x91^\xa592\xb5r=\x0b\x87\"\x08\xc3\xba\x85\xe7\xcd\"K0\x82\xa5L\x89\x04\xaf\xb9\x1f\x13\xc3\xe7u<\x93\xe6\xdb:\x9c\x19s\xe6iq\xab\x02P\xb1D\xc4E\xb1\xe2\x85\xee\xe5\x00\xffW\xa1\x14\xc7\xaeG\xb7\xd2\x0e!\xa7\xcd\xc3\x950\xa4\xcb\xf1^IK\x99\xe3\x19\xe5_\xb8\x15\x86k\xb4MDw\xaf\"\x88\xb2k\x85\xc3\xa7\x18H\x9a\xbd\xee/\xa9\xcdq\xda]\xb9\xea^\xa1T\xfeV\xe4\xbb-@6\x0f\xbf\xa1\xaf\x1b\xa7P\x8d\x89\xffVQ\x8d\xad'\xf1\xa0\x8aML}-\xfa\xb6R\xa3E\x13\xbfZs\xa6]\x94v\xf0/\xad\x1f@\xff\xc9'!T1\x14l\x12M\xe0\xe2\xda\xbcz\xa2u\x17'8\xd7\xeb&\x146\xf2\xcbS\xde\x8d\xc0\xf3g\xbb\xf3\xa9\xac\x0ez\xbe\x01\xda\xcc\xff\xf1\xe3\x97\x8c\xe9\xccF\xc7\xa2\x10P\x14\x84\x93\x7f\x0c~\xb4\x14\x11(B\xbf\x84$\xa3\x90\x17\xf5\x13\x0d\xd0~y.B\xd6\xe7[\xf2\xbb\x9fk\xee\xc3\xdb\x9d\xa7I\x9f\xb0\x9eZcz\xe1\x16Y\x92e\xf07\xa7N\x8d\xfbG(%1\x1a\xfb\xd1*\xca\x99\xa0|\xc6Zm\xc4\xb9Bx\xfb\x07\xff\x81H\xb0lJ\xe7\x84\xc0\xf5\x89\x0c6\x88\x05\xa2W\x97\xb7Tcv\xd0\xab@e\xdf\xd3\xe1\xa3\x8a>Z\x0a\x7f\x11\xd1\x02\xc0\xe5\xbc\xd4g\x94\xb5\xaf\xb4[\xc8\xeb=\xd9R./\xd2.3\xb1\xe4\xeb\xc7\xc7\xe6\x834\xfa5\xc6\x98\x18\xaeh:hdj\xfe\xb8\xfe\x03~O\x99?\xd6\x7fS\xef5a\xc4\x96\x99\x9d\x0a\x0a\xad\x82\x12g\xeb\x81(\x1f3\xc2GZ\xbd,\x9e\x07e\xca\xfa\xc9\xb2\x1cwG\x92v\xa9g,\xf4\x88\\\x8c\xae\xb9\xc6\xc1\xa3\x0f\xd8`\xdc$\x0fjHZ\xce3\xd4\x8a)\xff,q\xccj\xd63\xf7\xe0\xf6\xb0\x8c\xab\xf3\xbd\x9f\xb7\x0a\xbdI\xbd\x7fX#\x96wh\x9c^-O*\xa2\xb0\x09D\xa4\x91\x7f\x90EOt\xafUU\xa9\xa3\x1c\xdb\xb9\xad\xcc\x08\xa4M\x9d\xcd\x0e\xf43\x93O_\\\"q\x0cp\xb3\xd1\x8cfR\x1e\x94\xac\x09\x11\x97|\xe2\xa2\xe4Y\xbf\xe0\x95\x83\xdd\xfeu\x88\xda\xd8U9LdW\xd26\x8e\xd0S\x0d&L\xbf\x05\x18\\H9^\x85\x8b\xe0\x0b$\xb2\xb3Q\xfa\xb6\xf2\x8cA\xebP5a\xcc\xa43-\xb0*!\xb8\xa4\xb8\x9a\xe4iz9\xb4\xa0\xd05\xe1eG\x02\xe5NM\xf1\xae\xd7\x0c\x1c\xc6CO\xc7?9m!\xbbxs?\xa4B\x9e\x10\xf2\x01T\xf9\xa8\xcfu\x1d\x8eM\xbb\xca-\xab\xe0F\xd7\xa0\x88\x8f\x89\xbe\xebP\xc0\xd3\x1a\xa9t\xfdy\xcd0\xa8\xa0\"a\xa1p(\x82\xb1\xe4\x14k\xe6D\xad\xc6\xd7^\xc9\xd1y\xb8\x19\xc5i\x9d\xf5\xbb \xa9\xfd~r<\x11\x00\xfcV\xbf\x91\x82#\x1e\x18\x9cF\x80\xc5E\xaa\xaa\xed\x1dd3\x8d&\x98=\x0c\x96\xd2\xd0d\x85o\xb3\x88\xa8S{)\xecH\xb9J\xea\x07\x96ZU]`)\xcac\x86R\x874\xa4\x04\x0c\xf6e \xf8\xf6\xb99+\xf0w\xcc3\x9b6\xe8\xa7\xfc\x95\x1a\x17\x90G0.{D\xc2G\xbej\x7f\x15\xa6~\x15\xfbr\xbb\xff\xf4\x1d\xc4ss6\x15:8/\xb7\xc1\x84\xd9\xa1\xdd%5\xad\x19]\xbf\xf6\xeb=\xf3\xf2\x9b\xb6\x87\xd0b\xef\x09\x16\x0a\x8b\xdc\x1c\xb3\xfc\x12\x9cz:0y\xda\x09\x9c\xcd\xbb\x04\xb0X\xa4\xb1\xf5\xcf!z\xd1\xe0|\xdf\xd3\xa6\xb3cJ\x94\"\x8a\x91\xb3\x7fMO'\x91\x86B\xae0\x85%\xb7n\x17\xd7\"\xbf\xd8Kz\xac\x178\xc1\x91\x12\x1d\x92\x0d\x09\xcb\xff\xad\x15\x1e\x8c,0\xe4\x00\xa8z\xad_\xe2Q\xae\x11@%\x9f\xc1\x15\x84.)\xfaI\x81\xc5d\xe7]V\x95\x80\x19\xd6n\xa4\x88f\x01\x18OAE?\xb3\x83\xecGA\\\x96oyN\xf3O\xeb~\xdb\xa9{\xbc\x83\xac\xedi\xd1B\xb9\x93#\xaf\x8ajf\xebE\x1e\x88\x7f\xce\x89\x16\xbd\x9f:\x0a\xb9\x12\xa8>7\x8b\x9e}\xc6k\xd8\xd2\xb3\x9c\xb6hO\x0b\x81@\x80\xcb\xa9\xd4e\x8a\x0c?\x14\xe2'\x0d)\xd7\xda\xca\x11\xeb>E\xe3=x\xa8\x1d4\xc1\x06!)\xc5\xf3\xb2y\xe6\xe6\xfc\xf5\xc1\xa5\x1c\x14\x9e\xbf~+>\x01\xfb\x88\x9f\xf7\xe3\xc9\xf54\x81\x8e\xa4\xb4\x1e\x90\x16\xc1|*\xb1\x8f7\x81\x16\xd6\xd38\xa9YI;3\x05\x8d\xcaG\x0eN\x05\x19\x85O$\xa5\x06\xd4=\xcf%be\x09\x97\x053\xb24\xc5\xb3\x809\xb0\x84e\xb7o\xe3\xddxc\x93\xfb\x8f\x97\xc94\x95Z\xe2D\x1a\xe7E\x90 \xfc\xc8\xaa\xfdnq\xe7D\xab\xd3\xb8\xe4\x11O\x91 \xffv\xa3\xf8\x92g\xe7\x02*\xa2\xae\xe8\xf5\xc6\x9ab\xc9\xb8\x0eb\xafO\x17\x7f\xa2C\xc8[\xc0\xd4!T\xcbg\xd4\xfa\xe6;DP\xb1\x0f\x10{\xa30B\x8f\xd5{\xfc2\xb6\xcb\x86M\x11\xf9\x08\xd0\xd9\xc0\x7f\xbb\xfa'\xe8'\xc3\x01k\x9e\x08\x9c\"\xd7M,F\x17\x09\x8fr\xff\x80\xa0\x0a\xc4\x0f\xe7y\x14\x9a\xfaS\x19\xa6\xac\xe6\xddS\x07\xa3l\xb4i\x0a\xcf\xf2#FX\xbf\xeb\xb4\xc2\xfc\\\x1a\xec]\xb9,\xa4\xc2>U\xf5k\xc0\xd4\x0b\xc9f\x05\xd4\xe9\x123\x92\x7f\x7f\xedX\xc4\xaa\xb1+\x90\xf1\x89z\xbf\x9a\xf4\x99\xd99>\xd0\xfe\xb5\x06A\xb1!\x95fjN\x8f\x0eM/X\xd5\xbfM\xbb\x810\xd3\x04\xe7\x99\x84\xda\xf9|:B\xb1]=*\xe6~\xabL:1\xb2(\xd8\x8c6\xc1&x\xfe\xe2W\x9d\xc0.>\x1d{\x88$K>\x1d\xdb\xda\xe3\xa0\xa4=\xcb\xc9\xeb\xc2-\xb3\x90\xae\x9a\x08\xeas\x97.\\\xba\xa5B\xdd|\xb9\xffc\xdb\x07v\x98\x95]\xc9\xfe\xf3L\x8d\xf0\xe0\xb7\x8b\x00\xb8Y\xc1g;\x05p\xe5\x1e=\x9b\xc9\xedG\xffQI\x14\x13x\xc3\xc8T\xb5f\xc7\xabG\xdc\xa3\x09\xe2\xef\x01\x05\xdc\xbfN\xa8\xe8\xe4\xa2\xec\xcb\x0b\xf4\x85\x9f\xdb\x06&*t\\U2\xb0\x16_\x89\xfe\x05\x0d\x02\x87\x00w\xcfx\x05\xc5\x14\x06\xe3\xa6\x85\x87\x16\xdc\x01F\x96U\xe1\x99\xa4KF\xc2\xa0\xe7\xac\xe8\x06\xb6\x86\x1b\xd9\xe8\xc8\x03\x8a\xaf34\x03\xe5\xaa\x18\x10\x08.\x93S\x10\\\x95\x90,\xbc.Q-\xf7]m\xc9\x00\xdd\x81\x8f\xdfE\xee"

--addons/realisticcardealer/lua/realistic_cardealer/languages/sh_language_fr.lua:
RCD = RCD or {}
RCD.Language = RCD.Language or {}

RCD.Language["fr"] = {
	["undefined"] = "indéfini",
	["adminMenuConfig"] = "ADMIN MENU - CONFIGURATION",
	["configureGroupsVehicles"] = "Configurer les groupes & véhicules",
	["groups"] = "GROUPES",
	["vehicles"] = "VEHICULES",
	["createGroup"] = "CREER UN NOUVEAU GROUPE",
	["createVehicle"] = "CREER UN NOUVEAU VEHICULE",
	["dealerConfiguration"] = "CONFIGURATION DU NPC",
	["enterDealerName"] = "Entrer le nom du concessionnaire",
	["groupsConfig"] = "Configuration des groupes",
	["newPlateforms"] = "NOUVELLE PLATEFORME DE SPAWN",
	["deletePlateforms"] = "SUPPRIMER TOUTES LES PLATEFORMES",
	["deleteNPC"] = "SUPPRIMER LE NPC",
	["saveInformations"] = "SAUVEGARDER TOUTES LES INFORMATIONS",
	["configureGroups"] = "Configurer les informations des groupes",
	["rankAccess"] = "ACCES AU RANKS",
	["jobAccess"] = "ACCES AU JOBS",
	["enterGroupName"] = "Entrer le nom du groupe",
	["cancel"] = "ANNULER",
	["validateCreateGroup"] = "VALIDER ET CREER LE GROUPE",
	["configureVehicleInformations"] = "Configurer les informations des véhicules",
	["preview"] = "PREVISUALISATION",
	["chooseVehicleClass"] = "Choisir la classe du véhicule...",
	["chooseVehicleGroup"] = "Choisir le groupe du véhicule...",
	["enterVehicleName"] = "Entrer le nom du véhicule",
	["enterVehiclePrice"] = "Entrer le prix du véhicule",
	["vehicleView"] = "VUE DU VEHICULE",
	["generalSettings"] = "PARAMETRES GENERAUX",
	["priceSettings"] = "PARAMETRES DES PRIX",
	["validateCreateVehicle"] = "VALIDER ET CREER LE VEHICULE",
	["configureAddon"] = "Configurer tous les paramètres de l'addon",
	["beltConfig"] = "CONFIGURATION DE LA CEINTURE",
	["engineConfig"] = "CONFIGURATION DU MOTEUR",
	["speedometerConfig"] = "CONFIGURATION DU COMPTEUR DE VITESSE",
	["driveConfig"] = "CONFIGURATION DE LA CONDUITE",
	["configureCarDealers"] = "CONFIGURER LES CONCESSIONNAIRES",
	["validateSaveSettings"] = "VALIDER ET SAUVEGARDER LES PARAMETRES",
	["underglow"] = "Néons",
	["skins"] = "Skins",
	["bodygroups"] = "Bodygroups",
	["carDealer"] = "Concessionnaire",
	["spawnVehicle"] = "SPAWN UN VEHICULE",
	["bringBack"] = "RETOURNER",
	["testVehicle"] = "TESTER LE VEHICULE",
	["customize"] = "PERSONNALISER (%s)",
	["sell"] = "VENDRE",
	["buyVehicle"] = "Acheter",
	["customizationTitle"] = "PERSONNALISATION",
	["mainMenuTitle"] = "MENU PRINCIPAL",
	["modifyVehicle"] = "PERSONNALISER VOTRE VEHICULE",
	["buySaleVehicles"] = "ACHETER OU VENDRE DES VEHICULES",
	["vehicleOwned"] = "VEHICULE POSSEDE",
	["vehicleForSale"] = "VEHICULE À VENDRE",
	["allowed"] = "AUTORISE",
	["cantCustomizeVehicle"] = "Vous ne pouvez pas personnaliser ce véhicule \n nous sommes désolés pour ce désagrément",
	["testDrive"] = "Test de conduite",
	["testDriveEnd"] = "Le test de conduite se termine dans %ss",
	["addonNotInstalled"] = "%s n'est pas installé",
	["vehicleTooFar"] = "Votre véhicule est trop loin pour le personnaliser",
	["customizeVehicleText"] = "Vous avez personnaliser votre véhicule pour %s",
	["invalidUsergroup"] = "Vous n'avez pas le bon rank pour faire cela",
	["invalidJob"] = "Vous n'avez pas le bon métier pour faire cela",
	["cantAfford"] = "Vous n'avez pas assez d'argent pour faire cela",
	["buyVehicleText"] = "Vous avez acheté %s pour %s",
	["cantReturnVehicle1"] = "Vous ne pouvez pas vendre votre véhicule quand il est sorti",
	["sellVehicleText"] = "Vous avez vendu votre véhicule %s pour %s",
	["testVehicleText"] = "Vous commencez le test du véhicule, vous avez %ss",
	["vehicleAlreadyExited"] = "Ce véhicule est déjà sorti",
	["maxVehicleLimitReached"] = "Vous avez atteint le nombre maximum de véhicules",
	["canSpawnVehicle2"] = "Vous pouvez retirer un véhicule pendant un test",
	["noPlaceAvailable"] = "Il n'y a pas de place disponible, revenez plus tard",
	["vehicleExitedText2"] = "Vous avez sorti le véhicule %s",
	["returnAroundVehicles"] = "Vous venez de ranger les véhicules autour de vous",
	["noVehiclesAround"] = "Il n'y a pas de véhicule autour de vous",
	["vehicleTooFarText"] = "Votre véhicule est trop loin pour être ranger",
	["vehicleReturned2"] = "Vous avez ranger votre véhicule",
	["carDealerNotConfigured"] = "Le concessionnaire n'est pas configuré, veuillez contacter un administrateur",
	["npcTooFar"] = "Vous êtes trop loin du npc pour faire cette action",
	["npcNotOwnedVehicle"] = "Ce NPC n'a pas ce véhicule",
	["cantExitVehicle2"] = "Vous ne pouvez pas sortir de la voiture car elle n'est pas à l'arrêt",
	["cantExitVehicle3"] = "Vous ne pouvez pas sortir de la voiture car vous avez votre ceinture de sécurité",
	["invalidGroupName"] = "Le nom du groupe est invalide",
	["vehicleGroupEdited"] = "Vous avez modifié le groupe %s",
	["vehicleGroupCreated"] = "Vous avez créé le groupe de véhicules %s",
	["invalidGroupVehicle"] = "Le groupe de véhicules n'est pas valide",
	["vehicleGroupDeleted"] = "Vous avez supprimé le groupe de véhicules #%s",
	["invalidVehicleClass"] = "La classe du véhicule n'est pas valide",
	["invalidVehicleName"] = "Le nom du véhicule n'est pas valide",
	["invalidVehiclePrice"] = "Le prix du véhicule est invalide",
	["vehicleEdited"] = "Vous avez modifié le véhicule %s",
	["vehicleCreated"] = "Vous avez créé le véhicule %s",
	["vehicleDeleted"] = "Vous avez supprimé le véhicule #%s",
	["pnjUpdated"] = "Vous avez mis à jour le NPC %s",
	["pnjDeleted"] = "Vous avez supprimé le NPC #%s",
	["plateformEditMode"] = "Vous êtes actuellement en mode édition pour placer vos plateformes",
	["beenSaved"] = "Vous avez sauvegardé %s plateformes",
	["allPlateformsDeleted"] = "Vous avez supprimé toutes les plateformes de votre serveur",
	["serverConfigurationUpdated"] = "Vous avez mis à jour la configuration de votre serveur",
	["close"] = "Fermer",
	["car"] = "Voiture",
	["returnButton"] = "Retourner",
	["maxSpeed"] = "Vitesse maximum",
	["horsePower"] = "Puissance",
	["wheelsPerAxles"] = "Roues par axe",
	["posX"] = "Position - X",
	["angleX"] = "Angle - X",
	["posY"] = "Position - Y",
	["AngleY"] = "Angle - Y",
	["posZ"] = "Position - Z",
	["angleZ"] = "Angle - Z",
	["fov"] = "FOV",
	["useCustomNotification"] = "Utiliser les notifications personnalisées",
	["enterIntoVehicle"] = "Entrer dans le véhicule",
	["currency"] = "Devise",
	["adminCommand"] = "Commande Admin",
	["maxVehicle"] = "Véhicules maximum",
	["testTime"] = "Temps de test",
	["distanceToReturn"] = "Distance pour ranger",
	["underglowKey"] = "Touche des Néons",
	["activateBelt"] = "Activer le module de ceinture",
	["warningSound"] = "Son d'avertissement",
	["beltKey"] = "Touche de la ceinture",
	["activateEngine"] = "Activer le module de moteur",
	["engineKey"] = "Touche du moteur",
	["timeToLunchVehicle"] = "Temps de lancement du véhicule",
	["cantLeaveVehicleInMotion"] = "Vous ne pouvez pas sortir du véhicule en mouvement",
	["activateSmallAccident"] = "Activer les petit accidents",
	["activateEjectionAccident"] = "Activer les éjection lors des accidents",
	["lowerSpeedToExit"] = "Vitesse minimale pour sortir",
	["minDamageSmallAccident"] = "Dommages minimaux pour un petit accident",
	["minDamageEjectionAccident"] = "Dommages minimaux pour une éjection",
	["activateSpeedometer"] = "Activer le compteur de vitesse",
	["activateSimfphysSpeedometer"] = "Activer le compteur de vitesse simfphys pour les véhicules simfphys",
	["speedometerSize"] = "Taille du compteur de vitesse",
	["count"] = "Compte",
	["space"] = "Espace",
	["defaultSkin"] = "Skin par défaut",
	["choose"] = "Choisir",
	["skin"] = "Skin",
	["defaultColor"] = "Couleur par défaut",
	["chooseColor"] = "Choisir une couleur",
	["configureDefaultColor"] = "Configurer la couleur par défaut",
	["setDefaultColor"] = "DEFINIR LA COULEUR PAR DEFAUT",
	["canModifyBodygroup"] = "Peut modifier le bodygroup",
	["canModifySkin"] = "Peut modifier le skin",
	["canModifyColor"] = "Peut modifier la couleur",
	["canModifyUngerglow"] = "Peut modifier le néon",
	["canTestVehicle"] = "Peut tester le véhicule",
	["canBuyNitro"] = "Peut acheter le nitro",
	["priceToChangeBodygroups"] = "Prix pour changer les bodygroups",
	["priceToChangeSkins"] = "Prix pour changer les skins",
	["priceToChangeColors"] = "Prix pour changer les couleurs",
	["colors"] = "Couleurs",
	["nitro"] = "Nitro",
	["priceToChangeUnderglow"] = "Prix pour modifier un néon",
	["priceToBuyNitro"] = "Prix pour acheter un nitro",
	["pourcentSell"] = "Pourcentage de la vente",
	["noText"] = "Pas de texte",
	["invalidText"] = "Problème de texte",
	["language"] = "Langage",
	["speedUnit"] = "Unité de vitesse",
	["free"] = "GRATUIT",
	["buyForFree"] = "ACHETER GRATUITEMENT",
	["customizePrice"] = "Vous n'avez pas assez d'argent pour personnaliser ce véhicule",
	["notEnoughtMoney"] = "Vous n'avez pas assez d'argent pour faire cela",
	["rentVehc"] = "Vous avez loué le véhicule %s pour %s",
	["cantSwitch"] = "Vous ne pouvez pas changer de siège parce que vous avez mis votre ceinture",
	["canSellWithJob"] = "Peut louer un véhicule quand vous êtes en concessionnaire",
	["brakePower"] = "Puissance de freinage",
	["modifyRentVehicle"] = "Vous avez modifié les informations du véhicule",
	["refundRentVehicle"] = "Vous avez été remboursé pour %s",
	["turnSpeed"] = "Vitesse de rotation",
	["mass"] = "Masse",
	["owned"] = "POSSEDE",
	["cardealerJobSettings"] = "CONFIGURATION DU METIER CONCESSIONNAIRE",
	["cardealerJobDiscount"] = "Pourcentage du prix du véhicule lorsqu'il est vendu par un joueur",
	["minCommissionPrice"] = "Prix minimum de la commission",
	["maxCommissionPrice"] = "Prix maximum de la commission",
	["alreadyBought"] = "Vous ne pouvez pas acheter ce véhicule parce que vous le possédez déjà",
	["notGoodTeam"] = "Vous n'avez pas le bon métier pour faire cela",
	["rentPrice"] = "Prix de la location pour le concessionnaire",
	["vcmodTransfert"] = "Transfert de toutes les données du VCMOD",
	["wcdTransfert"] = "Transfert de toutes les données de WCD",
	["advancedTransfert"] = "Transfert de toutes les données de ACD",
	["modernTransfert"] = "Transfert de toutes les données de MODERN",
	["compatibilities"] = "PARAMÈTRES DE COMPATIBILITÉ",
	["transfertStart"] = "Vous avez commencé le transfert de données, cela peut prendre un peu de temps...",
	["alreadyTransfert"] = "Vous avez déjà transféré ces données",
	["problem"] = "Un problème est survenu, veuillez réessayer",
	["invoiceOptions"] = "Option(s)",
	["invoiceCarName"] = "Voiture",
	["invoiceOptionPrice"] = "Prix de l'option",
	["invoiceTotalPrice"] = "Prix Total",
	["sellerSignature"] = "Signature du vendeur",
	["buyerSignature"] = "Signature de l'acheteur",
	["invoice"] = "Facture",
	["seller"] = "Vendeur : %s",
	["chooseSkin"] = "Choisir un Skin",
	["chooseVehicle"] = "Choisir un Véhicule",
	["sign"] = "Signer",
	["print"] = "Imprimer",
	["openAdminConfiguration"] = "OUVRIR LA CONFIGURATION ADMIN",
	["selectVehicle"] = "Vous devez choisir un véhicule",
	["noVehicles"] = "Vous n'avez pas de véhicule à personnaliser",
	["toolName"] = "Configuration des NPC",
	["toolDesc"] = "Placer le NPC et configurez-le",
	["toolLeft1"] = "Appuyez sur clic gauche pour faire apparaître les plateformes",
	["toolLeft2"] = "Appuyez sur clic gauche pour faire spawn ou modifier un NPC.",
	["toolRight1"] = "Appuyez sur clic droit pour supprimer la dernière plateforme placée",
	["toolRight2"] = "Clic droit sur un NPC pour le supprimer",
	["toolReload1"] = "Appuyer sur RECHARGER pour sauvegarder vos plateformes",
	["toolReload2"] = "Appuyer sur RECHARGER pour recharger tous les NPCs",
	["invoiceLimit"] = "Vous avez atteint le nombre maximum de facture",
	["stand"] = "STAND",
	["pressE"] = "Appuyer sur E",
	["yourCommission"] = "Votre commission",
	["rentVehicle"] = "Louer le véhicule pour %s",
	["saveRentInformation"] = "CUSTOMISER",
	["startEngineProblem"] = "Il y a un problème de moteur au démarrage de votre véhicule",
	["giveVehicle"] = "Vous avez donné le véhicule %s au SteamID %s",
	["areYouSure"] = "ETES VOUS SURE ?",
	["carDealerJobConfig"] = "Nom du métier concessionnaire",
	["reset"] = "RÉINITIALISER",
	["acceptedInvoice"] = "%s viens d'acheter le véhicule %s pour %s",
	["cantAcceptYourInvoice"] = "Vous ne pouvez pas accepter votre propre facture",
	["import"] = "Importer",
	["standTitle"] = "VENDEUR",
	["sellVehicle"] = "Vente de vehicule",
	["rentVehicleSpace"] = "Vous n'avez pas la place de louer le véhicule",
	["nitroKey"] = "Touche du Nitro",
	["nitroSpeed"] = "Multiplicateur de la vitesse du Nitro",
	["minSpeedNitro"] = "Vitesse minimum pour activer le Nitro",
	["cantSell"] = "Vous ne pouvez pas vendre ce véhicule",
	["cantSellSetting"] = "Impossible de vendre le véhicule",
	["playersManagement"] = "Gestion des joueurs",
    ["open"] = "Ouvrir",
    ["searchDisconnected"] = "JOUEUR DÉCONNECTÉ",
    ["connectedPlayers"] = "JOUEURS CONNECTÉS",
    ["selectedPlayer"] = "JOUEUR SÉLECTIONNÉ",
    ["allVehicles"] = "TOUS VEHICULES",
    ["adminMenuPlayer"] = "ADMIN MENU - JOUEURS",
    ["adminMenuPlayerDesc"] = "Gérer les véhicules achetés par vos joueurs",
    ["modifiedInformation"] = "Vous avez modifié les informations de %s",
    ["searchSteamId2"] = "Rechercher par SteamID / SteamID64",
    ["refreshList"] = "ACTUALISER LA LISTE",
    ["searchPlayer"] = "RECHERCHER UN JOUEUR",
    ["savePlayerInfo"] = "SAUVEGARDER LES INFORMATIONS DU JOUEUR",
	["nitroConfig"] = "CONFIGURATION DE LA NITRO",
	["nitroDuration"] = "Durée de la nitro",
	["nitroCooldowns"] = "Temps de rechargement du nitro",
	["cooldownsNitroNotify"] = "Votre nitro n'est pas prête prochaine charge dans %ss",
	["alreadyRented"] = "Vous avez déjà loué ce véhicule",
	["sellVehicleRented"] = "Vous avez recu %s pour la vente du véhicule %s",
	["boatSettingText"] = "Le véhicule est-il un bateau ?",
	["disableBeltVehicle"] = "Désactiver le module de ceinture pour ce véhicule",
	["disableEngineVehicle"] = "Désactiver le module de moteur pour ce véhicule",
} 
--addons/realisticcardealer/lua/realistic_cardealer/languages/sh_language_tr.lua:
RCD = RCD or {}
RCD.Language = RCD.Language or {}

RCD.Language["tr"] = {
	["undefined"] = "Atanmamış",
	["adminMenuConfig"] = "ADMIN MENU - CONFIGURATION",
	["configureGroupsVehicles"] = "Grupları ve arabaları düzenle",
	["groups"] = "GRUPLAR",
	["vehicles"] = "ARABALAR",
	["createGroup"] = "YENİ GRUP OLUŞTUR",
	["createVehicle"] = "YENİ ARABA OLUŞTUR",
	["dealerConfiguration"] = "SATICI YAPILANDIRMA",
	["enterDealerName"] = "Satıcı ismini giriniz",
	["groupsConfig"] = "Grup configleri",
	["newPlateforms"] = "YENİ DOĞMA NOKTASI EKLE",
	["deletePlateforms"] = "TÜM DOĞMA NOKTALARINI SİL",
	["deleteNPC"] = "NPC'İ SİL",
	["saveInformations"] = "BİLGİLERİ KAYDET",
	["configureGroups"] = "Grup bilgilerini yapılandır",
	["rankAccess"] = "RÜTBE ERİŞİMİ",
	["jobAccess"] = "MESLEK ERİŞİMİ",
	["enterGroupName"] = "Grup ismini giriniz",
	["cancel"] = "İPTAL",
	["validateCreateGroup"] = "Grup oluştur ve doğrula",
	["configureVehicleInformations"] = "Araç bilgilerini yapılandırın",
	["preview"] = "ÖNBAKIŞ",
	["chooseVehicleClass"] = "Arabanın sınıfını seçin...",
	["chooseVehicleGroup"] = "Arabanın grubunu seçin...",
	["enterVehicleName"] = "Araba ismi girin",
	["enterVehiclePrice"] = "Arabanın fiyatını girin",
	["vehicleView"] = "Arabaya Öngörüşü",
	["generalSettings"] = "GENEL AYARLAR",
	["priceSettings"] = "FİYAT AYARLADI",
	["validateCreateVehicle"] = "ARABA OLUŞTUR VE DOĞRULA",
	["configureAddon"] = "Tüm eklentileri Yapılandırın",
	["beltConfig"] = "BELT CONFIG",
	["engineConfig"] = "MOTOR CONFIG",
	["speedometerConfig"] = "HIZGÖSTERGESİ CONFIG",
	["driveConfig"] = "SÜRÜŞ CONFIG",
	["configureCarDealers"] = "ARABA SATICILARINI YAPILANDIR",
	["validateSaveSettings"] = "Ayarları doğrula ve kaydet",
	["underglow"] = "Underglow",
	["skins"] = "Ciltler",
	["bodygroups"] = "Bodygroups",
	["carDealer"] = "Araba Satıcısı",
	["spawnVehicle"] = "ARABAYI OLUŞTUR",
	["bringBack"] = "GERİ GÖTÜR",
	["testVehicle"] = "ARABAYI TEST ET",
	["customize"] = "Özelleştir (%s)",
	["sell"] = "SAT",
	["buyVehicle"] = "Satın al",
	["customizationTitle"] = "ÖZELLEŞTİRME",
	["mainMenuTitle"] = "ANA MENÜ",
	["modifyVehicle"] = "ARABANI ÖZELLEŞTİR",
	["buySaleVehicles"] = "ARABALARI SAT VEYA SATIN AL",
	["vehicleOwned"] = "ARABA ALINDI",
	["vehicleForSale"] = "SATILIK ARABA",
	["allowed"] = "İZİN VERİLDİ",
	["cantCustomizeVehicle"] = "Bu aracı özelleştiremezsiniz",
	["testDrive"] = "Test Drive",
	["testDriveEnd"] = "Test sürüşü şu zaman içerisinde biticek %ss",
	["addonNotInstalled"] = "%s eklenti yüklenmemiş",
	["vehicleTooFar"] = "Araban özelleştirmek için çok uzakta",
	["customizeVehicleText"] = "Aracını şu fiyata özelleştirdin %s",
	["invalidUsergroup"] = "Bunu yapmak için doğru rütbede değilsin",
	["invalidJob"] = "Bunun için doğru meslekte değilsin",
	["cantAfford"] = "Bunu alıcak paran yok",
	["buyVehicleText"] = "Bu arabayı %s şu fiyata satın aldın %s",
	["cantReturnVehicle1"] = "Aracınız bittiğinde satamazsınız",
	["sellVehicleText"] = "Arabanı %s şu fiyata sattın %s",
	["testVehicleText"] = "Test sürüşünü başlattın, şu kadar vaktin var %ss",
	["vehicleAlreadyExited"] = "Bu araba zaten dışarda",
	["maxVehicleLimitReached"] = "Araba oluşturmak için sınıra ulaştın",
	["cantSpawnVehicle2"] = "Bir test sırasında bir araç çıkarabilirsiniz",
	["noPlaceAvailable"] = "Şuan hiçbir yer müsait değil, sonra tekrar gelin",
	["vehicleExitedText2"] = "Arabanı çıkardın %s",
	["returnAroundVehicles"] = "Etrafınızdaki araçları hemen uzaklaştırdınız.",
	["noVehiclesAround"] = "Etrafınızda araba yok",
	["vehicleTooFarText"] = "Araban geri dönmek için çok uzakta",
	["vehicleReturned2"] = "Arabanı geri çağırdın",
	["carDealerNotConfigured"] = "Araç satıcısı henüz ayarlanmamış yetkil ile görüşün.",
	["npcTooFar"] = "Bu eylemi yapmak için npc den çok uzaksın",
	["npcNotOwnedVehicle"] = "Npc herhangi bi araca sahip değil",
	["cantExitVehicle2"] = "Araba sabit olmadığı için dışarı çıkamazsınız.",
	["cantExitVehicle3"] = "Emniyet kemeriniz olduğu için arabadan çıkamazsınız.",
	["invalidGroupName"] = "Grup adı geçersiz",
	["vehicleGroupEdited"] = "Grubu düzenlediniz %s",
	["vehicleGroupCreated"] = "Yeni araba grubu oluşturdunuz %s",
	["invalidGroupVehicle"] = "Araba grubu geçersiz",
	["vehicleGroupDeleted"] = "Araba grubunu sildiniz #%s",
	["invalidVehicleClass"] = "Araba sınıfı geçersiz",
	["invalidVehicleName"] = "Araba ismi geçersiz",
	["invalidVehiclePrice"] = "Araba fiyatı geçersiz",
	["vehicleEdited"] = "Arabayı düzenledin %s",
	["vehicleCreated"] = "Yeni araba oluşturdun %s",
	["vehicleDeleted"] = "Arabayı sildin #%s",
	["pnjUpdated"] = "Npc'i düzenledin %s",
	["pnjDeleted"] = "Npc'i sildin #%s",
	["plateformEditMode"] = "Şu anda platformlarınızı yerleştirmek için düzenleme modundasınız",
	["beenSaved"] = "%s platformlarını kayıt ettiniz",
	["allPlateformsDeleted"] = "Sunucudaki bütün platformları sildin",
	["serverConfigurationUpdated"] = "Sunucunuzun yapılandırmasını güncellediniz",
	["close"] = "Kapat",
	["car"] = "Araba",
	["returnButton"] = "Geri",
	["maxSpeed"] = "Maksimum Hız",
	["horsePower"] = "At Hızı",
	["wheelsPerAxles"] = "Aks başına tekerlekler",
	["posX"] = "Pozisyon - X",
	["angleX"] = "Angle - X",
	["posY"] = "Pozisyon - Y",
	["AngleY"] = "Angle - Y",
	["posZ"] = "Pozisyon - Z",
	["angleZ"] = "Angle - Z",
	["fov"] = "FOV",
	["useCustomNotification"] = "Özel bildirim kullanın",
	["enterIntoVehicle"] = "Arabaya binin",
	["currency"] = "Geçerli",
	["adminCommand"] = "Yönetici komudu",
	["maxVehicle"] = "Maksimum araba",
	["testTime"] = "Test Süresi",
	["distanceToReturn"] = "Dönüş mesafesi",
	["underglowKey"] = "Underglow Anahtarı",
	["activateBelt"] = "Kemer modülünü etkinleştirin",
	["warningSound"] = "Uyarı sesi",
	["beltKey"] = "Koltuk kemeri tuşu",
	["activateEngine"] = "Motor modülünü etkinleştirin",
	["engineKey"] = "Motor tuşu",
	["timeToLunchVehicle"] = "Arabayı çalıştırma zamanı",
	["cantLeaveVehicleInMotion"] = "Aracı Hareket Halinde Bırakamazsın",
	["activateSmallAccident"] = "Küçük kazaları etkinleştirin",
	["activateEjectionAccident"] = "Fırlatma kazalarını etkinleştirin",
	["lowerSpeedToExit"] = "Çıkmak için yavaşlayın",
	["minDamageSmallAccident"] = "Ufak kazalar için minimum hasar",
	["minDamageEjectionAccident"] = "Fırlatma kazaları için minimum hasar",
	["activateSpeedometer"] = "Hız göstergesini etkinleştirin",
	["activateSimfphysSpeedometer"] = "Simfphys hız göstergelerini simfphys araçları için etkinleştirin",
	["speedometerSize"] = "Hız göstergesinin büyüklüğü",
	["count"] = "Say",
	["space"] = "Boşluk",
	["defaultSkin"] = "Varsayılan Cilt",
	["choose"] = "Seç",
	["skin"] = "Cilt",
	["defaultColor"] = "Varsayılan Renk",
	["chooseColor"] = "Renk seçiniz",
	["configureDefaultColor"] = "Varsayılan rengi yapılandırın",
	["setDefaultColor"] = "VARSAYILAN RENGİ SEÇİN",
	["canModifyBodygroup"] = "Gövde grubunu değiştirebilir",
	["canModifySkin"] = "Cildi değiştirebilir",
	["canModifyColor"] = "Rengi değiştirebilir",
	["canModifyUngerglow"] = "Underglowu değiştirebilir",
	["canTestVehicle"] = "Araç test edebilir",
	["canBuyNitro"] = "Nitro satın alabilir",
	["priceToChangeBodygroups"] = "Gövde grubunu değiştirmek için fiyat",
	["priceToChangeSkins"] = "Cildi değiştirmek için fiyat",
	["priceToChangeColors"] = "Rengi değiştirmek için fiyat",
	["colors"] = "Renkler",
	["nitro"] = "Nitro",
	["priceToChangeUnderglow"] = "Underglow değiştirmek için fiyat",
	["priceToBuyNitro"] = "Nitroyu satın almak için fiyat",
	["pourcentSell"] = "satış yüzdesi",
	["noText"] = "Yazı yok",
	["invalidText"] = "Geçersiz yazı",
	["language"] = "Dil",
	["speedUnit"] = "hız birimi",
	["free"] = "BEDAVA",
	["buyForFree"] = "ÜCRETSİZ SATIN AL",
	["customizePrice"] = "Bu aracı kişiselleştirmek için yeterli paranız yok",
	["notEnoughtMoney"] = "Bunu yapmak için yeterli paran yok",
	["rentVehc"] = "Bu aracı %s şu fıyata kiraladın %s",
	["cantSwitch"] = "Emniyet kemeriniz takılı olduğu için koltuk değiştiremezsiniz.",
	["canSellWithJob"] = "Araba satıcısı işindeyken aracı kiralayabilir",
	["brakePower"] = "Fren gücü",
	["modifyRentVehicle"] = "Araç bilgilerini değiştirdiniz",
	["refundRentVehicle"] = "Geri ödeme aldınız %s",
	["turnSpeed"] = "Dönüş Hızı",
	["mass"] = "Yığın",
	["owned"] = "ALINDI",
	["cardealerJobSettings"] = "ARAÇ SATICISI İŞ YAPILANDIRMASI",
	["cardealerJobDiscount"] = "Aracın bir oyuncu tarafından satıldığındaki yüzde fiyatı",
	["minCommissionPrice"] = "Minimum komisyon fiyatı",
	["maxCommissionPrice"] = "Maksimum komisyon fiyatı",
	["alreadyBought"] = "Bu araca zaten sahip olduğunuz için satın alamazsınız.",
	["notGoodTeam"] = "Bunu yapmak için iyi bir işin yok",
	["rentPrice"] = "Araba satıcısı işi için kira fiyatı",
	["vcmodTransfert"] = "Tüm verileri VCMOD'dan aktarın",
	["wcdTransfert"] = "Tüm verileri WCD'den aktarın",
	["advancedTransfert"] = "ACD'den tüm verileri aktarın",
	["modernTransfert"] = "MODERN'den tüm verileri aktarın",
	["compatibilities"] = "UYUMLULUK AYARLARI",
	["transfertStart"] = "Veri aktarımını başlattınız, biraz zaman alabilir...",
	["alreadyTransfert"] = "Bu verileri zaten aktardınıza",
	["problem"] = "Bir sorun oluştu, lütfen tekrar deneyin",
	["invoiceOptions"] = "Seçenek(ler)",
	["invoiceCarName"] = "Araba fiyatı",
	["invoiceOptionPrice"] = "Seçenek fiyatı",
	["invoiceTotalPrice"] = "Toplam fiyat",
	["sellerSignature"] = "Satıcı imzası",
	["buyerSignature"] = "alıcı imzası",
	["invoice"] = "Fatura",
	["seller"] = "Satıcı : %s",
	["chooseSkin"] = "Cilt seçin",
	["chooseVehicle"] = "Araba seçin",
	["sign"] = "İmza",
	["print"] = "Yazdır",
	["openAdminConfiguration"] = "Yönetici menüsünü açın",
	["selectVehicle"] = "Bir araba seçmen lazım",
	["noVehicles"] = "Özelleştiricek araban yok",
	["toolName"] = "Npc'i kur",
	["toolDesc"] = "Npc'i kur ve yapılandır",
	["toolLeft1"] = "Platfrom oluşturmak için Left-Click tuşuna basın",
	["toolLeft2"] = "Npc'i kurup yapılandırmak için Left-Click tuşuna basın",
	["toolRight1"] = "Son platformu silmek için Right-Click tuşunu kullanın",
	["toolRight2"] = "Npc'i silmek için Right-Click tuşuna basın",
	["toolReload1"] = "Platformları kaydetmek için RELOAD tuşuna basın",
	["toolReload2"] = "Bütün Npc leri yeniden yüklemek için RELOAD tuşuna basın",
	["invoiceLimit"] = "Fatura limitine ulaştın",
	["stand"] = "DURMAK",
	["pressE"] = "E BAS",
	["yourCommission"] = "Komisyonun",
	["rentVehicle"] = "Şu fiyata araba kirala %s",
	["saveRentInformation"] = "BİLGİYİ KAYDET",
	["startEngineProblem"] = "Aracınızı çalıştırırken motor sorunu var",
	["giveVehicle"] = "bu aracı %s şu kişiye verdiniz SteamID %s",
	["carDealerJobConfig"] = "Araç satıcısının meslek adı",
	["areYouSure"] = "EMİN MİSİN?",
	["reset"] = "SIFIRLA",
	["acceptedInvoice"] = "%s bir araç satın aldı %s şu fiyata %s",
	["cantAcceptYourInvoice"] = "Kendi faturanı kabul edemessin",
	["import"] = "İçe aktarmak",
	["standTitle"] = "ARAÇ SATICISI",
	["sellVehicle"] = "Aracı sat",
	["rentVehicleSpace"] = "Araç kiralamak için yeriniz yok",
	["nitroKey"] = "Nitro tuşu",
	["nitroSpeed"] = "Nitro hız çarpanı",
	["minSpeedNitro"] = "Nitroyu kullanmak için minimum hız",
	["cantSell"] = "Bu aracı satamassın",
	["cantSellSetting"] = "Bu aracı satamassın",
	["playersManagement"] = "Oyuncu yönetimi",
	["open"] = "Açık",
	["searchDisconnected"] = "BAĞLANTISI KESİLMİŞ OYUNCULAR",
	["connectedPlayers"] = "AKTİF OYUNCULAR",
	["selectedPlayer"] = "SEÇİLEN OYUNCU",
	["allVehicles"] = "Bütün Araçlar",
	["adminMenuPlayer"] = "YÖNETİCİ MENÜSÜ - OYUNCULAR",
	["adminMenuPlayerDesc"] = "Oyuncularınız tarafından satın alınan araçları yönetin",
	["modifiedInformation"] = "Bu şeyin bilgisini değiştirdin %s",
	["searchSteamId2"] = "SteamID / SteamID64 e göre ara",
	["refreshList"] = "LİSTEYİ YENİLE",
	["searchPlayer"] = "OYUNCU ARAMA",
	["savePlayerInfo"] = "OYUNCU BİLGİSİNİ KAYDET",
	["nitroConfig"] = "NITRO CONFİĞİ",
	["nitroDuration"] = "Nitro süresi",
	["nitroCooldowns"] = "Nitro yenilenme süresi",
	["cooldownsNitroNotify"] = "Nitron hazır değil şu süre zarfında hazır olcaktır %ss",
	["alreadyRented"] = "Bu aracı zaten kiraladın",
	["sellVehicleRented"] = " %s aracın satışı için şu kadar aldınız %s",
	["boatSettingText"] = "Bu deniz taşıtımı?",
	["disableBeltVehicle"] = "Bu araba için kemer sistemini devre dışı bırakın",
	["disableEngineVehicle"] = "Bu araba için motor modülünü devre dışı bırakın",
}
--addons/realisticcardealer/lua/realistic_cardealer/shared/sh_functions.lua:
--[[ Make sure sentence exist and also langage exist]]
  local SERVER = SERVER
 local CLIENT = CLIENT
function RCD.GetSentence(key)
    local result = "Lang Problem"
    local lang = RCD.GetSetting("lang", "string")

    if istable(RCD.Language) && RCD.Language[lang] && RCD.Language[lang][key] then
        result = RCD.Language[lang][key]
    elseif istable(RCD.Language) && RCD.Language["en"] && RCD.Language["en"][key] then
        result = RCD.Language["en"][key]
    end

    return result
end

--[[ Convert a number to a format number ]]
function RCD.formatMoney(money)
    if not isnumber(tonumber(money)) then return 0 end
    money = string.Comma(money)

    return isfunction(RCD.Currencies[RCD.GetSetting("currency", "string")]) and RCD.Currencies[RCD.GetSetting("currency", "string")](money) or money
end

--[[ Get the vehicle spawn function ]]
function RCD.GetVehicleAddon(class)
    for k,v in pairs(list.Get("simfphys_vehicles") or {}) do
        if k != class then continue end

        return "simfphys"
    end

    return "default"
end

--[[ Get all vehicle groups ]]
function RCD.GetAllVehicleGroups()
    return (RCD.AdvancedConfiguration["groupsList"] or {})
end

-- [[ Get all vehicles list ]]
function RCD.GetAllVehicles()
    local vehicles = {}

    for k,v in ipairs(RCD.VehiclesListNames) do
        table.Merge(vehicles, list.Get(v))
    end
    return vehicles
end

--[[ Get all vehicles ]]
function RCD.GetVehicles()
    return RCD.AdvancedConfiguration["vehiclesList"] or {}
end

function RCD.GetVehicleParams(vehicleId, key)
    local vehicleTable = RCD.GetVehicles()[vehicleId]
    if not istable(vehicleTable) then return end

    local options = vehicleTable["options"] or {}

    return (options[key] or false)
end

--[[ Get networked variables ]]
function RCD.GetNWVariables(key, ent)
    return (IsValid(ent) and (ent.RCDNWVariables or {}) or (RCD.NWVariables or {}))[key]
end

--[[ Get the vehicle speed with the unit conversion ]]
function RCD.GetSpeedVehicle(ent, unitName)
    if not IsValid(ent) then return end

    local vehc = RCD.GetVehicle(ent)
    
    local speed = 0
    if IsValid(vehc) then
        speed = vehc:GetVelocity():Length()
    else
        speed = ent:GetVelocity():Length()
    end
    
    local mult = RCD.UnitConvertion[unitName]
    if not isnumber(mult) then mult = 0.09144 end

	local unit = math.Round(speed * mult)

    return unit
end

--[[ Made a function compatible with all vehicles addons]]
function RCD.GetVehicle(ent)
    if not IsValid(ent) then return end
    
    --[[ Check if the player drive the vehicle or is on a passenger seat ]]
    local vehc = ent:GetParent()
    ent = (IsValid(vehc) and vehc or ent)

    if RCD.VehicleBlacklisted[ent:GetClass()] or not RCD.IsVehicle(ent) then return end

    return ent
end

local PLAYER = FindMetaTable("Player")

--[[ This function permite to add compatibility with other gamemode ]]
function PLAYER:RCDGetMoney()
    if DarkRP then
        return self:getDarkRPVar("money")
    elseif ix then
        return (self:GetCharacter() != nil and self:GetCharacter():GetMoney() or 0)
    elseif nut then
        return (self:getChar() != nil and self:getChar():getMoney() or 0)
    end

    return 0
end

function PLAYER:RCDIsVehicleSpawned(vehicleId)  
    if SERVER then
        self.RCD = self.RCD or {}

        self.RCD["vehicleSpawned"] = self.RCD["vehicleSpawned"] or {}
        return self.RCD["vehicleSpawned"][vehicleId]
    else
        RCD.ClientTable["vehicleSpawned"] = RCD.ClientTable["vehicleSpawned"] or {}
        return RCD.ClientTable["vehicleSpawned"][vehicleId]
    end
end

function PLAYER:RCDGetAllVehiclesSpawned()  
    if SERVER then
        self.RCD = self.RCD or {}

        self.RCD["vehicleSpawned"] = self.RCD["vehicleSpawned"] or {}
        return self.RCD["vehicleSpawned"]
    else
        RCD.ClientTable["vehicleSpawned"] = RCD.ClientTable["vehicleSpawned"] or {}
        return RCD.ClientTable["vehicleSpawned"]
    end
end

--[[ Get vehicle with his unique id ]]
function RCD.GetVehicleInfo(vehicleId)
    vehicleId = tonumber(vehicleId)
    local vehicleTable = (SERVER and RCD.AdvancedConfiguration["vehiclesList"] or RCD.ClientTable["vehiclesTable"]) or {}

    return vehicleTable[vehicleId] or {}
end

--[[ Get vehicle group with his unique id ]]
function RCD.GetVehicleGroupInfo(groupId)
    RCD.AdvancedConfiguration["groupsList"] = RCD.AdvancedConfiguration["groupsList"] or {}
    RCD.AdvancedConfiguration["groupsList"][groupId] = RCD.AdvancedConfiguration["groupsList"][groupId] or {}
    
    return RCD.AdvancedConfiguration["groupsList"][groupId]
end

--[[ Check if the player can buy the vehicle ]]
function PLAYER:RCDCanAccessVehicle(vehicleId)
    local vehicleTable = RCD.GetVehicleInfo(vehicleId)
    if not istable(vehicleTable) then return end
    
    local groupId = vehicleTable["groupId"]
    if not isnumber(groupId) then return false end

    if SERVER && not self:RCDCheckNPCInfo(groupId) then return end

    local groupTable = RCD.GetVehicleGroupInfo(groupId)
    local rankAccess = groupTable["rankAccess"] or {}
    local jobAccess = groupTable["jobAccess"] or {}

    if not rankAccess["*"] then
        local rank = self:GetUserGroup()

        if not rankAccess[rank] then if SERVER then self:RCDNotification(5, RCD.GetSentence("invalidUsergroup")) end return false end
    end
    
    if not jobAccess["*"] then
        local job = team.GetName(self:Team())

        if not jobAccess[job] then if SERVER then self:RCDNotification(5, RCD.GetSentence("invalidJob")) end return false end
    end
    
    local canAccess = hook.Run("RCD:CanAccessVehicle", self, vehicleTable, vehicleId)
    if canAccess == false then return end

    return true, vehicleTable
end

function PLAYER:RCDCalculateSellPrice(vehiclesTable, vehicleId)
    local vehicleTable = vehiclesTable[vehicleId]
    if not istable(vehicleTable) then return end

    local discount = 0
    if SERVER then
        local boughTable = self.RCD["vehicleBought"] or {}
        discount = self.RCD["vehicleBought"][vehicleId] and tonumber(self.RCD["vehicleBought"][vehicleId]["discount"]) or 0
    else
        local boughTable = RCD.ClientTable["vehiclesBought"] or {}
        discount = RCD.ClientTable["vehiclesBought"][vehicleId] and tonumber(RCD.ClientTable["vehiclesBought"][vehicleId]["discount"]) or 0
    end

    local price = 0
    if discount > 0 then
        price = discount*(RCD.GetSetting("generalPourcentSell", "number")/100)
    else
        price = (vehicleTable["price"] or 0)*(RCD.GetSetting("generalPourcentSell", "number")/100)
    end

    return price
end

function RCD.GetSetting(key, settingType)
    if settingType == "number" then
        return tonumber(RCD.DefaultSettings[key]) or 0
    elseif settingType == "string" then
        return tostring(RCD.DefaultSettings[key]) or ""
    elseif settingType == "boolean" then
        return tobool(RCD.DefaultSettings[key]) or false
    elseif settingType == "table" then
        return RCD.DefaultSettings[key] or {}
    end

    return RCD.DefaultSettings[key]
end

--[[ Get name of the group vehicle ]]
function RCD.VehicleGroupGetName(id)
    RCD.AdvancedConfiguration["groupsList"] = RCD.AdvancedConfiguration["groupsList"] or {}
    if not istable(RCD.AdvancedConfiguration["groupsList"][id]) then return end

    return RCD.AdvancedConfiguration["groupsList"][id]["name"]
end

--[[ Calcul the price of all customizations ]]
function RCD.GetPriceCustomization(vehicleOptions, oldCustomization, customization)
    if not istable(vehicleOptions) then return 0 end

    local priceBodygroup = vehicleOptions["priceBodygroup"] or 0
    local priceColor = vehicleOptions["priceColor"] or 0
    local priceNitro = vehicleOptions["priceNitro"] or 0
    local priceSkin = vehicleOptions["priceSkin"] or 0
    local priceUnderglow = vehicleOptions["priceUnderglow"] or 0

    local price = 0
    if istable(customization["vehicleColor"]) then
        local oldVehicleColor = oldCustomization["vehicleColor"] or {}

        if istable(oldVehicleColor) && (customization["vehicleColor"].r != oldVehicleColor.r or customization["vehicleColor"].g != oldVehicleColor.g or customization["vehicleColor"].b != oldVehicleColor.b) then
            price = price + vehicleOptions["priceColor"]
        end
    end

    if isnumber(customization["vehicleSkin"]) then
        if customization["vehicleSkin"] != 0 && customization["vehicleSkin"] != oldCustomization["vehicleSkin"] then
            price = price + vehicleOptions["priceSkin"]
        end
    end
    
    if istable(customization["vehicleUnderglow"]) then
        local oldUngerGlow = oldCustomization["vehicleUnderglow"] or {}
        
        if istable(oldUngerGlow) && (customization["vehicleUnderglow"].r != oldUngerGlow.r or customization["vehicleUnderglow"].g != oldUngerGlow.g or customization["vehicleUnderglow"].b != oldUngerGlow.b) then
            price = price + vehicleOptions["priceUnderglow"]
        end
    end
    
    if istable(customization["vehicleBodygroups"]) then
        local oldBodygroup = oldCustomization["vehicleBodygroups"] or {}
        
        for k,v in pairs(customization["vehicleBodygroups"]) do
            if customization["vehicleBodygroups"][k] != oldBodygroup[k] then
                price = price + vehicleOptions["priceBodygroup"]
            end
        end
    end
    
    if isnumber(customization["vehicleNitro"]) then
        if customization["vehicleNitro"] != oldCustomization["vehicleNitro"] then
            price = price + (priceNitro*customization["vehicleNitro"])
        end
    end
    
    return price
end

function RCD.IsVehicle(ent)
    if not IsValid(ent) then return false end
    if not ent:IsVehicle() && ent:GetClass() != "gmod_sent_vehicle_fphysics_base" then return false end

    return true
end
--addons/realisticcardealer/lua/realistic_cardealer/vgui/cl_slider_vehc.lua:
local PANEL = {}

function PANEL:Init()
    self:SetSize(RCD.ScrH*0.3, RCD.ScrH*0.027)
    self.RCDText = RCD.GetSentence("invalidText")
    self.RCDMax = 170
    self.RCDValue = 165
    self.RCDLerp = 0
end

function PANEL:SetMaxValue(value)
    self.RCDMax = value
end

function PANEL:SetActualValue(value)
    self.RCDValue = value
    /* 1e33a7ead939168e562b8cfae23bd45cc807078336eab80ace335f137f8cb149 */
end

function PANEL:Paint(w,h)
    draw.DrawText(self.RCDText, "RCD:Font:06", 0, 0, RCD.Colors["white"], TEXT_ALIGN_LEFT)
    draw.SimpleText(self.RCDValue, "RCD:Font:07", w-(h/2), h/2, RCD.Colors["white80"], TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

    local pourcent = math.Clamp(self.RCDValue*100/self.RCDMax/100, 0, 1)
    
    self.RCDLerp = Lerp(FrameTime()*5, self.RCDLerp, (pourcent*(w-h*1.2)))
    /* 76561198447872548 */

    draw.RoundedBox(0, 0, h-RCD.ScrH*0.0055, w-h*1.2, RCD.ScrH*0.0055, RCD.Colors["white30"])
    draw.RoundedBox(0, 0, h-RCD.ScrH*0.0055, self.RCDLerp, RCD.ScrH*0.0055, RCD.Colors["purple"])
    draw.RoundedBox(0, w-h, 0, h, h, RCD.Colors["white30"])
end

function PANEL:SetText(text)
    self.RCDText = text
end

derma.DefineControl("RCD:SlideVehicle", "RCD SlideVehicle", PANEL, "DPanel")
--addons/realisticcardealer/lua/realistic_cardealer/vgui/cl_colormixer.lua:
local PANEL = {}
  

local function slider()
    local slider = vgui.Create("Panel")
    slider.BarX = 0
    slider.Material = RCD.Materials["colorsBar"]

    function slider:PrePaint(w, h)
        RCD.RoundedTextureRect(4, 0, 0, w, h, self.Material, RCD.Colors["white"])
    end

    function slider:Paint(w, h)
        self:PrePaint(w, h)
        
        RCD.MaskStencil(function()
            RCD.DrawCircle(self.BarX-h/2, h/2, h*0.3, h*0.3, 360, RCD.Colors["white"])
        end, function()
            RCD.DrawCircle(self.BarX-h/2, h/2, h*0.4, h*0.4, 360, RCD.Colors["white"])
        end, true)
    end

    function slider:OnCursorMoved(x, y)
        if not input.IsMouseDown(MOUSE_LEFT) then return end

        local color = self:GetPosColor(x, y)
        if color then
            self.Color = color
            self:OnChange(color)
        end

        self.BarX = math.Clamp(x, 0, self:GetWide()-2)
    end

    function slider:GetBarX()
        return self.BarX/self:GetWide()
    end

    function slider:SetBarX(x)
        self.BarX = math.Clamp(self:GetWide()*x, 0, self:GetWide()-2)
    end

    function slider:OnMousePressed(code)
        self:MouseCapture(true)
        self:OnCursorMoved(self:CursorPos())
    end

    function slider:OnMouseReleased(code)
        self:MouseCapture(false)
        self:OnCursorMoved(self:CursorPos())
    end

    function slider:GetPosColor(x, y)
        local w = x/self:GetWide()*self.Material:Width()
        local h = y/self:GetTall()*self.Material:Height()

        w = math.Clamp(w, 0, self.Material:Width()-1)
        h = math.Clamp(h, 0, self.Material:Height()-1)

        return self.Material:GetColor(w, h), w, h
    end

    return slider
end

function PANEL:Init()
    self:SetSize(RCD.ScrW*0.2, RCD.ScrH*0.35)

    self.colorCube = vgui.Create("DColorCube", self)
    self.colorCube:Dock(FILL)
    self.colorCube.PaintOver = nil
    self.colorCube.Knob:SetSize(10, 10)
    self.colorCube.Knob.Paint = function(panel, w, h)
        RCD.MaskStencil(function()
            RCD.DrawCircle(w/2, h/2, w/2.5, 0, 360, RCD.Colors["white"])
        end, function()
            RCD.DrawCircle(w/2, h/2, w/2, 0, 360, RCD.Colors["white"])
        end, true)
    end

    local colorCube = self.colorCube
    
    function colorCube.BGValue:Paint(w, h)
        RCD.MaskStencil(function()
            RCD.DrawRoundedRect(4, 0, 0, w, h)
        end, function()
            self:PaintAt(0, 0, w, h)
        end)
    end

    function colorCube.BGSaturation:Paint(w, h)
        RCD.MaskStencil(function()
            RCD.DrawRoundedRect(4, 0, 0, w, h)
        end, function()
            self:PaintAt(0, 0, w, h)
        end)
    end
    
    function colorCube:Paint(w, h)
        RCD.MaskStencil(function()
            RCD.DrawRoundedRect(4, 0, 0, w, h)
        end, function()
            surface.SetDrawColor(self.m_BaseRGB.r, self.m_BaseRGB.g, self.m_BaseRGB.b, 255)
            self:DrawFilledRect()
        end)
    end
    
    local barsContainer = vgui.Create("Panel", self)
    barsContainer:Dock(BOTTOM)
    barsContainer:DockMargin(0, 0, 0, -RCD.ScrH*0.004)
    barsContainer:SetZPos(1)
    barsContainer:InvalidateParent(true)
    barsContainer:SetTall(RCD.ScrH*0.026)

    local colorBar = slider()
    colorBar:SetParent(barsContainer)
    colorBar:Dock(TOP)
    colorBar:InvalidateParent(true)
    colorBar:DockMargin(0, RCD.ScrH*0.004, 0, -RCD.ScrH*0.004)
    colorBar:SetTall(barsContainer:GetTall()*0.4)

    function colorBar:OnChange(color)
        local sX, sY = colorCube:GetSlideX(), colorCube:GetSlideY()
        colorCube:SetColor(color)

        colorCube:SetSlideX(sX)
        colorCube:SetSlideY(sY)
    end

    local saturationBar = slider()
    saturationBar:SetParent(barsContainer)
    saturationBar:Dock(BOTTOM)
    saturationBar:InvalidateParent(true)
    saturationBar:SetTall(barsContainer:GetTall()*0.3)
    saturationBar.Material = RCD.Materials["gratientBar"]
    
    function colorCube:GetColorAt(x, y)
        x = x or self:GetSlideX()
        y = y or self:GetSlideY()
        return HSVToColor(ColorToHSV(self.m_BaseRGB), 1-x, 1-y)
    end

    function saturationBar:PrePaint(w, h)
        RCD.DrawRoundedRect(4, 0, 0, w, h, RCD.Colors["white"])
        RCD.RoundedTextureRect(4, 0, 0, w, h, self.Material, colorCube:GetColorAt(0))
    end
    
    function saturationBar:OnChange(color)
        colorCube:SetSlideX(1-saturationBar:GetBarX())
    end

    function colorCube:OnUserChanged(color)
        saturationBar:SetBarX(1-self:GetSlideX())
    end
    
    function colorCube:SetColorG(color)
        self:SetColor(color)
        saturationBar:SetBarX(1-self:GetSlideX())
    end
    
    local colorsContainer = vgui.Create("Panel", self)
    colorsContainer:Dock(BOTTOM)
    colorsContainer:DockMargin(0, RCD.ScrW*0.007, 0, RCD.ScrW*0.004)
    colorsContainer:SetTall(RCD.ScrH*0.1225)
    colorsContainer:InvalidateParent(true)  

    local layout = vgui.Create("DIconLayout", colorsContainer)
    layout:Dock(FILL)
    layout:InvalidateParent(true)
    layout:SetSpaceX(RCD.ScrW*0.0024)
    layout:SetSpaceY(RCD.ScrH*0.004)
    layout.Items = {}

    local cols = 10
    local rows = math.ceil(#RCD.ColorPaletteColors/cols)

    for i, v in ipairs(RCD.ColorPaletteColors) do
        local item = vgui.Create("DButton", layout)
        item:SetSize(RCD.ScrH*0.021, RCD.ScrH*0.021)
        item:SetText("")
        function item:DoClick()
            colorCube:SetColorG(v)
            colorCube.OnUserChanged(colorCube)
        end

        function item:Paint(w, h)
            RCD.DrawCircle(w/2, h/2, h*0.5, 0, 360, v)
        end
        layout.Items[#layout.Items + 1] = item
    end

    self:SetColor(RCD.Colors["white"])

    return frame
end

function PANEL:GetColor()
    return (self.colorCube:GetRGB() or RCD.Colors["white"])
end

function PANEL:SetColor(color)
    self.colorCube:SetRGB(color or RCD.Colors["white"])
    self.colorCube:SetColor(color or RCD.Colors["white"])
    self.colorCube.OnUserChanged(self.colorCube)
end

function PANEL:Paint() end

derma.DefineControl("RCD:ColorPicker", "RCD ColorPicker", PANEL, "DPanel")

--addons/realisticcardealer/lua/realistic_cardealer/vgui/cl_vehicle_button.lua:
return gluapack()()
--addons/rsc/lua/rsc/init.lua:
RSC = RSC or {}
RSC.VERSION = "1.4.19"
RSC.Config = RSC.Config or {}
RSC.Commands = RSC.Commands or {}

local function IncludeClient(file)
    AddCSLuaFile(file)
    if CLIENT then include(file) end
end

local function IncludeServer(file)
    if SERVER then include(file) end
end

local function IncludeShared(file)
    AddCSLuaFile(file)
    include(file)
end

-- Promise library
IncludeShared("rsc/classes/promise.lua")

-- Config, and shared scripts
IncludeServer("rsc/config.lua")
IncludeShared("rsc/shared/sh_utils.lua")
IncludeShared("rsc/shared/sh_language.lua")
IncludeShared("rsc/shared/sh_net.lua")
IncludeShared("rsc/shared/sh_metadata.lua")

-- Classes
IncludeShared("rsc/classes/event.lua")
IncludeShared("rsc/classes/service.lua")
IncludeShared("rsc/classes/capture_request.lua")

-- Loading services
IncludeShared("rsc/services/gmod.express.lua")
IncludeShared("rsc/services/oshi.at.lua")
IncludeShared("rsc/services/tempx.lua")

-- Server side scripts
IncludeServer("rsc/server/sv_init.lua")
IncludeServer("rsc/server/sv_net.lua")
IncludeServer("rsc/server/sv_discord.lua")

-- Client side scripts
IncludeClient("rsc/client/cl_init.lua")
IncludeClient("rsc/client/cl_net.lua")
IncludeClient("rsc/client/cl_capture.lua")
IncludeClient("rsc/client/cl_gallery.lua")
IncludeClient("rsc/client/cl_admin.lua")

hook.Add("RSC.OnConfigUpdated", "RSC.SetupConfig", function()
    RSC.Config.CustomRanksIndexes = {}
    for k, v in pairs(RSC.Config.CustomRanks) do -- just simple for loop that inverses keys and values
        RSC.Config.CustomRanksIndexes[v] = k
    end

    if SERVER then
        RSC.Config.CAMIEnabled = RSC.CAMIPrivilage and not RSC.Config.UseCustomRanks
    end

    if CLIENT then
        for name, fn in pairs(RSC.Commands) do
            -- Registering commands that were added before config was loaded

            concommand.Add(name, fn, nil, nil, RSC.Config.SilentMode and 16 or 0)
        end
    end
end)

hook.Add("Initialize", "RSC.Initialize", function()
    RSC.CAMIPrivilage = RSC.RegisterCAMIPrivilege()

    if SERVER and CAMI then
        if CAMI then
            -- Just to know where problem is
            if CAMI.Version < 20150704 then
                RSC.Log("error", "CAMI version is out of date. Please update your CAMI version or admin mod.")
            elseif not RSC.CAMIPrivilage then
                RSC.Log("error", "Unable to create CAMI privilage. Please contact with developer about this!")
            end
        end

        hook.Run("RSC.OnConfigUpdated")
        RSC.Log("info", "Initialization done.")
    end

    if CLIENT then
        local temporary_files = file.Find("rsc/temp/*", "DATA")
        for _, f in ipairs(temporary_files) do
            file.Delete("rsc/temp/" .. f)
        end
    end
end)

RSC.Command("rsc", RSC.promise.Async(function(ply, _, args)
    if #args == 0 then
        if IsValid(ply) then ply:ConCommand("rsc_menu") end
    return end
    if IsValid(ply) and not RSC.AsyncHasAccess(ply):Await() then return end

    local victim = RSC.FindPlayer(args[1])
    if not victim then
        print(RSC.GetPhrase("#rsc.errors.invalid_victim"))
    return end
    if IsValid(ply) and not RSC.AsyncCanScreengrab(ply, victim):Await() then return end

    local request = RSC.CaptureRequest.New()
    request:Capture(victim, args[2], tonumber(args[3])):Await()

    print("You can find screengrab here: ", request:GetDownloadURL():Await())
end))

--addons/rsc/lua/rsc/classes/promise.lua:
--[[
    MIT License

    Copyright (c) 2023 Retro

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
]]

--[[
    A library that mostly implements Promise/A+ specification for GLua
    https://github.com/dankmolot/gm_promise

    Documentation can be found at: https://github.com/dankmolot/gm_promise
]]

local string_format = string.format
local getmetatable = getmetatable
local setmetatable = setmetatable
local timer_Simple = timer.Simple
local table_insert = table.insert
local ErrorNoHalt = ErrorNoHalt
local isfunction = isfunction
local coroutine = coroutine
local tostring = tostring
local istable = istable
local ipairs = ipairs
local Either = Either
local pcall = pcall
local error = error
local _HTTP = HTTP

RSC.promise = RSC.promise or {}
local promise = RSC.promise

promise._VERSION = "1.2.0" -- major.minor.patch
promise._VERSION_NUM = 010200 -- _VERSION in number format: 1.2.3 -> 010203 | 99.56.13 -> 995613

-- Promise object
do
    local VALID_STATES = {
        ["pending"] = true,
        ["fulfilled"] = true,
        ["rejected"] = true,
    }

    promise.PROMISE = promise.PROMISE or {}
    local PROMISE = promise.PROMISE
    PROMISE.__index = PROMISE

    function PROMISE:GetState()
        return self.state or "pending"
    end
    function PROMISE:IsPending() return self:GetState() == "pending" end
    function PROMISE:IsFulfilled() return self:GetState() == "fulfilled" end
    function PROMISE:IsRejected() return self:GetState() == "rejected" end

    function PROMISE:GetResult()
        return self.result
    end

    function PROMISE:__tostring()
        if self:GetResult() == nil then return string_format("Promise %p {<%s>}", self, self:GetState()) end
        return string_format( "Promise %p {<%s>: %s}", self, self:GetState(), tostring(self:GetResult()) )
    end

    function PROMISE:_ProcessQueue()
        if self:IsPending() then return end
        if not self._processed and #self._queue == 0 then
            if self:IsRejected() then ErrorNoHalt("Unhandled promise error: " .. tostring(self:GetResult()) .. "\n\n") end
            return
        end

        self._processed = true

        for i, promise in ipairs(self._queue) do
            self._queue[i] = nil
            local handler = Either(self:IsFulfilled(), promise._OnFulfill, promise._OnReject)

            local ok, result
            if handler then
                ok, result = pcall(handler, self:GetResult())
            else
                ok, result = self:IsFulfilled(), self:GetResult()
            end

            if ok then
                promise:Resolve(result)
            else
                promise:Reject(result)
            end
        end
    end

    function PROMISE:_ChangeState(state, value)
        if not self:IsPending() or self:GetState() == state or not VALID_STATES[state] then return end
        self.state = state
        self.result = value

        if self:IsFulfilled() then
            self:_ProcessQueue()
        else
            -- We must wait for reject handlers, so we won't throw error about unhandler error
            timer_Simple(0, function()
                if not self._processed then
                    self:_ProcessQueue()
                end
            end)
        end
    end

    function PROMISE:Resolve(value)
        if self == value then return self:Reject("promise fulfill value refer to promise itself") end
        if promise.IsThenable(value) then
            if promise.IsPromise(value) and not value:IsPending() then
                table_insert(value._queue, self)
                value:_ProcessQueue()
            return end

            -- A little hack for thenable objects
            local called = false
            local function onFulfill(result)
                if called then return end
                called = true
                return self:Resolve(result)
            end

            local function onReject(err)
                if called then return end
                called = true
                return self:Reject(err)
            end

            local ok, err = pcall(function()
                value:Then(onFulfill, onReject)
            end)

            if not ok then OnReject(err) end
        return end

        self:_ChangeState("fulfilled", value)
    end

    function PROMISE:Reject(value)
        self:_ChangeState("rejected", value)
    end

    function PROMISE:Then(onFulfill, onReject)
        local promise = promise.New()
        if isfunction(onFulfill) then
            promise._OnFulfill = onFulfill
        end

        if isfunction(onReject) then
            promise._OnReject = onReject
        end

        table_insert(self._queue, promise)
        self:_ProcessQueue()

        return promise
    end

    function PROMISE:Catch(onReject)
        return self:Then(nil, onReject)
    end

    function PROMISE:SafeAwait()
        local co = coroutine.running()
        if not co then return false, ":Await() only works in coroutines or async functions!" end

        if self:IsPending() then
            local function resume()
                coroutine.resume(co)
            end

            self:Then(resume, resume)

            coroutine.yield()
        end

        self._processed = true
        return self:IsFulfilled(), self:GetResult()
    end

    function PROMISE:Await(ignoreErrors)
        local ok, result = self:SafeAwait()
        if not ok then
            if not ignoreErrors then return error(result, 2) end
        return end

        return result
    end
end

function promise.IsThenable(obj)
    return istable(obj) and isfunction(obj.Then)
end

function promise.IsAwaitable(obj)
    return istable(obj) and isfunction(obj.Await)
end

function promise.IsPromise(obj)
    return getmetatable(obj) == promise.PROMISE
end

function promise.RunningInAsync()
    return coroutine.running()
end

-- Creates new promise object
function promise.New(func)
    local promise = setmetatable({}, promise.PROMISE)
    promise._queue = {}

    if isfunction(func) then
        local function resolve(value)
            promise:Resolve(value)
        end

        local function reject(err)
            promise:Reject(err)
        end

        func(resolve, reject)
    end

    return promise
end

function promise.Async(func)
    if not isfunction(func) then return end

    local function run(p, ...)
        local ok, result = pcall(func, ...)
        if ok then
            p:Resolve(result)
        else
            p:Reject(result)
        end
    end

    return function(...)
        local p = promise.New()

        local co = coroutine.create(run)
        coroutine.resume(co, p, ...)

        return p
    end
end

function promise.SafeAwait(p)
    if promise.IsPromise(p) then return p:SafeAwait() end
    return true, p
end

function promise.Await(p, ignoreErrors)
    if promise.IsAwaitable(p) then return p:Await(ignoreErrors) end
    return p
end

function promise.Delay(time)
    return promise.New(function(resolve) timer_Simple(time, resolve) end)
end

function promise.Resolve(value)
    if promise.IsPromise(value) then return value end
    return promise.New(function(resolve) resolve(value) end)
end

function promise.Reject(err)
    if promise.IsPromise(value) then return value end
    return promise.New(function(_, reject) reject(err) end)
end

function promise.All(promises)
    if #promises == 0 then return promise.Resolve({}) end

    local new_promise = promise.New()

    local results = {}
    local calls = 0
    local totalCalls = #promises

    local onFulfill = function(i)
        return function(result)
            if not new_promise:IsPending() then return end
            results[i] = result
            calls = calls + 1

            if calls == totalCalls then
                new_promise:Resolve(results)
            end
        end
    end

    local function onReject(err)
        if new_promise:IsPending() then new_promise:Reject(err) end
    end

    for i, p in ipairs(promises) do
        if promise.IsThenable(p) then
            p:Then( onFulfill(i), onReject )
        else
            results[i] = result
            calls = calls + 1
        end
    end

    return new_promise
end

function promise.Race(promises)
    if #promises == 0 then return promise.Resolve({}) end

    local new_promise = promise.New()

    local onFulfill = function(result)
        if new_promise:IsPending() then new_promise:Resolve(result) end
    end

    local onReject = function(err)
        if new_promise:IsPending() then new_promise:Reject(err) end
    end

    for i, p in ipairs(promises) do
        if promise.IsThenable(p) then
            p:Then(onFulfill, onReject)
        end
    end

    return new_promise
end

-- Async version of HTTP
function promise.HTTP(parameters)
    local p = promise.New()

    parameters.success = function(code, body, headers)
        p:Resolve({
            code = code,
            body = body,
            headers = headers
        })
    end
    parameters.failed = function(err)
        p:Reject(err)
    end

    local ok = _HTTP(parameters)
    if not ok then p:Reject("failed to make http request") end
    return p
end

--addons/rsc/lua/rsc/shared/sh_language.lua:
return gluapack()()
--addons/rsc/lua/rsc/shared/sh_language.lua:
local DEFAULT_LANGUAGE = {
    ["rsc.errors.invalid_victim"] = "Invalid victim",
    ["rsc.errors.no_rights"] = "You don't have enough rights",
    ["rsc.errors.capture_faked"] = "Failed to get actual screen capture (capture has been faked)",
    ["rsc.errors.faking.no_output"] = "render.Capture returned nothing (is it faked?)",
    ["rsc.errors.faking.too_small"] = "Screen capture is too small (is it faked?)",
    ["rsc.errors.faking.invalid_signature"] = "Capture signature has been changed (is it faked?)",
    ["rsc.errors.faking.invalid_image"] = "Capture image has bad image chunks (is it faked?)",
    ["rsc.errors.faking.rerendered"] = "Something tried to render screen while rendering it? Does something try to fake capture image?",
    ["rsc.errors.error_happened"] = "An error happened :(",
    ["rsc.errors.timeout"] = "Request timed out (victim didn't respond)",
    ["rsc.errors.player_disconnected"] = "Player disconnected",
    ["rsc.errors.upload_failed"] = "Upload failed (%s)",
    ["rsc.errors.download_failed"] = "Download failed (%s)",
    ["rsc.errors.not_implemented"] = "not implemented",
    ["rsc.errors.capture_is_running"] = "Capture is already running...",
    ["rsc.errors.invalid_service"] = "Invalid service specified",

    ["rsc.notify.copying_screen"] = "Capturing screen...",
    ["rsc.notify.screen_to_image"] = "Getting a screen image...",
    ["rsc.notify.checking_image"] = "Checking the image for faking...",
    ["rsc.notify.uploading"] = "Uploading the image...",
    ["rsc.notify.sending_capture_data"] = "Got capture data. Sending it to you...",
    ["rsc.notify.downloading"] = "Downloading the image...",
    ["rsc.notify.receiver_added"] = "Player '%s' has been added as receiver",
    ["rsc.notify.upload_success"] = "Image successfully uploaded. Sending image url to the server...",

    ["rsc.ui.in_progress"] = "In progress...",
    ["rsc.ui.open_gallery"] = "Open gallery",
    ["rsc.ui.screengrab"] = "Screengrab",
    ["rsc.ui.options"] = "OPTIONS",
    ["rsc.ui.transfer_service"] = "Transfer service",
    ["rsc.ui.checking_status"] = "Checking status...",
    ["rsc.ui.online"] = "Online",
    ["rsc.ui.offline"] = "Offline",
    ["rsc.ui.more_later"] = "More later...",
    ["rsc.ui.image_quality"] = "Image quality",
    ["rsc.ui.quality_best"] = "Best",
    ["rsc.ui.quality_good"] = "Good",
    ["rsc.ui.quality_low"] = "Low",
    ["rsc.ui.other"] = "Other",
    ["rsc.ui.save_screengrabs"] = "Save screengrabs",
    ["rsc.ui.image_check"] = "If you don't see this text, then image has been faked.",
    ["rsc.ui.search_placeholder"] = "name / steamid / usergroup",
    ["rsc.ui.captured_by"] = "Captured by",
    ["rsc.ui.user_target"] = "User Target",
    ["rsc.ui.unique_id"] = "Unique ID",
    ["rsc.ui.date"] = "Date",
    ["rsc.ui.timeout"] = "Timeout",
    ["rsc.ui.auto_select"] = "Auto-Select",

    ["rsc.discord.new_screengrab"] = "Received new screengrab",
    ["rsc.discord.screengrabbed_by"] = "From player '%s'",
}

-- DO NOT TOUCH CODE BELOW
RSC.CurrentLang = RSC.CurrentLang or "en"
RSC.Phrases = RSC.Phrases or {}
RSC.PhraseStore = RSC.PhraseStore or {}
RSC.PhraseStore["en"] = DEFAULT_LANGUAGE

if SERVER then
    function RSC.ReadPhrases()
        return util.JSONToTable(file.Read("data_static/rsc-translations.json", "GAME") or "")
    end

    RSC.Log("info", "Loading translations...")
    for lang, phrases in pairs(RSC.ReadPhrases() or {}) do
        RSC.PhraseStore[lang] = phrases
    end
end

function RSC.GetPhrase(phrase, lang) -- Just copies language.GetPhrase for server and clients
    if phrase:StartWith("#") then phrase = phrase:sub(2) end
    return lang and RSC.PhraseStore[lang] and RSC.PhraseStore[lang][phrase] or RSC.Phrases[phrase]
end

local function RegisterLanguage(lang)
    for placeholder, fulltext in pairs(lang or {}) do
        if CLIENT then language.Add(placeholder, fulltext) end
        RSC.Phrases[placeholder] = fulltext
    end
end

function RSC.UpdateCurrentLanguage()
    RSC.CurrentLang = SERVER and RSC.Config.DefaultLanguage or cvars.String("gmod_language") or "en"

    -- Forcing language if specified
    if RSC.Config and RSC.Config.ForceLanguage then
        RSC.CurrentLang = RSC.Config.DefaultLanguage
    end

    if CLIENT then
        if not RSC.PhraseStore[RSC.CurrentLang] and RSC.NetworkReady then
            -- Request language translations from the server
            net.Start("RSC.NetworkV2")
                net.WriteUInt( RSC.NET_OP_REQUEST_TRANSLATION, 4 )
                net.WriteString( RSC.CurrentLang )
            net.SendToServer()
        else
            RegisterLanguage( RSC.PhraseStore[RSC.CurrentLang] )
        end
    else
        RegisterLanguage( RSC.PhraseStore[RSC.CurrentLang] )
    end
end

cvars.AddChangeCallback("gmod_language", RSC.UpdateCurrentLanguage, "RSC.OnLanguageChange")
hook.Add("RSC.OnConfigUpdated", "RSC.OnLanguageChange", RSC.UpdateCurrentLanguage)

RegisterLanguage(RSC.PhraseStore["en"])
timer.Simple(0, RSC.UpdateCurrentLanguage)

--addons/rsc/lua/rsc/services/oshi.at.lua:
-- oshi.at is a free anonymous public file sharing service.
-- Licensed under DWTFYWTPL license
-- https://github.com/somenonymous/OshiUpload/blob/master/LICENSE
--
-- P.S. oshi.at used as backup service, in case if gmod_express will be updated or closed, but oshi.at often down.

local promise = RSC.promise

local oshi = RSC.Service.New("oshi.at")

function oshi:Ping()
    local res = promise.HTTP({ url = "https://oshi.at/", method = "HEAD", timeout = 5 }):Await(true)
    return res and res.code == 200
end
oshi.Ping = promise.Async(oshi.Ping)

function oshi:Upload(data)
    local imageFormat = RSC.ParseQuality(quality)
    local ok, res = promise.HTTP({
        url = "https://oshi.at/?expire=60",
        method = "PUT",
        body = data,
        type = "image/" .. imageFormat,
    }):SafeAwait()

    if not ok then return promise.Reject("http error: " .. res) end
    if res.code ~= 200 then return promise.Reject("invalid response code: " .. tostring(code)) end

    local url = res.body:match("https://oshi.at/[%w]-%s%[Download%]")
    url = url and url:gsub("%s%[Download%]", "")
    if not url then return promise.Reject("failed to parse download url") end

    return url
end
oshi.Upload = promise.Async(oshi.Upload)

function oshi:Download(url)
    if not url:StartWith("https://oshi.at/") then return promise.Reject("invalid download url") end

    local ok, res = promise.HTTP({ url = url }):SafeAwait()
    if not ok then return promise.Reject("http error: " .. res) end
    if res.code ~= 200 then return promise.Reject("invalid response code: " .. tostring(code)) end

    return res.body
end
oshi.Download = promise.Async(oshi.Download)

oshi:Register()

--addons/sam-159/lua/sam/config/sh_config.lua:
return gluapack()()
--addons/sam-159/lua/sam/player/sh_player.lua:
return gluapack()()
--addons/sam-159/lua/sam/menu/sh_init.lua:
return gluapack()()
--addons/sui/lua/sui/cl_base.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_label.lua:
local SUI, NAME = CURRENT_SUI, CURRENT_SUI.name
local MOUSE_LEFT = MOUSE_LEFT

local SysTime = SysTime

local PANEL = {}

AccessorFunc(PANEL, "m_colText", "TextColor")
AccessorFunc(PANEL, "m_colTextStyle", "TextStyleColor")
AccessorFunc(PANEL, "m_FontName", "Font")

AccessorFunc(PANEL, "m_bDoubleClicking", "DoubleClickingEnabled", FORCE_BOOL)
AccessorFunc(PANEL, "m_bAutoStretchVertical", "AutoStretchVertical", FORCE_BOOL)
AccessorFunc(PANEL, "m_bIsMenuComponent", "IsMenu", FORCE_BOOL)

AccessorFunc(PANEL, "m_bBackground", "PaintBackground",	FORCE_BOOL)
AccessorFunc(PANEL, "m_bBackground", "DrawBackground",	FORCE_BOOL)
AccessorFunc(PANEL, "m_bDisabled", "Disabled", FORCE_BOOL)

AccessorFunc(PANEL, "m_bIsToggle", "IsToggle", FORCE_BOOL)
AccessorFunc(PANEL, "m_bToggle", "Toggle", FORCE_BOOL)

AccessorFunc(PANEL, "m_bBright", "Bright", FORCE_BOOL)
AccessorFunc(PANEL, "m_bDark", "Dark", FORCE_BOOL)
AccessorFunc(PANEL, "m_bHighlight",	"Highlight", FORCE_BOOL)

PANEL:SetIsToggle(false)
PANEL:SetToggle(false)
PANEL:SetDisabled(false)
PANEL:SetDoubleClickingEnabled(true)

local Panel = FindMetaTable("Panel")
local SetMouseInputEnabled = Panel.SetMouseInputEnabled
local SetPaintBackgroundEnabled = Panel.SetPaintBackgroundEnabled
local SetPaintBorderEnabled = Panel.SetPaintBorderEnabled
local InvalidateLayout = Panel.InvalidateLayout
local SetFGColor = Panel.SetFGColor
function PANEL:Init()
	SetMouseInputEnabled(self, false)
	SetPaintBackgroundEnabled(self, false)
	SetPaintBorderEnabled(self, false)
end

function PANEL:AllowScale()
	SUI.OnScaleChanged(self, self.ScaleChanged)
end

function PANEL:ScaleChanged()
	self:SizeToContents()
end

function PANEL:SetFont(font)
	if self.m_FontName == font then return end

	self.m_FontName = font
	self:SetFontInternal(self.m_FontName)
end

function PANEL:SetTextColor(col)
	if self.m_colText == col then return end

	self.m_colText = col
	SetFGColor(self, col.r, col.g, col.b, col.a)
end
PANEL.SetColor = PANEL.SetTextColor

function PANEL:GetColor()
	return self.m_colText or self.m_colTextStyle
end

function PANEL:Toggle()
	if not self:GetIsToggle() then return end

	self:SetToggle(not self:GetToggle())
	self:OnToggled(self:GetToggle())
end

function PANEL:SetDisabled(bDisabled)
	self.m_bDisabled = bDisabled
	InvalidateLayout(self)
end

function PANEL:SetEnabled(bEnabled)
	self:SetDisabled(not bEnabled)
end

function PANEL:IsEnabled()
	return not self:GetDisabled()
end

function PANEL:ApplySchemeSettings()
	local col = self:GetColor()
	if not col then return end

	self:SetFGColor(col.r, col.g, col.b, col.a)
end

function PANEL:AutoStretchVerticalThink()
	self:SizeToContentsY()
end

function PANEL:SetAutoStretchVertical(enable)
	self.m_bAutoStretchVertical = enable
	self.Think = enable and self.AutoStretchVerticalThink or nil
end

function PANEL:OnCursorEntered()
	InvalidateLayout(self, true)
end

function PANEL:OnCursorExited()
	InvalidateLayout(self, true)
end

function PANEL:OnMousePressed(mousecode)
	if self:GetDisabled() then return end

	if mousecode == MOUSE_LEFT and not dragndrop.IsDragging() and self.m_bDoubleClicking then
		if self.LastClickTime and SysTime() - self.LastClickTime < 0.2 then

			self:DoDoubleClickInternal()
			self:DoDoubleClick()
			return
		end

		self.LastClickTime = SysTime()
	end

	if self:IsSelectable() and mousecode == MOUSE_LEFT and input.IsShiftDown() then
		return self:StartBoxSelection()
	end

	self:MouseCapture(true)
	self.Depressed = true
	self:OnDepressed()
	InvalidateLayout(self, true)

	self:DragMousePress(mousecode)
end

function PANEL:OnMouseReleased(mousecode)
	self:MouseCapture(false)

	if self:GetDisabled() then return end
	if not self.Depressed and dragndrop.m_DraggingMain ~= self then return end

	if self.Depressed then
		self.Depressed = nil
		self:OnReleased()
		InvalidateLayout(self, true)
	end

	if self:DragMouseRelease(mousecode) then return end

	if self:IsSelectable() and mousecode == MOUSE_LEFT then
		local canvas = self:GetSelectionCanvas()
		if canvas then
			canvas:UnselectAll()
		end
	end

	if not self.Hovered then return end

	self.Depressed = true

	if mousecode == MOUSE_RIGHT then
		self:DoRightClick()
	end

	if mousecode == MOUSE_LEFT then
		self:DoClickInternal()
		self:DoClick()
	end

	if mousecode == MOUSE_MIDDLE then
		self:DoMiddleClick()
	end

	self.Depressed = nil
end

function PANEL:OnReleased()
end

function PANEL:OnDepressed()
end

function PANEL:OnToggled(bool)
end

function PANEL:DoClick()
	self:Toggle()
end

function PANEL:DoRightClick()
end

function PANEL:DoMiddleClick()
end

function PANEL:DoClickInternal()
end

function PANEL:DoDoubleClick()
end

function PANEL:DoDoubleClickInternal()
end

sui.register("Label", PANEL, "Label")
--addons/sam-159/lua/sam/menu/tabs/ranks.lua:
if SAM_LOADED then return end
if SERVER then return end

local sam = sam
local SUI = sam.SUI

local GetColor = SUI.GetColor
local Line = sui.TDLib.LibClasses.Line
local AnimatedSetVisible = sui.TDLib.LibClasses.AnimatedSetVisible

local RANK_NAME = SUI.CreateFont("RankName", "Roboto Bold", 18)
local RANK_INFO = SUI.CreateFont("RankInfo", "Roboto Medium", 12)

local CREATE_RANK = SUI.CreateFont("CreateRank", "Roboto Bold", 16, 200)
local RANK_TITLE = SUI.CreateFont("RankTitle", "Roboto Bold", 20)

local rank_menu = function(rank, data)
	local valid = sui.valid_options()

	local imm, banlim
	if rank then
		imm, banlim = data.immunity, data.ban_limit
	end

	local edit_rank = vgui.Create("SAM.QueryBox")
	edit_rank:SetWide(470)
	edit_rank:SetTitle(rank and string.format("Edit Rank '%s'", rank) or "Create Rank")

	local new_name = rank
	if not sam.ranks.is_default_rank(rank) then
		local name = edit_rank:Add("SAM.LabelPanel")
		name:SetLabel("Rank Name")

		local entry = name:Add("SAM.TextEntry")
		entry:SetSize(210, 28)
		entry:SetNoBar(false)
		entry:SetPlaceholder("")
		entry:SetValue(rank or "")
		entry:SetCheck(function(_name)
			new_name = _name

			if _name == rank then return end
			if _name == "" or sam.ranks.is_rank(_name) then
				return false
			end
		end)

		valid.Add(entry)
	end

	local new_immunity = imm
	do
		local immunity = edit_rank:Add("SAM.LabelPanel")
		immunity:SetLabel("Immunity (2~99)")
		immunity:DockMargin(0, 5, 0, 0)

		local entry = immunity:Add("SAM.TextEntry")
		entry:SetSize(210, 28)
		entry:SetNumeric(true)
		entry:DisallowFloats(true)
		entry:DisallowNegative(true)
		entry:SetPlaceholder("")
		entry:SetValue(imm or "2")
		entry:SetCheck(function(_immunity)
			new_immunity = _immunity

			if _immunity == "" then
				return false
			end

			_immunity = tonumber(_immunity)
			new_immunity = _immunity
			if _immunity < 2 or _immunity > 99 then
				return false
			end
		end)

		valid.Add(entry)
	end

	local new_banlimit = banlim
	do
		local banlimit = edit_rank:Add("SAM.LabelPanel")
		banlimit:SetLabel("Ban Limit (1y 1mo 1w 1d 1h 1m)")
		banlimit:DockMargin(0, 5, 0, 0)

		local entry = banlimit:Add("SAM.TextEntry")
		entry:SetSize(210, 28)
		entry:SetNoBar(false)
		entry:SetPlaceholder("")
		entry:SetValue(banlim and sam.reverse_parse_length(banlim) or "2w")
		entry:SetCheck(function(_banlimit)
			new_banlimit = sam.parse_length(_banlimit)
			if not new_banlimit and _banlimit ~= banlim then
				return false
			end
		end)

		valid.Add(entry)
	end

	local inherit = rank and sam.ranks.get_rank(rank).inherit or "user"
	local new_inherit = inherit
	do
		local inherits_from = edit_rank:Add("SAM.LabelPanel")
		inherits_from:SetLabel("Inherits From")
		inherits_from:DockMargin(0, 5, 0, 0)

		local entry = inherits_from:Add("SAM.ComboBox")
		entry:SetSize(210, 28)
		entry:SetValue(inherit)

		for name in SortedPairsByMemberValue(sam.ranks.get_ranks(), "immunity", true) do
			if name ~= rank and not sam.ranks.inherits_from(name, rank) then
				entry:AddChoice(name)
			end
		end

		function entry:OnSelect(_, value)
			new_inherit = value
		end
	end


	edit_rank:Done()
	edit_rank.save:SetEnabled(true)
	edit_rank.save:SetText("SAVE")

	if rank then
		edit_rank:SetCallback(function()
			local to_run = {}

			if new_immunity ~= imm then
				table.insert(to_run, {"changerankimmunity", rank, new_immunity})
			end

			if new_banlimit ~= banlim then
				table.insert(to_run, {"changerankbanlimit", rank, new_banlimit})
			end

			if new_inherit ~= inherit then
				table.insert(to_run, {"changeinherit", rank, new_inherit})
			end

			if new_name ~= rank then
				table.insert(to_run, {"renamerank", rank, new_name})
			end
			sam.command.run_commands(to_run)
		end)
	else
		edit_rank:SetCallback(function()
			RunConsoleCommand("sam", "addrank", new_name, new_inherit, new_immunity, new_banlimit)
		end)
	end

	function edit_rank.save:Think()
		self:SetEnabled(valid.IsValid())
	end
end

sam.menu.add_tab("https://raw.githubusercontent.com/Srlion/Addons-Data/main/icons/sam/military_rank.png", function(column_sheet)
	local current_rank

	local parent = column_sheet:Add("Panel")
	parent:Dock(FILL)
	parent:DockMargin(0, 1, 0, 0)

	local title = parent:Add("SAM.Label")
	title:Dock(TOP)
	title:DockMargin(10, 10, 0, 0)
	title:SetFont(SAM_TAB_TITLE_FONT)
	title:SetText("Ranks")
	title:SetTextColor(GetColor("menu_tabs_title"))
	title:SizeToContents()

	local total = parent:Add("SAM.Label")
	total:Dock(TOP)
	total:DockMargin(10, 6, 0, 0)
	total:SetFont(SAM_TAB_DESC_FONT)
	total:SetText(table.Count(sam.ranks.get_ranks()) .. " total ranks")
	total:SetTextColor(GetColor("menu_tabs_title"))
	total:SizeToContents()

	local search_entry
	do
		local container = parent:Add("SAM.Panel")
		container:Dock(TOP)
		container:DockMargin(10, 6, 10, SUI.Scale(15))
		container:SetTall(30)

		search_entry = container:Add("SAM.TextEntry")
		search_entry:Dock(LEFT)
		search_entry:SetNoBar(true)
		search_entry:SetPlaceholder("Search...")
		search_entry:SetRadius(4)
		search_entry:SetWide(220)
	end

	local create_rank = parent:Add("SAM.Button")
	create_rank:SetFont(CREATE_RANK)
	create_rank:SetText("Create Rank")
	create_rank:Dock(BOTTOM)
	create_rank:DockMargin(10, 0, 10, 10)

	create_rank:On("DoClick", function()
		rank_menu()
	end)

	local right_body = parent:Add("Panel")
	right_body:Dock(RIGHT)
	right_body:DockMargin(0, 5, 10, 10)
	right_body:SetWide(0)
	right_body:SetZPos(-1)

	local rank_title = right_body:Add("SAM.Label")
	rank_title:Dock(TOP)
	rank_title:DockMargin(0, 0, 0, 5)
	rank_title:SetFont(RANK_TITLE)
	rank_title:SetTextColor(GetColor("menu_tabs_title"))

	local permissions_body = right_body:Add("SAM.CollapseCategory")
	permissions_body:Dock(FILL)
	permissions_body:GetCanvas():DockPadding(0, 0, 5, 0)

	local function refresh_access()
		if not IsValid(current_rank) then return end

		for k, v in ipairs(permissions_body.items) do
			AnimatedSetVisible(v.img, sam.ranks.has_permission(current_rank.name, v.name))
		end
	end

	for k, v in ipairs({"SAM.ChangedInheritRank", "SAM.RankPermissionGiven", "SAM.RankPermissionTaken"}) do
		hook.Add(v, "SAM.Menu.RefreshPermissions ", refresh_access)
	end

	local function refresh_permissions()
		permissions_body:GetCanvas():Clear()
		table.Empty(permissions_body.items)
		table.Empty(permissions_body.categories)

		local item_click = function(s)
			local rank = current_rank.name
			if not sam.ranks.has_permission(rank, s.name) then
				RunConsoleCommand("sam", "givepermission", rank, s.name)
			else
				RunConsoleCommand("sam", "takepermission", rank, s.name)
			end
		end

		for k, v in ipairs(sam.permissions.get()) do
			local item = permissions_body:add_item(v.name, v.category)
			item:SetContentAlignment(4)
			item:SetTextInset(6, 0)
			item:SizeToContentsY(SUI.Scale(10))
			item:SetZPos(k)
			item.name = v.name
			item.DoClick = item_click

			local img = item:Add("SAM.Image")
			img:Dock(RIGHT)
			img:DockMargin(4, 4, 4, 4)
			img:InvalidateParent(true)
			img:SetWide(img:GetTall())
			img:SetImageColor(Color(52, 161, 224))
			img:SetImage("https://raw.githubusercontent.com/Srlion/Addons-Data/main/icons/sam/check_mark.png")

			item.img = img
		end
	end

	local limits_body

	do
		local permissions_search = right_body:Add("SAM.TextEntry")
		permissions_search:Dock(TOP)
		permissions_search:DockMargin(0, 0, 5, 10)
		permissions_search:SetNoBar(true)
		permissions_search:SetPlaceholder("Search...")
		permissions_search:SetRadius(4)
		permissions_search:SetTall(30)

		function permissions_search:OnValueChange(text)
			if limits_body and limits_body:IsVisible() then
				local children = limits_body:GetCanvas():GetChildren()
				for k, v in ipairs(children) do
					v:AnimatedSetVisible(v.title:find(text, nil, true) ~= nil)
				end
				limits_body:InvalidateLayout(true)
			else
				permissions_body:Search(text:lower())
			end
		end

		Line(right_body):SetZPos(2)
	end

	local function load_limits()
		if sam.limit_types then
			if limits_body then return end
		else
			if limits_body then
				limits_body:SetVisible(false)
				permissions_body:AnimatedSetVisible(true)
				limits_body:Remove()
				limits_body = nil
			end
			return
		end

		limits_body = right_body:Add("SAM.ScrollPanel")
		limits_body:Dock(FILL)
		limits_body:GetCanvas():DockPadding(0, 0, 5, 0)
		limits_body:SetVisible(false)

		local item_enter = function(s)
			if not IsValid(current_rank) then return end

			local rank = current_rank.name

			local limit = math.Clamp(s:GetValue(), -1, 1000)
			if limit ~= sam.ranks.get_limit(rank, s.limit_type) then
				RunConsoleCommand("sam", "changeranklimit", rank, s.limit_type, limit)
			else
				s:SetText(tostring(sam.ranks.get_limit(rank, s.limit_type)))
			end
		end

		local not_empty = function(s)
			return s and s ~= ""
		end

		local limit_values = {}
		for k, v in ipairs(sam.limit_types) do
			local immunity = limits_body:Add("SAM.LabelPanel")
			immunity:SetLabel(v)
			immunity:DockMargin(5, 0, 0, 5)

			local entry = immunity:Add("SAM.TextEntry")
			entry:SetSize(60, 26)
			entry:SetNumeric(true)
			entry:DisallowFloats(true)
			entry:SetPlaceholder("")
			entry:SetCheck(not_empty)
			entry.limit_type = v
			entry.OnEnter = item_enter

			table.insert(limit_values, entry)
		end

		function limits_body:Refresh()
			if not IsValid(current_rank) then return end

			local rank = current_rank.name
			for k, v in ipairs(limit_values) do
				v:SetValue(tostring(sam.ranks.get_limit(rank, v.limit_type)))
			end
		end

		local right_current_rank = right_body:Add("SAM.Button")
		right_current_rank:Dock(BOTTOM)
		right_current_rank:DockMargin(0, 5, 0, 0)
		right_current_rank:SetFont(CREATE_RANK)
		right_current_rank:SetText("Switch to Limits")
		right_current_rank:On("DoClick", function()
			limits_body:AnimatedToggleVisible()
			permissions_body:AnimatedToggleVisible()

			if permissions_body:AnimatedIsVisible() then
				right_current_rank:SetText("Switch to Limits")
			else
				right_current_rank:SetText("Switch to Permissions")
			end
		end)

		limits_body:On("OnRemove", function()
			right_current_rank:Remove()
		end)
		limits_body:Refresh()
	end

	local function refresh_all()
		timer.Create("SAM.Menu.Ranks.Refresh", 1, 1, function()
			load_limits()
			refresh_permissions()
			refresh_access()
		end)
	end

	sam.config.hook({"Restrictions.Limits"}, refresh_all)

	for k, v in ipairs({"SAM.AddedPermission", "SAM.PermissionModified", "SAM.RemovedPermission"}) do
		hook.Add(v, "SAM.Menu.RefreshPermissions", refresh_all)
	end

	local body = parent:Add("SAM.ScrollPanel")
	body:Dock(FILL)
	body:DockMargin(10, 0, 5, 10)
	body:SetVBarPadding(6)

	body:Line():SetZPos(-101)

	local select_rank = function(s)
		if not IsValid(s) then
			current_rank = nil
			right_body:SizeTo(0, -1, 0.3)
			return
		end

		if IsValid(current_rank) then
			current_rank.Selected = false

			if current_rank == s then
				current_rank = nil
				right_body:SizeTo(0, -1, 0.3)
				return
			end
		end

		s.Selected = true
		current_rank = s
		refresh_access()
		if limits_body then
			limits_body:Refresh()
		end
		right_body:SizeTo(SUI.Scale(300), -1, 0.3)

		rank_title:SetText(s.name)
		rank_title:SizeToContents()
	end

	local ranks = {}

	function search_entry:OnValueChange()
		local value = self:GetValue()
		for k, v in pairs(ranks) do
			local show = k:find(value, nil, true)
			show = show ~= nil
			v.line:AnimatedSetVisible(show)
			v:GetParent():AnimatedSetVisible(show)
		end
	end

	local add_rank = function(rank_name, data)
		if rank_name == "superadmin" then return end
		if not IsValid(body) then return end

		local line = body:Add("SAM.Panel")
		line:Dock(TOP)
		line:DockMargin(0, 0, 0, 10)
		line:SetTall(34)
		line:SetZPos(-data.immunity)
		line:InvalidateLayout(true)

		local container = line:Add("SAM.Button")
		container:Dock(FILL)
		container:DockMargin(0, 0, 5, 0)
		container:DockPadding(5, 5, 0, 5)
		container:SetText("")
		container:SetContained(false)
		container.name = rank_name

		ranks[rank_name] = container

		container:On("DoClick", select_rank)

		function container:DoRightClick()
			rank_name = container.name

			if rank_name == "user" then return end

			local dmenu = vgui.Create("SAM.Menu")
			dmenu:SetSize(w, h)
			dmenu:SetInternal(container)

			dmenu:AddOption("Edit Rank", function()
				rank_menu(rank_name, sam.ranks.get_rank(rank_name))
			end)

			if not sam.ranks.is_default_rank(rank_name) then
				dmenu:AddSpacer()

				dmenu:AddOption("Remove Rank", function()
					local remove_rank = vgui.Create("SAM.QueryBox")
					remove_rank:SetWide(350)

					local check = remove_rank:Add("SAM.Label")
					check:SetText("Are you sure that you want to remove '" .. rank_name .. "'?")
					check:SetFont("SAMLine")
					check:SetWrap(true)
					check:SetAutoStretchVertical(true)

					remove_rank:Done()
					remove_rank.save:SetEnabled(true)
					remove_rank.save:SetText("REMOVE")
					remove_rank.save:SetContained(false)
					remove_rank.save:SetColors(GetColor("query_box_cancel"), GetColor("query_box_cancel_text"))

					remove_rank.cancel:SetContained(true)
					remove_rank.cancel:SetColors()

					remove_rank:SetCallback(function()
						RunConsoleCommand("sam", "removerank", rank_name)
					end)
				end)
			end

			dmenu:Open()
			dmenu:SetPos(input.GetCursorPos())
		end

		do
			local name = container:Add("SAM.Label")
			name:Dock(TOP)
			name:DockMargin(0, 0, 0, 2)
			name:SetTextColor(GetColor("player_list_names"))
			name:SetFont(RANK_NAME)
			name:SetText(rank_name)
			name:SizeToContents()

			local immunity = container:Add("SAM.Label")
			immunity:Dock(TOP)
			immunity:SetTextColor(GetColor("player_list_steamid"))
			immunity:SetFont(RANK_INFO)
			immunity:SetText("Immunity: " .. data.immunity)
			immunity:SizeToContents()

			local banlimit = container:Add("SAM.Label")
			banlimit:Dock(TOP)
			banlimit:SetTextColor(GetColor("player_list_steamid"))
			banlimit:SetFont(RANK_INFO)
			banlimit:SetText("Ban limit: " .. sam.reverse_parse_length(sam.parse_length(data.ban_limit)))
			banlimit:SizeToContents()

			local inherit = container:Add("SAM.Label")
			inherit:Dock(TOP)
			inherit:SetTextColor(GetColor("player_list_steamid"))
			inherit:SetFont(RANK_INFO)
			inherit:SetText("Inherits from: " .. (sam.isstring(data.inherit) and data.inherit or "none"))
			inherit:SizeToContents()
		end

		container:InvalidateLayout(true)
		container:SizeToChildren(false, true)
		line:SizeToChildren(false, true)

		local _line = body:Line()
		_line:SetZPos(-data.immunity)

		container.line = _line
		container.data = data
	end

	for rank_name, v in pairs(sam.ranks.get_ranks()) do
		add_rank(rank_name, v)
	end

	hook.Add("SAM.AddedRank", "SAM.RefreshRanksList", function(name, rank)
		add_rank(name, rank)
	end)

	hook.Add("SAM.RemovedRank", "SAM.RefreshRanksList", function(name)
		local line = ranks[name]
		if not IsValid(line) then return end

		line.line:Remove()
		line:GetParent():Remove()
		ranks[name] = nil

		if line == current_rank then
			select_rank()
		end
	end)

	-- This is just better than caching panels for stuff that ain't gonna be called a lot
	hook.Add("SAM.RankNameChanged", "SAM.RefreshRanksList", function(name, new_name)
		local line = ranks[name]
		if not IsValid(line) then return end

		-- if current_rank == name then
		-- 	rank_name:SetText(new_name)
		-- end

		line:GetChildren()[1]:SetText(new_name)

		ranks[new_name], ranks[name] = line, nil
		line.name = new_name
	end)

	hook.Add("SAM.RankImmunityChanged", "SAM.RefreshRanksList", function(name, immunity)
		local line = ranks[name]
		if not IsValid(line) then return end

		line:GetChildren()[2]:SetText("Immunity: " .. immunity)
		line:GetParent():SetZPos(-immunity)

		-- SetZPos is kinda weird to deal with
		line.line:SetZPos(-immunity + 1)
		line.line:SetZPos(-immunity)
	end)

	hook.Add("SAM.RankBanLimitChanged", "SAM.RefreshRanksList", function(name, new_limit)
		local line = ranks[name]
		if IsValid(line) then
			line:GetChildren()[3]:SetText("Ban limit: " .. sam.reverse_parse_length(new_limit))
		end
	end)

	hook.Add("SAM.ChangedInheritRank", "SAM.RefreshRanksList", function(name, new_inherit)
		local line = ranks[name]
		if IsValid(line) then
			line:GetChildren()[4]:SetText("Inherits from: " .. new_inherit)
		end
	end)

	return parent
end, function()
	return LocalPlayer():HasPermission("manage_ranks")
end, 3)
--addons/sam-159/lua/sam/sh_motd.lua:
return gluapack()()
--addons/sam-159/lua/sam/modules/cami.lua:
return gluapack()()
--addons/sam-159/lua/sam/modules/utime.lua:
return gluapack()()
--addons/sui/lua/sui/vgui/sui_image.lua:
return gluapack()()
--addons/sui/lua/sui/libs/png_encoder.lua:
return gluapack()()
--addons/scb-29/lua/scb/libs/sh_types.lua:
return gluapack()()
--addons/scb-29/lua/scb/settings/tabs/client.lua:
return gluapack()()
--lua/autorun/sentryoldmob.lua:
player_manager.AddValidModel( "SenMob Greaser1", "models/sentry/sentryoldmob/greaser/sentrygreasemale2pm.mdl" )
player_manager.AddValidModel( "SenMob Greaser2", "models/sentry/sentryoldmob/greaser/sentrygreasemale4pm.mdl" )
player_manager.AddValidModel( "SenMob Greaser3", "models/sentry/sentryoldmob/greaser/sentrygreasemale7pm.mdl" )
player_manager.AddValidModel( "SenMob Greaser4", "models/sentry/sentryoldmob/greaser/sentrygreasemale9pm.mdl" )
player_manager.AddValidModel( "SenMob Irish1", "models/sentry/sentryoldmob/irish/sentryirishmale2pm.mdl" )
player_manager.AddValidModel( "SenMob Irish2", "models/sentry/sentryoldmob/irish/sentryirishmale4pm.mdl" )
player_manager.AddValidModel( "SenMob Irish3", "models/sentry/sentryoldmob/irish/sentryirishmale6pm.mdl" )
player_manager.AddValidModel( "SenMob Irish4", "models/sentry/sentryoldmob/irish/sentryirishmale7pm.mdl" )
player_manager.AddValidModel( "SenMob Irish5", "models/sentry/sentryoldmob/irish/sentryirishmale8pm.mdl" )
player_manager.AddValidModel( "SenMob Irish6", "models/sentry/sentryoldmob/irish/sentryirishmale9pm.mdl" )
player_manager.AddValidModel( "SenMob Mafia1", "models/sentry/sentryoldmob/mafia/sentrymobmale2pm.mdl" )
player_manager.AddValidModel( "SenMob Mafia2", "models/sentry/sentryoldmob/mafia/sentrymobmale4pm.mdl" )
player_manager.AddValidModel( "SenMob Mafia3", "models/sentry/sentryoldmob/mafia/sentrymobmale6pm.mdl" )
player_manager.AddValidModel( "SenMob Mafia4", "models/sentry/sentryoldmob/mafia/sentrymobmale7pm.mdl" )
player_manager.AddValidModel( "SenMob Mafia5", "models/sentry/sentryoldmob/mafia/sentrymobmale8pm.mdl" )
player_manager.AddValidModel( "SenMob Mafia6", "models/sentry/sentryoldmob/mafia/sentrymobmale9pm.mdl" )
player_manager.AddValidModel( "SenMob Chinese", "models/sentry/sentryoldmob/chinese/oldchinesegoonpm.mdl" )
player_manager.AddValidModel( "SenMob Bouncer1", "models/sentry/sentryoldmob/oldgoons/sentryarmbmale2pm.mdl" )
player_manager.AddValidModel( "SenMob Bouncer2", "models/sentry/sentryoldmob/oldgoons/sentryarmbmale8pm.mdl" )
player_manager.AddValidModel( "SenMob Bouncer3", "models/sentry/sentryoldmob/oldgoons/sentryarmbmale6pm.mdl" )
player_manager.AddValidModel( "SenMob Suit1", "models/sentry/sentryoldmob/oldgoons/sentrybusi1male2pm.mdl" )
player_manager.AddValidModel( "SenMob Suit2", "models/sentry/sentryoldmob/oldgoons/sentrybusi1male4pm.mdl" )
player_manager.AddValidModel( "SenMob Suit3", "models/sentry/sentryoldmob/oldgoons/sentrybusi1male6pm.mdl" )
player_manager.AddValidModel( "SenMob Suit4", "models/sentry/sentryoldmob/oldgoons/sentrybusi1male7pm.mdl" )
player_manager.AddValidModel( "SenMob Suit5", "models/sentry/sentryoldmob/oldgoons/sentrybusi1male8pm.mdl" )
player_manager.AddValidModel( "SenMob Suit6", "models/sentry/sentryoldmob/oldgoons/sentrybusi1male9pm.mdl" )
player_manager.AddValidModel( "SenMob British1", "models/sentry/sentryoldmob/britgoons/sentrybritmale4pm.mdl" )
player_manager.AddValidModel( "SenMob British2", "models/sentry/sentryoldmob/britgoons/sentrybritmale6pm.mdl" )
player_manager.AddValidModel( "SenMob British3", "models/sentry/sentryoldmob/britgoons/sentrybritmale8pm.mdl" )
player_manager.AddValidModel( "SenMob British4", "models/sentry/sentryoldmob/britgoons/sentrybritmale9pm.mdl" )
player_manager.AddValidModel( "SenMob Sicilian1", "models/sentry/sentryoldmob/slygoons/sentryslymale6pm.mdl" )
player_manager.AddValidModel( "SenMob Sicilian2", "models/sentry/sentryoldmob/slygoons/sentryslymale7pm.mdl" )
player_manager.AddValidModel( "SenMob Sicilian3", "models/sentry/sentryoldmob/slygoons/sentryslymale8pm.mdl" )
player_manager.AddValidModel( "SenMob Sicilian4", "models/sentry/sentryoldmob/slygoons/sentryslymale9pm.mdl" )

local nextName
local tbNPCs = {}

local function AddNPC(category, name, class, model, keyvalues, weapons, spawnflags)
		list.Set("NPC",name,{Name = name,Class = class,Model = model,Category = category,KeyValues = keyvalues,Weapons = weapons, SpawnFlags = spawnflags})
		tbNPCs[name] = model
end

AddNPC("GTA V", "Past Triad Member", "npc_citizen", "models/sentry/sentryoldmob/chinese/oldchinesegoong.mdl", {citizentype = CT_UNIQUE, SquadName = "rebels"}, {"weapon_pistol","weapon_smg1"})
AddNPC("GTA V", "Past Triad Member (Hostile)", "npc_combine_s", "models/sentry/sentryoldmob/chinese/oldchinesegoonh.mdl", {citizentype = CT_UNIQUE, SquadName = "us"}, {"weapon_pistol","weapon_smg1"})

--addons/dwep/lua/autorun/sh_dwep_config.lua:

DWEP = DWEP or {}
DWEP.Config = {} 
DWEP.Config.Colors ={  
["background"]= Color(38, 38, 44, 255),  
["foreground"]= Color(28, 28, 34, 255), 		
["inactiveClr"] = Color(68, 68, 68, 255), 
["theme"] = Color(200,103,235),
}  

DWEP.Config.AccessGroups = {
	"superadmin",
}

  local SERVER = SERVER
        local CLIENT = CLIENT

--No configuration below this line: DO NOT TOUCH
 
DWEP.Sweps = DWEP.Sweps or {}
DWEP.DefaultSweps = DWEP.DefaultSweps or {}

function DWEP.CanDWEP(ply)

	return table.HasValue(DWEP.Config.AccessGroups, ply:GetUserGroup()) 

end 
function DWEP.AdjustValue(weapon, key, value)
	local parents = string.Explode(" | ", key)
	local curTable
	local weapon = weapons.GetStored(weapon)
	if #parents > 1 then 
		for i = 1, #parents  do
			if i != 1 and i < #parents then 
				curTable[parents[i]] = curTable[parents[i]] or {}
				curTable = curTable[parents[i]] 
			elseif i == 1 then
				weapon[parents[1]] = weapon[parents[1]] or {}
				curTable = weapon[parents[1]]
			elseif i == #parents then 
				curTable[parents[i]] = value 
			end  
		end  
	else
		weapon[parents[1]] = value 
	end 
end 

function DWEP.CopyTable(obj, seen)
  -- Handle non-tables and previously-seen tables.
  if type(obj) ~= 'table' then return obj end
  if seen and seen[obj] then return seen[obj] end

  -- New table; mark it as seen an copy recursively.
  local s = seen or {}
  local res = setmetatable({}, getmetatable(obj))
  s[obj] = res
  for k, v in pairs(obj) do res[DWEP.CopyTable(k, s)] = DWEP.CopyTable(v, s) end
  return res
end


hook.Add("InitPostEntity", "InitializeDWEP", function()
	
	if #DWEP.Sweps <= 0 then 
		for k,v in pairs(weapons.GetList()) do
			if v.ClassName then 
				DWEP.Sweps[#DWEP.Sweps + 1 or 1] = v.ClassName 
				DWEP.DefaultSweps[v.ClassName] = DWEP.CopyTable(v) 
			end 
		end 
	end 
	
	if SERVER then
		for k,v in pairs(weapons.GetList()) do
			DWEP.LoadData(v.ClassName)
		end 
	end 
	
end)

--PrintTable(DWEP.DefaultSweps["tfa_cso_ozwpnset2"])
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/sh_glorifiedhandcuffs_compatibility.lua:
return gluapack()()
--addons/thirdperson/lua/thirdperson/client/cl_thirdperson_hud.lua:
return gluapack()()
--addons/thirdperson/lua/thirdperson/client/cl_thirdperson_hud.lua:
--[[
!ThirdPerson
By Imperial Knight.
Copyright © Imperial Knight 2019: Do not redistribute.
(76561198347218024)

CLIENTSIDE FILE
]]--

-- Globals --
THIRDPERSON.crosshairs = {
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
};
--

local function crosshairThirdPerson()

end

--hook.Add( "HUDPaint", "Crosshair", crosshairThirdPerson );

--addons/thirdperson/lua/thirdperson/client/cl_thirdperson_contextmenu.lua:
--[[
!ThirdPerson
By Imperial Knight.
Copyright © Imperial Knight 2019: Do not redistribute.
(76561198347218024)

CLIENTSIDE FILE
]]--

if ( THIRDPERSON.contextMenu == true ) then
    list.Set( "DesktopWindows", "ThirdPerson", {
        title       = "!ThirdPerson",
        icon        = "icon64/thirdperson/thirdperson-icon.png",
        onewindow   = false,
        init        = function( icon, window )
            RunConsoleCommand( "-menu_context" );
            RunConsoleCommand( "thirdperson_menu" );
        end
    } );

    local function ThirdPersonContextMenu( menubar )
        local m  = menubar:AddOrGetMenu( "!ThirdPerson" );

        -- Toggle Option --
        m:AddCVar( "Enable !ThirdPerson", "thirdperson_view", "1", "0" );
        -- --

        m:AddSpacer()

        -- Wall Collisions Option --
        m:AddCVar( "Prevent wall collisions", "thirdperson_preventwallcollisions", "1", "0" );
        -- --

        -- Scoping Option --
        m:AddCVar( "Enable first-person scoping", "thirdperson_scoping", "1", "0" );
        -- --

        -- Correct Bullets Option --
        m:AddCVar( "Correct bullets with static crosshairs", "thirdperson_bulletcorrection", "1", "0" );
        -- --

        -- View Entities Option --
        m:AddCVar( "Enable first-person while viewing certain entities", "thirdperson_entityview", "1", "0" );
        -- --

        m:AddSpacer()

        -- Viewing Angle --
        m:AddOption( "Setting: View Angles", function()
            RunConsoleCommand( "thirdperson_menu" );
        end );
        -- --

        -- View Distance --
        m:AddOption( "Setting: View Distance", function()
            RunConsoleCommand( "thirdperson_menu" );
        end );
        -- --

        -- Crosshair --
        m:AddOption( "Setting: Crosshair & Color", function()
            RunConsoleCommand( "thirdperson_menu" );
        end );
        -- --

        m:AddSpacer();

        -- Menu Option --
        m:AddOption( "!ThirdPerson Full Menu", function()
            RunConsoleCommand( "thirdperson_menu" );
        end );
        -- --

    end

    if ( hook.GetTable()[ "PopulateMenuBar" ] ~= nil ) then
        hook.Add( "PopulateMenuBar", "ThirdPersonContextMenu", ThirdPersonContextMenu );
    end
end
--addons/skeypad_1.2.36/lua/autorun/skeypad_loader.lua:
return gluapack()()
--lua/autorun/skipperplayer.lua:
player_manager.AddValidModel( "Skipper", "models/cktheamazingfrog/player/skipper/skipper.mdl" )
player_manager.AddValidHands( "Skipper", "models/cktheamazingfrog/player/skipper/skipperarms.mdl", 0, "00000000" )
list.Set( "PlayerOptionsModel", "Skipper", "models/cktheamazingfrog/player/skipper/skipper.mdl" )

local Category = "The Penguins"

local NPC = {   
        Name = "Skipper Hostile", 
        Class = "npc_combine_s", 
        Model = "models/cktheamazingfrog/player/skipper/skipper.mdl",              
        Health = "100",                 
        KeyValues = { citizentype = 4 },                 
        Category = Category,
        Squadname = "Bad Penguin Leader"
}

list.Set( "NPC", "npc_skipperenemy", NPC ) 

local NPC = {   
        Name = "Skipper Friendly", 
        Class = "npc_citizen", 
        Model = "models/cktheamazingfrog/player/skipper/skipper.mdl",                
        Health = "100",                 
        KeyValues = { citizentype = 4 },                 
        Category = Category,
        Squadname = "Good Penguin Leader"
}

list.Set( "NPC", "npc_skipperfriend", NPC )
--lua/slib/vgui/cl_slistview.lua:
local PANEL = {}

local font = slib.createFont("Roboto", 15)
local textcolor, maincolor_7, linecol, neutralcolor, margin = slib.getTheme("textcolor"), slib.getTheme("maincolor", 7), Color(24,24,24,160), slib.getTheme("neutralcolor"), slib.getTheme("margin")

function PANEL:Init()
    self.Columns = self.Columns or {}
    self.Lines = self.Lines or {}

    self.columniteration = 0
    self.lineiteration = 0
    
    self.assortment = self.assortment or {}

    slib.wrapFunction(self, "Dock", nil, function() return self end, true)
    slib.wrapFunction(self, "SetSize", nil, function() return self end, true)
	slib.wrapFunction(self, "Center", nil, function() return self end, true)
	slib.wrapFunction(self, "SetPos", nil, function() return self end, true)
	slib.wrapFunction(self, "MakePopup", nil, function() return self end, true)
end

function PANEL:getColumnPos(col)
    local result = self.Columns[col]:GetPos()
    return select(1, result)
end

function PANEL:getColumnWide(col)
    return self.Columns[col]:GetWide()
end

local function differenciate(a, b)
    if isfunction(a) then a = a() end
    if isfunction(b) then b = b() end
    if isnumber(tonumber(a)) and isnumber(tonumber(b)) then return tonumber(a), tonumber(b) end

    if !(isstring(a) == isstring(b)) or isbool(a) or isbool(b) then
        return tostring(a), tostring(b)
    end

    return a, b
end

function PANEL:addColumn(name)
    if !IsValid(self.topbar) then
        self.topbar = vgui.Create("EditablePanel", self)
        self.topbar:Dock(TOP)
        self.topbar:SetZPos(-32768)
        self.topbar:SetTall(slib.getScaledSize(25, "y"))

        self.topbar.Paint = function(s,w,h)
            surface.SetDrawColor(maincolor_7)
            surface.DrawRect(0, 0, w, h)

            surface.SetDrawColor(linecol)
            surface.DrawRect(0, h - 1, w - 1, 1)
        end
    end

    self.columniteration = self.columniteration + 1

    local iteration = self.columniteration
    local ignoreWidth = false


    if istable(name) then
        if name[2] then
            ignoreWidth = name[2]
        end
        name = name[1]
    end

    self.Columns[iteration] = vgui.Create("DButton", self.topbar)
    self.Columns[iteration]:Dock(LEFT)
    self.Columns[iteration]:SetWide(self:GetWide() / #self.Columns)
    self.Columns[iteration].Width = self:GetWide() / #self.Columns
    self.Columns[iteration]:SetText("")
    self.Columns[iteration].name = name
    self.Columns[iteration].iteration = iteration
    self.Columns[iteration].ignoreWidth = ignoreWidth

    self.Columns[iteration].DoClick = function()
        if self.assortment.iteration == iteration then
            self.assortment.ascending = !self.assortment.ascending
        else
            self.assortment.iteration = iteration
            self.assortment.ascending = true
        end
        
        local basictable = {}
        local cleantable = {}

        for i=1,#self.Lines do
            local tbl = self.Columns[iteration]["lines"][i]
            local sortvalue = istable(tbl) and (tbl.sortvalue or tbl.text) or tbl

            table.insert(basictable, sortvalue)
        end
        
        if self.assortment.ascending then
            table.sort(basictable, function(a, b) a, b = differenciate(a, b) return a > b end)
        else
            table.sort(basictable, function(a, b) a, b = differenciate(a, b) return a < b end)
        end

        for i, z in pairs(basictable) do
            cleantable[z] = i
        end
        
        for i=1,#self.Lines do
            local tbl = self.Columns[iteration]["lines"][i]
            local final = istable(tbl) and (tbl.sortvalue or tbl.text) or tbl

            if !IsValid(self.Lines[i]) then continue end

            self.Lines[i]:SetZPos(cleantable[final])
        end
    end

    self.Columns[iteration].Paint = function(s,w,h)
        draw.SimpleText(name, font, slib.getTheme("margin"), h * .5, textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end

    return self
end

function PANEL:addColumns(...)
    local args = {...}

    for k,v in pairs(args) do
        self:addColumn(v)
    end

    return self
end

function PANEL:addLine(...)
    local args = {...}
    if !IsValid(self.frame) then
        self.frame = vgui.Create("SScrollPanel", self)
        self.frame:Dock(FILL)
        self.frame:SetTall(slib.getScaledSize(25, "y"))
    end

    self.lineiteration = self.lineiteration + 1

    local iteration = self.lineiteration

    for k,v in ipairs(args) do
        local display = istable(v) and v[1] or v
        local sortingvalue

        if istable(v) and v[2] then
            sortingvalue = v[2]
        end

        self.Columns[k]["lines"] = self.Columns[k]["lines"] or {}
        self.Columns[k]["lines"][iteration] = self.Columns[k]["lines"][iteration] or {}
        
        self.Columns[k]["lines"][iteration]["text"] = display
        
        if sortingvalue then
            self.Columns[k]["lines"][iteration]["sortvalue"] = sortingvalue
        end
    end

    self.Lines[iteration] = vgui.Create("DButton", self)
    self.Lines[iteration]:Dock(TOP)
    self.Lines[iteration]:SetTall(slib.getScaledSize(25, "y"))
    self.Lines[iteration]:SetText("")
    self.Lines[iteration].InitDoClick = self.Lines[iteration].DoClick

    self.Lines[iteration].Think = function()
        self.Lines[iteration]:SetMouseInputEnabled(self.Lines[iteration].DoClick ~= self.Lines[iteration].InitDoClick)
    end

    self.Lines[iteration].Paint = function(s,w,h)
        local wantedcolor = neutralcolor

        if !s:IsHovered() then
            wantedcolor = table.Copy(wantedcolor)
            wantedcolor.a = 0
        end
        
        surface.SetDrawColor(slib.lerpColor(s, wantedcolor))
        surface.DrawRect(0, 0, w, h)
        
        for i = 1,#self.Columns do
            local display = self.Columns[i]["lines"][iteration].text

            if isfunction(display) then
                display = display()
            end

            local x,y = self:getColumnPos(i), h * .5
            local w = self:getColumnWide(i)

            if w < (self:getTextWidth(display, self.Columns[i].maxTxtLen) + margin * 2) then self:resizeColumns() end
            if i == 1 then
                s.name = display
            end

            if self.Columns[i].ignoreWidth or self.Columns[i].maxTxtLen then
                surface.SetFont(font)
                local txt_h = select(2, surface.GetTextSize(display))
                local screen_x, screen_y = s:LocalToScreen(0,0)

                render.SetScissorRect(screen_x + x, screen_y, screen_x + x + self.Columns[i]:GetWide() - margin, screen_y + h, true)
                draw.SimpleText(display, font, x + slib.getTheme("margin"), y, textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
                render.SetScissorRect(0, 0, 0, 0, false)
            else

                if self.Columns[i].customRender and self.Columns[i].customRender(x, 0, w, h, s) == true then return end

                draw.SimpleText(display, font, x + slib.getTheme("margin"), y, textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
            end
        end
    end

    self:resizeColumns()

    return self, self.Lines[iteration]
end

function PANEL:getTextWidth(txt, max)
    txt = tostring(txt)

    if max then
        txt = string.sub(txt, 1, max)
    end

    surface.SetFont(font)

    return surface.GetTextSize(txt)
end

function PANEL:resizeColumns()
    local columnsizes = {}
    local fullwidth = self:GetWide()
    local spaceleft = 0

    for k, v in pairs(self.Columns) do
        local ignoreWidth = self.Columns[k].ignoreWidth
        surface.SetFont(font)

        local longest = self:getTextWidth(self.Columns[k].name)
        if ignoreWidth then columnsizes[k] = isstring(ignoreWidth) and self:getTextWidth(ignoreWidth) or longest continue end
        if !self.Columns[k]["lines"] then continue end
        for i, z in pairs(self.Columns[k]["lines"]) do
            local compare = isfunction(z.text) and z.text() or z.text
            local width = self:getTextWidth(compare, self.Columns[k].maxTxtLen) + (slib.getTheme("margin") * 10)
            if longest < width then longest = width end
        end

        columnsizes[k] = longest
    end

    local occupiedspace = 0
    for k,v in pairs(columnsizes) do
        occupiedspace = occupiedspace + v
    end

    for k,v in pairs(self.Columns) do
        local v = columnsizes[k] or 0

        local gapadd = (fullwidth - occupiedspace) / #self.Columns
        self.Columns[k]:SetWide(v + gapadd)
    end
end

function PANEL:OnSizeChanged()
    self:resizeColumns()
end

function PANEL:PaintOver(w,h)
    for k,v in pairs(self.Columns) do
        if k >= #self.Columns then break end
        local x,y = self:getColumnPos(k), h * .5
        local w = self:getColumnWide(k)
        surface.SetDrawColor(linecol)
        surface.DrawRect(x + w - 1, 0, 1, h)
    end
end

vgui.Register("SListView", PANEL, "SScrollPanel")
--lua/slib/vgui/cl_splayerpanel.lua:
return gluapack()()
--lua/slib/vgui/cl_splayerpanel.lua:
local PANEL = {}

local font = slib.createFont("Roboto", 15)
local textcolor, maincolor_7 = slib.getTheme("textcolor"), slib.getTheme("maincolor", 7)

function PANEL:Init()
    local tall = slib.getScaledSize(25, "y")
    self:SetTall(tall)
    self:Dock(TOP)

    self.playerImage = vgui.Create("AvatarImage", self)
    self.playerImage:SetSize(tall, tall)

    self:DockMargin(0, 0, 0, slib.getTheme("margin"))
    self:GetParent():DockPadding(slib.getTheme("margin"), slib.getTheme("margin"), slib.getTheme("margin"), slib.getTheme("margin"))
end

function PANEL:addButton(title, func)
    local bttn = vgui.Create("SButton", self)
    bttn:setTitle(title)
    :Dock(RIGHT)
    :DockMargin(0,slib.getTheme("margin"),slib.getTheme("margin"),slib.getTheme("margin"))

    bttn.DoClick = func

    return self
end

function PANEL:setPlayer(ply)
    self.ply = ply
    self.name = self.ply:Nick()
    self.playerImage:SetPlayer(ply, 64)

    return self
end

function PANEL:Paint(w,h)
    if !self.ply then self:Remove() end

    surface.SetDrawColor(maincolor_7)
    surface.DrawRect(0, 0, w, h)

    if self.ply then
        draw.SimpleText(self.name, font, slib.getScaledSize(25, "y") + slib.getTheme("margin"), h * .5, textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end
end

vgui.Register("SPlayerPanel", PANEL, "EditablePanel")
--lua/slib/vgui/cl_ssearchbar.lua:
local PANEL = {}

local maincolor_15, accentcolor, margin = slib.getTheme("maincolor", 15), slib.getTheme("accentcolor"), slib.getTheme("margin")

function PANEL:Init()
    self:Dock(TOP)
    self:SetTall(slib.getScaledSize(25, "y"))
    self.font = slib.createFont("Roboto", 15)
    self.material = Material("slib/icons/search32.png", "noclamp smooth")
    self.bg = maincolor_15

    self.entry = vgui.Create( "STextEntry", self )
    self.entry:Dock(FILL)

    slib.wrapFunction(self, "SetZPos", nil, function() return self end, true)
    slib.wrapFunction(self, "Dock", nil, function() return self end, true)
    slib.wrapFunction(self, "DockMargin", nil, function() return self end, true)
    slib.wrapFunction(self, "SetWide", nil, function() return self end, true)
end

function PANEL:addIcon()
    self.icon = true
    self.entry:DockMargin(slib.getScaledSize(25, "y") + margin,0,0,0)
    self.entry:AccentSideLine(true)
    
    return self
end

function PANEL:SetPlaceholder(str)
    self.entry:SetPlaceholder(str)
end

function PANEL:Paint(w,h)
    local size = h * .65
    local pos = h * .5 - (size * .5)

    if self.bg then
        surface.SetDrawColor(self.bg)
        surface.DrawRect(0, 0, w, h)
    end

    local wantedcolor = accentcolor
    wantedcolor.a = self.entry:HasFocus() and 120 or 20

    surface.SetDrawColor(slib.lerpColor(self, wantedcolor))
    surface.DrawRect(h - 1, margin, 1, h - (margin * 2))

    if self.icon then
        surface.SetDrawColor(color_white)
        surface.SetMaterial(self.material)
        surface.DrawTexturedRect(pos, pos, size, size)
    end
end

vgui.Register("SSearchBar", PANEL, "EditablePanel")
--lua/slib/vgui/cl_sstatement.lua:
local PANEL = {}

local colorpickerMat, checkmarkMat = Material("slib/icons/color-picker16.png", "noclamp smooth" ), Material("slib/icons/checkmark.png", "noclamp smooth" )

local textcolor, textcolor_50, maincolor, maincolor_7, maincolor_10, accentcolor, cleanaccentcolor = slib.getTheme("textcolor"), slib.getTheme("textcolor", -50), slib.getTheme("maincolor"), slib.getTheme("maincolor", 7), slib.getTheme("maincolor", 10), slib.getTheme("accentcolor"), slib.getTheme("accentcolor")
local margin = slib.getTheme("margin")

function PANEL:Init()
    self:Dock(TOP)
    self:SetTall(slib.getScaledSize(25, "y"))
    self:DockMargin(margin, 0, margin, margin)
    self.font = slib.createFont("Roboto", 14)
	self.bg = maincolor_7
	self.elemBg = maincolor
	
	slib.wrapFunction(self, "SetZPos", nil, function() return self end, true)
	slib.wrapFunction(self, "DockMargin", nil, function() return self end, true)
end

function PANEL:Paint(w,h)
    surface.SetDrawColor(self.bg)
    surface.DrawRect(0, 0, w, h)
	
    draw.SimpleText(self.name, self.font, self.center and w * .5 - self.xoffset - margin or margin, h * .5, textcolor, self.center and TEXT_ALIGN_CENTER or TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
end

function PANEL:OnSizeChanged(w, h)
	if self.center then
		self:setCenter()
	end
end

function PANEL:setCenter()
	self.center = true

	self.xoffset = self.element:GetWide() * .5

	surface.SetFont(self.font)
	local w, h = surface.GetTextSize(self.name)

	local l,t,r,b = self.element:GetDockMargin()
	self.element:DockMargin(l,t,self:GetWide() * .5 - self.xoffset - (w * .5) - margin,b)
end

function PANEL:addStatement(name, value)
    self.name = name
	local statement = slib.getStatement(value)
	local element

	if statement == "color" then
		element = vgui.Create("SButton", self)
		element:SetWide(slib.getScaledSize(25, "y") - slib.getScaledSize(2, "x") - slib.getScaledSize(2, "x"))
		element.color = value
		element.old_color = value

		element.Paint = function(s,w,h)
			draw.RoundedBox(h * .3, 0, 0, w, h, element.color)

			surface.SetDrawColor(textcolor_50)
			surface.SetMaterial(colorpickerMat)
			local sizew, sizeh = 16, 16

			surface.DrawTexturedRect( (w * .5) - (sizew * .5), (h * .5) - (sizeh * .5), sizew, sizeh )
		end

		element.OnRemove = function()
			if IsValid(element.ColorPicker) then element.ColorPicker:Remove() end
		end

		element.DoClick = function()
			if element.ColorPicker and IsValid(element.ColorPicker) then return end

			local posx, posy = self:LocalToScreen( element:GetPos() )

			element.ClosePicker = vgui.Create("SButton")
			element.ClosePicker:Dock(FILL)
			element.ClosePicker:MakePopup()
			element.ClosePicker.DoClick = function()
				if IsValid(element.ColorPicker) then element.ColorPicker:Remove() end
				if IsValid(element.ClosePicker) then element.ClosePicker:Remove() end
			end

			element.ClosePicker.Paint = function() end

			element.ColorPicker = vgui.Create("DColorMixer")
			element.ColorPicker:SetSize( slib.getScaledSize(200, "x"), slib.getScaledSize(160, "y") )
			element.ColorPicker:SetPos( posx - element.ColorPicker:GetWide(), posy )
			element.ColorPicker:SetPalette(false)
			element.ColorPicker:SetAlphaBar(false)
			element.ColorPicker:SetAlphaBar( true )
			element.ColorPicker:SetWangs(false)
			element.ColorPicker:SetColor(element.color and element.color or Color(255,0,0))
			element.ColorPicker:MakePopup()

			element.ColorPicker.Think = function()
				element.color = element.ColorPicker:GetColor()
			end

			element.ColorPicker.OnRemove = function()
				element.old_color = element.color

				if isfunction(element.onValueChange) then
					local result = element.onValueChange(element.color)
					if result == false then element.color = element.old_color end
				end
			end
		end
	elseif statement == "bool" then
		element = vgui.Create("SButton", self)
		element:SetWide(slib.getScaledSize(25, "y") - slib.getScaledSize(2, "x") - slib.getScaledSize(2, "x"))
		element.basealpha = cleanaccentcolor.a

		element.Paint = function(s,w,h)
			draw.RoundedBox(h * .3, 0, 0, w, h, self.elemBg)
            
            local wantedcolor = accentcolor

			wantedcolor.a = s.enabled and element.basealpha or 0
		
			local ico_size = h * .55

			surface.SetDrawColor(slib.lerpColor(s, wantedcolor, 3))
			surface.SetMaterial(checkmarkMat)
			surface.DrawTexturedRect(w * .5 - ico_size * .5,h * .5 - ico_size * .5, ico_size, ico_size)
		end

		element.enabled = value

		element.DoClick = function()
			element.enabled = !element.enabled
            
            if isfunction(element.onValueChange) then
				local result = element.onValueChange(element.enabled)
				if result == false then element.enabled = !element.enabled end
            end
		end
	elseif statement == "int" then
		element = vgui.Create("DNumberWang", self)
		element:SetWide(slib.getScaledSize(50, "x"))
		element:SetDrawLanguageID(false)
		element:SetFont(self.font)
		element:SetMin(0)
		element:SetMax(2000000)
		element.oldValue = value

		element.Paint = function(s,w,h)
			draw.RoundedBox(h * .3, 0, 0, w, h, self.elemBg)

			s:DrawTextEntryText(textcolor, cleanaccentcolor, cleanaccentcolor)
		end

		element.OnValueChanged = function(ignore)
			local oldValue = element.oldValue
			local newValue = element:GetValue()

			timer.Create(tostring(element), .3, 1, function()
				if isfunction(element.onValueChange) then
					local result = element.onValueChange(newValue)
					if result == false then
						element.oldValue = oldValue
						element:SetText(oldValue)
					return end

					element.oldValue = newValue
				end
			end)
		end

		element:SetText(value)
	elseif statement == "function" or statement == "table" then
		element = vgui.Create("SButton", self)
		element:Dock(RIGHT)
		element:DockMargin(0,slib.getTheme("margin"),slib.getTheme("margin"),slib.getTheme("margin"))
		element:setTitle(statement == "function" and "Execute" or "View Table")

		element.DoClick = function()
			if statement == "function" then
				value()
			return end
			
			local display_data = vgui.Create("STableViewer")
			display_data:setTable(value)
			display_data:SetBG(false, true, nil, true)

			if isfunction(element.onElementOpen) then
				element.onElementOpen(display_data)
			end
		end
	elseif statement == "string" then
		element = vgui.Create("DTextEntry", self)
		element:SetWide(slib.getScaledSize(80, "x"))
		element:SetDrawLanguageID(false)
		element:SetFont(self.font)
		element.Paint = function(s,w,h)
			draw.RoundedBox(h * .3, 0, 0, w, h, self.elemBg)

			s:DrawTextEntryText(textcolor, cleanaccentcolor, cleanaccentcolor)
		end
    end
    
    element:Dock(RIGHT)
    element:DockMargin(0,slib.getScaledSize(2, "x"),slib.getScaledSize(2, "x"),slib.getScaledSize(2, "x"))

	self.element = element

	return self, element
end

vgui.Register("SStatement", PANEL, "EditablePanel")
--addons/gprotect_1.13.99/lua/g_protect/sh_gprotect_operators.lua:
gProtect = gProtect or {config = {}}
gProtect.config = gProtect.config or {}

gProtect.config.ModuleCoordination = {
	["general"] = -3,
	["ghosting"] = 2,
	["damage"] = 3,
	["anticollide"] = 4,
	["spamprotection"] = 5,
	["spawnrestriction"] = 6,
	["toolgunsettings"] = 7,
	["physgunsettings"] = 8,
	["gravitygunsettings"] = 9,
	["canpropertysettings"] = 10,
	["canusesettings"] = 11,
	["advdupe2"] = 12,
	["miscs"] = 13
}

gProtect.config.ModuleShouldDisplay = {
	["advdupe2"] = function()
		if !AdvDupe2 then return false end
	end,
}

gProtect.config.sortOrders = {
	["general"] = {
		["blacklist"] = 0,
		["remDiscPlyEnt"] = 2,
		["remDiscPlyEntSpecific"] = 3,
		["remOutOfBounds"] = 4,
		["remOutOfBoundsWhitelist"] = 5,
		["protectedFrozenEnts"] = 6,
		["protectedFrozenGroup"] = 7
	},

	["ghosting"] = {
		["enabled"] = 1,
		["ghostColor"] = 2,
		["antiObscuring"] = 3,
		["obscureOffset"] = 4,
		["onPhysgun"] = 5,
		["useBlacklist"] = 6,
		["entities"] = 7,
		["forceUnfrozen"] = 8,
		["forceUnfrozenEntities"] = 9,
		["enableMotion"] = 10
	},

	["damage"] = {
		["enabled"] = 1,
		["useBlacklist"] = 2,
		["entities"] = 3,
		["blacklistedEntPlayerDamage"] = 4,
		["vehiclePlayerDamage"] = 5,
		["worldPlayerDamage"] = 6,
		["immortalEntities"] = 7,
		["bypassGroups"] = 8,
		["canDamageWorldEntities"] = 9
	},

	["anticollide"] = {
		["enabled"] = 1,
		["notifyStaff"] = 2,
		["protectDarkRPEntities"] = 3,
		["DRPentitiesThreshold"] = 4,
		["DRPentitiesException"] = 5,
		["protectSpawnedEntities"] = 6,
		["entitiesThreshold"] = 7,
		["entitiesException"] = 8,
		["protectSpawnedProps"] = 9,
		["propsThreshold"] = 10,
		["propsException"] = 11,
		["playerPropAction"] = 12,
		["playerPropThreshold"] = 13,
		["useBlacklist"] = 14,
		["ghostEntities"] = 15,
		["specificEntities"] = 16,
		["squaredPhysicsMaxSize"] = 17,
		["squaredPhysicsEnts"] = 18
	},

	["spamprotection"] = {
		["enabled"] = 1,
		["threshold"] = 2,
		["delay"] = 3,
		["action"] = 4,
		["notifyStaff"] = 5,
		["protectProps"] = 6,
		["protectEntities"] = 7,
	},

	["spawnrestriction"] = {
		["enabled"] = 1,
		["propSpawnPermission"] = 2,
		["SENTSpawnPermission"] = 3,
		["SWEPSpawnPermission"] = 4,
		["vehicleSpawnPermission"] = 5,
		["NPCSpawnPermission"] = 6,
		["ragdollSpawnPermission"] = 7,
		["effectSpawnPermission"] = 8,
		["blockedEntities"] = 9,
		["blockedEntitiesIsBlacklist"] = 10,
		["blockedModels"] = 11,
		["blockedModelsisBlacklist"] = 12,
		["blockedModelsVehicleBypass"] = 13,
		["bypassGroups"] = 14,
		["maxPropModelComplexity"] = 15,
		["maxModelSize"] = 16
	},

	["toolgunsettings"] = {
		["enabled"] = 1,
		["targetWorld"] = 2,
		["targetPlayerOwned"] = 3,
		["targetPlayerOwnedProps"] = 4,
		["targetVehiclePermission"] = 5,
		["restrictTools"] = 6,
		["groupToolRestrictions"] = 7,
		["bypassGroups"] = 8,
		["entityTargetability"] = 9,
		["bypassTargetabilityTools"] = 10,
		["bypassTargetabilityGroups"] = 11,
		["antiSpam"] = 12
	},

	["physgunsettings"] = {
		["enabled"] = 1,
		["targetWorld"] = 2,
		["targetPlayerOwned"] = 3,
		["targetPlayerOwnedProps"] = 4,
		["DisableReloadUnfreeze"] = 5,
		["PickupVehiclePermission"] = 6,
		["StopMotionOnDrop"] = 7,
		["blockMultiplePhysgunning"] = 8,
		["maxDropObstructs"] = 9,
		["maxDropObstructsAction"] = 10,
		["preventPropClimbing"] = 11,
		["preventPropClimbingThreshold"] = 12,
		["preventPropClimbingAction"] = 13,
		["blockedEntities"] = 14,
		["bypassGroups"] = 15
	},

	["gravitygunsettings"] = {
		["enabled"] = 1,
		["targetWorld"] = 2,
		["targetPlayerOwned"] = 3,
		["targetPlayerOwnedProps"] = 4,
		["DisableGravityGunPunting"] = 5,
		["blockedEntities"] = 6,
		["bypassGroups"] = 7
	},

	["canpropertysettings"] = {
		["enabled"] = 1,
		["targetWorld"] = 2,
		["targetPlayerOwned"] = 3,
		["targetPlayerOwnedProps"] = 4,
		["blockedProperties"] = 5,
		["blockedPropertiesisBlacklist"] = 6,
		["blockedEntities"] = 7,
		["bypassGroups"] = 8
	},

	["canusesettings"] = {
		["enabled"] = 1,
		["targetWorld"] = 2,
		["targetPlayerOwned"] = 3,
		["targetPlayerOwnedProps"] = 4,
		["blockedEntities"] = 5,
		["blockedEntitiesisBlacklist"] = 6,
		["bypassGroups"] = 7
	},

	["advdupe2"] = {
		["enabled"] = 1,
		["notifyStaff"] = 2,
		["PreventRopes"] = 3,
		["PreventScaling"] = 4,
		["PreventNoGravity"] = 5,
		["PreventTrail"] = 6,
		["PreventUnreasonableValues"] = 7,
		["PreventUnfreezeAll"] = 8,
		["BlacklistedCollisionGroups"] = 9,
		["WhitelistedConstraints"] = 10,
		["whitelistedClasses"] = 11,
		["DelayBetweenUse"] = 12
	},

	["miscs"] = {
		["enabled"] = 1,
		["ClearDecals"] = 2,
		["blacklistedFadingDoorMats_punishment"] = 3,
		["blacklistedFadingDoorMats"] = 4,
		["FadingDoorLag"] = 5,
		["DisableReloadUnfreeze"] = 6,
		["DisableMotion"] = 7,
		["DisableMotionEntities"] = 8,
		["DisableGravityGunPunting"] = 9,
		["freezeOnSpawn"] = 10,
		["preventFadingDoorAbuse"] = 11,
		["precisionMoveFix"] = 12,
		["preventSpawnNearbyPlayer"] = 13,
		["DRPEntForceOwnership"] = 14,
		["DRPMaxObstructsOnPurchaseEnts"] = 15,
		["DRPObstructsFilter"] = 16
	}
}

local function getEntitiesList()
	local tbl = {
		["prop_physics"] = true,
		["prop_physics_multiplayer"] = true,
		["prop_vehicle_jeep"] = true
	}

	for k,v in pairs(scripted_ents.GetList()) do
		tbl[v.ClassName or k] = true
	end
	
	return tbl
end

local function getUsergroups()
	local tbl = {}

	if CAMI and CAMI.GetUsergroups then for k,v in pairs(CAMI.GetUsergroups()) do tbl[k] = true end end

	return tbl
end

local function getTools()
	local tbl = {}

	for k,v in pairs(spawnmenu.GetTools()) do
		for i,z in pairs(v.Items) do
			for key, data in pairs(z) do
				if istable(data) and data.ItemName then
					if data.ItemName ~= string.lower(data.ItemName) then continue end
					tbl[data.ItemName] = true
				end
			end
		end
	end
	
	return tbl
end

local function getProperties()
	local tbl = {
		["ignite"] = true,
		["remover"] = true,
		["collision"] = true
	}

	module( "properties", package.seeall )
	
	for k,v in pairs(List) do tbl[k] = true end

	return tbl
end

gProtect.config.valueRules = { --- This is because the tableviewer is modular and coded to be as efficient as possible hence its structure.76561199225769191
	["general"] = {
		["blacklist"] = {tableAlternatives = getEntitiesList},
		["notifyType"] = {intLimit = {min = 0, max = 2}},
		["remDiscPlyEnt"] = {intLimit = {min = -1, max = 999}},
		["remDiscPlyEntSpecific"] = {customTable = "int", tableAlternatives = getEntitiesList},
		["remOutOfBounds"] = {intLimit = {min = -1, max = 999}},
		["remOutOfBoundsWhitelist"] = {tableAlternatives = getEntitiesList},
		["protectedFrozenEnts"] = {tableAlternatives = getEntitiesList},
	},
	["ghosting"] = {
		["entities"] = {tableAlternatives = getEntitiesList},
		["forceUnfrozenEntities"] = {tableAlternatives = getEntitiesList},
		["antiObscuring"] = {tableAlternatives = getEntitiesList},
		["obscureOffset"] = {intLimit = {min = 0, max = 300}},
	},
	["damage"] = {
		["entities"] = {tableAlternatives = getEntitiesList},
		["immortalEntities"] = {tableAlternatives = getEntitiesList},
		["bypassGroups"] = {tableAlternatives = getUsergroups},
		["canDamageWorldEntities"] = {tableAlternatives = getUsergroups},
	},
	["anticollide"] = {
		["ghostEntities"] = {tableAlternatives = getEntitiesList},
		["threshold"] = {intLimit = {min = 0, max = 100000}},
		["delay"] = {intLimit = {min = 0, max = 30}},
		["action"] = {intLimit = {min = 1, max = 3}},
		["exception"] = {intLimit = {min = 0, max = 2}},
		["protectDarkRPEntities"] = {intLimit = {min = 0, max = 4}},
		["protectSpawnedEntities"] = {intLimit = {min = 0, max = 3}},
		["protectSpawnedProps"] = {intLimit = {min = 0, max = 4}},
		["specificEntities"] = {customTable = "int", tableAlternatives = getEntitiesList},
		["squaredPhysicsEnts"] = {tableAlternatives = getEntitiesList},
		["playerPropAction"] = {intLimit = {min = 0, max = 4}},
	},
	["spamprotection"] = {
		["threshold"] = {intLimit = {min = 0, max = 100000}},
		["delay"] = {intLimit = {min = 0, max = 30}},
		["action"] = {intLimit = {min = 0, max = 2}}
 	},
	["spawnrestriction"] = {
		["blockedEntities"] = {tableAlternatives = getEntitiesList},
		["bypassGroups"] = {tableAlternatives = getUsergroups},
		["propSpawnPermission"] = {tableAlternatives = getUsergroups},
		["SENTSpawnPermission"] = {tableAlternatives = getUsergroups},
		["SWEPSpawnPermission"] = {tableAlternatives = getUsergroups},
		["vehicleSpawnPermission"] = {tableAlternatives = getUsergroups},
		["NPCSpawnPermission"] = {tableAlternatives = getUsergroups},
		["ragdollSpawnPermission"] = {tableAlternatives = getUsergroups},
		["effectSpawnPermission"] = {tableAlternatives = getUsergroups},
		["maxPropModelComplexity"] = {intLimit = {min = 0, max = 100}},
		["maxModelSize"] = {intLimit = {min = 0, max = 100000}}
	},
	["toolgunsettings"] = {
		["restrictTools"] = {tableAlternatives = getTools},
		["groupToolRestrictions"] = {addRules = {list = {}, isBlacklist = true}, toggleableValue = "isBlacklist", tableDeletable = true, undeleteableTable = "list", tableAlternatives = getTools},
		["bypassGroups"] = {tableAlternatives = getUsergroups},
		["entityTargetability"] = {tableAlternatives = getEntitiesList, toggleableValue = "isBlacklist", onlymodifytable = true},
		["targetWorld"] = {tableAlternatives = getUsergroups},
		["targetPlayerOwned"] = {tableAlternatives = getUsergroups},
		["targetPlayerOwnedProps"] = {tableAlternatives = getUsergroups},
		["targetVehiclePermission"] = {tableAlternatives = getUsergroups},
		["blockedEntities"] = {tableAlternatives = getEntitiesList},
		["bypassTargetabilityTools"] = {tableAlternatives = getTools},
		["bypassTargetabilityGroups"] = {tableAlternatives = getUsergroups},
		["antiSpam"] = {customTable = "int", tableAlternatives = getTools},

	},
	["physgunsettings"] = {
		["targetWorld"] = {tableAlternatives = getUsergroups},
		["targetPlayerOwned"] = {tableAlternatives = getUsergroups},
		["targetPlayerOwnedProps"] = {tableAlternatives = getUsergroups},
		["maxDropObstructs"] = {intLimit = {min = 0, max = 10000}},
		["maxDropObstructsAction"] = {intLimit = {min = 1, max = 3}},
		["preventPropClimbingThreshold"] = {intLimit = {min = 1, max = 30}},
		["preventPropClimbingAction"] = {intLimit = {min = 1, max = 2}},
		["blockedEntities"] = {tableAlternatives = getEntitiesList},
		["bypassGroups"] = {tableAlternatives = getUsergroups},
		["PickupVehiclePermission"] = {tableAlternatives = getUsergroups}
	},
	["gravitygunsettings"] = {
		["targetWorld"] = {tableAlternatives = getUsergroups},
		["targetPlayerOwned"] = {tableAlternatives = getUsergroups},
		["targetPlayerOwnedProps"] = {tableAlternatives = getUsergroups},
		["blockedEntities"] = {tableAlternatives = getEntitiesList},
		["bypassGroups"] = {tableAlternatives = getUsergroups}
	},
	["canpropertysettings"] = {
		["blockedProperties"] = {tableAlternatives = getProperties},
		["targetWorld"] = {tableAlternatives = getUsergroups},
		["targetPlayerOwned"] = {tableAlternatives = getUsergroups},
		["targetPlayerOwnedProps"] = {tableAlternatives = getUsergroups},
		["bypassGroups"] = {tableAlternatives = getUsergroups},
		["blockedEntities"] = {tableAlternatives = getEntitiesList}
	},
	["canusesettings"] = {
		["targetWorld"] = {tableAlternatives = getUsergroups},
		["targetPlayerOwned"] = {tableAlternatives = getUsergroups},
		["targetPlayerOwnedProps"] = {tableAlternatives = getUsergroups},
		["blockedEntities"] = {tableAlternatives = getEntitiesList},
		["bypassGroups"] = {tableAlternatives = getUsergroups}
	},
	["advdupe2"] = {
		["WhitelistedConstraints"] = {tableAlternatives = {["weld"] = true, ["rope"] = true, ["axis"] = true, ["ballsocket"] = true, ["elastic"] = true, ["hydraulic"] = true, ["motor"] = true, ["muscle"] = true, ["pulley"] = true, ["slider"] = true, ["winch"] = true}},
		["PreventRopes"] = {intLimit = {min = 0, max = 2}},
		["PreventScaling"] = {intLimit = {min = 0, max = 2}},
		["PreventNoGravity"] =  {intLimit = {min = 0, max = 2}},
		["PreventTrail"] =  {intLimit = {min = 0, max = 2}},
		["whitelistedClasses"] = {tableAlternatives = getEntitiesList},
	},

	["miscs"] = {
		["ClearDecals"] = {intLimit = {min = 0, max = 1200}},
		["NoBlackoutGlitch"] = {intLimit = {min = 0, max = 3}},
		["DRPEntForceOwnership"] = {tableAlternatives = getEntitiesList},
		["DisableMotionEntities"] = {tableAlternatives = getEntitiesList},
	}
}
--addons/gprotect_1.13.99/lua/g_protect/client/cl_blockedmodels.lua:
local deleteNames = {
	["#spawnmenu.menu.delete"] = true,
	["#collision_off"] = true,
	["#spawnmenu.menu.spawn_with_toolgun"] = true
}

local function addOptions(menu, type, tbl, copy, prespacer, postspacer)
	tbl = util.TableToJSON(tbl)
	if prespacer then
		menu:AddSpacer()
	end

	menu:AddOption( gProtect.config.Prefix..slib.getLang("gprotect", gProtect.config.SelectedLanguage, type == "model" and "add-blocked-models" or "add-blacklisted-ents"), function()
		net.Start("gP:Networking")
		net.WriteUInt(2,2)
		net.WriteUInt(type == "model" and 1 or 2, 2)
		net.WriteString(tbl)
		net.WriteBool(true)
		net.SendToServer()
	end ):SetIcon("icon16/add.png")

	menu:AddOption( gProtect.config.Prefix..slib.getLang("gprotect", gProtect.config.SelectedLanguage, type == "model" and "remove-blocked-models" or "remove-blacklisted-ents"), function()
		net.Start("gP:Networking")
		net.WriteUInt(2,2)
		net.WriteUInt(type == "model" and 1 or 2, 2)
		net.WriteString(tbl)
		net.WriteBool(false)
		net.SendToServer()
	end ):SetIcon("icon16/delete.png")

	if copy then
		menu:AddOption( gProtect.config.Prefix..slib.getLang("gprotect", gProtect.config.SelectedLanguage, "copy-clipboard"), function()
			SetClipboardText(copy)
		end ):SetIcon("icon16/page_copy.png")
	end

	if postspacer then
		menu:AddSpacer()
	end
end

local function HandleMenuOptions(state, menu, name)
	local hovered = vgui.GetHoveredPanel()
	local data = IsValid(hovered) and hovered:GetTable() or {}
	local ply = LocalPlayer()
	if IsValid(hovered) and deleteNames[name] then
		if state == "pre" then
			if data.m_strModelName and name ~= "#spawnmenu.menu.spawn_with_toolgun" then
				addOptions(menu, "model", {[data.m_strModelName] = true}, data.m_strModelName, false, true)
			end
		else
			if data.m_Type == "entity" then
				addOptions(menu, "entity", {[data.m_SpawnName] = true}, data.m_SpawnName, true, true)
			end

			if hovered.ClassName == "ContextMenu" then
				local ent = ply:GetEyeTrace().Entity
				if IsValid(ent) then
					if string.find(ent:GetClass(), "prop_") then
						local mdl = ent:GetModel()
						addOptions(menu, "model", {[mdl] = true}, mdl, true)
					else
						local classname = ent:GetClass()
						addOptions(menu, "entity", {[classname] = true}, classname, true, true)
					end
				end
			end
		end
	end
end

hook.Add("gP:PreAddedDMenuOption", "gP:OverrideMenuOptions", HandleMenuOptions)
hook.Add("gP:PostAddedDMenuOption", "gP:OverrideMenuOptions", HandleMenuOptions)

timer.Simple(1, function()
	local dmenu = baseclass.Get("DMenu")
	slib.wrapFunction(dmenu, "AddOption", function(menu, str) hook.Run("gP:PreAddedDMenuOption", "pre", menu, str) end, function(menu, str) hook.Run("gP:PostAddedDMenuOption", "post", menu, str) end)

	hook.Add( "SpawnlistOpenGenericMenu", "DragAndDropSelectionMenu", function( canvas )

		local selected = canvas:GetSelectedChildren()
		local allow = {}

		for k, v in pairs(selected) do
			if !IsValid(v) then continue end
			local data = v:GetTable()
			if data.m_Type == "entity" then allow["entity"] = true end
			if data.m_strModelName then allow["prop"] = true break end
		end

		local menu = DermaMenu()
	
		-- This is less than ideal
		local spawnicons = 0
		local icon = nil
		for id, pnl in pairs( selected ) do
			if ( pnl.InternalAddResizeMenu ) then
				spawnicons = spawnicons + 1
				icon = pnl
			end
		end
	
		if ( spawnicons > 0 ) then
			icon:InternalAddResizeMenu( menu, function( w, h )
	
				for id, pnl in pairs( selected ) do
					if ( !pnl.InternalAddResizeMenu ) then continue end
					pnl:SetSize( w, h )
					pnl:InvalidateLayout( true )
					pnl:GetParent():OnModified()
					pnl:GetParent():Layout()
					pnl:SetModel( pnl:GetModelName(), pnl:GetSkinID(), pnl:GetBodyGroup() )
				end
	
			end, language.GetPhrase( "spawnmenu.menu.resizex" ):format( spawnicons ) )
	
			menu:AddOption( language.GetPhrase( "spawnmenu.menu.rerenderx" ):format( spawnicons ), function()
				for id, pnl in pairs( selected ) do
					if ( !pnl.RebuildSpawnIcon ) then continue end
					pnl:RebuildSpawnIcon()
				end
			end ):SetIcon( "icon16/picture.png" )
		end

		if allow["prop"] and gProtect.HasPermission(LocalPlayer(), "gProtect_Settings") then
			local models = {}
			for k, v in pairs( selected ) do
				if !IsValid(v) then continue end
				local data = v:GetTable()
				if !data.m_strModelName then continue end
				models[data.m_strModelName] = true
			end

			addOptions(menu, "model", models, false, true, true)
		end

		if allow["entity"] and gProtect.HasPermission(LocalPlayer(), "gProtect_Settings") then
			local entities = {}
			for k, v in pairs( selected ) do
				if !IsValid(v) then continue end
				local data = v:GetTable()
				if !data.m_SpawnName then continue end
				entities[data.m_SpawnName] = true
			end

			addOptions(menu, "entity", entities, false, true, true)
		end

		menu:AddOption( language.GetPhrase( "spawnmenu.menu.deletex" ):format( #selected ), function()

			for k, v in pairs( selected ) do
				v:Remove()
			end
	
			hook.Run( "SpawnlistContentChanged" )
	
		end ):SetIcon( "icon16/bin_closed.png" )

		menu:Open()

	end )
end)
--addons/skeypad_1.2.36/lua/s_keypad/languages/sh_english.lua:
slib.setLang("skeypad", "en", "title", "sKeypad - Settings")
slib.setLang("skeypad", "en", "granted", "Granted")
slib.setLang("skeypad", "en", "denied", "Denied")
slib.setLang("skeypad", "en", "awaiting", "Awaiting")
slib.setLang("skeypad", "en", "undone_keypad", "Undone Keypad")
slib.setLang("skeypad", "en", "tool_name", "sKeypad")
slib.setLang("skeypad", "en", "tool_usage", [[This tool creates fading doors and links them to keypads.
1. Click on a prop to designate a door.
2. Click somewhere else to create a keypad.
3. Press F2 on a keypad to modify its settings.]])

slib.setLang("skeypad", "en", "tool_desc", "Place down a fading door and a keypad all in one tool!")
slib.setLang("skeypad", "en", "hold_length", "Hold Length")
slib.setLang("skeypad", "en", "start_faded", "Start Faded")
slib.setLang("skeypad", "en", "start_faded_help", "If checked, the door will start faded.")
slib.setLang("skeypad", "en", "toggle", "Toggle")
slib.setLang("skeypad", "en", "toggle_help", "If checked, the door will toggle between faded and non faded.")
slib.setLang("skeypad", "en", "auth_cansettings", "Auth Manage Settings")
slib.setLang("skeypad", "en", "auth_cansettings_help", "If checked, authed people can change settings.")
slib.setLang("skeypad", "en", "tooltip", "Be sure to change the default passcode!")
slib.setLang("skeypad", "en", "hide_passcode", "Hide passcode")
slib.setLang("skeypad", "en", "hide_passcode_help", "Enable this to hide the passcode.")
slib.setLang("skeypad", "en", "fading_material_help", "Select a fading material.")
slib.setLang("skeypad", "en", "access_code", "Access code")
slib.setLang("skeypad", "en", "4digit_passcode", "Max Length: 4")
slib.setLang("skeypad", "en", "max_4digit", "The passcode can be max 4 digits.")
slib.setLang("skeypad", "en", "triggered_alarm", "Someone has triggered an alarm on your keypad!")
slib.setLang("skeypad", "en", "cannot_afford", "You cannot afford to do this upgrade!")
slib.setLang("skeypad", "en", "purchased_upgrade", "You have successfully upgraded your keypad for $%s")
slib.setLang("skeypad", "en", "auth_list", "Auth List")
slib.setLang("skeypad", "en", "no_entries", "There are no enties.")
slib.setLang("skeypad", "en", "auth_party", "Auth party members")
slib.setLang("skeypad", "en", "auth_gang", "Auth gang members")
slib.setLang("skeypad", "en", "auth_faction", "Auth faction members")
slib.setLang("skeypad", "en", "auth_fpp_buddy", "Auth FPP buddy")
slib.setLang("skeypad", "en", "upgrades", "Upgrades")
slib.setLang("skeypad", "en", "modes", "Modes")
slib.setLang("skeypad", "en", "exploit_attempt", "Attempted to exploit")
slib.setLang("skeypad", "en", "insufficient_rank", "You have an insifficient rank to do this!")
slib.setLang("skeypad", "en", "access_granted", "Access Granted")
slib.setLang("skeypad", "en", "access_denied", "Access Denied")
slib.setLang("skeypad", "en", "log_granted", "{1} has successfully opened {2}.")
slib.setLang("skeypad", "en", "log_denied", "{1} has failed to open {2}.")
slib.setLang("skeypad", "en", "select_option", "Select Option")
slib.setLang("skeypad", "en", "players", "Players")
slib.setLang("skeypad", "en", "darkrp_jobs", "DarkRP Jobs")
slib.setLang("skeypad", "en", "cracking", "Cracking")

slib.setLang("skeypad", "en", "keycard_busy", "Keycard slot is busy!")

slib.setLang("skeypad", "en", "add_perma", "Add Perma Keypad")
slib.setLang("skeypad", "en", "remove_perma", "Remove Perma Keypad")

slib.setLang("skeypad", "en", "updated_permalist", "Successfully updated permalist")

slib.setLang("skeypad", "en", "code", "Code: ")
slib.setLang("skeypad", "en", "timer", "Timer: ")
slib.setLang("skeypad", "en", "inverted", "Inverted: ")
--addons/skeypad_1.2.36/lua/s_keypad/languages/sh_polish.lua:
return gluapack()()
--addons/skeypad_1.2.36/lua/s_keypad/languages/sh_polish.lua:
slib.setLang("skeypad", "pl", "title", "sKeypad - Ustawienia")
slib.setLang("skeypad", "pl", "granted", "Zgoda")
slib.setLang("skeypad", "pl", "denied", "Odmówiono")
slib.setLang("skeypad", "pl", "awaiting", "Czekam")
slib.setLang("skeypad", "pl", "undone_keypad", "Cofnięta klawiatura")
slib.setLang("skeypad", "pl", "tool_name", "sKeypad")
slib.setLang("skeypad", "pl", "tool_usage", [[To narzędzie tworzy zanikające drzwi i łączy je z klawiaturami.
1. Kliknij rekwizyt, aby wyznaczyć drzwi.
2. Kliknij gdzie indziej, aby utworzyć klawiaturę.
3. Naciśnij klawisz F2 na klawiaturze, aby zmodyfikować ustawienia.]])

slib.setLang("skeypad", "pl", "tool_desc", "Umieść zanikające drzwi i klawiaturę w jednym narzędziu!")
slib.setLang("skeypad", "pl", "hold_length", "Przytrzymaj długość")
slib.setLang("skeypad", "pl", "start_faded", "Start Faded")
slib.setLang("skeypad", "pl", "start_faded_help", "Jeśli zaznaczone, drzwi zaczną wyblaknąć.")
slib.setLang("skeypad", "pl", "auth_cansettings", "Auth Manage Settings")
slib.setLang("skeypad", "pl", "auth_cansettings_help", "Jeśli ta opcja jest zaznaczona, osoby uwierzytelnione mogą zmieniać ustawienia.")
slib.setLang("skeypad", "pl", "tooltip", "Pamiętaj, aby zmienić domyślne hasło!")
slib.setLang("skeypad", "pl", "hide_passcode", "Ukryj hasło")
slib.setLang("skeypad", "pl", "hide_passcode_help", "Włącz tę opcję, aby ukryć hasło.")
slib.setLang("skeypad", "pl", "access_code", "Kod dostępu")
slib.setLang("skeypad", "pl", "4digit_passcode", "Maksymalna długość: 4")
slib.setLang("skeypad", "pl", "max_4digit", "Kod dostępu może mieć maksymalnie 4 cyfry.")
slib.setLang("skeypad", "pl", "triggered_alarm", "Ktoś uruchomił alarm na twojej klawiaturze!")
slib.setLang("skeypad", "pl", "cannot_afford", "Nie możesz sobie pozwolić na to uaktualnienie!")
slib.setLang("skeypad", "pl", "purchased_upgrade", "Udało Ci się zaktualizować klawiaturę za $%s")
slib.setLang("skeypad", "pl", "auth_list", "Auth Lista")
slib.setLang("skeypad", "pl", "no_entries", "Nie ma entów.")
slib.setLang("skeypad", "pl", "auth_party", "Auth partii autoryzacji")
slib.setLang("skeypad", "pl", "auth_gang", "Auth członkowie gangu")
slib.setLang("skeypad", "pl", "auth_fpp_buddy", "Auth FPP buddy")
slib.setLang("skeypad", "pl", "upgrades", "Aktualizacje")
slib.setLang("skeypad", "pl", "modes", "Tryby")
slib.setLang("skeypad", "pl", "exploit_attempt", "Próbowano wykorzystać")
slib.setLang("skeypad", "pl", "insufficient_rank", "Masz niewystarczającą rangę, aby to zrobić!")
slib.setLang("skeypad", "pl", "access_granted", "Dostęp przyznany")
slib.setLang("skeypad", "pl", "access_denied", "Brak dostępu")
slib.setLang("skeypad", "pl", "log_granted", "{1} pomyślnie się otworzył {2}.")
slib.setLang("skeypad", "pl", "log_denied", "{1} nie udało się otworzyć {2}.")
slib.setLang("skeypad", "pl", "select_option", "Wybierz Opcja")
slib.setLang("skeypad", "pl", "players", "Gracze")
slib.setLang("skeypad", "pl", "darkrp_jobs", "DarkRP pracy")
slib.setLang("skeypad", "pl", "cracking", "Pękanie")
--lua/autorun/snoop_dogg_pm.lua.lua:
player_manager.AddValidModel( "Snopp Dogg", "models/snoopdogg.mdl" )
list.Set( "PlayerOptionsModel", "Snoop Dogg", "models/snoopdogg.mdl" )

--lua/autorun/snoopdogg_hq_npc.lua:
/*
	Addon by Voikanaa	
*/

local Category = "Voikanaa NPC"

local NPC = {	Name = "Snoop Dogg",
				Class = "npc_citizen",
				Model = "models/player/voikanaa/snoop_dogg_npc.mdl",
				Health = "100",
				KeyValues = { citizentype = 4 },
				Weapons = { "weapon_smg1" },
				Category = Category }

list.Set( "NPC", "npc_snoopdogg_hq", NPC )


// ----------------------- ENEMY --------------------------


local Category = "Voikanaa NPC"

local NPC = {	Name = "Snoop Dogg Enemy",
				Class = "npc_combine_s",
				Model = "models/player/voikanaa/snoop_dogg_npc.mdl",
				Health = "100",
				Weapons = { "weapon_smg1" },
				Category = Category }

list.Set( "NPC", "npc_snoopdogg_hq_enemy", NPC )
--addons/sreward_1.5.30/lua/s_reward/sh_sreward_config.lua:
-- Discord Tutorial:
-- 1. https://discord.com/developers/applications - Create a new application!
-- 2. Copy and fill in client_id [sh_config]
-- 3. Copy and fill in client_secret [sv_config]
-- 4. Enable Developer Mode in discord [Enabling Developer Mode is easy. Open your Discord settings (the next to your name at the bottom left) and click on Appearance. There you will find Developer Mode. Click the toggle to enable it.] - https://discordia.me/en/developer-mode
-- 5. Right Click Discord Server and press Copy ID and fill that into the guild_id [sh_config]
-- 6. Create a permanent invite link and add the end of the url into invite_id [sh_config]
-- 7. Enter the bot tab in your discord application and copy token into the bot_token [sv_config]
-- 8. Go into OAuth2 tab of the discord application and add a redirect link, example commuinity website
-- 9. Invite the bot to the server by using this link! [https://discordapp.com/api/oauth2/authorize?client_id=CLIENTIDHERE&permissions=8&response_type=code&scope=bot%20guilds]

-- Steam Tutorial:
-- 1. Add group_name, you can find it in the end of group link! Example: https://steamcommunity.com/groups/*GROUP_NAME* [sh_config]
-- 2. Setup a name tag, can be anything you see suited. [sh_config]
-- 3. Add steam api_key, you can find it here [https://steamcommunity.com/dev/apikey] [sv_config]
-- 4. Add steam group_id, to find it you need to press edit on your steam group.
-- Link: https://steamcommunity.com/groups/*GROUP_NAME*/edit then near the top it will say ID.
-- Copy and paste this ID into group_id [sv_config]

sReward = sReward or {}
sReward.config = sReward.config or {}
sReward.config["discord"] = sReward.config["discord"] or {} -- There is more to do in the sv_sreward_config file!
sReward.config["steam"] = sReward.config["steam"] or {} -- There is more to do in the sv_sreward_config file!

--  _______       _          _______              ___ _       
-- (_______)     (_)        (_______)            / __|_)      
--  _  _  _ _____ _ ____     _       ___  ____ _| |__ _  ____ 
-- | ||_|| (____ | |  _ \   | |     / _ \|  _ (_   __) |/ _  |
-- | |   | / ___ | | | | |  | |____| |_| | | | || |  | ( (_| |
-- |_|   |_\_____|_|_| |_|   \______)___/|_| |_||_|  |_|\___ |
--                                                     (_____|

sReward.config["language"] = "tr"

sReward.config["prefix"] = "[Venom Ödül] "

sReward.config["size"] = { -- Size of the reward menu
    w = 670, -- Width (def. 670)
    h = 520 -- Height (def. 520)
}

sReward.config["steam"]["group_name"] = "" -- Custom URL
sReward.config["steam"]["name_tag"] = {"[VRP]"} -- You can add multiple in here!

sReward.config["discord"]["client_id"] = ""  -- Look uptop for information!
sReward.config["discord"]["invite_id"] = ""
sReward.config["discord"]["guild_id"] = ""

sReward.config["max_referrals"] = 1

sReward.config["open_on_join"] = true

sReward.config["receive_referral_reward"] = { -- This is what you receive for referring someone.
    ["sr_tokens"] = 150,
    ["darkrp_money"] = 400
}

sReward.config["give_referral_reward"] = { -- This is what you receive for referring.
    ["sr_tokens"] = 100,
    ["darkrp_money"] = 200
}

sReward.config["permissions"] = {
    ["sReward_AdminMenu"] = {
        ["superadmin"] = true,
        ["owner"] = true,
    },
    ["sReward_AddTokenCommand"] = {
        ["superadmin"] = false,
        ["owner"] = false,
    }
}

sReward.config["enabled_tabs"] = { -- You can disable/enable tabs in here.
    ["tasks"] = true,
    ["referral"] = true,
    ["shop"] = true,
    ["leaderboard"] = true
}


--  ______                             _      
-- (_____ \                           | |     
--  _____) )_____ _ _ _ _____  ____ __| | ___ 
-- |  __  /| ___ | | | (____ |/ ___) _  |/___)
-- | |  \ \| ____| | | / ___ | |  ( (_| |___ |
-- |_|   |_|_____)\___/\_____|_|   \____(___/ 

sReward.config["rewards"] = { -- Ödüllerinizi buradan yapılandırabilirsiniz.
    {
        enabled = true,
        name = "Steam Grubu",
        instruction = "Steam grubumuza katılın, bu butona tıklayarak grubumuza yönlendirilirsiniz!",
        funcname = "VerifySteamGroup",
        instructionFunc = function() gui.OpenURL("https://steamcommunity.com/groups/"..sReward.config["steam"]["group_name"]) end,
        maxuse = 1,
        cooldown = 0,
        net_cd = 5,
        reward = {
            ["sr_tokens"] = 150,
            ["darkrp_money"] = 30000,
        },
        -- custom = function(ply)
        --     Buraya istediğiniz özelleştirilmiş kodu yazabilirsiniz!
        -- end
    },
    {
        enabled = true,
        name = "Steam İsmi",
        instruction = "Steam isminize etiketimizi ekleyin, bu butona basarak etiketi panoya kopyalayabilirsiniz!",
        funcname = "VerifySteamNameTag",
        instructionFunc = function()
            SetClipboardText(sReward.config["steam"]["name_tag"][1])
            slib.notify(sReward.config["prefix"]..slib.getLang("sreward", sReward.config["language"], "copied_clipboard"))
        end,
        maxuse = 0, -- Kullanıcıların bunu günlük olarak kullanmasına izin veriyoruz!
        cooldown = 86400, -- Bir gün!
        net_cd = 3,
        reward = {
            ["sr_tokens"] = 20,
            ["darkrp_money"] = 15000,
        }
    },
  /*   {
        enabled = true,
        name = "Discord'a Katıl",
        funcname = "VerifyDiscordJoin",
        instruction = "Discord sunucumuza katılın, bu butona basarak Discord'a yönlendirilirsiniz!",
        instructionFunc = function() gui.OpenURL("https://discord.gg/"..sReward.config["discord"]["invite_id"]) end,
        maxuse = 0, -- Kullanıcıların bunu günlük olarak kullanmasına izin veriyoruz!
        cooldown = 86400, -- Bir gün!
        net_cd = 5,
        reward = {
            ["sr_tokens"] = 150,
            ["darkrp_money"] = 40000,
        }
    },
   {
        enabled = true,
        name = "Discord Boost",
        funcname = "VerifyDiscordBoost",
        instruction = "Discord sunucumuzu boostlayın, ardından doğrulama yapın!",
        instructionFunc = function() gui.OpenURL("https://discord.gg/"..sReward.config["discord"]["invite_id"]) end,
        maxuse = 0, -- Kullanıcıların bunu günlük olarak kullanmasına izin veriyoruz!
        cooldown = 86400, -- Bir gün!
        net_cd = 5,
        reward = {
            ["sr_tokens"] = 50,
            ["darkrp_money"] = 30000,
        }
    },
    */
    {
        enabled = true,
        name = "Günlük Giriş",
        instruction = "Her gün gelerek ödüller kazanın!",
        maxuse = 0, -- Kullanıcıların bunu günlük olarak kullanmasına izin veriyoruz!
        cooldown = 86400, -- Bir gün!
        net_cd = 5,
        reward = {
            ["sr_tokens"] = 10,
            ["darkrp_money"] = 30000,
        }
    },
    {
        enabled = true,
        name = "1 Hafta Oynama Süresi",
        auto_claim = true,
        instruction = "Sunucuda vakit geçirerek ödül kazanın!",
        maxuse = 1,
        customCheck = function(ply)
            return sReward.CheckAllPlaytimes(ply, 604800) -- Bu sayı, 1 hafta (saniye cinsinden).
        end,
        customCheckMsg = "Bu ödülü almak için en az 1 hafta oynama süresine sahip olmalısınız!",
        net_cd = .5,
        reward = {
            ["sr_tokens"] = 20,
            ["darkrp_money"] = 50000,
        }
    },
}



--   ______ _                 
--  / _____) |                
-- ( (____ | |__   ___  ____  
--  \____ \|  _ \ / _ \|  _ \ 
--  _____) ) | | | |_| | |_| |
-- (______/|_| |_|\___/|  __/ 
--                     |_|    

sReward.config["shop"] = { -- These are examples, also you dont really need these as you can add items from the admin menu!
    [1] = {
        enabled = false,
        name = "VIP Rank",
        imgurid = "kMut76q",
        price = 200,
        reward = {
            ["reward_rank"] = "vip"
        }
    },
    [2] = {
        enabled = false,
        name = "20$ Gift Card",
        imgurid = "2YVOI55",
        price = 500,
        reward = {
            ["reward_rank"] = "vip"
        }
    },
    [3] = {
        enabled = true,
        name = "Spotify - 1 Month",
        imgurid = "GsS6Vg0",
        price = 400,
        reward = {
            ["coupon"] = "Spotify - 1 Month"
        }
    },
    [4] = {
        enabled = false,
        name = "Rocket League - Steam",
        imgurid = "hFIWT0u",
        price = 400,
        reward = {
            ["reward_rank"] = "vip"
        }
    },
    [5] = {
        enabled = false,
        name = "Minecraft - Mojang",
        imgurid = "F9hk4y9",
        price = 300,
        reward = {
            ["reward_rank"] = "vip"
        }
    },
    [6] = {
        enabled = false,
        name = "GTA V - Steam",
        imgurid = "TW38boy",
        price = 500,
        reward = {
            ["reward_rank"] = "vip"
        }
    },
    [7] = {
        enabled = false,
        name = "Cyberpunk 2077 - GOG",
        imgurid = "toU6qwS",
        price = 1300,
        reward = {
            ["reward_rank"] = "vip"
        }
    }
}
--addons/sreward_1.5.30/lua/s_reward/core/cl_admin_menu.lua:
sReward = sReward or {}
sReward.data = sReward.data or {}
sReward.data["referral"] = sReward.data["referral"] or {}
sReward.data["coupons"] = sReward.data["coupons"] or {}
sReward.data["rewards"] = sReward.data["rewards"] or {}
sReward.data["shop"] = sReward.data["shop"] or {}

sReward.couponNameToKey = sReward.couponNameToKey or {}

local sreward_menu

local white, textcolor, sidebarbttncolor, textcolor_min10, textcolor_min50, accentcolor, maincolor, maincolor_5, maincolor_7, maincolor_10, maincolor_15, successcolor, margin = Color(255,255,255), slib.getTheme("textcolor"), slib.getTheme("sidebarbttncolor"), slib.getTheme("textcolor", -10), slib.getTheme("textcolor", -50), slib.getTheme("accentcolor"), slib.getTheme("maincolor"), slib.getTheme("maincolor", 5), slib.getTheme("maincolor", 7), slib.getTheme("maincolor", 10), slib.getTheme("maincolor", 15), slib.getTheme("successcolor"), slib.getTheme("margin")
local failcolor = slib.getTheme("failcolor")

local maincolor_a100 = table.Copy(maincolor)
maincolor_a100.a = 100

local outline = Color(255,255,255,3)

local overlineFont = slib.createFont("Roboto", 13)

local hovercolor = slib.getTheme("hovercolor")
local reward_ico, task_ico, tokens_ico, referral_ico, copy_ico, coupon_ico, smiley_ico, buy_ico, admin_ico, return_ico = Material("sreward/giftbox.png", "smooth"), Material("sreward/checklist.png", "smooth"), Material("sreward/tokens.png", "smooth"), Material("sreward/affiliate.png", "smooth"), Material("sreward/copy.png", "smooth"), Material("sreward/coupon.png", "smooth"), Material("sreward/smiley.png", "smooth"), Material("sreward/buy.png", "smooth"), Material("sreward/admin.png", "smooth"), Material("sreward/back.png", "smooth")
local settings_ico, delete_ico = Material("sreward/gear.png", "smooth"), Material("sreward/delete.png", "smooth")


local function addIconButton(selcol, icon, func, parent)
    local bttn = vgui.Create("SButton", parent)
    bttn.DoClick = function()
        func()
    end

    local hovcol = table.Copy(selcol or white)
    hovcol.a = hovercolor.a

    bttn.Paint = function(s,w,h)
        local icosize = h * .7
        local wantedCol = s:IsHovered() and (selcol or white) or hovcol

        surface.SetDrawColor(slib.lerpColor(s, wantedCol))
        surface.SetMaterial(icon)
        surface.DrawTexturedRect(w * .5 - icosize * .5, h * .5 - icosize * .5, icosize, icosize)
    end

    return bttn
end

local function adminAction(ply, title, placeholder, func)
    local close = vgui.Create("SButton")
    close:MakePopup()
    close:SetSize(ScrW(), ScrH())
    close.Paint = function() end
    close.DoClick = function()
        close:Remove()
    end

    local popup = vgui.Create("SFrame", close)
    :SetSize(slib.getScaledSize(250, "x"),slib.getScaledSize(30 + 20 + 20 , "y") + (margin * 3))
    :setTitle(title)
    :Center()
    :addCloseButton()
    :MakePopup()
    :setBlur(true)

    local wide = popup:GetWide()

    popup.OnRemove = function()
        close:Remove()
    end

    local inputTypes = {
        ["int"] = "STextEntry",
        ["dropdown"] = "SDropDown"
    }

    popup.addInput = function(type)
        local element = vgui.Create(inputTypes[type], popup.frame)
        element:Dock(TOP)
        element:DockMargin(margin, margin, margin, 0)
        element:SetTall(slib.getScaledSize(20, "y"))
        element.placeholder = placeholder
        element.bg = maincolor_10

        if type == "int" then
            element:SetNumeric(true)
            element:SetRefreshRate(0)
        end

        element:SetPlaceholder(placeholder)

        return element
    end


    local submit = vgui.Create("SButton", popup.frame)
    submit:setTitle("Submit")
    submit:SetTall(slib.getScaledSize(20, "y"))
    submit:Dock(BOTTOM)
    submit:DockMargin(margin, margin, margin, margin)
    submit.bg = maincolor_10

    local spaceleft = popup.frame:GetTall() - submit:GetTall() - margin

    submit.DoClick = function()
        func(popup.value)
        popup:Remove()
    end

    return popup
end

local function doAdminAction(target, type, val)
    if !val or val == "" then return end
    net.Start("sR:NetworkingHandeler")
    net.WriteUInt(4,3)
    net.WriteBit(1)
    net.WriteUInt(target:EntIndex(), 16)
    net.WriteUInt(type, 2)
    net.WriteUInt(math.abs(tonumber(val)), 20)
    net.SendToServer()
end

local function addBasicsPage(parent)
    local canvas = vgui.Create("SScrollPanel", parent)
    canvas:Dock(FILL)
    canvas:GetCanvas():DockPadding(margin,0,margin,margin)

    local search = vgui.Create("SSearchBar", parent)
    search:Dock(TOP)
    search:DockMargin(margin,margin,margin,0)
    search:addIcon()
    search.bg = maincolor_7
    search.entry.onValueChange = function(newval)
        for k,v in pairs(canvas:GetCanvas():GetChildren()) do
            if !v.name then continue end
            if !string.find(string.lower(v.name), string.lower(newval)) then
                v:SetVisible(false)
            else
                v:SetVisible(true)
            end

            canvas:GetCanvas():InvalidateLayout(true)
        end
    end

    return canvas, search
end

local intToStorage = {
    [1] = "coupons",
    [2] = "shop"
}

local function networkAdminData(type, key)
    local data = sReward.data[intToStorage[type]][key] and table.Copy(sReward.data[intToStorage[type]][key]) or {}

    net.Start("sR:NetworkingHandeler")
    net.WriteUInt(4, 3)
    net.WriteBit(0)
    net.WriteUInt(type, 2)
    net.WriteString(util.TableToJSON(data))
    net.SendToServer()
end

local function addCoupon(parent, val, new)
    if !val then return end
    local key = sReward.couponNameToKey[val]
    
    local couponData = {name = val, data = {}}
    
    if new then
        key = table.insert(sReward.data["coupons"], couponData)
        sReward.couponNameToKey[val] = key
    end

    if parent[val] and IsValid(parent[val]) then return end

    local coupon = sReward.addMultibox(parent, {
        [1] = {
            title = slib.getLang("sreward", sReward.config["language"], "name"), 
            val = val,
            offset = 0
        },
        [2] = {
            title = slib.getLang("sreward", sReward.config["language"], "coupons"), 
            val = function() return sReward.data["coupons"][key] and sReward.data["coupons"][key].data and table.Count(sReward.data["coupons"][key].data) or 0 end,
            offset = 0.45
        }
    })

    coupon.addButton(slib.getLang("sreward", sReward.config["language"], "delete"), function()
        local popup = vgui.Create("SPopupBox")
        :setTitle(slib.getLang("sreward", sReward.config["language"], "are_you_sure"))
        :setBlur(true)
        :addChoise(slib.getLang("sreward", sReward.config["language"], "no"))
        :addChoise(slib.getLang("sreward", sReward.config["language"], "yes"), function()
            coupon:Remove()
            sReward.data["coupons"][key] = sReward.data["coupons"][key] or {}
            sReward.data["coupons"][key].delete = "confirmed"

            networkAdminData(1, key)
        end)
        :setText(slib.getLang("sreward", sReward.config["language"], "coupon_delete_confirm", val))
    end)

    coupon.addButton(slib.getLang("sreward", sReward.config["language"], "manage"), function()
        local close = vgui.Create("SButton")
        close:MakePopup()
        close:SetSize(ScrW(), ScrH())
        close.Paint = function(s,w,h) end
        close.DoClick = function()
            close:Remove()
        end

        local table_viewer = vgui.Create("STableViewer", close)
        :setTable(sReward.data["coupons"][key].data)
        :addEntry()

        table_viewer:addSearch(table_viewer.viewbox, table_viewer.viewer)
        :MakePopup()

        table_viewer.OnRemove = function()
            if table_viewer.modified then
                sReward.data["coupons"][val] = table_viewer.viewer.tbl
                networkAdminData(1, key)
            end

            if !IsValid(close) then return end
            close:Remove()
        end
    end)

    parent[val] = coupon

    if new then
        networkAdminData(1, key)
    end

    return coupon
end

local function addLabel(parent, txt)
    local font = slib.createFont("Roboto", 14)
    
    surface.SetFont(font)
    local height = select(2, surface.GetTextSize(txt))
    
    local label = vgui.Create("EditablePanel", parent)
    label:Dock(TOP)
    label:DockMargin(0,0,0,margin)
    label:SetTall(height)

    label.Paint = function(s,w,h)
        draw.SimpleText(txt, font, 0, h, textcolor_min50, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM)
    end

    return label
end

local function manageStoreItem(id)
    local key = id
    local data = {name = "", imgurid = "", price = 0, reward = {}, enabled = true}
    local new = true

    if id then
        data = table.Copy(sReward.data["shop"][id])
        data.oldname = data.name
        new = false
    end

    if new then
        key = table.insert(sReward.data["shop"], data)
        data = sReward.data["shop"][key]
    end

    local close = vgui.Create("SButton")
    close:MakePopup()
    close:SetSize(ScrW(), ScrH())
    close.Paint = function(s,w,h) end
    close.DoClick = function()
        close:Remove()
    end

    local store_management = vgui.Create("SFrame", close)
    :SetSize(slib.getScaledSize(230, "x"), 0)
    :setTitle(slib.getLang("sreward", sReward.config["language"], "manage_item"))
    :Center()
    :addCloseButton()
    :MakePopup()
    :setBlur(true)

    store_management.OnRemove = function()
        if !IsValid(close) then return end
        close:Remove()
    end

    store_management.frame:DockPadding(margin, margin, margin, margin)

    addLabel(store_management.frame, slib.getLang("sreward", sReward.config["language"], "name"))

    local name = vgui.Create("STextEntry", store_management.frame)
    :Dock(TOP)
    :DockMargin(0,0,0,margin * 2)

    name.bg = maincolor_7
    name:SetPlaceholder(slib.getLang("sreward", sReward.config["language"], "insert_name"))

    name.onValueChange = function(val)
        data.name = val
    end

    if data.name ~= "" then
        name:SetValue(data.name)
    end

    addLabel(store_management.frame, slib.getLang("sreward", sReward.config["language"], "price"))

    local price = vgui.Create("STextEntry", store_management.frame)
    :Dock(TOP)
    :DockMargin(0,0,0,margin * 2)

    price.bg = maincolor_7
    price:SetPlaceholder(slib.getLang("sreward", sReward.config["language"], "insert_price"))
    price:SetNumeric(true)

    price.onValueChange = function(val)
        data.price = val
    end

    if data.price ~= "" then
        price:SetValue(data.price)
    end

    addLabel(store_management.frame, slib.getLang("sreward", sReward.config["language"], "imgur_id"))

    local imgurid = vgui.Create("STextEntry", store_management.frame)
    :Dock(TOP)
    :DockMargin(0,0,0,margin)

    imgurid.bg = maincolor_7
    imgurid:SetPlaceholder(slib.getLang("sreward", sReward.config["language"], "insert_imgur_id"))

    local imgur_id = ""

    imgurid.onValueChange = function(val)
        imgur_id = val
        data.imgurid = val
    end

    if data.imgurid ~= "" then
        imgurid:SetValue(data.imgurid)
        imgur_id = data.imgurid
    end

    local imgur_prev = vgui.Create("EditablePanel", store_management.frame)
    imgur_prev:Dock(TOP)
    imgur_prev:SetTall(slib.getScaledSize(90, "y"))
    imgur_prev.Paint = function(s,w,h)
        surface.SetDrawColor(maincolor_7)
        surface.DrawRect(0,0,w,h)
        
        local ico, loading = slib.ImgurGetMaterial(imgur_id)
        
        if !loading then
            surface.SetDrawColor(white)
            surface.SetMaterial(ico)
            surface.DrawTexturedRect(margin, margin, h - margin - margin, h - margin - margin)
        else
            s.rotation = s.rotation or 0
            s.rotation = s.rotation + 1

            local icosize = h * .6

            surface.SetDrawColor(white)
            surface.SetMaterial(ico)
            surface.DrawTexturedRectRotated(h * .5, h * .5, icosize, icosize, -s.rotation)
        end
    end

    addLabel(store_management.frame, slib.getLang("sreward", sReward.config["language"], "rewards")):DockMargin(0,margin * 2,0,margin)

    local edit_rewards = vgui.Create("SButton", store_management.frame)
    :Dock(TOP)
    :setTitle(slib.getLang("sreward", sReward.config["language"], "edit_rewards"))

    edit_rewards:SetTall(slib.getScaledSize(20, "y"))
    edit_rewards.font = slib.createFont("Roboto", 14)
    edit_rewards.bg = maincolor_7

    local suggestions = {}

    for k,v in pairs(sReward.Rewards) do
        suggestions[k] = true
    end

    edit_rewards.DoClick = function()
        local close = vgui.Create("SButton")
        close:MakePopup()
        close:SetSize(ScrW(), ScrH())
        close.Paint = function(s,w,h) end
        close.DoClick = function()
            close:Remove()
        end

        local table_viewer = vgui.Create("STableViewer", close)
        :setTable(data.reward)
        :addSuggestions(suggestions)
        :setCustomValues(slib.getLang("sreward", sReward.config["language"], "submit"), "Input type/amount")


        table_viewer:addSearch(table_viewer.viewbox, table_viewer.viewer)
        :addSearch(table_viewer.suggestionbox, table_viewer.suggestions)
        :MakePopup()
        :sortValues(table_viewer.viewer)
		:sortValues(table_viewer.suggestions)

        table_viewer.OnRemove = function()
            if table_viewer.modified then
                data.reward = table_viewer.viewer.tbl
            end

            if !IsValid(close) then return end
            close:Remove()
        end
    end

    local save_item = vgui.Create("SButton", store_management.frame)
    :Dock(TOP)
    :DockMargin(0,margin,0,0)
    :setTitle(slib.getLang("sreward", sReward.config["language"], "save"))

    save_item.DoClick = function()
        sReward.data["shop"][key] = data
        networkAdminData(2, key)
        store_management:Remove()
    end

    save_item:SetTall(slib.getScaledSize(20, "y"))
    save_item.font = slib.createFont("Roboto", 14)
    save_item.bg = maincolor_7

    for k,v in pairs(store_management.frame:GetChildren()) do
        local h = v:GetTall()
        local l, t, r, b = v:GetDockMargin()

        h = h + b

        store_management.frame:SetTall(store_management.frame:GetTall() + h + t)
    end

    store_management.frame:SetTall(store_management.frame:GetTall() + (margin * 2))

    store_management:SetTall(store_management.frame:GetTall() + store_management.topbarheight)

    store_management:Center()
end

sReward.openAdminmenu = function(sreward_menu)
    local x, y
    if IsValid(sreward_menu) then
        x, y = sreward_menu:GetPos()
        sreward_menu:Remove()
    end
    
    sreward_admin = vgui.Create("SFrame")
    :SetSize(slib.getScaledSize(sReward.config["size"].w, "x"),slib.getScaledSize(sReward.config["size"].h, "y"))
    :setTitle(slib.getLang("sreward", sReward.config["language"], "title_admin"))
    :Center()
    :addCloseButton()
    :MakePopup()
    :addTab(slib.getLang("sreward", sReward.config["language"], "general"), "sreward/tabs/general.png")
    :addTab(slib.getLang("sreward", sReward.config["language"], "shop"), "sreward/tabs/product.png")
    :addTab(slib.getLang("sreward", sReward.config["language"], "coupons"), "sreward/tabs/coupon.png")
    :setActiveTab(slib.getLang("sreward", sReward.config["language"], "general"))
    :SetPos(x, y)

    sreward_admin.OnRemove = function()
        if sreward_admin.changing then return end
        net.Start("sR:NetworkingHandeler")
        net.WriteUInt(0,3)
        net.WriteBool(false)
        net.SendToServer()
    end

    local topbttnsize = sreward_admin.close:GetTall()
    local bttngap = sreward_admin.topbar:GetTall() - topbttnsize

    sreward_admin.topbar:DockPadding(0,0,topbttnsize * .85,0)

    local returnbttn = vgui.Create("SButton", sreward_admin.topbar)
    returnbttn:Dock(RIGHT)
    returnbttn:DockMargin(0, bttngap / 2, margin / 2, bttngap / 2)
    returnbttn:SetWide(topbttnsize)
    
    returnbttn.DoClick = function()
        sreward_admin.changing = true
        sReward.openRewards(sreward_admin:GetPos())
        sreward_admin:Remove()
    end

    returnbttn.Paint = function(s,w,h)
        local icosize = h * .5
        local wantedCol = s:IsHovered() and white or hovercolor

        surface.SetDrawColor(slib.lerpColor(s, wantedCol))
        surface.SetMaterial(return_ico)
        surface.DrawTexturedRect(w * .5 - icosize * .5, h * .5 - icosize * .5, icosize, icosize)
    end

    local generalcanvas = addBasicsPage(sreward_admin.tab[slib.getLang("sreward", sReward.config["language"], "general")])
    local shopcanvas, shops_search = addBasicsPage(sreward_admin.tab[slib.getLang("sreward", sReward.config["language"], "shop")])
    local couponscanvas, coupons_search = addBasicsPage(sreward_admin.tab[slib.getLang("sreward", sReward.config["language"], "coupons")])

    local rewardNameIndex = {}

    for k,v in pairs(sReward.config["rewards"]) do
        rewardNameIndex[v.name] = k
    end

    for k,v in ipairs(player.GetAll()) do
        local ply = sReward.addMultibox(generalcanvas, {
            [1] = {
                title = slib.getLang("sreward", sReward.config["language"], "name"), 
                val = v:Nick(),
                offset = 0
            }
        })
        ply.addAvatar(v)
        ply.addButton(slib.getLang("sreward", sReward.config["language"], "take_tokens"), function()
            local val
            local popup = adminAction(v, slib.getLang("sreward", sReward.config["language"], "take_tokens"), slib.getLang("sreward", sReward.config["language"], "number"), function()
                doAdminAction(v, 2, val)
            end)
            local textbox = popup.addInput("int")
            textbox.onValueChange = function(newval)
                val = newval
            end
        end)

        ply.addButton(slib.getLang("sreward", sReward.config["language"], "give_tokens"), function()
            local val
            local popup = adminAction(v, slib.getLang("sreward", sReward.config["language"], "give_tokens"), slib.getLang("sreward", sReward.config["language"], "number"), function()
                doAdminAction(v, 1, val)
            end)

            local textbox = popup.addInput("int")

            textbox.onValueChange = function(newval)
                val = newval
            end
        end)

        ply.addButton(slib.getLang("sreward", sReward.config["language"], "give_reward"), function()
            local val
            local dropdown
            local popup = adminAction(v, slib.getLang("sreward", sReward.config["language"], "give_reward"), slib.getLang("sreward", sReward.config["language"], "select_reward"), function()
                doAdminAction(v, 3, rewardNameIndex[dropdown.title])
            end)
            
            dropdown = popup.addInput("dropdown") 

            for k,v in pairs(sReward.config["rewards"]) do
                dropdown:addOption(v.name)
            end
        end)

        ply.PaintOver = function(s,w,h)
            draw.SimpleText(slib.getLang("sreward", sReward.config["language"], "tokens"), overlineFont, w * .45, margin, textcolor_min50, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP)
            draw.SimpleText(string.Comma(sReward.GetTokens(v)), slib.createFont("Roboto", 15), w * .45, h - margin, isFriend and successcolor or textcolor, TEXT_ALIGN_LEFT, TEXT_ALIGN_BOTTOM)
        end
    end

    sreward_admin.RebuildCoupons = function()
        for k,v in ipairs(couponscanvas:GetCanvas():GetChildren()) do
            v:Remove()
        end

        for k,v in SortedPairs(sReward.data["coupons"]) do
            if !istable(v) then continue end
            local coupon = addCoupon(couponscanvas, v.name)
        end
    end

    sreward_admin.RebuildCoupons()

    local store_canvas
    sreward_admin.rebuildStore = function(str)
        table.sort(sReward.data["shop"], function(a, b) return (istable(a) and istable(b)) and tonumber(a and a.price or 0) > tonumber(b and b.price or 0) end)

        local shopcanvas = shopcanvas:GetCanvas()
        store_canvas = shopcanvas

        local iteration = 0
        local yiteration = 0
        for k,v in ipairs(shopcanvas:GetChildren()) do
            v:Remove()
        end

        for k,v in SortedPairs(sReward.data["shop"]) do
            if !istable(v) then continue end
            if str and !string.find(string.lower(v.name), string.lower(str)) then continue end
            yiteration = iteration > 2 and yiteration + 1 or yiteration
            iteration = iteration > 2 and 0 or iteration

            local item = sReward.addStoreItem(shopcanvas, sReward.data["shop"][k], yiteration, iteration)
            item.addButton(failcolor, delete_ico, function()
                local popup = vgui.Create("SPopupBox")
                :setTitle(slib.getLang("sreward", sReward.config["language"], "are_you_sure"))
                :setBlur(true)
                :addChoise(slib.getLang("sreward", sReward.config["language"], "no"))
                :addChoise(slib.getLang("sreward", sReward.config["language"], "yes"), function()
                    sReward.data["shop"][k] = sReward.data["shop"][k] or {}
                    sReward.data["shop"][k].delete = "confirmed"
        
                    item:Remove()
                    networkAdminData(2, k)
                end)
                :setText(slib.getLang("sreward", sReward.config["language"], "this_delete", item.data.name))
            end)
            item.addButton(nil, settings_ico, function()
                manageStoreItem(k)
            end, true)

            iteration = iteration + 1
        end

        ignoreResize = false
    end

    sreward_admin.rebuildStore()

    shopcanvas:GetCanvas().OnSizeChanged = function()
        local width = store_canvas:GetWide()
        if store_canvas.oldWide == width then return end
        store_canvas.oldWide = width

        if !IsValid(store_canvas) then return end
        for k,v in ipairs(store_canvas:GetChildren()) do
            v.InvalidateLayout()
        end
    end

    shops_search.entry.onValueChange = function(newval)
        sreward_admin.rebuildStore(newval)
    end


    local add_shopitem = vgui.Create("SButton", shops_search)
    add_shopitem:Dock(RIGHT)
    add_shopitem:DockMargin(margin * 2,margin * 2,margin * 2,margin * 2)
    add_shopitem:SetWide(shops_search:GetTall() - (margin * 4))
    add_shopitem.Paint = function(s,w,h)
        local icosize, width = h * .7, 2
        local centerPos = h * .15
        local wantedCol = s:IsHovered() and white or hovercolor

        surface.SetDrawColor(slib.lerpColor(s, wantedCol))
        surface.DrawRect(w * .5 - width * .5, 0, width, h)
        surface.DrawRect(0, h * .5 - width * .5, w, width)
    end

    add_shopitem.DoClick = function()
        manageStoreItem(id)
    end

    local add_coupon = vgui.Create("SButton", coupons_search)
    add_coupon:Dock(RIGHT)
    add_coupon:DockMargin(margin * 2,margin * 2,margin * 2,margin * 2)
    add_coupon:SetWide(coupons_search:GetTall() - (margin * 4))
    add_coupon.Paint = function(s,w,h)
        local icosize, width = h * .7, 2
        local centerPos = h * .15
        local wantedCol = s:IsHovered() and white or hovercolor

        surface.SetDrawColor(slib.lerpColor(s, wantedCol))
        surface.DrawRect(w * .5 - width * .5, 0, width, h)
        surface.DrawRect(0, h * .5 - width * .5, w, width)
    end

    add_coupon.DoClick = function()
        local val
        local popup = adminAction(v, slib.getLang("sreward", sReward.config["language"], "create_coupon"), slib.getLang("sreward", sReward.config["language"], "coupon_name"), function()
            addCoupon(couponscanvas, val, true)
        end)
        local textbox = popup.addInput("int")
        textbox:SetNumeric(false)
        textbox.onValueChange = function(newval)
            val = newval
        end
    end
end
--addons/sreward_1.5.30/lua/s_reward/languages/sh_english.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_basewars.lua:
sReward.RegisterReward("basewars_money", function(ply, amount)
    if !isfunction(ply.GiveMoney) then return end
    ply:GiveMoney(amount)
end, Material("sreward/money.png", "smooth"))

sReward.RegisterReward("basewars_level", function(ply, level)
    if !isfunction(ply.AddLevel) then return end
    ply:AddLevel(level)
end, Material("sreward/level.png", "smooth"))
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_perp.lua:
return gluapack()()
--addons/sreward_1.5.30/lua/s_reward/rewards/sh_rank.lua:
sReward.RegisterReward("reward_rank", function(ply, rank)
    slib.setRank(ply, rank)
end, Material("sreward/rank.png", "smooth"))
--lua/streamradio_core/api.lua:
return gluapack()()
--lua/streamradio_core/timedpairs.lua:
-- Timedpairs by Grocel. (Rewrite by Divran)
-- It allows you to go through long tables, but without game freezing.
-- Its like a for-pairs loop.
--
-- How to use:
-- StreamRadioLib.Timedpairs( string unique name, table, number ticks done at once, function tickcallback[, function endcallback, ...] )
--
-- tickcallback is called every tick, it ticks for each KeyValue of the table.
-- Its arguments are the current key and value.
-- Return false in the tickcallback function to break the loop.
-- tickcallback( key, value, ... )
--
-- endcallback is called after the last tickcallback has been called.
-- Its arguments are the same as the last arguments of StreamRadioLib.Timedpairs
-- endcallback( lastkey, lastvalue, ... )
if ( not StreamRadioLib ) then return end
local next = next
local pairs = pairs
local unpack = unpack
local pcall = pcall
local ErrorNoHalt = ErrorNoHalt
local functions = {}

function StreamRadioLib.TimedpairsGetTable( )
	return functions
end

function StreamRadioLib.TimedpairsStop( name )
	local data = functions[name]

	if data then
		local lookup = data.lookup or {}

		-- If we had any end callback function
		if data.endcallback then
			local kv = lookup[data.currentindex - 1] or {} -- get previous key & value
			local ok, err = pcall( data.endcallback, kv.key, kv.value, unpack( data.args ) )

			if not ok then
				ErrorNoHalt( "Error in Timedpairs '" .. name .. "' ( in end function ): " .. err .. "\n" )
			end
		end
	end

	functions[name] = nil
end

-- custom table copy function to convert to numerically indexed table
local function copy( t )
	local ret = {}

	for k, v in pairs( t ) do
		table.insert(ret, {
			key = k,
			value = v
		})
	end

	return ret
end

local function Timedpairs( )
	if not StreamRadioLib then return end
	if not StreamRadioLib.Loaded then return end

	if not next( functions ) then return end
	local toremove = {}

	-- If there are any more values..
	for name, data in pairs( functions ) do
		for i = 1, data.step do
			data.currentindex = data.currentindex + 1 -- increment index counter
			local lookup = data.lookup or {}

			if data.currentindex <= #lookup then
				local kv = lookup[data.currentindex] or {} -- Get the current key and value
				local ok, err = pcall( data.callback, kv.key, kv.value, unpack( data.args ) ) -- DO EET

				if not ok then
					ErrorNoHalt( "Error in Timedpairs '" .. name .. "': " .. err .. "\n" )
					table.insert(toremove, name)
					break
				elseif err == false then
					-- They returned false inside the function
					if data.endcallback then
						local kv = lookup[data.currentindex - 1] or {} -- get previous key & value
						local ok, err = pcall( data.endcallback, kv.key, kv.value, unpack( data.args ) )

						if not ok then
							ErrorNoHalt( "Error in Timedpairs '" .. name .. "' ( in end function ): " .. err .. "\n" )
						end
					end

					-- If we had any end callback function
					table.insert(toremove, name)
					break
				end
			else
				-- oh noes
				-- Out of keys. Entire table looped
				if data.endcallback then
					local kv = lookup[data.currentindex - 1] or {} -- get previous key & value
					local ok, err = pcall( data.endcallback, kv.key, kv.value, unpack( data.args ) )

					if not ok then
						ErrorNoHalt( "Error in Timedpairs '" .. name .. "' ( in end function ): " .. err .. "\n" )
					end
				end

				-- If we had any end callback function
				table.insert(toremove, name)
				break
			end
		end
	end

	-- Remove all that were flagged for removal
	for i = 1, #toremove do
		functions[toremove[i]] = nil
	end
end

if ( CLIENT ) then
	StreamRadioLib.Hook.Add( "PostRenderVGUI", "Timedpairs", Timedpairs ) -- Doesn't get paused in single player. Can be important for vguis.
else
	StreamRadioLib.Hook.Add( "Think", "Timedpairs", Timedpairs ) -- Servers still uses Think.
end

function StreamRadioLib.Timedpairs( name, tab, step, callback, endcallback, ... )
	functions[name] = {
		lookup = copy( tab ),
		step = step,
		currentindex = 0,
		callback = callback,
		endcallback = endcallback,
		args = {...}
	}
end

local g_dummytab = {true}
local g_id = 0

-- calls the given function like simple timer, but isn't affected by game pausing.
function StreamRadioLib.Timedcall( callback, ... )
	g_id = (g_id % 2 ^ 30) + 1

	StreamRadioLib.Timedpairs( "Timedcall_" .. g_id, g_dummytab, 1, function( k, v, ... )
		callback( ... )
	end, nil, ... )
end

return true


--lua/streamradio_core/network.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Network = StreamRadioLib.Network or {}
StreamRadioLib.Network_Debug = StreamRadioLib.Network_Debug or {}

local LIB = StreamRadioLib.Network
table.Empty(LIB)

local LIBDebug = StreamRadioLib.Network_Debug
table.Empty(LIBDebug)

local LIBUtil = StreamRadioLib.Util

local emptyTableSafe = LIBUtil.EmptyTableSafe

local g_addonprefix = "3DStreamRadio/"
local g_maxIdentifierLen = 44

local g_networkStack = {}

local g_networkMaxStackSize = 4096
local g_networkStackBatchSize = 128

local g_types = {
	["Angle"] = {
		check = function(value)
			return isangle(value)
		end,
		convert = nil,
		dtmaxcount = 32,
		nwGetter = "GetNW2Angle",
		nwSetter = "SetNW2Angle",
	},

	["Bool"] = {
		check = function(value)
			return isbool(value)
		end,
		convert = function(v)
			return tobool(v)
		end,
		dtmaxcount = 32,
		nwGetter = "GetNW2Bool",
		nwSetter = "SetNW2Bool",
	},

	["Entity"] = {
		check = function(value)
			return IsEntity(value)
		end,
		convert = nil,
		dtmaxcount = 32,
		nwGetter = "GetNW2Entity",
		nwSetter = "SetNW2Entity",
	},

	["Float"] = {
		check = function(value)
			return isnumber(value)
		end,
		convert = nil,
		dtmaxcount = 32,
		nwGetter = "GetNW2Float",
		nwSetter = "SetNW2Float",
	},

	["Int"] = {
		check = function(value)
			return isnumber(value)
		end,
		convert = function(v)
			return math.floor(v)
		end,
		dtmaxcount = 32,
		nwGetter = "GetNW2Int",
		nwSetter = "SetNW2Int",
	},

	["String"] = {
		check = function(value)
			return isstring(value)
		end,
		convert = nil,
		dtmaxcount = 0,
		nwGetter = "GetNW2String",
		nwSetter = "SetNW2String",
	},

	["Vector"] = {
		check = function(value)
			return isvector(value)
		end,
		convert = nil,
		dtmaxcount = 32,
		nwGetter = "GetNW2Vector",
		nwSetter = "SetNW2Vector",
	},
}

function LIB.SetupEntityTable(ent)
	if not IsValid(ent) then
		return
	end

	if ent._entityTableSetup then
		return
	end

	ent._entityTableSetup = true

	local entTable = ent:GetTable()

	for datatype, dtd in pairs(g_types) do
		local nwGetter = dtd.nwGetter
		local nwSetter = dtd.nwSetter

		entTable[nwGetter] = ent[nwGetter]
		entTable[nwSetter] = ent[nwSetter]
	end

	entTable.NetworkVar = ent.NetworkVar
	entTable.NWOverflowKill = ent.NWOverflowKill

	entTable.StreamRadioDT = ent.StreamRadioDT or {}
	entTable.StreamRadioNW = ent.StreamRadioNW or {}

	entTable.IsValid = ent.IsValid
	entTable.IsMarkedForDeletion = ent.IsMarkedForDeletion
end

function LIB.TransformNWIdentifier(str)
	str = tostring(str or "")
	assert(str ~= "", "identifier is empty")

	str = g_addonprefix .. str

	local strLen = #str
	assert(strLen < g_maxIdentifierLen, "identifier '" .. str .. "' must shorter than " .. g_maxIdentifierLen .. " chars, got " .. strLen .. " chars")

	return str
end

function LIB.UntransformNWIdentifier(str)
	str = tostring(str or "")
	assert(str ~= "", "identifier is empty")

	local strLen = #str
	assert(strLen < g_maxIdentifierLen, "identifier '" .. str .. "' must shorter than " .. g_maxIdentifierLen .. " chars, got " .. strLen .. " chars")

	str = string.gsub(str, "^" .. string.PatternSafe(g_addonprefix), "", 1)
	return str
end

function LIB.AddNetworkStringRaw(str)
	str = tostring(str or "")
	assert(str ~= "", "identifier is empty")

	local strLen = #str
	assert(strLen < g_maxIdentifierLen, "identifier '" .. str .. "' must shorter than " .. g_maxIdentifierLen .. " chars, got " .. strLen .. " chars")

	local currentId = util.NetworkStringToID(str) or 0

	if CLIENT then
		return currentId
	end

	if currentId ~= 0 then
		return currentId
	end

	util.AddNetworkString(str)

	local newId = util.NetworkStringToID(str) or 0
	assert(newId ~= 0, "Could not add network string for '" .. str .. "'! Is network string table is full?")
	assert(util.NetworkIDToString(newId) == str, "Could not add network string at ID '" .. newId .. "' for '" .. newId .. "'! Is network string table is full?")

	return newId
end

function LIB.AddNetworkString(str)
	str = LIB.TransformNWIdentifier(str)

	local id = LIB.AddNetworkStringRaw(str)
	return id
end

function LIB.NetworkStringToID(str)
	str = LIB.TransformNWIdentifier(str)

	local id = util.NetworkStringToID(str) or 0
	return id
end

function LIB.NetworkIDToString(id)
	id = tonumber(id or 0) or 0
	if id == 0 then
		return nil
	end

	local str = util.NetworkIDToString(id)
	if not str then
		return nil
	end

	str = LIB.UntransformNWIdentifier(str)
	return str
end

local function DTNetworkVarExists(entTable, name)
	local NW = entTable.StreamRadioDT
	if not NW then return false end

	local Names = NW.Names
	if not Names then return false end

	local data = Names[name]
	if not data then return false end
	if not data.datatype then return false end

	return true
end

local function CanAddDTNetworkVar(entTable, datatype, name, ...)
	name = tostring(name or "")
	datatype = tostring(datatype or "")

	if name == "" then return false end
	if not g_types[datatype] then return false end

	local NW = entTable.StreamRadioDT
	if not NW then return false end

	local count = NW.Count or {}
	count = count[datatype] or 0

	local maxcount = g_types[datatype].dtmaxcount or 0

	if count >= maxcount then return false end
	return true
end

do
	local loopThis = function(datatype, dtd)
		local checkfunc = dtd.check
		local convertfunc = dtd.convert
		local nwGetter = dtd.nwGetter
		local nwSetter = dtd.nwSetter

		local nwGetterFunc = function(entTable, key, defaultvalue)
			if not entTable then
				return defaultvalue
			end

			key = LIB.TransformNWIdentifier(key)

			local ent = entTable.Entity

			if not ent then
				return defaultvalue
			end

			if not entTable.IsValid(ent) then
				return defaultvalue
			end

			local getter = entTable[nwGetter]
			if not getter then
				return defaultvalue
			end

			local r = getter(ent, key, defaultvalue)
			if r == nil and defaultvalue ~= nil then
				r = defaultvalue
			end

			return r
		end

		local nwSetterFunc = function(entTable, key, value)
			if CLIENT then
				return
			end

			if not entTable then
				return
			end

			key = LIB.TransformNWIdentifier(key)
			value = convertfunc and convertfunc(value) or value

			assert(checkfunc(value), "invalid datatype of value at '" .. key .. "', '" .. datatype .. "' was expected, got '" .. type(value) .. "'")

			local ent = entTable.Entity

			if not ent then
				return
			end

			if not entTable.IsValid(ent) then
				return
			end

			if entTable.IsMarkedForDeletion(ent) then
				return
			end

			local data = {ent, entTable, entTable[nwSetter], key, value}
			table.insert(g_networkStack, data)
		end

		LIB["GetNW" .. datatype] = nwGetterFunc
		LIB["SetNW" .. datatype] = nwSetterFunc

		dtd.nwSetterFunc = nwSetterFunc
		dtd.nwGetterFunc = nwGetterFunc
	end

	for datatype, dtd in pairs(g_types) do
		loopThis(datatype, dtd)
	end
end

function LIB.GetNWVar(entTable, datatype, key, defaultvalue)
	key = tostring(key or "")
	datatype = tostring(datatype or "")

	assert(g_types[datatype] ~= nil, "argument #2 must be a valid datatype! Got '" .. datatype .. "'")
	assert(key ~= "", "argument #3 is an invalid name!")

	local dtd = g_types[datatype or ""]
	if not dtd then return defaultvalue end
	if not dtd.nwGetterFunc then return defaultvalue end

	local r = dtd.nwGetterFunc(entTable, key, defaultvalue)
	return r
end

function LIB.SetNWVar(entTable, datatype, key, value)
	if CLIENT then
		return
	end

	key = tostring(key or "")
	datatype = tostring(datatype or "")

	assert(g_types[datatype] ~= nil, "argument #2 must be a valid datatype! Got '" .. datatype .. "'")
	assert(key ~= "", "argument #3 is an invalid name!")

	local dtd = g_types[datatype or ""]
	if not dtd then return end
	if not dtd.nwSetterFunc then return end

	dtd.nwSetterFunc(entTable, key, value)
end

function LIB.SetupDataTables(entOrOntTable)
	local ent = nil
	local entTable = nil

	if istable(entOrOntTable) then
		ent = entOrOntTable.Entity
		entTable = entOrOntTable
	else
		ent = entOrOntTable
		entTable = entOrOntTable:GetTable()
	end

	if not entTable then return end
	LIB.SetupEntityTable(ent)

	local NW = entTable.StreamRadioDT
	if not NW then return end

	NW.Setup = true
end

local function pollNWVarsLoopThis(NW, entTable, name, data)
	if not data.callback then return end
	if not data.datatype then return end

	local oldvalue = data.oldvalue
	local newvalue = LIB.GetNWVar(entTable, data.datatype, name)

	if oldvalue == newvalue then return end

	local ent = entTable.Entity

	data.callback(ent, name, oldvalue, newvalue)

	data.oldvalue = newvalue
end

local function pollNWVars(entTable)
	local NW = entTable.StreamRadioNW
	if not NW then return end

	local Names = NW.Names
	if not Names then return end

	for name, data in pairs(Names) do
		pollNWVarsLoopThis(NW, entTable, name, data)
	end
end

local function pollDTVarsLoopThis(NW, entTable, name, data)
	if not data.callback then return end
	if not data.datatype then return end
	if not DTNetworkVarExists(entTable, name) then return end

	local oldvalue = data.oldvalue
	local newvalue = LIB.GetDTNetworkVar(entTable, name)

	if oldvalue == newvalue then return end

	local ent = entTable.Entity

	data.callback(ent, name, oldvalue, newvalue)

	data.oldvalue = newvalue
end

local function pollDTVars(entTable)
	local NW = entTable.StreamRadioDT
	if not NW then return end
	if not NW.Setup then return end

	local Names = NW.Names
	if not Names then return end

	for name, data in pairs(Names) do
		pollDTVarsLoopThis(NW, entTable, name, data)
	end
end

local function pollNwStackKillThis(stackItem)
	local entTable = stackItem[1]
	if not entTable then return end

	local ent = entTable.Entity

	if not entTable.IsValid(ent) then return end
	if entTable._NWOverflowKilled then return end

	entTable.NWOverflowKill(ent)
	entTable._NWOverflowKilled = true
end

local function pollNwStackLoopThis(stackItem)
	local ent = stackItem[1]
	local entTable = stackItem[2]
	local setter = stackItem[3]
	local key = stackItem[4]
	local value = stackItem[5]

	if not ent then return end
	if not setter then return end

	if not entTable then return end
	if not entTable.IsValid(ent) then return end
	if entTable.IsMarkedForDeletion(ent) then return end

	setter(ent, key, value)
end

function LIB.PollNwStack()
	if CLIENT then
		return
	end

	if not StreamRadioLib.HasSpawnedRadios() then
		-- clean up any left overs, just in case
		emptyTableSafe(g_networkStack)
		return
	end

	local count = 0

	for pointer, stackItem in pairs(g_networkStack) do
		g_networkStack[pointer] = nil

		if stackItem then
			-- network entity data chunk wise
			pollNwStackLoopThis(stackItem)

			count = count + 1
			if count >= g_networkStackBatchSize then
				break
			end
		end
	end

	if #g_networkStack > g_networkMaxStackSize then
		-- we have a very high counter

		local count = table.Count(g_networkStack)
		-- actually count them, they can mismatch

		if count > g_networkMaxStackSize then
			-- still too high, kill the overflow by removing affected entities.

			for pointer, stackItem in pairs(g_networkStack) do
				g_networkStack[pointer] = nil

				if count > g_networkMaxStackSize then
					if stackItem then
						pollNwStackKillThis(stackItem)
					end
				end

				count = math.max(count - 1, 0)
			end
		end
	end
end

function LIB.Poll(entTable)
	pollNWVars(entTable)
	pollDTVars(entTable)
end

function LIB.AddDTNetworkVar(entTable, datatype, name, ...)
	name = tostring(name or "")
	datatype = tostring(datatype or "")

	assert(g_types[datatype], "argument #1 is an invalid datatype!")
	assert(name ~= "", "argument #2 is an invalid name!")

	if DTNetworkVarExists(entTable, name) then return true end
	if not CanAddDTNetworkVar(entTable, datatype, name) then return false end

	local NW = entTable.StreamRadioDT
	if not NW then return false end

	local Setup = NW.Setup or false

	NW.Count = NW.Count or {}
	local Count = NW.Count

	local index = (Count[datatype] or 0) + 1

	NW.Names = NW.Names or {}
	local Names = NW.Names

	Names[name] = Names[name] or {}
	local data = Names[name]

	data.datatype = datatype
	data.args = {...}
	data.index = data.index or index

	index = data.index
	Count[datatype] = index

	local ent = entTable.Entity

	if Setup then
		entTable.NetworkVar(ent, datatype, index - 1, name, ...)

		if data.value ~= nil then
			LIB.SetDTNetworkVar(entTable, name, data.value)
			data.value = nil
		end
	end

	return true
end

function LIB.GetDTNetworkVar(entTable, name, defaultvalue)
	if not DTNetworkVarExists(entTable, name) then
		return defaultvalue
	end

	local ent = entTable.Entity

	local getter = entTable["Get" .. name]
	if not getter then return defaultvalue end

	local value = getter(ent, defaultvalue)
	if value == nil then
		value = defaultvalue
	end

	return value
end

function LIB.SetDTNetworkVar(entTable, name, value)
	if CLIENT then return end

	local ent = entTable.Entity

	if not DTNetworkVarExists(entTable, name) then
		return
	end

	local oldvalue = LIB.GetDTNetworkVar(entTable, name)
	if oldvalue == value then return end

	local setter = entTable["Set" .. name]
	if not setter then return end

	setter(ent, value)
end

function LIB.SetDTVarCallback(entTable, name, func)
	name = tostring(name or "")

	assert(name ~= "", "argument #2 is an invalid name!")
	assert(isfunction(func), "argument #3 must be a function!")

	local NW = entTable.StreamRadioDT
	if not NW then return end

	NW.Names = NW.Names or {}
	local Names = NW.Names

	Names[name] = Names[name] or {}
	local data = Names[name]

	data.callback = func
	data.oldvalue = nil
end

function LIB.SetNWVarCallback(entTable, datatype, name, func)
	datatype = tostring(datatype or "")
	name = tostring(name or "")

	assert(g_types[datatype] ~= nil, "argument #2 must be a valid datatype! Got '" .. datatype .. "'")
	assert(name ~= "", "argument #3 is an invalid name!")
	assert(isfunction(func), "argument #4 must be a function!")

	local NW = entTable.StreamRadioNW
	if not NW then return end

	NW.Names = NW.Names or {}
	local Names = NW.Names

	Names[name] = Names[name] or {}
	local data = Names[name]

	data.callback = func
	data.datatype = datatype
	data.oldvalue = nil
end

local function hashToBin(str)
	str = string.gsub(str, "..", function(cc)
		local c = tonumber(cc, 16)

		if c == 0 then
			-- avoid zero termination
			return "\\0"
		end

		return string.char(c)
	end)

	return str
end

function LIB.Hash(str)
	local hash = StreamRadioLib.Util.Hash(str)
	hash = hashToBin(hash)

	return hash
end

StreamRadioLib.Hook.Add("Tick", "Entity_Network_Tick", function()
	if not StreamRadioLib then return end
	if not StreamRadioLib.Loaded then return end
	if not StreamRadioLib.SpawnedRadios then return end

	LIB.PollNwStack()

	for index, ent in pairs(StreamRadioLib.SpawnedRadios) do
		if not ent then
			continue
		end

		local entTable = ent:GetTable()
		if not entTable then
			continue
		end

		if not entTable.IsValid(ent) then
			continue
		end

		LIB.Poll(entTable)
	end
end)

function LIBDebug.DumpDTNetworkStats(ent)
	local entTable = ent:GetTable()
	if not entTable then
		return
	end

	local NW = entTable.StreamRadioDT or {}
	local Count = NW.Count or {}

	MsgN("DumpDTNetworkStats of: " .. tostring(ent))
	MsgN("======================")

	for datatype, dtd in pairs(g_types) do
		local c = Count[datatype] or 0
		local maxc = dtd.dtmaxcount or 0

		local per = 1

		if maxc <= 0 then
			maxc = 0
		else
			per = math.Round(c / maxc, 3)
		end

		per = per * 100

		MsgN(datatype, c .. " / " .. maxc, per .. " %")
	end

	MsgN("======================")
end

function LIBDebug.DumpDTNetworkVars(ent)
	local entTable = ent:GetTable()
	if not entTable then
		return
	end

	local NW = entTable.StreamRadioDT or {}

	MsgN("DumpDTNetworkVars of: " .. tostring(ent))
	MsgN("======================")

	for name, data in pairs(NW.Names) do
		local line = string.format("%s (%s) [%i] | %s", name, data.datatype, data.index, LIB.GetDTNetworkVar(entTable, name))
		MsgN(line)
	end

	MsgN("======================")
end

local function getAddonStringTable()
	local max = 4096
	local result = {}

	for k = 1, max do
		local name = util.NetworkIDToString(k)

		if not name then
			break
		end

		if not string.find(name, "^" .. string.PatternSafe(g_addonprefix)) then
			continue
		end

		result[#result + 1] = {
			index = k,
			name = name,
		}
	end

	return result
end

function LIBDebug.DumpDTNetworkStringTable()
	MsgN("DumpDTNetworkStringTable")
	MsgN("======================")

	local max = 4096
	local stringTable = getAddonStringTable()
	local countAssigned = 0
	local countAddon = #stringTable

	for k = 1, max do
		local name = util.NetworkIDToString(k)

		if not name then
			break
		end

		countAssigned = countAssigned + 1
	end

	for i, value in ipairs(stringTable) do
		local index = value.index
		local name = value.name

		MsgN(index, "\t", name)
	end

	local fractionMax = countAddon / max
	local fractionAssigned = countAddon / countAssigned

	MsgN("======================")
	MsgN(countAddon .. " of " .. max .. " slots total, " .. (math.Round(fractionMax, 3) * 100) .. '%')
	MsgN(countAddon .. " of " .. countAssigned .. " slots assigned, " .. (math.Round(fractionAssigned, 3) * 100) .. '%')
	MsgN("======================")
end

function LIBDebug.DumpDTNetworkStringTableCode()
	MsgN("DumpDTNetworkStringTableCode")
	MsgN("======================")

	MsgN("")
	MsgN("local LIBNetwork = StreamRadioLib.Network")
	MsgN("")
	MsgN("do")
	MsgN("    -- Automaticly generated network string table map")
	MsgN("")

	local stringTable = getAddonStringTable()

	for i, value in ipairs(stringTable) do
		local name = LIB.UntransformNWIdentifier(value.name)

		local code = string.format("    LIBNetwork.AddNetworkString(\"%s\")", name)
		MsgN(code)
	end

	MsgN("end")
	MsgN("")
	MsgN("======================")
end

do
	local concommandFlags = FCVAR_NONE

	if CLIENT then
		concommandFlags = FCVAR_CHEAT
	end

	concommand.Add("debug_streamradio_dump_nwstringtable", function(ply)
		if not StreamRadioLib.Util.IsAdminForCMD(ply) then
			return
		end

		LIBDebug.DumpDTNetworkStringTable()
	end, nil, nil, concommandFlags)

	concommand.Add("debug_streamradio_dump_nwstringtable_code", function(ply)
		if not StreamRadioLib.Util.IsAdminForCMD(ply) then
			return
		end

		LIBDebug.DumpDTNetworkStringTableCode()
	end, nil, nil, concommandFlags)
end

return true


--lua/streamradio_core/timer.lua:
return gluapack()()
--lua/streamradio_core/skin.lua:
return gluapack()()
--lua/streamradio_core/models/kresopolski_radio.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Antoni Kresopolski: Headphone Radio Receiver
-- Addon: https://steamcommunity.com/sharedfiles/filedetails/?id=2891337724
RADIOMDL.model = "models/radio/antoni_kresopolski/antoni_kresopolski.mdl"

RADIOMDL.SpawnAng = Angle(0, 0, 0)
RADIOMDL.SpawnFlatOnWall = true
RADIOMDL.SoundPosOffset = Vector(0, 0, 5)
RADIOMDL.SoundAngOffset = Angle(0, 0, 0)

RADIOMDL.DisplayAngles = Angle(0, 89.5, 1, 5)

                               --     F,     R,     U
RADIOMDL.DisplayOffset    = Vector(-4.20, -7.60, 9.38) -- Top Left
RADIOMDL.DisplayOffsetEnd = Vector(-6.50, 8.5, 9.38) -- Bottom Right

RADIOMDL.DisplayWidth = 1400
RADIOMDL.DisplayHeight, RADIOMDL.DisplayScale = RADIOMDL:GetDisplayHeight(
	RADIOMDL.DisplayOffset,
	RADIOMDL.DisplayOffsetEnd,
	RADIOMDL.DisplayWidth,
	RADIOMDL.DISPLAY_POS_TOP
)

RADIOMDL.FontSizes = {
--  Name 	= Size,	Weight, Parentname
	Header	= {20,	1000},
	Error	= {17,	700},
	Default	= {20,	700},
	Tooltip	= {20,	1000},
	Big		= {20,	700},
}

function RADIOMDL:SetupGUI(ent, gui_controller, mainpanel)
	gui_controller:SetPos(0, 0)
	gui_controller:SetSize(self.DisplayWidth, self.DisplayHeight)

	mainpanel:SetSize(gui_controller:GetClientSize())

	local modelsetup = {}
	if CLIENT then
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/text", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/pretext", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/controls/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/volume/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox", "font", self.Fonts.Error)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "font", self.Fonts.Error)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox", "font", self.Fonts.Error)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "font", self.Fonts.Error)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "tooltip", "font", self.Fonts.Tooltip)
	end

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header", "sizeh", 27)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "sizeh", 27)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists", "gridsize", {x = 3, y = 4})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview", "gridsize", {x = 2, y = 4})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/sidebutton", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox/scrollbar", "sizew", 25)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox/scrollbar", "sizew", 25)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "sizeh", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "cornersize", 16)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "borderwidth", 16)

	local shadow = 3
	local padding = 5
	local margin = 5

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "shadowwidth", shadow)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "shadowwidth", shadow)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "padding", padding)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "padding", padding)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "margin", margin)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "margin", margin)

	gui_controller:SetModelSetup(modelsetup)

	mainpanel:ForEachChildRecursive(function(panel, child)
		if child.SetShadowWidth and child:GetShadowWidth() == 5 then
			child:SetShadowWidth(shadow)
		end

		if child.SetPadding and child:GetPadding() == 5 then
			child:SetPadding(padding)
		end

		if child.SetMargin and child:GetMargin() == 5 then
			child:SetMargin(margin)
		end
	end)
end

return true


--lua/streamradio_core/models/minecraft_jukebox.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Minecraft Jukebox
-- Addon: https://steamcommunity.com/sharedfiles/filedetails/?id=116592647
RADIOMDL.model = "models/mcmodelpack/blocks/jukebox.mdl"

RADIOMDL.SpawnAng = Angle(0, 90, 0)
RADIOMDL.SpawnFlatOnWall = true
RADIOMDL.SoundPosOffset = Vector(0, 0, 18)
RADIOMDL.SoundAngOffset = Angle(0, 0, 0)

RADIOMDL.DisplayAngles = Angle(0, 0, 90)

                              --        F,      R,     U
RADIOMDL.DisplayOffset    = Vector(-15.50, -18.50, 33.75) -- Top Left
RADIOMDL.DisplayOffsetEnd = Vector(-18.50, 12.45, 2.75) -- Bottom Right

RADIOMDL.DisplayWidth = 700
RADIOMDL.DisplayHeight, RADIOMDL.DisplayScale = RADIOMDL:GetDisplayHeight(RADIOMDL.DisplayOffset, RADIOMDL.DisplayOffsetEnd, RADIOMDL.DisplayWidth)


local fontoptions = {
	antialias = false,
}

RADIOMDL.FontSizes = {
--  Name 	= Size,	Weight, Parentname, Options
	Header	= {22,	1000, "Terminal", fontoptions},
	Small	= {18,	700,  "Terminal", fontoptions},
	Default	= {20,	700,  "Terminal", fontoptions},
	Tooltip	= {20,	800,  "Terminal", fontoptions},
	Big		= {25,	700,  "Terminal", fontoptions},
}

function RADIOMDL:SetupGUI(ent, gui_controller, mainpanel)
	gui_controller:SetPos(0, 0)
	gui_controller:SetSize(self.DisplayWidth, self.DisplayHeight)

	mainpanel:SetSize(gui_controller:GetClientSize())

	local modelsetup = {}
	if CLIENT then
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/text", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/pretext", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/controls/progressbar/label", "font", self.Fonts.Small)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/volume/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "tooltip", "font", self.Fonts.Tooltip)
	end

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header", "sizeh", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "sizeh", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists", "gridsize", {x = 2, y = 10})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview", "gridsize", {x = 1, y = 10})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/sidebutton", "sizew", 50)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox/scrollbar", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "sizeh", 45)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "sizew", 40)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "sizew", 40)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "cornersize", 0)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "borderwidth", 10)

	local shadow = 0
	local padding = 5
	local margin = 5

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "shadowwidth", shadow)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "shadowwidth", shadow)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "padding", padding)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "padding", padding)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "margin", margin)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "margin", margin)

	gui_controller:SetModelSetup(modelsetup)

	mainpanel:ForEachChildRecursive(function(panel, child)
		if child.SetShadowWidth and child:GetShadowWidth() == 5 then
			child:SetShadowWidth(shadow)
		end

		if child.SetPadding and child:GetPadding() == 5 then
			child:SetPadding(padding)
		end

		if child.SetMargin and child:GetMargin() == 5 then
			child:SetMargin(margin)
		end
	end)
end

return true


--lua/streamradio_core/models/portal_speaker_small.lua:
return gluapack()()
--lua/streamradio_core/models/sw_gramophone.lua:
return gluapack()()
--lua/streamradio_core/models/wire_monitor_small.lua:
local RADIOMDL = RADIOMDL
if not istable( RADIOMDL ) then
	StreamRadioLib.Model.LoadModelSettings()
	return
end

-- Wire Monitor, Small
-- Addon: https://steamcommunity.com/sharedfiles/filedetails/?id=160250458
RADIOMDL.model = "models/kobilica/wiremonitorsmall.mdl"

RADIOMDL.SpawnAng = Angle(0, 0, 0)
RADIOMDL.SpawnFlatOnWall = true
RADIOMDL.SoundPosOffset = Vector(0.25, 0, 4.5)
RADIOMDL.SoundAngOffset = Angle(0, 0, 0)

RADIOMDL.DisplayAngles = Angle(0, 90, 90)

                              --      F,     R,    U
RADIOMDL.DisplayOffset    = Vector(0.25, -4.30, 9.30) -- Top Left
RADIOMDL.DisplayOffsetEnd = Vector(0.25,  4.30, 0.70) -- Bottom Right


RADIOMDL.DisplayWidth = 700
RADIOMDL.DisplayHeight, RADIOMDL.DisplayScale = RADIOMDL:GetDisplayHeight(RADIOMDL.DisplayOffset, RADIOMDL.DisplayOffsetEnd, RADIOMDL.DisplayWidth)

RADIOMDL.FontSizes = {
--  Name 	= Size,	Weight, Parentname
	Header	= {25,	1000},
	Small	= {18,	700},
	Default	= {23,	700},
	Tooltip	= {23,	800},
	Big		= {25,	700},
}

function RADIOMDL:SetupGUI(ent, gui_controller, mainpanel)
	gui_controller:SetPos(0, 0)
	gui_controller:SetSize(self.DisplayWidth, self.DisplayHeight)

	mainpanel:SetSize(gui_controller:GetClientSize())

	local modelsetup = {}
	if CLIENT then
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/text", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header/pretext", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "font", self.Fonts.Default)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "font", self.Fonts.Header)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/controls/progressbar/label", "font", self.Fonts.Small)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/volume/progressbar/label", "font", self.Fonts.Default)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox", "font", self.Fonts.Big)
		StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "font", self.Fonts.Big)

		StreamRadioLib.SetSkinTableProperty(modelsetup, "tooltip", "font", self.Fonts.Tooltip)
	end

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/header", "sizeh", 50)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/header", "sizeh", 50)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists", "gridsize", {x = 1, y = 7})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview", "gridsize", {x = 1, y = 7})
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/sidebutton", "sizew", 50)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/textbox/scrollbar", "sizew", 30)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/textbox/scrollbar", "sizew", 30)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/button", "sizeh", 45)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/player/spectrum/error/button", "sizew", 45)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/error/button", "sizew", 45)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "cornersize", 0)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "", "borderwidth", 16)

	local shadow = 5
	local padding = 5
	local margin = 5

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "shadowwidth", shadow)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "shadowwidth", shadow)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "padding", padding)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "padding", padding)

	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlists/button", "margin", margin)
	StreamRadioLib.SetSkinTableProperty(modelsetup, "main/browser/list-playlistview/button", "margin", margin)

	gui_controller:SetModelSetup(modelsetup)

	mainpanel:ForEachChildRecursive(function(panel, child)
		if child.SetShadowWidth and child:GetShadowWidth() == 5 then
			child:SetShadowWidth(shadow)
		end

		if child.SetPadding and child:GetPadding() == 5 then
			child:SetPadding(padding)
		end

		if child.SetMargin and child:GetMargin() == 5 then
			child:SetMargin(margin)
		end
	end)
end

return true


--lua/streamradio_core/models/wire_speaker1.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/scrollbar.lua:
return gluapack()()
--lua/streamradio_core/classes/ui/list.lua:
local StreamRadioLib = StreamRadioLib

if not istable(CLASS) then
	StreamRadioLib.ReloadClasses()
	return
end

local LIBNet = StreamRadioLib.Net
local LIBNetwork = StreamRadioLib.Network
local LIBUtil = StreamRadioLib.Util

local emptyTableSafe = LIBUtil.EmptyTableSafe

local BASE = CLASS:GetBaseClass()

local g_listcache = StreamRadioLib.Util.CreateCacheArray(256)

StreamRadioLib.Hook.Add("PostCleanupMap", "reset_cache_list", function()
	g_listcache:Empty()
end)

function CLASS:Create()
	BASE.Create(self)

	self.ScrollBar = self:AddPanelByClassname("scrollbar", true)
	self.ScrollBar:SetName("scrollbar")
	self.ScrollBar:SetNWName("sbar")
	self.ScrollBar:SetSkinIdentifyer("scrollbar")
	self.ScrollBar:SetSize(30, 30)

	self.ScrollBar.OnScroll = function()
		self:UpdateButtons()
	end

	self.Hash = self:CreateListener({
		value = "",
	}, function(this, k, v, oldv)
		self:SetNWString("Hash", v)

		if SERVER then return end
		self:NetworkButtons()
	end)

	self.Buttons = {}
	self.Data = {}
	self.IconIDs = {}
	self.NetworkPlayerList = {}

	self.Layout.IsHorizontal = false
	self.Layout.ListGridX = 2
	self.Layout.ListGridY = 6

	self.Layout = self.Layout + function(this, k, v)
		if k == "ListGridX" then
			self:RecreateButtons()
			self:SetNWInt("ListGridX", v)
		end

		if k == "ListGridY" then
			self:RecreateButtons()
			self:SetNWInt("ListGridY", v)
		end

		if k == "Margin" then
			self:UpdateButtons()
		end

		if k == "IsHorizontal" then
			self:UpdateButtons()
			self:SetNWBool("IsHorizontal", v)
		end

		if k == "Visible" then
			if v then
				self:NetworkButtons()
			end
		end
	end

	self.Size = self.Size + function(this, k, v)
		self:UpdateButtons()
	end

	self:RecreateButtons()

	if CLIENT then
		self:NetReceive("data", function(this, id, len, ply)
			local count = net.ReadUInt(16)
			local newdata = {}

			for index = 1, count do
				local text, icon = LIBNet.ReceiveListEntry()

				table.insert(newdata, {
					text = text,
					icon = icon,
				})
			end

			local newhash = LIBNet.ReceiveHash()

			-- Store the result of our request for later use
			g_listcache:Set(newhash, newdata)
			self:SetData(newdata)
		end)
	else
		LIBNetwork.AddNetworkString("data")
		LIBNetwork.AddNetworkString("datarequest")

		self:NetReceive("datarequest", function(this, id, len, ply)
			self.NetworkPlayerList[ply] = ply

			self:NetworkButtons()
		end)
	end
end

function CLASS:PerformLayout(...)
	BASE.PerformLayout(self, ...)

	local scrollbar = self.ScrollBar

	if not IsValid(scrollbar) then
		return
	end

	local ishorizontal = self:GetHorizontal()
	local w, h = self:GetClientSize()

	if ishorizontal then
		local barwidth = scrollbar:GetHeight()
		scrollbar:SetSize(w, barwidth)
		scrollbar:SetPos(0, h - barwidth)
	else
		local barwidth = scrollbar:GetWidth()
		scrollbar:SetSize(barwidth, h)
		scrollbar:SetPos(w - barwidth, 0)
	end

	scrollbar:AutoSetHorizontal()
end

function CLASS:ClearButtons()
	for k, v in pairs(self.Buttons or {}) do
		if not v then
			continue
		end

		v:Remove()
	end

	self.Buttons = {}

	local scrollbar = self.ScrollBar
	if IsValid(scrollbar) then
		scrollbar:SetVisible(false)
	end
end

function CLASS:GetButton(buttonindex)
	if not self.Buttons then
		return nil
	end

	return self.Buttons[buttonindex]
end

function CLASS:GetOrCreateButton(buttonindex)
	self.Buttons = self.Buttons or {}
	local button = self.Buttons[buttonindex]

	if not IsValid(button) then
		button = self:AddPanelByClassname("button", true)
		button:SetName("button" .. buttonindex)
		button:SetNWName("but" .. buttonindex)
		button:SetSkinIdentifyer("button")

		self:CallHook("OnItemCreate", button, buttonindex)
		self.Buttons[buttonindex] = button
	end

	return button
end

function CLASS:RecreateButtons()
	self:ClearButtons()
	self:UpdateButtons()
end

function CLASS:UpdateButtons()
	self:QueueCall("UpdateButtonsInternal")
end

function CLASS:NetworkButtons()
	self:QueueCall("NetworkButtonsInternal")
end

function CLASS:NetworkButtonsInternal()
	if not self:IsVisible() then
		return
	end

	if CLIENT then
		local hash = self:GetHash()

		if hash ~= "" then
			local cache = g_listcache:Get(hash)

			if cache then
				self:SetData(cache)
				return
			end
		end

		self:NetSend("datarequest")
		return
	end

	self:NetSendToPlayers("data", function()
		local data = self.Data
		local hash = self:GetHashFromData(data)

		net.WriteUInt(#data, 16)

		for i, v in ipairs(data) do
			LIBNet.SendListEntry(v.text, v.icon)
		end

		LIBNet.SendHash(hash)
	end, self.NetworkPlayerList)

	emptyTableSafe(self.NetworkPlayerList)
end

function CLASS:UpdateButtonsInternal()
	local scrollbar = self.ScrollBar
	local data = self.Data or {}
	local ListSizeX = self.Layout.ListGridX
	local ListSizeY = self.Layout.ListGridY

	self:CalcHash()

	if not IsValid(scrollbar) then
		self:ClearButtons()
		return
	end

	if ListSizeX <= 0 then
		self:ClearButtons()
		return
	end

	if ListSizeY <= 0 then
		self:ClearButtons()
		return
	end

	local listsize = #data

	if listsize <= 0 then
		self:ClearButtons()
		return
	end

	local ishorizontal = scrollbar:GetHorizontal()
	local listviewsize = ListSizeX * ListSizeY
	local startindex = 0
	local scroll = 0
	local maxscroll = 0
	local barwidth = 0

	local w, h = self:GetClientSize()
	local margin = self:GetMargin()

	local buttonarea_w = w
	local buttonarea_h = h

	if ishorizontal then
		maxscroll = listsize / ListSizeY - ListSizeX
		maxscroll = math.ceil(maxscroll)

		scrollbar:SetMaxScroll(maxscroll)
		scroll = scrollbar:GetScroll()

		startindex = listviewsize / ListSizeX * scroll
		barwidth = scrollbar:GetHeight() + margin
		buttonarea_h = buttonarea_h - barwidth
	else
		maxscroll = listsize / ListSizeX - ListSizeY
		maxscroll = math.ceil(maxscroll)

		scrollbar:SetMaxScroll(maxscroll)
		scroll = scrollbar:GetScroll()

		startindex = listviewsize / ListSizeY * scroll
		barwidth = scrollbar:GetWidth() + margin
		buttonarea_w = buttonarea_w - barwidth
	end

	local hasscrollbar = scrollbar:GetMaxScroll() > 0
	scrollbar:SetVisible(hasscrollbar)

	if not hasscrollbar then
		if ishorizontal then
			barwidth = scrollbar:GetHeight() + margin
			buttonarea_h = buttonarea_h + barwidth
		else
			barwidth = scrollbar:GetWidth() + margin
			buttonarea_w = buttonarea_w + barwidth
		end
	end

	local endindex = startindex + listviewsize
	local buttonindex = 0

	local buttonsize_w = (buttonarea_w - (margin * (ListSizeX - 1))) / ListSizeX
	local buttonsize_h = (buttonarea_h - (margin * (ListSizeY - 1))) / ListSizeY

	for i = startindex + 1, endindex do
		local buttonposindex = buttonindex
		buttonindex = buttonindex + 1

		local button = self:GetOrCreateButton(buttonindex)
		if not IsValid(button) then
			continue
		end

		local v = data[i] or {}

		local text = v.text or ""
		local icon = v.icon or -1
		local value = v.value
		local hasdata = text ~= "" or value ~= nil

		if not hasdata then
			button:Remove()
			continue
		end

		local ListX = 0
		local ListY = 0

		if ishorizontal then
			ListX = buttonposindex % ListSizeY
			ListY = buttonposindex / ListSizeY
		else
			ListX = buttonposindex % ListSizeX
			ListY = buttonposindex / ListSizeX
		end

		ListX = math.floor(ListX)
		ListY = math.floor(ListY)

		button:SetText(text)
		button:SetIcon(self:GetIDIcon(icon))
		button:SetAlign(TEXT_ALIGN_RIGHT)
		button:SetTextAlign(TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
		button:SetSize(buttonsize_w, buttonsize_h)

		local buttonsizemargin_w = buttonsize_w + margin
		local buttonsizemargin_h = buttonsize_h + margin

		if ishorizontal then
			button:SetPos(buttonsizemargin_w * ListY, buttonsizemargin_h * ListX)
		else
			button:SetPos(buttonsizemargin_w * ListX, buttonsizemargin_h * ListY)
		end

		button._listvaluedata = v

		button.DoClick = function(this)
			self:CallHook("OnItemClickInternal", this, value, buttonindex, ListX, ListY, i)
			self:CallHook("OnItemClick", this, value, buttonindex, ListX, ListY, i)
		end

		self:CallHook("OnItemUpdate", button, value, buttonindex, ListX, ListY, i)
	end
end

function CLASS:GetHashFromData(data)
	data = data or {}
	local datastring = {}

	for i, v in ipairs(data) do
		local text = v.text or ""
		local icon = v.icon or -1

		table.insert(datastring, string.format("{[%s][%d][%d]}", text, icon, i))
	end

	table.insert(datastring, string.format("[%d]", #data))
	datastring = table.concat(datastring, "\n")

	local hash = LIBNetwork.Hash(datastring)
	return hash
end

function CLASS:CalcHash()
	if CLIENT then return end
	if not self.Network.Active then return end

	local hash = self:GetHashFromData(self.Data)
	self.Hash.value = hash or ""
end

function CLASS:SetData(data)
	emptyTableSafe(self.Data)

	for k, v in pairs(data or {}) do
		self:AddData(v, true)
	end

	self:UpdateButtons()
end

function CLASS:AddData(data, noupdate)
	local v = {
		text = data.text or "",
		value = data.value,
		icon = data.icon or -1,
	}

	table.insert(self.Data, v)

	if not noupdate then
		self:UpdateButtons()
	end
end

function CLASS:UpdateData(index, data, noupdate)
	if not self.Data then return end
	if not self.Data[index] then return end

	self.Data[index] = {
		text = data.text or "",
		value = data.value,
		icon = data.icon or -1,
	}

	if not noupdate then
		self:UpdateButtons()
	end
end

function CLASS:ClearData()
	emptyTableSafe(self.Data)
	self:RecreateButtons()
end

function CLASS:SetHorizontal(horizontal)
	self.Layout.IsHorizontal = horizontal or false
end

function CLASS:GetHorizontal()
	return self.Layout.IsHorizontal or false
end

function CLASS:GetScrollBar()
	return self.ScrollBar
end

function CLASS:ForEachButton(func, ...)
	self:ForEachChild(function(this, panel)
		if panel == self.ScrollBar then return end
		func(this, panel)
	end, ...)
end

function CLASS:SetGridSize(x, y)
	x = x or 0
	y = y or 0

	if x < 0 then
		x = 0
	end

	if y < 0 then
		y = 0
	end

	self.Layout.ListGridX = x
	self.Layout.ListGridY = y
end

function CLASS:GetGridSize()
	return self.Layout.ListGridX or 0, self.Layout.ListGridY or 0
end

function CLASS:GetMaxButtonCount()
	return self.Layout.ListGridX * self.Layout.ListGridY
end

function CLASS:ActivateNetworkedMode()
	BASE.ActivateNetworkedMode(self)
	self.ScrollBar:ActivateNetworkedMode()

	if SERVER then
		self:SetNWInt("ListGridX", self.Layout.ListGridX)
		self:SetNWInt("ListGridY", self.Layout.ListGridY)
		self:SetNWBool("IsHorizontal", self:GetHorizontal())

		self:CalcHash()
		return
	end

	self:SetGridSize(self:GetNWInt("ListGridX", 0), self:GetNWInt("ListGridY", 0))
	self:SetHorizontal(self:GetNWBool("IsHorizontal", false))

	local hash = self:GetNWString("Hash", "")
	self.Hash.value = hash

	self:SetNWVarCallback("ListGridX", "Int", function(this, nwkey, oldvar, newvar)
		self.Layout.ListGridX = newvar
	end)

	self:SetNWVarCallback("ListGridY", "Int", function(this, nwkey, oldvar, newvar)
		self.Layout.ListGridY = newvar
	end)

	self:SetNWVarCallback("IsHorizontal", "Bool", function(this, nwkey, oldvar, newvar)
		self:SetHorizontal(newvar)
	end)

	self:SetNWVarCallback("Hash", "String", function(this, nwkey, oldvar, newvar)
		self.Hash.value = newvar or ""
	end)

	self:NetworkButtons()
	self:UpdateButtons()
end

function CLASS:SetIDIcon(ID, icon)
	ID = ID or -1
	if ID < 0 then return end

	self.IconIDs[ID] = icon or ID
	self:UpdateButtons()
end

function CLASS:GetIDIcon(ID)
	ID = ID or -1
	if ID < 0 then return end

	return self.IconIDs[ID]
end

function CLASS:GetHash()
	local curhash = self.Hash.value or ""

	if CLIENT and self.Network.Active then
		curhash = self:GetNWString("Hash", "")
	end

	return curhash
end

function CLASS:OnModelSetup(setup)
	BASE.OnModelSetup(self, setup)

	if setup.gridsize then
		local s = setup.gridsize
		local w = s.width or s.w or s.x or s[1] or 0
		local h = s.height or s.y or s[2] or 0

		self:SetGridSize(w, h)
	end
end

return true


--lua/streamradio_core/cfchttp.lua:
local StreamRadioLib = StreamRadioLib

StreamRadioLib.Cfchttp = StreamRadioLib.Cfchttp or {}

local LIB = StreamRadioLib.Cfchttp
table.Empty(LIB)

local g_emptyFunction = function() end

-- API Wrapper for CFC HTTP Whitelist
-- https://github.com/CFC-Servers/cfc_cl_http_whitelist

function LIB.IsInstalled()
	return istable(CFCHTTP)
end

function LIB.CanCheckWhitelist()
	if not LIB.IsInstalled() then
		return false
	end

	if not isfunction(CFCHTTP.GetOptionsForURL) then
		return false
	end

	return true
end

function LIB.CanLog()
	if not LIB.IsInstalled() then
		return false
	end

	if not isfunction(CFCHTTP.GetOptionsForURL) then
		return false
	end

	if not isfunction(CFCHTTP.LogRequest) then
		return false
	end

	return true
end

local function logUrl(url, options)
	if not LIB.CanLog() then
		return
	end

	-- Reimplemented as in:
	-- https://github.com/CFC-Servers/cfc_cl_http_whitelist/blob/265ce54eea0f386c6eb0390fe31f329f905b9d1f/lua/cfc_http_restrictions/wraps/playURL.lua#L15C1-L19C48

	local stack = string.Split( debug.traceback(), "\n" )

	local isAllowed = options and options.allowed
	local noisy = options and options.noisy

	local logData = {
		noisy = noisy,
		method = "GET",
		fileLocation = stack[4],
		urls = {
			{
				url = url,
				status = isAllowed and "allowed" or "blocked"
			}
		},
	}

	CFCHTTP.LogRequest(logData)
end

function LIB.LogRequestForURL(url)
	if not LIB.CanLog() then
		return
	end

	local options = CFCHTTP.GetOptionsForURL(url)

	logUrl(url, options)
end

function LIB.IsAllowedSync(url, logFailure)
	if not LIB.CanCheckWhitelist() then
		return true
	end

	if StreamRadioLib.Url.IsOfflineURL(url) then
		-- Offline file paths are always safe to use
		return true
	end

	local options = CFCHTTP.GetOptionsForURL(url)
	local isAllowed = options and options.allowed

	if isAllowed then
		return true
	end

	if logFailure then
		logUrl(url, options)
	end

	return false
end

function LIB.IsAllowedAsync(url, callback, logFailure)
	url = tostring(url or "")
	callback = callback or g_emptyFunction

	local result = LIB.IsAllowedSync(url, logFailure)
	callback(result)
end

local function addCfcErrorCodes()
	-- Handle CFC HTTP Whitelist custom error cases

	if CFCHTTP.BASS_ERROR_BLOCKED_URI then
		StreamRadioLib.Error.AddStreamErrorCode({
			id = CFCHTTP.BASS_ERROR_BLOCKED_URI,
			name = "STREAM_ERROR_CFCHTTP_BLOCKED_URI",
			description = "[CFC HTTP Whitelist] URI has been blocked",
			helpurl = "https://steamcommunity.com/workshop/filedetails/discussion/246756300/3884977551668766829/",
			helptext = [[
On this server you are protected by CFC HTTP Whitelist.

This URL has been blocked by CFC HTTP Whitelist to prevent abuse.

You can whitelist the URL (or its domain) for your client in the CFC HTTP Whitelist settings.
BE CAREFUL WITH WHAT YOU WHITELIST! Only whitelist URLs you trust! See your console for details.

You can also ask an admin to whitelist the URL in general in their CFC HTTP Whitelist config.
Keep in mind that there probably is a reason why it has not been whitelisted on this server yet.
]],
		})
	end

	if CFCHTTP.BASS_ERROR_BLOCKED_CONTENT then
		StreamRadioLib.Error.AddStreamErrorCode({
			id = CFCHTTP.BASS_ERROR_BLOCKED_CONTENT,
			name = "STREAM_ERROR_CFCHTTP_BLOCKED_CONTENT",
			description = "[CFC HTTP Whitelist] Content has been blocked",
			helpurl = "https://steamcommunity.com/workshop/filedetails/discussion/246756300/3884977551668766829/",
			helptext = [[
On this server you are protected by CFC HTTP Whitelist.

This content has been blocked by CFC HTTP Whitelist to prevent abuse.
The content you are trying to play from contains one or more URLs that have not been whitelisted yet.

You can whitelist the URLs (or their domains) for your client in the CFC HTTP Whitelist settings.
BE CAREFUL WITH WHAT YOU WHITELIST! Only whitelist URLs you trust! See your console for details.

You can also ask an admin to whitelist the content in general in their CFC HTTP Whitelist config.
Keep in mind that there probably is a reason why it has not been whitelisted on this server yet.
]],
		})
	end
end

function LIB.Load()
	if not LIB.IsInstalled() then
		return
	end

	addCfcErrorCodes()
end

return true


--lua/streamradio_core/interfaces/online.lua:
return gluapack()()
--lua/streamradio_core/interfaces/shoutcast.lua:
return gluapack()()
--lua/streamradio_core/filesystem/addon-web-radio.lua:
return gluapack()()
--lua/svmod/compatibility/permission/sh_cami.lua:
--[[
CAMI - Common Admin Mod Interface.
Copyright 2020 CAMI Contributors

Makes admin mods intercompatible and provides an abstract privilege interface
for third party addons.

Follows the specification on this page:
https://github.com/glua/CAMI/blob/master/README.md

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]

-- Version number in YearMonthDay format.
local version = 20201130

if CAMI and CAMI.Version >= version then return end

CAMI = CAMI or {}
CAMI.Version = version



local CAMI_PRIVILEGE = {}

function CAMI_PRIVILEGE:HasAccess(actor, target)
end

local usergroups = CAMI.GetUsergroups and CAMI.GetUsergroups() or {
	user = {
		Name = "user",
		Inherits = "user"
	},
	admin = {
		Name = "admin",
		Inherits = "user"
	},
	superadmin = {
		Name = "superadmin",
		Inherits = "admin"
	}
}

local privileges = CAMI.GetPrivileges and CAMI.GetPrivileges() or {}

function CAMI.RegisterUsergroup(usergroup, source)
	usergroups[usergroup.Name] = usergroup

	hook.Call("CAMI.OnUsergroupRegistered", nil, usergroup, source)
	return usergroup
end

function CAMI.UnregisterUsergroup(usergroupName, source)
	if not usergroups[usergroupName] then return false end

	local usergroup = usergroups[usergroupName]
	usergroups[usergroupName] = nil

	hook.Call("CAMI.OnUsergroupUnregistered", nil, usergroup, source)

	return true
end

function CAMI.GetUsergroups()
	return usergroups
end

function CAMI.GetUsergroup(usergroupName)
	return usergroups[usergroupName]
end

function CAMI.UsergroupInherits(usergroupName, potentialAncestor)
	repeat
		if usergroupName == potentialAncestor then return true end

		usergroupName = usergroups[usergroupName] and
						 usergroups[usergroupName].Inherits or
						 usergroupName
	until not usergroups[usergroupName] or
		  usergroups[usergroupName].Inherits == usergroupName

	-- One can only be sure the usergroup inherits from user if the
	-- usergroup isn't registered.
	return usergroupName == potentialAncestor or potentialAncestor == "user"
end

function CAMI.InheritanceRoot(usergroupName)
	if not usergroups[usergroupName] then return end

	local inherits = usergroups[usergroupName].Inherits
	while inherits ~= usergroups[usergroupName].Inherits do
		usergroupName = usergroups[usergroupName].Inherits
	end

	return usergroupName
end

function CAMI.RegisterPrivilege(privilege)
	privileges[privilege.Name] = privilege

	hook.Call("CAMI.OnPrivilegeRegistered", nil, privilege)

	return privilege
end

function CAMI.UnregisterPrivilege(privilegeName)
	if not privileges[privilegeName] then return false end

	local privilege = privileges[privilegeName]
	privileges[privilegeName] = nil

	hook.Call("CAMI.OnPrivilegeUnregistered", nil, privilege)

	return true
end

function CAMI.GetPrivileges()
	return privileges
end

function CAMI.GetPrivilege(privilegeName)
	return privileges[privilegeName]
end

-- Default access handler
local defaultAccessHandler = {["CAMI.PlayerHasAccess"] =
	function(_, actorPly, privilegeName, callback, targetPly, extraInfoTbl)
		-- The server always has access in the fallback
		if not IsValid(actorPly) then return callback(true, "Fallback.") end

		local priv = privileges[privilegeName]

		local fallback = extraInfoTbl and (
			not extraInfoTbl.Fallback and actorPly:IsAdmin() or
			extraInfoTbl.Fallback == "user" and true or
			extraInfoTbl.Fallback == "admin" and actorPly:IsAdmin() or
			extraInfoTbl.Fallback == "superadmin" and actorPly:IsSuperAdmin())


		if not priv then return callback(fallback, "Fallback.") end

		local hasAccess =
			priv.MinAccess == "user" or
			priv.MinAccess == "admin" and actorPly:IsAdmin() or
			priv.MinAccess == "superadmin" and actorPly:IsSuperAdmin()

		if hasAccess and priv.HasAccess then
			hasAccess = priv:HasAccess(actorPly, targetPly)
		end

		callback(hasAccess, "Fallback.")
	end,
	["CAMI.SteamIDHasAccess"] =
	function(_, _, _, callback)
		callback(false, "No information available.")
	end
}

function CAMI.PlayerHasAccess(actorPly, privilegeName, callback, targetPly,
extraInfoTbl)
	local hasAccess, reason = nil, nil
	local callback_ = callback or function(hA, r) hasAccess, reason = hA, r end

	hook.Call("CAMI.PlayerHasAccess", defaultAccessHandler, actorPly,
		privilegeName, callback_, targetPly, extraInfoTbl)

	if callback ~= nil then return end

	if hasAccess == nil then
		local err = [[The function CAMI.PlayerHasAccess was used to find out
		whether Player %s has privilege "%s", but an admin mod did not give an
		immediate answer!]]
		error(string.format(err,
			actorPly:IsPlayer() and actorPly:Nick() or tostring(actorPly),
			privilegeName))
	end

	return hasAccess, reason
end

function CAMI.GetPlayersWithAccess(privilegeName, callback, targetPly,
extraInfoTbl)
	local allowedPlys = {}
	local allPlys = player.GetAll()
	local countdown = #allPlys

	local function onResult(ply, hasAccess, _)
		countdown = countdown - 1

		if hasAccess then table.insert(allowedPlys, ply) end
		if countdown == 0 then callback(allowedPlys) end
	end

	for _, ply in ipairs(allPlys) do
		CAMI.PlayerHasAccess(ply, privilegeName,
			function(...) onResult(ply, ...) end,
			targetPly, extraInfoTbl)
	end
end

function CAMI.SteamIDHasAccess(actorSteam, privilegeName, callback,
targetSteam, extraInfoTbl)
	hook.Call("CAMI.SteamIDHasAccess", defaultAccessHandler, actorSteam,
		privilegeName, callback, targetSteam, extraInfoTbl)
end

function CAMI.SignalUserGroupChanged(ply, old, new, source)
	hook.Call("CAMI.PlayerUsergroupChanged", nil, ply, old, new, source)
end

function CAMI.SignalSteamIDUserGroupChanged(steamId, old, new, source)
	hook.Call("CAMI.SteamIDUsergroupChanged", nil, steamId, old, new, source)
end

--lua/svmod/config/cl_config.lua:
return gluapack()()
--lua/svmod/fuel/cl_fuel.lua:
-- @class SV_Vehicle
-- @clientside

net.Receive("SV_SetFuel", function()
	local Vehicle = net.ReadEntity()

	if SVMOD:IsVehicle(Vehicle) then
		Vehicle.SV_Fuel = net.ReadFloat()
	end
end)

net.Receive("SV_SetMaxFuel", function()
	local Vehicle = net.ReadEntity()

	if SVMOD:IsVehicle(Vehicle) then
		Vehicle.SV_MaxFuel = net.ReadFloat()
	end
end)

net.Receive("SV_GetFuel", function()
	local Vehicle = net.ReadEntity()

	if SVMOD:IsVehicle(Vehicle) then
		Vehicle.SV_Fuel = net.ReadFloat()
		Vehicle.SV_MaxFuel = net.ReadFloat()
	end
end)

-- Displays the interface to view a vehicle's fuel level.
function SVMOD.Metatable:SV_ShowFillingHUD()
	local lastLerp, startLerp

	hook.Add("PostDrawTranslucentRenderables", "SV_FillingHUD_" .. self:EntIndex(), function()
		if not SVMOD:IsVehicle(self) then
			hook.Remove("PostDrawTranslucentRenderables", "SV_FillingHUD_" .. self:EntIndex())
			return
		end

		local fuel = self:SV_GetFuel()
		local maxFuel = self:SV_GetMaxFuel()
		local percent = fuel / maxFuel

		if not startLerp or not lastLerp then
			lastLerp = percent
			startLerp = SysTime()
		end

		if SysTime() < startLerp or SysTime() - startLerp > 0.02 then
			startLerp = SysTime()
		end

		lastLerp = Lerp(SysTime() - startLerp, lastLerp, percent)

		local col = Color(255, 255, 0)
		if lastLerp > 0.5 then
			col.r = math.floor(255 - (lastLerp * 200 - 100) * 255 / 100)
		else
			col.g = math.floor((lastLerp * 200) * 255 / 100)
		end

		for _, v in ipairs(self.SV_Data.Fuel.GasTank) do
			local pos = self:LocalToWorld(v.GasHole.Position or Vector(0, 0, 0))
			local ang = SVMOD:RotateAroundAxis(self:GetAngles(), v.GasHole.Angles or Angle(0, 0, 0))

			cam.Start3D2D(pos, ang, 0.05)
				draw.RoundedBox(20, 0, 0, 70, 200, ColorAlpha(col, 100))
				if fuel > 0 then
					draw.RoundedBox(20, 0, 200 - (200 * lastLerp), 70, 200 * lastLerp, col)
				end
				draw.DrawText(math.Round(lastLerp * 100) .. "%", "SVModFont", 35, math.Clamp(200 - 200 * lastLerp, 5, 180), Color(0, 0, 0), TEXT_ALIGN_CENTER)
			cam.End3D2D()
			end
	end)
end

-- Hides the interface to view a vehicle's fuel level.
function SVMOD.Metatable:SV_HideFillingHUD()
	hook.Remove("PostDrawTranslucentRenderables", "SV_FillingHUD_" .. self:EntIndex())
end

net.Receive("SV_StartFilling", function()
	local veh = net.ReadEntity()

	if SVMOD:IsVehicle(veh) then
		-- veh.SV_FillingSound = CreateSound(veh, "svmod/fuel/fill-up.wav")
		-- veh.SV_FillingSound:Play()

		veh:SV_ShowFillingHUD()
	end
end)

net.Receive("SV_StopFilling", function()
	local veh = net.ReadEntity()

	if SVMOD:IsVehicle(veh) then
		-- veh.SV_FillingSound:Stop()

		veh:SV_HideFillingHUD()
	end
end)

net.Receive("SV_Settings_SetPriceFuelPump", function()
	local ent = net.ReadEntity()
	local value = net.ReadUInt(9) -- max: 511

	local frame = vgui.Create("DFrame")
	frame:SetSize(300, 110)
	frame:Center()
	frame:ShowCloseButton(false)
	frame:SetTitle("")
	frame.Paint = function(self, w, h)
		surface.SetDrawColor(18, 25, 31)
		surface.DrawRect(0, 0, w, h)

		surface.SetDrawColor(178, 95, 245)
		surface.DrawRect(0, 0, w, 4)
	end
	frame:MakePopup()

	local slide = SVMOD:CreateNumSlidePanel(frame, language.GetPhrase("svmod.fuel.price"), function(val)
		value = math.Round(val)
	end)
	slide:SetValue(value)
	slide:SetMaxValue(500)
	slide:SetUnit("u")

	local button = SVMOD:CreateButton(frame, language.GetPhrase("svmod.close"), function()
		frame:Close()

		net.Start("SV_Settings_SetPriceFuelPump")
		net.WriteEntity(ent)
		net.WriteUInt(value, 9) -- max: 511
		net.SendToServer()
	end)
	button:Dock(BOTTOM)
	button:SetSize(0, 30)
end)
--lua/svmod/gui/settings/cl_els.lua:
return gluapack()()
--lua/svmod/health/cl_repair.lua:
return gluapack()()
--lua/svmod/health/cl_wheel.lua:
function SVMOD.Metatable:SV_SetWheelBlowout(wheelID, state)
	if not self.SV_IsTireBlowout then
		self.SV_IsTireBlowout = {}
	end

	if state then
		if self.SV_IsTireBlowout[wheelID] then
			return
		end

		self.SV_IsTireBlowout[wheelID] = true

		if not self.SV_TireBlowoutSound then
			self.SV_TireBlowoutSound = CreateSound(self, "svmod/tire/blowout_a.wav")
			self.SV_TireBlowoutSound:SetSoundLevel(75)
			self.SV_TireBlowoutSound:ChangePitch(100, 0)
			timer.Simple(0.1, function()
				if self.SV_TireBlowoutSound then
					self.SV_TireBlowoutSound:ChangeVolume(SVMOD.CFG.Sounds.Horn * 0.15, 0)
				end
			end)
		end

		self.SV_TireBlowoutSound:Play()

		local veh = self
		timer.Create("SV_WheelBlowout_" .. veh:EntIndex() .. "_" .. wheelID, 0.1, 0, function()
			if not SVMOD:IsVehicle(veh) then
				timer.Remove("SV_WheelBlowout_" .. veh:EntIndex() .. "_" .. wheelID)
				return
			end

			local pos = veh:GetAttachment(wheelID).Pos
			--local ang = veh:GetAttachment(i).Ang
			local height = 28.79
			local effectData = EffectData()
			effectData:SetOrigin(pos - Vector(0, 0, height / 2))
			effectData:SetNormal(veh:GetAngles():Right() * 0.3)
			util.Effect("manhacksparks", effectData)
		end)
	else
		if not self.SV_IsTireBlowout[wheelID] then
			return
		end

		self.SV_IsTireBlowout[wheelID] = false
		self.SV_TireBlowoutSound:Stop()
		timer.Remove("SV_WheelBlowout_" .. self:EntIndex() .. "_" .. wheelID)
	end
end

hook.Add("EntityNetworkedVarChanged", "SV_Wheel", function(veh, name, oldVal, newVal)
	if not SVMOD:IsVehicle(veh) or not oldVal then
		return
	end

	local wheelID
	if name == "SV_WheelFLHealth" then
		wheelID = veh.SV_WheelFrontLeftID
	elseif name == "SV_WheelFRHealth" then
		wheelID = veh.SV_WheelFrontRightID
	elseif name == "SV_WheelRLHealth" then
		wheelID = veh.SV_WheelRearLeftID
	elseif name == "SV_WheelRRHealth" then
		wheelID = veh.SV_WheelRearRightID
	end

	if not wheelID then
		return
	end

	if math.abs(newVal - oldVal) >= 6 then
		if newVal < oldVal then
			veh:StopSound("svmod/tire/composite.wav")
			veh:EmitSound("svmod/tire/composite.wav", 75, 100, 0.5)
		else
			veh:StopSound("svmod/tire/composite_reversed.wav")
			veh:EmitSound("svmod/tire/composite_reversed.wav", 75, 100, 0.5)
		end
	end

	if newVal > 10 then
		timer.Remove("SV_WheelStartBlowout_" .. veh:EntIndex() .. "_" .. wheelID)
		veh:SV_SetWheelBlowout(wheelID, false)
	else
		timer.Create("SV_WheelStartBlowout_" .. veh:EntIndex() .. "_" .. wheelID, 0.5, 0, function()
			if not SVMOD:IsVehicle(veh) then
				timer.Remove("SV_WheelStartBlowout_" .. veh:EntIndex() .. "_" .. wheelID)
				return
			end

			if veh:GetVelocity():Length() > 50 then
				veh:SV_SetWheelBlowout(wheelID, true)
			else
				veh:SV_SetWheelBlowout(wheelID, false)
			end
		end)
	end
end)
--lua/svmod/horn/cl_horn.lua:
-- @class SVMOD
-- @clientside

-- Sets the horn state of the vehicle driven by the player.
-- @tparam boolean result True for honking
function SVMOD:SetHornState(value)
	local Vehicle = LocalPlayer():GetVehicle()
	if not SVMOD:IsVehicle(Vehicle) or not Vehicle:SV_IsDriverSeat() then return end

	if not value then
		value = false
	end

	net.Start("SV_SetHornState")
	net.WriteBool(value)
	net.SendToServer()
end

net.Receive("SV_TurnHorn", function()
	local Vehicle = net.ReadEntity()
	if not SVMOD:IsVehicle(Vehicle) then return end

	local State = net.ReadBool()

	if State then
		Vehicle.SV_States.Horn = true

		Vehicle.SV_HornSound = CreateSound(Vehicle, "svmod/horn/" .. (Vehicle.SV_Data.Sounds.Horn or "normal") .. ".wav")
		Vehicle.SV_HornSound:SetSoundLevel(75)
		Vehicle.SV_HornSound:Play()
		Vehicle.SV_HornSound:ChangePitch(100, 0)
		timer.Simple(0.1, function()
			if Vehicle.SV_HornSound then
				Vehicle.SV_HornSound:ChangeVolume(SVMOD.CFG.Sounds.Horn * 2, 0)
			end
		end)

	else
		Vehicle.SV_States.Horn = false

		if Vehicle.SV_HornSound then
			Vehicle.SV_HornSound:Stop()
		end
	end
end)
--lua/svmod/lights/hazardlights/cl_hazardlights.lua:
-- @class SVMOD
-- @clientside

-- Sets the state of the hazard lights of the vehicle
-- driven by the player.
-- @tparam boolean result True to enable the hazard lights, false to disable
function SVMOD:SetHazardLightsState(value)
	local Vehicle = LocalPlayer():GetVehicle()
	if not SVMOD:IsVehicle(Vehicle) or not Vehicle:SV_IsDriverSeat() then return end

	if not value then
		value = false
	end

	net.Start("SV_SetHazardLightsState")
	net.WriteBool(value)
	net.SendToServer()
end

net.Receive("SV_TurnHazardLights", function()
	local veh = net.ReadEntity()
	if not SVMOD:IsVehicle(veh) then return end
	veh = veh:SV_GetDriverSeat()

	veh.SV_States.HazardLights = net.ReadBool()

	if veh.SV_States.HazardLights then
		veh:EmitSound("svmod/blinker/switch_on.wav")
	else
		veh:EmitSound("svmod/blinker/switch_off.wav")
	end
end)
--lua/svmod/seats/cl_seats.lua:
return gluapack()()
--lua/svmod/shortcuts/sh_shortcuts.lua:
SVMOD.Shortcuts = {
	{
		Name = "svmod.shortcuts.honking",
		DefaultKey = KEY_R,
		Key = KEY_R,
		BypassTimer = true,
		PressedFunction = function(veh)
			SVMOD:SetHornState(true)
		end,
		ReleasedFunction = function(veh)
			SVMOD:SetHornState(false)
		end
	},
	{
		Name = "svmod.shortcuts.lock",
		DefaultKey = KEY_LALT,
		Key = KEY_LALT,
		ReleasedFunction = function(veh)
			if SVMOD.SV_PlayerKickedFromSeat then
				SVMOD.SV_PlayerKickedFromSeat = nil
			else
				SVMOD:SwitchLockState()
			end
		end
	},
	{
		Name = "svmod.shortcuts.headlights",
		DefaultKey = KEY_F,
		Key = KEY_F,
		PressedFunction = function(veh)
			if veh:SV_GetHeadlightsState() then
				SVMOD:SetHeadlightsState(false)
			else
				SVMOD:SetHeadlightsState(true)
			end
		end
	},
	{
		Name = "svmod.shortcuts.left_blinkers",
		DefaultKey = MOUSE_LEFT,
		Key = MOUSE_LEFT,
		PressedFunction = function(veh)
			if veh:SV_GetLeftBlinkerState() then
				SVMOD:SetLeftBlinkerState(false)
			else
				SVMOD:SetLeftBlinkerState(true)
			end
		end
	},
	{
		Name = "svmod.shortcuts.right_blinkers",
		DefaultKey = MOUSE_RIGHT,
		Key = MOUSE_RIGHT,
		PressedFunction = function(veh)
			if veh:SV_GetRightBlinkerState() then
				SVMOD:SetRightBlinkerState(false)
			else
				SVMOD:SetRightBlinkerState(true)
			end
		end
	},
	{
		Name = "svmod.shortcuts.hazard",
		DefaultKey = KEY_COMMA,
		Key = KEY_COMMA,
		PressedFunction = function(veh)
			if veh:SV_GetHazardLightsState() then
				SVMOD:SetHazardLightsState(false)
			else
				SVMOD:SetHazardLightsState(true)
			end
		end
	},
	{
		Name = "svmod.shortcuts.flashing",
		DefaultKey = KEY_LSHIFT,
		Key = KEY_LSHIFT,
		PressedFunction = function(veh)
			if veh:SV_GetFlashingLightsState() then
				SVMOD:SetFlashingLightsState(false)
			else
				SVMOD:SetFlashingLightsState(true)
			end
		end
	}
}
--lua/svmod/vehicles/cl_view.lua:
hook.Add("SV_PlayerEnteredVehicle", "SV_AddWheelMouse", function()
	hook.Add("StartCommand", "SV_Wheel", function(ply, cmd)
		local veh = ply:GetVehicle()
		if not SVMOD:IsVehicle(veh) then return end

		veh = veh:SV_GetDriverSeat()

		local A, B = veh:GetModelBounds()
		local Width = B.y - A.y
		if ply:GetVehicle():GetThirdPersonMode() and cmd:GetMouseWheel() ~= 0 then
			veh:SetCameraDistance(math.Clamp(veh:GetCameraDistance() + (-cmd:GetMouseWheel() / 10), Width / 1000 * 3, Width / 1000 * 7))
		end

		-- Disable default camera distance
		cmd:SetMouseWheel(0)
	end)
end)

hook.Add("SV_PlayerLeaveVehicle", "SV_RemoveWheelMouse", function()
	hook.Remove("StartCommand", "SV_Wheel")
end)

hook.Add("CalcVehicleView", "SV_VehicleView", function(veh, ply, view)
	local veh = ply:GetVehicle()
	if not SVMOD:IsVehicle(veh) or not veh:GetThirdPersonMode() then return end

	veh = veh:SV_GetDriverSeat()

	if veh:GetCameraDistance() == 0 then
		veh:SetCameraDistance(0.8)
	end
	local origin = veh:GetPos() + Vector(0, 0, 75) - (view.angles:Forward() * 250) * veh:GetCameraDistance()

	local tr = util.TraceHull({
		start = view.origin,
		endpos = origin,
		filter = function(e)
			if e:IsVehicle() then
				return false
			end
		end,
		mins = Vector(-4, -4, -4),
		maxs = Vector(4, 4, 4),
	})

	view.origin = tr.HitPos
	view.drawviewer = true

	if tr.Hit and not tr.StartSolid then
		view.origin = view.origin + tr.HitNormal * 4
	end

	return view
end)
--lua/autorun/tdmcars_airtug.lua:
return gluapack()()
--lua/autorun/tdmcars_h1.lua:
local V = {
			Name = "Hummer H1", 
			Class = "prop_vehicle_jeep",
			Category = "TDM Cars",
			Author = "TheDanishMaster, freemmaann, Turn 10",
			Information = "A drivable Hummer H1 by TheDanishMaster",
			Model = "models/tdmcars/hummerh1.mdl",
			//Vehicle Controller
			VC_Lights = { //Pos can be a simple Vector() relative to the vehicle or an attachment name, else is self explanatory, can be an infinite amount of these.
						{Pos = Vector(-40, -112.3, 46.7), Mat = "sprites/glow1.vmt", Alpha = 180, Size = 0.4, DynLight = true, ReverseColor = "255 255 255"},
						{Pos = Vector(40, -112.3, 46.7), Mat = "sprites/glow1.vmt", Alpha = 180, Size = 0.4, DynLight = true, ReverseColor = "255 255 255"},
						
						{Pos = Vector(-40, -112.3, 43.5), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.7, DynLight = true, NormalColor = "255 0 0", BrakeColor = "255 0 0"},
						{Pos = Vector(40, -112.3, 43.5), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.7, DynLight = true, NormalColor = "255 0 0", BrakeColor = "255 0 0"},

						{Pos = Vector(-43.7, 100, 39.8), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.35, DynLight = true, NormalColor = "255 130 0"},
						{Pos = Vector(43.7, 100, 39.8), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.35, DynLight = true, NormalColor = "255 130 0"},
						{Pos = Vector(-6.2, 35.8, 77.6), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.5, DynLight = true, NormalColor = "255 130 0"},
						{Pos = Vector(6.2, 35.8, 77.6), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.5, DynLight = true, NormalColor = "255 130 0"},
						{Pos = Vector(0, 35.8, 77.6), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.5, DynLight = true, NormalColor = "255 130 0"},
						{Pos = Vector(-14, -112.7, 36.2), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.5, DynLight = true, NormalColor = "255 0 0"},
						{Pos = Vector(14, -112.7, 36.2), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.5, DynLight = true, NormalColor = "255 0 0"},
						{Pos = Vector(0, -112.7, 36.2), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.5, DynLight = true, NormalColor = "255 0 0"},
						
						{Pos = Vector(-41.8, -109.2, 43.6), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.5, DynLight = true, BlinkersColor = "255 130 0"},
						{Pos = Vector(41.8, -109.2, 43.6), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.5, DynLight = true, BlinkersColor = "255 130 0"},
						
						{Pos = Vector(-40.6, 98.7, 45.1), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.6, DynLight = true, BlinkersColor = "255 130 0"},
						{Pos = Vector(40.6, 98.7, 45.1), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.6, DynLight = true, BlinkersColor = "255 130 0"},
						{Pos = Vector(-47.5, -112.3, 52), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.5, DynLight = true, BlinkersColor = "255 0 0"},
						{Pos = Vector(47.5, -112.3, 52), Mat = "sprites/glow1.vmt", Alpha = 220, Size = 0.5, DynLight = true, BlinkersColor = "255 0 0"},

						{Pos = Vector(-22, 88.7, 41.2), Size = 1, GlowSize = 1, HeadLightAngle = Angle(-5, 95, 0)},
						{Pos = Vector(22, 88.7, 41.2), Size = 1, GlowSize = 1, HeadLightAngle = Angle(-5, 85, 0)}
						},
			VC_Exhaust_Dissipate = true, 
			VC_Exhaust = { //Exhaust effect, only active when engine is on, can be infinite amount.
						{Pos = Vector(-47.5, -112.3, 20.5), Ang = Angle(0,90,0), EffectIdle = "Exhaust", EffectStress = "Exhaust"}
						},
			VC_ExtraSeats = { //Can be an infinite amount of seats, Pos and ExitPos can be a simple Vector() or an attachment name, other options are self explanatory.
						{Pos = Vector(30, 10, 40), Ang = Angle(0, 0, 8), EnterRange = 80, ExitAng = Angle(0, -90, 0), Model = "models/props_phx/carseat2.mdl", ModelOffset = Vector(12, 0, 4), Hide = true, DoorSounds = true, RadioControl = true},
						{Pos = Vector(30, -29, 40), Ang = Angle(0, 0, 8), EnterRange = 80, ExitAng = Angle(0, -90, 0), Model = "models/props_phx/carseat2.mdl", ModelOffset = Vector(12, 0, 4), Hide = true, DoorSounds = true, RadioControl = false},
						{Pos = Vector(-30, -29, 40), Ang = Angle(0, 0, 8), EnterRange = 80, ExitAng = Angle(0, -90, 0), Model = "models/props_phx/carseat2.mdl", ModelOffset = Vector(12, 0, 4), Hide = true, DoorSounds = true, RadioControl = false}
						},
			VC_Horn = {Sound = "vehicles/vc_horn_heavy.wav", Pitch = 110, Looping = false}, //Horn sound the car will use.
						
			KeyValues = {
							vehiclescript	=	"scripts/vehicles/TDMCars/h1.txt"
							}
			}
list.Set("Vehicles", "h1tdm", V)
--lua/autorun/tdmcars_mere63.lua:
return gluapack()()
--lua/autorun/tdmcars_merml63.lua:
return gluapack()()
--lua/autorun/tdmcars_pontiac.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/cl_3d2dvgui.lua:
--[[
	
3D2D VGUI Wrapper
Copyright (c) 2015-2017 Alexander Overvoorde, Matt Stevens
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]--

local origin = Vector(0, 0, 0)
local angle = Angle(0, 0, 0)
local normal = Vector(0, 0, 0)
local scale = 0
local maxrange = 0

-- Helper functions

local function getCursorPos()
	local p = util.IntersectRayWithPlane(LocalPlayer():EyePos(), LocalPlayer():GetAimVector(), origin, normal)

	-- if there wasn't an intersection, don't calculate anything.
	if not p then return end
	if WorldToLocal(LocalPlayer():GetShootPos(), Angle(0,0,0), origin, angle).z < 0 then return end

	if maxrange > 0 then
		if p:Distance(LocalPlayer():EyePos()) > maxrange then
			return
		end
	end

	local pos = WorldToLocal(p, Angle(0,0,0), origin, angle)

	return pos.x, -pos.y
end

local function getParents(pnl)
	local parents = {}
	local parent = pnl:GetParent()
	while parent do
		table.insert(parents, parent)
		parent = parent:GetParent()
	end
	return parents
end

local function absolutePanelPos(pnl)
	local x, y = pnl:GetPos()
	local parents = getParents(pnl)
	
	for _, parent in ipairs(parents) do
		local px, py = parent:GetPos()
		x = x + px
		y = y + py
	end
	
	return x, y
end

local function pointInsidePanel(pnl, x, y)
	local px, py = absolutePanelPos(pnl)
	local sx, sy = pnl:GetSize()

	if not x or not y then return end

	x = x / scale
	y = y / scale

	return pnl:IsVisible() and x >= px and y >= py and x <= px + sx and y <= py + sy
end

-- Input

local inputWindows = {}
local usedpanel = {}

local function isMouseOver(pnl)
	return pointInsidePanel(pnl, getCursorPos())
end

local function postPanelEvent(pnl, event, ...)
	if not IsValid(pnl) or not pnl:IsVisible() or not pointInsidePanel(pnl, getCursorPos()) then return false end

	local handled = false
	
	for i, child in pairs(table.Reverse(pnl:GetChildren())) do
		if not child:IsMouseInputEnabled() then continue end
		
		if postPanelEvent(child, event, ...) then
			handled = true
			break
		end
	end
	
	if not handled and pnl[event] then
		pnl[event](pnl, ...)
		usedpanel[pnl] = {...}
		return true
	else
		return false
	end
end

-- Always have issue, but less
local function checkHover(pnl, x, y, found)
	if not (x and y) then
		x, y = getCursorPos()
	end

	local validchild = false
	for c, child in pairs(table.Reverse(pnl:GetChildren())) do
		if not child:IsMouseInputEnabled() then continue end
		
		local check = checkHover(child, x, y, found or validchild)

		if check then
			validchild = true
		end
	end

	if found then
		if pnl.Hovered then
			pnl.Hovered = false
			if pnl.OnCursorExited then pnl:OnCursorExited() end
		end
	else
		if not validchild and pointInsidePanel(pnl, x, y) then
			pnl.Hovered = true
			if pnl.OnCursorEntered then pnl:OnCursorEntered() end

			return true
		else
			pnl.Hovered = false
			if pnl.OnCursorExited then pnl:OnCursorExited() end
		end
	end

	return false
end

-- Mouse input

hook.Add("KeyPress", "VGUI3D2DMousePress", function(_, key)
	if key == IN_USE then
		for pnl in pairs(inputWindows) do
			if IsValid(pnl) then
				origin = pnl.Origin
				scale = pnl.Scale
				angle = pnl.Angle
				normal = pnl.Normal

				local key = input.IsKeyDown(KEY_LSHIFT) and MOUSE_RIGHT or MOUSE_LEFT
				
				postPanelEvent(pnl, "OnMousePressed", key)
			end
		end
	end
end)

hook.Add("KeyRelease", "VGUI3D2DMouseRelease", function(_, key)
	if key == IN_USE then
		for pnl, key in pairs(usedpanel) do
			if IsValid(pnl) then
				origin = pnl.Origin
				scale = pnl.Scale
				angle = pnl.Angle
				normal = pnl.Normal

				if pnl["OnMouseReleased"] then
					pnl["OnMouseReleased"](pnl, key[1])
				end

				usedpanel[pnl] = nil
			end
		end
	end
end)

function vgui.Start3D2D(pos, ang, res)
	origin = pos
	scale = res
	angle = ang
	normal = ang:Up()
	maxrange = 0
	
	cam.Start3D2D(pos, ang, res)
end

function vgui.MaxRange3D2D(range)
	maxrange = isnumber(range) and range or 0
end

function vgui.IsPointingPanel(pnl)
	origin = pnl.Origin
	scale = pnl.Scale
	angle = pnl.Angle
	normal = pnl.Normal

	return pointInsidePanel(pnl, getCursorPos())
end

local Panel = FindMetaTable("Panel")
function Panel:Paint3D2D()
	if not self:IsValid() then return end
	
	-- Add it to the list of windows to receive input
	inputWindows[self] = true

	-- Override gui.MouseX and gui.MouseY for certain stuff
	local oldMouseX = gui.MouseX
	local oldMouseY = gui.MouseY
	local cx, cy = getCursorPos()

	function gui.MouseX()
		return (cx or 0) / scale
	end
	function gui.MouseY()
		return (cy or 0) / scale
	end
	
	-- Override think of DFrame's to correct the mouse pos by changing the active orientation
	if self.Think then
		if not self.OThink then
			self.OThink = self.Think
			
			self.Think = function()
				origin = self.Origin
				scale = self.Scale
				angle = self.Angle
				normal = self.Normal
				
				self:OThink()
			end
		end
	end
	
	-- Update the hover state of controls
	local _, tab = checkHover(self)
	
	-- Store the orientation of the window to calculate the position outside the render loop
	self.Origin = origin
	self.Scale = scale
	self.Angle = angle
	self.Normal = normal
	
	-- Draw it manually
	self:SetPaintedManually(false)
		self:PaintManual()
	self:SetPaintedManually(true)

	gui.MouseX = oldMouseX
	gui.MouseY = oldMouseY
end

function vgui.End3D2D()
	cam.End3D2D()
end
--addons/voidlib/lua/voidlib/sh_config.lua:
VoidUI.Colors = {
	Primary = Color(35, 35, 35),
	Background = Color(20, 20, 20),

	BackgroundTransparent = Color(20, 20, 20, 127),

	InputDark = Color(35, 35, 35),
	InputLight = Color(50, 50, 50),

	Green = Color(66, 170, 70),
	LightGray = Color(126, 126, 126),
	Gray = Color(222, 222, 222),
	GrayTransparent = Color(222, 222, 222, 120),

	GrayText = Color(110,110,110),

	DarkGrayTransparent = Color(52,52,52,200),
	GrayDarker = Color(170, 170, 170),
	GrayOverlay = Color(35, 35, 35, 220),
	White = Color(255,255,255),
	WhiteOff = Color(126, 126, 126),

	GreenTransparent = Color(66, 170, 70, 220),
	
	Hover = Color(45,45,45),
	Black = Color(0,0,0),
	TextGray = Color(77,77,77),
	
	Red = Color(170, 66, 66),
	Blue = Color(66, 104, 170),
	Orange = Color(170, 91, 66),

	BlueGradientStart = Color(66, 104, 170),
	BlueGradientEnd = Color(38, 60, 97),

	BlueLineGradientEnd = Color(33, 52, 85),

	GreenGradientEnd = Color(33, 85, 35),

	Bronze = Color(168, 106, 65),
	Gold = Color(210, 153, 38),
	Silver = Color(222, 222, 222),
}

VoidLib.ImageProvider = "i.imgur.com/"

if (CLIENT) then

	VoidUI.Font = "Rubik"

	VoidUI.Icons = {
		Close = Material("voidui/close.png"),
		CloseX = Material("voidui/close-x.png"),
		Rename = Material("voidui/rename.png"),
		Settings = Material("voidui/settings.png"),
		Profile = Material("voidui/profile.png"),
		RoundedBox = Material("voidui/roundedbox.png", "alphatest smooth"),

		Faction = Material("voidui/faction.png"),
		Board = Material("voidui/board.png"),
		User = Material("voidui/user.png"),

		Add = Material("voidui/add.png"),
		EditCircle = Material("voidui/edit-circle.png"),
		Remove = Material("voidui/remove.png"),
		Move = Material("voidui/move.png"),

		Deposit = Material("voidui/deposit.png"),
		Upgrades = Material("voidui/upgrades.png"),
		Lock = Material("voidui/lock.png"),

		Rewards = Material("voidui/rewards.png"),
		Stats = Material("voidui/stats.png"),

		Trophy = Material("voidui/trophy.png"),
		TrophyHollow = Material("voidui/trophy_hollow.png"),

		Search = Material("voidui/search.png"),
	}

	timer.Simple(1, function ()
		local sc = VoidUI.Scale
		local strFont = VoidUI.Font

		for i = 7,26 do
			local size = i*2
			local rlSize = sc(size)

			surface.CreateFont("VoidUI.R" .. size, {
				font = strFont,
				size = rlSize,
				extended = true
			})

			surface.CreateFont("VoidUI.S" .. size, {
				font = strFont .. " Light",
				size = rlSize,
				weight = 400,
				extended = true
			})

			surface.CreateFont("VoidUI.B" .. size, {
				font = strFont .. " Bold",
				size = rlSize,
				weight = 500,
				extended = true
			})
		end

		VoidLib.FontsLoaded = true
		hook.Run("VoidLib.FontsLoaded")
	end)
end
--addons/voidlib/lua/voidlib/sh_language.lua:
return gluapack()()
--addons/voidlib/lua/voidlib/vgui/button.lua:
local PANEL = {}

function PANEL:Init()
	self.hoveredFactor = 20

	self.color = VoidUI.Colors.Green
	self.bgColor = VoidUI.Colors.Primary

	self.textColor = VoidUI.Colors.White
	self.text = "SELECT"
	self.font = "VoidUI.R28"
	
	self.rounding = 16
	self.thickness = 2

	self:SetText("")
	self.SetText = function (self, text)
		self.text = string.upper(text)
		surface.SetFont(self.font)
		local sizeX = surface.GetTextSize(self.text)
		if (sizeX > 180) then
			self.font = "VoidUI.R22"
		end
	end

end


function PANEL:SetColor(col, bgCol)
	self.color = col
	if (bgCol) then
		self.bgColor = bgCol
	end
end

function PANEL:SetSmaller()
	self.rounding = 16
	self.thickness = 1
	self:SetFont("VoidUI.R18")
end

function PANEL:SetMedium()
	self.rounding = 16
	self.thickness = 1
	self:SetFont("VoidUI.R22")
end

function PANEL:SetSmallerMedium()
	self.rounding = 14
	self.thickness = 1
	self:SetFont("VoidUI.R20")
end

function PANEL:SetCompact()
	self.font = "VoidUI.R18"
	self.rounding = 8
	self.thickness = 1

	self.text = string.upper(self.text)
end


function PANEL:SetSelected(bool)
	self.isSelected = bool
	self:SetEnabled(!bool)
end

function PANEL:SetTextColor(col)
	self.textColor = col
end

function PANEL:SetFont(font)
	self.font = font
end


function PANEL:Paint(w, h)
	local isHovered = self:IsHovered() or self.isSelected

	local color = self.color
	local textColor = self.textColor
	local bgColor = self.bgColor

	if (!self:IsEnabled() and !self.enableShow) then
		color = VoidUI.Colors.TextGray
		textColor = VoidUI.Colors.TextGray
		isHovered = false
		self:SetCursor("no")
	else
		self:SetCursor("hand")
	end
	
	local sizeX = surface.GetTextSize(self.text)
	local space = 5

	if (sizeX - space > w) then
		local i = 28

		while (sizeX + space > w) do
			i = i - 2
			if (i < 14) then break end
			self:SetFont("VoidUI.R"..i)
			surface.SetFont("VoidUI.R"..i)
			sizeX = surface.GetTextSize(self.text)
		end
	end

	draw.RoundedBox(self.rounding, 0, 0, w, h, color)
	draw.RoundedBox(self.rounding, self.thickness, self.thickness, w-self.thickness*2, h-self.thickness*2, isHovered and color or bgColor)

	
	draw.SimpleText(self.isSelected and (!self.selectStr and "SELECTED" or self.selectStr) or self.text, self.font, w/2, h/2-1, textColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
end

vgui.Register("VoidUI.Button", PANEL, "DButton")

--addons/voidlib/lua/voidlib/vgui/elementgrid.lua:
local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
    self:Dock(FILL)
    self:InvalidateParent(true)

    self:SetColumns(2)
    self:SetHorizontalMargin(sc(45))
    self:SetVerticalMargin(sc(20))
end

function PANEL:AddElement(title, element, height, nocell)
    local entry = vgui.Create("Panel")
    entry:SSetTall(height and height + 30 or 75)
    entry.Paint = function (self, w, h)
        draw.SimpleText(string.upper(title), "VoidUI.B24", 0, sc(15), VoidUI.Colors.GrayText, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
    end

    entry.input = entry:Add(element)
    entry.input:Dock(TOP)
    entry.input:SDockMargin(0, sc(30), 0, 0)
    entry.input:SSetTall(height or 45)

    if (!nocell) then
        self:AddCell(entry, nil)
    end

    return entry.input, entry
end

vgui.Register("VoidUI.ElementGrid", PANEL, "VoidUI.Grid")
--addons/voidlib/lua/voidlib/vgui/frame.lua:

local sc = VoidUI.Scale

local PANEL = {}

function PANEL:Init()
	self:SetDraggable(false)

	self:DockMargin(0,0,0,0)
	self:DockPadding(0,0,0,0)

	self.lblTitle:SetText("")
	
	self.font = "VoidUI.R38"

	self.title = "Frame"
	self.drawShadow = false

	self.navbar = self:Add("Panel")
	self.navbar:Dock(TOP)
	self.navbar:SSetTall(50)
	self.navbar:SetDrawOnTop(true)
	self.navbar.PaintOver = function (self, w, h)
		local x, y = self:LocalToScreen(0,0)

		BSHADOWS.BeginShadow()
			surface.SetDrawColor(VoidUI.Colors.Primary)
			surface.DrawRect(x,y,w,h)
		BSHADOWS.EndShadow(1, 1, 1, 150, 0, 0)

		draw.SimpleText(self:GetParent().title, self:GetParent().font, w/2, h/2 - sc(2), VoidUI.Colors.Gray, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	end

	self.close = self.navbar:Add("VoidUI.Close")

end


function PANEL:PerformLayout(w, h)
	self.close:SetPos(w - sc(14) - self.close:GetWide(), sc(10))
end

function PANEL:StayOnTop()
	self.stayOnTop = true
end

function PANEL:Think()
	if (self.stayOnTop and !self:HasFocus()) then
		self:MoveToFront()
	end
end

function PANEL:SetTitle(title)
	self.title = title
end

function PANEL:SetFont(font)
	self.font = font	
end

function PANEL:Paint(w,h)
	if (self.drawShadow) then
		local x, y = self:LocalToScreen(0,0)

		BSHADOWS.BeginShadow()
			surface.SetDrawColor(VoidUI.Colors.Background)
			surface.DrawRect(x,y,w,h)
		BSHADOWS.EndShadow(1, 1, 1, 150, 0, 0)
	else
		surface.SetDrawColor(VoidUI.Colors.Background)
		surface.DrawRect(0,0,w,h)
	end
end


vgui.Register("VoidUI.Frame", PANEL, "DFrame")

--addons/voidlib/lua/voidlib/vgui/keybind.lua:
local sc = VoidUI.Scale

local focusedKeybind = nil

local PANEL = {}

function PANEL:Init()
    self:SetText("")

    self.text = "Click to add"
    self.focusText = "Press any key"

    self.keyText = nil
    self.value = nil

    self.isActive = false

    self.color = VoidUI.Colors.InputDark
end

function PANEL:SetLight()
    self.color = VoidUI.Colors.InputLight
end

function PANEL:Select(key)
    if (key != nil) then
        local keyName = language.GetPhrase(input.GetKeyName(key))
        self.keyText = keyName
    else
        self.keyText = nil
    end
    self.value = key
end

function PANEL:OnSelect(key)

end

hook.Add("VGUIMousePressed", "VoidUI.KeybindKeypress", function (pnl, key)
    if (IsValid(focusedKeybind)) then
        focusedKeybind:KillFocus()
        focusedKeybind:FocusNext()
    end
end)

function PANEL:DoClick()
    if (!self:HasFocus()) then
        self:RequestFocus()
        self.isActive = true

        focusedKeybind = self
    else
        self:KillFocus()
        self:FocusNext()
        self.isActive = false

        focusedKeybind = nil
    end
    
end

function PANEL:DoRightClick()
    self.keyText = nil
    self.value = nil

    self:OnSelect(nil)

    self:KillFocus()
    self:FocusNext()
end

function PANEL:OnKeyCodePressed(key)
    self:Select(key)
    self:OnSelect(key)

    self:KillFocus()
    self:FocusNext()
end


function PANEL:Paint(w, h)
    local color = self:IsHovered() and VoidUI.Colors.Hover or self.color
    draw.RoundedBox(8, 0, 0, w, h, color)

    local text = self:HasFocus() and self.focusText or (self.keyText or self.text)

    local textColor = self.keyText and VoidUI.Colors.White or VoidUI.Colors.TextGray
    draw.SimpleText(text, "VoidUI.R26", sc(15), h/2, textColor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
end

vgui.Register("VoidUI.KeybindButton", PANEL, "DButton")
--addons/voidlib/lua/voidlib/vgui/textgrid.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/features/menu/cl_menu.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/features/playtime/sh_playtime.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/features/playtime/sh_playtime.lua:
hook.Add("PlayerInitialSpawn", "VoidFactions.Playtime.TrackPlaytimeSV", function (ply)
    ply.vf_sessionJoin = SysTime()
end)

hook.Add("InitPostEntity", "VoidFactions.Playtime.TrackSessionCL", function ()
    if (SERVER) then return end
    LocalPlayer().vf_sessionJoin = SysTime()
end)

--[[---------------------------------------------------------
	Name: Player meta
-----------------------------------------------------------]]

local PLAYER = FindMetaTable("Player")

-- Returns seconds
function PLAYER:GetSessionPlaytime(noFormat)
    if (!self.vf_sessionJoin) then
	self.vf_sessionJoin = SysTime()
    end
	
    local sessionTime = SysTime() - self.vf_sessionJoin
    return (noFormat and sessionTime) or string.NiceTime(sessionTime)
end


--addons/voidfactions-1.10.6/lua/voidfactions/modules/experience/capturepointminute.lua:
local MODULE = VoidFactions.XP:Module()
MODULE:SetID("TerritoryMinute") -- Translation -> string.lower -> prepend xp_

MODULE:Setup(function ()
    timer.Create("VoidFactions.CapturePoints.TerritoryMinute", 60, 0, function ()
        for k, point in pairs(VoidFactions.PointsTable) do
            local faction = point.captureFaction
            if (!faction) then continue end

            MODULE:AddXP(faction)
        end
    end)
end)

VoidFactions.XP:AddModule(MODULE)
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/armorincrease.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/healthincrease.lua:
local UPGRADE = VoidFactions.Upgrades:NewUpgrade()

UPGRADE:Name("upgr_morehp")
UPGRADE:Icon("4ZcMBl5")

UPGRADE:Description("upgr_desc_morehp")
UPGRADE:ValueDescription("upgr_descval_morehp")

UPGRADE:FormatValue(function (val)
    return "+" .. val .. "%"
end)

UPGRADE:OnReset(function (ply)
    if (!SERVER) then return end
end)

UPGRADE:OnRespawn(function (ply, val)
    if (!SERVER) then return end
    
    timer.Simple(3, function ()
        local percentage = val / 100
        ply:SetHealth(ply:Health() + ply:GetMaxHealth() * percentage)
    end)
end)

VoidFactions.Upgrades:AddUpgrade(UPGRADE)

--addons/voidfactions-1.10.6/lua/voidfactions/modules/upgrades/speedboost.lua:
local UPGRADE = VoidFactions.Upgrades:NewUpgrade()

UPGRADE:Name("upgr_speedboost")
UPGRADE:Icon("Kphnmej")

UPGRADE:Numeric()

UPGRADE:Description("upgr_desc_speedboost")
UPGRADE:ValueDescription("upgr_descval_speedboost")

UPGRADE:FormatValue(function (val)
    return "+" .. val .. "%"
end)

UPGRADE:OnReset(function (ply)
    if (!SERVER) then return end

    ply:SetRunSpeed(ply.origWalkSpeed)
    ply:SetWalkSpeed(ply.origRunSpeed)
    ply:SetMaxSpeed(ply.origRunSpeed)
end)

UPGRADE:OnRespawn(function (ply, val)
    if (!SERVER) then return end

    timer.Simple(1, function ()
        if (!IsValid(ply)) then return end
        
        ply.origWalkSpeed = ply:GetWalkSpeed()
        ply.origRunSpeed = ply:GetRunSpeed()

        local percentage = val / 100
        local multiplier = percentage + 1

        ply:SetRunSpeed(ply:GetRunSpeed() * multiplier)
        ply:SetWalkSpeed(ply:GetWalkSpeed() * multiplier)
        ply:SetMaxSpeed(ply:GetRunSpeed() * multiplier)
    end)
end)

VoidFactions.Upgrades:AddUpgrade(UPGRADE)
--addons/voidfactions-1.10.6/lua/voidfactions/modules/rewards/upgradesunlocked.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/inventories/xenininventory.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/modules/inventories/xenininventory.lua:
-- Utility function

local function getItemByClass(inv, class)
    local items = inv:GetInventory()

    for k, item in pairs(items or {}) do
        if (item.ent == class) then
            return item
        end
    end
end

local function createItemStruct(item, itemClass, dropClass, data)
    return {
        class = itemClass,
        model = item:GetModel(itemClass),
        dropClass = dropClass,
        data = data or {}
    }
end

-- Class
local INVENTORY = VoidFactions.Inventories:NewInventory()
INVENTORY:Name("Xenin Inventory")

INVENTORY:IsInstalledFunc(function ()
    return XeninInventory and true or false
end)

INVENTORY:GetItemsFunc(function (ply)
    local inventory = ply:XeninInventory()
    local items = inventory:GetInventory()
		
    local itemsTbl = {}
    for k, item in pairs(items or {}) do
        for i = 1, item.amount do
            itemsTbl[item.ent] = true
        end
    end

    return itemsTbl
end)

INVENTORY:GetItemDataFunc(function (ply, itemClass)
    local inventory = ply:XeninInventory()
    local itemStruct = getItemByClass(inventory, itemClass)
    if (!itemStruct) then return end

    local item = XeninInventory:GetItem(itemStruct.dropEnt)
    if (!item) then return end

    return createItemStruct(item, itemClass, itemStruct.dropEnt, itemStruct.data)
end)

INVENTORY:TakeItemFunc(function (ply, itemClass)
    local inventory = ply:XeninInventory()
    local item = getItemByClass(inventory, itemClass)
    if (!item) then return end

    inventory:ReduceAmount(item.id, 1)
end)

INVENTORY:GiveItemFunc(function (ply, class, dropClass, model, data)
    local inventory = ply:XeninInventory()
    inventory:Add(class, dropClass, model, 1, data or {})
end)

INVENTORY:GetRarityColorFunc(function (dropEnt)
    local rarity = XeninInventory:GetRarity(dropEnt)
    local cat = XeninInventory.Config.Categories[rarity]
    local color = cat and cat.color or XeninInventory.Config.Categories[1].color

    return color
end)

VoidFactions.Inventories:AddInventory(INVENTORY)
--addons/voidfactions-1.10.6/lua/voidfactions/net/faction/cl_faction.lua:

local L = VoidFactions.Lang.GetPhrase

VoidFactions.Faction = VoidFactions.Faction or {}
VoidFactions.LoadedFactions = VoidFactions.LoadedFactions or {}

-- Functions

function VoidFactions.Faction:CreateStaticFaction(...)
	return VoidFactions.Faction:UpdateStaticFaction(nil, ...)
end

-- These functions also create the factions
function VoidFactions.Faction:UpdateDynamicFaction(faction, name, factionTag, factionColor, logo, inviteRequired)
	name = string.Trim(name)
	factionTag = string.Trim(factionTag)

	local validation, msg = VoidFactions.Faction:ValidateFaction(name, nil, factionTag)
	if (!validation) then
		VoidLib.Notify(L"error", L(msg), VoidUI.Colors.Red, 5)
        return false
	end

	factionColor = Color(factionColor.r, factionColor.g, factionColor.b, 255)

	net.Start("VoidFactions.Faction.UpdateDynamicFaction")
		net.WriteBool(faction and true or false)
		if (faction) then
			net.WriteUInt(faction.id, 20)
		end
		net.WriteString(name)
		net.WriteString(factionTag)
		net.WriteColor(factionColor)
		net.WriteString(logo)
		net.WriteBool(inviteRequired)
	net.SendToServer()

	return true
end

function VoidFactions.Faction:UpdateStaticFaction(faction, name, factionTag, subfactionOf, factionColor, maxMembers, logo, inviteRequired, canCaptureTerritory, showOnBoard, isDefaultFaction, description, usergroups)
	local validation, msg = VoidFactions.Faction:ValidateFaction(name, maxMembers)
	if (!validation) then
		VoidLib.Notify(L"error", L(msg), VoidUI.Colors.Red, 5)
        return false
	end

	factionColor = Color(factionColor.r, factionColor.g, factionColor.b, 255)

	net.Start("VoidFactions.Faction.UpdateStaticFaction")
		net.WriteBool(faction and true or false)
		if (faction) then
			net.WriteUInt(faction.id, 20)
		end
		net.WriteString(name)
		net.WriteString(description)
		net.WriteString(factionTag)
		net.WriteColor(factionColor)
		net.WriteUInt(maxMembers, 20)
		net.WriteBool(subfactionOf and true or false)
		if (subfactionOf) then
			net.WriteUInt(subfactionOf, 20) -- ID
		end
		net.WriteBool(logo != "" and true or false)
		if (logo != "") then
			net.WriteString(logo)
		end
		net.WriteBool(inviteRequired)
		net.WriteBool(canCaptureTerritory)
		net.WriteBool(showOnBoard)
		net.WriteBool(isDefaultFaction)
		net.WriteTable(usergroups)
	net.SendToServer()

	return true
end

function VoidFactions.Faction:DeleteFaction(faction)
	net.Start("VoidFactions.Faction.DeleteFaction")
		net.WriteUInt(faction.id, 20)
	net.SendToServer()
end

function VoidFactions.Faction:RequestFactionRanks(id)
	net.Start("VoidFactions.Faction.RequestFactionRanks")
		net.WriteUInt(id, 20)
	net.SendToServer()
end

function VoidFactions.Faction:RequestFactionDeposits(id)
	net.Start("VoidFactions.Faction.RequestFactionDeposits")
		net.WriteUInt(id, 20)
	net.SendToServer()
end

function VoidFactions.Faction:RequestRankingPage(page, entryAmount)
	net.Start("VoidFactions.Factions.RequestRankingPage")
		net.WriteUInt(page, 12)
		net.WriteBool(entryAmount and true or false)
		if (entryAmount) then
			net.WriteUInt(entryAmount, 7)
		end
	net.SendToServer()
end

function VoidFactions.Faction:RequestFactionRank()
	net.Start("VoidFactions.Factions.GetFactionRank")
	net.SendToServer()
end

-- Net handlers

net.Receive("VoidFactions.Factions.NetworkNewFaction", function (len, ply)
	local faction = VoidFactions.Faction:ReadFaction()
	VoidFactions.LoadedFactions[faction.id] = faction

	VoidFactions.PrintDebug("Received new faction " .. faction.name .. "!")
end)

net.Receive("VoidFactions.Factions.SendRankingPage", function (len, ply)
	local page = net.ReadUInt(12)
	local entryCount = net.ReadUInt(20)
	local isAdmin = net.ReadBool()

	local length = net.ReadUInt(7)

	local factions = {}
	if (isAdmin) then
		for i = 1, length do
			local faction = VoidFactions.Faction:ReadFaction(true)
			factions[faction.id] = faction

			local count = net.ReadUInt(8)
			local maxMembers = net.ReadUInt(10)

			faction.count = count
			faction.maxMembers = maxMembers
		end
	else
		for i = 1, length do
			local rank = net.ReadUInt(20)
			local id = net.ReadUInt(20)
			local name = net.ReadString()
			local level = net.ReadUInt(14)
			local count = net.ReadUInt(8)
			local canJoin = net.ReadBool()
			local maxMembers = net.ReadUInt(10)


			factions[rank] = {
				id = id,
				name = name,
				rank = rank,
				level = level,
				count = count,
				canJoin = canJoin,
				maxMembers = maxMembers,
			}
		end
	end

	entryCount = entryCount or 0

	if (isAdmin) then
		hook.Run("VoidFactions.Factions.ReceivedFactionPage", page, factions, entryCount)
	else
		hook.Run("VoidFactions.Factions.ReceivedRankingPage", page, factions, math.ceil(entryCount / 6))
	end
end)

net.Receive("VoidFactions.Factions.SendFactionRank", function (len, ply)
	local rank = net.ReadUInt(20)

	local member = VoidFactions.PlayerMember
	local faction = member.faction
	if (faction) then
		faction:SetFactionRanking(rank)
	end
end)

net.Receive("VoidFactions.Faction.UpdateFactionData", function ()
	local factionId = net.ReadUInt(20)
	local type = net.ReadUInt(3)

	if (!VoidFactions.PlayerMember) then return end

	local faction = VoidFactions.PlayerMember and VoidFactions.PlayerMember.faction
	if ( (faction and faction.id != factionId) or !faction ) then
		VoidFactions.PrintDebug("Updating ranks info!")
		faction = VoidFactions.LoadedFactions[factionId]
	end

	
	if (!faction) then
		VoidFactions.PrintError("Tried to update faction data, but player's faction doesn't exist on clientside!")
		return
	end

	if (type == VoidFactions.Faction.Enums.UPGRADES_UPDATE) then
		local upgradeCount = net.ReadUInt(10)
		local upgrades = {}
		for i = 1, upgradeCount do
			local upgrade = net.ReadUInt(10)
			upgrades[upgrade] = true
		end

		local upgrPoints = net.ReadUInt(24)
		faction:SetUpgrades(upgrades)
		faction:SetSpentUpgradePoints(upgrPoints)
	end

	if (type == VoidFactions.Faction.Enums.REWARDS_UPDATE) then
		VoidFactions.PrintDebug("Received rewards update!")
		VoidFactions.FactionRewards:ReadReward(faction)
	end

	if (type == VoidFactions.Faction.Enums.XP_UPDATE) then
		local xp = net.ReadUInt(32)
		local level = nil
		if (net.ReadBool()) then
			level = net.ReadUInt(14)
		end

		VoidFactions.PrintDebug("Updating XP data!")
		faction:SetXP(xp)
		if (level) then
			faction:SetLevel(level)
		end
	end

	if (type == VoidFactions.Faction.Enums.DEPOSITS_UPDATE) then

		local money = net.ReadUInt(32)
		faction:SetMoney(money)

		local length = net.ReadUInt(16)

		VoidFactions.PrintDebug("Updating deposit items data! Length: " .. length)

		faction.deposits = {}
		faction.transactions = {}

		for i = 1, length do
			local item = VoidFactions.DepositItem:ReadItem(faction)
			faction.deposits[item.id] = item
		end

		local lengthTransaction = net.ReadUInt(16)

		for i = 1, lengthTransaction do
			VoidFactions.Transactions:ReadTransaction(faction)
		end

	end

	-- Update ranks
	if (type == VoidFactions.Faction.Enums.RANKS_UPDATE) then
		local length = net.ReadUInt(16)

		VoidFactions.PrintDebug("Updating rank data! Length: " .. length)

		-- Empty the table so deleted ranks won't show up
		faction.ranks = {}


		for i = 1, length do
			-- Reading the rank with the faction parameter automatically updates the rank
			local rank = VoidFactions.Rank:ReadRank(faction)
			faction.ranks[rank.id] = rank
		end
	end

	if (type == VoidFactions.Faction.Enums.MEMBERS_UPDATE) then
		local length = net.ReadUInt(16)

		VoidFactions.PrintDebug("Updating member data! Length: " .. length)

		-- Empty the table so removed members won't show up
		faction.members = {}

		for i = 1, length do
			-- Reading the member with the faction parameter automatically updates the rank
			local member = VoidFactions.Member:ReadMember(false, faction)
			faction.members[#faction.members + 1] = member
		end

		local menuPanel = VoidFactions.Menu.Panel
		if (IsValid(menuPanel) and menuPanel.sidebar.selectedPanel:GetName() == "VoidFactions.UI.SettingsPanel") then
			local settings = menuPanel.sidebar.selectedPanel
			local editFrame = settings.factions.panel.factionInfo.rankEditFrame

			if (IsValid(editFrame)) then

				-- For some reason, the reference to the rank differs in the panel. We need to replace it so it has the updated faction members
				local newRankRef = nil
				local editFrameRef = editFrame.editedRank
				if (!editFrameRef) then return end
				if (editFrameRef.faction.id != faction.id) then return end
				for k, v in pairs(faction.ranks) do
					if (v.id == editFrameRef.id) then
						newRankRef = v
					end
				end
				editFrame.editedRank = newRankRef
				
				-- This updates all the members
				editFrame.searchInput.entry:SetValue("")
			end
		end

	end

	hook.Run("VoidFactions.Faction.DataUpdated", faction)
end)

net.Receive("VoidFactions.Faction.SendFactionMemberChunk", function ()
	local factionId = net.ReadUInt(20)
	local intSize = net.ReadUInt(16)
	local skip = net.ReadUInt(32)

	local faction = VoidFactions.LoadedFactions[factionId]
	if (!faction) then
		VoidFactions.PrintError("Received member chunks for faction id " .. factionId .. ", but faction doesn't exist on client!")
		return
	end

	local memberCount = net.ReadUInt(16)
	local members = {}
	for i = 1, memberCount do
		local member = VoidFactions.Member:ReadMember(false, faction)
		members[i + skip] = member
	end

	--PrintTable(members)
	faction:SetMembers(members)
end)

-- This actually sends the members too.
net.Receive("VoidFactions.Faction.SendFactionRanks", function ()
	local factionId = net.ReadUInt(20)
	local rankAmount = net.ReadUInt(5)

	local faction = VoidFactions.LoadedFactions[factionId]
	if (!faction) then
		VoidFactions.PrintError("Received ranks for faction id " .. factionId .. ", but faction doesn't exist on client!")
		return
	end

	VoidFactions.PrintDebug("Received " .. rankAmount .. " ranks from faction " .. faction.name)

	local ranks = {}
	for i = 1, rankAmount do
		local rank = VoidFactions.Rank:ReadRank(faction)
		ranks[rank.id] = rank
	end
	faction:SetRanks(ranks)

	local memberCount = net.ReadUInt(16)
	local members = {}
	for i = 1, memberCount do
		local member = VoidFactions.Member:ReadMember(false, faction)
		members[i] = member
	end
	faction:SetMembers(members)

	local menuPanel = VoidFactions.Menu.Panel
	if (IsValid(menuPanel) and menuPanel.sidebar.selectedPanel:GetName() == "VoidFactions.UI.SettingsPanel") then
		VoidFactions.PrintDebug("Refreshing settings faction ranks")
		local settings = menuPanel.sidebar.selectedPanel
		if (settings.factions.panel.factionInfo.selectedFaction.id == faction.id) then
			settings.factions.panel.factionInfo:SetRanks(faction)
		end
	end

	hook.Run("VoidFactions.Faction.RanksMembersReceived", faction, membersAvail)
	hook.Run("VoidFactions.Faction.DataUpdated", faction)

end)

net.Receive("VoidFactions.Faction.NetworkFactions", function ()
	local factionCount = net.ReadUInt(20)

	local factions = {}
	for i = 1, factionCount do
		local faction = VoidFactions.Faction:ReadFaction()
		factions[faction.id] = faction
		VoidFactions.PrintDebug("Loaded faction name " .. faction.name .. "!")
	end

	if (VoidFactions.Settings:IsStaticFactions()) then
		-- Now we have loaded the factions, let's build the subfactions
		for id, faction in pairs(factions) do
			if (faction.parentFactionId) then
				local parentFaction = factions[faction.parentFactionId]
				VoidFactions.PrintDebug("Assigning parent faction " .. parentFaction.name .. " to " .. faction.name)
				faction.parentFaction = parentFaction
			end
		end
	end

	VoidFactions.PrintDebug("Loaded " .. table.Count(factions) .. " factions!")

	VoidFactions.LoadedFactions = factions

	-- If the menu is open, refresh the factions for the admin
	local menuPanel = VoidFactions.Menu.Panel
	if (IsValid(menuPanel) and menuPanel.sidebar.selectedPanel:GetName() == "VoidFactions.UI.SettingsPanel") then
		if (VoidFactions.Settings:IsStaticFactions()) then
			VoidFactions.PrintDebug("Refreshing settings factions")
			local settings = menuPanel.sidebar.selectedPanel
			settings.factions.panel.factionSelection:SetFactions(factions)
		end
	end

	hook.Run("VoidFactions.Faction.StaticFactionsLoaded")
end)
--addons/voidfactions-1.10.6/lua/voidfactions/net/rewards/cl_rewards.lua:
VoidFactions.Rewards = VoidFactions.Rewards or {}

function VoidFactions.Rewards:RequestRewards()
	net.Start("VoidFactions.Rewards.RequestRewards")
	net.SendToServer()
end

function VoidFactions.Rewards:CreateReward(nameVal, moduleVal, valueVal, moneyVal, xpVal, iconVal)
	net.Start("VoidFactions.Rewards.CreateReward")
		net.WriteString(nameVal)
		net.WriteString(moduleVal.name)
		net.WriteInt(valueVal, 32)
		net.WriteUInt(moneyVal, 32)
		net.WriteUInt(xpVal, 32)
		net.WriteString(iconVal)
	net.SendToServer()
end

function VoidFactions.Rewards:UpdateReward(reward, nameVal, moduleVal, valueVal, moneyVal, xpVal, iconVal)
	net.Start("VoidFactions.Rewards.UpdateReward")
		net.WriteUInt(reward.id, 10)
		net.WriteString(nameVal)
		net.WriteString(moduleVal.name)
		net.WriteInt(valueVal, 32)
		net.WriteUInt(moneyVal, 32)
		net.WriteUInt(xpVal, 32)
		net.WriteString(iconVal)
	net.SendToServer()
end

function VoidFactions.Rewards:DeleteReward(reward)
	net.Start("VoidFactions.Rewards.DeleteReward")
		net.WriteUInt(reward.id, 10)
	net.SendToServer()
end

-- Net handlers

net.Receive("VoidFactions.Rewards.SendRewards", function (len, ply)
	local length = net.ReadUInt(10)

	local rewards = {}
	for i = 1, length do
		local reward = VoidFactions.Rewards:ReadReward()
		rewards[i] = reward
	end

	VoidFactions.Rewards.List = rewards

	hook.Run("VoidFactions.Rewards.RewardsReceived")
end)
--addons/voidfactions-1.10.6/lua/voidfactions/net/upgrades/cl_upgrades.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/faction_list_select.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/faction_settingsinfo.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/admin/upgrades_manage.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/dynamic/faction_panel.lua:
return gluapack()()
--addons/voidfactions-1.10.6/lua/voidfactions/vgui/static/board_main.lua:
return gluapack()()
--lua/wos/dynabase/registers/wos_legacy_registers.lua:
//  These are a bunch of legacy functions to register addons that don't have integrated support for animation management
// This is not how  you should be doing your registers. See other addons

local function GenericRegister( data )
    wOS.DynaBase:RegisterSource({
        Name = data.Name,
        Type =  ( data.Extension and WOS_DYNABASE.EXTENSION ) or WOS_DYNABASE.REANIMATION,
        Male = ( data.Male and "models/xdreanims/m_anm_slot_" .. data.BaseSlot .. ".mdl" ) or nil,
        Female = ( data.Female and "models/xdreanims/f_anm_slot_" .. data.BaseSlot .. ".mdl" ) or nil,
        Zombie = ( data.Zombie and "models/xdreanims/z_anm_slot_" .. data.BaseSlot .. ".mdl" ) or nil,
    })

    hook.Add( "PreLoadAnimations", "wOS.DynaBase.Mount" .. data.Name, function( gender )
        if gender == WOS_DYNABASE.MALE and data.Male then
            IncludeModel( "models/xdreanims/m_anm_slot_" .. data.BaseSlot .. ".mdl" )
        elseif gender == WOS_DYNABASE.FEMALE and data.Female then
            IncludeModel( "models/xdreanims/f_anm_slot_" .. data.BaseSlot .. ".mdl" )
        elseif gender == WOS_DYNABASE.ZOMBIE and data.Zombie then
            IncludeModel( "models/xdreanims/z_anm_slot_" .. data.BaseSlot .. ".mdl" )  
        end
    end )
end

local tbl = {
    ['2261825706'] = {
        Name = "CSGO Reanimations",
        BaseSlot = '046',
        Male = true,
        Female = true,
        Zombie = true,
    },
    ['2143589929'] = {
        Name = "Two-Hand Pistol Reanimations",
        BaseSlot = '002',
        Male = true,
        Female = true,
        Zombie = true,
    },
    ['2493356270'] = {
        Name = "Ironight Reanimations",
        BaseSlot = '011',
        Male = true,
        Female = true,
        Zombie = true,
    },
    ['2737372889'] = {
        Name = "COD Zombie Reanimations",
        BaseSlot = '035',
        Male = true,
        Female = true,
        Zombie = true,
    },
    ['2432553338'] = {
        Name = "Combine Passive Reanimations",
        BaseSlot = '018',
        Male = true,
        Female = true,
        Zombie = true,
    },
    ['2424958167'] = {
        Name = "Drip Idle Reanimations",
        BaseSlot = '019',
        Male = true,
        Female = true,
        Zombie = true,
    },
    ['2348399590'] = {
        Name = "Cut Fist Reanimations",
        BaseSlot = '016',
        Male = true,
        Female = true,
        Zombie = true,
    },
    ['2169293226'] = {
        Name = "Radio Chatter Reanimations",
        BaseSlot = '038',
        Male = true,
        Female = true,
        Zombie = true,
    },   
    ['2148772437'] = {
        Name = "Reduced Breath Reanimations",
        BaseSlot = '029',
        Male = true,
        Female = true,
        Zombie = true,
    },  
    ['2903472153'] = {
        Name = "Human Realm Reanimations",
        BaseSlot = '039',
        Male = true,
        Female = true,
        Zombie = true,
    },  
    ['2918092137'] = {
        Name = "COD Modern Warfare Reanimations",
        BaseSlot = '046',
        Male = true,
        Female = false,
        Zombie = false,
    }, 
    ['2791673215'] = {
        Name = "CODIW Idle Reanimations",
        BaseSlot = '030',
        Male = true,
        Female = true,
        Zombie = true,
    }, 
    ['2792431263'] = {
        Name = "CODIW Last Stand Extension",
        BaseSlot = '040',
        Extension = true,
        Male = true,
        Female = true,
        Zombie = true,
    }, 
    ['2912631064'] = {
        Name = "Feminine Sitting Reanimations",
        BaseSlot = '015',
        Male = false,
        Female = true,
        Zombie = false,
    },  
    ['2742793067'] = {
        Name = "TF2 Laughing Reanimations",
        BaseSlot = '031',
        Male = true,
        Female = true,
        Zombie = false,
    },  
    ['2891284985'] = {
        Name = "SadCat Dance Reanimations",
        BaseSlot = '027',
        Male = true,
        Female = true,
        Zombie = false,
    },  
    ['2895861489'] = {
        Name = "Zero Two Dance Reanimations",
        BaseSlot = '013',
        Male = true,
        Female = true,
        Zombie = false,
    },  
    ['2892723717'] = {
        Name = "KDA Dance Reanimations",
        BaseSlot = '026',
        Male = true,
        Female = true,
        Zombie = false,
    },  
}

// Workshop addon  check  first because that's the most reliable
local op_table = table.Copy( tbl )
for _, addon in ipairs( engine.GetAddons() ) do
    if not addon.mounted then continue  end
    if addon.wsid == "2247494212" then //have to hardcode this cause Yongli needs to do an update..
        wOS.DynaBase:RegisterSource({
            Name = "Sword Art Extension",
            Type =  WOS_DYNABASE.EXTENSION,
            Shared = "models/player/wiltos/anim_extension_mod18.mdl",
        })

        hook.Add( "PreLoadAnimations", "wOS.DynaBase.MountSwordArt", function( gender )
            if gender != WOS_DYNABASE.SHARED then return end
            IncludeModel( "models/player/wiltos/anim_extension_mod18.mdl" )
        end )
    end
    if not op_table[addon.wsid] then continue end
    GenericRegister( op_table[addon.wsid] )
    op_table[addon.wsid] = nil
end

// Now for the longer version we have to do for servers.
for _, data in pairs( op_table ) do
    local base_path = "models/xdreanims/f_anm_slot_" .. data.BaseSlot .. ".mdl" //They happen to all have female so we'll use that
    if !file.Exists(base_path, "GAME") then continue end
    GenericRegister( data )
end

if CLIENT then
    hook.Add( "wOS.DynaBase.PopulateHelperFunctions", "wOS.DynaBase.LEgacyAddHelper", function( parent ) 
        local download_butt = vgui.Create( "DButton", parent )
        download_butt:SetSize( parent:GetWide(), parent:GetTall()*0.0625 )
        download_butt:Dock( TOP )
        download_butt:SetText( "Create User Mounts from Legacy Addon (Will overwrite mounts with the same name!)" )
        download_butt.DoClick = function(pan) 
            for wsid, data in pairs( tbl ) do
                local ndata = {
                    Name = data.Name,
                    Male = ( data.Male and "models/xdreanims/m_anm_slot_" .. data.BaseSlot .. ".mdl" ) or nil,
                    Female = ( data.Female and "models/xdreanims/f_anm_slot_" .. data.BaseSlot .. ".mdl" ) or nil,
                    Zombie = ( data.Zombie and "models/xdreanims/z_anm_slot_" .. data.BaseSlot .. ".mdl" ) or nil,
                }
                wOS.DynaBase:CreateUserMount( ndata )
            end
            chat.AddText( color_white, "[", Color( 0, 175, 255 ), "wOS-DynaBase", color_white, "] All legacy mounts regardless of subscription status have been added!" )
            parent:ReloadAddons()
        end
    end )
end
--addons/xenin_framework/lua/xeninui/libs/essentials_sh.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/permissions.lua:
local Permissions
do
  local _class_0
  local _base_0 = {
    __name = "Permissions",
    canAccessFramework = function(self, ply)
      local dev = self:isXeninDeveloper(ply)
      if (dev and tonumber(GetConVar("xenin_easy_permissions")) == 1) then
        return true
      end

      return self:isSuperAdmin(ply)
    end,
    isAdmin = function(self, ply, level)
      if level == nil then level = 1
      end
      return ply:IsAdmin()
    end,
    isSuperAdmin = function(self, ply)
      return ply:IsSuperAdmin()
    end,
    isXeninDeveloper = function(self, ply)
      return self.xeninDevelopers[ply:SteamID64()]
    end,
    __type = function(self)
      return "XeninUI.Permissions"end
  }
  _base_0.__index = _base_0
  _class_0 = setmetatable({
    __init = function(self)
      self.xeninDevelopers = {
        ["76561198202328247"] = "sleeppyy",
        ["76561198058042338"] = "Hoofy"
      }
    end,
    __base = _base_0
  }, {
    __index = _base_0,
    __call = function(cls, ...)
      local _self_0 = setmetatable({}, _base_0)
      cls.__init(_self_0, ...)
      return _self_0
    end
  })
  Permissions = _class_0
end

XeninUI.Permissions = Permissions()

CreateConVar("xenin_easy_permissions", 1)

--addons/xenin_framework/lua/xeninui/libs/time.lua:
function XeninUI:GetUTCTime()

	return os.time()
end

function XeninUI:SecondsToTimeString(s, _format, as_tbl)
	local d = (s / 86400)
	local h = math.floor(math.fmod(s, 86400) / 3600)
	local m = math.floor(math.fmod(s, 3600) / 60)
	local s = math.floor(math.fmod(s, 60))

	if as_tbl then
		return {
			d = d,
			h = h,
			m = m,
			s = s
		}
	end

	return string.format(_format or "%d:%02d:%02d:%02d", d, h, m, s)
end

function XeninUI:SecondsToSmallTime(s, _format, as_tbl)
	local m = math.floor(math.fmod(s, 3600) / 60)
	local s = math.floor(math.fmod(s, 60))

	if as_tbl then
		return {
			d = d,
			h = h,
			m = m,
			s = s
		}
	end

	return string.format(_format or "%02d:%02d", m, s)
end

--addons/xenin_framework/lua/xeninui/libs/network/core.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/scripts/main.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/classes/cache.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/classes/entities.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/popup.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/libs/configurator/ui/inputs/selectbox.lua:
local x

--addons/xenin_framework/lua/xeninui/libs/players/network/shared.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/animated_texture.lua:
return gluapack()()
--addons/xenin_framework/lua/xeninui/elements/animated_texture.lua:
local PANEL = {}

AccessorFunc(PANEL, "m_paused", "Paused")

function PANEL:Init()
    self.images = {}
    self.slots = {}
    self:SetPaused(false)
end

function PANEL:SetDirectory(dir)
    local files = file.Find("materials/" .. dir .. "/*", "GAME") or {}
    for k, v in pairs(files) do
        files[k] = tonumber(string.StripExtension(v))
    end

    table.sort(files, function(a, b)
        return a < b end)

    local new = {}
    for k, v in pairs(files) do
        new[k] = Material(dir .. "/" .. v .. ".png", "smooth")
    end

    self.dir = dir
    self.images = new
end

function PANEL:SetImages(tbl)
    self.images = tbl
end

function PANEL:SetTimes(normal, idle)
    self.times = {
        normal = normal or .02,
        idle = idle or 1
    }
end

function PANEL:PostInit()
    self.start_slot = 1
    self.end_slot = #self.images

    self.slots = {
        min = 1,
        max = #self.images
    }

    self.cur_image = self.slots.min
    self.next_change = UnPredictedCurTime() + self.times.normal

    self.can_draw = true
end

function PANEL:Paint(w, h)
    if !self.can_draw then return end

    if !self.images[self.cur_image] then return end

    surface.SetMaterial(self.images[self.cur_image])
    surface.SetDrawColor(255, 255, 255)
    surface.DrawTexturedRect(0, 0, w, h)

    if self.next_change < UnPredictedCurTime() and !self:GetPaused() then
        self.cur_image = self.cur_image < self.slots.max and self.cur_image + 1 or self.slots.min
        self.next_change = UnPredictedCurTime() + (self.cur_image < self.slots.max and self.times.normal or self.times.idle)
    end
end

vgui.Register("XeninUI.AnimatedTexture", PANEL, "Panel")

--addons/xenin_framework/lua/xeninui/elements/panel.lua:
local PANEL = {}

function PANEL:Init()
  self.notifications = {}
end

function PANEL:Notification(title, backgroundCol, textCol)
  local pnl = self:Add("DPanel")
  pnl:SetAlpha(0)
  pnl:AlphaTo(255, 0.1)
  pnl:SetZPos(2)
  pnl.uniqueID = SysTime()
  pnl.Paint = function(pnl, w, h)
    local x, y = pnl:LocalToScreen(0, 0)

    BSHADOWS.BeginShadow()
    draw.RoundedBox(6, x, y, w, h, backgroundCol or XeninUI.Theme.Primary)
    draw.SimpleText(title, "XeninUI.Notification", x + 8, y + 8, textCol or XeninUI:GetContrastColor(backgroundCol, color_white, color_black))
    BSHADOWS.EndShadow(1, 2, 2, 200, 0, 0)
  end

  surface.SetFont("XeninUI.Notification")
  local tw, th = surface.GetTextSize(title)
  pnl:SetSize(tw + 16, th + 16)

  local offset = 16
  for i, v in pairs(self.notifications) do
    offset = offset + v:GetTall() + 8
  end

  pnl:SetPos(self:GetWide() - 16 - pnl:GetWide(), offset)

  table.insert(self.notifications, pnl)

  timer.Simple(3, function()
    if (!IsValid(pnl)) then return end

    pnl:AlphaTo(0, 0.2)

    timer.Simple(0.2, function()
      if (!IsValid(pnl)) then return end

      for i, v in pairs(self.notifications) do
        if (v.uniqueID != pnl.uniqueID) then continue end

        table.remove(self.notifications, i)

        pnl:Remove()
      end
    end)
  end)
end

vgui.Register("XeninUI.Panel", PANEL)

--addons/xenin_framework/lua/xeninui/elements/sidebar_animated.lua:
local PANEL = {}

XeninUI:CreateFont("XeninUI.Sidebar.Name", 22)

AccessorFunc(PANEL, "m_body", "Body")

function PANEL:Init()
	self:SetZPos(20)

	self.Width = 88
	self._Alpha = 0

	self.Buttons = {}
	self.Panels = {}
end

function PANEL:AddTab(name, icon, panelClass)
	local button = self:Add("DButton")
	button:SetText("")
	button.Color = color_white
	button.Desc = name
	button.Paint = function(pnl, w, h)
		surface.SetDrawColor(pnl.Color)
		surface.SetMaterial(icon)
		surface.DrawTexturedRect(27, 17, 30, 30)

		draw.SimpleText(pnl.Desc, "XeninUI.Sidebar.Name", 27 + 30 + 16, h / 2, ColorAlpha(pnl.Color, self._Alpha), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)
	end
	button.OnCursorEntered = function(pnl)
		self:OnCursorEntered()

		pnl:LerpColor("Color", XeninUI.Theme.Accent)
	end
	button.OnCursorExited = function(pnl)
		self:OnCursorExited()

		if (pnl.Id == self.Active) then return end

		pnl:LerpColor("Color", color_white)
	end
	button.DoClick = function(pnl)
		self:SetActive(pnl.Id)
	end

	local id = table.insert(self.Buttons, button)
	button.Id = id

	local pnl = self:GetBody():Add(panelClass or "DPanel")
	pnl:Dock(FILL)
	pnl:SetVisible(false)

	table.insert(self.Panels, pnl)
end

function PANEL:PerformLayout(w, h)
	local y = 0

	for i, v in pairs(self.Buttons) do
		v:SetSize(w, 68)
		v:SetPos(0, y)

		y = y + v:GetTall()
	end
end

function PANEL:Paint(w, h)
	draw.RoundedBoxEx(6, 0, 0, w, h, XeninUI.Theme.Navbar, false, false, true, false)
end

function PANEL:Think()
	if self._InvalidateParent then
		self:InvalidateParent()
	end
end

function PANEL:SetActive(id)
	if (self.Active == id) then return end

	if self.Active then
		local btn = self.Buttons[self.Active]
		local pnl = self.Panels[self.Active]
		if IsValid(btn) then
			btn:LerpColor("Color", color_white)
		end
		if IsValid(pnl) then
			pnl.DrawAlpha = pnl.DrawAlpha or 0
			pnl.PaintOver = function(pnl, w, h)
				draw.RoundedBoxEx(6, 0, 0, w, h, ColorAlpha(XeninUI.Theme.Background, pnl.DrawAlpha), false, false, true, true)
			end
			pnl:Lerp("DrawAlpha", 255, 0.15, function()
				pnl.PaintOver = nil
				pnl:SetVisible(false)
			end)
		end

		self.Active = id

		if self.OnActiveChanged then
			self:OnActiveChanged(id)
		end

		local btn = self.Buttons[id]
		local pnl = self.Panels[id]

		timer.Simple(0.15, function()
			if (!IsValid(self)) then return end

			btn:LerpColor("Color", XeninUI.Theme.Accent)
			pnl.DrawAlpha = pnl.DrawAlpha or 255
			pnl:SetVisible(true)
			if pnl.OnSwitchedTo then
				pnl:OnSwitchedTo(btn.Desc)
			end
			pnl.PaintOver = function(pnl, w, h)
				draw.RoundedBoxEx(6, 0, 0, w, h, ColorAlpha(XeninUI.Theme.Background, pnl.DrawAlpha), false, false, true, true)
			end
			pnl:Lerp("DrawAlpha", 0, 0.15, function()
				pnl.PaintOver = nil
			end)
		end)
	else

		self.Active = id

		local btn = self.Buttons[id]
		local pnl = self.Panels[id]

		btn.Color = XeninUI.Theme.Accent
		pnl:SetVisible(true)
		if pnl.OnSwitchedTo then
			pnl:OnSwitchedTo(btn.Desc)
		end
	end
end

function PANEL:OnCursorEntered()
	self._InvalidateParent = true

	local width = 0
	surface.SetFont("XeninUI.Sidebar.Name")
	for i, v in pairs(self.Buttons) do
		local tw = surface.GetTextSize(v.Desc)
		tw = tw + 88

		if (tw > width) then
			width = tw
		end
	end
	self:Lerp("Width", width, nil, function()
		self._InvalidateParent = nil
	end)
	self:Lerp("_Alpha", 255)
end

function PANEL:OnCursorExited()
	self._InvalidateParent = true

	self:Lerp("Width", 88, nil, function()
		self._InvalidateParent = nil
	end)
	self:Lerp("_Alpha", 0)
end

vgui.Register("XeninUI.Sidebar.Animated", PANEL)

--addons/xenin_framework/lua/xeninui/elements/sidebar_v2.lua:
local PANEL = {}
AccessorFunc(PANEL, "m_body", "Body")

XeninUI:CreateFont("XeninUI.SidebarV2.Name", 20)
XeninUI:CreateFont("XeninUI.SidebarV2.Desc", 16)
XeninUI:CreateFont("XeninUI.SidebarV2.DescSmall", 14)

function PANEL:Init()
  self.Scroll = self:Add("XeninUI.ScrollPanel")
  self.Scroll:Dock(FILL)
  self.Scroll.VBar:SetWide(0)

  self.Sidebar = {}
  self.Panels = {}
end

function PANEL:CreateDivider(startCol, endCol)
  startCol = startCol or Color(164, 43, 115)
  endCol = endCol or Color(198, 66, 110)

  local divider = self.Scroll:Add("DPanel")
  divider:Dock(TOP)
  divider:SetTall(10)
  divider.Paint = function(pnl, w, h)
    local aX, aY = pnl:LocalToScreen()

    draw.SimpleLinearGradient(aX + 4, aY + 4, w - 8, h - 8, startCol, endCol, true)
  end
end

function PANEL:CreatePanel(name, desc, panelClass, icon, tbl)
  tbl = tbl or {}
  tbl.colors = tbl.colors or {}
  local startCol = tbl.colors[1] or Color(158, 53, 210)
  local endCol = tbl.colors[2] or Color(109, 77, 213)

  local btn = self.Scroll:Add("DButton")
  btn:Dock(TOP)
  btn.Name = name
  btn.Desc = desc or ""
  btn.Icon = icon
  btn.Tbl = tbl
  btn.PanelClass = panelClass
  btn:SetTall(tbl.Height or 64)
  btn:SetText("")
  btn.GradientAlpha = 0
  btn.SmallFont = btn.Desc:len() > 20
  btn.DescFont = !btn.SmallFont and "XeninUI.SidebarV2.Desc" or "XeninUI.SidebarV2.DescSmall"
  XeninUI:DownloadIcon(btn, icon)
  btn.Paint = function(pnl, w, h)
    XeninUI:Mask(function()
      XeninUI:DrawRoundedBox(0, 0, 0, w, h, color_white)
    end, function()
      local aX, aY = pnl:LocalToScreen()
      draw.SimpleLinearGradient(aX, aY, w, h, ColorAlpha(startCol, pnl.GradientAlpha), ColorAlpha(endCol, pnl.GradientAlpha), true)
    end)

    local x = icon and h or 12
    XeninUI:DrawIcon(16, 16, h - 32, h - 32, pnl)

    XeninUI:DrawShadowText(name, "XeninUI.SidebarV2.Name", x, h / 2 + (pnl.SmallFont and 1 or 0), color_white, TEXT_ALIGN_LEFT, desc and TEXT_ALIGN_BOTTOM or TEXT_ALIGN_CENTER, 1, 125)
    if desc then
      XeninUI:DrawShadowText(desc, pnl.DescFont, x, h / 2 + (pnl.SmallFont and 1 or 0), Color(171, 171, 171), TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP, 1, 125)
    end
  end
  btn.OnCursorEntered = function(pnl)
    if (self.Active == btn.Id) then return end

    pnl:Lerp("GradientAlpha", 127.5)
  end
  btn.OnCursorExited = function(pnl)
    if (self.Active == btn.Id) then return end

    pnl:Lerp("GradientAlpha", 0)
  end
  btn.DoClick = function(pnl)
    self:SetActive(pnl.Id)
  end

  if (!IsValid(self:GetBody())) then
    Error("Failed to find body for panel " .. tostring(panelClass))
  end
  local body = self:GetBody():Add(panelClass or "DPanel")
  if (!IsValid(body)) then
    Error("Failed to create panel for " .. tostring(panelClass))
  end
  body:Dock(FILL)
  body.Data = tbl
  body:SetVisible(false)
  if body.SetData then
    body:SetData(tbl)
  end

  local bodyId = table.insert(self.Panels, body)
  self.Panels[bodyId].Id = bodyId

  local id = table.insert(self.Sidebar, btn)
  self.Sidebar[id].Id = id
end

function PANEL:SetActive(id)
  local active = self.Active
  self.Active = id

  if IsValid(self.Sidebar[active]) then
    self.Sidebar[active]:OnCursorExited()

    if IsValid(self.Panels[active]) then
      self.Panels[active]:SetVisible(false)
    end
  end

  if IsValid(self.Sidebar[id]) then
    self.Sidebar[id]:Lerp("GradientAlpha", 255)

    if IsValid(self.Panels[id]) then
      if (self.Panels[id].Data.recreateOnSwitch and id != active) then
        local tempData = self.Panels[id].Data
        local tempId = self.Panels[id].Id
        self.Panels[id]:Remove()

        self.Panels[id] = self:GetBody():Add(self.Sidebar[id].PanelClass or "DPanel")
        self.Panels[id]:Dock(FILL)
        self.Panels[id].Data = tempData
        self.Panels[id].Id = tempId
      else
        self.Panels[id]:SetVisible(true)
      end

      if self.Panels[id].OnSwitchedTo then
        self.Panels[id]:OnSwitchedTo(self.Panels[id].Data)
      end
    end
  end
end

function PANEL:SetActiveByName(name)
  for i, v in ipairs(self.Sidebar) do
    if (v.Name == name) then
      self:SetActive(i)

      break
    end
  end
end

function PANEL:Paint(w, h)
  XeninUI:DrawRoundedBoxEx(6, 0, 0, w, h, XeninUI.Theme.Primary, false, false, true, false)
end

vgui.Register("XeninUI.SidebarV2", PANEL)

--addons/xenin-coinflip/lua/coinflip/ui/games_row.lua:
local PANEL = {}

AccessorFunc(PANEL, "m_id", "ID")

XeninUI:CreateFont("Coinflip.Games.Row.Name", 24)
XeninUI:CreateFont("Coinflip.Games.Row.Bet", 18)

function PANEL:Init()
	self.background = XeninUI.Theme.Navbar

	self.Avatar = self:Add("XeninUI.Avatar")
	self.Avatar:SetVertices(90)

	self.Join = self:Add("DButton")
	self.Join:SetText(Coinflip.i18n:get("ui.flips.row.join", nil, "Join"))
	self.Join:SetFont("Coinflip.Games.Button")
	self.Join:SizeToContentsY(18)
	self.Join:SizeToContentsX(48)
	self.Join.background = XeninUI.Theme.Background
	self.Join.textcolor = Color(220, 220, 220)
	self.Join.Paint = function(pnl, w, h)
		pnl:SetTextColor(pnl.textcolor)

		draw.RoundedBox(h / 2, 0, 0, w, h, pnl.background)

		if (pnl.drawLoading) then
			local x = w / 2
			local y = h / 2
			local size = h / 2

			XeninUI:DrawLoadingCircle(x, y, size, color_white)
		end
	end
	self.Join.OnCursorEntered = function(pnl)
		local tbl = Coinflip.Games[self:GetID()]
		if (!tbl) then return end
		local curr = Coinflip:GetCurrency(tbl.currency)
		local col = curr:CanAfford(LocalPlayer(), tbl.bet) and XeninUI.Theme.Green or XeninUI.Theme.Red

		pnl:LerpColor("background", col)
		pnl:LerpColor("textcolor", XeninUI.Theme.Background)
	end
	self.Join.OnCursorExited = function(pnl)
		pnl:LerpColor("background", XeninUI.Theme.Background)
		pnl:LerpColor("textcolor", Color(220, 220, 220))
	end
	self.Join.DoClick = function(pnl)
		if (pnl.drawLoading) then return end

		local tbl = Coinflip.Games[self:GetID()]
		if (!tbl) then return end
		local curr = Coinflip:GetCurrency(tbl.currency)
		local canAfford = curr:CanAfford(LocalPlayer(), tbl.bet)
		if (!canAfford) then
			XeninUI:Notify(Coinflip.i18n:get("ui.flips.row.cantAfford", {
				number = Coinflip:GetCurrency(tbl.currency):Format(tbl.bet)
			}, "You can't afford to enter this coinflip! You need :number:"), 
			NOTIFY_ERROR, 5, XeninUI.Theme.Red)

			return
		end

		net.Start("Coinflip.Join")
			net.WriteUInt(self:GetID(), 24)
		net.SendToServer()

		pnl:SetText("")
		pnl.drawLoading = true
	end

	self.Name = self:Add("DLabel")
	self.Name:SetFont("Coinflip.Games.Row.Name")
	self.Name:SetTextColor(Color(220, 220, 220))

	self.Bet = self:Add("DLabel")
	self.Bet:SetFont("Coinflip.Games.Row.Bet")
	self.Bet:SetTextColor(Color(175, 175, 175))
end

function PANEL:SetInfo(tbl)
	self.Avatar:SetPlayer(tbl.author, 128)
	self.Name:SetText(tbl.author:Nick())
	self.Name:SizeToContents()
	local curr = Coinflip:GetCurrency(tbl.currency)
	self.Bet:SetText(curr:Format(tbl.bet))
	self.Bet:SizeToContents()

	if (tbl.author == LocalPlayer()) then
		self.Join:SetText(Coinflip.i18n:get("ui.flips.row.delete", nil, "Delete"))
		self.Join:SizeToContentsX(48)
		self.Join.OnCursorEntered = function(pnl)
			pnl:LerpColor("background", XeninUI.Theme.Red)
			pnl:LerpColor("textcolor", XeninUI.Theme.Background)
		end
		self.Join.OnCursorExited = function(pnl)
			pnl:LerpColor("background", XeninUI.Theme.Background)
			pnl:LerpColor("textcolor", Color(220, 220, 220))
		end
		self.Join.DoClick = function(pnl)
			net.Start("Coinflip.Delete")
				net.WriteUInt(self:GetID(), 24)
			net.SendToServer()
			
			Coinflip.Games[self:GetID()] = nil
			hook.Run("Coinflip.Removed", self:GetID())
		end
	end
end

function PANEL:Paint(w, h)
	draw.RoundedBox(6, 0, 0, w, h, self.background)
end

function PANEL:PerformLayout(w, h)
	self.Join.y = h / 2 - self.Join:GetTall() / 2
	self.Join:AlignRight(self.Join.y)

	self.Avatar:SetPos(8, 8)
	self.Avatar:SetSize(h - 16, h - 16)

	self.Name:SetPos(self.Avatar.x + self.Avatar:GetWide() + 12,
		self.Avatar.y + 2)
	self.Bet:SetPos(self.Name.x,
		self.Name.y + self.Name:GetTall() - 1)
end

vgui.Register("Coinflip.Games.Row", PANEL)
--addons/xenin-coinflip/lua/coinflip/ui/stats.lua:
local PANEL = {}

function PANEL:Init()

end



vgui.Register("Coinflip.Stats", PANEL, "XeninUI.Panel")
--addons/xenin-inventory/lua/inventory/entities/blacklist.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/essentials/console_commands.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

concommand.Add("inventory_equip", function(ply, cmd, args)
  local ent = args[1]
  local inv = ply:XeninInventory()
  local tbl = inv:GetInventory()

  for i, v in pairs(tbl) do
    if (v.ent != ent) then continue end
    local item = XeninInventory:GetItem(v.dropEnt)
    if (!item) then return end
    local canEquip, reason = item:CanEquip(ply, v.ent)

    if (!canEquip) then
      ply:ChatPrint(reason)
    end

    if inv:ReduceAmount(i, 1) then
      item:Equip(ply, v.ent)

      net.Start("XeninInventory.Equip")
      net.WriteUInt(i, 10)
      net.SendToServer()
    end
  end
end)

concommand.Add("inventory_drop", function(ply, cmd, args)
  local ent = args[1]
  local inv = ply:XeninInventory()
  local tbl = inv:GetInventory()

  for i, v in pairs(tbl) do
    if (v.ent != ent) then continue end
    local item = XeninInventory:GetItem(v.dropEnt)
    if (!item) then return end

    if inv:ReduceAmount(i, 1) then
      local str = XeninInventory:GetPhrase("ConCommand.Drop", {
      item = item:GetName(v) })
      XeninUI:Notify(str, NOTIFY_GENERIC, 4, XeninUI.Theme.Green)
      chat:AddText(XeninInventory.Config.PrefixCol, XeninInventory.Config.PrefixText .. " ", color_white, str)

      net.Start("XeninInventory.Drop")
      net.WriteUInt(i, 10)
      net.SendToServer()
    end
  end
end)

--addons/xenin-inventory/lua/inventory/configuration/items/base_entity.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/configuration/items/bw_weapon.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/inventory/configuration/items/zgo2_baggy.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/inventory/configuration/items/zmlab_meth.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/inventory/configuration/items/zmlab_meth.lua:
local ITEM = XeninInventory:CreateItemV2()
ITEM:SetMaxStack(1)
ITEM:SetModel("models/zerochain/zmlab/zmlab_methbag.mdl")
ITEM:SetDescription("A bag of meth.")

ITEM:AddDrop(function(self, ply, ent, tbl, tr)
	local data = tbl.data

	ent:SetMethAmount(data.MethAmount)
	zmlab.f.SetOwner(ent, ply)
end)

function ITEM:GetData(ent)
	return {
		MethAmount = ent:GetMethAmount(),
	}
end

function ITEM:GetVisualAmount(item)
	return item.data.MethAmount
end

function ITEM:GetName(item)
	return "Meth bag"
end

function ITEM:GetCameraModifiers(tbl)
	return {
		FOV = 40,
		X = 0,
		Y = -30,
		Z = 25,
		Angles = Angle(0, 15, 0),
		Pos = Vector(0, 0, -1.5)
	}
end

ITEM:Register("zmlab_meth")

--addons/zeros_methlab_1.6.4/lua/inventory/configuration/items/zmlab_meth_baggy.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/configuration/items/zwf_muffin.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/configuration/items/zwf_seed.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/networking/inventory_client.lua:
return gluapack()()
--addons/xenin-inventory/lua/inventory/ui/inventory_field.lua:
--[[
This code was generated by LAUX, a Lua transpiler
LAUX is a fork of LAU with additional changes.

More info & source code can be found at: https://gitlab.com/sleeppyy/laux
]]

local PANEL = {}

XeninUI:CreateFont("XeninInventory.Field.Name", 15)
XeninUI:CreateFont("XeninInventory.Field.Name.Small", 12)
XeninUI:CreateFont("XeninInventory.Field.Name.Smallest", 9)
XeninUI:CreateFont("XeninInventory.Field.Amount", 15)

AccessorFunc(PANEL, "m_backgroundColor", "BackgroundColor")
AccessorFunc(PANEL, "m_nameColor", "NameColor")
AccessorFunc(PANEL, "m_nameTextColor", "NameTextColor")
AccessorFunc(PANEL, "m_name", "Name")
AccessorFunc(PANEL, "m_amount", "Amount")
AccessorFunc(PANEL, "m_id", "ID")
AccessorFunc(PANEL, "m_isBank", "IsBank")
AccessorFunc(PANEL, "m_isAdmin", "IsAdmin")

PANEL.Popup = {
  [XeninInventory:GetPhrase("XeninInventory.Popup.Equip")] = function(self, id, btn)
    local ply = LocalPlayer()
    local inv = ply:XeninInventory()
    local slot = inv:Get(id)
    if (!slot) then return end
    local item = XeninInventory:GetItem(slot.dropEnt)
    if (!item) then return end
    if (!item.Actions.Equip) then return end
    local canEquip, reason = item.Actions.Equip.Pre(item, ply, slot, self)

    if (!canEquip) then
      XeninUI:Notify(reason, NOTIFY_ERROR, 4, XeninUI.Theme.Red)
      chat:AddText(XeninUI.Theme.Red, XeninInventory.Config.PrefixText .. " ", color_white, reason)

      return
    end

    if inv:ReduceAmount(id, 1, nil, item.UseDataAmount) then
      item.Actions.Equip:Action(ply, slot.ent, slot, self)

      self:SetItem(inv:Get(id))

      net.Start("XeninInventory.Equip")
      net.WriteUInt(id, 10)
      net.SendToServer()
    end
  end,
  [XeninInventory:GetPhrase("XeninInventory.Popup.Drop")] = function(self, id, btn)
    local ply = LocalPlayer()
    local inv = ply:XeninInventory()
    local slot = inv:Get(id)
    if (!slot) then return end
    local item = XeninInventory:GetItem(slot.dropEnt)
    if (!item) then return end
    if (!item.Actions.Drop) then return end

    if inv:ReduceAmount(id, 1) then
      local str = XeninInventory:GetPhrase("ConCommand.Drop", {
      item = item.GetDisplayName and item:GetDisplayName(slot) or item:GetName(slot) })
      XeninUI:Notify(str, NOTIFY_GENERIC, 4, XeninUI.Theme.Green)
      chat:AddText(XeninInventory.Config.PrefixCol, XeninInventory.Config.PrefixText .. " ", color_white, str)

      self:SetItem(inv:Get(id))

      net.Start("XeninInventory.Drop")
      net.WriteUInt(id, 10)
      net.SendToServer()
    end
  end,
  [XeninInventory:GetPhrase("XeninInventory.Popup.Drop All")] = function(self, id, btn)
    local ply = LocalPlayer()
    local inv = ply:XeninInventory()
    local slot = inv:Get(id)
    if (!slot) then return end
    local item = XeninInventory:GetItem(slot.dropEnt)
    if (!item) then return end
    local amount = slot.amount

    if inv:ReduceAmount(id, amount) then
      local str = XeninInventory:GetPhrase("ConCommand.DropAll", {
        amount = amount,
        item = item.GetDisplayName and item:GetDisplayName(slot) or item:GetName(slot)
      })
      XeninUI:Notify(str, NOTIFY_GENERIC, 4, XeninUI.Theme.Green)
      chat:AddText(XeninInventory.Config.PrefixCol, XeninInventory.Config.PrefixText .. " ", color_white, str)

      self:SetItem(inv:Get(id))

      net.Start("XeninInventory.DropAll")
      net.WriteUInt(id, 10)
      net.SendToServer()
    end
  end,
  [XeninInventory:GetPhrase("XeninInventory.Popup.Destroy")] = function(self, id, btn)
    local ply = LocalPlayer()
    local inv = ply:XeninInventory()
    local slot = inv:Get(id)
    if (!slot) then return end
    local item = XeninInventory:GetItem(slot.dropEnt)
    if (!item) then return end
    local amount = slot.amount

    local popup = vgui.Create("XeninUI.Query")
    popup:SetSize(ScrW(), ScrH())
    popup:SetBackgroundWidth(400)
    popup:SetBackgroundHeight(140)
    popup:SetTitle(XeninInventory:GetPhrase("ConCommand.Destroy.Popup.Title", {
    item = item:GetName(slot) }))
    popup:SetText(XeninInventory:GetPhrase("ConCommand.Destroy.Popup.Desc", {
    item = item:GetName(slot) }))
    popup:SetAccept(XeninInventory:GetPhrase("ConCommand.Destroy.Popup.Yes"), function()
      inv:Set(id, nil)
      if IsValid(self) then
        self:SetItem(inv:Get(id))
      end

      local str = XeninInventory:GetPhrase("ConCommand.Destroy", {
        amount = amount,
        item = item:GetName(slot)
      })
      XeninUI:Notify(str, NOTIFY_ERROR, 4, XeninUI.Theme.Green)
      chat:AddText(XeninInventory.Config.PrefixCol, XeninInventory.Config.PrefixText .. " ", color_white, str)

      net.Start("XeninInventory.Destroy")
      net.WriteUInt(id, 10)
      net.SendToServer()
    end)
    popup:SetDecline(XeninInventory:GetPhrase("ConCommand.Destroy.Popup.No"), function() end)
    popup:MakePopup()
  end,
  [XeninInventory:GetPhrase("XeninInventory.Popup.Use")] = function(self, id, btn)
    local ply = LocalPlayer()
    local inv = ply:XeninInventory()
    local slot = inv:Get(id)
    if (!slot) then return end
    local item = XeninInventory:GetItem(slot.dropEnt)
    if (!item) then return end

    local canEquip, reason = item.Actions.Use.Pre(item, ply, slot, self)
    if (!canEquip) then
      XeninUI:Notify(reason, NOTIFY_ERROR, 4, XeninUI.Theme.Red)
      chat:AddText(XeninUI.Theme.Red, XeninInventory.Config.PrefixText .. " ", color_white, reason)

      return
    end

    if inv:ReduceAmount(id, 1) then
      item.Actions.Use:Action(item, ply, slot.ent, slot, self)
    end

    net.Start("XeninInventory.Use")
    net.WriteUInt(id, 10)
    net.SendToServer()

    self:SetItem(inv:Get(id))
  end,
  [XeninInventory:GetPhrase("XeninInventory.Popup.Drop Amount")] = function(self, id, btn)
    local ply = LocalPlayer()
    local inv = ply:XeninInventory()
    local slot = inv:Get(id)
    if (!slot) then return end
    local item = XeninInventory:GetItem(slot.dropEnt)
    if (!item) then return end
    local amount = slot.data.amount or slot.data.Amount or slot.amount

    local function err(msg)
      chat.AddText(XeninInventory.Config.PrefixCol or color_white, XeninInventory.Config.PrefixText .. " ", color_white, msg)
    end

    local popup = vgui.Create("XeninInventory.DropAmount")
    popup:SetSize(ScrW(), ScrH())
    popup:SetTitle(XeninInventory:GetPhrase("XeninInventory.Popup.Drop Amount"))
    popup.textentry.textentry:SetNumeric(true)
    popup.CheckFunction = function(pnl)
      local text = pnl.textentry:GetText()
      text = tonumber(text)
      if (!text) then err(XeninInventory:GetPhrase("XeninInventory.Popup.DropAmount.Error.Invalid"))return end
      if (text <= 0) then err(XeninInventory:GetPhrase("XeninInventory.Popup.DropAmount.Error.TooLow"))return end
      if (text > amount) then err(XeninInventory:GetPhrase("XeninInventory.Popup.DropAmount.Error.TooHigh"))return end

      return true
    end
    popup.PassedFunction = function(pnl)
      local text = pnl.textentry:GetText()
      text = tonumber(text)

      if (amount > slot.amount) then
        local newAmount = (slot.data.amount or slot.data.Amount) - text
        if (newAmount < 0) then return end

        slot.data.amount = slot.data.amount and newAmount
        slot.data.Amount = slot.data.Amount and newAmount

        net.Start("XeninInventory.DropAmount.Data")
        net.WriteUInt(id, 10)
        net.WriteUInt(text, 32)
        net.SendToServer()

        if (newAmount == 0) then
          inv:Set(id, nil)
        end
      else
        if inv:ReduceAmount(id, text) then
          net.Start("XeninInventory.DropAmount")
          net.WriteUInt(id, 10)
          net.WriteUInt(text, 32)
          net.SendToServer()
        end
      end

      pnl:Remove()
    end

    popup:MakePopup()
  end
}

local matGradient = Material("gui/gradient_down", "smooth")

function PANEL:Init()
  self:SetText("")
  self:SetBackgroundColor(XeninInventory.Config.SlotNameColor or XeninUI.Theme.Primary)
  self:SetNameColor(XeninUI.Theme.Primary)
  self:SetNameTextColor(Color(180, 180, 180))
  self:SetName(false)
  self:SetAmount(0)

  self.isInventoryField = true

  self.model = self:Add("DModelPanel")
  self.model:SetMouseInputEnabled(false)
  self.model:SetVisible(false)
  self.model.LayoutEntity = function() end
  local oldPaint = self.model.Paint
  self.model.Paint = function(pnl, w, h)
    oldPaint(pnl, w, h)

    local amount
    if (self.info and self.info.data) then
      amount = self.info.data.ammo or self.info.data.repair or self.info.data.health or self:GetAmount()
    else
      amount = self:GetAmount()
    end

    local visualAmount = self.item:GetVisualAmount(self.info) or 0
    if (amount > 1 or visualAmount > 1) then
      local bgColor = Color(0, 0, 0, 205)
      local max = 100
      if self.cat then
        bgColor = XeninInventory.Config.Categories[self.cat].amountBackgroundColor or bgColor
        max = XeninInventory.Config.Categories[self.cat].maxStack or max
      end

      local str = XeninInventory:GetPhrase("XeninInventory.Field.Amount", {
      amount = (visualAmount and (visualAmount == 0 and amount or visualAmount) or amount) or amount })
      if (self:GetAmount() >= max and max != 1) then
        str = XeninInventory:GetPhrase("XeninInventory.Field.MaxAmount", {
        amount = max })
      end
      surface.SetFont("XeninInventory.Field.Amount")
      local tw, th = surface.GetTextSize(str)
      local x = w - 10 - tw - 2
      local y = 10

      local bgColor = Color(0, 0, 0, 165)
      if self.cat then
        bgColor = XeninInventory.Config.Categories[self.cat].amountBackgroundColor or bgColor
      end

      draw.RoundedBox(6, x, y - 1, tw + 5, th + 1, bgColor)
      draw.SimpleText(str, "XeninInventory.Field.Amount", w - 9, 9, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_TOP)
    end
  end

  self.overlayAlpha = 0

  hook.Add("XeninInventory.SlotUpdateFromServer", self, function(self, id, tbl, bank)
    if (self:GetID() != id) then return end

    if (self:GetIsBank() and bank) then
      self:SetItem(tbl)
    else
      self:SetItem(tbl)
    end
  end)
end

function PANEL:DoRightClick()
  self:DoClick()
end

function PANEL:DoClick()

  if (self:GetIsBank() and !self:GetIsAdmin()) then return end

  if (!self.model:IsVisible()) then return end

  if self:GetIsAdmin() then
    local x, y = gui.MouseX(), gui.MouseY()
    self.popup = XeninUI:DropdownPopup(x, y)
    local panel = self.popup
    panel:AddChoice("Remove Item", function(btn)
      local ply = player.GetBySteamID64(self:GetIsAdmin())
      local id = self:GetID()
      if IsValid(ply) then
        local inv = ply:XeninInventory()
        inv:Set(id, nil, self:GetIsBank())
      end

      self:SetItem(nil)

      net.Start("XeninInventory.Admin.RemoveItem")
      net.WriteString(self:GetIsAdmin())
      net.WriteUInt(id, 16)
      net.WriteBool(self:GetIsBank())
      net.SendToServer()
    end)

    return
  end

  local func = function(btn)
    self.Popup[btn:GetText()](self, self:GetID(), btn)
  end

  local x, y = gui.MouseX(), gui.MouseY()
  self.popup = XeninUI:DropdownPopup(x, y)
  local panel = self.popup

  local item = XeninInventory:GetItem(self.dropEnt)
  local sorted = {}
  for i, v in pairs(item.Actions) do
    table.insert(sorted, {
      name = i,
      sortOrder = v.SortOrder
    })
  end
  table.sort(sorted, function(a, b)
    return a.sortOrder < b.sortOrder
  end)

  for i, v in ipairs(sorted) do
    if (v.name == XeninInventory:GetPhrase("XeninInventory.Popup.DropAll")) then
      self.info = self.info or {}
      self.info.data = self.info.data or {}
      local amount = self.info.data.amount or self.info.data.Amount or self:GetAmount() or 0

      if (amount > 1) then
        panel:AddChoice(XeninInventory:GetPhrase("XeninInventory.Popup." .. v.name), func)
      end

      continue
    end

    panel:AddChoice(XeninInventory:GetPhrase("XeninInventory.Popup." .. v.name), func)
  end
  panel:AddChoice(XeninInventory:GetPhrase("XeninInventory.Popup.Destroy"), func, nil, nil, matDestroy)
end

function PANEL:OnRemove()
  if IsValid(self.popup) then
    self.popup:Remove()
  end

  if IsValid(self.hover) then
    self.hover:Remove()
  end
end

function PANEL:PaintFunction(pnl, w, h)
  local amount
  if (self.info and self.info.data) then
    amount = self.info.data.ammo or self.info.data.repair or self.info.data.health or self:GetAmount()
  else
    amount = self:GetAmount()
  end

  local visualAmount = self.item:GetVisualAmount(self.info) or 0
  if ((amount > 1 or visualAmount > 1) and self.displayAmount) then
    local bgColor = Color(0, 0, 0, 205)
    local max = 100
    if self.cat then
      bgColor = XeninInventory.Config.Categories[self.cat].amountBackgroundColor or bgColor
      max = XeninInventory.Config.Categories[self.cat].maxStack or max
    end

    local displayAmt = (visualAmount and (visualAmount == 0 and amount or visualAmount) or amount) or amount
    local str = XeninInventory:GetPhrase("XeninInventory.Field.Amount", {
    amount = displayAmt })
    if (self:GetAmount() >= max and max != 1) then
      str = XeninInventory:GetPhrase("XeninInventory.Field.MaxAmount", {
      amount = displayAmt })
    end
    surface.SetFont("XeninInventory.Field.Amount")
    local tw, th = surface.GetTextSize(str)
    local x = w - 10 - tw - 2
    local y = 10

    local bgColor = Color(0, 0, 0, 165)
    if self.cat then
      bgColor = XeninInventory.Config.Categories[self.cat].amountBackgroundColor or bgColor
    end

    draw.RoundedBox(6, x, y - 1, tw + 5, th + 1, bgColor)
    draw.SimpleText(str, "XeninInventory.Field.Amount", w - 9, 9, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_TOP)
  end
end

function PANEL:RecreateModelPanel(image)
  self.model:Remove()

  if image then
    self.model = self:Add("DPanel")
    self.model:SetMouseInputEnabled(false)
    self.model:SetVisible(false)
    self.model.SetImage = function(pnl, img)
      pnl.mat = Material(img)
    end
    self.model.margin = 10
    self.model.Paint = function(pnl, w, h)
      local margin = pnl.margin
      surface.SetDrawColor(color_white)
      surface.SetMaterial(pnl.mat)
      surface.DrawTexturedRect(margin, margin, w - (margin * 2), h - (margin * 2))

      self:PaintFunction(pnl, w, h)
    end
  else
    self.model = self:Add("DModelPanel")
    self.model:SetMouseInputEnabled(false)
    self.model:SetVisible(false)
    self.model.LayoutEntity = function() end
    local oldPaint = self.model.Paint
    self.model.Paint = function(pnl, w, h)
      oldPaint(pnl, w, h)

      self:PaintFunction(pnl, w, h)
    end
  end
end

function PANEL:SetItem(tbl)
  tbl = tbl or {}
  local ply = LocalPlayer()
  local rarity = XeninInventory:GetRarity(tbl)
  local cat = XeninInventory.Config.Categories[rarity]

  if (!cat and tbl.model) then
    rarity = 1
    cat = XeninInventory.Config.Categories[rarity]
  end
  self.cat = rarity
  local item = XeninInventory:GetItem(tbl.dropEnt)
  local name = item and item:GetName(tbl)
  local model = item and item:GetModel(tbl)
  local displayAmount = item and !item.DontDisplayAmount
  if (displayAmount == nil) then displayAmount = true end

  self:SetName(tbl.ent and name or false)
  self:SetNameColor(tbl.name and Color(0, 0, 0, 200) or XeninInventory.Config.SlotNameColor or XeninUI.Theme.Primary)
  self:SetNameTextColor(XeninInventory.Config.SlotNameTextColor or Color(225, 225, 225))
  self:SetBackgroundColor(model and cat.color or XeninInventory.Config.SlotColor or XeninUI.Theme.Primary)
  self:SetAmount(tbl.amount or 0)
  self.item = item
  self.ent = tbl.ent
  self.dropEnt = tbl.dropEnt
  self.info = tbl
  self.displayAmount = displayAmount

  if model then
    local isMat = model:find(".png")
    local isMdlPnl = IsValid(self.model) and self.model:GetName() == "DModelPanel"

    if (isMat and isMdlPnl) then
      self:RecreateModelPanel(true)
      self.model:SetImage(model)
      self.model:SetVisible(true)
    elseif (!isMat and isMdlPnl) then
      self:RecreateModelPanel()

      self.model:SetModel(model)
      self.model:SetVisible(true)
      if IsValid(self.model.Entity) then
        local mn, mx = self.model.Entity:GetRenderBounds()
        local size = 0
        size = math.max(size, math.abs(mn.x) + math.abs(mx.x))
        size = math.max(size, math.abs(mn.y) + math.abs(mx.y))
        size = math.max(size, math.abs(mn.z) + math.abs(mx.z))
        local viewModifier = item.GetCameraModifiers and item:GetCameraModifiers(self.info) or {}
        local FOV = viewModifier.FOV
        local x = viewModifier.X or 0
        local y = viewModifier.Y or 0
        local z = viewModifier.Z or 0
        local ang = viewModifier.Angles
        local pos = viewModifier.Pos
        self.model:SetFOV(FOV or item.FOV or 33)
        self.model:SetCamPos(Vector(size + x, size + 30 + y, size - 30 + z))
        self.model:SetLookAt((mn + mx) * 0.5)
        if ang then
          self.model.Entity:SetAngles(ang)
        end
        if pos then
          self.model.Entity:SetPos(pos)
        end
        local skin = item.GetSkin and item:GetSkin(self.info)
        if skin then
          self.model.Entity:SetSkin(skin)
        end
        local color = item.GetColor and item:GetColor(self.info)
        if color then
          self.model.Entity:SetColor(color)
        end
        local bodygroup, value = item.GetBodygroup and item:GetBodygroup(self.info)
        if bodygroup then
          self.model.Entity:SetBodygroup(bodygroup, value)
        end
        local modelControl = item.GetClientsideModel and item:GetClientsideModel(self.info, self.model)

        if (SH_EASYSKINS and XeninInventory.Config.EasySkinsEnabled and tbl.dropEnt == "spawned_weapon") then
          local skinTbl = SH_EASYSKINS.GetEnabledPurchasedSkinByClass(ply, tbl.ent)

          if skinTbl then
            local skin = SH_EASYSKINS.GetSkin(skinTbl.skinID)

            if skin then
              SH_EASYSKINS.ApplySkinToModel(self.model.Entity, skin.material.path)
            end
          end
        end
      end
    end
  else
    self.model:SetVisible(false)
  end

  self:InvalidateLayout()
end

function PANEL:SetItemByID(id, bank)
  local inv = LocalPlayer():XeninInventory()
  local tbl = bank and inv:GetBank() or inv:GetInventory()

  self:SetItem(tbl[id])
  self:SetID(id)
  self:SetDroppable(tbl[id])
end

function PANEL:OnStartDragging()
  self:OnCursorEntered()

  if IsValid(self.hover) then
    self.hover:Remove()
  end
end

function PANEL:OnStopDragging()
  if (!self:IsHovered()) then
    self:OnCursorExited()
  end

  if IsValid(self.hover) then
    self.hover:Remove()
  end
end

function PANEL:SetDroppable(bool, bank)
  self.m_DragSlot = nil

  if (bool and self.model:IsVisible()) then
    self:Droppable("XeninInventory.Field")
  end

  self:Receiver("XeninInventory.Field", function(self, tbl, dropped)
    if (!dropped) then return end
    local droppedPnl = tbl[1]
    if (!droppedPnl) then return end
    if (!XeninInventory:CanUseInventory(LocalPlayer())) then
      return LocalPlayer():XeninInventory():Message(XeninInventory:GetPhrase("ChatCommand.AccessRestricted"))
    end

    local tempIsBank = droppedPnl:GetIsBank()
    local temp2IsBank = self:GetIsBank()
    local temp = droppedPnl:GetID()
    local temp2 = self:GetID()

    local inv = LocalPlayer():XeninInventory()
    if (tempIsBank and temp2IsBank) then
      inv:Swap(temp, temp2, true)

      droppedPnl:SetItemByID(temp, true)
      self:SetItemByID(temp2, true)
    elseif (tempIsBank and !temp2IsBank) then
      inv:SwapBank(temp2, temp)

      droppedPnl:SetItemByID(temp, true)
      self:SetItemByID(temp2)
    elseif (!tempIsBank and temp2IsBank) then
      inv:SwapBank(temp, temp2)

      droppedPnl:SetItemByID(temp)
      self:SetItemByID(temp2, true)
    elseif (!temp2IsBank and !tempIsBank) then
      inv:Swap(temp, temp2)

      droppedPnl:SetItemByID(temp)
      self:SetItemByID(temp2)
    end
  end)
end

function PANEL:PerformLayout(w, h)
  self.model:SetPos(1, 1)
  self.model:SetSize(w - 2, h - 2 - (self:GetName() and 24 or 0))
end

function PANEL:OnCursorEntered()
  self:Lerp("overlayAlpha", 140)
  if (!self.info) then return end

  self:CreateHover()
end

function PANEL:CreateHover()
  local item = XeninInventory:GetItem(self.info.dropEnt)
  if (!item) then return end
  if (!item.Hover) then return end

  local x, y = self:LocalToScreen(self:GetWide())

  self.hover = vgui.Create(item.Hover)
  if (!IsValid(self.hover)) then self.hover = nil return end
  self.hover:SetPos(x, y)
  self.hover:SetDrawOnTop(true)
  self.hover.parent = self
  local oldThink = self.hover.Think or function() end
  self.hover.Think = function(pnl)
    oldThink(pnl)

    if (!self:IsHovered() and IsValid(pnl) or !IsValid(self)) then
      pnl:Remove()

      return
    end

    if (!IsValid(self)) then
      pnl:Remove()

      return
    end

    local w, h = pnl:GetSize()
    local x, y = pnl.x, pnl.y
    x = math.Clamp(x, 0, ScrW() - w)
    y = math.Clamp(y, 0, ScrH() - h)

    pnl:SetPos(x, y)
  end

  self.hover:SetInfo(self.info)
end

function PANEL:OnCursorExited()
  self:Lerp("overlayAlpha", 0)

  if IsValid(self.hover) then
    self.hover:Remove()
  end
end

function PANEL:Paint(w, h)
  if self:GetName() then

    XeninUI:Mask(function()
      XeninUI:DrawRoundedBox(6, 0, 0, w, h - 1, self:GetBackgroundColor())
    end, function()
      surface.SetDrawColor(self:GetBackgroundColor())
      surface.SetMaterial(matGradient)
      surface.DrawTexturedRect(0, 0, w, h + 6)
    end)

    draw.RoundedBoxEx(6, 0, h - 24, w, 24, self:GetNameColor(), false, false, true, true)
    local font = "XeninInventory.Field.Name"
    surface.SetFont(font)
    local tw, th = surface.GetTextSize(self:GetName())
    if (tw >= w) then
      surface.SetFont("XeninInventory.Field.Name.Small")
      local tw, th = surface.GetTextSize(self:GetName())
      if (tw >= w) then
        font = "XeninInventory.Field.Name.Smallest"
      else
        font = "XeninInventory.Field.Name.Small"
      end
    end
    draw.SimpleText(self:GetName(), font, w / 2, h - 24 / 2, self:GetNameTextColor(), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
  else
    draw.RoundedBox(6, 0, 0, w, h, self:GetBackgroundColor())
  end

  if (self.overlayAlpha > 0.1) then
    draw.RoundedBox(6, 0, 0, w, h, Color(0, 0, 0, self.overlayAlpha))
  end
end

vgui.Register("XeninInventory.Field", PANEL, "DButton")

--addons/yet_another_warn_system/lua/yaws/core/sh_blank_punishment.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/core/sh_blank_punishment.lua:
-- This registers a blank punishment.
local PUNISHMENT = {}
PUNISHMENT.__index = PUNISHMENT

AccessorFunc(PUNISHMENT, "id", "ID", FORCE_STRING)
AccessorFunc(PUNISHMENT, "name", "Name", FORCE_STRING)
AccessorFunc(PUNISHMENT, "description", "Description", FORCE_STRING)

PUNISHMENT.params = {}
function PUNISHMENT:AddParameter(id, name, description, type, default)
    self.params[id] = {
        name = name,
        description = description,
        type = type,
        default = default
    }
end
function PUNISHMENT:GetParameters()
    return self.params
end
function PUNISHMENT:GetParameter(id)
    return self.params[id]
end
function PUNISHMENT:SetParameters(table)
    self.params = table
end

PUNISHMENT.action = function(self, admin, targetSteamID, params)
    YAWS.Core.LogWarning("Punishment ", self:GetName(), " has not implemented an action.")
    YAWS.Core.LogWarning("Inform the developer of addon ", self:GetAddon(), " please.")

    return false
end
function PUNISHMENT:SetAction(func)
    self.action = func
end 

PUNISHMENT.enableCheck = function(self)
    return true
end
function PUNISHMENT:ShouldEnable(func)
    self.enableCheck = func
end 

function PUNISHMENT:Validate()
    if(!self.enableCheck()) then return false end 
    
    if(!self:GetID()) then
        YAWS.Core.LogError("Unknown punishment could not be created, as it's missing an ID.")
        return false
    end
    if(!self:GetName()) then
        YAWS.Core.LogError("Punishment ", self:GetID(), " could not be created, as it's missing a name.")
        return false
    end
    if(!self:GetDescription()) then
        YAWS.Core.LogError("Punishment ", self:GetName(), " [", self:GetID(), "] could not be created, as it's missing a description.")
        return false
    end

    return true 
end 
function PUNISHMENT:Register() 
    if(!self:Validate()) then return end 
    
    YAWS.Punishments.Types[self:GetID()] = {
        name = self:GetName(),
        description = self:GetDescription(),
        params = self.params,
        action = self.action
    }
end 

YAWS.Core.BlankPunishment = PUNISHMENT
--addons/yet_another_warn_system/lua/yaws/core/sh_consoleent.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/core/sh_core.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/core/sh_punishments.lua:
-- Handles the creation and registration of punishments
function YAWS.Punishments.CreatePunishment()
    local punishment = table.Copy(YAWS.Core.BlankPunishment)
    YAWS.Punishments.PendingTypes[#YAWS.Punishments.PendingTypes + 1] = punishment
    return punishment
end 

hook.Add("InitPostEntity", "yaws.punishments.register", function()
    for k,v in ipairs(YAWS.Punishments.PendingTypes) do
        v:Register()
    end
end)
--addons/yet_another_warn_system/lua/yaws/core/cl_ui_colors.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/core/settings/cl_config.lua:
-- Caches the server's in-game config settings
YAWS.Config.ClientReady = YAWS.Config.ClientReady or false

YAWS.Config.Settings = YAWS.Config.Settings or {
    prefix = {
        -- name = "admin_settings_prefix_name",
        -- desc = "admin_settings_prefix_desc",
        default = "Yet Another Warn System >>",
        value = nil,
        type = "string",
        category = "branding"
    },
    prefix_color = {
        default = Color(83, 182, 155),
        value = nil,
        type = "color",
        category = "branding"
    },
    chat_color = {
        default = Color(255, 255, 255),
        value = nil,
        type = "color",
        category = "branding"
    },

    broadcast_warns = {
        default = true,
        value = nil,
        type = "boolean",
        category = "warnings"
    },
    reason_required = {
        default = false,
        value = nil,
        type = "boolean",
        category = "warnings"
    },
    purge_on_punishment = {
        default = false,
        value = nil,
        type = "boolean",
        category = "warnings"
    },
    message_admins_on_notes_join = {
        default = false,
        value = nil,
        type = "boolean",
        category = "warnings"
    },

    point_max = {
        default = 50,
        value = nil,
        type = "number",
        category = "points"
    },
    point_cooldown_time = {
        default = 1800, -- 30 minutes
        value = nil,
        type = "number",
        category = "points"
    },
    point_cooldown_amount = {
        default = 1,
        value = nil,
        type = "number",
        category = "points"
    },
    join_message_enabled = {
        default = true,
        value = nil,
        type = "boolean",
        category = "points"
    },
    join_message_message = {
        default = "Welcome back. You have {active} active points out of {points} points in total.", -- Also have a {inactive} thing
        value = nil,
        type = "string",
        category = "points"
    },
    message_admins_on_active_join = {
        default = false,
        value = nil,
        type = "boolean",
        category = "points"
    },
}

-- UI data that isn't sent over for obvious reasons
YAWS.Config.SettingOrder = {
    [1] = { -- Branding
        "prefix",
        "prefix_color",
        "chat_color"
    },
    [2] = { -- Warnings
        "broadcast_warns",
        "reason_required",
        "purge_on_punishment",
        "message_admins_on_notes_join"
    },
    [3] = { -- Points
        "point_max",
        "point_cooldown_time",
        "point_cooldown_amount",
        "join_message_enabled",
        "join_message_message",
        "message_admins_on_active_join"
    }
}
YAWS.Config.UIData = {
    prefix = {
        name = "admin_settings_prefix_name",
        desc = "admin_settings_prefix_desc"
    },
    prefix_color = {
        name = "admin_settings_prefix_color_name",
        desc = "admin_settings_prefix_color_desc"
    },
    chat_color = {
        name = "admin_settings_chat_color_name",
        desc = "admin_settings_chat_color_desc"
    },

    disable_points = {
        name = "admin_settings_disable_points_name",
        desc = "admin_settings_disable_points_desc",
    },
    broadcast_warns = {
        name = "admin_settings_broadcast_warns_name",
        desc = "admin_settings_broadcast_warns_desc",
    },
    reason_required = {
        name = "admin_settings_reason_required_name",
        desc = "admin_settings_reason_required_desc",
    },
    purge_on_punishment = {
        name = "admin_settings_purge_on_punishment_name",
        desc = "admin_settings_purge_on_punishment_desc",
    },
    message_admins_on_notes_join = {
        name = "admin_settings_message_admins_on_notes_join_name",
        desc = "admin_settings_message_admins_on_notes_join_desc",
    },

    point_max = {
        name = "admin_settings_point_max_name",
        desc = "admin_settings_point_max_desc",
    },
    point_cooldown_time = {
        name = "admin_settings_point_cooldown_time_name",
        desc = "admin_settings_point_cooldown_time_desc",
    },
    point_cooldown_amount = {
        name = "admin_settings_point_cooldown_amount_name",
        desc = "admin_settings_point_cooldown_amount_desc",
    },
    join_message_enabled = {
        name = "admin_settings_join_message_enabled_name",
        desc = "admin_settings_join_message_enabled_desc",
    },
    join_message_message = {
        name = "admin_settings_join_message_message_name",
        desc = "admin_settings_join_message_message_desc",
    },
    message_admins_on_active_join = {
        name = "admin_settings_message_admins_on_active_join_name",
        desc = "admin_settings_message_admins_on_active_join_desc",
    }
}

hook.Add("InitPostEntity", "yaws.config.ready", function()
    net.Start("yaws.config.cacherequest")
    net.SendToServer()
end)


net.Receive("yaws.config.cache", function(len)
    YAWS.Core.PayloadDebug("yaws.config.cache", len)

    local length = net.ReadUInt(16)
    local data = util.JSONToTable(util.Decompress(net.ReadData(length)))

    YAWS.Config.Settings = data

    YAWS.Config.ClientReady = true
    hook.Run("yaws.config.clientready")
end)

function YAWS.Config.GetValue(key)
    if(!YAWS.Config.Settings[key]) then return end

    if(YAWS.Config.Settings[key].value == nil) then
        return YAWS.Config.Settings[key].default
    end
    return YAWS.Config.Settings[key].value
end

--addons/yet_another_warn_system/lua/yaws/languages/sh_en.lua:
-- This is the default fallback language. Do NOT edit this file!
YAWS.Language.Languages['English'] = {
    icon = "flags16/gb.png",

    --
    -- Chat Messages
    --
    chat_no_permission = "You aren't allowed to do that.", -- They aren't allowed to perform a certain action.
    net_cooldown = "Your sending too many packets to the server, please wait and try again.", -- They're spamming the server with net messages.
    error = "Looks like something went wrong. Try again later.", -- uhhhhh shit.

    admin_permissions_saved = "Successfully saved your new permissions.", -- Confirmation that the new permissions have been saved.
    admin_config_saved = "Successfully saved your config.", -- Confirmation that the new config have been saved.

    admin_preset_added = "Successfully added a new preset.", -- Confirmation that a new preset has been added.
    admin_preset_edited = "Successfully edited preset.", -- Preset edited.
    admin_preset_nope = "Your preset is missing information.", -- Preset tried to be submitted without a name and/or reason.
    admin_preset_dupe = "A preset with that name already exists.", -- Preset tried to be submitted without a unique name.
    admin_preset_cantfind = "That preset can't be found.", -- Preset can't be found.
    admin_preset_removed = "Preset was removed.", -- Preset was removed.
    admin_preset_limit = "You can't have more than 32 presets.", -- Hitting the preset count limit.

    admin_player_warned = "Successfully warned %s.", -- Conformation to the admin that a player got warned.
    admin_player_note_update = "Successfully updated that players admin notes.", -- Conformation to the admin that a players notes got updated.
    admin_player_wipewarns = "Successfully wiped all warnings from %s.", -- Conformation to the admin that a players warnings got wiped.
    admin_player_joinwithactive = "%s has joined the server with %s active points.", -- Warning to admins that player joined with active points.
    admin_player_joinwithnote = "%s has joined the server with an admin note.", -- Warning to admins that player joined with admin notes.

    admin_punishment_created = "Punishment created.", -- Conformation that a punishment got created
    admin_punishment_removed = "Punishment removed.", -- Conformation that a punishment got removed
    admin_punishment_edited = "Punishment edited.", -- Conformation that a punishment got edited
    
    player_warn_notice = "%s has issued a warn to you, for the following reason: %s", -- Message to the player they got warned.
    player_warn_broadcast = "%s has been warned by %s for the following reason: %s", -- Broadcast to everyone about a warning.
    player_warn_immune = "This player is immune from being warned.", -- Message to the player that they can't be warned.
    player_warn_noreason = "Please specify a reason to warn this player.", -- Tried to warn a player without a reason.
    player_warn_toolong = "Your reason cannot be longer than 150 characters.", -- Reason is too long.
    player_warn_minpoints = "You can't put a negative amount of points on a warning.", -- Tried to warn a player with < 0 points.
    player_warn_maxpoints = "You can only put a maximum of %s points on a warn.", -- Tried to warn a player with more than the max points.

    player_warn_help1 = "%s -> Opens the UI.", -- Warning help line 1
    player_warn_help2 = "%s <player> <points> <reason> -> Warns a player.", -- Warning help line 2
    player_warn_help3 = "%s <id> -> Searches for a warning ID.", -- Warning help line 2
    player_warn_help4 = "%s help -> Gives help on all the uses of the command.", -- Warning help line 3
    player_warn_help5 = "%s search <id> -> Searches for a warning ID.", -- you get the jist by now
    player_warn_help6 = "%s open <player> -> Opens a player's warning page.",
    player_warn_help7 = "%s warn <player> <points> <reason> -> Warns a player.",

    player_warn_noid = "Provide a warning id to search for.", -- Specify a ID to search for
    player_warn_noplayer = "Provide a player to view.", -- Specify a player to view

    player_warn_help_console = "To warn a player through the console, use: yaws warn <player> <point count> <reason>", -- Help for warning in the console

    player_warn_searchid_wait = "Searching... please wait...", -- Please wait for searching for a warn ID.
    player_warn_searchid_nonefound = "No warning with that ID was found.", -- Nothing found.
    player_warn_ui = "You cannot warn through the chat as you are only permitted to use presets.", -- Message to the player that they can't warn through the chat.
    player_warn_not_found = "Could not find player \"%s\".", -- Tried to warn a player through the chat that couldn't be found
    player_warn_wrongpoints = "The point count specified was invalid.", -- Tried to warn a player through the chat with an invalid point count.
    player_warn_notyou = "You can't warn yourself.", -- Tried to warn themselves.
    player_warn_deleted = "Successfully deleted warning.", -- Deleted warning.
    player_warn_deleted_user = "%s has deleted one of your warnings.", -- Deleted warning but it's the user.
    
    --
    -- UI
    --
    generic_save = "Save Changes", -- Used for any "save" buttons.
    generic_cancel = "Cancel", -- Used for any "cancel" buttons.
    generic_back = "Back", -- Used for any "back" buttons.
    generic_point_count = "Point Count", -- For the "point count" placeholders
    generic_delete = "Delete", -- Delete generic
    generic_warned = "WARNED", -- Warned - Used in the warnings cards
    
    -- Sidebar Tabs
    sidebar_warnings = "Warnings", -- Sidebar text for the warnings tab.
    sidebar_players = "Players", -- Sidebar text for the players tab.
    sidebar_admin = "Admin", -- Sidebar text for the admin tab.
    sidebar_settings = "Settings", -- Sidebar text for the settings tab.
    sidebar_close = "Close", -- Sidebar text for the close button.
    
    -- Player Cards
    player_card_warn = "Warn", -- Warn the player.
    player_card_name = "Copy Name", -- Copy the name.
    player_card_steamid = "Copy SteamID", -- Copy steamID.
    player_card_steamid64 = "Copy SteamID64", -- SteamID64.

    -- Players tab
    players_tab_search = "Search via name/steamid(64)/usergroup.", -- Text for the search box in the Players tab.
    players_tab_search_button = "Submit Search", -- Text for the search button.
    players_tab_offline = "Search for offline players too?", -- Include offline players text. Careful of how big this is.
    
    viewing_player_no_warns_found = "There were no warnings found for this player.", -- Message when no warnings are found for a player.
    viewing_player_action_submit_warn = "Submit New Warning", -- Button for submitting a new warning.
    viewing_player_action_view_notes = "View Admin Notes", -- Button for viewing admin notes.
    viewing_player_player_notes = "Admin Notes", -- Admin Notes placeholder
    viewing_player_save_player_notes = "Save Admin Notes", -- Save the admin notes button

    viewing_player_table_admin = "Admin", -- Admin table header
    viewing_player_table_reason = "Reason", -- Reason table header
    viewing_player_table_time = "Time", -- Time table header
    viewing_player_table_points = "Points", -- Points table header
    viewing_player_table_server = "Server", -- Server table header

    viewing_player_table_right_id = "Copy Warning ID", -- Copy ID button
    viewing_player_table_right_admin = "Copy Admin", -- Copy admin button
    viewing_player_table_right_reason = "Copy Reason", -- Copy reason button
    viewing_player_table_right_time = "Copy Time", -- Copy time button
    viewing_player_table_right_points = "Copy Points Added", -- Copy points button
    viewing_player_table_right_server = "Copy Server Name", -- Copy server button
    viewing_player_table_right_log = "Copy as Log", -- Copy server button
    viewing_player_table_log_format = "[%s] %s(%s) warned %s(%s) for the reason \"%s\", adding %s points.", -- Log format. %s = timestamp, admin, steamid, player, steamid, reason and then point count.

    viewing_player_wipe_header = "Wipe all of %s's warnings?", -- Wipe a players warnings header
    viewing_player_wipe_subtext = "This is irreversible. Make sure this is what you want to do.", -- Wipe a players warnings subtext

    viewing_warn_time = "Time", -- Time header
    viewing_warn_point = "Point Penalty", -- Points header
    viewing_warn_server = "Server", -- Server header
    viewing_warn_reason = "Reason", -- Reason header

    -- Warning Players
    warn_player_submit = "Warn Player", -- Warn Player submit.
    warn_player_reason = "Reason for Warn", -- Reason for warn placeholder.

    -- Admin Tab
    admin_tab_sidebar_permissions = "Permissions", -- Sidebar text for the permissions tab. 
    admin_tab_sidebar_settings = "Settings", -- Sidebar text for the settings tab. 
    admin_tab_sidebar_presets = "Presets", -- Sidebar text for the presets tab. 
    admin_tab_sidebar_punishments = "Punishments", -- Sidebar text for the punishments tab. 
    admin_tab_sidebar_yaws = "YAWS", -- Sidebar text for the yaws tab. 
    
    admin_tab_selecttab = "Select a category from the side.", -- Select a tab text

    admin_tab_presets_name = "Preset Name", -- Name in preset creation. 
    admin_tab_presets_reason = "Preset Reason", -- Reason in preset creation. 
    admin_tab_presets_create = "Create Preset", -- Create Preset button. 

    admin_tab_punishments_selecttype = "Select Punishment Type", -- Text in selecting a punishment type. 
    admin_tab_punishments_create = "Create Punishment Threshold", -- Text in selecting a punishment type. 
    admin_tab_punishments_notype = "No punishment type selected.", -- Default text for the descripton. 
    admin_tab_punishments_none = "There were no punishments found", -- Default text for the descripton. 
    -- admin_tab_punishments_edit_options = "Punishment Options", -- Punishment Options header. 

    admin_tab_warning_presets_box = "Select a Preset", -- Selecting a preset placeholder
    admin_tab_warning_reason_placeholder = "Enter a Reason", -- Enter a reason placeholder


    -- 
    -- Misc 
    -- 
    yaws_top = "This tab is only visible to the owner of the addon, a.k.a you", -- For the context menu and YAWS panel
    yaws = "Yet Another Warning System", -- For the context menu and YAWS panel
    yaws_version = "Release %s", -- Version
    yaws_outdated = "A new update is available. Please download it soon!", -- Version is outdated.

    context_warn = "Warn this Player", -- Warn Player button in the context menu
    context_presets = "Warn this Player using Presets", -- Warn Player button in the context menu w/ presets
    context_points = "Point Count: %s", -- Point Count viewing
    context_reason = "Warning Reason: %s", -- Reason viewing
    context_submit = "Submit Warning", -- Submit Warning
    context_viewwarns = "View Warnings", -- View Warnings
    context_viewnotes = "View Admin Notes", -- View Admin Notes

    page_format = "Page %s/%s", -- Page readout format

    no_player_found1 = "No players matching that filter were found.", -- No players were found line 1
    no_player_found2 = "Try a different filter.", -- No players were found line 2
    no_warning_found1 = "No warnings were found for this player.", -- No warnings were found line 1
    no_warning_found2 = "What an angel!", -- No warnings were found line 2
    no_punishment_found1 = "No punishments were found.", -- No punishments were found line 1
    no_punishment_found2 = "We'll leave it to your admins to do that!", -- No punishments were found line 2
    no_presets_found1 = "No presets were found.", -- No presets were found line 1
    no_presets_found2 = "We get it, you like to do things yourself.", -- No presets were found line 2

    points_format = "%s Point(s)", -- Points format for fancy UIs

    loading = "Loading...", -- Loading screen
    loading_hehe = "Playing Satisfactory...", -- aGVoZQ==

    accessability_points = "Active Points", -- accessability points text
    accessability_inactivepoints = "Inactive Points", -- accessability inactive points text

    -- Permission names
    permission_view_ui = "Open the UI",
    permission_view_self_warns = "View Their Own Warnings",
    permission_view_others_warns = "View Others Warnings",
    permission_view_admin_settings = "View and Edit Admin Settings",
    permission_create_warns = "Create Warnings",
    permission_customise_reason = "Use Custom Reasons",
    permission_delete_warns = "Delete Warnings",

    -- User settings names/descriptions
    user_settings_darkmode_name = "Dark Mode",
    user_settings_darkmode_desc = "Enable dark mode inside the UI.",

    user_settings_language_name = "Language",
    user_settings_language_desc = "Which langauge would you like to see the addon in? Requires reopening the UI.",

    user_settings_blur_name = "Blur Background",
    user_settings_blur_desc = "Enable bluring on the UI background. Requires reopening the UI.",

    user_settings_switchicons_name = "Enable Switch Icons",
    user_settings_switchicons_desc = "Enables tick/cross icons on switches for accessibility.",

    user_settings_colorblindtxt_name = "Enable Additional Texts",
    user_settings_colorblindtxt_desc = "Enables additional text for accessibility.",

    user_settings_tableview_name = "Table View",
    user_settings_tableview_desc = "Instead of viewing warning cards, view warnings as a table. For the most SERIOUS Warning Viewing Experience™",

    user_settings_disablefade_name = "Disable UI Fading",
    user_settings_disablefade_desc = "Disables the fade in/out of the main UI panel for that extra 5ms of speed!",

    user_settings_disableanim_name = "Disable UI Animations",
    user_settings_disableanim_desc = "Disables all internal UI animations.",
    
    -- Categories
    user_settings_category_interface = "User Interface",
    user_settings_category_accessibility = "Accessibility",

    -- Admin settings names/descriptions

    -- Branding
    admin_settings_prefix_name = "Prefix",
    admin_settings_prefix_desc = "The prefix the addon will use in chat messages.",

    admin_settings_prefix_color_name = "Prefix Color",
    admin_settings_prefix_color_desc = "The color of the prefix for chat messages.",

    admin_settings_chat_color_name = "Chat Color",
    admin_settings_chat_color_desc = "The color of the rest of all messages. Useful if your using a chatbox that doesn't work with white.",
    

    -- Warnings
    admin_settings_disable_points_name = "Disable Points",
    admin_settings_disable_points_desc = "Disables the point system, and uses warnings themselves to decay, for an AWarn-like exerpience.",

    admin_settings_broadcast_warns_name = "Broadcast Warnings",
    admin_settings_broadcast_warns_desc = "If true, the addon will broadcast warnings to everyone online.",

    admin_settings_reason_required_name = "Reason Required?",
    admin_settings_reason_required_desc = "If true, admins will be required to put a reason for every warn.",

    admin_settings_purge_on_punishment_name = "Purge on Punishment",
    admin_settings_purge_on_punishment_desc = "If true, the addon will mark all a players points as inactive when they are punished.",

    admin_settings_message_admins_on_notes_join_name = "Message Admins after Player with Admin Notes Joins",
    admin_settings_message_admins_on_notes_join_desc = "Send a message to anyone with \"View Admin Notes\" permission when a player joins with admin notes.",


    -- Points
    admin_settings_point_cooldown_time_name = "Point Cooldown",
    admin_settings_point_cooldown_time_desc = "How long in seconds it takes for active points to be removed from a player. Set to 0 to disable this.",

    admin_settings_point_cooldown_amount_name = "Point Cooldown Amount",
    admin_settings_point_cooldown_amount_desc = "How many points to deduce each cooldown, set to 0 to remove all points on a cooldown.",

    admin_settings_point_max_name = "Maximum Points",
    admin_settings_point_max_desc = "The maximum amount of points one warn can have.",

    admin_settings_join_message_enabled_name = "Join Message Enabled",
    admin_settings_join_message_enabled_desc = "If true, the addon will send a message to players when they join with active points.",

    admin_settings_join_message_message_name = "Join Message",
    admin_settings_join_message_message_desc = "The message to send. {active} is active points, {inactive} is inactive points, {points} is total points", -- THIS IS TOO FUCKING LONG AAAA

    admin_settings_message_admins_on_active_join_name = "Message Admins after Player with Active Points Joins",
    admin_settings_message_admins_on_active_join_desc = "Send a message to anyone with \"View Others Warnings\" permission when a player joins with active points.",

    -- The categories for the settings.
    admin_settings_category_points = "Points",
    admin_settings_category_branding = "Branding",
    admin_settings_category_warnings = "Warnings"
}
--addons/yet_another_warn_system/lua/yaws/punishments/sh_usergroup.lua:
local PUNISHMENT = YAWS.Punishments.CreatePunishment()
PUNISHMENT:SetID("yaws.usergroup")
PUNISHMENT:SetName("Usergroup Change")
PUNISHMENT:SetDescription("Changes the players usergroup.")

PUNISHMENT:AddParameter("group", "Usergroup", "The name of the usergroup to change them to. Case sensitive.", "string", "user")

PUNISHMENT:ShouldEnable(function()
    return (CAMI && ((ulx and (ULib.VERSION < 2.80)) or sam)) and true or false
end)
PUNISHMENT:SetAction(function(admin, targetSteamID, params)
    CAMI.SignalSteamIDUserGroupChanged(util.SteamIDFrom64(targetSteamID), "", params['group'], "yaws_usergroup_punishment")

    local ply = player.GetBySteamID64(targetSteamID)
    if(ply) then 
        YAWS.Language.SendRawMessage(ply, "Due to your actions your usergroup has been changed to " .. params.group .. ".")
    end

    return true 
end)
--addons/yet_another_warn_system/lua/yaws/ui/elements/cl_scroll.lua:
-- Scroll Panel
local PANEL = {}

function PANEL:Init()
    local colors = YAWS.UI.ColorScheme()

    self.VBar:SetWide(5)
    self.VBar:SetHideButtons(true)
    self.VBar.bgClr = colors['scroll_bg']
    self.VBar.gripClr = colors['scroll_grip']
    self.VBar.Paint = function(s, w, h)
        draw.RoundedBox(0, 0, 0, w, h, self.VBar.bgClr)
    end
    self.VBar.btnGrip.Paint = function(s, w, h)
        draw.RoundedBox(0, 0, 0, w, h, self.VBar.gripClr)
    end
end

function PANEL:Paint(w, h) end

vgui.Register("yaws.scroll", PANEL, "DScrollPanel")
--addons/yet_another_warn_system/lua/yaws/ui/elements/cards/cl_permission_entry.lua:
local PANEL = {}

AccessorFunc(PANEL, "name", "Name", FORCE_STRING)

function PANEL:Init()
    self:SetName("Unnamed")

    self.element = vgui.Create("yaws.switch", self)
    self.element:SetColor(YAWS.UI.ColorScheme()['theme'])
    self.element.OnToggle = function(val)
        self.OnChange(val)
    end 
end 

function PANEL:Paint(w, h)
    local colors = YAWS.UI.ColorScheme()
    
    -- uncomment for a nice accidental sezuire from me debugging the layouts :)
    -- draw.RoundedBox(0, 0, 0, w, h, Color(math.Rand(0, 255), math.Rand(0, 255), math.Rand(0, 255)))
    draw.RoundedBox(0, 0, 0, w, h, colors["panel_background"])

    draw.SimpleText(self.name, "yaws.7", math.max(30, w * 0.109) + h / 2, h / 2, colors["text_header"], 0, 1)
end

function PANEL:SetValue(val)
    self.element:SetValue(val)
end 
function PANEL:GetValue(val)
    return self.element:GetValue()
end 

function PANEL:GetReccomendedHeight()
    surface.SetFont("yaws.7")
    local _,titleHeight = surface.GetTextSize(self.name)
    return titleHeight + 30
end
function PANEL:UseReccomendedHeight()
    self:SetHeight(self:GetReccomendedHeight())
end 

function PANEL:PerformLayout(w, h)
    self.element:Dock(LEFT)
    self.element:SetWide(math.max(30, w * 0.109))
    self.element:DockMargin(10, (h * 0.295), 10, (h * 0.295))
end 

function PANEL:OnChange(val)
end 

vgui.Register("yaws.permissions_entry", PANEL, "DPanel")
--addons/yet_another_warn_system/lua/yaws/ui/elements/inputs/cl_combo.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/inputs/cl_icon_btn.lua:
return gluapack()()
--addons/yet_another_warn_system/lua/yaws/ui/elements/misc/cl_pagnation.lua:
local PANEL = {}

function PANEL:Init()
    -- this was initially going to be a infinite scroll, but thats stupid to
    -- implement properly in gmod

    self.page = 1
    self.itemsMax = -1
    self.pageCount = -1
    self.buttons = {}
    self.loadRotation = 0

    self.frameTime = RealFrameTime()

    self.nextButton = vgui.Create("yaws.iconbtn", self)
    self.nextButton:SetIconPadding(8)
    self.nextButton:SetMaterial(YAWS.UI.MaterialCache['arrow'])
    self.nextButton.DoClick = function()
        self:NextPage()
    end
    
    self.prevButton = vgui.Create("yaws.iconbtn", self)
    self.prevButton:SetIconPadding(8)
    self.prevButton:FlipIcon(true)
    self.prevButton:SetMaterial(YAWS.UI.MaterialCache['arrow'])
    self.prevButton.DoClick = function()
        self:PrevPage()
    end


    self.startButton = vgui.Create("yaws.iconbtn", self)
    self.startButton:SetIconPadding(8)
    self.startButton:SetMaterial(YAWS.UI.MaterialCache['double_arrow'])
    self.startButton:FlipIcon(true)
    self.startButton.DoClick = function()
        self:SetPage(1)
    end
    
    self.endButton = vgui.Create("yaws.iconbtn", self)
    self.endButton:SetIconPadding(8)
    self.endButton:SetMaterial(YAWS.UI.MaterialCache['double_arrow'])
    self.endButton.DoClick = function()
        self:SetPage(self.pageCount)
    end

    self.sideShadow = vgui.Create("yaws.shadow", self:GetParent())
    self.bottomShadow = vgui.Create("yaws.shadow", self:GetParent())
    self.bottomShadow:Down()
end 

function PANEL:RefreshPage(page, offset, amount) end 

function PANEL:SetItemCount(count)
    self.itemsMax = count
    self.pageCount = math.ceil(count / YAWS.ManualConfig.PagnationCount)
    self:CalculatePageSelections()
end

function PANEL:CalculatePageSelections()
    if(#self.buttons > 0) then 
        for k,v in ipairs(self.buttons) do
            v:Remove()
        end
    end 
end 

function PANEL:NextPage()
    self:SetPage(self.page + 1)
end 
function PANEL:PrevPage()
    self:SetPage(self.page - 1)
end 

function PANEL:SetPage(page)
    if(page == self.page) then return end -- unnessasary data requests are the devils friend
    if(page < 1 || page > self.pageCount) then return end
    self.page = page
    self:RefreshPage(self.page, (self.page - 1) * YAWS.ManualConfig.PagnationCount, YAWS.ManualConfig.PagnationCount)
end 

function PANEL:PerformLayout(w, h)
    self.prevButton:Dock(LEFT)
    self.prevButton:SetSize(h, h)
    self.startButton:Dock(LEFT)
    self.startButton:SetSize(h, h)

    self.nextButton:Dock(RIGHT)
    self.nextButton:SetSize(h, h)
    self.endButton:Dock(RIGHT)
    self.endButton:SetSize(h, h)

    self:LayoutShadows(w, h)
end 

function PANEL:Paint(w, h)
    local colors = YAWS.UI.ColorScheme() 
    self.frameTime = RealFrameTime()
    
    draw.RoundedBox(0, 0, 0, w, h, colors['panel_background'])

    if(YAWS.UI.CurrentData.WaitingForPagnatedResponse) then 
        self.loadRotation = Lerp(self.frameTime * 100, self.loadRotation, self.loadRotation + 1)

        local wt = draw.SimpleText(YAWS.Language.GetTranslation("loading"), "yaws.7", w / 2 + (h / 4), h / 2, colors['text_header'], 1, 1)

        draw.NoTexture()
        surface.SetMaterial(YAWS.UI.MaterialCache['load'])
        YAWS.UI.SetSurfaceDrawColor(colors["text_main"])
        surface.DrawTexturedRectRotated(w / 2 - (wt / 2) - 5, h / 2, h / 2, h / 2, self.loadRotation)
    else 
        draw.SimpleText(YAWS.Language.GetFormattedTranslation("page_format", self.page, math.max(self.pageCount, 1)), "yaws.7", w / 2, h / 2, colors['text_header'], 1, 1)
    end
end 

function PANEL:LayoutShadows(w, h)
    local x,y = self:GetPos()
    if(IsValid(self.sideShadow)) then 
        self.sideShadow:SetPos(x + w, y)
        self.sideShadow:SetSize(3, h)
    end 

    if(IsValid(self.bottomShadow)) then 
        self.bottomShadow:SetPos(x, y + h)
        self.bottomShadow:SetSize(w + 1, 3)
    end
end 

function PANEL:RemoveShadows() 
    self.bottomShadow:Remove()
    self.sideShadow:Remove()
end 
function PANEL:OnRemove()
    self:RemoveShadows()
end 

vgui.Register("yaws.pagnation", PANEL, "DPanel")
--addons/yet_another_warn_system/lua/yaws/ui/layouts/tabs/cl_warnings.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/sh_zfs_config_smoothies.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/autorun/zgw_load.lua:

local DebugPrint = false
local SERVER = SERVER
local CLIENT = CLIENT
local function NicePrint(txt)
    if DebugPrint == false then return end

    if SERVER then
        MsgC(Color(84, 150, 197), txt .. "\n")
    else
        MsgC(Color(193, 193, 98), txt .. "\n")
    end
end

local function PreLoadFile(path)
    if CLIENT then
        include(path)
    else
        AddCSLuaFile(path)
        include(path)
    end
end

local function LoadFiles(path)
    local files, _ = file.Find(path .. "/*", "LUA")

    for _, v in ipairs(files) do
        if string.sub(v, 1, 3) == "sh_" then
            if CLIENT then
                include(path .. "/" .. v)
            else
                AddCSLuaFile(path .. "/" .. v)
                include(path .. "/" .. v)
            end

            NicePrint("// Loaded " .. string.sub(v, 1, 38) .. string.rep(" ", 38 - v:len()) .. " //")
        end
    end

    for _, v in ipairs(files) do
        if string.sub(v, 1, 3) == "cl_" then
            if CLIENT then
                include(path .. "/" .. v)
                NicePrint("// Loaded " .. string.sub(v, 1, 38) .. string.rep(" ", 38 - v:len()) .. " //")
            else
                AddCSLuaFile(path .. "/" .. v)
            end
        elseif string.sub(v, 1, 3) == "sv_" then
            include(path .. "/" .. v)
            NicePrint("// Loaded " .. string.sub(v, 1, 38) .. string.rep(" ", 38 - v:len()) .. " //")
        end
    end
end

local function Initialize()

	PreLoadFile("sh_zgw_config.lua")
    PreLoadFile("sv_zgw_hooks.lua")

	LoadFiles("zgoldwash/util")
	LoadFiles("zgoldwash/util/player")

	LoadFiles("zgoldwash/map")
	LoadFiles("zgoldwash/lantern")
	LoadFiles("zgoldwash/sieve")
	LoadFiles("zgoldwash/shovel")
	LoadFiles("zgoldwash/bucket")
	LoadFiles("zgoldwash/jar")
	LoadFiles("zgoldwash/rubbermat")
	LoadFiles("zgoldwash/goldwasher")


	if DebugPrint == false then
		if SERVER then
			MsgC(Color(84, 150, 197), "Zeros Gold Digger - Loaded\n")
		else
			MsgC(Color(193, 193, 98), "Zeros Gold Digger - Loaded\n")
		end
	end
end

timer.Simple(0, function()
    Initialize()
end)

--addons/zeros_methlab_1.6.4/lua/autorun/zmlab_load.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/zmlab/cl/zmlab_fonts.lua:
if not CLIENT then return end

surface.CreateFont("zmlab_font1", {
	font = "Marlett",
	extended = true,
	size = 50,
	weight = 500,
	antialias = true
})

surface.CreateFont("zmlab_font_processing", {
	font = "Marlett",
	extended = true,
	size = 60,
	weight = 500,
	antialias = true
})

surface.CreateFont("zmlab_nextstep", {
	font = "Marlett",
	extended = true,
	size = 40,
	weight = 500,
	antialias = true
})

surface.CreateFont("zmlab_font2", {
	font = "Marlett",
	extended = true,
	size = 40,
	weight = 500,
	antialias = true
})

surface.CreateFont("zmlab_font_info", {
	font = "Marlett",
	extended = true,
	size = 30,
	weight = 500,
	antialias = true
})


surface.CreateFont("zmlab_font3", {
	font = "Marlett",
	extended = true,
	size = 75,
	weight = 500,
	antialias = true
})

surface.CreateFont("zmlab_npc", {
	font = "on meth",
	extended = true,
	size = 50,
	weight = 500,
	antialias = true
})

surface.CreateFont("zmlab_font4", {
	font = "Marlett",
	extended = true,
	size = 100,
	weight = 900,
	antialias = true
})

surface.CreateFont("zmlab_font5", {
	font = "Marlett",
	extended = true,
	size = 15,
	weight = 900,
	antialias = true
})


surface.CreateFont("zmlab_settings_font01", {
	font = "Arial",
	extended = true,
	size = ScreenScale( 12 ),
	weight = ScreenScale( 300 ),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})

surface.CreateFont("zmlab_settings_font02", {
	font = "Arial",
	extended = true,
	size = ScreenScale( 8 ),
	weight = ScreenScale( 5 ),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})

--addons/zeros_retrominer_v2.3.6/lua/autorun/zrms_load.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/zrms/cl/zrmine_fonts.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

if not CLIENT then return end
local defaultFont = "Marlett"

if (system.IsOSX()) then
	defaultFont = "Arial"
end

surface.CreateFont("zrmine_gravelcrate_font1", {
	font = defaultFont,
	extended = true,
	size = 15,
	weight = 1000,
	antialias = true,
	outline = false
})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

surface.CreateFont("zrmine_inserter_font1", {
	font = defaultFont,
	extended = true,
	size = ScreenScale( 100 ),
	weight = ScreenScale( 300 ),
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_pickaxe_font1", {
	font = defaultFont,
	extended = true,
	size = 25,
	weight = 1000,
	antialias = true,
	outline = false
})

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

surface.CreateFont("zrmine_pickaxe_font2", {
	font = defaultFont,
	extended = true,
	size = 20,
	weight = 10000,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_pickaxe_font3", {
	font = defaultFont,
	extended = true,
	size = 18,
	weight = 1,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_pickaxe_font4", {
	font = defaultFont,
	extended = true,
	size = 14,
	weight = 5000,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_npc_font1", {
	font = "Imperial One",
	extended = true,
	size = 50,
	weight = 1000,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_npc_font2", {
	font = defaultFont,
	extended = true,
	size = 30,
	weight = 1000,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_npc_font3", {
	font = defaultFont,
	extended = true,
	size = 15,
	weight = 1000,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_npc_font4", {
	font = defaultFont,
	extended = true,
	size = 15,
	weight = 25,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_mineentrance_font1", {
	font = defaultFont,
	extended = true,
	size = 60,
	weight = 10000,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_mineentrance_font2", {
	font = defaultFont,
	extended = true,
	size = 40,
	weight = 0,
	antialias = true,
	outline = false
})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

surface.CreateFont("zrmine_mineentrance_font3", {
	font = "Imperial One",
	extended = true,
	size = 100,
	weight = 0,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_screen_font1", {
	font = defaultFont,
	extended = true,
	size = 30,
	weight = 1000,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_screen_font2", {
	font = defaultFont,
	extended = true,
	size = 40,
	weight = 5000,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_screen_font3", {
	font = defaultFont,
	extended = true,
	size = 20,
	weight = 5000,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_screen_font4", {
	font = defaultFont,
	extended = true,
	size = 60,
	weight = 5000,
	antialias = true,
	outline = false
})

surface.CreateFont("zrmine_resource_font1", {
	font = defaultFont,
	extended = true,
	size = 40,
	weight = 1000,
	antialias = true
})

surface.CreateFont("zrmine_resource_font2", {
	font = defaultFont,
	extended = true,
	size = 45,
	weight = 1000,
	antialias = true
})


// Config VGUI
surface.CreateFont("zrmine_vgui_font01", {
	font = defaultFont,
	extended = false,
	size = ScreenScale( 10 ),
	weight = ScreenScale( 300 ),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})

surface.CreateFont("zrmine_vgui_font02", {
	font = defaultFont,
	extended = false,
	size = ScreenScale( 15 ),
	weight = ScreenScale( 300 ),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})

surface.CreateFont("zrmine_vgui_font03", {
	font = defaultFont,
	extended = false,
	size = ScreenScale( 10 ),
	weight = ScreenScale( 300 ),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 


surface.CreateFont("zrmine_builder_font1", {
	font = defaultFont,
	extended = true,
	size = ScreenScale(10),
	weight = ScreenScale(3000),
	antialias = true,
	outline = false,
	shadow = false
})

surface.CreateFont("zrmine_builder_font1_shadow", {
	font = defaultFont,
	extended = true,
	size = ScreenScale(10),
	weight = ScreenScale(3000),
	antialias = true,
	outline = false,
	shadow = true,
	blursize = 2,
})

surface.CreateFont("zrmine_settings_font01", {
	font = defaultFont,
	extended = true,
	size = ScreenScale( 12 ),
	weight = ScreenScale( 300 ),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})

surface.CreateFont("zrmine_settings_font02", {
	font = defaultFont,
	extended = true,
	size = ScreenScale( 8 ),
	weight = ScreenScale( 5 ),
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = false,
	outline = false
})

--addons/zeros_trashman_v1.6.3/lua/ztrashman/util/cl_settings.lua:
/*
    Addon id: 
    Version: v1.6.3 (stable)
*/

if not CLIENT then return end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

hook.Add("AddToolMenuCategories", "ztm_CreateCategories", function()
	spawnmenu.AddToolCategory("Options", "ztm_options", "Trashman")
end)

local mainColor = Color(201, 143, 67)
hook.Add("PopulateToolMenu", "ztm_PopulateMenus", function()
	spawnmenu.AddToolMenuOption("Options", "ztm_options", "ztm_Admin_Settings", "Admin Settings", "", "", function(CPanel)
		zclib.Settings.OptionPanel("All", nil, mainColor, zclib.colors["ui02"], CPanel, {
			[1] = {
				name = "Save",
				class = "DButton",
				cmd = "ztm_save_all"
			},
			[2] = {
				name = "Remove",
				class = "DButton",
				cmd = "ztm_remove_all"
			}
		})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

		zclib.Settings.OptionPanel("Trashburners", nil, mainColor, zclib.colors["ui02"], CPanel, {
			[1] = {
				name = "Save",
				class = "DButton",
				cmd = "ztm_trashburner_save"
			},
			[2] = {
				name = "Remove",
				class = "DButton",
				cmd = "ztm_trashburner_remove"
			}
		})

		zclib.Settings.OptionPanel("Recyclers", nil, mainColor, zclib.colors["ui02"], CPanel, {
			[1] = {
				name = "Save",
				class = "DButton",
				cmd = "ztm_recycler_save"
			},
			[2] = {
				name = "Remove",
				class = "DButton",
				cmd = "ztm_recycler_remove"
			}
		})

		zclib.Settings.OptionPanel("Buyermachines", nil, mainColor, zclib.colors["ui02"], CPanel, {
			[1] = {
				name = "Save",
				class = "DButton",
				cmd = "ztm_buyermachine_save"
			},
			[2] = {
				name = "Remove",
				class = "DButton",
				cmd = "ztm_buyermachine_remove"
			}
		})

		zclib.Settings.OptionPanel("Leafpiles", nil, mainColor, zclib.colors["ui02"], CPanel, {
			[1] = {
				name = "Save",
				class = "DButton",
				cmd = "ztm_leafpile_save"
			},
			[2] = {
				name = "Refresh",
				class = "DButton",
				cmd = "ztm_leafpile_refresh"
			},
			[3] = {
				name = "Remove",
				class = "DButton",
				cmd = "ztm_leafpile_remove"
			}
		})
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

		zclib.Settings.OptionPanel("Manholes", nil, mainColor, zclib.colors["ui02"], CPanel, {
			[1] = {
				name = "Save",
				class = "DButton",
				cmd = "ztm_manhole_save"
			},
			[2] = {
				name = "Remove",
				class = "DButton",
				cmd = "ztm_manhole_remove"
			}
		})

		zclib.Settings.OptionPanel("Trash Spawns", nil, mainColor, zclib.colors["ui02"], CPanel, {
			[1] = {
				name = "Save",
				class = "DButton",
				cmd = "ztm_trash_save"
			},
			[2] = {
				name = "Remove",
				class = "DButton",
				cmd = "ztm_trash_remove"
			}
		})
	end)
end)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--lua/advdupe2/file_browser.lua:
return gluapack()()
--lua/advdupe2/sh_codec.lua:
--[[
	Title: Adv. Dupe 2 Codec

	Desc: Dupe encoder/decoder.

	Author: emspike

	Version: 2.0
]]

local REVISION = 5
AdvDupe2.CodecRevision = REVISION
AdvDupe2.MaxDupeSize = 32e6 -- 32 MB

include( "sh_codec_legacy.lua" )
AddCSLuaFile( "sh_codec_legacy.lua" )

local pairs = pairs
local type = type
local error = error
local Vector = Vector
local Angle = Angle
local format = string.format
local char = string.char
local byte = string.byte
local sub = string.sub
local gsub = string.gsub
local find = string.find
local gmatch = string.gmatch
local match = string.match
local concat = table.concat
local compress = util.Compress
local decompress = util.Decompress

--[[
	Name:	GenerateDupeStamp
	Desc:	Generates an info table.
	Params:	<player> ply
	Return:	<table> stamp
]]
function AdvDupe2.GenerateDupeStamp(ply)
	local stamp = {}
	stamp.name = ply:GetName()
	stamp.time = os.date("%I:%M %p")
	stamp.date = os.date("%d %B %Y")
	stamp.timezone = os.date("%z")
	hook.Call("AdvDupe2_StampGenerated",GAMEMODE,stamp)
	return stamp
end

local function makeInfo(tbl)
	local info = ""
	for k, v in pairs(tbl) do
		info = concat{info,k,"\1",v,"\1"}
	end
	return info.."\2"
end

local AD2FF = "AD2F%s\n%s\n%s"

local tables, buff

local function noserializer() end

local enc = {}
for i = 1, 255 do enc[i] = noserializer end

local function isArray(tbl)
	local ret = true
	local m = 0

	for k, v in pairs(tbl) do
		m = m + 1
		if k ~= m or enc[TypeID(v)] == noserializer then
			ret = false
			break
		end
	end

	return ret
end

local function write(obj)
	enc[TypeID(obj)](obj)
end

local len, tables, tablesLookup

enc[TYPE_TABLE] = function(obj) --table
	if not tablesLookup[obj] then
		tables = tables + 1
		tablesLookup[obj] = tables
	else
		buff:WriteByte(247)
		buff:WriteShort(tablesLookup[obj])
		return
	end

	if isArray(obj) then
		buff:WriteByte(254)
		for i, v in pairs(obj) do
			write(v)
		end
	else
		buff:WriteByte(255)
		for k, v in pairs(obj) do
			if(enc[TypeID(k)] ~= noserializer and enc[TypeID(v)] ~= noserializer) then
				write(k)
				write(v)
			end
		end
	end
	buff:WriteByte(246)
end

enc[TYPE_BOOL] = function(obj) --boolean
	buff:WriteByte(obj and 253 or 252)
end

enc[TYPE_NUMBER] = function(obj) --number
	buff:WriteByte(251)
	buff:WriteDouble(obj)
end

enc[TYPE_VECTOR] = function(obj) --vector
	buff:WriteByte(250)
	buff:WriteDouble(obj.x)
	buff:WriteDouble(obj.y)
	buff:WriteDouble(obj.z)
end

enc[TYPE_ANGLE] = function(obj) --angle
	buff:WriteByte(249)
	buff:WriteDouble(obj.p)
	buff:WriteDouble(obj.y)
	buff:WriteDouble(obj.r)
end

enc[TYPE_STRING] = function(obj) --string
	len = #obj
	if len < 246 then
		buff:WriteByte(len)
		buff:Write(obj)
	else
		buff:WriteByte(248)
		buff:WriteULong(len)
		buff:Write(obj)
	end
end

local function error_nodeserializer()
	buff:Seek(buff:Tell()-1)
	error(format("Couldn't find deserializer for type {typeid:%d}!", buff:ReadByte()))
end

local reference = 0
local read4, read5

do --Version 4
	local dec = {}
	for i = 1, 255 do dec[i] = error_nodeserializer end

	local function read()
		local tt = buff:ReadByte()
		if not tt then
			error("Expected value, got EOF!")
		end
		if tt == 0 then
			return nil
		end
		return dec[tt]()
	end
	read4 = read

	dec[255] = function() --table
		local t = {}
		local k
		reference = reference + 1
		local ref = reference
		repeat
			k = read()
			if k ~= nil then
				t[k] = read()
			end
		until (k == nil)
		tables[ref] = t
		return t
	end

	dec[254] = function() --array
		local t = {}
		local k = 0
		local v
		reference = reference + 1
		local ref = reference
		repeat
			k = k + 1
			v = read()
			if(v ~= nil) then
				t[k] = v
			end

		until (v == nil)
		tables[ref] = t
		return t
	end

	dec[253] = function()
		return true
	end
	dec[252] = function()
		return false
	end
	dec[251] = function()
		return buff:ReadDouble()
	end
	dec[250] = function()
		return Vector(buff:ReadDouble(),buff:ReadDouble(),buff:ReadDouble())
	end
	dec[249] = function()
		return Angle(buff:ReadDouble(),buff:ReadDouble(),buff:ReadDouble())
	end
	dec[248] = function() --null-terminated string
		local start = buff:Tell()
		local slen = 0

		while buff:ReadByte() ~= 0 do
			slen = slen + 1
		end

		buff:Seek(start)

		local retv = buff:Read(slen)
		if(not retv) then retv="" end
		buff:ReadByte()

		return retv
	end
	dec[247] = function() --table reference
		reference = reference + 1
		return tables[buff:ReadShort()]
	end

	for i = 1, 246 do dec[i] = function() return buff:Read(i) end end
end

do --Version 5
	local dec = {}
	for i = 1, 255 do dec[i] = error_nodeserializer end

	local function read()
		local tt = buff:ReadByte()
		if not tt then
			error("Expected value, got EOF!")
		end
		return dec[tt]()
	end
	read5 = read

	dec[255] = function() --table
		local t = {}
		reference = reference + 1
		tables[reference] = t

		for k in read do
			t[k] = read()
		end

		return t
	end

	dec[254] = function() --array
		local t = {}
		reference = reference + 1
		tables[reference] = t

		local k = 1
		for v in read do
			t[k] = v
			k = k + 1
		end

		return t
	end

	dec[253] = function()
		return true
	end
	dec[252] = function()
		return false
	end
	dec[251] = function()
		return buff:ReadDouble()
	end
	dec[250] = function()
		return Vector(buff:ReadDouble(),buff:ReadDouble(),buff:ReadDouble())
	end
	dec[249] = function()
		return Angle(buff:ReadDouble(),buff:ReadDouble(),buff:ReadDouble())
	end
	dec[248] = function() -- Length>246 string
		local slen = buff:ReadULong()
		local retv = buff:Read(slen)
		if(not retv) then retv = "" end
		return retv
	end
	dec[247] = function() --table reference
		return tables[buff:ReadShort()]
	end
	dec[246] = function() --nil
		return
	end

	for i = 1, 245 do dec[i] = function() return buff:Read(i) end end

	dec[0] = function() return "" end
end

local function serialize(tbl)
	tables = 0
	tablesLookup = {}

	buff = file.Open("ad2temp.txt", "wb", "DATA")
	if not buff then error("Failed to open file data/ad2temp.txt for writing!") end
	write(tbl)
	buff:Close()

	buff = file.Open("ad2temp.txt","rb","DATA")
	if not buff then error("Failed to open file data/ad2temp.txt for reading!") end
	local ret = buff:Read(buff:Size())
	buff:Close()
	return ret
end


local function deserialize(str, read)

	if(str == nil) then
		error("File could not be decompressed!")
		return {}
	end

	tables = {}
	reference = 0
	buff = file.Open("ad2temp.txt","wb","DATA")
	if not buff then error("Failed to open file data/ad2temp.txt for writing!") end
	buff:Write(str)
	buff:Flush()
	buff:Close()

	buff = file.Open("ad2temp.txt","rb", "DATA")
	if not buff then error("Failed to open file data/ad2temp.txt for reading!") end
	local success, tbl = pcall(read)
	buff:Close()

	if success then
		return tbl
	else
		error(tbl)
	end
end

--[[
	Name:	Encode
	Desc:	Generates the string for a dupe file with the given data.
	Params:	<table> dupe, <table> info, <function> callback, <...> args
	Return:	runs callback(<string> encoded_dupe, <...> args)
]]
function AdvDupe2.Encode(dupe, info, callback, ...)
	local encodedTable = compress(serialize(dupe))
	info.check = "\r\n\t\n"
	info.size = #encodedTable

	callback(AD2FF:format(char(REVISION), makeInfo(info), encodedTable),...)
end

--seperates the header and body and converts the header to a table
local function getInfo(str)
	local last = str:find("\2")
	if not last then
		error("Attempt to read AD2 file with malformed info block!")
	end
	local info = {}
	local ss = str:sub(1, last - 1)
	for k, v in ss:gmatch("(.-)\1(.-)\1") do
		info[k] = v
	end

	if info.check ~= "\r\n\t\n" then
		if info.check == "\10\9\10" then
			error("Detected AD2 file corrupted in file transfer (newlines homogenized)(when using FTP, transfer AD2 files in image/binary mode, not ASCII/text mode)!")
		else
			error("Attempt to read AD2 file with malformed info block!")
		end
	end
	return info, str:sub(last+2)
end

--decoders for individual versions go here
local versions = {}

versions[1] = AdvDupe2.LegacyDecoders[1]
versions[2] = AdvDupe2.LegacyDecoders[2]

versions[3] = function(encodedDupe)
	encodedDupe = encodedDupe:Replace("\r\r\n\t\r\n", "\t\t\t\t")
	encodedDupe = encodedDupe:Replace("\r\n\t\n", "\t\t\t\t")
	encodedDupe = encodedDupe:Replace("\r\n", "\n")
	encodedDupe = encodedDupe:Replace("\t\t\t\t", "\r\n\t\n")
	return versions[4](encodedDupe)
end

versions[4] = function(encodedDupe)
	local info, dupestring = getInfo(encodedDupe:sub(7))
	return deserialize(decompress(dupestring, AdvDupe2.MaxDupeSize), read4), info
end

versions[5] = function(encodedDupe)
	local info, dupestring = getInfo(encodedDupe:sub(7))
	return deserialize(decompress(dupestring, AdvDupe2.MaxDupeSize), read5), info
end

function AdvDupe2.CheckValidDupe(dupe, info)
	if not dupe.HeadEnt then return false, "Missing HeadEnt table" end
	if not dupe.Entities then return false, "Missing Entities table" end
	if not dupe.Constraints then return false, "Missing Constraints table" end
	if not dupe.HeadEnt.Z then return false, "Missing HeadEnt.Z" end
	if not dupe.HeadEnt.Pos then return false, "Missing HeadEnt.Pos" end
	if not dupe.HeadEnt.Index then return false, "Missing HeadEnt.Index" end
	if not dupe.Entities[dupe.HeadEnt.Index] then return false, "Missing HeadEnt index ["..dupe.HeadEnt.Index.."] from Entities table" end
	for key, data in pairs(dupe.Entities) do
		if not data.PhysicsObjects then return false, "Missing PhysicsObject table from Entity ["..key.."]["..data.Class.."]["..data.Model.."]" end
		if not data.PhysicsObjects[0] then return false, "Missing PhysicsObject[0] table from Entity ["..key.."]["..data.Class.."]["..data.Model.."]" end
		if info.ad1 then -- Advanced Duplicator 1
			if not data.PhysicsObjects[0].LocalPos then return false, "Missing PhysicsObject[0].LocalPos from Entity ["..key.."]["..data.Class.."]["..data.Model.."]" end
			if not data.PhysicsObjects[0].LocalAngle then return false, "Missing PhysicsObject[0].LocalAngle from Entity ["..key.."]["..data.Class.."]["..data.Model.."]" end
		else -- Advanced Duplicator 2
			if not data.PhysicsObjects[0].Pos then return false, "Missing PhysicsObject[0].Pos from Entity ["..key.."]["..data.Class.."]["..data.Model.."]" end
			if not data.PhysicsObjects[0].Angle then return false, "Missing PhysicsObject[0].Angle from Entity ["..key.."]["..data.Class.."]["..data.Model.."]" end
		end
	end
	return true, dupe
end

--[[
	Name:	Decode
	Desc:	Generates the table for a dupe from the given string. Inverse of Encode
	Params:	<string> encodedDupe, <function> callback, <...> args
	Return:	runs callback(<boolean> success, <table/string> tbl, <table> info)
]]
function AdvDupe2.Decode(encodedDupe)

	local sig, rev = encodedDupe:match("^(....)(.)")

	if not rev then
		return false, "Malformed dupe (wtf <5 chars long)!"
	end

	rev = rev:byte()

	if sig ~= "AD2F" then
		if sig == "[Inf" then --legacy support, ENGAGE (AD1 dupe detected)
			local success, tbl, info, moreinfo = pcall(AdvDupe2.LegacyDecoders[0], encodedDupe)

			if success then
				info.ad1 = true
				info.size = #encodedDupe
				info.revision = 0

				local index = tonumber(moreinfo.Head) or (istable(tbl.Entities) and next(tbl.Entities))
				if not index then return false, "Missing head index" end
				local pos
				if isstring(moreinfo.StartPos) then
					local spx,spy,spz = moreinfo.StartPos:match("^(.-),(.-),(.+)$")
					pos = Vector(tonumber(spx) or 0, tonumber(spy) or 0, tonumber(spz) or 0)
				else
					pos = Vector()
				end
				local z
				if isstring(moreinfo.HoldPos) then
					z = (tonumber(moreinfo.HoldPos:match("^.-,.-,(.+)$")) or 0)*-1
				else
					z = 0
				end
				tbl.HeadEnt = {
					Index = index,
					Pos = pos,
					Z = z
				}
			else
				ErrorNoHalt(tbl)
			end

			if success then
				success, tbl = AdvDupe2.CheckValidDupe(tbl, info)
			end

			return success, tbl, info, moreinfo
		else
			return false, "Unknown duplication format!"
		end
	elseif rev > REVISION then
		return false, format("Newer codec needed. (have rev %u, need rev %u) Update Advdupe2.",REVISION,rev)
	elseif rev < 1 then
		return false, format("Attempt to use an invalid format revision (rev %d)!", rev)
	else
		local success, tbl, info = pcall(versions[rev], encodedDupe)

		if success then
			success, tbl = AdvDupe2.CheckValidDupe(tbl, info)
		end
		if success then
			info.revision = rev
		end

		return success, tbl, info
	end
end

if CLIENT then

	concommand.Add("advdupe2_to_json", function(_,_,arg)
		if not arg[1] then print("Need AdvDupe2 file name argument!") return end
		local readFileName = "advdupe2/"..arg[1]
		local writeFileName = "advdupe2/"..string.StripExtension(arg[1])..".json"

		local readFile = file.Open(readFileName, "rb", "DATA")
		if not readFile then print("File could not be read or found! ("..readFileName..")") return end
		local readData = readFile:Read(readFile:Size())
		readFile:Close()
		local ok, tbl = AdvDupe2.Decode(readData)
		local writeFile = file.Open(writeFileName, "wb", "DATA")
		if not writeFile then print("File could not be written! ("..writeFileName..")") return end
		writeFile:Write(util.TableToJSON(tbl))
		writeFile:Close()
		print("File written! ("..writeFileName..")")
	end)

	concommand.Add("advdupe2_from_json", function(_,_,arg)
		if not arg[1] then print("Need json file name argument!") return end
		local readFileName = "advdupe2/"..arg[1]
		local writeFileName = "advdupe2/"..string.StripExtension(arg[1])..".txt"

		local readFile = file.Open(readFileName, "rb", "DATA")
		if not readFile then print("File could not be read or found! ("..readFileName..")") return end
		local readData = readFile:Read(readFile:Size())
		readFile:Close()

		AdvDupe2.Encode(util.JSONToTable(readData), {}, function(data)
			local writeFile = file.Open(writeFileName, "wb", "DATA")
			if not writeFile then print("File could not be written! ("..writeFileName..")") return end
			writeFile:Write(data)
			writeFile:Close()
			print("File written! ("..writeFileName..")")
		end)
	end)

end



--addons/bb__polisdestek/lua/autorun/client/cl_officerdown.lua:
local sounds = {
	"npc/metropolice/vo/11-99officerneedsassistance.wav",
	"npc/metropolice/takedown.wav",
	"npc/metropolice/vo/backup.wav",
	"npc/metropolice/vo/backmeupImout.wav"
}

local cvar = CreateClientConVar("officerdown_show", 1)
local icondelay = CreateClientConVar("officerdown_removedelay", 45)
local deaths = {}
local pings = {}
local delete = Material("icon16/exclamation.png")
local ping = Material("icon16/transmit.png")
local black = Color(10, 10, 10, 200)

local function AddOfficerHook()
	hook.Add("HUDPaint", "CPLocation", function()
		if !LocalPlayer():Alive() then return end
		if !cvar:GetBool() then return end

		for index, posi in pairs(deaths) do
			local point = posi:ToScreen()
			local msg = "Polis hayatini kaybetti!"
			surface.SetDrawColor(255,255,255)
			surface.SetMaterial(delete)
			surface.DrawTexturedRect(point.x - 10, point.y - 20, 20, 20)
			draw.SimpleTextOutlined(msg, "Trebuchet24",point.x, point.y - 40, color_white, TEXT_ALIGN_CENTER, nil, 1, black)
		end

		for pindex, pposi in pairs(pings) do
			local ppoint = pposi:ToScreen()
			local msg = "Polise destek lazim!"
			surface.SetDrawColor(255,255,255)
			surface.SetMaterial(ping)
			surface.DrawTexturedRect(ppoint.x - 10, ppoint.y - 20, 20, 20)
			draw.SimpleTextOutlined(msg, "Trebuchet24",ppoint.x, ppoint.y - 40, color_white, TEXT_ALIGN_CENTER, nil, 1, black)
		end
	end)
end

hook.Add("OnPlayerChangedTeam", "CPLocation.AddOfficerHook", function(ply, before, after)
	if GAMEMODE.CivilProtection[after] then
		AddOfficerHook()
	elseif GAMEMODE.CivilProtection[before] then
		hook.Remove("HUDPaint", "CPLocation")
	end
end)

net.Receive("CPLocation", function( len, pl )
	local ply = net.ReadEntity()
	local pos = net.ReadVector()
	local typ = net.ReadString()

	if pl == LocalPlayer() then
		return
	end
	
	if IsValid(ply) then 
		if cvar:GetBool() then
			surface.PlaySound(sounds[math.random(#sounds)])
		end
		
		local index = ply:EntIndex()
		
		if typ == "cpdown" then			
			deaths[ply] = pos
			timer.Create("PoliceDeath_Remove"..index, icondelay:GetInt(), 1, function()
				deaths[ply] = nil
			end)
		end
		
		if typ == "cpping" then
			pings[ply] = pos			
			timer.Create("PolicePing_Remove"..index, icondelay:GetInt(), 1, function()
				pings[ply] = nil
			end)
		end
	end
end)

--addons/partysystem/lua/autorun/client/cl_partyhud.lua:
return gluapack()()
--addons/permaprops/lua/permaprops/cl_menu.lua:
surface.CreateFont( "pp_font", {
	font = "Arial",
	size = 20,
	weight = 700,
	shadow = false
} )

local function pp_open_menu()

	local Len = net.ReadFloat()
	local Data = net.ReadData( Len )
	local UnCompress = util.Decompress( Data )
	local Content = util.JSONToTable( UnCompress )

 	local Main = vgui.Create( "DFrame" )
	Main:SetSize( 600, 355 )
	Main:Center()
	Main:SetTitle("")
	Main:SetVisible( true )
	Main:SetDraggable( true )
	Main:ShowCloseButton( true )
	Main:MakePopup()
	Main.Paint = function(self)

		draw.RoundedBox( 0, 0, 0, self:GetWide(), self:GetTall(), Color(155, 155, 155, 220) )
		surface.SetDrawColor( 17, 148, 240, 255 )
		surface.DrawOutlinedRect( 0, 0, self:GetWide(), self:GetTall() )	

		draw.RoundedBox( 0, 0, 0, self:GetWide(), 25, Color(17, 148, 240, 200) )
		surface.SetDrawColor( 17, 148, 240, 255 )
		surface.DrawOutlinedRect( 0, 0, self:GetWide(), 25 )
		draw.DrawText( "PermaProps Config", "pp_font", 10, 2.2, Color(255, 255, 255, 255), TEXT_ALIGN_LEFT )

	end

	local BSelect
	local PSelect

	local MainPanel = vgui.Create( "DPanel", Main )
	MainPanel:SetPos( 190, 51 )
	MainPanel:SetSize( 390, 275 )
	MainPanel.Paint = function( self )
		surface.SetDrawColor( 50, 50, 50, 200 ) 
		surface.DrawRect( 0, 0, self:GetWide(), self:GetTall() )
		surface.DrawOutlinedRect(0, 15, self:GetWide(), 40)
	end
	PSelect = MainPanel

	local MainLabel2 = vgui.Create("DLabel", MainPanel)
	MainLabel2:SetFont("pp_font")
	MainLabel2:SetPos(80, 80) 
	MainLabel2:SetColor(Color(50, 50, 50, 255)) 
	MainLabel2:SetText("There are ".. ( Content.MProps or 0 ) .." props on this map.\n\nThere are ".. ( Content.TProps or 0 ) .." props in the DB.") 
	MainLabel2:SizeToContents()

	local RemoveMapProps = vgui.Create( "DButton", MainPanel )
	RemoveMapProps:SetText( " Clear map props " )
	RemoveMapProps:SetFont("pp_font")
	RemoveMapProps:SetSize( 370, 30)
	RemoveMapProps:SetPos( 10, 160 )
	RemoveMapProps:SetTextColor( Color( 50, 50, 50, 255 ) )
	RemoveMapProps.DoClick = function()
		net.Start("pp_info_send")
			net.WriteTable({CMD = "CLR_MAP"})
		net.SendToServer()
	end
	RemoveMapProps.Paint = function(self)
		surface.SetDrawColor(50, 50, 50, 255)
		surface.DrawOutlinedRect(0, 0, self:GetWide(), self:GetTall())
	end

	local ClearMapProps = vgui.Create( "DButton", MainPanel )
	ClearMapProps:SetText( " Clear map props in the DB " )
	ClearMapProps:SetFont("pp_font")
	ClearMapProps:SetSize( 370, 30)
	ClearMapProps:SetPos( 10, 200 )
	ClearMapProps:SetTextColor( Color( 50, 50, 50, 255 ) )
	ClearMapProps.DoClick = function()

		Derma_Query("Are you sure you want clear map props in the db ?\nYou can't undo this action !", "PermaProps 4.0", "Yes", function() net.Start("pp_info_send") net.WriteTable({CMD = "DEL_MAP"}) net.SendToServer() end, "Cancel")

	end
	ClearMapProps.Paint = function(self)
		surface.SetDrawColor(50, 50, 50, 255)
		surface.DrawOutlinedRect(0, 0, self:GetWide(), self:GetTall())
	end

	local ClearAllProps = vgui.Create( "DButton", MainPanel )
	ClearAllProps:SetText( " Clear all props in the DB " )
	ClearAllProps:SetFont("pp_font")
	ClearAllProps:SetSize( 370, 30)
	ClearAllProps:SetPos( 10, 240 )
	ClearAllProps:SetTextColor( Color( 50, 50, 50, 255 ) )
	ClearAllProps.DoClick = function()

		Derma_Query("Are you sure you want clear all props in the db ?\nYou can't undo this action !", "PermaProps 4.0", "Yes", function() net.Start("pp_info_send") net.WriteTable({CMD = "DEL_ALL"}) net.SendToServer() end, "Cancel")

	end
	ClearAllProps.Paint = function(self)
		surface.SetDrawColor(50, 50, 50, 255)
		surface.DrawOutlinedRect(0, 0, self:GetWide(), self:GetTall())
	end

	local BMain = vgui.Create("DButton", Main)
	BSelect = BMain
	BMain:SetText("Main")
	BMain:SetFont("pp_font")
	BMain:SetSize(160, 50)
	BMain:SetPos(15, 27 + 25)
	BMain:SetTextColor( Color( 255, 255, 255, 255 ) )
	BMain.PaintColor = Color(17, 148, 240, 100)
	BMain.Paint = function(self)

		draw.RoundedBox(0, 0, 0, self:GetWide(), self:GetTall(), self.PaintColor)
		surface.SetDrawColor(17, 148, 240, 255)
		surface.DrawOutlinedRect(0, 0, self:GetWide(), self:GetTall())

	end
	BMain.DoClick = function( self )

		if BSelect then BSelect.PaintColor = Color(0, 0, 0, 0) end
		BSelect = self
		self.PaintColor = Color(17, 148, 240, 100)

		if PSelect then PSelect:Hide() end
		MainPanel:Show()
		PSelect = MainPanel

	end

	local ConfigPanel = vgui.Create( "DPanel", Main )
	ConfigPanel:SetPos( 190, 51 )
	ConfigPanel:SetSize( 390, 275 )
	ConfigPanel.Paint = function( self )
		surface.SetDrawColor( 50, 50, 50, 200 ) 
		surface.DrawRect( 0, 0, self:GetWide(), self:GetTall() )
	end
	ConfigPanel:Hide()

	local CheckCustom = vgui.Create( "DCheckBoxLabel", ConfigPanel )
	CheckCustom:SetPos( 5, 30 )
	CheckCustom:SetText( "Custom permissions" )
	CheckCustom:SetValue( 0 )
	CheckCustom:SizeToContents()
	CheckCustom:SetTextColor( Color( 0, 0, 0, 255) )
	CheckCustom:SetDisabled( true )

	local GroupsList = vgui.Create( "DComboBox", ConfigPanel )
	GroupsList:SetPos( 5, 5 )
	GroupsList:SetSize( 125, 20 )
	GroupsList:SetValue( "Select a group..." )

	local CheckBox1 = vgui.Create( "DCheckBoxLabel", ConfigPanel )
	CheckBox1:SetPos( 150, 10 )
	CheckBox1:SetText( "Menu" )
	CheckBox1:SizeToContents()
	CheckBox1:SetTextColor( Color( 0, 0, 0, 255) )
	CheckBox1:SetDisabled( true )
	CheckBox1.OnChange = function(Self, Value)

		net.Start("pp_info_send")
			net.WriteTable({CMD = "VAR", Val = Value, Data = "Menu", Name = GroupsList:GetValue()})
		net.SendToServer()

	end

	local CheckBox2 = vgui.Create( "DCheckBoxLabel", ConfigPanel )
	CheckBox2:SetPos( 150, 30 )
	CheckBox2:SetText( "Edit permissions" )
	CheckBox2:SizeToContents()
	CheckBox2:SetTextColor( Color( 0, 0, 0, 255) )
	CheckBox2:SetDisabled( true )
	CheckBox2.OnChange = function(Self, Value)

		net.Start("pp_info_send")
			net.WriteTable({CMD = "VAR", Val = Value, Data = "Permissions", Name = GroupsList:GetValue()})
		net.SendToServer()

	end

	local CheckBox3 = vgui.Create( "DCheckBoxLabel", ConfigPanel )
	CheckBox3:SetPos( 150, 50 )
	CheckBox3:SetText( "Physgun permaprops" )
	CheckBox3:SizeToContents()
	CheckBox3:SetTextColor( Color( 0, 0, 0, 255) )
	CheckBox3:SetDisabled( true )
	CheckBox3.OnChange = function(Self, Value)

		net.Start("pp_info_send")
			net.WriteTable({CMD = "VAR", Val = Value, Data = "Physgun", Name = GroupsList:GetValue()})
		net.SendToServer()

	end

	local CheckBox4 = vgui.Create( "DCheckBoxLabel", ConfigPanel )
	CheckBox4:SetPos( 150, 70 )
	CheckBox4:SetText( "Tool permaprops" )
	CheckBox4:SizeToContents()
	CheckBox4:SetTextColor( Color( 0, 0, 0, 255) )
	CheckBox4:SetDisabled( true )
	CheckBox4.OnChange = function(Self, Value)

		net.Start("pp_info_send")
			net.WriteTable({CMD = "VAR", Val = Value, Data = "Tool", Name = GroupsList:GetValue()})
		net.SendToServer()

	end

	local CheckBox5 = vgui.Create( "DCheckBoxLabel", ConfigPanel )
	CheckBox5:SetPos( 150, 90 )
	CheckBox5:SetText( "Property permaprops" )
	CheckBox5:SizeToContents()
	CheckBox5:SetTextColor( Color( 0, 0, 0, 255) )
	CheckBox5:SetDisabled( true )
	CheckBox5.OnChange = function(Self, Value)

		net.Start("pp_info_send")
			net.WriteTable({CMD = "VAR", Val = Value, Data = "Property", Name = GroupsList:GetValue()})
		net.SendToServer()

	end

	local CheckBox6 = vgui.Create( "DCheckBoxLabel", ConfigPanel )
	CheckBox6:SetPos( 150, 110 )
	CheckBox6:SetText( "Save props" )
	CheckBox6:SizeToContents()
	CheckBox6:SetTextColor( Color( 0, 0, 0, 255) )
	CheckBox6:SetDisabled( true )
	CheckBox6.OnChange = function(Self, Value)

		net.Start("pp_info_send")
			net.WriteTable({CMD = "VAR", Val = Value, Data = "Save", Name = GroupsList:GetValue()})
		net.SendToServer()

	end

	local CheckBox7 = vgui.Create( "DCheckBoxLabel", ConfigPanel )
	CheckBox7:SetPos( 150, 130 )
	CheckBox7:SetText( "Delete permaprops" )
	CheckBox7:SizeToContents()
	CheckBox7:SetTextColor( Color( 0, 0, 0, 255) )
	CheckBox7:SetDisabled( true )
	CheckBox7.OnChange = function(Self, Value)

		net.Start("pp_info_send")
			net.WriteTable({CMD = "VAR", Val = Value, Data = "Delete", Name = GroupsList:GetValue()})
		net.SendToServer()

	end

	local CheckBox8 = vgui.Create( "DCheckBoxLabel", ConfigPanel )
	CheckBox8:SetPos( 150, 150 )
	CheckBox8:SetText( "Update permaprops" )
	CheckBox8:SizeToContents()
	CheckBox8:SetTextColor( Color( 0, 0, 0, 255) )
	CheckBox8:SetDisabled( true )
	CheckBox8.OnChange = function(Self, Value)

		net.Start("pp_info_send")
			net.WriteTable({CMD = "VAR", Val = Value, Data = "Update", Name = GroupsList:GetValue()})
		net.SendToServer()

	end

	GroupsList.OnSelect = function( panel, index, value )
		
		CheckCustom:SetDisabled( false )
		CheckCustom:SetChecked( Content.Permissions[value].Custom )

		CheckBox1:SetDisabled( !Content.Permissions[value].Custom )
		CheckBox1:SetChecked( Content.Permissions[value].Menu )
		CheckBox2:SetDisabled( !Content.Permissions[value].Custom )
		CheckBox2:SetChecked( Content.Permissions[value].Permissions )
		CheckBox3:SetDisabled( !Content.Permissions[value].Custom )
		CheckBox3:SetChecked( Content.Permissions[value].Physgun )
		CheckBox4:SetDisabled( !Content.Permissions[value].Custom )
		CheckBox4:SetChecked( Content.Permissions[value].Tool )
		CheckBox5:SetDisabled( !Content.Permissions[value].Custom )
		CheckBox5:SetChecked( Content.Permissions[value].Property )
		CheckBox6:SetDisabled( !Content.Permissions[value].Custom )
		CheckBox6:SetChecked( Content.Permissions[value].Save )
		CheckBox7:SetDisabled( !Content.Permissions[value].Custom )
		CheckBox7:SetChecked( Content.Permissions[value].Delete )
		CheckBox8:SetDisabled( !Content.Permissions[value].Custom )
		CheckBox8:SetChecked( Content.Permissions[value].Update )

	end

	for k, v in pairs(Content.Permissions) do
		
		GroupsList:AddChoice(k)

	end

	CheckCustom.OnChange = function(Self, Value)

		CheckBox1:SetDisabled( !Value )
		CheckBox2:SetDisabled( !Value )
		CheckBox3:SetDisabled( !Value )
		CheckBox4:SetDisabled( !Value )
		CheckBox5:SetDisabled( !Value )
		CheckBox6:SetDisabled( !Value )
		CheckBox7:SetDisabled( !Value )
		CheckBox8:SetDisabled( !Value )

		net.Start("pp_info_send")
			net.WriteTable({CMD = "VAR", Val = Value, Data = "Custom", Name = GroupsList:GetValue()})
		net.SendToServer()

	end

	local BConfig = vgui.Create("DButton", Main)
	BConfig:SetText("Configuration")
	BConfig:SetFont("pp_font")
	BConfig:SetSize(160, 50)
	BConfig:SetPos(15, 71 + 55)
	BConfig:SetTextColor( Color( 255, 255, 255, 255 ) )
	BConfig.PaintColor = Color(0, 0, 0, 0)
	BConfig.Paint = function(self)
		draw.RoundedBox(0, 0, 0, self:GetWide(), self:GetTall(), self.PaintColor)
		surface.SetDrawColor(17, 148, 240, 255)
		surface.DrawOutlinedRect(0, 0, self:GetWide(), self:GetTall())
	end
	BConfig.DoClick = function( self )

		if BSelect then BSelect.PaintColor = Color(0, 0, 0, 0) end
		BSelect = self
		self.PaintColor = Color(17, 148, 240, 100)

		if PSelect then PSelect:Hide() end
		ConfigPanel:Show()
		PSelect = ConfigPanel

	end

	local PropsPanel = vgui.Create( "DPanel", Main )
	PropsPanel:SetPos( 190, 51 )
	PropsPanel:SetSize( 390, 275 )
	PropsPanel.Paint = function( self )
		surface.SetDrawColor( 50, 50, 50, 200 ) 
		surface.DrawRect( 0, 0, self:GetWide(), self:GetTall() )
	end
	PropsPanel:Hide()

	local PropsList = vgui.Create( "DListView", PropsPanel )
	PropsList:SetMultiSelect( false )
	PropsList:SetSize( 390, 275 )
	local ColID = PropsList:AddColumn( "ID" )
	local ColEnt = PropsList:AddColumn( "Entity" )
	local ColMdl = PropsList:AddColumn( "Model" )
	ColID:SetMinWidth(50)
	ColID:SetMaxWidth(50)
	PropsList.Paint = function( self )
		surface.SetDrawColor(17, 148, 240, 255)
	end

	PropsList.OnRowRightClick = function(panel, line)

		local MenuButtonOptions = DermaMenu()
	    MenuButtonOptions:AddOption("Draw entity", function() 

	    	if not LocalPlayer().DrawPPEnt or not istable(LocalPlayer().DrawPPEnt) then LocalPlayer().DrawPPEnt = {} end

	    	if LocalPlayer().DrawPPEnt[PropsList:GetLine(line):GetValue(1)] and LocalPlayer().DrawPPEnt[PropsList:GetLine(line):GetValue(1)]:IsValid() then return end

		    local ent = ents.CreateClientProp( Content.PropsList[PropsList:GetLine(line):GetValue(1)].Model ) 
			ent:SetPos( Content.PropsList[PropsList:GetLine(line):GetValue(1)].Pos )
			ent:SetAngles( Content.PropsList[PropsList:GetLine(line):GetValue(1)].Angle )

			LocalPlayer().DrawPPEnt[PropsList:GetLine(line):GetValue(1)] = ent

		end )

		if LocalPlayer().DrawPPEnt and LocalPlayer().DrawPPEnt[PropsList:GetLine(line):GetValue(1)] then
			
			MenuButtonOptions:AddOption("Stop Drawing", function() 

				LocalPlayer().DrawPPEnt[PropsList:GetLine(line):GetValue(1)]:Remove()
				LocalPlayer().DrawPPEnt[PropsList:GetLine(line):GetValue(1)] = nil

			end )

		end

		if LocalPlayer().DrawPPEnt != nil and istable(LocalPlayer().DrawPPEnt) and table.Count(LocalPlayer().DrawPPEnt) > 0 then

			MenuButtonOptions:AddOption("Stop Drawing All", function() 

				for k, v in pairs(LocalPlayer().DrawPPEnt) do
					
					LocalPlayer().DrawPPEnt[k]:Remove()
					LocalPlayer().DrawPPEnt[k] = nil

				end

			end )
			
		end

	    MenuButtonOptions:AddOption("Remove", function()

	    	net.Start("pp_info_send")
	    		net.WriteTable({CMD = "DEL", Val = PropsList:GetLine(line):GetValue(1)})
	    	net.SendToServer()

	    	if LocalPlayer().DrawPPEnt and LocalPlayer().DrawPPEnt[PropsList:GetLine(line):GetValue(1)] != nil then

	    		LocalPlayer().DrawPPEnt[PropsList:GetLine(line):GetValue(1)]:Remove()
				LocalPlayer().DrawPPEnt[PropsList:GetLine(line):GetValue(1)] = nil
				
	    	end

	    	PropsList:RemoveLine(line)


		end )
	    MenuButtonOptions:Open()
		
	end

	for k, v in pairs(Content.PropsList) do
		
		PropsList:AddLine(k, v.Class, v.Model)

	end

	local BProps = vgui.Create("DButton", Main)
	BProps:SetText("Props List")
	BProps:SetFont("pp_font")
	BProps:SetSize(160, 50)
	BProps:SetPos(15, 115 + 85)
	BProps:SetTextColor( Color( 255, 255, 255, 255 ) )
	BProps.PaintColor = Color(0, 0, 0, 0)
	BProps.Paint = function(self)
		draw.RoundedBox(0, 0, 0, self:GetWide(), self:GetTall(), self.PaintColor)
		surface.SetDrawColor(17, 148, 240, 255)
		surface.DrawOutlinedRect(0, 0, self:GetWide(), self:GetTall())
	end
	BProps.DoClick = function( self )

		if BSelect then BSelect.PaintColor = Color(0, 0, 0, 0) end
		BSelect = self
		self.PaintColor = Color(17, 148, 240, 100)

		if PSelect then PSelect:Hide() end
		PropsPanel:Show()
		PSelect = PropsPanel

	end

	local AboutPanel = vgui.Create( "DPanel", Main )
	AboutPanel:SetPos( 190, 51 )
	AboutPanel:SetSize( 390, 275 )
	AboutPanel.Paint = function( self )
		surface.SetDrawColor( 50, 50, 50, 200 ) 
		surface.DrawRect( 0, 0, self:GetWide(), self:GetTall() )
		surface.DrawOutlinedRect(0, 15, self:GetWide(), 40)
	end
	AboutPanel:Hide()

	local AboutLabel = vgui.Create("DLabel", AboutPanel)
	AboutLabel:SetFont("pp_font")
	AboutLabel:SetPos(140, 25) 
	AboutLabel:SetColor(Color(50, 50, 50, 255)) 
	AboutLabel:SetText("PermaProps 4.0") 
	AboutLabel:SizeToContents()

	local BAbout = vgui.Create("DButton", Main)
	BAbout:SetText("About")
	BAbout:SetFont("pp_font")
	BAbout:SetSize(160, 50)
	BAbout:SetPos(15, 159 + 115)
	BAbout:SetTextColor( Color( 255, 255, 255, 255 ) )
	BAbout.PaintColor = Color(0, 0, 0, 0)
	BAbout.Paint = function(self)
		draw.RoundedBox(0, 0, 0, self:GetWide(), self:GetTall(), self.PaintColor)
		surface.SetDrawColor(17, 148, 240, 255)
		surface.DrawOutlinedRect(0, 0, self:GetWide(), self:GetTall())
	end
	BAbout.DoClick = function( self )
	
		if BSelect then BSelect.PaintColor = Color(0, 0, 0, 0) end
		BSelect = self
		self.PaintColor = Color(17, 148, 240, 100)

		if PSelect then PSelect:Hide() end
		AboutPanel:Show()
		PSelect = AboutPanel

	end

end
net.Receive("pp_open_menu", pp_open_menu)
--addons/vape_swep/lua/autorun/client/cl_vapeswep.lua:
return gluapack()()
--addons/executioner/lua/autorun/client/executioner_base_panel.lua:
    --[[
        Script: Executioner
        Developer: ted.lua
        Profile: http://steamcommunity.com/id/tedlua/
    ]]

    local PANEL, materials ={}, { ['cross'] = Material( 'cross.png' ) }

    function PANEL:Init()
        self.Start = CurTime()
        self.Reject = false
        self:SetSize( 900, 600 )
        self:Center()
        self:SetTitle( '' )
        self:SetDraggable( false )
        self:ShowCloseButton( false )
    end

    function PANEL:Deploy( render, block_popup )
        if render then Graphics.CreateIconObject( self, materials[ 'cross' ], self:GetWide() - 28, 10, 16, 16, true ) end
        if not block_popup then self:MakePopup() else self:SetVisible( true ) end
    end

    function PANEL:Paint()
        Derma_DrawBackgroundBlur( self, self.Start )
        Graphics.DrawRect( 0, 0, self:GetWide(), self:GetTall(), Color( 32, 32, 32, Executioner.Config.GlobalAlpha ) )
        Graphics.BlurMenu( self, 10, 15, 240 )
    end

    vgui.Register( 'base_panel', PANEL, 'DFrame' )

--addons/executioner/lua/autorun/client/executioner_other.lua:
return gluapack()()
--addons/partysystem/lua/autorun/client/partyfonts.lua:
return gluapack()()
--addons/partysystem/lua/autorun/client/partyframe.lua:
return gluapack()()
--addons/partysystem/lua/autorun/client/partytabs.lua:
--GUI base created by billy
--https://scriptfodder.com/users/view/76561198040894045/scripts

local PANEL = {}

function PANEL:Init()
	self.Tabs = {}
	self.CurrentlySelected = 1
end

function PANEL:Paint()
	surface.SetDrawColor(Color(26,26,26))
	surface.DrawRect(0,0,self:GetWide(),self:GetTall())
end

function PANEL:AddTab(tabname,tabpanel)
	local newTab = vgui.Create("PartyButton",self)
	table.insert(self.Tabs,newTab)
	newTab.OpenPanel = tabpanel
	if (IsValid(tabpanel)) then
		tabpanel:SetMouseInputEnabled(false)
		tabpanel.Paint = function() end
		local tll = 0
		if (IsValid(self:GetParent())) then
			tll = ((self:GetParent():GetTall() - 24) - 35)
			tabpanel:SetParent(self:GetParent())
		else
			tll = (ScrH() - 24 - 35)
			tabpanel:SetParent(NULL)
		end
		tabpanel:SetSize(self:GetWide(),tll)
		tabpanel:SetPos(-tabpanel:GetWide(),24 + 35)
	end

	newTab.myID = #self.Tabs
	newTab:SetText("")
	newTab.Paint = function() end
	newTab:SetSize(self:GetWide() / #self.Tabs,self:GetTall())
	newTab:SetPos((#self.Tabs - 1) * (self:GetWide() / #self.Tabs))
	newTab.DoClick = function()
		self:SelectTab(newTab.myID)
	end

	newTab.TextLbl = vgui.Create("DLabel",newTab)
	newTab.TextLbl:SetTextColor(Color(255,255,255))
	newTab.TextLbl:SetText(tabname)
	newTab.TextLbl:SetFont("roboto16")
	newTab.TextLbl:SizeToContents()
	newTab.TextLbl:Center()

	for i,v in pairs(self.Tabs) do
		v:SetSize(self:GetWide() / #self.Tabs,self:GetTall())
		v:SetPos((i - 1) * (self:GetWide() / #self.Tabs),0)
		v.TextLbl:Center()
	end

	if (not IsValid(self.TabBar)) then
		self.TabBar = vgui.Create("DPanel",self)
		self.TabBar.Paint = function(self)
			surface.SetDrawColor(Color(102,204,179))
			surface.DrawRect(0,0,self:GetWide(),self:GetTall())
		end
		self.TabBar:SetSize(self:GetWide() / #self.Tabs,3)
		self.TabBar:SetPos(0,newTab:GetTall() - 3)
	else
		self.TabBar:SetSize(self:GetWide() / #self.Tabs,3)
		self.TabBar:SetPos(0,newTab:GetTall() - 3)
	end

	if (IsValid(tabpanel)) then
		local x,y = tabpanel:GetPos()
		tabpanel:SetPos((#self.Tabs - 1) * tabpanel:GetWide(),y)
	end

	if (IsValid(tabpanel)) then
		if (tabpanel.onbLogsSetup ~= nil) then
			tabpanel.onbLogsSetup()
		end
	end

	return newTab
end

function PANEL:GetSelectedTabID()
	return self.CurrentlySelected or -1
end
function PANEL:GetTabFromID(id)
	return self.Tabs[id] or NULL
end

function PANEL:SelectTab(id)
	local theTab = self.Tabs[id]
	if (self:GetSelectedTabID() ~= id) then
		for i,v in pairs(self.Tabs) do
			if (IsValid(v.OpenPanel)) then
				v.OpenPanel:Stop()
				local _,y = v.OpenPanel:GetPos()
				v.OpenPanel:MoveTo((i - id) * v.OpenPanel:GetWide(),y,0.5)
			end
		end

		self.TabBar:Stop()
		local x,y = self.TabBar:GetPos()
		self.TabBar:MoveTo((id - 1) * (self:GetWide() / #self.Tabs),y,0.5)
	end
	self.CurrentlySelected = id

	return theTab.OpenPanel
end

derma.DefineControl("PartyTabs",nil,PANEL,"DPanel")
--addons/partysystem/lua/autorun/client/partytextbox.lua:
return gluapack()()
--lua/vgui/bvgui_v2.lua:
return gluapack()()
--lua/vgui/bvgui/blankpanel.lua:
return gluapack()()
--lua/vgui/bvgui/frame.lua:
return gluapack()()
--lua/vgui/bvgui/httplogo.lua:
return gluapack()()
--lua/vgui/bvgui/infobar.lua:
return gluapack()()
--lua/vgui/bvgui/player_tooltip.lua:
return gluapack()()
--lua/vgui/bvgui/renderscene.lua:
return gluapack()()
--lua/vgui/bvgui/textentry.lua:
return gluapack()()
--lua/vgui/bvgui/textentry.lua:
local PANEL = {}

function PANEL:Init()
	self:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 14))
	self:ApplySchemeSettings()
	self:SetTextColor(bVGUI.COLOR_BLACK)
end

local focused_col = Color(0,120,255,255)
function PANEL:Paint(w,h)
	surface.SetDrawColor(255,255,255,255)
	surface.DrawRect(0,0,w,h)
	
	if (self._Valid) then
		surface.SetDrawColor(0,255,0,100)
		surface.DrawRect(0,0,w,h)
	elseif (self._Invalid) then
		surface.SetDrawColor(255,0,0,100)
		surface.DrawRect(0,0,w,h)
	end

	if (self:HasFocus()) then
		surface.SetDrawColor(0,120,255,255)
		surface.DrawOutlinedRect(0,0,w,h)
	end
	if (self:GetPlaceholderText() and #string.Trim(self:GetText()) == 0) then
		local oldtext = self:GetText()
		self:SetText(self:GetPlaceholderText())
		self:DrawTextEntryText(self:GetPlaceholderColor(), self:GetHighlightColor(), self:GetCursorColor())
		self:SetText(oldtext)
	else
		self:DrawTextEntryText(self:GetTextColor(), self:GetHighlightColor(), self:GetCursorColor())
	end
end

function PANEL:OnGetFocus()
	self.StoredValue = self:GetValue()
end

function PANEL:OnLoseFocus()
	if (self.OnValueChange and self:GetValue() ~= self.StoredValue) then
		self:OnValueChange(self:GetValue())
	end
end

function PANEL:SetInvalid(invalid)
	self._Invalid = invalid
	self._Valid = nil
end

function PANEL:SetValid(valid)
	self._Valid = valid
	self._Invalid = nil
end

function PANEL:ResetValidity()
	self._Valid, self._Invalid = nil
end

derma.DefineControl("bVGUI.TextEntry", nil, PANEL, "DTextEntry")

local PANEL = {}

function PANEL:Init()
	self.TextEntry = vgui.Create("bVGUI.TextEntry", self)
	self.TextEntry:SetWide(350)
end

function PANEL:SetLabel(text)
	self.Label = vgui.Create("DLabel", self)
	self.Label:SetContentAlignment(4)
	self.Label:SetFont(bVGUI.FONT(bVGUI.FONT_CIRCULAR, "REGULAR", 16))
	self.Label:SetTextColor(bVGUI.COLOR_WHITE)
	self.Label:SetText(text)
	self.Label:SizeToContents()

	self:PerformSizing()
end

function PANEL:SetHelpText(text)
	self.HelpLabel = vgui.Create("DLabel", self)
	self.HelpLabel:SetContentAlignment(4)
	self.HelpLabel:SetFont(bVGUI.FONT(bVGUI.FONT_RUBIK, "REGULAR", 16))
	self.HelpLabel:SetTextColor(bVGUI.COLOR_WHITE)
	self.HelpLabel:SetText(text)
	self.HelpLabel:SetWide(500)
	self.HelpLabel:SetWrap(true)
	self.HelpLabel:SetAutoStretchVertical(true)
	self.HelpLabel:SetTextColor(Color(200,200,200))
	function self.HelpLabel:PerformLayout()
		self:GetParent():PerformSizing()
		self:InvalidateParent(true)
	end
end

function PANEL:PerformSizing()
	local y = self.TextEntry:GetTall()
	if (IsValid(self.Label)) then
		y = y + self.Label:GetTall() + 10
	end
	if (IsValid(self.HelpLabel)) then
		y = y + self.HelpLabel:GetTall() + 10
	end
	self:SetTall(y)
end

function PANEL:PerformLayout()
	self.Label:AlignTop(0)
	self.HelpLabel:AlignBottom(0)
	self.TextEntry:AlignTop(self.Label:GetTall() + 10)
end

derma.DefineControl("bVGUI.TextEntryContainer", nil, PANEL, "bVGUI.BlankPanel")
--lua/vgui/gas_workshop_item.lua:
return gluapack()()
--lua/vgui/openpermissions_checkbox.lua:
return gluapack()()
--lua/vgui/stackerpreseteditor.lua:
--[[--------------------------------------------------------------------------
-- 	Namespace Tables
--------------------------------------------------------------------------]]--

local PANEL = {}

--[[--------------------------------------------------------------------------
-- 	Localized Functions & Variables
--------------------------------------------------------------------------]]--

local vgui = vgui
local pairs = pairs
local AccessorFunc = AccessorFunc
local GetConVarString = GetConVarString

--[[--------------------------------------------------------------------------
--	Namespace Functions
--------------------------------------------------------------------------]]--

AccessorFunc( PANEL, "m_ConCommands", "ConCommands" )

--[[--------------------------------------------------------------------------
--
--	PANEL:Add()
--
--]]--
function PANEL:Add()
	if ( not self.m_ConVars ) then return end
	
	local ToName = self.txtName:GetValue()
	if ( not ToName or ToName == "" ) then return end
	
	-- Todo, Handle name collision
	local tabValues = {}
	
	for k, v in pairs( self.m_ConVars ) do
		tabValues[ v.CCmd ] = GetConVarString( v.CVar )
	end
		
	presets.Add( self.m_strType, ToName, tabValues )
	self:Update()
	self.PresetList:SelectByName( ToName )
	self.txtName:SetText( "" )
	
	if ( self.m_PresetControl ) then
		self.m_PresetControl:Update()
	end
end

vgui.Register( "StackerPresetEditor", PANEL, "PresetEditor" )
--gamemodes/darkrp/gamemode/libraries/sh_cami.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/libraries/tablecheck.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/hungermod/sh_interface.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/hud/cl_interface.lua:
DarkRP.stub{
    name = "drawPlayerInfo",
    description = "Draw player info above a player's head (name, health job). Override this function to disable or change drawing behaviour in DarkRP.",
    parameters = {
    },
    returns = {
    },
    metatable = DarkRP.PLAYER
}

DarkRP.stub{
    name = "drawWantedInfo",
    description = "Draw the wanted info above a player's head. Override this to disable or change the drawing of wanted info above players' heads.",
    parameters = {
    },
    returns = {
    },
    metatable = DarkRP.PLAYER
}

--gamemodes/darkrp/gamemode/modules/hitmenu/cl_interface.lua:
DarkRP.openHitMenu = DarkRP.stub{
    name = "openHitMenu",
    description = "Open the menu that requests a hit.",
    parameters = {
        {
            name = "hitman",
            description = "The hitman to request the hit to.",
            type = "Player",
            optional = false
        }
    },
    returns = {
    },
    metatable = DarkRP
}

DarkRP.PLAYER.drawHitInfo = DarkRP.stub{
    name = "drawHitInfo",
    description = "Start drawing the hit information above a hitman.",
    parameters = {
    },
    returns = {
    },
    metatable = DarkRP.PLAYER
}

DarkRP.PLAYER.stopHitInfo = DarkRP.stub{
    name = "stopHitInfo",
    description = "Stop drawing the hit information above a hitman.",
    parameters = {
    },
    returns = {
    },
    metatable = DarkRP.PLAYER
}

--gamemodes/darkrp/gamemode/modules/animations/sh_interface.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/libraries/disjointset.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/tipjar/cl_frame.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/positions/sh_commands.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/logging/cl_init.lua:
local function AdminLog(um)
    local colour = Color(um:ReadShort(), um:ReadShort(), um:ReadShort())
    local text = DarkRP.deLocalise(um:ReadString() .. "\n")

    MsgC(Color(255, 0, 0), "-", colour, text)

    hook.Call("DarkRPLogPrinted", nil, text, colour)
end
usermessage.Hook("DRPLogMsg", AdminLog)
DarkRP.hookStub{
    name = "DarkRPLogPrinted",
    description = "Called when a log has printed in console.",
    realm = "Client",
    parameters = {
        {
            name = "text",
            description = "The actual log.",
            type = "string"
        },
        {
            name = "colour",
            description = "The colour of the printed log.",
            type = "Color"
        }
    },
    returns = {}
}

--gamemodes/darkrp/gamemode/modules/hitmenu/cl_init.lua:
local localplayer
local hudText
local textCol1, textCol2 = Color(0, 0, 0, 200), Color(128, 30, 30, 255)
local plyMeta = FindMetaTable("Player")
local activeHitmen = {}
local postPlayerDraw
local minHitDistanceSqr = GM.Config.minHitDistance * GM.Config.minHitDistance

--[[---------------------------------------------------------------------------
Interface functions
---------------------------------------------------------------------------]]
function plyMeta:drawHitInfo()
    activeHitmen[self] = true

    hook.Add("PostPlayerDraw", "drawHitInfo", postPlayerDraw)
end

function plyMeta:stopHitInfo()
    activeHitmen[self] = nil
    if table.IsEmpty(activeHitmen) then
        hook.Remove("PostPlayerDraw", "drawHitInfo")
    end
end

--[[---------------------------------------------------------------------------
Hooks
---------------------------------------------------------------------------]]
function DarkRP.hooks:onHitAccepted(hitman, target, customer)
    if not IsValid(hitman) then return end
    hitman:drawHitInfo()
end

function DarkRP.hooks:onHitCompleted(hitman, target, customer)
    if not IsValid(hitman) then return end
    hitman:stopHitInfo()
end

function DarkRP.hooks:onHitFailed(hitman, target, reason)
    if not IsValid(hitman) then return end
    hitman:stopHitInfo()
end

hook.Add("EntityRemoved", "hitmenu", function(ent)
    activeHitmen[ent] = nil
end)
/*
hook.Add("HUDPaint", "DrawHitOption", function()
    localplayer = localplayer or LocalPlayer()
    hudText = hudText or GAMEMODE.Config.hudText
    local x, y
    local ply = localplayer:GetEyeTrace().Entity

    if IsValid(ply) and ply:IsPlayer() and ply:isHitman() and not ply:hasHit() and localplayer:GetPos():DistToSqr(ply:GetPos()) < minHitDistanceSqr then
        x, y = ScrW() / 2, ScrH() / 2 + 30

        draw.DrawNonParsedText(hudText, "Roboto20", x + 1, y + 1, textCol1, 1)
        draw.DrawNonParsedText(hudText, "Roboto20", x, y, textCol2, 1)
    end

    if localplayer:isHitman() and localplayer:hasHit() and IsValid(localplayer:getHitTarget()) then
        x, y = chat.GetChatBoxPos()
        local text = DarkRP.getPhrase("current_hit", localplayer:getHitTarget():Nick())
        draw.DrawNonParsedText(text, "HUDNumber5", x + 1, y + 1, textCol1, 0)
        draw.DrawNonParsedText(text, "HUDNumber5", x, y, textCol2, 0)
    end
end)
*/
local lastKeyPress = 0
hook.Add("KeyPress", "openHitMenu", function(ply, key)
    if key ~= IN_USE or lastKeyPress > CurTime() - 0.2 then return end
    lastKeyPress = CurTime()
    localplayer = localplayer or LocalPlayer()
    local hitman = localplayer:GetEyeTrace().Entity

    if not IsValid(hitman) or not hitman:IsPlayer() or not hitman:isHitman() or localplayer:GetPos():DistToSqr(hitman:GetPos()) > minHitDistanceSqr then return end

    local canRequest, message = hook.Call("canRequestHit", DarkRP.hooks, hitman, ply, nil, hitman:getHitPrice())

    if not canRequest then
        GAMEMODE:AddNotify(DarkRP.getPhrase("cannot_request_hit", message or ""), 1, 4)
        surface.PlaySound("buttons/lightswitch2.wav")
        return
    end

    DarkRP.openHitMenu(hitman)
end)
/*
hook.Add("InitPostEntity", "HitmanMenu", function()
    for _, v in ipairs(player.GetAll()) do
        if IsValid(v) and v:isHitman() and v:hasHit() then
            v:drawHitInfo()
        end
    end
end)

function postPlayerDraw(ply)
    if not activeHitmen[ply] then return end
    local pos, ang = ply:GetShootPos(), ply:EyeAngles()
    ang.p = 0
    ang:RotateAroundAxis(ang:Up(), 90)
    ang:RotateAroundAxis(ang:Forward(), 90)

    cam.Start3D2D(pos, ang, 0.3)
        draw.DrawNonParsedText(GAMEMODE.Config.hitmanText, "Roboto20", 1, -100, textCol1, 1)
        draw.DrawNonParsedText(GAMEMODE.Config.hitmanText, "Roboto20", 0, -101, textCol2, 1)
    cam.End3D2D()
end
*/
--[[---------------------------------------------------------------------------
Networking
---------------------------------------------------------------------------]]
net.Receive("onHitAccepted", function(len)
    hook.Call("onHitAccepted", DarkRP.hooks, net.ReadEntity(), net.ReadEntity(), net.ReadEntity())
end)

net.Receive("onHitCompleted", function(len)
    hook.Call("onHitCompleted", DarkRP.hooks, net.ReadEntity(), net.ReadEntity(), net.ReadEntity())
end)

net.Receive("onHitFailed", function(len)
    hook.Call("onHitFailed", DarkRP.hooks, net.ReadEntity(), net.ReadEntity(), net.ReadString())
end)

--gamemodes/darkrp/gamemode/modules/base/sh_entityvars.lua:
local maxId = 0
local DarkRPVars = {}
local DarkRPVarById = {}

-- the amount of bits assigned to the value that determines which DarkRPVar we're sending/receiving
local DARKRP_ID_BITS = 8
local UNKNOWN_DARKRPVAR = 255 -- Should be equal to 2^DARKRP_ID_BITS - 1
DarkRP.DARKRP_ID_BITS = DARKRP_ID_BITS

function DarkRP.registerDarkRPVar(name, writeFn, readFn)
    maxId = maxId + 1

    -- UNKNOWN_DARKRPVAR is reserved for unknown values
    if maxId >= UNKNOWN_DARKRPVAR then DarkRP.error(string.format("Too many DarkRPVar registrations! DarkRPVar '%s' triggered this error", name), 2) end

    DarkRPVars[name] = {id = maxId, name = name, writeFn = writeFn, readFn = readFn}
    DarkRPVarById[maxId] = DarkRPVars[name]
end

-- Unknown values have unknown types and unknown identifiers, so this is sent inefficiently
local function writeUnknown(name, value)
    net.WriteUInt(UNKNOWN_DARKRPVAR, 8)
    net.WriteString(name)
    net.WriteType(value)
end

-- Read the value of a DarkRPVar that was not registered
local function readUnknown()
    return net.ReadString(), net.ReadType(net.ReadUInt(8))
end

local warningsShown = {}
local function warnRegistration(name)
    if warningsShown[name] then return end
    warningsShown[name] = true

    DarkRP.errorNoHalt(string.format([[Warning! DarkRPVar '%s' wasn't registered!
        Please contact the author of the DarkRP Addon to fix this.
        Until this is fixed you don't need to worry about anything. Everything will keep working.
        It's just that registering DarkRPVars would make DarkRP faster.]], name), 4)
end

function DarkRP.writeNetDarkRPVar(name, value)
    local DarkRPVar = DarkRPVars[name]
    if not DarkRPVar then
        warnRegistration(name)

        return writeUnknown(name, value)
    end

    net.WriteUInt(DarkRPVar.id, DARKRP_ID_BITS)
    return DarkRPVar.writeFn(value)
end

function DarkRP.writeNetDarkRPVarRemoval(name)
    local DarkRPVar = DarkRPVars[name]
    if not DarkRPVar then
        warnRegistration(name)

        net.WriteUInt(UNKNOWN_DARKRPVAR, 8)
        net.WriteString(name)
        return
    end

    net.WriteUInt(DarkRPVar.id, DARKRP_ID_BITS)
end

function DarkRP.readNetDarkRPVar()
    local DarkRPVarId = net.ReadUInt(DARKRP_ID_BITS)
    local DarkRPVar = DarkRPVarById[DarkRPVarId]

    if DarkRPVarId == UNKNOWN_DARKRPVAR then
        local name, value = readUnknown()

        return name, value
    end

    local val = DarkRPVar.readFn(value)

    return DarkRPVar.name, val
end

function DarkRP.readNetDarkRPVarRemoval()
    local id = net.ReadUInt(DARKRP_ID_BITS)
    return id == 255 and net.ReadString() or DarkRPVarById[id].name
end

-- The money is a double because it accepts higher values than Int and UInt, which are undefined for >32 bits
DarkRP.registerDarkRPVar("money",         net.WriteDouble, net.ReadDouble)
DarkRP.registerDarkRPVar("salary",        fp{fn.Flip(net.WriteInt), 32}, fp{net.ReadInt, 32})
DarkRP.registerDarkRPVar("rpname",        net.WriteString, net.ReadString)
DarkRP.registerDarkRPVar("job",           net.WriteString, net.ReadString)
DarkRP.registerDarkRPVar("HasGunlicense", net.WriteBit, fc{tobool, net.ReadBit})
DarkRP.registerDarkRPVar("Arrested",      net.WriteBit, fc{tobool, net.ReadBit})
DarkRP.registerDarkRPVar("wanted",        net.WriteBit, fc{tobool, net.ReadBit})
DarkRP.registerDarkRPVar("wantedReason",  net.WriteString, net.ReadString)
DarkRP.registerDarkRPVar("agenda",        net.WriteString, net.ReadString)

--[[---------------------------------------------------------------------------
RP name override
---------------------------------------------------------------------------]]
local pmeta = FindMetaTable("Player")
pmeta.SteamName = pmeta.SteamName or pmeta.Name
/*
function pmeta:Name()
    if not self:IsValid() then DarkRP.error("Attempt to call Name/Nick/GetName on a non-existing player!", SERVER and 1 or 2) end
    return GAMEMODE.Config.allowrpnames and self:getDarkRPVar("rpname")
        or self:SteamName()
end
*/
pmeta.GetName = pmeta.Name
pmeta.Nick = pmeta.Name

--gamemodes/darkrp/gamemode/modules/base/sh_commands.lua:
DarkRP.declareChatCommand{
    command = "rpname",
    description = "Set your RP name",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "name",
    description = "Set your RP name",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "nick",
    description = "Set your RP name",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "buy",
    description = "Buy a pistol",
    delay = 1.5,
    condition = fn.FAnd {
        fn.Compose{fn.Curry(fn.GetValue, 2)("enablebuypistol"), fn.Curry(fn.GetValue, 2)("Config"), gmod.GetGamemode},
        fn.Compose{fn.Not, fn.Curry(fn.GetValue, 2)("noguns"), fn.Curry(fn.GetValue, 2)("Config"), gmod.GetGamemode}
    }
}

DarkRP.declareChatCommand{
    command = "buyshipment",
    description = "Buy a shipment",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "buyvehicle",
    description = "Buy a vehicle",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "buyammo",
    description = "Purchase ammo",
    delay = 1.5,
    condition = fn.Compose{fn.Not, fn.Curry(fn.GetValue, 2)("noguns"), fn.Curry(fn.GetValue, 2)("Config"), gmod.GetGamemode}
}

DarkRP.declareChatCommand{
    command = "price",
    description = "Set the price of the microwave or gunlab you're looking at",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "setprice",
    description = "Set the price of the microwave or gunlab you're looking at",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "forcerpname",
    description = "Forcefully change a player's RP name",
    delay = 0.5,
    tableArgs = true
}

DarkRP.declareChatCommand{
    command = "freerpname",
    description = "Remove a RP name from the database so a player can use it",
    delay = 1.5
}

--gamemodes/darkrp/gamemode/modules/base/cl_jobmodels.lua:
return gluapack()()
--gamemodes/darkrp/gamemode/modules/base/cl_entityvars.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/sh_glorifiedleveling_config.lua:

--[[ Leveling Configuration ]]--
    GlorifiedLeveling.Config.MAX_XP_MULTIPLIER = 1 -- Multiply the maximum XP to next level here. This is *not* an XP amount multiplier!
    GlorifiedLeveling.Config.MAX_LEVEL = 200 -- The maximum level a player can reach.
    GlorifiedLeveling.Config.CARRY_OVER_XP = true -- Should XP be carried over or set to zero?
--[[ Leveling Configuration ]]--

--[[ Leaderboard Settings ]]--
    GlorifiedLeveling.Config.LEADERBOARD_CACHE_TIME = 120 -- How often should we call the network message to cache the leaderboard on every client?
    GlorifiedLeveling.Config.LEADERBOARD_OPEN_COMMANDS = {
        ["leaderboard"] = true,
        ["levels"] = true
    } -- Which commands should open the leaderboard?
    GlorifiedLeveling.Config.LEADERBOARD_KEY_ENABLED = false -- Should we enable the key to open the leaderboard?
    GlorifiedLeveling.Config.LEADERBOARD_OPEN_KEY = KEY_F9 -- Which key should open the leaderboard?
--[[ Leaderboard Settings End ]]--

--[[ Perk Settings ]]--
    GlorifiedLeveling.Config.LEVELS_UNTIL_GAIN = 2 -- How many levels until the next gain of perks?
    GlorifiedLeveling.Config.POINTS_PER_GAIN = 1 -- How many points should we gain when we obtain new points?
    GlorifiedLeveling.Config.PERK_CONFIG = {
        [GlorifiedLeveling.Perks.Enum.SPEED] = 6, -- What percentage speed should we gain per point in it?
        [GlorifiedLeveling.Perks.Enum.LEAPING] = 3, -- What percentage gravity reduction should we gain per point in it?
        [GlorifiedLeveling.Perks.Enum.ARMOR] = 10, -- How much extra armour should we get on spawn per point in it?
        [GlorifiedLeveling.Perks.Enum.HEALTH] = 10, -- How much extra health should we get on spawn per point in it?
     --   [GlorifiedLeveling.Perks.Enum.LESS_DAMAGE_TAKEN] = 8, -- What percentage less damage should we take per level in it?
        [GlorifiedLeveling.Perks.Enum.MORE_DAMAGE_GIVEN] = 8, -- What percentage more damage should we give per level in it?
    }

    GlorifiedLeveling.Config.PERK_MENU_OPEN_COMMANDS = {
        ["perks"] = true,
        ["perk"] = true,
        ["perkmenu"] = true
    } -- Which commands should open the perk menu?
    GlorifiedLeveling.Config.PERK_MENU_KEY_ENABLED = false -- Should we enable the key to open the perk menu?
    GlorifiedLeveling.Config.PERK_MENU_OPEN_KEY = KEY_T -- Which key should open the perk menu?
--[[ Perk Settings End ]]--

--[[ Integrations Config ]]--
    GlorifiedLeveling.Config.SUPPORT_DARKRP = true -- Should we enable support for DarkRP?
        GlorifiedLeveling.Config.DARKRP_LEVEL_NAME_AT_END = true -- Should we add "- Level x" to the end of job and entity names?
    GlorifiedLeveling.Config.SUPPORT_VENATUSS_HUD_MAKER = false -- Should we enable support for Venatuss' HUD maker?
--[[ Integrations Config End ]]--

--[[ UI Config ]]--
    GlorifiedLeveling.Config.XP_BAR_ENABLED = true -- Set to false to disable the HUD XP bar.
    GlorifiedLeveling.Config.LEVEL_UP_ON_TOP = false -- Should the "Level up!" text be displayed above the bar?

    GlorifiedLeveling.Config.SHOW_BAR_ON_XP_GAIN_ONLY = false -- Should the XP bar only show when the player gets XP or levels up?
    GlorifiedLeveling.Config.SHOW_BAR_KEY = KEY_O -- What key should force the XP bar to show?
    GlorifiedLeveling.Config.SHOW_BAR_ON_MAX_LEVEL_ALWAYS = true -- Should we always show the bar on max level or only when the key is pressed?

    GlorifiedLeveling.Config.LEVEL_UP_SOUND_ENABLED = true -- Should the level up sound be enabled?
    GlorifiedLeveling.Config.LEVEL_UP_SOUND = "glorifiedleveling/level_up.wav" -- What is the sound for when the player levels up?
    GlorifiedLeveling.Config.CONFETTI_ENABLED = true --  Should the confetti effect be enabled?
    GlorifiedLeveling.Config.CONFETTI_SHOOT_TIMER = 2.13 -- How many seconds after the sound plays must the confetti shoot?

    GlorifiedLeveling.Config.MAX_LEVEL_RAINBOW_XP_BAR = true -- Set to true to make the XP bar a rainbow when the player hits the max level.
    GlorifiedLeveling.Config.MAX_LEVEL_RAINBOW_LEVEL_TEXT = true -- Set to true to make the XP bar a rainbow when the player hits the max level.
    GlorifiedLeveling.Config.MAX_LEVEL_RAINBOW_PHYSGUN = true -- Set to true if you want to enable the rainbow physgun for a player that is max level.

    GlorifiedLeveling.Config.XP_BAR_WIDTH = function()
        return ScrH() * 0.7
    end
    GlorifiedLeveling.Config.XP_BAR_WIDTH_OFFSET = function( BarWidth )
        return ScrW() / 2
    end
    GlorifiedLeveling.Config.XP_BAR_HEIGHT_OFFSET = function( BarHeight )
        return 0

        --[[
            If you want the bar at the bottom:
                return ScrH() - BarHeight - 30
            Be sure to set LEVEL_UP_ON_TOP to true.
        ]]--
    end
--[[ UI Config End ]]--

--[[ Multipliers Config ]]--
    GlorifiedLeveling.Config.MULTIPLIER_AMOUNT_CUSTOMFUNC = function( ply ) -- Custom function for setting a player's XP multiplier.
        local highestMultiplier = 0.8
        local specialGroups = {
            ["donator"] = 1.3,
            ["donator+"] = 1.5,
        }
        if specialGroups[ply:GetUserGroup()] then highestMultiplier = specialGroups[ply:GetUserGroup()] end -- Give certain multipliers to certain usergroups.
       -- if os.date( "%A" ) == "Friday" and highestMultiplier < 2 then highestMultiplier = 2 end -- Give x2 on Fridays.
       
        return highestMultiplier
    end
--[[ Multipliers Config End ]]
--addons/glorifiedleveling/lua/glorifiedleveling/libraries/cl_glorifiedleveling_uilib.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/localization/sh_glorifiedleveling_danish.lua:
return gluapack()()
--addons/glorifiedleveling/lua/glorifiedleveling/localization/sh_glorifiedleveling_turkish.lua:

GlorifiedLeveling.i18n.RegisterPhrases( "tr", {
    glDarkTheme = "Karanlık Tema",
    glLevelNotHighEnough = "Bunun için yeterince yüksek seviyede değilsin.",
    glYouReceivedXP = "%s XP kazandınız.",
    glYouReceivedXPKill = "%s XP %s'yı öldürdüğünden dolayı kazandınız.",
    glLevelX = "Seviye %s",
    glLevelUp = "Seviye Atladınız!",
    glAdminMenuLockdown = "SOKAĞA ÇIKMA YASAĞI",
    glAdminMenuPlayers = "OYUNCULAR",
    glPlayersOnline = "Çevrimiçi Oyuncular: %s",
    glSetLevel = "Seviye Ayarla",
    glResetLevel = "Seviye Sıfırla",
    glAddXP = "XP Ekle",
    glConfirmation = "Onayla",
    glYes = "Evet",
    glNo = "Hayır",
    glConfirmationResetLevel = "Bu oyuncunun seviyesini sıfırlamak istiyor musun?",
    glEnterLevel = "Oyuncunun yeni seviyesini aşağıya giriniz.",
    glEnterXP = "Eklemek istediğiniz XP miktarını giriniz.",
    glEnter = "Gir",
    glInvalidAmount = "Geçersiz miktar.",
    glMaxLevel = "Maksimum Seviye",

    -- Leaderboard localization.
    glLeaderboard = "Skor Tahtası",
    glName = "İsim",
    glXP = "XP",
    glLevel = "Seviye",
    glNobodyHere = "Burada kimse yok :(",

    -- Perk localization.
    glSkills = "Özellikler",
    glPoints = "%s Puan",
    glComplete = "Tamamla",

    glHasteBoots = "Hızlandırıcı Botlar",
    glHasteBootsDescription = "Ekstra Hız kazan!",

    glFeralLeaping = "Sıçratıcı Botlar",
    glFeralLeapingDescription = "Daha Yükseğe Zıplama, Daha Az Düşme Hasarı!",

    glIronSkin = "Demir Cilt",
    glIronSkinDescription = "Doğduğunda Ekstra Zırh!",

    glJuggernaut = "Juggernaut",
    glJuggernautDescription = "Doğduğunda Ekstra Can!",

    glBulletAbsorption = "Mermi Soğurması",
    glBulletAbsorptionDescription = "Daha Az Hasar Al!",

    glHighGradeBullets = "Yüksek Kalitede Mermiler",
    glHighGradeBulletsDescription = "Daha Fazla Hasar Ver!",
} )
--addons/glorifiedleveling/lua/glorifiedleveling/modules/ui/leaderboard/cl_glorifiedleveling_leaderboard_leaderlist.lua:
return gluapack()()
--addons/serious_business/lua/darkrp_modules/serious_business/sh_sb_darkrp.lua:
return gluapack()()
--addons/serious_business/lua/darkrp_modules/serious_business/sh_sb_darkrp.lua:

TEAM_SB_OWNER = DarkRP.createJob("İş Adamı", {
    color = Color(165, 22, 29),
	model = {"models/kryptonite/phil_coulson/phil_coulson.mdl"},
    description = [[İş Adamisiniz Altıniza İşçiler tutup Çalıştırabilirsiniz
	
[!] İllegal Biro Kurarsaniz İllegal iş Den Dolayi Polis Yakalayip Tutukluyabilir
[!] Legal +İllegal Büro Karışık Yaparsaniz Polis Tutukladiğinde 2 Biro'yuda Patlatma Hakki Vardır

İsyan Yapamaz
Mug Yapamaz
Raid atamaz
Kindap Yapamaz.]],
    weapons = {"dsr_keys","gmod_tool"},
	max = 1,
	salary = 1200,
	command = "İş adamı41",
	admin = 0,
	vote = false,
	hasLicense = false,
    category = "İllegal",
})

TEAM_USTAISADAMI = DarkRP.createJob("Usta İş Adamı", {
    color = Color(255, 247, 0),
	model = {"models/kryptonite/phil_coulson/phil_coulson.mdl"},
    description = [[İş Adamisiniz Altıniza İşçiler tutup Çalıştırabilirsiniz
	
[!] İllegal Biro Kurarsaniz İllegal iş Den Dolayi Polis Yakalayip Tutukluyabilir
[!] Legal +İllegal Büro Karışık Yaparsaniz Polis Tutukladiğinde 2 Biro'yuda Patlatma Hakki Vardır

İsyan Yapabilir
Mug Yapamaz
Raid atamaz
Kindap Yapamaz.]],
    weapons = {"dsr_keys", "gmod_tool", "arccw_ud_g24"},
	max = 1,
	salary = 1200,
	command = "USTA_ISADAMI",
	admin = 0,
	vote = false,
	hasLicense = false,
    category = "Donator",
	           customCheck = function(ply) 
        return CLIENT or table.HasValue({"donator", "donator+",  "Donator", "helper+", "moderator+", "Helper+", "Moderator+"}, ply:GetUserGroup()) 
    end,
    CustomCheckFailMsg = "Bunu sadece donator alabilir",
})

DarkRP.createCategory{
	name = "İş adamı Ekipmanları",
	categorises = "entities",
	startExpanded = true,
	color = Color(52, 152, 219, 255),
    canSee = function( ply ) return true end,
	sortOrder = 35
}

DarkRP.createCategory{
	name = "Usta İş adamı Ekipmanları",
	categorises = "entities",
	startExpanded = true,
	color = Color(52, 152, 219, 255),
	canSee = function( ply ) return true end,
	sortOrder = 35
}

DarkRP.createEntity("Donater Büro Çalışanları", {
    ent = "sb_wk_seat",
    model = "models/player/group01/male_04.mdl",
    price = 1000,
    max = 10,
    cmd = "bürocalusta",
    category = "Usta İş adamı Ekipmanları",
    allowed = {TEAM_USTAISADAMI}
})

DarkRP.createEntity("Donater Büro Masası", {
    ent = "sb_wk_place",
    model = "models/props_wasteland/controlroom_desk001b.mdl",
    price = 2500,
    max = 10,
    cmd = "büromasausta",
    category = "Usta İş adamı Ekipmanları",
    allowed = {TEAM_USTAISADAMI}
})

DarkRP.createEntity("Büro Çalışanları", {
    ent = "sb_wk_seat",
    model = "models/player/group01/male_04.mdl",
    price = 1000,
    max = 5,
    cmd = "buy_sb_worker",
    category = "İş adamı Ekipmanları",
    allowed = {TEAM_SB_OWNER}
})

DarkRP.createEntity("Büro Masası", {
    ent = "sb_wk_place",
    model = "models/props_wasteland/controlroom_desk001b.mdl",
    price = 2500,
    max = 5,
    cmd = "buy_sb_workplace",
    category = "İş adamı Ekipmanları",
    allowed = {TEAM_SB_OWNER}
})

DarkRP.createEntity("Suç Ekipmanları", {
	ent = "sb_crime_box",
	model = "models/props_junk/cardboard_box003a.mdl",
	price = 400,
	max = 3,
	cmd = "buy_sb_crime_box",
	category = "İş adamı Ekipmanları",
	allowed = {TEAM_SB_OWNER}
})

DarkRP.createEntity("Donater Suç Ekipmanları", {
	ent = "sb_crime_box",
	model = "models/props_junk/cardboard_box003a.mdl",
	price = 400,
	max = 3,
	cmd = "D-buy_sb_crime_box",
	category = "Usta İş adamı Ekipmanları",
	allowed = {TEAM_USTAISADAMI}
})

DarkRP.createEntity("Adalet Ekipmanları", {
	ent = "sb_good_box",
	model = "models/props_junk/cardboard_box003a.mdl",
	price = 400,
	max = 3,
	cmd = "buy_sb_good_box",
	category = "İş adamı Ekipmanları",
	allowed = {TEAM_SB_OWNER}
})

DarkRP.createEntity("Suç Kitabı", {
	ent = "sb_crime_guide",
	model = "models/props_lab/binderredlabel.mdl",
	price = 250,
	max = 3,
	cmd = "buy_sb_crime_guide",
	category = "İş adamı Ekipmanları",
	allowed = {TEAM_SB_OWNER}
})

DarkRP.createEntity("Adalet Kitabı", {
	ent = "sb_good_guide",
	model = "models/props_lab/bindergreenlabel.mdl",
	price = 250,
	max = 3,
	cmd = "buy_sb_good_guide",
	category = "İş adamı Ekipmanları",
	allowed = {TEAM_SB_OWNER}
})

DarkRP.createEntity("Donater Adalet Ekipmanları", {
	ent = "sb_good_box",
	model = "models/props_junk/cardboard_box003a.mdl",
	price = 400,
	max = 5,
	cmd = "D-buy_sb_good_box",
	category = "Usta İş adamı Ekipmanları",
	allowed = {TEAM_USTAISADAMI}
})

DarkRP.createEntity("Donater Suç Kitabı", {
	ent = "sb_crime_guide",
	model = "models/props_lab/binderredlabel.mdl",
	price = 250,
	max = 5,
	cmd = "D-buy_sb_crime_guide",
	category = "Usta İş adamı Ekipmanları",
	allowed = {TEAM_USTAISADAMI}
})

DarkRP.createEntity("Donater Adalet Kitabı", {
	ent = "sb_good_guide",
	model = "models/props_lab/bindergreenlabel.mdl",
	price = 250,
	max = 5,
	cmd = "D-buy_sb_good_guide",
	category = "Usta İş adamı Ekipmanları",
	allowed = {TEAM_USTAISADAMI}
})
--addons/bb_contextmenumenu/lua/darkrp_modules/base/cl_init.lua:
return gluapack()()
--addons/darkrpmodification/lua/darkrp_customthings/jobs.lua:
return gluapack()()
--addons/darkrpmodification/lua/darkrp_customthings/doorgroups.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/localization/sh_glorifiedhandcuffs_german.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/libraries/cl_glorifiedhandcuffs_circleavatar.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/libraries/cl_glorifiedhandcuffs_uilib.lua:

GlorifiedHandcuffs.UI = {}

local lerp = Lerp
function GlorifiedHandcuffs.UI.LerpColor( t, from, to )
    local col = Color( 0, 0, 0 )

    col.r = lerp( t, from.r, to.r )
    col.g = lerp( t, from.g, to.g )
    col.b = lerp( t, from.b, to.b )
    col.a = lerp( t, from.a, to.a )

    return col
end
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/bailmenu/cl_glorifiedhandcuffs_bailmenu_arrestedplayer.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/bailmenu/cl_glorifiedhandcuffs_bailmenu_titlebar.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/hud/cl_glorifiedhandcuffs_handcuffedhud.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/hud/cl_glorifiedhandcuffs_handcuffedhud.lua:

local ply

local ghi18n = GlorifiedHandcuffs.i18n

local themeData = GlorifiedHandcuffs.Themes.GetCurrent().Data

local cuffedMaterial = themeData.Materials.cuffs
local cuffedMaterialBlindfolded = themeData.Materials.cuffs_blindfolded

local breakFreeProgress = 0

local function percentageColor( percentage )
    local red = 255
    local green = 255
    if percentage >= 0 and percentage <= 0.5 then
      green = 510 * percentage
    elseif percentage > 0.5 and percentage <= 1 then
      red = -510 * percentage + 510
    elseif percentage > 1 then
        green = 255
        red = 0
    end
    return Color( red, green, 0 )
end

local hitToFreeLocalization = ghi18n.GetPhrase( "hitToFree" )
local cuffedLocalization = ghi18n.GetPhrase( "cuffed" )
local blindfoldedLocalization = ghi18n.GetPhrase( "blindfolded" )
local gaggedLocalization = ghi18n.GetPhrase( "gagged" )

local hitToFreeText = string.Split( hitToFreeLocalization, "%s" )
surface.SetFont( "GlorifiedHandcuffs.HUD.BreakFree" )
local spamFontW = surface.GetTextSize( hitToFreeText[1] )
local keyFontW = surface.GetTextSize( GlorifiedHandcuffs.Config.BREAK_FREE_KEY_NAME )
local hitToFreeFontW = surface.GetTextSize( hitToFreeLocalization )
local handcuffedFontW = surface.GetTextSize( cuffedLocalization )
local blindfoldedFontW = surface.GetTextSize( blindfoldedLocalization )
local gaggedFontW = surface.GetTextSize( gaggedLocalization )
local scrW = ScrW()
local scrH = ScrH()
local colorBlack = Color( 0, 0, 0 )
local playerBlindfolded

hook.Add( "HUDPaint", "GlorifiedLeveling.HUD.Handcuffed", function()
    if not GlorifiedHandcuffs.IsPlayerHandcuffed( LocalPlayer() ) or not LocalPlayer():Alive() then return end
    if not ply then ply = LocalPlayer() end
    playerBlindfolded = GlorifiedHandcuffs.IsPlayerBlindfolded( LocalPlayer() )
    if playerBlindfolded then
        draw.RoundedBox( 0, 0, 0, scrW, scrH, colorBlack )
    end

    surface.SetMaterial( playerBlindfolded and cuffedMaterialBlindfolded or cuffedMaterial )
    surface.SetDrawColor( 255, 255, 255 )
    surface.DrawTexturedRect( scrW / 2 - 48, 5, 96, 96 )

    surface.SetFont( "GlorifiedHandcuffs.HUD.Handcuffed" )
    draw.RoundedBox( 5, scrW / 2 - ( handcuffedFontW + 15 ) / 2, 106, handcuffedFontW + 15, 30, themeData.Colors.hudCuffedBackgroundColor )
    draw.SimpleText( cuffedLocalization, "GlorifiedHandcuffs.HUD.Handcuffed", scrW / 2, 121, themeData.Colors.hudCuffedBackgroundTextColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

    local extraHeight = 0

    if playerBlindfolded then
        draw.RoundedBox( 5, scrW / 2 - ( blindfoldedFontW + 15 ) / 2, 141, blindfoldedFontW + 15, 30, themeData.Colors.hudCuffedBackgroundColor )
        draw.SimpleText( blindfoldedLocalization, "GlorifiedHandcuffs.HUD.Handcuffed", scrW / 2, 156, themeData.Colors.hudCuffedBackgroundTextColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        extraHeight = extraHeight + 35
    end

    if GlorifiedHandcuffs.IsPlayerGagged( LocalPlayer() ) then
        draw.RoundedBox( 5, scrW / 2 - ( gaggedFontW + 15 ) / 2, 141 + extraHeight, gaggedFontW + 15, 30, themeData.Colors.hudCuffedBackgroundColor )
        draw.SimpleText( gaggedLocalization, "GlorifiedHandcuffs.HUD.Handcuffed", scrW / 2, 156 + extraHeight, themeData.Colors.hudCuffedBackgroundTextColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
        extraHeight = extraHeight + 35
    end

    if not GlorifiedHandcuffs.Config.BREAK_FREE_ENABLED then return end

    draw.RoundedBox( 5, scrW / 2 - ( hitToFreeFontW + 15 ) / 2, 141 + extraHeight, hitToFreeFontW + 15, 35, themeData.Colors.hudBreakFreeBackgroundColor )
    draw.SimpleText( hitToFreeText[1], "GlorifiedHandcuffs.HUD.BreakFree", scrW / 2 - ( hitToFreeFontW + 15 ) / 2 + 15, 158 + extraHeight, themeData.Colors.hudBreakFreeBackgroundTextColor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
    draw.RoundedBox( 6, scrW / 2 - ( hitToFreeFontW + 15 ) / 2 + 10 + spamFontW, 147 + extraHeight, 20, 22, themeData.Colors.hudBreakFreeKeypressBackgroundColor )
    draw.SimpleText( GlorifiedHandcuffs.Config.BREAK_FREE_KEY_NAME, "GlorifiedHandcuffs.HUD.BreakFree", scrW / 2 - ( hitToFreeFontW + 15 ) / 2 + 15 + spamFontW, 158 + extraHeight, themeData.Colors.hudBreakFreeKeypressTextColor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
    draw.SimpleText( hitToFreeText[2], "GlorifiedHandcuffs.HUD.BreakFree", scrW / 2 - ( hitToFreeFontW + 15 ) / 2 + 15 + spamFontW + keyFontW, 158 + extraHeight, themeData.Colors.hudBreakFreeBackgroundTextColor, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

    local breakFreePercent = ( GlorifiedHandcuffs.BreakFreeTotal / GlorifiedHandcuffs.Config.BREAK_FREE_TOTAL )
    breakFreeProgress = Lerp( FrameTime() * 12, breakFreeProgress, breakFreePercent * 300 )
    draw.RoundedBox( 7, scrW / 2 - 300 / 2, 181 + extraHeight, 300, 15, themeData.Colors.hudBreakFreeBackgroundColor )
    render.SetScissorRect( scrW / 2 - 300 / 2, 0, scrW / 2 - 300 / 2 + breakFreeProgress, scrH, true )
    draw.RoundedBox( 7, scrW / 2 - 300 / 2, 181 + extraHeight, 300, 15, percentageColor( breakFreeProgress / 300 ) )
    render.SetScissorRect( 0, 0, scrW, scrH, false )
end )
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/interactionmenu/cl_glorifiedhandcuffs_interactionmenu_panel.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/interactionmenu/cl_glorifiedhandcuffs_interactionmenu_weaponsbox.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/glorifiedhandcuffs/modules/ui/interactionmenu/cl_glorifiedhandcuffs_interactionmenu_weaponsbox_titlebar.lua:

local PANEL = {}

function PANEL:Init()
    self.Theme = self:GetParent().Theme

    self.TitleLabel = vgui.Create( "DLabel", self )
    self.TitleLabel:SetFont( "GlorifiedHandcuffs.InteractionMenu.TitleBar" )
    self.TitleLabel:SetText( "Silahlar" )
    self.TitleLabel:SizeToContents()
    self.TitleLabel:DockMargin( 10, 0, 0, 0 )
    self.TitleLabel:Dock( LEFT )
end

function PANEL:Paint( w, h )
    draw.RoundedBoxEx( 6, 0, 0, w, h, self.Theme.Data.Colors.interactionMenuTitleBarBackgroundColor, true, true, false, false )
end

vgui.Register( "GlorifiedHandcuffs.InteractionMenu.WeaponsBox.TitleBar", PANEL, "Panel" )
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_hud.lua:
local translate = ArcCW.GetTranslation

local function ScreenScaleMulti(input)
    return ScreenScale(input) * ArcCW.ConVars["hud_size"]:GetFloat()
end

local cvar_deadzonex, cvar_deadzoney
local function CopeX()
    if !cvar_deadzonex then cvar_deadzonex = ArcCW.ConVars["hud_deadzone_x"] end
    return cvar_deadzonex:GetFloat() * ScrW() / 2
end

local function CopeY()
    if !cvar_deadzoney then cvar_deadzoney = ArcCW.ConVars["hud_deadzone_y"] end
    return cvar_deadzoney:GetFloat() * ScrH() / 2
end

local function MyDrawText(tbl)
    local x = tbl.x
    local y = tbl.y
    local dontbust = Color(tbl.col.r, tbl.col.g, tbl.col.b, tbl.col.a)
    surface.SetFont(tbl.font)

    if tbl.alpha then
        dontbust.a = tbl.alpha
    else
        dontbust.a = 255
    end

    if tbl.align or tbl.yalign then
        local w, h = surface.GetTextSize(tbl.text)
        if tbl.align == 1 then
            x = x - w
        elseif tbl.align == 2 then
            x = x - (w / 2)
        end
        if tbl.yalign == 1 then
            y = y - h
        elseif tbl.yalign == 2 then
            y = y - h / 2
        end
    end

    if tbl.shadow then
        surface.SetTextColor(Color(0, 0, 0, tbl.alpha or 255))
        surface.SetTextPos(x, y)
        surface.SetFont(tbl.font .. "_Glow")
        surface.DrawText(tbl.text)
    end

    surface.SetTextColor(dontbust)
    surface.SetTextPos(x, y)
    surface.SetFont(tbl.font)
    surface.DrawText(tbl.text)
end

local vhp = 0
local varmor = 0
local vclip = 0
local vreserve = 0
local vclip2 = 0
local vreserve2 = 0
local vubgl = 0
local lastwpn = ""
local lastinfo = {ammo = 0, clip = 0, firemode = "", plus = 0}
local lastinfotime = 0

function SWEP:GetHUDData()
    local data = {
        clip = math.Round(vclip or self:Clip1()),
        ammo = math.Round(vreserve or self:Ammo1()),
        bars = self:GetFiremodeBars(),
        mode = self:GetFiremodeName(),
        ammotype = self.Primary.Ammo,
        ammotype2 = self.Secondary.Ammo,
        heat_enabled        = self:HeatEnabled(),
        heat_name           = translate("ui.heat"),
        heat_level          = self:GetHeat(),
        heat_maxlevel       = self:GetMaxHeat(),
        heat_locked         = self:GetHeatLocked(),
    }

    if data.clip > self:GetCapacity() then
        data.plus = data.clip - self:GetCapacity()
        data.clip = self:GetCapacity()
    end

    local infammo, btmless = self:HasInfiniteAmmo(), self:HasBottomlessClip()
    data.infammo = infammo
    data.btmless = btmless

    if self.PrimaryBash or self:Clip1() == -1 or self:GetCapacity() == 0 or self.Primary.ClipSize == -1 then
        data.clip = "-"
    end
    if self.PrimaryBash then
        data.ammo = "-"
    end

    if self:GetBuff_Override("UBGL") then
        data.clip2 = math.Round(vclip2 or self:Clip2())

        local ubglammo = self:GetBuff_Override("UBGL_Ammo")
        if ubglammo then
            data.ammo2 = tostring(math.Round(vreserve2 or self:GetOwner():GetAmmoCount(ubglammo)))
        end

        if data.clip2 > self:GetBuff_Override("UBGL_Capacity") then
            data.plus2 = (data.clip2 - self:GetBuff_Override("UBGL_Capacity"))
            data.clip2 = self:GetBuff_Override("UBGL_Capacity")
        end
    end

    do
        if infammo then
            data.ammo = btmless and data.ammo or "-"
            data.clip = self.Throwing and "∞" or data.clip
        end
        if btmless then
            data.clip = infammo and "∞" or data.ammo
            data.ammo = "-"
        end

        local ubglammo = self:GetBuff_Override("UBGL_Ammo")
        if ubglammo then
            data.ubgl = self:Clip2() + self:GetOwner():GetAmmoCount(ubglammo)
        end
    end

    data = self:GetBuff_Hook("Hook_GetHUDData", data) or data

    return data
end

local t_states = {
    [0] = "STATE_IDLE",
    [1] = "STATE_SIGHTS",
    [2] = "STATE_SPRINT",
    [3] = "STATE_DISABLE",
    [4] = "STATE_CUSTOMIZE",
    [5] = "STATE_BIPOD"
}

local mr = math.Round
local bird = Material("arccw/hud/really cool bird.png", "mips smooth")
local statlocked = Material("arccw/hud/locked_32.png", "mips smooth")

local bar_fill = Material("arccw/hud/fmbar_filled.png",           "mips smooth")
local bar_outl = Material("arccw/hud/fmbar_outlined.png",         "mips smooth")
local bar_shad = Material("arccw/hud/fmbar_shadow.png",           "mips smooth")
local bar_shou = Material("arccw/hud/fmbar_outlined_shadow.png",  "mips smooth")

local hp = Material("arccw/hud/hp.png", "smooth")
local hp_shad = Material("arccw/hud/hp_shadow.png", "mips smooth")

local armor = Material("arccw/hud/armor.png", "mips smooth")
local armor_shad = Material("arccw/hud/armor_shadow.png", "mips smooth")
local ubgl_mat = Material("arccw/hud/ubgl.png", "smooth")
local bipod_mat = Material("arccw/hud/bipod.png", "smooth")


--addons/[binbon]arccw_modify/lua/weapons/arccw_base/cl_scope.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base/sh_heat.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/weapons/arccw_base_nade/shared.lua:
SWEP.Base = "arccw_base"

SWEP.Throwing = true
SWEP.Singleton = false -- for grenades, means that weapons ARE ammo; hold one, use one.

SWEP.NotForNPCs = true

SWEP.Delay = 1
SWEP.Firemodes = {
    {
        Mode = 1,
        PrintName = "NADE"
    },
}

SWEP.MuzzleVelocity = 1000
SWEP.MuzzleVelocityAlt = nil -- Throwing with alt-fire will use this velocity if exists

SWEP.PullPinTime = 0.25
SWEP.FuseTime = 3.5

SWEP.WindupTime = 0.5 -- Time to reach max velocity (does not apply for altfire)
SWEP.WindupMinimum = 0.25 -- Velocity fraction if released without windup

SWEP.ShootEntityDelay = 0.25 -- Delay between Throw() call and projectile existing

SWEP.ThrowInertia = nil -- override default throw intertia settings

SWEP.CookPrimFire = true
SWEP.CookAltFire = true

SWEP.ChamberSize = 0

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "slam"
SWEP.HoldtypeSights = "grenade"
SWEP.HoldtypeCustomize = "slam"

SWEP.Primary.ClipSize = 1
SWEP.Primary.Ammo = "grenade"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE
SWEP.AnimShootAlt = ACT_HL2MP_GESTURE_RANGE_ATTACK_SLAM

-- By default, grenades with no ammo will be stripped. Set true to prevent
SWEP.KeepIfEmpty = false

SWEP.Animations = {
    -- ["draw"] = {
    --     Source = "draw",
    --     Time = 0.5,
    -- },
    -- ["ready"] = {
    --     Source = "draw",
    --     Time = 0.5,
    -- },
    -- ["pre_throw"] = {
    --     Source = "pullpin",
    --     Time = 0.5,
    -- },
    -- ["throw"] = {
    --     Source = "throw",
    --     Time = 0.5
    -- }
}

SWEP.BashPreparePos = Vector(2.187, -7.117, -1)
SWEP.BashPrepareAng = Angle(5, -3.652, -19.039)

SWEP.BashPos = Vector(8.876, 0, 0)
SWEP.BashAng = Angle(-16.524, 70, -11.046)

SWEP.HolsterPos = Vector(0.532, -1, 0)
SWEP.HolsterAng = Angle(-10, 0, 0)

SWEP.IronSightStruct = false

SWEP.MeleeSwingSound = "weapons/arccw/m249/m249_draw.wav"
SWEP.MeleeHitSound = "weapons/arccw/knife/knife_hitwall1.wav"
SWEP.MeleeHitNPCSound = "physics/body/body_medium_break2.wav"

SWEP.ShootWhileSprint = true

SWEP.SpeedMult = 1

SWEP.Secondary.Automatic = true

function SWEP:SecondaryAttack()
    self:PrimaryAttack()
end

function SWEP:OnRemove()
    if engine.ActiveGamemode() != "terrortown" then return end
    if CLIENT and IsValid(self:GetOwner()) and self:GetOwner() == LocalPlayer() and self:GetOwner():Alive() then
        RunConsoleCommand("use", "weapon_ttt_unarmed")
    end
end
--lua/weapons/arccw_mw2_ak47.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.CamAttachment = 3

SWEP.PrintName = "AK-47"
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "Fully automatic, all purpose weapon."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2_2/c_ak47_1a.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-3, 3, -5),
    ang = Angle(-10, 0, 180),
    scale = 1.125
}
SWEP.WorldModel = "models/weapons/w_rif_m4a1.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 40
SWEP.DamageMin = 30
SWEP.Range = 2000 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 10
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 30 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 45
SWEP.ReducedClipSize = 15

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.5
SWEP.RecoilSide = 0.3
SWEP.RecoilRise = 0.2

SWEP.Delay = 0.085 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_ar2", "weapon_smg1"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 2.5 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 500 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "ar2" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/ak47.wav"
SWEP.ShootMechSound =       ArcCW_MW2_Mech
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/ak47.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/m4_sil.wav"
SWEP.MW2_M203isGP25 = true

SWEP.MuzzleEffect = "muzzleflash_4"
SWEP.ShellModel = "models/shells/shell_556.mdl"
SWEP.ShellPitch = 95
SWEP.ShellScale = 1

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.95
SWEP.SightedSpeedMult = 0.38
SWEP.SightTime = 0.25
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.345, -2.012, 0.659), --
    Ang = Angle(0, 0, 0),
    ViewModelFOV = 65 / 1.3,
    Magnification = 1.3,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(10.479, 0, -1.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 14.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 27

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 2, bg = 1}},
        WMBodygroups = {},
    },
    ["nogrip"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
    ["wepcamo-ak47_cod4"]    = {
        VMBodygroups = { { ind = 0, bg = 1 } },
        Override_IronSightStruct = {
            Pos = Vector(-2.345, -2.012, 0.659),
            Ang = Angle(0.3, 0, 0),
            ViewModelFOV = 65 / 1.3,
            Magnification = 1.3,
        },
        AttPosMods = {
            [1] = {
                vpos = Vector(1.5, 0, 2.5),
            },
            [3] = {
                SlideAmount = {
                    vmin = Vector(9, 0, 0.4),
                    vmax = Vector(11.5, 0, 0.4),
                },
            },
        },        
    },
            ["mw2_ubgl_m203"] = {
                VMBodygroups = {{ind = 1, bg = 1}},
            },
            ["mw2_ubgl_masterkey"] = {
                VMBodygroups = {{ind = 1, bg = 2}},
            },
}

SWEP.ExtraSightDist = 5

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(1.5, 0, 3.1),
            vang = Angle(0, 0, 0),
        },
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(19.5, 0, 1.45),
            vang = Angle(0, 0, 0),
        },
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "ubgl", "bipod", "mw2_ubgl"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(18.427, 0, -1.04),
            vang = Angle(0, 0, 0),
        },
        SlideAmount = {
            vmin = Vector(9, 0, 0),
            vmax = Vector(11.5, 0, 0),
        }
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(12.5, -0.7, 2.25),
            vang = Angle(0, 0, 90),
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = {"mw2_wepcamo","mw2_wepedit_ak47"},
        FreeSlot = true,
    },
    {
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(3.5, -0.4, 1.15),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.253, -3.298),
            wang = Angle(0, 0, 180)
        },
    },
}



SWEP.Hook_TranslateAnimation = function(wep, anim)
	local attached = wep.Attachments[3].Installed
	
	-- m203 is 1, masterkey is 2, fgrip is 3
	local attthing
		if 	attached == "mw2_ubgl_masterkey" 	    then attthing = 2
		elseif 	attached 							then attthing = 1
		else 											 attthing = 0
	end
	
	-- when entering ubgl
	if anim == "enter_ubgl" then
		if attthing == 1 then
			return "switch2_alt_m203"
		elseif attthing == 2 then
			return "switch2_alt_masterkey"
		end
	elseif anim == "exit_ubgl" then
		if attthing == 1 then
			return "switch2_gun_m203"
		elseif attthing == 2 then
			return "switch2_gun_masterkey"
		end
	end
	
    if attthing == 1 and wep:GetInUBGL() then
        return "alt_" .. anim .. "_m203"
		elseif attthing == 1 then
			return anim .. "_m203"
		
	elseif attthing == 2 and wep:GetInUBGL() then
        return "alt_" .. anim .. "_masterkey"
		elseif attthing == 2 then
			return anim .. "_masterkey"
		
    end
end

SWEP.Animations = {
		["enter_ubgl"] = {
			Source = "idle",
			Time = 0/30
		},
		["exit_ubgl"] = {
			Source = "idle",
			Time = 0/30
		}, 						-- Fuck you.
    ["idle"] = {
        Source = "idle",
        Time = 2/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 29/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 25/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready"] = {
        Source = "pullout_first",
        Time = 45/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_chamber_v4.wav", 	t = 11/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire"] = {
        Source = "fire",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 83/30,
        MinProgress = 1.75,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_lift_v4.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_clipout_v5.wav", 	t = 19/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_clipin_v4.wav", 	    t = 57/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        Time = 106/30,
        MinProgress = 1.75,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_lift_v4.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_clipout_v5.wav", 	t = 19/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_clipin_v4.wav", 	    t = 56/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_chamber_v4.wav",		t = 77/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
------------------------------------------------
------ Here lies M203 ANIMATIONS ... AWESOME ---
------------------------------------------------
    ["idle_m203"] = {
        Source = "idle_m203",
        Time = 2/30
    },
    ["enter_sprint_m203"] = {
        Source = "sprint_in_m203",
        Time = 10/30
    },
    ["idle_sprint_m203"] = {
        Source = "sprint_loop_m203",
        Time = 30/40
    },
    ["exit_sprint_m203"] = {
        Source = "sprint_out_m203",
        Time = 10/30
    },
    ["draw_m203"] = {
        Source = "pullout_m203",
        Time = 29/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster_m203"] = {
        Source = "putaway_m203",
        Time = 25/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready_m203"] = {
        Source = "pullout_first_m203",
        Time = 45/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_chamber_v4.wav", 	t = 11/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire_m203"] = {
        Source = "fire_m203",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_m203"] = {
        Source = "fire_ads_m203",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["reload_m203"] = {
        Source = "reload_m203",
        Time = 83/30,
        MinProgress = 1.75,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_lift_v4.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_clipout_v5.wav", 	t = 19/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_clipin_v4.wav", 	    t = 57/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty_m203"] = {
        Source = "reload_empty_m203",
        Time = 106/30,
        MinProgress = 1.75,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_lift_v4.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_clipout_v5.wav", 	t = 19/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_clipin_v4.wav", 	    t = 56/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_chamber_v4.wav",		t = 77/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
------------------------------------------------
------ Here lies M203 IN THE ANIMATIONS........... ... AWESOME ---
------------------------------------------------
    ["alt_idle_m203"] = {
        Source = "alt_idle_m203",
        Time = 1/30
    },
    ["alt_enter_sprint_m203"] = {
        Source = "alt_sprint_in_m203",
        Time = 10/30
    },
    ["alt_idle_sprint_m203"] = {
        Source = "sprint_loop_m203",
        Time = 30/40
    },
    ["alt_exit_sprint_m203"] = {
        Source = "alt_sprint_out_m203",
        Time = 10/30
    },
    ["alt_draw_m203"] = {
        Source = "alt_pullout_m203",
        Time = 29/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["alt_holster_m203"] = {
        Source = "alt_putaway_m203",
        Time = 25/30,
    },
    ["alt_fire_m203"] = {
        Source = "alt_fire_m203",
        Time = 10/30,
    },
    ["alt_reload_m203"] = {
        Source = "alt_reload_m203",
        Time = 94/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47gp25_grnd_lift_v1.wav", 	t = 15/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47gp25_grnd_chamber_v1.wav", 	t = 53/30},
					},
    },
------------------------------------------------
------ Here lies MASTERKEY ANIMATIONS ... AWESOME ---
------------------------------------------------
    ["idle_masterkey"] = {
        Source = "idle_masterkey",
        Time = 2/30
    },
    ["enter_sprint_masterkey"] = {
        Source = "sprint_in_masterkey",
        Time = 10/30
    },
    ["idle_sprint_masterkey"] = {
        Source = "sprint_loop_masterkey",
        Time = 30/40
    },
    ["exit_sprint_masterkey"] = {
        Source = "sprint_out_masterkey",
        Time = 10/30
    },
    ["draw_masterkey"] = {
        Source = "pullout_masterkey",
        Time = 29/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["holster_masterkey"] = {
        Source = "putaway_masterkey",
        Time = 25/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["ready_masterkey"] = {
        Source = "pullout_first_masterkey",
        Time = 45/30,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_chamber_v4.wav", 	t = 11/30},
					},
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.25,
    },
    ["fire_masterkey"] = {
        Source = "fire_masterkey",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_masterkey"] = {
        Source = "fire_ads_masterkey",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["reload_masterkey"] = {
        Source = "reload_masterkey",
        Time = 83/30,
        MinProgress = 1.75,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_lift_v4.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_clipout_v5.wav", 	t = 19/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_clipin_v4.wav", 	    t = 57/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty_masterkey"] = {
        Source = "reload_empty_masterkey",
        Time = 106/30,
        MinProgress = 1.75,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_lift_v4.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_clipout_v5.wav", 	t = 19/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_clipin_v4.wav", 	    t = 56/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_ak47_reload_chamber_v4.wav",		t = 77/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
------------------------------------------------
------ Here lies MASTERKEY IN THE ANIMATIONS........... ... AWESOME ---
------------------------------------------------
    ["alt_idle_masterkey"] = {
        Source = "alt_idle_masterkey",
        Time = 1/30
    },
    ["alt_enter_sprint_masterkey"] = {
        Source = "alt_sprint_in_masterkey",
        Time = 10/30
    },
    ["alt_idle_sprint_masterkey"] = {
        Source = "alt_sprint_loop_masterkey",
        Time = 30/40
    },
    ["alt_exit_sprint_masterkey"] = {
        Source = "alt_sprint_out_masterkey",
        Time = 10/30
    },
    ["alt_draw_masterkey"] = {
        Source = "alt_pullout_masterkey",
        Time = 25/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["alt_holster_masterkey"] = {
        Source = "alt_putaway_masterkey",
        Time = 25/30,
    },
    ["alt_fire_masterkey"] = {
        Source = "alt_fire_masterkey",
        Time = 10/30,
    },
    ["alt_cycle_masterkey"] = {
        Source = "alt_cycle_masterkey",
        SoundTable = {{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 3/30}},
        Time = 15/30,
    },
    ["alt_reload_start_masterkey"] = {
        Source = "alt_reload_start_masterkey",
        Time = 35/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_lift_v1.wav", 		t = 0/30},
						{s = "MW2Common.Masterkey_Load", 		t = 26/30},
					},
    },
    ["alt_reload_loop_masterkey"] = {
        Source = "alt_reload_loop_masterkey",
        Time = 33/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "MW2Common.Masterkey_Load", 	t = 24/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_end_v1.wav", 	t = 33/30}, -- end
					},
    },
    ["alt_reload_finish_masterkey"] = {
        Source = "alt_reload_finish_masterkey",
        Time = 50/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						--{s = "MW2Common.Masterkey_Load", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_end_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 	t = 22/30},
					},
    },
-----------------------------------------------------
    ["switch2_gun_m203"] = {
        Source = "switch2_gun_m203",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 24/30
    },
    ["switch2_alt_m203"] = {
        Source = "switch2_alt_m203",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 24/30
    },
    ["switch2_gun_masterkey"] = {
        Source = "switch2_gun_masterkey",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 22/30
    },
    ["switch2_alt_masterkey"] = {
        Source = "switch2_alt_masterkey",
        SoundTable = {
						{s = "MW2Common.Underbarrel", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 14/30},
					},
        Time = 25/30
    },
}
--lua/weapons/arccw_mw2_anaconda.lua:
return gluapack()()
--lua/weapons/arccw_mw2_barrett.lua:
return gluapack()()
--lua/weapons/arccw_mw2_g18.lua:
return gluapack()()
--lua/weapons/arccw_mw2_l85.lua:
return gluapack()()
--lua/weapons/arccw_mw2_l85_u.lua:
return gluapack()()
--lua/weapons/arccw_mw2_m16.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.CamAttachment = 3

SWEP.PrintName = "M16A4"
SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = "3 round burst."

SWEP.Slot = 2

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2_2/c_m16.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-5, 3, -5),
    ang = Angle(-10, 0, 180),
    scale = 1.25
}
SWEP.WorldModel = "models/weapons/w_rif_m4a1.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 30
SWEP.DamageMin = 20
SWEP.RangeMin = 1500 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Range = 2000 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 7
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 30 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 45
SWEP.ReducedClipSize = 15

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.5
SWEP.RecoilSide = 0.4
SWEP.RecoilRise = 0.1

SWEP.Delay = 0.064 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = -3,
		RunawayBurst = true,
        PostBurstDelay = 0.2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_ar2", "weapon_smg1"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 2.5 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 500 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 150

SWEP.Primary.Ammo = "smg1" -- what ammo type the gun uses

SWEP.ShootVol = 110 -- volume of shoot sound
SWEP.ShootPitch = 100 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/m4.wav"
SWEP.ShootMechSound =       ArcCW_MW2_Mech
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/m4_mp.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/m4_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_4"
SWEP.ShellModel = "models/shells/shell_556.mdl"
SWEP.ShellPitch = 95
SWEP.ShellScale = 1

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 0.95
SWEP.SightedSpeedMult = 0.38
SWEP.SightTime = 0.25
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.595, -3.512, -0.1), --
    Ang = Angle(0.8, 0, 0),
    ViewModelFOV = 65 / 1.3,
    Magnification = 1.3,
}

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(10.479, 0, -1.321)
SWEP.CustomizeAng = Angle(18.2, 39.4, 14.8)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 27

SWEP.AttachmentElements = {
    ["nors"] = {
        VMBodygroups = {{ind = 1, bg = 1}},
        WMBodygroups = {},
    },
    ["grip"] = {
        VMBodygroups = {{ind = 2, bg = 3}},
    },
    ["wepcamo-desert"]		= { VMSkin = 1 },
    ["wepcamo-arctic"]		= { VMSkin = 2 },
    ["wepcamo-woodland"]	= { VMSkin = 3 },
    ["wepcamo-digital"]		= { VMSkin = 4 },
    ["wepcamo-urban"]		= { VMSkin = 5 },
    ["wepcamo-bluetiger"]	= { VMSkin = 6 },
    ["wepcamo-redtiger"]	= { VMSkin = 7 },
    ["wepcamo-fall"]		= { VMSkin = 8 },
    ["wepcamo-whiteout"]	= { VMSkin = 9 },
    ["wepcamo-blackout"]        = { VMSkin = 10 },
    ["wepcamo-bushdweller"]     = { VMSkin = 11 },
    ["wepcamo-thunderstorm"]    = { VMSkin = 12 },
            ["mw2_ubgl_m203"] = {
                VMBodygroups = {{ind = 2, bg = 1}},
            },
            ["mw2_ubgl_masterkey"] = {
                VMBodygroups = {{ind = 2, bg = 2}},
            },
}

SWEP.ExtraSightDist = 5

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = "optic",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(6.972, 0, 4.018),
            vang = Angle(0, 0, 0),
            wang = Angle(-9.738, 0, 180)
        },
        SlideAmount = {
            vmin = Vector(0.5, 0, 2.95),
            vmax = Vector(4, 0, 2.95),
            wmin = Vector(5.36, 0.739, -5.401),
            wmax = Vector(5.36, 0.739, -5.401),
        },
        InstalledEles = {"nors"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(21.7, 0, 2),
            vang = Angle(0, 0, 0),
            wpos = Vector(33.719, -2.122, -5.573),
            wang = Angle(0, 6.034, 180)
        },
		WMScale = Vector(1, 1, 1),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip", "ubgl", "bipod",--[[] "foregrip_mw2exclusive",]] "mw2_ubgl"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(18.427, 0, -1.04),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-2.461, -6.525, 176.662)
        },
        SlideAmount = {
            vmin = Vector(6.748, 0, 1.04),
            vmax = Vector(12.427, 0, 1.04),
            wmin = Vector(20.996, -0.991, -3.837),
            wmax = Vector(13.661, -0.078, -3.837),
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(12.5, -1, 2.25),
            vang = Angle(0, 0, 90),
            wpos = Vector(15.625, -0.253, -6.298),
            wang = Angle(-8.829, -0.556, 90)
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
    {
        PrintName = "Camouflage",
        DefaultAttName = "None",
        Slot = "mw2_wepcamo",
        FreeSlot = true,
    },
	{
        PrintName = "Charm",
        Slot = "charm",
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(4, -0.4, 1.25),
            vang = Angle(0, 0, 0),
            wpos = Vector(9.625, 1.5, -4),
            wang = Angle(0, 0, 180)
        },
    },
}



SWEP.Hook_TranslateAnimation = function(wep, anim)
	local attached = wep.Attachments[3].Installed
	
	-- m203 is 1, masterkey is 2, fgrip is 3
	local attthing
		if 		attached == "mw2_ubgl_m203" 		then attthing = 1
		elseif 	attached == "mw2_ubgl_masterkey" 	then attthing = 2
		else 											 attthing = 0
	end
    
	-- when entering ubgl
	if anim == "enter_ubgl" then
		if attthing == 1 then
			return "switch2_alt_m203"
		elseif attthing == 2 then
			return "switch2_alt_masterkey"
		end
	elseif anim == "exit_ubgl" then
		if attthing == 1 then
			return "switch2_gun_m203"
		elseif attthing == 2 then
			return "switch2_gun_masterkey"
		end
	end

    if attthing == 1 and wep:GetInUBGL() then
        return "alt_" .. anim .. "_m203"
		elseif attthing == 1 then
			return anim .. "_m203"
		
	elseif attthing == 2 and wep:GetInUBGL() then
        return "alt_" .. anim .. "_masterkey"
		elseif attthing == 2 then
			return anim .. "_masterkey"
		
    end
end

SWEP.Animations = {
		["enter_ubgl"] = {
			Source = "idle",
			Time = 1/30
		},
		["exit_ubgl"] = {
			Source = "idle",
			Time = 1/30
		}, 						-- Fuck you.
    ["idle"] = {
        Source = "idle",
        Time = 0--100/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 10/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 30/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 10/30
    },
    ["draw"] = {
        Source = "pullout",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["holster"] = {
        Source = "putaway",
        Time = 20/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["fire"] = {
        Source = "fire",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 61/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_lift_v10.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipout_v10.wav", 	t = 11/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipin_v10.wav", 	    t = 37/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        Time = 70/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_lift_v10.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipout_v10.wav", 	t = 11/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipin_v10.wav", 	    t = 37/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_chamber_v10.wav",		t = 52/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
------------------------------------------------
------ Here lies M203 ANIMATIONS ... AWESOME ---
------------------------------------------------
    ["idle_m203"] = {
        Source = "idle_m203",
        Time = 0--100/30
    },
    ["enter_sprint_m203"] = {
        Source = "sprint_in_m203",
        Time = 10/30
    },
    ["idle_sprint_m203"] = {
        Source = "sprint_loop_m203",
        Time = 30/40
    },
    ["exit_sprint_m203"] = {
        Source = "sprint_out_m203",
        Time = 10/30
    },
    ["draw_m203"] = {
        Source = "pullout_m203",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["holster_m203"] = {
        Source = "putaway_m203",
        Time = 20/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["fire_m203"] = {
        Source = "fire_m203",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_m203"] = {
        Source = "fire_ads_m203",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["reload_m203"] = {
        Source = "reload_m203",
        Time = 61/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_lift_v10.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipout_v10.wav", 	t = 11/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipin_v10.wav", 	    t = 37/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty_m203"] = {
        Source = "reload_empty_m203",
        Time = 70/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_lift_v10.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipout_v10.wav", 	t = 11/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipin_v10.wav", 	    t = 37/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_chamber_v10.wav",		t = 52/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
------------------------------------------------
------ Here lies M203 IN THE ANIMATIONS........... ... AWESOME ---
------------------------------------------------
    ["alt_idle_m203"] = {
        Source = "alt_idle_m203",
        Time = 0--100/30
    },
    ["alt_enter_sprint_m203"] = {
        Source = "alt_sprint_in_m203",
        Time = 10/30
    },
    ["alt_idle_sprint_m203"] = {
        Source = "alt_sprint_loop_m203",
        Time = 30/40
    },
    ["alt_exit_sprint_m203"] = {
        Source = "alt_sprint_out_m203",
        Time = 10/30
    },
    ["alt_draw_m203"] = {
        Source = "alt_pullout_m203",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["alt_holster_m203"] = {
        Source = "alt_putaway_m203",
        Time = 20/30,
    },
    ["alt_fire_m203"] = {
        Source = "alt_fire_m203",
        Time = 10/30,
    },
    ["alt_reload_m203"] = {
        Source = "alt_reload_m203",
        Time = 78/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_chamber_open_v12.wav", 		t = 12/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_load_v12.wav", 	t = 39/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m203_chamber_close_v12.wav", 	t = 60/30},
					},
    },
------------------------------------------------
------ Here lies MASTERKEY ANIMATIONS ... AWESOME ---
------------------------------------------------
    ["idle_masterkey"] = {
        Source = "idle_masterkey",
        Time = 0--100/30
    },
    ["enter_sprint_masterkey"] = {
        Source = "sprint_in_masterkey",
        Time = 10/30
    },
    ["idle_sprint_masterkey"] = {
        Source = "sprint_loop_masterkey",
        Time = 30/40
    },
    ["exit_sprint_masterkey"] = {
        Source = "sprint_out_masterkey",
        Time = 10/30
    },
    ["draw_masterkey"] = {
        Source = "pullout_masterkey",
        Time = 33/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["holster_masterkey"] = {
        Source = "putaway_masterkey",
        Time = 20/30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
    },
    ["fire_masterkey"] = {
        Source = "fire_masterkey",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_masterkey"] = {
        Source = "fire_ads_masterkey",
        Time = 5/30,
        ShellEjectAt = 0,
    },
    ["reload_masterkey"] = {
        Source = "reload_masterkey",
        Time = 61/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_lift_v10.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipout_v10.wav", 	t = 11/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipin_v10.wav", 	    t = 37/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.5,
    },
    ["reload_empty_masterkey"] = {
        Source = "reload_empty_masterkey",
        Time = 70/30,
        MinProgress = 1.1,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_lift_v10.wav", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipout_v10.wav", 	t = 11/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_clipin_v10.wav", 	    t = 37/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_m4reload_chamber_v10.wav",		t = 52/30},
					},
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
------------------------------------------------
------ Here lies MASTERKEY IN THE ANIMATIONS........... ... AWESOME ---
------------------------------------------------
    ["alt_idle_masterkey"] = {
        Source = "alt_idle_masterkey",
        Time = 0--100/30
    },
    ["alt_enter_sprint_masterkey"] = {
        Source = "alt_sprint_in_masterkey",
        Time = 10/30
    },
    ["alt_idle_sprint_masterkey"] = {
        Source = "alt_sprint_loop_masterkey",
        Time = 30/40
    },
    ["alt_exit_sprint_masterkey"] = {
        Source = "alt_sprint_out_masterkey",
        Time = 10/30
    },
    ["alt_draw_masterkey"] = {
        Source = "alt_pullout_masterkey",
        Time = 25/30,
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
    },
    ["alt_holster_masterkey"] = {
        Source = "alt_putaway_masterkey",
        Time = 20/30,
    },
    ["alt_fire_masterkey"] = {
        Source = "alt_fire_masterkey",
        Time = 10/24,
    },
    ["alt_cycle_masterkey"] = {
        Source = "alt_cycle_masterkey",
        SoundTable = {{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 3/30}},
        Time = 15/30,
    },
    ["alt_reload_start_masterkey"] = {
        Source = "alt_reload_start_masterkey",
        Time = 35/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_lift_v1.wav", 		t = 0/30},
						{s = "MW2Common.Masterkey_Load", 		t = 35/30},
					},
    },
    ["alt_reload_loop_masterkey"] = {
        Source = "alt_reload_loop_masterkey",
        Time = 33/40,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "MW2Common.Masterkey_Load", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_end_v1.wav", 	t = 33/30},
					},
    },
    ["alt_reload_finish_masterkey"] = {
        Source = "alt_reload_finish_masterkey",
        Time = 50/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_shotattach_reload_end_v1.wav", 	t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 	t = 22/30},
					},
    },
-----------------------------------------------------
    ["switch2_gun_m203"] = {
        Source = "switch2_gun_m203",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 24/30
    },
    ["switch2_alt_m203"] = {
        Source = "switch2_alt_m203",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 24/30
    },
    ["switch2_gun_masterkey"] = {
        Source = "switch2_gun_masterkey",
        SoundTable = {{s = "MW2Common.Underbarrel", 		t = 0}},
        Time = 22/30
    },
    ["switch2_alt_masterkey"] = {
        Source = "switch2_alt_masterkey",
        SoundTable = {
						{s = "MW2Common.Underbarrel", 		t = 0},
						{s = "weapons/fesiugmw2/foley/wpfoly_winchester_reload_pump_v1.wav", 		t = 14/30},
					},
        Time = 25/30
    },
}
--lua/weapons/arccw_mw2_m1911.lua:
SWEP.Base = "arccw_mw2_abase"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - MW2"
SWEP.AdminOnly = false
SWEP.WeaponCamBone = tag_camera

SWEP.PrintName = "M1911 .45"
SWEP.Trivia_Class = "Handgun"
SWEP.Trivia_Desc = "Semi-automatic (single fire)"

SWEP.Slot = 1

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/fesiugmw2/c_colt45.mdl"
SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos = Vector(-9, 3, -3.5),
    ang = Angle(-7, 0, 180),
    scale = 1.25
}
SWEP.WorldModel = "models/weapons/w_pist_p228.mdl"
SWEP.ViewModelFOV = 65

SWEP.Damage = 40
SWEP.DamageMin = 20
SWEP.Range = 350 * 0.025  -- GAME UNITS * 0.025 = METRES
SWEP.Penetration = 3
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil -- entity to fire, if any


SWEP.ChamberSize = 0
SWEP.Primary.ClipSize = 8 -- DefaultClip is automatically set.
SWEP.ExtendedClipSize = 12
SWEP.ReducedClipSize = 6

SWEP.VisualRecoilMult = 0
SWEP.Recoil = 0.5
SWEP.RecoilSide = 0.5
SWEP.RecoilRise = 0.5

SWEP.Delay = 0.079 -- 60 / RPM.
SWEP.Num = 1 -- number of shots per trigger pull.
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.NPCWeaponType = {"weapon_pistol"}
SWEP.NPCWeight = 100

SWEP.AccuracyMOA = 15 -- accuracy in Minutes of Angle. There are 60 MOA in a degree.
SWEP.HipDispersion = 200 -- inaccuracy added by hip firing.
SWEP.MoveDispersion = 180

SWEP.Primary.Ammo = "pistol" -- what ammo type the gun uses

SWEP.ShootVol = 120 -- volume of shoot sound
SWEP.ShootPitch = 90 -- pitch of shoot sound

SWEP.ShootSound =			"weapons/fesiugmw2/fire/usp45.wav"
--SWEP.DistantShootSound =	"weapons/fesiugmw2/fire_distant/usp45.wav"
SWEP.ShootSoundSilenced =	"weapons/fesiugmw2/fire/usp45_sil.wav"

SWEP.MuzzleEffect = "muzzleflash_4"
SWEP.ShellModel = "models/shells/shell_9mm.mdl"
SWEP.ShellScale = 1
SWEP.ShellRotateAngle = Angle(0, 90, 0)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.SpeedMult = 1
SWEP.SightedSpeedMult = 0.8
SWEP.SightTime = 0.125


SWEP.BulletBones = { -- the bone that represents bullets in gun/mag
    -- [0] = "bulletchamber",
    -- [1] = "bullet1"
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.025, 2, 1.55),
    Ang = Angle(-1.2, -0.1, 0),
    ViewModelFOV = 65,
    Magnification = 1,
}

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "revolver"
SWEP.HoldtypeSights = "revolver"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0, 0, 1)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.CustomizePos = Vector(3, 0, -1)
SWEP.CustomizeAng = Angle(10, 19, 0)

SWEP.CrouchPos = Vector(-2.764, -0.927, -0.202)
SWEP.CrouchAng = Angle(1.12, -1, -21.444)

SWEP.HolsterPos = Vector(1, 0, 1)
SWEP.HolsterAng = Angle(-10, 12, 0)

SWEP.SprintPos = Vector(0, 0, 1)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.BarrelOffsetSighted = Vector(0, 0, -1)
SWEP.BarrelOffsetHip = Vector(2, 0, -2)

SWEP.BarrelLength = 18

SWEP.ExtraSightDist = 5

-----[ Tactical knife sheet ]------
	SWEP.CanBash				= true -- Tac knife will save us
	--SWEP.MeleeDamage			= 100
	--SWEP.MeleeRange				= 16
	--SWEP.MeleeDamageType		= DMG_CLUB
	--SWEP.MeleeTime				= 0.8
	SWEP.MeleeGesture			= ACT_HL2MP_GESTURE_RANGE_ATTACK_KNIFE
	--SWEP.MeleeAttackTime		= 0.079
	SWEP.MeleeMissSound			= ""
	SWEP.MeleeHitSound			= "MW2Common.Melee.HitWorld"
	SWEP.MeleeHitNPCSound		= "MW2Common.Melee.HitFleshy_Slice"

SWEP.AttachmentElements = {
    ["altirons"] = {
        Override_IronSightStruct = {
            Pos = Vector(-1.71, -2.346, 0),
            Ang = Angle(0.6, 0, 0),
            ViewModelFOV = 65,
            Magnification = 1,
        },
        VMBodygroups = {{ind = 1, bg = 1}}, -- m1911 is an old fart and doesn't have the knife bone all the way back so we hide it in qc and show it here instead
        WMBodygroups = {},
    },
}

SWEP.Attachments = {
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = "muzzle",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(4.5, 0, 0.9),
            vang = Angle(0, 0, 0),
            wpos = Vector(26.648, 0.782, -8.042),
            wang = Angle(-9.79, 0, 180)
        },
		VMScale = Vector(1, 0.6, 0.6),
    },
    {
        PrintName = "Underbarrel",
		Slot = {"foregrip_pistol", "style_pistol", "mw2_tacknife"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(1.3, 0, -0.2),
            vang = Angle(0, 0, 0),
            wpos = Vector(14.329, 0.602, -4.453),
            wang = Angle(-10.216, 0, 180)
        },
    },
    {
        PrintName = "Tactical",
        Slot = "tac_pistol",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.7, 0, 0),
            vang = Angle(0, 0, 0),
        },
    },
    {
        PrintName = "Fire Group",
        Slot = "fcg",
        DefaultAttName = "Standard FCG"
    },
    {
        PrintName = "Ammo Type",
        Slot = "ammo_bullet"
    },
    {
        PrintName = "Perk",
        Slot = "perk"
    },
}


SWEP.Hook_SelectReloadAnimation = function(wep, anim)
    if wep.Attachments[2].Installed == "mw2_tacticalknife" then
        return anim .. "_knife"
    end
end
SWEP.Hook_TranslateAnimation = function(wep, anim)
    if wep.Attachments[2].Installed == "mw2_tacticalknife" then
        return anim .. "_knife"
    end
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 2/30
    },
    ["idle_empty"] = {
        Source = "idle_empty",
        Time = 2/30
    },
    ["enter_sprint"] = {
        Source = "sprint_in",
        Time = 11/30
    },
    ["idle_sprint"] = {
        Source = "sprint_loop",
        Time = 31/40
    },
    ["exit_sprint"] = {
        Source = "sprint_out",
        Time = 11/30
    },
    ["draw"] = {
        Source = "pullout",
        SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
        Time = 20/24 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["holster"] = {
        Source = "putaway",
        Time = 32/30 /4,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.35,
    },
    ["fire"] = {
        Source = "fire",
        Time = 20/30,
        ShellEjectAt = 0,
    },
    ["fire_iron"] = {
        Source = "fire_ads",
        Time = 13/30,
        ShellEjectAt = 0,
    },
    ["fire_empty"] = {
        Source = "lastfire",
        Time = 21/30,
        ShellEjectAt = 0,
    },
    ["fire_iron_empty"] = {
        Source = "lastfire",
        Time = 21/30,
        ShellEjectAt = 0,
    },
    ["reload"] = {
        Source = "reload",
        Time = 51/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_lift_v1.wav", 		t = 0/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_clipout_v1.wav", 	t = 9/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_clipin_v1.wav", 	t = 22/24},
					},
        Checkpoints = {24, 67},
        FrameRate = 30,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.4,
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        Time = 60/30,
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        SoundTable = {
						{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_lift_v1.wav", 		t = 0/30},
						{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_clipout_v1.wav", 	t = 9/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_clipin_v1.wav", 	t = 22/24},
						{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_chamber_v1.wav", 	t = 36/24},
					},
        Checkpoints = {24, 67, 91},
        FrameRate = 37,
        LHIK = true,
        LHIKIn = 0.5,
        LHIKOut = 0.6,
    },
---------------------------------------------------------
--------- LE TACTICAL KNIFE XDXDXDXD---------------------
---------------------------------------------------------
		["idle_knife"] = {
			Source = "idle_knife",
			Time = 300/30
		},
		["idle_empty_knife"] = {
			Source = "idle_knife",
			Time = 300/30
		},
		["enter_sprint_knife"] = {
			Source = "sprint_in_knife",
			Time = 10/30
		},
		["idle_sprint_knife"] = {
			Source = "sprint_loop_knife",
			Time = 30/40
		},
		["exit_sprint_knife"] = {
			Source = "sprint_out_knife",
			Time = 10/30
		},
		["fire_knife"] = {
			Source = "fire_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["fire_iron_knife"] = {
			Source = "fire_ads_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["fire_empty_knife"] = {
			Source = "lastfire_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["fire_iron_empty_knife"] = {
			Source = "lastfire_knife",
			Time = 8/30,
			ShellEjectAt = 0,
		},
		["draw_knife"] = {
			Source = "pullout_knife",
			SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
			Time = 29/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["holster_knife"] = {
			Source = "putaway_knife",
			Time = 31/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["draw_empty_knife"] = {
			Source = "pullout_knife",
			SoundTable = {{s = "MW2Common.Deploy", 		t = 0}},
			Time = 29/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["holster_empty_knife"] = {
			Source = "putaway_knife",
			Time = 31/30 /4,
			LHIK = true,
			LHIKIn = 0,
			LHIKOut = 0.35,
		},
		["reload_knife"] = {
			Source = "reload_knife",
			Time = 51/24,
			TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
			SoundTable = {
							{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_lift_v1.wav", 	t = 0},
							{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_clipout_v1.wav", 	t = 7/24},
							{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_clipin_v1.wav", 	t = 25/24},
						},
			Checkpoints = {24, 97},
			FrameRate = 30,
			LHIK = true,
			LHIKIn = 0.5,
			LHIKOut = 0.4,
		},
		["reload_empty_knife"] = {
			Source = "reload_empty_knife",
			Time = 46/24,
			TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
			SoundTable = {
							{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_lift_v1.wav", 	t = 0},
							{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_clipout_v1.wav", 	t = 6/24},
							{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_clipin_v1.wav", 	t = 25/24},
							{s = "weapons/fesiugmw2/foley/wpfoly_colt1911_reload_chamber_v1.wav", 	t = 37/24},
						},
			Checkpoints = {24, 97, 131},
			FrameRate = 37,
			LHIK = true,
			LHIKIn = 0.5,
			LHIKOut = 0.6,
		},
		["bash_knife"] = {
			Source = "melee_knife",
			SoundTable = {{s = "MW2Common.Melee.Swing", 		t = 0}},
			Time = 97/120 / 1.6, -- damn you universal
			LHIK = true,
		},
}
--lua/weapons/arccw_mw2_miniuzi.lua:
return gluapack()()
--lua/weapons/arccw_uc_scarpdw.lua:
if !file.Exists("weapons/arccw_myt_uc_scar.lua","LUA") then return end

include("weapons/arccw_myt_uc_scar.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "Scarlett PDW"
SWEP.TrueName = "SCAR PDW"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "uc_myt_scar_hg_xs"
SWEP.Attachments[7].Installed = "uc_myt_scar_stock_pdw"
SWEP.Attachments[8].Installed = "uc_myt_scar_cal_556"
--lua/weapons/arccw_myt_uc_scar.lua:
return gluapack()()
--lua/weapons/arccw_ud_ac556.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_mini14.lua")

SWEP.Category = "ArcCW - UC Presets"
SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "Patriot ACC"
SWEP.TrueName = "AC-556"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[4].Installed = "ud_mini14_receiver_auto"
SWEP.Attachments[7].Installed = "ud_mini14_mag_30"
SWEP.Attachments[8].Installed = "ud_mini14_stock_tactical"
--lua/weapons/arccw_ud_fpw.lua:
return gluapack()()
--lua/weapons/arccw_ud_glock.lua:
return gluapack()()
--lua/weapons/arccw_ud_m4a1300.lua:
if !file.Exists("arccw/shared/languages/ud_en.lua","LUA") then return end

include("weapons/arccw_ud_m16.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "RBY .300"
SWEP.TrueName = "M4A1 .300"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[1].Installed = "ud_m16_rs_magpul"
SWEP.Attachments[2].Installed = "ud_m16_barrel_14in"
SWEP.Attachments[3].Installed = "ud_m16_hg_ru556"
SWEP.Attachments[5].Installed = "ud_m16_receiver_300blk"
SWEP.Attachments[6].Installed = "ud_m16_receiver_auto"
SWEP.Attachments[10].Installed = "ud_m16_stock_ru556"
SWEP.Attachments[11].Installed = "ud_m16_mag_pmag"
SWEP.Attachments[15].Installed = "uc_fg_heavy"
SWEP.Attachments[16].Installed = "ud_m16_fs_magpul"
--lua/weapons/arccw_ud_uzi.lua:
return gluapack()()
--lua/weapons/arccw_ud_r870sawn.lua:
return gluapack()()
--lua/weapons/arccw_ur_ak.lua:
return gluapack()()
--lua/weapons/arccw_ur_ak74.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_ak.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "KF-76" -- make this something russian and cool
SWEP.TrueName = "AK-74"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[5].Installed = "ur_ak_cal_545"
SWEP.Attachments[6].Installed = "ur_ak_mag_545_black"
--lua/weapons/arccw_ur_aks74u.lua:
return gluapack()()
--lua/weapons/arccw_ur_awm.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_aw.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets DMRs"
end

SWEP.PrintName = "Apex Magnum"
SWEP.TrueName = "AWM"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[1].Installed = "uc_optic_trijicon_tars"
SWEP.Attachments[2].Installed = "ur_aw_barrel_long"
SWEP.Attachments[3].Installed = "ur_aw_muzzle_brake"
SWEP.Attachments[4].Installed = "ur_aw_cal_338"
SWEP.Attachments[8].Installed = "ur_aw_stock_fixed"

SWEP.Hook_NameChange = function(wep,name)
    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_aw_barrel_", "")
    local cal = string.Replace(atts[4].Installed or "default", "ur_aw_cal_", "")
    local stock = string.Replace(atts[8].Installed or "default", "ur_aw_stock_", "")

    if GetConVar("arccw_truenames"):GetBool() then
        if cal ~= "default" then
            return "AWM"
        elseif barr == "sd" then
            return "AWS"
        elseif stock == "at" then
            return "AT"
        else
            return "AWP"
        end
    else
        if cal == "338" then
            return "Apex Magnum"
        elseif barr == "sd" then
            return "Apex Spectre"
        elseif stock == "at" then
            return "Apex Tactical"
        else
            return "Apex Precision"
        end
    end
end
--lua/weapons/arccw_ur_m1911.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true
SWEP.Category = "ArcCW - Urban Coalition"
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false
SWEP.UseHands = true

-- Muzzle and shell effects --

SWEP.MuzzleEffect = "muzzleflash_pistol"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/9x19.mdl"
SWEP.ShellScale = 1
--SWEP.ShellMaterial = "models/weapons/arcticcw/shell_9mm"
SWEP.ShellPitch = 90

SWEP.MuzzleEffectAttachment = 1
SWEP.CaseEffectAttachment = 2
SWEP.CamAttachment = 5
SWEP.TracerNum = 0 -- subsonic by default
SWEP.TracerWidth = 1
SWEP.ShootPitch = 100

-- Fake name --

SWEP.PrintName = "AMAS" -- American Automatic Sidearm

-- True name --

SWEP.TrueName = "M1911"

-- Trivia --

SWEP.Trivia_Class = "Pistol"
SWEP.Trivia_Desc = [[Venerable semi-automatic pistol issued by the US Army throughout both World Wars and then some. Even after more than a century of service, it is rarely considered an obsolete design, and its short recoil mechanism has been inherited by most modern pistols.

Easy to handle and packing respectable stopping power, the antiquated single-stack magazine is its only notable downside.]]
SWEP.Trivia_Manufacturer = "Stoner's Legacy Ltd."
SWEP.Trivia_Calibre = ".45 ACP"
SWEP.Trivia_Mechanism = "Short Recoil"
SWEP.Trivia_Country = "USA"
SWEP.Trivia_Year = 1911

-- Weapon slot --

SWEP.Slot = 1

-- Weapon's manufacturer real name --

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
    SWEP.Trivia_Manufacturer = "Colt's Manufacturing Company"
end

-- Viewmodel / Worldmodel / FOV --

SWEP.ViewModel = "models/weapons/arccw/c_ur_m1911.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_m1911.mdl"
SWEP.ViewModelFOV = 66
SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER

-- Damage parameters --

SWEP.Damage = 45 -- 3 shot short range kill (2 shot chest point-blank)
SWEP.DamageMin = 15 -- 7 shot long range kill
SWEP.RangeMin = 10
SWEP.Range = 80 -- 3 shot until ~40m
SWEP.Penetration = 9
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil

SWEP.PhysBulletMuzzleVelocity = 253

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Jamming --

--SWEP.Malfunction = true
SWEP.MalfunctionJam = true
--SWEP.MalfunctionMean = 21
SWEP.MalfunctionPostFire = false
SWEP.MalfunctionTakeRound = true

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 7

-- Recoil --

SWEP.Recoil = 1.25
SWEP.RecoilSide = 0.75

SWEP.RecoilRise = 0.25
SWEP.VisualRecoilMult = 1.0
SWEP.MaxRecoilBlowback = .5
SWEP.MaxRecoilPunch = .8

SWEP.Sway = 1

-- Firerate / Firemodes --

SWEP.Delay = 60 / 400
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 1,
    },
    {
        Mode = 0
    }
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_pistol"
SWEP.NPCWeight = 70

-- Accuracy --

SWEP.AccuracyMOA = 5
SWEP.HipDispersion = 400
SWEP.MoveDispersion = 150
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "pistol"
SWEP.MagID = "m1911"

-- Speed multipliers --

SWEP.SpeedMult = 0.97
SWEP.SightedSpeedMult = 0.875
SWEP.SightTime = 0.25
SWEP.ShootSpeedMult = 1

-- Length --

SWEP.BarrelLength = 8
SWEP.ExtraSightDist = 10

-- Ironsights / Customization / Poses --

SWEP.HolsterPos = Vector(0.3, 3, 1.6)
SWEP.HolsterAng = Angle(-14, 0, -0.5)

SWEP.SprintPos = Vector(0.3, 3, 1)
SWEP.SprintAng = Angle(-5, 15, -20)

SWEP.HoldtypeHolstered = "normal"
SWEP.HoldtypeActive = "pistol"
SWEP.HoldtypeSights = "revolver"

SWEP.IronSightStruct = {
     Pos = Vector(-2.33, 10, 1.5),
     Ang = Angle(0.2, 0.02, 5.5),
     Magnification = 1,
     SwitchToSound = "",
}

SWEP.ActivePos = Vector(0.3, 3, 1.3)
SWEP.ActiveAng = Angle(0, 0, -0.5)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, 0, 0)
SWEP.CrouchAng = Angle(0, 0, -8)

SWEP.MirrorVMWM = true
SWEP.WorldModelOffset = {
    pos        =    Vector(-9, 4, -4.25),
    ang        =    Angle(-6, 0, 180),
    bone    =    "ValveBiped.Bip01_R_Hand",
}

-- Weapon sounds --

local path = ")weapons/arccw_ur/1911/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local rutle = {common .. "movement-pistol-01.ogg",common .. "movement-pistol-02.ogg",common .. "movement-pistol-03.ogg",common .. "movement-pistol-04.ogg"}

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}

SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/45acp/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-45acp-pistol-ext-01.ogg",
    tail .. "fire-dist-45acp-pistol-ext-02.ogg",
    tail .. "fire-dist-45acp-pistol-ext-03.ogg",
    tail .. "fire-dist-45acp-pistol-ext-04.ogg",
    tail .. "fire-dist-45acp-pistol-ext-05.ogg",
    tail .. "fire-dist-45acp-pistol-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-pistol-01.ogg",
    common .. "fire-dist-int-pistol-02.ogg",
    common .. "fire-dist-int-pistol-03.ogg",
    common .. "fire-dist-int-pistol-04.ogg",
    common .. "fire-dist-int-pistol-05.ogg",
    common .. "fire-dist-int-pistol-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

-- Bodygroups --
SWEP.BulletBones = {
    [1] = "mag_round1",
    [2] = "mag_round2",
    [3] = "mag_round3",
    [4] = "mag_round4",
    [5] = "mag_round5",
    [6] = "mag_round6",
    [7] = "mag_round7"
}
SWEP.DefaultBodygroups = "000000000"

SWEP.AttachmentElements = {
    ["ur_1911_slide_compact"] = {
        VMBodygroups = {
            {ind = 0, bg = 1},
            {ind = 1, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -3.58, .22),
                vang = Angle(0, 90, 0),
            }
        },
        NameChange = "AMAD",
        TrueNameChange = "Colt Officer's ACP",
    },

    ["ur_1911_slide_compact_custom"] = {
        VMBodygroups = {
            {ind = 0, bg = 1},
            {ind = 1, bg = 5}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, -3.58, .22),
                vang = Angle(0, 90, 0),
            }
        },
        NameChange = "AMAD",
        TrueNameChange = "Colt Officer's ACP",
    },

    ["ur_1911_slide_custom"] = {
        VMBodygroups = {
            {ind = 1, bg = 4}
        },
    },

    ["ur_1911_slide_m45"] = {
        VMBodygroups = {
            {ind = 1, bg = 2},
            {ind = 4, bg = 1},
            {ind = 5, bg = 1},
        },
        --VMSkin = 1,
        NameChange = "AMASIN",
        TrueNameChange = "M45",
        Override_IronSightStruct = {
            Pos = Vector(-2.3, 10, 1.4),
            Ang = Angle(0.275, 0.07, 5.5),
        },
    },

    ["ur_1911_slide_m45_custom"] = {
        VMBodygroups = {
            {ind = 1, bg = 3},
            {ind = 4, bg = 1},
            {ind = 5, bg = 1},
        },
        --VMSkin = 1,
        NameChange = "AMASIN",
        TrueNameChange = "M45",
        Override_IronSightStruct = {
            Pos = Vector(-2.3, 10, 1.4),
            Ang = Angle(0.275, 0.07, 5.5),
        },
    },

    ["ur_1911_mag_ext"] = {
        VMBodygroups = {
            {ind = 3, bg = 1}
        }
    },

    ["ur_1911_grip_snake"] = {
        VMBodygroups = {
            {ind = 6, bg = 1}
        }
    },
    ["ur_1911_grip_pachmayr"] = {
        VMBodygroups = {
            {ind = 6, bg = 2}
        }
    },

    ["ur_1911_skin_silver"] = {
        VMSkin = 1
    },
    ["ur_1911_skin_tan"] = {
        VMSkin = 2
    },
    ["ur_1911_skin_custom"] = {
        VMSkin = 3
    },

    ["ur_1911_cal_9mm"] = {
        NameChange = "AMAS-9",
        TrueNameChange = "SR1911",
    },
    ["ur_1911_cal_10auto"] = {
        NameChange = "AMAS Elite",
        TrueNameChange = "Delta Elite",
    },

    ["optic_rail"] = {
        VMBodygroups = {
            {ind = 7, bg = 1}
        }
    },
    ["tac_rail"] = {
        VMBodygroups = {
            {ind = 8, bg = 1}
        }
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    -- local vm = data.vm
    -- if !IsValid(vm) then return end

    -- local att_skin = wep.Attachments[14].Installed
    -- local att_slide = wep.Attachments[2].Installed

    -- if att_slide == "ur_1911_slide_m45" and att_skin == "ur_1911_skin_custom" then
    --     vm:SetBodygroup(1, 3)
    -- end
end

-- SWEP.Hook_NameChange = function(wep,name)
--     if GetConVar("arccw_truenames"):GetBool() then
--         local atts = wep.Attachments
--         local cal = string.Replace(atts[3].Installed or "45acp", "ur_1911_cal_", "")

--         if cal == "10auto" then return GetConVar("arccw_truenames"):GetBool() and "Delta Elite" or ""
--         elseif cal == "9mm" then return GetConVar("arccw_truenames"):GetBool() and "SR1911" or ""
--         end

--         return "M1911"
--     else
--         return "AMAS"
--     end
-- end

-- Animations --

SWEP.Animations = {
    ["idle"] = {
        Source = "idle",
        Time = 10 / 30,
    },
    ["idle_empty"] = {
        Source = "idle_empty",
        Time = 10 / 30,
    },
    ["ready"] = {
        Source = "fix",
        Time = 1.6,
        MinProgress = 1.2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        ShellEjectAt = false,
        ProcDraw = true,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            {s = path .. "draw.ogg", t = 0.05},
            { s = path .. "mech.ogg",t = 28 / 60}, -- Temporary
            { s = path .. "slidedrop.ogg",t = 35 / 60},
        },
    },
    ["draw"] = {
        Source = "draw",
        Time = .75,
        MinProgress = .4,
        --ProcDraw = true,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "draw.ogg", t = 0.05}, -- Not Temporary
            {s = rutle, t = 0.1},
            --{s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["draw_empty"] = {
        Source = "draw_empty",
        Time = .75,
        MinProgress = .4,
        --ProcDraw = true,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "draw.ogg", t = 0.05}, -- Not Temporary
            {s = rutle, t = 0.1},
            --{s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["draw_jam"] = {
        Source = "draw_jam",
        Time = .75,
        MinProgress = .4,
        SoundTable = {
            {s = rottle, t = 0},
            {s = path .. "draw.ogg", t = 0.05}, -- Not Temporary
            {s = rutle, t = 0.1},
            --{s = common .. "raise.ogg", t = 0.05},
        },
    },
    ["holster"] = {
        Source = "holster",
        Time = .75,
        SoundTable = {
            {s = rutle, t = 0.05},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },
    ["holster_empty"] = {
        Source = "holster_empty",
        Time = .75,
        SoundTable = {
            {s = rutle, t = 0.05},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },
    ["holster_jam"] = {
        Source = "holster_jam",
        Time = 18 / 30,
        SoundTable = {
            {s = rutle, t = 0.05},
            {s = path .. "holster.ogg", t = 0.2}, -- Not Temporary
        },
    },

    ["fire"] = {
        Source = "fire",
        Time = 30 / 30,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = "fire",
        Time = 30 / 30,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["fire_empty"] = {
        Source = "fire_empty",
        Time = 24 / 30,
        ShellEjectAt = 0,
        SoundTable = {
            { s = path .. "mech_last.ogg", t = 0 },
        },
    },
    ["fire_iron_empty"] = {
        Source = "fire_empty",
        Time = 24 / 30,
        ShellEjectAt = 0,
        SoundTable = {
            { s = path .. "mech_last.ogg", t = 0 },
        },
    },
    ["fire_jammed"] = {
        Source = "fire_jam",
        Time = 30 / 30,
        MinProgress = 0.5,
        ShellEjectAt = false,
        SoundTable = {
            --{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }
        },
    },

    -- 7-R Reloads --

    ["reload_10"] = {
        Source = "reload_ext",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.3525,
        Time = 65 / 30,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.62,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = common .. "magpouch_pull_small.ogg", t = 0 / 60 },
            { s = common .. "magrelease.ogg", t = 17 / 60 },
            { s = path .. "magout.ogg", t = 26 / 60 },
            { s = rottle, t = 10 / 60 },
            { s = rottle, t = 55 / 60 },
            { s = common ..  "magpouch_replace_small.ogg", t = 80 / 60 },
            { s = path .. "magin.ogg", t = 50 / 60 },
        },
    },
    ["reload_empty_10"] = {
        Source = "reload_empty_ext",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.75,
        Time = 75 / 30,
        LastClip1OutTime = 0.76,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.55,
        LHIKOut = 0.7,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = common .. "magrelease.ogg", t = 7 / 60 },
            { s = path .. "magout.ogg", t = 16 / 60 },
            { s = rottle, t = 10 / 60 },
            { s = common .. "magpouch_pull_small.ogg", t = 29 / 60 },
            { s = common .. "pistol_magdrop.ogg", t = 40 / 60 },
            { s = rottle, t = 55 / 60 },
            { s = path .. "magin.ogg", t = 64 / 60 },
            { s = rottle, t = 90 / 60 },
            { s = path .. "slidedrop.ogg", t = 94 / 60 },
        },
    },

    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.3525,
        Time = 65 / 30,
        LastClip1OutTime = 0.9,
        LHIK = true,
        LHIKIn = 0.2,
        LHIKEaseIn = 0.2,
        LHIKEaseOut = 0.2,
        LHIKOut = 0.62,
        SoundTable = {
            { s = rottle,                                   t = 0 / 60 },
            { s = common .. "magpouch_pull_small.ogg",      t = 5 / 60 },
            { s = rottle,                                   t = 10 / 60 },
            { s = common .. "magrelease.ogg",               t = 17 / 60 },
            { s = path .. "magout.ogg",                     t = 26 / 60 },
            { s = path .. "magin.ogg",                      t = 45 / 60 },
            { s = rottle,                                   t = 55 / 60 },
            { s = common ..  "magpouch_replace_small.ogg",  t = 80 / 60 },
            { s = path .. "grab.ogg",                       t = 110 / 60 },
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_PISTOL,
        MinProgress = 1.75,
        Time = 75 / 30,
        LastClip1OutTime = 0.76,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKEaseIn = 0.1,
        LHIKEaseOut = 0.55,
        LHIKOut = 0.7,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = common .. "magrelease.ogg", t = 7 / 60 },
            { s = path .. "magout.ogg", t = 16 / 60 },
            { s = rottle, t = 10 / 60 },
            { s = common .. "magpouch_pull_small.ogg", t = 29 / 60 },
            { s = common .. "pistol_magdrop.ogg", t = 40 / 60 },
            { s = rottle, t = 55 / 60 },
            { s = path .. "magin.ogg", t = 64 / 60 },
            { s = rottle, t = 90 / 60 },
            { s = path .. "slidedrop.ogg", t = 94 / 60 },
            { s = path .. "grab.ogg", t = 125 / 60 },
        },
    },

    -- Jam Animations --

    ["fix"] = {
        Source = "fix",
        --Time = 40 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        ShellEjectAt = 30 / 60,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = path .. "mech.ogg",t = 28 / 60}, -- Temporary
            { s = path .. "slidedrop.ogg",t = 35 / 60},
        },
    },

    ["fix_empty"] = {
        Source = "fix_empty",
        --Time = 40 / 30,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        ShellEjectAt = 30 / 60,
        SoundTable = {
            { s = rottle, t = 0 / 60 },
            { s = path .. "mech.ogg",t = 28 / 60},
        },
    },

    ["idle_jammed"] = {
        Source = "idle_jam",
        -- time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
       -- SoundTable = {
        -- },
    },

    -- -- Inspecc --

    ["enter_inspect"] = {
        Source = "enter_inspect",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-pistol-04.ogg", t = 0},
        },
    },
    ["idle_inspect"] = {
        Source = "idle_inspect",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect"] = {
        Source = "exit_inspect",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            {s = rottle, t = 0.05},
            {s = common .. "movement-pistol-03.ogg", t = 0.1},
            {s = common .. "movement-pistol-01.ogg", t = 1},
            {s = rottle, t = 1},
        },
    },

    ["enter_inspect_empty"] = {
        Source = "enter_inspect_empty",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-pistol-04.ogg", t = 0},
        },
    },
    ["idle_inspect_empty"] = {
        Source = "idle_inspect_empty",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_empty"] = {
        Source = "exit_inspect_empty",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            {s = rottle, t = 0.05},
            {s = common .. "movement-pistol-03.ogg", t = 0.1},
            {s = common .. "movement-pistol-01.ogg", t = 1},
            {s = rottle, t = 1},
        },
    },
    ["enter_inspect_jammed"] = {
        Source = "enter_inspect_jam",
        time = 35 / 60,
        LHIK = true,
        LHIKIn = 0.1,
        LHIKOut = 0,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-pistol-04.ogg", t = 0},
        },
    },
    ["idle_inspect_jammed"] = {
        Source = "idle_inspect_jam",
        time = 72 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0,
    },
    ["exit_inspect_jammed"] = {
        Source = "exit_inspect_jam",
        time = 66 / 60,
        LHIK = true,
        LHIKIn = 0,
        LHIKEaseOut = 0.3,
        LHIKOut = 0.84,
        SoundTable = {
            {s = rottle, t = 0.05},
            {s = common .. "movement-pistol-03.ogg", t = 0.1},
            {s = common .. "movement-pistol-01.ogg", t = 1},
            {s = rottle, t = 1},
        },
    },
}

-- ADS animation blending, thanks fesiug -- 

SWEP.Hook_Think = ArcCW.UC.ADSReload


-- Attachments --

SWEP.Attachments = {
    {
        PrintName = "Optic",
        Slot = {"optic_lp"},
        DefaultAttName = "Iron Sights",
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(-0.01, -2.3, 1.6),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"optic_rail"},
    },
    {
        PrintName = "Slide",
        Slot = {"ur_m1911_slide"},
        DefaultAttIcon = Material("entities/att/ur_1911/slide_std.png","mips smooth"),
        DefaultAttName = "5\" Government Slide",
    },
    {
        PrintName = "Caliber",
        Slot = {"ur_m1911_caliber"},
        DefaultAttIcon = Material("entities/att/uc_bullets/45acp.png","mips smooth"),
        DefaultAttName = ".45 ACP",
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(3.07, -3.8, -27),
            vang = Angle(90, 0, -90),
        },
        DefaultFlags = {"cal_subsonic"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle"},
        Bone = "vm_barrel",
        Offset = {
            vpos = Vector(0.02, -4.4, 0.12),
            vang = Angle(0, 90, 0),
        },
        InstalledEles = {"nofh"},
        ExcludeFlags = {"barrel_annihilator"},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac_pistol"},
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(0, 0, 4),
            vang = Angle(90, 0, -90),
        },
        InstalledEles = {"tac_rail"},
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_m1911_mag"},
        DefaultAttIcon = Material("entities/att/ur_1911/mag7.png","mips smooth"),
        DefaultAttName = "7-Round Mag",
    },
    {
        PrintName = "Stock",
        Slot = {"uc_stock", "go_stock_pistol_bt"},
        VMScale = Vector(1, 1, 1),
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(0, 3, -3),
            vang = Angle(90, 0, -90),
        },
    },
    {
        PrintName = "Grip",
        DefaultAttName = "Factory Grip",
        DefaultAttIcon = Material("entities/att/ur_1911/grip.png","mips smooth"),
        Slot = "ur_m1911_grip"
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm"},
        FreeSlot = true,
        Bone = "vm_pivot",
        Offset = {
            vpos = Vector(0.35, -0.5, 3),
            vang = Angle(90, 0, -90),
        },
        VMScale = Vector(.75,.75,.75),
    },
    {
        PrintName = "Finish",
        Slot = {"ur_m1911_skin"},
        DefaultAttName = "Grey",
        DefaultAttIcon = Material("entities/att/ur_1911/skin.png","mips smooth"),
        FreeSlot = true,
    },
}

--lua/weapons/arccw_ur_deag357.lua:
return gluapack()()
--lua/weapons/arccw_ur_g3.lua:
return gluapack()()
--lua/weapons/arccw_ur_hk33a3.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_g3.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets Rifles"
end

SWEP.PrintName = "CN66"
SWEP.TrueName = "HK33A2"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[2].Installed = "ur_g3_barrel_15"
SWEP.Attachments[3].Installed = "ur_g3_rec_hk33"
--SWEP.Attachments[8].Installed = "ur_g3_stock_collapsible"
--SWEP.Attachments[16].Installed = "ur_g3_skin_olive"
--lua/weapons/arccw_ur_g3.lua:
return gluapack()()
--lua/weapons/arccw_ur_mp510.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_mp5.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets SMGs"
end

SWEP.PrintName = "PK5/10"
SWEP.TrueName = "MP5/10"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[3].Installed = "ur_mp5_caliber_10auto"
SWEP.Attachments[5].Installed = "ur_mp5_ub_ris" -- "uc_grip_troyshort"
SWEP.Attachments[8].Installed = "ur_mp5_stock_a3"
SWEP.Attachments[14].Installed = "ur_mp5_optic_mount"

SWEP.Attachments[8].ToggleLock = true
--lua/weapons/arccw_ur_mp5sd3.lua:
if !file.Exists("arccw/shared/sh_1_ur.lua","LUA") then return end

include("weapons/arccw_ur_mp5.lua")

SWEP.Category = "ArcCW - UC Presets"
if GetConVar("arccw_uc_presets_categorize"):GetBool() then
    SWEP.Category = "ArcCW - UC Presets SMGs"
end

SWEP.PrintName = "PK5SD6"
SWEP.TrueName = "MP5SD6"
if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

SWEP.Attachments[1].Installed = "ur_mp5_optic_alt"
SWEP.Attachments[2].Installed = "ur_mp5_barrel_sd"
--SWEP.Attachments[3].Installed = "ur_mp5_caliber_noburst"
SWEP.Attachments[8].Installed = "ur_mp5_stock_a3"

SWEP.Attachments[8].ToggleLock = true
--lua/weapons/arccw_ur_psg1.lua:
return gluapack()()
--lua/weapons/arccw_ur_ak.lua:
return gluapack()()
--lua/weapons/arccw_ur_ak.lua:
SWEP.Base = "arccw_base"
SWEP.Spawnable = true -- this obviously has to be set to true
SWEP.Category = "ArcCW - Urban Coalition" -- edit this if you like
SWEP.UC_CategoryPack = "2Urban Renewal"
SWEP.AdminOnly = false

SWEP.PrintName = "KF-67"
SWEP.TrueName = "AKM"

if GetConVar("arccw_truenames"):GetBool() then
    SWEP.PrintName = SWEP.TrueName
end

local descStart = "One of the first assault rifles, wielded around the world to this day for its cheap price, quick production, ease of maintenance, and infallible reliability. Consequently, it has become the most popular rifle ever; a constant of freedom fighters and third-world dictators virtually everywhere. One fifth of all small arms in existence can be traced to this design.\n\n"
local desc_762 = "The default pattern is well-rounded and hard-hitting, but kicks harder than other weapons of its class."
local desc_545 = "With a heavier frame than other service rifles, the AK-74 platform is accurate and easy to control."
local desc_74u = "This PDW variant sacrifices range and control to fit the power of a rifle into a very compact form."
local desc_9mm = "Well-rounded submachine gun that shares common parts with AK rifles. For its widespread use by a variety of security divisions, it can be described as a Russian counterpart to the MP5.\n\nThe moniker \"Vityaz\" translates to \"knight.\""
local desc_12g = "Magazine-fed semi automatic shotgun based on the Kalashnikov pattern. It is a popular civilian weapon due to the comparative simplicity of Russia's smoothbore gun licenses, but it has also been used by security firms around the world.\n\nIts low accuracy is compensated for by a much faster reload time than tube-fed designs."
local desc_556 = "This international variant has a lower damage output than the Russian cartridges, but boasts substantially lower recoil."
local desc_366 = "AK-pattern shotgun chambered in .366 TKM, a sporting cartridge that uses reshaped M43 casings. It is considered a shotgun because of its smoothbore barrel, a change made to circumvent Russian rifle laws. Despite the lack of rifling, it achieves similar ballistics to a proper AK-47."

SWEP.Trivia_Class = "Assault Rifle"
SWEP.Trivia_Desc = descStart .. desc_762
SWEP.Trivia_Manufacturer = "Izhmash"
SWEP.Trivia_Calibre = "7.62x39mm Soviet"
SWEP.Trivia_Mechanism = "Gas-Operated Rotating Bolt"
SWEP.Trivia_Country = "Soviet Union"
SWEP.Trivia_Year = 1959

SWEP.Slot = 2
SWEP.CamAttachment = 3

SWEP.UseHands = true

SWEP.ViewModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.WorldModel = "models/weapons/arccw/c_ur_ak.mdl"
SWEP.ViewModelFOV = 70

SWEP.DefaultBodygroups = "010000800120"

-- Damage --

SWEP.Damage = 50 -- 2 shot close range kill
SWEP.DamageMin = 25 -- 4 shot long range kill
SWEP.RangeMin = 30
SWEP.Range = 300 -- 3 shot until ~170m
SWEP.Penetration = 16
SWEP.DamageType = DMG_BULLET
SWEP.ShootEntity = nil
SWEP.MuzzleVelocity = 715
SWEP.PhysBulletMuzzleVelocity = 715

SWEP.BodyDamageMults = ArcCW.UC.BodyDamageMults

-- Mag size --

SWEP.ChamberSize = 1
SWEP.Primary.ClipSize = 30
SWEP.ExtendedClipSize = 40
SWEP.ReducedClipSize = 15

-- Recoil --

SWEP.Recoil = 0.75
SWEP.RecoilSide = 0.3

SWEP.RecoilRise = 0.6
SWEP.RecoilPunch = 1
SWEP.VisualRecoilMult = 1
SWEP.MaxRecoilBlowback = 1
SWEP.MaxRecoilPunch = 1
SWEP.RecoilPunchBack = 2

SWEP.Sway = 0.6

-- Firerate / Firemodes --

SWEP.Delay = 60 / 600
SWEP.Num = 1
SWEP.Firemodes = {
    {
        Mode = 2,
    },
    {
        Mode = 1,
    },
    {
        Mode = 0,
    },
}

SWEP.ShootPitch = 100
SWEP.ShootVol = 120

SWEP.ProceduralRegularFire = false
SWEP.ProceduralIronFire = false

SWEP.ReloadInSights = true

-- NPC --

SWEP.NPCWeaponType = "weapon_ar2"
SWEP.NPCWeight = 60

-- Accuracy --

SWEP.AccuracyMOA = 5
SWEP.HipDispersion = 800
SWEP.MoveDispersion = 250
SWEP.JumpDispersion = 1000

SWEP.Primary.Ammo = "ar2"
SWEP.MagID = "ak"

SWEP.HeatCapacity = 75
SWEP.HeatDissipation = 15
SWEP.HeatDelayTime = 3

-- SWEP.Malfunction = true
SWEP.MalfunctionMean = 200
--SWEP.MeleeTime = 1.5

-- Speed multipliers --

SWEP.SpeedMult = 0.9
SWEP.SightedSpeedMult = 0.75
SWEP.SightTime = 0.35
SWEP.ShootSpeedMult = 0.75

local path = ")weapons/arccw_ur/ak/"
local path1 = ")weapons/arccw_ur/mp5/"
local common = ")/arccw_uc/common/"
local rottle = {common .. "cloth_1.ogg", common .. "cloth_2.ogg", common .. "cloth_3.ogg", common .. "cloth_4.ogg", common .. "cloth_6.ogg", common .. "rattle.ogg"}
local ratel = {common .. "rattle1.ogg", common .. "rattle2.ogg", common .. "rattle3.ogg"}
local rutle = {common .. "movement-rifle-01.ogg",common .. "movement-rifle-02.ogg",common .. "movement-rifle-03.ogg",common .. "movement-rifle-04.ogg"}
--SWEP.FirstShootSound = path .. "fire_first.ogg"

SWEP.ShootSound = {
    path .. "fire-01.ogg",
    path .. "fire-02.ogg",
    path .. "fire-03.ogg",
    path .. "fire-04.ogg",
    path .. "fire-05.ogg",
    path .. "fire-06.ogg"
}
SWEP.ShootSoundSilenced = {
    path .. "fire-sup-01.ogg",
    path .. "fire-sup-02.ogg",
    path .. "fire-sup-03.ogg",
    path .. "fire-sup-04.ogg",
    path .. "fire-sup-05.ogg",
    path .. "fire-sup-06.ogg"
}
SWEP.DistantShootSound = nil
SWEP.DistantShootSoundSilenced = nil
SWEP.ShootDrySound = path .. "dryfire.ogg"

local tail = ")/arccw_uc/common/762x39/"

SWEP.DistantShootSoundOutdoors = {
    tail .. "fire-dist-762x39-rif-ext-01.ogg",
    tail .. "fire-dist-762x39-rif-ext-02.ogg",
    tail .. "fire-dist-762x39-rif-ext-03.ogg",
    tail .. "fire-dist-762x39-rif-ext-04.ogg",
    tail .. "fire-dist-762x39-rif-ext-05.ogg",
    tail .. "fire-dist-762x39-rif-ext-06.ogg"
}
SWEP.DistantShootSoundIndoors = {
    common .. "fire-dist-int-rifle-01.ogg",
    common .. "fire-dist-int-rifle-02.ogg",
    common .. "fire-dist-int-rifle-03.ogg",
    common .. "fire-dist-int-rifle-04.ogg",
    common .. "fire-dist-int-rifle-05.ogg",
    common .. "fire-dist-int-rifle-06.ogg"
}
SWEP.DistantShootSoundOutdoorsSilenced = {
    common .. "sup-tail-01.ogg",
    common .. "sup-tail-02.ogg",
    common .. "sup-tail-03.ogg",
    common .. "sup-tail-04.ogg",
    common .. "sup-tail-05.ogg",
    common .. "sup-tail-06.ogg",
    common .. "sup-tail-07.ogg",
    common .. "sup-tail-08.ogg",
    common .. "sup-tail-09.ogg",
    common .. "sup-tail-10.ogg"
}
SWEP.DistantShootSoundIndoorsSilenced = {
    common .. "fire-dist-int-pistol-light-01.ogg",
    common .. "fire-dist-int-pistol-light-02.ogg",
    common .. "fire-dist-int-pistol-light-03.ogg",
    common .. "fire-dist-int-pistol-light-04.ogg",
    common .. "fire-dist-int-pistol-light-05.ogg",
    common .. "fire-dist-int-pistol-light-06.ogg"
}
SWEP.DistantShootSoundOutdoorsVolume = 1
SWEP.DistantShootSoundIndoorsVolume = 1
SWEP.Hook_AddShootSound = ArcCW.UC.InnyOuty

SWEP.MuzzleEffect = "muzzleflash_6"
SWEP.ShellEffect = "arccw_uc_shelleffect"
SWEP.ShellModel = "models/weapons/arccw/uc_shells/762x39.mdl"
SWEP.ShellPitch = 90
SWEP.ShellScale = .666
SWEP.ShellRotateAngle = Angle(0, 0, 0)
SWEP.UC_ShellColor = Color(0.7 * 255, 0.2 * 255, 0.2 * 255)

SWEP.MuzzleEffectAttachment = 1 -- which attachment to put the muzzle on
SWEP.CaseEffectAttachment = 2 -- which attachment to put the case effect on

SWEP.BulletBones = {
    [1] = "tag_mag2",
}

SWEP.IronSightStruct = {
    Pos = Vector(-2.61, -2, 0.45),
    Ang = Angle(0.60, 0.274, 5.53),
    Magnification = 1.1,
    SwitchToSound = "", -- sound that plays when switching to this sight
    CrosshairInSights = false
}
SWEP.LaserOffsetAngle = Angle(0, 0, 0)
SWEP.LaserIronsAngle = Angle(0, 0, 0)

SWEP.HoldtypeHolstered = "passive"
SWEP.HoldtypeActive = "ar2"
SWEP.HoldtypeSights = "rpg"

SWEP.AnimShoot = ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2

SWEP.ActivePos = Vector(0.5, 0, 0)
SWEP.ActiveAng = Angle(0, 0, 0)

SWEP.SprintPos = Vector(0, 0, 0)
SWEP.SprintAng = Angle(0, 0, 0)

SWEP.CrouchPos = Vector(-2, -2, -0.6)
SWEP.CrouchAng = Angle(0, 0, -14)

SWEP.HolsterPos = Vector(-1, -1, 1.2)
SWEP.HolsterAng = Angle(-15, 8, -10)

SWEP.BarrelOffsetSighted = Vector(0, 0, 0)
SWEP.BarrelOffsetHip = Vector(0, 0, 0)

-- SWEP.CustomizePos = Vector(6.5, 0.8, -0.2)
-- SWEP.CustomizeAng = Angle(8, 22, 15)

SWEP.CustomizePos = Vector(0, 0, 0)
SWEP.CustomizeAng = Angle(0, 0, 0)

SWEP.BarrelLength = 24

SWEP.AttachmentElements = {
    ["barrel_74m"] = {
        VMBodygroups = {{ind = 1, bg = 3}}
    },
    ["barrel_74m_red"] = {
        VMBodygroups = {{ind = 1, bg = 10}}
    },
    ["barrel_74m_green"] = {
        VMBodygroups = {{ind = 1, bg = 11}}
    },
    ["barrel_akm"] = {
        VMBodygroups = {{ind = 1, bg = 0}}
    },
    ["barrel_alpha"] = {
        VMBodygroups = {
            {ind = 1, bg = 7},
            -- {ind = 7, bg = 6},
            -- {ind = 8, bg = 2},
        },
    },
    ["barrel_rpk"] = {
        VMBodygroups = {
            {ind = 7, bg = 1},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 32.2, 2.6),
            vang = Angle(0, 270, 0),
        }},
    Override_IronSightStruct = {
            Pos = Vector(-2.625, -2, 0.68),
            Ang = Angle(-0.1, 0.274, 5.53),
            Magnification = 1,
    }
    },
    ["barrel_rpk74m"] = {
        VMBodygroups = {
            {ind = 1, bg = 5},
            -- {ind = 7, bg = 1},
            -- {ind = 8, bg = 2}
        },
        -- AttPosMods = {[4] = {
        --     vpos = Vector(0, 32.2, 2.6),
        --     vang = Angle(0, 270, 0),
        -- }},
        -- Override_IronSightStruct = {
        -- 	Pos = Vector(-2.625, -2, 0.68),
        -- 	Ang = Angle(-0.1, 0.274, 5.53),
        -- 	Magnification = 1,
        -- }
    },
    ["barrel_krinkov"] = {
        VMBodygroups = {
            {ind = 1, bg = 6},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 4, bg = 1},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 15, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,10,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,10,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.638, -2, 0.9),
            Ang = Angle(-1, 0.12, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_vityaz"] = {
        VMBodygroups = {
            {ind = 1, bg = 8},
            {ind = 7, bg = 5},
            {ind = 8, bg = 2},
            {ind = 5, bg = 1}
        },
        AttPosMods = {
            [4] = {
                vpos = Vector(0, 16.5, 2.85),
                vang = Angle(0, 270, 0),
            },
            [7] = {
                vpos = Vector(0,11,1.7),
                vang = Angle(90, -90, -90),
                SlideAmount = {
                    vmin = Vector(0,10,1.7),
                    vmax = Vector(0,11,1.7)
                },
            },
            [8] = {
                vpos = Vector(-0.8, 11.75, 2.9),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            }
        },
        Override_IronSightStruct = {
            Pos = Vector(-2.62, -2, 0.75),
            Ang = Angle(-0.42, 0.2, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_t56"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 2},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_t56_ext"] = {
        VMBodygroups = {
            {ind = 7, bg = 3},
            {ind = 11, bg = 3},
            {ind = 8, bg = 2}
        },
    },
    ["barrel_vepr"] = {
        VMBodygroups = {
            --{ind = 1, bg = 9},
            {ind = 7, bg = 4},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 28.5, 2.7),
            vang = Angle(0, 270, -0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, -2, 0.76),
            Ang = Angle(-0.3, 0.18, 5.53),
            Magnification = 1,
        }
    },

    ["ur_ak_hg_vepr"] = {
        VMBodygroups = {
            {ind = 1, bg = 9},
        },
    },

    ["barrel_105"] = {
        VMBodygroups = {
            --{ind = 1, bg = 3},
            {ind = 7, bg = 2},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 19.9, 2.7),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.6, -2, 0.48),
            Ang = Angle(0.6, 0.265, 5.53),
            Magnification = 1,
        }
    },
    ["barrel_dong"] = {
        VMBodygroups = {{ind = 1, bg = 2}}, -- This will show up regardless of barrel selection because underbarrel atts are always processed after barrel atts
        AttPosMods = {[6] = {
            SlideAmount = {
                vmin = Vector(0,12,1.9),
                vmax = Vector(0,12,1.9)
            },
        }}
    },

    ["muzzle_akm"] = {
        VMBodygroups = {{ind = 8, bg = 1}}
    },
    ["muzzle_ak74"] = {
        VMBodygroups = {{ind = 8, bg = 3}}
    },
    ["muzzle_aku"] = {
        VMBodygroups = {{ind = 8, bg = 6}}
    },
    ["muzzle_bayonet"] = {
        VMBodygroups = {{ind = 11, bg = 1}}
    },

    ["stock_alpha"] = {
        VMBodygroups = {
            {ind = 6, bg = 4},
            {ind = 3, bg = 1},
        }

    },
    ["stock_aks"] = {
        VMBodygroups = {
            {ind = 6, bg = 3},
            {ind = 3, bg = 1},
    }
    },
    ["stock_aks_folded"] = {
        VMBodygroups = {
            {ind = 6, bg = 10},
            {ind = 3, bg = 1},
        }

    },
    ["stock_underfolder"] = {
        VMBodygroups = {{ind = 6, bg = 2}}
    },
    ["stock_underfolder_folded"] = {
        VMBodygroups = {{ind = 6, bg = 1}}
    },
    ["stock_ak74m"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 12}
        }
    },
    ["stock_ak74m_folded"] = {
        VMBodygroups = {
            {ind = 3, bg = 1},
            {ind = 6, bg = 13}
        }
    },
    ["stock_rpk"] = {
        VMBodygroups = {{ind = 6, bg = 5}}
    },
    ["stock_akn"] = {
        VMBodygroups = {{ind = 6, bg = 0}}
    },
    ["stock_skeletal"] = {
        VMBodygroups = {
            {ind = 6, bg = 6},
            {ind = 3, bg = 1},
        }
    },
    ["stock_vepr"] = {
        VMBodygroups = {
            {ind = 6, bg = 7},
            {ind = 9, bg = 4}
        }
    },
    ["stock_none"] = {
        VMBodygroups = {
            {ind = 6, bg = 9},
            {ind = 3, bg = 1},
        }
    },

    ["mag_762_75"] = {
        VMBodygroups = {{ind = 2, bg = 1}}
    },
    ["mag_762_bakelite"] = {
        VMBodygroups = {{ind = 2, bg = 11}}
    },
    ["mag_762_pmag"] = {
        VMBodygroups = {{ind = 2, bg = 12}}
    },
    ["mag_545_30"] = {
        VMBodygroups = {{ind = 2, bg = 2}}
    },
    ["mag_556_30"] = {
        VMBodygroups = {{ind = 2, bg = 10}}
    },
    ["mag_545_45"] = {
        VMBodygroups = {{ind = 2, bg = 3}}
    },
    ["mag_9mm"] = {
        VMBodygroups = {{ind = 2, bg = 4}}
    },
    ["mag_12g"] = {
        VMBodygroups = {{ind = 2, bg = 5}}
    },
    ["mag_366"] = {
        VMBodygroups = {{ind = 2, bg = 6}}
    },

    ["grip_akm"] = {
        VMBodygroups = {{ind = 9, bg = 0}}
    },
    ["grip_alpha"] = {
        VMBodygroups = {{ind = 9, bg = 2}}
    },
    ["grip_saiga"] = {
        VMBodygroups = {{ind = 9, bg = 3}}
    },

    ["cover_ribbed"] = {
        VMBodygroups = {{ind = 10, bg = 0}}
    },
    ["cover_alpha"] = {
        VMBodygroups = {{ind = 10, bg = 1}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.68),
            vang = Angle(0, -90, 0),
        }}
    },
    ["optic_raillaser"] = {
        AttPosMods = {
            [8] = {
                vpos = Vector(0.95, 2.5, 4.05),
                vang = Angle(0, -90, 125),
            },
        },
    },
    ["cover_ak12"] = {
        VMBodygroups = {{ind = 10, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 3.5, 4.67),
            vang = Angle(0, -90, 0),
        }}
    },

    ["grip_ak12"] = {
        VMBodygroups = {{ind = 9, bg = 5}}
    },
    ["stock_ak12"] = {
        VMBodygroups = {{ind = 6, bg = 11}},
    },
    ["handguard_ak12"] = {
        VMBodygroups = {{ind = 1, bg = 12}},
        --[[AttPosMods = {[6] = {
            vpos = Vector(0, 11.75, 2.2),
            vang = Angle(90, -90, -90),
        }}]]
        AttPosMods = {
            [8] = {
                vpos = Vector(-0.7, 13.5, 3.8),
                vang = Angle(-90, 270, 0),
                wang = Angle(-90, 270, 0),
            },
            [7] = {
                vpos = Vector(0, 11.75, 2.2),
                vang = Angle(90, -90, -90),
            }
        },
    },
    ["barrel_ak12"] = {
        VMBodygroups = {
            {ind = 7, bg = 6},
            {ind = 8, bg = 2}
        },
        AttPosMods = {[4] = {
            vpos = Vector(0, 23.5, 2.8),
            vang = Angle(0, 270, 0),
        }},
        Override_IronSightStruct = {
            Pos = Vector(-2.68, 0, 1.3),
            Ang = Angle(-2.02, 0.028, 5.53),
            Magnification = 1,
        }
        --RequireFlags = {"cover_rail"},
    },
    ["muzzle_ak12"] = {
        VMBodygroups = {{ind = 8, bg = 2}},
    },
    ["reciever_ak12"] = {
        VMBodygroups = {{ind = 0, bg = 1}}
    },
    ["sight_ak12"] = {
        VMBodygroups = {{ind = 4, bg = 3}},
        RequireFlags = {"cover_rail", "ak_railedguard"},
        Override_IronSightStruct = {
            Pos = Vector(-2.63, 0, 0.79),
            Ang = Angle(-1.12, 0.116, 5.53),
            Magnification = 1,
        },
        Override_IronSightStruct_Priority = 2,
    },
    ["mag_545_ak12"] = {
        VMBodygroups = {{ind = 2, bg = 7}}
    },
    ["mag_545_black"] = {
        VMBodygroups = {{ind = 2, bg = 9}}
    },
    ["mag_308"] = {
        VMBodygroups = {{ind = 2, bg = 8}}
    },

    ["cover_trail"] = {
        VMBodygroups = {{ind = 4, bg = 4}},
        AttPosMods = {[1] = {
            vpos = Vector(0, 8.2, 5.20),
            vang = Angle(0, -90, 0),
        }}
    },
}

SWEP.Hook_ModifyBodygroups = function(wep, data)
    local akOptics = {["uc_optic_pso1"] = true, ["uc_optic_kobra"] = true} -- Will need to update this list if more AK optics get added
    local railHgs = {["default"] = true, ["type3"] = true}
    local bipodBarrs = {["rpk"] = true}
    local shortBarrs = {["krinkov"] = true, ["vityaz"] = true}
    local intCals = {["545"] = true, ["556"] = true, ["545_ak12"] = true}

    local optic = wep.Attachments[1].Installed
    local barr = string.Replace(wep.Attachments[2].Installed or "default","ur_ak_barrel_","")
    local hg = string.Replace(wep.Attachments[3].Installed or "default","ur_ak_hg_","")
    local muzz = wep.Attachments[4].Installed
    local cal = string.Replace(wep.Attachments[5].Installed or "default","ur_ak_cal_","")
    local ub = wep.Attachments[7].Installed-- or wep.Attachments[17].Installed
    local upper = wep.Attachments[15].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    local taclaser = (wep.Attachments[16].Installed == "ur_ak_charm_tl")

    local vm = data.vm
    if !IsValid(vm) then return end

    -- Default muzzle devices
    if !muzz or muzz == "ur_ak_muzzle_bayonet" then
        if barr == "ak12" and (cal == "default" or intCals[cal]) then
            vm:SetBodygroup(8,3)
        elseif barr == "krinkov" then
            vm:SetBodygroup(8,4)
        elseif barr == "default" or barr == "t56" then
            if cal == "default" then
                vm:SetBodygroup(8,1)
            elseif intCals[cal] then
                vm:SetBodygroup(8,3)
            else
                vm:SetBodygroup(8,0)
            end
        end
    elseif barr == "default" then
        vm:SetBodygroup(8,0)
    else
        vm:SetBodygroup(8,2)
    end

    --
    if taclaser and !akOptics[optic] then
        vm:SetBodygroup(12,2)
    else
        if optic and !alpha and !akOptics[optic] then
            vm:SetBodygroup(12,1)
        else
            vm:SetBodygroup(12,0)
        end
    end

    -- Railed underbarrel
    if ub and hg != "ur_ak_hg_dong" and barr != "vityaz" then
        if barr == "krinkov" then
            vm:SetBodygroup(13,2)
        elseif railHgs[hg] then
            vm:SetBodygroup(1,13)
        else
            vm:SetBodygroup(13,1)
        end
    else
        vm:SetBodygroup(13,0)
    end

    -- RPK bipod
    if bipodBarrs[barr] then
        vm:SetBodygroup(7, (wep:GetInBipod() and (wep.LastAnimKey ~= "enter_bipod" or wep.LastAnimFinishTime < CurTime())) and 7 or 1)
    end
end

SWEP.ExtraSightDist = 2
SWEP.GuaranteeLaser = false

SWEP.WorldModelOffset = {
    pos = Vector(-7, 4, -4),
    ang = Angle(-12, 0, 180)
}

SWEP.MirrorVMWM = true

SWEP.Attachments = {
    {
        PrintName = "Optic",
        DefaultAttName = "Iron Sights",
        Slot = {"optic","optic_sniper","ur_ak_optic"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 2, 4.92),
            vang = Angle(0, -90, 0),
        },
        CorrectivePos = Vector(0, 0, -0.0),
        CorrectiveAng = Angle(-1.9, 180.15, 0),
        VMScale = Vector(1, 1, 1),
        -- SlideAmount = {
        --     vmin = Vector(0, 2-1, 4.55),
        --     vmax = Vector(0, 2+0.5, 4.55),
        -- },
--        RequireFlags = {"cover_rail"},
--        HideIfBlocked = true,
        -- InstalledEles = {"optic_rail"},
    },
    {
        PrintName = "Barrel",
        DefaultAttName = "16\" Standard Barrel",
        DefaultAttIcon = Material("entities/att/ur_ak/barrel/std.png", "mips smooth"),
        Slot = "ur_ak_barrel",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "Handguard",
        DefaultAttName = "Factory Handguard",
        DefaultAttIcon = Material("entities/att/ur_ak/handguards/std.png", "mips smooth"),
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        Slot = "ur_ak_hg",
        ExcludeFlags = {"barrel_carbine"},
    },
    {
        PrintName = "Muzzle",
        DefaultAttName = "Standard Muzzle",
        Slot = {"muzzle","ur_ak_muzzle"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 24.1, 2.7),
            vang = Angle(0, 270, 0),
        },
        ExcludeFlags = {"ur_ak_nomuzzle"},
        --Installed = "ur_ak_muzzle_akm"
    },
    {
        PrintName = "Receiver",
        DefaultAttName = "7.62x39mm Reciever",
        DefaultAttIcon = Material("entities/att/uc_bullets/762x39.png", "mips smooth"),
        Slot = {"ur_ak_cal"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(2.8, -4.2, -11.5),
            vang = Angle(90, 0, -90),
        },
        DefaultFlags = {"cal_default"}
    },
    {
        PrintName = "Magazine",
        Slot = {"ur_ak_mag"},
        DefaultAttName = "30-Round Mag",
        DefaultAttIcon = Material("entities/att/ur_ak/magazines/762_30.png", "mips smooth"),
    },
    {
        PrintName = "Underbarrel",
        Slot = {"foregrip","ur_ak_ub"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0,12, 1.9),
            vang = Angle(90, -90, -90),
        },
        VMScale = Vector(1, 1, 1),
        SlideAmount = {
            vmin = Vector(0,10.5,1.9),
            vmax = Vector(0,13.5,1.9)
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs"},
        MergeSlots = {17},
    },
    {
        PrintName = "Tactical",
        Slot = {"tac"},
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 19.6, 2.1),
            vang = Angle(0, 270, 0),
        },
        GivesFlags = {"tac"},
        --InstalledEles = {"ud_m16_clamp_fullsize"}
    },
    {
        PrintName = "Grip Type",
        Slot = {"ur_ak_grip"},
        DefaultAttName = "Factory Grip",
        DefaultAttIcon = Material("entities/att/ur_ak/grip_modern.png", "mips smooth"),
        ExcludeFlags = {"stock_vepr"},
    },
    {
        PrintName = "Stock",
        Slot = {"ur_ak_stock"},
        DefaultAttName = "Factory Stock",
        DefaultAttIcon = Material("entities/att/ur_ak/stock/n.png", "mips smooth"),
    },
    {
        PrintName = "Ammo Type",
        DefaultAttName = "\"FMJ\" Full Metal Jacket",
        DefaultAttIcon = Material("entities/att/arccw_uc_ammo_generic.png", "mips smooth"),
        Slot = "uc_ammo",
    },
    {
        PrintName = "Powder Load",
        Slot = "uc_powder",
        DefaultAttName = "Standard Load"
    },
    {
        PrintName = "Training Package",
        Slot = "uc_tp",
        DefaultAttName = "Basic Training"
    },
    {
        PrintName = "Internals",
        Slot = "uc_fg", -- Fire group
        DefaultAttName = "Standard Internals"
    },
    {
        PrintName = "Dust Cover",
        DefaultAttName = "Ribbed Dust Cover",
        DefaultAttIcon = Material("entities/att/ur_ak/dustcover_stock.png", "mips smooth"),
        Slot = {"ur_ak_cover"},
        FreeSlot = true,
    },
    {
        PrintName = "Charm",
        Slot = {"charm", "fml_charm", "ur_ak_charm"},
        FreeSlot = true,
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0.6, 6.7, 2.2),
            vang = Angle(90, -90, -90),
        },
    },
    {
        PrintName = "M203 slot",
        Slot = "uc_ubgl",
        Bone = "tag_weapon",
        Offset = {
            vpos = Vector(0, 9.9, 2.9),
            vang = Angle(90, -90, -90),
        },
        InstalledEles = {"rail_fg"},
        ExcludeFlags = {"ak_noubs","barrel_rpk"},
        Hidden = true,
    }
}

function SWEP:Hook_TranslateAnimation(anim)
    if anim == "fire_iron" then
        if self:GetBuff_Override("NoStock") then return "fire" end
    elseif anim == "fire_iron_empty" then
        if self:GetBuff_Override("NoStock") then return "fire_empty" end
    end
end

SWEP.Hook_NameChange = function(wep,name)
    local foldStocks = {["underfolder"] = true,["aks"] = true}
    local akCals = {["762"] = true,["545"] = true}
    local shortBarrs = {["krinkov"] = true,["vityaz"] = true}
    local fakeNames = !GetConVar("arccw_truenames"):GetBool()

    local start = "AK"
    local mid = ""
    local post = "M"
    local noN = false

    if fakeNames then
        start = "KF"
        post = "-67"
    end

    local atts = wep.Attachments
    local barr = string.Replace(atts[2].Installed or "default", "ur_ak_barrel_", "")
    local hg = string.Replace(atts[3].Installed or "default", "ur_ak_hg_", "")
    local cal = string.Replace(atts[5].Installed or "762", "ur_ak_cal_", "")
    local stock = string.Replace(atts[10].Installed or "default", "ur_ak_stock_", "")
    local upper = atts[11].Installed
    local alpha = (upper == "ur_ak_cover_alpha" or upper == "ur_ak_cover_ak12" or upper == "ur_ak_cover_truniun_rail")
    -- local ak12 = alpha and barr == "ak12"

    wep.Trivia_Desc = descStart .. desc_762
    wep.Trivia_Mechanism = "Gas-Operated Rotating Bolt"

    if alpha then noN = true end

    if atts[14].Installed == "uc_fg_civvy" then
        start = (fakeNames and "Amur") or "Vepr"
        if cal == "12g" then
            post = "-12"
            wep.Trivia_Desc = desc_12g
        elseif cal == "545_ak12" or cal == "545" then
            post = " 5.45"
            wep.Trivia_Desc = descStart .. desc_545
        elseif cal == "762" then
            post = " 7.62"
        elseif cal == "9mm" then
            start = "Saiga"
            post = "-9"
            wep.Trivia_Desc = desc_9mm
            wep.Trivia_Mechanism = "Blowback"
        else
            post = " ." .. cal
        end
        return start .. post
    end

    if cal == "9mm" then
        if fakeNames then
            start = "Bogatyr"
            post = " SMG"
        else
            start = "PP"
            post = "-19 Vityaz"
        end
        wep.Trivia_Desc = desc_9mm
        wep.Trivia_Mechanism = "Blowback"
    -- elseif cal == "12g" then
    --     start = "Saiga"
    --     if shortBarrs[barr] then
    --         post = "-12K"
    --     else
    --         post = "-12"
    --     end
    --     wep.Trivia_Desc = desc_12g -- Obsolete
    elseif cal == "366" then
        if barr == "vepr" or string.find(atts[14].Installed or "","rifling") then
            start = (fakeNames and "Amur") or "Vepr"
            post = " .366"
        else
            start = (fakeNames and "KFN") or "VPO"
            post = "-209"
            wep.Trivia_Desc = desc_366
        end
    elseif cal == "308" then
        post = "-308"
    -- elseif cal == "545_ak12" or ak12 then
    --     noN = true
    --     if string.StartWith(cal,"545") then
    --         post = "-12"
    --         wep.Trivia_Desc = descStart .. desc_545
    --     elseif cal == "762" then
    --         post = "-15"
    --     elseif cal == "556" then
    --         post = "-18"
    --     end
    --     if string.EndsWith(barr,"105") or shortBarrs[barr] then
    --         post = post .. "K"
    --     end -- Obsolete
    elseif barr == "rpk" or barr == "rpk74m" then
        start = (fakeNames and "PKF") or "RPK"
        if !fakeNames and barr == "rpk" and cal == "762" then
            post = ""
        end
    elseif cal == "762" then
        if barr == "t56" then
            noN = true
            if fakeNames then
                start = "Yucha"
                post = " 7"
            else
                start = "Type "
                post = "56"
            end
        elseif (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = "-103"
        end
    elseif cal == "556" then
        if fakeNames then
            post = "-45"
        elseif string.EndsWith(barr,"105") then
            post = "-102"
        else
            post = "-101"
        end
        wep.Trivia_Desc = descStart .. desc_556
    end

    if foldStocks[stock] and akCals[cal] and !string.StartWith(barr,"105") then
        if cal == "762" then
            if barr == "t56" then
                post = post .. "-1"
            elseif !fakeNames then
                post = "MS"
            else
                mid = "S"
            end
        else
            mid = "S"
        end
    end

    if cal == "545" then
        wep.Trivia_Desc = descStart .. desc_545
        if (hg == "74m" or hg == "rpk74m" or hg == "ak12") and stock == "ak74m" then
            noN = true
            post = (fakeNames and "-76M") or "-74M"
        elseif shortBarrs[barr] then
            if fakeNames then
                post = "-76"
                mid = mid .. "U"
            else
                post = "-74U"
            end
            wep.Trivia_Desc = descStart .. desc_74u
        else
            post = (fakeNames and "-76") or "-74"
        end
    end

    if akCals[cal] then
        if string.EndsWith(barr,"105") then
            noN = true
            if cal == "545" then
                post = "-105"
            elseif cal == "762" then
                post = "-104"
            elseif cal == "556" then
                post = "-102"
            end
        else
            -- if shortBarrs[barr] then
            --     post = post .. "U" -- I know I said the AK-47U doesn't exist, but we have fucking Glock 44 Autos so I warmed up to it
            --     wep.Trivia_Desc = descStart .. desc_74u
            -- end
            if !noN and atts[1].Installed then
                post = post .. "N"
            end
        end

    end

    return start .. mid .. post
end

SWEP.Animations = {
    ["idle"] = {
        Source = "idle"
    },
    ["draw"] = {
        Source = "draw",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
            {s = common .. "raise.ogg", t = 0.2},
            {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["holster"] = {
        Source = "holster",
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 0.5,
        SoundTable = {
            {s = ratel, t = 0},
           -- {s = common .. "raise.ogg", t = 0.2},
            -- {s = common .. "shoulder.ogg",    t = 0.2},
        },
    },
    ["ready"] = {
        Source = "ready",
        LHIK = true,
        LHIKIn = 0,
        LHIKOut = 0.6,
        LHIKEaseOut = 0.25,
        SoundTable = {
            {s = ratel, t = 0},
            {s = path .. "chback.ogg",    t = 0.2},
            {s = path .. "chamber.ogg",    t = 0.3},
            {s = common .. "shoulder.ogg",    t = .6},
        },
    },
    ["fire"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0, v = 0.25 }},
    },
    ["fire_iron"] = {
        Source = {"fire"},
        Time = 0.5,
        ShellEjectAt = 0,
        SoundTable = {{ s = {path .. "mech-01.ogg", path .. "mech-02.ogg", path .. "mech-03.ogg", path .. "mech-04.ogg", path .. "mech-05.ogg", path .. "mech-06.ogg"}, t = 0 }},
    },
    ["reload"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = common .. "magpouch.ogg", t = 0.0, v = 0.45},
            {s = path .. "reload_start.ogg", 	 t = 0.025},
            {s = rottle,  t = 0.05},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.38},
            {s = path .. "grab.ogg", t = 1.9, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.0},
            {s = path .. "shoulder.ogg", t = 2.15},
        },
    },
    ["reload_empty"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.4},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15, v = 0.5},
            {s = rottle,  t = 1.16},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = path .. "grab.ogg", t = 2.3, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.4},
            {s = path .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_75"] = {
        Source = "reload_drum",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.6,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = rottle,  t = 1.75},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = common .. "shoulder.ogg", t = 2.1},
            {s = path .. "shoulder.ogg", t = 2.25},
        },
    },
    ["reload_empty_75"] = {
        Source = "reload_drum_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 1.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.6,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magrelease.ogg", 	 t = 0.1},
            {s = path .. "magout_drum.ogg", 	 t = 0.25},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = ratel, t = 1.0},
            {s = path .. "magin_drum.ogg",    t = 1.1},
            {s = path .. "grab.ogg", t = 2.0, v = 0.45},
            {s = rottle,  t = 1.9},
            {s = path .. "chback.ogg",    t = 2.37},
            {s = path .. "chamber.ogg",    t = 2.48},
            {s = common .. "shoulder.ogg", t = 2.78},
            {s = path .. "shoulder.ogg", t = 2.93},
        },
    },
    ["reload_9mm"] = {
        Source = "reload_9mm",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.73},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.4},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_9mm"] = {
        Source = "reload_9mm_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path1 .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path1 .. "magin.ogg",    t = 0.85},
            {s = ratel, t = 1.1},
            {s = common .. "pistol_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_9.ogg",    t = 1.8},
            {s = path .. "chamber_9.ogg",    t = 2.05},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_10rnd"] = {
        Source = "reload_10rnd",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_10rnd"] = {
        Source = "reload_10rnd_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback.ogg",    t = 1.9},
            {s = path .. "chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_308"] = {
        Source = "reload_308",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.9,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_308"] = {
        Source = "reload_308_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "magin_308.ogg",    t = 1.0},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.15},
            {s = path .. "chback_308.ogg",    t = 1.85},
            {s = path .. "chamber_308.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["reload_12g"] = {
        Source = "reload",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.65,
        LHIKEaseOut = 0.25,
        MinProgress = 1.3,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = ratel, t = 0.5},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.95},
            {s = ratel, t = 1.1},
            {s = rottle,  t = 1.15},
            {s = path .. "scrape.ogg",    t = 1.35},
            {s = common .. "magpouchin.ogg", t = 1.35},
            {s = common .. "shoulder.ogg", t = 2.05},
            {s = common .. "grab.ogg", t = 2.1},
        },
    },
    ["reload_empty_12g"] = {
        Source = "reload_empty",
        TPAnim = ACT_HL2MP_GESTURE_RELOAD_AR2,
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.5,
        LHIKEaseOut = 0.25,
        MinProgress = 2.1,
        LastClip1OutTime = 2,
        SoundTable = {
            {s = rottle,  t = 0.0},
            {s = common .. "magpouch.ogg", t = 0.1},
            {s = ratel, t = 0.25},
            {s = path .. "12ga/magout.ogg", 	 t = 0.45},
            {s = path .. "bonk.ogg", 	 t = 0.5, v = 0.25},
            {s = ratel, t = 0.55},
            {s = rottle,  t = 0.75},
            {s = path .. "12ga/magin.ogg",    t = 0.97},
            {s = ratel, t = 1.1},
            {s = common .. "rifle_magdrop.ogg", t = 1.15},
            {s = rottle,  t = 1.75},
            {s = path .. "12ga/chback.ogg",    t = 1.85},
            {s = path .. "12ga/chamber.ogg",    t = 2.0},
            {s = common .. "grab.ogg", t = 2.4},
            {s = common .. "shoulder.ogg", t = 2.5},
        },
    },
    ["enter_inspect"] = {
        Source = "inspect_enter",
        -- time = 35 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 2.5,
        SoundTable = {
            {s = rottle, t = 0},
            {s = common .. "movement-rifle-02.ogg", t = 0.1},
        },
    },
    ["idle_inspect"] = {
        Source = "inspect_loop",
        -- time = 72 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
    },
    ["exit_inspect"] = {
        Source = "inspect_exit",
        -- time = 66 / 60,
        LHIK = false,
        LHIKIn = 0,
        LHIKOut = 999, -- maybe im dumb
        SoundTable = {
            {s = common .. "movement-rifle-04.ogg", t = 0.2},
            {s = rottle, t = 0.25},
            {s = rottle, t = 1.2},
            {s = common .. "movement-rifle-03.ogg", t = 1.25},
        },
    },
    ["enter_sprint"] = {
        Source = "sprint_start",
        Time = 0.9,
    },
    ["idle_sprint"] = {
        Source = "sprint_idle",
    },
    ["exit_sprint"] = {
        Source = "sprint_end",
        Time = 1.25,
    },
    ["unjam"] = {
        Source = "jamfix",
        -- Time = 45 / 30,
        ShellEjectAt = 0.65,
        -- LHIK = true,
        -- LHIKIn = 0.3,
        -- LHIKEaseIn = 0.4,
        -- LHIKEaseOut = 0.15,
        -- LHIKOut = 0.4,
        -- SoundTable = {                                             zenith do noises here
        --     {s = path .. "chback.ogg",   t = 0.15},
        --     {s = common .. "cloth_4.ogg",  t = 0.5},
        --     {s = path .. "chamber.ogg",  t = 0.5},
        -- },
        SoundTable = {
            {s = common .. "cloth_4.ogg",  t = 0.1},
            {s = path .. "presscheck_1.ogg",    t = 0.2},
            {s = path .. "chback.ogg",    t = 0.6},
            {s = path .. "chamber.ogg",    t = 0.7},
            {s = common .. "grab.ogg", t = 1.1},
            {s = common .. "shoulder.ogg", t = 1.15},
        }
    },
    ["bash_bayonet"] = {
        Source = "bayonet",
        --Time = 1.2,
        --MinProgress = .7,
        SoundTable = {
            {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },

    ["exit_bipod"] = {
        Source = "bipod_undeploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}
        }
    },
    ["enter_bipod"] = {
        Source = "bipod_deploy",
        LHIK = true,
        LHIKIn = 0.3,
        LHIKOut = 0.55,
        LHIKEaseOut = 0.25,
        --Time = 1.2,
        --MinProgress = .7,
        Mult = .8,
        SoundTable = {
            -- {s = "weapons/arccw/melee_lift.wav", t = 0}                   -- yeah here too
        }
    },
}

SWEP.Hook_Think = ArcCW.UC.ADSReload
--addons/ch_bitminers_dlc/lua/weapons/ch_bitminers_tablet/shared.lua:
--[[ INFO
models/craphead_scripts/bitminers/dlc/c_mediapad.mdl
models/craphead_scripts/bitminers/dlc/w_mediapad.mdl
FOV: 95
Hold type: pistol
76561198347218024
idle 		ACT_VM_IDLE
use 		ACT_VM_PRIMARYATTACK
withdraw 	ACT_VM_SECONDARYATTACK
draw 		ACT_VM_DRAW
--]]

if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= true
	SWEP.AutoSwitchFrom		= true
	AddCSLuaFile( "shared.lua" )
end

if CLIENT then
	SWEP.PrintName			= CH_Bitminers.LangString( "Bitminer Tablet" )
	SWEP.Slot				= 2
	SWEP.SlotPos			= 1
	SWEP.DrawCrosshair 		= false
	SWEP.DrawAmmo			= false
	SWEP.SwayScale			= 0
	SWEP.BobScale			= 0
end

SWEP.Author					= "Crap-Head"
SWEP.Instructions 			= CH_Bitminers.LangString( "Left click: Link your tablet with a bitminer.\nRight click: Withdraw money from your linked bitminer.\nReload: Turn linked bitminer on/off." )
SWEP.Category 				= "Bitminers by Crap-Head"

SWEP.UseHands				= true
SWEP.ViewModelFOV			= 100

SWEP.ViewModel 				= "models/craphead_scripts/bitminers/dlc/c_mediapad.mdl"
SWEP.WorldModel				= "models/craphead_scripts/bitminers/dlc/w_mediapad.mdl"

SWEP.Spawnable 				= true
SWEP.AdminOnly 				= true

SWEP.Primary.Range			= 120
SWEP.Primary.Recoil			= 4.6
SWEP.Primary.Damage			= 100
SWEP.Primary.Cone			= 0.005
SWEP.Primary.NumShots		= 1

SWEP.Primary.ClipSize		= -1
SWEP.Primary.DefaultClip	= -1
SWEP.Primary.Automatic		= false	
SWEP.Primary.Ammo			= "none"

SWEP.Secondary.ClipSize		= -1
SWEP.Secondary.DefaultClip	= -1
SWEP.Secondary.Automatic	= false
SWEP.Secondary.Ammo			= "none"

SWEP.HoldType = "pistol"

function SWEP:Initialize()
	self:SetWeaponHoldType( self.HoldType )
	
	self.LinkedBitminer = nil
	
	if CLIENT then
		self.Deployed = false
		
		timer.Simple( 0.9, function()
			if IsValid( self ) then
				self.Deployed = true
			end
		end )
	end
	
    return true
end

function SWEP:Deploy()
	self:SendWeaponAnim( ACT_VM_DRAW )
	local ply = self:GetOwner()
	
	if CLIENT then
		self.Deployed = false
		
		timer.Simple( 0.9, function()
			if IsValid( self ) then
				self.Deployed = true
			end
		end )
	end
	
	if CH_Bitminers_DLC.Config.UseIdleAnimation then
		timer.Simple( 1, function()
			if IsValid( self ) and IsValid( ply ) then
				if ply:GetActiveWeapon():GetClass() == "ch_bitminers_tablet" then
					self:SendWeaponAnim( ACT_VM_IDLE )
				end
			end
		end )
	end
	
	return true
end

function SWEP:Holster( wep )
	self:SendWeaponAnim( ACT_VM_HOLSTER )

	return true
end

function SWEP:PrimaryAttack()
	self:SetNextPrimaryFire( CurTime() + 1 )
	self:SetNextSecondaryFire( CurTime() + 1 )
	
	local ply = self:GetOwner()
	local trace = util.GetPlayerTrace( ply )
	local tr = util.TraceLine( trace )

	local ent = tr.Entity
	
	if not IsValid( ent ) then
		return
	end

	if ent:GetPos():DistToSqr( ply:GetPos() ) > CH_Bitminers_DLC.Config.BitminerLinkDistance then
		if SERVER then
			CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "You need to move closer to the bitminer to link it with the tablet!" ) )
		end
		return
	end
	
	if SERVER then
		if ent:GetClass() == "ch_bitminer_shelf" then
			local bitminer_owner = ent:CPPIGetOwner()

			-- Not linking if not the owner of bitminer is hacked
			if not ent:GetIsHacked() then
				if ply != bitminer_owner then -- person trying to access is not owner
					CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "Only the owner of this bitminer can link their tablet to it!" ) )
					CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "Hack the bitminer in order to access it!" ) )
					return
				end
			end
		
			if self.LinkedBitminer == ent then
				CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "You've already linked your tablet with this bitminer." ) )
				return
			end
			
			self.LinkedBitminer = ent
			CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "This bitminer has been linked with your remote tablet." ) )
			
			-- Network it
			net.Start( "CH_BITMINERS_DLC_LinkBitminerRemotely" )
				net.WriteEntity( ent )
				net.WriteEntity( self )
			net.Send( ply )
			
			-- bLogs support
			hook.Run( "CH_BITMINER_DLC_PlayerLinkedBitminer", ply, bitminer_owner )
		else
			CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "This tablet can only link with bitminers." ) )
		end
	end
end

function SWEP:SecondaryAttack()
	self:SetNextPrimaryFire( CurTime() + 1 )
	self:SetNextSecondaryFire( CurTime() + 1 )
	
	local bitminer = self.LinkedBitminer
	local ply = self:GetOwner()
	
	if bitminer and bitminer:GetHasPower() and bitminer:GetIsMining() then
		self:SendWeaponAnim( ACT_VM_SECONDARYATTACK )
	end
	
	if CH_Bitminers_DLC.Config.UseIdleAnimation then
		timer.Simple( 0.8, function()
			if IsValid( self ) and IsValid( ply ) then
				if ply:GetActiveWeapon():GetClass() == "ch_bitminers_tablet" then
					self:SendWeaponAnim( ACT_VM_IDLE )
				end
			end
		end )
	end
	
	timer.Simple( 0.3, function()
		if IsValid( self ) and IsValid( ply ) then
			if SERVER then
				if not bitminer then
					CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "Your tablet is not linked with any bitminers." ) )
					return
				end
				
				-- Check withdraw config if hacked
				if bitminer:GetIsHacked() and CH_Bitminers_DLC.Config.DisableWithdrawWhenHacked then
					CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "You cannot perform this action because the bitminer is hacked!" ) )
					return
				end
				
				if not bitminer:GetHasPower() then
					CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "You cannot exchange bitcoins. Your linked bitminer has no power source!" ) )
					return
				end
				
				if not bitminer:GetIsMining() then
					CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "You cannot exchange bitcoins. Your linked bitminer is not turned on!" ) )
					return
				end
				
				-- Attempt to withdraw money from bitminer.
				bitminer:WithdrawMoney( ply, true )
			end
		end
	end )
end

function SWEP:Reload()
	local ply = self:GetOwner()
	local tr = ply:GetEyeTrace()
	local cur_time = CurTime()
	
	self:SetNextPrimaryFire( cur_time + 1 )
	self:SetNextSecondaryFire( cur_time + 1 )
	
	if ( self.CurDelay or 0 ) > cur_time then
		return
	end
	
	self.CurDelay = cur_time + 2
	
	if SERVER then
		local bitminer = self.LinkedBitminer

		if not bitminer then
			CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "Your tablet is not linked with any bitminers." ) )
			return
		end
		
		-- Check power config if hacked
		if bitminer:GetIsHacked() and CH_Bitminers_DLC.Config.DisablePowerOnOffWhenHacked then
			CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "You cannot perform this action because the bitminer is hacked!" ) )
			return
		end
		
		if bitminer:GetHasPower() then -- power source is connected
			if not bitminer:GetIsMining() then
				bitminer:PowerOn()
				
				CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "You have powered on your bitminers!" ) )
			else
				bitminer:PowerOff()
				
				CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "You have shut down your bitminers!" ) )
			end
		else
			CH_Bitminers.NotifyPlayer( ply, CH_Bitminers.LangString( "Your bitminer has no active power source." ) )
		end
	end
end

if CLIENT then
	-- Cache colors
	local col_blue = Color( 62, 173, 229, 255 )
	
	local col_bg = Color( 20, 20, 20, 255 )
	local col_bar_bg = Color( 62, 62, 62, 100 )
	local col_bar_bg_notrans = Color( 35, 35, 35, 255 )
	
	local col_red = Color( 150, 0, 0, 255 )
	
	local rect_col_green = Color( 0, 100, 0, 255 )
	local rect_col_orange = Color( 240, 137, 19, 255 )
	local rect_col_red = Color( 100, 0, 0, 255 )
	
	-- Circles
	local back_circle_capacity = CH_Bitminers.UTIL_CreateCircle( 75, 395, 180, 80, 360, 115 ) -- Back circle
	local circle_capacity
	local front_circle_capacity = CH_Bitminers.UTIL_CreateCircle( 75, 395, 180, 40, 360, 105 ) -- Front circle
	
	-- Cache materials
	local mat_no_linked = Material( "craphead_scripts/bitminers/dlc/tablet_screen/link.png" )
	
	-- Networking
	net.Receive( "CH_BITMINERS_DLC_LinkBitminerRemotely", function( length, ply )
		local bitminer = net.ReadEntity()
		local swep = net.ReadEntity()

		swep.LinkedBitminer = bitminer
	end )
	
	function SWEP:PostDrawViewModel( vm, wep, ply )
		if ( IsValid( vm ) ) then
			local ComPos = vm:GetPos()
			ComPos = ComPos + vm:GetForward() * 11.3 + vm:GetRight() * -3.4 + vm:GetUp() * 2.55
			local ComAng = vm:GetAngles()
			
			ComAng:RotateAroundAxis( ComAng:Forward(), 90 )
			ComAng:RotateAroundAxis( ComAng:Right(), 90 )
			
			if not IsValid( self.LinkedBitminer ) then
				self.LinkedBitminer = nil
			end
			
			if not self.Deployed then
				return
			end
			
			local bitminer = self.LinkedBitminer
			local bitcoin_rate = CH_Bitminers.Config.BitcoinRate
			
			cam.Start3D2D( ComPos, ComAng, 0.01 )
				-- BG
				surface.SetDrawColor( col_bg )
				surface.DrawRect( -185, -140, 1045, 790 )
				
				draw.DrawText( CH_Bitminers.LangString( "Bitminer Remote Tablet" ), "BITMINER_DLC_TabletLarge", 340, -115, color_white, TEXT_ALIGN_CENTER )
				
				-- SPLIT TOP LINE
				surface.SetDrawColor( col_bar_bg_notrans )
				surface.DrawRect( -185, -5, 1045, 7.5 )
				
				if not bitminer then
					surface.SetDrawColor( color_white )
					surface.SetMaterial( mat_no_linked )
					surface.DrawTexturedRect( 120, 70, 400, 400 )
					
					draw.DrawText( CH_Bitminers.LangString( "No Bitminer Linked" ), "BITMINER_DLC_TabletSmall", 340, 550, col_red, TEXT_ALIGN_CENTER )
				elseif not bitminer:GetIsMining() or not bitminer:GetHasPower() then
					draw.DrawText( CH_Bitminers.LangString( "Bitminer Connected" ), "BITMINER_DLC_TabletSmall", 340, 25, rect_col_green, TEXT_ALIGN_CENTER )
					
					if not bitminer:GetHasPower() and not bitminer:GetIsMining() then
						draw.DrawText( CH_Bitminers.LangString( "No Power Source" ), "BITMINER_DLC_TabletSmall", 340, 100, rect_col_red, TEXT_ALIGN_CENTER )
						draw.DrawText( CH_Bitminers.LangString( "Turned Off" ), "BITMINER_DLC_TabletSmall", 340, 175, rect_col_red, TEXT_ALIGN_CENTER )
					elseif not bitminer:GetHasPower() then
						draw.DrawText( CH_Bitminers.LangString( "No Power Source" ), "BITMINER_DLC_TabletSmall", 340, 100, rect_col_red, TEXT_ALIGN_CENTER )
					elseif not bitminer:GetIsMining() then
						draw.DrawText( CH_Bitminers.LangString( "Turned Off" ), "BITMINER_DLC_TabletSmall", 340, 100, rect_col_red, TEXT_ALIGN_CENTER )
					end

				elseif not bitminer:GetHasPower() then
					draw.DrawText( CH_Bitminers.LangString( "Bitminer Connected" ), "BITMINER_DLC_TabletSmall", 340, 25, rect_col_green, TEXT_ALIGN_CENTER )
					draw.DrawText( CH_Bitminers.LangString( "No Power Source" ), "BITMINER_DLC_TabletSmall", 340, 100, rect_col_red, TEXT_ALIGN_CENTER )
				else
					-- SPLIT CENTER LINE
					surface.SetDrawColor( col_bar_bg_notrans )
					surface.DrawRect( 332.5, 0, 7.5, 645 )
					
					-- DRAW HEALTH
					draw.DrawText( CH_Bitminers.LangString( "HEALTH" ), "BITMINER_DLC_TabletSmall", -155, 25, color_white, TEXT_ALIGN_LEFT )
					draw.DrawText( bitminer:Health() .."%", "BITMINER_DLC_TabletSmall", 305, 25, color_white, TEXT_ALIGN_RIGHT )
					
					-- Rect showing health
					surface.SetDrawColor( col_bar_bg_notrans )
					surface.DrawRect( -155, 100, 460, 50 )
					
					if bitminer:Health() >= 75 then
						surface.SetDrawColor( rect_col_green )
					elseif bitminer:Health() >= 50 then
						surface.SetDrawColor( rect_col_orange )
					elseif bitminer:Health() >= 50 then
						surface.SetDrawColor( rect_col_orange )
					else
						surface.SetDrawColor( rect_col_red )
					end
					surface.DrawRect( -155, 100, math.Clamp( bitminer:Health() * 4.6, 0, 460), 50 )
					
					-- DRAW MONEY MINED
					if bitcoin_rate then
						if CH_Bitminers.Config.IntegrateCryptoCurrencies and CH_CryptoCurrencies then
							if CH_CryptoCurrencies.CryptosCL[ bitminer:GetCryptoIntegrationIndex() ] then
								local crypto_price = CH_CryptoCurrencies.CryptosCL[ bitminer:GetCryptoIntegrationIndex() ].Price
								draw.DrawText( CH_CryptoCurrencies.CryptosCL[ bitminer:GetCryptoIntegrationIndex() ].Name.." Mined", "BITMINER_DLC_TabletSmall", 75, 170, color_white, TEXT_ALIGN_CENTER )
								draw.DrawText( "1".. CH_CryptoCurrencies.CryptosCL[ bitminer:GetCryptoIntegrationIndex() ].Currency .." = ".. DarkRP.formatMoney( crypto_price ), "BITMINER_DLC_TabletSmaller", 75, 225, color_white, TEXT_ALIGN_CENTER )
							end
						else
							draw.DrawText( CH_Bitminers.LangString( "BITCOINS MINED" ), "BITMINER_DLC_TabletSmall", 75, 170, color_white, TEXT_ALIGN_CENTER )
							draw.DrawText( "1BTC = ".. DarkRP.formatMoney( bitcoin_rate ), "BITMINER_DLC_TabletSmaller", 75, 225, color_white, TEXT_ALIGN_CENTER )
						end
					end

					CH_Bitminers.UTIL_DrawCircle( back_circle_capacity, col_bar_bg ) -- Back circle
					
					local mined_bitcoins_degrees = 361 * bitminer:GetBitcoinsMined() / CH_Bitminers.Config.MaxBitcoinsMined
					circle_capacity = CH_Bitminers.UTIL_CreateCircle( 75, 395, 180, 80, math.Clamp( mined_bitcoins_degrees, 0, 361 ), 115 ) -- Money circle
					CH_Bitminers.UTIL_DrawCircle( circle_capacity, col_blue ) -- Money circle
					
					CH_Bitminers.UTIL_DrawCircle( front_circle_capacity, col_bar_bg_notrans ) -- Front circle
					
					draw.DrawText( CH_Bitminers.LangString( "CAPACITY" ), "BITMINER_DLC_TabletSmaller", 75, 340, color_white, TEXT_ALIGN_CENTER )
					draw.DrawText( math.Round( bitminer:GetBitcoinsMined() / CH_Bitminers.Config.MaxBitcoinsMined * 100, 1 ) .."%", "BITMINER_DLC_TabletSmall", 75, 385, color_white, TEXT_ALIGN_CENTER )
					
					-- WITHDRAW BUTTON
					surface.SetDrawColor( rect_col_green )
					surface.DrawRect( -155, 535, 460, 85 )
					
					if CH_Bitminers.Config.IntegrateCryptoCurrencies and CH_CryptoCurrencies then
						draw.DrawText( "Take ".. CH_CryptoCurrencies.CryptosCL[ bitminer:GetCryptoIntegrationIndex() ].Name, "BITMINER_DLC_TabletSmaller", 75, 540, color_white, TEXT_ALIGN_CENTER )
						
						draw.DrawText( math.Round( bitminer:GetBitcoinsMined(), 7 ) .. " ".. CH_CryptoCurrencies.CryptosCL[ bitminer:GetCryptoIntegrationIndex() ].Currency, "BITMINER_DLC_TabletSmaller", 75, 575, color_white, TEXT_ALIGN_CENTER )
					else
						draw.DrawText( CH_Bitminers.LangString( "Sell Bitcoins" ) .." (" ..math.Round( bitminer:GetBitcoinsMined(), 7 ) .." BTC)", "BITMINER_DLC_TabletSmaller", 75, 540, color_white, TEXT_ALIGN_CENTER )
						
						if bitcoin_rate then
							draw.DrawText( DarkRP.formatMoney( math.Round( bitminer:GetBitcoinsMined() * bitcoin_rate ) ), "BITMINER_DLC_TabletSmaller", 75, 575, color_white, TEXT_ALIGN_CENTER )
						end
					end
					
					--[[
					RIGHT SIDE OF THE TABLET
					--]]
					
					-- Draw miners installed
					draw.DrawText( CH_Bitminers.LangString( "MINERS" ), "BITMINER_DLC_TabletSmall", 370, 25, color_white, TEXT_ALIGN_LEFT )
					draw.DrawText( bitminer:GetMinersInstalled() .." / ".. bitminer:GetMinersAllowed(), "BITMINER_DLC_TabletSmall", 830, 25, color_white, TEXT_ALIGN_RIGHT )
					
					-- Rect showing miners
					surface.SetDrawColor( col_bar_bg_notrans )
					surface.DrawRect( 370, 100, 460, 50 )
					
					surface.SetDrawColor( col_blue )
					local multiple_rate = 0
					
					if bitminer:GetMinersAllowed() <= 4 then
						multiple_rate = 115
					elseif bitminer:GetMinersAllowed() <= 8 then
						multiple_rate = 57.5
					elseif bitminer:GetMinersAllowed() <= 12 then
						multiple_rate = 38.33
					elseif bitminer:GetMinersAllowed() <= 16 then
						multiple_rate = 28.75
					end
					
					surface.DrawRect( 370, 100, bitminer:GetMinersInstalled() * multiple_rate, 50 )
					
					-- Draw power supplies installed
					draw.DrawText( CH_Bitminers.LangString( "UPS'S" ), "BITMINER_DLC_TabletSmall", 370, 170, color_white, TEXT_ALIGN_LEFT )
					draw.DrawText( bitminer:GetUPSInstalled() .." / 4", "BITMINER_DLC_TabletSmall", 830, 170, color_white, TEXT_ALIGN_RIGHT )
					
					-- Rect showing amount of ups's installed
					surface.SetDrawColor( col_bar_bg_notrans )
					surface.DrawRect( 370, 245, 460, 50 )
					
					surface.SetDrawColor( col_blue )
					surface.DrawRect( 370, 245, bitminer:GetUPSInstalled() * 115, 50 )
					
					-- Draw vents installed
					draw.DrawText( CH_Bitminers.LangString( "VENTILATION" ), "BITMINER_DLC_TabletSmall", 370, 315, color_white, TEXT_ALIGN_LEFT )
					draw.DrawText( bitminer:GetFansInstalled() .." / 3", "BITMINER_DLC_TabletSmall", 830, 315, color_white, TEXT_ALIGN_RIGHT )
					
					-- Rect showing amount of ups's installed
					surface.SetDrawColor( col_bar_bg_notrans )
					surface.DrawRect( 370, 390, 460, 50 )
					
					surface.SetDrawColor( col_blue )
					surface.DrawRect( 370, 390, bitminer:GetFansInstalled() * 153.33, 50 )
					
					-- Draw temperature
					draw.DrawText( CH_Bitminers.LangString( "TEMP" ), "BITMINER_DLC_TabletSmall", 370, 460, color_white, TEXT_ALIGN_LEFT )
					draw.DrawText( math.Round( bitminer:GetTemperature(), 3 ) .."C", "BITMINER_DLC_TabletSmall", 830, 460, color_white, TEXT_ALIGN_RIGHT )
					-- °
					-- Rect showing temp
					surface.SetDrawColor( col_bar_bg_notrans )
					surface.DrawRect( 370, 535, 460, 50 )
					
					if bitminer:GetTemperature() <= 33 then
						surface.SetDrawColor( rect_col_green )
					elseif bitminer:GetTemperature() <= 66 then
						surface.SetDrawColor( rect_col_orange )
					elseif bitminer:GetTemperature() <= 100 then
						surface.SetDrawColor( rect_col_red )
					end
					surface.DrawRect( 370, 535, bitminer:GetTemperature() * 4.6, 50 )
				end
			cam.End3D2D()
		end
	end
end
--addons/cityworker/lua/weapons/cityworker_pliers.lua:
return gluapack()()
--lua/weapons/gmod_tool/stools/fading_door.lua:
TOOL.Category = "Construction"
TOOL.Name = "#Fading Doors"

TOOL.ClientConVar["key"] = "41"
TOOL.ClientConVar["swap"] = "0"
TOOL.ClientConVar["reversed"] = "0"
TOOL.ClientConVar["mat"] = "sprites/heatwave"
TOOL.ClientConVar["opensound"] = "0"
TOOL.ClientConVar["loopsound"] = "0"
TOOL.ClientConVar["closesound"] = "0"

list.Add("FDoorMaterials", "sprites/heatwave")
list.Add("FDoorMaterials", "models/wireframe")
list.Add("FDoorMaterials", "debug/env_cubemap_model")
list.Add("FDoorMaterials", "models/shadertest/shader3")
list.Add("FDoorMaterials", "models/shadertest/shader4")
list.Add("FDoorMaterials", "models/shadertest/shader5")
list.Add("FDoorMaterials", "models/shiny")
list.Add("FDoorMaterials", "models/debug/debugwhite")
list.Add("FDoorMaterials", "Models/effects/comball_sphere")
list.Add("FDoorMaterials", "Models/effects/comball_tape")
list.Add("FDoorMaterials", "Models/effects/splodearc_sheet")
list.Add("FDoorMaterials", "Models/effects/vol_light001")
list.Add("FDoorMaterials", "models/props_combine/stasisshield_sheet")
list.Add("FDoorMaterials", "models/props_combine/portalball001_sheet")
list.Add("FDoorMaterials", "models/props_combine/com_shield001a")
list.Add("FDoorMaterials", "models/props_c17/frostedglass_01a")
list.Add("FDoorMaterials", "models/props_lab/Tank_Glass001")
list.Add("FDoorMaterials", "models/props_combine/tprings_globe")
list.Add("FDoorMaterials", "models/rendertarget")
list.Add("FDoorMaterials", "models/screenspace")
list.Add("FDoorMaterials", "brick/brick_model")
list.Add("FDoorMaterials", "models/props_pipes/GutterMetal01a")
list.Add("FDoorMaterials", "models/props_pipes/Pipesystem01a_skin3")
list.Add("FDoorMaterials", "models/props_wasteland/wood_fence01a")
list.Add("FDoorMaterials", "models/props_foliage/tree_deciduous_01a_trunk")
list.Add("FDoorMaterials", "models/props_c17/FurnitureFabric003a")
list.Add("FDoorMaterials", "models/props_c17/FurnitureMetal001a")
list.Add("FDoorMaterials", "models/props_c17/paper01")
list.Add("FDoorMaterials", "models/flesh")

if SERVER then
	util.AddNetworkString("DrawFadeDoor")
end

local Sounds = {}
Sounds[1] = Sound("doors/doorstop1.wav")
Sounds[2] = Sound("npc/turret_floor/retract.wav")
Sounds[3] = Sound("npc/roller/mine/combine_mine_deactivate1.wav")
Sounds[4] = Sound("npc/roller/mine/combine_mine_deploy1.wav")
Sounds[5] = Sound("npc/roller/mine/rmine_taunt1.wav")
Sounds[6] = Sound("npc/scanner/scanner_nearmiss2.wav")
Sounds[7] = Sound("npc/scanner/scanner_siren1.wav")
Sounds[8] = Sound("npc/barnacle/barnacle_gulp1.wav")
Sounds[9] = Sound("npc/barnacle/barnacle_gulp2.wav")
Sounds[10] = Sound("npc/combine_gunship/attack_start2.wav")
Sounds[11] = Sound("npc/combine_gunship/attack_stop2.wav")
Sounds[12] = Sound("npc/dog/dog_pneumatic1.wav")
Sounds[13] = Sound("npc/dog/dog_pneumatic2.wav")

util.PrecacheSound(Sounds[1])
util.PrecacheSound(Sounds[2])
util.PrecacheSound(Sounds[3])
util.PrecacheSound(Sounds[4])
util.PrecacheSound(Sounds[5])
util.PrecacheSound(Sounds[6])
util.PrecacheSound(Sounds[7])
util.PrecacheSound(Sounds[8])
util.PrecacheSound(Sounds[9])
util.PrecacheSound(Sounds[10])
util.PrecacheSound(Sounds[11])
util.PrecacheSound(Sounds[12])
util.PrecacheSound(Sounds[13])

local LoopSounds = {}
LoopSounds[1] = "ambient/machines/machine6.wav"
LoopSounds[2] = "ambient/energy/force_field_loop1.wav"
LoopSounds[3] = "physics/metal/canister_scrape_smooth_loop1.wav"
LoopSounds[4] = "ambient/levels/citadel/citadel_drone_loop5.wav"
LoopSounds[5] = "ambient/levels/citadel/citadel_drone_loop6.wav"
LoopSounds[6] = "ambient/atmosphere/city_rumble_loop1.wav"
LoopSounds[7] = "ambient/machines/city_ventpump_loop1.wav"
LoopSounds[8] = "ambient/machines/combine_shield_loop3.wav"
LoopSounds[9] = "npc/manhack/mh_engine_loop1.wav"
LoopSounds[10] = "npc/manhack/mh_engine_loop2.wav"

if CLIENT then
	language.Add("Tool.fading_door.name", "Fading Doors")
	language.Add("Tool.fading_door.desc", "Makes anything into a fadable door")
	language.Add("Tool.fading_door.0", "Click on something to make it a fading door. Right click to copy data. Reload to remove fading door.")
	
	function TOOL:BuildCPanel()
		self:AddControl("Header",   {Text = "#Tool.fading_door.name", Description = "#Tool.fading_door.desc"})
		self:AddControl("CheckBox", {Label = "Reversed", Command = "fading_door_reversed"})
		self:AddControl("CheckBox", {Label = "Toggle Active", Command = "fading_door_swap"})
		
		local DoorOpenSound = vgui.Create("CtrlListBox", self)
		DoorOpenSound:AddOption("None", {fading_door_opensound = "0"})
		if file.Exists("sound/doors/doorstop1.wav", "GAME") then DoorOpenSound:AddOption("1", {fading_door_opensound = "1"}) end
		if file.Exists("sound/npc/turret_floor/retract.wav", "GAME") then DoorOpenSound:AddOption("2", {fading_door_opensound = "2"}) end
		if file.Exists("sound/npc/roller/mine/combine_mine_deactivate1.wav", "GAME") then DoorOpenSound:AddOption("3", {fading_door_opensound = "3"}) end
		if file.Exists("sound/npc/roller/mine/combine_mine_deploy1.wav", "GAME") then DoorOpenSound:AddOption("4", {fading_door_opensound = "4"}) end
		if file.Exists("sound/npc/roller/mine/rmine_taunt1.wav", "GAME") then DoorOpenSound:AddOption("5", {fading_door_opensound = "5"}) end
		if file.Exists("sound/npc/scanner/scanner_nearmiss2.wav", "GAME") then DoorOpenSound:AddOption("6", {fading_door_opensound = "6"}) end
		if file.Exists("sound/npc/scanner/scanner_siren1.wav", "GAME") then DoorOpenSound:AddOption("7", {fading_door_opensound = "7"}) end
		if file.Exists("sound/npc/barnacle/barnacle_gulp1.wav", "GAME") then DoorOpenSound:AddOption("8", {fading_door_opensound = "8"}) end
		if file.Exists("sound/npc/barnacle/barnacle_gulp2.wav", "GAME") then DoorOpenSound:AddOption("9", {fading_door_opensound = "9"}) end
		if file.Exists("sound/npc/combine_gunship/attack_start2.wav", "GAME") then DoorOpenSound:AddOption("10", {fading_door_opensound = "10"}) end
		if file.Exists("sound/npc/combine_gunship/attack_stop2.wav", "GAME") then DoorOpenSound:AddOption("11", {fading_door_opensound = "11"}) end
		if file.Exists("sound/npc/dog/dog_pneumatic1.wav", "GAME") then DoorOpenSound:AddOption("12", {fading_door_opensound = "12"}) end
		if file.Exists("sound/npc/dog/dog_pneumatic2.wav", "GAME") then DoorOpenSound:AddOption("13", {fading_door_opensound = "13"}) end
		
		local left = vgui.Create("DLabel", self)
		left:SetText("Open Sound")
		left:SetDark(true)
		DoorOpenSound:SetHeight(25)
		DoorOpenSound:Dock(TOP)
		
		self:AddItem(left, DoorOpenSound)
		
		local DoorActiveSound = vgui.Create("CtrlListBox", self)
		DoorActiveSound:AddOption("None", {fading_door_loopsound = "0"})
		if file.Exists("sound/"..LoopSounds[1], "GAME") then DoorActiveSound:AddOption("1", {fading_door_loopsound = "1"}) end
		if file.Exists("sound/"..LoopSounds[2], "GAME") then DoorActiveSound:AddOption("2", {fading_door_loopsound = "2"}) end
		if file.Exists("sound/"..LoopSounds[3], "GAME") then DoorActiveSound:AddOption("3", {fading_door_loopsound = "3"}) end
		if file.Exists("sound/"..LoopSounds[4], "GAME") then DoorActiveSound:AddOption("4", {fading_door_loopsound = "4"}) end
		if file.Exists("sound/"..LoopSounds[5], "GAME") then DoorActiveSound:AddOption("5", {fading_door_loopsound = "5"}) end
		if file.Exists("sound/"..LoopSounds[6], "GAME") then DoorActiveSound:AddOption("6", {fading_door_loopsound = "6"}) end
		if file.Exists("sound/"..LoopSounds[7], "GAME") then DoorActiveSound:AddOption("7", {fading_door_loopsound = "7"}) end
		if file.Exists("sound/"..LoopSounds[8], "GAME") then DoorActiveSound:AddOption("8", {fading_door_loopsound = "8"}) end
		if file.Exists("sound/"..LoopSounds[9], "GAME") then DoorActiveSound:AddOption("9", {fading_door_loopsound = "9"}) end
		if file.Exists("sound/"..LoopSounds[10], "GAME") then DoorActiveSound:AddOption("10", {fading_door_loopsound = "10"}) end
		
		local left = vgui.Create("DLabel", self)
		left:SetText("Active Sound")
		left:SetDark(true)
		DoorActiveSound:SetHeight(25)
		DoorActiveSound:Dock(TOP)
		
		self:AddItem(left, DoorActiveSound)
		
		local DoorCloseSound = vgui.Create("CtrlListBox", self)
		DoorCloseSound:AddOption("None", {fading_door_closesound = "0"})
		if file.Exists("sound/doors/doorstop1.wav", "GAME") then DoorCloseSound:AddOption("1", {fading_door_closesound = "1"}) end
		if file.Exists("sound/npc/turret_floor/retract.wav", "GAME") then DoorCloseSound:AddOption("2", {fading_door_closesound = "2"}) end
		if file.Exists("sound/npc/roller/mine/combine_mine_deactivate1.wav", "GAME") then DoorCloseSound:AddOption("3", {fading_door_closesound = "3"}) end
		if file.Exists("sound/npc/roller/mine/combine_mine_deploy1.wav", "GAME") then DoorCloseSound:AddOption("4", {fading_door_closesound = "4"}) end
		if file.Exists("sound/npc/roller/mine/rmine_taunt1.wav", "GAME") then DoorCloseSound:AddOption("5", {fading_door_closesound = "5"}) end
		if file.Exists("sound/npc/scanner/scanner_nearmiss2.wav", "GAME") then DoorCloseSound:AddOption("6", {fading_door_closesound = "6"}) end
		if file.Exists("sound/npc/scanner/scanner_siren1.wav", "GAME") then DoorCloseSound:AddOption("7", {fading_door_closesound = "7"}) end
		if file.Exists("sound/npc/barnacle/barnacle_gulp1.wav", "GAME") then DoorCloseSound:AddOption("8", {fading_door_closesound = "8"}) end
		if file.Exists("sound/npc/barnacle/barnacle_gulp2.wav", "GAME") then DoorCloseSound:AddOption("9", {fading_door_closesound = "9"}) end
		if file.Exists("sound/npc/combine_gunship/attack_start2.wav", "GAME") then DoorCloseSound:AddOption("10", {fading_door_closesound = "10"}) end
		if file.Exists("sound/npc/combine_gunship/attack_stop2.wav", "GAME") then DoorCloseSound:AddOption("11", {fading_door_closesound = "11"}) end
		if file.Exists("sound/npc/dog/dog_pneumatic1.wav", "GAME") then DoorCloseSound:AddOption("12", {fading_door_closesound = "12"}) end
		if file.Exists("sound/npc/dog/dog_pneumatic2.wav", "GAME") then DoorCloseSound:AddOption("13", {fading_door_closesound = "13"}) end
		
		local left = vgui.Create("DLabel", self)
		left:SetText("Close Sound")
		left:SetDark(true)
		DoorCloseSound:SetHeight(25)
		DoorCloseSound:Dock(TOP)
		
		self:AddItem(left, DoorCloseSound)
		self:AddControl("Numpad", {Label = "Button", ButtonSize = "22", Command = "fading_door_key"})
		self:MatSelect("fading_door_mat", list.Get("FDoorMaterials"), true, 0.33, 0.33)
	end
	
	local EFFECT = {}
	
	net.Receive("DrawFadeDoor",function()
		local String = net.ReadString()
		if String == "0" then
			EFFECT.Type = nil
			EFFECT.Ent = nil
			if EFFECT.Remove == false then EFFECT.Remove = true end
		else
			EFFECT.Type = nil
			EFFECT.Ent = nil
			if EFFECT.Remove == nil then util.Effect("render_fade_door", EffectData()) end
			EFFECT.Remove = false
			
			local Table = string.Explode("_",String)
			local Ent = ents.GetByIndex(tonumber(Table[1]))
			if IsValid(Ent) then
				EFFECT.Type = tonumber(Table[2])
				EFFECT.Ent = Ent
			end
		end
	end)
	
	function EFFECT:Init(data) end

	function EFFECT:Think()
		-- This makes the effect always visible.
		local pl = LocalPlayer()
		local Pos = pl:EyePos()
		local Trace = {}
		Trace.start = Pos
		Trace.endpos = Pos+(pl:GetAimVector()*10)
		Trace.filter = {pl}
		local TR = util.TraceLine(Trace)
		self:SetPos(TR.HitPos)
		
		-- Remove when ent is not valid.
		if !IsValid(EFFECT.Ent) then
			EFFECT.Type = nil
			EFFECT.Ent = nil
			EFFECT.Remove = true
		end
		
		if EFFECT.Remove or EFFECT.Remove == nil then
			EFFECT.Remove = nil
			return false
		end
		return true
	end
	
	function EFFECT:Render()
		if IsValid(EFFECT.Ent) then
			if EFFECT.Type == 1 then
				halo.Add({EFFECT.Ent}, Color(255, 255, 255, 255), 10, 10, 1, true, false)
			elseif EFFECT.Type == 2 then
				halo.Add({EFFECT.Ent}, Color(100, 255, 100, 255), 10, 10, 1, true, false)
			else
				halo.Add({EFFECT.Ent}, Color(255, 150, 50, 255), 10, 10, 1, true, false)
			end
		end
	end
	
	effects.Register(EFFECT,"render_fade_door",true)
	
	function TOOL:LeftClick(tr)
		if !tr.Entity or !tr.Entity:IsValid() then return false end
		if tr.Entity:IsPlayer() or tr.HitWorld then return false end
		return true
	end
	
	function TOOL:RightClick(tr)
		if !tr.Entity or !tr.Entity:IsValid() then return false end
		if tr.Entity:IsPlayer() or tr.HitWorld then return false end
		return true
	end

	function TOOL:Reload(tr)
		if !tr.Entity or !tr.Entity:IsValid() then return false end
		if tr.Entity:IsPlayer() or tr.HitWorld then return false end
		return true
	end
	
	return
end

local function fadeActivate(self)
	if self.fadeActive then return end
	self.fadeActive = true
	self.fadeMaterial = self:GetMaterial()
	self.fadeDoorMaterial = self.fadeDoorMaterial or "sprites/heatwave"
	self:SetMaterial(self.fadeDoorMaterial)
	self:DrawShadow(false)
	if self.fadeCanDisableMotion then self:SetNotSolid(true) else self:SetCollisionGroup(COLLISION_GROUP_WORLD) end
	local phys = self:GetPhysicsObject()
	if IsValid(phys) then
		self.fadeMoveable = phys:IsMoveable()
		phys:EnableMotion(false)
	end
	
	if self.fadeDoorOpenSound and Sounds and Sounds[self.fadeDoorOpenSound] then
		self:EmitSound(Sounds[self.fadeDoorOpenSound],350,100)
	end
	
	if self.fadeDoorLoopSound and LoopSounds and LoopSounds[self.fadeDoorLoopSound] and !self.FadeDoorSound then
		self.FadeDoorSound = CreateSound(self, LoopSounds[self.fadeDoorLoopSound])
		self.FadeDoorSound:Play()
	end
	
	if WireLib then
		Wire_TriggerOutput(self,  "FadeActive",  1)
	end
end

local function fadeDeactivate(self)
	self.fadeActive = false
	if self:GetMaterial() == self.fadeDoorMaterial and self.fadeMaterial then self:SetMaterial(self.fadeMaterial) end
	self:DrawShadow(true)
	if self.fadeCanDisableMotion then self:SetNotSolid(false) else self:SetCollisionGroup(COLLISION_GROUP_NONE) end
	local phys = self:GetPhysicsObject()
	if IsValid(phys) then
		phys:EnableMotion(self.fadeMoveable or false)
		phys:Wake()
	end
	
	if self.fadeDoorCloseSound and Sounds and Sounds[self.fadeDoorCloseSound] then
		self:EmitSound(Sounds[self.fadeDoorCloseSound],350,100)
	end
	
	if self.FadeDoorSound then self.FadeDoorSound:Stop() end
	self.FadeDoorSound = nil
	
	if WireLib then
		Wire_TriggerOutput(self,  "FadeActive",  0)
	end
end

local function onUp(pl, Ent)
	if IsValid(Ent) then
		local Activate = false
		if Ent.fadeToggle then
			if Ent.fadeReversed then
				Activate = !Ent.fadeActive
			else
				Activate = Ent.fadeActive
			end
		elseif Ent.fadeReversed then
			Activate = true
		end
		if Activate then
			if !Ent.fadeActive then Ent:fadeActivate() end
		else
			if Ent.fadeActive then Ent:fadeDeactivate() end
		end
	end
end
numpad.Register("Fading Door onUp", onUp)

local function onDown(pl, Ent)
	if IsValid(Ent) then
		local Activate = true
		if Ent.fadeToggle then
			if Ent.fadeReversed then
				Activate = Ent.fadeActive
			else
				Activate = !Ent.fadeActive
			end
		elseif Ent.fadeReversed then
			Activate = false
		end
		if Activate then
			if !Ent.fadeActive then Ent:fadeActivate() end
		else
			if Ent.fadeActive then Ent:fadeDeactivate() end
		end
	end
end
numpad.Register("Fading Door onDown", onDown)

local function getWireInputs(Ent)
	local inputs = Ent.Inputs
	local names, types, descs = {}, {}, {}
	if inputs then
		local num
		for _, data in pairs(inputs) do
			num = data.Num
			names[num] = data.Name
			types[num] = data.Type
			descs[num] = data.Desc
		end
	end
	return names, types, descs
end

local function doWireInputs(Ent)
	local inputs = Ent.Inputs
	if !inputs then
		Wire_CreateInputs(Ent, {"Fade"})
		return
	end
	local names, types, descs = {}, {}, {}
	local num
	for _, data in pairs(inputs) do
		num = data.Num
		names[num] = data.Name
		types[num] = data.Type
		descs[num] = data.Desc
	end
	table.insert(names, "Fade")
	WireLib.AdjustSpecialInputs(Ent, names, types, descs)
end

local function doWireOutputs(Ent)
	local outputs = Ent.Outputs
	if !outputs then
		Wire_CreateOutputs(Ent, {"FadeActive"})
		return
	end
	local names, types, descs = {}, {}, {}
	local num
	for _, data in pairs(outputs) do
		num = data.Num
		names[num] = data.Name
		types[num] = data.Type
		descs[num] = data.Desc
	end
	table.insert(names, "FadeActive")
	WireLib.AdjustSpecialOutputs(Ent, names, types, descs)
end

local function TriggerInput(self, name, value, ...)
	if name == "Fade" then
		if value == 0 then onUp(nil, self) else onDown(nil, self) end
	elseif self.fadeTriggerInput then
		return self:fadeTriggerInput(name, value, ...)
	end
end

local function PreEntityCopy(self)
	if self then
		local info = WireLib.BuildDupeInfo(self)
		if info then duplicator.StoreEntityModifier(self, "WireDupeInfo", info) end
		if self.fadePreEntityCopy then self:fadePreEntityCopy() end
	end
end

local function PostEntityPaste(self, pl, Ent, ents)
	if self then
		if self.EntityMods and self.EntityMods.WireDupeInfo then WireLib.ApplyDupeInfo(pl, self, self.EntityMods.WireDupeInfo, function(id) return ents[id] end) end
		if self.fadePostEntityPaste then self:fadePostEntityPaste(pl, Ent, ents) end
	end
end

local function onRemove(self)
	if self.fadeDeactivate then self:fadeDeactivate() end
	self.isFadingDoor = nil
	self.PreEntityCopy = self.fadePreEntityCopy
	self.fadePreEntityCopy = nil
	self.PostEntityPaste = self.fadePostEntityPaste
	self.fadePostEntityPaste = nil
	self.TriggerInput = self.fadeTriggerInput
	self.fadeTriggerInput = nil
	duplicator.ClearEntityModifier(self, "Fading Door")
	if self.fadeUpNum then numpad.Remove(self.fadeUpNum) end
	if self.fadeDownNum then numpad.Remove(self.fadeDownNum) end
	self.fadeActive = nil
	self.fadeMaterial = nil
	if IsValid(self.FadingDoorDummy) then self.FadingDoorDummy:Remove() end
	self.FadingDoorDummy = nil
	self.fadeToggle = nil
	self.fadeDoorMaterial = nil
	self.fadeMoveable = nil
	self.fadeCanDisableMotion = nil
	self.fadeDoorOpenSound = nil
	self.fadeDoorCloseSound = nil
	self.fadeDoorLoopSound = nil
	self.fadeDeactivate = nil
	self.fadeUpNum = nil
	self.fadeDownNum = nil
	self.fadeToggleActive = nil
	self.fadeReversed = nil
	self.fadeActivate = nil
	self.fadeKey = nil
	if self.OnDieFunctions then
		self.OnDieFunctions["UndoFadingDoor"..self:EntIndex()] = nil
		self.OnDieFunctions["Fading Doors"] = nil
	end
	if WireLib then
		if self.Inputs then
			Wire_Link_Clear(self, "Fade")
			self.Inputs['Fade'] = nil
			WireLib._SetInputs(self)
		end
		if self.Outputs then
			local port = self.Outputs['FadeActive']
			if port then
				for i,inp in ipairs(port.Connected) do
					if inp.Entity:IsValid() then
						Wire_Link_Clear(inp.Entity, inp.Name)
					end
				end
			end
			self.Outputs['FadeActive'] = nil
			WireLib._SetOutputs(self)
		end
	end
	if self.EntityMods and self.EntityMods.WireDupeInfo and self.EntityMods.WireDupeInfo.Wires then self.EntityMods.WireDupeInfo.Wires.Fade = nil end
end

local function RemoveKeys(self)
	if self.FadeDoorSound then self.FadeDoorSound:Stop() end
	numpad.Remove(self.fadeUpNum)
	numpad.Remove(self.fadeDownNum)
end

local function dooEet(pl, Ent, stuff)
	if Ent.isFadingDoor then
		if Ent.fadeDeactivate then Ent:fadeDeactivate() end
		RemoveKeys(Ent)
	else
		Ent.isFadingDoor = true
		Ent.fadeActivate = fadeActivate
		Ent.fadeDeactivate = fadeDeactivate
		Ent.fadeToggleActive = fadeToggleActive
		Ent:CallOnRemove("Fading Doors", RemoveKeys)
		if WireLib then
			doWireInputs(Ent)
			doWireOutputs(Ent)
			Ent.fadeTriggerInput = Ent.fadeTriggerInput or Ent.TriggerInput
			Ent.TriggerInput = TriggerInput
			if !Ent.IsWire then
				if !Ent.fadePreEntityCopy and Ent.PreEntityCopy then Ent.fadePreEntityCopy = Ent.PreEntityCopy end
				Ent.PreEntityCopy = PreEntityCopy
				if !Ent.fadePostEntityPaste and Ent.PreEntityCopy then Ent.fadePostEntityPaste = Ent.PostEntityPaste end
				Ent.PostEntityPaste = PostEntityPaste
			end
		end
	end
	Ent.fadeUpNum = numpad.OnUp(pl, stuff.key, "Fading Door onUp", Ent)
	Ent.fadeDownNum = numpad.OnDown(pl, stuff.key, "Fading Door onDown", Ent)
	Ent.fadeToggle = stuff.toggle
	Ent.fadeReversed = stuff.reversed
	Ent.fadeKey = stuff.key
	Ent.fadeCanDisableMotion = stuff.CanDisableMotion
	Ent.fadeDoorMaterial = stuff.DoorMaterial
	Ent.fadeDoorOpenSound = stuff.DoorOpenSound
	Ent.fadeDoorLoopSound = stuff.DoorLoopSound
	Ent.fadeDoorCloseSound = stuff.DoorCloseSound
	if stuff.reversed then Ent:fadeActivate() end
	duplicator.StoreEntityModifier(Ent, "Fading Door", stuff)
	return true
end

duplicator.RegisterEntityModifier("Fading Door", dooEet)
hook.Add("Initialize", "FadingDoor1", function() duplicator.RegisterEntityModifier("Fading Door", dooEet) end)	-- No overwrite.

if !FadingDoor then
	local function legacy(pl, Ent, data)
		return dooEet(pl, Ent, {
			key					= data.Key,
			toggle				= data.Toggle,
			reversed			= data.Inverse,
			CanDisableMotion	= data.CanDisableMotion,
			DoorMaterial		= data.DoorMaterial,
			DoorOpenSound		= data.DoorOpenSound,
			DoorLoopSound		= data.DoorLoopSound,
			DoorCloseSound		= data.DoorCloseSound
		})
	end
	duplicator.RegisterEntityModifier("FadingDoor", legacy)
	hook.Add("Initialize", "FadingDoor2", function() duplicator.RegisterEntityModifier("FadingDoor", legacy) end)	-- No overwrite.
end

function TOOL:LeftClick(tr)
	if !tr.Entity or !tr.Entity:IsValid() then return false end
	if tr.Entity:IsPlayer() or tr.HitWorld then return false end
	if CLIENT then return true end
	
	local Ent = tr.Entity
	local pl = self:GetOwner()
	
	if !IsValid(pl) then return false end
	
	local phys = Ent:GetPhysicsObject()
	local CanDisableMotion = false
	
	if phys:IsValid() then
		local MotionEnabled = phys:IsMotionEnabled()
		phys:EnableMotion(!MotionEnabled)
		CanDisableMotion = MotionEnabled != phys:IsMotionEnabled()
		phys:EnableMotion(MotionEnabled)
	end
	
	if self.AimEnt then
		self.AimEnt[pl] = nil
		net.Start("DrawFadeDoor")
		net.WriteString("0")
		net.Send(pl)
	end
	
	dooEet(pl, Ent, {
		key     			= self:GetClientNumber("key"),
		toggle   			= self:GetClientNumber("swap") == 1,
		reversed			= self:GetClientNumber("reversed") == 1,
		CanDisableMotion	= CanDisableMotion,
		DoorMaterial		= self:GetClientInfo("mat"),
		DoorOpenSound     	= self:GetClientNumber("opensound"),
		DoorLoopSound     	= self:GetClientNumber("loopsound"),
		DoorCloseSound     	= self:GetClientNumber("closesound")
	})
	
	if !IsValid(Ent.FadingDoorDummy) then
		local Dummy = ents.Create("info_null")
		Dummy.Owner = pl
		Dummy.Door = Ent
		undo.Create("Undo fading door")
		undo.AddEntity(Dummy)
		Ent.FadingDoorDummy = Dummy
		local UndoT = {Ent,self:GetOwner(),self}
		undo.AddFunction(function(Undo, UndoT)
			local Ent = UndoT[1]
			local pl = UndoT[2]
			local Tool = UndoT[3]
			if IsValid(Ent) then onRemove(Ent) end
			if IsValid(pl) then
				if Tool and Tool.AimEnt then Tool.AimEnt[pl] = nil end
				net.Start("DrawFadeDoor")
				net.WriteString("0")
				net.Send(pl)
			end
		end, UndoT)
		undo.SetPlayer(pl)
		undo.SetCustomUndoText("Undone Fading Door")
		undo.Finish()
		
		Ent:CallOnRemove("UndoFadingDoor"..Ent:EntIndex(),function(Ent)
			if Ent.FadingDoorDummy and Ent.FadingDoorDummy:IsValid() then
				if IsValid(Ent.FadingDoorDummy.Owner) then
					local PlayerID = Ent.FadingDoorDummy.Owner:UniqueID()
					local PlayerUndo = undo:GetTable()[PlayerID]
					if PlayerUndo then
						for k,v in pairs(PlayerUndo) do
							if PlayerUndo[k] and PlayerUndo[k].Name and PlayerUndo[k].Name == "Undo fading door" and PlayerUndo[k].Entities and IsValid(PlayerUndo[k].Entities[1]) and PlayerUndo[k].Entities[1]:GetTable().Door == Ent then
								undo:GetTable()[PlayerID][k] = nil
								break
							end
						end
					end
				end
				Ent.FadingDoorDummy:Remove()
			end
		end,Ent)
	end
	
	return true
end

function TOOL:RightClick(tr)
	if !tr.Entity or !tr.Entity:IsValid() then return false end
	if tr.Entity:IsPlayer() or tr.HitWorld then return false end
	if CLIENT then return true end
	local Ent = tr.Entity
	if Ent.isFadingDoor then
		local pl = self:GetOwner()
		if !IsValid(pl) then return false end
		if Ent.fadeKey != nil then pl:ConCommand("fading_door_key "..tostring(Ent.fadeKey)) end
		if Ent.fadeToggle != nil then if Ent.fadeToggle then pl:ConCommand("fading_door_swap 1") else pl:ConCommand("fading_door_swap 0") end end
		if Ent.fadeReversed != nil then if Ent.fadeReversed then pl:ConCommand("fading_door_reversed 1") else pl:ConCommand("fading_door_reversed 0") end end
		if Ent.fadeDoorMaterial != nil then pl:ConCommand("fading_door_mat "..Ent.fadeDoorMaterial) end
		if Ent.fadeDoorOpenSound != nil then pl:ConCommand("fading_door_opensound "..tostring(Ent.fadeDoorOpenSound)) end
		if Ent.fadeDoorLoopSound != nil then pl:ConCommand("fading_door_loopsound "..tostring(Ent.fadeDoorLoopSound)) end
		if Ent.fadeDoorCloseSound != nil then pl:ConCommand("fading_door_closesound "..tostring(Ent.fadeDoorCloseSound)) end
		return true
	end
end

function TOOL:Reload(tr)
	if !tr.Entity or !tr.Entity:IsValid() then return false end
	if tr.Entity:IsPlayer() or tr.HitWorld then return false end
	if CLIENT then return true end
	local Ent = tr.Entity
	
	if Ent.isFadingDoor then
		if IsValid(Ent.FadingDoorDummy) then
			if IsValid(Ent.FadingDoorDummy.Owner) then
				local PlayerID = Ent.FadingDoorDummy.Owner:UniqueID()
				local PlayerUndo = undo:GetTable()[PlayerID]
				if PlayerUndo then
					for k,v in pairs(PlayerUndo) do
						if PlayerUndo[k] and PlayerUndo[k].Name and PlayerUndo[k].Name == "Undo fading door" and PlayerUndo[k].Entities and IsValid(PlayerUndo[k].Entities[1]) and PlayerUndo[k].Entities[1]:GetTable().Door == Ent then
							undo:GetTable()[PlayerID][k] = nil
							break
						end
					end
				end
			end
			Ent.FadingDoorDummy:Remove()
		end
		onRemove(Ent)
		net.Start("DrawFadeDoor")
		net.WriteString(tostring(Ent:EntIndex()).."_1")
		net.Send(self:GetOwner())
		return true
	end
end

function TOOL:Holster()
	if CLIENT then return end
	local pl = self:GetOwner()
	if !IsValid(pl) then return false end
	if self.AimEnt and self.AimEnt[pl] != nil then
		self.AimEnt[pl] = nil
		net.Start("DrawFadeDoor")
		net.WriteString("0")
		net.Send(pl)
	end
end

function TOOL:Think()
	if CLIENT then return end
	if self.Hold then return end
	local pl = self:GetOwner()
	local trace = pl:GetEyeTrace()
	
	if trace.Hit and trace.Entity and trace.Entity:IsValid() and !trace.Entity:IsPlayer() then
		if !self.AimEnt then self.AimEnt = {} end
		if !self.OldKey then self.OldKey = {} end
		if !self.OldToggle then self.OldToggle = {} end
		if !self.OldReversed then self.OldReversed = {} end
		
		if !IsValid(pl) then return false end
		
		if trace.Entity != self.AimEnt[pl] or self:GetClientNumber("key") != self.OldKey[pl] or self:GetClientNumber("swap") != self.OldToggle[pl] or self:GetClientNumber("reversed") != self.OldReversed[pl] then
			self.AimEnt[pl] = trace.Entity
			local Key = self:GetClientNumber("key")
			self.OldKey[pl] = Key
			local Toggle = self:GetClientNumber("swap")
			self.OldToggle[pl] = Toggle
			local Reversed = self:GetClientNumber("reversed")
			self.OldReversed[pl] = Reversed
			if trace.Entity.isFadingDoor then
				Toggle = Toggle == 1
				Reversed = Reversed == 1
				if trace.Entity.fadeKey == Key and trace.Entity.fadeReversed == Reversed and trace.Entity.fadeToggle == Toggle then
					net.Start("DrawFadeDoor")
					net.WriteString(tostring(trace.Entity:EntIndex()).."_2")
					net.Send(pl)
				else
					net.Start("DrawFadeDoor")
					net.WriteString(tostring(trace.Entity:EntIndex()).."_3")
					net.Send(pl)
				end
			else
				net.Start("DrawFadeDoor")
				net.WriteString(tostring(trace.Entity:EntIndex()).."_1")
				net.Send(pl)
			end
		end
	elseif self.AimEnt and self.AimEnt[pl] != nil then
		self.AimEnt[pl] = nil
		net.Start("DrawFadeDoor")
		net.WriteString("0")
		net.Send(pl)
	end
end
--addons/ledscreen/lua/weapons/gmod_tool/stools/ledscreen.lua:
TOOL.Category		= "Construction"
TOOL.Name			= "LED Ekran"
TOOL.Command		= nil
TOOL.ConfigName		= ""

local TextBox = {}
local slider = {}
local slider2 = {}
local slider3 = {}
local frame = {}
TOOL.ClientConVar[ "text" ] = ""
TOOL.ClientConVar[ "type" ] = 1
TOOL.ClientConVar[ "speed" ] = 1.5
TOOL.ClientConVar[ "wide" ] = 6
TOOL.ClientConVar[ "fx" ] = 0
TOOL.ClientConVar[ "wire" ] = 0
TOOL.ClientConVar[ "r"] = 255
TOOL.ClientConVar[ "g" ] = 200
TOOL.ClientConVar[ "b" ] = 0

if (SERVER) then
	CreateConVar('sbox_maxledscreens', 5)
end

cleanup.Register("ledscreens")

TOOL.Information = {
	{ name = "left" },
	{ name = "right" }
}

if (CLIENT) then
	language.Add("Tool.ledscreen.name", "LED Ekran")
	language.Add("Tool.ledscreen.desc", "LED panel oluştur")	

	language.Add("Tool.ledscreen.left", "LED panel oluştur");
	language.Add("Tool.ledscreen.right", "LED paneli güncelle");
	language.Add("Tool.ledscreen.reload", "LED panel ayarlarını kopyala");
	
	language.Add("Undone.ledscreens", "LED panel geri alındı")
	language.Add("Undone_ledscreens", "LED panel geri alındı")
	language.Add("Cleanup.ledscreens", "LED paneller")
	language.Add("Cleanup_ledscreens", "LED paneller")
	language.Add("Cleaned.ledscreens", "LED paneller silindi")
	language.Add("Cleaned_ledscreens", "LED paneller silindi")
	
	language.Add("SBoxLimit.ledscreens", "LED panel limitine takıldın!")
	language.Add("SBoxLimit_ledscreens", "LED panel limitine takıldın!")
end

local function GetConvars(self)
	local type = tonumber(self:GetClientInfo("type"))
	if !isnumber(type) then type = 1 end
	
	local speed = tonumber(self:GetClientInfo("speed"))
	if !isnumber(speed) then speed = 1.5 end
	
	local wide = tonumber(self:GetClientInfo("wide"))
	if !isnumber(wide) then wide = 6 end
	
	local fx = tonumber(self:GetClientInfo("fx"))
	if !isnumber(fx) then fx = 0 end
	
	local r, g, b = tonumber(self:GetClientInfo("r")), tonumber(self:GetClientInfo("g")), tonumber(self:GetClientInfo("b"))
	if !isnumber(r) or !isnumber(g) or !isnumber(b) then r, g, b = 255, 200, 100 end
	
	return math.Clamp(type, 1, 4), math.Clamp(speed, 1, 10), math.Clamp(wide, 3, 8), math.Clamp(fx, 0, 1), r, g, b
end

function TOOL:LeftClick(tr)
	if (tr.Entity:GetClass() == "player") then return false end
	if (CLIENT) then return true end

	local Ply = self:GetOwner()
	local centerpos = {
		[3] = {18, 0},
		[4] = {11.5, 6},
		[5] = {18, 6},
		[6] = {36, 6},
		[7] = {42, 6},
		[8] = {48, 6},
	}
	
	local type, speed, wide, fx, r, g, b = GetConvars(self)
	
	local angle = tr.HitNormal:Angle()
	local SpawnPos = tr.HitPos + angle:Right() * centerpos[wide][1] - angle:Up() * centerpos[wide][2]
	
	if not (self:GetWeapon():CheckLimit("ledscreens")) then return false end

	local TextScreen

		TextScreen = ents.Create("gb_rp_sign")

	TextScreen:SetPos(SpawnPos)
	TextScreen:Spawn()
	
	angle:RotateAroundAxis(tr.HitNormal:Angle():Right(), -90)
	angle:RotateAroundAxis(tr.HitNormal:Angle():Forward(), 90)
	TextScreen:SetAngles(angle)
	TextScreen:SetText(self:GetClientInfo("text"))
	TextScreen:SetType(type)
	TextScreen:SetSpeed(speed)
	TextScreen:SetWide(wide)
	TextScreen:SetModel("models/squad/sf_plates/sf_plate1x"..wide..".mdl")
	TextScreen:SetTColor(Vector(r/100, g/100, b/100))
	TextScreen:SetFX(fx)
	TextScreen:Activate()
	local Phys = TextScreen:GetPhysicsObject()
	Phys:EnableMotion( false )
	
	undo.Create("ledscreens")

	undo.AddEntity(TextScreen)
	undo.SetPlayer(Ply)
	undo.Finish()

	Ply:AddCount("ledscreens", TextScreen)
	Ply:AddCleanup("ledscreens", TextScreen)

	return true
end

function TOOL:RightClick(tr)
	if (tr.Entity:GetClass() == "player") then return false end
	if (CLIENT) then return true end

	local TraceEnt = tr.Entity
	
	local type, speed, wide, fx, r, g, b = GetConvars(self)
	
	if (TraceEnt:IsValid() and TraceEnt:GetClass() == "gb_rp_sign") then
		TraceEnt:SetText(self:GetClientInfo("text"))
		TraceEnt:SetType(type)
		TraceEnt:SetSpeed(speed)
		TraceEnt:SetWide(wide)
		TraceEnt:SetFX(fx)
		TraceEnt:SetModel("models/squad/sf_plates/sf_plate1x"..wide..".mdl")
		TraceEnt:SetTColor(Vector(r/100, g/100, b/100))
		return true
	end
	
	
end

function TOOL:Reload(tr)

	if !IsValid(tr.Entity) then return false end
	local TraceEnt = tr.Entity
	
	if (TraceEnt:IsValid() and TraceEnt:GetClass() == "gb_rp_sign") then
		if CLIENT or game.SinglePlayer() then
			local color = TraceEnt:GetTColor()
			RunConsoleCommand("ledscreen_text", TraceEnt:GetText())
			RunConsoleCommand("ledscreen_type", TraceEnt:GetType())
			RunConsoleCommand("ledscreen_r", color.x*100)
			RunConsoleCommand("ledscreen_g", color.y*100)
			RunConsoleCommand("ledscreen_b", color.z*100)
			RunConsoleCommand("ledscreen_speed", TraceEnt:GetSpeed())
			RunConsoleCommand("ledscreen_wide", TraceEnt:GetWide())
			RunConsoleCommand("ledscreen_fx", TraceEnt:GetFX())
		end
	end


	return true

end


function TOOL.BuildCPanel(CPanel)
	CPanel:AddControl("Header", {	Text = "#Tool.ledscreen.name" } )
	resetall = vgui.Create("DButton", resetbuttons)
	resetall:SetSize(100, 25)	
	resetall:SetText("Ayarları sıfırla")
	resetall.DoClick = function()
		RunConsoleCommand("ledscreen_text", "")
		RunConsoleCommand("ledscreen_type", 1)
		RunConsoleCommand("ledscreen_r", 255)
		RunConsoleCommand("ledscreen_g", 200)
		RunConsoleCommand("ledscreen_b", 0)
		RunConsoleCommand("ledscreen_speed", 1.5)
		RunConsoleCommand("ledscreen_wide", 6)
		RunConsoleCommand("ledscreen_fx", 0)
		RunConsoleCommand("ledscreen_wire", 0)
		slider:SetValue(1)
		slider2:SetValue(1.5)
		slider3:SetValue(6)
		TextBox:SetValue("")

	end
	CPanel:AddItem(resetall)
	local font = "InfoRUS3"
	frame = vgui.Create( "DPanel" )
	frame:SetSize( CPanel:GetWide(), 50 )
	frame.appr = nil
	frame.Paint = function(self,w,h)
		draw.RoundedBox(0,0,0,w,h,Color(0,0,0))
		surface.SetFont(font)
		local alfa
		if GetConVarNumber("ledscreen_fx") > 0 then
			alfa = math.random(100,220)
		else
			alfa = 255
		end
		self.Text = GetConVarString("ledscreen_text")
		self.Type = GetConVarNumber("ledscreen_type")
		self.Speed = GetConVarNumber("ledscreen_speed")
		self.static = false
		local ww,hh = surface.GetTextSize(self.Text)
		local multiplier = self.Speed * 100
		self.Color = Color(GetConVarNumber("ledscreen_r"),GetConVarNumber("ledscreen_g"),GetConVarNumber("ledscreen_b"), alfa)
		if self.Type == 1 then	
		
			local xs = (math.fmod(SysTime() * multiplier,w+ww)) - ww
			draw.DrawText(self.Text,font,xs,0,self.Color,0)
			
		elseif self.Type == 2 then
					
				if !self.appr or self.appr > ww  then
					self.appr = -w
				else
					self.appr = math.Approach(self.appr, ww+w, FrameTime() * multiplier) 
				end
					
				draw.DrawText(self.Text,font,self.appr * -1,0,self.Color,0)
				
		else
				if !self.appr then
					self.appr = 0
				end
					
					if w > ww then
						if self.Type == 3 then
							if self.appr < w-ww and !self.refl then
								self.appr = math.Approach(self.appr, ww+w, FrameTime() * multiplier) 
							else
								if self.appr <= 0 then
									self.refl = nil
								else
									self.refl = true
									self.appr = math.Approach(self.appr, 0, FrameTime() * multiplier) 
								end
							end
						else
							self.static = true
						end
					else
						if self.appr > w-ww-50 and !self.refl then
							self.appr = math.Approach(self.appr, w-ww-50, FrameTime() * multiplier) 
						else
							if self.appr >= 50 then
								self.refl = nil
							else
								self.refl = true
								self.appr = math.Approach(self.appr, 50, FrameTime() * multiplier) 
							end
						end
					end
					if self.static then
						draw.DrawText(self.Text,font,w/2,0,self.Color,1)
					else
						draw.DrawText(self.Text,font,self.appr,0,self.Color,0)
					end
		end
	end
		
	CPanel:AddItem(frame)

		
	slider = vgui.Create("DNumSlider")
	slider:SetText("Tür")
	slider:SetMinMax(1, 4)
	slider:SetDecimals(0)
	slider:SetValue(1)
	slider:SetConVar("ledscreen_type")
	CPanel:AddItem(slider)
	
	slider2 = vgui.Create("DNumSlider")
	slider2:SetText("Hız")
	slider2:SetMinMax(1, 10)
	slider2:SetDecimals(1)
	slider2:SetValue(1)
	slider2:SetConVar("ledscreen_speed")
	CPanel:AddItem(slider2)
	
	slider3 = vgui.Create("DNumSlider")
	slider3:SetText("Genişlik")
	slider3:SetMinMax(3, 8)
	slider3:SetDecimals(0)
	slider3:SetValue(6)
	slider3:SetConVar("ledscreen_wide")
	CPanel:AddItem(slider3)
		
	TextBox = vgui.Create("DTextEntry")
	TextBox:SetUpdateOnType(true)
	TextBox:SetEnterAllowed(true)
	TextBox:SetConVar("ledscreen_text")
	TextBox:SetValue(GetConVarString("ledscreen_text"))
	CPanel:AddItem(TextBox)
	
	CPanel:AddControl( "CheckBox", { Label = "Flicker efekti", Description = "", Command = "ledscreen_fx" } )
	--CPanel:AddControl( "CheckBox", { Label = "WireMod support", Description = "", Command = "ledscreen_wire" } )
	
	CPanel:AddControl("Color", {
			Label = "LED renk",
			Red = "ledscreen_r",
			Green = "ledscreen_g",
			Blue = "ledscreen_b",
			ShowHSV = 1,
			ShowRGB = 1,
			Multiplier = 255
		})
	
	CPanel:AddControl("Label", {	Text = "Gmod-Best.Ru ©2013-2019\nWith <3 from Mac + BinBon" } )
	
end

--lua/weapons/gmod_tool/stools/shadowremover.lua:
return gluapack()()
--lua/improvedstacker/localify.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/zrmine_config.lua:
return gluapack()()
--lua/weapons/guitar_stalker/shared.lua:

function SWEP:Initialize()

	if CLIENT then
		self.VElements = table.FullCopy( self.VElements )
		self.WElements = table.FullCopy( self.WElements )
		self.ViewModelBoneMods = table.FullCopy( self.ViewModelBoneMods )

		self:CreateModels(self.VElements) // create viewmodels
		self:CreateModels(self.WElements) // create worldmodels
		
		if IsValid(self.Owner) then
			local vm = self.Owner:GetViewModel()
			if IsValid(vm) then
				self:ResetBonePositions(vm)
				
				if (self.ShowViewModel == nil or self.ShowViewModel) then
					vm:SetColor(Color(255,255,255,255))
				else
					vm:SetColor(Color(255,255,255,1))
					vm:SetMaterial("Debug/hsv")			
				end
			end
		end
		
	end
	
	self:SetWeaponHoldType("slam")
	
	for i = 1, 13 do
		self["Guitar" .. i] = CreateSound(self, "Guitar" .. i)
	end
	
	self.CurGuitar = 0

end

function SWEP:Holster()
	self.Weapon:EmitSound(Sound("ambient/machines/squeak_2.wav"))
	if CLIENT and IsValid(self.Owner) then
		local vm = self.Owner:GetViewModel()
		if IsValid(vm) then
			self:ResetBonePositions(vm)
		end
	end
	
	return true
end

function SWEP:OnRemove()
	self:Holster()
	end

if CLIENT then

	SWEP.vRenderOrder = nil
	function SWEP:ViewModelDrawn()
		
		local vm = self.Owner:GetViewModel()
		if !IsValid(vm) then return end
		
		if (!self.VElements) then return end
		
		self:UpdateBonePositions(vm)

		if (!self.vRenderOrder) then
			
			self.vRenderOrder = {}

			for k, v in pairs( self.VElements ) do
				if (v.type == "Model") then
					table.insert(self.vRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.vRenderOrder, k)
				end
			end
			
		end

		for k, name in ipairs( self.vRenderOrder ) do
		
			local v = self.VElements[name]
			if (!v) then self.vRenderOrder = nil break end
			if (v.hide) then continue end
			
			local model = v.modelEnt
			local sprite = v.spriteMaterial
			
			if (!v.bone) then continue end
			
			local pos, ang = self:GetBoneOrientation( self.VElements, v, vm )
			
			if (!pos) then continue end
			
			if (v.type == "Model" and IsValid(model)) then

				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z )
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)

				model:SetAngles(ang)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix( "RenderMultiply", matrix )
				
				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() != v.material) then
					model:SetMaterial( v.material )
				end
				
				if (v.skin and v.skin != model:GetSkin()) then
					model:SetSkin(v.skin)
				end
				
				if (v.bodygroup) then
					for k, v in pairs( v.bodygroup ) do
						if (model:GetBodygroup(k) != v) then
							model:SetBodygroup(k, v)
						end
					end
				end
				
				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end
				
				render.SetColorModulation(v.color.r/255, v.color.g/255, v.color.b/255)
				render.SetBlend(v.color.a/255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)
				
				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
				
			elseif (v.type == "Sprite" and sprite) then
				
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
				
			elseif (v.type == "Quad" and v.draw_func) then
				
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				
				cam.Start3D2D(drawpos, ang, v.size)
					v.draw_func( self )
				cam.End3D2D()

			end
			
		end
		
	end

	SWEP.wRenderOrder = nil
	function SWEP:DrawWorldModel()
		
		if (self.ShowWorldModel == nil or self.ShowWorldModel) then
			self:DrawModel()
		end
		
		if (!self.WElements) then return end
		
		if (!self.wRenderOrder) then

			self.wRenderOrder = {}

			for k, v in pairs( self.WElements ) do
				if (v.type == "Model") then
					table.insert(self.wRenderOrder, 1, k)
				elseif (v.type == "Sprite" or v.type == "Quad") then
					table.insert(self.wRenderOrder, k)
				end
			end

		end
		
		if (IsValid(self.Owner)) then
			bone_ent = self.Owner
		else
			bone_ent = self
		end
		
		for k, name in pairs( self.wRenderOrder ) do
		
			local v = self.WElements[name]
			if (!v) then self.wRenderOrder = nil break end
			if (v.hide) then continue end
			
			local pos, ang
			
			if (v.bone) then
				pos, ang = self:GetBoneOrientation( self.WElements, v, bone_ent )
			else
				pos, ang = self:GetBoneOrientation( self.WElements, v, bone_ent, "ValveBiped.Bip01_R_Hand" )
			end
			
			if (!pos) then continue end
			
			local model = v.modelEnt
			local sprite = v.spriteMaterial
			
			if (v.type == "Model" and IsValid(model)) then

				model:SetPos(pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z )
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)

				model:SetAngles(ang)
				local matrix = Matrix()
				matrix:Scale(v.size)
				model:EnableMatrix( "RenderMultiply", matrix )
				
				if (v.material == "") then
					model:SetMaterial("")
				elseif (model:GetMaterial() != v.material) then
					model:SetMaterial( v.material )
				end
				
				if (v.skin and v.skin != model:GetSkin()) then
					model:SetSkin(v.skin)
				end
				
				if (v.bodygroup) then
					for k, v in pairs( v.bodygroup ) do
						if (model:GetBodygroup(k) != v) then
							model:SetBodygroup(k, v)
						end
					end
				end
				
				if (v.surpresslightning) then
					render.SuppressEngineLighting(true)
				end
				
				render.SetColorModulation(v.color.r/255, v.color.g/255, v.color.b/255)
				render.SetBlend(v.color.a/255)
				model:DrawModel()
				render.SetBlend(1)
				render.SetColorModulation(1, 1, 1)
				
				if (v.surpresslightning) then
					render.SuppressEngineLighting(false)
				end
				
			elseif (v.type == "Sprite" and sprite) then
				
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				render.SetMaterial(sprite)
				render.DrawSprite(drawpos, v.size.x, v.size.y, v.color)
				
			elseif (v.type == "Quad" and v.draw_func) then
				
				local drawpos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
				ang:RotateAroundAxis(ang:Up(), v.angle.y)
				ang:RotateAroundAxis(ang:Right(), v.angle.p)
				ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				
				cam.Start3D2D(drawpos, ang, v.size)
					v.draw_func( self )
				cam.End3D2D()

			end
			
		end
		
	end

	function SWEP:GetBoneOrientation( basetab, tab, ent, bone_override )
		
		local bone, pos, ang
		if (tab.rel and tab.rel != "") then
			
			local v = basetab[tab.rel]
			
			if (!v) then return end
			
			pos, ang = self:GetBoneOrientation( basetab, v, ent )
			
			if (!pos) then return end
			
			pos = pos + ang:Forward() * v.pos.x + ang:Right() * v.pos.y + ang:Up() * v.pos.z
			ang:RotateAroundAxis(ang:Up(), v.angle.y)
			ang:RotateAroundAxis(ang:Right(), v.angle.p)
			ang:RotateAroundAxis(ang:Forward(), v.angle.r)
				
		else
		
			bone = ent:LookupBone(bone_override or tab.bone)

			if (!bone) then return end
			
			pos, ang = Vector(0,0,0), Angle(0,0,0)
			local m = ent:GetBoneMatrix(bone)
			if (m) then
				pos, ang = m:GetTranslation(), m:GetAngles()
			end
			
			if (IsValid(self.Owner) and self.Owner:IsPlayer() and 
				ent == self.Owner:GetViewModel() and self.ViewModelFlip) then
				ang.r = -ang.r
			end
		
		end
		
		return pos, ang
	end

	function SWEP:CreateModels( tab )

		if (!tab) then return end

		for k, v in pairs( tab ) do
			if (v.type == "Model" and v.model and v.model != "" and (!IsValid(v.modelEnt) or v.createdModel != v.model) and 
					string.find(v.model, ".mdl") and file.Exists (v.model, "GAME") ) then
				
				v.modelEnt = ClientsideModel(v.model, RENDER_GROUP_VIEW_MODEL_OPAQUE)
				if (IsValid(v.modelEnt)) then
					v.modelEnt:SetPos(self:GetPos())
					v.modelEnt:SetAngles(self:GetAngles())
					v.modelEnt:SetParent(self)
					v.modelEnt:SetNoDraw(true)
					v.createdModel = v.model
				else
					v.modelEnt = nil
				end
				
			elseif (v.type == "Sprite" and v.sprite and v.sprite != "" and (!v.spriteMaterial or v.createdSprite != v.sprite) 
				and file.Exists ("materials/"..v.sprite..".vmt", "GAME")) then
				
				local name = v.sprite.."-"
				local params = { ["$basetexture"] = v.sprite }
				local tocheck = { "nocull", "additive", "vertexalpha", "vertexcolor", "ignorez" }
				for i, j in pairs( tocheck ) do
					if (v[j]) then
						params["$"..j] = 1
						name = name.."1"
					else
						name = name.."0"
					end
				end

				v.createdSprite = v.sprite
				v.spriteMaterial = CreateMaterial(name,"UnlitGeneric",params)
				
			end
		end
		
	end
	
	local allbones
	local hasGarryFixedBoneScalingYet = false

	function SWEP:UpdateBonePositions(vm)
		
		if self.ViewModelBoneMods then
			
			if (!vm:GetBoneCount()) then return end
			
			local loopthrough = self.ViewModelBoneMods
			if (!hasGarryFixedBoneScalingYet) then
				allbones = {}
				for i=0, vm:GetBoneCount() do
					local bonename = vm:GetBoneName(i)
					if (self.ViewModelBoneMods[bonename]) then 
						allbones[bonename] = self.ViewModelBoneMods[bonename]
					else
						allbones[bonename] = { 
							scale = Vector(1,1,1),
							pos = Vector(0,0,0),
							angle = Angle(0,0,0)
						}
					end
				end
				
				loopthrough = allbones
			end
			
			for k, v in pairs( loopthrough ) do
				local bone = vm:LookupBone(k)
				if (!bone) then continue end
				
				local s = Vector(v.scale.x,v.scale.y,v.scale.z)
				local p = Vector(v.pos.x,v.pos.y,v.pos.z)
				local ms = Vector(1,1,1)
				if (!hasGarryFixedBoneScalingYet) then
					local cur = vm:GetBoneParent(bone)
					while(cur >= 0) do
						local pscale = loopthrough[vm:GetBoneName(cur)].scale
						ms = ms * pscale
						cur = vm:GetBoneParent(cur)
					end
				end
				
				s = s * ms
				
				if vm:GetManipulateBoneScale(bone) != s then
					vm:ManipulateBoneScale( bone, s )
				end
				if vm:GetManipulateBoneAngles(bone) != v.angle then
					vm:ManipulateBoneAngles( bone, v.angle )
				end
				if vm:GetManipulateBonePosition(bone) != p then
					vm:ManipulateBonePosition( bone, p )
				end
			end
		else
			self:ResetBonePositions(vm)
		end
		   
	end
	 
	function SWEP:ResetBonePositions(vm)
		
		if (!vm:GetBoneCount()) then return end
		for i=0, vm:GetBoneCount() do
			vm:ManipulateBoneScale( i, Vector(1, 1, 1) )
			vm:ManipulateBoneAngles( i, Angle(0, 0, 0) )
			vm:ManipulateBonePosition( i, Vector(0, 0, 0) )
		end
		
	end

	function table.FullCopy( tab )

		if (!tab) then return nil end
		
		local res = {}
		for k, v in pairs( tab ) do
			if (type(v) == "table") then
				res[k] = table.FullCopy(v) // recursion ho!
			elseif (type(v) == "Vector") then
				res[k] = Vector(v.x, v.y, v.z)
			elseif (type(v) == "Angle") then
				res[k] = Angle(v.p, v.y, v.r)
			else
				res[k] = v
			end
		end
		
		return res
		
	end
	
end

if CLIENT then
SWEP.ViewModelBoneMods = {}
SWEP.WElements = {
	["element_name"] = { type = "Model", model = "models/custom/guitar/m_d_45.mdl", bone = "ValveBiped.Bip01_R_Hand", rel = "", pos = Vector(-16.42, 34.831, -4.919), angle = Angle(-82.644, 60.391, -0.542), size = Vector(0.995, 0.995, 0.995), color = Color(255, 255, 254, 255), surpresslightning = false, material = "", skin = 1, bodygroup = {} }
}
end

SWEP.Base = "weapon_base"

-- Visual/sound settings
if ( SERVER ) then
	AddCSLuaFile( "shared.lua" )
end

if CLIENT then
	SWEP.DrawCrosshair = false
	SWEP.PrintName = "Turkce Gitar"
end

SWEP.Category = "Turkce Gitar"
SWEP.PrintName		= "Turkce Gitar"
SWEP.Slot		= 2
SWEP.SlotPos		= 4
SWEP.DrawAmmo		= false
SWEP.ViewModel		= "models/weapons/tayley/v_guitar.mdl"
SWEP.WorldModel		= "models/custom/guitar/m_d_45.mdl"
SWEP.HoldType = "slam"

SWEP.ViewModelFOV = 70
SWEP.ViewModelFlip = false
SWEP.ShowViewModel = true
SWEP.ShowWorldModel = false
-- Other settings
SWEP.Weight			= 5
SWEP.AutoSwitchTo	= false
SWEP.AutoSwitchFrom	= false
SWEP.Spawnable		= true
SWEP.AdminSpawnable	= true

-- SWEP info
SWEP.Author			= "ByFog,"
SWEP.Contact		= ""
SWEP.Purpose		= "Turkce Gitar"
SWEP.Instructions	= "Sol click - Hazir Muzik, Sag click - Akorlar, R - Dur."

-- Primary fire settings
SWEP.Primary.Sound				= Sound("none")
SWEP.Primary.Damage				= -1
SWEP.Primary.NumShots			= -1
SWEP.Primary.Recoil				= 0
SWEP.Primary.Cone				= 16
SWEP.Primary.Delay				= 1
SWEP.Primary.ClipSize			= 999999999
SWEP.Primary.DefaultClip		= 999999999
SWEP.Primary.Tracer				= -1
SWEP.Primary.Force				= -1
SWEP.Primary.TakeAmmoPerBullet	= false
SWEP.Primary.Automatic			= false
SWEP.Primary.Ammo				= "none"
SWEP.IronSightsPos 		= Vector(0, 0, 0)
SWEP.IronSightsAng 		= Vector(0, 0, 0)

-- Secondary fire settings
SWEP.Secondary.Sound				= Sound("Guitar/guitar_6.mp3")
SWEP.Secondary.Damage				= 0
SWEP.Secondary.NumShots				= 1
SWEP.Secondary.Recoil				= 1
SWEP.Secondary.Cone					= 3
SWEP.Secondary.Delay				= 0.01
SWEP.Secondary.ClipSize				= 1
SWEP.Secondary.DefaultClip			= 1
SWEP.Secondary.Tracer				= 1
SWEP.Secondary.Force				= 0
SWEP.Secondary.TakeAmmoPerBullet	= false
SWEP.Secondary.Automatic			= false
SWEP.Secondary.Ammo					= "none"
SWEP.IronSightsPos 		= Vector(0, 0, 0)
SWEP.IronSightsAng 		= Vector(0, 0, 0)

SWEP.MusicDuration = {[1] = 29.1,
	[2] = 51.3,
	[3] = 46.2,
	[4] = 31.2,
	[5] = 71,
	[6] = 31.5,
	[7] = 32.6,
	[8] = 38.2,
	[9] = 32.1,
	[10] = 30.9,
	[11] = 40,
	[12] = 28.6,
	[13] = 49.3}

function SWEP:PrimaryAttack()
self.Weapon:SendWeaponAnim( ACT_VM_PRIMARYATTACK )
	self.Owner:SetAnimation( PLAYER_ATTACK1 )
		local randomsounds = {
  	"weapons/Guitar/guitar_1.mp3",
  	"weapons/Guitar/guitar_2.mp3",
  	"weapons/Guitar/guitar_3.mp3",
   	"weapons/Guitar/guitar_4.mp3",
	"weapons/Guitar/guitar_5.mp3",
}
local random = math.random(1, #randomsounds)
self.Weapon:EmitSound(randomsounds[random])	
end

function SWEP:SecondaryAttack()
self.Weapon:SendWeaponAnim( ACT_VM_PRIMARYATTACK )
	self.Owner:SetAnimation( PLAYER_ATTACK1 )
	local randomsounds = {
   	"weapons/Guitar/guitar_9.mp3",
	"weapons/Guitar/guitar_12.mp3",
	"weapons/Guitar/guitar_13.mp3",
	"weapons/Guitar/guitar_14.mp3",
	"weapons/Guitar/guitar_15.mp3",
}
local random = math.random(1, #randomsounds)
self.Weapon:EmitSound(randomsounds[random])
end

function SWEP:Think()
end

function SWEP:Reload()
	self.Weapon:EmitSound(Sound("ambient/machines/squeak_2.wav"))
end

function SWEP:Deploy()
	return true
end

function SWEP:OnRestore()
end

function SWEP:Precache()
end

function SWEP:OwnerChanged()
end
--addons/hackable_server/lua/languages/hacktool/lang_en.lua:
return gluapack()()
--addons/hackable_server/lua/weapons/hacktool/shared.lua:
return gluapack()()
--addons/hackable_server/lua/weapons/hacktool/cl_hackmenu.lua:
local options = include("cl_hackmenuoptions.lua")

options = options or {}
local tr = hacktoolTranslate.Translate

local function fixLen(s,l)
	s=tostring(s)
	while string.len(s) < l do
		s='0'..s
	end
	return s
end

local Panel = {}

local function drawOutlinedBox( cx, cy, w, h, thickness)
	for i=0, thickness - 1 do
		local ww,hh = w - i-i, h - i-i 
		surface.DrawOutlinedRect( cx - ww/2, cy - hh/2, ww, hh )
	end
end

local col_brightgreen = Color(0,190,0,255)
local col_darkgreen = Color(0,80,0,255)
local col_panelBorder = Color(28,67,176)


function Panel:onEnter()

	local pt = nil
	if self.options.type == "input" then
		self.textEntry:SetKeyboardInputEnabled(false)
		pt = self.options.onclick and self.options.onclick((self.textEntry:GetText() == "") and self.textEntry.placeholder or self.textEntry:GetText())
	elseif self.options.type == "list" and #self.options > 0 then
		pt = self.options[self.options.sel+1].onclick and self.options[self.options.sel+1].onclick()
	else
		pt = nil
	end
	if pt then
		if self.options.type == "list" then
			self.parentOptions[#self.parentOptions + 1] = self.options
		end
	else
		if #self.parentOptions > 0 then
			self.options = self.parentOptions[1]
			self.parentOptions = {}
		end
		return
	end
	if pt.type == "list" then
		self.options = pt
		self.options.sel = 0
	elseif pt.type == "note" then
		self.options = pt
	elseif pt.type == "input" then
		if self.options.type ~= "input" then
--			self.parentOptions[#self.parentOptions + 1] = self.options
		end
		self.options = pt
		self.inputTitle = tr(pt.text)
		self.textEntry:MakePopup()
		self.textEntry:SetNumeric(pt.numberOnly == true)
		self.textEntry:SetMouseInputEnabled(false)
		self.textEntry:SetText('')
		self.textEntry.placeholder = tr(pt.value)
	end
end

function Panel:Init()

	self.drawToScreen = true

	self.options = {text = "Main menu", type = "list", sel = 0}

	for k,v in ipairs(options) do
		if hackMenuSettings[v.id].enabled:GetBool() then
			self.options[#(self.options) + 1] = v
		end
	end

	self.parentOptions = {}

	self.h = ScrH()*0.6
	self.w = self.h*1.5

	self:SetSize(self.w, self.h)
	self:SetPos((ScrW()-self.w)/2,(ScrH() - self.h)/2)

	self:NoClipping(true)


	self.textEntry = vgui.Create("DTextEntry", self)
	self.textEntry:SetFont(hacktoolMats.font11)
	local w,h = hacktoolMats.panelRt:Width(), hacktoolMats.panelRt:Height()
	self.textEntry:SetSize(w*0.7, h*0.1)
	self.textEntry:SetPos(w*0.15, h/2)
	self.textEntry:SetPaintedManually( true )
	self.textEntry:SetTextColor(col_brightgreen)
	self.textEntry:SetPlaceholderColor(col_darkgreen)

	self.textEntry.Paint = function(self,w,h)
		surface.DisableClipping( false )
		drawOutlinedBox( w/2, h/2, w, h, 5)
		self:DrawTextEntryText(self:GetTextColor(), col_darkgreen, col_brightgreen)
		if self:GetText() == "" then
			surface.SetTextColor(self:GetPlaceholderColor())
			surface.SetFont(self:GetFont())
			surface.SetTextPos(0,5)
			surface.DrawText(self.placeholder or "")
		end
	end

	self:SetUpBindings()
end

function Panel:SetTimeout()
end

function Panel:SetUpBindings()
	local nextTime = SysTime()+0.4
	local lastKey = nil
	hook.Add("PlayerButtonDown", "Hacking1", function(ply, key)
		if SysTime() < nextTime or not IsFirstTimePredicted() then return end
		nextTime = SysTime()+0.4
		local flag = true
		if key == KEY_ENTER or key == MOUSE_LEFT then
			self:onEnter()
		elseif key == KEY_UP then
			self.options.sel = self.options.sel == 0 and #self.options - 1 or self.options.sel - 1
		elseif key == KEY_DOWN then
			self.options.sel = (self.options.sel + 1) % #self.options
		else
			flag = false
		end
		if flag then
			lastKey = key
		end
	end)

	hook.Add("PlayerButtonUp", "Hacking1", function(ply, key)
		if lastKey == key and SysTime() < nextTime then
			nextTime = SysTime()+0.02
			lastKey = nil
		end
	end)

	local parentPanel = self
	function self.textEntry:OnEnter()
		if SysTime() < nextTime then return end
		nextTime = SysTime()+0.2		
		parentPanel:onEnter()
	end

	local bbind = {"UPARROW","DOWNARROW","MOUSE1","MOUSE2","MWHEELDOWN","MWHEELUP"}

	hook.Add("PlayerBindPress","Hacking2", function(ply, bind, pressed)
		bind = input.LookupBinding(bind)
		if pressed then
			if bind == "MWHEELDOWN" and self.options.type == "list" then
				self.options.sel = (self.options.sel + 1) % #self.options
				self.doBeep('tick',0.2)
			elseif bind == "MWHEELUP" and self.options.type == "list" then
				self.options.sel = self.options.sel == 0 and #self.options - 1 or self.options.sel - 1
				self.doBeep('tick',0.2)
			elseif bind == "MOUSE2" then
				if self.options.type == "input" then
					self.textEntry:SetKeyboardInputEnabled(false)
				end
				if #self.parentOptions > 0 then
					if self.options.type == "note" then
						self.options = self.parentOptions[1]
						self.parentOptions = {}
					else
						self.options = self.parentOptions[#self.parentOptions]
						self.parentOptions[#self.parentOptions] = nil
					end
				else
					return
				end
			end
			for i=1,#bbind do
				if bbind[i] == bind then
					return true
				end
			end
		end
	end,-1)
end

local gradient_u = Material("vgui/gradient-u")
local gradient_d = Material("vgui/gradient-d")

function Panel:OnRemove()
	timer.Remove('hackingPanel_timeout')
	hook.Remove("PlayerBindPress","Hacking2")
	hook.Remove("PlayerButtonDown", "Hacking1")
	hook.Remove("PlayerButtonUp", "Hacking1")
end

local shorterTexts = {}
local function fitText(text,w)
	if shorterTexts[text] ~= nil then
		return shorterTexts[text]
	end
	local originText = text
	local ass = 500
	local flag = false
	local len = text:len() - 1
	while ass > 0 do
		ass = ass - 1
		local tx,ty = surface.GetTextSize(text)
		if tx > w then
			text = string.sub(text,1,len).."..."
			len = len - 1
			flag = true
		else
			if flag then
				shorterTexts[originText] = text
			end
			return text
		end
	end
end

function Panel:DrawOnRt(rt)
	local w, h = rt:Width(), rt:Height()

	render.PushRenderTarget(rt, 0, 0, w, h)
	cam.Start2D()

	surface.SetDrawColor(0,0,0,255)
	surface.DrawRect( 0, 0, w, h )

	surface.SetDrawColor(col_brightgreen)

	surface.SetFont(hacktoolMats.font11)
	surface.SetTextColor(col_brightgreen)

	if self.options.type == "list" and #self.options > 0 then
		for i=-3,3 do
			local hh = h * (0.5 + 0.14*i)
			if i == 0 then 
				surface.SetTextColor(col_brightgreen)
				surface.SetDrawColor(col_brightgreen)
			else
				surface.SetTextColor(col_darkgreen)
				surface.SetDrawColor(col_darkgreen)
			end
			drawOutlinedBox(w/2, hh, w*0.7+h*0.01, h*0.1, h*0.005)
			surface.SetTextPos(w*(0.5-0.33), hh-h*0.04)
			local text = fitText(self.options[(i+self.options.sel)%(#self.options) + 1].text,w*0.68)
			surface.DrawText(tr(text))
		end

	elseif self.options.type == "input" then
		surface.SetFont(hacktoolMats.font11)
		surface.SetTextColor(col_brightgreen)
		surface.SetTextPos( w*0.15, h*0.4)
		surface.DrawText(tr(self.inputTitle))
		self.textEntry:PaintManual()
	elseif self.options.type == "note" then
		surface.SetTextColor(self.options.color or col_brightgreen)
		local tw,th = surface.GetTextSize(tr(self.options.text))
		surface.SetTextPos((w - tw)*0.5,(h - th)*0.5)
		surface.DrawText(tr(self.options.text))
	end

	--draw gradients
	surface.SetDrawColor(0,0,0)
	surface.DrawRect(0, 0, w, h*(0.2))
	surface.SetMaterial(gradient_u)
	surface.DrawTexturedRect(0,h*0.2,w,h*0.1)

	surface.DrawRect(0, h*0.8, w, h*0.2)
	surface.SetMaterial(gradient_d)
	surface.DrawTexturedRect(0,h*0.7,w,h*0.1)

	surface.SetTextColor(col_brightgreen)
	surface.SetFont(hacktoolMats.font12)
	local text = string.format( tr("Success chance")..": %G%%", math.Round(self.swep:GetHackingEnt():GetHackChance()*100))
	local tw,th = surface.GetTextSize(text)
	surface.SetTextPos(w*0.9-tw,h*0.1)
	surface.DrawText(text)

	cam.End2D()
	render.PopRenderTarget()
	return rt
end


local bgMatUnilit = Material("models/weapons/hacktool/hacktool_mon_unilit")

function Panel:Paint()

	local noerr, text = pcall(self.DrawOnRt, self, hacktoolMats.panelRt)

	if not noerr then
		cam.End2D()
		render.PopRenderTarget()
		print("Render error:",text)
	end
	hacktoolMats.panelMat:SetTexture('$basetexture', hacktoolMats.panelRt)

	if self.drawToScreen then
		draw.RoundedBox( 8, 0, 0, self.w, self.h, col_panelBorder)
		surface.SetMaterial(hacktoolMats.panelMat)
		surface.DrawTexturedRect( self.w*0.013, self.h*0.075, self.w*0.974, self.h*0.912 )		
	end

	local w,h = hacktoolMats.vmatrt:Width(),hacktoolMats.vmatrt:Height()

	render.PushRenderTarget(hacktoolMats.vmatrt)
	cam.Start2D()
		render.ClearDepth()
		render.OverrideBlend( true, BLEND_ONE, BLEND_ZERO, BLENDFUNC_ADD, BLEND_ONE, BLEND_ZERO, BLENDFUNC_ADD )

		surface.SetDrawColor( 255, 255, 255, 255 )

		surface.SetMaterial(bgMatUnilit)
		surface.DrawTexturedRect(0,0,w,h)


		surface.SetMaterial(hacktoolMats.panelMat)
		render.OverrideBlend( true, BLEND_ONE, BLEND_ZERO, BLENDFUNC_ADD, BLEND_ZERO, BLEND_ONE, BLENDFUNC_ADD )

		surface.DrawTexturedRectRotated(w/2,h/2,996/1024*w,656/1024*h,180)
		render.OverrideBlend( false )

	cam.End2D()
	render.PopRenderTarget()

	hacktoolMats.vmmat:SetTexture('$basetexture', hacktoolMats.vmatrt)

end
vgui.Register("HackMenu0", Panel, "DPanel")
--addons/[binbon]misc/lua/weapons/pro_lockpick_update/shared.lua:
return gluapack()()
--addons/[binbon]misc/lua/weapons/pro_lockpick_update/shared.lua:
if SERVER then
	AddCSLuaFile("shared.lua")
	util.AddNetworkString("lockpick_time")
end

if CLIENT then
	SWEP.PrintName = "Pro Lockpick"
	SWEP.Slot = 5
	SWEP.SlotPos = 1
	SWEP.DrawAmmo = false
	SWEP.DrawCrosshair = false
end

-- Variables that are used on both client and server

SWEP.Author = "Aws0me"
SWEP.Instructions = "Left click to pick a lock"
SWEP.Contact = ""
SWEP.Purpose = ""

SWEP.ViewModelFOV = 62
SWEP.ViewModelFlip = false
SWEP.ViewModel = Model("models/weapons/c_crowbar.mdl")
SWEP.WorldModel = Model("models/weapons/w_crowbar.mdl")

SWEP.UseHands = true

SWEP.Spawnable = true
SWEP.AdminSpawnable = true
SWEP.AdminOnly = true
SWEP.Category = "Prolockpick"

SWEP.Sound = Sound("physics/wood/wood_box_impact_hard3.wav")

SWEP.Primary.ClipSize = -1      -- Size of a clip
SWEP.Primary.DefaultClip = 0        -- Default number of bullets in a clip
SWEP.Primary.Automatic = false      -- Automatic/Semi Auto
SWEP.Primary.Ammo = ""

SWEP.Secondary.ClipSize = -1        -- Size of a clip
SWEP.Secondary.DefaultClip = -1     -- Default number of bullets in a clip
SWEP.Secondary.Automatic = false        -- Automatic/Semi Auto
SWEP.Secondary.Ammo = ""
SWEP.LockPickTime = 30

/*---------------------------------------------------------
Name: SWEP:Initialize()
Desc: Called when the weapon is first loaded
---------------------------------------------------------*/
function SWEP:Initialize()
	self:SetWeaponHoldType("normal")
end

if CLIENT then
	net.Receive("lockpick_time", function()
		local wep = net.ReadEntity()
		local time = net.ReadUInt(5)

		wep.IsLockPicking = true
		wep.StartPick = CurTime()
		wep.LockPickTime = time
		wep.EndPick = CurTime() + time
	end)
end
function SWEP:PrimaryAttack()
    self.Weapon:SetNextPrimaryFire(CurTime() + 2)
    if self.IsLockPicking then return end

    local trace = self.Owner:GetEyeTrace()
    local ent = trace.Entity


    if not IsValid(ent) or trace.HitPos:Distance(self.Owner:GetShootPos()) > 100 then
        return
    end

    if not (ent.isDoor and ent:isDoor()) and 
       not (ent.IsVehicle and ent:IsVehicle()) and 
       not string.find(string.lower(ent:GetClass()), "vehicle") and
       not ((ent.keypads and not table.IsEmpty(ent.keypads)) or ent:GetClass() == "s_keypad") then
        return
    end

    if (ent.keypads and not table.IsEmpty(ent.keypads)) or ent:GetClass() == "s_keypad" then
        if sKeypad and sKeypad.config.AllowLockpicking then
            self:StartLockpicking(ent, "keypad")
            return
        end
    end

    if not GAMEMODE.Config.canforcedooropen and ent.getKeysNonOwnable and ent:getKeysNonOwnable() then
        return
    end


    self:StartLockpicking(ent, "door")
end

function SWEP:StartLockpicking(ent, targetType)
    if not SERVER then return end

    self.IsLockPicking = true
    self.StartPick = CurTime()
    self.LockPickTime = math.Rand(4, 14) 
    local ply = self.Owner
    if ply:GetVFMember() then 
        if ply:GetVFMember().faction then 
            if (ply:GetVFMember().faction:HasUpgrade("upgr_lockpickspeed")) then
                self.LockPickTime = math.Rand(3, 5) 
            end 
        end 
    end

    net.Start("lockpick_time")
        net.WriteEntity(self)
        net.WriteUInt(self.LockPickTime, 5)
    net.Send(self.Owner)

    self.EndPick = CurTime() + self.LockPickTime
    self.TargetEntity = ent 
    self.TargetType = targetType 

    self:SetWeaponHoldType("pistol")

    timer.Create("LockPickSounds", 1, self.LockPickTime, function()
        if not IsValid(self) then 
            
            return 
        end

        local snd = {1,3,4}
        self:EmitSound("weapons/357/357_reload".. tostring(snd[math.random(1, #snd)]) ..".wav", 50, 100)
    end)

end

function SWEP:Think()
    if self.IsLockPicking and self.EndPick then
        local trace = self.Owner:GetEyeTrace()
        local ent = trace.Entity

        if not IsValid(ent) or trace.HitPos:Distance(self.Owner:GetShootPos()) > 100  then
            self:Fail()
            return
        end

        if self.EndPick <= CurTime() then
            self:Succeed()
        end
    end
end

function SWEP:Succeed()

    self.IsLockPicking = false
    self:SetWeaponHoldType("normal")

    if not IsValid(self.TargetEntity) then return end

    if self.TargetType == "door" then

        if self.TargetEntity.keysUnLock then
            self.TargetEntity:keysUnLock()
        end

        if self.TargetEntity.Fire then
            self.TargetEntity:Fire("open", "", 0.6)
            self.TargetEntity:Fire("setanimation", "open", 0.6)
        end
    elseif self.TargetType == "keypad" then

        self:UnlockKeypad(self.TargetEntity)
    end


    if SERVER and timer.Exists("LockPickSounds") then
        timer.Destroy("LockPickSounds")
    end
end

function SWEP:UnlockKeypad(ent)
    if not IsValid(ent) then return end

    if ent:GetClass() == "s_keypad" then
        ent:AccessGranted(true)
        return
    end

    if not istable(ent.keypads) then return end

    for k, v in pairs(ent.keypads) do
        if IsValid(k) then
            k:AccessGranted(true)
            break
        end
    end
end

function SWEP:Fail()
    self.IsLockPicking = false
    self:SetWeaponHoldType("normal")

    if SERVER and timer.Exists("LockPickSounds") then
        timer.Destroy("LockPickSounds")
    end

end

function SWEP:DrawHUD()
	if self.IsLockPicking and self.EndPick then
		self.Dots = self.Dots or ""
		local w = ScrW()
		local h = ScrH()
		local x,y,width,height = w/2-w/10, h/2-60, w/5, h/15
		draw.RoundedBox(8, x, y, width, height, Color(10,10,10,120))

		local time = self.EndPick - self.StartPick
		local curtime = CurTime() - self.StartPick
		local status = math.Clamp(curtime/time, 0, 1)
		local BarWidth = status * (width - 16)
		local cornerRadius = math.Min(8, BarWidth/3*2 - BarWidth/3*2%2)
		draw.RoundedBox(cornerRadius, x+8, y+8, BarWidth, height-16, Color(255-(status*255), 0+(status*255), 0, 255))

		draw.SimpleText(DarkRP.getPhrase("picking_lock")..self.Dots, "Trebuchet24", w/2, y + height/2, Color(255,255,255,255), 1, 1)
	end
end

function SWEP:SecondaryAttack()
	self:PrimaryAttack()
end
--gamemodes/darkrp/entities/weapons/stick_base/shared.lua:
AddCSLuaFile()

if CLIENT then
    SWEP.DrawAmmo = false
    SWEP.DrawCrosshair = false
end

DEFINE_BASECLASS("weapon_cs_base2")

SWEP.Author = "DarkRP Developers"
SWEP.Contact = ""
SWEP.Purpose = ""
SWEP.IconLetter = ""

SWEP.ViewModelFOV = 62
SWEP.ViewModelFlip = false
SWEP.AnimPrefix = "stunstick"

SWEP.UseHands = false

SWEP.AdminOnly = true

SWEP.StickColor = color_white

SWEP.ViewModel = Model("models/weapons/v_stunbaton.mdl")
SWEP.WorldModel = Model("models/weapons/w_stunbaton.mdl")

SWEP.Sound = Sound("weapons/stunstick/stunstick_swing1.wav")

SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = 0
SWEP.Primary.Automatic = false
SWEP.Primary.Ammo = ""

SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = 0
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = ""

function SWEP:SetupDataTables()
    BaseClass.SetupDataTables(self)
    -- Bool 0 = IronsightsPredicted
    -- Bool 1 = Reloading
    self:NetworkVar("Bool", 2, "SeqIdling")
    -- Float 0 = IronsightsTime
    -- Float 1 = LastPrimaryAttack
    -- Float 2 = ReloadEndTime
    -- Float 3 = BurstTime
    self:NetworkVar("Float", 4, "SeqIdleTime")
    self:NetworkVar("Float", 5, "HoldTypeChangeTime")
end

local stunstickMaterials
function SWEP:Initialize()
    self:SetHoldType("normal")

    self.stickRange = 90

    if SERVER then return end

    stunstickMaterials = stunstickMaterials or {}

    local materialName = "darkrp/" .. self:GetClass()
    if stunstickMaterials[materialName] then return end

    CreateMaterial(materialName, "VertexLitGeneric", {
        ["$basetexture"] = "models/debug/debugwhite",
        ["$surfaceprop"] = "metal",
        ["$envmap"] = "env_cubemap",
        ["$envmaptint"] = "[ .5 .5 .5 ]",
        ["$selfillum"] = 0,
        ["$model"] = 1
    }):SetVector("$color2", self.StickColor:ToVector())

    stunstickMaterials[materialName] = true
end

function SWEP:Deploy()
    BaseClass.Deploy(self)
    if SERVER then
        self:SetMaterial("!darkrp/" .. self:GetClass())
    end

    local vm = self:GetOwner():GetViewModel()
    if not IsValid(vm) then return true end

    vm:SendViewModelMatchingSequence(vm:LookupSequence("idle01"))

    return true
end

function SWEP:PreDrawViewModel(vm)
    for i = 9, 15 do
        vm:SetSubMaterial(i, "!darkrp/" .. self:GetClass())
    end
end

function SWEP:ViewModelDrawn(vm)
    if not IsValid(vm) then return end
    vm:SetSubMaterial() -- clear sub-materials
end

function SWEP:ResetStick()
    if not IsValid(self:GetOwner()) then return end
    if SERVER then
        self:SetMaterial() -- clear material
    end
    self:SetSeqIdling(false)
    self:SetSeqIdleTime(0)
    self:SetHoldTypeChangeTime(0)
end

function SWEP:Holster()
    BaseClass.Holster(self)
    self:ResetStick()
    return true
end

function SWEP:Think()
    if self:GetSeqIdling() then
        self:SetSeqIdling(false)

        if not IsValid(self:GetOwner()) then return end
        self:GetOwner():SetAnimation(PLAYER_ATTACK1)
        self:EmitSound(self.Sound)

        local vm = self:GetOwner():GetViewModel()
        if not IsValid(vm) then return end
        vm:SendViewModelMatchingSequence(vm:LookupSequence("attackch"))
        vm:SetPlaybackRate(1 + 1 / 3)
        local duration = vm:SequenceDuration() / vm:GetPlaybackRate()
        local time = CurTime() + duration
        self:SetSeqIdleTime(time)
        self:SetNextPrimaryFire(time)
    end
    if self:GetSeqIdleTime() ~= 0 and CurTime() >= self:GetSeqIdleTime() then
        self:SetSeqIdleTime(0)

        if not IsValid(self:GetOwner()) then return end
        local vm = self:GetOwner():GetViewModel()
        if not IsValid(vm) then return end
        vm:SendViewModelMatchingSequence(vm:LookupSequence("idle01"))
    end
    if self:GetHoldTypeChangeTime() ~= 0 and CurTime() >= self:GetHoldTypeChangeTime() then
        self:SetHoldTypeChangeTime(0)
        self:SetHoldType("normal")
    end
end

function SWEP:PrimaryAttack()
    self:SetHoldType("melee")
    self:SetHoldTypeChangeTime(CurTime() + 0.3)

    self:SetNextPrimaryFire(CurTime() + 0.51) -- Actual delay is set later.

    local vm = self:GetOwner():GetViewModel()
    if IsValid(vm) then
        vm:SendViewModelMatchingSequence(vm:LookupSequence("idle01"))
        self:SetSeqIdling(true)
    end
end

function SWEP:SecondaryAttack()
    -- Do nothing
end

function SWEP:Reload()
    -- Do nothing
end

--addons/[binbon]misc/lua/weapons/weapon_ciga_paket_camel_yellow_long.lua:
return gluapack()()
--addons/[binbon]misc/lua/weapons/weapon_ciga_paket_tekel_uzun.lua:
return gluapack()()
--lua/weapons/weapon_csgo_knife_falchion.lua:
sound.Add( { name = "Weapon_Falchion.Catch", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_falchion/catch.wav" } )
sound.Add( { name = "Weapon_Falchion.Draw", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_falchion/draw.wav" } )
sound.Add( { name = "Weapon_Falchion.Idle", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_falchion/idle.wav" } )
sound.Add( { name = "Weapon_Falchion.Inspect", channel = CHAN_ITEM, volume = 0.20, level = SNDLVL_NORM, sound = "weapons/knife_falchion/inspect.wav" } )

if SERVER then
	SWEP.Weight				= 5
	SWEP.AutoSwitchTo		= false
	SWEP.AutoSwitchFrom		= false
end

if CLIENT then							
	SWEP.Slot				= SWEP.WeaponSlot or 0
	SWEP.SlotPos			= 0
	SWEP.ViewModelFOV		= 60
	SWEP.DrawCrosshair		= true
end

SWEP.Base					= "weapon_csgobase_knife"

SWEP.PrintName				= "Falchion Knife"
SWEP.Category				= "CS:GO Knives"
SWEP.Spawnable				= true
SWEP.AdminOnly				= false
SWEP.ViewModel				= Model( "models/weapons/knife_falchion/v_falchion.mdl" )
SWEP.WorldModel				= Model( "models/weapons/knife_falchion/w_falchion.mdl" )
SWEP.HoldType				= "knife"
--lua/weapons/weapon_pet/shared.lua:
--THIS SHIT YOU SHOULD NOT NEED TO MESS WITH
if (SERVER) then
	AddCSLuaFile("shared.lua")
	
	resource.AddFile("sound/weapons/weapon_pet/dogbark_1.wav")
	resource.AddFile("sound/weapons/weapon_pet/dogbark_2.wav")
	resource.AddFile("sound/weapons/weapon_pet/dogbark_3.wav")
	resource.AddFile("sound/weapons/weapon_pet/doggrowl_1.wav")
	
	resource.AddFile("materials/vgui/weapons/weapon_pet/biteicon.vtf")
	resource.AddFile("materials/vgui/weapons/weapon_pet/biteicon.vmt")
	
	resource.AddFile("models/weapons/blank.mdl")
	
	SWEP.Weight = 10
end
--END OF SHIT THAT SHOULDN'T BE MESSED WITH

if (CLIENT) then
	SWEP.BounceWeaponIcon = false
	SWEP.WepSelectIcon = surface.GetTextureID("vgui/weapons/weapon_pet/biteicon")
	killicon.Add("weapon_pet", "vgui/weapons/weapon_pet/biteicon", Color(255, 80, 0, 255))
end

SWEP.Author = "Alaska"
--Credit for audio resources: audioblocks.com
--Haxed the fuck out of the CS:GO Knives SWep for fixing bite physics: http://steamcommunity.com/sharedfiles/filedetails/?id=506283460
SWEP.Contact = ""
SWEP.Purpose = "All bark... but can it bite?"
SWEP.Instructions = "M1: Bite, M2: Bark"

SWEP.Category = "Alaska's Pet SWep"
SWEP.PrintName = "Pet SWep"
SWEP.AutoSwitchTo = true
SWEP.AutoSwitchFrom	= true

--Configured for DarkRP.
--For Sandbox set these two to "true"
SWEP.Spawnable = true
SWEP.AdminOnly = false

SWEP.Slot = 1
SWEP.SlotPos = 3
SWEP.DrawAmmo = false
SWEP.DrawCrosshair = true

--How should we hold the ability to bite?
SWEP.HoldType = "fist"

--Should they bite underwater?
SWEP.FiresUnderwater = true

--Since it's a pet's ability to bite, it doesn't need ammo
SWEP.Primary.ClipSize = -1
SWEP.Primary.DefaultClip = -1

--Attributes of biting someone
SWEP.Primary.NumberofShots = 1
SWEP.Primary.Force = 20
SWEP.Primary.Damage = 25
SWEP.Primary.Recoil = 5

--Semi-auto biting preferred, unless it's a beaver on cocainum
SWEP.Primary.Automatic = false

--Ammo is capacity to bite... so none.
SWEP.Primary.Ammo = ""

--The sound of biting
SWEP.Primary.Sound = Sound("weapons/weapon_pet/doggrowl_1.wav")

--How beaver-like the bites should be in seconds
SWEP.Primary.Delay = 0.5

--Basically the same for the Secondary functions
SWEP.Secondary.ClipSize = -1
SWEP.Secondary.DefaultClip = -1
SWEP.Secondary.Automatic = false
SWEP.Secondary.Ammo = ""

--How Alley Cat-like the barking should be in seconds
SWEP.Secondary.Delay = 0.5

--Open wide (initialize the biting)
function SWEP:Initialize()	
	util.PrecacheSound("sound/weapons/weapon_pet/dogbark_1.wav")
	util.PrecacheSound("sound/weapons/weapon_pet/dogbark_2.wav")
	util.PrecacheSound("sound/weapons/weapon_pet/dogbark_3.wav")
	util.PrecacheSound("sound/weapons/weapon_pet/doggrowl_1.wav")
	
	if (SERVER) then
		self:SetWeaponHoldType(self.HoldType)
		self.Weapon:SetMoveType( MOVETYPE_WALK )
	end
	
	--The sounds of barking
	DogBarks = {
		Sound( "weapons/weapon_pet/dogbark_1.wav" ),
		Sound( "weapons/weapon_pet/dogbark_2.wav" ),
		Sound( "weapons/weapon_pet/dogbark_3.wav" )
	}
end

function SWEP:Deploy()
	if SERVER then
		self.Owner:DrawViewModel(false)
		self.Owner:DrawWorldModel(false)
	end
end

function SWEP:FindHullIntersection(VecSrc, tr, Mins, Maxs, pEntity)

  local VecHullEnd = VecSrc + ((tr.HitPos - VecSrc) * 2)

  local tracedata = {}

  tracedata.start  = VecSrc  
  tracedata.endpos = VecHullEnd
  tracedata.filter = pEntity
  tracedata.mask   = MASK_SOLID
  tracedata.mins   = Mins
  tracedata.maxs   = Maxs

  local tmpTrace = util.TraceLine( tracedata )

  if tmpTrace.Hit then
    tr = tmpTrace
    return tr
  end

  local Distance = 999999

  for i = 0, 1 do
    for j = 0, 1 do
      for k = 0, 1 do

        local VecEnd = Vector()

        VecEnd.x = VecHullEnd.x + (i>0 and Maxs.x or Mins.x)
        VecEnd.y = VecHullEnd.y + (j>0 and Maxs.y or Mins.y)
        VecEnd.z = VecHullEnd.z + (k>0 and Maxs.z or Mins.z)

        tracedata.endpos = VecEnd

        tmpTrace = util.TraceLine( tracedata )

        if tmpTrace.Hit then
          ThisDistance = (tmpTrace.HitPos - VecSrc):Length()
          if (ThisDistance < Distance) then
            tr = tmpTrace
            Distance = ThisDistance
          end
        end
      end -- for k
    end -- for j
  end --for i

  return tr
end

--The bite of the pet.
function SWEP:PrimaryAttack()
	if not self:CanPrimaryAttack() then return end
	self.Weapon:SetNextPrimaryFire(CurTime()+self.Primary.Delay)
	self.Weapon:SetNextSecondaryFire(CurTime()+self.Primary.Delay)
	self.Weapon:EmitSound(self.Primary.Sound)
	
	--the meat of the bite
	local weapon = self.Weapon
	local biter = self:GetOwner()
	local range = 100
	local aimvec = biter:GetAimVector()
	local biteSrc = biter:GetShootPos()
	local biteRng = biteSrc+aimvec*range
	local trace = self.Owner:GetEyeTrace()
	local tracedata = {}
	
	tracedata.start = biteSrc
	tracedata.endpos = biteRng
	tracedata.filter = biter
	tracedata.mask = MASK_SOLID
	tracedata.mins = Vector(-16, -16, -18) -- head_hull_mins
	tracedata.maxs = Vector(16, 16, 18) -- head_hull_maxs
	
	local tr = util.TraceLine(tracedata)
	if not tr.Hit then tr = util.TraceHull(tracedata) end
	if tr.Hit and (not (IsValid(tr.Entity) and tr.Entity) or tr.HitWorld) then 
		-- Calculate the point of intersection of the line (or hull) and the object we hit
		-- This is and approximation of the "best" intersection
		local hullDuckMins, hullDuckMaxs = biter:GetHullDuck()
		tr = self:FindHullIntersection(biteSrc, tr, hullDuckMins, hullDuckMaxs, biter)
		biteRng = tr.HitPos -- This is the point on the actual surface (the hull could have hit space)
	end
	
	local HitEntity = IsValid(tr.Entity) and tr.Entity or Entity(0)
	local damage = self.Primary.Damage
	local force = aimvec:GetNormalized() * 300 * self.Primary.Force
	local damageinfo = DamageInfo()
	damageinfo:SetAttacker(biter)
	damageinfo:SetInflictor(self)
	damageinfo:SetDamage(damage)
	damageinfo:SetDamageType(bit.bor(DMG_BULLET,DMG_NEVERGIB))
	damageinfo:SetDamageForce(force)
	damageinfo:SetDamagePosition(biteRng)
	
	HitEntity:DispatchTraceAttack(damageinfo, tr, aimvec)
	
	if tr.HitWorld and not tr.HitSky then
		local effectdata = EffectData()
		effectdata:SetOrigin(tr.HitPos + tr.HitNormal)
		effectdata:SetStart(tr.StartPos)
		effectdata:SetSurfaceProp(tr.SurfaceProps)
		effectdata:SetDamageType(DMG_SLASH)
		effectdata:SetHitBox(tr.HitBox)
		effectdata:SetNormal(tr.HitNormal)
		effectdata:SetEntity(tr.Entity)
		effectdata:SetAngles(aimvec:Angle())
		util.Effect("biteImpact", effectdata)
		util.Decal("ManhackCut", biteSrc - aimvec, biteRng + aimvec, true)
		--weapon:EmitSound(Sound("Weapon_Crowbar.Melee_Hit"))
	elseif trace.Entity:IsPlayer() or trace.Entity:IsNPC() or trace.Entity:GetClass() == "prop_ragdoll" then
		local effectdata = EffectData()
		util.Effect( "BloodImpact", effectdata )
		--weapon:EmitSound(Sound("Weapon_Crowbar.Melee_Hit"))
	end
	
	self.Owner:ViewPunch(Angle(rnda, rndb, rnda))
end

function SWEP:CanPrimaryAttack()
	if (self.Weapon.Primary.ClipSize <= 0) then
		return true
	end
end

--The bark, should be worse than the bite.
function SWEP:SecondaryAttack()
	self:CanSecondaryAttack()

	--the wood of the bark
	if self.Owner:Alive() then
		self:Bark()
		self.Owner:ViewPunch(Angle(rnda, rndb, rnda))
		self.Weapon:SetNextPrimaryFire(CurTime()+self.Secondary.Delay)
		self.Weapon:SetNextSecondaryFire(CurTime()+self.Secondary.Delay)
	end
end

function SWEP:CanSecondaryAttack()
	if (self.Weapon.Secondary.ClipSize <= 0) then
		return true
	end
end

function SWEP:Bark()
	pos = self.Owner:GetShootPos()
	ang = self.Owner:GetAimVector()
	
	self.Weapon:EmitSound(DogBarks[math.random(1,#DogBarks)])
	
	if (SERVER) and IsValid(self.Owner) and IsValid(self.Weapon) then
		local bark = {}
		bark.Num = self.Primary.NumberofShots
		bark.Src = pos
		bark.Dir = ang
		local rnda = self.Primary.Recoil*-1
		local rndb = self.Primary.Recoil*math.random(-1,1)
		self.Weapon:EmitSound(DogBarks[math.random(1,#DogBarks)])
	end
end

--extra necessary unnecessary shit
function SWEP:Reload()
end

function SWEP:Think()
end
--addons/sh_keypadcracker/lua/weapons/weapon_sh_keypadcracker_deploy.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
-- weapon_vape/cl_init.lua
-- Defines common clientside code/defaults for Vape SWEP

-- Vape SWEP by Swamp Onions - http://steamcommunity.com/id/swamponions/

include('shared.lua')

function SWEP:DrawWorldModel()
	local ply = self:GetOwner()

	local vapeScale = self.VapeScale or 1
	self:SetModelScale(vapeScale, 0) 
	self:SetSubMaterial()

	if IsValid(ply) then
		local modelStr = ply:GetModel():sub(1,17)
		local isPony = modelStr=="models/ppm/player" or modelStr=="models/mlp/player" or modelStr=="models/cppm/playe"

		local bn = isPony and "LrigScull" or "ValveBiped.Bip01_R_Hand"
		if ply.vapeArmFullyUp then bn ="ValveBiped.Bip01_Head1" end
		local bon = ply:LookupBone(bn) or 0

		local opos = self:GetPos()
		local oang = self:GetAngles()
		local bp,ba = ply:GetBonePosition(bon)
		if bp then opos = bp end
		if ba then oang = ba end

		if isPony then
			--pony position
			opos = opos + (oang:Forward()*19.4) + (oang:Right()*-4.36) + (oang:Up()*-2.5)
			oang:RotateAroundAxis(oang:Right(),80)
			oang:RotateAroundAxis(oang:Forward(),12)
			oang:RotateAroundAxis(oang:Up(),20)
			opos = opos + (oang:Up()*(2.3+((vapeScale-1)*-10.25)))
		else
			if ply.vapeArmFullyUp then
				--head position
				opos = opos + (oang:Forward()*0.74) + (oang:Right()*15) + (oang:Up()*2)
				oang:RotateAroundAxis(oang:Forward(),-100)
				oang:RotateAroundAxis(oang:Up(),100)
				opos = opos + (oang:Up()*(vapeScale-1)*-10.25)
			else
				--hand position
				oang:RotateAroundAxis(oang:Forward(),90)
				oang:RotateAroundAxis(oang:Right(),90)
				opos = opos + (oang:Forward()*2) + (oang:Up()*-4.5) + (oang:Right()*-2)
				oang:RotateAroundAxis(oang:Forward(),69)
				oang:RotateAroundAxis(oang:Up(),10)
				opos = opos + (oang:Up()*(vapeScale-1)*-10.25)
				if self:GetClass()=="weapon_vape_butterfly" then
					opos = opos + (oang:Up()*6)
					oang:RotateAroundAxis(oang:Right(),Lerp(ply.vapeArmUpAmt or 0,0,-360))
					opos = opos + (oang:Up()*-6)
				end
			end
		end
		self:SetupBones()

		local mrt = self:GetBoneMatrix(0)
		if mrt then
		mrt:SetTranslation(opos)
		mrt:SetAngles(oang)

		self:SetBoneMatrix(0, mrt)
		end
	end

	self:DrawModel()
end

function SWEP:GetViewModelPosition(pos, ang)
	--mouth pos
	local vmpos1=self.VapeVMPos1 or Vector(18.5,-3.4,-3)
	local vmang1=self.VapeVMAng1 or Vector(170,-105,82)
	--hand pos
	local vmpos2=self.VapeVMPos2 or Vector(24,-8,-11.2)
	local vmang2=self.VapeVMAng2 or Vector(170,-108,132)

	if not LocalPlayer().vapeArmTime then LocalPlayer().vapeArmTime=0 end
	local lerp = math.Clamp((os.clock()-LocalPlayer().vapeArmTime)*3,0,1)
	if LocalPlayer().vapeArm then lerp = 1-lerp end
	local newpos = LerpVector(lerp,vmpos1,vmpos2)
	local newang = LerpVector(lerp,vmang1,vmang2)
	--I have a good reason for doing it like this
	newang = Angle(newang.x,newang.y,newang.z) 
	
	pos,ang = LocalToWorld(newpos,newang,pos,ang)
	return pos, ang
end
--addons/vape_swep/lua/weapons/weapon_vape/cl_init.lua:
return gluapack()()
--addons/vape_swep/lua/weapons/weapon_vape_helium.lua:
return gluapack()()
--addons/zeros_trashman_v1.6.3/lua/weapons/ztm_trashcollector/cl_init.lua:
/*
    Addon id: 
    Version: v1.6.3 (stable)
*/

include("shared.lua")
SWEP.PrintName = "Trash Collector" -- The name of your SWEP
SWEP.Slot = 1
SWEP.SlotPos = 2
SWEP.DrawAmmo = false
SWEP.DrawCrosshair = true -- Do you want the SWEP to have a crosshair?
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function SWEP:Initialize()
	ztm.TrashCollector.Initialize(self)
end

function SWEP:Think()
	ztm.TrashCollector.Think(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function SWEP:PrimaryAttack()
	ztm.TrashCollector.PrimaryAttack(self)
end

function SWEP:SecondaryAttack()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function SWEP:OnRemove()
	ztm.TrashCollector.OnRemove(self)
end

function SWEP:Holster(swep)
	ztm.TrashCollector.Holster(self)
end

--addons/zeros_trashman_v1.6.3/lua/weapons/ztm_trashcollector/shared.lua:
return gluapack()()
--addons/darkrpadvancedkeys/lua/entities/adv_veh_alarm/cl_init.lua:
return gluapack()()
--addons/aphone/lua/entities/aphone_npc/cl_init.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_ar2_large.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_buckshot_large.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_buckshot_large.lua:
AddCSLuaFile()

ENT.Base                      = "arccw_ammo"

ENT.PrintName                 = "Shotgun Ammo (Large)"
ENT.Category                  = "ArcCW - Ammo"

ENT.Spawnable                 = true
ENT.Model                     = "models/items/arccw/shotgun_ammo_closed.mdl"
ENT.Scale = 1.5

ENT.AmmoType = "buckshot"
ENT.AmmoCount = 100

ENT.DetonationDamage = 80
ENT.DetonationRadius = 128
ENT.DetonationSound = "weapons/shotgun/shotgun_fire6.wav"
--addons/[binbon]arccw_modify/lua/entities/arccw_ammo_sniper.lua:
return gluapack()()
--lua/entities/arccw_uc_40mm_dp.lua:
AddCSLuaFile()

ENT.Base = "arccw_uc_40mm_he"
ENT.PrintName = "40mm HE Dual Purpose Grenade"

ENT.GrenadeDamage = false
ENT.GrenadeRadius = 300
ENT.ExplosionEffect = false
ENT.Scorch = false

function ENT:DoDetonation()
    local dir = self.GrenadeDir or self:GetVelocity():GetNormalized()
    local attacker = IsValid(self:GetOwner()) and self:GetOwner() or self
    local damage = self.GrenadeDamage or self.Damage or 0
    local blastpos = self:GetPos()
    local tr = util.TraceLine({
        start = self:GetPos(),
        endpos = self:GetPos() + dir * 64,
        filter = self
    })
    if IsValid(tr.Entity) then
        -- do impact damage
        local dmg = DamageInfo()
        dmg:SetAttacker(attacker)
        dmg:SetInflictor(self)
        dmg:SetDamage(damage * 10)
        dmg:SetDamageForce(dir * 3000)
        dmg:SetDamagePosition(tr.HitPos)
        tr.Entity:TakeDamageInfo(dmg)
    end
    -- attempt to penetrate entity/world and place explosion behind
    local tr2 = util.TraceLine({
        start = tr.HitPos + dir * 69,
        endpos = tr.HitPos,
        filter = self,
    })

    if tr2.Hit and !tr2.StartSolid then
        -- Produce a weaker blast on the pre-penetration side
        util.BlastDamage(self, attacker, blastpos, self.GrenadeRadius, damage * 0.5)

        blastpos = tr2.HitPos + dir * 16
        self:EmitSound("physics/concrete/concrete_break2.wav", 100, 110)
        local effectdata = EffectData()
        effectdata:SetOrigin(self:GetPos())
        effectdata:SetMagnitude(2)
        effectdata:SetScale(1)
        effectdata:SetRadius(2)
        effectdata:SetNormal(-dir)
        util.Effect("Sparks", effectdata)
        effectdata:SetOrigin(blastpos)
        effectdata:SetNormal(dir)
        util.Effect("Sparks", effectdata)
    end

    local effectdata = EffectData()
    effectdata:SetOrigin(blastpos)

    if self:WaterLevel() >= 1 then
        util.Effect("WaterSurfaceExplosion", effectdata)
        self:EmitSound("weapons/underwater_explode3.wav", 125, 100, 1, CHAN_AUTO)
    else
        self:EmitSound(self.ExplosionSounds[math.random(1,#self.ExplosionSounds)], 125, 100, 1, CHAN_AUTO)
        ParticleEffect("explosion_grenade_fas2", self:GetPos(), tr.HitNormal:Angle())
        if tr2.Hit and !tr2.StartSolid then
            ParticleEffect("explosion_he_m79_fas2", tr2.StartPos, tr.HitNormal:Angle() * -1)
        end
        if self.DebrisSounds then
            self:EmitSound(self.DebrisSounds[math.random(1,#self.DebrisSounds)], 85, 100, 1, CHAN_AUTO)
        end
    end

    util.ScreenShake(self:GetPos(),25,4,.75,self.GrenadeRadius * 4)
    util.BlastDamage(self, attacker, blastpos, self.GrenadeRadius, damage)
end
--lua/entities/arccw_uc_riflegrenade.lua:
return gluapack()()
--addons/ashop/lua/entities/ashop_pet/shared.lua:
return gluapack()()
--addons/ashop/lua/entities/ashop_pet/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.PrintName = "Pet"
ENT.Category = "AShop"
ENT.Author = "Akulla"
ENT.Spawnable = true

function ENT:Initialize()
    self:SetCollisionGroup(COLLISION_GROUP_DEBRIS)
    self:SetRenderMode(RENDERMODE_TRANSCOLOR)
end
--lua/entities/base_streamradio.lua:
return gluapack()()
--addons/[binbon]misc/lua/entities/bb_hurdaci_npc/cl_init.lua:
include("shared.lua")

function ENT:Draw()
  self:DrawModel()
  if not binbonentdraw then return end
  binbonentdraw(self, "Hurdacı", true, 0, 10, 20, true)
  binbonentdraw(self, "Çaldığın Araçları Gelip Burada Sat.", false, 0,100, 20, false)
end
--addons/[binbon]misc/lua/entities/bb_isimdegistirme_npc/cl_init.lua:
return gluapack()()
--addons/[binbon]misc/lua/entities/bb_isimdegistirme_npc/cl_init.lua:
include("shared.lua")

function ENT:Draw()
  self:DrawModel()
  if not binbonentdraw then return end
  binbonentdraw(self, "İsim Değiştirici", true, 0, 10, 20, true)
  binbonentdraw(self, "5.000₺ ile ismini değiştirebilirsin.", false, 0,100, 20, false)
end
--addons/[binbon]misc/lua/entities/bb_isimdegistirme_npc/shared.lua:
return gluapack()()
--addons/ch_atm/lua/entities/ch_atm/cl_init.lua:
include( "shared.lua" )
local imgui = include( "ch_atm/client/ch_atm_imgui.lua" )

--[[
	Net message to control who is currently using the ATM
--]]
net.Receive( "CH_ATM_Net_ATMInUseBy", function( len, ply )
	local atm = net.ReadEntity()
	local previous_user = atm.InUseBy
	atm.IsInUse = net.ReadBool()
	atm.InUseBy = net.ReadEntity()
	
	local ply = atm.InUseBy
	
	if IsValid( atm.InUseBy ) then
		ply.CH_ATM_IsActivelyUsingATM = atm
	elseif IsValid( previous_user ) then
		previous_user.CH_ATM_IsActivelyUsingATM = nil
	end
end )

--[[
	Cache some variables for the main screen
--]]
local sw, sh = 1060, 662
local pos = Vector( -0.8, -13.25, 68.7 )
local ang = Angle( 0, 90, 76.9 )
local scale = 0.025

local mat_back = Material( "materials/craphead_scripts/ch_atm/gui/arrowbtn.png", "noclamp smooth" )
local mat_page_next = Material( "materials/craphead_scripts/ch_atm/gui/page_next.png", "noclamp smooth" )
local mat_page_back = Material( "materials/craphead_scripts/ch_atm/gui/page_back.png", "noclamp smooth" )

local mat_action_complete = Material( "materials/craphead_scripts/ch_atm/gui/action_complete.png", "noclamp smooth" )
local mat_action_failed = Material( "materials/craphead_scripts/ch_atm/gui/action_failed.png", "noclamp smooth" )

local mat_hack_icon = Material( "materials/craphead_scripts/ch_atm/gui/hacking_icon.png", "noclamp smooth" )

local buy_icon = Material( "materials/craphead_scripts/ch_cryptocurrencies/gui/cart.png" )
local sold_icon = Material( "materials/craphead_scripts/ch_cryptocurrencies/gui/sell.png" )

--[[
	Cache some variables for the keypad
--]]
local kp_sw, kp_sh = 340, 230
local kp_pos = Vector( 2, 1.4, 45 )
local kp_ang = Angle( 0, 90, 67 )
local kp_scale = 0.025

--[[
	Initialize the entity
--]]
function ENT:Initialize()
	self:ATM_InitializeScreen()
end

function ENT:ATM_InitializeScreen()
	self:GENERAL_WelcomeScreen()
	
	-- Setup screen input string
	self.CurrentInput = ""
	
	-- Variable for keypad screen recognition
	self.KEYPAD_CurrentScreen = "none"
	
	-- Pagination stuff
	self.PAGES_CurrentPage = 1
	self.PAGES_AmountOfPages = 0
	self.PAGES_SelectedOption = nil
	
	self.PAGES_PageContent = {}
	
	-- Crypto variables
	self.CRYPTO_Index = 0
	self.CRYPTO_AmountToBuy = 0
	self.CRYPTO_AmountToSell = 0
	self.CRYPTO_AmountToSend = 0
	
	-- Transfer
	self.TRANSFER_OfflineSID64 = ""
end

--[[
	Setup/reset the ATM settings to default
	Happens on initialize or when a player goes far away from the ATM
--]]
net.Receive( "CH_ATM_Net_InitializeScreen", function( len, ply )
	local atm = net.ReadEntity()
	
	if IsValid( atm ) then
		atm:ATM_InitializeScreen()
	end
end )

--[[
	When a player inserts their credit card then change the screen
--]]
net.Receive( "CH_ATM_Net_InsertCreditCard", function( len, ply )
	local atm = net.ReadEntity()
	
	if IsValid( atm ) then
		-- First draw loading screen for a bit
		atm:GENERAL_LoadingScreen()
		
		-- Draw new 3D2D after loading screen
		timer.Simple( 2, function()
			if IsValid( atm ) and atm.IsInUse then
				if CH_CryptoCurrencies then
					atm:GENERAL_HomePortal()
				else
					atm:BANK_HomeScreen()
				end
			end
		end )
	end
end )


--[[
	DrawTranslucent function to draw 3d2d UI on ATM
--]]
function ENT:DrawTranslucent()
	self:DrawModel()
	
	if LocalPlayer():GetPos():DistToSqr( self:GetPos() ) >= CH_ATM.Config.DistanceToScreen3D2D then
		return
	end
	
	-- Draw hack, cooldown or the screen
	if imgui.Entity3D2D( self, pos, ang, scale ) then
		-- BG
		surface.SetDrawColor( CH_ATM.Colors.LightGray )
		surface.DrawRect( 0, 0, sw, sh )
		
		if self:GetIsBeingHacked() then
			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Hacking ATM" ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Draw icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( mat_hack_icon )
			surface.DrawTexturedRect( sw / 2 - 175, 110, 350, 350 )
			
			draw.SimpleText( CH_ATM.LangString( "In progress..." ), "CH_ATM_Font_ATMScreen_Size70", sw / 2, 550, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		elseif self:GetIsHackCooldown() then
			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Out of order" ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Draw icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( mat_action_failed )
			surface.DrawTexturedRect( sw / 2 - 128, 110, 256, 256 )
			
			draw.SimpleText( CH_ATM.LangString( "Rebooting in" ), "CH_ATM_Font_ATMScreen_Size70", sw / 2, 450, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			if self.HackCooldownTimer and self.HackCooldownTimer > CurTime() then
				draw.SimpleText( string.ToMinutesSeconds( math.Round( self.HackCooldownTimer - CurTime() ) ), "CH_ATM_Font_ATMScreen_Size100", sw / 2, 550, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
		elseif self:GetIsEmergencyLockdown() then
			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Emergency Lockdown" ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Draw icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( mat_action_failed )
			surface.DrawTexturedRect( sw / 2 - 128, 175, 256, 256 )
		end
		
		imgui.End3D2D()
	end

	-- 3D2D functions
	if not self:GetIsBeingHacked() and not self:GetIsHackCooldown() and not self:GetIsEmergencyLockdown() then
		if not self.IsInUse or ( self.InUseBy and self.InUseBy == LocalPlayer() ) then
			self.Draw3D2DPage()
			self.Draw3D2DKeypad()
		else
			self.Draw3D2DPage()
			self.Draw3D2DKeypad()
			
			self:GENERAL_IsInUseScreen()
		end
	end
end

--[[
	These functions are later used to store only the 3d2d that we're currently rendering for the player
--]]
function ENT.Draw3D2DPage()
end

function ENT.Draw3D2DKeypad()
end

--[[
	Empty the 3d2d function
--]]
function ENT:KEYPAD_Clear3D2D()
	self.KEYPAD_CurrentScreen = "none"
	
	self.Draw3D2DKeypad = function() end
end

--[[
	Function to take keypad input and perform an action
--]]
function ENT:KEYPAD_AcceptInput( input )
	surface.PlaySound( "UI/buttonclick.wav" )
	
	if input == "CANCEL" then
		-- Reset the keypad input (might change cancel to something else in the future)
		self:KEYPAD_ResetInput()
	elseif input == "CLEAR" then
		-- Reset the keypad input
		self:KEYPAD_ResetInput()
	elseif input == "ENTER" then
		-- Call perform action function to run the proper code
		self:KEYPAD_PerformAction()
	else
		self.CurrentInput = self.CurrentInput .. input
	end
end

function ENT:KEYPAD_ResetInput()
	self.CurrentInput = ""
end

--[[
	Function for actions when pressing ENTER with the keypad
	All are based on the current active screen
--]]
function ENT:KEYPAD_PerformAction()
	local ply = LocalPlayer()
	local keypad_input = self.CurrentInput
	
	local ply_money_wallet = CH_ATM.GetMoney( ply )
	local ply_bank_account = CH_ATM.GetMoneyBankAccount( ply )
	local max_money = CH_ATM.GetAccountMaxMoney( ply )

	if self.KEYPAD_CurrentScreen == "deposit" then
		keypad_input = string.Replace( keypad_input, ".", "" )
		
		if #keypad_input > 0 and tonumber( keypad_input ) > ply_money_wallet then
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "You don't have this much money!" ) )
		elseif #keypad_input > 0 and max_money != 0 and tonumber( keypad_input + ply_bank_account ) > max_money then
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "Your bank account holding has gone above your maximum of" ) .." ".. CH_ATM.FormatMoney( max_money ) )
		elseif #keypad_input > 0 then
			net.Start( "CH_ATM_Net_DepositMoney" )
				net.WriteUInt( keypad_input, 32 )
				net.WriteEntity( self )
			net.SendToServer()
			
			-- Show action completed screen
			self:GENERAL_ActionSuccessful()
		else
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "Please enter a valid number" ) )
		end
		
		-- Draw new 3D2D after action completed screen
		timer.Simple( 2, function()
			if IsValid( self ) and self.IsInUse then
				self:BANK_HomeScreen()
			end
		end )
	elseif self.KEYPAD_CurrentScreen == "withdraw" then
		keypad_input = string.Replace( keypad_input, ".", "" )
		
		if #keypad_input > 0 and tonumber( keypad_input ) > ply_bank_account then
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "You don't have this much money!" ) )
		elseif #keypad_input > 0 then
			net.Start( "CH_ATM_Net_WithdrawMoney" )
				net.WriteUInt( keypad_input, 32 )
				net.WriteEntity( self )
			net.SendToServer()
			
			-- Show action completed screen
			self:GENERAL_ActionSuccessful()
		else
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "Please enter a valid number" ) )
		end
		
		-- Draw new 3D2D after action completed screen
		timer.Simple( 2, function()
			if IsValid( self ) and self.IsInUse then
				self:BANK_HomeScreen()
			end
		end )
	elseif self.KEYPAD_CurrentScreen == "transfer" then
		keypad_input = string.Replace( keypad_input, ".", "" )
		
		if not self.PAGES_SelectedOption then
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "You need to select a player" ) )
		elseif #keypad_input > 0 and tonumber( keypad_input ) > ply_bank_account then
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "You don't have this much money!" ) )
		elseif #keypad_input > 0 and self.PAGES_SelectedOption then
			net.Start( "CH_ATM_Net_SendMoney" )
				net.WriteUInt( keypad_input, 32 )
				net.WriteEntity( self.PAGES_SelectedOption )
			net.SendToServer()
			
			-- Show action completed screen
			self:GENERAL_ActionSuccessful()
		else
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "Please enter a valid number" ) )
		end
		
		-- Draw new 3D2D after action completed screen
		timer.Simple( 2, function()
			if IsValid( self ) and self.IsInUse then
				self:BANK_HomeScreen()
			end
		end )
	elseif self.KEYPAD_CurrentScreen == "buy_crypto" then
		keypad_input = string.Replace( keypad_input, ".", "" )
		
		if #keypad_input > 0 and self.CRYPTO_Index > 0 and self.CRYPTO_AmountToBuy > 0 then
			net.Start( "CH_CryptoCurrencies_Net_BuyCrypto" )
				net.WriteUInt( self.CRYPTO_Index, 6 )
				net.WriteDouble( self.CRYPTO_AmountToBuy )
			net.SendToServer()
			
			-- Show action completed screen
			self:GENERAL_ActionSuccessful()
		else
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "Please enter a valid number" ) )
		end
		
		-- Draw new 3D2D after action completed screen
		timer.Simple( 2, function()
			if IsValid( self ) and self.IsInUse then
				self:CRYPTO_BrowseCurrencies()
			end
		end )
	elseif self.KEYPAD_CurrentScreen == "sell_crypto" then
		local crypto_prefix = CH_CryptoCurrencies.CryptosCL[ self.CRYPTO_Index ].Currency
		
		if ply.CH_CryptoCurrencies_Wallet[ crypto_prefix ].Amount < self.CRYPTO_AmountToSell then
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_CryptoCurrencies.LangString( "You don't own this many" ) .." ".. CH_CryptoCurrencies.CryptosCL[ self.CRYPTO_Index ].Name )
		elseif #keypad_input > 0 and self.CRYPTO_Index > 0 and self.CRYPTO_AmountToSell > 0 then
			net.Start( "CH_CryptoCurrencies_Net_SellCrypto" )
				net.WriteUInt( self.CRYPTO_Index, 6 )
				net.WriteDouble( self.CRYPTO_AmountToSell )
			net.SendToServer()
			
			-- Show action completed screen
			self:GENERAL_ActionSuccessful()
		else
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "Please enter a valid number" ) )
		end
		
		-- Draw new 3D2D after action completed screen
		timer.Simple( 2, function()
			if IsValid( self ) and self.IsInUse then
				self:CRYPTO_BrowseCurrencies()
			end
		end )
	elseif self.KEYPAD_CurrentScreen == "send_crypto" then
		local crypto_prefix = CH_CryptoCurrencies.CryptosCL[ self.CRYPTO_Index ].Currency
		
		if not self.PAGES_SelectedOption then
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "You need to select a player" ) )
		elseif ply.CH_CryptoCurrencies_Wallet[ crypto_prefix ].Amount < self.CRYPTO_AmountToSend then
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_CryptoCurrencies.LangString( "You don't own this many" ) .." ".. CH_CryptoCurrencies.CryptosCL[ self.CRYPTO_Index ].Name )
		elseif #keypad_input > 0 and self.CRYPTO_Index > 0 and self.CRYPTO_AmountToSend > 0 then
			net.Start( "CH_CryptoCurrencies_Net_SendCrypto" )
				net.WriteUInt( self.CRYPTO_Index, 6 )
				net.WriteDouble( self.CRYPTO_AmountToSend )
				net.WriteEntity( self.PAGES_SelectedOption )
			net.SendToServer()
			
			-- Show action completed screen
			self:GENERAL_ActionSuccessful()
		else
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "Please enter a valid number" ) )
		end
		
		-- Draw new 3D2D after action completed screen
		timer.Simple( 2, function()
			if IsValid( self ) and self.IsInUse then
				self:CRYPTO_HomeScreen()
			end
		end )
	elseif self.KEYPAD_CurrentScreen == "transfer_offline_sid64" then
		keypad_input = string.Replace( keypad_input, ".", "" )
		
		if #keypad_input == 17 then
			-- show transfer offline amount input screen
			self:GENERAL_ActionSuccessful()
			
			timer.Simple( 1, function()
				if IsValid( self ) and self.IsInUse then
					self:BANK_TransferMoneyOffline( keypad_input )
				end
			end )
		else
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "The SteamID64 must be 17 characters long!" ) )
			
			-- Draw new 3D2D after action completed screen
			timer.Simple( 2, function()
				if IsValid( self ) and self.IsInUse then
					self:BANK_TransferMoneyOptions()
				end
			end )
			
			-- Reset variables
			self.TRANSFER_OfflineSID64 = ""
		end
	elseif self.KEYPAD_CurrentScreen == "transfer_offline" then
		keypad_input = string.Replace( keypad_input, ".", "" )
		
		if #keypad_input > 0 and tonumber( keypad_input ) > ply_bank_account then
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "You don't have this much money!" ) )
		elseif #keypad_input > 0 then
			net.Start( "CH_ATM_Net_SendMoneyOffline" )
				net.WriteUInt( keypad_input, 32 )
				net.WriteString( self.TRANSFER_OfflineSID64 )
			net.SendToServer()
			
			-- Show action completed screen
			self:GENERAL_ActionSuccessful()
		else
			-- Show action failed screen
			self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "Please enter a valid number" ) )
		end
		
		-- Draw new 3D2D after action completed screen
		timer.Simple( 2, function()
			if IsValid( self ) and self.IsInUse then
				self:BANK_HomeScreen()
			end
		end )
		
		-- Reset variables
		self.TRANSFER_OfflineSID64 = ""
	else
		ply:ChatPrint( "Unknown keypad action!" )
	end
	
	-- Reset the selected option
	self.PAGES_SelectedOption = nil

	-- Reset the keypad input
	self:KEYPAD_ResetInput()
	
	-- Remove keypad 3d2d
	self:KEYPAD_Clear3D2D()
end

--[[
	Initial screen when an ATM is not in use
--]]
function ENT:GENERAL_WelcomeScreen()
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			if CH_ATM.Config.ActivateWithCreditCard then
				-- Draw credit card
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_insert_card )
				surface.DrawTexturedRect( sw / 2 - 128, 250 - 128, 256, 256 )
			
				draw.SimpleText( CH_ATM.LangString( "Insert credit card to use the ATM" ), "CH_ATM_Font_ATMScreen_Size40", sw / 2, 500, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER ) -- MISSING TRANSLATION
			else
				-- Draw bank icon
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_bank )
				surface.DrawTexturedRect( sw / 2 - 128, 250 - 128, 256, 256 )
			
				draw.SimpleText( CH_ATM.LangString( "Press 'USE' to use the ATM" ), "CH_ATM_Font_ATMScreen_Size40", sw / 2, 500, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
				
				-- Press anywhere to continue
				local pressing = imgui.IsPressing()

				if pressing then
					if CH_CryptoCurrencies then
						self:GENERAL_HomePortal()
					else
						-- First draw loading screen for a bit
						self:GENERAL_LoadingScreen()
						
						-- Draw new 3D2D after loading screen
						timer.Simple( 1, function()
							if IsValid( self ) and self.IsInUse then
								self:BANK_HomeScreen()
							end
						end )
					end
				end
			end
			
			imgui.End3D2D()
		end
	end
end

--[[
	Action completed
--]]
function ENT:GENERAL_ActionSuccessful()
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			-- Draw action complete icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( mat_action_complete )
			surface.DrawTexturedRect( sw / 2 - 128, 250 - 128, 256, 256 )
			
			draw.SimpleText( CH_ATM.LangString( "Action Successful" ), "CH_ATM_Font_ATMScreen_Size40", sw / 2, 500, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			imgui.End3D2D()
		end
	end
	
	net.Start( "CH_ATM_Net_ChangeATMColor" )
		net.WriteEntity( self )
		net.WriteColor( CH_ATM.Config.ActionSuccessfulColor )
		net.WriteUInt( 2, 10 )
	net.SendToServer()
end

--[[
	Action failed
--]]
function ENT:GENERAL_ActionUnsuccessful( details )
	-- Play sound
	surface.PlaySound( "common/wpn_denyselect.wav" )
	
	-- Draw 3d2d
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			-- Draw action failed icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( mat_action_failed )
			surface.DrawTexturedRect( sw / 2 - 128, 250 - 128, 256, 256 )
			
			draw.SimpleText( CH_ATM.LangString( "Action Unsuccessful" ), "CH_ATM_Font_ATMScreen_Size40", sw / 2, 450, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			if details then
				draw.SimpleText( details, "CH_ATM_Font_ATMScreen_Size35", sw / 2, 500, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			
			imgui.End3D2D()
		end
	end
	
	-- Change ATM color
	net.Start( "CH_ATM_Net_ChangeATMColor" )
		net.WriteEntity( self )
		net.WriteColor( CH_ATM.Config.ActionUnsuccessfulColor )
		net.WriteUInt( 2, 10 )
	net.SendToServer()
end

--[[
	Loading screen
--]]
function ENT:GENERAL_LoadingScreen()
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			-- Draw spinning loading icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_load )
			surface.DrawTexturedRectRotated( sw / 2, 250, 256, 256, CurTime() * -75 )
			
			draw.SimpleText( CH_ATM.LangString( "Loading page" ), "CH_ATM_Font_ATMScreen_Size45", sw / 2, 500, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Loading screen
--]]
function ENT:GENERAL_IsInUseScreen()
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			-- Draw spinning loading icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_load )
			surface.DrawTexturedRectRotated( sw / 2, 250, 256, 256, CurTime() * -75 )
			
			if IsValid( self.InUseBy ) then
				draw.SimpleText( CH_ATM.LangString( "ATM occupied by" ) .." ".. self.InUseBy:Nick(), "CH_ATM_Font_ATMScreen_Size45", sw / 2, 500, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			
			imgui.End3D2D()
		end
	end
end

--[[
	Keypad
--]]
function ENT:GENERAL_KeyPad( current_screen )
	self.KEYPAD_CurrentScreen = current_screen
	
	self.Draw3D2DKeypad = function()
		if imgui.Entity3D2D( self, kp_pos, kp_ang, kp_scale ) then
			local pressing = imgui.IsPressing()

			-- Button 1
			local hovering = imgui.IsHovering( 30, 25, 55, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "1" )
			end
			
			-- Button 2
			local hovering = imgui.IsHovering( 90, 25, 55, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "2" )
			end
			
			-- Button 2
			local hovering = imgui.IsHovering( 152.5, 25, 55, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "3" )
			end
			
			-- Button 4
			local hovering = imgui.IsHovering( 30, 70, 55, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "4" )
			end
			
			-- Button 5
			local hovering = imgui.IsHovering( 90, 70, 55, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "5" )
			end
			
			-- Button 6
			local hovering = imgui.IsHovering( 152.5, 70, 55, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "6" )
			end
			
			-- Button 7
			local hovering = imgui.IsHovering( 30, 115, 55, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "7" )
			end
			
			-- Button 8
			local hovering = imgui.IsHovering( 90, 115, 55, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "8" )
			end
			
			-- Button 9
			local hovering = imgui.IsHovering( 152.5, 115, 55, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "9" )
			end
			
			-- Button .
			local hovering = imgui.IsHovering( 30, 160, 55, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "." )
			end
			
			-- Button 0
			local hovering = imgui.IsHovering( 90, 160, 55, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "0" )
			end
			
			-- Button /
			--[[
			local hovering = imgui.IsHovering( 152.5, 160, 55, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "/" )
				surface.PlaySound( "UI/buttonclick.wav" )
			end
			--]]
			-- Button CANCEL
			local hovering = imgui.IsHovering( 225, 25, 85, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "CANCEL" )
			end
			
			-- Button CLEAR
			local hovering = imgui.IsHovering( 225, 70, 85, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "CLEAR" )
			end
			
			-- Button ENTER
			local hovering = imgui.IsHovering( 225, 115, 85, 40 )

			if hovering and pressing then
				self:KEYPAD_AcceptInput( "ENTER" )
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, kp_sw, kp_sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Select DarkRP Bank or Cryptocurrencies
--]]
function ENT:GENERAL_HomePortal()
	local ply = LocalPlayer()
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()
			
			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Welcome" ) ..", ".. ply:Nick(), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			-- Bank Account Button
			local hovering = imgui.IsHovering( 125, 120, 300, 400 )
			
			if hovering and pressing then
				draw.RoundedBox( 8, 125, 440, 300, 80, CH_ATM.Colors.Green )
				
				-- First draw loading screen for a bit
				self:GENERAL_LoadingScreen()
				
				-- Draw new 3D2D after loading screen
				timer.Simple( 1, function()
					if IsValid( self ) and self.IsInUse then
						self:BANK_HomeScreen()
					end
				end )
			elseif hovering then
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_bank )
				surface.DrawTexturedRect( 146, 146, 268, 268 )
			
				draw.RoundedBox( 8, 125, 440, 300, 80, CH_ATM.Colors.GMSBlue )
			else
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_bank )
				surface.DrawTexturedRect( 150, 150, 256, 256 )
			
				draw.RoundedBox( 8, 125, 440, 300, 80, CH_ATM.Colors.DarkGray )
			end
			
			draw.SimpleText( CH_ATM.LangString( "Bank Account" ), "CH_ATM_Font_ATMScreen_Size45", 270, 480, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Cryptocurrencies Button
			local hovering = imgui.IsHovering( 625, 120, 300, 400 )
			
			if hovering and pressing then
				draw.RoundedBox( 8, 625, 440, 300, 80, CH_ATM.Colors.Green )
				
				-- First draw loading screen for a bit
				self:GENERAL_LoadingScreen()
				
				-- Draw new 3D2D after loading screen
				timer.Simple( 1, function()
					if IsValid( self ) and self.IsInUse then
						self:CRYPTO_HomeScreen()
					end
				end )
			elseif hovering then
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_crypto_bank )
				surface.DrawTexturedRect( 646, 146, 268, 268 )
			
				draw.RoundedBox( 8, 625, 440, 300, 80, CH_ATM.Colors.GMSBlue )
			else
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_crypto_bank )
				surface.DrawTexturedRect( 650, 150, 256, 256 )
			
				draw.RoundedBox( 8, 625, 440, 300, 80, CH_ATM.Colors.DarkGray )
			end
			
			draw.SimpleText( CH_ATM.LangString( "Cryptocurrencies" ), "CH_ATM_Font_ATMScreen_Size45", 775, 480, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			
			
			
			-- Settings Button
			local hovering = imgui.IsHovering( 970, 570, 64, 64 )
			
			surface.SetDrawColor( hovering and CH_ATM.Colors.GMSBlue or color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_settings )
			surface.DrawTexturedRect( 970, 570, 64, 64 )
			
			if hovering and pressing then
				self:GENERAL_UserSettings()
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	General settings menu
--]]
function ENT:GENERAL_UserSettings()
	local ply = LocalPlayer()
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()
			
			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Welcome" ) ..", ".. ply:Nick(), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			-- User settings (icon theme, cursor icon)
			draw.SimpleText( CH_ATM.LangString( "User Settings" ), "CH_ATM_Font_ATMScreen_Size45", sw / 2, 105, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- White Icons
			local hovering = imgui.IsHovering( 50, 150, 300, 95 )
			
			if hovering and pressing then
				draw.RoundedBox( 8, 50, 150, 300, 95, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				ply:ConCommand( "ch_atm_theme_setting 1" )
			elseif hovering then
				draw.RoundedBox( 8, 50, 150, 300, 95, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, 50, 150, 300, 95, CH_ATM.Colors.DarkGray )
			end
			
			draw.SimpleText( CH_ATM.LangString( "White Icons" ), "CH_ATM_Font_ATMScreen_Size35", 200, 175, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ 1 ].mat_deposit )
			surface.DrawTexturedRect( 80, 200, 32, 32 )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ 1 ].mat_withdraw )
			surface.DrawTexturedRect( 150, 200, 32, 32 )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ 1 ].mat_send_money )
			surface.DrawTexturedRect( 220, 200, 32, 32 )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ 1 ].mat_bank_history )
			surface.DrawTexturedRect( 290, 200, 32, 32 )
			
			-- Gradient Icons
			local hovering = imgui.IsHovering( sw / 2 - 150, 150, 300, 95 )
			
			if hovering and pressing then
				draw.RoundedBox( 8, sw / 2 - 150, 150, 300, 95, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				ply:ConCommand( "ch_atm_theme_setting 2" )
			elseif hovering then
				draw.RoundedBox( 8, sw / 2 - 150, 150, 300, 95, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, sw / 2 - 150, 150, 300, 95, CH_ATM.Colors.DarkGray )
			end
			
			draw.SimpleText( CH_ATM.LangString( "Gradient Icons" ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 175, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ 2 ].mat_deposit )
			surface.DrawTexturedRect( 410, 200, 32, 32 )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ 2 ].mat_withdraw )
			surface.DrawTexturedRect( 480, 200, 32, 32 )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ 2 ].mat_send_money )
			surface.DrawTexturedRect( 550, 200, 32, 32 )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ 2 ].mat_bank_history )
			surface.DrawTexturedRect( 620, 200, 32, 32 )
			
			-- Flat Color Icons
			local hovering = imgui.IsHovering( 710, 150, 300, 95 )
			
			if hovering and pressing then
				draw.RoundedBox( 8, 710, 150, 300, 95, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				ply:ConCommand( "ch_atm_theme_setting 3" )
			elseif hovering then
				draw.RoundedBox( 8, 710, 150, 300, 95, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, 710, 150, 300, 95, CH_ATM.Colors.DarkGray )
			end
			
			draw.SimpleText( CH_ATM.LangString( "Flat Color Icons" ), "CH_ATM_Font_ATMScreen_Size35", 860, 175, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ 3 ].mat_deposit )
			surface.DrawTexturedRect( 735, 200, 32, 32 )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ 3 ].mat_withdraw )
			surface.DrawTexturedRect( 805, 200, 32, 32 )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ 3 ].mat_send_money )
			surface.DrawTexturedRect( 875, 200, 32, 32 )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ 3 ].mat_bank_history )
			surface.DrawTexturedRect( 945, 200, 32, 32 )
			
			-- Use Cursor
			local hovering = imgui.IsHovering( sw / 2 - 265, 270, 250, 50 )
			
			if hovering and pressing then
				draw.RoundedBox( 8, sw / 2 - 265, 270, 250, 50, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				ply:ConCommand( "ch_atm_cursor_setting 1" )
			elseif hovering then
				draw.RoundedBox( 8, sw / 2 - 265, 270, 250, 50, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, sw / 2 - 265, 270, 250, 50, CH_ATM.Colors.DarkGray )
			end
			
			draw.SimpleText( CH_ATM.LangString( "Use Cursor" ), "CH_ATM_Font_ATMScreen_Size35", 390, 295, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.Materials.Cursor )
			surface.DrawTexturedRect( 465, 278, 32, 32 )
			
			-- Use Hand
			local hovering = imgui.IsHovering( sw / 2 + 15, 270, 250, 50 )
			
			if hovering and pressing then
				draw.RoundedBox( 8, sw / 2 + 15, 270, 250, 50, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				ply:ConCommand( "ch_atm_cursor_setting 2" )
			elseif hovering then
				draw.RoundedBox( 8, sw / 2 + 15, 270, 250, 50, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, sw / 2 + 15, 270, 250, 50, CH_ATM.Colors.DarkGray )
			end
			
			draw.SimpleText( CH_ATM.LangString( "Use Hand" ), "CH_ATM_Font_ATMScreen_Size35", 670, 295, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.Materials.HandCursor )
			surface.DrawTexturedRect( 740, 278, 32, 32 )
			
			
			-- Account Information
			draw.SimpleText( CH_ATM.LangString( "Account Information" ), "CH_ATM_Font_ATMScreen_Size45", sw / 2, 370, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			draw.RoundedBox( 8, 50, 420, 300, 50, CH_ATM.Colors.DarkGray )
			draw.SimpleText( CH_ATM.LangString( "Account Level" ) ..": ".. CH_ATM.GetAccountLevel( ply ), "CH_ATM_Font_ATMScreen_Size35", 200, 445, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			draw.RoundedBox( 8, 380, 420, 300, 50, CH_ATM.Colors.DarkGray )
			draw.SimpleText( CH_ATM.LangString( "Interest Rate" ) ..": ".. CH_ATM.GetAccountInterestRate( ply ) .."%", "CH_ATM_Font_ATMScreen_Size35", sw / 2, 445, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			draw.RoundedBox( 8, 50, 500, 300, 50, CH_ATM.Colors.DarkGray )
			if CH_ATM.GetAccountMaxMoney( ply ) == 0 then
				draw.SimpleText( CH_ATM.LangString( "Unlimited" ), "CH_ATM_Font_ATMScreen_Size35", 200, 525, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_ATM.LangString( "Max" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetAccountMaxMoney( ply ) ), "CH_ATM_Font_ATMScreen_Size35", 200, 525, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			
			draw.RoundedBox( 8, 380, 500, 300, 50, CH_ATM.Colors.DarkGray )
			draw.SimpleText( CH_ATM.LangString( "Max Interest" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetMaxInterestToEarn( ply ) ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 525, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Upgrade Account
			local hovering = imgui.IsHovering( 710, 420, 300, 130 )
			
			if hovering and pressing then
				draw.RoundedBox( 8, 710, 420, 300, 130, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				local next_level = CH_ATM.GetAccountLevel( ply ) + 1
				
				if CH_ATM.Config.AccountLevels[ next_level ] then
					self:GENERAL_UpgradeAccount()
				else
					self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "Your account cannot be upgraded anymore!" ) )
					
					-- Draw new 3D2D after
					timer.Simple( 2, function()
						if IsValid( self ) and self.IsInUse then
							self:GENERAL_UserSettings()
						end
					end )
				end
			elseif hovering then
				draw.RoundedBox( 8, 710, 420, 300, 130, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, 710, 420, 300, 130, CH_ATM.Colors.DarkGray )
			end
			
			draw.SimpleText( CH_ATM.LangString( "Upgrade Account" ), "CH_ATM_Font_ATMScreen_Size35", 860, 445, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_upgrade_account )
			surface.DrawTexturedRect( 820, 463, 80, 80 )
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				if CH_CryptoCurrencies then
					self:GENERAL_HomePortal()
				else
					self:BANK_HomeScreen()
				end
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Menu to upgrade your account
--]]
function ENT:GENERAL_UpgradeAccount()
	
	local ply = LocalPlayer()
	local next_level = CH_ATM.GetAccountLevel( ply ) + 1
	local ply_bank_account = CH_ATM.GetMoneyBankAccount( ply )
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()
			
			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Total Balance" ) ..": ".. CH_ATM.FormatMoney( ply_bank_account ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			-- Draw icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_upgrade_account )
			surface.DrawTexturedRect( sw / 2 - 128, 250 - 128, 256, 256 )

			-- Browse Cryptocurrencies Button
			local hovering = imgui.IsHovering( sw / 2 - 400, 440, 800, 100 )
			
			if hovering and pressing then
				draw.RoundedBox( 8, sw / 2 - 400, 440, 800, 100, CH_ATM.Colors.Green )
				
				if tonumber( CH_ATM.Config.AccountLevels[ next_level ].UpgradePrice ) > ply_bank_account then
					-- Show action failed screen
					self:GENERAL_ActionUnsuccessful( CH_ATM.LangString( "You don't have this much money!" ) )
				else
					net.Start( "CH_ATM_Net_UpgradeBankAccountLevel" )
					net.SendToServer()
					
					-- Show action completed screen
					self:GENERAL_ActionSuccessful()
				end
				
				-- Draw new 3D2D after action completed screen
				timer.Simple( 2, function()
					if IsValid( self ) and self.IsInUse then
						self:GENERAL_UserSettings()
					end
				end )
			elseif hovering then
				draw.RoundedBox( 8, sw / 2 - 400, 440, 800, 100, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, sw / 2 - 400, 440, 800, 100, CH_ATM.Colors.DarkGray )
			end
			
			draw.SimpleText( CH_ATM.LangString( "Upgrade Account - Next Level" ) ..": ".. next_level, "CH_ATM_Font_ATMScreen_Size45", sw / 2, 470, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			draw.SimpleText( CH_ATM.LangString( "Costs" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.Config.AccountLevels[ next_level ].UpgradePrice ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 510, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Show bank home screen
				self:GENERAL_UserSettings()
				
				-- Reset page
				self.PAGES_CurrentPage = 1
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end




--[[
	Home for cryptocurrencies
--]]
function ENT:CRYPTO_HomeScreen()
	local ply = LocalPlayer()
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Welcome" ) ..", ".. ply:Nick(), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			
			-- Cache some button sizes
			local btn_x = sw / 2 - 400
			local btn_w = 800
			local btn_h = 100
			
			
			
			
			-- Browse Cryptocurrencies Button
			local hovering = imgui.IsHovering( btn_x, 100, btn_w, btn_h )
			
			if hovering and pressing then
				draw.RoundedBox( 8, btn_x, 100, btn_w, btn_h, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				self:CRYPTO_BrowseCurrencies()
			elseif hovering then
				draw.RoundedBox( 8, btn_x, 100, btn_w, btn_h, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, btn_x, 100, btn_w, btn_h, CH_ATM.Colors.DarkGray )
			end
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_cryptos )
			surface.DrawTexturedRect( 150, 110, 80, 80 )
			
			draw.SimpleText( CH_ATM.LangString( "Browse Cryptocurrencies" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 150, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			
			
			-- Portfolio Button
			local hovering = imgui.IsHovering( btn_x, 230, btn_w, btn_h )
			
			if hovering and pressing then
				draw.RoundedBox( 8, btn_x, 230, btn_w, btn_h, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				self:CRYPTO_Portfolio()
			elseif hovering then
				draw.RoundedBox( 8, btn_x, 230, btn_w, btn_h, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, btn_x, 230, btn_w, btn_h, CH_ATM.Colors.DarkGray )
			end
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_portfolio )
			surface.DrawTexturedRect( 150, 240, 80, 80 )
			
			draw.SimpleText( CH_ATM.LangString( "Portfolio" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 280, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			
			
			-- Send Crypto Button
			local hovering = imgui.IsHovering( btn_x, 350, btn_w, btn_h )
			
			if hovering and pressing then
				draw.RoundedBox( 8, btn_x, 360, btn_w, btn_h, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				self:CRYPTO_SelectSendCrypto()
			elseif hovering then
				draw.RoundedBox( 8, btn_x, 360, btn_w, btn_h, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, btn_x, 360, btn_w, btn_h, CH_ATM.Colors.DarkGray )
			end
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_send_crypto )
			surface.DrawTexturedRect( 150, 370, 80, 80 )
			
			draw.SimpleText( CH_ATM.LangString( "Send Crypto" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 410, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			
			
			-- History Button (only if crypto is on mysqloo)
			if CH_CryptoCurrencies.Config.EnableSQL then
				local hovering = imgui.IsHovering( btn_x, 490, btn_w, btn_h )
				
				if hovering and pressing then
					draw.RoundedBox( 8, btn_x, 490, btn_w, btn_h, CH_ATM.Colors.Green )
						
					-- Draw new 3D2D
					self:CRYPTO_TransactionHistory()
				elseif hovering then
					draw.RoundedBox( 8, btn_x, 490, btn_w, btn_h, CH_ATM.Colors.GMSBlue )
				else
					draw.RoundedBox( 8, btn_x, 490, btn_w, btn_h, CH_ATM.Colors.DarkGray )
				end
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_history )
				surface.DrawTexturedRect( 150, 500, 80, 80 )
				
				draw.SimpleText( CH_ATM.LangString( "Transaction History" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 540, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			
			
			
			-- Settings Button
			local hovering = imgui.IsHovering( 970, 570, 64, 64 )
			
			surface.SetDrawColor( hovering and CH_ATM.Colors.GMSBlue or color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_settings )
			surface.DrawTexturedRect( 970, 570, 64, 64 )
			
			if hovering and pressing then
				self:GENERAL_UserSettings()
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Draw new 3D2D after loading screen
				self:GENERAL_HomePortal()
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Show available cryptocurrencies
	Names, symbol, icon, prices, buy, sell
--]]
function ENT:CRYPTO_BrowseCurrencies()
	local ply = LocalPlayer()
	
	-- Setup the amount of pages
	local amount_of_cryptos = #CH_CryptoCurrencies.CryptosCL
	self.PAGES_AmountOfPages = math.ceil( amount_of_cryptos / 8 )
	
	for i = 1, self.PAGES_AmountOfPages do
		-- Create the table for page
		self.PAGES_PageContent[ i ] = {}
	end
	
	-- Insert entries into their respective page
	local count = 0
	for k, crypto in ipairs( CH_CryptoCurrencies.CryptosCL ) do
		count = count + 1
		
		local page = math.ceil( count / 8 )
		
		table.insert( self.PAGES_PageContent[ page ], crypto )
	end
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			if CH_CryptoCurrencies and CH_CryptoCurrencies.Config.UseMoneyFromBankAccount then
				draw.SimpleText( CH_ATM.LangString( "Total Balance" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetMoneyBankAccount( ply ) ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_ATM.LangString( "Wallet Balance" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetMoney( ply ) ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			
			draw.SimpleText( CH_ATM.LangString( "Browse Cryptocurrencies" ) .." (".. self.PAGES_CurrentPage .. "/".. self.PAGES_AmountOfPages ..")", "CH_ATM_Font_ATMScreen_Size45", sw / 2, 105, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			-- Pages of crypto
			if self.PAGES_PageContent[ self.PAGES_CurrentPage ] then
				for k, crypto in pairs( self.PAGES_PageContent[ self.PAGES_CurrentPage ] ) do
					local x_pos = -450
						local y_pos = 160

						local x_offset = 0
						if k <= 2 then
							x_offset = k * 500
							x_pos = x_pos + x_offset
						elseif k <= 4 then
							x_offset = ( k - 2 ) * 500
							x_pos = x_pos + x_offset
							
							y_pos = 260
						elseif k <= 6 then
							x_offset = ( k - 4 ) * 500
							x_pos = x_pos + x_offset
							
							y_pos = 360
						elseif k <= 8 then
							x_offset = ( k - 6 ) * 500
							x_pos = x_pos + x_offset
							
							y_pos = 460
						end
					
					-- Crypto BG
					draw.RoundedBox( 8, x_pos, y_pos, 450, 90, CH_ATM.Colors.DarkGray )
					
					-- Crypto Icon
					surface.SetDrawColor( color_white )
					surface.SetMaterial( crypto.Icon )
					surface.DrawTexturedRect( x_pos + 5, y_pos + 5, 80, 80 )
					
					-- Vertical seperator line
					surface.SetDrawColor( CH_CryptoCurrencies.Colors.WhiteAlpha )
					surface.DrawRect( x_pos + 90, y_pos + 10, 2.5, 70 )
					
					-- Vertical seperator line END
					surface.SetDrawColor( CH_CryptoCurrencies.Colors.WhiteAlpha )
					surface.DrawRect( x_pos + 440, y_pos + 10, 2.5, 70 )
					
					-- Horizontal seperator line
					surface.SetDrawColor( CH_CryptoCurrencies.Colors.WhiteAlpha )
					surface.DrawRect( x_pos + 97.5, y_pos + 45, 337.5, 2.5 )
					
					-- Crypto Name and Price
					draw.SimpleText( crypto.Name, "CH_ATM_Font_ATMScreen_Size35", x_pos + 97.5, y_pos + 25, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					
					surface.SetFont( "CH_ATM_Font_ATMScreen_Size35" )
					local x, y = surface.GetTextSize( crypto.Price )
					
					draw.SimpleText( crypto.Price, "CH_ATM_Font_ATMScreen_Size35", x_pos + 97.5, y_pos + 65, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					draw.SimpleText( CH_CryptoCurrencies.CurrencyAbbreviation(), "CH_CryptoCurrency_Font_Size6", x_pos + 97.5 + ( x + 5 ), y_pos + 70, CH_CryptoCurrencies.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					
					-- Change in price
					local price_change = crypto.Change
					local price_change_color = CH_CryptoCurrencies.Colors.Green
					if price_change < 0 then
						price_change_color = CH_CryptoCurrencies.Colors.Red
					end
					local no_change = false
			
					surface.SetDrawColor( color_white )
					if price_change == 0 then
						no_change = true
					elseif price_change > 0 then
						surface.SetMaterial( CH_CryptoCurrencies.Materials.ArrowUpIcon )
					else
						surface.SetMaterial( CH_CryptoCurrencies.Materials.ArrowDownIcon )
					end
					if not no_change then
						surface.SetFont( "CH_ATM_Font_ATMScreen_Size35" )
						local x2, y2 = surface.GetTextSize( price_change .."%" )
						
						surface.DrawTexturedRect( x_pos + 410 - ( x2 ), y_pos + 55, 20, 20 )
						
						draw.SimpleText( price_change .."%", "CH_ATM_Font_ATMScreen_Size35", x_pos + 432.5, y_pos + 65, price_change_color, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
					end
					
					-- Player Owns Amount
					local player_owns = math.Round( ply.CH_CryptoCurrencies_Wallet[ crypto.Currency ].Amount, 7 )
					
					-- Get index of button/crypto
					local crypto_index = table.KeyFromValue( CH_CryptoCurrencies.CryptosCL, crypto )
					
					if ( player_owns > 0 ) and ( crypto.Price > 0 ) then
						-- Buy Button
						local hovering = imgui.IsHovering( x_pos + 330, y_pos + 10, 50, 30 )
						
						if hovering and pressing then
							draw.RoundedBox( 8, x_pos + 330, y_pos + 10, 50, 30, CH_ATM.Colors.GMSBlue )
							
							-- Draw new 3D2D
							self:CRYPTO_BuyCryptoScreen( crypto_index )
						elseif hovering then
							draw.RoundedBox( 8, x_pos + 330, y_pos + 10, 50, 30, CH_ATM.Colors.GreenHovered )
						else
							draw.RoundedBox( 8, x_pos + 330, y_pos + 10, 50, 30, CH_ATM.Colors.Green )
						end
						
						draw.SimpleText( CH_CryptoCurrencies.LangString( "Buy" ), "CH_ATM_Font_ATMScreen_Size30", x_pos + 355, y_pos + 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
					
						-- Sell Button
						local hovering = imgui.IsHovering( x_pos + 385, y_pos + 10, 50, 30 )
						
						if hovering and pressing then
							draw.RoundedBox( 8, x_pos + 385, y_pos + 10, 50, 30, CH_ATM.Colors.GMSBlue )
							
							-- Draw new 3D2D
							self:CRYPTO_SellCryptoScreen( crypto_index )
						elseif hovering then
							draw.RoundedBox( 8, x_pos + 385, y_pos + 10, 50, 30, CH_ATM.Colors.RedHovered )
						else
							draw.RoundedBox( 8, x_pos + 385, y_pos + 10, 50, 30, CH_ATM.Colors.Red )
						end
						
						draw.SimpleText( CH_CryptoCurrencies.LangString( "Sell" ), "CH_ATM_Font_ATMScreen_Size30", x_pos + 410, y_pos + 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
					elseif crypto.Price > 0 then
						-- Only Buy Button
						local hovering = imgui.IsHovering( x_pos + 330, y_pos + 10, 105, 30 )
						
						if hovering and pressing then
							draw.RoundedBox( 8, x_pos + 330, y_pos + 10, 105, 30, CH_ATM.Colors.GMSBlue )
							
							-- Draw new 3D2D
							self:CRYPTO_BuyCryptoScreen( crypto_index )
						elseif hovering then
							draw.RoundedBox( 8, x_pos + 330, y_pos + 10, 105, 30, CH_ATM.Colors.GreenHovered )
						else
							draw.RoundedBox( 8, x_pos + 330, y_pos + 10, 105, 30, CH_ATM.Colors.Green )
						end
						
						draw.SimpleText( CH_CryptoCurrencies.LangString( "Buy" ), "CH_ATM_Font_ATMScreen_Size30", x_pos + 385, y_pos + 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
					end
				end
				
				-- Change pages
				-- Left Page Button
				if self.PAGES_CurrentPage > 1 then
					local hovering = imgui.IsHovering( 40, 550, 50, 50 )
					
					surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
					surface.SetMaterial( mat_page_back )
					surface.DrawTexturedRect( 40, 550, 50, 50 )
					
					if hovering and pressing then
						self.PAGES_CurrentPage = self.PAGES_CurrentPage - 1
					end
				end
				
				-- Right Page Button
				if self.PAGES_AmountOfPages > self.PAGES_CurrentPage then
					local hovering = imgui.IsHovering( 970, 550, 50, 50 )
					
					surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
					surface.SetMaterial( mat_page_next )
					surface.DrawTexturedRect( 970, 550, 50, 50 )
					
					if hovering and pressing then
						self.PAGES_CurrentPage = self.PAGES_CurrentPage + 1
					end
				end
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Show bank home screen
				self:CRYPTO_HomeScreen()
				
				-- Reset page
				self.PAGES_CurrentPage = 1
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Buy cryptocurrency from ATM
--]]
function ENT:CRYPTO_BuyCryptoScreen( crypto_to_buy )
	local ply = LocalPlayer()
	
	self:GENERAL_KeyPad( "buy_crypto" )
	
	self.CRYPTO_Index = crypto_to_buy
	
	-- Setup variables
	local crypto = CH_CryptoCurrencies.CryptosCL[ self.CRYPTO_Index ]
	local player_owns = math.Round( ply.CH_CryptoCurrencies_Wallet[ crypto.Currency ].Amount, 7 )
	local player_money = CH_CryptoCurrencies.GetMoney( ply )
	
	if CH_CryptoCurrencies and CH_CryptoCurrencies.Config.UseMoneyFromBankAccount then
		player_money = CH_ATM.GetMoneyBankAccount( ply )
	end
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_CryptoCurrencies.LangString( "Buy" ) .." ".. crypto.Name, "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			-- Coin Icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( crypto.Icon )
			surface.DrawTexturedRect( 100, 100, 200, 200 )
			
			--Coin Name & Price
			draw.SimpleText( crypto.Name, "CH_ATM_Font_ATMScreen_Size100", 315, 150, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			
			surface.SetFont( "CH_ATM_Font_ATMScreen_Size100" )
			local x, y = surface.GetTextSize( crypto.Price )
			
			draw.SimpleText( crypto.Price, "CH_ATM_Font_ATMScreen_Size100", 315, 250, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			draw.SimpleText( CH_CryptoCurrencies.CurrencyAbbreviation(), "CH_ATM_Font_ATMScreen_Size60", 315 + ( x + 10 ), 260, CH_CryptoCurrencies.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		
			
			-- LEFT ENTRY
			draw.RoundedBox( 8, 100, 400, 380, 80, color_white )
			
			-- Text above entry
			draw.SimpleText( CH_CryptoCurrencies.FormatMoney( player_money ), "CH_ATM_Font_ATMScreen_Size40", 100, 370, CH_CryptoCurrencies.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

			-- Entry text from keypad
			draw.SimpleText( CH_CryptoCurrencies.FormatMoney( ( tonumber( self.CurrentInput ) or 0 ) ), "CH_ATM_Font_ATMScreen_Size50", 105, 440, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			
			-- CurrencyAbbreviation
			draw.SimpleText( CH_CryptoCurrencies.CurrencyAbbreviation(), "CH_ATM_Font_ATMScreen_Size50", 475, 440, color_black, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
			
			
			
			-- RIGHT ENTRY
			draw.RoundedBox( 8, 580, 400, 380, 80, color_white )
			
			-- Text above entry
			draw.SimpleText( string.format( "%f", player_owns ) .." ".. crypto.Currency, "CH_ATM_Font_ATMScreen_Size40", 955, 370, CH_CryptoCurrencies.Colors.WhiteAlpha2, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
			
			-- Entry text from keypad
			self.CRYPTO_AmountToBuy = math.Round( ( tonumber( self.CurrentInput ) or 0 ) / crypto.Price, 7 )
			draw.SimpleText( string.format( "%f", self.CRYPTO_AmountToBuy ), "CH_ATM_Font_ATMScreen_Size50", 585, 440, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			
			-- CurrencyAbbreviation
			draw.SimpleText( crypto.Currency, "CH_ATM_Font_ATMScreen_Size50", 955, 440, color_black, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
			
			
			
			
			-- Exchange Icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_CryptoCurrencies.Materials.ArrowExchangeIcon )
			surface.DrawTexturedRect( sw / 2 - 32, 410, 64, 64 )
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Clear the keypad input
				self:KEYPAD_ResetInput()
				
				-- Show bank home screen
				self:CRYPTO_BrowseCurrencies()
				
				-- Remove keypad 3d2d
				self:KEYPAD_Clear3D2D()
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Sell cryptocurrency from ATM
--]]
function ENT:CRYPTO_SellCryptoScreen( crypto_to_sell )
	local ply = LocalPlayer()
	
	self:GENERAL_KeyPad( "sell_crypto" )
	
	self.CRYPTO_Index = crypto_to_sell
	
	-- Setup variables
	local crypto = CH_CryptoCurrencies.CryptosCL[ self.CRYPTO_Index ]
	local player_owns = math.Round( ply.CH_CryptoCurrencies_Wallet[ crypto.Currency ].Amount, 7 )
	local player_money = CH_CryptoCurrencies.GetMoney( ply )
	
	if CH_CryptoCurrencies and CH_CryptoCurrencies.Config.UseMoneyFromBankAccount then
		player_money = CH_ATM.GetMoneyBankAccount( ply )
	end
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_CryptoCurrencies.LangString( "Sell" ) .." ".. crypto.Name, "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			-- Coin Icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( crypto.Icon )
			surface.DrawTexturedRect( 100, 100, 200, 200 )
			
			--Coin Name & Price
			draw.SimpleText( crypto.Name, "CH_ATM_Font_ATMScreen_Size100", 315, 150, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			
			surface.SetFont( "CH_ATM_Font_ATMScreen_Size100" )
			local x, y = surface.GetTextSize( crypto.Price )
			
			draw.SimpleText( crypto.Price, "CH_ATM_Font_ATMScreen_Size100", 315, 250, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			draw.SimpleText( CH_CryptoCurrencies.CurrencyAbbreviation(), "CH_ATM_Font_ATMScreen_Size60", 315 + ( x + 10 ), 260, CH_CryptoCurrencies.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
		
		
			
			-- LEFT ENTRY
			draw.RoundedBox( 8, 100, 400, 380, 80, color_white )
			
			-- Text above entry
			draw.SimpleText( string.format( "%f", player_owns ) .." ".. crypto.Currency, "CH_ATM_Font_ATMScreen_Size40", 100, 370, CH_CryptoCurrencies.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

			-- Entry text from keypad
			draw.SimpleText( self.CurrentInput or 0, "CH_ATM_Font_ATMScreen_Size50", 105, 440, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			
			-- The currency to trade
			draw.SimpleText( crypto.Currency, "CH_ATM_Font_ATMScreen_Size50", 475, 440, color_black, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
			
			-- RIGHT ENTRY
			draw.RoundedBox( 8, 580, 400, 380, 80, color_white )
			
			-- Text above entry
			draw.SimpleText( CH_CryptoCurrencies.FormatMoney( player_money ), "CH_ATM_Font_ATMScreen_Size40", 955, 370, CH_CryptoCurrencies.Colors.WhiteAlpha2, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
			
			-- Amount to earn from trade
			self.CRYPTO_AmountToSell = tonumber( self.CurrentInput ) or 0
			local earn_from_trade = math.Round( ( self.CRYPTO_AmountToSell ) * crypto.Price )
			
			draw.SimpleText( CH_ATM.FormatMoney( earn_from_trade ), "CH_ATM_Font_ATMScreen_Size50", 585, 440, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			
			-- CurrencyAbbreviation
			draw.SimpleText( CH_CryptoCurrencies.CurrencyAbbreviation(), "CH_ATM_Font_ATMScreen_Size50", 955, 440, color_black, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
			
			
			
			
			-- Exchange Icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_CryptoCurrencies.Materials.ArrowExchangeIcon )
			surface.DrawTexturedRect( sw / 2 - 32, 410, 64, 64 )
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Clear the keypad input
				self:KEYPAD_ResetInput()
				
				-- Show bank home screen
				self:CRYPTO_BrowseCurrencies()
				
				-- Remove keypad 3d2d
				self:KEYPAD_Clear3D2D()
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Show crypto portfolio
--]]
function ENT:CRYPTO_Portfolio()
	local ply = LocalPlayer()
	local TotalBalance = 0

	-- Setup the amount of pages
	local amount_of_cryptos = 0
	for k, crypto in pairs( CH_CryptoCurrencies.CryptosCL ) do
		local prefix = crypto.Currency
		local player_owns = math.Round( ply.CH_CryptoCurrencies_Wallet[ prefix ].Amount, 7 )
		
		if CH_CryptoCurrencies.CryptoIconsCL[ prefix ] and player_owns > 0 then
			amount_of_cryptos = amount_of_cryptos + 1
		end
	end

	self.PAGES_AmountOfPages = math.ceil( amount_of_cryptos / 8 )
	
	for i = 1, self.PAGES_AmountOfPages do
		-- Create the table for page
		self.PAGES_PageContent[ i ] = {}
	end
	
	-- Insert entries into their respective page
	local count = 0
	for k, crypto in ipairs( CH_CryptoCurrencies.CryptosCL ) do
		local prefix = crypto.Currency
		local player_owns = math.Round( ply.CH_CryptoCurrencies_Wallet[ prefix ].Amount, 7 )
		
		if CH_CryptoCurrencies.CryptoIconsCL[ prefix ] and player_owns > 0 then
			local crypto_worth = math.Round( player_owns * crypto.Price )
			-- Update total balance for the frame
			TotalBalance = TotalBalance + crypto_worth
		
			count = count + 1
			
			local page = math.ceil( count / 8 )
			
			table.insert( self.PAGES_PageContent[ page ], crypto )
		end
	end
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()
			
			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Crypto Worth" ) ..": ".. CH_CryptoCurrencies.FormatMoney( TotalBalance ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			if self.PAGES_AmountOfPages > 0 then
				draw.SimpleText( CH_CryptoCurrencies.LangString( "Portfolio" ) .." (".. self.PAGES_CurrentPage .. "/".. self.PAGES_AmountOfPages ..")", "CH_ATM_Font_ATMScreen_Size45", sw / 2, 105, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

				-- Pages of crypto
				if self.PAGES_PageContent[ self.PAGES_CurrentPage ] then
					for k, crypto in pairs( self.PAGES_PageContent[ self.PAGES_CurrentPage ] ) do
						local x_pos = -450
						local y_pos = 160

						local x_offset = 0
						if k <= 2 then
							x_offset = k * 500
							x_pos = x_pos + x_offset
						elseif k <= 4 then
							x_offset = ( k - 2 ) * 500
							x_pos = x_pos + x_offset
							
							y_pos = 260
						elseif k <= 6 then
							x_offset = ( k - 4 ) * 500
							x_pos = x_pos + x_offset
							
							y_pos = 360
						elseif k <= 8 then
							x_offset = ( k - 6 ) * 500
							x_pos = x_pos + x_offset
							
							y_pos = 460
						end
						
						-- Crypto BG
						draw.RoundedBox( 8, x_pos, y_pos, 450, 90, CH_ATM.Colors.DarkGray )
						
						-- Crypto Icon
						surface.SetDrawColor( color_white )
						surface.SetMaterial( crypto.Icon )
						surface.DrawTexturedRect( x_pos + 5, y_pos + 5, 80, 80 )
						
						-- Vertical seperator line
						surface.SetDrawColor( CH_CryptoCurrencies.Colors.WhiteAlpha )
						surface.DrawRect( x_pos + 90, y_pos + 10, 2.5, 70 )
						
						-- Vertical seperator line END
						surface.SetDrawColor( CH_CryptoCurrencies.Colors.WhiteAlpha )
						surface.DrawRect( x_pos + 440, y_pos + 10, 2.5, 70 )
						
						-- Horizontal seperator line
						surface.SetDrawColor( CH_CryptoCurrencies.Colors.WhiteAlpha )
						surface.DrawRect( x_pos + 97.5, y_pos + 45, 337.5, 2.5 )
						
						-- Player Owns Amount
						local player_owns = math.Round( ply.CH_CryptoCurrencies_Wallet[ crypto.Currency ].Amount, 7 )
						
						-- Crypto Name and Owned Amount
						draw.SimpleText( crypto.Name, "CH_ATM_Font_ATMScreen_Size35", x_pos + 97.5, y_pos + 25, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
						
						surface.SetFont( "CH_ATM_Font_ATMScreen_Size35" )
						local x, y = surface.GetTextSize( string.format( "%f", player_owns ) )
						
						draw.SimpleText( string.format( "%f", player_owns ), "CH_ATM_Font_ATMScreen_Size35", x_pos + 97.5, y_pos + 65, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
						draw.SimpleText( crypto.Currency, "CH_CryptoCurrency_Font_Size6", x_pos + 97.5 + ( x + 5 ), y_pos + 70, CH_CryptoCurrencies.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )

						-- Crypto Worth
						draw.SimpleText( CH_CryptoCurrencies.LangString( "Worth" ), "CH_ATM_Font_ATMScreen_Size35", x_pos + 432.5, y_pos + 25, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
						
						local crypto_worth = math.Round( player_owns * crypto.Price )
						draw.SimpleText( string.Comma( crypto_worth ), "CH_ATM_Font_ATMScreen_Size35", x_pos + 405, y_pos + 65, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
						draw.SimpleText( CH_CryptoCurrencies.CurrencyAbbreviation(), "CH_CryptoCurrency_Font_Size6", x_pos + 432.5, y_pos + 70, CH_CryptoCurrencies.Colors.WhiteAlpha2, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
					end
					
					-- Change pages
					-- Left Page Button
					if self.PAGES_CurrentPage > 1 then
						local hovering = imgui.IsHovering( 40, 550, 50, 50 )
						
						surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
						surface.SetMaterial( mat_page_back )
						surface.DrawTexturedRect( 40, 550, 50, 50 )
						
						if hovering and pressing then
							self.PAGES_CurrentPage = self.PAGES_CurrentPage - 1
						end
					end
					
					-- Right Page Button
					if self.PAGES_AmountOfPages > self.PAGES_CurrentPage then
						local hovering = imgui.IsHovering( 970, 550, 50, 50 )
						
						surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
						surface.SetMaterial( mat_page_next )
						surface.DrawTexturedRect( 970, 550, 50, 50 )
						
						if hovering and pressing then
							self.PAGES_CurrentPage = self.PAGES_CurrentPage + 1
						end
					end
				end
			else -- Empty portfolio
				-- Draw icon
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_no_cryptos )
				surface.DrawTexturedRect( sw / 2 - 128, 250 - 128, 256, 256 )

				-- Browse Cryptocurrencies Button
				local hovering = imgui.IsHovering( sw / 2 - 400, 440, 800, 100 )
				
				if hovering and pressing then
					draw.RoundedBox( 8, sw / 2 - 400, 440, 800, 100, CH_ATM.Colors.Green )
					
					-- Draw new 3D2D
					self:CRYPTO_BrowseCurrencies()
				elseif hovering then
					draw.RoundedBox( 8, sw / 2 - 400, 440, 800, 100, CH_ATM.Colors.GMSBlue )
				else
					draw.RoundedBox( 8, sw / 2 - 400, 440, 800, 100, CH_ATM.Colors.DarkGray )
				end
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_cryptos )
				surface.DrawTexturedRect( 150, 450, 80, 80 )
				
				draw.SimpleText( CH_ATM.LangString( "Browse Cryptocurrencies" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 490, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Show bank home screen
				self:CRYPTO_HomeScreen()
				
				-- Reset page
				self.PAGES_CurrentPage = 1
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Show select send crypto page
--]]
function ENT:CRYPTO_SelectSendCrypto()
	local ply = LocalPlayer()

	-- Setup the amount of pages
	local amount_of_cryptos = 0
	for k, crypto in pairs( CH_CryptoCurrencies.CryptosCL ) do
		local prefix = crypto.Currency
		local player_owns = math.Round( ply.CH_CryptoCurrencies_Wallet[ prefix ].Amount, 7 )
		
		if CH_CryptoCurrencies.CryptoIconsCL[ prefix ] and player_owns > 0 then
			amount_of_cryptos = amount_of_cryptos + 1
		end
	end

	self.PAGES_AmountOfPages = math.ceil( amount_of_cryptos / 8 )
	
	for i = 1, self.PAGES_AmountOfPages do
		-- Create the table for page
		self.PAGES_PageContent[ i ] = {}
	end
	
	-- Insert entries into their respective page
	local count = 0
	for k, crypto in ipairs( CH_CryptoCurrencies.CryptosCL ) do
		local prefix = crypto.Currency
		local player_owns = math.Round( ply.CH_CryptoCurrencies_Wallet[ prefix ].Amount, 7 )
		
		if CH_CryptoCurrencies.CryptoIconsCL[ prefix ] and player_owns > 0 then
			count = count + 1
			
			local page = math.ceil( count / 8 )
			
			table.insert( self.PAGES_PageContent[ page ], crypto )
		end
	end
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()
			
			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Send Crypto" ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			if self.PAGES_AmountOfPages > 0 then
				draw.SimpleText( CH_CryptoCurrencies.LangString( "Select Crypto" ) .." (".. self.PAGES_CurrentPage .. "/".. self.PAGES_AmountOfPages ..")", "CH_ATM_Font_ATMScreen_Size45", sw / 2, 105, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

				-- Pages of crypto
				if self.PAGES_PageContent[ self.PAGES_CurrentPage ] then
					for k, crypto in pairs( self.PAGES_PageContent[ self.PAGES_CurrentPage ] ) do
						local x_pos = -195
						local y_pos = 160

						local x_offset = 0
						if k <= 4 then
							x_offset = k * 245
							x_pos = x_pos + x_offset
						elseif k <= 8 then
							x_offset = ( k - 4 ) * 245
							x_pos = x_pos + x_offset
							
							y_pos = 330
						end
						
						local hovering = imgui.IsHovering( x_pos, y_pos, 220, 150 )
						
						-- Crypto BG
						if hovering and pressing then
							draw.RoundedBox( 8, x_pos, y_pos, 220, 150, CH_ATM.Colors.Green )
							
							self:CRYPTO_SendCrypto( table.KeyFromValue( CH_CryptoCurrencies.CryptosCL, crypto ) )
						elseif hovering then
							draw.RoundedBox( 8, x_pos, y_pos, 220, 150, CH_ATM.Colors.GMSBlue )
						else
							draw.RoundedBox( 8, x_pos, y_pos, 220, 150, CH_ATM.Colors.DarkGray )
						end
						
						-- Crypto Icon
						surface.SetDrawColor( color_white )
						surface.SetMaterial( crypto.Icon )
						surface.DrawTexturedRect( x_pos + 60, y_pos + 5, 110, 110 )
						
						-- Crypto Name and Owned Amount
						draw.SimpleText( crypto.Name, "CH_ATM_Font_ATMScreen_Size35", x_pos + 112.5, y_pos + 130, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
					end
					
					-- Change pages
					-- Left Page Button
					if self.PAGES_CurrentPage > 1 then
						local hovering = imgui.IsHovering( 40, 485, 50, 50 )
						
						surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
						surface.SetMaterial( mat_page_back )
						surface.DrawTexturedRect( 40, 485, 50, 50 )
						
						if hovering and pressing then
							self.PAGES_CurrentPage = self.PAGES_CurrentPage - 1
						end
					end
					
					-- Right Page Button
					if self.PAGES_AmountOfPages > self.PAGES_CurrentPage then
						local hovering = imgui.IsHovering( 970, 485, 50, 50 )
						
						surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
						surface.SetMaterial( mat_page_next )
						surface.DrawTexturedRect( 970, 485, 50, 50 )
						
						if hovering and pressing then
							self.PAGES_CurrentPage = self.PAGES_CurrentPage + 1
						end
					end
				end
			else -- Empty portfolio
				-- Draw icon
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_no_cryptos )
				surface.DrawTexturedRect( sw / 2 - 128, 250 - 128, 256, 256 )

				-- Browse Cryptocurrencies Button
				local hovering = imgui.IsHovering( sw / 2 - 400, 440, 800, 100 )
				
				if hovering and pressing then
					draw.RoundedBox( 8, sw / 2 - 400, 440, 800, 100, CH_ATM.Colors.Green )
					
					-- Draw new 3D2D
					self:CRYPTO_BrowseCurrencies()
				elseif hovering then
					draw.RoundedBox( 8, sw / 2 - 400, 440, 800, 100, CH_ATM.Colors.GMSBlue )
				else
					draw.RoundedBox( 8, sw / 2 - 400, 440, 800, 100, CH_ATM.Colors.DarkGray )
				end
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_cryptos )
				surface.DrawTexturedRect( 150, 450, 80, 80 )
				
				draw.SimpleText( CH_ATM.LangString( "Browse Cryptocurrencies" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 490, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Show bank home screen
				self:CRYPTO_HomeScreen()
				
				-- Reset page
				self.PAGES_CurrentPage = 1
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Show send crypto page
--]]
function ENT:CRYPTO_SendCrypto( crypto_to_send )
	local ply = LocalPlayer()
	
	self:GENERAL_KeyPad( "send_crypto" )
	self.CRYPTO_Index = crypto_to_send
	
	local ply = LocalPlayer()
	
	-- Setup the amount of pages (exclude ourself from the calculation)
	local amount_of_players = #player.GetAll() - 1
	self.PAGES_AmountOfPages = math.ceil( amount_of_players / 15 )
	
	for i = 1, self.PAGES_AmountOfPages do
		-- Create the table for page
		self.PAGES_PageContent[ i ] = {}
	end
	
	-- Insert entries into their respective page (exclude ourself again)
	local count = 0
	for k, v in ipairs( player.GetAll() ) do
		if ply != v then
			count = count + 1
			
			local page = math.ceil( count / 15 )
			
			table.insert( self.PAGES_PageContent[ page ], v )
		end
	end
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			local crypto_prefix_to_send = CH_CryptoCurrencies.CryptosCL[ self.CRYPTO_Index ].Currency
			
			local selected_total_balance = string.format( "%f", ply.CH_CryptoCurrencies_Wallet[ crypto_prefix_to_send ].Amount )
			draw.SimpleText( CH_ATM.LangString( "Total Balance" ) ..": ".. selected_total_balance .." ".. crypto_prefix_to_send, "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

			if not self.PAGES_SelectedOption then
				draw.SimpleText( CH_ATM.LangString( "Select Player" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 105, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_ATM.LangString( "Sending" ) .." ".. self.CurrentInput .." ".. crypto_prefix_to_send .." ".. CH_ATM.LangString( "to" ) .." ".. self.PAGES_SelectedOption:Nick(), "CH_ATM_Font_ATMScreen_Size45", sw / 2, 105, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			-- Pages of players
			if self.PAGES_PageContent[ self.PAGES_CurrentPage ] then

				for k, button in pairs( self.PAGES_PageContent[ self.PAGES_CurrentPage ] ) do
					local x_pos = -295
					local y_pos = 160

					local y_offset = 0
					if k <= 3 then
						y_offset = k * 335
						x_pos = x_pos + y_offset
					elseif k <= 6 then
						y_offset = ( k - 3 ) * 335
						x_pos = x_pos + y_offset
						
						y_pos = 225
					elseif k <= 9 then
						y_offset = ( k - 6 ) * 335
						x_pos = x_pos + y_offset
						
						y_pos = 290
					elseif k <= 12 then
						y_offset = ( k - 9 ) * 335
						x_pos = x_pos + y_offset
						
						y_pos = 355
					elseif k <= 15 then
						y_offset = ( k - 12 ) * 335
						x_pos = x_pos + y_offset
						
						y_pos = 420
					end
					
					local hovering = imgui.IsHovering( x_pos, y_pos, 300, 50 )
					
					if hovering and pressing and IsValid( button ) then
						self.PAGES_SelectedOption = button
					elseif hovering then
						draw.RoundedBox( 8, x_pos, y_pos, 300, 50, CH_ATM.Colors.GMSBlue )
					else
						draw.RoundedBox( 8, x_pos, y_pos, 300, 50, CH_ATM.Colors.DarkGray )
					end
					
					local ply_name = ""
					if IsValid( button ) then
						ply_name = button:Nick()
					else
						ply_name = CH_ATM.LangString( "Disconnected Player" )
					end
					if string.len( ply_name ) > 18 then
						ply_name = string.Left( ply_name, 18 ) ..".."
					end
					draw.SimpleText( ply_name, "CH_ATM_Font_ATMScreen_Size35", x_pos + 20, y_pos + 25, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
				end
				
				-- Change pages
				-- Left Page Button
				if self.PAGES_CurrentPage > 1 then
					local hovering = imgui.IsHovering( 40, 475, 50, 50 )
					
					surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
					surface.SetMaterial( mat_page_back )
					surface.DrawTexturedRect( 40, 475, 50, 50 )
					
					if hovering and pressing then
						self.PAGES_CurrentPage = self.PAGES_CurrentPage - 1
					end
				end
				
				-- Right Page Button
				if self.PAGES_AmountOfPages > self.PAGES_CurrentPage then
					local hovering = imgui.IsHovering( 970, 475, 50, 50 )
					
					surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
					surface.SetMaterial( mat_page_next )
					surface.DrawTexturedRect( 970, 475, 50, 50 )
					
					if hovering and pressing then
						self.PAGES_CurrentPage = self.PAGES_CurrentPage + 1
					end
				end
			end

			-- Fake text entry field
			self.CRYPTO_AmountToSend = tonumber( self.CurrentInput ) or 0
			draw.RoundedBox( 8, sw / 2 - 300, 510, 600, 80, color_white )
			
			if #self.CurrentInput <= 0 then
				draw.SimpleText( CH_ATM.LangString( "Enter the amount using the keypad" ), "CH_ATM_Font_ATMScreen_Size40", 245, 550, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( self.CurrentInput, "CH_ATM_Font_ATMScreen_Size40", 245, 550, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Clear the keypad input
				self:KEYPAD_ResetInput()
				
				-- Show bank home screen
				self:CRYPTO_SelectSendCrypto()
				
				-- Remove keypad 3d2d
				self:KEYPAD_Clear3D2D()
				
				-- Reset page
				self.PAGES_CurrentPage = 1
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Show crypto trading history
--]]
function ENT:CRYPTO_TransactionHistory()
	local ply = LocalPlayer()
	
	-- Setup the amount of pages
	local amount_of_transactions = #ply.CH_CryptoCurrencies_Transactions
	self.PAGES_AmountOfPages = math.ceil( amount_of_transactions / 8 )
	
	for i = 1, self.PAGES_AmountOfPages do
		-- Create the table for page
		self.PAGES_PageContent[ i ] = {}
	end
	
	-- Insert entries into their respective page
	local count = 0
	for k, trans in ipairs( ply.CH_CryptoCurrencies_Transactions ) do
		count = count + 1
		
		local page = math.ceil( count / 8 )
		
		table.insert( self.PAGES_PageContent[ page ], trans )
	end
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Total Balance" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetMoneyBankAccount( ply ) ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

			draw.SimpleText( CH_ATM.LangString( "Transaction History" ) .." (".. self.PAGES_CurrentPage .. "/".. self.PAGES_AmountOfPages ..")", "CH_ATM_Font_ATMScreen_Size45", sw / 2, 105, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			-- Pages of transactions
			if self.PAGES_PageContent[ self.PAGES_CurrentPage ] then
				for k, trans in pairs( self.PAGES_PageContent[ self.PAGES_CurrentPage ] ) do
					local x_pos = -450
						local y_pos = 160

						local x_offset = 0
						if k <= 2 then
							x_offset = k * 500
							x_pos = x_pos + x_offset
						elseif k <= 4 then
							x_offset = ( k - 2 ) * 500
							x_pos = x_pos + x_offset
							
							y_pos = 260
						elseif k <= 6 then
							x_offset = ( k - 4 ) * 500
							x_pos = x_pos + x_offset
							
							y_pos = 360
						elseif k <= 8 then
							x_offset = ( k - 6 ) * 500
							x_pos = x_pos + x_offset
							
							y_pos = 460
						end
					
					-- BG
					draw.RoundedBox( 8, x_pos, y_pos, 450, 90, CH_ATM.Colors.DarkGray )
					
					
					-- Icon
					surface.SetDrawColor( color_white )
					if trans.Action == "buy" then
						surface.SetMaterial( buy_icon )
					else
						surface.SetMaterial( sold_icon )
					end
					surface.DrawTexturedRect( x_pos + 100, y_pos + 11, 28, 28 )
					
					-- Buy/Sold Icon
					surface.SetDrawColor( color_white )
					surface.SetMaterial( CH_CryptoCurrencies.CryptoIconsCL[ trans.Crypto ].Icon )
					surface.DrawTexturedRect( x_pos + 5, y_pos + 5, 80, 80 )
					
					-- Vertical seperator line
					surface.SetDrawColor( CH_ATM.Colors.WhiteAlpha )
					surface.DrawRect( x_pos + 90, y_pos + 10, 2.5, 70 )
					
					-- Vertical seperator line END
					surface.SetDrawColor( CH_ATM.Colors.WhiteAlpha )
					surface.DrawRect( x_pos + 440, y_pos + 10, 2.5, 70 )
					
					-- Horizontal seperator line
					surface.SetDrawColor( CH_ATM.Colors.WhiteAlpha )
					surface.DrawRect( x_pos + 97.5, y_pos + 45, 337.5, 2.5 )
					
					-- Name of coin
					draw.SimpleText( trans.Name, "CH_ATM_Font_ATMScreen_Size35", x_pos + 135, y_pos + 25, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					
					-- Cost or Earned
					if trans.Action == "buy" then
						draw.SimpleText( "-".. CH_CryptoCurrencies.FormatMoney( trans.Price ), "CH_ATM_Font_ATMScreen_Size35", x_pos + 432, y_pos + 25, CH_CryptoCurrencies.Colors.Red, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
					else
						draw.SimpleText( "+".. CH_CryptoCurrencies.FormatMoney( trans.Price ), "CH_ATM_Font_ATMScreen_Size35", x_pos + 432, y_pos + 25, CH_CryptoCurrencies.Colors.Green, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
					end
					
					surface.SetFont( "CH_ATM_Font_ATMScreen_Size35" )
					local x, y = surface.GetTextSize( string.format( "%f", trans.Amount ) )
					
					draw.SimpleText( string.format( "%f", trans.Amount ), "CH_ATM_Font_ATMScreen_Size35", x_pos + 97.5, y_pos + 65, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					draw.SimpleText( trans.Crypto, "CH_ATM_Font_ATMScreen_Size20", x_pos + 97.5 + ( x + 3 ), y_pos + 70, CH_ATM.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					
					
					draw.SimpleText( trans.TimeStamp, "CH_ATM_Font_ATMScreen_Size20", x_pos + 432, y_pos + 70, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
					
				end
				
				-- Change pages
				-- Left Page Button
				if self.PAGES_CurrentPage > 1 then
					local hovering = imgui.IsHovering( 40, 550, 50, 50 )
					
					surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
					surface.SetMaterial( mat_page_back )
					surface.DrawTexturedRect( 40, 550, 50, 50 )
					
					if hovering and pressing then
						self.PAGES_CurrentPage = self.PAGES_CurrentPage - 1
					end
				end
				
				-- Right Page Button
				if self.PAGES_AmountOfPages > self.PAGES_CurrentPage then
					local hovering = imgui.IsHovering( 970, 550, 50, 50 )
					
					surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
					surface.SetMaterial( mat_page_next )
					surface.DrawTexturedRect( 970, 550, 50, 50 )
					
					if hovering and pressing then
						self.PAGES_CurrentPage = self.PAGES_CurrentPage + 1
					end
				end
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Show bank home screen
				self:CRYPTO_HomeScreen()
				
				-- Reset page
				self.PAGES_CurrentPage = 1
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end






--[[
	Home for regular bank account
--]]
function ENT:BANK_HomeScreen()
	local ply = LocalPlayer()
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Total Balance" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetMoneyBankAccount( ply ) ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			
			-- Cache some button sizes
			local btn_x = sw / 2 - 400
			local btn_w = 800
			local btn_h = 100
			
			
			
			
			-- Deposit Button
			local hovering = imgui.IsHovering( btn_x, 100, btn_w, btn_h )
			
			if hovering and pressing then
				draw.RoundedBox( 8, btn_x, 100, btn_w, btn_h, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				self:BANK_DepositBank()
			elseif hovering then
				draw.RoundedBox( 8, btn_x, 100, btn_w, btn_h, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, btn_x, 100, btn_w, btn_h, CH_ATM.Colors.DarkGray )
			end
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_deposit )
			surface.DrawTexturedRect( 150, 110, 80, 80 )
			
			draw.SimpleText( CH_ATM.LangString( "Deposit" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 150, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			
			
			-- Portfolio Button
			local hovering = imgui.IsHovering( btn_x, 230, btn_w, btn_h )
			
			if hovering and pressing then
				draw.RoundedBox( 8, btn_x, 230, btn_w, btn_h, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				self:BANK_WithdrawBank()
			elseif hovering then
				draw.RoundedBox( 8, btn_x, 230, btn_w, btn_h, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, btn_x, 230, btn_w, btn_h, CH_ATM.Colors.DarkGray )
			end
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_withdraw )
			surface.DrawTexturedRect( 150, 240, 80, 80 )
			
			draw.SimpleText( CH_ATM.LangString( "Withdraw" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 280, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			
			
			-- Send money button
			local hovering = imgui.IsHovering( btn_x, 350, btn_w, btn_h )
			
			if hovering and pressing then
				draw.RoundedBox( 8, btn_x, 360, btn_w, btn_h, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				self:BANK_TransferMoneyOptions()
			elseif hovering then
				draw.RoundedBox( 8, btn_x, 360, btn_w, btn_h, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, btn_x, 360, btn_w, btn_h, CH_ATM.Colors.DarkGray )
			end
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_send_money )
			surface.DrawTexturedRect( 150, 370, 80, 80 )
			
			draw.SimpleText( CH_ATM.LangString( "Transfer" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 410, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			
			
			-- History Button
			local hovering = imgui.IsHovering( btn_x, 490, btn_w, btn_h )
			
			if hovering and pressing then
				draw.RoundedBox( 8, btn_x, 490, btn_w, btn_h, CH_ATM.Colors.Green )
			
				-- Draw new 3D2D
				self:BANK_TransactionHistory()
			elseif hovering then
				draw.RoundedBox( 8, btn_x, 490, btn_w, btn_h, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, btn_x, 490, btn_w, btn_h, CH_ATM.Colors.DarkGray )
			end
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_bank_history )
			surface.DrawTexturedRect( 150, 500, 80, 80 )
			
			draw.SimpleText( CH_ATM.LangString( "Transaction History" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 540, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			
			-- Settings Button
			local hovering = imgui.IsHovering( 970, 570, 64, 64 )
			
			surface.SetDrawColor( hovering and CH_ATM.Colors.GMSBlue or color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_settings )
			surface.DrawTexturedRect( 970, 570, 64, 64 )
			
			if hovering and pressing then
				self:GENERAL_UserSettings()
			end
			
			-- Back Button (if crypto is enabled ONLY)
			if CH_CryptoCurrencies then
				local hovering = imgui.IsHovering( 20, 605, 32, 32 )
				
				surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
				surface.SetMaterial( mat_back )
				surface.DrawTexturedRect( 20, 605, 32, 32 )
				
				if hovering and pressing then
					self:GENERAL_HomePortal()
				end
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Deposit cash in the bank
--]]
function ENT:BANK_DepositBank()
	self:GENERAL_KeyPad( "deposit" )
	
	local ply = LocalPlayer()
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Total Balance" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetMoneyBankAccount( ply ) ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			draw.SimpleText( CH_ATM.LangString( "Deposit" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 175, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			-- Fake text entry field
			draw.RoundedBox( 8, sw / 2 - 300, sh / 2 - 40, 600, 80, color_white )
			
			if #self.CurrentInput <= 0 then
				draw.SimpleText( CH_ATM.LangString( "Enter the amount using the keypad" ), "CH_ATM_Font_ATMScreen_Size40", 245, 330, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_ATM.FormatMoney( tonumber( self.CurrentInput ) ), "CH_ATM_Font_ATMScreen_Size40", 245, 330, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Clear the keypad input
				self:KEYPAD_ResetInput()
				
				-- Show bank home screen
				self:BANK_HomeScreen()
				
				-- Remove keypad 3d2d
				self:KEYPAD_Clear3D2D()
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Deposit cash in the bank
--]]
function ENT:BANK_WithdrawBank()
	self:GENERAL_KeyPad( "withdraw" )
	
	local ply = LocalPlayer()
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Total Balance" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetMoneyBankAccount( ply ) ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			draw.SimpleText( CH_ATM.LangString( "Withdraw" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 175, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			-- Fake text entry field
			draw.RoundedBox( 8, sw / 2 - 300, sh / 2 - 40, 600, 80, color_white )
			
			if #self.CurrentInput <= 0 then
				draw.SimpleText( CH_ATM.LangString( "Enter the amount using the keypad" ), "CH_ATM_Font_ATMScreen_Size40", 245, 330, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_ATM.FormatMoney( tonumber( self.CurrentInput ) ), "CH_ATM_Font_ATMScreen_Size40", 245, 330, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Clear the keypad input
				self:KEYPAD_ResetInput()
				
				-- Show bank home screen
				self:BANK_HomeScreen()
				
				-- Remove keypad 3d2d
				self:KEYPAD_Clear3D2D()
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

function ENT:BANK_TransferMoneyOptions()
	local ply = LocalPlayer()
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Total Balance" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetMoneyBankAccount( ply ) ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			
			-- Cache some button sizes
			local btn_x = sw / 2 - 400
			local btn_w = 800
			local btn_h = 100
			
			
			
			
			-- Online Player Button
			local hovering = imgui.IsHovering( btn_x, 100, btn_w, btn_h )
			
			if hovering and pressing then
				draw.RoundedBox( 8, btn_x, 100, btn_w, btn_h, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				self:BANK_TransferMoneyOnline()
			elseif hovering then
				draw.RoundedBox( 8, btn_x, 100, btn_w, btn_h, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, btn_x, 100, btn_w, btn_h, CH_ATM.Colors.DarkGray )
			end
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_transfer_online )
			surface.DrawTexturedRect( 150, 110, 80, 80 )
			
			draw.SimpleText( CH_ATM.LangString( "Online Player" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 150, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			
			
			-- Offline Player Button
			local hovering = imgui.IsHovering( btn_x, 230, btn_w, btn_h )
			
			if hovering and pressing then
				draw.RoundedBox( 8, btn_x, 230, btn_w, btn_h, CH_ATM.Colors.Green )
				
				-- Draw new 3D2D
				self:BANK_TransferMoneyOfflineSID64()
			elseif hovering then
				draw.RoundedBox( 8, btn_x, 230, btn_w, btn_h, CH_ATM.Colors.GMSBlue )
			else
				draw.RoundedBox( 8, btn_x, 230, btn_w, btn_h, CH_ATM.Colors.DarkGray )
			end
			
			surface.SetDrawColor( color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_transfer_offline )
			surface.DrawTexturedRect( 150, 240, 80, 80 )
			
			draw.SimpleText( CH_ATM.LangString( "Offline Player" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 280, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

			-- Settings Button
			local hovering = imgui.IsHovering( 970, 570, 64, 64 )
			
			surface.SetDrawColor( hovering and CH_ATM.Colors.GMSBlue or color_white )
			surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_settings )
			surface.DrawTexturedRect( 970, 570, 64, 64 )
			
			if hovering and pressing then
				self:GENERAL_UserSettings()
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Show bank home screen
				self:BANK_HomeScreen()
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Transfer money to a friend
--]]
function ENT:BANK_TransferMoneyOnline()
	self:GENERAL_KeyPad( "transfer" )
	
	local ply = LocalPlayer()
	
	-- Setup the amount of pages (exclude ourself from the calculation)
	local amount_of_players = #player.GetAll() - 1
	self.PAGES_AmountOfPages = math.ceil( amount_of_players / 15 )
	
	for i = 1, self.PAGES_AmountOfPages do
		-- Create the table for page
		self.PAGES_PageContent[ i ] = {}
	end
	
	-- Insert entries into their respective page (exclude ourself again)
	local count = 0
	for k, v in ipairs( player.GetAll() ) do
		if ply != v then
			count = count + 1
			
			local page = math.ceil( count / 15 )
			
			table.insert( self.PAGES_PageContent[ page ], v )
		end
	end

	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Total Balance" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetMoneyBankAccount( ply ) ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			if not self.PAGES_SelectedOption then
				draw.SimpleText( CH_ATM.LangString( "Select Player" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 105, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_ATM.LangString( "Sending" ) .." ".. CH_ATM.FormatMoney( tonumber( self.CurrentInput ) ) .." ".. CH_ATM.LangString( "to" ) .." ".. self.PAGES_SelectedOption:Nick(), "CH_ATM_Font_ATMScreen_Size45", sw / 2, 105, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			end
			
			-- Pages of players
			if self.PAGES_PageContent[ self.PAGES_CurrentPage ] then

				for k, button in pairs( self.PAGES_PageContent[ self.PAGES_CurrentPage ] ) do
					local x_pos = -295
					local y_pos = 160

					local y_offset = 0
					if k <= 3 then
						y_offset = k * 335
						x_pos = x_pos + y_offset
					elseif k <= 6 then
						y_offset = ( k - 3 ) * 335
						x_pos = x_pos + y_offset
						
						y_pos = 225
					elseif k <= 9 then
						y_offset = ( k - 6 ) * 335
						x_pos = x_pos + y_offset
						
						y_pos = 290
					elseif k <= 12 then
						y_offset = ( k - 9 ) * 335
						x_pos = x_pos + y_offset
						
						y_pos = 355
					elseif k <= 15 then
						y_offset = ( k - 12 ) * 335
						x_pos = x_pos + y_offset
						
						y_pos = 420
					end
					
					local hovering = imgui.IsHovering( x_pos, y_pos, 300, 50 )
					
					if hovering and pressing and IsValid( button ) then
						self.PAGES_SelectedOption = button
					elseif hovering then
						draw.RoundedBox( 8, x_pos, y_pos, 300, 50, CH_ATM.Colors.GMSBlue )
					else
						draw.RoundedBox( 8, x_pos, y_pos, 300, 50, CH_ATM.Colors.DarkGray )
					end
					
					local ply_name = ""
					if IsValid( button ) then
						ply_name = button:Nick()
					else
						ply_name = CH_ATM.LangString( "Disconnected Player" )
					end
					if string.len( ply_name ) > 18 then
						ply_name = string.Left( ply_name, 18 ) ..".."
					end
					draw.SimpleText( ply_name, "CH_ATM_Font_ATMScreen_Size35", x_pos + 20, y_pos + 25, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
				end
				
				-- Change pages
				-- Left Page Button
				if self.PAGES_CurrentPage > 1 then
					local hovering = imgui.IsHovering( 40, 475, 50, 50 )
					
					surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
					surface.SetMaterial( mat_page_back )
					surface.DrawTexturedRect( 40, 475, 50, 50 )
					
					if hovering and pressing then
						self.PAGES_CurrentPage = self.PAGES_CurrentPage - 1
					end
				end
				
				-- Right Page Button
				if self.PAGES_AmountOfPages > self.PAGES_CurrentPage then
					local hovering = imgui.IsHovering( 970, 475, 50, 50 )
					
					surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
					surface.SetMaterial( mat_page_next )
					surface.DrawTexturedRect( 970, 475, 50, 50 )
					
					if hovering and pressing then
						self.PAGES_CurrentPage = self.PAGES_CurrentPage + 1
					end
				end
			end
			
			-- Fake text entry field
			draw.RoundedBox( 8, sw / 2 - 300, 510, 600, 80, color_white )
			
			if #self.CurrentInput <= 0 then
				draw.SimpleText( CH_ATM.LangString( "Enter the amount using the keypad" ), "CH_ATM_Font_ATMScreen_Size40", 245, 550, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_ATM.FormatMoney( tonumber( self.CurrentInput ) ), "CH_ATM_Font_ATMScreen_Size40", 245, 550, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Clear the keypad input
				self:KEYPAD_ResetInput()
				
				-- Show bank home screen
				self:BANK_TransferMoneyOptions()
				
				-- Remove keypad 3d2d
				self:KEYPAD_Clear3D2D()
				
				-- Reset page
				self.PAGES_CurrentPage = 1
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Transfer money to a steamid64
--]]
function ENT:BANK_TransferMoneyOfflineSID64()
	self:GENERAL_KeyPad( "transfer_offline_sid64" )
	
	local ply = LocalPlayer()

	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Total Balance" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetMoneyBankAccount( ply ) ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			draw.SimpleText( CH_ATM.LangString( "Enter SteamID64 of receiving account" ), "CH_ATM_Font_ATMScreen_Size55", sw / 2, 105, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	
			-- Fake text entry field
			draw.RoundedBox( 8, sw / 2 - 300, 510, 600, 80, color_white )
			
			if #self.CurrentInput <= 0 then
				draw.SimpleText( CH_ATM.LangString( "Enter the SteamID64 using the keypad" ), "CH_ATM_Font_ATMScreen_Size40", 245, 550, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( self.CurrentInput, "CH_ATM_Font_ATMScreen_Size40", 245, 550, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Clear the keypad input
				self:KEYPAD_ResetInput()
				
				-- Show bank home screen
				self:BANK_TransferMoneyOptions()
				
				-- Remove keypad 3d2d
				self:KEYPAD_Clear3D2D()
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Transfer money to a steamid64
--]]
function ENT:BANK_TransferMoneyOffline( sid64 )
	self:GENERAL_KeyPad( "transfer_offline" )
	
	self.TRANSFER_OfflineSID64 = sid64
	
	local ply = LocalPlayer()

	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Total Balance" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetMoneyBankAccount( ply ) ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			draw.SimpleText( CH_ATM.LangString( "Transfering money to SteamID64" ) ..":", "CH_ATM_Font_ATMScreen_Size55", sw / 2, 105, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			draw.SimpleText( self.TRANSFER_OfflineSID64, "CH_ATM_Font_ATMScreen_Size55", sw / 2, 165, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
	
			-- Fake text entry field
			draw.RoundedBox( 8, sw / 2 - 300, 510, 600, 80, color_white )
			
			if #self.CurrentInput <= 0 then
				draw.SimpleText( CH_ATM.LangString( "Enter the amount using the keypad" ), "CH_ATM_Font_ATMScreen_Size40", 245, 550, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			else
				draw.SimpleText( CH_ATM.FormatMoney( tonumber( self.CurrentInput ) ), "CH_ATM_Font_ATMScreen_Size40", 245, 550, color_black, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Clear the keypad input
				self:KEYPAD_ResetInput()
				
				-- Show bank home screen
				self:BANK_TransferMoneyOptions()
				
				-- Remove keypad 3d2d
				self:KEYPAD_Clear3D2D()
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Show bank transaction history
--]]
function ENT:BANK_TransactionHistory()
	local ply = LocalPlayer()
	
	-- Incase the table is empty/nil
	ply.CH_ATM_Transactions = ply.CH_ATM_Transactions or {}
	
	-- Setup the amount of pages
	local amount_of_transactions = #ply.CH_ATM_Transactions
	self.PAGES_AmountOfPages = math.ceil( amount_of_transactions / 8 )
	
	for i = 1, self.PAGES_AmountOfPages do
		-- Create the table for page
		self.PAGES_PageContent[ i ] = {}
	end
	
	-- Insert entries into their respective page
	local count = 0
	for k, trans in ipairs( ply.CH_ATM_Transactions ) do
		count = count + 1
		
		local page = math.ceil( count / 8 )
		
		table.insert( self.PAGES_PageContent[ page ], trans )
	end
	
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()

			-- Top
			surface.SetDrawColor( CH_ATM.Colors.DarkGray )
			surface.DrawRect( 0, 0, sw, 50 )
			
			draw.SimpleText( CH_ATM.LangString( "Total Balance" ) ..": ".. CH_ATM.FormatMoney( CH_ATM.GetMoneyBankAccount( ply ) ), "CH_ATM_Font_ATMScreen_Size35", sw / 2, 25, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )

			draw.SimpleText( CH_ATM.LangString( "Transaction History" ) .." (".. self.PAGES_CurrentPage .. "/".. self.PAGES_AmountOfPages ..")", "CH_ATM_Font_ATMScreen_Size45", sw / 2, 105, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			-- Exit button
			if CH_ATM.Config.ActivateWithCreditCard then
				local hovering = imgui.IsHovering( 1020, 10, 32, 32 )
				
				surface.SetDrawColor( color_white )
				surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme( ply ) ].mat_exit_atm )
				surface.DrawTexturedRect( 1020, 10, 32, 32 )
				
				if hovering and pressing then
					-- Start net to pull out card and reset atm
					net.Start( "CH_ATM_Net_PullOutCreditCard" )
						net.WriteEntity( self )
					net.SendToServer()
				end
			end
			
			-- Pages of transactions
			if self.PAGES_PageContent[ self.PAGES_CurrentPage ] then
				for k, trans in pairs( self.PAGES_PageContent[ self.PAGES_CurrentPage ] ) do
					local x_pos = -450
						local y_pos = 160

						local x_offset = 0
						if k <= 2 then
							x_offset = k * 500
							x_pos = x_pos + x_offset
						elseif k <= 4 then
							x_offset = ( k - 2 ) * 500
							x_pos = x_pos + x_offset
							
							y_pos = 260
						elseif k <= 6 then
							x_offset = ( k - 4 ) * 500
							x_pos = x_pos + x_offset
							
							y_pos = 360
						elseif k <= 8 then
							x_offset = ( k - 6 ) * 500
							x_pos = x_pos + x_offset
							
							y_pos = 460
						end
					
					-- BG
					draw.RoundedBox( 8, x_pos, y_pos, 450, 90, CH_ATM.Colors.DarkGray )
					
					
					-- Icon
					surface.SetDrawColor( color_white )
					if trans.Action == "deposit" then
						surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_deposit )
					else
						surface.SetMaterial( CH_ATM.IconTheme.Icons[ CH_ATM.GetIconTheme() ].mat_withdraw )
					end
					surface.DrawTexturedRect( x_pos + 5, y_pos + 5, 80, 80 )
					
					-- Vertical seperator line
					surface.SetDrawColor( CH_ATM.Colors.WhiteAlpha )
					surface.DrawRect( x_pos + 90, y_pos + 10, 2.5, 70 )
					
					-- Vertical seperator line END
					surface.SetDrawColor( CH_ATM.Colors.WhiteAlpha )
					surface.DrawRect( x_pos + 440, y_pos + 10, 2.5, 70 )
					
					-- Horizontal seperator line
					surface.SetDrawColor( CH_ATM.Colors.WhiteAlpha )
					surface.DrawRect( x_pos + 97.5, y_pos + 45, 337.5, 2.5 )
					
					-- Type and amount
					if trans.Action == "deposit" then
						draw.SimpleText( CH_ATM.LangString( "Deposit" ), "CH_ATM_Font_ATMScreen_Size35", x_pos + 97.5, y_pos + 25, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					elseif trans.Action == "withdraw" then
						draw.SimpleText( CH_ATM.LangString( "Withdraw" ), "CH_ATM_Font_ATMScreen_Size35", x_pos + 97.5, y_pos + 25, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					elseif trans.Action == "card" then
						draw.SimpleText( CH_ATM.LangString( "Credit Card" ), "CH_ATM_Font_ATMScreen_Size35", x_pos + 97.5, y_pos + 25, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					elseif trans.Action == "transfer" then
						draw.SimpleText( CH_ATM.LangString( "Transfer" ), "CH_ATM_Font_ATMScreen_Size35", x_pos + 97.5, y_pos + 25, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					end
					
					surface.SetFont( "CH_ATM_Font_ATMScreen_Size35" )
					local x, y = surface.GetTextSize( CH_ATM.FormatMoney( trans.Amount ) )
					
					draw.SimpleText( CH_ATM.FormatMoney( trans.Amount ), "CH_ATM_Font_ATMScreen_Size35", x_pos + 97.5, y_pos + 65, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					draw.SimpleText( CH_ATM.CurrencyAbbreviation(), "CH_ATM_Font_ATMScreen_Size20", x_pos + 97.5 + ( x + 5 ), y_pos + 70, CH_ATM.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					
					draw.SimpleText( trans.TimeStamp, "CH_ATM_Font_ATMScreen_Size20", x_pos + 432, y_pos + 70, color_white, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER )
				end
				
				-- Change pages
				-- Left Page Button
				if self.PAGES_CurrentPage > 1 then
					local hovering = imgui.IsHovering( 40, 550, 50, 50 )
					
					surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
					surface.SetMaterial( mat_page_back )
					surface.DrawTexturedRect( 40, 550, 50, 50 )
					
					if hovering and pressing then
						self.PAGES_CurrentPage = self.PAGES_CurrentPage - 1
					end
				end
				
				-- Right Page Button
				if self.PAGES_AmountOfPages > self.PAGES_CurrentPage then
					local hovering = imgui.IsHovering( 970, 550, 50, 50 )
					
					surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
					surface.SetMaterial( mat_page_next )
					surface.DrawTexturedRect( 970, 550, 50, 50 )
					
					if hovering and pressing then
						self.PAGES_CurrentPage = self.PAGES_CurrentPage + 1
					end
				end
			end
			
			-- Back Button
			local hovering = imgui.IsHovering( 20, 605, 32, 32 )
			
			surface.SetDrawColor( not hovering and color_white or CH_ATM.Colors.GMSBlue )
			surface.SetMaterial( mat_back )
			surface.DrawTexturedRect( 20, 605, 32, 32 )
			
			if hovering and pressing then
				-- Show bank home screen
				self:BANK_HomeScreen()
				
				-- Reset page
				self.PAGES_CurrentPage = 1
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end
--addons/ch_atm/lua/entities/ch_atm/shared.lua:
ENT.Base 					= "base_gmodentity"
ENT.Type 					= "anim"

ENT.PrintName 				= "ATM"
ENT.Author					= "Crap-Head"
ENT.Category 				= "ATM by Crap-Head"

ENT.Spawnable				= true
ENT.AdminSpawnable			= true

ENT.RenderGroup 			= RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance 	= true

function ENT:SetupDataTables()
	self:NetworkVar( "Bool", 0, "IsBeingHacked" )
	self:NetworkVar( "Bool", 1, "IsHackCooldown" )
	self:NetworkVar( "Bool", 2, "IsEmergencyLockdown" )
end
--addons/ch_atm/lua/entities/ch_atm_credit_card/shared.lua:
return gluapack()()
--addons/ch_atm/lua/entities/ch_atm_leaderboard/shared.lua:
ENT.Base 					= "base_gmodentity"
ENT.Type 					= "anim"

ENT.PrintName 				= "Leaderboard"
ENT.Author					= "Crap-Head"
ENT.Category 				= "ATM by Crap-Head"

ENT.Spawnable				= true
ENT.AdminSpawnable			= true

ENT.RenderGroup 			= RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance 	= true
--addons/ch_atm/lua/entities/ch_atm_money/shared.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_cable/cl_init.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_power_generator/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"

ENT.PrintName = "Generator"
ENT.Author = "Crap-Head"
ENT.Category = "Bitminers by Crap-Head"

ENT.Spawnable = true
ENT.AdminSpawnable = true

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()	
	self:NetworkVar( "Int", 0, "Fuel" )
	
	self:NetworkVar( "Bool", 0, "PowerOn" )
	
	self:NetworkVar( "Float", 0, "WattsGenerated" )
	
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end

CH_Bitminers.Config.GeneratorPositions = {
	power_on_one = Vector( 3.744550, 14.736773, 30.798128 ), 
	power_on_two = Vector( 0.682943, 18.729000, 28.514614 ),
	
	power_off_one = Vector( -0.578255, 14.751831, 30.789503 ),
	power_off_two = Vector( -3.672764, 18.798069, 28.475124 )
}
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_rgb/shared.lua:
return gluapack()()
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_ups/cl_init.lua:
include( "shared.lua" )

function ENT:Draw()
	self:DrawModel()	
end		
--addons/ch_bitminers/lua/entities/ch_bitminer_upgrade_ups/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"

ENT.PrintName = "UPS Upgrade"
ENT.Author = "Crap-Head"
ENT.Category = "Bitminers by Crap-Head"

ENT.Spawnable = true
ENT.AdminSpawnable = true

ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance = true

function ENT:SetupDataTables()
	self:NetworkVar( "Entity", 0, "owning_ent" ) -- darkrp owner support
end
--addons/ch_mayor/lua/entities/ch_mayor_leaderboard/shared.lua:
ENT.Base 					= "base_gmodentity"
ENT.Type 					= "anim"

ENT.PrintName				= "Mayor Leaderboard"
ENT.Author					= "Crap-Head"
ENT.Category 				= "Mayor by Crap-Head"

ENT.Spawnable				= true
ENT.AdminSpawnable			= true

ENT.RenderGroup 			= RENDERGROUP_TRANSLUCENT
ENT.AutomaticFrameAdvance 	= true
--addons/ch_mayor/lua/ch_adv_mayor/client/ch_mayor_imgui.lua:
return gluapack()()
--addons/ch_mayor/lua/entities/ch_mayor_vault/cl_init.lua:
return gluapack()()
--addons/ch_mayor/lua/entities/ch_mayor_wanted/cl_init.lua:
include( "shared.lua" )
local imgui = include( "ch_adv_mayor/client/ch_mayor_imgui.lua" )

--[[
	Cache some variables for the main screen
--]]
local sw, sh = 1785, 980
local pos = Vector( 44.6, 0.1, 28.5 )
local ang = Angle( 0, 180, 90 )
local scale = 0.05

local mat_loading = Material( "materials/craphead_scripts/advanced_mayor/gui/entities/loading.png", "noclamp smooth" )
local mat_page_next = Material( "materials/craphead_scripts/advanced_mayor/gui/entities/page_next.png", "noclamp smooth" )
local mat_page_back = Material( "materials/craphead_scripts/advanced_mayor/gui/entities/page_back.png", "noclamp smooth" )

--[[
	Initialize the entity
--]]
function ENT:Initialize()
	-- Pagination stuff
	self.PAGES_CurrentPage = 1
	self.PAGES_AmountOfPages = 0
	self.PAGES_PageContent = {}
	
	-- First screen on init
	self:SCREEN_WantedPlayers()
	
	self.GUI_BigPlayerModel = vgui.Create( "SpawnIcon" )
	self.GUI_BigPlayerModel:SetSize( 710, 700 )
	self.GUI_BigPlayerModel:ParentToHUD()
	self.GUI_BigPlayerModel:SetPaintedManually( true )
end

--[[
	Net message to reload the wanted screen
	Called when a player is wanted/unwanted to reload the list
--]]
net.Receive( "CH_Mayor_Net_ReloadWantedScreen", function( len, ply )
	for k, ent in ipairs( ents.FindByClass( "ch_mayor_wanted" ) ) do
		ent:SCREEN_Refresh()
	end
end )

--[[
	DrawTranslucent function to draw 3d2d UI on ATM
--]]
function ENT:DrawTranslucent()
	self:DrawModel()
	
	if LocalPlayer():GetPos():DistToSqr( self:GetPos() ) >= CH_Mayor.Config.DistanceTo3D2D then
		return
	end
	
	if imgui.Entity3D2D( self, pos, ang, scale ) then
		-- BG
		surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
		surface.DrawRect( 0, 0, sw, sh )
		
		-- Top
		surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
		surface.DrawRect( 0, 0, sw, 150 )
	
		draw.SimpleText( CH_Mayor.LangString( "Wanted Criminals" ), "CH_Mayor_Font_3D2D_110", sw / 2, 70, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
		
		-- Draw icons left and right
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Ent_Exclamation )
		surface.DrawTexturedRect( 50, 30, 90, 90 )
		
		surface.SetDrawColor( color_white )
		surface.SetMaterial( CH_Mayor.Materials.Icon_Ent_Exclamation )
		surface.DrawTexturedRect( 1650, 30, 90, 90 )

		imgui.End3D2D()
	end
	
	-- 3D2D functions
	self.Draw3D2DPage()
end

--[[
	These functions are later used to store only the 3d2d that we're currently rendering for the player
--]]
function ENT.Draw3D2DPage()
end

--[[
	Show all wanted players
--]]
function ENT:SCREEN_WantedPlayers()
	local ply = LocalPlayer()
	
	-- Setup the amount of pages
	self.PAGES_PageContent = {}
	local wanted_players = {}
	
	for k, v in ipairs( player.GetAll() ) do
		if v:isWanted() then
			table.insert( wanted_players, v )
		end
	end
	
	local amount_of_players = #wanted_players
	self.PAGES_AmountOfPages = math.ceil( amount_of_players / 6 )
	
	for i = 1, self.PAGES_AmountOfPages do
		-- Create the table for page
		self.PAGES_PageContent[ i ] = {}
	end
	
	-- Insert entries into their respective page
	local count = 0
	for k, v in ipairs( wanted_players ) do
		count = count + 1
		
		local page = math.ceil( count / 6 )
		
		table.insert( self.PAGES_PageContent[ page ], v )
	end

	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()
			
			-- Pages of players
			if self.PAGES_PageContent[ self.PAGES_CurrentPage ] then
				for k, target in pairs( self.PAGES_PageContent[ self.PAGES_CurrentPage ] ) do
					local x_pos = -810
					local y_pos = 190

					local y_offset = 0
					if k <= 2 then
						y_offset = k * 860
						x_pos = x_pos + y_offset
					elseif k <= 4 then
						y_offset = ( k - 2 ) * 860
						x_pos = x_pos + y_offset
						
						y_pos = 430
					elseif k <= 6 then
						y_offset = ( k - 4 ) * 860
						x_pos = x_pos + y_offset
						
						y_pos = 670
					end
					
					-- Player BG
					surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
					surface.DrawRect( x_pos, y_pos, 830, 210 )
					
					surface.SetDrawColor( color_white )
					surface.SetMaterial( CH_Mayor.Materials.Icon_Ent_Wanted )
					surface.DrawTexturedRect( x_pos + 20, y_pos + 25, 160, 160 )
					
					-- Player Info
					local ply_name = ""
					local wanted_reason = ""
					local ply_job = ""
					local job_clr = color_white
					
					if IsValid( target ) and target:isWanted() and IsValid(target:getWantedReason()) then
						ply_name = target:Nick()
						wanted_reason = DarkRP.textWrap( "Sebep" ..": ".. target:getWantedReason(), "CH_Mayor_Font_3D2D_45", 600 ) or ""
						ply_job = team.GetName( target:Team() )
						job_clr = team.GetColor( target:Team() )
					else
						ply_name = CH_Mayor.LangString( "Disconnected Player" )
						wanted_reason = CH_Mayor.LangString( "Reason" ) ..": ".. CH_Mayor.LangString( "Expired" )
						ply_job = "N/A"
						job_clr = color_white
					end
					if string.len( ply_name ) > 18 then
						ply_name = string.Left( ply_name, 18 ) ..".."
					end
					if string.len( wanted_reason ) > 65 then
						wanted_reason = DarkRP.textWrap( string.Left( CH_Mayor.LangString( "Reason" ) ..": ".. target:getWantedReason(), 65 ) .."..", "CH_Mayor_Font_3D2D_45", 600 )
					end
					
					-- Draw info
					draw.SimpleText( ply_name, "CH_Mayor_Font_3D2D_60", x_pos + 200, y_pos + 40, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					draw.SimpleText( ply_job, "CH_Mayor_Font_3D2D_50", x_pos + 200, y_pos + 82.5, job_clr, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					draw.DrawText( wanted_reason, "CH_Mayor_Font_3D2D_45", x_pos + 200, y_pos + 100, CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT )
					
					-- More Info button
					surface.SetDrawColor( CH_Mayor.Colors.GrayFront )
					surface.DrawRect( x_pos + 580, y_pos + 20, 230, 75 )
					
					draw.SimpleText( CH_Mayor.LangString( "More Info" ), "CH_Mayor_Font_3D2D_50", x_pos + 617.5, y_pos + 53, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER )
					
					local hovering = imgui.IsHovering( x_pos + 580, y_pos + 20, 230, 75 )
					
					if hovering and pressing and IsValid( target ) then
						surface.PlaySound( "buttons/lightswitch2.wav" )
						
						self:SCREEN_ShowWantedPlayer( target )
					elseif hovering then
						surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
						surface.DrawRect( x_pos + 580, y_pos + 20, 2, 75 )
						surface.DrawRect( x_pos + 808, y_pos + 20, 2, 75 )
						surface.DrawRect( x_pos + 580, y_pos + 20, 230, 2 )
						surface.DrawRect( x_pos + 580, y_pos + 93, 230, 2 )
					else
						surface.SetDrawColor( CH_Mayor.Colors.GMSBlue )
						surface.DrawRect( x_pos + 580, y_pos + 20, 2, 10 )
						surface.DrawRect( x_pos + 580, y_pos + 20, 10, 2 )
						surface.DrawRect( x_pos + 580, y_pos + 85, 2, 10 )
						surface.DrawRect( x_pos + 580, y_pos + 93, 10, 2 )
						surface.DrawRect( x_pos + 808, y_pos + 20, 2, 10 )
						surface.DrawRect( x_pos + 800, y_pos + 20, 10, 2 )
						surface.DrawRect( x_pos + 808, y_pos + 85, 2, 10 )
						surface.DrawRect( x_pos + 800, y_pos + 93, 10, 2 )
					end
				end
				
				-- Change pages
				-- Left Page Button
				if self.PAGES_CurrentPage > 1 then
					local hovering = imgui.IsHovering( 50, 890, 80, 80 )
					
					surface.SetDrawColor( not hovering and color_white or CH_Mayor.Colors.GMSBlue )
					surface.SetMaterial( mat_page_back )
					surface.DrawTexturedRect( 50, 890, 80, 80 )
					
					if hovering and pressing then
						surface.PlaySound( "buttons/lightswitch2.wav" )
						
						self.PAGES_CurrentPage = self.PAGES_CurrentPage - 1
					end
				end
				
				-- Right Page Button
				if self.PAGES_AmountOfPages > self.PAGES_CurrentPage then
					local hovering = imgui.IsHovering( 1660, 890, 80, 80 )
					
					surface.SetDrawColor( not hovering and color_white or CH_Mayor.Colors.GMSBlue )
					surface.SetMaterial( mat_page_next )
					surface.DrawTexturedRect( 1660, 890, 80, 80 )
					
					if hovering and pressing then
						surface.PlaySound( "buttons/lightswitch2.wav" )
						
						self.PAGES_CurrentPage = self.PAGES_CurrentPage + 1
					end
				end
			end
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--[[
	Loading screen
--]]
function ENT:SCREEN_Refresh()
	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			-- Draw spinning loading icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( mat_loading )
			surface.DrawTexturedRectRotated( sw / 2, 500, 256, 256, CurTime() * -75 )
			
			draw.SimpleText( CH_Mayor.LangString( "Refreshing page" ), "CH_Mayor_Font_3D2D_70", sw / 2, 700, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			
			imgui.End3D2D()
		end
	end
	
	timer.Simple( 1, function()
		if IsValid( self ) then
			self:SCREEN_WantedPlayers()
		end
	end )
end

--[[
	Initial screen when an ATM is not in use
--]]
function ENT:SCREEN_ShowWantedPlayer( target )
	local ply = LocalPlayer()

	self.Draw3D2DPage = function()
		if imgui.Entity3D2D( self, pos, ang, scale ) then
			local pressing = imgui.IsPressing()
		
			-- Player model
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 50, 190, 700, 750 )
			
			self.GUI_BigPlayerModel:PaintManual()
			self.GUI_BigPlayerModel:SetPos( 70, 210 )
			self.GUI_BigPlayerModel:SetModel( target:GetModel(), target:GetSkin() )
			
			-- Name
			surface.SetDrawColor( CH_Mayor.Colors.GrayBG )
			surface.DrawRect( 790, 190, 950, 750 )
			
			local ply_name = ""
			local wanted_reason = ""
			local ply_job = ""
			local job_clr = color_white
			
			if IsValid( target ) and target:isWanted() then
				ply_name = target:Nick()
				wanted_reason = DarkRP.textWrap( CH_Mayor.LangString( "Reason" ) ..": ".. target:getWantedReason(), "CH_Mayor_Font_3D2D_60", 850 )
				ply_job = team.GetName( target:Team() )
				job_clr = team.GetColor( target:Team() )
			else
				ply_name = CH_Mayor.LangString( "Disconnected Player" )
				wanted_reason = CH_Mayor.LangString( "Reason" ) ..": ".. CH_Mayor.LangString( "Expired" )
				ply_job = "N/A"
				job_clr = color_white
			end
			
			-- Draw info
			draw.SimpleText( ply_name, "CH_Mayor_Font_3D2D_80", 1270, 230, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			draw.SimpleText( ply_job, "CH_Mayor_Font_3D2D_60", 1270, 290, job_clr, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER )
			draw.DrawText( wanted_reason, "CH_Mayor_Font_3D2D_60", 840, 320, CH_Mayor.Colors.WhiteAlpha2, TEXT_ALIGN_LEFT )
			
			-- Back button
			local hovering = imgui.IsHovering( 1635, 845, 80, 80 )
			
			surface.SetDrawColor( not hovering and color_white or CH_Mayor.Colors.GMSBlue )
			surface.SetMaterial( CH_Mayor.Materials.BackIconBig )
			surface.DrawTexturedRect( 1635, 845, 80, 80 )
				
			if hovering and pressing then
				surface.PlaySound( "buttons/lightswitch2.wav" )
				
				-- Show screen
				self:SCREEN_Refresh()
				
				-- Reset page
				self.PAGES_CurrentPage = 1
			end
			
			
			-- Draw curser
			imgui.xCursor( 0, 0, sw, sh )
			
			imgui.End3D2D()
		end
	end
end

--addons/ch_mayor/lua/ch_adv_mayor/client/ch_mayor_imgui.lua:
--[[
IMGUI by Wyozi - https://github.com/wyozi-gmod/imgui

MIT License

Copyright (c) 2019 wyozi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
--]]

local imgui = {}

imgui.skin = {
	background = Color(0, 0, 0, 0),
	backgroundHover = Color(0, 0, 0, 0),

	border = Color(255, 255, 255),
	borderHover = Color(255, 127, 0),
	borderPress = Color(255, 80, 0),

	foreground = Color(255, 255, 255),
	foregroundHover = Color(255, 127, 0),
	foregroundPress = Color(255, 80, 0),
}

local devCvar = GetConVar("developer")
function imgui.IsDeveloperMode()
	return not imgui.DisableDeveloperMode and devCvar:GetInt() > 0
end

local _devMode = false -- cached local variable updated once in a while

function imgui.Hook(name, id, callback)
	local hookUniqifier = debug.getinfo(4).short_src
	hook.Add(name, "IMGUI / " .. id .. " / " .. hookUniqifier, callback)
end

local localPlayer
local gState = {}

local function shouldAcceptInput()
	-- don't process input during non-main renderpass
	if render.GetRenderTarget() ~= nil then
		return false
	end

	-- don't process input if we're doing VGUI stuff (and not in context menu)
	if vgui.CursorVisible() and vgui.GetHoveredPanel() ~= g_ContextMenu then
		return false
	end
	
	if localPlayer and localPlayer.ATM_LastUsed and localPlayer.ATM_LastUsed > CurTime() then
		return false
	end
	
	return true
end

local function apply_screen_cooldown()
	if localPlayer then
		localPlayer.ATM_LastUsed = CurTime() + 0.2
		return
	end
end

imgui.Hook("PreRender", "Input", function()
	-- calculate mouse state
	if shouldAcceptInput() then
		local useBind = input.LookupBinding("+use", true)
		local USE = useBind and input.GetKeyCode(useBind)

		local wasPressing = gState.pressing
		gState.pressing = (USE and input.IsButtonDown(USE))
		gState.pressed = not wasPressing and gState.pressing
		
		if wasPressing then
			apply_screen_cooldown()
		end
	end
end)

hook.Add("NotifyShouldTransmit", "IMGUI / ClearRenderBounds", function(ent, shouldTransmit)
	if shouldTransmit and ent._imguiRBExpansion then
		ent._imguiRBExpansion = nil
	end
end)

local traceResultTable = {}
local traceQueryTable = { output = traceResultTable, filter = {} }
local function isObstructed(eyePos, hitPos, ignoredEntity)
	local q = traceQueryTable
	q.start = eyePos
	q.endpos = hitPos
	q.filter[1] = localPlayer
	q.filter[2] = ignoredEntity

	local tr = util.TraceLine(q)
	if tr.Hit then
		return true, tr.Entity
	else
		return false
	end
end

function imgui.Start3D2D(pos, angles, scale, distanceHide, distanceFadeStart)
	if not IsValid(localPlayer) then
		localPlayer = LocalPlayer()
	end

	if gState.shutdown == true then
		return
	end

	if gState.rendering == true then
		print(
			"[IMGUI] Starting a new IMGUI context when previous one is still rendering" ..
			"Shutting down rendering pipeline to prevent crashes.."
		)
		gState.shutdown = true
		return false
	end

	_devMode = imgui.IsDeveloperMode()

	local eyePos = localPlayer:EyePos()
	local eyePosToPos = pos - eyePos

	-- OPTIMIZATION: Test that we are in front of the UI
	do
		local normal = angles:Up()
		local dot = eyePosToPos:Dot(normal)

		if _devMode then gState._devDot = dot end

		-- since normal is pointing away from surface towards viewer, dot<0 is visible
		if dot >= 0 then
			return false
		end
	end

	-- OPTIMIZATION: Distance based fade/hide
	if distanceHide then
		local distance = eyePosToPos:Length()
		if distance > distanceHide then
			return false
		end

		if _devMode then
			gState._devDist = distance
			gState._devHideDist = distanceHide
		end

		if distanceHide and distanceFadeStart and distance > distanceFadeStart then
			local blend = math.min(math.Remap(distance, distanceFadeStart, distanceHide, 1, 0), 1)
			render.SetBlend(blend)
			surface.SetAlphaMultiplier(blend)
		end
	end

	gState.rendering = true
	gState.pos = pos
	gState.angles = angles
	gState.scale = scale

	cam.Start3D2D(pos, angles, scale)

	-- calculate mousepos
	if not vgui.CursorVisible() or vgui.IsHoveringWorld() then
		local tr = localPlayer:GetEyeTrace()
		local eyepos = tr.StartPos
		local eyenormal

		if vgui.CursorVisible() and vgui.IsHoveringWorld() then
			eyenormal = gui.ScreenToVector(gui.MousePos())
		else
			eyenormal = tr.Normal
		end

		local planeNormal = angles:Up()

		local hitPos = util.IntersectRayWithPlane(eyepos, eyenormal, pos, planeNormal)
		if hitPos then
			local obstructed, obstructer = isObstructed(eyepos, hitPos, gState.entity)
			if obstructed then
				gState.mx = nil
				gState.my = nil

				if _devMode then gState._devInputBlocker = "collision " .. obstructer:GetClass() .. "/" .. obstructer:EntIndex() end
			else
				local diff = pos - hitPos

				-- This cool code is from Willox's keypad CalculateCursorPos
				local x = diff:Dot(-angles:Forward()) / scale
				local y = diff:Dot(-angles:Right()) / scale

				gState.mx = x
				gState.my = y
			end
		else
			gState.mx = nil
			gState.my = nil

			if _devMode then gState._devInputBlocker = "not looking at plane" end
		end
	else
		gState.mx = nil
		gState.my = nil

		if _devMode then gState._devInputBlocker = "not hovering world" end
	end

	if _devMode then gState._renderStarted = SysTime() end

	return true
end

function imgui.Entity3D2D(ent, lpos, lang, scale, ...)
	gState.entity = ent
	local ret = imgui.Start3D2D(ent:LocalToWorld(lpos), ent:LocalToWorldAngles(lang), scale, ...)
	if not ret then
		gState.entity = nil
	end
	return ret
end

local function calculateRenderBounds(x, y, w, h)
	local pos = gState.pos
	local fwd, right = gState.angles:Forward(), gState.angles:Right()
	local scale = gState.scale
	local firstCorner, secondCorner =
		pos + fwd * x * scale + right * y * scale,
		pos + fwd * (x + w) * scale + right * (y + h) * scale

	local minrb, maxrb = Vector(math.huge, math.huge, math.huge), Vector(-math.huge, -math.huge, -math.huge)

	minrb.x = math.min(minrb.x, firstCorner.x, secondCorner.x)
	minrb.y = math.min(minrb.y, firstCorner.y, secondCorner.y)
	minrb.z = math.min(minrb.z, firstCorner.z, secondCorner.z)
	maxrb.x = math.max(maxrb.x, firstCorner.x, secondCorner.x)
	maxrb.y = math.max(maxrb.y, firstCorner.y, secondCorner.y)
	maxrb.z = math.max(maxrb.z, firstCorner.z, secondCorner.z)

	return minrb, maxrb
end

function imgui.ExpandRenderBoundsFromRect(x, y, w, h)
	local ent = gState.entity
	if IsValid(ent) then
		-- make sure we're not applying same expansion twice
		local expansion = ent._imguiRBExpansion
		if expansion then
			local ex, ey, ew, eh = unpack(expansion)
			if ex == x and ey == y and ew == w and eh == h then
				return
			end
		end

		local minrb, maxrb = calculateRenderBounds(x, y, w, h)

		ent:SetRenderBoundsWS(minrb, maxrb)
		if _devMode then
			print("[IMGUI] Updated renderbounds of ", ent, " to ", minrb, "x", maxrb)
		end

		ent._imguiRBExpansion = {x, y, w, h}
	else
		if _devMode then
			print("[IMGUI] Attempted to update renderbounds when entity is not valid!! ", debug.traceback())
		end
	end
end

local devOffset = Vector(0, 0, 30)
local devColours = {
	background = Color(0, 0, 0, 200),
	title = Color(78, 205, 196),
	mouseHovered = Color(0, 255, 0),
	mouseUnhovered = Color(255, 0, 0),
	pos = Color(255, 255, 255),
	distance = Color(200, 200, 200, 200),
	ang = Color(255, 255, 255),
	dot = Color(200, 200, 200, 200),
	angleToEye = Color(200, 200, 200, 200),
	renderTime = Color(255, 255, 255),
	renderBounds = Color(0, 0, 255)
}

local function developerText(str, x, y, clr)
	draw.SimpleText(
		str, "DefaultFixedDropShadow", x, y, clr, TEXT_ALIGN_CENTER, nil
	)
end

local function drawDeveloperInfo()
	local camAng = localPlayer:EyeAngles()
	camAng:RotateAroundAxis(camAng:Right(), 90)
	camAng:RotateAroundAxis(camAng:Up(), -90)

	cam.IgnoreZ(true)
	cam.Start3D2D(gState.pos + devOffset, camAng, 0.15)

	local bgCol = devColours["background"]
	surface.SetDrawColor(bgCol.r, bgCol.g, bgCol.b, bgCol.a)
	surface.DrawRect(-100, 0, 200, 140)

	local titleCol = devColours["title"]
	developerText("imgui developer", 0, 5, titleCol)

	surface.SetDrawColor(titleCol.r, titleCol.g, titleCol.b)
	surface.DrawLine(-50, 16, 50, 16)

	local mx, my = gState.mx, gState.my
	if mx and my then
		developerText(
			string.format("mouse: hovering %d x %d", mx, my),
			0, 20, devColours["mouseHovered"]
		)
	else
		developerText(
			string.format("mouse: %s", gState._devInputBlocker or ""),
			0, 20, devColours["mouseUnhovered"]
		)
	end

	local pos = gState.pos
	developerText(
		string.format("pos: %.2f %.2f %.2f", pos.x, pos.y, pos.z),
		0, 40, devColours["pos"]
	)

	developerText(
		string.format("distance %.2f / %.2f", gState._devDist or 0, gState._devHideDist or 0),
		0, 53, devColours["distance"]
	)

	local ang = gState.angles
	developerText(string.format("ang: %.2f %.2f %.2f", ang.p, ang.y, ang.r), 0, 75, devColours["ang"])
	developerText(string.format("dot %d", gState._devDot or 0), 0, 88, devColours["dot"])

	local angToEye = (pos - localPlayer:EyePos()):Angle()
	angToEye:RotateAroundAxis(ang:Up(), -90)
	angToEye:RotateAroundAxis(ang:Right(), 90)

	developerText(
		string.format("angle to eye (%d,%d,%d)", angToEye.p, angToEye.y, angToEye.r),
		0, 100, devColours["angleToEye"]
	)

	developerText(
		string.format("rendertime avg: %.2fms", (gState._devBenchAveraged or 0) * 1000),
		0, 120, devColours["renderTime"]
	)

	cam.End3D2D()
	cam.IgnoreZ(false)

	local ent = gState.entity
	if IsValid(ent) and ent._imguiRBExpansion then
		local ex, ey, ew, eh = unpack(ent._imguiRBExpansion)
		local minrb, maxrb = calculateRenderBounds(ex, ey, ew, eh)
		render.DrawWireframeBox(vector_origin, angle_zero, minrb, maxrb, devColours["renderBounds"])
	end
end

function imgui.End3D2D()
	if gState then
		if _devMode then
			local renderTook = SysTime() - gState._renderStarted
			gState._devBenchTests = (gState._devBenchTests or 0) + 1
			gState._devBenchTaken = (gState._devBenchTaken or 0) + renderTook
			if gState._devBenchTests == 100 then
				gState._devBenchAveraged = gState._devBenchTaken / 100
				gState._devBenchTests = 0
				gState._devBenchTaken = 0
			end
		end

		gState.rendering = false
		cam.End3D2D()
		render.SetBlend(1)
		surface.SetAlphaMultiplier(1)

		if _devMode then
			drawDeveloperInfo()
		end

		gState.entity = nil
	end
end

function imgui.CursorPos()
	local mx, my = gState.mx, gState.my
	return mx, my
end

function imgui.IsHovering(x, y, w, h)
	local mx, my = gState.mx, gState.my
	return mx and my and mx >= x and mx <= (x + w) and my >= y and my <= (y + h)
end
function imgui.IsPressing()
	return shouldAcceptInput() and gState.pressing
end
function imgui.IsPressed()
	return shouldAcceptInput() and gState.pressed
end

-- String->Bool mappings for whether font has been created
local _createdFonts = {}

-- Cached IMGUIFontNamd->GModFontName
local _imguiFontToGmodFont = {}

local EXCLAMATION_BYTE = string.byte("!")
function imgui.xFont(font, defaultSize)
	-- special font
	if string.byte(font, 1) == EXCLAMATION_BYTE then

		local existingGFont = _imguiFontToGmodFont[font]
		if existingGFont then
			return existingGFont
		end

		-- Font not cached; parse the font
		local name, size = font:match("!([^@]+)@(.+)")
		if size then size = tonumber(size) end

		if not size and defaultSize then
			name = font:match("^!([^@]+)$")
			size = defaultSize
		end

		local fontName = string.format("IMGUI_%s_%d", name, size)
		_imguiFontToGmodFont[font] = fontName
		if not _createdFonts[fontName] then
			surface.CreateFont(fontName, {
				font = name,
				size = size
			})
			_createdFonts[fontName] = true
		end

		return fontName
	end
	return font
end

function imgui.xButton(x, y, w, h, borderWidth, borderClr, hoverClr, pressColor)
	local bw = borderWidth or 1

	local bgColor = imgui.IsHovering(x, y, w, h) and imgui.skin.backgroundHover or imgui.skin.background
	local borderColor =
		((imgui.IsPressing() and imgui.IsHovering(x, y, w, h)) and (pressColor or imgui.skin.borderPress))
		or (imgui.IsHovering(x, y, w, h) and (hoverClr or imgui.skin.borderHover))
		or (borderClr or imgui.skin.border)

	surface.SetDrawColor(bgColor)
	surface.DrawRect(x, y, w, h)

	if bw > 0 then
		surface.SetDrawColor(borderColor)

		surface.DrawRect(x, y, w, bw)
		surface.DrawRect(x, y + bw, bw, h - bw * 2)
		surface.DrawRect(x, y + h-bw, w, bw)
		surface.DrawRect(x + w - bw + 1, y, bw, h)
	end

	return shouldAcceptInput() and imgui.IsHovering(x, y, w, h) and gState.pressed
end

function imgui.xCursor(x, y, w, h)
	local fgColor = imgui.IsPressing() and imgui.skin.foregroundPress or imgui.skin.foreground
	local mx, my = gState.mx, gState.my

	if not mx or not my then return end

	if x and w and (mx < x or mx > x + w) then return end
	if y and h and (my < y or my > y + h) then return end
	
	local cursorSize = math.ceil( 0.3 / gState.scale )
	
	surface.SetDrawColor( color_white )
	surface.SetMaterial( CH_Mayor.Materials.Cursor )
	surface.DrawTexturedRect( mx - cursorSize + 8, my, 24, 24 )
end

function imgui.xTextButton(text, font, x, y, w, h, borderWidth, color, hoverClr, pressColor)
	local fgColor =
		((imgui.IsPressing() and imgui.IsHovering(x, y, w, h)) and (pressColor or imgui.skin.foregroundPress))
		or (imgui.IsHovering(x, y, w, h) and (hoverClr or imgui.skin.foregroundHover))
		or (color or imgui.skin.foreground)

	local clicked = imgui.xButton(x, y, w, h, borderWidth, color, hoverClr, pressColor)

	font = imgui.xFont(font, math.floor(h * 0.618))
	draw.SimpleText(text, font, x + w / 2, y + h / 2, fgColor, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)

	return clicked
end

return imgui
--addons/ch_mining/lua/entities/ch_mining_npc/cl_init.lua:
include( "shared.lua" )

local mat_overhead_icon = Material( "materials/craphead_scripts/mining/gui/skills/extraction.png", "noclamp smooth" )

function ENT:DrawTranslucent()
	self:DrawModel()
	
	local ply = LocalPlayer()
	
	if ply:GetPos():DistToSqr( self:GetPos() ) >= CH_Mining.Config.DistanceTo3D2D then
		return
	end
	
	local ang = self:GetAngles()
	local angeyes = ply:EyeAngles()

	ang:RotateAroundAxis( ang:Forward(), 90 )
	ang:RotateAroundAxis( ang:Right(), -90 )
	
	cam.Start3D2D( self:GetPos() + self:GetUp() * 85, Angle( 0, angeyes.y - 90, 90 ), 0.05 )
		if CH_Mining.Config.DrawDetailed3D2D then
			draw.RoundedBox( 8, -300, 20, 600, 200, CH_Mining.Colors.GrayAlpha )

			-- Wallet icon
			surface.SetDrawColor( color_white )
			surface.SetMaterial( mat_overhead_icon )
			surface.DrawTexturedRect( -280, 35, 165, 165 )
			
			local ply_name = "Hey" .." ".. ply:Nick() ..","
			if string.len( ply_name ) > 17 then
				ply_name = string.Left( ply_name, 17 ) ..".."
			end

			draw.SimpleTextOutlined( ply_name, "CH_Mining_Font_3D2D_60", -90, 30, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP, 2, color_black )
			draw.SimpleTextOutlined( CH_Mining.LangString( "View your mining dashboard" ), "CH_Mining_Font_3D2D_35", -90, 90, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP, 2, color_black )
			draw.SimpleTextOutlined( CH_Mining.LangString( "View inventory & leaderboards" ), "CH_Mining_Font_3D2D_35", -90, 125, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP, 2, color_black )
			draw.SimpleTextOutlined( CH_Mining.LangString( "Crafting items & upgrade skills" ), "CH_Mining_Font_3D2D_35", -90, 160, color_white, TEXT_ALIGN_LEFT, TEXT_ALIGN_TOP, 2, color_black )
		elseif CH_Mining.Config.DrawSimplistc3D2D then
			draw.SimpleTextOutlined( CH_Mining.LangString( "Mining" ), "CH_Mining_Font_3D2D_100", 0, 60, CH_Mining.Colors.GMSBlue, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP, 3, color_black )
			draw.SimpleTextOutlined( CH_Mining.LangString( "View your mining dashboard" ), "CH_Mining_Font_3D2D_60", 0, 150, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP, 3, color_black )
		end
	cam.End3D2D()
end
--addons/cityworker/lua/entities/cityworker_leak/cl_init.lua:
return gluapack()()
--gamemodes/darkrp/entities/entities/fadmin_jail/shared.lua:
return gluapack()()
--addons/glorifiedhandcuffs/lua/entities/glorifiedhandcuffs_bailnpc/shared.lua:
return gluapack()()
--lua/entities/gmod_contr_spawner/cl_init.lua:
return gluapack()()
--lua/entities/gmod_contr_spawner/shared.lua:
return gluapack()()
--addons/executioner_v2/lua/entities/hitman_perks_npc/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/hosbes/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Hoşbeş"
ENT.Category = "Turkish Food Mod"
ENT.Spawnable = true
--addons/media_player_fixed_edition/lua/entities/mediaplayer_base/cl_init.lua:
include "shared.lua"

--addons/minigame-tool-assistant/lua/entities/minigame_bigsquare.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/entities/minigame_npc/cl_init.lua:
return gluapack()()
--addons/minigame-tool-assistant/lua/entities/minigame_npc/shared.lua:
--[[------------------------------------------------
                    Minigame NPC
------------------------------------------------]]--

ENT.Base = "base_nextbot"

ENT.PrintName = "Test Entity"
ENT.Author = "vicentefelipechile"
ENT.Contact = "STEAM_0:1:194224658"
ENT.Purpose = "A \"thinkable\" entity for minigames."

ENT.Category = "Minigames"
ENT.Spawnable = true



--[[----------------------------
            Functions
----------------------------]]--

function ENT:SetupDataTables()
    self:NetworkVar("Entity", 0, "owning_ent")
    self:NetworkVar("String", 0, "Nickname")
    self:NetworkVar("Int", 0, "State")
end

function ENT:Nick()
    return self:GetNickname()
end

ENT.Name = ENT.Nick


--[[----------------------------
           Server-Side
----------------------------]]--

if CLIENT then return end

ENT.Model = "models/player/dewobedil/the_rising_of_the_shield_hero/raphtalia/default_f.mdl"
ENT.LookUncannyToPlayers = true
ENT.LastTarget = NULL

ENT.MG_MODULES = {}
--addons/minigame-tool-assistant/lua/entities/minigame_smallsquare.lua:
AddCSLuaFile()
DEFINE_BASECLASS( "minigame_square_base" )

--[[------------------------------------------------
                Minigame Small Square
------------------------------------------------]]--

ENT.PrintName = "Minigame Small Square"

function ENT:Initialize()
    BaseClass.Initialize( self )

    self:SetModel("models/props_phx/construct/metal_plate1.mdl")
    self:SetType("minigame_smallsquare")

    -- Materials
    local Materials = self:GetMaterials()
    for k, v in ipairs( Materials ) do
        self:SetSubMaterial(k-1, string.Replace( v, "phoenix_storms", "minigames" ))
    end
end
--addons/turkish_food_mod-main/lua/entities/nohutlu_pilav/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/nohutlu_pilav/shared.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_blackjack_panel/cl_init.lua:
include("shared.lua")


function ENT:Initialize()
	self.table = self:GetParent()
	self.hasInitialized = true
end

local surface_setdrawcolor = surface.SetDrawColor
local surface_drawrect = surface.DrawRect
local draw_simpletext = draw.SimpleText
local black = Color(0, 0, 0, 155)
local white = Color(255, 255, 255, 100)
local gold = Color(255, 200, 0, 100)
local edge = -235
function ENT:Draw()
end
function ENT:DrawTranslucent()
	if self:GetPos():DistToSqr(LocalPlayer():GetPos()) > 25000 then return end
	if not self.table.data then return end

	if not self.hasInitialized then
		self:Initialize()
	end

	local pos = self:GetPos()
	local ang = self:GetAngles()

	cam.Start3D2D(pos + (ang:Up()*5.95), ang, 0.05)
		if self:GetStage() == 1 then -- Changing bet buttons
			local button = self:GetCurrentPad(self:WorldToLocal(LocalPlayer():GetEyeTrace().HitPos))

			-- Previous bet step
			surface_setdrawcolor(black)
			surface_drawrect(edge + 5, -edge - 150, 90, 65)
			-- Border
			surface_setdrawcolor(button == "bet_lower" and gold or white)
			surface_drawrect(edge + 0, -edge - 155, 100, 5)
			surface_drawrect(edge + 0, -edge - 150, 5, 65)
			surface_drawrect(edge + 95, -edge - 150, 5, 65)
			surface_drawrect(edge + 0, -edge - 85, 100, 5)
			-- Left arrow
			draw_simpletext("<", "pCasino.Entity.Arrows", edge + 50, -edge - 120,  button == "bet_lower" and gold or white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	

			-- Current bet
			surface_setdrawcolor(black)
			surface_drawrect(edge + 115, -edge - 150, 240, 65)
			-- Border
			surface_setdrawcolor(white)
			surface_drawrect(edge + 110, -edge - 155, 250, 5)
			surface_drawrect(edge + 110, -edge - 150, 5, 65)
			surface_drawrect(edge + 355, -edge - 150, 5, 65)
			surface_drawrect(edge + 110, -edge - 85, 250, 5)
			-- Current Bid
			draw_simpletext(PerfectCasino.Config.FormatMoney(self.table.currentBid), "pCasino.Entity.Bid", edge + 235, -edge - 118, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	

			-- Next bet step
			-- Box
			surface_setdrawcolor(black)
			surface_drawrect(edge + 375, -edge - 150, 90, 65)
			-- Border
			surface_setdrawcolor(button == "bet_raise" and gold or white)
			surface_drawrect(edge + 370, -edge - 155, 100, 5)
			surface_drawrect(edge + 370, -edge - 150, 5, 65)
			surface_drawrect(edge + 465, -edge - 150, 5, 65)
			surface_drawrect(edge + 370, -edge - 85, 100, 5)
			-- Right arrow
			draw_simpletext(">", "pCasino.Entity.Arrows", edge + 420, -edge - 120, button == "bet_raise" and gold or white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	
	
			-- Place bet
			surface_setdrawcolor(black)
			surface_drawrect(edge, -edge - 70, 465, 65)
			-- Border
			surface_setdrawcolor(button == "bet_place" and gold or white)
			surface_drawrect(edge, -edge - 75, 470, 5)
			surface_drawrect(edge, -edge - 70, 5, 65)
			surface_drawrect(edge + 465, -edge - 70, 5, 65)
			surface_drawrect(edge, -edge - 5, 470, 5)
			-- Current Bid
			draw_simpletext(PerfectCasino.Translation.UI.PlaceBet, "pCasino.Entity.Bid", edge + 235, -edge - 38, button == "bet_place" and gold or white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		elseif (self:GetStage() == 2) and (self:GetUser() == LocalPlayer()) then -- Waiting for your turn
			surface_setdrawcolor(black)
			surface_drawrect(edge, -edge - 70, 465, 65)
			-- Border
			surface_setdrawcolor(white)
			surface_drawrect(edge, -edge - 75, 470, 5)
			surface_drawrect(edge, -edge - 70, 5, 65)
			surface_drawrect(edge + 465, -edge - 70, 5, 65)
			surface_drawrect(edge, -edge - 5, 470, 5)
			-- Waiting
			draw_simpletext(PerfectCasino.Translation.UI.Waiting, "pCasino.Entity.Bid", edge + 235, -edge - 38, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		elseif (self:GetStage() == 3) and (self:GetUser() == LocalPlayer()) then -- Active turn
			if not self.table.curHands[self.order] then return end

			local activeHandData = self.table.curHands[self.order][self:GetHand()]
			if not activeHandData then return end
			local button = self:GetCurrentPad(self:WorldToLocal(LocalPlayer():GetEyeTrace().HitPos))

			----| Hit
			surface_setdrawcolor(black)
			surface_drawrect(edge + 5, -edge - 70, 220, 65)
			-- Border
			surface_setdrawcolor(button == "action_hit" and gold or white)
			surface_drawrect(edge, -edge - 75, 230, 5)
			surface_drawrect(edge, -edge - 70, 5, 65)
			surface_drawrect(edge + 225, -edge - 70, 5, 65)
			surface_drawrect(edge, -edge - 5, 230, 5)
			-- Hit
			draw_simpletext(PerfectCasino.Translation.UI.Hit, "pCasino.Entity.Bid", edge + 115, -edge - 38, button == "action_hit" and gold or white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)



			----| Stand
			surface_setdrawcolor(black)
			surface_drawrect(edge + 245, -edge - 70, 220, 65)
			-- Border
			surface_setdrawcolor(button == "action_stand" and gold or white)
			surface_drawrect(edge + 240, -edge - 75, 230, 5)
			surface_drawrect(edge + 240, -edge - 70, 5, 65)
			surface_drawrect(edge + 240 + 225, -edge - 70, 5, 65)
			surface_drawrect(edge + 240, -edge - 5, 230, 5)
			-- Stand
			draw_simpletext(PerfectCasino.Translation.UI.Stand, "pCasino.Entity.Bid", edge + 355, -edge - 38, button == "action_stand" and gold or white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
	

			-- Can't double a hand if it's not the first action
			if #activeHandData <= 2 then
				----| Double down
				surface_setdrawcolor(black)
				surface_drawrect(edge + 5, -edge - 150, 220, 65)
				-- Border
				surface_setdrawcolor(button == "action_double" and gold or white)
				surface_drawrect(edge, -edge - 155, 230, 5)
				surface_drawrect(edge, -edge - 150, 5, 65)
				surface_drawrect(edge + 225, -edge - 150, 5, 65)
				surface_drawrect(edge, -edge - 85, 230, 5)
				-- Double down
				draw_simpletext(PerfectCasino.Translation.UI.DoubleDown, "pCasino.Entity.Bid", edge + 115, -edge - 118, button == "action_double" and gold or white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
			end	

			if (#activeHandData <= 2) and activeHandData[2] and (PerfectCasino.Cards:GetValue(activeHandData[1]) == PerfectCasino.Cards:GetValue(activeHandData[2])) then
				----| Split
				surface_setdrawcolor(black)
				surface_drawrect(edge + 245, -edge - 150, 220, 65)
				-- Border
				surface_setdrawcolor(button == "action_split" and gold or white)
				surface_drawrect(edge + 240, -edge - 155, 230, 5)
				surface_drawrect(edge + 240, -edge - 150, 5, 65)
				surface_drawrect(edge + 240 + 225, -edge - 150, 5, 65)
				surface_drawrect(edge + 240, -edge - 85, 230, 5)
				-- Split
				draw_simpletext(PerfectCasino.Translation.UI.Split, "pCasino.Entity.Bid", edge + 355, -edge - 118, button == "action_split" and gold or white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
			end

			----| CurHand Stats
			surface_setdrawcolor(black)
			surface_drawrect(edge + 5, -edge + 10, 460, 65)
			-- Border
			surface_setdrawcolor(white)
			surface_drawrect(edge, -edge + 5, 470, 5)
			surface_drawrect(edge, -edge + 10, 5, 65)
			surface_drawrect(edge + 465, -edge + 10, 5, 65)
			surface_drawrect(edge, -edge + 75, 470, 5)
			-- Current Hand
			draw_simpletext(string.format(PerfectCasino.Translation.UI.CurrentHand, PerfectCasino.UI.NumberSuffix(self:GetHand())), "pCasino.Entity.Bid", edge + 235, -edge + 7, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
			-- Hand V
			local total = PerfectCasino.Cards:GetHandValue(activeHandData)
			local valueState = ((total > 21) and string.format(PerfectCasino.Translation.UI.Bust, total)) or ((total == 21) and string.format(PerfectCasino.Translation.UI.Blackjack, total)) or total
			draw_simpletext(string.format(PerfectCasino.Translation.UI.CurrentHandTotalValue, valueState), "pCasino.Entity.Bid", edge + 235, -edge + 77, white, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
		end
	cam.End3D2D()
end
--addons/pcasino/lua/entities/pcasino_blackjack_panel/shared.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_mystery_wheel/cl_init.lua:
include("shared.lua")


function ENT:Initialize()
	self.active = false
	self.currentBets = {}

	self.hasInitialized = true
end

function ENT:PostData()
	if not self.hasInitialized then
		self:Initialize()
	end
end

local surface_setdrawcolor = surface.SetDrawColor
local surface_drawrect = surface.DrawRect
local draw_simpletext = draw.SimpleText
local surface_setdrawcolor = surface.SetDrawColor
local surface_setmaterial = surface.SetMaterial
local surface_gettextsize = surface.GetTextSize
local surface_setfont = surface.SetFont
local draw_notexture = draw.NoTexture
local math_cos = math.cos
local math_sin = math.sin
local math_rad = math.rad
local black = Color(0, 0, 0, 155)
local white = Color(255, 255, 255, 100)
function ENT:DrawTranslucent()
	if self:GetPos():DistToSqr(LocalPlayer():GetPos()) > 1000000 then return end


	-- We can piggyback off the distance check to only request the entities data when it's needed :D
	if (not self.data) and (not PerfectCasino.Cooldown.Check(self:EntIndex(), 5)) then
		PerfectCasino.Core.RequestConfigData(self)
		return
	end

	if not self.data then return end

	-- Basic setups
	local pos = self:GetPos()
	local ang = self:GetBoneMatrix(2):GetAngles()

	ang:RotateAroundAxis(ang:Up(), 89.8)
	ang:RotateAroundAxis(ang:Forward(), 90)
	ang:RotateAroundAxis(ang:Up(), -162)

	cam.Start3D2D(pos + (self:GetUp()*9.75) + (self:GetRight()*0.2) + (self:GetForward()*-17.4), ang, 0.08)
		-- Spinny wheel icons
		local itter = 0
		for i=1, 360, 360/20 do 
			itter = itter + 1
			local x = math_cos(math_rad(i - 91)) * 155
			local y = math_sin(math_rad(i - 91)) * 155

			draw_notexture()
			surface_setdrawcolor(255, 255, 255, 255)
			surface_setmaterial(PerfectCasino.Icons[self.data.wheel[21 - itter].p].mat)

			PerfectCasino.UI.DrawTexturedRectRotatedPoint(x, y, 60, 60, (-i+1), 0, -218)
			PerfectCasino.UI.TextRotated(self.data.wheel[21 - itter].n, x, y, color_white, "pCasino.Title.Static", i-90, 1)
		end
	cam.End3D2D()

	if tobool(self.data.buySpin.buy) or (tobool(self.data.general.useFreeSpins) and (PerfectCasino.Spins > 0)) then
		-- Basic setups
		local pos = self:GetPos()
		local ang = self:GetAngles()
		ang:RotateAroundAxis(ang:Up(), 50)
		ang:RotateAroundAxis(ang:Forward(), 90)
	
		surface_setfont("pCasino.Entity.Arrows")
		local spinSize, _ = surface_gettextsize(PerfectCasino.Translation.UI.PurchaseASpin)
		local moneySize, _ = surface_gettextsize(PerfectCasino.Config.FormatMoney(self.data.buySpin.cost))
		local biggestSize = (spinSize > moneySize) and spinSize or moneySize
		biggestSize = biggestSize + 100

		cam.Start3D2D(pos + (ang:Up()*-35) + (ang:Forward()*25) + (ang:Right()*-9) + ((ang:Right()*-2)*(math.sin(CurTime()*0.5))), ang, 0.05)
				-- Current bet
				surface_setdrawcolor(black)
				surface_drawrect(-10, -20, biggestSize, 120)
				-- Border
				surface_setdrawcolor(white)
				surface_drawrect(-15, -25, biggestSize+10, 5)
				surface_drawrect(-15, -20, 5, 120)
				surface_drawrect(biggestSize-10, -20, 5, 120)
				surface_drawrect(-15, 100, biggestSize+10, 5)
				-- Current Bid
				draw_simpletext((PerfectCasino.Spins > 0) and PerfectCasino.Translation.UI.FreeSpin or PerfectCasino.Translation.UI.PurchaseASpin, "pCasino.Entity.Arrows", biggestSize/2-10, 37, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_BOTTOM)
				draw_simpletext((PerfectCasino.Spins > 0) and string.format(PerfectCasino.Translation.UI.FreeSpinCount, PerfectCasino.Spins) or PerfectCasino.Config.FormatMoney(self.data.buySpin.cost), "pCasino.Entity.Arrows", biggestSize/2-10, 37, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_TOP)
		cam.End3D2D()
	end
end
--addons/pcasino/lua/entities/pcasino_sign_wall_logo/shared.lua:
return gluapack()()
--addons/pcasino/lua/entities/pcasino_sign_wall_logo/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Sign Wall Logo"
ENT.Author = "Owain Owjo & The One Free-Man"
ENT.Category = "pCasino"
ENT.Spawnable = false
ENT.AdminSpawnable = false

PerfectCasino.Core.RegisterEntity("pcasino_sign_wall_logo", {
},
"models/freeman/owain_casinosign_wall.mdl")
--addons/turkish_food_mod-main/lua/entities/pide/shared.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/pilav_stand/cl_init.lua:
return gluapack()()
--addons/skeypad_1.2.36/lua/entities/s_keycard/shared.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_wk_seat/cl_init.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
store.steampowered.com/curator/32364216

Subscribe to the channel:↓
www.youtube.com/c/Famouse

More leaks in the discord:↓ 
discord.gg/rFdQwzm
------------------------------------------------------------------------*/

include("shared.lua");

surface.CreateFont("SB_MainText", {
	font = "Roboto",
	size = 72,
	weight = 100,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = true,
	outline = false
});

surface.CreateFont("SB_InfoText", {
	font = "Roboto",
	size = 32,
	weight = 500,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = false,
	rotary = false,
	shadow = false,
	additive = true,
	outline = false
});

surface.CreateFont("SB_InfoIcon", {
	font = "Webdings",
	size = 60,
	weight = 0,
	blursize = 0,
	scanlines = 0,
	antialias = true,
	underline = false,
	italic = false,
	strikeout = false,
	symbol = true,
	rotary = false,
	shadow = false,
	additive = true,
	outline = false
});

function ENT:Initialize()	
	
end;


function ENT:Think()

end;

function ENT:Draw()
	self:DrawModel();
	
	local camPos = self:WorldSpaceCenter();
	local camAng = self:GetAngles();
	
	local boxWidth = 512;
	local boxHeight = 128+16;

	local subWidth = 32;
	local subHeight = 32+16;

	local zVector = 48;

	--[[
		E 1-255
		D 201-400
		C 401-600
		B 601-800
		A 801-1000
		S 1001+
	]]--

	local wkSkills = {}
	wkSkills[0] = self:GetNWInt("craft");
	wkSkills[1] = self:GetNWInt("social");
	wkSkills[2] = self:GetNWInt("math");
	wkSkills[3] = self:GetNWInt("art");

	local cSkills = {}
	cSkills[0] = self:GetNWInt("fraud");
	cSkills[1] = self:GetNWInt("cook");
	cSkills[2] = self:GetNWInt("mail");
	cSkills[3] = self:GetNWInt("terror");

	local craftSkill = math.Clamp((wkSkills[0]*96)/1000, 0, 96);
	local socialSkill = math.Clamp((wkSkills[1]*96)/1000, 0, 96);
	local mathSkill = math.Clamp((wkSkills[2]*96)/1000, 0, 96);
	local artSkill = math.Clamp((wkSkills[3]*96)/1000, 0, 96);

	local fraudSkill = math.Clamp((cSkills[0]*96)/1000, 0, 96);
	local cookSkill = math.Clamp((cSkills[1]*96)/1000, 0, 96);
	local mailSkill = math.Clamp((cSkills[2]*96)/1000, 0, 96);
	local terrorSkill = math.Clamp((cSkills[3]*96)/1000, 0, 96);

	local colorIncome = Color(46, 204, 113, 200);
	if (self:GetNWInt("income") <= 0) then
		colorIncome = Color(200+(math.sin(CurTime()*16)*32), 0, 0, 200);
	elseif (self:GetNWInt("income") <= self:GetNWInt("incomeMax")) then
		colorIncome = Color(46, 204, 113, 200);
	elseif (self:GetNWInt("income") > self:GetNWInt("incomeMax")) then
		colorIncome = Color(192+(math.sin(CurTime()*8)*16), 46+(math.sin(CurTime()*8)*16), 205+(math.sin(CurTime()*8)*16), 200);
	end;

	camAng:RotateAroundAxis(camAng:Up(), 0);
	camAng:RotateAroundAxis(camAng:Forward(), 0);	
	camAng:RotateAroundAxis(camAng:Right(), 0);
	if (LocalPlayer():GetPos():Distance(self:GetPos()) < SeriousBusiness_Config.DrawDistance) then
		-- MAIN PAD
		cam.Start3D2D(camPos + Vector(0, 0, zVector), Angle(0, LocalPlayer():EyeAngles().y-90, 90), 0.1)
			draw.RoundedBox(0, -boxWidth*0.5, -boxHeight*0.5, boxWidth, boxHeight, Color(36, 36, 36, 255)); -- whole width box
			--draw.RoundedBox(0, -boxWidth*0.5, -boxHeight*0.5, 128, boxHeight, Color(0, 0, 0, 100)); -- info box


				if (self:GetNWBool("crime")) then
					draw.RoundedBox(0, -boxWidth*0.5+128, -boxHeight*0.5+(48*0), boxWidth-128, 48, Color(174, 111, 98, 200)); -- NAME BAR
				else
					draw.RoundedBox(0, -boxWidth*0.5+128, -boxHeight*0.5+(48*0), boxWidth-128, 48, Color(231, 76, 60, 200)); -- NAME BAR
				end;


				if (self:GetNWBool("crime")) then
					draw.RoundedBox(0, -boxWidth*0.5+128, -boxHeight*0.5+(48*1), boxWidth-128, 48, Color(151, 159, 98, 200)); -- JOB BAR
				else
					draw.RoundedBox(0, -boxWidth*0.5+128, -boxHeight*0.5+(48*1), boxWidth-128, 48, Color(52, 152, 219, 200)); -- JOB BAR
				end;

				local incomeProgress = math.Clamp((self:GetNWInt("income")*(boxWidth-128))/self:GetNWInt("incomeMax"), 0, boxWidth-128);
				if (self:GetNWBool("crime")) then
					draw.RoundedBox(0, -boxWidth*0.5+128, -boxHeight*0.5+(48*2), incomeProgress, 48, Color(122, 154, 102, 200)); -- INCOME BAR
				else
					draw.RoundedBox(0, -boxWidth*0.5+128, -boxHeight*0.5+(48*2), incomeProgress, 48, colorIncome); -- INCOME BAR
				end;

				if (self:GetNWInt("income") <= 0) then
					draw.RoundedBox(0, -boxWidth*0.5+128, -boxHeight*0.5+(48*2), boxWidth-128, 48, colorIncome);
				end;

				if (self:GetNWBool("crime")) then
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*0), -boxHeight*0.5, subWidth*4, 48*3, Color(50, 0, 0, 255));
				else
					--draw.RoundedBox(0, -boxWidth*0.5+(subWidth*0), -boxHeight*0.5, subWidth*4, 48*3, Color(0, 0, 0, 255));
				end;

				-- Draw normal skills
				if (!self:GetNWBool("crime")) then
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*0), boxHeight*0.5-subHeight, subWidth, subHeight, Color(100, 0, 0, 225)); -- sub box 1
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*1), boxHeight*0.5-subHeight, subWidth, subHeight, Color(0, 100, 0, 225)); -- sub box 2
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*2), boxHeight*0.5-subHeight, subWidth, subHeight, Color(0, 0, 100, 225)); -- sub box 3
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*3), boxHeight*0.5-subHeight, subWidth, subHeight, Color(0, 100, 100, 225)); -- sub box 4

					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*0), boxHeight*0.5-subHeight-craftSkill, subWidth, craftSkill, Color(100, 75, 0, 225)); -- craft skill 1
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*1), boxHeight*0.5-subHeight-socialSkill, subWidth, socialSkill, Color(100, 75, 0, 225)); -- social skill 1
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*2), boxHeight*0.5-subHeight-mathSkill, subWidth, mathSkill, Color(100, 75, 0, 225)); -- math skill 1
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*3), boxHeight*0.5-subHeight-artSkill, subWidth, artSkill, Color(100, 75, 0, 225)); -- art skill 1

				-- Draw criminal skills
				else
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*0), boxHeight*0.5-subHeight, subWidth, subHeight, Color(100, 100, 0, 225)); -- sub box 1
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*1), boxHeight*0.5-subHeight, subWidth, subHeight, Color(100, 50, 0, 225)); -- sub box 2
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*2), boxHeight*0.5-subHeight, subWidth, subHeight, Color(75, 50, 75, 225)); -- sub box 3
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*3), boxHeight*0.5-subHeight, subWidth, subHeight, Color(50, 50, 50, 225)); -- sub box 4

					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*0), boxHeight*0.5-subHeight-fraudSkill, subWidth, fraudSkill, Color(100, 75, 0, 225)); -- fraud skill 1
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*1), boxHeight*0.5-subHeight-cookSkill, subWidth, cookSkill, Color(100, 75, 0, 225)); -- cook skill 1
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*2), boxHeight*0.5-subHeight-mailSkill, subWidth, mailSkill, Color(100, 75, 0, 225)); -- mail skill 1
					draw.RoundedBox(0, -boxWidth*0.5+(subWidth*3), boxHeight*0.5-subHeight-terrorSkill, subWidth, terrorSkill, Color(100, 75, 0, 225)); -- terror skill 1
				end;
		cam.End3D2D();

		-- SUB ICONS
		cam.Start3D2D(camPos + Vector(0, 0, zVector), Angle(0, LocalPlayer():EyeAngles().y-90, 90), 0.05)
			-- Draw normal skills
			if (!self:GetNWBool("crime")) then
				draw.SimpleText("#", "SB_InfoIcon", -480+(64*0), 84, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
				draw.SimpleText("(", "SB_InfoIcon", -480+(64*1), 84, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
				draw.SimpleText("2", "SB_InfoIcon", -480+(64*2), 84, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
				draw.SimpleText("®", "SB_InfoIcon", -480+(64*3), 84, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);

				for i=0, 3 do
					if (wkSkills[i] >= 901) then
						draw.SimpleText("S++", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);	
					elseif (wkSkills[i] >= 801) then
						draw.SimpleText("S+", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
					elseif (wkSkills[i] >= 701) then
						draw.SimpleText("S", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);	
					elseif (wkSkills[i] >= 601) then
						draw.SimpleText("A++", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);	
					elseif (wkSkills[i] >= 501) then
						draw.SimpleText("A+", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
					elseif (wkSkills[i] >= 401) then
						draw.SimpleText("A", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);	
					elseif (wkSkills[i] >= 2501) then
						draw.SimpleText("B", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);	
					elseif (wkSkills[i] >= 201) then
						draw.SimpleText("C", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
					elseif (wkSkills[i] >= 101) then
						draw.SimpleText("D", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
					else
						draw.SimpleText("E", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
					end;
				end;

			-- Draw criminal skills
			else
				draw.SimpleText("Y", "SB_InfoIcon", -480+(64*0), 84, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
				draw.SimpleText("N", "SB_InfoIcon", -480+(64*1), 84, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
				draw.SimpleText("*", "SB_InfoIcon", -480+(64*2), 84, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
				draw.SimpleText("M", "SB_InfoIcon", -480+(64*3), 84, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);

				for i=0, 3 do
					if (cSkills[i] >= 901) then
						draw.SimpleText("S++", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);	
					elseif (cSkills[i] >= 801) then
						draw.SimpleText("S+", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
					elseif (cSkills[i] >= 701) then
						draw.SimpleText("S", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);	
					elseif (cSkills[i] >= 601) then
						draw.SimpleText("A++", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);	
					elseif (cSkills[i] >= 501) then
						draw.SimpleText("A+", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
					elseif (cSkills[i] >= 401) then
						draw.SimpleText("A", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);	
					elseif (cSkills[i] >= 2501) then
						draw.SimpleText("B", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);	
					elseif (cSkills[i] >= 201) then
						draw.SimpleText("C", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
					elseif (cSkills[i] >= 101) then
						draw.SimpleText("D", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
					else
						draw.SimpleText("E", "SB_InfoText", -480+(64*i), 123, Color(255, 255, 255, 150), TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER);
					end;
				end;
			end;
		cam.End3D2D();

		-- MAIN TEXT
		cam.Start3D2D(camPos + Vector(0, 0, zVector), Angle(0, LocalPlayer():EyeAngles().y-90, 90), 0.05)
			draw.SimpleText(self:GetNWString("name"), "SB_MainText", -240, -93, Color(255, 255, 255, 150), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER);
			draw.SimpleText(self:GetNWString("job"), "SB_MainText", -240, 3, Color(255, 255, 255, 150), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER);

			local textJigSin = (math.cos(CurTime()*16)*4);
			local textJigCos = (math.sin(CurTime()*16)*4);
			if (self:GetNWInt("income") <= 0) then
				draw.SimpleText("Sinirli! ("..string.Comma(math.Round(self:GetNWInt("income"))).."$)", "SB_MainText", -240+textJigCos, 99+textJigSin, Color(255, 255, 255, 150), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER);
			elseif (self:GetNWInt("income") <= self:GetNWInt("incomeMax")) then
				draw.SimpleText("İyi! ("..string.Comma(math.Round(self:GetNWInt("income"))).."$)", "SB_MainText", -240, 99, Color(255, 255, 255, 150), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER);
			elseif (self:GetNWInt("income") > self:GetNWInt("incomeMax")) then
				draw.SimpleText("Mutlu! ("..string.Comma(math.Round(self:GetNWInt("income"))).."$)", "SB_MainText", -240+textJigSin, 99+textJigCos, Color(255, 255, 255, 150), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER);
			end;

			--draw.SimpleText(""..string.Comma(math.Round(self:GetNWInt("income"))).."$/"..string.Comma(self:GetNWInt("incomeMax")).."$", "SB_MainText", -240, 99, Color(255, 255, 255, 150), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER);
		cam.End3D2D();
	end;
end;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/serious_business/lua/entities/sb_worker/shared.lua:
return gluapack()()
--addons/serious_business/lua/entities/sb_worker/shared.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
http://store.steampowered.com/curator/32364216

Subscribe to the channel:↓
www.youtube.com/c/Famouse

More leaks in the discord:↓ 
https://discord.gg/rFdQwzm
------------------------------------------------------------------------*/

ENT.Base = "base_ai"
ENT.Type = "ai"

ENT.PrintName		= "Worker";
ENT.Category 		= "Serious Business";
ENT.Author			= "EnnX49";

ENT.Contact    		= "";
ENT.Purpose 		= "";
ENT.Instructions 	= "" ;

ENT.Spawnable			= true;
ENT.AdminSpawnable		= true;

ENT.AutomaticFrameAdvance = true;

function ENT:PhysicsCollide(data, physobj)

end;

function ENT:PhysicsUpdate(physobj)

end;

function ENT:SetAutomaticFrameAdvance(bUsingAnim)
	self.AutomaticFrameAdvance = bUsingAnim;
end;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--gamemodes/darkrp/entities/entities/spawned_money/cl_init.lua:
include("shared.lua")

local color_red = Color(140, 0, 0, 100)
local color_white = color_white

function ENT:Draw()
    self:DrawModel()

    -- Do not draw labels when a different model is used.
    -- If you want a different model with labels, make your own money entity and use GM.Config.MoneyClass.
    if self:GetModel() ~= "models/props/cs_assault/money.mdl" then return end

    local Pos = self:GetPos()
    local Ang = self:GetAngles()

    surface.SetFont("ChatFont")
    local text = DarkRP.formatMoney(self:Getamount())
    local TextWidth = surface.GetTextSize(text)

    cam.Start3D2D(Pos + Ang:Up() * 0.82, Ang, 0.1)
        draw.WordBox(2, -TextWidth * 0.5, -10, text, "ChatFont", color_red, color_white)
    cam.End3D2D()

    Ang:RotateAroundAxis(Ang:Right(), 180)

    cam.Start3D2D(Pos, Ang, 0.1)
        draw.WordBox(2, -TextWidth * 0.5, -10, text, "ChatFont", color_red, color_white)
    cam.End3D2D()
end

function ENT:Think()
end

--gamemodes/darkrp/entities/entities/spawned_shipment/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Shipment"
ENT.Author = "philxyz"
ENT.Spawnable = false
ENT.IsSpawnedShipment = true

function ENT:SetupDataTables()
    self:NetworkVar("Int",0,"contents")
    self:NetworkVar("Int",1,"count")
    self:NetworkVar("Float", 0, "gunspawn")
    self:NetworkVar("Entity", 0, "owning_ent")
    self:NetworkVar("Entity", 1, "gunModel")
end

DarkRP.declareChatCommand{
    command = "splitshipment",
    description = "Split the shipment you're looking at.",
    delay = 1.5
}

DarkRP.declareChatCommand{
    command = "makeshipment",
    description = "Create a shipment from a dropped weapon.",
    delay = 1.5
}

--lua/entities/sv_gasolinepistol/cl_init.lua:
return gluapack()()
--lua/entities/sv_gaspump/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end
--lua/entities/sv_gaspump/shared.lua:
return gluapack()()
--lua/entities/sv_health_kit/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/tea/cl_init.lua:
return gluapack()()
--addons/turkish_food_mod-main/lua/entities/tea/cl_init.lua:
include("shared.lua")
function ENT:Initialize() end
function ENT:Draw() self:DrawModel() end

--addons/turkish_food_mod-main/lua/entities/tea/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_gmodentity"
ENT.PrintName = "Çay"
ENT.Category = "Turkish Food Mod"
ENT.Spawnable = true
--lua/entities/used_bomonti.lua:
AddCSLuaFile()

DEFINE_BASECLASS("base_gmodentity")

ENT.PrintName = "Used Bomonti"

ENT.Author = "RebS"

ENT.Editable = false
ENT.Spawnable = false
ENT.AdminOnly = false
ENT.Sound = nil

function ENT:Initialize()

	self.Entity:PhysicsInit(SOLID_VPHYSICS)
	self.Entity:SetMoveType(MOVETYPE_VPHYSICS)
	self.Entity:SetSolid(SOLID_VPHYSICS)
	self.Entity:SetCollisionGroup(COLLISION_GROUP_INTERACTIVE)
	self.Entity:SetBodygroup(0,1)
	self.Entity:SetBodygroup(1,1)
	self.Entity:SetBodygroup(2,1)
	self.Entity:SetSkin(1)

	local phys = self.Entity:GetPhysicsObject()
	if phys and phys:IsValid() then phys:Wake() end
	
end

function ENT:Draw()
	self.Entity:DrawModel()
end
--lua/entities/used_tuborg.lua:
AddCSLuaFile()

DEFINE_BASECLASS("base_gmodentity")

ENT.PrintName = "Used Tuborg"

ENT.Author = "RebS"

ENT.Editable = false
ENT.Spawnable = false
ENT.AdminOnly = false
ENT.Sound = nil

function ENT:Initialize()

	self.Entity:PhysicsInit(SOLID_VPHYSICS)
	self.Entity:SetMoveType(MOVETYPE_VPHYSICS)
	self.Entity:SetSolid(SOLID_VPHYSICS)
	self.Entity:SetCollisionGroup(COLLISION_GROUP_INTERACTIVE)
	self.Entity:SetBodygroup(0,1)
	self.Entity:SetBodygroup(1,1)
	self.Entity:SetBodygroup(2,1)
	self.Entity:SetSkin(1)

	local phys = self.Entity:GetPhysicsObject()
	if phys and phys:IsValid() then phys:Wake() end
	
end

function ENT:Draw()
	self.Entity:DrawModel()
end
--addons/xenin-coinflip/lua/entities/xenin_coinflip_npc/cl_init.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/entities/zfs_anim/cl_init.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/entities/zfs_fruitbox/shared.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/entities/zfs_shop/cl_init.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/entities/zfs_smoothie/cl_init.lua:
return gluapack()()
--addons/zerosfruitslicer/lua/entities/zfs_sweetener.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_backmix.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_backmix.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zgo2_item_base")
ENT.Type                    = "anim"
ENT.Base                    = "zgo2_item_base"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Backmix"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = false
ENT.AdminSpawnable          = false
ENT.Model                   = "models/zerochain/props_growop2/zgo2_backmix_muffin.mdl"
ENT.RenderGroup             = RENDERGROUP_BOTH

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:CanDrive(ply)
    return false
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

if SERVER then
	function ENT:PostInitialize()
		self:SetModel(zgo2.config.Edibles[self.EdibleID].backmix_model)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_doobytable/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:Initialize()
	zgo2.DoobyTable.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ENT:Draw()
	zgo2.DoobyTable.Draw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

function ENT:Think()
	zgo2.DoobyTable.Think(self)
	self:SetNextClientThink(CurTime())
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

	return true
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_dryline/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ENT:Initialize()
	zgo2.Dryline.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ENT:Draw()
	self:DrawModel()
end

function ENT:Think()
	zgo2.Dryline.OnThink(self)
end

function ENT:OnRemove()
	zgo2.Dryline.OnRemove(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_generator/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_jar.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_joint_ent/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a

function ENT:Initialize()
	zclib.EntityTracker.Add(self)
	self.Last_IsBurning = false

	timer.Simple(0.5, function()
		if IsValid(self) then
			self.m_Initialized = true
		end
	end)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

function ENT:Draw()
	self:DrawModel()
	self:DrawInfo()
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:DrawInfo()
	if not LocalPlayer().zgo2_Initialized then return end
	if not zclib.Convar.GetBool("zclib_cl_drawui") then return end
	if zclib.util.InDistance(self:GetPos(), LocalPlayer():GetPos(), zgo2.util.RenderDistance_UI) == false then return end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

	if zclib.Entity.GetLookTarget() ~= self then return end

	local id = self:GetWeedID()
	if id and id > 0 then
		zgo2.HUD.Draw(self,function()
			local name = zgo2.Plant.GetName(id)
			local boxSize = zclib.util.GetTextSize(name, zclib.GetFont("zclib_world_font_medium")) * 1.2
			draw.RoundedBox(20, -boxSize/2,-90, boxSize, 210, zclib.colors["black_a200"])
			draw.SimpleText(name, zclib.GetFont("zclib_world_font_medium"), 0, -45, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
			draw.SimpleText(self:GetWeedAmount() .. zgo2.config.UoM, zclib.GetFont("zclib_world_font_medium"), 0, 20, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
			draw.SimpleText(self:GetWeedTHC() .. "%", zclib.GetFont("zclib_world_font_medium"), 0, 80, color_white, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

			draw.SimpleText("▼", zclib.GetFont("zclib_world_font_large"), 0, 150, zclib.colors["black_a200"], TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end,0.05)
	end
end

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:Think()
	if not self.m_Initialized then return end
	if not LocalPlayer().zgo2_Initialized then return end

	if zclib.util.InDistance(self:GetPos(), LocalPlayer():GetPos(), zgo2.util.RenderDistance_UI) then
		local _IsBurning = self:GetIsBurning()

		if self.Last_IsBurning ~= _IsBurning then
			self.Last_IsBurning = _IsBurning

			if self.Last_IsBurning then
				self:SetSkin(1)
				zclib.Effect.ParticleEffectAttach("zgo2_ent_fire", PATTACH_POINT_FOLLOW, self, 1)
			else
				self:StopParticles()
			end
		end
	else
		if self.Last_IsBurning == true then
			self.Last_IsBurning = false
			self:StopParticles()
		end
	end
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_logbook.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_logbook.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zgo2_item_base")
ENT.Type                    = "anim"
ENT.Base                    = "zgo2_item_base"
ENT.AutomaticFrameAdvance   = false
ENT.PrintName               = "Log Book"
ENT.Author                  = "ZeroChain"
ENT.Category                = "Zeros GrowOP 2"
ENT.Spawnable               = true
ENT.AdminSpawnable          = false
ENT.Model                   = "models/props_lab/binderblue.mdl"
ENT.RenderGroup             = RENDERGROUP_OPAQUE
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

if SERVER then
	function ENT:AcceptInput(inputName, activator, caller, data)
		if inputName == "Use" and IsValid(activator) and activator:IsPlayer() and activator:Alive() then
			zgo2.Logbook.OnUse(self,activator)
		end
	end
	function ENT:PostInitialize()
		zgo2.Logbook.Initialize(self)
	end
else
	function ENT:Draw()
		self:DrawModel()
		zgo2.HUD.Draw(self,function()
			draw.SimpleText("Log Book", zclib.GetFont("zclib_world_font_medium"), 0, 0, zclib.colors[ "text01" ], TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)
		end)
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

function ENT:CanProperty(ply)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:CanTool(ply, tab, str)
    return ply:IsSuperAdmin()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342

function ENT:CanDrive(ply)
    return false
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_oven/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_plant/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 8ffb188c701d3f1856df3a15bfe8e14b5be84a41e03a52af8e86de4fbee82eeb

function ENT:Initialize()
	zgo2.Plant.Initialize(self)
end

function ENT:Draw()
	zgo2.Plant.OnDraw(self)
end

function ENT:Think()
	zgo2.Plant.OnThink(self)
	self:SetNextClientThink(CurTime() + 1)
    return true
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 70b873f322570e153a05d9cee15c50a5d97bffffec86f684a14bf17014b60342
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224586

function ENT:OnRemove()
	zgo2.Plant.OnRemove(self)
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_pot/cl_init.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_seed/cl_init.lua:
/*
    Addon id: 64edeaec-8955-454a-aac4-1d19d72ee4af
    Version: v1.6.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- c360111a1078b749c222565727765c993fb6b426190023d6d23362bac0c7683a
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

function ENT:Initialize()
    zgo2.Seed.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198314224595

function ENT:Think()
	zgo2.Seed.OnThink(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- a0e6ade09fe02808a86c0dfaee2704d791bcc0344cd386f9ebfd43c1dd1de59e

function ENT:Draw()
	self:DrawModel()
	zgo2.Seed.Draw(self)
end

--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_seedlibary/shared.lua:
return gluapack()()
--addons/zeros_growop2_v1.6.1/lua/entities/zgo2_soil.lua:
return gluapack()()
--addons/zeros_golddiggger/lua/entities/zgw_goldwasher/shared.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_aluminium/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_aluminium/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_aluminium.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Aluminum"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_OPAQUE
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_autobreaker/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ENT:Initialize()
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

function ENT:Draw()
	self:DrawModel()
end

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_item_methylamine/cl_init.lua:
return gluapack()()
--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_frezzer/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_frezzer.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Frezzer"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_BOTH

function ENT:SetupDataTables()
    self:NetworkVar("Int", 1, "ProcessState")
    /*
        0 = Needs Lox
        1 = Idle
        2 = Frezzing
    */
    self:NetworkVar("Int", 2, "FrezzeStart")
    if (SERVER) then
        self:SetProcessState(0)
        self:SetFrezzeStart(0)
    end
end

function ENT:OnDropTray(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

    if lp.x > 8 and lp.x < 16.3 and lp.y < 11 and lp.y > 10 and lp.z > 49 and lp.z < 52.5 then
        return true
    else
        return false
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

function ENT:OnStart(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

    if lp.x > 8 and lp.x < 16.3 and lp.y < 11 and lp.y > 10 and lp.z > 52.5 and lp.z < 56 then
        return true
    else
        return false
    end
end

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218033

function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_ventilation/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")

function ENT:Initialize()
	zmlab2.Ventilation.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:Draw()
	self:DrawModel()
	zmlab2.Ventilation.Draw(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

function ENT:Think()
	zmlab2.Ventilation.OnThink(self)
end

function ENT:OnRemove()
	zmlab2.Ventilation.OnRemove(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_machine_ventilation/shared.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.Model = "models/zerochain/props_methlab/zmlab2_ventilation.mdl"
ENT.AutomaticFrameAdvance = true
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Ventilation"
ENT.Category = "Zeros Methlab 2"
ENT.RenderGroup = RENDERGROUP_OPAQUE

function ENT:SetupDataTables()

    self:NetworkVar("Int", 2, "ProcessState")
    /*
        0 = OFF
        1 = ON
    */

    self:NetworkVar("Entity", 1, "Output")

    //self:NetworkVar("Bool", 1, "IsVenting")
    self:NetworkVar("Int", 1, "LastPollutionMove")

                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 76561198347218024

    if (SERVER) then
        self:SetProcessState(0)
        self:SetOutput(NULL)
        //self:SetIsVenting(false)
        self:SetLastPollutionMove(-1)
    end
end

function ENT:GetIsVenting()
    return self:GetProcessState() == 1
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

function ENT:OnStart(ply)
    local trace = ply:GetEyeTrace()
    local lp = self:WorldToLocal(trace.HitPos)

    if lp.x > -8.8 and lp.x < 0 and lp.y < 15 and lp.y > 10 and lp.z > 28.5 and lp.z < 33.5 then
        return true
    else
        return false
    end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013

function ENT:CanProperty(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

function ENT:CanTool(ply, tab, str)
    return zclib.Player.IsAdmin(ply)
end

function ENT:CanDrive(ply)
    return zclib.Player.IsAdmin(ply)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_storage/cl_init.lua:
/*
    Addon id: a36a6eee-6041-4541-9849-360baff995a2
    Version: v1.4.1 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 15871293219a231313fbdc551fcfaeb89901409b08b17abf512df78d792aeeea

function ENT:Initialize()
	zmlab2.Storage.Initialize(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 008d00393091244a629b726da410c82cc21d3876952f1a2fa78c80bc6afb7013
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- ce15eec833bf47ebbcf6161ad127d2657901fd54a4bc9d5aa5fcda90913684bc

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- b59bd1b1f8d16a52cb3d0a12454834a0ad28afe2633004db7a9dc71add4aef45

function ENT:Draw()
	self:DrawModel()
	zmlab2.Storage.DrawUI(self)
end

function ENT:OnRemove()
	zmlab2.Storage.OnRemove(self)
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- f846397ffcf09571d053f7b7aff0b4ab920f6d7152aebc0550c4aa612acbeab0

--addons/zeros_methlab02_v1.4.1/lua/entities/zmlab2_storage/shared.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_baseanim/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_frezzer/cl_init.lua:
return gluapack()()
--addons/zeros_methlab_1.6.4/lua/entities/zmlab_methbuyer/shared.lua:
ENT.Base = "base_ai"
ENT.Type = "ai"
ENT.Spawnable = true
ENT.AdminSpawnable = true
ENT.PrintName = "Meth Buyer"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros Meth Lab"
ENT.DisableDuplicator = false
ENT.AutomaticFrameAdvance = true

--addons/zeros_methlab_1.6.4/lua/entities/zmlab_sludge/shared.lua:
ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.AutomaticFrameAdvance = true
ENT.RenderGroup = RENDERGROUP_TRANSLUCENT
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Sludge"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros Meth Lab"

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_bar/cl_init.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

include("shared.lua")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:Draw()
	self:DrawModel()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:DrawTranslucent()
	self:Draw()
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_bar/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_bar_gold.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

AddCSLuaFile()
DEFINE_BASECLASS("zrms_bar")
ENT.Type = "anim"
ENT.Base = "zrms_bar"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Gold Bar"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.Model = "models/Zerochain/props_mining/zrms_bar.mdl"
ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
	self:NetworkVar("String", 0, "MetalType")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if (SERVER) then
		self:SetMetalType("Gold")
	end
end
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_buyer/shared.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_conveyorbelt_n.lua:
return gluapack()()
--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_minecart/shared.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = false
ENT.AdminSpawnable = false
ENT.PrintName = "Cart"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.Model = "models/zerochain/props_mining/me_cart.mdl"
ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_mineentrance_base/shared.lua:
/*
    Addon id: 
    Version: v2.3.6 (stable)
*/

ENT.Type = "anim"
ENT.Base = "base_anim"
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Spawnable = true
ENT.AdminSpawnable = false
ENT.PrintName = "Mining Entrance"
ENT.Author = "ClemensProduction aka Zerochain"
ENT.Information = "info"
ENT.Category = "Zeros RetroMiningSystem"
ENT.Model = "models/zerochain/props_mining/mining_entrance.mdl"
ENT.AutomaticFrameAdvance = true
ENT.DisableDuplicator = false
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

function ENT:SetupDataTables()
	self:NetworkVar("Bool", 1, "HideCart")
	self:NetworkVar("Bool", 0, "IsClosed")

	self:NetworkVar("Int", 0, "CurrentState")

	self:NetworkVar("String", 1, "MineResourceType")
	self:NetworkVar("Entity", 0, "ConnectedOre")

	self:NetworkVar("Float", 0, "MinningTime")
	self:NetworkVar("Float", 1, "StartMinningTime")
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       -- 

	if (SERVER) then
		self:SetIsClosed(true)
		self:SetHideCart(true)
		self:SetCurrentState(0)
		self:SetMineResourceType("Nothing")
		self:SetConnectedOre(nil)
		self:SetMinningTime(-1)
		self:SetStartMinningTime(-1)
	end
end

--addons/zeros_retrominer_v2.3.6/lua/entities/zrms_refiner/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_distillery_constructionkit/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_fuel/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end

function ENT:DrawTranslucent()
	self:Draw()
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_jar/cl_init.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_paperbag/cl_init.lua:
include("shared.lua")

function ENT:Draw()
	self:DrawModel()
end

function ENT:DrawTranslucent()
	self:Draw()
end

function ENT:OnRemove()
	self:StopParticlesNamed("yb_yeast")
end

--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_paperbag/shared.lua:
return gluapack()()
--addons/zeros_yeastbeast_1.1.7/lua/entities/zyb_yeast/shared.lua:
return gluapack()()
--addons/[binbon]arccw_modify/lua/effects/arccw_flashexplosion.lua:
return gluapack()()
--addons/serious_business/lua/effects/sb_work_progress.lua:
/*----------------------------------------------------------------------
Leak by Famouse

Play good games:↓
store.steampowered.com/curator/32364216

Subscribe to the channel:↓
www.youtube.com/c/Famouse

More leaks in the discord:↓ 
https://discord.gg/rFdQwzm
------------------------------------------------------------------------*/

--[[
	Just a first attempt in effect.
	Green text just makes me feel better.
]]--

function EFFECT:Init(data)
	
	local offset = data:GetOrigin();
	local scale = 1;
	
	--sound.Play("garrysmod/balloon_pop_cute.wav", offset, 90, math.random(90, 120));
	
	local particlesAmount = 1;
	local emitter = ParticleEmitter(offset, false);

	local particle = emitter:Add("sgm/playercircle", offset);
	
	if (particle) then
		
		particle:SetVelocity(Vector(math.random(-8, 8), math.random(-8, 8), 64));
		
		particle:SetLifeTime(0);
		particle:SetDieTime(2);
		
		particle:SetStartAlpha(255);
		particle:SetEndAlpha(255);
		
		particle:SetStartSize(8*scale);
		particle:SetEndSize(4*scale);
		
		particle:SetRoll(math.random(180, 480));
		particle:SetRollDelta(math.random(-2, 2));
		
		particle:SetAirResistance(256);
		particle:SetGravity(Vector(0, 0, 64));
		
		particle:SetColor(0, 179, 255);
		
		particle:SetCollide(true);
		particle:SetBounce(1);
		
		particle:SetAngleVelocity(Angle(math.random(-2, 2), math.random(-2, 2), math.random(-2, 2)));
		
		particle:SetLighting(true);
	end;
	emitter:Finish();
end;


function EFFECT:Think()
	return false;
end;


function EFFECT:Render()

end;

/*------------------------------------------------------------------------
Donation for leaks

Qiwi Wallet         4890494419811120 
YandexMoney         410013095053302
WebMoney(WMR)       R235985364414
WebMoney(WMZ)       Z309855690994
------------------------------------------------------------------------*/
--addons/oneprint/lua/oneprint/client/vgui/3d2dvgui.lua:
return gluapack()()
--addons/oneprint/lua/oneprint/client/vgui/tabs/lock.lua:
return gluapack()()
--addons/oneprint/lua/oneprint/client/vgui/tabs/users.lua:
local LockScreen = {}
LockScreen.ID = 3

local matUsers = Material( "materials/oneprint/user.png", "smooth" )

--[[

    LockScreen.Run

]]--

function LockScreen.Run( dBase )
    if not dBase or not IsValid( dBase ) then
        return
    end

    local ePrinter = dBase.eEntity
    if not ePrinter or not IsValid( ePrinter ) or ( ePrinter:GetClass() ~= "oneprint" ) then
        return
    end

    dBase.ActiveTab = vgui.Create( "DPanel", dBase )
    dBase.ActiveTab:SetSize( dBase:GetWide(), dBase:GetTall() )
    dBase.ActiveTab.Paint = nil

    local iSubTitleMargin = ( dBase:GetTall() * .01 )

    local dHeader = vgui.Create( "OnePrintTitle", dBase.ActiveTab )
    dHeader:SetSize( dBase:GetWide() - ( OnePrint.iMargin * 2 ), ( dBase:GetTall() * .09 ) )
    dHeader:SetPos( OnePrint.iMargin, OnePrint.iMargin )
    dHeader:SetHeader( string.upper( OnePrint:L( "Users" ) ), matUsers )

    -- All users
    local dAddUser = vgui.Create( "DPanel", dBase.ActiveTab )
    dAddUser:SetSize( dBase:GetWide() - ( OnePrint.iMargin * 2 ), ( dBase:GetTall() - dHeader:GetTall() - ( OnePrint.iMargin * 4 ) ) * .5 )
    dAddUser:SetPos( OnePrint.iMargin, dHeader:GetTall() + ( OnePrint.iMargin * 2 ) )
    dAddUser.iLayoutTall = ( dAddUser:GetTall() - ( OnePrint.iMargin * 4 ) - 10 )

    dAddUser.dLayout = vgui.Create( "DIconLayout", dAddUser )
    dAddUser.dLayout:SetSize( dAddUser:GetWide() - ( OnePrint.iMargin * 2 ), dAddUser.iLayoutTall )
    dAddUser.dLayout:SetPos( OnePrint.iMargin, ( OnePrint.iMargin * 3 ) )
    dAddUser.dLayout:SetSpaceX( 8 )
    dAddUser.dLayout:SetSpaceY( 8 )

    local iPlyPerPage = 8
    local iCurPage = 1

    local tPages = { [ 1 ] = {} }
    local tUsers = {}

    for _, pPlayer in ipairs( player.GetAll() ) do
        if ( pPlayer == ePrinter:GetOwnerObject() ) then
            continue
        end

        if ( table.Count( tPages[ #tPages ] ) >= iPlyPerPage ) then
            tPages[ #tPages + 1 ] = tPages[ #tPages + 1 ] or {}
        end

        table.insert( tPages[ #tPages ], pPlayer )
    end

    function dAddUser:BuildList( iPage )
        tUsers = ePrinter:GetUsers()
        local iPage = ( tPages[ ( iPage or 1 ) ] and iPage or 1 )

        self.dLayout:Clear()

        for k, v in ipairs( tPages[ iPage ] ) do
            if not IsValid(v) then continue end
            local dPlayer = self.dLayout:Add( "DButton" )
            dPlayer:SetSize( self.dLayout:GetWide(), ( self.iLayoutTall / iPlyPerPage ) - self.dLayout:GetSpaceY() )
            dPlayer:SetText( v:Name() )
            dPlayer:SetFont( "OnePrint.5" )
            dPlayer:SetContentAlignment( 4 )
            dPlayer.fLerpBoxW = 0

            if ePrinter:GetOwnerObject() == v then
                dPlayer.bIsOwner = true
                dPlayer:SetTextColor( OnePrint:C( 2 ) )
            end

            if table.HasValue( tUsers, v ) then
                dPlayer.bIsUser = true
                dPlayer:SetTextColor( OnePrint:C( 2 ) )
            else
                dPlayer.fLerpBoxW = 0
                dPlayer:SetTextColor( OnePrint:C( 5 ) )
            end

            function dPlayer:Paint( iW, iH )
                if self.bIsUser then
                    draw.SimpleText( string.upper( OnePrint:L( "Added" ) ), "OnePrint.6", iW, ( iH * .5 ), self:GetTextColor(), 2, 1 )
                    return
                end

                self.fLerpBoxW = Lerp( RealFrameTime() * 6, self.fLerpBoxW, self.Hovered and ( iH * .25 ) or 0 )

                if ( self.fLerpBoxW > .1 ) then
                    self:SetTextInset( ( self.fLerpBoxW * 2.5 ), 2 )

                    surface.SetDrawColor( OnePrint:C( 6 ) )
                    surface.DrawRect( 0, 0, self.fLerpBoxW, iH )
                end
            end

            function dPlayer:OnCursorEntered()
                if self.bIsUser or self.bIsOwner then
                    return
                end

                self:SetTextColor( OnePrint:C( 6 ) )
                self:SetFont( "OnePrint.4" )
            end

            function dPlayer:OnCursorExited()
                if self.bIsUser or self.bIsOwner then
                    return
                end

                self:SetTextColor( OnePrint:C( 5 ) )
                self:SetFont( "OnePrint.5" )
            end

            function dPlayer:DoClick()
                if self.bIsUser or self.bIsOwner then
                    return
                end

                OnePrint:Play2DSound( "oneprint/keypress_standard.mp3" )

                local sName = v:Name()
                sName = ( string.len( sName ) > 15 ) and ( string.sub( sName, 1, 15 ) .. "..." ) or sName

                OnePrint:CreatePopup( dBase.ActiveTab, string.upper( OnePrint:L( "Add user" ) ) .. " [" .. sName .. "]", OnePrint:L( "Are you sure?" ), {
                    { name = OnePrint:L( "Yes" ), color = OnePrint:C( 3 ), func = function( dPopup )
                        net.Start( "OnePrintNW" )
                            net.WriteUInt( 6, 4 )
                            net.WriteEntity( ePrinter )
                            net.WriteEntity( v )
                        net.SendToServer()

                        if IsValid( dPopup ) then
                            dPopup:Remove()
                        end

                        OnePrint:Play2DSound( "oneprint/keypress_standard.mp3" )

                        timer.Simple( .25, function()
                            if dAddUser and IsValid( dAddUser ) then
                                dAddUser:BuildList( 1 )
                                if dBase.ActiveTab.dCurUsers and IsValid( dBase.ActiveTab.dCurUsers ) then
                                    dBase.ActiveTab.dCurUsers:UpdateUsers()
                                end
                            end
                        end )
                    end },
                    { name = OnePrint:L( "No" ), color = OnePrint:C( 2 ), func = function( dPopup )
                        if IsValid( dPopup ) then
                            dPopup:Remove()
                        end

                        OnePrint:Play2DSound( "oneprint/keypress_standard.mp3" )
                    end },
                } )
            end
        end
    end
    
    function dAddUser:Paint( iW, iH )
        OnePrint:DrawContainer( self, nil, string.upper( OnePrint:L( "Add user" ) ) )
    end

    dAddUser:BuildList( 1 )

    -- Pages
    local dPagesLayout = vgui.Create( "DIconLayout", dAddUser )
    dPagesLayout:SetTall( dBase:GetTall() * .05 )
    dPagesLayout:SetWide( dPagesLayout:GetTall() * table.Count( tPages ) )
    dPagesLayout:AlignLeft( ( dAddUser:GetWide() * .5 ) - ( dPagesLayout:GetWide() * .5 ) )
    dPagesLayout:AlignBottom( OnePrint.iMargin * .5 )

    for k, v in ipairs( tPages ) do
        local dPage = dPagesLayout:Add( "DButton" )
        dPage:SetText( k )
        dPage:SetFont( "OnePrint.5" )
        dPage:SetTextColor( OnePrint:C( 2 ) )
        dPage:SetContentAlignment( 2 )
        dPage:SetSize( dPagesLayout:GetTall(), dPagesLayout:GetTall() )
        dPage.iPageID = k

        function dPage:Paint( iW, iH )
            if ( iCurPage == self.iPageID ) then
                surface.SetDrawColor( self:GetTextColor() )
                surface.DrawRect( ( iW * .5 ) - 10, ( iH - 2 ), 20, 2 )
            end
        end

        function dPage:OnCursorEntered()
            self:SetTextColor( OnePrint:C( 5 ) )
            self:SetFont( "OnePrint.4" )
        end

        function dPage:OnCursorExited()
            self:SetTextColor( OnePrint:C( 2 ) )
            self:SetFont( "OnePrint.5" )
        end

        function dPage:DoClick()
            iCurPage = self.iPageID
            dAddUser:BuildList( iCurPage )

            OnePrint:Play2DSound( "oneprint/keypress_standard.mp3" )
        end
    end

    -- Current users
    dBase.ActiveTab.dCurUsers = vgui.Create( "DPanel", dBase.ActiveTab )
    dBase.ActiveTab.dCurUsers:SetSize( dAddUser:GetWide(), dBase.ActiveTab:GetTall() - dAddUser:GetTall() - dHeader:GetTall() - ( OnePrint.iMargin * 4 ) )
    dBase.ActiveTab.dCurUsers:AlignLeft( OnePrint.iMargin )
    dBase.ActiveTab.dCurUsers:AlignBottom( OnePrint.iMargin )
    dBase.ActiveTab.dCurUsers.iLayoutTall = ( dAddUser:GetTall() - ( OnePrint.iMargin * 4 ) - 10 )

    function dBase.ActiveTab.dCurUsers:Paint( iW, iH )
        OnePrint:DrawContainer( self, nil, string.upper( OnePrint:L( "Manage users" ) ) )
    end

    function dBase.ActiveTab.dCurUsers:UpdateUsers()
        self.dLayout:Clear()

        local dOwner = self.dLayout:Add( "DButton" )
        dOwner:SetSize( self.dLayout:GetWide(), ( self.iLayoutTall / iPlyPerPage ) - self.dLayout:GetSpaceY() )
        dOwner:SetText( ePrinter:GetOwnerObject():Name() )
        dOwner:SetFont( "OnePrint.5" )
        dOwner:SetContentAlignment( 4 )
        dOwner:SetTextColor( OnePrint:C( 2 ) )

        function dOwner:Paint( iW, iH )
            draw.SimpleText( string.upper( OnePrint:L( "Owner" ) ), "OnePrint.6", iW, ( iH * .5 ), self:GetTextColor(), 2, 1 )
        end

        for _, v in ipairs( ePrinter:GetUsers() ) do
            if not v or not IsValid( v ) then
                continue
            end

            local dPlayer = self.dLayout:Add( "DButton" )
            dPlayer:SetSize( self.dLayout:GetWide(), ( self.iLayoutTall / iPlyPerPage ) - self.dLayout:GetSpaceY() )
            dPlayer:SetText( v:Name() )
            dPlayer:SetFont( "OnePrint.5" )
            dPlayer:SetContentAlignment( 4 )
            dPlayer.fLerpBoxW = 0

            function dPlayer:Paint( iW, iH )
                self.fLerpBoxW = Lerp( RealFrameTime() * 6, self.fLerpBoxW, ( self.Hovered and ( iH * .25 ) or 0 ) )

                if ( self.fLerpBoxW > .1 ) then
                    self:SetTextInset( ( self.fLerpBoxW * 2.5 ), 2 )
                    draw.RoundedBox( 0, 0, 0, self.fLerpBoxW, iH, self:GetTextColor() )
                end

                draw.SimpleText( string.upper( OnePrint:L( "Owner" ) ), "OnePrint.6", iW, ( iH * .5 ), self:GetTextColor(), 2, 1 )
            end

            function dPlayer:OnCursorEntered()
                self:SetTextColor( OnePrint:C( 4 ) )
                self:SetFont( "OnePrint.4" )
            end

            function dPlayer:OnCursorExited()
                self:SetTextColor( OnePrint:C( 5 ) )
                self:SetFont( "OnePrint.5" )
            end

            function dPlayer:DoClick()
                local sName = v:Name()
                sName = ( string.len( sName ) > 15 ) and ( string.sub( sName, 1, 15 ) .. "..." ) or sName

                OnePrint:CreatePopup( dBase.ActiveTab, string.upper( OnePrint:L( "Remove user" ) ) .. " [" .. sName .. "]", OnePrint:L( "Are you sure?" ), {
                    { name = OnePrint:L( "Yes" ), color = OnePrint:C( 4 ), func = function( dPopup )
                        print( v )
                        net.Start( "OnePrintNW" )
                            net.WriteUInt( 7, 4 )
                            net.WriteEntity( ePrinter )
                            net.WriteEntity( v )
                        net.SendToServer()

                        if IsValid( dPopup ) then
                            dPopup:Remove()
                        end

                        timer.Simple( .25, function()
                            if dBase.ActiveTab.dCurUsers and IsValid( dBase.ActiveTab.dCurUsers ) then
                                dAddUser:BuildList( iCurPage )
                                dBase.ActiveTab.dCurUsers:UpdateUsers()
                            end
                        end )
                    end },
                    { name = OnePrint:L( "No" ), color = OnePrint:C( 2 ), func = function( dPopup )
                        if IsValid( dPopup ) then
                            dPopup:Remove()
                        end
                    end },
                }, OnePrint:C( 4 ) )
            end
        end
    end

    dBase.ActiveTab.dCurUsers.dLayout = vgui.Create( "DIconLayout", dBase.ActiveTab.dCurUsers )
    dBase.ActiveTab.dCurUsers.dLayout:SetSize( dBase.ActiveTab.dCurUsers:GetWide() - ( OnePrint.iMargin * 2 ), dBase.ActiveTab.dCurUsers.iLayoutTall )
    dBase.ActiveTab.dCurUsers.dLayout:SetPos( OnePrint.iMargin, ( OnePrint.iMargin * 3 ) )
    dBase.ActiveTab.dCurUsers.dLayout:SetSpaceX( 8 )
    dBase.ActiveTab.dCurUsers.dLayout:SetSpaceY( 8 )

    dBase.ActiveTab.dCurUsers:UpdateUsers()
end

OnePrint:RegisterTab( LockScreen )